class C{  public static double[] read(String filename){  byte[] data=readByte(filename);  int n=data.length;  double[] d=new double[n / 2];  for (int i=0; i < n / 2; i++) {    d[i]=((short)(((data[2 * i + 1] & 0xFF) << 8) + (data[2 * i] & 0xFF))) / ((double)MAX_16_BIT);  }  return d;}  }
class C{  @Override public void startElement(String uri,String localName,String name,Attributes attributes){  fixWhiteSpace();  final String ariaLabel=attributes.getValue("aria-label");  final String alt=attributes.getValue("alt");  final String title=attributes.getValue("title");  if (ariaLabel != null) {    mOutputBuilder.append(ariaLabel);  } else   if (alt != null) {    mOutputBuilder.append(alt);  } else   if (title != null) {    mOutputBuilder.append(title);  }  final String role=attributes.getValue("role");  final String roleName=mAriaRoleToDesc.get(role);  final String type=attributes.getValue("type");  final String tagInfo=mTagToDesc.get(name.toLowerCase());  if (roleName != null) {    mPostorderTextStack.push(roleName);  } else   if (name.equalsIgnoreCase("input") && (type != null)) {    final String typeInfo=mInputTypeToDesc.get(type.toLowerCase());    if (typeInfo != null) {      mPostorderTextStack.push(typeInfo);    } else {      mPostorderTextStack.push("");    }  } else   if (tagInfo != null) {    mPostorderTextStack.push(tagInfo);  } else {    mPostorderTextStack.push("");  }  final String value=attributes.getValue("value");  if (value != null) {    String elementType=name;    if (name.equalsIgnoreCase("input") && (type != null)) {      elementType=type;    }    if (!elementType.equalsIgnoreCase("checkbox") && !elementType.equalsIgnoreCase("radio")) {      fixWhiteSpace();      mOutputBuilder.append(value);    }  }}  }
class C{  public boolean isActive(){  return active;}  }
class C{  private static void writeDngBytesAndClose(Image image,TotalCaptureResult captureResult,CameraCharacteristics characteristics,File dngFile){  try (DngCreator dngCreator=new DngCreator(characteristics,captureResult);FileOutputStream outputStream=new FileOutputStream(dngFile)){    dngCreator.writeImage(outputStream,image);    outputStream.close();    image.close();  } catch (  IOException e) {    Log.e(TAG,"Could not store DNG file",e);    return;  }  Log.i(TAG,"Successfully stored DNG file: " + dngFile.getAbsolutePath());}  }
class C{  public BadgedImageView(Context context){  this(context,0,0,Color.WHITE);}  }
class C{  private int filter(int color){  color=color & 0xff;  if (brighter) {    color=(255 - ((255 - color) * (100 - percent) / 100));  } else {    color=(color * (100 - percent) / 100);  }  if (color < 0)   color=0;  if (color > 255)   color=255;  return color;}  }
class C{  private void correctTooSmall(int childCount){  if (mFirstPosition == 0 && childCount > 0) {    final View firstChild=getChildAt(0);    final int firstLeft=firstChild.getLeft();    final int start=mListPadding.left;    final int end=(getRight() - getLeft()) - mListPadding.right;    int leftOffset=firstLeft - start;    View lastChild=getChildAt(childCount - 1);    final int lastRight=lastChild.getRight();    int lastPosition=mFirstPosition + childCount - 1;    if (leftOffset > 0) {      if (lastPosition < mItemCount - 1 || lastRight > end) {        if (lastPosition == mItemCount - 1) {          leftOffset=Math.min(leftOffset,lastRight - end);        }        offsetChildrenLeftAndRight(-leftOffset);        if (lastPosition < mItemCount - 1) {          fillRight(lastPosition + 1,lastChild.getRight() + mDividerWidth);          adjustViewsLeftOrRight();        }      } else       if (lastPosition == mItemCount - 1) {        adjustViewsLeftOrRight();      }    }  }}  }
class C{  public void addScriptDependencyType(String scriptName,String dependencyType){  if (scriptName == null || dependencyType == null)   throw new NullPointerException();  Set<String> dependencySet=scriptToTypes.get(scriptName);  if (dependencySet == null) {    dependencySet=new HashSet<String>();    scriptToTypes.put(scriptName,dependencySet);  }  dependencySet.add(dependencyType);}  }
class C{  public void reset(){  crc=0;}  }
class C{  private void cleanupDiscovery(StorageSystem system){  try {    system.setReachableStatus(false);    system.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.INCOMPATIBLE.name());    _dbClient.persistObject(system);  } catch (  DatabaseException e) {    _log.error("discoverStorage failed.  Failed to update discovery status to ERROR.",e);  }}  }
class C{  private boolean loadFields(){  log.fine("#" + m_vo.TabNo);  if (m_vo.getFields() == null)   return false;  for (int f=0; f < m_vo.getFields().size(); f++) {    GridFieldVO voF=(GridFieldVO)m_vo.getFields().get(f);    if (voF != null) {      GridField field=new GridField(voF);      field.setGridTab(this);      String columnName=field.getColumnName();      if (field.isKey()) {        setKeyColumnName(columnName);      }      if (field.isParentColumn())       m_parents.add(columnName);      int sortNo=field.getSortNo();      if (sortNo == 0)       ; else       if (Math.abs(sortNo) == 1) {        m_OrderBys[0]=columnName;        if (sortNo < 0)         m_OrderBys[0]+=" DESC";      } else       if (Math.abs(sortNo) == 2) {        m_OrderBys[1]=columnName;        if (sortNo < 0)         m_OrderBys[1]+=" DESC";      } else       if (Math.abs(sortNo) == 3) {        m_OrderBys[2]=columnName;        if (sortNo < 0)         m_OrderBys[2]+=" DESC";      }      m_mTable.addField(field);      ArrayList<String> list=field.getDependentOn();      for (int i=0; i < list.size(); i++)       m_depOnField.put(list.get(i),field);      if (columnName.equals("IsActive") || columnName.equals("Processed") || columnName.equals("Processing"))       m_depOnField.put(columnName,null);    }  }  if (!m_mTable.getTableName().equals(X_AD_PInstance_Log.Table_Name)) {    if (m_mTable.getField("Created") == null) {      GridField created=new GridField(GridFieldVO.createStdField(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,m_vo.AD_Window_ID,m_vo.AD_Tab_ID,false,true,true));      m_mTable.addField(created);    }    if (m_mTable.getField("CreatedBy") == null) {      GridField createdBy=new GridField(GridFieldVO.createStdField(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,m_vo.AD_Window_ID,m_vo.AD_Tab_ID,false,true,false));      m_mTable.addField(createdBy);    }    if (m_mTable.getField("Updated") == null) {      GridField updated=new GridField(GridFieldVO.createStdField(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,m_vo.AD_Window_ID,m_vo.AD_Tab_ID,false,false,true));      m_mTable.addField(updated);    }    if (m_mTable.getField("UpdatedBy") == null) {      GridField updatedBy=new GridField(GridFieldVO.createStdField(m_vo.ctx,m_vo.WindowNo,m_vo.TabNo,m_vo.AD_Window_ID,m_vo.AD_Tab_ID,false,false,false));      m_mTable.addField(updatedBy);    }  }  return true;}  }
class C{  public static void registerNatives(){  LoggerDelegate.init();  CommandDelegate.init();}  }
class C{  private static void skipMemberValue(int tag,ByteBuffer buf){switch (tag) {case 'e':    buf.getInt();  break;case '@':skipAnnotation(buf,true);break;case '[':skipArray(buf);break;default :buf.getShort();}}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord || is_ValueChanged("M_ProductBOM_ID")) {    MProduct product=new MProduct(getCtx(),getM_Product_ID(),get_TrxName());    if (get_TrxName() != null)     product.load(get_TrxName());    if (product.isVerified()) {      product.setIsVerified(false);      product.save(get_TrxName());    }  }  return success;}  }
class C{  @Override public int numElements() throws Exception {  if (m_zeroR != null) {    return 1;  }  return m_Tree.numNodes();}  }
class C{  public SQLInputImpl(Object[] attributes,Map<String,Class<?>> map) throws SQLException {  if ((attributes == null) || (map == null)) {    throw new SQLException("Cannot instantiate a SQLInputImpl " + "object with null parameters");  }  attrib=Arrays.copyOf(attributes,attributes.length);  idx=-1;  this.map=map;}  }
class C{  @Override public void scan(ObjectReference object,boolean total){  Address addr=object.toAddress();  if (subspace.addressInRange(addr)) {    VM.scanning.scanObject(closure,object);    super.scan(object,total);  }}  }
class C{  protected void writeBody() throws IOException, BadLocationException {  ElementIterator it=getElementIterator();  it.current();  Element next;  writeStartTag("<body>");  boolean inContent=false;  while ((next=it.next()) != null) {    if (!inRange(next)) {      continue;    }    if (next instanceof AbstractDocument.BranchElement) {      if (inContent) {        writeEndParagraph();        inContent=false;        fontMask=0;      }      writeStartParagraph(next);    } else     if (isText(next)) {      writeContent(next,!inContent);      inContent=true;    } else {      writeLeaf(next);      inContent=true;    }  }  if (inContent) {    writeEndParagraph();  }  writeEndTag("</body>");}  }
class C{  private void destroyBody(Entity e){  jboxWorld.destroyBody(Entities.getPhysics(e).body);}  }
class C{  public Position(int line,int column){  this(-1,line,column);}  }
class C{  public static void resetSelectedUI(){  selectedUI=null;}  }
class C{  public static String escape(String url,String encoding) throws UnsupportedEncodingException {  return escape(url,encoding,false);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.TYPE_VARIABLE_MAPPING__TYPE_VAR:    if (resolve)     return getTypeVar();  return basicGetTypeVar();case TypeRefsPackage.TYPE_VARIABLE_MAPPING__TYPE_ARG:return getTypeArg();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public final IRequest fireMessage(Address recipient,String type){  IRequest r=null;  try {    r=fireMessage(recipient,type,null);  } catch (  Exception e) {  }  return r;}  }
class C{  public double localScore(int i,int[] parents){  double sum=0.0;  for (  BDeuScore score : scores) {    sum+=score.localScore(i,parents);  }  return sum / scores.size();}  }
class C{  public void mouseExited(MouseEvent e){  if (CLogMgt.isLevelFinest())   log.finest("" + this + " - "+ e);}  }
class C{  public short[][] reduce_table(){  return _reduce_table;}  }
class C{  @Override public int delete(Uri uri,String selection,String[] selectionArgs){  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();  int rowsDeleted=0;switch (sUriMatcher.match(uri)) {case ACRONYMS:    rowsDeleted=0;  break;default :throw new UnsupportedOperationException("Unknown uri: " + uri);}if (selection == null || rowsDeleted != 0) getContext().getContentResolver().notifyChange(uri,null);return rowsDeleted;}  }
class C{  public void removeBaseParameter(String key,String value){  remove(key,value);}  }
class C{  public void replace(String re,Object ret){  try {    add(re,ret,true);  } catch (  Exception e) {  }}  }
class C{  public static short[] toPrimitive(final Short[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_SHORT_ARRAY;  }  final short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].shortValue();  }  return result;}  }
class C{  private Set<String> acronyms(Mention mention){  final String text=mention.getText();  final StringBuilder upperCase=new StringBuilder();  final StringBuilder upperAndLowerCase=new StringBuilder();  Set<String> acronyms=new HashSet<>();  boolean considerNext=true;  for (int i=0; i < text.length(); i++) {    final char c=text.charAt(i);    if (considerNext) {      if (Character.isUpperCase(c)) {        upperCase.append(c);        upperAndLowerCase.append(c);      } else {        upperAndLowerCase.append(c);      }      considerNext=false;    }    if (Character.isWhitespace(c)) {      considerNext=true;    }  }  if (upperCase.length() > 2) {    acronyms.add(upperCase.toString());  } else   if (upperCase.length() > 2 && upperAndLowerCase.length() != upperCase.length()) {    acronyms.add(upperAndLowerCase.toString().toUpperCase());  }  return acronyms;}  }
class C{  private void deleteComputeStates(EnumerationDeletionContext context){  List<Operation> deleteOperations=new ArrayList<>();  for (  ComputeState computeStateToDelete : context.instancesToBeDeleted) {    Operation deleteComputeStateOperation=Operation.createDelete(this.getHost(),computeStateToDelete.documentSelfLink).setReferer(getHost().getUri());    deleteOperations.add(deleteComputeStateOperation);    if (computeStateToDelete.networkInterfaceLinks != null) {      for (      String networkLinkToDelete : computeStateToDelete.networkInterfaceLinks) {        Operation deleteNetworkOperation=Operation.createDelete(this.getHost(),networkLinkToDelete).setReferer(getHost().getUri());        deleteOperations.add(deleteNetworkOperation);      }    }    if (computeStateToDelete.diskLinks != null) {      for (      String diskLinkToDelete : computeStateToDelete.diskLinks) {        Operation deleteDiskOperation=Operation.createDelete(this.getHost(),diskLinkToDelete).setReferer(getHost().getUri());        deleteOperations.add(deleteDiskOperation);      }    }  }  if (deleteOperations == null || deleteOperations.size() == 0) {    logInfo("There are no compute states to be deleted from the system.");    deleteResourcesInLocalSystem(context);    return;  }  OperationJoin.JoinedCompletionHandler joinCompletion=null;  OperationJoin joinOp=OperationJoin.create(deleteOperations);  joinOp.setCompletion(joinCompletion);  joinOp.sendWith(getHost());}  }
class C{  public void pad(int factor) throws JSONException {  try {    this.bitwriter.pad(factor);  } catch (  Throwable e) {    throw new JSONException(e);  }}  }
class C{  @Override public void endWindow(){  if (doEmit) {    mergedport.emit(getValue(result));    result=0.0;    doEmit=false;  }}  }
class C{  public HelpTipExample(HelpTipObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getTitle() != null) {    criteria.andTitleEqualTo(sample.getTitle());  }  if (sample.getQuestion() != null) {    criteria.andQuestionEqualTo(sample.getQuestion());  }  if (sample.getAnswer() != null) {    criteria.andAnswerEqualTo(sample.getAnswer());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getUpdated() != null) {    criteria.andUpdatedEqualTo(sample.getUpdated());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }}  }
class C{  public void playExperimental() throws IOException {  ensureLoaded();  try {    SourceDataLine line=AudioSystem.getSourceDataLine(this.aisFormat);    line.open(this.aisFormat);    line.start();    int frameSize=this.aisFormat.getFrameSize();    for (int i=0; i < this.data.length - frameSize * 100; i+=frameSize * 100)     line.write(this.data,i,frameSize * 100);    line.drain();    line.close();  } catch (  LineUnavailableException e) {    throw new IOException(e.getMessage());  }}  }
class C{  public RouteHeader createRouteHeader(Address address){  if (address == null)   throw new NullPointerException("null address arg");  Route route=new Route();  route.setAddress(address);  return route;}  }
class C{  public void addToEnum(EnumDefaultValue enumDefaultValue,List<String> additionalValues){  assert defaultValueEnumNameMap.containsValue(enumDefaultValue) : "Enum did not exist in " + "defaultValueEnumNameMap " + enumDefaultValue;  enumDefaultValue.getDefaultValues().addAll(additionalValues);  for (  String value : additionalValues) {    defaultValueMap.put(value,enumDefaultValue);  }}  }
class C{  public void paintTabbedPaneContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private void export_text(JCas jcas){  StringBuilder text=new StringBuilder();  String documentId;  for (  Token token : select(jcas,Token.class)) {    text.append(token.getCoveredText() + " ");  }  try {    DocumentMetaData d=DocumentMetaData.get(jcas);    documentId=d.getDocumentId();  } catch (  IllegalArgumentException e) {    documentId="generic-" + textId;  }  writeToFile("text",textId,documentId,text.toString());}  }
class C{  public void init() throws ServletException {}  }
class C{  @Field(23) public Pointer<Integer> pscode(){  return this.io.getPointerField(this,23);}  }
class C{  protected final synchronized void clearImpl(Object key){  map.remove(key);  this.notifyAll();}  }
class C{  public CSVWriter(Writer writer,char separator){  this(writer,separator,DEFAULT_QUOTE_CHARACTER);}  }
class C{  @NotNull public Result visitFileEx(@NotNull VirtualFile file){  return visitFile(file) ? CONTINUE : SKIP_CHILDREN;}  }
class C{  private boolean nextChild(){  for (; slot < slotsPerPage; slot++) {    AbstractPage tmp=deref(slot);    if (tmp == null && data.getChildAddr(slot) == NULL) {      continue;    }    tmp=tmp == null ? getChild(slot) : tmp;    if (tmp != child) {      child=tmp;      return true;    }  }  return false;}  }
class C{  protected void init(){  this.lastReportTime=getSimTime();  if (outputInterval > 0) {    createSuffixedOutput(outFileName);  } else {    createOutput(outFileName);  }}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  return findRangeBounds(dataset,this.useYInterval);}  }
class C{  private void updateFieldOptions(){  String currentText=fieldBox.getText();  List<String> fields=influxService.getFields(measurementBox.getText());  if (null != fields) {    fieldBox.setItems(fields.toArray(new String[fields.size()]));  }  fieldBox.setText(currentText);}  }
class C{  protected AbstractLocation(final Id id,final Coord center){  this.id=id;  this.center=center;  if (this.center == null) {    throw new RuntimeException("Location id=" + id + " instanciate without coordinate!");  }}  }
class C{  public void trackPendingDialogCall(FacebookDialog.PendingCall pendingCall){  if (pendingFacebookDialogCall != null) {    Log.i("Facebook","Tracking new app call while one is still pending; canceling pending call.");    cancelPendingAppCall(null);  }  pendingFacebookDialogCall=pendingCall;}  }
class C{  public static File locateReplicatorHomeDir(){  if (replicatorHomeDir == null) {    String replicatorHome=System.getProperty(HOME_DIR);    if (replicatorHome == null)     replicatorHome=System.getProperty("user.dir");    replicatorHomeDir=new File(replicatorHome);    if (!replicatorHomeDir.isDirectory()) {      throw new ServerRuntimeException("Replicator home does not exist or is invalid: " + replicatorHomeDir);    }  }  return replicatorHomeDir;}  }
class C{  public boolean isFastXPath(){  for (  Step step : xpath.getRelativeLocationPaths()) {    if (!step.getAxisSpecifier().getAxisName().toFullString().equals("child")) {      return false;    }    if (step.getAxisSpecifier().getNodeType() != null) {      return false;    }    if (step.getAxisSpecifier().getNodeName() == null) {      return false;    }    if (step.getAxisSpecifier().getNodeName().getNodeName().isEmpty()) {      return false;    }    List<Predicate> predicates=step.getPredicates();    if (predicates.isEmpty() || predicates.size() > 2) {      return false;    }    int positions=0;    int attributes=0;    for (    Predicate pred : step.getPredicates()) {      if (pred.getOrExpressions().size() != 1) {        return false;      }      if (pred.getOrExpressions().get(0).getAndExpressions().size() != 1) {        return false;      }      AndExpression and=pred.getOrExpressions().get(0).getAndExpressions().get(0);      if (and instanceof PositionAndExpression) {        ++positions;      } else       if (and instanceof AttributeAndExpression) {        ++attributes;      }    }    if (positions > 1 || attributes > 1 || (attributes + positions) == 0) {      return false;    }  }  return true;}  }
class C{  public static boolean initWeb(ServletContext context){  if (s_initOK) {    log.info(context.getServletContextName());    return true;  }  Enumeration en=context.getInitParameterNames();  StringBuffer info=new StringBuffer("Servlet Context Init Parameters: ").append(context.getServletContextName());  while (en.hasMoreElements()) {    String name=en.nextElement().toString();    String value=context.getInitParameter(name);    System.setProperty(name,value);    info.append("\n").append(name).append("=").append(value);  }  try {    s_initOK=Adempiere.startup(false);  } catch (  Exception ex) {    log.log(Level.SEVERE,"startup",ex);  }  if (!s_initOK)   return false;  log.info(info.toString());  Properties ctx=new Properties();  MClient client=MClient.get(ctx,0);  MSystem system=MSystem.get(ctx);  return s_initOK;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.292 -0500",hash_original_method="7B5DE20FF19445D9F18EB294E5B92363",hash_generated_method="F466728A08A91AA61DCD7E14427C8EF3") public int receiveFile(String filename,int mode,OutputStream output,String hostname) throws UnknownHostException, IOException {  return receiveFile(filename,mode,output,InetAddress.getByName(hostname),DEFAULT_PORT);}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  public String numAttributesTipText(){  return "The number of attributes the generated data will contain.";}  }
class C{  public synchronized boolean verifyFileAuthTag() throws FileEncryptionException {  byte[] storedTag=backEncRandomAccessFile.readFileAuthenticationTag();  if (storedTag == null || storedTag.length != AUTH_TAG_SIZE) {    throw new FileEncryptionException("Encrypted file has invalid file authentication tag!");  } else {    byte[] tmp=buildFileAuthTag();    return Arrays.equals(tmp,storedTag);  }}  }
class C{  public MapOptions mapTypeControl(boolean mapTypeControl){  this.mapTypeControl=mapTypeControl;  return this;}  }
class C{  public void printMessage(Diagnostic.Kind kind,CharSequence msg,Element e,AnnotationMirror a){  printMessage(kind,msg,e,a,null);}  }
class C{  private void refreshMarkers(){  removeAll();  Map markerMap=new HashMap();  List notices=textArea.getParserNotices();  for (Iterator i=notices.iterator(); i.hasNext(); ) {    ParserNotice notice=(ParserNotice)i.next();    if (notice.getLevel() <= levelThreshold || (notice instanceof TaskNotice)) {      Integer key=new Integer(notice.getLine());      Marker m=(Marker)markerMap.get(key);      if (m == null) {        m=new Marker(notice);        m.addMouseListener(listener);        markerMap.put(key,m);        add(m);      } else {        m.addNotice(notice);      }    }  }  if (getShowMarkedOccurrences() && textArea.getMarkOccurrences()) {    List occurrences=textArea.getMarkedOccurrences();    for (Iterator i=occurrences.iterator(); i.hasNext(); ) {      DocumentRange range=(DocumentRange)i.next();      int line=0;      try {        line=textArea.getLineOfOffset(range.getStartOffset());      } catch (      BadLocationException ble) {        continue;      }      ParserNotice notice=new MarkedOccurrenceNotice(range);      Integer key=new Integer(line);      Marker m=(Marker)markerMap.get(key);      if (m == null) {        m=new Marker(notice);        m.addMouseListener(listener);        markerMap.put(key,m);        add(m);      } else {        if (!m.containsMarkedOccurence()) {          m.addNotice(notice);        }      }    }  }  revalidate();  repaint();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean equals(Object obj){  return super.equals(obj);}  }
class C{  public static Entity exposed_findC3Spotter(IGame game,Entity attacker,Targetable target){  return findC3Spotter(game,attacker,target);}  }
class C{  public FbBlob createBlob(boolean segmented) throws SQLException {  BlobParameterBuffer blobParameterBuffer=database.createBlobParameterBuffer();  blobParameterBuffer.addArgument(BlobParameterBuffer.TYPE,segmented ? BlobParameterBuffer.TYPE_SEGMENTED : BlobParameterBuffer.TYPE_STREAM);  FbBlob blob=database.createBlobForOutput(getCurrentTransaction(),blobParameterBuffer);  blob.open();  return blob;}  }
class C{  public RSAESOAEPparams(){  hashAlgorithm=DEFAULT_HASH_ALGORITHM;  maskGenAlgorithm=DEFAULT_MASK_GEN_FUNCTION;  pSourceAlgorithm=DEFAULT_P_SOURCE_ALGORITHM;}  }
class C{  private void showToast(String msg){  Toast.makeText(this,msg,Toast.LENGTH_SHORT).show();}  }
class C{  @Override public boolean stop(){  if (!_lifecycle.toStopping()) {    return false;  }  log.finest(this + " stopping");  destroy();  return true;}  }
class C{  public StringBuilder(java.lang.String str){}  }
class C{  public static boolean close(final ServerSocket serverSocket){  if (serverSocket != null) {    try {      serverSocket.close();    } catch (    IOException ignore) {      return false;    }  }  return true;}  }
class C{  public MapContent(InputStream content) throws IOException {  this(new JSONParser().parse(new InputStreamReader(content)));}  }
class C{  public void beginTransaction() throws IOException {  if (inTransaction)   throw new IllegalStateException("You can't start a transaction twice. this: " + this);  inTransaction=true;  lastTransactionInsertId=committedNextRowId - 1;synchronized (this) {    rwRaf.setLength(HEADER_SIZE + recordSize * committedNextRowId);  }  insertRecordOut=new BufferedOutputStream(insertRecordFileOut=new FileOutputStream(filename,true));  rollForwardOut=new BufferedOutputStream(rollForwardFileOut=new FileOutputStream(getRollForwardFile(true)));  writeRollForwardHeader();}  }
class C{  public VeraPDFException(String message){  super(message);}  }
class C{  public void translate(float tx,float ty){  g.translate(tx,ty);}  }
class C{  public boolean isPrefix(){  return !isPostfix;}  }
class C{  public boolean configFileExists(String collection,String fileName) throws KeeperException, InterruptedException {  Stat stat=zkClient.exists(CONFIGS_ZKNODE + "/" + collection+ "/"+ fileName,null,true);  return stat != null;}  }
class C{  public T caseModel(Model object){  return null;}  }
class C{  private void sizeIt(){  m_frame.pack();  Dimension size=m_frame.getPreferredSize();  size.width=WINDOW_WIDTH;  m_frame.setSize(size);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.CODE_LANGS___ANONYMOUS_CODE_LANGS_11:    return anonymous_codeLangs_1_1 != null && !anonymous_codeLangs_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private String toHexString(byte[] arr){  StringBuffer buf=new StringBuffer(arr.length * 2);  for (  byte b : arr) {    buf.append(String.format("%02x",b & 0xFF));  }  return buf.toString();}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public static void main(String[] args) throws Exception {  new ResultFileMerger().start(args);}  }
class C{  private final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=archiveConsumpQueueDAO.totalRecordCount().intValue();    List<com.wipro.ats.bdre.md.dao.jpa.ArchiveConsumpQueue> jpaAcqList=archiveConsumpQueueDAO.list(startPage,pageSize);    List<ArchiveConsumpQueue> archiveConsumpQueues=new ArrayList<ArchiveConsumpQueue>();    for (    com.wipro.ats.bdre.md.dao.jpa.ArchiveConsumpQueue jpaAcq : jpaAcqList) {      ArchiveConsumpQueue archiveConsumpQueue=new ArchiveConsumpQueue();      archiveConsumpQueue.setQueueId(jpaAcq.getQueueId());      archiveConsumpQueue.setStartTs(jpaAcq.getStartTs());      archiveConsumpQueue.setEndTs(jpaAcq.getEndTs());      archiveConsumpQueue.setInsertTs(jpaAcq.getInsertTs());      archiveConsumpQueue.setProcessId(jpaAcq.getProcess().getProcessId());      archiveConsumpQueue.setSourceProcessId(jpaAcq.getSourceProcessId());      archiveConsumpQueue.setSourceBatchId(jpaAcq.getBatchBySourceBatchId().getBatchId());      if (jpaAcq.getBatchByTargetBatchId() != null) {        archiveConsumpQueue.setTargetBatchId(jpaAcq.getBatchByTargetBatchId().getBatchId());      }      archiveConsumpQueue.setBatchMarking(jpaAcq.getBatchMarking());      archiveConsumpQueue.setBatchState(jpaAcq.getBatchStatus().getBatchStateId());      archiveConsumpQueue.setCounter(counter);      archiveConsumpQueues.add(archiveConsumpQueue);    }    for (    ArchiveConsumpQueue acq : archiveConsumpQueues) {      if (acq.getEndTs() != null) {        acq.setTableEndTS(DateConverter.dateToString(acq.getEndTs()));      }      if (acq.getStartTs() != null) {        acq.setTableStartTS(DateConverter.dateToString(acq.getStartTs()));      }      acq.setTableInsertTS(DateConverter.dateToString(acq.getInsertTs()));    }    restWrapper=new RestWrapper(archiveConsumpQueues,RestWrapper.OK);    LOGGER.info("All records listed from ArchiveConsumpQueue by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private void addLicenseToDiskLicenseFile(String licenseText){  deleteCurrentLicenseFileOnDisk();  writeFile(LicenseConstants.LICENSE_FILE_PATH,licenseText);}  }
class C{  public FrequentItemset(IntColumn sets,IntColumn items,double supportThreshold){  Table temp=Table.create("temp");  temp.addColumn(sets.copy());  temp.addColumn(items.copy());  temp.sortAscendingOn(sets.name(),items.name());  ViewGroup baskets=temp.splitOn(temp.column(0));  this.setCount=baskets.size();  int[][] itemsets=new int[setCount][];  int basketIndex=0;  for (  TemporaryView basket : baskets) {    IntRBTreeSet set=new IntRBTreeSet(basket.intColumn(1).data());    int itemIndex=0;    itemsets[basketIndex]=new int[set.size()];    for (    int item : set) {      itemsets[basketIndex][itemIndex]=item;      itemIndex++;    }    basketIndex++;  }  this.model=new FPGrowth(itemsets,supportThreshold);}  }
class C{  public CSVReaderBuilder withVerifyReader(boolean verifyReader){  this.verifyReader=verifyReader;  return this;}  }
class C{  public void nextGeneration(){  generation++;}  }
class C{  public void add(Coordinate[] ring){  setBasePoint(ring[0]);  addShell(ring);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.ATTRIBUTE__NAME:    setName((String)newValue);  return;case MappingPackage.ATTRIBUTE__VALUE:setValue((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static double[] castToDoubleArray(byte[] data){  double[] result=new double[data.length];  for (int i=0; i < result.length; i++) {    result[i]=data[i];  }  return result;}  }
class C{  public void onUpOrCancel(long time){  if (mPinch0TabIndex >= 0) {    startAnimation(time,OverviewAnimationType.REACH_TOP);    requestUpdate();  }  commitDiscard(time,true);  resetInputActionIndices();  springBack(time);}  }
class C{  @Override protected void initData(){  this.classes=new ArrayList<>();  this.setListData();  this.adapter=new MenuRecyclerViewAdapter();  this.adapter.setList(classes);  this.menuList.setAdapter(adapter);}  }
class C{  public InformationModelSwitch(){  if (modelPackage == null) {    modelPackage=InformationModelPackage.eINSTANCE;  }}  }
class C{  public BindingConverter(){}  }
class C{  public synchronized boolean safeCount(int partition,long offset) throws IOException {  AtomicLong counter=null;  if (partition >= this.counters.length) {    this.counters=Arrays.copyOf(this.counters,this.counters.length + GROWBY);  }  counter=counters[partition];  if (null == counter) {    counter=new AtomicLong(0L);    counters[partition]=counter;    counter.set(offset);    if (null != committedOffsets && committedOffsets.length > partition && committedOffsets[partition] >= 0 && 2 < (offset - committedOffsets[partition])) {      labels.clear();      labels.put(SensisionConstants.SENSISION_LABEL_TOPIC,this.topic);      labels.put(SensisionConstants.SENSISION_LABEL_GROUPID,this.groupid);      labels.put(SensisionConstants.SENSISION_LABEL_PARTITION,Integer.toString(partition));      Sensision.update(SensisionConstants.SENSISION_CLASS_WARP_KAFKA_CONSUMER_OFFSET_FORWARD_LEAPS,labels,1);      throw new IOException("Kafka offset " + offset + " leapt forward relative to previously committed value "+ committedOffsets[partition]);    }  } else {    long previousOffset=counter.getAndSet(offset);    if (1 < (offset - previousOffset)) {      labels.clear();      labels.put(SensisionConstants.SENSISION_LABEL_TOPIC,this.topic);      labels.put(SensisionConstants.SENSISION_LABEL_GROUPID,this.groupid);      labels.put(SensisionConstants.SENSISION_LABEL_PARTITION,Integer.toString(partition));      Sensision.update(SensisionConstants.SENSISION_CLASS_WARP_KAFKA_CONSUMER_OFFSET_FORWARD_LEAPS,labels,1);      throw new IOException("Kafka offset " + offset + " leapt forward relative to previous offset "+ previousOffset);    }  }  if (null != committedOffsets && committedOffsets.length > partition && offset <= committedOffsets[partition]) {    labels.clear();    labels.put(SensisionConstants.SENSISION_LABEL_TOPIC,this.topic);    labels.put(SensisionConstants.SENSISION_LABEL_GROUPID,this.groupid);    labels.put(SensisionConstants.SENSISION_LABEL_PARTITION,Integer.toString(partition));    Sensision.update(SensisionConstants.SENSISION_CLASS_WARP_KAFKA_CONSUMER_OFFSET_BACKWARD_LEAPS,labels,1);    return false;  }  return true;}  }
class C{  public Contributor(String name,URI uri,String email){  super(KEY,name,uri,email);}  }
class C{  public void addNavigationListener(NavigationListener l){  navigationListeners.add(l);}  }
class C{  public long convert(){  return ints2long(high,low);}  }
class C{  protected Node newNode(){  return new SVGOMFlowRegionElement();}  }
class C{  public boolean isClean(){  return "clean".equals(repositoryStatus);}  }
class C{  public static SendableAudioMessageBuilder builder(){  return new SendableAudioMessageBuilder();}  }
class C{  public static void uiImpl(){  UIManager.put("List.border",new BorderUIResource(BorderFactory.createEmptyBorder(0,0,0,0)));  UIManager.put("List.focusCellHighlightBorder",new BorderUIResource(BorderFactory.createEmptyBorder(1,8,5,3)));  UIManager.put("List.focusSelectedCellHighlightBorderColor",new ColorUIResource(new Color(252,87,84)));  UIManager.put("List.focusSelectedCellHighlightBorderHighlightColor",new ColorUIResource(new Color(255,255,255,70)));  UIManager.put("List.focusSelectedCellHighlightBorder",new BorderUIResource(new org.jb2011.lnf.beautyeye.ch19_list.__UI__.FocusSelectedCellHighlightBorder()));  UIManager.put("List.cellNoFocusBorder",new BorderUIResource(BorderFactory.createEmptyBorder(1,8,5,3)));  UIManager.put("List.background",new ColorUIResource(Color.white));  UIManager.put("List.foreground",new ColorUIResource(BeautyEyeLNFHelper.commonForegroundColor));  UIManager.put("List.selectionForeground",Color.white);  UIManager.put("List.selectionBackground",new ColorUIResource(BeautyEyeLNFHelper.commonSelectionBackgroundColor));  UIManager.put("List.cellRenderer",new MyDefaultListCellRenderer.UIResource());  UIManager.put("ListUI",org.jb2011.lnf.beautyeye.ch19_list.BEListUI.class.getName());}  }
class C{  @Override public synchronized CacheObject<V> put(K key,CacheObject<V> value){  if (cache.size() >= maxSize) {    if (removeExpired() <= 0) {      if (cacheFullRemoveType instanceof RemoveTypeNotRemove) {        return null;      }      if (fullRemoveOne() == null) {        return null;      }    }  }  value.setEnterTime(System.currentTimeMillis());  cache.put(key,value);  return value;}  }
class C{  public void stop(){  isAlive=false;  holdingBuffer.clear();  IOUtils.closeQuietly(this);}  }
class C{  public static Predicate<String> contains(final String pattern){  Objects.requireNonNull(pattern,"The pattern must not be null");  return null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public PairedStatsCorrected(double sig,double testTrainRatio){  super(sig);  m_testTrainRatio=testTrainRatio;}  }
class C{  public static void sort(byte[] a){  sort1(a,0,a.length);}  }
class C{  File expandToDirectory(File inputFile) throws IOException, CommandException {  if (inputFile.isDirectory()) {    return inputFile;  }  String lowerName=inputFile.getName().toLowerCase();  if (lowerName.endsWith(".tar.gz") || lowerName.endsWith(".tar")) {    return tarUtils.expandTar(inputFile);  }  return null;}  }
class C{  protected boolean validatePendingAdd(Object targetChild){  return true;}  }
class C{  public void testMoveFileSourceMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  create(igfs,paths(DIR_NEW,SUBDIR_NEW),paths(FILE));  igfs.rename(FILE,SUBDIR_NEW);  checkExist(igfs,DIR,SUBDIR);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,FILE.name()));  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  private boolean permissionOnInAndroid(String permission,Context context){  if (!BuildInfo.isMncOrLater())   return true;  return PackageManager.PERMISSION_GRANTED == context.getPackageManager().checkPermission(permission,context.getPackageName());}  }
class C{  public PlatformDotNetCacheStore(Object nativeFactory){  assert nativeFactory != null;  this.nativeFactory=nativeFactory;}  }
class C{  public void push(final Handle handle){  mv.visitLdcInsn(handle);}  }
class C{  public static void updateFromModel(IJavaProject eclipseProject,OmniEclipseProject gradleProject,Set<OmniEclipseProject> allGradleProjects,IProgressMonitor monitor) throws JavaModelException {  GradleClasspathContainerUpdater updater=new GradleClasspathContainerUpdater(eclipseProject,gradleProject,allGradleProjects);  updater.updateClasspathContainer(monitor);}  }
class C{  @Override public void onUpdate(Detector.Detections<T> detectionResults,T item){  mOverlay.add(mGraphic);  mGraphic.updateItem(item);}  }
class C{  private void configurePartitioner(final DocumentHandle documentHandle){  final DocumentPartitioner partitioner=configuration.getPartitioner();  if (partitioner != null) {    partitioner.setDocumentHandle(documentHandle);    documentHandle.getDocEventBus().addHandler(DocumentChangeEvent.TYPE,partitioner);    partitioner.initialize();  }}  }
class C{  @Override public void validate(FacesContext context,UIComponent component,Object value){  if (context == null) {    throw new NullPointerException();  }  if (component == null) {    throw new NullPointerException();  }  if (value == null) {    return;  }  FacesMessage fmsg;  Locale locale=context.getViewRoot().getLocale();  if (regex == null || regex.length() == 0) {    fmsg=MessageFactory.getMessage(locale,PATTERN_NOT_SET_MESSAGE_ID,(Object)null);    throw new ValidatorException(fmsg);  }  try {    Pattern pattern=Pattern.compile(regex);    Matcher matcher=pattern.matcher((String)value);    if (!matcher.matches()) {      Object[] params={regex};      fmsg=MessageFactory.getMessage(locale,NOT_MATCHED_MESSAGE_ID,params);      throw new ValidatorException(fmsg);    }  } catch (  PatternSyntaxException pse) {    fmsg=MessageFactory.getMessage(locale,MATCH_EXCEPTION_MESSAGE_ID,(Object)null);    throw new ValidatorException(fmsg,pse);  }}  }
class C{  public String toDebugString(){  StringBuffer sb=new StringBuffer();  if (fullSyncRequested) {    sb.append("f1");  }  if (partialSyncUnavailable) {    sb.append("r1");  }  if (hasHardError()) {    sb.append("X1");  }  if (stats.numParseExceptions > 0) {    sb.append("e").append(stats.numParseExceptions);  }  if (stats.numConflictDetectedExceptions > 0) {    sb.append("c").append(stats.numConflictDetectedExceptions);  }  if (stats.numAuthExceptions > 0) {    sb.append("a").append(stats.numAuthExceptions);  }  if (tooManyDeletions) {    sb.append("D1");  }  if (tooManyRetries) {    sb.append("R1");  }  if (databaseError) {    sb.append("b1");  }  if (hasSoftError()) {    sb.append("x1");  }  if (syncAlreadyInProgress) {    sb.append("l1");  }  if (stats.numIoExceptions > 0) {    sb.append("I").append(stats.numIoExceptions);  }  return sb.toString();}  }
class C{  private double empiricalHSIC(TetradMatrix Ky,TetradMatrix Kx,TetradMatrix Kz,int m){  TetradMatrix Kyx=Ky.times(Kx);  TetradMatrix Kyz=Ky.times(Kz);  TetradMatrix Kzx=Kz.times(Kx);  TetradMatrix Kzreg=Kz.copy();  for (int i=0; i < m; i++) {    double ent=(Kzreg.get(i,i) + this.regularizer);    Kzreg.set(i,i,ent);  }  TetradMatrix A=Kzreg.inverse();  Kzreg=A.times(A);  TetradMatrix Kyzzregzx=new TetradMatrix(m,m);  A=Kyz.times(Kzreg);  Kyzzregzx=A.times(Kzx);  TetradMatrix Kyzzregzxzzregz=Kyzzregzx.copy();  Kyzzregzxzzregz=Kyzzregzx.times(Kz);  A=Kyzzregzxzzregz.times(Kzreg);  Kyzzregzxzzregz=A.times(Kz);  double empHSIC=0.0;  for (int i=0; i < m; i++) {    empHSIC+=Kyx.get(i,i);    empHSIC+=(-2 * Kyzzregzx.get(i,i));    empHSIC+=Kyzzregzxzzregz.get(i,i);  }  empHSIC/=Math.pow(m - 1,2);  double Bz=0.0;  for (int i=0; i < (m - 1); i++) {    for (int j=(i + 1); j < m; j++) {      Bz+=Math.pow(Kz.get(i,j),2);      Bz+=Math.pow(Kz.get(j,i),2);    }  }  Bz=(m * (m - 1)) / Bz;  empHSIC*=Bz;  return empHSIC;}  }
class C{  public long roundHalfCeiling(long instant){  throw unsupported();}  }
class C{  public Partial withChronologyRetainFields(Chronology newChronology){  newChronology=DateTimeUtils.getChronology(newChronology);  newChronology=newChronology.withUTC();  if (newChronology == getChronology()) {    return this;  } else {    Partial newPartial=new Partial(newChronology,iTypes,iValues);    newChronology.validate(newPartial,iValues);    return newPartial;  }}  }
class C{  public static void makeGrid(Container parent,int rows,int cols,int initialX,int initialY,int xPad,int yPad){  SpringLayout layout;  try {    layout=(SpringLayout)parent.getLayout();  } catch (  ClassCastException exc) {    if (MainFrame.GUI2_DEBUG) {      System.err.println("The first argument to makeGrid must use SpringLayout.");    }    return;  }  Spring xPadSpring=Spring.constant(xPad);  Spring yPadSpring=Spring.constant(yPad);  Spring initialXSpring=Spring.constant(initialX);  Spring initialYSpring=Spring.constant(initialY);  int max=rows * cols;  Spring maxWidthSpring=layout.getConstraints(parent.getComponent(0)).getWidth();  Spring maxHeightSpring=layout.getConstraints(parent.getComponent(0)).getWidth();  for (int i=1; i < max; i++) {    SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    maxWidthSpring=Spring.max(maxWidthSpring,cons.getWidth());    maxHeightSpring=Spring.max(maxHeightSpring,cons.getHeight());  }  for (int i=0; i < max; i++) {    SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    cons.setWidth(maxWidthSpring);    cons.setHeight(maxHeightSpring);  }  SpringLayout.Constraints lastCons=null;  SpringLayout.Constraints lastRowCons=null;  for (int i=0; i < max; i++) {    SpringLayout.Constraints cons=layout.getConstraints(parent.getComponent(i));    if (i % cols == 0) {      lastRowCons=lastCons;      cons.setX(initialXSpring);    } else {      assert lastCons != null;      cons.setX(Spring.sum(lastCons.getConstraint(SpringLayout.EAST),xPadSpring));    }    if (i / cols == 0) {      cons.setY(initialYSpring);    } else {      assert lastRowCons != null;      cons.setY(Spring.sum(lastRowCons.getConstraint(SpringLayout.SOUTH),yPadSpring));    }    lastCons=cons;  }  assert lastCons != null;  SpringLayout.Constraints pCons=layout.getConstraints(parent);  pCons.setConstraint(SpringLayout.SOUTH,Spring.sum(Spring.constant(yPad),lastCons.getConstraint(SpringLayout.SOUTH)));  pCons.setConstraint(SpringLayout.EAST,Spring.sum(Spring.constant(xPad),lastCons.getConstraint(SpringLayout.EAST)));}  }
class C{  public static Scorer serializableInstance(){  return new DagScorer(CovarianceMatrix.serializableInstance());}  }
class C{  public CapabilitiesFilterDialog(){  super();  m_Self=this;  initGUI();}  }
class C{  @Override public void addMessageWithSound(final String message,final String from,final boolean thirdperson,final String sound){  final Runnable runner=null;  if (SwingUtilities.isEventDispatchThread()) {    runner.run();  } else {    SwingUtilities.invokeLater(runner);  }}  }
class C{  public boolean shouldBeIgnored(AbstractFileObject abstractFileObject,ICvsFileSystem cvsFileSystem){  final String noneCvsFile=abstractFileObject.getName();  for (Iterator it=patterns.iterator(); it.hasNext(); ) {    final IStringPattern pattern=(IStringPattern)it.next();    if (pattern.doesMatch(noneCvsFile)) {      return true;    }  }  return false;}  }
class C{  public boolean hasUri(){  return hasExtension(Uri.class);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String outputHeader=null;  int numRows;  int numCols;  int row;  int col;  double z;  int i;  int c;  int x, y;  double noData;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      mdInfPower=Double.parseDouble(args[i]);    } else     if (i == 3) {      caThreshold=Double.parseDouble(args[i]);    } else     if (i == 4) {      caThresholdType=args[i].toLowerCase();    }  }  if ((demHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpArea=new WhiteboxRaster(outputHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpArea.isTemporaryFile=true;    tmpCount=new WhiteboxRaster(outputHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpCount.isTemporaryFile=true;switch (caThresholdType) {case "specific catchment area (sca)":      caThreshold=caThreshold / gridRes;    break;case "total catchment area":  caThreshold=caThreshold / (gridRes * gridRes);break;default :break;}updateProgress("Loop 1 of 2:",0);for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {z=dem.getValue(row,col);if (z != noData) {i=0;for (c=0; c < 8; c++) {  x=col + xd[c];  y=row + yd[c];  if (z < dem.getValue(y,x)) {    i++;  }}tmpArea.setValue(row,col,1);tmpCount.setValue(row,col,i);output.setValue(row,col,-1);} else {tmpArea.setValue(row,col,noData);output.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 1 of 2:",(int)progress);}updateProgress("Loop 2 of 2:",0);for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {if (dem.getValue(row,col) != noData) {if (tmpCount.getValue(row,col) == 0) {  MDInfAccum(row,col,mdInfPower,noData);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Loop 2 of 2:",(int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());dem.close();output.close();tmpArea.close();tmpCount.close();returnData(outputHeader);} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public ZyGraphEdgeSettings(final GraphSettingsConfigItem type){  this.type=Preconditions.checkNotNull(type,"IE02017: Type argument can't be null");  if (type instanceof CallGraphSettingsConfigItem) {    setDisplayMultipleEdgesAsOne(type.isMultipleEdgesAsOne());  }}  }
class C{  public static boolean isEquivalent(ArrayList<PathParser.PathDataNode> original,ArrayList<PathParser.PathDataNode> alternative){  int innerStart=0;  for (  PathParser.PathDataNode o : original) {    boolean found=false;    for (int i=innerStart; i < alternative.size() && !found; i++) {      PathParser.PathDataNode n=alternative.get(i);      if ((o.type == n.type && Arrays.equals(o.params,n.params)) || ((o.type == 'Z' || o.type == 'z') && n.type == 'L')) {        found=true;        innerStart=i + 1;      }    }    if (!found)     return false;  }  return true;}  }
class C{  protected void notifyHistoryChangedListeners(){  Iterator<HistoryChangedListener> iter;  HistoryChangedListener l;  iter=m_HistoryChangedListeners.iterator();  while (iter.hasNext()) {    l=iter.next();    l.historyChanged(new HistoryChangedEvent(this,HISTORY_NAME,getHistory()));  }}  }
class C{  public static Map<String,Object> taskArgument(UUID nodeId,UUID futId,int pageSize,int maxRows){  assert nodeId != null;  assert futId != null;  assert pageSize > 0;  assert maxRows >= 0;  Map<String,Object> map=U.newHashMap(4);  map.put("nodeId",nodeId);  map.put("futId",futId);  map.put("pageSize",pageSize);  map.put("maxRows",maxRows);  return map;}  }
class C{  public void requestPermissions(Fragment fragment,String[] permissions,int requestCode){  FragmentCompat.requestPermissions(fragment,permissions,requestCode);}  }
class C{  public static BigInteger[] signAndFromatToRS(PrivateKey priv,byte[] input){  X9ECParameters params=SECNamedCurves.getByName("secp256r1");  ECDomainParameters ecParams=new ECDomainParameters(params.getCurve(),params.getG(),params.getN(),params.getH());  if (priv == null)   throw new IllegalStateException("This ECKey does not have the private key necessary for signing.");  ECDSASigner signer=new ECDSASigner();  ECPrivateKeyParameters privKey=new ECPrivateKeyParameters(((ECPrivateKey)priv).getS(),ecParams);  signer.init(true,privKey);  BigInteger[] sigs=signer.generateSignature(input);  return sigs;}  }
class C{  public void add(long value){  if (size == values.length) {    values=Arrays.copyOf(values,size * 2);  }  values[size++]=value;}  }
class C{  @Before public void onSuperBefore(){  doBefore();  MockitoAnnotations.initMocks(this);}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  public boolean isAccepted(){  return accepted;}  }
class C{  private void assertParameterEquals(Parameter expectedParameter,List<Parameter> actualParameters){  String name=expectedParameter.getName();  Parameter actualParameter=getParameter(name,actualParameters);  Assert.assertNotNull("parameter ['" + name + "'] not found",actualParameter);  Assert.assertEquals("parameter ['" + name + "'] value",actualParameter.getValue(),expectedParameter.getValue());}  }
class C{  private static String unsignedToString(final int value){  if (value >= 0) {    return Integer.toString(value);  } else {    return Long.toString(((long)value) & 0x00000000FFFFFFFFL);  }}  }
class C{  private void scan(){  if (!isScanScheduled) {    return;  }  isScanScheduled=false;  final World world=getCasing().getCasingWorld();  final BlockPos neighborPos=getCasing().getPosition().offset(Face.toEnumFacing(getFace()));  final EnumFacing neighborSide=Face.toEnumFacing(getFace().getOpposite());  if (world.isBlockLoaded(neighborPos)) {    final SerialInterfaceProvider provider=SerialAPI.getProviderFor(world,neighborPos,neighborSide);    if (provider != null) {      if (!serialInterface.map(null).orElse(false)) {        reset();        serialInterface=Optional.ofNullable(provider.interfaceFor(world,neighborPos,neighborSide));        if (serialInterface.isPresent() && serialInterfaceNbt.isPresent()) {          serialInterface.get().readFromNBT(serialInterfaceNbt.get());          serialInterfaceNbt=Optional.empty();        }      }    } else {      reset();    }  } else {    reset();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private synchronized void removeOld(){  if (!settings.getBoolean("statusHistoryClear")) {    return;  }  long days=settings.getLong("statusHistoryKeepDays");  long keepAfter=System.currentTimeMillis() - days * DAY;  Iterator<Map.Entry<StatusHistoryEntry,StatusHistoryEntry>> it=entries.entrySet().iterator();  int countRemoved=0;  while (it.hasNext()) {    Map.Entry<StatusHistoryEntry,StatusHistoryEntry> entry=it.next();    if (!entry.getValue().favorite && entry.getValue().lastActivity < keepAfter) {      it.remove();      countRemoved++;    }  }  if (countRemoved > 0) {    LOGGER.info("StatusPresets: Removed " + countRemoved + " old entries.");  }}  }
class C{  public static String indent(int indent){  StringBuffer s=new StringBuffer();  for (int i=0; i < indent; i++) {    s.append(" ");  }  return s.toString();}  }
class C{  private void unlockFocus(){  Log.d(TAG,"unlockFocus: ");  try {    if (mEnabledAutoFocus) {      mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_CANCEL);      mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AE_MODE,CaptureRequest.CONTROL_AE_MODE_ON_AUTO_FLASH);    }    mCaptureSession.capture(mPreviewRequestBuilder.build(),mCaptureCallback,mBackgroundHandler);    mState=STATE_PREVIEW;    mCaptureSession.setRepeatingRequest(mPreviewRequest,mCaptureCallback,mBackgroundHandler);  } catch (  CameraAccessException e) {    e.printStackTrace();  }}  }
class C{  protected Map<String,String> overrides(){  return Collections.emptyMap();}  }
class C{  public Insn(int opc,Label target,int line) throws jasError {  this.opc=opc;switch (opc) {case opc_jsr:case opc_goto:case opc_if_acmpne:case opc_if_acmpeq:case opc_if_icmpge:case opc_if_icmple:case opc_if_icmpgt:case opc_if_icmplt:case opc_if_icmpne:case opc_if_icmpeq:case opc_ifge:case opc_ifgt:case opc_ifne:case opc_ifle:case opc_iflt:case opc_ifeq:case opc_ifnull:case opc_ifnonnull:    operand=new LabelOperand(target,this,line);  break;case opc_goto_w:case opc_jsr_w:operand=new LabelOperand(target,this,true,line);break;default :throw new jasError(opcNames[opc] + " does not take a label as its argument");}}  }
class C{  public static String extractActualInstanceType(String instanceType){  String[] split=instanceType.split("/");  return split[split.length - 1];}  }
class C{  public void addLayoutComponent(Component comp,Object constraints){  if (constraints instanceof GridBagConstraints) {    setConstraints(comp,(GridBagConstraints)constraints);  } else   if (constraints != null) {    throw new IllegalArgumentException("cannot add to layout: constraints must be a GridBagConstraint");  }}  }
class C{  public PaymentInfoFree(double dTotal){  m_dTotal=dTotal;}  }
class C{  public FloatMemberValue(ConstPool cp){  super('F',cp);  setValue(0.0F);}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  public TransactionOutput(NetworkParameters params,@Nullable Transaction parent,byte[] payload,int offset,MessageSerializer serializer) throws ProtocolException {  super(params,payload,offset,parent,serializer,UNKNOWN_LENGTH);  availableForSpending=true;}  }
class C{  public synchronized boolean isDestroyed(){  return destroyed;}  }
class C{  public static boolean isSupportedRPVPlexMigrationVirtualPoolChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff,List<RPVPlexMigration> validMigrations){  s_logger.info(String.format("Checking isSupportedRPVPlexMigrationVirtualPoolChange from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {    return false;  }  boolean validMigrationsFound=false;  if (volume.checkForRp() && VirtualPool.vPoolSpecifiesRPVPlex(currentVpool) && VirtualPool.vPoolSpecifiesRPVPlex(newVpool)) {    if (currentVpool.getProtectionVarraySettings().size() != newVpool.getProtectionVarraySettings().size()) {      notSuppReasonBuff.append("Target virtual arrays do not match.");      return false;    }    List<RPVPlexMigration> potentialMigrations=new ArrayList<RPVPlexMigration>();    potentialMigrations.add(new RPVPlexMigration(Volume.PersonalityTypes.SOURCE,volume.getVirtualArray(),currentVpool,newVpool));    boolean invalidMigration=determineRPSourceJournalMigration(volume,currentVpool,newVpool,potentialMigrations,notSuppReasonBuff,dbClient);    if (invalidMigration) {      return false;    }    if (VirtualPool.vPoolSpecifiesMetroPoint(currentVpool) && VirtualPool.vPoolSpecifiesMetroPoint(newVpool)) {      invalidMigration=determineRPStandbyJournalMigration(volume,currentVpool,newVpool,potentialMigrations,notSuppReasonBuff,dbClient);      if (invalidMigration) {        return false;      }    }    invalidMigration=determineRPTargetMigration(volume,currentVpool,newVpool,potentialMigrations,notSuppReasonBuff,dbClient);    if (invalidMigration) {      return false;    }    for (    RPVPlexMigration migration : potentialMigrations) {      Volume.PersonalityTypes type=migration.getType();      VirtualPool candidateCurrentVpool=migration.getMigrateFromVpool();      VirtualPool candidateNewVpool=migration.getMigrateToVpool();      if (isSameVirtualPool(candidateCurrentVpool,candidateNewVpool,notSuppReasonBuff)) {        continue;      }      String[] include=null;      if (type.equals(Volume.PersonalityTypes.SOURCE)) {        include=new String[]{TYPE,VARRAYS,REF_VPOOL,MIRROR_VPOOL,FAST_EXPANSION,ACLS,INACTIVE,NUM_PATHS,METROPOINT,HIGH_AVAILABILITY,RP_RPO_TYPE,RP_RPO_VALUE,RP_COPY_MODE};      } else {        if (VirtualPool.vPoolSpecifiesHighAvailability(candidateCurrentVpool) && VirtualPool.vPoolSpecifiesHighAvailability(candidateNewVpool) && candidateNewVpool.getVirtualArrays().contains(migration.getVarray().toString())) {          include=new String[]{TYPE,REF_VPOOL,MIRROR_VPOOL,FAST_EXPANSION,ACLS,INACTIVE,NUM_PATHS};        } else {          s_logger.info(String.format("Vpool [%s](%s) is NOT valid for RP+VPLEX %s migrations",candidateNewVpool.getLabel(),candidateNewVpool.getId()),type.name());          continue;        }      }      Map<String,Change> changes=analyzeChanges(candidateCurrentVpool,candidateNewVpool,include,null,null);      if (!changes.isEmpty()) {        notSuppReasonBuff.append(String.format("Changes in the following %s virtual pool are not permitted: ",type.name()));        fillInNotSupportedReasons(changes,notSuppReasonBuff);        return false;      }      boolean migrateSourceVolume=VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(candidateCurrentVpool,candidateNewVpool);      boolean migrateHAVolume=false;      if (!type.equals(Volume.PersonalityTypes.METADATA)) {        VirtualPool candidateCurrentHaVpool=VirtualPoolChangeAnalyzer.getHaVpool(candidateCurrentVpool,dbClient);        if (candidateCurrentHaVpool != null) {          VirtualPool candidateNewHaVpool=VirtualPoolChangeAnalyzer.getNewHaVpool(candidateCurrentVpool,candidateNewVpool,dbClient);          migrateHAVolume=VirtualPoolChangeAnalyzer.vpoolChangeRequiresMigration(candidateCurrentHaVpool,candidateNewHaVpool);        }      }      if (migrateSourceVolume || migrateHAVolume) {        validMigrationsFound=true;        s_logger.info(String.format("Vpool [%s](%s) is valid for RP+VPLEX %s migrations",candidateNewVpool.getLabel(),candidateNewVpool.getId(),type.name()));        if (validMigrations != null) {          validMigrations.add(migration);        } else {          break;        }      } else {        s_logger.info(String.format("Vpool [%s](%s) is NOT valid for RP+VPLEX %s migrations",candidateNewVpool.getLabel(),candidateNewVpool.getId(),type.name()));      }    }  }  s_logger.info(String.format("RP+VPLEX migration operation is%s supported.",validMigrationsFound ? "" : " NOT"));  return validMigrationsFound;}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  @DELETE @Consumes(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public void delete(@QueryParam("fingerprint") String fingerprint){  Validate.notEmpty(fingerprint,sm.getString("valid.not.empty","fingerprint"));  try {    getIDMClient().deleteCertificate(tenant,fingerprint,CertificateType.STS_TRUST_CERT);  } catch (  NoSuchTenantException|NoSuchCertificateException e) {    log.debug("Failed to delete certificate with fingerprint '{}' for tenant '{}' because the tenant does not exist",fingerprint,tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException|CertificateInUseException e) {    log.warn("Failed to delete certificate with fingerprint '{}' from tenant '{}' due to a client side error",fingerprint,tenant,e);    throw new BadRequestException(sm.getString("res.cert.delete.failed",fingerprint,tenant),e);  }catch (  Exception e) {    log.error("Failed to delete certificate with fingerprint '{}' from tenant '{}' due to a server side error",fingerprint,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public static PicturesFragment newInstance(AbelanaClient.PhotoListType pFragmentType){  PicturesFragment fragment=new PicturesFragment();  Bundle args=new Bundle();  args.putSerializable(ARG_FRAGMENT_TYPE,pFragmentType);  fragment.setArguments(args);  return fragment;}  }
class C{  public static void main(String[] args){  TestClassCrossReferences tester=new TestClassCrossReferences();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiProgressBarUI();  return MultiLookAndFeel.createUIs(mui,((MultiProgressBarUI)mui).uis,a);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:21.610 -0500",hash_original_method="BC6E8B68589B7C543EAC83AF07FC9FE2",hash_generated_method="0999843FE66D63264190DC8C4B9716DA") public static InetAddress intToInetAddress(int hostAddress){  byte[] addressBytes={(byte)(0xff & hostAddress),(byte)(0xff & (hostAddress >> 8)),(byte)(0xff & (hostAddress >> 16)),(byte)(0xff & (hostAddress >> 24))};  try {    return InetAddress.getByAddress(addressBytes);  } catch (  UnknownHostException e) {    throw new AssertionError();  }}  }
class C{  private void handleSettings(PSP pspToStore,VOPSP psp) throws ConcurrentModificationException, ValidationException, ObjectNotFoundException {  List<VOPSPSetting> pspSettings=psp.getPspSettings();  PSPSettingAssembler.validateVOSettings(pspSettings);  Map<Long,PSPSetting> existingSettings=new HashMap<Long,PSPSetting>();  for (  PSPSetting setting : pspToStore.getSettings()) {    existingSettings.put(Long.valueOf(setting.getKey()),setting);  }  for (  VOPSPSetting setting : pspSettings) {    PSPSetting updatedSetting=existingSettings.remove(Long.valueOf(setting.getKey()));    if (updatedSetting == null) {      if (setting.getKey() != 0) {        updatedSetting=dm.getReference(PSPSetting.class,setting.getKey());      } else {        updatedSetting=new PSPSetting();        setting.setVersion(0);      }    }    updatedSetting=PSPSettingAssembler.updatePSPSetting(setting,updatedSetting);    if (!pspToStore.getSettings().contains(updatedSetting)) {      pspToStore.addPSPSetting(updatedSetting);    }  }  for (  PSPSetting settingToRemove : existingSettings.values()) {    pspToStore.removePSPSetting(settingToRemove);    dm.remove(settingToRemove);  }}  }
class C{  public void unbindProperty(Component cmp,String propertyName){  BindTarget t=(BindTarget)cmp.getClientProperty("CN1Bind" + propertyName);  cmp.unbindProperty(propertyName,t);  ;}  }
class C{  public final void requestCredDeleg(boolean value) throws GSSException {  if (state == STATE_NEW && isInitiator())   credDelegState=value;}  }
class C{  private List<Object> createObjectList(Object object,List<Object> objectList){  if (areFiltersPassed(object) && !getExpandedState(object)) {    if (childrenLoaded(object)) {      expandToLevel(object,1);    } else {      if (objectList == null) {        objectList=new ArrayList<>();      }      objectList.add(object);    }  }  Object parent=getParentElement(object);  if (null != parent) {    createObjectList(parent,objectList);  }  return objectList;}  }
class C{  private static ObjectMapper createTreeMapper(){  return new ObjectMapper();}  }
class C{  public UserConfig updateIcon(String file,UserConfig config){  config.addCredentials(this);  String xml=POSTIMAGE(this.url + "/update-user-icon",file,"image.jpg",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    config=new UserConfig();    config.parseXML(root);    return config;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public DBObject_Index_Column(DBConnection parent,String name,int sequence){  super(parent,name,sequence);}  }
class C{  public String fractionToDecimal(int numerator,int denominator){  if (denominator == 0)   return "";  if (numerator == 0)   return "0";  StringBuilder res=new StringBuilder();  Long n=new Long(numerator);  Long d=new Long(denominator);  if ((n < 0 && d > 0) || (n > 0 && d < 0))   res.append("-");  n=Math.abs(n);  d=Math.abs(d);  res.append(n / d);  if (n % d == 0)   return res.toString();  res.append(".");  HashMap<Long,Integer> map=new HashMap<Long,Integer>();  Long r=n % d;  while (r > 0) {    if (map.containsKey(r)) {      res.insert(map.get(r),"(");      res.append(")");      break;    }    map.put(r,res.length());    r*=10;    res.append(r / d);    r%=d;  }  return res.toString();}  }
class C{  public int checkBookiesUp(int count,int timeout) throws Exception {  ZooKeeper zkc=connectZooKeeper(zkHost,zkPort,zkTimeoutSec);  try {    int mostRecentSize=0;    for (int i=0; i < timeout; i++) {      try {        List<String> children=zkc.getChildren("/ledgers/available",false);        children.remove("readonly");        mostRecentSize=children.size();        if ((mostRecentSize > count) || LOG.isDebugEnabled()) {          LOG.info("Found " + mostRecentSize + " bookies up, "+ "waiting for "+ count);          if ((mostRecentSize > count) || LOG.isTraceEnabled()) {            for (            String child : children) {              LOG.info(" server: " + child);            }          }        }        if (mostRecentSize == count) {          break;        }      } catch (      KeeperException e) {      }      Thread.sleep(1000);    }    return mostRecentSize;  }  finally {    zkc.close();  }}  }
class C{  protected void parseMorphFillStyle(InStream in,SWFShape shape) throws IOException {  int fillType=in.readUI8();  if (fillType == FILL_SOLID) {    AlphaColor startColor=new AlphaColor(in);    AlphaColor endColor=new AlphaColor(in);    shape.defineFillStyle(startColor);    shape.defineFillStyle(endColor);  } else   if (fillType == FILL_LINEAR_GRADIENT || fillType == FILL_RADIAL_GRADIENT) {    Matrix startMatrix=new Matrix(in);    Matrix endMatrix=new Matrix(in);    int numRatios=in.readUI8();    int[] startRatios=new int[numRatios];    AlphaColor[] startColors=new AlphaColor[numRatios];    int[] endRatios=new int[numRatios];    AlphaColor[] endColors=new AlphaColor[numRatios];    for (int i=0; i < numRatios; i++) {      startRatios[i]=in.readUI8();      startColors[i]=new AlphaColor(in);      endRatios[i]=in.readUI8();      endColors[i]=new AlphaColor(in);    }    shape.defineFillStyle(startMatrix,startRatios,startColors,fillType == FILL_RADIAL_GRADIENT);    shape.defineFillStyle(endMatrix,endRatios,endColors,fillType == FILL_RADIAL_GRADIENT);  } else   if (fillType == FILL_TILED_BITMAP || fillType == FILL_CLIPPED_BITMAP) {    int bitmapId=in.readUI16();    Matrix startMatrix=new Matrix(in);    Matrix endMatrix=new Matrix(in);    shape.defineFillStyle(bitmapId,startMatrix,fillType == FILL_CLIPPED_BITMAP);    shape.defineFillStyle(bitmapId,endMatrix,fillType == FILL_CLIPPED_BITMAP);  }}  }
class C{  private void prepareTransfers() throws LibUsbException {  if (mAvailableTransfers == null) {    mAvailableTransfers=new LinkedTransferQueue<>();    for (int x=0; x < TRANSFER_BUFFER_POOL_SIZE; x++) {      Transfer transfer=LibUsb.allocTransfer();      if (transfer == null) {        throw new LibUsbException("couldn't allocate transfer",LibUsb.ERROR_NO_MEM);      }      final ByteBuffer buffer=ByteBuffer.allocateDirect(mBufferSize);      LibUsb.fillBulkTransfer(transfer,mDeviceHandle,USB_ENDPOINT,buffer,BufferProcessor.this,"Buffer",USB_TIMEOUT_US);      mAvailableTransfers.add(transfer);    }  }}  }
class C{  public void toggleCheckingPath(TreePath path){  if (!isPathEnabled(path)) {    return;  }  if (isPathChecked(path)) {    removeCheckingPath(path);  } else {    addCheckingPath(path);  }}  }
class C{  protected void phaseID(final int lindex,final int levels[][]){  float colBC[];  colBC=calcColBC(lindex,levels);  isort(levels[lindex + 1],colBC);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ArrayObjectProvider(final Class<Type> elementType){  this.elementType=elementType;}  }
class C{  private CActionProvider(){}  }
class C{  public Layout(){  super();}  }
class C{  @SuppressWarnings("unchecked") private static <T extends HasJavadoc<?>>void createJavadoc(T model){  final Javadoc doc=requireNonNull(model).getJavadoc().orElse(Javadoc.of(DEFAULT_TEXT));  model.set(doc);  if (model instanceof HasGenerics) {    ((HasGenerics<?>)model).getGenerics().forEach(null);  }  if (model instanceof ClassOrInterface) {    doc.add(AUTHOR.setValue(DEFAULT_NAME));  } else {    if (model instanceof HasFields) {      ((HasFields<?>)model).getFields().forEach(null);    }  }  if (model instanceof Method) {    if (!"void".equals(((Method)model).getType().getName())) {      addTag(doc,RETURN);    }  }  if (model instanceof HasConstructors) {    ((HasConstructors<?>)model).getConstructors().forEach(null);  }  if (model instanceof HasMethods) {    ((HasMethods<?>)model).getMethods().forEach(null);  }  if (model instanceof HasClasses) {    ((HasClasses<?>)model).getClasses().forEach(null);  }}  }
class C{  public ReloadFilePreferencesEvent(Object source){  super(source);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();case VERSIONS:return isSetVersions();}throw new IllegalStateException();}  }
class C{  public Matrix4f billboardCylindrical(Vector3fc objPos,Vector3fc targetPos,Vector3fc up){  float dirX=targetPos.x() - objPos.x();  float dirY=targetPos.y() - objPos.y();  float dirZ=targetPos.z() - objPos.z();  float leftX=up.y() * dirZ - up.z() * dirY;  float leftY=up.z() * dirX - up.x() * dirZ;  float leftZ=up.x() * dirY - up.y() * dirX;  float invLeftLen=1.0f / (float)Math.sqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);  leftX*=invLeftLen;  leftY*=invLeftLen;  leftZ*=invLeftLen;  dirX=leftY * up.z() - leftZ * up.y();  dirY=leftZ * up.x() - leftX * up.z();  dirZ=leftX * up.y() - leftY * up.x();  float invDirLen=1.0f / (float)Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);  dirX*=invDirLen;  dirY*=invDirLen;  dirZ*=invDirLen;  this._m00(leftX);  this._m01(leftY);  this._m02(leftZ);  this._m03(0.0f);  this._m10(up.x());  this._m11(up.y());  this._m12(up.z());  this._m13(0.0f);  this._m20(dirX);  this._m21(dirY);  this._m22(dirZ);  this._m23(0.0f);  this._m30(objPos.x());  this._m31(objPos.y());  this._m32(objPos.z());  this._m33(1.0f);  _properties(PROPERTY_AFFINE);  return this;}  }
class C{  private <T>T mu(T obj) throws IgniteCheckedException {  return marshaller.unmarshal(marshaller.marshal(obj),null);}  }
class C{  public static int calculateLighterColor(final int color,final float factor){  final int a=Color.alpha(color);  final int r=Color.red(color);  final int g=Color.green(color);  final int b=Color.blue(color);  final int lightnessLevel=Math.round(RGB_TOTAL_COLORS * factor);  return Color.argb(a,Math.min(r + lightnessLevel,255),Math.min(g + lightnessLevel,255),Math.min(b + lightnessLevel,255));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRole[");  sb.append(getAD_Role_ID()).append(",").append(getName()).append(",UserLevel=").append(getUserLevel()).append(",").append(getClientWhere(false)).append(",").append(getOrgWhere(false)).append("]");  return sb.toString();}  }
class C{  private void applyNewNodes(RoutingAllocation allocation){  final RoutingNodes routingNodes=allocation.routingNodes();  for (  ObjectCursor<DiscoveryNode> cursor : allocation.nodes().dataNodes().values()) {    DiscoveryNode node=cursor.value;    if (!routingNodes.isKnown(node)) {      routingNodes.addNode(node);    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(3);  newVector.addElement(new Option("\tSets the attribute index (default last).","C",1,"-C <col>"));  newVector.addElement(new Option("\tSets the first value's index (default first).","F",1,"-F <value index>"));  newVector.addElement(new Option("\tSets the second value's index (default last).","S",1,"-S <value index>"));  return newVector.elements();}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,(Object)generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    throw new SecurityException("Failed to seed OpenSSL PRNG",e);  }}  }
class C{  private ImportWizard createDefaultWizard(){  final ImportProject dataObject=dtoFactory.createDto(ImportProject.class).withProject(dtoFactory.createDto(NewProject.class)).withSource(dtoFactory.createDto(Source.class).withProject(dtoFactory.createDto(ImportSourceDescriptor.class).withLocation("")));  final ImportWizard importWizard=importWizardFactory.newWizard(dataObject);  importWizard.setUpdateDelegate(this);  importWizard.addPage(mainPage);  return importWizard;}  }
class C{  public String genotypeToStringForHumans(){  StringBuffer sb=new StringBuffer("");  for (int i=0; i < genome.length; i++)   sb.append(" " + genome[i]);  sb.append(". Expression: " + expression);  return sb.toString();}  }
class C{  protected static Way makeOSMWayFromTags(String tags){  Way osmWay=new Way();  String[] pairs=tags.split(";");  for (  String pair : pairs) {    String[] kv=pair.split("=");    osmWay.addTag(kv[0],kv[1]);  }  return osmWay;}  }
class C{  public ViewReferencesTable(final ViewReferencesTableModel model){  super(model);  setRootVisible(false);  final IconNodeRenderer renderer=new IconNodeRenderer();  renderer.setFont(GuiHelper.MONOSPACED_FONT);  setCellRenderer(renderer);}  }
class C{  public void createWeekScenarioParChangeUpgrade() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-01-28 12:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PARCHANGE_UPGRADE_PU_WEEK_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS2,1,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(basicSetup.getCustomerAdminKey(),"PARCHANGE_UPGRADE_PU_WEEK",serviceDetails,basicSetup.getCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"ADMIN"));  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-01-30 00:00:00"),"MAX_FOLDER_NUMBER","2");  VOServiceDetails proRataService=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PARCHG_UPGRADE_RATA_PU_WEEK_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES_PAR_I,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),serviceDetails,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-01-30 12:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.copyParametersAndUpgradeSubscription(basicSetup.getCustomerAdminKey(),subDetails,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-25 08:00:00");  subscrSetup.unsubscribeToService(upgradedSubDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PARCHANGE_UPGRADE_PU_WEEK",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PARCHANGE_UPGRADE_PU_WEEK",upgradedSubDetails);}  }
class C{  public boolean isTrigger(){  return this.trigger;}  }
class C{  public static double pointwise_lowess(GeoTimeSerie gts,int idx,long tick,int q,int p,double[] weights,double[] rho,double[] beta,boolean reversed) throws WarpScriptException {  if (null != weights && q > weights.length || (null != rho && gts.values > rho.length) || (null != beta && p + 1 > beta.length)) {    throw new WarpScriptException("Incoherent array lengths as input of pointwise_lowess");  }  int i=idx;  int j=idx - 1;  if (reversed) {    i+=1;    j+=1;  }  int count=0;  while (count < q) {    long idist=Long.MAX_VALUE;    long jdist=Long.MAX_VALUE;    if (i < gts.values) {      idist=Math.abs(tickAtIndex(gts,i) - tick);    }    if (j >= 0) {      jdist=Math.abs(tickAtIndex(gts,j) - tick);    }    if (Long.MAX_VALUE == idist && Long.MAX_VALUE == jdist) {      break;    }    if (idist < jdist) {      i++;    } else {      j--;    }    count++;  }  double maxdist=Math.max(j < -1 ? 0.0D : Math.abs(tickAtIndex(gts,j + 1) - tick),i <= 0 ? 0.0D : Math.abs(tickAtIndex(gts,i - 1) - tick));  if (q > gts.values) {    maxdist=(maxdist * q) / gts.values;  }  if (null == weights) {    weights=new double[q];  } else {    Arrays.fill(weights,0.0D);  }  int widx=0;  double wsum=0.0D;  for (int k=j + 1; k < i; k++) {    if (0 == maxdist) {      weights[widx]=1.0D;    } else {      double u=Math.abs(gts.ticks[k] - tick) / maxdist;      if (u >= 1.0) {        weights[widx]=0.0D;      } else {        weights[widx]=1.0D - u * u * u;        double rho_=1.0D;        if (null != rho) {          rho_=0.0D != rho[k] ? rho[k] : 0.000001D;        }        weights[widx]=rho_ * weights[widx] * weights[widx]* weights[widx];      }    }    wsum+=weights[widx];    widx++;  }  if (null == beta) {    beta=new double[p + 1];  }  if (1 == p) {    widx=0;    double ctick=0.0D;    double cvalue=0.0D;    for (int k=j + 1; k < i; k++) {      ctick=ctick + weights[widx] * gts.ticks[k];      cvalue=cvalue + weights[widx] * ((Number)valueAtIndex(gts,k)).doubleValue();      widx++;    }    ctick=ctick / wsum;    cvalue=cvalue / wsum;    double covar=0.0D;    double var=0.0D;    widx=0;    for (int k=j + 1; k < i; k++) {      covar=covar + weights[widx] * (gts.ticks[k] - ctick) * (((Number)valueAtIndex(gts,k)).doubleValue() - cvalue);      var=var + weights[widx] * (gts.ticks[k] - ctick) * (gts.ticks[k] - ctick);      widx++;    }    covar=covar / wsum;    var=var / wsum;    beta[1]=0 == var ? 0.0D : covar / var;    beta[0]=cvalue - ctick * beta[1];  } else {    List<WeightedObservedPoint> observations=new ArrayList<WeightedObservedPoint>();    widx=0;    for (int k=j + 1; k < i; k++) {      WeightedObservedPoint point=new WeightedObservedPoint(weights[widx],(double)gts.ticks[k],((Number)valueAtIndex(gts,k)).doubleValue());      observations.add(point);      widx++;    }    PolynomialCurveFitter fitter=PolynomialCurveFitter.create(p);    beta=fitter.fit(observations);    observations.clear();  }  double estimated=beta[0];  double tmp=1.0D;  for (int u=1; u < p + 1; u++) {    tmp*=tick;    estimated+=tmp * beta[u];  }  return estimated;}  }
class C{  protected void storeComponentState(Component c,Hashtable destination){  if (shouldAutoStoreState()) {    storeComponentStateImpl(c,destination);  }}  }
class C{  public static void createBugZillaReport(XmlRpcClient client,Throwable exception,String userSummary,String completeDescription,String component,String version,String severity,String platform,String os,File[] attachments,boolean attachProcess,boolean attachSystemProps,boolean attachLogFile) throws Exception {  File processFile=File.createTempFile("_process",".xml");  processFile.deleteOnExit();  String xmlProcess;  if (RapidMinerGUI.getMainFrame().getProcess().getProcessLocation() != null) {    try {      xmlProcess=RapidMinerGUI.getMainFrame().getProcess().getProcessLocation().getRawXML();    } catch (    Throwable t) {      xmlProcess="could not read: " + t;    }  } else {    xmlProcess="no process available";  }  writeFile(processFile,xmlProcess);  File propertiesFile=File.createTempFile("_properties",".txt");  propertiesFile.deleteOnExit();  writeFile(propertiesFile,getProperties());  File logTempFile=File.createTempFile("_log",".txt");  logTempFile.delete();  writeFile(logTempFile,getRelevantLogContent());  StringBuffer buffer=new StringBuffer(completeDescription);  buffer.append(Tools.getLineSeparator());  buffer.append(Tools.getLineSeparator());  buffer.append(getStackTrace(exception));  buffer.append(Tools.getLineSeparator());  buffer.append(Tools.getLineSeparator());  buffer.append("RapidMiner: ");  buffer.append(RapidMiner.getVersion());  buffer.append(Tools.getLineSeparator());  for (  Plugin plugin : Plugin.getAllPlugins()) {    buffer.append(plugin.getName());    buffer.append(": ");    buffer.append(plugin.getVersion());    buffer.append(Tools.getLineSeparator());  }  completeDescription=buffer.toString();  XmlRpcClient rpcClient=client;  Map<String,String> bugMap=new HashMap<>();  bugMap.put("product","RapidMiner");  bugMap.put("component",component);  bugMap.put("summary",userSummary);  bugMap.put("description",completeDescription);  bugMap.put("version",version);  bugMap.put("op_sys",os);  bugMap.put("platform",platform);  bugMap.put("severity",severity);  bugMap.put("status","NEW");  Map createResult=(Map)rpcClient.execute("Bug.create",new Object[]{bugMap});  LogService.getRoot().log(Level.FINE,"com.rapidminer.tools.BugReport.bug_submitted",createResult.get("id"));  String id=String.valueOf(createResult.get("id"));  Map<String,Object> attachmentMap=new HashMap<>();  FileInputStream fileInputStream=null;  if (attachProcess) {    attachmentMap.put("ids",new String[]{id});    try {      fileInputStream=new FileInputStream(processFile);      byte[] data=new byte[(int)processFile.length()];      fileInputStream.read(data);      attachmentMap.put("data",data);      attachmentMap.put("file_name","process.xml");      attachmentMap.put("summary","process.xml");      attachmentMap.put("content_type","application/xml");      createResult=(Map)rpcClient.execute("Bug.add_attachment",new Object[]{attachmentMap});      attachmentMap.clear();    }  finally {      if (fileInputStream != null) {        fileInputStream.close();      }    }  }  if (attachSystemProps) {    attachmentMap.put("ids",new String[]{id});    try {      fileInputStream=new FileInputStream(propertiesFile);      byte[] data=new byte[(int)propertiesFile.length()];      fileInputStream.read(data);      attachmentMap.put("data",data);      attachmentMap.put("file_name","system-properties.txt");      attachmentMap.put("summary","system-properties.txt");      attachmentMap.put("content_type","text/plain");      createResult=(Map)rpcClient.execute("Bug.add_attachment",new Object[]{attachmentMap});      attachmentMap.clear();    }  finally {      if (fileInputStream != null) {        fileInputStream.close();      }    }  }  if (attachLogFile) {    attachmentMap.put("ids",new String[]{id});    try {      fileInputStream=new FileInputStream(logTempFile);      byte[] data=new byte[(int)logTempFile.length()];      fileInputStream.read(data);      attachmentMap.put("data",data);      attachmentMap.put("file_name","rm.log");      attachmentMap.put("summary","rm.log");      attachmentMap.put("content_type","text/plain");      createResult=(Map)rpcClient.execute("Bug.add_attachment",new Object[]{attachmentMap});      attachmentMap.clear();    }  finally {      if (fileInputStream != null) {        fileInputStream.close();      }    }  }  for (  File file : attachments) {    attachmentMap.put("ids",new String[]{id});    try {      fileInputStream=new FileInputStream(file);      byte[] data=new byte[(int)file.length()];      fileInputStream.read(data);      attachmentMap.put("data",data);      attachmentMap.put("file_name",file.getName());      attachmentMap.put("summary",file.getName());      attachmentMap.put("content_type","application/data");      createResult=(Map)rpcClient.execute("Bug.add_attachment",new Object[]{attachmentMap});      attachmentMap.clear();    }  finally {      if (fileInputStream != null) {        fileInputStream.close();      }    }  }}  }
class C{  public boolean canBeShortAddress(int address){  return ((address >= 1) && (address <= 127));}  }
class C{  public static int createImageTexture(ByteBuffer data,int width,int height,int format){  int[] textureHandles=new int[1];  int textureHandle;  GLES20.glGenTextures(1,textureHandles,0);  textureHandle=textureHandles[0];  Util.checkGlError("glGenTextures");  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,textureHandle);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  Util.checkGlError("loadImageTexture");  GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,format,width,height,0,format,GLES20.GL_UNSIGNED_BYTE,data);  Util.checkGlError("loadImageTexture");  return textureHandle;}  }
class C{  public JPAMTableCreator generateDefaultTableCreator(){  JPAMTableCreator tblCreator=new JPAMTableCreator();  List<DBRelationalDescriptor> descriptors=this.project.getOrderedDescriptors().stream().sorted(null).map(null).collect(toList());  for (  DBRelationalDescriptor descriptor : descriptors) {    List<DatabaseMapping> parentClassMapping=descriptor.getParentClassMapping();    if (parentClassMapping != null) {      parentClassMapping.stream().forEach(null);    }    if (!descriptor.isChildDescriptor() && !descriptor.getDescriptorInheritancePolicy().getAllChildDescriptors().isEmpty()) {      if (descriptor.getAccessor() instanceof EntitySpecAccessor) {        Entity entity=((EntitySpecAccessor)descriptor.getAccessor()).getEntity();        if (entity.getInheritance() != null && entity.getInheritance().getStrategy() == InheritanceType.SINGLE_TABLE) {          descriptor.getInheritancePolicy().getAllChildDescriptors().stream().forEach(null);        }      }    }  }  for (  DBRelationalDescriptor descriptor : descriptors) {    if (!descriptor.isDescriptorTypeAggregate() && !(descriptor.hasTablePerMultitenantPolicy() && !project.allowTablePerMultitenantDDLGeneration())) {      initTableSchema(descriptor);    }  }  for (  ClassDescriptor descriptor : this.project.getOrderedDescriptors()) {    if (!descriptor.isAggregateDescriptor() && !descriptor.isAggregateCollectionDescriptor() && !(descriptor.hasTablePerMultitenantPolicy() && !project.allowTablePerMultitenantDDLGeneration())) {      postInitTableSchema(descriptor);      if (descriptor.hasMultitenantPolicy()) {        descriptor.getMultitenantPolicy().addToTableDefinition(getTableDefFromDBTable(descriptor.getDefaultTable()));      }    }  }  tblCreator.addTableDefinitions(tableMap.values());  return tblCreator;}  }
class C{  public String process(String document,Date documentCreationTime,ResultFormatter resultFormatter) throws DocumentCreationTimeMissingException {  logger.log(Level.INFO,"Processing started");  logger.log(Level.FINE,"Generate CAS object");  JCas jcas=null;  try {    jcas=jcasFactory.createJCas();    jcas.setDocumentText(document);    logger.log(Level.FINE,"CAS object generated");  } catch (  Exception e) {    e.printStackTrace();    logger.log(Level.WARNING,"Cas object could not be generated");  }  try {    logger.log(Level.FINER,"Establishing preconditions...");    provideDocumentCreationTime(jcas,documentCreationTime);    establishHeidelTimePreconditions(jcas);    logger.log(Level.FINER,"Preconditions established");    heidelTime.process(jcas);    logger.log(Level.INFO,"Processing finished");  } catch (  Exception e) {    e.printStackTrace();    logger.log(Level.WARNING,"Processing aborted due to errors");  }  if (doIntervalTagging)   runIntervalTagger(jcas);  logger.log(Level.FINE,"Formatting result...");  String result=null;  try {    result=resultFormatter.format(jcas);    logger.log(Level.INFO,"Result formatted");  } catch (  Exception e) {    e.printStackTrace();    logger.log(Level.WARNING,"Result could not be formatted");  }  return result;}  }
class C{  public VOServiceReview(String title,int rating,String comment,String userId,long productKey){  this.title=title;  this.rating=rating;  this.comment=comment;  this.userId=userId;  this.productKey=productKey;}  }
class C{  public Shape createRoundRectangle(final int x,final int y,final int w,final int h,final CornerSize size,final CornerStyle topLeft,final CornerStyle bottomLeft,final CornerStyle bottomRight,final CornerStyle topRight){  return createRoundRectangleInternal(x,y,w,h,size.getRadius(w,h),topLeft,bottomLeft,bottomRight,topRight);}  }
class C{  public File currentFile(){  return mLastFile;}  }
class C{  public mxTemporaryCellStates(mxGraphView view,double scale){  this(view,scale,null);}  }
class C{  private static Pointer computePointer(FloatBuffer buffer){  Pointer result=null;  if (buffer.isDirect()) {    int oldPosition=buffer.position();    buffer.position(0);    result=Pointer.to(buffer.slice()).withByteOffset(oldPosition * Sizeof.FLOAT);    buffer.position(oldPosition);  } else   if (buffer.hasArray()) {    FloatBuffer t=FloatBuffer.wrap(buffer.array());    int elementOffset=buffer.position() + buffer.arrayOffset();    result=Pointer.to(t).withByteOffset(elementOffset * Sizeof.FLOAT);  }  return result;}  }
class C{  public BCSAPIMessage.TXIN toProtobuf(){  BCSAPIMessage.TXIN.Builder builder=BCSAPIMessage.TXIN.newBuilder();  builder.setScript(ByteString.copyFrom(script.toByteArray()));  builder.setSequence(sequence);  builder.setSource(ByteString.copyFrom(source.getTransactionId().unsafeGetArray()));  builder.setSourceix(source.getOutputIndex());  return builder.build();}  }
class C{  public DFTResultsConverter(){}  }
class C{  void updateMatrixAspectPanel(){  if (!Bundle.getMessage("MatrixCtlMast").equals(signalMastDriver.getSelectedItem())) {    return;  }  String mastType=mastNames.get(mastBox.getSelectedIndex()).getName();  mastType=mastType.substring(11,mastType.indexOf(".xml"));  jmri.implementation.DefaultSignalAppearanceMap sigMap=jmri.implementation.DefaultSignalAppearanceMap.getMap(sigsysname,mastType);  java.util.Enumeration<String> aspects=sigMap.getAspects();  SignalSystem sigsys=InstanceManager.getDefault(jmri.SignalSystemManager.class).getSystem(sigsysname);  while (aspects.hasMoreElements()) {    String aspect=aspects.nextElement();    MatrixAspectPanel aspectpanel=new MatrixAspectPanel(aspect,bitString);    matrixAspect.put(aspect,aspectpanel);  }  matrixMastPanel.removeAll();  matrixMastPanel.setLayout(new jmri.util.javaworld.GridLayout2(matrixAspect.size() + 1,2));  for (  String aspect : matrixAspect.keySet()) {    matrixMastPanel.add(matrixAspect.get(aspect).getPanel());  }}  }
class C{  public void start(){  check(numthreads,0,0);  go.countDown();}  }
class C{  private void clearFormBody(){  if ((cmrMessageComposite != null) && !cmrMessageComposite.isDisposed()) {    cmrMessageComposite.dispose();  }  treeViewer.setInput(Collections.emptyList());  treeViewer.getTree().setVisible(false);  treeViewer.getTree().setLayoutData(new GridData(SWT.LEFT,SWT.TOP,false,false));}  }
class C{  public XLookup(String keyColumn){  super(DisplayType.TableDir,0);  m_keyColumn=keyColumn;}  }
class C{  CompoundInterval copy(Register r,BasicInterval stop){  CompoundInterval result=new CompoundInterval(r);  for (Iterator<BasicInterval> i=iterator(); i.hasNext(); ) {    BasicInterval b=i.next();    result.add(b);    if (b.sameRange(stop))     return result;  }  return result;}  }
class C{  public static Element makeArrow(SVGPlot svgp,Direction dir,double x,double y,double size){  final SVGPath path=new SVGPath();  final double hs=size / 2.;switch (dir) {case LEFT:    path.drawTo(x + hs,y + hs);  path.drawTo(x - hs,y);path.drawTo(x + hs,y - hs);path.drawTo(x + hs,y + hs);break;case DOWN:path.drawTo(x - hs,y - hs);path.drawTo(x + hs,y - hs);path.drawTo(x,y + hs);path.drawTo(x - hs,y - hs);break;case RIGHT:path.drawTo(x - hs,y - hs);path.drawTo(x + hs,y);path.drawTo(x - hs,y + hs);path.drawTo(x - hs,y - hs);break;case UP:path.drawTo(x - hs,y + hs);path.drawTo(x,y - hs);path.drawTo(x + hs,y + hs);path.drawTo(x - hs,y + hs);break;}path.close();return path.makeElement(svgp);}  }
class C{  public void clear(){  messages.clear();  currentChannel=null;  currentChannelMessageCount=0;  displayedCount=0;  updateTitle();}  }
class C{  public void push(boolean val){  this.push(new BaseTypeWrapper(val));}  }
class C{  public static GroupByClause create(String... properties){  return new GroupByClause(properties);}  }
class C{  private static boolean isIntegral(JsonPrimitive primitive){  if (primitive.value instanceof Number) {    Number number=(Number)primitive.value;    return number instanceof BigInteger || number instanceof Long || number instanceof Integer|| number instanceof Short|| number instanceof Byte;  }  return false;}  }
class C{  public BaseAdapterHelper linkify(int viewId){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public static int readVarInt(ByteBuffer buff){  int shift=0, i=0;  while (true) {    byte b=(byte)buff.get();    i|=(b & 0x7F) << shift;    shift+=7;    if (b >= 0) {      return i;    }  }}  }
class C{  public CtClass[] mayThrow(){  return super.mayThrow();}  }
class C{  public static ArrayList<PathParser.PathDataNode> transform(PathParser.PathDataNode[] elements,int extraCopy,boolean transformZ){  if (elements == null)   return null;  ArrayList<PathParser.PathDataNode> transformed=new ArrayList<>();  for (  PathParser.PathDataNode node : elements) {    int cmdArgs=commandArguments(node.type);    int argsProvided=node.params.length;    if (node.type == 'z')     node.type='Z';    if (cmdArgs == -1) {      System.err.println("Command not supported! " + node.type);    } else     if (argsProvided < cmdArgs) {      System.err.println("Command " + node.type + " requires "+ cmdArgs+ " params! Passing only "+ argsProvided);    } else     if (cmdArgs == node.params.length) {      transformed.add(node);      if (extraCopy > 0 && (transformZ || node.type != 'Z') && node.type != PathNodeUtils.CMD_DUMB) {        PathParser.PathDataNode extraNodes=new PathParser.PathDataNode(node);        if (Character.isLowerCase(node.type)) {          Arrays.fill(extraNodes.params,0.0f);        }        for (int j=0; j < extraCopy; j++)         transformed.add(extraNodes);      }    } else {      int mod=(argsProvided % cmdArgs);      if (mod != 0) {        System.err.println("Providing multiple groups of params for command " + node.type + ", but in wrong number (missing "+ mod+ " args)");      } else {        int iter=argsProvided / cmdArgs;        for (int i=0; i < iter; i++) {          PathParser.PathDataNode newNode=new PathParser.PathDataNode(node.type,PathParser.copyOfRange(node.params,i * cmdArgs,(i + 1) * cmdArgs));          transformed.add(newNode);          if (extraCopy > 0) {            PathParser.PathDataNode extraNodes=new PathParser.PathDataNode(newNode);            ;            if (Character.isLowerCase(newNode.type)) {              Arrays.fill(extraNodes.params,0.0f);            }            for (int j=0; j < extraCopy; j++)             transformed.add(extraNodes);          }        }      }    }  }  if (transformZ) {    float[][] penPos=PathNodeUtils.calculatePenPosition(transformed);    int i=0;    for (    PathParser.PathDataNode node : transformed) {      if (node.type == 'Z') {        node.type='L';        node.params=penPos[i];      }      i++;    }  }  return transformed;}  }
class C{  public String vertex(UniformQuadBatch batch){  return vertex().replace("_MAX_QUADS_","" + batch.maxQuads).replace("_VEC4S_PER_QUAD_","" + batch.vec4sPerQuad());}  }
class C{  private void sendBluetoothServiceUpCallback(){  if (!mConnection.isGetNameAddressOnly()) {    if (DBG)     Log.d(TAG,"Calling onBluetoothServiceUp callbacks");    int n=mCallbacks.beginBroadcast();    Log.d(TAG,"Broadcasting onBluetoothServiceUp() to " + n + " receivers.");    for (int i=0; i < n; i++) {      try {        mCallbacks.getBroadcastItem(i).onBluetoothServiceUp(mBluetooth);      } catch (      RemoteException e) {        Log.e(TAG,"Unable to call onBluetoothServiceUp() on callback #" + i,e);      }    }    mCallbacks.finishBroadcast();  }}  }
class C{  private boolean isSingleUser(){  return httpAuth && StringSupport.isEmpty(Controller.getInstance().username()) && StringSupport.isEmpty(Controller.getInstance().password());}  }
class C{  protected void paintBackground(Graphics g,JMenuItem menuItem,Color bgColor){  JMenu menu=(JMenu)menuItem;  ButtonModel model=menu.getModel();  Color oldColor=g.getColor();  int menuWidth=menu.getWidth();  int menuHeight=menu.getHeight();  g.setColor(menu.getBackground());  g.fillRect(0,0,menuWidth,menuHeight);  if (menu.isTopLevelMenu()) {    g.setColor(MENU_UNSELECTED_UNDERLINE_COLOR);    g.fillRect(0,menuHeight - DECORATED_UNDERLINE_HEIGHT,menuWidth,menuHeight);  }  if (menu.isTopLevelMenu()) {    if (model.isArmed() || model.isSelected()) {      Color c=MENU_SELECTED_UNDERLINE_COLOR;      g.setColor(c);      int tW=7, tH=3;      int x1=menuWidth / 2 - tW / 2;      int y1=menuHeight - DECORATED_UNDERLINE_HEIGHT;      int x2=menuWidth / 2;      int y2=menuHeight - DECORATED_UNDERLINE_HEIGHT - tH;      int x3=menuWidth / 2 + tW / 2;      int y3=menuHeight - DECORATED_UNDERLINE_HEIGHT;      BEUtils.setAntiAliasing((Graphics2D)g,true);      BEUtils.fillTriangle(g,x1,y1,x2,y2,x3,y3,c);      BEUtils.setAntiAliasing((Graphics2D)g,false);      g.fillRect(0,menuHeight - DECORATED_UNDERLINE_HEIGHT,menuWidth,DECORATED_UNDERLINE_HEIGHT);    } else     if (model.isRollover() && model.isEnabled()) {      boolean otherMenuSelected=false;      MenuElement[] menus=((JMenuBar)menu.getParent()).getSubElements();      for (int i=0; i < menus.length; i++) {        if (((JMenuItem)menus[i]).isSelected()) {          otherMenuSelected=true;          break;        }      }      if (!otherMenuSelected) {        g.setColor(MENU_SELECTED_UNDERLINE_COLOR);        g.fillRect(0,menuHeight - DECORATED_UNDERLINE_HEIGHT,menuWidth,DECORATED_UNDERLINE_HEIGHT);      }    }  } else   if (model.isArmed() || (menuItem instanceof JMenu && model.isSelected())) {    __Icon9Factory__.getInstance().getBgIcon_ItemSelected().draw((Graphics2D)g,0,0,menuWidth,menuHeight);  }  g.setColor(oldColor);}  }
class C{  public boolean performOperation(int generation){  return true;}  }
class C{  public static WifiP2pUpnpServiceInfo newInstance(String uuid,String device,List<String> services){  if (uuid == null || device == null) {    throw new IllegalArgumentException("uuid or device cannnot be null");  }  UUID.fromString(uuid);  ArrayList<String> info=new ArrayList<String>();  info.add(createSupplicantQuery(uuid,null));  info.add(createSupplicantQuery(uuid,"upnp:rootdevice"));  info.add(createSupplicantQuery(uuid,device));  if (services != null) {    for (    String service : services) {      info.add(createSupplicantQuery(uuid,service));    }  }  return new WifiP2pUpnpServiceInfo(info);}  }
class C{  public boolean createEntities(int C_Country_ID,String City,int C_Region_ID,int C_Currency_ID,String postal,String address1){  if (m_as == null) {    log.severe("No AcctountingSChema");    m_trx.rollback();    m_trx.close();    return false;  }  log.info("C_Country_ID=" + C_Country_ID + ", City="+ City+ ", C_Region_ID="+ C_Region_ID);  m_info.append("\n----\n");  String defaultName=Msg.translate(m_lang,"Standard");  String defaultEntry="'" + defaultName + "',";  StringBuffer sqlCmd=null;  int no=0;  int C_Channel_ID=getNextID(getAD_Client_ID(),"C_Channel");  sqlCmd=new StringBuffer("INSERT INTO C_Channel ");  sqlCmd.append("(C_Channel_ID,Name,");  sqlCmd.append(m_stdColumns).append(") VALUES (");  sqlCmd.append(C_Channel_ID).append(",").append(defaultEntry);  sqlCmd.append(m_stdValues).append(")");  no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no != 1)   log.log(Level.SEVERE,"Channel NOT inserted");  int C_Campaign_ID=getNextID(getAD_Client_ID(),"C_Campaign");  sqlCmd=new StringBuffer("INSERT INTO C_Campaign ");  sqlCmd.append("(C_Campaign_ID,C_Channel_ID,").append(m_stdColumns).append(",");  sqlCmd.append(" Value,Name,Costs) VALUES (");  sqlCmd.append(C_Campaign_ID).append(",").append(C_Channel_ID).append(",").append(m_stdValues).append(",");  sqlCmd.append(defaultEntry).append(defaultEntry).append("0)");  no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no == 1)   m_info.append(Msg.translate(m_lang,"C_Campaign_ID")).append("=").append(defaultName).append("\n"); else   log.log(Level.SEVERE,"Campaign NOT inserted");  if (m_hasMCampaign) {    sqlCmd=new StringBuffer("UPDATE C_AcctSchema_Element SET ");    sqlCmd.append("C_Campaign_ID=").append(C_Campaign_ID);    sqlCmd.append(" WHERE C_AcctSchema_ID=").append(m_as.getC_AcctSchema_ID());    sqlCmd.append(" AND ElementType='MC'");    no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());    if (no != 1)     log.log(Level.SEVERE,"AcctSchema ELement Campaign NOT updated");  }  int C_SalesRegion_ID=getNextID(getAD_Client_ID(),"C_SalesRegion");  sqlCmd=new StringBuffer("INSERT INTO C_SalesRegion ");  sqlCmd.append("(C_SalesRegion_ID,").append(m_stdColumns).append(",");  sqlCmd.append(" Value,Name,IsSummary) VALUES (");  sqlCmd.append(C_SalesRegion_ID).append(",").append(m_stdValues).append(", ");  sqlCmd.append(defaultEntry).append(defaultEntry).append("'N')");  no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no == 1)   m_info.append(Msg.translate(m_lang,"C_SalesRegion_ID")).append("=").append(defaultName).append("\n"); else   log.log(Level.SEVERE,"SalesRegion NOT inserted");  if (m_hasSRegion) {    sqlCmd=new StringBuffer("UPDATE C_AcctSchema_Element SET ");    sqlCmd.append("C_SalesRegion_ID=").append(C_SalesRegion_ID);    sqlCmd.append(" WHERE C_AcctSchema_ID=").append(m_as.getC_AcctSchema_ID());    sqlCmd.append(" AND ElementType='SR'");    no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());    if (no != 1)     log.log(Level.SEVERE,"AcctSchema ELement SalesRegion NOT updated");  }  MBPGroup bpg=createBPGroups(defaultName);  MBPartner bp=new MBPartner(m_ctx,0,m_trx.getTrxName());  bp.setValue(defaultName);  bp.setName(defaultName);  bp.setBPGroup(bpg);  if (bp.save())   m_info.append(Msg.translate(m_lang,"C_BPartner_ID")).append("=").append(defaultName).append("\n"); else   log.log(Level.SEVERE,"BPartner NOT inserted");  MLocation bpLoc=new MLocation(m_ctx,C_Country_ID,C_Region_ID,City,m_trx.getTrxName());  bpLoc.saveEx();  MBPartnerLocation bpl=new MBPartnerLocation(bp);  bpl.setC_Location_ID(bpLoc.getC_Location_ID());  if (!bpl.save())   log.log(Level.SEVERE,"BP_Location (Standard) NOT inserted");  sqlCmd=new StringBuffer("UPDATE C_AcctSchema_Element SET ");  sqlCmd.append("C_BPartner_ID=").append(bp.getC_BPartner_ID());  sqlCmd.append(" WHERE C_AcctSchema_ID=").append(m_as.getC_AcctSchema_ID());  sqlCmd.append(" AND ElementType='BP'");  no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no != 1)   log.log(Level.SEVERE,"AcctSchema Element BPartner NOT updated");  MProductCategory pc=new MProductCategory(m_ctx,0,m_trx.getTrxName());  pc.setValue(defaultName);  pc.setName(defaultName);  pc.setIsDefault(true);  if (pc.save())   m_info.append(Msg.translate(m_lang,"M_Product_Category_ID")).append("=").append(defaultName).append("\n"); else   log.log(Level.SEVERE,"Product Category NOT inserted");  int C_UOM_ID=100;  int C_TaxCategory_ID=createTax(C_Country_ID,defaultEntry);  MProduct product=new MProduct(m_ctx,0,m_trx.getTrxName());  product.setValue(defaultName);  product.setName(defaultName);  product.setC_UOM_ID(C_UOM_ID);  product.setM_Product_Category_ID(pc.getM_Product_Category_ID());  product.setC_TaxCategory_ID(C_TaxCategory_ID);  if (product.save())   m_info.append(Msg.translate(m_lang,"M_Product_ID")).append("=").append(defaultName).append("\n"); else   log.log(Level.SEVERE,"Product NOT inserted");  sqlCmd=new StringBuffer("UPDATE C_AcctSchema_Element SET ");  sqlCmd.append("M_Product_ID=").append(product.getM_Product_ID());  sqlCmd.append(" WHERE C_AcctSchema_ID=").append(m_as.getC_AcctSchema_ID());  sqlCmd.append(" AND ElementType='PR'");  no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no != 1)   log.log(Level.SEVERE,"AcctSchema Element Product NOT updated");  MLocation loc=new MLocation(m_ctx,C_Country_ID,C_Region_ID,City,m_trx.getTrxName());  loc.setAddress1(address1);  loc.setPostal(postal);  loc.saveEx();  sqlCmd=new StringBuffer("UPDATE AD_OrgInfo SET C_Location_ID=");  sqlCmd.append(loc.getC_Location_ID()).append(" WHERE AD_Org_ID=").append(getAD_Org_ID());  no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no != 1)   log.log(Level.SEVERE,"Location NOT inserted");  createPreference("C_Country_ID",String.valueOf(C_Country_ID),0);  loc=new MLocation(m_ctx,C_Country_ID,C_Region_ID,City,m_trx.getTrxName());  loc.setAddress1(address1);  loc.setPostal(postal);  loc.saveEx();  MWarehouse wh=new MWarehouse(m_ctx,0,m_trx.getTrxName());  wh.setValue(defaultName);  wh.setName(defaultName);  wh.setC_Location_ID(loc.getC_Location_ID());  if (!wh.save())   log.log(Level.SEVERE,"Warehouse NOT inserted");  MLocator locator=new MLocator(wh,defaultName);  locator.setIsDefault(true);  if (!locator.save())   log.log(Level.SEVERE,"Locator NOT inserted");  sqlCmd=new StringBuffer("UPDATE AD_ClientInfo SET ");  sqlCmd.append("C_BPartnerCashTrx_ID=").append(bp.getC_BPartner_ID());  sqlCmd.append(",M_ProductFreight_ID=").append(product.getM_Product_ID());  sqlCmd.append(" WHERE AD_Client_ID=").append(getAD_Client_ID());  no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no != 1) {    String err="ClientInfo not updated";    log.log(Level.SEVERE,err);    m_info.append(err);    return false;  }  MPriceList pl=new MPriceList(m_ctx,0,m_trx.getTrxName());  pl.setName(defaultName);  pl.setC_Currency_ID(C_Currency_ID);  pl.setIsDefault(true);  if (!pl.save())   log.log(Level.SEVERE,"PriceList NOT inserted");  MDiscountSchema ds=new MDiscountSchema(m_ctx,0,m_trx.getTrxName());  ds.setName(defaultName);  ds.setDiscountType(MDiscountSchema.DISCOUNTTYPE_Pricelist);  if (!ds.save())   log.log(Level.SEVERE,"DiscountSchema NOT inserted");  MPriceListVersion plv=new MPriceListVersion(pl);  plv.setName();  plv.setM_DiscountSchema_ID(ds.getM_DiscountSchema_ID());  if (!plv.save())   log.log(Level.SEVERE,"PriceList_Version NOT inserted");  MProductPrice pp=new MProductPrice(plv,product.getM_Product_ID(),Env.ONE,Env.ONE,Env.ONE);  if (!pp.save())   log.log(Level.SEVERE,"ProductPrice NOT inserted");  MBPartner bpCU=new MBPartner(m_ctx,0,m_trx.getTrxName());  bpCU.setValue(AD_User_U_Name);  bpCU.setName(AD_User_U_Name);  bpCU.setBPGroup(bpg);  bpCU.setIsEmployee(true);  bpCU.setIsSalesRep(true);  if (bpCU.save())   m_info.append(Msg.translate(m_lang,"SalesRep_ID")).append("=").append(AD_User_U_Name).append("\n"); else   log.log(Level.SEVERE,"SalesRep (User) NOT inserted");  MLocation bpLocCU=new MLocation(m_ctx,C_Country_ID,C_Region_ID,City,m_trx.getTrxName());  bpLocCU.saveEx();  MBPartnerLocation bplCU=new MBPartnerLocation(bpCU);  bplCU.setC_Location_ID(bpLocCU.getC_Location_ID());  if (!bplCU.save())   log.log(Level.SEVERE,"BP_Location (User) NOT inserted");  sqlCmd=new StringBuffer("UPDATE AD_User SET C_BPartner_ID=");  sqlCmd.append(bpCU.getC_BPartner_ID()).append(" WHERE AD_User_ID=").append(AD_User_U_ID);  no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no != 1)   log.log(Level.SEVERE,"User of SalesRep (User) NOT updated");  MBPartner bpCA=new MBPartner(m_ctx,0,m_trx.getTrxName());  bpCA.setValue(AD_User_Name);  bpCA.setName(AD_User_Name);  bpCA.setBPGroup(bpg);  bpCA.setIsEmployee(true);  bpCA.setIsSalesRep(true);  if (bpCA.save())   m_info.append(Msg.translate(m_lang,"SalesRep_ID")).append("=").append(AD_User_Name).append("\n"); else   log.log(Level.SEVERE,"SalesRep (Admin) NOT inserted");  MLocation bpLocCA=new MLocation(m_ctx,C_Country_ID,C_Region_ID,City,m_trx.getTrxName());  bpLocCA.saveEx();  MBPartnerLocation bplCA=new MBPartnerLocation(bpCA);  bplCA.setC_Location_ID(bpLocCA.getC_Location_ID());  if (!bplCA.save())   log.log(Level.SEVERE,"BP_Location (Admin) NOT inserted");  sqlCmd=new StringBuffer("UPDATE AD_User SET C_BPartner_ID=");  sqlCmd.append(bpCA.getC_BPartner_ID()).append(" WHERE AD_User_ID=").append(AD_User_ID);  no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no != 1)   log.log(Level.SEVERE,"User of SalesRep (Admin) NOT updated");  createPaymentTerms();  C_Cycle_ID=getNextID(getAD_Client_ID(),"C_Cycle");  sqlCmd=new StringBuffer("INSERT INTO C_Cycle ");  sqlCmd.append("(C_Cycle_ID,").append(m_stdColumns).append(",");  sqlCmd.append(" Name,C_Currency_ID) VALUES (");  sqlCmd.append(C_Cycle_ID).append(",").append(m_stdValues).append(", ");  sqlCmd.append(defaultEntry).append(C_Currency_ID).append(")");  no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no != 1)   log.log(Level.SEVERE,"Cycle NOT inserted");  int C_Project_ID=getNextID(getAD_Client_ID(),"C_Project");  sqlCmd=new StringBuffer("INSERT INTO C_Project ");  sqlCmd.append("(C_Project_ID,").append(m_stdColumns).append(",");  sqlCmd.append(" Value,Name,C_Currency_ID,IsSummary) VALUES (");  sqlCmd.append(C_Project_ID).append(",").append(m_stdValuesOrg).append(", ");  sqlCmd.append(defaultEntry).append(defaultEntry).append(C_Currency_ID).append(",'N')");  no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());  if (no == 1)   m_info.append(Msg.translate(m_lang,"C_Project_ID")).append("=").append(defaultName).append("\n"); else   log.log(Level.SEVERE,"Project NOT inserted");  if (m_hasProject) {    sqlCmd=new StringBuffer("UPDATE C_AcctSchema_Element SET ");    sqlCmd.append("C_Project_ID=").append(C_Project_ID);    sqlCmd.append(" WHERE C_AcctSchema_ID=").append(m_as.getC_AcctSchema_ID());    sqlCmd.append(" AND ElementType='PJ'");    no=DB.executeUpdate(sqlCmd.toString(),m_trx.getTrxName());    if (no != 1)     log.log(Level.SEVERE,"AcctSchema ELement Project NOT updated");  }  MCashBook cb=new MCashBook(m_ctx,0,m_trx.getTrxName());  cb.setName(defaultName);  cb.setC_Currency_ID(C_Currency_ID);  if (cb.save())   m_info.append(Msg.translate(m_lang,"C_CashBook_ID")).append("=").append(defaultName).append("\n"); else   log.log(Level.SEVERE,"CashBook NOT inserted");  log.info("finish");  return true;}  }
class C{  public static <B>ImmutableTypeToInstanceMap<B> of(){  return new ImmutableTypeToInstanceMap<B>(ImmutableMap.<TypeToken<? extends B>,B>of());}  }
class C{  public void writeExif(String jpegFileName,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegFileName == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=new FileInputStream(jpegFileName);    writeExif(is,exifOutFileName);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  protected static Font[] selectDefaultFont(){  String osName=System.getProperty("os.name","").toLowerCase();  if (osName.contains("win")) {    List<Font> windowsFonts=getDefaultWindowsFonts();    return windowsFonts.toArray(new Font[windowsFonts.size()]);  } else   if (osName.contains("linux")) {    List<Font> linuxFonts=getDefaultLinuxFonts();    return linuxFonts.toArray(new Font[linuxFonts.size()]);  } else {    List<Font> defaultFonts=getDefaultFonts();    return defaultFonts.toArray(new Font[defaultFonts.size()]);  }}  }
class C{  public Iterator<String> labelsForward(){  return new LabelForwardIterator();}  }
class C{  public synchronized FilteredBlock applyAndUpdate(Block block){  List<Transaction> txns=block.getTransactions();  List<Sha256Hash> txHashes=new ArrayList<Sha256Hash>(txns.size());  List<Transaction> matched=Lists.newArrayList();  byte[] bits=new byte[(int)Math.ceil(txns.size() / 8.0)];  for (int i=0; i < txns.size(); i++) {    Transaction tx=txns.get(i);    txHashes.add(tx.getHash());    if (applyAndUpdate(tx)) {      Utils.setBitLE(bits,i);      matched.add(tx);    }  }  PartialMerkleTree pmt=PartialMerkleTree.buildFromLeaves(block.getParams(),bits,txHashes);  FilteredBlock filteredBlock=new FilteredBlock(block.getParams(),block.cloneAsHeader(),pmt);  for (  Transaction transaction : matched)   filteredBlock.provideTransaction(transaction);  return filteredBlock;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static void createFile(String filePath,String header) throws IOException {  File file=new File(filePath);  if (!file.exists()) {    file.createNewFile();    FileWriter fileWriter=new FileWriter(filePath,true);    fileWriter.write(header);    fileWriter.close();  }}  }
class C{  public void eliminate(Instruction s){  int i=0;  for (Enumeration<Operand> defs=s.getDefs(); defs.hasMoreElements(); ) {    Operand def=defs.nextElement();    if (def instanceof RegisterOperand) {      eliminate((RegisterOperand)def);    }  }  if (doMemory) {    if (LocalCSE.isStoreInstruction(s) || (options.READS_KILL && LocalCSE.isLoadInstruction(s))) {      LocationOperand sLocation=LocationCarrier.getLocation(s);      while (i < cache.size()) {        AvailableExpression ae=cache.get(i);        if (ae.inst != s) {          boolean killIt=false;          if (ae.isLoadOrStore()) {            if ((sLocation == null) && (ae.location == null)) {              killIt=true;            } else             if ((sLocation != null) && (ae.location != null)) {              killIt=LocationOperand.mayBeAliased(sLocation,ae.location);            }          }          if (killIt) {            cache.remove(i);            continue;          }        }        i++;      }    }  }}  }
class C{  public static VOVatRate toVOVatRate(VatRate domObj){  if (domObj == null) {    return null;  }  VOVatRate vo=new VOVatRate();  vo.setRate(domObj.getRate());  updateValueObject(vo,domObj);  return vo;}  }
class C{  public void flush() throws IOException {  String record;synchronized (this) {    super.flush();    record=this.toString();    super.reset();    if (record.length() == 0 || record.equals(lineSeparator)) {      return;    }    logger.logp(level,"","",record);  }}  }
class C{  public BaseEventEntry(BaseEntry<?> sourceEntry){  super(sourceEntry);  getCategories().add(EventEntry.EVENT_CATEGORY);}  }
class C{  @Override public void reset(){  crc=0;}  }
class C{  @Contract("!null, !null -> !null") public static TextAttributes merge(TextAttributes under,TextAttributes above){  if (under == null)   return above;  if (above == null)   return under;  TextAttributes attrs=under.clone();  if (above.getBackgroundColor() != null) {    attrs.setBackgroundColor(above.getBackgroundColor());  }  if (above.getForegroundColor() != null) {    attrs.setForegroundColor(above.getForegroundColor());  }  attrs.setFontType(above.getFontType() | under.getFontType());  if (above.getEffectColor() != null) {    attrs.setEffectColor(above.getEffectColor());    attrs.setEffectType(above.getEffectType());  }  return attrs;}  }
class C{  public legend addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public final void testGenerateSeedint02(){  for (int i=0; i < LENGTH; i++) {    byte[] myBytes=sr.generateSeed(i);    assertFalse("unexpected: myBytes.length != i  :: i==" + i + " myBytes.length="+ myBytes.length,myBytes.length != i);  }}  }
class C{  public void stopLightDetection(LightListener lightListener){  stopLibrarySensorDetection(lightListener);}  }
class C{  public IgniteSpiException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Path("/{alertId}/notifications") @Description("Creates new notifications for the given alert ID.") public List<NotificationDto> addNotification(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId,NotificationDto notificationDto){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  if (notificationDto == null) {    throw new WebApplicationException("Null notification object cannot be created.",Status.BAD_REQUEST);  }  Alert alert=alertService.findAlertByPrimaryKey(alertId);  if (alert != null) {    validateResourceAuthorization(req,alert.getOwner(),getRemoteUser(req));    Notification notification=new Notification(notificationDto.getName(),alert,notificationDto.getNotifierName(),notificationDto.getSubscriptions(),notificationDto.getCooldownPeriod());    notification.setMetricsToAnnotate(new ArrayList<>(notificationDto.getMetricsToAnnotate()));    List<Notification> notifications=new ArrayList<Notification>(alert.getNotifications());    notifications.add(notification);    alert.setNotifications(notifications);    alert.setModifiedBy(getRemoteUser(req));    return NotificationDto.transformToDto(alertService.updateAlert(alert).getNotifications());  }  throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);}  }
class C{  public static int precisionFromThreshold(long count){  final long hashTableEntries=(long)Math.ceil(count / MAX_LOAD_FACTOR);  int precision=PackedInts.bitsRequired(hashTableEntries * RamUsageEstimator.NUM_BYTES_INT);  precision=Math.max(precision,MIN_PRECISION);  precision=Math.min(precision,MAX_PRECISION);  return precision;}  }
class C{  public void clear(){  Arrays.fill(ritems,0,rsize,null);  Arrays.fill(pitems,0,psize,null);  rsize=0;  psize=0;  psorted=false;}  }
class C{  public void addTsDefDir(File tsDefDir){  if (!ArrayUtils.contains(tsDefDirs,tsDefDir)) {    tsDefDirs=ArrayUtils.add(tsDefDirs,tsDefDir);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Node newNode;  String attrValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=elementList.item(2);  newAttribute=doc.createAttribute("street");  attributes=testAddress.getAttributes();  newNode=attributes.setNamedItem(newAttribute);  attrValue=newNode.getNodeValue();  assertEquals("returnedNodeValue","No",attrValue);}  }
class C{  public boolean hasVariables(){  return (this._variables.size() > 0);}  }
class C{  public void subscribe(String key,ModuleCommunicationListener module){  if (this.listeners == null) {    this.listeners=new HashMap<String,List<ModuleCommunicationListener>>();  }  List<ModuleCommunicationListener> list=this.listeners.get(key);  if (list == null) {    list=new ArrayList<ModuleCommunicationListener>(INIT_CAPACITY);    this.listeners.put(key,list);  }  list.add(module);}  }
class C{  @HLEFunction(nid=0x4DA4C788,version=150) public int sceNetAdhocPtpSend(@CheckArgument("checkPtpId") int id,TPointer data,TPointer32 dataSizeAddr,int timeout,int nonblock){  if (log.isTraceEnabled()) {    log.trace(String.format("Send data: %s",Utilities.getMemoryDump(data.getAddress(),dataSizeAddr.getValue())));  }  return ptpObjects.get(id).send(data.getAddress(),dataSizeAddr,timeout,nonblock);}  }
class C{  protected ProjectDependenciesImpl(){  super();}  }
class C{  void stop(Throwable t){  vmdata.stop(t);}  }
class C{  public static IgfsException cast(String msg,IOException e){  if (e instanceof FileNotFoundException)   return new IgfsPathNotFoundException(e); else   if (e instanceof ParentNotDirectoryException)   return new IgfsParentNotDirectoryException(msg,e); else   if (e instanceof PathIsNotEmptyDirectoryException)   return new IgfsDirectoryNotEmptyException(e); else   if (e instanceof PathExistsException)   return new IgfsPathAlreadyExistsException(msg,e); else   return new IgfsException(msg,e);}  }
class C{  @Override public void onOutputAppend(Paragraph paragraph,InterpreterOutput out,String output){  Message msg=new Message(OP.PARAGRAPH_APPEND_OUTPUT).put("noteId",paragraph.getNote().getId()).put("paragraphId",paragraph.getId()).put("data",output);  notebookServer.broadcast(paragraph.getNote().getId(),msg);}  }
class C{  public void testLoadContent(){  System.out.println("loadContent");  mockInitialisationCalls(false,null);  mockAudit.setStatus(AuditStatus.CRAWLING);  EasyMock.expectLastCall().once();  EasyMock.expect(mockAuditDataService.saveOrUpdate(mockAudit)).andReturn(mockAudit).once();  EasyMock.expect(mockAudit.getStatus()).andReturn(AuditStatus.CRAWLING).once();  EasyMock.expect(mockContentDataService.hasContent(mockAudit)).andReturn(true).once();  mockAudit.setStatus(AuditStatus.CONTENT_ADAPTING);  EasyMock.expectLastCall().once();  EasyMock.expect(mockAuditDataService.saveOrUpdate(mockAudit)).andReturn(mockAudit).once();  setReplayMode();  CrawlAuditCommandImpl instance=new TestCrawlAuditCommandImpl();  instance.init();  instance.loadContent();  setVerifyMode();}  }
class C{  public void insert(Component component,int index){  if (index < 0) {    throw new IllegalArgumentException("index less than zero.");  }  int nitems=getComponentCount();  Vector<Component> tempItems=new Vector<Component>();  for (int i=index; i < nitems; i++) {    tempItems.addElement(getComponent(index));    remove(index);  }  add(component);  for (  Component tempItem : tempItems) {    add(tempItem);  }}  }
class C{  boolean isLegalInsertText(String text){  return true;}  }
class C{  @LargeTest public void testMountMultipleObb(){  File file1=null;  File file2=null;  File file3=null;  try {    file1=createObbFile(OBB_FILE_1,R.raw.obb_file1);    String filePath1=file1.getAbsolutePath();    mountObb(filePath1);    verifyObb1Contents(filePath1);    file2=createObbFile(OBB_FILE_2,R.raw.obb_file2);    String filePath2=file2.getAbsolutePath();    mountObb(filePath2);    verifyObb2Contents(filePath2);    file3=createObbFile(OBB_FILE_3,R.raw.obb_file3);    String filePath3=file3.getAbsolutePath();    mountObb(filePath3);    verifyObb3Contents(filePath3);    unmountObb(filePath1,DONT_FORCE);    unmountObb(filePath2,DONT_FORCE);    unmountObb(filePath3,DONT_FORCE);  }  finally {    if (file1 != null) {      file1.delete();    }    if (file2 != null) {      file2.delete();    }    if (file3 != null) {      file3.delete();    }  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void packAll(){  autoSize(true);}  }
class C{  public void clearPlayerPositions(){  if (getPlayerCount() == 0) {    return;  }  for (  Player player : players) {    player.setStartingPosition(null);  }}  }
class C{  private void processFrameForCode(int verbosity){  ObjectReference code=ObjectReference.fromObject(compiledMethod.getEntryCodeArray());  pushFrameIP(code,verbosity);  scanFrameForCode(code);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public DataGenOp(DataGenMethod mthd,DataIdentifier id,HashMap<String,Hop> inputParameters){  super(id.getName(),DataType.MATRIX,ValueType.DOUBLE);  _id=id;  _op=mthd;  int index=0;  for (  Entry<String,Hop> e : inputParameters.entrySet()) {    String s=e.getKey();    Hop input=e.getValue();    getInput().add(input);    input.getParent().add(this);    _paramIndexMap.put(s,index);    index++;  }  if (mthd == DataGenMethod.RAND)   _sparsity=Double.valueOf(((LiteralOp)inputParameters.get(DataExpression.RAND_SPARSITY)).getName());  String scratch=ConfigurationManager.getScratchSpace();  _baseDir=scratch + Lop.FILE_SEPARATOR + Lop.PROCESS_PREFIX+ DMLScript.getUUID()+ Lop.FILE_SEPARATOR+ Lop.FILE_SEPARATOR+ ProgramConverter.CP_ROOT_THREAD_ID+ Lop.FILE_SEPARATOR;  refreshSizeInformation();}  }
class C{  public QueryBuilder<T,ID> distinct(){  distinct=true;  selectIdColumn=false;  return this;}  }
class C{  protected void nodeConnected(short nodeId,Channel channel){  logger.debug("[{}->{}] Connection established",syncManager.getLocalNodeId(),nodeId);synchronized (connections) {    NodeConnection c=connections.get(nodeId);    if (c == null) {      connections.put(nodeId,c=new NodeConnection());    }    c.nodeChannel=channel;    c.state=NodeConnectionState.CONNECTED;  }}  }
class C{  public StAndrewsEncounter(Person p1,Person p2,double startTime,double endTime,double rssi){  this.p1=p1;  this.p2=p2;  this.startTime=startTime;  this.endTime=endTime;  this.rssi=rssi;  this.duration=endTime - startTime;}  }
class C{  public boolean has(int index,Scriptable start){  return true;}  }
class C{  public void cancel(){}  }
class C{  public static Map<String,Object> renderContentAsText(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> results=FastMap.newInstance();  LocalDispatcher dispatcher=dctx.getDispatcher();  Delegator delegator=dctx.getDelegator();  Writer out=(Writer)context.get("outWriter");  Map<String,Object> templateContext=UtilGenerics.checkMap(context.get("templateContext"));  String contentId=(String)context.get("contentId");  if (templateContext != null && UtilValidate.isEmpty(contentId)) {    contentId=(String)templateContext.get("contentId");  }  String mimeTypeId=(String)context.get("mimeTypeId");  if (templateContext != null && UtilValidate.isEmpty(mimeTypeId)) {    mimeTypeId=(String)templateContext.get("mimeTypeId");  }  Locale locale=(Locale)context.get("locale");  if (templateContext != null && locale == null) {    locale=(Locale)templateContext.get("locale");  }  if (templateContext == null) {    templateContext=FastMap.newInstance();  }  Writer outWriter=new StringWriter();  GenericValue view=(GenericValue)context.get("subContentDataResourceView");  if (view != null && view.containsKey("contentId")) {    contentId=view.getString("contentId");  }  try {    ContentWorker.renderContentAsText(dispatcher,delegator,contentId,outWriter,templateContext,locale,mimeTypeId,null,null,true);    if (out != null)     out.write(outWriter.toString());    results.put("textData",outWriter.toString());  } catch (  GeneralException e) {    Debug.logError(e,"Error rendering sub-content text",module);    return ServiceUtil.returnError(e.toString());  }catch (  IOException e) {    Debug.logError(e,"Error rendering sub-content text",module);    return ServiceUtil.returnError(e.toString());  }  return results;}  }
class C{  public static double L_Hamming(int Y[][],int Ypred[][]){  int N=Y.length;  int allMissings=0;  double loss=0.0;  for (int i=0; i < N; i++) {    if (allMissing(Y[i])) {      allMissings++;      continue;    }    double curLoss=L_Hamming(Y[i],Ypred[i]);    if (Double.isNaN(curLoss)) {      allMissings++;      continue;    }    loss+=curLoss;  }  return loss / (double)(N - allMissings);}  }
class C{  void trigger(JComponent c,MouseEvent e,int srcActions,int action){  setComponent(c);  setSourceActions(srcActions);  appendEvent(e);  fireDragGestureRecognized(action,e.getPoint());}  }
class C{  public void switchState(final boolean showAnimation){  if (showAnimation) {    final int childCount=getChildCount();    for (int i=0; i < childCount; i++) {      bindChildAnimation(getChildAt(i),i,300);    }  }  mExpanded=!mExpanded;  if (!showAnimation) {    requestLayout();  }  invalidate();}  }
class C{  void encryptBlock(byte[] in,int inOffset,byte[] out,int outOffset){  int keyOffset=0;  int t0=((in[inOffset++]) << 24 | (in[inOffset++] & 0xFF) << 16 | (in[inOffset++] & 0xFF) << 8 | (in[inOffset++] & 0xFF)) ^ K[keyOffset++];  int t1=((in[inOffset++]) << 24 | (in[inOffset++] & 0xFF) << 16 | (in[inOffset++] & 0xFF) << 8 | (in[inOffset++] & 0xFF)) ^ K[keyOffset++];  int t2=((in[inOffset++]) << 24 | (in[inOffset++] & 0xFF) << 16 | (in[inOffset++] & 0xFF) << 8 | (in[inOffset++] & 0xFF)) ^ K[keyOffset++];  int t3=((in[inOffset++]) << 24 | (in[inOffset++] & 0xFF) << 16 | (in[inOffset++] & 0xFF) << 8 | (in[inOffset++] & 0xFF)) ^ K[keyOffset++];  while (keyOffset < limit) {    int a0, a1, a2;    a0=T1[(t0 >>> 24)] ^ T2[(t1 >>> 16) & 0xFF] ^ T3[(t2 >>> 8) & 0xFF]^ T4[(t3) & 0xFF]^ K[keyOffset++];    a1=T1[(t1 >>> 24)] ^ T2[(t2 >>> 16) & 0xFF] ^ T3[(t3 >>> 8) & 0xFF]^ T4[(t0) & 0xFF]^ K[keyOffset++];    a2=T1[(t2 >>> 24)] ^ T2[(t3 >>> 16) & 0xFF] ^ T3[(t0 >>> 8) & 0xFF]^ T4[(t1) & 0xFF]^ K[keyOffset++];    t3=T1[(t3 >>> 24)] ^ T2[(t0 >>> 16) & 0xFF] ^ T3[(t1 >>> 8) & 0xFF]^ T4[(t2) & 0xFF]^ K[keyOffset++];    t0=a0;    t1=a1;    t2=a2;  }  int tt=K[keyOffset++];  out[outOffset++]=(byte)(S[(t0 >>> 24)] ^ (tt >>> 24));  out[outOffset++]=(byte)(S[(t1 >>> 16) & 0xFF] ^ (tt >>> 16));  out[outOffset++]=(byte)(S[(t2 >>> 8) & 0xFF] ^ (tt >>> 8));  out[outOffset++]=(byte)(S[(t3) & 0xFF] ^ (tt));  tt=K[keyOffset++];  out[outOffset++]=(byte)(S[(t1 >>> 24)] ^ (tt >>> 24));  out[outOffset++]=(byte)(S[(t2 >>> 16) & 0xFF] ^ (tt >>> 16));  out[outOffset++]=(byte)(S[(t3 >>> 8) & 0xFF] ^ (tt >>> 8));  out[outOffset++]=(byte)(S[(t0) & 0xFF] ^ (tt));  tt=K[keyOffset++];  out[outOffset++]=(byte)(S[(t2 >>> 24)] ^ (tt >>> 24));  out[outOffset++]=(byte)(S[(t3 >>> 16) & 0xFF] ^ (tt >>> 16));  out[outOffset++]=(byte)(S[(t0 >>> 8) & 0xFF] ^ (tt >>> 8));  out[outOffset++]=(byte)(S[(t1) & 0xFF] ^ (tt));  tt=K[keyOffset++];  out[outOffset++]=(byte)(S[(t3 >>> 24)] ^ (tt >>> 24));  out[outOffset++]=(byte)(S[(t0 >>> 16) & 0xFF] ^ (tt >>> 16));  out[outOffset++]=(byte)(S[(t1 >>> 8) & 0xFF] ^ (tt >>> 8));  out[outOffset]=(byte)(S[(t2) & 0xFF] ^ (tt));}  }
class C{  public static String hex(byte[] bytes){  char[] hexChars=new char[bytes.length * 2];  for (int j=0; j < bytes.length; j++) {    int v=bytes[j] & 0xFF;    hexChars[j * 2]=HEXES_SMALL[v >>> 4];    hexChars[j * 2 + 1]=HEXES_SMALL[v & 0x0F];  }  return new String(hexChars);}  }
class C{  public File createTrainBuildReportFile(String name){  return createFile(defaultBuildReportFilename(name),false);}  }
class C{  public static GenericObjectEditorDialog createDialog(Container parent,PropertyEditor editor,Object value){  GenericObjectEditorDialog result;  if (GUIHelper.getParentDialog(parent) != null)   result=new GenericObjectEditorDialog(GUIHelper.getParentDialog(parent)); else   result=new GenericObjectEditorDialog(GUIHelper.getParentFrame(parent));  result.setModalityType(Dialog.ModalityType.DOCUMENT_MODAL);  result.setTitle("Object editor");  if (editor != null)   result.setEditor(editor);  if (value != null)   result.setCurrent(value);  return result;}  }
class C{  protected DocWriter createWriter(final MBasicTable table,final Document document,final OutputStream out) throws DocumentException {  final PdfWriter writer=PdfWriter.getInstance(document,out);  if (table.getName() != null) {    final HeaderFooter header=new HeaderFooter(new Phrase(table.getName()),false);    header.setAlignment(Element.ALIGN_LEFT);    header.setBorder(Rectangle.NO_BORDER);    document.setHeader(header);    document.addTitle(table.getName());  }  writer.setPageEvent(new AdvancedPageNumberEvents());  return writer;}  }
class C{  public static void boot(AOSOptions options){}  }
class C{  public void signalGameOver(final String status,final Collection<PlayerID> winners,final IDelegateBridge aBridge){  if (!m_gameOver) {    m_gameOver=true;    m_winners=winners;    aBridge.getSoundChannelBroadcaster().playSoundForAll(SoundPath.CLIP_GAME_WON,((m_winners != null && !m_winners.isEmpty()) ? m_winners.iterator().next() : PlayerID.NULL_PLAYERID));    final String title="Victory Achieved" + (winners.isEmpty() ? "" : " by " + MyFormatter.defaultNamedToTextList(winners,", ",false));    getDisplay(aBridge).reportMessageToAll(("<html>" + status + "</html>"),title,true,false,true);    final boolean stopGame;    if (HeadlessGameServer.headless()) {      stopGame=true;    } else {      String displayMessage=LocalizeHTML.localizeImgLinksInHTML(status);      if (displayMessage.endsWith("</body>")) {        displayMessage=displayMessage.substring(0,displayMessage.length() - "</body>".length()) + "</br><p>Do you want to continue?</p></body>";      } else {        displayMessage=displayMessage + "</br><p>Do you want to continue?</p>";      }      stopGame=(JOptionPane.OK_OPTION != EventThreadJOptionPane.showConfirmDialog(null,("<html>" + displayMessage + "</html>"),"Continue Game?  (" + title + ")",JOptionPane.YES_NO_OPTION,new CountDownLatchHandler(true)));    }    if (stopGame) {      aBridge.stopGameSequence();    }  }}  }
class C{  @Override public void destroy() throws Exception {  if (this.infinispanCache != null) {    this.infinispanCache.stop();  }}  }
class C{  public InvitationStatus waitInvitationAnswer(){  if (InvitationStatus.INVITATION_NOT_ANSWERED != mReInviteStatus) {    return mReInviteStatus;  }  if (sLogger.isActivated()) {    sLogger.debug("Wait session invitation answer");  }  try {synchronized (mWaitUserAnswer) {      mWaitUserAnswer.wait(mRingingPeriod / 2);    }  } catch (  InterruptedException e) {    sLogger.warn("Wait for timeout has been interrupted!",e);  }  return mReInviteStatus;}  }
class C{  public IssuingDistributionPointExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.IssuingDistributionPoint_Id;  this.critical=critical.booleanValue();  if (!(value instanceof byte[])) {    throw new IOException("Illegal argument type");  }  extensionValue=(byte[])value;  DerValue val=new DerValue(extensionValue);  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for " + "IssuingDistributionPointExtension.");  }  if ((val.data == null) || (val.data.available() == 0)) {    return;  }  DerInputStream in=val.data;  while (in != null && in.available() != 0) {    DerValue opt=in.getDerValue();    if (opt.isContextSpecific(TAG_DISTRIBUTION_POINT) && opt.isConstructed()) {      distributionPoint=new DistributionPointName(opt.data.getDerValue());    } else     if (opt.isContextSpecific(TAG_ONLY_USER_CERTS) && !opt.isConstructed()) {      opt.resetTag(DerValue.tag_Boolean);      hasOnlyUserCerts=opt.getBoolean();    } else     if (opt.isContextSpecific(TAG_ONLY_CA_CERTS) && !opt.isConstructed()) {      opt.resetTag(DerValue.tag_Boolean);      hasOnlyCACerts=opt.getBoolean();    } else     if (opt.isContextSpecific(TAG_ONLY_SOME_REASONS) && !opt.isConstructed()) {      revocationReasons=new ReasonFlags(opt);    } else     if (opt.isContextSpecific(TAG_INDIRECT_CRL) && !opt.isConstructed()) {      opt.resetTag(DerValue.tag_Boolean);      isIndirectCRL=opt.getBoolean();    } else     if (opt.isContextSpecific(TAG_ONLY_ATTRIBUTE_CERTS) && !opt.isConstructed()) {      opt.resetTag(DerValue.tag_Boolean);      hasOnlyAttributeCerts=opt.getBoolean();    } else {      throw new IOException("Invalid encoding of IssuingDistributionPoint");    }  }}  }
class C{  public static ComplexType checkIsComplexType(Type type){  if (!isComplexType(type)) {    throw new ODataSystemException("A complex type is required, but '" + type.getFullyQualifiedName() + "' is not a complex type: "+ type.getMetaType());  }  return (ComplexType)type;}  }
class C{  private Collection<Unit> updateKilledUnits(final Collection<Unit> aKilledUnits,final PlayerID aPlayerID){  final JPanel lCausalityPanel;  if (aPlayerID.equals(m_defender)) {    lCausalityPanel=m_casualtiesInstantPanelDefender;  } else {    lCausalityPanel=m_casualtiesInstantPanelAttacker;  }  Map<Unit,Collection<Unit>> dependentsMap;  m_data.acquireReadLock();  try {    dependentsMap=BattleCalculator.getDependents(aKilledUnits);  }  finally {    m_data.releaseReadLock();  }  final Collection<Unit> dependentUnitsReturned=new ArrayList<>();  final Iterator<Collection<Unit>> dependentUnitsCollections=dependentsMap.values().iterator();  while (dependentUnitsCollections.hasNext()) {    final Collection<Unit> dependentCollection=dependentUnitsCollections.next();    dependentUnitsReturned.addAll(dependentCollection);  }  for (  final UnitCategory category : UnitSeperator.categorize(aKilledUnits,dependentsMap,false,false)) {    final JPanel panel=new JPanel();    JLabel unit=m_uiContext.createUnitImageJLabel(category.getType(),category.getOwner(),m_data);    panel.add(unit);    panel.add(new JLabel("x " + category.getUnits().size()));    for (    final UnitOwner owner : category.getDependents()) {      unit=m_uiContext.createUnitImageJLabel(owner.getType(),owner.getOwner(),m_data);      panel.add(unit);      panel.add(new JLabel("x " + category.getUnits().size()));    }    lCausalityPanel.add(panel);  }  return dependentUnitsReturned;}  }
class C{  @Override protected void doStop(JvmLauncher java) throws Exception {  runCommand(new LibertyInstall(this),"stop",env(null));}  }
class C{  public void reset(String latex){  parseString=new StringBuffer(latex);  len=parseString.length();  formula.root=null;  pos=0;  spos=0;  line=0;  col=0;  group=0;  insertion=false;  atIsLetter=0;  arrayMode=false;  ignoreWhiteSpace=true;  firstpass();}  }
class C{  public QName(){}  }
class C{  private MavenUtils(){}  }
class C{  protected static void sparseMatrixDenseVectorMult(MatrixObject output,CSRPointer A,Pointer B_dense,int transA,int m,int k) throws DMLRuntimeException {  long size=m * Sizeof.DOUBLE;  if (transA == CUSPARSE_OPERATION_TRANSPOSE) {    size=k * Sizeof.DOUBLE;  }  Pointer C_dense=JCudaObject.allocate((int)size);  double[] alpha={1};  double[] beta={0};  cusparseDcsrmv(cusparseHandle,transA,m,k,(int)A.nnz,Pointer.to(alpha),A.descr,A.val,A.rowPtr,A.colInd,B_dense,Pointer.to(beta),C_dense);  ((JCudaObject)(output.getGPUObject())).setDenseMatrixCudaPointer(C_dense);  output.getGPUObject().setDeviceModify(size);}  }
class C{  public InlineQueryResultMpeg4Gif.InlineQueryResultMpeg4GifBuilder title(String title){  this.title=title;  return this;}  }
class C{  public InlineQueryResultVenue build(){  return new InlineQueryResultVenue(id,latitude,longitude,title,address,foursquare_id,reply_markup,input_message_content,thumb_url,thumb_width,thumb_height);}  }
class C{  public void addListener(final IFunctionNodeListener listener){  m_listeners.addListener(listener);}  }
class C{  protected void addMissing(Instances data,int level,boolean attributeMissing,boolean classMissing,int attrIndex){  int classIndex=data.classIndex();  Random random=new Random(1);  for (int i=0; i < data.numInstances(); i++) {    Instance current=data.instance(i);    for (int j=0; j < data.numAttributes(); j++) {      if (((j == classIndex) && classMissing) || ((j == attrIndex) && attributeMissing)) {        if (Math.abs(random.nextInt()) % 100 < level) {          current.setMissing(j);        }      }    }  }}  }
class C{  public static String makeMatchingString(Delegator delegator,String address){  if (address == null) {    return null;  }  String str=address.trim().toUpperCase();  List<GenericValue> addressMap=null;  try {    addressMap=EntityQuery.use(delegator).from("AddressMatchMap").orderBy("sequenceNum").queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,module);  }  if (addressMap != null) {    for (    GenericValue v : addressMap) {      str=str.replaceAll(v.getString("mapKey").toUpperCase(),v.getString("mapValue").toUpperCase());    }  }  return str.replaceAll("\\W","");}  }
class C{  public double areaUnderPRC(int classIndex){  if (m_Predictions == null) {    return Utils.missingValue();  } else {    ThresholdCurve tc=new ThresholdCurve();    Instances result=tc.getCurve(m_Predictions,classIndex);    return ThresholdCurve.getPRCArea(result);  }}  }
class C{  @Override public boolean deleteEntry(int index){  if (this.getPageID() == 0 && index == 0 && getNumEntries() == 1) {    return false;  }  return super.deleteEntry(index);}  }
class C{  public T caseLogicalOrExpression(LogicalOrExpression object){  return null;}  }
class C{  public void writeLEChar(int c) throws IOException {  out.write(c & 0xFF);  out.write((c >>> 8) & 0xFF);  written+=2;}  }
class C{  private Ref modOp() throws PageException {  Ref ref=divMultiOp();  while (cfml.isValidIndex() && (cfml.forwardIfCurrent('%') || cfml.forwardIfCurrent("mod"))) {    ref=_mod(ref);  }  return ref;}  }
class C{  @Override public SystemState restore(long fromVersion,TxRepository repository){  workflowContext.repository(repository);  final long snapshotTransactionId=repository.getO(SystemInfo.class,0L).orElse(new SystemInfo(0L)).lastTransactionId;  final long[] transactionId={snapshotTransactionId};  try (InputProcessor processor=new DefaultInputProcessor(journalStorage)){    processor.process(fromVersion,null,JournalType.EVENTS);    processor.process(fromVersion,null,JournalType.TRANSACTIONS);  } catch (  Throwable t) {    LOG.error("restore",t);    throw new RuntimeException(t);  }  workflowEngine.getPipe().sync();  workflowContext.eventPublisher().getPipe().sync();  return new SystemState(transactionId[0]);}  }
class C{  protected GatewayImpl(){  super();}  }
class C{  public CollectionObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  public Object parse(Reader reader){  Object content;  JsonLexer lexer=new JsonLexer(reader);  JsonToken token=lexer.nextToken();  if (token.getType() == OPEN_CURLY) {    content=parseObject(lexer);  } else   if (token.getType() == OPEN_BRACKET) {    content=parseArray(lexer);  } else {    throw new JsonException("A JSON payload should start with " + OPEN_CURLY.getLabel() + " or "+ OPEN_BRACKET.getLabel()+ ".\n"+ "Instead, '"+ token.getText()+ "' was found "+ "on line: "+ token.getStartLine()+ ", "+ "column: "+ token.getStartColumn());  }  return content;}  }
class C{  public static void orderBestPatterns(ResultPoint[] patterns){  float zeroOneDistance=distance(patterns[0],patterns[1]);  float oneTwoDistance=distance(patterns[1],patterns[2]);  float zeroTwoDistance=distance(patterns[0],patterns[2]);  ResultPoint pointA;  ResultPoint pointB;  ResultPoint pointC;  if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {    pointB=patterns[0];    pointA=patterns[1];    pointC=patterns[2];  } else   if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {    pointB=patterns[1];    pointA=patterns[0];    pointC=patterns[2];  } else {    pointB=patterns[2];    pointA=patterns[0];    pointC=patterns[1];  }  if (crossProductZ(pointA,pointB,pointC) < 0.0f) {    ResultPoint temp=pointA;    pointA=pointC;    pointC=temp;  }  patterns[0]=pointA;  patterns[1]=pointB;  patterns[2]=pointC;}  }
class C{  public void testDynamicAdditionTransietSubTree() throws Exception {  client.setThrowExceptionOnFailingStatusCode(true);  getPage("/faces/state/dynamicAdditionTransientSubTree.xhtml");}  }
class C{  public static int[] toIntArray(byte[] input){  int intLen=(input.length + 3) / 4;  int lastLen=input.length & 0x03;  int[] result=new int[intLen];  int index=0;  for (int i=0; i <= intLen - 2; i++, index+=4) {    result[i]=OS2IP(input,index);  }  if (lastLen != 0) {    result[intLen - 1]=OS2IP(input,index,lastLen);  } else {    result[intLen - 1]=OS2IP(input,index);  }  return result;}  }
class C{  private void removeOldLogs(){  try {    Path path=getPath();    Path parent=path.getParent();    ArrayList<String> matchList=new ArrayList<String>();    Pattern archiveRegexp=getArchiveRegexp();    Files.list(parent).forEach(null);    Collections.sort(matchList);    if (_rolloverCount <= 0 || matchList.size() < _rolloverCount)     return;    for (int i=0; i + _rolloverCount < matchList.size(); i++) {      try {        Files.delete(parent.resolve(matchList.get(i)));      } catch (      Throwable e) {      }    }  } catch (  Throwable e) {  }}  }
class C{  ClientResponse put(URI uri,String body,String vplexSessionId,String jsonFormat){  return setResourceHeaders(_client.resource(uri),vplexSessionId,jsonFormat,VPlexApiConstants.CACHE_CONTROL_MAXAGE_ZERO).type(MediaType.APPLICATION_JSON).put(ClientResponse.class,body);}  }
class C{  public void rename(final Operator op){  view.rename(op);}  }
class C{  public boolean isDiscreteSeconds(){  return null == discreteSeconds ? _discreteSeconds : discreteSeconds.get();}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  WhiteboxRaster image2;  int cols=0;  int rows=0;  double noData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, b, i;  String inputFilesString=null;  String[] imageFiles;  double[] imageTotals;  long[] imageNs;  double[] imageAverages;  String[] shortNames=null;  String[] units=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 1) {    showFeedback("At least one image must be specified for an image correlation.");    return;  }  try {    imageTotals=new double[numImages];    imageNs=new long[numImages];    imageAverages=new double[numImages];    shortNames=new String[numImages];    units=new String[numImages];    double[] data;    for (a=0; a < numImages; a++) {      updateProgress("Image " + (a + 1) + ", Calculating image averages:",-1);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (!image.getZUnits().toLowerCase().equals("not specified")) {        units[a]=image.getZUnits();      } else {        units[a]="";      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotals[a]+=data[col];            imageNs[a]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();      imageAverages[a]=imageTotals[a] / imageNs[a];      progress=(int)(100f * (a + 1) / numImages);      updateProgress("Image " + (a + 1) + ", Calculating image average:",(int)progress);    }    String retstr=null;    retstr="IMAGE AVERAGE\n";    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numImages; a++) {      if (units[a].equals("")) {        retstr=retstr + "\n" + shortNames[a]+ "\t"+ df.format(imageAverages[a]);      } else {        retstr=retstr + "\n" + shortNames[a]+ "\t"+ df.format(imageAverages[a])+ units[a];      }    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isAbstract(int mod){  return Modifier.isAbstract(mod);}  }
class C{  private ActionRecordLogon saveLoginStart(String username){  if (inactive)   return null;  return null;}  }
class C{  private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){  StringBuilder tmp=new StringBuilder(count);  int submode=initialSubmode;  int idx=0;  while (true) {    char ch=msg.charAt(startpos + idx);switch (submode) {case SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {        if (ch == ' ') {          tmp.append((char)26);        } else {          tmp.append((char)(ch - 65));        }      } else {        if (isAlphaLower(ch)) {          submode=SUBMODE_LOWER;          tmp.append((char)27);          continue;        } else         if (isMixed(ch)) {          submode=SUBMODE_MIXED;          tmp.append((char)28);          continue;        } else {          tmp.append((char)29);          tmp.append((char)PUNCTUATION[ch]);          break;        }      }    break;case SUBMODE_LOWER:  if (isAlphaLower(ch)) {    if (ch == ' ') {      tmp.append((char)26);    } else {      tmp.append((char)(ch - 97));    }  } else {    if (isAlphaUpper(ch)) {      tmp.append((char)27);      tmp.append((char)(ch - 65));      break;    } else     if (isMixed(ch)) {      submode=SUBMODE_MIXED;      tmp.append((char)28);      continue;    } else {      tmp.append((char)29);      tmp.append((char)PUNCTUATION[ch]);      break;    }  }break;case SUBMODE_MIXED:if (isMixed(ch)) {tmp.append((char)MIXED[ch]);} else {if (isAlphaUpper(ch)) {  submode=SUBMODE_ALPHA;  tmp.append((char)28);  continue;} else if (isAlphaLower(ch)) {  submode=SUBMODE_LOWER;  tmp.append((char)27);  continue;} else {  if (startpos + idx + 1 < count) {    char next=msg.charAt(startpos + idx + 1);    if (isPunctuation(next)) {      submode=SUBMODE_PUNCTUATION;      tmp.append((char)25);      continue;    }  }  tmp.append((char)29);  tmp.append((char)PUNCTUATION[ch]);}}break;default :if (isPunctuation(ch)) {tmp.append((char)PUNCTUATION[ch]);} else {submode=SUBMODE_ALPHA;tmp.append((char)29);continue;}}idx++;if (idx >= count) {break;}}char h=0;int len=tmp.length();for (int i=0; i < len; i++) {boolean odd=(i % 2) != 0;if (odd) {h=(char)((h * 30) + tmp.charAt(i));sb.append(h);} else {h=tmp.charAt(i);}}if ((len % 2) != 0) {sb.append((char)((h * 30) + 29));}return submode;}  }
class C{  public int describeContents(){  return 0;}  }
class C{  private static String listToString(List<Integer> list){  Collections.sort(list);  StringBuilder builder=new StringBuilder();  for (int i=0; i < list.size(); i++) {    Integer column=list.get(i) + 1;    if (i < list.size() - 2) {      builder.append(column);      builder.append(", ");    } else     if (i == list.size() - 2) {      builder.append(column);      builder.append(AND);    } else {      builder.append(column);    }  }  return builder.toString();}  }
class C{  public Matrix3f lerp(Matrix3fc other,float t){  return lerp(other,t,this);}  }
class C{  ContentModelState(Object content,ContentModelState next,long value){  this.model=(ContentModel)content;  this.next=next;  this.value=value;}  }
class C{  public void write(LogRecord logRecord) throws Exception {  if (logRecord == null) {    throw new IllegalArgumentException("log record must not be null");  }  if (archiveOut == null) {    initOutput();  }  log.trace("write({})",logRecord.getId());  if (logRecord instanceof MessageRecord) {    logArchiveCache.add((MessageRecord)logRecord);  }  archiveBase.markRecordArchived(logRecord);  if (logArchiveCache.isRotating()) {    rotate();  }}  }
class C{  public MySqlWhileStatement parseWhile(){  accept(Token.WHILE);  MySqlWhileStatement stmt=new MySqlWhileStatement();  stmt.setCondition(this.exprParser.expr());  accept(Token.DO);  this.parseProcedureStatementList(stmt.getStatements());  accept(Token.END);  accept(Token.WHILE);  accept(Token.SEMI);  return stmt;}  }
class C{  protected void deployCargoPing(WebLogicLocalContainer container) throws IOException {  String deployDir=getFileHandler().createDirectory(getDomainHome(),container.getAutoDeployDirectory());  getResourceUtils().copyResource(RESOURCE_PATH + "cargocpc.war",getFileHandler().append(deployDir,"cargocpc.war"),getFileHandler());}  }
class C{  public double distance(double x,double y){  double dx=this.x - x;  double dy=this.y - y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  @Override protected char[] escape(int cp){  if (cp < safeOctets.length && safeOctets[cp]) {    return null;  } else   if (cp == ' ' && plusForSpace) {    return PLUS_SIGN;  } else   if (cp <= 0x7F) {    char[] dest=new char[3];    dest[0]='%';    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    dest[1]=UPPER_HEX_DIGITS[cp >>> 4];    return dest;  } else   if (cp <= 0x7ff) {    char[] dest=new char[6];    dest[0]='%';    dest[3]='%';    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[1]=UPPER_HEX_DIGITS[0xC | cp];    return dest;  } else   if (cp <= 0xffff) {    char[] dest=new char[9];    dest[0]='%';    dest[1]='E';    dest[3]='%';    dest[6]='%';    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp];    return dest;  } else   if (cp <= 0x10ffff) {    char[] dest=new char[12];    dest[0]='%';    dest[1]='F';    dest[3]='%';    dest[6]='%';    dest[9]='%';    dest[11]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[10]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[8]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[7]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[5]=UPPER_HEX_DIGITS[cp & 0xF];    cp>>>=4;    dest[4]=UPPER_HEX_DIGITS[0x8 | (cp & 0x3)];    cp>>>=2;    dest[2]=UPPER_HEX_DIGITS[cp & 0x7];    return dest;  } else {    throw new IllegalArgumentException("Invalid unicode character value " + cp);  }}  }
class C{  public static List<Modifier> newModifiers(AST ast,List<? extends IExtendedModifier> modifierNodes){  List<Modifier> res=new ArrayList<Modifier>(modifierNodes.size());  for (int i=0; i < modifierNodes.size(); i++) {    Object curr=modifierNodes.get(i);    if (curr instanceof Modifier) {      res.add(ast.newModifier(((Modifier)curr).getKeyword()));    }  }  return res;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.105 -0400",hash_original_method="6211296913026D4E433F161E3955F8CF",hash_generated_method="F4C01E80BBAAB1053C78228335E12B4E") synchronized boolean prepareBluetooth(){  if (!setupNativeDataNative()) {    return false;  }  switchConnectable(false);  updateSdpRecords();  return true;}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public synchronized boolean addAll(int index,Collection<? extends E> c){  modCount++;  if (index < 0 || index > elementCount)   throw new ArrayIndexOutOfBoundsException(index);  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacityHelper(elementCount + numNew);  int numMoved=elementCount - index;  if (numMoved > 0)   System.arraycopy(elementData,index,elementData,index + numNew,numMoved);  System.arraycopy(a,0,elementData,index,numNew);  elementCount+=numNew;  return numNew != 0;}  }
class C{  public boolean increment(double key){  return adjustValue(key,1);}  }
class C{  public void removeAllComponents(){  sources.clear();  classes.clear();  namespaces.clear();}  }
class C{  public byte[] readSector(int sectorNumber) throws IOException {  return readSector(sectorNumber,null);}  }
class C{  public static File asWritable(File file,String encoding){  return new WritableFile(file,encoding);}  }
class C{  public GameModel(Model model,String name,Vector3 location,Vector3 rotation,Vector3 scale){  super(name);  modelInstance=new ModelInstance(model);  applyTransform(location,rotation,scale,modelInstance);  try {    modelInstance.calculateBoundingBox(boundingBox);  } catch (  Exception e) {    Gdx.app.debug(TAG,"Error when calculating bounding box.",e);  }  boundingBox.getCenter(center);  boundingBox.getDimensions(dimensions);  boundingBoxRadius=dimensions.len() / 2f;  modelTransform=modelInstance.transform;  halfExtents.set(dimensions).scl(0.5f);}  }
class C{  protected void createRenderers(CombinedChart chart,ChartAnimator animator,ViewPortHandler viewPortHandler){  mRenderers=new ArrayList<DataRenderer>();  DrawOrder[] orders=chart.getDrawOrder();  for (  DrawOrder order : orders) {switch (order) {case BAR:      if (chart.getBarData() != null)       mRenderers.add(new BarChartRenderer(chart,animator,viewPortHandler));    break;case BUBBLE:  if (chart.getBubbleData() != null)   mRenderers.add(new BubbleChartRenderer(chart,animator,viewPortHandler));break;case LINE:if (chart.getLineData() != null) mRenderers.add(new LineChartRenderer(chart,animator,viewPortHandler));break;case CANDLE:if (chart.getCandleData() != null) mRenderers.add(new CandleStickChartRenderer(chart,animator,viewPortHandler));break;case SCATTER:if (chart.getScatterData() != null) mRenderers.add(new ScatterChartRenderer(chart,animator,viewPortHandler));break;}}}  }
class C{  public static KeyStore loadKeyStore(String type,File file,char[] password) throws Exception {  KeyStore keyStore=KeyStore.getInstance(type);  try (FileInputStream fis=new FileInputStream(file)){    keyStore.load(fis,password);  }   return keyStore;}  }
class C{  public void sortFromTo(int from,int to){  final int widthThreshold=10000;  if (size == 0)   return;  checkRangeFromTo(from,to,size);  short min=elements[from];  short max=elements[from];  short[] theElements=elements;  for (int i=from + 1; i <= to; ) {    short elem=theElements[i++];    if (elem > max)     max=elem; else     if (elem < min)     min=elem;  }  double N=(double)to - (double)from + 1.0;  double quickSortEstimate=N * Math.log(N) / 0.6931471805599453;  double width=(double)max - (double)min + 1.0;  double countSortEstimate=Math.max(width,N);  if (width < widthThreshold && countSortEstimate < quickSortEstimate) {    countSortFromTo(from,to,min,max);  } else {    quickSortFromTo(from,to);  }}  }
class C{  public void writeFile(HttpServletResponse response,File file,String contentType) throws IOException {  if (file.exists()) {    if (file.canRead()) {      response.setContentType(contentType);      response.setStatus(HttpServletResponse.SC_OK);      response.setContentLength((int)file.length());      try (FileInputStream fileInputStream=new FileInputStream(file)){        int bytes=fileInputStream.read();        while (bytes != -1) {          response.getOutputStream().write(bytes);          bytes=fileInputStream.read();        }      }     } else {      response.sendError(HttpServletResponse.SC_FORBIDDEN);    }  } else {    response.sendError(HttpServletResponse.SC_NOT_FOUND);  }}  }
class C{  public void processAttribute(String namespace,String localName,String value) throws ParseException {}  }
class C{  @Override public void consumeItem(GeoServiceJob job,DistributedQueueItemProcessedCallback callback) throws Exception {  VirtualDataCenter vdcInfo=null;  int retry=0;  while (retry < MAX_DB_RETRY) {    try {      vdcInfo=_dbClient.queryObject(VirtualDataCenter.class,job.getVdcId());      break;    } catch (    DatabaseException e) {      _log.info("db not stable yet, retry");      try {        TimeUnit.SECONDS.sleep(WAIT_INTERVAL_IN_SEC);      } catch (      InterruptedException ex) {      }    }    retry=retry + 1;  }  if (vdcInfo == null) {    _log.info("Failed to query vdc {} from DB. Retry later",job.getVdcId());    return;  }  String task=job.getTask();  if (task == null) {    _log.error("The vdc connect job for {} does not have an associated task",job.getVdcId());    return;  }  try {    _controller.setKeystore(viprKeyStore);    GeoServiceJob.JobType type=job.getType();switch (type) {case VDC_CONNECT_JOB:      _log.info("Continuing initialization operation {} for {}",task,job.getVdcId());    _controller.connectVdc(vdcInfo,task,job.getParams());  break;case VDC_REMOVE_JOB:_log.info("vdc operation {} for {}",task,job.getVdcId());_controller.removeVdc(vdcInfo,task,job.getParams());break;case VDC_UPDATE_JOB:_log.info("Updating operation {} for {}",task,job.getVdcId());_controller.updateVdc(job.getVdc(),task,job.getParams());break;case VDC_DISCONNECT_JOB:_log.info("Disconnecting operation {} for {}",task,job.getVdcId());_controller.disconnectVdc(vdcInfo,task,job.getParams());break;case VDC_RECONNECT_JOB:_log.info("Reconnecting operation {} for {}",task,job.getVdcId());_controller.reconnectVdc(vdcInfo,task,job.getParams());break;default :_log.error("Invalid operation type {} on {}/{}",new Object[]{job.getType(),task,job.getVdcId()});}} catch (Exception e) {_log.error("Execute job failed",e);}callback.itemProcessed();_log.info("The job type={} vdcId={} task={} is removed",new Object[]{job.getType(),job.getVdcId(),job.getTask()});}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static String tranDate2DateMonthStr(Date date){  try {    SimpleDateFormat formatter2=new SimpleDateFormat("yyyy-MM",Locale.getDefault());    formatter2.setTimeZone(timeZone);    return formatter2.format(date);  } catch (  Throwable e) {    Log.e(TAG,e.toString());    return "2015-10-10";  }}  }
class C{  public Action0 onSchedule(Action0 action){  return action;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private String printEFormat(final double x){  if (conversionCharacter == 'e') {    return eFormatString(x,'e');  } else {    return eFormatString(x,'E');  }}  }
class C{  public boolean equals(String obj2){  return m_str.equals(obj2);}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  try {    createSelectionPanel(true,true,true);    m_frame.getContentPane().add(selectionPanel,BorderLayout.NORTH);    createMainPanel();    CScrollPane scroll=new CScrollPane(this);    m_frame.getContentPane().add(scroll,BorderLayout.CENTER);    confirmPanel.addActionListener(this);    m_frame.getContentPane().add(confirmPanel,BorderLayout.SOUTH);    DefaultMutableTreeNode parent=new DefaultMutableTreeNode(Msg.translate(Env.getCtx(),"No Product Chosen"));    this.m_RadioButtonTreeCellRenderer=new RadioButtonTreeCellRenderer();  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  sizeIt();}  }
class C{  public static String[] split(String str,String separator,int max){  StringTokenizer tok=null;  if (separator == null) {    tok=new StringTokenizer(str);  } else {    tok=new StringTokenizer(str,separator);  }  int listSize=tok.countTokens();  if ((max > 0) && (listSize > max)) {    listSize=max;  }  String[] list=new String[listSize];  int i=0;  int lastTokenBegin=0;  int lastTokenEnd=0;  while (tok.hasMoreTokens()) {    if ((max > 0) && (i == listSize - 1)) {      String endToken=tok.nextToken();      lastTokenBegin=str.indexOf(endToken,lastTokenEnd);      list[i]=str.substring(lastTokenBegin);      break;    } else {      list[i]=tok.nextToken();      lastTokenBegin=str.indexOf(list[i],lastTokenEnd);      lastTokenEnd=lastTokenBegin + list[i].length();    }    i++;  }  return list;}  }
class C{  public static double[][] insertColumns(double[][] x,int J,double[]... y){  return transpose(insertRows(transpose(x),J,y));}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.208 -0400",hash_original_method="D1B0FD158ADFC92BBFD1BB0730BB198D",hash_generated_method="E7B33B2FD022D8D318A01B2F8DFC1302") public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:10.435 -0400",hash_original_method="0AC7BC23ACF69EF74E5E86783450B001",hash_generated_method="531FA8041DB3A2DB01E0493F2258E306") public PrintServiceInfo(Parcel parcel){  mId=parcel.readString();  mResolveInfo=parcel.readParcelable(null);  mSettingsActivityName=parcel.readString();  mAddPrintersActivityName=parcel.readString();  mAdvancedPrintOptionsActivityName=parcel.readString();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public boolean isFieldSeparatorAtEnd(){  return super.isFieldSeparatorAtEnd();}  }
class C{  public EcuConversions(){  this("prot/res/obd/conversions.csv");}  }
class C{  protected ArgsBase(){  _argv=null;  _startTime=0;  _programInfo=null;  _env=null;}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    return in.read();  }}  }
class C{  public void addText(float latPoint,float lonPoint,int offset_x,int offset_y,String stuff,int justify,LinkProperties properties) throws IOException {  LinkText.write(latPoint,lonPoint,offset_x,offset_y,stuff,LinkText.DEFAULT_FONT,justify,properties,link.dos);}  }
class C{  private String loadSettings(InputStream in){  StringBuilder settings=new StringBuilder();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(in));    String line=reader.readLine();    while (line != null) {      if (settings.length() != 0)       settings.append(SystemHelper.LINE_SEPARATOR);      settings.append(line);      line=reader.readLine();    }  } catch (  Throwable e) {    throw new IgniteException("Failed to read input stream for Cassandra persistence settings",e);  } finally {    U.closeQuiet(reader);    U.closeQuiet(in);  }  return settings.toString();}  }
class C{  @Override public void write(final byte b[]) throws IOException {  this.write(b,0,b.length);}  }
class C{  public void validateRoles(){  Comboitem lstItemRole=lstRole.getSelectedItem();  Comboitem lstItemClient=lstClient.getSelectedItem();  Comboitem lstItemOrg=lstOrganisation.getSelectedItem();  Comboitem lstItemWarehouse=lstWarehouse.getSelectedItem();  if (lstItemRole == null || lstItemRole.getValue() == null) {    throw new WrongValueException(lstRole,Msg.getMsg(m_ctx,"FillMandatory") + lblRole.getValue());  } else   if (lstItemClient == null || lstItemClient.getValue() == null) {    throw new WrongValueException(lstClient,Msg.getMsg(m_ctx,"FillMandatory") + lblClient.getValue());  } else   if (lstItemOrg == null || lstItemOrg.getValue() == null) {    throw new WrongValueException(lstOrganisation,Msg.getMsg(m_ctx,"FillMandatory") + lblOrganisation.getValue());  }  int orgId=0, warehouseId=0;  orgId=Integer.parseInt((String)lstItemOrg.getValue());  KeyNamePair orgKNPair=new KeyNamePair(orgId,lstItemOrg.getLabel());  KeyNamePair warehouseKNPair=null;  if (lstItemWarehouse != null && lstItemWarehouse.getValue() != null) {    warehouseId=Integer.parseInt((String)lstItemWarehouse.getValue());    warehouseKNPair=new KeyNamePair(warehouseId,lstItemWarehouse.getLabel());  }  String msg=login.validateLogin(orgKNPair);  if (msg != null && msg.length() > 0) {    throw new WrongValueException(msg);  }  msg=login.loadPreferences(orgKNPair,warehouseKNPair,null,null);  if (!(msg == null || msg.length() == 0)) {    throw new WrongValueException(msg);  }  wndLogin.loginCompleted();  UserPreference userPreference=SessionManager.getSessionApplication().getUserPreference();  userPreference.setProperty(UserPreference.P_LANGUAGE,Env.getContext(m_ctx,UserPreference.LANGUAGE_NAME));  userPreference.setProperty(UserPreference.P_ROLE,lstItemRole != null ? (String)lstItemRole.getValue() : "0");  userPreference.setProperty(UserPreference.P_CLIENT,lstItemClient != null ? (String)lstItemClient.getValue() : "0");  userPreference.setProperty(UserPreference.P_ORG,lstItemOrg != null ? (String)lstItemOrg.getValue() : "0");  userPreference.setProperty(UserPreference.P_WAREHOUSE,lstItemWarehouse != null ? (String)lstItemWarehouse.getValue() : "0");  userPreference.savePreference();}  }
class C{  public static int indexOfSmallestElement(double[] array){  if (array.length <= 1)   return 0;  double min=array[0];  int minimumIndex=0;  for (int i=1; i < array.length; i++) {    if (array[i] < min) {      min=array[i];      minimumIndex=i;    }  }  return minimumIndex;}  }
class C{  private void finalize(BlockParser blockParser){  if (getActiveBlockParser() == blockParser) {    deactivateBlockParser();  }  blockParser.closeBlock();  if (blockParser instanceof ParagraphParser) {    ParagraphParser paragraphParser=(ParagraphParser)blockParser;    paragraphParser.closeBlock(inlineParser);  } else   if (blockParser instanceof ListBlockParser) {    ListBlockParser listBlockParser=(ListBlockParser)blockParser;    finalizeListTight(listBlockParser);  }}  }
class C{  public OperatorDocumentationBrowser(){  setLayout(new BorderLayout());  editor.addHyperlinkListener(new OperatorHelpLinkListener());  editor.setEditable(false);  HTMLEditorKit hed=new HTMLEditorKit();  hed.setStyleSheet(createStyleSheet(hed.getStyleSheet()));  editor.setEditorKit(hed);  editor.setBackground(Colors.PANEL_BACKGROUND);  editor.setContentType("text/html");  scrollPane=new ExtendedJScrollPane(editor);  scrollPane.setMinimumSize(new Dimension(100,100));  scrollPane.setPreferredSize(new Dimension(100,100));  scrollPane.setBorder(null);  this.add(scrollPane,BorderLayout.CENTER);  this.setVisible(true);  this.validate();  documentationUpdateQueue.start();}  }
class C{  private static boolean isBufferTooLarge(ByteBuffer buf){  return isBufferTooLarge(buf.capacity());}  }
class C{  private void removeInitiatorsFromZoningMap(List<NetworkZoningParam> zoningParams){  for (  NetworkZoningParam zoningParam : zoningParams) {    ExportMask mask=_dbClient.queryObject(ExportMask.class,zoningParam.getMaskId());    if (mask == null || mask.getInactive()) {      continue;    }    List<URI> initiators=StringSetUtil.stringSetToUriList(zoningParam.getZoningMap().keySet());    for (    URI initiatorURI : initiators) {      if (mask.getZoningMap() != null) {        mask.removeZoningMapEntry(initiatorURI.toString());      }    }    _dbClient.persistObject(mask);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void start(){  super.start();}  }
class C{  public static String formatDate(Object date){  return DateFormat.getDateInstance(DateFormat.DEFAULT).format(date);}  }
class C{  private void readASCII(final BufferedReader buffer) throws NumberFormatException, IOException {  RajLog.i("StlPaser: Reading ASCII");  final List<Float> vertices=new ArrayList<Float>();  final List<Float> normals=new ArrayList<Float>();  final float[] tempNorms=new float[3];  int nextOffset, prevOffset, i, insert;  String line;  line=buffer.readLine();  while ((line=buffer.readLine()) != null) {    if (line.contains("facet normal ")) {      nextOffset=line.lastIndexOf(" ");      tempNorms[2]=Float.parseFloat(line.substring(nextOffset + 1));      prevOffset=nextOffset;      nextOffset=line.lastIndexOf(" ",prevOffset - 1);      tempNorms[1]=Float.parseFloat(line.substring(nextOffset + 1,prevOffset));      prevOffset=nextOffset;      nextOffset=line.lastIndexOf(" ",prevOffset - 1);      tempNorms[0]=Float.parseFloat(line.substring(nextOffset + 1,prevOffset));      for (i=0; i < 3; i++) {        normals.add(tempNorms[0]);        normals.add(tempNorms[1]);        normals.add(tempNorms[2]);      }    } else     if (line.contains("vertex ")) {      insert=vertices.size();      nextOffset=line.lastIndexOf(" ");      vertices.add(Float.parseFloat(line.substring(nextOffset + 1)));      prevOffset=nextOffset;      nextOffset=line.lastIndexOf(" ",prevOffset - 1);      vertices.add(insert,Float.parseFloat(line.substring(nextOffset + 1,prevOffset)));      prevOffset=nextOffset;      nextOffset=line.lastIndexOf(" ",prevOffset - 1);      vertices.add(insert,Float.parseFloat(line.substring(nextOffset + 1,prevOffset)));    }  }  float[] verticesArr=new float[vertices.size()];  float[] normalsArr=new float[normals.size()];  for (i=0; i < verticesArr.length; i++) {    verticesArr[i]=vertices.get(i);    normalsArr[i]=normals.get(i);  }  vertices.clear();  normals.clear();  int[] indicesArr=new int[verticesArr.length / 3];  for (i=0; i < indicesArr.length; i++)   indicesArr[i]=i;  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);}  }
class C{  public JCCompilationUnit makeJCCompilationUnitPlaceholder(Tree.CompilationUnit t,JavaFileObject file,String pkgName,PhasedUnit phasedUnit){  JCExpression pkg=pkgName != null ? getPackage(pkgName) : null;  at(t);  List<JCTree> defs=makeDefs(t);  JCCompilationUnit topLev=new CeylonCompilationUnit(List.<JCTree.JCAnnotation>nil(),pkg,defs,null,null,null,null,t,phasedUnit);  topLev.lineMap=getMap();  topLev.sourcefile=file;  topLev.isCeylonProgram=true;  return topLev;}  }
class C{  public static void verifyStoragePermissions(Activity activity){  int permission=ActivityCompat.checkSelfPermission(activity,Manifest.permission.WRITE_EXTERNAL_STORAGE);  if (permission != PackageManager.PERMISSION_GRANTED) {    ActivityCompat.requestPermissions(activity,PERMISSIONS_STORAGE,REQUEST_EXTERNAL_STORAGE);  }}  }
class C{  void paintHorScrollbar(Graphics g,boolean paintAll){  int w=getListWidth();  paintScrollBar(hsb,g,0,height - (SCROLLBAR_WIDTH),w,SCROLLBAR_WIDTH,paintAll);}  }
class C{  public void createPersons(InitRoutes initRouteSpecification,Double initPlanScore){  if (initRouteSpecification.equals(InitRoutes.ONLY_MIDDLE) && !this.middleLinkExists) {    throw new IllegalArgumentException("You are trying to create agents " + "with an initial middle route, although no middle link exists.");  }  for (int i=0; i < this.numberOfPersons * this.simulationPeriod; i++) {    Person person=population.getFactory().createPerson(Id.createPersonId(i));    Activity startAct=population.getFactory().createActivityFromLinkId("dummy",Id.createLinkId("0_1"));    startAct.setEndTime(simulationStartTime + (double)(i) / (numberOfPersons * simulationPeriod) * simulationPeriod * 3600);    Activity drainAct=population.getFactory().createActivityFromLinkId("dummy",Id.createLinkId("5_6"));    Leg leg1=population.getFactory().createLeg(TransportMode.car);switch (initRouteSpecification) {case ONLY_MIDDLE:case ALL:      leg1=createMiddleLeg();    break;case ONLY_OUTER:  leg1=createUpperLeg();break;default :break;}Plan plan1=createPlan(startAct,leg1,drainAct,initPlanScore);person.addPlan(plan1);if (initRouteSpecification.equals(InitRoutes.ONLY_OUTER) && (i % 2 == 1)) {person.setSelectedPlan(plan1);}population.addPerson(person);if (initRouteSpecification.equals(InitRoutes.ONLY_OUTER) || initRouteSpecification.equals(InitRoutes.ALL)) {Leg leg2=createLowerLeg();Plan plan2=createPlan(startAct,leg2,drainAct,initPlanScore);person.addPlan(plan2);if (i % 2 == 0) {person.setSelectedPlan(plan2);}if (initRouteSpecification.equals(InitRoutes.ALL)) {Leg leg3=createUpperLeg();Plan plan3=createPlan(startAct,leg3,drainAct,initPlanScore);person.addPlan(plan3);if (i % 2 == 1) {person.setSelectedPlan(plan3);}}}}if (this.writePopFile) {PopulationWriter popWriter=new PopulationWriter(population);popWriter.write(this.pathToPopFile);}}  }
class C{  public static boolean connect(){  boolean success=false;  try {    Connection connRW=getConnectionRW();    if (connRW != null) {      s_cc.readInfo(connRW);      connRW.close();    }    Connection connRO=getConnectionRO();    if (connRO != null) {      connRO.close();    }    Connection connID=getConnectionID();    if (connID != null) {      connID.close();    }    success=((connRW != null) && (connRO != null) && (connID != null));  } catch (  Exception e) {    System.err.println("Could not connect to DB - " + e.getLocalizedMessage());    e.printStackTrace();    success=false;  }  return success;}  }
class C{  private SpeechletResponse makeTideRequest(CityDateValues<String,String> cityStation,CityDateValues<String,String> date){  String queryString=String.format("?%s&station=%s&product=predictions&datum=%s&units=english" + "&time_zone=lst_ldt&format=json",date.apiValue,cityStation.apiValue,DATUM);  String speechOutput="";  InputStreamReader inputStream=null;  BufferedReader bufferedReader=null;  StringBuilder builder=new StringBuilder();  try {    String line;    URL url=new URL(ENDPOINT + queryString);    inputStream=new InputStreamReader(url.openStream(),Charset.forName("US-ASCII"));    bufferedReader=new BufferedReader(inputStream);    while ((line=bufferedReader.readLine()) != null) {      builder.append(line);    }  } catch (  IOException e) {    builder.setLength(0);  } finally {    IOUtils.closeQuietly(inputStream);    IOUtils.closeQuietly(bufferedReader);  }  if (builder.length() == 0) {    speechOutput="Sorry, the National Oceanic tide service is experiencing a problem. " + "Please try again later.";  } else {    try {      JSONObject noaaResponseObject=new JSONObject(new JSONTokener(builder.toString()));      if (noaaResponseObject != null) {        HighTideValues highTideResponse=findHighTide(noaaResponseObject);        speechOutput=new StringBuilder().append(date.speechValue).append(" in ").append(cityStation.speechValue).append(", the first high tide will be around ").append(highTideResponse.firstHighTideTime).append(", and will peak at about ").append(highTideResponse.firstHighTideHeight).append(", followed by a low tide at around ").append(highTideResponse.lowTideTime).append(" that will be about ").append(highTideResponse.lowTideHeight).append(". The second high tide will be around ").append(highTideResponse.secondHighTideTime).append(", and will peak at about ").append(highTideResponse.secondHighTideHeight).append(".").toString();      }    } catch (    JSONException|ParseException e) {      log.error("Exception occoured while parsing service response.",e);    }  }  SimpleCard card=new SimpleCard();  card.setTitle("Tide Pooler");  card.setContent(speechOutput);  PlainTextOutputSpeech outputSpeech=new PlainTextOutputSpeech();  outputSpeech.setText(speechOutput);  return SpeechletResponse.newTellResponse(outputSpeech,card);}  }
class C{  private void trimBusinessObjectDataNotificationFilterBusinessObjectFormatFields(BusinessObjectDataNotificationFilter filter){  if (filter.getBusinessObjectFormatUsage() != null) {    filter.setBusinessObjectFormatUsage(filter.getBusinessObjectFormatUsage().trim());  }  if (filter.getBusinessObjectFormatFileType() != null) {    filter.setBusinessObjectFormatFileType(filter.getBusinessObjectFormatFileType().trim());  }}  }
class C{  private void adjustViewsLeftOrRight(){  final int childCount=getChildCount();  int delta;  if (childCount > 0) {    View child;    if (!mStackFromRight) {      child=getChildAt(0);      delta=child.getLeft() - mListPadding.left;      if (mFirstPosition != 0) {        delta-=mDividerWidth;      }      if (delta < 0) {        delta=0;      }    } else {      child=getChildAt(childCount - 1);      delta=child.getRight() - (getWidth() - mListPadding.right);      if (mFirstPosition + childCount < mItemCount) {        delta+=mDividerWidth;      }      if (delta > 0) {        delta=0;      }    }    if (delta != 0) {      offsetChildrenLeftAndRight(-delta);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ChainingXmlWriter register(String parameterName,ICalDataType dataType){  parameterDataTypes.put(parameterName,dataType);  return this;}  }
class C{  public static Drawable round(){  return Drawables.darkOval();}  }
class C{  private static String generateTestKey(String deviceSerial,TestIdentifier test){  return String.format("%s#%s",deviceSerial,test.toString());}  }
class C{  public JobImpressionsSupported(int lowerBound,int upperBound){  super(lowerBound,upperBound);  if (lowerBound > upperBound) {    throw new IllegalArgumentException("Null range specified");  } else   if (lowerBound < 0) {    throw new IllegalArgumentException("Job K octets value < 0 specified");  }}  }
class C{  private void validateBucketsAfterPutInMultiplePartitionRegion(final int startIndexForRegion,final int endIndexForRegion) throws Throwable {  int AsyncInvocationArrSize=8;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  async[0]=vm[0].invokeAsync(validateBucketCreationAfterPut(startIndexForRegion,endIndexForRegion));  async[1]=vm[1].invokeAsync(validateBucketCreationAfterPut(startIndexForRegion,endIndexForRegion));  async[2]=vm[2].invokeAsync(validateBucketCreationAfterPut(startIndexForRegion,endIndexForRegion));  async[3]=vm[3].invokeAsync(validateBucketCreationAfterPutForNode3(startIndexForRegion,endIndexForRegion));  for (int count=0; count < 4; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < 4; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("got exception on " + count,async[count].getException());    }  }  async[4]=vm[0].invokeAsync(validateBucketScopeAfterPut(startIndexForRegion,endIndexForRegion));  async[5]=vm[1].invokeAsync(validateBucketScopeAfterPut(startIndexForRegion,endIndexForRegion));  async[6]=vm[2].invokeAsync(validateBucketScopeAfterPut(startIndexForRegion,endIndexForRegion));  async[7]=vm[3].invokeAsync(validateBucketCreationAfterPutForNode3(startIndexForRegion,endIndexForRegion));  for (int count=4; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=4; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      LogWriterUtils.getLogWriter().warning("Failure of async invocation on VM " + this.vm[count] + " exception thrown "+ async[count].getException());      throw async[count].getException();    }  }}  }
class C{  public void broadcastUpdateUICommand(String[] updateFlags,String[] flagValues){  Intent intent=new Intent(UPDATE_UI_BROADCAST);  for (int i=0; i < updateFlags.length; i++) {    intent.putExtra(updateFlags[i],flagValues[i]);  }  mLocalBroadcastManager=LocalBroadcastManager.getInstance(mContext);  mLocalBroadcastManager.sendBroadcast(intent);}  }
class C{  private synchronized void addFallbackIcons(){  addFallbackIcon(Usericon.Type.MOD,"icon_mod.png");  addFallbackIcon(Usericon.Type.ADMIN,"icon_admin.png");  addFallbackIcon(Usericon.Type.STAFF,"icon_staff.png");  addFallbackIcon(Usericon.Type.BROADCASTER,"icon_broadcaster.png");  addFallbackIcon(Usericon.Type.SUB,"icon_sub.png");  addFallbackIcon(Usericon.Type.TURBO,"icon_turbo.png");  addFallbackIcon(Usericon.Type.GLOBAL_MOD,"icon_globalmod.png");  addFallbackIcon(Usericon.Type.BOT,"icon_bot.png");}  }
class C{  public double dot(Vector3D a){  return (x * a.x + y * a.y + z * a.z);}  }
class C{  public static void eachDir(File self,@ClosureParams(value=SimpleType.class,options="java.io.File") Closure closure) throws FileNotFoundException, IllegalArgumentException {  eachFile(self,FileType.DIRECTORIES,closure);}  }
class C{  public T createDataLine(){  try {    T dl=_dataLineClass.newInstance();    return dl;  } catch (  IllegalAccessException e) {    throw new RuntimeException(e);  }catch (  InstantiationException e) {    throw new RuntimeException(e);  }catch (  ClassCastException e) {    throw new RuntimeException(e);  }}  }
class C{  public static void writeWeights(String filename,Counter<String> wts){  serialize(filename,wts,SerializationMode.BIN_GZ);}  }
class C{  public FastAvailableExpressions(Body b,SideEffectTester st){  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "] Finding available expressions...");  FastAvailableExpressionsAnalysis analysis=new FastAvailableExpressionsAnalysis(new ExceptionalUnitGraph(b),b.getMethod(),st);{    unitToPairsAfter=new HashMap<Unit,List<UnitValueBoxPair>>(b.getUnits().size() * 2 + 1,0.7f);    unitToPairsBefore=new HashMap<Unit,List<UnitValueBoxPair>>(b.getUnits().size() * 2 + 1,0.7f);    unitToEquivsAfter=new HashMap<Unit,Chain>(b.getUnits().size() * 2 + 1,0.7f);    unitToEquivsBefore=new HashMap<Unit,Chain>(b.getUnits().size() * 2 + 1,0.7f);    Iterator unitIt=b.getUnits().iterator();    while (unitIt.hasNext()) {      Unit s=(Unit)unitIt.next();      FlowSet set=(FlowSet)analysis.getFlowBefore(s);      List<UnitValueBoxPair> pairsBefore=new ArrayList<UnitValueBoxPair>();      List<UnitValueBoxPair> pairsAfter=new ArrayList<UnitValueBoxPair>();      Chain equivsBefore=new HashChain();      Chain equivsAfter=new HashChain();      if (set instanceof ToppedSet && ((ToppedSet)set).isTop())       throw new RuntimeException("top! on " + s);      List setAsList=set.toList();      Iterator si=setAsList.iterator();      while (si.hasNext()) {        Value v=(Value)si.next();        Stmt containingStmt=(Stmt)analysis.rhsToContainingStmt.get(v);        UnitValueBoxPair p=new UnitValueBoxPair(containingStmt,((AssignStmt)containingStmt).getRightOpBox());        pairsBefore.add(p);        EquivalentValue ev=new EquivalentValue(v);        if (!equivsBefore.contains(ev))         equivsBefore.add(ev);      }      unitToPairsBefore.put(s,pairsBefore);      unitToEquivsBefore.put(s,equivsBefore);      set=(FlowSet)analysis.getFlowAfter(s);      setAsList=set.toList();      si=setAsList.iterator();      while (si.hasNext()) {        Value v=(Value)si.next();        Stmt containingStmt=(Stmt)analysis.rhsToContainingStmt.get(v);        UnitValueBoxPair p=new UnitValueBoxPair(containingStmt,((AssignStmt)containingStmt).getRightOpBox());        pairsAfter.add(p);        EquivalentValue ev=new EquivalentValue(v);        if (!equivsAfter.contains(ev))         equivsAfter.add(ev);      }      unitToPairsAfter.put(s,pairsAfter);      unitToEquivsAfter.put(s,equivsAfter);    }  }  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "]     Found available expressions...");}  }
class C{  private byte[] extractBytes(UrlWithScore k) throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  DataOutputStream out=new DataOutputStream(bos);  k.write(out);  byte[] bytes=bos.toByteArray();  out.close();  return bytes;}  }
class C{  public void testForkHelpQuiesce(){  testForkHelpQuiesce(mainPool());}  }
class C{  public SetAudioStream(int playerId,String stream){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("stream",stream);}  }
class C{  public String toString(){  String result;  result=getName();  if (hasIndex())   result+="[" + getIndex() + "]";  return result;}  }
class C{  public int remove(long key){  int prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public RestoreRequest(String cause,String repository,String name,String[] indices,IndicesOptions indicesOptions,String renamePattern,String renameReplacement,Settings settings,TimeValue masterNodeTimeout,boolean includeGlobalState,boolean partial,boolean includeAliases,Settings indexSettings,String[] ignoreIndexSettings){  this.cause=cause;  this.name=name;  this.repository=repository;  this.indices=indices;  this.renamePattern=renamePattern;  this.renameReplacement=renameReplacement;  this.indicesOptions=indicesOptions;  this.settings=settings;  this.masterNodeTimeout=masterNodeTimeout;  this.includeGlobalState=includeGlobalState;  this.partial=partial;  this.includeAliases=includeAliases;  this.indexSettings=indexSettings;  this.ignoreIndexSettings=ignoreIndexSettings;}  }
class C{  public static boolean isLocal(Path path){  checkNotNull(path,"path must be non-null");  return path.getFileSystem().equals(FileSystems.getDefault());}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction listproducers=new RPAction();  listproducers.put("type","listproducers");  ClientSingletonRepository.getClientFramework().send(listproducers);  return true;}  }
class C{  public Form(DataForm dataForm){  this.dataForm=dataForm;}  }
class C{  public synchronized int read(byte b[],int off,int len) throws IOException {  if (len <= 0)   return 0;  int moreSpace;synchronized (lock) {    if (pos >= present)     pos=present=0; else     if (pos >= waterMark) {      System.arraycopy(buffer,pos,buffer,0,present - pos);      present-=pos;      pos=0;    }    int freeSpace=buffer.length - present;    moreSpace=Math.max(freeSpace - requested,0);  }  if (moreSpace > 0)   manager.sendRequest(info,moreSpace);synchronized (lock) {    requested+=moreSpace;    while ((pos >= present) && !disconnected) {      try {        lock.wait();      } catch (      InterruptedException e) {      }    }    if (disconnected && pos >= present)     return -1;    int available=present - pos;    if (len < available) {      System.arraycopy(buffer,pos,b,off,len);      pos+=len;      return len;    } else {      System.arraycopy(buffer,pos,b,off,available);      pos=present=0;      return available;    }  }}  }
class C{  public char skipTo(char to){  char c;  int index=this.myIndex;  do {    c=next();    if (c == 0) {      this.myIndex=index;      return c;    }  } while (c != to);  back();  return c;}  }
class C{  public float[][] toArray2(){  float[][] array=new float[rows][columns];  for (int r=0; r < rows; r++) {    for (int c=0; c < columns; c++) {      array[r][c]=get(r,c);    }  }  return array;}  }
class C{  public AccountHeaderBuilder withHeaderBackground(ImageHolder headerBackground){  this.mHeaderBackground=headerBackground;  return this;}  }
class C{  @SuppressWarnings("TooBroadScope") public static void stopAll(boolean wait){  ConcurrentMap<UUID,GridClientImpl> old;  busyLock.writeLock().lock();  try {    old=openClients;    openClients=new ConcurrentHashMap<>();  }  finally {    busyLock.writeLock().unlock();  }  for (  GridClientImpl client : old.values())   client.stop(wait);}  }
class C{  public boolean decodeConstrainedEncoding(int startIndex){  if (decodeShortInteger(startIndex) == true) {    mStringValue=null;    return true;  }  return decodeExtensionMedia(startIndex);}  }
class C{  public static Object withOutputStream(Path self,@ClosureParams(value=SimpleType.class,options="java.io.OutputStream") Closure closure) throws IOException {  return IOGroovyMethods.withStream(newOutputStream(self),closure);}  }
class C{  public PeerAddress(String hostname,int port){  this.hostname=hostname;  this.port=port;  this.protocolVersion=NetworkParameters.ProtocolVersion.CURRENT.getBitcoinProtocolVersion();  this.services=BigInteger.ZERO;}  }
class C{  public static MJournalBatch copyFrom(Properties ctx,int GL_JournalBatch_ID,Timestamp dateDoc,String trxName){  MJournalBatch from=new MJournalBatch(ctx,GL_JournalBatch_ID,trxName);  if (from.getGL_JournalBatch_ID() == 0)   throw new IllegalArgumentException("From Journal Batch not found GL_JournalBatch_ID=" + GL_JournalBatch_ID);  MJournalBatch to=new MJournalBatch(ctx,0,trxName);  PO.copyValues(from,to,from.getAD_Client_ID(),from.getAD_Org_ID());  to.set_ValueNoCheck("DocumentNo",null);  to.set_ValueNoCheck("C_Period_ID",null);  to.setDateAcct(dateDoc);  to.setDateDoc(dateDoc);  to.setDocStatus(DOCSTATUS_Drafted);  to.setDocAction(DOCACTION_Complete);  to.setIsApproved(false);  to.setProcessed(false);  if (!to.save())   throw new IllegalStateException("Could not create Journal Batch");  if (to.copyDetailsFrom(from) == 0)   throw new IllegalStateException("Could not create Journal Batch Details");  return to;}  }
class C{  public static void enableAllChildrenWidgets(final Control control){  if (control instanceof Composite) {    for (    final Control c : ((Composite)control).getChildren()) {      enableAllChildrenWidgets(c);    }  }  boolean enable=true;  final Boolean previousState=(Boolean)control.getData(SWTGraphicUtil.class.toString() + "_enableState");  if (previousState != null) {    enable=previousState;  }  control.setEnabled(enable);}  }
class C{  protected int engineGetOutputSize(int inputLen){  return core.getOutputSize(inputLen);}  }
class C{  public boolean isSpkmAuthSettable(){  return spkmAuthSettable;}  }
class C{  public void actualizarPrevision(PrevisionVO prevision) throws ActionNotAllowedException {  Locale locale=getServiceClient().getLocale();  PistaAuditoriaTransferencias pistaAuditoria=AuditoriaTransferencias.crearPistaAuditoria(ArchivoActions.TRANSFERENCIAS_MODULE_EDICION_PREVISION_TRANSFERENCIA,this);  pistaAuditoria.addDetalleBasico(locale,prevision,"auditoria.detalles.TRANSFERENCIAS_TIPO_EDICION.EDICION_CABECERA");  checkPermission(TransferenciasSecurityManager.GESTION_PREVISION_EN_ORGANO_REMITENTE);  PrevisionVO currentInfoPrevision=getPrevision(prevision.getId());  verificarPermisosGeneralesTransferencia(currentInfoPrevision);  PrevisionAuthorizationHelper authorizationHelper=getPrevisionAuthorizationHelper();  boolean auditarFondoPrevision=false;  if (authorizationHelper.puedeSerEditada(prevision)) {    if (!authorizationHelper.permitidaModificacionFondo(prevision)) {      if (StringUtils.equals(currentInfoPrevision.getIdfondodestino(),prevision.getIdfondodestino())) {        auditarFondoPrevision=true;      }      prevision.setIdfondodestino(currentInfoPrevision.getIdfondodestino());    }    prevision.setEstado(EstadoPrevision.ABIERTA.getIdentificador());    prevision.setFechaestado(DateUtils.getFechaActual());    _previsionDbEntity.updatePrevision(prevision);    pistaAuditoria.auditaModificacionPrevision(locale,prevision,currentInfoPrevision,auditarFondoPrevision,this);  } else   throw new PrevisionOperacionNoPermitidaException(authorizationHelper.getErrorCode());}  }
class C{  private Map<String,String> mergeSystemProperties(Loggable container) throws MojoExecutionException {  Map<String,String> systemProperties=null;  if (getSystemPropertiesFile() != null) {    Properties properties=new Properties();    try {      InputStream inputStream=new FileInputStream(getSystemPropertiesFile());      try {        properties.load(new BufferedInputStream(inputStream));      }  finally {        inputStream.close();      }      systemProperties=new HashMap<String,String>(properties.size());      for (Enumeration<?> propertyNames=properties.propertyNames(); propertyNames.hasMoreElements(); ) {        String propertyName=(String)propertyNames.nextElement();        String propertyValue=properties.getProperty(propertyName);        systemProperties.put(propertyName,propertyValue);      }    } catch (    FileNotFoundException e) {      container.getLogger().warn("System property file [" + getSystemPropertiesFile() + "] cannot be read",getClass().getName());    }catch (    IOException ioe) {      throw new MojoExecutionException("System property file [" + getSystemPropertiesFile() + "] cannot be loaded",ioe);    }  }  if (getSystemProperties() != null) {    if (systemProperties != null) {      systemProperties.putAll(getSystemProperties());    } else {      systemProperties=getSystemProperties();    }  }  return systemProperties;}  }
class C{  public boolean isSupported(DurationFieldType type){  if (type == null) {    return false;  }  DurationField field=type.getField(getChronology());  if (TIME_DURATION_TYPES.contains(type) || field.getUnitMillis() < getChronology().days().getUnitMillis()) {    return field.isSupported();  }  return false;}  }
class C{  public DERSequence(ASN1Encodable obj){  super(obj);}  }
class C{  @Override public boolean containsKey(Object key){  if (key == null) {    return entryForNullKey != null;  }  int hash=key.hashCode();  hash^=(hash >>> 20) ^ (hash >>> 12);  hash^=(hash >>> 7) ^ (hash >>> 4);  HashMapEntry<K,V>[] tab=table;  for (HashMapEntry<K,V> e=tab[hash & (tab.length - 1)]; e != null; e=e.next) {    K eKey=e.key;    if (eKey == key || (e.hash == hash && key.equals(eKey))) {      return true;    }  }  return false;}  }
class C{  static Method findMostSpecificMethod(Class[] idealMatch,Method[] methods){  Class[][] candidateSigs=new Class[methods.length][];  for (int i=0; i < methods.length; i++)   candidateSigs[i]=methods[i].getParameterTypes();  int match=findMostSpecificSignature(idealMatch,candidateSigs);  return match == -1 ? null : methods[match];}  }
class C{  public CMac(BlockCipher cipher){  this(cipher,cipher.getBlockSize() * 8);}  }
class C{  public static boolean isBinarylizable(Class cls){  for (Class c=cls; c != null && !c.equals(Object.class); c=c.getSuperclass()) {    if (Binarylizable.class.isAssignableFrom(c))     return true;  }  return false;}  }
class C{  public void init(Certificate cert){  try {    if (signature != null) {      signature.initVerify(cert);    } else     if (cipher != null) {      cipher.init(Cipher.DECRYPT_MODE,cert);    }  } catch (  InvalidKeyException e) {    throw new AlertException(AlertProtocol.BAD_CERTIFICATE,new SSLException("init - invalid certificate",e));  }}  }
class C{  public void otherAnimationChanged(Element e,String type){  BridgeUpdateHandler h=getBridgeUpdateHandler(e);  if (h != null) {    try {      h.handleOtherAnimationChanged(type);    } catch (    Exception ex) {      userAgent.displayError(ex);    }  }}  }
class C{  public static <K,V>boolean putMapNotNullKeyAndValue(Map<K,V> map,K key,V value){  if (map == null || key == null || value == null) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public static DAOIndicatorSeries newInstance(){  final DAOIndicatorSeries returnInstance=new DAOIndicatorSeries();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public void write(byte[] buf,int offset,int length) throws IOException {}  }
class C{  public boolean forEachDescending(TFloatProcedure procedure){  for (int i=_pos; i-- > 0; ) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  public DebuggerProvider(final DebugTargetSettings target){  debugTargetSettings=Preconditions.checkNotNull(target,"IE01669: target argument can not be null");}  }
class C{  @Override public boolean deletesAreDetected(int type){  debugCodeCall("deletesAreDetected",type);  return false;}  }
class C{  public BoostQueryNode(QueryNode query,float value){  if (query == null) {    throw new QueryNodeError(new MessageImpl(QueryParserMessages.NODE_ACTION_NOT_SUPPORTED,"query","null"));  }  this.value=value;  setLeaf(false);  allocate();  add(query);}  }
class C{  @HLEFunction(nid=0xB3EDD0EC,version=150) public int sceNetApctlTerm(){  changeState(PSP_NET_APCTL_STATE_DISCONNECTED);  sceNetApctlThreadTerminate=true;  triggerNetApctlThread();  return 0;}  }
class C{  MethodIR(@NonNull String getterName){  annotations=new HashMap<>();  this.getterName=getterName;}  }
class C{  public Dns dns(){  return dns;}  }
class C{  private MobileSessionCtx(HttpServletRequest request){  log.info(request.getContextPath() + " (" + request.getRemoteAddr()+ " - "+ request.getLocale()+ ") #"+ counter);  ctx=new Properties();  setLanguage(request);  HttpSession session=request.getSession(false);  ServletContext sc=session.getServletContext();  Enumeration en=sc.getInitParameterNames();  while (en.hasMoreElements()) {    String key=(String)en.nextElement();    String value=sc.getInitParameter(key);    ctx.setProperty(key,value);    log.config(key + "=" + value);  }  setWStore(request.getContextPath());  ctx=getDefaults();  ctx.put(CTX_SERVER_CONTEXT,request.getServerName() + request.getContextPath());  session.setAttribute("ctx",ctx);  log.fine("#" + ctx.size());}  }
class C{  public void unsetEncodeTables(){  this.qTables=null;  this.DCHuffmanTables=null;  this.ACHuffmanTables=null;}  }
class C{  public static Operable with(Context context){  return new Operable(context);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Element element;  Attr attribute;  Attr attribute1;  Node newNode;  String attrName;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test","root");  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/L1","L1:att");  attributes=element.getAttributes();  newNode=attributes.setNamedItemNS(attribute1);  attribute=(Attr)attributes.getNamedItemNS("http://www.w3.org/DOM/L1","att");  attrName=attribute.getNodeName();  assertEquals("namednodemapsetnameditemns02","L1:att",attrName);}  }
class C{  protected void registerFeature(String name,Object value){  features.put(name.toLowerCase(),value);}  }
class C{  private void writeDataToDestination(State state,byte[] data,int bytesRead) throws StopRequest {  for (; ; ) {    try {      if (state.mStream == null) {        state.mStream=new FileOutputStream(state.mFilename,true);      }      state.mStream.write(data,0,bytesRead);      closeDestination(state);      return;    } catch (    IOException ex) {      if (!Helpers.isExternalMediaMounted()) {        throw new StopRequest(DownloaderService.STATUS_DEVICE_NOT_FOUND_ERROR,"external media not mounted while writing destination file");      }      long availableBytes=Helpers.getAvailableBytes(Helpers.getFilesystemRoot(state.mFilename));      if (availableBytes < bytesRead) {        throw new StopRequest(DownloaderService.STATUS_INSUFFICIENT_SPACE_ERROR,"insufficient space while writing destination file",ex);      }      throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"while writing destination file: " + ex.toString(),ex);    }  }}  }
class C{  public static Prototype intern(String descriptor){  if (descriptor == null) {    throw new NullPointerException("descriptor == null");  }  Prototype result;synchronized (internTable) {    result=internTable.get(descriptor);  }  if (result != null) {    return result;  }  Type[] params=makeParameterArray(descriptor);  int paramCount=0;  int at=1;  for (; ; ) {    int startAt=at;    char c=descriptor.charAt(at);    if (c == ')') {      at++;      break;    }    while (c == '[') {      at++;      c=descriptor.charAt(at);    }    if (c == 'L') {      int endAt=descriptor.indexOf(';',at);      if (endAt == -1) {        throw new IllegalArgumentException("bad descriptor");      }      at=endAt + 1;    } else {      at++;    }    params[paramCount]=Type.intern(descriptor.substring(startAt,at));    paramCount++;  }  Type returnType=Type.internReturnType(descriptor.substring(at));  StdTypeList parameterTypes=new StdTypeList(paramCount);  for (int i=0; i < paramCount; i++) {    parameterTypes.set(i,params[i]);  }  result=new Prototype(descriptor,returnType,parameterTypes);  return putIntern(result);}  }
class C{  protected String doIt() throws Exception {  log.info("DateOrdered=" + p_DateOrdered_From + " - "+ p_DateOrdered_To+ " - C_BPartner_ID="+ p_C_BPartner_ID+ " - Vendor_ID="+ p_Vendor_ID+ " - IsDropShip="+ p_IsDropShip+ " - C_Order_ID="+ p_C_Order_ID);  if (p_C_Order_ID == 0 && p_DateOrdered_From == null && p_DateOrdered_To == null && p_C_BPartner_ID == 0 && p_Vendor_ID == 0)   throw new AdempiereUserError("You need to restrict selection");  String sql="SELECT * FROM C_Order o " + "WHERE o.IsSOTrx='Y'" + " AND NOT EXISTS (SELECT * FROM C_OrderLine ol WHERE o.C_Order_ID=ol.C_Order_ID AND ol.Link_OrderLine_ID IS NOT NULL)";  if (p_C_Order_ID != 0)   sql+=" AND o.C_Order_ID=?"; else {    if (p_C_BPartner_ID != 0)     sql+=" AND o.C_BPartner_ID=?";    if (p_Vendor_ID != 0)     sql+=" AND EXISTS (SELECT * FROM C_OrderLine ol" + " INNER JOIN M_Product_PO po ON (ol.M_Product_ID=po.M_Product_ID) " + "WHERE o.C_Order_ID=ol.C_Order_ID AND po.C_BPartner_ID=?)";    if (p_DateOrdered_From != null && p_DateOrdered_To != null)     sql+="AND TRUNC(o.DateOrdered, 'DD') BETWEEN ? AND ?"; else     if (p_DateOrdered_From != null && p_DateOrdered_To == null)     sql+="AND TRUNC(o.DateOrdered, 'DD') >= ?"; else     if (p_DateOrdered_From == null && p_DateOrdered_To != null)     sql+="AND TRUNC(o.DateOrdered, 'DD') <= ?";  }  PreparedStatement pstmt=null;  ResultSet rs=null;  int counter=0;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    if (p_C_Order_ID != 0)     pstmt.setInt(1,p_C_Order_ID); else {      int index=1;      if (p_C_BPartner_ID != 0)       pstmt.setInt(index++,p_C_BPartner_ID);      if (p_Vendor_ID != 0)       pstmt.setInt(index++,p_Vendor_ID);      if (p_DateOrdered_From != null && p_DateOrdered_To != null) {        pstmt.setTimestamp(index++,p_DateOrdered_From);        pstmt.setTimestamp(index++,p_DateOrdered_To);      } else       if (p_DateOrdered_From != null && p_DateOrdered_To == null)       pstmt.setTimestamp(index++,p_DateOrdered_From); else       if (p_DateOrdered_From == null && p_DateOrdered_To != null)       pstmt.setTimestamp(index++,p_DateOrdered_To);    }    rs=pstmt.executeQuery();    while (rs.next()) {      counter+=createPOFromSO(new MOrder(getCtx(),rs,get_TrxName()));    }  }  finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (counter == 0)   log.fine(sql);  return "@Created@ " + counter;}  }
class C{  public void queue(Track track){  trackQueue.add(track);  client.getDispatcher().dispatch(new TrackQueueEvent(this,track));}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  private void calculateAllCells(Context context){  DisplayMetrics displaymetrics=new DisplayMetrics();  ((Activity)context).getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);  int width=displaymetrics.widthPixels;  d=width / NO_CESLLS;  for (int y=0; y < d * 2; y+=d) {    coorX=0;    for (int x=0; x <= width - d; x+=d) {      Cell cell=new Cell();      cell.x1=x;      cell.y1=y;      cell.x2=x + d;      cell.y2=y + d;      cell.id=counter;      cell.coorX=coorX;      cell.coorY=coorY;      cells.add(cell);      counter++;      coorX++;    }    coorY++;  }}  }
class C{  public HeaderIterator iterator(){  return new BasicListHeaderIterator(this.headers,null);}  }
class C{  void parse() throws IOException {  while (true) {    final String line=mIn.readLine();    if (line == null) {      break;    }    final String msg=line(line);    if (msg != null) {      error("Error reading reference file on line:" + line + LS+ msg);    }  }  end();}  }
class C{  public void keyReleased(KeyEvent e){synchronized (keyLock) {    keysDown.remove(e.getKeyCode());  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public Path removeFirstSegments(int count){  if (count == 0)   return this;  if (count >= segments.length) {    return new Path(device,NO_SEGMENTS,0);  }  checkArgument(count > 0);  int newSize=segments.length - count;  String[] newSegments=new String[newSize];  System.arraycopy(this.segments,count,newSegments,0,newSize);  return new Path(device,newSegments,separators & HAS_TRAILING);}  }
class C{  private static boolean matchTrunkPrefix(String a,int len){  boolean found;  found=false;  for (int i=0; i < len; i++) {    char c=a.charAt(i);    if (c == '0' && !found) {      found=true;    } else     if (isNonSeparator(c)) {      return false;    }  }  return found;}  }
class C{  private boolean createRemoteFilesSupportDBObjects(SQLiteDatabase db){  boolean success=false;  try {    createRemotefiles(db);    createRemotefiles2Articles(db);    createRemotefilesView(db);    success=true;  } catch (  SQLException e) {    Log.e(TAG,"Creation of remote file support DB objects failed.\n" + e);  }  return success;}  }
class C{  public void write(byte[] b) throws IOException {  write(b,0,b.length);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGraphPackage.COMPOSITE_ELEMENT__REGIONS:    return regions != null && !regions.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public boolean isModified(){  return false;}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  CipherParameters keyParam=params;  if (params instanceof ParametersWithIV) {    iv=((ParametersWithIV)params).getIV();    keyParam=((ParametersWithIV)params).getParameters();  } else {    iv=new byte[0];  }  if (keyParam instanceof KeyParameter) {    key=((KeyParameter)keyParam).getKey();    init();  } else {    throw new IllegalArgumentException("Invalid parameter passed to HC256 init - " + params.getClass().getName());  }  initialised=true;}  }
class C{  private boolean isSourceMethod(SootMethod method){  if (!method.isConcrete() || !method.hasActiveBody())   return false;  SootClass cls=method.getDeclaringClass();  if (!Project.v().isSrcClass(cls))   return false;  String methodName=method.getName();  if (methodName.equals("DS__FAKE__CALLBACKS__") || methodName.startsWith("OBJECTGETCLASS_TO_CLASSCONSTANT_LOCAL"))   return false;  return true;}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  private void addCurrentToFavorites(){  main.getStatusHistory().addFavorite(status.getText().trim(),game.getText());}  }
class C{  private void checkEqualsIsConsistent(Message message){  assertEquals(message,message);  DynamicMessage dynamic=DynamicMessage.newBuilder(message).build();  checkEqualsIsConsistent(message,dynamic);}  }
class C{  public File workspaceDir(Project project,File ideDir){  return workspaceDir(project.getRootProject().getName(),ideDir);}  }
class C{  private AFTPClient actionExistsFile() throws PageException, IOException {  required("remotefile",remotefile);  AFTPClient client=getClient();  FTPFile file=existsFile(client,remotefile,true);  Struct cfftp=writeCfftp(client);  cfftp.setEL(RETURN_VALUE,Caster.toBoolean(file != null && file.isFile()));  cfftp.setEL(SUCCEEDED,Boolean.TRUE);  stoponerror=false;  return client;}  }
class C{  public boolean isContainsKey(){  return this.opType == OP_TYPE_CONTAINS_KEY;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DialPointer.Pin)) {    return false;  }  DialPointer.Pin that=(DialPointer.Pin)obj;  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  if (!this.stroke.equals(that.stroke)) {    return false;  }  return super.equals(obj);}  }
class C{  public boolean updateDistance(int checkingDistance,AStarNode parentOtherNode){  if (checkingDistance < g) {    g=checkingDistance;    parent=parentOtherNode;    updateTargetCostEstimate();    return true;  }  return false;}  }
class C{  public void tag(View view){  ListView list=(ListView)findViewById(R.id.avatarsList);  int index=list.getCheckedItemPosition();  if (index < 0) {    MainActivity.showMessage("Select an image to tag",this);    return;  }  this.avatar=MainActivity.avatars.get(index);  this.avatar.instance=MainActivity.instance.id;  CheckBox checkbox=(CheckBox)findViewById(R.id.defaultCheckBox);  this.avatar.isDefault=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.noneCheckBox);  this.avatar.none=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.ecstaticCheckBox);  this.avatar.ecstatic=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.happyCheckBox);  this.avatar.happy=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.sadCheckBox);  this.avatar.sad=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.cryingCheckBox);  this.avatar.crying=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.loveCheckBox);  this.avatar.love=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.likeCheckBox);  this.avatar.like=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.dislikeCheckBox);  this.avatar.dislike=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.hateCheckBox);  this.avatar.hate=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.sereneCheckBox);  this.avatar.serene=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.calmCheckBox);  this.avatar.calm=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.angerCheckBox);  this.avatar.anger=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.rageCheckBox);  this.avatar.rage=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.courageousCheckBox);  this.avatar.courageous=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.confidentCheckBox);  this.avatar.confident=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.afraidCheckBox);  this.avatar.afraid=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.panicCheckBox);  this.avatar.panic=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.surpriseCheckBox);  this.avatar.surprise=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.boredCheckBox);  this.avatar.bored=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.laughterCheckBox);  this.avatar.laughter=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.seriousCheckBox);  this.avatar.serious=checkbox.isChecked();  HttpTagAvatarAction action=new HttpTagAvatarAction(this,this.avatar);  action.execute();}  }
class C{  private boolean checkDisposed(){  return composite.isDisposed();}  }
class C{  public void paintTreeCellBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static SignupFragment newInstance(){  SignupFragment fragment=new SignupFragment();  return fragment;}  }
class C{  private static void scaleCoeff(RatTermVec vec,RatNum scalar){  for (int i=0, size=vec.size(); i < size; i++) {    vec.set(new RatTerm(vec.get(i).coeff.mul(scalar),vec.get(i).expt),i);  }}  }
class C{  public void remove(){  previous.next=next;  next.previous=previous;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  if (mf != null && mf.isPicture() && sage.media.format.MediaFormat.JPEG.equals(mf.getContainerFormat())) {    return mf.getContentAiring().getOrientation() > 1 ? Boolean.TRUE : Boolean.FALSE;  }  return Boolean.FALSE;}  }
class C{  public boolean checkForSRDF(){  if (getSrdfTargets() != null && !getSrdfTargets().isEmpty()) {    return true;  }  return getSrdfParent() != null;}  }
class C{  public LinearProgramming(double[][] A,double[] b,double[] c){  m=b.length;  n=c.length;  for (int i=0; i < m; i++)   if (!(b[i] >= 0))   throw new IllegalArgumentException("RHS must be nonnegative");  a=new double[m + 1][n + m + 1];  for (int i=0; i < m; i++)   for (int j=0; j < n; j++)   a[i][j]=A[i][j];  for (int i=0; i < m; i++)   a[i][n + i]=1.0;  for (int j=0; j < n; j++)   a[m][j]=c[j];  for (int i=0; i < m; i++)   a[i][m + n]=b[i];  basis=new int[m];  for (int i=0; i < m; i++)   basis[i]=n + i;  solve();  assert check(A,b,c);}  }
class C{  private void sendAction(Bundle data){  IMqttToken token=getMqttToken(data);  simpleAction(token,data);}  }
class C{  private static ResultPoint[] findVertices(BitMatrix matrix,boolean tryHarder){  int height=matrix.getHeight();  int width=matrix.getWidth();  ResultPoint[] result=new ResultPoint[8];  boolean found=false;  int[] counters=new int[START_PATTERN.length];  int rowStep=Math.max(1,height >> (tryHarder ? 9 : 7));  for (int i=0; i < height; i+=rowStep) {    int[] loc=findGuardPattern(matrix,0,i,width,false,START_PATTERN,counters);    if (loc != null) {      result[0]=new ResultPoint(loc[0],i);      result[4]=new ResultPoint(loc[1],i);      found=true;      break;    }  }  if (found) {    found=false;    for (int i=height - 1; i > 0; i-=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,width,false,START_PATTERN,counters);      if (loc != null) {        result[1]=new ResultPoint(loc[0],i);        result[5]=new ResultPoint(loc[1],i);        found=true;        break;      }    }  }  counters=new int[STOP_PATTERN.length];  if (found) {    found=false;    for (int i=0; i < height; i+=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,width,false,STOP_PATTERN,counters);      if (loc != null) {        result[2]=new ResultPoint(loc[1],i);        result[6]=new ResultPoint(loc[0],i);        found=true;        break;      }    }  }  if (found) {    found=false;    for (int i=height - 1; i > 0; i-=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,width,false,STOP_PATTERN,counters);      if (loc != null) {        result[3]=new ResultPoint(loc[1],i);        result[7]=new ResultPoint(loc[0],i);        found=true;        break;      }    }  }  return found ? result : null;}  }
class C{  private Phone(){}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RapidBarPainter)) {    return false;  }  RapidBarPainter that=(RapidBarPainter)obj;  if (this.g1 != that.g1) {    return false;  }  if (this.g2 != that.g2) {    return false;  }  if (this.g3 != that.g3) {    return false;  }  return true;}  }
class C{  public void addPanListener(PanListener listener){  if (mPan != null) {    mPan.addPanListener(listener);  }}  }
class C{  public static void log(@Nullable IgniteLogger log,Object msg){  assert msg != null;  String s=msg.toString();  log(log,s,s);}  }
class C{  public static boolean hasCameraFlash(Context context){  return !IS_N7 && !IS_MIPAD && context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH);}  }
class C{  public boolean hasChanges(){  Collection<BoundedObject> queryResult=new ArrayList<BoundedObject>();  tasks.query(queryResult);  for (  BoundedObject b : queryResult) {    if (((Task)b).hasBeenChanged()) {      return true;    }  }  return false;}  }
class C{  public int compareTo(Object o){  Name arg=(Name)o;  if (this == arg)   return (0);  int labels=labels();  int alabels=arg.labels();  int compares=labels > alabels ? alabels : labels;  for (int i=1; i <= compares; i++) {    int start=offset(labels - i);    int astart=arg.offset(alabels - i);    int length=name[start];    int alength=arg.name[astart];    for (int j=0; j < length && j < alength; j++) {      int n=lowercase[(name[j + start + 1]) & 0xFF] - lowercase[(arg.name[j + astart + 1]) & 0xFF];      if (n != 0)       return (n);    }    if (length != alength)     return (length - alength);  }  return (labels - alabels);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();case VALUES:return isSetValues();case RESPONSE_TO:return isSetResponseTo();}throw new IllegalStateException();}  }
class C{  protected int findDensestCell(){  int index=-1;  int value=-1;  for (int i=0; i < size(); i++) {    int tempIndex=findIndex(get(i));    int tempValue=density[tempIndex];    if (tempValue > value) {      value=tempValue;      index=tempIndex;    }  }  return index;}  }
class C{  public byte[] data(){  return data;}  }
class C{  public OkLogInterceptor build(){  return new OkLogInterceptor(this.logUrlBase,this.logInterceptor,this.useAndroidLog);}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return CacheConfigResponse.create(dm,this.getSender(),this.cacheId,this.attributeCode,this.newValue);}  }
class C{  public static RelationalOpExpression le(Expression left,Expression right){  return new RelationalOpExpression(left,"<=",right);}  }
class C{  @Path("propget") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponse propget(final PropertyGetRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.propget(request);}  }
class C{  private boolean actionText(int only_Warehouse_ID,int only_Product_ID){  String text=getComponent().getText();  log.fine(text);  if (text == null || text.length() == 0) {    if (isMandatory())     return false; else {      setValue(null,true);      return true;    }  }  if (text.endsWith("%"))   text=text.toUpperCase(); else   text=text.toUpperCase() + "%";  StringBuffer sql=new StringBuffer("SELECT M_Locator_ID FROM M_Locator ").append(" WHERE IsActive='Y' AND UPPER(Value) LIKE ").append(DB.TO_STRING(text));  if (getOnly_Warehouse_ID() != 0)   sql.append(" AND M_Warehouse_ID=?");  if (getOnly_Product_ID() != 0)   sql.append(" AND (IsDefault='Y' ").append("OR EXISTS (SELECT * FROM M_Product p ").append("WHERE p.M_Locator_ID=M_Locator.M_Locator_ID AND p.M_Product_ID=?)").append("OR EXISTS (SELECT * FROM M_Storage s ").append("WHERE s.M_Locator_ID=M_Locator.M_Locator_ID AND s.M_Product_ID=?))");  String finalSql=MRole.getDefault(Env.getCtx(),false).addAccessSQL(sql.toString(),"M_Locator",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  int M_Locator_ID=0;  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(finalSql,null);    int index=1;    if (only_Warehouse_ID != 0)     pstmt.setInt(index++,only_Warehouse_ID);    if (only_Product_ID != 0) {      pstmt.setInt(index++,only_Product_ID);      pstmt.setInt(index++,only_Product_ID);    }    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      M_Locator_ID=rs.getInt(1);      if (rs.next())       M_Locator_ID=0;    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  SQLException ex) {    log.log(Level.SEVERE,finalSql,ex);  }  try {    if (pstmt != null)     pstmt.close();  } catch (  SQLException ex1) {  }  pstmt=null;  if (M_Locator_ID == 0)   return false;  setValue(new Integer(M_Locator_ID),true);  return true;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (baseFeatureID) {case TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT:      return TypesPackage.TSTRUCTURAL_TYPE__AST_ELEMENT;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  protected void writeColumnDefaultValueStmt(Table table,Column column,StringBuilder ddl){  Object parsedDefault=column.getParsedDefaultValue();  if (parsedDefault != null) {    if (!databaseInfo.isDefaultValuesForLongTypesSupported() && ((column.getMappedTypeCode() == Types.LONGVARBINARY) || (column.getMappedTypeCode() == Types.LONGVARCHAR))) {      throw new ModelException("The platform does not support default values for LONGVARCHAR or LONGVARBINARY columns");    }    if (isValidDefaultValue(column.getDefaultValue(),column.getMappedTypeCode())) {      ddl.append(" DEFAULT ");      writeColumnDefaultValue(table,column,ddl);    }  } else   if (databaseInfo.isDefaultValueUsedForIdentitySpec() && column.isAutoIncrement()) {    ddl.append(" DEFAULT ");    writeColumnDefaultValue(table,column,ddl);  } else   if (!StringUtils.isBlank(column.getDefaultValue())) {    ddl.append(" DEFAULT ");    writeColumnDefaultValue(table,column,ddl);  }}  }
class C{  @Check(CheckType.FAST) public void checkReactionEffectActions(ReactionEffect effect){  for (  Expression exp : effect.getActions()) {    if (!(exp instanceof AssignmentExpression) && !(exp instanceof EventRaisingExpression)) {      if (exp instanceof FeatureCall) {        checkFeatureCallEffect((FeatureCall)exp);      } else       if (exp instanceof ElementReferenceExpression) {        checkElementReferenceEffect((ElementReferenceExpression)exp);      } else {        error("Action has no effect.",StextPackage.Literals.REACTION_EFFECT__ACTIONS,effect.getActions().indexOf(exp),FEATURE_CALL_HAS_NO_EFFECT);      }    }  }}  }
class C{  private void addSubCollectionField(NutchDocument doc,String url){  for (  Subcollection coll : CollectionManager.getCollectionManager(getConf()).getSubCollections(url)) {    if (coll.getKey() == null) {      doc.add(fieldName,coll.getName());    } else {      doc.add(coll.getKey(),coll.getName());    }  }}  }
class C{  private void publish(){  String topic=((EditText)connectionDetails.findViewById(R.id.lastWillTopic)).getText().toString();  ((EditText)connectionDetails.findViewById(R.id.lastWillTopic)).getText().clear();  String message=((EditText)connectionDetails.findViewById(R.id.lastWill)).getText().toString();  ((EditText)connectionDetails.findViewById(R.id.lastWill)).getText().clear();  RadioGroup radio=(RadioGroup)connectionDetails.findViewById(R.id.qosRadio);  int checked=radio.getCheckedRadioButtonId();  int qos=ActivityConstants.defaultQos;switch (checked) {case R.id.qos0:    qos=0;  break;case R.id.qos1:qos=1;break;case R.id.qos2:qos=2;break;}boolean retained=((CheckBox)connectionDetails.findViewById(R.id.retained)).isChecked();String[] args=new String[2];args[0]=message;args[1]=topic + ";qos:" + qos+ ";retained:"+ retained;try {Connections.getInstance(context).getConnection(clientHandle).getClient().publish(topic,message.getBytes(),qos,retained,null,new ActionListener(context,Action.PUBLISH,clientHandle,args));} catch (MqttSecurityException e) {Log.e(this.getClass().getCanonicalName(),"Failed to publish a messged from the client with the handle " + clientHandle,e);}catch (MqttException e) {Log.e(this.getClass().getCanonicalName(),"Failed to publish a messged from the client with the handle " + clientHandle,e);}}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  int sourceNode=transformer.getXPathContext().getCurrentNode();  XObject var=getValue(transformer,sourceNode);  transformer.getXPathContext().getVarStack().setLocalVariable(m_index,var);}  }
class C{  public FieldArray(int initialCapacity){  initialCapacity=idealIntArraySize(initialCapacity);  mFieldNumbers=new int[initialCapacity];  mData=new FieldData[initialCapacity];  mSize=0;}  }
class C{  public DataRaster composeRaster(AVList reqParams) throws IllegalArgumentException, WWRuntimeException {  DataRaster reqRaster;  if (null == reqParams) {    String message=Logging.getMessage("nullValue.ParamsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!reqParams.hasKey(AVKey.WIDTH)) {    String message=Logging.getMessage("generic.MissingRequiredParameter",AVKey.WIDTH);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!reqParams.hasKey(AVKey.HEIGHT)) {    String message=Logging.getMessage("generic.MissingRequiredParameter",AVKey.HEIGHT);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=reqParams.getValue(AVKey.SECTOR);  if (null == o || !(o instanceof Sector)) {    String message=Logging.getMessage("generic.MissingRequiredParameter",AVKey.SECTOR);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Sector reqSector=(Sector)o;  Sector rasterExtent=this.getSector();  if (!reqSector.intersects(rasterExtent)) {    String message=Logging.getMessage("generic.SectorRequestedOutsideCoverageArea",reqSector,rasterExtent);    Logging.logger().finest(message);    throw new WWRuntimeException(message);  }  try {    int reqWidth=(Integer)reqParams.getValue(AVKey.WIDTH);    int reqHeight=(Integer)reqParams.getValue(AVKey.HEIGHT);    if (!reqParams.hasKey(AVKey.BYTE_ORDER)) {      reqParams.setValue(AVKey.BYTE_ORDER,AVKey.BIG_ENDIAN);    }    if (AVKey.ELEVATION.equals(this.getStringValue(AVKey.PIXEL_FORMAT))) {      reqParams.setValue(AVKey.PIXEL_FORMAT,AVKey.ELEVATION);      if (!reqParams.hasKey(AVKey.DATA_TYPE)) {        reqParams.setValue(AVKey.DATA_TYPE,AVKey.INT16);      }      reqRaster=new ByteBufferRaster(reqWidth,reqHeight,reqSector,reqParams);    } else     if (AVKey.IMAGE.equals(this.getStringValue(AVKey.PIXEL_FORMAT))) {      reqParams.setValue(AVKey.PIXEL_FORMAT,AVKey.IMAGE);      reqRaster=new BufferedImageRaster(reqWidth,reqHeight,Transparency.TRANSLUCENT,reqSector);    } else {      String msg=Logging.getMessage("generic.UnrecognizedSourceType",this.getValue(AVKey.PIXEL_FORMAT));      Logging.logger().severe(msg);      throw new WWRuntimeException(msg);    }    int numIntersectedRasters=0;    for (    DataRaster raster : this.dataRasterList) {      Sector rasterSector=raster.getSector();      Sector overlap=reqSector.intersection(rasterSector);      if (null == overlap || overlap.getDeltaLatDegrees() == 0d || overlap.getDeltaLonDegrees() == 0d) {        continue;      }      raster.drawOnTo(reqRaster);      numIntersectedRasters++;    }    if (numIntersectedRasters == 0) {      String message=Logging.getMessage("generic.SectorRequestedOutsideCoverageArea",reqSector,"");      Logging.logger().finest(message);      throw new WWRuntimeException(message);    }  } catch (  WWRuntimeException wwe) {    throw wwe;  }catch (  Throwable t) {    String message=t.getMessage();    message=(WWUtil.isEmpty(message)) ? t.getCause().getMessage() : message;    Logging.logger().log(java.util.logging.Level.FINE,message,t);    throw new WWRuntimeException(message);  }  return reqRaster;}  }
class C{  public GuacamoleResourceConflictException(String message){  super(message);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(EscapeProcessingTest.class);}  }
class C{  public static YearMonthDay fromDateFields(Date date){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  return new YearMonthDay(date.getYear() + 1900,date.getMonth() + 1,date.getDate());}  }
class C{  public void exit(){  checkSocket();  this.socket.sendTextMessage("exit");}  }
class C{  public boolean isStatic(){  return field.isStatic();}  }
class C{  ExtensionManifest(Class<? extends ExtensionPoint> extendedType){  this.extendedType=extendedType;}  }
class C{  protected void fireColumnMoved(TableColumnModelEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TableColumnModelListener.class) {      ((TableColumnModelListener)listeners[i + 1]).columnMoved(e);    }  }}  }
class C{  public OrgSymbol(String value){  this();  setValue(value);}  }
class C{  private SemGraph scoreBasedPurifyIterate(List partition){  boolean changed;  int iter=0;  do {    changed=false;    printlnMessage("####Iterated score-based purification: round" + (++iter));    scoreBasedPurify(partition);    if (numObserved == 0) {      return null;    }    int numImpurities[]=new int[numObserved];    for (int i=0; i < numObserved; i++) {      numImpurities[i]=0;    }    for (int i=0; i < numObserved; i++) {      for (int j=i + 1; j < numObserved; j++) {        if (correlatedErrors[i][j] || observedParent[i][j] || observedParent[j][i]) {          numImpurities[i]++;          numImpurities[j]++;          changed=true;        }      }    }    if (changed) {      int max=numImpurities[0];      List choices=new ArrayList();      choices.add(0);      for (int i=1; i < numObserved; i++) {        if (numImpurities[i] > max) {          choices.clear();          choices.add(i);          max=numImpurities[i];        } else         if (numImpurities[i] == max) {          choices.add(i);        }      }      int choice=(Integer)choices.get(0);      int chosenCluster[]=(int[])partition.get(clusterId[choice]);      for (Iterator it=choices.iterator(); it.hasNext(); ) {        int nextChoice=(Integer)it.next();        int nextCluster[]=(int[])partition.get(clusterId[nextChoice]);        if ((nextCluster.length > chosenCluster.length && chosenCluster.length >= 3) || (nextCluster.length < chosenCluster.length && nextCluster.length < 3)) {          choice=nextChoice;          chosenCluster=nextCluster;        }      }      printlnMessage("!! Removing " + measuredNodes.get(choice).toString());      List newPartition=new ArrayList();      int count=0;      for (Iterator it=partition.iterator(); it.hasNext(); ) {        int next[]=(int[])it.next();        if (choice >= count + next.length) {          newPartition.add(next);        } else {          int newCluster[]=new int[next.length - 1];          for (int i=0; i < next.length; i++) {            if (i < choice - count) {              newCluster[i]=next[i];            } else             if (i > choice - count) {              newCluster[i - 1]=next[i];            }          }          newPartition.add(newCluster);          choice=numObserved;        }        count+=next.length;      }      partition=newPartition;    }  } while (changed);  Graph bestGraph=new EdgeListGraph();  List latentNodes=new ArrayList();  for (int p=0; p < partition.size(); p++) {    int next[]=(int[])partition.get(p);    Node newLatent=new GraphNode("_L" + p);    newLatent.setNodeType(NodeType.LATENT);    bestGraph.addNode(newLatent);    Iterator it=latentNodes.iterator();    while (it.hasNext()) {      Node previousLatent=(Node)it.next();      bestGraph.addDirectedEdge(previousLatent,newLatent);    }    latentNodes.add(newLatent);    for (int i=0; i < next.length; i++) {      Node newNode=new GraphNode(tetradTest.getVarNames()[next[i]]);      bestGraph.addNode(newNode);      bestGraph.addDirectedEdge(newLatent,newNode);    }  }  return new SemGraph(bestGraph);}  }
class C{  public void warn(String msg,Object args[]) throws org.xml.sax.SAXException {  String formattedMsg=XSLMessages.createWarning(msg,args);  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  try {    if (null != handler)     handler.warning(new TransformerException(formattedMsg,locator));  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  private int removeConflictingEndpoints(String remoteWwpn,String fabricWwn,URI deviceId) throws IOException {  int removedCount=0;  URIQueryResultList uriList=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFCEndpointRemotePortNameConstraint(remoteWwpn),uriList);  for (  URI uri : uriList) {    FCEndpoint ep=dbClient.queryObject(FCEndpoint.class,uri);    if (ep == null) {      continue;    }    if (ep.getNetworkDevice().equals(deviceId)) {      continue;    }    if (ep.getRemotePortName().equals(remoteWwpn) == false) {      continue;    }    if (ep.getFabricWwn().equals(fabricWwn)) {      continue;    }    dbClient.removeObject(ep);    removedCount++;  }  return removedCount;}  }
class C{  public static File find(File baseFile,String regex){  if (baseFile.getAbsolutePath().matches(regex)) {    return baseFile;  }  if (baseFile.exists() && baseFile.isDirectory()) {    for (    File child : listFiles(baseFile)) {      File foundFile=find(child,regex);      if (foundFile != null) {        return foundFile;      }    }  }  return null;}  }
class C{  public ProtocolDecoderException(String message){  super(message);}  }
class C{  public boolean hasCopyPolicy(){  return m_hasCopyPolicy;}  }
class C{  public MultipartReader(InputStream input,byte[] boundary,int bufSize){  this.input=input;  this.bufSize=bufSize;  this.buffer=new byte[bufSize];  this.boundary=new byte[boundary.length + BOUNDARY_PREFIX.length];  this.boundaryLength=boundary.length + BOUNDARY_PREFIX.length;  this.keepRegion=this.boundary.length;  System.arraycopy(BOUNDARY_PREFIX,0,this.boundary,0,BOUNDARY_PREFIX.length);  System.arraycopy(boundary,0,this.boundary,BOUNDARY_PREFIX.length,boundary.length);  head=0;  tail=0;}  }
class C{  public ClientBuilder defaultWriteTimeout(Duration defaultWriteTimeout){  return defaultWriteTimeoutMillis(requireNonNull(defaultWriteTimeout,"defaultWriteTimeout").toMillis());}  }
class C{  @Override protected Boolean doInBackground(Void... voids){  return mSoundPool.play(soundId,volume,volume,0,0,rate) != 0;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.PRIMARY_EXPRESSION;}  }
class C{  public void testSynonyms() throws Exception {  checkSolrSynonyms(tokenFilterFactory("Synonym","synonyms","synonyms.txt"));}  }
class C{  public void copyItems(List<ResourceBasedNode<?>> items){  this.items=items;  moveItems=false;  checkedPath=null;}  }
class C{  protected void finish(CurrentSchemaVersion curr,ReviewDb db) throws OrmException {  curr.versionNbr=versionNbr;  db.schemaVersion().update(Collections.singleton(curr));}  }
class C{  public static Vector<String> parseSpacedMarkers(String markerList){  return parseMarkers(markerList," ");}  }
class C{  public OffsetPredicate copy(){  return new OffsetPredicate(bits.copy());}  }
class C{  public void ReInit(SimpleCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  public boolean isNumberPercentAutoAsEnum(){  if (numberPercentAutoAsEnum != null)   return true; else   return false;}  }
class C{  static <T>GeneralRange<T> upTo(Comparator<? super T> comparator,@Nullable T endpoint,BoundType boundType){  return new GeneralRange<T>(comparator,false,null,OPEN,true,endpoint,boundType);}  }
class C{  public boolean generate(Projection proj){  renderRotationAngle=null;  if (!position(proj)) {    if (DEBUG) {      logger.fine("OMRaster.generate(): positioning failed!");    }    return false;  }  if (getNeedToRegenerate()) {    bitmap=getBitmapFromInternalData();    if (bitmap == null) {      return false;    }  }  evaluateRotationAngle(proj);  setShape();  setLabelLocation(getShape(),proj);  setNeedToRegenerate(false);  return true;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static Executor createTaskDistributor(){  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,"uil-pool-d-"));}  }
class C{  public void whitespaceChars(int low,int hi){  if (low < 0)   low=0;  if (hi >= ctype.length)   hi=ctype.length - 1;  while (low <= hi)   ctype[low++]=CT_WHITESPACE;}  }
class C{  public void reset(){  mGestureDetector.reset();  mPreviousTransform.reset();  mActiveTransform.reset();}  }
class C{  @Override void destroyPooledConnection(Object connectionObject){  try {    ((PooledConnection)connectionObject).removeConnectionEventListener((javax.sql.ConnectionEventListener)connEventListner);    ((PooledConnection)connectionObject).close();    connectionObject=null;  } catch (  Exception ex) {    if (logger.isTraceEnabled()) {      logger.trace("AbstractPoolcache::destroyPooledConnection:Exception in closing the connection.Ignoring it. The exeption is {}",ex.getMessage(),ex);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public K header(String name,String value){  if (headers == null) {    headers=new HashMap<String,String>();  }  headers.put(name,value);  return self();}  }
class C{  public MessageContentProperties(final T message,final int maxPayloadLength){  super(message.getTopic());  this.lastReceivedTimestamp=new SimpleStringProperty();  this.lastReceivedPayload=new SimpleStringProperty();  this.lastReceivedPayloadShort=new SimpleStringProperty();  this.maxPayloadLength=maxPayloadLength;  setMessage(message);}  }
class C{  public Builder traceTaskExecutionWarnTimeUs(long timeUs){  this.traceTaskExecutionWarnTimeUs=timeUs;  return this;}  }
class C{  public static Value createSmallLob(int type,byte[] small){  int precision;  if (type == Value.CLOB) {    precision=new String(small,Constants.UTF8).length();  } else {    precision=small.length;  }  return createSmallLob(type,small,precision);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:39.929 -0500",hash_original_method="7601A49E11EC8C911923D57ABD663D23",hash_generated_method="93361CD9C318CE622A8DACDDD93D80AA") protected void establishRoute(HttpRoute route,HttpContext context) throws HttpException, IOException {  HttpRouteDirector rowdy=new BasicRouteDirector();  int step;  do {    HttpRoute fact=managedConn.getRoute();    step=rowdy.nextStep(route,fact);switch (step) {case HttpRouteDirector.CONNECT_TARGET:case HttpRouteDirector.CONNECT_PROXY:      managedConn.open(route,context,this.params);    break;case HttpRouteDirector.TUNNEL_TARGET:{    boolean secure=createTunnelToTarget(route,context);    this.log.debug("Tunnel to target created.");    managedConn.tunnelTarget(secure,this.params);  }break;case HttpRouteDirector.TUNNEL_PROXY:{final int hop=fact.getHopCount() - 1;boolean secure=createTunnelToProxy(route,hop,context);this.log.debug("Tunnel to proxy created.");managedConn.tunnelProxy(route.getHopTarget(hop),secure,this.params);}break;case HttpRouteDirector.LAYER_PROTOCOL:managedConn.layerProtocol(context,this.params);break;case HttpRouteDirector.UNREACHABLE:throw new IllegalStateException("Unable to establish route." + "\nplanned = " + route + "\ncurrent = "+ fact);case HttpRouteDirector.COMPLETE:break;default :throw new IllegalStateException("Unknown step indicator " + step + " from RouteDirector.");}} while (step > HttpRouteDirector.COMPLETE);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i, c;  double numInNeighbours;  boolean flag=false;  boolean logTransform=false;  String outputType=null;  double flowDir;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputHeader=args[0];    outputHeader=args[1];    outputType=args[2].toLowerCase();    logTransform=Boolean.parseBoolean(args[3]);    if ((inputHeader == null) || (outputHeader == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    pointer=new WhiteboxRaster(inputHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    noData=pointer.getNoDataValue();    gridRes=pointer.getCellSizeX();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,1);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    int loopNum=1;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        flowDir=pointer.getValue(row,col);        if (flowDir != noData) {          i=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            flowDir=pointer.getValue(y,x);            if (flowDir >= 0 && flowDir <= 360) {              if (c != 3) {                if (flowDir > startFD[c] && flowDir < endFD[c]) {                  i++;                }              } else {                if (flowDir > startFD[c] || flowDir < endFD[c]) {                  i++;                }              }            }          }          tmpGrid.setValue(row,col,i);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop " + loopNum + ":",(int)progress);    }    boolean somethingDone;    do {      loopNum++;      updateProgress("Loop " + loopNum + ":",0);      somethingDone=false;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (tmpGrid.getValue(row,col) == 0) {            currentDepth=0;            somethingDone=true;            DinfAccum(row,col);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } while (somethingDone);    loopNum++;    updateProgress("Loop " + loopNum + ":",0);    if (outputType.equals("specific catchment area (sca)")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=pointer.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridRes);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else     if (outputType.equals("total catchment area")) {      double gridCellArea=gridRes * gridRes;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,output.getValue(row,col) * gridCellArea);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    }    if (logTransform) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=output.getValue(row,col);          if (z != noData) {            output.setValue(row,col,Math.log(output.getValue(row,col)));          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Loop " + loopNum + ":",(int)progress);      }    } else {      output.setNonlinearity(0.2);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pointer.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addAll(Collection<? extends T> collection){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.addAll(collection);    } else {      mObjects.addAll(collection);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public SnackbarBuilder iconMarginEnd(int iconMarginEnd){  this.iconMarginEnd=iconMarginEnd;  return this;}  }
class C{  @Override protected void parse(DataInputStream stream) throws Exception {  value=stream.readDouble();}  }
class C{  public static void check(boolean cond,long value){  if (!cond)   error(String.valueOf(value));}  }
class C{  public void waitUntilDone(){  countLock.lock();  try {    equalCountCv.await();  } catch (  InterruptedException e) {    throw new RuntimeException("Shouldn't happen!");  } finally {    countLock.unlock();  }}  }
class C{  public static void UF5(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  double hj;  double N=10.0;  double E=0.1;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    hj=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;    if (j % 2 == 0) {      sum2+=hj;      count2++;    } else {      sum1+=hj;      count1++;    }  }  hj=(0.5 / N + E) * Math.abs(Math.sin(2.0 * N * PI* x[0]));  f[0]=x[0] + hj + 2.0 * sum1 / (double)count1;  f[1]=1.0 - x[0] + hj + 2.0 * sum2 / (double)count2;}  }
class C{  public static void putShortField(Object obj,long fieldOff,short val){  UNSAFE.putShort(obj,fieldOff,val);}  }
class C{  @EventHandler(priority=EventPriority.HIGHEST) public void onPlayerQuit(PlayerQuitEvent event){  PlayerContainerData oldData=PlayerContainerData.of(event.getPlayer());  PlayerContainerData newData=PlayerContainerData.empty();  Containers.handleStateChangeEvent(event.getPlayer(),oldData,newData);}  }
class C{  protected void sequence_IndexedAccessExpressionTail_MemberExpression_IndexedAccessExpression_1_3_3_0_0_ParameterizedPropertyAccessExpression_1_3_3_1_0_TaggedTemplateString_1_3_3_2_0(ISerializationContext context,IndexedAccessExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION__TARGET) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION__TARGET));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION__INDEX) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.INDEXED_ACCESS_EXPRESSION__INDEX));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTargetAction_1_3_3_0_0(),semanticObject.getTarget());  feeder.accept(grammarAccess.getIndexedAccessExpressionTailAccess().getIndexExpressionParserRuleCall_1_0(),semanticObject.getIndex());  feeder.finish();}  }
class C{  public static ImageSource uri(Uri uri){  if (uri == null) {    throw new NullPointerException("Uri must not be null");  }  return new ImageSource(uri);}  }
class C{  public List<String> addInitiatorDeclineDetails(URI initiator){  return Lists.newArrayList(ComputeSystemDialogProperties.getMessage("ComputeSystem.addInitiatorDeclineDetails"));}  }
class C{  public void decrementMemberCount(){  memberCount--;}  }
class C{  public SetShuffle(int playerId){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("shuffle","toggle");}  }
class C{  private Rectangle2D.Double appendParagraph(@Nullable Path2D.Double shape,AttributedCharacterIterator styledText,float verticalPos,float maxVerticalPos,float leftMargin,float rightMargin,float[] tabStops,int tabCount){  Rectangle2D.Double paragraphBounds=new Rectangle2D.Double(leftMargin,verticalPos,0,0);  int[] tabLocations=new int[tabCount + 1];  int i=0;  for (char c=styledText.first(); c != styledText.DONE; c=styledText.next()) {    if (c == '\t') {      tabLocations[i++]=styledText.getIndex();    }  }  tabLocations[tabCount]=styledText.getEndIndex() - 1;  LineBreakMeasurer measurer=new LineBreakMeasurer(styledText,getFontRenderContext());  int currentTab=0;  while (measurer.getPosition() < styledText.getEndIndex()) {    boolean lineContainsText=false;    boolean lineComplete=false;    float maxAscent=0, maxDescent=0;    float horizontalPos=leftMargin;    LinkedList<TextLayout> layouts=new LinkedList<TextLayout>();    LinkedList<Float> penPositions=new LinkedList<Float>();    while (!lineComplete) {      float wrappingWidth=rightMargin - horizontalPos;      TextLayout layout=null;      layout=measurer.nextLayout(wrappingWidth,tabLocations[currentTab] + 1,lineContainsText);      if (layout != null) {        layouts.add(layout);        penPositions.add(horizontalPos);        horizontalPos+=layout.getAdvance();        maxAscent=Math.max(maxAscent,layout.getAscent());        maxDescent=Math.max(maxDescent,layout.getDescent() + layout.getLeading());      } else {        lineComplete=true;      }      lineContainsText=true;      if (measurer.getPosition() == tabLocations[currentTab] + 1) {        currentTab++;      }      if (measurer.getPosition() == styledText.getEndIndex()) {        lineComplete=true;      } else       if (tabStops.length == 0 || horizontalPos >= tabStops[tabStops.length - 1]) {        lineComplete=true;      }      if (!lineComplete) {        int j;        for (j=0; horizontalPos >= tabStops[j]; j++) {        }        horizontalPos=tabStops[j];      }    }    verticalPos+=maxAscent;    if (verticalPos > maxVerticalPos) {      break;    }    Iterator<TextLayout> layoutEnum=layouts.iterator();    Iterator<Float> positionEnum=penPositions.iterator();    while (layoutEnum.hasNext()) {      TextLayout nextLayout=layoutEnum.next();      float nextPosition=positionEnum.next();      AffineTransform tx=new AffineTransform();      tx.translate(nextPosition,verticalPos);      if (shape != null) {        Shape outline=nextLayout.getOutline(tx);        shape.append(outline,false);      }      Rectangle2D layoutBounds=nextLayout.getBounds();      paragraphBounds.add(new Rectangle2D.Double(layoutBounds.getX() + nextPosition,layoutBounds.getY() + verticalPos,layoutBounds.getWidth(),layoutBounds.getHeight()));    }    verticalPos+=maxDescent;  }  return paragraphBounds;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.280 -0400",hash_original_method="574797F39018366831514608E69BEACB",hash_generated_method="B94C66F614EA50AE15AEF08D9A856E97") public Object decode(Object value) throws DecoderException {  if (value == null) {    return null;  } else   if (value instanceof String) {    return decode((String)value);  } else {    throw new DecoderException("Objects of type " + value.getClass().getName() + " cannot be decoded using BCodec");  }}  }
class C{  public void add(List<LogLevelHourStatistics> statisticses){  for (  LogLevelHourStatistics statistics : statisticses) {    add(statistics);  }}  }
class C{  public static BufferedOutputStream newOutputStream(File file) throws IOException {  return new BufferedOutputStream(new FileOutputStream(file));}  }
class C{  private static int handleDpadVertical(int iconIndex,int cntX,int cntY,int[][] matrix,int increment){  int newIconIndex=NOOP;  if (matrix == null) {    throw new IllegalStateException("Dpad navigation requires a matrix.");  }  int xPos=-1;  int yPos=-1;  for (int i=0; i < cntX; i++) {    for (int j=0; j < cntY; j++) {      if (matrix[i][j] == iconIndex) {        xPos=i;        yPos=j;      }    }  }  if (DEBUG) {    Log.v(TAG,String.format("\thandleDpadVertical: \t[x, y]=[%d, %d] iconIndex=%d",xPos,yPos,iconIndex));  }  for (int y=yPos + increment; 0 <= y && y < cntY && 0 <= y; y+=increment) {    if ((newIconIndex=inspectMatrix(xPos,y,cntX,cntY,matrix)) != NOOP && newIconIndex != ALL_APPS_COLUMN) {      return newIconIndex;    }  }  int nextXPos1;  int nextXPos2;  boolean haveCrossedAllAppsColumn1=false;  boolean haveCrossedAllAppsColumn2=false;  int y=-1;  for (int coeff=1; coeff < cntX; coeff++) {    nextXPos1=xPos + coeff * increment;    nextXPos2=xPos - coeff * increment;    y=yPos + increment * coeff;    if (inspectMatrix(nextXPos1,y,cntX,cntY,matrix) == ALL_APPS_COLUMN) {      haveCrossedAllAppsColumn1=true;    }    if (inspectMatrix(nextXPos2,y,cntX,cntY,matrix) == ALL_APPS_COLUMN) {      haveCrossedAllAppsColumn2=true;    }    for (; 0 <= y && y < cntY; y=y + increment) {      int offset1=haveCrossedAllAppsColumn1 && y < cntY - 1 ? increment : 0;      newIconIndex=inspectMatrix(nextXPos1 + offset1,y,cntX,cntY,matrix);      if (newIconIndex != NOOP) {        return newIconIndex;      }      int offset2=haveCrossedAllAppsColumn2 && y < cntY - 1 ? -increment : 0;      newIconIndex=inspectMatrix(nextXPos2 + offset2,y,cntX,cntY,matrix);      if (newIconIndex != NOOP) {        return newIconIndex;      }    }  }  return newIconIndex;}  }
class C{  public LauncherScroller(Context context,Interpolator interpolator,boolean flywheel){  mFinished=true;  mInterpolator=interpolator;  mPpi=context.getResources().getDisplayMetrics().density * 160.0f;  mDeceleration=computeDeceleration(ViewConfiguration.getScrollFriction());  mFlywheel=flywheel;  mPhysicalCoeff=computeDeceleration(0.84f);}  }
class C{  public static synchronized double fx(double x,double[] terms){  double a=0;  int e=0;  for (  double i : terms) {    a+=i * Math.pow(x,e);    e++;  }  return a;}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize){  addEmojis(context,text,emojiSize,0,-1,false);}  }
class C{  public void testGetSystemId() throws Throwable {  Document doc;  DocumentType docType;  String systemId;  doc=(Document)load("staffNS",builder);  docType=doc.getDoctype();  systemId=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,systemId);}  }
class C{  public static long prefixCodedToGeoCoded(final BytesRef val){  final long result=0L | (val.bytes[val.offset + 0] & 255L) << 24 | (val.bytes[val.offset + 1] & 255L) << 16 | (val.bytes[val.offset + 2] & 255L) << 8 | val.bytes[val.offset + 3] & 255L;  return result << 32;}  }
class C{  @Override public int compareTo(Counter that){  if (this.count < that.count)   return -1; else   if (this.count > that.count)   return +1; else   return 0;}  }
class C{  @Override public void init(PluginInfo info){  final String infomsg="updateRequestProcessorChain \"" + (null != info.name ? info.name : "") + "\""+ (info.isDefault() ? " (default)" : "");  log.debug("creating " + infomsg);  List<UpdateRequestProcessorFactory> list=new ArrayList<>(solrCore.initPlugins(info.getChildren("processor"),UpdateRequestProcessorFactory.class,null));  if (list.isEmpty()) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,infomsg + " require at least one processor");  }  int numDistrib=0;  int runIndex=-1;  for (int i=list.size() - 1; 0 <= i; i--) {    UpdateRequestProcessorFactory factory=list.get(i);    if (factory instanceof DistributingUpdateProcessorFactory) {      numDistrib++;    }    if (factory instanceof RunUpdateProcessorFactory) {      runIndex=i;    }  }  if (1 < numDistrib) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,infomsg + " may not contain more then one " + "instance of DistributingUpdateProcessorFactory");  }  if (0 <= runIndex && 0 == numDistrib) {    DistributedUpdateProcessorFactory distrib=new DistributedUpdateProcessorFactory();    distrib.init(new NamedList());    list.add(runIndex,distrib);    log.debug("inserting DistributedUpdateProcessorFactory into " + infomsg);  }  chain=list;  ProcessorInfo processorInfo=new ProcessorInfo(new MapSolrParams(info.attributes));  if (processorInfo.isEmpty())   return;  UpdateRequestProcessorChain newChain=constructChain(this,processorInfo,solrCore);  chain=newChain.chain;}  }
class C{  public void serialEvent(SerialPortEvent event){switch (event.getEventType()) {case SerialPortEvent.BI:case SerialPortEvent.OE:case SerialPortEvent.FE:case SerialPortEvent.PE:case SerialPortEvent.CD:case SerialPortEvent.CTS:case SerialPortEvent.DSR:case SerialPortEvent.RI:case SerialPortEvent.OUTPUT_BUFFER_EMPTY:    break;case SerialPortEvent.DATA_AVAILABLE:  int replyCurrentSize=this.reply.getNumDataElements();int i;for (i=replyCurrentSize; i < SpeedoReply.maxSize - replyCurrentSize; i++) {try {  if (istream.available() == 0) {    break;  }  byte char1=istream.readByte();  this.reply.setElement(i,char1);} catch (Exception e) {  log.debug("{} Exception handling reply cause {}",e,e.getCause());}if (endReply(this.reply)) {  sendreply();  break;}}break;}}  }
class C{  private static void copyFiles(Manifest manifest,JarFile in,JarArchiveOutputStream out,long timestamp) throws IOException {  final byte[] buffer=new byte[4096];  int num;  final Map<String,Attributes> entries=manifest.getEntries();  final List<String> names=new ArrayList<>(entries.keySet());  Collections.sort(names);  for (  final String name : names) {    final JarEntry inEntry=in.getJarEntry(name);    if (inEntry.getMethod() == JarArchiveEntry.STORED) {      out.putArchiveEntry(new JarArchiveEntry(inEntry));    } else {      final JarArchiveEntry je=new JarArchiveEntry(name);      je.setTime(timestamp);      out.putArchiveEntry(je);    }    final InputStream data=in.getInputStream(inEntry);    while ((num=data.read(buffer)) > 0) {      out.write(buffer,0,num);    }    out.flush();    out.closeArchiveEntry();  }}  }
class C{  Node[] genTrees(int depth,int ntrees){  Node[] trees=new Node[ntrees];  for (int i=0; i < ntrees; i++) {    trees[i]=new Node(null,depth);  }  return trees;}  }
class C{  public BadPaddingException(String msg){  super(msg);}  }
class C{  private void handshake() throws WebSocketException {  try {    mProxyHandshaker.perform();  } catch (  IOException e) {    String message=String.format("Handshake with the proxy server (%s) failed: %s",mAddress,e.getMessage());    throw new WebSocketException(WebSocketError.PROXY_HANDSHAKE_ERROR,message,e);  }  if (mSSLSocketFactory == null) {    return;  }  try {    mSocket=mSSLSocketFactory.createSocket(mSocket,mHost,mPort,true);  } catch (  IOException e) {    String message="Failed to overlay an existing socket: " + e.getMessage();    throw new WebSocketException(WebSocketError.SOCKET_OVERLAY_ERROR,message,e);  }  try {    ((SSLSocket)mSocket).startHandshake();  } catch (  IOException e) {    String message=String.format("SSL handshake with the WebSocket endpoint (%s) failed: %s",mAddress,e.getMessage());    throw new WebSocketException(WebSocketError.SSL_HANDSHAKE_ERROR,message,e);  }}  }
class C{  public static boolean arrayEquals(Object x,Object y,double tolf,double told){  if (x == null && y == null) {    return true;  }  if (x == null || y == null) {    return false;  }  Class<?> xClass=x.getClass();  Class<?> yClass=y.getClass();  if (xClass != yClass) {    return false;  }  if (!xClass.isArray()) {    return x.equals(y);  } else {    if (xClass.equals(int[].class)) {      return Arrays.equals((int[])x,(int[])y);    } else     if (xClass.equals(double[].class)) {      if (told == 0) {        return Arrays.equals((double[])x,(double[])y);      } else {        return doubleArrayEquals((double[])x,(double[])y,told);      }    } else     if (xClass.equals(long[].class)) {      return Arrays.equals((long[])x,(long[])y);    } else     if (xClass.equals(float[].class)) {      if (tolf == 0) {        return Arrays.equals((float[])x,(float[])y);      } else {        return floatArrayEquals((float[])x,(float[])y,(float)tolf);      }    } else     if (xClass.equals(byte[].class)) {      return Arrays.equals((byte[])x,(byte[])y);    } else     if (xClass.equals(short[].class)) {      return Arrays.equals((short[])x,(short[])y);    } else     if (xClass.equals(char[].class)) {      return Arrays.equals((char[])x,(char[])y);    } else     if (xClass.equals(boolean[].class)) {      return Arrays.equals((boolean[])x,(boolean[])y);    } else {      Object[] xo=(Object[])x;      Object[] yo=(Object[])y;      if (xo.length != yo.length) {        return false;      }      for (int i=0; i < xo.length; i+=1) {        if (!arrayEquals(xo[i],yo[i],tolf,told)) {          return false;        }      }      return true;    }  }}  }
class C{  public boolean rejectIt(){  log.info(toString());  setIsApproved(false);  return true;}  }
class C{  public PTQuery_Partial HappenedBeforeJoin(String q,PTQuery Q) throws PTQueryException {  return AddHappenedBefore(this,q,Q);}  }
class C{  public void close() throws IOException {  mFileChannel.force(true);  mFileChannel.close();}  }
class C{  public double eval(double params[]){  return (Math.sqrt(params[0]));}  }
class C{  @Override public synchronized void updateRow() throws SQLException {  if (!this.isUpdatable) {    throw new NotUpdatable(this.notUpdatableReason);  }  if (this.doingUpdates) {    this.updater.executeUpdate();    refreshRow();    this.doingUpdates=false;  } else   if (this.onInsertRow) {    throw SQLError.createSQLException(Messages.getString("UpdatableResultSet.44"),getExceptionInterceptor());  }  syncUpdate();}  }
class C{  protected int addNodeInDocOrder(int node){  assertion(hasCache(),"addNodeInDocOrder must be done on a mutable sequence!");  int insertIndex=-1;  NodeVector vec=getVector();  int size=vec.size(), i;  for (i=size - 1; i >= 0; i--) {    int child=vec.elementAt(i);    if (child == node) {      i=-2;      break;    }    DTM dtm=m_dtmMgr.getDTM(node);    if (!dtm.isNodeAfter(node,child)) {      break;    }  }  if (i != -2) {    insertIndex=i + 1;    vec.insertElementAt(node,insertIndex);  }  return insertIndex;}  }
class C{  private void marshallEnum(Object value,EnumType enumType) throws IOException {  LOG.debug("Enum value: {} of type: {}",value,enumType);  jsonGenerator.writeString(value.toString());}  }
class C{  public String renderXML(String rootElementName,EventBean theEvent,XMLRenderingOptions options){  if (theEvent == null) {    return null;  }  return getXMLRenderer(theEvent.getEventType(),options).render(rootElementName,theEvent);}  }
class C{  public MergeNominalValuesTest(String name){  super(name);}  }
class C{  public static Version unknownVersion(){  return UNKNOWN_VERSION;}  }
class C{  public static Initiator findInitiatorInDB(String pwwn,DbClient dbClient){  Initiator initiator=null;  _log.info("Looking for initiator {} in database",pwwn);  URIQueryResultList queryResults=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getInitiatorPortInitiatorConstraint(pwwn),queryResults);  Iterator<URI> resultsIter=queryResults.iterator();  if (resultsIter.hasNext()) {    _log.info("Found initiator {}",pwwn);    initiator=dbClient.queryObject(Initiator.class,resultsIter.next());  }  return initiator;}  }
class C{  public static long parseSizeToMegabytes(String humanSize){  return parseAndConvertToBytes(humanSize) / M;}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  @Override public boolean isUploadLimited(){  return isCellularExperimentEnabled();}  }
class C{  public void testGetAllColors(){  int expectedCount=(MaterialPalettes.ALL_COLOR_NAMES.length * MaterialPalettes.NON_ACCENT_COLOR_LEVELS.length) + (MaterialPalettes.COLORS_WITH_ACCENT_NAMES.length * MaterialPalettes.ACCENT_COLOR_LEVELS.length);  try {    List<Integer> colorList=MaterialPalettes.getAllColors();    assertEquals(expectedCount,colorList.size());  } catch (  IllegalAccessException iae) {    fail();  }}  }
class C{  public LatLng(double lat,double lng){  this.lat=lat;  this.lng=lng;}  }
class C{  public boolean osFileExists(File file){  return file.exists();}  }
class C{  public static void putFile(ServiceClient h,final Operation put,File f) throws IOException {  final AsynchronousFileChannel ch=AsynchronousFileChannel.open(f.toPath(),StandardOpenOption.READ);  AtomicInteger completionCount=new AtomicInteger(0);  String contentType=FileUtils.getContentType(f.toURI());  final boolean[] fileIsDone={false};  putChunks(h,put,ch,contentType,f.length(),0,completionCount,fileIsDone);}  }
class C{  public QueryFilterBuilder(QueryBuilder queryBuilder){  this.queryBuilder=queryBuilder;}  }
class C{  public static String chop(String s,int i){  return chop(s,i,EOL);}  }
class C{  public MaterialPreviewWidget(){  initComponents();}  }
class C{  public boolean isNativeMethod(){  return nativeMethod;}  }
class C{  @Since(CommonParams.VERSION_1) @POST @Consumes(MediaType.APPLICATION_JSON) @Override public Response postCollection(@Context Request request,DefinitionRepresentation content,@InjectParam TriggerParameters params) throws WebApplicationException {  return post(request,triggerBackend.postCollection(),content,params);}  }
class C{  private void loadChat(String userId,String chatId,String chatTitle,String image){  final Intent chatScreenActivity=new Intent(getActivity(),ChatScreenActivity.class);  chatScreenActivity.putExtra(Keys.USER_ID,userId);  chatScreenActivity.putExtra(Keys.CHAT_ID,chatId);  chatScreenActivity.putExtra(Keys.CHAT_TITLE,chatTitle);  chatScreenActivity.putExtra(Keys.PROFILE_IMAGE,image);  startActivity(chatScreenActivity);}  }
class C{  public void addSubjectAlternativeName(int tag,byte[] name) throws IOException {  GeneralName alt_name=new GeneralName(tag,name);  if (subjectAltNames == null) {    subjectAltNames=new ArrayList[9];  }  if (subjectAltNames[tag] == null) {    subjectAltNames[tag]=new ArrayList<GeneralName>();  }  subjectAltNames[tag].add(alt_name);}  }
class C{  public void checkAccess(){}  }
class C{  public static float[] convertFromSigned16BitSamples(ByteBuffer buffer){  ShortBuffer byteBuffer=buffer.order(ByteOrder.LITTLE_ENDIAN).asShortBuffer();  float[] samples=new float[buffer.limit() / 2];  for (int x=0; x < samples.length; x++) {    samples[x]=(float)byteBuffer.get() / 32767.0f;  }  return samples;}  }
class C{  public OVector(OVector v){  int N=v.size();  if (N == 0)   vector=new Object[defaultCapacity]; else {    vector=new Object[N];    size=N;    System.arraycopy(v.vector,0,vector,0,N);  }}  }
class C{  public boolean isUsePercentValuesEnabled(){  return mUsePercentValues;}  }
class C{  public void actionPerformed(final ActionEvent e){  if (e.getSource().equals(updateDrag)) {    JCheckBox test=(JCheckBox)e.getSource();    if (!test.isSelected()) {      initiateMovement.setSelected(false);      initiateMovement.setEnabled(false);      repaint();    } else     if (test.isSelected()) {      initiateMovement.setEnabled(true);      repaint();    }  } else   if (e.getSource().equals(colorChoice)) {    theColor=getColor();  }}  }
class C{  private static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Could not decode from Base64.");    throw new IllegalArgumentException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }}  }
class C{  public boolean isEmpty(){  return _pos == 0;}  }
class C{  public Thread pauseTrain(int fastMinutes){  if (_pausingActive) {    return (null);  }  Runnable pauseTrain=new PauseTrain(fastMinutes);  Thread tPause=new Thread(pauseTrain,"pause train " + _activeTrain.getTrainName());  tPause.start();  return tPause;}  }
class C{  public BundleStreamSource asStream(){  return new StreamFromBundle(this);}  }
class C{  private void printError(ProcessingException exception){  messager.printMessage(Diagnostic.Kind.ERROR,exception.getMessage(),exception.getElement());}  }
class C{  public static void main(String args[]){  new NQueensApp().startApplication();}  }
class C{  @Override public void update(){  final StendhalRPZone zone=getZone();  if (zone != null) {    zone.removeMovementListener(this);  }  super.update();  if (zone != null) {    zone.addMovementListener(this);  }}  }
class C{  public static Paint newGuideLinePaint(float size,int color){  final Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setColor(color);  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeWidth(size);  return paint;}  }
class C{  public static Object newRegression(boolean condition){  Object result;  if (condition) {    Object[] arr={0,1,2,3,4,5};    result=new B();    for (int i=0; i < arr.length; ++i) {      if (arr[i].equals(Integer.valueOf(i))) {        return false;      }    }  } else {    result=new B();  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.273 -0500",hash_original_method="74B8316ED8B5F40365D8BD9CF002AB2D",hash_generated_method="953C50BB61ABB847A70272FFFA04A172") private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  public static String formatPaddRight(int numFracDigits,float f,String col){  String res=numFormat[numFracDigits].format(f) + padd;  return res.substring(0,col.length());}  }
class C{  protected void visitEqualsAssertion(EqualsAssertion assertion){  VariableReference source=assertion.getSource();  VariableReference dest=assertion.getDest();  Object value=assertion.getValue();  if (source.isPrimitive() || source.isWrapperType()) {    if (source.getVariableClass().equals(float.class)) {      if (((Boolean)value).booleanValue())       testCode+="assertEquals(" + getVariableName(source) + ", "+ getVariableName(dest)+ ", "+ NumberFormatter.getNumberString(Properties.FLOAT_PRECISION)+ ");"; else       testCode+="assertNotEquals(" + getVariableName(source) + ", "+ getVariableName(dest)+ ", "+ NumberFormatter.getNumberString(Properties.FLOAT_PRECISION)+ ");";    } else     if (source.getVariableClass().equals(Float.class)) {      if (((Boolean)value).booleanValue())       testCode+="assertEquals((float)" + getVariableName(source) + ", (float)"+ getVariableName(dest)+ ", "+ NumberFormatter.getNumberString(Properties.FLOAT_PRECISION)+ ");"; else       testCode+="assertNotEquals((float)" + getVariableName(source) + ", (float)"+ getVariableName(dest)+ ", "+ NumberFormatter.getNumberString(Properties.FLOAT_PRECISION)+ ");";    } else     if (source.getVariableClass().equals(double.class)) {      if (((Boolean)value).booleanValue())       testCode+="assertEquals(" + getVariableName(source) + ", "+ getVariableName(dest)+ ", "+ NumberFormatter.getNumberString(Properties.DOUBLE_PRECISION)+ ");"; else       testCode+="assertNotEquals(" + getVariableName(source) + ", "+ getVariableName(dest)+ ", "+ NumberFormatter.getNumberString(Properties.DOUBLE_PRECISION)+ ");";    } else     if (source.getVariableClass().equals(Double.class)) {      if (((Boolean)value).booleanValue())       testCode+="assertEquals((double)" + getVariableName(source) + ", (double)"+ getVariableName(dest)+ ", "+ NumberFormatter.getNumberString(Properties.DOUBLE_PRECISION)+ ");"; else       testCode+="assertNotEquals((double)" + getVariableName(source) + ", (double)"+ getVariableName(dest)+ ", "+ NumberFormatter.getNumberString(Properties.DOUBLE_PRECISION)+ ");";    } else     if (source.isWrapperType()) {      if (((Boolean)value).booleanValue())       testCode+="assertTrue(" + getVariableName(source) + ".equals(("+ this.getClassName(Object.class)+ ")"+ getVariableName(dest)+ "));"; else       testCode+="assertFalse(" + getVariableName(source) + ".equals(("+ this.getClassName(Object.class)+ ")"+ getVariableName(dest)+ "));";    } else     if (dest.isWrapperType()) {      if (((Boolean)value).booleanValue())       testCode+="assertTrue(" + getVariableName(dest) + ".equals(("+ this.getClassName(Object.class)+ ")"+ getVariableName(source)+ "));"; else       testCode+="assertFalse(" + getVariableName(dest) + ".equals(("+ this.getClassName(Object.class)+ ")"+ getVariableName(source)+ "));";    } else {      if (((Boolean)value).booleanValue())       testCode+="assertTrue(" + getVariableName(source) + " == "+ getVariableName(dest)+ ");"; else       testCode+="assertFalse(" + getVariableName(source) + " == "+ getVariableName(dest)+ ");";    }  } else {    if (((Boolean)value).booleanValue())     testCode+="assertTrue(" + getVariableName(source) + ".equals(("+ this.getClassName(Object.class)+ ")"+ getVariableName(dest)+ "));"; else     testCode+="assertFalse(" + getVariableName(source) + ".equals(("+ this.getClassName(Object.class)+ ")"+ getVariableName(dest)+ "));";  }}  }
class C{  protected void restore(Bundle savedInstanceState){  playingVideoIndex=savedInstanceState.getInt("playingVideoIndex",-1);  videoModel=(DownloadEntry)savedInstanceState.getSerializable("model");  playerFragment=(PlayerFragment)getChildFragmentManager().findFragmentById(R.id.container_player);  if (playerFragment != null) {    playerFragment.setCallback(this);    ((NetworkSubject)getActivity()).registerNetworkObserver(playerFragment);  }}  }
class C{  public static boolean isJavaIdentifier(String name){  if (name.length() == 0 || INVALID_JAVA_IDENTIFIERS.contains(name))   return false;  char[] chars=name.toCharArray();  if (!Character.isJavaIdentifierStart(chars[0]))   return false;  for (int i=1; i < chars.length; i++) {    if (!Character.isJavaIdentifierPart(chars[i]))     return false;  }  return true;}  }
class C{  public void add_return(StorageCapability param){  if (local_return == null) {    local_return=new StorageCapability[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(StorageCapability[])list.toArray(new StorageCapability[list.size()]);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditemns06.class,args);}  }
class C{  public void tag(View view){  ListView list=(ListView)findViewById(R.id.avatarsList);  int index=list.getCheckedItemPosition();  if (index < 0) {    MainActivity.showMessage("Select an image to tag",this);    return;  }  this.avatar=MainActivity.avatars.get(index);  this.avatar.instance=MainActivity.instance.id;  CheckBox checkbox=(CheckBox)findViewById(R.id.defaultCheckBox);  this.avatar.isDefault=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.noneCheckBox);  this.avatar.none=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.ecstaticCheckBox);  this.avatar.ecstatic=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.happyCheckBox);  this.avatar.happy=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.sadCheckBox);  this.avatar.sad=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.cryingCheckBox);  this.avatar.crying=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.loveCheckBox);  this.avatar.love=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.likeCheckBox);  this.avatar.like=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.dislikeCheckBox);  this.avatar.dislike=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.hateCheckBox);  this.avatar.hate=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.sereneCheckBox);  this.avatar.serene=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.calmCheckBox);  this.avatar.calm=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.angerCheckBox);  this.avatar.anger=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.rageCheckBox);  this.avatar.rage=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.courageousCheckBox);  this.avatar.courageous=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.confidentCheckBox);  this.avatar.confident=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.afraidCheckBox);  this.avatar.afraid=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.panicCheckBox);  this.avatar.panic=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.surpriseCheckBox);  this.avatar.surprise=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.boredCheckBox);  this.avatar.bored=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.laughterCheckBox);  this.avatar.laughter=checkbox.isChecked();  checkbox=(CheckBox)findViewById(R.id.seriousCheckBox);  this.avatar.serious=checkbox.isChecked();  HttpTagAvatarAction action=new HttpTagAvatarAction(this,this.avatar);  action.execute();}  }
class C{  public static final Slice scale(Slice slice,double scale){  if (slice == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  return new Slice(slice.getSliceRadius() * scale,slice.getTheta());}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  public static List<EPGListRow> buildFromBroadcastList(List<PVRType.DetailsBroadcast> broadcasts){  Date currentTime=new Date();  int previousDayIdx=0, dayIdx;  Calendar cal=Calendar.getInstance();  List<EPGListRow> result=new ArrayList<>(broadcasts.size() + 5);  for (  PVRType.DetailsBroadcast broadcast : broadcasts) {    if (broadcast.endtime.before(currentTime)) {      continue;    }    cal.setTime(broadcast.starttime);    dayIdx=cal.get(Calendar.YEAR) * 366 + cal.get(Calendar.DATE);    if (dayIdx > previousDayIdx) {      previousDayIdx=dayIdx;      result.add(new EPGListRow(broadcast.starttime));    }    result.add(new EPGListRow(broadcast));  }  return result;}  }
class C{  public void parse() throws RSSException {  try {    factory.setValidating(validate);    factory.newSAXParser().parse(in,hnd);  } catch (  java.io.UnsupportedEncodingException use) {    if (!retrying) {      retrying=true;      try {        if (u != null) {          setXmlResource(u);          fixUnicodeErrors();          parse();          return;        }      } catch (      Exception e) {        e.printStackTrace();        throw new RSSException("RSSParser::fix fails: " + e.getMessage());      }    }    use.printStackTrace();    throw new RSSException("RSSParser::fix fails: " + use.getMessage());  }catch (  SAXException e) {    e.printStackTrace();    throw new RSSException("RSSParser::parse fails: " + e.getMessage());  }catch (  ParserConfigurationException e) {    e.printStackTrace();    throw new RSSException("RSSParser::parse fails: " + e.getMessage());  }catch (  IOException e) {    e.printStackTrace();    throw new RSSException("RSSParser::parse fails: " + e.getMessage());  } finally {    if (in != null) {      try {        in.close();      } catch (      Exception e) {      }    }    if (tempFile != null)     tempFile.delete();    tempFile=null;  }}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  commandBox.mouseClicked(par1,par2,par3);}  }
class C{  public void testMergeOneContextParamIntoDocumentWithAnotherContextParam() throws Exception {  String srcXml="<web-app>" + "  <context-param>" + "    <param-name>param1</param-name>"+ "    <param-value>value1</param-value>"+ "  </context-param>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <context-param>" + "    <param-name>param2</param-name>"+ "    <param-value>value2</param-value>"+ "  </context-param>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasContextParam(srcWebXml,"param1"));  assertTrue(WebXmlUtils.hasContextParam(srcWebXml,"param2"));}  }
class C{  @Override protected void initializeCapacities(MkAppEntry exampleLeaf){  int distanceSize=ByteArrayUtil.SIZE_DOUBLE;  double overhead=12.125;  if (getPageSize() - overhead < 0) {    throw new RuntimeException("Node size of " + getPageSize() + " Bytes is chosen too small!");  }  dirCapacity=(int)(getPageSize() - overhead) / (4 + 4 + distanceSize+ distanceSize+ (settings.p + 1) * 4 + 2) + 1;  if (dirCapacity <= 1) {    throw new RuntimeException("Node size of " + getPageSize() + " Bytes is chosen too small!");  }  if (dirCapacity < 10) {    LOG.warning("Page size is choosen too small! Maximum number of entries " + "in a directory node = " + (dirCapacity - 1));  }  leafCapacity=(int)(getPageSize() - overhead) / (4 + distanceSize + (settings.p + 1) * 4 + 2) + 1;  if (leafCapacity <= 1) {    throw new RuntimeException("Node size of " + getPageSize() + " Bytes is chosen too small!");  }  if (leafCapacity < 10) {    LOG.warning("Page size is choosen too small! Maximum number of entries " + "in a leaf node = " + (leafCapacity - 1));  }  initialized=true;  if (LOG.isVerbose()) {    LOG.verbose("Directory Capacity: " + (dirCapacity - 1) + "\nLeaf Capacity:    "+ (leafCapacity - 1));  }}  }
class C{  static void testOverflowEvent(Path dir) throws IOException, InterruptedException {  try (WatchService watcher=dir.getFileSystem().newWatchService()){    dir.register(watcher,ENTRY_CREATE,ENTRY_DELETE);    int n=1024;    Path[] files=new Path[n];    for (int i=0; i < n; i++) {      files[i]=Files.createFile(dir.resolve("foo" + i));    }    Thread.sleep(1000);    drainAndCheckOverflowEvents(watcher,ENTRY_CREATE,n);    for (int i=0; i < n; i++) {      Files.delete(files[i]);    }    Thread.sleep(1000);    drainAndCheckOverflowEvents(watcher,ENTRY_DELETE,n);  } }  }
class C{  public boolean allExists(){  return parts.length == lastExistingIdx + 1;}  }
class C{  private void positionAndSizeAsIcon(){  if (!(getParent() instanceof DragLayer))   return;  setScaleX(0.8f);  setScaleY(0.8f);  setAlpha(0f);  mState=STATE_SMALL;}  }
class C{  public void header(int version,long length,int twipsWidth,int twipsHeight,int frameRate,int frameCount) throws IOException {  if (tags != null) {    tags.header(version,length,twipsWidth,twipsHeight,frameRate,frameCount);  }}  }
class C{  public boolean isGrowable(){  return growable;}  }
class C{  public MetricKDE(KernelFunction kf,DistanceMetric distanceMetric,VectorCollectionFactory<VecPaired<Vec,Integer>> vcf,int defaultK,double defaultStndDev){  setKernelFunction(kf);  this.distanceMetric=distanceMetric;  this.vcf=vcf;  setDefaultK(defaultK);  setDefaultStndDev(defaultStndDev);}  }
class C{  public void afterDeploymentValidation(@Observes AfterDeploymentValidation event,BeanManager beanManager){  List<Class<?>> sortedForDataModelClasses=new ArrayList<>();  for (  Class<?> clazz : forClassToDataModelClass.keySet()) {    int highestSuper=-1;    boolean added=false;    for (int i=0; i < sortedForDataModelClasses.size(); i++) {      if (sortedForDataModelClasses.get(i).isAssignableFrom(clazz)) {        sortedForDataModelClasses.add(i,clazz);        added=true;        break;      } else       if (clazz.isAssignableFrom(sortedForDataModelClasses.get(i))) {        highestSuper=i;      }    }    if (!added) {      if (highestSuper > -1) {        sortedForDataModelClasses.add(highestSuper + 1,clazz);      } else {        sortedForDataModelClasses.add(clazz);      }    }  }  Map<Class<?>,Class<? extends DataModel<?>>> linkedForClassToDataModelClass=new LinkedHashMap<>();  for (  Class<?> sortedClass : sortedForDataModelClasses) {    linkedForClassToDataModelClass.put(sortedClass,forClassToDataModelClass.get(sortedClass));  }  forClassToDataModelClass=unmodifiableMap(linkedForClassToDataModelClass);}  }
class C{  private final boolean canGcNowLocked(){  boolean processingBroadcasts=false;  for (  BroadcastQueue q : mBroadcastQueues) {    if (q.mParallelBroadcasts.size() != 0 || q.mOrderedBroadcasts.size() != 0) {      processingBroadcasts=true;    }  }  return !processingBroadcasts && (mSleeping || (mMainStack.mResumedActivity != null && mMainStack.mResumedActivity.idle));}  }
class C{  public void addZip(String zip){  Set<String> currentZips=getIsInZip();  if (currentZips == null) {    currentZips=new HashSet<String>();  }  currentZips.add(zip);  this.setIsInZip(currentZips);}  }
class C{  @Override public int hashCode(){  return value ? 1231 : 1237;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private static boolean isPublicTestMethod(final Method method){  final String name=method.getName();  final Class[] parameters=method.getParameterTypes();  final Class returnType=method.getReturnType();  return parameters.length == 0 && (name.startsWith("test") || method.getAnnotation(Test.class) != null) && returnType.equals(Void.TYPE) && Modifier.isPublic(method.getModifiers());}  }
class C{  public TextHitInfo hitTestChar(float x,float y){  return hitTestChar(x,y,getNaturalBounds());}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  public void clearQuery(Query query){  lock.lock();  try {    final Query singleton=uniqueQueries.remove(query);    if (singleton != null) {      onEviction(singleton);    }  }  finally {    lock.unlock();  }}  }
class C{  public NetMatcher(Collection<String> nets,DNSService dnsServer){  this.dnsServer=dnsServer;  initInetNetworks(nets);}  }
class C{  public byte[] simpleSign(byte[] buf,int offset,int len) throws SignatureException {  sig.update(buf,offset,len);  return sig.sign();}  }
class C{  public final static <T,R>R mapReduce(final Stream<T> stream,final Reducer<R> reducer){  return reducer.mapReduce(stream);}  }
class C{  public static void mult(CGPoint v,float s,CGPoint res){  res.x=v.x * s;  res.y=v.y * s;}  }
class C{  private static void markElseIfChains(IfRegion ifRegion){  if (hasSimpleReturnBlock(ifRegion.getThenRegion())) {    return;  }  IContainer elsRegion=ifRegion.getElseRegion();  if (elsRegion instanceof Region) {    List<IContainer> subBlocks=((Region)elsRegion).getSubBlocks();    if (subBlocks.size() == 1 && subBlocks.get(0) instanceof IfRegion) {      subBlocks.get(0).add(AFlag.ELSE_IF_CHAIN);      elsRegion.add(AFlag.ELSE_IF_CHAIN);    }  }}  }
class C{  public synchronized void start(){  if (isRunning()) {    return;  }  try {    if (SmackConfiguration.getLocalSocks5ProxyPort() < 0) {      int port=Math.abs(SmackConfiguration.getLocalSocks5ProxyPort());      for (int i=0; i < 65535 - port; i++) {        try {          this.serverSocket=new ServerSocket(port + i);          break;        } catch (        IOException e) {        }      }    } else {      this.serverSocket=new ServerSocket(SmackConfiguration.getLocalSocks5ProxyPort());    }    if (this.serverSocket != null) {      this.serverThread=new Thread(this.serverProcess);      this.serverThread.start();    }  } catch (  IOException e) {    System.err.println("couldn't setup local SOCKS5 proxy on port " + SmackConfiguration.getLocalSocks5ProxyPort() + ": "+ e.getMessage());  }}  }
class C{  private void grow(){  m_allocatedSize*=2;  boolean newVector[]=new boolean[m_allocatedSize];  System.arraycopy(m_values,0,newVector,0,m_index + 1);  m_values=newVector;}  }
class C{  public AsyncResult<ServiceResponse> serviceRequestAsync(ServiceRequest request){  RequestHeader rh=request.getRequestHeader();  if (rh == null)   request.setRequestHeader(rh=new RequestHeader());  rh.setAuthenticationToken(session.getAuthenticationToken());  rh.setTimestamp(new DateTime());  return channel.serviceRequestAsync(request);}  }
class C{  public void stop(){  mVibrator=null;  mContext.getContentResolver().unregisterContentObserver(mContentObserver);}  }
class C{  public boolean isDistributedNoAck(){  return this == DISTRIBUTED_NO_ACK;}  }
class C{  public BucketMovedException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  private void handleLogButtonClick(int idx){  listener.onLogButtonClick(idx);}  }
class C{  private void tryRunningShootOFF(){  if (!new File(System.getProperty("shootoff.home") + File.separator + "shootoff.properties").exists()) {    final Alert resourcesAlert=new Alert(AlertType.ERROR);    resourcesAlert.setTitle("Missing Resources");    resourcesAlert.setHeaderText("Missing Required Resources!");    resourcesAlert.setResizable(true);    resourcesAlert.setContentText("ShootOFF could not acquire the necessary resources to run. Please ensure " + "you have a connection to the Internet and can connect to http://shootoffapp.com and try again.\n\n" + "If you cannot get the browser-launched version of ShootOFF to work, use the standlone version from "+ "the website.");    resourcesAlert.showAndWait();  } else {    runShootOFF();  }}  }
class C{  public static WhereBuilder b(String columnName,String op,Object value){  WhereBuilder result=new WhereBuilder();  result.appendCondition(null,columnName,op,value);  return result;}  }
class C{  public void rectValueToPixel(RectF r){  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  @Override public void connectionChange(ConnectionEvent evt){  if (evt.getType() == ConnectionEvent.DISCONNECT) {    m_InfoPanel.append("disconnect from: " + evt.getDbUtils().getDatabaseURL(),"information_small.gif");  } else {    m_InfoPanel.append("connecting to: " + evt.getDbUtils().getDatabaseURL() + " = "+ evt.isConnected(),"information_small.gif");  }  if (evt.getException() != null) {    m_InfoPanel.append("exception: " + evt.getException(),"error_small.gif");  }  if (evt.isConnected()) {    m_QueryPanel.setFocus();  } else {    m_ConnectionPanel.setFocus();  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  @Override public long encodeNormValue(float f){  return SmallFloat.floatToByte315(f);}  }
class C{  private void recordExchangeTime(Peer peer,Date exchangeTime){  BluetoothDevice device=peer.getNetwork().getBluetoothDevice();  if (device == null) {    Log.e(TAG,"Recording exchange time of non-bluetooth peer! Can't do it.");    return;  } else {    exchangeTimes.put(device.getAddress(),exchangeTime);  }}  }
class C{  public static boolean isFileWithContent(byte[] content,String filePath,String uid) throws BookException {  if (content != null && content.length > 0) {    return true;  } else   if (StringUtils.isNotBlank(filePath)) {    return true;  } else   if (StringUtils.isNotBlank(uid)) {    return false;  }  throw new BookException(BookException.ERROR_CANNOT_SAVE_FILE);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.634 -0400",hash_original_method="C00DF150BD7A81B8538F88231B296818",hash_generated_method="E5738BF70A323531E51144F65A827633") @Override public boolean accept(File file){  boolean newer=FileUtils.isFileNewer(file,cutoff);  return acceptOlder ? !newer : newer;}  }
class C{  private MathEnumerationAdapter(Collection<T> col){  this.col=col;  iter=col.iterator();}  }
class C{  public Collection<Tree<L>> subTrees(Collection<Tree<L>> n){  n.add(this);  List<Tree<L>> kids=getChildren();  for (  Tree<L> kid : kids) {    kid.subTrees(n);  }  return n;}  }
class C{  private byte[] __getUserBin(boolean isUser1,String deviceKey,String latestRomVersion){  byte[] result=__loadBinFromLocal(isUser1,latestRomVersion);  if (result != null) {    log.debug(Thread.currentThread().toString() + "##__getUserBin(isUser1=[" + isUser1+ "],deviceKey=["+ deviceKey+ "],latestRomVersion=["+ latestRomVersion+ "])1: "+ result);    return result;  } else {    __deleteDownloadIdValue(latestRomVersion);    result=__loadBinFromInternet(isUser1,deviceKey,latestRomVersion);    if (result != null) {      __saveDownloadIdValue(latestRomVersion);    }    log.debug(Thread.currentThread().toString() + "##__getUserBin(isUser1=[" + isUser1+ "],deviceKey=["+ deviceKey+ "],latestRomVersion=["+ latestRomVersion+ "])2: "+ result);    return result;  }}  }
class C{  protected void enter(){  if (!lock.enterBusy())   throw new IgniteException("Failed to execute native callback because grid is stopping.");}  }
class C{  public synchronized void stop(){  if (mCamera != null) {    super.stop();    if (!mCameraOpenedManually) {      destroyCamera();    } else {      try {        startPreview();      } catch (      RuntimeException e) {        e.printStackTrace();      }catch (      IOException e) {        e.printStackTrace();      }    }  }}  }
class C{  public Swagger2MarkupConfigBuilder withoutInlineSchema(){  config.inlineSchemaEnabled=false;  return this;}  }
class C{  private CNodeDeleter(){}  }
class C{  public SignatureVisitor visitInterfaceBound(){  return this;}  }
class C{  public Builder timeoutAfter(TimeDuration lockTimeout){  Preconditions.checkArgument(lockTimeout.toMillis() > 0);  if ((lockMap == null) || (this.lockTimeout != null)) {    throw new IllegalStateException();  }  this.lockTimeout=SimpleTimeDuration.of(lockTimeout);  return this;}  }
class C{  private static RequestQueue newRequestQueue(Context context,HttpStack stack){  File cacheDir;  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(state)) {    cacheDir=new File(context.getExternalCacheDir(),"volley");  } else {    cacheDir=new File(context.getCacheDir(),"volley");  }  if (stack == null) {    stack=new HurlStack();  }  Network network=new BasicNetwork(stack);  RequestQueue queue=new RequestQueue(new DiskBasedCache(cacheDir,CACHE_DISK_USAGE_BYTES),network,1);  queue.start();  return queue;}  }
class C{  public synchronized void decrement(int weight){  if (weight == 0)   return;  minimum+=weight;  int logfloor=(int)(Math.floor(Math.log(weight) / Math.log(2)));  if (logfloor < votingRecord.size() - 1) {    while (logfloor > 0) {      selectedDecrement(logfloor);      weight=weight - (int)Math.pow(2,logfloor);      logfloor=(int)(Math.floor(Math.log(weight) / Math.log(2)));    }  }  for (int x=0; x < weight; x++) {    decrement();  }}  }
class C{  protected void callSubtreeVisitors(XPathVisitor visitor){  m_functionExpr.callVisitors(new FunctionOwner(),visitor);  super.callSubtreeVisitors(visitor);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  public boolean isInfoEnabled(){  return isEnabled(TraceSystem.INFO);}  }
class C{  public long start_data(){  return Long.parseLong(fields[44]);}  }
class C{  public boolean isAvailable(){  String whereClause="QtyOnHand >= QtyRequired AND PP_Order_ID=?";  boolean available=new Query(getCtx(),"RV_PP_Order_Storage",whereClause,get_TrxName()).setParameters(new Object[]{get_ID()}).match();  return available;}  }
class C{  public void load(){  Properties sysProps=System.getProperties();  TreeMap<String,String> sortedSysProps=new TreeMap<String,String>(new SystemPropertyComparator());  for (Enumeration names=sysProps.propertyNames(); names.hasMoreElements(); ) {    String name=(String)names.nextElement();    String value=sysProps.getProperty(name);    if (name.equals("line.separator")) {      value=convertLineSeperatorToBePrintable(name,value);    }    sortedSysProps.put(name,value);  }  data=new Object[sortedSysProps.size()][2];  int i=0;  for (Iterator itrSorted=sortedSysProps.entrySet().iterator(); itrSorted.hasNext(); i++) {    Map.Entry property=(Map.Entry)itrSorted.next();    data[i][0]=property.getKey();    data[i][1]=property.getValue();  }  fireTableDataChanged();}  }
class C{  public double num(){  return toDouble();}  }
class C{  public void assertKeyNotEquals(QueryResultKey key1,QueryResultKey key2){  assertTrue(!key1.equals(key2));  assertTrue(!key2.equals(key1));}  }
class C{  public ImageSource tiling(boolean tile){  this.tile=tile;  return this;}  }
class C{  private static int moveToTiffEntryWithTag(InputStream is,int length,boolean isLittleEndian,int tagToFind) throws IOException {  if (length < 14) {    return 0;  }  int numEntries=StreamProcessor.readPackedInt(is,2,isLittleEndian);  length-=2;  while (numEntries-- > 0 && length >= 12) {    int tag=StreamProcessor.readPackedInt(is,2,isLittleEndian);    length-=2;    if (tag == tagToFind) {      return length;    }    is.skip(10);    length-=10;  }  return 0;}  }
class C{  public static Currency newInstance(){  Currency returnInstance=new Currency();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  protected float parseFloat() throws ParseException, IOException {  int mant=0;  int mantDig=0;  boolean mantPos=true;  boolean mantRead=false;  int exp=0;  int expDig=0;  int expAdj=0;  boolean expPos=true;switch (current) {case '-':    mantPos=false;case '+':  current=reader.read();}m1: switch (current) {default :reportUnexpectedCharacterError(current);return 0.0f;case '.':break;case '0':mantRead=true;l: for (; ; ) {current=reader.read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;case '.':case 'e':case 'E':break m1;default :return 0.0f;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':mantRead=true;l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');} else {expAdj++;}current=reader.read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}if (current == '.') {current=reader.read();m2: switch (current) {default :case 'e':case 'E':if (!mantRead) {reportUnexpectedCharacterError(current);return 0.0f;}break;case '0':if (mantDig == 0) {l: for (; ; ) {current=reader.read();expAdj--;switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :if (!mantRead) {return 0.0f;}break m2;case '0':}}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (mantDig < 9) {mantDig++;mant=mant * 10 + (current - '0');expAdj--;}current=reader.read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}}switch (current) {case 'e':case 'E':current=reader.read();switch (current) {default :reportUnexpectedCharacterError(current);return 0f;case '-':expPos=false;case '+':current=reader.read();switch (current) {default :reportUnexpectedCharacterError(current);return 0f;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}en: switch (current) {case '0':l: for (; ; ) {current=reader.read();switch (current) {case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':break l;default :break en;case '0':}}case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':l: for (; ; ) {if (expDig < 3) {expDig++;exp=exp * 10 + (current - '0');}current=reader.read();switch (current) {default :break l;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}}default :}if (!expPos) {exp=-exp;}exp+=expAdj;if (!mantPos) {mant=-mant;}return buildFloat(mant,exp);}  }
class C{  private Dimension calculateSize(int maxRowWidth){  FlowLayout layout=(FlowLayout)getLayout();  int height=0;  int currentRowWidth=0;  int currentRowHeight=0;  for (int i=0, count=getComponentCount(); i < count; ++i) {    Component comp=getComponent(i);    Dimension bounds=comp.getPreferredSize();    if (!comp.isVisible()) {      continue;    }    currentRowHeight=Math.max(currentRowHeight,bounds.height);    if (currentRowWidth + layout.getHgap() + bounds.width <= maxRowWidth) {      if (bounds.width != 0) {        currentRowWidth+=bounds.width + layout.getHgap();      }      continue;    }    height+=currentRowHeight + layout.getVgap();    currentRowWidth=bounds.width;    currentRowHeight=bounds.height;  }  return new Dimension(maxRowWidth,height + currentRowHeight + 2 * layout.getVgap());}  }
class C{  public long load(final long address,final int length){  Preconditions.checkArgument(address >= 0,"Error: Argument address can't be less than 0");  Preconditions.checkArgument(length > 0,"Error: Argument length must be bigger than 0");  if (endianness == Endianness.LITTLE_ENDIAN) {    return loadLittle(memory.getData(address,length));  } else {    return loadBig(memory.getData(address,length));  }}  }
class C{  public void waitUntil(Predicate<OutputFrame> predicate,long limit,TimeUnit limitUnit) throws TimeoutException {  long expiry=limitUnit.toMillis(limit) + System.currentTimeMillis();  waitUntil(predicate,expiry);}  }
class C{  public void keyPressed(final KeyEvent k){  if (k.getKeyCode() == KeyEvent.VK_SPACE) {  }  if (k.getKeyCode() != KeyEvent.VK_SPACE) {  }  repaint();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.OBJECT_LITERAL__DEFINED_TYPE:    setDefinedType((Type)null);  return;case N4JSPackage.OBJECT_LITERAL__PROPERTY_ASSIGNMENTS:getPropertyAssignments().clear();return;}super.eUnset(featureID);}  }
class C{  public static void add(List<String> options,char option,OptionHandler value){  add(options,"" + option,value);}  }
class C{  public int makeCylinder(Vector pos,final Pattern block,double radiusX,double radiusZ,int height,final boolean filled) throws MaxChangedBlocksException {  radiusX+=0.5;  radiusZ+=0.5;  if (height == 0) {    return this.changes;  } else   if (height < 0) {    height=-height;    pos=pos.subtract(0,height,0);  }  if (pos.getBlockY() < 0) {    pos=pos.setY(0);  } else   if (((pos.getBlockY() + height) - 1) > maxY) {    height=(maxY - pos.getBlockY()) + 1;  }  final double invRadiusX=1 / radiusX;  final double invRadiusZ=1 / radiusZ;  final int ceilRadiusX=(int)Math.ceil(radiusX);  final int ceilRadiusZ=(int)Math.ceil(radiusZ);  double nextXn=0;  forX:   for (int x=0; x <= ceilRadiusX; ++x) {    final double xn=nextXn;    nextXn=(x + 1) * invRadiusX;    double nextZn=0;    forZ:     for (int z=0; z <= ceilRadiusZ; ++z) {      final double zn=nextZn;      nextZn=(z + 1) * invRadiusZ;      final double distanceSq=this.lengthSq(xn,zn);      if (distanceSq > 1) {        if (z == 0) {          break forX;        }        break forZ;      }      if (!filled) {        if ((this.lengthSq(nextXn,zn) <= 1) && (this.lengthSq(xn,nextZn) <= 1)) {          continue;        }      }      for (int y=0; y < height; ++y) {        this.setBlock(pos.add(x,y,z),block);        this.setBlock(pos.add(-x,y,z),block);        this.setBlock(pos.add(x,y,-z),block);        this.setBlock(pos.add(-x,y,-z),block);      }    }  }  return this.changes;}  }
class C{  public void close(){  try {    if (fileChannel != null)     fileChannel.close();    if (fileInput != null)     fileInput.close();  } catch (  IOException e) {    logger.warn("Unable to close buffered file reader: file=" + file.getName() + " exception="+ e.getMessage());  }  fileInput=null;  bufferedInput=null;  dataInput=null;  offset=-1;  available=0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public BigdataCoreVocabulary_v20151210(){  super();}  }
class C{  public ByteMapMmapper(){  mapped=new byte[MMAP_NUM_CHUNKS];  for (int c=0; c < MMAP_NUM_CHUNKS; c++) {    mapped[c]=UNMAPPED;  }}  }
class C{  public void registerOptional3(String name,Type arg1,Type arg2,Type arg3,InvocationPlugin plugin){  plugins.register(plugin,true,allowOverwrite,declaringType,name,arg1,arg2,arg3);}  }
class C{  protected void createJobMonitorApp(){  getApplicationService().registerTopology(JobMonitorApp.APP_NAME,null);  systemApps.add(JobMonitorApp.APP_NAME);}  }
class C{  protected void doNodeConnect(Node n){  if (!shutDown && n.getNodeId() < syncManager.getLocalNodeId()) {    Short nodeId=n.getNodeId();synchronized (connections) {      NodeConnection c=connections.get(n.getNodeId());      if (c == null) {        connections.put(nodeId,c=new NodeConnection());      }      if (logger.isTraceEnabled()) {        logger.trace("[{}->{}] Connection state: {}",new Object[]{syncManager.getLocalNodeId(),nodeId,c.state});      }      if (c.state.equals(NodeConnectionState.NONE)) {        if (logger.isDebugEnabled()) {          logger.debug("[{}->{}] Attempting connection {} {}",new Object[]{syncManager.getLocalNodeId(),nodeId,n.getHostname(),n.getPort()});        }        SocketAddress sa=new InetSocketAddress(n.getHostname(),n.getPort());        c.pendingFuture=clientBootstrap.connect(sa);        c.pendingFuture.addListener(new ConnectCFListener(n));        c.state=NodeConnectionState.PENDING;      }    }  }}  }
class C{  public ByteBuffer buildPacket(int encap,short destUdp,short srcUdp){  ByteBuffer result=ByteBuffer.allocate(MAX_LENGTH);  InetAddress destIp=mBroadcast ? Inet4Address.ALL : mYourIp;  InetAddress srcIp=mBroadcast ? Inet4Address.ANY : mSrcIp;  fillInPacket(encap,destIp,srcIp,destUdp,srcUdp,result,DHCP_BOOTREPLY,mBroadcast);  result.flip();  return result;}  }
class C{  public static String create(String relativePath,String defaultHostport){  return create(relativePath,defaultHostport,Config.getScheme());}  }
class C{  public int indexOfFromTo(byte element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  byte[] theElements=elements;  for (int i=from; i <= to; i++) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  CipherCore(SymmetricCipher impl,int blkSize){  blockSize=blkSize;  unitBytes=blkSize;  diffBlocksize=blkSize;  buffer=new byte[blockSize * 2];  cipher=new ElectronicCodeBook(impl);  padding=new PKCS5Padding(blockSize);}  }
class C{  public void endDocument(){  LOG.info("Completed parse.  Found " + pages + " pages.");  store.close();}  }
class C{  public void discardMethod(){  currentScope=TestScope.FIELDS;  currentMethod=null;  currentMethodVars.clear();}  }
class C{  private boolean match(String string){  if (this.matcher == null) {    return true;  }  return this.matcher.match(string);}  }
class C{  private static String rootTestClassName(String originalClassName){  int periodIndex=originalClassName.lastIndexOf('.');  if (periodIndex != -1) {    return originalClassName.substring(0,periodIndex) + ".generatedcode" + originalClassName.substring(periodIndex);  } else {    return "com.example.test.generatedcode.Test";  }}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    FileInputStream fis=null;    try {      fis=new FileInputStream(file);      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  private void buildBaselines(LinePath[] baseLines,Rect r){  for (int i=0; i < mConfig.complexity; i++) {    baseLines[i]=new LinePath();    baseLines[i].moveTo(0,0);  }  buildFirstLine(baseLines[0],r);  int angle=(int)(Math.toDegrees(Math.atan((float)(-baseLines[0].getEndY()) / baseLines[0].getEndX())));  int[] angleBase=new int[4];  angleBase[0]=(int)(Math.toDegrees(Math.atan((float)(-r.top) / (r.right))));  angleBase[1]=(int)(Math.toDegrees(Math.atan((float)(-r.top) / (-r.left))));  angleBase[2]=(int)(Math.toDegrees(Math.atan((float)(r.bottom) / (-r.left))));  angleBase[3]=(int)(Math.toDegrees(Math.atan((float)(r.bottom) / (r.right))));  if (baseLines[0].getEndX() < 0)   angle+=180; else   if (baseLines[0].getEndX() > 0 && baseLines[0].getEndY() > 0)   angle+=360;  int range=360 / mConfig.complexity / 3;  int angleRandom;  for (int i=1; i < mConfig.complexity; i++) {    angle=angle + 360 / mConfig.complexity;    if (angle >= 360)     angle-=360;    angleRandom=angle + Utils.nextInt(-range,range);    if (angleRandom >= 360)     angleRandom-=360; else     if (angleRandom < 0)     angleRandom+=360;    baseLines[i].obtainEndPoint(angleRandom,angleBase,r);    baseLines[i].lineToEnd();  }}  }
class C{  public void accept(final ClassVisitor cv){  String[] interfaces=new String[this.interfaces.size()];  this.interfaces.toArray(interfaces);  cv.visit(version,access,name,signature,superName,interfaces);  if (sourceFile != null || sourceDebug != null) {    cv.visitSource(sourceFile,sourceDebug);  }  if (outerClass != null) {    cv.visitOuterClass(outerClass,outerMethod,outerMethodDesc);  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    cv.visitAttribute(attrs.get(i));  }  for (i=0; i < innerClasses.size(); ++i) {    innerClasses.get(i).accept(cv);  }  for (i=0; i < fields.size(); ++i) {    fields.get(i).accept(cv);  }  for (i=0; i < methods.size(); ++i) {    methods.get(i).accept(cv);  }  cv.visitEnd();}  }
class C{  public void testDoc3_Query1_All_Slops_Should_match() throws Exception {  for (int slop=0; slop < 30; slop++) {    float freq1=checkPhraseQuery(DOC_3,QUERY_1,slop,1);    float freq2=checkPhraseQuery(DOC_3_B,QUERY_1,slop,1);    assertTrue("slop=" + slop + " freq2="+ freq2+ " should be greater than freq1 "+ freq1,freq2 > freq1);  }}  }
class C{  public static Intent createFindAndUploadLastCrashIntent(Context context){  Intent intent=new Intent(context,MinidumpUploadService.class);  intent.setAction(ACTION_FIND_LAST);  return intent;}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public final ClassifierSplitModel selectModel(Instances data,double[][] dataZs,double[][] dataWs) throws Exception {  int numAttributes=data.numAttributes();  if (numAttributes < 2)   throw new Exception("Can't select Model without non-class attribute");  if (data.numInstances() < m_minNumInstances)   return new NoSplit(new Distribution(data));  double bestGain=-Double.MAX_VALUE;  int bestAttribute=-1;  for (int i=0; i < numAttributes; i++) {    if (i != data.classIndex()) {      ResidualSplit split=new ResidualSplit(i);      split.buildClassifier(data,dataZs,dataWs);      if (split.checkModel(m_minNumInstances)) {        double gain=split.entropyGain();        if (gain > bestGain) {          bestGain=gain;          bestAttribute=i;        }      }    }  }  if (bestGain >= m_minInfoGain) {    ResidualSplit split=new ResidualSplit(bestAttribute);    split.buildClassifier(data,dataZs,dataWs);    return split;  } else {    return new NoSplit(new Distribution(data));  }}  }
class C{  static void appendBytes(String content,Mode mode,BitArray bits,String encoding) throws WriterException {switch (mode) {case NUMERIC:    appendNumericBytes(content,bits);  break;case ALPHANUMERIC:appendAlphanumericBytes(content,bits);break;case BYTE:append8BitBytes(content,bits,encoding);break;case KANJI:appendKanjiBytes(content,bits);break;default :throw new WriterException("Invalid mode: " + mode);}}  }
class C{  public static Document parse(Reader reader,boolean validating,boolean namespaceAware,boolean allowDocTypeDeclaration) throws SAXException, IOException, ParserConfigurationException {  DocumentBuilderFactory factory=FactorySupport.createDocumentBuilderFactory();  factory.setNamespaceAware(namespaceAware);  factory.setValidating(validating);  setQuietly(factory,XMLConstants.FEATURE_SECURE_PROCESSING,true);  setQuietly(factory,"http://apache.org/xml/features/disallow-doctype-decl",!allowDocTypeDeclaration);  DocumentBuilder documentBuilder=factory.newDocumentBuilder();  return documentBuilder.parse(new InputSource(reader));}  }
class C{  public void writeLinkDestination(String anchor,String body) throws IOException {  startTag(A);  writeAttr(NAME,anchor);  write(body);  endTag(A);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.947 -0500",hash_original_method="4494B29E35A945C6922BB1D438D582EC",hash_generated_method="8B6A51FCB99EE75C98201BBFFB4CEC76") public static byte[] encodeBase64(byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  public static boolean hasSecurityRole(WebXml webXml,String theRoleName){  return getSecurityRole(webXml,theRoleName) != null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static void sanityCheck(){  double[] liveRatio=function[0];  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(liveRatio[1] == 0);  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(liveRatio[liveRatio.length - 1] == 1);  for (int i=2; i < liveRatio.length; i++) {    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(liveRatio[i - 1] < liveRatio[i]);    for (int j=1; j < function.length; j++) {      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(function[j][i] >= 1 || function[j][i] > liveRatio[i]);    }  }  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(function[1][0] == 0);  int len=function.length;  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(function[len - 1][0] == 1);  for (int i=2; i < len; i++) {    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(function[i - 1][0] < function[i][0]);  }  for (int i=1; i < function.length; i++) {    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(function[i - 1].length == function[i].length);  }}  }
class C{  public void testManagingDeletes() throws Exception {  for (long ver=1010; ver < 1020; ver++) {    for (    String id : new String[]{"aaa","bbb","ccc","ddd"}) {      assertU(adoc("id",id,"name","name_" + id,"my_version_l","" + ver));    }  }  assertU(adoc("id","aaa","name","name_aaa","my_version_l","1030"));  assertU(commit());  assertJQ(req("q","*:*","fq","live_b:true"),"/response/numFound==4");  assertJQ(req("q","id:aaa","fq","live_b:true","fl","id,my_version_l"),"/response/numFound==1","/response/docs==[{'id':'aaa','my_version_l':1030}]}");  deleteAndGetVersion("aaa",params("del_version","1031"));  assertU(commit());  assertJQ(req("q","*:*","fq","live_b:true"),"/response/numFound==3");  assertJQ(req("q","id:aaa","fq","live_b:true"),"/response/numFound==0");  assertJQ(req("q","id:aaa","fq","live_b:false","fq","timestamp_tdt:[* TO *]","fl","id,live_b,my_version_l"),"/response/numFound==1","/response/docs==[{'id':'aaa','my_version_l':1031,'live_b':false}]}");  assertU(adoc("id","aaa","name","XX","my_version_l","1025"));  assertU(commit());  assertJQ(req("q","id:aaa","fq","live_b:true"),"/response/numFound==0");  assertU(delQ("+live_b:false"));  assertU(commit());  assertU(adoc("id","aaa","name","aaa","my_version_l","7"));  assertU(commit());  assertJQ(req("q","id:aaa","fq","live_b:true","fl","id,live_b,my_version_l"),"/response/numFound==1","/response/docs==[{'id':'aaa','my_version_l':7,'live_b':true}]}");}  }
class C{  private boolean isDefaultDsType(final String dsTypeName){  return getCurrentDistributionSetType() != null && getCurrentDistributionSetType().getName().equals(dsTypeName);}  }
class C{  static void processEntity(String entity,IXMLReader reader,IXMLEntityResolver entityResolver) throws IOException, XMLParseException {  entity=entity.substring(1,entity.length() - 1);  Reader entityReader=entityResolver.getEntity(reader,entity);  if (entityReader == null) {    XMLUtil.errorInvalidEntity(reader.getSystemID(),reader.getLineNr(),entity);  }  boolean externalEntity=entityResolver.isExternalEntity(entity);  reader.startNewStream(entityReader,!externalEntity);}  }
class C{  private int pendChanges(final Workspace workspace,final OfflineChange[] typedChanges,final OfflineChangeType type){  if (typedChanges.length == 0) {    return 0;  }  getDisplay().printLine(type.toString() + "s:");  final OfflinePender pender=new OfflinePender(workspace,typedChanges);  return pender.pendChanges();}  }
class C{  public void clearFormData(){  throw new MustOverrideException();}  }
class C{  public int addSorted(E o){  T dl=getNewDataLine(o);  return dl == null ? -1 : add(dl,getSortedPosition(dl));}  }
class C{  public boolean mousePressed(MouseEvent e){  if (DEBUG) {    Debug.output("SMMI: mousePressed()");  }  setCurrentMouseEvent(e);  boolean ret=false;  GeometryOfInterest goi=getClickInterest();  OMGraphic omg=getGeometryUnder(e);  if (goi != null && !goi.appliesTo(omg,e)) {    if (goi.isLeftButton()) {      leftClickOff(goi.getGeometry(),e);    } else {      rightClickOff(goi.getGeometry(),e);    }    setClickInterest(null);  }  if (omg != null) {    setClickInterest(new GeometryOfInterest(omg,e));  }  ret=testForAndHandlePopupTrigger(e);  return ret && consumeEvents;}  }
class C{  public LongConverter(final Object defaultValue){  super(false,defaultValue);}  }
class C{  private Query constructServerSideQuery() throws QueryException {  GemFireCacheImpl cache=(GemFireCacheImpl)cqService.getCache();  DefaultQuery locQuery=(DefaultQuery)cache.getLocalQueryService().newQuery(this.queryString);  CompiledSelect select=locQuery.getSimpleSelect();  CompiledIteratorDef from=(CompiledIteratorDef)select.getIterators().get(0);  this.regionName=((CompiledRegion)from.getCollectionExpr()).getRegionPath();  from.setCollectionExpr(new CompiledBindArgument(1));  return locQuery;}  }
class C{  @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:42.525 -0500",hash_original_method="3A39FD94F4678FF92F02222292608085",hash_generated_method="F6C81F6D58C1DBA8A32360C2D4037BF3") public void write(byte b[]) throws IOException {  write(b,0,b.length);}  }
class C{  public PlayerTrade(Player player){  this.player=player;  this.tradeState=TradeState.NO_ACTIVE_TRADE;}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void decrypt(EncryptionKey dkey,KrbAsReq asReq) throws KrbException, Asn1Exception, IOException {  byte[] enc_as_rep_bytes=rep.encPart.decrypt(dkey,KeyUsage.KU_ENC_AS_REP_PART);  byte[] enc_as_rep_part=rep.encPart.reset(enc_as_rep_bytes);  DerValue encoding=new DerValue(enc_as_rep_part);  EncASRepPart enc_part=new EncASRepPart(encoding);  rep.encKDCRepPart=enc_part;  ASReq req=asReq.getMessage();  check(true,req,rep);  creds=new Credentials(rep.ticket,req.reqBody.cname,rep.ticket.sname,enc_part.key,enc_part.flags,enc_part.authtime,enc_part.starttime,enc_part.endtime,enc_part.renewTill,enc_part.caddr);  if (DEBUG) {    System.out.println(">>> KrbAsRep cons in KrbAsReq.getReply " + req.reqBody.cname.getNameString());  }}  }
class C{  @Override public void execute(MinecraftServer server,ICommandSender sender,String[] args) throws CommandException {  if (Tests.runTests()) {    sender.addChatMessage(new TextComponentTranslation("commands.testmod3.runtests.tests_passed"));  } else {    sender.addChatMessage(new TextComponentTranslation("commands.testmod3.runtests.tests_failed"));  }}  }
class C{  private void uncollapseAllSelected(){  for (  GraphNode master : selectedNodes.getSelectedNodes()) {    getEditor().uncollapse(master,null);  }}  }
class C{  protected ImplementationFactory(){}  }
class C{  private final void computeConcentration(){  concentration=amount * sizeFactor;}  }
class C{  protected static String sha1(String data){  try {    return new String(encodeHex(MessageDigest.getInstance("SHA-1").digest(data.getBytes("UTF-8"))));  } catch (  NoSuchAlgorithmException e) {    throw new IllegalStateException(e);  }catch (  UnsupportedEncodingException e) {    throw new IllegalStateException(e);  }}  }
class C{  Version readVersion() throws FormatException {  if (parsedVersion != null) {    return parsedVersion;  }  int dimension=bitMatrix.getHeight();  int provisionalVersion=(dimension - 17) / 4;  if (provisionalVersion <= 6) {    return Version.getVersionForNumber(provisionalVersion);  }  int versionBits=0;  int ijMin=dimension - 11;  for (int j=5; j >= 0; j--) {    for (int i=dimension - 9; i >= ijMin; i--) {      versionBits=copyBit(i,j,versionBits);    }  }  Version theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  versionBits=0;  for (int i=5; i >= 0; i--) {    for (int j=dimension - 9; j >= ijMin; j--) {      versionBits=copyBit(i,j,versionBits);    }  }  theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  throw FormatException.getFormatInstance();}  }
class C{  private static CommandLine parseCommandLine(Options options,String[] args) throws ParseException {  CommandLineParser parser=new DefaultParser();  return parser.parse(options,args,true);}  }
class C{  private static void printAclList(CalendarService service) throws ServiceException, IOException {  CalendarFeed calendarFeed=service.getFeed(metafeedUrl,CalendarFeed.class);  System.out.println("Access control lists for your calendars:");  for (  CalendarEntry calEntry : calendarFeed.getEntries()) {    Link link=calEntry.getLink(AclNamespace.LINK_REL_ACCESS_CONTROL_LIST,Link.Type.ATOM);    if (link != null) {      AclFeed aclFeed=service.getFeed(new URL(link.getHref()),AclFeed.class);      System.out.println("\tCalendar \"" + calEntry.getTitle().getPlainText() + "\":");      for (      AclEntry aclEntry : aclFeed.getEntries()) {        System.out.println("\t\tScope: Type=" + aclEntry.getScope().getType() + " ("+ aclEntry.getScope().getValue()+ ")");        System.out.println("\t\tRole: " + aclEntry.getRole().getValue());      }    }  }}  }
class C{  public final double[] toDoubleArray(double[] array,int offset,int length){  if (array == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (offset < 0) {    String msg=Logging.getMessage("generic.OffsetIsInvalid",offset);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (length < 1) {    String msg=Logging.getMessage("generic.LengthIsInvalid",length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (array.length < offset + length) {    String msg=Logging.getMessage("generic.ArrayInvalidLength",array.length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  array[offset]=this.x;  if (length > 1)   array[offset + 1]=this.y;  if (length > 2)   array[offset + 2]=this.z;  if (length > 3)   array[offset + 3]=this.w;  return array;}  }
class C{  private void changeSystemListener(int idx,@Nullable GridMessageListener lsnr){  assert Thread.holdsLock(sysLsnrsMux);  GridMessageListener[] res=new GridMessageListener[sysLsnrs.length];  System.arraycopy(sysLsnrs,0,res,0,sysLsnrs.length);  res[idx]=lsnr;  sysLsnrs=res;}  }
class C{  public static String reorderModifiers(String text,Collection<Range<Integer>> characterRanges) throws FormatterException {  JavaInput javaInput=new JavaInput(text);  if (javaInput.getTokens().isEmpty()) {    return text;  }  RangeSet<Integer> tokenRanges=javaInput.characterRangesToTokenRanges(characterRanges);  Iterator<? extends Token> it=javaInput.getTokens().iterator();  TreeRangeMap<Integer,String> replacements=TreeRangeMap.create();  while (it.hasNext()) {    Token token=it.next();    if (!tokenRanges.contains(token.getTok().getIndex())) {      continue;    }    Modifier mod=asModifier(token);    if (mod == null) {      continue;    }    List<Token> modifierTokens=new ArrayList<>();    List<Modifier> mods=new ArrayList<>();    int begin=token.getTok().getPosition();    mods.add(mod);    modifierTokens.add(token);    int end=-1;    while (it.hasNext()) {      token=it.next();      mod=asModifier(token);      if (mod == null) {        break;      }      mods.add(mod);      modifierTokens.add(token);      end=token.getTok().getPosition() + token.getTok().length();    }    if (!Ordering.natural().isOrdered(mods)) {      Collections.sort(mods);      StringBuilder replacement=new StringBuilder();      for (int i=0; i < mods.size(); i++) {        if (i > 0) {          addTrivia(replacement,modifierTokens.get(i).getToksBefore());        }        replacement.append(mods.get(i).toString());        if (i < (modifierTokens.size() - 1)) {          addTrivia(replacement,modifierTokens.get(i).getToksAfter());        }      }      replacements.put(Range.closedOpen(begin,end),replacement.toString());    }  }  return applyReplacements(javaInput.getText(),replacements);}  }
class C{  public static boolean contains(float[] array,float value){  return indexOf(array,value) != -1;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  @Override public void onViewStateRestored(@Nullable Bundle savedInstanceState){  super.onViewStateRestored(savedInstanceState);  if (savedInstanceState != null) {    mAnswerChecked=savedInstanceState.getBoolean(KEY_ANSWER_CHECKED);    if (mAnswerChecked) {      mAnswerInput.setFocusable(false);    } else {      mAnswerInput.requestFocus();    }  }  if (mAnswerChecked) {    updateViewForAnswer();  }}  }
class C{  public static boolean installBinary(Context context,int sourceId,String binaryName){  return installBinary(context,sourceId,binaryName,"700");}  }
class C{  public static byte[] toByteArray(Node node) throws IOException {  ByteArrayOutputStream rslt=new ByteArrayOutputStream();  printNode(node,new StreamResult(rslt));  return rslt.toByteArray();}  }
class C{  @VisibleForTesting static int size(final Collection<?> collection){  return collection == null ? 0 : collection.size();}  }
class C{  public Instruction locateInst(int index){  return locateInstr(index,0,icount);}  }
class C{  public DocumentFragment rtree(){  return null;}  }
class C{  public OrgDepartment(){  super(KEY);}  }
class C{  public static byte[] longToBytes(long m){  byte[] b=new byte[8];  for (int i=0; i < 8; i++) {    b[7 - i]=(byte)((m >>> 8 * i) & 0xff);  }  return b;}  }
class C{  public static String format(Date date,String ptrn){  java.text.DateFormat format=new java.text.SimpleDateFormat(ptrn);  return format.format(date);}  }
class C{  public final SecretKey generateSecret(KeySpec keySpec) throws InvalidKeySpecException {  return spiImpl.engineGenerateSecret(keySpec);}  }
class C{  protected static void unregisterHandler(FXGVersion version){  if (versionHandlers != null) {    FXGVersionHandler vHandler=versionHandlers.get(version);    if (vHandler != null) {      FXGVersion fxgVersion=vHandler.getVersion();      versionHandlers.remove(fxgVersion);    }  }}  }
class C{  public Model addRepository(Repository repository){  requireNonNull(repository,"Required not null repository");  repositories().add(repository);  if (root.hasSingleChild("repositories")) {    root.getSingleChild("repositories").appendChild(repository.asXMLElement());    repository.element=root.getLastChild();  } else {    root.insertChild(createElement("repositories",repository.asXMLElement()),beforeAnyOf("pluginRepositories","build","reporting","profiles").or(inTheEnd()));    repository.element=root.getSingleChild("repositories").getFirstChild();  }  return this;}  }
class C{  public CompilationUnitChange createChange(String name,boolean generateGroups,IProgressMonitor monitor) throws CoreException {  CompilationUnitChange cuChange=new CompilationUnitChange(name,fCu);  MultiTextEdit multiEdit=new MultiTextEdit();  cuChange.setEdit(multiEdit);  return attachChange(cuChange,generateGroups,monitor);}  }
class C{  public void close(){}  }
class C{  public BatchOperation(BatchOperationType type){  this();  setType(type);}  }
class C{  @Override protected boolean isHostOverUtilized(PowerHost host){  addHistoryEntry(host,getUtilizationThreshold());  double totalRequestedMips=0;  for (  Vm vm : host.getVmList()) {    totalRequestedMips+=vm.getCurrentRequestedTotalMips();  }  double utilization=totalRequestedMips / host.getTotalMips();  return utilization > getUtilizationThreshold();}  }
class C{  private NetworkSink createAndInitNetworkSink(Scenario scenario,CoordinateTransformation coordinateTransformation){  NetworkSink networkGenerator=new NetworkSink(scenario.getNetwork(),coordinateTransformation);  networkGenerator.setHighwayDefaults(1,"motorway",2,120.0 / 3.6,1.0,2000,true);  networkGenerator.setHighwayDefaults(1,"motorway_link",1,80.0 / 3.6,1.0,1500,true);  networkGenerator.setHighwayDefaults(2,"trunk",1,80.0 / 3.6,1.0,2000,false);  networkGenerator.setHighwayDefaults(2,"trunk_link",1,50.0 / 3.6,1.0,1500,false);  networkGenerator.setHighwayDefaults(3,"primary",1,80.0 / 3.6,1.0,1500,false);  networkGenerator.setHighwayDefaults(3,"primary_link",1,60.0 / 3.6,1.0,1500,false);  networkGenerator.setHighwayDefaults(4,"secondary",1,60.0 / 3.6,1.0,1000,false);  networkGenerator.setHighwayDefaults(5,"tertiary",1,45.0 / 3.6,1.0,600,false);  networkGenerator.setHighwayDefaults(6,"minor",1,45.0 / 3.6,1.0,600,false);  networkGenerator.setHighwayDefaults(6,"unclassified",1,45.0 / 3.6,1.0,600,false);  networkGenerator.setHighwayDefaults(6,"residential",1,30.0 / 3.6,1.0,600,false);  networkGenerator.setHighwayDefaults(6,"living_street",1,15.0 / 3.6,1.0,300,false);  return networkGenerator;}  }
class C{  private static void addDefaultProfile(SpringApplication app,SimpleCommandLinePropertySource source){  if (!source.containsProperty("spring.profiles.active") && !System.getenv().containsKey("SPRING_PROFILES_ACTIVE")) {    app.setAdditionalProfiles(Constants.SPRING_PROFILE_DEVELOPMENT);  }}  }
class C{  public static ExampleSet createExampleSet(double[][] data,int classColumn){  if (data.length == 0) {    throw new RuntimeException("ExampleSetFactory.createExampleSet(double[][], int): data matrix is not allowed to be empty.");  }  double[][] dataWithoutLabel=new double[data.length][data[0].length - 1];  double[] labels=new double[data.length];  for (int e=0; e < data.length; e++) {    int counter=0;    for (int a=0; a < data[e].length; a++) {      if (a == classColumn) {        labels[e]=data[e][a];      } else {        dataWithoutLabel[e][counter++]=data[e][a];      }    }  }  return createExampleSet(dataWithoutLabel,labels);}  }
class C{  public NodeVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=0;}  }
class C{  public WriteBuffer put(byte x){  ensureCapacity(1).put(x);  return this;}  }
class C{  @Override public void keyPressed(KeyEvent e){synchronized (keyLock) {    keysDown.add(e.getKeyCode());  }}  }
class C{  public boolean computeScrollOffset(Interpolator interpolator){  if (mFinished) {    return false;  }switch (mMode) {case SCROLL_MODE:    long time=AnimationUtils.currentAnimationTimeMillis();  final long elapsedTime=time - mStartTime;final int duration=mDuration;if (elapsedTime < duration) {final float q=interpolator.getInterpolation(elapsedTime / (float)duration);updateScroll(q);} else {finish();}break;case FLING_MODE:if (!update()) {if (!continueWhenFinished()) {finish();}}break;}return true;}  }
class C{  public void deregister(RollingStock rs){  rs.dispose();  Integer oldSize=Integer.valueOf(_hashTable.size());  _hashTable.remove(rs.getId());  firePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_hashTable.size()));}  }
class C{  public long sum(){  long sum=0L;  for (  AtomicLong value : map.values()) {    sum=sum + value.get();  }  return sum;}  }
class C{  @Override public Value concatenate(Value v){  return v;}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  public void instanceOf(final Type type){  typeInsn(Opcodes.INSTANCEOF,type);}  }
class C{  private synchronized void clearTempFiles(){  if ((tempFiles != null) && (tempFiles.size() > 0)) {    Iterator it=tempFiles.iterator();    File file=null;    while (it.hasNext()) {      file=(File)it.next();      file.delete();    }    tempFiles.clear();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  public Matrixf4x4(){  this.matrix=new float[16];  Matrix.setIdentityM(this.matrix,0);  matrixValid=true;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_FIELD_DECLARATION;}  }
class C{  private void startPrimary() throws Exception {  igfsPrimary=new IgniteFileSystem[NODES_CNT];  for (int i=0; i < NODES_CNT; i++) {    Ignite g=G.start(primaryConfiguration(i));    igfsPrimary[i]=g.fileSystem(IGFS_PRIMARY);  }}  }
class C{  public static void validateKeys(Object entity,EntityType type,ODataUri oDataUri,EntityDataModel entityDataModel) throws ODataClientException, ODataProcessorException {  final Map<String,Object> oDataUriKeyValues=asJavaMap(getEntityKeyMap(oDataUri,entityDataModel));  final Map<String,Object> keyValues=getKeyValues(entity,type);  if (oDataUriKeyValues.size() != keyValues.size()) {    throw new ODataClientException(PROCESSOR_ERROR,"Number of keys don't match");  }  for (  Map.Entry<String,Object> oDataUriEntry : oDataUriKeyValues.entrySet()) {    String oDataUriKey=oDataUriEntry.getKey();    Object value=keyValues.get(oDataUriKey);    if (value == null || !normalize(value).equals(normalize(oDataUriEntry.getValue()))) {      throw new ODataClientException(PROCESSOR_ERROR,"Key/Values in OData URI and the entity don't match");    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:20.677 -0500",hash_original_method="0410210FC7BC336B3896BEA7510AAE3D",hash_generated_method="461FAAA0F6EB5E50DABF0D6CD6054FBC") public void deferNotifyDataSetChanged(){  mDeferNotifyDataSetChanged=true;}  }
class C{  public DocumentEngine(DocAction po,String docStatus){  m_document=po;  if (docStatus != null)   m_status=docStatus;}  }
class C{  private Coordinate safeHCoordinateIntersection(Coordinate p1,Coordinate p2,Coordinate q1,Coordinate q2){  Coordinate intPt=null;  try {    intPt=HCoordinate.intersection(p1,p2,q1,q2);  } catch (  NotRepresentableException e) {    intPt=nearestEndpoint(p1,p2,q1,q2);  }  return intPt;}  }
class C{  public CursorRequestMessage(CursorRequestMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  this.cursorId=other.cursorId;  this.close=other.close;}  }
class C{  public RequestHandle put(String url,ResponseHandlerInterface responseHandler){  return put(null,url,null,responseHandler);}  }
class C{  private void checkSearch(String inputGraph,String outputGraph,IKnowledge knowledge){  if (knowledge == null) {    throw new NullPointerException();  }  Graph graph=GraphConverter.convert(inputGraph);  IndependenceTest independence=new IndTestDSep(graph);  Fci fci=new Fci(independence);  fci.setPossibleDsepSearchDone(true);  fci.setCompleteRuleSetUsed(true);  fci.setKnowledge(knowledge);  fci.setMaxPathLength(-1);  Graph resultGraph=fci.search();}  }
class C{  private void send(){  try {    while (bufferStrategy.hasNext()) {      if (!connection.isConnected()) {        return;      }      List<DefaultData> dataToSend=bufferStrategy.next();      connection.sendDataObjects(dataToSend);      sendingExceptionNotice=false;    }  } catch (  ServerUnavailableException serverUnavailableException) {    if (serverUnavailableException.isServerTimeout()) {      log.warn("Timeout on server when sending actual data. Data might be lost!",serverUnavailableException);    } else {      if (!sendingExceptionNotice) {        sendingExceptionNotice=true;        log.error("Connection problem appeared, stopping sending actual data!",serverUnavailableException);      }    }  }catch (  Throwable throwable) {    if (!sendingExceptionNotice) {      sendingExceptionNotice=true;      log.error("Connection problem appeared, stopping sending actual data!",throwable);    }  }}  }
class C{  @Override public boolean canExtractItem(int aIndex,ItemStack aStack,int aSide){  return canAccessData() && (mRunningThroughTick || !mOutputDisabled) && getCoverBehaviorAtSide((byte)aSide).letsItemsOut((byte)aSide,getCoverIDAtSide((byte)aSide),getCoverDataAtSide((byte)aSide),aIndex,this)&& mMetaTileEntity.canExtractItem(aIndex,aStack,aSide);}  }
class C{  public void removeHat(){  if (currentHat == null) {    return;  }  currentHat.clear();  currentHat=null;}  }
class C{  boolean isTailItem(Object item){  return sliceTail.item == item;}  }
class C{  void free(int pageId,boolean undo){  if (trace.isDebugEnabled()) {  }  cache.remove(pageId);  if (SysProperties.CHECK && !recoveryRunning && undo) {    if (logMode != LOG_MODE_OFF) {      log.addUndo(pageId,null);    }  }  freePage(pageId);  if (recoveryRunning) {    writePage(pageId,createData());    if (reservedPages != null && reservedPages.containsKey(pageId)) {      int latestPos=reservedPages.get(pageId);      if (latestPos > log.getLogPos()) {        allocatePage(pageId);      }    }  }}  }
class C{  private StringBuffer createReusingIndent(StringBuffer buffer,int additional){  int refLength=computeVisualLength(buffer);  int addLength=fPrefs.prefIndentationSize * additional;  int totalLength=Math.max(0,refLength + addLength);  int minLength=Math.min(totalLength,refLength);  int tabSize=fPrefs.prefTabSize;  int maxCopyLength=tabSize > 0 ? minLength - minLength % tabSize : minLength;  stripExceedingChars(buffer,maxCopyLength);  int missing=totalLength - maxCopyLength;  final int tabs, spaces;  if (!fPrefs.prefUseTabs) {    tabs=0;    spaces=missing;  } else {    tabs=tabSize > 0 ? missing / tabSize : 0;    spaces=tabSize > 0 ? missing % tabSize : missing;  }  for (int i=0; i < tabs; i++)   buffer.append('\t');  for (int i=0; i < spaces; i++)   buffer.append(' ');  return buffer;}  }
class C{  private void lazyIntermediateOperator(){  Stream<Movie> movieStream=movies.stream().filter(null).limit(2);}  }
class C{  public void receiveErrorgetSubscriptionKeysForSessionId(java.lang.Exception e){}  }
class C{  protected void dumpClusteringOutput(PrintStream writer,ResultHierarchy hierarchy,Clustering<?> c){  DBIDRange ids=null;  for (Iter<Result> iter=hierarchy.iterParents(c); iter.valid(); iter.advance()) {    Result parent=iter.get();    if (parent instanceof Relation) {      DBIDs pids=((Relation<?>)parent).getDBIDs();      if (pids instanceof DBIDRange) {        ids=(DBIDRange)pids;        break;      }      LOG.warning("Parent result " + parent.getLongName() + " has DBID type "+ pids.getClass());    }  }  if (ids == null) {    for (Iter<Result> iter=hierarchy.iterAll(); iter.valid(); iter.advance()) {      Result parent=iter.get();      if (parent instanceof Database) {        DBIDs pids=((Database)parent).getRelation(TypeUtil.ANY).getDBIDs();        if (pids instanceof DBIDRange) {          ids=(DBIDRange)pids;          break;        }        LOG.warning("Parent result " + parent.getLongName() + " has DBID type "+ pids.getClass());      }    }  }  if (ids == null) {    LOG.warning("Cannot dump cluster assignment, as I do not have a well-defined DBIDRange to use for a unique column assignment. DBIDs must be a continuous range.");    return;  }  WritableIntegerDataStore map=DataStoreUtil.makeIntegerStorage(ids,DataStoreFactory.HINT_TEMP);  int cnum=0;  for (  Cluster<?> clu : c.getAllClusters()) {    for (DBIDIter iter=clu.getIDs().iter(); iter.valid(); iter.advance()) {      map.putInt(iter,cnum);    }    ++cnum;  }  for (DBIDArrayIter iter=ids.iter(); iter.valid(); iter.advance()) {    if (iter.getOffset() > 0) {      writer.append(' ');    }    writer.append(Integer.toString(map.intValue(iter)));  }  if (forceLabel != null) {    if (forceLabel.length() > 0) {      writer.append(' ').append(forceLabel);    }  } else {    writer.append(' ').append(c.getLongName());  }  writer.append('\n');}  }
class C{  public boolean eqpref(char[] qname){  if (chars[0] == qname[0]) {    char len=chars[0];    for (char i=1; i < len; i+=1) {      if (chars[i] != qname[i]) {        return false;      }    }    return true;  }  return false;}  }
class C{  public boolean cancel(boolean force) throws UnexecutedInvokeException {  if (future == null) {    throw new UnexecutedInvokeException(this);  }  return cancel(false);}  }
class C{  protected ResultPlot createChart(String metric){  if (metric.equals("Approximation Set")) {    return new ApproximationSetPlot(this,metric);  } else {    return new LinePlot(this,metric);  }}  }
class C{  public Vector normalize(){  double denom=magnitude();  if (denom < MINIMUM_RESOLUTION)   return null;  double normFactor=1.0 / denom;  return new Vector(x * normFactor,y * normFactor,z * normFactor);}  }
class C{  public final void testWriteint01() throws IOException {  for (int k=0; k < algorithmName.length; k++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      DigestOutputStream dos=new DigestOutputStream(bos,md);      for (int i=0; i < MY_MESSAGE_LEN; i++) {        dos.write(myMessage[i]);      }      assertTrue("write",Arrays.equals(MDGoldenData.getMessage(),bos.toByteArray()));      assertTrue("update",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void testOffsetStartPointRepeatedPoint(){  runOffsetTest("LINESTRING (0 0, 10 10, 10 10, 20 20)","POINT(0 0)",1.0,"POINT (-0.7071067811865475 0.7071067811865475)");  runOffsetTest("LINESTRING (0 0, 10 10, 10 10, 20 20)","POINT(0 0)",-1.0,"POINT (0.7071067811865475 -0.7071067811865475)");  runOffsetTest("LINESTRING (0 0, 10 10, 10 10, 20 20)","POINT(10 10)",5.0,"POINT (6.464466094067262 13.535533905932738)");  runOffsetTest("LINESTRING (0 0, 10 10, 10 10, 20 20)","POINT(10 10)",-5.0,"POINT (13.535533905932738 6.464466094067262)");}  }
class C{  KeyBuilder(final int len,final byte[] buf){  this(null,len,buf);}  }
class C{  public CertificatePoliciesExtension(List<PolicyInformation> certPolicies) throws IOException {  this(Boolean.FALSE,certPolicies);}  }
class C{  public ERDEditorContextMenuProvider(ERDEditorPart editor){  super(editor.getViewer());  this.editor=editor;}  }
class C{  public HashPrintJobAttributeSet(PrintJobAttributeSet attributes){  super(attributes,PrintJobAttribute.class);}  }
class C{  public LruCachedMap(int cacheMaxSize){  super();  m_cacheMaxSize=cacheMaxSize;}  }
class C{  private Operation createDeleteOp(String service){  return Operation.createDelete(this,service).setReferer(getUri()).setCompletion(null);}  }
class C{  public Object put(Object name,Object value){  return map.put(name,value);}  }
class C{  @Override public void handleNamespace(String s,String s1) throws RDFHandlerException {}  }
class C{  public static void writePartitionAssignment(Collection<List<ClusterNode>> partitions,BinaryRawWriterEx writer,PlatformContext ctx){  assert partitions != null;  assert writer != null;  writer.writeInt(partitions.size());  for (  List<ClusterNode> part : partitions)   ctx.writeNodes(writer,part);}  }
class C{  public ParsedURL(URL url){  userAgent=getGlobalUserAgent();  data=new ParsedURLData(url);}  }
class C{  static String plurales(final String s,final int i){  return i == 1 ? "one " + s : i + " " + s+ "es";}  }
class C{  String namedForThisSegment(String file){  return name + IndexFileNames.stripSegmentName(file);}  }
class C{  private static JFreeChart createChart(){  XYSeries series1=new XYSeries("Series 1");  series1.add(1.0,1.0);  series1.add(2.0,2.0);  series1.add(3.0,3.0);  XYDataset dataset=new XYSeriesCollection(series1);  return ChartFactory.createTimeSeriesChart("XY Line Chart","Domain","Range",dataset,true,true,true);}  }
class C{  public MustMoveWithDetails(final Map<Unit,Collection<Unit>> mapping){  m_mapping=mapping;}  }
class C{  private void ensureBuilders(){  if (this.builders == null) {    this.builders=new ArrayList<SingleFieldBuilder<MType,BType,IType>>(messages.size());    for (int i=0; i < messages.size(); i++) {      builders.add(null);    }  }}  }
class C{  public boolean hasGUI(){  boolean hasGUI=false;  try {    Method guiMethod=getClass().getMethod("getGUI",(Class[])null);    hasGUI=(guiMethod.getDeclaringClass() != Layer.class);  } catch (  Exception ex) {    hasGUI=getGUI() != null;  }  return hasGUI;}  }
class C{  boolean canKill(){  if (entries.size() < 2) {    return false;  }  int notdead=0;  for (int i=entries.size() - 1; i >= 0; i--) {    if (!entries.get(i).dead) {      notdead++;    }    if (notdead > 1) {      return true;    }  }  return false;}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  public DefaultTerminalFactory(){  this(DEFAULT_OUTPUT_STREAM,DEFAULT_INPUT_STREAM,DEFAULT_CHARSET);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.475 -0400",hash_original_method="27CCA45322132EC040C5AEC325BA1F4E",hash_generated_method="07261FA6DABCAB4D36015D5D831B194B") protected HiddenFileFilter(){}  }
class C{  public ExpandAnimation(View view,int duration){  setDuration(duration);  mAnimatedView=view;  mViewLayoutParams=(LayoutParams)view.getLayoutParams();  mIsVisibleAfter=(view.getVisibility() == View.VISIBLE);  mMarginStart=mViewLayoutParams.bottomMargin;  mMarginEnd=(mMarginStart == 0 ? (0 - view.getHeight()) : 0);  view.setVisibility(View.VISIBLE);}  }
class C{  public void newOperator(EditorState editorState,char op){  MetaCharacter meta=metaModel.getOperator("" + op);  newCharacter(editorState,meta);}  }
class C{  public FirewallRule(){  this.dpid=DatapathId.NONE;  this.in_port=OFPort.ANY;  this.dl_src=MacAddress.NONE;  this.dl_dst=MacAddress.NONE;  this.dl_type=EthType.NONE;  this.nw_src_prefix_and_mask=IPv4AddressWithMask.NONE;  this.nw_dst_prefix_and_mask=IPv4AddressWithMask.NONE;  this.nw_proto=IpProtocol.NONE;  this.tp_src=TransportPort.NONE;  this.tp_dst=TransportPort.NONE;  this.any_dpid=true;  this.any_in_port=true;  this.any_dl_src=true;  this.any_dl_dst=true;  this.any_dl_type=true;  this.any_nw_src=true;  this.any_nw_dst=true;  this.any_nw_proto=true;  this.any_tp_src=true;  this.any_tp_dst=true;  this.priority=0;  this.action=FirewallAction.ALLOW;  this.ruleid=0;}  }
class C{  public boolean next() throws EOFException {  if (limit >= fileSize) {    throw new EOFException("End of file was reached");  }  if (mem.getLongVolatile(Structure.Limit) <= limit) {    return false;  }  byte commit=mem.getByteVolatile(limit);  byte rollback=mem.getByteVolatile(limit + Length.Commit);  if (rollback == Rollback.Set) {    limit+=Length.RecordHeader + recordSize;    timeoutCounter=0;    timerStart=0;    return false;  }  if (commit == Commit.Set) {    timeoutCounter=0;    timerStart=0;    return true;  }  timeoutCounter++;  if (timeoutCounter >= MAX_TIMEOUT_COUNT) {    if (timerStart == 0) {      timerStart=System.currentTimeMillis();    } else {      if (System.currentTimeMillis() - timerStart >= maxTimeout) {        mem.putByteVolatile(limit + Length.Commit,Rollback.Set);        limit+=Length.RecordHeader + recordSize;        timeoutCounter=0;        timerStart=0;        return false;      }    }  }  return false;}  }
class C{  public Extensions generate(){  Extension[] exts=new Extension[extOrdering.size()];  for (int i=0; i != extOrdering.size(); i++) {    exts[i]=(Extension)extensions.get(extOrdering.elementAt(i));  }  return new Extensions(exts);}  }
class C{  public static String parseDate(String isoDate){  try {    String[] parts=isoDate.split("-");    String year=parts[0];    String month=parts[1];    String dayTemp=parts[2];    String[] parts2=dayTemp.split(" ");    String day=parts2[0].trim();    if (day.length() > 2)     throw new RuntimeException("String with day number unexpected length.");    return day + "." + month+ "."+ year;  } catch (  Exception e) {    Timber.e(e,"Parsing order date created failed.");    return isoDate;  }}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  @Override public void emit(HashMap<K,ArrayList<V>> tuple){  top.emit(tuple);}  }
class C{  public Iterator<TColor> iterator(){  return colors.iterator();}  }
class C{  public boolean intersects(Sector that){  if (that == null)   return false;  if (that.maxLongitude.degrees < this.minLongitude.degrees)   return false;  if (that.minLongitude.degrees > this.maxLongitude.degrees)   return false;  if (that.maxLatitude.degrees < this.minLatitude.degrees)   return false;  if (that.minLatitude.degrees > this.maxLatitude.degrees)   return false;  return true;}  }
class C{  @Dev public DropInfostringItemAction(final String itemName,@Dev(defaultValue="1") final int amount,final String infostring){  this.itemName=checkNotNull(itemName);  this.amount=amount;  this.infostring=checkNotNull(infostring);}  }
class C{  private void executeBadgeByContentProvider(Context context,ComponentName componentName,int badgeCount){  if (badgeCount < 0) {    return;  }  if (mQueryHandler == null) {    mQueryHandler=new AsyncQueryHandler(context.getApplicationContext().getContentResolver()){    };  }  insertBadgeAsync(badgeCount,componentName.getPackageName(),componentName.getClassName());}  }
class C{  @Override public synchronized void acceptTestSet(TestSetEvent e){  if (m_reject) {    if (m_log != null) {      m_log.statusMessage(statusMessagePrefix() + "BUSY. Can't accept data " + "at this time.");      m_log.logMessage("[Classifier] " + statusMessagePrefix() + " BUSY. Can't accept data at this time.");    }    return;  }  Instances testSet=e.getTestSet();  if (testSet != null) {    if (testSet.classIndex() < 0) {      stop();      String errorMessage=statusMessagePrefix() + "ERROR: no class attribute set in test data!";      if (m_log != null) {        m_log.statusMessage(errorMessage);        m_log.logMessage("[Classifier] " + errorMessage);      } else {        System.err.println("[Classifier] " + errorMessage);      }      return;    }  }  if (m_loadModelFileName != null && m_loadModelFileName.length() > 0 && m_state == IDLE && !m_listenees.containsKey("trainingSet") && e.getMaxRunNumber() == 1 && e.getMaxSetNumber() == 1) {    String resolvedFileName=m_loadModelFileName;    if (m_env != null) {      try {        resolvedFileName=m_env.substitute(resolvedFileName);      } catch (      Exception ex) {      }    }    File loadFrom=new File(resolvedFileName);    try {      loadFromFile(loadFrom);    } catch (    Exception ex) {      stop();      m_log.statusMessage(statusMessagePrefix() + "ERROR: unable to load " + "model (see log).");      m_log.logMessage("[Classifier] " + statusMessagePrefix() + "Problem loading classifier. "+ ex.getMessage());      return;    }  }  weka.classifiers.Classifier classifierToUse=m_Classifier;  if (classifierToUse != null && m_state == IDLE && (!m_listenees.containsKey("trainingSet"))) {    if (e.getTestSet() != null && e.isStructureOnly()) {      return;    }    if (classifierToUse instanceof EnvironmentHandler && m_env != null) {      ((EnvironmentHandler)classifierToUse).setEnvironment(m_env);    }    if (classifierToUse instanceof weka.classifiers.misc.InputMappedClassifier) {      try {        m_trainingSet=((weka.classifiers.misc.InputMappedClassifier)classifierToUse).getModelHeader(m_trainingSet);      } catch (      Exception e1) {        e1.printStackTrace();      }    }    if (m_trainingSet == null) {      stop();      String errorMessage=statusMessagePrefix() + "ERROR: no trained/loaded classifier to use for prediction!";      if (m_log != null) {        m_log.statusMessage(errorMessage);        m_log.logMessage("[Classifier] " + errorMessage);      } else {        System.err.println("[Classifier] " + errorMessage);      }      return;    }    testSet=e.getTestSet();    if (e.getRunNumber() == 1 && e.getSetNumber() == 1) {      m_currentBatchIdentifier=new Date();    }    if (testSet != null) {      if (!m_trainingSet.equalHeaders(testSet) && !(classifierToUse instanceof weka.classifiers.misc.InputMappedClassifier)) {        boolean wrapClassifier=false;        if (!Utils.getDontShowDialog("weka.gui.beans.Classifier.AutoWrapInInputMappedClassifier")) {          if (!GraphicsEnvironment.isHeadless()) {            JCheckBox dontShow=new JCheckBox("Do not show this message again");            Object[] stuff=new Object[2];            stuff[0]="Data used to train model and test set are not compatible.\n" + "Would you like to automatically wrap the classifier in\n" + "an \"InputMappedClassifier\" before proceeding?.\n";            stuff[1]=dontShow;            int result=JOptionPane.showConfirmDialog(this,stuff,"KnowledgeFlow:Classifier",JOptionPane.YES_OPTION);            if (result == JOptionPane.YES_OPTION) {              wrapClassifier=true;            }            if (dontShow.isSelected()) {              String response=(wrapClassifier) ? "yes" : "no";              try {                Utils.setDontShowDialogResponse("weka.gui.explorer.ClassifierPanel.AutoWrapInInputMappedClassifier",response);              } catch (              Exception e1) {                e1.printStackTrace();              }            }          } else {            wrapClassifier=true;          }        } else {          String response;          try {            response=Utils.getDontShowDialogResponse("weka.gui.explorer.ClassifierPanel.AutoWrapInInputMappedClassifier");            if (response != null && response.equalsIgnoreCase("yes")) {              wrapClassifier=true;            }          } catch (          Exception e1) {            e1.printStackTrace();          }        }        if (wrapClassifier) {          weka.classifiers.misc.InputMappedClassifier temp=new weka.classifiers.misc.InputMappedClassifier();          temp.setClassifier(classifierToUse);          temp.setModelHeader(new Instances(m_trainingSet,0));          classifierToUse=temp;        }      }      if (m_trainingSet.equalHeaders(testSet) || (classifierToUse instanceof weka.classifiers.misc.InputMappedClassifier)) {        BatchClassifierEvent ce=new BatchClassifierEvent(this,classifierToUse,new DataSetEvent(this,m_trainingSet),new DataSetEvent(this,e.getTestSet()),e.getRunNumber(),e.getMaxRunNumber(),e.getSetNumber(),e.getMaxSetNumber());        ce.setGroupIdentifier(m_currentBatchIdentifier.getTime());        ce.setLabel(getCustomName());        if (m_log != null && !e.isStructureOnly()) {          m_log.statusMessage(statusMessagePrefix() + "Finished.");        }        m_batchStarted=false;        notifyBatchClassifierListeners(ce);      } else {        if (testSet.numInstances() > 0) {          if (testSet.classIndex() == m_trainingSet.classIndex() && testSet.attributeStats(testSet.classIndex()).missingCount == testSet.numInstances()) {            boolean ok=true;            for (int i=0; i < testSet.numAttributes(); i++) {              if (i != testSet.classIndex()) {                ok=testSet.attribute(i).equals(m_trainingSet.attribute(i));                if (!ok) {                  break;                }              }            }            if (ok) {              BatchClassifierEvent ce=new BatchClassifierEvent(this,classifierToUse,new DataSetEvent(this,m_trainingSet),new DataSetEvent(this,e.getTestSet()),e.getRunNumber(),e.getMaxRunNumber(),e.getSetNumber(),e.getMaxSetNumber());              ce.setGroupIdentifier(m_currentBatchIdentifier.getTime());              ce.setLabel(getCustomName());              if (m_log != null && !e.isStructureOnly()) {                m_log.statusMessage(statusMessagePrefix() + "Finished.");              }              m_batchStarted=false;              notifyBatchClassifierListeners(ce);            } else {              stop();              String errorMessage=statusMessagePrefix() + "ERROR: structure of training and test sets is not compatible!";              if (m_log != null) {                m_log.statusMessage(errorMessage);                m_log.logMessage("[Classifier] " + errorMessage);              } else {                System.err.println("[Classifier] " + errorMessage);              }            }          }        }      }    }  } else {    if (e.getRunNumber() == 1 && e.getSetNumber() == 1) {      if (!m_batchStarted) {        m_outputQueues=new BatchClassifierEvent[e.getMaxRunNumber()][e.getMaxSetNumber()];        m_completedSets=new boolean[e.getMaxRunNumber()][e.getMaxSetNumber()];        m_currentBatchIdentifier=new Date();        m_batchStarted=true;      }    }    if (m_outputQueues[e.getRunNumber() - 1][e.getSetNumber() - 1] == null) {      if (!e.isStructureOnly()) {        m_outputQueues[e.getRunNumber() - 1][e.getSetNumber() - 1]=new BatchClassifierEvent(this,null,null,new DataSetEvent(this,e.getTestSet()),e.getRunNumber(),e.getMaxRunNumber(),e.getSetNumber(),e.getMaxSetNumber());        m_outputQueues[e.getRunNumber() - 1][e.getSetNumber() - 1].setLabel(getCustomName());        if (e.getRunNumber() == e.getMaxRunNumber() && e.getSetNumber() == e.getMaxSetNumber()) {          if (e.getMaxSetNumber() != 1) {            m_reject=true;            if (m_block) {              block(true);            }          }        }      }    } else {      m_outputQueues[e.getRunNumber() - 1][e.getSetNumber() - 1].setTestSet(new DataSetEvent(this,e.getTestSet()));      checkCompletedRun(e.getRunNumber(),e.getMaxRunNumber(),e.getMaxSetNumber());    }  }}  }
class C{  public byte[] loadFileFromCache(final String urlString){  final String fileName=ResourceLoader.getNormalizedFileName(urlString);  final File file=getCacheFile(fileName);  if (file.exists()) {    final byte[] bytes=DSSUtils.toByteArray(file);    return bytes;  }  return null;}  }
class C{  public static void writeCharArray(String filename,char[] chars){  BinaryOut out=new BinaryOut(filename);  for (  char c : chars) {    out.write(c);  }  out.close();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildMcPegleg(zone);}  }
class C{  public boolean replanFutureLegRoute(Leg leg,Person person){  return relocateFutureLegRoute(leg,leg.getRoute().getStartLinkId(),leg.getRoute().getEndLinkId(),person);}  }
class C{  Node createDestructuringAssignment(int type,Node left,Node right){  String tempName=currentScriptOrFn.getNextTempName();  Node result=destructuringAssignmentHelper(type,left,right,tempName);  Node comma=result.getLastChild();  comma.addChildToBack(createName(tempName));  return result;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public void processingInstruction(String target,String data) throws org.xml.sax.SAXException {  append(m_doc.createProcessingInstruction(target,data));}  }
class C{  public ArrayDeque(Collection<? extends E> c){  allocateElements(c.size());  addAll(c);}  }
class C{  public AttributeSet addAttribute(AttributeSet old,Object key,Object value){  if (css == null) {    css=new CSS();  }  if (key instanceof StyleConstants) {    HTML.Tag tag=HTML.getTagForStyleConstantsKey((StyleConstants)key);    if (tag != null && old.isDefined(tag)) {      old=removeAttribute(old,tag);    }    Object cssValue=css.styleConstantsValueToCSSValue((StyleConstants)key,value);    if (cssValue != null) {      Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);      if (cssKey != null) {        return super.addAttribute(old,cssKey,cssValue);      }    }  }  return super.addAttribute(old,key,value);}  }
class C{  public void xMidYMax() throws ParseException {  align=SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMAX;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void putChar(String key,char value){  unparcel();  mMap.put(key,value);}  }
class C{  public static URIName nameConstraint(DerValue value) throws IOException {  URI uri;  String name=value.getIA5String();  try {    uri=new URI(name);  } catch (  URISyntaxException use) {    throw new IOException("invalid URI name constraint:" + name,use);  }  if (uri.getScheme() == null) {    String host=uri.getSchemeSpecificPart();    try {      DNSName hostDNS;      if (host.startsWith(".")) {        hostDNS=new DNSName(host.substring(1));      } else {        hostDNS=new DNSName(host);      }      return new URIName(uri,host,hostDNS);    } catch (    IOException ioe) {      throw new IOException("invalid URI name constraint:" + name,ioe);    }  } else {    throw new IOException("invalid URI name constraint (should not " + "include scheme):" + name);  }}  }
class C{  public ObjectFactory(){}  }
class C{  protected ArtilleryBayWeaponIndirectFireHandler(){  super();}  }
class C{  public String write(Short value){  return value.toString();}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public boolean findAugmentingPath(int source,int sink){  for (int i=0; i < n; i++) {    visited[i]=0;  }  queue[0]=source;  int head=0, tail=1;  previous[source]=-1;  visited[source]=1;  while (head != tail) {    int u=queue[head];    head=(head + 1) % QUEUE_SIZE;    visited[u]=2;    for (int v=0; v < n; v++) {      if (v == u)       continue;      if (visited[v] != 0)       continue;      if (capacity[u][v] > flow[u][v]) {        queue[tail]=v;        tail=(tail + 1) % QUEUE_SIZE;        visited[v]=1;        previous[v]=u;      }    }  }  return visited[sink] != 0;}  }
class C{  public void register(){  if (isStarted) {    log.info("Coordinator stream partition {} has already been registered. Skipping.",coordinatorSystemStreamPartition);    return;  }  log.debug("Attempting to register: {}",coordinatorSystemStreamPartition);  Set<String> streamNames=new HashSet<String>();  String streamName=coordinatorSystemStreamPartition.getStream();  streamNames.add(streamName);  Map<String,SystemStreamMetadata> systemStreamMetadataMap=systemAdmin.getSystemStreamMetadata(streamNames);  log.info(String.format("Got metadata %s",systemStreamMetadataMap.toString()));  if (systemStreamMetadataMap == null) {    throw new SamzaException("Received a null systemStreamMetadataMap from the systemAdmin. This is illegal.");  }  SystemStreamMetadata systemStreamMetadata=systemStreamMetadataMap.get(streamName);  if (systemStreamMetadata == null) {    throw new SamzaException("Expected " + streamName + " to be in system stream metadata.");  }  SystemStreamPartitionMetadata systemStreamPartitionMetadata=systemStreamMetadata.getSystemStreamPartitionMetadata().get(coordinatorSystemStreamPartition.getPartition());  if (systemStreamPartitionMetadata == null) {    throw new SamzaException("Expected metadata for " + coordinatorSystemStreamPartition + " to exist.");  }  String startingOffset=systemStreamPartitionMetadata.getOldestOffset();  log.debug("Registering {} with offset {}",coordinatorSystemStreamPartition,startingOffset);  systemConsumer.register(coordinatorSystemStreamPartition,startingOffset);}  }
class C{  public static boolean isCheckedException(Throwable ex){  return !(ex instanceof RuntimeException || ex instanceof Error);}  }
class C{  private void adaptHelperText(final float score){  if (!helperTexts.isEmpty()) {    CharSequence helperText=getHelperText(score);    if (helperText != null) {      int color=getHelperTextColor(score);      helperText="<font color=\"" + color + "\">"+ helperText+ "</font>";      String prefix=getPasswordVerificationPrefix();      if (prefix != null) {        prefix="<font color=\"" + regularHelperTextColor + "\">"+ prefix+ ": </font>";      } else {        prefix="";      }      setHelperText(Html.fromHtml(prefix + helperText));    } else {      setHelperText(regularHelperText);    }  } else {    setHelperText(regularHelperText);  }}  }
class C{  public final void unconsultStream(final String strStreamName){  unconsultFile(strStreamName);}  }
class C{  public static void anexarFicherosHitoActual(FicherosHito ficheros,String entidad) throws ConsultaExcepcion {  try {    for (int a=0; a < ficheros.size(); a++) {      FicheroHitoImpl fichero=(FicheroHitoImpl)ficheros.get(a);      FicheroHitoDatos ficheroDatos=new FicheroHitoDatos(fichero);      ficheroDatos.nuevo(entidad);    }  } catch (  ConsultaExcepcion ce) {    logger.error("Error al anexar documentos a hito [anexarFicherosHitoActual][ConsultaExcepcion]",ce.fillInStackTrace());    throw ce;  }catch (  Exception e) {    logger.error("Error al anexar documentos a hito [anexarFicherosHitoActual][Excepcion]",e.fillInStackTrace());    throw new ConsultaExcepcion(ConsultaCodigosError.EC_ANEXAR_DOCUMENTO_HITO_ESTADO,e.getCause());  }}  }
class C{  public boolean buildFullUrl(Appendable buffer,String url,boolean useSSL) throws WebAppConfigurationException, IOException {  boolean makeSecure=buildHostPart(buffer,url,useSSL);  buildPathPart(buffer,url);  return makeSecure;}  }
class C{  public synchronized int allocateObjectId(){  int i=objectIds.nextClearBit(0);  objectIds.set(i);  return i;}  }
class C{  private List<String> missingFood(final Player player,final boolean hash){  final List<String> result=new LinkedList<String>();  String doneText=player.getQuest(QUEST_SLOT);  if (doneText == null) {    doneText="";  }  final List<String> done=Arrays.asList(doneText.split(";"));  for (  String ingredient : NEEDED_FOOD) {    if (!done.contains(ingredient)) {      if (hash) {        ingredient="#" + ingredient;      }      result.add(ingredient);    }  }  return result;}  }
class C{  public LogFileParser(String logFileName,BufferedReader br){  this(logFileName,br,false,false);}  }
class C{  private char readEscapeCharacter() throws IOException {  if (pos == limit && !fillBuffer(1)) {    throw syntaxError("Unterminated escape sequence");  }  char escaped=buffer[pos++];switch (escaped) {case 'u':    if (pos + 4 > limit && !fillBuffer(4)) {      throw syntaxError("Unterminated escape sequence");    }  char result=0;for (int i=pos, end=i + 4; i < end; i++) {  char c=buffer[i];  result<<=4;  if (c >= '0' && c <= '9') {    result+=(c - '0');  } else   if (c >= 'a' && c <= 'f') {    result+=(c - 'a' + 10);  } else   if (c >= 'A' && c <= 'F') {    result+=(c - 'A' + 10);  } else {    throw new NumberFormatException("\\u" + new String(buffer,pos,4));  }}pos+=4;return result;case 't':return '\t';case 'b':return '\b';case 'n':return '\n';case 'r':return '\r';case 'f':return '\f';case '\n':lineNumber++;lineStart=pos;case '\'':case '"':case '\\':case '/':return escaped;default :throw syntaxError("Invalid escape sequence");}}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createMessage(XSLTErrorResources.ER_ONE_OR_TWO,null));}  }
class C{  protected int insertionIndex(long val){  Object[] values=_values;  long[] set=_set;  int length=set.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (isFree(values,index)) {    return index;  }  if (isFull(values,index) && set[index] == val) {    return -index - 1;  }  int probe=1 + (hash % (length - 2));  int firstRemoved=isRemoved(values,index) ? index : -1;  do {    index-=probe;    if (index < 0) {      index+=length;    }    if (firstRemoved == -1 && isRemoved(values,index)) {      firstRemoved=index;    }  } while (isFull(values,index) && set[index] != val);  if (isRemoved(values,index)) {    while (!isFree(values,index) && (isRemoved(values,index) || set[index] != val)) {      index-=probe;      if (index < 0) {        index+=length;      }    }  }  if (isFull(values,index)) {    return -index - 1;  }  return firstRemoved == -1 ? index : firstRemoved;}  }
class C{  public void assertCastable(Type s,Type t){  assertCastable(s,t,true);}  }
class C{  public boolean isAggregationPacket(){  return decodeNalUnitType == NalUnitType.STAP_A || decodeNalUnitType == NalUnitType.STAP_B || decodeNalUnitType == NalUnitType.MTAP16 || decodeNalUnitType == NalUnitType.MTAP24;}  }
class C{  public Matrix3d(){  this.m00=0.0;  this.m01=0.0;  this.m02=0.0;  this.m10=0.0;  this.m11=0.0;  this.m12=0.0;  this.m20=0.0;  this.m21=0.0;  this.m22=0.0;}  }
class C{  public Invariant_ createInvariant_(){  Invariant_Impl invariant_=new Invariant_Impl();  return invariant_;}  }
class C{  public static int deleteOldSMS(){  long olderthan=System.currentTimeMillis() - OLD_SMS_THRESHOLD;  return database.delete(DatabaseOpenHelper.SMS_TABLE_NAME,"date < " + olderthan,null);}  }
class C{  public static void main(String args[]){  String path=TempDirectoryUtil.createCustomTempDirectory("tmp");  CreateTestMATSimConfig testConfig=new CreateTestMATSimConfig(COLD_START,path);  String matsimConfiFile=testConfig.generateConfigV3();}  }
class C{  public void add(CandleItem candleItem,boolean notify){  if (!this.isEmpty()) {    CandleItem item0=(CandleItem)this.getDataItem(0);    if (!candleItem.getPeriod().getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(candleItem,notify);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSize1=3;  int filterSize2=3;  double n;  double sum;  int[] dX1;  int[] dX2;  int[] dY1;  int[] dY2;  double[] weights1;  double[] weights2;  int midPoint;  int numPixelsInFilter1;  int numPixelsInFilter2;  boolean reflectAtBorders=false;  double sigma1=0;  double sigma2=0;  double recipRoot2PiTimesSigma1;  double recipRoot2PiTimesSigma2;  double twoSigmaSqr1;  double twoSigmaSqr2;  double zN, zFinal_1, zFinal_2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      sigma1=Double.parseDouble(args[i]);    } else     if (i == 3) {      sigma2=Double.parseDouble(args[i]);    } else     if (i == 4) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (sigma1 < 0.5) {    sigma1=0.5;  } else   if (sigma1 > 20) {    sigma1=20;  }  if (sigma2 < 0.5) {    sigma2=0.5;  } else   if (sigma2 > 20) {    sigma2=20;  }  if (sigma1 == sigma2) {    showFeedback("The two standard deviations cannot be equal.");    return;  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    recipRoot2PiTimesSigma1=1 / (Math.sqrt(2 * Math.PI) * sigma1);    twoSigmaSqr1=2 * sigma1 * sigma1;    recipRoot2PiTimesSigma2=1 / (Math.sqrt(2 * Math.PI) * sigma2);    twoSigmaSqr2=2 * sigma2 * sigma2;    double weight;    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigma1 * Math.exp(-1 * (i * i) / twoSigmaSqr1);      if (weight <= 0.001) {        filterSize1=i * 2 + 1;        break;      }    }    if (filterSize1 % 2 == 0) {      filterSize1++;    }    if (filterSize1 < 3) {      filterSize1=3;    }    numPixelsInFilter1=filterSize1 * filterSize1;    dX1=new int[numPixelsInFilter1];    dY1=new int[numPixelsInFilter1];    weights1=new double[numPixelsInFilter1];    midPoint=(int)Math.floor(filterSize1 / 2) + 1;    a=0;    for (row=0; row < filterSize1; row++) {      for (col=0; col < filterSize1; col++) {        x=col - midPoint;        y=row - midPoint;        dX1[a]=x;        dY1[a]=y;        weight=recipRoot2PiTimesSigma1 * Math.exp(-1 * (x * x + y * y) / twoSigmaSqr1);        weights1[a]=weight;        a++;      }    }    for (int i=0; i <= 250; i++) {      weight=recipRoot2PiTimesSigma2 * Math.exp(-1 * (i * i) / twoSigmaSqr2);      if (weight <= 0.001) {        filterSize2=i * 2 + 1;        break;      }    }    if (filterSize2 % 2 == 0) {      filterSize2++;    }    if (filterSize2 < 3) {      filterSize2=3;    }    numPixelsInFilter2=filterSize2 * filterSize2;    dX2=new int[numPixelsInFilter2];    dY2=new int[numPixelsInFilter2];    weights2=new double[numPixelsInFilter2];    midPoint=(int)Math.floor(filterSize2 / 2) + 1;    a=0;    for (row=0; row < filterSize2; row++) {      for (col=0; col < filterSize2; col++) {        x=col - midPoint;        y=row - midPoint;        dX2[a]=x;        dY2[a]=y;        weight=recipRoot2PiTimesSigma2 * Math.exp(-1 * (x * x + y * y) / twoSigmaSqr2);        weights2[a]=weight;        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          sum=0;          zFinal_1=0;          for (a=0; a < numPixelsInFilter1; a++) {            x=col + dX1[a];            y=row + dY1[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights1[a];              zFinal_1+=weights1[a] * zN;            }          }          zFinal_1=zFinal_1 / sum;          sum=0;          zFinal_2=0;          for (a=0; a < numPixelsInFilter2; a++) {            x=col + dX2[a];            y=row + dY2[a];            zN=inputFile.getValue(y,x);            if (zN != noData) {              sum+=weights2[a];              zFinal_2+=weights2[a] * zN;            }          }          zFinal_2=zFinal_2 / sum;          outputFile.setValue(row,col,zFinal_1 - zFinal_2);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void orWith(OrCondition other){  children.addAll(other.getAndTerms());}  }
class C{  public CloseableAnimatedBitmap(List<Bitmap> bitmaps,List<Integer> durations,ResourceReleaser<Bitmap> resourceReleaser){  Preconditions.checkNotNull(bitmaps);  Preconditions.checkState(bitmaps.size() >= 1,"Need at least 1 frame!");  mBitmaps=new ArrayList<>(bitmaps.size());  mBitmapReferences=new ArrayList<>(bitmaps.size());  for (  Bitmap bitmap : bitmaps) {    mBitmapReferences.add(CloseableReference.of(bitmap,resourceReleaser));    mBitmaps.add(bitmap);  }  mDurations=Preconditions.checkNotNull(durations);  Preconditions.checkState(mDurations.size() == mBitmaps.size(),"Arrays length mismatch!");}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,double eccentricity,double angle){  this(focalPoint,periapsis,Vector3.getAxisVector(Axis.Y),eccentricity,angle);}  }
class C{  void enablePoll(){  pollDisabled.set(false);  LOG.info("inside enable poll, value of pollDisabled = " + pollDisabled);}  }
class C{  public ShowWeightMatrixAction(final NetworkPanel networkPanel){  super(networkPanel,"Display / Edit Weight Matrix...",EnablingCondition.SOURCE_AND_TARGET_NEURONS);  putValue(SMALL_ICON,ResourceManager.getImageIcon("grid.png"));  putValue(SHORT_DESCRIPTION,"Show a weight matrix connecting source neurons (adorned with red squares) and target neurons (regular green selection)");}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int x=0; x < this.getSeriesCount(); x++) {    MoneyFlowIndexSeries series=this.getSeries(x);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  public PercentEscaper(String safeChars,boolean plusForSpace){  if (safeChars.matches(".*[0-9A-Za-z].*")) {    throw new IllegalArgumentException("Alphanumeric characters are always 'safe' and should not be " + "explicitly specified");  }  if (plusForSpace && safeChars.contains(" ")) {    throw new IllegalArgumentException("plusForSpace cannot be specified when space is a 'safe' character");  }  if (safeChars.contains("%")) {    throw new IllegalArgumentException("The '%' character cannot be specified as 'safe'");  }  this.plusForSpace=plusForSpace;  safeOctets=createSafeOctets(safeChars);}  }
class C{  public synchronized void deleteObservers(){  observers.clear();}  }
class C{  public static void updatePortAssociations(NetworkLite network,List<StoragePort> ports,DbClient dbClient){  Set<String> varraySet=new HashSet<String>(network.getAssignedVirtualArrays());  for (  StoragePort port : ports) {    port.setNetwork(network.getId());    port.replaceConnectedVirtualArray(varraySet);    _log.info("Setting the connected virtual arrays for added port {} to {}",port.getPortNetworkId(),varraySet);  }  dbClient.updateAndReindexObject(ports);}  }
class C{  public boolean isSuccessful(){  return success;}  }
class C{  public AnnotatingGraphMousePlugin(RenderContext<V,E> rc){  this(rc,InputEvent.BUTTON1_MASK,InputEvent.BUTTON1_MASK | InputEvent.SHIFT_MASK);}  }
class C{  public TraxSource(final Object source){  super(new InputSource());  setSource(source);}  }
class C{  public void partVisible(final IWorkbenchPartReference partRef){  final IWorkbenchPart part=partRef.getPart(false);  if (part != null && part instanceof ModelEditor) {    final ModelEditor editor=(ModelEditor)part;    TLCModelLaunchDataProvider provider=null;    final Model model=editor.getModel();    if (model.isOriginalTraceShown()) {      provider=TLCOutputSourceRegistry.getModelCheckSourceRegistry().getProvider(model);    } else {      provider=TLCOutputSourceRegistry.getTraceExploreSourceRegistry().getProvider(model);    }    final TLCErrorView errorView=(TLCErrorView)UIHelper.findView(TLCErrorView.ID);    if (errorView != null && provider != null) {      if (provider.getErrors().size() > 0) {        TLCErrorView.updateErrorView(model,!UIHelper.isInSameStack(editor,TLCErrorView.ID));      } else {        errorView.clear();      }    }  }}  }
class C{  private static void addDigest(MessageDigest digest,int v){  digest.update((byte)(v >> 24));  digest.update((byte)(v >> 16));  digest.update((byte)(v >> 8));  digest.update((byte)v);}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  private boolean isAtEndOfFile(BufferedReader bufferedReader) throws IOException {  bufferedReader.mark(MAX_LOOKAHEAD);  StreamTokenizer tokenizer=new StreamTokenizer(bufferedReader);  int type=tokenizer.nextToken();  if (type == StreamTokenizer.TT_EOF) {    return true;  }  bufferedReader.reset();  return false;}  }
class C{  private static void sendViaCallback(AmazonKinesis producer,String streamName,RecordAggregator aggregator){  aggregator.onRecordComplete(null);  System.out.println("Creating " + ProducerConfig.RECORDS_TO_TRANSMIT + " records...");  for (int i=1; i <= ProducerConfig.RECORDS_TO_TRANSMIT; i++) {    String pk=ProducerUtils.randomPartitionKey();    String ehk=ProducerUtils.randomExplicitHashKey();    byte[] data=ProducerUtils.randomData(i,ProducerConfig.RECORD_SIZE_BYTES);    aggregator.addUserRecord(pk,ehk,data);  }  flushAndFinish(producer,streamName,aggregator);}  }
class C{  public boolean isExactMatch(String otherType) throws IllegalArgumentException {  return isExactMatch(new MIMEType(otherType),true);}  }
class C{  protected boolean[] canHandleNClasses(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int numClasses){  print("more than two class problems");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,Attribute.NOMINAL);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("number");  accepts.add("class");  int numTrain=getNumInstances(), missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,Attribute.NOMINAL,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  @Override synchronized void doClose(){  closeAllConnections();}  }
class C{  @Override public String validate(Player player,RPAction action,ActionData data){  String playerName=action.get(targetAttribute);  Player targetPlayer=SingletonRepository.getRuleProcessor().getPlayer(playerName);  if ((targetPlayer == null) || (targetPlayer.isGhost() && (player.getAdminLevel() < AdministrationAction.getLevelForCommand("ghostmode")))) {    String error="No player named " + playerName + " is currently active.";    if (tellAboutPostman) {      error=error + " Please use postman to send a message to " + playerName;    }    return error;  }  return null;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (query == null || query.trim().length() == 0)   errors.add("query",new ActionMessage("errors.generic","Invalid value for query"));  return errors;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public void write(byte[] buf,int offset,int byteCount) throws IOException {  BlockGuard.getThreadPolicy().onNetwork();synchronized (writeLock) {    checkOpen();    Arrays.checkOffsetAndCount(buf.length,offset,byteCount);    if (byteCount == 0) {      return;    }    NativeCrypto.SSL_write(sslNativePointer,socket.getFileDescriptor$(),OpenSSLSocketImpl.this,buf,offset,byteCount,writeTimeoutMilliseconds);  }}  }
class C{  private void sendFriends(){  List<String> friends=new ArrayList<String>();  friends.addAll(friendStore.getAllFriends());  CleartextFriends friendsMessage=new CleartextFriends.Builder().friends(friends).build();  lengthValueWrite(out,friendsMessage);}  }
class C{  public void reset(){  length=0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void clearTenant(String tenantId){  String index=getIndex(tenantId);synchronized (knownIndices) {    IndicesAdminClient indices=client.admin().indices();    boolean indexExists=indices.prepareExists(index).execute().actionGet().isExists();    if (indexExists) {      indices.prepareDelete(index).execute().actionGet();    }    knownIndices.remove(index);  }}  }
class C{  private void submittedJobStepTimeout(){  for (  JobStep job_step : future_map.keySet()) {    final Future<?> future=future_map.get(job_step);    if (job_step.isTimedOut() && !future.isDone()) {      future.cancel(true);    }  }}  }
class C{  public RemoteTHLExtractor(){}  }
class C{  @TargetApi(Build.VERSION_CODES.GINGERBREAD) public static String convertIdn(String url,boolean toASCII){  String urlNoDots=url;  String dots="";  while (urlNoDots.startsWith(".")) {    urlNoDots=url.substring(1);    dots=dots + ".";  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    int hostStart=0;    if (urlNoDots.contains("//")) {      hostStart=url.indexOf("//") + "//".length();    } else     if (url.contains("@")) {      hostStart=url.indexOf("@") + "@".length();    }    int hostEnd=url.substring(hostStart).indexOf("/");    hostEnd=(hostEnd == -1 ? urlNoDots.length() : hostStart + hostEnd);    String host=urlNoDots.substring(hostStart,hostEnd);    host=(toASCII ? IDN.toASCII(host) : IDN.toUnicode(host));    return dots + urlNoDots.substring(0,hostStart) + host+ urlNoDots.substring(hostEnd);  } else {    return dots + url;  }}  }
class C{  @Override public void initialize(){  if (databaseConnection != null) {    this.insert(databaseConnection.loadData());    databaseConnection=null;  }}  }
class C{  public HotspotPeerNetwork(){}  }
class C{  private void addHighlight(Highlighter h,Info info,Color c){  int start=info.start;  int end=info.end;  if (start == -1 && end == -1)   return;  if (start == -1)   start=end;  if (end == -1)   end=start;  try {    h.addHighlight(info.start,info.end,new DefaultHighlighter.DefaultHighlightPainter(c));    if (info.pos != -1) {      Color c2=new Color(c.getRed(),c.getGreen(),c.getBlue(),(int)(.4f * 255));      h.addHighlight(info.pos,info.pos + 1,new DefaultHighlighter.DefaultHighlightPainter(c2));    }  } catch (  BadLocationException e) {    e.printStackTrace();  }}  }
class C{  public static boolean isVarargs(JCVariableDecl varDecl){  return (varDecl.mods.flags & Flags.VARARGS) == Flags.VARARGS;}  }
class C{  public static String[] readStrings(){  return new In().readAllStrings();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static void checkTableID(Properties ctx,SvrProcess sp){  int IDRangeEnd=DB.getSQLValue(null,"SELECT IDRangeEnd FROM AD_System");  if (IDRangeEnd <= 0)   IDRangeEnd=DB.getSQLValue(null,"SELECT MIN(IDRangeStart)-1 FROM AD_Replication");  s_log.info("IDRangeEnd = " + IDRangeEnd);  String sql="SELECT * FROM AD_Sequence " + "WHERE IsTableID='Y' " + "ORDER BY Name";  int counter=0;  PreparedStatement pstmt=null;  String trxName=null;  if (sp != null)   trxName=sp.get_TrxName();  try {    pstmt=DB.prepareStatement(sql,trxName);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MSequence seq=new MSequence(ctx,rs,trxName);      int old=seq.getCurrentNext();      int oldSys=seq.getCurrentNextSys();      if (seq.validateTableIDValue()) {        if (seq.getCurrentNext() != old) {          String msg=seq.getName() + " ID  " + old+ " -> "+ seq.getCurrentNext();          if (sp != null)           sp.addLog(0,null,null,msg); else           s_log.fine(msg);        }        if (seq.getCurrentNextSys() != oldSys) {          String msg=seq.getName() + " Sys " + oldSys+ " -> "+ seq.getCurrentNextSys();          if (sp != null)           sp.addLog(0,null,null,msg); else           s_log.fine(msg);        }        if (seq.save())         counter++; else         s_log.severe("Not updated: " + seq);      }    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  s_log.fine("#" + counter);}  }
class C{  public int fieldIndex(String field){  return delegate.fieldIndex(field);}  }
class C{  public IDevice learnEntity(long macAddress,Short vlan,Integer ipv4Address,Long switchDPID,Integer switchPort,boolean processUpdates){  List<IDeviceListener> listeners=deviceListeners.getOrderedListeners();  if (!processUpdates) {    deviceListeners.clearListeners();  }  VlanVid v;  IPv4Address i;  DatapathId d;  OFPort p;  if (vlan != null && vlan.shortValue() <= 0)   vlan=null;  if (ipv4Address != null && ipv4Address == 0)   ipv4Address=null;  if (vlan == null) {    v=VlanVid.ofVlan(-1);  } else {    v=VlanVid.ofVlan(vlan);  }  if (ipv4Address == null) {    i=IPv4Address.NONE;  } else {    i=IPv4Address.of(ipv4Address);  }  if (switchDPID == null) {    d=DatapathId.of(0);  } else {    d=DatapathId.of(switchDPID.longValue());  }  if (switchPort == null) {    p=OFPort.ZERO;  } else {    p=OFPort.of(switchPort);  }  IDevice res=learnDeviceByEntity(new Entity(MacAddress.of(macAddress),v,i,d,p,new Date()));  if (listeners != null) {    for (    IDeviceListener listener : listeners) {      deviceListeners.addListener("device",listener);    }  }  return res;}  }
class C{  public FeaturedProducts(final String id){  super(id,false);}  }
class C{  public static boolean checkSDCardAvailable(){  return android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED);}  }
class C{  private DirectorySession newSession(String sessionID){  DirectorySession session=null;synchronized (sessionsByID) {    session=new DirectorySession(this,sessionID,getRootNode());    sessionsByID.put(session.getSessionID(),session);  }  return session;}  }
class C{  public void testStringWithWhitespace() throws IOException {  final String sql="INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, 'some\t\t\ttext', 'some    text' )";  final InputStream stream=this.getStream(R.raw.string_with_whitespace);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql,commands.get(0));}  }
class C{  public static Typeface walkwayUltraBold(Context context){  return FontSourceProcessor.process(R.raw.walkway_ultrabold,context);}  }
class C{  public static boolean isAWTAvailable(){  return isAWTAvailable;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int i=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.createNewDataFile();    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setDisplayMaximum(1);    output.setDisplayMinimum(0);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void expTypeChanged(){  if (m_Exp == null)   return;  if (m_ExperimentTypeCBox.getSelectedItem() == TYPE_CROSSVALIDATION_TEXT) {    m_ExperimentParameterLabel.setText("Number of folds:");    m_ExperimentParameterTField.setText("" + m_numFolds);  } else {    m_ExperimentParameterLabel.setText("Train percentage:");    m_ExperimentParameterTField.setText("" + m_trainPercent);  }  if (m_ExperimentTypeCBox.getSelectedItem() == TYPE_FIXEDSPLIT_TEXT) {    m_NumberOfRepetitionsTField.setEnabled(false);    m_NumberOfRepetitionsTField.setText("1");    m_Exp.setRunLower(1);    m_Exp.setRunUpper(1);  } else {    m_NumberOfRepetitionsTField.setText("" + m_numRepetitions);    m_NumberOfRepetitionsTField.setEnabled(true);    m_Exp.setRunLower(1);    m_Exp.setRunUpper(m_numRepetitions);  }  SplitEvaluator se=null;  Classifier sec=null;  if (m_ExpClassificationRBut.isSelected()) {    se=new ClassifierSplitEvaluator();    sec=((ClassifierSplitEvaluator)se).getClassifier();  } else {    se=new RegressionSplitEvaluator();    sec=((RegressionSplitEvaluator)se).getClassifier();  }  if (m_ExperimentTypeCBox.getSelectedItem() == TYPE_CROSSVALIDATION_TEXT) {    CrossValidationResultProducer cvrp=new CrossValidationResultProducer();    cvrp.setNumFolds(m_numFolds);    cvrp.setSplitEvaluator(se);    PropertyNode[] propertyPath=new PropertyNode[2];    try {      propertyPath[0]=new PropertyNode(se,new PropertyDescriptor("splitEvaluator",CrossValidationResultProducer.class),CrossValidationResultProducer.class);      propertyPath[1]=new PropertyNode(sec,new PropertyDescriptor("classifier",se.getClass()),se.getClass());    } catch (    IntrospectionException e) {      e.printStackTrace();    }    m_Exp.setResultProducer(cvrp);    m_Exp.setPropertyPath(propertyPath);  } else {    RandomSplitResultProducer rsrp=new RandomSplitResultProducer();    rsrp.setRandomizeData(m_ExperimentTypeCBox.getSelectedItem() == TYPE_RANDOMSPLIT_TEXT);    rsrp.setTrainPercent(m_trainPercent);    rsrp.setSplitEvaluator(se);    PropertyNode[] propertyPath=new PropertyNode[2];    try {      propertyPath[0]=new PropertyNode(se,new PropertyDescriptor("splitEvaluator",RandomSplitResultProducer.class),RandomSplitResultProducer.class);      propertyPath[1]=new PropertyNode(sec,new PropertyDescriptor("classifier",se.getClass()),se.getClass());    } catch (    IntrospectionException e) {      e.printStackTrace();    }    m_Exp.setResultProducer(rsrp);    m_Exp.setPropertyPath(propertyPath);  }  m_Exp.setUsePropertyIterator(true);  m_Support.firePropertyChange("",null,null);}  }
class C{  public UdpChannelHandler(UdpWorker udpWorker){  super();  this.udpWorker=udpWorker;}  }
class C{  private boolean initComplex() throws IOException {  placeFirstPositions();  if (!advanceRepeatGroups()) {    return false;  }  fillQueue();  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.SCIENTIFIC_INT_LITERAL;}  }
class C{  public static boolean isDataElement(Node node){  return node.getNodeType() == Node.ELEMENT_NODE && UiBinderConstants.UI_BINDER_XML_NAMESPACE.equals(node.getNamespaceURI()) && UiBinderConstants.UI_BINDER_DATA_ELEMENT_NAME.equalsIgnoreCase(node.getLocalName());}  }
class C{  void init(boolean decrypting,String algorithm,byte[] key,byte[] iv) throws InvalidKeyException {  if ((key == null) || (iv == null) || (iv.length != blockSize)) {    throw new InvalidKeyException("Internal error");  }  this.iv=iv;  reset();  embeddedCipher.init(decrypting,algorithm,key);}  }
class C{  public <T extends Number>double[] next(Collection<T> values,int numForecasts){  if (values.size() < period * 2) {    throw new AggregationExecutionException("Holt-Winters aggregation requires at least (2 * period == 2 * " + period + " == "+ (2 * period)+ ") data-points to function.  Only ["+ values.size()+ "] were provided.");  }  double s=0;  double last_s;  double b=0;  double last_b=0;  double[] seasonal=new double[values.size()];  int counter=0;  double[] vs=new double[values.size()];  for (  T v : values) {    vs[counter]=v.doubleValue() + padding;    counter+=1;  }  for (int i=0; i < period; i++) {    s+=vs[i];    b+=(vs[i + period] - vs[i]) / period;  }  s/=(double)period;  b/=(double)period;  last_s=s;  if (Double.compare(s,0.0) == 0 || Double.compare(s,-0.0) == 0) {    Arrays.fill(seasonal,0.0);  } else {    for (int i=0; i < period; i++) {      seasonal[i]=vs[i] / s;    }  }  for (int i=period; i < vs.length; i++) {    if (seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)) {      s=alpha * (vs[i] / seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b);    } else {      s=alpha * (vs[i] - seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b);    }    b=beta * (s - last_s) + (1 - beta) * last_b;    if (seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)) {      seasonal[i]=gamma * (vs[i] / (last_s + last_b)) + (1 - gamma) * seasonal[i - period];    } else {      seasonal[i]=gamma * (vs[i] - (last_s - last_b)) + (1 - gamma) * seasonal[i - period];    }    last_s=s;    last_b=b;  }  double[] forecastValues=new double[numForecasts];  for (int i=1; i <= numForecasts; i++) {    int idx=values.size() - period + ((i - 1) % period);    if (seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)) {      forecastValues[i - 1]=(s + (i * b)) * seasonal[idx];    } else {      forecastValues[i - 1]=s + (i * b) + seasonal[idx];    }  }  return forecastValues;}  }
class C{  public String toString(){  String s=super.toString() + "AuthorityKeyIdentifier [\n";  if (id != null) {    s+=id.toString();  }  if (names != null) {    s+=names.toString() + "\n";  }  if (serialNum != null) {    s+=serialNum.toString() + "\n";  }  return (s + "]\n");}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  result=HashUtilities.hashCode(result,this.widthRadius);  result=HashUtilities.hashCode(result,this.fillPaint);  result=HashUtilities.hashCode(result,this.outlinePaint);  return result;}  }
class C{  private void removeTtsApis(){  if (mTextToSpeech != null) {    mTextToSpeech.stop();    mTextToSpeech.shutdown();    mTextToSpeech=null;  }  mWebView.removeJavascriptInterface(ALIAS_TTS_JS_INTERFACE);}  }
class C{  public boolean matchesCS(String seq){  return queue.startsWith(seq,pos);}  }
class C{  private void createContents(){  shell=new Shell();  shell.setSize(600,450);  shell.setText(getText());  shell.setLayout(new GridLayout(1,false));}  }
class C{  protected static <K,V>void updateAll(IgniteCache<K,V> cache,@Nullable Set<K> rmvCol,Map<K,V> putMap){  assert rmvCol != null || putMap != null;  if (rmvCol != null)   cache.removeAll(rmvCol);  if (putMap != null)   cache.putAll(putMap);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:07.501 -0500",hash_original_method="B333B42236D9FFA1243D291D9F8E02D4",hash_generated_method="AFE17903F70720F83CDBC1BB6F9D1B08") public char first(){  if (start == end) {    return DONE;  }  offset=start;  return string.charAt(offset);}  }
class C{  public long copyBlocks(String fromId,int fromVersion,String toId,int toVersion){  final Iterator<Long> src=blocks(fromId,fromVersion);  long nblocks=0L;  while (src.hasNext()) {    final long blockId=src.next();    final byte[] block=readBlock(fromId,fromVersion,blockId);    appendBlock(toId,toVersion,block,0,block.length);    nblocks++;  }  return nblocks;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:07.179 -0500",hash_original_method="5BBB001295BC7F6BF111AF6DC66C9205",hash_generated_method="32B9B1D5AFC82207FB6EB8CF12436D3C") public void translateRectInScreenToAppWindow(Rect rect){  rect.scale(applicationInvertedScale);}  }
class C{  public static float lerp(float t,float a,float b){  return a + t * (b - a);}  }
class C{  public UnweightedGraph(){}  }
class C{  public static AllocationId finishRelocation(AllocationId allocationId){  assert allocationId.getRelocationId() != null;  return new AllocationId(allocationId.getId(),null);}  }
class C{  boolean validateAntecedent(){  if (_logicType != Conditional.MIXED || LRouteTableAction.LOGIX_INITIALIZER.equals(_curLogix.getSystemName())) {    return true;  }  _antecedent=_antecedentField.getText();  if (_antecedent == null || _antecedent.trim().length() == 0) {    makeAntecedent();  }  String message=_curConditional.validateAntecedent(_antecedent,_variableList);  if (message != null) {    javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,message + rbx.getString("ParseError8"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);    return false;  }  return true;}  }
class C{  public void addClearGraphDataButton(){  JButton clearButton=new JButton("Clear");  clearButton.setAction(RasterPlotActions.getClearGraphAction(this));  buttonPanel.add(clearButton);}  }
class C{  private ExprKraken parseCmpExpr(){  ExprKraken left=parseAddExpr();  Token token=scanToken();  boolean isNot=false;switch (token) {case EQ:    return new BinaryExpr(BinaryOp.EQ,left,parseAddExpr());case NE:  return new BinaryExpr(BinaryOp.NE,left,parseAddExpr());case LT:return new BinaryExpr(BinaryOp.LT,left,parseAddExpr());case LE:return new BinaryExpr(BinaryOp.LE,left,parseAddExpr());case GT:return new BinaryExpr(BinaryOp.GT,left,parseAddExpr());case GE:return new BinaryExpr(BinaryOp.GE,left,parseAddExpr());case BETWEEN:{ExprKraken min=parseAddExpr();token=scanToken();if (token != Token.AND) throw error(L.l("expected AND at '{0}'",token));ExprKraken max=parseAddExpr();return new BetweenExpr(left,min,max,isNot);}default :_token=token;return left;}}  }
class C{  HeapDoublesUnion(final Memory srcMem){  gadget_=HeapDoublesSketch.heapifyInstance(srcMem);  k_=gadget_.getK();}  }
class C{  public static int differenceInDays(long day1,long day2){  return (int)(day1 - day2) / (24 * 60 * 60* 1000);}  }
class C{  public int addMultiNewarray(String desc,int dim){  add(MULTIANEWARRAY);  addIndex(constPool.addClassInfo(desc));  add(dim);  growStack(1 - dim);  return dim;}  }
class C{  public List<Poi> queryForAllInRect(Box box){  return poiDao.queryForAllInRect(box);}  }
class C{  public boolean isRefreshTokenExpired(){  return refreshTokenExpiresAt.before(new Date());}  }
class C{  public EgBill updateBillDetails(BillReceiptInfo bri) throws InvalidAccountHeadException {  EgBill egBill=null;  try {    if (bri != null) {      egBill=egBillDAO.findById(Long.valueOf(bri.getBillReferenceNum()),false);      List<EgBillDetails> billDetList=egBillDetailsDAO.getBillDetailsByBill(egBill);      BigDecimal totalCollectedAmt=calculateTotalCollectedAmt(bri,billDetList);      for (      EgBillDetails billDet : billDetList) {        Boolean glCodeExist=false;        for (        ReceiptAccountInfo acctDet : bri.getAccountDetails()) {          if (billDet.getGlcode().equals(acctDet.getGlCode())) {            glCodeExist=true;            billDet.setCollectedAmount(acctDet.getCrAmount());            billDet.setCrAmount(acctDet.getCrAmount());            billDet.setDrAmount(acctDet.getDrAmount());            billDet.setOrderNo(1);            egBillDetailsDAO.update(billDet);          }        }        if (!glCodeExist) {          throw new InvalidAccountHeadException("GlCode does not exist for " + billDet.getGlcode());        }      }      egBill.setTotalCollectedAmount(totalCollectedAmt);      egBillDAO.update(egBill);    }  } catch (  ApplicationRuntimeException e) {    throw new ApplicationRuntimeException("Exception in updateBillDetails" + e);  }  return egBill;}  }
class C{  void present(){  if (caps.GL_NV_draw_texture) {    NVDrawTexture.glDrawTextureNV(raytraceTexture,sampler,0.0f,0.0f,width,height,0.0f,0.0f,0.0f,1.0f,1.0f);  } else {    glUseProgram(quadProgram);    glBindVertexArray(fullScreenVao);    glBindTexture(GL_TEXTURE_2D,raytraceTexture);    glBindSampler(0,this.sampler);    glDrawArrays(GL_TRIANGLES,0,6);    glBindSampler(0,0);    glBindTexture(GL_TEXTURE_2D,0);    glBindVertexArray(0);    glUseProgram(0);  }}  }
class C{  void parseRow(Map<String,Object> row,Map<String,Map<String,OFFlowMod>> entries){  String switchName=null;  String entryName=null;  StringBuffer matchString=new StringBuffer();  OFFlowMod.Builder fmb=null;  if (!row.containsKey(COLUMN_SWITCH) || !row.containsKey(COLUMN_NAME)) {    log.debug("skipping entry with missing required 'switch' or 'name' entry: {}",row);    return;  }  try {    switchName=(String)row.get(COLUMN_SWITCH);    entryName=(String)row.get(COLUMN_NAME);    if (!entries.containsKey(switchName)) {      entries.put(switchName,new HashMap<String,OFFlowMod>());    }    fmb=OFFactories.getFactory(switchService.getSwitch(DatapathId.of(switchName)).getOFFactory().getVersion()).buildFlowModify();    StaticFlowEntries.initDefaultFlowMod(fmb,entryName);    for (    String key : row.keySet()) {      if (row.get(key) == null) {        continue;      }      if (key.equals(COLUMN_SWITCH) || key.equals(COLUMN_NAME) || key.equals("id")) {        continue;      }      if (key.equals(COLUMN_HARD_TIMEOUT) || key.equals(COLUMN_IDLE_TIMEOUT)) {        continue;      }      if (key.equals(COLUMN_ACTIVE)) {        if (!Boolean.valueOf((String)row.get(COLUMN_ACTIVE))) {          log.debug("skipping inactive entry {} for switch {}",entryName,switchName);          entries.get(switchName).put(entryName,null);          return;        }      } else       if (key.equals(COLUMN_TABLE_ID)) {        if (fmb.getVersion().compareTo(OFVersion.OF_10) > 0) {          fmb.setTableId(TableId.of(Integer.parseInt((String)row.get(key))));        } else {          log.error("Table not supported in OpenFlow 1.0");        }      } else       if (key.equals(COLUMN_ACTIONS)) {        ActionUtils.fromString(fmb,(String)row.get(COLUMN_ACTIONS),log);      } else       if (key.equals(COLUMN_COOKIE)) {        fmb.setCookie(StaticFlowEntries.computeEntryCookie(Integer.valueOf((String)row.get(COLUMN_COOKIE)),entryName));      } else       if (key.equals(COLUMN_PRIORITY)) {        fmb.setPriority(U16.t(Integer.valueOf((String)row.get(COLUMN_PRIORITY))));      } else       if (key.equals(COLUMN_INSTR_APPLY_ACTIONS)) {        InstructionUtils.applyActionsFromString(fmb,(String)row.get(COLUMN_INSTR_APPLY_ACTIONS),log);      } else       if (key.equals(COLUMN_INSTR_CLEAR_ACTIONS)) {        InstructionUtils.clearActionsFromString(fmb,(String)row.get(COLUMN_INSTR_CLEAR_ACTIONS),log);      } else       if (key.equals(COLUMN_INSTR_EXPERIMENTER)) {        InstructionUtils.experimenterFromString(fmb,(String)row.get(COLUMN_INSTR_EXPERIMENTER),log);      } else       if (key.equals(COLUMN_INSTR_GOTO_METER)) {        InstructionUtils.meterFromString(fmb,(String)row.get(COLUMN_INSTR_GOTO_METER),log);      } else       if (key.equals(COLUMN_INSTR_GOTO_TABLE)) {        InstructionUtils.gotoTableFromString(fmb,(String)row.get(COLUMN_INSTR_GOTO_TABLE),log);      } else       if (key.equals(COLUMN_INSTR_WRITE_ACTIONS)) {        InstructionUtils.writeActionsFromString(fmb,(String)row.get(COLUMN_INSTR_WRITE_ACTIONS),log);      } else       if (key.equals(COLUMN_INSTR_WRITE_METADATA)) {        InstructionUtils.writeMetadataFromString(fmb,(String)row.get(COLUMN_INSTR_WRITE_METADATA),log);      } else {        if (matchString.length() > 0) {          matchString.append(",");        }        matchString.append(key + "=" + row.get(key).toString());      }    }  } catch (  ClassCastException e) {    if (entryName != null && switchName != null) {      log.warn("Skipping entry {} on switch {} with bad data : " + e.getMessage(),entryName,switchName);    } else {      log.warn("Skipping entry with bad data: {} :: {} ",e.getMessage(),e.getStackTrace());    }  }  String match=matchString.toString();  try {    fmb.setMatch(MatchUtils.fromString(match,fmb.getVersion()));  } catch (  IllegalArgumentException e) {    log.debug("Ignoring flow entry {} on switch {} with illegal OFMatch() key: " + match,entryName,switchName);    return;  }catch (  Exception e) {    log.error("OF version incompatible for the match: " + match);    e.printStackTrace();    return;  }  entries.get(switchName).put(entryName,fmb.build());}  }
class C{  public void fillMinified(final Map<String,Object> dataModel){switch (Latkes.getRuntimeMode()) {case DEVELOPMENT:    dataModel.put(Common.MINI_POSTFIX,"");  break;case PRODUCTION:dataModel.put(Common.MINI_POSTFIX,Common.MINI_POSTFIX_VALUE);break;default :throw new AssertionError();}}  }
class C{  private void initClipRectForHeader(Rect clipRect,RecyclerView recyclerView,View header){  mDimensionCalculator.initMargins(clipRect,header);  if (mOrientationProvider.getOrientation(recyclerView) == LinearLayout.VERTICAL) {    clipRect.set(recyclerView.getPaddingLeft(),recyclerView.getPaddingTop(),recyclerView.getWidth() - recyclerView.getPaddingRight() - clipRect.right,recyclerView.getHeight() - recyclerView.getPaddingBottom());  } else {    clipRect.set(recyclerView.getPaddingLeft(),recyclerView.getPaddingTop(),recyclerView.getWidth() - recyclerView.getPaddingRight(),recyclerView.getHeight() - recyclerView.getPaddingBottom() - clipRect.bottom);  }}  }
class C{  public String toString(){  final String TAB=" ";  return "ExternalSessionFactory ( " + "address = " + this.getAddress() + TAB+ "monitor = "+ this.monitor+ TAB+ "shabang = "+ this.shabang+ TAB+ " )";}  }
class C{  private Ref negateMinusOp() throws PageException {  if (cfml.forwardIfCurrent('-')) {    if (cfml.forwardIfCurrent('-')) {      cfml.removeSpace();      Ref expr=clip();      Ref res=preciseMath ? new BigMinus(expr,new LNumber(new Double(1))) : new Minus(expr,new LNumber(new Double(1)));      return new Assign(expr,res,limited);    }    cfml.removeSpace();    return new Negate(clip());  }  if (cfml.forwardIfCurrent('+')) {    if (cfml.forwardIfCurrent('+')) {      cfml.removeSpace();      Ref expr=clip();      Ref res=preciseMath ? new BigPlus(expr,new LNumber(new Double(1))) : new Plus(expr,new LNumber(new Double(1)));      return new Assign(expr,res,limited);    }    cfml.removeSpace();    return new Casting("numeric",CFTypes.TYPE_NUMERIC,clip());  }  return clip();}  }
class C{  @NotNull @ObjectiveCName("blockUser:") public Promise<Void> blockUser(int uid){  return modules.getUsersModule().blockUser(uid);}  }
class C{  synchronized void initmessage(XNetReply l){  boolean oldState=statusRequested;  message(l);  statusRequested=oldState;}  }
class C{  public void handleCacheServerStop(CacheServer server){  if (!isServiceInitialised("handleCacheServerStop")) {    return;  }  CacheServerMBean mbean=(CacheServerMBean)service.getLocalCacheServerMXBean(server.getPort());  ClientMembershipListener listener=mbean.getBridge().getClientMembershipListener();  if (listener != null) {    ClientMembership.unregisterClientMembershipListener(listener);  }  mbean.stopMonitor();  ObjectName cacheServerMBeanName=MBeanJMXAdapter.getClientServiceMBeanName(server.getPort(),cacheImpl.getDistributedSystem().getDistributedMember());  service.unregisterMBean(cacheServerMBeanName);  Notification notification=new Notification(JMXNotificationType.CACHE_SERVER_STOPPED,memberSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.CACHE_SERVER_STOPPED_PREFIX);  memberLevelNotifEmitter.sendNotification(notification);  memberMBeanBridge.setCacheServer(false);}  }
class C{  public void collapseTree(){  _bugTree.getTreeHelper().collapseTree();}  }
class C{  public DexAnnotationVisitor visitAnnotation(String name,String desc){  if (this.visitor != null) {    return this.visitor.visitAnnotation(name,desc);  }  return null;}  }
class C{  public boolean isMethodCall(){  return operation.isMessage();}  }
class C{  public void configureTable(JTable slotTable){  slotTable.getTableHeader().setReorderingAllowed(true);  slotTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);  for (int i=0; i < slotTable.getColumnCount(); i++) {    int width=getPreferredWidth(i);    slotTable.getColumnModel().getColumn(i).setPreferredWidth(width);  }  slotTable.sizeColumnsToFit(-1);  setColumnToHoldButton(slotTable,PacketDataModel.MONITORBUTTONCOLUMN);}  }
class C{  public void displayError(Exception ex){  ua.displayError(ex);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + alpha+ ","+ beta+ ")";}  }
class C{  public void releaseReadLock(){}  }
class C{  public XYItemEntity(Shape area,XYDataset dataset,int series,int item,String toolTipText,String urlText){  super(area,toolTipText,urlText);  this.dataset=dataset;  this.series=series;  this.item=item;}  }
class C{  public boolean userCanAssingUserToGroup(int connectedUserId,int userId,int groupId,String entidad) throws Exception {  boolean can=false;  try {    if (existsUserInGroup(userId,groupId,entidad))     AdminException.throwException(UserErrorCodes.EC_USER_EXITS);    can=this.userCanEditGroup(connectedUserId,groupId,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public GrokAsaParserTest() throws Exception {  super();}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  DeclutterableText(GeographicText text,Vec4 point,double eyeDistance,DeclutteringTextRenderer textRenderer){  this.text=text;  this.point=point;  this.eyeDistance=eyeDistance;  this.textRenderer=textRenderer;}  }
class C{  protected void initiate(){}  }
class C{  private void asyncOpenLedger(LedgerDescriptor ledgerDesc,AsyncCallback.OpenCallback callback,Object ctx){  try {    if (!ledgerDesc.isFenced()) {      bkc.get().asyncOpenLedgerNoRecovery(ledgerDesc.getLedgerId(),BookKeeper.DigestType.CRC32,digestpw.getBytes(UTF_8),callback,ctx);    } else {      bkc.get().asyncOpenLedger(ledgerDesc.getLedgerId(),BookKeeper.DigestType.CRC32,digestpw.getBytes(UTF_8),callback,ctx);    }  } catch (  IOException ace) {    callback.openComplete(BKException.Code.BookieHandleNotAvailableException,null,ctx);  }}  }
class C{  private void visitName(Tree node,BreakOrNot breaks){  Deque<Name> stack=new ArrayDeque<>();  for (; node instanceof MemberSelectTree; node=((MemberSelectTree)node).getExpression()) {    stack.addFirst(((MemberSelectTree)node).getIdentifier());  }  stack.addFirst(((IdentifierTree)node).getName());  boolean first=true;  for (  Name name : stack) {    if (!first) {      token(".");    }    token(name.toString());    first=false;  }}  }
class C{  public boolean inClip(double time){  return time < clipEnd && time >= clipBegin;}  }
class C{  public boolean isRegExpSearch(){  return m_RegExpSearch;}  }
class C{  @SuppressWarnings("unchecked") public PutMappingRequest source(Map mappingSource){  try {    XContentBuilder builder=XContentFactory.contentBuilder(XContentType.JSON);    builder.map(mappingSource);    return source(builder.string());  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + mappingSource + "]",e);  }}  }
class C{  @Override public void write(ArrayDataOutput str) throws FitsException {  ensureData();  if (this.buffer == null) {    if (this.data == null) {      throw new FitsException("Attempt to write undefined ASCII Table");    }    if ((long)this.nRows * this.rowLen > Integer.MAX_VALUE) {      throw new FitsException("Cannot write ASCII table > 2 GB");    }    this.buffer=new byte[this.nRows * this.rowLen];    this.bp=new ByteParser(this.buffer);    for (int i=0; i < this.buffer.length; i+=1) {      this.buffer[i]=(byte)' ';    }    ByteFormatter bf=new ByteFormatter();    for (int i=0; i < this.nRows; i+=1) {      for (int j=0; j < this.nFields; j+=1) {        int offset=i * this.rowLen + this.offsets[j];        int len=this.lengths[j];        if (this.isNull != null && this.isNull[i * this.nFields + j]) {          if (this.nulls[j] == null) {            throw new FitsException("No null value set when needed");          }          bf.format(this.nulls[j],this.buffer,offset,len);        } else {          if (this.types[j] == String.class) {            String[] s=(String[])this.data[j];            bf.format(s[i],this.buffer,offset,len);          } else           if (this.types[j] == int.class) {            int[] ia=(int[])this.data[j];            bf.format(ia[i],this.buffer,offset,len);          } else           if (this.types[j] == float.class) {            float[] fa=(float[])this.data[j];            bf.format(fa[i],this.buffer,offset,len);          } else           if (this.types[j] == double.class) {            double[] da=(double[])this.data[j];            bf.format(da[i],this.buffer,offset,len);          } else           if (this.types[j] == long.class) {            long[] la=(long[])this.data[j];            bf.format(la[i],this.buffer,offset,len);          }        }      }    }  }  try {    str.write(this.buffer);    FitsUtil.pad(str,this.buffer.length,(byte)' ');  } catch (  IOException e) {    throw new FitsException("Error writing ASCII Table data",e);  }}  }
class C{  public boolean documentIsEmpty(){  return m_docIsEmpty && (m_elemContext.m_currentElemDepth == 0);}  }
class C{  @Override protected void initData(){  CoordinatorRecyclerViewAdapter adapter=new CoordinatorRecyclerViewAdapter();  List<Integer> resIds=new LinkedList<>();  resIds.add(R.drawable.img_mm_1);  resIds.add(R.drawable.img_mm_2);  resIds.add(R.drawable.img_mm_3);  resIds.add(R.drawable.img_mm_4);  resIds.add(R.drawable.img_mm_5);  resIds.add(R.drawable.img_mm_6);  this.coordinatorRV.setAdapter(adapter);  adapter.setList(resIds);}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  DecimalFormat dft=new DecimalFormat("###.##");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  @Override public Set<Map.Entry<K,V>> entrySet(){  if (entrySet == null) {    entrySet=new ReferenceEntrySet<K,V>(this);  }  return entrySet;}  }
class C{  public String decodeNode(final String name){  return nameCoder.decodeNode(name);}  }
class C{  public CNodeExitState(final CStateFactory<NodeType,EdgeType> factory,final AbstractZyGraph<NodeType,EdgeType> graph,final Node node){  m_factory=factory;  m_graph=graph;  m_node=node;}  }
class C{  public static PropertyValuesHolder ofFloat(Property<?,Float> property,float... values){  return new FloatPropertyValuesHolder(property,values);}  }
class C{  protected void printPredictionsHeader(StringBuffer outBuff,AbstractOutput classificationOutput,String title){  if (classificationOutput.generatesOutput()) {    outBuff.append("=== Predictions on " + title + " ===\n\n");  }  classificationOutput.printHeader();}  }
class C{  public java.lang.StringBuffer insert(int offset,boolean b){  internal.insert(offset,b);  return this;}  }
class C{  public boolean isDirectory(){  return name.endsWith("/");}  }
class C{  public static TalonSRX talonSRX(int pwmPort){  return pwmRegistrar.fetch(pwmPort,TalonSRX.class,null);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public DSubjectInformationAccess(JDialog parent){  super(parent);  setTitle(res.getString("DSubjectInformationAccess.Title"));  initComponents();}  }
class C{  protected void projectSelected(){  fIndicatorFiles=getIndicatorFiles();  if (fIndicatorFiles == null || fIndicatorFiles.length == 0) {    fEmptyPageLabel.setText(noJsonFileMessage());    setPartName("Indicator");    showEmptyPage();  } else {    File indicatorFile=fIndicatorFiles[0];    openView(indicatorFile);  }}  }
