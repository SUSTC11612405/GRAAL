class C{  @Override public void add(int index,E element){  while (true) {    Object[] elements=array;    Object[] newElements=createArrayAdd(elements,index,element);    if (replaceArray(elements,newElements))     break;  }}  }
class C{  protected OMElement constructNode(OMElement parent,String elementName,boolean isEnvelope){  OMElement element;  if (parent == null) {    if (!elementName.equals(SOAPConstants.SOAPENVELOPE_LOCAL_NAME)) {      throw new SOAPProcessingException("First Element must contain the local name, " + SOAPConstants.SOAPENVELOPE_LOCAL_NAME + " , but found "+ elementName,SOAPConstants.FAULT_CODE_SENDER);    }    if (soapFactory == null) {      namespaceURI=this.parser.getNamespaceURI();      if (SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(namespaceURI)) {        soapFactory=OMAbstractFactory.getSOAP12Factory();        if (isDebugEnabled) {          log.debug("Starting to process SOAP 1.2 message");        }      } else       if (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(namespaceURI)) {        soapFactory=OMAbstractFactory.getSOAP11Factory();        if (isDebugEnabled) {          log.debug("Starting to process SOAP 1.1 message");        }      } else {        throw new SOAPProcessingException("Only SOAP 1.1 or SOAP 1.2 messages are supported in the" + " system",SOAPConstants.FAULT_CODE_VERSION_MISMATCH);      }    } else {      namespaceURI=soapFactory.getSoapVersionURI();    }    soapMessage=soapFactory.createSOAPMessage(this);    this.document=soapMessage;    if (charEncoding != null) {      document.setCharsetEncoding(charEncoding);    }    envelope=soapFactory.createSOAPEnvelope(this);    element=envelope;    processNamespaceData(element,true);    processAttributes(element);  } else   if (elementLevel == 2) {    String elementNS=parser.getNamespaceURI();    if (!(namespaceURI.equals(elementNS))) {      if (!bodyPresent || !SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(namespaceURI)) {        throw new SOAPProcessingException("Disallowed element found inside Envelope : {" + elementNS + "}"+ elementName);      }    }    if (elementName.equals(SOAPConstants.HEADER_LOCAL_NAME)) {      if (headerPresent) {        throw new SOAPProcessingException("Multiple headers encountered!",getSenderFaultCode());      }      if (bodyPresent) {        throw new SOAPProcessingException("Header Body wrong order!",getSenderFaultCode());      }      headerPresent=true;      element=soapFactory.createSOAPHeader((SOAPEnvelope)parent,this);      processNamespaceData(element,true);      processAttributes(element);    } else     if (elementName.equals(SOAPConstants.BODY_LOCAL_NAME)) {      if (bodyPresent) {        throw new SOAPProcessingException("Multiple body elements encountered",getSenderFaultCode());      }      bodyPresent=true;      element=soapFactory.createSOAPBody((SOAPEnvelope)parent,this);      processNamespaceData(element,true);      processAttributes(element);    } else {      throw new SOAPProcessingException(elementName + " is not supported here. Envelope can not have elements other than Header and Body.",getSenderFaultCode());    }  } else   if ((elementLevel == 3) && parent.getLocalName().equals(SOAPConstants.HEADER_LOCAL_NAME)) {    try {      element=soapFactory.createSOAPHeaderBlock(elementName,null,(SOAPHeader)parent,this);    } catch (    SOAPProcessingException e) {      throw new SOAPProcessingException("Can not create SOAPHeader block",getReceiverFaultCode(),e);    }    processNamespaceData(element,false);    processAttributes(element);  } else   if ((elementLevel == 3) && parent.getLocalName().equals(SOAPConstants.BODY_LOCAL_NAME) && elementName.equals(SOAPConstants.BODY_FAULT_LOCAL_NAME)) {    element=soapFactory.createSOAPFault((SOAPBody)parent,this);    processNamespaceData(element,false);    processAttributes(element);    processingFault=true;    if (SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(envelopeNamespace.getNamespaceURI())) {      builderHelper=new CustomSOAP12BuilderHelper(this);    } else     if (SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI.equals(envelopeNamespace.getNamespaceURI())) {      builderHelper=new CustomSOAP11BuilderHelper(this);    }  } else   if (elementLevel > 3 && processingFault) {    element=builderHelper.handleEvent(parser,parent,elementLevel);  } else {    element=soapFactory.createOMElement(elementName,null,parent,this);    processNamespaceData(element,false);    processAttributes(element);  }  return element;}  }
class C{  public void printIndividual(final EvolutionState state,final PrintWriter writer){  writer.println(EVALUATED_PREAMBLE + Code.encode(evaluated));  fitness.printFitness(state,writer);  for (int x=0; x < rulesets.length; x++) {    writer.println("Ruleset " + x + ":");    rulesets[x].printRuleSet(state,writer);  }}  }
class C{  public void writeMessage(final int fieldNumber,final MessageLite value) throws IOException {  writeTag(fieldNumber,WireFormat.WIRETYPE_LENGTH_DELIMITED);  writeMessageNoTag(value);}  }
class C{  public FileDocument(final String path){  this(new File(path));}  }
class C{  public static boolean ensureDirectoryExists(File dir){  if (isDirectory(dir)) {    return true;  }  return dir.mkdirs();}  }
class C{  public static int[] toIntArray(long[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(int)array[i];  }  return result;}  }
class C{  public CSVParser(char separator){  this(separator,DEFAULT_QUOTE_CHARACTER,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public static String md5(String text){  try {    MessageDigest m=MessageDigest.getInstance("MD5");    m.reset();    m.update(text.getBytes());    byte[] digest=m.digest();    BigInteger bigInt=new BigInteger(1,digest);    String hashText=bigInt.toString(16);    while (hashText.length() < 32) {      hashText="0" + hashText;    }    return hashText;  } catch (  NoSuchAlgorithmException e) {    return text;  }}  }
class C{  @Override public AsciiForm alphabeticalSort(){  this.alphabeticalSort=true;  return this;}  }
class C{  private synchronized void stop(){  running=false;}  }
class C{  protected Position computeGroundPosition(DrawContext dc,View view){  if (view == null)   return null;  Position groundPos=view.computePositionFromScreenPoint(view.getViewport().getWidth() / 2,view.getViewport().getHeight() / 2);  if (groundPos == null)   return null;  double elevation=dc.getGlobe().getElevation(groundPos.getLatitude(),groundPos.getLongitude());  return new Position(groundPos.getLatitude(),groundPos.getLongitude(),elevation * dc.getVerticalExaggeration());}  }
class C{  private void step() throws IOException {  while (true) {    try {      if (res == null) {        if (getResourceIterator().hasNext()) {          res=nextFile();          is=CompressionUtils.getInputStream(res.getLocation(),res.getInputStream());          xmlEventReader=xmlInputFactory.createXMLEventReader(is,encoding);        } else {          return;        }      }      XMLEvent e=null;      while ((e=xmlEventReader.peek()) != null) {        if (isStartElement(e,TAG_ART)) {          return;        } else {          xmlEventReader.next();        }      }      closeAll();    } catch (    XMLStreamException e) {      throw new IOException(e);    }  }}  }
class C{  public static void log(ILog log,int severity,int code,String message,Throwable exception){  log(log,createStatus(getBundleSymbolicName(log),severity,code,message,exception));}  }
class C{  @SuppressWarnings("unused") @Test public void testClosingLogicalByObtainingNewDoesNotFireConnectionClosed() throws SQLException {  final Connection physical=context.mock(Connection.class);  final FBPooledConnection pooled=new FBPooledConnection(physical);  final ConnectionEventListener cel=context.mock(ConnectionEventListener.class);  pooled.addConnectionEventListener(cel);  context.checking(new Expectations(){{      ignoring(physical);      never(cel).connectionClosed(with(any(ConnectionEvent.class)));    }  });  Connection logical1=pooled.getConnection();  Connection logical2=pooled.getConnection();}  }
class C{  public void add(Modulo3Equation equation){  if (equation.list.size() != numVars)   throw new IllegalArgumentException("The number of variables in the equation (" + equation.list.size() + ") does not match the number of variables of the system ("+ numVars+ ")");  equations.add(equation);}  }
class C{  protected void finish(QualifierHierarchy qualHierarchy,Map<AnnotationMirror,Set<AnnotationMirror>> fullMap,Map<AnnotationMirror,AnnotationMirror> polyQualifiers,Set<AnnotationMirror> tops,Set<AnnotationMirror> bottoms,Object... args){}  }
class C{  @Override public void draw(Canvas canvas){  Face face=mFace;  if (face == null) {    return;  }  float x=translateX(face.getPosition().x + face.getWidth() / 2);  float y=translateY(face.getPosition().y + face.getHeight() / 2);  canvas.drawCircle(x,y,FACE_POSITION_RADIUS,mFacePositionPaint);  canvas.drawText("id: " + mFaceId,x + ID_X_OFFSET,y + ID_Y_OFFSET,mIdPaint);  canvas.drawText("happiness: " + String.format("%.2f",face.getIsSmilingProbability()),x - ID_X_OFFSET,y - ID_Y_OFFSET,mIdPaint);  canvas.drawText("right eye: " + String.format("%.2f",face.getIsRightEyeOpenProbability()),x + ID_X_OFFSET * 2,y + ID_Y_OFFSET * 2,mIdPaint);  canvas.drawText("left eye: " + String.format("%.2f",face.getIsLeftEyeOpenProbability()),x - ID_X_OFFSET * 2,y - ID_Y_OFFSET * 2,mIdPaint);  float xOffset=scaleX(face.getWidth() / 2.0f);  float yOffset=scaleY(face.getHeight() / 2.0f);  float left=x - xOffset;  float top=y - yOffset;  float right=x + xOffset;  float bottom=y + yOffset;  canvas.drawRect(left,top,right,bottom,mBoxPaint);}  }
class C{  private boolean isAuthorized(ApplicationUser applicationUser,String namespace,NamespacePermissionEnum... permissions){  if (applicationUser != null && applicationUser.getNamespaceAuthorizations() != null) {    for (    NamespaceAuthorization currentUserAuthorization : applicationUser.getNamespaceAuthorizations()) {      List<NamespacePermissionEnum> currentUserNamespacePermissions=currentUserAuthorization.getNamespacePermissions();      if (currentUserNamespacePermissions == null) {        currentUserNamespacePermissions=Collections.emptyList();      }      if (StringUtils.equalsIgnoreCase(currentUserAuthorization.getNamespace(),namespace) && currentUserNamespacePermissions.containsAll(Arrays.asList(permissions))) {        return true;      }    }  }  return false;}  }
class C{  @Override public Image createImage(String imageId) throws InternalException {  logger.info("create image {} on datastore {}",imageId,this.getDatastore());  final HostServiceTicket hostServiceTicket=getHostServiceTicket();  NfcClient nfcClient=getNfcClient(hostServiceTicket);  String uploadFolder;  try {    CreateImageResponse response=getHostClient().createImage(imageId,this.getDatastore());    uploadFolder=response.getUpload_folder();  } catch (  InterruptedException|RpcException e) {    logger.error("Failed to call HostClient to create image '{}', due to {}",imageId,e);    throw new InternalException(e);  }  return new VsphereImageStoreImage(nfcClient,uploadFolder,imageId);}  }
class C{  public SinkExecutor(String executorName,IMetricsSink metricsSink,SlaveLooper slaveLooper,Communicator<MetricsRecord> metricsInSinkQueue,SinkContext sinkContext){  this.executorName=executorName;  this.metricsSink=metricsSink;  this.slaveLooper=slaveLooper;  this.metricsInSinkQueue=metricsInSinkQueue;  this.sinkContext=sinkContext;  this.sinkConfig=new HashMap<String,Object>();}  }
class C{  public <T>T read(T value,InputNode source) throws Exception {  return read(value,source,true);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void unpackTimes(int[] times){  startTime=times[0];  endTime=times[1];}  }
class C{  public void afterQuadrantMove(Quadrant newQuadrant){  Raptor.getInstance().getPreferences().setValue(connector.getShortName() + "-" + PreferenceKeys.GAMES_TAB_QUADRANT,newQuadrant);}  }
class C{  public static void putAttribute(final Message message,final String resourceName,final String attribute) throws JMSException {  ManagementHelper.putAttribute(JMSManagementHelper.getCoreMessage(message),resourceName,attribute);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("kdf: 0x");  buffer.append(Functions.toFullHexString(kdf));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pOtherInfoLen: ");  buffer.append(pOtherInfo.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pOtherInfo: ");  buffer.append(Functions.toHexString(pOtherInfo));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPublicDataLen: ");  buffer.append(pPublicData.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPublicData: ");  buffer.append(Functions.toHexString(pPublicData));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulPrivateDataLen: ");  buffer.append(ulPrivateDataLen);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("hPrivateData: ");  buffer.append(hPrivateData);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPublicDataLen2: ");  buffer.append(pPublicData2.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPublicData2: ");  buffer.append(Functions.toHexString(pPublicData2));  return buffer.toString();}  }
class C{  private void fill() throws IOException {  byte[] buffer=getBufIfOpen();  if (markpos < 0) {    pos=0;  } else   if (pos >= buffer.length) {    if (markpos > 0) {      int sz=pos - markpos;      System.arraycopy(buffer,markpos,buffer,0,sz);      pos=sz;      markpos=0;    } else     if (buffer.length >= marklimit) {      markpos=-1;      pos=0;    } else {      int nsz=pos * 2;      if (nsz > marklimit) {        nsz=marklimit;      }      byte nbuf[]=new byte[nsz];      System.arraycopy(buffer,0,nbuf,0,pos);      if (buffer != buf) {        throw new IOException("Stream closed");      }      buf=nbuf;      buffer=nbuf;    }  }  count=pos;  if (actualAvailable < 0) {    return;  }  int sizeOfBuffer=(buffer.length - pos);  int n=getInIfOpen().read(buffer,pos,sizeOfBuffer);  if (n > 0) {    count=n + pos;  } else {    if (n < 0) {      actualAvailable=-1;    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int dataSize;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          data.clear();          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);            }          }          Collections.sort(data);          dataSize=data.size();          if (dataSize % 2 == 1) {            z=data.get((dataSize + 1) / 2 - 1);          } else {            double lower=data.get(dataSize / 2 - 1);            double upper=data.get(dataSize / 2);            z=(lower + upper) / 2.0;          }          outputFile.setValue(row,col,z);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public TPS filter(final long fromTime,final long toTime){  return filter(fromTime,toTime,null);}  }
class C{  public void warn(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg,Object args[]) throws TransformerException {  String formattedMsg=XSLMessages.createWarning(msg,args);  ErrorListener errHandler=m_transformer.getErrorListener();  if (null != errHandler)   errHandler.warning(new TransformerException(formattedMsg,srcLctr)); else   System.out.println(formattedMsg);}  }
class C{  static void testAbstract(ClassLoader loader){  Class abstractGetClass;  Object obj;  try {    abstractGetClass=loader.loadClass("AbstractGet");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass ta failed: " + cnfe);    return;  }  try {    obj=abstractGetClass.newInstance();  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.err.println("newInstance failed: " + iae);    return;  }catch (  LinkageError le) {    System.out.println("Got LinkageError on TA");    return;  }  BaseOkay baseRef=(BaseOkay)obj;  DoubledExtendOkay de=baseRef.getExtended();  try {    String result;    result=BaseOkay.doStuff(de);  } catch (  LinkageError le) {    System.out.println("Got LinkageError on TA");    return;  }  System.err.println("Should have failed by now in testAbstract");}  }
class C{  public static GdsTypeRule supportsNativeOnly(){  return supports(NativeGDSFactoryPlugin.NATIVE_TYPE_NAME,EmbeddedGDSFactoryPlugin.EMBEDDED_TYPE_NAME,LocalGDSFactoryPlugin.LOCAL_TYPE_NAME);}  }
class C{  public static TextMessage readChat(ByteBuf buf) throws IOException {  return TextMessage.decode(ByteBufUtils.readUTF8(buf));}  }
class C{  public void showNoBluetoothNotification(Context context){  if (MurmurService.CONSOLIDATE_ERRORS) {    ServiceWatchDog.getInstance().notifyHardwareStateChanged();    return;  }  if (context == null)   return;  int notificationId=R.string.notification_no_bluetooth_message;  Intent notificationIntent=new Intent(new Intent(Settings.ACTION_BLUETOOTH_SETTINGS));  ;  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,notificationIntent,0);  NotificationManager mNotificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  Resources res=context.getResources();  BitmapDrawable largeIconDrawable;  if (Build.VERSION.SDK_INT >= 21) {    largeIconDrawable=(BitmapDrawable)res.getDrawable(R.mipmap.ic_launcher,null);  } else {    largeIconDrawable=(BitmapDrawable)res.getDrawable(R.mipmap.ic_launcher);  }  Bitmap largeIcon=largeIconDrawable.getBitmap();  int height=(int)res.getDimension(android.R.dimen.notification_large_icon_height);  int width=(int)res.getDimension(android.R.dimen.notification_large_icon_width);  largeIcon=Bitmap.createScaledBitmap(largeIcon,width,height,false);  Intent onIntent=new Intent();  onIntent.setAction(MurmurService.ACTION_ONBT);  PendingIntent pendingOnIntent=PendingIntent.getBroadcast(context,-1,onIntent,0);  Intent offIntent=new Intent();  offIntent.setAction(MurmurService.ACTION_TURNOFF);  PendingIntent pendingOffIntent=PendingIntent.getBroadcast(context,-1,offIntent,0);  Notification notification=new Notification.Builder(context).setContentTitle(context.getText(R.string.notification_no_bluetooth_title)).setContentText(context.getText(R.string.notification_no_bluetooth_message)).setLargeIcon(largeIcon).setContentIntent(pendingIntent).setSmallIcon(R.mipmap.ic_error).addAction(R.drawable.blank_square,context.getString(R.string.error_notification_action_turnon_bt),pendingOnIntent).addAction(R.drawable.blank_square,context.getString(R.string.error_notification_action_off_service),pendingOffIntent).build();  mNotificationManager.notify(notificationId,notification);}  }
class C{  public EqualsMethodAsserter method(String name,Object... values){  Class<?> parameterTypes[]=new Class<?>[values.length];  for (int i=0; i < values.length; i++) {    parameterTypes[i]=values[i].getClass();  }  return method(name,parameterTypes,values);}  }
class C{  public T caseTypeFakeDefinition(TypeFakeDefinition object){  return null;}  }
class C{  public int pointer(){  return mPointer;}  }
class C{  protected static void normalize3(FloatBuffer buffer){  int pos=buffer.position();  float x=buffer.get();  float y=buffer.get();  float z=buffer.get();  float length=(x * x) + (y * y) + (z * z);  if (length > 0d) {    length=(float)Math.sqrt(length);    x/=length;    y/=length;    z/=length;  }  buffer.position(pos);  buffer.put(x);  buffer.put(y);  buffer.put(z);}  }
class C{  ThreadQueue(String name,AtomicInteger counter){  this.name=name;  this.counter=counter;}  }
class C{  public ProviderMismatchException(){}  }
class C{  public static <K,V>SortedMap<K,V> asSynchronized(SortedMap<K,V> self){  return Collections.synchronizedSortedMap(self);}  }
class C{  void onStorageStateChange(String path,String oldState,String newState){}  }
class C{  public int readUnsignedIntToInt(){  int result=readInt();  if (result < 0) {    throw new IllegalStateException("Top bit not zero: " + result);  }  return result;}  }
class C{  @Deprecated static public SerialTrafficController instance(){  if (self == null) {    if (log.isDebugEnabled()) {      log.debug("creating a new SerialTrafficController object");    }    self=new SerialTrafficController();  }  return self;}  }
class C{  private BigDecimal createCashBasedAcct(MAcctSchema as,Fact fact,MInvoice invoice,BigDecimal allocationSource){  BigDecimal allocationAccounted=Env.ZERO;  double percent=invoice.getGrandTotal().doubleValue() / allocationSource.doubleValue();  if (percent > 0.99 && percent < 1.01)   percent=1.0;  log.config("Multiplier=" + percent + " - GrandTotal="+ invoice.getGrandTotal()+ " - Allocation Source="+ allocationSource);  Doc_Invoice docInvoice=(Doc_Invoice)Doc.get(new MAcctSchema[]{as},MInvoice.Table_ID,invoice.getC_Invoice_ID(),getTrxName());  docInvoice.loadDocumentDetails();  allocationAccounted=docInvoice.createFactCash(as,fact,new BigDecimal(percent));  log.config("Allocation Accounted=" + allocationAccounted);  if (as.isCreatePOCommitment() && !invoice.isSOTrx()) {    MInvoiceLine[] lines=invoice.getLines();    for (int i=0; i < lines.length; i++) {      Fact factC=Doc_Order.getCommitmentRelease(as,this,lines[i].getQtyInvoiced(),lines[i].getC_InvoiceLine_ID(),new BigDecimal(percent));      if (factC == null)       return null;      m_facts.add(factC);    }  }  return allocationAccounted;}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  append(m_doc.createEntityReference(name));}  }
class C{  synchronized private List<StackFrame> privateFrames(int start,int length) throws IncompatibleThreadStateException {  LocalCache snapshot=localCache;  try {    if (snapshot.frames == null || !isSubrange(snapshot,start,length)) {      JDWP.ThreadReference.Frames.Frame[] jdwpFrames=JDWP.ThreadReference.Frames.process(vm,this,start,length).frames;      int count=jdwpFrames.length;      snapshot.frames=new ArrayList<StackFrame>(count);      for (int i=0; i < count; i++) {        if (jdwpFrames[i].location == null) {          throw new InternalException("Invalid frame location");        }        StackFrame frame=new StackFrameImpl(vm,this,jdwpFrames[i].frameID,jdwpFrames[i].location);        snapshot.frames.add(frame);      }      snapshot.framesStart=start;      snapshot.framesLength=length;      return Collections.unmodifiableList(snapshot.frames);    } else {      int fromIndex=start - snapshot.framesStart;      int toIndex;      if (length == -1) {        toIndex=snapshot.frames.size() - fromIndex;      } else {        toIndex=fromIndex + length;      }      return Collections.unmodifiableList(snapshot.frames.subList(fromIndex,toIndex));    }  } catch (  JDWPException exc) {switch (exc.errorCode()) {case JDWP.Error.THREAD_NOT_SUSPENDED:case JDWP.Error.INVALID_THREAD:      throw new IncompatibleThreadStateException();default :    throw exc.toJDIException();}}}  }
class C{  Instruction scheduleHeapDefsEarly(HeapOperand<?>[] op,Instruction earlyPos,Instruction me){  if (op == null)   return earlyPos;  for (  HeapOperand<?> anOp : op) {    Instruction def=definingInstruction(anOp);    if (VM.VerifyAssertions)     VM._assert(def != null);    earlyPos=maxDominatorDepth(scheduleEarly(def),earlyPos);  }  return earlyPos;}  }
class C{  public void testBadResponseProto() throws IOException {  String reqdata="Request Data";  Request request=Request.newBuilder().setStrData(reqdata).build();  socket.withResponseProto(ByteString.copyFrom("bad response".getBytes()));  callRpc(request,ErrorReason.BAD_RESPONSE_PROTO);  verifyRequestToSocket(request);  assertNull(callBlockingRpc(request,ErrorReason.BAD_RESPONSE_PROTO));  verifyRequestToSocket(request);  callAsyncRpc(request,ErrorReason.BAD_RESPONSE_PROTO);  verifyRequestToSocket(request);}  }
class C{  private boolean do_LongZeroCheck(Operand div){  if (div instanceof LongConstantOperand) {    if (((LongConstantOperand)div).value == 0) {      endOfBasicBlock=true;      rectifyStateWithArithmeticExceptionHandler();      appendInstruction(Trap.create(TRAP,gc.getTemps().makeTempValidation(),TrapCodeOperand.DivByZero()));      return true;    } else {      if (DBG_CF) {        db("skipped gen of long_zero_check of " + div.asLongConstant().value);      }      setCurrentGuard(new TrueGuardOperand());      return false;    }  }  RegisterOperand guard=gc.getTemps().makeTempValidation();  appendInstruction(ZeroCheck.create(LONG_ZERO_CHECK,guard,div.copy()));  setCurrentGuard(guard);  rectifyStateWithArithmeticExceptionHandler();  return false;}  }
class C{  public static int nearestEvenInt(int num,boolean roundUp){  if (num % 2 == 0) {    return num;  } else {    if (roundUp)     return num + 1; else     return num - 1;  }}  }
class C{  public ServiceNotPublishedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static int pointInsideTriangle(Vector2f t0,Vector2f t1,Vector2f t2,Vector2f p){  int val1=counterClockwise(t0,t1,p);  if (val1 == 0) {    return 1;  }  int val2=counterClockwise(t1,t2,p);  if (val2 == 0) {    return 1;  }  if (val2 != val1) {    return 0;  }  int val3=counterClockwise(t2,t0,p);  if (val3 == 0) {    return 1;  }  if (val3 != val1) {    return 0;  }  return val3;}  }
class C{  @Override public void roll(int field,boolean increment){  roll(field,increment ? 1 : -1);}  }
class C{  protected boolean removed(){  return removed;}  }
class C{  protected void calcModulus(){  if (mXAxis == null || !mXAxis.isEnabled())   return;  if (!mXAxis.isAxisModulusCustom()) {    float[] values=new float[9];    mViewPortHandler.getMatrixTouch().getValues(values);    mXAxis.mAxisLabelModulus=(int)Math.ceil((mData.getXValCount() * mXAxis.mLabelRotatedWidth) / (mViewPortHandler.contentWidth() * values[Matrix.MSCALE_X]));  }  if (mLogEnabled)   Log.i(LOG_TAG,"X-Axis modulus: " + mXAxis.mAxisLabelModulus + ", x-axis label width: "+ mXAxis.mLabelWidth+ ", x-axis label rotated width: "+ mXAxis.mLabelRotatedWidth+ ", content width: "+ mViewPortHandler.contentWidth());  if (mXAxis.mAxisLabelModulus < 1)   mXAxis.mAxisLabelModulus=1;}  }
class C{  public String toString(){  return "null";}  }
class C{  public boolean usesMethod(String className,String methodName){  int classIndex=findClass(className);  if (classIndex == NOT_FOUND)   return false;  int methodNameIndex=findUtf8(methodName);  if (methodNameIndex == NOT_FOUND)   return false;  for (int i=1; i < maxPoolSize; i++) {    if (isMethod(i) && readValue(offsets[i]) == classIndex) {      int nameAndTypeIndex=readValue(offsets[i] + 2);      if (readValue(offsets[nameAndTypeIndex]) == methodNameIndex)       return true;    }  }  return false;}  }
class C{  @Inline @Override public final Offset offsetRead(ObjectReference ref,Word offset,Word location,int mode){  return Magic.getOffsetAtOffset(ref.toObject(),offset.toOffset(),location.toInt());}  }
class C{  public void forceLeader() throws GondolaException {  if (!isLeader()) {    sendRequestVoteRequest(false);  }}  }
class C{  public List<GenericValue> makeWorkEfforts(){  List<GenericValue> allWorkEfforts=new LinkedList<GenericValue>();  for (  ShoppingCartItem item : cartLines) {    if ("RENTAL_ORDER_ITEM".equals(item.getItemType())) {      GenericValue workEffort=getDelegator().makeValue("WorkEffort");      workEffort.set("workEffortId",item.getOrderItemSeqId());      workEffort.set("estimatedStartDate",item.getReservStart());      workEffort.set("estimatedCompletionDate",item.getReservStart(item.getReservLength()));      workEffort.set("reservPersons",item.getReservPersons());      workEffort.set("reserv2ndPPPerc",item.getReserv2ndPPPerc());      workEffort.set("reservNthPPPerc",item.getReservNthPPPerc());      workEffort.set("accommodationMapId",item.getAccommodationMapId());      workEffort.set("accommodationSpotId",item.getAccommodationSpotId());      allWorkEfforts.add(workEffort);    }  }  return allWorkEfforts;}  }
class C{  public KeywordRepeatFilter(TokenStream input){  super(input);}  }
class C{  public static void centerNode(final ZyGraph graph,final NaviNode node){  checkArguments(graph);  MoveFunctions.centerNode(graph,node);}  }
class C{  public synchronized void animatePanTo(Point2D p,long duration){  Point2D pp=new Point2D.Double();  m_itransform.transform(p,pp);  animatePanToAbs(pp,duration);}  }
class C{  public void upgrade(ShardId shard,ShardPath targetPath) throws IOException {  final Path[] paths=nodeEnvironment.availableShardPaths(shard);  if (isTargetPathConfigured(paths,targetPath) == false) {    throw new IllegalArgumentException("shard path must be one of the shards data paths");  }  assert needsUpgrading(shard) : "Should not upgrade a path that needs no upgrading";  logger.info("{} upgrading multi data dir to {}",shard,targetPath.getDataPath());  final ShardStateMetaData loaded=ShardStateMetaData.FORMAT.loadLatestState(logger,paths);  if (loaded == null) {    throw new IllegalStateException(shard + " no shard state found in any of: " + Arrays.toString(paths)+ " please check and remove them if possible");  }  logger.info("{} loaded shard state {}",shard,loaded);  ShardStateMetaData.FORMAT.write(loaded,loaded.version,targetPath.getShardStatePath());  Files.createDirectories(targetPath.resolveIndex());  try (SimpleFSDirectory directory=new SimpleFSDirectory(targetPath.resolveIndex())){    try (final Lock lock=directory.obtainLock(IndexWriter.WRITE_LOCK_NAME)){      upgradeFiles(shard,targetPath,targetPath.resolveIndex(),ShardPath.INDEX_FOLDER_NAME,paths);    } catch (    LockObtainFailedException ex) {      throw new IllegalStateException("Can't obtain lock on " + targetPath.resolveIndex(),ex);    }  }   upgradeFiles(shard,targetPath,targetPath.resolveTranslog(),ShardPath.TRANSLOG_FOLDER_NAME,paths);  logger.info("{} wipe upgraded directories",shard);  for (  Path path : paths) {    if (path.equals(targetPath.getShardStatePath()) == false) {      logger.info("{} wipe shard directories: [{}]",shard,path);      IOUtils.rm(path);    }  }  if (FileSystemUtils.files(targetPath.resolveIndex()).length == 0) {    throw new IllegalStateException("index folder [" + targetPath.resolveIndex() + "] is empty");  }  if (FileSystemUtils.files(targetPath.resolveTranslog()).length == 0) {    throw new IllegalStateException("translog folder [" + targetPath.resolveTranslog() + "] is empty");  }}  }
class C{  public static void main(final String[] args) throws Exception {  final Properties properties=new Properties();  properties.setProperty(Options.BUFFER_MODE,BufferMode.Disk.toString());  properties.setProperty(Options.CREATE_TEMP_FILE,"true");  properties.setProperty(TestOptions.TIMEOUT,"60");  properties.setProperty(TestOptions.NCLIENTS,"20");  properties.setProperty(TestOptions.NTRIALS,"10000");  properties.setProperty(TestOptions.KEYLEN,"4");  properties.setProperty(TestOptions.NOPS,"4");  properties.setProperty(TestOptions.ABORT_RATE,".05");  final IComparisonTest test=new StressTestConcurrentTx();  test.setUpComparisonTest(properties);  try {    test.doComparisonTest(properties);  }  finally {    try {      test.tearDownComparisonTest();    } catch (    Throwable t) {      log.warn("Tear down problem: " + t,t);    }  }}  }
class C{  @Override public void addDisposable(Disposable disposable){  if (disposables == null) {    disposables=new LinkedList<Disposable>();  }  disposables.add(disposable);}  }
class C{  protected void sequence_CastingFunction(ISerializationContext context,Function semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.FUNCTION__ACTION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.FUNCTION__ACTION));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.FUNCTION__TYPE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.FUNCTION__TYPE));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.FUNCTION__ARGS) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.FUNCTION__ARGS));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getCastingFunctionAccess().getActionActionRefParserRuleCall_0_0(),semanticObject.getAction());  feeder.accept(grammarAccess.getCastingFunctionAccess().getTypeTypeInfoParserRuleCall_1_0(),semanticObject.getType());  feeder.accept(grammarAccess.getCastingFunctionAccess().getArgsExpressionListParserRuleCall_3_0(),semanticObject.getArgs());  feeder.finish();}  }
class C{  private void storeServiceKeyInSessionBean(long key){  ui.findSessionBean().setSelectedServiceKeyForCustomer(key);}  }
class C{  public static boolean isEmpty(final Collection<?> collection){  return size(collection) == 0;}  }
class C{  public synchronized void addEntry(int position,VariableReference var,T entry){  if (!trace.containsKey(position))   trace.put(position,new HashMap<Integer,T>());  trace.get(position).put(var.getStPosition(),entry);}  }
class C{  public synchronized void addElement(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;}  }
class C{  public List<FacetResult> runSumAssociations() throws IOException {  index();  return sumAssociations();}  }
class C{  public static void main(final String[] args){  Log4J.init();  Configuration.setConfigurationFile("/home/hendrik/workspace/stendhal/server_strato.ini");  new DatabaseFactory().initializeDatabase();  String timedate="2000-01-01";  if (args.length > 0) {    timedate=args[0];  }  final Analyser analyser=new Analyser();  analyser.analyse(timedate);}  }
class C{  public static StdTypeList make(Type type){  StdTypeList result=new StdTypeList(1);  result.set(0,type);  return result;}  }
class C{  public boolean equalsXMLElement(IXMLElement elt){  if (!this.name.equals(elt.getName())) {    return false;  }  if (this.attributes.size() != elt.getAttributeCount()) {    return false;  }  Iterator enm=this.attributes.iterator();  while (enm.hasNext()) {    XMLAttribute attr=(XMLAttribute)enm.next();    if (!elt.hasAttribute(attr.getName(),attr.getNamespace())) {      return false;    }    String value=elt.getAttribute(attr.getName(),attr.getNamespace(),null);    if (!attr.getValue().equals(value)) {      return false;    }    String type=elt.getAttributeType(attr.getName(),attr.getNamespace());    if (!attr.getType().equals(type)) {      return false;    }  }  if (this.children.size() != elt.getChildrenCount()) {    return false;  }  for (int i=0; i < this.children.size(); i++) {    IXMLElement child1=this.getChildAtIndex(i);    IXMLElement child2=elt.getChildAtIndex(i);    if (!child1.equalsXMLElement(child2)) {      return false;    }  }  return true;}  }
class C{  private static HostStorageDomain findStoragePortOfHSD(List<HostStorageDomain> hsds,StoragePort storagePort){  for (  HostStorageDomain hsd : hsds) {    if (HDSUtils.getPortID(storagePort).equalsIgnoreCase(hsd.getPortID())) {      log.info("Found matching port for the HSD: {} {}",storagePort.getNativeGuid(),hsd.getObjectID());      return hsd;    }  }  return null;}  }
class C{  public boolean containsValue(Object value){  return indexOfValue(value) >= 0;}  }
class C{  public UF11(){  this(30,5);}  }
class C{  public static int sign(int iValue){  if (iValue > 0) {    return 1;  }  if (iValue < 0) {    return -1;  }  return 0;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getParameterList_();}  }
class C{  private static void updateOrderListSpanBeforeNewLine(Editable editable,int start,MDOrderListSpan mdOrderListSpan){  int position=EditUtils.findNextNewLineCharCompat(editable,start);  int startSpan=editable.getSpanStart(mdOrderListSpan);  int endSpan=editable.getSpanEnd(mdOrderListSpan);  if (endSpan <= position) {    return;  }  editable.removeSpan(mdOrderListSpan);  editable.setSpan(new MDOrderListSpan(10,mdOrderListSpan.getNested(),mdOrderListSpan.getNumber()),startSpan,position,Spanned.SPAN_INCLUSIVE_INCLUSIVE);}  }
class C{  public T type(String value){  return attr("type",value);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void next(){  if (hasNext())   set(1.0 - smoothing);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:01.547 -0400",hash_original_method="D7EF56BAEA0F19544F64896EACCC0C00",hash_generated_method="17A7166F91CB6958EDE976684EB39DDA") static private Object[] generateArgs(String input){  int i=0;  int j;  ArrayList<Object> out=new ArrayList<Object>();  while (i <= input.length()) {    j=findChar(',',input,i);    String arg=input.substring(i,j);    try {      out.add(new Integer(arg));    } catch (    NumberFormatException e) {      out.add(arg);    }    i=j + 1;  }  return out.toArray();}  }
class C{  private void validateExceptionOnSending(ClientProducer producer,ClientMessage message){  ActiveMQException expected=null;  try {    producer.send(message);  } catch (  ActiveMQException e) {    expected=e;  }  assertNotNull(expected);  assertEquals(ActiveMQExceptionType.ADDRESS_FULL,expected.getType());}  }
class C{  public static AsynchronousChannelProvider create(){  String osname=AccessController.doPrivileged(new GetPropertyAction("os.name"));  if (osname.equals("SunOS"))   return createProvider("sun.nio.ch.SolarisAsynchronousChannelProvider");  if (osname.equals("Linux"))   return createProvider("sun.nio.ch.LinuxAsynchronousChannelProvider");  if (osname.contains("OS X"))   return createProvider("sun.nio.ch.BsdAsynchronousChannelProvider");  if (osname.equals("AIX"))   return createProvider("sun.nio.ch.AixAsynchronousChannelProvider");  throw new InternalError("platform not recognized");}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  boolean consumed=super.onTouchEvent(event);  if (!consumed) {    consumed=this.pickGestureDetector.onTouchEvent(event);  }  return consumed;}  }
class C{  private String prependPath(String path){  if (path.charAt(0) != '/') {    return (new StringBuilder()).append("/").append(path).toString();  }  return path;}  }
class C{  Entity ce(){  return clientgui.getClient().getGame().getEntity(cen);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.601 -0500",hash_original_method="20C18D8617332347FA916FFE36E3E911",hash_generated_method="7E2AC3F4E75A651E0CFEEF3C2B877105") public AuthScope(final AuthScope authscope){  super();  if (authscope == null) {    throw new IllegalArgumentException("Scope may not be null");  }  this.host=authscope.getHost();  this.port=authscope.getPort();  this.realm=authscope.getRealm();  this.scheme=authscope.getScheme();}  }
class C{  private Scope peek() throws JSONException {  if (stack.isEmpty()) {    throw new JSONException("Nesting problem");  }  return stack.get(stack.size() - 1);}  }
class C{  public void convertStringAttsToNominal(){  Instances miningSchemaI=getFieldsAsInstances();  if (miningSchemaI.checkForStringAttributes()) {    ArrayList<Attribute> attInfo=new ArrayList<Attribute>();    for (int i=0; i < miningSchemaI.numAttributes(); i++) {      Attribute tempA=miningSchemaI.attribute(i);      if (tempA.isString()) {        ArrayList<String> valueVector=new ArrayList<String>();        for (int j=0; j < tempA.numValues(); j++) {          valueVector.add(tempA.value(j));        }        Attribute newAtt=new Attribute(tempA.name(),valueVector);        attInfo.add(newAtt);      } else {        attInfo.add(tempA);      }    }    Instances newI=new Instances("miningSchema",attInfo,0);    if (m_fieldInstancesStructure.classIndex() >= 0) {      newI.setClassIndex(m_fieldInstancesStructure.classIndex());    }    m_fieldInstancesStructure=newI;  }}  }
class C{  private void initOperatorSettings(){  List<String[]> tupelList=new LinkedList<>();  String rawParameterString=operator.getParameters().getParameterAsSpecified(ExampleFilter.PARAMETER_FILTERS_LIST);  List<String[]> operatorFilterList=rawParameterString != null ? ParameterTypeList.transformString2List(rawParameterString) : Collections.<String[]>emptyList();  for (  String[] entry : operatorFilterList) {    tupelList.add(ParameterTypeTupel.transformString2Tupel(entry[1]));  }  model.setRowTupels(tupelList);  if (operator.getParameterAsBoolean(ExampleFilter.PARAMETER_FILTERS_LOGIC_AND)) {    radioButtonAND.setSelected(true);  } else {    radioButtonOR.setSelected(true);  }  if (!operator.getParameterAsBoolean(ExampleFilter.PARAMETER_FILTERS_CHECK_METADATA)) {    checkBoxMetadata.setSelected(false);    model.setCheckMetaDataForComparators(false);  }}  }
class C{  public String numClustersTipText(){  return "set number of clusters";}  }
class C{  public Spring removeListener(SpringListener listenerToRemove){  if (listenerToRemove == null) {    throw new IllegalArgumentException("listenerToRemove is required");  }  mListeners.remove(listenerToRemove);  return this;}  }
class C{  public static <E>ImmutableList<E> copyOf(Iterator<? extends E> elements){  if (!elements.hasNext()) {    return of();  }  E first=elements.next();  if (!elements.hasNext()) {    return of(first);  } else {    return new ImmutableList.Builder<E>().add(first).addAll(elements).build();  }}  }
class C{  @Override public void tokenize(String s){  m_CurrentPos=0;  m_Str=new char[s.length()];  s.getChars(0,s.length(),m_Str,0);}  }
class C{  public boolean isInfeedBlocked(){  return !incomingActive;}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.531 -0500",hash_original_method="ECAD9C42756FF84B730590BF5F3636AE",hash_generated_method="724163EF298FFE71935F24A4D2157983") protected String urlString() throws ParseException {  StringBuffer retval=new StringBuffer();  lexer.selectLexer("charLexer");  while (lexer.hasMoreChars()) {    char la=lexer.lookAhead(0);    if (la == ' ' || la == '\t' || la == '\n' || la == '>' || la == '<')     break;    lexer.consume(0);    retval.append(la);  }  return retval.toString();}  }
class C{  public Beacon(){  method=AnalysisMethod.DEFAULT;}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public UTF16Decoder(InputStream is) throws IOException {  super(is);  int b1=is.read();  if (b1 == -1) {    endOfStreamError("UTF-16");  }  int b2=is.read();  if (b2 == -1) {    endOfStreamError("UTF-16");  }  int m=(((b1 & 0xff) << 8) | (b2 & 0xff));switch (m) {case 0xfeff:    bigEndian=true;  break;case 0xfffe:break;default :charError("UTF-16");}}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (!inputHeader.contains(".dep")) {      throw new Exception("No input file found");    }    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,0);        } else {          outputFile.setValue(row,col,1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static Instance createInstance(int sequenceType,int orientationType,Gesture gesture,String label){  float[] pts;  Instance instance;  if (sequenceType == GestureStore.SEQUENCE_SENSITIVE) {    pts=temporalSampler(orientationType,gesture);    instance=new Instance(gesture.getID(),pts,label);    instance.normalize();  } else {    pts=spatialSampler(gesture);    instance=new Instance(gesture.getID(),pts,label);  }  return instance;}  }
class C{  public void waitAfterStep(){  try {    int msec=getParamAsInt(PARAM_SIM_SPEED);    if (msec == Integer.MAX_VALUE)     setState(State.PAUSED);    Thread.sleep(msec);  } catch (  InterruptedException e) {  }}  }
class C{  default Stream<String> renderJavadocTags(Generator gen,M model){  final Stream<String> stream=gen.onEach(model.getTags());  if (model.getTags().isEmpty()) {    return stream;  } else {    return Stream.concat(Stream.of(EMPTY),stream);  }}  }
class C{  protected void addOperatorPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NumericalAddSubtractExpression_operator_feature"),getString("_UI_PropertyDescriptor_description","_UI_NumericalAddSubtractExpression_operator_feature","_UI_NumericalAddSubtractExpression_type"),ExpressionsPackage.Literals.NUMERICAL_ADD_SUBTRACT_EXPRESSION__OPERATOR,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void endCDATA() throws org.xml.sax.SAXException {  m_inCData=false;}  }
class C{  private void netSearchForBlob() throws TimeoutException {  if (this.netSearchDone)   return;  this.netSearchDone=true;  CachePerfStats stats=region.getCachePerfStats();  long start=0;  Set sendSet=null;  this.result=null;  RegionAttributes attrs=region.getAttributes();  this.requestInProgress=true;  this.selectedNodeDead=false;  initRemainingTimeout();  start=stats.startNetsearch();  try {    List<InternalDistributedMember> replicates=new ArrayList(advisor.adviseInitializedReplicates());    if (replicates.size() > 1) {      Collections.shuffle(replicates);    }    for (    InternalDistributedMember replicate : replicates) {synchronized (this.pendingResponders) {        this.pendingResponders.clear();      }      this.requestInProgress=true;      this.remoteGetInProgress=true;synchronized (this) {        setSelectedNode(replicate);        this.lastNotifySpot=0;      }      sendValueRequest(replicate);      waitForObject2(this.remainingTimeout);      if (this.authorative) {        if (this.result != null) {          this.netSearch=true;        }        return;      } else {        this.selectedNode=null;        this.selectedNodeDead=false;        this.lastNotifySpot=0;        this.result=null;      }    }synchronized (membersLock) {      Set recipients=this.advisor.adviseNetSearch();      if (recipients.isEmpty()) {        return;      }      ArrayList list=new ArrayList(recipients);      Collections.shuffle(list);      sendSet=new HashSet(list);synchronized (this.pendingResponders) {        this.pendingResponders.clear();        this.pendingResponders.addAll(list);      }    }    boolean useMulticast=region.getMulticastEnabled() && (region instanceof DistributedRegion) && ((DistributedRegion)region).getSystem().getConfig().getMcastPort() != 0;    QueryMessage.sendMessage(this,this.regionName,this.key,useMulticast,sendSet,this.remainingTimeout,attrs.getEntryTimeToLive().getTimeout(),attrs.getEntryIdleTimeout().getTimeout());synchronized (this) {      boolean done=false;      do {        waitForObject2(this.remainingTimeout);        if (this.selectedNodeDead && remoteGetInProgress) {          sendNetSearchRequest();        } else         done=true;      } while (!done);      if (this.result != null) {        this.netSearch=true;      }      return;    }  }  finally {    stats.endNetsearch(start);  }}  }
class C{  private void executeLPSolve(String problemPath){  StringBuilder command=new StringBuilder();  command.append(lpSolveLocation + " ");  if (maxIntegerProgramTime > 0) {    command.append("-timeout " + maxIntegerProgramTime + " ");  }  command.append("-depth " + depthLimit + " ");  command.append(problemPath);  StringWriter output=new StringWriter();  PrintWriter out=new PrintWriter(output);  StringWriter error=new StringWriter();  PrintWriter err=new PrintWriter(error);  Utils.systemHard(command.toString(),out,err);  BufferedReader reader=new BufferedReader(new StringReader(output.toString()));  lp_solve_solution=new double[numVars];  int var=0;  try {    while (reader.ready()) {      String next=reader.readLine();      if (next == null)       return;      if (next.startsWith("x")) {        String[] parts=next.trim().split("\\s+");        if (parts[0].equals("x"))         continue;        assert (parts[0].equals(var(var)));        double val=Double.parseDouble(parts[1]);        lp_solve_solution[var]=val;        var++;      } else       if (next.startsWith("Value of objective function")) {        String[] parts=next.split("\\s+");        lp_solve_objective_value=Double.parseDouble(parts[parts.length - 1]);      }    }  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.232 -0500",hash_original_method="ABFA2AA3044F8D161D7CA2C8E1F71BE9",hash_generated_method="EE380301ABB52F8350D1090A1D5C072D") public static int lowestOneBit(int i){  return i & -i;}  }
class C{  private boolean accept(final IChunkMessage<?> msg) throws RemoteException {  final UUID queryId=msg.getQueryId();  if (queryId == null) {    throw new AssertionError();  }  q=getRunningQuery(queryId);  if (q == null) {    final boolean isController=getServiceUUID().equals(msg.getQueryControllerId());    if (isController) {      throw new AssertionError("Query not running on controller: thisService=" + getServiceUUID() + ", msg="+ msg);    }    try {      q=getDeclaredQuery(queryId);    } catch (    IllegalArgumentException ex) {      if (log.isInfoEnabled())       log.info("Query is gone: isDataService=" + isDataService() + ", message="+ msg,ex);      return false;    }    if (q == null) {      throw new AssertionError();    }  }  if (!q.isCancelled() && !msg.isMaterialized()) {    try {      msg.materialize(q);    } catch (    Throwable t) {      if (!AbstractRunningQuery.isRootCauseInterrupt(t)) {        log.error("Problem materializing message: " + msg,t);      }      return false;    }  }  return !q.isCancelled();}  }
class C{  public boolean supportsANSI92FullSQL() throws SQLException {  return false;}  }
class C{  public static void sortDesc(long[] a,int[] b,long[] tmpa,int[] tmpb){  hybridsortDesc(a,b,tmpa,tmpb,0,a.length - 1);}  }
class C{  @Override public void run(){  amIActive=true;  int row, col, x, y;  float progress=0;  double z;  int i, b, c, ICLCA;  boolean flag=false;  double flowDir=0;  double outletID=0;  double SCAValue;  double maxSCA, d1, d2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String pointerHeader=args[0];  String caHeader=args[1];  String outputHeader=args[2];  double SCAThreshold=Double.parseDouble(args[3]);  if (pointerHeader.isEmpty() || caHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointer=new WhiteboxRaster(pointerHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    double noData=pointer.getNoDataValue();    String tempFile=caHeader.replace(".dep","_temp.dep");    FileUtilities.copyFile(new File(caHeader),new File(tempFile));    FileUtilities.copyFile(new File(caHeader.replace(".dep",".tas")),new File(tempFile.replace(".dep",".tas")));    contArea=new WhiteboxRaster(tempFile,"rw");    contArea.isTemporaryFile=true;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",caHeader,WhiteboxRaster.DataType.FLOAT,-999);    output.setDataScale(WhiteboxRasterBase.DataScale.CATEGORICAL);    output.setPreferredPalette("categorical1.pal");    outletID=1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pointer.getValue(row,col) != noData) {          flag=false;          for (i=0; i < 8; i++) {            if (pointer.getValue(col + dX[i],row + dY[i]) == inflowingVals[i]) {              flag=true;            }          }          if (!flag) {            flag=false;            x=col;            y=row;            do {              flowDir=pointer.getValue(y,x);              if (flowDir > 0) {                i=(int)(Math.log(flowDir) / LnOf2);                x+=dX[i];                y+=dY[i];              } else {                flag=true;              }              SCAValue=contArea.getValue(y,x);              if (SCAValue >= SCAThreshold) {                maxSCA=-99999;                ICLCA=8;                for (i=0; i < 8; i++) {                  b=x + dX[i];                  c=y + dY[i];                  if (pointer.getValue(c,b) == inflowingVals[i]) {                    z=contArea.getValue(c,b);                    if (z > maxSCA) {                      maxSCA=z;                      ICLCA=i;                    }                  }                }                b=x + dX[ICLCA];                c=y + dY[ICLCA];                if (contArea.getValue(c,b) > SCAThreshold) {                  flag=true;                } else {                  d1=Math.abs(contArea.getValue(c,b) - SCAThreshold);                  d2=Math.abs(contArea.getValue(y,x) - SCAThreshold);                  if (d1 < d2) {                    output.setValue(c,b,outletID);                    decrementFlowpath(c,b,contArea.getValue(c,b));                  } else {                    output.setValue(y,x,outletID);                    decrementFlowpath(y,x,contArea.getValue(y,x));                  }                  outletID++;                }              }            } while (!flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == -999 && pointer.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pointer.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != -999) {                outletID=z;                flag=true;              }            } else {              outletID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,outletID);          do {            flowDir=pointer.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != -999) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,outletID);          } while (!flag);        } else         if (pointer.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pointer.close();    contArea.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected Workflow.Method createAddVolumesToCGMethod(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs){  return new Workflow.Method(ADD_VOLUMES_TO_CG_METHOD_NAME,vplexURI,cgURI,vplexVolumeURIs);}  }
class C{  public void testCache() throws Exception {  Loader loader=new Loader(false);  ResourceBundle b1=getResourceBundle(loader,"Bug4179766Resource");  if (b1 == null) {    errln("Resource not found: Bug4179766Resource");  }  ResourceBundle b2=getResourceBundle(loader,"Bug4179766Resource");  if (b2 == null) {    errln("Resource not found: Bug4179766Resource");  }  printIDInfo("[bundle1]",b1);  printIDInfo("[bundle2]",b2);  if (b1 != b2) {    errln("Different objects returned by same ClassLoader");  }}  }
class C{  private void putInMultiplePartitionRegionFromOneVm(VM vm0,final int startIndexForRegion,final int endIndexForRegion,final long startIndexForKey,final long endIndexForKey) throws Throwable {  int AsyncInvocationArrSize=3;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  async[0]=vm0.invokeAsync(putFromOneVm(startIndexForKey,endIndexForKey,startIndexForRegion,endIndexForRegion));  async[1]=vm0.invokeAsync(putFromOneVm(startIndexForKey + totalBucketNumProperty,endIndexForKey + totalBucketNumProperty,startIndexForRegion,endIndexForRegion));  async[2]=vm0.invokeAsync(putFromOneVm(startIndexForKey + 2 * totalBucketNumProperty,endIndexForKey + 2 * totalBucketNumProperty,startIndexForRegion,endIndexForRegion));  for (int count=0; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("exception during " + count,async[count].getException());    }  }}  }
class C{  public void write(ProcessingInstruction pi) throws SAXException {  String target=pi.getTarget();  String text=pi.getText();  contentHandler.processingInstruction(target,text);}  }
class C{  private int[][] readSamples(ByteBuffer buf){  int size=1;  for (int i=0; i < getNumInputs(); i++) {    size*=getSize(i);  }  int[][] samples=new int[size][getNumOutputs()];  int bitLoc=0;  int byteLoc=0;  int index=0;  for (int i=0; i < getNumInputs(); i++) {    for (int j=0; j < getSize(i); j++) {      for (int k=0; k < getNumOutputs(); k++) {        int value=0;        int toRead=getBitsPerSample();        byte curByte=buf.get(byteLoc);        while (toRead > 0) {          int nextBit=((curByte >> (7 - bitLoc)) & 0x1);          value|=nextBit << (toRead - 1);          if (++bitLoc == 8) {            bitLoc=0;            byteLoc++;            if (toRead > 1) {              curByte=buf.get(byteLoc);            }          }          toRead--;        }        samples[index][k]=value;      }      index++;    }  }  return samples;}  }
class C{  public void addNonCollider(Triple nonColliderTrip){  nonColliders.add(nonColliderTrip);}  }
class C{  public ProxySelectorRoutePlanner(SchemeRegistry schreg,ProxySelector prosel){  if (schreg == null) {    throw new IllegalArgumentException("SchemeRegistry must not be null.");  }  schemeRegistry=schreg;  proxySelector=prosel;}  }
class C{  public void dynamicDisplay(int col){  if (!isSingleRow() || m_onlyMultiRow)   return;  if (!m_mTab.isOpen())   return;  if (col > 0) {    GridField changedField=m_mTab.getField(col);    String columnName=changedField.getColumnName();    ArrayList<GridField> dependants=m_mTab.getDependantFields(columnName);    log.config("(" + m_mTab.toString() + ") "+ columnName+ " - Dependents="+ dependants.size());    if (dependants.size() == 0 && changedField.getCallout().length() > 0) {      Component[] comp=vPanel.getComponentsRecursive();      for (int i=0; i < comp.length; i++) {        if (columnName.equals(comp[i].getName()) && comp[i] instanceof VEditor) {          VEditor ve=(VEditor)comp[i];          boolean manMissing=false;          boolean noValue=changedField.getValue() == null || changedField.getValue().toString().length() == 0;          if (noValue && changedField.isEditable(true) && changedField.isMandatory(true))           manMissing=true;          ve.setBackground(manMissing || changedField.isError());          break;        }      }      return;    }  }  boolean noData=m_mTab.getRowCount() == 0;  log.config(m_mTab.toString() + " - Rows=" + m_mTab.getRowCount());  Set<String> hiddens=new HashSet<String>();  Component[] comps=vPanel.getComponentsRecursive();  for (int i=0; i < comps.length; i++) {    Component comp=comps[i];    String columnName=comp.getName();    if (comp instanceof VChart && isSingleRow()) {      ((VChart)comp).createChart();    }    if (columnName != null && columnName.length() > 0) {      GridField mField=m_mTab.getField(columnName);      if (mField != null) {        if (mField.isDisplayed(true)) {          if (!comp.isVisible())           comp.setVisible(true);          if (comp instanceof VString) {            VString vs=(VString)comp;            if ((vs.getVFormat() != null && vs.getVFormat().length() > 0 && mField.getVFormat() == null) || (vs.getVFormat() == null && mField.getVFormat() != null && mField.getVFormat().length() > 0) || (vs.getVFormat() != null && mField.getVFormat() != null && !vs.getVFormat().equals(mField.getVFormat()))) {              vs.setVFormat(mField.getVFormat());            }          }          if (comp instanceof VEditor) {            VEditor ve=(VEditor)comp;            if (noData)             ve.setReadWrite(false); else {              boolean rw=mField.isEditable(true);              ve.setReadWrite(rw);              boolean manMissing=false;              if (rw && mField.getValue() == null && mField.isMandatory(true))               manMissing=true;              ve.setBackground(manMissing || mField.isError());            }          }        } else {          if (comp.isVisible())           comp.setVisible(false);          hiddens.add(columnName);        }      }    }  }  for (int i=0; i < comps.length; i++) {    Component comp=comps[i];    if (comp instanceof CollapsiblePanel) {      if (comp.getName() == null || comp.getName().startsWith("IncludedTab#"))       continue; else {        boolean hasVisible=false;        Component[] childs=((CollapsiblePanel)comp).getCollapsiblePane().getContentPane().getComponents();        for (int j=0; j < childs.length; j++) {          if (childs[j].isVisible()) {            String columnName=childs[j].getName();            if (columnName != null && columnName.length() > 0) {              GridField mField=m_mTab.getField(columnName);              if (mField != null) {                hasVisible=true;                break;              }            }          }        }        if (comp.isVisible() != hasVisible)         comp.setVisible(hasVisible);      }    }  }  log.config(m_mTab.toString() + " - fini - " + (col <= 0 ? "complete" : "seletive"));}  }
class C{  @Override public void zoom(double percent){  if (percent > 0.0) {    double range=getRangeAxis().getRange().getLength();    double scaledRange=range * percent;    getRangeAxis().setRange(this.anchorValue - scaledRange / 2.0,this.anchorValue + scaledRange / 2.0);  } else {    getRangeAxis().setAutoRange(true);  }}  }
class C{  public JSONArray put(Collection value){  put(new JSONArray(value));  return this;}  }
class C{  protected String doIt() throws Exception {  log.info("C_OrderLine_ID=" + p_C_OrderLine_ID);  if (p_C_OrderLine_ID == 0)   throw new IllegalArgumentException("No OrderLine");  MOrderLine line=new MOrderLine(getCtx(),p_C_OrderLine_ID,get_TrxName());  if (line.get_ID() == 0)   throw new IllegalArgumentException("Order line not found");  MOrder order=new MOrder(getCtx(),line.getC_Order_ID(),get_TrxName());  if (!MOrder.DOCSTATUS_Completed.equals(order.getDocStatus()))   throw new IllegalArgumentException("Order not completed");  MDocType doc=new MDocType(getCtx(),order.getC_DocType_ID(),get_TrxName());  if ((line.getQtyOrdered().subtract(line.getQtyDelivered())).compareTo(Env.ZERO) <= 0) {    if (!doc.getDocSubTypeSO().equals("ON")) {      return "Ordered quantity already shipped";    }  }  if (!ignorePrevProduction) {    String docNo=DB.getSQLValueString(get_TrxName(),"SELECT max(DocumentNo) " + "FROM M_Production WHERE C_OrderLine_ID = ?",p_C_OrderLine_ID);    if (docNo != null) {      throw new IllegalArgumentException("Production has already been created: " + docNo);    }  }  MProduction production=new MProduction(line);  MProduct product=new MProduct(getCtx(),line.getM_Product_ID(),get_TrxName());  production.setM_Product_ID(line.getM_Product_ID());  production.setProductionQty(line.getQtyOrdered().subtract(line.getQtyDelivered()));  production.setDatePromised(line.getDatePromised());  if (product.getM_Locator_ID() > 0)   production.setM_Locator_ID(product.getM_Locator_ID());  production.setC_OrderLine_ID(p_C_OrderLine_ID);  int locator=product.getM_Locator_ID();  if (locator == 0)   locator=MWarehouse.get(getCtx(),line.getM_Warehouse_ID()).getDefaultLocator().get_ID();  production.setM_Locator_ID(locator);  production.saveEx();  production.createLines(false);  production.setIsCreated("Y");  production.saveEx();  return "Production created -- " + production.get_ValueAsString("DocumentNo");}  }
class C{  public final void testConjunctiveWithContextParameter(){  assertNotNull(Validators.conjunctive(getContext(),Validators.notEmpty("foo")));}  }
class C{  public static void checkUnknownSymbol(String text,SymbolTable symtab){  assertEquals(null,symtab.find(text));  assertEquals(UNKNOWN_SYMBOL_ID,symtab.findSymbol(text));  if (symtab.isReadOnly()) {    try {      symtab.intern(text);      fail("Expected exception");    } catch (    ReadOnlyValueException e) {    }  }}  }
class C{  public InstantConverter removeInstantConverter(InstantConverter converter) throws SecurityException {  checkAlterInstantConverters();  if (converter == null) {    return null;  }  InstantConverter[] removed=new InstantConverter[1];  iInstantConverters=iInstantConverters.remove(converter,removed);  return removed[0];}  }
class C{  protected void fireShadowTreeEvent(BindableElement elt,String type,XBLShadowTreeElement e){  DocumentEvent de=(DocumentEvent)elt.getOwnerDocument();  ShadowTreeEvent evt=(ShadowTreeEvent)de.createEvent("ShadowTreeEvent");  evt.initShadowTreeEventNS(XBL_NAMESPACE_URI,type,true,false,e);  elt.dispatchEvent(evt);}  }
class C{  public <T>void put(PropertyKey<T> key,@Nullable T value){  Cache<PropertyKey<Object>,Object> p=properties(value != null);  if (p != null) {    @SuppressWarnings("unchecked") PropertyKey<Object> k=(PropertyKey<Object>)key;    if (value != null) {      p.put(k,value);    } else {      p.invalidate(k);    }  }}  }
class C{  public void add(char ch){  if (i == b.length) {    char[] new_b=new char[i + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  b[i++]=ch;}  }
class C{  private Route nextPostponed(){  return postponedRoutes.remove(0);}  }
class C{  public AccountHeaderBuilder withHeaderBackground(ImageHolder headerBackground){  this.mHeaderBackground=headerBackground;  return this;}  }
class C{  public static byte[] toBinary(Object o,byte[] defaultValue){  try {    return toBinary(o);  } catch (  PageException e) {    return defaultValue;  }}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  getMenuInflater().inflate(R.menu.menu_main,menu);  return true;}  }
class C{  public void updateRaster(int x1,int y1,int w,int h,byte[] bytes,Color[] colorTable,int trans,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(x1,y1,w,h,bytes,colorTable,trans,properties,link.dos);}  }
class C{  private int indexOf(char c){  int start=0;  int end=intervalls.size() - 1;  while (start <= end) {    int check=(start + end) / 2;    Interval i=(Interval)intervalls.elementAt(check);    if (start == end)     return i.contains(c) ? start : -1;    if (c < i.start) {      end=check - 1;      continue;    }    if (c > i.end) {      start=check + 1;      continue;    }    return check;  }  return -1;}  }
class C{  public Extension(ObjectIdentifier extensionId,boolean critical,byte[] extensionValue) throws IOException {  this.extensionId=extensionId;  this.critical=critical;  DerValue inDerVal=new DerValue(extensionValue);  this.extensionValue=inDerVal.getOctetString();}  }
class C{  @Override public boolean onKeyDown(int keyCode,KeyEvent event){switch (keyCode) {case KeyEvent.KEYCODE_DPAD_LEFT:    playSoundEffect(SoundEffectConstants.NAVIGATION_LEFT);  return true;case KeyEvent.KEYCODE_DPAD_RIGHT:playSoundEffect(SoundEffectConstants.NAVIGATION_RIGHT);return true;case KeyEvent.KEYCODE_DPAD_CENTER:case KeyEvent.KEYCODE_ENTER:mReceivedInvokeKeyDown=true;}return super.onKeyDown(keyCode,event);}  }
class C{  public void recompose(Vector recomposableElements) throws TransformerException {  int n=getIncludeCountComposed();  for (int i=-1; i < n; i++) {    Stylesheet included=getIncludeComposed(i);    int s=included.getOutputCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getOutput(j));    }    s=included.getAttributeSetCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getAttributeSet(j));    }    s=included.getDecimalFormatCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getDecimalFormat(j));    }    s=included.getKeyCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getKey(j));    }    s=included.getNamespaceAliasCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getNamespaceAlias(j));    }    s=included.getTemplateCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getTemplate(j));    }    s=included.getVariableOrParamCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getVariableOrParam(j));    }    s=included.getStripSpaceCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getStripSpace(j));    }    s=included.getPreserveSpaceCount();    for (int j=0; j < s; j++) {      recomposableElements.addElement(included.getPreserveSpace(j));    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputHeader;  String assignmentFieldName;  int assignmentFieldNum=-1;  String baseFileHeader="not specified";  double backgroundValue=0;  int row, col;  double rowYCoord, colXCoord, value, z;  int progress=0;  double cellSize=-1.0;  int rows, topRow, bottomRow, leftCol, rightCol;  int cols;  double noData=-32768.0;  double east;  double west;  double north;  double south;  DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  Object[] data;  Object[][] allRecords=null;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime, yPrime;  boolean useRecID=false;  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputHeader=args[1];  assignmentFieldName=args[2];  if (args[3].toLowerCase().contains("nodata")) {    backgroundValue=noData;  } else {    backgroundValue=Double.parseDouble(args[3]);  }  if (!args[4].toLowerCase().contains("not specified")) {    cellSize=Double.parseDouble(args[4]);  }  baseFileHeader=args[5];  if ((inputFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    int numRecs=input.getNumberOfRecords();    if (input.getShapeType() != ShapeType.POLYLINE && input.getShapeType() != ShapeType.POLYLINEZ && input.getShapeType() != ShapeType.POLYLINEM && input.getShapeType() != ShapeType.POLYGON && input.getShapeType() != ShapeType.POLYGONZ && input.getShapeType() != ShapeType.POLYGONM) {      showFeedback("The input shapefile must be of a 'polyline' or " + "'polygon' data type.");      return;    }    AttributeTable reader=input.getAttributeTable();    int numberOfFields=reader.getFieldCount();    for (i=0; i < numberOfFields; i++) {      DBFField field=reader.getField(i);      if (field.getName().equals(assignmentFieldName)) {        assignmentFieldNum=i;        if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {          dataType=WhiteboxRasterBase.DataType.FLOAT;        } else {          showFeedback("The type of data contained in the field " + "can not be mapped into grid cells. Choose a " + "numerical field. The record ID will be used "+ "instead.");          useRecID=true;        }      }    }    if (assignmentFieldNum < 0) {      useRecID=true;    }    WhiteboxRaster output;    if ((cellSize > 0) || ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified")))) {      if ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified"))) {        cellSize=Math.min((input.getyMax() - input.getyMin()) / 500.0,(input.getxMax() - input.getxMin()) / 500.0);      }      north=input.getyMax() + cellSize / 2.0;      south=input.getyMin() - cellSize / 2.0;      east=input.getxMax() + cellSize / 2.0;      west=input.getxMin() - cellSize / 2.0;      rows=(int)(Math.ceil((north - south) / cellSize));      cols=(int)(Math.ceil((east - west) / cellSize));      east=west + cols * cellSize;      south=north - rows * cellSize;      output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,dataType,backgroundValue,noData);    } else {      output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,backgroundValue);      if (backgroundValue == noData) {        output.setNoDataValue(noData);      }    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : input.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    if (!useRecID) {      allRecords=new Object[numRecs][numberOfFields];      int a=0;      while ((data=reader.nextRecord()) != null) {        System.arraycopy(data,0,allRecords[a],0,numberOfFields);        a++;      }    }    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    RowPriorityGridCell cell;    int numRecords=input.getNumberOfRecords();    int count=0;    int progressCount=(int)(numRecords / 100.0);    if (progressCount <= 0) {      progressCount=1;    }    ShapeFileRecord record;    for (    RecordInfo ri : myList) {      record=input.getRecord(ri.recNumber - 1);      if (!useRecID) {        data=reader.nextRecord();        value=Double.valueOf(data[assignmentFieldNum].toString());      } else {        value=record.getRecordNumber();      }      geometry=getXYFromShapefileRecord(record);      numPoints=geometry.length;      numParts=partData.length;      for (part=0; part < numParts; part++) {        box=new BoundingBox();        startingPointInPart=partData[part];        if (part < numParts - 1) {          endingPointInPart=partData[part + 1];        } else {          endingPointInPart=numPoints;        }        for (i=startingPointInPart; i < endingPointInPart; i++) {          if (geometry[i][0] < box.getMinX()) {            box.setMinX(geometry[i][0]);          }          if (geometry[i][0] > box.getMaxX()) {            box.setMaxX(geometry[i][0]);          }          if (geometry[i][1] < box.getMinY()) {            box.setMinY(geometry[i][1]);          }          if (geometry[i][1] > box.getMaxY()) {            box.setMaxY(geometry[i][1]);          }        }        topRow=output.getRowFromYCoordinate(box.getMaxY());        bottomRow=output.getRowFromYCoordinate(box.getMinY());        leftCol=output.getColumnFromXCoordinate(box.getMinX());        rightCol=output.getColumnFromXCoordinate(box.getMaxX());        for (row=topRow; row <= bottomRow; row++) {          rowYCoord=output.getYCoordinateFromRow(row);          for (i=startingPointInPart; i < endingPointInPart - 1; i++) {            if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {              y1=geometry[i][1];              y2=geometry[i + 1][1];              if (y2 != y1) {                x1=geometry[i][0];                x2=geometry[i + 1][0];                xPrime=x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1);                col=output.getColumnFromXCoordinate(xPrime);                pq.add(new RowPriorityGridCell(row,col,value));              }            }          }        }        for (col=leftCol; col <= rightCol; col++) {          colXCoord=output.getXCoordinateFromColumn(col);          for (i=startingPointInPart; i < endingPointInPart - 1; i++) {            if (isBetween(colXCoord,geometry[i][0],geometry[i + 1][0])) {              x1=geometry[i][0];              x2=geometry[i + 1][0];              if (x1 != x2) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                yPrime=y1 + (colXCoord - x1) / (x2 - x1) * (y2 - y1);                row=output.getRowFromYCoordinate(yPrime);                pq.add(new RowPriorityGridCell(row,col,value));              }            }          }        }      }      if (pq.size() >= flushSize) {        j=0;        numCellsToWrite=pq.size();        do {          cell=pq.poll();          output.setValue(cell.row,cell.col,cell.z);          j++;          if (j % 1000 == 0) {            if (cancelOp) {              cancelOperation();              return;            }            updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));          }        } while (pq.size() > 0);      }      if (cancelOp) {        cancelOperation();        return;      }      count++;      if (count % progressCount == 0) {        progress++;        updateProgress(progress);      }    }    j=0;    numCellsToWrite=pq.size();    do {      cell=pq.poll();      output.setValue(cell.row,cell.col,cell.z);      j++;      if (j % 1000 == 0) {        if (cancelOp) {          cancelOperation();          return;        }        updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));      }    } while (pq.size() > 0);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.flush();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public RowHandleMap(final int keylength,final ByteOrder objectOrder,final int idxbytes,final File file) throws IOException, SpaceExceededException {  this(keylength,objectOrder,idxbytes,(int)(file.length() / (keylength + idxbytes)),file.getAbsolutePath());  InputStream is;  try {    is=new BufferedInputStream(new FileInputStream(file),1024 * 1024);  } catch (  final OutOfMemoryError e) {    is=new FileInputStream(file);  }  if (file.getName().endsWith(".gz"))   is=new GZIPInputStream(is);  final byte[] a=new byte[keylength + idxbytes];  int c;  Row.Entry entry;  while (true) {    c=is.read(a);    if (c <= 0)     break;    entry=this.rowdef.newEntry(a);    if (entry != null)     this.index.addUnique(entry);  }  is.close();  is=null;  assert this.index.size() == file.length() / (keylength + idxbytes);  optimize();}  }
class C{  public void monitorContendedEnter(MonitorContendedEnterEvent event){  actualContendedEnterCount++;}  }
class C{  public DefaultWindDataset(Object[][][] data){  this(seriesNameListFromDataArray(data),data);}  }
class C{  public JsonArray remove(int index){  values.remove(index);  return this;}  }
class C{  @Override public boolean onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults){  mCallbacks.get(requestCode).invoke(grantResults[0]);  mCallbacks.remove(requestCode);  return mCallbacks.size() == 0;}  }
class C{  public void test_ticket_1007_empty1() throws Exception {  new TestHelper("ticket-1007-empty1","ticket-1007-empty1.rq","ticket-1007-custom.trig","ticket-1007-empty.srx",false).runTest();}  }
class C{  @Override public void cleanAfterExperiment(){  WorkbenchHelper.hideView(PARAMETER_VIEW_ID);  hideMonitorView();  getConsole().eraseConsole(true);  final IGamaView icv=(IGamaView)WorkbenchHelper.findView(INTERACTIVE_CONSOLE_VIEW_ID,null,false);  if (icv != null)   icv.reset();  final IRuntimeExceptionHandler handler=WorkbenchHelper.getService(IRuntimeExceptionHandler.class);  handler.stop();}  }
class C{  public void afterRegionInvalidate(RegionEvent revt){  fail("Unexpected listener callback: afterRegionInvalidate");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int dispIndex=getInt(stack);  Object val=stack.pop();  String name=getString(stack);  PseudoMenu ui=stack.getUIMgrSafe().getCurrUI();  return Boolean.valueOf(ui.ensureVisbilityForValue(name,val,dispIndex));}  }
class C{  public PlainTextDictionary(InputStream dictFile){  in=new BufferedReader(IOUtils.getDecodingReader(dictFile,StandardCharsets.UTF_8));}  }
class C{  protected void forwardReply(AbstractMRListener client,AbstractMRReply m){  ((EasyDccListener)client).reply((EasyDccReply)m);}  }
class C{  public String toString(){  if (root == null) {    return "()";  }  return formatNode(root);}  }
class C{  private void printWarning(){  System.err.println();  System.err.println(rb.getString(".WARNING.WARNING.WARNING."));  System.err.println(rb.getString(".The.integrity.of.the.information.stored.in.your.keystore."));  System.err.println(rb.getString(".WARNING.WARNING.WARNING."));  System.err.println();}  }
class C{  @Override public void close(){  if (searcherHolder != null) {    searcherHolder.decref();    searcherHolder=null;  }}  }
class C{  @Override public void assertEquals(String message,Object expectedObj,Object actualObj){  NumericalMatrix expected=(NumericalMatrix)expectedObj;  NumericalMatrix actual=(NumericalMatrix)actualObj;  message=message + "Numerical matrices are not equal";  int expNrOfCols=expected.getNumberOfColumns();  int actNrOfCols=actual.getNumberOfColumns();  Assert.assertEquals(message + " (column number is not equal)",expNrOfCols,actNrOfCols);  int expNrOfRows=expected.getNumberOfRows();  int actNrOfRows=actual.getNumberOfRows();  Assert.assertEquals(message + " (row number is not equal)",expNrOfRows,actNrOfRows);  int cols=expNrOfCols;  int rows=expNrOfRows;  for (int col=0; col < cols; col++) {    String expectedColName=expected.getColumnName(col);    String actualColName=actual.getColumnName(col);    Assert.assertEquals(message + " (column name at index " + col+ " is not equal)",expectedColName,actualColName);  }  for (int row=0; row < rows; row++) {    String expectedRowName=expected.getRowName(row);    String actualRowName=actual.getRowName(row);    Assert.assertEquals(message + " (row name at index " + row+ " is not equal)",expectedRowName,actualRowName);  }  Assert.assertEquals(message + " (matrix symmetry is not equal)",expected.isSymmetrical(),actual.isSymmetrical());  for (int row=0; row < rows; row++) {    for (int col=0; col < cols; col++) {      double expectedVal=expected.getValue(row,col);      double actualVal=actual.getValue(row,col);      assertDouble(message + " (value at row " + row+ " and column "+ col+ " is not equal)",expectedVal,actualVal);    }  }}  }
class C{  public void addInvokeinterface(int clazz,String name,String desc,int count){  add(INVOKEINTERFACE);  addIndex(constPool.addInterfaceMethodrefInfo(clazz,name,desc));  add(count);  add(0);  growStack(Descriptor.dataSize(desc) - 1);}  }
class C{  private static void fillBaseFields(PriceModel priceModel,VOPriceModel voPM){  voPM.setExternal(priceModel.isExternal());  voPM.setType(priceModel.getType());  voPM.setUuid(priceModel.getUuid());  if (priceModel.isChargeable()) {    voPM.setPeriod(priceModel.getPeriod());    voPM.setOneTimeFee(priceModel.getOneTimeFee());    voPM.setPricePerPeriod(priceModel.getPricePerPeriod());    final ServiceAccessType authType=priceModel.getProduct().getTechnicalProduct().getAccessType();    if (authType == ServiceAccessType.DIRECT) {      voPM.setPricePerUserAssignment(BigDecimal.ZERO);    } else {      voPM.setPricePerUserAssignment(priceModel.getPricePerUserAssignment());    }    voPM.setCurrencyISOCode(priceModel.getCurrency().getCurrencyISOCode());  }}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null)   return null;  int prefix=getPrefixLength(filename);  if (prefix < 0)   return null;  if (prefix >= filename.length()) {    if (includeSeparator)     return getPrefix(filename); else     return filename;  }  int index=indexOfLastSeparator(filename);  if (index < 0)   return filename.substring(0,prefix);  int end=index + (includeSeparator ? 1 : 0);  if (end == 0)   end++;  return filename.substring(0,end);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Edge) {    Edge e=(Edge)obj;    return src.equals(e.src) && symbol.equals(e.symbol);  }  return false;}  }
class C{  static CountingFragment newInstance(int num){  CountingFragment f=new CountingFragment();  Bundle args=new Bundle();  args.putInt("num",num);  f.setArguments(args);  return f;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return mf == null ? null : mf.getFullImage();}  }
class C{  protected int nextIgnoreSpaces(){  try {    loop:     for (; ; ) {      scanner.clearBuffer();      current=scanner.next();switch (current) {case LexicalUnits.COMMENT:        documentHandler.comment(scanner.getStringValue());      break;default :    break loop;case LexicalUnits.SPACE:}}return current;} catch (ParseException e) {errorHandler.error(createCSSParseException(e.getMessage(),e.getParams()));return current;}}  }
class C{  public ObjectNotFoundException(String message,DomainObjectExceptionBean bean){  super(message,bean);}  }
class C{  public BitwiseOpExpression add(Expression expression){  this.getChildren().add(expression);  return this;}  }
class C{  public static GridState createCartesianGridState(ReadOnlyVector3 position){  GridState state=new GridState(MapElementState.Type.CartesianGrid,"CartesianGrid",Grid.defaultCellSize,CartesianGrid.defaultColor,CartesianGrid.defaultLabelVisible,position,CartesianGrid.defaultLineWidth);  state.columns=CartesianGrid.defaultColumns;  state.rows=CartesianGrid.defaultRows;  return (state);}  }
class C{  public boolean render(InternalContextAdapter context,Writer writer,Node node) throws IOException {  writer.write(literalText);  return true;}  }
class C{  protected void addVisibilityActionItems(){  getColumnControlPopup().addVisibilityActionItems(Collections.unmodifiableList(getColumnVisibilityActions()));}  }
class C{  public void cycle(){  cycle("");}  }
class C{  public static void main(String[] args) throws Exception {  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String username=parser.getValue("username","user","u");  String password=parser.getValue("password","pass","passwd","pw","p");  String filename=parser.getValue("filename","file","f");  String spreadsheet=parser.getValue("spreadsheet","s");  String worksheet=parser.getValue("worksheet","w");  String delimiter=parser.getValue("delimiter","delimit","d");  boolean help=parser.containsKey("help","h");  if (help || (username == null) || (password == null)|| (spreadsheet == null)|| (worksheet == null)|| (delimiter == null)) {    usage();    System.exit(1);  }  ImportClient client=new ImportClient(username,password);  client.purgeWorksheet(spreadsheet,worksheet);  Pattern delim=Pattern.compile(delimiter);  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(filename));    String line=reader.readLine();    int row=0;    while (line != null) {      String[] cells=delim.split(line,-1);      for (int col=0; col < cells.length; col++) {        client.insertCellEntry(spreadsheet,worksheet,row + 1,col + 1,cells[col]);      }      line=reader.readLine();      row++;    }  } catch (  Exception e) {    throw e;  } finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  protected void checkMIForGivenData(double[][] data,int[] kNNs,double[] expectedResults) throws Exception {  MultiInfoCalculatorKraskov miCalc=getNewCalc(2);  for (int kIndex=0; kIndex < kNNs.length; kIndex++) {    int k=kNNs[kIndex];    miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,Integer.toString(k));    miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_NUM_THREADS,NUM_THREADS_TO_USE);    miCalc.setProperty(MultiInfoCalculatorKraskov.PROP_ADD_NOISE,"0");    miCalc.initialise(data[0].length);    miCalc.setObservations(data);    miCalc.setDebug(true);    double mi=miCalc.computeAverageLocalOfObservations();    miCalc.setDebug(false);    System.out.printf("k=%d: Average Multi-info %.8f (expected %.8f)\n",k,mi,expectedResults[kIndex]);    assertEquals(expectedResults[kIndex],mi,0.000001);  }}  }
class C{  @DSComment("Utility function") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.510 -0500",hash_original_method="F559913F36966A96ABB20C01E67F5DD8",hash_generated_method="AB4056F3A6E3A769AE23A235BAD6EBBE") public static String formatNumber(String source){  SpannableStringBuilder text=new SpannableStringBuilder(source);  formatNumber(text,getFormatTypeForLocale(Locale.getDefault()));  return text.toString();}  }
class C{  private Ed25519FieldElement pow2to252sub4(){  Ed25519FieldElement f0, f1, f2;  f0=this.square();  f1=this.pow2to9();  f0=f0.multiply(f1);  f0=f0.square();  f0=f1.multiply(f0);  f1=f0.square();  for (int i=1; i < 5; ++i) {    f1=f1.square();  }  f0=f1.multiply(f0);  f1=f0.square();  for (int i=1; i < 10; ++i) {    f1=f1.square();  }  f1=f1.multiply(f0);  f2=f1.square();  for (int i=1; i < 20; ++i) {    f2=f2.square();  }  f1=f2.multiply(f1);  f1=f1.square();  for (int i=1; i < 10; ++i) {    f1=f1.square();  }  f0=f1.multiply(f0);  f1=f0.square();  for (int i=1; i < 50; ++i) {    f1=f1.square();  }  f1=f1.multiply(f0);  f2=f1.square();  for (int i=1; i < 100; ++i) {    f2=f2.square();  }  f1=f2.multiply(f1);  f1=f1.square();  for (int i=1; i < 50; ++i) {    f1=f1.square();  }  f0=f1.multiply(f0);  f0=f0.square();  return f0.square();}  }
class C{  @SuppressWarnings("unchecked") public FixedsizeForgetfulHashMap<K,V> clone(){  return (FixedsizeForgetfulHashMap<K,V>)super.clone();}  }
class C{  public void cmd(Object directory,String cmd){  cmdLine.cmd(getProject().file(directory),cmd);}  }
class C{  public Graph search(){  return search(independenceTest.getVariables());}  }
class C{  public static int alpha(int color){  return (color >> 24) & 0xFF;}  }
class C{  public static ComponentUI createUI(JComponent component){  return verticalLabelUI;}  }
class C{  public Binding(final IVariable var,final IConstant val){  if (var == null) {    throw new IllegalArgumentException();  }  if (val == null) {    throw new IllegalArgumentException();  }  this.var=var;  this.val=val;}  }
class C{  public LagartoDOMBuilder enableXhtmlMode(){  config.ignoreWhitespacesBetweenTags=false;  config.setCaseSensitive(true);  config.setEnableRawTextModes(false);  config.enabledVoidTags=true;  config.selfCloseVoidTags=true;  config.impliedEndTags=false;  config.setEnableConditionalComments(false);  config.setParseXmlTags(false);  return this;}  }
class C{  public void charactersRaw(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && org.apache.xml.utils.XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  append(m_doc.createProcessingInstruction("xslt-next-is-raw","formatter-to-dom"));  append(m_doc.createTextNode(s));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.INVOCABLE_ENDPOINT__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case EipPackage.INVOCABLE_ENDPOINT__TO_CHANNELS:  return toChannels != null && !toChannels.isEmpty();case EipPackage.INVOCABLE_ENDPOINT__FROM_CHANNELS:return fromChannels != null && !fromChannels.isEmpty();case EipPackage.INVOCABLE_ENDPOINT__OWNED_SERVICE_INVOCATIONS:return ownedServiceInvocations != null && !ownedServiceInvocations.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static InetAddress parseInetAddr(byte[] inetAddrBytes,int offset,int count){  InetAddress inetAddress=null;  StringBuilder sb=new StringBuilder();  for (int i=0; i < count; i++) {    sb.append(Integer.toString(inetAddrBytes[offset + i] & 0xff));    if (i != count - 1) {      sb.append('.');    }  }  try {    inetAddress=InetAddress.getByName(sb.toString());  } catch (  UnknownHostException e) {    e.printStackTrace();  }  return inetAddress;}  }
class C{  public CoNLL2000Parser(String file){  super(file);}  }
class C{  public List<Coord> readPoints(Reader r) throws IOException {  List<Coord> points=new ArrayList<Coord>();  String type;  init(r);  while ((type=nextType()) != null) {    if (type.equals(POINT)) {      points.add(parsePoint());    } else {      readNestedContents();    }  }  return points;}  }
class C{  public String readUntil(char c) throws IOException {  if (lookaheadChar == UNDEFINED) {    lookaheadChar=super.read();  }  line.clear();  while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {    line.append((char)lookaheadChar);    if (lookaheadChar == '\n') {      lineCounter++;    }    lastChar=lookaheadChar;    lookaheadChar=super.read();  }  return line.toString();}  }
class C{  @Override public void visitJumpInsn(final int opcode,final Label lbl){  super.visitJumpInsn(opcode,lbl);  LabelNode ln=((JumpInsnNode)instructions.getLast()).label;  if (opcode == JSR && !subroutineHeads.containsKey(ln)) {    subroutineHeads.put(ln,new BitSet());  }}  }
class C{  public final void testGetPort(){  int portNumber=-1099;  LDAPCertStoreParameters cp=new LDAPCertStoreParameters("serverName",portNumber);  assertTrue(cp.getPort() == portNumber);}  }
class C{  private static void verifyCodewordCount(int[] codewords,int numECCodewords) throws FormatException {  if (codewords.length < 4) {    throw FormatException.getFormatInstance();  }  int numberOfCodewords=codewords[0];  if (numberOfCodewords > codewords.length) {    throw FormatException.getFormatInstance();  }  if (numberOfCodewords == 0) {    if (numECCodewords < codewords.length) {      codewords[0]=codewords.length - numECCodewords;    } else {      throw FormatException.getFormatInstance();    }  }}  }
class C{  public void printButtonActionPerformed(java.awt.event.ActionEvent e){  int[] colWidth=new int[4];  TableColumnModel assignmentColumnModel=assignmentTable.getColumnModel();  colWidth[0]=assignmentColumnModel.getColumn(AssignmentTableModel.BIT_COLUMN).getWidth();  colWidth[1]=assignmentColumnModel.getColumn(AssignmentTableModel.ADDRESS_COLUMN).getWidth();  colWidth[2]=assignmentColumnModel.getColumn(AssignmentTableModel.SYSNAME_COLUMN).getWidth();  colWidth[3]=assignmentColumnModel.getColumn(AssignmentTableModel.USERNAME_COLUMN).getWidth();  String head;  if (inputSelected) {    head=rb.getString("AssignmentPanelInputName") + " - " + rb.getString("NodeBoxLabel")+ " "+ selNodeID;  } else {    head=rb.getString("AssignmentPanelOutputName") + " - " + rb.getString("NodeBoxLabel")+ " "+ selNodeID;  }  HardcopyWriter writer=null;  try {    writer=new HardcopyWriter(curFrame,head,10,.8,.5,.5,.5,false);  } catch (  HardcopyWriter.PrintCanceledException ex) {    return;  }  writer.increaseLineSpacing(20);  ((AssignmentTableModel)assignmentListModel).printTable(writer,colWidth);}  }
class C{  public static void error(String message){  show(message,MessageType.ERROR);}  }
class C{  public Object extFunction(FuncExtFunction extFunction,Vector argVec) throws javax.xml.transform.TransformerException {  try {    String namespace=extFunction.getNamespace();    String functionName=extFunction.getFunctionName();    int arity=extFunction.getArgCount();    javax.xml.namespace.QName myQName=new javax.xml.namespace.QName(namespace,functionName);    if (extensionInvocationDisabled) {      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_EXTENSION_FUNCTION_CANNOT_BE_INVOKED,new Object[]{myQName.toString()});      throw new XPathFunctionException(fmsg);    }    XPathFunction xpathFunction=resolver.resolveFunction(myQName,arity);    ArrayList argList=new ArrayList(arity);    for (int i=0; i < arity; i++) {      Object argument=argVec.elementAt(i);      if (argument instanceof XNodeSet) {        argList.add(i,((XNodeSet)argument).nodelist());      } else       if (argument instanceof XObject) {        Object passedArgument=((XObject)argument).object();        argList.add(i,passedArgument);      } else {        argList.add(i,argument);      }    }    return (xpathFunction.evaluate(argList));  } catch (  XPathFunctionException xfe) {    throw new org.apache.xml.utils.WrappedRuntimeException(xfe);  }catch (  Exception e) {    throw new javax.xml.transform.TransformerException(e);  }}  }
class C{  public int stack(int pos,int offset,int num){  return typeInfoArray(pos,offset,num,false);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PieDataset)) {    return false;  }  PieDataset that=(PieDataset)obj;  int count=getItemCount();  if (that.getItemCount() != count) {    return false;  }  for (int i=0; i < count; i++) {    Comparable k1=getKey(i);    Comparable k2=that.getKey(i);    if (!k1.equals(k2)) {      return false;    }    Number v1=getValue(i);    Number v2=that.getValue(i);    if (v1 == null) {      if (v2 != null) {        return false;      }    } else {      if (!v1.equals(v2)) {        return false;      }    }  }  return true;}  }
class C{  private static void createTypeEdit(boolean readOnly,FCtrlDef ctrlDef,AxSf axsf,FieldFormat fieldformat,Element parent,Locale locale,Map extendedValues,int updateProField,int updateRegisterDate,String origen,String destino,String caseSensitive){  String fldName=XML_FLD_TEXT + ctrlDef.getFldId();  String text="";  int len=0;  if (axsf.getLenFields().containsKey(new Integer(ctrlDef.getFldId()))) {    len=((Integer)axsf.getLenFields().get(new Integer(ctrlDef.getFldId()))).intValue();  }  if (fldName.equals(AxSf.FLD5_FIELD)) {    text=getRegOff(axsf.getFld5(),ctrlDef.getRole(),axsf.getFld5Name());  } else   if (fldName.equals(AxSf.FLD7_FIELD)) {    text=getAdminUnit(axsf.getFld7(),ctrlDef.getRole(),origen);  } else   if (fldName.equals(AxSf.FLD8_FIELD)) {    text=getAdminUnit(axsf.getFld8(),ctrlDef.getRole(),destino);  } else   if (fldName.equals(AxSf.FLD13_FIELD) && axsf instanceof AxSfIn) {    text=getRegAdmin(((AxSfIn)axsf).getFld13(),ctrlDef.getRole(),((AxSfIn)axsf).getFld13Name());  } else   if (fldName.equals(AxSf.FLD16_FIELD) && axsf instanceof AxSfIn) {    text=getSubjType(((AxSfIn)axsf).getFld16(),ctrlDef.getRole(),((AxSfIn)axsf).getFld16Name());  } else   if (fldName.equals(AxSf.FLD12_FIELD) && axsf instanceof AxSfOut) {    text=getSubjType(((AxSfOut)axsf).getFld12(),ctrlDef.getRole(),((AxSfOut)axsf).getFld12Name());  } else   if (fldName.equals(AxSf.FLD12_FIELD) && axsf instanceof AxSfIn) {    if (axsf.getAttributeValue(fldName) != null) {      text=shortFormatter.format((Date)axsf.getAttributeValue(fldName));    }  } else   if (fldName.equals(AxSf.FLD4_FIELD) && axsf instanceof AxSfIn) {    if (axsf.getAttributeValue(fldName) != null) {      text=shortFormatter.format((Date)axsf.getAttributeValue(fldName));    }  } else   if (fldName.equals(AxSf.FLD2_FIELD) && axsf instanceof AxSfIn) {    if (axsf.getAttributeValue(fldName) != null) {      text=longFormatter.format((Date)axsf.getAttributeValue(fldName));    }  } else   if (fldName.equals(AxSf.FLD2_FIELD) && axsf instanceof AxSfOut) {    if (axsf.getAttributeValue(fldName) != null) {      text=longFormatter.format((Date)axsf.getAttributeValue(fldName));    }  } else   if (fldName.equals(AxSf.FLD4_FIELD) && axsf instanceof AxSfOut) {    if (axsf.getAttributeValue(fldName) != null) {      text=shortFormatter.format((Date)axsf.getAttributeValue(fldName));    }  } else   if (fldName.equals(AxSf.FLD6_FIELD) && axsf instanceof AxSfIn) {    if (axsf.getAttributeValue(fldName) != null) {      int value=0;      try {        value=((BigDecimal)axsf.getAttributeValue(fldName)).intValue();      } catch (      ClassCastException e) {        value=((Integer)axsf.getAttributeValue(fldName)).intValue();      }      text=RBUtil.getInstance(locale).getProperty("book." + fldName + "."+ value,text);    }  } else   if (fldName.equals(AxSf.FLD6_FIELD) && axsf instanceof AxSfOut) {    if (axsf.getAttributeValue(fldName) != null) {      int value=0;      try {        value=((BigDecimal)axsf.getAttributeValue(fldName)).intValue();      } catch (      ClassCastException e) {        value=((Integer)axsf.getAttributeValue(fldName)).intValue();      }      text=RBUtil.getInstance(locale).getProperty("book." + fldName + "."+ value,text);    }  } else   if (fldName.equals(AxSf.FLD11_FIELD) && axsf instanceof AxSfIn) {    if (axsf.getAttributeValue(fldName) != null) {      int value=0;      try {        value=((BigDecimal)axsf.getAttributeValue(fldName)).intValue();      } catch (      ClassCastException e) {        value=((Integer)axsf.getAttributeValue(fldName)).intValue();      }      text=RBUtil.getInstance(locale).getProperty("book." + fldName + "."+ value,text);    }  } else   if (fldName.equals(AxSf.FLD14_FIELD) && axsf instanceof AxSfOut) {    if (axsf.getAxxf() != null && axsf.getAxxf().getText() != null) {      text=axsf.getAxxf().getText();    }  } else   if (fldName.equals(AxSf.FLD18_FIELD) && axsf instanceof AxSfIn) {    if (axsf.getAxxf() != null && axsf.getAxxf().getText() != null) {      text=axsf.getAxxf().getText();    }  } else   if (axsf.getExtendedFields().containsKey(new Integer(ctrlDef.getFldId()))) {    AxXf extendedField=(AxXf)axsf.getExtendedFields().get(new Integer(ctrlDef.getFldId()));    if (extendedField != null && extendedField.getText() != null) {      text=extendedField.getText();    }  } else   if (axsf instanceof AxSfIn && ctrlDef.getFldId() > com.ieci.tecdoc.common.isicres.Keys.EREG_FDR_MATTER && (ctrlDef.getRole() == 10 || ctrlDef.getRole() == 4)) {    if (extendedValues.containsKey(new Integer(ctrlDef.getFldId()))) {      Map aux=(Map)extendedValues.get(new Integer(ctrlDef.getFldId()));      if (aux != null && !aux.isEmpty()) {        if (aux.containsKey(axsf.getAttributeValueAsString(fldName))) {          text=(String)aux.get(axsf.getAttributeValueAsString(fldName));        } else {          text="";        }      } else {        text="";      }    }  } else   if (axsf instanceof AxSfOut && ctrlDef.getFldId() > com.ieci.tecdoc.common.isicres.Keys.SREG_FDR_MATTER && (ctrlDef.getRole() == 10 || ctrlDef.getRole() == 4)) {    if (extendedValues.containsKey(new Integer(ctrlDef.getFldId()))) {      Map aux=(Map)extendedValues.get(new Integer(ctrlDef.getFldId()));      if (aux != null && !aux.isEmpty()) {        if (aux.containsKey(axsf.getAttributeValueAsString(fldName))) {          text=(String)aux.get(axsf.getAttributeValueAsString(fldName));        } else {          text="";        }      } else {        text="";      }    }  } else {    if (axsf.getAttributeValue(fldName) != null) {      text=axsf.getAttributeValue(fldName).toString();    }    if (_logger.isDebugEnabled()) {      _logger.debug("ctrlDef => " + ctrlDef);      _logger.debug("axsf.getAttributeClass(fldName) => " + axsf.getAttributeClass(fldName));      _logger.debug("axsf.getAttributeValue(fldName) => " + axsf.getAttributeValue(fldName));      if (axsf.getAttributeValue(fldName) != null) {        _logger.debug("axsf.getAttributeValue(fldName) => " + axsf.getAttributeValue(fldName).getClass().getName());      }    }    if (axsf.getAttributeValue(fldName) != null && axsf.getAttributeClass(fldName) != null) {      if (axsf.getAttributeClass(fldName).equals(Date.class)) {        text=XMLUtils.getDateWithFormat(longFormatter,shortFormatter,(Date)axsf.getAttributeValue(fldName),axsf,fieldformat,ctrlDef.getFldId());      }    } else     if (axsf.getAttributeClass(fldName) == null) {      if (axsf.getAttributeValue(fldName) instanceof Date) {        text=XMLUtils.getDateWithFormat(longFormatter,shortFormatter,(Date)axsf.getAttributeValue(fldName),axsf,fieldformat,ctrlDef.getFldId());      }      if (axsf.getAttributeValue(fldName) instanceof java.sql.Date) {        text=XMLUtils.getDateWithFormat(longFormatter,shortFormatter,new Date(((java.sql.Date)axsf.getAttributeValue(fldName)).getTime()),axsf,fieldformat,ctrlDef.getFldId());      }      if (axsf.getAttributeValue(fldName) instanceof Timestamp) {        text=XMLUtils.getDateWithFormat(longFormatter,shortFormatter,new Date(((Timestamp)axsf.getAttributeValue(fldName)).getTime()),axsf,fieldformat,ctrlDef.getFldId());      }    }  }  int dataType=XMLUtils.getDataType(axsf,fieldformat,ctrlDef.getFldId());  if (readOnly) {    int tblVal=0;    if (ctrlDef.getFldId() == 9) {      tblVal=getValidation(axsf,ctrlDef.getFldId(),extendedValues.keySet());    }    addControlTypeEdit(ctrlDef.getClassId(),ctrlDef.getStyle(),ctrlDef.getId(),ctrlDef.getFldId(),XML_TRUE_VALUE,XML_FALSE_VALUE,tblVal,0,XML_FALSE_VALUE,text,ctrlDef.getL(),ctrlDef.getT(),ctrlDef.getR(),ctrlDef.getB(),ctrlDef.getFontName(),ctrlDef.getFontSize(),ctrlDef.getFontEnh(),ctrlDef.getFontColor(),ctrlDef.getRole(),null,null,parent,len,dataType,caseSensitive);  } else {    if (text == null) {      text="";    }    addTypeEditNotReadOnly(readOnly,ctrlDef,axsf,dataType,parent,locale,extendedValues,updateProField,updateRegisterDate,text,origen,destino,len,caseSensitive);  }}  }
class C{  public void testNullTimedOffer(){  SubmissionPublisher<Integer> p=basicPublisher();  long startTime=System.nanoTime();  try {    p.offer(null,LONG_DELAY_MS,MILLISECONDS,null);    shouldThrow();  } catch (  NullPointerException success) {  }  try {    p.offer(1,LONG_DELAY_MS,null,null);    shouldThrow();  } catch (  NullPointerException success) {  }  assertTrue(millisElapsedSince(startTime) < LONG_DELAY_MS / 2);}  }
class C{  private int toKenLMId(IString token){{    int[] map=istringIdToKenLMId.get();    if (token.id < map.length) {      return map[token.id];    }  }  if (preventDuplicateWork.tryLock()) {    try {      int[] oldTable=istringIdToKenLMId.get();      if (token.id < oldTable.length) {        return oldTable[token.id];      }      int[] newTable=new int[Vocabulary.systemSize()];      System.arraycopy(oldTable,0,newTable,0,oldTable.length);      for (int i=oldTable.length; i < newTable.length; ++i) {        newTable[i]=model.index(Vocabulary.systemGet(i));      }      istringIdToKenLMId.set(newTable);      return newTable[token.id];    }  finally {      preventDuplicateWork.unlock();    }  }  return model.index(token.toString());}  }
class C{  public void restart(int secDelay){  URI endpointURI=setPort(curEndpointURI,getPort());  try {    System.out.println(svrName + " restart: stop " + connector);    connector.stop();  } catch (  Exception e) {    throw new RuntimeException("restart",e);  }  System.out.println(svrName + " restart: scheduling start after " + secDelay+ "sec");  schedExecutor.schedule(null,secDelay,TimeUnit.SECONDS);}  }
class C{  private synchronized void incAccess(int amount){  if (amount < 0) {    Assert.assertTrue(this.accessCount - amount >= 0,amount + " cannot be subtracted from accessCount " + this.accessCount);  }  this.accessCount+=amount;}  }
class C{  public synchronized void clear(){  final Entry[] tab=table;  for (int index=tab.length; --index >= 0; ) {    tab[index]=null;  }  count=0;}  }
class C{  public SolutionUserResource solutionUser(){  return solutionUser;}  }
class C{  public void parse(final String osmFilename){  parse(osmFilename,null);}  }
class C{  public boolean isHeaderLine(){  return (this.flags & ON_HEADER_LINE) != 0;}  }
class C{  protected void validateMountPoint(MountInfo[] param){}  }
class C{  protected void fireDOMFocusOutEvent(EventTarget target,EventTarget relatedTarget){  DocumentEvent docEvt=(DocumentEvent)((Element)target).getOwnerDocument();  DOMUIEvent uiEvt=(DOMUIEvent)docEvt.createEvent("UIEvents");  uiEvt.initUIEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMFocusOut",true,false,null,0);  int limit=DefaultXBLManager.computeBubbleLimit((Node)target,(Node)relatedTarget);  ((AbstractEvent)uiEvt).setBubbleLimit(limit);  target.dispatchEvent(uiEvt);}  }
class C{  public TraceSystem(String fileName){  this.fileName=fileName;  updateLevel();}  }
class C{  public static String my_(final String name){  return "icon/my/" + name + ".png";}  }
class C{  public static void v(String tag,String msg,Throwable tr){  println(VERBOSE,tag,msg,tr);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(ConnectionTest.class);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String emailAddress(){  return emailAddress;}  }
class C{  protected void validateDefaultDomainName(String defaultDomainName) throws ConfigurationException {  try {    if (!getDomainList().containsDomain(defaultDomainName)) {      throw new ConfigurationException("Default domain name is not a local server: " + defaultDomainName);    }  } catch (  DomainListException e) {    throw new ConfigurationException("Unable to access DomainList",e);  }}  }
class C{  public Base_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_confidence=jcas.getRequiredFeatureDE(casType,"confidence","uima.cas.Double",featOkTst);  casFeatCode_confidence=(null == casFeat_confidence) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_confidence).getCode();  casFeat_referent=jcas.getRequiredFeatureDE(casType,"referent","uk.gov.dstl.baleen.types.semantic.ReferenceTarget",featOkTst);  casFeatCode_referent=(null == casFeat_referent) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_referent).getCode();}  }
class C{  public byte byteValue(){  return 0;}  }
class C{  protected void writeStructured(int i,JsonGenerator jgen) throws IOException {  jgen.writeObjectFieldStart("structured");  for (  Entry<String,int[]> entry : properties.entrySet()) {    jgen.writeNumberField(entry.getKey(),entry.getValue()[i]);  }  jgen.writeEndObject();}  }
class C{  public JobCreateRequest createJobCreateRequest(String namespaceCd,String jobName,List<Parameter> parameters){  JobCreateRequest jobCreateRequest=new JobCreateRequest();  jobCreateRequest.setNamespace(namespaceCd);  jobCreateRequest.setJobName(jobName);  jobCreateRequest.setParameters(parameters);  return jobCreateRequest;}  }
class C{  public void testInvalidSuperClassNameLeadsToError(){  final String className="Child";  final PyClass aClass=getClassByName(className);  final List<PyMemberInfo<PyElement>> classMemberInfos=new PyMemberInfoStorage(aClass).getClassMemberInfos(aClass);  assert !classMemberInfos.isEmpty() : "No member infos for " + className;  final PyMemberInfo<PyElement> pyMemberInfo=classMemberInfos.get(0);  EasyMock.expect(myView.getSelectedMemberInfos()).andReturn(Collections.singletonList(pyMemberInfo)).anyTimes();  EasyMock.expect(myView.getSuperClassName()).andReturn("INVALID CLASS NAME").anyTimes();  final Capture<String> errorMessageCapture=configureViewToCaptureError();  final PyExtractSuperclassPresenterImpl sut=configureByClass(className);  myMocksControl.replay();  sut.launch();  sut.okClicked();  Assert.assertTrue("No error displayed for invalid class name",errorMessageCapture.hasCaptured());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader.isEmpty()) || (outputHeader.isEmpty())) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("blue_white_red.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    image.close();    Random generator=new Random();    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          z=generator.nextInt(101) / 100.0;          output.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String host(){  ensureSingle();  return host;}  }
class C{  public Vector3d half(double x,double y,double z){  return this.add(x,y,z).normalize();}  }
class C{  boolean verifyPoints(GPInitializer initializer,GPNode inner1,GPNode inner2){  if (!inner1.swapCompatibleWith(initializer,inner2))   return false;  if (inner1.depth() + inner2.atDepth() > maxDepth)   return false;  return true;}  }
class C{  private void detachPlot(SVGPlot oldplot){  if (oldplot == null) {    return;  }  this.plot=null;  oldplot.unsynchronizeWith(JSVGSynchronizedCanvas.this.synchronizer);}  }
class C{  public JavaModelStatus(CoreException coreException){  super(ERROR,JavaCore.PLUGIN_ID,CORE_EXCEPTION,"JavaModelStatus",coreException);  this.elements=JavaElement.NO_ELEMENTS;}  }
class C{  public void removeSelectionChangedListener(SelectionChangedListener l){  table.removeSelectionChangedListener(l);}  }
class C{  public boolean parse(BashPsiBuilder builder){  log.assertTrue(isValid(builder));  final PsiBuilder.Marker caseCommand=builder.mark();  builder.advanceLexer();  if (!Parsing.word.parseWord(builder)) {    caseCommand.drop();    ParserUtil.error(builder,"parser.unexpected.token");    return false;  }  builder.eatOptionalNewlines();  final IElementType inToken=ParserUtil.getTokenAndAdvance(builder);  if (inToken != IN_KEYWORD) {    caseCommand.drop();    ParserUtil.error(builder,"parser.unexpected.token");    return false;  }  builder.eatOptionalNewlines();  if (builder.getTokenType() == ESAC_KEYWORD) {    builder.advanceLexer();    caseCommand.done(CASE_COMMAND);    return true;  }  CaseParseResult hasPattern=parsePatternList(builder);  if (hasPattern == CaseParseResult.Faulty) {    log.debug("Could not find first case pattern");    caseCommand.drop();    ParserUtil.error(builder,"parser.unexpected.token");    return false;  }  while (hasPattern != CaseParseResult.Faulty) {    if (hasPattern == CaseParseResult.ElementWithEndMarker) {      builder.eatOptionalNewlines();      if (builder.getTokenType() == ESAC_KEYWORD) {        break;      }      hasPattern=parsePatternList(builder);    } else {      break;    }  }  final IElementType endToken=ParserUtil.getTokenAndAdvance(builder);  if (endToken != ESAC_KEYWORD) {    caseCommand.drop();    builder.error("Unexpected token");    return false;  }  caseCommand.done(CASE_COMMAND);  return true;}  }
class C{  public NodePrinter(PrintStream out,String[] tokenNames){  this.tokenNames=tokenNames;  this.out=out;}  }
class C{  public static WifiP2pServiceRequest newInstance(int protocolType){  return new WifiP2pServiceRequest(protocolType,null);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == N4ClassifierDefinition.class) {switch (baseFeatureID) {case N4JSPackage.N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW:      return N4JSPackage.N4_CLASSIFIER_DECLARATION__OWNED_MEMBERS_RAW;default :    return -1;}}if (baseClass == GenericDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.GENERIC_DECLARATION__TYPE_VARS:  return N4JSPackage.N4_CLASSIFIER_DECLARATION__TYPE_VARS;default :return -1;}}if (baseClass == ThisTarget.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public boolean existTipoUsuario(String idUsuario){  boolean ret=false;  if (!ListUtils.isEmpty(usuarios)) {    ListIterator it=usuarios.listIterator();    while (it.hasNext()) {      Usuario usuario=(Usuario)it.next();      if (idUsuario.equals(usuario.getTipo()))       return true;    }  }  return ret;}  }
class C{  @SuppressWarnings("unchecked") private void registerVoidMethod(Class type,Method method){  executor.register(type,wrapVoidMethod(method));}  }
class C{  public final String indexString(){  return '[' + Integer.toHexString(index) + ']';}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  @PrePersist public void fillCreationDate(){  if (getExecutiondate() == null) {    setExecutiondate(GregorianCalendar.getInstance().getTime());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:52.997 -0500",hash_original_method="B7C7A7F6BC1EDB860C06401873DD1A46",hash_generated_method="4FB1B4808455BC8EEEEFC2E684C7D21F") @Deprecated @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) public boolean registerListener(SensorListener listener,int sensors,int rate){  if (listener == null) {    return false;  }  listener.onSensorChanged(0,new float[]{0.0f});  listener.onAccuracyChanged(0,0);  boolean result=false;  result=registerLegacyListener(SENSOR_ACCELEROMETER,Sensor.TYPE_ACCELEROMETER,listener,sensors,rate) || result;  result=registerLegacyListener(SENSOR_MAGNETIC_FIELD,Sensor.TYPE_MAGNETIC_FIELD,listener,sensors,rate) || result;  result=registerLegacyListener(SENSOR_ORIENTATION_RAW,Sensor.TYPE_ORIENTATION,listener,sensors,rate) || result;  result=registerLegacyListener(SENSOR_ORIENTATION,Sensor.TYPE_ORIENTATION,listener,sensors,rate) || result;  result=registerLegacyListener(SENSOR_TEMPERATURE,Sensor.TYPE_TEMPERATURE,listener,sensors,rate) || result;  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.017 -0400",hash_original_method="AC4BD6DAF4DA3706009A8A69E5A51552",hash_generated_method="FB4874437424453A9BD521593DB0B054") public final boolean isTraceEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE);}  }
class C{  public boolean isLedVisible(){  return null == ledVisible ? _ledVisible : ledVisible.get();}  }
class C{  public static void writeSharedPreference(Context context,String key,Boolean value){  try {    SharedPreferences settings=getSharedPreferenceManager(context);    SharedPreferences.Editor editor=settings.edit();    editor.putBoolean(key,value);    editor.apply();  } catch (  Exception e) {  }}  }
class C{  public void start(){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.completeConstruction();}  }
class C{  @Override protected void init(Instances data) throws Exception {  super.init(data);  m_error=new double[m_nInstances];  for (int i=0; i < m_nInstances; i++) {    m_error[i]=-m_target[i];  }}  }
class C{  public boolean isProxyPrioritizationEnabled(){  return proxyPrioritizationEnabled;}  }
class C{  public boolean isAdminAllowed(@Nullable String projectKey,@Nullable String repositorySlug){  final UserProfile user=this.userManager.getRemoteUser();  if (user == null) {    return false;  }  USER_LEVEL adminRestriction=this.settingsService.getPrnfbSettingsData().getAdminRestriction();  return isAdminAllowed(adminRestriction,projectKey,repositorySlug);}  }
class C{  private tr fillTable_Lookup_Headers(String columnName,int fieldRefId,tr line,String targetBase,boolean mandatory,boolean onlyValidated,boolean onlyActive,boolean temporary,boolean firstHeaderLine){  String sqlSelect=null;  input filter=null;  if (fieldRefId > 0)   sqlSelect="SELECT ColumnName, Name FROM AD_Column WHERE AD_Table_ID IN (SELECT AD_Table_ID FROM AD_Ref_Table WHERE AD_Reference_ID = " + fieldRefId + ") ORDER BY SEQNO"; else   sqlSelect="SELECT ColumnName, Name FROM AD_Column WHERE AD_Table_ID IN (SELECT AD_Table_ID FROM AD_Table WHERE TableName = '" + columnName.replace("_ID","") + "') ORDER BY SEQNO";  if (firstHeaderLine) {    line.addElement(new th());    m_HeaderSelect=new StringBuffer(columnName);    line.addElement(new th(columnName));    m_colCount=1;  }  try {    PreparedStatement pstmt=DB.prepareStatement(sqlSelect.toString(),null);    ResultSet rs=pstmt.executeQuery();    String col;    while (rs.next()) {      col=rs.getString(1);      if (col.equals("Value") || col.equals("DocumentNo") || col.equals("Name")|| col.equals("Description")) {        if (firstHeaderLine) {          line.addElement(new th(rs.getString(2)));          m_HeaderSelect.append(",").append(col);          m_colCount++;        }      }    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sqlSelect.toString(),e);  }  return line;}  }
class C{  public static SSLContext createSslContext(NettyTransportSslOptions options) throws Exception {  try {    String contextProtocol=options.getContextProtocol();    LOG.trace("Getting SSLContext instance using protocol: {}",contextProtocol);    SSLContext context=SSLContext.getInstance(contextProtocol);    KeyManager[] keyMgrs=loadKeyManagers(options);    TrustManager[] trustManagers=loadTrustManagers(options);    context.init(keyMgrs,trustManagers,new SecureRandom());    return context;  } catch (  Exception e) {    LOG.error("Failed to create SSLContext: {}",e,e);    throw e;  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void managedAccountsUpdated(String accountNumbers){  Scanner scanLine=new Scanner(accountNumbers);  scanLine.useDelimiter("\\,");  try {    int tokens=accountNumbers.replaceAll("[^,]","").length();    Portfolio defaultPortfolio=m_tradePersistentModel.findPortfolioDefault();    while (scanLine.hasNext()) {      String accountNumber=scanLine.next().trim();      if (accountNumber.length() > 0) {        Account account=m_tradePersistentModel.findAccountByNumber(accountNumber);        if (null == account) {          account=new Account(accountNumber,accountNumber,Currency.USD,AccountType.INDIVIDUAL);        }        if (defaultPortfolio.getPortfolioAccounts().isEmpty() && tokens == 0) {          PortfolioAccount portfolioAccount=new PortfolioAccount(defaultPortfolio,account);          defaultPortfolio.getPortfolioAccounts().add(portfolioAccount);          defaultPortfolio=m_tradePersistentModel.persistPortfolio(defaultPortfolio);          defaultPortfolio.setName(account.getAccountNumber());          defaultPortfolio=m_tradePersistentModel.persistAspect(defaultPortfolio);        } else {          Portfolio portfolio=new Portfolio(account.getAccountNumber(),account.getAccountNumber());          PortfolioAccount portfolioAccount=new PortfolioAccount(portfolio,account);          portfolio.getPortfolioAccounts().add(portfolioAccount);          portfolio=m_tradePersistentModel.persistPortfolio(portfolio);          if (tokens == 0) {            m_tradePersistentModel.resetDefaultPortfolio(portfolio);          }        }      }    }    DBTableLookupServiceProvider.clearLookup();    tradingdayPanel.doWindowActivated();    defaultPortfolio=m_tradePersistentModel.findPortfolioByName(defaultPortfolio.getName());    for (    PortfolioAccount item : defaultPortfolio.getPortfolioAccounts()) {      m_brokerModel.onSubscribeAccountUpdates(true,item.getAccount().getAccountNumber());    }    this.setStatusBarMessage("Connected to IB and subscribed to updates for default portfolio: " + defaultPortfolio.getName(),BasePanel.INFORMATION);  } catch (  Exception ex) {    this.setErrorMessage("Could not retreive account data Msg: ",ex.getMessage(),ex);  } finally {    scanLine.close();  }}  }
class C{  public void testDeadlocks() throws Exception {  checkDeadlocksRepeat(5,2,2,2,RENAME_CNT,DELETE_CNT,UPDATE_CNT,MKDIRS_CNT,CREATE_CNT);}  }
class C{  public static void recycleNodes(AccessibilityNodeInfoCompat... nodes){  if (nodes == null) {    return;  }  for (  AccessibilityNodeInfoCompat node : nodes) {    if (node != null) {      node.recycle();    }  }}  }
class C{  public void addInfoDisplayListener(InfoDisplayListener aInfoDisplayListener){  IDListeners.add(aInfoDisplayListener);}  }
class C{  protected CC rebuildCC(CC h_old,int s_new[],Instances D) throws Exception {  CC h=(CC)AbstractClassifier.makeCopy(h_old);  h.rebuildClassifier(s_new,new Instances(D));  return h;}  }
class C{  void removeBinaryChildren() throws JavaModelException {  if (this.binaryChildren != null) {    for (int i=0; i < this.binaryChildren.length; i++) {      JavaElement child=this.binaryChildren[i];      if (child instanceof BinaryType) {        manager.removeInfoAndChildren((JavaElement)child.getParent());      } else {        manager.removeInfoAndChildren(child);      }    }    this.binaryChildren=JavaElement.NO_ELEMENTS;  }  if (this.typeParameters != null) {    for (int i=0; i < this.typeParameters.length; i++) {      TypeParameter typeParameter=(TypeParameter)this.typeParameters[i];      manager.removeInfoAndChildren(typeParameter);    }    this.typeParameters=TypeParameter.NO_TYPE_PARAMETERS;  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  protected void updateTotalImageDatastore(final State current){  try {    Operation datastoreSetQuery=buildDatastoreSetQuery(current);    ImageService.State imageServiceState=new ImageService.State();    Operation datastoreCountPatch=getCloudStoreHelper().createPatch(ImageServiceFactory.SELF_LINK + "/" + current.image);    OperationSequence operationSequence=OperationSequence.create(datastoreSetQuery).setCompletion(null).next(datastoreCountPatch).setCompletion(null);    if (!current.isSelfProgressionDisabled) {      Operation progress=this.buildSelfPatchOperation(this.buildPatch(TaskState.TaskStage.STARTED,TaskState.SubStage.TRIGGER_COPIES,null));      operationSequence.next(progress);    }    operationSequence.sendWith(this);  } catch (  Exception e) {    failTask(e);  }}  }
class C{  public boolean isValid(){  try {    myCertificate.checkValidity();    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public static Document mergeDocuments(final DigestURL location,final String globalMime,final Document[] docs){  if (docs == null || docs.length == 0)   return null;  if (docs.length == 1)   return docs[0];  long docTextLength=0;  final ByteBuffer content=new ByteBuffer();  final StringBuilder authors=new StringBuilder(80);  final StringBuilder publishers=new StringBuilder(80);  final StringBuilder subjects=new StringBuilder(80);  final List<String> descriptions=new ArrayList<>();  final Collection<String> titles=new LinkedHashSet<>();  final Collection<String> sectionTitles=new LinkedHashSet<>();  final List<AnchorURL> anchors=new ArrayList<>();  final LinkedHashMap<DigestURL,String> rss=new LinkedHashMap<>();  final LinkedHashMap<DigestURL,ImageEntry> images=new LinkedHashMap<>();  final Set<String> languages=new HashSet<>();  double lon=0.0d, lat=0.0d;  boolean indexingDenied=false;  Date date=new Date();  String charset=null;  int mindepth=999;  for (  final Document doc : docs) {    if (doc == null)     continue;    if (charset == null)     charset=doc.charset;    final String author=doc.dc_creator();    if (author.length() > 0) {      if (authors.length() > 0)       authors.append(",");      authors.append(author);    }    final String publisher=doc.dc_publisher();    if (publisher.length() > 0) {      if (publishers.length() > 0)       publishers.append(",");      publishers.append(publisher);    }    final String subject=doc.dc_subject(',');    if (subject.length() > 0) {      if (subjects.length() > 0)       subjects.append(",");      subjects.append(subject);    }    titles.addAll(doc.titles());    sectionTitles.addAll(Arrays.asList(doc.getSectionTitles()));    for (    String d : doc.dc_description())     descriptions.add(d);    if (doc.getTextLength() > 0) {      if (docTextLength > 0)       content.write('\n');      try {        docTextLength+=FileUtils.copy(doc.getTextStream(),content);      } catch (      final IOException e) {        ConcurrentLog.logException(e);      }    }    anchors.addAll(doc.getAnchors());    rss.putAll(doc.getRSS());    images.putAll(doc.getImages());    if (doc.lon() != 0.0 && doc.lat() != 0.0) {      lon=doc.lon();      lat=doc.lat();    }    if (doc.lastModified.before(date))     date=doc.lastModified;    if (doc.getDepth() < mindepth)     mindepth=doc.getDepth();    if (doc.dc_language() != null)     languages.add(doc.dc_language());    indexingDenied|=doc.indexingDenied;  }  for (  final Document doc : docs) {    Object scraper=doc.getScraperObject();    if (scraper instanceof ContentScraper) {      final ContentScraper html=(ContentScraper)scraper;      html.close();    }  }  ArrayList<String> titlesa=new ArrayList<String>();  titlesa.addAll(titles);  Document newDoc=new Document(location,globalMime,charset,null,languages,subjects.toString().split(" |,"),titlesa,authors.toString(),publishers.toString(),sectionTitles.toArray(new String[sectionTitles.size()]),descriptions,lon,lat,content.getBytes(),anchors,rss,images,indexingDenied,date);  newDoc.setDepth(mindepth);  return newDoc;}  }
class C{  public static boolean polyIntersect(double[] polyPoints1,double[] polyPoints2){  for (int i=0; i < polyPoints1.length / 2 - 1; i++) {    for (int j=0; j < polyPoints2.length / 2 - 1; j++) {      if (intersects(polyPoints1[2 * i],polyPoints1[2 * i + 1],polyPoints1[2 * i + 2],polyPoints1[2 * i + 3],polyPoints2[2 * j],polyPoints2[2 * j + 1],polyPoints2[2 * j + 2],polyPoints2[2 * j + 3]))       return true;    }  }  return false;}  }
class C{  public final void processConfig(){  this.processConfigInvariants();  String specName=this.config.getSpec();  if (specName.length() == 0) {    this.processConfigInitAndNext();  } else {    if (this.config.getInit().length() != 0 || this.config.getNext().length() != 0) {      Assert.fail(EC.TLC_CONFIG_NOT_BOTH_SPEC_AND_INIT);    }    Object spec=this.defns.get(specName);    if (spec instanceof OpDefNode) {      OpDefNode opDef=(OpDefNode)spec;      if (opDef.getArity() != 0) {        Assert.fail(EC.TLC_CONFIG_ID_REQUIRES_NO_ARG,new String[]{specName});      }      this.processConfigSpec(opDef.getBody(),Context.Empty,List.Empty);    } else     if (spec == null) {      Assert.fail(EC.TLC_CONFIG_SPECIFIED_NOT_DEFINED,new String[]{"name",specName});    } else {      Assert.fail(EC.TLC_CONFIG_ID_HAS_VALUE,new String[]{"value",specName,spec.toString()});    }  }  Vect propNames=this.config.getProperties();  for (int i=0; i < propNames.size(); i++) {    String propName=(String)propNames.elementAt(i);    Object prop=this.defns.get(propName);    if (prop instanceof OpDefNode) {      OpDefNode opDef=(OpDefNode)prop;      if (opDef.getArity() != 0) {        Assert.fail(EC.TLC_CONFIG_ID_REQUIRES_NO_ARG,new String[]{propName});      }      this.processConfigProps(propName,opDef.getBody(),Context.Empty,List.Empty);    } else     if (prop == null) {      Assert.fail(EC.TLC_CONFIG_SPECIFIED_NOT_DEFINED,new String[]{"property",propName});    } else     if (!(prop instanceof BoolValue) || !(((BoolValue)prop).val)) {      Assert.fail(EC.TLC_CONFIG_ID_HAS_VALUE,new String[]{"property",propName,prop.toString()});    }  }  this.invariants=new Action[this.invVec.size()];  this.invNames=new String[this.invVec.size()];  for (int i=0; i < this.invariants.length; i++) {    this.invariants[i]=(Action)this.invVec.elementAt(i);    this.invNames[i]=(String)this.invNameVec.elementAt(i);  }  this.invVec=null;  this.invNameVec=null;  this.impliedInits=new Action[this.impliedInitVec.size()];  this.impliedInitNames=new String[this.impliedInitVec.size()];  for (int i=0; i < this.impliedInits.length; i++) {    this.impliedInits[i]=(Action)this.impliedInitVec.elementAt(i);    this.impliedInitNames[i]=(String)this.impliedInitNameVec.elementAt(i);  }  this.impliedInitVec=null;  this.impliedInitNameVec=null;  this.impliedActions=new Action[this.impliedActionVec.size()];  this.impliedActNames=new String[this.impliedActionVec.size()];  for (int i=0; i < this.impliedActions.length; i++) {    this.impliedActions[i]=(Action)this.impliedActionVec.elementAt(i);    this.impliedActNames[i]=(String)this.impliedActNameVec.elementAt(i);  }  this.impliedActionVec=null;  this.impliedActNameVec=null;  this.temporals=new Action[this.temporalVec.size()];  this.temporalNames=new String[this.temporalNameVec.size()];  for (int i=0; i < this.temporals.length; i++) {    this.temporals[i]=(Action)this.temporalVec.elementAt(i);    this.temporalNames[i]=(String)this.temporalNameVec.elementAt(i);  }  this.temporalVec=null;  this.temporalNameVec=null;  this.impliedTemporals=new Action[this.impliedTemporalVec.size()];  this.impliedTemporalNames=new String[this.impliedTemporalNameVec.size()];  for (int i=0; i < this.impliedTemporals.length; i++) {    this.impliedTemporals[i]=(Action)this.impliedTemporalVec.elementAt(i);    this.impliedTemporalNames[i]=(String)this.impliedTemporalNameVec.elementAt(i);  }  this.impliedTemporalVec=null;  this.impliedTemporalNameVec=null;  if (this.initPredVec.size() == 0 && (this.impliedInits.length != 0 || this.impliedActions.length != 0 || this.variablesNodes.length != 0 || this.invariants.length != 0 || this.impliedTemporals.length != 0)) {    Assert.fail(EC.TLC_CONFIG_MISSING_INIT);  }  if (this.nextPred == null && (this.impliedActions.length != 0 || this.invariants.length != 0 || this.impliedTemporals.length != 0)) {    Assert.fail(EC.TLC_CONFIG_MISSING_NEXT);  }  processModelConstraints();  processActionConstraints();}  }
class C{  public SequenceDiagram(SequenceConfiguration configuration,SequenceDiagramDataProvider provider,PaintDevice paintDevice){  arrowSize=configuration.getArrowSize();  arrowColor=configuration.getArrowColor();  messagePadding=configuration.getMessagePadding();  subLifelineWidth=configuration.getMessagePadding();  selfMessageXExtent=configuration.getSelfMessageHorizontalSpace();  mainLifelineWidth=configuration.getMainLifelineWidth();  messageLabelSpace=configuration.getMessageLabelSpace();  returnArrowVisible=configuration.isReturnArrowVisible();  arrowThickness=configuration.getArrowThickness();  activationBarBorderThickness=configuration.getActivationBarBorderThickness();  lifelineThickness=configuration.getLifelineThickness();  opaqueText=configuration.isOpaqueMessageText();  messageLineLength=configuration.getMessageLineLength();  this.paintDevice=paintDevice;  lifelineMap=new HashMap<String,Lifeline>();  lifelineList=new ArrayList<List<Lifeline>>();  conf=configuration;  paintDevice.setDiagram(this);  verticalPosition=0;  first=new ArrayList<Lifeline>();  this.provider=provider;  provider.setDiagram(this);  threadStacks=new ArrayList<LinkedList<Message>>();  threadStates=new ArrayList<String>();  drawableBijection=new Bijection<Drawable,Object>();  this.threaded=conf.isThreaded();  if (!threaded) {    callerThread=spawnThread();  }  noteManager=new NoteManager(this);  fragmentManager=new FragmentManager(this);  processor=new MessageProcessor(this);  finished=false;  threadColors=new Color[]{configuration.getTc0(),configuration.getTc1(),configuration.getTc2(),configuration.getTc3(),configuration.getTc4(),configuration.getTc5(),configuration.getTc6(),configuration.getTc7(),configuration.getTc8(),configuration.getTc9()};  requireReturn=conf.isExplicitReturns();  messages=new LinkedList<ForwardMessage>();  positionMap=new HashMap<String,Integer>();  messageId=-1;  idMap=new HashMap<String,Integer>();}  }
class C{  public static String toSentence(List<? extends FeatureLabel> sentence){  StringBuilder text=new StringBuilder();  for (int i=0, sz=sentence.size(); i < sz; i++) {    FeatureLabel iw=sentence.get(i);    text.append(iw.word());    if (i < sz - 1) {      text.append(" ");    }  }  return text.toString();}  }
class C{  public boolean isSupportedQualifier(AnnotationMirror a){  if (a == null)   return false;  return AnnotationUtils.containsSameIgnoringValues(this.getQualifierHierarchy().getTypeQualifiers(),a);}  }
class C{  protected void copyTuple(final ITuple<?> tuple){  if (tuple == null)   throw new IllegalArgumentException();  assertRunning();  if (isFull() && limit < 0) {    resize();  }  if (sendKeys)   keys.add(tuple.getKey());  if (sendVals)   vals.add(tuple.getValue());  if (deleteMarkers != null) {    deleteMarkers[ntuples]=(byte)(tuple.isDeletedVersion() ? 1 : 0);  }  if (versionTimestamps != null) {    final long t=tuple.getVersionTimestamp();    versionTimestamps[ntuples]=t;    if (t < minimumVersionTimestamp)     minimumVersionTimestamp=t;    if (t > maximumVersionTimestamp)     maximumVersionTimestamp=t;  }  if (sourceIndices != null) {    final int sourceIndex=tuple.getSourceIndex();    assert sourceIndex < Byte.MAX_VALUE;    sourceIndices[ntuples]=(byte)sourceIndex;  }  ntuples++;}  }
class C{  public InvalidCredentialsException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public static void main(String[] args){  Log.printLine("Starting CloudSimExample1...");  try {    int num_user=1;    Calendar calendar=Calendar.getInstance();    boolean trace_flag=false;    CloudSim.init(num_user,calendar,trace_flag);    NetworkDatacenter datacenter0=createDatacenter("Datacenter_0");    NetDatacenterBroker broker=createBroker();    broker.setLinkDC(datacenter0);    vmlist=new ArrayList<NetworkVm>();    broker.submitVmList(vmlist);    CloudSim.startSimulation();    CloudSim.stopSimulation();    List<Cloudlet> newList=broker.getCloudletReceivedList();    printCloudletList(newList);    System.out.println("numberofcloudlet " + newList.size() + " Cached "+ NetDatacenterBroker.cachedcloudlet+ " Data transfered "+ NetworkConstants.totaldatatransfer);    Log.printLine("CloudSimExample1 finished!");  } catch (  Exception e) {    e.printStackTrace();    Log.printLine("Unwanted errors happen");  }}  }
class C{  public static double acos(double x){  return HALF_PI - MathLib.asin(x);}  }
class C{  public Birthplace(){  super();}  }
class C{  public boolean mousePressed(){synchronized (mouseLock) {    return mousePressed;  }}  }
class C{  public void updateTipoDocumentoVital(TipoDocumentoVitalVO tipo){  checkPermission(DocumentosVitalesSecurityManager.EDICION_DOCUMENTOS_VITALES_ACTION);  if (tipo != null) {    iniciarTransaccion();    Locale locale=getServiceClient().getLocale();    AuditoriaDocumentosVitales.auditaModificacionTipoDocumentoVital(locale,this,tipo,getTipoDocumentoVital(tipo.getId()));    tipoDocumentoVitalDBEntity.updateTipoDocumentoVital(tipo);    commit();  }}  }
class C{  public List<V> toValues(){  return root.toList(null);}  }
class C{  @Override public void launchMainActivity(Configuration configuration){  view.navigateToMainActivity(configuration);}  }
class C{  public boolean isForcePersistence(){  return forcePersistence;}  }
class C{  public RegularExpressionBody createRegularExpressionBody(){  RegularExpressionBodyImpl regularExpressionBody=new RegularExpressionBodyImpl();  return regularExpressionBody;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (contentHandler != null) {    contentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  @Override protected void generateNode(Cube cube,long seed,int xOrigin,int yOrigin,int zOrigin,double x,double y,double z,float size_base,float curve,float angle,int numTry,int tries,double yModSinMultiplier){  Random rand=new Random(seed);  double xOCenter=xOrigin * 16D + 8D;  double yOCenter=yOrigin * 16D + 8D;  double zOCenter=zOrigin * 16D + 8D;  float f3=0.0F;  float f4=0.0F;  if (tries <= 0) {    int radius=this.range * 16 - 16;    tries=radius - rand.nextInt(radius / 4);  }  boolean kAltered=false;  if (numTry == -1) {    numTry=tries / 2;    kAltered=true;  }  int r1=rand.nextInt(tries / 2) + tries / 4;  for (; numTry < tries; ++numTry) {    double modSin=1.5D + MathHelper.sin(numTry * (float)Math.PI / tries) * size_base * 1.0F;    double yModSin=modSin * yModSinMultiplier;    float cosAngle=MathHelper.cos(angle);    float sinAngle=MathHelper.sin(angle);    x+=MathHelper.cos(curve) * cosAngle;    y+=sinAngle;    z+=MathHelper.sin(curve) * cosAngle;    boolean r2=rand.nextInt(6) == 0;    if (r2) {      angle*=0.92F;    } else {      angle*=0.7F;    }    angle+=f4 * 0.1F;    curve+=f3 * 0.1F;    f4*=0.9F;    f3*=0.75F;    f4+=(rand.nextFloat() - rand.nextFloat()) * rand.nextFloat() * 2.0F;    f3+=(rand.nextFloat() - rand.nextFloat()) * rand.nextFloat() * 4.0F;    if (!kAltered && numTry == r1 && size_base > 1.0F) {      this.generateNode(cube,rand.nextLong(),xOrigin,yOrigin,zOrigin,x,y,z,rand.nextFloat() * 0.5F + 0.5F,curve - ((float)Math.PI / 2F),angle / 3.0F,numTry,tries,1.0D);      this.generateNode(cube,rand.nextLong(),xOrigin,yOrigin,zOrigin,x,y,z,rand.nextFloat() * 0.5F + 0.5F,curve + ((float)Math.PI / 2F),angle / 3.0F,numTry,tries,1.0D);      return;    }    if (kAltered || rand.nextInt(4) != 0) {      double xDist=x - xOCenter;      double yDist=y - yOCenter;      double zDist=z - zOCenter;      double triesLeft=tries - numTry;      double fDist=size_base + 2.0F + 16.0F;      if (xDist * xDist + yDist * yDist + zDist * zDist - triesLeft * triesLeft > fDist * fDist) {        return;      }      if (x >= xOCenter - 16.0D - modSin * 2.0D && y >= yOCenter - 16.0D - yModSin * 2.0D && z >= zOCenter - 16.0D - modSin * 2.0D && x <= xOCenter + 16.0D + modSin * 2.0D && y <= yOCenter + 16.0D + yModSin * 2.0D && z <= zOCenter + 16.0D + modSin * 2.0D) {        int xDist1=MathHelper.floor(x - modSin) - xOrigin * 16 - 1;        int xDist2=MathHelper.floor(x + modSin) - xOrigin * 16 + 1;        int yDist1=MathHelper.floor(y - yModSin) - yOrigin * 16 - 1;        int yDist2=MathHelper.floor(y + yModSin) - yOrigin * 16 + 1;        int zDist1=MathHelper.floor(z - modSin) - zOrigin * 16 - 1;        int zDist2=MathHelper.floor(z + modSin) - zOrigin * 16 + 1;        if (xDist1 < 0) {          xDist1=0;        }        if (xDist2 > 16) {          xDist2=16;        }        if (yDist1 < 0) {          yDist1=0;        }        if (yDist2 > 16) {          yDist2=16;        }        if (zDist1 < 0) {          zDist1=0;        }        if (zDist2 > 16) {          zDist2=16;        }        boolean hitLiquid=scanForLiquid(cube,xDist1,xDist2,yDist1,yDist2,zDist1,zDist2,Blocks.LAVA,Blocks.FLOWING_LAVA);        if (!hitLiquid) {          for (int x1=xDist1; x1 < xDist2; ++x1) {            double distX=calculateDistance(xOrigin,x1,x,modSin);            for (int z1=zDist1; z1 < zDist2; ++z1) {              double distZ=calculateDistance(zOrigin,z1,z,modSin);              boolean grass=false;              for (int y1=yDist2 - 1; y1 >= yDist1; --y1) {                double distY=calculateDistance(yOrigin,y1,y,yModSin);                BlockPos pos=new BlockPos(x1,y1,z1);                Block block=cube.getBlockState(pos).getBlock();                if (block != Blocks.STONE && block != Blocks.DIRT && block != Blocks.GRASS) {                  continue;                } else                 if (block == Blocks.GRASS) {                  grass=true;                }                if (distY > -0.7D && distX * distX + distY * distY + distZ * distZ < 1.0D) {                  cube.setBlockForGeneration(pos,Blocks.AIR.getDefaultState());                }                if (grass && block == Blocks.DIRT) {                  cube.setBlockForGeneration(pos,Blocks.GRASS.getDefaultState());                  cube.setBlockForGeneration(pos.above(),Blocks.AIR.getDefaultState());                }              }            }          }        }        if (kAltered) {          break;        }      }    }  }}  }
class C{  Object _remove(Object key,int hash,Object value,Object defaultValue){  lock();  try {    int c=count - 1;    HashEntry<V>[] tab=table;    int index=hash & (tab.length - 1);    HashEntry<V> first=tab[index];    HashEntry<V> e=first;    while (e != null && (e.hash != hash || !key.equals(e.key)))     e=e.next;    if (e == null)     return defaultValue;    V v=e.value;    if ((value == null && v == null) || value.equals(v)) {      ++modCount;      HashEntry<V> newFirst=e.next;      for (HashEntry<V> p=first; p != e; p=p.next)       newFirst=new HashEntry<V>(p.key,p.hash,newFirst,p.value);      tab[index]=newFirst;      count=c;      return v;    }    return defaultValue;  }  finally {    unlock();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean dynInit() throws Exception {  log.config("");  super.dynInit();  Button refreshButton=window.getConfirmPanel().createButton(ConfirmPanel.A_REFRESH);  refreshButton.addEventListener(Events.ON_CLICK,this);  window.getConfirmPanel().addButton(refreshButton);  if (getGridTab().getValue("C_BankStatement_ID") == null) {    FDialog.error(0,window,"SaveErrorRowNotFound");    return false;  }  window.setTitle(getTitle());  int AD_Column_ID=4917;  MLookup lookup=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,AD_Column_ID,DisplayType.TableDir);  bankAccountField=new WTableDirEditor("C_BankAccount_ID",true,false,true,lookup);  int C_BankAccount_ID=Env.getContextAsInt(Env.getCtx(),p_WindowNo,"C_BankAccount_ID");  bankAccountField.setValue(new Integer(C_BankAccount_ID));  authorizationField=new WStringEditor("authorization",false,false,true,10,30,null,null);  authorizationField.getComponent().addEventListener(Events.ON_CHANGE,this);  lookup=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MPayment.Table_Name,MPayment.COLUMNNAME_C_DocType_ID),DisplayType.TableDir);  documentTypeField=new WTableDirEditor(MPayment.COLUMNNAME_C_DocType_ID,false,false,true,lookup);  documentTypeField.getComponent().addEventListener(Events.ON_CHANGE,this);  lookup=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MPayment.Table_Name,MPayment.COLUMNNAME_TenderType),DisplayType.List);  tenderTypeField=new WTableDirEditor(MPayment.COLUMNNAME_TenderType,false,false,true,lookup);  tenderTypeField.getComponent().addEventListener(Events.ON_CHANGE,this);  lookup=MLookupFactory.get(Env.getCtx(),p_WindowNo,0,3499,DisplayType.Search);  bPartnerLookup=new WSearchEditor("C_BPartner_ID",false,false,true,lookup);  Timestamp date=Env.getContextAsDate(Env.getCtx(),p_WindowNo,MBankStatement.COLUMNNAME_StatementDate);  dateToField.setValue(date);  bankAccount=new MBankAccount(Env.getCtx(),C_BankAccount_ID,null);  loadBankAccount();  return true;}  }
class C{  private void firstPass(IExtensionHelpers helpers,IHttpRequestResponse[] messages){  publish("Examining parameters...");  for (int i=0; i < messages.length; i++) {    publish(100 * i / messages.length);    messages[i].getHttpService();    if (messages[i].getResponse() != null) {      IResponseInfo responseInfo=helpers.analyzeResponse(messages[i].getResponse());      List<String> headers=responseInfo.getHeaders();      for (      String header : headers) {        if (startsWithIgnoreCase(header,"set-cookie:")) {          processCookieHeader(header);        }      }    }    IRequestInfo requestInfo=helpers.analyzeRequest(messages[i]);    if (callbacks.isInScope(requestInfo.getUrl())) {      byte[] responseBytes=messages[i].getResponse();      String responseString="";      if (responseBytes != null) {        responseString=helpers.bytesToString(responseBytes);        inScopeMessagesWithResponses.add(messages[i]);      }      List<IParameter> params=requestInfo.getParameters();      for (      IParameter param : params) {        if ((!ignoreEmpty || param.getValue().length() > 0) && !ignoreList.contains(param.getName())) {          int type=param.getType();          Map<String,CorrelatedParam> paramMap;switch (type) {case IParameter.PARAM_URL:            paramMap=urlParameters;          break;case IParameter.PARAM_BODY:        paramMap=bodyParameters;      break;case IParameter.PARAM_COOKIE:    paramMap=cookieParameters;  break;default :paramMap=null;}if (paramMap != null) {if (messages[i] == null) {callbacks.printOutput("Warning... adding null message!");}if (paramMap.containsKey(param.getName())) {paramMap.get(param.getName()).put(param,messages[i],requestInfo,responseString,helpers);} else {paramMap.put(param.getName(),new CorrelatedParam(param,messages[i],requestInfo,responseString,helpers));}}}}}}}  }
class C{  public final DD selfDivide(DD y){  return selfDivide(y.hi,y.lo);}  }
class C{  public void testFloatValueNegativeInfinity1(){  String a="-2746723894572364578265426346273456972283746872364768676747462342342342342342342342323423423423423423426767456345745293762384756238475634563456845634568934568347586346578648576478568456457634875673845678456786587345873645767456834756745763457863485768475678465783456702897830296720476846578634576384567845678346573465786457863";  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == Float.NEGATIVE_INFINITY);}  }
class C{  protected boolean mustResolve(){  if (this.declaringSimpleName != null || this.declaringQualification != null)   return true;  if (this.returnSimpleName != null || this.returnQualification != null)   return true;  if (this.parameterSimpleNames != null)   for (int i=0, max=this.parameterSimpleNames.length; i < max; i++)   if (this.parameterQualifications[i] != null)   return true;  return false;}  }
class C{  protected void addDefaultCaseNotCoveredCall(BytecodeInstruction v,InsnList instrumentation,int defaultCaseBranchId){  instrumentation.add(new LdcInsnNode(0));  instrumentation.add(new LdcInsnNode(Opcodes.IFNE));  instrumentation.add(new LdcInsnNode(defaultCaseBranchId));  instrumentation.add(new LdcInsnNode(v.getInstructionId()));  instrumentation.add(new MethodInsnNode(Opcodes.INVOKESTATIC,EXECUTION_TRACER,"passedBranch","(IIII)V",false));}  }
class C{  public static void generateCallerPathDiagrams(String diagramName){  MySafeDelegator.generateCallerPathDiagrams(diagramName);}  }
class C{  protected static void computeCartesian(List<EventBean[]> streamOne,int[] subStreamNumsOne,List<EventBean[]> streamTwo,int[] subStreamNumsTwo,List<EventBean[]> resultList){  if ((streamTwo == null) || (streamTwo.isEmpty())) {    if ((streamOne == null) || (streamOne.isEmpty())) {      return;    }    resultList.addAll(streamOne);    return;  }  if ((streamOne == null) || (streamOne.isEmpty())) {    resultList.addAll(streamTwo);    return;  }  int streamOneSize=streamOne.size();  int streamTwoSize=streamTwo.size();  if (streamOneSize == 1) {    copyToEach(subStreamNumsOne,streamOne.get(0),streamTwo);    resultList.addAll(streamTwo);    return;  }  if (streamTwoSize == 1) {    copyToEach(subStreamNumsTwo,streamTwo.get(0),streamOne);    resultList.addAll(streamOne);    return;  }  if (streamTwoSize > streamOneSize) {    List<EventBean[]> holdRows=streamOne;    int holdSize=streamOneSize;    streamOne=streamTwo;    streamOneSize=streamTwoSize;    streamTwo=holdRows;    streamTwoSize=holdSize;    subStreamNumsTwo=subStreamNumsOne;  }  int cartesianTotalRows=streamOneSize * streamTwoSize;  int numColumns=streamOne.get(0).length;  EventBean[][] results=new EventBean[cartesianTotalRows][];  int streamOneCount=0;  for (  EventBean[] row : streamOne) {    results[streamOneCount]=row;    for (int i=1; i < streamTwoSize; i++) {      EventBean[] dupRow=new EventBean[numColumns];      System.arraycopy(row,0,dupRow,0,numColumns);      int index=streamOneSize * i + streamOneCount;      results[index]=dupRow;    }    streamOneCount++;  }  int streamTwoCount=0;  for (  EventBean[] row : streamTwo) {    for (int i=0; i < streamOneSize; i++) {      int index=streamTwoCount * streamOneSize + i;      copy(subStreamNumsTwo,row,results[index]);    }    streamTwoCount++;  }  resultList.addAll(Arrays.asList(results));}  }
class C{  public void write(Writer writer) throws TransformerException {  write(writer,(Integer)null);}  }
class C{  public void clearDiscoveryData(){  newNodeDiscoData=null;  oldNodesDiscoData=null;}  }
class C{  private static String constructBooleanTrueWhereClause(List<String> columns,boolean includeDrm){  if (columns == null)   return null;  StringBuilder sb=new StringBuilder();  sb.append("(");  for (int i=columns.size() - 1; i >= 0; i--) {    sb.append(columns.get(i)).append("=1 or ");  }  if (columns.size() > 0) {    sb.setLength(sb.length() - 4);  }  sb.append(")");  if (!includeDrm) {    sb.append(" and ");    sb.append(MediaStore.MediaColumns.IS_DRM);    sb.append("=0");  }  return sb.toString();}  }
class C{  public boolean hasMoreInstances(){  return this.stream.hasMoreInstances();}  }
class C{  void testOK(InputStream is,String cmd) throws Exception {  try {    test(is,cmd);  } catch (  Exception e) {    afterFail("",cmd,"OK");    throw e;  }}  }
class C{  public static void main(String[] args) throws Exception {  String jdbcUrl=DEFAULT_URL;  if ((args.length == 1) && (args[0] != null)) {    jdbcUrl=args[0];  }  Class.forName("com.mysql.jdbc.Driver").newInstance();  ResultSet rs=null;  try {    rs=DriverManager.getConnection(jdbcUrl).createStatement().executeQuery("SHOW VARIABLES LIKE 'timezone'");    while (rs.next()) {      String timezoneFromServer=rs.getString(2);      System.out.println("MySQL timezone name: " + timezoneFromServer);      String canonicalTimezone=TimeUtil.getCanonicalTimezone(timezoneFromServer,null);      System.out.println("Java timezone name: " + canonicalTimezone);    }  }  finally {    if (rs != null) {      rs.close();    }  }}  }
class C{  protected void drawParticles(Set<P> samples){  this.samples=samples;  repaint();}  }
class C{  private void initConnection(){  XMPPTCPConnection connection;  assert (!Thread.currentThread().getName().equals(MainService.SERVICE_THREAD_NAME));  updateStatus(CONNECTING,"");  if (SettingsManager.connectionSettingsObsolete || mConnection == null || mConnection.isConnected()) {    try {      connection=createNewConnection(mSettings);    } catch (    Exception e) {      Log.e("Exception creating new XMPP Connection",e);      maybeStartReconnect();      return;    }    SettingsManager.connectionSettingsObsolete=false;    if (!connectAndAuth(connection)) {      return;    }    sNewConnectionCount++;  } else {    connection=mConnection;    if (!connectAndAuth(connection)) {      SettingsManager.connectionSettingsObsolete=true;      return;    }    sReusedConnectionCount++;  }  onConnectionEstablished(connection);}  }
class C{  public void removeAll(){  for (  Status status : new LinkedList<Status>(statuses)) {    remove(status);  }}  }
class C{  public FilteredCausedDelayHandler(final Scenario scenario,final int noOfTimeBins,final double simulationEndTime,final AreaFilter areaFilter){  this(scenario,noOfTimeBins,null,null,areaFilter);  LOGGER.info("Area filtering is used, result will include links falls inside the given shape and persons from all user groups.");}  }
class C{  public java.lang.StringBuffer append(char c){  return null;}  }
class C{  public static BigDecimal convert(BigDecimal p_Amount,int p_C_CurrencyFrom_ID,int p_C_CurrencyTo_ID,Timestamp p_ConversionDate,int p_C_ConversionType_ID,int p_AD_Client_ID,int p_AD_Org_ID) throws SQLException {  if (p_Amount == null || p_C_CurrencyFrom_ID == 0 || p_C_CurrencyTo_ID == 0)   return null;  if (p_Amount.signum() == 0 || p_C_CurrencyFrom_ID == p_C_CurrencyTo_ID)   return p_Amount;  BigDecimal rate=rate(p_C_CurrencyFrom_ID,p_C_CurrencyTo_ID,p_ConversionDate,p_C_ConversionType_ID,p_AD_Client_ID,p_AD_Org_ID);  if (rate == null)   return null;  return round(p_Amount.multiply(rate),p_C_CurrencyTo_ID,null);}  }
class C{  public static byte[] decode2Bytes(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public static void attribute(String name,String value){  openAttribute(name);  Log.write(value);  closeAttribute();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void cleanUp(FileResult fileResult,File fileOnCancel,String tempMediaPath){  if (fileResult == null) {    Log.w(t,"The user cancelled (or an exception happened) the download of a form at the very beginning.");  } else {    if (fileResult.getFile() != null) {      FileUtils.deleteAndReport(fileResult.getFile());    }  }  if (fileOnCancel != null) {    FileUtils.deleteAndReport(fileOnCancel);  }  if (tempMediaPath != null) {    FileUtils.purgeMediaPath(tempMediaPath);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public PutIndexedScriptRequest id(String id){  this.id=id;  return this;}  }
class C{  public RelationshipImpl createRelationship(RelationshipBuilder relationship) throws IOException {  _relationship=relationship;  validate();  _flags=_relationship.getFlags();  if (isOneToOne()) {    _flags|=RelationshipImpl.ONE_TO_ONE_FLAG;  }  getPageChannel().startExclusiveWrite();  try {    RelationshipImpl newRel=getDatabase().writeRelationship(this);    if (hasReferentialIntegrity()) {      addPrimaryIndex();      addSecondaryIndex();    }    return newRel;  }  finally {    getPageChannel().finishWrite();  }}  }
class C{  public void testDeparturesMiscModes(){  Network network=NetworkUtils.createNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create(1,Node.class),new Coord((double)0,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create(2,Node.class),new Coord((double)1000,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  Link link=NetworkUtils.createAndAddLink(network,Id.create(1,Link.class),fromNode,toNode,1000.0,100.0,1.0,(double)1);  Id<Link> linkId=link.getId();  Person person1=PopulationUtils.getFactory().createPerson(Id.create(1,Person.class));  Id<Person> person1Id=person1.getId();  Person person2=PopulationUtils.getFactory().createPerson(Id.create(2,Person.class));  Id<Person> person2Id=person2.getId();  Leg leg=PopulationUtils.createLeg(TransportMode.car);  leg.setDepartureTime(7 * 3600);  leg.setTravelTime(Time.UNDEFINED_TIME);  leg.setTravelTime(Time.UNDEFINED_TIME - leg.getDepartureTime());  LegHistogram histo=new LegHistogram(5 * 60);  histo.handleEvent(new PersonDepartureEvent(7 * 3600,person1Id,linkId,leg.getMode()));  histo.handleEvent(new PersonDepartureEvent(7 * 3600 + 6 * 60,person2Id,linkId,leg.getMode()));  leg.setMode(TransportMode.bike);  histo.handleEvent(new PersonDepartureEvent(7 * 3600 + 6 * 60,person1Id,linkId,leg.getMode()));  histo.handleEvent(new PersonDepartureEvent(7 * 3600 + 10 * 60,person2Id,linkId,leg.getMode()));  leg.setMode("undefined");  histo.handleEvent(new PersonDepartureEvent(7 * 3600 + 10 * 60,person1Id,linkId,leg.getMode()));  leg.setMode("undefined");  histo.handleEvent(new PersonDepartureEvent(7 * 3600 + 16 * 60,person1Id,linkId,leg.getMode()));  int[] carDepartures=histo.getDepartures(TransportMode.car);  int[] bikeDepartures=histo.getDepartures(TransportMode.bike);  int[] undefDepartures=histo.getDepartures("undefined");  int[] otherDepartures=histo.getDepartures("undefined");  int[] allDepartures=histo.getDepartures();  assertEquals(1,carDepartures[7 * 12]);  assertEquals(1,allDepartures[7 * 12]);  assertEquals(1,carDepartures[7 * 12 + 1]);  assertEquals(1,bikeDepartures[7 * 12 + 1]);  assertEquals(2,allDepartures[7 * 12 + 1]);  assertEquals(1,bikeDepartures[7 * 12 + 2]);  assertEquals(1,undefDepartures[7 * 12 + 2]);  assertEquals(2,allDepartures[7 * 12 + 2]);  assertEquals(1,otherDepartures[7 * 12 + 3]);  assertEquals(1,allDepartures[7 * 12 + 3]);}  }
class C{  public boolean hasOffset(String replicaSetName){  return positionsByReplicaSetName.containsKey(replicaSetName);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex(){  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          }          zzInput=zzBufferL[zzCurrentPosL++];        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{        addToken(Token.IDENTIFIER);        yybegin(ERROR);      }    break;case 2:{    addToken(Token.RESERVED_WORD);    yybegin(SEPARATOR);  }break;case 3:{addToken(Token.IDENTIFIER);}break;case 4:{addToken(Token.SEPARATOR);yybegin(VALUE);}break;case 5:{addToken(Token.VARIABLE);yybegin(NAME);}break;case 6:{addToken(Token.COMMENT_DOCUMENTATION);}break;case 7:{addToken(Token.DATA_TYPE);}break;case 8:case 9:case 10:case 11:case 12:case 13:case 14:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:case ERROR:case NAME:case SEPARATOR:case VALUE:addNullToken();return firstToken;case 18:case 19:case 20:case 21:case 22:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @Override public String toString(){  return new StringBuilder("StartDocument: ").append(this.encoding).toString();}  }
class C{  public int read(byte b[]) throws IOException {  if (inputStream == null) {    throw new IOException("Stream closed");  }  return inputStream.read(b,0,b.length);}  }
class C{  public double[] sampleForInstance(Instance x,Random r) throws Exception {  int L=x.classIndex();  double y[]=new double[L];  for (  int j : m_Chain) {    double p[]=nodes[j].distribution(x,y);    y[j]=A.samplePMF(p,r);    confidences[j]=p[(int)y[j]];  }  return y;}  }
class C{  private void waitForCR(){  try {    int readByte;    do {      readByte=System.in.read();    } while (readByte != 10);  } catch (  IOException e1) {  }}  }
class C{  public void testIteratorRemove(){  try {    final Iterator iterator=range.iterator();    iterator.remove();    fail("removed via iterator");  } catch (  IllegalStateException e) {    assertTrue("expected exception thrown",true);  }}  }
class C{  @Override public String toString(){  return "Uniform(+" + minimum + ","+ maximum+ ")";}  }
class C{  public void testInvalidAttributeTypes(){  Instances icopy=new Instances(m_Instances);  try {    ((MergeManyValues)m_Filter).setAttributeIndex("1");    m_Filter.setInputFormat(icopy);    fail("Should have thrown an exception selecting a STRING attribute!");  } catch (  Exception ex) {  }  try {    ((MergeManyValues)m_Filter).setAttributeIndex("3");    m_Filter.setInputFormat(icopy);    fail("Should have thrown an exception indicating a NUMERIC attribute!");  } catch (  Exception ex) {  }}  }
class C{  public void testGenerateCertificates2() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCertificates(null);    fail("CertificateException was not thrown");  } catch (  CertificateException e) {  }}  }
class C{  public ListBuffer<A> prepend(A x){  elems=elems.prepend(x);  if (last == null)   last=elems;  count++;  return this;}  }
class C{  private Widget newWidget(JSONObject elem,String widgetId) throws ScreenConfigException {  try {    String type=elem.getString("_type");    Widget widget=new Widget(elem);    widget.setId(widgetId);    widget.setType(type);    return widget;  } catch (  Throwable e) {    throw new ScreenConfigException("Can not create widget [" + widgetId + "]. Verify the widget type.",e);  }}  }
class C{  public CDeleteTagAction(final JFrame parent,final ITagManager tagManager,final TreeNode<CTag> tag){  super("Delete Tag");  m_parent=Preconditions.checkNotNull(parent,"IE01890: Parent argument can not be null");  m_tagManager=Preconditions.checkNotNull(tagManager,"IE01891: Tag manager argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE01892: Tag argument can not be null");  putValue(MNEMONIC_KEY,(int)"HK_MENU_DELETE_TAG".charAt(0));  putValue(ACCELERATOR_KEY,HotKeys.DELETE_HK.getKeyStroke());}  }
class C{  public static <T>T execute(Object message) throws Exception {  verifyInitialized();  final Timeout timeout=Timeout.apply(TIMEOUT_MILLIS,TimeUnit.MILLISECONDS);  try {    return result(Await.result(Patterns.ask(requestProcessor,message,timeout),timeout.duration()));  } catch (  TimeoutException te) {    throw connectionTimeoutException(te);  }}  }
class C{  public int compare(CandidatePair pair1,CandidatePair pair2){  return pair1.compareTo(pair2);}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  if (length != 0) {    throw new StunException("length invalid");  }}  }
class C{  public SyncValueMessage(SyncValueMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }  if (other.isSetValues()) {    List<KeyedValues> __this__values=new ArrayList<KeyedValues>();    for (    KeyedValues other_element : other.values) {      __this__values.add(new KeyedValues(other_element));    }    this.values=__this__values;  }  this.responseTo=other.responseTo;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected void sequence_AnnotatedPropertyAssignment(ISerializationContext context,PropertyNameValuePairSingleName semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static String convertToIPV6ShortForm(String entityID) throws MalformedURLException {  URL inputURL=new URL(entityID);  String hostAddress=inputURL.getHost();  String retAddress=entityID;  if (!(hostAddress.startsWith("[") && hostAddress.endsWith("]"))) {    return retAddress;  }  try {    String longAddress=Inet6Address.getByName(hostAddress).getHostAddress();    String shortHostAddress=longAddress.replaceAll("((?:(?:^|:)0+\\b){2,}):?(?!\\S*\\b\\1:0+\\b)(\\S*)","::$2");    URL retUrl=new URL(inputURL.getProtocol(),shortHostAddress,inputURL.getPort(),inputURL.getFile());    retAddress=retUrl.toString();  } catch (  UnknownHostException e) {  }  return retAddress;}  }
class C{  private void process(){  while (reader.getPointer() < reader.getTotalBitLen()) {    int flag=reader.getPositive(bitsPerFlag);    Point2D a4[]=new Point2D[4];    Color a2[]=new Color[2];    float[] cc=new float[colCompCount];switch (flag) {case 0:      for (int i=0; i < 12; i++) {        Point2D p=getPointCoords();        pp.add(p);      }    for (int i=0; i < 4; i++) {      getPointCoords();    }  for (int i=0; i < 4; i++) {    for (int z=0; z < colCompCount; z++) {      cc[z]=reader.getFloat(bitsPerComponent);    }    Color color=calculateColor(cc);    pc.add(color);  }break;case 1:a4[0]=pp.get(pp.size() - 9);a4[1]=pp.get(pp.size() - 8);a4[2]=pp.get(pp.size() - 7);a4[3]=pp.get(pp.size() - 6);pp.addAll(Arrays.asList(a4).subList(0,4));for (int i=0; i < 8; i++) {Point2D p=getPointCoords();pp.add(p);}for (int i=0; i < 4; i++) {getPointCoords();}a2[0]=pc.get(pc.size() - 3);a2[1]=pc.get(pc.size() - 2);pc.addAll(Arrays.asList(a2));for (int i=0; i < 2; i++) {for (int z=0; z < colCompCount; z++) {cc[z]=reader.getFloat(bitsPerComponent);}Color color=calculateColor(cc);pc.add(color);}break;case 2:a4[0]=pp.get(pp.size() - 6);a4[1]=pp.get(pp.size() - 5);a4[2]=pp.get(pp.size() - 4);a4[3]=pp.get(pp.size() - 3);pp.addAll(Arrays.asList(a4).subList(0,4));for (int i=0; i < 8; i++) {Point2D p=getPointCoords();pp.add(p);}for (int i=0; i < 4; i++) {getPointCoords();}a2[0]=pc.get(pc.size() - 2);a2[1]=pc.get(pc.size() - 1);pc.addAll(Arrays.asList(a2));for (int i=0; i < 2; i++) {for (int z=0; z < colCompCount; z++) {cc[z]=reader.getFloat(bitsPerComponent);}Color color=calculateColor(cc);pc.add(color);}break;case 3:a4[0]=pp.get(pp.size() - 3);a4[1]=pp.get(pp.size() - 2);a4[2]=pp.get(pp.size() - 1);a4[3]=pp.get(pp.size() - 12);pp.addAll(Arrays.asList(a4).subList(0,4));for (int i=0; i < 8; i++) {Point2D p=getPointCoords();pp.add(p);}for (int i=0; i < 4; i++) {getPointCoords();}a2[0]=pc.get(pc.size() - 1);a2[1]=pc.get(pc.size() - 4);pc.addAll(Arrays.asList(a2));for (int i=0; i < 2; i++) {for (int z=0; z < colCompCount; z++) {cc[z]=reader.getFloat(bitsPerComponent);}Color color=calculateColor(cc);pc.add(color);}break;}}}  }
class C{  public List<Tree> subTreeList(){  return (List<Tree>)subTrees(new ArrayList<>());}  }
class C{  @SuppressWarnings("unchecked") private static <T>void assertThrows(final Consumer<Void> consumer,final Class<T> exceptionClass,final Consumer<T> assertExceptionProperties,final String message){  final String normalizedMessage=null == message ? "" : String.format("[%s]: ",message);  try {    consumer.accept(null);  } catch (  final Exception ex) {    if (exceptionClass.isAssignableFrom(ex.getClass())) {      assertExceptionProperties.accept((T)ex);      return;    }    Assert.fail(String.format("%sunexpected exception of type %s was thrown: '%s'",normalizedMessage,ex.getClass(),ex.getMessage()));  }  Assert.fail(String.format("%sexpected exception of type %s was not thrown",normalizedMessage,exceptionClass));}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  if (field != null && field.isInnerClass()) {    return thresh;  }  return (expr != null) ? expr.costInline(thresh,env,ctx) : 0;}  }
class C{  public boolean use_older_type_assigner(){  return soot.PhaseOptions.getBoolean(options,"use-older-type-assigner");}  }
class C{  private void throwExpandableWithMirroringException(VirtualPool virtualPool){  throw APIException.badRequests.protectionVirtualPoolDoesNotSupportExpandingMirrors(virtualPool.getId());}  }
class C{  public MockMessage(final Deserializer deserializer){  super(deserializer.readInt("type"));  this.customField=deserializer.readInt("customField");}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!MobileEnv.initWeb(config))   throw new ServletException("WProcess.init");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.404 -0500",hash_original_method="988A7EC33B56EE551974E7C841966101",hash_generated_method="275D87C42D455387B12A2DBBE41F059C") private void scrollToChild(View child){  child.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(child,mTempRect);  int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);  if (scrollDelta != 0) {    scrollBy(scrollDelta,0);  }}  }
class C{  static public List<Range> compactRanges(List<Range> ranges){  List<Range> newRanges=new LinkedList<>();  if (ranges.isEmpty()) {    return newRanges;  }  Collections.sort(ranges);  Range prevRange=new Range(ranges.get(0).startIndex,ranges.get(0).endIndex);  for (int i=1; i < ranges.size(); i++) {    Range currentRange=ranges.get(i);    if (currentRange.startIndex == prevRange.endIndex + 1) {      prevRange.endIndex=currentRange.endIndex;    } else {      newRanges.add(prevRange);      prevRange=new Range(currentRange.startIndex,currentRange.endIndex);    }  }  newRanges.add(prevRange);  return newRanges;}  }
class C{  public static SortClause create(String item,ORDER order){  return new SortClause(item,order);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.legendShape,stream);}  }
class C{  public synchronized void panTo(Point2D p){  m_itransform.transform(p,m_tmpPoint);  panToAbs(m_tmpPoint);}  }
class C{  BracketMatcher(){  this(new DefaultHighlighter.DefaultHighlightPainter(Color.cyan),new DefaultHighlighter.DefaultHighlightPainter(Color.magenta));}  }
class C{  public void testComputeClasspathForProjectsWithMultipleSourcesAndSpecificOutputs() throws CoreException {  final String sourceOutDirName="srcOut";  final String secondarySourceOutDirName="secondarySrcOut";  addAndCreateSourceEntry(javaProjectA,SRC_DIR_NAME,sourceOutDirName);  addAndCreateSourceEntry(javaProjectA,SECONDARY_SRC_DIR_NAME,secondarySourceOutDirName);  addAndCreateSourceEntry(javaProjectB,SRC_DIR_NAME,sourceOutDirName);  addAndCreateSourceEntry(javaProjectB,SECONDARY_SRC_DIR_NAME,secondarySourceOutDirName);  JavaProjectUtilities.addRawClassPathEntry(javaProjectA,JavaCore.newProjectEntry(javaProjectB.getProject().getFullPath(),true));  List<File> actualCp=getListOfFiles(GWTCompileRunner.computeClasspath(javaProjectA));  List<File> expectedCp=new ArrayList<File>();  expectedCp.add(getFile(javaProjectA.getProject(),SRC_DIR_NAME));  expectedCp.add(getFile(javaProjectA.getProject(),SECONDARY_SRC_DIR_NAME));  expectedCp.add(getFile(javaProjectB.getProject(),SRC_DIR_NAME));  expectedCp.add(getFile(javaProjectB.getProject(),SECONDARY_SRC_DIR_NAME));  IPath projPath=javaProjectA.getProject().getFullPath();  expectedCp.add(ResourceUtils.resolveToAbsoluteFileSystemPath(projPath.append(sourceOutDirName)).toFile());  expectedCp.add(ResourceUtils.resolveToAbsoluteFileSystemPath(projPath.append(secondarySourceOutDirName)).toFile());  expectedCp.add(getOutputOfProject(javaProjectA));  IPath projBPath=javaProjectB.getProject().getFullPath();  expectedCp.add(ResourceUtils.resolveToAbsoluteFileSystemPath(projBPath.append(sourceOutDirName)).toFile());  expectedCp.add(ResourceUtils.resolveToAbsoluteFileSystemPath(projBPath.append(secondarySourceOutDirName)).toFile());  expectedCp.add(getOutputOfProject(javaProjectB));  assertEquals(expectedCp,actualCp);}  }
class C{  public static IWritableMount createSaveDirMount(World world,String subPath,long capacity){  findCC();  if (computerCraft_createSaveDirMount != null) {    try {      return (IWritableMount)computerCraft_createSaveDirMount.invoke(null,world,subPath,capacity);    } catch (    Exception e) {    }  }  return null;}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final double value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public void addDelegateChild(DelegableChildAdapter<PARENT,CHILD> delegableChildAdapter){  delegableChildAdapter.setManager(this);  childrenDelegates.put(delegableChildAdapter.getChildViewType(),delegableChildAdapter);}  }
class C{  final float frequency(BasicBlock b){  return b.getExecutionFrequency();}  }
class C{  public boolean peerAddressEquals(TransportAddress peerAddress){  if (channelDataSocket != null)   return this.peerAddress.equals(peerAddress); else {    return this.peerAddress.getAddress().equals(peerAddress.getAddress());  }}  }
class C{  public static long copy(InputStream from,OutputStream to) throws IOException {  checkNotNull(from);  checkNotNull(to);  byte[] buf=new byte[BUF_SIZE];  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  protected AbstractGraph(int[][] edges,int numberOfVertices){  for (int i=0; i < numberOfVertices; i++)   addVertex((V)(new Integer(i)));  createAdjacencyLists(edges,numberOfVertices);}  }
class C{  public void load(Element element,Object o){  Editor p=(Editor)o;  Element elem=element.getChild("itemList");  List<Element> list=elem.getChildren("item");  String[] items=new String[list.size()];  for (int i=0; i < list.size(); i++) {    Element e=list.get(i);    String item=e.getText();    items[i]=item;  }  MemoryComboIcon l=new MemoryComboIcon(p,items);  loadTextInfo(l,element);  String name;  Attribute attr=element.getAttribute("memory");  if (attr == null) {    log.error("incorrect information for a memory location; must use memory name");    p.loadFailed();    return;  } else {    name=attr.getValue();  }  Memory m=jmri.InstanceManager.memoryManagerInstance().getMemory(name);  if (m != null) {    l.setMemory(name);  } else {    log.error("Memory named '" + attr.getValue() + "' not found.");    p.loadFailed();    return;  }  p.putItem(l);  loadCommonAttributes(l,Editor.MEMORIES,element);}  }
class C{  public QualifiedName(UnsignedShort namespaceIndex,String name){  this.namespaceIndex=namespaceIndex.intValue();  this.name=name;}  }
class C{  public static <T>NamedAssociationContainsPredicate<T> contains(NamedAssociation<T> namedAssoc,T value){  return new NamedAssociationContainsPredicate<>(namedAssociation(namedAssoc),value);}  }
class C{  public Automation copyAutomation(Automation automation,String newName){  Automation newAutomation=newAutomation(newName);  newAutomation.copyAutomation(automation);  return newAutomation;}  }
class C{  public static double opaque(double value){  return value;}  }
class C{  public boolean isSuitableForVm(Vm vm){  return (getVmScheduler().getPeCapacity() >= vm.getCurrentRequestedMaxMips() && getVmScheduler().getAvailableMips() >= vm.getCurrentRequestedTotalMips() && getRamProvisioner().isSuitableForVm(vm,vm.getCurrentRequestedRam()) && getBwProvisioner().isSuitableForVm(vm,vm.getCurrentRequestedBw()));}  }
class C{  public long longValue(){  return 0l;}  }
class C{  public final char charAt(int index){  if (index >= _length)   throw new IndexOutOfBoundsException();  return index < C1 ? _low[index] : _high[index >> B1][index & M1];}  }
class C{  public static OptionBuilder hasArg(){  OptionBuilder.numberOfArgs=1;  return instance;}  }
class C{  public Builder withClientTransport(Transport transport){  this.clientTransport=Assert.notNull(transport,"transport");  return this;}  }
class C{  private boolean handleMessageDuplexChannelReport(LocoNetMessage m){  if ((m.getElement(0) != LnConstants.OPC_PEER_XFER) || (m.getElement(1) != LnConstants.RE_DPLX_OP_LEN) || (m.getElement(2) != LnConstants.RE_DPLX_GP_CHAN_TYPE)|| (m.getElement(3) != LnConstants.RE_DPLX_SCAN_REPORT_B3)) {    return false;  }  if (waitingForPreviousGroupChannel) {    waitingForPreviousGroupChannel=false;    previousGroupChannel=m.getElement(5);  }  return true;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  Properties ctx=JSPEnv.getCtx(request);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu == null) {    log.warning("doPost - no web user");    if (!response.isCommitted())     response.sendRedirect("loginServlet?ForwardTo=note.jsp");    return;  }  int C_RfQResponse_ID=WebUtil.getParameterAsInt(request,P_RfQResponse_ID);  int C_RfQ_ID=WebUtil.getParameterAsInt(request,"C_RfQ_ID");  MRfQResponse rfqResponse=new MRfQResponse(ctx,C_RfQResponse_ID,null);  if (C_RfQResponse_ID == 0 || rfqResponse == null || rfqResponse.get_ID() != C_RfQResponse_ID) {    WebUtil.createForwardPage(response,"RfQ Response not found","rfqs.jsp",5);    return;  }  if (wu.getC_BPartner_ID() != rfqResponse.getC_BPartner_ID()) {    WebUtil.createForwardPage(response,"Your RfQ Response not found","rfqs.jsp",5);    return;  }  String msg=updateResponse(request,rfqResponse);  session.setAttribute(WebSessionCtx.HDR_MESSAGE,msg);  String url="/rfqDetails.jsp?C_RfQ_ID=" + C_RfQ_ID;  log.info("doGet - Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public boolean contains(final MediaType type){  boolean contains=false;  for (  final MediaType mine : this.list) {    if (mine.matches(type)) {      contains=true;      break;    }  }  return contains;}  }
class C{  public DoubleVector times(double s){  return copy().timesEquals(s);}  }
class C{  @Override public boolean isSupportedQualifier(AnnotationMirror a){  return true;}  }
class C{  public String toString(){  String toString=this.toString;  if (toString == null) {    final StringBuilder b=new StringBuilder(groupId.length() + artifactId.length() + version.length()+ classifier.length()+ 16);    b.append(groupId).append(':').append(artifactId).append(':').append(version);    if (!classifier.isEmpty()) {      b.append(':').append(classifier);    }    this.toString=toString=b.toString();  }  return toString;}  }
class C{  public void processRangeFacets(final Filter filter) throws IOException {  for (  RangeFacetRequest rfr : rangeFacets) {    String[] pivotStr;    String start=rfr.getStart();    if (start.contains(AnalyticsParams.QUERY_RESULT)) {      throw new SolrException(ErrorCode.BAD_REQUEST,"Query result requests can not be used in Range Facets");    } else     if (start.contains(AnalyticsParams.RESULT)) {      try {        pivotStr=ExpressionFactory.getArguments(start.substring(start.indexOf('(') + 1,start.indexOf(')')).trim());        if (pivotStr.length == 1) {          rfr.setStart(getResult(pivotStr[0]));        } else         if (pivotStr.length == 3) {          rfr.setStart(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));        } else {          throw new SolrException(ErrorCode.BAD_REQUEST,"Result request " + start + " has an invalid amount of arguments.");        }      } catch (      IndexOutOfBoundsException e) {        throw new SolrException(ErrorCode.BAD_REQUEST,"Result request " + start + " is invalid. Lacks parentheses.",e);      }    }    String end=rfr.getEnd();    if (end.contains(AnalyticsParams.QUERY_RESULT)) {      throw new SolrException(ErrorCode.BAD_REQUEST,"Query result requests can not be used in Range Facets");    } else     if (end.contains(AnalyticsParams.RESULT)) {      try {        pivotStr=ExpressionFactory.getArguments(end.substring(end.indexOf('(') + 1,end.indexOf(')')).trim());        if (pivotStr.length == 1) {          rfr.setEnd(getResult(pivotStr[0]));        } else         if (pivotStr.length == 3) {          rfr.setEnd(getResult(pivotStr[0],pivotStr[1],pivotStr[2]));        } else {          throw new SolrException(ErrorCode.BAD_REQUEST,"Result request " + end + " has an invalid amount of arguments.");        }      } catch (      IndexOutOfBoundsException e) {        throw new SolrException(ErrorCode.BAD_REQUEST,"Result request " + end + " is invalid. Lacks parentheses.",e);      }    }    String[] gaps=rfr.getGaps();    for (int count=0; count < gaps.length; count++) {      String gap=gaps[count];      if (gap.contains(AnalyticsParams.QUERY_RESULT)) {        throw new SolrException(ErrorCode.BAD_REQUEST,"Query result requests can not be used in Range Facets");      } else       if (gap.contains(AnalyticsParams.RESULT)) {        try {          pivotStr=ExpressionFactory.getArguments(gap.substring(gap.indexOf('(') + 1,gap.indexOf(')')).trim());          if (pivotStr.length == 1) {            gaps[count]=getResult(pivotStr[0]);          } else           if (pivotStr.length == 3) {            gaps[count]=getResult(pivotStr[0],pivotStr[1],pivotStr[2]);          } else {            throw new SolrException(ErrorCode.BAD_REQUEST,"Result request " + gap + " has an invalid amount of arguments.");          }        } catch (        IndexOutOfBoundsException e) {          throw new SolrException(ErrorCode.BAD_REQUEST,"Result request " + gap + " is invalid. Lacks parentheses.",e);        }      }    }    final RangeEndpointCalculator<? extends Comparable<?>> rec=RangeEndpointCalculator.create(rfr);    final SchemaField sf=rfr.getField();    for (    FacetRange range : rec.getRanges()) {      final String upper;      final String lower;      String facetValue="";      if (range.lower == null) {        facetValue="(*";        lower=null;      } else {        lower=range.lower;        facetValue=((range.includeLower) ? "[" : "(") + range.lower;      }      facetValue+=" TO ";      if (range.upper == null) {        upper=null;        facetValue+="*)";      } else {        upper=range.upper;        facetValue+=range.upper + ((range.includeUpper) ? "]" : ")");      }      Query q=sf.getType().getRangeQuery(null,sf,lower,upper,range.includeLower,range.includeUpper);      RangeFacetAccumulator rAcc=new RangeFacetAccumulator(this,rfr.getName(),facetValue);      Query filtered=new BooleanQuery.Builder().add(q,Occur.MUST).add(filter,Occur.FILTER).build();      searcher.search(filtered,rAcc);      computeRangeFacet(sf.getName());    }  }}  }
class C{  public ArrayDeque(){  elements=new Object[16];}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 3:    throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 2:  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  public void internalTransform(Body b,String phaseName,Map options){  JimpleBody body=(JimpleBody)b;  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "] Folding Jimple constructors...");  Chain units=body.getUnits();  List<Unit> stmtList=new ArrayList<Unit>();  stmtList.addAll(units);  Iterator<Unit> it=stmtList.iterator();  Iterator<Unit> nextStmtIt=stmtList.iterator();  nextStmtIt.next();  ExceptionalUnitGraph graph=new ExceptionalUnitGraph(body);  LocalDefs localDefs=new SmartLocalDefs(graph,new SimpleLiveLocals(graph));  LocalUses localUses=new SimpleLocalUses(graph,localDefs);  while (it.hasNext()) {    Stmt s=(Stmt)it.next();    if (!(s instanceof AssignStmt))     continue;    Value lhs=((AssignStmt)s).getLeftOp();    if (!(lhs instanceof Local))     continue;    Value rhs=((AssignStmt)s).getRightOp();    if (!(rhs instanceof NewExpr))     continue;    if (nextStmtIt.hasNext()) {      Stmt next=(Stmt)nextStmtIt.next();      if (next instanceof InvokeStmt) {        InvokeStmt invoke=(InvokeStmt)next;        if (invoke.getInvokeExpr() instanceof SpecialInvokeExpr) {          SpecialInvokeExpr invokeExpr=(SpecialInvokeExpr)invoke.getInvokeExpr();          if (invokeExpr.getBase() == lhs) {            break;          }        }      }    }    if (!types.contains(((NewExpr)rhs).getType()))     continue;    List lu=localUses.getUsesOf(s);    Iterator luIter=lu.iterator();    boolean MadeNewInvokeExpr=false;    while (luIter.hasNext()) {      Unit use=((UnitValueBoxPair)(luIter.next())).unit;      if (!(use instanceof InvokeStmt))       continue;      InvokeStmt is=(InvokeStmt)use;      if (!(is.getInvokeExpr() instanceof SpecialInvokeExpr) || lhs != ((SpecialInvokeExpr)is.getInvokeExpr()).getBase())       continue;      AssignStmt constructStmt=Jimple.v().newAssignStmt(((DefinitionStmt)s).getLeftOp(),((DefinitionStmt)s).getRightOp());      constructStmt.setRightOp(Jimple.v().newNewExpr(((NewExpr)rhs).getBaseType()));      MadeNewInvokeExpr=true;      use.redirectJumpsToThisTo(constructStmt);      units.insertBefore(constructStmt,use);      constructStmt.addTag(s.getTag("SourceLnPosTag"));    }    if (MadeNewInvokeExpr) {      units.remove(s);    }  }}  }
class C{  NameserverWhoisResponse(HostResource host,DateTime timestamp){  this(ImmutableList.of(checkNotNull(host,"host")),timestamp);}  }
class C{  public ParameterTypeRepositoryLocation(String key,String description,boolean allowEntries,boolean allowDirectories,boolean allowAbsoluteEntries,boolean optional){  this(key,description,allowEntries,allowDirectories,allowAbsoluteEntries,optional,false,false);}  }
class C{  public Prepared prepare(String sql){  try {    PreparedStatement prep=prepared.get(sql);    if (prep == null) {      prep=conn.prepareStatement(sql);      prepared.put(sql,prep);    }    return new Prepared(conn.prepareStatement(sql));  } catch (  SQLException e) {    throw convert(e);  }}  }
class C{  public static HttpWaitStrategy forHttps(String path){  return forHttp(path).usingTls();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TSTRUCT_METHOD__DEFINED_MEMBER:    return definedMember != null;}return super.eIsSet(featureID);}  }
class C{  public static void writeToFileReal_2D(String format,int n1,int n2,double[] x,String filename){  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int i=0; i < n1; i++) {      for (int j=0; j < n2; j++) {        out.write(String.format(format,x[i * n2 + j]) + "\t");      }      out.newLine();    }    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void insert(int offset,float[] values){  insert(offset,values,0,values.length);}  }
class C{  @Override public final void postSetUp() throws Exception {  final Host host=Host.getHost(0);  vm0=host.getVM(0);  vm1=host.getVM(1);  vm2=host.getVM(2);  vm3=host.getVM(3);}  }
class C{  public static boolean isInternationalPhoneNumber(String s){  if (isEmpty(s))   return defaultEmptyOK;  String normalizedPhone=stripCharsInBag(s,phoneNumberDelimiters);  return isPositiveInteger(normalizedPhone);}  }
class C{  public void initializeStringTable(){  stringTable=new byte[8192][];  for (int i=0; i < 256; i++) {    stringTable[i]=new byte[1];    stringTable[i][0]=(byte)i;  }  tableIndex=258;  bitsToGet=9;}  }
class C{  @Deprecated public TabbedPanel2 clone(TabbedPanel2 tabbedPanel){  TabbedPanel2 t=new TabbedPanel2();  t.fullTabList=new ArrayList<>(tabbedPanel.fullTabList);  t.removedTabList=new ArrayList<>(tabbedPanel.removedTabList);  return t;}  }
class C{  static String safeName(String unsafeElementName){  String elementName=HtmlLexer.canonicalName(unsafeElementName);switch (elementName.length()) {case 3:    if ("xmp".equals(elementName)) {      return "pre";    }  break;case 7:if ("listing".equals(elementName)) {  return "pre";}break;case 9:if ("plaintext".equals(elementName)) {return "pre";}break;}return elementName;}  }
class C{  private void updateIPAddress(String ipAddress,StoragePort port){  if (null != ipAddress && !ipAddress.equalsIgnoreCase(port.getPortNetworkId())) {    port.setIpAddress(ipAddress);  }}  }
class C{  public static boolean isDeleted(IndexReader indexReader,int docID){  Bits liveDocs=MultiFields.getLiveDocs(indexReader);  if (!liveDocs.get(docID)) {    return true;  } else   return false;}  }
class C{  public void addPropertyChangeListener(ScenePropertyChangeListener listener){  if (listener != null) {    logger.log(Level.FINE,"Add property listener {0}",listener);    listeners.add(listener);  }}  }
class C{  private static boolean checkSourceConstraint(BeanInstance candidate,Vector<Object> listToCheck,Integer... tab){  int tabIndex=0;  if (tab.length > 0) {    tabIndex=tab[0].intValue();  }  Vector<BeanConnection> connections=TABBED_CONNECTIONS.get(tabIndex);  boolean result=true;  for (int i=0; i < connections.size(); i++) {    BeanConnection bc=connections.elementAt(i);    if (bc.getSource() == candidate) {      BeanInstance cTarget=bc.getTarget();      if (!isInList(cTarget,listToCheck)) {        return true;      }      for (int j=0; j < listToCheck.size(); j++) {        BeanInstance tempTarget=(BeanInstance)listToCheck.elementAt(j);        if (bc.getTarget() == tempTarget) {          result=false;        }      }    }  }  return result;}  }
class C{  public Action(ActionType at,Direction d){  if (!isMoveAction(at)) {    throw new IllegalArgumentException("Attempted to create action " + "of type " + at + " with a direction.");  }  this.type=at;  this.dir=d;  this.x=UNDEFINED;  this.y=UNDEFINED;}  }
class C{  public static String generateNewContactHostRoid(){  return createContactHostRoid(ObjectifyService.allocateId());}  }
class C{  public static void printDecoderGrid(Featurizable<IString,String> f,PrintStream out){  if (!f.done)   throw new RuntimeException("AlignmentGrid: not finished decoding!");  Sequence<IString> eSeq=f.targetSequence, fSeq=f.sourceSentence;  SymmetricalWordAlignment sent=new SymmetricalWordAlignment(fSeq,eSeq);  AlignmentGrid alGrid=new AlignmentGrid(eSeq.size(),fSeq.size());  while (f != null) {    for (int fi=f.sourcePosition; fi < f.sourcePosition + f.sourcePhrase.size(); ++fi)     for (int ei=f.targetPosition; ei < f.targetPosition + f.targetPhrase.size(); ++ei)     sent.addAlign(fi,ei);    f=f.prior;  }  alGrid.sent=sent;  alGrid.printAlTempInGrid("Alignment grid for decoded sentence: " + eSeq,null,out);}  }
class C{  public void restoreDeleted(){  for (Iterator it=fTemplates.iterator(); it.hasNext(); ) {    TemplatePersistenceData data=(TemplatePersistenceData)it.next();    if (data.isDeleted())     data.setDeleted(false);  }}  }
class C{  protected final Shop resolveShop(final ReportDescriptor descriptor,final Map<String,Object> parameters,final Object data,final String lang){  Shop shop=null;  if (parameters.get("shop") instanceof Shop) {    shop=(Shop)parameters.get("shop");  } else   if (parameters.get("shopId") instanceof Long) {    shop=shopService.getById((Long)parameters.get("shopId"));  } else   if (parameters.get("shopCode") instanceof String) {    shop=shopService.getShopByCode((String)parameters.get("shopCode"));  }  return shop;}  }
class C{  public void beforeSaveProperties(){  if (m_AD_User_ID == 0 || m_AD_User_ID == 100 || m_AD_Role_ID == 0 || m_AD_Role_ID == 1000000)   return;  log.info("Setting default Properties");  MRole role=MRole.get(Env.getCtx(),m_AD_Role_ID);}  }
class C{  @TruffleBoundary private static int[] applyPermute(int[] a,int[] perm,boolean reverse){  int[] newA=a.clone();  if (reverse) {    for (int i=0; i < newA.length; i++) {      newA[perm[i]]=a[i];    }  } else {    for (int i=0; i < newA.length; i++) {      newA[i]=a[perm[i]];    }  }  return newA;}  }
class C{  public void saveToProperties(Properties properties){  properties.setProperty("ProjectionInfo.Projected",Boolean.toString(projected));  properties.setProperty("ProjectionInfo.TiePoint",StringUtil.doubleArrayToString(tiePoint));  properties.setProperty("ProjectionInfo.Scale",StringUtil.doubleArrayToString(scale));  if (globe == null) {    globe=LayerFactory.defaultGlobe;  }  properties.setProperty("ProjectionInfo.Globe",globe);  properties.setProperty("ProjectionInfo.RasterWidth",Integer.toString(rasterWidth));  properties.setProperty("ProjectionInfo.RasterLength",Integer.toString(rasterLength));  properties.setProperty("ProjectionInfo.ProjLinearUnits",projLinearUnits);  if (datumCode > 0) {    properties.setProperty("ProjectionInfo.DatumCode",Integer.toString(datumCode));  }  if (ellipsoidCode > 0) {    properties.setProperty("ProjectionInfo.EllipsoidCode",Integer.toString(ellipsoidCode));  }  if (!Double.isNaN(semiMajorAxis)) {    properties.setProperty("ProjectionInfo.SemiMajorAxis",Double.toString(semiMajorAxis));  }  if (!Double.isNaN(semiMinorAxis)) {    properties.setProperty("ProjectionInfo.SemiMinorAxis",Double.toString(semiMinorAxis));  }  if (!Double.isNaN(inverseFlattening)) {    properties.setProperty("ProjectionInfo.InverseFlattening",Double.toString(inverseFlattening));  }  if (!Double.isNaN(gcsPrimeMeridianLon)) {    properties.setProperty("ProjectionInfo.GCSPrimeMeridianLon",Double.toString(gcsPrimeMeridianLon));  }  if (projCode > 0) {    properties.setProperty("ProjectionInfo.ProjectionCode",Integer.toString(projCode));  }  if (pcsCode > 0) {    properties.setProperty("ProjectionInfo.ProjectionCoordinateSystemCode",Integer.toString(pcsCode));  }  if (coordTransformCode > 0) {    properties.setProperty("ProjectionInfo.CoordTransformCode",Integer.toString(coordTransformCode));  }  if (!Double.isNaN(stdParallel1)) {    properties.setProperty("ProjectionInfo.StdParallel1",Double.toString(stdParallel1));  }  if (!Double.isNaN(stdParallel2)) {    properties.setProperty("ProjectionInfo.StdParallel2",Double.toString(stdParallel2));  }  if (!Double.isNaN(naturalOriginLon)) {    properties.setProperty("ProjectionInfo.NaturalOriginLon",Double.toString(naturalOriginLon));  }  if (!Double.isNaN(naturalOriginLat)) {    properties.setProperty("ProjectionInfo.NaturalOriginLat",Double.toString(naturalOriginLat));  }  if (!Double.isNaN(falseOriginLon)) {    properties.setProperty("ProjectionInfo.FalseOriginLon",Double.toString(falseOriginLon));  }  if (!Double.isNaN(falseOriginLat)) {    properties.setProperty("ProjectionInfo.FalseOriginLat",Double.toString(falseOriginLat));  }  if (!Double.isNaN(falseEasting)) {    properties.setProperty("ProjectionInfo.FalseEasting",Double.toString(falseEasting));  }  if (!Double.isNaN(falseNorthing)) {    properties.setProperty("ProjectionInfo.FalseNorthing",Double.toString(falseNorthing));  }  if (!Double.isNaN(centerEasting)) {    properties.setProperty("ProjectionInfo.CenterEasting",Double.toString(centerEasting));  }  if (!Double.isNaN(centerNorthing)) {    properties.setProperty("ProjectionInfo.CenterNorthing",Double.toString(centerNorthing));  }  if (!Double.isNaN(centerLon)) {    properties.setProperty("ProjectionInfo.CenterLon",Double.toString(centerLon));  }  if (!Double.isNaN(centerLat)) {    properties.setProperty("ProjectionInfo.CenterLat",Double.toString(centerLat));  }  if (!Double.isNaN(scaleAtNaturalOrigin)) {    properties.setProperty("ProjectionInfo.ScaleAtNaturalOrigin",Double.toString(scaleAtNaturalOrigin));  }  if (!Double.isNaN(scaleAtCenter)) {    properties.setProperty("ProjectionInfo.ScaleAtCenter",Double.toString(scaleAtCenter));  }  if (!Double.isNaN(azimuth)) {    properties.setProperty("ProjectionInfo.Azimuth",Double.toString(azimuth));  }  if (!Double.isNaN(straightVertPoleLon)) {    properties.setProperty("ProjectionInfo.StraightVertPoleLon",Double.toString(straightVertPoleLon));  }  if (gcsCitation != null) {    properties.setProperty("ProjectionInfo.GCSCitation",gcsCitation);  }  if (pcsCitation != null) {    properties.setProperty("ProjectionInfo.PCSCitation",pcsCitation);  }}  }
class C{  public ServerCertificateTypeExtension(boolean isClient,List<CertificateType> certificateTypes){  super(ExtensionType.SERVER_CERT_TYPE,isClient,certificateTypes);}  }
class C{  public long totalTimeInMillis(){  return this.totalTimeInMillis;}  }
class C{  public static <V>Closure<V> buildSoftReferenceMemoizeFunction(final int protectedCacheSize,final MemoizeCache<Object,Object> cache,final Closure<V> closure){  final ProtectionStorage lruProtectionStorage=protectedCacheSize > 0 ? new LRUProtectionStorage(protectedCacheSize) : new NullProtectionStorage();  final ReferenceQueue queue=new ReferenceQueue();  return new SoftReferenceMemoizeFunction<V>(cache,closure,lruProtectionStorage,queue);}  }
class C{  private void postSession(){  List<BigDecimal> listProcessedOn=new ArrayList<BigDecimal>();  listProcessedOn.add(Env.ZERO);  Timestamp ts=DB.getSQLValueTS(null,"SELECT CURRENT_TIMESTAMP FROM DUAL");  long ms=ts.getTime() - (2 * 1000);  ts=new Timestamp(ms);  long mili=ts.getTime();  BigDecimal value=new BigDecimal(Long.toString(mili));  int[] documentsTableID=Doc.getDocumentsTableID();  String[] documentsTableName=Doc.getDocumentsTableName();  for (int i=0; i < documentsTableID.length; i++) {    int AD_Table_ID=documentsTableID[i];    String TableName=documentsTableName[i];    if (m_model.getAD_Table_ID() != 0 && m_model.getAD_Table_ID() != AD_Table_ID)     continue;    StringBuffer sql=new StringBuffer("SELECT DISTINCT ProcessedOn FROM ").append(TableName).append(" WHERE AD_Client_ID=? AND ProcessedOn<?").append(" AND Processed='Y' AND Posted='N' AND IsActive='Y'");    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      pstmt=DB.prepareStatement(sql.toString(),null);      pstmt.setInt(1,m_model.getAD_Client_ID());      pstmt.setBigDecimal(2,value);      rs=pstmt.executeQuery();      while (!isInterrupted() && rs.next()) {        BigDecimal processedOn=rs.getBigDecimal(1);        if (!listProcessedOn.contains(processedOn))         listProcessedOn.add(processedOn);      }    } catch (    Exception e) {      log.log(Level.SEVERE,sql.toString(),e);    } finally {      DB.close(rs,pstmt);    }  }  int[] count=new int[documentsTableID.length];  int[] countError=new int[documentsTableID.length];  for (int i=0; i < count.length; i++) {    count[i]=0;    countError[i]=0;  }  Collections.sort(listProcessedOn);  for (  BigDecimal processedOn : listProcessedOn) {    for (int i=0; i < documentsTableID.length; i++) {      int AD_Table_ID=documentsTableID[i];      String TableName=documentsTableName[i];      if (m_model.getAD_Table_ID() != 0 && m_model.getAD_Table_ID() != AD_Table_ID)       continue;      StringBuffer sql=new StringBuffer("SELECT * FROM ").append(TableName).append(" WHERE AD_Client_ID=? AND (ProcessedOn");      if (processedOn.compareTo(Env.ZERO) != 0)       sql.append("=?"); else       sql.append(" IS NULL OR ProcessedOn=0");      sql.append(") AND Processed='Y' AND Posted='N' AND IsActive='Y'").append(" ORDER BY Created");      PreparedStatement pstmt=null;      ResultSet rs=null;      try {        pstmt=DB.prepareStatement(sql.toString(),null);        pstmt.setInt(1,m_model.getAD_Client_ID());        if (processedOn.compareTo(Env.ZERO) != 0)         pstmt.setBigDecimal(2,processedOn);        rs=pstmt.executeQuery();        while (!isInterrupted() && rs.next()) {          count[i]++;          boolean ok=true;          try {            Doc doc=Doc.get(m_ass,AD_Table_ID,rs,null);            if (doc == null) {              log.severe(getName() + ": No Doc for " + TableName);              ok=false;            } else {              String error=doc.post(false,false);              ok=error == null;            }          } catch (          Exception e) {            log.log(Level.SEVERE,getName() + ": " + TableName,e);            ok=false;          }          if (!ok)           countError[i]++;        }        rs.close();      } catch (      Exception e) {        log.log(Level.SEVERE,sql.toString(),e);      } finally {        DB.close(rs,pstmt);      }    }  }  for (int i=0; i < documentsTableID.length; i++) {    String TableName=documentsTableName[i];    if (count[i] > 0) {      m_summary.append(TableName).append("=").append(count[i]);      if (countError[i] > 0)       m_summary.append("(Errors=").append(countError[i]).append(")");      m_summary.append(" - ");      log.finer(getName() + ": " + m_summary.toString());    } else     log.finer(getName() + ": " + TableName+ " - no work");  }}  }
class C{  private void verifyAddVolumesToIngestedCG(BlockConsistencyGroup cg,List<URI> addVolumesList){  if (cg.getTypes().contains(Types.LOCAL.toString())) {    return;  }  List<Volume> cgVolumes=BlockConsistencyGroupUtils.getActiveVplexVolumesInCG(cg,_dbClient,null);  Set<String> cgVolumeURIs=new HashSet<String>();  for (  Volume cgVolume : cgVolumes) {    cgVolumeURIs.add(cgVolume.getId().toString());  }  boolean isExistingVolume=false;  boolean hasNewVolume=false;  for (  URI addVolume : addVolumesList) {    if (cgVolumeURIs.contains(addVolume.toString())) {      isExistingVolume=true;    } else {      hasNewVolume=true;    }  }  if (isExistingVolume && hasNewVolume) {    throw APIException.badRequests.cantAddMixVolumesToIngestedCG(cg.getLabel());  } else   if (isExistingVolume && (cgVolumes.size() != addVolumesList.size())) {    throw APIException.badRequests.notAllVolumesAddedToIngestedCG(cg.getLabel());  }}  }
class C{  @SuppressWarnings("unchecked") public T remove(int x,int z){  int index=getIndex(x,z);  XZAddressable bucket=this.buckets[index];  while (bucket != null) {    if (bucket.getX() == x && bucket.getZ() == z) {      this.collapseBucket(index);      return (T)bucket;    }    index=getNextIndex(index);    bucket=this.buckets[index];  }  return null;}  }
class C{  private boolean checkKeyUsage(X509Certificate cert,int bit) throws CertificateException {  boolean[] keyUsage=cert.getKeyUsage();  if (keyUsage == null) {    return true;  }  return (keyUsage.length > bit) && keyUsage[bit];}  }
class C{  protected Anonymous_guard_1_Impl(){  super();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.231 -0400",hash_original_method="593EF196512A9E50D807AC65E1BB79E6",hash_generated_method="FE8F1334BAB370E78F5B50C9D6F496ED") public static int copy(InputStream input,OutputStream output) throws IOException {  byte[] buffer=new byte[DEFAULT_BUFFER_SIZE];  int count=0;  int n=0;  while (-1 != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public Path[] round0(final QueryEngine queryEngine,final int limit,final int nedges) throws Exception {  sampleAllVertices(queryEngine,limit);  if (log.isInfoEnabled()) {    final StringBuilder sb=new StringBuilder();    sb.append("limit=" + limit + ", nedges="+ nedges);    sb.append(", sampled vertices::\n");    for (    Vertex v : V) {      if (v.sample != null) {        sb.append("id=" + v.pred.getId() + " : ");        sb.append(v.sample.toString());        sb.append("\n");      }    }    log.info(sb.toString());  }  final Path[] a=estimateInitialEdgeWeights(queryEngine,limit);  if (log.isInfoEnabled())   log.info("\n*** Initial Paths\n" + JGraph.showTable(a));  final Path[] paths_t0=chooseStartingPaths(nedges,a);  if (log.isInfoEnabled())   log.info("\n*** Paths @ t0\n" + JGraph.showTable(paths_t0));{    final Set<Vertex> initialVertexSet=new LinkedHashSet<Vertex>();    for (    Path x : paths_t0) {      initialVertexSet.add(x.vertices[0]);    }    for (    Vertex v : V) {      if (!initialVertexSet.contains(v)) {        v.sample=null;      }    }  }  return paths_t0;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  private void checkVersion(){  String versionStr;  Version version;  version=new Version();  versionStr=getVersion();  if (versionStr.equals("")) {    System.out.println("WARNING: has no version!");  } else   if (version.isOlder(versionStr)) {    System.out.println("WARNING: loading a newer version (" + versionStr + " > "+ Version.VERSION+ ")!");  } else   if (version.isNewer(versionStr)) {    System.out.println("NOTE: loading an older version (" + versionStr + " < "+ Version.VERSION+ ")!");  }}  }
class C{  private void registerHostsWithInitiators(List<Initiator> initiatorList,HDSApiClient hdsApiClient) throws Exception {  Map<HDSHost,List<String>> fcHostsToRegister=new HashMap<HDSHost,List<String>>();  Map<HDSHost,List<String>> iSCSIHostsToRegister=new HashMap<HDSHost,List<String>>();  HDSApiExportManager exportMgr=hdsApiClient.getHDSApiExportManager();  if (null != initiatorList) {    for (    Initiator initiator : initiatorList) {      if (null != initiator.getHost()) {        Host host=dbClient.queryObject(Host.class,initiator.getHost());        if (null != host) {          Pair<String,String> hostTypeAndOsType=getHostTypeAndOSTypeToRegisterHost(host);          HDSHost hdshost=new HDSHost(host.getHostName());          hdshost.setHostType(hostTypeAndOsType.first);          hdshost.setOsType(hostTypeAndOsType.second);          String portWWN=initiator.getInitiatorPort().replace(HDSConstants.COLON,HDSConstants.DOT_OPERATOR);          if (initiator.getProtocol().equals(HostInterface.Protocol.FC.name())) {            if (!fcHostsToRegister.containsKey(hdshost)) {              List<String> initiatorsList=new ArrayList<String>();              initiatorsList.add(portWWN);              fcHostsToRegister.put(hdshost,initiatorsList);            } else {              fcHostsToRegister.get(hdshost).add(portWWN);            }          } else           if (initiator.getProtocol().equals(HostInterface.Protocol.iSCSI.name())) {            if (!iSCSIHostsToRegister.containsKey(hdshost)) {              List<String> initiatorsList=new ArrayList<String>();              initiatorsList.add(portWWN);              iSCSIHostsToRegister.put(hdshost,initiatorsList);            } else {              iSCSIHostsToRegister.get(hdshost).add(portWWN);            }          }        }      }    }  }  if (!fcHostsToRegister.isEmpty()) {    for (    Map.Entry<HDSHost,List<String>> entry : fcHostsToRegister.entrySet()) {      HDSHost hdshost=entry.getKey();      HDSHost registeredHost=exportMgr.registerHost(hdshost,entry.getValue(),HDSConstants.FC);      if (null != registeredHost) {        log.info("Host: {} added successfully.",registeredHost.getName());      }    }  }  if (!iSCSIHostsToRegister.isEmpty()) {    for (    Map.Entry<HDSHost,List<String>> entry : iSCSIHostsToRegister.entrySet()) {      HDSHost hdshost=entry.getKey();      HDSHost registeredHost=exportMgr.registerHost(hdshost,entry.getValue(),HDSConstants.ISCSI);      if (null != registeredHost) {        log.info("Host: {} added successfully.",registeredHost.getName());      }    }  }}  }
class C{  private double calculateAttainment(){  int count=0;  for (int i=0; i < metrics.length; i++) {    if (metrics[i][metric] >= threshold) {      count++;    }  }  return count / (double)metrics.length;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Element docElem;  Element newElem;  Node retval;  doc=(Document)load("hc_staff",true);  docElem=doc.getDocumentElement();  attributes=docElem.getAttributes();  newElem=doc.createElement("html");{    boolean success=false;    try {      retval=attributes.setNamedItem(newElem);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.SEQUENCE__STEPS:    getSteps().clear();  getSteps().addAll((Collection<? extends Step>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean canMoveTo(String ref,ReviewDb db) throws OrmException {  return getProjectControl().controlForRef(ref).canUpload() && canAbandon(db);}  }
class C{  public static Short toShort(char c){  return Short.valueOf(toShortValue(c));}  }
class C{  public static void addChemicalCrystallizerRecipe(GasStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addChemicalCrystallizerRecipe",GasStack.class,ItemStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public RegexConstraint(@NonNull final Pattern regex){  setRegex(regex);}  }
class C{  public final void distance(final DistanceOutput output,final SimplexCache cache,final DistanceInput input){  GJK_CALLS++;  final DistanceProxy proxyA=input.proxyA;  final DistanceProxy proxyB=input.proxyB;  Transform transformA=input.transformA;  Transform transformB=input.transformB;  simplex.readCache(cache,proxyA,transformA,proxyB,transformB);  SimplexVertex[] vertices=simplex.vertices;  int saveCount=0;  simplex.getClosestPoint(closestPoint);  float distanceSqr1=closestPoint.lengthSquared();  float distanceSqr2=distanceSqr1;  int iter=0;  while (iter < MAX_ITERS) {    saveCount=simplex.m_count;    for (int i=0; i < saveCount; i++) {      saveA[i]=vertices[i].indexA;      saveB[i]=vertices[i].indexB;    }switch (simplex.m_count) {case 1:      break;case 2:    simplex.solve2();  break;case 3:simplex.solve3();break;default :assert (false);}if (simplex.m_count == 3) {break;}simplex.getClosestPoint(closestPoint);distanceSqr2=closestPoint.lengthSquared();if (distanceSqr2 >= distanceSqr1) {}distanceSqr1=distanceSqr2;simplex.getSearchDirection(d);if (d.lengthSquared() < Settings.EPSILON * Settings.EPSILON) {break;}SimplexVertex vertex=vertices[simplex.m_count];Rot.mulTransUnsafe(transformA.q,d.negateLocal(),temp);vertex.indexA=proxyA.getSupport(temp);Transform.mulToOutUnsafe(transformA,proxyA.getVertex(vertex.indexA),vertex.wA);Rot.mulTransUnsafe(transformB.q,d.negateLocal(),temp);vertex.indexB=proxyB.getSupport(temp);Transform.mulToOutUnsafe(transformB,proxyB.getVertex(vertex.indexB),vertex.wB);vertex.w.set(vertex.wB).subLocal(vertex.wA);++iter;++GJK_ITERS;boolean duplicate=false;for (int i=0; i < saveCount; ++i) {if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {duplicate=true;break;}}if (duplicate) {break;}++simplex.m_count;}GJK_MAX_ITERS=MathUtils.max(GJK_MAX_ITERS,iter);simplex.getWitnessPoints(output.pointA,output.pointB);output.distance=MathUtils.distance(output.pointA,output.pointB);output.iterations=iter;simplex.writeCache(cache);if (input.useRadii) {float rA=proxyA.m_radius;float rB=proxyB.m_radius;if (output.distance > rA + rB && output.distance > Settings.EPSILON) {output.distance-=rA + rB;normal.set(output.pointB).subLocal(output.pointA);normal.normalize();temp.set(normal).mulLocal(rA);output.pointA.addLocal(temp);temp.set(normal).mulLocal(rB);output.pointB.subLocal(temp);} else {output.pointA.addLocal(output.pointB).mulLocal(.5f);output.pointB.set(output.pointA);output.distance=0.0f;}}}  }
class C{  public boolean onReceivedClientCertRequest(CordovaWebView view,ICordovaClientCertRequest request){  return false;}  }
class C{  public static int murmurhash3_x86_32(byte[] data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int roundedEnd=offset + (len & 0xfffffffc);  for (int i=offset; i < roundedEnd; i+=4) {    int k1=(data[i] & 0xff) | ((data[i + 1] & 0xff) << 8) | ((data[i + 2] & 0xff) << 16)| (data[i + 3] << 24);    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;    h1=(h1 << 13) | (h1 >>> 19);    h1=h1 * 5 + 0xe6546b64;  }  int k1=0;switch (len & 0x03) {case 3:    k1=(data[roundedEnd + 2] & 0xff) << 16;case 2:  k1|=(data[roundedEnd + 1] & 0xff) << 8;case 1:k1|=(data[roundedEnd] & 0xff);k1*=c1;k1=(k1 << 15) | (k1 >>> 17);k1*=c2;h1^=k1;}h1^=len;h1^=h1 >>> 16;h1*=0x85ebca6b;h1^=h1 >>> 13;h1*=0xc2b2ae35;h1^=h1 >>> 16;return h1;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public BatchFraction jdbcJobRepository(final String name,final DatasourcesFraction datasource){  return jdbcJobRepository(new JDBCJobRepository<>(name).dataSource(datasource.getKey()));}  }
class C{  public static Result cvModel(MultiLabelClassifier h,Instances D,int numFolds,String top,String vop) throws Exception {  Result r_[]=new Result[numFolds];  for (int i=0; i < numFolds; i++) {    Instances D_train=D.trainCV(numFolds,i);    Instances D_test=D.testCV(numFolds,i);    if (h.getDebug())     System.out.println(":- Fold [" + i + "/"+ numFolds+ "] -: "+ MLUtils.getDatasetName(D)+ "\tL="+ D.classIndex()+ "\tD(t:T)=("+ D_train.numInstances()+ ":"+ D_test.numInstances()+ ")\tLC(t:T)="+ Utils.roundDouble(MLUtils.labelCardinality(D_train,D.classIndex()),2)+ ":"+ Utils.roundDouble(MLUtils.labelCardinality(D_test,D.classIndex()),2)+ ")");    r_[i]=evaluateModel(h,D_train,D_test);  }  Result r=MLEvalUtils.combinePredictions(r_);  if (h instanceof MultiTargetClassifier || isMT(D)) {    r.setInfo("Type","MT-CV");  } else   if (h instanceof MultiLabelClassifier) {    r.setInfo("Type","ML-CV");    try {      r.setInfo("Threshold",String.valueOf(Double.parseDouble(top)));    } catch (    Exception e) {      System.err.println("[WARNING] Automatic threshold calibration not currently enabled for cross-fold validation, setting threshold = 0.5.\n");      r.setInfo("Threshold",String.valueOf(0.5));    }  }  r.setInfo("Verbosity",vop);  r.output=Result.getStats(r,vop);  r.setValue("Number of training instances",D.numInstances());  r.setValue("Number of test instances",D.numInstances());  return r;}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  public boolean hasNext() throws IOException {  peek();  return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY;}  }
class C{  public Builder textSize(float... size){  if (size.length > 2) {    Log.e("TextSizeButton","Impossible to set Text Size value more than 2! Please Check it");    throw new IllegalArgumentException("Impossible to set Text Size value more than 2! Please Check it");  }  if (size.length > 0) {    if (size[0] == 0) {      Log.e("TextSizeButton","Impossible to set Text Size to 0, default value 15sp is set! Please Check it");      mTextSizeBtn1=15f;    } else {      mTextSizeBtn1=size[0];    }  }  if (size.length > 1) {    if (size[1] == 0) {      Log.e("TextSizeButton","Impossible to set Text Size to 0, default value 15sp is set! Please Check it");      mTextSizeBtn2=15f;    } else {      mTextSizeBtn2=size[1];    }  }  return this;}  }
class C{  public ManagementRequestSender(String userId,ClientId sender,ClientId receiver){  this.builder=new ManagementRequestBuilder(userId,receiver,sender);}  }
class C{  public SourcePosition(CstString sourceFile,int address,int line){  if (address < -1) {    throw new IllegalArgumentException("address < -1");  }  if (line < -1) {    throw new IllegalArgumentException("line < -1");  }  this.sourceFile=sourceFile;  this.address=address;  this.line=line;}  }
class C{  @Deprecated public ECKey(@Nullable BigInteger privKey,@Nullable byte[] pubKey,boolean compressed){  if (privKey == null && pubKey == null)   throw new IllegalArgumentException("ECKey requires at least private or public key");  this.priv=privKey;  if (pubKey == null) {    ECPoint point=publicPointFromPrivate(privKey);    point=getPointWithCompression(point,compressed);    this.pub=new LazyECPoint(point);  } else {    this.pub=new LazyECPoint(CURVE.getCurve(),pubKey);  }}  }
class C{  public boolean isHandleODataParametersVisited(){  return handleODataParametersVisited;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.DEBUG___DEBUG_1:    return debug_1 != DEBUG_1_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void exitApp(){  ActivityManager.getInstance().clearAllActivity();  System.exit(0);}  }
class C{  public static void logSpeedTestReport(final SpeedTestReport report,final Logger logger){  if (logger.isDebugEnabled()) {switch (report.getSpeedTestMode()) {case DOWNLOAD:      logger.debug("--------------current download report--------------------");    break;case UPLOAD:  logger.debug("---------------current upload report--------------------");break;default :break;}logReport(report,logger);}}  }
class C{  private void updateVars(){  long startAt=getStartAt(currentRange);  long endAt=getEndAt();  int max=0;  int min=-1;  long start=-1;  long end=-1;  for (  Long time : history.keySet()) {    if (time < startAt) {      continue;    }    if (endAt > startAt && time > endAt) {      continue;    }    if (start == -1) {      start=time;    }    end=time;    StreamInfoHistoryItem historyObj=history.get(time);    int viewerCount=historyObj.getViewers();    if (viewerCount < min || min == -1) {      min=viewerCount;    }    if (viewerCount == -1) {      min=0;    }    if (viewerCount > max) {      max=viewerCount;    }  }  maxValue=max;  minValue=min;  startTime=start;  endTime=end;  duration=end - start;}  }
class C{  @Override public void rendererChanged(RendererChangeEvent event){  fireChangeEvent();}  }
class C{  private int decodeChannelSfIdx(int chNum){  Channel chan=ctx.channels[chNum];  Channel refChan=ctx.channels[0];  int weightIdx=0;  chan.fillMode=0;switch (br.read(2)) {case 0:    for (int i=0; i < ctx.usedQuantUnits; i++) {      chan.quSfIdx[i]=br.read(6);    }  break;case 1:if (chNum > 0) {  VLC vlcTab=sf_vlc_tabs[br.read(2)];  for (int i=0; i < ctx.usedQuantUnits; i++) {    int delta=vlcTab.getVLC2(br);    chan.quSfIdx[i]=(refChan.quSfIdx[i] + delta) & 0x3F;  }} else {  weightIdx=br.read(2);  if (weightIdx == 3) {    unpackSfVqShape(chan.quSfIdx,ctx.usedQuantUnits);    int numLongVals=br.read(5);    int deltaBits=br.read(2);    int minVal=br.read(4) - 7;    for (int i=0; i < numLongVals; i++) {      chan.quSfIdx[i]=(chan.quSfIdx[i] + br.read(4) - 7) & 0x3F;    }    for (int i=numLongVals; i < ctx.usedQuantUnits; i++) {      chan.quSfIdx[i]=(chan.quSfIdx[i] + minVal + getDelta(deltaBits)) & 0x3F;    }  } else {    int numLongVals=br.read(5);    int deltaBits=br.read(3);    int minVal=br.read(6);    if (numLongVals > ctx.usedQuantUnits || deltaBits == 7) {      log.error(String.format("SF mode 1: invalid parameters"));      return AT3P_ERROR;    }    for (int i=0; i < numLongVals; i++) {      chan.quSfIdx[i]=br.read(6);    }    for (int i=numLongVals; i < ctx.usedQuantUnits; i++) {      chan.quSfIdx[i]=(minVal + getDelta(deltaBits)) & 0x3F;    }  }}break;case 2:if (chNum > 0) {VLC vlcTab=sf_vlc_tabs[br.read(2)];int delta=vlcTab.getVLC2(br);chan.quSfIdx[0]=(refChan.quSfIdx[0] + delta) & 0x3F;for (int i=1; i < ctx.usedQuantUnits; i++) {int diff=refChan.quSfIdx[i] - refChan.quSfIdx[i - 1];delta=vlcTab.getVLC2(br);chan.quSfIdx[i]=(chan.quSfIdx[i - 1] + diff + delta) & 0x3F;}} else if (chan.numCodedVals > 0) {VLC vlcTab=sf_vlc_tabs[br.read(2) + 4];unpackSfVqShape(chan.quSfIdx,ctx.usedQuantUnits);for (int i=0; i < ctx.usedQuantUnits; i++) {int delta=vlcTab.getVLC2(br);chan.quSfIdx[i]=(chan.quSfIdx[i] + signExtend(delta,4)) & 0x3F;}}break;case 3:if (chNum > 0) {for (int i=0; i < ctx.usedQuantUnits; i++) {chan.quSfIdx[i]=refChan.quSfIdx[i];}} else {weightIdx=br.read(2);int vlcSel=br.read(2);VLC vlcTab=sf_vlc_tabs[vlcSel];if (weightIdx == 3) {vlcTab=sf_vlc_tabs[vlcSel + 4];unpackSfVqShape(chan.quSfIdx,ctx.usedQuantUnits);int diff=(br.read(4) + 56) & 0x3F;chan.quSfIdx[0]=(chan.quSfIdx[0] + diff) & 0x3F;for (int i=1; i < ctx.usedQuantUnits; i++) {int delta=vlcTab.getVLC2(br);diff=(diff + signExtend(delta,4)) & 0x3F;chan.quSfIdx[i]=(diff + chan.quSfIdx[i]) & 0x3F;}} else {chan.quSfIdx[0]=br.read(6);for (int i=1; i < ctx.usedQuantUnits; i++) {int delta=vlcTab.getVLC2(br);chan.quSfIdx[i]=(chan.quSfIdx[i - 1] + delta) & 0x3F;}}}break;}if (weightIdx != 0 && weightIdx < 3) {return substractSfWeights(chan,weightIdx);}return 0;}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  protected void initialize(){  for (int i=0; i < m_Elements.length; i++) {    m_Elements[i]=0.0;  }}  }
class C{  protected void textFontImpl(PFont which,float size){  textFont=which;  handleTextSize(size);}  }
class C{  public void deleteBucketLifecycle(GenericRequest genericRequest) throws OSSException, ClientException {  assertParameterNotNull(genericRequest,"genericRequest");  String bucketName=genericRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new HashMap<String,String>();  params.put(SUBRESOURCE_LIFECYCLE,null);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.DELETE).setBucket(bucketName).setParameters(params).setOriginalRequest(genericRequest).build();  doOperation(request,emptyResponseParser,bucketName,null);}  }
class C{  public TerminalExpression createTerminalExpression(){  TerminalExpressionImpl terminalExpression=new TerminalExpressionImpl();  return terminalExpression;}  }
class C{  synchronized void sendBytes(byte[] bytes){  try {    for (int i=0; i < bytes.length - 1; i++) {      ostream.write(bytes[i]);      wait(3);    }    final byte endbyte=bytes[bytes.length - 1];    ostream.write(endbyte);  } catch (  java.io.IOException e) {    log.error("Exception on output: " + e);  }catch (  java.lang.InterruptedException e) {    Thread.currentThread().interrupt();    log.error("Interrupted output: " + e);  }}  }
class C{  public void addURL(URL url,boolean isScanned){  addURL(_urls.length,url);}  }
class C{  public boolean validateNetworkStates(int networkType){  Log.v(LOG_TAG,"validate network state for " + networkType + ": ");  return mConnectivityState[networkType].validateStateTransition();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:31.755 -0500",hash_original_method="9511AC0B81E584A22A2DBDCB260E6C63",hash_generated_method="DA9647646504BBB0EA293CD423DA54F8") void init(){  if (mEvaluator == null) {    mEvaluator=(mValueType == Integer.class) ? sIntEvaluator : (mValueType == Float.class) ? sFloatEvaluator : null;  }  if (mEvaluator != null) {    mKeyframeSet.setEvaluator(mEvaluator);  }}  }
class C{  public static void clear(){  pojoClassCache.clear();}  }
class C{  public static boolean canInternalFrame(List constraints){  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {    DockConstraint dc=(DockConstraint)iter.next();    if (!dc.canInternalFrame())     return false;  }  return true;}  }
class C{  public boolean isJoinQuery(){  return false;}  }
class C{  public Field(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.082 -0500",hash_original_method="C30FE6183FA56AAB4D4D014829EBBFDC",hash_generated_method="5C813B98FE3952799FD45FBDC1D36766") public void copyFromUnchecked(byte[] d){  mRS.validate();  copy1DRangeFromUnchecked(0,mCurrentCount,d);}  }
class C{  protected String encode(final String value){  try {    return URLEncoder.encode(value,"UTF-8");  } catch (  Exception exp) {    return value;  }}  }
class C{  public synchronized void replaceTemplates(CodeTemplate[] newTemplates){  templates.clear();  if (newTemplates != null) {    for (int i=0; i < newTemplates.length; i++) {      templates.add(newTemplates[i]);    }  }  sortTemplates();}  }
class C{  public RealBuffer process(RealBuffer buffer){  float[] samples=buffer.getSamples();  for (int x=0; x < samples.length; x++) {    samples[x]=process(samples[x]);  }  return buffer;}  }
class C{  protected String doIt() throws Exception {  int Table_ID=getTable_ID();  int Record_ID=getRecord_ID();  log.info("Table_ID=" + Table_ID + ", Record_ID="+ Record_ID);  if (Table_ID == X_I_BankStatement.Table_ID)   return createPayment(new X_I_BankStatement(getCtx(),Record_ID,get_TrxName())); else   if (Table_ID == MBankStatementLine.Table_ID)   return createPayment(new MBankStatementLine(getCtx(),Record_ID,get_TrxName()));  throw new AdempiereSystemError("??");}  }
class C{  public void restoreState(String stateInXml){  if (stateInXml == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    super.restoreState(stateInXml);  } catch (  Exception e) {  }  RestorableSupport restorableSupport;  try {    restorableSupport=RestorableSupport.parse(stateInXml);  } catch (  Exception e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseStateXml",stateInXml);    Logging.logger().severe(message);    throw new IllegalArgumentException(message,e);  }  Double spacingPixelsState=restorableSupport.getStateValueAsDouble("spacingPixels");  if (spacingPixelsState != null)   setSpacingPixels(spacingPixelsState);  Double scaleState=restorableSupport.getStateValueAsDouble("scale");  if (scaleState != null)   setScale(scaleState);}  }
class C{  public String toString(){  return "\"" + getValue() + "\"";}  }
class C{  public BlankColumn(ICubeProvider provider,ICubicWorld world,int cubeX,int cubeZ){  super(provider,world,cubeX,cubeZ);  blankCube=new BlankCube(this);}  }
class C{  JavaScriptInterface(Context c){  mContext=c;}  }
class C{  public String search() throws Exception {  executeQuery();  return SUCCESS;}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public Debugger(final IDebugger debugger){  m_debugger=debugger;  m_process=new Process(m_debugger.getProcessManager());  m_bookmarkManager=new BookmarkManager(m_debugger.getBookmarkManager());  m_breakpointManager=new BreakpointManager(m_debugger.getBreakpointManager());  m_debugger.addListener(m_listener);}  }
class C{  private void init(Context context,AttributeSet attrs,int defStyle){  paint=new Paint();  paint.setAntiAlias(true);  paintBorder=new Paint();  paintBorder.setAntiAlias(true);  paintSelectorBorder=new Paint();  paintSelectorBorder.setAntiAlias(true);  applyShadow();  TypedArray attributes=context.obtainStyledAttributes(attrs,R.styleable.CircularImageView,defStyle,0);  hasBorder=attributes.getBoolean(R.styleable.CircularImageView_civ_border,false);  hasSelector=attributes.getBoolean(R.styleable.CircularImageView_civ_selector,false);  if (hasBorder) {    int defaultBorderSize=(int)(2 * context.getResources().getDisplayMetrics().density + 0.5f);    setBorderWidth(attributes.getDimensionPixelOffset(R.styleable.CircularImageView_civ_border_width,defaultBorderSize));    setBorderColor(attributes.getColor(R.styleable.CircularImageView_civ_border_color,Color.WHITE));  }  if (hasSelector) {    int defaultSelectorSize=(int)(2 * context.getResources().getDisplayMetrics().density + 0.5f);    setSelectorColor(attributes.getColor(R.styleable.CircularImageView_civ_selector_color,Color.TRANSPARENT));    setSelectorStrokeWidth(attributes.getDimensionPixelOffset(R.styleable.CircularImageView_civ_selector_stroke_width,defaultSelectorSize));    setSelectorStrokeColor(attributes.getColor(R.styleable.CircularImageView_civ_selector_stroke_color,Color.BLUE));  }  if (attributes.getBoolean(R.styleable.CircularImageView_civ_shadow,false))   setShadow(true);  attributes.recycle();}  }
class C{  public PropertyException(String msg){  super(msg);}  }
class C{  public static void downloadFile(String url,BinaryHttpResponseHandler handler){  asyncHttpClient.get(context,url,handler);}  }
class C{  public AnnotationPair_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_Annotation1=jcas.getRequiredFeatureDE(casType,"Annotation1","uima.tcas.Annotation",featOkTst);  casFeatCode_Annotation1=(null == casFeat_Annotation1) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Annotation1).getCode();  casFeat_Annotation2=jcas.getRequiredFeatureDE(casType,"Annotation2","uima.tcas.Annotation",featOkTst);  casFeatCode_Annotation2=(null == casFeat_Annotation2) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_Annotation2).getCode();  casFeat_StringRepresentation1=jcas.getRequiredFeatureDE(casType,"StringRepresentation1","uima.cas.String",featOkTst);  casFeatCode_StringRepresentation1=(null == casFeat_StringRepresentation1) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_StringRepresentation1).getCode();  casFeat_StringRepresentation2=jcas.getRequiredFeatureDE(casType,"StringRepresentation2","uima.cas.String",featOkTst);  casFeatCode_StringRepresentation2=(null == casFeat_StringRepresentation2) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_StringRepresentation2).getCode();}  }
class C{  public static char[] encode(byte[] in,int iLen){  return encode(in,0,iLen);}  }
class C{  private EnumGeneratorUtil(){  throw new UnsupportedOperationException();}  }
class C{  public ListBuffer<A> prepend(A x){  elems=elems.prepend(x);  if (last == null)   last=elems;  count++;  return this;}  }
class C{  static public void assertRightAligned(View first,View second,int margin){  int[] xy=new int[2];  first.getLocationOnScreen(xy);  int firstRight=xy[0] + first.getMeasuredWidth();  second.getLocationOnScreen(xy);  int secondRight=xy[0] + second.getMeasuredWidth();  assertEquals("views are not right aligned",Math.abs(firstRight - secondRight),margin);}  }
class C{  public void parseFile() throws IOException, ReplicatorException {  chunksDefinitions=new LinkedList<ChunkRequest>();  logger.info("Parsing " + definitionFile);  FileReader fileReader=new FileReader(definitionFile);  CSVReader reader=new CSVReader(fileReader);  String[] cols;  while ((cols=reader.readNext()) != null) {    int width=cols.length;    if (width == 0)     continue;    if (width >= 1 && cols[0].startsWith("#"))     continue;    if (width == 1) {      chunksDefinitions.add(new ChunkRequest(cols[0].trim()));    } else     if (width == 2) {      chunksDefinitions.add(new ChunkRequest(cols[0].trim(),cols[1].trim()));    } else     if (width == 3) {      chunksDefinitions.add(new ChunkRequest(cols[0].trim(),cols[1].trim(),Long.valueOf(cols[2].trim())));    } else {      String[] columns=new String[width - 3];      for (int i=0, j=3; i < columns.length; i++, j++) {        columns[i]=cols[j].trim();      }      chunksDefinitions.add(new ChunkRequest(cols[0].trim(),cols[1].trim(),Long.valueOf(cols[2].trim()),columns));    }  }  reader.close();  fileReader.close();}  }
class C{  public DefaultContentSelector(ContentManager cm,XBLOMContentElement content,Element bound){  super(cm,content,bound);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.267 -0500",hash_original_method="A53B6C9369FBB7C97FD6103A4EABE7DB",hash_generated_method="EAB55C0344617AE8D546309413C0BDDC") public ParserConfigurationException(String msg){  super(msg);}  }
class C{  @Override public void apply(FaceletContext ctx,UIComponent parent) throws IOException {  UIViewRoot root=ComponentSupport.getViewRoot(ctx,parent);  ResourceBundle bundle=null;  try {    String name=this.basename.getValue(ctx);    ClassLoader cl=Thread.currentThread().getContextClassLoader();    if (root != null && root.getLocale() != null) {      bundle=ResourceBundle.getBundle(name,root.getLocale(),cl);    } else {      bundle=ResourceBundle.getBundle(name,Locale.getDefault(),cl);    }  } catch (  Exception e) {    throw new TagAttributeException(this.tag,this.basename,e);  }  ResourceBundleMap map=new ResourceBundleMap(bundle);  FacesContext faces=ctx.getFacesContext();  faces.getExternalContext().getRequestMap().put(this.var.getValue(ctx),map);}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public void removeSyncBarrier(int token){  mQueue.removeSyncBarrier(token);}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  public static AnnotatedTypeMirror removePrefix(final Elements elements,final AnnotatedTypeMirror annoType){  AnnotatedTypeMirror result=annoType.deepCopy(false);  Set<AnnotationMirror> annos=annoType.getAnnotations();  for (  AnnotationMirror anno : annos) {    AnnotationMirror cleanedMirror=removePrefix(elements,anno);    if (cleanedMirror != null) {      result.addAnnotation(cleanedMirror);    } else {      result.addAnnotation(anno);    }  }  return result;}  }
class C{  public static boolean isInstanceOf(final Class type,final Object obj){  return (type != null && type.isInstance(obj));}  }
class C{  public Transition(IMove move,INode prev){  this.move=move;  this.prev=prev;}  }
class C{  public void test_setStartRuleIIIIZ(){  TimeZone.setDefault(TimeZone.getTimeZone("GMT"));  SimpleTimeZone st=new SimpleTimeZone(TimeZone.getTimeZone("EST").getRawOffset(),"EST");  st.setStartRule(Calendar.NOVEMBER,1,Calendar.SUNDAY,1,true);  st.setEndRule(Calendar.NOVEMBER,15,Calendar.SUNDAY,1,false);  assertTrue("StartRule improperly set1",st.useDaylightTime());  assertTrue("StartRule improperly set2",st.inDaylightTime((new GregorianCalendar(1999,Calendar.NOVEMBER,7,12,0).getTime())));  assertTrue("StartRule improperly set3",st.inDaylightTime((new GregorianCalendar(1999,Calendar.NOVEMBER,13,12,0).getTime())));  assertTrue("StartRule improperly set4",!(st.inDaylightTime(new GregorianCalendar(1999,Calendar.NOVEMBER,6,12,0).getTime())));  assertTrue("StartRule improperly set5",!(st.inDaylightTime(new GregorianCalendar(1999,Calendar.NOVEMBER,14,12,0).getTime())));  try {    st.setStartRule(20,15,Calendar.SUNDAY,1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(Calendar.NOVEMBER,35,Calendar.SUNDAY,1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(Calendar.NOVEMBER,15,12,1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setStartRule(Calendar.NOVEMBER,15,Calendar.SUNDAY,-1,true);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public String transform(StructuredRecord structuredRecord) throws IOException {  StringBuilder builder=new StringBuilder();  Iterator<Schema.Field> fieldIterator=structuredRecord.getSchema().getFields().iterator();  if (fieldIterator.hasNext()) {    builder.append(getFieldAsString(structuredRecord.get(fieldIterator.next().getName())));  }  while (fieldIterator.hasNext()) {    builder.append(delimiter);    builder.append(getFieldAsString(structuredRecord.get(fieldIterator.next().getName())));  }  return builder.toString();}  }
class C{  public static Map<String,Object> startNextDay(GenericValue techDataCalendar,Timestamp dateFrom){  Map<String,Object> result=FastMap.newInstance();  Timestamp dateTo=null;  GenericValue techDataCalendarWeek=null;  try {    techDataCalendarWeek=techDataCalendar.getRelatedOne("TechDataCalendarWeek",true);  } catch (  GenericEntityException e) {    Debug.logError("Pb reading Calendar Week associated with calendar" + e.getMessage(),module);    return ServiceUtil.returnError("Pb reading Calendar Week associated with calendar");  }  Calendar cDateTrav=Calendar.getInstance();  cDateTrav.setTime(dateFrom);  Map<String,Object> position=dayStartCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));  Time startTime=(Time)position.get("startTime");  int moveDay=((Integer)position.get("moveDay")).intValue();  dateTo=(moveDay == 0) ? dateFrom : UtilDateTime.getDayStart(dateFrom,moveDay);  Timestamp startAvailablePeriod=new Timestamp(UtilDateTime.getDayStart(dateTo).getTime() + startTime.getTime() + cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));  if (dateTo.before(startAvailablePeriod)) {    dateTo=startAvailablePeriod;  } else {    dateTo=UtilDateTime.getNextDayStart(dateTo);    cDateTrav.setTime(dateTo);    position=dayStartCapacityAvailable(techDataCalendarWeek,cDateTrav.get(Calendar.DAY_OF_WEEK));    startTime=(Time)position.get("startTime");    moveDay=((Integer)position.get("moveDay")).intValue();    if (moveDay != 0)     dateTo=UtilDateTime.getDayStart(dateTo,moveDay);    dateTo.setTime(dateTo.getTime() + startTime.getTime() + cDateTrav.get(Calendar.ZONE_OFFSET)+ cDateTrav.get(Calendar.DST_OFFSET));  }  result.put("dateTo",dateTo);  result.put("nextCapacity",position.get("capacity"));  return result;}  }
class C{  public int remove(int index){  if (index < 0 || index >= count) {    throw new ArrayIndexOutOfBoundsException(index);  }  int entry=data[index];  for (int i=index; i < count - 1; i++) {    data[i]=data[i + 1];  }  count--;  return entry;}  }
class C{  public boolean implicitlyCloseTagOnEOF(String nodeName){  if (nodeName == null) {    return false;  }  nodeName=nodeName.toLowerCase();  return StringUtil.equalsOne(nodeName,CLOSED_ON_EOF) != -1;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void store(Address value){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void testBug71672() throws SQLException {  boolean lastTest=false;  int testStep=0;  Connection testConn=null;  Statement testStmt=null;  PreparedStatement testPStmt=null;  ResultSet testRS=null;  int[] res=null;  int[] expectedUpdCount=null;  int[][] expectedGenKeys=null;  int[][] expectedGenKeysBatchStmt=null;  int[] expectedGenKeysMultiQueries=null;  int[] expectedUpdCountBatchPStmt=null;  int[] expectedGenKeysBatchPStmt=null;  final String tableDDL="(id INT AUTO_INCREMENT PRIMARY KEY, ch CHAR(1) UNIQUE KEY, ct INT)";  final String[] queries=new String[]{"INSERT INTO testBug71672 (ch, ct) VALUES ('A', 100), ('C', 100), ('D', 100)","INSERT INTO testBug71672 (ch, ct) VALUES ('B', 2), ('C', 3), ('D', 4), ('E', 5) ON DUPLICATE KEY UPDATE ct = -1 * (ABS(ct) + VALUES(ct))","INSERT INTO testBug71672 (ch, ct) VALUES ('F', 100) ON DUPLICATE KEY UPDATE ct = -1 * (ABS(ct) + VALUES(ct))","INSERT INTO testBug71672 (ch, ct) VALUES ('B', 2), ('F', 6) ON DUPLICATE KEY UPDATE ct = -1 * (ABS(ct) + VALUES(ct))","INSERT INTO testBug71672 (ch, ct) VALUES ('G', 100)"};  final int[] expectedUpdCountDef=new int[]{3,6,1,4,1};  final int[][] expectedGenKeysForChkODKU=new int[][]{{1,2,3},{4},{8},{8},{11}};  final int[][] expectedGenKeysForNoChkODKU=new int[][]{{1,2,3},{4,5,6,7,8,9},{8},{8,9,10,11},{11}};  final int[][] expectedGenKeysForBatchStmtRW=new int[][]{{1},{4},{8},{8},{11}};  final int[] expectedUpdCountDef51=new int[]{3,8,1,6,1};  final int[][] expectedGenKeysForChkODKU51=new int[][]{{1,2,3},{4},{6},{6},{7}};  final int[][] expectedGenKeysForNoChkODKU51=new int[][]{{1,2,3},{4,5,6,7,8,9,10,11},{6},{6,7,8,9,10,11},{7}};  final int[][] expectedGenKeysForBatchStmtRW51=new int[][]{{1},{4},{6},{6},{7}};  final String queryBatchPStmt="INSERT INTO testBug71672 (ch, ct) VALUES (?, ?) ON DUPLICATE KEY UPDATE ct = -1 * (ABS(ct) + VALUES(ct))";  final String[] paramsBatchPStmt=new String[]{"A100","C100","D100","B2","C3","D4","E5","F100","B2","F6","G100"};  final int[] expectedUpdCountBatchPStmtNoRW=new int[]{1,1,1,1,2,2,1,1,2,2,1};  final int sni=Statement.SUCCESS_NO_INFO;  final int[] expectedUpdCountBatchPStmtRW=new int[]{sni,sni,sni,sni,sni,sni,sni,sni,sni,sni,sni};  final int[] expectedGenKeysForBatchPStmtChkODKU=new int[]{1,2,3,4,2,3,7,8,4,8,11};  final int[] expectedGenKeysForBatchPStmtNoChkODKU=new int[]{1,2,3,4,2,3,3,4,7,8,4,5,8,9,11};  final int[] expectedGenKeysForBatchPStmtRW=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};  final int[] expectedUpdCountBatchPStmtNoRW51=new int[]{1,1,1,1,3,3,1,1,3,3,1};  final int[] expectedGenKeysForBatchPStmtChkODKU51=new int[]{1,2,3,4,2,3,5,6,4,6,7};  final int[] expectedGenKeysForBatchPStmtNoChkODKU51=new int[]{1,2,3,4,2,3,4,3,4,5,5,6,4,5,6,6,7,8,7};  final int[] expectedGenKeysForBatchPStmtRW51=new int[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};  do {switch (++testStep) {case 1:      testConn=getConnectionWithProps("");    expectedUpdCount=versionMeetsMinimum(5,5) ? expectedUpdCountDef : expectedUpdCountDef51;  expectedGenKeys=versionMeetsMinimum(5,5) ? expectedGenKeysForChkODKU : expectedGenKeysForChkODKU51;expectedGenKeysBatchStmt=expectedGenKeys;expectedUpdCountBatchPStmt=versionMeetsMinimum(5,5) ? expectedUpdCountBatchPStmtNoRW : expectedUpdCountBatchPStmtNoRW51;expectedGenKeysBatchPStmt=versionMeetsMinimum(5,5) ? expectedGenKeysForBatchPStmtChkODKU : expectedGenKeysForBatchPStmtChkODKU51;break;case 2:testConn=getConnectionWithProps("dontCheckOnDuplicateKeyUpdateInSQL=true");expectedUpdCount=versionMeetsMinimum(5,5) ? expectedUpdCountDef : expectedUpdCountDef51;expectedGenKeys=versionMeetsMinimum(5,5) ? expectedGenKeysForNoChkODKU : expectedGenKeysForNoChkODKU51;expectedGenKeysBatchStmt=expectedGenKeys;expectedUpdCountBatchPStmt=versionMeetsMinimum(5,5) ? expectedUpdCountBatchPStmtNoRW : expectedUpdCountBatchPStmtNoRW51;expectedGenKeysBatchPStmt=versionMeetsMinimum(5,5) ? expectedGenKeysForBatchPStmtNoChkODKU : expectedGenKeysForBatchPStmtNoChkODKU51;break;case 3:testConn=getConnectionWithProps("rewriteBatchedStatements=true");expectedUpdCount=versionMeetsMinimum(5,5) ? expectedUpdCountDef : expectedUpdCountDef51;expectedGenKeys=versionMeetsMinimum(5,5) ? expectedGenKeysForChkODKU : expectedGenKeysForChkODKU51;expectedGenKeysBatchStmt=versionMeetsMinimum(5,5) ? expectedGenKeysForBatchStmtRW : expectedGenKeysForBatchStmtRW51;expectedUpdCountBatchPStmt=expectedUpdCountBatchPStmtRW;expectedGenKeysBatchPStmt=versionMeetsMinimum(5,5) ? expectedGenKeysForBatchPStmtRW : expectedGenKeysForBatchPStmtRW51;break;case 4:testConn=getConnectionWithProps("rewriteBatchedStatements=true,dontCheckOnDuplicateKeyUpdateInSQL=true");expectedUpdCount=versionMeetsMinimum(5,5) ? expectedUpdCountDef : expectedUpdCountDef51;expectedGenKeys=versionMeetsMinimum(5,5) ? expectedGenKeysForChkODKU : expectedGenKeysForChkODKU51;expectedGenKeysBatchStmt=versionMeetsMinimum(5,5) ? expectedGenKeysForBatchStmtRW : expectedGenKeysForBatchStmtRW51;expectedUpdCountBatchPStmt=expectedUpdCountBatchPStmtRW;expectedGenKeysBatchPStmt=versionMeetsMinimum(5,5) ? expectedGenKeysForBatchPStmtRW : expectedGenKeysForBatchPStmtRW51;lastTest=true;break;}createTable("testBug71672",tableDDL);for (int i=0; i < queries.length; i++) {testBug71672Statement(testStep,testConn,queries[i],-1,expectedGenKeys[i]);}dropTable("testBug71672");createTable("testBug71672",tableDDL);for (int i=0; i < queries.length; i++) {testBug71672Statement(testStep,testConn,queries[i],expectedUpdCount[i],expectedGenKeys[i]);}dropTable("testBug71672");createTable("testBug71672",tableDDL);testStmt=testConn.createStatement();for (String query : queries) {testStmt.addBatch(query);}res=testStmt.executeBatch();assertEquals(testStep + ". Satement.executeBatch() result",expectedUpdCount.length,res.length);for (int i=0; i < expectedUpdCount.length; i++) {assertEquals(testStep + "." + i+ ". Satement.executeBatch() result",expectedUpdCount[i],res[i]);}testRS=testStmt.getGeneratedKeys();for (int i=0; i < expectedGenKeysBatchStmt.length; i++) {for (int j=0; j < expectedGenKeysBatchStmt[i].length; j++) {assertTrue(testStep + ". Row expected in generated keys ResultSet",testRS.next());assertEquals(testStep + ".[" + i+ "]["+ j+ "]. Wrong generated key",expectedGenKeysBatchStmt[i][j],testRS.getInt(1));}}assertFalse(testStep + ". No more rows expected in generated keys ResultSet",testRS.next());testRS.close();testStmt.close();dropTable("testBug71672");createTable("testBug71672",tableDDL);for (int i=0; i < queries.length; i++) {testBug71672PreparedStatement(testStep,testConn,queries[i],-1,expectedGenKeys[i]);}dropTable("testBug71672");createTable("testBug71672",tableDDL);for (int i=0; i < queries.length; i++) {testBug71672PreparedStatement(testStep,testConn,queries[i],expectedUpdCount[i],expectedGenKeys[i]);}dropTable("testBug71672");createTable("testBug71672",tableDDL);testPStmt=testConn.prepareStatement(queryBatchPStmt,Statement.RETURN_GENERATED_KEYS);for (String param : paramsBatchPStmt) {testPStmt.setString(1,param.substring(0,1));testPStmt.setInt(2,Integer.parseInt(param.substring(1)));testPStmt.addBatch();}res=testPStmt.executeBatch();assertEquals(testStep + ". PreparedSatement.executeBatch() result",expectedUpdCountBatchPStmt.length,res.length);for (int i=0; i < expectedUpdCountBatchPStmt.length; i++) {assertEquals(testStep + "." + i+ ". PreparedSatement.executeBatch() result",expectedUpdCountBatchPStmt[i],res[i]);}testRS=testPStmt.getGeneratedKeys();for (int i=0; i < expectedGenKeysBatchPStmt.length; i++) {assertTrue(testStep + ". Row expected in generated keys ResultSet",testRS.next());assertEquals(testStep + ".[" + i+ "]. Wrong generated key",expectedGenKeysBatchPStmt[i],testRS.getInt(1));}assertFalse(testStep + ". No more rows expected in generated keys ResultSet",testRS.next());testRS.close();testPStmt.close();dropTable("testBug71672");testConn.close();} while (!lastTest);lastTest=false;String allQueries="";for (String q : queries) {allQueries+=q + ";";}do {switch (++testStep) {case 5:testConn=getConnectionWithProps("allowMultiQueries=true");expectedGenKeysMultiQueries=new int[]{1};break;case 6:testConn=getConnectionWithProps("allowMultiQueries=true,dontCheckOnDuplicateKeyUpdateInSQL=true");expectedGenKeysMultiQueries=new int[]{1,2,3};lastTest=true;break;}createTable("testBug71672",tableDDL);testBug71672Statement(testStep,testConn,allQueries,-1,expectedGenKeysMultiQueries);dropTable("testBug71672");createTable("testBug71672",tableDDL);testBug71672Statement(testStep,testConn,allQueries,3,expectedGenKeysMultiQueries);dropTable("testBug71672");createTable("testBug71672",tableDDL);testBug71672PreparedStatement(testStep,testConn,allQueries,-1,expectedGenKeysMultiQueries);dropTable("testBug71672");createTable("testBug71672",tableDDL);testBug71672PreparedStatement(testStep,testConn,allQueries,3,expectedGenKeysMultiQueries);dropTable("testBug71672");testConn.close();} while (!lastTest);}  }
class C{  public void flushBuffer() throws IOException {  if (count > 0) {    m_os.write(m_outputBytes,0,count);    count=0;  }}  }
class C{  @SuppressWarnings("unchecked") public T withSession(long session){  request.session=Assert.argNot(session,session < 1,"session cannot be less than 1");  return (T)this;}  }
class C{  public String methodNameTipText(){  return "Name of the method used for the transformation.";}  }
class C{  public static boolean vPoolSpecifiesSnapshots(final VirtualPool virtualPool){  if (virtualPool.getMaxNativeSnapshots() == null) {    return false;  }  return virtualPool.getMaxNativeSnapshots() != MAX_DISABLED;}  }
class C{  @POST @Path("/{id}/projects") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN,Role.PROJECT_ADMIN}) public ProjectElement createProject(@PathParam("id") URI id,ProjectParam param){  ProjectElement projectElement=createProject(id,param,getUserFromContext().getName(),getUserFromContext().getTenantId().toString());  auditOp(OperationTypeEnum.CREATE_PROJECT,true,null,param.getName(),id.toString(),projectElement.getId().toString());  return projectElement;}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if (closed) {    throw new IOException("The stream is closed.");  }  if (len == 0) {    return 0;  }  int res=available();  if (res == 0) {    res=makeAvailable();    if (res == 0) {      return -1;    }  }  res=Math.min(res,len);  System.arraycopy(buffer,head,b,off,res);  head+=res;  total+=res;  return res;}  }
class C{  @Override public boolean isGenerateJsFiles(){  return generateJsFiles;}  }
class C{  public ReplicatorCapabilities(){}  }
class C{  private boolean isDoneResponse(){  return response != null;}  }
class C{  public void publish(LogRecord record){  super.publish(record);  super.flush();}  }
class C{  private void initialize(URI p_base,String p_uriSpec) throws MalformedURIException {  if (p_base == null && (p_uriSpec == null || p_uriSpec.trim().length() == 0)) {    throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CANNOT_INIT_URI_EMPTY_PARMS,null));  }  if (p_uriSpec == null || p_uriSpec.trim().length() == 0) {    initialize(p_base);    return;  }  String uriSpec=p_uriSpec.trim();  int uriSpecLen=uriSpec.length();  int index=0;  int colonIndex=uriSpec.indexOf(':');  if (colonIndex < 0) {    if (p_base == null) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_SCHEME_IN_URI,new Object[]{uriSpec}));    }  } else {    initializeScheme(uriSpec);    uriSpec=uriSpec.substring(colonIndex + 1);    if (m_scheme != null && p_base != null) {      if (uriSpec.startsWith("/") || !m_scheme.equals(p_base.m_scheme) || !p_base.getSchemeSpecificPart().startsWith("/")) {        p_base=null;      }    }    uriSpecLen=uriSpec.length();  }  if (uriSpec.startsWith("//")) {    index+=2;    int startPos=index;    char testChar='\0';    while (index < uriSpecLen) {      testChar=uriSpec.charAt(index);      if (testChar == '/' || testChar == '?' || testChar == '#') {        break;      }      index++;    }    if (index > startPos) {      initializeAuthority(uriSpec.substring(startPos,index));    } else {      m_host="";    }  }  initializePath(uriSpec.substring(index));  if (p_base != null) {    if (m_path.length() == 0 && m_scheme == null && m_host == null) {      m_scheme=p_base.getScheme();      m_userinfo=p_base.getUserinfo();      m_host=p_base.getHost();      m_port=p_base.getPort();      m_path=p_base.getPath();      if (m_queryString == null) {        m_queryString=p_base.getQueryString();      }      return;    }    if (m_scheme == null) {      m_scheme=p_base.getScheme();    }    if (m_host == null) {      m_userinfo=p_base.getUserinfo();      m_host=p_base.getHost();      m_port=p_base.getPort();    } else {      return;    }    if (m_path.length() > 0 && m_path.startsWith("/")) {      return;    }    String path=new String();    String basePath=p_base.getPath();    if (basePath != null) {      int lastSlash=basePath.lastIndexOf('/');      if (lastSlash != -1) {        path=basePath.substring(0,lastSlash + 1);      }    }    path=path.concat(m_path);    index=-1;    while ((index=path.indexOf("/./")) != -1) {      path=path.substring(0,index + 1).concat(path.substring(index + 3));    }    if (path.endsWith("/.")) {      path=path.substring(0,path.length() - 1);    }    index=-1;    int segIndex=-1;    String tempString=null;    while ((index=path.indexOf("/../")) > 0) {      tempString=path.substring(0,path.indexOf("/../"));      segIndex=tempString.lastIndexOf('/');      if (segIndex != -1) {        if (!tempString.substring(segIndex++).equals("..")) {          path=path.substring(0,segIndex).concat(path.substring(index + 4));        }      }    }    if (path.endsWith("/..")) {      tempString=path.substring(0,path.length() - 3);      segIndex=tempString.lastIndexOf('/');      if (segIndex != -1) {        path=path.substring(0,segIndex + 1);      }    }    m_path=path;  }}  }
class C{  public static void main(String[] argv){  runFilter(new RemoveUseless(),argv);}  }
class C{  public NullChange(String name){  Assert.isNotNull(name);  fName=name;}  }
class C{  public RegularBlockImpl(){  contents=new LinkedList<>();  type=BlockType.REGULAR_BLOCK;}  }
class C{  private void storeFocusedDockables(){  MainFrame mainFrame=RapidMinerGUI.getMainFrame();  if (mainFrame != null) {    focusedDockables=new ArrayList<>();    DockableState[] states=mainFrame.getDockingDesktop().getContext().getDockables();    List<TabbedDockableContainer> memorizedContainer=new ArrayList<>();    for (    DockableState state : states) {      TabbedDockableContainer container=DockingUtilities.findTabbedDockableContainer(state.getDockable());      if (container != null) {        if (!memorizedContainer.contains(container)) {          focusedDockables.add(container.getSelectedDockable());          memorizedContainer.add(container);        }      }    }  }}  }
class C{  public MaximizeAction(){  super(MAXIMIZE_CMD);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PAREN_EXPRESSION__EXPRESSION:    setExpression((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  public void mapPossibleType(Item item){  mFastAdapter.registerTypeInstance(item);}  }
class C{  private void emitGetter(Method method,String methodName,String fieldName,String returnType,StringBuilder builder){  builder.append("    @Override\n    public ");  builder.append(returnType);  builder.append(" ");  builder.append(methodName);  builder.append("() {\n");  Class<?> returnTypeClass=method.getReturnType();  if (isList(returnTypeClass) || isMap(returnTypeClass)) {    builder.append("      ");    builder.append(getEnsureName(fieldName));    builder.append("();\n");  }  builder.append("      return ");  builder.append(fieldName);  builder.append(";\n    }\n\n");}  }
class C{  public IgniteInterruptedException(String msg){  super(msg);}  }
class C{  @LargeTest public void testStressAddRemoveOverlay() throws Exception {  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String VideoItemFileName1=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";  final String ImageItemFileName2=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String OverlayFile3=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  final String OverlayFile4=INPUT_FILE_PATH + "IMG_640x480_Overlay2.png";  final String[] loggingInfo=new String[1];  int i=0;  final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1",VideoItemFileName1,renderingMode);  mVideoEditor.addMediaItem(mediaItem1);  final MediaImageItem mediaItem2=new MediaImageItem(mVideoEditor,"m2",ImageItemFileName2,10000,renderingMode);  mVideoEditor.addMediaItem(mediaItem2);  writeTestCaseHeader("testStressAddRemoveOverlay");  getBeginMemory();  for (i=0; i < 50; i++) {    if (i % 3 == 0) {      mediaItem1.setExtractBoundaries(0,10000);      final Bitmap mBitmap=mVideoEditorHelper.getBitmap(OverlayFile3,640,480);      final OverlayFrame overlayFrame=mVideoEditorHelper.createOverlay(mediaItem1,"overlay" + i,mBitmap,1000,5000);      mediaItem1.addOverlay(overlayFrame);      mediaItem1.removeOverlay("overlay" + i);    }    if (i % 3 == 1) {      final Bitmap mBitmap=mVideoEditorHelper.getBitmap(OverlayFile4,640,480);      final OverlayFrame overlayFrame=mVideoEditorHelper.createOverlay(mediaItem2,"overlay" + i,mBitmap,1000,5000);      mediaItem2.addOverlay(overlayFrame);      mediaItem2.removeOverlay("overlay" + i);    }    if (i % 3 == 2) {      mediaItem1.setExtractBoundaries(0,10000);      final Bitmap mBitmap=mVideoEditorHelper.getBitmap(OverlayFile4,640,480);      final OverlayFrame overlayFrame=mVideoEditorHelper.createOverlay(mediaItem1,"overlay" + i,mBitmap,0,mediaItem1.getDuration());      mediaItem1.addOverlay(overlayFrame);      mediaItem1.removeOverlay("overlay" + i);    }    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,false,i);    }  }  getAfterMemory_updateLog(loggingInfo,false,i);}  }
class C{  public FormattedName(String name){  super(name);}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public static void checkArgument(boolean expression,@NonNull String errorTemplate,Object... params){  if (!expression) {    throw new IllegalArgumentException(String.format(errorTemplate,params));  }}  }
class C{  private static RGB findRGB(ColorRegistry registry,String key,RGB defaultRGB){  RGB rgb=registry.getRGB(key);  if (rgb != null)   return rgb;  return defaultRGB;}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  OutputStream bos=null;  try {    bos=new OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public int deleteEntries(PrincipalName service,int etype,int kvno){  int count=0;  Map<Integer,Integer> highest=new HashMap<>();  for (int i=entries.size() - 1; i >= 0; i--) {    KeyTabEntry e=entries.get(i);    if (service.match(e.getService())) {      if (etype == -1 || e.keyType == etype) {        if (kvno == -2) {          if (highest.containsKey(e.keyType)) {            int n=highest.get(e.keyType);            if (e.keyVersion > n) {              highest.put(e.keyType,e.keyVersion);            }          } else {            highest.put(e.keyType,e.keyVersion);          }        } else         if (kvno == -1 || e.keyVersion == kvno) {          entries.removeElementAt(i);          count++;        }      }    }  }  if (kvno == -2) {    for (int i=entries.size() - 1; i >= 0; i--) {      KeyTabEntry e=entries.get(i);      if (service.match(e.getService())) {        if (etype == -1 || e.keyType == etype) {          int n=highest.get(e.keyType);          if (e.keyVersion != n) {            entries.removeElementAt(i);            count++;          }        }      }    }  }  return count;}  }
class C{  @org.junit.Test public void testScript(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("do you like black");  String response=waitForOutput(output);  if (!response.equals("Yes, it is a nice color.")) {    fail("did not match: " + response);  }  text.input("What are you?");  response=waitForOutput(output);  if (!response.equals("I am a bot.")) {    fail("did not match: " + response);  }  bot.shutdown();}  }
class C{  public void send(InetAddress adr,int port) throws IOException {  int maxseq=getNumPackets();  DatagramSocket s=new DatagramSocket();  for (int seq=1; seq <= maxseq; seq++) {    byte[] pack=getUDPMessage(seq);    DatagramPacket p=new DatagramPacket(pack,pack.length);    p.setAddress(adr);    p.setPort(port);    s.send(p);  }}  }
class C{  public String retrieveURL(){  return m_URL;}  }
class C{  public static File locateFile(String name,String basedir){  File f=new File(name);  if (f.exists()) {    return f;  }  if (basedir != null) {    f=new File(basedir,name);    if (f.exists()) {      return f;    }  }{    String name2=name.trim();    if (!name.equals(name2)) {      f=locateFile(name2,basedir);      if (f != null) {        return f;      }    }  }{    String name2=name.replace('/',File.separatorChar);    if (!name.equals(name2)) {      f=locateFile(name2,basedir);      if (f != null) {        return f;      }    }    name2=name.replace('\\',File.separatorChar);    if (!name.equals(name2)) {      f=locateFile(name2,basedir);      if (f != null) {        return f;      }    }  }  if (name.length() > 2 && name.charAt(0) == '"' && name.charAt(name.length() - 1) == '"') {    f=locateFile(name.substring(1,name.length() - 1),basedir);    if (f != null) {      return f;    }  }  return null;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public boolean isRoleGranted(Role grantedRole){  if (grantedRole == this) {    return true;  }  if (grantedRoles != null) {    for (    Role role : grantedRoles.keySet()) {      if (role == grantedRole) {        return true;      }      if (role.isRoleGranted(grantedRole)) {        return true;      }    }  }  return false;}  }
class C{  public MonKeyImp(String summaryLabel,Object details,String units){  this.summaryLabel=(summaryLabel == null) ? "" : summaryLabel;  this.details=details;  this.units=(units == null) ? "" : units;}  }
class C{  public CreateIndexRequest aliases(BytesReference source){  try {    XContentParser parser=XContentHelper.createParser(source);    parser.nextToken();    while ((parser.nextToken()) != XContentParser.Token.END_OBJECT) {      alias(Alias.fromXContent(parser));    }    return this;  } catch (  IOException e) {    throw new ElasticsearchParseException("Failed to parse aliases",e);  }}  }
class C{  private void createSubmissionsExp() throws jplag.ExitException {  readIncludeFile();  submissions=new Vector<Submission>();  File f=new File(options.root_dir);  if (f == null || !f.isDirectory()) {    throw new jplag.ExitException(options.root_dir + " is not a directory!");  }  String[] list=new String[included.size()];  included.copyInto(list);  for (int i=0; i < list.length; i++) {    File subm_dir=new File(f,list[i]);    if (subm_dir == null || !subm_dir.isDirectory())     continue;    if (options.exp && excludeFile(subm_dir.toString())) {      System.err.println("excluded: " + subm_dir);      continue;    }    File file_dir=((options.sub_dir == null) ? subm_dir : new File(subm_dir,options.sub_dir));    if (file_dir != null && file_dir.isDirectory())     submissions.addElement(new Submission(subm_dir.getName(),file_dir,options.read_subdirs,this,this.get_language())); else     if (options.sub_dir == null) {      throw new jplag.ExitException(options.root_dir + " is not a directory!");    }  }}  }
class C{  private EmrClusterDefinition updateEmrClusterDefinitionWithBestPrice(String subnetId,MasterInstanceDefinition masterInstanceDefinition,InstanceDefinition coreInstanceDefinition,InstanceDefinition taskInstanceDefinition){  EmrClusterDefinition emrClusterDefinition=new EmrClusterDefinition();  emrClusterDefinition.setSubnetId(subnetId);  InstanceDefinitions instanceDefinitions=new InstanceDefinitions();  instanceDefinitions.setMasterInstances(masterInstanceDefinition);  instanceDefinitions.setCoreInstances(coreInstanceDefinition);  instanceDefinitions.setTaskInstances(taskInstanceDefinition);  emrClusterDefinition.setInstanceDefinitions(instanceDefinitions);  emrPricingHelper.updateEmrClusterDefinitionWithBestPrice(new EmrClusterAlternateKeyDto(),emrClusterDefinition);  return emrClusterDefinition;}  }
class C{  public static void main(String[] args){  Out out=new Out(args[args.length - 1]);  for (int i=0; i < args.length - 1; i++) {    In in=new In(args[i]);    String s=in.readAll();    out.println(s);    in.close();  }  out.close();}  }
class C{  public void loadUrlIntoView(final String url,final int time){  if ((url.startsWith("javascript:")) || this.canGoBack()) {  } else {    LOG.d(TAG,"loadUrlIntoView(%s, %d)",url,time);  }  this.loadUrlIntoView(url);}  }
class C{  public OMRaster(int x1,int y1,Image ii){  super(RENDERTYPE_XY,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  setColorModel(COLORMODEL_IMAGEICON);  x=x1;  y=y1;  setImage(ii);}  }
class C{  public boolean isTopLevelMenu(){  return getParent() instanceof JMenuBar;}  }
class C{  private LightingColorFilter calculateLight(final float rotation){  final double cosRotation=Math.cos(Math.PI * rotation / 180);  int intensity=AMBIENT_LIGHT + (int)(DIFFUSE_LIGHT * cosRotation);  int highlightIntensity=(int)(SPECULAR_LIGHT * Math.pow(cosRotation,SHININESS));  if (intensity > MAX_INTENSITY) {    intensity=MAX_INTENSITY;  }  if (highlightIntensity > MAX_INTENSITY) {    highlightIntensity=MAX_INTENSITY;  }  final int light=Color.rgb(intensity,intensity,intensity);  final int highlight=Color.rgb(highlightIntensity,highlightIntensity,highlightIntensity);  return new LightingColorFilter(light,highlight);}  }
class C{  public String clustererTipText(){  return "the clusterer to wrap";}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  byte readByte() throws IOException {  mDexFile.readFully(tmpBuf,0,1);  return tmpBuf[0];}  }
class C{  public TeXParser(String parseString,ArrayOfAtoms aoa,boolean firstpass){  this(false,parseString,(TeXFormula)aoa,firstpass);}  }
class C{  @Override public Object singleLinePassword(final FormObject form){  final JPasswordField newPassword=new JPasswordField(form.getTextString());  newPassword.setEchoChar('*');  final int maxLength=form.getInt(PdfDictionary.MaxLen);  if (maxLength != -1) {    newPassword.setColumns(maxLength);  }  setupUniversalFeatures(newPassword,form);  setupTextFeatures(newPassword,form);  final boolean[] flags=form.getFieldFlags();  if ((flags != null) && (flags[FormObject.READONLY_ID])) {    newPassword.setEditable(false);  }  setToolTip(form,newPassword);  return newPassword;}  }
class C{  private FieldRefConstant parseFieldRefConstant(int index) throws IOException {  int classIndex=readShort();  int nameAndTypeIndex=readShort();  return new FieldRefConstant(_class.getConstantPool(),index,classIndex,nameAndTypeIndex);}  }
class C{  @SuppressWarnings("unchecked") public static <T extends View>T findViewById(View containerView,int viewId){  View foundView=containerView.findViewById(viewId);  return (T)foundView;}  }
class C{  public static final TColor newRGB(float r,float g,float b){  return newRGBA(r,g,b,1);}  }
class C{  public boolean isFull(){  return tanks.isFluidTankFull(index);}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  if (!isolated || bcme.getBeanContext().equals(getBeanContext())) {    findAndInit(bcme.iterator());  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public static <T,V>LazyIterable<V> flatCollect(Iterable<T> iterable,Function<? super T,? extends Iterable<V>> function){  return new FlatCollectIterable<>(iterable,function);}  }
class C{  public DerValue(String value) throws IOException {  boolean isPrintableString=true;  for (int i=0; i < value.length(); i++) {    if (!isPrintableStringChar(value.charAt(i))) {      isPrintableString=false;      break;    }  }  data=init(isPrintableString ? tag_PrintableString : tag_UTF8String,value);}  }
class C{  private void zInternalChangeSelectedDateProcedure(LocalDate newDate){  LocalDate oldDate=displayedSelectedDate;  displayedSelectedDate=newDate;  for (  CalendarSelectionListener calendarSelectionListener : calendarSelectionListeners) {    CalendarSelectionEvent dateSelectionEvent=new CalendarSelectionEvent(this,newDate,oldDate);    calendarSelectionListener.selectionChanged(dateSelectionEvent);  }  drawCalendar(displayedYearMonth);  firePropertyChange("selectedDate",oldDate,newDate);}  }
class C{  public BinarySchema build(){  return new BinarySchema(schemaId,fields);}  }
class C{  public static <T>ValueHashMap<T> newInstance(){  return new ValueHashMap<T>();}  }
class C{  public static Angle clamp(Angle value,Angle min,Angle max){  if (value == null || min == null || max == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return value.degrees < min.degrees ? min : (value.degrees > max.degrees ? max : value);}  }
class C{  protected void update(){  XYSeriesCollection dataset=new XYSeriesCollection();  for (  int seedIndex : seedList.getSelectedIndices()) {    Accumulator accumulator=accumulators.get(seedIndex);    int index=0;    if (!accumulator.keySet().contains("Approximation Set")) {      continue;    }    while ((index < accumulator.size("NFE") - 1) && ((Integer)accumulator.get("NFE",index) < slider.getValue())) {      index++;    }    List<?> list=(List<?>)accumulator.get("Approximation Set",index);    XYSeries series=new XYSeries(localization.getString("text.seed",seedIndex + 1),false,true);    for (    Object object : list) {      Solution solution=(Solution)object;      series.add(getValue(solution,0),getValue(solution,1));    }    dataset.addSeries(series);  }  if (referenceSet != null) {    XYSeries series=new XYSeries(localization.getString("text.referenceSet"),false,true);    for (    Solution solution : referenceSet) {      series.add(getValue(solution,0),getValue(solution,1));    }    dataset.addSeries(series);  }  JFreeChart chart=ChartFactory.createScatterPlot(getTitle() + " @ " + slider.getValue()+ " NFE",(String)xAxisSelection.getSelectedItem(),(String)yAxisSelection.getSelectedItem(),dataset,PlotOrientation.VERTICAL,true,true,false);  XYPlot plot=chart.getXYPlot();  XYLineAndShapeRenderer renderer=new XYLineAndShapeRenderer(false,true);  for (int i=0; i < dataset.getSeriesCount(); i++) {    Paint paint=paintHelper.get(dataset.getSeriesKey(i));    renderer.setSeriesPaint(i,paint);  }  plot.setRenderer(renderer);  if ((initialRangeBounds == null) || (initialDomainBounds == null)) {    initialRangeBounds=plot.getRangeAxis().getRange();    initialDomainBounds=plot.getDomainAxis().getRange();  }  if (useInitialBounds.isSelected()) {    plot.getRangeAxis().setRange(initialRangeBounds);    plot.getDomainAxis().setRange(initialDomainBounds);  } else   if (useZoomBounds.isSelected()) {    if ((zoomRangeBounds == null) || (zoomDomainBounds == null)) {      zoomRangeBounds=initialRangeBounds;      zoomDomainBounds=initialDomainBounds;    }    plot.getRangeAxis().setRange(zoomRangeBounds);    plot.getDomainAxis().setRange(zoomDomainBounds);  } else   if (useReferenceSetBounds.isSelected()) {    if (referenceRangeBounds.getLength() > 0.0) {      plot.getRangeAxis().setRange(referenceRangeBounds);    }    if (referenceDomainBounds.getLength() > 0.0) {      plot.getDomainAxis().setRange(referenceDomainBounds);    }  }  chart.addChangeListener(this);  chartContainer.removeAll();  chartContainer.add(new ChartPanel(chart),BorderLayout.CENTER);  chartContainer.revalidate();  chartContainer.repaint();}  }
class C{  public static boolean isSeccompInstalled(){  return Natives.isSeccompInstalled();}  }
class C{  public HeaderCard(String key,double value,int precision,String comment) throws HeaderCardException {  this(key,dblString(value,precision,spaceAvailableForValue(key)),comment,false,false);}  }
class C{  protected void notifyImageLoaded(){  if (this.listener != null) {    this.listener.propertyChange(new PropertyChangeEvent(this,AVKey.IMAGE,null,this));    this.listener=null;  }}  }
class C{  public final int step(int state,int c){  if (classmap == null) {    return transitions[state * points.length + getCharClass(c)];  } else {    return transitions[state * points.length + classmap[c]];  }}  }
class C{  public static void loadImage(Context context,ImageView imageView,String imageUrl,TextDrawable drawable){  Glide.with(context).load(imageUrl).asBitmap().animate(R.anim.fade_in).placeholder(drawable).centerCrop().error(drawable).into(imageView);}  }
class C{  private static Address GetPrimitiveArrayCritical(JNIEnvironment env,int arrayJREF,Address isCopyAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetPrimitiveArrayCritical \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object primitiveArray=env.getJNIRef(arrayJREF);    if (!primitiveArray.getClass().isArray()) {      return Address.zero();    }    JNIGenericHelpers.setBoolStar(isCopyAddress,false);    VM.disableGC(true);    return Magic.objectAsAddress(primitiveArray);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return Address.zero();  }}  }
class C{  public T caseSymmetricReflexiveAssociation_(SymmetricReflexiveAssociation_ object){  return null;}  }
class C{  public void updateBucketOwner(String bucketName,String namespace,String owner){  _log.debug("ECSApi:updateBucketOwner Update bucket initiated for : {}",bucketName);  ClientResponse clientResp=null;  String bodyOnr=" { \"new_owner\": \"" + owner + "\", \"namespace\": \""+ namespace+ "\"}  ";  final String path=MessageFormat.format(URI_UPDATE_BUCKET_OWNER,bucketName);  try {    clientResp=post(path,bodyOnr);  } catch (  Exception e) {    _log.error("Error occured while Owner update for bucket : {}",bucketName,e);  } finally {    if (null == clientResp) {      throw ECSException.exceptions.bucketUpdateFailed(bucketName,"Owner","no response from ECS");    } else     if (clientResp.getStatus() != 200) {      throw ECSException.exceptions.bucketUpdateFailed(bucketName,"Owner",getResponseDetails(clientResp));    }    closeResponse(clientResp);  }}  }
class C{  public String egtUnit(){  return unit;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("{");  boolean firstTime=true;  for (  Entry<Integer,String> entry : mCapabilities.entrySet()) {    if (firstTime) {      firstTime=false;    } else {      sb.append(",");    }    sb.append(entry.getKey());    sb.append(":\"");    sb.append(entry.getValue());    sb.append("\"");  }  sb.append("}");  return sb.toString();}  }
class C{  public static <E,RI extends RichIterable<E>>UnmodifiableRichIterable<E> of(RI iterable){  if (iterable == null) {    throw new IllegalArgumentException("cannot create a UnmodifiableRichIterable for null");  }  return new UnmodifiableRichIterable<>(iterable);}  }
class C{  public Node vet(int cell){  Node node=get(cell);  if (node == null) {    node=new Node();    set(cell,node);  }  return node;}  }
class C{  Element convertTable(Element input,Document targetDocument,HashMap<String,String> oldNewNamesMap){  NodeList childNodes=input.getElementsByTagName("colgroup");  for (int iChild=0; iChild < childNodes.getLength(); iChild++) {    Node node=childNodes.item(iChild);    input.removeChild(node);  }  Element theadNode=null;  childNodes=input.getChildNodes();  for (int iChild=0; iChild < childNodes.getLength(); iChild++) {    if (childNodes.item(iChild).getNodeType() != Node.ELEMENT_NODE) {      continue;    }    Element node=(Element)childNodes.item(iChild);    NodeList thList=node.getElementsByTagName("th");    if (thList != null && thList.getLength() != 0) {      theadNode=targetDocument.createElement("thead");      Element row=targetDocument.createElement("row");      NodeList subChildNodes=node.getChildNodes();      for (int iSubChild=0; iSubChild < subChildNodes.getLength(); iSubChild++) {        if (subChildNodes.item(iSubChild).getNodeType() != Node.ELEMENT_NODE) {          continue;        }        Element subChild=(Element)subChildNodes.item(iSubChild);        row.appendChild(subChild.cloneNode(true));      }      theadNode.appendChild(row);      input.removeChild(node);      break;    }  }  Element tGroup=targetDocument.createElement("tgroup");  if (theadNode != null) {    tGroup.appendChild(theadNode);  }  Element tBody=targetDocument.createElement("tbody");  tGroup.appendChild(tBody);  childNodes=input.getChildNodes();  for (int iChild=0; iChild < childNodes.getLength(); iChild++) {    if (childNodes.item(iChild).getNodeType() != Node.ELEMENT_NODE) {      continue;    }    tBody.appendChild(childNodes.item(iChild));  }  childNodes=input.getChildNodes();  for (int iChild=0; iChild < childNodes.getLength(); iChild++) {    if (childNodes.item(iChild).getNodeType() != Node.ELEMENT_NODE) {      continue;    }    Element node=(Element)childNodes.item(iChild);    input.removeChild(node);  }  input=renameElementAndCloneChild(input,targetDocument,"adobetable");  input.appendChild(tGroup);  input.removeAttribute("width");  input.removeAttribute("colgroup");  input.removeAttribute("cellpadding");  input.removeAttribute("cellspacing");  input.removeAttribute("border");  input.removeAttribute("style");  convertTableChilds(targetDocument,input,input);  int colCount=0;  int currentRowLength=0;  childNodes=input.getElementsByTagName("row");  if (childNodes != null) {    for (int iChild=0; iChild < childNodes.getLength(); iChild++) {      currentRowLength=0;      Element rowNode=(Element)childNodes.item(iChild);      NodeList rowElements=rowNode.getChildNodes();      for (int ix=0; ix < rowElements.getLength(); ix++) {        if (rowElements.item(ix).getNodeType() != Node.ELEMENT_NODE) {          continue;        }        currentRowLength++;      }      if (colCount < currentRowLength) {        colCount=currentRowLength;      }    }  }  tGroup.setAttribute("cols",String.valueOf(colCount));  convertChildren(input,oldNewNamesMap,targetDocument,false);  return input;}  }
class C{  @SuppressWarnings("varargs") @SafeVarargs public static <K>Comparator<K> comparing(Function<K,? extends Comparable<?>>... methods){  return null;}  }
class C{  public boolean isOwnItems(){  return ownItems;}  }
class C{  public void encode(Object value,ByteBuffer buffer) throws BufferOverflowException {  if (value == null) {    buffer.put(TYPE_NULL);    return;  }  if (String.class.equals(value.getClass())) {    buffer.put(TYPE_STRING);    stringEncoder.encode((String)value,buffer);  } else   if (List.class.isAssignableFrom(value.getClass())) {    buffer.put(TYPE_LIST);    List<?> l=(List<?>)value;    buffer.putInt(l.size());    for (int i=0, t=l.size(); i < t; i++) {      encode(l.get(i),buffer);    }  } else   if (Set.class.isAssignableFrom(value.getClass())) {    buffer.put(TYPE_SET);    Set<?> l=(Set<?>)value;    buffer.putInt(l.size());    for (    Object x : l) {      encode(x,buffer);    }  } else   if (Map.class.isAssignableFrom(value.getClass())) {    buffer.put(TYPE_MAP);    Map<?,?> l=(Map<?,?>)value;    buffer.putInt(l.size());    for (    Map.Entry<?,?> x : l.entrySet()) {      encode(x.getKey(),buffer);      encode(x.getValue(),buffer);    }  } else   if (Boolean.class.equals(value.getClass()) || boolean.class.equals(value.getClass())) {    if (Boolean.TRUE.equals(value)) {      buffer.put(TYPE_BOOLEAN_TRUE);    } else {      buffer.put(TYPE_BOOLEAN_FALSE);    }  } else   if (Long.class.equals(value.getClass()) || long.class.equals(value.getClass())) {    if (((Long)value) >= 0) {      buffer.put(TYPE_UNSIGNED_LONG);      unsignedLongEncoder.encode((Long)value,buffer);    } else {      buffer.put(TYPE_LONG);      buffer.putLong((Long)value);    }  } else   if (Integer.class.equals(value.getClass()) || int.class.equals(value.getClass())) {    if ((Integer)value >= 0) {      buffer.put(TYPE_UNSIGNED_INT);      unsignedIntEncoder.encode((Integer)value,buffer);    } else {      buffer.put(TYPE_INT);      buffer.putInt((Integer)value);    }  } else   if (Short.class.equals(value.getClass()) || short.class.equals(value.getClass())) {    buffer.put(TYPE_SHORT);    buffer.putShort((Short)value);  } else   if (Byte.class.equals(value.getClass()) || byte.class.equals(value.getClass())) {    buffer.put(TYPE_BYTE);    buffer.put((Byte)value);  } else   if (Double.class.equals(value.getClass()) || double.class.equals(value.getClass())) {    buffer.put(TYPE_DOUBLE);    buffer.putDouble((Double)value);  } else   if (Float.class.equals(value.getClass()) || float.class.equals(value.getClass())) {    buffer.put(TYPE_FLOAT);    buffer.putFloat((Float)value);  } else   if (Character.class.equals(value.getClass()) || char.class.equals(value.getClass())) {    buffer.put(TYPE_CHAR);    buffer.putChar((Character)value);  } else   if (Date.class.equals(value.getClass())) {    buffer.put(TYPE_DATE);    buffer.putLong(((Date)value).getTime());  } else {    throw new IllegalArgumentException("Can not support non-primitive type:" + value.getClass());  }}  }
class C{  private static AdvancingFrontNode newFrontTriangle(DTSweepContext tcx,TriangulationPoint point,AdvancingFrontNode node){  AdvancingFrontNode newNode;  DelaunayTriangle triangle;  triangle=new DelaunayTriangle(point,node.point,node.next.point);  triangle.markNeighbor(node.triangle);  tcx.addToList(triangle);  newNode=new AdvancingFrontNode(point);  newNode.next=node.next;  newNode.prev=node;  node.next.prev=newNode;  node.next=newNode;  tcx.addNode(newNode);  if (tcx.isDebugEnabled()) {    tcx.getDebugContext().setActiveNode(newNode);  }  if (!legalize(tcx,triangle)) {    tcx.mapTriangleToNodes(triangle);  }  return newNode;}  }
class C{  public void addSubAttribute(GoogleBaseAttribute value){  getSubAttributes().add(value);}  }
class C{  public NetControls(NetBlackboard b){  board=b;  tableModel=new MyTableModel();  initComponents();  toggles=new javax.swing.JToggleButton[numToggle];  toggles[1]=buttonToggleMove;  toggles[2]=buttonToggleSelect;  toggles[3]=buttonTogglePaint;  toggles[4]=buttonToggleScissor;  selected=new boolean[numToggle];  selected[0]=true;  for (int i=1; i < numToggle; ++i) {    selected[i]=false;    toggles[i].setSelected(false);  }  setButtonsEnabled(false);}  }
class C{  public DelphiUnit(){}  }
class C{  @Override public Document toDocument(){  assert project != null;  DocumentFactory docFactory=new DocumentFactory();  Document document=docFactory.createDocument();  Dom4JXMLOutput treeBuilder=new Dom4JXMLOutput(document);  try {    writeXML(treeBuilder);  } catch (  IOException e) {  }  return document;}  }
class C{  public CUmodule(){}  }
class C{  public synchronized static void resetSingleton(){  instance=null;}  }
class C{  @Override public void notifyAllTabs(String code){  if (listeners != null) {    listeners.notifyAll(new SamlCodeEvent(this,code));  }}  }
class C{  static void searchKilled(SearchResultMediator panel){  instance().stopSearch(panel.getToken());  panel.cleanup();  ApplicationHeader header=GUIMediator.instance().getMainFrame().getApplicationHeader();  header.requestSearchFocus();}  }
class C{  public TreeNode<T> copy(){  return copy(treeDef(),this,null);}  }
class C{  private void updateView(){  if (m_editor != null) {    m_editor.removePropertyChangeListener(m_properChangeListener);  }  m_view.removeAll();  final IBean item=(IBean)m_selector.getSelectedItem();  m_editor=item.getEditor();  if (m_editor != null) {    m_editor.addPropertyChangeListener(m_properChangeListener);    m_view.add(m_editor,new GridBagConstraints(0,0,1,1,1.0,0,GridBagConstraints.NORTHWEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,0),0,0));    m_editor.isBeanValid();  }  revalidate();  alignLabels();}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static <T>LazyFutureStream<T> futureStream(final Adapter<T> adapter,final LazyReact react){  return react.fromStream(adapter.stream());}  }
class C{  public static final int pixelToTexel(float coordinate){  return (int)coordinate;}  }
class C{  public void updateStatus(JobContext jobContext) throws Exception {  CloseableIterator<CIMObjectPath> iterator=null;  DbClient dbClient=jobContext.getDbClient();  JobStatus jobStatus=getJobStatus();  try {    if (jobStatus == Job.JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating post processing status of job %s to %s, task: %s",this.getJobName(),jobStatus.name(),opId));    CIMConnectionFactory cimConnectionFactory=jobContext.getCimConnectionFactory();    WBEMClient client=getWBEMClient(dbClient,cimConnectionFactory);    iterator=client.associatorNames(getCimJob(),null,SmisConstants.CIM_STORAGE_VOLUME,null,null);    Calendar now=Calendar.getInstance();    Volume metaHead=dbClient.queryObject(Volume.class,_metaHeadId);    if (jobStatus == Job.JobStatus.SUCCESS) {      CIMObjectPath volumePath=iterator.next();      CIMProperty<String> deviceID=(CIMProperty<String>)volumePath.getKey(SmisConstants.CP_DEVICE_ID);      String headNativeID=deviceID.getValue();      metaHead.setCreationTime(now);      metaHead.setNativeId(headNativeID);      metaHead.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(dbClient,metaHead));      dbClient.persistObject(metaHead);      logMsgBuilder.append("\n");      logMsgBuilder.append(String.format("%n   Task %s created meta head volume: %s with device ID: %s",opId,metaHead.getLabel(),headNativeID));      _log.info(logMsgBuilder.toString());    } else     if (jobStatus == JobStatus.FAILED || jobStatus == JobStatus.FATAL_ERROR) {      logMsgBuilder.append("\n");      logMsgBuilder.append(String.format("Task %s failed to create meta head volume: %s caused by: %s",opId,metaHead.getLabel(),_errorDescription));      Volume volume=dbClient.queryObject(Volume.class,_metaHeadId);      volume.setInactive(true);      dbClient.persistObject(volume);      _log.error(logMsgBuilder.toString());      setFailedStatus(logMsgBuilder.toString());    }  } catch (  Exception e) {    _log.error("Caught an exception while trying to process status for " + this.getJobName(),e);    setPostProcessingErrorStatus("Encountered an internal error during " + this.getJobName() + " job status processing : "+ e.getMessage());  } finally {    if (iterator != null) {      iterator.close();    }    _metaVolumeTaskCompleter.setLastStepStatus(jobStatus);    if (isJobInTerminalFailedState()) {      super.updateStatus(jobContext);    }  }}  }
class C{  @Override public final SplitEvaluate copy() throws Exception {  YongSplitInfo s=(YongSplitInfo)this.clone();  return s;}  }
class C{  public byte[] bytes(){  return this.value.getBytes(Charset.forName(Utf8String.ENCODING));}  }
class C{  private void handleAmazonException(AmazonServiceException ex,String message) throws IllegalArgumentException, ObjectNotFoundException {  if (ex.getStatusCode() == HttpStatus.SC_BAD_REQUEST) {    throw new IllegalArgumentException(message + " Reason: " + ex.getMessage(),ex);  } else   if (ex.getStatusCode() == HttpStatus.SC_NOT_FOUND) {    throw new ObjectNotFoundException(message + " Reason: " + ex.getMessage(),ex);  }  throw ex;}  }
class C{  void handleError(@NotNull Throwable throwable){  String errorMessage=throwable.getMessage();  if (errorMessage == null) {    console.printError(constant.branchDeleteFailed());    notificationManager.showError(constant.branchDeleteFailed());    return;  }  try {    errorMessage=dtoFactory.createDtoFromJson(errorMessage,ServiceError.class).getMessage();    if (errorMessage.equals("Unable get private ssh key")) {      console.printError(constant.messagesUnableGetSshKey());      notificationManager.showError(constant.messagesUnableGetSshKey());      return;    }    console.printError(errorMessage);    notificationManager.showError(errorMessage);  } catch (  Exception e) {    console.printError(errorMessage);    notificationManager.showError(errorMessage);  }}  }
class C{  private void handleHtmlCheckForErrorsForm(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleCheckDbForErrors();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,true).setPaneId("checkForErrors");  pageWrapper.addHeader();  if (!isUserAnAdmin(requestAndResponse)) {    requestAndResponse.print(servletText.errorPageNotAllowed());  } else {    requestAndResponse.print("<table class=\"nopadding\"><tr><td>");    requestAndResponse.print(servletText.checkDbForErrorsAreYouSure());    requestAndResponse.print("</td></tr><tr><td>");    requestAndResponse.print("<form action=\"/doCheckForErrors/" + "\" method=\"POST\">" + "<input type=\"hidden\" name=\"csrft\" value=\"" + getCsrft(requestAndResponse) + "\">"+ "<button onclick=\"replacePaneForForm(event, '"+ servletText.pageTitleCheckDbForErrors()+ "'); return false;\" class=\"specialbutton withTopMargin\">"+ servletText.pageTitleCheckDbForErrors()+ "</button></form>");    requestAndResponse.print("</td></tr></table>");  }  pageWrapper.addFooter();}  }
class C{  private void loadFeedbackFragment(){}  }
class C{  @Override public BufferedImage JPEG2000ToRGBImage(final byte[] data,int w,int h,final int pX,final int pY,final int d) throws PdfException {  BufferedImage image;  try {    image=JDeliHelper.JPEG2000ToRGBImage(data);  } catch (  Exception ex) {    throw new PdfException(ex.getMessage());  }  if (image != null) {    try {      IndexedColorMap=null;      if (IndexedColorMap == null) {        image=cleanupImage(image,pX,pY);      }      final int iw=image.getWidth();      final int ih=image.getHeight();      final DataBufferByte rgb=(DataBufferByte)image.getRaster().getDataBuffer();      final byte[] rawData=rgb.getData();      if (getID() == ColorSpaces.DeviceN) {        image=createImageN(iw,ih,rawData);      } else {        image=createImage(iw,ih,rawData);      }    } catch (    final Exception ee) {      image=null;      LogWriter.writeLog("Exception in JPEG2000ToRGBImage: " + ee);    }  }  return image;}  }
class C{  public void registerSettingsListener(String name,String option,ISettingsListener listener){  removeSettingsListener(name,option);  SettingsListenerInfo info=new SettingsListenerInfo(name,option,listener);  allListeners.add(info);  List<ISettingsListener> listenersForKey=listenersByKey.get(option);  if (listenersForKey == null) {    listenersForKey=new LinkedList<ISettingsListener>();    listenersByKey.put(option,listenersForKey);  }  listenersForKey.add(listener);  String value=getProperty(option);  if (value != null) {    listener.settingsValueChanged(option,value);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:36.695 -0500",hash_original_method="E179043C81F65C857C0C51A1F43AC946",hash_generated_method="733CB4A8B98E8A3ECBDD66AF9B8E42E4") private boolean makeSslConnection(boolean tlsTolerant) throws IOException {  if (connection == null) {    connection=openSocketConnection();    if (connection.getAddress().getProxy() != null) {      makeTunnel(policy,connection,getRequestHeaders());    }  }  sslSocket=connection.getSecureSocketIfConnected();  if (sslSocket != null) {    return true;  }  connection.setupSecureSocket(enclosing.getSSLSocketFactory(),tlsTolerant);  return false;}  }
class C{  public AttributedString(String text){  if (text == null) {    throw new NullPointerException();  }  this.text=text;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_MEMBERS:    return getOwnedMembers();case N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_CTOR:  return getOwnedCtor();case N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_CALLABLE_CTOR:return getOwnedCallableCtor();case N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_METHODS:return getOwnedMethods();case N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_FIELDS:return getOwnedFields();case N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_GETTERS:return getOwnedGetters();case N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_OWNED_SETTERS:return getOwnedSetters();case N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_SUPER_CLASSIFIER_REFS:return getSuperClassifierRefs();case N4JSPackage.N4_CLASSIFIER_DECLARATION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:return getImplementedOrExtendedInterfaceRefs();}return super.eInvoke(operationID,arguments);}  }
class C{  public void mapDatasetToRangeAxis(int index,int axisIndex){  List axisIndices=new java.util.ArrayList(1);  axisIndices.add(new Integer(axisIndex));  mapDatasetToRangeAxes(index,axisIndices);}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.326 -0500",hash_original_method="8ACE5368F7F34FD7A997EC13F4BFCCE5",hash_generated_method="E655A327F19083075E83F5EF7D96B406") public boolean isPassword(){  return getBooleanProperty(PROPERTY_PASSWORD);}  }
class C{  public String terminateSubscription(){  VOSubscription selectedSub=getSelectedSubscription();  if (selectedSub != null) {    UiDelegate uiDelegate=new UiDelegate();    try {      getSubscriptionService().terminateSubscription(selectedSub,terminationReason);      uiDelegate.showInfoMessage(null,BaseBean.INFO_SUBSCRIPTION_TERMINATED,selectedSub.getSubscriptionId());    } catch (    SaaSApplicationException e) {      uiDelegate.handleException(e);      return null;    }  }  terminationReason=null;  removePoObjFromList(model.getSelectedSubscriptionAndCustomer());  model.setSelectedSubscription(null);  return BaseBean.OUTCOME_SUCCESS;}  }
class C{  public ThresholdFilter(int t){  setLowerThreshold(t);  setUpperThreshold(t);}  }
class C{  public void testWillDistinguishBetweenDifferentTypes(){  converterLookup.registerConverter(new ToAttributedValueConverter(Software.class,mapper,reflectionProvider,converterLookup,"name"),0);  converterLookup.registerConverter(new ToAttributedValueConverter(OpenSourceSoftware.class,mapper,reflectionProvider,converterLookup,"license"),0);  final Software[] software=new Software[]{new Software("Microsoft","Windows"),new OpenSourceSoftware("Codehaus","XStream","BSD")};  final StringWriter writer=new StringWriter();  final PrettyPrintWriter prettyPrintWriter=new PrettyPrintWriter(writer);  new TreeMarshaller(prettyPrintWriter,converterLookup,mapper).start(software,null);  prettyPrintWriter.flush();  assertEquals("" + "<software-array>\n" + "  <software vendor=\"Microsoft\">Windows</software>\n"+ "  <open-source vendor=\"Codehaus\" name=\"XStream\">BSD</open-source>\n"+ "</software-array>",writer.toString());  final HierarchicalStreamReader reader=driver.createReader(new StringReader(writer.toString()));  Software[] array=(Software[])new TreeUnmarshaller(null,reader,converterLookup,mapper).start(null);  assertEquals(software[0],array[0]);  assertEquals(software[1],array[1]);}  }
class C{  public Complex(){  this(0,0);}  }
class C{  static void arrayPropagation(IR ir){  Register elemNext;  for (Register reg=ir.regpool.getFirstSymbolicRegister(); reg != null; reg=elemNext) {    elemNext=reg.getNext();    if (reg.useList == null) {      continue;    }    if (reg.defList == null) {      continue;    }    if (!reg.isSSA()) {      continue;    }    RegisterOperand lhs=reg.defList;    Instruction instr=lhs.instruction;    Operator op=instr.operator();    if (!(op == NEWARRAY || op == NEWARRAY_UNRESOLVED)) {      continue;    }    Operand sizeOp=NewArray.getSize(instr);    boolean boundsCheckOK=false;    boolean arraylengthOK=false;    int size=-1;    if (sizeOp instanceof IntConstantOperand) {      size=((IntConstantOperand)sizeOp).value;      boundsCheckOK=true;      arraylengthOK=true;    } else     if (sizeOp instanceof RegisterOperand) {      if (sizeOp.asRegister().getRegister().isSSA()) {        arraylengthOK=true;      }    }    for (RegisterOperand use=reg.useList; use != null; use=use.getNext()) {      Instruction i=use.instruction;      if (boundsCheckOK && i.getOpcode() == BOUNDS_CHECK_opcode) {        Operand indexOp=BoundsCheck.getIndex(i);        if (indexOp instanceof IntConstantOperand) {          if (((IntConstantOperand)indexOp).value <= size) {            Instruction s=Move.create(GUARD_MOVE,BoundsCheck.getGuardResult(i).copyD2D(),new TrueGuardOperand());            s.copySourcePositionFrom(i);            i.insertAfter(s);            DefUse.updateDUForNewInstruction(s);            DefUse.removeInstructionAndUpdateDU(i);          }        }      } else       if (arraylengthOK && i.getOpcode() == ARRAYLENGTH_opcode) {        Operand newSizeOp=sizeOp.copy();        RegisterOperand result=(RegisterOperand)GuardedUnary.getResult(i).copy();        Instruction s=Move.create(INT_MOVE,result,newSizeOp);        s.copySourcePositionFrom(i);        i.insertAfter(s);        DefUse.updateDUForNewInstruction(s);        DefUse.removeInstructionAndUpdateDU(i);      }    }  }}  }
class C{  private void emitTailCompares(AMD64MacroAssembler masm,Register result,Register array1,Register array2,Register length,Label trueLabel,Label falseLabel){  Label compare2Bytes=new Label();  Label compare1Byte=new Label();  Register temp=asRegister(temp4);  if (kind.getByteCount() <= 4) {    masm.testl(result,4);    masm.jccb(ConditionFlag.Zero,compare2Bytes);    masm.movl(temp,new AMD64Address(array1,0));    masm.cmpl(temp,new AMD64Address(array2,0));    masm.jccb(ConditionFlag.NotEqual,falseLabel);    if (kind.getByteCount() <= 2) {      masm.leaq(array1,new AMD64Address(array1,4));      masm.leaq(array2,new AMD64Address(array2,4));      masm.bind(compare2Bytes);      masm.testl(result,2);      masm.jccb(ConditionFlag.Zero,compare1Byte);      masm.movzwl(temp,new AMD64Address(array1,0));      masm.movzwl(length,new AMD64Address(array2,0));      masm.cmpl(temp,length);      masm.jccb(ConditionFlag.NotEqual,falseLabel);      if (kind.getByteCount() <= 1) {        masm.leaq(array1,new AMD64Address(array1,2));        masm.leaq(array2,new AMD64Address(array2,2));        masm.bind(compare1Byte);        masm.testl(result,1);        masm.jccb(ConditionFlag.Zero,trueLabel);        masm.movzbl(temp,new AMD64Address(array1,0));        masm.movzbl(length,new AMD64Address(array2,0));        masm.cmpl(temp,length);        masm.jccb(ConditionFlag.NotEqual,falseLabel);      } else {        masm.bind(compare1Byte);      }    } else {      masm.bind(compare2Bytes);    }  }}  }
class C{  public static void closeConnection(Connection connection){  if (connection != null) {    try {      connection.close();    } catch (    SQLException ex) {      LOG.debug("Could not close JDBC Connection",ex);    }catch (    Throwable ex) {      LOG.info("Unexpected exception on closing JDBC Connection",ex);    }  }}  }
class C{  public org.oscm.example.client.SessionServiceStub.CreateServiceSessionResponseE createServiceSession(org.oscm.example.client.SessionServiceStub.CreateServiceSessionE createServiceSession2) throws java.rmi.RemoteException, org.oscm.example.client.OperationNotPermittedExceptionException, org.oscm.example.client.ObjectNotFoundExceptionException, org.oscm.example.client.ValidationExceptionException, org.oscm.example.client.ServiceParameterExceptionException {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[1].getName());    _operationClient.getOptions().setAction("http://oscm.org/SessionService/createServiceSessionRequest");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),createServiceSession2,optimizeContent(new javax.xml.namespace.QName("http://oscm.org","createServiceSession")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.oscm.example.client.SessionServiceStub.CreateServiceSessionResponseE.class,getEnvelopeNamespaces(_returnEnv));    return (org.oscm.example.client.SessionServiceStub.CreateServiceSessionResponseE)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof org.oscm.example.client.OperationNotPermittedExceptionException) {            throw (org.oscm.example.client.OperationNotPermittedExceptionException)ex;          }          if (ex instanceof org.oscm.example.client.ObjectNotFoundExceptionException) {            throw (org.oscm.example.client.ObjectNotFoundExceptionException)ex;          }          if (ex instanceof org.oscm.example.client.ValidationExceptionException) {            throw (org.oscm.example.client.ValidationExceptionException)ex;          }          if (ex instanceof org.oscm.example.client.ServiceParameterExceptionException) {            throw (org.oscm.example.client.ServiceParameterExceptionException)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  protected void vipProxyArpReply(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx,String vipId){  log.debug("vipProxyArpReply");  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  if (!(eth.getPayload() instanceof ARP))   return;  ARP arpRequest=(ARP)eth.getPayload();  byte[] vipProxyMacBytes=vips.get(vipId).proxyMac.getBytes();  IPacket arpReply=new Ethernet().setSourceMACAddress(vipProxyMacBytes).setDestinationMACAddress(eth.getSourceMACAddress()).setEtherType(EthType.ARP).setVlanID(eth.getVlanID()).setPriorityCode(eth.getPriorityCode()).setPayload(new ARP().setHardwareType(ARP.HW_TYPE_ETHERNET).setProtocolType(ARP.PROTO_TYPE_IP).setHardwareAddressLength((byte)6).setProtocolAddressLength((byte)4).setOpCode(ARP.OP_REPLY).setSenderHardwareAddress(vipProxyMacBytes).setSenderProtocolAddress(arpRequest.getTargetProtocolAddress()).setTargetHardwareAddress(eth.getSourceMACAddress().getBytes()).setTargetProtocolAddress(arpRequest.getSenderProtocolAddress()));  pushPacket(arpReply,sw,OFBufferId.NO_BUFFER,OFPort.ANY,(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT)),cntx,true);  log.debug("proxy ARP reply pushed as {}",IPv4.fromIPv4Address(vips.get(vipId).address));  return;}  }
class C{  @Override public String toString(){  return "Variable name: " + this.name + "  Variable type: "+ this.type;}  }
class C{  public CharAtom(char c,String textStyle){  this.c=c;  this.textStyle=textStyle;}  }
class C{  public void testPolymorphicListElementRef() throws Exception {  ObjectMapper mapper=getJaxbMapper();  ListBean input=new ListBean();  input.otherAnimals=Arrays.asList(new Cow("bluey",150),new Emu("Bob","black"));  String str=mapper.writeValueAsString(input);  ListBean result=mapper.readValue(str,ListBean.class);  assertEquals(2,result.otherAnimals.size());  Animal a1=result.otherAnimals.get(0);  assertNotNull(a1);  assertEquals(Cow.class,a1.getClass());  assertEquals("bluey",a1.nickname);  assertEquals(150,((Cow)a1).weightInPounds);  Animal a2=result.otherAnimals.get(1);  assertNotNull(a2);  assertEquals(Emu.class,a2.getClass());  assertEquals("Bob",a2.nickname);  assertEquals("black",((Emu)a2).featherColor);}  }
class C{  protected void prepareTable(ColumnInfo[] layout,String from,String staticWhere,String orderBy){  p_layout=layout;  StringBuffer sql=new StringBuffer("SELECT ");  for (int i=0; i < layout.length; i++) {    if (i > 0)     sql.append(", ");    sql.append(layout[i].getColSQL());    if (layout[i].isKeyPairCol())     sql.append(",").append(layout[i].getKeyPairColSQL());    p_table.addColumn(layout[i].getColHeader());    if (layout[i].isColorColumn())     p_table.setColorColumn(i);    if (layout[i].getColClass() == IDColumn.class)     m_keyColumnIndex=i;  }  for (int i=0; i < layout.length; i++)   p_table.setColumnClass(i,layout[i].getColClass(),layout[i].isReadOnly(),layout[i].getColHeader());  sql.append(" FROM ").append(from);  sql.append(" WHERE ");  m_sqlMain=sql.toString();  m_sqlAdd="";  if (orderBy != null && orderBy.length() > 0)   m_sqlAdd=" ORDER BY " + orderBy;  if (m_keyColumnIndex == -1)   log.log(Level.SEVERE,"No KeyColumn - " + sql);  p_table.setRowSelectionAllowed(true);  p_table.setMultiSelection(false);  p_table.setEditingColumn(0);  p_table.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);  parameterPanel.setPreferredSize(new Dimension(INFO_WIDTH,parameterPanel.getPreferredSize().height));  scrollPane.setPreferredSize(new Dimension(INFO_WIDTH,400));}  }
class C{  @Override public void addOtherEditItems(JMenu m,Application app,@Nullable View v){}  }
class C{  public ImageInfo createImageInfo(){  check();  boolean alpha=(getColormodel() & 0x04) != 0;  boolean palette=(getColormodel() & 0x01) != 0;  boolean grayscale=(getColormodel() == 0 || getColormodel() == 4);  return new ImageInfo(getCols(),getRows(),getBitspc(),alpha,grayscale,palette);}  }
class C{  public GitHubPRCause checkHook(GitHubPRTrigger gitHubPRTrigger,GHEventPayload payload,TaskListener listener){  return null;}  }
class C{  private ObjectMessageStub initObjectMessage() throws JMSException {  ObjectMessageStub message=new ObjectMessageStub();  message.setObject(new Long(1));  return message;}  }
class C{  public ResultEnvelope(){}  }
class C{  public DescriptiveStatistics localClusteringDistribution(Set<? extends Vertex> vertices){  DescriptiveStatistics stats=new DescriptiveStatistics();  TObjectDoubleHashMap<?> values=values(vertices);  TObjectDoubleIterator<?> it=values.iterator();  for (int i=0; i < values.size(); i++) {    it.advance();    stats.addValue(it.value());  }  return stats;}  }
class C{  public boolean canOverride(MethodInfo m){  return this == m || (this.myClass.isConvertibleTo(m.myClass) && hasSameSignature(m));}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  private static List precompute(List<Set<GraphChange>> F){  int size=F.size();  List<Set<GraphChange>> pruned=new ArrayList<>(size);  for (int i=0; i < size; i++) {    Set<GraphChange> setI=F.get(i);    for (int j=(i + 1); j < size; j++) {      Set<GraphChange> setJ=F.get(j);      boolean notMarked=!setJ.contains(new GraphChange());      if (notMarked && setI.containsAll(setJ)) {        setI.add(new GraphChange());        break;      } else       if (notMarked && setJ.containsAll(setI))       setJ.add(new GraphChange());    }    if (!setI.contains(new GraphChange()))     pruned.add(F.get(i));  }  return pruned;}  }
class C{  public static ResponseAddressAttribute createResponseAddressAttribute(TransportAddress address){  ResponseAddressAttribute attribute=new ResponseAddressAttribute();  attribute.setAddress(address);  return attribute;}  }
class C{  public void shrink(int desiredLength){  if (desiredLength < numObjs)   desiredLength=numObjs;  if (desiredLength >= objs.length)   return;  int[] newobjs=new int[desiredLength];  System.arraycopy(objs,0,newobjs,0,numObjs);  objs=newobjs;}  }
class C{  private boolean addGeneratedAttribute(AttributeWeightedExampleSet exampleSet,double p) throws Exception {  if (random.nextDouble() < p) {    FeatureGenerator generator=FeatureGenerator.selectGenerator(exampleSet,generators,unusedFunctions,random);    if (generator != null) {      generator=generator.newInstance();      Attribute[] args=Tools.getRandomCompatibleAttributes(exampleSet,generator,unusedFunctions,random);      generator.setArguments(args);      List<FeatureGenerator> generatorList=new LinkedList<FeatureGenerator>();      generatorList.add(generator);      List<Attribute> newAttributes=FeatureGenerator.generateAll(exampleSet.getExampleTable(),generatorList);      for (      Attribute newAttribute : newAttributes) {        exampleSet.getAttributes().addRegular(newAttribute);      }      return true;    } else {      return false;    }  } else {    return false;  }}  }
class C{  public void sort(){  DoubleIntegerArrayQuickSort.sort(keys,vals,size);}  }
class C{  public Variable[] findFieldVariables(String clazz){  List<Variable> matches=new ArrayList<Variable>();  for (ListIterator<Variable> iterator=fFields.listIterator(fFields.size()); iterator.hasPrevious(); ) {    Variable localVariable=iterator.previous();    if (localVariable.isSubtypeOf(clazz))     matches.add(localVariable);  }  return matches.toArray(new Variable[matches.size()]);}  }
class C{  public int read(char cbuf[],int off,int len) throws IOException {  if (_input == null)   throw new IOException("Reader closed");  final int inputLength=_input.length();  if (_index >= inputLength)   return -1;  final int count=MathLib.min(inputLength - _index,len);  final Object csq=_input;  if (csq instanceof String) {    String str=(String)csq;    str.getChars(_index,_index + count,cbuf,off);  } else   if (csq instanceof Text) {    Text txt=(Text)csq;    txt.getChars(_index,_index + count,cbuf,off);  } else   if (csq instanceof TextBuilder) {    TextBuilder tb=(TextBuilder)csq;    tb.getChars(_index,_index + count,cbuf,off);  } else   if (csq instanceof CharArray) {    CharArray ca=(CharArray)csq;    System.arraycopy(ca.array(),_index + ca.offset(),cbuf,off,count);  } else {    for (int i=off, n=off + count, j=_index; i < n; ) {      cbuf[i++]=_input.charAt(j++);    }  }  _index+=count;  return count;}  }
class C{  protected void endNode(Node node) throws org.xml.sax.SAXException {switch (node.getNodeType()) {case Node.DOCUMENT_NODE:    break;case Node.ELEMENT_NODE:  String ns=m_dh.getNamespaceOfNode(node);if (null == ns) ns="";this.m_contentHandler.endElement(ns,m_dh.getLocalNameOfNode(node),node.getNodeName());if (m_Serializer == null) {Element elem_node=(Element)node;NamedNodeMap atts=elem_node.getAttributes();int nAttrs=atts.getLength();for (int i=(nAttrs - 1); 0 <= i; i--) {final Node attr=atts.item(i);final String attrName=attr.getNodeName();final int colon=attrName.indexOf(':');final String prefix;if (attrName.equals("xmlns") || attrName.startsWith("xmlns:")) {  if (colon < 0)   prefix=""; else   prefix=attrName.substring(colon + 1);  this.m_contentHandler.endPrefixMapping(prefix);} else if (colon > 0) {  prefix=attrName.substring(0,colon);  this.m_contentHandler.endPrefixMapping(prefix);}}{String uri=elem_node.getNamespaceURI();if (uri != null) {  String prefix=elem_node.getPrefix();  if (prefix == null)   prefix="";  this.m_contentHandler.endPrefixMapping(prefix);}}}break;case Node.CDATA_SECTION_NODE:break;case Node.ENTITY_REFERENCE_NODE:{EntityReference eref=(EntityReference)node;if (m_contentHandler instanceof LexicalHandler) {LexicalHandler lh=((LexicalHandler)this.m_contentHandler);lh.endEntity(eref.getNodeName());}}break;default :}}  }
class C{  public static boolean isNeedsValue(byte b){  return (b & (INVALID | LOCAL_INVALID | TOMBSTONE)) == 0;}  }
class C{  public static void validateIdsDomainNameNAlias(IIdentityStoreData idsData){  if (idsData.getDomainType().equals(DomainType.LOCAL_OS_DOMAIN))   return;  validateIdsDomainName(idsData.getName(),idsData.getDomainType());  if (null != idsData.getExtendedIdentityStoreData()) {    String domainAlias=idsData.getExtendedIdentityStoreData().getAlias();    if (domainAlias != null) {      validateNotEmpty(domainAlias,"ids domainAlias");    }  }}  }
class C{  @Override public void putAll(Map<? extends Float,? extends V> map){  Iterator<? extends Entry<? extends Float,? extends V>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Float,? extends V> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public boolean isAssigned(){  return assigned;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.869 -0500",hash_original_method="A576610C1F5A8AE8D31C4E9A14C2AA39",hash_generated_method="D8C5F10FF7DDB7A0C2AAF5AD8A55B3CB") public Bitmap createFromParcel(Parcel p){  Bitmap bm=nativeCreateFromParcel(p);  if (bm == null) {    throw new RuntimeException("Failed to unparcel Bitmap");  }  return bm;}  }
class C{  private void addToList(IGameState state,MoveEvaluation m){  list.append(new Pair(state.copy(),m));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public Dialog(Context context){  this(context,0,true);}  }
class C{  @SuppressLint("NewApi") private void onSelectionCleared(){  mOnContactSelectedListener.onSelectionCleared();  getListView().clearChoices();}  }
class C{  public static double[] decodeWorldFile(File worldFile) throws FileNotFoundException {  if (worldFile == null) {    String message=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!worldFile.exists()) {    String message=Logging.getMessage("generic.FileNotFound",worldFile.getPath());    Logging.logger().severe(message);    throw new FileNotFoundException(message);  }  double[] values=new double[6];  Scanner scanner=new Scanner(worldFile);  scanner.useLocale(Locale.US);  try {    for (int i=0; i < 6; i++) {      if (scanner.hasNextDouble()) {        values[i]=scanner.nextDouble();      } else {        String message=Logging.getMessage("SurfaceImage.WorldFileLineMissing",i + 1);        Logging.logger().severe(message);        throw new IllegalStateException(message);      }    }  }  finally {    scanner.close();  }  return values;}  }
class C{  @Interruptible void prepareHistograms(){  int collectorCount=VM.activePlan.collectorCount();  spillMarkHistograms=new int[collectorCount][SPILL_HISTOGRAM_BUCKETS];}  }
class C{  public boolean isOldStyle(){  return this.oldStyle;}  }
class C{  private void cleanCart(){  shoppingCartCommandFactory.execute(ShoppingCartCommand.CMD_CLEAN,ApplicationDirector.getShoppingCart(),Collections.singletonMap(ShoppingCartCommand.CMD_CLEAN,null));}  }
class C{  public static void CF6(double[] x,double[] f,double[] c,int nx){  double sum1=0.0;  double sum2=0.0;  double yj;  for (int j=2; j <= nx; j++) {    if (j % 2 == 1) {      yj=x[j - 1] - 0.8 * x[0] * Math.cos(6.0 * PI * x[0] + j * PI / nx);      sum1+=yj * yj;    } else {      yj=x[j - 1] - 0.8 * x[0] * Math.sin(6.0 * PI * x[0] + j * PI / nx);      sum2+=yj * yj;    }  }  f[0]=x[0] + sum1;  f[1]=(1.0 - x[0]) * (1.0 - x[0]) + sum2;  c[0]=x[1] - 0.8 * x[0] * Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - MYSIGN((x[0] - 0.5) * (1.0 - x[0])) * Math.sqrt(Math.abs((x[0] - 0.5) * (1.0 - x[0])));  c[1]=x[3] - 0.8 * x[0] * Math.sin(6.0 * x[0] * PI + 4.0 * PI / nx) - MYSIGN(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])) * Math.sqrt(Math.abs(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])));}  }
class C{  private void failRequests(){  final Set<OngoingRequest> requests=ImmutableSet.copyOf(outstanding);  for (  OngoingRequest id : requests) {    final boolean removed=outstanding.remove(id);    if (removed) {      id.reply(Response.forStatus(Status.SERVICE_UNAVAILABLE));    }  }}  }
class C{  private PotionData dataFromString(String string){  PotionType type;  boolean extended=false, upgraded=false;  if (string.startsWith("minecraft:"))   string=string.replace("minecraft:","");  if (string.startsWith("long_")) {    string=string.replace("long_","");    extended=true;  } else   if (string.startsWith("strong_")) {    string=string.replace("strong_","");    upgraded=true;  }  type=PotionTypeTable.fromName(string);  return new PotionData(type,extended,upgraded);}  }
class C{  public boolean removeAllowed(Class<?> c,String displayName){  boolean result;  HashSet<String> list;  result=false;  list=m_Allowed.get(c);  if (list != null) {    result=list.remove(displayName);  }  return result;}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public static Color rgbaf(int rgb,float alpha){  return rgba(rgb,colorConvert(alpha));}  }
class C{  protected void warmStart(List<ContactConstraint> contactConstraints,Step step,Settings settings){  double ratio=1.0 / step.getDeltaTimeRatio();  int size=contactConstraints.size();  for (int i=0; i < size; i++) {    ContactConstraint contactConstraint=contactConstraints.get(i);    Body b1=contactConstraint.getBody1();    Body b2=contactConstraint.getBody2();    Mass m1=b1.getMass();    Mass m2=b2.getMass();    double invM1=m1.getInverseMass();    double invM2=m2.getInverseMass();    double invI1=m1.getInverseInertia();    double invI2=m2.getInverseInertia();    Vector2 N=contactConstraint.normal;    Vector2 T=contactConstraint.tangent;    List<Contact> contacts=contactConstraint.getContacts();    int cSize=contacts.size();    if (cSize == 0)     continue;    for (int j=0; j < cSize; j++) {      Contact contact=contacts.get(j);      contact.jn*=ratio;      contact.jt*=ratio;      Vector2 J=new Vector2(N.x * contact.jn + T.x * contact.jt,N.y * contact.jn + T.y * contact.jt);      b1.getLinearVelocity().add(J.x * invM1,J.y * invM1);      b1.setAngularVelocity(b1.getAngularVelocity() + invI1 * contact.r1.cross(J));      b2.getLinearVelocity().subtract(J.x * invM2,J.y * invM2);      b2.setAngularVelocity(b2.getAngularVelocity() - invI2 * contact.r2.cross(J));    }  }}  }
class C{  public static Vec4 generateParallelPoints(Vec4 point,Vec4 prev,Vec4 next,List<Position> leftPositions,List<Position> rightPositions,double distance,double elevation,Globe globe,Vec4 previousOffset){  if ((point == null) || (prev == null && next == null)) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (leftPositions == null || rightPositions == null) {    String message=Logging.getMessage("nullValue.PositionsListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (globe == null) {    String message=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4 offset;  Vec4 normal=globe.computeSurfaceNormalAtPoint(point);  Vec4 backward=(prev != null) ? prev.subtract3(point) : point.subtract3(next);  Vec4 perpendicular=backward.cross3(normal);  if (point.equals(prev) || (point.equals(next)) && previousOffset != null) {    offset=previousOffset;  } else   if (next != null && prev != null && !Vec4.areColinear(prev,point,next)) {    Vec4 forward=next.subtract3(point);    offset=forward.normalize3().add3(backward.normalize3());    offset=offset.normalize3();    Angle theta=backward.angleBetween3(offset);    double length;    if (theta.degrees > 0.1)     length=distance / theta.sin(); else     length=distance;    double tripleProduct=perpendicular.dot3(offset);    if (tripleProduct < 0) {      offset=offset.multiply3(-1);    }    offset=offset.multiply3(length);  } else {    offset=perpendicular.normalize3();    offset=offset.multiply3(distance);  }  Vec4 ptRight=point.add3(offset);  Vec4 ptLeft=point.subtract3(offset);  Position posLeft=new Position(globe.computePositionFromPoint(ptLeft),elevation);  Position posRight=new Position(globe.computePositionFromPoint(ptRight),elevation);  leftPositions.add(posLeft);  rightPositions.add(posRight);  return offset;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void saveLog(){  File file=new File("." + File.separator);  String logFile=null;  try {    logFile=RapidMinerGUI.getMainFrame().getProcess().getRootOperator().getParameterAsString(ProcessRootOperator.PARAMETER_LOGFILE);  } catch (  UndefinedParameterError ex) {  }  if (logFile != null) {    file=RapidMinerGUI.getMainFrame().getProcess().resolveFileName(logFile);  }  file=SwingTools.chooseFile(RapidMinerGUI.getMainFrame(),file,false,"log","log file");  if (file != null) {    try (PrintWriter out=new PrintWriter(new FileWriter(file))){      out.println(textPane.getText());    } catch (    IOException ex) {      SwingTools.showSimpleErrorMessage("cannot_write_log_file",ex);    }  }}  }
class C{  public final int computeTableSwitchOffset(int value,int low,int high){  if (VM.VerifyAssertions)   VM._assert(opcode == JBC_tableswitch);  if (value < low || value > high)   return 0;  return getSignedInt(bcIndex + ((value - low) << LOG_BYTES_IN_INT));}  }
class C{  @SuppressWarnings("try") public StructuredGraph makeGraph(ResolvedJavaMethod method,Object[] args,ResolvedJavaMethod original){  try (OverrideScope s=OptionValue.override(DeoptALot,false)){    return createGraphMaker(method,original).makeGraph(args);  } }  }
class C{  @Override public void close(){}  }
class C{  public void quit(){  super.quit();  display=null;}  }
class C{  public float nextFloat(){  return (next(24) / 16777216f);}  }
class C{  public TextEdit perform(){  TextEdit result=doCopy(fEdit);  if (result != null) {    for (Iterator iter=fCopies.keySet().iterator(); iter.hasNext(); ) {      TextEdit edit=(TextEdit)iter.next();      edit.postProcessCopy(this);    }  }  return result;}  }
class C{  public void applyChosenImports(IJavaProject project,String fqn,List<String> chosen) throws CoreException, BadLocationException {  ICompilationUnit compilationUnit=prepareCompilationUnit(project,fqn);  createOrganizeImportOperation(compilationUnit,chosen);}  }
class C{  public boolean equals(Object identifier){  return (identifier instanceof ArchivoIdentifier) && StringUtils.equals(name,((ArchivoIdentifier)identifier).getName()) && StringUtils.equals(value,((ArchivoIdentifier)identifier).getValue());}  }
class C{  public void testNoCallBack() throws IOException {  String reqdata="Request Data";  Request request=Request.newBuilder().setStrData(reqdata).build();  socket.withNoResponse(false);  FakeCallback callback=callRpc(request,null);  verifyRequestToSocket(request);  assertFalse(callback.invoked);  assertNull(callBlockingRpc(request,null));  verifyRequestToSocket(request);  callback=callAsyncRpc(request,null);  verifyRequestToSocket(request);  assertFalse(callback.invoked);}  }
class C{  public static <T>Iterator<T> toSorted(Iterator<T> self,Comparator<T> comparator){  return toSorted(toList(self),comparator).listIterator();}  }
class C{  public int prune(int days,boolean doKick){  if (!PermissionUtil.checkPermission(guild.getJDA().getSelfInfo(),Permission.KICK_MEMBERS,guild))   throw new PermissionException(Permission.KICK_MEMBERS);  JSONObject returned;  if (doKick) {    returned=((JDAImpl)guild.getJDA()).getRequester().post(Requester.DISCORD_API_PREFIX + "guilds/" + guild.getId()+ "/prune?days="+ days,new JSONObject()).getObject();  } else {    returned=((JDAImpl)guild.getJDA()).getRequester().get(Requester.DISCORD_API_PREFIX + "guilds/" + guild.getId()+ "/prune?days="+ days).getObject();  }  return returned.getInt("pruned");}  }
class C{  @Cacheable(value="listHotZones",key="#a0") public List<ZoneInfo> listHotZonesWithCache(int size,Instant articleSince){  FlakeId startArticleId=FlakeId.startOf(articleSince.toEpochMilli());  List<ZoneInfo> results=jdbc().query("" + " SELECT z.*, count(z.zone) AS zoneHotness " + "   FROM Article a "+ "   JOIN ZoneInfo z ON z.zone = a.zone "+ "  WHERE a.articleId >= ? "+ "    AND z.hideFromTop = FALSE "+ "  GROUP BY z.zone "+ "  ORDER BY zoneHotness DESC "+ "  LIMIT ? ",zoneDao.getZoneInfoMapper(),startArticleId.value(),size);  return ImmutableList.copyOf(results);}  }
class C{  public void excluir(int id){  try {    String sql="DELETE FROM tb_auditoria WHERE id_auditoria = ?";    stm=conector.prepareStatement(sql);    stm.setInt(1,id);    stm.execute();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao excluir logs na base de dados! \n" + ex);  }}  }
class C{  public IconicsDrawable colorFilter(ColorFilter cf){  setColorFilter(cf);  return this;}  }
class C{  @Override public boolean supportsTableCorrelationNames(){  debugCodeCall("supportsTableCorrelationNames");  return true;}  }
class C{  protected boolean onMouseDown(MouseEvent evt){  return true;}  }
class C{  public void error(Object message){  log(LogSystem.ERROR_ID,message);}  }
class C{  public void startSecuritySettingsActivity(Context context){  if (!startDelegateActivity(context,delegate.getSecuritySettingsIntent(),null)) {    startActivity(context,null,SecuritySettingsActivity.class);  }}  }
class C{  private void update(){  String title;  String summary;  String fragment;  Account account=ChromeSigninController.get(getContext()).getSignedInUser();  if (account == null) {    title=getContext().getString(R.string.sign_in_to_chrome);    summary=getContext().getString(R.string.sign_in_to_chrome_summary);    fragment=null;  } else {    List<String> accounts=AccountManagerHelper.get(getContext()).getGoogleAccountNames();    if (accounts.size() == 1) {      summary=accounts.get(0);    } else {      summary=getContext().getString(R.string.number_of_signed_in_accounts,accounts.size());    }    fragment=AccountManagementFragment.class.getName();    title=AccountManagementFragment.getCachedUserName(account.name);    if (title == null) {      final Profile profile=Profile.getLastUsedProfile();      String cachedName=ProfileDownloader.getCachedFullName(profile);      Bitmap cachedBitmap=ProfileDownloader.getCachedAvatar(profile);      if (TextUtils.isEmpty(cachedName) || cachedBitmap == null) {        AccountManagementFragment.startFetchingAccountInformation(getContext(),profile,account.name);      }      title=TextUtils.isEmpty(cachedName) ? account.name : cachedName;    }  }  setTitle(title);  setSummary(summary);  setFragment(fragment);  ChromeSigninController signinController=ChromeSigninController.get(getContext());  boolean enabled=signinController.isSignedIn() || SigninManager.get(getContext()).isSignInAllowed();  if (mViewEnabled != enabled) {    mViewEnabled=enabled;    notifyChanged();  }  if (!enabled)   setFragment(null);  if (SigninManager.get(getContext()).isSigninDisabledByPolicy()) {    setIcon(ManagedPreferencesUtils.getManagedByEnterpriseIconId());  } else {    Resources resources=getContext().getResources();    Bitmap bitmap=AccountManagementFragment.getUserPicture(signinController.getSignedInAccountName(),resources);    setIcon(new BitmapDrawable(resources,bitmap));  }}  }
class C{  public static void registerApp(int application,String appName) throws AppIDException {  if ((application & APP_ID_MASK) != application) {    throw new InvalidAppIDValueException(application);  }  String oldApp=appIdMap.putIfAbsent(application,appName);  if (oldApp != null && !oldApp.equals(appName)) {    throw new AppIDInUseException(application,oldApp,appName);  }}  }
class C{  public static String minus(CharSequence self,Pattern pattern){  return pattern.matcher(self).replaceFirst("");}  }
class C{  public byte[] readBytesLeft(){  return readBytes(-1);}  }
class C{  private OSMEntityCollector detectAndWriteSignalizedOsmNodes(String osmFile,String nodesOutOsmFile,String nodesOutReportFile){  Set<String> emptyKeys=Collections.emptySet();  Map<String,Set<String>> emptyKVs=Collections.emptyMap();  Map<String,Set<String>> tagKeyValues=new HashMap<String,Set<String>>();  tagKeyValues.put("highway",new HashSet<String>(Arrays.asList("traffic_signals")));  TagFilter tagFilterWays=new TagFilter("reject-ways",emptyKeys,emptyKVs);  TagFilter tagFilterRelations=new TagFilter("reject-relations",emptyKeys,emptyKVs);  TagFilter tagFilterNodes=new TagFilter("accept-node",emptyKeys,tagKeyValues);  FastXmlReader reader=new FastXmlReader(new File(osmFile),true,CompressionMethod.None);  reader.setSink(tagFilterWays);  tagFilterWays.setSink(tagFilterRelations);  tagFilterRelations.setSink(tagFilterNodes);  EntityTee tee2=new EntityTee(3);  tagFilterNodes.setSink(tee2);  XmlWriter writer=new XmlWriter(new File(nodesOutOsmFile),CompressionMethod.None);  tee2.getSource(0).setSink(writer);  tee2.getSource(1).setSink(new EntityReporter(new File(nodesOutReportFile)));  OSMEntityCollector signalizedOsmNodes=new OSMEntityCollector();  tee2.getSource(2).setSink(signalizedOsmNodes);  reader.run();  return signalizedOsmNodes;}  }
class C{  private int decode(int movingEdges,float rotation){  int rot=CropMath.constrainedRotation(rotation);switch (rot) {case 90:    return bitCycleLeft(movingEdges,1,4);case 180:  return bitCycleLeft(movingEdges,2,4);case 270:return bitCycleLeft(movingEdges,3,4);default :return movingEdges;}}  }
class C{  protected List<IChangeRecord> materialize(final List<IChangeRecord> records){  try {    final List<IChangeRecord> materialized=new LinkedList<IChangeRecord>();    final AbstractTripleStore db=cxn().getTripleStore();    final ISPO[] spos=new ISPO[records.size()];    int i=0;    for (    IChangeRecord rec : records) {      spos[i++]=rec.getStatement();    }    final BigdataStatementIterator it=db.asStatementIterator(new ChunkedArrayIterator<ISPO>(i,spos,null));    for (    IChangeRecord rec : records) {      final BigdataStatement stmt=it.next();      materialized.add(new ChangeRecord(stmt,rec.getChangeAction()));    }    return materialized;  } catch (  RuntimeException ex) {    throw ex;  }catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  @Autowired public UpdateCashierAllocationCommandHandler(final TellerWritePlatformService writePlatformService){  super();  this.writePlatformService=writePlatformService;}  }
class C{  String findParmValue(Element e,String name){  List<Element> l=e.getChildren("parameter");  for (int i=0; i < l.size(); i++) {    Element n=l.get(i);    if (n.getAttributeValue("name").equals(name)) {      return n.getTextTrim();    }  }  return null;}  }
class C{  private static boolean eq(Object o1,Object o2){  return (o1 == null) ? o2 == null : o1.equals(o2);}  }
class C{  @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:02.250 -0500",hash_original_method="55D2541614C0B12A14CA5FB457FCECCC",hash_generated_method="E3296A84D34378A59883AF21A1FFDE05") public void writeToParcel(Parcel dest,int flags){  dest.writeInt(mDevices.size());  for (  WifiP2pDevice device : mDevices) {    dest.writeParcelable(device,flags);  }}  }
class C{  private static int checkZeroTail(int[] a,int from){  while (from > 0) {    if (a[--from] != 0) {      return 1;    }  }  return 0;}  }
class C{  public Matrix3d rotationZ(double ang){  double sin, cos;  if (ang == Math.PI || ang == -Math.PI) {    cos=-1.0;    sin=0.0;  } else   if (ang == Math.PI * 0.5 || ang == -Math.PI * 1.5) {    cos=0.0;    sin=1.0;  } else   if (ang == -Math.PI * 0.5 || ang == Math.PI * 1.5) {    cos=0.0;    sin=-1.0;  } else {    cos=Math.cos(ang);    sin=Math.sin(ang);  }  m00=cos;  m01=sin;  m02=0.0;  m10=-sin;  m11=cos;  m12=0.0;  m20=0.0;  m21=0.0;  m22=1.0;  return this;}  }
class C{  protected KMLFlyViewController(WorldWindow wwd){  super(wwd);  this.flyView=(BasicFlyView)wwd.getView();}  }
class C{  public void logError(String message,Object... args){  LogUtils.logError(log,null,message,args);}  }
class C{  private void persistUnManagedExportMasks(List<UnManagedExportMask> unManagedExportMasksToCreate,List<UnManagedExportMask> unManagedExportMasksToUpdate,boolean flush){  if (null != unManagedExportMasksToCreate) {    if (flush || (unManagedExportMasksToCreate.size() >= BATCH_SIZE)) {      _partitionManager.insertInBatches(unManagedExportMasksToCreate,BATCH_SIZE,_dbClient,UNMANAGED_EXPORT_MASK);      unManagedExportMasksToCreate.clear();    }  }  if (null != unManagedExportMasksToUpdate) {    if (flush || (unManagedExportMasksToUpdate.size() >= BATCH_SIZE)) {      _partitionManager.updateInBatches(unManagedExportMasksToUpdate,BATCH_SIZE,_dbClient,UNMANAGED_EXPORT_MASK);      unManagedExportMasksToUpdate.clear();    }  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthDesktopIconUI();}  }
class C{  private void updateTransitiveProbs(Map<Integer,MeetingProbabilitySet> p){  for (  Map.Entry<Integer,MeetingProbabilitySet> e : p.entrySet()) {    MeetingProbabilitySet myMps=this.allProbs.get(e.getKey());    if (myMps == null || e.getValue().getLastUpdateTime() > myMps.getLastUpdateTime()) {      this.allProbs.put(e.getKey(),e.getValue().replicate());    }  }}  }
class C{  public static ChainingTextWriter write(ICalendar... icals){  return write(Arrays.asList(icals));}  }
class C{  public RelativeSize(double scalingFactor){  super();  if (scalingFactor < 0.0d || scalingFactor > 1.0d) {    throw new IllegalArgumentException("The scaling factor must be between 0.0d and 1.0d, inclusive.");  }  this.scalingFactor=scalingFactor;}  }
class C{  public T caseFunctionTypeRef(FunctionTypeRef object){  return null;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (depend_1: ");  result.append(depend_1);  result.append(')');  return result.toString();}  }
class C{  public static byte[] toBytes(String str){  return str.getBytes(StandardCharsets.UTF_8);}  }
class C{  public int lookupPostcode(String postcode){  URL url=buildUrl(postcode);  if (url == null) {    log.log(Level.SEVERE,"URL: Can't build URL.");    return -1;  }  Document resultDoc=fetchResult(url);  if (resultDoc == null) {    log.log(Level.SEVERE,"Result document is null.");    return -1;  }  return extractPCodeInfo(resultDoc);}  }
class C{  public Where<T,ID> idEq(ID id) throws SQLException {  if (idColumnName == null) {    throw new SQLException("Object has no id column specified");  }  addClause(new SimpleComparison(idColumnName,idFieldType,id,SimpleComparison.EQUAL_TO_OPERATION));  return this;}  }
class C{  public CommonStatsFlags groups(String... groups){  this.groups=groups;  return this;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  int errorCount(){  return compiler.errorCount();}  }
class C{  public synchronized boolean engineEntryInstanceOf(String alias,Class<? extends KeyStore.Entry> entryClass){  token.ensureValid();  return super.engineEntryInstanceOf(alias,entryClass);}  }
class C{  @Deprecated public static String rstrip(String str){  return (str == null) ? null : CharMatcher.LEGACY_WHITESPACE.trimTrailingFrom(str);}  }
class C{  public void populate(String filename){  try {    String filePath=Gridlock.class.getResource(filename).getPath();    FileInputStream fstream=new FileInputStream(filePath);    BufferedReader d=new BufferedReader(new InputStreamReader(fstream));    String s;    d.readLine();    while ((s=d.readLine()) != null) {      String[] bits=s.split(",");      int pop=Integer.parseInt(bits[11]);      String workTract=bits[5];      String homeTract=bits[8];      String id_id=bits[13];      GeomPlanarGraphEdge startingEdge=idsToEdges.get((int)Double.parseDouble(id_id));      GeomPlanarGraphEdge goalEdge=idsToEdges.get(goals[random.nextInt(goals.length)]);      for (int i=0; i < 1; i++) {        Agent a=new Agent(this,homeTract,workTract,startingEdge,goalEdge);        boolean successfulStart=a.start(this);        if (!successfulStart) {          continue;        }        MasonGeometry newGeometry=a.getGeometry();        newGeometry.isMovable=true;        agents.addGeometry(newGeometry);        agentList.add(a);        schedule.scheduleRepeating(a);      }    }    d.close();  } catch (  Exception e) {    System.out.println("ERROR: issue with population file: " + e);  }}  }
class C{  public static Border createLoweredSoftBevelBorder(){  if (sharedSoftLoweredBevel == null) {    sharedSoftLoweredBevel=new SoftBevelBorder(BevelBorder.LOWERED);  }  return sharedSoftLoweredBevel;}  }
class C{  private static void updateLastModified(File destDir,String warFilePath){  File warFile=new File(warFilePath);  destDir.setLastModified(warFile.lastModified());}  }
class C{  public static org.oscm.internal.vo.VOUsageLicense convertToUp(org.oscm.vo.VOUsageLicense oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOUsageLicense newVO=new org.oscm.internal.vo.VOUsageLicense();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setUser(convertToUp(oldVO.getUser()));  newVO.setApplicationUserId(oldVO.getApplicationUserId());  newVO.setRoleDefinition(convertToUp(oldVO.getRoleDefinition()));  return newVO;}  }
class C{  @Override public HashMap<String,Object> save(){  HashMap<String,Object> map=super.save();  map.put("FlyParams",flyParams.toArray());  map.put("ImageSequencePath",flyParams.imageSequencePath);  map.put("ViewpointCount",new Integer(viewpointList.size()));  for (int i=0; i < viewpointList.size(); ++i)   map.put("Viewpoint" + i,viewpointList.get(i).toHashMap());  return (map);}  }
class C{  public Iterator<String> iterator() throws IOException {  return getWrappedPath().iterator();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  @Override public Integer build(){  return Integer.valueOf(toHashCode());}  }
class C{  public void dumpSession(Writer clientOut,Writer serverOut) throws IOException, InterruptedException {  Dumper clientDumper=new Dumper(Pdu.Origin.Client,clientOut);  Dumper serverDumper=new Dumper(Pdu.Origin.Server,serverOut);  File clientFile=new File(workingDir,"client.stream");  File serverFile=new File(workingDir,"server.stream");  MessageTapFilter tapFilter=new MessageTapFilter(services.getMessageFactory(),new VillageAnalyzer(services.getLogic()),new MessageLogger(new OutputStreamWriter(System.out)).tapFor(Pdu.Type.WarHomeData,"warVillage"));  try (Connection clientConnection=new Connection("Client",new FileInputStream(clientFile),NOWHERE);Connection serverConnection=new Connection("Server",new FileInputStream(serverFile),NOWHERE)){    ProxySession session=ProxySession.newSession(services.getMessageFactory(),clientConnection,serverConnection,null,null,tapFilter);    VillageAnalyzer.logSession(session);  } }  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);}  }
class C{  public XmlDom(byte[] data) throws SAXException {  this(new ByteArrayInputStream(data));}  }
class C{  public static List<Command> parse(final String[] args){  Validate.defineBoolean((args != null) && (args.length > 0) && (args.length <= CmdLine.MAX_LENGTH)).testTrue().throwExceptionOnFailedValidation().validate();  final List<String> tokens=CmdLine.tokenizeCmdLineArgs(args);  CmdLine.processCmdLineTokens(tokens);  final List<Command> commands=new ArrayList<Command>(CmdLine.DEFAULT_COMMAND_LIST);  return (commands);}  }
class C{  public static long parseHexLong(String x){  try {    if (x.length() == 16) {      return (Long.parseLong(x.substring(0,8),16) << 32) | Long.parseLong(x.substring(8,16),16);    }    return Long.parseLong(x,16);  } catch (  NumberFormatException e) {    throw newIllegalStateException(ERROR_FILE_CORRUPT,"Error parsing the value {0}",x,e);  }}  }
class C{  public HashCodeBuilder append(char value){  iTotal=iTotal * iConstant + value;  return this;}  }
class C{  public void addChangeListener(OverlayChangeListener listener){  ParamChecks.nullNotPermitted(listener,"listener");  this.changeListeners.add(OverlayChangeListener.class,listener);}  }
class C{  public static void increment(Calendar c,int field,int val){  if (isMultiYear(field)) {    c.add(Calendar.YEAR,-field * val);  } else {    c.add(field,val);  }}  }
class C{  protected void requestPassCodeConfirmation(){  clearBoxes();  mPassCodeHdr.setText(R.string.pass_code_reenter_your_pass_code);  mPassCodeHdrExplanation.setVisibility(View.INVISIBLE);  mConfirmingPassCode=true;}  }
class C{  public Iterator<Method> calledMethodIterator(){  return calledMethodSet.iterator();}  }
class C{  public IpcOutOfSystemResourcesException(String msg){  super(msg);}  }
class C{  @Override public Document generateDocument(){  try {    return generateDocument(createNewDocument(),"file");  } catch (  Exception e) {    DelphiUtils.LOG.error(toString() + "Could not generate xml document: " + e.getMessage());    return null;  }}  }
class C{  public SerialNode(int address,int type,SerialTrafficController tc){  setNodeAddress(address);  setNodeType(type);  bitsPerCard=24;  transmissionDelay=0;  num2LSearchLights=0;  for (int i=0; i < MAXSEARCHLIGHTBYTES; i++) {    locSearchLightBits[i]=0;  }  for (int i=0; i < MAXSENSORS + 1; i++) {    sensorArray[i]=null;    sensorLastSetting[i]=Sensor.UNKNOWN;    sensorTempSetting[i]=Sensor.UNKNOWN;  }  for (int i=0; i < 256; i++) {    outputArray[i]=0;  }  setMustSend();  hasActiveSensors=false;  tc.registerNode(this);}  }
class C{  private static int findWordStart(String text,int pos){  Matcher m=WORD.matcher(text);  int temp=-1;  while (m.find()) {    if (m.start() > pos) {      break;    } else {      temp=m.start();    }  }  int start=temp;  if (start == -1) {    start=0;  }  return start;}  }
class C{  private static boolean CallStaticBooleanMethodV(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticBooleanMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithVarArg(methodID,argAddress,TypeReference.Boolean);    return Reflection.unwrapBoolean(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return false;  }}  }
class C{  public void load(String fileName) throws IOException {  FileInputStream fis=new FileInputStream(fileName);  load(fis);  fis.close();}  }
class C{  public static StorageFault parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  StorageFault object=new StorageFault();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"StorageFault".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (StorageFault)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list3=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","Exception").equals(reader.getName())) {      object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,ExtensionMapper.class));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://fault.vasa.vim.vmware.com/xsd","faultMessageId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setFaultMessageId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://fault.vasa.vim.vmware.com/xsd","parameterList").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list3.add(null);        reader.next();      } else {        list3.add(NameValuePair.Factory.parse(reader));      }      boolean loopDone3=false;      while (!loopDone3) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone3=true;        } else {          if (new javax.xml.namespace.QName("http://fault.vasa.vim.vmware.com/xsd","parameterList").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list3.add(null);              reader.next();            } else {              list3.add(NameValuePair.Factory.parse(reader));            }          } else {            loopDone3=true;          }        }      }      object.setParameterList((NameValuePair[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(NameValuePair.class,list3));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public boolean isPostConstructCalled(){  return this.postConstructCalled;}  }
class C{  public void initOutBuffer(int hashCode){  outHashCode=hashCode;  outStream=new ByteArrayOutputStream();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.770 -0500",hash_original_method="C0C75B09E38C8D039719CECFB87B9F15",hash_generated_method="FD0E7F16DFC917AC768A0178B98570F0") public boolean isFatalEnabled(){  return (getLogger().isLoggable(Level.SEVERE));}  }
class C{  @Override public IMqttToken unsubscribe(String[] topic) throws MqttException {  return unsubscribe(topic,null,null);}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public CSVReader(Reader reader){  this(reader,CSVParser.DEFAULT_SEPARATOR,CSVParser.DEFAULT_QUOTE_CHARACTER,CSVParser.DEFAULT_ESCAPE_CHARACTER);}  }
class C{  private List<DiffEntry> indexToWorkingTree(DiffFormatter formatter) throws IOException {  DirCache dirCache=null;  ObjectReader reader=repository.newObjectReader();  List<DiffEntry> diff;  try {    dirCache=repository.lockDirCache();    DirCacheIterator iterA=new DirCacheIterator(dirCache);    FileTreeIterator iterB=new FileTreeIterator(repository);    formatter.setDetectRenames(false);    diff=formatter.scan(iterA,iterB);    if (!request.isNoRenames()) {      RenameDetector renameDetector=createRenameDetector();      ContentSource.Pair sourcePairReader=new ContentSource.Pair(ContentSource.create(reader),ContentSource.create(iterB));      renameDetector.addAll(diff);      diff=renameDetector.compute(sourcePairReader,NullProgressMonitor.INSTANCE);    }  }  finally {    reader.close();    if (dirCache != null) {      dirCache.unlock();    }  }  return diff;}  }
class C{  public void removeLayerListener(LayerListener ll){  if (listeners != null) {    listeners.remove(ll);  }}  }
class C{  protected synchronized void insertAttributeSetAt(AttributeSet as,int index){  int numAttrs=attrs.length;  AttributeSet newAttrs[]=new AttributeSet[numAttrs + 1];  if (index < numAttrs) {    if (index > 0) {      System.arraycopy(attrs,0,newAttrs,0,index);      System.arraycopy(attrs,index,newAttrs,index + 1,numAttrs - index);    } else {      System.arraycopy(attrs,0,newAttrs,1,numAttrs);    }  } else {    System.arraycopy(attrs,0,newAttrs,0,numAttrs);  }  newAttrs[index]=as;  attrs=newAttrs;}  }
class C{  public boolean isSynchronizing(Account account,String remotePath){  return mSyncFolderHandler.isSynchronizing(account,remotePath);}  }
class C{  @NotNull public static Database databaseForProperties(@NotNull String propertiesPath,@NotNull Dialect dialect){  return new Database(createConnectionProvider(propertiesPath),dialect);}  }
class C{  public PointData(List<Axis> axes,List<? extends AxisRenderer> axisRenderers,Row row,int rowIndex,int col){  this.axes=Collections.unmodifiableList(axes);  this.axisRenderers=Collections.unmodifiableList(axisRenderers);  this.row=row;  this.index=rowIndex;  this.col=col;}  }
class C{  public static EclipseFormatterStep load(File file) throws Exception {  Properties settings=new Properties();  if (!file.exists()) {    throw new GradleException("Eclipse formatter file '" + file + "' does not exist.");  } else   if (file.getName().endsWith(".properties")) {    try (InputStream input=new FileInputStream(file)){      settings.load(input);    }     return new EclipseFormatterStep(settings);  } else   if (file.getName().endsWith(".xml")) {    Node xmlSettings=new XmlParser().parse(file);    NodeList profiles=xmlSettings.getAt(new QName("profile"));    if (profiles.size() > 1) {      logger.warn("Eclipse formatter file contains multiple profiles: " + file.getAbsolutePath());      for (      Object profile : profiles) {        Node node=(Node)profile;        logger.warn("    " + node.attribute("name"));      }      logger.warn("Using first profile, recommend deleting others.");    }    NodeList xmlSettingsElements=xmlSettings.getAt(new QName("profile")).getAt("setting");    for (    Object xmlSettingsElement : xmlSettingsElements) {      Node setting=(Node)xmlSettingsElement;      settings.put(setting.attributes().get("id"),setting.attributes().get("value"));    }    return new EclipseFormatterStep(settings);  } else {    throw new GradleException("Eclipse formatter file must be .properties or .xml");  }}  }
class C{  public MonitorAgentServerProxyFailed(){  requestFileName="getstate.query";  monitorAgent.expectServerProxyFailed(new MessageInfo(Origin.CLIENT_PROXY,ClientId.create("EE","BUSINESS","consumer"),ServiceId.create("EE","BUSINESS","producer",null,"getState"),null,null));  monitorAgent.expectFailure(new MessageInfo(Origin.CLIENT_PROXY,ClientId.create("EE","BUSINESS","consumer"),ServiceId.create("EE","BUSINESS","producer",null,"getState"),null,null),errorCode(SERVER_CLIENTPROXY_X,X_NETWORK_ERROR));}  }
class C{  private ResultPoint findCornerFromCenter(int centerX,int deltaX,int left,int right,int centerY,int deltaY,int top,int bottom,int maxWhiteRun) throws NotFoundException {  int[] lastRange=null;  for (int y=centerY, x=centerX; y < bottom && y >= top && x < right && x >= left; y+=deltaY, x+=deltaX) {    int[] range;    if (deltaX == 0) {      range=blackWhiteRange(y,maxWhiteRun,left,right,true);    } else {      range=blackWhiteRange(x,maxWhiteRun,top,bottom,false);    }    if (range == null) {      if (lastRange == null) {        throw NotFoundException.getNotFoundInstance();      }      if (deltaX == 0) {        int lastY=y - deltaY;        if (lastRange[0] < centerX) {          if (lastRange[1] > centerX) {            return new ResultPoint(deltaY > 0 ? lastRange[0] : lastRange[1],lastY);          }          return new ResultPoint(lastRange[0],lastY);        } else {          return new ResultPoint(lastRange[1],lastY);        }      } else {        int lastX=x - deltaX;        if (lastRange[0] < centerY) {          if (lastRange[1] > centerY) {            return new ResultPoint(lastX,deltaX < 0 ? lastRange[0] : lastRange[1]);          }          return new ResultPoint(lastX,lastRange[0]);        } else {          return new ResultPoint(lastX,lastRange[1]);        }      }    }    lastRange=range;  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  @Override public String toString(){  if (minNode == null) {    return "FibonacciHeap=[]";  }  Stack<FibonacciHeapNode<T>> stack=new Stack<FibonacciHeapNode<T>>();  stack.push(minNode);  StringBuffer buf=new StringBuffer(512);  buf.append("FibonacciHeap=[");  while (!stack.empty()) {    FibonacciHeapNode<T> curr=stack.pop();    buf.append(curr);    buf.append(", ");    if (curr.child != null) {      stack.push(curr.child);    }    FibonacciHeapNode<T> start=curr;    curr=curr.right;    while (curr != start) {      buf.append(curr);      buf.append(", ");      if (curr.child != null) {        stack.push(curr.child);      }      curr=curr.right;    }  }  buf.append(']');  return buf.toString();}  }
class C{  private void writeDataPage(CacheDataPage cacheDataPage) throws IOException {  getIndexData().writeDataPage(cacheDataPage);  cacheDataPage._extra._modified=false;}  }
class C{  private void checkEntry(long index,Entry entry,Segment segment,OffsetPredicate predicate,Segment compactSegment){  Compaction.Mode mode=entry.getCompactionMode();  if (mode == Compaction.Mode.DEFAULT) {    mode=defaultCompactionMode;  }switch (mode) {case SNAPSHOT:    if (index <= snapshotIndex && !isLive(index,segment,predicate)) {      compactEntry(index,segment,compactSegment);    } else {      transferEntry(entry,compactSegment);    }  break;case RELEASE:case QUORUM:if (!isLive(index,segment,predicate)) {  compactEntry(index,segment,compactSegment);} else {  transferEntry(entry,compactSegment);}break;case FULL:case SEQUENTIAL:case EXPIRING:case TOMBSTONE:if (index <= compactIndex && !isLive(index,segment,predicate)) {compactEntry(index,segment,compactSegment);} else {transferEntry(entry,compactSegment);}break;case UNKNOWN:if (index <= snapshotIndex && index <= compactIndex && !isLive(index,segment,predicate)) {compactEntry(index,segment,compactSegment);} else {transferEntry(entry,compactSegment);}break;default :break;}}  }
class C{  private int arabicNumeralValue(char c){}  }
class C{  protected static TrustAnchor findTrustAnchor(X509Certificate cert,Set trustAnchors,String sigProvider) throws AnnotatedException {  TrustAnchor trust=null;  PublicKey trustPublicKey=null;  Exception invalidKeyEx=null;  X509CertSelector certSelectX509=new X509CertSelector();  X500Principal certIssuer=getEncodedIssuerPrincipal(cert);  try {    certSelectX509.setSubject(certIssuer.getEncoded());  } catch (  IOException ex) {    throw new AnnotatedException("Cannot set subject search criteria for trust anchor.",ex);  }  Iterator iter=trustAnchors.iterator();  while (iter.hasNext() && trust == null) {    trust=(TrustAnchor)iter.next();    if (trust.getTrustedCert() != null) {      if (certSelectX509.match(trust.getTrustedCert())) {        trustPublicKey=trust.getTrustedCert().getPublicKey();      } else {        trust=null;      }    } else     if (trust.getCAName() != null && trust.getCAPublicKey() != null) {      try {        X500Principal caName=new X500Principal(trust.getCAName());        if (certIssuer.equals(caName)) {          trustPublicKey=trust.getCAPublicKey();        } else {          trust=null;        }      } catch (      IllegalArgumentException ex) {        trust=null;      }    } else {      trust=null;    }    if (trustPublicKey != null) {      try {        verifyX509Certificate(cert,trustPublicKey,sigProvider);      } catch (      Exception ex) {        invalidKeyEx=ex;        trust=null;        trustPublicKey=null;      }    }  }  if (trust == null && invalidKeyEx != null) {    throw new AnnotatedException("TrustAnchor found but certificate validation failed.",invalidKeyEx);  }  return trust;}  }
class C{  public T language(String value){  return attr("language",value);}  }
class C{  private void removeAliasID(AliasID id,Alias alias){  if (id.isValid()) {switch (id.getType()) {case ESN:      String esn=((Esn)id).getEsn();    if (esn != null) {      if (esn.contains(WILDCARD)) {        removeWildcard(esn,mESNWildcards);      }    }  mESN.remove(esn);break;case Fleetsync:String fleetsync=((FleetsyncID)id).getIdent();if (fleetsync != null) {if (fleetsync.contains(WILDCARD)) {removeWildcard(fleetsync,mFleetsyncWildcards);}mFleetsync.remove(fleetsync);}break;case LoJack:mLoJack.remove((LoJackFunctionAndID)id);break;case MDC1200:String mdc=((MDC1200ID)id).getIdent();if (mdc != null) {if (mdc.contains(WILDCARD)) {removeWildcard(mdc,mMDC1200Wildcards);}mMDC1200.remove(mdc);}break;case MPT1327:String mpt=((MPT1327ID)id).getIdent();if (mpt != null) {if (mpt.contains(WILDCARD)) {removeWildcard(mpt,mMPT1327Wildcards);}mMPT1327.remove(mpt);}break;case MIN:String min=((Min)id).getMin();if (min != null) {if (min.contains(WILDCARD)) {removeWildcard(min,mMobileIDWildcards);}mMobileID.remove(min);}break;case LTRNetUID:mUniqueID.remove(((UniqueID)id).getUid());break;case Site:mSiteID.remove(((SiteID)id).getSite());break;case Status:mStatus.remove(((StatusID)id).getStatus());break;case Talkgroup:String tgid=((TalkgroupID)id).getTalkgroup();if (tgid != null) {if (tgid.contains(WILDCARD)) {removeWildcard(tgid,mTalkgroupWildcards);}mTalkgroup.remove(tgid);}break;case NonRecordable:case Priority:break;default :mLog.warn("Unrecognized Alias ID Type:" + id.getType().name());break;}}}  }
class C{  public void onAttachFragment(Fragment fragment){  fragmentName=fragment.toString();  try {    listener=(DomoticzFragmentListener)fragment;  } catch (  ClassCastException e) {    throw new ClassCastException(fragment.toString() + " must implement DomoticzFragmentListener");  }}  }
class C{  private void calculateDataSets(){  for (  final Event event : repProc.replay.gameEvents.events) {    if (event.id != IGameEvents.ID_CMD)     continue;    final DataModel<BaseControlChartDataSet> model=modelByUserIds[event.userId];    if (model == null)     continue;    final CmdEvent ce=(CmdEvent)event;    if (ce.command == null || ce.command.abilId == null)     continue;    final BaseControlChartDataSet ds=model.getDataSetList().get(0);switch (ce.command.abilId) {case Ability.ID_SPAWN_LARVA:case Ability.ID_CHRONO_BOOST:{        final boolean isInject=ce.command.abilId.equals(Ability.ID_SPAWN_LARVA);        Target target=null;        for (        final Target target_ : isInject ? ds.injectList : ds.chronoList) {          if (target_.tag == ce.getTargetUnit().getTag()) {            target=target_;            break;          }        }        if (target == null)         (isInject ? ds.injectList : ds.chronoList).add(target=new Target(ce.getTargetUnit().getTag(),repProc.replay.getBalanceData().getUnit(ce.getTargetUnit().getSnapshotUnitLink()).text));        if (isInject) {          if (!target.cmdList.isEmpty() && target.cmdList.get(target.cmdList.size() - 1).loop + BaseControlChart.DURATION_LARVA_SPAWNING > ce.loop)           target.cmdList.remove(target.cmdList.size() - 1);        }        target.cmdList.add(ce);        break;      }case Ability.ID_CALLDOWN_MULE:    ds.muleList.add(ce);  break;case Ability.ID_SCANNER_SWEEP:ds.scanList.add(ce);break;case Ability.ID_CALLDOWN_EXTRA_SUPPLIES:ds.xsupplyList.add(ce);break;}}for (final Chart<BaseControlChartDataSet> chart : chartList) {for (final DataModel<BaseControlChartDataSet> model : chart.getDataModelList()) {final BaseControlChartDataSet ds=model.getDataSetList().get(0);int injects=0;int hatchTime=0;int hatchSpawnTime=0;int injectionGap=0;int injectionGapCount=0;for (final Target target : ds.injectList) {injects+=target.cmdList.size();hatchTime+=Math.min(repProc.replay.header.getElapsedGameLoops(),target.cmdList.get(target.cmdList.size() - 1).loop + BaseControlChart.DURATION_LARVA_SPAWNING) - target.cmdList.get(0).loop;int lastSpawningEnd=0;for (final CmdEvent ce : target.cmdList) {hatchSpawnTime+=Math.min(repProc.replay.header.getElapsedGameLoops() - ce.loop,BaseControlChart.DURATION_LARVA_SPAWNING);if (lastSpawningEnd > 0) {injectionGap+=ce.loop - lastSpawningEnd;injectionGapCount++;}lastSpawningEnd=ce.loop + BaseControlChart.DURATION_LARVA_SPAWNING;}}final String spawningRatio=hatchTime == 0 ? "N/A" : Env.LANG.formatNumber(hatchSpawnTime * 100.0 / hatchTime,2) + "%";final String avgInjGap=injectionGapCount == 0 ? "N/A" : Env.LANG.formatNumber(repProc.loopToTime(injectionGap) / 1000.0 / injectionGapCount,2) + " sec";int chronos=0;for (final Target target : ds.chronoList) chronos+=target.cmdList.size();final StringBuilder sb=new StringBuilder();if (injects > 0) {if (sb.length() > 0) sb.append(",    ");sb.append("Avg Spawning ratio: ").append(spawningRatio).append(", Avg Injection gap: ").append(avgInjGap).append(", Injects: ").append(injects);}if (chronos > 0) {if (sb.length() > 0) sb.append(",    ");sb.append("Chronos: ").append(chronos);}if (!ds.muleList.isEmpty()) {if (sb.length() > 0) sb.append(",    ");sb.append("MULEs: ").append(ds.muleList.size());}if (!ds.scanList.isEmpty()) {if (sb.length() > 0) sb.append(",    ");sb.append("Scans: ").append(ds.scanList.size());}if (!ds.xsupplyList.isEmpty()) {if (sb.length() > 0) sb.append(",    ");sb.append("XSupplies: ").append(ds.xsupplyList.size());}if (sb.length() > 0) ds.setTitle(sb.toString());}}}  }
class C{  public double findMinimum(){  if (um == null) {    um=new UnivariateMinimum();  }  return um.findMinimum(this);}  }
class C{  public boolean hunt(String tag,@NonNull Uri uri,@NonNull Options options,@NonNull Callback callback){  if (LOG) {    Log.d(TAG,"hunt call.");  }  if (executor.isShutdown() || executor.isTerminated()) {    Log.e(TAG,"SoBitmap has been shutdown. No more request can be handled");    return false;  }  if (uri == Uri.EMPTY) {    throw new IllegalArgumentException("Empty uri is not allowed, please check it through.");  }  Request request=generateRequest(tag,uri,options,callback);  if (request == null) {    Log.e(TAG,"Can handle " + uri.toString());    return false;  }  if (LOG) {    Log.d(TAG,"hunt called with: " + request.toString());  }  try {    request.task=executor.submit(request);  } catch (  RejectedExecutionException ignore) {    if (LOG) {      Log.e(TAG,"Task rejected.");    }    return false;  }  if (LOG) {    Log.d(TAG,"Task submitted with key: " + request.key);  }  requestMap.put(request.key,request);  return true;}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  BasePackage theBasePackage=(BasePackage)EPackage.Registry.INSTANCE.getEPackage(BasePackage.eNS_URI);  packageEClass.getESuperTypes().add(theBasePackage.getNamedElement());  typeEClass.getESuperTypes().add(this.getPackageMember());  declarationEClass.getESuperTypes().add(this.getTypedElement());  declarationEClass.getESuperTypes().add(theBasePackage.getNamedElement());  declarationEClass.getESuperTypes().add(this.getPackageMember());  operationEClass.getESuperTypes().add(this.getDeclaration());  propertyEClass.getESuperTypes().add(this.getDeclaration());  parameterEClass.getESuperTypes().add(this.getTypedElement());  parameterEClass.getESuperTypes().add(theBasePackage.getNamedElement());  parameterEClass.getESuperTypes().add(this.getAnnotatableElement());  eventEClass.getESuperTypes().add(this.getDeclaration());  enumerationTypeEClass.getESuperTypes().add(this.getPrimitiveType());  primitiveTypeEClass.getESuperTypes().add(this.getType());  complexTypeEClass.getESuperTypes().add(this.getParameterizedType());  enumeratorEClass.getESuperTypes().add(this.getDeclaration());  typeParameterEClass.getESuperTypes().add(this.getType());  parameterizedTypeEClass.getESuperTypes().add(this.getType());  packageMemberEClass.getESuperTypes().add(theBasePackage.getNamedElement());  packageMemberEClass.getESuperTypes().add(this.getAnnotatableElement());  rangeConstraintEClass.getESuperTypes().add(this.getTypeConstraint());  typeAliasEClass.getESuperTypes().add(this.getTypedElement());  typeAliasEClass.getESuperTypes().add(this.getType());  annotationEClass.getESuperTypes().add(this.getPackageMember());  arrayTypeSpecifierEClass.getESuperTypes().add(this.getTypeSpecifier());  initEClass(packageEClass,org.yakindu.base.types.Package.class,"Package",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getPackage_Member(),this.getPackageMember(),null,"member",null,0,-1,org.yakindu.base.types.Package.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getPackage_Domain(),this.getDomain(),null,"domain",null,0,1,org.yakindu.base.types.Package.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getPackage_Import(),this.getPackage(),null,"import",null,0,-1,org.yakindu.base.types.Package.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(typeEClass,Type.class,"Type",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getType_Constraint(),this.getTypeConstraint(),null,"constraint",null,0,-1,Type.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getType_Abstract(),ecorePackage.getEBoolean(),"abstract",null,0,1,Type.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getType_Visible(),ecorePackage.getEBoolean(),"visible","true",0,1,Type.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  addEOperation(typeEClass,this.getType(),"getOriginType",0,1,IS_UNIQUE,IS_ORDERED);  initEClass(declarationEClass,Declaration.class,"Declaration",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(operationEClass,Operation.class,"Operation",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getOperation_Parameters(),this.getParameter(),this.getParameter_OwningOperation(),"parameters",null,0,-1,Operation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(propertyEClass,Property.class,"Property",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getProperty_Const(),ecorePackage.getEBoolean(),"const",null,0,1,Property.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProperty_Readonly(),ecorePackage.getEBoolean(),"readonly",null,0,1,Property.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getProperty_External(),ecorePackage.getEBoolean(),"external",null,0,1,Property.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(parameterEClass,Parameter.class,"Parameter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getParameter_OwningOperation(),this.getOperation(),this.getOperation_Parameters(),"owningOperation",null,0,1,Parameter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(typedElementEClass,TypedElement.class,"TypedElement",IS_ABSTRACT,IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTypedElement_Type(),this.getType(),null,"type",null,0,1,TypedElement.class,IS_TRANSIENT,IS_VOLATILE,!IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,IS_DERIVED,IS_ORDERED);  initEReference(getTypedElement_TypeSpecifier(),this.getTypeSpecifier(),null,"typeSpecifier",null,0,1,TypedElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(typeSpecifierEClass,TypeSpecifier.class,"TypeSpecifier",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTypeSpecifier_Type(),this.getType(),null,"type",null,0,1,TypeSpecifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTypeSpecifier_TypeArguments(),this.getTypeSpecifier(),null,"typeArguments",null,0,-1,TypeSpecifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(eventEClass,Event.class,"Event",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getEvent_Direction(),this.getDirection(),"direction",null,0,1,Event.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(enumerationTypeEClass,EnumerationType.class,"EnumerationType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEnumerationType_Enumerator(),this.getEnumerator(),this.getEnumerator_OwningEnumeration(),"enumerator",null,0,-1,EnumerationType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(primitiveTypeEClass,PrimitiveType.class,"PrimitiveType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getPrimitiveType_BaseType(),this.getPrimitiveType(),null,"baseType",null,0,1,PrimitiveType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(complexTypeEClass,ComplexType.class,"ComplexType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getComplexType_Features(),this.getDeclaration(),null,"features",null,0,-1,ComplexType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getComplexType_SuperTypes(),this.getComplexType(),null,"superTypes",null,0,-1,ComplexType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  addEOperation(complexTypeEClass,this.getDeclaration(),"getAllFeatures",0,-1,IS_UNIQUE,IS_ORDERED);  initEClass(enumeratorEClass,Enumerator.class,"Enumerator",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getEnumerator_OwningEnumeration(),this.getEnumerationType(),this.getEnumerationType_Enumerator(),"owningEnumeration",null,0,1,Enumerator.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getEnumerator_LiteralValue(),ecorePackage.getEInt(),"literalValue",null,0,1,Enumerator.class,IS_TRANSIENT,IS_VOLATILE,!IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,IS_DERIVED,IS_ORDERED);  initEClass(typeConstraintEClass,TypeConstraint.class,"TypeConstraint",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTypeConstraint_Value(),ecorePackage.getEJavaObject(),"value",null,0,1,TypeConstraint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(typeParameterEClass,TypeParameter.class,"TypeParameter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTypeParameter_Bound(),this.getType(),null,"bound",null,0,1,TypeParameter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(parameterizedTypeEClass,ParameterizedType.class,"ParameterizedType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getParameterizedType_Parameter(),this.getTypeParameter(),null,"parameter",null,0,-1,ParameterizedType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(packageMemberEClass,PackageMember.class,"PackageMember",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getPackageMember_Id(),ecorePackage.getEString(),"id",null,0,1,PackageMember.class,IS_TRANSIENT,IS_VOLATILE,!IS_CHANGEABLE,!IS_UNSETTABLE,IS_ID,IS_UNIQUE,IS_DERIVED,IS_ORDERED);  initEClass(rangeConstraintEClass,RangeConstraint.class,"RangeConstraint",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getRangeConstraint_LowerBound(),ecorePackage.getELong(),"lowerBound",null,0,1,RangeConstraint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getRangeConstraint_UpperBound(),ecorePackage.getELong(),"upperBound",null,0,1,RangeConstraint.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(domainEClass,Domain.class,"Domain",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getDomain_DomainID(),ecorePackage.getEString(),"domainID",null,0,1,Domain.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(typeAliasEClass,TypeAlias.class,"TypeAlias",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(annotationEClass,Annotation.class,"Annotation",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAnnotation_Properties(),this.getProperty(),null,"properties",null,0,-1,Annotation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getAnnotation_Targets(),ecorePackage.getEObject(),null,"targets",null,0,-1,Annotation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(annotatableElementEClass,AnnotatableElement.class,"AnnotatableElement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAnnotatableElement_Annotations(),this.getAnnotation(),null,"annotations",null,0,-1,AnnotatableElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(arrayTypeSpecifierEClass,ArrayTypeSpecifier.class,"ArrayTypeSpecifier",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getArrayTypeSpecifier_Size(),ecorePackage.getEInt(),"size",null,0,1,ArrayTypeSpecifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  addEOperation(arrayTypeSpecifierEClass,this.getType(),"getElementType",0,1,IS_UNIQUE,IS_ORDERED);  initEEnum(directionEEnum,Direction.class,"Direction");  addEEnumLiteral(directionEEnum,Direction.LOCAL);  addEEnumLiteral(directionEEnum,Direction.IN);  addEEnumLiteral(directionEEnum,Direction.OUT);  createResource(eNS_URI);}  }
class C{  public void add(Message message){  message.acquire();  lock.lock();  try {    workQueue.add(message);    queueEmpty.signal();  }  finally {    lock.unlock();  }}  }
class C{  public static List<String> unescape(String source,char escapeChar,char[] specialCharacters,char splitCharacter){  return unescape(source,escapeChar,specialCharacters,splitCharacter,-1);}  }
class C{  public void edit(Instanceof i) throws CannotCompileException {}  }
class C{  private void printAll(){  iterator().forEachRemaining(null);}  }
class C{  protected boolean beforeDelete(){  if (getParent().getDocStatus().equals(MInOut.DOCSTATUS_Drafted))   return true;  log.saveError("Error",Msg.getMsg(getCtx(),"CannotDelete"));  return false;}  }
class C{  public Builder addMenuItem(@NonNull String label,@NonNull PendingIntent pendingIntent){  if (mMenuItems == null)   mMenuItems=new ArrayList<>();  Bundle bundle=new Bundle();  bundle.putString(KEY_MENU_ITEM_TITLE,label);  bundle.putParcelable(KEY_PENDING_INTENT,pendingIntent);  mMenuItems.add(bundle);  return this;}  }
class C{  public static byte[] hexToArray(final String data) throws ConversionException {  try {    return Hex.decodeHex(data.toCharArray());  } catch (  DecoderException e) {    throw new ConversionException("Cannot convert given hex text into plain text",e);  }}  }
class C{  public static EncodingException createEncodingException(final ErrorKeys errorId,final String message,final Exception e){  return new EncodingException(errorId.toString() + ":\r\n" + message,e);}  }
class C{  private void displayEpisodeDetails(Cursor cursor){  cursor.moveToFirst();  mediaTitle.setText(cursor.getString(EpisodeDetailsQuery.TITLE));  mediaUndertitle.setText(cursor.getString(EpisodeDetailsQuery.SHOWTITLE));  int runtime=cursor.getInt(EpisodeDetailsQuery.RUNTIME) / 60;  String durationPremiered=runtime > 0 ? String.format(getString(R.string.minutes_abbrev),String.valueOf(runtime)) + "  |  " + cursor.getString(EpisodeDetailsQuery.FIRSTAIRED) : cursor.getString(EpisodeDetailsQuery.FIRSTAIRED);  mediaPremiered.setText(durationPremiered);  String season=String.format(getString(R.string.season_episode),cursor.getInt(EpisodeDetailsQuery.SEASON),cursor.getInt(EpisodeDetailsQuery.EPISODE));  mediaSeason.setText(season);  double rating=cursor.getDouble(EpisodeDetailsQuery.RATING);  if (rating > 0) {    mediaRating.setVisibility(View.VISIBLE);    mediaMaxRating.setVisibility(View.VISIBLE);    mediaRating.setText(String.format("%01.01f",rating));    mediaMaxRating.setText(getString(R.string.max_rating_video));  } else {    mediaRating.setVisibility(View.INVISIBLE);    mediaMaxRating.setVisibility(View.INVISIBLE);  }  mediaDescription.setText(cursor.getString(EpisodeDetailsQuery.PLOT));  mediaDirectors.setText(cursor.getString(EpisodeDetailsQuery.DIRECTOR));  setupSeenButton(cursor.getInt(EpisodeDetailsQuery.PLAYCOUNT));  Resources resources=getActivity().getResources();  DisplayMetrics displayMetrics=new DisplayMetrics();  getActivity().getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);  int posterWidth=resources.getDimensionPixelOffset(R.dimen.now_playing_poster_width);  int posterHeight=resources.getDimensionPixelOffset(R.dimen.now_playing_poster_height);  int artHeight=resources.getDimensionPixelOffset(R.dimen.now_playing_art_height);  UIUtils.loadImageIntoImageview(getHostManager(),cursor.getString(EpisodeDetailsQuery.THUMBNAIL),mediaArt,displayMetrics.widthPixels,artHeight);  tvshowDownloadInfo=new FileDownloadHelper.TVShowInfo(cursor.getString(EpisodeDetailsQuery.SHOWTITLE),cursor.getInt(EpisodeDetailsQuery.SEASON),cursor.getInt(EpisodeDetailsQuery.EPISODE),cursor.getString(EpisodeDetailsQuery.TITLE),cursor.getString(EpisodeDetailsQuery.FILE));  downloadButton.setVisibility(View.VISIBLE);  if (tvshowDownloadInfo.downloadFileExists()) {    Resources.Theme theme=getActivity().getTheme();    TypedArray styledAttributes=theme.obtainStyledAttributes(new int[]{R.attr.colorAccent});    downloadButton.setColorFilter(styledAttributes.getColor(0,getResources().getColor(R.color.accent_default)));    styledAttributes.recycle();  } else {    downloadButton.clearColorFilter();  }}  }
class C{  @Override public void NEWARRAY(int conc_array_length,Class<?> componentType){  IntegerValue symb_array_length=env.topFrame().operandStack.popBv32();  if (negativeArrayLengthViolation(conc_array_length,symb_array_length))   return;  int[] lenghts=new int[]{0};  Class<?> array_class=Array.newInstance(componentType,lenghts).getClass();  Type arrayType=Type.getType(array_class);  ReferenceConstant symb_array_ref=this.env.heap.buildNewReferenceConstant(arrayType);  env.heap.putField("",ARRAY_LENGTH,null,symb_array_ref,symb_array_length);  env.topFrame().operandStack.pushRef(symb_array_ref);}  }
class C{  @RequestMapping("flush_all_caches") @ResponseStatus(HttpStatus.OK) public void clearAllCaches(){  LOG.info("------ clearAllCaches was called --------");  cacheUpdateService.clearAllCaches();}  }
class C{  public Agent(Level loggingLevel,String ufragPrefix){  logger=new Logger(classLogger,loggingLevel);  SecureRandom random=new SecureRandom();  connCheckServer=new ConnectivityCheckServer(this);  connCheckClient=new ConnectivityCheckClient(this);  System.setProperty(StackProperties.ALWAYS_SIGN,"true");  if (StackProperties.getString(StackProperties.SOFTWARE) == null)   System.setProperty(StackProperties.SOFTWARE,"ice4j.org");  String ufrag=ufragPrefix == null ? "" : ufragPrefix;  ufrag+=new BigInteger(24,random).toString(32);  ufrag+=BigInteger.valueOf(System.currentTimeMillis()).toString(32);  ufrag=ensureIceAttributeLength(ufrag,4,256);  this.ufrag=ufrag;  password=ensureIceAttributeLength(new BigInteger(128,random).toString(32),22,256);  tieBreaker=random.nextLong() & 0x7FFFFFFFFFFFFFFFL;  nominator=new DefaultNominator(this);}  }
class C{  public void startPushNotifications(){  Intent i=new Intent(this,PushNotificationReceiver.class);  i.setAction(Aptoide.getConfiguration().getAction());  PushNotificationReceiver.setPendingIntents(this);}  }
class C{  public AtomicDoubleArray(int length){  larray=new AtomicLongArray(length);  long ZERO=Double.doubleToRawLongBits(0.0);  for (int i=0; i < length; i++)   larray.set(i,ZERO);}  }
class C{  public Double read(String value){  return Double.valueOf(value);}  }
class C{  public Enumeration<Attribute> enumerateAttributes(){  return new WekaEnumeration<Attribute>(m_Attributes,m_ClassIndex);}  }
class C{  public void outputNodePush(){  push();}  }
class C{  @Override public void close(){  getDelegate().close();  clearDelegate();}  }
class C{  public final int countDataTypes(){  return mDataTypes != null ? mDataTypes.size() : 0;}  }
class C{  public NotificationChain basicSetRewiredTarget(SymbolTableEntry newRewiredTarget,NotificationChain msgs){  SymbolTableEntry oldRewiredTarget=rewiredTarget;  rewiredTarget=newRewiredTarget;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__REWIRED_TARGET,oldRewiredTarget,newRewiredTarget);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private static LiteralByteString concatenateBytes(ByteString left,ByteString right){  int leftSize=left.size();  int rightSize=right.size();  byte[] bytes=new byte[leftSize + rightSize];  left.copyTo(bytes,0,0,leftSize);  right.copyTo(bytes,0,leftSize,rightSize);  return new LiteralByteString(bytes);}  }
class C{  public CoderResult unmappableResult(){  assert (error == null);  return CoderResult.unmappableForLength(isPair ? 2 : 1);}  }
class C{  public void testInvokeAll2(){  testInvokeAll2(mainPool());}  }
class C{  public boolean isax_case(){  Object oo=get_Value(COLUMNNAME_ax_case);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.430 -0500",hash_original_method="E0D4643D13B7CCDA3167C7EA96CF1000",hash_generated_method="5CF591D4ECBF29A40680A9E022503132") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public synchronized void write(int ch) throws IOException {  if (FromNetASCIIInputStream._noConversionRequired) {    out.write(ch);    return;  }  __write(ch);}  }
class C{  public void run(){  Config.markLoaded();  if (Log.errorsReported()) {    System.exit(1);  }  try {    Log.logger.log(Level.INFO,"START");    installShutdownMethods();    int numworkers=Config.parms.getInt("nt");    startStatsThread();    startCmdThread();    if (Config.parms.getString("tc").indexOf("Nothing") >= 0) {      run_ThreadSizeLoop();    } else {      setNumWorkers(numworkers);      if (startWorkers(null)) {        startTimerThread();synchronized (this) {          while (!shutdown && workerThreadGroup.activeCount() > 0) {            try {              this.wait(5 * 1000);            } catch (            InterruptedException e) {            }          }        }      }    }  } catch (  Exception e) {    Log.logger.log(Level.SEVERE,"Fatal Error.",e);  } finally {    stats.setDefaultEndTime(System.currentTimeMillis());    stats.setStaticStartTime(staticStartTime);    doShutdown();    stats.printFinalSummary();    Log.logger.log(Level.INFO,"STOP");  }}  }
class C{  @Override public void close() throws IOException {  in.close();}  }
class C{  @RpcMethod public TransferImageResponse transferImage(String imageId,String source,String destination,ServerAddress destinationHost) throws InterruptedException, RpcException {  SyncHandler<TransferImageResponse,Host.AsyncClient.transfer_image_call> syncHandler=new SyncHandler<>();  transferImage(imageId,source,destination,destinationHost,syncHandler);  syncHandler.await();  return ResponseValidator.checkTransferImageResponse(syncHandler.getResponse());}  }
class C{  public void addProxyToMap(ObjectName objectName,LockServiceMXBean proxy){  if (mapOfProxy != null) {    mapOfProxy.put(objectName,proxy);    setSize=mapOfProxy.values().size();  }}  }
class C{  public static Object moveObject(Object fromObj,Object toObj,int numBytes,RVMArray type){  return JavaHeader.moveObject(fromObj,toObj,numBytes,type);}  }
class C{  private List<StoragePort> allocatePorts(StoragePortsAllocator allocator,List<StoragePort> candidatePorts,int portsRequested,NetworkLite nwLite,URI varrayURI){  return VPlexBackEndOrchestratorUtil.allocatePorts(allocator,candidatePorts,portsRequested,nwLite,varrayURI,simulation,_blockScheduler,_dbClient);}  }
class C{  @EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerDeath(PlayerDeathEvent event){  Player player=event.getEntity();  Match match=Cardinal.getMatch(player);  List<Destroyable> destroyables=getDestroyables(match);  if (match == null || !match.hasPlayer(player) || destroyables.size() == 0) {    return;  }  destroyables.forEach(null);}  }
class C{  public void validateEmrClusterDefinitionKey(EmrClusterDefinitionKey key) throws IllegalArgumentException {  Assert.notNull(key,"An EMR cluster definition key must be specified.");  key.setNamespace(alternateKeyHelper.validateStringParameter("namespace",key.getNamespace()));  key.setEmrClusterDefinitionName(alternateKeyHelper.validateStringParameter("An","EMR cluster definition name",key.getEmrClusterDefinitionName()));}  }
class C{  public static LoggingException createLoggingException(final ErrorKeys errorId){  return new LoggingException(errorId.toString());}  }
class C{  public boolean isSse41(){  return sse41;}  }
class C{  void readPRJ() throws IOException {  while (true) {    String S=isr.readLine();    if (S == null)     return;    if (S.startsWith("EOP"))     return;  }}  }
class C{  public static boolean isSameDayIncludingMidnight(Date startDate,Date endDate){  return DateUtils.isSameDay(startDate,endDate) || DateUtils.isSameDay(startDate,DateUtils.addSeconds(endDate,-10));}  }
class C{  public void doWindowClose(){  tradingdayPanel.killAllStrategyWorker();  doDisconnect();  doExit();}  }
class C{  private static float limitHue(float hue){  float res=hue;  if (res < 0) {    res+=1f;  } else   if (res > 1f) {    res-=1f;  }  return res;}  }
class C{  public void actionPerformed(ActionEvent e){  super.actionPerformed(e);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  private Node balance(Node x){  if (balanceFactor(x) < -1) {    if (balanceFactor(x.right) > 0) {      x.right=rotateRight(x.right);    }    x=rotateLeft(x);  } else   if (balanceFactor(x) > 1) {    if (balanceFactor(x.left) < 0) {      x.left=rotateLeft(x.left);    }    x=rotateRight(x);  }  return x;}  }
class C{  public DBObject_Trigger_Table(DBConnection parent,String name,int sequence){  super(parent,name,sequence);}  }
class C{  public void append(StringBuffer buffer,String fieldName,double value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public static boolean isGlobalReservedName(final String name){  return GLOBAL_RESERVED_TYPE_NAMES.contains(name);}  }
class C{  @Override public void map(MethodRef method,String sql,Object... args){  _kraken.map(method,sql,args);}  }
class C{  public static void xmlGlobalExistent(Class<?> aClass){  throw new XmlMappingGlobalExistException(MSG.INSTANCE.message(xmlMappingGlobalExistException,aClass.getSimpleName()));}  }
class C{  public int length(){  return count;}  }
class C{  protected Object convertAttributeValue(Object value){  if (value == null || value instanceof String || value instanceof Byte || value instanceof Long || value instanceof Double || value instanceof Boolean || value instanceof Integer || value instanceof Short || value instanceof Float) {    return value;  }  return value.toString();}  }
class C{  public boolean isDisc(){  return isDisc;}  }
class C{  public int size(){  return listOfFileData.size();}  }
class C{  void sendError(int httpStatusCode,UnsignedInteger opcuaStatusCode,String errorMessage){  try {    ErrorMessage errorMsg=null;    if (errorMessage != null) {      errorMsg=new ErrorMessage(opcuaStatusCode,errorMessage);    }    sendResponse(httpStatusCode,errorMsg);  }  finally {    endpoint.pendingRequests.remove(requestId);  }}  }
class C{  public void start() throws IOException, GeneralSecurityException, ConfigurationException {  String keystoreAlias=null;  AuthenticationInfo authenticationInfo=null;  if (useSSL) {    authenticationInfo=SecurityHelper.loadAuthenticationInformation(TUNGSTEN_APPLICATION_NAME.REPLICATOR);    if (authenticationInfo != null) {      keystoreAlias=authenticationInfo.getKeystoreAliasForConnectionType(SecurityConf.KEYSTORE_ALIAS_REPLICATOR_MASTER_TO_SLAVE);      logger.info("Setting up password manager to authenticate encrypted connections");      passwordManager=new PasswordManager(authenticationInfo.getParentPropertiesFileLocation());    }  }  logger.info("Opening THL server: store name=" + storeName + " host="+ host+ " port="+ port);  socketService=new ServerSocketService();  socketService.setAddress(new InetSocketAddress(host,port));  socketService.setUseSSL(useSSL,keystoreAlias,authenticationInfo);  socketService.bind();  logger.info("Opened socket: host=" + socketService.getAddress() + " port="+ socketService.getLocalPort()+ " useSSL="+ useSSL);  thd=new Thread(this,"THL Server [" + storeName + ":"+ host+ ":"+ port+ "]");  thd.start();}  }
class C{  public void cancel(){  bound.deregisterAnimated(i);}  }
class C{  protected void clearOutEvents(){}  }
class C{  public FastItemAdapter<Item> add(int position,Item item){  mItemAdapter.add(position,item);  return this;}  }
class C{  public InputStream downloadFileStream(String path){  DropboxAPI.DropboxInputStream stream=null;  try {    stream=mDBApi.getFileStream(path,null);  } catch (  DropboxException e) {    e.printStackTrace();  }  return stream;}  }
class C{  public static Bitmap createIconBitmap(Drawable icon,Context context){synchronized (sCanvas) {    if (sIconWidth == -1) {      initStatics(context);    }    int width=sIconWidth;    int height=sIconHeight;    if (icon instanceof PaintDrawable) {      PaintDrawable painter=(PaintDrawable)icon;      painter.setIntrinsicWidth(width);      painter.setIntrinsicHeight(height);    } else     if (icon instanceof BitmapDrawable) {      BitmapDrawable bitmapDrawable=(BitmapDrawable)icon;      Bitmap bitmap=bitmapDrawable.getBitmap();      if (bitmap.getDensity() == Bitmap.DENSITY_NONE) {        bitmapDrawable.setTargetDensity(context.getResources().getDisplayMetrics());      }    }    int sourceWidth=icon.getIntrinsicWidth();    int sourceHeight=icon.getIntrinsicHeight();    if (sourceWidth > 0 && sourceHeight > 0) {      final float ratio=(float)sourceWidth / sourceHeight;      if (sourceWidth > sourceHeight) {        height=(int)(width / ratio);      } else       if (sourceHeight > sourceWidth) {        width=(int)(height * ratio);      }    }    int textureWidth=sIconWidth;    int textureHeight=sIconHeight;    final Bitmap bitmap=Bitmap.createBitmap(textureWidth,textureHeight,Bitmap.Config.ARGB_8888);    final Canvas canvas=sCanvas;    canvas.setBitmap(bitmap);    final int left=(textureWidth - width) / 2;    final int top=(textureHeight - height) / 2;    @SuppressWarnings("all") final boolean debug=false;    if (debug) {      canvas.drawColor(sColors[sColorIndex]);      if (++sColorIndex >= sColors.length)       sColorIndex=0;      Paint debugPaint=new Paint();      debugPaint.setColor(0xffcccc00);      canvas.drawRect(left,top,left + width,top + height,debugPaint);    }    sOldBounds.set(icon.getBounds());    icon.setBounds(left,top,left + width,top + height);    icon.draw(canvas);    icon.setBounds(sOldBounds);    canvas.setBitmap(null);    return bitmap;  }}  }
class C{  @Override public Void sum(final IGASState<BFS.VS,BFS.ES,Void> state,final Void left,final Void right){  throw new UnsupportedOperationException();}  }
class C{  protected void readImplementation(final EntitySetupDescriptor desc,final Element element){  if (element.hasAttribute("class-name")) {    desc.setImplementation(element.getAttribute("class-name"));  } else {    LOGGER.error("Implementation without class-name");  }  readParameters(desc,element);}  }
class C{  public Map resolveAll(){  Map resolved=new HashMap();  for (Iterator entryIter=declToBridge.entrySet().iterator(); entryIter.hasNext(); ) {    Map.Entry entry=(Map.Entry)entryIter.next();    Class owner=(Class)entry.getKey();    Set bridges=(Set)entry.getValue();    try {      new ClassReader(owner.getName()).accept(new BridgedFinder(bridges,resolved),ClassReader.SKIP_FRAMES | ClassReader.SKIP_DEBUG);    } catch (    IOException ignored) {    }  }  return resolved;}  }
class C{  protected void onShow(){}  }
class C{  public void append(StringBuffer buffer,String fieldName,byte value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  private void blockRMI(String methodName,Object... args) throws ControllerException {  final URI export=(URI)args[0];  BlockExportController controller=getExportController();  _dispatcher.queue(export,"export",controller,methodName,args);}  }
class C{  @Override public ILineSegment defaultEntity(){  return nullEntry;}  }
class C{  public ScanManager(){  broadcaster=new NotificationBroadcasterSupport();  pendingNotifs=new LinkedBlockingQueue<Notification>(100);  scanmap=newConcurrentHashMap();  configmap=newConcurrentHashMap();  log=new ResultLogManager();}  }
class C{  @DSSafe(DSCat.GRAPHICS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.254 -0500",hash_original_method="051BEADE6290B35325837FC3FD526210",hash_generated_method="A560E9C179CDEB0D924A8EF4EB359738") public PorterDuffXfermode(PorterDuff.Mode mode){  this.mode=mode;  native_instance=nativeCreateXfermode(mode.nativeInt);}  }
class C{  public final void init(Key key,AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException, ExemptionMechanismException {  done=false;  initialized=false;  keyStored=key;  exmechSpi.engineInit(key,params);  initialized=true;}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  private void initializeLiveAttributes(){  azimuth=createLiveAnimatedNumber(null,SVG_AZIMUTH_ATTRIBUTE,0f);  elevation=createLiveAnimatedNumber(null,SVG_ELEVATION_ATTRIBUTE,0f);}  }
class C{  public final void testClone02(){  Vector<Certificate> certificates=new Vector<Certificate>();  certificates.add(new MyCertificate("TEST",new byte[]{(byte)4}));  CollectionCertStoreParameters cp1=new CollectionCertStoreParameters(certificates);  CollectionCertStoreParameters cp2=(CollectionCertStoreParameters)cp1.clone();  assertTrue(cp1.getCollection() == cp2.getCollection());}  }
class C{  public void writeEoModelText(PrintWriter writer,String entityPrefix,String helperName,Set<String> entityNameIncludeSet,ModelReader entityModelReader) throws GenericEntityException {  if (entityPrefix == null)   entityPrefix="";  if (helperName == null)   helperName="localderby";  UtilPlist.writePlistPropertyMap(this.createEoModelMap(entityPrefix,helperName,entityNameIncludeSet,entityModelReader),0,writer,false);}  }
class C{  void createRuleStartAndStopATNStates(){  atn.ruleToStartState=new RuleStartState[g.rules.size()];  atn.ruleToStopState=new RuleStopState[g.rules.size()];  for (  Rule r : g.rules.values()) {    RuleStartState start=newState(RuleStartState.class,r.ast);    RuleStopState stop=newState(RuleStopState.class,r.ast);    start.stopState=stop;    start.isLeftRecursiveRule=r instanceof LeftRecursiveRule;    start.setRuleIndex(r.index);    stop.setRuleIndex(r.index);    atn.ruleToStartState[r.index]=start;    atn.ruleToStopState[r.index]=stop;  }}  }
class C{  public static String classNameFor(Step step){  return classNameForStepHolding(step.getOperationDescription());}  }
class C{  public void printString(String v) throws IOException {  printString(v,0,v.length());}  }
class C{  protected boolean parseLineInternal(){  int i=0;  for (; tokenizer.valid(); tokenizer.advance(), i++) {    if (!isLabelColumn(i) && !tokenizer.isQuoted()) {      try {        attributes.add(tokenizer.getDouble());        continue;      } catch (      NumberFormatException e) {      }    }    String lbl=tokenizer.getStrippedSubstring();    if (lbl.length() > 0) {      haslabels=true;      lbl=unique.addOrGet(lbl);      labels.add(lbl);    }  }  if (curvec == null && attributes.size == 0) {    columnnames=new ArrayList<>(labels);    haslabels=false;    curvec=null;    curlbl=null;    labels.clear();    return false;  }  curvec=createVector();  curlbl=LabelList.make(labels);  attributes.clear();  labels.clear();  return true;}  }
class C{  public double eval(double params[]){  return (Math.exp(-Math.pow(params[0] + params[1] + params[2],2.0)));}  }
class C{  public void testValueOfLongZero(){  long longVal=0L;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={0};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String setting=getString(stack);  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerPluginInfo()) {      stack.push(pluggy);      stack.push(setting);      return makeNetworkedCall(stack);    }    SageTVPlugin realPlug=sage.plugin.CorePluginManager.getInstance().getRealPlugin(pluggy.getId());    if (realPlug != null) {      if (stack.getUIMgr() != null) {        Catbert.uiContextThreadNames.set(stack.getUIMgr().getLocalUIClientName());      }      return realPlug.getConfigHelpText(setting);    }  }  return "";}  }
class C{  public static SecuritySpecModel deserializeSpecFromFile(String androidProjectRootPath){  SecuritySpecModel spec=null;  String fileName=androidProjectRootPath + File.separator + Project.OUTPUT_DIR+ File.separator+ SECURITY_SPEC_SERIAL_FILE_NAME;  File file=new File(fileName);  if (file.exists()) {    try {      ObjectInputStream ois=new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)));      try {        Object obj=ois.readObject();        if (obj instanceof SecuritySpecModel) {          spec=(SecuritySpecModel)obj;        }      }  finally {        ois.close();      }    } catch (    Exception ex) {      ex.printStackTrace();    }  }  return spec;}  }
class C{  protected void arrangeGrid(Container parent){  ArrangeGrid(parent);}  }
class C{  protected String doIt() throws java.lang.Exception {  log.info("");  long start=System.currentTimeMillis();  if (m_client.getSMTPHost() == null || m_client.getSMTPHost().length() == 0)   throw new Exception("No Client SMTP Info");  if (m_client.getRequestEMail() == null)   throw new Exception("No Client Request User");  if (m_A_Asset_ID != 0) {    String msg=deliverIt(m_A_Asset_ID);    addLog(m_A_Asset_ID,null,null,msg);    return msg;  }  StringBuffer sql=new StringBuffer("SELECT A_Asset_ID, GuaranteeDate " + "FROM A_Asset a" + " INNER JOIN M_Product p ON (a.M_Product_ID=p.M_Product_ID) "+ "WHERE ");  if (m_A_Asset_Group_ID != 0)   sql.append("a.A_Asset_Group_ID=").append(m_A_Asset_Group_ID).append(" AND ");  if (m_M_Product_ID != 0)   sql.append("p.M_Product_ID=").append(m_M_Product_ID).append(" AND ");  if (m_C_BPartner_ID != 0)   sql.append("a.C_BPartner_ID=").append(m_C_BPartner_ID).append(" AND ");  String s=sql.toString();  if (s.endsWith(" WHERE "))   throw new Exception("@RestrictSelection@");  if (m_NoGuarantee_MailText_ID == 0) {    sql.append("TRUNC(GuaranteeDate, 'DD') >= ").append(DB.TO_DATE(m_GuaranteeDate,true));    s=sql.toString();  }  if (s.endsWith(" AND "))   s=sql.substring(0,sql.length() - 5);  Statement stmt=null;  int count=0;  int errors=0;  int reminders=0;  ResultSet rs=null;  try {    stmt=DB.createStatement();    rs=stmt.executeQuery(s);    while (rs.next()) {      int A_Asset_ID=rs.getInt(1);      Timestamp GuaranteeDate=rs.getTimestamp(2);      if (GuaranteeDate != null && GuaranteeDate.before(m_GuaranteeDate)) {        if (m_NoGuarantee_MailText_ID != 0) {          sendNoGuaranteeMail(A_Asset_ID,m_NoGuarantee_MailText_ID,get_TrxName());          reminders++;        }      } else {        String msg=deliverIt(A_Asset_ID);        addLog(A_Asset_ID,null,null,msg);        if (msg.startsWith("** "))         errors++; else         count++;      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,s,e);  } finally {    DB.close(rs,stmt);    rs=null;    stmt=null;  }  log.info("Count=" + count + ", Errors="+ errors+ ", Reminder="+ reminders+ " - "+ (System.currentTimeMillis() - start)+ "ms");  return "@Sent@=" + count + " - @Errors@="+ errors;}  }
class C{  public void testSetF21(){  boolean f21=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF21(f21);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F21-F28 since no command station defined");}  }
class C{  final public void bind(IBindingSet bs,ISPO spo){  if (p.isVar()) {    bs.set((IVariable)p,new Constant<IV>(spo.p()));  }  if (o.isVar()) {    bs.set((IVariable)o,new Constant<IV>(spo.o()));  }}  }
class C{  public long numBits(){  if (n == 0)   return 0;  return (marker != null ? rank.numBits() + marker.length() : 0) + (data != null ? data.size64() : 0) * width + seed.length * (long)Long.SIZE + offset.length * (long)Integer.SIZE;}  }
class C{  @Override public void initializeConnection() throws QueryException {  super.initializeConnection();  this.currentProtocol=null;  reconnectFailedConnection(new SearchFilter(true,false));  resetMasterFailoverData();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (semPm == null) {    throw new NullPointerException();  }  if (variableNodes == null) {    throw new NullPointerException();  }  if (measuredNodes == null) {    throw new NullPointerException();  }  if (variableMeans == null) {    throw new NullPointerException();  }  if (freeParameters == null) {    throw new NullPointerException();  }  if (freeMappings == null) {    throw new NullPointerException();  }  if (fixedParameters == null) {    throw new NullPointerException();  }  if (fixedMappings == null) {    throw new NullPointerException();  }  if (meanParameters == null) {    meanParameters=initMeanParameters();  }  if (sampleSize < 0) {    throw new IllegalArgumentException("Sample size out of range: " + sampleSize);  }  if (getParams() == null) {    setParams(new Parameters());  }  if (distributions == null) {    distributions=new HashMap<>();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, j, n;  int numRecs;  ShapeType shapeType;  double distanceTolerance=0;  BoundingBox[] boundingBoxes;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  distanceTolerance=Double.parseDouble(args[2]);  if (distanceTolerance < 0) {    showFeedback("The buffer size has not been set properly.");    return;  }  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYLINE && shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only operates on shapefiles of a POLYLINE or POLYGON shape type.");      return;    }    numRecs=input.getNumberOfRecords();    boundingBoxes=new BoundingBox[numRecs];    AttributeTable table=input.getAttributeTable();    ShapeFile output=new ShapeFile(outputFile,shapeType,table.getAllFields());    output.setProjectionStringFromOtherShapefile(input);    ArrayList<com.vividsolutions.jts.geom.Geometry> geoms=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry[] recJTS=null;    int oldProgress=-1;    n=0;    for (    ShapeFileRecord record : input.records) {      int recNum=record.getRecordNumber();      double[][] points=record.getGeometry().getPoints();      double minX=Double.POSITIVE_INFINITY;      double maxX=Double.NEGATIVE_INFINITY;      double minY=Double.POSITIVE_INFINITY;      double maxY=Double.NEGATIVE_INFINITY;      for (i=0; i < points.length; i++) {        if (points[i][0] < minX) {          minX=points[i][0];        }        if (points[i][0] > maxX) {          maxX=points[i][0];        }        if (points[i][1] < minY) {          minY=points[i][1];        }        if (points[i][1] > maxY) {          maxY=points[i][1];        }      }      boundingBoxes[recNum - 1]=new BoundingBox(minX,minY,maxX,maxY);      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTS=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTS.length; a++) {          recJTS[a].setUserData(recNum);          geoms.add(recJTS[a]);        }      }      progress=(int)(100f * n / (numRecs - 1));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }      if (cancelOp) {        cancelOperation();        return;      }      n++;    }    n=0;    oldProgress=-1;    int numGeoms=geoms.size();    int recNum1, recNum2;    for (i=0; i < numGeoms; i++) {      recNum1=(int)geoms.get(i).getUserData() - 1;      for (j=i + 1; j < numGeoms; j++) {        recNum2=(int)geoms.get(j).getUserData() - 1;        if (boundingBoxes[recNum1].near(boundingBoxes[recNum2],distanceTolerance * 10)) {          com.vividsolutions.jts.geom.Geometry[] geomsResult=GeometrySnapper.snap(geoms.get(i),geoms.get(j),distanceTolerance);          geomsResult[0].setUserData(recNum1 + 1);          geomsResult[1].setUserData(recNum2 + 1);          geoms.set(i,geomsResult[0]);          geoms.set(j,geomsResult[1]);        }      }      progress=(int)(100f * n / (numGeoms - 1));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }      if (cancelOp) {        cancelOperation();        return;      }      n++;    }    n=0;    oldProgress=-1;    for (    com.vividsolutions.jts.geom.Geometry g : geoms) {      int recNum=(int)g.getUserData();      if (g instanceof com.vividsolutions.jts.geom.Polygon && shapeType.getBaseType() == ShapeType.POLYGON) {        com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)g;        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts=new int[p.getNumInteriorRing() + 1];        Coordinate[] coords=p.getExteriorRing().getCoordinates();        if (Topology.isClockwisePolygon(coords)) {          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }        } else {          for (i=coords.length - 1; i >= 0; i--) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }        }        for (int b=0; b < p.getNumInteriorRing(); b++) {          parts[b + 1]=pnts.size();          coords=p.getInteriorRingN(b).getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Geometry wbGeometry;        if (shapeType == ShapeType.POLYGON) {          wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());        } else         if (shapeType == ShapeType.POLYGONZ) {          PolygonZ pz=(PolygonZ)input.getRecord(recNum).getGeometry();          double[] zArray=pz.getzArray();          double[] mArray=pz.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolygonZ(parts,pl.getPointsArray(),zArray,mArray);        } else {          PolygonM pm=(PolygonM)input.getRecord(recNum).getGeometry();          double[] mArray=pm.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolygonM(parts,pl.getPointsArray(),mArray);        }        output.addRecord(wbGeometry,table.getRecord(recNum - 1));      } else       if (g instanceof com.vividsolutions.jts.geom.LineString && shapeType.getBaseType() == ShapeType.POLYLINE) {        com.vividsolutions.jts.geom.LineString p=(com.vividsolutions.jts.geom.LineString)g;        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts={0};        Coordinate[] coords=p.getCoordinates();        for (i=0; i < coords.length; i++) {          pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Geometry wbGeometry;        if (shapeType == ShapeType.POLYLINE) {          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());        } else         if (shapeType == ShapeType.POLYLINEZ) {          PolyLineZ pz=(PolyLineZ)input.getRecord(recNum).getGeometry();          double[] zArray=pz.getzArray();          double[] mArray=pz.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLineZ(parts,pl.getPointsArray(),zArray,mArray);        } else {          PolyLineM pm=(PolyLineM)input.getRecord(recNum).getGeometry();          double[] mArray=pm.getmArray();          wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLineM(parts,pl.getPointsArray(),mArray);        }        output.addRecord(wbGeometry,table.getRecord(recNum - 1));      }      progress=(int)(100f * n / (numGeoms - 1));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }      if (cancelOp) {        cancelOperation();        return;      }      n++;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @NotNull public static VirtualFile copyFile(Object requestor,@NotNull VirtualFile file,@NotNull VirtualFile toDir,@NotNull @NonNls String newName) throws IOException {  final VirtualFile newChild=toDir.createChildData(requestor,newName);  newChild.setBinaryContent(file.contentsToByteArray());  return newChild;}  }
class C{  public static IKeyBuilder newInstance(int capacity,CollatorEnum collatorChoice,Locale locale,Object strength,DecompositionEnum mode){  if (collatorChoice == CollatorEnum.ASCII) {    return new KeyBuilder(capacity);  }  if (locale == null) {    locale=Locale.getDefault();    if (log.isInfoEnabled())     log.info("Using default locale: " + locale.getDisplayName());  }  final boolean icu=collatorChoice == CollatorEnum.ICU;  if (icu && !DefaultKeyBuilderFactory.isICUAvailable()) {    throw new UnsupportedOperationException(DefaultKeyBuilderFactory.ICU_NOT_AVAILABLE);  }  final byte[] buf=createBuffer(capacity);  final int len=0;switch (collatorChoice) {case ICU:    return new KeyBuilder(new ICUSortKeyGenerator(locale,strength,mode),len,buf);case JDK:  return new KeyBuilder(new JDKSortKeyGenerator(locale,strength,mode),len,buf);default :throw new UnsupportedOperationException("Collator not supported: " + collatorChoice);}}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double cutoffsInSD=3;  int numOutputBins=1024;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  cutoffsInSD=Double.parseDouble(args[2]);  numOutputBins=Integer.parseInt(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells=0;    int i=0;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    int numBins=50000;    double minValue=inputFile.getMinimumValue();    double maxValue=inputFile.getMaximumValue();    double binSize=(maxValue - minValue) / numBins;    long[] histogram=new long[numBins];    int binNum;    int numBinsLessOne=numBins - 1;    double[] data;    updateProgress("Loop 1 of 3: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numCells++;          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3: ",(int)progress);    }    updateProgress("Loop 2 of 3: ",0);    double[] cdf=new double[numBins];    cdf[0]=histogram[0];    for (i=1; i < numBins; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    histogram=null;    for (i=0; i < numBins; i++) {      cdf[i]=cdf[i] / numCells;    }    double[] referenceCDF=new double[numOutputBins];    double rootOf2Pi=Math.sqrt(2 * Math.PI);    double exponent;    double x;    for (i=0; i < numOutputBins; i++) {      x=(double)i / (numOutputBins - 1) * 2 * cutoffsInSD - cutoffsInSD;      exponent=-x * x / 2;      referenceCDF[i]=Math.pow(Math.E,exponent) / rootOf2Pi;    }    for (i=1; i < numOutputBins; i++) {      referenceCDF[i]+=referenceCDF[i - 1];    }    double totalFrequency=referenceCDF[numOutputBins - 1];    for (i=0; i < numOutputBins; i++) {      referenceCDF[i]=referenceCDF[i] / totalFrequency;    }    int[] startingVals=new int[11];    double pVal=0;    for (i=0; i < numOutputBins; i++) {      pVal=referenceCDF[i];      if (pVal < 0.1) {        startingVals[1]=i;      }      if (pVal < 0.2) {        startingVals[2]=i;      }      if (pVal < 0.3) {        startingVals[3]=i;      }      if (pVal < 0.4) {        startingVals[4]=i;      }      if (pVal < 0.5) {        startingVals[5]=i;      }      if (pVal < 0.6) {        startingVals[6]=i;      }      if (pVal < 0.7) {        startingVals[7]=i;      }      if (pVal < 0.8) {        startingVals[8]=i;      }      if (pVal < 0.9) {        startingVals[9]=i;      }      if (pVal <= 1) {        startingVals[10]=i;      }    }    updateProgress("Loop 3 of 3: ",0);    int j=0;    double xVal=0;    double x1, x2, p1, p2;    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          pVal=cdf[binNum];          j=(int)(Math.floor(pVal * 10));          for (i=startingVals[j]; i < numOutputBins; i++) {            if (referenceCDF[i] > pVal) {              if (i > 0) {                xVal=i - 1;              } else {                xVal=i;              }              break;            } else             if (referenceCDF[i] == pVal) {              xVal=i;            }          }          outputFile.setValue(row,col,xVal);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @ObjectiveCName("sendStickerWithPeer:withSticker:") public void sendSticker(Peer peer,Sticker sticker){  modules.getMessagesModule().sendSticker(peer,sticker);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", namespace: ");  result.append(namespace);  result.append(", version: ");  result.append(version);  result.append(", description: ");  result.append(description);  result.append(", displayname: ");  result.append(displayname);  result.append(", category: ");  result.append(category);  result.append(')');  return result.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public DoubleMatrix1D mult(DoubleMatrix2D A,DoubleMatrix1D y){  return A.zMult(y,null);}  }
class C{  private double calculateMA(String calcType,LinkedList<Double> yyValues,LinkedList<Long> volValues,Double sum){  double ma=0;  if (CalculationType.LINEAR.equals(calcType)) {    ma=sum / getLength();  } else   if (CalculationType.EXPONENTIAL.equals(calcType)) {    if (multiplyer == 0) {      ma=sum / getLength();      multiplyer=2 / (getLength() + 1.0d);    } else {      ma=((yyValues.getFirst() - yyValues.get(1)) * multiplyer) + yyValues.get(1);    }    yyValues.removeFirst();    yyValues.addFirst(ma);  } else   if (CalculationType.WEIGHTED.equals(calcType)) {    double sumYY=0;    int count=0;    for (int i=yyValues.size(); i > 0; i--) {      count=count + (getLength() + 1 - i);      sumYY=sumYY + (yyValues.get(i - 1) * (getLength() + 1 - i));    }    ma=sumYY / count;  } else   if (CalculationType.WEIGHTED_VOLUME.equals(calcType)) {    double sumYY=0;    double count=0;    for (int i=yyValues.size(); i > 0; i--) {      count=count + ((getLength() + 1 - i) * volValues.get(i - 1));      sumYY=sumYY + (yyValues.get(i - 1) * volValues.get(i - 1) * (getLength() + 1 - i));    }    ma=sumYY / count;  }  return ma;}  }
class C{  private JasperReport compileReport(File reportFile,File jasperFile){  JasperReport res=null;  try {    String compiere_home=(String)System.getProperty("COMPIERE_HOME");    System.setProperty("jasper.reports.compile.class.path",compiere_home + "/lib/reporttools.jar;" + compiere_home+ "/lib/Compiere.jar");    JasperCompileManager.compileReportToFile(reportFile.getAbsolutePath(),jasperFile.getAbsolutePath());    jasperFile.setLastModified(reportFile.lastModified());    res=(JasperReport)JRLoader.loadObject(jasperFile.getAbsolutePath());  } catch (  JRException e) {    log.info("ReportInfo.compileReport- " + e);    this.errorMsg.add("ReportInfo.compileReport- " + e.getMessage());    this.hasError=true;  }  return res;}  }
class C{  public boolean canRedo(){  return alive && !hasBeenDone;}  }
class C{  public void testFollowersSelectionStrategy() throws Throwable {  List<Address> results=(List<Address>)ServerSelectionStrategies.FOLLOWERS.selectConnections(new Address("localhost",5000),servers);  assertEquals(results.size(),servers.size() - 1);  assertFalse(results.contains(new Address("localhost",5000)));}  }
class C{  private static <T>SortedSet<T> cast(Iterable<T> iterable){  return (SortedSet<T>)iterable;}  }
class C{  private Corners corner(){  return (Corners)getRequiredProperty(Annotations.OP);}  }
class C{  public boolean isFilled(){  return filled;}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple12<Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4,final WindowSpecification<T> specification5,final WindowSpecification<T> specification6,final WindowSpecification<T> specification7,final WindowSpecification<T> specification8,final WindowSpecification<T> specification9,final WindowSpecification<T> specification10,final WindowSpecification<T> specification11,final WindowSpecification<T> specification12){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4,specification5,specification6,specification7,specification8,specification9,specification10,specification11,specification12));}  }
class C{  protected Path recreateSrc(){  src=null;  return createSrc();}  }
class C{  public Payment(ResultSet result) throws SQLException {  id=result.getInt("id");  channelIdReceiver=result.getInt("channel_id_receiver");  channelIdSender=result.getInt("channel_id_sender");  amount=result.getLong("amount");  fee=result.getLong("fee");  phaseSender=result.getInt("phase_sender");  phaseReceiver=result.getInt("phase_receiver");  includeInReceiverChannel=Tools.intToBool(result.getInt("include_in_receiver_channel"));  includeInSenderChannel=Tools.intToBool(result.getInt("include_in_sender_channel"));  includeInReceiverChannelTemp=Tools.intToBool(result.getInt("include_in_receiver_channel_temp"));  includeInSenderChannelTemp=Tools.intToBool(result.getInt("include_in_sender_channel_temp"));  secretHash=result.getBytes("secret_hash");  secret=result.getBytes("secret");  timestampAddedReceiver=result.getInt("timestamp_added_receiver");  timestampAddedSender=result.getInt("timestamp_added_sender");  timestampSettledReceiver=result.getInt("timestamp_settled_receiver");  timestampSettledSender=result.getInt("timestamp_settled_sender");  versionAddedReceiver=result.getInt("version_added_receiver");  versionAddedSender=result.getInt("version_added_sender");  versionSettledReceiver=result.getInt("version_settled_receiver");  versionSettledSender=result.getInt("version_settled_sender");}  }
class C{  public static boolean isEnter(KeyEvent event){  return isActionUp(event) && (event.getKeyCode() == KeyEvent.KEYCODE_ENTER || event.getKeyCode() == KeyEvent.KEYCODE_NUMPAD_ENTER);}  }
class C{  public static ArrayList<ClassLabel> allClassLabels(MultipleObjectsBundle bundle,int col){  HashSet<ClassLabel> labels=new HashSet<ClassLabel>();  for (int i=0, l=bundle.dataLength(); i < l; ++i) {    Object o=bundle.data(i,col);    if (o == null || !(o instanceof ClassLabel)) {      continue;    }    labels.add((ClassLabel)o);  }  ArrayList<ClassLabel> ret=new ArrayList<>(labels);  Collections.sort(ret);  return ret;}  }
class C{  @SuppressWarnings("rawtypes") public static boolean qsort(Comparable[] ar,int left,int right){  if (right <= left) {    return false;  }  int pivotIndex=selectPivotIndex(ar,left,right);  pivotIndex=partition(ar,left,right,pivotIndex);  qsort(ar,left,pivotIndex - 1);  qsort(ar,pivotIndex + 1,right);  return true;}  }
class C{  public void add(final ClassFilterAnnotationRegexp regexp){  myClassFilterAnnotationRegexpList.add(regexp.getRegexp(getProject()));}  }
class C{  public static void logQueryResults(Service service,Collection<String> documentLinks){  String summary="Query from service " + service.getSelfLink() + " returned "+ Integer.toString(documentLinks.size())+ " results";  for (  String documentLink : documentLinks) {    summary+=System.lineSeparator() + "  - " + documentLink;  }  ServiceUtils.logInfo(service,summary);}  }
class C{  public static String[] breakUp(String s,int columns){  Vector<String> result;  String line;  BreakIterator boundary;  int boundaryStart;  int boundaryEnd;  String word;  String punctuation;  int i;  String[] lines;  result=new Vector<String>();  punctuation=" .,;:!?'\"";  lines=s.split("\n");  for (i=0; i < lines.length; i++) {    boundary=BreakIterator.getWordInstance();    boundary.setText(lines[i]);    boundaryStart=boundary.first();    boundaryEnd=boundary.next();    line="";    while (boundaryEnd != BreakIterator.DONE) {      word=lines[i].substring(boundaryStart,boundaryEnd);      if (line.length() >= columns) {        if (word.length() == 1) {          if (punctuation.indexOf(word.charAt(0)) > -1) {            line+=word;            word="";          }        }        result.add(line);        line="";      }      line+=word;      boundaryStart=boundaryEnd;      boundaryEnd=boundary.next();    }    if (line.length() > 0)     result.add(line);  }  return result.toArray(new String[result.size()]);}  }
class C{  public boolean interiorContains(R1Interval y){  if (y.isEmpty()) {    return true;  }  return y.lo() > lo() && y.hi() < hi();}  }
class C{  private static String normalizeKey(String key){  return key.toLowerCase(Locale.US).replace('_','.');}  }
class C{  private void doFind(){  if (findAction != null) {    fireAction(findAction);  }  doPopup();}  }
class C{  public VolumeItem(RegularTimePeriod period,Long volume,boolean side){  super(period,new Volume(volume,side));}  }
class C{  public int execThreads(){  return mExecThreads;}  }
class C{  private void present(){  glUseProgram(quadProgram);  glBindVertexArray(vao);  glBindTexture(GL_TEXTURE_2D,raytraceTexture);  glBindSampler(0,this.sampler);  glDrawArrays(GL_TRIANGLES,0,6);  glBindSampler(0,0);  glBindTexture(GL_TEXTURE_2D,0);  glBindVertexArray(0);  glUseProgram(0);}  }
class C{  public void clickAbout(View view){  AboutBox.display(this);}  }
class C{  public static TableName parse(String defaultSchema,String s){  String[] parts=Strings.parseQualifiedName(s,2);  return new TableName(parts[0].isEmpty() ? defaultSchema : parts[0],parts[1]);}  }
class C{  public void testCompareToZeroNeg(){  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int bSign=-1;  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(1,aNumber.compareTo(bNumber));}  }
class C{  @Override public E put(Integer key,E value){  return put(key.intValue(),value);}  }
class C{  public final void writeInt(int v) throws IOException {  write((v >>> 24) & 0xFF);  write((v >>> 16) & 0xFF);  write((v >>> 8) & 0xFF);  write((v) & 0xFF);}  }
class C{  private void addNativeExpressAds(){  for (int i=0; i <= mRecyclerViewItems.size(); i+=ITEMS_PER_AD) {    final NativeExpressAdView adView=new NativeExpressAdView(MainActivity.this);    mRecyclerViewItems.add(i,adView);  }}  }
class C{  public static String combinePaths(String... items){  if (items.length == 0) {    return "";  }  StringBuilder sb=new StringBuilder(items[0]);  for (int i=1; i < items.length; i++) {    if (!items[i - 1].endsWith("/")) {      sb.append("/");    }    if (items[i].startsWith("/")) {      sb.append(items[i].substring(1));    } else {      sb.append(items[i]);    }  }  return sb.toString();}  }
class C{  public String id(){  return id;}  }
class C{  public float x(){  return this.m[0];}  }
class C{  public static final long free(){  return getStrategy().free();}  }
class C{  public boolean isBorderPainted(){  return paintBorder;}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  private FIRFilterSpecification(FIRLinearPhaseFilterType type,int order,int gridDensity){  mRemezFilterType=type;  mOrder=order;  mGridDensity=gridDensity;}  }
class C{  @Override public double[] projectDataToScaledSpace(NumberVector data){  final int dim=data.getDimensionality();  double[] vec=new double[dim];  for (int d=0; d < dim; d++) {    vec[d]=scales[d].getScaled(data.doubleValue(d));  }  return vec;}  }
class C{  public DatagramPacket multicastReceive() throws IOException {  byte[] buf=new byte[1024];  DatagramPacket dp=new DatagramPacket(buf,buf.length);  multicastSocket.receive(dp);  return dp;}  }
class C{  @SuppressWarnings("unchecked") protected T parseAndGetFirstType(CharSequence text) throws Exception {  return (T)parseHelper.parse(text).getModule().getTopLevelTypes().get(0);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof MoneyFlowIndexDataset)) {    return false;  }  MoneyFlowIndexDataset that=(MoneyFlowIndexDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public static <A>FutureWTValue<A> fromAnyM(final AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  public static int gluProject(double objX,double objY,double objZ,double[] model,int modelOffset,double[] project,int projectOffset,int[] view,int viewOffset,double[] win,int winOffset){  double[] scratch=sScratch;synchronized (scratch) {    final int M_OFFSET=0;    final int V_OFFSET=16;    final int V2_OFFSET=20;    Matrix.multiplyMM(scratch,M_OFFSET,project,projectOffset,model,modelOffset);    scratch[V_OFFSET + 0]=objX;    scratch[V_OFFSET + 1]=objY;    scratch[V_OFFSET + 2]=objZ;    scratch[V_OFFSET + 3]=1.0;    Matrix.multiplyMV(scratch,V2_OFFSET,scratch,M_OFFSET,scratch,V_OFFSET);    double w=scratch[V2_OFFSET + 3];    if (w == 0.0) {      return GL10.GL_FALSE;    }    double rw=1.0 / w;    win[winOffset]=view[viewOffset] + view[viewOffset + 2] * (scratch[V2_OFFSET + 0] * rw + 1.0) * 0.5;    win[winOffset + 1]=view[viewOffset + 1] + view[viewOffset + 3] * (scratch[V2_OFFSET + 1] * rw + 1.0) * 0.5;    win[winOffset + 2]=(scratch[V2_OFFSET + 2] * rw + 1.0) * 0.5;  }  return GL10.GL_TRUE;}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  public void popStack(){  stackPointer--;}  }
class C{  public boolean contains(float val){  return index(val) >= 0;}  }
class C{  public static String convertByte2HexString(byte b){  char u8=convertByte2Uint8(b);  return Integer.toHexString(u8);}  }
class C{  @SuppressWarnings("unchecked") private void processFile(File file,ClassLoader ldr,int prefixLen,Collection<Class<? extends Message>> col) throws Exception {  assert file != null;  assert ldr != null;  assert prefixLen > 0;  assert col != null;  if (!file.exists())   throw new FileNotFoundException("File doesn't exist: " + file);  if (file.isDirectory()) {    for (    File f : file.listFiles())     processFile(f,ldr,prefixLen,col);  } else {    assert file.isFile();    String path=file.getPath();    if (path.endsWith(".class")) {      String clsName=path.substring(prefixLen,path.length() - 6).replace(File.separatorChar,'.');      Class<?> cls=Class.forName(clsName,false,ldr);      if (cls.getDeclaringClass() == null && cls.getEnclosingClass() == null && !BASE_CLS.equals(cls) && BASE_CLS.isAssignableFrom(cls))       col.add((Class<? extends Message>)cls);    }  }}  }
class C{  @Override public void error(SAXParseException exception) throws SAXException {  try {    this.reportError(exception,XMLParserSettings.FAIL_ON_SAX_NON_FATAL_ERRORS);  } catch (  RDFParseException rdfpe) {    throw new SAXException(rdfpe);  }}  }
class C{  protected void initTable() throws BadElementException {  this.tablePDF=new Table(this.model.getNumberOfColumns());  this.tablePDF.setCellsFitPage(true);  this.tablePDF.setWidth(100);  this.tablePDF.setPadding(2);  this.tablePDF.setSpacing(0);  this.smallFont=FontFactory.getFont(FontFactory.HELVETICA,7,Font.NORMAL,new Color(0,0,0));}  }
class C{  public boolean canRebase(ReviewDb db) throws OrmException {  return (isOwner() || getRefControl().canSubmit(isOwner()) || getRefControl().canRebase()) && !isPatchSetLocked(db);}  }
class C{  public static Matrix fromCovarianceOfVertices(BufferWrapper coordinates,int stride){  if (coordinates == null) {    String msg=Logging.getMessage("nullValue.CoordinatesAreNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (stride < 3) {    String msg=Logging.getMessage("generic.StrideIsInvalid");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 mean=Vec4.computeAveragePoint3(coordinates,stride);  if (mean == null)   return null;  int count=0;  double c11=0d;  double c22=0d;  double c33=0d;  double c12=0d;  double c13=0d;  double c23=0d;  for (int i=0; i <= coordinates.length() - stride; i+=stride) {    double x=coordinates.getDouble(i);    double y=coordinates.getDouble(i + 1);    double z=coordinates.getDouble(i + 2);    count++;    c11+=(x - mean.x) * (x - mean.x);    c22+=(y - mean.y) * (y - mean.y);    c33+=(z - mean.z) * (z - mean.z);    c12+=(x - mean.x) * (y - mean.y);    c13+=(x - mean.x) * (z - mean.z);    c23+=(y - mean.y) * (z - mean.z);  }  if (count == 0)   return null;  return new Matrix(c11 / (double)count,c12 / (double)count,c13 / (double)count,0d,c12 / (double)count,c22 / (double)count,c23 / (double)count,0d,c13 / (double)count,c23 / (double)count,c33 / (double)count,0d,0d,0d,0d,0d);}  }
class C{  public void coreEventOnLocalWorkspaceScan(final WorkspaceEvent e){  if (e.getWorkspaceSource() == WorkspaceEventSource.EXTERNAL) {    refresh();  }}  }
class C{  public static Date dateOf(int hour,int minute,int second,int dayOfMonth,int month,int year){  validateSecond(second);  validateMinute(minute);  validateHour(hour);  validateDayOfMonth(dayOfMonth);  validateMonth(month);  validateYear(year);  Date date=new Date();  Calendar c=Calendar.getInstance();  c.setTime(date);  c.set(Calendar.YEAR,year);  c.set(Calendar.MONTH,month - 1);  c.set(Calendar.DAY_OF_MONTH,dayOfMonth);  c.set(Calendar.HOUR_OF_DAY,hour);  c.set(Calendar.MINUTE,minute);  c.set(Calendar.SECOND,second);  c.set(Calendar.MILLISECOND,0);  return c.getTime();}  }
class C{  private static void readRequest(BufferedReader in) throws IOException {  String line=null;  do {    line=in.readLine();    System.out.println("Server received: " + line);  } while ((line.length() != 0) && (line.charAt(0) != '\r') && (line.charAt(0) != '\n'));}  }
class C{  @Override public CloseableReference<Bitmap> process(Bitmap sourceBitmap,PlatformBitmapFactory bitmapFactory){  CloseableReference<Bitmap> destBitmapRef=bitmapFactory.createBitmap(sourceBitmap.getWidth(),sourceBitmap.getHeight(),sourceBitmap.getConfig());  try {    process(destBitmapRef.get(),sourceBitmap);    return CloseableReference.cloneOrNull(destBitmapRef);  }  finally {    CloseableReference.closeSafely(destBitmapRef);  }}  }
class C{  private void copyToArraysPartial(final int minX,final int minY,final int maxX,final int maxY){  colorExtracted=pdf_data.isColorExtracted();  final int count=pdf_data.getRawTextElementCount();  final int[] fontSize=new int[count];  final int[] writingMode=new int[count];  final float[] spaceWidth=new float[count];  final StringBuilder[] content=new StringBuilder[count];  final int[] textLength=new int[count];  final float[] f_x1=new float[count];  final String[] f_colorTag=new String[count];  final float[] f_x2=new float[count];  final float[] f_y1=new float[count];  final float[] f_y2=new float[count];  float x1, x2, y1, y2;  int currentPoint=0;  for (int i=0; i < count; i++) {    x1=pdf_data.f_x1[i];    x2=pdf_data.f_x2[i];    y1=pdf_data.f_y1[i];    y2=pdf_data.f_y2[i];    final int mode=pdf_data.f_writingMode[i];    boolean accepted=false;    float height;switch (mode) {case PdfData.HORIZONTAL_LEFT_TO_RIGHT:case PdfData.HORIZONTAL_RIGHT_TO_LEFT:      height=y1 - y2;    if ((((minX < x1 && x1 < maxX) || (minX < x2 && x2 < maxX)) || ((x1 < minX && minX < x2) || (x1 < maxX && maxX < x2))) && (minY < y2 + (height / 4) && y2 + (height * 0.75) < maxY)) {      accepted=true;    }  break;case PdfData.VERTICAL_BOTTOM_TO_TOP:case PdfData.VERTICAL_TOP_TO_BOTTOM:height=x2 - x1;if ((((minY < y1 && y1 < maxY) || (minY < y2 && y2 < maxY)) || ((y2 < minY && minY < y1) || (y2 < maxY && maxY < y1))) && (minX < x1 + (height / 4) && x1 + (height * 0.75) < maxX)) {accepted=true;}break;}if (accepted) {content[currentPoint]=new StringBuilder(pdf_data.contents[i]);fontSize[currentPoint]=pdf_data.f_end_font_size[i];writingMode[currentPoint]=pdf_data.f_writingMode[i];f_x1[currentPoint]=pdf_data.f_x1[i];f_colorTag[currentPoint]=pdf_data.colorTag[i];f_x2[currentPoint]=pdf_data.f_x2[i];f_y1[currentPoint]=pdf_data.f_y1[i];f_y2[currentPoint]=pdf_data.f_y2[i];spaceWidth[currentPoint]=pdf_data.space_width[i];textLength[currentPoint]=pdf_data.text_length[i];StringBuilder startTags=new StringBuilder(content[currentPoint].toString().substring(0,content[currentPoint].toString().indexOf(MARKER)));final String contentText=content[currentPoint].toString().substring(content[currentPoint].toString().indexOf(MARKER),content[currentPoint].toString().indexOf('<',content[currentPoint].toString().lastIndexOf(MARKER)));String endTags=content[currentPoint].toString().substring(content[currentPoint].toString().lastIndexOf(MARKER));endTags=endTags.substring(endTags.indexOf('<'));final StringTokenizer tokenizer=new StringTokenizer(contentText,MARKER);boolean setX1=true;float width=0;while (tokenizer.hasMoreTokens()) {String token=tokenizer.nextToken();final float xCoord=(Float.parseFloat(token));token=tokenizer.nextToken();width=Float.parseFloat(token);token=tokenizer.nextToken();final String character=token;if (setX1) {if ((mode == PdfData.HORIZONTAL_LEFT_TO_RIGHT || mode == PdfData.HORIZONTAL_RIGHT_TO_LEFT)) {f_x1[currentPoint]=xCoord;} else {f_y2[currentPoint]=xCoord;}setX1=false;}if ((mode == PdfData.HORIZONTAL_LEFT_TO_RIGHT || mode == PdfData.HORIZONTAL_RIGHT_TO_LEFT)) {f_x2[currentPoint]=xCoord;} else {f_y1[currentPoint]=xCoord;}boolean storeValues=false;if ((mode == PdfData.HORIZONTAL_LEFT_TO_RIGHT || mode == PdfData.HORIZONTAL_RIGHT_TO_LEFT)) {if (minX < xCoord && (xCoord + width) < maxX) {storeValues=true;}} else {if (minY < xCoord && (xCoord + width) < maxY) {storeValues=true;}}if (storeValues) {startTags.append(MARKER);startTags.append(xCoord);startTags.append(MARKER);startTags.append(width);startTags.append(MARKER);startTags.append(character);}}content[currentPoint]=new StringBuilder(startTags.append(endTags).toString());if ((mode == PdfData.HORIZONTAL_LEFT_TO_RIGHT || mode == PdfData.HORIZONTAL_RIGHT_TO_LEFT)) {f_x2[currentPoint]+=width;} else {f_y1[currentPoint]+=width;}currentPoint++;}}this.isUsed=new boolean[currentPoint];this.fontSize=new int[currentPoint];this.writingMode=new int[currentPoint];this.spaceWidth=new float[currentPoint];this.content=new StringBuilder[currentPoint];this.textLength=new int[currentPoint];this.f_x1=new float[currentPoint];this.f_colorTag=new String[currentPoint];this.f_x2=new float[currentPoint];this.f_y1=new float[currentPoint];this.f_y2=new float[currentPoint];for (int i=0; i != currentPoint; i++) {this.fontSize[i]=fontSize[i];this.writingMode[i]=writingMode[i];this.spaceWidth[i]=spaceWidth[i];this.content[i]=content[i];this.textLength[i]=textLength[i];this.f_x1[i]=f_x1[i];this.f_colorTag[i]=f_colorTag[i];this.f_x2[i]=f_x2[i];this.f_y1[i]=f_y1[i];this.f_y2[i]=f_y2[i];}}  }
class C{  @Override public int hashCode(){  int result=193;  result=37 * result + HashUtilities.hashCodeForPaint(this.paint);  result=37 * result + this.gradientPaintTransformer.hashCode();  return result;}  }
class C{  public NecronomiconInfusionRitual(String unlocalizedName,int bookType,float requiredEnergy,ItemStack item,Object sacrifice,Object... offerings){  this(unlocalizedName,bookType,-1,requiredEnergy,item,sacrifice,offerings);}  }
class C{  public void writeInt(int i) throws IOException {  this.temp[0]=(byte)((i >>> 24) & 0xff);  this.temp[1]=(byte)((i >>> 16) & 0xff);  this.temp[2]=(byte)((i >>> 8) & 0xff);  this.temp[3]=(byte)(i & 0xff);  this.write(this.temp,0,4);}  }
class C{  Version readVersion() throws FormatException {  if (parsedVersion != null) {    return parsedVersion;  }  int dimension=bitMatrix.getHeight();  int provisionalVersion=(dimension - 17) / 4;  if (provisionalVersion <= 6) {    return Version.getVersionForNumber(provisionalVersion);  }  int versionBits=0;  int ijMin=dimension - 11;  for (int j=5; j >= 0; j--) {    for (int i=dimension - 9; i >= ijMin; i--) {      versionBits=copyBit(i,j,versionBits);    }  }  Version theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  versionBits=0;  for (int i=5; i >= 0; i--) {    for (int j=dimension - 9; j >= ijMin; j--) {      versionBits=copyBit(i,j,versionBits);    }  }  theParsedVersion=Version.decodeVersionInformation(versionBits);  if (theParsedVersion != null && theParsedVersion.getDimensionForVersion() == dimension) {    parsedVersion=theParsedVersion;    return theParsedVersion;  }  throw FormatException.getFormatInstance();}  }
class C{  public void redrawCaret(boolean focus){  drawUnfocusedCaret(false);  setCaretsSize(focus ? (!isInserting) : isInserting);  if (isInserting && upANibble != 0) {    upANibble=0;    refreshCaretsPosition();    if (focus)     setFocus();  } else {    drawUnfocusedCaret(true);  }}  }
class C{  private void drawTitle(){  final String title=originalItems.get(index).getText();  if (title == null || title.trim().equals("")) {    return;  }  cachedGC.setFont(getFont());  final Point textSize=cachedGC.stringExtent(title);  cachedGC.setFont(getFont());  cachedGC.setForeground(getDisplay().getSystemColor(SWT.COLOR_WHITE));  cachedGC.setAlpha(255);  final int centerX=getClientArea().width / 2;  final int centerY=(getClientArea().height + maxItemWidth) / 2;  cachedGC.drawString(title,centerX - textSize.x / 2,centerY - textSize.y / 2,true);}  }
class C{  private Object createChannelBlocking(String name,boolean voice) throws Exception {  logger.debug("Trying to create channel in server {} (name: {}, voice: {})",ImplServer.this,name,voice);  JSONObject param=new JSONObject().put("name",name).put("type",voice ? "voice" : "text");  HttpResponse<JsonNode> response=Unirest.post("https://discordapp.com/api/guilds/" + id + "/channels").header("authorization",api.getToken()).header("Content-Type","application/json").body(param.toString()).asJson();  api.checkResponse(response);  api.checkRateLimit(response,RateLimitType.UNKNOWN,ImplServer.this);  if (voice) {    return new ImplVoiceChannel(response.getBody().getObject(),this,api);  } else {    return new ImplChannel(response.getBody().getObject(),this,api);  }}  }
class C{  public static void changeBackGround(final Component component,final Color background){  final Color oldBackGround=component.getBackground();  if (background == null || !background.equals(oldBackGround)) {    component.setBackground(background);  }}  }
class C{  protected static boolean hasChanged(Object[] oldRow,Object[] newRow,int[] indexColumns){  for (  int c : indexColumns) {    Object o=oldRow[c], n=newRow[c];    if (o == null) {      if (n != null) {        return true;      }    } else     if (!o.equals(n)) {      return true;    }  }  return false;}  }
class C{  public ServiceCall<Void> saveWords(CustomVoiceModel model,CustomTranslation... translations){  Validator.notEmpty(model.getId(),"model id must not be empty");  final String json=GSON.toJson(Collections.singletonMap("words",translations));  final String path=String.format(PATH_WORDS,model.getId());  final RequestBody body=RequestBody.create(HttpMediaType.JSON,json);  final Request request=RequestBuilder.post(path).body(body).build();  return createServiceCall(request,ResponseConverterUtils.getVoid());}  }
class C{  public void computeJobCancel(long jobPtr){  enter();  try {    PlatformCallbackUtils.computeJobCancel(envPtr,jobPtr);  }  finally {    leave();  }}  }
class C{  public HashSet(){  map=new HashMap<>();}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  protected String encryptTurnOverCounter(String cashBoxIDUTF8String,String receiptIdentifierUTF8String,RKSuite rkSuite,int turnOverCounterLengthInBytes){  try {    String IVUTF8StringRepresentation=cashBoxIDUTF8String + receiptIdentifierUTF8String;    MessageDigest messageDigest=MessageDigest.getInstance(rkSuite.getHashAlgorithmForPreviousSignatureValue());    byte[] hashValue=messageDigest.digest(IVUTF8StringRepresentation.getBytes());    byte[] concatenatedHashValue=new byte[16];    System.arraycopy(hashValue,0,concatenatedHashValue,0,16);    String base64EncryptedTurnOverValue1=null;    base64EncryptedTurnOverValue1=CryptoUtil.encryptCTR(concatenatedHashValue,turnoverCounter,cashBoxParameters.getTurnOverCounterAESKey(),turnOverCounterLengthInBytes);    String base64EncryptedTurnOverValue2=CryptoUtil.encryptCFB(concatenatedHashValue,turnoverCounter,cashBoxParameters.getTurnOverCounterAESKey(),turnOverCounterLengthInBytes);    String base64EncryptedTurnOverValue3=CryptoUtil.encryptECB(concatenatedHashValue,turnoverCounter,cashBoxParameters.getTurnOverCounterAESKey(),turnOverCounterLengthInBytes);    if (!base64EncryptedTurnOverValue1.equals(base64EncryptedTurnOverValue2)) {      System.out.println("ENCRYPTION ERROR IN METHOD updateTurnOverCounter, MUST NOT HAPPEN");      System.exit(-1);    }    if (!base64EncryptedTurnOverValue1.equals(base64EncryptedTurnOverValue3)) {      System.out.println("ENCRYPTION ERROR IN METHOD updateTurnOverCounter, MUST NOT HAPPEN");      System.exit(-1);    }    long testPlainOverTurnOverReconstructed1=CryptoUtil.decryptCTR(concatenatedHashValue,base64EncryptedTurnOverValue1,cashBoxParameters.getTurnOverCounterAESKey());    long testPlainOverTurnOverReconstructed2=CryptoUtil.decryptCFB(concatenatedHashValue,base64EncryptedTurnOverValue2,cashBoxParameters.getTurnOverCounterAESKey());    long testPlainOverTurnOverReconstructed3=CryptoUtil.decryptECB(concatenatedHashValue,base64EncryptedTurnOverValue3,cashBoxParameters.getTurnOverCounterAESKey());    if (testPlainOverTurnOverReconstructed1 != testPlainOverTurnOverReconstructed2) {      System.out.println("DECRYPTION ERROR IN METHOD updateTurnOverCounter, MUST NOT HAPPEN");      System.exit(-1);    }    if (testPlainOverTurnOverReconstructed1 != testPlainOverTurnOverReconstructed3) {      System.out.println("DECRYPTION ERROR IN METHOD updateTurnOverCounter, MUST NOT HAPPEN");      System.exit(-1);    }    if (turnoverCounter != testPlainOverTurnOverReconstructed1) {      System.out.println("DECRYPTION ERROR IN METHOD updateTurnOverCounter, MUST NOT HAPPEN");      System.exit(-1);    }    return base64EncryptedTurnOverValue1;  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }catch (  NoSuchProviderException e) {    e.printStackTrace();  }catch (  NoSuchPaddingException e) {    e.printStackTrace();  }catch (  InvalidKeyException e) {    e.printStackTrace();  }catch (  InvalidAlgorithmParameterException e) {    e.printStackTrace();  }catch (  IllegalBlockSizeException e) {    e.printStackTrace();  }catch (  BadPaddingException e) {    e.printStackTrace();  }  return null;}  }
class C{  public Builder stackTraceFormatter(StackTraceFormatter stackTraceFormatter){  this.stackTraceFormatter=stackTraceFormatter;  return this;}  }
class C{  private void createRelayedCandidate(Response response){  Attribute attribute=response.getAttribute(Attribute.XOR_RELAYED_ADDRESS);  if (attribute instanceof XorRelayedAddressAttribute) {    TransportAddress relayedAddress=((XorRelayedAddressAttribute)attribute).getAddress(response.getTransactionID());    RelayedCandidate relayedCandidate=createRelayedCandidate(relayedAddress,getMappedAddress(response));    if (relayedCandidate != null) {      harvester.getStunStack().addSocket(relayedCandidate.getStunSocket(null));      addCandidate(relayedCandidate);    }  }}  }
class C{  public static float calculateAspectRatio(Rect rect){  final float aspectRatio=(float)rect.width() / (float)rect.height();  return aspectRatio;}  }
class C{  public boolean drawImage(Image img,int x,int y,Color bgcolor,ImageObserver observer){  return g.drawImage(img,x,y,bgcolor,observer);}  }
class C{  static RightThreadedBinaryTree<Integer> buildRightThreadedComplete(int n){  RightThreadedBinaryTree<Integer> bt=new RightThreadedBinaryTree<Integer>();  int b=(int)Math.pow(2,n - 1);  for (int i=0; i < n; i++) {    bt.insert(b);    for (int j=1; j <= Math.pow(2,i) - 1; j++) {      bt.insert(b + 2 * b * j);    }    b=b / 2;  }  return bt;}  }
class C{  @Override protected Instances process(Instances instances) throws Exception {  Instances result=new Instances(getOutputFormat(),instances.numInstances());  for (int i=0; i < instances.numInstances(); i++) {    Instance inst=instances.instance(i);    double[] newData=new double[instances.numAttributes()];    for (int j=0; j < instances.numAttributes(); j++) {      if (m_AttToBeModified[j] && !inst.isMissing(j)) {        newData[j]=m_NewValues[j][(int)inst.value(j)];      } else {        newData[j]=inst.value(j);      }    }    DenseInstance instNew=new DenseInstance(1.0,newData);    instNew.setDataset(result);    copyValues(instNew,false,inst.dataset(),getOutputFormat());    result.add(instNew);  }  return result;}  }
class C{  public static <T>T withWriter(Path self,String charset,@ClosureParams(value=SimpleType.class,options="java.io.Writer") Closure<T> closure) throws IOException {  return withWriter(self,charset,false,closure);}  }
class C{  public ReactiveSeq<R> generate(final T1 input1,final T2 input2){  return ReactiveSeq.generate(null);}  }
class C{  @Post public String store(String json){  IACLService aclService=(IACLService)getContext().getAttributes().get(IACLService.class.getCanonicalName());  ACLRule newRule;  try {    newRule=jsonToRule(json);  } catch (  Exception e) {    log.error("Error parsing ACL rule: " + json,e);    return "{\"status\" : \"Failed! " + e.getMessage() + "\"}";  }  String status=null;  String nw_src=newRule.getNw_src();  String nw_dst=newRule.getNw_dst();  if (nw_src == null && nw_dst == null) {    status="Failed! Either nw_src or nw_dst must be specified.";    return ("{\"status\" : \"" + status + "\"}");  }  if (aclService.addRule(newRule)) {    status="Success! New rule added.";  } else {    status="Failed! The new ACL rule matches an existing rule.";  }  return ("{\"status\" : \"" + status + "\"}");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Node s;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  s=domesticAttr.getParentNode();  assertNull("attrParentNodeNullAssert",s);}  }
class C{  public SpanContainingQuery(SpanQuery big,SpanQuery little){  super(big,little);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.284 -0500",hash_original_method="36818B2036C6B7283455BB1B552EEC9B",hash_generated_method="CE4DDF68E4EED0FB90561C93A6EDF765") protected void concatenate(GenericObjectList objList){  concatenate(objList,false);}  }
class C{  public static JavaClassAndMethod visitSuperInterfaceMethods(JavaClassAndMethod method,JavaClassAndMethodChooser chooser) throws ClassNotFoundException {  return findMethod(method.getJavaClass().getAllInterfaces(),method.getMethod().getName(),method.getMethod().getSignature(),chooser);}  }
class C{  public void background(float gray){  g.background(gray);}  }
class C{  @Nonnull public List<T_ENTITY> listWithJQL(String qlString,NamedParameter... params){  List<T_ENTITY> result=null;  EntityManager em=getEntityManager();  try {    begin();    TypedQuery<T_ENTITY> query=em.createQuery(qlString,entityClass);    for (    NamedParameter param : params) {      query.setParameter(param.getName(),param.getValue());    }    result=query.getResultList();    commit();  } catch (  Exception e) {    rollback();    e.printStackTrace();    throw new RuntimeException(e);  } finally {    cleanup();  }  return result;}  }
class C{  public void writeTo(VirtualFile file) throws ServerException, ForbiddenException {  file.updateContent(new ByteArrayInputStream(tree.getBytes()),null);}  }
class C{  public AsymmetricCipherKeyPair genKeyPair(){  RainbowPrivateKeyParameters privKey;  RainbowPublicKeyParameters pubKey;  if (!initialized) {    initializeDefault();  }  keygen();  privKey=new RainbowPrivateKeyParameters(A1inv,b1,A2inv,b2,vi,layers);  pubKey=new RainbowPublicKeyParameters(vi[vi.length - 1] - vi[0],pub_quadratic,pub_singular,pub_scalar);  return new AsymmetricCipherKeyPair(pubKey,privKey);}  }
class C{  public MatrixAtom(boolean isPartial,ArrayOfAtoms array,String options,boolean spaceAround){  this.isPartial=isPartial;  this.matrix=array;  this.type=ARRAY;  this.spaceAround=spaceAround;  parsePositions(new StringBuffer(options));}  }
class C{  public void blacklist(URL url){  rwLock.writeLock().lock();  try {    blacklist.put(url,true);  }  finally {    rwLock.writeLock().unlock();  }}  }
class C{  public final T blockFirst(){  BlockingFirstSubscriber<T> subscriber=new BlockingFirstSubscriber<>();  subscribe(subscriber);  return subscriber.blockingGet();}  }
class C{  public static <T>ArrayList<T> arrayList(int initialCapacity){  return new ArrayList<T>(initialCapacity);}  }
class C{  public void connectionOpened(){  try {    this.setBrokerMenu(BrokerModel._broker);    tradingdayPanel.setConnected(true);    contractPanel.setConnected(true);    Tradingday todayTradingday=m_tradingdays.getTradingday(TradingCalendar.getTradingDayStart(TradingCalendar.getDateTimeNowMarketTimeZone()),TradingCalendar.getTradingDayEnd(TradingCalendar.getDateTimeNowMarketTimeZone()));    if (null != todayTradingday) {      m_brokerModel.onReqAllExecutions(todayTradingday.getOpen());    }  } catch (  Exception ex) {    this.setErrorMessage("Error finding excecutions.",ex.getMessage(),ex);  } finally {    this.setStatusBarMessage("Running live.",BasePanel.INFORMATION);  }}  }
class C{  public static ChooseConfig configChosen(Class<?> dItem,Class<?> sItem,XML xml){  return isMapped(dItem,xml) && isMapped(sItem,xml) ? null : isMapped(dItem,xml) ? ChooseConfig.DESTINATION : ChooseConfig.SOURCE;}  }
class C{  @Override public boolean switchOffFeature(AttributeRole attributeRole) throws OperatorException {  Attribute attribute=attributeRole.getAttribute();  Matcher nameSkipMatcher=skipPattern.matcher(attribute.getName());  Matcher specialNameSkipMatcher=null;  if (attributeRole.isSpecial()) {    specialNameSkipMatcher=skipPattern.matcher(attributeRole.getSpecialName());  }  Matcher exceptionMatcher=exceptionPattern != null ? exceptionPattern.matcher(attribute.getName()) : null;  Matcher specialExceptionMatcher=null;  if (attributeRole.isSpecial()) {    specialExceptionMatcher=exceptionPattern != null ? exceptionPattern.matcher(attributeRole.getSpecialName()) : null;  }  return (nameSkipMatcher.matches() || ((specialNameSkipMatcher != null) && (specialNameSkipMatcher.matches()))) && ((exceptionMatcher == null) || (!exceptionMatcher.matches())) && ((specialExceptionMatcher == null) || (!specialExceptionMatcher.matches()));}  }
class C{  @Deprecated private void doFailTask(Class<? extends DataObject> clazz,URI id,String opId,String msg){  try {    _dbClient.updateTaskOpStatus(clazz,id,opId,new Operation(Operation.Status.error.name(),msg));  } catch (  DatabaseException ioe) {    _log.error(ioe.getMessage());  }}  }
class C{  public <T extends Comparable<T>>Map<T,Double> recommendDocsUsingDocQuery(List<T> recentItems,QueryTransform<T> docTransform,int numResults,Set<T> exclusions,T minDoc,boolean ignorePerfectMatches){  Map<T,Double> scores=new HashMap<>();  for (  T recent : recentItems) {    ArrayList<SemVectorResult<T>> docResult=new ArrayList<>();    recommendDocsUsingDocQuery(recent,docResult,docTransform,numResults * 10,exclusions,minDoc);    for (    SemVectorResult<T> r : docResult) {      Double score=scores.get(r.result);      if (ignorePerfectMatches && r.score == 1.0)       logger.info("Ignoring perfect match between " + recent + " and "+ r.result+ " overlap "+ r.score); else {        if (score != null)         score=score + r.score; else         score=r.score;        scores.put(r.result,score);      }    }  }  return RecommendationUtils.rescaleScoresToOne(scores,numResults);}  }
class C{  public int hashCode(){  if (hashCodeCache == 0) {    ensureCache();    hashCodeCache=textLine.hashCode();  }  return hashCodeCache;}  }
class C{  public int recordParams(CtClass[] params,boolean isStatic,String prefix,String paramVarName,String paramsName,boolean use0,int paramBase,String target,SymbolTable tbl) throws CompileError {  int varNo;  paramTypeList=params;  paramArrayName=paramVarName;  paramListName=paramsName;  paramVarBase=paramBase;  useParam0=use0;  if (target != null)   param0Type=MemberResolver.jvmToJavaName(target);  inStaticMethod=isStatic;  varNo=paramBase;  if (use0) {    String varName=prefix + "0";    Declarator decl=new Declarator(CLASS,MemberResolver.javaToJvmName(target),0,varNo++,new Symbol(varName));    tbl.append(varName,decl);  }  for (int i=0; i < params.length; ++i)   varNo+=recordVar(params[i],prefix + (i + 1),varNo,tbl);  if (getMaxLocals() < varNo)   setMaxLocals(varNo);  return varNo;}  }
class C{  public void endEntity(String name) throws org.xml.sax.SAXException {  if (name.equals("[dtd]"))   m_inExternalDTD=false;  m_inEntityRef=false;  if (m_tracer != null)   this.fireEndEntity(name);}  }
class C{  @Override public boolean equals(@Nullable Object object){  if (object == this) {    return true;  }  if (object instanceof InternetDomainName) {    InternetDomainName that=(InternetDomainName)object;    return this.name.equals(that.name);  }  return false;}  }
class C{  public boolean isPositive(){  return signum() == 1;}  }
class C{  private Vset checkMembers(Environment env,Context ctx,Vset vset) throws ClassNotFound {  if (getError()) {    return vset;  }  for (MemberDefinition f=getFirstMember(); f != null; f=f.getNextMember()) {    if (f.isInnerClass()) {      SourceClass cdef=(SourceClass)f.getInnerClass();      if (cdef.isMember()) {        cdef.basicCheck(env);      }    }  }  if (isFinal() && isAbstract()) {    env.error(where,"final.abstract",this.getName().getName());  }  if (!isInterface() && !isAbstract() && mustBeAbstract(env)) {    modifiers|=M_ABSTRACT;    Iterator iter=getPermanentlyAbstractMethods();    while (iter.hasNext()) {      MemberDefinition method=(MemberDefinition)iter.next();      env.error(where,"abstract.class.cannot.override",getClassDeclaration(),method,method.getDefiningClassDeclaration());    }    iter=getMethods(env);    while (iter.hasNext()) {      MemberDefinition method=(MemberDefinition)iter.next();      if (method.isAbstract()) {        env.error(where,"abstract.class",getClassDeclaration(),method,method.getDefiningClassDeclaration());      }    }  }  Context ctxInit=new Context(ctx);  Vset vsInst=vset.copy();  Vset vsClass=vset.copy();  for (MemberDefinition f=getFirstMember(); f != null; f=f.getNextMember()) {    if (f.isVariable() && f.isBlankFinal()) {      int number=ctxInit.declareFieldNumber(f);      if (f.isStatic()) {        vsClass=vsClass.addVarUnassigned(number);        vsInst=vsInst.addVar(number);      } else {        vsInst=vsInst.addVarUnassigned(number);        vsClass=vsClass.addVar(number);      }    }  }  Context ctxInst=new Context(ctxInit,this);  LocalMember thisArg=getThisArgument();  int thisNumber=ctxInst.declare(env,thisArg);  vsInst=vsInst.addVar(thisNumber);  for (MemberDefinition f=getFirstMember(); f != null; f=f.getNextMember()) {    try {      if (f.isVariable() || f.isInitializer()) {        if (f.isStatic()) {          vsClass=f.check(env,ctxInit,vsClass);        } else {          vsInst=f.check(env,ctxInst,vsInst);        }      }    } catch (    ClassNotFound ee) {      env.error(f.getWhere(),"class.not.found",ee.name,this);    }  }  checkBlankFinals(env,ctxInit,vsClass,true);  for (MemberDefinition f=getFirstMember(); f != null; f=f.getNextMember()) {    try {      if (f.isConstructor()) {        Vset vsCon=f.check(env,ctxInit,vsInst.copy());        checkBlankFinals(env,ctxInit,vsCon,false);      } else {        Vset vsFld=f.check(env,ctx,vset.copy());      }    } catch (    ClassNotFound ee) {      env.error(f.getWhere(),"class.not.found",ee.name,this);    }  }  getClassDeclaration().setDefinition(this,CS_CHECKED);  for (MemberDefinition f=getFirstMember(); f != null; f=f.getNextMember()) {    if (f.isInnerClass()) {      SourceClass cdef=(SourceClass)f.getInnerClass();      if (!cdef.isInsideLocal()) {        cdef.maybeCheck(env);      }    }  }  return vset;}  }
class C{  String[] processName(String qName,boolean isAttribute){  String name[];  Hashtable table;  declsOK=false;  if (isAttribute) {    table=attributeNameTable;  } else {    table=elementNameTable;  }  name=(String[])table.get(qName);  if (name != null) {    return name;  }  name=new String[3];  name[2]=qName.intern();  int index=qName.indexOf(':');  if (index == -1) {    if (isAttribute) {      if (qName == "xmlns" && namespaceDeclUris)       name[0]=NSDECL; else       name[0]="";    } else     if (defaultNS == null) {      name[0]="";    } else {      name[0]=defaultNS;    }    name[1]=name[2];  } else {    String prefix=qName.substring(0,index);    String local=qName.substring(index + 1);    String uri;    if ("".equals(prefix)) {      uri=defaultNS;    } else {      uri=(String)prefixTable.get(prefix);    }    if (uri == null || (!isAttribute && "xmlns".equals(prefix))) {      return null;    }    name[0]=uri;    name[1]=local.intern();  }  table.put(name[2],name);  return name;}  }
class C{  protected void revalidate(){  valid=true;}  }
class C{  public static IntBuffer copyOf(IntBuffer buffer,int newSize){  if (newSize < 0 || newSize < buffer.remaining()) {    String message=Logging.getMessage("generic.SizeOutOfRange",newSize);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  IntBuffer newBuffer=newIntBuffer(newSize,buffer.isDirect());  int pos=buffer.position();  try {    newBuffer.put(buffer);    newBuffer.rewind();  }  finally {    buffer.position(pos);  }  return newBuffer;}  }
class C{  private boolean checkDequeLength(int length){  Address top=head;  int l=0;  while (!top.isZero() && l <= length) {    top=getNext(top);    l++;  }  return l == length;}  }
class C{  public static List executeOn(ServerLocation sl,ExecutablePool pool,String region,Object key,int interestType,InterestResultPolicy policy,boolean isDurable,boolean receiveUpdatesAsInvalidates,byte regionDataPolicy){  AbstractOp op=new RegisterInterestOpImpl(region,key,interestType,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);  return (List)pool.executeOn(sl,op);}  }
class C{  public boolean isIncludeNullsProject(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsProject);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void reset(){  if (first == false) {    md.reset();    first=true;  }}  }
class C{  private DisplayUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public GuacamoleServerBusyException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void incMaxLocals(int diff){  maxLocals+=diff;}  }
class C{  public static String concatStrings(final String delimiter,final String... texts){  final String delim=delimiter == null ? SP_STRING_EMPTY : delimiter;  final StringBuilder conCatStrBldr=new StringBuilder();  if (null != texts) {    for (    final String text : texts) {      conCatStrBldr.append(delim);      conCatStrBldr.append(text);    }  }  final String conCatedStr=conCatStrBldr.toString();  return delim.length() > 0 && conCatedStr.startsWith(delim) ? conCatedStr.substring(1) : conCatedStr;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String toString(){  return "\'" + value + "\'";}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  charactersFlush();  m_contextIndexes.quickPop(1);  int topContextIndex=m_contextIndexes.peek();  if (topContextIndex != m_prefixMappings.size()) {    m_prefixMappings.setSize(topContextIndex);  }  m_previous=m_parents.pop();  popShouldStripWhitespace();}  }
class C{  protected TagValue addValue(Tag tag,String key,JSDocToken token){  Text text=DOM.createText();  text.setText(token.token);  text.setBegin(token.start);  text.setEnd(token.end);  return addValue(tag,key,text);}  }
class C{  @Override public synchronized boolean retainAll(Collection<?> collection){  return super.retainAll(collection);}  }
class C{  @ObjectiveCName("isVideoAutoDownloadEnabled") public boolean isVideoAutoDownloadEnabled(){  return modules.getSettingsModule().isVideoAutoDownloadEnabled();}  }
class C{  public void uninstall(){  if (textArea != null) {    removeHighlights();    textArea.removeCaretListener(this);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null)   return new Integer(tun.getRemoteInfo(remoteName).buttonDelay); else   return new Integer(-1);}  }
class C{  public StAndrewsEncounterModel(String encounterDataFilename,StAndrewsSimulation sim) throws FileNotFoundException {  this.sim=sim;  loadEncounterData(encounterDataFilename);}  }
class C{  public static TimeInForce newInstance(String value){  final TimeInForce returnInstance=new TimeInForce();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childList;  doc=(Document)load("staffNS",false);  childList=doc.getElementsByTagNameNS("**","*");  assertSize("documentgetelementsbytagnameNS03",0,childList);}  }
class C{  public javax.xml.xpath.XPath newXPath(){  return new org.apache.xpath.jaxp.XPathImpl(xPathVariableResolver,xPathFunctionResolver,featureSecureProcessing);}  }
class C{  boolean isMulticastSocket(){  return false;}  }
class C{  public static Level parse(String name){  if (name.equalsIgnoreCase("OFF")) {    return (OFF);  } else   if (name.equalsIgnoreCase("SEVERE")) {    return (SEVERE);  } else   if (name.equalsIgnoreCase("WARNING")) {    return (WARNING);  } else   if (name.equalsIgnoreCase("INFO")) {    return (INFO);  } else   if (name.equalsIgnoreCase("CONFIG")) {    return (CONFIG);  } else   if (name.equalsIgnoreCase("FINE")) {    return (FINE);  } else   if (name.equalsIgnoreCase("FINER")) {    return (FINER);  } else   if (name.equalsIgnoreCase("FINEST")) {    return (FINEST);  } else   if (name.equalsIgnoreCase("ALL")) {    return (ALL);  }  try {    return (new Level(name,Integer.parseInt(name)));  } catch (  NumberFormatException ex) {    throw new IllegalArgumentException("Invalid level: " + name);  }}  }
class C{  public void test_getTestResource(){  final String prefix="junit/framework/";  String data=getTestResource(prefix + "test-entity-1.txt");  assertEquals(data,"A text resource.");}  }
class C{  public static OptionBuilder withType(Object newType){  OptionBuilder.type=newType;  return instance;}  }
class C{  public void removeListeners(){  if (globalListener != null) {    try {      InvokerHelper.invokeMethod(currentObject,"removePropertyChangeListener",globalListener);    } catch (    Exception e) {    }    globalListener=null;  }  if (localListener != null) {    try {      InvokerHelper.invokeMethod(currentObject,"removePropertyChangeListener",new Object[]{propertyName,localListener});    } catch (    Exception e) {    }    localListener=null;  }  if (syntheticFullBinding != null) {    syntheticFullBinding.unbind();  }}  }
class C{  public boolean isCompressed(){  return pub.length == 33;}  }
class C{  public ComputedCSSValue(int idx){  super(null);  valueProvider=this;  index=idx;}  }
class C{  public ThreadInterrupter(){  this(Thread.currentThread());}  }
class C{  private void processConfigInvariants(){  Vect invs=this.config.getInvariants();  for (int i=0; i < invs.size(); i++) {    String name=(String)invs.elementAt(i);    Object inv=this.defns.get(name);    if (inv instanceof OpDefNode) {      OpDefNode def=(OpDefNode)inv;      if (def.getArity() != 0) {        Assert.fail(EC.TLC_CONFIG_ID_REQUIRES_NO_ARG,new String[]{"invariant",name});      }      this.invNameVec.addElement(name);      this.invVec.addElement(new Action(def.getBody(),Context.Empty));    } else     if (inv == null) {      Assert.fail(EC.TLC_CONFIG_SPECIFIED_NOT_DEFINED,new String[]{"invariant",name});    } else     if (!(inv instanceof BoolValue) || !(((BoolValue)inv).val)) {      Assert.fail(EC.TLC_CONFIG_ID_HAS_VALUE,new String[]{"invariant",name,inv.toString()});    }  }}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public byte[] toASN1(){  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream(400);    DERSequenceGenerator seq=new DERSequenceGenerator(baos);    seq.addObject(new ASN1Integer(1));    seq.addObject(new DEROctetString(priv.toByteArray()));    seq.addObject(new DERTaggedObject(0,SECNamedCurves.getByName("secp256k1").toASN1Primitive()));    seq.addObject(new DERTaggedObject(1,new DERBitString(getPubKey())));    seq.close();    return baos.toByteArray();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public void branchChainTo(BranchLabel label){  if (this.statements != null) {    this.statements[this.statements.length - 1].branchChainTo(label);  }}  }
class C{  public int numHits(String query) throws ParseException, IOException {  Integer count;  if ((count=(Integer)m_hitCountCache.get(query)) == null) {    Hits hits=search(query);    count=new Integer(hits.length());    m_hitCountCache.put(query,count);  }  return count.intValue();}  }
class C{  private void startAnimation(){  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();  mPendingAnimations.clear();  int propertyMask=0;  int propertyCount=nameValueList.size();  for (int i=0; i < propertyCount; ++i) {    NameValuesHolder nameValuesHolder=nameValueList.get(i);    propertyMask|=nameValuesHolder.mNameConstant;  }  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));  animator.addUpdateListener(mAnimatorEventListener);  animator.addListener(mAnimatorEventListener);  if (mStartDelaySet) {    animator.setStartDelay(mStartDelay);  }  if (mDurationSet) {    animator.setDuration(mDuration);  }  if (mInterpolatorSet) {    animator.setInterpolator(mInterpolator);  }  animator.start();}  }
class C{  private void handleBrowse(){  final ContainerSelectionDialog dialog=new ContainerSelectionDialog(getShell(),ResourcesPlugin.getWorkspace().getRoot(),false,"Select a project or a folder");  if (dialog.open() == Window.OK) {    final Object[] result=dialog.getResult();    if (result.length == 1) {      containerText.setText(((Path)result[0]).toString());    }  }}  }
class C{  public boolean increment(K key){  return adjustValue(key,1);}  }
class C{  public boolean push(final int obj){  if (numObjs >= objs.length)   doubleCapacityPlusOne();  objs[numObjs++]=obj;  return true;}  }
class C{  public Collection values(){  Collection vs=values;  return (vs != null) ? vs : (values=new Values());}  }
class C{  private Bitmap createTextBitmap(Configuration config){  Bitmap bitmap=Bitmap.createBitmap(TEXTURE_SIZE,TEXTURE_SIZE,Bitmap.Config.ARGB_4444);  Canvas canvas=new Canvas(bitmap);  bitmap.eraseColor(0x00000000);  Paint textPaint=new Paint();  Typeface typeface=Typeface.defaultFromStyle(Typeface.BOLD);  textPaint.setTypeface(typeface);  textPaint.setTextSize(TEXT_SIZE);  textPaint.setAntiAlias(true);  int startX=0;  int startY=0;  int lineHeight=0;  for (int i=0; i < STRING_COUNT; i++) {    String str=config.getTextString(i);    textPaint.setColor(0xff000000 | config.getTextColor(i));    if (config.getTextShadow(i)) {      textPaint.setShadowLayer(SHADOW_RADIUS,SHADOW_OFFSET,SHADOW_OFFSET,0xff000000);    } else {      textPaint.setShadowLayer(0,0,0,0);    }    Rect boundsRect=new Rect();    textPaint.getTextBounds(str,0,str.length(),boundsRect);    if (config.getTextShadow(i)) {      boundsRect.right+=SHADOW_RADIUS + SHADOW_OFFSET;      boundsRect.bottom+=SHADOW_RADIUS + SHADOW_OFFSET;    }    if (boundsRect.width() > TEXTURE_SIZE || boundsRect.height() > TEXTURE_SIZE) {      Log.w(TAG,"HEY: text string '" + str + "' is too big: "+ boundsRect);    }    if (startX != 0 && startX + boundsRect.width() > TEXTURE_SIZE) {      startX=0;      startY+=lineHeight;      lineHeight=0;      if (startY >= TEXTURE_SIZE) {        Log.w(TAG,"HEY: fell off the bottom of the message texture");      }    }    canvas.drawText(str,startX - boundsRect.left,startY - boundsRect.top,textPaint);    boundsRect.offsetTo(startX,startY);    mTextPositions[i]=boundsRect;    lineHeight=Math.max(lineHeight,boundsRect.height() + 1);    startX+=boundsRect.width() + 1;  }  return bitmap;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public static boolean isWhitespace(IElementType token){  return (token == BashTokenTypes.WHITESPACE) || (token == BashTokenTypes.LINE_FEED);}  }
class C{  public double intercept(){  return alpha;}  }
class C{  public Quaternionf conjugate(){  x=-x;  y=-y;  z=-z;  return this;}  }
class C{  public int[] permuted(int l){  int[] array=new int[l];  for (int i=0; i < l; i++) {    array[i]=i;  }  permute(array);  return array;}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "CU_GRAPHICS_REGISTER_FLAGS_NONE";  }  String result="";  if ((n & CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY) != 0)   result+="CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY ";  if ((n & CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD) != 0)   result+="CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD ";  if ((n & CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST) != 0)   result+="CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST ";  if ((n & CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER) != 0)   result+="CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER ";  return result;}  }
class C{  @Override public boolean deactivate(){  resetFields();  progress=-1;  return (true);}  }
class C{  public static boolean isEqualMethod(IMethodBinding method,String methodName,ITypeBinding[] parameters){  if (!method.getName().equals(methodName))   return false;  ITypeBinding[] methodParameters=method.getParameterTypes();  if (methodParameters.length != parameters.length)   return false;  for (int i=0; i < parameters.length; i++) {    if (!equals(methodParameters[i].getErasure(),parameters[i].getErasure()))     return false;  }  return true;}  }
class C{  public static void main(String[] args) throws Exception {  int[] switches=new int[7];  int switchSource=0;  if (args.length == 0) {    for (int x=0; x < 100; x++) {      int temp=generator.nextInt(2187);      for (int i=0; i < 7; i++) {        switches[i]=temp % 3;        temp=temp / 3;      }      String command=System.getProperty("java.home") + File.separator + "bin"+ File.separator+ "java Assert";      StringBuffer commandString=new StringBuffer(command);      for (int j=0; j < 7; j++)       commandString.append(" " + switches[j]);      Process p=null;      p=Runtime.getRuntime().exec(commandString.toString());      if (debug) {        BufferedReader blah=new BufferedReader(new InputStreamReader(p.getInputStream()));        String outString=blah.readLine();        while (outString != null) {          System.out.println("from slave:" + outString);          outString=blah.readLine();        }      }      p.waitFor();      int result=p.exitValue();      if (debug) {        if (result == 0) {          for (int k=6; k >= 0; k--)           System.out.print(switches[k]);          System.out.println();        } else {          System.out.print("Nonzero Exit: ");          for (int k=6; k >= 0; k--)           System.out.print(switches[k]);          System.out.println();        }      } else {        if (result != 0) {          System.err.print("Nonzero Exit: ");          for (int k=6; k >= 0; k--)           System.err.print(switches[k]);          System.err.println();          throw new RuntimeException("Assertion test failure.");        }      }    }  } else {    for (int i=0; i < 7; i++)     switches[i]=Integer.parseInt(args[i]);    SetAssertionSwitches(switches);    ConstructClassTree();    TestClassTree(switches);  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < dimensionality; i++) {    sb.append(values[i] + ",");  }  return sb.substring(0,sb.length() - 1);}  }
class C{  public static Composite createComposite(Composite parent,int columns,int hspan,int fill,int marginwidth,int marginheight){  Composite g=new Composite(parent,SWT.NONE);  GridLayout layout=new GridLayout(columns,false);  layout.marginWidth=marginwidth;  layout.marginHeight=marginheight;  g.setLayout(layout);  g.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  g.setLayoutData(gd);  return g;}  }
class C{  public Transformer newTransformer() throws TransformerConfigurationException {  return new TransformerIdentityImpl(m_isSecureProcessing);}  }
class C{  public void tag(int tagType2,boolean longTag3,byte[] contents2) throws IOException {  byte[] contents=contents2;  int length=(contents != null) ? contents.length : 0;  boolean longTag2=(length > 62) || longTag3;  int hdr=(tagType2 << 6) + (longTag2 ? 0x3f : length);  out.writeUI16(hdr);  if (longTag2) {    out.writeUI32(length);  }  if (contents != null) {    out.write(contents);  }  if (tagType2 == SWFConstants.TAG_SHOWFRAME) {    frameCount++;  }  if (tagType2 == SWFConstants.TAG_END) {    out.flush();    contents=bytes.toByteArray();    out=null;    bytes=null;    byte[] fc=OutStream.uintTo2Bytes(frameCount);    contents[2]=fc[0];    contents[3]=fc[1];    tags.tag(tagType,longTag,contents);  }}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof CandidatePair))   return false;  CandidatePair candidatePair=(CandidatePair)obj;  return localCandidate.equals(candidatePair.localCandidate) && remoteCandidate.equals(candidatePair.remoteCandidate);}  }
class C{  public SchemaBox(SearchResultMediator resultPanel){  this.resultPanel=resultPanel;  this.buttonGroup=new ButtonGroup();  this.buttonsMap=new HashMap<NamedMediaType,JToggleButton>();  this.tooltipPlaceHolders=new HashMap<NamedMediaType,String>();  setLayout(new BorderLayout());  addSchemas();  Border marginBorder=BorderFactory.createEmptyBorder(3,4,0,0);  Border border=marginBorder;  setBorder(border);  Dimension dim=new Dimension(10,30);  setPreferredSize(dim);  setMinimumSize(dim);  setMaximumSize(new Dimension(100000,30));}  }
class C{  public void writeHeader(){  ps.println("<html>");  ps.println("<head>");  ps.println("\t<title>Lag</title>");  ps.println("\t<style>.first {background-color: #F00} .second {background-color: #FF0}</style>");  ps.println("</head>");  ps.println("<body>");  ps.println("<table border=\"1\">");}  }
class C{  public static Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '-') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (string.equals(myLong.toString())) {          if (myLong == myLong.intValue()) {            return myLong.intValue();          } else {            return myLong;          }        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
