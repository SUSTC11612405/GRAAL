class C{  public StringProperty valueProperty(){  return value;}  }
class C{  public void removeCompilerAdapter(CompilerAdapter adapter){  if (adapter == null)   throw new IllegalArgumentException("Null adapter");  adapters.remove(adapter);}  }
class C{  private Object readResolve(){  return (list instanceof RandomAccess ? new SynchronizedRandomAccessList(list) : this);}  }
class C{  public boolean containsValue(long val){  Object[] keys=_set;  long[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  public CenteredDifferentiator(int N,double delta,double OmegaP){  super(1,N);  if (!(0.0 < OmegaP && OmegaP < 1.0))   throw new IllegalArgumentException("Check 0.0 < OmegaP < 1.0");  bands[0][0]=1.0 / (2 * N);  bands[0][1]=OmegaP;  this.delta=delta;  generateCoefficients();}  }
class C{  private void addMenuItems(Menu mMenu,boolean subMenu){  int groupId=R.id.material_drawer_menu_default_group;  for (int i=0; i < mMenu.size(); i++) {    MenuItem mMenuItem=mMenu.getItem(i);    IDrawerItem iDrawerItem;    if (!subMenu && mMenuItem.getGroupId() != groupId && mMenuItem.getGroupId() != 0) {      groupId=mMenuItem.getGroupId();      iDrawerItem=new DividerDrawerItem();      getAdapter().addDrawerItems(iDrawerItem);    }    if (mMenuItem.hasSubMenu()) {      iDrawerItem=new PrimaryDrawerItem().withName(mMenuItem.getTitle().toString()).withIcon(mMenuItem.getIcon()).withIdentifier(mMenuItem.getItemId()).withEnabled(mMenuItem.isEnabled()).withSelectable(false);      getAdapter().addDrawerItems(iDrawerItem);      addMenuItems(mMenuItem.getSubMenu(),true);    } else     if (mMenuItem.getGroupId() != 0 || subMenu) {      iDrawerItem=new SecondaryDrawerItem().withName(mMenuItem.getTitle().toString()).withIcon(mMenuItem.getIcon()).withIdentifier(mMenuItem.getItemId()).withEnabled(mMenuItem.isEnabled());      getAdapter().addDrawerItems(iDrawerItem);    } else {      iDrawerItem=new PrimaryDrawerItem().withName(mMenuItem.getTitle().toString()).withIcon(mMenuItem.getIcon()).withIdentifier(mMenuItem.getItemId()).withEnabled(mMenuItem.isEnabled());      getAdapter().addDrawerItems(iDrawerItem);    }  }}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  static public void assertEquals(String message,char expected,char actual){  assertEquals(message,Character.valueOf(expected),Character.valueOf(actual));}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void initializeRuntimePrimitivesSeen(){  for (  Sequence s : componentManager.getAllPrimitiveSequences()) {    ExecutableSequence es=new ExecutableSequence(s);    es.execute(new DummyVisitor(),new DummyCheckGenerator());    NormalExecution e=(NormalExecution)es.getResult(0);    Object runtimeValue=e.getRuntimeValue();    runtimePrimitivesSeen.add(runtimeValue);  }}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!mutate) {    value=cssEngine.parsePropertyValue(SVGStylableElement.this,property,newv);  }}  }
class C{  public void trace(Throwable throwable,String msg){  innerLog(Level.TRACE,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public WindowsXP(){  int procs=1;  String info="";  try {    Runtime rt=Runtime.getRuntime();    Process proc=rt.exec("cmd.exe /C echo %NUMBER_OF_PROCESSORS%");    BufferedReader reader=new BufferedReader(new InputStreamReader(proc.getInputStream()));    String numProcs=reader.readLine();    proc=rt.exec("cmd.exe /C echo %PROCESSOR_IDENTIFIER%");    reader=new BufferedReader(new InputStreamReader(proc.getInputStream()));    info=reader.readLine();    procs=Integer.parseInt(numProcs);  } catch (  Exception e) {  }  m_processors=procs;  m_cpuInfo=info;}  }
class C{  private synchronized void refresh(){  SessionPool.get(this);  CassandraHelper.closeSession(ses);  ses=null;  session();synchronized (sesStatements) {    sesStatements.clear();  }}  }
class C{  public void logic(final int currentTurn){  this.currentTurn=currentTurn;  Set<TurnListener> set=null;synchronized (sync) {    set=register.remove(Integer.valueOf(currentTurn));  }  if (logger.isDebugEnabled()) {    final StringBuilder os=new StringBuilder();    os.append("register: " + register.size() + "\n");    int setSize;    if (set != null) {      setSize=set.size();    } else {      setSize=0;    }    os.append("set: " + setSize + "\n");    logger.info(os);  }  if (set != null) {    for (    final TurnListener turnListener : set) {      try {        turnListener.onTurnReached(currentTurn);      } catch (      final RuntimeException e) {        logger.error("Exception in " + turnListener,e);      }    }  }}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  private void updateDoneText(ArrayList<String> resultList){  int size=0;  if (resultList == null || resultList.size() <= 0) {    mSubmitButton.setText(R.string.mis_action_done);    mSubmitButton.setEnabled(false);  } else {    size=resultList.size();    mSubmitButton.setEnabled(true);  }  mSubmitButton.setText(getString(R.string.mis_action_button_string,getString(R.string.mis_action_done),size,mDefaultCount));}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public void step(final SimState state){  if (shouldUpdate() && (canvas.isShowing() || movieMaker != null)) {    updateSceneGraph(true);  }}  }
class C{  public static void annotateSupers(List<AnnotatedTypeMirror.AnnotatedDeclaredType> supertypes,TypeElement subtypeElement){  final boolean isInterface=subtypeElement.getSuperclass().getKind() == TypeKind.NONE;  final int typeOffset=isInterface ? 0 : -1;  for (int i=0; i < supertypes.size(); i++) {    final AnnotatedTypeMirror supertype=supertypes.get(i);    final int typeIndex=i + typeOffset;    (new SuperTypeApplier(supertype,subtypeElement,typeIndex)).extractAndApply();  }}  }
class C{  public FieldPosition(Format.Field attribute,int fieldID){  this.attribute=attribute;  this.field=fieldID;}  }
class C{  public String displayState(){  return _state.toString();}  }
class C{  protected void fireMenuKeyPressed(MenuKeyEvent event){  if (DEBUG) {    System.out.println("in JMenuItem.fireMenuKeyPressed for " + getText() + "  "+ KeyStroke.getKeyStrokeForEvent(event));  }  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuKeyListener.class) {      ((MenuKeyListener)listeners[i + 1]).menuKeyPressed(event);    }  }}  }
class C{  public int compareTo(CandidatePair candidatePair){  long thisPri=getPriority();  long otherPri=candidatePair.getPriority();  return (thisPri < otherPri) ? 1 : (thisPri == otherPri) ? 0 : -1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.071 -0400",hash_original_method="DC14AD217499C73BF2ED5ED6A0A09FC7",hash_generated_method="5FBCC34012703571EF05BA1C10A544CC") public BrokenOutputStream(IOException exception){  this.exception=exception;}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot){  return execCommand(new String[]{command},isRoot,true);}  }
class C{  @BeforeClass public static void enableCrypto(){  try {    Field field=Class.forName("javax.crypto.JceSecurity").getDeclaredField("isRestricted");    field.setAccessible(true);    field.set(null,Boolean.FALSE);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static int factorialCheckBounds(int n) throws Exception {  long result=1;  for (int i=1; i <= n; i++) {    result*=(long)i;    if (result > Integer.MAX_VALUE) {      throw new Exception("n! causes integer overflow");    }  }  return (int)result;}  }
class C{  public void insert(int pos,double val){  if (size == data.length) {    if (data.length == MAX_ARRAY_SIZE) {      throw new OutOfMemoryError("Array size has reached the Java maximum.");    }    final int newsize=(size >= LAST_GROW_SIZE) ? MAX_ARRAY_SIZE : (size + (size >> 1) + 1);    final double[] oldd=data;    data=new double[newsize];    System.arraycopy(oldd,0,data,0,pos);    System.arraycopy(oldd,pos,data,pos + 1,size - pos);  } else {    System.arraycopy(data,pos,data,pos + 1,size - pos);  }  data[pos]=val;  size++;}  }
class C{  public static ObjectDetailsResponse create(DistributionManager dm,InternalDistributedMember recipient){  ObjectDetailsResponse m=new ObjectDetailsResponse();  m.setRecipient(recipient);  return m;}  }
class C{  private static int med3(long x[],int a,int b,int c,LongComparator comp){  int ab=comp.compare(x[a],x[b]);  int ac=comp.compare(x[a],x[c]);  int bc=comp.compare(x[b],x[c]);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  private static boolean isRetina(){  if (SystemInfo.isAppleJvm) {    return hasAppleRetinaDevice();  }  if (SystemInfo.isMac) {    GraphicsEnvironment e=GraphicsEnvironment.getLocalGraphicsEnvironment();    GraphicsDevice[] devices=e.getScreenDevices();    for (    GraphicsDevice device : devices) {      if (isOracleMacRetinaDevice(device)) {        return true;      }    }  }  return false;}  }
class C{  public static int determineSignedBitSize(int value){  if (value >= 0) {    return determineUnsignedBitSize(value) + 1;  }  int topBit=31;  long mask=0x40000000L;  while (topBit > 0) {    if ((value & mask) == 0) {      break;    }    mask>>=1;    topBit--;  }  if (topBit == 0) {    return 2;  }  int val2=value & ((1 << topBit) - 1);  if (val2 == 0) {    topBit++;  }  return topBit + 1;}  }
class C{  public boolean allValuesAreSame(){  if (mapValues.isEmpty()) {    return false;  }  final int first=mapValues.values().iterator().next();  for (  final int value : mapValues.values()) {    if (first != value) {      return false;    }  }  return true;}  }
class C{  private DeferredResult<WordCountsResponse> countWordsInDocuments(){  return this.sendBroadcastQuery().thenApply(null);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.TRACE_REACTION_WILL_FIRE__REACTION:    return reaction != null;}return super.eIsSet(featureID);}  }
class C{  public void testSelectOneNoValue() throws Exception {  HtmlPage page=getPage("/faces/jsp/selectOneNoValue.jsp");  List list=getAllElementsOfGivenClass(page,null,HtmlSubmitInput.class);  HtmlSubmitInput button=(HtmlSubmitInput)list.get(0);  page=(HtmlPage)button.click();  assertTrue(-1 != page.asText().indexOf("equired"));}  }
class C{  public static void sort(Object[] a,int fromIndex,int toIndex){  rangeCheck(a.length,fromIndex,toIndex);  Object[] aux=(Object[])cloneSubarray(a,fromIndex,toIndex);  mergeSort(aux,a,fromIndex,toIndex,-fromIndex);}  }
class C{  public void updateSunAnimation(Time time,Float value,int canvasWidth,int canvasHeight){  calculateSunRotation(value,time,canvasWidth,canvasHeight);  float radius=map(value,(float)Math.PI,(float)(2 * Math.PI),80.0f,200.0f);  float alpha=map(value,(float)Math.PI,(float)(2 * Math.PI),0.0f,60.f);  hoursTens.calculateGradient(radius,initShadowGradientColor,finalShadowGradientColor);  hoursUnits.calculateGradient(radius,initShadowGradientColor,finalShadowGradientColor);  minutesTens.calculateGradient(radius,initShadowGradientColor,finalShadowGradientColor);  minutesUnits.calculateGradient(radius,initShadowGradientColor,finalShadowGradientColor);  float minuteMapped=map(time.minute,0,60,0,360);  mShineOverlay.updateAngle(minuteMapped + (value * (float)(180 / Math.PI)));  mShadowOverlay.updateAngle(minuteMapped + (value * (float)(180 / Math.PI)));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.193 -0500",hash_original_method="C9CC1BA66A01768C307588A1D8322CF7",hash_generated_method="EE9BF37411D5DC944E8278B3CFA690F7") public SIPHeader parse() throws ParseException {  RecordRouteList recordRouteList=new RecordRouteList();  if (debug)   dbg_enter("RecordRouteParser.parse");  try {    this.lexer.match(TokenTypes.RECORD_ROUTE);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    while (true) {      RecordRoute recordRoute=new RecordRoute();      super.parse(recordRoute);      recordRouteList.add(recordRoute);      this.lexer.SPorHT();      char la=lexer.lookAhead(0);      if (la == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       if (la == '\n')       break; else       throw createParseException("unexpected char");    }    return recordRouteList;  }  finally {    if (debug)     dbg_leave("RecordRouteParser.parse");  }}  }
class C{  public ServiceConfigurationError(String msg){  super(msg);}  }
class C{  public static List<Entry> loadEntriesFromAssets(AssetManager am,String path){  List<Entry> entries=new ArrayList<Entry>();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(am.open(path),"UTF-8"));    String line=reader.readLine();    while (line != null) {      String[] split=line.split("#");      if (split.length <= 2) {        entries.add(new Entry(Float.parseFloat(split[0]),Integer.parseInt(split[1])));      } else {        float[] vals=new float[split.length - 1];        for (int i=0; i < vals.length; i++) {          vals[i]=Float.parseFloat(split[i]);        }        entries.add(new BarEntry(vals,Integer.parseInt(split[split.length - 1])));      }      line=reader.readLine();    }  } catch (  IOException e) {    Log.e(LOG,e.toString());  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        Log.e(LOG,e.toString());      }    }  }  return entries;}  }
class C{  public boolean drawImage(Image img,int x,int y,Color bg,ImageObserver observer){  if (img == null) {    return true;  }  if (isHiDPIImage(img)) {    final int imgW=img.getWidth(null);    final int imgH=img.getHeight(null);    return drawHiDPIImage(img,x,y,x + imgW,y + imgH,0,0,imgW,imgH,bg,observer);  }  try {    return imagepipe.copyImage(this,img,x,y,bg,observer);  } catch (  InvalidPipeException e) {    try {      revalidateAll();      return imagepipe.copyImage(this,img,x,y,bg,observer);    } catch (    InvalidPipeException e2) {      return false;    }  } finally {    surfaceData.markDirty();  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (  String name : mValues.keySet()) {    String value=getAsString(name);    if (sb.length() > 0)     sb.append(" ");    sb.append(name + "=" + value);  }  return sb.toString();}  }
class C{  SamlTokenSpec buildIssueTokenSpec(Request req,Result authResult) throws InvalidRequestException, InvalidTimeRangeException, RequestFailedException, NoSuchIdPException {  assert req != null;  assert authResult != null && authResult.completed();  if (authResult.getAuthnMethod() == Result.AuthnMethod.EXTERNAL_ASSERTION) {    validateNoDelegation(req);    validateRequesterIsNotDelegate(req);  } else {    validateSignedActAsRequest(req);    validateDelegationAmbiguity(req);    validateActAsRequesterIsNotDelegate(req);    validateActAsToken(req);  }  SolutionUser delegate=delegationParser.extractDelegate(req.getRst());  final SamlTokenSpec.Confirmation confirmation=figureOutConfirmation(req,delegate,((authResult.getAuthnMethod() == Result.AuthnMethod.EXTERNAL_ASSERTION) || (authResult.getAuthnMethod() == Result.AuthnMethod.ASSERTION)) ? req.getSamlToken() : null);  assert !actAsReq(req) || delegate == null;  final ServerValidatableSamlToken templateToken=actAsReq(req) ? req.getActAsToken() : req.getSamlToken();  final AssertionType templateAssertion=actAsReq(req) ? getActAsAssertion(req) : getRequestersAssertion(req);  final PrincipalId delegateId=actAsReq(req) ? authResult.getPrincipalId() : ((delegate != null) ? delegate.getId() : null);  final DelegationSpec delSpec=buildDelegationSpec(req.getRst(),templateToken,templateAssertion,delegateId);  final RenewSpec renewSpec=RenewSpecExtractor.extractIssue(req.getRst(),templateAssertion);  final Iterable<String> audience=new RSTAudience(req.getRst());  final List<Advice> requestedAdvice=req.getRst().getAdviceSet() == null ? null : toSamlAuthorityAdvice(req.getRst().getAdviceSet());  final List<Advice> presentAdvice=templateToken == null ? null : templateToken.getAdvice();  return buildTokenSpec(req,authResult,confirmation,delSpec,renewSpec,audience,requestedAdvice,presentAdvice);}  }
class C{  protected void destroy(){}  }
class C{  public void testPartitioned() throws Exception {  cacheMode=PARTITIONED;  nearEnabled=true;  check();}  }
class C{  public String toMatrixString(String title) throws Exception {  StringBuffer text=new StringBuffer();  char[] IDChars={'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};  int IDWidth;  boolean fractional=false;  if (!m_ClassIsNominal) {    throw new Exception("Evaluation: No confusion matrix possible!");  }  double maxval=0;  for (int i=0; i < m_NumClasses; i++) {    for (int j=0; j < m_NumClasses; j++) {      double current=m_ConfusionMatrix[i][j];      if (current < 0) {        current*=-10;      }      if (current > maxval) {        maxval=current;      }      double fract=current - Math.rint(current);      if (!fractional && ((Math.log(fract) / Math.log(10)) >= -2)) {        fractional=true;      }    }  }  IDWidth=1 + Math.max((int)(Math.log(maxval) / Math.log(10) + (fractional ? 3 : 0)),(int)(Math.log(m_NumClasses) / Math.log(IDChars.length)));  text.append(title).append("\n");  for (int i=0; i < m_NumClasses; i++) {    if (fractional) {      text.append(" ").append(num2ShortID(i,IDChars,IDWidth - 3)).append("   ");    } else {      text.append(" ").append(num2ShortID(i,IDChars,IDWidth));    }  }  text.append("   <-- classified as\n");  for (int i=0; i < m_NumClasses; i++) {    for (int j=0; j < m_NumClasses; j++) {      text.append(" ").append(Utils.doubleToString(m_ConfusionMatrix[i][j],IDWidth,(fractional ? 2 : 0)));    }    text.append(" | ").append(num2ShortID(i,IDChars,IDWidth)).append(" = ").append(m_ClassNames[i]).append("\n");  }  return text.toString();}  }
class C{  private void unBindDrawables(View view){  if (view != null) {    try {      Drawable drawable=view.getBackground();      if (drawable != null) {        drawable.setCallback(null);      } else {      }      if (view instanceof ViewGroup && !(view instanceof AdapterView)) {        ViewGroup viewGroup=(ViewGroup)view;        int viewGroupChildCount=viewGroup.getChildCount();        for (int j=0; j < viewGroupChildCount; j++) {          unBindDrawables(viewGroup.getChildAt(j));        }        viewGroup.removeAllViews();      }    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public void parse(String systemId) throws IOException, SAXException {  parse(new InputSource(systemId));}  }
class C{  public void sort(Comparator<? super T> comparator){synchronized (mLock) {    if (mOriginalValues != null) {      Collections.sort(mOriginalValues,comparator);    } else {      Collections.sort(mObjects,comparator);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public GraphicLogAnalysisResultItem(String field){  this.field=field;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:28.913 -0500",hash_original_method="9C2885E2BFC08F88B4AF57AA760616C2",hash_generated_method="703A1692EF67AAA49968A6A28EF906E7") private void readBlinkingText(){  CharPos blinkingPos=new CharPos();  blinkingPos.startChar=mParcel.readInt();  blinkingPos.endChar=mParcel.readInt();  if (mBlinkingPosList == null) {    mBlinkingPosList=new ArrayList<CharPos>();  }  mBlinkingPosList.add(blinkingPos);}  }
class C{  public void liftUp(Row in,List<Row> nodes){  Iterator<Cell> i=in.cells.values().iterator();  for (; i.hasNext(); ) {    Cell c=i.next();    if (c.ref >= 0) {      Row to=nodes.get(c.ref);      int sum=to.uniformCmd(changeSkip);      if (sum >= 0) {        if (sum == c.cmd) {          if (changeSkip) {            if (c.skip != to.uniformSkip + 1) {              continue;            }            c.skip=to.uniformSkip + 1;          } else {            c.skip=0;          }          c.cnt+=to.uniformCnt;          c.ref=-1;        } else         if (c.cmd < 0) {          c.cnt=to.uniformCnt;          c.cmd=sum;          c.ref=-1;          if (changeSkip) {            c.skip=to.uniformSkip + 1;          } else {            c.skip=0;          }        }      }    }  }}  }
class C{  public Object eval(CallStack callstack,Interpreter interpreter) throws EvalError {  returnType=evalReturnType(callstack,interpreter);  evalNodes(callstack,interpreter);  NameSpace namespace=callstack.top();  BshMethod bshMethod=new BshMethod(this,namespace,modifiers);  try {    namespace.setMethod(name,bshMethod);  } catch (  UtilEvalError e) {    throw e.toEvalError(this,callstack);  }  return Primitive.VOID;}  }
class C{  public boolean hasNamePrefix(){  return super.hasElement(NamePrefix.KEY);}  }
class C{  private static void updateStoragePools(List<URI> ids,VirtualArrayAssignmentChanges changes){  if (ids.isEmpty()) {    return;  }  List<StoragePoolRestRep> storagePools=StoragePoolUtils.getStoragePools(ids);  for (  StoragePoolRestRep storagePool : storagePools) {    StoragePoolUpdate update=new StoragePoolUpdate();    update.setVarrayChanges(changes);    StoragePoolUtils.update(storagePool.getId(),update);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void removePriorityUnit(int id){  priorityUnitTargets.remove(id);}  }
class C{  @Override public final boolean equals(T o1,T o2){  return o1 == o2;}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public static void main(String... args) throws Exception {  new CheckJavadoc().run();}  }
class C{  void reset(){  if (!m_allocationWriteLock.isHeldByCurrentThread())   throw new IllegalMonitorStateException();  RWStore.this.m_storageStatsAddr=m_storageStatsAddr;  RWStore.this.m_committedNextAllocation=m_lastCommittedNextAllocation;  RWStore.this.m_metaBitsAddr=m_metaBitsAddr;}  }
class C{  public boolean cached(int i){  boolean ok;  int pos=lookup(i);  if (index[pos] == i) {    if (last_used[pos] > 0) {      ok=true;    } else {      ok=false;    }    ;  } else {    ok=false;  }  ;  return (ok);}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public ColorRange copy(ReadonlyTColor c,float variance){  ColorRange range=new ColorRange();  range.name=name;  if (c != null) {    float hue=c.hue() + variance * MathUtils.normalizedRandom();    range.hueConstraint=new GenericSet<FloatRange>(new FloatRange(hue,hue));    range.alphaConstraint=new GenericSet<FloatRange>(new FloatRange(c.alpha(),c.alpha()));  } else {    range.hueConstraint=hueConstraint.copy();    range.alphaConstraint=alphaConstraint.copy();  }  range.saturationConstraint=saturationConstraint.copy();  range.brightnessConstraint=brightnessConstraint.copy();  range.black=black.copy();  range.white=white.copy();  return range;}  }
class C{  public static int calcRWLCount(int lvl,double factor){  return ((int)Math.ceil(factor * Math.log10(2 + rand.nextInt(lvl * lvl)))) + rand.nextInt(2);}  }
class C{  public static synchronized String generateId(){  if (id == Long.MAX_VALUE) {    id=0;  } else {    id++;  }  return Long.toHexString(id);}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public static TourGuide init(Activity activity){  return new TourGuide(activity);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public IntIterator edgeRows(){  return getEdgeTable().rows();}  }
class C{  public void removeFromRoom(){  if (room != null) {    room.internalRemovePlayer(this);    room=null;  }}  }
class C{  protected final boolean canAutomaticallyAppendSemicolon(){  return !fProposal.isConstructor() && CharOperation.equals(new char[]{Signature.C_VOID},Signature.getReturnType(fProposal.getSignature()));}  }
class C{  protected void flushClasspathProblemMarkers(boolean flushCycleMarkers,boolean flushClasspathFormatMarkers,boolean flushOverlappingOutputMarkers){}  }
class C{  public void testSetOptions(){  if (!m_OptionTester.checkSetOptions()) {    fail("setOptions method failed.");  }}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  findAndInit(bcme.iterator());}  }
class C{  protected double computeNNForUniformData(final KNNQuery<NumberVector> knnQuery,final double[] min,final double[] extend){  final Random rand=random.getSingleThreadedRandom();  final int dim=min.length;  double[] buf=new double[dim];  double u=0.;  for (int i=0; i < sampleSize; i++) {    for (int d=0; d < buf.length; d++) {      buf[d]=min[d] + (rand.nextDouble() * extend[d]);    }    double kdist=knnQuery.getKNNForObject(DoubleVector.wrap(buf),k).getKNNDistance();    u+=MathUtil.powi(kdist,dim);  }  return u;}  }
class C{  public static String insertParameter(String classname,String desc){  if (desc.charAt(0) != '(')   return desc; else   return "(L" + classname.replace('.','/') + ';'+ desc.substring(1);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:04.067 -0500",hash_original_method="49C9E23BED9AC71209F0210F812D9D37",hash_generated_method="C9301FAA0B5F911E884F0B0D4E4BD72F") private void validatePattern(String template){}  }
class C{  public static void show(Context context,View view,@Duration int duration){  ToastBean bean=new ToastBean(context,view,duration);  show(bean);}  }
class C{  public void removeEpisode(TvShowEpisode episode){  if (episodes.contains(episode)) {    int oldValue=episodes.size();    episodes.remove(episode);    episode.removePropertyChangeListener(propertyChangeListener);    removeFromSeason(episode);    TvShowList.getInstance().removeEpisodeFromDb(episode);    saveToDb();    firePropertyChange(REMOVED_EPISODE,null,episode);    firePropertyChange(EPISODE_COUNT,oldValue,episodes.size());  }}  }
class C{  boolean isDuplicateRoleColumn(int column){  return duplicateRoleColumn.contains(column);}  }
class C{  public void testInternalTaskDefaultBalancing() throws Exception {  customLoadBalancer=false;  ignite=startGrids(GRID_CNT);  assertEquals(TASK_RESULT,ignite.compute().execute(GridInternalTestTask.class.getName(),null));  UUID nid=ignite.cluster().localNode().id();  GridTuple3<Boolean,Long,Long> ping=ignite.compute().execute(VisorNodePingTask.class.getName(),new VisorTaskArgument<>(nid,nid,false));  assertTrue(ping.get1());  assertEquals(TASK_RESULT,ignite.compute().execute(CustomTestTask.class.getName(),null));}  }
class C{  Object lookup(int handle){  return entries[handle];}  }
class C{  @Override public Map<String,Set<URI>> findExportMasks(StorageSystem storage,List<String> initiatorNames,boolean mustHaveAllPorts) throws DeviceControllerException {  _log.info("{} findExportMasks START...",storage.getLabel());  Map<String,Set<URI>> result=new HashMap<String,Set<URI>>();  List<Initiator> initiators=new ArrayList<Initiator>();  for (  String name : initiatorNames) {    initiators.add(ExportUtils.getInitiator(Initiator.toPortNetworkId(name),_dbClient));  }  if (_restAPIHelper.isClusteredHost(storage,initiators)) {    _log.debug("Executing findExportMasks using REST on Storage {}",storage.getLabel());    result=_restAPIHelper.findRESTExportMasks(storage,initiatorNames,mustHaveAllPorts);  } else {    _log.debug("Executing findExportMasks using SMIS on Storage {}",storage.getLabel());    result=findSMISExportMasks(storage,initiatorNames,mustHaveAllPorts);  }  _log.info("{} findExportMasks END...",storage.getLabel());  return result;}  }
class C{  public Version(int majorNum,int minorNum,int buildNum){  major=majorNum;  minor=minorNum;  build=buildNum;}  }
class C{  private void yPlacer(){  double changer=m_yRatio;  int lev_place=0;  if (m_groupNum > 0) {    m_groups[0].m_p.setTop(m_yRatio);    m_levels[0].m_start=0;    for (int noa=0; noa < m_groupNum; noa++) {      if (m_groups[noa].m_p.getTop() != changer) {        m_levels[lev_place].m_end=noa - 1;        lev_place++;        m_levels[lev_place].m_start=noa;        changer=m_groups[noa].m_p.getTop();      }      nodeY(m_groups[noa].m_p);    }    m_levels[lev_place].m_end=m_groupNum - 1;  }}  }
class C{  public Scroller(Context context,Interpolator interpolator,boolean flywheel){  mFinished=true;  mInterpolator=interpolator;  mPpi=context.getResources().getDisplayMetrics().density * 160.0f;  mDeceleration=computeDeceleration(ViewConfiguration.getScrollFriction());  mFlywheel=flywheel;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:13.481 -0500",hash_original_method="249D1EA65C901278A4D9A21CA58581D8",hash_generated_method="319B33627FD404284CF2FADC01D735DC") public int sendCommand(String command) throws IOException {  return sendCommand(command,null);}  }
class C{  public AppDataSnapshotServerMap(){}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof AbsoluteTableIdentifier)) {    return false;  }  AbsoluteTableIdentifier other=(AbsoluteTableIdentifier)obj;  if (carbonTableIdentifier == null) {    if (other.carbonTableIdentifier != null) {      return false;    }  } else   if (!carbonTableIdentifier.equals(other.carbonTableIdentifier)) {    return false;  }  if (storePath == null) {    if (other.storePath != null) {      return false;    }  } else   if (!storePath.equals(other.storePath)) {    return false;  }  return true;}  }
class C{  private void requestFragmenting(IgfsEntryInfo fileInfo){  IgfsFileMap map=fileInfo.fileMap();  assert map != null && !map.ranges().isEmpty();  Map<UUID,Collection<IgfsFileAffinityRange>> grpMap=U.newHashMap(map.ranges().size());  for (  IgfsFileAffinityRange range : map.ranges()) {    UUID nodeId=igfsCtx.data().affinityNode(range.affinityKey()).id();    Collection<IgfsFileAffinityRange> nodeRanges=grpMap.get(nodeId);    if (nodeRanges == null) {      nodeRanges=new LinkedList<>();      grpMap.put(nodeId,nodeRanges);    }    nodeRanges.addAll(range.split(igfsCtx.data().groupBlockSize()));  }  Collection<UUID> nodeIds=new IdentityHashSet(grpMap.keySet());  if (log.isDebugEnabled())   log.debug("Calculating fragmentizer groups for file [fileInfo=" + fileInfo + ", nodeIds="+ nodeIds+ ']');  Object old=fragmentingFiles.putIfAbsent(fileInfo.id(),nodeIds);  assert old == null;  for (  Map.Entry<UUID,Collection<IgfsFileAffinityRange>> entry : grpMap.entrySet()) {    UUID nodeId=entry.getKey();    IgfsFragmentizerRequest msg=new IgfsFragmentizerRequest(fileInfo.id(),entry.getValue());    try {      if (log.isDebugEnabled())       log.debug("Sending fragmentizer request to remote node [nodeId=" + nodeId + ", fileId="+ fileInfo.id()+ ", msg="+ msg+ ']');      sendWithRetries(nodeId,msg);    } catch (    IgniteCheckedException e) {      if (e.hasCause(ClusterTopologyCheckedException.class)) {        if (log.isDebugEnabled())         log.debug("Failed to send fragmentizer request to remote node (node left grid): " + nodeId);      } else       U.error(log,"Failed to send fragmentizer request to remote node [nodeId=" + nodeId + ", msg="+ msg+ ']',e);      nodeIds.remove(nodeId);    }  }  if (nodeIds.isEmpty()) {    if (log.isDebugEnabled())     log.debug("Got empty wait set for fragmentized file: " + fileInfo);    fragmentingFiles.remove(fileInfo.id(),nodeIds);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"download\"";  db.execSQL(sql);}  }
class C{  public void testCheckFoundWithPseudoSelectorAndWithResultAsFailed(){  LOGGER.debug("check found with pseudoSelector and result as failed");  String[] pseudoSelectors={":before",":after"};  initCheckerAndLaunch("src/test/resources/css/test5.css",pseudoSelectors,TestSolution.FAILED,".selector:after");}  }
class C{  private boolean containsPan(){  return component.containsGesture(HighLevelGesture.PAN_START) || component.containsGesture(HighLevelGesture.PAN_MOVE) || component.containsGesture(HighLevelGesture.PAN_END);}  }
class C{  public void testSwitchTabs_wayPoints(){  if (!runTest) {    Log.d(TAG,BigTestUtils.DISABLE_MESSAGE);    return;  }  EndToEndTestUtils.startRecording();  int i=0;  while ((System.currentTimeMillis() - startTime) < TEST_DURATION_IN_MILLISECONDS) {    EndToEndTestUtils.sendGps(10,10 * i);    EndToEndTestUtils.createWaypoint(i);    instrumentation.waitForIdleSync();    EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.generic_recording));    EndToEndTestUtils.pauseRecording();    EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.track_detail_map_tab));    instrumentation.waitForIdleSync();    EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.track_detail_chart_tab));    instrumentation.waitForIdleSync();    EndToEndTestUtils.SOLO.clickOnText(trackListActivity.getString(R.string.track_detail_stats_tab));    instrumentation.waitForIdleSync();    EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.generic_paused));    EndToEndTestUtils.resumeRecording();    logStatus(++i);  }  EndToEndTestUtils.stopRecording(true);}  }
class C{  public ClassConstant(ConstantPool pool,int index,int nameIndex){  super(pool,index);  _nameIndex=nameIndex;}  }
class C{  public boolean isProcessing(){  return mRunning.get();}  }
class C{  protected String prefsPrefix(){  return "tables/" + getTable().getSqlName() + "/columns/"+ getSqlName();}  }
class C{  @POST @Path("{path:.*}") @Consumes("application/vnd.api+json") public Response post(@PathParam("path") String path,@Context SecurityContext securityContext,String jsonapiDocument){  return build(elide.post(path,jsonapiDocument,getUser.apply(securityContext)));}  }
class C{  public Builder addTokenFilter(Class<? extends TokenFilterFactory> factory,Map<String,String> params) throws IOException {  Objects.requireNonNull(factory,"TokenFilter name may not be null");  tokenFilters.add(applyResourceLoader(newFactoryClassInstance(factory,applyDefaultParams(params))));  componentsAdded=true;  return this;}  }
class C{  private Stream<EdgeItem> streamOutEdges(Node node){  Predicate<EdgeItem> invisible=null;  return StreamSupport.stream(Spliterators.spliteratorUnknownSize(node.outEdges(),Spliterator.NONNULL),false).map(null).map(null).filter(invisible);}  }
class C{  public void testJsp() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  private void registerMBean(){  if (wroConfiguration.isJmxEnabled()) {    try {      mbeanServer=getMBeanServer();      final ObjectName name=getMBeanObjectName();      if (!mbeanServer.isRegistered(name)) {        mbeanServer.registerMBean(wroConfiguration,name);      }    } catch (    final JMException e) {      LOG.error("Exception occured while registering MBean",e);    }  }}  }
class C{  public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  protected void drawForm(Canvas c,float x,float y,int index,Legend legend){  if (legend.getColors()[index] == -2)   return;  mLegendFormPaint.setColor(legend.getColors()[index]);  float formsize=legend.getFormSize();  float half=formsize / 2f;switch (legend.getForm()) {case CIRCLE:    c.drawCircle(x + half,y,half,mLegendFormPaint);  break;case SQUARE:c.drawRect(x,y - half,x + formsize,y + half,mLegendFormPaint);break;case LINE:c.drawLine(x,y,x + formsize,y,mLegendFormPaint);break;}}  }
class C{  @Override public BigInteger computeClientEvidence(SRP6CryptoParams cryptoParams,SRP6ClientEvidenceContext ctx){  MessageDigest digest;  try {    digest=MessageDigest.getInstance(cryptoParams.H);  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException("Could not locate requested algorithm",e);  }  digest.update(SrpHandler.bigIntegerToUnsignedByteArray(cryptoParams.N));  byte[] hN=digest.digest();  digest.update(SrpHandler.bigIntegerToUnsignedByteArray(cryptoParams.g));  byte[] hg=digest.digest();  byte[] hNhg=xor(hN,hg);  digest.update(ctx.userID.getBytes(StandardCharsets.UTF_8));  byte[] hu=digest.digest();  digest.update(SrpHandler.bigIntegerToUnsignedByteArray(ctx.S));  byte[] hS=digest.digest();  digest.update(hNhg);  digest.update(hu);  digest.update(SrpHandler.bigIntegerToUnsignedByteArray(ctx.s));  digest.update(SrpHandler.bigIntegerToUnsignedByteArray(ctx.A));  digest.update(SrpHandler.bigIntegerToUnsignedByteArray(ctx.B));  digest.update(hS);  BigInteger ret=new BigInteger(1,digest.digest());  return ret;}  }
class C{  public void shutdown(){  messengers.getChannelMessenger().unregisterChannelSubscriber(m_chatChannelSubscribor,new RemoteName(chatChannelName,IChatChannel.class));  if (messengers.getMessenger().isConnected()) {    final RemoteName chatControllerName=ChatController.getChatControlerRemoteName(chatName);    final IChatController controller=(IChatController)messengers.getRemoteMessenger().getRemote(chatControllerName);    controller.leaveChat();  }}  }
class C{  protected PostgresMessages readMessage(boolean hasType) throws IOException {  PostgresMessages type;  int code=-1;  if (hasType) {    try {      beforeIdle();      while (true) {        try {          code=dataInput.read();        } catch (        SocketTimeoutException ex) {          idle();          continue;        }        if (!PostgresMessages.readTypeCorrect(code)) {          throw new IOException("Bad protocol read message: " + (char)code);        }        type=PostgresMessages.messageType(code);        break;      }    }  finally {      afterIdle();    }  } else {    type=PostgresMessages.STARTUP_MESSAGE_TYPE;    code=0;  }  if (code < 0)   return PostgresMessages.EOF_TYPE;  recvTap.in();  try {    int count=0;    if (code > 0)     count++;    int len=dataInput.readInt();    if ((len < 0) || (len > type.maxSize()))     throw new IOException(String.format("Implausible message length (%d) received.",len));    count+=len;    len-=4;    try {      rawMessageInput=new byte[len];      dataInput.readFully(rawMessageInput,0,len);      messageInput=new DataInputStream(new ByteArrayInputStream(rawMessageInput));    } catch (    OutOfMemoryError ex) {      throw new IOException(String.format("Unable to allocate read buffer of length (%d)",len));    }    bytesRead(count);    return type;  }  finally {    recvTap.out();  }}  }
class C{  public void addServiceConnectListener(final FileDownloadConnectListener listener){  FileDownloadEventPool.getImpl().addListener(DownloadServiceConnectChangedEvent.ID,listener);}  }
class C{  private boolean isTargetFile(Optional<FileInfo> currentFile2){  String inputFilename=currentFile2.get().getFile().getName();  SimpleDateFormat dateFormat=new SimpleDateFormat(targetFilename);  String substringOfTargetFile=dateFormat.format(new Date());  if (inputFilename.toLowerCase().contains(substringOfTargetFile.toLowerCase())) {    return true;  }  return false;}  }
class C{  private void transferEntry(Entry entry,Segment compactSegment){  compactSegment.append(entry);}  }
class C{  public final int bucketDocCount(long bucketOrd){  if (bucketOrd >= docCounts.size()) {    return 0;  } else {    return docCounts.get(bucketOrd);  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (!isActive() || !isAllNodes())   setIsDefault(false);  return true;}  }
class C{  public boolean intersects(double x,double y,double width,double height){  double tw=size.getWidth();  double th=size.getHeight();  return intersects(this.x,this.y,tw,th,x,y,width,height);}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public NullableSet(LinkedList<Production> productions){  boolean changed;  do {    changed=false;    for (    Production production : productions) {      NonTerminal lhs=production.getLHS();      if (!this.contains(lhs)) {        boolean nullable=true;        for (        Symbol symbol : production.getRHS()) {          if (!(symbol == Epsilon || this.contains(symbol))) {            nullable=false;            break;          }        }        if (nullable) {          this.add(lhs);          changed=true;        }      }    }  } while (changed);}  }
class C{  public void onUpdate(Project.NameKey project,Long oldValue,Long newValue){}  }
class C{  @Override public void buildSingleAverage(Averagable avg){  AttributeWeight other=(AttributeWeight)avg;  this.weight+=other.weight;  this.counter+=other.counter;}  }
class C{  public ConstantColumn(Class type,Object defaultValue){  super(type,defaultValue);}  }
class C{  public boolean compareAndSet(long cmp,long val){  return atomicLong.compareAndSet(cmp,val);}  }
class C{  public boolean extendsCanAccess(Environment env,ClassDeclaration c) throws ClassNotFound {  if (outerClass != null) {    return outerClass.canAccess(env,c);  }  ClassDefinition cdef=c.getClassDefinition(env);  if (cdef.isLocal()) {    throw new CompilerError("top local");  }  if (cdef.isInnerClass()) {    MemberDefinition f=cdef.getInnerClassMember();    if (f.isPublic()) {      return true;    }    if (f.isPrivate()) {      return getClassDeclaration().equals(f.getTopClass().getClassDeclaration());    }    return getName().getQualifier().equals(f.getClassDeclaration().getName().getQualifier());  }  if (cdef.isPublic()) {    return true;  }  return getName().getQualifier().equals(c.getName().getQualifier());}  }
class C{  public IXMLElement createElement(String fullName,String systemID,int lineNr){  return new XMLElement(fullName,systemID,lineNr);}  }
class C{  private <T>T doInvokeAny(Collection<? extends Callable<T>> tasks,boolean timed,long nanos) throws InterruptedException, ExecutionException, TimeoutException {  if (tasks == null)   throw new NullPointerException();  int ntasks=tasks.size();  if (ntasks == 0)   throw new IllegalArgumentException();  ArrayList<Future<T>> futures=new ArrayList<Future<T>>(ntasks);  ExecutorCompletionService<T> ecs=new ExecutorCompletionService<T>(this);  try {    ExecutionException ee=null;    final long deadline=timed ? System.nanoTime() + nanos : 0L;    Iterator<? extends Callable<T>> it=tasks.iterator();    futures.add(ecs.submit(it.next()));    --ntasks;    int active=1;    for (; ; ) {      Future<T> f=ecs.poll();      if (f == null) {        if (ntasks > 0) {          --ntasks;          futures.add(ecs.submit(it.next()));          ++active;        } else         if (active == 0)         break; else         if (timed) {          f=ecs.poll(nanos,TimeUnit.NANOSECONDS);          if (f == null)           throw new TimeoutException();          nanos=deadline - System.nanoTime();        } else         f=ecs.take();      }      if (f != null) {        --active;        try {          return f.get();        } catch (        ExecutionException eex) {          ee=eex;        }catch (        RuntimeException rex) {          ee=new ExecutionException(rex);        }      }    }    if (ee == null)     ee=new ExecutionException();    throw ee;  }  finally {    for (int i=0, size=futures.size(); i < size; i++)     futures.get(i).cancel(true);  }}  }
class C{  public void enableContentWrap(boolean enable){  if (enable) {    this.manager=new LinearLayoutManagerWrap(getContext(),VERTICAL,false);    setLayoutManager(manager);  } else   setDefaultLayoutManager();}  }
class C{  public void onFileInfoDequeued(){  if (sLogger.isActivated()) {    sLogger.info("Group file info with transferId " + mFileTransferId + " dequeued successfully.");  }synchronized (mLock) {    mFileTransferService.removeGroupFileTransfer(mFileTransferId);    setStateAndReasonCode(State.TRANSFERRED,ReasonCode.UNSPECIFIED);  }  mImService.tryToDequeueFileTransfers();}  }
class C{  public boolean contains(DetectorFactory factory){  return memberSet.contains(factory);}  }
class C{  public int updateByPrimaryKeySelective(User record) throws SQLException {  int rows=sqlMapClient.update("t_user.ibatorgenerated_updateByPrimaryKeySelective",record);  return rows;}  }
class C{  public NinePatchDrawable(Resources res,Bitmap bitmap,byte[] chunk,Rect padding,String srcName){  this(new NinePatchState(new NinePatch(bitmap,chunk,srcName),padding),res);  mNinePatchState.mTargetDensity=mTargetDensity;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);}  }
class C{  final public static double[] sphericalBetween(double phi1,double lambda0,double c,double Az,int n){  double cosphi1=Math.cos(phi1);  double sinphi1=Math.sin(phi1);  double cosAz=Math.cos(Az);  double sinAz=Math.sin(Az);  int end=n << 1;  double[] points=new double[end + 2];  points[0]=phi1;  points[1]=lambda0;  double inc=c / n;  c=inc;  for (int i=2; i <= end; i+=2, c+=inc) {    double sinc=Math.sin(c);    double cosc=Math.cos(c);    points[i]=Math.asin(sinphi1 * cosc + cosphi1 * sinc * cosAz);    points[i + 1]=Math.atan2(sinc * sinAz,cosphi1 * cosc - sinphi1 * sinc * cosAz) + lambda0;  }  return points;}  }
class C{  public static void sort(Comparable[] a){  StdRandom.shuffle(a);  sort(a,0,a.length - 1);  assert isSorted(a);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.SCRIPT__ANNOTATIONS:    return annotations != null && !annotations.isEmpty();case N4JSPackage.SCRIPT__SCRIPT_ELEMENTS:  return scriptElements != null && !scriptElements.isEmpty();case N4JSPackage.SCRIPT__MODULE:return module != null;case N4JSPackage.SCRIPT__FLAGGED_USAGE_MARKING_FINISHED:return flaggedUsageMarkingFinished != FLAGGED_USAGE_MARKING_FINISHED_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  StepProgress stepprog=LOG.isVerbose() ? new StepProgress("LDF",3) : null;  final int dim=RelationUtil.dimensionality(relation);  DBIDs ids=relation.getDBIDs();  LOG.beginStep(stepprog,1,"Materializing neighborhoods w.r.t. distance function.");  KNNQuery<O> knnq=DatabaseUtil.precomputedKNNQuery(database,relation,getDistanceFunction(),k);  LOG.beginStep(stepprog,2,"Computing LDEs.");  WritableDoubleDataStore ldes=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  FiniteProgress densProgress=LOG.isVerbose() ? new FiniteProgress("Densities",ids.size(),LOG) : null;  for (DBIDIter it=ids.iter(); it.valid(); it.advance()) {    final KNNList neighbors=knnq.getKNNForDBID(it,k);    double sum=0.0;    int count=0;    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {      if (DBIDUtil.equal(neighbor,it)) {        continue;      }      final double nkdist=knnq.getKNNForDBID(neighbor,k).getKNNDistance();      if (!(nkdist > 0.) || nkdist == Double.POSITIVE_INFINITY) {        sum=Double.POSITIVE_INFINITY;        count++;        break;      }      final double v=MathUtil.max(nkdist,neighbor.doubleValue()) / (h * nkdist);      sum+=kernel.density(v) / MathUtil.powi(h * nkdist,dim);      count++;    }    ldes.putDouble(it,sum / count);    LOG.incrementProcessed(densProgress);  }  LOG.ensureCompleted(densProgress);  LOG.beginStep(stepprog,3,"Computing LDFs.");  WritableDoubleDataStore ldfs=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_STATIC);  DoubleMinMax lofminmax=new DoubleMinMax();  FiniteProgress progressLOFs=LOG.isVerbose() ? new FiniteProgress("Local Density Factors",ids.size(),LOG) : null;  for (DBIDIter it=ids.iter(); it.valid(); it.advance()) {    final double lrdp=ldes.doubleValue(it);    final KNNList neighbors=knnq.getKNNForDBID(it,k);    double sum=0.0;    int count=0;    for (DBIDIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {      if (DBIDUtil.equal(neighbor,it)) {        continue;      }      sum+=ldes.doubleValue(neighbor);      count++;    }    sum/=count;    final double div=lrdp + c * sum;    double ldf=div == Double.POSITIVE_INFINITY ? (sum < Double.POSITIVE_INFINITY ? 0. : 1) : (div > 0) ? sum / div : 0;    ldfs.putDouble(it,ldf);    lofminmax.put(ldf);    LOG.incrementProcessed(progressLOFs);  }  LOG.ensureCompleted(progressLOFs);  LOG.setCompleted(stepprog);  DoubleRelation scoreResult=new MaterializedDoubleRelation("Local Density Factor","ldf-outlier",ldfs,ids);  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(lofminmax.getMin(),lofminmax.getMax(),0.0,1. / c,1 / (1 + c));  OutlierResult result=new OutlierResult(scoreMeta,scoreResult);  return result;}  }
class C{  public static BufferedImage readRGBImageFromYCCK(InputStream in,ICC_Profile cmykProfile) throws IOException {  ImageInputStream inputStream=null;  ImageReader reader=ImageIO.getImageReadersByFormatName("JPEG").next();  inputStream=(in instanceof ImageInputStream) ? (ImageInputStream)in : ImageIO.createImageInputStream(in);  reader.setInput(inputStream);  Raster raster=reader.readRaster(0,null);  BufferedImage image=createRGBImageFromYCCK(raster,cmykProfile);  return image;}  }
class C{  public int uploadMask(int w,int h,int maskscan,int maskoff,byte[] mask){  int maskPic=XRUtils.None;  if (mask != null) {    float maskAlpha=xrMgr.isTexturePaintActive() ? xrMgr.getExtraAlpha() : 1.0f;    con.putMaskImage(maskPixmap,maskGC,mask,0,0,0,0,w,h,maskoff,maskscan,maskAlpha);    maskPic=maskPicture;  } else   if (xrMgr.isTexturePaintActive()) {    maskPic=xrMgr.getExtraAlphaMask();  }  return maskPic;}  }
class C{  public static void askPassword(@Nullable Project project,@NotNull MasterKeyPasswordSafe safe,@NotNull Class<?> requestor) throws PasswordSafeException {  if (safe.setMasterPassword("")) {    return;  }  if (!enterMasterPasswordDialog(project,safe,requestor).showAndGet()) {    throw new MasterPasswordUnavailableException(PasswordComponentBase.getRequestorTitle(requestor) + ": Cancelled by user");  }}  }
class C{  public MailContent cell(String content){  return tag("td").text(content).end();}  }
class C{  public void paintRadioButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void addListener(Listener<Dibit> listener){  mBroadcaster.addListener(listener);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public ComponentAnimation createAnimateHierarchy(final int duration){  return animateHierarchy(duration,false,255,false);}  }
class C{  public final CC sizeGroupX(String s){  hor.setSizeGroup(s);  return this;}  }
class C{  public static double nextGaussian(){synchronized (random) {    return random.nextGaussian();  }}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  synchronized private void releaseConnectionIDLock(){  notify();}  }
class C{  public void updateNeuronsByPriority(){  for (  Neuron neuron : prioritySortedNeuronList) {    neuron.update();    neuron.setToBufferVals();  }}  }
class C{  public String toString(cp_info constant_pool[]){  cp_info bsm=constant_pool[bootstrap_method_index];  cp_info nat=constant_pool[name_and_type_index];  return nat.toString(constant_pool) + " - " + bsm.toString(constant_pool);}  }
class C{  public static <V>boolean addListNotNullValue(List<V> sourceList,V value){  return (sourceList != null && value != null) ? sourceList.add(value) : false;}  }
class C{  @Override public CertificateTokenValidationExtraInfo extraInfo(){  return extraInfo;}  }
class C{  protected void fireDataStatusIEvent(String AD_Message,String info){  DataStatusEvent e=createDSE();  e.setInfo(AD_Message,info,false,false);  fireDataStatusChanged(e);}  }
class C{  public void testNullChecking(){  ObjectNode o1=JsonNodeFactory.instance.objectNode();  ObjectNode o2=JsonNodeFactory.instance.objectNode();  o1.putAll(o2);  assertEquals(0,o1.size());  assertEquals(0,o2.size());  o1.put("x",(ObjectNode)null);  JsonNode n=o1.get("x");  assertNotNull(n);  assertSame(n,NullNode.instance);  o1.put("str",(String)null);  n=o1.get("str");  assertNotNull(n);  assertSame(n,NullNode.instance);  o1.put("d",(BigDecimal)null);  n=o1.get("d");  assertNotNull(n);  assertSame(n,NullNode.instance);}  }
class C{  public static URLEntity createUrlEntity(final int start,final int end,final String url,final String expandedURL,final String displayURL){  return new URLEntityJSONImpl(start,end,url,expandedURL,displayURL);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:55.605 -0500",hash_original_method="03ED4805F1B71684BC51E366A02690AE",hash_generated_method="6FA53809A465BFB793C30C8A79112408") public static ContentProviderOperation newUpdateOperation(Uri uri,byte[] data){  ContentValues values=new ContentValues();  values.put(Columns.DATA,data);  return ContentProviderOperation.newUpdate(uri).withValues(values).build();}  }
class C{  public boolean lessThan(DMatch it){  return distance < it.distance;}  }
class C{  private void trackScreenSurface(SurfaceData sd){  if (!done && sd instanceof D3DWindowSurfaceData) {synchronized (this) {      if (d3dwSurfaces == null) {        d3dwSurfaces=new ArrayList<D3DWindowSurfaceData>();      }      D3DWindowSurfaceData d3dw=(D3DWindowSurfaceData)sd;      if (!d3dwSurfaces.contains(d3dw)) {        d3dwSurfaces.add(d3dw);      }    }    startUpdateThread();  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.139 -0400",hash_original_method="22D629DDEBB48B37E092B39B773F8203",hash_generated_method="1CC2AFDFE85EF85E31B7370C537CF09C") public long nextLong(long least,long bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextLong(bound - least) + least;}  }
class C{  public Add(){  super(Number.class,Number.class,Number.class);}  }
class C{  public Global includedAttributes(LocalAttribute... includedAattributes){  for (  LocalAttribute attribute : includedAattributes)   global.attributes.add(attribute.toXStream());  return this;}  }
class C{  private void updateSearchBadge(){  int visibility=View.GONE;  Drawable icon=null;  CharSequence text=null;  if (mSearchable.useBadgeIcon()) {    icon=mActivityContext.getResources().getDrawable(mSearchable.getIconId());    visibility=View.VISIBLE;    if (DBG)     Log.d(LOG_TAG,"Using badge icon: " + mSearchable.getIconId());  } else   if (mSearchable.useBadgeLabel()) {    text=mActivityContext.getResources().getText(mSearchable.getLabelId()).toString();    visibility=View.VISIBLE;    if (DBG)     Log.d(LOG_TAG,"Using badge label: " + mSearchable.getLabelId());  }  mBadgeLabel.setCompoundDrawablesWithIntrinsicBounds(icon,null,null,null);  mBadgeLabel.setText(text);  mBadgeLabel.setVisibility(visibility);}  }
class C{  public Vertex applyGET(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex result=null;  Vertex relationship=arguments.get(0).getTarget().applyQuotient(variables,network);  Vertex source=arguments.get(1).getTarget().applyQuotient(variables,network);  Vertex index=getRelationship(Primitive.INDEX);  Vertex lastindex=getRelationship(Primitive.LASTINDEX);  if ((index != null) && (index.getData() instanceof Number)) {    int position=((Number)index.getData()).intValue();    List<Vertex> values=source.orderedRelations(relationship);    if (values != null && position > 0 && position <= values.size()) {      result=values.get(position - 1);    }  } else   if ((lastindex != null) && (lastindex.getData() instanceof Number)) {    int position=((Number)lastindex.getData()).intValue();    List<Vertex> values=source.orderedRelations(relationship);    if (values != null && position > 0 && position <= values.size()) {      result=values.get(values.size() - position);    }  } else {    if (arguments.size() > 2) {      Vertex associate=arguments.get(2).getTarget().applyQuotient(variables,network);      Vertex associateRelationship=arguments.get(3).getTarget().applyQuotient(variables,network);      result=source.mostConsciousWithAssoiate(relationship,associate,associateRelationship);    } else {      result=source.mostConscious(relationship);    }  }  if (result == null) {    Collection<Relationship> words=relationship.getRelationships(Primitive.WORD);    if (words != null) {      Set<Vertex> processed=new HashSet<Vertex>();      processed.add(relationship);      for (      Relationship word : words) {        Collection<Relationship> otherMeanings=word.getTarget().getRelationships(Primitive.MEANING);        if (otherMeanings != null) {          for (          Relationship meaning : otherMeanings) {            if (!processed.contains(meaning.getTarget())) {              processed.add(meaning.getTarget());              result=source.mostConscious(meaning.getTarget());              if (result != null) {                break;              }            }          }        }      }    }    if (result == null) {      result=network.createVertex(Primitive.NULL);    }  }  return result;}  }
class C{  protected String generateConfigurationPropertiesForConfigurationTypeForContainerType(String typeAsName,ConfigurationType type,String containerId,ContainerType containerType) throws Exception {  StringBuilder output=new StringBuilder();  output.append("h5. For " + containerType + " container "+ computedFQCN(this.containerFactory.getContainerClass(containerId,containerType).getName()));  output.append(LINE_SEPARATOR);  output.append(LINE_SEPARATOR);  output.append("|| Property name || Java Property || Supported? || Default value || Javadoc ||");  output.append(LINE_SEPARATOR);  Class configurationClass=Class.forName(this.configurationFactory.getConfigurationClass(containerId,containerType,type).getName());  Configuration slc;  if (type != ConfigurationType.RUNTIME) {    slc=(LocalConfiguration)configurationClass.getConstructor(new Class[]{String.class}).newInstance(new Object[]{"whatever"});  } else {    slc=(RuntimeConfiguration)configurationClass.newInstance();  }  boolean supportsDatasourceOrResource=false;  Map<String,Boolean> properties=this.configurationCapabilityFactory.createConfigurationCapability(containerId,containerType,type).getProperties();  Set<String> sortedPropertyNames=new TreeSet<String>(properties.keySet());  for (  String property : sortedPropertyNames) {    if (property.equals(GeneralPropertySet.SPAWN_PROCESS) && ContainerType.EMBEDDED.equals(containerType)) {      continue;    }    if (property.startsWith(DATASOURCE_PREFIX) || ResourcePropertySet.RESOURCE.equals(property)) {      supportsDatasourceOrResource=true;      continue;    }    Field propertySetField=findPropertySetFieldName(property);    output.append("| [" + property + "|Configuration properties] | ");    if (propertySetField != null) {      String propertySetFieldClassName=propertySetField.getDeclaringClass().getSimpleName();      output.append("[" + propertySetFieldClassName + "."+ propertySetField.getName()+ "|Configuration properties]");    }    output.append(" | ");    boolean supported=properties.get(property);    output.append(supported ? "(/)" : "(x)");    if (GeneralPropertySet.JAVA_HOME.equals(property)) {      String javaVersion;      String extra="";      if (JAVA4_CONTAINERS.contains(containerId)) {        javaVersion="4";      } else       if (JAVA5_CONTAINERS.contains(containerId)) {        javaVersion="5";      } else       if (JAVA6_CONTAINERS.contains(containerId)) {        javaVersion="6";      } else       if (JAVA7_CONTAINERS.contains(containerId)) {        javaVersion="7";      } else       if (JAVA8_CONTAINERS.contains(containerId)) {        javaVersion="8";      } else       if ("jetty7x".equals(containerId)) {        javaVersion="5 if no datasources are to be deployed, 6 otherwise";      } else       if ("jetty9x".equals(containerId)) {        javaVersion="7 (Jetty 9.0.x, 9.1.x and 9.2.x) or 8 (Jetty 9.3.x)";      } else       if ("jonas5x".equals(containerId)) {        javaVersion="5 (JOnAS 5.0.x, 5.1.x and 5.2.x) or 6 (JOnAS 5.3.x)";      } else {        throw new IllegalArgumentException("Java version for " + containerId + " is not defined");      }      if (containerId.startsWith("websphere")) {        extra=LINE_SEPARATOR + "{_}By default, CARGO will use the JVM from the " + "WebSphere installation directory{_}";      }      output.append(" | {_}JAVA_HOME version " + javaVersion + " or newer{_}"+ extra+ " |");    } else     if (JonasPropertySet.JONAS_SERVICES_LIST.equals(property)) {      output.append(" | {_}Will be loaded from the{_} {{conf/jonas.properties}} {_}file " + "in the container home directory{_} |");    } else {      output.append(" | " + (slc.getPropertyValue(property) == null ? "N/A" : "{{" + slc.getPropertyValue(property) + "}}") + " |");    }    if (supported && propertySetField != null) {      String propertySetFieldUrl=JAVADOC_URL_PREFIX + propertySetField.getDeclaringClass().getName().replace('.','/') + ".html#"+ propertySetField.getName();      output.append(" [(*g)|" + propertySetFieldUrl + "]");    }    output.append(" |");    output.append(LINE_SEPARATOR);  }  if (supportsDatasourceOrResource) {    output.append("{info:title=Datasource and Resource configuration}");    output.append(LINE_SEPARATOR);    output.append("In addition to the forementioned properties, this container ");    output.append("configuration can also set up datasources and/or resources. ");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);    output.append("For more details, please read: [DataSource and Resource Support].");    output.append(LINE_SEPARATOR);    output.append("{info}");    output.append(LINE_SEPARATOR);  }  if (ConfigurationType.STANDALONE.equals(type) && containerId.startsWith("weblogic")) {    output.append("{note}");    output.append("Some versions of WebLogic require you to have a complex password, ");    output.append("i.e. only {{weblogic}} is not enough.");    output.append(LINE_SEPARATOR);    output.append("If you get an error message similar to the below, please include a ");    output.append("number in your WebLogic password, for example {{weblogic1}}.");    output.append(LINE_SEPARATOR);    output.append(LINE_SEPARATOR);    output.append("{code}");    output.append(LINE_SEPARATOR);    output.append("<Critical> <WebLogicServer> <BEA-000386> <Server subsystem failed. ");    output.append("Reason: java.lang.AssertionError:");    output.append("java.lang.reflect.InvocationTargetException");    output.append(LINE_SEPARATOR);    output.append("    at weblogic.descriptor.DescriptorManager$");    output.append("SecurityServiceImpl$SecurityProxy._invokeServiceMethod");    output.append(LINE_SEPARATOR);    output.append("    at weblogic.descriptor.DescriptorManager$SecurityServiceImpl$");    output.append("SecurityProxy.decrypt");    output.append(LINE_SEPARATOR);    output.append("    at weblogic.descriptor.DescriptorManager$");    output.append("SecurityServiceImpl.decrypt");    output.append(LINE_SEPARATOR);    output.append("    at weblogic.descriptor.internal.AbstractDescriptorBean._decrypt");    output.append(LINE_SEPARATOR);    output.append("    at weblogic.management.configuration.");    output.append("SecurityConfigurationMBeanImpl.getCredential");    output.append(LINE_SEPARATOR);    output.append("    at weblogic.security.internal.ServerPrincipalValidatorImpl.");    output.append("getSecret");    output.append(LINE_SEPARATOR);    output.append("    at weblogic.security.internal.ServerPrincipalValidatorImpl.sign");    output.append("{code}");    output.append(LINE_SEPARATOR);    output.append("{note}");    output.append(LINE_SEPARATOR);  }  return output.toString();}  }
class C{  public static byte[] longToBytes(long data,int n){  byte buf[]=new byte[n];  for (int i=n - 1; i >= 0; i--) {    buf[i]=(byte)data;    data=data >> 8;  }  return buf;}  }
class C{  public void addZone(String id,Component zone,String constraints){  Component previousZone=getZone(id);  if (previousZone != null) {    remove(previousZone);    idToZones.remove(id);  }  if (zone instanceof JComponent) {    JComponent jc=(JComponent)zone;    if (jc.getBorder() == null || jc.getBorder() instanceof UIResource) {      if (jc instanceof JLabel) {        jc.setBorder(new CompoundBorder(zoneBorder,new EmptyBorder(0,2,0,2)));        ((JLabel)jc).setText(" ");      } else {        jc.setBorder(zoneBorder);      }    }  }  add(zone,constraints);  idToZones.put(id,zone);}  }
class C{  private static void checkForXStream(){  try {    Class.forName("com.thoughtworks.xstream.XStream");    m_Present=true;  } catch (  Exception e) {    m_Present=false;  }}  }
class C{  public static final void drawRectangleFromStartToEnd(GL2 gl,double sx,double sy,double ex,double ey,boolean points){  gl.glBegin(GL.GL_LINE_LOOP);  gl.glVertex2d(sx,sy);  gl.glVertex2d(ex,sy);  gl.glVertex2d(ex,ey);  gl.glVertex2d(sx,ey);  gl.glEnd();  if (points) {    gl.glBegin(GL.GL_POINTS);    gl.glVertex2d(sx,sy);    gl.glVertex2d(ex,sy);    gl.glVertex2d(ex,ey);    gl.glVertex2d(sx,ey);    gl.glEnd();  }}  }
class C{  public long execute(){  if (mPreparedStatement == null) {    throw new IllegalStateException("you must prepare this inserter before calling " + "execute");  }  try {    if (DEBUG)     Log.v(TAG,"--- doing insert or replace in table " + mTableName);    return mPreparedStatement.executeInsert();  } catch (  SQLException e) {    Log.e(TAG,"Error executing InsertHelper with table " + mTableName,e);    return -1;  } finally {    mPreparedStatement=null;  }}  }
class C{  public void addSprite(float x,float y,float z,String[] mask,int d,float pixelScale,boolean rotX,boolean rotY,boolean rotZ,boolean mirrorX,boolean mirrorY,float expansion){  int w=mask[0].length();  int h=mask.length;  float x1=x - expansion;  float y1=y - expansion;  float z1=z - expansion;  int wDir=0;  int hDir=0;  int dDir=0;  float wScale=1F + (expansion / (w * pixelScale));  float hScale=1F + (expansion / (h * pixelScale));  if (!rotX) {    if (!rotY) {      if (!rotZ) {        wDir=0;        hDir=1;        dDir=2;      } else {        wDir=1;        hDir=0;        dDir=2;      }    } else {      if (!rotZ) {        wDir=2;        hDir=1;        dDir=0;      } else {        wDir=2;        hDir=0;        dDir=1;      }    }  } else {    if (!rotY) {      if (!rotZ) {        wDir=0;        hDir=2;        dDir=1;      } else {        wDir=1;        hDir=2;        dDir=0;      }    } else {      if (!rotZ) {        wDir=2;        hDir=0;        dDir=1;      } else {        wDir=2;        hDir=1;        dDir=0;      }    }  }  int texStartX=textureOffsetX + (mirrorX ? w - 1 : 0);  int texStartY=textureOffsetY + (mirrorY ? h - 1 : 0);  int texDirX=(mirrorX ? -1 : 1);  int texDirY=(mirrorY ? -1 : 1);  float wVoxSize=getPixelSize(wScale,hScale,d * pixelScale + expansion * 2,0,1,wDir,1,1);  float hVoxSize=getPixelSize(wScale,hScale,d * pixelScale + expansion * 2,0,1,hDir,1,1);  float dVoxSize=getPixelSize(wScale,hScale,d * pixelScale + expansion * 2,0,1,dDir,1,1);  for (int i=0; i < w; i++) {    for (int j=0; j < h; j++) {      if (mask[j].charAt(i) == '1') {        addPixel(x1 + getPixelSize(wScale,hScale,0,wDir,hDir,0,i,j),y1 + getPixelSize(wScale,hScale,0,wDir,hDir,1,i,j),z1 + getPixelSize(wScale,hScale,0,wDir,hDir,2,i,j),new float[]{wVoxSize,hVoxSize,dVoxSize},texStartX + texDirX * i,texStartY + texDirY * j);      }    }  }}  }
class C{  private void breakupLabel(){  int prev=0, noa;  for (noa=0; noa < m_label.length(); noa++) {    if (m_label.charAt(noa) == '\n') {      m_lines.addElement(m_label.substring(prev,noa));      prev=noa + 1;    }  }  m_lines.addElement(m_label.substring(prev,noa));}  }
class C{  @Override public synchronized void removeConfigurationListener(ConfigurationListener cl){}  }
class C{  @Override protected void initListeners(){}  }
class C{  public static Short valueOf(String string) throws NumberFormatException {  return valueOf(parseShort(string));}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthSliderUI((JSlider)c);}  }
class C{  private void init() throws IOException {  boolean initialized=false;  String expand=Security.getProperty("policy.expandProperties");  if (expand == null) {    expand=System.getProperty("policy.expandProperties");  }  if ("false".equals(expand)) {    expandProp=false;  }  Map<String,List<AppConfigurationEntry>> newConfig=new HashMap<>();  if (url != null) {    if (debugConfig != null) {      debugConfig.println("reading " + url);    }    init(url,newConfig);    configuration=newConfig;    return;  }  String allowSys=Security.getProperty("policy.allowSystemProperty");  if ("true".equalsIgnoreCase(allowSys)) {    String extra_config=System.getProperty("java.security.auth.login.config");    if (extra_config != null) {      boolean overrideAll=false;      if (extra_config.startsWith("=")) {        overrideAll=true;        extra_config=extra_config.substring(1);      }      try {        extra_config=PropertyExpander.expand(extra_config);      } catch (      PropertyExpander.ExpandException peee) {        throw ioException("Unable.to.properly.expand.config",extra_config);      }      URL configURL=null;      try {        configURL=new URL(extra_config);      } catch (      MalformedURLException mue) {        File configFile=new File(extra_config);        if (configFile.exists()) {          configURL=configFile.toURI().toURL();        } else {          throw ioException("extra.config.No.such.file.or.directory.",extra_config);        }      }      if (debugConfig != null) {        debugConfig.println("reading " + configURL);      }      init(configURL,newConfig);      initialized=true;      if (overrideAll) {        if (debugConfig != null) {          debugConfig.println("overriding other policies!");        }        configuration=newConfig;        return;      }    }  }  int n=1;  String config_url;  while ((config_url=Security.getProperty("login.config.url." + n)) != null) {    try {      config_url=PropertyExpander.expand(config_url).replace(File.separatorChar,'/');      if (debugConfig != null) {        debugConfig.println("\tReading config: " + config_url);      }      init(new URL(config_url),newConfig);      initialized=true;    } catch (    PropertyExpander.ExpandException peee) {      throw ioException("Unable.to.properly.expand.config",config_url);    }    n++;  }  if (initialized == false && n == 1 && config_url == null) {    if (debugConfig != null) {      debugConfig.println("\tReading Policy " + "from ~/.java.login.config");    }    config_url=System.getProperty("user.home");    String userConfigFile=config_url + File.separatorChar + ".java.login.config";    if (new File(userConfigFile).exists()) {      init(new File(userConfigFile).toURI().toURL(),newConfig);    }  }  configuration=newConfig;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size);  Object[] tab=table;  for (int i=0; i < tab.length; i+=2) {    Object key=tab[i];    if (key != null) {      s.writeObject(unmaskNull(key));      s.writeObject(tab[i + 1]);    }  }}  }
class C{  private static boolean isServerProblem(Object error){  return (error instanceof ServerError) || (error instanceof AuthFailureError);}  }
class C{  public static String formatWeight(Double value){  if (value == null) {    return "-";  }  DecimalFormat weightFormat=new DecimalFormat(WEIGHT_FORMAT,new DecimalFormatSymbols(Locale.ENGLISH));  return weightFormat.format(formatWeightToDouble(value));}  }
class C{  public void disableUpdateNotifier(){  notifyEnabled.set(false);}  }
class C{  public static String checkNotEmpty(String string,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && TextUtils.isEmpty(string)) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }  return string;}  }
class C{  public FreeTextSuggester(Analyzer indexAnalyzer,Analyzer queryAnalyzer){  this(indexAnalyzer,queryAnalyzer,DEFAULT_GRAMS);}  }
class C{  private int maxDelimiterLength(byte[][] delims){  int maxDelimLen=0;  for (  byte[] delim : delims) {    if (delim == null)     throw new IllegalArgumentException("Delimiter cannot be null."); else     if (maxDelimLen < delim.length)     maxDelimLen=delim.length;  }  return maxDelimLen;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.IF_STATEMENT;}  }
class C{  public void remove(String userId,String domainId,String instanceId) throws ConflictException, ServerException, NotFoundException {  final PermissionsDao<? extends AbstractPermissions> permissionsDao=getPermissionsDao(domainId);  if (userHasLastSetPermissions(permissionsDao,userId,instanceId)) {    throw new ConflictException("Can't remove permissions because there is not any another user with permission 'setPermissions'");  }  permissionsDao.remove(userId,instanceId);}  }
class C{  @Override public <C>C readObject(final InputStream inputStream,final Class<? extends C> clazz) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  public MutableDouble3D(final MutableInt2D p){  x=p.x;  y=p.y;  z=0.0;}  }
class C{  public APIConnectionWrapper(APIConnection apiConnection){  this.apiConnection=apiConnection;}  }
class C{  public boolean isConnected(){  return (mGoogleApiClient != null && mGoogleApiClient.isConnected());}  }
class C{  public NbtTagIntArray(){  this.value=EMPTY;}  }
class C{  public int interpValueAt(double lat,double lon,Projection proj){  double lat_index=-1;  double lon_index=-1;  GridData gridData=getData();  if (!(gridData instanceof GridData.Int)) {    Debug.error("OMGrid.interpValueAt only works for integer data.");    return 0;  }  int[][] data=((GridData.Int)gridData).getData();  boolean major=gridData.getMajor();  if (renderType == RENDERTYPE_LATLON) {    lat_index=(lat - latitude) / verticalResolution;    lon_index=(lon - longitude) / horizontalResolution;  } else   if (renderType == RENDERTYPE_XY || renderType == RENDERTYPE_OFFSET) {    if (getNeedToRegenerate()) {      if (proj == null) {        return GRID_NULL;      }      generate(proj);    }    Point pt=(Point)proj.forward(lat,lon,new Point());    lat_index=(pt.y - point1.y) / verticalResolution;    lon_index=(pt.x - point1.x) / horizontalResolution;  }  if ((lat_index >= 0 || lat_index < rows) && (lon_index >= 0 || lon_index < columns)) {    int lflon_index=(int)Math.floor(lon_index);    int lclon_index=(int)Math.ceil(lon_index);    int lflat_index=(int)Math.floor(lat_index);    int lclat_index=(int)Math.ceil(lat_index);    if (Debug.debugging("grid")) {      System.out.println("***Elevation Map***");      for (int l=lclat_index + 5; l > lflat_index - 5; l--) {        System.out.println();        for (int k=lflon_index - 5; k < lclon_index + 5; k++) {          if ((l >= 0 || l < rows) && (k >= 0 || k < columns)) {            if (major == COLUMN_MAJOR) {              System.out.print(data[k][l] + " ");            } else {              System.out.print(data[l][k] + " ");            }          }        }      }      System.out.println();      System.out.println();    }    int ul, ur, ll, lr;    if (major == COLUMN_MAJOR) {      ul=data[lflon_index][lclat_index];      ur=data[lclon_index][lclat_index];      ll=data[lflon_index][lclat_index];      lr=data[lclon_index][lclat_index];    } else {      ul=data[lclat_index][lflon_index];      ur=data[lclat_index][lclon_index];      ll=data[lclat_index][lflon_index];      lr=data[lclat_index][lclon_index];    }    double answer=resolve_four_points(ul,ur,lr,ll,lat_index,lon_index);    return (int)Math.round(answer);  }  return GRID_NULL;}  }
class C{  public String createShare(String name,String path,String desc,String host) throws IsilonException {  return create(_baseUrl.resolve(URI_SMB_SHARES),"share",new IsilonSMBShare(name,path,desc,host));}  }
class C{  protected void init(EGLConfigChooser configChooser){  Location initLocation=Location.fromTimeZone(TimeZone.getDefault());  double initAltitude=this.distanceToViewGlobeExtents() * 1.1;  this.navigator.setLatitude(initLocation.latitude);  this.navigator.setLongitude(initLocation.longitude);  this.navigator.setAltitude(initAltitude);  this.worldWindowController.setWorldWindow(this);  int cacheCapacity=RenderResourceCache.recommendedCapacity(this.getContext());  this.renderResourceCache=new RenderResourceCache(cacheCapacity);  this.setEGLConfigChooser(configChooser);  this.setEGLContextClientVersion(2);  this.setRenderer(this);  this.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);  Logger.log(Logger.INFO,"World Window initialized");}  }
class C{  public MatrixCursor(String[] columnNames,int initialCapacity){  this.columnNames=columnNames;  this.columnCount=columnNames.length;  if (initialCapacity < 1) {    initialCapacity=1;  }  this.data=new Object[columnCount * initialCapacity];}  }
class C{  public static Object evaluate(float fraction,Object startValue,Object endValue){  int startInt=(Integer)startValue;  int startA=(startInt >> 24);  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=(Integer)endValue;  int endA=(endInt >> 24);  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return (int)((startA + (int)(fraction * (endA - startA))) << 24) | (int)((startR + (int)(fraction * (endR - startR))) << 16) | (int)((startG + (int)(fraction * (endG - startG))) << 8)| (int)((startB + (int)(fraction * (endB - startB))));}  }
class C{  public void restrictProposalsToMatchingCases(boolean restrict){  fSubProcessorFlags=restrict ? IJavadocCompletionProcessor.RESTRICT_TO_MATCHING_CASE : 0;}  }
class C{  public boolean add(E e){  ensureCapacity(size + 1);  elementData[size++]=e;  return true;}  }
class C{  public static String asin(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function asin : " + params.length);  return "asin(" + params[0] + ")";}  }
class C{  public static void cancelAll(){  AttachmentTask[] taskArray=new AttachmentTask[sInstance.mDownloadWorkQueue.size()];  sInstance.mDownloadWorkQueue.toArray(taskArray);  int taskArraylen=taskArray.length;synchronized (sInstance) {    for (    AttachmentTask aTaskArray : taskArray) {      Thread thread=aTaskArray.mThreadThis;      if (null != thread) {        thread.interrupt();      }    }  }}  }
class C{  @Override public void sendTelegram(char[] buffer){  lastTxMsg=new String(buffer);  super.sendTelegram(buffer);}  }
class C{  @Override public final int read() throws IOException {  return Util.readSingleByte(this);}  }
class C{  private void sendLogManagerTimestampingStatus(SetTimestampingStatusMessage.Status status){  SetTimestampingStatusMessage statusMessage=new SetTimestampingStatusMessage(status);  getContext().parent().tell(statusMessage,getSelf());}  }
class C{  public final Instances relation(){  if (!isRelationValued()) {    return null;  } else {    return ((RelationalAttributeInfo)m_AttributeInfo).m_Header;  }}  }
class C{  public boolean isObjectsFieldValueDefault(Object object) throws SQLException {  Object fieldValue=extractJavaFieldValue(object);  return isFieldValueDefault(fieldValue);}  }
class C{  public void clear(){  clear(false);}  }
class C{  public static CompressedTableHDU fromBinaryTableHDU(BinaryTableHDU binaryTableHDU,int tileRows,String... columnCompressionAlgorithms) throws FitsException {  Header header=new Header();  CompressedTableData compressedData=new CompressedTableData();  int rowsPerTile=tileRows > 0 ? tileRows : binaryTableHDU.getData().getNRows();  compressedData.setRowsPerTile(rowsPerTile);  compressedData.fillHeader(header);  Cursor<String,HeaderCard> headerIterator=header.iterator();  Cursor<String,HeaderCard> imageIterator=binaryTableHDU.getHeader().iterator();  while (imageIterator.hasNext()) {    HeaderCard card=imageIterator.next();    BackupRestoreUnCompressedHeaderCard.restore(card,headerIterator);  }  CompressedTableHDU compressedImageHDU=new CompressedTableHDU(header,compressedData);  compressedData.setColumnCompressionAlgorithms(columnCompressionAlgorithms);  compressedData.prepareUncompressedData(binaryTableHDU.getData().getData());  return compressedImageHDU;}  }
class C{  public BuildAuthenticationContextAction(){}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public void testMapperInstanceAndRealm() throws Exception {  KerberosUserNameMapper mapper=create(INSTANCE,REALM);  assertEquals(IgfsUtils.fixUserName(null) + "/" + INSTANCE+ "@"+ REALM,mapper.map(null));  assertEquals("test" + "/" + INSTANCE + "@"+ REALM,mapper.map("test"));}  }
class C{  private static void updateTemps(BasicBlock bb,IR ir){  int capacity=ir.regpool.getNumberOfSymbolicRegisters() * 2;  HashMap<Register,Register> duplicates=new HashMap<Register,Register>(capacity);  for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {    Instruction inst=ie.nextElement();    int numOperands=inst.getNumberOfOperands();    for (int i=0; i < numOperands; i++) {      Operand op=inst.getOperand(i);      if (op instanceof RegisterOperand) {        RegisterOperand ro=(RegisterOperand)op;        if (ro.getRegister().isTemp() && !ro.getRegister().spansBasicBlock()) {          RegisterOperand newReg=getOrCreateDupReg(ro,ir,duplicates);          if (DEBUG2) {            VM.sysWrite("Was " + ro + " and now it's "+ newReg+ "\n");          }          inst.putOperand(i,newReg);        }      }    }  }}  }
class C{  public String insertDummyNominalFirstValueTipText(){  return "Insert a dummy value before the first declared value " + "for all nominal attributes. Useful when converting market " + "basket data that has been encoded for Apriori to sparse format. "+ "Typically used in conjuction with treat missing values as zero.";}  }
class C{  protected void begin(){  stream.println("<graphDocument>");}  }
class C{  private void _schedule(Activity a,long startTime){  if (a.isScheduled()) {    try {      notifyAll();    } catch (    Exception e) {    }    return;  }  a.setStartTime(startTime);synchronized (this) {    m_activities.add(a);    a.setScheduled(true);    if (startTime < m_nextTime) {      m_nextTime=startTime;      notify();    }  }}  }
class C{  public static DecorContextWrapper wrap(Context base){  return new DecorContextWrapper(base);}  }
class C{  private void showSettings(){  if (setdlg == null) {    setdlg=new CommonSettingsDialog(frame);  }  setdlg.setVisible(true);}  }
class C{  protected ExponentialIntegral(){}  }
class C{  private static long computeVisibilitySortingValue(float area,float orderSortingValue,float stackVisibility){  return (long)(area * stackVisibility - orderSortingValue);}  }
class C{  protected boolean ask(String query){  try {    ASTContainer astContainer=new Bigdata2ASTSPARQLParser().parseQuery2(query,null);    return ASTEvalHelper.evaluateBooleanQuery(store(),astContainer,new QueryBindingSet(),null);  } catch (  MalformedQueryException|QueryEvaluationException e) {    throw new RuntimeException(e);  }}  }
class C{  public static Titan0Edge createEdge(Titan0Graph graph,Edge source){  if (source == null) {    return null;  }  return new Titan0Edge(graph,source);}  }
class C{  public String fetchServer(@NonNull Jedis jedis) throws ProcessingException {  try {    Iterator<String> lowestServers=jedis.zrangeByScore(RedisKeys.SERVER_REPO.toString(),0,Double.POSITIVE_INFINITY).iterator();    if (!lowestServers.hasNext())     throw new NoServerException();    return lowestServers.next();  } catch (  Exception ex) {    throw new ProcessingException("Unable to fetch a server?!",ex);  }}  }
class C{  public boolean stateEquals(MersenneTwisterFast other){  if (other == this)   return true;  if (other == null)   return false;  if (mti != other.mti)   return false;  for (int x=0; x < mag01.length; x++)   if (mag01[x] != other.mag01[x])   return false;  for (int x=0; x < mt.length; x++)   if (mt[x] != other.mt[x])   return false;  return true;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep createBucket(BucketParam param,@QueryParam("project") URI id) throws InternalException {  ArgValidator.checkFieldUriType(id,Project.class,"project");  ArgValidator.checkFieldNotNull(param.getLabel(),"name");  Project project=_permissionsHelper.getObjectById(id,Project.class);  ArgValidator.checkEntity(project,id,isIdEmbeddedInURL(id));  ArgValidator.checkFieldNotNull(project.getTenantOrg(),"project");  TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,project.getTenantOrg().getURI());  final String namespace=tenant.getNamespace();  if (null == namespace || namespace.isEmpty()) {    throw APIException.badRequests.objNoNamespaceForTenant(tenant.getId());  }  checkForDuplicateName(param.getLabel().replaceAll(SPECIAL_CHAR_REGEX,""),Bucket.class,id,"project",_dbClient);  return initiateBucketCreation(param,project,tenant,null);}  }
class C{  public MiniDrawer withEnableProfileClick(boolean enableProfileClick){  this.mEnableProfileClick=enableProfileClick;  return this;}  }
class C{  public void zipit(String outString,String name) throws Exception {  File saveFile;  ZipEntry ze;  if (m_zipOut == null) {    saveFile=new File(m_destination,name + ".gz");    DataOutputStream dout=new DataOutputStream(new GZIPOutputStream(new FileOutputStream(saveFile)));    dout.writeBytes(outString);    dout.close();  } else {    ze=new ZipEntry(name);    m_zs.putNextEntry(ze);    m_zipOut.writeBytes(outString);    m_zs.closeEntry();  }}  }
class C{  public KeyBuilder action(){  modifiers|=ModifierKeys.ACTION;  return this;}  }
class C{  private static void test_directGetResourceAsStream(Configuration config,String resourceName,String expectedContents) throws Exception {  DexClassLoader dcl=createInstance(config);  InputStream in=dcl.getResourceAsStream(resourceName);  byte[] contents=Streams.readFully(in);  String s=new String(contents,"UTF-8");  assertEquals(expectedContents,s);}  }
class C{  protected void notifySent(MqttWireMessage message){  final String methodName="notifySent";  this.lastOutboundActivity=System.currentTimeMillis();  log.fine(CLASS_NAME,methodName,"625",new Object[]{message.getKey()});  MqttToken token=tokenStore.getToken(message);  token.internalTok.notifySent();  if (message instanceof MqttPingReq) {synchronized (pingOutstandingLock) {      long time=System.currentTimeMillis();synchronized (pingOutstandingLock) {        lastPing=time;        pingOutstanding++;      }      log.fine(CLASS_NAME,methodName,"635",new Object[]{new Integer(pingOutstanding)});    }  } else   if (message instanceof MqttPublish) {    if (((MqttPublish)message).getMessage().getQos() == 0) {      token.internalTok.markComplete(null,null);      callback.asyncOperationComplete(token);      decrementInFlight();      releaseMessageId(message.getMessageId());      tokenStore.removeToken(message);      checkQuiesceLock();    }  }}  }
class C{  public final short promote(){  return promote(value);}  }
class C{  public <T>T parseJson(){  return Json.parse(value);}  }
class C{  private static List<byte[]> generateKeyStreamBlocks(long lengthM,byte[] nonce,Cipher cipher) throws GeneralSecurityException {  int L=15 - nonce.length;  List<byte[]> S_i=new ArrayList<byte[]>();  int numRounds=(int)(Math.ceil(lengthM / (double)BLOCK_SIZE) + 1);  for (int i=0; i < numRounds; i++) {    DatagramWriter writer=new DatagramWriter();    int flag=L - 1;    writer.write(flag,8);    writer.writeBytes(nonce);    writer.writeLong(i,L * 8);    byte[] S=writer.toByteArray();    S_i.add(ByteArrayUtils.truncate(cipher.doFinal(S),BLOCK_SIZE));  }  return S_i;}  }
class C{  public void arcTo(Object x1,Object y1,Object x2,Object y2,Object x3,Object y3,Object x4,Object y4){  if (size() == 0) {    throw new IllegalPathStateException("arcTo only allowed when not empty");  }  add(new Segment(SegType.ARCTO,x1,y1,x2,y2,x3,y3,x4,y4));}  }
class C{  private boolean isIncluded(final HttpServletRequest request){  String uri=(String)request.getAttribute("javax.servlet.include.request_uri");  boolean includeRequest=!(uri == null);  if (includeRequest && log.isDebugEnabled()) {    log.debug("{} resulted in an include request. This is unusable, because" + "the response will be assembled into the overrall response. Not gzipping.",request.getRequestURL());  }  return includeRequest;}  }
class C{  private static Coordinate nearestEndpoint(Coordinate p1,Coordinate p2,Coordinate q1,Coordinate q2){  Coordinate nearestPt=p1;  double minDist=CGAlgorithms.distancePointLine(p1,q1,q2);  double dist=CGAlgorithms.distancePointLine(p2,q1,q2);  if (dist < minDist) {    minDist=dist;    nearestPt=p2;  }  dist=CGAlgorithms.distancePointLine(q1,p1,p2);  if (dist < minDist) {    minDist=dist;    nearestPt=q1;  }  dist=CGAlgorithms.distancePointLine(q2,p1,p2);  if (dist < minDist) {    minDist=dist;    nearestPt=q2;  }  return nearestPt;}  }
class C{  public static <S extends HasMouseMoveHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MouseMoveEvent event=new MouseMoveEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  void compact(ConstPool cp){  name=cp.addUtf8Info(getName());  descriptor=cp.addUtf8Info(getDescriptor());  attribute=AttributeInfo.copyAll(attribute,cp);  constPool=cp;}  }
class C{  public void clearMovingPoints(){  movingPoints.clear();  spriteCountLabel.setText(Integer.toString(movingPoints.size()));  doPrepare();  stopTimer();}  }
class C{  public boolean performOperation(int generation){  return true;}  }
class C{  public static boolean isSameElementType(ASTNode node1,ASTNode node2){  return node1 != null && node2 != null && node1.getElementType() == node1.getElementType();}  }
class C{  public final void testConjunctive(){  assertNotNull(Constraints.conjunctive(Constraints.minLength(1),Constraints.containsLetter()));}  }
class C{  public static BigDecimal bomQtyReserved(int p_M_Product_ID,int p_M_Warehouse_ID,int p_M_Locator_ID) throws SQLException {  return bomQty(p_M_Product_ID,p_M_Warehouse_ID,p_M_Locator_ID,"QtyReserved");}  }
class C{  private int charType(int ch){  if (ch < charTypeTable.length) {    return charTypeTable[ch];  }  return getType(ch);}  }
class C{  public void moveTo(float x,float y){  mPoints.add(PathPoint.moveTo(x,y));}  }
class C{  public static boolean evaluatePattern(Vertex pattern,Vertex sentence,Primitive variable,Map<Vertex,Vertex> variables,Network network,List<Vertex> elements,List<Vertex> words,int wildcardSkip){  boolean wasWildcard=false;  int elementIndex=0;  int wildcardSkips=0;  boolean end=false;  boolean hadMatchAfterWildcard=false;  List<List<Vertex>> star=new ArrayList<List<Vertex>>();  List<Vertex> currentStar=null;  for (int index=0; index < words.size(); index++) {    if (elementIndex >= elements.size()) {      if (!wasWildcard) {        while (index < words.size()) {          Vertex word=words.get(index);          if (!isPunctuation(word)) {            if (hadMatchAfterWildcard) {              return evaluatePattern(pattern,sentence,variable,variables,network,elements,words,wildcardSkip + 1);            }            return false;          }          index++;        }        recordStar(star,variable,variables,network);        return true;      }      end=true;    }    Vertex element=null;    if (!end) {      element=elements.get(elementIndex);    }    Vertex word=words.get(index);    boolean required=true;    if (element != null) {      boolean found=false;      if (element == word || element.equals(word)) {        found=true;      }      if (!found && (element.is(Primitive.WILDCARD) || element.is(Primitive.UNDERSCORE) || element.is(Primitive.HATWILDCARD)|| element.is(Primitive.POUNDWILDCARD))) {        wasWildcard=true;        if (currentStar != null) {          star.add(currentStar);        }        currentStar=new ArrayList<Vertex>();        elementIndex++;        if (element.is(Primitive.WILDCARD) || element.is(Primitive.UNDERSCORE) || elementIndex >= elements.size()) {          currentStar.add(word);          continue;        }        element=elements.get(elementIndex);      }      if (!found) {        if (element.instanceOf(Primitive.EXPRESSION) || element.instanceOf(Primitive.EQUATION)) {          element=SelfInterpreter.getInterpreter().evaluateExpression(element,variables,network,System.currentTimeMillis(),MAX_RESPONSE_PROCESS,0);        }        if (element.instanceOf(Primitive.VARIABLE)) {          found=element.matches(word,variables) == Boolean.TRUE;          currentStar=new ArrayList<Vertex>();          currentStar.add(word);          star.add(currentStar);          currentStar=null;          wasWildcard=false;        }      }      if (!found && (element == word || element.equals(word))) {        found=true;      }      if (!found && element.getData() instanceof String && word.getData() instanceof String) {        if (((String)element.getData()).equalsIgnoreCase((String)word.getData())) {          found=true;        }      } else       if (!found) {        if (element.instanceOf(Primitive.ARRAY)) {          required=(element.hasRelationship(Primitive.TYPE,Primitive.REQUIRED));          Collection<Relationship> values=element.getRelationships(Primitive.ELEMENT);          if (values != null) {            for (            Relationship value : values) {              if (value.getTarget().getData() instanceof String && word.getData() instanceof String) {                if (((String)value.getTarget().getData()).equalsIgnoreCase((String)word.getData())) {                  found=true;                }              } else               if (value.getTarget().hasRelationship(Primitive.WORD,word)) {                found=true;              }              if (found) {                break;              }            }          }        } else         if (element.instanceOf(Primitive.LIST)) {          required=(element.hasRelationship(Primitive.TYPE,Primitive.REQUIRED));          Collection<Relationship> values=element.getRelationships(Primitive.SEQUENCE);          if (values != null) {            for (            Relationship value : values) {              if (value.getTarget().getData() instanceof String && word.getData() instanceof String) {                if (((String)value.getTarget().getData()).equalsIgnoreCase((String)word.getData())) {                  found=true;                }              } else               if (value.getTarget().hasRelationship(Primitive.WORD,word)) {                found=true;              }              if (found) {                break;              }            }          }        } else {          if (element.hasRelationship(Primitive.WORD,word)) {            found=true;          }        }      }      if (found) {        if (wasWildcard && (wildcardSkips < wildcardSkip)) {          wildcardSkips++;          currentStar.add(word);          continue;        } else {          hadMatchAfterWildcard=hadMatchAfterWildcard || (wasWildcard && elementIndex < elements.size());          elementIndex++;          wasWildcard=false;          if (currentStar != null) {            star.add(currentStar);          }          currentStar=null;          continue;        }      }    }    if ("<".equals(word.getDataValue())) {      boolean foundEndTag=false;      int tagIndex=index;      tagIndex++;      while (tagIndex < words.size()) {        Vertex next=words.get(tagIndex);        if (">".equals(next.getDataValue())) {          foundEndTag=true;          break;        }        tagIndex++;      }      if (foundEndTag) {        index=tagIndex;        continue;      }    }    if (word.instanceOf(Primitive.PUNCTUATION)) {      continue;    }    if (wasWildcard) {      currentStar.add(word);      continue;    }    if (isPunctuation(word)) {      continue;    }    if (!required) {      elementIndex++;      index--;      continue;    }    if (hadMatchAfterWildcard) {      return evaluatePattern(pattern,sentence,variable,variables,network,elements,words,wildcardSkip + 1);    }    return false;  }  while (elementIndex < elements.size()) {    Vertex element=elements.get(elementIndex);    if (element.instanceOf(Primitive.ARRAY) && !element.hasRelationship(Primitive.TYPE,Primitive.REQUIRED)) {      elementIndex++;    } else     if (element.is(Primitive.HATWILDCARD) || element.is(Primitive.POUNDWILDCARD)) {      elementIndex++;      if (currentStar != null) {        star.add(currentStar);        currentStar=null;      } else {        star.add(new ArrayList<Vertex>());      }    } else {      break;    }  }  if (elementIndex >= elements.size()) {    if (currentStar != null) {      star.add(currentStar);    }    recordStar(star,variable,variables,network);    return true;  }  if (hadMatchAfterWildcard) {    return evaluatePattern(pattern,sentence,variable,variables,network,elements,words,wildcardSkip + 1);  }  return false;}  }
class C{  public Geometry buffer(Geometry geom0,double distance){  Geometry geom=removeCommonBits(geom0);  return computeResultPrecision(geom.buffer(distance));}  }
class C{  public NamespaceSupport(){  reset();}  }
class C{  public Jdk14Logger(String name){  this.jdkLogger=Logger.getLogger(name);}  }
class C{  public ForbiddenException(String message,Response response){  super(HttpStatus.FORBIDDEN,message,response);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doPost(request,response);}  }
class C{  @SuppressWarnings("deprecation") private void connect(Properties props){  this.system=DistributedSystem.connect(props);}  }
class C{  public CommandAPDU(ByteBuffer apdu){  this.apdu=new byte[apdu.remaining()];  apdu.get(this.apdu);  parse();}  }
class C{  public static void processNextRedoLastLabelDeclarations(PsiElement element,Processor<PerlLabelDeclaration> processor){  if (element == null || element instanceof PerlLabelScope) {    return;  }  if (element instanceof PerlLoop) {    PsiElement prevElement=getPrevSignificantSibling(element);    if (prevElement instanceof PerlLabelDeclaration) {      if (!processor.process((PerlLabelDeclaration)prevElement)) {        return;      }    }  }  processNextRedoLastLabelDeclarations(element.getParent(),processor);}  }
class C{  private String convertToRelative(String srcFile,String base){  String slash=SystemProperties.getProperty("file.separator");  if (FILE_IGNORE_CASE) {    srcFile=srcFile.toLowerCase();    base=base.toLowerCase();  }  if (base.equals(srcFile)) {    return ".";  }  if (!base.endsWith(slash)) {    base=base + slash;  }  if (base.length() <= srcFile.length()) {    String root=srcFile.substring(0,base.length());    if (root.equals(base)) {      return "." + SystemProperties.getProperty("file.separator") + srcFile.substring(base.length());    }  }  int slashPos=srcFile.indexOf(slash);  int branchPoint;  if (slashPos >= 0) {    String subPath=srcFile.substring(0,slashPos);    if ((subPath.length() == 0) || base.startsWith(subPath)) {      branchPoint=slashPos + 1;      slashPos=srcFile.indexOf(slash,branchPoint);      while (slashPos >= 0) {        subPath=srcFile.substring(0,slashPos);        if (base.startsWith(subPath)) {          branchPoint=slashPos + 1;        } else {          break;        }        slashPos=srcFile.indexOf(slash,branchPoint);      }      int slashCount=0;      slashPos=base.indexOf(slash,branchPoint);      while (slashPos >= 0) {        slashCount++;        slashPos=base.indexOf(slash,slashPos + 1);      }      StringBuilder path=new StringBuilder();      String upDir=".." + slash;      for (int i=0; i < slashCount; i++) {        path.append(upDir);      }      path.append(srcFile.substring(branchPoint));      return path.toString();    }  }  return srcFile;}  }
class C{  public static boolean isPermissionRequestCancelled(@NonNull int[] grantResults){  return grantResults.length == 0;}  }
class C{  public void createHistogram(){  try {    if (this.getModel().getData() != null) {      mainChart=ChartFactory.createHistogram(title,xAxisName,yAxisName,model.getDataSet(),PlotOrientation.VERTICAL,true,true,false);      mainChart.setBackgroundPaint(UIManager.getColor("this.Background"));      XYPlot plot=(XYPlot)mainChart.getPlot();      plot.setForegroundAlpha(0.75F);      NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();      rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());      XYBarRenderer renderer=(XYBarRenderer)plot.getRenderer();      renderer.setDrawBarOutline(false);      renderer.setShadowVisible(false);      Iterator<ColoredDataSeries> series=model.getSeriesData().iterator();      for (int i=0; i < model.getData().size(); i++) {        if (i < colorPallet.length) {          ColoredDataSeries s=series.next();          Color c=s.color;          if (c == null) {            c=assignColor();            s.color=c;          }          renderer.setSeriesPaint(i,c,true);        }      }    } else {      mainChart=ChartFactory.createHistogram(title,xAxisName,yAxisName,model.getDataSet(),PlotOrientation.VERTICAL,true,true,false);      mainChart.setBackgroundPaint(UIManager.getColor("this.Background"));    }  } catch (  IllegalArgumentException iaEx) {    iaEx.printStackTrace();    JOptionPane.showMessageDialog(null,iaEx.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);  }catch (  IllegalStateException isEx) {    isEx.printStackTrace();    JOptionPane.showMessageDialog(null,isEx.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);  }  mainPanel=new ChartPanel(mainChart);}  }
class C{  protected void applyConstaints(){  boolean hasGlobalConstraints=constraints.size() > 0;  for (  VerletParticle3D p : particles) {    if (hasGlobalConstraints) {      for (      ParticleConstraint3D c : constraints) {        c.apply(p);      }    }    if (p.bounds != null) {      p.constrain(p.bounds);    }    if (worldBounds != null) {      p.constrain(worldBounds);    }  }}  }
class C{  private static double[][] calculateSubMatrix(double[][] matrix){  int equations=matrix.length;  int coefficients=matrix[0].length;  double[][] result=new double[equations - 1][coefficients - 1];  for (int eq=1; eq < equations; eq++) {    double factor=matrix[0][0] / matrix[eq][0];    for (int coe=1; coe < coefficients; coe++) {      result[eq - 1][coe - 1]=matrix[0][coe] - matrix[eq][coe] * factor;    }  }  if (equations == 1) {    return result;  }  if (result[0][0] == 0) {    boolean found=false;    for (int i=0; i < result.length; i++) {      if (result[i][0] != 0) {        found=true;        double[] temp=result[0];        System.arraycopy(result[i],0,result[0],0,result[i].length);        System.arraycopy(temp,0,result[i],0,temp.length);        break;      }    }    if (!found) {      return new double[equations - 1][coefficients - 1];    }  }  double[][] subMatrix=calculateSubMatrix(result);  for (int eq=1; eq < equations - 1; eq++) {    result[eq][0]=0;    for (int coe=1; coe < coefficients - 1; coe++) {      result[eq][coe]=subMatrix[eq - 1][coe - 1];    }  }  return result;}  }
class C{  public void powerOffCluster(){  powerOffCluster(false);}  }
class C{  public static void createKey(int hkey,String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  int[] ret;  if (hkey == HKEY_LOCAL_MACHINE) {    ret=createKey(systemRoot,hkey,key);    regCloseKey.invoke(systemRoot,new Object[]{new Integer(ret[0])});  } else   if (hkey == HKEY_CURRENT_USER) {    ret=createKey(userRoot,hkey,key);    regCloseKey.invoke(userRoot,new Object[]{new Integer(ret[0])});  } else {    throw new IllegalArgumentException("hkey=" + hkey);  }  if (ret[1] != REG_SUCCESS) {    throw new IllegalArgumentException("rc=" + ret[1] + "  key="+ key);  }}  }
class C{  public String nextVariableName(String base){  int i=0;  loop:   while (true) {    String name=base + (++i);    for (    Node node1 : getGraph().getNodes()) {      if (node1.getName().equals(name)) {        continue loop;      }    }    break;  }  return base + i;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public StochasticGradientBoosting(Regressor strongLearner,Regressor weakLearner,int maxIterations,double learningRate,double trainingPortion){  this.trainingProportion=trainingPortion;  this.strongLearner=strongLearner;  this.weakLearner=weakLearner;  this.learningRate=learningRate;  this.maxIterations=maxIterations;}  }
class C{  public static synchronized void init(Context context){  instance=new DiscoveryManager(context);}  }
class C{  public void testConstructor_InetAddressI() throws Exception {  int sport=startServer("Cons InetAddress,I");  int[] invalidPort={-1,Integer.MIN_VALUE,65536,Integer.MAX_VALUE};  SSLSocket ssl=getSSLSocket(InetAddress.getLocalHost(),sport);  assertNotNull(ssl);  assertEquals(sport,ssl.getPort());  ssl.close();  try {    getSSLSocket(InetAddress.getLocalHost(),sport + 1);    fail();  } catch (  IOException expected) {  }  for (int i=0; i < invalidPort.length; i++) {    try {      getSSLSocket(InetAddress.getLocalHost(),invalidPort[i]);      fail();    } catch (    IllegalArgumentException expected) {    }  }}  }
class C{  public boolean isBPartner(){  return TREETYPE_BPartner.equals(getTreeType());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.478 -0400",hash_original_method="C1647ABF099BDE2A705C358E5A628D51",hash_generated_method="8DA51924A1B4238BF8D93028A7202CD0") @Override public synchronized void reset() throws IOException {  try {    in.reset();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public void testTimeoutGreedy(){  doTestTimeout(false,true);}  }
class C{  public static double isLeftOfLine(double x0,double y0,double x1,double y1,double x2,double y2){  return (x2 - x1) * (y0 - y1) - (x0 - x1) * (y2 - y1);}  }
class C{  public List<URI> refreshConnectionStatusForAllSIOProviders(){  log.info("Refreshing connection statuses for ScaleIO providers");  List<URI> activeProviders=Lists.newArrayList();  List<StorageProvider> providers=CustomQueryUtility.getActiveStorageProvidersByInterfaceType(dbClient,StorageProvider.InterfaceType.scaleioapi.name());  for (  StorageProvider provider : providers) {    try {      boolean success=false;      StringSet secondaryIps=provider.getSecondaryIps();      Iterator<String> iterator=secondaryIps.iterator();      String currentIPAddress=provider.getIPAddress();      String nextIp=null;      do {        try {          ScaleIORestClient handle=scaleIOHandleFactory.using(dbClient).getClientHandle(provider);          handle.getSystem();          log.info("Successfully connected to ScaleIO MDM {}: {}",provider.getIPAddress(),provider.getId());          success=true;          break;        } catch (        Exception e) {          log.error(String.format("Failed to connect to ScaleIO MDM %s: %s",provider.getIPAddress(),provider.getId()),e);          if (iterator.hasNext()) {            nextIp=iterator.next();            log.info("Attempting connection to potential new Primary MDM {}: {}",nextIp,provider.getId());            provider.setIPAddress(nextIp);          } else {            log.warn("Exhausted list of secondary IPs for ScaleIO provider: {}",provider.getId());            nextIp=null;          }        }      } while (nextIp != null);      if (success) {        if (!provider.getIPAddress().equalsIgnoreCase(currentIPAddress)) {          StringSet newSecondaryIps=new StringSet();          newSecondaryIps.addAll(secondaryIps);          newSecondaryIps.remove(provider.getIPAddress());          newSecondaryIps.add(currentIPAddress);          provider.setSecondaryIps(newSecondaryIps);        }        activeProviders.add(provider.getId());        provider.setConnectionStatus(StorageProvider.ConnectionStatus.CONNECTED.toString());      } else {        provider.setIPAddress(currentIPAddress);        provider.setConnectionStatus(StorageProvider.ConnectionStatus.NOTCONNECTED.toString());      }    }  finally {      dbClient.persistObject(provider);    }  }  return activeProviders;}  }
class C{  @Override public ProducesRequestCondition combine(ProducesRequestCondition other){  return (!other.expressions.isEmpty() ? other : this);}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  public static boolean isValidLocation(Location location){  return location != null && Math.abs(location.getLatitude()) <= 90 && Math.abs(location.getLongitude()) <= 180;}  }
class C{  private void loadAcsIdFromArchId(String entidad) throws Exception {  String qual;  ArchivesTable table=new ArchivesTable();  if (_logger.isDebugEnabled())   _logger.debug("loadAcsIdFromArchId");  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession());    qual=table.getLoadArchIdQual(_id);    _acsId=DbSelectFns.selectLongInteger(dbConn,table.getArchHdrTableName(),DaoArchHdrTbl.getAcsIdColName(true),qual);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  public boolean isFisheye(){  return fisheye;}  }
class C{  public static String rawToAsciiString(byte[] quality){  return new String(rawToAsciiQuality(quality));}  }
class C{  @DSSink({DSSinkKind.SYSTEM_SETTINGS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:26.360 -0500",hash_original_method="C8B4A3CF4267A4CC2FA2952E385D70CE",hash_generated_method="B79B3B8D410BA539197C8D7A7231B716") public void saveClirSetting(int commandInterfaceCLIRMode){  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getContext());  SharedPreferences.Editor editor=sp.edit();  editor.putInt(CLIR_KEY,commandInterfaceCLIRMode);  if (!editor.commit()) {    Log.e(LOG_TAG,"failed to commit CLIR preference");  }}  }
class C{  protected void ensureColumn(int col){  if (col >= columns.length) {    setColumnCount(col + 1);  }}  }
class C{  public void updateLanguage(){  _languageButton.updateLanguageFlag();}  }
class C{  public boolean done(){  return epoch >= maxEpoch;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ClientMessage sendMessageWithProperties(SimpleString address,Map<String,Object> properties){  ClientMessage message=createMessageWithProperties(properties);  sendMessage(address,message);  return message;}  }
class C{  public double measureMaxDepth(){  return m_MaxDepth;}  }
class C{  public WampClientBuilder withConnectorProvider(IWampConnectorProvider provider){  this.connectorProvider=provider;  return this;}  }
class C{  public void testIteratorOrdering(){  final LinkedBlockingQueue q=new LinkedBlockingQueue(3);  q.add(one);  q.add(two);  q.add(three);  assertEquals(0,q.remainingCapacity());  int k=0;  for (Iterator it=q.iterator(); it.hasNext(); ) {    assertEquals(++k,it.next());  }  assertEquals(3,k);}  }
class C{  public void close() throws IOException {  if (closed) {    return;  }  if (gzipstream != null) {    gzipstream.close();    gzipstream=null;  }  closed=true;}  }
class C{  public static void info(String msg){  System.out.println(msg);  if (Options.uiMode == UIMode.GUI)   MainWindow.log(msg,false);}  }
class C{  private List<String> checkRolesUsingDomains(List<RoleAssignmentEntry> roleAssignments,StringSet domains){  List<String> matchingUsers=new ArrayList<String>();  for (  RoleAssignmentEntry roleAssignment : roleAssignments) {    String idOrGroup=!StringUtils.isEmpty(roleAssignment.getSubjectId()) ? roleAssignment.getSubjectId() : roleAssignment.getGroup();    _log.debug("checking " + idOrGroup);    String domain="";    if (idOrGroup.lastIndexOf("@") != -1) {      domain=idOrGroup.substring(idOrGroup.lastIndexOf("@") + 1);    } else {      continue;    }    for (    String domainToCheck : domains) {      if (domainToCheck.equalsIgnoreCase(domain)) {        matchingUsers.add(idOrGroup);      }    }  }  return matchingUsers;}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length != 3) {    VerbatimLogger.info("You gave " + args.length + " arguments, there must be exactly 3.\n");    System.err.println(usageMessage);    throw new IllegalArgumentException();  }  Options option=null;  if (args[0].equalsIgnoreCase("-lucenetotext")) {    option=Options.LUCENE_TO_TEXT;  } else   if (args[0].equalsIgnoreCase("-texttolucene")) {    option=Options.TEXT_TO_LUCENE;  } else {    System.err.println(usageMessage);    throw new IllegalArgumentException();  }  String infile=args[1];  String outfile=args[2];  FlagConfig flagConfig=FlagConfig.getFlagConfig(null);  if (option == Options.LUCENE_TO_TEXT) {    VectorStoreReaderLucene vecReader;    try {      vecReader=new VectorStoreReaderLucene(infile,flagConfig);    } catch (    IOException e) {      throw e;    }    VerbatimLogger.info("Writing term vectors to " + outfile + "\n");    VectorStoreWriter.writeVectorsInTextFormat(outfile,flagConfig,vecReader);    vecReader.close();  }  if (option == Options.TEXT_TO_LUCENE) {    VectorStoreReaderText vecReader;    try {      vecReader=new VectorStoreReaderText(infile,flagConfig);    } catch (    IOException e) {      throw e;    }    VerbatimLogger.info("Writing term vectors to " + outfile + "\n");    VectorStoreWriter.writeVectorsInLuceneFormat(outfile,flagConfig,vecReader);    vecReader.close();  }}  }
class C{  public static int round(float value){  long lx=(long)(value * (65536 * 256f));  return (int)((lx + 0x800000) >> 24);}  }
class C{  public static void recompileProgramBlockInstructions(ProgramBlock pb) throws HopsException, LopsException, DMLRuntimeException, IOException {  if (pb instanceof WhileProgramBlock) {    WhileProgramBlock wpb=(WhileProgramBlock)pb;    WhileStatementBlock wsb=(WhileStatementBlock)pb.getStatementBlock();    if (wsb != null && wsb.getPredicateHops() != null)     wpb.setPredicate(recompileHopsDagInstructions(wsb.getPredicateHops()));  } else   if (pb instanceof IfProgramBlock) {    IfProgramBlock ipb=(IfProgramBlock)pb;    IfStatementBlock isb=(IfStatementBlock)pb.getStatementBlock();    if (isb != null && isb.getPredicateHops() != null)     ipb.setPredicate(recompileHopsDagInstructions(isb.getPredicateHops()));  } else   if (pb instanceof ForProgramBlock) {    ForProgramBlock fpb=(ForProgramBlock)pb;    ForStatementBlock fsb=(ForStatementBlock)pb.getStatementBlock();    if (fsb != null && fsb.getFromHops() != null)     fpb.setFromInstructions(recompileHopsDagInstructions(fsb.getFromHops()));    if (fsb != null && fsb.getToHops() != null)     fpb.setToInstructions(recompileHopsDagInstructions(fsb.getToHops()));    if (fsb != null && fsb.getIncrementHops() != null)     fpb.setIncrementInstructions(recompileHopsDagInstructions(fsb.getIncrementHops()));  } else {    StatementBlock sb=pb.getStatementBlock();    if (sb != null && sb.get_hops() != null) {      pb.setInstructions(recompileHopsDagInstructions(sb,sb.get_hops()));    }  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:32.333 -0500",hash_original_method="3E7F5EDF72EC8A96B4F4BE9344F2EB6F",hash_generated_method="434DDE99510BF4146083C4E09BC81D24") public SingleClientConnManager(HttpParams params,SchemeRegistry schreg){  if (schreg == null) {    throw new IllegalArgumentException("Scheme registry must not be null.");  }  this.schemeRegistry=schreg;  this.connOperator=createConnectionOperator(schreg);  this.uniquePoolEntry=new PoolEntry();  this.managedConn=null;  this.lastReleaseTime=-1L;  this.alwaysShutDown=false;  this.isShutDown=false;}  }
class C{  public static int toInt(boolean b){  return b ? -1 : -2;}  }
class C{  NoResultAction changeCurrentMode(Mode mode){  return new AllowAction(getModeUsage().changeCurrentMode(mode));}  }
class C{  public ParameterList(Map parameterMap){  _parameterMap=new LinkedHashMap();  Iterator keysIter=parameterMap.keySet().iterator();  while (keysIter.hasNext()) {    String name=(String)keysIter.next();    Object v=parameterMap.get(name);    String value;    if (v instanceof String[]) {      String[] values=(String[])v;      if (values.length > 1 && name.startsWith("openid."))       throw new IllegalArgumentException("Multiple parameters with the same name: " + Arrays.toString(values));      value=values.length > 0 ? values[0] : null;    } else     if (v instanceof String) {      value=(String)v;    } else {      value="";      _log.error("Can extract parameter value; unexpected type: " + v.getClass().getName());    }    set(new Parameter(name,value));  }  if (DEBUG)   _log.debug("Creating parameter list:\n" + this);}  }
class C{  @Override public void close(){}  }
class C{  public PutMappingRequest(String... indices){  this.indices=indices;}  }
class C{  @Override public void consumeQuota(String resourceTicketId,QuotaCost cost) throws QuotaException, ResourceTicketNotFoundException {  ResourceTicketService.Patch patch=new ResourceTicketService.Patch();  patch.patchtype=ResourceTicketService.Patch.PatchType.USAGE_CONSUME;  patch.cost=new HashMap<>();  for (  String key : cost.getCostKeys()) {    QuotaLineItem costItem=new QuotaLineItem();    costItem.setKey(key);    costItem.setValue(cost.getCost(key).getValue());    costItem.setUnit(cost.getCost(key).getUnit());    patch.cost.put(costItem.getKey(),costItem);  }  try {    patchResourceTicketService(resourceTicketId,patch);  } catch (  XenonRuntimeException e) {    if (e.getCause() instanceof BadRequestException) {      ResourceTicketService.QuotaErrorResponse quotaErrorResponse=e.getCompletedOperation().getBody(ResourceTicketService.QuotaErrorResponse.class);      throw new QuotaException(new QuotaLineItemEntity(quotaErrorResponse.limit.getKey(),quotaErrorResponse.limit.getValue(),quotaErrorResponse.limit.getUnit()),new QuotaLineItemEntity(quotaErrorResponse.usage.getKey(),quotaErrorResponse.usage.getValue(),quotaErrorResponse.usage.getUnit()),new QuotaLineItemEntity(quotaErrorResponse.newUsage.getKey(),quotaErrorResponse.newUsage.getValue(),quotaErrorResponse.newUsage.getUnit()));    }  }}  }
class C{  public SubscriberExample(SubscriberObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getUserId() != null) {    criteria.andUserIdEqualTo(sample.getUserId());  }  if (sample.getSubscribeId() != null) {    criteria.andSubscribeIdEqualTo(sample.getSubscribeId());  }  if (sample.getSubscribeType() != null) {    criteria.andSubscribeTypeEqualTo(sample.getSubscribeType());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }}  }
class C{  public static void confirmYesno(Context context,CharSequence msg,DialogInterface.OnClickListener onYes,DialogInterface.OnCancelListener onNo){  AlertDialog dlg=newDlg(context);  dlg.setIcon(android.R.drawable.ic_dialog_alert);  dlg.setTitle(R.string.afc_title_confirmation);  dlg.setMessage(msg);  dlg.setButton(DialogInterface.BUTTON_POSITIVE,context.getString(android.R.string.yes),onYes);  dlg.setOnCancelListener(onNo);  dlg.show();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isEventCondition(){  return false;}  }
class C{  @RequiresPermission(PERMISSION) @Override public boolean requestSend(){  Activity activity=mActivity.get();  if (activity == null)   return false;  if (Log.isLoggable(Log.VERBOSE))   Log.v("Sending location");  if (checkSelfPermission(activity,PERMISSION) != PackageManager.PERMISSION_GRANTED) {    requestPermissions(activity,new String[]{PERMISSION},PERMISSION_REQUEST_CODE);    return true;  }  return getFreshLocation(new SenderLocationListener(this));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;}  }
class C{  @Override public void deactivate(){}  }
class C{  public T caseAnonymous_numExpr_1_(Anonymous_numExpr_1_ object){  return null;}  }
class C{  @NonNull public static DeflaterOutputStream createDeflaterOutputStream(@Nullable OutputStream rawOut){  if (deviceSupportsCompression())   return new DeflaterOutputStream(rawOut,true); else   return new DeflaterOutputStream(rawOut,createSyncFlushDeflater());}  }
class C{  public Collection<Address> servers(){  return selector.servers();}  }
class C{  public void increment(int position){  increment(position,1);}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public TechTracker(){}  }
class C{  public void addTransactionConfidenceEventListener(Executor executor,TransactionConfidenceEventListener listener){  transactionConfidenceListeners.add(new ListenerRegistration<TransactionConfidenceEventListener>(listener,executor));}  }
class C{  public void acceptChanges(Connection con) throws SyncProviderException {  throw new UnsupportedOperationException();}  }
class C{  @Override public void postCall(Request request,int status,ServiceMethodInfo serviceMethodInfo) throws Exception {  long time=new Date().getTime();  TraceEvent traceEvent=(TraceEvent)serviceMethodInfo.getAttribute(TRACE_EVENT_ATTRIBUTE);  if (traceEvent != null) {    TraceEvent endTraceEvent=new TraceEvent(TracingConstants.SERVER_TRACE_END,traceEvent.getTraceId(),traceEvent.getOriginId(),time);    Response responder=(Response)serviceMethodInfo.getAttribute(RESPONDER_ATTRIBUTE);    endTraceEvent.setStatusCode(responder.getStatusCode());    TracingUtil.pushToDAS(endTraceEvent,dasUrl);  }}  }
class C{  public IPRangeNode findFast(String addr){  InetAddress iaddr;  try {    iaddr=InetAddress.getByName(addr);  } catch (  UnknownHostException ex) {    return null;  }  return findFast(iaddr);}  }
class C{  public SupportedParser(String supported){  super(supported);}  }
class C{  private void openWizardForModule(String wizardId,IStructuredSelection selection,boolean nested){  IWizardDescriptor wizardDescriptor=PlatformUI.getWorkbench().getNewWizardRegistry().findWizard(wizardId);  if (wizardDescriptor == null) {    return;  }  try {    IWorkbenchWizard wizard=wizardDescriptor.createWizard();    injector.injectMembers(wizard);    WizardDialog wizardDialog=new WizardDialog(UIUtils.getShell(),wizard);    if (wizard instanceof N4JSNewClassifierWizard<?>) {      ((N4JSNewClassifierWizard<?>)wizard).init(PlatformUI.getWorkbench(),selection,nested);    } else {      wizard.init(PlatformUI.getWorkbench(),selection);    }    wizardDialog.open();  } catch (  CoreException e) {    Shell workbenchShell=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();    MessageDialog.open(MessageDialog.ERROR,workbenchShell,"Failed to launch wizard",String.format("Failed to launch wizard %s",wizardId),SWT.SHEET);    return;  }}  }
class C{  public GeExpr newGeExpr(Value op1,Value op2){  return new JGeExpr(op1,op2);}  }
class C{  @PUT @Path("/cleanuprecords") @Produces(MediaType.APPLICATION_JSON) @Description("Cleans up records marked for deletion and orphan records.") public Response cleanupRecords(@Context HttpServletRequest req){  validatePrivilegedUser(req);  managementService.cleanupRecords();  return Response.status(Status.OK).build();}  }
class C{  public static boolean isGoDown(KeyEvent event){  return isActionDown(event) && (event.getKeyCode() == KeyEvent.KEYCODE_DPAD_DOWN || (!event.isNumLockOn() && event.getKeyCode() == KeyEvent.KEYCODE_NUMPAD_2));}  }
class C{  public void init(){  Box propsBox=Box.createVerticalBox();  propsBox.setOpaque(true);  propsBox.add(Box.createVerticalGlue());  JPanel runTools=new JPanel();  runTools.add(new JLabel("Iterate: "));  runTools.add(new JButton(runAction));  JButton stepButton=new JButton(stepAction);  stepButton.setHideActionText(true);  runTools.add(stepButton);  JButton resetButton=new JButton(resetAction);  resetButton.setHideActionText(true);  runTools.add(resetButton);  JButton randomizeButton=new JButton(randomizeAction);  randomizeButton.setHideActionText(true);  runTools.add(randomizeButton);  propsBox.add(runTools);  JSeparator separator=new JSeparator(SwingConstants.HORIZONTAL);  propsBox.add(separator);  Box lrBox=Box.createHorizontalBox();  lrBox.add(new JLabel("Learning Rate:"));  lrBox.add(Box.createHorizontalStrut(10));  lrBox.add(lLearningRate);  propsBox.add(lrBox);  Box nbBox=Box.createHorizontalBox();  nbBox.add(new JLabel("Neighborhood Size:"));  nbBox.add(Box.createHorizontalStrut(10));  nbBox.add(lNeighborhoodSize);  propsBox.add(nbBox);  JSeparator separator2=new JSeparator(SwingConstants.HORIZONTAL);  propsBox.add(separator2);  LabelledItemPanel labelPanel=new LabelledItemPanel();  labelPanel.addItem("Iterations:",iterationsLabel);  propsBox.add(labelPanel);  add(propsBox);  updatePanel();}  }
class C{  @Deprecated protected void handleAliasAction(SolrQueryRequest req,SolrQueryResponse rsp){  throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"The ALIAS action is no longer supported");}  }
class C{  @Override public void processBlock() throws QueryExecutionException {  while (dataBlockIterator.hasNext()) {    try {      blocksChunkHolder.setDataBlock(dataBlockIterator.next());      blocksChunkHolder.reset();      this.scannerResultAggregator.aggregateData(blockletScanner.scanBlocklet(blocksChunkHolder));    } catch (    Exception e) {      throw new QueryExecutionException(e);    }  }  finishScanning();}  }
class C{  private static RetainFragment findOrCreateRetainFragment(FragmentManager fm){  RetainFragment mRetainFragment=(RetainFragment)fm.findFragmentByTag(TAG);  if (mRetainFragment == null) {    mRetainFragment=new RetainFragment();    fm.beginTransaction().add(mRetainFragment,TAG).commitAllowingStateLoss();  }  return mRetainFragment;}  }
class C{  public Kpc(DataSet dataset,double alpha){  if (dataset == null) {    throw new NullPointerException();  }  this.alpha=alpha;  this.independenceTest=new IndTestHsic(dataset,alpha);}  }
class C{  public String validateCancelledEstForCopy(){  final String estNo=estimateNum.substring(0,estimateNum.length() - 2);  final String cancelledEst=(String)getPersistenceService().find("select est.estimateNumber from AbstractEstimate est where est.estimateNumber= ?",estNo);  if (cancelledEst != null)   isCancelEstCopyExists=true;  return "copyCancelledEst";}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:29.456 -0500",hash_original_method="3E3DB9EACBAEC53C68BCBB24FE69AB14",hash_generated_method="30051DC3AE22E7DDA2FF507800CF7FBE") public static byte parseByte(String string) throws NumberFormatException {  return string.getTaintByte();}  }
class C{  public Random(boolean debug){  super();  setDebug(debug);  m_ID=nextID();  if (getDebug())   printStackTrace();}  }
class C{  private CModuleInitializationFunctions(){}  }
class C{  public void incSentMessages(long messages){  this.stats.incLong(sentMessagesId,messages);}  }
class C{  public void initializeDefinition(String functionName,String functionLanguage,String functionType,String returnType,String argumentDirection,String argumentType){  setFunctionName(functionName);  setFunctionLanguage(functionLanguage);  setFunctionType(functionType);  setReturnType(returnType);  setArgumentDirection(argumentDirection);  setArgumentType(argumentType);  s_logger.log(Level.FINEST,toString());}  }
class C{  JSONStringer open(Scope empty,String openBracket) throws JSONException {  if (stack.isEmpty() && out.length() > 0) {    throw new JSONException("Nesting problem: multiple top-level roots");  }  beforeValue();  stack.add(empty);  out.append(openBracket);  return this;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthPopupMenuUI();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.POSTFIX_EXPRESSION__EXPRESSION:    setExpression((Expression)null);  return;case N4JSPackage.POSTFIX_EXPRESSION__OP:setOp(OP_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof BigInteger) {    this.put(key,((BigInteger)value).add(BigInteger.ONE));  } else   if (value instanceof BigDecimal) {    this.put(key,((BigDecimal)value).add(BigDecimal.ONE));  } else   if (value instanceof Integer) {    this.put(key,(Integer)value + 1);  } else   if (value instanceof Long) {    this.put(key,(Long)value + 1);  } else   if (value instanceof Double) {    this.put(key,(Double)value + 1);  } else   if (value instanceof Float) {    this.put(key,(Float)value + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  public static BitSet and(BitSet left,BitSet right){  BitSet result=(BitSet)left.clone();  result.and(right);  return result;}  }
class C{  private void computeDroidsafeTextMarkerInfo(ITextEditor editor){  IDocumentProvider documentProvider=editor.getDocumentProvider();  IEditorInput input=editor.getEditorInput();  IDocument document=documentProvider.getDocument(input);  ITypeRoot typeRoot=JavaUI.getEditorInputTypeRoot(input);  ICompilationUnit icu=(ICompilationUnit)typeRoot.getAdapter(ICompilationUnit.class);  ASTParser parser=ASTParser.newParser(AST.JLS4);  parser.setSource(icu);  parser.setKind(ASTParser.K_COMPILATION_UNIT);  parser.setResolveBindings(true);  CompilationUnit cu=(CompilationUnit)parser.createAST(null);  DroidsafeTextMarkerVisitor visitor=new DroidsafeTextMarkerVisitor(document);  cu.accept(visitor);}  }
class C{  public static String unhash(int target){  StringBuilder answer=new StringBuilder();  if (target < 0) {    answer.append("\\u0915\\u0009\\u001e\\u000c\\u0002");    if (target == Integer.MIN_VALUE) {      return answer.toString();    }    target=target & Integer.MAX_VALUE;  }  unhash0(answer,target);  return answer.toString();}  }
class C{  public UnaryExpression(Token t,Operator op,Expression expr){  super(t);  this.op=op;  this.expr=expr;}  }
class C{  public synchronized void closeInput(){  _closedInput=true;  notifyAll();}  }
class C{  public static String capitalizeWord(String s){  if ((s == null) || (s.length() == 0)) {    return s;  }  return s.substring(0,1).toUpperCase() + s.substring(1).toLowerCase();}  }
class C{  public static void copyRelationalValues(Instance inst,Instances destDataset,AttributeLocator strAtts){  if (inst.dataset() == null) {    throw new IllegalArgumentException("Instance has no dataset assigned!!");  } else   if (inst.dataset().numAttributes() != destDataset.numAttributes()) {    throw new IllegalArgumentException("Src and Dest differ in # of attributes: " + inst.dataset().numAttributes() + " != "+ destDataset.numAttributes());  }  copyRelationalValues(inst,true,inst.dataset(),strAtts,destDataset,strAtts);}  }
class C{  public boolean hasBlockings(){  return hasRepeatingExtension(Blocking.class);}  }
class C{  protected Guard_Impl(){  super();}  }
class C{  protected void uncheck(){  checkmark.setAttribute(SVGConstants.SVG_STYLE_ATTRIBUTE,SVGConstants.CSS_DISPLAY_PROPERTY + ":" + SVGConstants.CSS_NONE_VALUE);  checked=false;  fireSwitchEvent(new ChangeEvent(SVGCheckbox.this));}  }
class C{  public Object readColorUIResource(Element node) throws Exception {  Object result;  Vector<Element> children;  Element child;  int i;  String name;  Color color;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  result=null;  children=XMLDocument.getChildTags(node);  color=null;  for (i=0; i < children.size(); i++) {    child=children.get(i);    name=child.getAttribute(ATT_NAME);    if (name.equals(VAL_COLOR)) {      color=(Color)invokeReadFromXML(child);    } else {      System.out.println("WARNING: '" + name + "' is not a recognized name for "+ node.getAttribute(ATT_NAME)+ "!");    }  }  result=new ColorUIResource(color);  return result;}  }
class C{  public Multimap<String,String> loadRelations(DBTransaction transaction,String charname) throws SQLException {  HashMultimap<String,String> map=HashMultimap.create();  String query="SELECT relationtype, buddy FROM buddy WHERE charname='[charname]'";  Map<String,Object> params=new HashMap<String,Object>();  params.put("charname",charname);  ResultSet resultSet=transaction.query(query,params);  while (resultSet.next()) {    map.put(resultSet.getString(1),resultSet.getString(2));  }  return map;}  }
class C{  private WordNetUtils(){}  }
class C{  public FacesResourceBundleELResolver(){}  }
class C{  int startIndex(){  int len=getNumDataElements();  for (int i=0; i < len; i++) {    if ((getElement(i) & 0xFF) != 0xFF) {      return i;    }  }  return -1;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CustomXYURLGenerator clone=(CustomXYURLGenerator)super.clone();  clone.urlSeries=new java.util.ArrayList(this.urlSeries);  return clone;}  }
class C{  private void doIncrementHash(String key,String hashKey,long amount,String bookkeepingKey){  long newValue=hashOperations.increment(key,hashKey,amount);  if (newValue == amount) {    setOperations.add(bookkeepingKey,key);  }}  }
class C{  public final TestSubscriber<T> assertFuseableSource(){  if (qs == null) {    assertionError("Upstream was not Fuseable");  }  return this;}  }
class C{  public static Shape createShape(Reader r,int wr) throws IOException, ParseException {  PointsParser p=new PointsParser();  AWTPolygonProducer ph=new AWTPolygonProducer();  ph.setWindingRule(wr);  p.setPointsHandler(ph);  p.parse(r);  return ph.getShape();}  }
class C{  public RangeQueryBuilder lte(String to){  this.to=to;  this.includeUpper=true;  return this;}  }
class C{  public QueryException(){}  }
class C{  private static void printUsage(){  System.out.println("Usage:\n java BooksClient.jar");  System.out.println("or with authentication:\n java BooksClient.jar " + " --username <user@gmail.com> " + " --password <pass> ");}  }
class C{  public StructuredPostalAddress(){  super(KEY);}  }
class C{  public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new DenseInstance(instance.weight(),instance.toDoubleArray());    inst.setDataset(instance.dataset());  } else {    inst=instance;  }  push(inst);  return true;}  }
class C{  @Override public boolean isPredecessor(V v1,V v2){  if (!containsVertex(v2))   return false;  return getParent(v2).equals(v1);}  }
class C{  public void closeSessionFactory(){  HibernateUtil.closeSessionFactory(sessionFactoryName);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:19.679 -0500",hash_original_method="70C4080A4EB7D334155C1E669C19E162",hash_generated_method="CD028F2229A77428D73114F09F56CCBE") ActionKeyInfo(Context activityContext,AttributeSet attr){  TypedArray a=activityContext.obtainStyledAttributes(attr,com.android.internal.R.styleable.SearchableActionKey);  mKeyCode=a.getInt(com.android.internal.R.styleable.SearchableActionKey_keycode,0);  mQueryActionMsg=a.getString(com.android.internal.R.styleable.SearchableActionKey_queryActionMsg);  mSuggestActionMsg=a.getString(com.android.internal.R.styleable.SearchableActionKey_suggestActionMsg);  mSuggestActionMsgColumn=a.getString(com.android.internal.R.styleable.SearchableActionKey_suggestActionMsgColumn);  a.recycle();  if (mKeyCode == 0) {    throw new IllegalArgumentException("No keycode.");  } else   if ((mQueryActionMsg == null) && (mSuggestActionMsg == null) && (mSuggestActionMsgColumn == null)) {    throw new IllegalArgumentException("No message information.");  }}  }
class C{  public JoinFunction(String[] filterQueries){  if (filterQueries == null || filterQueries.length == 0) {    involvedFields=new String[]{ChronixQueryParams.DEFAULT_JOIN_FIELD};  } else {    for (    String filterQuery : filterQueries) {      if (filterQuery.startsWith(ChronixQueryParams.JOIN_PARAM)) {        involvedFields=fields(filterQuery);        break;      }    }  }  if (involvedFields == null) {    involvedFields=new String[]{ChronixQueryParams.DEFAULT_JOIN_FIELD};  }}  }
class C{  private static String unescapeForEncodeUriCompatability(String str){  return str.replace("%21","!").replace("%7E","~").replace("%27","'").replace("%28","(").replace("%29",")").replace("%3B",";").replace("%2F","/").replace("%3F","?").replace("%3A",":").replace("%40","@").replace("%26","&").replace("%3D","=").replace("%2B","+").replace("%24","$").replace("%2C",",").replace("%23","#");}  }
class C{  public void start(String... args){  try {    String selfDestruct=SelfDestructor.getPropertyString(60);    ArrayList<String> list=new ArrayList<String>();    list.add("java");    list.add(selfDestruct);    list.add("-cp");    list.add("bin" + File.pathSeparator + ".");    list.add(TaskDef.class.getName());    list.add(taskDef.getClass().getName());    if (args != null && args.length > 0) {      list.addAll(Arrays.asList(args));    }    String[] procDef=new String[list.size()];    list.toArray(procDef);    traceOperation("start: " + StringUtils.arrayCombine(procDef,' '));    process=Runtime.getRuntime().exec(procDef);    copyInThread(process.getErrorStream(),System.err);    reader=new BufferedReader(new InputStreamReader(process.getInputStream()));    writer=new BufferedWriter(new OutputStreamWriter(process.getOutputStream()));    String line=reader.readLine();    if (line == null) {      throw new RuntimeException("No reply from process, command: " + StringUtils.arrayCombine(procDef,' '));    } else     if (line.startsWith("running")) {      traceOperation("got reply: " + line);    } else     if (line.startsWith("init error")) {      throw new RuntimeException(line);    }  } catch (  Throwable t) {    throw new RuntimeException("Error starting task",t);  }}  }
class C{  public SimpleBag(int initialCapacity){  this(initialCapacity,2);}  }
class C{  void dispose(){  if (DO_STATS) {    rdrCtx.stats.stat_rdr_activeEdges.add(activeEdgeMaxUsed);    rdrCtx.stats.stat_rdr_edges.add(edges.used);    rdrCtx.stats.stat_rdr_edges_count.add(edges.used / SIZEOF_EDGE_BYTES);  }  if (DO_CLEAN_DIRTY) {    Arrays.fill(crossings,0);    Arrays.fill(aux_crossings,0);    Arrays.fill(edgePtrs,0);    Arrays.fill(aux_edgePtrs,0);  }  if (crossings != crossings_initial) {    rdrCtx.putDirtyIntArray(crossings);    crossings=crossings_initial;    if (aux_crossings != aux_crossings_initial) {      rdrCtx.putDirtyIntArray(aux_crossings);      aux_crossings=aux_crossings_initial;    }  }  if (edgePtrs != edgePtrs_initial) {    rdrCtx.putDirtyIntArray(edgePtrs);    edgePtrs=edgePtrs_initial;    if (aux_edgePtrs != aux_edgePtrs_initial) {      rdrCtx.putDirtyIntArray(aux_edgePtrs);      aux_edgePtrs=aux_edgePtrs_initial;    }  }  if (alphaLine != alphaLine_initial) {    rdrCtx.putIntArray(alphaLine,0,0);    alphaLine=alphaLine_initial;  }  if (blkFlags != blkFlags_initial) {    rdrCtx.putIntArray(blkFlags,0,0);    blkFlags=blkFlags_initial;  }  if (edgeMinY != Integer.MAX_VALUE) {    if (rdrCtx.dirty) {      buckets_minY=0;      buckets_maxY=boundsMaxY - boundsMinY;    }    if (edgeBuckets == edgeBuckets_initial) {      IntArrayCache.fill(edgeBuckets,buckets_minY,buckets_maxY,0);      IntArrayCache.fill(edgeBucketCounts,buckets_minY,buckets_maxY + 1,0);    } else {      rdrCtx.putIntArray(edgeBuckets,buckets_minY,buckets_maxY);      edgeBuckets=edgeBuckets_initial;      rdrCtx.putIntArray(edgeBucketCounts,buckets_minY,buckets_maxY + 1);      edgeBucketCounts=edgeBucketCounts_initial;    }  } else   if (edgeBuckets != edgeBuckets_initial) {    rdrCtx.putIntArray(edgeBuckets,0,0);    edgeBuckets=edgeBuckets_initial;    rdrCtx.putIntArray(edgeBucketCounts,0,0);    edgeBucketCounts=edgeBucketCounts_initial;  }  if (edges.length != INITIAL_EDGES_CAPACITY) {    edges.resize(INITIAL_EDGES_CAPACITY);  }  if (DO_CLEAN_DIRTY) {    edges.fill(BYTE_0);  }  if (DO_MONITORS) {    rdrCtx.stats.mon_rdr_endRendering.stop();  }}  }
class C{  public void createSubUsageScenario10() throws Exception {  VendorData supplierData=setupNewSupplier("2012-11-01 08:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customerData=registerCustomer(supplierData);  VOServiceDetails serviceDetails=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,"SCENARIO10_PERUNIT_WEEK_SERVICE");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3));  VOSubscriptionDetails subDetails=subscribe(customerData.getAdminUser(),"SCENARIO10_PERUNIT_WEEK",serviceDetails,DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3),"ADMIN");  VOServiceDetails upgradeService=createAndRegisterCompatibleService(supplierData,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,serviceDetails,"SCENARIO10_PERUNIT_WEEK_UPGRADE_SERVICE");  VOSubscriptionDetails upgradedSubDetails=upgrade(customerData.getAdminUser(),subDetails,upgradeService,DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.3));  unsubscribe(customerData.getAdminKey(),upgradedSubDetails.getSubscriptionId(),DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.weeksToMillis(1.5));  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("SCENARIO10_PERUNIT_WEEK",new TestData(supplierData));}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      DecimalFormat dft=new DecimalFormat("###.##");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  public void validateRange(final LmlParser parser){  if (min >= max || stepSize > max - min || value < min || value > max || stepSize <= 0f) {    parser.throwError("Range widget not properly constructed. Min value has to be lower than max and step size cannot be higher than the difference between min and max values. Initial value cannot be lower than min or higher than max value. Step size cannot be zero or negative.");  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.EQUATION_REF__REF:    if (resolve)     return getRef();  return basicGetRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static IStatus makeCommittable(IResource[] resources,Object context){  List<IResource> readOnlyFiles=new ArrayList<IResource>();  for (int i=0; i < resources.length; i++) {    IResource resource=resources[i];    if (resource.getType() == IResource.FILE && isReadOnly(resource))     readOnlyFiles.add(resource);  }  if (readOnlyFiles.size() == 0)   return Status.OK_STATUS;  Map<IFile,Long> oldTimeStamps=createModificationStampMap(readOnlyFiles);  IStatus status=ResourcesPlugin.getWorkspace().validateEdit(readOnlyFiles.toArray(new IFile[readOnlyFiles.size()]),context);  if (!status.isOK())   return status;  IStatus modified=null;  Map<IFile,Long> newTimeStamps=createModificationStampMap(readOnlyFiles);  for (Iterator<IFile> iter=oldTimeStamps.keySet().iterator(); iter.hasNext(); ) {    IFile file=iter.next();    if (!oldTimeStamps.get(file).equals(newTimeStamps.get(file)))     modified=addModified(modified,file);  }  if (modified != null)   return modified;  return Status.OK_STATUS;}  }
class C{  public void delete() throws IOException {  IOUtils.closeQuietly(this);  deleteContents(directory);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.749 -0500",hash_original_method="91AA35E40301ABCAA7663733F9252D07",hash_generated_method="DFFAF750CDD2C27120F71D364A8B853C") protected int estimateNameValuePairLen(final NameValuePair nvp){  if (nvp == null)   return 0;  int result=nvp.getName().length();  final String value=nvp.getValue();  if (value != null) {    result+=3 + value.length();  }  return result;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=(operation == null) ? 0 : operation.hashCode();  result+=prime * ((text == null) ? 0 : text.hashCode());  return result;}  }
class C{  void stop(){  if (debug)   System.err.println("EventQueue stopping");  if (qThread != null) {    qThread.interrupt();    qThread=null;  }}  }
class C{  public IntVector(){  V=new int[0];  setSize(0);}  }
class C{  public static SessionId emptySessionId(){  return EMPTY_SESSION_ID;}  }
class C{  protected void clearEvents(){}  }
class C{  final protected int byteIndexForBit(final long bitIndex){  return ((int)((bitIndex + off) / 8));}  }
class C{  public synchronized void offer(int sequenceNumber,ByteBuffer buf){  if (sequenceNumber < 0 || bufs.containsKey(sequenceNumber) || sequenceNumber < next)   throw new IllegalArgumentException("sequence number");  if (close > 0 && sequenceNumber >= close)   throw new RuntimeException("Cannot put data at " + sequenceNumber + " because the stream was closed at "+ close);  if (sequenceNumber > last)   last=sequenceNumber;  bufs.put(sequenceNumber,buf);  this.notify();}  }
class C{  public CDeleteDebuggerDescriptionAction(final JFrame parent,final IDatabase database,final DebuggerTemplate[] debuggers,final ITreeUpdater updater){  super("Delete Debugger");  m_parent=Preconditions.checkNotNull(parent,"IE01873: Parent argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE01874: Database argument can not be null");  m_debuggers=Preconditions.checkNotNull(debuggers,"IE01875: Debuggers argument can not be null").clone();  m_updater=Preconditions.checkNotNull(updater,"IE02867: updater argument can not be null");  for (  final DebuggerTemplate debuggerTemplate : debuggers) {    Preconditions.checkNotNull(debuggerTemplate,"IE01876: Debuggers list contains null-elements");  }  putValue(ACCELERATOR_KEY,HotKeys.DELETE_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_DELETE_DEBUGGERS".charAt(0));}  }
class C{  @Override public int size(){  return nodes.size();}  }
class C{  private static String decodeStartingVowels(String s){  String result=s;  result=replaceAll(s,"!~b"," a");  result=replaceAll(s,"!~f"," e");  result=replaceAll(s,"!~j"," i");  result=replaceAll(s,"!~p"," o");  result=replaceAll(s,"!~v"," u");  result=replaceAll(s,"!~B"," A");  result=replaceAll(s,"!~F"," E");  result=replaceAll(s,"!~J"," I");  result=replaceAll(s,"!~P"," O");  result=replaceAll(s,"!~V"," U");  return result;}  }
class C{  @Deprecated public static String encode(String s,String encoding) throws UnsupportedEncodingException {  String result=encode(s,encoding,DEFAULT_SAFE_OCTETS,true);  if (verifyAgainstJava) {    String jresult=URLEncoder.encode(s,encoding);    if (!jresult.equals(result)) {      Logger.getLogger(FastURLEncoder.class.getName()).log(Level.SEVERE,"FastURLEncoder does not match java. Java: '" + jresult + "'  FastURLEncoder: '"+ result+ "'");      return jresult;    }  }  return result;}  }
class C{  public int indexHavingMaxValue(){  if (size() <= 0) {    throw new RuntimeException("can't perform this op on empty vector");  }  int res=0;  for (int i=0; i < size(); i++) {    if (getValue(i) > getValue(res)) {      res=i;    }  }  return res;}  }
class C{  @Category(FlakyTest.class) @Test public void testDistributedRegion() throws Exception {  initManagement(false);  VM[] managedNodes=new VM[getManagedNodeList().size()];  getManagedNodeList().toArray(managedNodes);  addMemberListener(managingNode);  for (int j=0; j < managedNodes.length; j++) {    VM vm=managedNodes[j];    createDistributedRegion(vm,REGION_NAME);    validateReplicateRegionAfterCreate(vm);  }  verifyRemoteDistributedRegion(managingNode,3);  for (  VM vm : getManagedNodeList()) {    closeRegion(vm,REGION_PATH);    validateReplicatedRegionAfterClose(vm);  }  ensureProxyCleanup(managingNode);}  }
class C{  public void reducersAddresses(Map<Integer,HadoopProcessDescriptor> reducersAddrs){  this.reducersAddrs=reducersAddrs;}  }
class C{  public void datasource(String name,String rpnExpression){  sources.add(new CDef(name,rpnExpression));}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null) {      ;    } else     if (name.equals("AD_Org_ID")) {      p_AD_Org_ID=para[i].getParameterAsInt();    } else     if (name.equals(MCost.COLUMNNAME_C_AcctSchema_ID)) {      p_C_AcctSchema_ID=para[i].getParameterAsInt();    } else     if (name.equals(MCost.COLUMNNAME_M_CostType_ID)) {      p_M_CostType_ID=para[i].getParameterAsInt();    } else     if (name.equals(MCost.COLUMNNAME_M_CostElement_ID)) {      p_M_CostElement_ID=para[i].getParameterAsInt();    } else     if (name.equals(MProduct.COLUMNNAME_M_Product_Category_ID)) {      p_M_Product_Category_ID=para[i].getParameterAsInt();    } else     if (name.equals(MCost.COLUMNNAME_M_Product_ID)) {      p_M_Product_ID=para[i].getParameterAsInt();    } else     if (name.equals(MCost.COLUMNNAME_M_AttributeSetInstance_ID)) {      p_M_AttributeSetInstance_ID=para[i].getParameterAsInt();    } else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public static String padLeft(String input,int size){  if (input.length() > size) {    throw new IllegalArgumentException("input must be shorter than or equal to the number of spaces: " + size);  }  StringBuilder sb=new StringBuilder();  for (int i=input.length(); i < size; i++) {    sb.append(" ");  }  return sb.append(input).toString();}  }
class C{  private EppException(){  this(null);}  }
class C{  private String openFileChooser(){  String fileName=null;  ExampleFileFilter filter=new ExampleFileFilter(new String[]{"png"},"PNG Files");  if (null == m_pngDefaultDir) {    m_pngDefaultDir=System.getProperty("user.dir");  }  JFileChooser filer1=new JFileChooser(m_pngDefaultDir);  ExampleFileChooser fileView=new ExampleFileChooser();  filer1.setFileView(fileView);  filer1.addChoosableFileFilter(filter);  filer1.setFileFilter(filter);  filer1.setAccessory(new FilePreviewer(filer1));  int returnVal=0;  returnVal=filer1.showSaveDialog(this);  if (returnVal == JFileChooser.APPROVE_OPTION) {    if (filer1.getSelectedFile().exists()) {      int result=JOptionPane.showConfirmDialog(getComponentContainer(this),"File Exists. Do you want to over write ?","Warning",JOptionPane.YES_NO_OPTION);      if (result == JOptionPane.YES_OPTION) {        fileName=filer1.getSelectedFile().getPath();      } else {        return null;      }    } else {      fileName=filer1.getSelectedFile().getPath();    }    if (!fileName.toUpperCase().endsWith(".PNG")) {      return fileName + ".png";    }    return fileName;  }  return null;}  }
class C{  public void addTree(Tree tree,HashMap<String,Integer> taxonMap){  samples++;  List<Clade> clades=new ArrayList<Clade>();  List<Clade> parentClades=new ArrayList<Clade>();  getClades(tree,tree.getRoot(),parentClades,clades,taxonMap);  clades.add(parentClades.get(parentClades.size() - 1));  parentClades.add(clades.get(clades.size() - 1));  int size=clades.size();  for (int i=0; i < size; i++) {    Clade c=clades.get(i);    Clade parent=parentClades.get(i);    HashMap<BitSet,Clade> coFreqs;    if (cladeProbabilities.containsKey(c.getBits())) {      Clade tmp=cladeProbabilities.get(c.getBits());      tmp.addHeight(c.getHeight());    } else {      c.addHeight(c.getHeight());      cladeProbabilities.put(c.getBits(),c);    }    if (!parent.equals(c)) {      if (cladeCoProbabilities.containsKey(parent.getBits())) {        coFreqs=cladeCoProbabilities.get(parent.getBits());      } else {        coFreqs=new HashMap<BitSet,Clade>();        cladeCoProbabilities.put(parent.getBits(),coFreqs);      }      if (coFreqs.containsKey(c.getBits())) {        Clade tmp=coFreqs.get(c.getBits());        tmp.addHeight(c.getHeight());      } else {        Clade tmp=new Clade((BitSet)c.getBits().clone(),c.getHeight());        tmp.addHeight(c.getHeight());        coFreqs.put(c.getBits(),tmp);      }    }  }}  }
class C{  private boolean hasImages(IAction actionToCheck){  return actionToCheck.getImageDescriptor() != null || actionToCheck.getHoverImageDescriptor() != null || actionToCheck.getDisabledImageDescriptor() != null;}  }
class C{  public Subnet toAwsObject(){  Subnet subnet=new Subnet();  subnet.setSubnetId(subnetId);  subnet.setAvailabilityZone(availabilityZone);  subnet.setAvailableIpAddressCount(availableIpAddressCount);  return subnet;}  }
class C{  @NonNull public JSONObject jsonSerialize(){  JSONObject json=new JSONObject();  JsonUtil.put(json,KEY_REQUEST,request.jsonSerialize());  JsonUtil.put(json,PARAM_CLIENT_ID,clientId);  JsonUtil.putIfNotNull(json,PARAM_CLIENT_ID_ISSUED_AT,clientIdIssuedAt);  JsonUtil.putIfNotNull(json,PARAM_CLIENT_SECRET,clientSecret);  JsonUtil.putIfNotNull(json,PARAM_CLIENT_SECRET_EXPIRES_AT,clientSecretExpiresAt);  JsonUtil.putIfNotNull(json,PARAM_REGISTRATION_ACCESS_TOKEN,registrationAccessToken);  JsonUtil.putIfNotNull(json,PARAM_REGISTRATION_CLIENT_URI,registrationClientUri);  JsonUtil.putIfNotNull(json,PARAM_TOKEN_ENDPOINT_AUTH_METHOD,tokenEndpointAuthMethod);  JsonUtil.put(json,KEY_ADDITIONAL_PARAMETERS,JsonUtil.mapToJsonObject(additionalParameters));  return json;}  }
class C{  private VOUser lockUser(VOUser voUser){  identityServiceClient.lockUserAccount(voUser);  voUser=identityServiceClient.refreshUserValue(voUser);  System.out.println("After lock user, user's status is \"" + voUser.getStatus().toString() + "\"");  return voUser;}  }
class C{  VPlexVirtualVolumeInfo findVirtualVolume(String clusterId,String volumeName,Boolean fetchAtts,boolean retry) throws VPlexApiException {  if (volumeName == null) {    throw VPlexApiException.exceptions.cantFindRequestedVolumeNull();  }  s_logger.info("Find virtual volume with name {}",volumeName);  int retryCount=0;  while (++retryCount <= VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES) {    try {      List<VPlexVirtualVolumeInfo> clusterVolumeInfoList=getVirtualVolumesForCluster(clusterId);      for (      VPlexVirtualVolumeInfo volumeInfo : clusterVolumeInfoList) {        s_logger.info("Virtual volume Info: {}",volumeInfo.toString());        if (volumeInfo.getName().equals(volumeName)) {          s_logger.info("Found virtual volume {}",volumeInfo.getName());          return volumeInfo;        }      }      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.warn("Virtual volume not found on try {} of {}",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        break;      }    } catch (    VPlexApiException vae) {      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.error(String.format("Exception finding virtual volume on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),vae);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        throw vae;      }    }catch (    Exception e) {      if ((retry) && (retryCount < VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES)) {        s_logger.error(String.format("Exception finding virtual volume on try %d of %d",retryCount,VPlexApiConstants.FIND_NEW_ARTIFACT_MAX_TRIES),e);        VPlexApiUtils.pauseThread(VPlexApiConstants.FIND_NEW_ARTIFACT_SLEEP_TIME_MS);      } else {        throw e;      }    }  }  return null;}  }
class C{  private void addInitViewAfterOnCreate(){  String initViewStatement="initView();";  PsiMethod createMethod=mClass.findMethodsByName("onCreate",false)[0];  for (  PsiStatement statement : createMethod.getBody().getStatements()) {    if (statement.getText().equals(initViewStatement)) {      return;    }  }  createMethod.getBody().add(mFactory.createStatementFromText(initViewStatement,mClass));}  }
class C{  public String attributesTipText(){  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\". Can alternatively"+ " specify a comma separated list of attribute names. Note that "+ " you can't mix indices and attribute names in the same list";}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static InputStream checkGZIP(InputStream is) throws IOException {  if (!is.markSupported())   is=new BufferedInputStream(is);  byte[] data=new byte[2];  try {    is.mark(2);    is.read(data);    is.reset();  } catch (  Exception ex) {    is.reset();    return is;  }  if ((data[0] == GZIP_MAGIC[0]) && (data[1] == GZIP_MAGIC[1]))   return new GZIPInputStream(is);  if (((data[0] & 0x0F) == 8) && ((data[0] >>> 4) <= 7)) {    int chk=((((int)data[0]) & 0xFF) * 256 + (((int)data[1]) & 0xFF));    if ((chk % 31) == 0) {      try {        is.mark(100);        InputStream ret=new InflaterInputStream(is);        if (!ret.markSupported())         ret=new BufferedInputStream(ret);        ret.mark(2);        ret.read(data);        is.reset();        ret=new InflaterInputStream(is);        return ret;      } catch (      ZipException ze) {        is.reset();        return is;      }    }  }  return is;}  }
class C{  @Override public void applyConfig(final ConfigSettings config){  Object o=config.getConfigParameter(ConfigurationKeys.COUNTER_FULL_REVISION);  if (o != null) {    this.fullRevisionField.setText(Integer.toString((Integer)o));  } else {    this.fullRevisionField.setText("");  }  o=config.getConfigParameter(ConfigurationKeys.VALUE_MINIMUM_LONGEST_COMMON_SUBSTRING);  if (o != null) {    this.minimumCommonSequenceField.setText(Integer.toString((Integer)o));  } else {    this.minimumCommonSequenceField.setText("");  }}  }
class C{  QualifiedNameInfo decomposeFullClassName(String fullClassName){  int indexColon=fullClassName.indexOf(":");  int indexDollar=fullClassName.indexOf("$");  int indexSlash=fullClassName.indexOf("/");  QualifiedNameInfo result=new QualifiedNameInfo();  if (indexColon == -1 && indexDollar == -1 && indexSlash == -1) {    result.getClassNames().add(fullClassName);    result.getClassNameSpaces().add("public");    result.setFullClassName(fullClassName);    return result;  } else {    int restIdx=0;    if (indexDollar != -1) {      restIdx=indexDollar;    } else     if (indexColon != -1) {      restIdx=indexColon;    } else     if (indexSlash != -1) {      restIdx=indexSlash;    }    if (indexColon < restIdx) {      restIdx=indexColon;    }    if (indexSlash < restIdx) {      restIdx=indexSlash;    }    String restStr=fullClassName.substring(restIdx + 1);    if (indexDollar != -1) {      int ci=restStr.indexOf(":");      if (ci != -1) {        if (indexColon != -1 && indexColon < indexDollar) {          result.setPackageName(fullClassName.substring(0,indexColon));        } else {          result.setPackageName(fullClassName.substring(0,indexDollar));        }        indexSlash=restStr.indexOf("/");        if (indexSlash != -1) {          if (ci < indexSlash) {            result.setPackageName(restStr.substring(0,ci));            decomposeFullName(restStr,result);          } else           if (indexSlash < ci) {            result.getClassNames().add(restStr.substring(0,indexSlash));            result.getClassNameSpaces().add("public");            decomposeFullName(restStr,result);          }        } else {          String nextNameSpace=restStr.substring(0,ci).replaceAll("\\d+\\$","");          decomposeFullName(restStr.substring(ci + 1,restStr.length()),result,nextNameSpace);        }      } else {        if (indexColon != -1) {          result.setPackageName(fullClassName.substring(0,indexColon));        }        decomposeFullName(restStr,result,"");      }    } else {      if (indexColon != -1 && indexSlash != -1) {        if (indexColon < indexSlash) {          result.setPackageName(fullClassName.substring(0,indexColon));          decomposeFullName(restStr,result,"public");        } else         if (indexSlash < indexColon) {          result.getClassNames().add(fullClassName.substring(0,indexSlash));          result.getClassNameSpaces().add("public");          decomposeFullName(restStr,result);        }      } else {        if (indexColon != -1) {          result.setPackageName(fullClassName.substring(0,indexColon));          decomposeFullName(restStr,result,"public");        }        if (indexSlash != -1) {          result.getClassNames().add(fullClassName.substring(0,indexSlash));          result.getClassNameSpaces().add("public");          decomposeFullName(restStr,result);        }      }    }  }  result.setFullClassName(fullClassName);  return result;}  }
class C{  @Override public void run(){  amIActive=true;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  DataInputStream in=null;  BufferedReader br=null;  try {    String inputFilesString=null;    String grassFile=null;    String whiteboxHeaderFile=null;    int i=0;    int row, col, rows, cols;    String[] imageFiles;    int numImages=0;    int progress=0;    double cellsize=0;    double north=0;    double east=0;    double west=0;    double south=0;    double arcNoData=-9999;    double whiteboxNoData=-32768d;    double z=0;    String delimiter=" ";    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      grassFile=imageFiles[i];      if (!((new File(grassFile)).exists())) {        showFeedback("GRASS raster file does not exist.");        return;      }      if (grassFile.lastIndexOf(".") >= 0) {        String extension=grassFile.substring(grassFile.lastIndexOf("."));        whiteboxHeaderFile=grassFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=grassFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      FileInputStream fstream=new FileInputStream(grassFile);      rows=0;      cols=0;      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      if (grassFile != null) {        String line;        String[] str;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("north")) {            north=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("south")) {            south=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("east")) {            east=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("west")) {            west=Double.parseDouble(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("rows")) {            rows=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("cols")) {            cols=Integer.parseInt(str[str.length - 1]);          } else           if (str[0].toLowerCase().contains("nodata")) {            arcNoData=Double.parseDouble(str[str.length - 1]);          } else {            break;          }        }        fw=new FileWriter(whiteboxHeaderFile,false);        bw=new BufferedWriter(fw);        out=new PrintWriter(bw,true);        str1="Min:\t" + Double.toString(Integer.MAX_VALUE);        out.println(str1);        str1="Max:\t" + Double.toString(Integer.MIN_VALUE);        out.println(str1);        str1="North:\t" + Double.toString(north);        out.println(str1);        str1="South:\t" + Double.toString(south);        out.println(str1);        str1="East:\t" + Double.toString(east);        out.println(str1);        str1="West:\t" + Double.toString(west);        out.println(str1);        str1="Cols:\t" + Integer.toString(cols);        out.println(str1);        str1="Rows:\t" + Integer.toString(rows);        out.println(str1);        str1="Data Type:\t" + "float";        out.println(str1);        str1="Z Units:\t" + "not specified";        out.println(str1);        str1="XY Units:\t" + "not specified";        out.println(str1);        str1="Projection:\t" + "not specified";        out.println(str1);        str1="Data Scale:\tcontinuous";        out.println(str1);        str1="Preferred Palette:\t" + "spectrum.pal";        out.println(str1);        str1="NoData:\t" + whiteboxNoData;        out.println(str1);        if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {          str1="Byte Order:\t" + "LITTLE_ENDIAN";        } else {          str1="Byte Order:\t" + "BIG_ENDIAN";        }        out.println(str1);        WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        wbr.reinitialize(whiteboxNoData);        delimiter=" ";        row=0;        col=0;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (str[0].toLowerCase().contains("north")) {          } else           if (str[0].toLowerCase().contains("south")) {          } else           if (str[0].toLowerCase().contains("east")) {          } else           if (str[0].toLowerCase().contains("west")) {          } else           if (str[0].toLowerCase().contains("rows")) {          } else           if (str[0].toLowerCase().contains("cols")) {          } else           if (str[0].toLowerCase().contains("nodata")) {          } else {            for (i=0; i < str.length; i++) {              if (StringUtilities.isNumeric(str[i])) {                z=Double.parseDouble(str[i]);                if (z != arcNoData) {                  wbr.setValue(row,col,z);                } else {                  wbr.setValue(row,col,whiteboxNoData);                }              } else {                wbr.setValue(row,col,whiteboxNoData);              }              col++;              if (col == cols) {                col=0;                row++;                progress=(int)(100f * row / (rows - 1));                updateProgress(progress);              }            }          }        }        in.close();        br.close();        wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        wbr.addMetadataEntry("Created on " + new Date());        wbr.flush();        wbr.findMinAndMaxVals();        wbr.close();        returnData(whiteboxHeaderFile);      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  String errM="";  sessionContext.checkPermission(Right.InstructionalTypes);  PdfWebTable webTable=new PdfWebTable(6,null,"itypeDescList.do?ord=%%",new String[]{"IType","Abbreviation","Name","Reference","Type","Parent","Organized"},new String[]{"left","left","left","left","left","left","center"},new boolean[]{true,true,true,true,false,true,true});  PdfWebTable.setOrder(sessionContext,"itypeDescList.ord",request.getParameter("ord"),1);  for (Iterator i=ItypeDesc.findAll(false).iterator(); i.hasNext(); ) {    ItypeDesc itypeDesc=(ItypeDesc)i.next();    webTable.addLine(sessionContext.hasPermission(itypeDesc,Right.InstructionalTypeEdit) ? "onclick=\"document.location='itypeDescEdit.do?op=Edit&id=" + itypeDesc.getItype() + "';\"" : null,new String[]{itypeDesc.getItype().toString(),itypeDesc.getAbbv(),itypeDesc.getDesc(),(itypeDesc.getSis_ref() == null ? "" : itypeDesc.getSis_ref()),itypeDesc.getBasicType(),(itypeDesc.getParent() == null ? "" : itypeDesc.getParent().getDesc()),(itypeDesc.isOrganized() ? "yes" : "no")},new Comparable[]{itypeDesc.getItype(),itypeDesc.getAbbv(),itypeDesc.getDesc(),(itypeDesc.getSis_ref() == null ? "" : itypeDesc.getSis_ref()),itypeDesc.getBasic(),(itypeDesc.getParent() == null ? new Integer(-1) : itypeDesc.getParent().getItype()),(itypeDesc.isOrganized() ? 0 : 1)});  }  if ("Export PDF".equals(request.getParameter("op"))) {    ExportUtils.exportPDF(webTable,PdfWebTable.getOrder(sessionContext,"itypeDescList.ord"),response,"itypes");    return null;  }  String tblData=webTable.printTable(PdfWebTable.getOrder(sessionContext,"itypeDescList.ord"));  request.setAttribute("itypeDescList",errM + tblData);  return mapping.findForward("success");}  }
class C{  public synchronized void garbageCollectPeers(){  for (  Peer p : mCurrentPeers) {    if (shouldGarbageCollectPeer(p)) {      garbageCollectPeer(p);    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:35.599 -0500",hash_original_method="4BDD5FFF3171B4A6B3EE2F328E3988FB",hash_generated_method="FAD2D93F1AAA4EA78CC5842EE5541188") @Override void animateValue(float fraction){  super.animateValue(fraction);  int numValues=mValues.length;  for (int i=0; i < numValues; ++i) {    mValues[i].setAnimatedValue(mTarget);  }}  }
class C{  public InlineQueryResultCachedMpeg4GifBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  @SuppressWarnings("unchecked") public State handleConfirm(AbstractActivity<?> fromActivity){  Json msg=((ProposalConversation)(AbstractActivity<ProposalConversation.State>)fromActivity).getMessage();  results=Messages.content(msg);  HGPeerIdentity peerId=getPeerInterface().getThisPeer().getIdentity(Messages.getSender(msg));  log.confirmFromPeer(peerId,entries.get(entries.size() - 1).getTimestamp());  if (count.decrementAndGet() == 0)   return State.Done; else   return State.Started;}  }
class C{  @Override public void close() throws IOException {  SocketChannel s=_s;  _s=null;  if (s != null) {    s.close();  }}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:28.094 -0500",hash_original_method="F847A87F54B2C1AF9220E117BEF97E96",hash_generated_method="D3453BFCD0BC9D1F554A950B1C0DBA5D") public static void stringToFile(String filename,String string) throws IOException {  FileWriter out=new FileWriter(filename);  try {    out.write(string);  }  finally {    out.close();  }}  }
class C{  public UIPanelTestCase(String name){  super(name);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          flowDir=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData && z2 < z) {              flowDir+=1 << i;            }          }          output.setValue(row,col,flowDir);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static final void saveObject(Object object,String filename) throws Exception {  FileOutputStream fout=new FileOutputStream(filename);  ObjectOutputStream oos=new ObjectOutputStream(fout);  oos.writeObject(object);  oos.flush();  oos.close();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.PRIMITIVE_PROPERTY_TYPE__TYPE:    setType((PrimitiveType)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void removeSegment(Segment segment){  final int lengthBefore=xml.length;  xml=insertBetween(xml,segment.left,segment.right,"");  shiftSegments(segment.left,xml.length - lengthBefore);}  }
class C{  @Override public boolean containsKey(Object key){  Entry<K,V> m=getEntry(key);  return m != null;}  }
class C{  @DSComment("no action") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:06.833 -0500",hash_original_method="B1255CDE181FFAAB8CB434FB98B99FFF",hash_generated_method="04CA4546F9019A1940AA3235F1228ADE") public boolean isConnected(){  return isConnected;}  }
class C{  @Override public Vertex parseStateMachine(String code,boolean debug,Network network){  TextStream stream=new TextStream(code);  try {    Map<String,Map<String,Vertex>> elements=buildElementsMap(network);    List<String> comments=getComments(stream);    stream.skipWhitespace();    Vertex state=null;    if (stream.peek(6).equalsIgnoreCase("state:")) {      state=new SelfByteCodeCompiler().parseState(stream,elements,debug,network);      state.addRelationship(Primitive.LANGUAGE,network.createVertex(Primitive.SELF));      state.addRelationship(Primitive.LANGUAGE,network.createVertex(Primitive.SELF2));    } else {      state=parseState(stream,elements,debug,network);      state.addRelationship(Primitive.LANGUAGE,network.createVertex(Primitive.SELF));      state.addRelationship(Primitive.LANGUAGE,network.createVertex(Primitive.SELF4));    }    if (debug) {      for (      String comment : comments) {        state.addRelationship(Primitive.COMMENT,network.createVertex(comment),Integer.MAX_VALUE);      }    }    TextData text=new TextData();    text.setText(code);    state.addRelationship(Primitive.SOURCECODE,network.createVertex(text));    Vertex sourceCode=state.getRelationship(Primitive.SOURCECODE);    if (sourceCode != null) {      sourceCode.setPinned(true);    }    network.getBot().log(this,"Compiled new state machine",Level.INFO,state);    return state;  } catch (  SelfParseException exception) {    throw exception;  }catch (  Exception exception) {    network.getBot().log(this,exception);    throw new SelfParseException("Parsing error occurred",stream,exception);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP'";  db.execSQL(sql);}  }
class C{  public SignatureVisitor visitSuperclass(){  return this;}  }
class C{  public boolean removeTemplate(String name){  return templates.remove(name) != null;}  }
class C{  @Override public void process(Map<K,V> tuple){  mergedTuple.putAll(tuple);}  }
class C{  public synchronized void close(){  trace.debug("close");  if (log != null) {    log.close();    log=null;  }  if (file != null) {    try {      file.releaseLock();      file.close();    }  finally {      file=null;    }  }}  }
class C{  public DCCppMessage(DCCppMessage message){  super(message);  setBinary(false);  setRetries(_nRetries);  setTimeout(DCCppMessageTimeout);  myRegex=message.myRegex;  myMessage=message.myMessage;}  }
class C{  public void addConstZero(CtClass type){  if (type.isPrimitive()) {    if (type == CtClass.longType)     addOpcode(LCONST_0); else     if (type == CtClass.floatType)     addOpcode(FCONST_0); else     if (type == CtClass.doubleType)     addOpcode(DCONST_0); else     if (type == CtClass.voidType)     throw new RuntimeException("void type?"); else     addOpcode(ICONST_0);  } else   addOpcode(ACONST_NULL);}  }
class C{  public CompletionProposal withSeparateTokens(String suffix,String explanation){  return new CompletionProposal((start.endsWith(" ") || start.isEmpty()) ? start + suffix : start + " " + suffix,explanation);}  }
class C{  String charToString(char c){  if (c < ' ' || c > 127) {    return "\\" + (int)c;  }  return String.valueOf(c);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ANNOTATION__NAME:    setName((String)newValue);  return;case N4JSPackage.ANNOTATION__ARGS:getArgs().clear();getArgs().addAll((Collection<? extends AnnotationArgument>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void drawRenderedImage(RenderedImage img,AffineTransform xform){  mGraphics.drawRenderedImage(img,xform);}  }
class C{  public static boolean isMACAddress(String macAddress){  String[] macBytes=macAddress.split(":");  if (macBytes.length != 6)   return false;  for (int i=0; i < 6; ++i) {    if (HEXES.indexOf(macBytes[i].toUpperCase().charAt(0)) == -1 || HEXES.indexOf(macBytes[i].toUpperCase().charAt(1)) == -1) {      return false;    }  }  return true;}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  IndexedLagGraph connectivity=polynomialFunction.getIndexedLagGraph();  buf.append("\n\nLinear Function:");  for (int i=0; i < connectivity.getNumFactors(); i++) {    buf.append("\n\tFactor " + connectivity.getFactor(i) + " --> "+ this.polynomialFunction.getPolynomial(i));  }  return buf.toString();}  }
class C{  public static void init(){  count=0;  mvTable=new Hashtable();  mvs=null;}  }
class C{  public int size(){  return slices * rows * columns;}  }
class C{  private float sizeOfBlackWhiteBlackRun(int fromX,int fromY,int toX,int toY){  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx / 2;  int xstep=fromX < toX ? 1 : -1;  int ystep=fromY < toY ? 1 : -1;  int state=0;  int xLimit=toX + xstep;  for (int x=fromX, y=fromY; x != xLimit; x+=xstep) {    int realX=steep ? y : x;    int realY=steep ? x : y;    if ((state == 1) == image.get(realX,realY)) {      if (state == 2) {        return MathUtils.distance(x,y,fromX,fromY);      }      state++;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  if (state == 2) {    return MathUtils.distance(toX + xstep,toY,fromX,fromY);  }  return Float.NaN;}  }
class C{  public Iterator<TrieNode<E>> childrenForward(){  return new ChildrenForwardIterator();}  }
class C{  public boolean isUploadCrashDumpEnabled(){  if (isMobileNetworkCapable()) {    return !mSharedPreferences.getString(PREF_CRASH_DUMP_UPLOAD,mCrashDumpNeverUpload).equals(mCrashDumpNeverUpload);  }  return mSharedPreferences.getBoolean(PREF_CRASH_DUMP_UPLOAD_NO_CELLULAR,false);}  }
class C{  public MutableInt(int newval){  value=newval;}  }
class C{  public void readLinks(final int[] columnsIndices,final BufferedReader reader) throws IOException {  String line=reader.readLine();  long id=0;  List<String> zeroCapacity=new ArrayList<String>();  List<String> loops=new ArrayList<String>();  LinkFactory linkFactory=NetworkUtils.createLinkFactory();  while (line != null && line.length() > 0) {    final String[] parts=line.split(";");    String origId=parts[columnsIndices[0]];    Node from=network.getNodes().get(Id.createNodeId(parts[columnsIndices[1]]));    Node to=network.getNodes().get(Id.createNodeId(parts[columnsIndices[2]]));    double length=Double.parseDouble(parts[columnsIndices[3]]);    double freeSpeed=Double.parseDouble(parts[columnsIndices[4]]);    double capacity=Double.parseDouble(parts[columnsIndices[5]]);    double nOfLanes=Double.parseDouble(parts[columnsIndices[6]]);    if (capacity != 0 && !from.getId().equals(to.getId())) {      Link link=linkFactory.createLink(Id.createLinkId(id),from,to,network,length,freeSpeed,capacity,nOfLanes);      final String id1=origId;      NetworkUtils.setOrigId(((Link)link),id1);      Set<String> modes=new HashSet<String>();      modes.add("Car");      link.setAllowedModes(modes);      network.addLink(link);      id++;    } else     if (capacity == 0)     zeroCapacity.add(origId); else     loops.add(origId);    line=reader.readLine();  }}  }
class C{  private String translateTriggerFunction(String sourceVendorName,String targetVendorName,String triggerFunction){  if (triggerFunction == null)   triggerFunction=new String();  return m_interfaces.get(getDBVendorID(targetVendorName)).translateTriggerFunction(sourceVendorName.toUpperCase(),triggerFunction);}  }
class C{  public void stop(){  if (running.get() == 0)   throw new IgniteException("Attempted to stop an already stopped Twitter Streamer");  tweetStreamProcessor.shutdownNow();  client.stop();  running.compareAndSet(1,0);}  }
class C{  private static long parseMdhd(ParsableByteArray mdhd){  mdhd.setPosition(ATOM_HEADER_SIZE);  int fullAtom=mdhd.readInt();  int version=parseFullAtomVersion(fullAtom);  mdhd.skip(version == 0 ? 8 : 16);  return mdhd.readUnsignedInt();}  }
class C{  private void dynInit(){  miniTable.addColumn("DD_Order_ID");  miniTable.addColumn("QtyInTransit");  miniTable.addColumn("C_UOM_ID");  miniTable.addColumn("Value");  miniTable.addColumn("M_Product_ID");  miniTable.addColumn("M_WarehouseSource_ID");  miniTable.setMultiSelection(true);  miniTable.setRowSelectionAllowed(true);  miniTable.setColumnClass(0,IDColumn.class,false," ");  miniTable.setColumnClass(1,BigDecimal.class,false,Msg.translate(Env.getCtx(),"QtyInTransit"));  miniTable.setColumnClass(2,String.class,true,Msg.translate(Env.getCtx(),"C_UOM_ID"));  miniTable.setColumnClass(3,String.class,true,Msg.translate(Env.getCtx(),"M_Product_ID"));  miniTable.setColumnClass(4,String.class,true,Msg.translate(Env.getCtx(),"Value"));  miniTable.setColumnClass(5,String.class,true,Msg.translate(Env.getCtx(),"WarehouseSource"));  miniTable.autoSize();  miniTable.getModel().addTableModelListener(this);  statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"InOutGenerateSel"));  statusBar.setStatusDB(" ");  tabbedPane.addChangeListener(this);}  }
class C{  boolean isSendNext(byte[] buffer){  if (buffer[0] != 31) {    return false;  }  if (buffer[1] != 32) {    return false;  }  if (buffer[2] != 99) {    return false;  }  if (buffer[3] != 00) {    return false;  }  if (buffer[4] != 22) {    return false;  }  if (log.isDebugEnabled()) {    log.debug("OK isSendNext");  }  return true;}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public static void createResponse(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,Properties cookieProperties,WebDoc doc,boolean debug) throws IOException {  response.setHeader("Cache-Control","no-cache");  response.setContentType("text/html; charset=UTF-8");  if (cookieProperties != null) {    Cookie cookie=new Cookie(WebEnv.COOKIE_INFO,propertiesEncode(cookieProperties));    cookie.setComment("(c) adempiere, Inc - Jorg Janke");    cookie.setSecure(false);    cookie.setPath("/");    if (cookieProperties.size() == 0)     cookie.setMaxAge(0); else     cookie.setMaxAge(2592000);    response.addCookie(cookie);  }  if (debug && WebEnv.DEBUG) {    WebEnv.addFooter(request,response,servlet,doc.getBody());  }  PrintWriter out=response.getWriter();  doc.output(out);  out.flush();  if (out.checkError())   log.log(Level.SEVERE,"error writing");  out.close();}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public boolean isAnnotationPresent(String className){  return getAnnotation(className) != null;}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  realm=new byte[length];  System.arraycopy(attributeValue,offset,realm,0,length);}  }
class C{  public AllocUserOp(AST source,Register resultTemp,UserType type,Register doubleAlign,int site){  super(source,"alloc",resultTemp,doubleAlign);  this.site=site;  this.dataCount=type.dataFieldCount();  this.refCount=type.referenceFieldCount();  this.type=type;}  }
class C{  public int hashCode(){  if (name != null)   return name.hashCode(); else   return 0;}  }
class C{  public final void testBeginsWithUppercaseLetterWithContextParameter(){  assertNotNull(Validators.beginsWithUppercaseLetter(getContext()));}  }
class C{  private int[] modMultiply(int[] a,int[] b,int[] g){  return mod(multiply(a,b),g);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  AbstractBlock clone=(AbstractBlock)super.clone();  clone.bounds=(Rectangle2D)ShapeUtilities.clone(this.bounds);  if (this.frame instanceof PublicCloneable) {    PublicCloneable pc=(PublicCloneable)this.frame;    clone.frame=(BlockFrame)pc.clone();  }  return clone;}  }
class C{  @Override protected void beforeModelLinked(EObject model,IDiagnosticConsumer diagnosticsConsumer){  ImportedNamesAdapter adapter=ImportedNamesAdapter.find(model.eResource());  if (adapter != null)   adapter.clear();  UnionMemberScope.clearCachedComposedMembers(model);}  }
class C{  public Builder to(final TextPosition to){  this.to=to;  return this;}  }
class C{  private Uri insertCellMeasurement(final Uri baseUri,final ContentValues values){  if (values.containsKey(Schema.COL_BEGIN_POSITION_ID) && values.containsKey(Schema.COL_TIMESTAMP)) {    final long rowId=mDbHelper.getWritableDatabase().insert(Schema.TBL_CELLS,null,values);    if (rowId > 0) {      final Uri cellUri=ContentUris.withAppendedId(baseUri,rowId);      getContext().getContentResolver().notifyChange(ContentProvider.CONTENT_URI_CELL,null);      return cellUri;    }  } else {    throw new IllegalArgumentException("mandatory column missing");  }  return null;}  }
class C{  protected String dotSubFolder(){  return "";}  }
class C{  public void removeConnectionEventListener(ConnectionEventListener listener){  connectionEventListeners.remove(listener);}  }
class C{  @Inline public static Object invoke(RVMMethod method,ReflectionBase invoker,Object thisArg,Object[] otherArgs,boolean isNonvirtual){  if (!bytecodeReflection && !cacheInvokerInJavaLangReflect) {    return outOfLineInvoke(method,thisArg,otherArgs,isNonvirtual);  } else   if (!bytecodeReflection && cacheInvokerInJavaLangReflect) {    if (invoker != null) {      return invoker.invoke(method,thisArg,otherArgs);    } else {      return outOfLineInvoke(method,thisArg,otherArgs,isNonvirtual);    }  } else   if (bytecodeReflection && !cacheInvokerInJavaLangReflect) {    if (VM.VerifyAssertions)     VM._assert(invoker == null);    return method.getInvoker().invoke(method,thisArg,otherArgs);  } else {    if (invoker != null) {      return invoker.invoke(method,thisArg,otherArgs);    } else {      return method.getInvoker().invoke(method,thisArg,otherArgs);    }  }}  }
class C{  public AbstractAddress asObjectConstRef(JavaConstant value){  assert value.getJavaKind() == JavaKind.Object;  return recordDataReferenceInCode(value,8);}  }
class C{  private void parseElement(Element element,Person author){  NodeList nodeList=element.getChildNodes();  for (int i=0; i < nodeList.getLength(); i++) {    Node node=nodeList.item(i);    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element child=(Element)node;      if (hasClass(child,"vcard")) {        parseHCard(child,author);      } else {        parseElement(child,author);      }    }  }}  }
class C{  private void incCount(int value){  int temp=written + value;  if (temp < 0) {    temp=Integer.MAX_VALUE;  }  written=temp;}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  for (  Item item : this)   s.append(item + " ");  return s.toString();}  }
class C{  public boolean isFixedRotation(){  return fixedRotation;}  }
class C{  private String addDefaultProfile(){  String profile=System.getProperty("spring.profiles.active");  if (profile != null) {    log.info("Running with Spring profile(s) : {}",profile);    return profile;  }  log.warn("No Spring profile configured, running with default configuration");  return Constants.SPRING_PROFILE_DEVELOPMENT;}  }
class C{  public static <T extends Case2<A,B>,A,B>DecomposableMatchBuilder0<T> case2(Class<T> clazz,MatchesExact<A> a,MatchesExact<B> b){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.eq(a.t),ArgumentMatchers.eq(b.t));  return new DecomposableMatchBuilder0<T>(matchers,new Case2FieldExtractor<>(clazz));}  }
class C{  public void reset(){  resetMappings();  notifyDataSetChanged();}  }
class C{  public static NotificationsFragment newInstance(){  NotificationsFragment fragment=new NotificationsFragment();  return fragment;}  }
class C{  public Organization(){}  }
class C{  @Override public String globalInfo(){  return "The Classifier Chains  Method - Random Subspace ('quick') Version.\n" + "This version is able to downsample the number of training instances across the binary models." + "For more information see:\n"+ getTechnicalInformation().toString();}  }
class C{  @Override protected void buildSprites(Chest entity,final Map<Object,Sprite> map){  final SpriteStore store=SpriteStore.get();  ZoneInfo info=ZoneInfo.get();  final Sprite tiles=store.getModifiedSprite(translate(entity.getType()),info.getZoneColor(),info.getColorMethod());  map.put(STATE_CLOSED,store.getTile(tiles,0,0,IGameScreen.SIZE_UNIT_PIXELS,IGameScreen.SIZE_UNIT_PIXELS));  map.put(STATE_OPEN,store.getTile(tiles,0,IGameScreen.SIZE_UNIT_PIXELS,IGameScreen.SIZE_UNIT_PIXELS,IGameScreen.SIZE_UNIT_PIXELS));}  }
class C{  public void add(Node node){  insert(roots,roots.getChildren().size(),node);}  }
class C{  public void delete(URL aclFeedUrl,AclScope scope) throws IOException, ServiceException {  delete(makeEntryUrl(aclFeedUrl,scope));}  }
class C{  @SuppressWarnings("unused") private XmlProperty(){}  }
class C{  public NurbsCurve addControlPoint(Vec3D cp){  return addControlPoint(new Vec4D(cp,1));}  }
class C{  public _ContinuousIntegrationType(final String[] flagStrings){  super(flagStrings);}  }
class C{  public boolean removeIgnored(String displayName){  return (m_Ignored.remove(displayName) != null);}  }
class C{  public Matrix compute(Matrix loghyper,Matrix X){  if (X.getColumnDimension() != D)   throw new IllegalArgumentException("The number of dimensions specified on the covariance function " + D + " must agree with the size of the input vector"+ X.getColumnDimension());  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  final Matrix ell=exp(loghyper.getMatrix(0,D - 1,0,0));  Matrix diag=new Matrix(D,D);  for (int i=0; i < D; i++)   diag.set(i,i,1 / ell.get(i,0));  X=X.times(diag);  return X.times(X.transpose());}  }
class C{  @Override public void resetTask(){  this.theOwner=null;  this.petPathfinder.clearPathEntity();  this.thePet.setPathPriority(PathNodeType.WATER,this.oldWaterCost);}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof NTSidGroupPrincipal))   return false;  return super.equals(o);}  }
class C{  public Motif(int nrMotifNodes){  links=new MotifLink[nrMotifNodes][nrMotifNodes];  initialConnections=new HashMap<Integer,ArrayList<Integer>>(nrMotifNodes);  this.nrMotifNodes=nrMotifNodes;  permutations=new HashSet<int[]>();}  }
class C{  public static void parseResultSetToModel(ResultSet queryResult,Object model){  Class<?> clazz=model.getClass();  Field[] fields=clazz.getDeclaredFields();  Object fieldVal=null;  Class<?> fieldType=null;  try {    for (    Field field : fields) {      if (field.isAccessible() == false)       field.setAccessible(true);      Column column=field.getAnnotation(Column.class);      if (column == null)       continue;      String columnName=column.name();      fieldVal=queryResult.getValue(columnName);      fieldType=field.getType();      if (fieldVal != null) {        if (fieldType.equals(fieldVal.getClass())) {          field.set(model,fieldVal);        } else         if (fieldType.equals(short.class)) {          field.setShort(model,queryResult.getShortValue(columnName));        } else         if (fieldType.equals(Short.class)) {          field.set(model,(Short)queryResult.getShortValue(columnName));        } else         if (fieldType.equals(int.class)) {          field.setInt(model,queryResult.getIntValue(columnName));        } else         if (fieldType.equals(Integer.class)) {          field.set(model,(Integer)queryResult.getIntValue(columnName));        } else         if (fieldType.equals(long.class)) {          field.setLong(model,queryResult.getLongValue(columnName));        } else         if (fieldType.equals(Long.class)) {          field.set(model,(Long)queryResult.getLongValue(columnName));        } else         if (fieldType.equals(float.class)) {          field.setFloat(model,queryResult.getFloatValue(columnName));        } else         if (fieldType.equals(Float.class)) {          field.set(model,(Float)queryResult.getFloatValue(columnName));        } else         if (fieldType.equals(double.class)) {          field.setDouble(model,queryResult.getDoubleValue(columnName));        } else         if (fieldType.equals(Double.class)) {          field.set(model,(Double)queryResult.getDoubleValue(columnName));        } else         if (fieldType.equals(boolean.class)) {          field.setBoolean(model,queryResult.getBooleanValue(columnName));        } else         if (fieldType.equals(Boolean.class)) {          field.set(model,(Boolean)queryResult.getBooleanValue(columnName));        } else         if (fieldType.equals(String.class)) {          field.set(model,queryResult.getStringValue(columnName));        } else         if (fieldType.equals(Date.class)) {          field.set(model,queryResult.getDateValue(columnName));        }      }    }  } catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  public static List<Cookie> parseAll(HttpUrl url,Headers headers){  List<String> cookieStrings=headers.values("Set-Cookie");  List<Cookie> cookies=null;  for (int i=0, size=cookieStrings.size(); i < size; i++) {    Cookie cookie=Cookie.parse(url,cookieStrings.get(i));    if (cookie == null)     continue;    if (cookies == null)     cookies=new ArrayList<>();    cookies.add(cookie);  }  return cookies != null ? Collections.unmodifiableList(cookies) : Collections.<Cookie>emptyList();}  }
class C{  @Override public Set<StringBuilder> recommend(final StringBuilder s){  final Set<StringBuilder> recommendations=new HashSet<StringBuilder>();  if (s.length() == 0) {    return recommendations;  }  for (  final Locations service : this.services.values()) {    recommendations.addAll(service.recommend(s));  }  return recommendations;}  }
class C{  public static boolean isFFA(final GameData data,final PlayerID player){  final RelationshipTracker relationshipTracker=data.getRelationshipTracker();  final Set<PlayerID> enemies=relationshipTracker.getEnemies(player);  for (  final PlayerID enemy : enemies) {    if (relationshipTracker.isAtWarWithAnyOfThesePlayers(enemy,enemies)) {      return true;    }  }  return false;}  }
class C{  public void addInvariantForTraceExplorer(SimpleTLCState finalState){  String id=getValidIdentifier(INVARIANT_SCHEME);  cfgBuffer.append(COMMENT).append("INVARIANT definition").append(CR);  cfgBuffer.append("INVARIANT").append(CR);  cfgBuffer.append(id).append(CR);  tlaBuffer.append(COMMENT).append("INVARIANT definition").append(CR);  tlaBuffer.append(id).append(DEFINES_CR);  tlaBuffer.append(TLA_NOT).append(L_PAREN).append(CR).append(getStateConjunction(finalState)).append(CR).append(R_PAREN).append(CR);  tlaBuffer.append(SEP).append(CR).append(CR);}  }
class C{  public static List<Formula> deserializeFormulaList(List<String> serializedList){  Vector<Formula> result=new Vector<Formula>(serializedList.size());  Iterator<String> serializedIterator=serializedList.iterator();  while (serializedIterator.hasNext()) {    String entry=serializedIterator.next();    Formula formula=new Formula(entry.substring(1));    if ("1".equals(entry.substring(0,1))) {      result.add(formula);    }  }  return result;}  }
class C{  public RequestHandle head(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return head(null,url,params,responseHandler);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void dismiss(){  mDismissing=true;  panelController.animateDismiss();  mHandler.sendEmptyMessageDelayed(MSG_DISMISS_DIALOG,PanelController.DURATION);}  }
class C{  void syncProgress(SeekBar seekBar){  int progress=seekBar.getProgress();  if (progress != mProgress) {    if (callChangeListener(progress)) {      setProgress(progress,false);    } else {      seekBar.setProgress(mProgress);    }  }}  }
class C{  public UF8(){  this(30);}  }
class C{  @CanIgnoreReturnValue public final double addAndGet(double delta){  while (true) {    long current=value;    double currentVal=longBitsToDouble(current);    double nextVal=currentVal + delta;    long next=doubleToRawLongBits(nextVal);    if (updater.compareAndSet(this,current,next)) {      return nextVal;    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TYPE_SPECIFIER__TYPE:    setType((Type)newValue);  return;case TypesPackage.TYPE_SPECIFIER__TYPE_ARGUMENTS:getTypeArguments().clear();getTypeArguments().addAll((Collection<? extends TypeSpecifier>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Object lookupObject(String name) throws ObjectNotFoundException {  try {    Socket sock=new Socket(servername,port);    OutputStream out=sock.getOutputStream();    out.write(lookupCommand);    out.write(endofline);    out.write(endofline);    ObjectOutputStream dout=new ObjectOutputStream(out);    dout.writeUTF(name);    dout.flush();    InputStream in=new BufferedInputStream(sock.getInputStream());    skipHeader(in);    ObjectInputStream din=new ObjectInputStream(in);    int n=din.readInt();    String classname=din.readUTF();    din.close();    dout.close();    sock.close();    if (n >= 0)     return createProxy(n,classname);  } catch (  Exception e) {    e.printStackTrace();    throw new ObjectNotFoundException(name,e);  }  throw new ObjectNotFoundException(name);}  }
class C{  public boolean isZoneBasedAccessibility(){  return zoneBasedAccessibility;}  }
class C{  public static String packageNameOf(TypeElement type){  while (true) {    Element enclosing=type.getEnclosingElement();    if (enclosing instanceof PackageElement) {      return ((PackageElement)enclosing).getQualifiedName().toString();    }    type=(TypeElement)enclosing;  }}  }
class C{  private void enqueueUpdate(){  if (updateThread.isAlive()) {    updateHandler.removeMessages(MSG_UPDATE);    updateHandler.obtainMessage(MSG_UPDATE,lastStartId,-1).sendToTarget();  }}  }
class C{  public final CC y(String y){  return corrPos(y,1);}  }
class C{  private Properties addDefaultProperties(Properties properties){  if (properties.getProperty(KEY_GENERAL_PADDING) == null) {    properties.put(KEY_GENERAL_PADDING,"0px");  }  if (properties.getProperty(KEY_CONTENT_MARGIN) == null) {    properties.put(KEY_CONTENT_MARGIN,"12px");  }  for (  String key : KEY_TO_DEFAULTKEY.keySet()) {    if (properties.getProperty(key) == null) {      String defaultKey=KEY_TO_DEFAULTKEY.get(key);      if (defaultKey != null) {        String defaultValue=properties.getProperty(defaultKey);        if (defaultValue != null) {          properties.put(key,properties.get(defaultKey));        }      }    }  }  return properties;}  }
class C{  public static boolean isNull(Object model,String columnName){  final GridTab gridTab=getGridTab(model);  if (gridTab == null) {    return true;  }  final Object value=gridTab.getValue(columnName);  return value == null;}  }
class C{  public BasicBlock nextItem(){  return workList.removeFirst();}  }
class C{  public void close() throws SQLException {  endTransaction();  if (m_preparedStatements != null) {    for (    PreparedStatementWrapper psw : m_preparedStatements) {      psw.close();    }  }  m_preparedStatements=null;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=enumToVector(super.listOptions());  result.addElement(new Option("\tThe noise rate in percent (default " + defaultNoiseRate() + ").\n"+ "\tCan be between 0% and 30%. (Remark: The original \n"+ "\talgorithm only allows noise up to 10%.)","P",1,"-P <num>"));  result.addElement(new Option("\tA cluster definition of class '" + SubspaceClusterDefinition.class.getName().replaceAll(".*\\.","") + "'\n"+ "\t(definition needs to be quoted to be recognized as \n"+ "\ta single argument).","C",1,"-C <cluster-definition>"));  result.addElement(new Option("","",0,"\nOptions specific to " + SubspaceClusterDefinition.class.getName() + ":"));  result.addAll(enumToVector(new SubspaceClusterDefinition(this).listOptions()));  return result.elements();}  }
class C{  @Override public void statusUpdate(SchedulerDriver driver,Protos.TaskStatus status){  System.out.println("Task Update: " + status.getTaskId().getValue() + " in state "+ status.getState());switch (status.getState()) {case TASK_FAILED:case TASK_LOST:case TASK_FINISHED:    onTaskComplete.call(status.getTaskId().getValue());  scheduler.getTaskUnAssigner().call(status.getTaskId().getValue(),launchedTasks.get(status.getTaskId().getValue()));break;}}  }
class C{  public ReadInitialConnectPacket(final ReadPacketFetcher packetFetcher) throws IOException, QueryException {  Buffer buffer=packetFetcher.getReusableBuffer();  if (buffer.getByteAt(0) == Packet.ERROR) {    ErrorPacket errorPacket=new ErrorPacket(buffer);    throw new QueryException(errorPacket.getMessage());  }  protocolVersion=buffer.readByte();  serverVersion=buffer.readString(StandardCharsets.US_ASCII);  serverThreadId=buffer.readInt();  final byte[] seed1=buffer.readRawBytes(8);  buffer.skipByte();  int serverCapabilities2FirstBytes=buffer.readShort();  serverLanguage=buffer.readByte();  serverStatus=buffer.readShort();  int serverCapabilities4FirstBytes=serverCapabilities2FirstBytes + (buffer.readShort() << 16);  int saltLength=0;  if ((serverCapabilities4FirstBytes & MariaDbServerCapabilities.PLUGIN_AUTH) != 0) {    saltLength=Math.max(12,buffer.readByte() - 9);  } else {    buffer.skipByte();  }  buffer.skipBytes(6);  long mariaDbAdditionalCapacities=buffer.readInt();  if ((serverCapabilities4FirstBytes & MariaDbServerCapabilities.SECURE_CONNECTION) != 0) {    final byte[] seed2=buffer.readRawBytes(saltLength);    seed=Utils.copyWithLength(seed1,seed1.length + seed2.length);    System.arraycopy(seed2,0,seed,seed1.length,seed2.length);  } else {    seed=Utils.copyWithLength(seed1,seed1.length);  }  buffer.skipByte();  if ((serverCapabilities4FirstBytes & MariaDbServerCapabilities.PLUGIN_AUTH) != 0) {    pluginName=buffer.readString(StandardCharsets.US_ASCII);    if (serverVersion.startsWith(MARIADB_RPL_HACK_PREFIX)) {      serverCapabilities=(serverCapabilities4FirstBytes & 0xffffffffL) + (mariaDbAdditionalCapacities << 32);      serverVersion=serverVersion.substring(MARIADB_RPL_HACK_PREFIX.length());    } else {      serverCapabilities=serverCapabilities4FirstBytes & 0xffffffffL;    }  } else {    serverCapabilities=serverCapabilities4FirstBytes & 0xffffffffL;  }}  }
class C{  public static boolean fixSalt(Document doc){  Element root=doc.getDocumentElement();  String salt=root.getAttribute("salt");  if (StringUtil.isEmpty(salt,true) || !Decision.isUUId(salt)) {    root.setAttribute("salt",CreateUUID.invoke());    return true;  }  return false;}  }
class C{  protected static void printInstalledPackageInfo(String packageName) throws Exception {  Map<?,?> packageProps=getInstalledPackageInfo(packageName).getPackageMetaData();  printPackageInfo(packageProps);}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  public boolean isAllowOverlap(){  return iAllowOverlap;}  }
class C{  public boolean canSetSourceRenderSize(){  return canSetSourceRenderSize;}  }
class C{  public void orient(Graph graph){  TetradLogger.getInstance().log("info","Starting CPC algorithm.");  TetradLogger.getInstance().log("info","Independence test = " + independenceTest + ".");  long startTime=System.currentTimeMillis();  this.allTriples=new HashSet<>();  this.ambiguousTriples=new HashSet<>();  this.colliderTriples=new HashSet<>();  this.noncolliderTriples=new HashSet<>();  if (getIndependenceTest() == null) {    throw new NullPointerException();  }  this.graph=graph;  Set<Edge> edges=graph.getEdges();  for (  Edge edge : edges) {    graph.removeEdge(edge);    graph.addEdge(Edges.undirectedEdge(edge.getNode1(),edge.getNode2()));  }  SearchGraphUtils.pcOrientbk(knowledge,graph,graph.getNodes());  orientUnshieldedTriples(knowledge,getIndependenceTest(),depth);  MeekRules meekRules=new MeekRules();  meekRules.setKnowledge(knowledge);  meekRules.orientImplied(graph);  TetradLogger.getInstance().log("graph","\nReturning this graph: " + graph);  long endTime=System.currentTimeMillis();  this.elapsedTime=endTime - startTime;  TetradLogger.getInstance().log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  TetradLogger.getInstance().log("info","Finishing CPC algorithm.");  logTriples();  TetradLogger.getInstance().flush();}  }
class C{  protected void processLocally(final DM dm){  this.svc=DLockService.getInternalServiceNamed(this.serviceName);  basicProcess(dm,true);}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  @Override public void buildClassifier(Instances instances) throws Exception {  getCapabilities().testWithFail(instances);  instances=new Instances(instances);  instances.deleteWithMissingClass();  instances=normalizeDataSet(instances);  m_Instances=new Instances(instances);  m_NumInstances=m_Instances.numInstances();  m_NumClasses=instances.numClasses();  if (m_bUseADTree) {    m_ADTree=ADNode.makeADTree(instances);  }  initStructure();  buildStructure();  estimateCPTs();  m_Instances=new Instances(m_Instances,0);  m_ADTree=null;}  }
class C{  @SuppressWarnings("static-access") public static void createOutdirOption(Options options){  Option optOutputDir=OptionBuilder.withArgName("output directory").withDescription("Directory where the generated files will be stored").hasArg().withValueSeparator(' ').create(OUTDIR);  options.addOption(optOutputDir);}  }
class C{  private void incrementTransactionID(){  if (isCheckingValidity()) {    if (transactionID >= Modbus.MAX_TRANSACTION_ID) {      transactionID=1;    } else {      transactionID++;    }  }  request.setTransactionID(getTransactionID());}  }
class C{  public XYBoxAnnotation(double x0,double y0,double x1,double y1,Stroke stroke,Paint outlinePaint,Paint fillPaint){  super();  this.x0=x0;  this.y0=y0;  this.x1=x1;  this.y1=y1;  this.stroke=stroke;  this.outlinePaint=outlinePaint;  this.fillPaint=fillPaint;}  }
class C{  @Override public WritableFontData slice(int offset){  if (offset < 0 || offset > this.size()) {    throw new IndexOutOfBoundsException("Attempt to bind data outside of its limits.");  }  WritableFontData slice=new WritableFontData(this,offset);  return slice;}  }
class C{  private void sendStageProgressPatch(TaskState state){  ServiceUtils.logInfo(this,"Sending self-patch to stage %s",state.stage,state.subStage);  TaskUtils.sendSelfPatch(this,buildPatch(state.stage,state.subStage));}  }
class C{  public BloomFilter(NetworkParameters params,byte[] payloadBytes) throws ProtocolException {  super(params,payloadBytes,0);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"push");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not a push instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final IOperandTree operand=instruction.getOperands().get(0);  final TranslationResult result=Helpers.translateOperand(environment,offset,operand,true);  instructions.addAll(result.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize resultSize=(result.getSize() == OperandSize.BYTE) ? OperandSize.DWORD : result.getSize();  final String loadedValue=result.getRegister();  final String tempRegister;  if (result.getInstructions().isEmpty() && loadedValue.equalsIgnoreCase("esp")) {    tempRegister=environment.getNextVariableString();    instructions.add(ReilHelpers.createStr(offset++,resultSize,loadedValue,resultSize,tempRegister));  } else {    tempRegister=loadedValue;  }  Helpers.generatePush(environment,offset,tempRegister,resultSize,instructions);}  }
class C{  public boolean hasConnection(IOFConnectionBackend connection){  if (this.mainConnection.equals(connection) || this.auxConnections.get(connection.getAuxId()) == connection) {    return true;  } else {    return false;  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.CONDITIONAL_EXPRESSION__EXPRESSION:    setExpression((Expression)newValue);  return;case N4JSPackage.CONDITIONAL_EXPRESSION__TRUE_EXPRESSION:setTrueExpression((Expression)newValue);return;case N4JSPackage.CONDITIONAL_EXPRESSION__FALSE_EXPRESSION:setFalseExpression((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public SQLTransactionRollbackException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public static SuperInterfacesIterable of(TClassifier classifier){  return new SuperInterfacesIterable(classifier);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.PERIOD_TYPE,this);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public final int read() throws IOException {  return Util.readSingleByte(this);}  }
class C{  public double popDouble(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Double value=(Double)wrapper.getValue();  return value.doubleValue();}  }
class C{  private void populateLinkDetailsGroup(final Group linkDetailsGroup){  linkDetailsGroupStack=new StackLayout();  linkDetailsGroup.setLayout(linkDetailsGroupStack);  LinkControlProvider provider;  Composite providerComposite;  provider=linkUiRegistry.getLinkControlProvider(RegisteredLinkTypeNames.WORKITEM);  providerComposite=createLinkControlProviderComposite(linkDetailsGroup);  provider.initialize(providerComposite);  mapLinkDetailsComposites.put(RegisteredLinkTypeNames.WORKITEM,providerComposite);  provider=linkUiRegistry.getLinkControlProvider(RegisteredLinkTypeNames.HYPERLINK);  providerComposite=createLinkControlProviderComposite(linkDetailsGroup);  provider.initialize(providerComposite);  mapLinkDetailsComposites.put(RegisteredLinkTypeNames.HYPERLINK,providerComposite);  provider=linkUiRegistry.getLinkControlProvider(RegisteredLinkTypeNames.CHANGESET);  providerComposite=createLinkControlProviderComposite(linkDetailsGroup);  provider.initialize(providerComposite);  mapLinkDetailsComposites.put(RegisteredLinkTypeNames.CHANGESET,providerComposite);  provider=linkUiRegistry.getLinkControlProvider(RegisteredLinkTypeNames.VERSIONED_ITEM);  providerComposite=createLinkControlProviderComposite(linkDetailsGroup);  provider.initialize(providerComposite);  mapLinkDetailsComposites.put(RegisteredLinkTypeNames.VERSIONED_ITEM,providerComposite);  provider=linkUiRegistry.getLinkControlProvider(RegisteredLinkTypeNames.STORYBOARD);  providerComposite=createLinkControlProviderComposite(linkDetailsGroup);  provider.initialize(providerComposite);  mapLinkDetailsComposites.put(RegisteredLinkTypeNames.STORYBOARD,providerComposite);  for (final Iterator<String> i=mapDisplayNameToRegisteredName.values().iterator(); i.hasNext(); ) {    final String registeredName=i.next();    if (!registeredName.equals(RegisteredLinkTypeNames.WORKITEM) && !registeredName.equals(RegisteredLinkTypeNames.HYPERLINK) && !registeredName.equals(RegisteredLinkTypeNames.CHANGESET)&& !registeredName.equals(RegisteredLinkTypeNames.VERSIONED_ITEM)) {      provider=linkUiRegistry.getLinkControlProvider(registeredName);      providerComposite=createLinkControlProviderComposite(linkDetailsGroup);      provider.initialize(providerComposite);      mapLinkDetailsComposites.put(registeredName,providerComposite);    }  }  linkDetailsGroupStack.topControl=getSelectedComposite();}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  @Override public boolean equals(Object object){  if (object == null) {    return false;  }  if (object == this) {    return true;  }  if (super.equals(object) && object instanceof MiddlePinNeedle) {    return true;  }  return false;}  }
class C{  @Override public void endWindow(){  if (!result.isEmpty()) {    out.emit(result);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.269 -0500",hash_original_method="B0F3668F9CFF50FB0E1B8840DEF22F88",hash_generated_method="A37C9DEE94735CBF30339456FDC1F2B0") public int xover(String selectedArticles) throws IOException {  return sendCommand(NNTPCommand.XOVER,selectedArticles);}  }
class C{  protected boolean canDeactivate(){  if (!this.activated) {    return false;  }  return true;}  }
class C{  public static WrapperQueryBuilder wrapperQuery(BytesReference source){  return new WrapperQueryBuilder(source);}  }
class C{  public boolean checkValidDest(NamedBean sourceBean,NamedBean destBean,int pathMethod) throws jmri.JmriException {  if (log.isDebugEnabled()) {    log.debug("check valid des with source/dest bean {} {}",sourceBean.getDisplayName(),destBean.getDisplayName());  }  LayoutBlock facingBlock=null;  LayoutBlock protectingBlock=null;  LayoutBlock destFacingBlock=null;  List<LayoutBlock> destProtectBlock=null;  ArrayList<LayoutEditor> layout=jmri.jmrit.display.PanelMenu.instance().getLayoutEditorPanelList();  LayoutBlockManager lbm=InstanceManager.getDefault(LayoutBlockManager.class);  for (int i=0; i < layout.size(); i++) {    if (log.isDebugEnabled()) {      log.debug("Layout name {}",layout.get(i).getLayoutName());    }    if (facingBlock == null) {      facingBlock=lbm.getFacingBlockByNamedBean(sourceBean,layout.get(i));    }    if (protectingBlock == null) {      protectingBlock=lbm.getProtectedBlockByNamedBean(sourceBean,layout.get(i));    }    if (destFacingBlock == null) {      destFacingBlock=lbm.getFacingBlockByNamedBean(destBean,layout.get(i));    }    if (destProtectBlock == null) {      destProtectBlock=lbm.getProtectingBlocksByNamedBean(destBean,layout.get(i));    }    if ((destFacingBlock != null) && (facingBlock != null) && (protectingBlock != null)) {      try {        return checkValidDest(facingBlock,protectingBlock,destFacingBlock,destProtectBlock,pathMethod);      } catch (      jmri.JmriException e) {        throw e;      }    } else {      log.debug("blocks not found");    }  }  if (log.isDebugEnabled()) {    log.debug("No valid route from {} to {}",sourceBean.getDisplayName(),destBean.getDisplayName());  }  throw new jmri.JmriException("Blocks Not Found");}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof Clock && getClock() == someObj) {    setClock(null);  }}  }
class C{  public int execAPICall(String pk,String host,int port,final String username,final String pass){  ArrayList<String> pks=new ArrayList<String>();  pks.add(pk);  Map<String,Integer> m=execAPICalls(host,port,pks,username,pass);  if (m.isEmpty())   return -1;  return m.values().iterator().next().intValue();}  }
class C{  public void addNodes(List<? extends Node> ts){  for (  Node t : ts) {    addNode(t);  }}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public StellarShell(String[] args) throws Exception {  Options options=new Options();  options.addOption("z","zookeeper",true,"Zookeeper URL");  options.addOption("v","variables",true,"File containing a JSON Map of variables");  options.addOption("irc","inputrc",true,"File containing the inputrc if not the default ~/.inputrc");  options.addOption("na","no_ansi",false,"Make the input prompt not use ANSI colors.");  options.addOption("h","help",false,"Print help");  CommandLineParser parser=new PosixParser();  CommandLine commandLine=parser.parse(options,args);  if (commandLine.hasOption("h")) {    HelpFormatter formatter=new HelpFormatter();    formatter.printHelp("stellar",options);    System.exit(0);  }  boolean useAnsi=!commandLine.hasOption("na");  SettingsBuilder settings=new SettingsBuilder().enableAlias(true).enableMan(true).ansi(useAnsi).parseOperators(false).inputStream(PausableInput.INSTANCE);  if (commandLine.hasOption("irc")) {    settings=settings.inputrc(new File(commandLine.getOptionValue("irc")));  }  console=new Console(settings.create());  if (commandLine.hasOption("z")) {    String zookeeperUrl=commandLine.getOptionValue("z");    executor=new StellarExecutor(zookeeperUrl,console);  } else {    executor=new StellarExecutor(console);  }  if (commandLine.hasOption("v")) {    Map<String,Object> variables=JSONUtils.INSTANCE.load(new File(commandLine.getOptionValue("v")),new TypeReference<Map<String,Object>>(){    });    for (    Map.Entry<String,Object> kv : variables.entrySet()) {      executor.assign(kv.getKey(),null,kv.getValue());    }  }  console.setPrompt(new Prompt(EXPRESSION_PROMPT));  console.addCompletion(this);  console.setConsoleCallback(this);}  }
class C{  @Deprecated public void isBusinessUserAsync(final OnClientCallback<Boolean> callback){  AsyncReflector.execute(this,callback,"isBusinessUser");}  }
class C{  public NamedList<?> export(Expression[] expressionArr){  NamedList<Object> base=new NamedList<>();  for (int count=0; count < expressionArr.length; count++) {    if (!hiddenExpressions.contains(expressionNames[count])) {      base.add(expressionNames[count],expressionArr[count].getValue());    }  }  return base;}  }
class C{  public void addSafeMethod(SootMethod sm){  all_sys_methods.addMethod(sm);  safe_methods.addMethod(sm);  api_modeled_methods.addMethod(sm);}  }
class C{  @Override public synchronized void updateString(String columnName,String x) throws SQLException {  updateString(findColumn(columnName),x);}  }
class C{  public Object read(InputNode node) throws Exception {  if (node.isElement()) {    return readElement(node);  }  return read(node,expect);}  }
class C{  public HTMLFrameHyperlinkEvent(Object source,EventType type,URL targetURL,Element sourceElement,String targetFrame){  super(source,type,targetURL,null,sourceElement);  this.targetFrame=targetFrame;}  }
class C{  private IOException syntaxError(String message) throws IOException {  throw new MalformedJsonException(message + " at line " + getLineNumber()+ " column "+ getColumnNumber());}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if (mShader == null)   return;  float radius=mCenterX <= mCenterY ? mCenterX - 75.0f : mCenterY - 75.0f;  canvas.rotate(mRotateDegrees,mCenterX,mCenterY);  canvas.drawCircle(mCenterX,mCenterY,radius,mPaintCover);  canvas.rotate(-mRotateDegrees,mCenterX,mCenterY);  canvas.drawCircle(mCenterX,mCenterY,mButtonRadius,mPaintButton);  if (mProgressVisibility) {    canvas.drawArc(rectF,145,250,false,mPaintProgressEmpty);    canvas.drawArc(rectF,145,calculatePastProgressDegree(),false,mPaintProgressLoaded);    String leftTime=secondsToTime(calculateLeftSeconds());    mPaintTime.getTextBounds(leftTime,0,leftTime.length(),mRectText);    canvas.drawText(leftTime,(float)(mCenterX * Math.cos(Math.toRadians(35.0))) + mWidth / 2.0f - mRectText.width() / 1.5f,(float)(mCenterX * Math.sin(Math.toRadians(35.0))) + mHeight / 2.0f + mRectText.height() + 15.0f,mPaintTime);    String passedTime=secondsToTime(calculatePassedSeconds());    mPaintTime.getTextBounds(passedTime,0,passedTime.length(),mRectText);    canvas.drawText(passedTime,(float)(mCenterX * -Math.cos(Math.toRadians(35.0))) + mWidth / 2.0f - mRectText.width() / 3.0f,(float)(mCenterX * Math.sin(Math.toRadians(35.0))) + mHeight / 2.0f + mRectText.height() + 15.0f,mPaintTime);  }  if (mFirstDraw) {    toggle();    mFirstDraw=false;  }  mPlayPauseDrawable.draw(canvas);}  }
class C{  public VerticalLayout(int gap){  myGap=gap;  myAlignment=-1;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public WriteBuffer putFloat(float x){  ensureCapacity(4).putFloat(x);  return this;}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  int p0=getStartOffset();  int p1=getEndOffset();  if ((pos >= p0) && (pos <= p1)) {    Rectangle r=a.getBounds();    if (pos == p1) {      r.x+=r.width;    }    r.width=0;    return r;  }  return null;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case STORE_NAME:    return isSetStoreName();case SCOPE:  return isSetScope();case PERSIST:return isSetPersist();}throw new IllegalStateException();}  }
class C{  public boolean hasTacticalGenius(IPlayer player){  for (  Entity entity : entities) {    if (entity.getCrew().getOptions().booleanOption("tactical_genius") && entity.getOwner().equals(player) && !entity.isDestroyed()&& entity.isDeployed()&& !entity.isCarcass()&& !entity.getCrew().isUnconscious()) {      return true;    }  }  return false;}  }
class C{  public TextEditor(){  this(false);}  }
class C{  public void renderBeginningBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {  StringWriter sr=new StringWriter();  sr.append("<@formatBoundaryComment ");  sr.append(" boundaryType=\"");  sr.append("Begin");  sr.append("\" widgetType=\"");  sr.append(widgetType);  sr.append("\" widgetName=\"");  sr.append(modelWidget.getBoundaryCommentName());  sr.append("\" />");  executeMacro(sr.toString());}  }
class C{  private int size(SegmentTreeNode<?> n){  if (n == null) {    return 0;  }  return 1 + size(n.lson) + size(n.rson);}  }
class C{  public int next() throws IOException {  while (bucketBuffer != null) {    while (++slotNo < bucketSize) {      if (bucketBuffer.getInt(ITEM_SIZE * slotNo) == queryHash) {        return bucketBuffer.getInt(ITEM_SIZE * slotNo + 4);      }    }    int overflowID=bucketBuffer.getInt(ITEM_SIZE * bucketSize);    if (overflowID == 0) {      bucketBuffer=null;      break;    } else {      bucketBuffer.clear();      long bucketOffset=getOverflowBucketOffset(overflowID);      nioFile.read(bucketBuffer,bucketOffset);      slotNo=-1;    }  }  return -1;}  }
class C{  public static int writePoint(byte[] b,int off,ESRIPoint point){  int nBytes=writeLEDouble(b,off,point.x);  nBytes+=writeLEDouble(b,off + nBytes,point.y);  return nBytes;}  }
class C{  final Segment<K,V> segmentFor(int hash){  return (Segment<K,V>)segments[(hash >>> segmentShift) & segmentMask];}  }
class C{  @Override public Cursor runQueryOnBackgroundThread(CharSequence constraint){  if (DBG)   Log.d(LOG_TAG,"runQueryOnBackgroundThread(" + constraint + ")");  String query=(constraint == null) ? "" : constraint.toString();  Cursor cursor=null;  if (mSearchView.getVisibility() != View.VISIBLE || mSearchView.getWindowVisibility() != View.VISIBLE) {    return null;  }  try {    cursor=getSuggestions(query,QUERY_LIMIT);    if (cursor != null) {      cursor.getCount();      return cursor;    }  } catch (  RuntimeException e) {    Log.w(LOG_TAG,"Search suggestions query threw an exception.",e);  }  return null;}  }
class C{  public static <V>List<V> invertList(List<V> sourceList){  if (isEmpty(sourceList)) {    return sourceList;  }  List<V> invertList=new ArrayList<V>(sourceList.size());  for (int i=sourceList.size() - 1; i >= 0; i--) {    invertList.add(sourceList.get(i));  }  return invertList;}  }
class C{  protected void appendSummary(final StringBuffer buffer,final String fieldName,final int[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public static String createTypeSignature(char[] typeName,boolean isResolved){  return new String(createCharArrayTypeSignature(typeName,isResolved));}  }
class C{  @Override public void beginProcessSubTokens(){  skey="";  sval="";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:57.466 -0500",hash_original_method="98F3193EB5FEEA682D1EF037C6D0CBF1",hash_generated_method="0094AF36B5E659EC475EF5D18369F294") public BasicConstraints(byte[] encoding) throws IOException {  super(encoding);  Object[] values=(Object[])ASN1.decode(encoding);  ca=(Boolean)values[0];  if (values[1] != null) {    pathLenConstraint=new BigInteger((byte[])values[1]).intValue();  }}  }
class C{  public boolean isEnableSignature(){  return enableSignature;}  }
class C{  public static void register(){  CommandCenter.register("reorder",new ReorderAction());}  }
class C{  @JsonCreator public ClockEntry(@JsonProperty("nodeId") short nodeId,@JsonProperty("version") long version){  if (nodeId < 0)   throw new IllegalArgumentException("Node id " + nodeId + " is not in the range (0, "+ Short.MAX_VALUE+ ").");  if (version < 1)   throw new IllegalArgumentException("Version " + version + " is not in the range (1, "+ Short.MAX_VALUE+ ").");  this.nodeId=nodeId;  this.version=version;}  }
class C{  public ExtensionFileFilter(String[] extensions,String description){  m_Extension=extensions;  m_Description=description;}  }
class C{  @Override protected void reset(){  closeFile();  super.reset();}  }
class C{  public HttpMediaType removeParameter(String name){  cachedBuildResult=null;  parameters.remove(name.toLowerCase());  return this;}  }
class C{  public static MinProjectionExpression min(String propertyName){  return new MinProjectionExpression(getPropExpr(propertyName),false);}  }
class C{  public TObjectFloatHashMapDecorator(TObjectFloatHashMap<V> map){  super();  this._map=map;}  }
class C{  public Automation newAutomation(String name){  Automation automation=getAutomationByName(name);  if (automation == null) {    _id++;    automation=new Automation(Integer.toString(_id),name);    Integer oldSize=Integer.valueOf(_automationHashTable.size());    _automationHashTable.put(automation.getId(),automation);    setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_automationHashTable.size()));  }  return automation;}  }
class C{  public static ResponseData parse(String responseData){  int index=responseData.indexOf(':');  String mainData, extraData;  if (-1 == index) {    mainData=responseData;    extraData="";  } else {    mainData=responseData.substring(0,index);    extraData=index >= responseData.length() ? "" : responseData.substring(index + 1);  }  String[] fields=TextUtils.split(mainData,Pattern.quote("|"));  if (fields.length < 6) {    throw new IllegalArgumentException("Wrong number of fields.");  }  ResponseData data=new ResponseData();  data.extra=extraData;  data.responseCode=Integer.parseInt(fields[0]);  data.nonce=Integer.parseInt(fields[1]);  data.packageName=fields[2];  data.versionCode=fields[3];  data.userId=fields[4];  data.timestamp=Long.parseLong(fields[5]);  return data;}  }
class C{  public LIMIT LIMIT(String limit){  return new LIMIT(this,limit);}  }
class C{  public int size(){  return num;}  }
class C{  @Ignore("TODO: reenable this test") @Test public void testConcurrentEventsOnNonReplicatedRegion(){}  }
class C{  public static void ensureOSXCompatible(){  File nnnAAAAA=new File(DCIM,"100ANDRO");  if (!(nnnAAAAA.exists() || nnnAAAAA.mkdirs())) {    Log.e(TAG,"Failed to create " + nnnAAAAA.getPath());  }}  }
class C{  public synchronized int add(int index,String uri){  int i=getIndex(uri);  if (i >= 0)   return i;  if (index < 0)   index=nextIndex(); else   if (getUri(index) != null)   throw new IllegalArgumentException("namespaceTable already has namespaceIndex " + index);  indexUriMap.map(index,uri);  return index;}  }
class C{  public boolean isAfterLast() throws SQLException {  checkState();  return rs.isAfterLast();}  }
class C{  @Override public int interpretReturnCode(final int returnCode){  return returnCode == 1 ? 0 : returnCode;}  }
class C{  private void drawTriangle(Canvas canvas,Paint paint,float[] path,float x,float y){  path[0]=x;  path[1]=y - size - size / 2;  path[2]=x - size;  path[3]=y + size;  path[4]=x + size;  path[5]=path[3];  drawPath(canvas,path,paint,true);}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public ByteSendPacket send(byte[] bytes,SendListener listener){  ByteSendPacket entity=new ByteSendPacket(bytes,listener);  send(entity);  return entity;}  }
class C{  public boolean intersects(Envelope other){  if (isNull() || other.isNull()) {    return false;  }  return !(other.minx > maxx || other.maxx < minx || other.miny > maxy || other.maxy < miny);}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  @LargeTest public void testWifiDownloadWithDownloadManager() throws Exception {  mConnectionUtil.wifiTestInit();  assertTrue(setDeviceWifiAndAirplaneMode(mSsid));  downloadFileUsingDownloadManager();}  }
class C{  private ElementCreatorImpl addElement(ElementKey<?,?> childKey,Action action){synchronized (registry) {    QName id=childKey.getId();    Preconditions.checkNotNull(id);    if (action == Action.ADD) {      elements.remove(id);    }    elements.put(id,new ElementInfo(childKey,action));    return (ElementCreatorImpl)registry.build(elementKey,childKey,transformKey.getContext());  }}  }
class C{  final boolean unlink(Index<K,V> succ){  return !indexesDeletedNode() && casRight(succ,succ.right);}  }
class C{  public static Object transform(JsonNode node){  if (node instanceof NullNode) {    return null;  }  if (node instanceof MissingNode) {    return null;  }  if (node instanceof IntNode) {    return ((IntNode)node).intValue();  }  if (node instanceof BigIntegerNode) {    return ((BigIntegerNode)node).bigIntegerValue();  }  if (node instanceof BinaryNode) {    return ((BinaryNode)node).binaryValue();  }  if (node instanceof BooleanNode) {    return ((BooleanNode)node).booleanValue();  }  if (node instanceof DecimalNode) {    return ((DecimalNode)node).decimalValue();  }  if (node instanceof DoubleNode) {    return ((DoubleNode)node).doubleValue();  }  if (node instanceof LongNode) {    return ((LongNode)node).longValue();  }  if (node instanceof NumericNode) {    return ((NumericNode)node).numberValue();  }  if (node instanceof POJONode) {    return ((POJONode)node).getPojo();  }  if (node instanceof TextNode) {    return ((TextNode)node).textValue();  }  if (node instanceof ArrayNode) {    List<Object> resultList=new ArrayList<>();    for (    JsonNode subnode : node) {      Object result=transform(subnode);      if (result != null) {        resultList.add(result);      }    }    return resultList;  }  if (node instanceof ObjectNode) {    Map<String,Object> resultMap=new HashMap<String,Object>();    Iterator<Map.Entry<String,JsonNode>> iterator=node.fields();    while (iterator.hasNext()) {      Map.Entry<String,JsonNode> subnodeEntry=iterator.next();      Object result=transform(subnodeEntry.getValue());      if (result != null) {        resultMap.put(subnodeEntry.getKey(),result);      }    }    return resultMap;  }  return null;}  }
class C{  public Serializable serializeState(){  HashMap state=new HashMap();  for (Iterator it=this.attributes.entrySet().iterator(); it.hasNext(); ) {    Map.Entry entry=(Map.Entry)it.next();    String name=(String)entry.getKey();    Object value=entry.getValue();    it.remove();    if (value instanceof Serializable) {      state.put(name,value);    } else {      if (value instanceof HttpSessionBindingListener) {        ((HttpSessionBindingListener)value).valueUnbound(new HttpSessionBindingEvent(this,name,value));      }    }  }  return state;}  }
class C{  public static int power(int base,int power){  int result=1;  int absPower=Math.abs(power);  for (int p=0; p < absPower; p++) {    result*=base;  }  if (power < 0) {    result=1 / result;  }  return result;}  }
class C{  protected int computeScrollYDeltaToGetChildRectOnScreen(Rect rect){  if (getChildCount() == 0)   return 0;  int height=getHeight();  int screenTop=getScrollY();  int screenBottom=screenTop + height;  int fadingEdge=getVerticalFadingEdgeLength();  if (rect.top > 0) {    screenTop+=fadingEdge;  }  if (rect.bottom < getChildAt(0).getHeight()) {    screenBottom-=fadingEdge;  }  int scrollYDelta=0;  if (rect.bottom > screenBottom && rect.top > screenTop) {    if (rect.height() > height) {      scrollYDelta+=(rect.top - screenTop);    } else {      scrollYDelta+=(rect.bottom - screenBottom);    }    int bottom=getChildAt(0).getBottom();    int distanceToBottom=bottom - screenBottom;    scrollYDelta=Math.min(scrollYDelta,distanceToBottom);  } else   if (rect.top < screenTop && rect.bottom < screenBottom) {    if (rect.height() > height) {      scrollYDelta-=(screenBottom - rect.bottom);    } else {      scrollYDelta-=(screenTop - rect.top);    }    scrollYDelta=Math.max(scrollYDelta,-getScrollY());  }  return scrollYDelta;}  }
class C{  public DeterministicKey markKeyAsUsed(DeterministicKey k){  int numChildren=k.getChildNumber().i() + 1;  if (k.getParent() == internalParentKey) {    if (issuedInternalKeys < numChildren) {      issuedInternalKeys=numChildren;      maybeLookAhead();    }  } else   if (k.getParent() == externalParentKey) {    if (issuedExternalKeys < numChildren) {      issuedExternalKeys=numChildren;      maybeLookAhead();    }  }  return k;}  }
class C{  public static boolean isXml11RestrictedCharacter(char ch){  return (((ch >= 0x1) && (ch <= 0x8)) || ((ch >= 0xB) && (ch <= 0xC)) || ((ch >= 0xE) && (ch <= 0x1F))|| ((ch >= 0x7F) && (ch <= 0x84))|| ((ch >= 0x86) && (ch <= 0x9F)));}  }
class C{  @SuppressLint("Override") public static String formatNumber(String phoneNumber,String phoneNumberE164,String defaultCountryIso){  int len=phoneNumber.length();  for (int i=0; i < len; i++) {    if (!isDialable(phoneNumber.charAt(i))) {      return phoneNumber;    }  }  PhoneNumberUtil util=PhoneNumberUtil.getInstance();  if (phoneNumberE164 != null && phoneNumberE164.length() >= 2 && phoneNumberE164.charAt(0) == '+') {    try {      Phonenumber.PhoneNumber pn=util.parse(phoneNumberE164,"ZZ");      String regionCode=util.getRegionCodeForNumber(pn);      if (!TextUtils.isEmpty(regionCode) && normalizeNumber(phoneNumber).indexOf(phoneNumberE164.substring(1)) <= 0) {        defaultCountryIso=regionCode;      }    } catch (    NumberParseException e) {    }  }  String result=formatNumber(phoneNumber,defaultCountryIso);  return result != null ? result : phoneNumber;}  }
class C{  public boolean readToken(final URI targetUri,final AtomicReference<Token> token){  BaseSecureStore.validateTargetUri(targetUri);  Trace.writeLine("SecretCache::readToken");  final String targetName=this.getTargetName(targetUri);synchronized (_cache) {    if (_cache.containsKey(targetName) && _cache.get(targetName) instanceof Token) {      token.set((Token)_cache.get(targetName));    } else {      token.set(null);    }  }  return token.get() != null;}  }
class C{  protected void deleteInternalFile(String idRepEcm,String idFich){  try {    ServiceClient serviceClient=getServiceClient();    Properties params=null;    if ((serviceClient != null) && (StringUtils.isNotEmpty(serviceClient.getEntity()))) {      params=new Properties();      params.put(MultiEntityConstants.ENTITY_PARAM,serviceClient.getEntity());    }    IGestorFicheros gestorFicherosInvesdoc=GestorFicherosFactory.getConnector(idRepEcm,params);    gestorFicherosInvesdoc.deleteFile(idFich);  } catch (  IeciTdException e) {    if (!DbError.EC_NOT_FOUND.equals(e.getErrorCode())) {      logger.warn("Error al eliminar el fichero con id " + idFich,e);      throw new FileException("Error al eliminar el fichero",e);    }  }catch (  Exception e) {    logger.warn("Error al eliminar el fichero con id " + idFich,e);    throw new FileException("Error al eliminar el fichero",e);  }}  }
class C{  @SuppressWarnings("UnusedParameters") public final Map<String,String> extractTextAsTable(int x1,int y1,int x2,int y2,final int pageNumber,final boolean isCSV,final boolean keepFontInfo,final boolean keepWidthInfo,final boolean keepAlignmentInfo,final int borderWidth) throws PdfException {  final int[] v=validateCoordinates(x1,y1,x2,y2);  x1=v[0];  y1=v[1];  x2=v[2];  y2=v[3];  final Map<String,String> table_content=new HashMap<String,String>();  LogWriter.writeLog("extracting Text As Table");  isXHTML=!isCSV;  lines=new Vector_Object(20);  lineY2=new Vector_Int(20);  max_rows=0;  copyToArrays(x1,y2,x2,y1,keepFontInfo,false,true,null,false);  removeEncoding();  cleanupShadowsAndDrownedObjects(false);  final int[] items=this.getsortedUnusedFragments(true,false);  final int item_count=items.length;  if (item_count == 0) {    return table_content;  }  final int writingMode=getWritingMode(items,item_count);  final String message="Table Merging algorithm being applied " + (item_count) + " items";  LogWriter.writeLog(message);  if (item_count > 1) {    createLinesInTable(item_count,items,isXHTML,writingMode);    int dx=1;    if (writingMode == PdfData.HORIZONTAL_LEFT_TO_RIGHT || writingMode == PdfData.VERTICAL_TOP_TO_BOTTOM) {      dx=-1;    }    line_order=new int[max_rows];    final int[] line_y=new int[max_rows];    for (int i=0; i < max_rows; i++) {      line_y[i]=dx * lineY2.elementAt(i);      line_order[i]=i;    }    line_order=Sorts.quicksort(line_y,line_order);    createTableRows(keepAlignmentInfo,keepWidthInfo,writingMode);    mergeTableRows(borderWidth);  }  content[master]=cleanup(content[master]);  String processed_value=content[master].toString();  if (processed_value != null) {    if (!isCSV) {      processed_value=Fonts.cleanupTokens(processed_value);    }    table_content.put("content",processed_value);    table_content.put("x1",String.valueOf(x1));    table_content.put("x2",String.valueOf(x2));    table_content.put("y1",String.valueOf(y1));    table_content.put("y2",String.valueOf(y2));  }  return table_content;}  }
class C{  private static void logNodeProperties(org.osgi.service.prefs.Preferences node){  if (node == null) {    return;  }  try {    LOG.info(node.name() + " properties: ");    logProperties(node);    String[] childrenNames=node.childrenNames();    for (int i=0; i < childrenNames.length; i++) {      logNodeProperties(node.node(childrenNames[i]));    }  } catch (  Exception t) {    LOG.error("Error while logging preferences.",t);  }}  }
class C{  public static NodeTask toNodeTask(ByteBuffer bb){  NodeTask nt=null;  if (byteBufferNotEmpty(bb)) {    nt=new NodeTask(getServiceResourceProfile(bb),getConstraint(bb));    nt.setHostname(toString(bb));    nt.setSlaveId(toSlaveId(bb));    nt.setTaskStatus(toTaskStatus(bb));    nt.setExecutorInfo(toExecutorInfo(bb));    nt.setTaskPrefix(toString(bb));  }  return nt;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return (node == null) ? Boolean.FALSE : Boolean.valueOf(node.isChecked());}  }
class C{  private DeterministicKey createMasterPubKeyFromPaymentCode(String payment_code_str) throws AddressFormatException {  byte[] paymentCodeBytes=Base58.decodeChecked(payment_code_str);  ByteBuffer bb=ByteBuffer.wrap(paymentCodeBytes);  if (bb.get() != 0x47) {    throw new AddressFormatException("invalid payment code version");  }  byte[] chain=new byte[32];  byte[] pub=new byte[33];  bb.get();  bb.get();  bb.get(pub);  bb.get(chain);  return HDKeyDerivation.createMasterPubKeyFromBytes(pub,chain);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  String value;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  value=domesticAttr.getNodeValue();  assertEquals("attrEffectiveValueAssert","Yes",value);}  }
class C{  public static String join(final Collection<?> strings,String delimeter){  if (delimeter == null) {    delimeter=",";  }  if (strings.isEmpty()) {    return "";  }  StringBuffer joined=new StringBuffer();  Iterator<?> stringIter=strings.iterator();  joined.append(stringIter.next().toString());  while (stringIter.hasNext()) {    joined.append(delimeter);    joined.append(stringIter.next().toString());  }  return joined.toString();}  }
class C{  public static List<LineageRecord> extractLineage(AzExecMessage message) throws Exception {  List<LineageRecord> oneAzkabanJobLineage=new ArrayList<>();  String flowSequence[]=message.azkabanJobExecution.getFlowPath().split(":")[1].split("/");  String jobPrefix="";  for (int i=1; i < flowSequence.length; i++) {    jobPrefix+=flowSequence[i] + ":";  }  String log=message.adc.getExecLog(message.azkabanJobExecution.getFlowExecId(),jobPrefix + message.azkabanJobExecution.getJobName());  Set<String> hadoopJobIds=AzLogParser.getHadoopJobIdFromLog(log);  for (  String hadoopJobId : hadoopJobIds) {    logger.debug("get hadoop job :{} from azkaban job : {}" + hadoopJobId,message.azkabanJobExecution.toString());    String confJson=message.hnne.getConfFromHadoop(hadoopJobId);    AzJsonAnalyzer ja=new AzJsonAnalyzer(confJson,message.azkabanJobExecution,Integer.valueOf(message.prop.getProperty(Constant.AZ_DEFAULT_HADOOP_DATABASE_ID_KEY)));    List<LineageRecord> oneHadoopJobLineage=ja.extractFromJson();    oneAzkabanJobLineage.addAll(oneHadoopJobLineage);  }  LineageCombiner lineageCombiner=new LineageCombiner(message.connection);  lineageCombiner.addAll(oneAzkabanJobLineage);  Integer defaultDatabaseId=Integer.valueOf(message.prop.getProperty(Constant.AZ_DEFAULT_HADOOP_DATABASE_ID_KEY));  List<LineageRecord> lineageFromLog=AzLogParser.getLineageFromLog(log,message.azkabanJobExecution,defaultDatabaseId);  lineageCombiner.addAll(lineageFromLog);  return lineageCombiner.getCombinedLineage();}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof AttributeHolder : "Assertion Error: Expected AttributeHolder to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[AttributeRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  AttributeBean ab=(AttributeBean)clazz.newInstance();  digester.push(ab);}  }
class C{  public boolean isConnectEMCConfigured(){  try {    String transport=coordinatorClientExt.getPropertyInfo().getProperties().get(PropertyInfoExt.CONNECTEMC_TRANSPORT);    if (transport == null || transport.isEmpty() || transport.equalsIgnoreCase(NONE)) {      _log.warn("ConnectEMC is not configured. {} property is set to {}",PropertyInfoExt.CONNECTEMC_TRANSPORT,transport);      return false;    }  } catch (  Exception e) {    throw APIException.internalServerErrors.getObjectFromError(PropertyInfoExt.CONNECTEMC_TRANSPORT,"local repository",e);  }  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void traverse(ASTVisitor visitor,CompilationUnitScope unitScope){  try {    if (visitor.visit(this,unitScope)) {      if (this.javadoc != null) {        this.javadoc.traverse(visitor,this.scope);      }      if (this.annotations != null) {        int annotationsLength=this.annotations.length;        for (int i=0; i < annotationsLength; i++)         this.annotations[i].traverse(visitor,this.staticInitializerScope);      }      if (this.superclass != null)       this.superclass.traverse(visitor,this.scope);      if (this.superInterfaces != null) {        int length=this.superInterfaces.length;        for (int i=0; i < length; i++)         this.superInterfaces[i].traverse(visitor,this.scope);      }      if (this.typeParameters != null) {        int length=this.typeParameters.length;        for (int i=0; i < length; i++) {          this.typeParameters[i].traverse(visitor,this.scope);        }      }      if (this.memberTypes != null) {        int length=this.memberTypes.length;        for (int i=0; i < length; i++)         this.memberTypes[i].traverse(visitor,this.scope);      }      if (this.fields != null) {        int length=this.fields.length;        for (int i=0; i < length; i++) {          FieldDeclaration field;          if ((field=this.fields[i]).isStatic()) {            field.traverse(visitor,this.staticInitializerScope);          } else {            field.traverse(visitor,this.initializerScope);          }        }      }      if (this.methods != null) {        int length=this.methods.length;        for (int i=0; i < length; i++)         this.methods[i].traverse(visitor,this.scope);      }    }    visitor.endVisit(this,unitScope);  } catch (  AbortType e) {  }}  }
class C{  public static void reverse(short[] array){  int len=array.length - 1;  int len2=array.length / 2;  for (int i=0; i < len2; i++) {    short tmp=array[i];    array[i]=array[len - i];    array[len - i]=tmp;  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public LaunchTool(){  super();}  }
class C{  public void fireSynapsesUpdated(Collection<Synapse> synapses){  for (int i=0, n=networkListeners.size(); i < n; i++) {    networkListeners.get(i).updateSynapses(synapses);  }}  }
class C{  public TicTacToeState(TicTacToeBoard board,Logic logic){  this.board=board;  this.logic=logic;  logic.initializeState(this);}  }
class C{  public Object nextElement(){  byte b;  b=bytes[curindex++];  if ((b & ((byte)0x80)) == 0) {    c=b;  } else   if ((b & ((byte)0xe0)) == 0xc0) {    c=((b & ((byte)0x1f))) << 6;    b=bytes[curindex++];    c|=(b & ((byte)0x3f));  } else {    c=((b & ((byte)0x0f))) << 12;    b=bytes[curindex++];    c|=((b & ((byte)0x3f))) << 6;    b=bytes[curindex++];    c|=(b & ((byte)0x3f));  }  return this;}  }
class C{  public void stopClat(){  if (mIsStarted) {    Slog.i(TAG,"Stopping clatd");    try {      mNMService.stopClatd();    } catch (    RemoteException e) {      Slog.e(TAG,"Error stopping clat daemon: " + e);    }    mIsStarted=false;    mIsRunning=false;    mTracker=null;    mLP.clear();  } else {    Slog.e(TAG,"stopClat: already stopped");  }}  }
class C{  public static void flushMutatorContext(){  Selected.Mutator.get().flush();}  }
class C{  public static int nextPow2Int(int x){  --x;  x|=x >>> 1;  x|=x >>> 2;  x|=x >>> 4;  x|=x >>> 8;  x|=x >>> 16;  return ++x;}  }
class C{  private void initializeLiveAttributes(){  x=createLiveAnimatedLength(null,SVG_X_ATTRIBUTE,SVG_SVG_X_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y=createLiveAnimatedLength(null,SVG_Y_ATTRIBUTE,SVG_SVG_Y_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  width=createLiveAnimatedLength(null,SVG_WIDTH_ATTRIBUTE,SVG_SVG_WIDTH_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,true);  height=createLiveAnimatedLength(null,SVG_HEIGHT_ATTRIBUTE,SVG_SVG_HEIGHT_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,true);  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);  preserveAspectRatio=createLiveAnimatedPreserveAspectRatio();  viewBox=createLiveAnimatedRect(null,SVG_VIEW_BOX_ATTRIBUTE,null);}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on (or its inverse)." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  boolean contains(int v1,int v2){  if (isTOP())   return true;  if (v1 == GlobalValueNumberState.UNKNOWN)   return false;  if (v2 == GlobalValueNumberState.UNKNOWN)   return false;  if (size == 0)   return false;  ValueNumberPair p=new ValueNumberPair(v1,v2);  for (int i=0; i < size; i++) {    if (numbers[i].equals(p)) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:58.832 -0500",hash_original_method="3285F5CD7518CBF681F7E4DAED1719BF",hash_generated_method="6622D8E9E7B498EBE1B33BBE19E6566A") public boolean isPrintingKey(int keyCode){  int type=Character.getType(nativeGetDisplayLabel(mPtr,keyCode));switch (type) {case Character.SPACE_SEPARATOR:case Character.LINE_SEPARATOR:case Character.PARAGRAPH_SEPARATOR:case Character.CONTROL:case Character.FORMAT:    return false;default :  return true;}}  }
class C{  public void addComponent(List coordList){  GeometryCombiner creator=new GeometryCombiner(JTSTestBuilder.getGeometryFactory());  Geometry newGeom=null;switch (getGeometryType()) {case GeometryType.POLYGON:    newGeom=creator.addPolygonRing(getGeometry(),getRing(coordList));  break;case GeometryType.LINESTRING:Coordinate[] pts=CoordinateArrays.toCoordinateArray(coordList);newGeom=creator.addLineString(getGeometry(),pts);break;case GeometryType.POINT:newGeom=creator.addPoint(getGeometry(),(Coordinate)coordList.get(0));break;}setGeometry(newGeom);}  }
class C{  public final void reuse(){  current_item=0;}  }
class C{  public void addPair(String var,String val){  map.put(var,ValueFactory.create(val));  cachedHash=0;}  }
class C{  public void doBuildIndexSegmentAndCompare(final BTree btree) throws Exception {  try {    if (btree.getEntryCount() > Integer.MAX_VALUE) {      throw new RuntimeException();    }    final int branchingFactors[]=new int[]{3,4,5,10,20,60,100,256,1024,4096,8192};    for (int i=0; i < branchingFactors.length; i++) {      int m=branchingFactors[i];      final File outFile=new File(getName() + "_m" + m+ ".seg");      final File outFile2=new File(getName() + "_m" + m+ "_bloom.seg");      if (outFile.exists() && !outFile.delete()) {        fail("Could not delete old index segment: " + outFile.getAbsoluteFile());      }      if (outFile2.exists() && !outFile2.delete()) {        fail("Could not delete old index segment: " + outFile2.getAbsoluteFile());      }      final File tmpDir=outFile.getAbsoluteFile().getParentFile();      final long commitTime=System.currentTimeMillis();{        if (log.isInfoEnabled())         log.info("Building index segment (w/o bloom): in(m=" + btree.getBranchingFactor() + ", nentries="+ btree.getEntryCount()+ "), out(m="+ m+ ")");        IndexMetadata metadata=btree.getIndexMetadata().clone();        metadata.setBloomFilterFactory(null);        IndexSegmentBuilder.newInstance(outFile,tmpDir,btree.getEntryCount(),btree.rangeIterator(),m,metadata,commitTime,true,bufferNodes).call();      }      final IndexSegmentBuilder builder2;{        if (log.isInfoEnabled())         log.info("Building index segment (w/ bloom): in(m=" + btree.getBranchingFactor() + ", nentries="+ btree.getEntryCount()+ "), out(m="+ m+ ")");        final IndexMetadata metadata=btree.getIndexMetadata().clone();        metadata.setBloomFilterFactory(new BloomFilterFactory(1,1 / 64d,1 / 32d));        builder2=IndexSegmentBuilder.newInstance(outFile2,tmpDir,btree.getEntryCount(),btree.rangeIterator(),m,metadata,commitTime,true,bufferNodes);        builder2.call();      }      if (log.isInfoEnabled())       log.info("Opening index segment w/o bloom filter.");      final IndexSegment seg=new IndexSegmentStore(outFile).loadIndexSegment();      if (log.isInfoEnabled())       log.info("Opening index segment w/ bloom filter.");      final IndexSegment seg2=new IndexSegmentStore(outFile2).loadIndexSegment();      final byte[][] keys=new byte[(int)btree.getEntryCount()][];      final byte[][] vals=new byte[(int)btree.getEntryCount()][];      getKeysAndValues(btree,keys,vals);      doBloomFilterTest("pre-serialization",builder2.bloomFilter,keys);      doBloomFilterTest("pre-serialization",seg2.getBloomFilter(),keys);      if (log.isInfoEnabled())       log.info("Verifying index segments.");      assertSameBTree(btree,seg);      assertSameBTree(btree,seg2);      seg2.close();      assertSameBTree(seg,seg2);      if (log.isInfoEnabled())       log.info("Closing index segments.");      seg.close();      seg2.close();      if (!outFile.delete()) {        log.warn("Could not delete index segment: " + outFile);      }      if (!outFile2.delete()) {        log.warn("Could not delete index segment: " + outFile2);      }    }  }  finally {    if (log.isInfoEnabled())     log.info("Closing journal.");    btree.getStore().destroy();  }}  }
class C{  @UiThread @Override public void onBindChildViewHolder(@NonNull HorizontalChildViewHolder childViewHolder,int parentPosition,int childPosition,@NonNull HorizontalChild horizontalChild){  childViewHolder.bind(horizontalChild.getChildText());}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (documentation: ");  result.append(documentation);  result.append(')');  return result.toString();}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x622F83CC,version=271) public int sceUsbCamSetSharpness(int sharpness){  this.sharpness=sharpness;  return 0;}  }
class C{  static boolean areSignaturesEqual(Class[] from,Class[] to){  if (from.length != to.length)   return false;  for (int i=0; i < from.length; i++)   if (from[i] != to[i])   return false;  return true;}  }
class C{  private static Implementation delegateWithDowncastOrThrow(DoFnSignature.DoFnMethod method){  return (method == null) ? ExceptionMethod.throwing(UnsupportedOperationException.class) : new DowncastingParametersMethodDelegation(method.targetMethod());}  }
class C{  @Override public SoftwarePIDController withGains(double p,double i,double d){  return withGains(p,i,d,0.0);}  }
class C{  public static boolean floatArrayEquals(float[] x,float[] y,float tol){  for (int i=0; i < x.length; i+=1) {    if (x[i] == 0) {      return y[i] == 0;    }    if (Math.abs((y[i] - x[i]) / x[i]) > tol) {      return false;    }  }  return true;}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  player.setLanguage(action.get("target"));}  }
class C{  protected String ensureTextColorFormat(String textColor){  String formatted="";  boolean mainColor=true;  for (  String style : textColor.split(" ")) {    if (mainColor) {      if (!style.endsWith("-text")) {        style+="-text";      }      mainColor=false;    } else {      if (!style.startsWith("text-")) {        style=" text-" + style;      }    }    formatted+=style;  }  return formatted;}  }
class C{  public List<Integer> emit(String streamId,List<Object> tuple){  return emit(streamId,(Collection<Tuple>)null,tuple);}  }
class C{  private void drawTexts(Canvas canvas,float textSize,Typeface typeface,String[] texts,float[] textGridWidths,float[] textGridHeights){  mPaint.setTextSize(textSize);  mPaint.setTypeface(typeface);  canvas.drawText(texts[0],textGridWidths[3],textGridHeights[0],mPaint);  canvas.drawText(texts[1],textGridWidths[4],textGridHeights[1],mPaint);  canvas.drawText(texts[2],textGridWidths[5],textGridHeights[2],mPaint);  canvas.drawText(texts[3],textGridWidths[6],textGridHeights[3],mPaint);  canvas.drawText(texts[4],textGridWidths[5],textGridHeights[4],mPaint);  canvas.drawText(texts[5],textGridWidths[4],textGridHeights[5],mPaint);  canvas.drawText(texts[6],textGridWidths[3],textGridHeights[6],mPaint);  canvas.drawText(texts[7],textGridWidths[2],textGridHeights[5],mPaint);  canvas.drawText(texts[8],textGridWidths[1],textGridHeights[4],mPaint);  canvas.drawText(texts[9],textGridWidths[0],textGridHeights[3],mPaint);  canvas.drawText(texts[10],textGridWidths[1],textGridHeights[2],mPaint);  canvas.drawText(texts[11],textGridWidths[2],textGridHeights[1],mPaint);}  }
class C{  @Benchmark public void nonCaching(){  run();}  }
class C{  private void rDetermineCandidates(ArrayList<StatementBlock> asb,HashSet<Candidate> C,Integer sCount) throws LanguageException {  for (  StatementBlock sb : asb)   for (  Statement s : sb._statements) {    sCount++;    if (s instanceof ForStatement) {      rDetermineCandidates(((ForStatement)s).getBody(),C,sCount);    } else     if (s instanceof WhileStatement) {      rDetermineCandidates(((WhileStatement)s).getBody(),C,sCount);    } else     if (s instanceof IfStatement) {      rDetermineCandidates(((IfStatement)s).getIfBody(),C,sCount);      rDetermineCandidates(((IfStatement)s).getElseBody(),C,sCount);    } else     if (s instanceof FunctionStatement) {      rDetermineCandidates(((FunctionStatement)s).getBody(),C,sCount);    } else     if (s instanceof PrintStatement && ((PrintStatement)s).getType() == PRINTTYPE.STOP) {      raiseValidateError("PARFOR loop dependency analysis: " + "stop() statement is not allowed inside a parfor loop body.",false);    } else {      VariableSet vsUpdated=s.variablesUpdated();      if (vsUpdated != null)       for (      String write : vsUpdated.getVariableNames()) {        if (_vsParent.containsVariable(write)) {          List<DataIdentifier> dats=getDataIdentifiers(s,true);          for (          DataIdentifier dat : dats) {            Candidate c=new Candidate();            c._var=write;            c._dat=dat;            C.add(c);          }          LOG.trace("PARFOR: dependency candidate: var '" + write + "'");        }      }    }  }}  }
class C{  public Quaternionf rotateZYX(float angleZ,float angleY,float angleX){  return rotateZYX(angleZ,angleY,angleX,this);}  }
class C{  public void paintTextPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  protected int codeOf(long element){  int index=java.util.Arrays.binarySearch(distinctValues,element);  if (index < 0)   throw new IllegalArgumentException("Element=" + element + " not contained in distinct elements.");  return index;}  }
class C{  @Override public int hashCode(){  int hash=super.hashCode();  hash=59 * hash + (this.comment != null ? this.comment.hashCode() : 0);  hash=59 * hash + this.maxAge;  hash=59 * hash + (this.secure ? 1 : 0);  hash=59 * hash + (this.httpOnly ? 1 : 0);  return hash;}  }
class C{  private void ensureCorrectMembersForHugeChild(final boolean py3K){  final Collection<PyPresenterTestMemberEntry> memberNamesAndStatus=launchAndGetMembers("HugeChild","SubParent1");  final Matcher<Iterable<? extends PyPresenterTestMemberEntry>> matcher=Matchers.containsInAnyOrder(new PyPresenterTestMemberEntry("extends date",true,false,false),new PyPresenterTestMemberEntry("CLASS_FIELD",true,true,false),new PyPresenterTestMemberEntry("__init__(self)",true,false,false),new PyPresenterTestMemberEntry("extends SubParent1",false,false,false),new PyPresenterTestMemberEntry("foo(self)",true,false,true),new PyPresenterTestMemberEntry("bar(self)",true,false,true),new PyPresenterTestMemberEntry("static_1(cls)",true,true,py3K),new PyPresenterTestMemberEntry("static_2()",true,true,py3K),new PyPresenterTestMemberEntry("self.instance_field_1",true,false,false),new PyPresenterTestMemberEntry("self.instance_field_2",true,false,false),new PyPresenterTestMemberEntry("bad_method()",true,false,true),new PyPresenterTestMemberEntry("name",true,false,false),new PyPresenterTestMemberEntry("some_property",true,false,false));  compareMembers(memberNamesAndStatus,matcher);}  }
class C{  public void endVisit(EnhancedForStatement node){}  }
class C{  public Matrix[] compute(Matrix loghyper,Matrix X,Matrix Xstar){  Matrix A=new Matrix(Xstar.getRowDimension(),1);  Matrix B=new Matrix(X.getRowDimension(),Xstar.getRowDimension());  for (int i=0; i < f.length; i++) {    Matrix loghyperi=loghyper.getMatrix(idx[i],idx[i + 1] - 1,0,0);    Matrix[] K=f[i].compute(loghyperi,X,Xstar);    A.plusEquals(K[0]);    B.plusEquals(K[1]);  }  return new Matrix[]{A,B};}  }
class C{  public String globalInfo(){  return "Class for wrapping a Clusterer to make it return a distribution " + "and density. Fits normal distributions and discrete distributions " + "within each cluster produced by the wrapped clusterer. Supports the "+ "NumberOfClustersRequestable interface only if the wrapped Clusterer "+ "does.";}  }
class C{  public GDE3(Problem problem,NondominatedSortingPopulation population,DominanceComparator comparator,DifferentialEvolutionSelection selection,DifferentialEvolution variation,Initialization initialization){  super(problem,population,null,initialization);  this.comparator=comparator;  this.selection=selection;  this.variation=variation;}  }
class C{  private InputStream writeNQuads(Model statements) throws RDFHandlerException {  StringWriter writer=new StringWriter();  RDFWriter nQuadsWriter=new NQuadsWriter(writer);  nQuadsWriter.startRDF();  for (  Statement nextStatement : statements) {    nQuadsWriter.handleStatement(nextStatement);  }  nQuadsWriter.endRDF();  return new ByteArrayInputStream(writer.toString().getBytes(Charset.forName("UTF-8")));}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.632 -0500",hash_original_method="AC74D3C7A92A1C0DA8A76C86F50D3219",hash_generated_method="AC74D3C7A92A1C0DA8A76C86F50D3219") float ascent(int pos){  if (mSpanned == null) {    return mPaint.ascent();  }  pos+=mStart;  MetricAffectingSpan[] spans=mSpanned.getSpans(pos,pos + 1,MetricAffectingSpan.class);  if (spans.length == 0) {    return mPaint.ascent();  }  TextPaint wp=mWorkPaint;  wp.set(mPaint);  for (  MetricAffectingSpan span : spans) {    span.updateMeasureState(wp);  }  return wp.ascent();}  }
class C{  public static CoreAdminResponse renameCore(String coreName,String newName,SolrClient client) throws SolrServerException, IOException {  CoreAdminRequest req=new CoreAdminRequest();  req.setCoreName(coreName);  req.setOtherCoreName(SolrIdentifierValidator.validateCoreName(newName));  req.setAction(CoreAdminAction.RENAME);  return req.process(client);}  }
class C{  public static void ALOAD_0(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.ALOAD_0();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.075 -0500",hash_original_method="E92CD830CE12526F79993827804AE423",hash_generated_method="BCEB42369EE07C003669C698ED16F549") public ElementType parent(){  return theParent;}  }
class C{  @Override UnixMountEntry findMountEntry() throws IOException {  LinuxFileSystem fs=(LinuxFileSystem)file().getFileSystem();  UnixPath path=null;  try {    byte[] rp=UnixNativeDispatcher.realpath(file());    path=new UnixPath(fs,rp);  } catch (  UnixException x) {    x.rethrowAsIOException(file());  }  UnixPath parent=path.getParent();  while (parent != null) {    UnixFileAttributes attrs=null;    try {      attrs=UnixFileAttributes.get(parent,true);    } catch (    UnixException x) {      x.rethrowAsIOException(parent);    }    if (attrs.dev() != dev())     break;    path=parent;    parent=parent.getParent();  }  byte[] dir=path.asByteArray();  for (  UnixMountEntry entry : fs.getMountEntries("/proc/mounts")) {    if (Arrays.equals(dir,entry.dir()))     return entry;  }  throw new IOException("Mount point not found");}  }
class C{  private static double[] convertConfidenceToProbability(double y[],double confidences[]){  double p[]=new double[confidences.length];  for (int j=0; j < confidences.length; j++) {    p[j]=confidences[j] * y[j] + (1. - confidences[j]) * Math.abs(y[j] - 1.);  }  return p;}  }
class C{  public void clear(){  mCategories.clear();  mTitles.clear();  mValues.clear();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long l=getLong(stack);  String s=getString(stack);  Seeker.getInstance().addVideoDirectory(getString(stack),s,l);  return null;}  }
class C{  public int compareTypeSafe(Value a,Value b){  return a.compareTypeSafe(b,compareMode);}  }
class C{  private void verifyBlockObjectResults() throws Exception {  log.info("Verifying migration of BlockObject.consistencyGroup to BlockObject.consistencyGroups.");  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  Iterator<Volume> volumeItr=_dbClient.queryIterativeObjects(Volume.class,testVolumeURIs);  Iterator<BlockSnapshot> blockSnapshotItr=_dbClient.queryIterativeObjects(BlockSnapshot.class,testBlockSnapshotURIs);  Iterator<BlockMirror> blockMirrorItr=_dbClient.queryIterativeObjects(BlockMirror.class,testBlockMirrorURIs);  while (volumeItr.hasNext()) {    blockObjects.add(volumeItr.next());  }  while (blockSnapshotItr.hasNext()) {    blockObjects.add(blockSnapshotItr.next());  }  while (blockMirrorItr.hasNext()) {    blockObjects.add(blockMirrorItr.next());  }  for (  BlockObject blockObject : blockObjects) {    Assert.assertTrue("Volume.consistencyGroup field should be null.",blockObject.getConsistencyGroup().equals(NullColumnValueGetter.getNullURI()));    Assert.assertNotNull("Volume.consistencyGroups field should contain at least 1 consistency group.",blockObject.getConsistencyGroups());    Assert.assertTrue("Volume.consistencyGroups field should contain at least 1 consistency group.",!blockObject.getConsistencyGroups().isEmpty());  }}  }
class C{  public ViewNode clone(){  ViewNode result=new ViewNode();  result.NodeId=NodeId;  result.NodeClass=NodeClass;  result.BrowseName=BrowseName;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  if (References != null) {    result.References=new ReferenceNode[References.length];    for (int i=0; i < References.length; i++)     result.References[i]=References[i].clone();  }  result.ContainsNoLoops=ContainsNoLoops;  result.EventNotifier=EventNotifier;  return result;}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1){  Map map=of();  map.put(k1,v1);  return map;}  }
class C{  @Override public String format(Date date,String mask){  return format(date,mask,null);}  }
class C{  public RAMContext(Long startTime,String contextId,StateMachine stateMachine){  super(stateMachine);  this.startTime=startTime;  this.contextId=contextId;}  }
class C{  private TextStyle annotationTextStyle(){  TextStyle textStyle=defaultTextStyle().copy();  textStyle.setColor(new RGB(255,0,255));  return textStyle;}  }
class C{  Feature nextEFeature(){  Feature eF=(Feature)eFeatures.get(eFeatureIdx);  eFeatureIdx++;  return eF;}  }
class C{  public boolean isAutoFlush(){  return autoFlush;}  }
class C{  public static Section readFirstSectionAndClose(Reader reader) throws IOException {  return readFirstSectionAndClose(reader,null);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:17.173 -0400",hash_original_method="ED767277BE9B9353BA6E55E45B5D3046",hash_generated_method="429FF00105B18AA2FB2F0680DF2B3118") public boolean equals(Object other){  if (this == other) {    return true;  }  if (other instanceof ECPoint) {    if (this.affineX != null) {      ECPoint otherPoint=(ECPoint)other;      return this.affineX.equals(otherPoint.affineX) && this.affineY.equals(otherPoint.affineY);    } else {      return other == POINT_INFINITY;    }  }  return false;}  }
class C{  public void printFrame(DMLFrame frame){  if (frame != null && frame.getPC() != null) {    printPC(frame.getPC());    printFrameVariables(frame.getVariables());  } else   System.out.println("DML runtime is currently inactive.");}  }
class C{  public void showDialog(){  project=appContext.getCurrentProject();  updateRemotes();}  }
class C{  public void testBusy_timeout() throws Exception, SQLException {  int counter=0;  ThreadPool threadPool=new ThreadPool(numThreads);  ResultSet userTabs=conn.getMetaData().getTables(null,null,null,null);  while (userTabs.next()) {    String tableName=userTabs.getString("TABLE_NAME");    if (tableName.equals(DatabaseCreator.TEST_TABLE1)) {      statement.execute(DatabaseCreator.DROP_TABLE1);    }  }  db.exec(DatabaseCreator.CREATE_TABLE3,null);  db.exec(DatabaseCreator.CREATE_TABLE1,null);  try {    conn.setAutoCommit(false);    db.busy_handler(null);    db.busy_timeout(0);    int id1=numOfRecords - 3;    threadPool.runTask(createTask2(id1,dbFile.getPath(),tracker));    int id2=numOfRecords + 3;    threadPool.runTask(createTask1(id2,dbFile.getPath(),tracker));    int oldID=5;    int newID=100;    threadPool.runTask(createTask3(oldID,dbFile.getPath(),newID,tracker));    threadPool.join();    List<String> errors=tracker.getErrors();    assertTrue("No error occurred on DB but should have",errors.size() > 0);    assertEquals(errors.get(0),db.error_string(Constants.SQLITE_LOCKED));    assertEquals(errors.get(0),"database is locked");    db.exec("delete from " + DatabaseCreator.TEST_TABLE1 + " where 1",null);    db.exec("delete from " + DatabaseCreator.TEST_TABLE3 + " where 1",null);    db.busy_timeout(10000);    db.busy_handler(null);    tracker.reset();    threadPool=new ThreadPool(numThreads);    threadPool.runTask(createTask1(id1,dbFile.getPath(),tracker));    threadPool.runTask(createTask2(id2,dbFile.getPath(),tracker));    threadPool.join();    errors=tracker.getErrors();    if (errors.size() > 0) {      fail("busy timeout should prevent from lock exception!");      for (      String s : errors) {        System.out.println("Round 2 Error" + s);      }    } else {    }  }  finally {    conn.setAutoCommit(true);    db.exec(DatabaseCreator.DROP_TABLE1,null);    db.exec(DatabaseCreator.DROP_TABLE3,null);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.tv_search);  mFragment=(TvSearchFragment)getFragmentManager().findFragmentById(R.id.search_fragment);}  }
class C{  @Deprecated public void updateNotebook(Notebook notebook,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"updateNotebook",mAuthenticationToken,notebook);}  }
class C{  public <S>T manyToOneWithoutControl(T destination,final S source){  try {    return this.<T,S>getJMapper(relationalManyToOneMapper,source).getDestinationWithoutControl(destination,source);  } catch (  Exception e) {    return logAndReturnNull(e);  }}  }
class C{  public boolean isOneDotTwo(){  return jdkVersion == JDK1_2;}  }
class C{  @Override @CanIgnoreReturnValue public int read(byte[] bytes,int off,int len) throws IOException {  int numOfBytesRead=in.read(bytes,off,len);  if (numOfBytesRead != -1) {    hasher.putBytes(bytes,off,numOfBytesRead);  }  return numOfBytesRead;}  }
class C{  public String noiseVarianceTipText(){  return "The noise variance to use.";}  }
class C{  public Notification(String type,Object source,long sequenceNumber,long timeStamp){  super(source);  this.source=source;  this.type=type;  this.sequenceNumber=sequenceNumber;  this.timeStamp=timeStamp;}  }
class C{  public StringBuilder format(final StringBuilder sb,final double w){  final int initPosition=sb.length();  if (Double.isNaN(w)) {    sb.append("NaN");  } else   if (Double.isInfinite(w)) {    sb.append(w < 0.0 ? "-Infinity" : "Infinity");  } else {    sb.append(mLocalFormat.format(w));  }  final int currLength=sb.length() - initPosition;  if (currLength == mLength) {    return sb;  }  if (currLength > mLength) {    sb.insert(initPosition,'#');    sb.append('#');  } else {    sb.insert(initPosition,mPadding,0,mLength - currLength);    assert sb.length() - initPosition == mLength;  }  return sb;}  }
class C{  public static String[] parse(String[] options,char option) throws Exception {  return parse(options,"" + option);}  }
class C{  private void addAboutItem(JComponent c,String name,Object val){  addAboutItem(c,name,val,null);}  }
class C{  public boolean remove(T value){  if (value == null) {    throw new IllegalArgumentException("BinaryTree cannot store 'null' values.");  }  if (root == null) {    return false;  }  BinaryNode<T> node=root;  BinaryNode<T> parent=null;  BinaryNode<T> n;  boolean returnVal=false;  while (!returnVal) {    int c=value.compareTo(node.value);    if (c < 0) {      if ((n=node.getLeftSon()) == null) {        break;      } else {        parent=node;        node=n;      }    } else     if (c > 0) {      if ((n=node.getRightSon()) == null) {        break;      } else {        parent=node;        node=n;      }    } else {      removeHelper(node,parent);      returnVal=true;      break;    }  }  return returnVal;}  }
class C{  public boolean equals(Object o){  if (!(o instanceof IVector))   return false;  IVector v=(IVector)o;  return size == v.size && Arrays.equals(vector,v.vector);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String02() throws NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  try {    KeyManagerFactory.getInstance(null,defaultProviderName);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyManagerFactory.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  static int toCodePoint(char highSurrogate,char lowSurrogate){  int codePoint=((highSurrogate - 0xd800) << 10) + (lowSurrogate - 0xdc00) + 0x10000;  return codePoint;}  }
class C{  public void updateLongestActiveWinStreak(){  for (  Team t : teamList) {    if (t.winStreak.getStreakLength() > longestActiveWinStreak.getStreakLength()) {      longestActiveWinStreak=t.winStreak;    }  }}  }
class C{  public boolean matchesNormalizedWithCondition(final ConversationStates state,final Expression trigger,final PreTransitionCondition condition){  if (matchesNormalized(state,trigger)) {    if (this.condition == condition) {      return true;    } else     if ((this.condition != null) && this.condition.equals(condition)) {      return true;    }  }  return false;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  private static String escapeJSON(String text){  StringBuilder builder=new StringBuilder();  builder.append('"');  for (int index=0; index < text.length(); index++) {    char chr=text.charAt(index);switch (chr) {case '"':case '\\':      builder.append('\\');    builder.append(chr);  break;case '\b':builder.append("\\b");break;case '\t':builder.append("\\t");break;case '\n':builder.append("\\n");break;case '\r':builder.append("\\r");break;default :if (chr < ' ') {String t="000" + Integer.toHexString(chr);builder.append("\\u" + t.substring(t.length() - 4));} else {builder.append(chr);}break;}}builder.append('"');return builder.toString();}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  ObjectOutputStream.PutField fields=out.putFields();  fields.put("language",baseLocale.getLanguage());  fields.put("script",baseLocale.getScript());  fields.put("country",baseLocale.getRegion());  fields.put("variant",baseLocale.getVariant());  fields.put("extensions",localeExtensions == null ? "" : localeExtensions.getID());  fields.put("hashcode",-1);  out.writeFields();}  }
class C{  protected boolean assignToNearestCluster(Relation<V> relation,DBIDs ids,double[][] oldmeans,double[][] meanshift,int[] changesize,List<? extends ModifiableDBIDs> clusters,WritableIntegerDataStore assignment,double[] varsum){  boolean changed=false;  final NumberVectorDistanceFunction<? super V> df=getDistanceFunction();  for (DBIDIter iditer=ids.iter(); iditer.valid(); iditer.advance()) {    double mindist=Double.POSITIVE_INFINITY;    V fv=relation.get(iditer);    int minIndex=0;    for (int i=0; i < k; i++) {      double dist=df.distance(fv,DoubleVector.wrap(oldmeans[i]));      if (dist < mindist) {        minIndex=i;        mindist=dist;      }    }    varsum[minIndex]+=mindist;    changed|=updateAssignment(iditer,fv,clusters,assignment,meanshift,changesize,minIndex);  }  return changed;}  }
class C{  private static String capitalFirst(@Nullable String str){  return str == null ? null : str.isEmpty() ? "" : Character.toUpperCase(str.charAt(0)) + str.substring(1);}  }
class C{  public StrBuilder replaceFirst(final String searchStr,final String replaceStr){  final int searchLen=(searchStr == null ? 0 : searchStr.length());  if (searchLen > 0) {    final int index=indexOf(searchStr,0);    if (index >= 0) {      final int replaceLen=(replaceStr == null ? 0 : replaceStr.length());      replaceImpl(index,index + searchLen,searchLen,replaceStr,replaceLen);    }  }  return this;}  }
class C{  private void checkOperation(){  if (shouldFail)   throw new IgniteException("Store exception");  if (operationDelay > 0) {    try {      U.sleep(operationDelay);    } catch (    IgniteInterruptedCheckedException e) {      throw new IgniteException(e);    }  }}  }
class C{  private void doInsertLookupRemoveStressTestMGC(final int m,final int nkeys,final int ntrials){  System.out.println("m=" + m + ", nkeys="+ nkeys+ ", ntrials="+ ntrials);  final BTree btree=getBTree(m);  final Integer[] keys=new Integer[nkeys];  final SimpleEntry[] vals=new SimpleEntry[nkeys];  long start=System.currentTimeMillis();  for (int i=0; i < nkeys; i++) {    keys[i]=r.nextInt();    vals[i]=new SimpleEntry();    btree.insert(keys[i],vals[i]);  }  log.trace("First insert took " + (System.currentTimeMillis() - start) + "ms for "+ nkeys+ " inserts");  try {    for (int trial=0; trial < ntrials; trial++) {      final int mod=3 * (trial + 1);      log.trace("Start trial " + trial + " leaf count: "+ btree.getLeafCount());      for (int i=nkeys - 1; i >= 0; i--) {        if (i % mod != 0)         btree.remove(keys[i]);      }      log.trace("After removes %" + mod + ", leaf count: "+ btree.getLeafCount());      for (int i=mod; i < nkeys; i++) {        if (i % mod != 0)         btree.insert(keys[i],vals[i]);      }    }    assertTrue(btree.dump(System.err));    if (log.isInfoEnabled())     log.info(btree.getBtreeCounters().toString());    btree.removeAll();  }  finally {    btree.close();  }}  }
class C{  public void updateLookAndFeel(String name,String className){  try {    UIManager.setLookAndFeel(className);  } catch (  Exception e) {    String errMsg="The " + name + " look-and-feel ";    if (e instanceof UnsupportedLookAndFeelException) {      errMsg+="is not supported on this platform.";    } else     if (e instanceof ClassNotFoundException) {      errMsg+="could not be found.";    } else {      errMsg+="could not be loaded.";    }    log.error(errMsg);  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public Plane(final PlanetModel planetModel,final double sinLat){  super(0.0,0.0,1.0);  D=-sinLat * computeDesiredEllipsoidMagnitude(planetModel,sinLat);}  }
class C{  protected void applyImplicitModifiers(AVList modifiers){}  }
class C{  public static int distance(final Point src,final Point tar){  int x1=src.x;  int x2=tar.x;  int y1=src.y;  int y2=tar.y;  return (int)Math.sqrt(Math.pow((x1 - x2),2) + Math.pow((y1 - y2),2));}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  public PlanStrategy chooseStrategy(final Person person){  double rnd=MatsimRandom.getRandom().nextDouble() * this.totalWeights.get(((PersonImplPops)person).getPopulationId());  double sum=0.0;  for (int i=0, max=this.weights.get(((PersonImplPops)person).getPopulationId()).size(); i < max; i++) {    sum+=this.weights.get(((PersonImplPops)person).getPopulationId()).get(i).doubleValue();    if (rnd <= sum) {      return this.strategies.get(((PersonImplPops)person).getPopulationId()).get(i);    }  }  return null;}  }
class C{  public static String extractPropertyNameFromMethodName(String prefix,String methodName){  if (prefix == null || methodName == null)   return null;  if (methodName.startsWith(prefix) && prefix.length() < methodName.length()) {    String result=methodName.substring(prefix.length());    String propertyName=java.beans.Introspector.decapitalize(result);    if (result.equals(MetaClassHelper.capitalize(propertyName)))     return propertyName;  }  return null;}  }
class C{  static void checkDesc(final String desc,final boolean canBeVoid){  int end=checkDesc(desc,0,canBeVoid);  if (end != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public static CommonTransitions createEmpty(){  CommonTransitions t=new CommonTransitions(TYPE_EMPTY);  return t;}  }
class C{  private void expandNode(ConjunctiveRuleModel rule,ExampleSet exampleSet) throws OperatorException {  double[] counts=this.getCounts(rule,exampleSet);  boolean pruning=this.communicateToHighscore(rule,counts);  if (pruning == true) {    this.prunedNodes.add(rule);  } else   if (rule.getRuleLength() < this.getParameterAsInt(PARAMETER_MAX_DEPTH)) {    this.addRulesToOpenNodes(rule.getAllRefinedRules(exampleSet),this.getOptimisticScore(counts));  }}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:32.799 -0500",hash_original_method="11FD3E760075BCE4140D633304A572D7",hash_generated_method="0F5A696F05C8305BB05A333E367CFFFF") private static void createThumbnailFromEXIF(String filePath,int targetSize,int maxPixels,SizedThumbnailBitmap sizedThumbBitmap){  if (filePath == null)   return;  ExifInterface exif=null;  byte[] thumbData=null;  try {    exif=new ExifInterface(filePath);    if (exif != null) {      thumbData=exif.getThumbnail();    }  } catch (  IOException ex) {    Log.w(TAG,ex);  }  BitmapFactory.Options fullOptions=new BitmapFactory.Options();  BitmapFactory.Options exifOptions=new BitmapFactory.Options();  int exifThumbWidth=0;  int fullThumbWidth=0;  if (thumbData != null) {    exifOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,exifOptions);    exifOptions.inSampleSize=computeSampleSize(exifOptions,targetSize,maxPixels);    exifThumbWidth=exifOptions.outWidth / exifOptions.inSampleSize;  }  fullOptions.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filePath,fullOptions);  fullOptions.inSampleSize=computeSampleSize(fullOptions,targetSize,maxPixels);  fullThumbWidth=fullOptions.outWidth / fullOptions.inSampleSize;  if (thumbData != null && exifThumbWidth >= fullThumbWidth) {    int width=exifOptions.outWidth;    int height=exifOptions.outHeight;    exifOptions.inJustDecodeBounds=false;    sizedThumbBitmap.mBitmap=BitmapFactory.decodeByteArray(thumbData,0,thumbData.length,exifOptions);    if (sizedThumbBitmap.mBitmap != null) {      sizedThumbBitmap.mThumbnailData=thumbData;      sizedThumbBitmap.mThumbnailWidth=width;      sizedThumbBitmap.mThumbnailHeight=height;    }  } else {    fullOptions.inJustDecodeBounds=false;    sizedThumbBitmap.mBitmap=BitmapFactory.decodeFile(filePath,fullOptions);  }}  }
class C{  default String renderCode(Generator gen,M model){  return block(model.getCode().stream().collect(joining(nl())));}  }
class C{  public Object invoke(Object[] argValues,Interpreter interpreter,CallStack callstack,SimpleNode callerInfo) throws EvalError {  return invoke(argValues,interpreter,callstack,callerInfo,false);}  }
class C{  public static Date unmodifiableDate(Date date){  if (date instanceof ImmutableDate) {    return date;  }  return new ImmutableDate(date.getTime());}  }
class C{  @SuppressWarnings("unchecked") public static final <K,V>Map<K,V> mergeMapEntry(CodedInputByteBufferNano input,Map<K,V> map,MapFactory mapFactory,int keyType,int valueType,V value,int keyTag,int valueTag) throws IOException {  map=mapFactory.forMap(map);  final int length=input.readRawVarint32();  final int oldLimit=input.pushLimit(length);  K key=null;  while (true) {    int tag=input.readTag();    if (tag == 0) {      break;    }    if (tag == keyTag) {      key=(K)input.readPrimitiveField(keyType);    } else     if (tag == valueTag) {      if (valueType == TYPE_MESSAGE) {        input.readMessage((MessageNano)value);      } else {        value=(V)input.readPrimitiveField(valueType);      }    } else {      if (!input.skipField(tag)) {        break;      }    }  }  input.checkLastTagWas(0);  input.popLimit(oldLimit);  if (key == null) {    key=(K)primitiveDefaultValue(keyType);  }  if (value == null) {    value=(V)primitiveDefaultValue(valueType);  }  map.put(key,value);  return map;}  }
class C{  public boolean containsInstructionWithOffset(int offset){  Iterator<InstructionHandle> i=instructionIterator();  while (i.hasNext()) {    if (i.next().getPosition() == offset) {      return true;    }  }  return false;}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {  if (null != m_resultDeclHandler)   m_resultDeclHandler.internalEntityDecl(name,value);}  }
class C{  protected static CharArraySet loadStopwordSet(Reader stopwords) throws IOException {  try {    return WordlistLoader.getWordSet(stopwords);  }  finally {    IOUtils.close(stopwords);  }}  }
class C{  public static short bytesToShort(byte[] arr){  return (short)(((arr[0] & 0xff) << 8) | (arr[1] & 0xff));}  }
class C{  public boolean isCube(){  return cube;}  }
class C{  void stop(){  printAllPostponedMessages();  flushTimer.cancel();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.173 -0400",hash_original_method="537A66F5B0B2BE829DDB6F4F77A4F783",hash_generated_method="4AF6261EC892F92D1D56E9CACA92D091") protected void handleStart(File startDirectory,Collection<T> results) throws IOException {}  }
class C{  void clear(){  LOGGER.info("Clear all serializers");  serializers.clear();  serializersArray=new Serializer[0];  COUNTER.set(0);}  }
class C{  private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  static public void assertEquals(String expected,String actual){  assertEquals(null,expected,actual);}  }
class C{  private String string(Object val){  if (val == null)   return ""; else   if (val instanceof Boolean)   return ((Boolean)val) ? "1" : "0"; else   if (val instanceof String)   return ((String)val).replace(';','~'); else   if (val instanceof String[]) {    String[] val0=(String[])val;    SB buf=new SB();    boolean first=true;    for (    String str : val0) {      if (first)       first=false; else       buf.a(DELIM_FIELD_VAL);      buf.a(str.replace(';','~'));    }    return buf.toString();  } else   return val.toString();}  }
class C{  public static byte[] toSimpleByteArray(CharSequence charSequence){  byte[] barr=new byte[charSequence.length()];  for (int i=0; i < barr.length; i++) {    barr[i]=(byte)charSequence.charAt(i);  }  return barr;}  }
class C{  public void spreadFire(Coords coords,TargetRoll roll,int height){  IHex hex=game.getBoard().getHex(coords);  if (hex == null) {    return;  }  if (Math.abs(hex.ceiling() - height) > 4) {    return;  }  if (!(hex.containsTerrain(Terrains.FIRE)) && server.checkIgnition(coords,roll)) {    Report r=new Report(5150,Report.PUBLIC);    r.add(coords.getBoardNum());    vPhaseReport.addElement(r);  }}  }
class C{  public static ASTree parseExpr(String src,SymbolTable st) throws CompileError {  Parser p=new Parser(new Lex(src));  return p.parseExpression(st);}  }
class C{  public static boolean matchesTypeName(Class<?> clazz,String typeName){  return (typeName != null && (typeName.equals(clazz.getName()) || typeName.equals(clazz.getSimpleName()) || (clazz.isArray() && typeName.equals(getQualifiedNameForArray(clazz)))));}  }
class C{  public void newScriptGroup(){  throw new NotImplementedException();}  }
class C{  protected String toStringChar(char[] name){  return "[" + new String(name) + "]";}  }
class C{  public boolean isInstance(){  return this == VIRTUAL || this == INTERFACE || this == SPECIAL;}  }
class C{  public final AlertDialog shareText(CharSequence text){  return shareText(text,"TEXT_TYPE");}  }
class C{  static public void assertEquals(String message,boolean expected,boolean actual){  assertEquals(message,new Boolean(expected),new Boolean(actual));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGenPackage.STRING_LITERAL__VALUE:    setValue((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void fireNeuronMoved(final Neuron moved){  for (  NeuronListener listener : neuronListeners) {    listener.neuronMoved(new NetworkEvent<Neuron>(this,moved));  }}  }
class C{  @TargetApi(21) public Bundler putSize(String key,Size value){  bundle.putSize(key,value);  return this;}  }
class C{  public final void removeListener(TListener listener){  listeners.remove(listener);}  }
class C{  private static boolean testSpecificValue(double x,double y,double expectedValue,double interpValue){  logger.info("At coordinate (" + x + ", "+ y+ ") the expected value is "+ expectedValue+ "; the interpolated value is "+ interpValue+ ".");  boolean specificValueInterpUseful=true;  if (interpValue > expectedValue + 1 || interpValue < expectedValue - 1)   specificValueInterpUseful=false;  return specificValueInterpUseful;}  }
class C{  private final boolean useSyncWrites(boolean forceAsync){  if (forceAsync) {    return false;  }  if (this.asyncQueuingInProgress) {    return true;  }  if (this.isReceiver) {    return true;  }  if (!this.preserveOrder) {    return true;  }  if (this.asyncDistributionTimeout == 0) {    return true;  }  return false;}  }
class C{  public PilotingRollData(int entityId,int value,int pilotValue,String desc){  super(value,desc);  addModifier(pilotValue,desc);  this.entityId=entityId;}  }
class C{  public void commitChanges(){  neuronPropertiesPanel.commitChanges();  neuronList.get(0).getNetwork().fireNeuronsUpdated(neuronList);}  }
class C{  static float clamp(float f,float min,float max){  return Math.max(min,Math.min(f,max));}  }
class C{  public BOSHException(final String msg){  super(msg);}  }
class C{  @Override public V put(K key,V value){  processQueue();  SoftValue<V> old=map.put(key,new SoftValue<V>(value,queue,key));  return old == null ? null : old.get();}  }
class C{  public RegisterValues(final List<ThreadRegisters> threads){  Preconditions.checkNotNull(threads,"IE01035: Threads argument can not be null");  this.threads=ImmutableList.<ThreadRegisters>copyOf(threads);}  }
class C{  public void onSort(MenuItem item){}  }
class C{  @Override public String generateElement(){  if (adsIdx == ads.size()) {    adsIdx=0;  }  if (eventsIdx == eventTypes.length) {    eventsIdx=0;  }  sb.setLength(0);  sb.append("{\"user_id\":\"");  sb.append(pageID);  sb.append("\",\"page_id\":\"");  sb.append(userID);  sb.append("\",\"ad_id\":\"");  sb.append(ads.get(adsIdx++));  sb.append("\",\"ad_type\":\"");  sb.append("banner78");  sb.append("\",\"event_type\":\"");  sb.append(eventTypes[eventsIdx++]);  sb.append("\",\"event_time\":\"");  sb.append(System.currentTimeMillis());  sb.append("\",\"ip_address\":\"1.2.3.4\"}");  return sb.toString();}  }
class C{  final public int hashCode(){  return (int)value;}  }
class C{  public static String toHexString(BigInteger b){  String hexValue=b.toString(16);  StringBuffer buf=new StringBuffer(hexValue.length() * 2);  if (hexValue.startsWith("-")) {    buf.append("   -");    hexValue=hexValue.substring(1);  } else {    buf.append("    ");  }  if ((hexValue.length() % 2) != 0) {    hexValue="0" + hexValue;  }  int i=0;  while (i < hexValue.length()) {    buf.append(hexValue.substring(i,i + 2));    i+=2;    if (i != hexValue.length()) {      if ((i % 64) == 0) {        buf.append("\n    ");      } else       if (i % 8 == 0) {        buf.append(" ");      }    }  }  return buf.toString();}  }
class C{  public boolean isStrict2(){  return this.strict2;}  }
class C{  public static boolean isBigNumberType(Class clazz){  if ((clazz == BigInteger.class) || (clazz == BigDecimal.class)) {    return true;  }  return false;}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  public void removeAllElements(){  if (objects.size() > 0) {    int firstIndex=0;    int lastIndex=objects.size() - 1;    objects.removeAllElements();    selectedObject=null;    fireIntervalRemoved(this,firstIndex,lastIndex);  } else {    selectedObject=null;  }}  }
class C{  public static String uncapitalize(String expression){  return Objects.requireNonNull(expression,"String value cannot be null").isEmpty() ? expression : expression.substring(0,1).toLowerCase() + expression.substring(1);}  }
class C{  public Product copyForResale(Organization vendor){  Product copy=new Product();  copy.setDataContainer(new ProductData());  copy.setType(ServiceType.PARTNER_TEMPLATE);  copy.setStatus(this.getStatus());  copy.setVendor(vendor);  copy.setTechnicalProduct(this.getTechnicalProduct());  copy.setPriceModel(null);  copy.setParameterSet(null);  copy.setConfiguratorUrl(null);  copy.setCustomTabUrl(null);  setDatacontainerValues(copy,ServiceType.PARTNER_TEMPLATE);  copy.setAutoAssignUserEnabled(null);  copy.setTemplate(getTemplateOrSelf());  return copy;}  }
class C{  @Override public void initialize(ExecutableSequence executableSequence){  for (  ExecutionVisitor visitor : visitors) {    visitor.initialize(executableSequence);  }}  }
class C{  public static void rotationY(View v,float fromY,float toY,int duration,Animator.AnimatorListener animatorListener){  ObjectAnimator animator=ObjectAnimator.ofFloat(v,View.ROTATION_Y,fromY,toY);  animator.setDuration(duration);  if (animatorListener != null) {    animator.addListener(animatorListener);  }  animator.start();}  }
class C{  public static boolean hasSeconds(CharSequence inFormat){  return hasDesignator(inFormat,SECONDS);}  }
class C{  public void notifyDataSetChanged(){  this.mViewPager.getAdapter().notifyDataSetChanged();  mMaxPage=this.mViewPager.getAdapter().getCount();  initialize();}  }
class C{  public void add(char[] w,int wLen){  if (i + wLen >= b.length) {    char[] new_b=new char[i + wLen + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  for (int c=0; c < wLen; c++)   b[i++]=w[c];}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.SPLITTER__NAME:    setName((String)newValue);  return;case EipPackage.SPLITTER__TO_CHANNELS:getToChannels().clear();getToChannels().addAll((Collection<? extends Channel>)newValue);return;case EipPackage.SPLITTER__FROM_CHANNELS:getFromChannels().clear();getFromChannels().addAll((Collection<? extends Channel>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static void ReleaseStringCritical(JNIEnvironment env,int strJREF,Address carray){  if (traceJNI)   VM.sysWrite("JNI called: ReleaseStringCritical \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    VM.enableGC(true);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public ValidationException(){  super();}  }
class C{  protected Object doTask() throws Exception {  final String metadataName=getOnlyResource();  try {    getIndex(metadataName);    throw new IndexExistsException(metadataName);  } catch (  NoSuchIndexException ex) {  }  final UUID metadataIndexUUID=UUID.randomUUID();  final MetadataIndex mdi=MetadataIndex.create(getJournal(),metadataIndexUUID,metadata);  final PartitionLocator[] partitions=new PartitionLocator[npartitions];  for (int i=0; i < npartitions; i++) {    final byte[] leftSeparator=separatorKeys[i];    final byte[] rightSeparator=i + 1 < npartitions ? separatorKeys[i + 1] : null;    final PartitionLocator pmd=new PartitionLocator(mdi.incrementAndGetNextPartitionId(),dataServiceUUIDs[i],leftSeparator,rightSeparator);    if (log.isInfoEnabled())     log.info("name=" + scaleOutIndexName + ", pmd="+ pmd);    final IndexMetadata md=metadata.clone();    md.setPartitionMetadata(new LocalPartitionMetadata(pmd.getPartitionId(),-1,leftSeparator,rightSeparator,null,null));    dataServices[i].registerIndex(DataService.getIndexPartitionName(scaleOutIndexName,pmd.getPartitionId()),md);    partitions[i]=pmd;  }  for (int i=0; i < npartitions; i++) {    mdi.insert(separatorKeys[i],SerializerUtil.serialize(partitions[i]));  }  getJournal().registerIndex(metadataName,mdi);  return mdi.getScaleOutIndexMetadata().getIndexUUID();}  }
class C{  public static Composite convertOpacity(Element e){  Value v=getComputedStyle(e,SVGCSSEngine.OPACITY_INDEX);  float f=v.getFloatValue();  if (f <= 0f) {    return TRANSPARENT;  } else   if (f >= 1.0f) {    return AlphaComposite.SrcOver;  } else {    return AlphaComposite.getInstance(AlphaComposite.SRC_OVER,f);  }}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  private void restoreNonVolatiles(Instruction inst){  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  int nNonvolatileGPRS=ir.compiledMethod.getNumberOfNonvolatileGPRs();  int n=nNonvolatileGPRS - 1;  for (Enumeration<Register> e=phys.enumerateNonvolatileGPRsBackwards(); e.hasMoreElements() && n >= 0; n--) {    Register nv=e.nextElement();    int offset=getNonvolatileGPROffset(n);    Operand M=new StackLocationOperand(true,-offset,WORDSIZE);    inst.insertBefore(MIR_Move.create(IA32_MOV,new RegisterOperand(nv,PRIMITIVE_TYPE_FOR_WORD),M));  }}  }
class C{  private void stopPlayer(){  mMediaPlayer.stop();  mMediaPlayer.release();}  }
class C{  public static void tripleToEquation(final long[] triple,final long seed,final int numVariables,final int e[]){  if (numVariables == 0) {    e[0]=e[1]=e[2]=-1;    return;  }  final long[] hash=new long[3];  Hashes.spooky4(triple,seed,hash);  e[0]=(int)((hash[0] & 0x7FFFFFFFFFFFFFFFL) % numVariables);  e[1]=(int)((hash[1] & 0x7FFFFFFFFFFFFFFFL) % numVariables);  e[2]=(int)((hash[2] & 0x7FFFFFFFFFFFFFFFL) % numVariables);}  }
class C{  public E peek(){  if (isEmpty()) {    return null;  }  return elements[0];}  }
class C{  public double doubleValue(){  return doubleValue;}  }
class C{  public void stop(){  setSpeed(0.0);  movementOffset=0.0;}  }
class C{  public void updateTimeZone(String timeZone) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update regional setting");  Element regional=_getRootElement("regional");  regional.setAttribute("timezone",timeZone.trim());}  }
class C{  private void addChangedTablesToGlobalVector(Vector<String> tableNamesDB1,Vector<String> tableNamesDB2) throws SQLException {  final PreparedStatement stmtGetColumNamesForTable1=con1.prepareStatement("select column_name from user_tab_columns where table_name=?");  final PreparedStatement stmtGetColumNamesForTable2=con2.prepareStatement("select column_name from user_tab_columns where table_name=?");  final PreparedStatement stmtGetColumDetailsDB1=con1.prepareStatement("select * from user_tab_columns where column_name=? and table_name=?");  final PreparedStatement stmtGetColumDetailsDB2=con2.prepareStatement("select * from user_tab_columns where column_name=? and table_name=?");  Iterator iter=tableNamesDB2.iterator();  while (iter.hasNext()) {    String tableName=(String)iter.next();    if (tableNamesDB1.contains(tableName)) {      final Vector<String> columnNamesDB1=new Vector<String>();      final Vector<String> columnNamesDB2=new Vector<String>();      stmtGetColumNamesForTable1.setString(1,tableName);      stmtGetColumNamesForTable2.setString(1,tableName);      ResultSet rs=stmtGetColumNamesForTable1.executeQuery();      while (rs.next()) {        columnNamesDB1.add(rs.getString("COLUMN_NAME"));      }      rs.close();      rs=stmtGetColumNamesForTable2.executeQuery();      while (rs.next()) {        columnNamesDB2.add(rs.getString("COLUMN_NAME"));      }      rs.close();      final Vector<String> addedColumns=getNewElements(columnNamesDB1,columnNamesDB2);      if (addedColumns.size() != 0) {        final Table table=new Table(tableName);        for (int i=0; i < addedColumns.size(); i++) {          stmtGetColumDetailsDB2.setString(1,addedColumns.get(i));          stmtGetColumDetailsDB2.setString(2,tableName);          rs=stmtGetColumDetailsDB2.executeQuery();          while (rs.next()) {            final Column column=new Column(rs);            if (!column.isNullable() && column.getDefaultValue() == null) {              column.setTmpDefaultValue(getTempDefaultValueForColumn(tableName,column));            }            table.addColumnToAdd(column);          }          rs.close();        }        m_changedTables.add(table);      }      final Vector<String> missingColumns=getMissingElements(columnNamesDB1,columnNamesDB2);      if (missingColumns.size() != 0) {        final Table table=new Table(tableName);        for (int i=0; i < missingColumns.size(); i++) {          table.addColumnToDrop(new Column(missingColumns.get(i)));        }        m_changedTables.add(table);      }      Table changedTable=null;      for (int i=0; i < columnNamesDB1.size(); i++) {        String colName=columnNamesDB1.get(i);        if (columnNamesDB2.contains(colName)) {          stmtGetColumDetailsDB1.setString(1,colName);          stmtGetColumDetailsDB1.setString(2,tableName);          stmtGetColumDetailsDB2.setString(1,colName);          stmtGetColumDetailsDB2.setString(2,tableName);          Column colDB1=null;          Column colDB2=null;          rs=stmtGetColumDetailsDB1.executeQuery();          if (rs.next()) {            colDB1=new Column(rs);          }          rs.close();          rs=stmtGetColumDetailsDB2.executeQuery();          if (rs.next()) {            colDB2=new Column(rs);          }          rs.close();          if (!colDB1.equals(colDB2)) {            if (changedTable == null) {              changedTable=new Table(tableName);            }            if (!colDB2.isNullable() && colDB2.getDefaultValue() == null) {              colDB2.setTmpDefaultValue(getTempDefaultValueForColumn(tableName,colDB2));            }            colDB2.setNullHasChanged(colDB2.isNullable() != colDB1.isNullable());            final String def1=colDB1.getDefaultValue();            final String def2=colDB2.getDefaultValue();            if (def1 == null && def2 == null) {              colDB2.setDefaultHasChanged(false);            } else             if (def1 != null && def2 != null) {              colDB2.setDefaultHasChanged(!def1.equals(def2));            } else {              colDB2.setDefaultHasChanged(true);            }            changedTable.addColumnToModify(colDB2);          }        }      }      if (changedTable != null) {        m_changedTables.add(changedTable);      }    }  }  stmtGetColumNamesForTable1.close();  stmtGetColumNamesForTable2.close();  stmtGetColumDetailsDB1.close();  stmtGetColumDetailsDB2.close();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.COMMENT___INLINE_COMMENT_1:    return getInlineComment_1();case UmplePackage.COMMENT___MULTILINE_COMMENT_1:  return getMultilineComment_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ICursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder){  return query(db,projectionIn,selection,selectionArgs,groupBy,having,sortOrder,null);}  }
class C{  public static Long toLong(double d){  return Long.valueOf(toLongValue(d));}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static double volumeScaled(SpatialComparable box,double scale){  final int dim=box.getDimensionality();  double vol=1.;  for (int i=0; i < dim; i++) {    double delta=box.getMax(i) - box.getMin(i);    if (delta == 0.) {      return 0.;    }    vol*=delta * scale;  }  return vol;}  }
class C{  public ConcurrentWeakValueCacheWithBatchedUpdates(final int queueCapacity){  this(queueCapacity,0.75f,16);}  }
class C{  public MemberList<TMember> membersOfImplementedInterfaces(TClassifier classifier){  Iterator<ParameterizedTypeRef> iter=classifier.getImplementedOrExtendedInterfaceRefs().iterator();  if (!iter.hasNext()) {    return MemberList.emptyList();  }  ParameterizedTypeRef first=iter.next();  if (!iter.hasNext()) {    if (first.getDeclaredType() instanceof TInterface) {      TInterface tinterface=(TInterface)first.getDeclaredType();      return members(tinterface);    }    return MemberList.emptyList();  }  MemberList<TMember> memberList=new MemberList<>();  for (  ParameterizedTypeRef interfaceRef : classifier.getImplementedOrExtendedInterfaceRefs()) {    if (interfaceRef.getDeclaredType() instanceof TInterface) {      TInterface tinterface=(TInterface)interfaceRef.getDeclaredType();      memberList.addAll(members(tinterface));    }  }  return memberList;}  }
class C{  protected Turnout createNewTurnout(String systemName,String userName){  String addr=systemName.substring(getSystemPrefix().length() + 1);  Turnout t=new CbusTurnout(getSystemPrefix(),addr,memo.getTrafficController());  t.setUserName(userName);  return t;}  }
class C{  @Override public void draw(Graphics2D g){  drawDiamond(g,Color.yellow,Color.black);}  }
class C{  private void printMap(Map<Mac,Set<Port>> map){  map.forEach(null);}  }
class C{  private int unregisterSourceFile(String file){  if (!sourceFiles.contains(file))   return -1;  sourceFiles.remove(file);  this.size--;  return sourceFiles.size() - 1;}  }
class C{  public static int monthFromDateValue(long x){  return (int)(x >>> SHIFT_MONTH) & 15;}  }
class C{  public void write(OutputStream out,Drawing drawing,java.util.List<Figure> figures,@Nullable AffineTransform drawingTransform,@Nullable Dimension imageSize) throws IOException {  BufferedImage img;  if (drawingTransform == null || imageSize == null) {    img=toImage(drawing,figures,1d,false);  } else {    img=toImage(drawing,figures,drawingTransform,imageSize);  }  ImageIO.write(img,formatName,out);  img.flush();}  }
class C{  public BlockingObservableAssert<T> fails(){  isNotNull();  assertThat(getBlockingObservableExecutor().hasFailed()).overridingErrorMessage("Observable has not failed").isTrue();  return this;}  }
class C{  protected String doIt() throws Exception {  log.info("AD_PInstance_ID=" + getAD_PInstance_ID());  if (p_PA_ReportCube_ID > 0) {    MReportCube cube=new MReportCube(getCtx(),p_PA_ReportCube_ID,get_TrxName());    String result=cube.update(false,false);    log.log(Level.FINE,result);  }  int PA_ReportLineSet_ID=m_report.getLineSet().getPA_ReportLineSet_ID();  StringBuffer sql=new StringBuffer("INSERT INTO T_Report " + "(AD_PInstance_ID, PA_ReportLine_ID, Record_ID,Fact_Acct_ID, SeqNo,LevelNo, Name,Description,TabLevel, ReportLineStyle, FixedPercentage) " + "SELECT ").append(getAD_PInstance_ID()).append(", PA_ReportLine_ID, 0,0, SeqNo,0, Name,Description,TabLevel,ReportLineStyle,FixedPercentage " + "FROM PA_ReportLine " + "WHERE IsActive='Y' AND PA_ReportLineSet_ID=").append(PA_ReportLineSet_ID);  int no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Report Lines = " + no);  m_columns=m_report.getColumnSet().getColumns();  if (m_columns.length == 0)   throw new AdempiereUserError("@No@ @PA_ReportColumn_ID@");  m_lines=m_report.getLineSet().getLiness();  if (m_lines.length == 0)   throw new AdempiereUserError("@No@ @PA_ReportLine_ID@");  for (int line=0; line < m_lines.length; line++) {    if (m_lines[line].isLineTypeSegmentValue())     insertLine(line);  }  insertLineDetail();  doCalculations();  deleteUnprintedLines();  scaleResults();  if (Ini.isClient())   getProcessInfo().setTransientObject(getPrintFormat()); else   getProcessInfo().setSerializableObject(getPrintFormat());  MPrintFormat pf=getPrintFormat();  log.fine((System.currentTimeMillis() - m_start) + " ms");  return "";}  }
class C{  public static void logOut(){  checkInitialized();  getInstance().core.logOut();}  }
class C{  static void initResource(){  try {    messageRB=ResourceBundle.getBundle("sun.tools.serialver.resources.serialver");  } catch (  MissingResourceException e) {    throw new Error("Fatal: Resource for serialver is missing");  }}  }
class C{  public Attribute(SourceLocation location,Annotation annotation,Name name,SimpleType type){  super(location,annotation);  this.name=name;  this.type=type;}  }
class C{  public static Instances read(String location) throws Exception {  DataSource source;  Instances result;  source=new DataSource(location);  result=source.getDataSet();  return result;}  }
class C{  public ReportedData searchTranscripts(Form completedForm) throws XMPPException {  return transcriptSearchManager.submitSearch(StringUtils.parseServer(workgroupJID),completedForm);}  }
class C{  public void deleteProject(int id){  prjDao.delete(id);}  }
class C{  public KeyStroke[] allKeys(){  int count=size();  InputMap parent=getParent();  if (count == 0) {    if (parent != null) {      return parent.allKeys();    }    return keys();  }  if (parent == null) {    return keys();  }  KeyStroke[] keys=keys();  KeyStroke[] pKeys=parent.allKeys();  if (pKeys == null) {    return keys;  }  if (keys == null) {    return pKeys;  }  HashMap<KeyStroke,KeyStroke> keyMap=new HashMap<KeyStroke,KeyStroke>();  int counter;  for (counter=keys.length - 1; counter >= 0; counter--) {    keyMap.put(keys[counter],keys[counter]);  }  for (counter=pKeys.length - 1; counter >= 0; counter--) {    keyMap.put(pKeys[counter],pKeys[counter]);  }  KeyStroke[] allKeys=new KeyStroke[keyMap.size()];  return keyMap.keySet().toArray(allKeys);}  }
class C{  public static long copyAndCloseInput(InputStream in,OutputStream out) throws IOException {  try {    return copy(in,out);  } catch (  Exception e) {    throw DbException.convertToIOException(e);  } finally {    closeSilently(in);  }}  }
class C{  public boolean isClustered(){  return cluster;}  }
class C{  public static String restore(){  return ESC + "[u";}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_OPTIONS_1__TRACE_OPTION_1:    return traceOption_1 != null && !traceOption_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static TitledPane titledPane(String title,Node node,boolean collapsible){  TitledPane tp=new TitledPane(title,node);  tp.setCollapsible(collapsible);  tp.setExpanded(false);  return tp;}  }
class C{  static public List<List<Sequence<IString>>> readReferences(String[] referenceFilenames) throws IOException {  return readReferences(referenceFilenames,false);}  }
class C{  public void runUpdate(Password password) throws PageException {  checkWriteAccess();  ConfigServerImpl cs=(ConfigServerImpl)ConfigImpl.getConfigServer(config,password);  CFMLEngineFactory factory=cs.getCFMLEngine().getCFMLEngineFactory();synchronized (factory) {    try {      factory.update(cs.getPassword(),cs.getIdentification());    } catch (    Exception e) {      throw Caster.toPageException(e);    }  }}  }
class C{  @Inline @Override public final void booleanWrite(ObjectReference objref,boolean value,Word offset,Word location,int mode){  Magic.setBooleanAtOffset(objref.toObject(),offset.toOffset(),value,location.toInt());}  }
class C{  public OutputT apply(WindowedValue<KV<K,Iterable<InputT>>> windowedKv){  return combineFn.apply(windowedKv.getValue().getKey(),windowedKv.getValue().getValue(),ctxtForInput(windowedKv));}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return encode((byte[])pObject);  } else   if (pObject instanceof String) {    return encode((String)pObject);  } else {    throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be URL encoded");  }}  }
class C{  public boolean hasNicknameExt(){  return hasExtension(GphotoNickname.class);}  }
class C{  private HttpHeaderParser(){}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public String queryString(int what){  return EGL14.eglQueryString(mEGLDisplay,what);}  }
class C{  public DLSet(){}  }
class C{  public boolean hasMoreIterations(){  return !m_Finished;}  }
class C{  @CanIgnoreReturnValue public Stopwatch start(){  checkState(!isRunning,"This stopwatch is already running.");  isRunning=true;  startTick=ticker.read();  return this;}  }
class C{  public boolean bool() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NUMBER,new Object[]{getTypeString()});  return false;}  }
class C{  public Transfer writeBoolean(boolean x) throws IOException {  out.writeByte((byte)(x ? 1 : 0));  return this;}  }
class C{  public void clearNetMapListeners(){  listenerSupport.clearNetMapListeners();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Node textNode;  String textValue;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  textNode=testAddr.getFirstChild();  textValue=textNode.getNodeValue();  assertEquals("nodeTextNodeValueAssert1","1230 North Ave. Dallas, Texas 98551",textValue);}  }
class C{  public static void copyColorMaps(String src,String dest) throws IOException {  File inDir=new File(src,COLOR_MAP_HOME);  File outDir=new File(dest,COLOR_MAP_HOME);  if (!outDir.exists()) {    outDir.mkdir();  }  String[] colorMapFiles=inDir.list();  if (colorMapFiles == null) {    colorMapFiles=new String[0];  }  for (int i=0; i < colorMapFiles.length; ++i) {    if (colorMapFiles[i].endsWith(".txt")) {      File inFile=new File(inDir,colorMapFiles[i]);      File outFile=new File(outDir,colorMapFiles[i]);      FileHelper.copyFile(inFile,outFile);    }  }}  }
class C{  @Override public void dispose(){}  }
class C{  public void stop(){  animating=false;}  }
class C{  protected LinkedHashMap<V,Number> singleSourceShortestPath(V source,Collection<V> targets,int numDests){  SourceData sd=getSourceData(source);  Set<V> to_get=new HashSet<V>();  if (targets != null) {    to_get.addAll(targets);    Set<V> existing_dists=sd.distances.keySet();    for (    V o : targets) {      if (existing_dists.contains(o))       to_get.remove(o);    }  }  if (sd.reached_max || (targets != null && to_get.isEmpty()) || (sd.distances.size() >= numDests)) {    return sd.distances;  }  while (!sd.unknownVertices.isEmpty() && (sd.distances.size() < numDests || !to_get.isEmpty())) {    Map.Entry<V,Number> p=sd.getNextVertex();    V v=p.getKey();    double v_dist=p.getValue().doubleValue();    to_get.remove(v);    if (v_dist > this.max_distance) {      sd.restoreVertex(v,v_dist);      sd.reached_max=true;      break;    }    sd.dist_reached=v_dist;    if (sd.distances.size() >= this.max_targets) {      sd.reached_max=true;      break;    }    for (    E e : getEdgesToCheck(v)) {      for (      V w : g.getIncidentVertices(e)) {        if (!sd.distances.containsKey(w)) {          double edge_weight=nev.apply(e).doubleValue();          if (edge_weight < 0)           throw new IllegalArgumentException("Edges weights must be non-negative");          double new_dist=v_dist + edge_weight;          if (!sd.estimatedDistances.containsKey(w)) {            sd.createRecord(w,e,new_dist);          } else {            double w_dist=((Double)sd.estimatedDistances.get(w)).doubleValue();            if (new_dist < w_dist)             sd.update(w,e,new_dist);          }        }      }    }  }  return sd.distances;}  }
class C{  public Supply(final long supply){  super(supply,Supply.class);}  }
class C{  public Message sendMessageSynchronously(int what,int arg1){  Message msg=Message.obtain();  msg.what=what;  msg.arg1=arg1;  Message resultMsg=sendMessageSynchronously(msg);  return resultMsg;}  }
class C{  public boolean isBuildOnSave(){  return buildOnSave;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatareplacedataexceedslengthofdata.class,args);}  }
class C{  @Override public final Uri insert(final Uri uri,final ContentValues values){  final SQLiteDatabase dbConnection=db.getWritableDatabase();  try {    dbConnection.beginTransaction();switch (URI_MATCHER.match(uri)) {case SITE_DIR:case SITE_ID:      final long siteid=dbConnection.insertOrThrow(SiteTable.TABLE_NAME,null,values);    final Uri newSite=ContentUris.withAppendedId(SITE_CONTENT_URI,siteid);  getContext().getContentResolver().notifyChange(newSite,null);dbConnection.setTransactionSuccessful();return newSite;case USERINFO_DIR:case USERINFO_ID:final long userinfoid=dbConnection.insertOrThrow(UserInfoTable.TABLE_NAME,null,values);final Uri newUserInfo=ContentUris.withAppendedId(USERINFO_CONTENT_URI,userinfoid);getContext().getContentResolver().notifyChange(newUserInfo,null);dbConnection.setTransactionSuccessful();return newUserInfo;case FEATURED_USERS_DIR:case FEATURED_USERS_ID:final long featured_usersid=dbConnection.insertOrThrow(Featured_usersTable.TABLE_NAME,null,values);final Uri newFeatured_users=ContentUris.withAppendedId(FEATURED_USERS_CONTENT_URI,featured_usersid);getContext().getContentResolver().notifyChange(newFeatured_users,null);dbConnection.setTransactionSuccessful();return newFeatured_users;case CATEGORY_PROPERTIES_DIR:case CATEGORY_PROPERTIES_ID:final long category_propertiesid=dbConnection.insertOrThrow(Category_propertiesTable.TABLE_NAME,null,values);final Uri newCategory_properties=ContentUris.withAppendedId(CATEGORY_PROPERTIES_CONTENT_URI,category_propertiesid);getContext().getContentResolver().notifyChange(newCategory_properties,null);dbConnection.setTransactionSuccessful();return newCategory_properties;case CATEGORIES_DIR:case CATEGORIES_ID:final long categoriesid=dbConnection.insertOrThrow(CategoriesTable.TABLE_NAME,null,values);final Uri newCategories=ContentUris.withAppendedId(CATEGORIES_CONTENT_URI,categoriesid);getContext().getContentResolver().notifyChange(newCategories,null);dbConnection.setTransactionSuccessful();return newCategories;case TOPICS_DIR:case TOPICS_ID:final long topicsid=dbConnection.insertOrThrow(TopicsTable.TABLE_NAME,null,values);final Uri newTopics=ContentUris.withAppendedId(TOPICS_CONTENT_URI,topicsid);getContext().getContentResolver().notifyChange(newTopics,null);dbConnection.setTransactionSuccessful();return newTopics;case TOPICSDETAILS_DIR:case TOPICSDETAILS_ID:final long topicsdetailsid=dbConnection.insertOrThrow(TopicsDetailsTable.TABLE_NAME,null,values);final Uri newTopicsDetails=ContentUris.withAppendedId(TOPICSDETAILS_CONTENT_URI,topicsdetailsid);getContext().getContentResolver().notifyChange(newTopicsDetails,null);dbConnection.setTransactionSuccessful();return newTopicsDetails;case TOPICSPARTICIPANTS_DIR:case TOPICSPARTICIPANTS_ID:final long topicsparticipantsid=dbConnection.insertOrThrow(TopicsParticipantsTable.TABLE_NAME,null,values);final Uri newTopicsParticipants=ContentUris.withAppendedId(TOPICSPARTICIPANTS_CONTENT_URI,topicsparticipantsid);getContext().getContentResolver().notifyChange(newTopicsParticipants,null);dbConnection.setTransactionSuccessful();return newTopicsParticipants;case SUGGESTED_TOPICS_DIR:case SUGGESTED_TOPICS_ID:final long suggested_topicsid=dbConnection.insertOrThrow(Suggested_topicsTable.TABLE_NAME,null,values);final Uri newSuggested_topics=ContentUris.withAppendedId(SUGGESTED_TOPICS_CONTENT_URI,suggested_topicsid);getContext().getContentResolver().notifyChange(newSuggested_topics,null);dbConnection.setTransactionSuccessful();return newSuggested_topics;case CATEGORY_GROUP_PERMISSIONS_DIR:case CATEGORY_GROUP_PERMISSIONS_ID:final long category_group_permissionsid=dbConnection.insertOrThrow(Category_group_permissionsTable.TABLE_NAME,null,values);final Uri newCategory_group_permissions=ContentUris.withAppendedId(CATEGORY_GROUP_PERMISSIONS_CONTENT_URI,category_group_permissionsid);getContext().getContentResolver().notifyChange(newCategory_group_permissions,null);dbConnection.setTransactionSuccessful();return newCategory_group_permissions;case TOPICS_USERS_DIR:case TOPICS_USERS_ID:final long topics_usersid=dbConnection.insertOrThrow(Topics_usersTable.TABLE_NAME,null,values);final Uri newTopics_users=ContentUris.withAppendedId(TOPICS_USERS_CONTENT_URI,topics_usersid);getContext().getContentResolver().notifyChange(newTopics_users,null);dbConnection.setTransactionSuccessful();return newTopics_users;case TOPICS_PROPERTIES_DIR:case TOPICS_PROPERTIES_ID:final long topics_propertiesid=dbConnection.insertOrThrow(Topics_propertiesTable.TABLE_NAME,null,values);final Uri newTopics_properties=ContentUris.withAppendedId(TOPICS_PROPERTIES_CONTENT_URI,topics_propertiesid);getContext().getContentResolver().notifyChange(newTopics_properties,null);dbConnection.setTransactionSuccessful();return newTopics_properties;case TOPIC_POSTERS_DIR:case TOPIC_POSTERS_ID:final long topic_postersid=dbConnection.insertOrThrow(Topic_postersTable.TABLE_NAME,null,values);final Uri newTopic_posters=ContentUris.withAppendedId(TOPIC_POSTERS_CONTENT_URI,topic_postersid);getContext().getContentResolver().notifyChange(newTopic_posters,null);dbConnection.setTransactionSuccessful();return newTopic_posters;default :throw new IllegalArgumentException("Unsupported URI:" + uri);}} catch (Exception e) {Log.e(TAG,"Insert Exception",e);} finally {dbConnection.endTransaction();}return null;}  }
class C{  public static void picture(double x,double y,String s,double w,double h){  Image image=getImage(s);  double xs=scaleX(x);  double ys=scaleY(y);  if (w < 0)   throw new IllegalArgumentException("width is negative: " + w);  if (h < 0)   throw new IllegalArgumentException("height is negative: " + h);  double ws=factorX(w);  double hs=factorY(h);  if (ws < 0 || hs < 0)   throw new IllegalArgumentException("image " + s + " is corrupt");  if (ws <= 1 && hs <= 1)   pixel(x,y); else {    offscreen.drawImage(image,(int)Math.round(xs - ws / 2.0),(int)Math.round(ys - hs / 2.0),(int)Math.round(ws),(int)Math.round(hs),null);  }  draw();}  }
class C{  public NsxClientApi(RestClient restClient){  checkNotNull(restClient,"restClient cannot be null");  this.restClient=restClient;  this.objectMapper=new ObjectMapper();  this.objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public DoubleList(int capacity){  this(new double[capacity],0);}  }
class C{  public SpanQuery sor(String s,String e){  return spanOrQuery(FIELD,s,e);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TextTitle)) {    return false;  }  TextTitle that=(TextTitle)obj;  if (!ObjectUtilities.equal(this.text,that.text)) {    return false;  }  if (!ObjectUtilities.equal(this.font,that.font)) {    return false;  }  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  if (this.textAlignment != that.textAlignment) {    return false;  }  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {    return false;  }  if (this.maximumLinesToDisplay != that.maximumLinesToDisplay) {    return false;  }  if (this.expandToFitSpace != that.expandToFitSpace) {    return false;  }  if (!ObjectUtilities.equal(this.toolTipText,that.toolTipText)) {    return false;  }  if (!ObjectUtilities.equal(this.urlText,that.urlText)) {    return false;  }  return super.equals(obj);}  }
class C{  private static void writeFile(IgniteFileSystem fs,IgfsPath fsPath,File file) throws Exception {  System.out.println();  System.out.println("Copying file to IGFS: " + file);  try (IgfsOutputStream os=fs.create(fsPath,true);FileInputStream fis=new FileInputStream(file)){    byte[] buf=new byte[2048];    int read=fis.read(buf);    while (read != -1) {      os.write(buf,0,read);      read=fis.read(buf);    }  } }  }
class C{  private void zSetParentSelectedDate(LocalDate dateValue){  if (parentDatePicker != null) {    parentDatePicker.setDate(dateValue);  }  if (parentCalendarPanel != null) {    parentCalendarPanel.setSelectedDate(dateValue);  }}  }
class C{  public static LiveVideoContent createLiveVideoContent(String codec,int width,int height){  LiveVideoContent videoContent=new LiveVideoContent("video/" + codec);  videoContent.setWidth(width);  videoContent.setHeight(height);  return videoContent;}  }
class C{  public static ReilGraph translate(final BasicBlock block) throws InternalTranslationException {  Preconditions.checkNotNull(block,"Error: Block argument can't be null");  try {    return ReilGraphConverter.createReilGraph(m_translator.translate(new StandardEnvironment(),block.getNative()));  } catch (  final com.google.security.zynamics.reil.translators.InternalTranslationException e) {    throw new InternalTranslationException(e,InstructionFinders.findInstruction(block,e.getInstruction()));  }}  }
class C{  public static Shape generatePolygon(int sides,int outsideRadius,int insideRadius){  if (sides < 3) {    return new Ellipse2D.Float(0,0,10,10);  }  AffineTransform trans=new AffineTransform();  Polygon poly=new Polygon();  for (int i=0; i < sides; i++) {    trans.rotate(Math.PI * 2 / sides / 2);    Point2D out=trans.transform(new Point2D.Float(0,outsideRadius),null);    poly.addPoint((int)out.getX(),(int)out.getY());    trans.rotate(Math.PI * 2 / sides / 2);    if (insideRadius > 0) {      Point2D in=trans.transform(new Point2D.Float(0,insideRadius),null);      poly.addPoint((int)in.getX(),(int)in.getY());    }  }  return poly;}  }
class C{  private static long longMultiplyPowerTen(long val,int n){  if (val == 0 || n <= 0)   return val;  long[] tab=LONG_TEN_POWERS_TABLE;  long[] bounds=THRESHOLDS_TABLE;  if (n < tab.length && n < bounds.length) {    long tenpower=tab[n];    if (val == 1)     return tenpower;    if (Math.abs(val) <= bounds[n])     return val * tenpower;  }  return INFLATED;}  }
class C{  public BlockCipherMac(BlockCipher cipher){  this(cipher,(cipher.getBlockSize() * 8) / 2);}  }
class C{  public static Object sum(Iterator<Object> self,Object initialValue,Closure closure){  return sum(toList(self),initialValue,closure,false);}  }
class C{  public boolean evaluate(Map record){  Object recVal=record.get(keyField);  return op.evaluate(this.val,recVal);}  }
class C{  public Set<String> keySet(){  return this.map.keySet();}  }
class C{  private void initTable(Database database) throws SQLException {  if (database.findTungstenTable(commitSeqnoTable.getSchema(),commitSeqnoTable.getName()) == null) {    if (logger.isDebugEnabled())     logger.debug("Initializing " + TABLE_NAME + " table");    database.createTable(commitSeqnoTable,false,tableType);  }}  }
class C{  protected boolean updateReplacementString(IDocument document,char trigger,int offset,ImportRewrite impRewrite) throws CoreException, BadLocationException {  if (impRewrite != null && fFullyQualifiedTypeName != null) {    String replacementString=getReplacementString();    String qualifiedType=fFullyQualifiedTypeName;    if (qualifiedType.indexOf('.') != -1 && replacementString.startsWith(qualifiedType) && !replacementString.endsWith(String.valueOf(';'))) {      IType[] types=impRewrite.getCompilationUnit().getTypes();      if (types.length > 0 && types[0].getSourceRange().getOffset() <= offset) {        setReplacementString(impRewrite.addImport(getReplacementString()));        return true;      }    }  }  return false;}  }
class C{  public QueryIndex(){}  }
class C{  public void zoomOut(){  final ScalingControl scaler=new CrossoverScalingControl();  scaler.scale(this,1.0f / 1.1f,getCenter());}  }
class C{  public void enqueueAsyncDelete(EppResource resourceToDelete,String requestingClientId,boolean isSuperuser){  Key<EppResource> resourceKey=Key.create(resourceToDelete);  logger.infofmt("Enqueuing async deletion of %s on behalf of registrar %s.",resourceKey,requestingClientId);  TaskOptions task=TaskOptions.Builder.withMethod(Method.PULL).countdownMillis(asyncDeleteDelay.getMillis()).param(PARAM_RESOURCE_KEY,resourceKey.getString()).param(PARAM_REQUESTING_CLIENT_ID,requestingClientId).param(PARAM_IS_SUPERUSER,Boolean.toString(isSuperuser));  addTaskToQueueWithRetry(asyncDeletePullQueue,task);}  }
class C{  public boolean isAllowNegativePosting(){  Object oo=get_Value(COLUMNNAME_IsAllowNegativePosting);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static Analytics initializeAnalytics() throws Exception {  Credential credential=authorize();  return new Analytics.Builder(HTTP_TRANSPORT,JSON_FACTORY,credential).setApplicationName(APPLICATION_NAME).setHttpRequestInitializer(credential).build();}  }
class C{  public boolean serializeField(String keyName,Field field,Method getter){  if ("class".equals(keyName)) {    return false;  }  if ((field != null && field.isAnnotationPresent(DontSerialize.class)) || (getter != null && getter.isAnnotationPresent(DontSerialize.class))) {    return false;  }  return true;}  }
class C{  private void updateCache(Ignite ignite,int newVal,boolean invoke,boolean rollback,Set<Integer> keys){  final IgniteCache<Integer,Integer> cache=ignite.cache(null);  if (rollback) {    while (true) {      try (Transaction tx=ignite.transactions().txStart(PESSIMISTIC,REPEATABLE_READ)){        updateEntries(cache,newVal,invoke,keys);        tx.rollback();        break;      } catch (      CacheException e) {        if (e.getCause() instanceof ClusterTopologyException) {          ClusterTopologyException topEx=(ClusterTopologyException)e.getCause();          topEx.retryReadyFuture().get();        } else         throw e;      }catch (      ClusterTopologyException e) {        IgniteFuture<?> fut=e.retryReadyFuture();        fut.get();      }catch (      TransactionRollbackException ignore) {      }    }  } else   updateEntries(cache,newVal,invoke,keys);}  }
class C{  private static void validateStorageSizeField(Integer storageSize,ServiceField field,String value){  validateNumber(field.getName(),value);  int min=Math.max(0,field.getValidation().getMin());  if (Float.valueOf(value) < min) {    throw APIException.badRequests.serviceFieldBelowMin(field.getName());  }  boolean hasMaxSize=(storageSize != null) && (storageSize >= 1);  if (hasMaxSize) {    if (Float.valueOf(value) > storageSize) {      throw APIException.badRequests.serviceFieldAboveMax(field.getName());    }  }}  }
class C{  public static Double[] nullToEmpty(final Double[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY;  }  return array;}  }
class C{  protected static float convertDivisor(Element filterElement,float[] kernelMatrix,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_DIVISOR_ATTRIBUTE);  if (s.length() == 0) {    float sum=0;    for (int i=0; i < kernelMatrix.length; ++i) {      sum+=kernelMatrix[i];    }    return (sum == 0) ? 1.0f : sum;  } else {    try {      return SVGUtilities.convertSVGNumber(s);    } catch (    NumberFormatException nfEx) {      throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_DIVISOR_ATTRIBUTE,s,nfEx});    }  }}  }
class C{  public void show(){  view.show();}  }
class C{  private SpyLogFactory(){}  }
class C{  public ResourceImageFactory(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.509 -0500",hash_original_method="C231E33C68F8FEC3C6EDCF993CA1BD7A",hash_generated_method="60AE8F641AB448C2AE7DFA7C6F9FF823") public void disconnected(){  mSrcContext=null;  mSrcHandler=null;  mSrcMessenger=null;  mDstMessenger=null;  mConnection=null;}  }
class C{  public Form(String name,Collection<Field> fields){  this.name=name;  this.fields=fields;}  }
class C{  public void testCharBasedCollisions(){  CharsToNameCanonicalizer sym=CharsToNameCanonicalizer.createRoot();  try {    int firstHash=0;    for (    String str : CHAR_COLLISIONS) {      int hash=sym.calcHash(str);      if (firstHash == 0) {        firstHash=hash;      } else {        assertEquals(firstHash,hash);      }      sym.findSymbol(str.toCharArray(),0,str.length(),hash);    }    fail("Should have thrown exception");  } catch (  IllegalStateException e) {    verifyException(e,"exceeds maximum");    assertEquals(CharsToNameCanonicalizer.MAX_COLL_CHAIN_LENGTH + 1,sym.maxCollisionLength());    assertEquals(CharsToNameCanonicalizer.MAX_COLL_CHAIN_LENGTH + 1,sym.collisionCount());    assertEquals(CharsToNameCanonicalizer.MAX_COLL_CHAIN_LENGTH + 2,sym.size());  }}  }
class C{  protected double calculateSE(boolean[] selectedAttributes,double[] coefficients) throws Exception {  double mse=0;  for (int i=0; i < m_TransformedData.numInstances(); i++) {    double prediction=regressionPrediction(m_TransformedData.instance(i),selectedAttributes,coefficients);    double error=prediction - m_TransformedData.instance(i).classValue();    mse+=error * error;  }  return mse;}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  public static final boolean enableThreadCpuTimeMeasurement(){  if (tbe.isThreadCpuTimeSupported()) {    tbe.setThreadCpuTimeEnabled(true);    return true;  }  return false;}  }
class C{  protected boolean keepOffspring(Chromosome parent1,Chromosome parent2,Chromosome offspring1,Chromosome offspring2){  return replacementFunction.keepOffspring(parent1,parent2,offspring1,offspring2);}  }
class C{  public Boolean isReferencedData(){  return referencedData;}  }
class C{  private synchronized void startProcessing() throws IOException {  if (mPrivateInput == null) {    mPrivateInput=new PrivateInputStream(this);  }  boolean more=true;  if (mGetOperation) {    if (!mOperationDone) {      if (!mGetFinalFlag) {        mReplyHeader.responseCode=ResponseCodes.OBEX_HTTP_CONTINUE;        while ((more) && (mReplyHeader.responseCode == ResponseCodes.OBEX_HTTP_CONTINUE)) {          more=sendRequest(0x03);        }        if (mReplyHeader.responseCode == ResponseCodes.OBEX_HTTP_CONTINUE) {          mParent.sendRequest(0x83,null,mReplyHeader,mPrivateInput);        }        if (mReplyHeader.responseCode != ResponseCodes.OBEX_HTTP_CONTINUE) {          mOperationDone=true;        }      } else {        more=sendRequest(0x83);        if (more) {          throw new IOException("FINAL_GET forced but data did not fit into single packet!");        }        mOperationDone=true;      }    }  } else {    if (!mOperationDone) {      mReplyHeader.responseCode=ResponseCodes.OBEX_HTTP_CONTINUE;      while ((more) && (mReplyHeader.responseCode == ResponseCodes.OBEX_HTTP_CONTINUE)) {        more=sendRequest(0x02);      }    }    if (mReplyHeader.responseCode == ResponseCodes.OBEX_HTTP_CONTINUE) {      mParent.sendRequest(0x82,null,mReplyHeader,mPrivateInput);    }    if (mReplyHeader.responseCode != ResponseCodes.OBEX_HTTP_CONTINUE) {      mOperationDone=true;    }  }}  }
class C{  private boolean isModelUseful(AdaBoostPerformanceMeasures wp){  return (wp.getErrorRate() < 0.5);}  }
class C{  public static <T>RuleRouter<T> of(final Iterable<Rule<T>> rules){  return new RuleRouter<>(ImmutableList.copyOf(rules));}  }
class C{  public T caseAbstractAnnotationList(AbstractAnnotationList object){  return null;}  }
class C{  public boolean isInsert(){  if (insert == null) {    return true;  } else {    return insert;  }}  }
class C{  static public Properties fuse(Map defaults,Map override){  final boolean ignoreConflicts=true;  return fuse(defaults,override,ignoreConflicts);}  }
class C{  @Override public void onMessage(Message message){synchronized (messages) {    messages.add(message);    if (verbose) {      LOG.info("Received: " + message);    }    messages.notifyAll();  }}  }
class C{  protected QuarkJdbc41Factory(int major,int minor){  super(major,minor);}  }
class C{  public NameSpaceSymbTable(){  level=new ArrayList<SymbMap>();  symb=(SymbMap)initialMap.clone();}  }
class C{  @Override public boolean service(RequestBaratine request){  try {    if (!_predicate.test(request)) {      return false;    }    request.route(this);    if (_services.length > 1) {      RequestFilter requestChain=new RequestFilter(request,_services);      requestChain.ok();      return true;    } else {      _service.service((RequestWeb)request);    }  } catch (  Exception e) {    log.log(Level.WARNING,e.toString(),e);  }  return true;}  }
class C{  protected ConnectionEvent(Object source,int type){  super(source);  this.type=type;}  }
class C{  private void populateCompletedActivitiSteps(Job job,List<HistoricActivityInstance> historicActivitiTasks){  List<WorkflowStep> completedWorkflowSteps=new ArrayList<>();  for (  HistoricActivityInstance historicActivityInstance : historicActivitiTasks) {    completedWorkflowSteps.add(new WorkflowStep(historicActivityInstance.getActivityId(),historicActivityInstance.getActivityName(),HerdDateUtils.getXMLGregorianCalendarValue(historicActivityInstance.getStartTime()),HerdDateUtils.getXMLGregorianCalendarValue(historicActivityInstance.getEndTime())));  }  job.setCompletedWorkflowSteps(completedWorkflowSteps);}  }
class C{  public ValueNode receiver(){  return isStatic() ? null : arguments().get(0);}  }
class C{  protected static boolean requiresListCardinalityAsDefault(final LoadGraphWith.GraphData loadGraphWith,final Class<?> test,final String testMethodName){  return loadGraphWith == LoadGraphWith.GraphData.CREW || (test == StarGraphTest.class && testMethodName.equals("shouldAttachWithCreateMethod")) || (test == DetachedGraphTest.class && testMethodName.equals("testAttachableCreateMethod"));}  }
class C{  @SuppressWarnings("unchecked") public ClassParameter(OptionID optionID,Class<?> restrictionClass,boolean optional){  super(optionID,optional);  this.restrictionClass=(Class<C>)restrictionClass;  if (restrictionClass == null) {    LOG.warning("Restriction class 'null' for parameter '" + optionID + "'",new Throwable());  }}  }
class C{  public void updateViewMatrix(){  mDevicePosition=mModelMatCalculator.getTranslation();switch (viewId) {case FIRST_PERSON:    float[] invertModelMat=new float[MATRIX_4X4];  Matrix.setIdentityM(invertModelMat,0);float[] temporaryMatrix=new float[MATRIX_4X4];Matrix.setIdentityM(temporaryMatrix,0);Matrix.setIdentityM(mViewMatrix,0);Matrix.invertM(invertModelMat,0,mModelMatCalculator.getModelMatrix(),0);Matrix.multiplyMM(temporaryMatrix,0,mViewMatrix,0,invertModelMat,0);System.arraycopy(temporaryMatrix,0,mViewMatrix,0,16);break;case THIRD_PERSON:Matrix.setLookAtM(mViewMatrix,0,mDevicePosition[0] + mCameraPosition[0],mCameraPosition[1] + mDevicePosition[1],mCameraPosition[2] + mDevicePosition[2],mDevicePosition[0],mDevicePosition[1],mDevicePosition[2],0f,1f,0f);break;case TOP_DOWN:Matrix.setLookAtM(mViewMatrix,0,mDevicePosition[0] + mCameraPosition[0],mCameraPosition[1],mCameraPosition[2] + mDevicePosition[2],mDevicePosition[0] + mCameraPosition[0],mCameraPosition[1] - 5,mCameraPosition[2] + mDevicePosition[2],0f,0f,-1f);break;default :viewId=THIRD_PERSON;return;}}  }
class C{  public T maxlength(String value){  return attr("maxlength",value);}  }
class C{  public void fillDefaultValues(){  tfNormalize.setText(Double.toString(OjaRule.DEFAULT_NORMALIZATION_FACTOR));  tfLearningRate.setText(Double.toString(OjaRule.DEFAULT_LEARNING_RATE));}  }
class C{  public static void invokeIfExists(Object obj,String methodName){  try {    invoke(obj,methodName);  } catch (  NoSuchMethodException e) {  }}  }
class C{  static void errorWrongClosingTag(String systemID,int lineNr,String expectedName,String wrongName) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"Closing tag does not match opening tag: `" + wrongName + "' != `"+ expectedName+ "'");}  }
class C{  public DTMAxisIterator cloneIterator(){  _isRestartable=false;  try {    final AncestorIterator clone=(AncestorIterator)super.clone();    clone._startNode=_startNode;    return clone;  } catch (  CloneNotSupportedException e) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));  }}  }
class C{  public TransactionBuilder performInitialized(String taskName) throws IOException {  TransactionBuilder builder=mSupport.performInitialized(taskName);  builder.setGattCallback(this);  return builder;}  }
class C{  @Override public IChatMessage sendMessage(final String text) throws RemoteException {  if (TextUtils.isEmpty(text)) {    throw new ServerApiIllegalArgumentException("GroupChat message must not be null or empty!");  }  int messageLength=text.length();  int maxMessageLength=mRcsSettings.getMaxGroupChatMessageLength();  if (messageLength > maxMessageLength) {    throw new ServerApiIllegalArgumentException("chat message length: " + messageLength + " exceeds max group chat message length: "+ maxMessageLength+ "!");  }  if (!isAllowedToSendMessage()) {    throw new ServerApiPermissionDeniedException("Not allowed to send GroupChat message on the connected IMS server!");  }  try {    mImService.removeGroupChatComposingStatus(mChatId);    long timestamp=System.currentTimeMillis();    final ChatMessage msg=ChatUtils.createTextMessage(null,text,timestamp,timestamp);    ChatMessagePersistedStorageAccessor persistedStorage=new ChatMessagePersistedStorageAccessor(mMessagingLog,msg.getMessageId(),msg.getRemoteContact(),text,msg.getMimeType(),mChatId,Direction.OUTGOING);    addOutgoingGroupChatMessage(msg,Content.Status.QUEUED,Content.ReasonCode.UNSPECIFIED);    if (!mChatService.isGroupChatActive(mChatId)) {      mChatService.setGroupChatStateAndReasonCode(mChatId,GroupChat.State.STARTED,GroupChat.ReasonCode.UNSPECIFIED);    }    mImService.tryToDequeueGroupChatMessagesAndGroupFileTransfers(mChatId);    return new ChatMessageImpl(persistedStorage);  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public ViewPropertyAnimator alpha(float value){  animateProperty(ALPHA,value);  return this;}  }
class C{  public Matrix4d assumePerspective(){  properties=PROPERTY_PERSPECTIVE;  return this;}  }
class C{  @Override @Inline protected boolean maintainSideBitmap(){  return !HEADER_MARK_BITS;}  }
class C{  public NumberConverter(boolean allowDecimals){  super();  this.allowDecimals=allowDecimals;}  }
class C{  public static void updateCommit(CommitUpdateCommand cmd,SolrParams params){  if (params == null)   return;  cmd.openSearcher=params.getBool(UpdateParams.OPEN_SEARCHER,cmd.openSearcher);  cmd.waitSearcher=params.getBool(UpdateParams.WAIT_SEARCHER,cmd.waitSearcher);  cmd.softCommit=params.getBool(UpdateParams.SOFT_COMMIT,cmd.softCommit);  cmd.expungeDeletes=params.getBool(UpdateParams.EXPUNGE_DELETES,cmd.expungeDeletes);  cmd.maxOptimizeSegments=params.getInt(UpdateParams.MAX_OPTIMIZE_SEGMENTS,cmd.maxOptimizeSegments);  cmd.prepareCommit=params.getBool(UpdateParams.PREPARE_COMMIT,cmd.prepareCommit);}  }
class C{  public boolean isWriter(){  return opcode == Opcode.PUTFIELD || opcode == Opcode.PUTSTATIC;}  }
class C{  public static final ArrayList readListXml(InputStream in) throws XmlPullParserException, IOException {  XmlPullParser parser=Xml.newPullParser();  parser.setInput(in,null);  return (ArrayList)readValueXml(parser,new String[1]);}  }
class C{  public void grantModerator(Collection<String> nicknames) throws XMPPException {  changeRole(nicknames,"moderator");}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.SWITCH_STATEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:    return appliesOnlyToBlockScopedElements();case N4JSPackage.SWITCH_STATEMENT___GET_DEFAULT_CLAUSE:  return getDefaultClause();case N4JSPackage.SWITCH_STATEMENT___GET_CASE_CLAUSES:return getCaseClauses();}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  protected Object copyObject(Object source){  Object result=null;  try {    SerializedObject so=new SerializedObject(source);    result=so.getObject();  } catch (  Exception ex) {    System.err.println("AlgorithmListPanel: Problem copying object");    System.err.println(ex);  }  return result;}  }
class C{  @SuppressWarnings({"UseOfObsoleteCollectionType"}) private <T>Vector<T> adjustNull(final Vector<T> s){  return s == null ? new Vector<T>() : s;}  }
class C{  public boolean isSecureProcessing(){  return m_isSecureProcessing;}  }
class C{  public TabbedInspector(){  buildTabbedInspector(null,true);}  }
class C{  public SortedListModel(ListModel model){  this(model,SortOrder.ASCENDING,null);}  }
class C{  protected void remove(String key,String value){  SortedSet<String> temp;  if (this.baseParameters.containsKey(key) && value != null) {    temp=new TreeSet<String>(this.baseParameters.get(key));    this.baseParameters.remove(key);    if (temp.contains(value)) {      temp.remove(value);      this.baseParameters.put(key,temp);    }  } else   if (this.baseParameters.containsKey(key) && value == null) {    this.baseParameters.remove(key);  }}  }
class C{  private void clearComposite(){  Control[] children=huiComposite.getChildren();  for (int i=0; i < children.length; i++) {    children[i].dispose();  }  fields=new HashMap<String,IHuiControl>();}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  public GridNioException(Throwable cause){  super(cause);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.144 -0500",hash_original_method="5E3CAA2F54821F9B5D4C289C7A8559A4",hash_generated_method="C078171AD265080010C6C1D09F1486EA") public void copyTo(Bitmap b){  mRS.validate();  validateBitmapFormat(b);  validateBitmapSize(b);  mRS.nAllocationCopyToBitmap(getID(),b);}  }
class C{  static void transition(RobotState state){  lastState=currentState;  currentState=state;  transitioners.tick();  for (  StateListener.Transition tra : transitioners)   tra.transitionState(currentState,lastState);}  }
class C{  Organization1(String name){  id=UUID.randomUUID();  this.name=name;}  }
class C{  private void initialize(GemFireCacheImpl cache,DM dm){  StringBuffer sb=new StringBuffer();  if (cache != null) {    this.cacheStats=cache.getCachePerfStats();    sb.append("Cache \"");    sb.append(cache.getName());    sb.append("\"");  } else {    sb.append("No Cache");  }  sb.append(" in member ");  sb.append(dm.getId());  int pid=OSProcess.getId();  if (pid != 0) {    sb.append(" with pid ");    sb.append(pid);  }  this.description=sb.toString();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.223 -0500",hash_original_method="81B97EFCB1899F0273732CB1D268DB36",hash_generated_method="2DD6EE83234FA7757A7B606FC293F43B") public static boolean isDefined(char c){  return isDefinedImpl(c);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public boolean isTriad(){  return _serverBartender.getServerIndex() < 3;}  }
class C{  private boolean rejectIncomingCall(){  send("Rejecting incoming Call");  ITelephony ts=getTelephonyService();  return ts.endCall();}  }
class C{  static ServerSocket createDataSocket(){  return NetUtils.createServerSocket(0,false);}  }
class C{  @NonNull public Intent build(){  final Intent intent=new Intent(mAction);  intent.putExtra(EXTRA_VISIBLE,mVisible);  intent.putExtra(EXTRA_CONTENT_DESCRIPTION,mContentDescription);  intent.putExtra(EXTRA_LABEL,mLabel);  intent.putExtra(EXTRA_ICON_RESOURCE_ID,mIconResource);  intent.putExtra(EXTRA_ICON_PACKAGE,mIconPackage);  intent.putExtra(EXTRA_ON_CLICK_PENDING_INTENT,mOnClickIntent);  intent.putExtra(EXTRA_ON_CLICK_URI,mOnClickUriString);  intent.putExtra(EXTRA_ON_LONG_CLICK_PENDING_INTENT,mOnLongClickIntent);  intent.putExtra(EXTRA_ON_LONG_CLICK_URI,mOnLongClickUriString);  return intent;}  }
class C{  public byte[] toBytes(){  return cipherSuiteCode;}  }
class C{  public static <T>LazyPSetX<T> fromStreamS(Stream<T> stream){  return new LazyPSetX<T>(Flux.from(ReactiveSeq.fromStream(stream)));}  }
class C{  public PlacesAutocompleteResponse autocomplete(final String input,final AutocompleteResultType type) throws IOException {  final String finalInput=input == null ? "" : input;  final AutocompleteResultType finalType=type == null ? DEFAULT_RESULT_TYPE : type;  Uri.Builder uriBuilder=Uri.parse(PLACES_API_BASE).buildUpon().appendPath(PATH_AUTOCOMPLETE).appendPath(PATH_JSON).appendQueryParameter(PARAMETER_TYPE,finalType.getQueryParam()).appendQueryParameter(PARAMETER_KEY,googleApiKey).appendQueryParameter(PARAMETER_INPUT,finalInput);  if (locationBiasEnabled && currentLocation != null) {    uriBuilder.appendQueryParameter(PARAMETER_LOCATION,LocationUtils.toLatLngString(currentLocation));  }  if (locationBiasEnabled && radiusM != null) {    uriBuilder.appendQueryParameter(PARAMETER_RADIUS,radiusM.toString());  }  if (!locationBiasEnabled) {    uriBuilder.appendQueryParameter(PARAMETER_LOCATION,LocationUtils.toLatLngString(NO_BIAS_LOCATION));    uriBuilder.appendQueryParameter(PARAMETER_RADIUS,NO_BIAS_RADIUS.toString());  }  if (languageCode != null) {    uriBuilder.appendQueryParameter(PARAMETER_LANGUAGE,languageCode);  }  return httpClient.executeAutocompleteRequest(uriBuilder.build());}  }
class C{  public synchronized void removeAll(){  removed.addAll(woven.values());  woven.clear();  pending.clear();}  }
class C{  public void registerDropController(DropController dropController){  dropControllerList.add(dropController);}  }
class C{  void addInserted(BinaryContent.Range aRange){  currentAction.add(aRange);  endAction();}  }
class C{  public void addColumn(Column previousColumn,Column column){  if (column != null) {    if (previousColumn == null) {      columns.add(0,column);    } else {      columns.add(columns.indexOf(previousColumn),column);    }  }}  }
class C{  @Override public void add(final SolrInputDocument solrdoc) throws IOException {  if (this.solr0 != null)   this.solr0.add(solrdoc);  if (this.solr1 != null)   this.solr1.add(solrdoc);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.878 -0400",hash_original_method="97926AE4C4ACB895751E90265D82F8AC",hash_generated_method="DC790AC300F10892844B48C5365EFCFD") public static IOFileFilter ageFileFilter(long cutoff,boolean acceptOlder){  return new AgeFileFilter(cutoff,acceptOlder);}  }
class C{  public void sendNotification(EntryEvent<NotificationKey,Notification> event){  NotificationBroadCasterProxy notifBroadCaster;  try {    notifBroadCaster=proxyFactory.findProxy(event.getKey().getObjectName(),NotificationBroadCasterProxy.class);    if (notifBroadCaster != null) {      notifBroadCaster.sendNotification(event.getNewValue());    }  } catch (  Exception e) {    if (logger.isDebugEnabled()) {      logger.debug(" NOTIFICATION Not Done {}",e.getMessage(),e);    }    logger.warn(e.getMessage(),e);  }}  }
class C{  public boolean transport(){  return this.transport;}  }
class C{  public static <O>IndexedCollection<O> newAutoIndexedCollection(Iterable<Attribute<O,Comparable>> attributes){  IndexedCollection<O> autoIndexedCollection=new ConcurrentIndexedCollection<O>();  for (  Attribute<O,? extends Comparable> attribute : attributes) {    @SuppressWarnings("unchecked") NavigableIndex<? extends Comparable,O> index=NavigableIndex.onAttribute(attribute);    autoIndexedCollection.addIndex(index);  }  return autoIndexedCollection;}  }
class C{  public final void mul(float scalar,Matrix4f m1){  this.m00=m1.m00 * scalar;  this.m01=m1.m01 * scalar;  this.m02=m1.m02 * scalar;  this.m03=m1.m03 * scalar;  this.m10=m1.m10 * scalar;  this.m11=m1.m11 * scalar;  this.m12=m1.m12 * scalar;  this.m13=m1.m13 * scalar;  this.m20=m1.m20 * scalar;  this.m21=m1.m21 * scalar;  this.m22=m1.m22 * scalar;  this.m23=m1.m23 * scalar;  this.m30=m1.m30 * scalar;  this.m31=m1.m31 * scalar;  this.m32=m1.m32 * scalar;  this.m33=m1.m33 * scalar;}  }
class C{  public OneMustBeSetGlobalConstraint(Parameter<?>... params){  parameters=Arrays.asList(params);}  }
class C{  public Builder removeIms(){  this.ims.clear();  return this;}  }
class C{  public void importFrom(DataInputStream in) throws IOException {  seqId=in.readInt();  nRows=info.isRowBlockEnabled() ? in.readInt() : 1;  importFrom(in,primaryKey);  for (int i=0; i < info.colBlocks.length; i++) {    ByteArray cb=cellBlocks[i];    importFrom(in,cb);  }}  }
class C{  protected void waitForClientToFullyConnect(final PoolImpl pool){  System.out.println("[waitForClientToFullyConnect]");  final long failMillis=System.currentTimeMillis() + JOIN_FAIL_MILLIS;  boolean fullyConnected=false;  while (!fullyConnected) {    Wait.pause(100);    fullyConnected=pool.getConnectionCount() >= pool.getMinConnections();    assertTrue("Client failed to create " + pool.getMinConnections() + " connections within "+ JOIN_FAIL_MILLIS+ " milliseconds. Only "+ pool.getConnectionCount()+ " connections were created.",System.currentTimeMillis() < failMillis);  }  System.out.println("[waitForClientToFullyConnect] fullyConnected=" + fullyConnected);}  }
class C{  public static Vec4 fromDoubleArray(double[] array,int offset,int length){  if (array == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (offset < 0) {    String msg=Logging.getMessage("generic.OffsetIsInvalid",offset);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (length < 1) {    String msg=Logging.getMessage("generic.LengthIsInvalid",length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (array.length < offset + length) {    String msg=Logging.getMessage("generic.ArrayInvalidLength",array.length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (length == 1)   return new Vec4(array[offset],0d);  if (length == 2)   return new Vec4(array[offset],array[offset + 1]);  if (length == 3)   return new Vec4(array[offset],array[offset + 1],array[offset + 2]);  return new Vec4(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public boolean usable(SingleIndexScan index){  setColumnsAndOrdering(index);  int nequals=insertLeadingEqualities(index,conditions);  if (index.getIndex().isSpatial())   return spatialUsable(index,nequals);  List<ExpressionNode> indexExpressions=index.getColumns();  if (nequals < indexExpressions.size()) {    ExpressionNode indexExpression=indexExpressions.get(nequals);    if (indexExpression != null) {      boolean foundInequalityCondition=false;      for (      ConditionExpression condition : conditions) {        if (condition instanceof ComparisonCondition) {          ComparisonCondition ccond=(ComparisonCondition)condition;          if (ccond.getOperation() == Comparison.NE)           continue;          ExpressionNode otherComparand=matchingComparand(indexExpression,ccond);          if (otherComparand != null) {            Comparison op=ccond.getOperation();            if (otherComparand == ccond.getLeft())             op=ComparisonCondition.reverseComparison(op);            index.addInequalityCondition(condition,op,otherComparand);            foundInequalityCondition=true;          }        }      }      if (!foundInequalityCondition) {        ColumnRanges range=rangeForIndex(indexExpression);        if (range != null)         index.addRangeCondition(range);      }    }  }  index.setOrderEffectiveness(determineOrderEffectiveness(index));  index.setCovering(determineCovering(index));  if ((index.getOrderEffectiveness() == IndexScan.OrderEffectiveness.NONE) && !index.hasConditions() && !index.isCovering())   return false;  index.setCostEstimate(estimateCost(index));  return true;}  }
class C{  protected void checkColumnIndexes(int[] indexes){  for (int i=indexes.length; --i >= 0; ) {    int index=indexes[i];    if (index < 0 || index >= columns)     checkColumn(index);  }}  }
class C{  public void removeVersionQueryCallback(OneSheeldVersionQueryCallback versionQueryCallback){  if (versionQueryCallback != null && versionQueryCallbacks.contains(versionQueryCallback))   versionQueryCallbacks.remove(versionQueryCallback);}  }
class C{  protected float parsePos(int index,double value){  if (handleValues)   return (float)(chartView.horController.getAxisVerticalPosition() - (((value - minLabelValue) * screenStep) / (labelsValues.get(1) - minLabelValue))); else   return labelsPos.get(index);}  }
class C{  public void resetPolicy(){  mPreferences.putString(PREF_LAST_RESPONSE,Integer.toString(Policy.RETRY));  setRetryUntil(DEFAULT_RETRY_UNTIL);  setMaxRetries(DEFAULT_MAX_RETRIES);  setRetryCount(Long.parseLong(DEFAULT_RETRY_COUNT));  setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);  mPreferences.commit();}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void reinforce(){  if (strength > 0) {    incrementWeight();  } else   if (strength < 0) {    decrementWeight();  } else   if (strength == 0) {    strength=0;  }  getNetwork().fireSynapseChanged(this);}  }
class C{  public boolean saveInfo(String AD_Message,String message){  ValueNamePair lastInfo=new ValueNamePair(AD_Message,message);  Env.getCtx().put(LAST_INFO,lastInfo);  return true;}  }
class C{  public static String[] insertAt(String[] dest,String[] src,int offset){  String[] temp=new String[dest.length + src.length - 1];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset + 1,temp,src.length + offset,dest.length - offset - 1);  return temp;}  }
class C{  protected void finalize(){  if (passwdBytes != null) {    Arrays.fill(passwdBytes,(byte)0x00);    passwdBytes=null;  }}  }
class C{  public final void pushSubContextList(SubContextList iter){  m_axesIteratorStack.push(iter);}  }
class C{  public static String parameter(Configuration cfg,String name,String authority,String dflt){  return cfg.get(String.format(name,authority != null ? authority : ""),dflt);}  }
class C{  public void testOneWordQueryStopWord() throws Exception {  final String input="the";  MockTokenizer wt=new MockTokenizer(MockTokenizer.WHITESPACE,false);  wt.setReader(new StringReader(input));  CommonGramsFilter cgf=new CommonGramsFilter(wt,commonWords);  TokenFilter nsf=new CommonGramsQueryFilter(cgf);  assertTokenStreamContents(nsf,new String[]{"the"});}  }
class C{  public boolean isDestroyed(){  return isDestroyed;}  }
class C{  public HostAddress(InetAddress address){  this.address=address;}  }
class C{  public Object removeAttributeValue(QName id){  throwExceptionIfLocked();  Attribute removed=(state.attributes == null) ? null : state.attributes.remove(id);  return (removed == null) ? null : removed.getValue();}  }
class C{  public boolean remove(EditableOMGraphic editable){  if (editable == null) {    if (Debug.debugging("eomg")) {      Debug.output("EditableOMGraphicList removing null EditableOMGraphic");    }    return false;  }  if (Debug.debugging("eomg")) {    Debug.output("EditableOMGraphicList removing " + editable.getClass().getName());  }  editable.setProjection(null);  editable.detachFromMovingGrabPoint(gpm);  boolean ret=getEditables().remove(editable);  return ret;}  }
class C{  public TIntByteHash(){  super();  no_entry_key=(int)0;  no_entry_value=(byte)0;}  }
class C{  public AccessibleState[] toArray(){  if (states == null) {    return new AccessibleState[0];  } else {    AccessibleState[] stateArray=new AccessibleState[states.size()];    for (int i=0; i < stateArray.length; i++) {      stateArray[i]=(AccessibleState)states.elementAt(i);    }    return stateArray;  }}  }
class C{  public static boolean isInstanceOf(Object bean,Class<?> targetType){  return Introspector.isSubclass(bean.getClass(),targetType);}  }
class C{  public RemoteTransportConfig(DistributionConfig config,int vmKind){  if (config.getBindAddress() == null) {    this.bindAddress=DistributionConfig.DEFAULT_BIND_ADDRESS;  } else {    this.bindAddress=config.getBindAddress();  }  this.vmKind=vmKind;  this.tcpPort=config.getTcpPort();  this.membershipPortRange=getMembershipPortRangeString(config.getMembershipPortRange());  this.sslConfig=new SSLConfig();  String initialHosts=config.getLocators();  if (initialHosts == null) {    initialHosts="";  }  initialHosts=initialHosts.trim();  if (config.getMcastPort() > 0) {    this.mcastId=new DistributionLocatorId(config.getMcastAddress(),config.getMcastPort(),config.getBindAddress(),this.sslConfig);    this.mcastEnabled=true;  } else {    this.mcastEnabled=false;    this.mcastId=null;  }  this.tcpDisabled=config.getDisableTcp();  this.disableAutoReconnect=config.getDisableAutoReconnect();  if (initialHosts.length() == 0) {    this.ids=Collections.EMPTY_SET;    return;  } else {    HashSet locators=new HashSet();    StringTokenizer stringTokenizer=new StringTokenizer(initialHosts,",");    while (stringTokenizer.hasMoreTokens()) {      String locator=stringTokenizer.nextToken();      if (!StringUtils.isEmpty(locator)) {        locators.add(new DistributionLocatorId(locator));      }    }    if (this.mcastEnabled) {      locators.add(this.mcastId);    }    this.ids=Collections.unmodifiableSet(locators);    if (this.mcastEnabled) {      Assert.assertTrue(this.mcastId != null);    }  }}  }
class C{  public void write(final PrintStream stream){  stream.print("time\ttime\tdepartures_all\tarrivals_all\tstuck_all\ten-route_all");  for (  String legMode : this.data.keySet()) {    stream.print("\tdepartures_" + legMode + "\tarrivals_"+ legMode+ "\tstuck_"+ legMode+ "\ten-route_"+ legMode);  }  stream.print("\n");  int allEnRoute=0;  int[] modeEnRoute=new int[this.data.size()];  DataFrame allModesData=getAllModesData();  for (int i=0; i < allModesData.countsDep.length; i++) {    allEnRoute=allEnRoute + allModesData.countsDep[i] - allModesData.countsArr[i] - allModesData.countsStuck[i];    stream.print(Time.writeTime(i * this.binSize) + "\t" + i * this.binSize);    stream.print("\t" + allModesData.countsDep[i] + "\t"+ allModesData.countsArr[i]+ "\t"+ allModesData.countsStuck[i]+ "\t"+ allEnRoute);    int mode=0;    for (    DataFrame dataFrame : this.data.values()) {      modeEnRoute[mode]=modeEnRoute[mode] + dataFrame.countsDep[i] - dataFrame.countsArr[i] - dataFrame.countsStuck[i];      stream.print("\t" + dataFrame.countsDep[i] + "\t"+ dataFrame.countsArr[i]+ "\t"+ dataFrame.countsStuck[i]+ "\t"+ modeEnRoute[mode]);      mode++;    }    stream.print("\n");  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>Predicate<T> alwaysTrue(){  return (Predicate<T>)ALWAYS_TRUE;}  }
class C{  public <A,R>R accept(PLVisitor<A,R> plv,A arg){  R result=null;  if (isPropositionSymbol()) {    result=plv.visitPropositionSymbol((PropositionSymbol)this,arg);  } else   if (isUnarySentence()) {    result=plv.visitUnarySentence((ComplexSentence)this,arg);  } else   if (isBinarySentence()) {    result=plv.visitBinarySentence((ComplexSentence)this,arg);  }  return result;}  }
class C{  public synchronized void sort(int columnIndex){  if (m_Model != null)   m_Model.sort(columnIndex);}  }
class C{  @Override public void execute(JsonApiDocument jsonApiDocument,PersistentResource resource,Optional<MultivaluedMap<String,String>> queryParams){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void partialWakeUpLock(Context context){  PowerManager pm=(PowerManager)context.getApplicationContext().getSystemService(Context.POWER_SERVICE);  PowerManager.WakeLock wakeLock=pm.newWakeLock((PowerManager.SCREEN_BRIGHT_WAKE_LOCK | PowerManager.FULL_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP),"TAG");  wakeLock.acquire();}  }
class C{  public static String htmlEntites(String str){  return str.replace("<","&lt;").replace(">","&gt;");}  }
class C{  public TableColumn(){  this(0);}  }
class C{  synchronized protected void timeout(){  if (log.isDebugEnabled()) {    log.debug("timeout fires in state " + progState);  }  if (progState != 0) {    if (log.isDebugEnabled()) {      log.debug("timeout while programming");    }    progState=0;    if (progState == 2 && !mServiceMode) {      notifyProgListenerEnd(_slots[124].cvval(),jmri.ProgListener.NoAck);    } else {      notifyProgListenerEnd(_slots[124].cvval(),jmri.ProgListener.FailedTimeout);    }  }}  }
class C{  public void updateRaster(int x1,int y1,Image image,int image_width,int image_height,LinkProperties properties,int graphicUpdateMask) throws IOException, InterruptedException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkRaster.write(x1,y1,image,image_width,image_height,properties,link.dos);}  }
class C{  private static void checkBinarySearch(List<Integer> l,int i){  try {    equal(i,Collections.binarySearch(l,l.get(i)));  } catch (  Throwable t) {    unexpected(t);  }}  }
class C{  private void attemptAuthentication(boolean getPasswdFromSharedState) throws LoginException {  getUsernamePassword(getPasswdFromSharedState);  if (password == null || password.length == 0) {    throw (LoginException)new FailedLoginException("No password was supplied");  }  String dn="";  if (authFirst || authOnly) {    String id=replaceUsernameToken(identityMatcher,authcIdentity);    ldapEnvironment.put(Context.SECURITY_CREDENTIALS,password);    ldapEnvironment.put(Context.SECURITY_PRINCIPAL,id);    if (debug) {      System.out.println("\t\t[LdapLoginModule] " + "attempting to authenticate user: " + username);    }    try {      ctx=new InitialLdapContext(ldapEnvironment,null);    } catch (    NamingException e) {      throw (LoginException)new FailedLoginException("Cannot bind to LDAP server").initCause(e);    }    if (userFilter != null) {      dn=findUserDN(ctx);    } else {      dn=id;    }  } else {    try {      ctx=new InitialLdapContext(ldapEnvironment,null);    } catch (    NamingException e) {      throw (LoginException)new FailedLoginException("Cannot connect to LDAP server").initCause(e);    }    dn=findUserDN(ctx);    try {      ctx.addToEnvironment(Context.SECURITY_AUTHENTICATION,"simple");      ctx.addToEnvironment(Context.SECURITY_PRINCIPAL,dn);      ctx.addToEnvironment(Context.SECURITY_CREDENTIALS,password);      if (debug) {        System.out.println("\t\t[LdapLoginModule] " + "attempting to authenticate user: " + username);      }      ctx.reconnect(null);    } catch (    NamingException e) {      throw (LoginException)new FailedLoginException("Cannot bind to LDAP server").initCause(e);    }  }  if (storePass && !sharedState.containsKey(USERNAME_KEY) && !sharedState.containsKey(PASSWORD_KEY)) {    sharedState.put(USERNAME_KEY,username);    sharedState.put(PASSWORD_KEY,password);  }  userPrincipal=new UserPrincipal(username);  if (authzIdentity != null) {    authzPrincipal=new UserPrincipal(authzIdentity);  }  try {    ldapPrincipal=new LdapPrincipal(dn);  } catch (  InvalidNameException e) {    if (debug) {      System.out.println("\t\t[LdapLoginModule] " + "cannot create LdapPrincipal: bad DN");    }    throw (LoginException)new FailedLoginException("Cannot create LdapPrincipal").initCause(e);  }}  }
class C{  public TransitionCrossfade createTCrossFade(String transitionId,MediaItem afterMediaItem,MediaItem beforeMediaItem,long durationMs,int behavior){  Log.i("TransitionCrossfade Details === ","Transid ID = " + transitionId + " Duration= "+ durationMs+ " Behaviour "+ behavior);  TransitionCrossfade transitionCF=null;  transitionCF=new TransitionCrossfade(transitionId,afterMediaItem,beforeMediaItem,durationMs,behavior);  return transitionCF;}  }
class C{  public void assertThrows(java.lang.Class<?> exceptionType,Class target){  assertThrows(exceptionType,target,stdCM,"-1");}  }
class C{  public ODGBezierFigure(){  this(false);}  }
class C{  public static Bitmap createThumbnailBitmap(Bitmap bitmap,Context context){  int sIconWidth=-1;  int sIconHeight=-1;  final Resources resources=context.getResources();  sIconWidth=sIconHeight=(int)resources.getDimension(android.R.dimen.app_icon_size);  final Paint sPaint=new Paint();  final Rect sBounds=new Rect();  final Rect sOldBounds=new Rect();  Canvas sCanvas=new Canvas();  int width=sIconWidth;  int height=sIconHeight;  sCanvas.setDrawFilter(new PaintFlagsDrawFilter(Paint.DITHER_FLAG,Paint.FILTER_BITMAP_FLAG));  final int bitmapWidth=bitmap.getWidth();  final int bitmapHeight=bitmap.getHeight();  if (width > 0 && height > 0) {    if (width < bitmapWidth || height < bitmapHeight) {      final float ratio=(float)bitmapWidth / bitmapHeight;      if (bitmapWidth > bitmapHeight) {        height=(int)(width / ratio);      } else       if (bitmapHeight > bitmapWidth) {        width=(int)(height * ratio);      }      final Config c=(width == sIconWidth && height == sIconHeight) ? bitmap.getConfig() : Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(sIconWidth,sIconHeight,c);      final Canvas canvas=sCanvas;      final Paint paint=sPaint;      canvas.setBitmap(thumb);      paint.setDither(false);      paint.setFilterBitmap(true);      sBounds.set((sIconWidth - width) / 2,(sIconHeight - height) / 2,width,height);      sOldBounds.set(0,0,bitmapWidth,bitmapHeight);      canvas.drawBitmap(bitmap,sOldBounds,sBounds,paint);      return thumb;    } else     if (bitmapWidth < width || bitmapHeight < height) {      final Config c=Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(sIconWidth,sIconHeight,c);      final Canvas canvas=sCanvas;      final Paint paint=sPaint;      canvas.setBitmap(thumb);      paint.setDither(false);      paint.setFilterBitmap(true);      canvas.drawBitmap(bitmap,(sIconWidth - bitmapWidth) / 2,(sIconHeight - bitmapHeight) / 2,paint);      return thumb;    }  }  return bitmap;}  }
class C{  public void assertion(boolean b,String msg){  if (!b) {    String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg});    throw new RuntimeException(fMsg);  }}  }
class C{  public RadixTreeNode(){  key="";  childern=new ArrayList<RadixTreeNode<T>>();  real=false;}  }
class C{  public void actionPerformed(ActionEvent ae){  if (ae.getSource().equals(button)) {    if (!timer.isRunning()) {      animStartTime=System.nanoTime() / 1000000;      button.setText("Stop Animation");      timer.start();    } else {      timer.stop();      button.setText("Start Animation");      translateY=0;      repaint();    }  } else {    long currentTime=System.nanoTime() / 1000000;    long totalTime=currentTime - animStartTime;    if (totalTime > animationDuration) {      animStartTime=currentTime;    }    float fraction=(float)totalTime / animationDuration;    fraction=Math.min(1.0f,fraction);    if (fraction < .5f) {      translateY=(int)(MAX_Y * (2 * fraction));    } else {      translateY=(int)(MAX_Y * (2 * (1 - fraction)));    }    repaint();  }}  }
class C{  private static NodePair connectFunctions(final View view,final ViewNode startNode,final ViewNode targetNode,final Collection<FunctionBlock> passedFunctions,final Map<Function,ViewNode> entryNodes,final ArrayListMultimap<Function,ViewNode> exitNodes,final Map<ViewNode,Function> functionMap){  ViewNode realStartNode=startNode;  ViewNode realTargetNode=targetNode;  final Set<ViewNode> handled=new HashSet<ViewNode>();  while (true) {    boolean splitNode=false;    start:     for (    final ViewNode node : view.getGraph().getNodes()) {      if (handled.contains(node)) {        continue;      }      if (!(node instanceof CodeNode)) {        continue;      }      final CodeNode cnode=(CodeNode)node;      for (      final Instruction instruction : cnode.getInstructions()) {        for (        final FunctionBlock functionBlock : passedFunctions) {          final Function function=functionBlock.getFunction();          if (callsFunction(instruction,function)) {            final NodePair result=splitBlock(view,functionMap.get(cnode),cnode,instruction);            if (realStartNode == cnode) {              realStartNode=result.getFirst();            }            if (realTargetNode == cnode) {              realTargetNode=result.getFirst();            }            for (            final FunctionBlock functionBlock2 : passedFunctions) {              final Function function2=functionBlock2.getFunction();              if (entryNodes.get(function2) == cnode) {                entryNodes.put(function2,result.getFirst());              }              if (exitNodes.get(function2).contains(cnode)) {                if (result.getSecond() != null) {                  exitNodes.remove(function2,cnode);                  exitNodes.put(function2,result.getSecond());                }              }            }            if (functionMap.containsKey(cnode)) {              final Function f=functionMap.get(cnode);              functionMap.remove(cnode);              functionMap.put(result.getFirst(),f);            }            handled.add(result.getFirst());            if (result.getSecond() == null) {              for (              final ViewEdge edge : node.getOutgoingEdges()) {                for (                final ViewNode currentExitNode : exitNodes.get(function)) {                  final ViewEdge leaveEdge=view.createEdge(currentExitNode,edge.getTarget(),EdgeType.LeaveInlinedFunction);                  leaveEdge.setColor(DEFAULT_INLINING_EDGE_COLOR);                }                view.deleteEdge(edge);              }              final ViewEdge enterEdge=view.createEdge(result.getFirst(),entryNodes.get(function),EdgeType.EnterInlinedFunction);              enterEdge.setColor(DEFAULT_INLINING_EDGE_COLOR);              handled.add(cnode);            } else {              final ViewEdge enterEdge=view.createEdge(result.getFirst(),entryNodes.get(function),EdgeType.EnterInlinedFunction);              enterEdge.setColor(DEFAULT_INLINING_EDGE_COLOR);              for (              final ViewNode currentExitNode : exitNodes.get(function)) {                final ViewEdge leaveEdge=view.createEdge(currentExitNode,result.getSecond(),EdgeType.LeaveInlinedFunction);                leaveEdge.setColor(DEFAULT_INLINING_EDGE_COLOR);              }            }            splitNode=true;            break start;          }        }      }      handled.add(cnode);    }    if (!splitNode) {      break;    }  }  return new NodePair(realStartNode,realTargetNode);}  }
class C{  final public boolean isQuads(){  return quads;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.513 -0500",hash_original_method="94A3484B43A305FA2D2533E09119590B",hash_generated_method="7EF47E4FA708A04D233927A5180BBD87") int generate(float precision){  int movement=0;  nonAccelMovement=0;  do {    final int dir=position >= 0 ? 1 : -1;switch (step) {case 0:      if (absPosition < precision) {        return movement;      }    movement+=dir;  nonAccelMovement+=dir;step=1;break;case 1:if (absPosition < 2) {return movement;}movement+=dir;nonAccelMovement+=dir;position+=dir > 0 ? -2 : 2;absPosition=Math.abs(position);step=2;break;default :if (absPosition < 1) {return movement;}movement+=dir;position+=dir >= 0 ? -1 : 1;absPosition=Math.abs(position);float acc=acceleration;acc*=1.1f;acceleration=acc < MAX_ACCELERATION ? acc : acceleration;break;}} while (true);}  }
class C{  public JDTRefactoringDescriptorComment(final String project,final Object object,final String header){  Assert.isNotNull(object);  Assert.isNotNull(header);  fProject=project;  fHeader=header;  initializeInferredSettings(object);}  }
class C{  public boolean close(){  if (getShell() == null || getShell().isDisposed()) {    return true;  }  saveDialogBounds(getShell());  initializeWidgetState();  if (parentDeactivateListener != null) {    getShell().getParent().removeListener(SWT.Deactivate,parentDeactivateListener);    parentDeactivateListener=null;  }  return super.close();}  }
class C{  public String flushAll(){  checkIsInMulti();  client.flushAll();  return client.getStatusCodeReply();}  }
class C{  public void buildStub(){  FloatArray2D img=l[0];  l=new FloatArray2D[2];  l[0]=img;  l[1]=Filter.convolveSeparable(l[0],KERNEL_DIFF[STEPS],KERNEL_DIFF[STEPS]);  state=State.STUB;}  }
class C{  public void stopMonitorServices(Activity activity){  mClientsToNotify.remove(activity);}  }
class C{  public AlternativeName(boolean which,byte[] encoding) throws IOException {  super(encoding);  this.which=which;  this.alternativeNames=(GeneralNames)GeneralNames.ASN1.decode(encoding);}  }
class C{  synchronized void stop(){  if (DEBUG)   Log.v(TAG,"stop:mStatredCount=" + mStatredCount);  mStatredCount--;  if ((mEncoderCount > 0) && (mStatredCount <= 0)) {    mMediaMuxer.stop();    mMediaMuxer.release();    mIsStarted=false;    if (DEBUG)     Log.v(TAG,"MediaMuxer stopped:");  }}  }
