class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  float moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  if (left >= right || top >= bottom) {    throw NotFoundException.getNotFoundInstance();  }  if (bottom - top != right - left) {    right=left + (bottom - top);  }  int matrixWidth=Math.round((right - left + 1) / moduleSize);  int matrixHeight=Math.round((bottom - top + 1) / moduleSize);  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  if (matrixHeight != matrixWidth) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=(int)(moduleSize / 2.0f);  top+=nudge;  left+=nudge;  int nudgedTooFarRight=left + (int)((matrixWidth - 1) * moduleSize) - right;  if (nudgedTooFarRight > 0) {    if (nudgedTooFarRight > nudge) {      throw NotFoundException.getNotFoundInstance();    }    left-=nudgedTooFarRight;  }  int nudgedTooFarDown=top + (int)((matrixHeight - 1) * moduleSize) - bottom;  if (nudgedTooFarDown > 0) {    if (nudgedTooFarDown > nudge) {      throw NotFoundException.getNotFoundInstance();    }    top-=nudgedTooFarDown;  }  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + (int)(y * moduleSize);    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + (int)(x * moduleSize),iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public AdjustmentEvent(Adjustable source,int id,int type,int value){  this(source,id,type,value,false);}  }
class C{  public void layoutContainer(Container target){synchronized (target.getTreeLock()) {    Insets insets=target.getInsets();    int top=insets.top;    int bottom=target.height - insets.bottom;    int left=insets.left;    int right=target.width - insets.right;    boolean ltr=target.getComponentOrientation().isLeftToRight();    Component c=null;    if ((c=getChild(NORTH,ltr)) != null) {      c.setSize(right - left,c.height);      Dimension d=c.getPreferredSize();      c.setBounds(left,top,right - left,d.height);      top+=d.height + vgap;    }    if ((c=getChild(SOUTH,ltr)) != null) {      c.setSize(right - left,c.height);      Dimension d=c.getPreferredSize();      c.setBounds(left,bottom - d.height,right - left,d.height);      bottom-=d.height + vgap;    }    if ((c=getChild(EAST,ltr)) != null) {      c.setSize(c.width,bottom - top);      Dimension d=c.getPreferredSize();      c.setBounds(right - d.width,top,d.width,bottom - top);      right-=d.width + hgap;    }    if ((c=getChild(WEST,ltr)) != null) {      c.setSize(c.width,bottom - top);      Dimension d=c.getPreferredSize();      c.setBounds(left,top,d.width,bottom - top);      left+=d.width + hgap;    }    if ((c=getChild(CENTER,ltr)) != null) {      c.setBounds(left,top,right - left,bottom - top);    }  }}  }
class C{  public SubSchemaModificationWrapper(){  newSubSchemas=new HashMap<String,NewSubSchemaWrapper>();}  }
class C{  public void testCertificateFactory16(){  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  MyCertificate ms=createMC();  List<Certificate> list=new Vector<Certificate>();  list.add(ms);  for (int i=0; i < certFs.length; i++) {    try {      certFs[i].generateCertPath(list);      fail("CertificateException must be thrown");    } catch (    CertificateException e) {    }  }}  }
class C{  public OutputProperties(String method){  m_properties=new Properties(OutputPropertiesFactory.getDefaultMethodProperties(method));}  }
class C{  public void removeAll(){  if (popupMenu != null)   popupMenu.removeAll();}  }
class C{  public XMLFilter newXMLFilter(Templates templates) throws TransformerConfigurationException {  try {    return new TrAXFilter(templates);  } catch (  TransformerConfigurationException ex) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(ex);        return null;      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    }    throw ex;  }}  }
class C{  public AddMsg(CSN csn,DN dn,String entryUUID,String parentEntryUUID,Map<ObjectClass,String> objectClasses,Map<AttributeType,List<Attribute>> userAttributes,Map<AttributeType,List<Attribute>> operationalAttributes){  super(csn,entryUUID,dn);  this.parentEntryUUID=parentEntryUUID;  this.encodedAttributes=encodeAttributes(objectClasses,userAttributes,operationalAttributes);}  }
class C{  public boolean equals(FontRenderContext rhs){  if (this == rhs) {    return true;  }  if (rhs == null) {    return false;  }  if (!rhs.defaulting && !defaulting) {    if (rhs.aaHintValue == aaHintValue && rhs.fmHintValue == fmHintValue) {      return tx == null ? rhs.tx == null : tx.equals(rhs.tx);    }    return false;  } else {    return rhs.getAntiAliasingHint() == getAntiAliasingHint() && rhs.getFractionalMetricsHint() == getFractionalMetricsHint() && rhs.getTransform().equals(getTransform());  }}  }
class C{  public static String parseSyntaxOID(String definition) throws DirectoryException {  return parseOID(definition,ERR_PARSING_LDAP_SYNTAX_OID);}  }
class C{  public void test_commonTest_01(){  SSLContextSpiImpl ssl=new SSLContextSpiImpl();  try {    SSLSessionContext slsc=ssl.engineGetClientSessionContext();    fail("RuntimeException wasn't thrown");  } catch (  RuntimeException re) {    String str=re.getMessage();    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }  try {    SSLSessionContext slsc=ssl.engineGetServerSessionContext();    fail("RuntimeException wasn't thrown");  } catch (  RuntimeException re) {    String str=re.getMessage();    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }  try {    SSLServerSocketFactory sssf=ssl.engineGetServerSocketFactory();    fail("RuntimeException wasn't thrown");  } catch (  RuntimeException re) {    String str=re.getMessage();    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }  try {    SSLSocketFactory ssf=ssl.engineGetSocketFactory();    fail("RuntimeException wasn't thrown");  } catch (  RuntimeException re) {    String str=re.getMessage();    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }}  }
class C{  public static boolean isGenericHTMLClient(String clientType){  String type=getProperty(clientType,"genericHTML");  return type == null || "true".equals(type);}  }
class C{  public final void update(byte[] data,int off,int len) throws SignatureException {  if (state == SIGN || state == VERIFY) {    if (data == null) {      throw new IllegalArgumentException("data is null");    }    if (off < 0 || len < 0) {      throw new IllegalArgumentException("off or len is less than 0");    }    if (data.length - off < len) {      throw new IllegalArgumentException("data too small for specified offset and length");    }    engineUpdate(data,off,len);  } else {    throw new SignatureException("object not initialized for " + "signature or verification");  }}  }
class C{  private boolean hasPixels(Image image){  return image != null && (image.getHeight(imageObserver) > 0) && (image.getWidth(imageObserver) > 0);}  }
class C{  private static String makeFieldValue(Object value){  if (value == null)   return "(null)";  Class<?> valueClass=value.getClass();  try {    valueClass.getConstructor(String.class);  } catch (  NoSuchMethodException e) {    final String msg="Class " + valueClass + " does not have a public "+ "constructor with a single string arg";    final RuntimeException iae=new IllegalArgumentException(msg);    throw new RuntimeOperationsException(iae,"Cannot make XML descriptor");  }catch (  SecurityException e) {  }  final String quotedValueString=quote(value.toString());  return "(" + valueClass.getName() + "/"+ quotedValueString+ ")";}  }
class C{  public ListSelectionListener createListSelectionListener(JFileChooser fc){  return super.createListSelectionListener(fc);}  }
class C{  private void buildArguments(StringBuilder sb,List<Expression> args,int indentation) throws SyntaxException {  boolean isFirst=true;  for (  Expression e : args) {    if (isFirst) {      isFirst=false;    } else {      sb.append(", ");    }    buildExpression(sb,e,indentation);  }}  }
class C{  public void disableLogging(){}  }
class C{  public void requestPasswordExpirationWarnedTime(){  operations.add(PasswordPolicyStateOperationType.GET_PASSWORD_EXPIRATION_WARNED_TIME);}  }
class C{  public InvalidPostLogoutRedirectUri(){  super(400,"invalid_post_logout_redirect_uris","One or more post_logout_redirect_uri values are invalid.");}  }
class C{  public static String URLDecode(byte[] bytes,String enc,boolean isQuery){  if (bytes == null)   return null;  int len=bytes.length;  int ix=0;  int ox=0;  while (ix < len) {    byte b=bytes[ix++];    if (b == '+' && isQuery) {      b=(byte)' ';    } else     if (b == '%') {      if (ix + 2 > len) {        throw new IllegalArgumentException(sm.getString("uDecoder.urlDecode.missingDigit"));      }      b=(byte)((convertHexDigit(bytes[ix++]) << 4) + convertHexDigit(bytes[ix++]));    }    bytes[ox++]=b;  }  if (enc != null) {    try {      return new String(bytes,0,ox,B2CConverter.getCharset(enc));    } catch (    UnsupportedEncodingException uee) {      if (log.isDebugEnabled()) {        log.debug(sm.getString("uDecoder.urlDecode.uee",enc),uee);      }      return null;    }  }  return new String(bytes,0,ox);}  }
class C{  public ASN1Primitive toASN1Primitive(){  return seq;}  }
class C{  public KeyInfoConfirmationData createKeyInfoConfirmationData(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.KEYINFO_CONFIRMATION_DATA,elem);  if (obj == null) {    return new KeyInfoConfirmationDataImpl(elem);  } else {    return (KeyInfoConfirmationData)obj;  }}  }
class C{  public ClientDetectionDefaultImpl(){}  }
class C{  public StandardContext(){  super();  pipeline.setBasic(new StandardContextValve());  broadcaster=new NotificationBroadcasterSupport();  if (!Globals.STRICT_SERVLET_COMPLIANCE) {    resourceOnlyServlets.add("jsp");  }}  }
class C{  public boolean isAuto(){  return this.auto;}  }
class C{  protected static final int findClosest(ByteChunk name,ByteEntry[] array,int len){  int a=0;  int b=len - 1;  if (b == -1) {    return -1;  }  if (compare(name,array[0].name) < 0) {    return -1;  }  if (b == 0) {    return 0;  }  int i=0;  while (true) {    i=(b + a) >>> 1;    int result=compare(name,array[i].name);    if (result == 1) {      a=i;    } else     if (result == 0) {      return i;    } else {      b=i;    }    if ((b - a) == 1) {      int result2=compare(name,array[b].name);      if (result2 < 0) {        return a;      } else {        return b;      }    }  }}  }
class C{  public static String postRequest(URL url,String postData,String encoding,String contentType,boolean compress,int readTimeout,int socketTimeout){  HttpURLConnection connection=null;  OutputStream outputStream=null;  try {    connection=(HttpURLConnection)url.openConnection();    connection.setRequestMethod("POST");    if (contentType != null) {      connection.setRequestProperty("Content-Type",contentType);    }    if (compress) {      connection.setRequestProperty("Content-Encoding","gzip");    }    connection.setConnectTimeout(socketTimeout);    connection.setReadTimeout(readTimeout);    connection.setDoOutput(true);    connection.connect();    if (postData != null) {      outputStream=connection.getOutputStream();      if (compress) {        outputStream=new GZIPOutputStream(outputStream);      }      if (encoding != null) {        IOUtils.write(postData,outputStream,encoding);      } else {        IOUtils.write(postData,outputStream);      }      if (compress) {        ((GZIPOutputStream)outputStream).finish();      } else {        outputStream.flush();      }    }    return IOUtils.toString(connection.getInputStream(),encoding);  } catch (  Exception ex) {    LOG.error("Error posting request to {}, post data length={}\r\n",url,StringUtils.length(postData),ex);    return null;  } finally {    IOUtils.closeQuietly(outputStream);    if (connection != null) {      connection.disconnect();    }  }}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.InquiryElement createInquiryElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.InquiryElementImpl();}  }
class C{  public void printlnError(String str){  buff.append(str).append("\n");}  }
class C{  public IccBased(InputStream iccStream,float[] value){  this(new PdfCieBasedCs.IccBased(iccStream),value);}  }
class C{  public void release(FileLock lock) throws IOException {  checkOpen();  StructFlock flock=new StructFlock();  flock.l_type=(short)F_UNLCK;  flock.l_whence=(short)SEEK_SET;  flock.l_start=lock.position();  flock.l_len=translateLockLength(lock.size());  try {    Libcore.os.fcntlFlock(fd,F_SETLKW64,flock);  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }  removeLock(lock);}  }
class C{  public SAXNotSupportedException(){}  }
class C{  public void columnMarginChanged(ChangeEvent e){  resizeAndRepaint();}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws IOException, SAXException {  return null;}  }
class C{  public void initialize(Map configParams) throws PolicyException {  if (DEBUG.messageEnabled()) {    DEBUG.message("IDRepoResponseProvider.initialize():" + "entering");  }  if (configParams == null) {    throw (new PolicyException(ResBundleUtils.rbName,"idrepo_initialization_failed",null,null));  }  Set orgNameSet=(Set)configParams.get(PolicyManager.ORGANIZATION_NAME);  if ((orgNameSet != null) && (!orgNameSet.isEmpty())) {    Iterator items=orgNameSet.iterator();    orgName=(String)items.next();  }  validDynamicAttrNames=(Set)configParams.get(PolicyConfig.SELECTED_DYNAMIC_ATTRIBUTES);  if (validDynamicAttrNames == null) {    validDynamicAttrNames=Collections.EMPTY_SET;  }  initialized=true;  if (DEBUG.messageEnabled()) {    DEBUG.message("IDRepoResponseProvider.initialize():" + "initialized with:" + "orgName=" + orgName + ",validDynamicAttrNames="+ validDynamicAttrNames);  }}  }
class C{  @AfterClass public void classCleanUp() throws Exception {  logger.error(LocalizableMessage.raw(" ##### Calling ReplicationTestCase.classCleanUp ##### "));  removeReplicationServerDB();  cleanConfigEntries();  cleanRealEntries();  TestCaseUtils.initializeTestBackend(true);  if (callParanoiaCheck) {    paranoiaCheck();  }}  }
class C{  public boolean update(ServerState serverState){  if (serverState == null) {    return false;  }  boolean updated=false;  for (  CSN csn : serverState.serverIdToCSN.values()) {    if (update(csn)) {      updated=true;    }  }  return updated;}  }
class C{  public ByteOrderMark(String charsetName,int... bytes){  if (charsetName == null || charsetName.length() == 0) {    throw new IllegalArgumentException("No charsetName specified");  }  if (bytes == null || bytes.length == 0) {    throw new IllegalArgumentException("No bytes specified");  }  this.charsetName=charsetName;  this.bytes=new int[bytes.length];  System.arraycopy(bytes,0,this.bytes,0,bytes.length);}  }
class C{  private float findEdgeSpan(View v,int axis,int fp,int p0,int p1){  int len=p1 - p0;  if (len <= 1) {    return v.getMinimumSpan(axis);  } else {    int mid=p0 + len / 2;    boolean startEdge=mid > fp;    View f=startEdge ? v.createFragment(fp,mid) : v.createFragment(mid,fp);    boolean breakable=f.getBreakWeight(axis,0,f.getMaximumSpan(axis)) > View.BadBreakWeight;    if (breakable == startEdge) {      p1=mid;    } else {      p0=mid;    }    return findEdgeSpan(f,axis,fp,p0,p1);  }}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public final boolean readBoolean() throws IOException {  int temp=this.read();  if (temp < 0) {    throw new EOFException();  }  return temp != 0;}  }
class C{  protected void finalize(){synchronized (debugMap) {    debugMap.remove(debugName);  }synchronized (this) {    if (debugFile == null) {      return;    }    debugLevel=Debug.OFF;    debugFile.flush();    debugFile.close();    debugFile=null;  }}  }
class C{  public MBeanFeatureInfo(String name,String description,Descriptor descriptor){  this.name=name;  this.description=description;  this.descriptor=descriptor;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String agentName=getStringOptionValue(IArgument.AGENT_NAME);  String[] params={realm,agentName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_LIST_AGENT_MEMBERSHIP",params);    AMIdentity amid=new AMIdentity(adminSSOToken,agentName,IdType.AGENT,realm,null);    if (!amid.isExists()) {      String[] args={realm,agentName,"agent did not exist"};      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AGENT_MEMBERSHIP",args);      Object[] p={agentName};      String msg=MessageFormat.format(getResourceString("list-agent-membership-agent-not-found"),p);      throw new CLIException(msg,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    Set groups=amid.getMemberships(IdType.AGENTGROUP);    if ((groups != null) && !groups.isEmpty()) {      AMIdentity a=(AMIdentity)groups.iterator().next();      Object[] obj={a.getName(),a.getUniversalId()};      outputWriter.printlnMessage(MessageFormat.format(getResourceString("list-agent-membership-succeeded"),obj));    } else {      outputWriter.printlnMessage(getResourceString("list-agent-membership-no-members"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_LIST_AGENT_MEMBERSHIP",params);  } catch (  IdRepoException e) {    String[] args={realm,agentName,e.getMessage()};    debugError("ListAgentMembership.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AGENT_MEMBERSHIP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,agentName,e.getMessage()};    debugError("ListAgentMembership.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_LIST_AGENT_MEMBERSHIP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public int invokeConfigureServer(String[] args) throws ApplicationException {  return ConfigureDS.configMain(args,System.out,System.err);}  }
class C{  private byte[] packRules(){  byte[] rules=new byte[6];  rules[0]=(byte)startDay;  rules[1]=(byte)startDayOfWeek;  rules[2]=(byte)endDay;  rules[3]=(byte)endDayOfWeek;  rules[4]=(byte)startTimeMode;  rules[5]=(byte)endTimeMode;  return rules;}  }
class C{  public boolean isCommitted(){  return response != null && this.response.isCommitted();}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  forwardToAuthConfigViewBean();}  }
class C{  protected final void registerRelationDefinition(RelationDefinition<?,?> d){  String relName=d.getName();  relationDefinitions.put(relName,d);  allRelationDefinitions.put(relName,d);  registerReverseRelationDefinition(d);}  }
class C{  @Override protected Enumeration<URL> findResources(String resName){  init();  int length=mPaths.length;  ArrayList<URL> results=new ArrayList<URL>();  for (int i=0; i < length; i++) {    URL result=findResource(resName,i);    if (result != null) {      results.add(result);    }  }  return new EnumerateListArray<URL>(results);}  }
class C{  public void createRelation(String relationId,String relationTypeName,RoleList roleList) throws RelationServiceNotRegisteredException, IllegalArgumentException, RoleNotFoundException, InvalidRelationIdException, RelationTypeNotFoundException, InvalidRoleValueException {  isActive();  if (relationId == null || relationTypeName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"createRelation",new Object[]{relationId,relationTypeName,roleList});  RelationSupport relObj=new RelationSupport(relationId,myObjName,relationTypeName,roleList);  addRelationInt(true,relObj,null,relationId,relationTypeName,roleList);  RELATION_LOGGER.exiting(RelationService.class.getName(),"createRelation");  return;}  }
class C{  public RouteHeader createRouteHeader(Address address){  if (address == null)   throw new NullPointerException("null address arg");  Route route=new Route();  route.setAddress(address);  return route;}  }
class C{  protected void revokeConnection(){  if (managedConn == null)   return;  log.warn(MISUSE_MESSAGE);  managedConn.detach();  try {    uniquePoolEntry.shutdown();  } catch (  IOException iox) {    log.debug("Problem while shutting down connection.",iox);  }}  }
class C{  public static synchronized String parseQuotedString(String s) throws UnsupportedEncodingException, CharacterCodingException {  List<Byte> strBytes=new LinkedList<Byte>();  StringCharacterIterator iterator=new StringCharacterIterator(s);  char c=iterator.current();  while (iterator.getIndex() < iterator.getEndIndex()) {switch (c) {case '\\':{        byte[] bts=parseEscapedSequence(iterator).getBytes("UTF-8");        for (        byte b : bts)         strBytes.add(b);        break;      }default :{      strBytes.add((byte)0);      strBytes.add((byte)c);      break;    }}c=iterator.next();}byte[] bytArr=new byte[strBytes.size()];int i=0;for (Byte b : strBytes) {bytArr[i]=b.byteValue();i++;}String result=new String(bytArr,"UTF-8");CharBuffer charBuf=CharBuffer.wrap(result);if (asciiEncoder == null) asciiEncoder=Charset.forName("ASCII").newEncoder();if (asciiEncoder.canEncode(charBuf)) return asciiEncoder.encode(charBuf).asCharBuffer().toString();return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Node s;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  s=domesticAttr.getPreviousSibling();  assertNull("attrPreviousSiblingNullAssert",s);}  }
class C{  private static XMPNode addQualifierNode(XMPNode xmpParent,String name,String value) throws XMPException {  boolean isLang=XML_LANG.equals(name);  XMPNode newQual=null;  newQual=new XMPNode(name,isLang ? Utils.normalizeLangValue(value) : value,null);  xmpParent.addQualifier(newQual);  return newQual;}  }
class C{  public static Bitmap resizeImage(Bitmap image){  if (image == null) {    throw new NullPointerException("Bitmap not set!");  }  int width=image.getWidth();  int height=image.getHeight();  if (width > height && width > getMaxSizeInPixel())   return resizeImageByWidth(image);  if (height > width && height > getMaxSizeInPixel())   return resizeImageByHeight(image);  return image;}  }
class C{  private static int compareVersions(String[] v1,String[] v2){  if (v1.length != v2.length) {    throw new IllegalArgumentException();  }  for (int i=0; i < v1.length; i++) {    String partV1=v1[i];    String partV2=v2[i];    Integer i1=Integer.parseInt(partV1), i2=Integer.parseInt(partV2);    int comparison=i1.compareTo(i2);    if (comparison != 0) {      return comparison;    }  }  return 0;}  }
class C{  public static Object convertStringToJAXB(String str) throws JAXBException {  Unmarshaller u=jaxbContext.createUnmarshaller();  return u.unmarshal(XMLUtils.createSAXSource(new InputSource(new StringReader(str))));}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if ((target != null) && (e != null)) {    if ((!target.isEditable()) || (!target.isEnabled())) {      UIManager.getLookAndFeel().provideErrorFeedback(target);      return;    }    String content=e.getActionCommand();    if (content != null) {      target.replaceSelection(content);    } else {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  protected void handleIOException(IOException e) throws IOException {  throw e;}  }
class C{  private boolean validateDITStructureRule(DITStructureRule dsr,ObjectClass structuralClass,Entry parentEntry,AcceptRejectWarn structuralPolicy,LocalizableMessageBuilder invalidReason){  ObjectClass oc=parentEntry.getStructuralObjectClass();  if (oc == null) {    LocalizableMessage message=ERR_ENTRY_SCHEMA_DSR_NO_PARENT_OC.get(dn,parentEntry.getName());    if (structuralPolicy == AcceptRejectWarn.REJECT) {      invalidReason.append(message);      return false;    } else     if (structuralPolicy == AcceptRejectWarn.WARN) {      logger.error(message);    }  }  if (!containsSuperiorRuleWithObjectClass(dsr,oc)) {    LocalizableMessage message=ERR_ENTRY_SCHEMA_DSR_DISALLOWED_SUPERIOR_OC.get(dn,dsr.getNameOrRuleID(),structuralClass.getNameOrOID(),oc.getNameOrOID());    if (structuralPolicy == AcceptRejectWarn.REJECT) {      invalidReason.append(message);      return false;    } else     if (structuralPolicy == AcceptRejectWarn.WARN) {      logger.error(message);    }  }  return true;}  }
class C{  private boolean handleConflictResolution(){  for (  SynchronizationProvider<?> provider : getSynchronizationProviders()) {    try {      if (!processOperationResult(this,provider.handleConflictResolution(this))) {        return false;      }    } catch (    DirectoryException de) {      logger.traceException(de);      logger.error(ERR_MODDN_SYNCH_CONFLICT_RESOLUTION_FAILED,getConnectionID(),getOperationID(),getExceptionMessage(de));      setResponseData(de);      return false;    }  }  return true;}  }
class C{  private void checkUnverifiedPasswordPolicyState(Entry userEntry,SASLMechanismHandler<?> saslHandler) throws DirectoryException {  PasswordPolicyState pwPolicyState=(PasswordPolicyState)authPolicyState;  PasswordPolicy policy=pwPolicyState.getAuthenticationPolicy();  if ((policy.getStateUpdateFailurePolicy() == PasswordPolicyCfgDefn.StateUpdateFailurePolicy.PROACTIVE) && ((policy.getLockoutFailureCount() > 0) || ((policy.getLastLoginTimeAttribute() != null) && (policy.getLastLoginTimeFormat() != null))) && ((DirectoryServer.getWritabilityMode() == WritabilityMode.DISABLED) || (backend.getWritabilityMode() == WritabilityMode.DISABLED))) {    if (!DirectoryServer.isRootDN(userEntry.getName())) {      throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,ERR_BIND_OPERATION_WRITABILITY_DISABLED.get(userEntry.getName()));    }  }  if (policy.isRequireSecureAuthentication() && !clientConnection.isSecure()) {    boolean isSASLBind=saslHandler != null;    if (isSASLBind) {      if (!saslHandler.isSecure(saslMechanism)) {        throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,ERR_BIND_OPERATION_INSECURE_SASL_BIND.get(saslMechanism,userEntry.getName()));      }    } else {      throw new DirectoryException(ResultCode.INVALID_CREDENTIALS,ERR_BIND_OPERATION_INSECURE_SIMPLE_BIND.get());    }  }}  }
class C{  private boolean checkAttributesAndObjectClasses(DITContentRule ditContentRule,AcceptRejectWarn structuralPolicy,LocalizableMessageBuilder invalidReason){  for (  ObjectClass o : objectClasses.keySet()) {    if (DirectoryServer.getSchema().getObjectClass(o.getOID()).isPlaceHolder()) {      invalidReason.append(ERR_ENTRY_SCHEMA_UNKNOWN_OC.get(dn,o.getNameOrOID()));      return false;    }    if (o.getObjectClassType() == ObjectClassType.AUXILIARY && ditContentRule != null && !ditContentRule.getAuxiliaryClasses().contains(o)) {      LocalizableMessage message=ERR_ENTRY_SCHEMA_DISALLOWED_AUXILIARY_CLASS.get(dn,o.getNameOrOID(),ditContentRule.getNameOrOID());      if (structuralPolicy == AcceptRejectWarn.REJECT) {        invalidReason.append(message);        return false;      } else       if (structuralPolicy == AcceptRejectWarn.WARN) {        logger.error(message);      }    }    for (    AttributeType t : o.getDeclaredRequiredAttributes()) {      if (!userAttributes.containsKey(t) && !operationalAttributes.containsKey(t) && !t.isObjectClass()) {        LocalizableMessage message=ERR_ENTRY_SCHEMA_MISSING_REQUIRED_ATTR_FOR_OC.get(dn,t.getNameOrOID(),o.getNameOrOID());        invalidReason.append(message);        return false;      }    }  }  for (  AttributeType t : userAttributes.keySet()) {    boolean found=false;    for (    ObjectClass o : objectClasses.keySet()) {      if (o.isRequiredOrOptional(t)) {        found=true;        break;      }    }    if (!found && ditContentRule != null && ditContentRule.isRequiredOrOptional(t)) {      found=true;    }    if (!found) {      LocalizableMessage message=ERR_ENTRY_SCHEMA_DISALLOWED_USER_ATTR_FOR_OC.get(dn,t.getNameOrOID());      invalidReason.append(message);      return false;    }    List<Attribute> attrList=userAttributes.get(t);    if (attrList != null) {      for (      Attribute a : attrList) {        if (a.isEmpty()) {          invalidReason.append(ERR_ENTRY_SCHEMA_ATTR_NO_VALUES.get(dn,t.getNameOrOID()));          return false;        } else         if (t.isSingleValue() && a.size() != 1) {          invalidReason.append(ERR_ENTRY_SCHEMA_ATTR_SINGLE_VALUED.get(dn,t.getNameOrOID()));          return false;        }      }    }  }  for (  AttributeType t : operationalAttributes.keySet()) {    if (t.isSingleValue()) {      List<Attribute> attrList=operationalAttributes.get(t);      if (attrList != null) {        for (        Attribute a : attrList) {          if (a.size() > 1) {            invalidReason.append(ERR_ENTRY_SCHEMA_ATTR_SINGLE_VALUED.get(dn,t.getNameOrOID()));            return false;          }        }      }    }  }  return true;}  }
class C{  private PatternDN(PatternRDN[] subInitial,List<PatternRDN[]> subAnyElements,PatternRDN[] subFinal){  Reject.ifNull(subAnyElements);  this.subInitial=subInitial;  this.subAnyElements=subAnyElements;  this.subFinal=subFinal;}  }
class C{  protected static String reduceString(String input){  String newString=input.toLowerCase();  int len=newString.length();  String retval="";  for (int i=0; i < len; i++) {    if (newString.charAt(i) == ' ' || newString.charAt(i) == '\t')     continue; else     retval+=newString.charAt(i);  }  return retval;}  }
class C{  protected TreePath(TreePath parent,Object lastElement){  if (lastElement == null)   throw new IllegalArgumentException("path in TreePath must be non null.");  parentPath=parent;  lastPathComponent=lastElement;}  }
class C{  @SideOnly(Side.CLIENT) public static void addHolderInfo(long stored,long capacity,List<String> tooltip){  tooltip.add(ChatFormatting.DARK_AQUA + I18n.format("tooltip.tesla.powerinfo",Long.toString(stored),Long.toString(capacity)));}  }
class C{  public DividerItemDecoration(Context context){  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);  mDivider=styledAttributes.getDrawable(0);  styledAttributes.recycle();}  }
class C{  @Deprecated protected ActionListener createKeyboardDownRightListener(){  return new KeyboardDownRightHandler();}  }
class C{  public LineSeparatorRenderer(LineSeparator lineSeparator){  super(lineSeparator);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeSchemaName=getStringOptionValue(IArgument.ATTRIBUTE_SCHEMA);  String syntax=getStringOptionValue(ARGUMENT_SYNTAX);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,schemaType,subSchemaName,attributeSchemaName,syntax};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_MODIFY_ATTRIBUTE_SCHEMA_SYNTAX",params);    AttributeSchema attrSchema=ss.getAttributeSchema(attributeSchemaName);    if (attrSchema == null) {      String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,syntax,"attribute schema does not exist"};      attributeSchemaNoExist(attributeSchemaName,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_SYNTAX",args);    }    attrSchema.setSyntax(syntax);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_MODIFY_ATTRIBUTE_SCHEMA_SYNTAX",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-modify-syntax-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,syntax,e.getMessage()};    debugError("ModifyAttributeSchemaSyntax.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_SYNTAX",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,syntax,e.getMessage()};    debugError("ModifyAttributeSchemaSyntax.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_ATTRIBUTE_SCHEMA_SYNTAX",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  private static void checkFromToBounds(int arrayLength,int origin,int fence){  if (origin > fence) {    throw new ArrayIndexOutOfBoundsException("origin(" + origin + ") > fence("+ fence+ ")");  }  if (origin < 0) {    throw new ArrayIndexOutOfBoundsException(origin);  }  if (fence > arrayLength) {    throw new ArrayIndexOutOfBoundsException(fence);  }}  }
class C{  @Override public void onSupportActionModeFinished(@NonNull final ActionMode mode){  super.onSupportActionModeFinished(mode);}  }
class C{  public JKReportException(Throwable arg0){  super(arg0);}  }
class C{  void removeAci(Set aciList) throws AMException, SSOException {  if (aciList == null) {    return;  }  if (aciList.isEmpty()) {    return;  }  Set aciSet=new TreeSet(aciList);  Iterator iter=aciSet.iterator();  DN targetDN=null;  Set acis=new HashSet();  boolean needUpdate=false;  boolean denied=false;  AMObjectImpl targetObj=null;  while (iter.hasNext()) {    String aci=(String)iter.next();    int index=aci.indexOf(":aci:");    if (index != -1) {      DN tmpDN=DN.valueOf(aci.substring(0,index));      String oldAci=aci.substring(index + 5).trim();      if (targetDN == null) {        targetDN=tmpDN;        try {          targetObj=new AMObjectImpl(token,targetDN.toString(),UNKNOWN_OBJECT_TYPE);          acis=targetObj.getAttribute("aci");          if (acis.remove(oldAci)) {            needUpdate=true;          }        } catch (        Exception ex) {          if (debug.messageEnabled()) {            debug.message("AMObject.removeAci :" + targetDN.toString() + " read access denied."+ ex);          }          denied=true;        }      } else       if (tmpDN.equals(targetDN)) {        if (!denied) {          if (acis.remove(oldAci)) {            needUpdate=true;          }        }      } else {        if ((!denied) && needUpdate) {          try {            targetObj.setAttribute("aci",acis);            targetObj.store();          } catch (          Exception ex) {            if (debug.messageEnabled()) {              debug.message("AMObject.removeAci :" + targetDN.toString() + " write access denied."+ ex);            }          }        }        needUpdate=false;        denied=false;        targetDN=tmpDN;        try {          targetObj=new AMObjectImpl(token,targetDN.toString(),UNKNOWN_OBJECT_TYPE);          acis=targetObj.getAttribute("aci");          if (acis.remove(oldAci)) {            needUpdate=true;          }        } catch (        Exception ex) {          if (debug.messageEnabled()) {            debug.message("AMObject.setAciForRole :" + targetDN.toString() + " read access denied."+ ex);          }          denied=true;        }      }    }  }  if (needUpdate) {    targetObj.setAttribute("aci",acis);    targetObj.store();  }}  }
class C{  public void read(InputStream in,Document doc,int pos) throws IOException, BadLocationException {  read(new InputStreamReader(in),doc,pos);}  }
class C{  public void schemaChanged(String serviceName,String version){}  }
class C{  Node(K key,Object value,Node<K,V> next){  this.key=key;  this.value=value;  this.next=next;}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int next;  m_lastFetched=next=(DTM.NULL == m_lastFetched) ? m_cdtm.getFirstChild(m_context) : m_cdtm.getNextSibling(m_lastFetched);  if (DTM.NULL != next) {    m_pos++;    return next;  } else {    m_foundLast=true;    return DTM.NULL;  }}  }
class C{  public void newRowsAdded(final TableModelEvent e){  justifyRows(e.getFirstRow(),e.getLastRow() + 1);  fireTableChanged(e);}  }
class C{  public long nextLong(long least,long bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextLong(bound - least) + least;}  }
class C{  public void testConstructorSignBytesZeroNull1(){  byte aBytes[]={};  int aSign=-1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder();  builder.append(super.toString());  builder.append('{');  for (int i=0; i < delegates.length; i++) {    if (i > 0) {      builder.append(',');    }    builder.append(delegates[i]);  }  builder.append('}');  return builder.toString();}  }
class C{  public void startBundle(Bundle bundle) throws UpdateException {  try {    bundle.start();  } catch (  BundleException e) {    throw new UpdateException("Cannot start bundle " + bundle.toString(),e);  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  try {    logger.info("shootme: got an Invite sending OK");    Response ringingResponse=protocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)ringingResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    ringingResponse.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      logger.info("Dialog = " + st.getDialog());      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      logger.info("This is a RE INVITE ");      this.reInviteSeen=true;      ReInviteTest.assertSame("Dialog mismatch ",st.getDialog(),this.dialog);    }    logger.info("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      logger.info(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      logger.info("response = " + ringingResponse);      ringingResponse.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(ringingResponse);    Response okResponse=protocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    st.sendResponse(okResponse);    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    ex.printStackTrace();    ReInviteTest.fail(s);  }}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case MENU_HELP:    help();  return true;}return super.onOptionsItemSelected(item);}  }
class C{  public ExtensionHeaderImpl(){}  }
class C{  public static ReplicationParameters replicationParams(){  return new ReplicationParameters();}  }
class C{  public static int filterExitCode(final int exitCode){  if (exitCode < 0) {    return 255;  } else   if (exitCode > 255) {    return 255;  } else {    return exitCode;  }}  }
class C{  private boolean checkSpecialHeader(String name,String value){  if (name.equalsIgnoreCase("Content-Type")) {    setContentType(value);    return true;  }  if (name.equalsIgnoreCase("Content-Length")) {    try {      long cL=Long.parseLong(value);      setContentLength(cL);      return true;    } catch (    NumberFormatException ex) {      return false;    }  }  return false;}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] biasReturn){  int pos;  int index;  Shape ca;synchronized (locator) {    index=locator.getViewIndexAtPoint(x,y,a);    ca=locator.getChildAllocation(index,a);  }  ChildState cs=getChildState(index);synchronized (cs) {    View v=cs.getChildView();    pos=v.viewToModel(x,y,ca,biasReturn);  }  return pos;}  }
class C{  protected boolean isToggleEvent(MouseEvent event){  if (!SwingUtilities.isLeftMouseButton(event)) {    return false;  }  int clickCount=tree.getToggleClickCount();  if (clickCount <= 0) {    return false;  }  return ((event.getClickCount() % clickCount) == 0);}  }
class C{  public FrameBodyTSIZ(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public ECPResponse createECPResponse() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_RESPONSE);  if (obj == null) {    return new ECPResponseImpl();  } else {    return (ECPResponse)obj;  }}  }
class C{  public static void reverseBits(byte[] b){  for (int k=0; k < b.length; ++k)   b[k]=flipTable[b[k] & 0xff];}  }
class C{  @Ignore("TODO usually future == null, perhaps because CpsThread.resume is intended to be @CpsVmThreadOnly (so assumes that the promise is just set is not cleared by runNextChunk) yet we are calling it from the test thread; extremely dubious test design, should probably be using SemaphoreStep to be more realistic") @Test public void evaluateShallBeCpsTransformed() throws Exception {  CpsFlowDefinition flow=new CpsFlowDefinition("evaluate('1+com.cloudbees.groovy.cps.Continuable.suspend(2+3)')");  createExecution(flow);  exec.start();  exec.waitForSuspension();  assertFalse(dumpError(),exec.isComplete());  ListenableFuture<CpsThreadGroup> pp=exec.programPromise;  assertNotNull(pp);  Future<Object> future=pp.get().getThread(0).resume(new Outcome(7,null));  assertNotNull(future);  assertEquals(8,future.get());  exec.waitForSuspension();  assertTrue(dumpError(),exec.isComplete());  assertEquals(dumpError(),Result.SUCCESS,exec.getResult());}  }
class C{  public JToggleButton(String text,Icon icon){  this(text,icon,false);}  }
class C{  @Override public Foo remove(long fooId) throws NoSuchFooException {  return remove((Serializable)fooId);}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s5_several_branches();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  private static void checkTypeSafe(Collection<?> c){  try {    Role r;    for (    Object o : c)     r=(Role)o;  } catch (  ClassCastException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  protected boolean isEmpty(final int code){  return HTTP_NO_CONTENT == code;}  }
class C{  public long skip(long n) throws IOException {  if (n < 0L)   throw new IllegalArgumentException("skip value is negative");synchronized (lock) {    ensureOpen();    int avail=buf.length - pos;    if (avail > 0) {      if (n <= avail) {        pos+=n;        return n;      } else {        pos=buf.length;        n-=avail;      }    }    return avail + super.skip(n);  }}  }
class C{  @Override public void start(){  super.start();  JsonArray quotes=config().getJsonArray("companies");  for (  Object q : quotes) {    JsonObject company=(JsonObject)q;    vertx.deployVerticle(MarketDataVerticle.class.getName(),new DeploymentOptions().setConfig(company));  }  vertx.deployVerticle(RestQuoteAPIVerticle.class.getName(),new DeploymentOptions().setConfig(config()));  publishMessageSource("market-data",ADDRESS,null);  publishHttpEndpoint("quotes","localhost",config().getInteger("http.port",8080),null);}  }
class C{  public static boolean isTerminationCancelled(HttpServletRequest request){  String status=request.getParameter(IFSConstants.TERMINATION_STATUS);  if (status != null && status.equalsIgnoreCase(IFSConstants.CANCEL)) {    return true;  } else {    return false;  }}  }
class C{  public static String binDecode(final String value){  return decode(value,16,2);}  }
class C{  public void testConstructorSignBytesPositive6(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,23,-101};  int aSign=1;  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15,23,-101};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public GSERParser skipSeparator() throws DecodeException {  if (!hasNext(GSER_SEP)) {    final LocalizableMessage msg=WARN_GSER_NO_VALID_SEPARATOR.get(gserValue.substring(pos,length));    throw DecodeException.error(msg);  }  skip(GSER_SEP);  skip(GSER_SP);  return this;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.DSAKeyValueElement createDSAKeyValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.DSAKeyValueElementImpl();}  }
class C{  private static boolean isWhitespaceNode(Node node){  if (node.getNodeType() != Node.TEXT_NODE) {    return false;  }  String value=node.getNodeValue();  for (int i=0; i < value.length(); i++) {    if (!Character.isWhitespace(value.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public SingleSignOnEntry(Principal principal,String authType,String username,String password){  updateCredentials(principal,authType,username,password);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.ManifestType createManifestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.ManifestTypeImpl();}  }
class C{  public static String formatCurrentDate(){  return JKFormatUtil.formatDate(new Date(),"yyyy-MM-dd");}  }
class C{  private E peekExpired(){  E first=q.peek();  return (first == null || first.getDelay(NANOSECONDS) > 0) ? null : first;}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().updateFoo(foo);}  }
class C{  public JOptionPane(Object message,int messageType,int optionType,Icon icon,Object[] options,Object initialValue){  this.message=message;  this.options=options;  this.initialValue=initialValue;  this.icon=icon;  setMessageType(messageType);  setOptionType(optionType);  value=UNINITIALIZED_VALUE;  inputValue=UNINITIALIZED_VALUE;  updateUI();}  }
class C{  public boolean startsWith(XMLString prefix,int toffset){  FastStringBuffer fsb=fsb();  int to=m_start + toffset;  int tlim=m_start + m_length;  int po=0;  int pc=prefix.length();  if ((toffset < 0) || (toffset > m_length - pc)) {    return false;  }  while (--pc >= 0) {    if (fsb.charAt(to) != prefix.charAt(po)) {      return false;    }    to++;    po++;  }  return true;}  }
class C{  public boolean is_used(LibPadstack p_padstack,RoutingBoard p_board){  Iterator<UndoObjectNode> it=p_board.undo_items.start_read_object();  for (; ; ) {    UndoObjectStorable curr_item=p_board.undo_items.read_next(it);    if (curr_item == null)     break;    if (curr_item instanceof board.items.BrdAbit) {      if (((board.items.BrdAbit)curr_item).get_padstack() == p_padstack) {        return true;      }    }  }  for (int index=1; index <= packages.pkg_count(); ++index) {    LibPackage curr_package=packages.pkg_get(index);    for (int jndex=0; jndex < curr_package.pin_count(); ++jndex) {      if (curr_package.get_pin(jndex).padstack_no == p_padstack.pads_no) {        return true;      }    }  }  return false;}  }
class C{  public static String readFileToString(File file) throws IOException {  return readFileToString(file,Charset.defaultCharset());}  }
class C{  public void sign(PrivateKey privateKey,X509Certificate cert) throws SAML2Exception {  Element signatureEle=SigManager.getSigInstance().sign(toXMLString(true,true),getID(),privateKey,cert);  signatureString=XMLUtils.print(signatureEle);  signedXMLString=XMLUtils.print(signatureEle.getOwnerDocument().getDocumentElement(),"UTF-8");  isSigned=true;  makeImmutable();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode06.class,args);}  }
class C{  public static boolean areSchemasEqual(Schema schema1,Schema schema2){  if (schema1 == schema2) {    return true;  } else   if (schema2 == null) {    return schema1 != null;  } else   if (schema1 == null) {    return false;  }  return areAttributeTypesEqual(schema1,schema2) && areObjectClassesEqual(schema1,schema2) && Objects.equals(schema1.getMatchingRules(),schema2.getMatchingRules())&& Objects.equals(schema1.getSyntaxes(),schema2.getSyntaxes());}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  TestCaseUtils.initializeTestBackend(true);}  }
class C{  public void destroy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("destroy",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.destroy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public BadAttributeValueExpException(Object val){  this.val=val == null ? null : val.toString();}  }
class C{  @SuppressWarnings("deprecation") public static void addFile(File f) throws IOException {  addURL(f.toURL());}  }
class C{  public void insert_wstring(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wstring",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_wstring(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static ArgumentException unknownCategory(String categoryName){  LocalizableMessage msg=ERR_DSCFG_ERROR_CATEGORY_UNRECOGNIZED.get(categoryName);  return new ArgumentException(msg);}  }
class C{  public final boolean isReverse(){  return true;}  }
class C{  public Cursor fetchAll(String attributeName,Long eventID,Long dataTypeID){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (attributeName != null) {    qb.appendWhere(" AND " + KEY_EVENTATTRIBUTENAME + " = ");    qb.appendWhereEscapeString(attributeName);  }  if (eventID != null) {    qb.appendWhere(" AND " + KEY_EVENTID + " = "+ eventID);  }  if (dataTypeID != null) {    qb.appendWhere(" AND " + KEY_DATATYPEID + " = "+ dataTypeID);  }  return qb.query(database,KEYS,null,null,null,null,null);}  }
class C{  @Override public void doPost(HttpServletRequest req,HttpServletResponse res) throws IOException, ServletException {  if (debug > 0)   log("SSIServlet.doPost()");  requestHandler(req,res);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  CCAddRemove view=(CCAddRemove)getChild(ATTR_NAME_SECURITY_MECH_ID);  view.resetStateData();  populateMechID();  populateValues=true;  forwardTo();}  }
class C{  @SuppressWarnings("unused") static <T>Promise<List<T>> blockingPromiseList(Class<T> componentType,final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  public ModifyDNRequestProtocolOp(ByteString entryDN,ByteString newRDN,boolean deleteOldRDN){  this.entryDN=entryDN;  this.newRDN=newRDN;  this.deleteOldRDN=deleteOldRDN;  this.newSuperior=null;}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.updateFoo(foo);}  }
class C{  boolean persistValue(int id){  int bit=1 << id;  return (persistValue & bit) != 0;}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  protected void serializeDocType(DocumentType node,boolean bStart) throws SAXException {  String docTypeName=node.getNodeName();  String publicId=node.getPublicId();  String systemId=node.getSystemId();  String internalSubset=node.getInternalSubset();  if (internalSubset != null && !"".equals(internalSubset)) {    if (bStart) {      try {        Writer writer=fSerializer.getWriter();        StringBuffer dtd=new StringBuffer();        dtd.append("<!DOCTYPE ");        dtd.append(docTypeName);        if (null != publicId) {          dtd.append(" PUBLIC \"");          dtd.append(publicId);          dtd.append('\"');        }        if (null != systemId) {          if (null == publicId) {            dtd.append(" SYSTEM \"");          } else {            dtd.append(" \"");          }          dtd.append(systemId);          dtd.append('\"');        }        dtd.append(" [ ");        dtd.append(fNewLine);        dtd.append(internalSubset);        dtd.append("]>");        dtd.append(new String(fNewLine));        writer.write(dtd.toString());        writer.flush();      } catch (      IOException e) {        throw new SAXException(Utils.messages.createMessage(MsgKey.ER_WRITING_INTERNAL_SUBSET,null),e);      }    }  } else {    if (bStart) {      if (fLexicalHandler != null) {        fLexicalHandler.startDTD(docTypeName,publicId,systemId);      }    } else {      if (fLexicalHandler != null) {        fLexicalHandler.endDTD();      }    }  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.AttributeServiceEndpointElement createAttributeServiceEndpointElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.AttributeServiceEndpointElementImpl();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireExternalUriReferenceElement createRequireExternalUriReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireExternalUriReferenceElementImpl();}  }
class C{  public boolean lessThanOrEqual(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.greaterThanOrEqual(this);  return this.num() <= obj2.num();}  }
class C{  @Override protected boolean isInAlphabet(final byte octet){  return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;}  }
class C{  protected Sides(int value){  super(value);}  }
class C{  private static void flushFractionalConfigIntoEntry(FractionalConfig localFractionalConfig,Entry entry){  if (localFractionalConfig.isFractional()) {    boolean fractionalExclusive=localFractionalConfig.isFractionalExclusive();    Map<String,Set<String>> fractionalSpecificClassesAttributes=localFractionalConfig.getFractionalSpecificClassesAttributes();    Set<String> fractionalAllClassesAttributes=localFractionalConfig.getFractionalAllClassesAttributes();    String fractAttribute=fractionalExclusive ? REPLICATION_FRACTIONAL_EXCLUDE : REPLICATION_FRACTIONAL_INCLUDE;    AttributeBuilder attrBuilder=new AttributeBuilder(fractAttribute);    boolean somethingToFlush=add(attrBuilder,"*",fractionalAllClassesAttributes);    if (!fractionalSpecificClassesAttributes.isEmpty()) {      for (      Map.Entry<String,Set<String>> specific : fractionalSpecificClassesAttributes.entrySet()) {        if (add(attrBuilder,specific.getKey(),specific.getValue())) {          somethingToFlush=true;        }      }    }    if (somethingToFlush) {      List<ByteString> duplicateValues=new ArrayList<>();      entry.addAttribute(attrBuilder.toAttribute(),duplicateValues);    }  }}  }
class C{  public PdfCanvas roundRectangle(double x,double y,double width,double height,double radius){  if (width < 0) {    x+=width;    width=-width;  }  if (height < 0) {    y+=height;    height=-height;  }  if (radius < 0)   radius=-radius;  final double curv=0.4477f;  moveTo(x + radius,y);  lineTo(x + width - radius,y);  curveTo(x + width - radius * curv,y,x + width,y + radius * curv,x + width,y + radius);  lineTo(x + width,y + height - radius);  curveTo(x + width,y + height - radius * curv,x + width - radius * curv,y + height,x + width - radius,y + height);  lineTo(x + radius,y + height);  curveTo(x + radius * curv,y + height,x,y + height - radius * curv,x,y + height - radius);  lineTo(x,y + radius);  curveTo(x,y + radius * curv,x + radius * curv,y,x + radius,y);  return this;}  }
class C{  public static HierarchyBoundsListener add(HierarchyBoundsListener a,HierarchyBoundsListener b){  return (HierarchyBoundsListener)addInternal(a,b);}  }
class C{  private String parseQuotedString() throws ParseException {  skip();  String quotedString="";  boolean unescapedBackslash=true;  while (data[index] != QUOTEDSTRING_END_TOKEN || (data[index - 1] == QUOTEDSTRING_ESCAPE_TOKEN && unescapedBackslash)) {    quotedString+=(char)data[index];    if (accept(QUOTEDSTRING_ESCAPE_TOKEN)) {      unescapedBackslash=!(data[index - 1] == QUOTEDSTRING_ESCAPE_TOKEN && unescapedBackslash);    }    skip();  }  String unescapedString;  try {    unescapedString=parseQuotedString(quotedString);  } catch (  Exception ex) {    throw new ParseException("The quoted string could not be parsed.",index);  }  skip();  return unescapedString;}  }
class C{  public DataBufferUShort(int size,int numBanks){  super(STABLE,TYPE_USHORT,size,numBanks);  bankdata=new short[numBanks][];  for (int i=0; i < numBanks; i++) {    bankdata[i]=new short[size];  }  data=bankdata[0];}  }
class C{  public PluginResult.PreParse invokePreParseExtendedPlugins(PreParseExtendedOperation extendedOperation) throws CanceledOperationException {  PluginResult.PreParse result=null;  for (  DirectoryServerPlugin p : preParseExtendedPlugins) {    if (isInternalOperation(extendedOperation,p)) {      continue;    }    try {      result=p.doPreParse(extendedOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreParseException(e,extendedOperation,p);    }    if (result == null) {      return handlePreParseResult(extendedOperation,p);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PreParse.continueOperationProcessing();  }  return result;}  }
class C{  public String chooseServerAlias(String keyType,Principal[] issuers,Socket sock){  return sunX509KeyManager.chooseServerAlias(keyType,issuers,sock);}  }
class C{  public ProviderMismatchException(){}  }
class C{  public boolean isForHTTPBasic(){  return (negoValue != null) ? negoValue.equalsIgnoreCase(HTTP_HTTPBASIC) : false;}  }
class C{  public DTMException(short code,String message){  super(code,message);}  }
class C{  private static int parseType(final String signature,int pos,final SignatureVisitor v){  char c;  int start, end;  boolean visited, inner;  String name;switch (c=signature.charAt(pos++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':case 'V':    v.visitBaseType(c);  return pos;case '[':return parseType(signature,pos,v.visitArrayType());case 'T':end=signature.indexOf(';',pos);v.visitTypeVariable(signature.substring(pos,end));return end + 1;default :start=pos;visited=false;inner=false;for (; ; ) {switch (c=signature.charAt(pos++)) {case '.':case ';':if (!visited) {name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}}if (c == ';') {v.visitEnd();return pos;}start=pos;visited=false;inner=true;break;case '<':name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}visited=true;top: for (; ; ) {switch (c=signature.charAt(pos)) {case '>':break top;case '*':++pos;v.visitTypeArgument();break;case '+':case '-':pos=parseType(signature,pos + 1,v.visitTypeArgument(c));break;default :pos=parseType(signature,pos,v.visitTypeArgument('='));break;}}}}}}  }
class C{  public boolean isVolatile(){  return Modifier.isVolatile(flags);}  }
class C{  public AMException(String msg,String errorCode){  super(msg);  this.localizedMsg=msg;  this.errorCode=errorCode;}  }
class C{  private <M extends Configuration>void deregisterDelayedDeleteListener(DN baseDN,ConfigurationDeleteListener<M> listener) throws ConfigException {  DN parentDN=baseDN.parent();  int delayWrappers=0;  while (parentDN != null) {    if (!configRepository.hasEntry(parentDN)) {      parentDN=parentDN.parent();      delayWrappers++;    } else {      for (      ConfigAddListener l : configRepository.getAddListeners(parentDN)) {        if (l instanceof DelayedConfigAddListener) {          DelayedConfigAddListener delayListener=(DelayedConfigAddListener)l;          ConfigAddListener wrappedListener;          int i=delayWrappers;          for (; i > 0; i--) {            wrappedListener=delayListener.getDelayedAddListener();            if (wrappedListener instanceof DelayedConfigAddListener) {              delayListener=(DelayedConfigAddListener)l;            } else {              break;            }          }          if (i > 0) {            continue;          }          ConfigDeleteListener delayedListener=delayListener.getDelayedDeleteListener();          if (delayedListener instanceof ConfigDeleteListenerAdaptor) {            ConfigDeleteListenerAdaptor<?> adaptor=(ConfigDeleteListenerAdaptor<?>)delayedListener;            ServerManagedObjectDeleteListener<?> l2=adaptor.getServerManagedObjectDeleteListener();            if (l2 instanceof ServerManagedObjectDeleteListenerAdaptor<?>) {              ServerManagedObjectDeleteListenerAdaptor<?> adaptor2=(ServerManagedObjectDeleteListenerAdaptor<?>)l2;              if (adaptor2.getConfigurationDeleteListener() == listener) {                configRepository.deregisterAddListener(parentDN,l);              }            }          }        }      }      return;    }  }}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  @Override public Foo create(long fooId){  Foo foo=new FooImpl();  foo.setNew(true);  foo.setPrimaryKey(fooId);  String uuid=PortalUUIDUtil.generate();  foo.setUuid(uuid);  foo.setCompanyId(companyProvider.getCompanyId());  return foo;}  }
class C{  private void unionEmail(String email1,String email2,Set union){  if (email1.indexOf('@') != -1) {    String _sub=email1.substring(email1.indexOf('@') + 1);    if (email2.indexOf('@') != -1) {      if (email1.equalsIgnoreCase(email2)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(_sub,email2)) {        union.add(email2);      } else {        union.add(email1);        union.add(email2);      }    } else {      if (_sub.equalsIgnoreCase(email2)) {        union.add(email2);      } else {        union.add(email1);        union.add(email2);      }    }  } else   if (email1.startsWith(".")) {    if (email2.indexOf('@') != -1) {      String _sub=email2.substring(email1.indexOf('@') + 1);      if (withinDomain(_sub,email1)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(email1,email2) || email1.equalsIgnoreCase(email2)) {        union.add(email2);      } else       if (withinDomain(email2,email1)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    } else {      if (withinDomain(email2,email1)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    }  } else {    if (email2.indexOf('@') != -1) {      String _sub=email2.substring(email1.indexOf('@') + 1);      if (_sub.equalsIgnoreCase(email1)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    } else     if (email2.startsWith(".")) {      if (withinDomain(email1,email2)) {        union.add(email2);      } else {        union.add(email1);        union.add(email2);      }    } else {      if (email1.equalsIgnoreCase(email2)) {        union.add(email1);      } else {        union.add(email1);        union.add(email2);      }    }  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.GivenNameElement createGivenNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.GivenNameElementImpl();}  }
class C{  private static synchronized String makeDateString(Date date){  return sdfDefault.format(date);}  }
class C{  private Signum(String p_name){  name=p_name;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.StatusElementImpl();}  }
class C{  private static void fixupQualifiedNode(XMPNode xmpParent) throws XMPException {  assert xmpParent.getOptions().isStruct() && xmpParent.hasChildren();  XMPNode valueNode=xmpParent.getChild(1);  assert "rdf:value".equals(valueNode.getName());  if (valueNode.getOptions().getHasLanguage()) {    if (xmpParent.getOptions().getHasLanguage()) {      throw new XMPException("Redundant xml:lang for rdf:value element",BADXMP);    }    XMPNode langQual=valueNode.getQualifier(1);    valueNode.removeQualifier(langQual);    xmpParent.addQualifier(langQual);  }  for (int i=1; i <= valueNode.getQualifierLength(); i++) {    XMPNode qualifier=valueNode.getQualifier(i);    xmpParent.addQualifier(qualifier);  }  for (int i=2; i <= xmpParent.getChildrenLength(); i++) {    XMPNode qualifier=xmpParent.getChild(i);    xmpParent.addQualifier(qualifier);  }  assert xmpParent.getOptions().isStruct() || xmpParent.getHasValueChild();  xmpParent.setHasValueChild(false);  xmpParent.getOptions().setStruct(false);  xmpParent.getOptions().mergeWith(valueNode.getOptions());  xmpParent.setValue(valueNode.getValue());  xmpParent.removeChildren();  for (Iterator it=valueNode.iterateChildren(); it.hasNext(); ) {    XMPNode child=(XMPNode)it.next();    xmpParent.addChild(child);  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeSchemaName=getStringOptionValue(IArgument.ATTRIBUTE_SCHEMA);  String range=getStringOptionValue(ARGUMENT_RANGE);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,schemaType,subSchemaName,attributeSchemaName,range};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_ATTRIBUTE_SCHEMA_START_RANGE",params);    AttributeSchema attrSchema=ss.getAttributeSchema(attributeSchemaName);    if (attrSchema == null) {      String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,range,"attribute schema does not exist"};      attributeSchemaNoExist(attributeSchemaName,"FAILED_SET_ATTRIBUTE_SCHEMA_START_RANGE",args);    }    attrSchema.setStartRange(range);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_ATTRIBUTE_SCHEMA_START_RANGE",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-set-start-range-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,range,e.getMessage()};    debugError("SetAttributeSchemaStartRange.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_ATTRIBUTE_SCHEMA_START_RANGE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,range,e.getMessage()};    debugError("SetAttributeSchemaStartRange.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_ATTRIBUTE_SCHEMA_START_RANGE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void validateAttributeQuery(HttpServletRequest request,HttpServletResponse response,AttributeQuery attrQuery,String attrAuthorityEntityID,String realm) throws SAML2Exception {  AttributeQueryUtil.verifyAttrQuerySignature(attrQuery,attrAuthorityEntityID,realm);  ;}  }
class C{  public BAD_TYPECODE(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public static SmsRouteTreeBuilder branch(String uriTemplate,SmsRouteTreeBuilder... subTreeBuilders){  return new SmsRouteTreeBuilder(uriTemplate).subTrees(subTreeBuilders);}  }
class C{  @Override public void removeAttributeChangeNotificationListener(NotificationListener listener,String name) throws ListenerNotFoundException {  if (listener == null)   throw new IllegalArgumentException("Listener is null");  if (attributeBroadcaster != null) {    attributeBroadcaster.removeNotificationListener(listener);  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  final Request request=requestEvent.getRequest();  final SipProvider sipProvider=(SipProvider)requestEvent.getSource();  ServerTransaction st=serverTransaction;  try {    if (st == null) {      try {        st=sipProvider.getNewServerTransaction(request);      } catch (      TransactionUnavailableException tae) {        tae.printStackTrace();        return;      }catch (      TransactionAlreadyExistsException taex) {        return;      }    }    final String toTag="" + System.nanoTime();    Response response=messageFactory.createResponse(Response.RINGING,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag(toTag);    st.sendResponse(response);    response=messageFactory.createResponse(Response.OK,request);    final Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    final ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag(toTag);    st.sendResponse(response);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static int countByUuid_C(java.lang.String uuid,long companyId){  return getPersistence().countByUuid_C(uuid,companyId);}  }
class C{  public static String lowerFirst(final String input) throws IllegalArgumentException {  if (input == null) {    throw new IllegalArgumentException("input can't be null");  }  if (input.length() == 0) {    return "";  }  return head(input).map(null).map(null).get();}  }
class C{  public int size(){  return collections.size();}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  public UserPrincipal(String name){  if (name == null) {    throw new NullPointerException("illegal null input");  }  this.name=name;}  }
class C{  public MailServer load(String clazz,String realm) throws IllegalStateException {  try {    return (MailServer)Class.forName(clazz).getDeclaredConstructor(String.class).newInstance(realm);  } catch (  InstantiationException e) {    throw new IllegalStateException(e);  }catch (  IllegalAccessException e) {    throw new IllegalStateException(e);  }catch (  InvocationTargetException e) {    throw new IllegalStateException(e);  }catch (  NoSuchMethodException e) {    throw new IllegalStateException(e);  }catch (  ClassNotFoundException e) {    throw new IllegalStateException(e);  }}  }
class C{  protected void registerEventHandlers(){  for (  PluginInfo item : this.plugins) {    try {      @SuppressWarnings("unchecked") Class<Plugin> clazz=(Class<Plugin>)Class.forName(item.getClassName());      Plugin plugin=(Plugin)clazz.newInstance();      plugin.setPluginInfo(item);      plugin.registerEventHandlers(this.events);      item.setEnabled(true);    } catch (    ClassCastException e) {      item.setEnabled(false);    }catch (    ClassNotFoundException e) {      item.setEnabled(false);    }catch (    IllegalAccessException e) {      item.setEnabled(false);    }catch (    InstantiationException e) {      item.setEnabled(false);    }  }}  }
class C{  public static Event35Id.Builder newBuilder(Event35Id other){  return new Event35Id.Builder(other);}  }
class C{  public DoubleBorder(float width){  super(width);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.NameIDMappingServiceElement createNameIDMappingServiceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.NameIDMappingServiceElementImpl();}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  protected void add(Object component){  if (component == null) {    return;  }  components.add(component);}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  public AuthStatus secureResponse(MessageInfo messageInfo) throws AuthException {  return serverAuthModule.secureResponse(messageInfo,null);}  }
class C{  public void removePeopleContainerRule(Guid guid,String filter) throws UMSException {  PCMappingTable mt=PCMappingTable.getPCMappingTable(this);  mt.removeRule(guid,filter);}  }
class C{  protected Map<String,WebXml> processJarsForWebFragments(WebXml application,WebXmlParser webXmlParser){  JarScanner jarScanner=context.getJarScanner();  boolean delegate=false;  if (context instanceof StandardContext) {    delegate=((StandardContext)context).getDelegate();  }  boolean parseRequired=true;  Set<String> absoluteOrder=application.getAbsoluteOrdering();  if (absoluteOrder != null && absoluteOrder.isEmpty() && !context.getXmlValidation()) {    parseRequired=false;  }  FragmentJarScannerCallback callback=new FragmentJarScannerCallback(webXmlParser,delegate,parseRequired);  jarScanner.scan(JarScanType.PLUGGABILITY,context.getServletContext(),callback);  if (!callback.isOk()) {    ok=false;  }  return callback.getFragments();}  }
class C{  public ObjectMapping(ConnectionFactory connectionFactory,JsonValue config) throws JsonValueException {  this.connectionFactory=connectionFactory;  this.config=config;  name=config.get("name").required().asString();  linkTypeName=config.get("links").defaultTo(name).asString();  sourceObjectSet=config.get("source").required().asString();  targetObjectSet=config.get("target").required().asString();  sourceIdsCaseSensitive=config.get("sourceIdsCaseSensitive").defaultTo(true).asBoolean();  targetIdsCaseSensitive=config.get("targetIdsCaseSensitive").defaultTo(true).asBoolean();  JsonValue linkQualifiersValue=config.get("linkQualifiers");  if (linkQualifiersValue.isNull()) {    linkQualifiersList.add(Link.DEFAULT_LINK_QUALIFIER);  } else   if (linkQualifiersValue.isList()) {    linkQualifiersList.addAll(config.get("linkQualifiers").as(setOf(String.class)));  } else   if (linkQualifiersValue.isMap()) {    linkQualifiersScript=Scripts.newScript(linkQualifiersValue);  } else {    linkQualifiersValue.expect(List.class);  }  onReconScript=Scripts.newScript(config.get("onRecon").defaultTo(json(object(field(SourceUnit.ATTR_TYPE,"groovy"),field(SourceUnit.ATTR_NAME,"roles/onRecon.groovy")))));  resultScript=Scripts.newScript(config.get("result"));  prefetchLinks=config.get("prefetchLinks").defaultTo(true).asBoolean();  taskThreads=config.get("taskThreads").defaultTo(DEFAULT_TASK_THREADS).asInteger();  feedSize=config.get("feedSize").defaultTo(ReconFeeder.DEFAULT_FEED_SIZE).asInteger();  syncEnabled=config.get("enableSync").defaultTo(true).asBoolean();  linkingEnabled=config.get("enableLinking").defaultTo(true).asBoolean();  reconSourceQueryPaging=config.get("reconSourceQueryPaging").defaultTo(false).asBoolean();  reconSourceQueryPageSize=config.get("reconSourceQueryPageSize").defaultTo(reconSourceQueryPaging ? ReconFeeder.DEFAULT_FEED_SIZE : 0).asInteger();  LOGGER.debug("Instantiated {}",name);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.PersonalTitleElement createPersonalTitleElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.PersonalTitleElementImpl();}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo createFoo(long fooId){  return getService().createFoo(fooId);}  }
class C{  private TypeHelpCallback(AbstractManagedObjectDefinition<C,S> d){  this.d=d;}  }
class C{  private void incCount(int value){  int temp=written + value;  if (temp < 0) {    temp=Integer.MAX_VALUE;  }  written=temp;}  }
class C{  public void handleTblButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(TBL_SEARCH);  table.restoreStateData();  Integer[] selected=tblModel.getSelectedRows();  Set names=new HashSet(selected.length * 2);  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);  Map mapCache=(Map)szCache.getSerializedObj();  List cache=(List)mapCache.get(CACHE_AGENTS);  for (int i=0; i < selected.length; i++) {    names.add((String)cache.get(selected[i].intValue()));  }  try {    AgentsModel model=(AgentsModel)getModel();    String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    model.deleteAgents(curRealm,names);    if (selected.length == 1) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",model.getLocalizedString("agents.message.deleted"));    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information",model.getLocalizedString("agents.message.deleted.pural"));    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public SimpleCountingIdlingResource(String resourceName){  mResourceName=checkNotNull(resourceName);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public void remove(int index){  list.remove(index);}  }
class C{  private static String addAdminGroupFilters(String originalFilter,String orgDN,int objectType){  try {    if (!AMCompliance.isAdminGroupsEnabled(orgDN)) {      String modifiedFilter=originalFilter;switch (objectType) {case AMObject.STATIC_GROUP:case AMObject.DYNAMIC_GROUP:case AMObject.ASSIGNABLE_DYNAMIC_GROUP:case AMObject.GROUP:        StringBuilder sb=new StringBuilder();      sb.append("(&").append(originalFilter).append("(!(");    sb.append(AMNamingAttrManager.getNamingAttr(AMObject.ASSIGNABLE_DYNAMIC_GROUP));  sb.append("=serviceadministrators))").append("(!(");sb.append(AMNamingAttrManager.getNamingAttr(AMObject.ASSIGNABLE_DYNAMIC_GROUP));sb.append("=servicehelpdeskadministrators)))");modifiedFilter=sb.toString();}if (debug.messageEnabled()) {debug.message("AMSearchFilterManager." + "addAdminGroupFilters() - objectType = " + objectType + ", orgDN = "+ orgDN+ ", Original filter: "+ originalFilter+ ", Modified filter = "+ modifiedFilter);}return modifiedFilter;}} catch (AMException ae) {if (debug.warningEnabled()) {debug.warning("AMSearchFilterManager.addAdminGroupFilters() " + "Unable to determine if \"Admin Groups\" " + "option is enabled or disabled. Exception : ",ae);}}return originalFilter;}  }
class C{  private void loadData(){}  }
class C{  void rescheduleMin(long newTime){  queue[1].nextExecutionTime=newTime;  fixDown(1);}  }
class C{  public static StringArgument controlArgument() throws ArgumentException {  return StringArgument.builder(OPTION_LONG_CONTROL).shortIdentifier(OPTION_SHORT_CONTROL).description(INFO_DESCRIPTION_CONTROLS.get()).docDescriptionSupplement(SUPPLEMENT_DESCRIPTION_CONTROLS.get()).multiValued().valuePlaceholder(INFO_LDAP_CONTROL_PLACEHOLDER.get()).buildArgument();}  }
class C{  private void loadDbCache(){  settings=dbHelper.getSharedPreferences();  Cursor cursor=dataTypeDbAdapter.fetchAll();  while (cursor.moveToNext()) {    dataTypeNames.put(getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID),getStringFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPENAME));    dataTypeClassNames.put(getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID),getStringFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPECLASSNAME));  }  cursor.close();  cursor=dataFilterDbAdapter.fetchAll();  while (cursor.moveToNext()) {    dataFilterNames.put(getLongFromCursor(cursor,DataFilterDbAdapter.KEY_DATAFILTERID),getStringFromCursor(cursor,DataFilterDbAdapter.KEY_DATAFILTERDISPLAYNAME));  }  cursor.close();  cursor=registeredAppDbAdapter.fetchAll();  while (cursor.moveToNext()) {    ModelApplication application=new ModelApplication(getStringFromCursor(cursor,RegisteredAppDbAdapter.KEY_APPNAME),"",R.drawable.icon_application_unknown,getLongFromCursor(cursor,RegisteredAppDbAdapter.KEY_APPID),getBooleanFromCursor(cursor,RegisteredAppDbAdapter.KEY_LOGIN),getStringFromCursor(cursor,RegisteredAppDbAdapter.KEY_USERNAME),getStringFromCursor(cursor,RegisteredAppDbAdapter.KEY_PASSWORD));    applications.put(application.getDatabaseId(),application);  }  cursor.close();  cursor=registeredEventDbAdapter.fetchAllOrdered();  while (cursor.moveToNext()) {    ModelEvent event=new ModelEvent(getLongFromCursor(cursor,RegisteredEventDbAdapter.KEY_EVENTID),getStringFromCursor(cursor,RegisteredEventDbAdapter.KEY_EVENTNAME),"",R.drawable.icon_event_unknown);    events.put(event.getDatabaseId(),event);  }  cursor.close();  cursor=registeredEventAttributeDbAdapter.fetchAllGlobalAttributes();  while (cursor.moveToNext()) {    ModelAttribute attribute=new ModelAttribute(getLongFromCursor(cursor,RegisteredEventAttributeDbAdapter.KEY_EVENTATTRIBUTEID),getLongFromCursor(cursor,RegisteredEventAttributeDbAdapter.KEY_EVENTID),getLongFromCursor(cursor,RegisteredEventAttributeDbAdapter.KEY_DATATYPEID),getStringFromCursor(cursor,RegisteredEventAttributeDbAdapter.KEY_EVENTATTRIBUTENAME),"",R.drawable.icon_attribute_unknown);    globalAttributes.put(attribute.getDatabaseId(),attribute);  }  cursor.close();  cursor=registeredEventAttributeDbAdapter.fetchAllSpecificAttibutes();  while (cursor.moveToNext()) {    ModelAttribute attribute=new ModelAttribute(getLongFromCursor(cursor,RegisteredEventAttributeDbAdapter.KEY_EVENTATTRIBUTEID),getLongFromCursor(cursor,RegisteredEventAttributeDbAdapter.KEY_EVENTID),getLongFromCursor(cursor,RegisteredEventAttributeDbAdapter.KEY_DATATYPEID),getStringFromCursor(cursor,RegisteredEventAttributeDbAdapter.KEY_EVENTATTRIBUTENAME),"",R.drawable.icon_attribute_unknown);    specificAttributes.put(attribute.getDatabaseId(),attribute);  }  cursor.close();  cursor=registeredActionParameterDbAdapter.fetchAll();  while (cursor.moveToNext()) {    ModelParameter parameter=new ModelParameter(getLongFromCursor(cursor,RegisteredActionParameterDbAdapter.KEY_ACTIONPARAMETERID),getLongFromCursor(cursor,RegisteredActionParameterDbAdapter.KEY_ACTIONID),getLongFromCursor(cursor,RegisteredActionParameterDbAdapter.KEY_DATATYPEID),getStringFromCursor(cursor,RegisteredActionParameterDbAdapter.KEY_ACTIONPARAMETERNAME),"");    parameters.put(parameter.getDatabaseId(),parameter);  }  cursor.close();  cursor=registeredActionDbAdapter.fetchAll();  while (cursor.moveToNext()) {    ModelApplication application=applications.get(getLongFromCursor(cursor,RegisteredActionDbAdapter.KEY_APPID));    long actionID=getLongFromCursor(cursor,RegisteredActionDbAdapter.KEY_ACTIONID);    ArrayList<ModelParameter> parameterList=new ArrayList<ModelParameter>();    for (    ModelParameter parameter : parameters.values()) {      if (parameter.getForeignKeyActionId() == actionID) {        parameterList.add(parameter);      }    }    ModelAction action=new ModelAction(getStringFromCursor(cursor,RegisteredActionDbAdapter.KEY_ACTIONNAME),"",R.drawable.icon_action_unknown,actionID,application,parameterList);    actions.put(actionID,action);  }  cursor.close();}  }
class C{  public static RequestSet parseXML(String xml){  RequestSetParser parser=new RequestSetParser(xml);  return parser.parseXML();}  }
class C{  private boolean hasNextProxy(){  return hasNextProxy;}  }
class C{  public ProgressUpdateListenerDelegate(){}  }
class C{  public void removeParameters(){  this.uriParms=new NameValueList();}  }
class C{  public String toString(){  return getClass().getName() + "[source=" + source+ "]";}  }
class C{  public XPathFunctionException(Throwable cause){  super(cause);}  }
class C{  public String toString(){  return getStringValue();}  }
class C{  private String removeExtraChars(String host){  final int startsWith=host.indexOf("[");  if (startsWith == -1) {    return host;  }  return host.substring(1,host.length() - 1);}  }
class C{  public int versionPointNumber(){  return Integer.valueOf(properties.getProperty("version.point"));}  }
class C{  @Override public void allObjectsChanged(){  try {    createServices();  } catch (  SSOException e) {    debug.error("Could not recreate SMS REST services",e);  }catch (  SMSException e) {    debug.error("Could not recreate SMS REST services",e);  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  String namespace=getName().getNamespace();  String handlerClass=sroot.getExtensionHandlerClass();  Object[] args={namespace,sroot};  ExtensionNamespaceSupport extNsSpt=new ExtensionNamespaceSupport(namespace,handlerClass,args);  sroot.getExtensionNamespacesManager().registerExtension(extNsSpt);  if (!(namespace.equals(Constants.S_EXSLT_FUNCTIONS_URL))) {    namespace=Constants.S_EXSLT_FUNCTIONS_URL;    args=new Object[]{namespace,sroot};    extNsSpt=new ExtensionNamespaceSupport(namespace,handlerClass,args);    sroot.getExtensionNamespacesManager().registerExtension(extNsSpt);  }}  }
class C{  public boolean delete(long id){  return database.delete(DATABASE_TABLE,KEY_ID + "=" + id,null) > 0;}  }
class C{  public T create(String realm) throws SMSException, SSOException {  T service=serviceCache.get(realm);  if (service == null) {    service=factory.create(serviceConfigManager,realm);    serviceCache.putIfAbsent(realm,service);  }  return serviceCache.get(realm);}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException ex) {    return null;  }}  }
class C{  public static NewSuffixOptions createEmpty(List<String> baseDNs){  NewSuffixOptions ops=new NewSuffixOptions(baseDNs);  ops.type=Type.LEAVE_DATABASE_EMPTY;  return ops;}  }
class C{  private void resolveVirtualConflict(VirtualAttributeRule rule,List<Attribute> attrList,Map<AttributeType,List<Attribute>> attributes,AttributeType attributeType){  if (attrList.get(0).isVirtual()) {    return;  }switch (rule.getConflictBehavior()) {case REAL_OVERRIDES_VIRTUAL:    break;case VIRTUAL_OVERRIDES_REAL:  suppressedAttributes.put(attributeType,attrList);Attribute attr=new VirtualAttribute(attributeType,this,rule);attributes.put(attributeType,newLinkedList(attr));break;case MERGE_REAL_AND_VIRTUAL:attrList.add(new VirtualAttribute(attributeType,this,rule));break;}}  }
class C{  public ConnectException(String s){  super(s);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNodeNS02.class,args);}  }
class C{  public String toString(){  return name;}  }
class C{  private void adjustForHSB(boolean wantsHSB,Rectangle available,Rectangle hsbR,Insets vpbInsets){  int oldHeight=hsbR.height;  if (wantsHSB) {    int hsbHeight=Math.max(0,Math.min(available.height,hsb.getPreferredSize().height));    available.height-=hsbHeight;    hsbR.y=available.y + available.height + vpbInsets.bottom;    hsbR.height=hsbHeight;  } else {    available.height+=oldHeight;  }}  }
class C{  private void initializeDsTable(){  addRowInDsTable();}  }
class C{  public AccessControlContext(ProtectionDomain context[]){  if (context.length == 0) {    this.context=null;  } else   if (context.length == 1) {    if (context[0] != null) {      this.context=context.clone();    } else {      this.context=null;    }  } else {    List<ProtectionDomain> v=new ArrayList<>(context.length);    for (int i=0; i < context.length; i++) {      if ((context[i] != null) && (!v.contains(context[i])))       v.add(context[i]);    }    if (!v.isEmpty()) {      this.context=new ProtectionDomain[v.size()];      this.context=v.toArray(this.context);    }  }}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  public int doAfterBody() throws JspException {  return SKIP_BODY;}  }
class C{  @RequestMapping(value="/user/add",method=RequestMethod.POST,produces=MediaTypes.JSON_UTF_8) public User addUser(@PostParam User user){  user.setDesc("Blog: http://www.bysocket.com https://github.com/JeffLi1993");  return user;}  }
class C{  public char charAt(int pos){  int startChunk=pos >>> m_chunkBits;  if (startChunk == 0 && m_innerFSB != null)   return m_innerFSB.charAt(pos & m_chunkMask); else   return m_array[startChunk][pos & m_chunkMask];}  }
class C{  public boolean isRequestedSessionIdFromCookie(){  return this._getHttpServletRequest() != null && this._getHttpServletRequest().isRequestedSessionIdFromCookie();}  }
class C{  private boolean isClosed(){  return out == null;}  }
class C{  public boolean isTransientAttribute(String attribute){  if (transientAttributes != null)   return transientAttributes.contains(attribute);  return false;}  }
class C{  public static Method findCommandMethod(Class<? extends CustomCommandScope> commandsProvider,String methodName){  try {    return commandsProvider.getMethod(methodName,InputStream.class,PrintStream.class,String[].class);  } catch (  NoSuchMethodException e) {    return null;  }}  }
class C{  public static int w(String tag,String msg){  return Log.w(tag,msg);}  }
class C{  private final void dispatachChars(Node node) throws org.xml.sax.SAXException {  if (m_contentHandler instanceof org.apache.xml.dtm.ref.dom2dtm.DOM2DTM.CharacterNodeHandler) {    ((org.apache.xml.dtm.ref.dom2dtm.DOM2DTM.CharacterNodeHandler)m_contentHandler).characters(node);  } else {    String data=((Text)node).getData();    this.m_contentHandler.characters(data.toCharArray(),0,data.length());  }}  }
class C{  @Override public void doTag() throws JspException, IOException {}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public LibPackage pkg_get(String p_name,boolean p_is_front){  LibPackage other_side_package=null;  for (  LibPackage curr_package : package_list) {    if (!curr_package.name_is_equal(p_name))     continue;    if (curr_package.is_front == p_is_front)     return curr_package;    other_side_package=curr_package;  }  return other_side_package;}  }
class C{  public void writeComment(LocalizableMessage comment,int wrapColumn) throws IOException {  ifNull(comment);  String[] lines=SPLIT_NEWLINE.split(comment);  for (  String l : lines) {    if (wrapColumn <= 0) {      writer.write("# ");      writer.write(l);      writer.newLine();    } else {      int breakColumn=wrapColumn - 2;      if (l.length() <= breakColumn) {        writer.write("# ");        writer.write(l);        writer.newLine();      } else {        int startPos=0;        outerLoop:         while (startPos < l.length()) {          if (startPos + breakColumn >= l.length()) {            writer.write("# ");            writer.write(l.substring(startPos));            writer.newLine();            startPos=l.length();          } else {            int endPos=startPos + breakColumn;            int i=endPos - 1;            while (i > startPos) {              if (l.charAt(i) == ' ') {                writer.write("# ");                writer.write(l.substring(startPos,i));                writer.newLine();                startPos=i + 1;                continue outerLoop;              }              i--;            }            writer.write("# ");            writer.write(l.substring(startPos,endPos));            writer.newLine();            startPos=endPos;          }        }      }    }  }}  }
class C{  public boolean removeLastOccurrence(Object o){  if (o == null) {    for (Node<E> x=last; x != null; x=x.prev) {      if (x.item == null) {        unlink(x);        return true;      }    }  } else {    for (Node<E> x=last; x != null; x=x.prev) {      if (o.equals(x.item)) {        unlink(x);        return true;      }    }  }  return false;}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  private void deleteUnnecessaryFiles(){  File serverStartingFile=new File(environmentConfig.getInstanceRoot() + File.separator + "logs"+ File.separator+ "server.starting");  if (serverStartingFile.exists()) {    serverStartingFile.delete();  }  File hostNameFile=new File(environmentConfig.getInstanceRoot() + File.separator + SetupUtils.HOST_NAME_FILE);  if (hostNameFile.exists()) {    hostNameFile.delete();  }}  }
class C{  void executeNSDecls(TransformerImpl transformer) throws TransformerException {  executeNSDecls(transformer,null);}  }
class C{  public FirstNameTag(){}  }
class C{  public SAMLRequestVersionTooLowException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public synchronized Integer addNotification(String type,String message,Object userData,Date date) throws java.lang.IllegalArgumentException {  return (addNotification(type,message,userData,date,0,0));}  }
class C{  private Node<K,V> findNode(Object key){  if (key == null)   throw new NullPointerException();  Comparator<? super K> cmp=comparator;  outer:   for (; ; ) {    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {      Object v;      int c;      if (n == null)       break outer;      Node<K,V> f=n.next;      if (n != b.next)       break;      if ((v=n.value) == null) {        n.helpDelete(b,f);        break;      }      if (b.value == null || v == n)       break;      if ((c=cpr(cmp,key,n.key)) == 0)       return n;      if (c < 0)       break outer;      b=n;      n=f;    }  }  return null;}  }
class C{  public static Map<String,MappedClass> mappingsFromEnigma(File file,Map<String,ClassNode> nodes){  Map<String,MappedClass> base=mappingsFromNodes(nodes);  MappingLoader loader=new EnigmaLoader(nodes);  try {    Map<String,MappedClass> newMappings=loader.read(new FileReader(file));    for (    MappedClass mappedClass : newMappings.values()) {      newMappings=linkMappings(mappedClass,newMappings);    }    base=fixFromMappingsText(base,newMappings);  } catch (  FileNotFoundException e) {    e.printStackTrace();  }  return base;}  }
class C{  public Object produceEvent() throws InvocationTargetException {  if (!valid) {    throw new IllegalStateException(toString() + " has been invalidated and can no longer produce events.");  }  try {    return method.invoke(target);  } catch (  IllegalAccessException e) {    throw new AssertionError(e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof Error) {      throw (Error)e.getCause();    }    throw e;  }}  }
class C{  private JPanel createProgressBarPanel(){  JPanel panel=new JPanel(new GridBagLayout());  panel.setOpaque(false);  GridBagConstraints gbc=new GridBagConstraints();  gbc.insets=UIFactory.getEmptyInsets();  gbc.fill=GridBagConstraints.HORIZONTAL;  progressBar=new JProgressBar();  progressBar.setIndeterminate(true);  progressBar.setMaximum(100);  gbc.gridwidth=GridBagConstraints.RELATIVE;  gbc.weightx=0.0;  panel.add(Box.createHorizontalStrut(UIFactory.PROGRESS_BAR_SIZE),gbc);  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.weightx=1.0;  panel.add(Box.createHorizontalGlue(),gbc);  gbc.gridwidth=GridBagConstraints.RELATIVE;  gbc.weightx=0.0;  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.weightx=1.0;  panel.add(Box.createHorizontalGlue(),gbc);  return panel;}  }
class C{  private OkHttpClient copyWithDefaults(){  OkHttpClient result=new OkHttpClient(this);  result.proxy=proxy;  result.proxySelector=proxySelector != null ? proxySelector : ProxySelector.getDefault();  result.cookieHandler=cookieHandler != null ? cookieHandler : CookieHandler.getDefault();  result.responseCache=responseCache != null ? responseCache : ResponseCache.getDefault();  result.sslSocketFactory=sslSocketFactory != null ? sslSocketFactory : HttpsURLConnection.getDefaultSSLSocketFactory();  result.hostnameVerifier=hostnameVerifier != null ? hostnameVerifier : OkHostnameVerifier.INSTANCE;  result.authenticator=authenticator != null ? authenticator : HttpAuthenticator.SYSTEM_DEFAULT;  result.connectionPool=connectionPool != null ? connectionPool : ConnectionPool.getDefault();  result.followProtocolRedirects=followProtocolRedirects;  result.transports=transports != null ? transports : DEFAULT_TRANSPORTS;  result.connectTimeout=connectTimeout;  result.readTimeout=readTimeout;  return result;}  }
class C{  public static boolean isAccessLoggable(Level level){  if (logger == null) {    return false;  } else {    return logger.isAccessLoggable(level);  }}  }
class C{  public int clockSequence(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return clockSequence;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node newChild;  Node child;  String childName;  Node replacedNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  oldChild=childList.item(0);  newChild=doc.createElement("newChild");  replacedNode=employeeNode.replaceChild(newChild,oldChild);  child=childList.item(0);  childName=child.getNodeName();  assertEquals("nodeReplaceChildAssert1","newChild",childName);}  }
class C{  long longValue(){  return id;}  }
class C{  static public void assertEquals(String message,long expected,long actual){  assertEquals(message,new Long(expected),new Long(actual));}  }
class C{  public String str(){  return (null != m_obj) ? ((String)m_obj) : "";}  }
class C{  public AMSearchResults searchUsers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  int level=searchControl.getSearchScope();  if ((level != AMConstants.SCOPE_ONE) && (level != AMConstants.SCOPE_SUB))   throw new AMException(AMSDKBundle.getString("123",super.locale),"123");  if ((wildcard == null) || (wildcard.length() == 0))   throw new AMException(AMSDKBundle.getString("122",super.locale),"122");  String userFilter="(&(" + AMNamingAttrManager.getNamingAttr(USER) + "="+ wildcard+ ")"+ getSearchFilter(AMObject.USER)+ "("+ roleDNsAN+ "="+ super.entryDN+ "))";  String filter=null;  if (avPairs == null) {    filter=userFilter;  } else {    if (avPairs.isEmpty()) {      filter=userFilter;    } else {      StringBuilder filterSB=new StringBuilder();      filterSB.append("(&").append(userFilter).append("(|");      Iterator iter=avPairs.keySet().iterator();      while (iter.hasNext()) {        String attributeName=(String)(iter.next());        Iterator iter2=((Set)(avPairs.get(attributeName))).iterator();        while (iter2.hasNext()) {          String attributeValue=(String)iter2.next();          filterSB.append("(").append(attributeName).append("=").append(attributeValue).append(")");        }      }      filterSB.append("))");      filter=filterSB.toString();    }  }  SearchControl sc=searchControl.getSearchControl();  String returnAttrs[]=searchControl.getReturnAttributes();  return dsServices.search(super.token,getOrganizationDN(),filter,sc,returnAttrs);}  }
class C{  @SuppressWarnings("unused") public static long parseLong(byte[] bytes){  return parseLong(bytes,0,bytes.length);}  }
class C{  @Override public StateInteractive complete(){  return this;}  }
class C{  public void jspError(Node n,String errCode,String... args) throws JasperException {  dispatch(n.getStart(),errCode,args,null);}  }
class C{  public ObjectInUseException(String rbName,String errCode,Object[] args,String name,Object user){  super(rbName,errCode,args,null);  this.name=name;  this.user=user;}  }
class C{  public SQLNonTransientException(Throwable cause){  super(cause);}  }
class C{  public void validate(ValidatableObject vo) throws SAXException {  if (validatedObjects.add(ProxyGroup.unwrap(vo))) {    MSVValidator.validate(jaxbContext,this,vo);  } else {    reportEvent(vo,Messages.format(Messages.CYCLE_DETECTED));  }}  }
class C{  public static boolean rename(File fromFile,File toFile){  logger.log(Level.CONFIG,"Renaming From:" + fromFile.getAbsolutePath() + " to "+ toFile.getAbsolutePath());  if (toFile.exists()) {    logger.log(Level.SEVERE,"Destination File:" + toFile + " already exists");    return false;  }  final boolean result=fromFile.renameTo(toFile);  if (!result) {    if (copy(fromFile,toFile)) {      boolean deleteResult=fromFile.delete();      if (!deleteResult) {        logger.log(Level.SEVERE,"Unable to delete File:" + fromFile);        toFile.delete();        return false;      }      return true;    } else {      return false;    }  }  return true;}  }
class C{  public SAML2InvalidNameIDPolicyException(Throwable t){  super(t);}  }
class C{  public int compareTo(Object o) throws ClassCastException {  ElemTemplateElement ro=(ElemTemplateElement)o;  int roPrecedence=ro.getStylesheetComposed().getImportCountComposed();  int myPrecedence=this.getStylesheetComposed().getImportCountComposed();  if (myPrecedence < roPrecedence)   return -1; else   if (myPrecedence > roPrecedence)   return 1; else   return this.getUid() - ro.getUid();}  }
class C{  public Key createKey(String method,String key){  KeyField keyImpl=new KeyField();  try {    keyImpl.setMethod(method);    keyImpl.setKey(key);  } catch (  SdpException s) {    s.printStackTrace();    return null;  }  return keyImpl;}  }
class C{  protected ActionBar supportActionBar(Toolbar toolbar){  setSupportActionBar(toolbar);  ActionBar actionBar=getSupportActionBar();  if (actionBar != null) {    actionBar.setDisplayHomeAsUpEnabled(true);    actionBar.setDisplayShowHomeEnabled(true);  }  return actionBar;}  }
class C{  public UnsupportedFlavorException(DataFlavor flavor){  super((flavor != null) ? flavor.getHumanPresentableName() : null);}  }
class C{  protected void http2Connect() throws Exception {  enableHttp2();  configureAndStartWebApplication();  openClientConnection();  doHttpUpgrade();  sendClientPreface();  validateHttp2InitialResponse();}  }
class C{  private void invokePostResponsePlugins(boolean workflowExecuted){  if (workflowExecuted) {    List<LocalBackendCompareOperation> localOperations=(List)getAttachment(Operation.LOCALBACKENDOPERATIONS);    if (localOperations != null) {      for (      LocalBackendCompareOperation localOperation : localOperations) {        getPluginConfigManager().invokePostResponseComparePlugins(localOperation);      }    }  } else {    getPluginConfigManager().invokePostResponseComparePlugins(this);  }}  }
class C{  @Override public void pause(){}  }
class C{  @Override public boolean exists(UUID uuid){  if (uuid == null) {    return false;  }  BoundStatement bs=new BoundStatement(existStmt);  bindUUIDWhere(bs,uuid);  return (getSession().execute(bs).one().getLong(0) > 0);}  }
class C{  private void enableMapper() throws Exception {  replace("cn=EXTERNAL,cn=SASL Mechanisms,cn=config","ds-cfg-certificate-mapper",FINGERPRINT_MAPPER_DN);}  }
class C{  public boolean removeFirstOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i + 1) & mask;  }  return false;}  }
class C{  private boolean isBleEnabled(){  final BluetoothManager bm=(BluetoothManager)getActivity().getSystemService(Context.BLUETOOTH_SERVICE);  final BluetoothAdapter ba=bm.getAdapter();  return ba != null && ba.isEnabled();}  }
class C{  @DataProvider public Object[][] relativeTimeValues(){  return new Object[][]{{"1s",true},{"1s0d",false},{"-1d",true},{"2h",true},{"+2w",true},{"0",true},{"0s",true},{"0d",true},{"xyz",false},{"12w-2d",false},{"1s2s",false},{"1d4s5d",false}};}  }
class C{  public void addAttribute(Object name,Object value){  table.put(name,value);}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();}  }
class C{  public MutableFilterDecorator(Filter delegate){  setDelegate(delegate);}  }
class C{  private static ClassLoader findClassLoader() throws ConfigurationError {  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();  if (debug)   debugPrintln("Using context class loader: " + classLoader);  if (classLoader == null) {    classLoader=FactoryFinder.class.getClassLoader();    if (debug)     debugPrintln("Using the class loader of FactoryFinder: " + classLoader);  }  return classLoader;}  }
class C{  public AsfTag(){  this(false);}  }
class C{  public ScenarioBuilder tag(String tagName){  return tag(tagName,false);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  private MouseInputListener createWindowMouseInputListener(JRootPane root){  return new MouseInputHandler();}  }
class C{  public void testContainsEntry() throws Exception {  assertNull(cache.toVerboseString(),"Expected empty cache.  " + "Cache contents:" + ServerConstants.EOL + cache.toVerboseString());  TestCaseUtils.initializeTestBackend(false);  String b=DirectoryServer.getBackend(DN.valueOf("o=test")).getBackendID();  assertFalse(cache.containsEntry(testEntriesList.get(0).getName()),"Not expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.putEntry(testEntriesList.get(0),b,1);  assertTrue(cache.containsEntry(testEntriesList.get(0).getName()),"Expected to find " + testEntriesList.get(0).getName() + " in the cache.  Cache contents:"+ ServerConstants.EOL+ cache.toVerboseString());  cache.clear();}  }
class C{  @Override protected void tearDown(){  try {    if (zfile != null) {      zfile.close();      tempFileName=System.getProperty("java.io.tmpdir");      String separator=System.getProperty("file.separator");      if (tempFileName.charAt(tempFileName.length() - 1) == separator.charAt(0)) {        tempFileName=Support_PlatformFile.getNewPlatformFile(tempFileName,"gabba.zip");      } else {        tempFileName=Support_PlatformFile.getNewPlatformFile(tempFileName + separator,"gabba.zip");      }      File f=new File(tempFileName);      f.delete();    }  } catch (  Exception e) {  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  if (getName().indexOf(" ") == -1 && getName().indexOf("\"") == -1) {    credentialClass=getName();    credOwners=EMPTY_PRINCIPALS;  } else {    init(getName());  }}  }
class C{  int size(){  return providers.size();}  }
class C{  private PlaPointInt reposition_via(BrdAbitVia p_via,PlaPointInt p_to_location,int p_trace_half_width,int p_trace_layer,int p_trace_cl_class){  PlaPointInt from_location=p_via.center_get();  if (from_location.equals(p_to_location))   return null;  double ok_length=r_board.check_trace(from_location,p_to_location,p_trace_layer,p_via.net_nos,p_trace_half_width,p_trace_cl_class,false);  if (ok_length <= 0)   return null;  PlaPointFloat float_from_location=from_location.to_float();  PlaPointFloat float_to_location=p_to_location.to_float();  PlaPointFloat new_float_to_location;  if (ok_length >= Integer.MAX_VALUE) {    new_float_to_location=float_to_location;  } else {    new_float_to_location=float_from_location.change_length(float_to_location,ok_length);  }  PlaPointInt new_to_location=new_float_to_location.round();  PlaVectorInt delta=new_to_location.difference_by(from_location);  boolean check_ok=r_board.move_drill_algo.check(p_via,delta,0,0,null,null);  if (check_ok)   return new_to_location;  final double c_min_length=0.3 * p_trace_half_width + 1;  ok_length=Math.min(ok_length,float_from_location.distance(float_to_location));  double curr_length=ok_length / 2;  ok_length=0;  PlaPointInt result=null;  while (curr_length >= c_min_length) {    PlaPointInt check_point=float_from_location.change_length(float_to_location,ok_length + curr_length).round();    delta=check_point.difference_by(from_location);    if (r_board.move_drill_algo.check(p_via,delta,0,0,null,null)) {      ok_length+=curr_length;      result=check_point;    }    curr_length/=2;  }  return result;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="emp:";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:employee");  testAddr=elementList.item(0);{    try {      ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");      fail("throw_NAMESPACE_ERR");    } catch (    DOMException ex) {    }  }}  }
class C{  @BeforeSuite(groups={"cli-framework"}) public void suiteSetup() throws CLIException {  Map<String,Object> env=new HashMap<String,Object>();  env.put(CLIConstants.SYS_PROPERTY_COMMAND_NAME,"testclifw");  env.put(CLIConstants.SYS_PROPERTY_DEFINITION_FILES,"com.sun.identity.cli.MockCLIManager");  env.put(CLIConstants.SYS_PROPERTY_OUTPUT_WRITER,outputWriter);  cmdManager=new CommandManager(env);}  }
class C{  public void repaint(Rectangle r){  repaint(0,r.x,r.y,r.width,r.height);}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  public XmlStreamReaderException(String msg,String bomEnc,String xmlGuessEnc,String xmlEnc){  this(msg,null,null,bomEnc,xmlGuessEnc,xmlEnc);}  }
class C{  public Polygon(int xpoints[],int ypoints[],int npoints){  if (npoints > xpoints.length || npoints > ypoints.length) {    throw new IndexOutOfBoundsException("npoints > xpoints.length || " + "npoints > ypoints.length");  }  if (npoints < 0) {    throw new NegativeArraySizeException("npoints < 0");  }  this.npoints=npoints;  this.xpoints=Arrays.copyOf(xpoints,npoints);  this.ypoints=Arrays.copyOf(ypoints,npoints);}  }
class C{  private void safeSetFeature(XMLReader xmlReader,String feature,boolean flag){  try {    xmlReader.setFeature(feature,flag);  } catch (  SAXNotSupportedException e) {    if (logFeatureWarnings.compareAndSet(false,true)) {      Logger.getLogger(PKG_NAME).log(Level.SEVERE,"XMLReader unsupported feature " + feature);    }  }catch (  SAXNotRecognizedException e) {    if (logFeatureWarnings.compareAndSet(false,true)) {      Logger.getLogger(PKG_NAME).log(Level.SEVERE,"XMLReader unrecognized feature " + feature);    }  }}  }
class C{  public void postSingleLogoutSuccess(String hostedEntityID,String realm,HttpServletRequest request,HttpServletResponse response,String userID,LogoutRequest logoutRequest,LogoutResponse logoutResponse,String binding){  return;}  }
class C{  public TransformerException(String message){  super(message);  this.containedException=null;  this.locator=null;}  }
class C{  public boolean hasMembers(){  return members.length > 0;}  }
class C{  private void buildValuePack(MethodVisitor methodVisitor,CodeInfo info,ValuePack value,boolean requireValue){  int depth=info.getCurrentStackDepth();  List<Instruction> instructions=value.instructions();  for (int i=0; i < instructions.size() - 1; ++i) {    buildOneIns(methodVisitor,info,instructions.get(i),true);    if (value.autoPop()) {      while (info.getCurrentStackDepth() != depth) {        if (info.peekSize() == CodeInfo.Size._1) {          methodVisitor.visitInsn(Opcodes.POP);        } else {          methodVisitor.visitInsn(Opcodes.POP2);        }        info.pop(1);      }    }  }  Instruction ins=instructions.get(instructions.size() - 1);  boolean buildLastStmt;  if (!value.autoPop()) {    buildLastStmt=true;  } else {    if (requireValue) {      buildLastStmt=true;    } else {      if (ins instanceof ReadOnly) {        buildLastStmt=false;      } else {        if (ins instanceof Ins.InvokeStatic) {          Ins.InvokeStatic is=(Ins.InvokeStatic)ins;          SMethodDef theMethod=(SMethodDef)is.invokable();          if (theMethod.name().equals("getField") && theMethod.declaringType().fullName().equals("lt.lang.LtRuntime")) {            buildLastStmt=false;          } else           if (theMethod.name().equals("get") && theMethod.declaringType().fullName().equals("lt.lang.Unit")) {            buildLastStmt=false;          } else {            buildLastStmt=true;          }        } else {          buildLastStmt=true;        }      }    }  }  if (buildLastStmt) {    buildOneIns(methodVisitor,info,ins,requireValue);  }}  }
class C{  public void copyAndAddExtension(DERObjectIdentifier oid,boolean critical,X509Certificate cert) throws CertificateParsingException {  this.copyAndAddExtension(oid.getId(),critical,cert);}  }
class C{  private void parseSessionElements(NodeList nodelist){  int len=nodelist.getLength();  for (int i=0; i < len; i++) {    Element sess=(Element)nodelist.item(i);    SessionInfo sessionInfo=parseSessionElement(sess);    sessionResponse.addSessionInfo(sessionInfo);    SessionRequestParser.debug.message("In parse session " + sessionInfo.toString());  }}  }
class C{  public PdfCanvas resetFillColorCmyk(){  return setFillColorCmyk(0,0,0,1);}  }
class C{  public void testGetElementById2() throws Throwable {  Document doc;  Element element;  doc=(Document)load("staffNS",builder);  element=doc.getElementById("Cancun");  assertNull("throw_Null",element);}  }
class C{  @Override public boolean add(E o){  return offer(o);}  }
class C{  public void testConstrStringWithExponentWithoutPoint1(){  String a="-238768787678287e214";  int aScale=-214;  BigInteger bA=new BigInteger("-238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  @Override public boolean isAsyncSupported(){  return request.isAsyncSupported();}  }
class C{  public String toHTML(){  List<TestCase> failed=getFailedTestCases();  List<TestCase> passed=getPassedTestCases();  List<TestCase> skipped=getSkippedTestCases();  StringBuffer buff=new StringBuffer();  for (  TestCase tc : failed) {    buff.append(tc.toHTML());  }  for (  TestCase tc : passed) {    buff.append(tc.toHTML());  }  for (  TestCase tc : skipped) {    buff.append(tc.toHTML());  }  Object[] params={name,buff.toString()};  return MessageFormat.format(HTMLConstants.TEST_TABLE,params);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  @Override public void dump(final String prefix,final FileDescriptor fd,final PrintWriter writer,final String[] args){  delegate.dump(prefix,fd,writer,args);}  }
class C{  public Cursor fetch(Long dataTypeID){  if (dataTypeID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_DATATYPEID + "=" + dataTypeID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public static void unifyReferences(final Hashtable hash,final List list){  if (list != null) {    for (int i=0; i < list.size(); i++) {      final Object itemAtList=list.get(i);      final Object unifiedReferences=unifyReferences(hash,itemAtList);      list.set(i,unifiedReferences);    }  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  public ICC_ColorSpace(ICC_Profile profile){  super(profile.getColorSpaceType(),profile.getNumComponents());  int profileClass=profile.getProfileClass();  if ((profileClass != ICC_Profile.CLASS_INPUT) && (profileClass != ICC_Profile.CLASS_DISPLAY) && (profileClass != ICC_Profile.CLASS_OUTPUT)&& (profileClass != ICC_Profile.CLASS_COLORSPACECONVERSION)&& (profileClass != ICC_Profile.CLASS_NAMEDCOLOR)&& (profileClass != ICC_Profile.CLASS_ABSTRACT)) {    throw new IllegalArgumentException("Invalid profile type");  }  thisProfile=profile;  setMinMax();}  }
class C{  public void paintSplitPaneDividerBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSplitPaneDividerBackground(context,g,x,y,w,h);}  }
class C{  private LinkedHashSet<String> flavorToNativeLookup(final DataFlavor flav,final boolean synthesize){  LinkedHashSet<String> natives=getFlavorToNative().get(flav);  if (flav != null && !disabledMappingGenerationKeys.contains(flav)) {    DataTransferer transferer=DataTransferer.getInstance();    if (transferer != null) {      LinkedHashSet<String> platformNatives=transferer.getPlatformMappingsForFlavor(flav);      if (!platformNatives.isEmpty()) {        if (natives != null) {          platformNatives.addAll(natives);        }        natives=platformNatives;      }    }  }  if (natives == null) {    if (synthesize) {      String encoded=encodeDataFlavor(flav);      natives=new LinkedHashSet<>(1);      getFlavorToNative().put(flav,natives);      natives.add(encoded);      LinkedHashSet<DataFlavor> flavors=getNativeToFlavor().get(encoded);      if (flavors == null) {        flavors=new LinkedHashSet<>(1);        getNativeToFlavor().put(encoded,flavors);      }      flavors.add(flav);      nativesForFlavorCache.remove(flav);      flavorsForNativeCache.remove(encoded);    } else {      natives=new LinkedHashSet<>(0);    }  }  return new LinkedHashSet<>(natives);}  }
class C{  public Event35.Builder clearPlayerCount(){  playerCount=null;  fieldSetFlags()[0]=false;  return this;}  }
class C{  @NonNull public static Interpolator constant(float value){  return new ConstantInterpolator(value);}  }
class C{  private void assertEqualResourceAttributeValues(final ResourceAttribute ra1,final ResourceAttribute ra2){  assertThat(checkEqualResourceAttributes(ra1,ra2)).isTrue();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue01.class,args);}  }
class C{  final Node<E> succ(Node<E> p){  Node<E> next=p.next;  return (p == next) ? head : next;}  }
class C{  public String toXMLString() throws FSMsgException {  return (toXMLString(true,false));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodehaschildnodesfalse.class,args);}  }
class C{  public static boolean isDouble(final String txt){  try {    Double.parseDouble(txt);    return true;  } catch (  final Exception e) {    return false;  }}  }
class C{  public boolean _non_existent(){  return false;}  }
class C{  public boolean visitFunction(ExpressionOwner owner,Function func){  if ((func instanceof FuncCurrent) || (func instanceof FuncExtFunction))   m_isAbs=false;  return true;}  }
class C{  @NonNull public final Agera skip(long n){  return new AgeraSkip(this,n);}  }
class C{  public void box(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    newInstance(boxed);    if (type.getSize() == 2) {      dupX2();      dupX2();      pop();    } else {      dupX1();      swap();    }    invokeConstructor(boxed,new Method("<init>",Type.VOID_TYPE,new Type[]{type}));  }}  }
class C{  public void destroy(){  finalize();}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  final void normalize(){  if (intLen == 0) {    offset=0;    return;  }  int index=offset;  if (value[index] != 0)   return;  int indexBound=index + intLen;  do {    index++;  } while (index < indexBound && value[index] == 0);  int numZeros=index - offset;  intLen-=numZeros;  offset=(intLen == 0 ? 0 : offset + numZeros);}  }
class C{  public CRLNumber(byte[] encoding) throws IOException {  super(encoding);  number=new BigInteger((byte[])ASN1.decode(encoding));}  }
class C{  public AccountUsableRequestControl(){  this(false);}  }
class C{  public INV_POLICY(){  this("");}  }
class C{  public double readDouble() throws SQLException {  Double attrib=(Double)getNextAttribute();  return (attrib == null) ? 0 : attrib.doubleValue();}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {}  }
class C{  public StatusCode(String value) throws SAMLException {  this.value=checkAndGetValue(value);}  }
class C{  public XPathFactoryConfigurationException(Throwable cause){  super(cause);}  }
class C{  public IDPList createIDPList(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.IDPLIST,value);  if (obj == null) {    return new IDPListImpl(value);  } else {    return (IDPList)obj;  }}  }
class C{  public int via_padstack_count(){  return via_padstacks.size();}  }
class C{  public boolean isAccessibleChildSelected(int i){  return List.this.isIndexSelected(i);}  }
class C{  public void emit(int aggregationWindow,String ruleActionId,List<Event> emits) throws IOException {  flush();  SortedMap<String,Aggregator> map=getAggregationMap().subMap(Utils.concat(ruleActionId,Constants.KEY_SEPARATOR),Utils.concat(ruleActionId,Constants.KEY_SEPARATOR,String.valueOf(Character.MAX_VALUE)));  int lastTs=0;  if (getLastEmittedBucketMap().containsKey(ruleActionId)) {    lastTs=getLastEmittedBucketMap().get(ruleActionId) + aggregationWindow;  } else {    lastTs=MarkovianAggregationEngineImpl.extractTsFromAggregationKey(map.lastKey());    lastTs=lastTs - aggregationWindow - (int)(getJitterTolerance() / 1000);  }  String val=Utils.intToString(lastTs);  val=new StringBuilder(ruleActionId.length() + 3 + val.length()).append(ruleActionId).append(Constants.KEY_SEPARATOR).append(val).append(Constants.KEY_SEPARATOR).append(Character.MAX_VALUE).toString();  map=getAggregationMap().subMap(ruleActionId,val);  Set<Entry<String,Aggregator>> set=map.entrySet();  for (Iterator<Entry<String,Aggregator>> iterator=set.iterator(); iterator.hasNext(); ) {    Entry<String,Aggregator> entry=iterator.next();    if (template instanceof CountingAggregator) {      Event event=eventFactory.buildEvent();      event.getHeaders().put(Constants.FIELD_AGGREGATION_KEY,entry.getKey());      event.getHeaders().put(Constants.FIELD_AGGREGATION_VALUE,((CountingAggregator)entry.getValue()).getCardinality());      emits.add(event);    }    getFlushAggregationMap().remove(entry.getKey());    iterator.remove();  }  getLastEmittedBucketMap().put(ruleActionId,lastTs);}  }
class C{  public boolean isIntendedForAudience(String audience){  return jwt.getClaimsSet().getAudience().contains(audience);}  }
class C{  private static SearchResultReferenceProtocolOp readSearchReference(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_SEARCH_REFERENCE_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ArrayList<String> referralURLs=new ArrayList<>();  try {    do {      referralURLs.add(reader.readOctetStringAsString());    } while (reader.hasNextElement());  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_SEARCH_REFERENCE_DECODE_URLS.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_SEARCH_REFERENCE_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new SearchResultReferenceProtocolOp(referralURLs);}  }
class C{  protected void updateDepthOffset(){  if (isRootVisible()) {    if (getShowsRootHandles())     depthOffset=1; else     depthOffset=0;  } else   if (!getShowsRootHandles())   depthOffset=-1; else   depthOffset=0;}  }
class C{  public SQLSyntaxErrorException(Throwable cause){  super(cause);}  }
class C{  final boolean casRight(Index<K,V> cmp,Index<K,V> val){  return UNSAFE.compareAndSwapObject(this,rightOffset,cmp,val);}  }
class C{  public static String readFileToString(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toString(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public ValueMember(String __name,String __id,String __defined_in,String __version,org.omg.CORBA.TypeCode __type,org.omg.CORBA.IDLType __type_def,short __access){  name=__name;  id=__id;  defined_in=__defined_in;  version=__version;  type=__type;  type_def=__type_def;  access=__access;}  }
class C{  protected static String postData(String uploadUrl,String data) throws IOException {  LOG.debug("Sending HTTP POST request to {}. Length={}",uploadUrl,StringUtils.length(data));  final String response=UrlUtils.postRequest(new URL(uploadUrl),data,"utf-8","application/x-www-form-urlencoded",true,READ_TIMEOUT,CONNECTION_TIMEOUT);  if (StringUtils.isEmpty(response)) {    LOG.error("Response for {} is empty",uploadUrl);    throw new IOException("Response is empty.");  }  LOG.debug("Got response: {}",response);  return response;}  }
class C{  @Descriptor("Export or import a SecretKeyEntry. " + "The Java Keytool does not allow for exporting or importing SecretKeyEntries.") public void keytool(CommandSession session,@Parameter(names={"-i","--import"},presentValue="true",absentValue="false") boolean doImport,@Parameter(names={"-e","--export"},presentValue="true",absentValue="false") boolean doExport,@Descriptor("key alias") String alias){  if (doImport ^ doExport) {    String type=IdentityServer.getInstance().getProperty("openidm.keystore.type",KeyStore.getDefaultType());    String provider=IdentityServer.getInstance().getProperty("openidm.keystore.provider");    String location=IdentityServer.getInstance().getProperty("openidm.keystore.location");    try {      KeyStore ks=(provider == null || provider.trim().length() == 0) ? KeyStore.getInstance(type) : KeyStore.getInstance(type,provider);      if (location != null) {        File configFile=IdentityServer.getFileForInstallPath(location);        if (configFile.exists()) {          try (FileInputStream in=new FileInputStream(configFile)){            session.getConsole().append("Use KeyStore from: ").println(configFile.getAbsolutePath());            char[] passwordArray=System.console().readPassword("Please enter the password: ");            char[] passwordCopy=Arrays.copyOf(passwordArray,passwordArray.length);            Arrays.fill(passwordArray,' ');            ks.load(in,passwordCopy);            if (doExport) {              KeyStore.Entry key=ks.getEntry(alias,new KeyStore.PasswordProtection(passwordCopy));              if (key instanceof KeyStore.SecretKeyEntry) {                KeyStore.SecretKeyEntry secretKeyEntry=(KeyStore.SecretKeyEntry)key;                session.getConsole().append("[OK] ").println(secretKeyEntry);                StringBuilder sb=new StringBuilder(secretKeyEntry.getSecretKey().getAlgorithm());                sb.append(":").append(new BigInteger(1,secretKeyEntry.getSecretKey().getEncoded()).toString(16));                session.getConsole().println(sb);              } else {                session.getConsole().println("SecretKeyEntry with this alias is not in KeyStore");              }            } else {              if (ks.containsAlias(alias)) {                session.getConsole().println("KeyStore contains a key with this alias");              } else {                session.getConsole().println("Enter the key: ");                Scanner scanner=new Scanner(session.getKeyboard());                String[] tokens=scanner.nextLine().split(":");                if (tokens.length == 2) {                  byte[] encoded=new BigInteger(tokens[1],16).toByteArray();                  javax.crypto.SecretKey mySecretKey=new SecretKeySpec(encoded,tokens[0]);                  KeyStore.SecretKeyEntry skEntry=new KeyStore.SecretKeyEntry(mySecretKey);                  ks.setEntry(alias,skEntry,new KeyStore.PasswordProtection(passwordCopy));                  try (FileOutputStream fos=new FileOutputStream(configFile)){                    ks.store(fos,passwordCopy);                  }                 } else {                  session.getConsole().println("Invalid key input");                }              }            }          }         } else {          session.getConsole().append("KeyStore file: ").append(configFile.getAbsolutePath()).println(" does not exists.");        }      }    } catch (    Exception e) {      session.getConsole().println(e.getMessage());    }  } else {    session.getConsole().println("Import or Export have to be exclusively defined.");  }}  }
class C{  public List<String> command(){  return command;}  }
class C{  private final void assertIsLocPathIterator(Expression expr1,ExpressionOwner eo) throws RuntimeException {  if (!(expr1 instanceof LocPathIterator)) {    String errMsg;    if (expr1 instanceof Variable) {      errMsg="Programmer's assertion: expr1 not an iterator: " + ((Variable)expr1).getQName();    } else {      errMsg="Programmer's assertion: expr1 not an iterator: " + expr1.getClass().getName();    }    throw new RuntimeException(errMsg + ", " + eo.getClass().getName()+ " "+ expr1.exprGetParent());  }}  }
class C{  public SignatureVisitor visitInterfaceBound(){  return this;}  }
class C{  public Set searchOrganizationalUnits(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(ORGANIZATIONAL_UNIT),getSearchFilter(AMObject.ORGANIZATIONAL_UNIT),wildcard,avPairs,level);}  }
class C{  public void testCertPathBuilder03() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    CertPathBuilder cpb=CertPathBuilder.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",cpb.getAlgorithm(),validValues[i]);  }}  }
class C{  public boolean isWritable(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return colInfo[columnIndex].writable;}  }
class C{  public static void clear(){  if ((authCtxObjHash != null) && (!authCtxObjHash.isEmpty())) {    authCtxObjHash.clear();  }  if ((authContextHash != null) && (!authContextHash.isEmpty())) {    authContextHash.clear();  }}  }
class C{  public void add(KeywordMap map){  for (int i=0; i < map.map.length; i++) {    Keyword k=map.map[i];    while (k != null) {      add(k.keyword,k.id);      k=k.next;    }  }}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof ApplicationPrincipal)) {    return false;  }  ApplicationPrincipal that=(ApplicationPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  public static Event35.Builder newBuilder(){  return new Event35.Builder();}  }
class C{  public static void initiateAuthnRequest(final HttpServletRequest request,final HttpServletResponse response,final String metaAlias,final String idpEntityID,final Map paramsMap,final SAML2EventLogger auditor) throws SAML2Exception {  try {    String spEntityID=getSPEntityId(metaAlias);    String realm=SAML2MetaUtils.getRealmByMetaAlias(metaAlias);    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("SPSSOFederate : spEntityID is :" + spEntityID);      SAML2Utils.debug.message("SPSSOFederate realm is :" + realm);    }    initiateAuthnRequest(request,response,spEntityID,idpEntityID,realm,paramsMap,auditor);  } catch (  SAML2MetaException sme) {    SAML2Utils.debug.error("SPSSOFederate: Error retreiving spEntityID from MetaAlias",sme);    throw new SAML2Exception(SAML2Utils.bundle.getString("metaAliasError"));  }}  }
class C{  public LogException(String msg){  super(msg);  excep_type=0;}  }
class C{  public XMLStringBuffer(){  this(DEFAULT_SIZE);}  }
class C{  private void receiveTopo(TopologyMsg topoMsg,int rsServerId){  final Topology newTopo=computeNewTopology(topoMsg,rsServerId);  for (  DSInfo dsInfo : newTopo.replicaInfos.values()) {    domain.setEclIncludes(dsInfo.getDsId(),dsInfo.getEclIncludes(),dsInfo.getEclIncludesForDeletes());  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.DSTString createDSTString() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.DSTStringImpl();}  }
class C{  public static int dpToPx(Context context,float dp){  DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();  return (int)((dp * displayMetrics.density) + 0.5);}  }
class C{  public EnigmaLoader(Map<String,ClassNode> nodes){  super(nodes);}  }
class C{  public final AMConfigAuditEventBuilder realm(String realm){  putRealm(jsonValue,realm);  return self();}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int type){}  }
class C{  private void init(Class<?> defClass,String name,Object type,int flags){  this.clazz=defClass;  this.name=name;  this.type=type;  this.flags=flags;  assert (testAnyFlags(ALL_KINDS));  assert (this.resolution == null);}  }
class C{  private TypeDescriptor(final int sort,final char[] buf,final int off,final int len){  this.sort=sort;  this.buf=buf;  this.off=off;  this.len=len;}  }
class C{  public static boolean contains(@NonNull String key){  failIfNotInitialized();  try {    return mCache.contains(key);  } catch (  Exception e) {    return false;  }}  }
class C{  static MethodType makeImpl(Class<?> rtype,Class<?>[] ptypes,boolean trusted){  MethodType mt=internTable.get(new MethodType(ptypes,rtype));  if (mt != null)   return mt;  if (ptypes.length == 0) {    ptypes=NO_PTYPES;    trusted=true;  }  mt=new MethodType(rtype,ptypes,trusted);  mt.form=MethodTypeForm.findForm(mt);  return internTable.add(mt);}  }
class C{  boolean cancel0(){  setPeriod(-2l);  return true;}  }
class C{  @Override public String toJson(){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionSerializer());  return gson.create().toJson(this);}  }
class C{  public static String catenateArrayItems(XMPMeta xmp,String schemaNS,String arrayName,String separator,String quotes,boolean allowCommas) throws XMPException {  return XMPUtilsImpl.catenateArrayItems(xmp,schemaNS,arrayName,separator,quotes,allowCommas);}  }
class C{  public DatatypeConfigurationException(String message){  super(message);}  }
class C{  protected void startClient(int port){  t=new Thread(new SSClient(port),"SSClient");  t.start();  try {    Thread.sleep(1000);  } catch (  InterruptedException e) {    System.out.println("Exception during startClinet()" + e.toString());  }}  }
class C{  void unassignPolicies(String serviceName,Set policyDNs,boolean toVerify) throws AMException, SSOException {  if ((policyDNs == null) || (policyDNs.isEmpty())) {    return;  }  AMTemplate template=getTemplate(serviceName,AMTemplate.POLICY_TEMPLATE);  unassignPolicies(template,policyDNs,toVerify);}  }
class C{  @Override public OpenIdResolver createResolver(String issuerFromJwk,String cryptoContextType,String cryptoContextValue,URL cryptoContextValueUrl) throws FailedToLoadJWKException {  OpenIdResolver newResolver;  if (OpenIdConnectConfig.CRYPTO_CONTEXT_TYPE_CLIENT_SECRET.equals(cryptoContextType)) {    newResolver=openIdResolverFactory.createSharedSecretResolver(issuerFromJwk,cryptoContextValue);  } else   if (OpenIdConnectConfig.CRYPTO_CONTEXT_TYPE_CONFIG_URL.equals(cryptoContextType)) {    newResolver=openIdResolverFactory.createFromOpenIDConfigUrl(cryptoContextValueUrl);    if (!issuerFromJwk.equals(newResolver.getIssuer())) {      throw new IllegalStateException("The specified issuer, " + issuerFromJwk + ", does not match the issuer, "+ newResolver.getIssuer()+ " referenced by the configuration url, "+ cryptoContextValue);    }  } else   if (OpenIdConnectConfig.CRYPTO_CONTEXT_TYPE_JWK_URL.equals(cryptoContextType)) {    newResolver=openIdResolverFactory.createJWKResolver(issuerFromJwk,cryptoContextValueUrl,HttpURLConnectionManager.getReadTimeout(),HttpURLConnectionManager.getConnectTimeout());  } else {    throw new IllegalArgumentException("The specified cryptoContextType, " + cryptoContextType + " was unexpected!");  }  OpenIdResolver oldResolver;  if ((oldResolver=resolverMap.putIfAbsent(cryptoContextValue,newResolver)) != null) {    return oldResolver;  }  return newResolver;}  }
class C{  @Override public final void cancel(){  if (isValid) {    isValid=false;    ((AbstractSelector)selector()).cancel(this);  }}  }
class C{  public void focusGained(FocusEvent e){  ((FocusListener)a).focusGained(e);  ((FocusListener)b).focusGained(e);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  boolean state;  doc=(Document)load("staff",true);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(2);  ((Element)testNode).removeAttribute("street");  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  assertNotNull("streetAttrNotNull",streetAttr);  state=streetAttr.getSpecified();  assertFalse("attrSpecifiedValueRemoveAssert",state);}  }
class C{  public WritableRaster createCompatibleDestRaster(Raster src){  return src.createCompatibleWritableRaster(src.getWidth(),src.getHeight());}  }
class C{  public boolean removeRESTRemotePolicyListener(SSOToken appToken,String serviceName,String notificationURL){  boolean status=false;  URL policyServiceURL=null;  remotePolicyListeners.remove(notificationURL);  if (appToken != null) {    try {      policyServiceURL=getPolicyServiceURL(appToken);    } catch (    PolicyException pe) {      debug.error("ResourceResultCache.removeRemotePolicyListener():" + "Can not remove policy listner:",pe);    }  }  if (appToken != null) {    try {      String policyServiceListenerURL=null;      policyServiceListenerURL=getRESTPolicyServiceListenerURL(appToken);      if (debug.messageEnabled()) {        debug.message("ResourceResultCache." + "removeRESTRemotePolicyListener():" + "serviceName=" + serviceName + ":notificationURL="+ notificationURL+ ":policyServiceListenerURL="+ policyServiceListenerURL);      }      StringBuilder sb=new StringBuilder();      sb.append(policyServiceListenerURL).append("/");      sb.append(URLEncoder.encode(notificationURL,"UTF-8"));      Set<String> resourceNames=null;      sb.append("?");      sb.append(buildRegisterListenerQueryString(appToken,serviceName,resourceNames));      String restUrl=sb.toString();      String resourceContent=deleteRESTResourceContent(appToken,restUrl);      if (debug.messageEnabled()) {        debug.message("ResourceResultCache." + "removeRESTRemotePolicyListener():" + ":resourceContent="+ resourceContent);      }      remotePolicyListeners.remove(notificationURL);    } catch (    UnsupportedEncodingException e) {      debug.error("ResourceResultCache.addRESTRemotePolicyListener():" + "Can not add policy listner",e);    }catch (    SSOException se) {      debug.error("ResourceResultCache.addRESTRemotePolicyListener():" + "Can not add policy listner",se);    }catch (    PolicyException pe) {      debug.error("ResourceResultCache.removeRESTRemotePolicyListener():" + "Can not remove policy listner",pe);    }  } else {    if (debug.messageEnabled()) {      debug.message("ResourceResultCache.removeRESTRemotePolicyListener():" + "not removing listener, app sso token is null");    }  }  return status;}  }
class C{  public MaterialBarcodeScannerBuilder withBleepEnabled(boolean enabled){  mBleepEnabled=enabled;  return this;}  }
class C{  protected GenericObject next(){  if (myListIterator == null) {    myListIterator=this.listIterator(0);  }  try {    return (GenericObject)myListIterator.next();  } catch (  NoSuchElementException ex) {    myListIterator=null;    return null;  }}  }
class C{  public static Feature fromGeometry(Geometry geometry){  return new Feature(geometry,new JsonObject(),null);}  }
class C{  private boolean isELReserved(String id){  int i=0;  int j=reservedWords.length;  while (i < j) {    int k=(i + j) / 2;    int result=reservedWords[k].compareTo(id);    if (result == 0) {      return true;    }    if (result < 0) {      i=k + 1;    } else {      j=k;    }  }  return false;}  }
class C{  public void checkIsoConformance(Object obj,IsoKey key){}  }
class C{  public SQLSyntaxErrorException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  private void positionAndSizeAsIcon(){  if (!(getParent() instanceof DragLayer))   return;  setScaleX(0.8f);  setScaleY(0.8f);  setAlpha(0f);  mState=STATE_SMALL;}  }
class C{  public AccountService retrieveByUsername(String username,Handler<AsyncResult<Account>> resultHandler){  delegate.retrieveByUsername(username,resultHandler);  return this;}  }
class C{  public synchronized void reset(){  count=0;}  }
class C{  protected ZipEntry createZipEntry(String name){  JarEntry e=new JarEntry(name);  if (man != null) {    e.attr=man.getAttributes(name);  }  return e;}  }
class C{  public synchronized void login(String username,String password,String language) throws XmlRpcFault {  Map<?,?> response=invoke("LogIn",username,password,language,useragent);  token=response.get("token").toString();}  }
class C{  BookPage(Printable painter,PageFormat format){  if (painter == null || format == null) {    throw new NullPointerException();  }  mFormat=format;  mPainter=painter;}  }
class C{  public IdentityResourceV3(String objectType,MailServerLoader mailServerLoader,IdentityServicesImpl identityServices,CoreWrapper coreWrapper,RestSecurityProvider restSecurityProvider,ConsoleConfigHandler configHandler,BaseURLProviderFactory baseURLProviderFactory,Set<String> patchableAttributes,Set<UiRolePredicate> uiRolePredicates){  this.identityResourceV2=new IdentityResourceV2(objectType,mailServerLoader,identityServices,coreWrapper,restSecurityProvider,configHandler,baseURLProviderFactory,uiRolePredicates);  this.objectType=objectType;  this.identityServices=identityServices;  this.patchableAttributes=patchableAttributes;}  }
class C{  public boolean after(OmniDate compareDate){  return value.after(compareDate.getDate());}  }
class C{  public int size(){  return getArray().length;}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {  writer.writeStartSequence(ASN1.UNIVERSAL_OCTET_STRING_TYPE);  writer.writeStartSequence();  if (warningType != null) {    writer.writeStartSequence(TYPE_WARNING_ELEMENT);    writer.writeInteger(warningType.getType(),warningValue);    writer.writeEndSequence();  }  if (errorType != null) {    writer.writeInteger(TYPE_ERROR_ELEMENT,errorType.intValue());  }  writer.writeEndSequence();  writer.writeEndSequence();}  }
class C{  public StringBuffer insert(int index,int i){  return insert(index,Integer.toString(i));}  }
class C{  private MappedClass readClass(String[] parts){  String original=parts[1];  if (original.startsWith("none/")) {    original=original.substring("none/".length());  }  MappedClass mc=null;  if (parts.length == 2) {    mc=new MappedClass(nodes == null ? fakeNode(original) : nodes.get(original),original);  } else   if (parts.length == 3) {    String newName=parts[2];    mc=new MappedClass(nodes == null ? fakeNode(original) : nodes.get(original),newName);  }  return mc;}  }
class C{  public boolean isVisible(){  if (this == root)   return true;  TreeStateNode parent=(TreeStateNode)getParent();  return (parent != null && parent.isExpanded() && parent.isVisible());}  }
class C{  public void printStats(){  int internalSessionCount=sessionAccessManager.getInternalSessionLimit();  if (0 != internalSessionCount) {    int maxSessions=internalSessionCount;    int maxActiveSessions=monitoringOperations.getActiveSessions();    int notificationQueue=sessionNotificationSender.getNotificationQueueSize();    if (maxSessions > peakSessions) {      peakSessions=maxSessions;    }    if (maxActiveSessions > peakActiveSessions) {      peakActiveSessions=maxActiveSessions;    }    if (notificationQueue > peakNotificationQueue) {      peakNotificationQueue=notificationQueue;    }    stats.record("Max sessions in session table Current/Peak:" + maxSessions + "/"+ peakSessions+ "\n"+ "Max active sessions Current/Peak:"+ maxActiveSessions+ "/"+ peakActiveSessions+ "\n"+ "Session Notifications in Queue Current/Peak:"+ notificationQueue+ "/"+ peakNotificationQueue);  } else {    stats.record("No sessions found in session table");  }}  }
class C{  @SuppressWarnings("deprecation") private boolean stopOrSuspend(boolean suspend){  boolean suicide=false;  Thread us=Thread.currentThread();  int ngroupsSnapshot;  ThreadGroup[] groupsSnapshot=null;synchronized (this) {    checkAccess();    for (int i=0; i < nthreads; i++) {      if (threads[i] == us)       suicide=true; else       if (suspend)       threads[i].suspend(); else       threads[i].stop();    }    ngroupsSnapshot=ngroups;    if (groups != null) {      groupsSnapshot=Arrays.copyOf(groups,ngroupsSnapshot);    }  }  for (int i=0; i < ngroupsSnapshot; i++)   suicide=groupsSnapshot[i].stopOrSuspend(suspend) || suicide;  return suicide;}  }
class C{  public static DataProviderID newInternalID(final String name){  return new DataProviderID(name,true);}  }
class C{  public void _write(OutputStream output){  output.write_fixed(value);}  }
class C{  public void test_setII(){  Calendar cal=Calendar.getInstance(TimeZone.getTimeZone("EST"));  cal.clear();  cal.set(Calendar.YEAR,2002);  assertTrue("Incorrect result 0: " + cal.getTime().getTime(),cal.getTime().getTime() == 1009861200000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.MONTH,Calendar.MARCH);  assertTrue("Incorrect result 0a: " + cal.getTime(),cal.getTime().getTime() == 1014958800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,24);  assertTrue("Incorrect result 0b: " + cal.getTime(),cal.getTime().getTime() == 1011848400000L);  cal.set(Calendar.MONTH,Calendar.OCTOBER);  cal.set(Calendar.DATE,31);  cal.set(Calendar.MONTH,Calendar.NOVEMBER);  cal.set(Calendar.DATE,26);  assertTrue("Incorrect month: " + cal.get(Calendar.MONTH),cal.get(Calendar.MONTH) == Calendar.NOVEMBER);  int dow=cal.get(Calendar.DAY_OF_WEEK);  cal.set(Calendar.DATE,27);  assertTrue("Incorrect DAY_OF_WEEK: " + cal.get(Calendar.DAY_OF_WEEK) + " expected: "+ dow,cal.get(Calendar.DAY_OF_WEEK) != dow);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  assertTrue("Incorrect result 0c1: " + cal.getTime().getTime(),cal.getTime().getTime() == 1010379600000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);  assertTrue("Incorrect result 0c2: " + cal.getTime().getTime(),cal.getTime().getTime() == 1009861200000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);  assertTrue("Incorrect result 0c3: " + cal.getTime(),cal.getTime().getTime() == 1010034000000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_MONTH,2);  assertTrue("Incorrect result 0d: " + cal.getTime(),cal.getTime().getTime() == 1010293200000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,2);  assertTrue("Incorrect result 0e: " + cal.getTime(),cal.getTime().getTime() == 1010898000000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,11);  assertTrue("Incorrect result 0f: " + cal.getTime(),cal.getTime().getTime() == 1015736400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,24);  cal.set(Calendar.WEEK_OF_YEAR,11);  assertTrue("Incorrect result 0g: " + cal.getTime(),cal.getTime().getTime() == 1011848400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.get(Calendar.WEEK_OF_YEAR);  cal.set(Calendar.WEEK_OF_YEAR,11);  assertTrue("Incorrect result 0h: " + cal.getTime(),cal.getTime().getTime() == 1015909200000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_YEAR,170);  cal.set(Calendar.WEEK_OF_YEAR,11);  cal.set(Calendar.MONTH,Calendar.JANUARY);  cal.set(Calendar.DATE,5);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  assertTrue("Incorrect result 1: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,11);  cal.set(Calendar.MONTH,Calendar.JANUARY);  cal.set(Calendar.DATE,5);  cal.set(Calendar.DAY_OF_YEAR,170);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  assertTrue("Incorrect result 1a: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DATE,11);  cal.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);  assertTrue("Incorrect result 1b: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);  assertEquals("Incorrect result 1b: " + cal.getTime(),1015304400000L,cal.getTime().getTime());  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,1);  cal.set(Calendar.WEEK_OF_MONTH,3);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DATE,5);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  assertTrue("Incorrect result 2: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,2);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DATE,5);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  assertTrue("Incorrect result 3: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,1);  cal.set(Calendar.WEEK_OF_MONTH,3);  cal.set(Calendar.DATE,25);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  assertTrue("Incorrect result 4: " + cal.getTime(),cal.getTime().getTime() == 1010984400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,11);  cal.set(Calendar.DATE,25);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  cal.set(Calendar.MONTH,Calendar.JANUARY);  assertTrue("Incorrect result 5: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DATE,11);  cal.set(Calendar.MONTH,Calendar.MARCH);  assertTrue("Incorrect result 5a: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DATE,11);  cal.set(Calendar.WEEK_OF_MONTH,1);  cal.set(Calendar.MONTH,Calendar.MARCH);  assertTrue("Incorrect result 5b: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DATE,5);  cal.set(Calendar.WEEK_OF_MONTH,3);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  cal.set(Calendar.MONTH,Calendar.MARCH);  assertTrue("Incorrect result 5c: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DATE,11);  assertTrue("Incorrect result 6: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,12);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  cal.set(Calendar.DATE,14);  assertTrue("Incorrect result 7: " + cal.getTime(),cal.getTime().getTime() == 1010984400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_YEAR,70);  cal.set(Calendar.MONTH,Calendar.JANUARY);  assertTrue("Incorrect result 8: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_YEAR,170);  cal.set(Calendar.DATE,11);  cal.set(Calendar.MONTH,Calendar.MARCH);  assertTrue("Incorrect result 8a: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,15);  cal.set(Calendar.DAY_OF_YEAR,70);  cal.set(Calendar.MONTH,Calendar.JANUARY);  assertTrue("Incorrect result 8b: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_YEAR,70);  cal.set(Calendar.DATE,14);  assertTrue("Incorrect result 9: " + cal.getTime(),cal.getTime().getTime() == 1010984400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_YEAR,15);  cal.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);  cal.set(Calendar.DATE,14);  assertTrue("Incorrect result 9a: " + cal.getTime(),cal.getTime().getTime() == 1010984400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_WEEK,Calendar.MONDAY);  cal.set(Calendar.DATE,14);  cal.set(Calendar.WEEK_OF_YEAR,11);  assertTrue("Incorrect result 9b: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,14);  cal.set(Calendar.WEEK_OF_YEAR,11);  assertTrue("Incorrect result 9c: " + cal.getTime(),cal.getTime().getTime() == 1010984400000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.WEEK_OF_MONTH,1);  cal.set(Calendar.DAY_OF_WEEK,Calendar.THURSDAY);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DATE,11);  assertTrue("Incorrect result 9d: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_YEAR,70);  cal.set(Calendar.DAY_OF_WEEK,Calendar.TUESDAY);  assertTrue("Incorrect result 10: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,11);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.DAY_OF_WEEK_IN_MONTH,1);  assertTrue("Incorrect result 11: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,11);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.WEEK_OF_YEAR,15);  assertTrue("Incorrect result 12: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DATE,11);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.WEEK_OF_MONTH,1);  assertTrue("Incorrect result 13: " + cal.getTime(),cal.getTime().getTime() == 1015822800000L);  cal.clear();  cal.set(Calendar.YEAR,2002);  cal.set(Calendar.DAY_OF_YEAR,111);  cal.get(Calendar.YEAR);  cal.set(Calendar.MONTH,Calendar.MARCH);  cal.set(Calendar.AM_PM,Calendar.AM);  assertTrue("Incorrect result 14: " + cal.getTime(),cal.getTime().getTime() == 1016686800000L);  int hour=cal.get(Calendar.HOUR);  cal.set(Calendar.HOUR,hour);  cal.set(Calendar.AM_PM,Calendar.PM);  assertEquals("AM_PM not changed",Calendar.PM,cal.get(Calendar.AM_PM));  cal.set(Calendar.AM_PM,Calendar.AM);  assertEquals("AM_PM was changed 1",Calendar.AM,cal.get(Calendar.AM_PM));  int hourOfDay=cal.get(Calendar.HOUR_OF_DAY);  hour=cal.get(Calendar.HOUR);  cal.set(Calendar.AM_PM,Calendar.PM);  assertEquals("AM_PM was changed 2",Calendar.PM,cal.get(Calendar.AM_PM));  assertEquals(hour,cal.get(Calendar.HOUR));  assertEquals(hourOfDay + 12,cal.get(Calendar.HOUR_OF_DAY));  cal=Calendar.getInstance();  int oldValue=cal.get(Calendar.AM_PM);  int newValue=(oldValue == Calendar.AM) ? Calendar.PM : Calendar.AM;  cal.set(Calendar.AM_PM,newValue);  newValue=cal.get(Calendar.AM_PM);  assertTrue(newValue != oldValue);}  }
class C{  private void markCacheComplete(){  NodeVector nv=getVector();  if (nv != null) {    m_cache.setCacheComplete(true);  }}  }
class C{  public int size(){  return list.size();}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  System.out.println("Got an INVITE  " + request);  this.inviteSeen=true;  try {    System.out.println("shootme: got an Invite sending OK");    Response response=messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=addressFactory.createAddress("Shootme <sips:" + myAddress + ":"+ myPort+ ";transport="+ responseTransport+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      System.out.println("This is a RE INVITE ");      if (st.getDialog() != dialog) {        System.out.println("Whoopsa Daisy Dialog Mismatch");        TlsTest.fail("Whoopsa Daisy Dialog Mismatch");      }    }    System.out.println("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      ContentTypeHeader contentTypeHeader=headerFactory.createContentTypeHeader("application","sdp");      System.out.println("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      System.out.println("Dialog " + dialog);      System.out.println("Dialog state " + dialog.getState());    }    st.sendResponse(response);    TransactionExt stExt=(TransactionExt)st;    Certificate[] certs=stExt.getPeerCertificates();    System.out.println("Certs = " + certs);    for (    Certificate cert : certs) {      System.out.println("Cert = " + cert);    }    response=messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    this.inviteTid=st;  } catch (  Exception ex) {    ex.printStackTrace();    TlsTest.fail("Unexpected exception");  }}  }
class C{  public static GenericIntermediateResponse unmodifiableGenericIntermediateResponse(final GenericIntermediateResponse response){  if (response instanceof UnmodifiableGenericIntermediateResponseImpl) {    return response;  }  return new UnmodifiableGenericIntermediateResponseImpl(response);}  }
class C{  public PdfCanvas resetFillColorGray(){  return setFillColorGray(0);}  }
class C{  public static LDAPFilter decode(String filterString) throws LDAPException {  if (filterString == null) {    LocalizableMessage message=ERR_LDAP_FILTER_STRING_NULL.get();    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);  }  try {    return decode(filterString,0,filterString.length());  } catch (  LDAPException le) {    logger.traceException(le);    throw le;  }catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_FILTER_UNCAUGHT_EXCEPTION.get(filterString,e);    throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message,e);  }}  }
class C{  public static SearchScope valueOf(String name){  for (  SearchScope searchScope : ELEMENTS) {    if (searchScope.name.equals(name)) {      return searchScope;    }  }  return null;}  }
class C{  @Override public void write(char[] chr,int st,int end) throws IOException {  out.write(chr,st,end);}  }
class C{  private void adjustScrollPositionIfNecessary(JList list,int index,int direction){  if (direction == 0) {    return;  }  Rectangle cellBounds=list.getCellBounds(index,index);  Rectangle visRect=list.getVisibleRect();  if (cellBounds != null && !visRect.contains(cellBounds)) {    if (list.getLayoutOrientation() == JList.VERTICAL_WRAP && list.getVisibleRowCount() <= 0) {      if (list.getComponentOrientation().isLeftToRight()) {        if (direction > 0) {          int x=Math.max(0,cellBounds.x + cellBounds.width - visRect.width);          int startIndex=list.locationToIndex(new Point(x,cellBounds.y));          Rectangle startRect=list.getCellBounds(startIndex,startIndex);          if (startRect.x < x && startRect.x < cellBounds.x) {            startRect.x+=startRect.width;            startIndex=list.locationToIndex(startRect.getLocation());            startRect=list.getCellBounds(startIndex,startIndex);          }          cellBounds=startRect;        }        cellBounds.width=visRect.width;      } else {        if (direction > 0) {          int x=cellBounds.x + visRect.width;          int rightIndex=list.locationToIndex(new Point(x,cellBounds.y));          Rectangle rightRect=list.getCellBounds(rightIndex,rightIndex);          if (rightRect.x + rightRect.width > x && rightRect.x > cellBounds.x) {            rightRect.width=0;          }          cellBounds.x=Math.max(0,rightRect.x + rightRect.width - visRect.width);          cellBounds.width=visRect.width;        } else {          cellBounds.x+=Math.max(0,cellBounds.width - visRect.width);          cellBounds.width=Math.min(cellBounds.width,visRect.width);        }      }    } else {      if (direction > 0 && (cellBounds.y < visRect.y || cellBounds.y + cellBounds.height > visRect.y + visRect.height)) {        int y=Math.max(0,cellBounds.y + cellBounds.height - visRect.height);        int startIndex=list.locationToIndex(new Point(cellBounds.x,y));        Rectangle startRect=list.getCellBounds(startIndex,startIndex);        if (startRect.y < y && startRect.y < cellBounds.y) {          startRect.y+=startRect.height;          startIndex=list.locationToIndex(startRect.getLocation());          startRect=list.getCellBounds(startIndex,startIndex);        }        cellBounds=startRect;        cellBounds.height=visRect.height;      } else {        cellBounds.height=Math.min(cellBounds.height,visRect.height);      }    }    list.scrollRectToVisible(cellBounds);  }}  }
class C{  public void close() throws java.io.IOException {  raf.close();}  }
class C{  public static String toUTCDateFormat(Date date){  return dateToString(date,UTC_DATE_Z_FORMAT);}  }
class C{  public ObjectReader(Socket socket){  try {    this.buffer=new XByteBuffer(socket.getReceiveBufferSize(),true);  } catch (  IOException x) {    log.warn(sm.getString("objectReader.retrieveFailed.socketReceiverBufferSize"));    this.buffer=new XByteBuffer(43800,true);  }}  }
class C{  public ApplicationDispatcher(Wrapper wrapper,String requestURI,String servletPath,String pathInfo,String queryString,Mapping mapping,String name){  super();  this.wrapper=wrapper;  this.context=(Context)wrapper.getParent();  this.requestURI=requestURI;  this.servletPath=servletPath;  this.pathInfo=pathInfo;  this.queryString=queryString;  this.mapping=mapping;  this.name=name;}  }
class C{  public boolean delete(Long eventID){  if (eventID == null) {    throw new IllegalArgumentException("primary key null.");  }  return database.delete(DATABASE_TABLE,KEY_EVENTID + "=" + eventID,null) > 0;}  }
class C{  @Override public ConnectionChangeRecordWriter writeChangeRecord(final ModifyDNRequest change) throws LdapException {  Reject.ifNull(change);  connection.modifyDN(change);  return this;}  }
class C{  private boolean isServerAlreadyRegistered(Map<ServerProperty,Object> serverProperties) throws ADSContextException {  return isExistingEntry(makeDNFromServerProperties(serverProperties));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(systemId01.class,args);}  }
class C{  public static boolean isIgnoreProfileSet(Object session) throws SessionException {  boolean result=false;  String classMethod="SAML2Utils.isIgnoreProfileSet: ";  if (session != null) {    String[] values=SessionManager.getProvider().getProperty(session,"UserProfile");    String profile="";    if (values != null && values.length > 0) {      profile=values[0];      result="Ignore".equals(profile);    }    if (debug.messageEnabled()) {      debug.message(classMethod + "User profile from session = " + profile+ " ignoreProfile = "+ result);    }  } else {    if (debug.messageEnabled()) {      debug.message(classMethod + "User session was null");    }  }  return result;}  }
class C{  public IOException(String message,Throwable cause){  super(message,cause);}  }
class C{  private synchronized static void establishCacheManager(){  URL url=PreparedStatementFactory.class.getResource("/ehcache.xml");  logger.debug("Establishing cache manager with config file: " + url.getPath());  if (manager == null) {    manager=CacheManager.newInstance(url);  }  cacheManagerEstablished=true;}  }
class C{  private void DTDprolog() throws SAXException, IOException {  final java.io.Writer writer=m_writer;  if (m_needToOutputDocTypeDecl) {    outputDocTypeDecl(m_elemContext.m_elementName,false);    m_needToOutputDocTypeDecl=false;  }  if (m_inDoctype) {    writer.write(" [");    writer.write(m_lineSep,0,m_lineSepLen);    m_inDoctype=false;  }}  }
class C{  public static CompareResult unmodifiableCompareResult(final CompareResult result){  if (result instanceof UnmodifiableCompareResultImpl) {    return result;  }  return new UnmodifiableCompareResultImpl(result);}  }
class C{  private static String buildCacheKey(String realm,String cotName){  return realm + "//" + cotName;}  }
class C{  MethodType asSpreaderType(Class<?> arrayType,int arrayLength){  assert (parameterCount() >= arrayLength);  int spreadPos=ptypes.length - arrayLength;  if (arrayLength == 0)   return this;  if (arrayType == Object[].class) {    if (isGeneric())     return this;    if (spreadPos == 0) {      MethodType res=genericMethodType(arrayLength);      if (rtype != Object.class) {        res=res.changeReturnType(rtype);      }      return res;    }  }  Class<?> elemType=arrayType.getComponentType();  assert (elemType != null);  for (int i=spreadPos; i < ptypes.length; i++) {    if (ptypes[i] != elemType) {      Class<?>[] fixedPtypes=ptypes.clone();      Arrays.fill(fixedPtypes,i,ptypes.length,elemType);      return methodType(rtype,fixedPtypes);    }  }  return this;}  }
class C{  private static int parseValuePattern(String dnString,int pos,List<ByteString> attributeValues) throws DirectoryException {  int length=dnString.length();  if (pos >= length) {    return pos;  }  char c=dnString.charAt(pos++);  if (c == '#') {    StringBuilder hexString=new StringBuilder();    if (pos + 2 > length) {      LocalizableMessage message=ERR_ATTR_SYNTAX_DN_HEX_VALUE_TOO_SHORT.get(dnString);      throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);    }    for (int i=0; i < 2; i++) {      c=dnString.charAt(pos++);      if (isHexDigit(c)) {        hexString.append(c);      } else {        LocalizableMessage message=ERR_ATTR_SYNTAX_DN_INVALID_HEX_DIGIT.get(dnString,c);        throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);      }    }    while (pos < length) {      c=dnString.charAt(pos++);      if (isHexDigit(c)) {        hexString.append(c);        if (pos < length) {          c=dnString.charAt(pos++);          if (isHexDigit(c)) {            hexString.append(c);          } else {            LocalizableMessage message=ERR_ATTR_SYNTAX_DN_INVALID_HEX_DIGIT.get(dnString,c);            throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);          }        } else {          LocalizableMessage message=ERR_ATTR_SYNTAX_DN_HEX_VALUE_TOO_SHORT.get(dnString);          throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);        }      } else       if (c == ' ' || c == ',' || c == ';') {        pos--;        break;      } else {        LocalizableMessage message=ERR_ATTR_SYNTAX_DN_INVALID_HEX_DIGIT.get(dnString,c);        throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);      }    }    try {      byte[] bytes=hexStringToByteArray(hexString.toString());      attributeValues.add(ByteString.wrap(bytes));      return pos;    } catch (    Exception e) {      logger.traceException(e);      throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,ERR_ATTR_SYNTAX_DN_ATTR_VALUE_DECODE_FAILURE.get(dnString,e));    }  } else   if (c == '"') {    boolean escaped=false;    StringBuilder valueString=new StringBuilder();    while (true) {      if (pos >= length) {        LocalizableMessage message=ERR_ATTR_SYNTAX_DN_UNMATCHED_QUOTE.get(dnString);        throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);      }      c=dnString.charAt(pos++);      if (escaped) {        valueString.append(c);        escaped=false;      } else       if (c == '\\') {        escaped=true;      } else       if (c == '"') {        break;      } else {        valueString.append(c);      }    }    attributeValues.add(ByteString.valueOfUtf8(valueString));    return pos;  } else {    boolean escaped;    StringBuilder valueString=new StringBuilder();    StringBuilder hexChars=new StringBuilder();    if (c == '\\') {      escaped=true;    } else     if (c == '*') {      escaped=false;      attributeValues.add(ByteString.valueOfUtf8(valueString));    } else {      escaped=false;      valueString.append(c);    }    while (true) {      if (pos >= length) {        appendHexChars(dnString,valueString,hexChars);        break;      }      c=dnString.charAt(pos++);      if (escaped) {        if (isHexDigit(c)) {          if (pos >= length) {            LocalizableMessage message=ERR_ATTR_SYNTAX_DN_ESCAPED_HEX_VALUE_INVALID.get(dnString);            throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);          }          char c2=dnString.charAt(pos++);          if (!isHexDigit(c2)) {            LocalizableMessage message=ERR_ATTR_SYNTAX_DN_ESCAPED_HEX_VALUE_INVALID.get(dnString);            throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);          }          hexChars.append(c);          hexChars.append(c2);        } else {          appendHexChars(dnString,valueString,hexChars);          valueString.append(c);        }        escaped=false;      } else       if (c == '\\') {        escaped=true;      } else       if (c == ',' || c == ';') {        appendHexChars(dnString,valueString,hexChars);        pos--;        break;      } else       if (c == '+') {        appendHexChars(dnString,valueString,hexChars);        pos--;        break;      } else       if (c == '*') {        appendHexChars(dnString,valueString,hexChars);        if (valueString.length() == 0) {          LocalizableMessage message=WARN_PATTERN_DN_CONSECUTIVE_WILDCARDS_IN_VALUE.get(dnString);          throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);        }        attributeValues.add(ByteString.valueOfUtf8(valueString));        valueString=new StringBuilder();        hexChars=new StringBuilder();      } else {        appendHexChars(dnString,valueString,hexChars);        valueString.append(c);      }    }    if (pos > 2 && dnString.charAt(pos - 1) == ' ' && dnString.charAt(pos - 2) != '\\') {      int lastPos=valueString.length() - 1;      while (lastPos > 0) {        if (valueString.charAt(lastPos) != ' ') {          break;        }        valueString.delete(lastPos,lastPos + 1);        lastPos--;      }    }    attributeValues.add(ByteString.valueOfUtf8(valueString));    return pos;  }}  }
class C{  public void hasValidAnnotations(){  assertThatAnnotatedClassHasValidI18n();  assertThatAnnotatedClassHasAnnotatedMethods();  assertThatAllSchemasAreValid();}  }
class C{  public void put(E e) throws InterruptedException {  checkNotNull(e);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    while (count == items.length)     notFull.await();    enqueue(e);  }  finally {    lock.unlock();  }}  }
class C{  public static WritableByteChannel newChannel(final OutputStream out){  checkNotNull(out,"out");  if (out instanceof FileOutputStream && FileOutputStream.class.equals(out.getClass())) {    return ((FileOutputStream)out).getChannel();  }  return new WritableByteChannelImpl(out);}  }
class C{  public TransactionRef(String factory,String factoryLocation){  super("javax.transaction.UserTransaction",factory,factoryLocation);}  }
class C{  public static PolicyChangeNotification parseXML(Node pNode) throws PolicyEvaluationException {  PolicyChangeNotification pcn=new PolicyChangeNotification();  String attr=XMLUtils.getNodeAttributeValue(pNode,SERVICE_NAME);  if (attr == null) {    debug.error("PolicyChangeNotification: missing attribute " + SERVICE_NAME);    String objs[]={SERVICE_NAME};    throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_attribute",objs,null);  }  pcn.setServiceName(attr);  attr=XMLUtils.getNodeAttributeValue(pNode,POLICY_CHANGE_TYPE);  if (attr == null) {    debug.error("PolicyChangeNotification: missing attribute " + POLICY_CHANGE_TYPE);    String objs[]={POLICY_CHANGE_TYPE};    throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_attribute",objs,null);  }  pcn.setPolicyChangeType(attr);  Set nodeSet=XMLUtils.getChildNodes(pNode,RESOURCE_NAME);  if (nodeSet == null) {    if (debug.messageEnabled()) {      debug.message("PolicyChangeNotification.parseXML: " + " no resource name specified");    }    return pcn;  }  Set resNames=new HashSet();  for (Iterator nodes=nodeSet.iterator(); nodes.hasNext(); ) {    Node node=(Node)nodes.next();    String name=XMLUtils.getValueOfValueNode(node);    if (name != null) {      resNames.add(name);    }  }  pcn.setResourceNames(resNames);  return pcn;}  }
class C{  public void select(int selectionStart,int selectionEnd){  int docLength=getDocument().getLength();  if (selectionStart < 0) {    selectionStart=0;  }  if (selectionStart > docLength) {    selectionStart=docLength;  }  if (selectionEnd > docLength) {    selectionEnd=docLength;  }  if (selectionEnd < selectionStart) {    selectionEnd=selectionStart;  }  setCaretPosition(selectionStart);  moveCaretPosition(selectionEnd);}  }
class C{  public static int toInt(byte[] b,int off){  return ((b[off + 3]) & 0xFF) + (((b[off + 2]) & 0xFF) << 8) + (((b[off + 1]) & 0xFF) << 16)+ (((b[off + 0]) & 0xFF) << 24);}  }
class C{  private final void computeObjectClassesAndAttributes(){  if (!ldapError && (objectClasses == null || userAttributes == null || operationalAttributes == null)) {    objectClasses=new HashMap<>();    userAttributes=new HashMap<>();    operationalAttributes=new HashMap<>();    for (    RawAttribute a : rawAttributes) {      try {        Attribute attr=a.toAttribute();        AttributeDescription attrDesc=attr.getAttributeDescription();        AttributeType attrType=attrDesc.getAttributeType();        if (attrType.isNoUserModification() && !isInternalOperation() && !isSynchronizationOperation()) {          throw new LDAPException(LDAPResultCode.UNWILLING_TO_PERFORM,ERR_ADD_ATTR_IS_NO_USER_MOD.get(entryDN,attrDesc));        }        boolean hasBinaryOption=attrDesc.hasOption("binary");        if (attrType.getSyntax().isBEREncodingRequired()) {          if (!hasBinaryOption) {            AttributeBuilder builder=new AttributeBuilder(attr);            builder.setOption("binary");            attr=builder.toAttribute();          }        } else         if (hasBinaryOption) {          throw new LDAPException(LDAPResultCode.UNDEFINED_ATTRIBUTE_TYPE,ERR_ADD_ATTR_IS_INVALID_OPTION.get(entryDN,attrDesc));        }        if (attrType.isObjectClass()) {          for (          ByteString os : a.getValues()) {            String ocName=os.toString();            objectClasses.put(getSchema().getObjectClass(ocName),ocName);          }        } else         if (attrType.isOperational()) {          List<Attribute> attrs=operationalAttributes.get(attrType);          if (attrs == null) {            attrs=new ArrayList<>(1);            operationalAttributes.put(attrType,attrs);          }          attrs.add(attr);        } else {          List<Attribute> attrs=userAttributes.get(attrType);          if (attrs == null) {            attrs=newArrayList(attr);            userAttributes.put(attrType,attrs);          } else {            boolean attributeSeen=false;            for (int i=0; i < attrs.size(); i++) {              Attribute ea=attrs.get(i);              if (ea.getAttributeDescription().equals(attrDesc)) {                AttributeBuilder builder=new AttributeBuilder(ea);                builder.addAll(attr);                attrs.set(i,builder.toAttribute());                attributeSeen=true;              }            }            if (!attributeSeen) {              attrs.add(attr);            }          }        }      } catch (      LDAPException le) {        setResultCode(ResultCode.valueOf(le.getResultCode()));        appendErrorMessage(le.getMessageObject());        objectClasses=null;        userAttributes=null;        operationalAttributes=null;        ldapError=true;        return;      }    }  }}  }
class C{  static public boolean principalNameEqualsUuid(SSOToken token) throws SSOException {  String principalName=token.getPrincipal().getName();  String uuid=token.getProperty(com.sun.identity.shared.Constants.UNIVERSAL_IDENTIFIER);  return principalName.equals(uuid);}  }
class C{  public void optimize_board(){  r_board.userPrintln("Before optimize: Via count: " + r_board.get_vias().size() + ", trace length: "+ Math.round(r_board.cumulative_trace_length()));  boolean route_improved=true;  int curr_pass_no=0;  use_increased_ripup_costs=true;  while (route_improved) {    if (batch_thread.is_stop_requested())     break;    curr_pass_no++;    boolean with_prefered_directions=(curr_pass_no % 2 != 0);    route_improved=optimize_route_pass(curr_pass_no,with_prefered_directions);  }}  }
class C{  public EventReaderDelegate(XMLEventReader reader){  this.reader=reader;}  }
class C{  private boolean authenticate(OAuth2Request request,String clientId,char[] clientSecret,String realm) throws InvalidClientException {  try {    AuthContext lc=new AuthContext(realm);    HttpServletRequest httpRequest=ServletUtils.getRequest(Request.getCurrent());    httpRequest.setAttribute(ISAuthConstants.NO_SESSION_REQUEST_ATTR,"true");    lc.login(AuthContext.IndexType.MODULE_INSTANCE,"Application",null,httpRequest,ServletUtils.getResponse(Response.getCurrent()));    while (lc.hasMoreRequirements()) {      Callback[] callbacks=lc.getRequirements();      List<Callback> missing=new ArrayList<Callback>();      for (      final Callback callback : callbacks) {        if (callback instanceof NameCallback) {          NameCallback nc=(NameCallback)callback;          nc.setName(clientId);        } else         if (callback instanceof PasswordCallback) {          PasswordCallback pc=(PasswordCallback)callback;          pc.setPassword(clientSecret);        } else {          missing.add(callback);        }      }      if (missing.size() > 0) {        throw failureFactory.getException(request,"Missing requirements");      }      lc.submitRequirements(callbacks);    }    if (lc.getStatus() == AuthContext.Status.SUCCESS) {      request.<Request>getRequest().getAttributes().put(AM_CTX_ID,lc.getAuthContextLocal().getLoginState().getActivatedSessionTrackingId());      return true;    } else {      throw failureFactory.getException(request,"Client authentication failed");    }  } catch (  AuthLoginException le) {    logger.error("ClientVerifierImpl::authContext AuthException",le);    throw failureFactory.getException(request,"Client authentication failed");  }}  }
class C{  public static TestSSLContext create(TestKeyStore client,TestKeyStore server){  String provider=StandardNames.JSSE_PROVIDER_NAME;  return create(client,server,provider,provider);}  }
class C{  @Override public boolean isMonitoringRunning(){  return MonitoringUtil.isRunning();}  }
class C{  public Set createOrganizationalUnits(Map organizationalUnitsMap) throws AMException, SSOException {  Iterator iter=organizationalUnitsMap.keySet().iterator();  Set orgUnits=new HashSet();  while (iter.hasNext()) {    String orgUnitName=(String)iter.next();    String orgUnitDN=AMNamingAttrManager.getNamingAttr(ORGANIZATIONAL_UNIT) + "=" + orgUnitName+ ","+ super.entryDN;    Map attributes=(Map)organizationalUnitsMap.get(orgUnitName);    AMOrganizationalUnitImpl orgUnitImpl=new AMOrganizationalUnitImpl(super.token,orgUnitDN);    orgUnitImpl.setAttributes(attributes);    orgUnitImpl.create();    orgUnits.add(orgUnitImpl);  }  return orgUnits;}  }
class C{  protected static ExifParser parse(InputStream inputStream,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,OPTION_IFD_0 | OPTION_IFD_1 | OPTION_IFD_EXIF| OPTION_IFD_GPS| OPTION_IFD_INTEROPERABILITY| OPTION_THUMBNAIL,iRef);}  }
class C{  private void logAdditionalLogItems(final Operation operation,final StringBuilder builder){  appendResponseControls(operation,builder);  for (  final AdditionalLogItem item : operation.getAdditionalLogItems()) {    builder.append(' ');    item.toString(builder);  }}  }
class C{  public LoginException(){  super();}  }
class C{  protected void configurePropertiesFromAction(Action a){  setMnemonicFromAction(a);  setTextFromAction(a,false);  AbstractAction.setToolTipTextFromAction(this,a);  setIconFromAction(a);  setActionCommandFromAction(a);  AbstractAction.setEnabledFromAction(this,a);  if (AbstractAction.hasSelectedKey(a) && shouldUpdateSelectedStateFromAction()) {    setSelectedFromAction(a);  }  setDisplayedMnemonicIndexFromAction(a,false);}  }
class C{  @Deprecated public int _machine(){  return _machine;}  }
class C{  public FrameBodyTLEN(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public CipherInputStream(InputStream is,BufferedBlockCipher cipher){  super(is);  this.bufferedBlockCipher=cipher;  buf=new byte[cipher.getOutputSize(INPUT_BUF_SIZE)];  inBuf=new byte[INPUT_BUF_SIZE];}  }
class C{  public static Map parseAttributeConfig(List list){  Map map=new HashMap();  if (list == null || list.isEmpty()) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSServiceUtils.parseAttributeConfig: " + "Input put list is empty");    }    return map;  }  Iterator iter=list.iterator();  while (iter.hasNext()) {    String entry=(String)iter.next();    if (entry.indexOf("=") != -1) {      StringTokenizer st=new StringTokenizer(entry,"=");      map.put(st.nextToken(),st.nextToken());    }  }  return map;}  }
class C{  public static boolean isSurrogateLow(char c){  return c >= '\udc00' && c <= '\udfff';}  }
class C{  public boolean isSslEncryption(){  return sslEncryption;}  }
class C{  public void testUpdateStringStringString() throws Exception {  writableTarget.next();  writableTarget.updateString("family","bird");  try {    target.next();    target.updateString("family","bird");    fail("SQLException was not thrown");  } catch (  SQLException e) {  }  target.updateString(1,"test");  target.close();  try {    target.updateString("family","test");    fail("Exception expected");  } catch (  SQLException e) {  }}  }
class C{  public boolean Arg0IsNodesetExpr(){  return (null == m_arg0) ? true : m_arg0.isNodesetExpr();}  }
class C{  public ModifyOperation processModify(DN entryDN,List<Modification> modifications){  return processModify(entryDN,modifications,null);}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  if (null != m_errorHandler) {    try {      m_errorHandler.fatalError(e);    } catch (    SAXParseException se) {    }  }  javax.xml.transform.ErrorListener errorListener=m_transformer.getErrorListener();  if (errorListener instanceof ErrorHandler) {    ((ErrorHandler)errorListener).fatalError(e);    if (null != m_errorHandler)     m_errorHandler.fatalError(e);  } else {    try {      errorListener.fatalError(new javax.xml.transform.TransformerException(e));      if (null != m_errorHandler)       m_errorHandler.fatalError(e);    } catch (    javax.xml.transform.TransformerException te) {      throw e;    }  }}  }
class C{  public static void modifyDSAMEUserPassword(String password) throws IOException {  String baseDir=SystemProperties.get(SystemProperties.CONFIG_PATH);  String bootstrapFile=baseDir + "/" + AMSetupServlet.BOOTSTRAP_EXTRA;  List urls=readFile(bootstrapFile);  StringBuilder buff=new StringBuilder();  for (Iterator i=urls.iterator(); i.hasNext(); ) {    String url=(String)i.next();    buff.append(modifyDSAMEUserPassword(url,password)).append("\n");  }  writeToFile(bootstrapFile,buff.toString());}  }
class C{  public JsonValue parse(Dictionary<String,Object> dict,String serviceName) throws InvalidException, InternalErrorException {  JsonValue jv=new JsonValue(new HashMap<String,Object>());  if (dict != null) {    String jsonConfig=(String)dict.get(JSONConfigInstaller.JSON_CONFIG_PROPERTY);    try {      if (jsonConfig != null && jsonConfig.trim().length() > 0) {        jv=new JsonValue(mapper.readValue(jsonConfig,Map.class));      }    } catch (    JsonValueException ex) {      throw new InvalidException("Component configuration for " + serviceName + " is invalid: "+ ex.getMessage(),ex);    }catch (    Exception ex) {      throw new InvalidException("Configuration for " + serviceName + " could not be parsed and may not be valid JSON : "+ ex.getMessage(),ex);    }  }  logger.debug("Parsed configuration for {}",serviceName);  return jv;}  }
class C{  public void logDeleteResponse(DeleteOperation deleteOperation){}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  public void readByteArray(byte[] arr,int offset) throws InvalidDataTypeException {  logger.finer("Reading PairTextEncodedStringNullTerminated from array from offset:" + offset);  while (true) {    try {      TextEncodedStringNullTerminated key=new TextEncodedStringNullTerminated(identifier,frameBody);      key.readByteArray(arr,offset);      size+=key.getSize();      offset+=key.getSize();      if (key.getSize() == 0) {        break;      }      try {        TextEncodedStringNullTerminated result=new TextEncodedStringNullTerminated(identifier,frameBody);        result.readByteArray(arr,offset);        size+=result.getSize();        offset+=result.getSize();        if (result.getSize() == 0) {          break;        }        ((ValuePairs)value).add((String)key.getValue(),(String)result.getValue());      } catch (      InvalidDataTypeException idte) {        if (offset >= arr.length) {          break;        }        TextEncodedStringSizeTerminated result=new TextEncodedStringSizeTerminated(identifier,frameBody);        result.readByteArray(arr,offset);        size+=result.getSize();        offset+=result.getSize();        if (result.getSize() == 0) {          break;        }        ((ValuePairs)value).add((String)key.getValue(),(String)result.getValue());        break;      }    } catch (    InvalidDataTypeException idte) {      break;    }    if (size == 0) {      logger.warning("No null terminated Strings found");      throw new InvalidDataTypeException("No null terminated Strings found");    }  }  logger.finer("Read  PairTextEncodedStringNullTerminated:" + value + " size:"+ size);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  Attr newAttribute;  Attr oldAttr;  Attr districtAttr;  String attrVal;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testAddress=(Element)elementList.item(0);  newAttribute=doc.createAttribute("district");  oldAttr=testAddress.setAttributeNode(newAttribute);  assertNull("old_attr_doesnt_exist",oldAttr);  districtAttr=testAddress.getAttributeNode("district");  assertNotNull("new_district_accessible",districtAttr);  attrVal=testAddress.getAttribute("district");  assertEquals("attr_value","",attrVal);}  }
class C{  public E pop() throws EmptyStackException {  int n=size();  if (n <= 0) {    throw new EmptyStackException();  } else {    return remove(n - 1);  }}  }
class C{  public UTFDataFormatException(){  super();}  }
class C{  public final boolean isPostdated(){  return flags[POSTDATED_TICKET_FLAG];}  }
class C{  public X509Name(boolean reverse,Hashtable lookUp,String dirName,X509NameEntryConverter converter){  this.converter=converter;  X509NameTokenizer nTok=new X509NameTokenizer(dirName);  while (nTok.hasMoreTokens()) {    String token=nTok.nextToken();    if (token.indexOf('+') > 0) {      X509NameTokenizer pTok=new X509NameTokenizer(token,'+');      addEntry(lookUp,pTok.nextToken(),FALSE);      while (pTok.hasMoreTokens()) {        addEntry(lookUp,pTok.nextToken(),TRUE);      }    } else {      addEntry(lookUp,token,FALSE);    }  }  if (reverse) {    Vector o=new Vector();    Vector v=new Vector();    Vector a=new Vector();    int count=1;    for (int i=0; i < this.ordering.size(); i++) {      if (((Boolean)this.added.elementAt(i)).booleanValue()) {        o.insertElementAt(this.ordering.elementAt(i),count);        v.insertElementAt(this.values.elementAt(i),count);        a.insertElementAt(this.added.elementAt(i),count);        count++;      } else {        o.insertElementAt(this.ordering.elementAt(i),0);        v.insertElementAt(this.values.elementAt(i),0);        a.insertElementAt(this.added.elementAt(i),0);        count=1;      }    }    this.ordering=o;    this.values=v;    this.added=a;  }}  }
class C{  public void drawRect(int x,int y,int width,int height){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing rect: " + new Rectangle(x,y,width,height));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawRect(x,y,width,height);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawRect(x,y,width,height);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawRect(x,y,width,height);}  }
class C{  protected void processMethodCallResult(Object result){}  }
class C{  @Override public String toString(){  if (components.isEmpty()) {    return "";  }  return "(" + DomainUtils.join(SEPARATOR,components) + ")";}  }
class C{  public void editingCanceled(ChangeEvent e){  completeEditing(false,false,false);}  }
class C{  public static long nextOperationID(){  long opID=nextOperationID.getAndIncrement();  if (opID < 0) {synchronized (nextOperationID) {      if (nextOperationID.get() < 0) {        nextOperationID.set(1);        return 0;      } else {        return nextOperationID.getAndIncrement();      }    }  }  return opID;}  }
class C{  @Override public long dynamicQueryCount(DynamicQuery dynamicQuery,Projection projection){  return fooPersistence.countWithDynamicQuery(dynamicQuery,projection);}  }
class C{  public BrdAreaObstacleComp(PlaArea p_area,int p_layer,PlaVectorInt p_translation,int p_rotation_in_degree,boolean p_side_changed,int p_clearance_type,int p_id_no,int p_component_no,String p_name,ItemFixState p_fixed_state,RoutingBoard p_board){  super(p_area,p_layer,p_translation,p_rotation_in_degree,p_side_changed,NetNosList.EMPTY,p_clearance_type,p_id_no,p_component_no,p_name,p_fixed_state,p_board);}  }
class C{  @Override public int hashCode(){  int hash=((time.toSecondOfDay() + (timeEndOfDay ? 1 : 0)) << 15) + (month.ordinal() << 11) + ((dom + 32) << 5)+ ((dow == null ? 7 : dow.ordinal()) << 2)+ (timeDefinition.ordinal());  return hash ^ standardOffset.hashCode() ^ offsetBefore.hashCode()^ offsetAfter.hashCode();}  }
class C{  public void insert_ulong(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulong",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_ulong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  @Override public void removeByUuid(String uuid){  for (  Foo foo : findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  public static final Index createTestIndexUUIDField(){  Index index=new Index("myindexuuidfield");  index.setTable(DB,"mytable");  ArrayList<IndexField> fields=new ArrayList<>();  fields.add(new IndexField("myindexedfield4",FieldDataType.UUID));  index.setFields(fields);  index.isUnique(false);  return index;}  }
class C{  public String mapMethodName(String owner,String name,String desc){  return name;}  }
class C{  private static void swap(Object[] x,int a,int b){  Object t=x[a];  x[a]=x[b];  x[b]=t;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetnamespaceuri03.class,args);}  }
class C{  public String toString(){  return "[" + (space.equals(mySpace) ? "" : space + ", ") + objNum+ "]";}  }
class C{  public ShoveDrillResult check_forced_pad(ShapeTile p_pad_shape,BrdFromSide p_from_side,int p_layer,NetNosList p_net_no_arr,int p_cl_type,boolean p_copper_sharing_allowed,Collection<BrdItem> p_ignore_items,int p_max_recursion_depth,int p_max_via_recursion_depth,boolean p_check_only_front,TimeLimit p_time_limit){  if (!p_pad_shape.is_contained_in(r_board.get_bounding_box())) {    r_board.shove_fail_obstacle_set(r_board.get_outline());    return ShoveDrillResult.NOT_DRILLABLE;  }  AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();  AlgoShoveTraceEntries shape_entries=new AlgoShoveTraceEntries(p_pad_shape,p_layer,p_net_no_arr,p_cl_type,p_from_side,r_board);  Collection<BrdItem> obstacles=search_tree.find_overlap_items_with_clearance(p_pad_shape,p_layer,NetNosList.EMPTY,p_cl_type);  if (p_ignore_items != null) {    obstacles.removeAll(p_ignore_items);  }  boolean obstacles_shovable=shape_entries.store_items(obstacles,true,p_copper_sharing_allowed);  if (!obstacles_shovable) {    r_board.shove_fail_obstacle_set(shape_entries.get_found_obstacle());    return ShoveDrillResult.NOT_DRILLABLE;  }  for (  BrdAbitVia curr_shove_via : shape_entries.shove_via_list) {    if (p_max_via_recursion_depth <= 0) {      r_board.shove_fail_obstacle_set(curr_shove_via);      return ShoveDrillResult.NOT_DRILLABLE;    }    PlaPointInt[] new_via_center=r_board.move_drill_algo.try_shove_via_points(p_pad_shape,p_layer,curr_shove_via,p_cl_type,false);    if (new_via_center.length <= 0) {      r_board.shove_fail_obstacle_set(curr_shove_via);      return ShoveDrillResult.NOT_DRILLABLE;    }    PlaVectorInt delta=new_via_center[0].difference_by(curr_shove_via.center_get());    Collection<BrdItem> ignore_items=new LinkedList<BrdItem>();    if (!r_board.move_drill_algo.check(curr_shove_via,delta,p_max_recursion_depth,p_max_via_recursion_depth - 1,ignore_items,p_time_limit)) {      return ShoveDrillResult.NOT_DRILLABLE;    }  }  ShoveDrillResult result=ShoveDrillResult.DRILLABLE;  if (p_copper_sharing_allowed) {    for (    BrdItem curr_obstacle : obstacles) {      if (!(curr_obstacle instanceof BrdAbitPin))       continue;      result=ShoveDrillResult.DRILLABLE_WITH_ATTACH_SMD;      break;    }  }  int trace_piece_count=shape_entries.substitute_trace_count();  if (trace_piece_count == 0)   return result;  if (p_max_recursion_depth <= 0) {    r_board.shove_fail_obstacle_set(shape_entries.get_found_obstacle());    return ShoveDrillResult.NOT_DRILLABLE;  }  if (shape_entries.stack_depth() > 1) {    r_board.shove_fail_obstacle_set(shape_entries.get_found_obstacle());    return ShoveDrillResult.NOT_DRILLABLE;  }  for (; ; ) {    BrdTracep curr_substitute_trace=shape_entries.next_substitute_trace_piece();    if (curr_substitute_trace == null)     break;    for (int index=0; index < curr_substitute_trace.tile_shape_count(); ++index) {      PlaLineInt curr_line=curr_substitute_trace.polyline().plaline(index + 1);      PlaDirection curr_dir=curr_line.direction();      boolean is_in_front;      if (p_check_only_front) {        is_in_front=in_front_of_pad(curr_line,p_pad_shape,p_from_side.side_no,curr_substitute_trace.get_half_width(),true);      } else {        is_in_front=true;      }      if (!is_in_front)       continue;      BrdShapeAndFromSide curr=new BrdShapeAndFromSide(curr_substitute_trace,index,true);      if (!r_board.shove_trace_algo.shove_trace_check(curr.shape,curr.from_side,curr_dir,p_layer,curr_substitute_trace.net_nos,curr_substitute_trace.clearance_idx(),p_max_recursion_depth - 1,p_max_via_recursion_depth,0,p_time_limit)) {        return ShoveDrillResult.NOT_DRILLABLE;      }    }  }  return result;}  }
class C{  public static synchronized void unsuppress(){  if (token != null) {    System.setOut(token.out);    System.setErr(token.err);    token=null;  } else {    throw new IllegalStateException("Standard streams not currently suppressed");  }}  }
class C{  public void keyTyped(KeyEvent e){  if (tree != null && tree.getRowCount() > 0 && tree.hasFocus() && tree.isEnabled()) {    if (e.isAltDown() || BasicGraphicsUtils.isMenuShortcutKeyDown(e) || isNavigationKey(e)) {      return;    }    boolean startingFromSelection=true;    char c=e.getKeyChar();    long time=e.getWhen();    int startingRow=tree.getLeadSelectionRow();    if (time - lastTime < timeFactor) {      typedString+=c;      if ((prefix.length() == 1) && (c == prefix.charAt(0))) {        startingRow++;      } else {        prefix=typedString;      }    } else {      startingRow++;      typedString="" + c;      prefix=typedString;    }    lastTime=time;    if (startingRow < 0 || startingRow >= tree.getRowCount()) {      startingFromSelection=false;      startingRow=0;    }    TreePath path=tree.getNextMatch(prefix,startingRow,Position.Bias.Forward);    if (path != null) {      tree.setSelectionPath(path);      int row=getRowForPath(tree,path);      ensureRowsAreVisible(row,row);    } else     if (startingFromSelection) {      path=tree.getNextMatch(prefix,0,Position.Bias.Forward);      if (path != null) {        tree.setSelectionPath(path);        int row=getRowForPath(tree,path);        ensureRowsAreVisible(row,row);      }    }  }}  }
class C{  public ID3v23Tag(ByteBuffer buffer,String loggingFilename) throws TagException {  setLoggingFilename(loggingFilename);  this.read(buffer);}  }
class C{  public boolean isAddCurrentFolder(){  return addCurrentFolder;}  }
class C{  protected void bind(Name name,Object obj,boolean rebind) throws NamingException {  if (!checkWritable()) {    return;  }  while ((!name.isEmpty()) && (name.get(0).length() == 0))   name=name.getSuffix(1);  if (name.isEmpty())   throw new NamingException(sm.getString("namingContext.invalidName"));  NamingEntry entry=bindings.get(name.get(0));  if (name.size() > 1) {    if (entry == null) {      throw new NameNotFoundException(sm.getString("namingContext.nameNotBound",name,name.get(0)));    }    if (entry.type == NamingEntry.CONTEXT) {      if (rebind) {        ((Context)entry.value).rebind(name.getSuffix(1),obj);      } else {        ((Context)entry.value).bind(name.getSuffix(1),obj);      }    } else {      throw new NamingException(sm.getString("namingContext.contextExpected"));    }  } else {    if ((!rebind) && (entry != null)) {      throw new NameAlreadyBoundException(sm.getString("namingContext.alreadyBound",name.get(0)));    } else {      Object toBind=NamingManager.getStateToBind(obj,name,this,env);      if (toBind instanceof Context) {        entry=new NamingEntry(name.get(0),toBind,NamingEntry.CONTEXT);      } else       if (toBind instanceof LinkRef) {        entry=new NamingEntry(name.get(0),toBind,NamingEntry.LINK_REF);      } else       if (toBind instanceof Reference) {        entry=new NamingEntry(name.get(0),toBind,NamingEntry.REFERENCE);      } else       if (toBind instanceof Referenceable) {        toBind=((Referenceable)toBind).getReference();        entry=new NamingEntry(name.get(0),toBind,NamingEntry.REFERENCE);      } else {        entry=new NamingEntry(name.get(0),toBind,NamingEntry.ENTRY);      }      bindings.put(name.get(0),entry);    }  }}  }
class C{  private KeyStore createKeys(KeyStore keyStore,String keyAlgorithm,String publicAlias,String privateAlias,PrivateKeyEntry signer) throws Exception {  PrivateKey caKey;  X509Certificate caCert;  X509Certificate[] caCertChain;  if (signer == null) {    caKey=null;    caCert=null;    caCertChain=null;  } else {    caKey=signer.getPrivateKey();    caCert=(X509Certificate)signer.getCertificate();    caCertChain=(X509Certificate[])signer.getCertificateChain();  }  PrivateKey privateKey;  X509Certificate x509c;  if (publicAlias == null && privateAlias == null) {    privateKey=null;    x509c=null;  } else {    int keySize;    if (keyAlgorithm.equals("RSA")) {      keySize=1024;    } else     if (keyAlgorithm.equals("DSA")) {      keySize=512;    } else     if (keyAlgorithm.equals("EC")) {      keySize=256;    } else     if (keyAlgorithm.equals("EC_RSA")) {      keySize=256;      keyAlgorithm="EC";    } else {      throw new IllegalArgumentException("Unknown key algorithm " + keyAlgorithm);    }    KeyPairGenerator kpg=KeyPairGenerator.getInstance(keyAlgorithm);    kpg.initialize(keySize,new SecureRandom());    KeyPair kp=kpg.generateKeyPair();    privateKey=kp.getPrivate();    PublicKey publicKey=kp.getPublic();    X500Principal issuer=((caCert != null) ? caCert.getSubjectX500Principal() : subject);    PrivateKey signingKey=(caKey == null) ? privateKey : caKey;    x509c=createCertificate(publicKey,signingKey,subject,issuer,keyUsage,ca,extendedKeyUsages,criticalExtendedKeyUsages,subjectAltNames,permittedNameConstraints,excludedNameConstraints);  }  X509Certificate[] x509cc;  if (privateAlias == null) {    x509cc=null;  } else   if (caCertChain == null) {    x509cc=new X509Certificate[]{x509c};  } else {    x509cc=new X509Certificate[caCertChain.length + 1];    x509cc[0]=x509c;    System.arraycopy(caCertChain,0,x509cc,1,caCertChain.length);  }  if (privateAlias != null) {    keyStore.setKeyEntry(privateAlias,privateKey,keyPassword,x509cc);  }  if (publicAlias != null) {    keyStore.setCertificateEntry(publicAlias,x509c);  }  return keyStore;}  }
class C{  public void backendPopulated(Set<BackendDescriptor> backends){  BackendPopulatedEvent ev=new BackendPopulatedEvent(backends);  for (  BackendPopulatedListener listener : backendPopulatedListeners) {    listener.backendPopulated(ev);  }}  }
class C{  public DSMLDeleteOperation(LDAPConnection connection){  this.connection=connection;}  }
class C{  @NonNull public static Interpolator flip(Interpolator interpolator){  return new FlipInterpolator(interpolator);}  }
class C{  protected ReadRequest newValidateRequest(JsonValue relationshipField){  return Requests.newReadRequest(relationshipField.get(REFERENCE_ID).asString());}  }
class C{  private void clearComposeState(){  m_composeState=null;}  }
class C{  public E remove(int index){  checkElementIndex(index);  return unlink(node(index));}  }
class C{  protected void fireTreeNodesInserted(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeNodesInserted(e);    }  }}  }
class C{  public ECPRelayState createECPRelayState(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_RELAY_STATE,value);  if (obj == null) {    return new ECPRelayStateImpl(value);  } else {    return (ECPRelayState)obj;  }}  }
class C{  public FrameBodyWXXX(byte textEncoding,String description,String urlLink){  this.setObjectValue(DataTypes.OBJ_TEXT_ENCODING,textEncoding);  this.setObjectValue(DataTypes.OBJ_DESCRIPTION,description);  this.setObjectValue(DataTypes.OBJ_URLLINK,urlLink);}  }
class C{  private void beginText(){  eventOccurred(null,EventType.BEGIN_TEXT);}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(keySize + ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public static JTextField createTextField(String text,int cols){  JTextField tf=createTextField();  tf.setText(text);  tf.setColumns(cols);  return tf;}  }
class C{  public ParameterBlock add(float f){  return add(new Float(f));}  }
class C{  public ConditionDecision build(){  return new ConditionDecision(this);}  }
class C{  private Object readLiteral() throws JSONException {  String literal=nextToInternal("{}[]/\\:,=;# \t\f");  if (literal.length() == 0) {    throw syntaxError("Expected literal value");  } else   if ("null".equalsIgnoreCase(literal)) {    return JSONObject.NULL;  } else   if ("true".equalsIgnoreCase(literal)) {    return Boolean.TRUE;  } else   if ("false".equalsIgnoreCase(literal)) {    return Boolean.FALSE;  }  if (literal.indexOf('.') == -1) {    int base=10;    String number=literal;    if (number.startsWith("0x") || number.startsWith("0X")) {      number=number.substring(2);      base=16;    } else     if (number.startsWith("0") && number.length() > 1) {      number=number.substring(1);      base=8;    }    try {      long longValue=Long.parseLong(number,base);      if (longValue <= Integer.MAX_VALUE && longValue >= Integer.MIN_VALUE) {        return (int)longValue;      } else {        return longValue;      }    } catch (    NumberFormatException e) {    }  }  try {    return Double.valueOf(literal);  } catch (  NumberFormatException ignored) {  }  return new String(literal);}  }
class C{  private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  private Entry removeAttribute(Entry entry,String attrName){  Entry duplicateEntry=entry.duplicate(false);  for (  AttributeType t : entry.getUserAttributes().keySet()) {    if (t.hasNameOrOID(attrName)) {      entry.getUserAttributes().remove(t);      return duplicateEntry;    }  }  for (  AttributeType t : entry.getOperationalAttributes().keySet()) {    if (t.hasNameOrOID(attrName)) {      entry.getOperationalAttributes().remove(t);      return duplicateEntry;    }  }  return duplicateEntry;}  }
class C{  private static int capacity(int expectedSize){  if (expectedSize < 3) {    checkNonnegative(expectedSize,"expectedSize");    return expectedSize + 1;  }  if (expectedSize < MAX_POWER_OF_TWO) {    return (int)((float)expectedSize / 0.75F + 1.0F);  }  return Integer.MAX_VALUE;}  }
class C{  public static RequirementsBuilder newArray(RequirementsBuilder builder){  return newArray(0,builder,null);}  }
class C{  private CoderResult(int type,int length){  this.type=type;  this.length=length;}  }
class C{  public int viewToModel(JTextComponent a,Point b){  int returnValue=((TextUI)(uis.elementAt(0))).viewToModel(a,b);  for (int i=1; i < uis.size(); i++) {    ((TextUI)(uis.elementAt(i))).viewToModel(a,b);  }  return returnValue;}  }
class C{  void removeAttribute(String attrName) throws SMSException {  if (attrName == null) {    return;  }  Map attrMap=getAttributeMapping();  String amsdkAttrName=(String)attrMap.get(attrName);  if (amsdkAttrName != null) {    HashSet set=new HashSet();    set.add(amsdkAttrName);    try {      parentOrg.removeAttributes(set);      parentOrg.store();    } catch (    AMException ame) {      if (debug.messageEnabled()) {        debug.message("OrgConfigViaAMSDK::removeAttribute" + ": failed with AMException",ame);      }      throw (new SMSException(AMSDKBundle.BUNDLE_NAME,ame.getMessage(),ame,ame.getMessage()));    }catch (    SSOException ssoe) {      throw (new SMSException(bundle.getString("sms-INVALID_SSO_TOKEN"),ssoe,"sms-INVALID_SSO_TOKEN"));    }  }}  }
class C{  static boolean isExist(String libName,int version){  String file=_targetSoFile(libName,version);  File a=new File(file);  return a.exists();}  }
class C{  final void tryTerminate(){  for (; ; ) {    int c=ctl.get();    if (isRunning(c) || runStateAtLeast(c,TIDYING) || (runStateOf(c) == SHUTDOWN && !workQueue.isEmpty()))     return;    if (workerCountOf(c) != 0) {      interruptIdleWorkers(ONLY_ONE);      return;    }    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      if (ctl.compareAndSet(c,ctlOf(TIDYING,0))) {        try {          terminated();        }  finally {          ctl.set(ctlOf(TERMINATED,0));          termination.signalAll();        }        return;      }    }  finally {      mainLock.unlock();    }  }}  }
class C{  private void insertElementAt(int value,int at){  if (at == m_firstFree)   addElement(value); else   if (at > m_firstFree) {    int index=at >>> m_SHIFT;    if (index >= m_map.length) {      int newsize=index + m_numblocks;      int[][] newMap=new int[newsize][];      System.arraycopy(m_map,0,newMap,0,m_map.length);      m_map=newMap;    }    int[] block=m_map[index];    if (null == block)     block=m_map[index]=new int[m_blocksize];    int offset=at & m_MASK;    block[offset]=value;    m_firstFree=offset + 1;  } else {    int index=at >>> m_SHIFT;    int maxindex=m_firstFree >>> m_SHIFT;    ++m_firstFree;    int offset=at & m_MASK;    int push;    while (index <= maxindex) {      int copylen=m_blocksize - offset - 1;      int[] block=m_map[index];      if (null == block) {        push=0;        block=m_map[index]=new int[m_blocksize];      } else {        push=block[m_blocksize - 1];        System.arraycopy(block,offset,block,offset + 1,copylen);      }      block[offset]=value;      value=push;      offset=0;      ++index;    }  }}  }
class C{  public void paintToolBarDragWindowBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  @BeforeClass public void disableLogging(){  TestCaseUtils.setDefaultLogLevel(Level.SEVERE);}  }
class C{  public void write(byte b[],int off,int len) throws IOException {  if (sink == null) {    throw new IOException("Pipe not connected");  } else   if (b == null) {    throw new NullPointerException();  } else   if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  sink.receive(b,off,len);}  }
class C{  @Override public void restoreEntity(BackupDataInputStream data){  if (!restoreSuccessful) {    return;  }  if (mDeviceProfileData == null) {    mIdp=new InvariantDeviceProfile(mContext);    mDeviceProfileData=initDeviceProfileData(mIdp);    mIconCache=new IconCache(mContext,mIdp);  }  int dataSize=data.size();  if (mBuffer.length < dataSize) {    mBuffer=new byte[dataSize];  }  try {    int bytesRead=data.read(mBuffer,0,dataSize);    if (DEBUG)     Log.d(TAG,"read " + bytesRead + " of "+ dataSize+ " available");    String backupKey=data.getKey();    if (JOURNAL_KEY.equals(backupKey)) {      if (VERBOSE)       Log.v(TAG,"Journal entry restored");      if (!mKeys.isEmpty()) {        Log.wtf(TAG,keyToBackupKey(mKeys.get(0)) + " received after " + JOURNAL_KEY);        restoreSuccessful=false;        return;      }      BackupProtos.Journal journal=new BackupProtos.Journal();      MessageNano.mergeFrom(journal,readCheckedBytes(mBuffer,dataSize));      applyJournal(journal);      restoreSuccessful=isBackupCompatible(journal);      return;    }    if (!mExistingKeys.isEmpty() && !mExistingKeys.contains(backupKey)) {      if (DEBUG)       Log.e(TAG,"Ignoring key not present in the backup state " + backupKey);      return;    }    BackupProtos.Key key=backupKeyToKey(backupKey);    mKeys.add(key);switch (key.type) {case BackupProtos.Key.FAVORITE:      restoreFavorite(key,mBuffer,dataSize);    break;case BackupProtos.Key.SCREEN:  restoreScreen(key,mBuffer,dataSize);break;case BackupProtos.Key.ICON:restoreIcon(key,mBuffer,dataSize);break;case BackupProtos.Key.WIDGET:restoreWidget(key,mBuffer,dataSize);break;default :Log.w(TAG,"unknown restore entity type: " + key.type);mKeys.remove(key);break;}} catch (IOException e) {Log.w(TAG,"ignoring unparsable backup entry",e);}}  }
class C{  private void validateFocusIndex(){  if (focusIndex >= tabPane.getTabCount()) {    setFocusIndex(tabPane.getSelectedIndex(),false);  }}  }
class C{  @Override public void onItemRangeRemoved(T sender,int positionStart,int itemCount){  this.adapter.notifyItemRangeRemoved(positionStart,itemCount);}  }
class C{  public void assignAssignableDynamicGroup(String assignableDynamicGroupDN) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(super.token);  Set userDNs=new HashSet();  userDNs.add(super.entryDN);  dsServices.modifyMemberShip(super.token,userDNs,assignableDynamicGroupDN,ASSIGNABLE_DYNAMIC_GROUP,ADD_MEMBER);}  }
class C{  public void test_write$BII_7() throws IOException, NoSuchAlgorithmException {  Support_OutputStream sos=new Support_OutputStream(MY_MESSAGE_LEN);  MessageDigest md=MessageDigest.getInstance(algorithmName[0]);  DigestOutputStream dos=new DigestOutputStream(sos,md);  dos.write(myMessage,0,MY_MESSAGE_LEN);  try {    dos.write(myMessage,0,MY_MESSAGE_LEN);    fail("Test 1: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  @Override public String toJson(){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionSerializer());  return gson.create().toJson(this);}  }
class C{  public void run(){  long localDelay=-1;  while (true) {    try {synchronized (this) {        if (!shouldTerminate) {          if (delay > 0) {            this.wait(delay);            if (beingNotified) {              beingNotified=false;              continue;            }          } else {            if (delay < 0) {              this.wait();              if (beingNotified) {                beingNotified=false;                continue;              }            }          }        }      }      if (shouldTerminate) {        break;      }      pool.runNext();    } catch (    RuntimeException ex) {      pool.replaceScheduler();    }catch (    Exception ex) {    }catch (    Throwable t) {      pool.replaceScheduler();      throw new Error(t);    }    if (shouldTerminate) {      break;    }  }}  }
class C{  private static void checkOpenDJUpgrade() throws ServletException {  if (!isEmbeddedDS()) {    return;  }  String baseDirectory=getBaseDir();  Debug logger=Debug.getInstance(SetupConstants.DEBUG_NAME);  ZipUtils zipUtils=new ZipUtils(logger);  OpenDJUpgrader upgrader=new OpenDJUpgrader(new EmbeddedOpenDJBackupManager(logger,zipUtils,baseDirectory),baseDirectory + OPENDS_DIR,servletCtx);  EmbeddedOpenDJManager embeddedOpenDJManager=new EmbeddedOpenDJManager(logger,baseDirectory,upgrader);  if (embeddedOpenDJManager.getState() == EmbeddedOpenDJManager.State.UPGRADE_REQUIRED) {    isOpenDJUpgraded=embeddedOpenDJManager.upgrade() == EmbeddedOpenDJManager.State.UPGRADED;  }}  }
class C{  ManagedRole(String name) throws UMSException {  this(new AttrSet(new Attr("cn",name)));}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.ls.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public static boolean isSupportedControl(String controlOID){  return directoryServer.supportedControls.contains(controlOID);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return new XNumber(java.lang.Math.floor(m_arg0.execute(xctxt).num()));}  }
class C{  protected void defaultPublicExceptionHandling(Object exchange,IPublicException publicException) throws Throwable {  if (getServer().isResponseHeadersSent(exchange)) {    this.logger.info("Can't sent proper public error response, headers are already sent :\n" + SpincastStatics.getStackTrace((Throwable)publicException));    return;  }  String errorMessage=((Throwable)publicException).getMessage();  if (getSpincastConfig().isDebugEnabled()) {    errorMessage+="\n\nDebug info :\n\n" + SpincastStatics.getStackTrace(((Throwable)publicException));  }  sendErrorUsingBestMatchContentType(exchange,errorMessage,publicException.getStatusCode());}  }
class C{  private boolean validateProperties() throws PolicyException {  if ((properties == null) || (properties.keySet() == null)) {    throw new PolicyException(ResBundleUtils.rbName,"properties_can_not_be_null_or_empty",null,null);  }  Set keySet=properties.keySet();  if (!keySet.contains(AUTHENTICATE_TO_SERVICE)) {    String args[]={AUTHENTICATE_TO_SERVICE};    throw new PolicyException(ResBundleUtils.rbName,"property_value_not_defined",args,null);  }  Iterator keys=keySet.iterator();  while (keys.hasNext()) {    String key=(String)keys.next();    if (!AUTHENTICATE_TO_SERVICE.equals(key)) {      String args[]={key};      throw new PolicyException(ResBundleUtils.rbName,"attempt_to_set_invalid_property ",args,null);    }  }  Set authnToServiceSet=null;  try {    authnToServiceSet=(Set)properties.get(AUTHENTICATE_TO_SERVICE);  } catch (  ClassCastException e) {    String args[]={REQUEST_AUTHENTICATED_TO_SERVICES};    throw new PolicyException(ResBundleUtils.rbName,"property_is_not_a_Set",args,e);  }  if (authnToServiceSet != null) {    validateAuthnToServices(authnToServiceSet);  }  return true;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AllowParser.parse");  AllowList list=new AllowList();  try {    headerName(TokenTypes.ALLOW);    Allow allow=new Allow();    list.add(allow);    if (lexer.startsId()) {      Token token=this.lexer.match(TokenTypes.ID);      allow.setMethod(token.getTokenValue());      this.lexer.SPorHT();      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        allow=new Allow();        token=this.lexer.match(TokenTypes.ID);        allow.setMethod(token.getTokenValue());        list.add(allow);        this.lexer.SPorHT();      }    }    this.lexer.match('\n');    return list;  }  finally {    if (debug)     dbg_leave("AllowParser.parse");  }}  }
class C{  private static BigInteger largePrime(int bitLength,int certainty,Random rnd){  BigInteger p;  p=new BigInteger(bitLength,rnd).setBit(bitLength - 1);  p.mag[p.mag.length - 1]&=0xfffffffe;  int searchLen=getPrimeSearchLen(bitLength);  BitSieve searchSieve=new BitSieve(p,searchLen);  BigInteger candidate=searchSieve.retrieve(p,certainty,rnd);  while ((candidate == null) || (candidate.bitLength() != bitLength)) {    p=p.add(BigInteger.valueOf(2 * searchLen));    if (p.bitLength() != bitLength)     p=new BigInteger(bitLength,rnd).setBit(bitLength - 1);    p.mag[p.mag.length - 1]&=0xfffffffe;    searchSieve=new BitSieve(p,searchLen);    candidate=searchSieve.retrieve(p,certainty,rnd);  }  return candidate;}  }
class C{  public AccessibleTextSequence(int start,int end,String txt){  startIndex=start;  endIndex=end;  text=txt;}  }
class C{  private static Runnable asUncheckedRunnable(Closeable c){  return null;}  }
class C{  public boolean isAuthorized(Object credential,String action,Object data,java.util.Map env){  DiscoUtils.debug.message("DefaultDiscoAuthorizer.isAuthorized.");  if (pe == null) {    DiscoUtils.debug.error("DefaultDiscoAuthorizer.isAuthorized: null " + "Policy Evaluator.");    return false;  }  if (!checkInput(credential,action,data,env)) {    return false;  }  String resource=null;  try {    ServiceInstanceType instance=((ResourceOfferingType)data).getServiceInstance();    resource=instance.getServiceType() + RESOURCE_SEPERATOR + instance.getProviderID();  } catch (  Exception e) {    DiscoUtils.debug.error("DefaultDiscoAuthorizer.isAuthorized: " + "Exception occured when constucting policy resource:",e);    return false;  }  boolean result=false;  try {    result=pe.isAllowed((SSOToken)credential,resource,action,env);  } catch (  Exception e) {    DiscoUtils.debug.error("DefaultDiscoAuthorizer.isAuthorized: " + "Exception occured during policy evaluation: ",e);    result=false;  }  return result;}  }
class C{  public boolean isSupported(){  try {    return KeyPairGenerator.getInstance(keyAlgorithm.toUpperCase()) != null;  } catch (  NoSuchAlgorithmException e) {    return false;  }}  }
class C{  protected SubjectTypeManager() throws SSOException {  token=ServiceTypeManager.getSSOToken();  String lstr=token.getProperty("Locale");  java.util.Locale loc=com.sun.identity.shared.locale.Locale.getLocale(lstr);  rb=amCache.getResBundle(ResBundleUtils.rbName,loc);}  }
class C{  private boolean isPreflightFlow(final HttpServletRequest req){  final String reqMethodHeader=req.getHeader(CORSConstants.AC_REQUEST_METHOD);  return CORSConstants.HTTP_OPTIONS.equals(req.getMethod()) && reqMethodHeader != null && !reqMethodHeader.isEmpty();}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AttributeValueElement createAttributeValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AttributeValueElementImpl();}  }
class C{  public static Paint newCornerPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_CORNER_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint cornerPaint=new Paint();  cornerPaint.setColor(DEFAULT_CORNER_COLOR);  cornerPaint.setStrokeWidth(lineThicknessPx);  cornerPaint.setStyle(Paint.Style.STROKE);  return cornerPaint;}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  public NoSuchMechanismException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.TokenAssertionType createTokenAssertionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.TokenAssertionTypeImpl();}  }
class C{  public AsfTagField(final MetadataDescriptor source){  assert source != null;  this.toWrap=source.createCopy();}  }
class C{  public static byte[] readBytesFromFile(String filePath,PrintStream err) throws IOException {  byte[] val=null;  FileInputStream fis=null;  try {    File file=new File(filePath);    fis=new FileInputStream(file);    long length=file.length();    val=new byte[(int)length];    int offset=0;    int numRead=0;    while (offset < val.length && (numRead=fis.read(val,offset,val.length - offset)) >= 0) {      offset+=numRead;    }    if (offset < val.length) {      printWrappedText(err,ERR_FILE_NOT_FULLY_READABLE.get(filePath));      return null;    }    return val;  }  finally {    if (fis != null) {      fis.close();    }  }}  }
class C{  protected void processKeyEvent(KeyEvent e){  boolean result;  boolean shouldProcessKey;  super.processKeyEvent(e);  if (!e.isConsumed()) {    processComponentKeyEvent(e);  }  shouldProcessKey=KeyboardState.shouldProcess(e);  if (e.isConsumed()) {    return;  }  if (shouldProcessKey && processKeyBindings(e,e.getID() == KeyEvent.KEY_PRESSED)) {    e.consume();  }}  }
class C{  public ObligationsImpl(Element element) throws XACMLException {  processElement(element);  makeImmutable();}  }
class C{  public void removeAura(){  enableAura=false;  sMario.getRoot().getChildren().remove(aura.getSpriteFrame());  aura=null;}  }
class C{  public static String buildToString(Object... params){  StringBuffer finalMessage=new StringBuffer();  int i=0;  for (  Object object : params) {    if (i++ > 1) {      finalMessage.append(FIELD_SEPARATOR);    }    if (object instanceof List<?>) {      finalMessage.append(JKCollectionUtil.toString((List<?>)object));    } else {      finalMessage.append(JKObjectUtil.toString(object,true));    }  }  String fullText=finalMessage.toString();  return fullText;}  }
class C{  public static byte[] fromAscii(char[] ascii){  if (ascii == null || ascii.length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] l_raw=new byte[ascii.length >> 3];  for (int ii=0, jj=ascii.length - 1; ii < l_raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if (ascii[jj - bits] == '1') {        l_raw[ii]|=BITS[bits];      }    }  }  return l_raw;}  }
class C{  public static int murmurhash3_x86_32(byte[] data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int roundedEnd=offset + (len & 0xfffffffc);  for (int i=offset; i < roundedEnd; i+=4) {    int k1=(data[i] & 0xff) | ((data[i + 1] & 0xff) << 8) | ((data[i + 2] & 0xff) << 16)| (data[i + 3] << 24);    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;    h1=(h1 << 13) | (h1 >>> 19);    h1=h1 * 5 + 0xe6546b64;  }  int k1=0;switch (len & 0x03) {case 3:    k1=(data[roundedEnd + 2] & 0xff) << 16;case 2:  k1|=(data[roundedEnd + 1] & 0xff) << 8;case 1:k1|=(data[roundedEnd] & 0xff);k1*=c1;k1=(k1 << 15) | (k1 >>> 17);k1*=c2;h1^=k1;}h1^=len;h1^=h1 >>> 16;h1*=0x85ebca6b;h1^=h1 >>> 13;h1*=0xc2b2ae35;h1^=h1 >>> 16;return h1;}  }
class C{  public FacebookException(Throwable throwable){  super(throwable);}  }
class C{  public boolean isRequestedSessionIdFromURL(){  return this._getHttpServletRequest() != null && this._getHttpServletRequest().isRequestedSessionIdFromURL();}  }
class C{  public FrameBodyTPOS(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public LDIFChangeRecordWriter(final OutputStream out){  super(out);}  }
class C{  public UpdateException(String message){  super(message);}  }
class C{  private void checkProvidedPorts(Collection<LocalizableMessage> errorMessages){  try {    Set<Integer> ports=new HashSet<>();    ports.add(ldapPortArg.getIntValue());    checkPortAlreadyUsed(ports,adminConnectorPortArg.getIntValue(),errorMessages,ERR_CONFIGDS_PORT_ALREADY_SPECIFIED);    if (jmxPortArg.isPresent()) {      checkPortAlreadyUsed(ports,jmxPortArg.getIntValue(),errorMessages,ERR_CONFIGDS_PORT_ALREADY_SPECIFIED);    }    if (ldapsPortArg.isPresent()) {      checkPortAlreadyUsed(ports,ldapsPortArg.getIntValue(),errorMessages,ERR_CONFIGDS_PORT_ALREADY_SPECIFIED);    }  } catch (  ArgumentException ae) {    logger.error(LocalizableMessage.raw("Unexpected error.  " + "Assuming that it is caused by a previous parsing issue: " + ae,ae));  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=s.readFields();  byte[] tmp=(byte[])fields.get("buf",null);  if (tmp == null)   throw new InvalidObjectException("buf is null and should not be!");  buf=tmp.clone();  len=fields.get("len",0L);  if (buf.length != len)   throw new InvalidObjectException("buf is not the expected size");  origLen=fields.get("origLen",0L);  blob=(Blob)fields.get("blob",null);}  }
class C{  public void insert_octet(byte value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_octet",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_octet(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  String calculateRawEncoding(String bomEnc,String xmlGuessEnc,String xmlEnc) throws IOException {  if (bomEnc == null) {    if (xmlGuessEnc == null || xmlEnc == null) {      return defaultEncoding == null ? UTF_8 : defaultEncoding;    }    if (xmlEnc.equals(UTF_16) && (xmlGuessEnc.equals(UTF_16BE) || xmlGuessEnc.equals(UTF_16LE))) {      return xmlGuessEnc;    }    return xmlEnc;  }  if (bomEnc.equals(UTF_8)) {    if (xmlGuessEnc != null && !xmlGuessEnc.equals(UTF_8)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    if (xmlEnc != null && !xmlEnc.equals(UTF_8)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    return bomEnc;  }  if (bomEnc.equals(UTF_16BE) || bomEnc.equals(UTF_16LE)) {    if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    if (xmlEnc != null && !xmlEnc.equals(UTF_16) && !xmlEnc.equals(bomEnc)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    return bomEnc;  }  if (bomEnc.equals(UTF_32BE) || bomEnc.equals(UTF_32LE)) {    if (xmlGuessEnc != null && !xmlGuessEnc.equals(bomEnc)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    if (xmlEnc != null && !xmlEnc.equals(UTF_32) && !xmlEnc.equals(bomEnc)) {      String msg=MessageFormat.format(RAW_EX_1,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});      throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);    }    return bomEnc;  }  String msg=MessageFormat.format(RAW_EX_2,new Object[]{bomEnc,xmlGuessEnc,xmlEnc});  throw new XmlStreamReaderException(msg,bomEnc,xmlGuessEnc,xmlEnc);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrgetownerelement03.class,args);}  }
class C{  public static <S>ServiceLoader<S> load(Class<S> service){  return ServiceLoader.load(service,Thread.currentThread().getContextClassLoader());}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HTML_ENTITY\"";  db.execSQL(sql);}  }
class C{  void insertOp(int pos,int length,int op){  int totalLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  for (int i=totalLen - 1; i >= pos; i--) {    m_ops.setOp(i + length,m_ops.getOp(i));  }  m_ops.setOp(pos,op);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,totalLen + length);}  }
class C{  public String toDotted(){  return Joiner.on(".").join(pathPieces);}  }
class C{  public static String unsetThread(){  ByteArrayOutputStream baos=data.get();  if (baos == null) {    return null;  }  streams.set(null);  data.set(null);  return baos.toString();}  }
class C{  public static Ingredient fromCursor(Cursor cursor){  Ingredient ingredient=new Ingredient();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeIngredientTable.AMOUNT_COLUMN)) {      ingredient.setAmount(cursor.getString(c));    } else     if (columnName.equals(RecipeIngredientTable.DESCRIPTION_COLUMN)) {      ingredient.setDescription(cursor.getString(c));    }  }  return ingredient;}  }
class C{  public TransformException(){  super();}  }
class C{  public void write(int b) throws IOException {  wbuf[0]=(byte)b;  write(wbuf,0,1);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  Attr attribute;  Attr newAttribute;  doc=(Document)load("staff",false);  element=doc.createElementNS("http://www.w3.org/DOM","elem");  attribute=doc.createAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS","attr");  newAttribute=element.setAttributeNodeNS(attribute);  element.removeAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS","attr");  state=element.hasAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS","attr");  assertFalse("elementremoveattributens01",state);}  }
class C{  public static Event35.Builder newBuilder(Event35.Builder other){  return new Event35.Builder(other);}  }
class C{  public RasterFormatException(String s){  super(s);}  }
class C{  public static StringArgument saslArgument() throws ArgumentException {  return StringArgument.builder(OPTION_LONG_SASLOPTION).shortIdentifier(OPTION_SHORT_SASLOPTION).description(INFO_LDAP_CONN_DESCRIPTION_SASLOPTIONS.get()).multiValued().valuePlaceholder(INFO_SASL_OPTION_PLACEHOLDER.get()).buildArgument();}  }
class C{  @Override public String toString(){  StringBuilder risul=new StringBuilder(1000);  risul.append("SearchTreeManager /n");  risul.append("methods: get_default_tree() \n");  return risul.toString();}  }
class C{  public static void moveFile(File fileToMove,File targetDirectory) throws IOException {  if (!fileToMove.exists()) {    LocalizableMessage message=ERR_MOVEFILE_NO_SUCH_FILE.get(fileToMove.getPath());    throw new IOException(message.toString());  }  if (!fileToMove.isFile()) {    LocalizableMessage message=ERR_MOVEFILE_NOT_FILE.get(fileToMove.getPath());    throw new IOException(message.toString());  }  if (!targetDirectory.exists()) {    LocalizableMessage message=ERR_MOVEFILE_NO_SUCH_DIRECTORY.get(targetDirectory.getPath());    throw new IOException(message.toString());  }  if (!targetDirectory.isDirectory()) {    LocalizableMessage message=ERR_MOVEFILE_NOT_DIRECTORY.get(targetDirectory.getPath());    throw new IOException(message.toString());  }  String newFilePath=targetDirectory.getPath() + File.separator + fileToMove.getName();  FileInputStream inputStream=new FileInputStream(fileToMove);  FileOutputStream outputStream=new FileOutputStream(newFilePath,false);  byte[] buffer=new byte[8192];  while (true) {    int bytesRead=inputStream.read(buffer);    if (bytesRead < 0) {      break;    }    outputStream.write(buffer,0,bytesRead);  }  outputStream.flush();  outputStream.close();  inputStream.close();  fileToMove.delete();}  }
class C{  public void nodeClicked(RequestInvocationEvent event,int nodeID){  String agentType=getAgentType();  AgentTabManager mgr=AgentTabManager.getInstance();  boolean forward=false;  if (nodeID == TAB_GENERAL_ID) {    removePageSessionAttribute(PS_TABNAME);    setPageSessionAttribute(getTrackingTabIDName(),Integer.toString(nodeID));  } else   if (nodeID == TAB_GROUP_ID) {    AgentGroupMembersViewBean vb=(AgentGroupMembersViewBean)getViewBean(AgentGroupMembersViewBean.class);    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());    forward=true;  } else {    List tabs=mgr.getTabs(agentType);    String strIdx=Integer.toString(nodeID);    strIdx=strIdx.substring(TAB_PREFIX.length());    int idx=Integer.parseInt(strIdx);    String tabName=(String)tabs.get(idx);    setPageSessionAttribute(PS_TABNAME,tabName);    setPageSessionAttribute(getTrackingTabIDName(),Integer.toString(nodeID));  }  if (!forward) {    try {      Class clazz=AgentsViewBean.getAgentCustomizedViewBean(agentType);      AMViewBeanBase vb=(AMViewBeanBase)getViewBean(clazz);      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    } catch (    ClassNotFoundException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    }  }}  }
class C{  public void initializeProvider(String debugConfigPath) throws InvalidDebugConfigurationException {  DebugConfigurationFromProperties debugConfig=new DebugConfigurationFromProperties(debugConfigPath);  debugFileProvider=new DebugFileProviderForTest(debugConfig,TimeService.SYSTEM);  provider=new DebugProviderImpl(debugFileProvider);}  }
class C{  public Set createStaticGroups(Set groupNames) throws AMException, SSOException {  Iterator iter=groupNames.iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMStaticGroupImpl groupImpl=new AMStaticGroupImpl(super.token,groupDN);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  protected void updatePreferredSize(int index){  Rectangle bounds=getNodeDimensions(this.getUserObject(),index,getLevel(),isExpanded(),boundsBuffer);  if (bounds == null) {    xOrigin=0;    preferredWidth=preferredHeight=0;    updateNodeSizes=true;  } else   if (bounds.height == 0) {    xOrigin=0;    preferredWidth=preferredHeight=0;    updateNodeSizes=true;  } else {    xOrigin=bounds.x;    preferredWidth=bounds.width;    if (isFixedRowHeight())     preferredHeight=getRowHeight(); else     preferredHeight=bounds.height;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  doc=(Document)load("staffNS",true);  element=doc.createElement("address");{    boolean success=false;    try {      element.setPrefix("test");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public int doAfterBody() throws JspException {  return SKIP_BODY;}  }
class C{  @Override public void finish() throws Exception {  bodyText=null;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  removePageSessionAttribute(PAGE_MODIFIED);  super.handleButton2Request(event);}  }
class C{  private static void changeBuildInfoVersion(final UpgradeContext context) throws ClientException {  File buildInfoFile=new File(UpgradeUtils.configDirectory,Installation.BUILDINFO_RELATIVE_PATH);  try (FileWriter buildInfo=new FileWriter(buildInfoFile,false)){    buildInfo.write(context.getToVersion().toString());    context.notify(INFO_UPGRADE_SUCCESSFUL.get(context.getFromVersion(),context.getToVersion()),TITLE_CALLBACK);  } catch (  IOException e) {    final LocalizableMessage message=LocalizableMessage.raw(e.getMessage());    context.notify(message,ERROR_CALLBACK);    throw new ClientException(ReturnCode.ERROR_UNEXPECTED,message);  }}  }
class C{  public void remove(JMenuItem item){  if (popupMenu != null)   popupMenu.remove(item);}  }
class C{  LDAPDriver(Connection connection,LDAPProfile profile){  this.connection=connection;  this.profile=profile;}  }
class C{  public static Border createGrayLineBorder(){  if (grayLine == null) {    grayLine=new LineBorder(Color.gray,1);  }  return grayLine;}  }
class C{  private ReplicationBroker[] createReplicationBrokers1And2() throws Exception {  return new ReplicationBroker[]{openReplicationSession(TEST_ROOT_DN,1,100,replicationServerPort,1000),openReplicationSession(TEST_ROOT_DN,2,100,replicationServerPort,1000)};}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrreplacechild2.class,args);}  }
class C{  private static void assertQualNS(String qualNS) throws XMPException {  if (qualNS == null || qualNS.length() == 0) {    throw new XMPException("Empty qualifier namespace URI",XMPError.BADSCHEMA);  }}  }
class C{  public void reset(){  releaseDTMXRTreeFrags();  if (m_rtfdtm_stack != null)   for (java.util.Enumeration e=m_rtfdtm_stack.elements(); e.hasMoreElements(); )   m_dtmManager.release((DTM)e.nextElement(),true);  m_rtfdtm_stack=null;  m_which_rtfdtm=-1;  if (m_global_rtfdtm != null)   m_dtmManager.release(m_global_rtfdtm,true);  m_global_rtfdtm=null;  m_dtmManager=DTMManager.newInstance(org.apache.xpath.objects.XMLStringFactoryImpl.getFactory());  m_saxLocations.removeAllElements();  m_axesIteratorStack.removeAllElements();  m_contextNodeLists.removeAllElements();  m_currentExpressionNodes.removeAllElements();  m_currentNodes.removeAllElements();  m_iteratorRoots.RemoveAllNoClear();  m_predicatePos.removeAllElements();  m_predicateRoots.RemoveAllNoClear();  m_prefixResolvers.removeAllElements();  m_prefixResolvers.push(null);  m_currentNodes.push(DTM.NULL);  m_currentExpressionNodes.push(DTM.NULL);  m_saxLocations.push(null);}  }
class C{  private void doReleaseShared(){  for (; ; ) {    Node h=head;    if (h != null && h != tail) {      int ws=h.waitStatus;      if (ws == Node.SIGNAL) {        if (!compareAndSetWaitStatus(h,Node.SIGNAL,0))         continue;        unparkSuccessor(h);      } else       if (ws == 0 && !compareAndSetWaitStatus(h,0,Node.PROPAGATE))       continue;    }    if (h == head)     break;  }}  }
class C{  public int writeInto(final OutputStream out,final ContainerType contType) throws IOException {  final int size=getCurrentAsfSize(contType);  byte[] binaryData;  if (this.descriptorType == TYPE_BOOLEAN) {    binaryData=new byte[contType == ContainerType.EXTENDED_CONTENT ? 4 : 2];    binaryData[0]=(byte)(getBoolean() ? 1 : 0);  } else {    binaryData=this.content;  }  if (contType != ContainerType.EXTENDED_CONTENT) {    Utils.writeUINT16(getLanguageIndex(),out);    Utils.writeUINT16(getStreamNumber(),out);  }  Utils.writeUINT16(getName().length() * 2 + 2,out);  if (contType == ContainerType.EXTENDED_CONTENT) {    out.write(Utils.getBytes(getName(),AsfHeader.ASF_CHARSET));    out.write(AsfHeader.ZERO_TERM);  }  final int type=getType();  Utils.writeUINT16(type,out);  int contentLen=binaryData.length;  if (TYPE_STRING == type) {    contentLen+=2;  }  if (contType == ContainerType.EXTENDED_CONTENT) {    Utils.writeUINT16(contentLen,out);  } else {    Utils.writeUINT32(contentLen,out);  }  if (contType != ContainerType.EXTENDED_CONTENT) {    out.write(Utils.getBytes(getName(),AsfHeader.ASF_CHARSET));    out.write(AsfHeader.ZERO_TERM);  }  out.write(binaryData);  if (TYPE_STRING == type) {    out.write(AsfHeader.ZERO_TERM);  }  return size;}  }
class C{  @Override public boolean accept(File file){  boolean smaller=file.length() < size;  return acceptLarger ? !smaller : smaller;}  }
class C{  public Duration plusSeconds(long secondsToAdd){  return plus(secondsToAdd,0);}  }
class C{  public final double shove_trace_check(PlaSegmentInt p_line_segment,boolean p_shove_to_the_left,int p_layer,NetNosList p_net_no_arr,int p_trace_half_width,int p_cl_type,int p_max_recursion_depth,int p_max_via_recursion_depth){  AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();  if (search_tree.is_clearance_compensation_used()) {    p_trace_half_width+=search_tree.get_clearance_compensation(p_cl_type,p_layer);  }  ArrayList<ShapeTile> trace_shapes=p_line_segment.to_polyline().offset_shapes(p_trace_half_width);  if (trace_shapes.size() != 1) {    System.out.println("ShoveTraceAlgo.check: trace_shape count 1 expected");    return 0;  }  ShapeTile trace_shape=trace_shapes.get(0);  if (trace_shape.is_empty()) {    System.out.println("ShoveTraceAlgo.check: trace_shape is empty");    return 0;  }  if (!trace_shape.is_contained_in(r_board.get_bounding_box()))   return 0;  BrdFromSide from_side=new BrdFromSide(p_line_segment,trace_shape,p_shove_to_the_left);  AlgoShoveTraceEntries shape_entries=new AlgoShoveTraceEntries(trace_shape,p_layer,p_net_no_arr,p_cl_type,from_side,r_board);  Collection<BrdItem> obstacles=search_tree.find_overlap_items_with_clearance(trace_shape,p_layer,NetNosList.EMPTY,p_cl_type);  boolean obstacles_shovable=shape_entries.store_items(obstacles,false,true);  if (!obstacles_shovable || shape_entries.trace_tails_in_shape())   return 0;  int trace_piece_count=shape_entries.substitute_trace_count();  if (shape_entries.stack_depth() > 1)   return 0;  PlaPointFloat start_corner_appprox=p_line_segment.start_point_approx();  PlaPointFloat end_corner_appprox=p_line_segment.end_point_approx();  double segment_length=end_corner_appprox.distance(start_corner_appprox);  freert.rules.ClearanceMatrix cl_matrix=r_board.brd_rules.clearance_matrix;  double result=Integer.MAX_VALUE;  for (  BrdAbitVia curr_shove_via : shape_entries.shove_via_list) {    if (curr_shove_via.shares_net_no(p_net_no_arr))     continue;    boolean shove_via_ok=false;    if (p_max_via_recursion_depth > 0) {      PlaPointInt[] new_via_center=r_board.move_drill_algo.try_shove_via_points(trace_shape,p_layer,curr_shove_via,p_cl_type,false);      if (new_via_center.length <= 0)       return 0;      PlaVectorInt delta=new_via_center[0].difference_by(curr_shove_via.center_get());      Collection<BrdItem> ignore_items=new LinkedList<BrdItem>();      shove_via_ok=r_board.move_drill_algo.check(curr_shove_via,delta,p_max_recursion_depth,p_max_via_recursion_depth - 1,ignore_items,null);    }    if (!shove_via_ok) {      PlaPointFloat via_center_appprox=curr_shove_via.center_get().to_float();      double projection=start_corner_appprox.scalar_product(end_corner_appprox,via_center_appprox);      projection/=segment_length;      ShapeTileBox via_box=curr_shove_via.get_tree_shape_on_layer(search_tree,p_layer).bounding_box();      double via_radius=0.5 * via_box.max_width();      double curr_ok_lenght=projection - via_radius - p_trace_half_width;      if (!search_tree.is_clearance_compensation_used()) {        curr_ok_lenght-=cl_matrix.value_at(p_cl_type,curr_shove_via.clearance_idx(),p_layer);      }      if (curr_ok_lenght <= 0)       return 0;      result=Math.min(result,curr_ok_lenght);    }  }  if (trace_piece_count == 0)   return result;  if (p_max_recursion_depth <= 0)   return 0;  PlaDirection line_direction=p_line_segment.get_line().direction();  for (; ; ) {    BrdTracep curr_substitute_trace=shape_entries.next_substitute_trace_piece();    if (curr_substitute_trace == null)     break;    for (int index=0; index < curr_substitute_trace.tile_shape_count(); ++index) {      Polyline a_poly=curr_substitute_trace.polyline();      PlaSegmentInt curr_line_segment=a_poly.segment_get(index + 1);      if (p_shove_to_the_left) {        curr_line_segment=curr_line_segment.opposite();      }      boolean is_in_front=curr_line_segment.get_line().direction().equals(line_direction);      if (is_in_front) {        double shove_ok_length=shove_trace_check(curr_line_segment,p_shove_to_the_left,p_layer,curr_substitute_trace.net_nos,curr_substitute_trace.get_half_width(),curr_substitute_trace.clearance_idx(),p_max_recursion_depth - 1,p_max_via_recursion_depth);        if (shove_ok_length < Integer.MAX_VALUE) {          if (shove_ok_length <= 0)           return 0;          double projection=Math.min(start_corner_appprox.scalar_product(end_corner_appprox,curr_line_segment.start_point_approx()),start_corner_appprox.scalar_product(end_corner_appprox,curr_line_segment.end_point_approx()));          projection/=segment_length;          double curr_ok_length=shove_ok_length + projection - p_trace_half_width - curr_substitute_trace.get_half_width();          if (search_tree.is_clearance_compensation_used()) {            curr_ok_length-=search_tree.get_clearance_compensation(curr_substitute_trace.clearance_idx(),p_layer);          } else {            curr_ok_length-=cl_matrix.value_at(p_cl_type,curr_substitute_trace.clearance_idx(),p_layer);          }          if (curr_ok_length <= 0)           return 0;          result=Math.min(curr_ok_length,result);        }        break;      }    }  }  return result;}  }
class C{  public void paintSliderTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSliderTrackBorder(context,g,x,y,w,h);}  }
class C{  public JMXProviderException(String message){  super(message);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb11.StatusElement createStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.StatusElementImpl();}  }
class C{  public Object clone(){  Object o;  try {    o=super.clone();  } catch (  CloneNotSupportedException cnse) {    o=null;  }  return o;}  }
class C{  private static void notifyDependencies(){  for (  Thread t : Thread.getAllStackTraces().keySet()) {    if (t.getName().equals(SystemTimerPool.SCHEDULER_NAME) || t.getName().equals(SystemTimer.SCHEDULER_NAME)) {synchronized (t) {        t.notify();      }    }  }}  }
class C{  public ConnectException(String detailMessage){  super(detailMessage);}  }
class C{  @Override public int countAll(){  Long count=(Long)finderCache.getResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY,this);  if (count == null) {    Session session=null;    try {      session=openSession();      Query q=session.createQuery(_SQL_COUNT_FOO);      count=(Long)q.uniqueResult();      finderCache.putResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY,count);    } catch (    Exception e) {      finderCache.removeResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.soap.Detail createDetail() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.soap.impl.DetailImpl();}  }
class C{  public String toSvgString(int border){  if (border < 0)   throw new IllegalArgumentException("Border must be non-negative");  StringBuilder sb=new StringBuilder();  sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");  sb.append("<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n");  sb.append(String.format("<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 %1$d %1$d\">\n",size + border * 2));  sb.append("\t<rect width=\"100%\" height=\"100%\" fill=\"#FFFFFF\" stroke-width=\"0\"/>\n");  sb.append("\t<path d=\"");  boolean head=true;  for (int y=-border; y < size + border; y++) {    for (int x=-border; x < size + border; x++) {      if (getModule(x,y) == 1) {        if (head)         head=false; else         sb.append(" ");        sb.append(String.format("M%d,%dh1v1h-1z",x + border,y + border));      }    }  }  sb.append("\" fill=\"#000000\" stroke-width=\"0\"/>\n");  sb.append("</svg>\n");  return sb.toString();}  }
class C{  public void insert_longlong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_longlong",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_longlong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private void adjust(byte[] a,int aOff,byte[] b){  int x=(b[b.length - 1] & 0xff) + (a[aOff + b.length - 1] & 0xff) + 1;  a[aOff + b.length - 1]=(byte)x;  x>>>=8;  for (int i=b.length - 2; i >= 0; i--) {    x+=(b[i] & 0xff) + (a[aOff + i] & 0xff);    a[aOff + i]=(byte)x;    x>>>=8;  }}  }
class C{  void signedSubtract(MutableBigInteger addend){  if (sign == 1)   sign=sign * subtract(addend); else   add(addend);  if (intLen == 0)   sign=1;}  }
class C{  private void expect(char... expectedSymbols) throws ParseException {  if (!accept(expectedSymbols)) {    String excString="Expected '" + expectedSymbols[0] + "'";    for (int i=1; i < expectedSymbols.length; i++) {      excString+=" or '" + expectedSymbols[i] + "'";    }    excString+=" but found '" + (char)data[index] + "'";    throw new ParseException(excString,index);  }}  }
class C{  public static void validateProperty(Set<String> properties) throws UnknownPropertyNameException, ConfigurationException {  try {    Map propertiesAsMap=ServerConfiguration.getProperties(properties);    validate(propertiesAsMap);  } catch (  IOException ex) {    throw new ConfigurationException(ex.getMessage());  }}  }
class C{  public static LDAPURL valueOf(String url){  Boolean isSSL=null;  String host;  int port;  int firstIdx=url.indexOf(COLON_SLASH_SLASH);  if (firstIdx != -1) {    String scheme=url.substring(0,firstIdx);    if (scheme.equalsIgnoreCase("ldaps")) {      isSSL=true;    } else {      isSSL=false;    }  }  int lastIdx=url.indexOf(SEPARATOR,firstIdx + 1);  if (lastIdx != -1) {    try {      port=Integer.parseInt(url.substring(lastIdx + 1));    } catch (    NumberFormatException nfe) {      port=DEFAULT_PORT;    }  } else {    port=DEFAULT_PORT;  }  firstIdx=firstIdx == -1 ? 0 : firstIdx + COLON_SLASH_SLASH.length();  lastIdx=lastIdx == -1 ? url.length() : lastIdx;  host=url.substring(firstIdx,lastIdx);  if (port < 1 || port > 65535) {    port=DEFAULT_PORT;  }  return new LDAPURL(host,port,isSSL);}  }
class C{  public void test_Ctor() throws Exception {  try {    new testCipher(null,null,"s");    fail();  } catch (  NullPointerException expected) {  }  try {    new testCipher(new MyCipher(),null,"s");    fail("NullPointerException expected for 'null' provider");  } catch (  NullPointerException expected) {  }  try {    new testCipher(null,new Provider("qwerty",1.0,"qwerty"){    },"s");    fail("NullPointerException expected for 'null' cipherSpi");  } catch (  NullPointerException expected) {  }}  }
class C{  private void sendRegistrationToServer(String token){}  }
class C{  public AccessibleRelation(String key,Object target){  this.key=key;  this.target=new Object[1];  this.target[0]=target;}  }
class C{  public static long decodeUint32BigEndian(final byte[] data,final int start){  final int b1=data[start] & 0xff;  final int b2=data[start + 1] & 0xff;  final int b3=data[start + 2] & 0xff;  final int b4=data[start + 3] & 0xff;  return (b1 << 24 | b2 << 16 | b3 << 8 | b4) & 0xFFFFFFFFL;}  }
class C{  public void testFlipBitPositiveOutside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=191;  byte rBytes[]={0,-128,0,0,0,0,0,0,0,0,0,0,1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private boolean useCustomFilter(){  return controller.getFilter() != null && !BrowserController.ALL_OBJECTS_FILTER.equals(controller.getFilter());}  }
class C{  public static double[] copyOf(double[] original,int newLength){  double[] copy=new double[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  static public void removeObject(SSOToken token,Guid guid) throws EntryNotFoundException, UMSException {  try {    SSOTokenManager.getInstance().validateToken(token);  } catch (  SSOException se) {    throw new UMSException(i18n.getString(IUMSConstants.INVALID_TOKEN),se);  }  try {    DataLayer.getInstance().deleteEntry(token.getPrincipal(),guid);  } catch (  SSOException se) {    throw new UMSException(i18n.getString(IUMSConstants.BAD_TOKEN_HDL),se);  }}  }
class C{  public long skip(long n) throws IOException {  return in.skip(n);}  }
class C{  public int next(){  final int startNode=_startNode;  if (startNode == NULL) {    return NULL;  }  if (_includeSelf && (_currentNode + 1) == startNode)   return returnNode(makeNodeHandle(++_currentNode));  int node=_currentNode;  int type;  if (startNode == ROOTNODE) {    int eType;    do {      node++;      eType=_exptype2(node);      if (NULL == eType) {        _currentNode=NULL;        return END;      }    } while (eType == TEXT_NODE || (type=m_extendedTypes[eType].getNodeType()) == ATTRIBUTE_NODE || type == NAMESPACE_NODE);  } else {    do {      node++;      type=_type2(node);      if (NULL == type || !isDescendant(node)) {        _currentNode=NULL;        return END;      }    } while (ATTRIBUTE_NODE == type || TEXT_NODE == type || NAMESPACE_NODE == type);  }  _currentNode=node;  return returnNode(makeNodeHandle(node));}  }
class C{  public void repaint(Rectangle r){}  }
class C{  public boolean isRevocationEnabled(){  return revocationEnabled;}  }
class C{  public final PlaDirection perpendicular_direction(PlaLineInt p_line){  PlaSide side=side_of(p_line);  if (side == PlaSide.COLLINEAR)   return PlaDirection.NULL;  if (side == PlaSide.ON_THE_RIGHT)   return p_line.direction().rotate_45_deg(2); else   return p_line.direction().rotate_45_deg(6);}  }
class C{  public RemoteSession(){  debug=Debug.getInstance("remoteSession");}  }
class C{  private static void exit(final ReturnCode returnCode){  App.STATE.shutdown(returnCode);}  }
class C{  public AddressingFeature(boolean enabled,boolean required){  this(enabled,required,Responses.ALL);}  }
class C{  protected LinearLayout createAndPrepareFoldingContainer(){  LinearLayout foldingContainer=new LinearLayout(getContext());  foldingContainer.setClipToPadding(false);  foldingContainer.setClipChildren(false);  foldingContainer.setOrientation(LinearLayout.VERTICAL);  foldingContainer.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT));  return foldingContainer;}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.HintElement createHintElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.HintElementImpl(value);}  }
class C{  public NASPortTypeAttribute(byte[] octets){  super(octets);  portType=OctetUtils.toIntVal(octets);}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  public ProtocolException(String message){  super(message);}  }
class C{  public PKCS5S2PasswordStorageScheme(){  super();}  }
class C{  public PlaPoint corner_first_next(){  return corner(1);}  }
class C{  private boolean canAccessClipboard(){  SecurityManager sm=System.getSecurityManager();  if (sm == null)   return true;  try {    sm.checkPermission(SecurityConstants.AWT.ACCESS_CLIPBOARD_PERMISSION);    return true;  } catch (  SecurityException e) {  }  return false;}  }
class C{  public void flushPending() throws SAXException {  if (m_needToCallStartDocument) {    startDocumentInternal();    m_needToCallStartDocument=false;  }  if (m_elemContext.m_startTagOpen) {    closeStartTag();    m_elemContext.m_startTagOpen=false;  }  if (m_cdataTagOpen) {    closeCDATA();    m_cdataTagOpen=false;  }}  }
class C{  @Override public void clear(){  if (size != 0) {    Arrays.fill(table,null);    entryForNullKey=null;    modCount++;    size=0;  }}  }
class C{  public ProxyInputStream(InputStream proxy){  super(proxy);}  }
class C{  public boolean isLocalSessionService(URL svcurl){  return serverConfig.isLocalSessionService(svcurl);}  }
class C{  public ValidationException(Throwable exception){  this(null,null,exception);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  private static void verifySimpleXMLName(String name) throws XMPException {  if (!Utils.isXMLName(name)) {    throw new XMPException("Bad XML name",XMPError.BADXPATH);  }}  }
class C{  protected Object processKey(String key){  return argmap.get(key);}  }
class C{  public void write_value(java.io.Serializable value){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  private void sieveSingle(int limit,int start,int step){  while (start < limit) {    set(start);    start+=step;  }}  }
class C{  public static boolean isPortInUse(String hostname,int port){  try {    InetSocketAddress socketAddress=new InetSocketAddress(hostname,port);    return !isPortBound(socketAddress) && !isPortBeingListenedOn(socketAddress);  } catch (  NullPointerException e) {    return false;  }}  }
class C{  private void buildNaturalLanguageString(RuleNode node,StringBuilder sb){  sb.append(node.getItem().getDescriptionShort());  sb.append(", ");  int numChildren=node.getChildren().size();  for (int i=0; i < numChildren; i++) {    buildNaturalLanguageString(node.getChildren().get(i),sb);  }}  }
class C{  public boolean isEnqueued(){  return (this.queue == ReferenceQueue.ENQUEUED);}  }
class C{  public AMException(SSOToken token,String errorCode,UMSException ue){  try {    rootCause=(LdapException)ue.getRootCause();    ldapErrCode=Integer.toString(rootCause.getResult().getResultCode().intValue());    ldapErrorMsg=AMSDKBundle.getString(ldapErrCode);  } catch (  Exception e) {  }  String message=AMSDKBundle.getString(errorCode,AMCommonUtils.getUserLocale(token));  if (ldapErrorMsg != null) {    localizedMsg=message + "::" + ldapErrorMsg;  } else {    localizedMsg=message;  }  this.errorCode=errorCode;}  }
class C{  private static int processSubcommand(ASN1Writer writer) throws IOException {  SubCommand subCommand=argParser.getSubCommand();  if (subCommand == null) {    printWrappedText(err,ERR_PWPSTATE_NO_SUBCOMMAND.get());    err.println(argParser.getUsage());    return CLIENT_SIDE_PARAM_ERROR;  }  String subCommandName=subCommand.getName();  if (subCommandName.equals(SC_GET_ALL)) {  } else   if (subCommandName.equals(SC_GET_PASSWORD_POLICY_DN)) {    encode(writer,OP_GET_PASSWORD_POLICY_DN,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_ACCOUNT_DISABLED_STATE)) {    encode(writer,OP_GET_ACCOUNT_DISABLED_STATE,NO_VALUE);  } else   if (subCommandName.equals(SC_SET_ACCOUNT_DISABLED_STATE)) {    Argument a=subCommand.getArgumentForLongIdentifier(ARG_OP_VALUE);    if (a != null && a.isPresent()) {      String valueStr=a.getValue();      if (isTrueValue(valueStr)) {        encode(writer,OP_SET_ACCOUNT_DISABLED_STATE,"true");      } else       if (isFalseValue(valueStr)) {        encode(writer,OP_SET_ACCOUNT_DISABLED_STATE,"false");      } else {        printWrappedText(err,ERR_PWPSTATE_INVALID_BOOLEAN_VALUE.get(valueStr));        return CLIENT_SIDE_PARAM_ERROR;      }    } else {      printWrappedText(err,ERR_PWPSTATE_NO_BOOLEAN_VALUE.get());      return CLIENT_SIDE_PARAM_ERROR;    }  } else   if (subCommandName.equals(SC_CLEAR_ACCOUNT_DISABLED_STATE)) {    encode(writer,OP_CLEAR_ACCOUNT_DISABLED_STATE,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_ACCOUNT_EXPIRATION_TIME)) {    encode(writer,OP_GET_ACCOUNT_EXPIRATION_TIME,NO_VALUE);  } else   if (subCommandName.equals(SC_SET_ACCOUNT_EXPIRATION_TIME)) {    Argument a=subCommand.getArgumentForLongIdentifier(ARG_OP_VALUE);    if (a != null && a.isPresent()) {      encode(writer,OP_SET_ACCOUNT_EXPIRATION_TIME,a.getValue());    } else {      encode(writer,OP_SET_ACCOUNT_EXPIRATION_TIME,NO_VALUE);    }  } else   if (subCommandName.equals(SC_CLEAR_ACCOUNT_EXPIRATION_TIME)) {    encode(writer,OP_CLEAR_ACCOUNT_EXPIRATION_TIME,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_SECONDS_UNTIL_ACCOUNT_EXPIRATION)) {    encode(writer,OP_GET_SECONDS_UNTIL_ACCOUNT_EXPIRATION,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_PASSWORD_CHANGED_TIME)) {    encode(writer,OP_GET_PASSWORD_CHANGED_TIME,NO_VALUE);  } else   if (subCommandName.equals(SC_SET_PASSWORD_CHANGED_TIME)) {    Argument a=subCommand.getArgumentForLongIdentifier(ARG_OP_VALUE);    if (a != null && a.isPresent()) {      encode(writer,OP_SET_PASSWORD_CHANGED_TIME,a.getValue());    } else {      encode(writer,OP_SET_PASSWORD_CHANGED_TIME,NO_VALUE);    }  } else   if (subCommandName.equals(SC_CLEAR_PASSWORD_CHANGED_TIME)) {    encode(writer,OP_CLEAR_PASSWORD_CHANGED_TIME,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_PASSWORD_EXP_WARNED_TIME)) {    encode(writer,OP_GET_PASSWORD_EXPIRATION_WARNED_TIME,NO_VALUE);  } else   if (subCommandName.equals(SC_SET_PASSWORD_EXP_WARNED_TIME)) {    Argument a=subCommand.getArgumentForLongIdentifier(ARG_OP_VALUE);    if (a != null && a.isPresent()) {      encode(writer,OP_SET_PASSWORD_EXPIRATION_WARNED_TIME,a.getValue());    } else {      encode(writer,OP_SET_PASSWORD_EXPIRATION_WARNED_TIME,NO_VALUE);    }  } else   if (subCommandName.equals(SC_CLEAR_PASSWORD_EXP_WARNED_TIME)) {    encode(writer,OP_CLEAR_PASSWORD_EXPIRATION_WARNED_TIME,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_SECONDS_UNTIL_PASSWORD_EXPIRATION)) {    encode(writer,OP_GET_SECONDS_UNTIL_PASSWORD_EXPIRATION,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_SECONDS_UNTIL_PASSWORD_EXPIRATION_WARNING)) {    encode(writer,OP_GET_SECONDS_UNTIL_PASSWORD_EXPIRATION_WARNING,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_AUTHENTICATION_FAILURE_TIMES)) {    encode(writer,OP_GET_AUTHENTICATION_FAILURE_TIMES,NO_VALUE);  } else   if (subCommandName.equals(SC_ADD_AUTHENTICATION_FAILURE_TIME)) {    Argument a=subCommand.getArgumentForLongIdentifier(ARG_OP_VALUE);    if (a != null && a.isPresent()) {      encode(writer,OP_ADD_AUTHENTICATION_FAILURE_TIME,a.getValue());    } else {      encode(writer,OP_ADD_AUTHENTICATION_FAILURE_TIME,NO_VALUE);    }  } else   if (subCommandName.equals(SC_SET_AUTHENTICATION_FAILURE_TIMES)) {    Argument a=subCommand.getArgumentForLongIdentifier(ARG_OP_VALUE);    if (a != null && a.isPresent()) {      ArrayList<String> valueList=new ArrayList<>(a.getValues());      String[] values=new String[valueList.size()];      valueList.toArray(values);      encode(writer,OP_SET_AUTHENTICATION_FAILURE_TIMES,values);    } else {      encode(writer,OP_SET_AUTHENTICATION_FAILURE_TIMES,NO_VALUE);    }  } else   if (subCommandName.equals(SC_CLEAR_AUTHENTICATION_FAILURE_TIMES)) {    encode(writer,OP_CLEAR_AUTHENTICATION_FAILURE_TIMES,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_SECONDS_UNTIL_AUTHENTICATION_FAILURE_UNLOCK)) {    encode(writer,OP_GET_SECONDS_UNTIL_AUTHENTICATION_FAILURE_UNLOCK,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_REMAINING_AUTHENTICATION_FAILURE_COUNT)) {    encode(writer,OP_GET_REMAINING_AUTHENTICATION_FAILURE_COUNT,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_LAST_LOGIN_TIME)) {    encode(writer,OP_GET_LAST_LOGIN_TIME,NO_VALUE);  } else   if (subCommandName.equals(SC_SET_LAST_LOGIN_TIME)) {    Argument a=subCommand.getArgumentForLongIdentifier(ARG_OP_VALUE);    if (a != null && a.isPresent()) {      encode(writer,OP_SET_LAST_LOGIN_TIME,a.getValue());    } else {      encode(writer,OP_SET_LAST_LOGIN_TIME,NO_VALUE);    }  } else   if (subCommandName.equals(SC_CLEAR_LAST_LOGIN_TIME)) {    encode(writer,OP_CLEAR_LAST_LOGIN_TIME,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_SECONDS_UNTIL_IDLE_LOCKOUT)) {    encode(writer,OP_GET_SECONDS_UNTIL_IDLE_LOCKOUT,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_PASSWORD_RESET_STATE)) {    encode(writer,OP_GET_PASSWORD_RESET_STATE,NO_VALUE);  } else   if (subCommandName.equals(SC_SET_PASSWORD_RESET_STATE)) {    Argument a=subCommand.getArgumentForLongIdentifier(ARG_OP_VALUE);    if (a != null && a.isPresent()) {      String valueStr=a.getValue();      if (isTrueValue(valueStr)) {        encode(writer,OP_SET_PASSWORD_RESET_STATE,"true");      } else       if (isFalseValue(valueStr)) {        encode(writer,OP_SET_PASSWORD_RESET_STATE,"false");      } else {        printWrappedText(err,ERR_PWPSTATE_INVALID_BOOLEAN_VALUE.get(valueStr));        return CLIENT_SIDE_PARAM_ERROR;      }    } else {      printWrappedText(err,ERR_PWPSTATE_NO_BOOLEAN_VALUE.get());      return CLIENT_SIDE_PARAM_ERROR;    }  } else   if (subCommandName.equals(SC_CLEAR_PASSWORD_RESET_STATE)) {    encode(writer,OP_GET_PASSWORD_RESET_STATE,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_SECONDS_UNTIL_PASSWORD_RESET_LOCKOUT)) {    encode(writer,OP_GET_SECONDS_UNTIL_PASSWORD_RESET_LOCKOUT,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_GRACE_LOGIN_USE_TIMES)) {    encode(writer,OP_GET_GRACE_LOGIN_USE_TIMES,NO_VALUE);  } else   if (subCommandName.equals(SC_ADD_GRACE_LOGIN_USE_TIME)) {    Argument a=subCommand.getArgumentForLongIdentifier(ARG_OP_VALUE);    if (a != null && a.isPresent()) {      encode(writer,OP_ADD_GRACE_LOGIN_USE_TIME,a.getValue());    } else {      encode(writer,OP_ADD_GRACE_LOGIN_USE_TIME,NO_VALUE);    }  } else   if (subCommandName.equals(SC_SET_GRACE_LOGIN_USE_TIMES)) {    Argument a=subCommand.getArgumentForLongIdentifier(ARG_OP_VALUE);    if (a != null && a.isPresent()) {      ArrayList<String> valueList=new ArrayList<>(a.getValues());      String[] values=new String[valueList.size()];      valueList.toArray(values);      encode(writer,OP_SET_GRACE_LOGIN_USE_TIMES,values);    } else {      encode(writer,OP_SET_GRACE_LOGIN_USE_TIMES,NO_VALUE);    }  } else   if (subCommandName.equals(SC_CLEAR_GRACE_LOGIN_USE_TIMES)) {    encode(writer,OP_CLEAR_GRACE_LOGIN_USE_TIMES,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_REMAINING_GRACE_LOGIN_COUNT)) {    encode(writer,OP_GET_REMAINING_GRACE_LOGIN_COUNT,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_PASSWORD_CHANGED_BY_REQUIRED_TIME)) {    encode(writer,OP_GET_PASSWORD_CHANGED_BY_REQUIRED_TIME,NO_VALUE);  } else   if (subCommandName.equals(SC_SET_PASSWORD_CHANGED_BY_REQUIRED_TIME)) {    Argument a=subCommand.getArgumentForLongIdentifier(ARG_OP_VALUE);    if (a != null && a.isPresent()) {      encode(writer,OP_SET_PASSWORD_CHANGED_BY_REQUIRED_TIME,a.getValue());    } else {      encode(writer,OP_SET_PASSWORD_CHANGED_BY_REQUIRED_TIME,NO_VALUE);    }  } else   if (subCommandName.equals(SC_CLEAR_PASSWORD_CHANGED_BY_REQUIRED_TIME)) {    encode(writer,OP_CLEAR_PASSWORD_CHANGED_BY_REQUIRED_TIME,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_SECONDS_UNTIL_REQUIRED_CHANGE_TIME)) {    encode(writer,OP_GET_SECONDS_UNTIL_REQUIRED_CHANGE_TIME,NO_VALUE);  } else   if (subCommandName.equals(SC_GET_PASSWORD_HISTORY)) {    encode(writer,OP_GET_PASSWORD_HISTORY,NO_VALUE);  } else   if (subCommandName.equals(SC_CLEAR_PASSWORD_HISTORY)) {    encode(writer,OP_CLEAR_PASSWORD_HISTORY,NO_VALUE);  } else {    printWrappedText(err,ERR_PWPSTATE_INVALID_SUBCOMMAND.get(subCommandName));    err.println(argParser.getUsage());    return CLIENT_SIDE_PARAM_ERROR;  }  return SUCCESS;}  }
class C{  public void refresh(){  ArtSettings settings=i_board.itera_settings.autoroute_settings;  vias_allowed.setSelected(settings.vias_allowed);  vias_remove_uconn.setSelected(settings.stop_remove_fanout_vias);  no_ripup.setSelected(settings.no_ripup);  fanout_pass_button.setSelected(settings.get_with_fanout());  autoroute_pass_button.setSelected(settings.get_with_autoroute());  postroute_pass_button.setSelected(settings.get_with_postroute());  layer_table_model.fireTableChanged();  detail_window.refresh();}  }
class C{  public boolean isUnseqToken(){  return unseqToken;}  }
class C{  public String[] _ids(){  return (String[])_type_ids.clone();}  }
class C{  final void reject(Runnable command){  handler.rejectedExecution(command,this);}  }
class C{  public Set<K> keySet(){  Set<K> ks=keySet;  if (ks != null)   return ks; else   return keySet=new KeySet();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  DOMImplementation domImpl;  String publicId;  String systemId;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("l2:root","PUB","SYS");  publicId=docType.getPublicId();  systemId=docType.getSystemId();  assertEquals("documenttypepublicid01","PUB",publicId);  assertEquals("documenttypesystemid01","SYS",systemId);}  }
class C{  private static JEditorPane makeHtmlPane(LocalizableMessage text,HTMLEditorKit ek,Font font){  JEditorPane pane=new JEditorPane();  if (ek != null) {    pane.setEditorKit(ek);  }  pane.setContentType("text/html");  String s=text != null ? String.valueOf(text) : null;  pane.setText(applyFontToHtmlWithDiv(s,font));  pane.setEditable(false);  pane.setBorder(new EmptyBorder(0,0,0,0));  return pane;}  }
class C{  private void initH2Console(ServletContext servletContext){  log.debug("Initialize H2 console");  ServletRegistration.Dynamic h2ConsoleServlet=servletContext.addServlet("H2Console",new org.h2.server.web.WebServlet());  h2ConsoleServlet.addMapping("/h2-console/*");  h2ConsoleServlet.setInitParameter("-properties","src/main/resources/");  h2ConsoleServlet.setLoadOnStartup(1);}  }
class C{  public void recompose() throws TransformerException {  Vector recomposableElements=new Vector();  if (null == m_globalImportList) {    Vector importList=new Vector();    addImports(this,true,importList);    m_globalImportList=new StylesheetComposed[importList.size()];    for (int i=0, j=importList.size() - 1; i < importList.size(); i++) {      m_globalImportList[j]=(StylesheetComposed)importList.elementAt(i);      m_globalImportList[j].recomposeIncludes(m_globalImportList[j]);      m_globalImportList[j--].recomposeImports();    }  }  int n=getGlobalImportCount();  for (int i=0; i < n; i++) {    StylesheetComposed imported=getGlobalImport(i);    imported.recompose(recomposableElements);  }  QuickSort2(recomposableElements,0,recomposableElements.size() - 1);  m_outputProperties=new OutputProperties(org.apache.xml.serializer.Method.UNKNOWN);  m_attrSets=new HashMap();  m_decimalFormatSymbols=new Hashtable();  m_keyDecls=new Vector();  m_namespaceAliasComposed=new Hashtable();  m_templateList=new TemplateList();  m_variables=new Vector();  for (int i=recomposableElements.size() - 1; i >= 0; i--)   ((ElemTemplateElement)recomposableElements.elementAt(i)).recompose(this);  initComposeState();  m_templateList.compose(this);  m_outputProperties.compose(this);  m_outputProperties.endCompose(this);  n=getGlobalImportCount();  for (int i=0; i < n; i++) {    StylesheetComposed imported=this.getGlobalImport(i);    int includedCount=imported.getIncludeCountComposed();    for (int j=-1; j < includedCount; j++) {      Stylesheet included=imported.getIncludeComposed(j);      composeTemplates(included);    }  }  if (m_extNsMgr != null)   m_extNsMgr.registerUnregisteredNamespaces();  clearComposeState();}  }
class C{  @Override public String generateName(final IntUnaryOperator randomInRange,final int length){  if (length == 0) {    return "LENGTH_WAS_ZERO";  }  final StringBuilder sb=new StringBuilder();  final int initialSequenceIndex=randomInRange.applyAsInt(sequences.size());  final String initialSequence=sequences.get(initialSequenceIndex);  sb.append(initialSequence);  char previous=initialSequence.charAt(0);  char current=initialSequence.charAt(1);  for (int i=2; i < length; ++i) {    final String key=previous + "" + current;    try {      final char next=chooseNextCharacter(randomInRange,key);      sb.append(next);      previous=current;      current=next;    } catch (    final NoSuchElementException e) {      break;    }  }  return formatName(sb.toString());}  }
class C{  private static Handler<AsyncResult<Void>> completer(Future<SQLConnection> future,SQLConnection connection){  return null;}  }
class C{  public void addSubject(Subject subject) throws NameAlreadyExistsException {  addSubject(null,subject,false);}  }
class C{  private ValueDecoder(){}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.RequestAuthnContextElement createRequestAuthnContextElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.RequestAuthnContextElementImpl();}  }
class C{  public Hyphenator(String lang,String country,int leftMin,int rightMin){  this.lang=lang;  this.country=country;  this.leftMin=leftMin;  this.rightMin=rightMin;}  }
class C{  public boolean equals(Object p_test){  if (p_test instanceof URI) {    URI testURI=(URI)p_test;    if (((m_scheme == null && testURI.m_scheme == null) || (m_scheme != null && testURI.m_scheme != null && m_scheme.equals(testURI.m_scheme))) && ((m_userinfo == null && testURI.m_userinfo == null) || (m_userinfo != null && testURI.m_userinfo != null && m_userinfo.equals(testURI.m_userinfo))) && ((m_host == null && testURI.m_host == null) || (m_host != null && testURI.m_host != null && m_host.equals(testURI.m_host)))&& m_port == testURI.m_port && ((m_path == null && testURI.m_path == null) || (m_path != null && testURI.m_path != null && m_path.equals(testURI.m_path))) && ((m_queryString == null && testURI.m_queryString == null) || (m_queryString != null && testURI.m_queryString != null && m_queryString.equals(testURI.m_queryString))) && ((m_fragment == null && testURI.m_fragment == null) || (m_fragment != null && testURI.m_fragment != null && m_fragment.equals(testURI.m_fragment)))) {      return true;    }  }  return false;}  }
class C{  public int process(Callback[] callbacks,int state) throws AuthLoginException {  int returnState=-1;switch (state) {case 1:    returnState=processState1(callbacks);  break;case 2:returnState=processState2(callbacks);break;case 3:returnState=processState3(callbacks);break;case 4:returnState=processState4(callbacks);break;default :throw new AuthLoginException("Invalid state : " + state);}return returnState;}  }
class C{  public void testFlipBitZeroOutside1(){  byte aBytes[]={0};  int aSign=0;  int number=62;  byte rBytes[]={64,0,0,0,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue("incorrect value",resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void test_removeAt_siftUp(){  PriorityQueue<Integer> q=new PriorityQueue<Integer>();  for (  int i : new int[]{0,3,1,4,5,6,2}) {    q.add(i);  }  q.remove(4);  for (  int i : new int[]{0,1,2,3,5,6}) {    assertEquals(i,(int)q.poll());  }  assertNull(q.poll());}  }
class C{  public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return getService().dynamicQueryCount(dynamicQuery);}  }
class C{  public MP3File(String filename) throws IOException, TagException, ReadOnlyFileException, InvalidAudioFrameException {  this(new File(filename));}  }
class C{  @Override public final Object invokeMethod(String name,Object args){  GlobalVariable v=GlobalVariable.byName(name,$buildNoException());  if (v != null) {    try {      Object o=v.getValue(this);      return InvokerHelper.getMetaClass(o).invokeMethod(o,"call",args);    } catch (    Exception x) {      throw new InvokerInvocationException(x);    }  }  DSL dsl=(DSL)getBinding().getVariable(STEPS_VAR);  return dsl.invokeMethod(name,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNS04.class,args);}  }
class C{  public int height(){  return box_ur.v_y - box_ll.v_y;}  }
class C{  public void curveTo(float x2,float y2,float x3,float y3){  if (currentPoint == null) {    throw new RuntimeException(START_PATH_ERR_MSG);  }  curveTo((float)currentPoint.getX(),(float)currentPoint.getY(),x2,y2,x3,y3);}  }
class C{  public static TitledBorder createTitledBorder(Border border,String title,int titleJustification,int titlePosition,Font titleFont){  return new TitledBorder(border,title,titleJustification,titlePosition,titleFont);}  }
class C{  @Inject public ServiceConfigProviderFactoryImpl(Injector injector){  providers=new ConcurrentHashMap<>();  this.injector=injector;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public static String convertID3v24GenreToGeneric(String value){  try {    int genreId=Integer.parseInt(value);    if (genreId < GenreTypes.getMaxStandardGenreId()) {      return GenreTypes.getInstanceOf().getValueForId(genreId);    } else {      return value;    }  } catch (  NumberFormatException nfe) {    if (value.equalsIgnoreCase(ID3V2ExtendedGenreTypes.RX.name())) {      value=ID3V2ExtendedGenreTypes.RX.getDescription();    } else     if (value.equalsIgnoreCase(ID3V2ExtendedGenreTypes.CR.name())) {      value=ID3V2ExtendedGenreTypes.CR.getDescription();    } else {      return value;    }  }  return value;}  }
class C{  public Vector processSortKeys(ElemForEach foreach,int sourceNodeContext) throws TransformerException {  Vector keys=null;  XPathContext xctxt=m_xcontext;  int nElems=foreach.getSortElemCount();  if (nElems > 0)   keys=new Vector();  for (int i=0; i < nElems; i++) {    ElemSort sort=foreach.getSortElem(i);    String langString=(null != sort.getLang()) ? sort.getLang().evaluate(xctxt,sourceNodeContext,foreach) : null;    String dataTypeString=sort.getDataType().evaluate(xctxt,sourceNodeContext,foreach);    if (dataTypeString.indexOf(":") >= 0)     System.out.println("TODO: Need to write the hooks for QNAME sort data type"); else     if (!(dataTypeString.equalsIgnoreCase(Constants.ATTRVAL_DATATYPE_TEXT)) && !(dataTypeString.equalsIgnoreCase(Constants.ATTRVAL_DATATYPE_NUMBER)))     foreach.error(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_DATATYPE,dataTypeString});    boolean treatAsNumbers=((null != dataTypeString) && dataTypeString.equals(Constants.ATTRVAL_DATATYPE_NUMBER)) ? true : false;    String orderString=sort.getOrder().evaluate(xctxt,sourceNodeContext,foreach);    if (!(orderString.equalsIgnoreCase(Constants.ATTRVAL_ORDER_ASCENDING)) && !(orderString.equalsIgnoreCase(Constants.ATTRVAL_ORDER_DESCENDING)))     foreach.error(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_ORDER,orderString});    boolean descending=((null != orderString) && orderString.equals(Constants.ATTRVAL_ORDER_DESCENDING)) ? true : false;    AVT caseOrder=sort.getCaseOrder();    boolean caseOrderUpper;    if (null != caseOrder) {      String caseOrderString=caseOrder.evaluate(xctxt,sourceNodeContext,foreach);      if (!(caseOrderString.equalsIgnoreCase(Constants.ATTRVAL_CASEORDER_UPPER)) && !(caseOrderString.equalsIgnoreCase(Constants.ATTRVAL_CASEORDER_LOWER)))       foreach.error(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_CASEORDER,caseOrderString});      caseOrderUpper=((null != caseOrderString) && caseOrderString.equals(Constants.ATTRVAL_CASEORDER_UPPER)) ? true : false;    } else {      caseOrderUpper=false;    }    keys.addElement(new NodeSortKey(this,sort.getSelect(),treatAsNumbers,descending,langString,caseOrderUpper,foreach));  }  return keys;}  }
class C{  public static void generate(ServletWriter out,Compiler compiler,Node.Nodes page) throws JasperException {  Generator gen=new Generator(out,compiler);  if (gen.isPoolingEnabled) {    gen.compileTagHandlerPoolList(page);  }  gen.generateCommentHeader();  if (gen.ctxt.isTagFile()) {    JasperTagInfo tagInfo=(JasperTagInfo)gen.ctxt.getTagInfo();    gen.generateTagHandlerPreamble(tagInfo,page);    if (gen.ctxt.isPrototypeMode()) {      return;    }    gen.generateXmlProlog(page);    gen.fragmentHelperClass.generatePreamble();    page.visit(gen.new GenerateVisitor(gen.ctxt.isTagFile(),out,gen.methodsBuffered,gen.fragmentHelperClass));    gen.generateTagHandlerPostamble(tagInfo);  } else {    gen.generatePreamble(page);    gen.generateXmlProlog(page);    gen.fragmentHelperClass.generatePreamble();    page.visit(gen.new GenerateVisitor(gen.ctxt.isTagFile(),out,gen.methodsBuffered,gen.fragmentHelperClass));    gen.generatePostamble();  }}  }
class C{  private int promptForInteger(LocalizableMessage prompt,Integer defaultValue,Integer lowerBound,Integer upperBound){  int returnValue=-1;  while (returnValue == -1) {    String s;    try {      s=readInput(prompt,String.valueOf(defaultValue));    } catch (    final ClientException ce) {      s="";      logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));    }    if ("".equals(s)) {      if (defaultValue == null) {        println(ERR_INSTALLDS_INVALID_INTEGER_RESPONSE.get());        println();      } else {        returnValue=defaultValue;      }    } else {      try {        final int intValue=Integer.parseInt(s);        if (lowerBound != null && intValue < lowerBound) {          println(ERR_INSTALLDS_INTEGER_BELOW_LOWER_BOUND.get(lowerBound));          println();        } else         if (upperBound != null && intValue > upperBound) {          println(ERR_INSTALLDS_INTEGER_ABOVE_UPPER_BOUND.get(upperBound));          println();        } else {          returnValue=intValue;        }      } catch (      final NumberFormatException nfe) {        println(ERR_INSTALLDS_INVALID_INTEGER_RESPONSE.get());        println();      }    }  }  return returnValue;}  }
class C{  public void test_setKeyEntryLjava_lang_StringLjava_security_Key$C$Ljava_security_cert_Certificate() throws Exception {  CertificateFactory cf=CertificateFactory.getInstance("X.509");  X509Certificate cert[]=new X509Certificate[2];  cert[0]=(X509Certificate)cf.generateCertificate(certArray);  cert[1]=(X509Certificate)cf.generateCertificate(certArray2);  KeyStore keyTest=KeyStore.getInstance(KeyStore.getDefaultType());  try {    keyTest.setKeyEntry("alias3",getPrivateKey(),pssWord,cert);    fail();  } catch (  KeyStoreException expected) {  }  keyTest.load(null,null);  keyTest.setKeyEntry("alias3",getPrivateKey(),pssWord,cert);  assertTrue("the entry specified by the alias alias3 is not a keyEntry",keyTest.isKeyEntry("alias3"));  try {    keyTest.setKeyEntry("alias4",getPrivateKey(),pssWord,new Certificate[]{});    fail();  } catch (  IllegalArgumentException expected) {  }}  }
class C{  protected void parseDOMAttributes(Element element) throws SAML2Exception {  requestId=element.getAttribute(SAML2Constants.ID);  validateID(requestId);  version=element.getAttribute(SAML2Constants.VERSION);  validateVersion(version);  String issueInstantStr=element.getAttribute(SAML2Constants.ISSUE_INSTANT);  validateIssueInstant(issueInstantStr);  destinationURI=element.getAttribute(SAML2Constants.DESTINATION);  consent=element.getAttribute(SAML2Constants.CONSENT);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  FSAuthDomainsModel model=(FSAuthDomainsModel)getModel();  String name=(String)getDisplayFieldValue(model.TF_NAME);  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  try {    String realm=model.getRealm(name);    Map values=ps.getAttributeValues(model.getDataMap(),false,model);    model.setAttributeValues(realm,name,values);    SerializedField szCache=(SerializedField)getChild(SZ_CACHE);    FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);    CCAddRemove addRemoveList=(CCAddRemove)getChild(ADD_REMOVE_PROVIDERS);    addRemoveList.restoreStateData();    CCAddRemoveModel addRemoveModel=(CCAddRemoveModel)addRemoveList.getModel();    List list=new ArrayList(getSelectedValues(addRemoveModel));    model.addProviders(realm,name,list);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","authentication.domain.updated");    forwardTo();  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public ColorIntensityTable(){  inte_arr=new double[ColorIntensityName.values().length];  inte_arr[ColorIntensityName.TRACES.ordinal()]=0.4;  inte_arr[ColorIntensityName.VIAS.ordinal()]=0.6;  inte_arr[ColorIntensityName.PINS.ordinal()]=0.6;  inte_arr[ColorIntensityName.CONDUCTION_AREAS.ordinal()]=0.2;  inte_arr[ColorIntensityName.KEEPOUTS.ordinal()]=0.2;  inte_arr[ColorIntensityName.VIA_KEEPOUTS.ordinal()]=0.2;  inte_arr[ColorIntensityName.PLACE_KEEPOUTS.ordinal()]=0.2;  inte_arr[ColorIntensityName.COMPONENT_OUTLINES.ordinal()]=1;  inte_arr[ColorIntensityName.HILIGHT.ordinal()]=0.8;  inte_arr[ColorIntensityName.INCOMPLETES.ordinal()]=1;  inte_arr[ColorIntensityName.LENGTH_MATCHING_AREAS.ordinal()]=0.1;}  }
class C{  public static boolean isWeakKey(byte[] key,int offset){  return isWeakKey(key,offset,key.length - offset);}  }
class C{  protected Socket(SocketImpl impl) throws SocketException {  this.impl=impl;  this.proxy=null;}  }
class C{  public void updateUI(){  boolean hadUI=(ui != null);  setUI((DesktopIconUI)UIManager.getUI(this));  invalidate();  Dimension r=getPreferredSize();  setSize(r.width,r.height);  if (internalFrame != null && internalFrame.getUI() != null) {    SwingUtilities.updateComponentTreeUI(internalFrame);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetattributenodenull.class,args);}  }
class C{  @Override protected void handleErrorOutput(String output){  if (redirectOutput) {    if (redirectErrPrintStream == null) {      openRedirector();    }    redirectErrPrintStream.println(output);    if (alwaysLog) {      log(output,Project.MSG_ERR);    }  } else {    log(output,Project.MSG_ERR);  }}  }
class C{  public void update(Graphics g){  paint(g);}  }
class C{  public LockableFileWriter(File file,Charset encoding) throws IOException {  this(file,encoding,false,null);}  }
class C{  private String computeExpectedRootElements(){  String r="";  String[] probePoints=grammarInfo.getProbePoints();  for (int i=0; i < probePoints.length; i+=2) {    if (grammarInfo.recognize(probePoints[i],probePoints[i + 1])) {      if (r.length() != 0)       r+=',';      r+="<{" + probePoints[i] + "}"+ probePoints[i + 1]+ ">";    }  }  return r;}  }
class C{  public static void writeAttribue(final UIComponent component,final String key,final Object defaultValue) throws IOException {  JKJsfUtil.writeAttribue(component,key,null,defaultValue);}  }
class C{  public void test_addSubjectAlternativeNameLintLjava_lang_String(){  int[] types={GeneralName.OTHER_NAME,GeneralName.DNS_NAME,GeneralName.X400_ADDR,GeneralName.DIR_NAME,GeneralName.EDIP_NAME,GeneralName.UR_ID,GeneralName.IP_ADDR,GeneralName.REG_ID};  for (int i=0; i < types.length; i++) {    try {      new X509CertSelector().addSubjectAlternativeName(types[i],"-0xDFRF");      fail("IOException expected for type: " + types[i]);    } catch (    IOException expected) {    }  }}  }
class C{  public PdfCanvasParser(PdfTokenizer tokeniser){  this.tokeniser=tokeniser;}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  if (path == null) {    throw new BuildException("Must specify 'path' attribute");  }  if ((war == null) && (localWar == null) && (config == null)&& (tag == null)) {    throw new BuildException("Must specify either 'war', 'localWar', 'config', or 'tag' attribute");  }  BufferedInputStream stream=null;  String contentType=null;  long contentLength=-1;  if (war != null) {    if (PROTOCOL_PATTERN.matcher(war).lookingAt()) {      try {        URL url=new URL(war);        URLConnection conn=url.openConnection();        contentLength=conn.getContentLengthLong();        stream=new BufferedInputStream(conn.getInputStream(),1024);      } catch (      IOException e) {        throw new BuildException(e);      }    } else {      FileInputStream fsInput=null;      try {        fsInput=new FileInputStream(war);        contentLength=fsInput.getChannel().size();        stream=new BufferedInputStream(fsInput,1024);      } catch (      IOException e) {        if (fsInput != null) {          try {            fsInput.close();          } catch (          IOException ioe) {          }        }        throw new BuildException(e);      }    }    contentType="application/octet-stream";  }  StringBuilder sb=createQueryString("/deploy");  try {    if ((war == null) && (config != null)) {      sb.append("&config=");      sb.append(URLEncoder.encode(config,getCharset()));    }    if ((war == null) && (localWar != null)) {      sb.append("&war=");      sb.append(URLEncoder.encode(localWar,getCharset()));    }    if (update) {      sb.append("&update=true");    }    if (tag != null) {      sb.append("&tag=");      sb.append(URLEncoder.encode(tag,getCharset()));    }    execute(sb.toString(),stream,contentType,contentLength);  } catch (  UnsupportedEncodingException e) {    throw new BuildException("Invalid 'charset' attribute: " + getCharset());  } finally {    if (stream != null) {      try {        stream.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public String toString(){  return " Name=" + _name + " Attrs="+ _atts.toString()+ " Elems="+ _elems.toString()+ " PCDATA="+ _pcdata;}  }
class C{  public boolean addValue(String type,List<ByteString> valuePattern,String dnString) throws DirectoryException {  if (hasTypeWildcard || type.contains("*")) {    LocalizableMessage message=WARN_PATTERN_DN_TYPE_WILDCARD_IN_MULTIVALUED_RDN.get(dnString);    throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);  }  int oldLength=typePatterns.length;  typePatterns=Arrays.copyOf(typePatterns,oldLength + 1);  typePatterns[oldLength]=type;  valuePatterns.add(valuePattern);  return true;}  }
class C{  public RealmContext(Context parent,Realm realm){  this(parent,realm,false);}  }
class C{  public void handleTblDataActionDeleteHrefRequest(RequestInvocationEvent event){  String name=(String)getDisplayFieldValue(TBL_DATA_ACTION_DELETE_HREF);  deleteDevice(name,"clientDetection.client.deleted.message");  forwardTo();}  }
class C{  public float angle(Vector other){  double dot=dot(other) / (length() * other.length());  return (float)Math.acos(dot);}  }
class C{  public GeneralNamesException(String message){  super(message);}  }
class C{  private E firstDataItem(){  for (Node p=head; p != null; p=succ(p)) {    Object item=p.item;    if (p.isData) {      if (item != null && item != p)       return LinkedTransferQueue.<E>cast(item);    } else     if (item == null)     return null;  }  return null;}  }
class C{  void CreateNonCIDPrivate(int Font,OffsetItem Subr){  seek(fonts[Font].privateOffset);  while (getPosition() < fonts[Font].privateOffset + fonts[Font].privateLength) {    int p1=getPosition();    getDictItem();    int p2=getPosition();    if ("Subrs".equals(key)) {      OutputList.addLast(Subr);      OutputList.addLast(new UInt8Item((char)19));    } else     OutputList.addLast(new RangeItem(buf,p1,p2 - p1));  }}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null) {    for (LinkedEntry<K,V> header=this.header, e=header.nxt; e != header; e=e.nxt) {      if (e.value == null) {        return true;      }    }    return false;  }  for (LinkedEntry<K,V> header=this.header, e=header.nxt; e != header; e=e.nxt) {    if (value.equals(e.value)) {      return true;    }  }  return false;}  }
class C{  public SessionPollerSender(Session session,SessionCuller sessionCuller){  this.sessionCuller=sessionCuller;  this.session=session;  this.sid=session.getID();}  }
class C{  public char charAt(int where){  int len=length();  if (where < 0) {    throw new IndexOutOfBoundsException("charAt: " + where + " < 0");  } else   if (where >= len) {    throw new IndexOutOfBoundsException("charAt: " + where + " >= length "+ len);  }  if (where >= mGapStart)   return mText[where + mGapLength]; else   return mText[where];}  }
class C{  public void addAttribute(Object key,Object value){  keys.addElement(key);  data.addElement(value);}  }
class C{  @Override public boolean ready() throws IOException {synchronized (lock) {    checkNotClosed();    return ((end - pos) > 0) || in.ready();  }}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public char current(){  if (offset == end) {    return DONE;  }  return string.charAt(offset);}  }
class C{  public void add(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (last == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.first;    last.next=elem;    elem.prev=last;    last=insns.last;  }  cache=null;  insns.removeAll(false);}  }
class C{  @Override public void put(String name,float value){  emulatedFields.put(name,value);}  }
class C{  public synchronized void addStratum(SmapStratum stratum,boolean defaultStratum){  strata.add(stratum);  if (defaultStratum)   this.defaultStratum=stratum.getStratumName();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttribute;  NodeList addressElementList;  Element testAddress;  Element newElement;  Node appendedChild;  Attr setAttr1;  Attr setAttr2;  doc=(Document)load("staff",true);  addressElementList=doc.getElementsByTagName("address");  testAddress=(Element)addressElementList.item(1);  newElement=doc.createElement("newElement");  appendedChild=testAddress.appendChild(newElement);  newAttribute=doc.createAttribute("newAttribute");  setAttr1=newElement.setAttributeNode(newAttribute);{    boolean success=false;    try {      setAttr2=testAddress.setAttributeNode(newAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  void parseComment() throws IOException {  while (true) {    int c=ch;switch (c) {case '-':      if (!strict && (strpos != 0) && (str[strpos - 1] == '-')) {        if ((ch=readCh()) == '>') {          return;        }        if (ch == '!') {          if ((ch=readCh()) == '>') {            return;          } else {            addString('-');            addString('!');            continue;          }        }        break;      }    if ((ch=readCh()) == '-') {      ch=readCh();      if (strict || ch == '>') {        return;      }      if (ch == '!') {        if ((ch=readCh()) == '>') {          return;        } else {          addString('-');          addString('!');          continue;        }      }      addString('-');    }  break;case -1:handleEOFInComment();return;case '\n':ln++;ch=readCh();lfCount++;break;case '>':ch=readCh();break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}c='\n';break;default :ch=readCh();break;}addString(c);}}  }
class C{  public DialogDoesNotExistException(String message,Throwable cause){  super(message,cause);}  }
class C{  @AfterClass public void cleanUp() throws Exception {  TestCaseUtils.dsconfig("set-global-configuration-prop","--remove","allowed-task:org.opends.server.tasks.DummyTask");}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  public static String charsToEntities(String str,boolean xml11){  StringBuilder buf=new StringBuilder(str.length());  for (int i=0; i < str.length(); i++) {    char ch=str.charAt(i);    if (((0x00 <= ch && ch <= 0x1F) || (0x7F <= ch && ch <= 0x9F)) && ch != '\r' && ch != '\n' && ch != '\t') {      if (xml11 && ch != 0x00) {        buf.append("&#").append((int)ch).append(';');      } else {        buf.append("<?illegal-xml-character ").append((int)ch).append("?>");      }      continue;    }switch (ch) {case '<':      buf.append("&lt;");    break;case '>':  buf.append("&gt;");break;case '&':buf.append("&amp;");break;default :buf.append(ch);break;}}return buf.toString();}  }
class C{  public void testNegateMathContextNegative(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=49;  int precision=46;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String c="9294878209448847823.121247898748298842980877982";  int cScale=27;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal res=aNumber.negate(mc);  assertEquals("incorrect value",c,res.toString());  assertEquals("incorrect scale",cScale,res.scale());}  }
class C{  public boolean removeSubjectConfirmation(){  if (_nameIdentifier == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Subject:At least one of " + "NameIdentifier and SubjectConfirmation is mandatory");    }    return false;  }  _subjectConfirmation=null;  return true;}  }
class C{  public Mp4StcoBox(Mp4BoxHeader header,ByteBuffer buffer){  this.header=header;  dataBuffer=buffer.slice();  dataBuffer.position(dataBuffer.position() + VERSION_FLAG_LENGTH + OTHER_FLAG_LENGTH);  this.noOfOffSets=Utils.getIntBE(dataBuffer,dataBuffer.position(),(dataBuffer.position() + NO_OF_OFFSETS_LENGTH - 1));  dataBuffer.position(dataBuffer.position() + NO_OF_OFFSETS_LENGTH);  firstOffSet=Utils.getIntBE(dataBuffer,dataBuffer.position(),(dataBuffer.position() + OFFSET_LENGTH - 1));}  }
class C{  @DataProvider(name="createDNComparisonData") public Object[][] createDNComparisonData(){  return new Object[][]{{"cn=hello world,dc=com","cn=hello world,dc=com",0},{"cn=hello world,dc=com","CN=hello world,dc=com",0},{"cn=hello   world,dc=com","cn=hello world,dc=com",0},{"  cn =  hello world  ,dc=com","cn=hello world,dc=com",0},{"cn=hello world\\ ,dc=com","cn=hello world,dc=com",0},{"cn=HELLO WORLD,dc=com","cn=hello world,dc=com",0},{"cn=HELLO+sn=WORLD,dc=com","sn=world+cn=hello,dc=com",0},{"governingStructureRule=10,dc=com","governingStructureRule=9,dc=com",1},{"governingStructureRule=999,dc=com","governingStructureRule=1000,dc=com",-1},{"governingStructureRule=-1,dc=com","governingStructureRule=0,dc=com",-1},{"governingStructureRule=0,dc=com","governingStructureRule=-1,dc=com",1},{"cn=aaa,dc=com","cn=aaaa,dc=com",-1},{"cn=AAA,dc=com","cn=aaaa,dc=com",-1},{"cn=aaa,dc=com","cn=AAAA,dc=com",-1},{"cn=aaaa,dc=com","cn=aaa,dc=com",1},{"cn=AAAA,dc=com","cn=aaa,dc=com",1},{"cn=aaaa,dc=com","cn=AAA,dc=com",1},{"cn=aaab,dc=com","cn=aaaa,dc=com",1},{"cn=aaaa,dc=com","cn=aaab,dc=com",-1},{"dc=aaa,dc=aaa","dc=bbb",-1},{"dc=bbb,dc=aaa","dc=bbb",-1},{"dc=ccc,dc=aaa","dc=bbb",-1},{"dc=aaa,dc=bbb","dc=bbb",1},{"dc=bbb,dc=bbb","dc=bbb",1},{"dc=ccc,dc=bbb","dc=bbb",1},{"dc=aaa,dc=ccc","dc=bbb",1},{"dc=bbb,dc=ccc","dc=bbb",1},{"dc=ccc,dc=ccc","dc=bbb",1},{"","dc=bbb",-1},{"dc=bbb","",1}};}  }
class C{  public PlaDelTriEdge flip(){  PlaDelTriEdge flipped_edge=new PlaDelTriEdge(id_generator,right_triangle.opposite_corner(this),left_triangle.opposite_corner(this));  PlaDelTriTriangle first_parent=this.left_triangle;  int left_index=-1;  int right_index=-1;  for (int i=0; i < 3; ++i) {    if (left_triangle.edge_lines[i] == this) {      left_index=i;    }    if (right_triangle.edge_lines[i] == this) {      right_index=i;    }  }  if (left_index < 0 || right_index < 0) {    System.out.println("Edge.flip: edge line inconsistant");    return null;  }  PlaDelTriEdge left_prev_edge=left_triangle.edge_lines[(left_index + 2) % 3];  PlaDelTriEdge left_next_edge=left_triangle.edge_lines[(left_index + 1) % 3];  PlaDelTriEdge right_prev_edge=right_triangle.edge_lines[(right_index + 2) % 3];  PlaDelTriEdge right_next_edge=right_triangle.edge_lines[(right_index + 1) % 3];  PlaDelTriEdge[] curr_edge_lines=new PlaDelTriEdge[3];  curr_edge_lines[0]=flipped_edge;  curr_edge_lines[1]=left_prev_edge;  curr_edge_lines[2]=right_next_edge;  PlaDelTriTriangle new_left_triangle=new PlaDelTriTriangle(id_generator,curr_edge_lines,first_parent);  flipped_edge.left_triangle=new_left_triangle;  if (left_prev_edge.left_triangle == this.left_triangle) {    left_prev_edge.left_triangle=new_left_triangle;  } else {    left_prev_edge.right_triangle=new_left_triangle;  }  if (right_next_edge.left_triangle == this.right_triangle) {    right_next_edge.left_triangle=new_left_triangle;  } else {    right_next_edge.right_triangle=new_left_triangle;  }  curr_edge_lines=new PlaDelTriEdge[3];  curr_edge_lines[0]=flipped_edge;  curr_edge_lines[1]=right_prev_edge;  curr_edge_lines[2]=left_next_edge;  PlaDelTriTriangle new_right_triangle=new PlaDelTriTriangle(id_generator,curr_edge_lines,first_parent);  flipped_edge.right_triangle=new_right_triangle;  if (right_prev_edge.left_triangle == this.right_triangle) {    right_prev_edge.left_triangle=new_right_triangle;  } else {    right_prev_edge.right_triangle=new_right_triangle;  }  if (left_next_edge.left_triangle == this.left_triangle) {    left_next_edge.left_triangle=new_right_triangle;  } else {    left_next_edge.right_triangle=new_right_triangle;  }  return flipped_edge;}  }
class C{  public static long readUINT64(InputStream stream) throws IOException {  long result=0;  for (int i=0; i <= 56; i+=8) {    result|=(long)stream.read() << i;  }  return result;}  }
class C{  private PatternParser() throws HyphenationException {  token=new StringBuilder();  parser=createParser();  parser.setContentHandler(this);  parser.setErrorHandler(this);  hyphenChar='-';}  }
class C{  @DataProvider(name="valid6Rules") public Object[][] valid6Data(){  return new Object[][]{{"2001:fecd:ba23:cd1f:dcb1:1010:9234:4088/124"},{"2001:fecd:ba23:cd1f:dcb1:1010:9234:4088"},{"[2001:fecd:ba23:cd1f:dcb1:1010:9234:4088]/45"},{"::/128"},{"::1/128"},{"[::1]"},{"::"},{"0:0:0:0:0:ffff:101.45.75.219"},{"1080::8:800:200C:417A"},{"0:0:0:0:0:0:101.45.75.219"},{"::101.45.75.219"}};}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.EvidenceType createEvidenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.EvidenceTypeImpl();}  }
class C{  public SessionTracker(Context context,Session.StatusCallback callback,Session session,boolean startTracking){  this.callback=new CallbackWrapper(callback);  this.session=session;  this.receiver=new ActiveSessionBroadcastReceiver();  this.broadcastManager=LocalBroadcastManager.getInstance(context);  if (startTracking) {    startTracking();  }}  }
class C{  public boolean acceptIdentical(String filePath,String fileName){  if (fileNameGlob == null)   return false;  if (fileName != null && fileName.equalsIgnoreCase(fileNameGlob))   return true;  if (filePath != null) {    int lastUnixPos=filePath.lastIndexOf('/');    int lastWindowsPos=filePath.lastIndexOf('\\');    int index=Math.max(lastUnixPos,lastWindowsPos);    String filename=filePath.substring(index + 1);    return filename != null && filename.equalsIgnoreCase(fileNameGlob);  }  return false;}  }
class C{  public ScriptEngineConfiguration build(){  if (maxSize < coreSize) {    throw new IllegalStateException("Maximum thread pool size is less than core size");  }  return new ScriptEngineConfiguration(timeout,whiteList,blackList,securityManager,coreSize,maxSize,queueSize,idleTimeout);}  }
class C{  public void test_getInstance(){  Calendar us_calendar=Calendar.getInstance(Locale.US);  Calendar de_calendar=Calendar.getInstance(Locale.GERMAN);  assertEquals(Calendar.SUNDAY,us_calendar.getFirstDayOfWeek());  assertEquals(Calendar.MONDAY,de_calendar.getFirstDayOfWeek());  Calendar gmt_calendar=Calendar.getInstance(TimeZone.getTimeZone("GMT"),Locale.US);  assertEquals(TimeZone.getTimeZone("GMT"),gmt_calendar.getTimeZone());  Calendar est_calendar=Calendar.getInstance(TimeZone.getTimeZone("EST"),Locale.US);  assertEquals(TimeZone.getTimeZone("EST").getID(),est_calendar.getTimeZone().getID());}  }
class C{  public void testMarkSupported(){  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  assertFalse("The returned by markSupported() method value " + "should be false.",cis.markSupported());}  }
class C{  public synchronized void addTask(Runnable task){  if (worker == null) {    worker=new LayoutThread();    worker.start();  }  tasks.addElement(task);  notifyAll();}  }
class C{  public DefaultButtonModel(){  stateMask=0;  setEnabled(true);}  }
class C{  public Builder withTrail(){  trail=true;  return this;}  }
class C{  public int length(){  return bytes.length;}  }
class C{  public Rectangle increaseHeight(float extra){  this.height+=extra;  return this;}  }
class C{  public void initializeKeyStore(){  try {    Logger logger=(com.sun.identity.log.Logger)Logger.getLogger(logName);    resetCurrentFileList(logName);    addToCurrentFileList(logName,logName,logName);    String logPath=lmanager.getProperty(LogConstants.LOG_LOCATION);    if (!logPath.endsWith("/"))     logPath+="/";    String fileName=logName;    String loggerFileName=logPath + PREFIX + "log."+ fileName;    String verifierFileName=logPath + PREFIX + "ver."+ fileName;    Debug.message(logName + ":Logger Keystore name = " + loggerFileName);    Debug.message(logName + ":Verifier Keystore name= " + verifierFileName);    helper.initializeSecureLogHelper(loggerFileName,logPassword,verifierFileName,logPassword);    Debug.message(logName + ":Initialized SecureLogHelper");    helper.initializeVerifier(verifierFileName,logPassword,verPassword);    Debug.message(logName + ":Done init of SecureLogHelper and Verifier");  } catch (  Exception e) {    Debug.error(logName + ":Logger: exception thrown while initializing secure logger",e);  }}  }
class C{  public static FSFederationTerminationNotification parseURLEncodedRequest(HttpServletRequest request) throws FSMsgException, SAMLException {  FSFederationTerminationNotification retFederationTerminationNotification=new FSFederationTerminationNotification();  try {    FSUtils.debug.message("checking minor version");    retFederationTerminationNotification.majorVersion=Integer.parseInt(request.getParameter(IFSConstants.MAJOR_VERSION));    retFederationTerminationNotification.minorVersion=Integer.parseInt(request.getParameter(IFSConstants.MINOR_VERSION));  } catch (  NumberFormatException ex) {    throw new FSMsgException("invalidNumber",null);  }  String requestID=request.getParameter(IFSConstants.REQUEST_ID);  if (request != null) {    retFederationTerminationNotification.requestID=requestID;  } else {    String[] args={IFSConstants.REQUEST_ID};    throw new FSMsgException("missingAttribute",args);  }  String instantString=request.getParameter(IFSConstants.ISSUE_INSTANT);  if (instantString == null || instantString.length() == 0) {    String[] args={IFSConstants.ISSUE_INSTANT};    throw new FSMsgException("missingAttribute",args);  }  try {    retFederationTerminationNotification.issueInstant=DateUtils.stringToDate(instantString);  } catch (  ParseException e) {    throw new FSMsgException("parseError",null);  }  String providerID=request.getParameter(IFSConstants.PROVIDER_ID);  if (providerID != null) {    retFederationTerminationNotification.providerId=providerID;  } else {    throw new FSMsgException("missingElement",null);  }  String nameFormat=request.getParameter(IFSConstants.NAME_FORMAT);  String nameQualifier=request.getParameter(IFSConstants.NAME_QUALIFIER);  String name=request.getParameter("Name");  if (name == null) {    throw new FSMsgException("missingNameIdentifier",null);  }  String relayState=request.getParameter(IFSConstants.RELAY_STATE);  if (relayState != null) {    retFederationTerminationNotification.relayState=relayState;  }  retFederationTerminationNotification.nameIdentifier=new NameIdentifier(name,nameQualifier,nameFormat);  FSUtils.debug.message("Returning Termination Object");  return retFederationTerminationNotification;}  }
class C{  public void e(Exception ex){  if (logFlag) {    if (logLevel <= android.util.Log.ERROR) {      android.util.Log.e(tag,"error",ex);    }  }}  }
class C{  public NamespaceSupport2(){  reset();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatainsertdatabeginning.class,args);}  }
class C{  public static String verifyCertificate(X509Certificate cert,Collection<CRL> crls){  return verifyCertificate(cert,crls,DateTimeUtil.getCurrentTimeCalendar());}  }
class C{  @Override public String toStringImpl(){  return "*******";}  }
class C{  public void internalFrameDeactivated(InternalFrameEvent e){}  }
class C{  @Override public String toString(){  return super.toString() + "[sumDirectoryContents=" + sumDirectoryContents+ "]";}  }
class C{  @Override public void removeConfigurationElementCreatedListener(ConfigurationElementCreatedListener listener){  super.removeConfigurationElementCreatedListener(listener);  for (  SchemaElementPanel panel : panels) {    panel.removeConfigurationElementCreatedListener(listener);  }}  }
class C{  public AiffFile(File file) throws IOException, TagException, ReadOnlyFileException, InvalidAudioFrameException {  this(file,true);}  }
class C{  public void testGetAttributeNodeNS1() throws Throwable {  Document doc;  Element element;  Attr attribute1;  Attr attribute2;  Attr attribute;  String attrValue;  String attrName;  String attNodeName;  String attrLocalName;  String attrNS;  doc=(Document)load("staffNS",builder);  element=doc.createElementNS("namespaceURI","root");  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/Level2","l2:att");  element.setAttributeNodeNS(attribute1);  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/Level1","att");  element.setAttributeNodeNS(attribute2);  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Level2","att");  attrValue=attribute.getNodeValue();  attrName=attribute.getName();  attNodeName=attribute.getNodeName();  attrLocalName=attribute.getLocalName();  attrNS=attribute.getNamespaceURI();  assertEquals("elementgetattributenodens01_attrValue","",attrValue);  assertEquals("elementgetattributenodens01_attrName","l2:att",attrName);  assertEquals("elementgetattributenodens01_attrNodeName","l2:att",attNodeName);  assertEquals("elementgetattributenodens01_attrLocalName","att",attrLocalName);  assertEquals("elementgetattributenodens01_attrNs","http://www.w3.org/DOM/Level2",attrNS);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.ProxyRestrictionElement createProxyRestrictionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.ProxyRestrictionElementImpl();}  }
class C{  public static int write(AudioInputStream stream,AudioFileFormat.Type fileType,OutputStream out) throws IOException {  List providers=getAudioFileWriters();  int bytesWritten=0;  boolean flag=false;  for (int i=0; i < providers.size(); i++) {    AudioFileWriter writer=(AudioFileWriter)providers.get(i);    try {      bytesWritten=writer.write(stream,fileType,out);      flag=true;      break;    } catch (    IllegalArgumentException e) {      continue;    }  }  if (!flag) {    throw new IllegalArgumentException("could not write audio file: file type not supported: " + fileType);  } else {    return bytesWritten;  }}  }
class C{  public static CartEvent createClearEvent(String userId){  return new CartEvent(CartEventType.CLEAR_CART,userId,"all",0);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreatetextnode.class,args);}  }
class C{  public final void popPredicateRoot(){  m_predicateRoots.popQuick();}  }
class C{  public void rewind(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("rewind",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.rewind();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  void addRule(String[] selector,AttributeSet declaration,boolean isLinked){  int n=selector.length;  StringBuilder sb=new StringBuilder();  sb.append(selector[0]);  for (int counter=1; counter < n; counter++) {    sb.append(' ');    sb.append(selector[counter]);  }  String selectorName=sb.toString();  Style rule=getStyle(selectorName);  if (rule == null) {    Style altRule=addStyle(selectorName,null);synchronized (this) {      SelectorMapping mapping=getRootSelectorMapping();      for (int i=n - 1; i >= 0; i--) {        mapping=mapping.getChildSelectorMapping(selector[i],true);      }      rule=mapping.getStyle();      if (rule == null) {        rule=altRule;        mapping.setStyle(rule);        refreshResolvedRules(selectorName,selector,rule,mapping.getSpecificity());      }    }  }  if (isLinked) {    rule=getLinkedStyle(rule);  }  rule.addAttributes(declaration);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.AssertionArtifactElement createAssertionArtifactElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.AssertionArtifactElementImpl(value);}  }
class C{  public UpgradeParameters isIgnoreErrors(boolean ignore){  ignoreErrors=ignore;  return this;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public static CRAMMD5SASLBindRequest unmodifiableCRAMMD5SASLBindRequest(final CRAMMD5SASLBindRequest request){  if (request instanceof UnmodifiableCRAMMD5SASLBindRequestImpl) {    return request;  }  return new UnmodifiableCRAMMD5SASLBindRequestImpl(request);}  }
class C{  private void installSchemaFiles(AlertGenerator alertGenerator,HashMap<String,File> tempSchemaFiles) throws DirectoryException, InitializationException {  ArrayList<File> installedFileList=new ArrayList<>();  ArrayList<File> tempFileList=new ArrayList<>();  ArrayList<File> origFileList=new ArrayList<>();  File schemaInstanceDir=serverContext.getSchemaHandler().getSchemaDirectoryPath();  for (  String name : tempSchemaFiles.keySet()) {    installedFileList.add(new File(schemaInstanceDir,name));    tempFileList.add(tempSchemaFiles.get(name));    origFileList.add(new File(schemaInstanceDir,name + ".orig"));  }  for (  File f : origFileList) {    if (f.exists()) {      f.delete();    }  }  try {    for (int i=0; i < installedFileList.size(); i++) {      File installedFile=installedFileList.get(i);      File origFile=origFileList.get(i);      if (installedFile.exists()) {        Files.copy(installedFile.toPath(),origFile.toPath(),StandardCopyOption.REPLACE_EXISTING);      }    }  } catch (  Exception e) {    logger.traceException(e);    boolean allCleaned=true;    for (    File f : origFileList) {      try {        if (f.exists() && !f.delete()) {          allCleaned=false;        }      } catch (      Exception e2) {        logger.traceException(e2);        allCleaned=false;      }    }    LocalizableMessage message;    if (allCleaned) {      message=ERR_SCHEMA_MODIFY_CANNOT_WRITE_ORIG_FILES_CLEANED.get(getExceptionMessage(e));    } else {      message=ERR_SCHEMA_MODIFY_CANNOT_WRITE_ORIG_FILES_NOT_CLEANED.get(getExceptionMessage(e));      DirectoryServer.sendAlertNotification(alertGenerator,ALERT_TYPE_CANNOT_COPY_SCHEMA_FILES,message);    }    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message,e);  }  try {    for (int i=0; i < installedFileList.size(); i++) {      File installedFile=installedFileList.get(i);      File tempFile=tempFileList.get(i);      Files.copy(tempFile.toPath(),installedFile.toPath(),StandardCopyOption.REPLACE_EXISTING);    }  } catch (  Exception e) {    logger.traceException(e);    deleteFiles(installedFileList);    boolean allRestored=true;    for (int i=0; i < installedFileList.size(); i++) {      File installedFile=installedFileList.get(i);      File origFile=origFileList.get(i);      try {        if (origFile.exists() && !origFile.renameTo(installedFile)) {          allRestored=false;        }      } catch (      Exception e2) {        logger.traceException(e2);        allRestored=false;      }    }    LocalizableMessage message;    if (allRestored) {      message=ERR_SCHEMA_MODIFY_CANNOT_WRITE_NEW_FILES_RESTORED.get(getExceptionMessage(e));    } else {      message=ERR_SCHEMA_MODIFY_CANNOT_WRITE_NEW_FILES_NOT_RESTORED.get(getExceptionMessage(e));      DirectoryServer.sendAlertNotification(alertGenerator,ALERT_TYPE_CANNOT_WRITE_NEW_SCHEMA_FILES,message);    }    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message,e);  }  deleteFiles(origFileList);  deleteFiles(tempFileList);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Attr domesticAttr;  String attrName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  attrName=domesticAttr.getNodeName();  assertEqualsAutoCase("attribute","nodeName","title",attrName);}  }
class C{  static String subjectTypeName(Subject subject){  if (subject == null) {    return (null);  }  String answer=null;  String className=subject.getClass().getName();  Iterator items=PolicyManager.getPluginSchemaNames(SUBJECT).iterator();  while (items.hasNext()) {    String pluginName=(String)items.next();    PluginSchema ps=PolicyManager.getPluginSchema(SUBJECT,pluginName);    if (className.equals(ps.getClassName())) {      answer=pluginName;      break;    }  }  return (answer);}  }
class C{  void emitStaticInvoke(MemberName member,Name name){  assert (member.equals(name.function.member()));  Class<?> defc=member.getDeclaringClass();  String cname=getInternalName(defc);  String mname=member.getName();  String mtype;  byte refKind=member.getReferenceKind();  if (refKind == REF_invokeSpecial) {    assert (member.canBeStaticallyBound()) : member;    refKind=REF_invokeVirtual;  }  if (member.getDeclaringClass().isInterface() && refKind == REF_invokeVirtual) {    refKind=REF_invokeInterface;  }  emitPushArguments(name);  if (member.isMethod()) {    mtype=member.getMethodType().toMethodDescriptorString();    mv.visitMethodInsn(refKindOpcode(refKind),cname,mname,mtype,member.getDeclaringClass().isInterface());  } else {    mtype=MethodType.toFieldDescriptorString(member.getFieldType());    mv.visitFieldInsn(refKindOpcode(refKind),cname,mname,mtype);  }  if (name.type == L_TYPE) {    Class<?> rtype=member.getInvocationType().returnType();    assert (!rtype.isPrimitive());    if (rtype != Object.class && !rtype.isInterface()) {      assertStaticType(rtype,name);    }  }}  }
class C{  public boolean isWaitLongEnough(){  long elapsed=Time.currentTimeMillis() - lastSendTime;  if (elapsed > currentWaitPeriod - spamGracePeriod) {    return true;  }  return false;}  }
class C{  private void chackNotifiaction(Context context,Bundle bundle){  String notifaction=bundle.getString(JPushInterface.EXTRA_EXTRA);  int notifactionId=bundle.getInt(JPushInterface.EXTRA_NOTIFICATION_ID);  JPushInterface.clearNotificationById(TeamMeetingApp.getTeamMeetingApp(),notifactionId);  Boolean userInfoBoolean=TeamMeetingApp.isInitFalg;  if (mDebug) {    Log.e(TAG,"chackNotifiaction: IsAppRun" + userInfoBoolean);    Log.e(TAG,"notifaction" + notifaction + "notifactionID"+ notifactionId);  }  if (userInfoBoolean) {    runAppFacation(context,bundle);  } else {    startfalshActivity(context,bundle);  }}  }
class C{  public DoubleIteratorSpliterator(PrimitiveIterator.OfDouble iterator,int characteristics){  this.it=iterator;  this.est=Long.MAX_VALUE;  this.characteristics=characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);}  }
class C{  public boolean equals(Object other){  if (other instanceof DerInputBuffer)   return equals((DerInputBuffer)other); else   return false;}  }
class C{  public void expand(){  expand(true);}  }
class C{  public static int findWordStart(String line,int pos,String noWordSep,boolean joinNonWordChars,boolean eatWhitespace){  return findWordStart(line,pos,noWordSep,joinNonWordChars,false,eatWhitespace);}  }
class C{  public static void initializeMemoryBackend(String backendID,String namingContext,boolean createBaseEntry) throws Exception {  startServer();  DN baseDN=DN.valueOf(namingContext);  MemoryBackend memoryBackend=(MemoryBackend)DirectoryServer.getBackend(backendID);  if (memoryBackend == null) {    memoryBackend=new MemoryBackend();    memoryBackend.setBackendID(backendID);    memoryBackend.setBaseDNs(baseDN);    memoryBackend.openBackend();    DirectoryServer.registerBackend(memoryBackend);  }  memoryBackend.clearMemoryBackend();  if (createBaseEntry) {    Entry e=createEntry(baseDN);    memoryBackend.addEntry(e,null);  }}  }
class C{  public void printlnMessage(String str){  buff.append(str).append("\n");}  }
class C{  private void createTunnel() throws IOException, InterruptedException {  while (true) {    final SocketPolicy socketPolicy=dispatcher.peekSocketPolicy();    if (!processOneRequest(raw,raw.getInputStream(),raw.getOutputStream())) {      throw new IllegalStateException("Tunnel without any CONNECT!");    }    if (socketPolicy == SocketPolicy.UPGRADE_TO_SSL_AT_END) {      return;    }  }}  }
class C{  @Override protected Object createSsoServerSAML1SvcMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   saml1SvcGroup=new SsoServerSAML1SvcImpl(this,server); else   saml1SvcGroup=new SsoServerSAML1SvcImpl(this);  return saml1SvcGroup;}  }
class C{  private void buildMethod(ClassWriter classWriter,List<SMethodDef> methods){  for (  SMethodDef method : methods) {    MethodVisitor methodVisitor=classWriter.visitMethod(acc(method.modifiers()),method.name(),methodDesc(method.getReturnType(),method.getParameters().stream().map(null).collect(Collectors.toList())),null,null);    for (    SAnno anno : method.annos()) {      AnnotationVisitor annotationVisitor=methodVisitor.visitAnnotation(typeToDesc(anno.type()),annotationIsVisible(anno));      buildAnnotation(annotationVisitor,anno);    }    buildParameter(methodVisitor,method.getParameters());    if (method.modifiers().contains(SModifier.ABSTRACT)) {      if (!method.statements().isEmpty())       throw new LtBug("statements for abstract method should be empty");    } else {      buildInstructions(methodVisitor,new CodeInfo((method.modifiers().contains(SModifier.STATIC) ? 0 : 1) + method.getParameters().size()),method.statements(),method.exceptionTables(),method.getReturnType());    }    methodVisitor.visitEnd();  }}  }
class C{  public boolean isNodeDescendant(DefaultMutableTreeNode anotherNode){  if (anotherNode == null)   return false;  return anotherNode.isNodeAncestor(this);}  }
class C{  public void columnMoved(TableColumnModelEvent e){  repaint();}  }
class C{  public boolean hasSubFrames(){  return !subordinateFrames.isEmpty();}  }
class C{  private void typeInsn(final int opcode,final Type type){  mv.visitTypeInsn(opcode,type.getInternalName());}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public static ArgumentException adaptPropertyException(PropertyException e,AbstractManagedObjectDefinition<?,?> d){  return new ArgumentException(e.getMessageObject());}  }
class C{  public void update(Collection<DN> allSuffixes,Collection<DN> rootSuffixes,String serverHost,int serverPort){  allSuffixes.removeAll(rootSuffixes);  Collection<DN> subSuffixes=allSuffixes;synchronized (unreliableEntryList) {    unreliableEntryList.clear();    for (    DN subSuffixDN : subSuffixes) {      unreliableEntryList.add(subSuffixDN.parent());    }    isUnreliableEntryListEmpty=unreliableEntryList.isEmpty();  }  this.serverHost=serverHost;  this.serverPort=serverPort;}  }
class C{  public RemoteException(){  initCause(null);}  }
class C{  public MBeanInfo(String className,String description,MBeanAttributeInfo[] attributes,MBeanConstructorInfo[] constructors,MBeanOperationInfo[] operations,MBeanNotificationInfo[] notifications,Descriptor descriptor) throws IllegalArgumentException {  this.className=className;  this.description=description;  if (attributes == null)   attributes=MBeanAttributeInfo.NO_ATTRIBUTES;  this.attributes=attributes;  if (operations == null)   operations=MBeanOperationInfo.NO_OPERATIONS;  this.operations=operations;  if (constructors == null)   constructors=MBeanConstructorInfo.NO_CONSTRUCTORS;  this.constructors=constructors;  if (notifications == null)   notifications=MBeanNotificationInfo.NO_NOTIFICATIONS;  this.notifications=notifications;  if (descriptor == null)   descriptor=ImmutableDescriptor.EMPTY_DESCRIPTOR;  this.descriptor=descriptor;  this.arrayGettersSafe=arrayGettersSafe(this.getClass(),MBeanInfo.class);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(noderemovechildnomodificationallowederrEE.class,args);}  }
class C{  public static void test_getStaticVariable(){  Target.setStaticVariable(22);  assertSame(22,Target.staticVariable);}  }
class C{  public ConnectorFacade createConnectorFacade(APIConfiguration configuration){  return configuration != null ? connectorFramework.get().newInstance(configuration) : null;}  }
class C{  public LDIFExportConfig(OutputStream ldifOutputStream){  this.ldifOutputStream=ldifOutputStream;  ldifFile=null;  existingFileBehavior=ExistingFileBehavior.FAIL;  excludeBranches=new ArrayList<>();  includeBranches=new ArrayList<>();  excludeFilters=new ArrayList<>();  includeFilters=new ArrayList<>();  compressData=false;  encryptData=false;  hashData=false;  includeObjectClasses=true;  includeOperationalAttributes=true;  includeVirtualAttributes=false;  invokeExportPlugins=false;  signHash=false;  typesOnly=false;  writer=null;  excludeAttributes=new HashSet<>();  includeAttributes=new HashSet<>();  wrapColumn=-1;}  }
class C{  public boolean isIs(){  return (this.is);}  }
class C{  public int size(){  return (impl.size());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(10,-3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public Iterator<Integer> rsIterator(){  return rsStates.keySet().iterator();}  }
class C{  @Override public boolean isReady(){  return false;}  }
class C{  public static void main(String[] args){  int retCode=mainDelete(args,true,System.out,System.err);  if (retCode != 0) {    System.exit(filterExitCode(retCode));  }}  }
class C{  public BAD_QOS(){  this("");}  }
class C{  public boolean addTransaction(SIPTransaction transaction){  SIPRequest sipRequest=(SIPRequest)transaction.getOriginalRequest();  if (firstTransactionSeen && !firstTransactionId.equals(transaction.getBranchId()) && transaction.getMethod().equals(firstTransactionMethod)) {    setReInviteFlag(true);  }  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("SipDialog.addTransaction() " + this + " transaction = "+ transaction);  }  if (firstTransactionSeen == false) {    storeFirstTransactionInfo(this,transaction);    if (sipRequest.getMethod().equals(Request.SUBSCRIBE))     this.eventHeader=(EventHeader)sipRequest.getHeader(EventHeader.NAME);    this.setLocalParty(sipRequest);    this.setRemoteParty(sipRequest);    this.setCallId(sipRequest);    if (this.originalRequest == null && transaction.isInviteTransaction()) {      this.originalRequest=sipRequest;    } else     if (originalRequest != null) {      originalRequestRecordRouteHeaders=sipRequest.getRecordRouteHeaders();    }    if (this.method == null) {      this.method=sipRequest.getMethod();    }    if (transaction instanceof SIPServerTransaction) {      this.hisTag=sipRequest.getFrom().getTag();    } else {      setLocalSequenceNumber(sipRequest.getCSeq().getSeqNumber());      this.originalLocalSequenceNumber=getLocalSeqNumber();      this.setLocalTag(sipRequest.getFrom().getTag());      if (myTag == null)       if (logger.isLoggingEnabled())       logger.logError("The request's From header is missing the required Tag parameter.");    }  } else   if (transaction.getMethod().equals(firstTransactionMethod) && firstTransactionIsServerTransaction != transaction.isServerTransaction()) {    storeFirstTransactionInfo(this,transaction);    this.setLocalParty(sipRequest);    this.setRemoteParty(sipRequest);    this.setCallId(sipRequest);    if (transaction.isInviteTransaction()) {      this.originalRequest=sipRequest;    } else {      originalRequestRecordRouteHeaders=sipRequest.getRecordRouteHeaders();    }    this.method=sipRequest.getMethod();  } else   if (firstTransaction == null && transaction.isInviteTransaction()) {    firstTransaction=transaction;  }  if (transaction instanceof SIPServerTransaction) {    setRemoteSequenceNumber(sipRequest.getCSeq().getSeqNumber());  }  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("isBackToBackUserAgent = " + this.isBackToBackUserAgent);  }  if (transaction.isInviteTransaction()) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("SIPDialog::setLastTransaction:dialog= " + SIPDialog.this + " lastTransaction = "+ transaction);    }    this.lastTransaction=transaction;  }  try {    if (transaction.getRequest().getMethod().equals(Request.REFER) && transaction instanceof SIPServerTransaction) {      long lastReferCSeq=((SIPRequest)transaction.getRequest()).getCSeq().getSeqNumber();      this.eventHeader=new Event();      this.eventHeader.setEventType("refer");      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {        logger.logDebug("SIPDialog::setLastTransaction:lastReferCSeq = " + lastReferCSeq);      }      this.eventHeader.setEventId(Long.toString(lastReferCSeq));    }  } catch (  Exception ex) {    logger.logFatalError("Unexpected exception in REFER processing");  }  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("Transaction Added " + this + myTag+ "/"+ hisTag);    logger.logDebug("TID = " + transaction.getTransactionId() + "/"+ transaction.isServerTransaction());    logger.logStackTrace();  }  return true;}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  if ((keySize + ivSize) > digest.getDigestSize()) {    throw new IllegalArgumentException("Can't generate a derived key " + (keySize + ivSize) + " bytes long.");  }  byte[] dKey=generateDerivedKey();  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  public Builder optionalAttributes(final String... nameOrOIDs){  return optionalAttributes(Arrays.asList(nameOrOIDs));}  }
class C{  public void testConstrBigIntegerMathContext(){  String a="1231212478987482988429808779810457634781384756794987";  BigInteger bA=new BigInteger(a);  int precision=46;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="1231212478987482988429808779810457634781384757";  int resScale=-6;  BigDecimal result=new BigDecimal(bA,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void removeChild(int itemIndex){  getChildren().remove(itemIndex - 1);  cleanupChildren();}  }
class C{  private void ensureOpen() throws IOException {  if (in == null) {    throw new IOException("Stream closed");  }}  }
class C{  public Object eval(Reader reader,Bindings bindings) throws ScriptException {  ScriptContext ctxt=getScriptContext(bindings);  return eval(reader,ctxt);}  }
class C{  public static Set updateAndGetRemovableOCs(Set origSet,Set removeOCs){  Set returnOCs=removeOCs;  if (removeOCs != null && !removeOCs.isEmpty()) {    returnOCs=new HashSet();    Iterator itr1=origSet.iterator();    while (itr1.hasNext()) {      String origOC=(String)itr1.next();      Iterator itr2=removeOCs.iterator();      while (itr2.hasNext()) {        String removeOC=(String)itr2.next();        if (origOC.equalsIgnoreCase(removeOC)) {          returnOCs.add(origOC);          break;        }      }    }    origSet.removeAll(returnOCs);  }  return returnOCs;}  }
class C{  protected JsonValue returnCertificate(String alias,Certificate cert) throws Exception {  JsonValue content=new JsonValue(new LinkedHashMap<String,Object>());  content.put(ResourceResponse.FIELD_CONTENT_ID,alias);  content.put("type",cert.getType());  content.put("cert",CertUtil.getCertString(cert));  content.put("publicKey",KeyRepresentation.getKeyMap(cert.getPublicKey()).getObject());  if (cert instanceof X509Certificate) {    Map<String,Object> issuer=new HashMap<>();    X500Name name=X500Name.getInstance(PrincipalUtil.getIssuerX509Principal((X509Certificate)cert));    addAttributeToIssuer(issuer,name,"C",BCStyle.C);    addAttributeToIssuer(issuer,name,"ST",BCStyle.ST);    addAttributeToIssuer(issuer,name,"L",BCStyle.L);    addAttributeToIssuer(issuer,name,"OU",BCStyle.OU);    addAttributeToIssuer(issuer,name,"O",BCStyle.O);    addAttributeToIssuer(issuer,name,"CN",BCStyle.CN);    content.put("issuer",issuer);    content.put("notBefore",((X509Certificate)cert).getNotBefore());    content.put("notAfter",((X509Certificate)cert).getNotAfter());  }  return content;}  }
class C{  public final void append(char[] chars,int start,int length){  int strlen=length;  if (0 == strlen)   return;  int copyfrom=start;  char[] chunk=m_array[m_lastChunk];  int available=m_chunkSize - m_firstFree;  while (strlen > 0) {    if (available > strlen)     available=strlen;    System.arraycopy(chars,copyfrom,m_array[m_lastChunk],m_firstFree,available);    strlen-=available;    copyfrom+=available;    if (strlen > 0) {      int i=m_array.length;      if (m_lastChunk + 1 == i) {        char[][] newarray=new char[i + 16][];        System.arraycopy(m_array,0,newarray,0,i);        m_array=newarray;      }      chunk=m_array[++m_lastChunk];      if (chunk == null) {        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {          m_innerFSB=new FastStringBuffer(this);        }        chunk=m_array[m_lastChunk]=new char[m_chunkSize];      }      available=m_chunkSize;      m_firstFree=0;    }  }  m_firstFree+=available;}  }
class C{  public Attribute createAttribute(String xml) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.ATTRIBUTE,xml);  if (obj == null) {    return new AttributeImpl(xml);  } else {    return (Attribute)obj;  }}  }
class C{  public org.omg.CORBA.TCKind current_member_kind() throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("current_member_kind",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    return $self.current_member_kind();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  @Override public Writer append(char c){  return this;}  }
class C{  @Override public void addBatch() throws SQLException {  super.addBatch();  batchAdded=true;}  }
class C{  public static List<ResultCode> values(){  return IMMUTABLE_ELEMENTS;}  }
class C{  public void process(XMLParser parser,String name,Vector elems,Hashtable atts,String pcdata){  _name=name;  _elems=elems;  _atts=atts;  _pcdata=pcdata;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  debug.message("CDCServlet Initializing...");  try {    tokenManager=SSOTokenManager.getInstance();    sessionService=InjectorHolder.getInstance(SessionService.class);    tokenRestrictionResolver=new TokenRestrictionResolver(InjectorHolder.getInstance(AMIdentityRepositoryFactory.class),InjectorHolder.getInstance(TokenRestrictionFactory.class));    DNSAddress=SystemConfigurationUtil.getProperty(Constants.AM_SERVER_HOST);    IPAddress=InetAddress.getByName(DNSAddress).getHostAddress();    authURLCookieName=SystemConfigurationUtil.getProperty(Constants.AUTH_UNIQUE_COOKIE_NAME,UNIQUE_COOKIE_NAME);    authURLCookieDomain=SystemConfigurationUtil.getProperty(Constants.AUTH_UNIQUE_COOKIE_DOMAIN,"");    deployDescriptor=SystemConfigurationUtil.getProperty(Constants.AM_SERVICES_DEPLOYMENT_DESCRIPTOR,DEFAULT_DEPLOY_URI);    uniqueCookieEnabled=Boolean.valueOf(SystemConfigurationUtil.getProperty(Constants.IS_ENABLE_UNIQUE_COOKIE,"false"));    if (debug.messageEnabled()) {      debug.message("CDCServlet init params:" + " Restricted Token Enabled = " + uniqueCookieEnabled + " Auth URL Cookie Name = "+ authURLCookieName+ " Auth URL Cookie Domain = "+ authURLCookieDomain+ " Deployment Descriptor: "+ deployDescriptor);    }  } catch (  SSOException e) {    debug.error("CDCServlet.init: Unable to get SSOTokenManager",e);    throw new ServletException(e.getMessage());  }catch (  UnknownHostException e) {    debug.error("CDCServlet.init",e);    throw new ServletException(e.getMessage());  }}  }
class C{  public ValidationResult isValidURI(String uri,Map props,IStateAccess state){  ValidationResultStatus validRes=ValidationResultStatus.STATUS_FAILED;  LocalizedMessage returnMessage=null;  if ((uri != null) && (uri.trim().length() >= 0)) {    if (uri.startsWith(STR_VA_DEF_URI_PATH)) {      returnMessage=LocalizedMessage.get(LOC_VA_MSG_VALID_URI,new Object[]{uri});      validRes=ValidationResultStatus.STATUS_SUCCESS;    }  }  if (validRes.getIntValue() == ValidationResultStatus.INT_STATUS_FAILED) {    returnMessage=LocalizedMessage.get(LOC_VA_WRN_IN_VALID_URI,new Object[]{uri});  }  Debug.log("NetworkValidator : Is URI : " + uri + " valid ? "+ validRes.isSuccessful());  return new ValidationResult(validRes,null,returnMessage);}  }
class C{  public Origin createOrigin(String userName,long sessionId,long sessionVersion,String networkType,String addrType,String address) throws SdpException {  OriginField originImpl=new OriginField();  originImpl.setUsername(userName);  originImpl.setAddress(address);  originImpl.setSessionId(sessionId);  originImpl.setSessionVersion(sessionVersion);  originImpl.setAddressType(addrType);  originImpl.setNetworkType(networkType);  return originImpl;}  }
class C{  public boolean isPrependId(){  return (Boolean)getStateHelper().eval(Properties.prependId,true);}  }
class C{  public void testPowPositiveNumToZeroExp(){  byte aBytes[]={50,-26,90,69,120,32,63,-103,-14,35};  int aSign=1;  int exp=0;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.pow(exp);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public WebServicePermission(String name){  super(name);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.RetrievalMethodElement createRetrievalMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.RetrievalMethodElementImpl();}  }
class C{  public boolean isPowered(){  return getItemType() == Material.REDSTONE_TORCH_ON;}  }
class C{  public void startEntity(String name) throws org.xml.sax.SAXException {  if (name.equals("[dtd]"))   m_inExternalDTD=true;  if (!m_expandDTDEntities && !m_inExternalDTD) {    startNonEscaping();    characters("&" + name + ';');    endNonEscaping();  }  m_inEntityRef=true;}  }
class C{  public void testGetSystemId() throws Throwable {  Document doc;  DocumentType docType;  String systemId;  doc=(Document)load("staffNS",builder);  docType=doc.getDoctype();  systemId=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,systemId);}  }
class C{  public void close() throws IOException {  if (!this.closed) {    this.closed=true;    this.out.flush();  }}  }
class C{  public void paintTreeCellBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private void assertTokenClientExists(AccessToken accessToken,OAuth2Request request) throws InvalidTokenException {  String clientId=accessToken.getClientId();  try {    clientRegistrationStore.get(clientId,request);  } catch (  InvalidClientException|NotFoundException e) {    logger.error("The client identified by the id: " + clientId + " does not exist");    throw new InvalidTokenException();  }}  }
class C{  protected void tearDown(){}  }
class C{  @Override public FrameReader newReader(BufferedSource source,boolean client){  return new Reader(source,4096,client);}  }
class C{  public AgeFileFilter(File cutoffReference){  this(cutoffReference,true);}  }
class C{  public static void copy(byte[] src,byte[] dst,int dstOffset){  System.arraycopy(src,0,dst,dstOffset,src.length);}  }
class C{  public MembershipException(LocalizableMessage errorMessage,boolean continueIterating){  super(errorMessage);  this.continueIterating=continueIterating;}  }
class C{  private Future<Void> applyInventoryChanges(Order order){  Future<Void> future=Future.future();  Future<HttpClient> clientFuture=Future.future();  HttpEndpoint.getClient(discovery,new JsonObject().put("name","inventory-rest-api"),clientFuture.completer());  return clientFuture.compose(null);}  }
class C{  public char previous(){  if (pos == offset) {    return DONE;  }  pos-=1;  return current();}  }
class C{  boolean hasAttribute(final AttributeType attributeType){  if (branchDN.rdn().getAttributeValue(attributeType) != null) {    return true;  }  for (  final TemplateLine line : extraLines) {    if (line.getAttributeType().equals(attributeType)) {      return true;    }  }  return false;}  }
class C{  public static <T>SortedSet<T> unmodifiableSortedSet(SortedSet<T> s){  return new UnmodifiableSortedSet<>(s);}  }
class C{  @Override public boolean isOpen(){  return sc.isOpen();}  }
class C{  public ProxySelectorRoutePlanner(SchemeRegistry schreg,ProxySelector prosel){  if (schreg == null) {    throw new IllegalArgumentException("SchemeRegistry must not be null.");  }  schemeRegistry=schreg;  proxySelector=prosel;}  }
class C{  public void modifyMemberShip(SSOToken token,Set members,String target,int type,int operation) throws AMException {  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,members,target,new Integer(type),new Integer(operation)};    client.send(client.encodeMessage("modifyMemberShip",objs),sessionCookies.getLBCookie(tokenID),null);  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.modifyMemberShip : target" + target + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.modifyMemberShip: caught exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.modifyMemberShip : target=" + target + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  public String delete(String url,Map<String,String> headers,final int expectedStatusCode){  HttpDelete method=new HttpDelete(url);  setHeaders(method,headers);  return method(method,expectedStatusCode);}  }
class C{  private void initReader() throws IOException {  long syncPos=trackerFile.length() - 256L;  if (syncPos < 0)   syncPos=0L;  reader.sync(syncPos);  while (reader.hasNext()) {    reader.next(metaCache);  }}  }
class C{  private ScenePoseCalculator(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entElement;  Node entElementContent;  Node entReference;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=genderNode.getFirstChild();  assertNotNull("entReferenceNotNull",entReference);  nodeType=(int)entReference.getNodeType();  if (equals(1,nodeType)) {    entReference=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entReference);  }  entElement=entReference.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementContent=entElement.getFirstChild();  assertNotNull("entElementContentNotNull",entElementContent);{    boolean success=false;    try {      ((CharacterData)entElementContent).replaceData(1,3,"newArg");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public InvalidCredentialsException(){  super();}  }
class C{  public ECPoint multiply(ECPoint p,BigInteger k,PreCompInfo preCompInfo){  BigInteger e=k;  BigInteger h=e.multiply(BigInteger.valueOf(3));  ECPoint neg=p.negate();  ECPoint R=p;  for (int i=h.bitLength() - 2; i > 0; --i) {    R=R.twice();    boolean hBit=h.testBit(i);    boolean eBit=e.testBit(i);    if (hBit != eBit) {      R=R.add(hBit ? p : neg);    }  }  return R;}  }
class C{  void recycle(){  flushed=false;  closed=false;  out=null;  nextChar=0;  response=null;}  }
class C{  private int transformToRTF(ElemTemplateElement templateParent,DTM dtmFrag) throws TransformerException {  XPathContext xctxt=m_xcontext;  ContentHandler rtfHandler=dtmFrag.getContentHandler();  int resultFragment;  SerializationHandler savedRTreeHandler=this.m_serializationHandler;  ToSAXHandler h=new ToXMLSAXHandler();  h.setContentHandler(rtfHandler);  h.setTransformer(this);  m_serializationHandler=h;  SerializationHandler rth=m_serializationHandler;  try {    rth.startDocument();    rth.flushPending();    try {      executeChildTemplates(templateParent,true);      rth.flushPending();      resultFragment=dtmFrag.getDocument();    }  finally {      rth.endDocument();    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  } finally {    this.m_serializationHandler=savedRTreeHandler;  }  return resultFragment;}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  Class factoryClass=lookUpFactoryClass(factoryId,propertiesFilename,fallbackClassName);  if (factoryClass == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  try {    Object instance=factoryClass.newInstance();    debugPrintln("created new instance of factory " + factoryId);    return instance;  } catch (  Exception x) {    throw new ConfigurationError("Provider for factory " + factoryId + " could not be instantiated: "+ x,x);  }}  }
class C{  final int dec(int i){  return ((i == 0) ? items.length : i) - 1;}  }
class C{  public static ConstraintResult newFailure(String attributeName,String invalidValue){  return new ConstraintFailureImpl(attributeName,invalidValue);}  }
class C{  public void handleTblDataActionDuplicateHrefRequest(RequestInvocationEvent event){  String name=(String)getDisplayFieldValue(TBL_DATA_ACTION_DUPLICATE_HREF);  MAPServiceModel model=(MAPServiceModel)getModel();  MAPDuplicationDeviceViewBean vb=(MAPDuplicationDeviceViewBean)getViewBean(MAPDuplicationDeviceViewBean.class);  vb.clientType=model.getClientTypePrefix() + name;  vb.deviceName=model.getDeviceNamePrefix() + model.getDeviceUserAgent(name);  vb.setDisplayFieldValue(MAPDuplicationDeviceViewBean.TF_ORIG_CLIENT_TYPE,name);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  private HashtableEntry<K,V>[] makeTable(int newCapacity){  @SuppressWarnings("unchecked") HashtableEntry<K,V>[] newTable=(HashtableEntry<K,V>[])new HashtableEntry[newCapacity];  table=newTable;  threshold=(newCapacity >> 1) + (newCapacity >> 2);  return newTable;}  }
class C{  public void close(){  isClosed=true;  dbHelper.close();  database.close();}  }
class C{  public void reset(){  super.reset();  if (null != m_iterator)   m_iterator.reset();}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=0.0;  gbc.weighty=0.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  LocalizableMessage[] strings={INFO_CTRL_PANEL_RESET_USER_PASSWORD_DN_LABEL.get(),INFO_CTRL_PANEL_RESET_USER_PASSWORD_NAME_LABEL.get(),INFO_CTRL_PANEL_RESET_USER_PASSWORD_PWD_LABEL.get(),INFO_CTRL_PANEL_RESET_USER_PASSWORD_CONFIRM_LABEL.get()};  JLabel[] labels={null,null,lPassword,lConfirmPassword};  Component[] comps={dn,name,password,confirmPassword};  for (int i=0; i < strings.length; i++) {    if (labels[i] == null) {      labels[i]=Utilities.createPrimaryLabel(strings[i]);    } else {      labels[i].setText(strings[i].toString());    }    gbc.gridx=0;    gbc.insets.left=0;    gbc.weightx=0.0;    add(labels[i],gbc);    gbc.insets.left=10;    gbc.gridx++;    gbc.weightx=1.0;    add(comps[i],gbc);    gbc.insets.top=10;    gbc.gridy++;  }  addBottomGlue(gbc);}  }
class C{  private static void dualPivotQuicksort(byte[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  byte ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    byte t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    byte t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    byte t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    byte t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    byte t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    byte t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    byte t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    byte t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    byte t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  byte pivot1=ae2;  a[e2]=a[left];  byte pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      byte ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public NoClassDefFoundError(){  super();}  }
class C{  protected void notifyClickListenersAboutClick(int item){  for (  OnWheelClickedListener listener : clickingListeners) {    listener.onItemClicked(this,item);  }}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public static String toJSONString(List list){  if (list == null)   return "null";  boolean first=true;  StringBuffer sb=new StringBuffer();  Iterator iter=list.iterator();  sb.append('[');  while (iter.hasNext()) {    if (first)     first=false; else     sb.append(',');    Object value=iter.next();    if (value == null) {      sb.append("null");      continue;    }    sb.append(JSONValue.toJSONString(value));  }  sb.append(']');  return sb.toString();}  }
class C{  private static boolean increment(JsonValue subject,PatchOperation operation) throws BadRequestException {  if (!operation.isIncrement()) {    throw new BadRequestException("Operation is an " + operation.getOperation() + ", not an increment!");  }  final JsonValue current=subject.get(operation.getField());  if (current == null) {    throw new BadRequestException("The field '" + operation.getField() + "' does not exist");  } else   if (current.isList()) {    final List<Object> elements=current.asList();    for (int i=0; i < elements.size(); i++) {      elements.set(i,increment(elements.get(i),operation.getValue().asNumber(),operation.getField()));    }  } else {    subject.put(operation.getField(),increment(current.getObject(),operation.getValue().asNumber(),operation.getField()));  }  return true;}  }
class C{  public static void logIfDebugEnabled(final String msg,final StackTraceElement[] stackTrace){  if (DEBUG_ENABLED) {    final StringBuilder builder=new StringBuilder("OPENDJ SDK: ");    builder.append(msg);    if (stackTrace != null) {      builder.append(EOL);      for (      StackTraceElement e : stackTrace) {        builder.append("\tat ");        builder.append(e);        builder.append(EOL);      }    }    if (DEBUG_TO_STDERR) {      System.err.println(builder);    } else {      logger.error(LocalizableMessage.raw("%s",builder));    }  }}  }
class C{  public String toString(){  final StringBuilder sb=new StringBuilder();  final Type type=getParameterizedType();  final String typename=type.getTypeName();  sb.append(Modifier.toString(getModifiers()));  if (0 != modifiers)   sb.append(' ');  if (isVarArgs())   sb.append(typename.replaceFirst("\\[\\]$","...")); else   sb.append(typename);  sb.append(' ');  sb.append(getName());  return sb.toString();}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override protected boolean sendIntermediateResponseMessage(IntermediateResponse intermediateResponse){  return false;}  }
class C{  public static int w(String tag,String msg,Throwable tr){  return Log.w(tag,msg,tr);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocumentType01.class,args);}  }
class C{  public void print(char ch){  print(String.valueOf(ch));}  }
class C{  void pointToCellRounded(int x,int y,int[] result){  pointToCellExact(x + (mCellWidth / 2),y + (mCellHeight / 2),result);}  }
class C{  public void paint(Graphics g,JComponent c){  if (progressBar.isIndeterminate()) {    paintIndeterminate(g,c);  } else {    paintDeterminate(g,c);  }}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  while ((mByteToSkip > 0 || mByteToCopy > 0 || mState != STATE_JPEG_DATA) && length > 0) {    if (mByteToSkip > 0) {      int byteToProcess=length > mByteToSkip ? mByteToSkip : length;      length-=byteToProcess;      mByteToSkip-=byteToProcess;      offset+=byteToProcess;    }    if (mByteToCopy > 0) {      int byteToProcess=length > mByteToCopy ? mByteToCopy : length;      out.write(buffer,offset,byteToProcess);      length-=byteToProcess;      mByteToCopy-=byteToProcess;      offset+=byteToProcess;    }    if (length == 0) {      return;    }switch (mState) {case STATE_SOI:      int byteRead=requestByteToBuffer(2,buffer,offset,length);    offset+=byteRead;  length-=byteRead;if (mBuffer.position() < 2) {  return;}mBuffer.rewind();if (mBuffer.getShort() != JpegHeader.SOI) {throw new IOException("Not a valid jpeg image, cannot write exif");}out.write(mBuffer.array(),0,2);mState=STATE_FRAME_HEADER;mBuffer.rewind();writeExifData();break;case STATE_FRAME_HEADER:byteRead=requestByteToBuffer(4,buffer,offset,length);offset+=byteRead;length-=byteRead;if (mBuffer.position() == 2) {short tag=mBuffer.getShort();if (tag == JpegHeader.EOI) {out.write(mBuffer.array(),0,2);mBuffer.rewind();}}if (mBuffer.position() < 4) {return;}mBuffer.rewind();short marker=mBuffer.getShort();if (marker == JpegHeader.APP1) {mByteToSkip=(mBuffer.getShort() & 0x0000ffff) - 2;mState=STATE_JPEG_DATA;} else if (!JpegHeader.isSofMarker(marker)) {out.write(mBuffer.array(),0,4);mByteToCopy=(mBuffer.getShort() & 0x0000ffff) - 2;} else {out.write(mBuffer.array(),0,4);mState=STATE_JPEG_DATA;}mBuffer.rewind();}}if (length > 0) {out.write(buffer,offset,length);}}  }
class C{  Node<K,V> findNear(K kkey,int rel){  Comparable<? super K> key=comparable(kkey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return ((rel & LT) == 0 || b.isBaseHeader()) ? null : b;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if ((c == 0 && (rel & EQ) != 0) || (c < 0 && (rel & LT) == 0))       return n;      if (c <= 0 && (rel & LT) != 0)       return b.isBaseHeader() ? null : b;      b=n;      n=f;    }  }}  }
class C{  protected void tearDown(){  try {    pis.close();  } catch (  IOException e) {    fail("IOException during tearDown : " + e.getMessage());  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(1000);  sb.append("<ResourceOffering xmlns=\"").append(DiscoConstants.DISCO_NS).append("\"");  if ((entryID != null) && entryID.length() != 0) {    sb.append(" entryID=\"").append(entryID).append("\"");  }  sb.append(">");  if (resourceID != null) {    sb.append(resourceID.toString());  } else   if (encryptResID != null) {    sb.append(encryptResID.toString());  }  if (serviceInstance != null) {    sb.append(serviceInstance.toString());  }  if (options != null) {    sb.append("<Options>");    if (!options.isEmpty()) {      Iterator iter=options.iterator();      String option=null;      while (iter.hasNext()) {        option=(String)iter.next();        if ((option != null) && option.length() != 0) {          sb.append("<Option>").append(option).append("</Option>");        }      }    }    sb.append("</Options>");  }  if ((abs != null) && abs.length() != 0) {    sb.append("<Abstract>").append(abs).append("</Abstract>");  }  sb.append("</ResourceOffering>");  return sb.toString();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer(200);  sb.append("<RemoveEntry xmlns=\"").append(DiscoConstants.DISCO_NS).append("\"");  if (entryID != null) {    sb.append(" entryID=\"").append(entryID).append("\"");  }  sb.append("></RemoveEntry>");  return sb.toString();}  }
class C{  public static PdfAction createHide(String[] text,boolean hidden){  return new PdfAction().put(PdfName.S,PdfName.Hide).put(PdfName.T,getArrayFromStringList(text)).put(PdfName.H,new PdfBoolean(hidden));}  }
class C{  @SuppressWarnings("unchecked") public void writeAsciiStream(java.io.InputStream x) throws SQLException {  BufferedReader bufReader=new BufferedReader(new InputStreamReader(x));  try {    int i;    while ((i=bufReader.read()) != -1) {      char ch=(char)i;      StringBuffer strBuf=new StringBuffer();      strBuf.append(ch);      String str=new String(strBuf);      String strLine=bufReader.readLine();      writeString(str.concat(strLine));    }  } catch (  IOException ioe) {    throw new SQLException(ioe.getMessage());  }}  }
class C{  public ProfileDataException(String s){  super(s);}  }
class C{  public Set searchStaticGroups(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),getSearchFilter(AMObject.GROUP),wildcard,avPairs,level);}  }
class C{  public Cursor fetchAll(Long eventID,String ruleName,String ruleDesc,Boolean enabled,String orderBy){  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();  qb.setTables(DATABASE_TABLE);  qb.appendWhere("1=1");  if (eventID != null) {    qb.appendWhere(" AND " + KEY_EVENTID + " = "+ eventID);  }  if (ruleName != null) {    qb.appendWhere(" AND " + KEY_RULENAME + " = ");    qb.appendWhereEscapeString(ruleName);  }  if (ruleDesc != null) {    qb.appendWhere(" AND " + KEY_RULEDESC + " = ");    qb.appendWhereEscapeString(ruleDesc);  }  if (enabled != null) {    qb.appendWhere(" AND " + KEY_ENABLED + " = "+ (enabled ? 1 : 0));  }  return qb.query(database,KEYS,null,null,null,null,orderBy);}  }
class C{  public JInternalFrame(String title,boolean resizable){  this(title,resizable,false,false,false);}  }
class C{  public Task update(Token token,ResultHandler<Token,?> handler){  return new UpdateTask(token,handler);}  }
class C{  public static boolean toBoolean(final Object value){  return toBoolean(value,false);}  }
class C{  void computeNextElement(){  while (true) {    if (currentBits != 0) {      mask=currentBits & -currentBits;      return;    } else     if (++index < bits.length) {      currentBits=bits[index];    } else {      mask=0;      return;    }  }}  }
class C{  public ConcurrentSkipListSet(Comparator<? super E> comparator){  m=new ConcurrentSkipListMap<E,Object>(comparator);}  }
class C{  public void test_SSLEngineResultStatus_valueOf(){  String[] str={"FINISHED","NEED_TASK","NEED_UNWRAP","NEED_WRAP","NOT_HANDSHAKING"};  String[] str_invalid={"","FINISHED1","NEED_task","NEED_UN","NEED_WRAP_WRAP","not_HANDSHAKING","Bad string for verification valueOf method"};  SSLEngineResult.HandshakeStatus enS;  for (int i=0; i < str.length; i++) {    try {      enS=SSLEngineResult.HandshakeStatus.valueOf(str[i]);      assertEquals("Incorrect Status",enS.toString(),str[i]);    } catch (    Exception e) {      fail("Unexpected exception " + e + " was thrown for "+ str[i]);    }  }  for (int i=0; i < str_invalid.length; i++) {    try {      enS=SSLEngineResult.HandshakeStatus.valueOf(str_invalid[i]);      fail("IllegalArgumentException should be thrown for " + str_invalid[i]);    } catch (    IllegalArgumentException iae) {    }  }  try {    enS=SSLEngineResult.HandshakeStatus.valueOf(null);    fail("NullPointerException/IllegalArgumentException should be thrown for NULL parameter");  } catch (  NullPointerException npe) {  }catch (  IllegalArgumentException iae) {  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("SecurityRoleRef[");  sb.append("name=");  sb.append(name);  if (link != null) {    sb.append(", link=");    sb.append(link);  }  sb.append("]");  return (sb.toString());}  }
class C{  @Override public int size(){  return size;}  }
class C{  public static long parseUnsignedInt(String lexicalXSDUnsignedInt){  if (theConverter == null)   initConverter();  return theConverter.parseUnsignedInt(lexicalXSDUnsignedInt);}  }
class C{  public FlagPole(String SVGData,float poleXPos,float poleYPos,Image... sprites){  super(SVGData,poleXPos,poleYPos,0,0,sprites);  spriteFrame.setTranslateX(poleXPos - (24 * REL_HEIGHT));  spriteBounds.setTranslateX(poleXPos - (24 * REL_HEIGHT));  frameCounter--;  height=172 * REL_HEIGHT;  heightDelta=1.12f * REL_HEIGHT;}  }
class C{  public RowSetEvent(RowSet source){  super(source);}  }
class C{  public void paintTabbedPaneTabBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex,int orientation){  paintTabbedPaneTabBackground(context,g,x,y,w,h,tabIndex);}  }
class C{  public int compareTo(UUID val){  return (this.mostSigBits < val.mostSigBits ? -1 : (this.mostSigBits > val.mostSigBits ? 1 : (this.leastSigBits < val.leastSigBits ? -1 : (this.leastSigBits > val.leastSigBits ? 1 : 0))));}  }
class C{  Component createComponent(Component owner){  if (GraphicsEnvironment.isHeadless()) {    return null;  }  return new HeavyWeightWindow(getParentWindow(owner));}  }
class C{  public void initializeStringTable(){  stringTable=new byte[4096][];  for (int i=0; i < 256; i++) {    stringTable[i]=new byte[1];    stringTable[i][0]=(byte)i;  }  tableIndex=258;  bitsToGet=9;}  }
class C{  public void update(final long now,final int numIdle){  final int idle=Math.max(0,numIdle);  idleHighWaterMark=Math.max(idle,idleHighWaterMark);  final float maxInterval=15f;  final float minutes=maxInterval + ((1f - maxInterval) / idleHighWaterMark) * idle;  nextShrink=now + (long)(minutes * 60000f * factor);}  }
class C{  protected void init(){  pool=Pool.create(serverSockPool);  int size=sendfileSize;  if (size <= 0) {    size=(OS.IS_WIN32 || OS.IS_WIN64) ? (1 * 1024) : (16 * 1024);  }  sendfilePollset=allocatePoller(size,pool,getSoTimeout());  if (sendfilePollset == 0 && size > 1024) {    size=1024;    sendfilePollset=allocatePoller(size,pool,getSoTimeout());  }  if (sendfilePollset == 0) {    size=62;    sendfilePollset=allocatePoller(size,pool,getSoTimeout());  }  desc=new long[size * 2];  sendfileData=new HashMap<>(size);  addS=new ArrayList<>();}  }
class C{  public void testRadix24Pos(){  String value="287628a883451bg80ijhk0865c67e8d7ff20";  int radix=24;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  @Override public void reset(){  for (  ExpandDrill curr_drill : drill_list)   curr_drill.reset();  for (  MazeSearchElement curr_info : maze_search_info_arr)   curr_info.reset();}  }
class C{  boolean hasConstantDescent(int row){  return ((baselineType[row] & (1 << Component.BaselineResizeBehavior.CONSTANT_DESCENT.ordinal())) != 0);}  }
class C{  public boolean containsKey(int key){  Entry[] tab=table;  int index=(key & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if (e.key == key) {      return true;    }  }  return false;}  }
class C{  public boolean hasProperty(String key){  return getProperties().has(key);}  }
class C{  protected Package definePackage(String packageName,Manifest manifest,URL url) throws IllegalArgumentException {  Attributes mainAttributes=manifest.getMainAttributes();  String dirName=packageName.replace('.','/') + "/";  Attributes packageAttributes=manifest.getAttributes(dirName);  boolean noEntry=false;  if (packageAttributes == null) {    noEntry=true;    packageAttributes=mainAttributes;  }  String specificationTitle=packageAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);  if (specificationTitle == null && !noEntry) {    specificationTitle=mainAttributes.getValue(Attributes.Name.SPECIFICATION_TITLE);  }  String specificationVersion=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);  if (specificationVersion == null && !noEntry) {    specificationVersion=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VERSION);  }  String specificationVendor=packageAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);  if (specificationVendor == null && !noEntry) {    specificationVendor=mainAttributes.getValue(Attributes.Name.SPECIFICATION_VENDOR);  }  String implementationTitle=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);  if (implementationTitle == null && !noEntry) {    implementationTitle=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_TITLE);  }  String implementationVersion=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);  if (implementationVersion == null && !noEntry) {    implementationVersion=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VERSION);  }  String implementationVendor=packageAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);  if (implementationVendor == null && !noEntry) {    implementationVendor=mainAttributes.getValue(Attributes.Name.IMPLEMENTATION_VENDOR);  }  return definePackage(packageName,specificationTitle,specificationVersion,specificationVendor,implementationTitle,implementationVersion,implementationVendor,isSealed(manifest,dirName) ? url : null);}  }
class C{  private boolean isPopupMenu(){  return ((invoker != null) && !(invoker instanceof JMenu));}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {  in.defaultReadObject();  if (sourcePath != null && tokens == null) {    tokens=getOffsetTokeniser(new RandomAccessSourceFactory().setForceRead(false).createBestSource(sourcePath));  }}  }
class C{  public Evidence createEvidence(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.EVIDENCE,elem);  if (obj == null) {    return null;  } else {    return (Evidence)obj;  }}  }
class C{  public char popChar(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Character value=(Character)wrapper.getValue();  return value.charValue();}  }
class C{  public void draw(Graphics p_graphics,GdiContext p_graphics_context){  if (itera_settings.is_hilight_routing_obstacle() && shove_failing_obstacle != null) {    shove_failing_obstacle.draw(p_graphics,p_graphics_context,p_graphics_context.get_violations_color(),1);  }  if (target_set == null || net_nos.is_empty())   return;  RuleNet curr_net=r_board.brd_rules.nets.get(net_nos.first());  if (curr_net == null)   return;  Color highlight_color=p_graphics_context.get_hilight_color();  double highligt_color_intensity=p_graphics_context.get_hilight_color_intensity();  for (  PinSwappable curr_info : swap_pin_infos) {    curr_info.my_pin.draw(p_graphics,p_graphics_context,highlight_color,0.3 * highligt_color_intensity);    if (curr_info.incomplete != null) {      PlaPointFloat[] draw_points=new PlaPointFloat[2];      draw_points[0]=curr_info.incomplete.point_a;      draw_points[1]=curr_info.incomplete.point_b;      Color draw_color=p_graphics_context.get_incomplete_color();      p_graphics_context.draw(draw_points,1,draw_color,p_graphics,highligt_color_intensity);    }  }  for (  BrdItem curr_item : target_set) {    if (curr_item instanceof BrdAreaConduction)     continue;    curr_item.draw(p_graphics,p_graphics_context,highlight_color,highligt_color_intensity);  }  if (nearest_target_point == null || prev_corner == null)   return;  PlaPointFloat from_corner=prev_corner.to_float();  boolean curr_length_matching_ok=true;  double max_trace_length=curr_net.get_class().get_maximum_trace_length();  double min_trace_length=curr_net.get_class().get_minimum_trace_length();  double length_matching_color_intensity=p_graphics_context.get_length_matching_area_color_intensity();  if (max_trace_length > 0 || min_trace_length > 0 && length_matching_color_intensity > 0) {    double trace_length_add=from_corner.distance(prev_corner.to_float());    if (max_trace_length <= 0) {      max_trace_length=0.3 * freert.planar.PlaLimits.CRIT_INT;    }    double curr_max_trace_length=max_trace_length - (curr_net.get_trace_length() + trace_length_add);    double curr_min_trace_length=min_trace_length - (curr_net.get_trace_length() + trace_length_add);    double incomplete_length=nearest_target_point.distance(from_corner);    if (incomplete_length < curr_max_trace_length && min_trace_length <= max_trace_length) {      PlaVectorInt delta=nearest_target_point.round().difference_by(prev_corner);      double rotation=delta.angle_approx();      PlaPointFloat center=from_corner.middle_point(nearest_target_point);      double bigger_radius=0.5 * curr_max_trace_length;      double smaller_radius=0.5 * Math.sqrt(curr_max_trace_length * curr_max_trace_length - incomplete_length * incomplete_length);      int ellipse_count;      if (min_trace_length <= 0 || incomplete_length >= curr_min_trace_length) {        ellipse_count=1;      } else {        ellipse_count=2;      }      PlaEllipse[] ellipse_arr=new PlaEllipse[ellipse_count];      ellipse_arr[0]=new PlaEllipse(center,rotation,bigger_radius,smaller_radius);      ShapeTileBox bounding_box=new ShapeTileBox(prev_corner.to_float().round(),nearest_target_point.round());      bounding_box=bounding_box.offset(curr_max_trace_length - incomplete_length);      r_board.gdi_update_join(bounding_box);      if (ellipse_count == 2) {        bigger_radius=0.5 * curr_min_trace_length;        smaller_radius=0.5 * Math.sqrt(curr_min_trace_length * curr_min_trace_length - incomplete_length * incomplete_length);        ellipse_arr[1]=new PlaEllipse(center,rotation,bigger_radius,smaller_radius);      }      p_graphics_context.fill_ellipse_arr(ellipse_arr,p_graphics,p_graphics_context.get_length_matching_area_color(),length_matching_color_intensity);    } else {      curr_length_matching_ok=false;    }  }  PlaPointFloat[] draw_points=new PlaPointFloat[2];  draw_points[0]=from_corner;  draw_points[1]=nearest_target_point;  Color draw_color=p_graphics_context.get_incomplete_color();  double draw_width=Math.min(r_board.host_com.get_resolution(UnitMeasure.MIL),100);  if (!curr_length_matching_ok) {    draw_color=p_graphics_context.get_violations_color();    draw_width*=3;  }  p_graphics_context.draw(draw_points,draw_width,draw_color,p_graphics,highligt_color_intensity);  if (nearest_target_item != null && !nearest_target_item.is_on_layer(layer_active_no)) {    NetIncompletes.draw_layer_change_marker(draw_points[0],4 * pen_half_width_arr[0],p_graphics,p_graphics_context);  }}  }
class C{  protected void paint(SynthContext context,Graphics g){  SynthContext accContext=getContext(menuItem,Region.MENU_ITEM_ACCELERATOR);  String prefix=getPropertyPrefix();  Icon checkIcon=style.getIcon(context,prefix + ".checkIcon");  Icon arrowIcon=style.getIcon(context,prefix + ".arrowIcon");  SynthGraphicsUtils.paint(context,accContext,g,checkIcon,arrowIcon,acceleratorDelimiter,defaultTextIconGap,getPropertyPrefix());  accContext.dispose();}  }
class C{  public StreamSource(String systemId){  this.systemId=systemId;}  }
class C{  public static XMPMeta parseFromBuffer(byte[] buffer,ParseOptions options) throws XMPException {  return XMPMetaParser.parse(buffer,options);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_arg0.execute(xctxt).bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public WSPersonalProfileServiceModelImpl(HttpServletRequest req,String serviceName,Map map) throws AMConsoleException {  super(req,serviceName,map);}  }
class C{  public void createOffscreenSurface(int width,int height){  if (mEGLSurface != EGL14.EGL_NO_SURFACE) {    throw new IllegalStateException("surface already created");  }  mEGLSurface=mEglCore.createOffscreenSurface(width,height);  mWidth=width;  mHeight=height;}  }
class C{  @Override public void run(){  if (logger.isTraceEnabled()) {    logger.trace(getName() + " starting");  }  LocalizableMessage errMessage=null;  try {    boolean shutdown=false;    while (!shutdown || !dsrsShutdownSync.canShutdown(replicationServerDomain.getBaseDN())) {      final UpdateMsg updateMsg=this.handler.take();      if (updateMsg == null) {        errMessage=LocalizableMessage.raw("Connection closure: null update returned by domain.");        shutdown=true;      } else       if (!isUpdateMsgFiltered(updateMsg)) {        session.publish(updateMsg);        if (updateMsg instanceof ReplicaOfflineMsg) {          dsrsShutdownSync.replicaOfflineMsgForwarded(replicationServerDomain.getBaseDN());        }      }    }  } catch (  SocketException e) {    errMessage=handler.getBadlyDisconnectedErrorMessage();    logger.error(errMessage);  }catch (  Exception e) {    errMessage=ERR_WRITER_UNEXPECTED_EXCEPTION.get(handler + " " + stackTraceToSingleLineString(e));    logger.error(errMessage);  } finally {    session.close();    replicationServerDomain.stopServer(handler,false);    if (logger.isTraceEnabled()) {      logger.trace(getName() + " stopped " + errMessage);    }  }}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  int moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  int matrixWidth=(right - left + 1) / moduleSize;  int matrixHeight=(bottom - top + 1) / moduleSize;  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=moduleSize / 2;  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + y * moduleSize;    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + x * moduleSize,iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public static Foo findByUuid_First(java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_First(uuid,orderByComparator);}  }
class C{  private void checkAWTPermission(){  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkPermission(new AWTPermission("showWindowWithoutWarningBanner"));  }}  }
class C{  private int epochMonthToYear(int epochMonth){  return (epochMonth + hijrahStartEpochMonth) / 12;}  }
class C{  public String GetImage(){  if (bufpos >= tokenBegin)   return new String(buffer,tokenBegin,bufpos - tokenBegin + 1); else   return new String(buffer,tokenBegin,bufsize - tokenBegin) + new String(buffer,0,bufpos + 1);}  }
class C{  protected boolean flipEastAndWestAtEnds(int position,Position.Bias bias){  if (majorAxis == Y_AXIS) {    int testPos=(bias == Position.Bias.Backward) ? Math.max(0,position - 1) : position;    int index=getViewIndexAtPosition(testPos);    if (index != -1) {      View v=getView(index);      if (v != null && v instanceof CompositeView) {        return ((CompositeView)v).flipEastAndWestAtEnds(position,bias);      }    }  }  return false;}  }
class C{  public BindResponseProtocolOp(int resultCode,LocalizableMessage errorMessage){  this.resultCode=resultCode;  this.errorMessage=errorMessage;}  }
class C{  public static void deleteFileTreeWithRetry(Path dir) throws IOException {  IOException ioe=null;  final List<IOException> excs=deleteFileTreeUnchecked(dir);  if (!excs.isEmpty()) {    ioe=excs.remove(0);    for (    IOException x : excs)     ioe.addSuppressed(x);  }  if (ioe != null)   throw ioe;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix09.class,args);}  }
class C{  public void focusLost(FocusEvent e){}  }
class C{  public int lastIndexOf(Object o){  if (o == null) {    for (int i=size - 1; i >= 0; i--)     if (elementData[i] == null)     return i;  } else {    for (int i=size - 1; i >= 0; i--)     if (o.equals(elementData[i]))     return i;  }  return -1;}  }
class C{  @NonNull public static Animator[] concatAnimators(@NonNull final Animator[] animators,@NonNull final Animator alphaAnimator){  Animator[] allAnimators=new Animator[animators.length + 1];  int i=0;  for (  Animator animator : animators) {    allAnimators[i]=animator;    ++i;  }  allAnimators[allAnimators.length - 1]=alphaAnimator;  return allAnimators;}  }
class C{  public void releaseStreamAllocation() throws IOException {  streamAllocation.release();}  }
class C{  Index(Node<K,V> node,Index<K,V> down,Index<K,V> right){  this.node=node;  this.down=down;  this.right=right;}  }
class C{  public void testNotOne(){  byte rBytes[]={-2};  BigInteger aNumber=BigInteger.ONE;  BigInteger result=aNumber.not();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void commentChar(int ch){  if (ch >= 0 && ch < ctype.length)   ctype[ch]=CT_COMMENT;}  }
class C{  public FrameBodyCTOC(){}  }
class C{  protected Expression gte(int opPos) throws TransformerException {  return compileOperation(new Gte(),opPos);}  }
class C{  public ArtifactResolve createArtifactResolve(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ARTIFACT_RESOLVE);  if (obj == null) {    return new ArtifactResolveImpl();  } else {    return (ArtifactResolve)obj;  }}  }
class C{  public static int saml1TPConfig(List<String> s1TPInfo){  String classMethod="Agent.saml1TPConfig:";  StringBuilder sb=new StringBuilder(classMethod);  int sz=s1TPInfo.size();  boolean skipSAML1EndPoints=true;  Date startDate=newDate();  if (debug.messageEnabled()) {    sb.append("number of SAML1 Trusted Partners = ").append(sz).append("\n");  }  if (server == null) {    debug.error(classMethod + "no server");    return -1;  }  for (int i=0; i < sz; i++) {    String pName=s1TPInfo.get(i);    if (debug.messageEnabled()) {      sb.append("    ").append(pName).append("\n");    }    SsoServerSAML1TrustPrtnrsEntryImpl sstpe=new SsoServerSAML1TrustPrtnrsEntryImpl(sunMib);    sstpe.SAML1TrustPrtnrIndex=new Integer(i + 1);    sstpe.SAML1TrustPrtnrName=getEscapedString(pName);    SsoServerSAML1Svc sss=(SsoServerSAML1SvcImpl)sunMib.getSaml1SvcGroup();    TableSsoServerSAML1TrustPrtnrsTable tptab=null;    if (sss != null) {      try {        tptab=sss.accessSsoServerSAML1TrustPrtnrsTable();      } catch (      SnmpStatusException ex) {        debug.error(classMethod + "getting SAML1 trusted partner table: ",ex);        return -2;      }    }    if (tptab == null) {      return -2;    }    ObjectName aname=sstpe.createSsoServerSAML1TrustPrtnrsEntryObjectName(server);    if (aname == null) {      debug.error(classMethod + "Error creating object for SAML1 Trusted Partner '" + pName+ "'");      continue;    }    try {      tptab.addEntry(sstpe,aname);      if (sstpe != null) {        server.registerMBean(sstpe,aname);      }    } catch (    JMException ex) {      debug.error(classMethod + pName + ": "+ ex.getMessage());    }catch (    SnmpStatusException ex) {      debug.error(classMethod + pName + ": "+ ex.getMessage());    }  }  if (debug.messageEnabled()) {    debug.message(sb.toString());  }  SsoServerSAML1CacheEntryImpl ssce=new SsoServerSAML1CacheEntryImpl(sunMib);  ssce.SAML1CacheIndex=Integer.valueOf(1);  ssce.SAML1CacheName="Assertion_Cache";  ssce.SAML1CacheMisses=0L;  ssce.SAML1CacheHits=0L;  ssce.SAML1CacheWrites=0L;  ssce.SAML1CacheReads=0L;  SsoServerSAML1SvcImpl sss=sunMib.getSaml1SvcGroup();  TableSsoServerSAML1CacheTable tptab=null;  if (sss != null) {    try {      tptab=sss.accessSsoServerSAML1CacheTable();    } catch (    SnmpStatusException ex) {      debug.error(classMethod + "getting SAML1 Cache table: ",ex);    }  }  if (tptab != null) {    sss.assertCache=ssce;    ObjectName aname=ssce.createSsoServerSAML1CacheEntryObjectName(server);    if (aname == null) {      debug.error(classMethod + "Error creating object for SAML1 Assertion Cache");    } else {      try {        tptab.addEntry(ssce,aname);        if (ssce != null) {          server.registerMBean(ssce,aname);        }      } catch (      JMException ex) {        debug.error(classMethod + "SAML1 Assertion Cache table: " + ex.getMessage());      }catch (      SnmpStatusException ex) {        debug.error(classMethod + "SAML1 Assertion Cache table: " + ex.getMessage());      }    }    ssce=new SsoServerSAML1CacheEntryImpl(sunMib);    ssce.SAML1CacheIndex=Integer.valueOf(2);    ssce.SAML1CacheName="Artifact_Cache";    ssce.SAML1CacheMisses=0L;    ssce.SAML1CacheHits=0L;    ssce.SAML1CacheWrites=0L;    ssce.SAML1CacheReads=0L;    aname=ssce.createSsoServerSAML1CacheEntryObjectName(server);    if (aname == null) {      debug.error(classMethod + "Error creating object for SAML1 Artifact Cache");    } else {      try {        tptab.addEntry(ssce,aname);        if (ssce != null) {          server.registerMBean(ssce,aname);        }      } catch (      JMException ex) {        debug.error(classMethod + "SAML1 Artifact Cache table: " + ex.getMessage());      }catch (      SnmpStatusException ex) {        debug.error(classMethod + "SAML1 Artifact Cache table: " + ex.getMessage());      }      sss.artifactCache=ssce;    }  }  if (!skipSAML1EndPoints) {    SsoServerSAML1EndPointEntryImpl ssee=new SsoServerSAML1EndPointEntryImpl(sunMib);    ssee.SAML1EndPointIndex=Integer.valueOf(1);    ssee.SAML1EndPointName="SOAPReceiver_EndPoint";    ssee.SAML1EndPointRqtFailed=0L;    ssee.SAML1EndPointRqtOut=0L;    ssee.SAML1EndPointRqtIn=0L;    ssee.SAML1EndPointRqtAborted=0L;    ssee.SAML1EndPointStatus="operational";    TableSsoServerSAML1EndPointTable tetab=null;    if (sss != null) {      try {        tetab=sss.accessSsoServerSAML1EndPointTable();      } catch (      SnmpStatusException ex) {        debug.error(classMethod + "getting SAML1 EndPoint table: ",ex);      }    }    if (tetab != null) {      ObjectName aname=ssee.createSsoServerSAML1EndPointEntryObjectName(server);      if (aname == null) {        debug.error(classMethod + "Error creating object for SAML1 SOAPReceiver_EndPoint");      } else {        try {          tetab.addEntry(ssee,aname);          if (ssee != null) {            server.registerMBean(ssee,aname);          }        } catch (        JMException ex) {          debug.error(classMethod + "SAML1 SOAPReceiver EndPoint table: " + ex.getMessage());        }catch (        SnmpStatusException ex) {          debug.error(classMethod + "SAML1 SOAPReceiver EndPoint table: " + ex.getMessage());        }        sss.soapEP=ssee;      }      ssee=new SsoServerSAML1EndPointEntryImpl(sunMib);      ssee.SAML1EndPointIndex=Integer.valueOf(2);      ssee.SAML1EndPointName="POSTProfile_EndPoint";      ssee.SAML1EndPointRqtFailed=0L;      ssee.SAML1EndPointRqtOut=0L;      ssee.SAML1EndPointRqtIn=0L;      ssee.SAML1EndPointRqtAborted=0L;      ssee.SAML1EndPointStatus="operational";      aname=ssee.createSsoServerSAML1EndPointEntryObjectName(server);      if (aname == null) {        debug.error(classMethod + "Error creating object for SAML1 POSTProfile_EndPoint");      } else {        try {          tetab.addEntry(ssee,aname);          if (ssee != null) {            server.registerMBean(ssee,aname);          }        } catch (        JMException ex) {          debug.error(classMethod + "SAML1 POSTProfile EndPoint table: " + ex.getMessage());        }catch (        SnmpStatusException ex) {          debug.error(classMethod + "SAML1 POSTProfile EndPoint table: " + ex.getMessage());        }        sss.pprofEP=ssee;      }      ssee=new SsoServerSAML1EndPointEntryImpl(sunMib);      ssee.SAML1EndPointIndex=Integer.valueOf(3);      ssee.SAML1EndPointName="SAMLAware_EndPoint";      ssee.SAML1EndPointRqtFailed=0L;      ssee.SAML1EndPointRqtOut=0L;      ssee.SAML1EndPointRqtIn=0L;      ssee.SAML1EndPointRqtAborted=0L;      ssee.SAML1EndPointStatus="operational";      aname=ssee.createSsoServerSAML1EndPointEntryObjectName(server);      if (aname == null) {        debug.error(classMethod + "Error creating object for SAML1 SAMLAware_EndPoint");      } else {        try {          tetab.addEntry(ssee,aname);          if (ssee != null) {            server.registerMBean(ssee,aname);          }        } catch (        JMException ex) {          debug.error(classMethod + "SAML1 SAMLAware/ArtifactProfile EndPoint table: " + ex.getMessage());        }catch (        SnmpStatusException ex) {          debug.error(classMethod + "SAML1 SAMLAware/ArtifactProfile EndPoint table: " + ex.getMessage());        }        sss.samlAwareEP=ssee;      }    }  }  Date stopDate=newDate();  if (debug.messageEnabled()) {    String stDate=sdf.format(startDate);    String endDate=sdf.format(stopDate);    debug.message("Agent.saml1TPConfig:\n    Start Time = " + stDate + "\n      End Time = "+ endDate);  }  return 0;}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public static void marshal(Object jaxbObject,URL xml){  _marshal(jaxbObject,xml);}  }
class C{  private static void createFontAttribute(CSS.Attribute a,AttributeSet from,MutableAttributeSet to){  MutableAttributeSet fontAttr=(MutableAttributeSet)to.getAttribute(HTML.Tag.FONT);  if (fontAttr == null) {    fontAttr=new SimpleAttributeSet();    to.addAttribute(HTML.Tag.FONT,fontAttr);  }  String htmlValue=from.getAttribute(a).toString();  if (a == CSS.Attribute.FONT_FAMILY) {    fontAttr.addAttribute(HTML.Attribute.FACE,htmlValue);  } else   if (a == CSS.Attribute.FONT_SIZE) {    fontAttr.addAttribute(HTML.Attribute.SIZE,htmlValue);  } else   if (a == CSS.Attribute.COLOR) {    fontAttr.addAttribute(HTML.Attribute.COLOR,htmlValue);  }}  }
class C{  public final void add_target_door(ExpandDoorItem p_door){  if (p_door == null)   return;  target_doors.add(p_door);}  }
class C{  public static String parseString(String lexicalXSDString){  if (theConverter == null)   initConverter();  return theConverter.parseString(lexicalXSDString);}  }
class C{  public int size(){  return rdns.size();}  }
class C{  public Object[] toArray(){  return copyElements(new Object[size()]);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer sb=new StringBuffer(2000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  sb.append("<").append(appendNS).append(ADVICE_ELEMENT).append(NS).append(">\n");  int length=0;  if (assertionIDRefs != null) {    length=assertionIDRefs.size();    for (int i=0; i < length; i++) {      AssertionIDRef assertionIDRef=(AssertionIDRef)assertionIDRefs.get(i);      sb.append(assertionIDRef.toXMLString(includeNSPrefix,false));    }  }  if (assertionURIRefs != null) {    length=assertionURIRefs.size();    for (int i=0; i < length; i++) {      String str=(String)assertionURIRefs.get(i);      sb.append("<").append(appendNS).append(ASSERTION_URI_REF_ELEMENT).append(">").append(str).append("</").append(appendNS).append(ASSERTION_URI_REF_ELEMENT).append(">\n");    }  }  if (assertions != null) {    length=assertions.size();    for (int i=0; i < length; i++) {      Assertion assertion=(Assertion)assertions.get(i);      sb.append(assertion.toXMLString(includeNSPrefix,false));    }  }  if (encryptedAssertions != null) {    length=encryptedAssertions.size();    for (int i=0; i < length; i++) {      EncryptedAssertion ea=(EncryptedAssertion)encryptedAssertions.get(i);      sb.append(ea.toXMLString(includeNSPrefix,false));    }  }  if (additionalInfo != null) {    length=additionalInfo.size();    for (int i=0; i < length; i++) {      String str=(String)additionalInfo.get(i);      sb.append(str).append("\n");    }  }  sb.append("</").append(appendNS).append(ADVICE_ELEMENT).append(">");  return sb.toString();}  }
class C{  public XMLParser(boolean usegeneric,Map groupContainer){  useGenericClass=usegeneric;  this.groupContainer=groupContainer;}  }
class C{  Configuration findExistingConfiguration(ParsedId parsedId) throws IOException, InvalidSyntaxException {  String filter;  if (parsedId.isFactoryConfig()) {    String factoryPid=ConfigBootstrapHelper.qualifyPid(parsedId.factoryPid);    filter="(&(" + ConfigurationAdmin.SERVICE_FACTORYPID + "="+ factoryPid+ ")("+ JSONConfigInstaller.SERVICE_FACTORY_PID_ALIAS+ "="+ parsedId.instanceAlias+ "))";  } else {    String pid=ConfigBootstrapHelper.qualifyPid(parsedId.pid);    filter="(" + Constants.SERVICE_PID + "="+ pid+ ")";  }  logger.trace("List configurations with filter: {}",filter);  Configuration[] configurations=configAdmin.listConfigurations(filter);  logger.debug("Configs found: {}",(Object[])configurations);  if (configurations != null && configurations.length > 0) {    return configurations[0];  } else {    return null;  }}  }
class C{  public static <T>T deserialise(byte[] bytes,boolean compressed,ClassLoader classLoader) throws IOException, ClassNotFoundException {  final ByteArrayInputStream bais=new ByteArrayInputStream(bytes);  final ObjectInputStream ois=compressed ? new WhitelistObjectInputStream(new InflaterInputStream(bais),classLoader) : new WhitelistObjectInputStream(bais,classLoader);  final T result;  try {    result=(T)ois.readObject();  }  finally {    closeIfNotNull(ois);  }  return result;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  Expression expr=((ElemVariable)m_obj).getSelect().getExpression();  XObject xobj=expr.execute(xctxt);  xobj.allowDetachToRelease(false);  return xobj;}  }
class C{  public synchronized ListIterator<E> listIterator(){  return new ListItr(0);}  }
class C{  public static void unsubscribe(Subscription subscription){  if (subscription != null && subscription.isUnsubscribed()) {    subscription.unsubscribe();  }}  }
class C{  public DTMException(Throwable e){  super(e.getMessage());  this.containedException=e;  this.locator=null;}  }
class C{  private static void rdf_NodeElement(XMPMetaImpl xmp,XMPNode xmpParent,Node xmlNode,boolean isTopLevel) throws XMPException {  int nodeTerm=getRDFTermKind(xmlNode);  if (nodeTerm != RDFTERM_DESCRIPTION && nodeTerm != RDFTERM_OTHER) {    throw new XMPException("Node element must be rdf:Description or typed node",BADRDF);  } else   if (isTopLevel && nodeTerm == RDFTERM_OTHER) {    throw new XMPException("Top level typed node not allowed",BADXMP);  } else {    rdf_NodeElementAttrs(xmp,xmpParent,xmlNode,isTopLevel);    rdf_PropertyElementList(xmp,xmpParent,xmlNode,isTopLevel);  }}  }
class C{  private static final byte[] toOctets(byte[] orig){  byte[] bytes=new byte[orig.length];  System.arraycopy(orig,0,bytes,0,orig.length);  bytes[0]=(byte)AttributeType.UNKNOWN.getTypeCode();  return bytes;}  }
class C{  public void mouseExited(MouseEvent e){  if (!isDragging) {    setThumbRollover(false);  }}  }
class C{  protected void _finishToken() throws IOException {  _tokenIncomplete=false;  int ch=_typeByte;  final int type=((ch >> 5) & 0x7);  ch&=0x1F;  if (type != CBORConstants.MAJOR_TYPE_TEXT) {    if (type == CBORConstants.MAJOR_TYPE_BYTES) {      _binaryValue=_finishBytes(_decodeExplicitLength(ch));      return;    }    _throwInternal();  }  final int len=_decodeExplicitLength(ch);  if (len <= 0) {    if (len < 0) {      _finishChunkedText();    } else {      _textBuffer.resetWithEmpty();    }    return;  }  if (len > (_inputEnd - _inputPtr)) {    if (len >= _inputBuffer.length) {      _finishLongText(len);      return;    }    _loadToHaveAtLeast(len);  }  _finishShortText(len);}  }
class C{  public void validateUserID(String userID,Map envParams) throws AMException {  validateUserID(userID);}  }
class C{  public static void removeAll(){  getPersistence().removeAll();}  }
class C{  public TransformerImpl(StylesheetRoot stylesheet){  m_optimizer=stylesheet.getOptimizer();  m_incremental=stylesheet.getIncremental();  m_source_location=stylesheet.getSource_location();  setStylesheet(stylesheet);  XPathContext xPath=new XPathContext(this);  xPath.setIncremental(m_incremental);  xPath.getDTMManager().setIncremental(m_incremental);  xPath.setSource_location(m_source_location);  xPath.getDTMManager().setSource_location(m_source_location);  if (stylesheet.isSecureProcessing())   xPath.setSecureProcessing(true);  setXPathContext(xPath);  getXPathContext().setNamespaceContext(stylesheet);}  }
class C{  public final void testGenerateSeedint01(){  try {    sr.generateSeed(-1);    fail("generateSeed(-1) :: No NegativeArraySizeException");  } catch (  NegativeArraySizeException e) {  }}  }
class C{  public SQLException(Throwable theCause){  this(theCause == null ? null : theCause.toString(),null,0,theCause);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SOAPNormalization10Element createSOAPNormalization10Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SOAPNormalization10ElementImpl();}  }
class C{  public void insert_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_any",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public final void testEqualsObject03(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  assertFalse(c1.equals(null));}  }
class C{  @Override public void hyperlinkUpdate(HyperlinkEvent e){  if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {    boolean detailsVisible=!certificateDetails.isVisible();    explanationPane.setText(detailsVisible ? explanationWithHideDetails : explanationWithShowDetails);    certificateDetails.setVisible(detailsVisible);    if (detailsVisible && !detailsAlreadyClicked) {      detailsAlreadyClicked=true;      pack();    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  Element element;  Node aNode;  NamedNodeMap attributes;  String name;  Node attr;  String lname;  String namespaceURI="http://www.nist.gov";  String qualifiedName="emp:employee";  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staff",true);  element=aNewDoc.createElementNS(namespaceURI,qualifiedName);  aNode=doc.importNode(element,false);  attributes=aNode.getAttributes();  assertSize("throw_Size",1,attributes);  name=aNode.getNodeName();  assertEquals("nodeName","emp:employee",name);  attr=attributes.item(0);  lname=attr.getLocalName();  assertEquals("lname","defaultAttr",lname);}  }
class C{  public IdentityHashMap(Map<? extends K,? extends V> m){  this((int)((1 + m.size()) * 1.1));  putAll(m);}  }
class C{  public static int collectDefaults(){  int flags=0;  for (  Feature f : values()) {    if (f.enabledByDefault()) {      flags|=f.getMask();    }  }  return flags;}  }
class C{  public TimeField timeField() throws ParseException {  try {    this.lexer.match('t');    this.lexer.SPorHT();    this.lexer.match('=');    this.lexer.SPorHT();    TimeField timeField=new TimeField();    long st=this.getTime();    timeField.setStartTime(st);    this.lexer.SPorHT();    st=this.getTime();    timeField.setStopTime(st);    return timeField;  } catch (  Exception e) {    throw lexer.createParseException();  }}  }
class C{  protected void writeSession(Session session) throws IOException {  if (store == null || !session.isValid()) {    return;  }  try {    if (SecurityUtil.isPackageProtectionEnabled()) {      try {        AccessController.doPrivileged(new PrivilegedStoreSave(session));      } catch (      PrivilegedActionException ex) {        Exception exception=ex.getException();        if (exception instanceof IOException) {          throw (IOException)exception;        }        log.error("Exception in the Store during writeSession: " + exception,exception);      }    } else {      store.save(session);    }  } catch (  IOException e) {    log.error(sm.getString("persistentManager.serializeError",session.getIdInternal(),e));    throw e;  }}  }
class C{  private OpenSSLMessageDigestJDK(String algorithm,long evp_md,int size) throws NoSuchAlgorithmException {  super(algorithm);  this.evp_md=evp_md;  this.size=size;}  }
class C{  public void makeImmutable(){  mutable=false;  if (authnContextClassRef != null) {    authnContextClassRef=Collections.unmodifiableList(authnContextClassRef);  }  if (authnContextDeclRef != null) {    authnContextDeclRef=Collections.unmodifiableList(authnContextDeclRef);  }  return;}  }
class C{  public void callback(final String instanceId,final String callback,final Map<String,Object> data){  callback(instanceId,callback,data,false);}  }
class C{  @Override public void add(int location,E object){  insertElementAt(object,location);}  }
class C{  public Builder removeAllNames(){  this.names.clear();  return this;}  }
class C{  public static boolean copyCertificate(Principal subject,KeyStore dst,KeyStore src) throws Exception {  for (  String alias : Collections.list(src.aliases())) {    if (!src.isCertificateEntry(alias)) {      continue;    }    X509Certificate cert=(X509Certificate)src.getCertificate(alias);    if (!cert.getSubjectDN().equals(subject)) {      continue;    }    dst.setCertificateEntry(alias,cert);    return true;  }  return false;}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required,boolean required,int order,boolean multiAllowed){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,has_required,required);  this.m_order=order;  this.m_multiAllowed=multiAllowed;}  }
class C{  @Override protected Parcelable onSaveInstanceState(){  Parcelable superState=super.onSaveInstanceState();  Bundle state=new Bundle();  state.putParcelable("PARENT",superState);  state.putFloat("mBoundsLeft",this.mBounds.left);  state.putFloat("mBoundsTop",this.mBounds.top);  state.putFloat("mBoundsRight",this.mBounds.right);  state.putFloat("mBoundsBottom",this.mBounds.bottom);  return state;}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void testMultiplyMathContextDiffScalePosNeg(){  String a="987667796597975765768768767866756808779810457634781384756794987";  int aScale=100;  String b="747233429293018787918347987234564568";  int bScale=-70;  String c="7.3801839465418518653942222612429081498248509257207477E+68";  int cScale=-16;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(53,RoundingMode.HALF_UP);  BigDecimal result=aNumber.multiply(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  protected boolean isDisplayed(AttributeSchema attrSchema){  boolean displayed=true;  if ((attrSchema == null) || (attrSchema.getI18NKey() == null) || (attrSchema.getI18NKey().length() == 0)) {    displayed=false;  }  return displayed;}  }
class C{  public static String gensalt(int log_rounds){  return gensalt(log_rounds,new SecureRandom());}  }
