class C{  private static void leftShift(int[] src,int idx,int result[],int bitcount,int anticount,int prev){  for (; idx > 0; idx--) {    int v=(prev << bitcount);    prev=src[idx - 1];    v|=(prev >>> anticount);    result[idx]=v;  }  int v=prev << bitcount;  result[0]=v;}  }
class C{  public void runDownloadMultipleWiFiEnableDisable() throws Exception {  String filename=DOWNLOAD_5MB_FILENAME;  long filesize=DOWNLOAD_5MB_FILESIZE;  doCommonDownloadSetup();  String localDownloadDirectory=Environment.getExternalStorageDirectory().getPath();  File downloadedFile=new File(localDownloadDirectory,filename);  long dlRequest=-1;  try {    downloadedFile.delete();    removeAllCurrentDownloads();    Uri remoteUri=getExternalFileUri(filename);    Request request=new Request(remoteUri);    Uri localUri=Uri.fromFile(downloadedFile);    Log.i(LOG_TAG,"setting localUri to: " + localUri.getPath());    request.setDestinationUri(localUri);    request.setAllowedNetworkTypes(Request.NETWORK_WIFI);    dlRequest=mDownloadManager.enqueue(request);    waitForDownloadToStart(dlRequest);    waitForFileToGrow(downloadedFile);    Log.i(LOG_TAG,"Turning off WiFi...");    setWiFiStateOn(false);    Thread.sleep(40 * 1000);    Log.i(LOG_TAG,"Turning on WiFi again...");    setWiFiStateOn(true);    waitForFileToGrow(downloadedFile);    Log.i(LOG_TAG,"Turning off WiFi...");    setWiFiStateOn(false);    Thread.sleep(20 * 1000);    Log.i(LOG_TAG,"Turning on WiFi again...");    setWiFiStateOn(true);    Log.i(LOG_TAG,"Waiting up to 3 minutes for download to complete...");    waitForDownloadsOrTimeout(dlRequest,3 * 60 * 1000);    ParcelFileDescriptor pfd=mDownloadManager.openDownloadedFile(dlRequest);    verifyFileSize(pfd,filesize);  }  finally {    Log.i(LOG_TAG,"Cleaning up files...");    if (dlRequest != -1) {      mDownloadManager.remove(dlRequest);    }    downloadedFile.delete();  }}  }
class C{  private void onCancelClicked(){  this.finish();}  }
class C{  public boolean removeName(String name){  return m_names.remove(name);}  }
class C{  public EventDispatcher(){}  }
class C{  public T itemSelected(OnItemSelectedListener listener){  if (view instanceof AdapterView) {    AdapterView<?> alv=(AdapterView<?>)view;    alv.setOnItemSelectedListener(listener);  }  return self();}  }
class C{  public Collection engineGenerateCRLs(InputStream inStream) throws CRLException {  throw new UnsupportedOperationException("not yet.");}  }
class C{  private boolean ensureDataInBuffer() throws IOException {  if (mBufferOffset < mBufferedSize) {    return true;  }  final int readData=mInputStream.read(mByteArray);  if (readData <= 0) {    return false;  }  mBufferedSize=readData;  mBufferOffset=0;  return true;}  }
class C{  @Override public void onConfigurationChanged(Configuration newConfig){  super.onConfigurationChanged(newConfig);  setTitle(shortenTitle(mCurrentDirPath));}  }
class C{  public void removeWizardObserver(WizardObserver observer){  listeners.remove(observer);  if (listeningToImpl && listeners.isEmpty()) {    impl.removeWizardObserver(l);    l=null;    listeningToImpl=false;  }}  }
class C{  public static <K,V,A>A ifPresentApply(Map<K,V> map,K key,Function<? super V,? extends A> function){  if (map instanceof UnsortedMapIterable) {    return ((MapIterable<K,V>)map).ifPresentApply(key,function);  }  V result=map.get(key);  return MapIterate.isAbsent(result,map,key) ? null : function.valueOf(result);}  }
class C{  public final float readFloat() throws IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,CharSequence[] value){  if (extras == null) {    extras=new Bundle();  }  extras.putCharSequenceArray(name,value);  return this;}  }
class C{  private static DebuggerOptions parseOptionsInformation(final Node node) throws MessageParserException {  final NodeList nodes=node.getChildNodes();  final DebuggerOptionsBuilder builder=new DebuggerOptionsBuilder();  for (int i=0; i < nodes.getLength(); ++i) {    final Node child=nodes.item(i);    final String name=getAttribute(child,"name");switch (TargetInformationDebuggerOptions.getEnum(name)) {case CAN_DETACH:      builder.canDetach(parseBooleanOption(child));    break;case CAN_ATTACH:  builder.canAttach(parseBooleanOption(child));break;case CAN_TERMINATE:builder.canTerminate(parseBooleanOption(child));break;case HAS_STACK:builder.stackAvailable(parseBooleanOption(child));break;case CAN_VALIDATE_MEMORY:builder.canValidateMemory(parseBooleanOption(child));break;case CAN_HALT:builder.canHalt(parseBooleanOption(child));break;case CAN_HALT_BEFORE_COMMUNICATING:builder.canHaltBeforeCommunicating(parseBooleanOption(child));break;case CAN_MULTI_THREAD:builder.canMultithread(parseBooleanOption(child));break;case CAN_SOFTWARE_BREAKPOINTS:builder.canSoftwareBreakpoints(parseBooleanOption(child));break;case BREAKPOINT_COUNT:builder.breakpointCounter(parseIntOption(child,"value"));break;case PAGE_SIZE:builder.pageSize(parseIntOption(child,"value"));break;case CAN_BREAK_ON_MODULE_LOAD:builder.canBreakOnModuleLoad(parseBooleanOption(child));break;case CAN_BREAK_ON_MODULE_UNLOAD:builder.canBreakOnModuleUnload(parseBooleanOption(child));break;case EXCEPTION:builder.addException(parseExceptionOption(child));break;case CAN_TRACE_COUNT:builder.canTraceCounts(parseBooleanOption(child));break;case CAN_MEMMAP:builder.canMemmap(parseBooleanOption(child));break;default :throw new MessageParserException(String.format("Invalid attribute '%s' found in debugger options string",name));}}return builder.build();}  }
class C{  private void launchUserSpecificFragment(Fragment fragment,String transactionTag,LoginDialogInterface loginListener){  if (SettingsMy.getActiveUser() != null) {    replaceFragment(fragment,transactionTag);  } else {    DialogFragment loginDialogFragment=LoginDialogFragment.newInstance(loginListener);    loginDialogFragment.show(getSupportFragmentManager(),LoginDialogFragment.class.getSimpleName());  }}  }
class C{  public static AuditLevel toLevel(String sArg,Level defaultLevel){  return AUDIT;}  }
class C{  private String characterIteratorToString(CharacterIterator iterator){  int endIndex=iterator.getEndIndex();  int beginIndex=iterator.getBeginIndex();  int count=endIndex - beginIndex;  if (count <= 0) {    return "";  }  char[] chars=new char[count];  int i=0;  char c=iterator.first();  while (c != CharacterIterator.DONE) {    chars[i]=c;    i++;    c=iterator.next();  }  return new String(chars);}  }
class C{  public void clear(){  mSize=0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public ImmutableSetMultimap<K,V> build(){  if (keyComparator != null) {    Multimap<K,V> sortedCopy=MultimapBuilder.linkedHashKeys().linkedHashSetValues().<K,V>build();    List<Map.Entry<K,Collection<V>>> entries=Ordering.from(keyComparator).<K>onKeys().immutableSortedCopy(builderMultimap.asMap().entrySet());    for (    Map.Entry<K,Collection<V>> entry : entries) {      sortedCopy.putAll(entry.getKey(),entry.getValue());    }    builderMultimap=sortedCopy;  }  return copyOf(builderMultimap,valueComparator);}  }
class C{  public void remove(List<Value> values){  Key[] keys=makeSubKeys(values);  List<byte[]> digestList=getDigestList();  for (  Key key : keys) {    client.delete(this.policy,key);    digestList.remove(key.digest);  }  client.put(this.policy,this.key,new Bin(this.binNameString,digestList));}  }
class C{  public void navigateToBrandDetail(CarBrandListDisplayModel listDisplayModel){  mActivity.startActivity(CarBrandDetailIntentHelper.getLaunchingIntent(mActivity,listDisplayModel));}  }
class C{  public int compareTo(byte[] buf){  return compareTo(buf,0,buf.length);}  }
class C{  boolean lockHeldByCurrentThread(final Lock lock){  if (lock instanceof ReentrantLock) {    return ((ReentrantLock)lock).isHeldByCurrentThread();  } else   if (lock instanceof ReentrantReadWriteLock.WriteLock) {    return ((ReentrantReadWriteLock.WriteLock)lock).isHeldByCurrentThread();  }  return true;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String resolveProperties(String inputString){  if (!StringUtils.hasText(inputString)) {    return inputString;  }  String tempString=inputString.trim();  String outString="";  int startIndex=0;  while (tempString.indexOf("${",startIndex) != -1) {    int startsWithPos=tempString.indexOf("${",startIndex);    int endsWithPos=tempString.indexOf("}",startsWithPos + 2);    int nextBracket=tempString.indexOf("{",startsWithPos + 2);    if (nextBracket != -1 && endsWithPos > nextBracket) {      endsWithPos=tempString.indexOf("}",endsWithPos + 1);    }    int defaultPos=tempString.lastIndexOf(":",endsWithPos);    if (defaultPos < startsWithPos) {      defaultPos=-1;    }    if (startsWithPos != -1 && endsWithPos != -1) {      String value=tempString.substring(startsWithPos + 2,endsWithPos);      String defaultString;      String key;      if (defaultPos != -1) {        defaultString=value.substring(value.lastIndexOf(":") + 1);        key=value.substring(0,value.lastIndexOf(":"));      } else {        key=value;        defaultString=value;      }      outString+=tempString.substring(startIndex,startsWithPos) + System.getProperty(key,defaultString);      startIndex=endsWithPos + 1;    }  }  if (startIndex < tempString.length()) {    outString+=tempString.substring(startIndex);  }  return outString;}  }
class C{  RSAPrivateCrtKeyImpl(byte[] encoded) throws InvalidKeyException {  decode(encoded);  RSAKeyFactory.checkRSAProviderKeyLengths(n.bitLength(),e);}  }
class C{  @Override public void updateFloat(int columnIndex,float x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateFloat(" + columnIndex + ", "+ x+ "f);");    }    update(columnIndex,ValueFloat.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public final ByteBuffer toByteBuffer(){  finishWriting();  consolidateChunks();  return this.buffer;}  }
class C{  public Resources analyze(final Path... projectPaths){  lock.lock();  try {    Stream.of(projectPaths).forEach(null);    final JobRegistry jobRegistry=JobRegistry.getInstance();    final Set<ClassResult> classResults=new HashSet<>();    classes.stream().filter(null).forEach(null);    Pair<String,ClassResult> classResultPair;    while ((classResultPair=jobRegistry.nextUnhandledClass()) != null) {      final ClassResult classResult=classResultPair.getRight();      classResults.add(classResult);      analyzeClass(classResultPair.getLeft(),classResult);      bytecodeAnalyzer.analyzeBytecode(classResult);    }    return resultInterpreter.interpret(classResults);  }  finally {    lock.unlock();  }}  }
class C{  public void clearAccumulatedTorque(){  this.torques.clear();}  }
class C{  public static <T>T findBy(final Collection<T> collection,final Filter<T> filter){  for (  T element : collection) {    if (filter.accept(element)) {      return element;    }  }  return null;}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public List<LookupResult> lookup(CharSequence key,int num,boolean allTermsRequired,boolean doHighlight) throws IOException {  return lookup(key,(BooleanQuery)null,num,allTermsRequired,doHighlight);}  }
class C{  protected void forwardReply(AbstractMRListener client,SimpleNode n){  ((SRCPListener)client).reply(n);}  }
class C{  public _MergeOptions(final _MergeOptions_Flag[] flags){  super(flags);}  }
class C{  private static List<String> parseCodeTags(String html){  final String startTag="<pre><code>";  final String endTag="</code></pre>";  String[] startSeperated=html.split(startTag);  List<String> preSeperated=new ArrayList<>();  String text;  String code;  String[] split;  preSeperated.add(startSeperated[0].replace("<code>","<code>[[&lt;[").replace("</code>","]&gt;]]</code>"));  for (int i=1; i < startSeperated.length; i++) {    text=startSeperated[i];    split=text.split(endTag);    code=split[0];    code=code.replace("\n","<br/>");    code=code.replace(" ","&nbsp;");    preSeperated.add(startTag + "[[&lt;[" + code+ "]&gt;]]"+ endTag);    if (split.length > 1) {      preSeperated.add(split[1].replace("<code>","<code>[[&lt;[").replace("</code>","]&gt;]]</code>"));    }  }  return preSeperated;}  }
class C{  public boolean isObscured(IPlayer other){  if (obscured == SHD_OBSCURED_OWNER && other != null && owner.equals(other)) {    return false;  } else   if (obscured == SHD_OBSCURED_TEAM && other != null && owner.getTeam() == other.getTeam()) {    return false;  } else   if (obscured == SHD_OBSCURED_ALL) {    return false;  }  return true;}  }
class C{  public boolean equals(Object object){  if (this == object) {    return true;  }  if (!(object instanceof Vertex)) {    return false;  }  Vertex otherVertex=(Vertex)object;  if ((this.id != null) && this.id.equals(otherVertex.getId())) {    return true;  }  if ((this.data == null) || (otherVertex.getData() == null)) {    return false;  }  return (this.data.equals(otherVertex.getData()));}  }
class C{  private void cancelPrintJob(URL clientURL,int jobId){  try {    CupsClient client=new CupsClient(clientURL);    client.cancelJob(jobId);  } catch (  Exception e) {    Log.e(CupsPrintApp.LOG_TAG,"Couldn't cancel job: " + jobId + " because: "+ e);  }}  }
class C{  public static Map<String,String> loadSettings(final AbstractSQLProvider provider,final CView view) throws CouldntLoadDataException {  checkArguments(provider,view);  final CConnection connection=provider.getConnection();  final String query="SELECT name, value FROM " + CTableNames.VIEW_SETTINGS_TABLE + " WHERE view_id = "+ view.getConfiguration().getId();  try (ResultSet resultSet=connection.executeQuery(query,true)){    final HashMap<String,String> settings=new HashMap<>();    while (resultSet.next()) {      settings.put(PostgreSQLHelpers.readString(resultSet,"name"),PostgreSQLHelpers.readString(resultSet,"value"));    }    return settings;  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  public IMultiPoint nearest(IMultiPoint target){  SmallProblemsKDNode top=((SmallProblemsKDNode)getRoot());  if (top == null || target == null)   return null;  DimensionalNode parent=parent(target);  IMultiPoint result=parent.point;  double smallest=target.distance(result);  double best[]=new double[]{smallest};  double vol=top.volume();  SmallProblemsKDNode.setThreshold(vol * Math.pow(fract,maxDimension));  double raw[]=target.raw();  IMultiPoint betterOne=top.nearest(raw,best);  while (SmallProblemsKDNode.helpersWorking > 0) {  }  if (betterOne != null) {    return betterOne;  }  return result;}  }
class C{  @SuppressWarnings("ResultOfMethodCallIgnored") void updateDestinationFilePath(String filename){  String separator=destinationDirectory.endsWith("/") ? "" : File.separator;  destinationFilePath=destinationDirectory + separator + filename;  Log.d("TAG","destinationFilePath: " + destinationFilePath);  File file=new File(destinationFilePath);  if (!file.getParentFile().exists()) {    file.getParentFile().mkdirs();  }}  }
class C{  public boolean startsWith(final SimpleString other){  byte[] otherdata=other.data;  if (otherdata.length > data.length) {    return false;  }  for (int i=0; i < otherdata.length; i++) {    if (data[i] != otherdata[i]) {      return false;    }  }  return true;}  }
class C{  public double patience(int k,F f,int N){  double pf=p(f);  BinomialDistribution dist=new BinomialDistribution(null,N,pf);  double p0=Math.pow(1 - pf,N);  return 1 - (dist.cumulativeProbability(k - 1) - p0) / (1 - p0);}  }
class C{  public void addAll(long... values){  for (  long value : values) {    add(value);  }}  }
class C{  public static int partition(int[] ar,int startIndex,int endIndex){  int pivot=endIndex, temp;  for (int i=startIndex; i < endIndex; i++) {    if (ar[i] < ar[pivot]) {      temp=ar[startIndex];      ar[startIndex]=ar[i];      ar[i]=temp;      startIndex++;    }  }  temp=ar[startIndex];  ar[startIndex]=ar[pivot];  ar[pivot]=temp;  return startIndex;}  }
class C{  protected FunctionOrFieldAccessorImpl(){  super();}  }
class C{  public void notifyObservers(){  notifyObservers(null);}  }
class C{  public String evalString(INode state){  EightPuzzleNode node=(EightPuzzleNode)state;  int sumDistance=0;  String eval="";  sumDistance+=node.cell(1,0) - node.cell(1,2);  eval+="(" + node.cell(1,0) + "-"+ node.cell(1,2)+ ")+";  sumDistance+=node.cell(2,0) - node.cell(0,2);  eval+="(" + node.cell(2,0) + "-"+ node.cell(0,2)+ ")+";  sumDistance+=node.cell(2,1) - node.cell(0,1);  eval+="(" + node.cell(2,1) + "-"+ node.cell(0,1)+ ")+";  sumDistance+=node.cell(2,2) - node.cell(0,0);  eval+="(" + node.cell(2,2) + "-"+ node.cell(0,0)+ ")=";  eval+=sumDistance;  return eval + "=|16-" + sumDistance+ "|="+ (16 - sumDistance);}  }
class C{  private List<Relation> findSameRelations(Relation a,List<Relation> relations){  return relations.stream().filter(null).collect(Collectors.toList());}  }
class C{  public TDoubleObjectHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  _hashingStrategy=this;}  }
class C{  private void createLinesAndRoutes(TransitSchedule newTransitSchedule,HashMap<Id<TransitLine>,Map<Id<TransitRoute>,Map<Integer,Map<Id<TransitStopFacility>,StopStatsContainer>>>> line2route2timeBin2stop2StatsMap,HashMap<Id<TransitLine>,HashMap<Id<TransitRoute>,HashMap<Integer,List<TransitRouteStop>>>> line2route2timeBin2TransitRouteStopsList,HashMap<Id<TransitLine>,HashMap<Id<TransitRoute>,HashMap<Integer,NetworkRoute>>> line2route2timeBin2networkRouteMap){  int routesDropped=0;  for (  Entry<Id<TransitLine>,Map<Id<TransitRoute>,Map<Integer,Map<Id<TransitStopFacility>,StopStatsContainer>>>> line2route2timeBin2stop2StatsMapEntry : line2route2timeBin2stop2StatsMap.entrySet()) {    Id<TransitLine> lineId=line2route2timeBin2stop2StatsMapEntry.getKey();    if (newTransitSchedule.getTransitLines().get(lineId) == null) {      newTransitSchedule.addTransitLine(newTransitSchedule.getFactory().createTransitLine(lineId));    }    for (    Entry<Id<TransitRoute>,Map<Integer,Map<Id<TransitStopFacility>,StopStatsContainer>>> route2timeBin2stop2StatsMapEntry : line2route2timeBin2stop2StatsMapEntry.getValue().entrySet()) {      for (      Entry<Integer,Map<Id<TransitStopFacility>,StopStatsContainer>> timeBin2stop2StatsMapEntry : route2timeBin2stop2StatsMapEntry.getValue().entrySet()) {        Id<TransitRoute> routeId=route2timeBin2stop2StatsMapEntry.getKey();        if (newTransitSchedule.getTransitLines().get(lineId).getRoutes().get(routeId) == null) {          NetworkRoute route=line2route2timeBin2networkRouteMap.get(lineId).get(routeId).get(timeBin2stop2StatsMapEntry.getKey());          List<TransitRouteStop> stops=line2route2timeBin2TransitRouteStopsList.get(lineId).get(routeId).get(timeBin2stop2StatsMapEntry.getKey());          if (route != null && stops != null) {            newTransitSchedule.getTransitLines().get(lineId).addRoute(newTransitSchedule.getFactory().createTransitRoute(Id.create(route2timeBin2stop2StatsMapEntry.getKey().toString() + "-" + timeBin2stop2StatsMapEntry.getKey().toString(),TransitRoute.class),route,stops,TransportMode.pt));          } else {            routesDropped++;          }        }      }    }  }  log.info("Dropped " + routesDropped + " routes, due to missing stops and/or route");}  }
class C{  private static String toString(String attName,java.lang.Object obj){  if (okToDisplayPropertyValue(attName)) {    if (obj == null) {      return "";    }    if (obj instanceof InetAddress) {      return InetAddressUtil.toString(obj);    }    return obj.toString();  } else {    return OBFUSCATED_STRING;  }}  }
class C{  public MaxLengthValidator(@NonNull final Context context,@StringRes final int resourceId,final int maxLength){  super(context,resourceId);  setMaxLength(maxLength);}  }
class C{  public Tween targetRelative(float targetValue1,float targetValue2){  isRelative=true;  targetValues[0]=isInitialized() ? targetValue1 + startValues[0] : targetValue1;  targetValues[1]=isInitialized() ? targetValue2 + startValues[1] : targetValue2;  return this;}  }
class C{  public boolean addAll(Collection<? extends E> c){  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacity(size + numNew);  System.arraycopy(a,0,elementData,size,numNew);  size+=numNew;  return numNew != 0;}  }
class C{  public void initPubNub(){  this.mPubNub=new Pubnub(Constants.PUB_KEY,Constants.SUB_KEY);  this.mPubNub.setUUID(this.username);  subscribeStdBy();}  }
class C{  public Composer reboundRight(boolean reboundRight){  mReboundRight=reboundRight;  return this;}  }
class C{  private void addPropertyType(URI p,Resource t){  OwlProperty prop=getProperty(p);  if (t.equals(OWL.TRANSITIVEPROPERTY)) {    prop.setTransitive();  } else   if (t.equals(OWL.SYMMETRICPROPERTY)) {    prop.setSymmetric();  } else   if (t.equals(OWL2.ASYMMETRICPROPERTY)) {    prop.setAsymmetric();  } else   if (t.equals(OWL.FUNCTIONALPROPERTY)) {    prop.setFunctional();  } else   if (t.equals(OWL.INVERSEFUNCTIONALPROPERTY)) {    prop.setInverseFunctional();  } else   if (t.equals(OWL2.IRREFLEXIVEPROPERTY)) {    prop.setIrreflexive();  }}  }
class C{  public void initBenchmarks(){  benchmarkHelper=new CompilerBenchmarkHelper(getName());  benchmarkHelper.initBenchmarks();  benchmarkEmbeddedHelper=null;}  }
class C{  public String addStepsForCreateMirrors(Workflow workflow,String waitFor,URI storage,URI sourceVolume,List<URI> mirrorList,boolean isCG) throws ControllerException {  String stepId=waitFor;  if (!isCG) {    for (    URI mirror : mirrorList) {      stepId=workflow.createStep(CREATE_MIRRORS_STEP_GROUP,String.format("Creating mirror for %s",sourceVolume),waitFor,storage,getDeviceType(storage),this.getClass(),createMirrorMethod(storage,asList(mirror),isCG,false),rollbackMirrorMethod(storage,asList(mirror)),null);    }  } else {    stepId=workflow.createStep(CREATE_MIRRORS_STEP_GROUP,String.format("Creating mirror for %s",sourceVolume),waitFor,storage,getDeviceType(storage),this.getClass(),createMirrorMethod(storage,mirrorList,isCG,false),rollbackMirrorMethod(storage,mirrorList),null);  }  return stepId;}  }
class C{  public IndicesStatsRequest all(){  flags.all();  return this;}  }
class C{  public void exportXml(OutputStream outputStream) throws IOException {  XmlWriter writer=new XmlWriter(outputStream,false);  writer.startTag("fetch_data");  writer.startTag("request");  writer.writeTag("file",request.getParentDb().getPath());  writer.writeComment(Util.getDate(request.getFetchStart()));  writer.writeTag("start",request.getFetchStart());  writer.writeComment(Util.getDate(request.getFetchEnd()));  writer.writeTag("end",request.getFetchEnd());  writer.writeTag("resolution",request.getResolution());  writer.writeTag("cf",request.getConsolFun());  writer.closeTag();  writer.startTag("datasources");  for (  String dsName : dsNames) {    writer.writeTag("name",dsName);  }  writer.closeTag();  writer.startTag("data");  for (int i=0; i < timestamps.length; i++) {    writer.startTag("row");    writer.writeComment(Util.getDate(timestamps[i]));    writer.writeTag("timestamp",timestamps[i]);    writer.startTag("values");    for (int j=0; j < dsNames.length; j++) {      writer.writeTag("v",values[j][i]);    }    writer.closeTag();    writer.closeTag();  }  writer.closeTag();  writer.closeTag();  writer.flush();}  }
class C{  public ComponentBuilder color(ChatColor color){  this.current.setColor(color);  return this;}  }
class C{  public CModuleFilterExpression(final FilterRelation relation,final long value){  super(relation,value);}  }
class C{  public synchronized Relationship nextMostConsciousRelationship(Vertex type,Set<Vertex> ignoring,float min,boolean inverse){  Collection<Relationship> relationships=getRelationships(type);  if (relationships == null) {    return null;  }  Relationship highest=null;  float highestLevel=0;  float highestCorrectness=0;  for (  Relationship relationship : relationships) {    if ((relationship.isInverse() && inverse) || (!relationship.isInverse() && !inverse)) {      if (!ignoring.contains(relationship.getTarget())) {        float correctness=Math.abs(relationship.getCorrectness());        float level=computeCorrectness(relationship);        if ((highest == null) || (level > highestLevel)) {          if ((highest == null) || (correctness >= highestCorrectness)) {            highest=relationship;            highestLevel=level;            highestCorrectness=correctness;          }        }      }    }  }  if (highest == null) {    return null;  }  if (Math.abs(highest.getCorrectness()) < min) {    this.network.getBot().log(this,"Relationship not sufficiently correct",Level.FINER,highest,highest.getCorrectness(),min);    return null;  }  return highest;}  }
class C{  private static String readOneHeaderLine(HeaderCardCountingArrayDataInput dis) throws IOException, TruncatedFileException {  byte[] buffer=new byte[FITS_HEADER_CARD_SIZE];  int len;  int need=FITS_HEADER_CARD_SIZE;  try {    while (need > 0) {      len=dis.in().read(buffer,FITS_HEADER_CARD_SIZE - need,need);      if (len == 0) {        throw new TruncatedFileException("nothing to read left");      }      need-=len;    }  } catch (  EOFException e) {    if (need == FITS_HEADER_CARD_SIZE) {      throw e;    }    throw new TruncatedFileException(e.getMessage());  }  dis.cardRead();  return AsciiFuncs.asciiString(buffer);}  }
class C{  public boolean writeCharacteristic(byte[] data,BleCharactCallback bleCallback){  return writeCharacteristic(getCharacteristic(),data,bleCallback);}  }
class C{  public HostStorageDomain addISCSIInitatorsToHostStorageDomain(String systemId,String hsdId,List<String> scsiNameList,String model) throws Exception {  InputStream responseStream=null;  HostStorageDomain hsd=null;  try {    String addISCSINamesToHSDQuery=constructISCSIQuery(systemId,hsdId,scsiNameList,model);    log.info("Query to add SCSI Initiators to HostStorageDomain: {}",addISCSINamesToHSDQuery);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,addISCSINamesToHSDQuery);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(javaResult);      hsd=javaResult.getBean(HostStorageDomain.class);      if (null == hsd) {        throw HDSException.exceptions.notAbleToAddInitiatorToHostStorageDomain("iSCSI",hsdId,systemId);      }    } else {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Add iSCSI initiator to HostStorageDomain failed due to invalid response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return hsd;}  }
class C{  public static IStatus validatePackageName(String name){  return validatePackageName(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public static void validateCompositeData(CompositeData cd){  if (cd == null) {    throw new NullPointerException("Null CompositeData");  }  if (!isTypeMatched(getBaseGcNotifInfoCompositeType(),cd.getCompositeType())) {    throw new IllegalArgumentException("Unexpected composite type for GarbageCollectionNotificationInfo");  }}  }
class C{  public boolean equals(Object other){  if (!(other instanceof Rational)) {    return false;  }  Rational otherObject=(Rational)other;  return (this.numerator != null) && (this.numerator.equals(otherObject.numerator)) && (this.denominator != null)&& (this.denominator.equals(otherObject.denominator));}  }
class C{  protected void writeObject(Object o){  if (o == null) {    return;  }  getPersistenceDelegate(o.getClass()).writeObject(o,this);}  }
class C{  public Path sharedDataFile(){  return sharedDataFile;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node child;  String childName;  String childValue;  int commentCount=0;  int childType;  NamedNodeMap attributes;  doc=(Document)load("hc_staff",false);  elementList=doc.getChildNodes();  for (int indexN1005E=0; indexN1005E < elementList.getLength(); indexN1005E++) {    child=(Node)elementList.item(indexN1005E);    childType=(int)child.getNodeType();    if (equals(8,childType)) {      childName=child.getNodeName();      assertEquals("nodeName","#comment",childName);      childValue=child.getNodeValue();      assertEquals("nodeValue"," This is comment number 1.",childValue);      attributes=child.getAttributes();      assertNull("attributes",attributes);      commentCount+=1;    }  }  assertTrue("atMostOneComment",(commentCount < 2));}  }
class C{  private boolean isCommentLine(IDocument document,int line) throws BadLocationException {  if (document.getNumberOfLines() < line)   return false;  int offset=document.getLineOffset(line);  int length=document.getLineLength(line);  int firstChar=findEndOfWhiteSpace(document,offset,offset + length);  length-=firstChar - offset;  String lineContents=document.get(firstChar,length);  String prefix=lineContents.trim();  if (!prefix.startsWith("*") || prefix.startsWith("*/")) {    return false;  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Button createRadioButton(Composite parent,String label){  Button button=new Button(parent,SWT.RADIO);  button.setFont(parent.getFont());  if (label != null) {    button.setText(label);  }  GridData gd=new GridData();  button.setLayoutData(gd);  setButtonDimensionHint(button);  return button;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:58.215 -0500",hash_original_method="2E7B60C359CF2BD0792E359FF0052325",hash_generated_method="4574E71359566A1BDF8A7837EF55FE2A") private static byte[] exposeByteArrayInputStreamBytes(ByteArrayInputStream bais){  byte[] buffer;synchronized (bais) {    byte[] buf;    int pos;    try {      buf=(byte[])BAIS_BUF.get(bais);      pos=BAIS_POS.getInt(bais);    } catch (    IllegalAccessException iae) {      throw new AssertionError(iae);    }    int available=bais.available();    if (pos == 0 && buf.length == available) {      buffer=buf;    } else {      buffer=new byte[available];      System.arraycopy(buf,pos,buffer,0,available);    }    bais.skip(available);  }  return buffer;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:25.278 -0500",hash_original_method="2B1F18D21EF22A7C16D1B3CB473E2A62",hash_generated_method="F7188F538E7D69EC5F93943D80374E1C") public static ChunkHandler unregisterHandler(int type){synchronized (mHandlerMap) {    return mHandlerMap.remove(type);  }}  }
class C{  public static <L>void addEventListener(final Object eventSource,final Class<L> listenerType,final L listener){  try {    MethodUtils.invokeMethod(eventSource,"add" + listenerType.getSimpleName(),listener);  } catch (  final NoSuchMethodException e) {    throw new IllegalArgumentException("Class " + eventSource.getClass().getName() + " does not have a public add"+ listenerType.getSimpleName()+ " method which takes a parameter of type "+ listenerType.getName()+ ".");  }catch (  final IllegalAccessException e) {    throw new IllegalArgumentException("Class " + eventSource.getClass().getName() + " does not have an accessible add"+ listenerType.getSimpleName()+ " method which takes a parameter of type "+ listenerType.getName()+ ".");  }catch (  final InvocationTargetException e) {    throw new RuntimeException("Unable to add listener.",e.getCause());  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static int copy(InputStream in,OutputStream out) throws IOException {  return IOUtil.copy(in,out,new byte[DEFAULT_COPY_SIZE]);}  }
class C{  public static Graph cyclicGraph3(int numNodes,int numEdges,int maxDegree,double probCycle){  List<Node> nodes=new ArrayList<>();  for (int i=0; i < numNodes; i++) {    nodes.add(new GraphNode("X" + (i + 1)));  }  Graph graph=new EdgeListGraph(nodes);  LOOP:   while (graph.getEdges().size() < numEdges) {    int cycleSize=RandomUtil.getInstance().nextInt(3) + 3;    List<Node> cycleNodes=new ArrayList<>();    int count2=-1;    for (int i=0; i < cycleSize; i++) {      Node node=nodes.get(RandomUtil.getInstance().nextInt(nodes.size()));      if (cycleNodes.contains(node)) {        i--;        ++count2;        if (count2 < 10) {          continue;        }      }      cycleNodes.add(node);    }    for (int i=0; i < cycleNodes.size(); i++) {      if (graph.getDegree(cycleNodes.get(i)) >= maxDegree) {        continue LOOP;      }    }    Edge edge;    for (int i=0; i < cycleNodes.size() - 1; i++) {      edge=Edges.directedEdge(cycleNodes.get(i + 1),cycleNodes.get(i));      if (graph.containsEdge(edge)) {        continue LOOP;      }    }    edge=Edges.directedEdge(cycleNodes.get(0),cycleNodes.get(cycleNodes.size() - 1));    if (graph.containsEdge(edge)) {      continue;    }    for (int i=0; i < cycleNodes.size() - 1; i++) {      edge=Edges.directedEdge(cycleNodes.get(i),cycleNodes.get(i + 1));      if (!graph.containsEdge(edge)) {        graph.addEdge(edge);        if (graph.getNumEdges() == numEdges) {          break LOOP;        }      }    }    if (RandomUtil.getInstance().nextDouble() < probCycle) {      edge=Edges.directedEdge(cycleNodes.get(cycleNodes.size() - 1),cycleNodes.get(0));    } else {      edge=Edges.directedEdge(cycleNodes.get(0),cycleNodes.get(cycleNodes.size() - 1));    }    if (!graph.containsEdge(edge)) {      graph.addEdge(edge);      if (graph.getNumEdges() == numEdges) {        break;      }    }  }  GraphUtils.circleLayout(graph,200,200,150);  return graph;}  }
class C{  public void union(final HLL other){  final HLLType otherType=other.getType();  if (type.equals(otherType)) {    homogeneousUnion(other);    return;  } else {    heterogenousUnion(other);    return;  }}  }
class C{  public static <I,A>ConsumedT<I,A> mergeError(Message<I> msg1,Message<I> msg2){  return ConsumedT.empty(Reply.error(msg1.merge(msg2)));}  }
class C{  public E replace(int key,E value){  if (value == null) {    return get(key);  }  if (array.length <= key) {    return null;  }  E prev=(E)array[key];  if (prev != null) {    array[key]=value;    size++;  }  return prev;}  }
class C{  private PruneableClassifierTree son(int index){  return (PruneableClassifierTree)m_sons[index];}  }
class C{  public int checkThreadIDNoCheck0(int uid){  if (uid == 0) {    log.warn(String.format("checkThreadID not found thread 0x%08X",uid));    throw new SceKernelErrorException(ERROR_KERNEL_NOT_FOUND_THREAD);  }  return checkThreadIDAllow0(uid);}  }
class C{  @Override public void clear(){  Arrays.fill(elements,null);  size=0;}  }
class C{  private static FilterExecuter createFilterExecuterTree(FilterResolverIntf filterExpressionResolverTree,SegmentProperties segmentProperties,Map<Integer,GenericQueryType> complexDimensionInfoMap){  FilterExecuterType filterExecuterType=filterExpressionResolverTree.getFilterExecuterType();  if (null != filterExecuterType) {switch (filterExecuterType) {case INCLUDE:      return getIncludeFilterExecuter(filterExpressionResolverTree.getDimColResolvedFilterInfo(),segmentProperties);case EXCLUDE:    return getExcludeFilterExecuter(filterExpressionResolverTree.getDimColResolvedFilterInfo(),segmentProperties);case OR:  return new OrFilterExecuterImpl(createFilterExecuterTree(filterExpressionResolverTree.getLeft(),segmentProperties,complexDimensionInfoMap),createFilterExecuterTree(filterExpressionResolverTree.getRight(),segmentProperties,complexDimensionInfoMap));case AND:return new AndFilterExecuterImpl(createFilterExecuterTree(filterExpressionResolverTree.getLeft(),segmentProperties,complexDimensionInfoMap),createFilterExecuterTree(filterExpressionResolverTree.getRight(),segmentProperties,complexDimensionInfoMap));case RESTRUCTURE:return new RestructureFilterExecuterImpl(filterExpressionResolverTree.getDimColResolvedFilterInfo(),segmentProperties.getDimensionKeyGenerator());case ROWLEVEL_LESSTHAN:case ROWLEVEL_LESSTHAN_EQUALTO:case ROWLEVEL_GREATERTHAN_EQUALTO:case ROWLEVEL_GREATERTHAN:return RowLevelRangeTypeExecuterFacory.getRowLevelRangeTypeExecuter(filterExecuterType,filterExpressionResolverTree,segmentProperties);case ROWLEVEL:default :return new RowLevelFilterExecuterImpl(((RowLevelFilterResolverImpl)filterExpressionResolverTree).getDimColEvaluatorInfoList(),((RowLevelFilterResolverImpl)filterExpressionResolverTree).getMsrColEvalutorInfoList(),((RowLevelFilterResolverImpl)filterExpressionResolverTree).getFilterExpresion(),((RowLevelFilterResolverImpl)filterExpressionResolverTree).getTableIdentifier(),segmentProperties,complexDimensionInfoMap);}}return new RowLevelFilterExecuterImpl(((RowLevelFilterResolverImpl)filterExpressionResolverTree).getDimColEvaluatorInfoList(),((RowLevelFilterResolverImpl)filterExpressionResolverTree).getMsrColEvalutorInfoList(),((RowLevelFilterResolverImpl)filterExpressionResolverTree).getFilterExpresion(),((RowLevelFilterResolverImpl)filterExpressionResolverTree).getTableIdentifier(),segmentProperties,complexDimensionInfoMap);}  }
class C{  public final void sendMessage(int what,int arg1,int arg2){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessage(obtainMessage(what,arg1,arg2));}  }
class C{  public void simulate(){  stepCounter=0;  Assignment result=strategy.solve(csp.copyDomains());  updateStateView(csp,result);}  }
class C{  public int timeToLive(){  try {    return _myMulticastSocket.getTimeToLive();  } catch (  IOException ioe) {    Logger.printError("Multicast.getTimeToLive()","" + ioe);  }  return -1;}  }
class C{  public static void removePropertyNameModifier(String name){  propertyNameModifiers.remove(name);}  }
class C{  public AbstractMRMessage encodeForHardware(CanMessage m){  log.error("encodeForHardware unexpected");  return null;}  }
class C{  public static boolean isBase64(final byte octet){  return octet == PAD_DEFAULT || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent data){  if (mInitializationComplete) {    mActivityDelegate.onActivityResultWithNative(requestCode,resultCode,data);  } else {    if (mPendingActivityResults == null) {      mPendingActivityResults=new ArrayList<ActivityResult>(1);    }    mPendingActivityResults.add(new ActivityResult(requestCode,resultCode,data));  }}  }
class C{  private C45PruneableClassifierTree son(int index){  return (C45PruneableClassifierTree)m_sons[index];}  }
class C{  public void testFailedNodes1() throws Exception {  try {    final int FAIL_ORDER=3;    nodeSpi.set(new TestFailedNodesSpi(FAIL_ORDER));    final Ignite ignite0=startGrid(0);    nodeSpi.set(new TestFailedNodesSpi(FAIL_ORDER));    startGrid(1);    nodeSpi.set(new TestFailedNodesSpi(FAIL_ORDER));    Ignite ignite2=startGrid(2);    assertEquals(2,ignite2.cluster().nodes().size());    waitNodeStop(ignite0.name());    tryCreateCache(2);  }  finally {    stopAllGrids();  }}  }
class C{  public static String[] combined2prettyVersion(final String ver){  return combined2prettyVersion(ver,"");}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  private static byte[] stringToBytes(String argName,String arg){  if (arg == null) {    return null;  }  int len=arg.length();  byte[] b=new byte[len + 1];  for (int i=0; i < len; i++) {    char c=arg.charAt(i);    if (c > 127) {      VM.sysWrite("vm: Invalid character found in a");      if (argName == null) {        VM.sysWrite("n");      } else {        char v=argName.charAt(0);switch (v) {case 'a':case 'e':case 'i':case 'o':case 'u':          VM.sysWrite("n");      }      VM.sysWrite(" ",argName);    }    VM.sysWriteln(" argument: >",arg,"<");    VM.sysExit(EXIT_STATUS_BOGUS_COMMAND_LINE_ARG);  }  b[i]=(byte)c;}return b;}  }
class C{  public static Source fromStream(InputStream is,URI uri,Charset cs) throws IOException {  byte[] barr=readFully(is);  String source=new String(barr,cs);  return new Source(uri,source);}  }
class C{  public String toSummaryString(){  StringBuffer result=new StringBuffer();  result.append("Relation Name:  ").append(relationName()).append('\n');  result.append("Num Instances:  ").append(numInstances()).append('\n');  result.append("Num Attributes: ").append(numAttributes()).append('\n');  result.append('\n');  result.append(Utils.padLeft("",5)).append(Utils.padRight("Name",25));  result.append(Utils.padLeft("Type",5)).append(Utils.padLeft("Nom",5));  result.append(Utils.padLeft("Int",5)).append(Utils.padLeft("Real",5));  result.append(Utils.padLeft("Missing",12));  result.append(Utils.padLeft("Unique",12));  result.append(Utils.padLeft("Dist",6)).append('\n');  int numDigits=(int)Math.log10((int)numAttributes()) + 1;  for (int i=0; i < numAttributes(); i++) {    Attribute a=attribute(i);    AttributeStats as=attributeStats(i);    result.append(Utils.padLeft("" + (i + 1),numDigits)).append(' ');    result.append(Utils.padRight(a.name(),25)).append(' ');    long percent;switch (a.type()) {case Attribute.NOMINAL:      result.append(Utils.padLeft("Nom",4)).append(' ');    percent=Math.round(100.0 * as.intCount / as.totalCount);  result.append(Utils.padLeft("" + percent,3)).append("% ");result.append(Utils.padLeft("" + 0,3)).append("% ");percent=Math.round(100.0 * as.realCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");break;case Attribute.NUMERIC:result.append(Utils.padLeft("Num",4)).append(' ');result.append(Utils.padLeft("" + 0,3)).append("% ");percent=Math.round(100.0 * as.intCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");percent=Math.round(100.0 * as.realCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");break;case Attribute.DATE:result.append(Utils.padLeft("Dat",4)).append(' ');result.append(Utils.padLeft("" + 0,3)).append("% ");percent=Math.round(100.0 * as.intCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");percent=Math.round(100.0 * as.realCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");break;case Attribute.STRING:result.append(Utils.padLeft("Str",4)).append(' ');percent=Math.round(100.0 * as.intCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");result.append(Utils.padLeft("" + 0,3)).append("% ");percent=Math.round(100.0 * as.realCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");break;case Attribute.RELATIONAL:result.append(Utils.padLeft("Rel",4)).append(' ');percent=Math.round(100.0 * as.intCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");result.append(Utils.padLeft("" + 0,3)).append("% ");percent=Math.round(100.0 * as.realCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");break;default :result.append(Utils.padLeft("???",4)).append(' ');result.append(Utils.padLeft("" + 0,3)).append("% ");percent=Math.round(100.0 * as.intCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");percent=Math.round(100.0 * as.realCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");break;}result.append(Utils.padLeft("" + as.missingCount,5)).append(" /");percent=Math.round(100.0 * as.missingCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");result.append(Utils.padLeft("" + as.uniqueCount,5)).append(" /");percent=Math.round(100.0 * as.uniqueCount / as.totalCount);result.append(Utils.padLeft("" + percent,3)).append("% ");result.append(Utils.padLeft("" + as.distinctCount,5)).append(' ');result.append('\n');}return result.toString();}  }
class C{  @Action(value="/bills/billGeneration-generateBill") public String generateBill(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("Entered into generateBill, Index Number :" + indexNumber);  try {    if (basicPropertyDAO != null)     basicProperty=basicPropertyDAO.getBasicPropertyByPropertyID(indexNumber);    if (basicProperty.getProperty().getIsExemptedFromTax()) {      addActionError(getText("error.msg.taxExempted"));      return COMMON_FORM;    }    property=(PropertyImpl)basicProperty.getProperty();    final EgBill egBill=(EgBill)persistenceService.find("FROM EgBill WHERE module = ? " + "AND egBillType.code = ? AND consumerId = ? AND is_history = 'N'",moduleDao.getModuleByName(PTMODULENAME),BILLTYPE_MANUAL,basicProperty.getUpicNo());    ReportOutput reportOutput=null;    if (egBill == null)     reportOutput=getBillService().generateBill(basicProperty,ApplicationThreadLocals.getUserId().intValue()); else {      final String query="SELECT notice FROM EgBill bill, PtNotice notice left join notice.basicProperty bp " + "WHERE bill.is_History = 'N' " + "AND bill.egBillType.code = ? "+ "AND bill.billNo = notice.noticeNo "+ "AND notice.noticeType = ? "+ "AND bp = ?";      final PtNotice ptNotice=(PtNotice)persistenceService.find(query,BILLTYPE_MANUAL,NOTICE_TYPE_BILL,basicProperty);      reportOutput=new ReportOutput();      if (ptNotice != null && ptNotice.getFileStore() != null) {        final FileStoreMapper fsm=ptNotice.getFileStore();        final File file=fileStoreService.fetch(fsm,FILESTORE_MODULE_NAME);        final byte[] bFile=FileUtils.readFileToByteArray(file);        reportOutput.setReportOutputData(bFile);        reportOutput.setReportFormat(FileFormat.PDF);      }    }    reportId=reportViewerUtil.addReportToTempCache(reportOutput);    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("generateBill: ReportId: " + reportId);      LOGGER.debug("Exit from generateBill");    }    if (property.getStatus().equals(PropertyTaxConstants.STATUS_DEMAND_INACTIVE)) {      property.setStatus(PropertyTaxConstants.STATUS_ISACTIVE);      propertyImplService.persist(property);    }  } catch (  final Exception e) {    throw new ApplicationRuntimeException("Bill Generation Exception : " + e);  }  return BILL;}  }
class C{  public Mesh3D toMesh(float size){  return toMesh(null,size);}  }
class C{  private void saveImagePoints(){  m_currentPoints=new HashMap<>();  for (  final Entry<String,Tuple<Image,List<Point>>> entry : m_currentImagePoints.entrySet()) {    final LinkedHashSet<Point> pointSet=new LinkedHashSet<>();    pointSet.addAll(entry.getValue().getSecond());    entry.getValue().getSecond().clear();    entry.getValue().getSecond().addAll(pointSet);    m_currentPoints.put(entry.getKey(),entry.getValue().getSecond());  }  try {    final String fileName=new FileSave("Where To Save Image Points Text File?",JFileChooser.FILES_ONLY,s_currentImagePointsTextFile,s_mapFolderLocation).getPathString();    if (fileName == null) {      return;    }    final FileOutputStream out=new FileOutputStream(fileName);    PointFileReaderWriter.writeOneToMany(out,new HashMap<>(m_currentPoints));    out.flush();    out.close();    System.out.println("Data written to :" + new File(fileName).getCanonicalPath());  } catch (  final Exception ex) {    ClientLogger.logQuietly(ex);  }  System.out.println("");}  }
class C{  public static void writeConfigFile(String fileName,Class<?>[] classes) throws SQLException, IOException {  File rawDir=findRawDir(new File("."));  if (rawDir == null) {    System.err.println("Could not find " + RAW_DIR_NAME + " directory which is typically in the "+ RESOURCE_DIR_NAME+ " directory");  } else {    File configFile=new File(rawDir,fileName);    writeConfigFile(configFile,classes);  }}  }
class C{  public CFilterByInstructionAction(final JTextField filterField){  super("Filter by contained instruction");  m_filterField=filterField;}  }
class C{  public static TaskHandle enqueueBackendTask(){  String hostname=modulesService.getVersionHostname("backend",null);  return getQueue(QUEUE).add(withUrl(PATH).method(Method.GET).header("Host",hostname));}  }
class C{  public static int showDialog(String message,@Nls(capitalization=Nls.Capitalization.Title) String title,@NotNull String[] options,int defaultOptionIndex,@Nullable Icon icon,@Nullable DialogWrapper.DoNotAskOption doNotAskOption){  return showDialog(message,title,options,defaultOptionIndex,defaultOptionIndex,icon,doNotAskOption);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == SyntaxRelatedTElement.class) {switch (derivedFeatureID) {case TypesPackage.TSTRUCTURAL_TYPE__AST_ELEMENT:      return TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static SchemasDefinition createExtendedSchemasDefinitionForPDFA_1(VeraPDFXMPNode schemas,boolean isClosedFieldsCheck){  return createExtendedSchemasDefinition(schemas,true,isClosedFieldsCheck);}  }
class C{  public BCInference(int[][] cases,int[] nodeDimension){  this.cases=cases;  this.nodeDimension=nodeDimension;  this.numberOfNodes=nodeDimension.length - 2;  this.numberOfCases=cases.length - 1;  this.maxCases=numberOfCases;  this.maxNodes=numberOfNodes;  this.maxValues=findMaxValue(nodeDimension);  this.maxLogFact=(2 * maxCases) + maxValues;  this.scoreFn=1;  this.logfact=new double[maxLogFact + 1];  int[] _nodeDimension=Arrays.copyOf(nodeDimension,nodeDimension.length);  Arrays.sort(_nodeDimension);  int g1=_nodeDimension[_nodeDimension.length - 1];  int g2=_nodeDimension[_nodeDimension.length - 2];  maxCells=maxParents * g1 * g2* maxCases;  this.parents=new int[maxNodes + 2][maxParents + 1];  this.countsTree=new int[maxCells + 1];  this.counts=new int[maxCells + 1];  this.scores=new double[maxCases + 1][4];}  }
class C{  private void measureContent(){  if (mTextPath != null) {    mTextLayout=null;    mTextBounds.setEmpty();  } else {    final float desired=Layout.getDesiredWidth(mText,mTextPaint);    mTextLayout=new StaticLayout(mText,mTextPaint,(int)desired,mTextAlignment,1.0f,0.0f,false);    mTextBounds.set(0,0,mTextLayout.getWidth(),mTextLayout.getHeight());  }  invalidateSelf();}  }
class C{  long methodHash(){  return methodHash;}  }
class C{  public static ReferenceStrength resolve(final int value){switch (value) {case 0:    return HARD;case 1:  return SOFT;case 2:return WEAK;default :throw new IllegalArgumentException();}}  }
class C{  public static <E>boolean isNotEmpty(CharSequence c){  return ((c != null) && (c.length() > 0));}  }
class C{  @SuppressWarnings("resource") public NBTInputStream(InputStream is,boolean compressed) throws IOException {  this.is=new DataInputStream(compressed ? new GZIPInputStream(is) : is);}  }
class C{  public static Number previous(Number self){  return NumberNumberMinus.minus(self,ONE);}  }
class C{  public DistributionConfigSnapshot(DistributionConfig dc){  super(dc);  this.modifiable=new HashSet(20);  String[] attNames=dc.getAttributeNames();  for (int i=0; i < attNames.length; i++) {    if (dc.isAttributeModifiable(attNames[i])) {      this.modifiable.add(attNames[i]);    }  }}  }
class C{  public void updateJTOCEntry(RVMMethod m){  if (VM.VerifyAssertions)   VM._assert(m.getDeclaringClass() == this);  if (VM.VerifyAssertions)   VM._assert(isResolved());  if (VM.VerifyAssertions)   VM._assert(m.isStatic() || m.isObjectInitializer());  Statics.setSlotContents(m.getOffset(),m.getCurrentEntryCodeArray());}  }
class C{  public void testSubscribe2(){  TestSubscriber s=new TestSubscriber();  SubmissionPublisher<Integer> p=basicPublisher();  p.close();  p.subscribe(s);  s.awaitComplete();  assertEquals(0,s.nexts);  assertEquals(0,s.errors);  assertEquals(1,s.completes,1);}  }
class C{  @Override protected void before() throws Throwable {  previousThreads=Thread.getAllStackTraces();}  }
class C{  public VisibilityAnimator(){  super();}  }
class C{  static boolean isNumeric(int ch){  return (ch >= '0' && ch <= '9');}  }
class C{  protected Cookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  Cookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableHttpCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    Util.log("IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Util.log("ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  public SmartJTree(SmartTreeNode rootNode){  super(rootNode);  super.addMouseListener(treeMouseAdapter);  super.setCellRenderer(treeCellRenderer);}  }
class C{  private String alias(){  String alias=_config.get(_prefix + ".ssl.alias",null);  return alias;}  }
class C{  static void usage(){  System.out.println("Usage:");  System.out.println("      -s (in order to serialize)");  System.out.println("      -d (in order to deserialize)");}  }
class C{  public static Map<String,Object> asMap(final Object... keyValues){  return asPairs(keyValues).stream().collect(Collectors.toMap(null,null));}  }
class C{  public void testUUID() throws Exception {  String s=UUID.randomUUID().toString().toLowerCase(Locale.ROOT);  assertU(adoc("id","101","uuid",s));  assertU(commit());  LocalSolrQueryRequest req=lrf.makeRequest("q","*:*");  SolrQueryResponse rsp=h.queryAndResponse(req.getParams().get(CommonParams.QT),req);  BinaryQueryResponseWriter writer=(BinaryQueryResponseWriter)h.getCore().getQueryResponseWriter("javabin");  ByteArrayOutputStream baos=new ByteArrayOutputStream();  writer.write(baos,req,rsp);  NamedList res=(NamedList)new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));  SolrDocumentList docs=(SolrDocumentList)res.get("response");  for (  Object doc : docs) {    SolrDocument document=(SolrDocument)doc;    assertEquals("Returned object must be a string","java.lang.String",document.getFieldValue("uuid").getClass().getName());    assertEquals("Wrong UUID string returned",s,document.getFieldValue("uuid"));  }  req.close();}  }
class C{  public boolean visit(TagElement node){  return true;}  }
class C{  public void testSchemaEscapeAll() throws Exception {  startGridsMultiThreaded(3,true);  final CacheConfiguration<Integer,Fact> cfg=cacheConfig("simpleSchema",true,Integer.class,Fact.class).setSqlSchema("SchemaName1").setSqlEscapeAll(true);  final CacheConfiguration<Integer,Fact> cfgEsc=cacheConfig("escapedSchema",true,Integer.class,Fact.class).setSqlSchema("\"SchemaName2\"").setSqlEscapeAll(true);  escapeCheckSchemaName(ignite(0).createCache(cfg),log,cfg.getSqlSchema());  escapeCheckSchemaName(ignite(0).createCache(cfgEsc),log,"SchemaName2");  ignite(0).destroyCache(cfg.getName());  ignite(0).destroyCache(cfgEsc.getName());}  }
class C{  public void loadDefaultData(){  materialBanList.add(Material.air);  materialBanList.add(Material.cactus);  materialBanList.add(Material.craftedSnow);  materialBanList.add(Material.fire);  materialBanList.add(Material.leaves);  materialBanList.add(Material.portal);  materialBanList.add(Material.vine);  materialBanList.add(Material.plants);  materialBanList.add(Material.coral);  materialBanList.add(Material.web);  materialBanList.add(Material.sponge);  materialBanList.add(Material.sand);}  }
class C{  public FloatMatrix mini(FloatMatrix other){  return mini(other,this);}  }
class C{  public static void organizeDistribution(final Object[] objs,final RandomChoiceChooser chooser,final boolean allowAllZeros){  double sum=0.0;  if (objs.length == 0)   throw new ArithmeticException("Distribution has no elements");  for (int x=0; x < objs.length; x++) {    if (chooser.getProbability(objs[x]) < 0.0)     throw new ArithmeticException("Distribution has negative probabilities");    sum+=chooser.getProbability(objs[x]);  }  if (sum == 0.0)   if (!allowAllZeros)   throw new ArithmeticException("Distribution has all zero probabilities"); else {    for (int x=0; x < objs.length; x++)     chooser.setProbability(objs[x],1.0f);    sum=objs.length;  }  for (int x=0; x < objs.length; x++)   chooser.setProbability(objs[x],(float)(chooser.getProbability(objs[x]) / sum));  sum=0.0;  for (int x=0; x < objs.length; x++) {    sum+=chooser.getProbability(objs[x]);    chooser.setProbability(objs[x],(float)sum);  }  int x;  for (x=objs.length - 1; x > 0; x--)   if (chooser.getProbability(objs[x]) == chooser.getProbability(objs[x - 1]))   chooser.setProbability(objs[x],1.0f); else   break;  chooser.setProbability(objs[x],1.0f);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.303 -0500",hash_original_method="240DC3968F2BE784AD66FA40662DC8EC",hash_generated_method="E0946249E803D66F7EE5B4E2003C5376") public String findLibrary(String libraryName){  String fileName=System.mapLibraryName(libraryName);  for (  File directory : nativeLibraryDirectories) {    File file=new File(directory,fileName);    if (file.exists() && file.isFile() && file.canRead()) {      return file.getPath();    }  }  return null;}  }
class C{  protected boolean exists(Object element){  if (element == null) {    return false;  }  if (element instanceof IResource) {    return ((IResource)element).exists();  }  if (element instanceof IJavaElement) {    return ((IJavaElement)element).exists();  }  return true;}  }
class C{  protected Object mapArray(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {  if (ctxt.isEnabled(DeserializationConfig.Feature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {    return mapArrayToArray(jp,ctxt);  }  if (jp.nextToken() == JsonToken.END_ARRAY) {    return new ArrayList<Object>(4);  }  ObjectBuffer buffer=ctxt.leaseObjectBuffer();  Object[] values=buffer.resetAndStart();  int ptr=0;  int totalSize=0;  do {    Object value=deserialize(jp,ctxt);    ++totalSize;    if (ptr >= values.length) {      values=buffer.appendCompletedChunk(values);      ptr=0;    }    values[ptr++]=value;  } while (jp.nextToken() != JsonToken.END_ARRAY);  ArrayList<Object> result=new ArrayList<Object>(totalSize + (totalSize >> 3) + 1);  buffer.completeAndClearBuffer(values,ptr,result);  return result;}  }
class C{  public ActionBarHelper createActionBarHelper(){  return new ActionBarHelper();}  }
class C{  private static Pointer computePointer(DoubleBuffer buffer){  Pointer result=null;  if (buffer.isDirect()) {    int oldPosition=buffer.position();    buffer.position(0);    result=Pointer.to(buffer.slice()).withByteOffset(oldPosition * Sizeof.DOUBLE);    buffer.position(oldPosition);  } else   if (buffer.hasArray()) {    DoubleBuffer t=DoubleBuffer.wrap(buffer.array());    int elementOffset=buffer.position() + buffer.arrayOffset();    result=Pointer.to(t).withByteOffset(elementOffset * Sizeof.DOUBLE);  }  return result;}  }
class C{  public static boolean isBisFunction(String varName){  if (!varName.startsWith("BIS_fnc_")) {    return false;  }  return Collections.binarySearch(LIST_BIS_FUNCTIONS,varName) >= 0;}  }
class C{  public void loadDefaultUserRoles(){  defaultRoles=new HashMap<>();  roles=new HashMap<>();  for (  BaseUserRole bur : BaseUserRole.values()) {    createDefaultUserRole(bur);  }}  }
class C{  protected Point2D _forward(double phi,double lambda,Point2D p,AzimuthVar azVar){  double cosPhi=Math.cos(phi);  double lambdaMinusCtrLon=lambda - centerX;  if (!hemisphere_clip(centerY,centerX,phi,lambda)) {    double az=GreatCircle.sphericalAzimuth(centerY,centerX,phi,lambda);    if (azVar != null) {      azVar.invalid_forward=true;      azVar.current_azimuth=az;    }    return edge_point(p,az);  }  double x=(scaled_radius * cosPhi * Math.sin(lambdaMinusCtrLon)) + wx;  double y=hy - (scaled_radius * (cosCtrLat * Math.sin(phi) - sinCtrLat * cosPhi * Math.cos(lambdaMinusCtrLon)));  p.setLocation(x,y);  return p;}  }
class C{  public int compareTo(Object obj){  HalfEdge e=(HalfEdge)obj;  int comp=compareAngularDirection(e);  return comp;}  }
class C{  public boolean isRebaseFile(String path){  return path.equals(myRebaseApplyPath) || path.equals(myRebaseMergePath);}  }
class C{  public void stopFilteringMulticastV4Packets(){  mFilteringMulticastV4Packets.set(false);  sendMessage(CMD_STOP_PACKET_FILTERING,MULTICAST_V4,0);}  }
class C{  public final boolean containsIgnoreCase(String s){  if (null == s)   return false;  for (int i=0; i < m_firstFree; i++) {    if (m_map[i].equalsIgnoreCase(s))     return true;  }  return false;}  }
class C{  public double stop(){  assert state == STARTED || state == PAUSED;  time=culmTime;  if (state == STARTED)   time+=now() - startTime;  state=STOPPED;  for (  Map.Entry<String,RTimer> entry : children) {    RTimer child=entry.getValue();    if (child.state == STARTED || child.state == PAUSED)     child.stop();  }  return time;}  }
class C{  public static void doQuit(){synchronized (isQuittingLock) {    if (isQuitting)     return; else     isQuitting=true;    Object[] entries=allControllers.entrySet().toArray();    for (int x=0; x < entries.length; x++)     if (entries[x] != null && entries[x] instanceof Console)     ((Console)(((Map.Entry)(entries[x])).getKey())).doClose(); else     if (entries[x] != null && entries[x] instanceof SimpleController)     ((SimpleController)(((Map.Entry)(entries[x])).getKey())).doClose();    if (!(SimApplet.isApplet))     try {      System.exit(0);    } catch (    Exception e) {    }    isQuitting=false;  }}  }
class C{  public static IHjsonDsfProvider hex(boolean stringify){  return new DsfHex(stringify);}  }
class C{  @Override public void onDone(){  mOverlay.remove(mGraphic);}  }
class C{  public String obtainFoundationForPeerReflexiveCandidate(){  return Integer.toString(lastAssignedRemoteFoundation++);}  }
class C{  private Option resolveOption(String opt){  opt=Util.stripLeadingHyphens(opt);  for (Iterator it=options.iterator(); it.hasNext(); ) {    Option option=(Option)it.next();    if (opt.equals(option.getOpt())) {      return option;    }    if (opt.equals(option.getLongOpt())) {      return option;    }  }  return null;}  }
class C{  public boolean similar(Object other){  try {    if (!(other instanceof JSONObject)) {      return false;    }    Set<String> set=this.keySet();    if (!set.equals(((JSONObject)other).keySet())) {      return false;    }    Iterator<String> iterator=set.iterator();    while (iterator.hasNext()) {      String name=iterator.next();      Object valueThis=this.get(name);      Object valueOther=((JSONObject)other).get(name);      if (valueThis instanceof JSONObject) {        if (!((JSONObject)valueThis).similar(valueOther)) {          return false;        }      } else       if (valueThis instanceof JSONArray) {        if (!((JSONArray)valueThis).similar(valueOther)) {          return false;        }      } else       if (!valueThis.equals(valueOther)) {        return false;      }    }    return true;  } catch (  Throwable exception) {    return false;  }}  }
class C{  protected VariableImpl(){  super();}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("SHA-1");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  private void sendUpForInjectedDownPointers(MotionEvent prototype,int policyFlags){  final InjectedPointerTracker injectedTracked=mInjectedPointerTracker;  int pointerIdBits=0;  final int pointerCount=prototype.getPointerCount();  for (int i=0; i < pointerCount; i++) {    final int pointerId=prototype.getPointerId(i);    if (!injectedTracked.isInjectedPointerDown(pointerId)) {      continue;    }    pointerIdBits|=(1 << pointerId);    final int action=computeInjectionAction(MotionEvent.ACTION_UP,i);    sendMotionEvent(prototype,action,pointerIdBits,policyFlags);  }}  }
class C{  public void addZoomListener(ZoomListener zoomListener){  zoomListeners.add(zoomListener);}  }
class C{  public void testHasLoginConfigEmpty() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertTrue(!WebXmlUtils.hasLoginConfig(webXml));}  }
class C{  public ClientConnection(String urlstring,boolean useAuthentication) throws IOException {  this.httpClient=HttpClients.custom().useSystemProperties().setConnectionManager(getConnctionManager(useAuthentication)).setDefaultRequestConfig(defaultRequestConfig).build();  this.request=new HttpGet(urlstring);  this.request.setHeader("User-Agent",USER_AGENT);  this.init();}  }
class C{  public void dump(Printer printer,boolean verbose){}  }
class C{  @NoInline public static void write(double value,int postDecimalDigits){  if (runningVM) {    sysCall.sysConsoleWriteDouble(value,postDecimalDigits);  } else {    writeNotRunningVM(value);  }}  }
class C{  public void addHandler(String path,ElementHandler handler){  getDispatchHandler().addHandler(path,handler);}  }
class C{  @Override public String modelDescription(){  return modelDescription(null);}  }
class C{  public MachineTagsCollection findAll(String namespace,String key){  MachineTagsCollection foundTags=new MachineTagsCollection();  for (  MachineTag searchTag : this) {    if (searchTag.namespace.equals(namespace) && searchTag.key.equals(key)) {      foundTags.add(searchTag);    }  }  return foundTags;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.PRIMITIVE_PARAM__TYPE:    setType((PrimitiveType)newValue);  return;case FunctionblockPackage.PRIMITIVE_PARAM__CONSTRAINT_RULE:setConstraintRule((ConstraintRule)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected N4TypeDeclarationImpl(){  super();}  }
class C{  public void validate(FacesContext context,UIComponent uiComponent,Object input) throws ValidatorException {  String datatype=getDataType(uiComponent);  boolean mandatory=isRequired(uiComponent);  String value=null;  if (input != null) {    value=input.toString().trim();  }  if (value == null || value.length() == 0) {    if (mandatory) {      ValidatorException e=getException(JSFUtils.getText(BaseBean.ERROR_PARAMETER_VALUE_MANDATORY,new String[]{JSFUtils.getLabel(uiComponent)},context));      throw e;    } else {      return;    }  }  if (ConfigurationKey.TYPE_LONG.equals(datatype)) {    validateLength(context,value,ADMValidator.LENGTH_DESCRIPTION);    validateLong(context,uiComponent,value);  } else   if (ConfigurationKey.TYPE_URL.equals(datatype)) {    validateLength(context,value,ADMValidator.LENGTH_DESCRIPTION);    validateUrl(context,uiComponent,value);  } else   if (ConfigurationKey.TYPE_MAIL.equals(datatype)) {    validateLength(context,value,ADMValidator.LENGTH_NAME);    validateMail(context,uiComponent,value);  } else   if (ConfigurationKey.TYPE_BOOLEAN.equals(datatype)) {    validateBoolean(context,uiComponent,value);  } else {    validateLength(context,value,ADMValidator.LENGTH_DESCRIPTION);  }}  }
class C{  protected Optional<BlazeGraphEdit> toGraphEdit(final IChangeRecord record){  final Action action;  if (record.getChangeAction() == ChangeAction.INSERTED) {    action=Action.Add;  } else   if (record.getChangeAction() == ChangeAction.REMOVED) {    action=Action.Remove;  } else {    return Optional.empty();  }  return graphAtomTransform().apply(record.getStatement()).map(null);}  }
class C{  public DistinguishedNameException(){  super("The distinguished name is already in use by a different organization.");}  }
class C{  public boolean isSetSyncRequest(){  return this.syncRequest != null;}  }
class C{  public static String ItThem(final int quantity){  return makeUpperCaseWord(itthem(quantity));}  }
class C{  private void processTable(int xl,int xr,int[] table){  int size=table.length;  for (int s=0; s < size; s+=2) {    xl^=P[0];    for (int i=1; i < ROUNDS; i+=2) {      xr^=F(xl) ^ P[i];      xl^=F(xr) ^ P[i + 1];    }    xr^=P[ROUNDS + 1];    table[s]=xr;    table[s + 1]=xl;    xr=xl;    xl=table[s];  }}  }
class C{  @Override public int start_state(){  return 0;}  }
class C{  private void handleJsonMakeChildren(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  String targetId;  String[] movedIds;  boolean justTheEntry;  String csrft;  try {    final JsonNodeHelper json=getJsonNode(requestAndResponse);    targetId=json.getString("targetId");    movedIds=json.getStringArray("movedIds");    justTheEntry=json.getBoolean("justTheEntry");    csrft=json.getString("csrft");  } catch (  final IOException e) {    returnJson400(requestAndResponse,servletText.errorJson());    return;  }  if (isTheCsrftWrong(requestAndResponse,csrft)) {    returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));    return;  }  if (!dbLogic.getIdGenerator().isIdWellFormed(targetId)) {    returnJson400(requestAndResponse,servletText.errorTargetIdInvalidFormat());    return;  }  try {    final Errors errors=new Errors();    final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));    if (user == null) {      returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));      return;    }    if (user.getIsAccountClosed()) {      returnJson400(requestAndResponse,servletText.errorAccountIsClosed());    }    final Entry parent=dbLogic.getEntryById(targetId);    if (parent == null) {      returnJson400(requestAndResponse,servletText.errorTargetParentCouldNotBeFound());      return;    }    final LinkedList<EntryAndIsFromList> entriesToMove=new LinkedList<EntryAndIsFromList>();    final String errorMessage=validateEntriesParentsBeforeChildren(requestAndResponse,movedIds,entriesToMove);    if (errorMessage != null) {      returnJson400(requestAndResponse,errorMessage);      return;    }    final StringBuilder result=new StringBuilder();    result.append("[");    boolean isFirst=true;    for (    final EntryAndIsFromList entryToMove : entriesToMove) {      if (parent.getId().equals(entryToMove.entry.getId())) {        returnJson400(requestAndResponse,servletText.errorTargetAndObjectCanNotBeTheSame());        return;      }      if (!dbLogic.makeEntryAChildOfAParent(user,parent,entryToMove.entry,justTheEntry,isUserAnAdmin(requestAndResponse),errors)) {        returnJson400(requestAndResponse,errors);        return;      }      if (entryToMove.isFromList) {        if (!isFirst) {          result.append(",");        }        result.append("{");        result.append("\"id\":\"" + entryToMove.entry.getId() + "\",\n");        addJsonForEntry(result,entryToMove.entry,false,false,false,true);        result.append("}");        isFirst=false;      }    }    result.append("]");    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    logger.log(Level.INFO,"Exception",e);    returnJson500(requestAndResponse,servletText.errorInternalDatabase());  }}  }
class C{  public void scheduleScan(){  state=ControllerState.SCANNING;}  }
class C{  public static boolean isNullType(Class<?> type){  if (type == Void.class)   return true;  if (type == Empty.class)   return true;  return false;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="VO_VOLATILE_INCREMENT",justification="Method itself is synchronized to protect numNodes") public void registerNode(AbstractNode node){synchronized (this) {    nodeArray[numNodes]=node;    mustInit[numNodes]=true;    numNodes++;  }}  }
class C{  public ISPO next(){  if (sameAs2It == null) {    if (sameAs2 != null) {      sameAs2It=sameAs2.getAccessPath(SPOKeyOrder.SPO).iterator();    } else {      sameAs2It=new EmptyChunkedIterator<ISPO>(SPOKeyOrder.SPO);    }  }  canRemove=false;  ISPO current=null;  if (src.hasNext()) {    current=src.next();    processSameAs3(current);    canRemove=true;  } else   if (sameAs2It.hasNext()) {    current=sameAs2It.next();    processSameAs3(current);  } else {    if (sameAs3It == null) {      if (sameAs3 != null) {        sameAs3It=sameAs3.getAccessPath(SPOKeyOrder.SPO).iterator();      } else {        sameAs3It=new EmptyChunkedIterator<ISPO>(SPOKeyOrder.SPO);      }    }    if (sameAs3It.hasNext()) {      current=sameAs3It.next();    }  }  return current;}  }
class C{  private void mapApplicationUserIdToLicense(List<UsageLicense> licenses,User[] createdUsers){  if (createdUsers == null) {    return;  }  String applicationUserId;  for (  UsageLicense license : licenses) {    for (    User createdUser : createdUsers) {      applicationUserId=createdUser.getApplicationUserId();      if (createdUser.getUserId().equals(license.getUser().getUserId()) && applicationUserId != null) {        license.setApplicationUserId(applicationUserId);        break;      }    }  }}  }
class C{  public static ScriptTO scriptToTransferObject(Script script){  ScriptTO ret=new ScriptTO();  ret.setComments(script.getComments());  ret.setCreated(script.getCreated());  ret.setCreator(script.getCreator());  ret.setId(script.getId());  ret.setModified(script.getModified());  ret.setName(script.getName());  ret.setProductName(script.getProductName());  ret.setRuntime(script.getRuntime());  ret.setSteps(scriptStepsToTransferobjectList(script.getScriptSteps()));  return ret;}  }
class C{  public BMI(String name,int age,double weight,double feet,double inches){  this(name,age,weight,inches + feet * 12);}  }
class C{  @Override public Boolean build(){  return Boolean.valueOf(isEquals());}  }
class C{  public static AssociationSessionType create(String sessType) throws AssociationException {  return create(sessType,Association.TYPE_HMAC_SHA1);}  }
class C{  @Override public void acceptTrainingSet(TrainingSetEvent e){  DataSetEvent de=new DataSetEvent(e.getSource(),e.getTrainingSet());  acceptDataSet(de);}  }
class C{  public Server(int port) throws IOException {  this(port,null);}  }
class C{  public void verify(int maxDoc) throws IOException {  byte[] rootMinPacked=new byte[packedBytesLength];  byte[] rootMaxPacked=new byte[packedBytesLength];  Arrays.fill(rootMaxPacked,(byte)0xff);  verify(getIntersectState(new VerifyVisitor(numDims,bytesPerDim,maxDoc)),1,rootMinPacked,rootMaxPacked);}  }
class C{  private void genPreamblePackage(String packageName) throws JasperException {  if (!"".equals(packageName) && packageName != null) {    out.printil("package " + packageName + ";");    out.println();  }}  }
class C{  private static void registerServiceClass(final Class<?> type,final Map<String,ClassLoader> classloaderMap,final ClassLoader classLoader,final Set<Class> classes){  final String className=type.getName();  final ClassLoader registeredClassLoader=classloaderMap.get(className);  if (registeredClassLoader == null) {    classloaderMap.put(className,classLoader);    classes.add(type);  } else {    boolean loadedFromAncestor=false;    ClassLoader ancestorClassLoader=classLoader.getParent();    while (ancestorClassLoader != null) {      if (ancestorClassLoader == registeredClassLoader) {        loadedFromAncestor=true;        break;      }      ancestorClassLoader=ancestorClassLoader.getParent();    }    if (!loadedFromAncestor) {      logger.warn("Attempt was made to load " + className + " from "+ classLoader+ " but that class name is already loaded/registered from "+ registeredClassLoader+ ".  This may cause unpredictable behavior.  Order of NARs is not guaranteed.");    }  }}  }
class C{  public static boolean scrub(final Bundle bundle){  if (null == bundle) {    return false;  }  try {    bundle.containsKey(null);  } catch (  final Exception e) {    bundle.clear();    return true;  }  return false;}  }
class C{  public int increment(int offset){  CharSequence txt=getText();  int i;  if (txt != null) {    try {      i=Integer.parseInt(txt.toString());    } catch (    NumberFormatException e) {      i=0;    }  } else {    i=0;  }  i=i + offset;  setText(String.valueOf(i));  return i;}  }
class C{  public OrderedTask(String identifier,Step... steps){  this(identifier,Arrays.asList(steps));}  }
class C{  public static short parseShort(CharSequence csq,int radix,Cursor cursor){  int i=parseInt(csq,radix,cursor);  if ((i < Short.MIN_VALUE) || (i > Short.MAX_VALUE))   throw new NumberFormatException("Overflow");  return (short)i;}  }
class C{  public SPARQLStarUpdateDataBlockParser(ValueFactory valueFactory){  super(valueFactory);  this.namespaceTable=new HashMap<>();}  }
class C{  public static double quantile(double y,double lambda){  return -(1.0 / lambda) * Math.log(1.0 - y);}  }
class C{  public SVMExamples(ObjectInputStream in) throws IOException {  this(in.readInt(),in.readDouble());  this.dim=in.readInt();  String scaleString=in.readUTF();  if (scaleString.equals("scale")) {    int numberOfAttributes=in.readInt();    this.meanVarianceMap=new HashMap<Integer,MeanVariance>();    for (int i=0; i < numberOfAttributes; i++) {      int index=in.readInt();      double mean=in.readDouble();      double variance=in.readDouble();      meanVarianceMap.put(Integer.valueOf(index),new MeanVariance(mean,variance));    }  }  for (int e=0; e < this.train_size; e++) {    index[e]=new int[in.readInt()];    atts[e]=new double[index[e].length];    for (int a=0; a < index[e].length; a++) {      index[e][a]=in.readInt();      atts[e][a]=in.readDouble();    }    alphas[e]=in.readDouble();    ys[e]=in.readDouble();  }}  }
class C{  public boolean isMulticast(){  return multicast;}  }
class C{  private void generateJDKWrongElem(long X){  for (long newTotal; X >= 2 * minRun + 1; X=newTotal) {    newTotal=X / 2 + 1;    if (3 * minRun + 3 <= X && X <= 4 * minRun + 1) {      newTotal=2 * minRun + 1;    } else     if (5 * minRun + 5 <= X && X <= 6 * minRun + 5) {      newTotal=3 * minRun + 3;    } else     if (8 * minRun + 9 <= X && X <= 10 * minRun + 9) {      newTotal=5 * minRun + 5;    } else     if (13 * minRun + 15 <= X && X <= 16 * minRun + 17) {      newTotal=8 * minRun + 9;    }    runs.add(0,X - newTotal);  }  runs.add(0,X);}  }
class C{  public boolean is3DTextNorth(){  return (textDecoration & TEXT_DECORATION_3D_SHADOW_NORTH) == TEXT_DECORATION_3D_SHADOW_NORTH;}  }
class C{  public void addAnimationListener(@NonNull AnimationListener listener){  mListeners.add(listener);}  }
class C{  private DMessage rxMessage() throws IOException {  int size=-1;  int command=0;  try {    size=(int)readDWord();    command=(int)readDWord();  } catch (  SocketTimeoutException e) {    if (!m_detectBrokenSocket)     throw e;    int oldBufferSize=-1;    if (m_socket != null) {      oldBufferSize=m_socket.getSendBufferSize();      m_socket.setSendBufferSize(1);    }    SendThread t=new SendThread();    t.start();    long waitBegin=System.currentTimeMillis();    while (true) {      try {        t.join(1000);        if (t.completed)         break;      } catch (      InterruptedException e1) {        break;      }      long waitEnd=System.currentTimeMillis();      if (waitEnd - waitBegin > 10000)       break;    }    boolean success=true;    if (t.isAlive()) {      t.interrupt();      success=false;    }    if (oldBufferSize > 0) {      m_socket.setSendBufferSize(oldBufferSize);    }    if (!t.completed) {      success=false;    }    if (t.exception != null) {      throw t.exception;    }    if (success)     throw e; else     throw new SocketException("Broken pipe");  }  if (size < 0)   throw new IOException("socket closed");  DMessage message=DMessageCache.alloc(size);  byte[] messageContent=message.getData();  int offset=0;  while (offset < size)   offset+=m_in.read(messageContent,offset,size - offset);  message.setType(command);synchronized (this) {    m_msgRx++;  }  return message;}  }
class C{  public String numFoldsTipText(){  return "The number of folds used for cross-validation.";}  }
class C{  public static boolean testSphereSphere(double aX,double aY,double aZ,double radiusSquaredA,double bX,double bY,double bZ,double radiusSquaredB){  double dX=bX - aX, dY=bY - aY, dZ=bZ - aZ;  double distSquared=dX * dX + dY * dY + dZ * dZ;  double h=0.5 + (radiusSquaredA - radiusSquaredB) / distSquared;  double r_i=radiusSquaredA - h * h * distSquared;  return r_i >= 0.0;}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);}  }
class C{  public static void writeMorphFillStyle(OutStream out,FillStyle startStyle,FillStyle endStyle) throws IOException {  int fillType=startStyle.fillType;  out.writeUI8(fillType);  if (fillType == SWFConstants.FILL_SOLID) {    startStyle.color.writeWithAlpha(out);    endStyle.color.writeWithAlpha(out);  } else   if (fillType == SWFConstants.FILL_LINEAR_GRADIENT || fillType == SWFConstants.FILL_RADIAL_GRADIENT) {    startStyle.matrix.write(out);    endStyle.matrix.write(out);    int numRatios=startStyle.ratios.length;    out.writeUI8(startStyle.ratios.length);    for (int i=0; i < numRatios; i++) {      if (startStyle.colors[i] == null || endStyle.colors[i] == null) {        continue;      }      out.writeUI8(startStyle.ratios[i]);      startStyle.colors[i].writeWithAlpha(out);      out.writeUI8(endStyle.ratios[i]);      endStyle.colors[i].writeWithAlpha(out);    }  } else   if (fillType == SWFConstants.FILL_TILED_BITMAP || fillType == SWFConstants.FILL_CLIPPED_BITMAP) {    int bitmapId=startStyle.bitmapId;    out.writeUI16(bitmapId);    startStyle.matrix.write(out);    endStyle.matrix.write(out);  }}  }
class C{  public synchronized void pvChanged(PvChangeEvent event){  log.trace(toString() + ":Child PvChange:" + event.toString());  firePvChanged(new PvChangeEvent(this,((ProcessVar)event.getSource()).getKeyValue(),event.getSource(),event.getType() | PvChangeEvent.PV_CHILDCHANGE));}  }
class C{  @SkipValidation @Action(value="/deActivateProperty-newForm",results={@Result(name=NEW,location="/deActivateProperty-new.jsp")}) public String newForm(){  LOGGER.debug("Entered into the newForm method, Index Number " + indexNumber);  String target="";  try {    if (getBasicProp() == null) {      throw new PropertyNotFoundException();    } else {      LOGGER.debug("newForm: BasicProperty: " + getBasicProp());      Map<String,String> wfMap=basicProp.getPropertyWfStatus();      String wfStatus=wfMap.get(WFSTATUS);      if (wfStatus.equalsIgnoreCase("TRUE")) {        getSession().put(WFOWNER,wfMap.get(WFOWNER));        target="workFlowError";      } else {        setOwnerName(basicProp.getFullOwnerName());        setAddress(basicProp.getAddress().toString());        setDocNumber(basicProp.getProperty().getDocNumber());        target=NEW;      }    }  } catch (  PropertyNotFoundException e) {    LOGGER.error("Property not found with given Index Number " + indexNumber,e);  }  LOGGER.debug("Exit from newForm method");  return target;}  }
class C{  protected int insertionIndex(double val){  Object[] values=_values;  double[] set=_set;  int length=set.length;  int hash=_hashingStrategy.computeHashCode(val) & 0x7fffffff;  int index=hash % length;  if (isFree(values,index)) {    return index;  }  if (isFull(values,index) && set[index] == val) {    return -index - 1;  }  int probe=1 + (hash % (length - 2));  int firstRemoved=isRemoved(values,index) ? index : -1;  do {    index-=probe;    if (index < 0) {      index+=length;    }    if (firstRemoved == -1 && isRemoved(values,index)) {      firstRemoved=index;    }  } while (isFull(values,index) && set[index] != val);  if (isRemoved(values,index)) {    while (!isFree(values,index) && (isRemoved(values,index) || set[index] != val)) {      index-=probe;      if (index < 0) {        index+=length;      }    }  }  if (isFull(values,index)) {    return -index - 1;  }  return firstRemoved == -1 ? index : firstRemoved;}  }
class C{  public SAXParserMMImpl(XMLParserConfiguration config){  super(config);}  }
class C{  public FBServiceManager(String gdsType){  this(GDSType.getType(gdsType));}  }
class C{  public boolean isOpaque(){  return path == null;}  }
class C{  private void clearAnswer(QuestionWidget qw){  if (qw.getAnswer() != null) {    qw.clearAnswer();  }}  }
class C{  @Bean public JythonInterpreterFactory interpreterFactory(){  return new DefaultJythonInterpreterFactory();}  }
class C{  public void dispose(){}  }
class C{  private boolean isASCII(byte[] data,int start){  for (int i=start; i < start + 4; i++) {    char c=(char)(data[i] & 0xff);    if (c >= '0' && c <= '9') {      continue;    } else     if (c >= 'a' && c <= 'f') {      continue;    } else     if (c >= 'A' && c <= 'F') {      continue;    } else {      return false;    }  }  return true;}  }
class C{  private void ensureIdentifier(final String identifier){  int pos=this.identifiers.indexOf(identifier);  if (pos == -1) {    this.identifiers.add(this.nextIdentifierPosition,identifier);    this.nextIdentifierPosition++;  } else {    this.nextIdentifierPosition=pos + 1;  }}  }
class C{  private static int copyStreamContents(final long offset,final int size,final InputStream input,final OutputStream output) throws IOException {  byte[] buffer=new byte[size];  int count=0;  int n;  final long skipAmount=input.skip(offset);  if (skipAmount != offset) {    throw new RuntimeException(String.format("Unable to skip in the input stream actual %d, expected %d",skipAmount,offset));  }  while (-1 != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public BufferedImage createImage(int imageWidth,int imageHeight){  BufferedImage image=new BufferedImage(imageWidth,imageHeight,BufferedImage.TYPE_INT_ARGB);  if (this.surfaceAttributes.drawInterior && this.values != null) {    ArrayList<Color> colorGrid=new ArrayList<Color>(this.width * this.height);    for (    GridPointAttributes gridPoint : this.values) {      colorGrid.add(gridPoint.getColor());    }    double sectorHeight=this.sector.getDeltaLat().radians;    double sectorWidth=this.sector.getDeltaLon().radians;    double pixelWidth=sectorHeight / imageHeight;    double pixelHeight=sectorWidth / imageWidth;    double colorCellWidth=sectorWidth / (this.width - 1);    double colorCellHeight=sectorHeight / (this.height - 1);    for (int y=0; y < imageHeight; y++) {      double lat=(y + 0.5) * pixelWidth;      int row=(int)(lat / colorCellHeight);      for (int x=0; x < imageWidth; x++) {        double lon=(x + 0.5) * pixelHeight;        int col=(int)(lon / colorCellWidth);        Color sw=colorGrid.get((row + 1) * this.width + col);        Color se=colorGrid.get((row + 1) * this.width + col + 1);        Color ne=colorGrid.get(row * this.width + col + 1);        Color nw=colorGrid.get(row * this.width + col);        double s=(lon - col * colorCellWidth) / colorCellWidth;        double t=(lat - row * colorCellHeight) / colorCellHeight;        int colorInt=ImageUtil.interpolateColor(s,1.0 - t,sw.getRGB(),se.getRGB(),nw.getRGB(),ne.getRGB());        image.setRGB(x,y,colorInt);      }    }  }  if (this.surfaceAttributes.drawOutline) {    Graphics2D g=image.createGraphics();    g.setPaint(this.surfaceAttributes.outlineMaterial.getDiffuse());    g.setStroke(new BasicStroke((float)this.surfaceAttributes.outlineWidth));    g.drawRect(0,0,imageWidth - 1,imageHeight - 1);  }  return image;}  }
class C{  public static int showConfirmDialog(Component parentComponent,Object message) throws HeadlessException {  return showConfirmDialog(javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("VFldVldDef fldid [");  buffer.append(fldid);  buffer.append("] vldtype [");  buffer.append(vldtype);  buffer.append("] id1 [");  buffer.append(id1);  buffer.append("]");  return buffer.toString();}  }
class C{  public SubjectAlternativeNameExtension(Boolean critical,GeneralNames names) throws IOException {  this.names=names;  this.extensionId=PKIXExtensions.SubjectAlternativeName_Id;  this.critical=critical.booleanValue();  encodeThis();}  }
class C{  public void throwIfNecessary(){  if (!failureList.isEmpty()) {    RuntimeException ex=null;    for (    AISValidationFailure f : failureList) {      LOG.debug(String.format("Validation failure %s : %s",f.errorCode(),f.message()));      ex=MultipleCauseException.combine(ex,f.getException());    }    throw ex;  }}  }
class C{  private ArrayList<ArrayList> createTestList(int rows,int cols){  ArrayList<ArrayList> list=Lists.newArrayList();  Random generator=new Random();  for (int i=0; i < rows; i++) {    ArrayList<Integer> col=Lists.newArrayList();    list.add(col);    for (int j=0; j < cols; j++) {      Integer r=generator.nextInt();      col.add(r);    }    col.add(i);  }  return list;}  }
class C{  public void shrink(int maximumCapacity){  if (maximumCapacity < 0)   throw new IllegalArgumentException("maximumCapacity must be >= 0: " + maximumCapacity);  if (size > maximumCapacity)   maximumCapacity=size;  if (capacity <= maximumCapacity)   return;  maximumCapacity=nextPowerOfTwo(maximumCapacity);  resize(maximumCapacity);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__KIND:    setKind((PropertyNameKind)newValue);  return;case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__LITERAL_NAME:setLiteralName((String)newValue);return;case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__COMPUTED_NAME:setComputedName((String)newValue);return;case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__EXPRESSION:setExpression((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isShowEvenIfBlank(){  return showEvenIfBlank;}  }
class C{  public DefaultRequest socialActionTarget(String value){  setString(SOCIAL_ACTION_TARGET,value);  return this;}  }
class C{  public void paintChildrenWithBorder(Graphics g,boolean drawBorder){  paintChildren(g);  if (drawBorder) {    paintBorder(g);  }}  }
class C{  public boolean hasSubstitutedParameters(){  return false;}  }
class C{  private static <T>T cast(Class<T> clazz,Object o){  if (!clazz.isInstance(o))   throw new IllegalArgumentException(o.toString());  return clazz.cast(o);}  }
class C{  public double operations(){  return A.rows() * A.columns() / 1.0E6;}  }
class C{  public Set<String> addContent(MultivariateDistribution distrib){  if (!paused) {    curState.addToState(distrib);    return update();  } else {    log.info("system is paused, ignoring content " + distrib);    return Collections.emptySet();  }}  }
class C{  @Override public String toString(){  return title;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getRuleType().equals(RULETYPE_JSR223ScriptingAPIs)) {    String engineName=getEngineName();    if (engineName == null || (!(engineName.equalsIgnoreCase("groovy") || engineName.equalsIgnoreCase("jython") || engineName.equalsIgnoreCase("beanshell")))) {      log.saveError("Error",Msg.getMsg(getCtx(),"WrongScriptValue"));      return false;    }  }  return true;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UXTB");  translateAll(environment,instruction,"UXTB",instructions);}  }
class C{  void buildInstances(Document doc,String sName) throws Exception {  NodeList nodelist;  nodelist=selectAllNames(doc);  if (nodelist.getLength() > 0) {    sName=((CharacterData)(nodelist.item(0).getFirstChild())).getData();  }  nodelist=selectAllVariables(doc);  int nNodes=nodelist.getLength();  ArrayList<Attribute> attInfo=new ArrayList<Attribute>(nNodes);  m_nPositionX=new int[nodelist.getLength()];  m_nPositionY=new int[nodelist.getLength()];  for (int iNode=0; iNode < nodelist.getLength(); iNode++) {    ArrayList<Node> valueslist;    valueslist=selectOutCome(nodelist.item(iNode));    int nValues=valueslist.size();    ArrayList<String> nomStrings=new ArrayList<String>(nValues + 1);    for (int iValue=0; iValue < nValues; iValue++) {      Node node=valueslist.get(iValue).getFirstChild();      String sValue=((CharacterData)(node)).getData();      if (sValue == null) {        sValue="Value" + (iValue + 1);      }      nomStrings.add(sValue);    }    ArrayList<Node> nodelist2;    nodelist2=selectName(nodelist.item(iNode));    if (nodelist2.size() == 0) {      throw new Exception("No name specified for variable");    }    String sNodeName=((CharacterData)(nodelist2.get(0).getFirstChild())).getData();    weka.core.Attribute att=new weka.core.Attribute(sNodeName,nomStrings);    attInfo.add(att);    valueslist=selectProperty(nodelist.item(iNode));    nValues=valueslist.size();    for (int iValue=0; iValue < nValues; iValue++) {      Node node=valueslist.get(iValue).getFirstChild();      String sValue=((CharacterData)(node)).getData();      if (sValue.startsWith("position")) {        int i0=sValue.indexOf('(');        int i1=sValue.indexOf(',');        int i2=sValue.indexOf(')');        String sX=sValue.substring(i0 + 1,i1).trim();        String sY=sValue.substring(i1 + 1,i2).trim();        try {          m_nPositionX[iNode]=Integer.parseInt(sX);          m_nPositionY[iNode]=Integer.parseInt(sY);        } catch (        NumberFormatException e) {          System.err.println("Wrong number format in position :(" + sX + ","+ sY+ ")");          m_nPositionX[iNode]=0;          m_nPositionY[iNode]=0;        }      }    }  }  m_Instances=new Instances(sName,attInfo,100);  m_Instances.setClassIndex(nNodes - 1);  setUseADTree(false);  initStructure();}  }
class C{  public void writingRequestHeaders(){  if (sentRequestMillis != -1) {    throw new IllegalStateException();  }  sentRequestMillis=System.currentTimeMillis();}  }
class C{  public void stop(){  for (int i=handles.size() - 1; 0 <= i; i--) {    handles.get(i).remove();  }  handles.clear();  for (int i=startedIndex; 0 <= i; i--) {    LifecycleListener obj=listeners.get(i).get();    try {      obj.stop();    } catch (    Throwable err) {      LoggerFactory.getLogger(obj.getClass()).warn("Failed to stop",err);    }    startedIndex=i - 1;  }}  }
class C{  public void addAddressListener(AddressListener l){  if (listeners == null) {    listeners=new ArrayList<AddressListener>(2);  }  if (!listeners.contains(l)) {    listeners.add(l);  }}  }
class C{  private void assertEventProperty(ReplDBMSEvent event,String name){  String value=event.getDBMSEvent().getMetadataOptionValue(name);  DBMSData rawData=event.getData().get(0);  String query=((StatementData)rawData).getQuery();  Assert.assertNotNull("Expected property to be set: query=" + query + " name="+ name,value);}  }
class C{  @Override public int hashCode(){  return -32 + Arrays.asList(alphas).hashCode();}  }
class C{  protected int engineGetKeySize(Key key) throws InvalidKeyException {  byte[] encoded=key.getEncoded();  if (encoded.length != 8) {    throw new InvalidKeyException("Invalid key length: " + encoded.length + " bytes");  }  return 56;}  }
class C{  public void fatal(Throwable throwable,String msg,Object[] argArray){  innerLog(Level.FATAL,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,argArray);}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public static <T,R>Cases<T,R> ofPStack(final PStack<Case<T,R>> cases){  return new Cases<>(cases,true);}  }
class C{  public void executeQuery(String query) throws SQLException {  executeQuery(this.connection,query);}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  public void addPSR(PilotingRollData psr){  pilotRolls.addElement(psr);}  }
class C{  public static OnUpdateClause createOnUpdate(String windowName,String asName,Expression expression){  return OnUpdateClause.create(windowName,asName).addAssignment(expression);}  }
class C{  public static boolean isValidProfilePath(Path path){  if (path == null) {    return true;  }  File f=path.toFile();  return path.toString().isEmpty() || (f.isFile() && f.canRead());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.765 -0500",hash_original_method="F192CCDB118CC85A380791B707646EA3",hash_generated_method="79537E25D67E0A797AAC9342E8D07C7C") public Reader retrieveArticleHeader(int articleNumber,ArticlePointer pointer) throws IOException {  return __retrieve(NNTPCommand.HEAD,articleNumber,pointer);}  }
class C{  public void addMessageTransfer(DTNHost from,DTNHost to){  autoClear();  this.overlayGraphics.add(new MessageGraphic(from,to));}  }
class C{  public ImageLoadOption scaleType(ImageView.ScaleType scaleType){  this.scaleType=scaleType;  return this;}  }
class C{  public BatchFraction defaultThreadPool(final String name,final int maxThreads,final int keepAliveTime,final TimeUnit keepAliveUnits){  threadPool(name,maxThreads,keepAliveTime,keepAliveUnits);  return defaultThreadPool(name);}  }
class C{  public String toString(boolean header){  StringBuffer temp=new StringBuffer();  if (m_canopies == null) {    return "No clusterer built yet";  }  if (header) {    temp.append("\nCanopy clustering\n=================\n");    temp.append("\nNumber of canopies (cluster centers) found: " + m_canopies.numInstances());  }  temp.append("\nT2 radius: " + String.format("%-10.3f",m_t2));  temp.append("\nT1 radius: " + String.format("%-10.3f",m_t1));  temp.append("\n\n");  temp.append(printCanopyAssignments(m_canopies,m_clusterCanopies));  temp.append("\n");  return temp.toString();}  }
class C{  public EditableOMGraphic add(OMGraphic omg,OMDrawingTool drawingTool){  EditableOMGraphic editable=null;  if (omg instanceof OMGraphicList) {    add((OMGraphicList)omg,drawingTool);    return editable;  }  if (omg != null && drawingTool != null) {    editable=drawingTool.getEditableGraphic(omg);    if (editable != null) {      add(editable);    } else {      if (Debug.debugging("eomg")) {        Debug.output("EditableOMGraphicList can't handle " + omg.getClass().getName());      }    }  } else {    if (Debug.debugging("eomg")) {      Debug.output("EditableOMGraphicList told to add null OMGraphic or null OMDrawingTool");    }  }  return editable;}  }
class C{  public synchronized void co_exit_to(Object arg_object,int thisCoroutine,int toCoroutine) throws java.lang.NoSuchMethodException {  if (!m_activeIDs.get(toCoroutine))   throw new java.lang.NoSuchMethodException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COROUTINE_NOT_AVAIL,new Object[]{Integer.toString(toCoroutine)}));  m_yield=arg_object;  m_nextCoroutine=toCoroutine;  m_activeIDs.clear(thisCoroutine);  notify();}  }
class C{  public void destroy(){  factory=null;}  }
class C{  public void logFine(String message){  logger.fine(logPrefix + message);}  }
class C{  public void appendToClassPathForInstrumentation(String path){}  }
class C{  public MOrderLine createLine(MProduct product,BigDecimal QtyOrdered,BigDecimal PriceActual){  if (!getDocStatus().equals("DR"))   return null;  int numLines=0;  MOrderLine[] lines=null;  try {    lines=getLines(null,"Line");    numLines=lines.length;    for (int i=0; i < numLines; i++) {      if (lines[i].getM_Product_ID() == product.getM_Product_ID()) {        BigDecimal current=lines[i].getQtyEntered();        BigDecimal toadd=QtyOrdered;        BigDecimal total=current.add(toadd);        lines[i].setQty(total);        lines[i].setPrice();        if (PriceActual.compareTo(Env.ZERO) > 0)         lines[i].setPrice(PriceActual);        lines[i].save();        return lines[i];      }    }  } catch (  Exception e) {    log.severe("Order lines cannot be created - " + e.getMessage());  }  MOrderLine line=new MOrderLine(this);  line.setProduct(product);  line.setQty(QtyOrdered);  line.setPrice();  if (PriceActual.compareTo(Env.ZERO) > 0)   line.setPrice(PriceActual);  line.save();  return line;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.384 -0500",hash_original_method="CED8C1FFBDBF9F9E7A40EC2B2E6DD909",hash_generated_method="56C8F96BF000F0F44095BF73C52F23CD") protected void shutdownInput() throws IOException {  if (fd == null) {    throw new IOException("socket not created");  }  shutdown(fd,true);}  }
class C{  public boolean isParser(){  return (iParser != null);}  }
class C{  @Override public Long decr(final String key){  checkIsInMultiOrPipeline();  client.decr(key);  return client.getIntegerReply();}  }
class C{  @NotNull @ObjectiveCName("validatePasswordCommand:") public Command<AuthState> validatePassword(String password){  return modules.getAuthModule().requestValidatePassword(password);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TCLASS__EXTERNAL:    setExternal(EXTERNAL_EDEFAULT);  return;case TypesPackage.TCLASS__DECLARED_ABSTRACT:setDeclaredAbstract(DECLARED_ABSTRACT_EDEFAULT);return;case TypesPackage.TCLASS__DECLARED_N4JS:setDeclaredN4JS(DECLARED_N4JS_EDEFAULT);return;case TypesPackage.TCLASS__DECLARED_FINAL:setDeclaredFinal(DECLARED_FINAL_EDEFAULT);return;case TypesPackage.TCLASS__DECLARED_POLYFILL:setDeclaredPolyfill(DECLARED_POLYFILL_EDEFAULT);return;case TypesPackage.TCLASS__DECLARED_STATIC_POLYFILL:setDeclaredStaticPolyfill(DECLARED_STATIC_POLYFILL_EDEFAULT);return;case TypesPackage.TCLASS__OBSERVABLE:setObservable(OBSERVABLE_EDEFAULT);return;case TypesPackage.TCLASS__SUPER_CLASS_REF:setSuperClassRef((ParameterizedTypeRef)null);return;case TypesPackage.TCLASS__IMPLEMENTED_INTERFACE_REFS:getImplementedInterfaceRefs().clear();return;}super.eUnset(featureID);}  }
class C{  @Nonnull public T_ENTITY saveOrUpdate(@Nonnull T_ENTITY entity) throws HibernateException {  EntityManager em=getEntityManager();  try {    begin();    if (entity.getId() == 0) {      em.persist(entity);    } else {      entity=em.merge(entity);    }    commit();  } catch (  ConstraintViolationException e) {    for (    @SuppressWarnings("rawtypes") ConstraintViolation v : e.getConstraintViolations()) {      LOG.warn("ConstraintViolation for " + entityClass.getSimpleName() + " "+ "[property: "+ v.getPropertyPath().iterator().next().getName()+ "]"+ " "+ "[message: "+ v.getMessage()+ "]"+ " "+ "[invalid value: "+ v.getInvalidValue()+ "]");    }    throw e;  }catch (  PersistenceException e) {    if (e.getCause() instanceof ConstraintViolationException) {      ConstraintViolationException cve=(ConstraintViolationException)e.getCause();      for (      @SuppressWarnings("rawtypes") ConstraintViolation v : cve.getConstraintViolations()) {        LOG.warn("ConstraintViolation for " + entityClass.getSimpleName() + " "+ "[property: "+ v.getPropertyPath().iterator().next().getName()+ "]"+ " "+ "[message: "+ v.getMessage()+ "]"+ " "+ "[invalid value: "+ v.getInvalidValue()+ "]");      }      throw cve;    }    throw e;  }catch (  Exception e) {    rollback();    e.printStackTrace();    throw new RuntimeException(e);  } finally {    cleanup();  }  return entity;}  }
class C{  private void unlink(long qAddr){  assert head != 0 && tail != 0;  long prev=0;  long next=next(qAddr);  if (head == qAddr)   head=next; else {    prev=previous(qAddr);    assert prev != 0 : "Invalid previous link for stripe: " + order;    next(prev,next);  }  if (next != 0)   previous(next,prev); else {    assert qAddr == tail;    tail=prev;  }  mem.releaseSystem(qAddr,NODE);  size--;  assert head != 0 || (tail == 0 && size == 0);}  }
class C{  private int indexOfAnyOf(final char[] c,final int n,final int from,final int bloomFilter){  final int m=length();  if (n == 0)   return -1;  final char[] a=array;  int i=(from < 0 ? 0 : from) - 1, k;  while (++i < m) {    if ((bloomFilter & (1 << (a[i] & 0x1F))) != 0) {      k=n;      while (k-- != 0)       if (a[i] == c[k])       return i;    }  }  return -1;}  }
class C{  public int hashCode(){  return map.hashCode() + getUnparseableExtensions().hashCode();}  }
class C{  public ServerOperationException(Throwable cause){  super(getServerMessage(cause),cause);}  }
class C{  protected tuple match_bitap(String text,String pattern,int loc){  assert (Match_MaxBits == 0 || pattern.length() <= Match_MaxBits) : "Pattern too long for this application.";  double best_score=1;  Map<Character,Integer> s=match_alphabet(pattern);  double score_threshold=Match_Threshold;  int best_loc=text.indexOf(pattern,loc);  if (best_loc != -1) {    score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);    best_loc=text.lastIndexOf(pattern,loc + pattern.length());    if (best_loc != -1) {      score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);    }  }  int matchmask=1 << (pattern.length() - 1);  best_loc=-1;  int bin_min, bin_mid;  int bin_max=pattern.length() + text.length();  int[] last_rd=new int[0];  for (int d=0; d < pattern.length(); d++) {    bin_min=0;    bin_mid=bin_max;    while (bin_min < bin_mid) {      if (match_bitapScore(d,loc + bin_mid,loc,pattern) <= score_threshold) {        bin_min=bin_mid;      } else {        bin_max=bin_mid;      }      bin_mid=(bin_max - bin_min) / 2 + bin_min;    }    bin_max=bin_mid;    int start=Math.max(1,loc - bin_mid + 1);    int finish=Math.min(loc + bin_mid,text.length()) + pattern.length();    int[] rd=new int[finish + 2];    rd[finish + 1]=(1 << d) - 1;    for (int j=finish; j >= start; j--) {      int charMatch;      if (text.length() <= j - 1 || !s.containsKey(text.charAt(j - 1))) {        charMatch=0;      } else {        charMatch=s.get(text.charAt(j - 1));      }      if (d == 0) {        rd[j]=((rd[j + 1] << 1) | 1) & charMatch;      } else {        rd[j]=(((rd[j + 1] << 1) | 1) & charMatch) | (((last_rd[j + 1] | last_rd[j]) << 1) | 1) | last_rd[j + 1];      }      if ((rd[j] & matchmask) != 0) {        double score=match_bitapScore(d,j - 1,loc,pattern);        if (score <= score_threshold) {          score_threshold=score;          best_loc=j - 1;          best_score=score;          if (best_loc > loc) {            start=Math.max(1,2 * loc - best_loc);          } else {            break;          }        }      }    }    if (match_bitapScore(d + 1,loc,loc,pattern) > score_threshold) {      break;    }    last_rd=rd;  }  return x.tuple(best_loc,best_score).name("location","score");}  }
class C{  private void addToken(int tokenType,boolean link){  int so=zzStartRead + offsetShift;  super.addToken(zzBuffer,zzStartRead,zzMarkedPos - 1,tokenType,so,link);  zzStartRead=zzMarkedPos;}  }
class C{  protected InfoModelMappingModelImpl(){  super();}  }
class C{  public static void discoverExtensions(){  final ClassLoader systemClassLoader=ClassLoader.getSystemClassLoader();  ClassLoader currentContextClassLoader=Thread.currentThread().getContextClassLoader();  loadExtensions(systemClassLoader);  for (  final ClassLoader ncl : NarClassLoaders.getExtensionClassLoaders()) {    Thread.currentThread().setContextClassLoader(ncl);    loadExtensions(ncl);  }  if (currentContextClassLoader != null) {    Thread.currentThread().setContextClassLoader(currentContextClassLoader);  }}  }
class C{  private ExcludeRule addRequested(){  InputDialog inputDialog=new InputDialog(getManagedForm().getForm().getShell(),"New Exclude Rule","Enter class name or pattern:","",new FqnWildcardValidator(false,false));  if (inputDialog.open() == Window.OK) {    ExcludeRule excludeRule=new ExcludeRule();    excludeRule.setClassName(inputDialog.getValue());    return excludeRule;  }  return null;}  }
class C{  public void subjectType(SecuritySubjectType subjType){  this.subjType=subjType;}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof SerializableLocation)) {    System.err.println("Not an instance of SerializableLocation.");    return false;  } else {    SerializableLocation sl=(SerializableLocation)o;    return approxEqual(latitude,sl.latitude) && approxEqual(longitude,sl.longitude) && approxEqual(accuracy,sl.accuracy)&& approxEqual(altitude,sl.altitude)&& approxEqual(bearing,sl.bearing)&& provider.equals(sl.provider)&& approxEqual(speed,sl.speed)&& this.time == sl.time && this.hasAccuracy == sl.hasAccuracy && this.hasAltitude == sl.hasAltitude && this.hasBearing == sl.hasBearing && this.hasSpeed == sl.hasSpeed;  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobImpressionsSupported);}  }
class C{  public boolean nextContact(){  return nextElement(RDE_CONTACT_URI,"contact");}  }
class C{  public static final String mostCommonCombination(Instances D,int L){  HashMap<String,Integer> hm=new HashMap<String,Integer>(D.numInstances());  double max_v=0.0;  int max_i=0;  for (int i=0; i < D.numInstances(); i++) {    String y=MLUtils.toBitString(D.instance(i),L);    Integer v=hm.get(y);    if (v == null) {      hm.put(y,0);    } else {      if (v > max_v) {        max_v=v;        max_i=i;      }      hm.put(y,v + 1);    }  }  return MLUtils.toBitString(D.instance(max_i),L);}  }
class C{  public void writeDict(PrintWriter fout) throws IOException {  Iterator it=null;  int count=0;  for (it=dict.keySet().iterator(); it.hasNext(); ) {    Integer cpInt=(Integer)it.next();    Element elem=(Element)dict.get(cpInt);    if (elem.chosen == 1) {      count++;    }  }  fout.println(Integer.toString(count));  for (it=dict.keySet().iterator(); it.hasNext(); ) {    Integer cpInt=(Integer)it.next();    Element elem=(Element)dict.get(cpInt);    if (elem.chosen == 0) {      continue;    }    fout.print(cpInt.toString() + ":" + Integer.toString(elem.count));    for (Iterator lbIt=elem.lbCntFidxes.keySet().iterator(); lbIt.hasNext(); ) {      Integer labelInt=(Integer)lbIt.next();      CountFIdx cntFIdx=(CountFIdx)elem.lbCntFidxes.get(labelInt);      if (cntFIdx.fidx < 0) {        continue;      }      fout.print(" " + labelInt.toString() + ":"+ Integer.toString(cntFIdx.count)+ ":"+ Integer.toString(cntFIdx.fidx));    }    fout.println();  }  fout.println(Option.modelSeparator);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public MDRecord(Name name,int dclass,long ttl,Name mailAgent){  super(name,Type.MD,dclass,ttl,mailAgent,"mail agent");}  }
class C{  public void traverseSubgraphRightToLeft(){  int currentEdgeArrayIndex=0;  for (int i=0; i < numLeftNodesAdded; i++) {    long leftNode=subgraphLeftNodes[i];    int degree=subgraphLeftNodeDegree[i];    double leftNodeWeight=currentLeftNodes.get(leftNode);    for (int j=0; j < degree; j++) {      long rightNode=subgraphEdgesArray[currentEdgeArrayIndex++];      leftNodeWeight+=visitedRightNodes.get(rightNode).getWeight() * subgraphRightNodeDegreeReciprocal.get(rightNode);    }    currentLeftNodes.put(leftNode,(int)Math.ceil(leftNodeWeight));  }  salsaStats.addToNumRHSVisits(currentEdgeArrayIndex);}  }
class C{  public TextComponentPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(AbstractRegionPainter.PaintContext.CacheMode.FIXED_SIZES);  type=(state == Which.BACKGROUND_DISABLED || state == Which.BACKGROUND_SOLID_DISABLED || state == Which.BORDER_DISABLED) ? CommonControlState.DISABLED : CommonControlState.ENABLED;  focused=(state == Which.BORDER_FOCUSED);}  }
class C{  public void clearBindings(){  if (mBindArgs != null) {    Arrays.fill(mBindArgs,null);  }}  }
class C{  @FXML public void newFingerprint(){  if (this.notSaved) {    Alert alert=new Alert(Alert.AlertType.CONFIRMATION);    alert.setTitle("WARNING");    alert.setHeaderText("You are about to create a new Fingerprint, the fingerprint you are\ncurrently viewing will be closed and any unsaved changed will be lost.");    alert.setContentText("Do you wish to proceed?");    Optional<ButtonType> result=alert.showAndWait();    if (result.get() == ButtonType.OK) {      clear();      createNewPayloadTab();      setSaved();    }  } else {    clear();    createNewPayloadTab();    setSaved();  }}  }
class C{  public ThreadLocal(){}  }
class C{  public static IStatus validateTypeVariableName(String name,String sourceLevel,String complianceLevel){  return validateIdentifier(name,sourceLevel,complianceLevel);}  }
class C{  double orderStatistics(double[] array,int kth,MersenneTwisterFast rng){  return randomizedSelect(array,0,array.length - 1,kth,rng);}  }
class C{  protected void checkCircuitFrame(OBlock block){  if (block != null) {    java.util.List<Positionable> group=_editor.getSelectionGroup();    setIconGroup(block,group);    if (!iconsConverted(block)) {      queryConvertIcons(block);    }  }  closeCircuitFrame();}  }
class C{  public static ZonedDateTime adjustDateTimeToMarketTimeZone(ZonedDateTime dateTime){  return dateTime.withZoneSameInstant(TimeZone.getDefault().toZoneId());}  }
class C{  public static double[] variances(Relation<? extends NumberVector> database,NumberVector centroid,DBIDs ids){  final int size=ids.size();  double[] variances=new double[centroid.getDimensionality()];  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    NumberVector o=database.get(iter);    for (int d=0; d < centroid.getDimensionality(); d++) {      final double diff=o.doubleValue(d) - centroid.doubleValue(d);      variances[d]+=diff * diff / size;    }  }  return variances;}  }
class C{  public static String formatDistanceBetween(LatLng point1,LatLng point2){  if (point1 == null || point2 == null) {    return null;  }  NumberFormat numberFormat=NumberFormat.getNumberInstance();  double distance=Math.round(SphericalUtil.computeDistanceBetween(point1,point2));  if (distance >= 1000) {    numberFormat.setMaximumFractionDigits(1);    return numberFormat.format(distance / 1000) + DISTANCE_KM_POSTFIX;  }  return numberFormat.format(distance) + DISTANCE_M_POSTFIX;}  }
class C{  public Tasks<VolumeRestRep> startContinuousCopies(URI id,CopiesParam input){  TaskList tasks=client.post(TaskList.class,input,getContinuousCopiesUrl() + "/start",id);  return new Tasks<VolumeRestRep>(client,tasks.getTaskList(),BlockMirrorRestRep.class);}  }
class C{  @VisibleForTesting protected boolean alertColumnNumberChange(boolean sourceIsMapped,int number,int originalNumber){  if (sourceIsMapped) {    if (Integer.compare(originalNumber,number) != 0) {      addActionWarning(getText("manage.source.numColumns.changed",new String[]{source.getName(),String.valueOf(originalNumber),String.valueOf(number)}));      return true;    }  }  return false;}  }
class C{  public boolean isAbsolute(){  return absolute;}  }
class C{  @Override public void inputChanged(final Viewer viewer,final Object oldInput,final Object newInput){}  }
class C{  public boolean isAsync(){  return async;}  }
class C{  public void startDrawShadowTexture(){  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,mFBOIds[0]);  GLES20.glCullFace(GLES20.GL_FRONT);  GLES20.glGetBooleanv(GLES20.GL_COLOR_WRITEMASK,mCachedColorMask,0);  GLES20.glColorMask(false,false,false,false);  GLES20.glGetBooleanv(GLES20.GL_DEPTH_WRITEMASK,mCachedDepthMask,0);  GLES20.glDepthMask(true);}  }
class C{  public static void load(String url){  String driver=getDriver(url);  if (driver != null) {    loadUserClass(driver);  }}  }
class C{  public static long hash64(final byte[] data,int length){  return hash64(data,length,0xe17a1465);}  }
class C{  public static BufferedImage toBufferedImage(Image image){  if (image instanceof BufferedImage) {    return (BufferedImage)image;  }  image=new ImageIcon(image).getImage();  boolean hasAlpha=hasAlpha(image);  BufferedImage bimage=null;  GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();  try {    int transparency=Transparency.OPAQUE;    if (hasAlpha) {      transparency=Transparency.TRANSLUCENT;    }    GraphicsDevice gs=ge.getDefaultScreenDevice();    GraphicsConfiguration gc=gs.getDefaultConfiguration();    bimage=gc.createCompatibleImage(image.getWidth(null),image.getHeight(null),transparency);  } catch (  HeadlessException e) {    bimage=null;  }  if (bimage == null) {    int type=BufferedImage.TYPE_INT_RGB;    if (hasAlpha) {      type=BufferedImage.TYPE_INT_ARGB;    }    bimage=new BufferedImage(image.getWidth(null),image.getHeight(null),type);  }  Graphics g=bimage.createGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return bimage;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddress;  String attrValue;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddress=(Element)elementList.item(2);  attrValue=testAddress.getAttribute("street");  assertEquals("attrValue","No",attrValue);}  }
class C{  protected void fireMenuKeyTyped(MenuKeyEvent event){  if (DEBUG) {    System.out.println("in JMenuItem.fireMenuKeyTyped for " + getText() + "  "+ KeyStroke.getKeyStrokeForEvent(event));  }  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuKeyListener.class) {      ((MenuKeyListener)listeners[i + 1]).menuKeyTyped(event);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Element create(String prefix,Document doc){  return new XBLOMShadowTreeElement(prefix,(AbstractDocument)doc);}  }
class C{  protected TMethodImpl(){  super();}  }
class C{  public static boolean isWanTypeThreadID(long tid){  return WanType.matches(tid);}  }
class C{  public static RegressionResult serializableInstance(){  return new RegressionResult(true,new String[0],10,new double[0],new double[0],new double[0],new double[0],0,0,0,null,null);}  }
class C{  private void handleJsonGetNotebookPath(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  String entryId;  String csrft;  try {    final JsonNodeHelper json=getJsonNode(requestAndResponse);    entryId=json.getString("entryId");    csrft=json.getString("csrft");  } catch (  final IOException e) {    returnJson400(requestAndResponse,servletText.errorJson());    return;  }  if (isTheCsrftWrong(requestAndResponse,csrft)) {    returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));    return;  }  if (!dbLogic.getIdGenerator().isIdWellFormed(entryId)) {    returnJson400(requestAndResponse,servletText.errorTargetIdInvalidFormat());    return;  }  try {    final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));    if (user == null) {      returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));      return;    }    if (user.getIsAccountClosed()) {      returnJson400(requestAndResponse,servletText.errorAccountIsClosed());    }    Entry entry=dbLogic.getEntryById(entryId);    if (entry == null) {      returnJson400(requestAndResponse,servletText.errorTargetNoteCouldNotBeFound());      return;    }    final StringBuilder result=new StringBuilder();    result.append("[");    boolean isFirst=true;    while (entry != null) {      if (!isFirst) {        result.append(",");      }      isFirst=false;      result.append(JsonBuilder.quote(entry.getId()));      entry=dbLogic.getEntryById(entry.getParentId());      if (entry != null && entry.isRoot()) {        entry=dbLogic.getEntryById(entry.getNotebookId());        result.append(",");        result.append(JsonBuilder.quote(entry.getId()));        break;      }    }    result.append("]");    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    logger.log(Level.INFO,"Exception",e);    returnJson500(requestAndResponse,servletText.errorInternalDatabase());  }}  }
class C{  public FullscreenParallaxPage(@LayoutRes int layoutResId){  this.layoutResId=layoutResId;}  }
class C{  private void assertExtendSignaturePossible() throws DSSException {  final SignatureLevel signatureLevel=params.getSignatureLevel();  if (XAdES_BASELINE_T.equals(signatureLevel) && (xadesSignature.hasLTProfile() || xadesSignature.hasLTAProfile())) {    final String exceptionMessage="Cannot extend signature. The signedData is already extended with [%s].";    throw new DSSException(String.format(exceptionMessage,"XAdES LT"));  }}  }
class C{  public String[] readNext() throws IOException {  String[] result=null;  do {    String nextLine=getNextLine();    if (!hasNext) {      return validateResult(result);    }    String[] r=parser.parseLineMulti(nextLine);    if (r.length > 0) {      if (result == null) {        result=r;      } else {        result=combineResultsFromMultipleReads(result,r);      }    }  } while (parser.isPending());  return validateResult(result);}  }
class C{  private void fireActionSync(ActionListener[] array,ActionEvent ev){  int alen=array.length;  for (int iter=0; iter < alen; iter++) {    if (ev == null || !ev.isConsumed()) {      array[iter].actionPerformed(ev);    }  }}  }
class C{  protected void updateTheEntry(VM vm1){  updateTheEntry(vm1,"C");}  }
class C{  public static void assertJDelete(String request,double delta,String... tests) throws Exception {  int queryStartPos=request.indexOf('?');  String query;  String path;  if (-1 == queryStartPos) {    query="";    path=request;  } else {    query=request.substring(queryStartPos + 1);    path=request.substring(0,queryStartPos);  }  query=setParam(query,"wt","json");  request=path + '?' + setParam(query,"indent","on");  String response;  boolean failed=true;  try {    response=restTestHarness.delete(request);    failed=false;  }  finally {    if (failed) {      log.error("REQUEST FAILED: " + request);    }  }  for (  String test : tests) {    if (null == test || 0 == test.length())     continue;    String testJSON=json(test);    try {      failed=true;      String err=JSONTestUtil.match(response,testJSON,delta);      failed=false;      if (err != null) {        log.error("query failed JSON validation. error=" + err + "\n expected ="+ testJSON+ "\n response = "+ response+ "\n request = "+ request+ "\n");        throw new RuntimeException(err);      }    }  finally {      if (failed) {        log.error("JSON query validation threw an exception." + "\n expected =" + testJSON + "\n response = "+ response+ "\n request = "+ request+ "\n");      }    }  }}  }
class C{  protected void storeUser(String username,String password,String uri) throws DataAccessException {  if (null == username || null == password) {    return;  }  String hashedSaltedPassword=Utilities.getSaltedPassword(username,uri,password);  Map<String,AttributeValue> item=new HashMap<String,AttributeValue>();  item.put(ATTRIBUTE_USERNAME,new AttributeValue().withS(username));  item.put(ATTRIBUTE_HASH_SALTED_PASSWORD,new AttributeValue().withS(hashedSaltedPassword));  item.put(ATTRIBUTE_ENABLED,new AttributeValue().withS("true"));  PutItemRequest putItemRequest=new PutItemRequest().withTableName(USER_TABLE).withItem(item);  try {    ddb.putItem(putItemRequest);  } catch (  AmazonClientException e) {    throw new DataAccessException("Failed to store user: " + username,e);  }}  }
class C{  public boolean showWindow(Class<?> windowClass){  return showWindow(getWindow(windowClass));}  }
class C{  public String name(){  return name;}  }
class C{  public void daubTrans(double s[]){  final int N=s.length;  int n;  for (n=N; n >= 4; n>>=1) {    transform(s,n);  }}  }
class C{  @Override public void onDone(){  mOverlay.remove(mGraphic);}  }
class C{  void trace(String fileName,String method,Object... params){  if (isTrace()) {    StringBuilder buff=new StringBuilder("    ");    buff.append(unwrap(fileName)).append(' ').append(method);    for (    Object s : params) {      buff.append(' ').append(s);    }    System.out.println(buff);  }}  }
class C{  public Evaluator(SwingGui debugGui){  super(new MyTableModel(debugGui));  tableModel=(MyTableModel)getModel();}  }
class C{  public char nextClean(){  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  public JPEGWriter(JComponent c){  super(c);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double z, z2, zMin;  int x, y, a, b, i;  double h=0;  int whichCell;  double infVal=9999999;  int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};  int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};  int[] Gx=new int[]{1,1,0,1,1,1,0,1};  int[] Gy=new int[]{0,1,1,1,0,1,1,1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster allocation=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    allocation.setPreferredPalette(image.getPreferredPalette());    WhiteboxRaster outputImage=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    outputImage.isTemporaryFile=true;    WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Rx.isTemporaryFile=true;    WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Ry.isTemporaryFile=true;    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != 0) {          outputImage.setValue(row,col,0);          allocation.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=outputImage.getValue(row,col);        if (z != 0) {          zMin=infVal;          whichCell=-1;          for (i=0; i <= 3; i++) {            x=col + dX[i];            y=row + dY[i];            z2=outputImage.getValue(y,x);            if (z2 != noData) {switch (i) {case 0:                h=2 * Rx.getValue(y,x) + 1;              break;case 1:            h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);          break;case 2:        h=2 * Ry.getValue(y,x) + 1;      break;case 3:    h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);  break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=outputImage.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=outputImage.getValue(y,x);if (z2 != noData) {switch (i) {case 5:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * (rows - 1 - row) / (rows - 1));updateProgress((int)progress);}for (row=0; row < rows; row++) {data=image.getRowValues(row);for (col=0; col < cols; col++) {if (data[col] == noData) {allocation.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}allocation.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");allocation.addMetadataEntry("Created on " + new Date());image.close();allocation.close();outputImage.close();Rx.close();Ry.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public int remainingCapacity(){  return maxSize - size();}  }
class C{  @Override public void onLogin(){  if (mPager.getAdapter().instantiateItem(mPager,mPager.getCurrentItem()).getClass().equals(EditProfileFragment.class)) {    EditProfileFragment editProfileFragment=(EditProfileFragment)mPager.getAdapter().instantiateItem(mPager,mPager.getCurrentItem());    if (editProfileFragment != null && editProfileFragment.isResumed()) {      editProfileFragment.onGoogleLogin();    }  }}  }
class C{  private List<CoS> fetchDetailsOfAllBlockCos() throws SOSFailure {  final String methodName="fetchDetailsOfAllBlockCos(): ";  log.trace(methodName + "Entry");  final String BLOCK_COS_DETAIL_URI="/block/vpools/%s";  List<CoS> blockCosIdList=new ArrayList<CoS>();  try {    for (    String cosId : _blockCosIdList) {      CoS.BlockCoS cos=_client.queryObject(String.format(BLOCK_COS_DETAIL_URI,cosId),CoS.BlockCoS.class);      if (cos.isInactive() == false && cos.getId() != null) {        blockCosIdList.add(cos);        log.trace(methodName + cos);      }    }    log.trace(methodName + "Exit returning cos list of size[" + blockCosIdList.size()+ "]");    return blockCosIdList;  } catch (  NoSuchAlgorithmException e) {    log.error(methodName + "NoSuchAlgorithmException occured",e);    throw new SOSFailure(e);  }catch (  UniformInterfaceException e) {    log.error(methodName + "UniformInterfaceException occured",e);    throw new SOSFailure(e);  }}  }
class C{  public static String encodeBytes(final byte[] source,final int off,final int len){  return Base64.encodeBytes(source,off,len,Base64.NO_OPTIONS);}  }
class C{  public void endVisit(ThrowStatement node){}  }
class C{  public final boolean isMandatory(){  return this.mandatory;}  }
class C{  private Element SetElementText(String xPathExpression,int currentNode) throws JDOMException {  String currentPath=getCurrentPath(xPathExpression,currentNode);  if (xPathExists(currentPath)) {    if (currentPath.equals(xPathExpression)) {      org.jdom.Element node=(org.jdom.Element)XPath.selectSingleNode(this.xmlDocument,xPathExpression);      return node;    } else {      return SetElementText(xPathExpression,currentNode + 1);    }  } else {    String childNode=getChildNode(currentPath);    String namespace=getCurrentNamespace(currentPath);    Element element;    if (namespace != null) {      Namespace sNS=Namespace.getNamespace(namespace,this.namespaces.get(namespace));      element=new Element(childNode,sNS);    } else {      element=new Element(childNode);    }    if (this.xmlDocument.hasRootElement()) {      Element node=(Element)XPath.selectSingleNode(this.xmlDocument,getParentPath(currentPath));      node.addContent(element);    } else {      if (this.xmlDocument.hasRootElement()) {        this.xmlDocument.detachRootElement();      }      this.xmlDocument.addContent(element);    }    if (currentPath.equals(xPathExpression)) {      return element;    } else {      return SetElementText(xPathExpression,currentNode + 1);    }  }}  }
class C{  static int addOrSubtract(int a,int b){  return a ^ b;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 14:49:42.865 -0500",hash_original_method="166508A5E98263F6BA2CE5E6C3C1F730",hash_generated_method="D3592D1127BC45FEC730AC24C77DA816") @DSVerified @DSBan(DSCat.PRIVATE_METHOD) public boolean isInRange(String address){  return isInRange(toInteger(address));}  }
class C{  public void logIndexMap(){  for (  int[] indexSet : mIndexMap) {    mLog.debug("Row:" + Arrays.toString(indexSet));  }}  }
class C{  public boolean isPresent(){  return value != null;}  }
class C{  public BigdataCoreVocabulary_v20151106(){  super();}  }
class C{  public DBVEntity findEntity(DBSEntity entity,boolean createNew){  DBSObject[] path=DBUtils.getObjectPath(entity,false);  if (path.length == 0) {    log.warn("Empty entity path");    return null;  }  if (path[0] != dataSourceContainer) {    log.warn("Entity's root must be datasource container '" + dataSourceContainer.getName() + "'");    return null;  }  DBVContainer container=this;  for (int i=1; i < path.length; i++) {    DBSObject item=path[i];    container=container.getContainer(item.getName(),createNew);    if (container == null) {      return null;    }  }  return container.getEntity(entity.getName(),createNew);}  }
class C{  public LineIntersection closestLineTo(Line3D l){  Vec3D p43=l.a.sub(l.b);  if (p43.isZeroVector()) {    return new LineIntersection(Type.NON_INTERSECTING);  }  Vec3D p21=b.sub(a);  if (p21.isZeroVector()) {    return new LineIntersection(Type.NON_INTERSECTING);  }  Vec3D p13=a.sub(l.a);  double d1343=p13.x * p43.x + p13.y * p43.y + p13.z * p43.z;  double d4321=p43.x * p21.x + p43.y * p21.y + p43.z * p21.z;  double d1321=p13.x * p21.x + p13.y * p21.y + p13.z * p21.z;  double d4343=p43.x * p43.x + p43.y * p43.y + p43.z * p43.z;  double d2121=p21.x * p21.x + p21.y * p21.y + p21.z * p21.z;  double denom=d2121 * d4343 - d4321 * d4321;  if (MathUtils.abs(denom) < MathUtils.EPS) {    return new LineIntersection(Type.NON_INTERSECTING);  }  double numer=d1343 * d4321 - d1321 * d4343;  float mua=(float)(numer / denom);  float mub=(float)((d1343 + d4321 * mua) / d4343);  Vec3D pa=a.add(p21.scaleSelf(mua));  Vec3D pb=l.a.add(p43.scaleSelf(mub));  return new LineIntersection(Type.INTERSECTING,new Line3D(pa,pb),mua,mub);}  }
class C{  public static byte[] rotateCCW(byte[] data,int imageWidth,int imageHeight){  int n=imageWidth * imageHeight;  byte[] yuv=new byte[n];  int i=n - 1;  for (int x=0; x < imageWidth; x++) {    for (int y=imageHeight - 1; y >= 0; y--) {      yuv[i]=data[y * imageWidth + x];      i--;    }  }  return yuv;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  return (f == null) ? "" : f.getAbsolutePath();}  }
class C{  public static void writeSharedPreference(Context context,String key,long value){  try {    SharedPreferences settings=getSharedPreferenceManager(context);    SharedPreferences.Editor editor=settings.edit();    editor.putLong(key,value);    editor.apply();  } catch (  Exception e) {  }}  }
class C{  public <T extends Mediator>T retrieveMediator(String mediatorName){  return (T)mediatorMap.get(mediatorName);}  }
class C{  protected Benchmark(){  throw new RuntimeException("Non instantiable");}  }
class C{  public void registerNetworkStateListener(){  mNetworkCnx.registerNetworkStateListener();}  }
class C{  public int size(){  return vector == DEFAULT_DATA_VECTOR ? 0 : 1;}  }
class C{  protected static void createFile(Path path,byte[] sourceData) throws IOException {  if (sFileSystem != null) {    FSDataOutputStream out=sFileSystem.create(path);    out.write(sourceData,0,sourceData.length);    out.close();  }}  }
class C{  public HttpRequestExecutor(){  super();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected void onDetach(){  super.onDetach();}  }
class C{  public boolean isThreading(){  return isThreading;}  }
class C{  public IdentityStoreSchemaMapping buildSchemaMapping(){  return new IdentityStoreSchemaMapping(this._storeObjects);}  }
class C{  private String performActions(){  String cancelMessage=null;  for (  Action action : actions) {    org.eclipse.che.ide.api.action.Action ideAction=actionManager.getAction(action.getId());    if (ideAction == null) {      continue;    }    Presentation presentation=new PresentationFactory().getPresentation(ideAction);    AppCloseActionEvent e=new AppCloseActionEvent("",presentation,actionManager,0,action.getProperties());    ideAction.update(e);    if (!presentation.isEnabled() || !presentation.isVisible()) {      continue;    }    ideAction.actionPerformed(e);    if (e.getCancelMessage() != null) {      cancelMessage=e.getCancelMessage();    }  }  return cancelMessage;}  }
class C{  private void checkStatus(final State current){  Operation finished=this.buildChildQueryOperation(TaskState.TaskStage.FINISHED);  Operation failedOrCanceled=this.buildChildQueryOperation(TaskState.TaskStage.FAILED,TaskState.TaskStage.CANCELLED);  OperationJoin.JoinedCompletionHandler handler=null;  OperationJoin.create(finished,failedOrCanceled).setCompletion(handler).sendWith(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:47.386 -0500",hash_original_method="5F5F86625FDBBD98601D769A68A08C9E",hash_generated_method="08C79EF4DE23BE7E2F54C7FF5009B2AE") public static void attach(Activity activity){  FragmentManager manager=activity.getFragmentManager();  if (manager.findFragmentByTag(FRAGMENT_TAG) == null) {    manager.beginTransaction().add(new NfcFragment(),FRAGMENT_TAG).commit();  }}  }
class C{  protected Size2D drawVertical(Graphics2D g2,Rectangle2D chartArea){  double startX;  double topSpace=0.0;  double bottomSpace=0.0;  double leftSpace=0.0;  double rightSpace=0.0;  double w=getWidth();  double h=getHeight();  RectangleInsets padding=getPadding();  if (padding != null) {    topSpace=padding.calculateTopOutset(h);    bottomSpace=padding.calculateBottomOutset(h);    leftSpace=padding.calculateLeftOutset(w);    rightSpace=padding.calculateRightOutset(w);  }  if (getPosition() == RectangleEdge.LEFT) {    startX=chartArea.getX() + leftSpace;  } else {    startX=chartArea.getMaxX() - rightSpace - w;  }  VerticalAlignment alignment=getVerticalAlignment();  double startY=0.0;  if (alignment == VerticalAlignment.CENTER) {    startY=chartArea.getMinY() + topSpace + chartArea.getHeight() / 2.0 - h / 2.0;  } else   if (alignment == VerticalAlignment.TOP) {    startY=chartArea.getMinY() + topSpace;  } else   if (alignment == VerticalAlignment.BOTTOM) {    startY=chartArea.getMaxY() - bottomSpace - h;  }  g2.drawImage(this.image,(int)startX,(int)startY,(int)w,(int)h,null);  return new Size2D(chartArea.getWidth() + leftSpace + rightSpace,h + topSpace + bottomSpace);}  }
class C{  private void fillNodesInContext(SiteNode rootNode,List<SiteNode> nodesList){  @SuppressWarnings("unchecked") Enumeration<SiteNode> en=rootNode.children();  while (en.hasMoreElements()) {    SiteNode sn=en.nextElement();    if (isInContext(sn)) {      nodesList.add(sn);    }    fillNodesInContext(sn,nodesList);  }}  }
class C{  public void internalEntityDecl(String name,String value) throws SAXException {}  }
class C{  public int size(){  int result=0, tmp;  for (Node node=head; node != null; node=node.sibling) {    if (node.order > 30) {      throw new ArithmeticException("The number of elements cannot be evaluated, but the priority queue is still valid.");    }    tmp=1 << node.order;    result|=tmp;  }  return result;}  }
class C{  private StyledString appendUnboundedParameterList(StyledString buffer,CompletionProposal methodProposal){  char[] signature=SignatureUtil.fix83600(methodProposal.getSignature());  char[][] parameterNames=methodProposal.findParameterNames();  char[][] parameterTypes=Signature.getParameterTypes(signature);  for (int i=0; i < parameterTypes.length; i++)   parameterTypes[i]=createTypeDisplayName(SignatureUtil.getLowerBound(parameterTypes[i]));  if (Flags.isVarargs(methodProposal.getFlags())) {    int index=parameterTypes.length - 1;    parameterTypes[index]=convertToVararg(parameterTypes[index]);  }  return appendParameterSignature(buffer,parameterTypes,parameterNames);}  }
class C{  public final Attribute copy(String newName){  Attribute copy=new Attribute(newName);  copy.m_Index=m_Index;  copy.m_Type=m_Type;  copy.m_AttributeInfo=m_AttributeInfo;  copy.m_AttributeMetaInfo=m_AttributeMetaInfo;  return copy;}  }
class C{  @Override public String toString(){  return charSequence.toString();}  }
class C{  public Document read(Reader reader,String systemID) throws DocumentException, IOException, XmlPullParserException {  Document document=read(reader);  document.setName(systemID);  return document;}  }
class C{  private void fillInBaseTimelineExceptions(SegmentedTimeline timeline,String[] exceptionString,Format fmt) throws ParseException {  SegmentedTimeline baseTimeline=timeline.getBaseTimeline();  for (int i=0; i < exceptionString.length; i++) {    long e;    if (fmt instanceof NumberFormat) {      e=((NumberFormat)fmt).parse(exceptionString[i]).longValue();    } else {      e=timeline.getTime(((SimpleDateFormat)fmt).parse(exceptionString[i]));    }    timeline.addBaseTimelineException(e);    SegmentedTimeline.Segment segment1=baseTimeline.getSegment(e);    for (SegmentedTimeline.Segment segment2=timeline.getSegment(segment1.getSegmentStart()); segment2.getSegmentStart() <= segment1.getSegmentEnd(); segment2.inc()) {      if (!segment2.inExcludeSegments()) {        assertTrue(segment2.inExceptionSegments());      }    }  }}  }
class C{  public void testSimpleExchange() throws InterruptedException, ExecutionException, TimeoutException, ImmediateDownstreamReplicationException {  final long timeout=5000;{    final ByteBuffer tst1=getRandomData(50);    final HAMessageWrapper msg1=newHAWriteMessage(50,tst1);    final ByteBuffer rcv=ByteBuffer.allocate(2000);    final Future<Void> futRec=receiveService.receiveData(msg1,rcv);    final Future<Void> futSnd=sendService.send(tst1,msg1.getMarker());    futSnd.get(timeout,TimeUnit.MILLISECONDS);    futRec.get(timeout,TimeUnit.MILLISECONDS);    assertEquals(tst1,rcv);  }{    final ByteBuffer tst2=getRandomData(100);    final HAMessageWrapper msg2=newHAWriteMessage(100,tst2);    final ByteBuffer rcv2=ByteBuffer.allocate(2000);    final Future<Void> futSnd=sendService.send(tst2,msg2.getMarker());    final Future<Void> futRec=receiveService.receiveData(msg2,rcv2);    futSnd.get(timeout,TimeUnit.MILLISECONDS);    futRec.get(timeout,TimeUnit.MILLISECONDS);    assertEquals(tst2,rcv2);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_BEFORE_CODE_1__CODE_LANG_1:    getCodeLang_1().clear();  return;case UmplePackage.ANONYMOUS_BEFORE_CODE_1__CODE_LANGS_1:getCodeLangs_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void showCamera(View view){  Log.i(TAG,"Show camera button pressed. Checking permission.");  if (ActivityCompat.checkSelfPermission(this,Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {    requestCameraPermission();  } else {    Log.i(TAG,"CAMERA permission has already been granted. Displaying camera preview.");    showCameraPreview();  }}  }
class C{  @NotNull public static LanguageConsoleView createConsole(@NotNull final Module module,@NotNull final String consoleName,@Nullable final Pair<List<Command>,CommandExecutor> commandsAndDefaultExecutor){  final Project project=module.getProject();  final CommandConsole console=CommandConsole.createConsole(module,consoleName,commandsAndDefaultExecutor);  WindowWithActions.showConsoleWithProcess(console,console.getEditor().getComponent(),consoleName,project,null);  ArgumentHintLayer.attach(console);  return console;}  }
class C{  public GeoConvexPolygon(final PlanetModel planetModel,final List<GeoPoint> pointList,final BitSet internalEdgeFlags,final boolean returnEdgeInternal){  this(planetModel,pointList,null,internalEdgeFlags,returnEdgeInternal);}  }
class C{  public static String toString(URI uri,String encoding) throws IOException {  return toString(uri,Charsets.toCharset(encoding));}  }
class C{  public static <R>IFilter newInstance(final IElementFilter<R> test){  if (test == null)   return null;  return new ElementFilter<R>(test);}  }
class C{  public void addImage(final String imagePath) throws IOException {  DataRaster raster=this.openDataRaster(imagePath,null);  final BufferedImage image=this.getBufferedImage(raster);  if (null != raster && image != null) {    addImage(imagePath,image,raster.getSector());  } else {    String message=Logging.getMessage("generic.ImageReadFailed",imagePath);    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }}  }
class C{  public ImportCaReplyFromFileAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("ImportCaReplyFromFileAction.statusbar"));  putValue(NAME,res.getString("ImportCaReplyFromFileAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ImportCaReplyFromFileAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ImportCaReplyFromFileAction.image")))));}  }
class C{  public void createTables(Database database,boolean dropTables,StringBuilder ddl){  if (dropTables) {    dropTables(database,ddl);  }  for (int idx=0; idx < database.getTableCount(); idx++) {    Table table=database.getTable(idx);    writeTableComment(table,ddl);    createTable(table,ddl,false,false);  }  createExternalForeignKeys(database,ddl);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public IPreparedGraphQuery prepareGraphQuery(final String query,final UUID uuid) throws Exception {  return new GraphQuery(mgr.newQueryConnectOptions(sparqlEndpointURL,uuid,tx),uuid,query);}  }
class C{  public static String calculateFileMd5(final Path file){  return calculateFileDigest("MD5",file);}  }
class C{  public void startAutoScroll(int duration){  startAutoScroll(duration,0);}  }
class C{  public LinkedList<Diff> diff_main(String text1,String text2,boolean checklines){  long deadline;  if (Diff_Timeout <= 0) {    deadline=Long.MAX_VALUE;  } else {    deadline=System.currentTimeMillis() + (long)(Diff_Timeout * 1000);  }  return diff_main(text1,text2,checklines,deadline);}  }
class C{  private void signalAll(){  lock.lock();  try {    isDone=true;    done.signalAll();  }  finally {    lock.unlock();  }}  }
class C{  public static void validateSecurityGroupsFormat(List<String> securityGroups) throws InvalidSecurityGroupFormatException {  if (securityGroups != null) {    for (    String sg : securityGroups) {      if (StringUtils.isBlank(sg) || sg.split("\\\\").length != 2) {        throw new InvalidSecurityGroupFormatException("The security group format should match domain\\group");      }    }  }}  }
class C{  public final Iterator<String> schemesIterator(){  return mDataSchemes != null ? mDataSchemes.iterator() : null;}  }
class C{  public void stopTracking(){  if (!isTracking) {    return;  }  Session session=getSession();  if (session != null) {    session.removeCallback(callback);  }  broadcastManager.unregisterReceiver(receiver);  isTracking=false;}  }
class C{  @Override public boolean isRunning(){  for (  Node node : mNodes) {    if (node.animation.isRunning()) {      return true;    }  }  return false;}  }
class C{  public Zipper<A> removeNext() throws NoSuchElementException {  return new Zipper<>(front,back.tail(),position);}  }
class C{  private void initializeProperties() throws IllegalStateException {  for (  String parameter : parameterMap.keySet()) {    try {      String property=System.getProperty(parameter);      if (property == null) {        property=properties.getProperty(parameter);      }      if (property != null) {        setValue(parameter,property);      }    } catch (    Exception e) {      throw new IllegalStateException("Wrong parameter settings for '" + parameter + "': "+ e.getMessage());    }  }  if (POPULATION_LIMIT == PopulationLimit.STATEMENTS) {    if (MAX_LENGTH < POPULATION) {      MAX_LENGTH=POPULATION;    }  }}  }
class C{  public long cardinality(){switch (type) {case EMPTY:    return 0;case EXPLICIT:  return explicitStorage.size();case SPARSE:return (long)Math.ceil(sparseProbabilisticAlgorithmCardinality());case FULL:return (long)Math.ceil(fullProbabilisticAlgorithmCardinality());default :throw new RuntimeException("Unsupported HLL type " + type);}}  }
class C{  public void stopNotification(){  notificationManager.cancel(NotificationHelper.NOTIFICATION_ID_PLAYER);  podcastPlayerService.stopForeground(true);}  }
class C{  public static IProcessServiceIsa lookupProcessServiceIsa(){  return (IProcessServiceIsa)VeriniceContext.get(VeriniceContext.PROCESS_SERVICE_ISA);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  m_C_Project_ID=getRecord_ID();}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  protected ParameterList_Impl(){  super();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  double x, y;  double z;  int intensity;  byte classValue, numReturns, returnNum;  int a, n;  int progress;  int numPoints;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      long oneHundredthTotal=las.getNumPointRecords() / 100;      File file=new File(pointFiles[j].replace(".las",".txt"));      if (file.exists()) {        file.delete();      }      fw=new FileWriter(file,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      n=0;      progress=0;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (!point.isPointWithheld()) {          x=point.getX();          y=point.getY();          z=point.getZ();          intensity=point.getIntensity();          classValue=point.getClassification();          returnNum=point.getReturnNumber();          numReturns=point.getNumberOfReturns();          out.println((a + 1) + " " + x+ " "+ y+ " "+ z+ " "+ intensity+ " "+ classValue+ " "+ returnNum+ " "+ numReturns);          numPoints++;        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);        }      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void pop2(){  mv.visitInsn(Opcodes.POP2);}  }
class C{  public void expand(){  expand(true);}  }
class C{  public static void insertPush(int opcode){switch (opcode) {case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:    insertedPushInt0++;  break;case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:insertedPushInt1++;break;case Opcodes.IFNULL:case Opcodes.IFNONNULL:insertedPushIntRef++;break;case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:insertedPushIntNull++;break;default :}}  }
class C{  public LazyObjectMap(final ObjectProvider<? extends Value> provider,final ObjectMap<? extends Key,? extends Value> map){  super(map);  this.provider=provider;}  }
class C{  public boolean isCurrentVendor(){  Object oo=get_Value(COLUMNNAME_IsCurrentVendor);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void checkPermitted(GeneralName name) throws PKIXNameConstraintValidatorException {switch (name.getTagNo()) {case 1:    checkPermittedEmail(permittedSubtreesEmail,extractNameAsString(name));  break;case 2:checkPermittedDNS(permittedSubtreesDNS,DERIA5String.getInstance(name.getName()).getString());break;case 4:checkPermittedDN(ASN1Sequence.getInstance(name.getName().toASN1Primitive()));break;case 6:checkPermittedURI(permittedSubtreesURI,DERIA5String.getInstance(name.getName()).getString());break;case 7:byte[] ip=ASN1OctetString.getInstance(name.getName()).getOctets();checkPermittedIP(permittedSubtreesIP,ip);}}  }
class C{  public long ramBytesUsed(){  if (memsz != 0)   return memsz;  long sz=8 * 8 + 32;  if (index != null)   sz+=index.length * 4;  if (tnums != null) {    for (    byte[] arr : tnums)     if (arr != null)     sz+=arr.length;  }  memsz=sz;  return sz;}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof StatePair) {    StatePair p=(StatePair)obj;    return p.s1 == s1 && p.s2 == s2;  } else   return false;}  }
class C{  public boolean validate(Class type,InputStream source,boolean strict) throws Exception {  return validate(type,NodeBuilder.read(source),strict);}  }
class C{  public GamlAdapterFactory(){  if (modelPackage == null) {    modelPackage=GamlPackage.eINSTANCE;  }}  }
class C{  public static String sentenceLevelToCorpusLevel(String scoreMetricStr){  if (scoreMetricStr.equals("bleu-smooth")) {    return "bleu";  } else   if (scoreMetricStr.equals("bleu-smooth-unscaled")) {    return "bleu";  } else   if (scoreMetricStr.equals("bleu-nakov")) {    return "bleu";  } else   if (scoreMetricStr.equals("bleu-nakov-unscaled")) {    return "bleu";  } else   if (scoreMetricStr.equals("bleu-chiang")) {    return "bleu";  } else   if (scoreMetricStr.equals("bleu-cherry")) {    return "bleu";  } else   if (scoreMetricStr.equals("ter") || scoreMetricStr.equals("tergain")) {    return "ter";  } else   if (scoreMetricStr.equals("numPredictedWords")) {    return scoreMetricStr;  } else   if (scoreMetricStr.equals("nextPredictedWord")) {    return scoreMetricStr;  } else   if (scoreMetricStr.equals("bleu-prefix")) {    return scoreMetricStr;  } else   if (scoreMetricStr.equals("bleup-nextw/2")) {    return scoreMetricStr;  } else   if (scoreMetricStr.equals("100bleup-nextw/2")) {    return scoreMetricStr;  } else   if (scoreMetricStr.equals("2bleu-ter") || scoreMetricStr.equals("2bleun-ter")) {    return scoreMetricStr;  } else   if (scoreMetricStr.equals("bleu-ter") || scoreMetricStr.equals("bleun-ter")) {    return "bleu-ter";  } else   if (scoreMetricStr.equals("bleu-2ter") || scoreMetricStr.equals("bleun-2ter")) {    return "bleu-2ter";  } else   if (scoreMetricStr.equals("bleun-ter/2") || scoreMetricStr.equals("bleu-ter/2")) {    return "bleu-ter/2";  } else   if (scoreMetricStr.equals("bleu-ter-len/3")) {    return "bleu-ter/2";  } else   if (scoreMetricStr.equals("bleunX2ter")) {    throw new UnsupportedOperationException("Unsupported loss function: " + scoreMetricStr);  } else   if (scoreMetricStr.equals("bleunXter")) {    throw new UnsupportedOperationException("Unsupported loss function: " + scoreMetricStr);  } else   if (scoreMetricStr.equals("bleun-2fastter")) {    return "bleu-2ter";  } else {    String[] s=matchLinearCombMetricPattern(scoreMetricStr);    if (s != null) {      return "bleu-ter/2";    } else {      throw new UnsupportedOperationException("Unsupported loss function: " + scoreMetricStr);    }  }}  }
class C{  public void apply(Tour tour){  DistanceTable distanceTable=instance.getDistanceTable();  boolean modified=true;  if (tour.size() < 4) {    return;  }  while (modified) {    modified=false;    for (int i=0; i < tour.size(); i++) {      for (int j=i + 2; j < tour.size(); j++) {        double d1=distanceTable.getDistanceBetween(tour.get(i),tour.get(i + 1)) + distanceTable.getDistanceBetween(tour.get(j),tour.get(j + 1));        double d2=distanceTable.getDistanceBetween(tour.get(i),tour.get(j)) + distanceTable.getDistanceBetween(tour.get(i + 1),tour.get(j + 1));        if (d2 < d1) {          tour.reverse(i + 1,j);          modified=true;        }      }    }  }}  }
class C{  public V put(K key,V value){  processQueue();  SoftValue<V,K> sv=new SoftValue<V,K>(value,key,queue);  SoftValue<V,K> previous=map.put(key,sv);  addToStrongReferences(value);  return previous != null ? previous.get() : null;}  }
class C{  public static void initFunctionTable(FunctionTable functions){  JNIFunctions=functions;  BootRecord.the_boot_record.JNIFunctions=functions;  if (VM.BuildForPower64ELF_ABI) {    linkageTriplets=LinkageTripletTable.allocate(functions.length());    for (int i=0; i < functions.length(); i++) {      linkageTriplets.set(i,AddressArray.create(3));    }  }}  }
class C{  public static void writeSingleByte(OutputStream out,int b) throws IOException {  byte[] buffer=new byte[1];  buffer[0]=(byte)(b & 0xff);  out.write(buffer);}  }
class C{  @Override public boolean isDistributive(){  return isBinary();}  }
class C{  public boolean decodeConstrainedEncoding(int startIndex){  if (decodeShortInteger(startIndex) == true) {    stringValue=null;    return true;  }  return decodeExtensionMedia(startIndex);}  }
class C{  public void run(){  ContributionBox cb=getDRM().getNewestContribution();  if (cb == null) {    System.err.println("No nodes to jump to");    try {      Thread.currentThread().sleep(1000);    } catch (    Exception e) {    }    suicide();  } else   if (jumps++ < 3) {    try {      Thread.currentThread().sleep(1000);    } catch (    Exception e) {    }    System.err.println("Jumping to " + cb.contributor);    base.dispatchAgent(name,cb.contributor);  } else {    System.err.println("Got tired of jumping around...");    try {      Thread.currentThread().sleep(1000);    } catch (    Exception e) {    }    suicide();  }}  }
class C{  @Deprecated private static EpisodeMatchingResult parseString(String stringToParse){  LOGGER.trace("parse String " + stringToParse);  EpisodeMatchingResult result=new EpisodeMatchingResult();  EpisodeMatchingResult resultFromParser=new EpisodeMatchingResult();  resultFromParser=parse(stringToParse,pattern1);  result=combineResults(result,resultFromParser);  resultFromParser=parse(stringToParse,pattern2);  result=combineResults(result,resultFromParser);  resultFromParser=parse(stringToParse,date1);  result=combineResults(result,resultFromParser);  resultFromParser=parse(stringToParse,date2);  result=combineResults(result,resultFromParser);  resultFromParser=parse(stringToParse,pattern5);  result=combineResults(result,resultFromParser);  resultFromParser=parse(stringToParse,pattern7);  result=combineResults(result,resultFromParser);  result.name=result.name.replaceAll("^[ .\\-_]+","").trim();  return result;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGenPackage.GENERATOR_MODEL__ENTRIES:    return getEntries();case SGenPackage.GENERATOR_MODEL__GENERATOR_ID:  return getGeneratorId();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static Boolean isTabletByScreen(){  if (!isInitialized)   return null;  boolean byScreen=screenSize >= Configuration.SCREENLAYOUT_SIZE_LARGE & screenInches >= 7 & (displayDensity == DisplayMetrics.DENSITY_DEFAULT || displayDensity == DisplayMetrics.DENSITY_HIGH || displayDensity == DisplayMetrics.DENSITY_MEDIUM || displayDensity == 213 || displayDensity == 320);  return byScreen;}  }
class C{  public void clear(){  closeAll();}  }
class C{  public void clear(){  entries.clear();}  }
class C{  public AxisLabelLayout(String group,AxisLayout layout){  this(group,layout,null,50);}  }
class C{  public AccountException(String msg){  super(msg);}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void stopWaitingFor(InternalDistributedMember mbr){  notRepliedYet.remove(mbr);  checkIfDone();}  }
class C{  public SHA384(){  super();}  }
class C{  protected void assertResultRowCount(int expected,ResultSet rs) throws SQLException {  int i=0;  while (rs.next()) {    i++;  }  assertEquals(expected,i);}  }
class C{  public static double[] readCommaDelimitedNumbers(String path){  if (WWUtil.isEmpty(path)) {    String message=Logging.getMessage("nullValue.PathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  ArrayList<Double> list=new ArrayList<Double>();  InputStream is=null;  BufferedReader reader=null;  try {    is=WWIO.openFileOrResourceStream(path,null);    reader=new BufferedReader(new InputStreamReader(is));    String line;    while ((line=reader.readLine()) != null) {      for (      String token : line.split(",")) {        Double d=WWUtil.convertStringToDouble(token);        list.add(d);      }    }  } catch (  Exception e) {    e.printStackTrace();  } finally {    WWIO.closeStream(is,path);    WWIO.closeStream(reader,path);  }  double[] array=new double[list.size()];  for (int i=0; i < list.size(); i++) {    array[i]=list.get(i);  }  return array;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("[");  buffer.append(getClass().getName());  buffer.append(": ");  buffer.append("]");  return buffer.toString();}  }
class C{  static int applyMaskPenaltyRule4(ByteMatrix matrix){  int numDarkCells=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    byte[] arrayY=array[y];    for (int x=0; x < width; x++) {      if (arrayY[x] == 1) {        numDarkCells++;      }    }  }  int numTotalCells=matrix.getHeight() * matrix.getWidth();  double darkRatio=(double)numDarkCells / numTotalCells;  int fivePercentVariances=(int)(Math.abs(darkRatio - 0.5) * 20.0);  return fivePercentVariances * N4;}  }
class C{  public CompositeReconcilingStrategy(IReconcilingStrategy... strategies){  fStrategies=strategies;}  }
class C{  @Override public void close(){  try {    super.close();    file.close();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void onServiceConnected(Messenger m){  mRemoteService=DownloaderServiceMarshaller.CreateProxy(m);  mRemoteService.onClientUpdated(mDownloaderClientStub.getMessenger());}  }
class C{  public static void invalidateSavedGame(){  GameState.invalidateSavedGame();}  }
class C{  public JpegReader(InputStream is) throws JpegProcessingException {  this(new JpegSegmentReader(is).readSegment(JpegSegmentReader.SEGMENT_APPD));}  }
class C{  public String linkTag(final String content){  final Matcher matcher=TAG_TITLE_PATTERN.matcher(content);  final StringBuffer contentBuilder=new StringBuffer();  try {    while (matcher.find()) {      final String linkTagTitle=StringUtils.substringBetween(matcher.group(),"[","]");      final Query query=new Query().addProjection(Tag.TAG_TITLE,String.class).setFilter(new PropertyFilter(Tag.TAG_TITLE,FilterOperator.EQUAL,linkTagTitle));      final JSONArray results=tagRepository.get(query).optJSONArray(Keys.RESULTS);      if (0 == results.length()) {        continue;      }      final JSONObject linkTag=results.optJSONObject(0);      final String linkTitle=linkTag.optString(Tag.TAG_TITLE);      final String link=" [" + linkTitle + "]("+ Latkes.getServePath()+ "/tags/"+ linkTitle+ ") ";      matcher.appendReplacement(contentBuilder,link);    }    matcher.appendTail(contentBuilder);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Generates tag link error",e);  }  return contentBuilder.toString();}  }
class C{  private boolean startRandomGame(){  AbstractLaunch[] pins=mCardAdapter.getLaunchers();  List<AbstractLaunch> games=new ArrayList<AbstractLaunch>(pins.length);  for (  AbstractLaunch pin : pins) {    if (pin.isGame()) {      if (pin.mState == AbstractLaunch.STATE_READY) {        games.add(pin);      }    }  }  if (games.size() > 0) {    Random r=new Random();    int index=r.nextInt(games.size());    AbstractLaunch game=games.get(index);    Log.d(TAG,String.format("Picked a game at random [%s]",game.mContentDescription));    game.onClick(game.getClickTarget());    MeasurementManager.recordCustomEvent(mMeasurement,getString(R.string.analytics_event_category_launch),getString(R.string.analytics_launch_action_voice),game.mContentDescription);    AnalyticsManager.sendEvent(R.string.analytics_event_category_launch,R.string.analytics_launch_action_voice,game.mContentDescription);    return true;  } else {    return false;  }}  }
class C{  public void startInsertAfter(String targetId) throws IOException {  startChangesIfNecessary();  inInsertAfter=true;  ResponseWriter writer=getWrapped();  writer.startElement("insert",null);  writer.startElement("after",null);  writer.writeAttribute("id",targetId,null);  writer.startCDATA();}  }
class C{  public void togglePasswordVisibility(){  setPasswordVisible(!passwordVisible);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value={"TLW_TWO_LOCK_WAIT","SBSC_USE_STRINGBUFFER_CONCATENATION","UW_UNCOND_WAIT"},justification="Two locks needed for synchronization here, this is OK; String + only used for debug, so inefficient String processing not really a problem; Unconditional Wait is to give external hardware, which doesn't necessarilly respond, time to process the data.") @Override synchronized protected void forwardToPort(AbstractMRMessage m,AbstractMRListener reply){  if (log.isDebugEnabled()) {    log.debug("forwardToPort message: [" + m + "]");  }  mLastSender=reply;  Runnable r=new XmtNotifier(m,mLastSender,this);  javax.swing.SwingUtilities.invokeLater(r);  byte msg[]=new byte[lengthOfByteStream(m)];  int offset=addHeaderToOutput(msg,m);  int len=m.getNumDataElements();  for (int i=0; i < len; i++) {    msg[i + offset]=(byte)m.getElement(i);  }  addTrailerToOutput(msg,len + offset,m);  try {    if (log.isDebugEnabled()) {      StringBuilder f=new StringBuilder("formatted message: ");      for (int i=0; i < msg.length; i++) {        f.append(Integer.toHexString(0xFF & msg[i]));        f.append(" ");      }      log.debug(new String(f));    }    while (m.getRetries() >= 0) {      if (portReadyToSend(controller)) {        byte data[]=((Z21Message)m).getBuffer();        DatagramPacket sendPacket=new DatagramPacket(data,((Z21Message)m).getLength(),host,port);        ((Z21Adapter)controller).getSocket().send(sendPacket);        log.debug("written, msg timeout: " + m.getTimeout() + " mSec");        break;      } else       if (m.getRetries() >= 0) {        if (log.isDebugEnabled()) {          StringBuilder b=new StringBuilder("Retry message: ");          b.append(m.toString());          b.append(" attempts remaining: ");          b.append(m.getRetries());          log.debug(new String(b));        }        m.setRetries(m.getRetries() - 1);        try {synchronized (xmtRunnable) {            xmtRunnable.wait(m.getTimeout());          }        } catch (        InterruptedException e) {          Thread.currentThread().interrupt();          log.error("retry wait interupted");        }      } else {        log.warn("sendMessage: port not ready for data sending: " + java.util.Arrays.toString(msg));      }    }  } catch (  Exception e) {    xmtException=true;    portWarn(e);  }}  }
class C{  protected void produceMail(Session session,Map<String,Object> props,int msgPrio,Mail mail) throws JMSException, MessagingException, IOException {  MessageProducer producer=null;  BlobMessage blobMessage=null;  boolean reuse=false;  try {    if (useBlob) {      ActiveMQSession amqSession=getAMQSession(session);      if (blobMessage == null) {        blobMessage=amqSession.createBlobMessage(new MimeMessageInputStream(mail.getMessage()));      }      props.put(JAMES_QUEUE_NAME,queueName);      Queue queue=session.createQueue(queueName);      producer=session.createProducer(queue);      for (      Map.Entry<String,Object> entry : props.entrySet()) {        blobMessage.setObjectProperty(entry.getKey(),entry.getValue());      }      producer.send(blobMessage,Message.DEFAULT_DELIVERY_MODE,msgPrio,Message.DEFAULT_TIME_TO_LIVE);    } else {      super.produceMail(session,props,msgPrio,mail);    }  } catch (  JMSException e) {    if (!reuse && blobMessage != null && blobMessage instanceof ActiveMQBlobMessage) {      ((ActiveMQBlobMessage)blobMessage).deleteFile();    }    throw e;  } finally {    try {      if (producer != null)       producer.close();    } catch (    JMSException e) {    }  }}  }
class C{  public Signer(String name){  super(name);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static boolean isTrueish(String value){  return value != null && ("true".equals(value) || "on".equals(value) || "yes".equals(value)|| "1".equals(value));}  }
class C{  @Override public void addToWorld(){  npc=npcs.get(QUEST_NPC);  fillQuestInfo("Kill Blordroughs","Despot Halb Errvl wants some Blordrough warriors killed.",true);  step_1();}  }
class C{  public double distance(DoubleVector v){  double deltaX=v.x - x, deltaY=v.y - y, deltaZ=v.z - z;  return Math.sqrt(deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ);}  }
class C{  public void testBug63526() throws Exception {  createTable("bug63526","(`{123}` INT UNSIGNED NOT NULL)","INNODB");}  }
class C{  public int indexOfRegister(int reg){  int sz=size();  for (int i=0; i < sz; i++) {    RegisterSpec rs;    rs=get(i);    if (rs.getReg() == reg) {      return i;    }  }  return -1;}  }
class C{  public static void updateBarsColor(int color,Window window,boolean applyDarken){  updateBarsColor(color,window,applyDarken,false,true);}  }
class C{  public boolean hasNext(){  return elementIter.hasNext();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public HeaderCard(String key,int value,String comment) throws HeaderCardException {  this(key,String.valueOf(value),comment,false,false);}  }
class C{  public static Encryptor create(final byte[] key,final byte[] iv){  try {    final IvParameterSpec ivParameterSpec=new IvParameterSpec(iv);    return new Encryptor(key,"AES/CBC/PKCS5Padding",ivParameterSpec);  } catch (  final GeneralSecurityException e) {    e.printStackTrace();    throw new RuntimeException("unsupported type of encryption: AES");  }}  }
class C{  public SGraphAdapterFactory(){  if (modelPackage == null) {    modelPackage=SGraphPackage.eINSTANCE;  }}  }
class C{  public Bag clear(){  locationAndIndexHash=buildMap(ANY_SIZE);  objectHash=buildMap(ANY_SIZE);  Bag retval=allObjects;  allObjects=new Bag();  return retval;}  }
class C{  private void forcedReconnect(){  socketAddressSupplier.reloadNodes();  reconnectToNearestProducer(disqueConnection,true);}  }
class C{  private SessionID startSession(String localUserId,String remoteUserId) throws Exception {  if (!remoteUserId.contains("/"))   throw new Exception("can't start session without JabberID: " + localUserId);  SessionID sessionId=getSessionId(localUserId,remoteUserId);  try {    mOtrEngine.startSession(sessionId);    return sessionId;  } catch (  OtrException e) {    OtrDebugLogger.log("startSession",e);    showError(sessionId,"Unable to start OTR session: " + e.getLocalizedMessage());  }  return null;}  }
class C{  public static void writeFormValuesToLdap(final PwmApplication pwmApplication,final PwmSession pwmSession,final ChaiUser theUser,final Map<FormConfiguration,String> formValues,final boolean expandMacros) throws ChaiUnavailableException, PwmOperationalException, PwmUnrecoverableException {  final Map<String,String> tempMap=new HashMap<>();  for (  final FormConfiguration formItem : formValues.keySet()) {    if (!formItem.isReadonly()) {      tempMap.put(formItem.getName(),formValues.get(formItem));    }  }  final MacroMachine macroMachine=pwmSession.getSessionManager().getMacroMachine(pwmApplication);  writeMapToLdap(theUser,tempMap,macroMachine,expandMacros);}  }
class C{  public static Page read(PageDataIndex index,Data data,int pageId){  PageDataLeaf p=new PageDataLeaf(index,pageId,data);  p.read();  return p;}  }
class C{  public BloomFilter(int elements,double falsePositiveRate,long randomNonce){  this(elements,falsePositiveRate,randomNonce,BloomUpdate.UPDATE_P2PUBKEY_ONLY);}  }
class C{  public void sendIndication(Indication indication,TransportAddress sendTo,TransportAddress sendThrough) throws StunException {  if (indication.getTransactionID() == null) {    indication.setTransactionID(TransactionID.createNewTransactionID().getBytes());  }  try {    getNetAccessManager().sendMessage(indication,sendThrough,sendTo);  } catch (  IllegalArgumentException iaex) {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"Failed to send STUN indication: " + indication,iaex);  }catch (  IOException ioex) {    throw new StunException(StunException.NETWORK_ERROR,"Failed to send STUN indication: " + indication,ioex);  }}  }
class C{  public static RegisterValues parse(final byte[] data) throws MessageParserException {  Preconditions.checkNotNull(data,"IE01299: Data argument can not be null");  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  try {    final DocumentBuilder builder=factory.newDocumentBuilder();    final Document document=builder.parse(new ByteArrayInputStream(data,0,data.length));    final NodeList nodes=document.getFirstChild().getChildNodes();    final List<ThreadRegisters> threads=new ArrayList<>();    for (int i=0; i < nodes.getLength(); ++i) {      final Node node=nodes.item(i);      if (node.getNodeName().equals("Thread")) {        threads.add(parseThreadNode(node));      } else {        throw new MessageParserException(String.format("IE01040: Invalid node '%s' found during register values message parsing",node.getNodeName()));      }    }    return new RegisterValues(threads);  } catch (  IOException|ParserConfigurationException|SAXException exception) {    CUtilityFunctions.logException(exception);    throw new MessageParserException(exception.getLocalizedMessage());  }}  }
class C{  public static boolean attemptObject(Object object,Offset offset,Object oldValue,Object newValue){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  private int decodeScalefactors(float sf[],int globalGain,IndividualChannelStream ics,int bandType[],int bandTypeRunEnd[]){  int idx=0;  int offset[]={globalGain,globalGain - 90,0};  boolean noiseFlag=true;  for (int g=0; g < ics.numWindowGroups; g++) {    for (int i=0; i < ics.maxSfb; ) {      int runEnd=bandTypeRunEnd[idx];      if (bandType[idx] == ZERO_BT) {        for (; i < runEnd; i++, idx++) {          sf[idx]=0f;        }      } else       if (bandType[idx] == INTENSITY_BT || bandType[idx] == INTENSITY_BT2) {        for (; i < runEnd; i++, idx++) {          offset[2]+=vlc_scalefactors.getVLC2(br,3) - 60;          int clippedOffset=Utilities.clip(offset[2],-155,100);          if (offset[2] != clippedOffset) {            log.warn(String.format("Clipped intensity stereo position (%d -> %d)",offset[2],clippedOffset));          }          sf[idx]=ff_aac_pow2sf_tab[-clippedOffset + POW_SF2_ZERO];        }      } else       if (bandType[idx] == NOISE_BT) {        for (; i < runEnd; i++, idx++) {          if (noiseFlag) {            offset[1]+=br.read(9) - 256;            noiseFlag=false;          } else {            offset[1]+=vlc_scalefactors.getVLC2(br,3) - 60;          }          int clippedOffset=Utilities.clip(offset[1],-100,155);          if (offset[1] != clippedOffset) {            log.warn(String.format("Clipped intensity stereo position (%d -> %d)",offset[1],clippedOffset));          }          sf[idx]=-ff_aac_pow2sf_tab[clippedOffset + POW_SF2_ZERO];        }      } else {        for (; i < runEnd; i++, idx++) {          offset[0]+=vlc_scalefactors.getVLC2(br,3) - 60;          if (offset[0] > 255) {            log.error(String.format("Scalefactor (%d) out of range",offset[0]));            return AAC_ERROR;          }          sf[idx]=-ff_aac_pow2sf_tab[offset[0] - 100 + POW_SF2_ZERO];        }      }    }  }  return 0;}  }
class C{  public static void stop(String name){  SystemProperties.set("ctl.stop",name);}  }
class C{  public boolean isAddBackToTaget(){  return addBackToTaget;}  }
class C{  public synchronized void addZoomListener(ZoomListener listener){  mZoomListeners.add(listener);}  }
class C{  public void addInvokeinterface(String classname,String name,String desc,int count){  addInvokeinterface(constPool.addClassInfo(classname),name,desc,count);}  }
class C{  public boolean handle(final HttpServerRequest request){  final String delegateName=getDelegateName(request.uri());  if (delegateName != null) {    if (request.method() == HttpMethod.PUT && request.uri().endsWith(DEFINITION_RESOURCE)) {      LOG.debug("registering delegate");      handleDelegateRegistration(request);      return true;    }    if (delegateMap.containsKey(delegateName)) {      if (request.uri().contains(EXECUTION_RESOURCE)) {        LOG.debug("executing delegate");        handleDelegateExecution(request);        return true;      }      if (request.method() == HttpMethod.DELETE) {        LOG.debug("unregister delegate");        handleDelegateUnregistration(request);        return true;      }    } else {      LOG.warn("No delegate with the name [{}] registered. DelegateHandler will not process the given request!",delegateName);    }  }  return false;}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  public void clearStack(){  if (!isValid()) {    throw new IllegalStateException("accessing top or bottom frame");  }  assert slotList.size() >= numLocals;  if (slotList.size() > numLocals) {    slotList.subList(numLocals,slotList.size()).clear();  }}  }
class C{  public Strategy(final PseudoRandom prng,final int examples,final int shrinkCycles,Reporter reporter){  this.prng=prng;  this.examples=examples;  this.shrinkCycles=shrinkCycles;  this.reporter=reporter;}  }
class C{  public SIPRequest createSIPRequest(RequestLine requestLine,boolean switchHeaders){  SIPRequest newRequest=new SIPRequest();  newRequest.requestLine=requestLine;  Iterator<SIPHeader> headerIterator=this.getHeaders();  while (headerIterator.hasNext()) {    SIPHeader nextHeader=(SIPHeader)headerIterator.next();    if (nextHeader instanceof CSeq) {      CSeq newCseq=(CSeq)nextHeader.clone();      nextHeader=newCseq;      try {        newCseq.setMethod(requestLine.getMethod());      } catch (      ParseException e) {      }    } else     if (nextHeader instanceof ViaList) {      Via via=(Via)(((ViaList)nextHeader).getFirst().clone());      via.removeParameter("branch");      nextHeader=via;    } else     if (nextHeader instanceof To) {      To to=(To)nextHeader;      if (switchHeaders) {        nextHeader=new From(to);        ((From)nextHeader).removeTag();      } else {        nextHeader=(SIPHeader)to.clone();        ((To)nextHeader).removeTag();      }    } else     if (nextHeader instanceof From) {      From from=(From)nextHeader;      if (switchHeaders) {        nextHeader=new To(from);        ((To)nextHeader).removeTag();      } else {        nextHeader=(SIPHeader)from.clone();        ((From)nextHeader).removeTag();      }    } else     if (nextHeader instanceof ContentLength) {      ContentLength cl=(ContentLength)nextHeader.clone();      try {        cl.setContentLength(0);      } catch (      InvalidArgumentException e) {      }      nextHeader=cl;    } else     if (!(nextHeader instanceof CallID) && !(nextHeader instanceof MaxForwards)) {      continue;    }    try {      newRequest.attachHeader(nextHeader,false);    } catch (    SIPDuplicateHeaderException e) {      e.printStackTrace();    }  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    newRequest.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return newRequest;}  }
class C{  public static <K extends Comparable<?>,V>ImmutableRangeMap<K,V> of(Range<K> range,V value){  return new ImmutableRangeMap<K,V>(ImmutableList.of(range),ImmutableList.of(value));}  }
class C{  public void inferenceAll(List data){  System.out.println("Starting inference ...");  long start, stop, elapsed;  start=System.currentTimeMillis();  for (int i=0; i < data.size(); i++) {    System.out.println("sequence " + Integer.toString(i + 1));    List seq=(List)data.get(i);    inference(seq);  }  stop=System.currentTimeMillis();  elapsed=stop - start;  System.out.println("Inference " + Integer.toString(data.size()) + " sequences completed!");  System.out.println("Inference time: " + Double.toString((double)elapsed / 1000) + " seconds");}  }
class C{  private static VkInstance createInstance(PointerBuffer requiredExtensions){  VkApplicationInfo appInfo=VkApplicationInfo.calloc().sType(VK_STRUCTURE_TYPE_APPLICATION_INFO).pApplicationName(memUTF8("GLFW Vulkan Demo")).pEngineName(memUTF8("")).apiVersion(VK_MAKE_VERSION(1,0,2));  PointerBuffer ppEnabledExtensionNames=memAllocPointer(requiredExtensions.remaining() + 1);  ppEnabledExtensionNames.put(requiredExtensions);  ByteBuffer VK_EXT_DEBUG_REPORT_EXTENSION=memUTF8(VK_EXT_DEBUG_REPORT_EXTENSION_NAME);  ppEnabledExtensionNames.put(VK_EXT_DEBUG_REPORT_EXTENSION);  ppEnabledExtensionNames.flip();  PointerBuffer ppEnabledLayerNames=memAllocPointer(layers.length);  for (int i=0; validation && i < layers.length; i++)   ppEnabledLayerNames.put(layers[i]);  ppEnabledLayerNames.flip();  VkInstanceCreateInfo pCreateInfo=VkInstanceCreateInfo.calloc().sType(VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO).pNext(NULL).pApplicationInfo(appInfo).ppEnabledExtensionNames(ppEnabledExtensionNames).ppEnabledLayerNames(ppEnabledLayerNames);  PointerBuffer pInstance=memAllocPointer(1);  int err=vkCreateInstance(pCreateInfo,null,pInstance);  long instance=pInstance.get(0);  memFree(pInstance);  if (err != VK_SUCCESS) {    throw new AssertionError("Failed to create VkInstance: " + translateVulkanResult(err));  }  VkInstance ret=new VkInstance(instance,pCreateInfo);  pCreateInfo.free();  memFree(ppEnabledLayerNames);  memFree(VK_EXT_DEBUG_REPORT_EXTENSION);  memFree(ppEnabledExtensionNames);  memFree(appInfo.pApplicationName());  memFree(appInfo.pEngineName());  appInfo.free();  return ret;}  }
class C{  public synchronized void close(){  mClosed=true;  notifyAll();}  }
class C{  public static File[] listFiles(String path){  File dir=new File(path);  if (!dir.exists()) {    dir.mkdir();  }  try {    return dir.listFiles();  } catch (  SecurityException ex) {    return null;  }}  }
class C{  public void characters(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  if (m_inCData) {    cdata(ch,start,length);    return;  }  String s=new String(ch,start,length);  Node childNode;  childNode=m_currentNode != null ? m_currentNode.getLastChild() : null;  if (childNode != null && childNode.getNodeType() == Node.TEXT_NODE) {    ((Text)childNode).appendData(s);  } else {    Text text=m_doc.createTextNode(s);    append(text);  }}  }
class C{  private int versionPart(String version,int part){  int parts[]=versionParts(version);  if (part < 0) {    return -1;  }  if (part >= parts.length) {    return -1;  }  return parts[part];}  }
class C{  public static void writeAll(OutputStream stream,Object[] o) throws Exception {  ObjectOutputStream oos;  int i;  if (!(stream instanceof BufferedOutputStream)) {    stream=new BufferedOutputStream(stream);  }  oos=new ObjectOutputStream(stream);  for (i=0; i < o.length; i++) {    oos.writeObject(o[i]);  }  oos.flush();  oos.close();}  }
class C{  public TableHeaderElement(String paramString,Element e){  super("th",paramString,e);}  }
class C{  public AnimationBuilder svgPath(String dAttributeOfPath){  return path(SvgPathParser.tryParsePath(dAttributeOfPath));}  }
class C{  public InputStream fetchStoragePoolInfo(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating VNX StorgePool Query");  InputStream iStream=null;  try {    Query query=new Query();    StoragePoolQueryParams spParams=new StoragePoolQueryParams();    query.getQueryRequestChoice().add(spParams);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(spParams,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for celerra system info",jaxbException.getCause());  }  return iStream;}  }
class C{  public boolean rejectIncomingConnect(BluetoothDevice device){  if (DBG)   log("rejectIncomingConnect");  if (mService != null) {    try {      return mService.rejectIncomingConnect(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  @Override public V remove(Object key){  if (key == null) {    return removeNullKey();  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      if (prev == null) {        tab[index]=e.next;      } else {        prev.next=e.next;      }      modCount++;      size--;      postRemove(e);      return e.value;    }  }  return null;}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher,BlockCipherPadding padding){  this(cipher,(cipher.getBlockSize() * 8) / 2,padding);}  }
class C{  public void encode(Integer i,ByteBuffer buffer) throws BufferOverflowException {  int value=i;  if (value >>> 7 == 0) {    buffer.put((byte)value);  } else   if (value >>> 14 == 0) {    buffer.put((byte)((value & 0x7F) | 0x80));    buffer.put((byte)(value >>> 7));  } else   if (value >>> 21 == 0) {    buffer.put((byte)((value & 0x7F) | 0x80));    buffer.put((byte)(value >>> 7 | 0x80));    buffer.put((byte)(value >>> 14));  } else   if (value >>> 28 == 0) {    buffer.put((byte)((value & 0x7F) | 0x80));    buffer.put((byte)(value >>> 7 | 0x80));    buffer.put((byte)(value >>> 14 | 0x80));    buffer.put((byte)(value >>> 21));  } else {    buffer.put((byte)((value & 0x7F) | 0x80));    buffer.put((byte)(value >>> 7 | 0x80));    buffer.put((byte)(value >>> 14 | 0x80));    buffer.put((byte)(value >>> 21 | 0x80));    buffer.put((byte)(value >>> 28));  }}  }
class C{  private static int checkTypeArguments(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkTypeArgument(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkTypeArgument(signature,pos);  }  return pos + 1;}  }
class C{  public void stopProcessing(){  if (!isProcessing) {    return;  }  isProcessing=false;  AbstractDocument doc=(AbstractDocument)document;  XBLEventSupport es=(XBLEventSupport)doc.initializeEventSupport();  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",docRemovedListener,true);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",docInsertedListener,true);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",docSubtreeListener,true);  int nSlots=imports.values().size();  ImportRecord[] irs=new ImportRecord[nSlots];  imports.values().toArray(irs);  for (int i=0; i < irs.length; i++) {    ImportRecord ir=irs[i];    if (ir.importElement.getLocalName().equals(XBL_DEFINITION_TAG)) {      removeDefinitionRef(ir.importElement);    } else {      removeImport(ir.importElement);    }  }  Object[] defRecs=definitions.getValuesArray();  definitions.clear();  for (int i=0; i < defRecs.length; i++) {    DefinitionRecord defRec=(DefinitionRecord)defRecs[i];    TreeSet defs=(TreeSet)definitionLists.get(defRec.namespaceURI,defRec.localName);    if (defs != null) {      while (!defs.isEmpty()) {        defRec=(DefinitionRecord)defs.first();        defs.remove(defRec);        removeDefinition(defRec);      }      definitionLists.put(defRec.namespaceURI,defRec.localName,null);    }  }  definitionLists=new DoublyIndexedTable();  contentManagers.clear();}  }
class C{  public void parseAtom(ExtensionProfile extProfile,XmlEventSource eventSource) throws IOException, ParseException {  AtomHandler handler=new AtomHandler(extProfile);  new EventSourceParser(handler,Namespaces.atom,"entry").parse(eventSource);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void generateDebug(final String errCode,final Object[] errParams,final Logger logger,final Exception exception){  String msg=LdapMessages.formatMessage(LdapErrorCodes.BUNDLE,errCode,errParams);  if (exception != null) {    logger.debug(msg,exception);  } else {    logger.debug(msg);  }}  }
class C{  private @Nullable Class<?> findPropertyType(@Nullable Method readMethod,@Nullable Method writeMethod) throws IntrospectionException {  Class<?> propertyType=null;  try {    if (readMethod != null) {      Class<?>[] params=getParameterTypes(getClass0(),readMethod);      if (params.length != 0) {        throw new IntrospectionException("bad read method arg count: " + readMethod);      }      propertyType=getReturnType(getClass0(),readMethod);      if (propertyType == Void.TYPE) {        throw new IntrospectionException("read method " + readMethod.getName() + " returns void");      }    }    if (writeMethod != null) {      Class<?>[] params=getParameterTypes(getClass0(),writeMethod);      if (params.length != 1) {        throw new IntrospectionException("bad write method arg count: " + writeMethod);      }      if (propertyType != null && !params[0].isAssignableFrom(propertyType)) {        throw new IntrospectionException("type mismatch between read and write methods");      }      propertyType=params[0];    }  } catch (  IntrospectionException ex) {    throw ex;  }  return propertyType;}  }
class C{  public static Name packagePart(Name classname){  return classname.subName(0,classname.lastIndexOf((byte)'.'));}  }
class C{  public void testWriteBits() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  BitOutputStream bOut=new BitOutputStream(out);  bOut.writeBit(true);  bOut.writeBit(false);  bOut.writeBit(true);  bOut.writeBit(false);  bOut.writeBit(true);  bOut.writeBit(false);  bOut.writeBit(true);  bOut.writeBit(false);  byte[] bytes=out.toByteArray();  Assert.assertEquals(1,bytes.length);  Assert.assertEquals(0b01010101,bytes[0]);  bOut.writeBit(true);  bOut.close();  bytes=out.toByteArray();  Assert.assertEquals(2,bytes.length);  Assert.assertEquals(0b00000001,bytes[1]);}  }
class C{  public void appendData(float[] newData,int insertionIndex,int refresh){  int nDataPoints=newData.length;  if (nDataPoints > this.valueHistory.length) {    throw new IllegalArgumentException("More data than series to put them in");  }  for (int s=0; s < nDataPoints; s++) {    if (this.valueHistory[s] == null) {      this.valueHistory[s]=new ValueSequence(this.historyCount);    }    this.valueHistory[s].enterData(insertionIndex,newData[s]);  }  if (refresh > 0) {    insertionIndex++;    if (insertionIndex % refresh == 0) {      fireSeriesChanged();    }  }}  }
class C{  public AccountHeaderBuilder withTextColorRes(@ColorRes int textColorRes){  this.mTextColor=ColorHolder.fromColorRes(textColorRes);  return this;}  }
class C{  public Insn(int opc,int val,boolean Wide) throws jasError {  this.opc=opc;switch (opc) {case opc_bipush:    if (val > 127 || val < -128)     throw new jasError("bipush value exceed size of byte",true);  operand=new ByteOperand(val);break;case opc_sipush:case opc_goto:case opc_if_acmpeq:case opc_if_acmpne:case opc_if_icmpeq:case opc_if_icmpge:case opc_if_icmpgt:case opc_if_icmple:case opc_if_icmplt:case opc_if_icmpne:case opc_ifeq:case opc_ifge:case opc_ifgt:case opc_ifle:case opc_iflt:case opc_ifne:case opc_ifnonnull:case opc_ifnull:case opc_jsr:check_short(val,opc);operand=new OffsetOperand(this,val);break;case opc_goto_w:case opc_jsr_w:operand=new OffsetOperand(this,val,true);break;case opc_newarray:if (val < 0 || val > 255) throw new jasError("newarray counter is illegal",true);operand=new UnsignedByteOperand(val);break;case opc_ret:case opc_iload:case opc_lload:case opc_fload:case opc_dload:case opc_aload:case opc_istore:case opc_lstore:case opc_fstore:case opc_dstore:case opc_astore:operand=new UnsignedByteWideOperand(val,Wide);break;default :throw new jasError(opcNames[opc] + " does not take a numeric argument");}}  }
class C{  public void addChildTime(MethodGroup child,long time){  int index=-1;  for (int i=0; i < childCount; i++) {    if (children[i] == child) {      index=i;      break;    }  }  if (index == -1) {    if (childCount == children.length) {      int newChildCount=childCount + (childCount >> 1);      MethodGroup[] oldChildren=children;      children=new MethodGroup[newChildCount];      System.arraycopy(oldChildren,0,children,0,childCount);      long[] oldChildrenTimes=childrenTimes;      childrenTimes=new long[newChildCount];      System.arraycopy(oldChildrenTimes,0,childrenTimes,0,childCount);    }    children[childCount]=child;    index=childCount++;  }  childrenTimes[index]+=time;}  }
class C{  public static int openURL(String url){  try {    return Launcher.openURL(url);  } catch (  Throwable e) {    GUIMediator.showError(I18n.tr("FrostWire could not locate your web browser to display the following web page: {0}.",url));    return -1;  }}  }
class C{  public void deleteReviewByMarketplaceOwner(Long reviewKey,String reason) throws OperationNotPermittedException, ObjectNotFoundException {  ArgumentValidator.notNull("reviewKey",reviewKey);  ArgumentValidator.notEmptyString("reason",reason);  ProductReview review=dm.getReference(ProductReview.class,reviewKey.longValue());  deleteReviewInt(review,true,reason);}  }
class C{  public Set<TMHMMProtein> parse(InputStream is) throws IOException {  final Map<String,Set<TMHMMMatch>> seqIdMatchMap=new HashMap<String,Set<TMHMMMatch>>();  String prevSequenceId, sequenceId=null;  int startPos=0;  int currentAAPos=-1;  TMHMMSignature prevPrediction=null;  TMHMMSignature prediction;  List<Float> scores=new ArrayList<Float>();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(is));    String line;    while ((line=reader.readLine()) != null) {      if (checkLineForNewEntry(line)) {        if (prevPrediction != null) {          saveTmhmmMatch(seqIdMatchMap,sequenceId,startPos,currentAAPos,prevPrediction,scores);        }        prevSequenceId=sequenceId;        sequenceId=line.substring(2);        if (sequenceId.equals("")) {          LOGGER.warn("Parsing error: non existent sequence identifier " + ((prevSequenceId != null) ? " after " + prevSequenceId : ""));        }        prevPrediction=null;        prediction=null;        currentAAPos=0;        startPos=0;        reader.readLine();      } else       if (Character.isLetter(line.charAt(0))) {        currentAAPos++;        PredictionMaxScoreWrapper predictionWrapper=TMHMMPredictionLineParser.parsePredictionLine(line);        prediction=predictionWrapper.getPrediction();        if (prediction != prevPrediction) {          if (prevPrediction != null) {            saveTmhmmMatch(seqIdMatchMap,sequenceId,startPos,currentAAPos - 1,prevPrediction,scores);          }          prevPrediction=prediction;          startPos=currentAAPos;        }        scores.add(predictionWrapper.getMaxScore());        Collections.sort(scores);      }    }    if (prevPrediction != null) {      saveTmhmmMatch(seqIdMatchMap,sequenceId,startPos,currentAAPos,prevPrediction,scores);    }  } catch (  IOException io) {    LOGGER.warn("Could not parse input stream!",io);  } finally {    if (reader != null) {      reader.close();    }  }  return createProteinsWithMatches(seqIdMatchMap);}  }
class C{  public JavaProjectElementInfo(){  this.nonJavaResources=null;}  }
class C{  private List<VOLocalizedText> initializeReason(){  VOLocalizedText enText=new VOLocalizedText("en","enReason");  VOLocalizedText deText=new VOLocalizedText("de","deReason");  List<VOLocalizedText> reason=new ArrayList<>();  reason.add(enText);  reason.add(deText);  return reason;}  }
class C{  public GuacamoleInstruction(String opcode,String... args){  this.opcode=opcode;  this.args=Collections.unmodifiableList(Arrays.asList(args));}  }
class C{  @Override public boolean equals(Object o){  return (o instanceof BooleanVal && ((BooleanVal)o).getBoolean() == getBoolean());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_TYPE_DEFINITION__DEFINED_TYPE:    setDefinedType((Type)null);  return;}super.eUnset(featureID);}  }
class C{  public void testGetConfigFilename() throws Exception {  System.out.println("getConfigFilename");  final File file=File.createTempFile("testconf",".xml");  final ScanDirConfig instance=new ScanDirConfig(file.getAbsolutePath());  String result=instance.getConfigFilename();  assertEquals(file.getAbsolutePath(),new File(result).getAbsolutePath());}  }
class C{  public void write(byte[] buffer,int offset,int length) throws IOException {  OutputStream os=getOutputStream();  for (; length > 0x8000; length-=0x8000) {    os.write('D');    os.write(0x80);    os.write(0x00);    os.write(buffer,offset,0x8000);    offset+=0x8000;  }  os.write('D');  os.write(length >> 8);  os.write(length);  os.write(buffer,offset,length);}  }
class C{  public boolean forEachValue(TFloatProcedure procedure){  byte[] states=_states;  float[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public AccountHeaderBuilder withHeaderBackground(@DrawableRes int headerBackgroundRes){  this.mHeaderBackground=new ImageHolder(headerBackgroundRes);  return this;}  }
class C{  public FrameworkMessageEvent(byte[] data,Protos.ExecutorID executorID,Protos.SlaveID slaveID){  super(data);  this.executorID=executorID;  this.slaveID=slaveID;}  }
class C{  public boolean contains(Object value){  for (Iterator i=map.entrySet().iterator(); i.hasNext(); ) {    List v=(List)i.next();    for (Iterator i2=v.iterator(); i2.hasNext(); ) {      if (i2.next().equals(value))       return true;    }  }  return false;}  }
class C{  public AvgProjectionExpression(Expression expression,boolean isDistinct){  this.distinct=isDistinct;  this.getChildren().add(expression);}  }
class C{  public boolean isSmeDeliveryAckRequested(){  return isSmeDeliveryAckRequested(registeredDelivery);}  }
class C{  @Override public MemChunkHolder<VolatileMemAllocator> resizeChunk(MemChunkHolder<VolatileMemAllocator> mholder,long size){  MemChunkHolder<VolatileMemAllocator> ret=null;  boolean ac=null != mholder.getRefId();  if (size > 0) {    Long addr=m_vmasvc.reallocate(m_nid,mholder.get(),size,true);    if (0 == addr && m_activegc) {      m_chunkcollector.waitReclaimCoolDown(m_gctimeout);      addr=m_vmasvc.reallocate(m_nid,mholder.get(),size,true);    }    if (0 != addr) {      mholder.clear();      mholder.destroy();      ret=new MemChunkHolder<VolatileMemAllocator>(this,addr,size);      if (ac) {        m_chunkcollector.register(ret);      }    }  }  return ret;}  }
class C{  private Set<String> filterResourceNames(Set<String> resourceNames,String prefix,String suffix){  Set<String> filteredResourceNames=new TreeSet<String>();  for (  String resourceName : resourceNames) {    String fileName=resourceName.substring(resourceName.lastIndexOf(File.separator) + 1);    if (fileName.startsWith(prefix) && fileName.endsWith(suffix) && (fileName.length() > (prefix + suffix).length())) {      filteredResourceNames.add(resourceName);    } else {      LOG.debug("Filtering out resource: " + resourceName + " (filename: "+ fileName+ ")");    }  }  return filteredResourceNames;}  }
class C{  public boolean isUnion(){  return label.isUnion();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:29.037 -0500",hash_original_method="8AD9FEC5ADB8A6F1DFBB290459716C8C",hash_generated_method="7C0DBF937F45AF34490E16CDFA0E724E") protected void startTransactionTimer(){  if (this.transactionTimerStarted.compareAndSet(false,true)) {    TimerTask myTimer=new TransactionTimer();    if (sipStack.getTimer() != null) {      sipStack.getTimer().schedule(myTimer,BASE_TIMER_INTERVAL,BASE_TIMER_INTERVAL);    }  }}  }
class C{  public static void initLazyProperty(Object proxyedPropertyValue){  Hibernate.initialize(proxyedPropertyValue);}  }
class C{  public boolean trackReferenceCounts(){  return trackRefCounts;}  }
class C{  public static double logBeta(double alpha,double beta){  return GammaDistribution.logGamma(alpha) + GammaDistribution.logGamma(beta) - GammaDistribution.logGamma(alpha + beta);}  }
class C{  private synchronized void removeMessageListener(TransportAddress localAddr,MessageTypeEventHandler<?> messageListener){synchronized (children) {    EventDispatcher child=children.get(localAddr);    if (child == null)     return;    child.removeMessageListener(messageListener);  }}  }
class C{  private void growByOne(){  int adding=0;  if (capacityIncrement <= 0) {    if ((adding=elementData.length) == 0) {      adding=1;    }  } else {    adding=capacityIncrement;  }  E[] newData=newElementArray(elementData.length + adding);  System.arraycopy(elementData,0,newData,0,elementCount);  elementData=newData;}  }
class C{  protected AbstractCpeController(String name,String yaml,CollectionProcessingEngine engine){  this(name,yaml,null,engine);}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<>(map);}  }
class C{  public boolean removeMember(Principal p){  return true;}  }
class C{  public IntegerOrPercentage(final int i){  mValue=i;  mIsPercentage=false;}  }
class C{  public void addDependency(Dependency dependency){  if (dependencies == null) {    dependencies=new ArrayList<Dependency>();    nodeDependencies=new ArrayList<Node>();  }  dependencies.add(dependency);  if (!nodeDependencies.contains(dependency.node)) {    nodeDependencies.add(dependency.node);  }  Node dependencyNode=dependency.node;  if (dependencyNode.nodeDependents == null) {    dependencyNode.nodeDependents=new ArrayList<Node>();  }  dependencyNode.nodeDependents.add(this);}  }
class C{  private static void assertAligned(int value){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert((value & (BYTES_IN_INT - 1)) == 0);}  }
class C{  public TestsListPreloaderThread(String path,Message doneMsg){  mRelativePath=path;  mDoneMsg=doneMsg;}  }
class C{  public Iterator<Component> iterator(){  return components.iterator();}  }
class C{  public static boolean hasAncestorTag(Statement stat,String fullName){  return getAncestorTag(stat,fullName) != null;}  }
class C{  public static int bytesToSigned(byte lo,byte hi){  int low=ubyteToInt(lo);  int high=ubyteToInt(hi);  int value=(high << 8) + low;  if (value > 0x7fff) {    value-=65536;  }  return value;}  }
class C{  public static float width(final CGRect aRect){  return aRect.size.width;}  }
class C{  public final void closePanel(PanelFeatureState st,boolean doCallback){  if (doCallback && st.featureId == FEATURE_OPTIONS_PANEL && mActionBar != null && mActionBar.isOverflowMenuShowing()) {    checkCloseActionMenu(st.menu);    return;  }  final ViewManager wm=getWindowManager();  if ((wm != null) && st.isOpen) {    if (st.decorView != null) {      wm.removeView(st.decorView);      if (st.isCompact) {        sRotationWatcher.removeWindow(this);      }    }    if (doCallback) {      callOnPanelClosed(st.featureId,st,null);    }  }  st.isPrepared=false;  st.isHandled=false;  st.isOpen=false;  st.shownPanelView=null;  if (st.isInExpandedMode) {    st.refreshDecorView=true;    st.isInExpandedMode=false;  }  if (mPreparedPanel == st) {    mPreparedPanel=null;    mPanelChordingKey=0;  }}  }
class C{  public static Map<String,Object> sendProcessNotification(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  String adminEmailList=(String)context.get("adminEmailList");  String assignedToUser=(String)context.get("assignedPartyId");  String workEffortId=(String)context.get("workEffortId");  Locale locale=(Locale)context.get("locale");  GenericValue workEffort=null;  GenericValue orderHeader=null;  try {    workEffort=EntityQuery.use(delegator).from("WorkEffort").where("workEffortId",workEffortId).queryOne();    String sourceReferenceId=workEffort.getString("sourceReferenceId");    if (sourceReferenceId != null)     orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",sourceReferenceId).queryOne();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemWithEntityLookup",locale));  }  GenericValue party=null;  Collection<GenericValue> assignedToEmails=null;  try {    party=EntityQuery.use(delegator).from("Party").where("partyId",assignedToUser).queryOne();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemWithEntityLookup",locale));  }  if (party != null) {    assignedToEmails=ContactHelper.getContactMechByPurpose(party,"PRIMARY_EMAIL",false);  }  Map<String,Object> templateData=new HashMap<String,Object>(context);  templateData.putAll(orderHeader);  templateData.putAll(workEffort);  templateData.put("omgStatusId",workEffort.getString("currentStatusId"));  List<GenericValue> assignments=null;  if (workEffort != null) {    try {      assignments=workEffort.getRelated("WorkEffortPartyAssignment",null,null,false);    } catch (    GenericEntityException e1) {      Debug.logError(e1,"Problems getting assignements",module);    }  }  templateData.put("assignments",assignments);  StringBuilder emailList=new StringBuilder();  if (assignedToEmails != null) {    for (    GenericValue ct : assignedToEmails) {      if (ct != null && ct.get("infoString") != null) {        if (emailList.length() > 1)         emailList.append(",");        emailList.append(ct.getString("infoString"));      }    }  }  if (adminEmailList != null) {    if (emailList.length() > 1)     emailList.append(",");    emailList.append(adminEmailList);  }  String ofbizHome=System.getProperty("ofbiz.home");  String templateName=ofbizHome + "/applications/order/email/default/emailprocessnotify.ftl";  Map<String,Object> sendMailContext=new HashMap<String,Object>();  sendMailContext.put("sendTo",emailList.toString());  sendMailContext.put("sendFrom","workflow@ofbiz.org");  sendMailContext.put("subject","Workflow Notification");  sendMailContext.put("templateName",templateName);  sendMailContext.put("templateData",templateData);  try {    dispatcher.runAsync("sendGenericNotificationEmail",sendMailContext);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderSendMailServiceFailed",locale) + e.getMessage());  }  return ServiceUtil.returnSuccess();}  }
class C{  public GenericEntry retrieveGroup(String groupId) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getEntry(new URL(baseDomainUrl + groupId),GenericEntry.class);}  }
class C{  public T caseStringLiteral(StringLiteral object){  return null;}  }
class C{  @Override protected void onClear(){  super.clear();  DisguiseAPI.undisguiseToAll(getPlayer());  getOwner().setCurrentMorph(null);  if (getPlayer() != null)   getPlayer().sendMessage(MessageManager.getMessage("Morphs.Unmorph").replace("%morphname%",TextUtil.filterPlaceHolder(getType().getName(),getUltraCosmetics())));  owner=null;  try {    HandlerList.unregisterAll(this);  } catch (  Exception exc) {  }}  }
class C{  static void verifyStatusChangesAreClientSettable(Update command) throws StatusNotClientSettableException {  for (  StatusValue statusValue : union(command.getInnerAdd().getStatusValues(),command.getInnerRemove().getStatusValues())) {    if (!statusValue.isClientSettable()) {      throw new StatusNotClientSettableException(statusValue.getXmlName());    }  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.176 -0500",hash_original_method="E8FAEAA07CFA8C05C275809EB6A40178",hash_generated_method="BB9F8D3297DCBD21031F1186CD0A4450") public ConnectException(){}  }
class C{  @CanIgnoreReturnValue public static long copy(InputStream from,OutputStream to) throws IOException {  checkNotNull(from);  checkNotNull(to);  byte[] buf=createBuffer();  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  public long lruSize(){  return lru.size();}  }
class C{  @Override public FileSnapshotBulkRep queryBulkResourceReps(List<URI> ids){  Iterator<Snapshot> _dbIterator=_dbClient.queryIterativeObjects(getResourceClass(),ids);  return new FileSnapshotBulkRep(BulkList.wrapping(_dbIterator,MapFileSnapshot.getInstance()));}  }
class C{  public FilterEditorException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  private void removeNotification(){  ((NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE)).cancel(NOTIFICATION_ID);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.292 -0500",hash_original_method="E5A180E871F653CC9F75C9B7A9F73687",hash_generated_method="E9ECC5A4FCBE9E8D108B5888B61B27A2") private void popContentSource(){  buffer=nextContentSource.buffer;  position=nextContentSource.position;  limit=nextContentSource.limit;  nextContentSource=nextContentSource.next;}  }
class C{  public boolean isEnabled(){  return fIsEnabled;}  }
class C{  @Override public IMqttToken subscribe(String[] topic,int[] qos) throws MqttException, MqttSecurityException {  return subscribe(topic,qos,null,null);}  }
class C{  private void processUnknownFilterStatus(){  unknownBtnClicked=!unknownBtnClicked;  processCommonFilterStatus(TargetUpdateStatus.UNKNOWN,unknownBtnClicked);}  }
class C{  public boolean writePaneAll(){  prepWritePane(false);  return nextWrite();}  }
class C{  protected void doGet(HttpServletRequest request,HttpServletResponse response){  Pair<MessageType,Request> message=Messages.parseRequest(request);  MessageType messageType=message.first();  Request baseRequest=message.second();  logger.info("Receive: {} {}",messageType,baseRequest);  Continuation continuation=ContinuationSupport.getContinuation(request);  ServiceResponse serviceResponse=null;  if (baseRequest.isAsynchronous() && continuation.isInitial()) {    continuation.setTimeout(ASYNC_TIMEOUT);    RequestHandler handler=requestHandlers[messageType.ordinal()];    if (handler.validate(baseRequest)) {      handler.handleAsynchronous(baseRequest,request,response);    } else {      ServiceResponse.writeBadRequest(response);      logger.warn("Bad asynchronous request received: {}",request);    }  } else   if (continuation.isExpired()) {    ServiceResponse.writeTimeout(response);    logger.warn("Request timeout: {}",request);  } else   if (continuation.isResumed()) {    Object asyncResult=request.getAttribute(ASYNC_KEY);    serviceResponse=(ServiceResponse)asyncResult;  } else {    RequestHandler handler=requestHandlers[messageType.ordinal()];    if (handler.validate(baseRequest)) {      serviceResponse=handler.handle(baseRequest);    } else {      ServiceResponse.writeBadRequest(response);      logger.warn("Bad synchronous request received: {}",request);    }  }  if (serviceResponse != null) {    boolean responseOk=ServiceResponse.intoHttpResponse(serviceResponse,response);    if (responseOk) {      logger.info("Response status {}: {}",response.getStatus(),serviceResponse.getReply());    } else {      String status=String.format("Response status %d: %s",response.getStatus(),serviceResponse.getReply().toString());      logger.error(status);    }  }}  }
class C{  public void addParameter(Object owner,Parameter<?> param,TrackParameters track){  this.setBorder(new SoftBevelBorder(SoftBevelBorder.LOWERED));  ParameterConfigurator cfg=null;{    Object cur=owner;    while (cur != null) {      cfg=childconfig.get(cur);      if (cfg != null) {        break;      }      cur=track.getParent(cur);    }  }  if (cfg != null) {    cfg.addParameter(owner,param,track);    return;  } else {    cfg=makeConfigurator(param);    cfg.addChangeListener(this);    children.add(cfg);  }}  }
class C{  public void testAuthenticationByElement() throws Exception {  URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/authentication-war/test");  final String expected="Principal name [elementUser], Is user in \"cargo\" role [true]";  Map<String,String> requestProperties=new HashMap<String,String>();  requestProperties.put("Authorization","Basic " + new String(Base64.encodeBase64("elementUser:pass".getBytes())));  PingUtils.assertPingTrue("Failed authentication",expected,url,requestProperties,logger);}  }
class C{  public static boolean isAtLeast(int apiLevel){  return Build.VERSION.SDK_INT >= apiLevel;}  }
class C{  public static HashMap<String,String> parseDirectives(byte[] buf) throws SaslException {  HashMap<String,String> map=new HashMap<String,String>();  boolean gettingKey=true;  boolean gettingQuotedValue=false;  boolean expectSeparator=false;  byte bch;  ByteArrayOutputStream key=new ByteArrayOutputStream(10);  ByteArrayOutputStream value=new ByteArrayOutputStream(10);  int i=skipLws(buf,0);  while (i < buf.length) {    bch=buf[i];    if (gettingKey) {      if (bch == ',') {        if (key.size() != 0) {          throw new SaslException("Directive key contains a ',':" + key);        }        i=skipLws(buf,i + 1);      } else       if (bch == '=') {        if (key.size() == 0) {          throw new SaslException("Empty directive key");        }        gettingKey=false;        i=skipLws(buf,i + 1);        if (i < buf.length) {          if (buf[i] == '"') {            gettingQuotedValue=true;            ++i;          }        } else {          throw new SaslException("Valueless directive found: " + key.toString());        }      } else       if (isLws(bch)) {        i=skipLws(buf,i + 1);        if (i < buf.length) {          if (buf[i] != '=') {            throw new SaslException("'=' expected after key: " + key.toString());          }        } else {          throw new SaslException("'=' expected after key: " + key.toString());        }      } else {        key.write(bch);        ++i;      }    } else     if (gettingQuotedValue) {      if (bch == '\\') {        ++i;        if (i < buf.length) {          value.write(buf[i]);          ++i;        } else {          throw new SaslException("Unmatched quote found for directive: " + key.toString() + " with value: "+ value.toString());        }      } else       if (bch == '"') {        ++i;        gettingQuotedValue=false;        expectSeparator=true;      } else {        value.write(bch);        ++i;      }    } else     if (isLws(bch) || bch == ',') {      extractDirective(map,key.toString(),value.toString());      key.reset();      value.reset();      gettingKey=true;      gettingQuotedValue=expectSeparator=false;      i=skipLws(buf,i + 1);    } else     if (expectSeparator) {      throw new SaslException("Expecting comma or linear whitespace after quoted string: \"" + value.toString() + "\"");    } else {      value.write(bch);      ++i;    }  }  if (gettingQuotedValue) {    throw new SaslException("Unmatched quote found for directive: " + key.toString() + " with value: "+ value.toString());  }  if (key.size() > 0) {    extractDirective(map,key.toString(),value.toString());  }  return map;}  }
class C{  public JTextField(String text,int columns){  this(null,text,columns);}  }
class C{  public Task<FileSnapshotRestRep> export(URI id,FileSystemExportParam input){  return postTask(input,getExportsUrl(),id);}  }
class C{  @Override public Result doComparisonTest(final Properties properties) throws Exception {  final long timeout=Long.parseLong(properties.getProperty(TestOptions.TIMEOUT));  final int nresources=Integer.parseInt(properties.getProperty(TestOptions.NRESOURCES));  final int minLocks=Integer.parseInt(properties.getProperty(TestOptions.MIN_LOCKS));  final int maxLocks=Integer.parseInt(properties.getProperty(TestOptions.MAX_LOCKS));  final int ntrials=Integer.parseInt(properties.getProperty(TestOptions.NTRIALS));  final int keyLen=Integer.parseInt(properties.getProperty(TestOptions.KEYLEN));  final int nops=Integer.parseInt(properties.getProperty(TestOptions.NOPS));  final double failureRate=Double.parseDouble(properties.getProperty(TestOptions.FAILURE_RATE));  Result result=doConcurrentClientTest(journal,timeout,nresources,minLocks,maxLocks,ntrials,keyLen,nops,failureRate);  return result;}  }
class C{  public static int lastIndexOf(String orig,String string){  return orig.lastIndexOf(string,orig.length());}  }
class C{  public void disconnect(){  connected=false;synchronized (connLostWait) {    connLostWait.notify();  }  if (mqtt != null) {    try {      mqtt.disconnect();    } catch (    Exception ex) {      setTitleText("MQTT disconnect error !");      ex.printStackTrace();      System.exit(1);    }  }  if (led.isFlashing()) {    led.setFlash();  }  led.setRed();  setConnected(false);synchronized (this) {    writeLogln("WebSphere MQ Telemetry transport disconnected");  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 158) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public String toPropertyString(Resource data){  Properties properties=toProperties(data);  return PropertyUtils.joinOnPipe(PropertyUtils.toMap(properties));}  }
class C{  private static void printMBeans(MBeanServerConnection mbsc) throws Exception {  Set<ObjectName> set=mbsc.queryNames(null,null);  System.out.println("---- MBeans found :");  for (Iterator<ObjectName> iter=set.iterator(); iter.hasNext(); ) {    System.out.println(iter.next().toString());  }  System.out.println("\n");}  }
class C{  public boolean hasArtist(){  return hasExtension(Artist.class);}  }
class C{  public static boolean isSafe(int optionNumber){  return !isUnsafe(optionNumber);}  }
class C{  public static synchronized void registerTransactionServicePlugin(TransactionServicePlugin l){  if (service_ != null) {    service_.addTSListener(l);  }  tsListenersList_.add(l);}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,char value){  buffer.append(value);}  }
class C{  private void side(float lastX,float lastY,float rawX,float rawY){  float rawDistance=(float)Math.sqrt(Math.pow(rawX - mCenterPointX,2) + Math.pow(rawY - mCenterPointY,2));  float maxRadius=Math.min(Math.min(mCenterPointX,mDrawableWidth - mCenterPointX),Math.min(mCenterPointY,mDrawableHeight - mCenterPointY));  if (rawDistance <= maxRadius && rawDistance >= MIN_CIRCLE_WINDOW_RADIUS) {    if (mRadius < maxRadius && mRadius > MIN_CIRCLE_WINDOW_RADIUS) {      mRadius=rawDistance;    } else     if (mRadius == maxRadius) {      if ((lastX > mCenterPointX && lastY != mCenterPointY && (rawX < lastX || rawY != lastY)) || lastX < mCenterPointX && lastY != mCenterPointY && (rawX > lastX || rawY != lastY)) {        mRadius=rawDistance;      }    } else     if (mRadius == MIN_CIRCLE_WINDOW_RADIUS) {      if ((lastX > mCenterPointX && lastY != mCenterPointY && (rawX > lastX || rawY != lastY)) || lastX < mCenterPointX && lastY != mCenterPointY && (rawX < lastX || rawY != lastY)) {        mRadius=rawDistance;      }    }  }}  }
class C{  public SVGPath drawTo(double[] xy){  return !isStarted() ? moveTo(xy[0],xy[1]) : lineTo(xy[0],xy[1]);}  }
class C{  private static DateValue[] everyOtherDayInMonth(DateValue start){  return daysInMonth(start,2);}  }
class C{  public void addProperties(Map<String,String> properties){  resolverSpi.engineAddProperies(properties);}  }
class C{  public void signatureDatabaseLoaded(SignatureLibraryRelease release,String analysisName){  try {    final Map<Step,List<StepInstance>> stepToStepInstances=new HashMap<Step,List<StepInstance>>();    final Long topProteinId=proteinDAO.getMaximumPrimaryKey();    for (    Job job : jobs.getJobList()) {      if (analysisName.equals(job.getId())) {        for (        Step step : job.getSteps()) {          if (step.isCreateStepInstancesForNewProteins()) {            final List<StepInstance> jobStepInstances=createStepInstances(step,0L,topProteinId);            stepToStepInstances.put(step,jobStepInstances);          }        }      }    }    addDependenciesAndStore(stepToStepInstances);  } catch (  Exception e) {    LOGGER.error("Exception thrown in createStepInstances() method: ",e);    throw new IllegalStateException("Caught and logged Exception, re-thrown so things work properly.",e);  }}  }
class C{  public static boolean containsClass(@NotNull File file,String className){  String entryPath=className.replace('.','/') + ".class";  return containsEntry(file,entryPath);}  }
class C{  public Rectangle2D autoPosition(Operator op,int index,boolean setPosition){  int maxPerRow=(int)Math.max(1,Math.floor(model.getProcessWidth(op.getExecutionUnit()) / (ProcessDrawer.GRID_AUTOARRANGE_WIDTH + 10)));  int col=index % maxPerRow;  int row=index / maxPerRow;  Rectangle2D old=model.getOperatorRect(op);  double x=col * ProcessDrawer.GRID_AUTOARRANGE_WIDTH + ProcessDrawer.GRID_X_OFFSET;  double y=ProcessDrawer.GRID_AUTOARRANGE_HEIGHT * row + ProcessDrawer.GRID_Y_OFFSET;  double width=Math.floor(old != null ? old.getWidth() : ProcessDrawer.OPERATOR_WIDTH);  double height=Math.floor(old != null ? old.getHeight() : ProcessDrawer.OPERATOR_MIN_HEIGHT);  Rectangle2D rect;  if (model.isSnapToGrid()) {    Point snappedPoint=ProcessDrawUtils.snap(new Point2D.Double(x,y));    rect=new Rectangle2D.Double(snappedPoint.getX(),snappedPoint.getY(),width,height);  } else {    rect=new Rectangle2D.Double(x,y,width,height);  }  if (setPosition) {    model.setOperatorRect(op,rect);    model.fireOperatorMoved(op);  }  return rect;}  }
class C{  @Override public void sessionCreated(NextFilter nextFilter,IoSession session) throws Exception {  if (profileSessionCreated) {    long start=timeNow();    nextFilter.sessionCreated(session);    long end=timeNow();    sessionCreatedTimerWorker.addNewDuration(end - start);  } else {    nextFilter.sessionCreated(session);  }}  }
class C{  public JpegSegmentReader(InputStream in) throws JpegProcessingException {  _stream=in;  _file=null;  _data=null;  readSegments();}  }
class C{  public DatatypeConfigurationException(String message,Throwable cause){  super(message);  initCauseByReflection(cause);}  }
class C{  public static String contentTypeWithCharset(String mimeType,String charset){  return mimeType + "; charset=" + charset;}  }
class C{  private VisorCacheStartJob(VisorCacheStartArg arg,boolean debug){  super(arg,debug);}  }
class C{  public Code39Reader(boolean usingCheckDigit,boolean extendedMode){  this.usingCheckDigit=usingCheckDigit;  this.extendedMode=extendedMode;  decodeRowResult=new StringBuilder(20);  counters=new int[9];}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (newRecord)   insert_Tree(MTree_Base.TREETYPE_Campaign);  if (!newRecord && (is_ValueChanged("Value") || is_ValueChanged("Name")))   MAccount.updateValueDescription(getCtx(),"C_Campaign_ID=" + getC_Campaign_ID(),get_TrxName());  return true;}  }
class C{  public static <T>T withObjectInputStream(File file,@ClosureParams(value=SimpleType.class,options="java.io.ObjectInputStream") Closure<T> closure) throws IOException {  return IOGroovyMethods.withStream(newObjectInputStream(file),closure);}  }
class C{  public Element resolve(ElementMetadata<?,?> metadata) throws ContentValidationException {  ValidationContext vc=new ValidationContext();  Element narrowed=resolve(metadata,vc);  if (!vc.isValid()) {    throw new ContentValidationException("Invalid data",vc);  }  return narrowed;}  }
class C{  public int stemSuffix(char s[],int len){  for (int i=0; i < suffixes.length; i++)   if (endsWithCheckLength(s,len,suffixes[i]))   len=deleteN(s,len - suffixes[i].length,len,suffixes[i].length);  return len;}  }
class C{  public void append(int value){  if (count == data.length) {    data=PApplet.expand(data);  }  data[count++]=value;}  }
class C{  private static boolean isUnreserved(char c){  final int n=(int)c;  boolean unreserved=(47 < n && n < 58) || (96 < n && n < 123) || (64 < n && n < 91);  if (!unreserved) {    unreserved=mark.contains(c);  }  return unreserved;}  }
class C{  @Override public void force(boolean metaData) throws IOException {  throw new NonWritableChannelException();}  }
class C{  public static boolean outlineContains(Shape shape,Point2D.Double p,double tolerance){  double[] coords=new double[6];  double prevX=0, prevY=0;  double moveX=0, moveY=0;  for (PathIterator i=new FlatteningPathIterator(shape.getPathIterator(new AffineTransform(),tolerance),tolerance); !i.isDone(); i.next()) {switch (i.currentSegment(coords)) {case PathIterator.SEG_CLOSE:      if (Geom.lineContainsPoint(prevX,prevY,moveX,moveY,p.x,p.y,tolerance)) {        return true;      }    break;case PathIterator.SEG_CUBICTO:  break;case PathIterator.SEG_LINETO:if (Geom.lineContainsPoint(prevX,prevY,coords[0],coords[1],p.x,p.y,tolerance)) {  return true;}break;case PathIterator.SEG_MOVETO:moveX=coords[0];moveY=coords[1];break;case PathIterator.SEG_QUADTO:break;default :break;}prevX=coords[0];prevY=coords[1];}return false;}  }
class C{  public Object remove(int key){  final Entry[] tab=table;  final int hash=key;  final int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash) {      if (prev != null) {        prev.next=e.next;      } else {        tab[index]=e.next;      }      count--;      final Object oldValue=e.value;      e.value=null;      return oldValue;    }  }  return null;}  }
class C{  private VariableReference createOrReuseObjectVariable(TestCase test,int position,int recursionDepth,VariableReference exclude,boolean allowNull,boolean canUseMocks) throws ConstructionFailedException {  double reuse=Randomness.nextDouble();  if (reuse <= Properties.PRIMITIVE_REUSE_PROBABILITY) {    List<VariableReference> candidates=getCandidatesForReuse(test,Object.class,position,exclude,allowNull,canUseMocks);    filterVariablesByCastClasses(candidates);    logger.debug("Choosing object from: {}",candidates);    if (!candidates.isEmpty())     return Randomness.choice(candidates);  }  logger.debug("Attempting object generation");  return attemptObjectGeneration(test,position,recursionDepth,true);}  }
class C{  public static boolean isCglibProxyClass(Class<?> clazz){  return (clazz != null && isCglibProxyClassName(clazz.getName()));}  }
class C{  public static <T>void fill(List<? super T> list,T object){  ListIterator<? super T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(object);  }}  }
class C{  private int insertUnassignedRules() throws AdeException {  final IDataStoreRules dataStoreRules=Ade.getAde().getDataStore().rules();  return dataStoreRules.insertUnassignedRule();}  }
class C{  public DefaultBoundedRangeModel(){}  }
class C{  public static FocusListener add(FocusListener a,FocusListener b){  return (FocusListener)addInternal(a,b);}  }
class C{  public String dump(X509CRL crl) throws Asn1Exception, IOException {  try {    return dump(crl.getEncoded());  } catch (  IOException ex) {    throw new Asn1Exception(res.getString("NoAsn1DumpObject.exception.message"),ex);  }catch (  CRLException ex) {    throw new Asn1Exception(res.getString("NoAsn1DumpObject.exception.message"),ex);  }}  }
class C{  public static void loadTexture(int target,int level,int border,int fallbackFormat,int fallbackType,InputStream input) throws IOException {  loadTexture(target,level,border,fallbackFormat,fallbackType,createTexture(input));}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="www.xyz.com";  String qualifiedName="emp:local1";  Document doc;  NodeList genderList;  Node gender;  NodeList genList;  Node gen;  NodeList gList;  Element genElement;  int nodeType;  doc=(Document)load("staffNS",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  genList=gender.getChildNodes();  gen=genList.item(0);  nodeType=(int)gen.getNodeType();  if (equals(1,nodeType)) {    gen=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",gen);  }  gList=gen.getChildNodes();  genElement=(Element)gList.item(0);  assertNotNull("notnull",genElement);{    boolean success=false;    try {      genElement.setAttributeNS(namespaceURI,qualifiedName,"newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public int map(int i){  return (multiplier * i + addend) % modulus;}  }
class C{  public double evaluate(double[] values){  double product=this.coefficient;  for (  int variable : this.variables) {    product*=values[variable];  }  return product;}  }
class C{  public ObjectFactory(){}  }
class C{  protected void toggleSortColumn(ResultComparator<T> id){  if (comparator == id) {switch (sortState) {case NONE:      sortState=SortState.UP;    comparator.setAscending(true);  break;case UP:sortState=SortState.DOWN;comparator.setAscending(false);break;case DOWN:sortState=SortState.NONE;break;default :break;}} else {comparator=id;sortState=SortState.UP;comparator.setAscending(true);}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void run(){  LOGGER.debug("PDQ in run:" + pdq.getDeploymentId());  if (pdq.getDeployScriptLocation() == null) {    pdq.setDeployScriptLocation(MDConfig.getProperty("deploy.script-path") + "/job-deployer.sh");    LOGGER.debug(pdq.getDeployScriptLocation());  }  String[] params={"--deployment-id",pdq.getDeploymentId().toString()};  String sCommandString;  String command="sh " + pdq.getDeployScriptLocation() + " "+ pdq.getBusDomainId()+ " "+ pdq.getProcessTypeId()+ " "+ pdq.getProcessId()+ " "+ pdq.getUserName();  sCommandString=command;  CommandLine oCmdLine=CommandLine.parse(sCommandString);  LOGGER.debug("executing command with deploymentId=" + pdq.getDeploymentId());  LOGGER.debug("executing command :" + command);  DefaultExecutor oDefaultExecutor=new DefaultExecutor();  oDefaultExecutor.setExitValue(0);  try {    InitDeploy initDeploy=new InitDeploy();    initDeploy.execute(params);    oDefaultExecutor.execute(oCmdLine);    HaltDeploy haltDeploy=new HaltDeploy();    haltDeploy.execute(params);  } catch (  Exception e) {    TermDeploy termDeploy=new TermDeploy();    termDeploy.execute(params);    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public void checkCf() throws InterruptedException, ConnectionException {  checkCf(false);}  }
class C{  public static void putLongField(Object obj,long fieldOff,long val){  UNSAFE.putLong(obj,fieldOff,val);}  }
class C{  public PropertyChangeSupport(Object sourceBean){  if (sourceBean == null) {    throw new NullPointerException();  }  source=sourceBean;}  }
class C{  public static void initialMessage(String s){  System.err.println(s);  System.err.flush();}  }
class C{  private void stopServer(){  Socket clientSocket=null;  try {    clientSocket=new Socket(this.host,this.port);  } catch (  Exception e) {    throw new ContainerException("Error opening socket to [" + this.host + ":"+ this.port+ "]",e);  } finally {    try {      if (clientSocket != null) {        clientSocket.close();      }    } catch (    IOException e) {      throw new ContainerException("Cannot close client socket",e);    }  }}  }
class C{  private final void updateDirection(DrawerDirection dir){  maxSizeProperty.get().set(-1);  prefSizeProperty.get().set(-1);  if (dir.equals(DrawerDirection.LEFT)) {    StackPane.setAlignment(sidePane,Pos.CENTER_LEFT);    translateProperty.set(0);    translateProperty=sidePane.translateXProperty();    maxSizeProperty.set(sidePane.maxWidthProperty());    minSizeProperty.set(sidePane.minWidthProperty());    prefSizeProperty.set(sidePane.prefWidthProperty());    sizeProperty.set(sidePane.widthProperty());    this.boundedNodeProperty().removeListener(heightListener);    this.boundedNodeProperty().addListener(widthListener);    if (getBoundedNode() == null)     this.boundedNodeProperty().bind(this.parentProperty());    this.sceneProperty().removeListener(sceneHeightListener);    this.sceneProperty().removeListener(sceneWidthListener);    this.sceneProperty().addListener(sceneWidthListener);  } else   if (dir.equals(DrawerDirection.RIGHT)) {    StackPane.setAlignment(sidePane,Pos.CENTER_RIGHT);    translateProperty.set(0);    translateProperty=sidePane.translateXProperty();    maxSizeProperty.set(sidePane.maxWidthProperty());    minSizeProperty.set(sidePane.minWidthProperty());    prefSizeProperty.set(sidePane.prefWidthProperty());    sizeProperty.set(sidePane.widthProperty());    this.boundedNodeProperty().removeListener(heightListener);    this.boundedNodeProperty().addListener(widthListener);    if (getBoundedNode() == null)     this.boundedNodeProperty().bind(this.parentProperty());    this.sceneProperty().removeListener(sceneHeightListener);    this.sceneProperty().removeListener(sceneWidthListener);    this.sceneProperty().addListener(sceneWidthListener);  } else   if (dir.equals(DrawerDirection.TOP)) {    StackPane.setAlignment(sidePane,Pos.TOP_CENTER);    translateProperty.set(0);    translateProperty=sidePane.translateYProperty();    maxSizeProperty.set(sidePane.maxHeightProperty());    minSizeProperty.set(sidePane.minHeightProperty());    prefSizeProperty.set(sidePane.prefHeightProperty());    sizeProperty.set(sidePane.heightProperty());    this.boundedNodeProperty().removeListener(widthListener);    this.boundedNodeProperty().addListener(heightListener);    if (getBoundedNode() == null)     this.boundedNodeProperty().bind(this.parentProperty());    this.sceneProperty().removeListener(sceneHeightListener);    this.sceneProperty().removeListener(sceneWidthListener);    this.sceneProperty().addListener(sceneHeightListener);  } else   if (dir.equals(DrawerDirection.BOTTOM)) {    StackPane.setAlignment(sidePane,Pos.BOTTOM_CENTER);    translateProperty.set(0);    translateProperty=sidePane.translateYProperty();    maxSizeProperty.set(sidePane.maxHeightProperty());    minSizeProperty.set(sidePane.minHeightProperty());    prefSizeProperty.set(sidePane.prefHeightProperty());    sizeProperty.set(sidePane.heightProperty());    this.boundedNodeProperty().removeListener(widthListener);    this.boundedNodeProperty().addListener(heightListener);    if (getBoundedNode() == null)     this.boundedNodeProperty().bind(this.parentProperty());    this.sceneProperty().removeListener(sceneHeightListener);    this.sceneProperty().removeListener(sceneWidthListener);    this.sceneProperty().addListener(sceneHeightListener);  }  setDefaultDrawerSize(defaultSizeProperty.get());  updateDrawerAnimation(initTranslate.doubleValue());}  }
class C{  private List<String> generateExportGroupCreateSteps(Workflow workflow,String previousStep,BlockStorageDevice device,StorageSystem storage,ExportGroup exportGroup,List<URI> initiatorURIs,Map<URI,Integer> volumeMap,boolean zoneStepNeeded,String token) throws Exception {  Map<String,URI> portNameToInitiatorURI=new HashMap<>();  List<URI> hostURIs=new ArrayList<>();  List<String> portNames=new ArrayList<>();  String stepId;  _log.info("Started export mask steps generation.");  processInitiators(exportGroup,initiatorURIs,portNames,portNameToInitiatorURI,hostURIs);  _log.info("Done with initiator processing.");  queryHostInitiatorsAndAddToList(portNames,portNameToInitiatorURI,initiatorURIs,hostURIs);  Map<String,Set<URI>> matchingExportMaskURIs=device.findExportMasks(storage,portNames,false);  _log.info("Done with matching export masks.");  List<String> newSteps;  if (matchingExportMaskURIs == null || matchingExportMaskURIs.isEmpty()) {    _log.info(String.format("No existing mask found w/ initiators { %s }",Joiner.on(",").join(portNames)));    newSteps=createNewExportMaskWorkflowForInitiators(initiatorURIs,exportGroup,workflow,volumeMap,storage,token,previousStep);  } else {    _log.info(String.format("Mask(s) found w/ initiators {%s}. " + "MatchingExportMaskURIs {%s}, portNameToInitiators {%s}",Joiner.on(",").join(portNames),Joiner.on(",").join(matchingExportMaskURIs.keySet()),Joiner.on(",").join(portNameToInitiatorURI.entrySet())));    throw DeviceControllerException.exceptions.blockDeviceOperationNotSupported();  }  return newSteps;}  }
class C{  public AppVersion(){  this(-1,-1,-1,-1,null);}  }
class C{  public static List<URI> refreshDDConnections(final List<StorageProvider> ddProviderList,DbClient dbClient,DataDomainClientFactory ddClientFactory){  List<URI> activeProviders=new ArrayList<URI>();  for (  StorageProvider storageProvider : ddProviderList) {    try {      DataDomainClient ddClient=getDataDomainClient(storageProvider,ddClientFactory);      if (ddClient == null) {        storageProvider.setConnectionStatus(ConnectionStatus.NOTCONNECTED.name());        _log.error("Storage Provider {} is not reachable",storageProvider.getIPAddress());      } else {        ddClient.getManagementSystemInfo();        storageProvider.setConnectionStatus(ConnectionStatus.CONNECTED.name());        activeProviders.add(storageProvider.getId());        _log.info("Storage Provider {} is reachable",storageProvider.getIPAddress());      }    } catch (    Exception e) {      storageProvider.setConnectionStatus(ConnectionStatus.NOTCONNECTED.name());      _log.error("Storage Provider {} is not reachable",storageProvider.getIPAddress());    } finally {      dbClient.persistObject(storageProvider);    }  }  return activeProviders;}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.PROJECT_DESCRIPTION;}  }
class C{  @SuppressWarnings("unchecked") private static void mergeSort(Object[] in,Object[] out,int start,int end,Comparator c){  int len=end - start;  if (len <= SIMPLE_LENGTH) {    for (int i=start + 1; i < end; i++) {      Object current=out[i];      Object prev=out[i - 1];      if (c.compare(prev,current) > 0) {        int j=i;        do {          out[j--]=prev;        } while (j > start && (c.compare(prev=out[j - 1],current) > 0));        out[j]=current;      }    }    return;  }  int med=(end + start) >>> 1;  mergeSort(out,in,start,med,c);  mergeSort(out,in,med,end,c);  if (c.compare(in[med - 1],in[med]) <= 0) {    System.arraycopy(in,start,out,start,len);    return;  }  int r=med, i=start;  do {    Object fromVal=in[start];    Object rVal=in[r];    if (c.compare(fromVal,rVal) <= 0) {      int l_1=find(in,rVal,-1,start + 1,med - 1,c);      int toCopy=l_1 - start + 1;      System.arraycopy(in,start,out,i,toCopy);      i+=toCopy;      out[i++]=rVal;      r++;      start=l_1 + 1;    } else {      int r_1=find(in,fromVal,0,r + 1,end - 1,c);      int toCopy=r_1 - r + 1;      System.arraycopy(in,r,out,i,toCopy);      i+=toCopy;      out[i++]=fromVal;      start++;      r=r_1 + 1;    }  } while ((end - r) > 0 && (med - start) > 0);  if ((end - r) <= 0) {    System.arraycopy(in,start,out,i,med - start);  } else {    System.arraycopy(in,r,out,i,end - r);  }}  }
class C{  private void performRestore(File memberDir,File backupDir) throws Exception {  List<File> ifFiles=FileUtil.findAll(memberDir,".*\\.if$");  for (  File file : ifFiles) {    file.delete();  }  List<File> oplogs=FileUtil.findAll(memberDir,OPLOG_REGEX);  for (  File file : oplogs) {    file.delete();  }  File restoreScript=new File(backupDir,"restore.sh");  if (!restoreScript.exists()) {    restoreScript=new File(backupDir,"restore.bat");  }  assertTrue(restoreScript.exists());  assertEquals(0,execute(restoreScript.getAbsolutePath()));}  }
class C{  @Inject public NotificationManagerViewImpl(PartStackUIResources partStackUIResources,Resources resources,NotificationManagerViewImplUiBinder uiBinder){  super(partStackUIResources);  setContentWidget(uiBinder.createAndBindUi(this));  count.setStyleName(resources.notificationCss().countLabel());  count.setVisible(false);  minimizeButton.ensureDebugId("notification-minimizeBut");  scrollPanel.getElement().setTabIndex(0);}  }
class C{  public static void writeBytesToStream(byte[] bytes,OutputStream outputStream) throws IOException {  BufferedOutputStream bos=new BufferedOutputStream(outputStream);  try {    bos.write(bytes);  }  finally {    bos.close();  }}  }
class C{  private void processSLOBasedAutoTierPolicies(StorageSystem storageSystem,Set<String> sloNames,List<AutoTieringPolicy> newList,List<AutoTieringPolicy> updateList) throws IOException {  if (newList != null) {    _dbClient.createObject(newList);  }  if (updateList != null) {    _dbClient.updateAndReindexObject(updateList);  }}  }
class C{  private void writeSequenceBegin(int size) throws TException {  getCurrentContext().write();  if (getCurrentContext().isMapKey()) {    throw new TException(SEQUENCE_AS_KEY_ILLEGAL);  }  pushContext(new SequenceContext(null));  try {    getCurrentWriter().writeStartArray();  } catch (  IOException ex) {    throw new TTransportException(ex);  }}  }
class C{  @Override public int read(byte b[]) throws IOException {  int nr=in.read(b);  incrementValue(nr);  return nr;}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {  try {    write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));  } catch (  org.apache.thrift.TException te) {    throw new java.io.IOException(te);  }}  }
class C{  public void addData(BooleanStatistic data){  dataList.add(data);}  }
class C{  public WCSElevationModel(String restorableStateInXml){  super(wcsRestorableStateToParams(restorableStateInXml));  RestorableSupport rs;  try {    rs=RestorableSupport.parse(restorableStateInXml);  } catch (  Exception e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseStateXml",restorableStateInXml);    Logging.logger().severe(message);    throw new IllegalArgumentException(message,e);  }  this.doRestoreState(rs,null);}  }
class C{  public WorkspaceHelper(Context context){  mContext=context;  final Resources res=mContext.getResources();  mDensity=res.getDisplayMetrics().density;  if (mDensity == 0) {    Log.e(TAG,"Density is not defined for this context. Defaulting to 1.");    mDensity=1f;  }  updateRtl(res);}  }
class C{  private void requirePowerLock(){  final PowerManager mgr=(PowerManager)getSystemService(Context.POWER_SERVICE);  try {    Log.i(TAG,"Acquiring wakelock " + WAKELOCK_NAME);    mWakeLock=mgr.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,WAKELOCK_NAME);    mWakeLock.setReferenceCounted(true);  } catch (  final Exception e) {    Log.e(TAG,"Error acquiring wakelock " + WAKELOCK_NAME + e.toString(),e);  }}  }
class C{  final public void abort(){  throw new UnsupportedOperationException();}  }
class C{  private static String substring(String text,int startPos,int len){  assert validSubstring(text,startPos,len);  return text.substring(startPos,startPos + len);}  }
class C{  public AsicContainerVerifier(String filename) throws Exception {  try (FileInputStream in=new FileInputStream(filename)){    asic=AsicContainer.read(in);  } }  }
class C{  public boolean isHorizontalSlide(){  return (transitionType == TYPE_SLIDE || transitionType == TYPE_FAST_SLIDE) && slideType == SLIDE_HORIZONTAL;}  }
class C{  public static Address toReilAddress(final Address address){  return new Address(com.google.security.zynamics.reil.ReilHelpers.toReilAddress(new CAddress(address.toLong())).toBigInteger());}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  if (m_KValue > data.numAttributes() - 1) {    m_KValue=data.numAttributes() - 1;  }  if (m_KValue < 1) {    m_KValue=(int)Utils.log2(data.numAttributes() - 1) + 1;  }  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  if (data.numAttributes() == 1) {    System.err.println("Cannot build model (only class attribute present in data!), " + "using ZeroR model instead!");    m_zeroR=new weka.classifiers.rules.ZeroR();    m_zeroR.buildClassifier(data);    return;  } else {    m_zeroR=null;  }  Instances train=null;  Instances backfit=null;  Random rand=data.getRandomNumberGenerator(m_randomSeed);  if (m_NumFolds <= 0) {    train=data;  } else {    data.randomize(rand);    data.stratify(m_NumFolds);    train=data.trainCV(m_NumFolds,1,rand);    backfit=data.testCV(m_NumFolds,1);  }  int[] attIndicesWindow=new int[data.numAttributes() - 1];  int j=0;  for (int i=0; i < attIndicesWindow.length; i++) {    if (j == data.classIndex()) {      j++;    }    attIndicesWindow[i]=j++;  }  double totalWeight=0;  double totalSumSquared=0;  double[] classProbs=new double[train.numClasses()];  for (int i=0; i < train.numInstances(); i++) {    Instance inst=train.instance(i);    if (data.classAttribute().isNominal()) {      classProbs[(int)inst.classValue()]+=inst.weight();      totalWeight+=inst.weight();    } else {      classProbs[0]+=inst.classValue() * inst.weight();      totalSumSquared+=inst.classValue() * inst.classValue() * inst.weight();      totalWeight+=inst.weight();    }  }  double trainVariance=0;  if (data.classAttribute().isNumeric()) {    trainVariance=RandomTree.singleVariance(classProbs[0],totalSumSquared,totalWeight) / totalWeight;    classProbs[0]/=totalWeight;  }  m_Tree=new Tree();  m_Info=new Instances(data,0);  m_Tree.buildTree(train,classProbs,attIndicesWindow,totalWeight,rand,0,m_MinVarianceProp * trainVariance);  if (backfit != null) {    m_Tree.backfitData(backfit);  }}  }
class C{  public void removeAllItems(){  int cnt=getItemCount();  for (int i=cnt - 1; i >= 0; i--) {    removeItemAt(i);  }}  }
class C{  protected void initDebug(){  String debugParam=getInitParameter("debug");  setDebug((debugParam == null) ? false : Boolean.valueOf(debugParam));}  }
class C{  private static Exception extractException(Exception e){  while (e instanceof PrivilegedActionException) {    e=((PrivilegedActionException)e).getException();  }  return e;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public boolean isNoResolve(){  return noResolve;}  }
class C{  public In(java.net.Socket socket){  try {    InputStream is=socket.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    System.err.println("Could not open " + socket);  }}  }
class C{  public boolean firstTimeIn(){  try {    mRetainedFragment=(RetainedFragment)mFragmentManager.get().findFragmentByTag(mRetainedFragmentTag);    if (mRetainedFragment == null) {      Log.d(TAG,"Creating new RetainedFragment " + mRetainedFragmentTag);      mRetainedFragment=new RetainedFragment();      mFragmentManager.get().beginTransaction().add(mRetainedFragment,mRetainedFragmentTag).commit();      return true;    } else {      Log.d(TAG,"Returning existing RetainedFragment " + mRetainedFragmentTag);      return false;    }  } catch (  NullPointerException e) {    Log.d(TAG,"NPE in firstTimeIn()");    return false;  }}  }
class C{  public void write(Object source,OutputStream out,String charset) throws Exception {  write(source,new OutputStreamWriter(out,charset));}  }
class C{  public void drawPalette(int[] colors,int selectedColor){  drawPalette(colors,selectedColor,null);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static UserIdentityToken createAnonymousIdentityToken(EndpointDescription ep) throws ServiceResultException {  UserTokenPolicy policy=ep.findUserTokenPolicy(UserTokenType.Anonymous);  if (policy == null)   throw new ServiceResultException(StatusCodes.Bad_IdentityTokenRejected,"Anonymous UserTokenType is not supported");  return new AnonymousIdentityToken(policy.getPolicyId());}  }
class C{  public TargetActivityHeaderView(Context context){  this(context,null);}  }
class C{  public void execute(Runnable task){  Executor executor=getExecutor();  if (executor == null)   task.run(); else   executor.execute(task);}  }
class C{  static public Object findNative(String name){  loadTypefaces();  return typefaceMap.get(name);}  }
class C{  @DoNotStrip @Override public void quitSynchronous(){  mIsFinished=true;  mLooper.quit();  if (mLooper.getThread() != Thread.currentThread()) {    try {      mLooper.getThread().join();    } catch (    InterruptedException e) {      throw new RuntimeException("Got interrupted waiting to join thread " + mName);    }  }}  }
class C{  protected void closeOldResultSet() throws SQLException {  try {    if (!closedByResultSet) {      if (resultSet != null) {        resultSet.closeInternal();      }    }  }  finally {    cancelled=false;    resultSet=null;    updateCount=-1;  }}  }
class C{  public static int fixed8(double value){  return (int)(value * SwfConstants.FIXED_POINT_MULTIPLE_8) & 0xFFFF;}  }
class C{  public static InputStream scaleImage(Path file,int width) throws IOException, InterruptedException {  BufferedImage originalImage=null;  try {    originalImage=createImage(file);  } catch (  Exception e) {    throw new IOException(e.getMessage());  }  Point size=new Point();  size.x=width;  size.y=size.x * originalImage.getHeight() / originalImage.getWidth();  BufferedImage scaledImage=Scalr.resize(originalImage,Scalr.Method.QUALITY,Scalr.Mode.AUTOMATIC,size.x,size.y,Scalr.OP_ANTIALIAS);  originalImage=null;  ImageWriter imgWrtr=null;  ImageWriteParam imgWrtrPrm=null;  if (hasTransparentPixels(scaledImage)) {    imgWrtr=ImageIO.getImageWritersByFormatName("png").next();    imgWrtrPrm=imgWrtr.getDefaultWriteParam();  } else {    BufferedImage rgb=new BufferedImage(scaledImage.getWidth(),scaledImage.getHeight(),BufferedImage.TYPE_INT_RGB);    ColorConvertOp xformOp=new ColorConvertOp(null);    xformOp.filter(scaledImage,rgb);    imgWrtr=ImageIO.getImageWritersByFormatName("jpg").next();    imgWrtrPrm=imgWrtr.getDefaultWriteParam();    imgWrtrPrm.setCompressionMode(JPEGImageWriteParam.MODE_EXPLICIT);    imgWrtrPrm.setCompressionQuality(0.80f);    scaledImage=rgb;  }  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ImageOutputStream output=ImageIO.createImageOutputStream(baos);  imgWrtr.setOutput(output);  IIOImage outputImage=new IIOImage(scaledImage,null,null);  imgWrtr.write(null,outputImage,imgWrtrPrm);  imgWrtr.dispose();  scaledImage=null;  byte[] bytes=baos.toByteArray();  output.flush();  output.close();  baos.close();  return new ByteArrayInputStream(bytes);}  }
class C{  public static double igamma(double a,double x){  double coef=(Math.exp(-x) * Math.pow(x,a)) / gamma(a);  double sum=0.0;  for (int i=0; i < 100; i++) {    sum+=(gamma(a) / gamma(a + 1.0 + (double)i)) * Math.pow(x,(double)i);  }  return (coef * sum);}  }
class C{  @RequestMapping(value="/property/titletransfer",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON,produces=MediaType.APPLICATION_JSON) public String transferProperty(@RequestBody String titleTransferDetails) throws JsonGenerationException, JsonMappingException, IOException, ParseException {  String responseJson=new String();  ApplicationThreadLocals.setUserId(2L);  PropertyTransferDetails propertyTransferDetails=(PropertyTransferDetails)getObjectFromJSONRequest(titleTransferDetails,PropertyTransferDetails.class);  ErrorDetails errorDetails=validationUtil.validatePropertyTransferRequest(propertyTransferDetails);  if (errorDetails != null) {    responseJson=JsonConvertor.convert(errorDetails);  } else {    String assessmentNo=propertyTransferDetails.getAssessmentNo();    String mutationReasonCode=propertyTransferDetails.getMutationReasonCode();    String saleDetails=propertyTransferDetails.getSaleDetails();    String deedNo=propertyTransferDetails.getDeedNo();    String deedDate=propertyTransferDetails.getDeedDate();    List<OwnerDetails> ownerDetailsList=getOwnerDetails(propertyTransferDetails.getOwnerDetails());    NewPropertyDetails newPropertyDetails=transferOwnerService.createPropertyMutation(assessmentNo,mutationReasonCode,saleDetails,deedNo,deedDate,ownerDetailsList);    responseJson=JsonConvertor.convert(newPropertyDetails);  }  return responseJson;}  }
class C{  public DocTreePath(DocTreePath p,DocTree t){  if (t.getKind() == DocTree.Kind.DOC_COMMENT) {    throw new IllegalArgumentException("Use DocTreePath(TreePath, DocCommentTree) to construct DocTreePath for a DocCommentTree.");  } else {    treePath=p.treePath;    docComment=p.docComment;    parent=p;  }  leaf=t;}  }
class C{  public static int damerauLevenshteinDistance(Object[] s,Object[] t){  if (s == null || t == null) {    throw new IllegalArgumentException("Arrays must not be null");  }  int n=s.length;  int m=t.length;  if (n == 0) {    return m;  } else   if (m == 0) {    return n;  }  int[][] vals=new int[3][n + 1];  int _d[];  int i;  int j;  Object t_j;  int cost;  for (i=0; i <= n; i++) {    vals[1][i]=i * DL_DELETE;  }  for (j=1; j <= m; j++) {    t_j=t[j - 1];    vals[0][0]=j * DL_DELETE;    for (i=1; i <= n; i++) {      cost=s[i - 1].equals(t_j) ? 0 : DL_SUBSTITUTION;      vals[0][i]=Math.min(Math.min(vals[0][i - 1] + DL_DELETE,vals[1][i] + DL_DELETE),vals[1][i - 1] + cost);      if (i > 1 && j > 1 && s[i - 1].equals(t[j - 2]) && s[i - 2].equals(t_j)) {        vals[0][i]=Math.min(vals[0][i],vals[2][i - 2] + DL_TRANSPOSITION);      }    }    _d=vals[2];    vals[2]=vals[1];    vals[1]=vals[0];    vals[0]=_d;  }  return vals[1][n];}  }
class C{  @Override public void experimentStage(ExecutionStageEvent e){  super.experimentStage(e);  if (m_CheckBoxClear.isSelected() && (e.getStage() == ExecutionStageEvent.Stage.INITIALIZING))   clear();}  }
class C{  public CSubFunctionMenu(final CGraphModel model,final List<Pair<INaviInstruction,INaviFunction>> functions,final boolean allowUninlining){  super("Open Subfunction");  final Set<INaviFunction> added=new HashSet<INaviFunction>();  for (  final Pair<INaviInstruction,INaviFunction> p : functions) {    if (added.contains(p.second())) {      continue;    }    added.add(p.second());    add(new JMenuItem(CActionProxy.proxy(new COpenFunctionAction(model.getParent(),model.getViewContainer(),p.second()))));  }  setEnabled(allowUninlining || !functions.isEmpty());}  }
class C{  public static <T>Observable.Transformer<T,T> observeOnUIThreadTransformer(){  return null;}  }
class C{  public CropRequest crop(){  return new CropRequest(cropView);}  }
class C{  public boolean isBetter(AssociationSessionType other){  return this.compareTo(other) > 0;}  }
class C{  public AbstractTypedGraph(EdgeType edge_type){  this.edge_type=edge_type;}  }
class C{  public LongSparseArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new long[initialCapacity];  mValues=new Object[initialCapacity];  mSize=0;}  }
class C{  @Interruptible public static Address allocateCode(BootImageInterface bootImage,RVMArray array,int numElements){  TIB tib=array.getTypeInformationBlock();  int size=array.getInstanceSize(numElements);  int align=getAlignment(array);  int offset=getOffsetForAlignment(array,false);  Address ptr=bootImage.allocateCodeStorage(size,align,offset);  Address ref=JavaHeader.initializeArrayHeader(bootImage,ptr,tib,size,numElements,false,0);  bootImage.setFullWord(ref.plus(getArrayLengthOffset()),numElements);  MemoryManager.initializeHeader(bootImage,ref,tib,size,false);  MiscHeader.initializeHeader(bootImage,ref,tib,size,false);  return ref;}  }
class C{  public static void main(String[] args) throws Exception {  SpringApplication.run(Application.class,args);}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  private void sendReportTrackToEditor(JSONObject eventJson){  if (mEditorConnection == null || !mEditorConnection.isValid() || eventJson == null) {    return;  }  final JSONObject sendProperties=eventJson.optJSONObject("properties");  if (sendProperties == null) {    return;  }  if (SensorsDataAPI.ENABLE_LOG) {    Log.d(LOGTAG,"Sending debug track to vtrack. original event: " + eventJson.toString());  }  final String fromVTrack=sendProperties.optString("$from_vtrack","");  if (fromVTrack.length() < 1) {    return;  }  final OutputStream out=mEditorConnection.getBufferedOutputStream();  final OutputStreamWriter writer=new OutputStreamWriter(out);  try {    JSONObject payload=new JSONObject();    payload.put("depolyed",sendProperties.getBoolean("$binding_depolyed"));    payload.put("trigger_id",sendProperties.getString("$binding_trigger_id"));    payload.put("path",sendProperties.getString("$binding_path"));    sendProperties.remove("$binding_path");    sendProperties.remove("$binding_depolyed");    sendProperties.remove("$binding_trigger_id");    eventJson.put("properties",sendProperties);    payload.put("event",eventJson);    JSONObject result=new JSONObject();    result.put("type","debug_track");    result.put("payload",payload);    writer.write(result.toString());    writer.flush();  } catch (  JSONException e) {    Log.e(LOGTAG,"Invalied proprties",e);  }catch (  final IOException e) {    Log.e(LOGTAG,"Can't write track_message to server",e);  } finally {    try {      writer.close();    } catch (    final IOException e) {      Log.e(LOGTAG,"Can't close writer.",e);    }  }}  }
class C{  public static String formatFileSize(Context context,long number){  return formatFileSize(context,number,false);}  }
class C{  @Override public boolean isModified(){  if (_dependencyList.isModified()) {    return true;  }synchronized (_pathList) {    _newPathList.clear();    loadPaths(_newPathList);    Collections.sort(_newPathList);    return !_newPathList.equals(_pathList);  }}  }
class C{  public void sendMessage(String body,String formattedBody,String format){  if (!TextUtils.isEmpty(body)) {    if (!SlashComandsParser.manageSplashCommand(this,mSession,mRoom,body,formattedBody,format)) {      cancelSelectionMode();      mVectorMessageListFragment.sendTextMessage(body,formattedBody,format);    }  }}  }
class C{  public boolean isMatch(){  return match;}  }
class C{  public static void main(String[] args) throws Exception {  DemoUtils.setDkproHome(WekaComplexConfigurationSingleDemo.class.getSimpleName());  ParameterSpace pSpace=getParameterSpace();  WekaComplexConfigurationSingleDemo experiment=new WekaComplexConfigurationSingleDemo();  experiment.runTrainTest(pSpace);}  }
class C{  private void validate(){  if (!fileController.isValid())   fileController=new BasicFileIconController();}  }
class C{  private int determinePhoto(Player player){  StendhalRPWorld world=StendhalRPWorld.get();  List<Integer> photos=new LinkedList<Integer>();  if (player.hasQuest("weapons_collector")) {    photos.add(Integer.valueOf(0));  }  if (player.getLevel() < 50) {    photos.add(Integer.valueOf(1));  }  if (player.hasVisitedZone(world.getZone("-1_semos_dungeon"))) {    photos.add(Integer.valueOf(2));  }  if (player.hasVisitedZone(world.getZone("int_afterlife"))) {    photos.add(Integer.valueOf(3));  }  if (player.hasQuest("jenny_mill_flour")) {    photos.add(Integer.valueOf(4));  }  if (player.hasVisitedZone(world.getZone("0_semos_mountain_n_w2"))) {    photos.add(Integer.valueOf(5));  }  if (player.hasVisitedZone(world.getZone("0_ados_wall_n"))) {    photos.add(Integer.valueOf(6));  }  if (player.hasVisitedZone(world.getZone("int_semos_wizards_tower_basement"))) {    photos.add(Integer.valueOf(7));  }  if (player.hasVisitedZone(world.getZone("-1_ados_outside_nw"))) {    photos.add(Integer.valueOf(8));  }  if (player.hasVisitedZone(world.getZone("int_semos_wizards_tower_9"))) {    photos.add(Integer.valueOf(9));  }  if (player.hasQuest("icecream_for_annie")) {    photos.add(Integer.valueOf(10));  }  if (player.hasQuest("solve_riddles")) {    photos.add(Integer.valueOf(11));  }  if (player.hasVisitedZone(world.getZone("int_imorgens_house"))) {    photos.add(Integer.valueOf(12));  }  if (player.hasVisitedZone(world.getZone("0_nalwor_city"))) {    photos.add(Integer.valueOf(14));  }  if (player.hasVisitedZone(world.getZone("int_oni_palace_2"))) {    photos.add(Integer.valueOf(15));  }  if (player.hasQuest("campfire")) {    photos.add(Integer.valueOf(16));  }  return Rand.rand(photos).intValue();}  }
class C{  private void writePeriod() throws AdeException {  Systems systems=new Systems();  systems.setVersion(XML_VERSION);  Date startTime=PeriodUtils.getContainingPeriodStart(m_periodStartDate);  m_gc.setTimeInMillis(startTime.getTime());  XMLGregorianCalendar startXMLDate=s_dataTypeFactory.newXMLGregorianCalendar(m_gc);  systems.setStartTime(startXMLDate);  Date endTime=PeriodUtils.getNextPeriodStart(m_periodStartDate);  m_gc.setTimeInMillis(endTime.getTime());  XMLGregorianCalendar endXMLDate=s_dataTypeFactory.newXMLGregorianCalendar(m_gc);  systems.setEndTime(endXMLDate);  systems.setGmtOffset(m_xmlMetaData.getGMTOffset(m_source.getSourceId()));  systems.setIntervalSize(m_xmlMetaData.getIntervalLengthInSeconds());  NumberIntervals numberOfIntervals=new NumberIntervals();  systems.setNumberIntervals(numberOfIntervals);  numberOfIntervals.setValue(XMLUtil.getNumberOfSnapshots(m_framingFlowType));  numberOfIntervals.setAnalysisSnapshotSize(XMLUtil.getXMLHardenedDurationInSeconds(m_framingFlowType));  ModelInfo modelInfo=new ModelInfo();  systems.setModelInfo(modelInfo);  modelInfo.setAnalysisGroup(m_xmlMetaData.getAnalysisGroupName());  modelInfo.setModelCreationDate(m_xmlMetaData.getModelCreationDate());  modelInfo.setTrainingPeriod(m_xmlMetaData.getNumberOfDaysInTraining());  SystemsSystemType system=new SystemsSystemType();  systems.setSystem(system);  system.setLogType(m_xmlMetaData.getLogType());  system.setSysId(m_source.getSourceId());  List<SystemsIntervalType> listOfInterval=system.getInterval();  for (int i=0; i < m_numIntervals; ++i) {    SystemsIntervalType intervalType=new SystemsIntervalType();    listOfInterval.add(intervalType);    if (m_aiVec[i].m_results_file != null && m_aiVec[i].m_results_file.length() > 0) {      intervalType.setMissing(false);    } else {      intervalType.setMissing(true);      intervalType.setMissingReason(MISSING_INTERVAL_REASON_NO_CONNECTION);    }    intervalType.setIndex(i);    double value=Double.parseDouble(SingleDigitFormatter.format(m_aiVec[i].m_anomaly_score * 100));    intervalType.setAnomalyScore(value);    intervalType.setNumUniqueMsgIds(m_aiVec[i].m_num_unique_msg_ids);    intervalType.setNumNewMessages(m_aiVec[i].m_numNewMessages);    intervalType.setNumNeverSeenBeforeMessages(m_aiVec[i].m_numNeverSeenBeforeMessages);    intervalType.setLimitedModel(m_aiVec[i].m_modelQualityIndicator.toString());  }  writeToXML(systems,s_marshaller);}  }
class C{  @Override public boolean ignoresThrowable(){  return false;}  }
class C{  public static Map singletonMap(Object key,Object value){  return new SingletonMap(key,value);}  }
class C{  public mxCellCodec(){  this(new mxCell(),null,new String[]{"parent","source","target"},null);}  }
class C{  void deleteExpiredBuckets(long time){  Iterator<Long> iterator=dirtyBuckets.keySet().iterator();  for (; iterator.hasNext(); ) {    long key=iterator.next();    Bucket t=dirtyBuckets.get(key);    if (startOfBucketsInMillis + (t.bucketKey * bucketSpanInMillis) < time) {      deleteBucket(t);      iterator.remove();    }  }}  }
class C{  public void testConstructor3(){  try {    LinkedBlockingQueue q=new LinkedBlockingQueue(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public IElementType parseVersion(){  if (SIGILS_TOKENS.contains(getTokenHistory().getLastTokenType()) || isBraced() && SIGILS_TOKENS.contains(getTokenHistory().getLastUnbracedTokenType())) {    CharSequence tokenText=yytext();    Matcher m=VERSION_IDENTIFIER_PATTERN.matcher(tokenText);    if (m.find()) {      if (m.group(1).length() < tokenText.length()) {        yypushback(tokenText.length() - m.group(1).length());      }      return IDENTIFIER;    }  }  return NUMBER_VERSION;}  }
class C{  public final void testPSSParameterSpec0202(){  try {    new PSSParameterSpec(null,"MGF1",MGF1ParameterSpec.SHA1,20,1);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  private static int readInt() throws IOException {  String input=readLine();  try {    return Integer.parseInt(input);  } catch (  NumberFormatException nfe) {    return 0;  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public void bundlepool(File bundlePool){  addArg("bundlepool",bundlePool.getAbsolutePath());}  }
class C{  public void disconnect(){  if (isClosed() || !isConnected()) {    return;  }  impl.disconnect();  address=null;  port=-1;  isConnected=false;}  }
class C{  public void shutdown(){  CountDownLatch latch=new CountDownLatch(1);  shutdown(null);  try {    if (!latch.await(5,TimeUnit.SECONDS)) {      LOG.error("shutdown of client timed out");    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  @Override public void onMoved(final ActiveEntity entity,final StendhalRPZone zone,final int oldX,final int oldY,final int newX,final int newY){}  }
class C{  @Override public float floatValue(){  return value;}  }
class C{  public boolean contains(Object o){  return indexOf(o) != -1;}  }
class C{  public ElemForEach(){}  }
class C{  public synchronized void addAction(long schedule,IAction action){  SchedulerAction schedulerAction=new SchedulerAction(schedule,action);  addSchedulerAction(schedulerAction);}  }
class C{  public Model(){  super();  tree=new KDTree(2);}  }
class C{  @Override public final boolean isValid(){  return isValid;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforenomodificationallowederr.class,args);}  }
class C{  public void addFormField(String name,String value){  log.debug("add form field: " + name + "; value: "+ value);  writer.append("--" + boundary).append(LINE_FEED);  writer.append("Content-Disposition: form-data; name=\"" + name + "\"").append(LINE_FEED);  writer.append("Content-Type: text/plain; charset=" + charSet).append(LINE_FEED);  writer.append(LINE_FEED);  writer.append(value).append(LINE_FEED);  writer.flush();}  }
class C{  public final Object nextElement(){  Object result=m_Vector.elementAt(m_Counter);  m_Counter++;  if (m_Counter == m_SpecialElement) {    m_Counter++;  }  return result;}  }
class C{  public InlineQueryResultVideo.InlineQueryResultVideoBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public void sizeChanged(int w,int h){  Form current=impl.getCurrentForm();  if (current == null) {    return;  }  if (w == current.getWidth() && h == current.getHeight()) {    return;  }  addSizeChangeEvent(SIZE_CHANGED,w,h);}  }
class C{  public Kim(byte[] bytes,int length){  this(bytes,0,length);}  }
class C{  public PermissionCollection newPermissionCollection(){  return new KrbDelegationPermissionCollection();}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{qos_id}/disassociate") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Response disassociateQosFromVolumeType(@PathParam("tenant_id") String openstackTenantId,@PathParam("qos_id") String qosId,@QueryParam("vol_type_id") String volTypeId){  _log.debug("START disassociate qos from volume type(virtual pool)");  throw new UnsupportedOperationException();}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.removePropertyChangeListener(pcl);}  }
class C{  public static boolean printInstances(Compute compute) throws IOException {  System.out.println("================== Listing Compute Engine Instances ==================");  Compute.Instances.List instances=compute.instances().list(PROJECT_ID,ZONE_NAME);  InstanceList list=instances.execute();  boolean found=false;  if (list.getItems() == null) {    System.out.println("No instances found. Sign in to the Google Developers Console and create " + "an instance at: https://console.developers.google.com/");  } else {    for (    Instance instance : list.getItems()) {      System.out.println(instance.toPrettyString());      if (instance.getName().equals(SAMPLE_INSTANCE_NAME)) {        found=true;      }    }  }  return found;}  }
class C{  public BoundingBox(BoundingBox bounds){  crn_dirty=true;  for (int l_idx=0; l_idx < 8; l_idx++)   crn[l_idx]=new Vector3();  this.set(bounds);}  }
class C{  private void calculateUpdates(BSPPeer<LongWritable,FloatVectorWritable,NullWritable,NullWritable,ParameterMessage> peer) throws IOException {  if (peer.getNumCurrentMessages() != 0) {    ParameterMessage inMessage=peer.getCurrentMessage();    FloatMatrix[] newWeights=inMessage.getCurMatrices();    FloatMatrix[] preWeightUpdates=inMessage.getPrevMatrices();    this.inMemoryModel.setWeightMatrices(newWeights);    this.inMemoryModel.setPrevWeightMatrices(preWeightUpdates);    this.isConverge=inMessage.isConverge();    if (isConverge) {      return;    }  }  FloatMatrix[] weightUpdates=new FloatMatrix[this.inMemoryModel.weightMatrixList.size()];  for (int i=0; i < weightUpdates.length; ++i) {    int row=this.inMemoryModel.weightMatrixList.get(i).getRowCount();    int col=this.inMemoryModel.weightMatrixList.get(i).getColumnCount();    weightUpdates[i]=new DenseFloatMatrix(row,col);  }  float avgTrainingError=0.0f;  for (int recordsRead=0; recordsRead < batchSize; ++recordsRead) {    FloatVector trainingInstance=getRandomInstance();    LayeredNeuralNetwork.matricesAdd(weightUpdates,this.inMemoryModel.trainByInstance(trainingInstance));    avgTrainingError+=this.inMemoryModel.trainingError;  }  avgTrainingError/=batchSize;  for (int i=0; i < weightUpdates.length; ++i) {    weightUpdates[i]=weightUpdates[i].divide(batchSize);  }  FloatMatrix[] prevWeightUpdates=this.inMemoryModel.getPrevMatricesUpdates();  ParameterMessage outMessage=new ParameterMessage(avgTrainingError,false,weightUpdates,prevWeightUpdates);  peer.send(peer.getPeerName(peer.getNumPeers() - 1),outMessage);}  }
class C{  public void test_stress_startWriteStop2() throws InterruptedException, ExecutionException {  final int LIMIT=10000;  int nerr=0;  for (int i=0; i < LIMIT; i++) {    try {      doStartWriteStop2Test();    } catch (    Throwable t) {      log.warn("Would have failed: pass#=" + i + ", cause="+ t);      nerr++;    }  }  if (nerr > 0) {    log.error("Test would have failed: nerrs=" + nerr + " out of "+ LIMIT+ " trials");  }}  }
class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  super.declareExtensions(extProfile);  extProfile.declare(SitemapsRegularEntry.class,ExtensionDescription.getDefaultDescription(SitemapType.class));}  }
class C{  public boolean containsValue(Object value){  return map.containsValue(value);}  }
class C{  public String innerClass(int nth){  int i=innerClassIndex(nth);  if (i == 0)   return null; else   return constPool.getClassInfo(i);}  }
class C{  @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.537 -0500",hash_original_method="2558578E34A043045AE1AF32A3800D82",hash_generated_method="F9CD515A4E2C5B16D0DE692CF1A61742") public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public Object encode(Object pObject){  if (!(pObject instanceof byte[])) {    throw new InvalidParameterException("Parameter supplied to Base64 encode is not a byte[]");  }  return encode((byte[])pObject);}  }
class C{  public synchronized void engineDeleteEntry(String alias) throws KeyStoreException {  token.ensureValid();  if (token.isWriteProtected()) {    throw new KeyStoreException("token write-protected");  }  checkWrite();  deleteEntry(alias);}  }
class C{  private static double calcSignedPolygonArea(final Point2D[] pointArray){  final int N=pointArray.length;  int i;  int j;  double area=0;  for (i=0; i < N; i++) {    j=(i + 1) % N;    area+=pointArray[i].getX() * pointArray[j].getY();    area-=pointArray[i].getY() * pointArray[j].getX();  }  area/=2.0;  return (area);}  }
class C{  public static long[] genNativeStackItem(long[][] oinfo,long[] fidinfo,boolean allowfidnull){  long[] ret=new long[4];  long fid;  boolean found;  if (fidinfo.length != 2) {    throw new IllegalArgumentException("the length of field id array is not exactly 2");  }  for (int idx=0; idx < fidinfo.length; ++idx) {    ret[idx * 2]=-1L;    ret[idx * 2 + 1]=0L;    fid=fidinfo[idx];    if (fid <= 0) {      if (allowfidnull && 0 == idx) {        continue;      } else {        throw new IllegalArgumentException("the field id is not greater than 0");      }    }    found=false;    for (    long[] finfo : oinfo) {      if (finfo.length != 3) {        throw new IllegalArgumentException("the length of field array is not exactly 3");      }      if (fid == finfo[0]) {        ret[idx * 2]=finfo[1];        ret[idx * 2 + 1]=finfo[2];        found=true;      }    }    if (!found) {      throw new IllegalArgumentException("field id not found");    }  }  return ret;}  }
class C{  private void createSchemaColumnEntities(List<SchemaColumn> schemaColumns,boolean isPartitionList,Collection<SchemaColumnEntity> schemaColumnEntityList,Map<String,SchemaColumnEntity> schemaColumnEntityMap,BusinessObjectFormatEntity businessObjectFormatEntity){  if (!CollectionUtils.isEmpty(schemaColumns)) {    int position=1;    for (    SchemaColumn schemaColumn : schemaColumns) {      SchemaColumnEntity schemaColumnEntity=schemaColumnEntityMap.get(schemaColumn.getName());      if (schemaColumnEntity == null) {        schemaColumnEntity=createSchemaColumnEntity(schemaColumn,businessObjectFormatEntity);        schemaColumnEntityList.add(schemaColumnEntity);        schemaColumnEntityMap.put(schemaColumn.getName(),schemaColumnEntity);      }      if (isPartitionList) {        schemaColumnEntity.setPartitionLevel(position++);      } else {        schemaColumnEntity.setPosition(position++);      }    }  }}  }
class C{  @Override public String toString(){  StringBuffer BfString=new StringBuffer();  BfString.append("\tBest first.\n\tStart set: ");  if (m_starting == null) {    BfString.append("no attributes\n");  } else {    BfString.append(startSetToString() + "\n");  }  BfString.append("\tSearch direction: ");  if (m_searchDirection == SELECTION_BACKWARD) {    BfString.append("backward\n");  } else {    if (m_searchDirection == SELECTION_FORWARD) {      BfString.append("forward\n");    } else {      BfString.append("bi-directional\n");    }  }  BfString.append("\tStale search after " + m_maxStale + " node expansions\n");  BfString.append("\tTotal number of subsets evaluated: " + m_totalEvals + "\n");  BfString.append("\tMerit of best subset found: " + Utils.doubleToString(Math.abs(m_bestMerit),8,3) + "\n");  return BfString.toString();}  }
class C{  public AxisAngle4f(AxisAngle4f a1){  this.x=a1.x;  this.y=a1.y;  this.z=a1.z;  this.angle=a1.angle;}  }
class C{  private boolean dynInit(WButtonEditor button) throws Exception {  m_DocStatus=(String)m_mTab.getValue("DocStatus");  log.config(m_DocStatus);  if (m_mTab.getValue("C_BPartner_ID") == null) {    FDialog.error(0,this,"SaveErrorRowNotFound");    return false;  }  m_DocStatus=(String)m_mTab.getValue("DocStatus");  if (m_DocStatus == null)   m_DocStatus="";  if (m_DocStatus.equals("RE") || m_DocStatus.equals("VO") || m_DocStatus.equals("CL"))   return false;  if (m_DocStatus.equals("CO") || m_DocStatus.equals("WP"))   m_onlyRule=false; else   m_onlyRule=true;  if (!m_onlyRule && !m_isSOTrx && m_mTab.getValue("M_Warehouse_ID") != null)   m_onlyRule=true;  centerPanel.setVisible(!m_onlyRule);  m_Amount=(BigDecimal)m_mTab.getValue("GrandTotal");  if (!m_onlyRule && m_Amount.compareTo(Env.ZERO) == 0) {    FDialog.error(m_WindowNo,this,"PaymentZero");    return false;  }  bAmountField.setValue(m_Amount);  sAmountField.setValue(m_Amount);  kAmountField.setValue(m_Amount);  m_AD_Client_ID=((Integer)m_mTab.getValue("AD_Client_ID")).intValue();  m_Cash_As_Payment=MSysConfig.getBooleanValue("CASH_AS_PAYMENT",true,m_AD_Client_ID);  m_AD_Org_ID=((Integer)m_mTab.getValue("AD_Org_ID")).intValue();  m_C_BPartner_ID=((Integer)m_mTab.getValue("C_BPartner_ID")).intValue();  m_PaymentRule=(String)m_mTab.getValue("PaymentRule");  m_C_Currency_ID=((Integer)m_mTab.getValue("C_Currency_ID")).intValue();  m_DateAcct=(Timestamp)m_mTab.getValue("DateAcct");  if (m_mTab.getValue("C_PaymentTerm_ID") != null)   m_C_PaymentTerm_ID=((Integer)m_mTab.getValue("C_PaymentTerm_ID")).intValue();  if (m_mTab.getValue("C_Payment_ID") != null) {    m_C_Payment_ID=((Integer)m_mTab.getValue("C_Payment_ID")).intValue();    if (m_C_Payment_ID != 0) {      m_mPayment=new MPayment(Env.getCtx(),m_C_Payment_ID,null);      m_mPaymentOriginal=new MPayment(Env.getCtx(),m_C_Payment_ID,null);      m_CCType=m_mPayment.getCreditCardType();      kNumberField.setText(m_mPayment.getCreditCardNumber());      kExpField.setText(m_mPayment.getCreditCardExp(null));      kApprovalField.setText(m_mPayment.getVoiceAuthCode());      kStatus.setText(m_mPayment.getR_PnRef());      kAmountField.setValue(m_mPayment.getPayAmt());      kTypeCombo.setEnabled(!m_mPayment.isApproved());      kNumberField.setReadonly(m_mPayment.isApproved());      kExpField.setReadonly(m_mPayment.isApproved());      kApprovalField.setReadonly(m_mPayment.isApproved());      kOnline.setEnabled(!m_mPayment.isApproved());      kAmountField.setReadWrite(!m_mPayment.isApproved());      m_C_BankAccount_ID=m_mPayment.getC_BankAccount_ID();      sRoutingField.setText(m_mPayment.getRoutingNo());      sNumberField.setText(m_mPayment.getAccountNo());      sCheckField.setText(m_mPayment.getCheckNo());      sStatus.setText(m_mPayment.getR_PnRef());      sAmountField.setValue(m_mPayment.getPayAmt());      tRoutingField.setText(m_mPayment.getRoutingNo());      tNumberField.setText(m_mPayment.getAccountNo());      tStatus.setText(m_mPayment.getR_PnRef());      bAmountField.setValue(m_mPayment.getPayAmt());    }  }  if (m_mPayment == null) {    m_mPayment=new MPayment(Env.getCtx(),0,null);    m_mPayment.setAD_Org_ID(m_AD_Org_ID);    m_mPayment.setAmount(m_C_Currency_ID,m_Amount);  }  m_cashLine=null;  m_C_CashLine_ID=0;  if (m_mTab.getValue("C_CashLine_ID") != null) {    m_C_CashLine_ID=((Integer)m_mTab.getValue("C_CashLine_ID")).intValue();    if (m_C_CashLine_ID == 0)     m_cashLine=null; else {      m_cashLine=new MCashLine(Env.getCtx(),m_C_CashLine_ID,null);      m_DateAcct=m_cashLine.getStatementDate();      m_C_CashBook_ID=m_cashLine.getCashBook().getC_CashBook_ID();      bAmountField.setValue(m_cashLine.getAmount());    }  }  bDateField.setValue(m_DateAcct);  if (s_Currencies == null)   loadCurrencies();  Integer C_Currency_ID=new Integer(m_C_Currency_ID);  if (s_Currencies.containsKey(C_Currency_ID)) {    Enumeration<Integer> en=s_Currencies.keys();    while (en.hasMoreElements()) {      Object key=en.nextElement();      bCurrencyCombo.addItem(s_Currencies.get(key));      sCurrencyCombo.addItem(s_Currencies.get(key));    }    sCurrencyCombo.addActionListener(this);    sCurrencyCombo.setSelectedKeyNamePair(s_Currencies.get(C_Currency_ID));    bCurrencyCombo.addActionListener(this);    bCurrencyCombo.setSelectedKeyNamePair(s_Currencies.get(C_Currency_ID));  } else {    bCurrencyLabel.setVisible(false);    bCurrencyCombo.setVisible(false);    sCurrencyLabel.setVisible(false);    sCurrencyCombo.setVisible(false);  }  if (m_PaymentRule == null)   m_PaymentRule="";  ValueNamePair vp=null;  HashMap<String,String> values=button.getValues();  Object[] a=values.keySet().toArray();  for (int i=0; i < a.length; i++) {    String PaymentRule=(String)a[i];    if (X_C_Order.PAYMENTRULE_DirectDebit.equals(PaymentRule) && !m_isSOTrx)     continue; else     if (X_C_Order.PAYMENTRULE_DirectDeposit.equals(PaymentRule) && m_isSOTrx)     continue;    ValueNamePair pp=new ValueNamePair(PaymentRule,(String)values.get(a[i]));    paymentCombo.addItem(pp);    if (PaymentRule.toString().equals(m_PaymentRule))     vp=pp;  }  paymentCombo.addActionListener(this);  if (vp != null) {    paymentCombo.setSelectedValueNamePair(vp);    onPaymentComboSelection();  }  String SQL=MRole.getDefault().addAccessSQL("SELECT C_PaymentTerm_ID, Name FROM C_PaymentTerm WHERE IsActive='Y' ORDER BY Name","C_PaymentTerm",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  KeyNamePair kp=null;  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int key=rs.getInt(1);      String name=rs.getString(2);      KeyNamePair pp=new KeyNamePair(key,name);      pTermCombo.addItem(pp);      if (key == m_C_PaymentTerm_ID)       kp=pp;    }    rs.close();    pstmt.close();  } catch (  SQLException ept) {    log.log(Level.SEVERE,SQL,ept);  }  if (kp != null)   pTermCombo.setSelectedKeyNamePair(kp);  SQL="SELECT a.C_BP_BankAccount_ID, NVL(b.Name, ' ')||'_'||NVL(a.AccountNo, ' ') AS Acct " + "FROM C_BP_BankAccount a" + " LEFT OUTER JOIN C_Bank b ON (a.C_Bank_ID=b.C_Bank_ID) "+ "WHERE C_BPartner_ID=?"+ "AND a.IsActive='Y' AND a.IsACH='Y'";  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    pstmt.setInt(1,m_C_BPartner_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int key=rs.getInt(1);      String name=rs.getString(2);      KeyNamePair pp=new KeyNamePair(key,name);      tAccountCombo.addItem(pp);    }    rs.close();    pstmt.close();  } catch (  SQLException eac) {    log.log(Level.SEVERE,SQL,eac);  }  ValueNamePair[] ccs=m_mPayment.getCreditCards();  vp=null;  for (int i=0; i < ccs.length; i++) {    kTypeCombo.addItem(ccs[i]);    if (ccs[i].getValue().equals(m_CCType))     vp=ccs[i];  }  if (vp != null)   kTypeCombo.setSelectedValueNamePair(vp);  SQL=MRole.getDefault().addAccessSQL("SELECT C_BankAccount_ID, Name || ' ' || AccountNo, IsDefault " + "FROM C_BankAccount ba" + " INNER JOIN C_Bank b ON (ba.C_Bank_ID=b.C_Bank_ID) "+ "WHERE b.IsActive='Y'","ba",MRole.SQL_FULLYQUALIFIED,MRole.SQL_RO);  kp=null;  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int key=rs.getInt(1);      String name=rs.getString(2);      KeyNamePair pp=new KeyNamePair(key,name);      sBankAccountCombo.addItem(pp);      bBankAccountCombo.addItem(pp);      if (key == m_C_BankAccount_ID)       kp=pp;      if (kp == null && rs.getString(3).equals("Y"))       kp=pp;    }    rs.close();    pstmt.close();  } catch (  SQLException ept) {    log.log(Level.SEVERE,SQL,ept);  }  if (kp != null) {    sBankAccountCombo.setSelectedKeyNamePair(kp);    bBankAccountCombo.setSelectedKeyNamePair(kp);  }  SQL=MRole.getDefault().addAccessSQL("SELECT C_CashBook_ID, Name, AD_Org_ID FROM C_CashBook WHERE IsActive='Y'","C_CashBook",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  kp=null;  try {    PreparedStatement pstmt=DB.prepareStatement(SQL,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int key=rs.getInt(1);      String name=rs.getString(2);      KeyNamePair pp=new KeyNamePair(key,name);      bCashBookCombo.addItem(pp);      if (key == m_C_CashBook_ID)       kp=pp;      if (kp == null && key == m_AD_Org_ID)       kp=pp;    }    rs.close();    pstmt.close();  } catch (  SQLException epc) {    log.log(Level.SEVERE,SQL,epc);  }  if (kp != null) {    bCashBookCombo.setSelectedKeyNamePair(kp);    if (m_C_CashBook_ID == 0)     m_C_CashBook_ID=kp.getKey();  }  return true;}  }
class C{  public WriteStreamOld(){}  }
class C{  public long length(){  return metadata.length();}  }
class C{  public ParserConfigurationException(){}  }
class C{  private void putDestroyedEntryInMultiplePartitionedRegion(VM vm0,VM vm1,VM vm2,VM vm3,int startIndexForRegion,int endIndexForRegion) throws Throwable {  int AsyncInvocationArrSize=4;  AsyncInvocation[] async=new AsyncInvocation[AsyncInvocationArrSize];  int delta=(endIndexForDestroy - startIndexForDestroy) / 4;  async[0]=vm0.invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForDestroy,startIndexForDestroy + delta * 1,startIndexForRegion,endIndexForRegion));  async[1]=vm1.invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForDestroy + delta * 1,startIndexForDestroy + delta * 2,startIndexForRegion,endIndexForRegion));  async[2]=vm2.invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForDestroy + delta * 2,startIndexForDestroy + delta * 3,startIndexForRegion,endIndexForRegion));  async[3]=vm3.invokeAsync(putInMultiplePartitionRegion(prPrefix,startIndexForDestroy + delta * 3,endIndexForDestroy,startIndexForRegion,endIndexForRegion));  for (int count=0; count < AsyncInvocationArrSize; count++) {    ThreadUtils.join(async[count],30 * 1000);  }  for (int count=0; count < AsyncInvocationArrSize; count++) {    if (async[count].exceptionOccurred()) {      Assert.fail("exception during " + count,async[count].getException());    }  }}  }
class C{  public void mouseDragged(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static EntityAttributeManager instance(){  if (instance == null) {    instance=new EntityAttributeManager();  }  return instance;}  }
class C{  public static PatternFollowedByExpr followedBy(PatternExpr first,PatternExpr second,PatternExpr... more){  return new PatternFollowedByExpr(first,second,more);}  }
class C{  static Set<Class<? extends Annotation>> findAnnotationsForMethod(String className,String methodName,String methodDesc){  for (  AnnotatedElement elem : thingsToAnnotate.keySet()) {    if (elem instanceof Method) {      Method m=(Method)elem;      if (m.getDeclaringClass().getName().equals(className) && m.getName().equals(methodName) && Type.getMethodDescriptor(m).equals(methodDesc)) {        annotatedElements.add(m);        return thingsToAnnotate.get(m);      }    } else     if (elem instanceof Constructor) {      Constructor m=(Constructor)elem;      if (m.getDeclaringClass().getName().equals(className) && Type.getConstructorDescriptor(m).equals(methodDesc)) {        annotatedElements.add(m);        return thingsToAnnotate.get(m);      }    }  }  ElementTriple triple=new ElementTriple(className,methodName,methodDesc);  Set<Class<? extends Annotation>> set=thingsToAnnotate2.get(triple);  if (set != null) {    annotatedElements2.add(triple);  }  return set;}  }
class C{  static Class<?> findViewClass(Context context,String name) throws ClassNotFoundException {  if (name.indexOf('.') >= 0) {    return loadViewClass(context,name);  }  for (  String prefix : VIEW_CLASS_PREFIX_LIST) {    try {      return loadViewClass(context,prefix + name);    } catch (    ClassNotFoundException e) {      continue;    }  }  throw new ClassNotFoundException("Couldn't load View class for " + name);}  }
class C{  private String describeExtendedKeyCode(long extendedKeyCode){  if (extendedKeyCode == INVALID_EXTENDED_KEY_CODE) {    return getContext().getString(R.string.no_key_assigned);  }  StringBuilder keystrokeDescriptionBuilder=new StringBuilder();  if ((extendedKeyCode & (((long)KeyEvent.META_CTRL_ON) << 32)) != 0) {    keystrokeDescriptionBuilder.append(getContext().getString(R.string.key_combo_preference_control_plus));  }  if ((extendedKeyCode & (((long)KeyEvent.META_ALT_ON) << 32)) != 0) {    keystrokeDescriptionBuilder.append(getContext().getString(R.string.key_combo_preference_alt_plus));  }  if ((extendedKeyCode & (((long)KeyEvent.META_SHIFT_ON) << 32)) != 0) {    keystrokeDescriptionBuilder.append(getContext().getString(R.string.key_combo_preference_shift_plus));  }  KeyEvent keyEvent=new KeyEvent(KeyEvent.ACTION_DOWN,(int)extendedKeyCode);  char displayLabel=keyEvent.getDisplayLabel();  if (displayLabel != 0 && !Character.isWhitespace(displayLabel)) {    keystrokeDescriptionBuilder.append(displayLabel);  } else   if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_SPACE) {    keystrokeDescriptionBuilder.append(getContext().getString(R.string.name_of_space_bar));  } else   if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_ENTER) {    keystrokeDescriptionBuilder.append(getContext().getString(R.string.name_of_enter_key));  } else   if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_TAB) {    keystrokeDescriptionBuilder.append(getContext().getString(R.string.name_of_tab_key));  } else {    keystrokeDescriptionBuilder.append(KeyEvent.keyCodeToString((int)extendedKeyCode));  }  return keystrokeDescriptionBuilder.toString();}  }
class C{  public TransitionDrawable(Drawable[] layers){  this(new TransitionState(null,null,null),layers);}  }
class C{  private static int med3(int a,int b,int c,IntComparator comp){  int ab=comp.compare(a,b);  int ac=comp.compare(a,c);  int bc=comp.compare(b,c);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  public HyperGeometric(int N,int s,int n,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(N,s,n);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean addIfAbsent(E e){  Object[] elements;  Object[] newElements;  do {    elements=array;    int len=elements.length;    newElements=new Object[len + 1];    for (int i=0; i < len; ++i) {      if (eq(e,elements[i])) {        return false;      }      newElements[i]=elements[i];    }    newElements[len]=e;  } while (!replaceArray(elements,newElements));  return true;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","npumd");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public byte[] encodeAsBytes(String transport){  if (this.isNullRequest()) {    return "\r\n\r\n".getBytes();  } else   if (this.requestLine == null) {    return new byte[0];  }  byte[] rlbytes=null;  if (requestLine != null) {    try {      rlbytes=requestLine.encode().getBytes("UTF-8");    } catch (    UnsupportedEncodingException ex) {      InternalErrorHandler.handleException(ex);    }  }  byte[] superbytes=super.encodeAsBytes(transport);  byte[] retval=new byte[rlbytes.length + superbytes.length];  System.arraycopy(rlbytes,0,retval,0,rlbytes.length);  System.arraycopy(superbytes,0,retval,rlbytes.length,superbytes.length);  return retval;}  }
class C{  public MonitorDelta delta(MonitorDelta previous){  MonitorDelta delta=new MonitorDelta();  delta.label=label;  delta.units=units;  delta.hits=hits - previous.getHits();  delta.total=total - previous.getTotal();  double currentAverage=(hits > previous.getHits()) ? (total - previous.getTotal()) / (hits - previous.getHits()) : 0;  delta.avg=currentAverage;  delta.min=min - previous.getMin();  delta.max=max - previous.getMax();  delta.stdDev=stdDev - previous.getStdDev();  delta.firstAccess=firstAccess;  delta.lastAccess=lastAccess;  delta.lastValue=lastValue - previous.getLastValue();  delta.active=active - previous.getActive();  delta.maxActive=maxActive - previous.getMaxActive();  delta.avgActive=avgActive - previous.getAvgActive();  return delta;}  }
class C{  public Collection<V> values(){  return vars.values();}  }
class C{  public void testBasic(){  DoubleBuffer buffer=new DoubleBuffer(10);  for (int i=0; i < 9; i++) {    buffer.setNext(1.0);    assertFalse(buffer.isFull());    assertEquals(1.0,buffer.getAverage());    double[] averageAndVariance=buffer.getAverageAndVariance();    assertEquals(1.0,averageAndVariance[0]);    assertEquals(0.0,averageAndVariance[1]);  }  buffer.setNext(1);  assertTrue(buffer.isFull());  assertEquals(1.0,buffer.getAverage());  double[] averageAndVariance=buffer.getAverageAndVariance();  assertEquals(1.0,averageAndVariance[0]);  assertEquals(0.0,averageAndVariance[1]);}  }
class C{  private static void populateCredentials(Set<Object> credentials,Set<?> gssCredentials){  Object cred;  Iterator<?> elements=gssCredentials.iterator();  while (elements.hasNext()) {    cred=elements.next();    if (cred instanceof SpNegoCredElement) {      cred=((SpNegoCredElement)cred).getInternalCred();    }    if (cred instanceof KerberosTicket) {      if (!cred.getClass().getName().equals("javax.security.auth.kerberos.KerberosTicket")) {        KerberosTicket tempTkt=(KerberosTicket)cred;        cred=new KerberosTicket(tempTkt.getEncoded(),tempTkt.getClient(),tempTkt.getServer(),tempTkt.getSessionKey().getEncoded(),tempTkt.getSessionKeyType(),tempTkt.getFlags(),tempTkt.getAuthTime(),tempTkt.getStartTime(),tempTkt.getEndTime(),tempTkt.getRenewTill(),tempTkt.getClientAddresses());      }      credentials.add(cred);    } else     if (cred instanceof KerberosKey) {      if (!cred.getClass().getName().equals("javax.security.auth.kerberos.KerberosKey")) {        KerberosKey tempKey=(KerberosKey)cred;        cred=new KerberosKey(tempKey.getPrincipal(),tempKey.getEncoded(),tempKey.getKeyType(),tempKey.getVersionNumber());      }      credentials.add(cred);    } else {      debug("Skipped cred element: " + cred);    }  }}  }
class C{  @Override public void writeFromObjectIntoRowForUpdateBeforeShallowDelete(Object object,AbstractRecord row,AbstractSession session,DatabaseTable table){  if (isReadOnly() || !getFields().get(0).getTable().equals(table) || isPrimaryKeyMapping()) {    return;  }  writeToRowFromAggregateForUpdateBeforeShallowDelete(row,object,getAttributeValueFromObject(object),session,table);}  }
class C{  @VisibleForTesting protected Resource loadFromDir(File resourceDir){  return loadFromDir(resourceDir,new ActionLogger(log,new BaseAction(textProvider,cfg,registrationManager)));}  }
class C{  protected Map<Axis,AxisState> drawAxes(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,PlotRenderingInfo plotState){  AxisCollection axisCollection=new AxisCollection();  for (  ValueAxis axis : this.domainAxes.values()) {    if (axis != null) {      int axisIndex=findDomainAxisIndex(axis);      axisCollection.add(axis,getDomainAxisEdge(axisIndex));    }  }  for (  ValueAxis axis : this.rangeAxes.values()) {    if (axis != null) {      int axisIndex=findRangeAxisIndex(axis);      axisCollection.add(axis,getRangeAxisEdge(axisIndex));    }  }  Map axisStateMap=new HashMap();  double cursor=dataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());  Iterator iterator=axisCollection.getAxesAtTop().iterator();  while (iterator.hasNext()) {    ValueAxis axis=(ValueAxis)iterator.next();    AxisState info=axis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.TOP,plotState);    cursor=info.getCursor();    axisStateMap.put(axis,info);  }  cursor=dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());  iterator=axisCollection.getAxesAtBottom().iterator();  while (iterator.hasNext()) {    ValueAxis axis=(ValueAxis)iterator.next();    AxisState info=axis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.BOTTOM,plotState);    cursor=info.getCursor();    axisStateMap.put(axis,info);  }  cursor=dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());  iterator=axisCollection.getAxesAtLeft().iterator();  while (iterator.hasNext()) {    ValueAxis axis=(ValueAxis)iterator.next();    AxisState info=axis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.LEFT,plotState);    cursor=info.getCursor();    axisStateMap.put(axis,info);  }  cursor=dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());  iterator=axisCollection.getAxesAtRight().iterator();  while (iterator.hasNext()) {    ValueAxis axis=(ValueAxis)iterator.next();    AxisState info=axis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.RIGHT,plotState);    cursor=info.getCursor();    axisStateMap.put(axis,info);  }  return axisStateMap;}  }
class C{  public void hide(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mLayout.getLayoutParams();  if (lp.height != 0) {    lp.height=0;    mLayout.setLayoutParams(lp);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  float y=getFloat(stack);  float x=getFloat(stack);  if (stack.getUIComponent() != null && (x >= 0 || y >= 0)) {    stack.getUIMgr().getRouter().updateLastEventTime();    stack.getUIComponent().setOverallScrollLocation(x,y,true);  }  return null;}  }
class C{  public ExifTag buildTag(int tagId,Object val){  int ifdId=getTrueIfd(tagId);  return buildTag(tagId,ifdId,val);}  }
class C{  public boolean isBluetoothAvailable(){  return !(mBluetoothAdapter == null || TextUtils.isEmpty(mBluetoothAdapter.getAddress()));}  }
class C{  public E peek(){  return get(size() - 1);}  }
class C{  private void updateDatabaseFromHeaders(State state,InnerState innerState){  mInfo.mETag=innerState.mHeaderETag;  mDB.updateDownload(mInfo);}  }
class C{  public void prefetchNTA(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void addXPathProperty(String name,String xpath,QName type,String castToType){  Class castToTypeClass=null;  if (castToType != null) {    boolean isArray=false;    if (castToType.trim().endsWith("[]")) {      isArray=true;      castToType=castToType.replace("[]","");    }    castToTypeClass=JavaClassHelper.getClassForSimpleName(castToType);    if (castToTypeClass == null) {      throw new ConfigurationException("Invalid cast-to type for xpath expression named '" + name + "', the type is not recognized");    }    if (isArray) {      castToTypeClass=Array.newInstance(castToTypeClass,0).getClass();    }  }  XPathPropertyDesc desc=new XPathPropertyDesc(name,xpath,type,castToTypeClass);  xPathProperties.put(name,desc);}  }
class C{  public void addPaste(Token tok){  this.tokens.add(tokens.size() - 1,tok);}  }
class C{  public void deleteSubCollection(final String id) throws IOException {  final Subcollection subCol=getSubColection(id);  if (subCol != null) {    collectionMap.remove(id);  }}  }
class C{  VPlexVirtualVolumeInfo createVirtualVolume(List<VolumeInfo> nativeVolumeInfoList,boolean isDistributed,boolean discoveryRequired,boolean preserveData,String winningClusterId,List<VPlexClusterInfo> clusterInfoList,boolean findVirtualVolume,boolean thinEnabled) throws VPlexApiException {  s_logger.info("Request to create {} virtual volume.",(isDistributed ? "distributed" : "local"));  if ((isDistributed) && (nativeVolumeInfoList.size() != 2)) {    throw VPlexApiException.exceptions.twoDevicesRequiredForDistVolume();  } else   if ((!isDistributed) && (nativeVolumeInfoList.size() != 1)) {    throw VPlexApiException.exceptions.oneDevicesRequiredForLocalVolume();  }  if (null == clusterInfoList) {    clusterInfoList=new ArrayList<VPlexClusterInfo>();  }  Map<VolumeInfo,VPlexStorageVolumeInfo> storageVolumeInfoMap=findStorageVolumes(nativeVolumeInfoList,discoveryRequired,clusterInfoList);  if (isDistributed) {    for (    VPlexClusterInfo clusterInfo : clusterInfoList) {      if (!clusterInfo.hasLoggingVolume()) {        throw VPlexApiException.exceptions.clusterHasNoLoggingVolumes(clusterInfo.getName());      }    }    s_logger.info("Verified logging volumes");  }  claimStorageVolumes(storageVolumeInfoMap,preserveData);  s_logger.info("Claimed storage volumes");  try {    List<VPlexStorageVolumeInfo> storageVolumeInfoList=new ArrayList<VPlexStorageVolumeInfo>();    for (    VolumeInfo nativeVolumeInfo : nativeVolumeInfoList) {      storageVolumeInfoList.add(storageVolumeInfoMap.get(nativeVolumeInfo));    }    createExtents(storageVolumeInfoList);    s_logger.info("Created extents on storage volumes");    VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();    List<VPlexExtentInfo> extentInfoList=discoveryMgr.findExtents(storageVolumeInfoList);    createLocalDevices(extentInfoList);    s_logger.info("Created local devices on extents");    String clusterId;    String deviceName;    String devicePath;    List<VPlexDeviceInfo> localDevices=discoveryMgr.findLocalDevices(extentInfoList);    if (isDistributed) {      String distributedDeviceName=createDistributedDevice(localDevices,winningClusterId);      VPlexDistributedDeviceInfo distDeviceInfo=discoveryMgr.findDistributedDevice(distributedDeviceName,true);      s_logger.info("Created distributed device on local devices");      distDeviceInfo.setLocalDeviceInfo(localDevices);      clusterId=distDeviceInfo.getClusterId();      deviceName=distDeviceInfo.getName();      devicePath=distDeviceInfo.getPath();    } else {      VPlexDeviceInfo deviceInfo=localDevices.get(0);      clusterId=deviceInfo.getCluster();      deviceName=deviceInfo.getName();      devicePath=deviceInfo.getPath();    }    createVirtualVolume(devicePath,thinEnabled);    s_logger.info("Created virtual volume on device {}",devicePath);    VPlexVirtualVolumeInfo virtualVolumeInfo=new VPlexVirtualVolumeInfo();    StringBuilder volumeNameBuilder=new StringBuilder();    volumeNameBuilder.append(deviceName);    volumeNameBuilder.append(VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX);    if (findVirtualVolume) {      virtualVolumeInfo=discoveryMgr.findVirtualVolume(clusterId,volumeNameBuilder.toString(),true,true);    } else {      virtualVolumeInfo.setName(volumeNameBuilder.toString());      virtualVolumeInfo.addCluster(clusterId);    }    return virtualVolumeInfo;  } catch (  Exception e) {    s_logger.info("Exception occurred creating virtual volume, attempting to cleanup VPLEX artifacts");    try {      deleteVirtualVolume(nativeVolumeInfoList);    } catch (    Exception ex) {      s_logger.error("Failed attempting to cleanup VPLEX after failed attempt " + "to create a new virtual volume",ex);    }    throw e;  }}  }
class C{  public static Script pydmlFromString(String scriptString){  return scriptFromString(scriptString,ScriptType.PYDML);}  }
class C{  public static void main(String[] args){  Network network=NetworkUtils.createNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)0,(double)1000));  Node node3=NetworkUtils.createAndAddNode(network,Id.create("3",Node.class),new Coord((double)1000,(double)2000));  Node node4=NetworkUtils.createAndAddNode(network,Id.create("4",Node.class),new Coord((double)2000,(double)2000));  Node node5=NetworkUtils.createAndAddNode(network,Id.create("5",Node.class),new Coord((double)1000,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  Link link1=(Link)NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode,toNode,(double)1000,(double)1,(double)3600,(double)1);  final Node fromNode1=node2;  final Node toNode1=node3;  Link link2=(Link)NetworkUtils.createAndAddLink(network,Id.create("2",Link.class),fromNode1,toNode1,(double)1500,(double)1,(double)3600,(double)1);  final Node fromNode2=node3;  final Node toNode2=node4;  Link link3=(Link)NetworkUtils.createAndAddLink(network,Id.create("3",Link.class),fromNode2,toNode2,(double)1000,(double)1,(double)3600,(double)1);  final Node fromNode3=node4;  final Node toNode3=node5;  Link link4=(Link)NetworkUtils.createAndAddLink(network,Id.create("4",Link.class),fromNode3,toNode3,(double)2800,(double)1,(double)3600,(double)1);  Distances distance1=NetworkUtil.getDistance2NodeV2(link1,new Coord((double)100,(double)0),node1);  log.info(distance1.getDisatancePoint2Road() + distance1.getDistanceRoad2Node() + " distance1");  final double y=-10;  Distances distance2=NetworkUtil.getDistance2NodeV2(link1,new Coord((double)100,y),node1);  log.info(distance2.getDisatancePoint2Road() + distance2.getDistanceRoad2Node() + " distance2");  Distances distance3=NetworkUtil.getDistance2NodeV2(link2,new Coord((double)100,(double)1000),node2);  log.info(distance3.getDisatancePoint2Road() + distance3.getDistanceRoad2Node() + " distance3");  final double x=-100;  Distances distance4=NetworkUtil.getDistance2NodeV2(link2,new Coord(x,(double)1000),node2);  log.info(distance4.getDisatancePoint2Road() + distance4.getDistanceRoad2Node() + " distance4");}  }
class C{  public void analyze(Analyzer analyzer,boolean allowFlow) throws Exception {  analyzeImpl(analyzer,allowFlow,new IntArray(),new IntArray());}  }
class C{  public void close(){  isClosed=true;  impl.close();}  }
class C{  public synchronized EventType addBeanType(String eventTypeName,String fullyQualClassName,boolean considerAutoName,boolean isPreconfiguredStatic,boolean isPreconfigured,boolean isConfigured) throws EventAdapterException {  if (log.isDebugEnabled()) {    log.debug(".addBeanType Adding " + eventTypeName + " for type "+ fullyQualClassName);  }  EventType existingType=nameToTypeMap.get(eventTypeName);  if (existingType != null) {    if ((existingType.getUnderlyingType().getName().equals(fullyQualClassName)) || (existingType.getUnderlyingType().getSimpleName().equals(fullyQualClassName))) {      if (log.isDebugEnabled()) {        log.debug(".addBeanType Returning existing type for " + eventTypeName);      }      return existingType;    }    throw new EventAdapterException("Event type named '" + eventTypeName + "' has already been declared with differing underlying type information: Class "+ existingType.getUnderlyingType().getName()+ " versus "+ fullyQualClassName);  }  Class clazz=null;  try {    ClassLoader cl=Thread.currentThread().getContextClassLoader();    clazz=Class.forName(fullyQualClassName,true,cl);  } catch (  ClassNotFoundException ex) {    if (!considerAutoName) {      throw new EventAdapterException("Event type or class named '" + fullyQualClassName + "' was not found",ex);    }    for (    String javaPackageName : javaPackageNames) {      String generatedClassName=javaPackageName + "." + fullyQualClassName;      try {        ClassLoader cl=Thread.currentThread().getContextClassLoader();        Class resolvedClass=Class.forName(generatedClassName,true,cl);        if (clazz != null) {          throw new EventAdapterException("Failed to resolve name '" + eventTypeName + "', the class was ambigously found both in "+ "package '"+ clazz.getPackage().getName()+ "' and in "+ "package '"+ resolvedClass.getPackage().getName()+ "'",ex);        }        clazz=resolvedClass;      } catch (      ClassNotFoundException ex1) {      }    }    if (clazz == null) {      throw new EventAdapterException("Event type or class named '" + fullyQualClassName + "' was not found",ex);    }  }  EventType eventType=beanEventAdapter.createBeanType(eventTypeName,clazz,isPreconfiguredStatic,isPreconfigured,isConfigured);  nameToTypeMap.put(eventTypeName,eventType);  return eventType;}  }
class C{  public static float parseFloat(FXGNode node,String value){  try {    return Float.parseFloat(value);  } catch (  NumberFormatException e) {    throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidFloatValue",value);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addInvitationListener(WorkgroupInvitationListener invitationListener){synchronized (invitationListeners) {    if (!invitationListeners.contains(invitationListener)) {      invitationListeners.add(invitationListener);    }  }}  }
class C{  public void caretUpdate(CaretEvent e){  if (!updatingSelection) {    int selBegin=Math.min(e.getDot(),e.getMark());    int end=Math.max(e.getDot(),e.getMark());    List<TreePath> paths=new ArrayList<TreePath>();    TreeModel model=getTreeModel();    Object root=model.getRoot();    int rootCount=model.getChildCount(root);    for (int counter=0; counter < rootCount; counter++) {      int start=selBegin;      while (start <= end) {        TreePath path=getPathForIndex(start,root,(Element)model.getChild(root,counter));        Element charElement=(Element)path.getLastPathComponent();        paths.add(path);        if (start >= charElement.getEndOffset()) {          start++;        } else {          start=charElement.getEndOffset();        }      }    }    int numPaths=paths.size();    if (numPaths > 0) {      TreePath[] pathArray=new TreePath[numPaths];      paths.toArray(pathArray);      updatingSelection=true;      try {        getTree().setSelectionPaths(pathArray);        getTree().scrollPathToVisible(pathArray[0]);      }  finally {        updatingSelection=false;      }    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_FIELD_ACCESSOR__BODY:    return getBody();case N4JSPackage.N4_FIELD_ACCESSOR__LOK:  return get_lok();case N4JSPackage.N4_FIELD_ACCESSOR__DECLARED_NAME:return getDeclaredName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public String generateFinished() throws Exception {  return "";}  }
class C{  public HttpsPath(FilesystemPath root,String userPath,Map<String,Object> newAttributes,String path,String query){  super(root,userPath,newAttributes,path,query);}  }
class C{  public Notification(String name,Alert alert,String notifierName,List<String> subscriptions,long cooldownPeriod){  super(alert.getOwner());  setAlert(alert);  setName(name);  setNotifierName(notifierName);  setSubscriptions(subscriptions);  setCooldownPeriod(cooldownPeriod);  setActive(false);}  }
class C{  public String charge(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer C_Charge_ID=(Integer)value;  if (C_Charge_ID == null || C_Charge_ID.intValue() == 0)   return "";  if (mTab.getValue("M_Product_ID") != null) {    mTab.setValue("C_Charge_ID",null);    return "ChargeExclusively";  }  mTab.setValue("M_AttributeSetInstance_ID",null);  mTab.setValue("S_ResourceAssignment_ID",null);  mTab.setValue("C_UOM_ID",new Integer(100));  Env.setContext(ctx,WindowNo,"DiscountSchema","N");  String sql="SELECT ChargeAmt FROM C_Charge WHERE C_Charge_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_Charge_ID.intValue());    rs=pstmt.executeQuery();    if (rs.next()) {      mTab.setValue("PriceEntered",rs.getBigDecimal(1));      mTab.setValue("PriceActual",rs.getBigDecimal(1));      mTab.setValue("PriceLimit",Env.ZERO);      mTab.setValue("PriceList",Env.ZERO);      mTab.setValue("Discount",Env.ZERO);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return e.getLocalizedMessage();  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return tax(ctx,WindowNo,mTab,mField,value);}  }
class C{  private boolean waitForResultTimedLocked(int interactionId){  long waitTimeMillis=TIMEOUT_INTERACTION_MILLIS;  final long startTimeMillis=SystemClock.uptimeMillis();  while (true) {    try {      Message sameProcessMessage=getSameProcessMessageAndClear();      if (sameProcessMessage != null) {        sameProcessMessage.getTarget().handleMessage(sameProcessMessage);      }      if (mInteractionId == interactionId) {        return true;      }      if (mInteractionId > interactionId) {        return false;      }      final long elapsedTimeMillis=SystemClock.uptimeMillis() - startTimeMillis;      waitTimeMillis=TIMEOUT_INTERACTION_MILLIS - elapsedTimeMillis;      if (waitTimeMillis <= 0) {        return false;      }      mInstanceLock.wait(waitTimeMillis);    } catch (    InterruptedException ie) {    }  }}  }
class C{  public void resetViewPortOffsets(){  mCustomViewPortEnabled=false;  calculateOffsets();}  }
class C{  public void testGetPiece() throws ChessParseError {  Position pos=new Position();  int result=pos.getPiece(0);  assertEquals(result,Piece.EMPTY);  pos=TextIO.readFEN(TextIO.startPosFEN);  result=pos.getPiece(0);  assertEquals(result,Piece.WROOK);  for (int x=0; x < 8; x++) {    for (int y=0; y < 2; y++) {      int p1=pos.getPiece(Position.getSquare(x,y));      int p2=pos.getPiece(Position.getSquare(x,7 - y));      int bwDiff=Piece.BPAWN - Piece.WPAWN;      assertEquals(p2,p1 + bwDiff);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  CSVReader(Reader reader,int line,CSVParser csvParser,boolean keepCR,boolean verifyReader){  this.br=(reader instanceof BufferedReader ? (BufferedReader)reader : new BufferedReader(reader));  this.lineReader=new LineReader(br,keepCR);  this.skipLines=line;  this.parser=csvParser;  this.keepCR=keepCR;  this.verifyReader=verifyReader;}  }
class C{  public <T extends PageObject>void waitUntil(T entity,Predicate<T> waitUntil){  Preconditions.checkNotNull(entity);  Preconditions.checkNotNull(waitUntil);  waitUntilAfter(entity,waitUntil,String.format("Waited %s seconds and condition did not meet",waitInSeconds),waitInSeconds);}  }
class C{  public static String soundex(String str){  return new org.apache.commons.codec.language.Soundex().soundex(str);}  }
class C{  protected boolean isDragActivated(){  return dragActivated;}  }
class C{  public static void ensureOffsetLength(final int arrayLength,final int offset,final int length){  if (offset < 0)   throw new ArrayIndexOutOfBoundsException("Offset (" + offset + ") is negative");  if (length < 0)   throw new IllegalArgumentException("Length (" + length + ") is negative");  if (offset + length > arrayLength)   throw new ArrayIndexOutOfBoundsException("Last index (" + (offset + length) + ") is greater than array length ("+ arrayLength+ ")");}  }
class C{  public MarkovBlanketSearchEditor(MarkovBlanketSearchRunner algorithmRunner){  if (algorithmRunner == null) {    throw new NullPointerException();  }  this.algorithmRunner=algorithmRunner;  Parameters params=algorithmRunner.getParams();  List<String> vars=algorithmRunner.getSource().getVariableNames();  if (params.getString("targetName",null) == null && !vars.isEmpty()) {    params.set("targetName",vars.get(0));  }  DataSet data;  if (algorithmRunner.getDataModelForMarkovBlanket() == null) {    data=algorithmRunner.getSource();  } else {    data=algorithmRunner.getDataModelForMarkovBlanket();  }  table=new TabularDataJTable(data);  table.setEditable(false);  table.setTableHeader(null);  setup();}  }
class C{  static MediaType createTextType(String subtype){  return create(TEXT_TYPE,subtype);}  }
class C{  public void cancel(int entryId){  NotificationEntry entry=mCenter.getEntry(ID,entryId);  if (entry != null) {    cancel(entry);  }}  }
class C{  public void internalEntityDecl(String arg0,String arg1) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.internalEntityDecl(arg0,arg1);}  }
class C{  @Override public void computeGlobalRoots(TraceLocal trace){  CollectorContext cc=RVMThread.getCurrentThread().getCollectorContext();  Address jniFunctions=Magic.objectAsAddress(JNIEnvironment.JNIFunctions);  int threads=cc.parallelWorkerCount();  int size=JNIEnvironment.JNIFunctions.length();  int chunkSize=size / threads;  int start=cc.parallelWorkerOrdinal() * chunkSize;  int end=(cc.parallelWorkerOrdinal() + 1 == threads) ? size : threads * chunkSize;  for (int i=start; i < end; i++) {    Address functionAddressSlot=jniFunctions.plus(i << LOG_BYTES_IN_ADDRESS);    if (JNIGenericHelpers.implementedInJava(i)) {      trace.processRootEdge(functionAddressSlot,true);    } else {    }  }  Address linkageTriplets=Magic.objectAsAddress(JNIEnvironment.linkageTriplets);  if (!linkageTriplets.isZero()) {    for (int i=start; i < end; i++) {      trace.processRootEdge(linkageTriplets.plus(i << LOG_BYTES_IN_ADDRESS),true);    }  }  Address jniGlobalRefs=Magic.objectAsAddress(JNIGlobalRefTable.JNIGlobalRefs);  size=JNIGlobalRefTable.JNIGlobalRefs.length();  chunkSize=size / threads;  start=cc.parallelWorkerOrdinal() * chunkSize;  end=(cc.parallelWorkerOrdinal() + 1 == threads) ? size : threads * chunkSize;  for (int i=start; i < end; i++) {    trace.processRootEdge(jniGlobalRefs.plus(i << LOG_BYTES_IN_ADDRESS),true);  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  MeterPlot clone=(MeterPlot)super.clone();  clone.tickLabelFormat=(NumberFormat)this.tickLabelFormat.clone();  clone.intervals=new java.util.ArrayList(this.intervals);  if (clone.dataset != null) {    clone.dataset.addChangeListener(clone);  }  return clone;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void testIntervalLong() throws Exception {  Interval i=new Interval(0);  assertEquals("Empty interval",0,i.longValue());  Interval i2=new Interval(1000);  assertEquals("Non-zero interval",1000,i2.longValue());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CF1(){  this(10);}  }
class C{  public synchronized boolean compactRewriteFully(){  checkOpen();  if (lastChunk == null) {    return false;  }  for (  MVMap<?,?> m : maps.values()) {    @SuppressWarnings("unchecked") MVMap<Object,Object> map=(MVMap<Object,Object>)m;    Cursor<Object,Object> cursor=map.cursor(null);    Page lastPage=null;    while (cursor.hasNext()) {      cursor.next();      Page p=cursor.getPage();      if (p == lastPage) {        continue;      }      Object k=p.getKey(0);      Object v=p.getValue(0);      map.put(k,v);      lastPage=p;    }  }  commitAndSave();  return true;}  }
class C{  public void testHashCode(){  Set<Model> set=new HashSet<Model>();  Model m1=new MockModel();  Model m2=new MockModel();  Model m3=new AnotherMockModel();  assertFalse(m1.hashCode() == m2.hashCode());  set.add(m1);  set.add(m2);  assertEquals(2,set.size());  assertFalse(m1.hashCode() == m3.hashCode());  set.add(m3);  assertEquals(3,set.size());}  }
class C{  private static String buildStartLogMessage(String methodName){  StringBuilder message=new StringBuilder();  message.append("Chronometro ----> ");  message.append(methodName);  return message.toString();}  }
class C{  public void onAbort(R result,Throwable failure){}  }
class C{  public boolean isOwner(){  return id != null && ownerId != null && id.equals(ownerId);}  }
class C{  public DBRecord(StructuredRecord record,int[] columnTypes){  this.record=record;  this.columnTypes=columnTypes;}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  public boolean isPaged(){  return sharedContext.isPaged();}  }
class C{  public boolean hasAdditionalName(){  return hasExtension(AdditionalName.class);}  }
class C{  void updateDisplayedInspector(){  if (tabs.getTabCount() > 0 && tabs.getSelectedIndex() >= 0) {    Inspector i=((Inspector)(inspectors.get(tabs.getSelectedIndex())));    i.updateInspector();    i.repaint();  }}  }
class C{  private RyaMongodForTestsFactory(final IFeatureAwareVersion version) throws IOException {  final MongodStarter runtime=MongodStarter.getInstance(new RuntimeConfigBuilder().defaultsWithLogger(Command.MongoD,logger).build());  mongodExecutable=runtime.prepare(newMongodConfig(version));  mongodProcess=mongodExecutable.start();}  }
class C{  private void updateBitmapShader(){  Drawable drawable=getDrawable();  Bitmap bitmap=null;  if ((null != drawable) && (drawable instanceof BitmapDrawable)) {    bitmap=((BitmapDrawable)drawable).getBitmap();  }  if (null == bitmap) {    mBitmapPaint.setShader(null);    return;  }  int bitmapWidth=bitmap.getWidth();  int bitmapHeight=bitmap.getHeight();  float x=0, y=0;  int diameter=mRadius * 2;  int borderWidth=shouldDrawBorder() ? mBorderWidth : 0;  int offset=(borderWidth > 0) ? (borderWidth * 2) : 0;  offset+=mShadowRadius * 1.5f;  float scale=(float)(diameter - offset) / (float)Math.min(bitmapHeight,bitmapWidth);  x=(mWidth - bitmapWidth * scale) * 0.5f;  y=(mHeight - bitmapHeight * scale) * 0.5f;  Matrix matrix=new Matrix();  matrix.setScale(scale,scale);  matrix.postTranslate(Math.round(x),Math.round(y));  BitmapShader shader=new BitmapShader(bitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);  shader.setLocalMatrix(matrix);  mBitmapPaint.setShader(shader);}  }
class C{  @Override public void evaluateOutput(Vertex output){  if (!isEnabled()) {    return;  }  for (  Emotion emotion : getBot().mood().getEmotions().values()) {    if (Math.abs(emotion.getState()) > 0.1) {      Relationship relationship=output.addRelationship(Primitive.EMOTION,emotion.primitive());      relationship.setCorrectness(emotion.getState());    }  }}  }
class C{  public void alwaysClearColorBuffer(boolean value){  mAlwaysClearColorBuffer=value;}  }
class C{  public boolean containsAnimal(){  for (  final RPObject obj : objects.values()) {    if (obj instanceof DomesticAnimal) {      return true;    }  }  return false;}  }
class C{  public static boolean isPlaying(){  return mediaPlayer != null && MediaPlayer.Status.PLAYING.equals(mediaPlayer.getStatus());}  }
class C{  @Override public void run(){  String inputImageFile=args[0];  String imageGCPFile=args[1];  String mapGCPFile=args[2];  String outputFile=args[3];  ImageRectificationPanel ird=new ImageRectificationPanel(inputImageFile,imageGCPFile,mapGCPFile,outputFile,myHost);  returnData(ird);}  }
class C{  public static String createEnMediaTag(Resource resource){  return "<en-media hash=\"" + bytesToHex(resource.getData().getBodyHash()) + "\" type=\""+ resource.getMime()+ "\"/>";}  }
class C{  @ObjectiveCName("doCallWithGid:") public Command<Long> doGroupCall(int gid){  return modules.getCallsModule().makeCall(Peer.group(gid),false);}  }
class C{  @Override public void onChangedRemoved(final RPObject object,final RPObject changes){  if (changes.has("class")) {    clazz=null;    fireChange(PROP_CLASS);  }  if (changes.has("name")) {    name=null;    fireChange(PROP_NAME);    fireChange(PROP_TITLE);  }  if (changes.has("subclass")) {    subclazz=null;    fireChange(PROP_CLASS);  }  boolean sizeChange=false;  if (changes.has("width")) {    width=1.0;    sizeChange=true;  }  if (changes.has("height")) {    height=1.0;    sizeChange=true;  }  if (sizeChange) {    fireChange(PROP_SIZE);  }  if (changes.has("title")) {    title=null;    fireChange(PROP_TITLE);  }  if (changes.has("resistance")) {    resistance=0;  }  if (changes.has("visibility")) {    visibility=100;    fireChange(PROP_VISIBILITY);  }  for (  RPSlot slot : changes.slots()) {    for (    ContentChangeListener listener : contentChangeListeners) {      listener.contentRemoved(slot);    }  }}  }
class C{  public void pointerReleased(int x,int y){  if (pointerReleasedListeners != null && pointerReleasedListeners.hasListeners()) {    ActionEvent ev=new ActionEvent(this,ActionEvent.Type.PointerReleased,x,y);    pointerReleasedListeners.fireActionEvent(ev);    if (ev.isConsumed()) {      return;    }  }  pointerReleaseImpl(x,y);  scrollOpacity=0xff;}  }
class C{  public static void cleanup(){  md5Cache.clear();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.626 -0400",hash_original_method="2A7F9A9DA1FD0DBF21511D990BEE362C",hash_generated_method="FE1132ACCFCDFD691364FDB357310B1A") public int compare(File file1,File file2){  long result=file1.lastModified() - file2.lastModified();  if (result < 0) {    return -1;  } else   if (result > 0) {    return 1;  } else {    return 0;  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (tracerArgument_1: ");  result.append(tracerArgument_1);  result.append(')');  return result.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  @ZeppelinApi public void angularUnwatch(String name,AngularObjectWatcher watcher){  angularUnwatch(name,interpreterContext.getNoteId(),watcher);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  boolean flag;  int row, col, rN, cN, r, c, count;  double xCoord, yCoord;  int progress;  int i, a;  boolean patternMatch;  double value, z, zN;  int[] neighbours=new int[8];  int FID=0;  int[] rowVals=new int[2];  int[] colVals=new int[2];  int traceDirection=0;  int previousTraceDirection=0;  double currentHalfRow=0, currentHalfCol=0;  double[] inputValueData=new double[4];  long numPoints;  int minLineLength=2;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3},{0,1,2,3,4,5,6,7},{0,1,2,3,4,5,6,7}};  double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{1,1,1,1,1,1,1,1},{0,0,0,0,0,0,0,0}};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  minLineLength=Integer.parseInt(args[2]);  if (minLineLength < 2) {    minLineLength=2;  }  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster input=new WhiteboxRaster(inputFile,"r");    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double rowsD=(double)rows;    double colsD=(double)cols;    double noData=input.getNoDataValue();    double gridResX=input.getCellSizeX();    double gridResY=input.getCellSizeY();    double east=input.getEast() - gridResX / 2.0;    double west=input.getWest() + gridResX / 2.0;    double EWRange=east - west;    double north=input.getNorth() - gridResY / 2.0;    double south=input.getSouth() + gridResY / 2.0;    double NSRange=north - south;    String tempHeader1=inputFile.replace(".dep","_temp1.dep");    WhiteboxRaster temp1=new WhiteboxRaster(tempHeader1,"rw",inputFile,WhiteboxRaster.DataType.INTEGER,0);    temp1.isTemporaryFile=true;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=input.getValue(row,col);        if (z > 0 && z != noData) {          for (i=0; i < 8; i++) {            z=input.getValue(row + dY[i],col + dX[i]);            if (z == 1) {              neighbours[i]=1;            } else {              neighbours[i]=0;            }          }          value=1;          for (a=8; a < elements.length; a++) {            patternMatch=true;            for (i=0; i < elements[a].length; i++) {              if (neighbours[elements[a][i]] != vals[a][i]) {                patternMatch=false;                break;              }            }            if (patternMatch) {              value=0;            }          }          temp1.setValue(row,col,value);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 1 of 4:",progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=temp1.getValue(row,col);        if (z == 1) {          for (i=0; i < 8; i++) {            z=temp1.getValue(row + dY[i],col + dX[i]);            if (z == 1) {              neighbours[i]=1;            } else {              neighbours[i]=0;            }          }          value=1;          for (a=0; a < 8; a++) {            patternMatch=true;            for (i=0; i < elements[a].length; i++) {              if (neighbours[elements[a][i]] != vals[a][i]) {                patternMatch=false;                break;              }            }            if (patternMatch) {              value=0;            }          }          temp1.setValue(row,col,value);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 2 of 4:",progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=temp1.getValue(row,col);        if (z > 0 && z != noData) {          count=0;          for (i=0; i < 8; i++) {            rN=row + dY[i];            cN=col + dX[i];            zN=temp1.getValue(rN,cN);            if (zN > 0 && zN != noData) {              count++;            }          }          temp1.setValue(row,col,count);        } else {          temp1.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 3 of 4:",progress);    }    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYLINE);    DBFField fields[]=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("VALUE");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(2);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    int[] parts={0};    boolean pointAdded=false;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=temp1.getValue(row,col);        if (z == 1) {          PointsList points=new PointsList();          value=1;          r=row;          c=col;          flag=true;          previousTraceDirection=-1;          traceDirection=0;          do {            xCoord=west + (c / colsD) * EWRange;            yCoord=north - (r / rowsD) * NSRange;            pointAdded=false;            if (traceDirection != previousTraceDirection) {              points.addPoint(xCoord,yCoord);              previousTraceDirection=traceDirection;              pointAdded=true;            }            temp1.setValue(r,c,0);            traceDirection=-1;            value=-1;            for (i=0; i < 8; i++) {              rN=r + dY[i];              cN=c + dX[i];              zN=temp1.getValue(rN,cN);              if (zN > 0 && zN != noData) {                traceDirection=i;                value=zN;                break;              }            }            if (value == 2) {              r+=dY[traceDirection];              c+=dX[traceDirection];            } else             if (value >= 0) {              r+=dY[traceDirection];              c+=dX[traceDirection];              if (!pointAdded) {                xCoord=west + (c / colsD) * EWRange;                yCoord=north - (r / rowsD) * NSRange;                points.addPoint(xCoord,yCoord);              }              if (value == 1) {                temp1.setValue(r,c,0);              } else {                temp1.setValue(r,c,value - 1);              }              flag=false;            } else {              flag=false;            }          } while (flag);          if (points.size() >= minLineLength) {            PolyLine poly=new PolyLine(parts,points.getPointsArray());            output.addRecord(poly);            Object[] rowData=new Object[2];            rowData[0]=new Double(FID);            rowData[1]=new Double(z);            writer.addRecord(rowData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100.0 * row / (rows - 1));      updateProgress("Loop 4 of 4:",progress);    }    temp1.close();    input.close();    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public InputStream openApp() throws IOException, NoSuchAlgorithmException, NoSuchProviderException, NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException {  InputStream ret=api.executeDownload(downloadUrl,downloadAuthCookie.getName() + "=" + downloadAuthCookie.getValue());  if (appDeliveryData.hasEncryptionParams()) {    int version=ret.read();    if (version != 0) {      throw new IOException("Unknown crypto container!");    }    ret.skip(4);    byte[] iv=new byte[16];    ret.read(iv);    byte[] encoded=appDeliveryData.getEncryptionParams().getEncryptionKey().getBytes("UTF-8");    byte[] decoded=Base64.decode(encoded,Base64.DEFAULT);    Cipher cipher=Cipher.getInstance("AES/CBC/NoPadding","SunJCE");    SecretKeySpec key=new SecretKeySpec(decoded,"AES");    cipher.init(Cipher.DECRYPT_MODE,key,new IvParameterSpec(iv));    return new CipherInputStream(ret,cipher);  } else {    return ret;  }}  }
class C{  private void assertWriteLittleEndian32(byte[] data,int value) throws Exception {  ByteArrayOutputStream rawOutput=new ByteArrayOutputStream();  CodedOutputStream output=CodedOutputStream.newInstance(rawOutput);  output.writeRawLittleEndian32(value);  output.flush();  assertEqualBytes(data,rawOutput.toByteArray());  for (int blockSize=1; blockSize <= 16; blockSize*=2) {    rawOutput=new ByteArrayOutputStream();    output=CodedOutputStream.newInstance(rawOutput,blockSize);    output.writeRawLittleEndian32(value);    output.flush();    assertEqualBytes(data,rawOutput.toByteArray());  }}  }
class C{  public void addCallBack(Provider provider,String callBack){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    if (Objects.equals(provider.name(),Constants.FACEBOOK) || Objects.equals(provider.name(),Constants.LINKEDIN) || Objects.equals(provider.name(),Constants.MYSPACE)|| Objects.equals(provider.name(),Constants.YAHOO)|| Objects.equals(provider.name(),Constants.RUNKEEPER)) {      Log.d("SocialAuthAdapter","Callback Url not require");    } else     provider.setCallBackUri(callBack);  }}  }
class C{  @Override public Query asQuery(String... types) throws IOException {  if (!queryParsed) {    this.query=super.asQuery(types);  }  return this.query;}  }
class C{  public static GetSubscriptionKeysForSessionIdResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  GetSubscriptionKeysForSessionIdResponse object=new GetSubscriptionKeysForSessionIdResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"getSubscriptionKeysForSessionIdResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (GetSubscriptionKeysForSessionIdResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      list1.add(reader.getElementText());      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("","return").equals(reader.getName())) {            list1.add(reader.getElementText());          } else {            loopDone1=true;          }        }      }      object.set_return((long[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(long.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static boolean[] insert(boolean[] dest,boolean[] src,int offset){  boolean[] temp=new boolean[dest.length + src.length];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset,temp,src.length + offset,dest.length - offset);  return temp;}  }
class C{  public OrganizationAuthorityException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  private static void analyzeAlreadyLoadedClasses(){  try {    if (instrumentation.isRedefineClassesSupported()) {      if (instrumentCoreClasses) {        for (        Class<?> loadedClass : instrumentation.getAllLoadedClasses()) {          String clazzName=loadedClass.getCanonicalName();          if ((null != clazzName) && !selfFirstClasses.contains(clazzName)) {            if ((null == loadedClass.getClassLoader()) || !InspectItClassLoader.class.getCanonicalName().equals(loadedClass.getClassLoader().getClass().getCanonicalName())) {              try {                clazzName=getClassNameForJavassist(loadedClass);                byte[] modified=Agent.agent.inspectByteCode(null,clazzName,loadedClass.getClassLoader());                if (null != modified) {                  ClassDefinition classDefinition=new ClassDefinition(loadedClass,modified);                  instrumentation.redefineClasses(new ClassDefinition[]{classDefinition});                }              } catch (              ClassNotFoundException e) {                LOGGER.severe(e.getMessage());              }catch (              UnmodifiableClassException e) {                LOGGER.severe(e.getMessage());              }            }          }        }        LOGGER.info("inspectIT Agent: Instrumentation of core classes finished...");      } else {        LOGGER.info("inspectIT Agent: Core classes cannot be instrumented, please add -Xbootclasspath/a:<path_to_agent.jar> to the JVM parameters!");      }    } else {      LOGGER.info("Redefinition of Classes is not supported in this JVM!");    }  } catch (  Throwable t) {    t.printStackTrace();    LOGGER.severe("The process of class redefinitions produced an error: " + t.getMessage());    LOGGER.severe("If you are running on an IBM JVM, please ignore this error as the JVM does not support this feature!");    LOGGER.throwing(JavaAgent.class.getCanonicalName(),"analyzeAlreadyLoadedClasses",t);  }}  }
class C{  public void addMergeItem(Object mergeItem) throws MergeException {  try {    JarArchive jar=(JarArchive)mergeItem;    InputStream is=jar.getResource(this.resource);    if (is != null) {      this.next.addMergeItem(is);    }  } catch (  Exception ex) {    throw new MergeException("Problem when fetching merge item from War Archive",ex);  }}  }
class C{  public static String wrap(final String str,int wrapLength,String newLineStr,final boolean wrapLongWords){  if (str == null) {    return null;  }  if (newLineStr == null) {    newLineStr=SystemUtils.LINE_SEPARATOR;  }  if (wrapLength < 1) {    wrapLength=1;  }  final int inputLineLength=str.length();  int offset=0;  final StringBuilder wrappedLine=new StringBuilder(inputLineLength + 32);  while (offset < inputLineLength) {    if (str.charAt(offset) == ' ') {      offset++;      continue;    }    if (inputLineLength - offset <= wrapLength) {      break;    }    int spaceToWrapAt=str.lastIndexOf(' ',wrapLength + offset);    if (spaceToWrapAt >= offset) {      wrappedLine.append(str.substring(offset,spaceToWrapAt));      wrappedLine.append(newLineStr);      offset=spaceToWrapAt + 1;    } else {      if (wrapLongWords) {        wrappedLine.append(str.substring(offset,wrapLength + offset));        wrappedLine.append(newLineStr);        offset+=wrapLength;      } else {        spaceToWrapAt=str.indexOf(' ',wrapLength + offset);        if (spaceToWrapAt >= 0) {          wrappedLine.append(str.substring(offset,spaceToWrapAt));          wrappedLine.append(newLineStr);          offset=spaceToWrapAt + 1;        } else {          wrappedLine.append(str.substring(offset));          offset=inputLineLength;        }      }    }  }  wrappedLine.append(str.substring(offset));  return wrappedLine.toString();}  }
class C{  public KMLFile(File file){  if (file == null) {    String message=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.kmlFile=file;}  }
class C{  public void put(String key,Object value){  if (key != null && value != null) {    urlParamsWithObjects.put(key,value);  }}  }
class C{  public MsrpSession createMsrpServerSession(String remoteMsrpPath,MsrpEventListener listener){  if (logger.isActivated()) {    logger.info("Create MSRP server end point at " + mLocalMsrpPort);  }  mMsrpSession=new MsrpSession(mRcsSettings);  mMsrpSession.setFrom(getLocalMsrpPath());  mMsrpSession.setTo(remoteMsrpPath);  MsrpConnection connection=new MsrpServerConnection(mMsrpSession,mLocalMsrpPort);  mMsrpSession.setConnection(connection);  mMsrpSession.addMsrpEventListener(listener);  return mMsrpSession;}  }
class C{  public static Map<String,Object> addRoleType(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=new HashMap<String,Object>();  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  String partyId=(String)context.get("partyId");  String roleTypeId=(String)context.get("roleTypeId");  Boolean removeOld=(Boolean)context.get("removeOld");  if (removeOld != null && removeOld.booleanValue()) {    try {      delegator.removeByAnd("OrderRole",UtilMisc.toMap("orderId",orderId,"roleTypeId",roleTypeId));    } catch (    GenericEntityException e) {      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);      result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not remove old roles (" + e.getMessage() + ").");      return result;    }  }  Map<String,String> fields=UtilMisc.<String,String>toMap("orderId",orderId,"partyId",partyId,"roleTypeId",roleTypeId);  try {    GenericValue testValue=EntityQuery.use(delegator).from("OrderRole").where(fields).queryOne();    if (testValue != null) {      ServiceUtil.returnSuccess();    } else {      GenericValue value=delegator.makeValue("OrderRole",fields);      delegator.create(value);    }  } catch (  GenericEntityException e) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not add role to order (" + e.getMessage() + ").");    return result;  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public static void clone_slice(H264Context dst,H264Context src){  System.arraycopy(src.block_offset,0,dst.block_offset,0,dst.block_offset.length);  dst.s.current_picture_ptr=src.s.current_picture_ptr;  dst.s.current_picture=src.s.current_picture;  dst.s.linesize=src.s.linesize;  dst.s.uvlinesize=src.s.uvlinesize;  dst.s.first_field=src.s.first_field;  dst.prev_poc_msb=src.prev_poc_msb;  dst.prev_poc_lsb=src.prev_poc_lsb;  dst.prev_frame_num_offset=src.prev_frame_num_offset;  dst.prev_frame_num=src.prev_frame_num;  dst.short_ref_count=src.short_ref_count;  for (int i=0; i < src.short_ref.length; i++)   src.short_ref[i].copyTo(dst.short_ref[i]);  for (int i=0; i < src.long_ref.length; i++)   src.long_ref[i].copyTo(dst.long_ref[i]);  for (int i=0; i < src.default_ref_list.length; i++)   for (int j=0; j < src.default_ref_list[i].length; j++)   src.default_ref_list[i][j].copyTo(dst.default_ref_list[i][j]);  for (int i=0; i < src.ref_list.length; i++)   for (int j=0; j < src.ref_list[i].length; j++)   src.ref_list[i][j].copyTo(dst.ref_list[i][j]);  for (int i=0; i < src.dequant4_coeff.length; i++)   for (int j=0; j < src.dequant4_coeff[i].length; j++)   for (int k=0; k < src.dequant4_coeff[i][j].length; k++)   dst.dequant4_coeff[i][j][k]=src.dequant4_coeff[i][j][k];  for (int i=0; i < src.dequant8_coeff.length; i++)   for (int j=0; j < src.dequant8_coeff[i].length; j++)   for (int k=0; k < src.dequant8_coeff[i][j].length; k++)   dst.dequant8_coeff[i][j][k]=src.dequant8_coeff[i][j][k];}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  public static String fixURI(String str){  str=str.replace(java.io.File.separatorChar,'/');  if (str.length() >= 4) {    char ch0=Character.toUpperCase(str.charAt(0));    char ch1=str.charAt(1);    char ch2=str.charAt(2);    char ch3=str.charAt(3);    boolean isDosFilename=((('A' <= ch0) && (ch0 <= 'Z')) && (ch1 == ':') && (ch2 == '/')&& (ch3 != '/'));    if (isDosFilename && log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"Found DOS filename: " + str);    }  }  if (str.length() >= 2) {    char ch1=str.charAt(1);    if (ch1 == ':') {      char ch0=Character.toUpperCase(str.charAt(0));      if (('A' <= ch0) && (ch0 <= 'Z')) {        str="/" + str;      }    }  }  return str;}  }
class C{  public AppletSecurity(){  reset();}  }
class C{  public DelegationSelectionTool(){  this(new LinkedList<Action>(),new LinkedList<Action>());}  }
class C{  public final boolean valid(final long i){  return mLo <= i && i <= mHi;}  }
class C{  private boolean isRelationValid(CnATreeElement sourceElement,CnATreeElement destinationElement,String relationType){  if (CnALink.Id.NO_TYPE.equals(relationId)) {    return true;  }  if (sourceElement instanceof IBSIStrukturElement && destinationElement instanceof IBSIStrukturElement) {    return true;  }  for (  HuiRelation relation : HUITypeFactory.getInstance().getPossibleRelations(sourceElement.getEntityType().getId(),destinationElement.getEntityType().getId())) {    if (relationType.equals(relation.getId())) {      return true;    }  }  ;  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  void loadEditingState(boolean setViewBox){  EditState editState=new SavingHelper<EditState>().load(Application.mainActivity,EDITSTATE_FILENAME,false);  if (editState != null) {    editState.setOffset(map.getOpenStreetMapTilesOverlay().getRendererInfo());    editState.setMiscState(Application.mainActivity,this);    editState.setSelected(this);    if (setViewBox) {      editState.setViewBox(this,map);    }  }}  }
class C{  public static int alignToDepth(int val,int depth){  return val / DEPTH_TO_WIDTH[depth] * DEPTH_TO_WIDTH[depth];}  }
class C{  public final void println(double d) throws IOException {  println(String.valueOf(d));}  }
class C{  public static View doubleText(int position,Context context,String text,int desiredHeight){  final LinearLayout ll=new LinearLayout(context);  ll.setOrientation(LinearLayout.HORIZONTAL);  final AbsListView.LayoutParams lp=new AbsListView.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,desiredHeight);  ll.setLayoutParams(lp);  ll.setId(position);  TextView t1=new TextView(context);  t1.setHeight(desiredHeight);  t1.setText(text);  t1.setGravity(Gravity.START | Gravity.CENTER_VERTICAL);  final ViewGroup.LayoutParams lp1=new LinearLayout.LayoutParams(0,ViewGroup.LayoutParams.WRAP_CONTENT,1.0f);  ll.addView(t1,lp1);  TextView t2=new TextView(context);  t2.setHeight(desiredHeight);  t2.setText(text);  t2.setGravity(Gravity.RIGHT | Gravity.CENTER_VERTICAL);  final ViewGroup.LayoutParams lp2=new LinearLayout.LayoutParams(0,ViewGroup.LayoutParams.WRAP_CONTENT,1.0f);  ll.addView(t2,lp2);  ll.setTag("double");  return ll;}  }
class C{  private void calculateGridSizes(float numbersRadius,float xCenter,float yCenter,float textSize,float[] textGridHeights,float[] textGridWidths){  float offset1=numbersRadius;  float offset2=numbersRadius * ((float)Math.sqrt(3)) / 2f;  float offset3=numbersRadius / 2f;  mPaint.setTextSize(textSize);  yCenter-=(mPaint.descent() + mPaint.ascent()) / 2;  textGridHeights[0]=yCenter - offset1;  textGridWidths[0]=xCenter - offset1;  textGridHeights[1]=yCenter - offset2;  textGridWidths[1]=xCenter - offset2;  textGridHeights[2]=yCenter - offset3;  textGridWidths[2]=xCenter - offset3;  textGridHeights[3]=yCenter;  textGridWidths[3]=xCenter;  textGridHeights[4]=yCenter + offset3;  textGridWidths[4]=xCenter + offset3;  textGridHeights[5]=yCenter + offset2;  textGridWidths[5]=xCenter + offset2;  textGridHeights[6]=yCenter + offset1;  textGridWidths[6]=xCenter + offset1;}  }
class C{  public AlertInfoParser(String alertInfo){  super(alertInfo);}  }
class C{  public Transform match(Class type) throws Exception {  return null;}  }
class C{  public void onNearBlockChanged(GlowBlock block,BlockFace face,GlowBlock changedBlock,Material oldType,byte oldData,Material newType,byte newData){}  }
class C{  public void put(int key,String value){  mCapabilities.put(key,value);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.GUARD___ANONYMOUS_GUARD_11:    return anonymous_guard_1_1 != null && !anonymous_guard_1_1.isEmpty();case UmplePackage.GUARD___CODE_1:  return CODE_1_EDEFAULT == null ? code_1 != null : !CODE_1_EDEFAULT.equals(code_1);case UmplePackage.GUARD___ANONYMOUS_GUARD_21:return anonymous_guard_2_1 != null && !anonymous_guard_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_User_ID"))     p_AD_User_ID=para[i].getParameterAsInt(); else     if (name.equals("OldPassword"))     p_OldPassword=(String)para[i].getParameter(); else     if (name.equals("NewPassword"))     p_NewPassword=(String)para[i].getParameter(); else     if (name.equals("NewEMail"))     p_NewEMail=(String)para[i].getParameter(); else     if (name.equals("NewEMailUser"))     p_NewEMailUser=(String)para[i].getParameter(); else     if (name.equals("NewEMailUserPW"))     p_NewEMailUserPW=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public List<CIMInstance> executeQuery(StorageSystem storageSystem,CIMObjectPath objectPath,String query,String queryLanguage){  return _cimPath.executeQuery(storageSystem,objectPath,query,queryLanguage);}  }
class C{  private void assertArrayLength(int len) throws EncodingException {  int maxLen=ctx.getMaxArrayLength();  if (maxLen > 0 && len > maxLen) {    final EncodingException encodingException=new EncodingException(StatusCodes.Bad_EncodingLimitsExceeded,"MaxArrayLength " + maxLen + " < "+ len);    logger.warn("assertArrayLength: failed",encodingException);    throw encodingException;  }}  }
class C{  void startTimer(){  timer.start();}  }
class C{  void rememberSyncState(){  if (getChildCount() > 0) {    mNeedSync=true;    mSyncHeight=getHeight();    View v=getChildAt(0);    ListAdapter adapter=getAdapter();    if (mFirstPosition >= 0 && mFirstPosition < adapter.getCount()) {      mSyncRowId=adapter.getItemId(mFirstPosition);    } else {      mSyncRowId=NO_ID;    }    if (v != null) {      mSpecificTop=v.getTop();    }    mSyncPosition=mFirstPosition;  }}  }
class C{  public synchronized boolean isOwner(final IComment comment){  return backend.isOwner(comment);}  }
class C{  public static Result search(){  DynamicForm form=Form.form().bindFromRequest(request());  JsonObject parent=new JsonObject();  int offset=SEARCH_DEFAULT_PAGE_OFFSET;  int limit=SEARCH_DEFAULT_PAGE_LIMIT;  int end=0;  int total=0;  if (form.get("offset") != null && form.get("offset") != "") {    offset=Integer.valueOf(form.get("offset"));  }  if (form.get("limit") != null && form.get("limit") != "") {    limit=Integer.valueOf(form.get("limit"));  }  if (offset < 0) {    offset=0;  }  if (limit > SEARCH_APPLICATION_MAX_OFFSET) {    limit=SEARCH_APPLICATION_MAX_OFFSET;  } else   if (limit <= 0) {    return ok(new Gson().toJson(parent));  }  Query<AppResult> query=Application.generateSearchQuery(AppResult.getSearchFields(),Application.getSearchParams());  total=query.findRowCount();  if (offset > total) {    offset=total;  }  List<AppResult> results=query.setFirstRow(offset).setMaxRows(limit).fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,AppHeuristicResult.getSearchFields()).findList();  end=offset + results.size();  JsonArray applicationSummaryArray=new JsonArray();  for (  AppResult application : results) {    JsonObject applicationObject=new JsonObject();    JsonArray heuristicsArray=new JsonArray();    List<AppHeuristicResult> appHeuristicResult=application.yarnAppHeuristicResults;    for (    AppHeuristicResult heuristic : appHeuristicResult) {      JsonObject heuristicObject=new JsonObject();      heuristicObject.addProperty(JsonKeys.NAME,heuristic.heuristicName);      heuristicObject.addProperty(JsonKeys.SEVERITY,heuristic.severity.getText());      heuristicsArray.add(heuristicObject);    }    applicationObject.addProperty(JsonKeys.ID,application.id);    applicationObject.addProperty(JsonKeys.USERNAME,application.username);    applicationObject.addProperty(JsonKeys.START_TIME,application.startTime);    applicationObject.addProperty(JsonKeys.FINISH_TIME,application.finishTime);    applicationObject.addProperty(JsonKeys.RUNTIME,application.finishTime - application.startTime);    applicationObject.addProperty(JsonKeys.WAITTIME,application.totalDelay);    applicationObject.addProperty(JsonKeys.RESOURCE_USED,application.resourceUsed);    applicationObject.addProperty(JsonKeys.RESOURCE_WASTED,application.resourceWasted);    applicationObject.addProperty(JsonKeys.SEVERITY,application.severity.getText());    applicationObject.addProperty(JsonKeys.QUEUE,application.queueName);    applicationObject.add(JsonKeys.HEURISTICS_SUMMARY,heuristicsArray);    applicationSummaryArray.add(applicationObject);  }  JsonObject searchResults=new JsonObject();  searchResults.addProperty(JsonKeys.ID,query.toString());  searchResults.addProperty(JsonKeys.START,offset);  searchResults.addProperty(JsonKeys.END,end);  searchResults.addProperty(JsonKeys.TOTAL,total);  searchResults.add(JsonKeys.SUMMARIES,applicationSummaryArray);  parent.add(JsonKeys.SEARCH_RESULTS,searchResults);  return ok(new Gson().toJson(parent));}  }
class C{  private void resize(int newSize){  long[] newKeys=new long[newSize];  Object[] newValues=new Object[newSize];  byte[] newFlags=new byte[newSize];  for (int i=0; i < newSize; i++)   newKeys[i]=DEAD_KEY;  mask=newKeys.length - 1;  for (int i=0; i < keys.length; i++) {    if (keys[i] == DEAD_KEY || (flags[i] & DELETED) != 0)     continue;    int hash=(int)keys[i] & mask;    while (true) {      if (newKeys[hash] == DEAD_KEY) {        newKeys[hash]=keys[i];        newValues[hash]=values[i];        newFlags[hash]=flags[i];        break;      }      hash=(hash + 1) & mask;    }  }  keys=newKeys;  values=newValues;  flags=newFlags;}  }
class C{  public void assertInvokeVirtualEquals(int value,Class target){  assertInvokeVirtualEquals(new Integer(value),target,stdCM,"-1");}  }
class C{  Cube splitChannel(int splitChannel,int c0,int c1){  if (min[splitChannel] == max[splitChannel]) {    return null;  }  if (count == 0) {    return null;  }  int half=count / 2;  int[] counts=computeCounts(splitChannel,c0,c1);  int tcount=0;  int lastAdd=-1;  int splitLo=min[splitChannel];  int splitHi=max[splitChannel];  for (int i=min[splitChannel]; i <= max[splitChannel]; i++) {    int c=counts[i];    if (c == 0) {      if ((tcount == 0) && (i < max[splitChannel]))       min[splitChannel]=i + 1;      continue;    }    if (tcount + c < half) {      lastAdd=i;      tcount+=c;      continue;    }    if ((half - tcount) <= ((tcount + c) - half)) {      if (lastAdd == -1) {        if (c == count) {          max[splitChannel]=i;          return null;        } else {          splitLo=i;          splitHi=i + 1;          tcount+=c;          break;        }      }      splitLo=lastAdd;      splitHi=i;    } else {      if (i == max[splitChannel]) {        if (c == count) {          return null;        } else {          splitLo=lastAdd;          splitHi=i;          break;        }      }      tcount+=c;      splitLo=i;      splitHi=i + 1;    }    break;  }  Cube ret=new Cube(colors,tcount);  count=count - tcount;  ret.min[splitChannel]=min[splitChannel];  ret.max[splitChannel]=splitLo;  min[splitChannel]=splitHi;  ret.min[c0]=min[c0];  ret.max[c0]=max[c0];  ret.min[c1]=min[c1];  ret.max[c1]=max[c1];  normalize(splitChannel,counts);  ret.normalize(splitChannel,counts);  return ret;}  }
class C{  protected boolean linkShaderProgram(int program){  boolean linked=re.linkProgram(program);  addProgramInfoLog(program);  re.useProgram(program);  re.setUniform(re.getUniformLocation(program,Uniforms.tex.getUniformString()),ACTIVE_TEXTURE_NORMAL);  re.setUniform(re.getUniformLocation(program,Uniforms.fbTex.getUniformString()),ACTIVE_TEXTURE_FRAMEBUFFER);  if (useNativeClut) {    re.setUniform(re.getUniformLocation(program,Uniforms.clut.getUniformString()),ACTIVE_TEXTURE_CLUT);    re.setUniform(re.getUniformLocation(program,Uniforms.utex.getUniformString()),ACTIVE_TEXTURE_INTEGER);  }  boolean validated=re.validateProgram(program);  addProgramInfoLog(program);  return linked && validated;}  }
class C{  public static double asDouble(long[] hash){  return (hash[0] >>> 12) * 0x1.0p-52d;}  }
class C{  public void forceChangesOnlyInSwingEventThread(){  forceInSwingEventThread=true;}  }
class C{  public Engine.Create preCreate(Engine.Create create){  return create;}  }
class C{  private boolean updatePortNetworkId(StoragePort storagePort,String portNetworkId){  boolean portNetworkIdUpdated=false;  if (portNetworkId != null && !portNetworkId.isEmpty()) {    URI systemURI=storagePort.getStorageDevice();    StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,systemURI);    if (!Type.openstack.name().equals(storageSystem.getSystemType())) {      throw APIException.badRequests.parameterIsOnlyApplicableTo("port_network_id update","openstack storage system ports");    }    checkValidPortNetworkId(storagePort.getTransportType(),portNetworkId);    checkForDuplicatePortNetworkIdWithinSystem(_dbClient,portNetworkId,storagePort.getStorageDevice());    List<ExportMask> masks=CustomQueryUtility.queryActiveResourcesByAltId(_dbClient,ExportMask.class,"storagePorts",storagePort.getId().toString());    if (!masks.isEmpty()) {      throw APIException.badRequests.parameterValueCannotBeUpdated("port_network_id","since it is part of active Exports");    }    storagePort.setPortNetworkId(portNetworkId);    _dbClient.persistObject(storagePort);    _log.info("updated Storage port's network id to {}.",portNetworkId);    portNetworkIdUpdated=true;  }  return portNetworkIdUpdated;}  }
class C{  public static boolean equals(Object object1,Object object2){  if (object1 == object2) {    return true;  }  if (object1 == null || object2 == null) {    return false;  }  return object1.equals(object2);}  }
class C{  @Override public boolean supportsNonNullableColumns(){  debugCodeCall("supportsNonNullableColumns");  return true;}  }
class C{  @Override public View onCreateView(String name,Context context,AttributeSet attrs){  if (!"fragment".equals(name)) {    return super.onCreateView(name,context,attrs);  }  String fname=attrs.getAttributeValue(null,"class");  TypedArray a=context.obtainStyledAttributes(attrs,FragmentTag.Fragment);  if (fname == null) {    fname=a.getString(FragmentTag.Fragment_name);  }  int id=a.getResourceId(FragmentTag.Fragment_id,View.NO_ID);  String tag=a.getString(FragmentTag.Fragment_tag);  a.recycle();  View parent=null;  int containerId=parent != null ? parent.getId() : 0;  if (containerId == View.NO_ID && id == View.NO_ID && tag == null) {    throw new IllegalArgumentException(attrs.getPositionDescription() + ": Must specify unique android:id, android:tag, or have a parent with an id for " + fname);  }  Fragment fragment=id != View.NO_ID ? mFragments.findFragmentById(id) : null;  if (fragment == null && tag != null) {    fragment=mFragments.findFragmentByTag(tag);  }  if (fragment == null && containerId != View.NO_ID) {    fragment=mFragments.findFragmentById(containerId);  }  if (FragmentManagerImpl.DEBUG)   Log.v(TAG,"onCreateView: id=0x" + Integer.toHexString(id) + " fname="+ fname+ " existing="+ fragment);  if (fragment == null) {    fragment=Fragment.instantiate(this,fname);    fragment.mFromLayout=true;    fragment.mFragmentId=id != 0 ? id : containerId;    fragment.mContainerId=containerId;    fragment.mTag=tag;    fragment.mInLayout=true;    fragment.mFragmentManager=mFragments;    fragment.onInflate(this,attrs,fragment.mSavedFragmentState);    mFragments.addFragment(fragment,true);  } else   if (fragment.mInLayout) {    throw new IllegalArgumentException(attrs.getPositionDescription() + ": Duplicate id 0x" + Integer.toHexString(id)+ ", tag "+ tag+ ", or parent id 0x"+ Integer.toHexString(containerId)+ " with another fragment for "+ fname);  } else {    fragment.mInLayout=true;    if (!fragment.mRetaining) {      fragment.onInflate(this,attrs,fragment.mSavedFragmentState);    }    mFragments.moveToState(fragment);  }  if (fragment.mView == null) {    throw new IllegalStateException("Fragment " + fname + " did not create a view.");  }  if (id != 0) {    fragment.mView.setId(id);  }  if (fragment.mView.getTag() == null) {    fragment.mView.setTag(tag);  }  return fragment.mView;}  }
class C{  public static int toOctalMode(String strMode) throws IOException {  strMode=strMode.trim().toLowerCase();  if (strMode.length() == 9 || strMode.length() == 10)   return _toOctalMode(strMode);  if (strMode.length() <= 4 && strMode.length() > 0)   return Integer.parseInt(strMode,8);  throw new IOException("can't translate [" + strMode + "] to a mode value");}  }
class C{  @Override @Unpreemptible("Unwind stack possibly from unpreemptible code") public void deliverException(CompiledMethod compiledMethod,Address catchBlockInstructionAddress,Throwable exceptionObject,AbstractRegisters registers){  Address fp=registers.getInnermostFramePointer();  NormalMethod method=(NormalMethod)compiledMethod.getMethod();  Address sp=fp.plus(BaselineCompilerImpl.getEmptyStackOffset(method));  sp=sp.minus(BYTES_IN_ADDRESS);  sp.store(Magic.objectAsAddress(exceptionObject));  registers.setIP(catchBlockInstructionAddress);  VM.enableGC();  if (VM.VerifyAssertions)   VM._assert(registers.getInUse());  registers.setInUse(false);  Magic.restoreHardwareExceptionState(registers);  if (VM.VerifyAssertions)   VM._assert(NOT_REACHED);}  }
class C{  public Set<K> keySet(){  return Collections.unmodifiableSet(map.keySet());}  }
class C{  public static boolean charInString(char c,String s){  return (s.indexOf(c) != -1);}  }
class C{  public InvalidityDate(byte[] encoding) throws IOException {  super(encoding);  date=(Date)ASN1.decode(encoding);}  }
class C{  public boolean hasProteinBounds(){  return this.getBottomProtein() != null && this.getTopProtein() != null;}  }
class C{  protected String toXML(final Object root){  return xstream.toXML(root);}  }
class C{  private void prepareNetwork(){  Map<Id<Link>,? extends Link> networkLinks=network.getLinks();  Set<Id<Link>> transitLinks=new HashSet<>();  for (  TransitLine line : this.schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : line.getRoutes().values()) {      NetworkRoute networkRoute=transitRoute.getRoute();      transitLinks.add(networkRoute.getStartLinkId());      for (      Id<Link> linkId : transitRoute.getRoute().getLinkIds()) {        transitLinks.add(linkId);      }      transitLinks.add(networkRoute.getEndLinkId());    }  }  for (  Id<Link> transitLinkId : transitLinks) {    Link transitLink=networkLinks.get(transitLinkId);    if (!transitLink.getAllowedModes().contains(TransportMode.pt)) {      Set<String> modes=new HashSet<>();      modes.addAll(transitLink.getAllowedModes());      modes.add(TransportMode.pt);      transitLink.setAllowedModes(modes);    }  }}  }
class C{  private void indexFiles(){  String[] initialFiles=this.initialFiles;  if (initialFiles != null) {    this.initialFiles=null;    Set<CacheFile> diskOnly=new TreeSet<CacheFile>();    for (    String name : initialFiles) {      if (!accessOrder.containsKey(name)) {        diskOnly.add(new CacheFile(directory,name));      }    }    if (!diskOnly.isEmpty()) {      Map<String,File> newOrder=newAccessOrder();      for (      CacheFile cacheFile : diskOnly) {        newOrder.put(cacheFile.name,cacheFile);      }      newOrder.putAll(accessOrder);      this.accessOrder=newOrder;    }  }}  }
class C{  public static void loadLibrary(String lib){  try {    System.loadLibrary(lib);  } catch (  Throwable t) {    NATIVE_FAILED=true;    if (LOG_NATIVE_FAILURES && !FAILED_NATIVES.contains(lib))     t.printStackTrace();    FAILED_NATIVES.add(lib);  }}  }
class C{  public static NotifyUserProxy instance(){  return INSTANCE;}  }
class C{  @Override public boolean isPaintable(){  return true;}  }
class C{  public static void close(@CheckForNull OutputStream outputStream){  if (outputStream == null) {    return;  }  try {    outputStream.close();  } catch (  IOException e) {  }}  }
class C{  protected ShaderVar addUniform(String name,DataType dataType){  ShaderVar v=getInstanceForDataType(name,dataType);  v.isGlobal(true);  mUniforms.put(v.getName(),v);  return v;}  }
class C{  @Nullable String findLongestNamePrefix(String name,Set<String> namespaces){  return findLongestNamePrefix(NodeUtil.newQName(compiler,name),namespaces);}  }
class C{  public static final void validate(KeySpec keySpec) throws InvalidKeyException {  if (keySpec == null) {    throw new NullPointerException("The key spec to be validated cannot be null");  }  if (keySpec instanceof DHPublicKeySpec) {    validateDHPublicKey((DHPublicKeySpec)keySpec);  }}  }
class C{  public void trimToSize(){  if (count < value.length) {    char[] newValue=new char[count];    System.arraycopy(value,0,newValue,0,count);    value=newValue;    shared=false;  }}  }
class C{  @Override public void launch(){  if (this.canLaunch()) {    this.decrStackSize(0,1);    this.setEnergy(0);    this.daoDan.launch(this.targetPos);    this.daoDan=null;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.ROUTER__NAME:    return getName();case EipPackage.ROUTER__TO_CHANNELS:  return getToChannels();case EipPackage.ROUTER__FROM_CHANNELS:return getFromChannels();case EipPackage.ROUTER__OWNED_ROUTES:return getOwnedRoutes();case EipPackage.ROUTER__TYPE:return getType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void readKeyValues(Map<String,Object> result,Deserializer deserializer){  while (hasMoreProperties()) {    String name=readPropertyName();    Object property=deserializer.deserialize(this,Object.class);    result.put(name,property);    if (hasMoreProperties()) {      skipPropertySeparator();    }  }  skipEndObject();}  }
class C{  protected boolean useSudo(){  return true;}  }
class C{  public static boolean isChineseCard(String data){  String expr="^[0-9]{17}[0-9xX]$";  return data.matches(expr);}  }
class C{  public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){  if (sourceList == null || isEmpty(entryList)) {    return 0;  }  int sourceCount=sourceList.size();  for (  V entry : entryList) {    if (!sourceList.contains(entry)) {      sourceList.add(entry);    }  }  return sourceList.size() - sourceCount;}  }
class C{  public static boolean isElementFromByteCode(Element elt){  if (elt == null) {    return false;  }  if (elt instanceof Symbol.ClassSymbol) {    Symbol.ClassSymbol clss=(Symbol.ClassSymbol)elt;    if (null != clss.classfile) {      return clss.classfile.getName().endsWith(".class");    } else {      return false;    }  }  return isElementFromByteCode(elt.getEnclosingElement(),elt);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private boolean isPLLLocked(boolean controlI2C) throws UsbException {  int register=getStatusRegister(2,controlI2C);  return (register & 0x40) == 0x40;}  }
class C{  public void save() throws MemoryStorageException {  super.save();  File file=new File(knowledgeBaseFileName);  if (file.exists()) {    file.renameTo(new File(knowledgeBaseFileName + ".bak"));    file=new File(knowledgeBaseFileName);  }  try {    NetworkXMLParser.instance().toXML(getLongTermMemory(),file);  } catch (  Exception exception) {    throw new MemoryStorageException(exception);  }}  }
class C{  public static void waitToFinish(){  Runnable toFinish;  while ((toFinish=sPendingWorkFinishers.poll()) != null) {    toFinish.run();  }}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  public static boolean isCompileTimeString(ExpressionTree node){  ExpressionTree tree=TreeUtils.skipParens(node);  if (tree instanceof LiteralTree) {    return true;  }  if (TreeUtils.isUseOfElement(tree)) {    Element elt=TreeUtils.elementFromUse(tree);    return ElementUtils.isCompileTimeConstant(elt);  } else   if (TreeUtils.isStringConcatenation(tree)) {    BinaryTree binOp=(BinaryTree)tree;    return isCompileTimeString(binOp.getLeftOperand()) && isCompileTimeString(binOp.getRightOperand());  } else {    return false;  }}  }
class C{  public CubeHash512(){}  }
class C{  public ProjectAssociation(){  super(16,0.75F);}  }
class C{  public TextLineDecoder(Charset charset,LineDelimiter delimiter){  if (charset == null) {    throw new IllegalArgumentException("charset parameter shuld not be null");  }  if (delimiter == null) {    throw new IllegalArgumentException("delimiter parameter should not be null");  }  this.charset=charset;  this.delimiter=delimiter;  if (delimBuf == null) {    IoBuffer tmp=IoBuffer.allocate(2).setAutoExpand(true);    try {      tmp.putString(delimiter.getValue(),charset.newEncoder());    } catch (    CharacterCodingException cce) {    }    tmp.flip();    delimBuf=tmp;  }}  }
class C{  private static String saveFileInto(File sourceFile,String dstDirPath,String outputFilename){  if ((null == sourceFile) || (null == dstDirPath)) {    return null;  }  String dstFileName;  if (null == outputFilename) {    int dotPos=sourceFile.getName().lastIndexOf(".");    String fileExt="";    if (dotPos > 0) {      fileExt=sourceFile.getName().substring(dotPos);    }    dstFileName="vector_" + System.currentTimeMillis() + fileExt;  } else {    dstFileName=outputFilename;  }  File dstDir=Environment.getExternalStoragePublicDirectory(dstDirPath);  if (dstDir != null) {    dstDir.mkdirs();  }  File dstFile=new File(dstDir,dstFileName);  if (dstFile.exists()) {    String baseFileName=dstFileName;    String fileExt="";    int lastDotPos=dstFileName.lastIndexOf(".");    if (lastDotPos > 0) {      baseFileName=dstFileName.substring(0,lastDotPos);      fileExt=dstFileName.substring(lastDotPos);    }    int counter=1;    while (dstFile.exists()) {      dstFile=new File(dstDir,baseFileName + "(" + counter+ ")"+ fileExt);      counter++;    }  }  FileInputStream inputStream=null;  FileOutputStream outputStream=null;  try {    dstFile.createNewFile();    inputStream=new FileInputStream(sourceFile);    outputStream=new FileOutputStream(dstFile);    byte[] buffer=new byte[1024 * 10];    int len;    while ((len=inputStream.read(buffer)) != -1) {      outputStream.write(buffer,0,len);    }  } catch (  Exception e) {    dstFile=null;  } finally {    try {      if (inputStream != null)       inputStream.close();      if (outputStream != null)       outputStream.close();    } catch (    Exception e) {      Log.e(LOG_TAG,"## saveFileInto(): Exception Msg=" + e.getMessage());    }  }  if (null != dstFile) {    return dstFile.getAbsolutePath();  } else {    return null;  }}  }
class C{  private final void initRecursively(ProjectTypeDef myType,String typeId) throws ProjectTypeConstraintException {  ProjectTypeDef type=validatedData.get(typeId);  for (  String superTypeId : type.getParents()) {    myType.addAncestor(superTypeId);    ProjectTypeDef supertype=validatedData.get(superTypeId);    for (    Attribute attr : supertype.getAttributes()) {      for (      Attribute attr2 : myType.getAttributes()) {        if (attr.getName().equals(attr2.getName()) && !attr.getProjectType().equals(attr2.getProjectType())) {          throw new ProjectTypeConstraintException("Attribute name conflict. Project type " + myType.getId() + " could not be registered as attribute declaration "+ attr.getName()+ " is duplicated in its ancestor(s).");        }      }      myType.addAttributeDefinition(attr);    }    initRecursively(myType,superTypeId);  }}  }
class C{  public void markOutputsAsSpendable(){  if (outputs != null) {    for (    TransactionOutput output : outputs) {      if (output != null) {        output.markAsUnspent();      }    }  }}  }
class C{  public static String sessionStateToString(long state){  String name;  if (state == CKS_RO_PUBLIC_SESSION) {    name="CKS_RO_PUBLIC_SESSION";  } else   if (state == CKS_RO_USER_FUNCTIONS) {    name="CKS_RO_USER_FUNCTIONS";  } else   if (state == CKS_RW_PUBLIC_SESSION) {    name="CKS_RW_PUBLIC_SESSION";  } else   if (state == CKS_RW_USER_FUNCTIONS) {    name="CKS_RW_USER_FUNCTIONS";  } else   if (state == CKS_RW_SO_FUNCTIONS) {    name="CKS_RW_SO_FUNCTIONS";  } else {    name="ERROR: unknown session state 0x" + toFullHexString(state);  }  return name;}  }
class C{  protected void buildBlurKernel(float r){  int radius=(int)(r * 3.5f);  radius=(radius < 1) ? 1 : ((radius < 248) ? radius : 248);  if (blurRadius != radius) {    blurRadius=radius;    blurKernelSize=1 + blurRadius << 1;    blurKernel=new int[blurKernelSize];    blurMult=new int[blurKernelSize][256];    int bk, bki;    int[] bm, bmi;    for (int i=1, radiusi=radius - 1; i < radius; i++) {      blurKernel[radius + i]=blurKernel[radiusi]=bki=radiusi * radiusi;      bm=blurMult[radius + i];      bmi=blurMult[radiusi--];      for (int j=0; j < 256; j++)       bm[j]=bmi[j]=bki * j;    }    bk=blurKernel[radius]=radius * radius;    bm=blurMult[radius];    for (int j=0; j < 256; j++)     bm[j]=bk * j;  }}  }
class C{  private Exception givenHeavyNestedConnectionException(){  EJBException e=new EJBException(new PersistenceException("PE",new SQLException(new java.net.ConnectException())));  return new InvalidUserSession("Invalid User",e);}  }
class C{  public void visitInnerClassType(String name){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private FilterReply nameMatches(boolean matches){  if (matches) {    return exclude ? FilterReply.DENY : FilterReply.NEUTRAL;  } else {    return !exclude ? FilterReply.DENY : FilterReply.NEUTRAL;  }}  }
class C{  public void addToExistingVolumesIfAbsent(String volumeWWN,String hlu){  if (_existingVolumes == null) {    _existingVolumes=new StringMap();  }  String normalizedWWN=BlockObject.normalizeWWN(volumeWWN);  if (!_existingVolumes.containsKey(normalizedWWN) && (_userAddedVolumes == null || !_userAddedVolumes.containsKey(normalizedWWN))) {    _existingVolumes.put(normalizedWWN,hlu);  }}  }
class C{  public int rob(int[] nums){  if (nums == null || nums.length == 0)   return 0;  if (nums.length == 1)   return nums[0];  int preMax=nums[0];  int max=Math.max(nums[0],nums[1]);  for (int i=2; i < nums.length; i++) {    int temp=preMax;    preMax=max;    max=Math.max(temp + nums[i],preMax);  }  return max;}  }
class C{  public static void main(String[] args){  try {    if (args.length < 1) {      System.err.println("Usage:\n\n\tRepositoryIndexGenerator <path to repository>");      System.exit(1);    }    File repositoryHome=new File(args[0]);    TreeMap<String,String[]> packages=new TreeMap<String,String[]>();    File[] contents=repositoryHome.listFiles();    for (    File content : contents) {      if (content.isDirectory()) {        String[] packageInfo=processPackage(content);        packages.put(content.getName(),packageInfo);      }    }    writeMainIndex(packages,repositoryHome);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @Override public boolean contains(Point2D.Double p){  if (get(TRANSFORM) != null) {    try {      p=(Point2D.Double)get(TRANSFORM).inverseTransform(p,new Point2D.Double());    } catch (    NoninvertibleTransformException ex) {      ex.printStackTrace();    }  }  Rectangle2D r=getTextShape().getBounds2D();  return r.isEmpty() ? getBounds().contains(p) : r.contains(p);}  }
class C{  private String prepareHTMLContentForClipboard(String html){  int start=html.indexOf("<head");  int end=html.indexOf("</head>",start);  if (0 < start && start < end && end < html.length())   return html.substring(0,start) + html.substring(end,html.length());  return html;}  }
class C{  boolean collides(final Rectangle2D shape){  if (currentZone != null) {    return currentZone.collides(shape);  }  return false;}  }
class C{  public void keyPressed(KeyEvent event){}  }
class C{  public XhtmlFrameSetDocument appendBody(String value){  body.addElement(value);  return (this);}  }
class C{  public static void refresh(){  getMinecraft().renderGlobal.loadRenderers();}  }
class C{  public void delete(String name) throws CertificateException, IOException {  X509AttributeName attrName=new X509AttributeName(name);  int attr=attributeMap(attrName.getPrefix());  if (attr == 0) {    throw new CertificateException("Attribute name not recognized: " + name);  }  rawCertInfo=null;  String suffix=attrName.getSuffix();switch (attr) {case ATTR_VERSION:    if (suffix == null) {      version=null;    } else {      version.delete(suffix);    }  break;case (ATTR_SERIAL):if (suffix == null) {  serialNum=null;} else {  serialNum.delete(suffix);}break;case (ATTR_ALGORITHM):if (suffix == null) {algId=null;} else {algId.delete(suffix);}break;case (ATTR_ISSUER):issuer=null;break;case (ATTR_VALIDITY):if (suffix == null) {interval=null;} else {interval.delete(suffix);}break;case (ATTR_SUBJECT):subject=null;break;case (ATTR_KEY):if (suffix == null) {pubKey=null;} else {pubKey.delete(suffix);}break;case (ATTR_ISSUER_ID):issuerUniqueId=null;break;case (ATTR_SUBJECT_ID):subjectUniqueId=null;break;case (ATTR_EXTENSIONS):if (suffix == null) {extensions=null;} else {if (extensions != null) extensions.delete(suffix);}break;}}  }
class C{  public void receiveResultsetContext(com.emc.storageos.vasa.VasaServiceStub.SetContextResponse result){}  }
class C{  private void addCSSClasses(SVGPlot svgp){  final StyleLibrary style=context.getStyleLibrary();  final ColorLibrary colors=style.getColorSet(StyleLibrary.PLOT);  for (int i=0; i < tree.getHeight(); i++) {    if (!svgp.getCSSClassManager().contains(INDEX + i)) {      CSSClass cls=new CSSClass(this,INDEX + i);      final double relDepth=1. - (((double)i) / tree.getHeight());      if (settings.fill) {        cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,colors.getColor(i));        cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,relDepth * style.getLineWidth(StyleLibrary.PLOT));        cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,colors.getColor(i));        cls.setStatement(SVGConstants.CSS_FILL_OPACITY_PROPERTY,0.2);      } else {        cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,colors.getColor(i));        cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,relDepth * style.getLineWidth(StyleLibrary.PLOT));        cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_NONE_VALUE);      }      cls.setStatement(SVGConstants.CSS_STROKE_LINECAP_PROPERTY,SVGConstants.CSS_ROUND_VALUE);      cls.setStatement(SVGConstants.CSS_STROKE_LINEJOIN_PROPERTY,SVGConstants.CSS_ROUND_VALUE);      svgp.addCSSClassOrLogError(cls);    }  }  svgp.updateStyleElement();}  }
class C{  public void updateTipoDocumentoVital(TipoDocumentoVitalVO tipo){  String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,tipo.getId())).toString();  updateVO(qual,TABLE_NAME,COL_DEFS,tipo);}  }
class C{  public void putBoolean(String key,boolean value){  sharedPreferences.edit().putBoolean(key,value).commit();}  }
class C{  public void createDatabaseEntitiesForBusinessObjectDataDdlTesting(String businessObjectFormatFileType,String partitionKey,String partitionKeyGroupName,int partitionColumnPosition,List<String> partitionValues,List<String> subPartitionValues,String schemaDelimiterCharacter,String schemaEscapeCharacter,String schemaNullValue,List<SchemaColumn> schemaColumns,List<SchemaColumn> partitionColumns,boolean replaceUnderscoresWithHyphens,String customDdlName,boolean generateStorageFileEntities,boolean allowDuplicateBusinessObjectData){  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDao.getBusinessObjectFormatByAltKey(new BusinessObjectFormatKey(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,businessObjectFormatFileType,AbstractServiceTest.FORMAT_VERSION));  if (businessObjectFormatEntity == null) {    businessObjectFormatEntity=businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,businessObjectFormatFileType,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.FORMAT_DESCRIPTION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,partitionKey,partitionKeyGroupName,AbstractServiceTest.NO_ATTRIBUTES,schemaDelimiterCharacter,schemaEscapeCharacter,schemaNullValue,schemaColumns,partitionColumns);  }  if (StringUtils.isNotBlank(customDdlName)) {    boolean partitioned=(partitionColumns != null);    customDdlDaoTestHelper.createCustomDdlEntity(businessObjectFormatEntity,customDdlName,customDdlServiceTestHelper.getTestCustomDdl(partitioned));  }  StorageEntity storageEntity1=storageDao.getStorageByName(AbstractServiceTest.STORAGE_NAME);  if (storageEntity1 == null) {    storageEntity1=storageDaoTestHelper.createStorageEntity(AbstractServiceTest.STORAGE_NAME,StoragePlatformEntity.S3,Arrays.asList(new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),AbstractServiceTest.S3_BUCKET_NAME),new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_KEY_PREFIX_VELOCITY_TEMPLATE),AbstractServiceTest.S3_KEY_PREFIX_VELOCITY_TEMPLATE)));  }  StorageEntity storageEntity2=storageDao.getStorageByName(AbstractServiceTest.STORAGE_NAME_2);  if (storageEntity2 == null) {    storageEntity2=storageDaoTestHelper.createStorageEntity(AbstractServiceTest.STORAGE_NAME_2,StoragePlatformEntity.S3,Arrays.asList(new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),AbstractServiceTest.S3_BUCKET_NAME_2),new Attribute(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_KEY_PREFIX_VELOCITY_TEMPLATE),AbstractServiceTest.S3_KEY_PREFIX_VELOCITY_TEMPLATE)));  }  for (  String partitionValue : partitionValues) {    BusinessObjectDataEntity businessObjectDataEntity;    if (partitionColumnPosition == BusinessObjectDataEntity.FIRST_PARTITION_COLUMN_POSITION) {      businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,businessObjectFormatFileType,AbstractServiceTest.FORMAT_VERSION,partitionValue,subPartitionValues,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.VALID);    } else {      List<String> testSubPartitionValues=new ArrayList<>(subPartitionValues);      testSubPartitionValues.set(partitionColumnPosition - 2,partitionValue);      businessObjectDataEntity=businessObjectDataDaoTestHelper.createBusinessObjectDataEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,businessObjectFormatFileType,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.PARTITION_VALUE,testSubPartitionValues,AbstractServiceTest.DATA_VERSION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,BusinessObjectDataStatusEntity.VALID);    }    String s3KeyPrefix=s3KeyPrefixHelper.buildS3KeyPrefix(AbstractServiceTest.S3_KEY_PREFIX_VELOCITY_TEMPLATE,businessObjectFormatEntity,businessObjectDataHelper.getBusinessObjectDataKey(businessObjectDataEntity),AbstractServiceTest.STORAGE_NAME);    if (AbstractServiceTest.STORAGE_1_AVAILABLE_PARTITION_VALUES.contains(partitionValue) || Hive13DdlGenerator.NO_PARTITIONING_PARTITION_VALUE.equals(partitionValue)) {      StorageUnitEntity storageUnitEntity=storageUnitDaoTestHelper.createStorageUnitEntity(storageEntity1,businessObjectDataEntity,StorageUnitStatusEntity.ENABLED,AbstractServiceTest.NO_STORAGE_DIRECTORY_PATH);      if (generateStorageFileEntities) {        storageFileDaoTestHelper.createStorageFileEntities(storageUnitEntity,s3KeyPrefix,partitionColumns,subPartitionValues,replaceUnderscoresWithHyphens);      } else {        storageUnitEntity.setDirectoryPath(s3KeyPrefix);      }    }    if (AbstractServiceTest.STORAGE_2_AVAILABLE_PARTITION_VALUES.contains(partitionValue) && (allowDuplicateBusinessObjectData || !AbstractServiceTest.STORAGE_1_AVAILABLE_PARTITION_VALUES.contains(partitionValue))) {      StorageUnitEntity storageUnitEntity=storageUnitDaoTestHelper.createStorageUnitEntity(storageEntity2,businessObjectDataEntity,StorageUnitStatusEntity.ENABLED,AbstractServiceTest.NO_STORAGE_DIRECTORY_PATH);      if (generateStorageFileEntities) {        storageFileDaoTestHelper.createStorageFileEntities(storageUnitEntity,s3KeyPrefix,partitionColumns,subPartitionValues,replaceUnderscoresWithHyphens);      } else {        storageUnitEntity.setDirectoryPath(s3KeyPrefix);      }    }  }}  }
class C{  public void kick(){}  }
class C{  public void removeAttribute(final String name){  attributes.remove(name);}  }
class C{  public Tanaka(){  super(2,2,2);}  }
class C{  public StatementCollector(){  super(SimpleValueFactory.getInstance());}  }
class C{  public void addPolygon(PositionTextureVertex[] verts){  copyTo(verts,new TexturedPolygon[]{new TexturedPolygon(verts)});}  }
class C{  protected SVGOMDescElement(){}  }
class C{  public void load(KeyStoreHistory history) throws GeneralSecurityException, CryptoException {  KeyStoreState currentState=history.getCurrentState();  KeyStore keyStore=currentState.getKeyStore();  KeyStoreType type=KeyStoreType.resolveJce(keyStore.getType());  Enumeration<String> aliases=keyStore.aliases();  TreeMap<String,String> sortedAliases=new TreeMap<String,String>(new AliasComparator());  while (aliases.hasMoreElements()) {    String alias=aliases.nextElement();    sortedAliases.put(alias,alias);  }  data=new Object[sortedAliases.size()][8];  int i=0;  for (Iterator<Entry<String,String>> itr=sortedAliases.entrySet().iterator(); itr.hasNext(); i++) {    String alias=itr.next().getKey();    String entryType=null;    if (KeyStoreUtil.isTrustedCertificateEntry(alias,keyStore)) {      entryType=TRUST_CERT_ENTRY;    } else     if (KeyStoreUtil.isKeyPairEntry(alias,keyStore)) {      entryType=KEY_PAIR_ENTRY;    } else {      entryType=KEY_ENTRY;    }    data[i][0]=entryType;    if ((entryType.equals(KEY_PAIR_ENTRY) || entryType.equals(KEY_ENTRY)) && type.hasEntryPasswords()) {      if (currentState.getEntryPassword(alias) != null) {        data[i][1]=Boolean.FALSE;      } else {        data[i][1]=Boolean.TRUE;      }    } else {      data[i][1]=null;    }    Date expiry=getCertificateExpiry(alias,keyStore);    if (expiry == null) {      data[i][2]=null;    } else     if (new Date().after(expiry)) {      data[i][2]=Boolean.TRUE;    } else {      data[i][2]=Boolean.FALSE;    }    data[i][3]=alias;    KeyInfo keyInfo=getKeyInfo(alias,keyStore,currentState);    if (keyInfo != null) {      data[i][4]=getAlgorithmName(keyInfo);      data[i][5]=keyInfo.getSize();    }    if (expiry != null) {      data[i][6]=expiry;    } else {      data[i][6]=null;    }    if (!keyStore.getType().equals(KeyStoreType.PKCS12.jce()) && !keyStore.getType().equals(KeyStoreType.PKCS11.jce())) {      data[i][7]=keyStore.getCreationDate(alias);    } else {      data[i][7]=null;    }  }  fireTableDataChanged();}  }
class C{  public static Validator<CharSequence> number(@NonNull final Context context,@StringRes final int resourceId){  return new NumberValidator(context,resourceId);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean persistent(){  return persistent;}  }
class C{  protected void sequence_TypeVariable(ISerializationContext context,TypeVariable semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static String convertToHex(int number,int length){  return StringUtils.leftPad(Integer.toHexString(number),length,'0');}  }
class C{  public static boolean equals(byte[] a,byte[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++)   if (a[i] != a2[i])   return false;  return true;}  }
class C{  protected void sequence_VoidType(ISerializationContext context,VoidType semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getVoidTypeAccess().getNameVoidKeyword_1_0(),semanticObject.getName());  feeder.finish();}  }
class C{  public void removeNotify(){  super.removeNotify();  if (focusedComponent == this) {    focusedComponent=null;  }}  }
class C{  private String mapTableTypes(String tableType){  if (tableType.equals("TABLE")) {    return "BASE TABLE";  }  return tableType;}  }
class C{  @Command(description="Log in token",abbrev="li") public void loginToken(@Param(name="tokenId",description="Token ID") String tokenId) throws Exception {  char[] pin=System.console().readPassword("PIN: ");  Map<String,Object> logData=new LinkedHashMap<>();  logData.put(TOKEN_ID_PARAM,tokenId);  try {    PasswordStore.storePassword(tokenId,pin);    SignerClient.execute(new ActivateToken(tokenId,true));    AuditLogger.log(LOG_INTO_THE_TOKEN,XROAD_USER,logData);  } catch (  Exception e) {    AuditLogger.log(LOG_INTO_THE_TOKEN,XROAD_USER,e.getMessage(),logData);    throw e;  }}  }
class C{  public void addFooterView(View v){  addFooterView(v,null,true);}  }
class C{  public void close() throws IOException {  if (in != null) {    try {      in.close();    }  finally {      in=null;    }  }}  }
class C{  public double computeAverageLocal(int states[][],int sourceCol,int destCol){  initialise();  addObservations(states,sourceCol,destCol);  return computeAverageLocalOfObservations();}  }
class C{  static private int SENSOR_ADR(int a1,int a2){  return (((a2 & 0x0f) * 128) + (a1 & 0x7f)) + 1;}  }
class C{  public boolean isDeclaredStatic(){  EList<N4Modifier> _declaredModifiers=this.getDeclaredModifiers();  return _declaredModifiers.contains(N4Modifier.STATIC);}  }
class C{  public static void add(String namespace,String key,String value){  if (namespace != null || key != null || value != null) {    add(ByteString.copyFromUtf8(namespace),ByteString.copyFromUtf8(key),ByteString.copyFromUtf8(value));  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4mfPackage.PROJECT_DEPENDENCY___GET_SCOPE:    return getScope();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public void endPrefixMapping(String str) throws SAXException {}  }
class C{  public RosterGroupTableAction(String s){  super(s);}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  public synchronized void addSeries(XYSeries series){  mSeries.add(series);}  }
class C{  public int length(){  return m_length;}  }
class C{  public void testManyConnectionsUsingManyThreads(){  int numTasks=getConnectionNum();  ThreadPool threadPool=new ThreadPool(numTasks);  for (int i=0; i < numTasks; i++) {    threadPool.runTask(createTask(i));  }  threadPool.join();  assertEquals("Unable to create a connection",numTasks,vc.size());  if (numTasks != Support_SQL.sqlMaxConnections) {    try {      Connection c=Support_SQL.getConnection();      c.close();      fail("It is possible to create more than " + numTasks + "connections");    } catch (    SQLException sql) {    }  }}  }
class C{  public void rotate(float angle){  g.rotate(angle);}  }
class C{  public Boolean addDepartment(Integer departmentId,Department body) throws ApiException {  Object postBody=body;  if (departmentId == null) {    throw new ApiException(400,"Missing the required parameter 'departmentId' when calling addDepartment");  }  if (body == null) {    throw new ApiException(400,"Missing the required parameter 'body' when calling addDepartment");  }  String path="/hr/department/{departmentId}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "departmentId" + "\\}",apiClient.escapeString(departmentId.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,String> formParams=new HashMap<String,String>();  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  if (contentType.startsWith("multipart/form-data")) {    boolean hasFields=false;    FormDataMultiPart mp=new FormDataMultiPart();    if (hasFields)     postBody=mp;  } else {  }  try {    String[] authNames=new String[]{};    String response=apiClient.invokeAPI(path,"POST",queryParams,postBody,headerParams,formParams,accept,contentType,authNames);    if (response != null) {      return (Boolean)apiClient.deserialize(response,"",Boolean.class);    } else {      return null;    }  } catch (  ApiException ex) {    throw ex;  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,z1 * z1);        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return a == null ? null : a.getShow();}  }
class C{  public DateTimeFormatterBuilder appendMinuteOfDay(int minDigits){  return appendDecimal(DateTimeFieldType.minuteOfDay(),minDigits,4);}  }
class C{  public BigqueryConnection initialize() throws Exception {  bigquery=new Bigquery.Builder(httpTransport,jsonFactory,credential).setApplicationName(getClass().getSimpleName()).build();  createDatasetIfNeeded(datasetId);  createDatasetIfNeeded(TEMP_DATASET_NAME);  return this;}  }
class C{  public DERSequence(){}  }
class C{  public ReportedData sendSearchForm(Connection con,Form searchForm,String searchService) throws XMPPException {  UserSearch search=new UserSearch();  search.setType(IQ.Type.SET);  search.setTo(searchService);  search.addExtension(searchForm.getDataFormToSend());  PacketCollector collector=con.createPacketCollector(new PacketIDFilter(search.getPacketID()));  con.sendPacket(search);  IQ response=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (response == null) {    throw new XMPPException("No response from server on status set.");  }  if (response.getError() != null) {    return sendSimpleSearchForm(con,searchForm,searchService);  }  return ReportedData.getReportedDataFrom(response);}  }
class C{  public void download(Progress progress) throws IOException {  String tmpPath=tmd.getContentPath();  File f=new File(tmpPath + "/" + String.format("%08X",ID)+ ".app");  if (f.exists()) {    if (f.length() == size) {      Logger.log("Skipping Content: " + String.format("%08X",ID));      if (progress != null) {        progress.addCurrent((int)size);      }    } else {      if (Settings.downloadWhenCachedFilesMissingOrBroken) {        Logger.log("Content " + String.format("%08X",ID) + " has a different filesize and may be broken. Downloading it again.");        new File(tmpPath).delete();        Logger.log("Downloading Content: " + String.format("%08X",ID));        Downloader.getInstance().downloadContent(tmd.titleID,ID,tmpPath,progress);      } else {        if (Settings.skipBrokenFiles) {          Logger.log("Content " + String.format("%08X",ID) + " is broken. Ignoring it.");        } else {          Logger.log("Content " + String.format("%08X",ID) + " is broken. Downloading not allowed.");          System.exit(2);        }      }    }  } else {    Logger.log("Downloading Content: " + String.format("%08X",ID));    Downloader.getInstance().downloadContent(tmd.titleID,ID,tmpPath,progress);  }  if ((type & 0x02) == 0x02) {    f=new File(tmpPath + "/" + String.format("%08X",ID)+ ".h3");    if (!f.exists()) {      Logger.log("Downloading H3: " + String.format("%08X.h3",ID));      Downloader.getInstance().downloadContentH3(tmd.titleID,ID,tmpPath,null);    } else {      Logger.log("Skipping H3: " + String.format("%08X.h3",ID));    }  }}  }
class C{  private void testCountUnseenMessagesInMailbox() throws Exception {  LOG.info("countUnseenMessagesInMailbox");  long unseen=messageMapper.countUnseenMessagesInMailbox(MBOXES.get(1));  assertEquals(MESSAGE_NO.size() - 1,unseen);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void notifyRequestFinish(ResultType type,T cacheData,boolean outOfDate){  if (DEBUG) {    CLog.d(LOG_TAG,"%s, notifyRequestFinish: %s, %s",getCacheKey(),type,outOfDate);  }  if (mHasNotified) {    return;  }  mHasNotified=true;  mHandler.onCacheAbleRequestFinish(cacheData,type,outOfDate);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean hasWebsites(){  return hasRepeatingExtension(Website.class);}  }
class C{  public byte[] decode(byte[] array) throws DecoderException {  return decodeHex(new String(array).toCharArray());}  }
class C{  public static boolean isWindowsVista(){  return winVista;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells=0;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    int numBins=50000;    double minValue=inputFile.getMinimumValue();    double maxValue=inputFile.getMaximumValue();    double binSize=(maxValue - minValue) / numBins;    long[] histogram=new long[numBins];    int binNum;    int numBinsLessOne=numBins - 1;    double[] data;    updateProgress("Loop 1 of 2: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numCells++;          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2: ",(int)progress);    }    double[] cdf=new double[numBins];    cdf[0]=histogram[0];    for (int i=1; i < numBins; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    histogram=null;    for (int i=0; i < numBins; i++) {      cdf[i]=cdf[i] / numCells;    }    updateProgress("Loop 2 of 2: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          outputFile.setValue(row,col,cdf[binNum]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Grammar(String fileName,String grammarText) throws org.antlr.runtime.RecognitionException {  this(fileName,grammarText,null);}  }
class C{  @Override protected Set addListenerAndGetMembers(){  DistributionAdvisor da=UpdateAttributesProcessor.this.advisee.getDistributionAdvisor();  if (da.useAdminMembersForDefault()) {    return getDistributionManager().addAllMembershipListenerAndGetAllIds(this);  } else {    return super.addListenerAndGetMembers();  }}  }
class C{  public SettingsPanel(final GUIFrame frame){  super(frame.getFrame(),Dialog.ModalityType.DOCUMENT_MODAL);  final Settings settings=frame.getSystem().getSettings();  setTitle("System Settings");  Container contentPane=getContentPane();  contentPane.setLayout(new BorderLayout());  Container allOptions=new Container();  allOptions.setLayout(new BoxLayout(allOptions,BoxLayout.PAGE_AXIS));  JPanel inference=new JPanel();  inference.setLayout(new GridLayout(3,2));  inference.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(10,10,10,10),BorderFactory.createTitledBorder("Inference")));  inference.add(new JLabel(" Number of samples to draw per query:     "));  final JTextField sampleNumber=new JTextField();  sampleNumber.setText("" + Settings.nbSamples);  inference.add(sampleNumber);  inference.add(new JLabel(" Maximum sampling time:     "));  final JTextField sampleTime=new JTextField();  sampleTime.setText("" + Settings.maxSamplingTime);  inference.add(sampleTime);  inference.add(new JLabel(" Number of discretisation buckets:     "));  final JTextField discrete=new JTextField();  discrete.setText("" + Settings.discretisationBuckets);  inference.add(discrete);  allOptions.add(inference);  JPanel gui=new JPanel();  gui.setLayout(new GridLayout(3,2));  gui.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(10,10,10,10),BorderFactory.createTitledBorder("Graphical Interface")));  gui.add(new JLabel(" Variable label for user input:     "));  final JTextField userVar=new JTextField();  userVar.setText("" + settings.userInput);  gui.add(userVar);  gui.add(new JLabel(" Variable label for system output:     "));  final JTextField systemVar=new JTextField();  systemVar.setText("" + settings.systemOutput);  gui.add(systemVar);  gui.add(new JLabel(" Other variables to monitor in chat window:     "));  final JTextField toMonitor=new JTextField();  toMonitor.setText("" + StringUtils.join(settings.varsToMonitor,","));  gui.add(toMonitor);  allOptions.add(gui);  contentPane.add(allOptions,BorderLayout.NORTH);  contentPane.add(new JLabel(" "),BorderLayout.CENTER);  Container okcancelBox1=new Container();  okcancelBox1.setLayout(new BorderLayout());  okcancelBox1.add(new JLabel("  "),BorderLayout.NORTH);  Container okcancelBox=new Container();  okcancelBox.setLayout(new BorderLayout());  JButton cancelButton=new JButton("  Cancel  ");  cancelButton.addActionListener(null);  okcancelBox.add(cancelButton,BorderLayout.WEST);  JButton okButton=new JButton("     OK     ");  okButton.addActionListener(null);  okcancelBox.add(okButton,BorderLayout.CENTER);  okcancelBox.add(new JLabel("  "),BorderLayout.EAST);  okcancelBox1.add(okcancelBox,BorderLayout.EAST);  okcancelBox1.add(new JLabel("  "),BorderLayout.SOUTH);  contentPane.add(okcancelBox1,BorderLayout.SOUTH);  setLocation(new Point(250,250));  setMinimumSize(new Dimension(650,350));  setPreferredSize(new Dimension(650,350));  pack();  getRootPane().setDefaultButton(okButton);  okButton.requestFocus();  okButton.requestFocusInWindow();  setVisible(true);}  }
class C{  public void runFromConfig(ServerConfig config) throws IOException {  log.info("Starting server");  try {    zooKeeperServer=new ZooKeeperServer();    FileTxnSnapLog ftxn=new FileTxnSnapLog(new File(config.getDataLogDir()),new File(config.getDataDir()));    zooKeeperServer.setTxnLogFactory(ftxn);    zooKeeperServer.setTickTime(config.getTickTime());    zooKeeperServer.setMinSessionTimeout(config.getMinSessionTimeout());    zooKeeperServer.setMaxSessionTimeout(config.getMaxSessionTimeout());    cnxnFactory=ServerCnxnFactory.createFactory();    cnxnFactory.configure(config.getClientPortAddress(),config.getMaxClientCnxns());    cnxnFactory.startup(zooKeeperServer);    cnxnFactory.join();    zkServer.shutdown();  } catch (  InterruptedException e) {    log.warn("Server interrupted",e);  }}  }
class C{  public static LazyPVectorX<Long> rangeLong(long start,long end){  return fromStreamS(ReactiveSeq.rangeLong(start,end));}  }
class C{  private void createLeftOver(){  int lineLengthBytes=currentLastBytePos + 1;  if (lineLengthBytes > 0) {    leftOver=new byte[lineLengthBytes];    System.arraycopy(data,0,leftOver,0,lineLengthBytes);  } else {    leftOver=null;  }  currentLastBytePos=-1;}  }
class C{  public static final byte[] decodeQuotedPrintable(byte[] bytes){  if (bytes == null) {    return null;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b == ESCAPE_CHAR) {      try {        if ('\r' == (char)bytes[i + 1] && '\n' == (char)bytes[i + 2]) {          i+=2;          continue;        }        int u=Character.digit((char)bytes[++i],16);        int l=Character.digit((char)bytes[++i],16);        if (u == -1 || l == -1) {          return null;        }        buffer.write((char)((u << 4) + l));      } catch (      ArrayIndexOutOfBoundsException e) {        return null;      }    } else {      buffer.write(b);    }  }  return buffer.toByteArray();}  }
class C{  private void readTraceType(String firstToken,StringTokenizer tokens){  if (tokens.hasMoreTokens()) {    String token;    if (firstToken.toLowerCase().contains(TraceType.ORDINAL.toString())) {      while (tokens.hasMoreTokens()) {        token=tokens.nextToken();        tracesType.put(token,TraceType.ORDINAL);      }    } else     if (firstToken.toLowerCase().contains(TraceType.CATEGORICAL.toString())) {      while (tokens.hasMoreTokens()) {        token=tokens.nextToken();        tracesType.put(token,TraceType.CATEGORICAL);      }    }  }}  }
class C{  void mergeFrameStates(Method m,Edge edge,Map<Block,FrameState> states,Expr[] frame,int sp,int scopep){  FrameState target=states.get(edge.to);  for (int i=0; i < sp; i++) {    if (isLive(i,m,scopep) && frame[i] != target.frame[i]) {      if (target.frame[i] == null) {      } else {        assert (frame[i] != null && target.frame[i].op == OP_phi);        target.frame[i].append(frame[i],edge);      }    }  }}  }
class C{  public FeatureRecord(RandomAccessFile raf) throws IOException {  tag=raf.readInt();  offset=raf.readUnsignedShort();}  }
class C{  public void addData(byte[] buf,int off,int len){  if ((skipped + available + len) > databuf.length) {    int desiredSize=ByteQueue.nextTwoPow(available + len);    if (desiredSize > databuf.length) {      byte[] tmp=new byte[desiredSize];      System.arraycopy(databuf,skipped,tmp,0,available);      databuf=tmp;    } else {      System.arraycopy(databuf,skipped,databuf,0,available);    }    skipped=0;  }  System.arraycopy(buf,off,databuf,skipped + available,len);  available+=len;}  }
class C{  public String readFully(){synchronized (lock) {    if (super.size() == 0) {      try {        lock.wait();      } catch (      final InterruptedException ie) {      }    }    final String s=toString();    reset();    return s;  }}  }
class C{  public JBoss75xStandaloneLocalConfigurationCapability(){  super();  this.propertySupportMap.put(ResourcePropertySet.RESOURCE,Boolean.TRUE);}  }
class C{  @Override public void warn(String msg,Throwable t){  if (logger.isLoggable(Level.WARNING)) {    log(SELF,Level.WARNING,msg,t);  }}  }
class C{  public double weight(int indices[],int j,int j_,double I[][]){  int pa_j[]=getParents(j,indices,WIDTH,TYPE);  double weight=0.0;  for (  int pj : pa_j) {    weight+=I[pj][j_];  }  return weight;}  }
class C{  public RedBlackBST(){}  }
class C{  public static <T>T min(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)min((Collection<java.lang.Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(min,next) > 0) {      min=next;    }  }  return min;}  }
class C{  public static void main(final String[] args) throws Exception {  handleCommandLineArgs(args);  JOptionPane.showMessageDialog(null,new JLabel("<html>" + "This is the TileImageBreaker, it will create the map image tiles file for you. " + "<br>It will take any image, and break it up into 256x256 pixel squares, and put them all in a folder. "+ "<br>You can use this to create the base tiles (background) as well as the relief tiles (art relief)."+ "<br>For the base image (the one used to make centers.txt, etc), please save it to a folder called baseTiles"+ "<br>For the relief image, please save it to a folder called reliefTiles"+ "</html>"));  final FileSave locationSelection=new FileSave("Where to save Tile Images?",null,s_mapFolderLocation);  location=locationSelection.getPathString();  if (s_mapFolderLocation == null && locationSelection.getFile() != null) {    s_mapFolderLocation=locationSelection.getFile().getParentFile();  }  if (location == null) {    System.out.println("You need to select a folder to save the tiles in for this to work");    System.out.println("Shutting down");    System.exit(0);    return;  }  new TileImageBreaker().createMaps();}  }
class C{  public Notifications action(Action... actions){  this.actions=actions == null ? FXCollections.<Action>observableArrayList() : FXCollections.observableArrayList(actions);  return this;}  }
