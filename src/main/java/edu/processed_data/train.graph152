class C{  public void performBeforeClose(List<Action> actions){  this.actions.addAll(actions);}  }
class C{  public ViewPagerAdapter(FragmentManager fragmentManager){  super(fragmentManager);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("IncludeInDispute"))     p_IncludeInDispute="Y".equals(para[i].getParameter()); else     if (name.equals("OnlySOTrx"))     p_OnlySOTrx="Y".equals(para[i].getParameter()); else     if (name.equals("IsAllCurrencies"))     p_IsAllCurrencies="Y".equals(para[i].getParameter()); else     if (name.equals("SalesRep_ID"))     p_SalesRep_ID=para[i].getParameterAsInt(); else     if (name.equals("C_Currency_ID"))     p_C_Currency_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BP_Group_ID"))     p_C_BP_Group_ID=para[i].getParameterAsInt(); else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_C_DunningRun_ID=getRecord_ID();}  }
class C{  public synchronized int recv(byte[] buffer,int offset,int len) throws IOException {  if (m_state != PseudoTcpState.TCP_ESTABLISHED) {    throw new IOException("Socket not connected");  }  int read=m_rbuf.read(buffer,offset,len);  if (read == 0) {    m_bReadEnable=true;    return 0;  }  assert read != -1;  int available_space=m_rbuf.getWriteRemaining();  if (available_space - m_rcv_wnd >= Math.min(m_rbuf_len / 8,m_mss)) {    boolean bWasClosed=(m_rcv_wnd == 0);    m_rcv_wnd=available_space;    if (bWasClosed) {      attemptSend(SendFlags.sfImmediateAck);    }  }  return read;}  }
class C{  private static void saveEpisode(String text,int epNum,Series series){  PrintWriter txtFile;  File f=new File("./scripts/" + series.name);  if (!f.exists())   if (!f.mkdirs())   System.out.println("Failed to create directory ./scripts/" + series.name);  try {    new FileReader("./scripts/" + series.name + "/Episode "+ epNum+ ".txt");  } catch (  FileNotFoundException e) {    try {      txtFile=new PrintWriter(new FileWriter("./scripts/" + series.name + "/Episode "+ epNum+ ".txt",true));      txtFile.println(text);      txtFile.close();    } catch (    IOException ex) {      System.out.println("Something prevented the program from creating the output file");      System.exit(-1);    }  }}  }
class C{  public int navigate(int targetRow){  if (targetRow == m_currentRow)   return m_currentRow;  log.info("Row=" + targetRow);  int newRow=verifyRow(targetRow);  if (m_mTable.dataSave(newRow,false) == false)   return m_currentRow;  if (m_mTable.isInserting()) {    if (newRow > m_currentRow)     newRow--;    dataIgnore();  }  return setCurrentRow(newRow,true);}  }
class C{  public static void releaseArray(Object arr){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.513 -0500",hash_original_method="E5D299BA3CDE0EE166AC2795783FB427",hash_generated_method="30E8ED8B5F2EFB0EDF7AF05C52A4DEA7") public void onCallEstablished(SipSession session,String sessionDescription){}  }
class C{  private DateUtils(){}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  String cDocumentoPago=null;  Tasa oTasa=null;  String cXMLDatos=null;  byte[] datosAFirmar=null;  String cDatosAFirmar=null;  try {    cXMLDatos=PagoElectronicoManagerHelper.obtenerDocumentoPago(request,oForm);    cXMLDatos=PagoElectronicoManagerHelper.incluirInformacionCertificado(UserCertificateUtil.getUserData(request),cXMLDatos);    oTasa=PagoElectronicoManagerHelper.obtenerDatosTasa(request,oForm);    cDocumentoPago=FormCreator.crearResumenPago(oTasa,cXMLDatos,request);    datosAFirmar=Goodies.fromStrToUTF8(cXMLDatos);    cDatosAFirmar=Base64Util.encode(datosAFirmar);    cDatosAFirmar=cDatosAFirmar.replaceAll("\n","");    cDatosAFirmar=cDatosAFirmar.replaceAll("\r","");  } catch (  Exception e) {    logger.error(e.getMessage(),e);    request.setAttribute(ERROR_KEY,e.getMessage());    return mapping.findForward(ERROR_FORWARD);  }  request.setAttribute(DOC_PAGO_KEY,cDocumentoPago);  request.setAttribute(DATOS_PARA_FIRMAR_KEY,cDatosAFirmar);  request.setAttribute(DATOS_FIRMADOS,cXMLDatos);  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  public boolean isDisabled(){  return disabled;}  }
class C{  public void finest(String msg,Throwable thrown){  log(Level.FINEST,thrown,msg,thrown);}  }
class C{  public FastArrayList(Collection<? extends E> c){  elementData=c.toArray();  size=elementData.length;  if (elementData.getClass() != Object[].class)   elementData=Arrays.copyOf(elementData,size,Object[].class);}  }
class C{  public synchronized void start(){  if (!mOpened) {    return;  }  if (mStarted) {    return;  }  mRtpReceiver.startSession();  mVideoStartTime=SystemClock.uptimeMillis();  mStarted=true;  mEventListener.onPlayerStarted();}  }
class C{  public UnknownError(){  super();}  }
class C{  public void printStackTrace(PrintWriter printwriter){  super.printStackTrace(printwriter);}  }
class C{  public static Operation createOperationToUpdateOrCreateNetworkInterface(ComputeState existingComputeState,NetworkInterfaceState networkInterface,List<String> tenantLinks,StatelessService service,boolean isPublic){  String existingInterfaceLink=getExistingNetworkInterfaceLink(existingComputeState,isPublic);  Operation networkInterfaceOperation=null;  if (existingInterfaceLink == null) {    networkInterfaceOperation=createPostOperation(service,networkInterface,NetworkInterfaceService.FACTORY_LINK);  } else {    networkInterfaceOperation=createPatchOperation(service,networkInterface,existingInterfaceLink);  }  return networkInterfaceOperation;}  }
class C{  public SIPRequest createAckRequest(To responseToHeader){  SIPRequest newRequest;  Iterator headerIterator;  SIPHeader nextHeader;  newRequest=new SIPRequest();  newRequest.setRequestLine((RequestLine)this.requestLine.clone());  newRequest.setMethod(Request.ACK);  headerIterator=getHeaders();  while (headerIterator.hasNext()) {    nextHeader=(SIPHeader)headerIterator.next();    if (nextHeader instanceof RouteList) {      continue;    } else     if (nextHeader instanceof ProxyAuthorization) {      continue;    } else     if (nextHeader instanceof ContentLength) {      nextHeader=(SIPHeader)nextHeader.clone();      try {        ((ContentLength)nextHeader).setContentLength(0);      } catch (      InvalidArgumentException e) {      }    } else     if (nextHeader instanceof ContentType) {      continue;    } else     if (nextHeader instanceof CSeq) {      CSeq cseq=(CSeq)nextHeader.clone();      try {        cseq.setMethod(Request.ACK);      } catch (      ParseException e) {      }      nextHeader=cseq;    } else     if (nextHeader instanceof To) {      if (responseToHeader != null) {        nextHeader=responseToHeader;      } else {        nextHeader=(SIPHeader)nextHeader.clone();      }    } else     if (nextHeader instanceof ContactList || nextHeader instanceof Expires) {      continue;    } else     if (nextHeader instanceof ViaList) {      nextHeader=(SIPHeader)((ViaList)nextHeader).getFirst().clone();    } else {      nextHeader=(SIPHeader)nextHeader.clone();    }    try {      newRequest.attachHeader(nextHeader,false);    } catch (    SIPDuplicateHeaderException e) {      e.printStackTrace();    }  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    newRequest.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return newRequest;}  }
class C{  @SuppressWarnings("unused") private static int shlosserEstimator(int nRows,int sampleSize,ReaderColumnSelection sampleRowsReader){  return shlosserEstimator(nRows,sampleSize,sampleRowsReader,getValCounts(sampleRowsReader));}  }
class C{  public BusTravellerMovement(Settings settings){  super(settings);  int bcs=settings.getInt(BusControlSystem.BUS_CONTROL_SYSTEM_NR);  controlSystem=BusControlSystem.getBusControlSystem(bcs);  id=nextID++;  controlSystem.registerTraveller(this);  nextPath=new Path();  state=STATE_WALKING_ELSEWHERE;  if (settings.contains(PROBABILITIES_STRING)) {    probabilities=settings.getCsvDoubles(PROBABILITIES_STRING);  }  if (settings.contains(PROBABILITY_TAKE_OTHER_BUS)) {    probTakeOtherBus=settings.getDouble(PROBABILITY_TAKE_OTHER_BUS);  }  cbtd=new ContinueBusTripDecider(rng,probabilities);  pathFinder=new DijkstraPathFinder(null);  takeBus=true;}  }
class C{  @Override public Array createArrayOf(String typeName,Object[] elements) throws SQLException {  throw unsupported("createArray");}  }
class C{  protected synchronized boolean hasWaitingRequests(){  if (this.pendingRequests == null)   return false;  return !this.pendingRequests.isEmpty();}  }
class C{  @POST @Path("/{id}/deactivate") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.TENANT_ADMIN}) public TaskResourceRep deactivateVcenterDataCenter(@PathParam("id") URI id,@DefaultValue("false") @QueryParam("detach-storage") boolean detachStorage) throws DatabaseException {  if (ComputeSystemHelper.isDataCenterInUse(_dbClient,id) && !detachStorage) {    throw APIException.badRequests.resourceHasActiveReferences(VcenterDataCenter.class.getSimpleName(),id);  } else {    VcenterDataCenter dataCenter=queryResource(id);    ArgValidator.checkEntity(dataCenter,id,isIdEmbeddedInURL(id));    String taskId=UUID.randomUUID().toString();    Operation op=_dbClient.createTaskOpStatus(VcenterDataCenter.class,dataCenter.getId(),taskId,ResourceOperationTypeEnum.DELETE_VCENTER_DATACENTER_STORAGE);    ComputeSystemController controller=getController(ComputeSystemController.class,null);    controller.detachDataCenterStorage(dataCenter.getId(),true,taskId);    auditOp(OperationTypeEnum.DELETE_VCENTER_DATACENTER,true,null,dataCenter.auditParameters());    return toTask(dataCenter,taskId,op);  }}  }
class C{  protected String doIt() throws Exception {  log.info("M_DistributionList_ID=" + p_M_DistributionList_ID + ", M_Product_ID="+ p_M_Product_ID+ ", Qty="+ p_Qty+ ", Test="+ p_IsTest);  if (p_IsCreateSingleOrder)   log.info("SingleOrder=" + p_IsCreateSingleOrder + ", BPartner_ID="+ p_Bill_BPartner_ID+ ", Location_ID="+ p_Bill_Location_ID);  if (p_M_DistributionList_ID == 0)   throw new IllegalArgumentException("No Distribution List ID");  m_dl=new MDistributionList(getCtx(),p_M_DistributionList_ID,get_TrxName());  if (m_dl.get_ID() == 0)   throw new Exception("Distribution List not found -  M_DistributionList_ID=" + p_M_DistributionList_ID);  if (p_M_Product_ID == 0)   throw new IllegalArgumentException("No Product");  m_product=MProduct.get(getCtx(),p_M_Product_ID);  if (m_product.get_ID() == 0)   throw new Exception("Product not found -  M_Product_ID=" + p_M_Product_ID);  if (p_Qty == null || p_Qty.signum() != 1)   throw new IllegalArgumentException("No Quantity");  if (p_IsCreateSingleOrder && p_Bill_BPartner_ID == 0)   throw new IllegalArgumentException("Invoice Business Partner required for single Order");  if (!p_IsTest && p_IsCreateSingleOrder) {    MBPartner bp=new MBPartner(getCtx(),p_Bill_BPartner_ID,get_TrxName());    if (bp.get_ID() == 0)     throw new IllegalArgumentException("Single Business Partner not found - C_BPartner_ID=" + p_Bill_BPartner_ID);    m_singleOrder=new MOrder(getCtx(),0,get_TrxName());    m_singleOrder.setIsSOTrx(true);    m_singleOrder.setC_DocTypeTarget_ID(MOrder.DocSubTypeSO_Standard);    m_singleOrder.setBPartner(bp);    if (p_Bill_Location_ID != 0)     m_singleOrder.setC_BPartner_Location_ID(p_Bill_Location_ID);    if (!m_singleOrder.save())     throw new IllegalStateException("Single Order not created");  }  MDistributionListLine[] lines=m_dl.getLines();  int counter=0;  for (int i=0; i < lines.length; i++) {    if (createOrder(lines[i]))     counter++;  }  if (m_singleOrder != null) {    m_singleOrder.setDescription("# " + counter + " - "+ m_totalQty);    m_singleOrder.saveEx();  }  return "@Created@ #" + counter + " - @Qty@="+ m_totalQty;}  }
class C{  @Override public void close() throws IOException {  if (in != null) {    in.close();    in=null;    buf=null;  }}  }
class C{  public synchronized void insertImage(T image){  long timestamp=image.getTimestamp();  if (mImages.get(timestamp) != null) {    image.close();    return;  }  addImage(image);  mEvictionHandler.onFrameInserted(timestamp);  if (mImages.size() > mMaxCapacity) {    long selectFrameToDrop=mEvictionHandler.selectFrameToDrop();    removeAndCloseImage(selectFrameToDrop);    mEvictionHandler.onFrameDropped(selectFrameToDrop);  }}  }
class C{  public void clear(){  mPlottables.clear();}  }
class C{  private void InvMixColumn(){  long r0, r1, r2, r3;  r0=r1=r2=r3=0;  for (int j=0; j < BC; j+=8) {    int a0=(int)((A0 >> j) & 0xff);    int a1=(int)((A1 >> j) & 0xff);    int a2=(int)((A2 >> j) & 0xff);    int a3=(int)((A3 >> j) & 0xff);    a0=(a0 != 0) ? (logtable[a0 & 0xff] & 0xff) : -1;    a1=(a1 != 0) ? (logtable[a1 & 0xff] & 0xff) : -1;    a2=(a2 != 0) ? (logtable[a2 & 0xff] & 0xff) : -1;    a3=(a3 != 0) ? (logtable[a3 & 0xff] & 0xff) : -1;    r0|=(long)((mul0xe(a0) ^ mul0xb(a1) ^ mul0xd(a2)^ mul0x9(a3)) & 0xff) << j;    r1|=(long)((mul0xe(a1) ^ mul0xb(a2) ^ mul0xd(a3)^ mul0x9(a0)) & 0xff) << j;    r2|=(long)((mul0xe(a2) ^ mul0xb(a3) ^ mul0xd(a0)^ mul0x9(a1)) & 0xff) << j;    r3|=(long)((mul0xe(a3) ^ mul0xb(a0) ^ mul0xd(a1)^ mul0x9(a2)) & 0xff) << j;  }  A0=r0;  A1=r1;  A2=r2;  A3=r3;}  }
class C{  public String prepareModifyForm(){  LOGGER.info("prepareModifyForm Method is called");  final HashMap workflowsearchparams=getSearchParams();  setDepartmentSelected(getDepartment());  setAdditionalRuleSelected((String)workflowsearchparams.get("AdditionalRule"));  if (workflowsearchparams.get("FromAmount") != null) {    setFromAmount((BigDecimal)(workflowsearchparams.get("FromAmount")));    setToAmount((BigDecimal)(workflowsearchparams.get("ToAmount")));    setAmountRule(Boolean.TRUE);  } else {    setAmountRule(Boolean.FALSE);  }  final List<WorkFlowMatrix> matrixList=this.workFlowMatrixService.getWorkFlowforObjectforModify(workflowsearchparams);  int sublistIndex=matrixList.size();  for (int i=0; i < matrixList.size(); i++) {    if (matrixList.get(i).getNextAction().equals("END")) {      sublistIndex=i;    }  }  List<WorkFlowMatrixDetails> workFlowList=new LinkedList();  List<WorkFlowMatrixDetails> rejectionList=new LinkedList();  workFlowList=this.workFlowMatrixService.prepareWorkFlowMatrixDetailsList(matrixList.subList(0,sublistIndex + 1),workFlowList,Boolean.TRUE);  rejectionList=this.workFlowMatrixService.prepareWorkFlowMatrixDetailsList(matrixList.subList(sublistIndex + 1,matrixList.size()),rejectionList,Boolean.FALSE);  if (rejectionList.isEmpty()) {    rejectionList.add(new WorkFlowMatrixDetails());  }  this.workFlowMatrixDetails.addAll(workFlowList);  setMode(MODIFY);  setModifyToDate(new Date());  setFromDate(new Date());  this.workFlowMatrixRejectDetails.addAll(rejectionList);  LOGGER.info("prepareModifyForm Method is ended");  return NEW;}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  private void addFunnelSteps(FunnelAggregateBuffer funnelAggregate,Object[] parameters){  Arrays.stream(parameters).map(null).map(null).filter(null).forEach(null);}  }
class C{  private void findClub(){  if (ce() == null) {    return;  }  String title=Messages.getString("FiringDisplay.FindClubDialog.title");  String body=Messages.getString("FiringDisplay.FindClubDialog.message");  if (!clientgui.doYesNoDialog(title,body)) {    return;  }  attacks.removeAllElements();  attacks.addElement(new FindClubAction(cen));  ready();}  }
class C{  public boolean isExportable(){  return isExportable;}  }
class C{  public static long roundDown(int field,long timeInMillis){switch (field) {case Calendar.DAY_OF_MONTH:case Calendar.DAY_OF_WEEK:case Calendar.DAY_OF_YEAR:    return (timeInMillis - timeInMillis % (24 * 60 * 60* 1000));case Calendar.HOUR:  return (timeInMillis - timeInMillis % (60 * 60 * 1000));case Calendar.MINUTE:return (timeInMillis - timeInMillis % (60 * 1000));case Calendar.SECOND:return (timeInMillis - timeInMillis % (1000));default :return 0L;}}  }
class C{  private void updateClusterRoot(){  ArrayList<ServerHeartbeat> serverList=new ArrayList<>();  for (  ServerHeartbeat server : _serverSelf.getCluster().getServers()) {    serverList.add(server);  }  Collections.sort(serverList,null);  UpdatePodBuilder builder=new UpdatePodBuilder();  builder.name("cluster_root");  builder.cluster(_serverSelf.getCluster());  builder.type(PodType.solo);  builder.depth(16);  for (  ServerHeartbeat server : serverList) {    builder.server(server.getAddress(),server.port());  }  long sequence=CurrentTime.currentTime();  sequence=Math.max(sequence,_clusterRoot.getSequence() + 1);  builder.sequence(sequence);  UpdatePod update=builder.build();  updatePodProxy(update);}  }
class C{  public static long doubleFactorial(int n){  long result=1;  int startValue;  if (n % 2 == 0) {    startValue=2;  } else {    startValue=3;  }  for (int i=startValue; i <= n; i+=2) {    result*=(long)i;  }  return result;}  }
class C{  protected Frame<V> newFrame(final int nLocals,final int nStack){  return new Frame<V>(nLocals,nStack);}  }
class C{  public PropertyNameValuePair createPropertyNameValuePair(){  PropertyNameValuePairImpl propertyNameValuePair=new PropertyNameValuePairImpl();  return propertyNameValuePair;}  }
class C{  final public void print(String v){  try {    _out.print(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  private Map<String,Map<String,OFFlowMod>> readEntriesFromStorage(){  Map<String,Map<String,OFFlowMod>> entries=new ConcurrentHashMap<String,Map<String,OFFlowMod>>();  try {    Map<String,Object> row;    IResultSet resultSet=storageSourceService.executeQuery(TABLE_NAME,ColumnNames,null,null);    for (Iterator<IResultSet> it=resultSet.iterator(); it.hasNext(); ) {      row=it.next().getRow();      parseRow(row,entries);    }  } catch (  StorageException e) {    log.error("failed to access storage: {}",e.getMessage());  }  return entries;}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,ReplySender dm,boolean result,Operation op,ReplyException ex,RemotePutMessage sourceMessage,EntryEventImpl event){  Assert.assertTrue(recipient != null,"PutReplyMessage NULL recipient");  PutReplyMessage m=new PutReplyMessage(processorId,result,op,ex,null,event != null ? event.getVersionTag() : null);  if (sourceMessage.requireOldValue && event != null) {    event.exportOldValue(m);  }  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  private static void checkException(FileChannel fc,MapMode mode,long position,long size,Class<?>... expected) throws IOException {  Exception exc=null;  try {    fc.map(mode,position,size);  } catch (  Exception actual) {    exc=actual;  }  if (exc != null) {    for (    Class<?> clazz : expected) {      if (clazz.isInstance(exc)) {        return;      }    }  }  System.err.println("Expected one of");  for (  Class<?> clazz : expected) {    System.out.println(clazz);  }  if (exc == null) {    throw new RuntimeException("No expection thrown");  } else {    throw new RuntimeException("Unexpected exception thrown",exc);  }}  }
class C{  protected boolean hasOutstandingChanges(){  return (fieldValue.hasChanged() || fieldName.hasChanged() || fieldUPC.hasChanged()|| fieldSKU.hasChanged()|| fPriceList_ID.hasChanged()|| fWarehouse_ID.hasChanged()|| fVendor_ID.hasChanged()|| fProductCategory_ID.hasChanged()|| fAS_ID.hasChanged()|| fASI_ID.hasChanged()|| checkOnlyStock.hasChanged()|| checkAND.hasChanged());}  }
class C{  public FuzzyCondition maxEdits(Integer maxEdits){  this.maxEdits=maxEdits;  return this;}  }
class C{  public SoapFault(SOAPFault fault){  log.debug("Creating SoapFault");  this.fault=fault;}  }
class C{  public boolean equals(Object obj){  try {    return equals((FontRenderContext)obj);  } catch (  ClassCastException e) {    return false;  }}  }
class C{  @Override public boolean spatialDirty(Spatial spatial,DirtyType type){  if (spatial == null) {    spatial=rootNode;  }switch (type) {case Attached:    addViewDependents(spatial);  updateBounds();break;case Detached:removeViewDependents(spatial);updateBounds();break;case Bounding:break;case RenderState:break;case Transform:break;case Destroyed:break;}needsRender.set(true);return (false);}  }
class C{  public boolean isDeleted(){  return deleted;}  }
class C{  public static boolean clear(){  return clear(null);}  }
class C{  public void removeTrackingIcon(Object tag){  if (trackingIcons != null && trackingIcons.remove(tag)) {    repaint();  }}  }
class C{  public synchronized int read(byte[] b,int off,int len) throws IOException {  if (in == null) {    throw new IOException("Stream Closed");  }  if (len == 0) {    return 0;  }  while (slack == null) {    char[] buf=new char[len];    int n=in.read(buf);    if (n == -1) {      return -1;    }    if (n > 0) {      slack=new String(buf,0,n).getBytes(encoding);      begin=0;    }  }  if (len > slack.length - begin) {    len=slack.length - begin;  }  System.arraycopy(slack,begin,b,off,len);  begin+=len;  if (begin >= slack.length) {    slack=null;  }  return len;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  final String[] text={"Super Trainer, listen to me. Your skills are excellent but as you rarely hunt any creatures you are lacking in XP. Since your level is a factor in how hard you can hit, you are not reaching your full potential.","XP Hunter, I have teaching for you too. Your habit of always letting another soldier defend against creatures means that your skills are never increasing. Yes, you have good level but your skills matter too!","Well Rounded, I must commend you. You have a good level and good skills, both are needed for you to be able to hit creatures hard, and so that you can defend yourself. Well done!"};  new MonologueBehaviour(buildSemosTownhallAreaLeader(zone),text,1);}  }
class C{  public String generateTaskId(){  final String uuid=UUID.randomUUID().toString().substring(0,12);  int size=this.targetHostMeta == null ? 0 : this.targetHostMeta.getHosts().size();  return "PT_" + size + "_"+ PcDateUtils.getNowDateTimeStrConciseNoZone()+ "_"+ uuid;}  }
class C{  @Override protected void beginRender(GL10 gl,PLIRenderer renderer){  super.beginRender(gl,renderer);  gl.glRotatef(-90.0f,1.0f,0.0f,0.0f);  gl.glRotatef(180.0f,0.0f,1.0f,0.0f);}  }
class C{  public static Value convertToValue(SessionInterface session,Object x,int type){  Value v=convertToValue1(session,x,type);  if (session != null) {    session.addTemporaryLob(v);  }  return v;}  }
class C{  public String filterTypeTipText(){  return "Determines how/if the data will be transformed.";}  }
class C{  public UnitFakeDefinition basicGetRef(){  return ref;}  }
class C{  public boolean freeWrapper(DockWrapper w){  if (dockedWrappers.remove(w)) {    w.freeWrapper();    return true;  }  for (Iterator iter=dockedWrappers.iterator(); iter.hasNext(); ) {    DockWrapper dw=(DockWrapper)iter.next();    if (dw.freeWrapper(w)) {      return true;    }  }  return false;}  }
class C{  public APIUser(){}  }
class C{  public Cost createAndAddCost(final double startTime,final double endTime,final double amount){  if (startTime == 0. && endTime == 24. * 3600.) {    if (wrnCnt < 1) {      wrnCnt++;      log.warn("startTime=0:00 and endTime=24:00 means NO toll after 24h (no wrap-around); make sure this is what you want");      if (wrnCnt == 1) {        log.warn(Gbl.ONLYONCE);      }    }  }  Cost cost=new Cost(startTime,endTime,amount);  this.costs.add(cost);  this.cacheIsInvalid=true;  return cost;}  }
class C{  public WDSConversationPayload discoverMovies(String genre,String rating,String recency,int currentIndex,int pageNum,boolean searchForward) throws ClientProtocolException, IllegalStateException, IOException, HttpException, URISyntaxException, WatsonTheatersException, ParseException {  String errorMessage=null, issue=null;  Hashtable<String,String> uriParamsHash=new Hashtable<String,String>();  if (recency.equals("null")) {    errorMessage=Messages.getString("SearchTheMovieDbProxyResource.RECENCY_INFO_NEEDED");    issue=Messages.getString("SearchTheMovieDbProxyResource.RECENCY_UNSPECIFIED");    throw new WatsonTheatersException(errorMessage,issue);  }  if (genre != null && !genre.isEmpty()) {    uriParamsHash.put("with_genres",getGenreId(genre).toString());  }  if (rating != null && !rating.isEmpty()) {    uriParamsHash.put("certification_country","US");    uriParamsHash.put("certification",rating);  }  uriParamsHash.put("page",String.valueOf(pageNum));  uriParamsHash.put("sort_by","popularity.desc");  uriParamsHash=addDateFilters(recency,uriParamsHash);  URI uri=buildUriStringFromParamsHash(uriParamsHash,DISCOVER);  JsonObject responseObj=UtilityFunctions.httpGet(createTMDBHttpClient(),uri);  JsonArray jArray=responseObj.getAsJsonArray("results");  if (!searchForward) {    if (currentIndex % 20 == 0 || currentIndex % 20 > 10) {      currentIndex=0;    } else {      currentIndex=10;    }  }  List<MoviePayload> movies=getResults(jArray,(searchForward ? (currentIndex - ((pageNum - 1) * 20)) : currentIndex));  WDSConversationPayload moviesPayload=new WDSConversationPayload();  moviesPayload.setMovies(movies);  moviesPayload.setTotalPages(Integer.parseInt(UtilityFunctions.getPropValue(responseObj,"total_pages")));  moviesPayload.setNumMovies(Integer.parseInt(UtilityFunctions.getPropValue(responseObj,"total_results")));  return moviesPayload;}  }
class C{  public RawTypeSubstitution(final IAddress address,final int position,final int expressionId,final int baseTypeId,final Integer[] path,final Integer offset){  this.address=Preconditions.checkNotNull(address,"Error: address can not be null.");  Preconditions.checkArgument(position >= 0,"Error: position must be positive.");  this.position=position;  this.expressionId=expressionId;  this.baseTypeId=baseTypeId;  this.path=Preconditions.checkNotNull(path,"Error: path argument can not be null.");  this.offset=offset;}  }
class C{  public List<IResource> removeOperation(final IResource resource){  final List<IResource> removedResources=new ArrayList<IResource>();  final List<IResource> children=memberMap.remove(resource);  if (children != null) {    final Iterator<IResource> i=children.iterator();    while (i.hasNext()) {      removedResources.addAll(removeOperation(i.next()));    }  }  final IContainer parent=resource.getParent();  if (parent != null && !(parent instanceof IWorkspaceRoot)) {    final List<IResource> members=memberMap.get(parent);    if (members != null) {      members.remove(resource);      if (members.isEmpty()) {        removedResources.addAll(removeOperation(parent));      }    }  }  operationMap.remove(resource);  removedResources.add(resource);  return removedResources;}  }
class C{  public void testSpanNearVersusPhrase() throws Exception {  Term t1=randomTerm();  Term t2=randomTerm();  SpanQuery subquery[]=new SpanQuery[]{spanQuery(new SpanTermQuery(t1)),spanQuery(new SpanTermQuery(t2))};  SpanQuery q1=spanQuery(new SpanNearQuery(subquery,0,true));  PhraseQuery q2=new PhraseQuery(t1.field(),t1.bytes(),t2.bytes());  if (t1.equals(t2)) {    assertSameSet(q1,q2);  } else {    assertSameScores(q1,q2);  }}  }
class C{  private void updateTCPEndPointDetails(StoragePort port,CIMInstance tcpPointInstance) throws IOException {  if (null != port) {    port.setTcpPortNumber(Long.parseLong(getCIMPropertyValue(tcpPointInstance,PORTNUMBER)));    _dbClient.persistObject(port);  }}  }
class C{  public void replaceFromToWithFrom(int from,int to,AbstractBooleanList other,int otherFrom){  if (!(other instanceof BooleanArrayList)) {    super.replaceFromToWithFrom(from,to,other,otherFrom);    return;  }  int length=to - from + 1;  if (length > 0) {    checkRangeFromTo(from,to,size());    checkRangeFromTo(otherFrom,otherFrom + length - 1,other.size());    System.arraycopy(((BooleanArrayList)other).elements,otherFrom,elements,from,length);  }}  }
class C{  private boolean checkEistingMatrix(){  LOGGER.info("checkEistingMatrix Method is called");  final HashMap workflowheaderparams=getHeaderParams();  final List checkmatrixList=this.workFlowMatrixService.checkIfMatrixExists(workflowheaderparams);  if (checkmatrixList == null) {    return true;  } else {    final StringBuffer departmentString=new StringBuffer();    for (    final Long matrixid : (List<Long>)checkmatrixList) {      ;      if (!new String(departmentString).contains(this.workFlowMatrixService.getWorkFlowObjectbyId(matrixid).getDepartment())) {        departmentString.append(" ");        departmentString.append(this.workFlowMatrixService.getWorkFlowObjectbyId(matrixid).getDepartment());        departmentString.append(",");      }    }    ;    setDepartmentstring(departmentString.substring(0,departmentString.length() - 1));    LOGGER.info("checkEistingMatrix Method is ended");    return false;  }}  }
class C{  public void message(LocoNetMessage m){  if (m.getNumDataElements() != 6) {    return;  }  int b1=m.getElement(0) & 0xFF;  int b2=m.getElement(1) & 0xFF;  int b3=m.getElement(2) & 0xFF;  int b4=m.getElement(3) & 0x07;  if ((b1 == 0xD7) && ((b2 == 0x12) || (b2 == 0x17) || (b2 == 0x1F)) && (b3 == 0x00)) {    idBox.setSelectedIndex(b4 + 1);  }}  }
class C{  public void parseFormatPatterns(){  String evalPatterns=(String)formatPatterns.getValue(FacesContext.getCurrentInstance().getELContext());  if (evalPatterns == null || evalPatterns.length() == 0) {    return;  }  String[] patterns=evalPatterns.split("\\|");  if (formatPatternsList != null) {    return;  } else {    formatPatternsList=new ArrayList<String>(patterns.length);  }  for (  String pattern : patterns) {    formatPatternsList.add(pattern);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public List<JCCompilationUnit> enterTreesIfNeeded(List<JCCompilationUnit> roots){  if (shouldStop(CompileState.ATTR))   return List.nil();  return enterTrees(roots);}  }
class C{  public boolean isEnabled(){  return (!portStateLinkDown && !config.contains(OFPortConfig.OFPPC_PORT_DOWN));}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  final DisplayMetrics metrics=mResources.getDisplayMetrics();  final float screenDensity=metrics.density;  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE * screenDensity,CIRCLE_DIAMETER_LARGE * screenDensity,CENTER_RADIUS_LARGE * screenDensity,STROKE_WIDTH_LARGE * screenDensity,ARROW_WIDTH_LARGE * screenDensity,ARROW_HEIGHT_LARGE * screenDensity);  } else {    setSizeParameters(CIRCLE_DIAMETER * screenDensity,CIRCLE_DIAMETER * screenDensity,CENTER_RADIUS * screenDensity,STROKE_WIDTH * screenDensity,ARROW_WIDTH * screenDensity,ARROW_HEIGHT * screenDensity);  }}  }
class C{  public static OptionalParameter.Byte newSarSegmentSeqnum(byte value){  return new OptionalParameter.Byte(Tag.SAR_SEGMENT_SEQNUM,value);}  }
class C{  public Id<DgCrossingNode> convertLinkId2FromCrossingNodeId(Id<Link> linkId){  String idString=linkId.toString() + "11";  return idPool.createId(idString,DgCrossingNode.class);}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Long batchId,Principal principal){  RestWrapper restWrapper=null;  try {    File file=new File();    file.setBatchId(batchId);    fileDAO.delete(batchId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with ID:" + batchId + " deleted from File by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  @Pointcut("execution(* org.finra.herd.rest.*Controller.*(..))") public void restMethods(){}  }
class C{  public final TLCState enabled(SemanticNode pred,ActionItemList acts,Context c,TLCState s0,TLCState s1){switch (pred.getKind()) {case OpApplKind:{      OpApplNode pred1=(OpApplNode)pred;      return this.enabledAppl(pred1,acts,c,s0,s1);    }case LetInKind:{    LetInNode pred1=(LetInNode)pred;    OpDefNode[] letDefs=pred1.getLets();    Context c1=c;    for (int i=0; i < letDefs.length; i++) {      OpDefNode opDef=letDefs[i];      if (opDef.getArity() == 0) {        Value rhs=new LazyValue(opDef.getBody(),c1);        c1=c1.cons(opDef,rhs);      }    }    return this.enabled(pred1.getBody(),acts,c1,s0,s1);  }case SubstInKind:{  SubstInNode pred1=(SubstInNode)pred;  Subst[] subs=pred1.getSubsts();  int slen=subs.length;  Context c1=c;  for (int i=0; i < slen; i++) {    Subst sub=subs[i];    c1=c1.cons(sub.getOp(),this.getVal(sub.getExpr(),c,false));  }  return this.enabled(pred1.getBody(),acts,c1,s0,s1);}case APSubstInKind:{APSubstInNode pred1=(APSubstInNode)pred;Subst[] subs=pred1.getSubsts();int slen=subs.length;Context c1=c;for (int i=0; i < slen; i++) {  Subst sub=subs[i];  c1=c1.cons(sub.getOp(),this.getVal(sub.getExpr(),c,false));}return this.enabled(pred1.getBody(),acts,c1,s0,s1);}case LabelKind:{LabelNode pred1=(LabelNode)pred;return this.enabled(pred1.getBody(),acts,c,s0,s1);}default :{Assert.fail("Attempted to compute ENABLED on a non-boolean expression.\n" + pred);return null;}}}  }
class C{  public void verifyLobMac(byte[] hmac,long lobId){  byte[] result=calculateLobMac(lobId);  if (!Utils.compareSecure(hmac,result)) {    throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"Invalid lob hmac; possibly the connection was re-opened internally");  }}  }
class C{  @SuppressWarnings("RedundantThrows") static boolean makeFile(@NonNull final File file) throws IOException {  if (file.exists()) {    return !file.isDirectory();  }  try {    if (file.createNewFile()) {      return true;    }  } catch (  IOException e) {  }  if (Helper.isAtLeastAPI(LOLLIPOP)) {    DocumentFile document=getDocumentFile(file.getParentFile(),true);    try {      if (document != null) {        return document.createFile(MimeTypes.getMimeType(file),file.getName()) != null;      }    } catch (    Exception e) {      return false;    }  }  return false;}  }
class C{  public String partName(long part){  if (numberOfParts > 1) {    return name + ".part" + part;  } else {    return name;  }}  }
class C{  public Y ge(X value){  return add(" >= ?",value);}  }
class C{  public static boolean isBaseLanguage(String langInfo){  if (langInfo == null || langInfo.length() == 0 || langInfo.equals(s_languages[0].getName()) || langInfo.equals(s_languages[0].getLanguageCode()) || langInfo.equals(s_languages[0].getAD_Language()))   return true;  return false;}  }
class C{  public CStandardEditPanel(final String headline,final IFieldDescription<String> name,final IFieldDescription<String> description,final IFieldDescription<Date> creationDate,final IFieldDescription<Date> modificationDate){  super(new BorderLayout(5,5));  Preconditions.checkNotNull(headline,"IE02072: Headline argument can not be null");  Preconditions.checkNotNull(name,"IE02073: Name argument can not be null");  Preconditions.checkNotNull(description,"IE02074: Description argument can not be null");  Preconditions.checkNotNull(creationDate,"IE02075: Creation date argument can not be null");  Preconditions.checkNotNull(modificationDate,"IE02076: Modification date argument can not be null");  m_savedName=name.getValue();  m_savedDescription=description.getValue();  setBorder(new EmptyBorder(0,0,0,0));  m_nameTextField=new CHelpSaveField(name.getHelp());  m_nameTextField.setDocument(new JTextFieldLimit());  m_nameTextField.setText(name.getValue());  m_creationDateValueLabel=new CHelpLabel(DateHelpers.formatDateTime(creationDate.getValue()),creationDate.getHelp());  m_modificationDateValueLabel=new CHelpLabel(DateHelpers.formatDateTime(modificationDate.getValue()),modificationDate.getHelp());  m_descriptionField=new CHelpSavePane(description.getHelp());  m_descriptionField.setDocument(new JTextFieldLimit());  m_descriptionField.setText(description.getValue());  addNameDatesPanel(headline,name,creationDate,modificationDate);  addDescriptionPanel();  final UpdateListener updateListener=new UpdateListener();  m_nameTextField.getDocument().addDocumentListener(updateListener);  m_descriptionField.getDocument().addDocumentListener(updateListener);}  }
class C{  BarcodeRow(int width){  this.row=new byte[width];  currentLocation=0;}  }
class C{  public ProjectStaticData analyze(){  ProjectStaticData data=new ProjectStaticData();  if (Properties.CTG_SCHEDULE.equals(AvailableSchedule.HISTORY)) {    data.initializeLocalHistory();  }  for (  String className : getCutsToAnalyze()) {    Class<?> theClass=null;    int numberOfBranches=-1;    boolean hasCode=false;    Properties.TARGET_CLASS=className;    InstrumentingClassLoader instrumenting=new InstrumentingClassLoader();    BranchPool.getInstance(instrumenting).reset();    try {      Sandbox.goingToExecuteUnsafeCodeOnSameThread();      instrumenting.loadClass(className);      numberOfBranches=BranchPool.getInstance(instrumenting).getBranchCounter();      hasCode=(numberOfBranches > 0) || (BranchPool.getInstance(instrumenting).getBranchlessMethods().size() > 0);      theClass=ClassLoader.getSystemClassLoader().loadClass(className);    } catch (    Exception e) {      logger.warn("Cannot handle " + className + " due to: "+ e.getClass()+ " "+ e.getMessage());      continue;    } finally {      Sandbox.doneWithExecutingUnsafeCodeOnSameThread();      BranchPool.getInstance(instrumenting).reset();      Properties.TARGET_CLASS="";    }    ClassInfo ci=new ClassInfo(theClass,numberOfBranches,hasCode);    data.addNewClass(ci);    if (Properties.CTG_SCHEDULE == AvailableSchedule.HISTORY) {      ci.setChanged(data.hasChanged(theClass.getCanonicalName() + ".java"));      ci.isToTest(data.isToTest(theClass.getCanonicalName(),HistorySchedule.COMMIT_IMPROVEMENT));    }  }  return data;}  }
class C{  public AnnotationModelEvent(AnnotationModel model){  this.annotationModel=model;}  }
class C{  protected boolean matches(Object[] args,Class... expectedTypes){  if (args.length != expectedTypes.length)   return false;  for (int i=0; i < args.length; i++) {    if (args[i] != null && !expectedTypes[i].isInstance(args[i]))     return false;  }  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  private void generatePreamble(Node.Nodes page) throws JasperException {  String servletPackageName=ctxt.getServletPackageName();  String servletClassName=ctxt.getServletClassName();  String serviceMethodName=Constants.SERVICE_METHOD_NAME;  genPreamblePackage(servletPackageName);  genPreambleImports();  out.printin("public final class ");  out.print(servletClassName);  out.print(" extends ");  out.println(pageInfo.getExtends());  out.printin("    implements org.apache.jasper.runtime.JspSourceDependent");  if (!pageInfo.isThreadSafe()) {    out.println(",");    out.printin("                 SingleThreadModel");  }  out.println(" {");  out.pushIndent();  generateDeclarations(page);  genPreambleStaticInitializers();  genPreambleClassVariableDeclarations(servletClassName);  genPreambleMethods();  out.printin("public void ");  out.print(serviceMethodName);  out.println("(HttpServletRequest request, HttpServletResponse response)");  out.println("        throws java.io.IOException, ServletException {");  out.pushIndent();  out.println();  out.printil("PageContext pageContext = null;");  if (pageInfo.isSession())   out.printil("HttpSession session = null;");  if (pageInfo.isErrorPage()) {    out.printil("Throwable exception = org.apache.jasper.runtime.JspRuntimeLibrary.getThrowable(request);");    out.printil("if (exception != null) {");    out.pushIndent();    out.printil("response.setStatus((Integer)request.getAttribute(\"javax.servlet.error.status_code\"));");    out.popIndent();    out.printil("}");  }  out.printil("ServletContext application = null;");  out.printil("ServletConfig config = null;");  out.printil("JspWriter out = null;");  out.printil("Object page = this;");  out.printil("JspWriter _jspx_out = null;");  out.printil("PageContext _jspx_page_context = null;");  out.println();  out.printil("try {");  out.pushIndent();  out.printin("response.setContentType(");  out.print(quote(pageInfo.getContentType()));  out.println(");");  if (ctxt.getOptions().isXpoweredBy()) {    out.printil("response.setHeader(\"X-Powered-By\", \"" + Constants.JSP_NAME + "\");");  }  out.printil("pageContext = _jspxFactory.getPageContext(this, request, response,");  out.printin("\t\t\t");  out.print(quote(pageInfo.getErrorPage()));  out.print(", " + pageInfo.isSession());  out.print(", " + pageInfo.getBuffer());  out.print(", " + pageInfo.isAutoFlush());  out.println(");");  out.printil("_jspx_page_context = pageContext;");  out.printil("application = pageContext.getServletContext();");  out.printil("config = pageContext.getServletConfig();");  if (pageInfo.isSession())   out.printil("session = pageContext.getSession();");  out.printil("out = pageContext.getOut();");  out.printil("_jspx_out = out;");  out.printil("_jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute(\"com.sun.appserv.jsp.resource.injector\");");  out.println();}  }
class C{  void undent(){  lmargin=lmargin - width;}  }
class C{  PolynominalAttribute(String name){  this(name,Ontology.NOMINAL);}  }
class C{  Round(Context context,List<JCCompilationUnit> roots,List<ClassSymbol> classSymbols,Log.DeferredDiagnosticHandler deferredDiagnosticHandler){  this(context,1,0,0,deferredDiagnosticHandler);  this.roots=roots;  genClassFiles=new HashMap<String,JavaFileObject>();  compiler.todo.clear();  topLevelClasses=getTopLevelClasses(roots).prependList(classSymbols.reverse());  packageInfoFiles=getPackageInfoFiles(roots);  findAnnotationsPresent();}  }
class C{  @Override public GridNioFuture<?> onPauseReads(GridNioSession ses) throws IgniteCheckedException {  return tail.onPauseReads(ses);}  }
class C{  private Object processClass(Class<?> clazz) throws MojoExecutionException {  log.debug("Generating example XML for class \"" + clazz.getName() + "\".");  Object instance=null;  try {    if (String.class.isAssignableFrom(clazz)) {      instance="string";    } else     if (Integer.class.isAssignableFrom(clazz) || int.class.isAssignableFrom(clazz)) {      instance=0;    } else     if (Long.class.isAssignableFrom(clazz) || long.class.isAssignableFrom(clazz)) {      instance=0L;    } else     if (BigDecimal.class.isAssignableFrom(clazz)) {      instance=BigDecimal.ZERO;    } else     if (XMLGregorianCalendar.class.isAssignableFrom(clazz)) {      DatatypeFactory datatypeFactory=DatatypeFactory.newInstance();      instance=datatypeFactory.newXMLGregorianCalendar(EXAMPLE_GREGORIAN_CALENDAR);    } else     if (Boolean.class.isAssignableFrom(clazz) || boolean.class.isAssignableFrom(clazz)) {      instance=true;    } else     if (clazz.isEnum()) {      Enum<?>[] enums=(Enum<?>[])clazz.getEnumConstants();      if (enums != null && enums.length > 0) {        instance=enums[0];      }    } else     if (clazz.getAnnotation(XmlType.class) != null) {      if (!clazz.isInterface()) {        instance=clazz.newInstance();        if (!callStack.contains(clazz.getName())) {          callStack.push(clazz.getName());          for (          Field field : clazz.getDeclaredFields()) {            field.setAccessible(true);            processField(instance,field);          }          callStack.pop();        }      }    } else {      instance="string";    }  } catch (  IllegalAccessException|InstantiationException|DatatypeConfigurationException e) {    throw new MojoExecutionException("Unable to create example XML for class \"" + clazz.getName() + "\". Reason: "+ e.getMessage(),e);  }  return instance;}  }
class C{  public boolean checkBranchId(){  return this.checkBranchId;}  }
class C{  protected String alterCase(String value){switch (getCase()) {case UPPERCASE:    return value.toUpperCase();case LOWERCASE:  return value.toLowerCase();default :return value;}}  }
class C{  public GuacamoleInsufficientCredentialsException(String message,Throwable cause,CredentialsInfo credentialsInfo){  super(message,cause,credentialsInfo);}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitByteMemberValue(this);}  }
class C{  public int readI32() throws TException {  return zigzagToInt(readVarint32());}  }
class C{  public QueryNextResponse QueryNext(QueryNextRequest req) throws ServiceFaultException, ServiceResultException {  return (QueryNextResponse)channel.serviceRequest(req);}  }
class C{  public String convertAssignmentOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public StoreRateLimiting rateLimiting(){  return nodeRateLimiting ? indicesStore.rateLimiting() : this.rateLimiting;}  }
class C{  public Object clone(){  try {    TabularDataSupport c=(TabularDataSupport)super.clone();    c.dataMap=new HashMap<Object,CompositeData>(c.dataMap);    return c;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString(),e);  }}  }
class C{  public DoubleBag(final DoubleBag other){  if (other == null) {    numObjs=0;    objs=new double[1];  } else {    numObjs=other.numObjs;    objs=new double[numObjs];    System.arraycopy(other.objs,0,objs,0,numObjs);  }}  }
class C{  private Map<SignatureLibrary,List<String>> processMemberDatabaseXrefs(final XMLEventReader reader) throws XMLStreamException {  final Map<SignatureLibrary,List<String>> sigLibToMethodAcMap=new HashMap<SignatureLibrary,List<String>>();  boolean stillInMemberListElement=true;  while (stillInMemberListElement) {    final XMLEvent currentEvent=reader.nextEvent();    if (currentEvent.isEndElement()) {      final EndElement endElement=currentEvent.asEndElement();      stillInMemberListElement=!EL_MEMBER_LIST.equals(endElement.getName().getLocalPart());    } else     if (currentEvent.isStartElement()) {      final StartElement innerStartElement=currentEvent.asStartElement();      final String elementName=innerStartElement.getName().getLocalPart();      if (EL_DB_XREF.equals(elementName)) {        final String memberDBName=retrieveAttributeValue(innerStartElement,QNAME_AT_DB,true,"/interprodb/interpro/member_list/db_xref/@db");        final String accession=retrieveAttributeValue(innerStartElement,QNAME_AT_DB_KEY,true,"/interprodb/interpro/member_list/db_xref/@dbkey");        final SignatureLibrary sigLib=SIG_LIB_LOOKUP.get(memberDBName);        if (sigLib != null) {          if (!sigLibToMethodAcMap.containsKey(sigLib)) {            sigLibToMethodAcMap.put(sigLib,new ArrayList<String>());          }          sigLibToMethodAcMap.get(sigLib).add(accession);        }      }    }  }  return sigLibToMethodAcMap;}  }
class C{  public void updateSyncStateFromAndroid(){  if (AndroidSyncSettings.isSyncEnabled(mContext)) {    start();  } else {    stop();  }}  }
class C{  public PrimitiveType basicGetBaseType(){  return baseType;}  }
class C{  protected void formExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  BusquedaDescriptoresForm formDescr=(BusquedaDescriptoresForm)form;  setInTemporalSession(request,DescripcionConstants.LISTAS_DESCRIPTORAS_KEY,getListasDescriptoras(formDescr,request));  setInTemporalSession(request,DescripcionConstants.SELECCION_MULTIPLE_KEY,new Boolean(false));  setReturnActionFordward(request,mapping.findForward("ver_descriptores"));}  }
class C{  public Name composeName(Name name,Name prefix) throws NamingException {  checkIsDestroyed();  Name parsedPrefix=getParsedName((Name)prefix.clone());  Name parsedName=getParsedName(name);  return parsedPrefix.addAll(parsedName);}  }
class C{  public static void copyEntityProperties(Object source,Object target){  org.springframework.beans.BeanUtils.copyProperties(source,target,COPY_IGNORED_PROPERTIES);}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public SQLNonTransientException(String reason){  super(reason,null,0);}  }
class C{  public static void loadGemFireProperties(Properties p,boolean ignoreGemFirePropsFile) throws GemFireIOException {  if (!ignoreGemFirePropsFile) {    loadPropertiesFromURL(p,DistributedSystem.getPropertyFileURL());  }  loadPropertiesFromURL(p,DistributedSystem.getSecurityPropertiesFileURL());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] menuNames=getStringList(stack);  UIManager uiMgr=stack.getUIMgrSafe();  if (uiMgr != null) {    Widget nextUI=uiMgr.getMenuTransitionTarget();    if (nextUI == null)     return Boolean.FALSE;    if (menuNames == null || menuNames.length == 0)     return Boolean.TRUE;    for (int i=0; i < menuNames.length; i++)     if (menuNames[i] != null && nextUI.getName().equalsIgnoreCase(menuNames[i]))     return Boolean.TRUE;  }  return Boolean.FALSE;}  }
class C{  private View makeAndAddView(int position,int offset,int x,boolean fromLeft){  View child;  if (!mDataChanged) {    child=mRecycler.get(position);    if (child != null) {      int childLeft=child.getLeft();      mRightMost=Math.max(mRightMost,childLeft + child.getMeasuredWidth());      mLeftMost=Math.min(mLeftMost,childLeft);      setUpChild(child,offset,x,fromLeft);      return child;    }  }  child=mAdapter.getView(position,null,this);  setUpChild(child,offset,x,fromLeft);  return child;}  }
class C{  protected void spinFan(){  ObservableList<Node> list=paneForBlades.getChildren();  for (  Node n : list) {    ((Arc)n).setStartAngle(((Arc)n).getStartAngle() + startAngle);  }}  }
class C{  public double[][] computeNorms(double[][] mvTimeSeries1,double[][] mvTimeSeries2,double[][] mvTimeSeries3,int t){  int timeSteps=mvTimeSeries1.length;  double[][] norms=new double[timeSteps][3];  for (int t2=0; t2 < timeSteps; t2++) {    if (t2 == t) {      norms[t2][0]=Double.POSITIVE_INFINITY;      norms[t2][1]=Double.POSITIVE_INFINITY;      norms[t2][2]=Double.POSITIVE_INFINITY;      continue;    }    norms[t2][0]=norm(mvTimeSeries1[t],mvTimeSeries1[t2]);    norms[t2][1]=norm(mvTimeSeries2[t],mvTimeSeries2[t2]);    norms[t2][2]=norm(mvTimeSeries3[t],mvTimeSeries3[t2]);  }  return norms;}  }
class C{  private void applyToGroup(final AST2BOpContext context,final QueryRoot queryRoot,final QueryHintScope scope,final GraphPatternGroup<IGroupMemberNode> group,final String name,final String value){  for (  IGroupMemberNode child : group) {    _applyQueryHint(context,queryRoot,scope,(ASTBase)child,name,value);  }  _applyQueryHint(context,queryRoot,scope,(ASTBase)group,name,value);}  }
class C{  public void outputExampleXML(PrintWriter writer,XMLObjectParser parser){  writer.println("<pre>");  if (parser.hasExample()) {    outputHTMLSafeText(writer,parser.getExample());  } else {    outputExampleXML(writer,parser,0);  }  writer.println("</pre>");}  }
class C{  private void syncSessionScopedBeans(ServletRequest request){  if (request instanceof HttpServletRequest) {    HttpSession session=((HttpServletRequest)request).getSession(false);    if (session != null) {      ApplicationAssociate associate=getAssociate();      if (associate == null) {        return;      }      BeanManager manager=associate.getBeanManager();      if (manager != null) {        for (Enumeration e=session.getAttributeNames(); e.hasMoreElements(); ) {          String name=(String)e.nextElement();          if (manager.isManaged(name)) {            session.setAttribute(name,session.getAttribute(name));          }        }      }    }  }}  }
class C{  public boolean isList_1(){  return list_1;}  }
class C{  public void playFileForUser(String fileName,String userName) throws SoundPlaybackException {  if (userName == null || userName.isEmpty()) {    userName=appProperties.getProperty("username_to_join_channel");  }  try {    Guild guild=getUsersGuild(userName);    joinUsersCurrentChannel(userName);    playFile(fileName,guild);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {  try {    if (m_needToOutputDocTypeDecl) {      outputDocTypeDecl(m_elemContext.m_elementName,false);      m_needToOutputDocTypeDecl=false;    }    final java.io.Writer writer=m_writer;    if (!m_inDoctype)     writer.write("]>"); else {      writer.write('>');    }    writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  private final void encipher(final int lr[],final int off){  int i, n, l=lr[off], r=lr[off + 1];  l^=P[0];  for (i=0; i <= BLOWFISH_NUM_ROUNDS - 2; ) {    n=S[l >> 24 & 0xff];    n+=S[0x100 | l >> 16 & 0xff];    n^=S[0x200 | l >> 8 & 0xff];    n+=S[0x300 | l & 0xff];    r^=n ^ P[++i];    n=S[r >> 24 & 0xff];    n+=S[0x100 | r >> 16 & 0xff];    n^=S[0x200 | r >> 8 & 0xff];    n+=S[0x300 | r & 0xff];    l^=n ^ P[++i];  }  lr[off]=r ^ P[BLOWFISH_NUM_ROUNDS + 1];  lr[off + 1]=l;}  }
class C{  public static String decode(final String input) throws PunycodeException {  int n=INITIAL_N;  int i=0;  int bias=INITIAL_BIAS;  int d=input.lastIndexOf(DELIMITER);  final StringBuilder output=new StringBuilder(d + 1);  if (d > 0) {    for (int j=0; j < d; j++) {      final char c=input.charAt(j);      if (!isBasic(c)) {        throw new PunycodeException(PunycodeException.BAD_INPUT);      }      output.append(c);    }    d++;  } else {    d=0;  }  while (d < input.length()) {    final int oldi=i;    int w=1;    for (int k=BASE; ; k+=BASE) {      if (d == input.length()) {        throw new PunycodeException(PunycodeException.BAD_INPUT);      }      final int c=input.charAt(d++);      final int digit=codepoint2digit(c);      if (digit > (Integer.MAX_VALUE - i) / w) {        throw new PunycodeException(PunycodeException.OVERFLOW);      }      i=i + digit * w;      int t;      if (k <= bias) {        t=TMIN;      } else       if (k >= bias + TMAX) {        t=TMAX;      } else {        t=k - bias;      }      if (digit < t) {        break;      }      w=w * (BASE - t);    }    bias=adapt(i - oldi,output.length() + 1,oldi == 0);    if (i / (output.length() + 1) > Integer.MAX_VALUE - n) {      throw new PunycodeException(PunycodeException.OVERFLOW);    }    n=n + i / (output.length() + 1);    i=i % (output.length() + 1);    output.insert(i,(char)n);    i++;  }  return output.toString();}  }
class C{  @Override public final boolean incrementToken() throws IOException {  if (input.incrementToken()) {    if (!keywordAttr.isKeyword()) {      char termBuffer[]=termAtt.buffer();      final int length=termAtt.length();      stemmer.setCurrent(termBuffer,length);      stemmer.stem();      final char finalTerm[]=stemmer.getCurrentBuffer();      final int newLength=stemmer.getCurrentBufferLength();      if (finalTerm != termBuffer)       termAtt.copyBuffer(finalTerm,0,newLength); else       termAtt.setLength(newLength);    }    return true;  } else {    return false;  }}  }
class C{  public static void formatValue(final StringBuffer buffer,final String value,final boolean alwaysUseQuotes){  if (buffer == null) {    throw new IllegalArgumentException("String buffer may not be null");  }  if (value == null) {    throw new IllegalArgumentException("Value buffer may not be null");  }  if (alwaysUseQuotes) {    buffer.append('"');    for (int i=0; i < value.length(); i++) {      final char ch=value.charAt(i);      if (isUnsafeChar(ch)) {        buffer.append('\\');      }      buffer.append(ch);    }    buffer.append('"');  } else {    final int offset=buffer.length();    boolean unsafe=false;    for (int i=0; i < value.length(); i++) {      final char ch=value.charAt(i);      if (isSeparator(ch)) {        unsafe=true;      }      if (isUnsafeChar(ch)) {        buffer.append('\\');      }      buffer.append(ch);    }    if (unsafe) {      buffer.insert(offset,'"');      buffer.append('"');    }  }}  }
class C{  public void cancel(){  FUTURES.remove(id);  CHANNELS.remove(id);}  }
class C{  public BattleArmor(){  super();  setArmorType(EquipmentType.T_ARMOR_BA_STANDARD);  squadn=1;  setTechLevel(TechConstants.T_CLAN_TW);  isInitialized=true;}  }
class C{  public static SslError verifyServerCertificates(byte[][] certChain,String domain,String authType) throws IOException {  if (certChain == null || certChain.length == 0) {    throw new IllegalArgumentException("bad certificate chain");  }  X509Certificate[] serverCertificates=new X509Certificate[certChain.length];  for (int i=0; i < certChain.length; ++i) {    serverCertificates[i]=new X509CertImpl(certChain[i]);  }  return verifyServerDomainAndCertificates(serverCertificates,domain,authType);}  }
class C{  public double[] normOne(double[] data){  double[] res=new double[data.length];  double max=max(data);  for (int i=0; i < data.length; i++) {    res[i]=data[i] / max;  }  return res;}  }
class C{  public List statistic(){  List result=new LinkedList();  for (Iterator iter=calls.keySet().iterator(); iter.hasNext(); ) {    Object[] line=new Object[3];    result.add(line);    line[0]=iter.next();    List times=(List)calls.get(line[0]);    line[1]=new Integer(times.size() / 2);    int accTime=0;    for (Iterator it=times.iterator(); it.hasNext(); ) {      Long start=(Long)it.next();      Long end=(Long)it.next();      accTime+=end.longValue() - start.longValue();    }    line[2]=new Long(accTime);  }  return result;}  }
class C{  private void scanIdentifier() throws IOException {  count=0;  while (true) {    putc(ch);switch (ch=in.read()) {case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case '$':case '_':      break;default :    if (!Character.isJavaLetterOrDigit((char)ch)) {      idValue=Identifier.lookup(bufferString());      token=idValue.getType();      return;    }}}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:00.329 -0400",hash_original_method="288A87448E6D764011C1399D11E72FEF",hash_generated_method="8B5F922B931E20C911357E1A9F1554FF") public MenuDialogHelper show(View originalView,IBinder token){  if (originalView != null) {    originalView.createContextMenu(this);  }  if (getVisibleItems().size() > 0) {    EventLog.writeEvent(50001,1);    MenuDialogHelper helper=new MenuDialogHelper(this);    helper.show(token);    return helper;  }  return null;}  }
class C{  @Deprecated public static void registerWebView(Activity activity,ObservableWebView webView,ObservableScrollViewCallbacks observableScrollViewCallbacks){  if (activity != null && hashMap.containsKey(activity)) {    MaterialViewPagerAnimator animator=hashMap.get(activity);    if (animator != null) {      animator.registerWebView(webView,observableScrollViewCallbacks);    }  }}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  private void zipEntry(ZipOutputStream zipOutputStream,ResourceNode resourceNode){  try (ByteArrayInputStream inputStream=new ByteArrayInputStream((byte[])resourceNode.getObject())){    ZipEntry zipEntry=new ZipEntry(createNewZipEntryName(resourceNode.getPath()));    zipOutputStream.putNextEntry(zipEntry);    byte[] b=new byte[DATA_BLOCK_SIZE];    int byteCount;    while ((byteCount=inputStream.read(b,0,DATA_BLOCK_SIZE)) != -1) {      zipOutputStream.write(b,0,byteCount);    }    zipOutputStream.closeEntry();    inputStream.close();  } catch (  Exception e) {    log.error("Error while writing zip entry '" + resourceNode.getNodeName() + "'.",e);  }}  }
class C{  public void attack(Creature c){}  }
class C{  public UploadConfirmationWindow(final UploadLayout artifactUploadView,final ArtifactUploadState artifactUploadState){  this.uploadLayout=artifactUploadView;  this.artifactUploadState=artifactUploadState;  i18n=artifactUploadView.getI18n();  createRequiredComponents();  buildLayout();}  }
class C{  private int processPollFds() throws IOException {  if (pollFds.get(0).revents == POLLIN) {    byte[] buffer=new byte[8];    while (IoBridge.read(wakeupIn,buffer,0,1) > 0) {    }  }  int readyKeyCount=0;  for (int i=1; i < pollFds.size(); ++i) {    StructPollfd pollFd=pollFds.get(i);    if (pollFd.revents == 0) {      continue;    }    if (pollFd.fd == null) {      break;    }    SelectionKeyImpl key=(SelectionKeyImpl)pollFd.userData;    pollFd.fd=null;    pollFd.userData=null;    int ops=key.interestOpsNoCheck();    int selectedOps=0;    if ((pollFd.revents & POLLHUP) != 0) {      selectedOps|=ops;    }    if ((pollFd.revents & POLLIN) != 0) {      selectedOps|=ops & (OP_ACCEPT | OP_READ);    }    if ((pollFd.revents & POLLOUT) != 0) {      if (key.isConnected()) {        selectedOps|=ops & OP_WRITE;      } else {        selectedOps|=ops & OP_CONNECT;      }    }    if (selectedOps != 0) {      boolean wasSelected=mutableSelectedKeys.contains(key);      if (wasSelected && key.readyOps() != selectedOps) {        key.setReadyOps(key.readyOps() | selectedOps);        ++readyKeyCount;      } else       if (!wasSelected) {        key.setReadyOps(selectedOps);        mutableSelectedKeys.add(key);        ++readyKeyCount;      }    }  }  return readyKeyCount;}  }
class C{  public static void skip(){  if (nowPlayingIndex < nowPlayingList.size() - 1) {    boolean isPlaying=isPlaying();    mainController.updatePlayPauseIcon(isPlaying);    setNowPlaying(nowPlayingList.get(nowPlayingIndex + 1));    if (isPlaying) {      play();    }  } else   if (isLoopActive) {    boolean isPlaying=isPlaying();    mainController.updatePlayPauseIcon(isPlaying);    nowPlayingIndex=0;    setNowPlaying(nowPlayingList.get(nowPlayingIndex));    if (isPlaying) {      play();    }  } else {    mainController.updatePlayPauseIcon(false);    nowPlayingIndex=0;    setNowPlaying(nowPlayingList.get(nowPlayingIndex));  }}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  public static String decodePath(String path) throws CharacterCodingException {  return (UriTools.decode(path,false));}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Bundle args=getArguments();  if (args != null && args.containsKey(EXTRA_BOOK))   book=(Book)args.getSerializable(EXTRA_BOOK);}  }
class C{  public void removeAll(){  if (this.widget == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (this.widget.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  this.children.clear();  this.widget.updateContent();}  }
class C{  public void open(){  fifo=new FifoBuffer();}  }
class C{  private static void saveMessageToSent(Context c,String number,String message){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {    try {      ContentValues values=new ContentValues();      values.put("address",number);      values.put("body",message);      c.getContentResolver().insert(Uri.parse("content://sms/sent"),values);    } catch (    Exception e) {    }  }}  }
class C{  private static boolean isUpperCase(char value){  return Character.isUpperCase(value);}  }
class C{  public Phaser(){  this(null,0);}  }
class C{  public boolean hasBatchOperation(){  return hasExtension(BatchOperation.class);}  }
class C{  public NotificationChain basicSetType(PropertyType newType,NotificationChain msgs){  PropertyType oldType=type;  type=newType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,DatatypePackage.PROPERTY__TYPE,oldType,newType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static boolean isSyncInterface(IType type) throws JavaModelException {  IJavaProject javaProject=type.getJavaProject();  if (!GWTNature.isGWTProject(javaProject.getProject())) {    return false;  }  ITypeHierarchy hierarchy=type.newSupertypeHierarchy(null);  IType remoteServiceInterface=javaProject.findType(REMOTE_SERVICE_QUALIFIED_NAME);  return remoteServiceInterface != null && hierarchy.contains(remoteServiceInterface);}  }
class C{  protected void checkElement(String elementName){  int[] tableKeys=X_CM_CStage_Element.getAllIDs("CM_CStage_Element","CM_CStage_ID=" + this.get_ID() + " AND Name like '"+ elementName+ "'",get_TrxName());  if (tableKeys == null || tableKeys.length == 0) {    X_CM_CStage_Element thisElement=new X_CM_CStage_Element(getCtx(),0,get_TrxName());    thisElement.setAD_Client_ID(getAD_Client_ID());    thisElement.setAD_Org_ID(getAD_Org_ID());    thisElement.setCM_CStage_ID(this.get_ID());    thisElement.setContentHTML(" ");    thisElement.setName(elementName);    thisElement.save(get_TrxName());  }}  }
class C{  public void emitRetainedVars(GenerateJsVisitor gen){  if (!retainedVars.isEmpty()) {    gen.out("var ");    boolean first=true;    for (    String varName : retainedVars) {      if (!first) {        gen.out(",");      }      first=false;      gen.out(varName);    }    gen.endLine(true);    retainedVars.clear();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean x=getBool(stack);  MediaNode node=getMediaNode(stack);  if (node != null) {    MediaNode[] kids=node.getChildren();    java.util.Vector rv=new java.util.Vector();    for (int i=0; kids != null && i < kids.length; i++)     if (kids[i].isChecked() == x)     rv.add(kids[i]);    return rv;  }  return null;}  }
class C{  public void onCancel(Interaction iact){}  }
class C{  public ConnectionWrapper(Connection con) throws AdeException {  m_connection=con;}  }
class C{  public static Project findByPreviousPlaceOf(String previousOwnerLoginid,String previousName){  List<Project> projects=find.where().ieq("previousOwnerLoginId",previousOwnerLoginid).ieq("previousName",previousName).setOrderBy("previousNameChangedTime desc").findList();  if (CollectionUtils.isEmpty(projects)) {    return null;  }  return projects.get(0);}  }
class C{  @Nullable public String loadProperty(@NotNull String key) throws IOException {  Path storageFile=getStorageFile().orElseThrow(null);  Properties properties=loadProperties(storageFile);  if (!properties.containsKey(key)) {    throw PropertyNotFoundException.from(key);  }  return properties.getProperty(key);}  }
class C{  public boolean isModified(){  return _modified;}  }
class C{  public void put(final String string,final int tokenType){  if (isIgnoringCase())   put(string.toLowerCase().toCharArray(),tokenType); else   put(string.toCharArray(),tokenType);}  }
class C{  @Override public void stop() throws Exception {  server.stop();  server.join();}  }
class C{  public void test_addILjava_lang_Object(){  Object o=new Object();  Object prev=tVector.get(45);  tVector.add(45,o);  assertTrue("Failed to add Object",tVector.get(45) == o);  assertTrue("Failed to fix-up existing indices",tVector.get(46) == prev);  assertEquals("Wrong size after add",101,tVector.size());  prev=tVector.get(50);  tVector.add(50,null);  assertNull("Failed to add null",tVector.get(50));  assertTrue("Failed to fix-up existing indices after adding null",tVector.get(51) == prev);  assertEquals("Wrong size after add",102,tVector.size());  try {    tVector.add(-5,null);    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }  try {    tVector.add(tVector.size() + 1,null);    fail("ArrayIndexOutOfBoundsException expected");  } catch (  ArrayIndexOutOfBoundsException e) {  }}  }
class C{  private String itemPath(String id){  return String.format("%1$s/%2$s",_workItemPath,id);}  }
class C{  public Object delete(Serializable id){  final Object retrieved=getDataStore().retrieve(id);  getDataStore().delete(id);  return retrieved;}  }
class C{  public static SparseMatrix loadSparseMatrix(File file) throws IOException, IllegalFormatException {  String str;  TextFileReader reader=new TextFileReader(file);  str=reader.readLine();  String[] parts=str.split("\\s+");  if (parts.length != 2)   throw new IllegalFormatException();  int rows=Integer.parseInt(parts[0]);  int cols=Integer.parseInt(parts[1]);  SparseMatrix matrix=new SparseMatrix(rows,cols);  while ((str=reader.readLine()) != null) {    parts=str.split("\\s+");    if (parts.length != 3)     throw new IllegalFormatException();    int row=Integer.parseInt(parts[0]);    int col=Integer.parseInt(parts[1]);    double value=Double.parseDouble(parts[2]);    matrix.add(row,col,value);  }  reader.close();  return matrix;}  }
class C{  public static int geometric(double p){  if (!(p >= 0.0 && p <= 1.0))   throw new IllegalArgumentException("Probability must be between 0.0 and 1.0");  return (int)Math.ceil(Math.log(uniform()) / Math.log(1.0 - p));}  }
class C{  protected GeneratorModelImpl(){  super();}  }
class C{  protected String codenvyDockerFileLocation(){  return GITLAB_PREFIX + this.username + "/"+ this.repository+ "/raw/"+ this.branch()+ "/.codenvy.dockerfile";}  }
class C{  public static void printRScript(String dmlScriptFile){  try {    System.out.println("Running script: " + dmlScriptFile + "\n");    System.out.println("******************* R script *******************");    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(dmlScriptFile)));    String content;    while ((content=in.readLine()) != null) {      System.out.println(content);    }    in.close();    System.out.println("**************************************************\n\n");  } catch (  IOException e) {    e.printStackTrace();    fail("unable to print R script: " + e.getMessage());  }}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  private synchronized void storeMappingToPropertiesFile(String modelFileAbsolutePath) throws IOException {  File mapFile=createMapFileObject(modelFileAbsolutePath);  if (mapFile.exists()) {    return;  }  FileOutputStream fos=null;  try {    fos=new FileOutputStream(mapFile);    FileLock lock=fos.getChannel().lock();    accessionToGAProps.store(fos,"Mapping of model accessions to GA values.");    lock.release();  } catch (  Exception ioe) {    mapFile.delete();  } finally {    if (fos != null) {      fos.close();    }  }}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);  }}  }
class C{  public static void log(String message,Object... args){  if (loggingEnabled) {    Log.d(TAG,args.length == 0 ? message : String.format(message,args));  }}  }
class C{  public void h_Runtime(RuntimePermission perm){  if (perm.getName().contains("exitVM")) {    if (existsInCallStack("jaci.openrio.toast.core.Toast","shutdown.*") == -1) {      SecurityPolicy.log().warn("Unregistered System.exit() call - This should be called with Toast.shutdownSafely()!");      for (int i=5; i <= 7; i++)       SecurityPolicy.log().warn("\tat " + String.valueOf(Thread.currentThread().getStackTrace()[i]));    }  }}  }
class C{  @Override public V put(K key,V value){  V result=putImpl(key,value);  if (removeEldestEntry(head)) {    remove(head.key);  }  return result;}  }
class C{  private void prependStore(BasicBlock bb,IR ir){  if (DEBUG)   VM.sysWrite("Adding store to " + bb + "\n");  Instruction store=null;  if (ir.options.ADAPTIVE_PROCESSOR_SPECIFIC_COUNTER) {    store=Store.create(INT_STORE,cbsReg.copyRO(),ir.regpool.makeTROp(),IRTools.AC(AosEntrypoints.threadCBSField.getOffset()),new LocationOperand(AosEntrypoints.threadCBSField));    bb.prependInstruction(store);  } else {    if (ir.isHIR()) {      store=PutStatic.create(PUTSTATIC,cbsReg.copyRO(),new AddressConstantOperand(AosEntrypoints.globalCBSField.getOffset()),new LocationOperand(AosEntrypoints.globalCBSField));      bb.prependInstruction(store);    } else {      Instruction dummy=Load.create(INT_LOAD,null,null,null,null);      bb.prependInstruction(dummy);      store=Store.create(INT_STORE,cbsReg.copyRO(),ir.regpool.makeJTOCOp(),IRTools.AC(AosEntrypoints.globalCBSField.getOffset()),new LocationOperand(AosEntrypoints.globalCBSField));      dummy.insertBefore(store);      dummy.remove();    }  }}  }
class C{  private float loadCoarseAccuracy(){  String newSetting=Settings.Secure.getString(mContext.getContentResolver(),COARSE_ACCURACY_CONFIG_NAME);  if (D) {    Log.d(TAG,"loadCoarseAccuracy: newSetting = \"" + newSetting + "\"");  }  if (newSetting == null) {    return DEFAULT_ACCURACY_IN_METERS;  }  try {    return Float.parseFloat(newSetting);  } catch (  NumberFormatException e) {    return DEFAULT_ACCURACY_IN_METERS;  }}  }
class C{  public static double[][] identityMatrix(int size){  double[][] I=new double[size][size];  for (int r=0; r < size; r++) {    I[r][r]=1.0;  }  return I;}  }
class C{  public static boolean commit(boolean throwException,String trxName) throws SQLException, IllegalStateException {  if (trxName == null) {    return true;  }  try {    Trx trx=Trx.get(trxName,false);    if (trx != null)     return trx.commit(true);    if (throwException) {      throw new IllegalStateException("Could not load transation with identifier: " + trxName);    } else {      return false;    }  } catch (  SQLException e) {    log.log(Level.SEVERE,"[" + trxName + "]",e);    if (throwException)     throw e;    return false;  }}  }
class C{  public void addWeeks(int weeks){  super.addField(DurationFieldType.weeks(),weeks);}  }
class C{  public boolean isId(){  return false;}  }
class C{  public long sigcatch(){  return Long.parseLong(fields[33]);}  }
class C{  public void testGroupEncodingDecoding(){  doTestGroup(GridClientCacheFlag.values());  doTestGroup();}  }
class C{  public void flushChallengeTokens(){  challengeTokens.clear();}  }
class C{  public void test_setFloatLjava_lang_ObjectF() throws Exception {  TestField x=new TestField();  Field f=null;  float val=0.0F;  try {    f=x.getClass().getDeclaredField("floatField");    f.setFloat(x,Float.MIN_VALUE);    val=f.getFloat(x);  } catch (  Exception e) {    fail("Exception during setFloat test : " + e.getMessage());  }  assertEquals("Returned incorrect float field value",Float.MIN_VALUE,val,0.0);  boolean thrown=false;  try {    f=x.getClass().getDeclaredField("booleanField");    f.setFloat(x,Float.MIN_VALUE);    fail("Accessed field of invalid type");  } catch (  IllegalArgumentException ex) {    thrown=true;  }  assertTrue("IllegalArgumentException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("floatPFField");    assertFalse(f.isAccessible());    f.setFloat(x,Float.MIN_VALUE);    fail("Accessed inaccessible field");  } catch (  IllegalAccessException ex) {    thrown=true;  }  assertTrue("IllegalAccessException expected but not thrown",thrown);  thrown=false;  try {    f=x.getClass().getDeclaredField("floatField");    f.setFloat(null,Float.MIN_VALUE);    fail("NullPointerException expected but not thrown");  } catch (  NullPointerException ex) {    thrown=true;  }catch (  Exception ex) {    fail("NullPointerException expected but not thrown");  }  assertTrue("NullPointerException expected but not thrown",thrown);  f=x.getClass().getDeclaredField("floatSField");  f.setFloat(null,Float.MIN_VALUE);  val=f.getFloat(x);  assertEquals("Returned incorrect float field value",Float.MIN_VALUE,val);}  }
class C{  public static void assertEquals(String message,short expected,short actual){  Assert.assertEquals(message,expected,actual);}  }
class C{  boolean isJsrMerged(){  return jsrMerged;}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  public void tryToDequeueOneToOneChatMessages(ContactId contact){  mImOperationHandler.post(new OneToOneChatMessageDequeueTask(mCtx,mCore,contact,mMessagingLog,mChatService,mRcsSettings,mContactManager,mFileTransferService));}  }
class C{  public void incMessagesQueued(){  this._stats.incInt(_messagesQueuedId,1);}  }
class C{  private PostgreSQLNodeFunctions(){}  }
class C{  public void testGetIndexInfoUsingInfoSchema() throws Exception {  if (versionMeetsMinimum(5,0,7)) {    createTable("t1","(c1 int(1))");    this.stmt.executeUpdate("CREATE INDEX index1 ON t1 (c1)");    Connection conn1=null;    try {      conn1=getConnectionWithProps("useInformationSchema=true");      DatabaseMetaData metaData=conn1.getMetaData();      this.rs=metaData.getIndexInfo(conn1.getCatalog(),null,"t1",false,true);      this.rs.next();      assertEquals("t1",this.rs.getString("TABLE_NAME"));      assertEquals("c1",this.rs.getString("COLUMN_NAME"));      assertEquals("1",this.rs.getString("NON_UNIQUE"));      assertEquals("index1",this.rs.getString("INDEX_NAME"));    }  finally {      if (conn1 != null) {        conn1.close();      }    }  }}  }
class C{  public BoxAndWhiskerXYToolTipGenerator(){  super(DEFAULT_TOOL_TIP_FORMAT,NumberFormat.getInstance(),NumberFormat.getInstance());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void formExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.SOLICITUDES_DEVOLVER_SOLICITUDES_FORM,request);  setReturnActionFordward(request,mappings.findForward("formulario_devolucion"));}  }
class C{  public void addPreloadEvent(int part,int type,ClusterNode discoNode,int discoType,long discoTs){  assert discoNode != null;  assert type > 0;  assert discoType > 0;  assert discoTs > 0;  if (!cctx.events().isRecordable(type))   LT.warn(log,"Added event without checking if event is recordable: " + U.gridEventName(type));  cctx.gridEvents().record(new CacheRebalancingEvent(cctx.name(),cctx.localNode(),"Cache rebalancing event.",type,part,discoNode,discoType,discoTs));}  }
class C{  private static boolean importShouldBeSkippedByExtPoint(@NotNull final PyImportedNameDefiner importNameDefiner){  for (  final PyUnresolvedReferenceSkipperExtPoint skipper : PyUnresolvedReferenceSkipperExtPoint.EP_NAME.getExtensions()) {    if (skipper.unusedImportShouldBeSkipped(importNameDefiner)) {      return true;    }  }  return false;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"REV16");  translateAll(environment,instruction,"REV16",instructions);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.TYPE_REF__NULL_MODIFIER:    return getNullModifier();case TypeRefsPackage.TYPE_REF__UNDEF_MODIFIER:  return getUndefModifier();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static int waiting(int d,Predicate p){  int count=0;  SimEvent event;  Iterator<SimEvent> iterator=deferred.iterator();  while (iterator.hasNext()) {    event=iterator.next();    if ((event.getDestination() == d) && (p.match(event))) {      count++;    }  }  return count;}  }
class C{  private static int resolveGravity(int gravity,int width,int height,int intrinsicWidth,int intrinsicHeight){  if (!Gravity.isHorizontal(gravity)) {    if (width < 0) {      gravity|=Gravity.FILL_HORIZONTAL;    } else {      gravity|=Gravity.START;    }  }  if (!Gravity.isVertical(gravity)) {    if (height < 0) {      gravity|=Gravity.FILL_VERTICAL;    } else {      gravity|=Gravity.TOP;    }  }  if (width < 0 && intrinsicWidth < 0) {    gravity|=Gravity.FILL_HORIZONTAL;  }  if (height < 0 && intrinsicHeight < 0) {    gravity|=Gravity.FILL_VERTICAL;  }  return gravity;}  }
class C{  @Override public int startupNewWorker(){  final int priority=(Math.random() < 0.5) ? 4 : 8;  int actualWorkersStarted=startupNewWorker(priority);  return actualWorkersStarted;}  }
class C{  TimerImpl(String name,boolean isDaemon){  this.setName(name);  this.setDaemon(isDaemon);  this.start();}  }
class C{  @Bean public EventStore jdbcEventStore(){  return new JdbcEventStore(dataSource());}  }
class C{  public TreeRTGCeibaPentandra(){  super();  this.length=13f;  this.branch=3;  this.verStart=0.32f;  this.verRand=0.1f;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof SubCategoryAxis && super.equals(obj)) {    SubCategoryAxis axis=(SubCategoryAxis)obj;    if (!this.subCategories.equals(axis.subCategories)) {      return false;    }    if (!this.subLabelFont.equals(axis.subLabelFont)) {      return false;    }    if (!this.subLabelPaint.equals(axis.subLabelPaint)) {      return false;    }    return true;  }  return false;}  }
class C{  public SerialLight(String systemName){  super(systemName);  initializeLight(systemName);}  }
class C{  public VectorSwitchPreference(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  public void pushBackToken(ScannerToken<? extends Object> x){  fTokenQueue.addFirst(x);  fNumberOfBufferedTokens++;}  }
class C{  private void zoom(){  checkZoomIndex();  stopSoftCentering();  scale=ZOOM_FACTORS[zoomIndex];  GUIPreferences.getInstance().setMapZoomIndex(zoomIndex);  hex_size=new Dimension((int)(HEX_W * scale),(int)(HEX_H * scale));  scaledImageCache=new ImageCache<Integer,Image>();  cursorSprite.prepare();  highlightSprite.prepare();  selectedSprite.prepare();  firstLOSSprite.prepare();  secondLOSSprite.prepare();  for (  Sprite spr : moveEnvSprites) {    spr.prepare();  }  for (  Sprite spr : moveModEnvSprites) {    spr.prepare();  }  for (  Sprite spr : fieldofFireSprites) {    spr.prepare();  }  updateFontSizes();  updateBoard();  for (  StepSprite sprite : pathSprites) {    sprite.refreshZoomLevel();  }  for (  FiringSolutionSprite sprite : firingSprites) {    sprite.prepare();  }  this.setSize(boardSize);  clearHexImageCache();  repaint();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols;  int progress=0;  double z, zN1, zN2, noData, outputNoData;  int[] dX=new int[]{0,0,-1,1};  int[] dY=new int[]{-1,1,0,0};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean performLineThinning=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          zN1=DEM.getValue(row + dY[0],col + dX[0]);          zN2=DEM.getValue(row + dY[1],col + dX[1]);          if ((zN1 != noData) && (zN2 != noData) && (zN1 < z)&& (zN2 < z)) {            output.setValue(row,col,1);          } else {            zN1=DEM.getValue(row + dY[2],col + dX[2]);            zN2=DEM.getValue(row + dY[3],col + dX[3]);            if ((zN1 != noData) && (zN2 != noData) && (zN1 < z)&& (zN2 < z)) {              output.setValue(row,col,1);            }          }        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int i, a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  int[] oldKeys=_set;  double[] oldVals=_values;  byte[] oldStates=_states;  _set=new int[newCapacity];  _values=new double[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      int o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  private PropertyInfoExt combineProps(final PropertyInfoExt targetPropInfo,final PropertyInfoExt nodeScopePropInfo){  PropertyInfoExt combinedProps=new PropertyInfoExt();  for (  Entry<String,String> entry : targetPropInfo.getAllProperties().entrySet()) {    combinedProps.addProperty(entry.getKey(),entry.getValue());  }  for (  Entry<String,String> entry : nodeScopePropInfo.getAllProperties().entrySet()) {    combinedProps.addProperty(entry.getKey(),entry.getValue());  }  return combinedProps;}  }
class C{  protected void updateSplashScreen(){  GUIMediator.setSplashScreenString(I18n.tr("Loading Download Window..."));}  }
class C{  public void increaseCount(int recursionLevel,int incr){  if (recursionLevel == m_counts.size()) {    m_counts.add(incr);  } else   if (recursionLevel == m_counts.size() - 1) {    int n=m_counts.get(recursionLevel).intValue();    m_counts.set(recursionLevel,(n + incr));  }}  }
class C{  private void lock0(boolean canInterrupt) throws InterruptedException {  int i=0;  try {    for (; i < locks.length; i++) {      if (canInterrupt)       locks[i].writeLock().lockInterruptibly(); else       locks[i].writeLock().lock();    }  } catch (  InterruptedException e) {    unlock0(i - 1);    throw e;  }}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.619 -0500",hash_original_method="E1F5217DF3769CB3D03EC18F545E133B",hash_generated_method="18747120E5EC77DBCD3996A0DFF45257") public static void gluLookAt(GL10 gl,float eyeX,float eyeY,float eyeZ,float centerX,float centerY,float centerZ,float upX,float upY,float upZ){  float[] scratch=sScratch;synchronized (scratch) {    Matrix.setLookAtM(scratch,0,eyeX,eyeY,eyeZ,centerX,centerY,centerZ,upX,upY,upZ);    gl.glMultMatrixf(scratch,0);  }}  }
class C{  public AffineTransform handleImage(Image image,Element imageElement,int x,int y,int width,int height,SVGGeneratorContext generatorContext){  int imageWidth=image.getWidth(null);  int imageHeight=image.getHeight(null);  if (imageWidth == 0 || imageHeight == 0 || width == 0 || height == 0) {    handleEmptyImage(imageElement);  } else {    imageHandler.handleImage(image,imageElement,generatorContext);    setImageAttributes(imageElement,x,y,width,height,generatorContext);  }  return null;}  }
class C{  public EigenValueDecompositionSymm(double[][] A){  n=3;  V=new double[n][n];  d=new double[n];  e=new double[n];  issymmetric=true;  for (int j=0; (j < n) & issymmetric; j++) {    for (int i=0; (i < n) & issymmetric; i++) {      issymmetric=(A[i][j] == A[j][i]);    }  }  if (issymmetric) {    for (int i=0; i < n; i++) {      for (int j=0; j < n; j++) {        V[i][j]=A[i][j];      }    }    tred2();    tql2();  } else {    H=new double[n][n];    ort=new double[n];    for (int j=0; j < n; j++) {      for (int i=0; i < n; i++) {        H[i][j]=A[i][j];      }    }    orthes();    hqr2();  }}  }
class C{  private void moveUpTrace(){  int index=getSelectedRow();  if (index > -1) {    assert 0 <= index && index < gcTraceSet.size();    GCTrace gcTrace=gcTraceSet.findGCTrace(index);    gcTraceSet.moveUp(gcTrace.getName());  }}  }
class C{  public RepeatedFieldBuilder<MType,BType,IType> addMessage(MType message){  if (message == null) {    throw new NullPointerException();  }  ensureMutableMessageList();  messages.add(message);  if (builders != null) {    builders.add(null);  }  onChanged();  incrementModCounts();  return this;}  }
class C{  public final boolean hasSetting(DOMDocumentBuilderFactory factory){  return strategy.hasSetting(factory) == value;}  }
class C{  public boolean hasKilledSolo(final String name){  return killRec.hasKilledSolo(name);}  }
class C{  public static void filledEllipse(double x,double y,double semiMajorAxis,double semiMinorAxis){  if (semiMajorAxis < 0)   throw new IllegalArgumentException("ellipse semimajor axis must be nonnegative");  if (semiMinorAxis < 0)   throw new IllegalArgumentException("ellipse semiminor axis must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * semiMajorAxis);  double hs=factorY(2 * semiMinorAxis);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  private ProfileSyncState(){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.407 -0500",hash_original_method="972857949DC34A723A630B605759B3EF",hash_generated_method="6043D574A03A320A084B8AA74F10E249") private int amountToScrollToNewFocus(int direction,View newFocus,int positionOfNewFocus){  int amountToScroll=0;  newFocus.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(newFocus,mTempRect);  if (direction == View.FOCUS_UP) {    if (mTempRect.top < mListPadding.top) {      amountToScroll=mListPadding.top - mTempRect.top;      if (positionOfNewFocus > 0) {        amountToScroll+=getArrowScrollPreviewLength();      }    }  } else {    final int listBottom=getHeight() - mListPadding.bottom;    if (mTempRect.bottom > listBottom) {      amountToScroll=mTempRect.bottom - listBottom;      if (positionOfNewFocus < mItemCount - 1) {        amountToScroll+=getArrowScrollPreviewLength();      }    }  }  return amountToScroll;}  }
class C{  private static void validateIntegerField(CatalogServiceRestRep catalogService,ServiceFieldRestRep field,String fieldName,String value){  if (StringUtils.isNotBlank(value)) {    validateInteger(fieldName,value);    validateRange(fieldName,value,field.getMin(),field.getMax());  }}  }
class C{  public void createSymlink(String src,String target) throws IOException {  int req_id=generateNextRequestID();  TypesWriter tw=new TypesWriter();  tw.writeString(target,charsetName);  tw.writeString(src,charsetName);  if (debug != null) {    debug.println("Sending SSH_FXP_SYMLINK...");    debug.flush();  }  sendMessage(Packet.SSH_FXP_SYMLINK,req_id,tw.getBytes());  expectStatusOKMessage(req_id);}  }
class C{  public synchronized void add(double x,double y){  add(x,y,0d);}  }
class C{  public static final void registerClass(int ad_table_id,Class<? extends ICreateFrom> cl){  s_registeredClasses.put(ad_table_id,cl);  s_log.info("Registered AD_Table_ID=" + ad_table_id + ", Class="+ cl);}  }
class C{  @Override protected IMember resolveMember() throws JavaModelException {  char[] signature=fProposal.getDeclarationSignature();  String typeName=SignatureUtil.stripSignatureToFQN(String.valueOf(signature));  return fJavaProject.findType(typeName);}  }
class C{  public static void main(String[] args){  runFilter(new NumericCleaner(),args);}  }
class C{  public Uniform(){  super();}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitClassMemberValue(this);}  }
class C{  public static boolean isDeclaredOfName(TypeMirror type,CharSequence qualifiedName){  return type.getKind() == TypeKind.DECLARED && getQualifiedName((DeclaredType)type).contentEquals(qualifiedName);}  }
class C{  private void deduceGradleHomeIfPossible(){  if (myGradleHomePathField == null)   return;  File gradleHome=myInstallationManager.getAutodetectedGradleHome();  if (gradleHome == null) {    new DelayedBalloonInfo(MessageType.WARNING,LocationSettingType.UNKNOWN,BALLOON_DELAY_MILLIS).run();    return;  }  myGradleHomeSettingType=LocationSettingType.DEDUCED;  new DelayedBalloonInfo(MessageType.INFO,LocationSettingType.DEDUCED,BALLOON_DELAY_MILLIS).run();  myGradleHomePathField.setText(gradleHome.getPath());  myGradleHomePathField.getTextField().setForeground(LocationSettingType.DEDUCED.getColor());}  }
class C{  public void addTargetListener(String pn,AnimationTargetListener l){  if (targetListeners == null) {    targetListeners=new HashMap();  }  LinkedList ll=(LinkedList)targetListeners.get(pn);  if (ll == null) {    ll=new LinkedList();    targetListeners.put(pn,ll);  }  ll.add(l);}  }
class C{  private static void createContextFiles(Resource configDir,ServletConfig servletConfig,boolean doNew) throws IOException {  Resource contextDir=configDir.getRealResource("context");  if (!contextDir.exists())   contextDir.mkdirs();{    Resource dir=configDir.getRealResource("locales");    if (!dir.exists())     dir.mkdirs();    Resource file=dir.getRealResource("pt-PT-date.df");    if (!file.exists())     createFileFromResourceEL("/resource/locales/pt-PT-date.df",file);  }  Resource videoDir=configDir.getRealResource("video");  if (!videoDir.exists())   videoDir.mkdirs();  Resource video=videoDir.getRealResource("video.xml");  if (!video.exists())   createFileFromResourceEL("/resource/video/video.xml",video);  Resource binDir=configDir.getRealResource("bin");  if (!binDir.exists())   binDir.mkdirs();  Resource ctDir=configDir.getRealResource("customtags");  if (!ctDir.exists())   ctDir.mkdirs();  if (SystemUtil.isWindows()) {    String name=(SystemUtil.getJREArch() == SystemUtil.ARCH_64) ? "jacob-x64.dll" : "jacob-i586.dll";    Resource jacob=binDir.getRealResource(name);    if (!jacob.exists()) {      createFileFromResourceEL("/resource/bin/windows" + ((SystemUtil.getJREArch() == SystemUtil.ARCH_64) ? "64" : "32") + "/"+ name,jacob);    }  }  Resource storDir=configDir.getRealResource("storage");  if (!storDir.exists())   storDir.mkdirs();  Resource compDir=configDir.getRealResource("components");  if (!compDir.exists())   compDir.mkdirs();  Resource secDir=configDir.getRealResource("security");  Resource f=null;  if (secDir.exists()) {    f=secDir.getRealResource("cacerts");    if (f.exists())     f.delete();    if (ResourceUtil.isEmpty(secDir))     secDir.delete();  }  f=contextDir.getRealResource("lucee-context.lar");  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/context/lucee-context.lar",f); else   createFileFromResourceCheckSizeDiffEL("/resource/context/lucee-context.lar",f);  f=contextDir.getRealResource("lucee-admin.lar");  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/context/lucee-admin.lar",f); else   createFileFromResourceCheckSizeDiffEL("/resource/context/lucee-admin.lar",f);  f=contextDir.getRealResource("lucee-doc.lar");  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/context/lucee-doc.lar",f); else   createFileFromResourceCheckSizeDiffEL("/resource/context/lucee-doc.lar",f);  f=contextDir.getRealResource("component-dump." + TEMPLATE_EXTENSION);  if (!f.exists())   createFileFromResourceEL("/resource/context/component-dump." + TEMPLATE_EXTENSION,f);  String badContent="<cfcomponent displayname=\"Component\" hint=\"This is the Base Component\">\n</cfcomponent>";  String badVersion="704b5bd8597be0743b0c99a644b65896";  f=contextDir.getRealResource("Component." + COMPONENT_EXTENSION);  if (!f.exists())   createFileFromResourceEL("/resource/context/Component." + COMPONENT_EXTENSION,f); else   if (doNew && badVersion.equals(ConfigWebUtil.createMD5FromResource(f))) {    createFileFromResourceEL("/resource/context/Component." + COMPONENT_EXTENSION,f);  } else   if (doNew && badContent.equals(createContentFromResource(f).trim())) {    createFileFromResourceEL("/resource/context/Component." + COMPONENT_EXTENSION,f);  }  f=contextDir.getRealResource("Component." + COMPONENT_EXTENSION_LUCEE);  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/context/Component." + COMPONENT_EXTENSION_LUCEE,f);  f=contextDir.getRealResource(Constants.CFML_APPLICATION_EVENT_HANDLER);  if (!f.exists())   createFileFromResourceEL("/resource/context/Application." + COMPONENT_EXTENSION,f);  f=contextDir.getRealResource("form." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/context/form." + TEMPLATE_EXTENSION,f);  f=contextDir.getRealResource("graph." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/context/graph." + TEMPLATE_EXTENSION,f);  f=contextDir.getRealResource("wddx." + TEMPLATE_EXTENSION);  if (!f.exists())   createFileFromResourceEL("/resource/context/wddx." + TEMPLATE_EXTENSION,f);  f=contextDir.getRealResource("lucee-applet." + TEMPLATE_EXTENSION);  if (!f.exists())   createFileFromResourceEL("/resource/context/lucee-applet." + TEMPLATE_EXTENSION,f);  f=contextDir.getRealResource("lucee-applet.jar");  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/context/lucee-applet.jar",f);  f=contextDir.getRealResource("admin." + TEMPLATE_EXTENSION);  if (!f.exists())   createFileFromResourceEL("/resource/context/admin." + TEMPLATE_EXTENSION,f);  f=contextDir.getRealResource("swfobject.js");  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/video/swfobject.js",f);  f=contextDir.getRealResource("swfobject.js." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/video/swfobject.js." + TEMPLATE_EXTENSION,f);  f=contextDir.getRealResource("mediaplayer.swf");  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/video/mediaplayer.swf",f);  f=contextDir.getRealResource("mediaplayer.swf." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/video/mediaplayer.swf." + TEMPLATE_EXTENSION,f);  Resource adminDir=contextDir.getRealResource("admin");  if (!adminDir.exists())   adminDir.mkdirs();  Resource pluginDir=adminDir.getRealResource("plugin");  if (!pluginDir.exists())   pluginDir.mkdirs();  f=pluginDir.getRealResource("Plugin." + COMPONENT_EXTENSION);  if (!f.exists())   createFileFromResourceEL("/resource/context/admin/plugin/Plugin." + COMPONENT_EXTENSION,f);  Resource note=pluginDir.getRealResource("Note");  if (!note.exists())   note.mkdirs();  f=note.getRealResource("language.xml");  if (!f.exists())   createFileFromResourceEL("/resource/context/admin/plugin/Note/language.xml",f);  f=note.getRealResource("overview." + TEMPLATE_EXTENSION);  if (!f.exists())   createFileFromResourceEL("/resource/context/admin/plugin/Note/overview." + TEMPLATE_EXTENSION,f);  f=note.getRealResource("Action." + COMPONENT_EXTENSION);  if (!f.exists())   createFileFromResourceEL("/resource/context/admin/plugin/Note/Action." + COMPONENT_EXTENSION,f);  Resource componentsDir=configDir.getRealResource("components");  if (!componentsDir.exists())   componentsDir.mkdirs();  Resource gwDir=componentsDir.getRealResource("lucee/extension/gateway/");  create("/resource/context/gateway/",new String[]{"TaskGateway." + COMPONENT_EXTENSION,"DummyGateway." + COMPONENT_EXTENSION,"DirectoryWatcher." + COMPONENT_EXTENSION,"DirectoryWatcherListener." + COMPONENT_EXTENSION,"MailWatcher." + COMPONENT_EXTENSION,"MailWatcherListener." + COMPONENT_EXTENSION},gwDir,doNew);  Resource langDir=adminDir.getRealResource("resources/language");  create("/resource/context/admin/resources/language/",new String[]{"en.xml","de.xml"},langDir,doNew);  Resource debug=adminDir.getRealResource("debug");  create("/resource/context/admin/debug/",new String[]{"Debug." + COMPONENT_EXTENSION,"Field." + COMPONENT_EXTENSION,"Group." + COMPONENT_EXTENSION},debug,doNew);  Resource cDir=adminDir.getRealResource("cdriver");  create("/resource/context/admin/cdriver/",new String[]{"Cache." + COMPONENT_EXTENSION,"Field." + COMPONENT_EXTENSION,"Group." + COMPONENT_EXTENSION},cDir,doNew);  Resource dbDir=adminDir.getRealResource("dbdriver");  Resource typesDir=dbDir.getRealResource("types");  create("/resource/context/admin/dbdriver/types/",new String[]{"IDriver." + COMPONENT_EXTENSION,"Driver." + COMPONENT_EXTENSION,"IDatasource." + COMPONENT_EXTENSION,"IDriverSelector." + COMPONENT_EXTENSION,"Field." + COMPONENT_EXTENSION},typesDir,doNew);  Resource gDir=adminDir.getRealResource("gdriver");  create("/resource/context/admin/gdriver/",new String[]{"Gateway." + COMPONENT_EXTENSION,"Field." + COMPONENT_EXTENSION,"Group." + COMPONENT_EXTENSION},gDir,doNew);  Resource app=adminDir.getRealResource("logging/appender");  create("/resource/context/admin/logging/appender/",new String[]{"Appender." + COMPONENT_EXTENSION,"Field." + COMPONENT_EXTENSION,"Group." + COMPONENT_EXTENSION},app,doNew);  Resource lay=adminDir.getRealResource("logging/layout");  create("/resource/context/admin/logging/layout/",new String[]{"Layout." + COMPONENT_EXTENSION,"Field." + COMPONENT_EXTENSION,"Group." + COMPONENT_EXTENSION},lay,doNew);  Resource templatesDir=contextDir.getRealResource("templates");  if (!templatesDir.exists())   templatesDir.mkdirs();  Resource errorDir=templatesDir.getRealResource("error");  if (!errorDir.exists())   errorDir.mkdirs();  f=errorDir.getRealResource("error." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/context/templates/error/error." + TEMPLATE_EXTENSION,f);  f=errorDir.getRealResource("error-neo." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/context/templates/error/error-neo." + TEMPLATE_EXTENSION,f);  f=errorDir.getRealResource("error-public." + TEMPLATE_EXTENSION);  if (!f.exists() || doNew)   createFileFromResourceEL("/resource/context/templates/error/error-public." + TEMPLATE_EXTENSION,f);  Resource displayDir=templatesDir.getRealResource("display");  if (!displayDir.exists())   displayDir.mkdirs();}  }
class C{  private static void removeAllDrivers(){  java.util.Enumeration e=DriverManager.getDrivers();  while (e.hasMoreElements()) {    try {      DriverManager.deregisterDriver((Driver)(e.nextElement()));    } catch (    SQLException ex) {      System.out.print(ex.getMessage());    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.LESS_OP___LESS_OP_1:    return getLessOp_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void appendTextContent(Appendable appendable){  try {    appendable.append(getTextContent());  } catch (  IOException ioex) {    throw new LagartoDOMException(ioex);  }}  }
class C{  protected static EncodedStringValue parseEncodedStringValue(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  pduDataStream.mark(1);  EncodedStringValue returnValue=null;  int charset=0;  int temp=pduDataStream.read();  assert (-1 != temp);  int first=temp & 0xFF;  if (first == 0) {    return new EncodedStringValue("");  }  pduDataStream.reset();  if (first < TEXT_MIN) {    parseValueLength(pduDataStream);    charset=parseShortInteger(pduDataStream);  }  byte[] textString=parseWapString(pduDataStream,TYPE_TEXT_STRING);  try {    if (0 != charset) {      returnValue=new EncodedStringValue(charset,textString);    } else {      returnValue=new EncodedStringValue(textString);    }  } catch (  Exception e) {    return null;  }  return returnValue;}  }
class C{  public void animateLayoutFadeAndWait(final int duration,int startingOpacity){  animateLayout(duration,true,startingOpacity,true);}  }
class C{  static long toUData(short[] bytes){  if (bytes == null) {    return 0;  }  long res=XlibWrapper.unsafe.allocateMemory(bytes.length);  for (int i=0; i < bytes.length; i++) {    putUByte(res + i,bytes[i]);  }  return res;}  }
class C{  public boolean isBalanceSheet(){  String accountType=getAccountType();  return (ACCOUNTTYPE_Asset.equals(accountType) || ACCOUNTTYPE_Liability.equals(accountType) || ACCOUNTTYPE_OwnerSEquity.equals(accountType));}  }
class C{  private Timestamp scheduleBackward(final Timestamp end,final long nodeDurationMillis,MResource r){  MResourceType t=r.getResourceType();  log.info("--> ResourceType " + t);  Timestamp start=null;  Timestamp currentDate=end;  long remainingMillis=nodeDurationMillis;  int iteration=0;  do {    log.info("--> end=" + currentDate);    log.info("--> nodeDuration=" + remainingMillis);    currentDate=reasoner.getAvailableDate(r,currentDate,true);    log.info("--> end(available)=" + currentDate);    Timestamp dayEnd=t.getDayEnd(currentDate);    Timestamp dayStart=t.getDayStart(currentDate);    log.info("--> dayStart=" + dayStart + ", dayEnd="+ dayEnd);    if (currentDate.before(dayEnd) && currentDate.after(dayStart)) {      dayEnd=currentDate;    }    long availableDayDuration=getAvailableDurationMillis(dayStart,dayEnd,r);    if (availableDayDuration >= remainingMillis) {      log.info("--> availableDayDuration >= nodeDuration true " + availableDayDuration + "|"+ remainingMillis);      start=new Timestamp(dayEnd.getTime() - remainingMillis);      remainingMillis=0;      break;    } else {      log.info("--> availableDayDuration >= nodeDuration false " + availableDayDuration + "|"+ remainingMillis);      log.info("--> nodeDuration-availableDayDuration " + (remainingMillis - availableDayDuration));      currentDate=TimeUtil.addDays(TimeUtil.getDayBorder(currentDate,null,true),-1);      remainingMillis-=availableDayDuration;    }    iteration++;    if (iteration > p_MaxIterationsNo) {      throw new CRPException("Maximum number of iterations exceeded (" + p_MaxIterationsNo + ")"+ " - Date:"+ start+ ", RemainingMillis:"+ remainingMillis);    }  } while (remainingMillis > 0);  log.info("         -->  start=" + start + " <---------------------------------------- ");  return start;}  }
class C{  public static void main(String[] args){  CalendarService myService=new CalendarService("exampleCo-exampleApp-1");  if (args.length != 2) {    usage();    return;  }  String userName=args[0];  String userPassword=args[1];  try {    metafeedUrl=new URL(METAFEED_URL_BASE + userName);    eventFeedUrl=new URL(METAFEED_URL_BASE + userName + EVENT_FEED_URL_SUFFIX);  } catch (  MalformedURLException e) {    System.err.println("Uh oh - you've got an invalid URL.");    e.printStackTrace();    return;  }  try {    myService.setUserCredentials(userName,userPassword);    printUserCalendars(myService);    System.out.println("Printing all events");    printAllEvents(myService);    System.out.println("Full text query");    fullTextQuery(myService,"Tennis");    dateRangeQuery(myService,DateTime.parseDate("2007-01-05"),DateTime.parseDate("2007-01-07"));    CalendarEventEntry singleEvent=createSingleEvent(myService,"Tennis with Mike","Meet for a quick lesson.");    System.out.println("Successfully created event " + singleEvent.getTitle().getPlainText());    CalendarEventEntry quickAddEvent=createQuickAddEvent(myService,"Tennis with John April 11 3pm-3:30pm");    System.out.println("Successfully created quick add event " + quickAddEvent.getTitle().getPlainText());    CalendarEventEntry webContentEvent=createWebContentEvent(myService,"World Cup","image/gif","http://www.google.com/logos/worldcup06.gif","http://www.google.com/calendar/images/google-holiday.gif","276","120");    System.out.println("Successfully created web content event " + webContentEvent.getTitle().getPlainText());    CalendarEventEntry recurringEvent=createRecurringEvent(myService,"Tennis with Dan","Weekly tennis lesson.");    System.out.println("Successfully created recurring event " + recurringEvent.getTitle().getPlainText());    singleEvent=updateTitle(singleEvent,"Important meeting");    System.out.println("Event's new title is \"" + singleEvent.getTitle().getPlainText() + "\".");    singleEvent=addReminder(singleEvent,15,Method.EMAIL);    System.out.println("Set a " + singleEvent.getReminder().get(0).getMinutes() + " minute "+ singleEvent.getReminder().get(0).getMethod()+ " reminder for the event.");    singleEvent=addExtendedProperty(singleEvent);    List<CalendarEventEntry> eventsToDelete=new ArrayList<CalendarEventEntry>();    eventsToDelete.add(singleEvent);    eventsToDelete.add(quickAddEvent);    eventsToDelete.add(webContentEvent);    eventsToDelete.add(recurringEvent);    deleteEvents(myService,eventsToDelete);  } catch (  IOException e) {    System.err.println("There was a problem communicating with the service.");    e.printStackTrace();  }catch (  ServiceException e) {    System.err.println("The server had a problem handling your request.");    e.printStackTrace();  }}  }
class C{  public Process configurationProcess(){  return configurationProcess;}  }
class C{  public PortUnreachableException(){}  }
class C{  public void draw(float[] mvpMatrix){  GLES20.glUseProgram(mProgram);  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);  GLES20.glEnable(GLES20.GL_CULL_FACE);switch (mType) {case ViewerRenderer.RIGHT:case ViewerRenderer.FRONT:case ViewerRenderer.TOP:    GLES20.glCullFace(GLES20.GL_FRONT);  break;case ViewerRenderer.BACK:case ViewerRenderer.LEFT:GLES20.glCullFace(GLES20.GL_BACK);break;}mPositionHandle=GLES20.glGetAttribLocation(mProgram,"vPosition");GLES20.glEnableVertexAttribArray(mPositionHandle);GLES20.glVertexAttribPointer(mPositionHandle,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,vertexStride,mVertexBuffer);mColorHandle=GLES20.glGetUniformLocation(mProgram,"vColor");GLES20.glUniform4fv(mColorHandle,1,color,0);mMVPMatrixHandle=GLES20.glGetUniformLocation(mProgram,"uMVPMatrix");ViewerRenderer.checkGlError("glGetUniformLocation");GLES20.glUniformMatrix4fv(mMVPMatrixHandle,1,false,mvpMatrix,0);ViewerRenderer.checkGlError("glUniformMatrix4fv");GLES20.glDrawElements(GLES20.GL_TRIANGLES,drawOrder.length,GLES20.GL_UNSIGNED_SHORT,mDrawListBuffer);GLES20.glDisable(GLES20.GL_DEPTH_TEST);float color2[]={1.0f,1.0f,1.0f,0.01f};GLES20.glUniform4fv(mColorHandle,1,color2,0);GLES20.glLineWidth(3f);GLES20.glDrawArrays(GLES20.GL_LINE_LOOP,0,vertexCount);GLES20.glDisable(GLES20.GL_CULL_FACE);GLES20.glEnable(GLES20.GL_DEPTH_TEST);GLES20.glDisableVertexAttribArray(mPositionHandle);}  }
class C{  public JavaCLSettingsPanel(){  initComponents();  Border border=UIManager.getBorder("TitledBorder.aquaVariant");  if (border == null)   border=new EtchedBorder();  settingsPanel.setBorder(new TitledBorder(border,"OpenCL & OpenGL Settings"));  platformCombo.setModel(new DefaultComboBoxModel(getPlatforms().toArray()));  platformChanged(null);  normalButtActionPerformed(null);}  }
class C{  @SuppressWarnings("unchecked") GuiComponent<?> deserializeDesktopComponent(final String className,final WorkspaceComponent component,final InputStream input,final String name){  try {    Class<WorkspaceComponent> clazz=(Class<WorkspaceComponent>)Class.forName(className);    Method method=clazz.getMethod("open",WorkspaceComponent.class,InputStream.class,String.class);    return (GuiComponent<?>)method.invoke(null,component,input,name);  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public ImprovedBacktrackingStrategy(boolean enableMRV,boolean enableDeg,boolean enableAC3,boolean enableLCV){  if (enableMRV)   setVariableSelection(enableDeg ? Selection.MRV_DEG : Selection.MRV);  if (enableAC3)   setInference(Inference.AC3);  enableLCV(enableLCV);}  }
class C{  protected boolean hasAngular2Nature(){  return file != null;}  }
class C{  public void test_getName_Format(){  String name="CN=Duke,OU=JavaSoft,O=Sun Microsystems,C=US";  String expectedName="cn=duke,ou=javasoft,o=sun microsystems,c=us";  X500Principal xpr=new X500Principal(name);  try {    String resName=xpr.getName(X500Principal.CANONICAL);    assertEquals(expectedName,resName);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  expectedName="CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US";  try {    String resName=xpr.getName(X500Principal.RFC1779);    assertEquals(expectedName,resName);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    String resName=xpr.getName(X500Principal.RFC2253);    assertEquals(name,resName);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    String resName=xpr.getName(null);    fail("IllegalArgumentException  wasn't thrown");  } catch (  IllegalArgumentException iae) {  }  try {    String resName=xpr.getName("RFC2254");    fail("IllegalArgumentException  wasn't thrown");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public GemFireConnectionPoolManager(ConnectionPoolDataSource connPool,ConfiguredDataSourceProperties configs,javax.sql.ConnectionEventListener listener) throws PoolException {  connPoolCache=new ConnectionPoolCacheImpl(connPool,listener,configs);}  }
class C{  public void typeInfo(int pos,byte tag){}  }
class C{  public ScoreDoc(int doc,float score){  this(doc,score,-1);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @Override public void start(final String stepName){  if (stepName != null) {    String bridgeStep=getPlayerBridge().getStepName();    int i=0;    boolean shownErrorMessage=false;    while (!stepName.equals(bridgeStep)) {      ThreadUtil.sleep(100);      i++;      if (i > 30 && !shownErrorMessage) {        System.out.println("Start step: " + stepName + " does not match player bridge step: "+ bridgeStep+ ". Player Bridge GameOver="+ getPlayerBridge().isGameOver()+ ", PlayerID: "+ getPlayerID().getName()+ ", Game: "+ getGameData().getGameName()+ ". Something wrong or very laggy. Will keep trying for 30 more seconds. ");        shownErrorMessage=true;      }      if (i > 310) {        System.err.println("Start step: " + stepName + " still does not match player bridge step: "+ bridgeStep+ " even after waiting more than 30 seconds. This will probably result in a ClassCastException very soon. Player Bridge GameOver="+ getPlayerBridge().isGameOver()+ ", PlayerID: "+ getPlayerID().getName()+ ", Game: "+ getGameData().getGameName());        break;      }      bridgeStep=getPlayerBridge().getStepName();    }  }}  }
class C{  public CharEscaperBuilder(){  this.map=new HashMap<Character,String>();}  }
class C{  public void clear(){  mPreferences.edit().clear().apply();}  }
class C{  public void test_doOutput() throws Throwable {  setUpStoreProperties();  SSLServerSocket ss=(SSLServerSocket)getContext().getServerSocketFactory().createServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://localhost:" + ss.getLocalPort());  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection();  connection.setSSLSocketFactory(getContext().getSocketFactory());  connection.setDoOutput(true);  SSLSocket peerSocket=(SSLSocket)doInteraction(connection,ss);  checkConnectionStateParameters(connection,peerSocket);  connection.connect();}  }
class C{  public static boolean unsquash(File systemFolder){  File appSquash=new File(systemFolder.getAbsolutePath() + File.separator + "odex.app.sqsh");  File privAppSquash=new File(systemFolder.getAbsolutePath() + File.separator + "odex.priv-app.sqsh");  File framSquash=new File(systemFolder.getAbsolutePath() + File.separator + "odex.framework.sqsh");  File productSquash=new File(systemFolder.getAbsolutePath() + "/etc/product/orig.applications.sqsh");  File[] squashFiles={appSquash,privAppSquash,framSquash,productSquash};  File app=new File(systemFolder.getAbsolutePath() + "/app");  File privApp=new File(systemFolder.getAbsolutePath() + "/priv-app");  File framework=new File(systemFolder.getAbsolutePath() + "/framework");  File product=new File(systemFolder.getAbsolutePath() + "/etc/product/applications");  File[] systemFolders={app,privApp,framework,product};  File destFile=S.getUnsquash();  FilesUtils.deleteRecursively(destFile);  for (int i=0; i < squashFiles.length; i++) {    FilesUtils.deleteRecursively(destFile);    File squash=squashFiles[i];    if (squash.exists()) {      String[] cmd=getUnsquashCommand(squash,destFile);      int exitValue=CmdUtils.runCommand(cmd);      if (exitValue != 0) {        Logger.appendLog("[E] failed while extracting " + squash);        return false;      }      if (destFile.listFiles() == null || destFile.listFiles().length <= 0) {        Logger.appendLog("[E] failed while extracting " + squash + " the extracted folder is empty");        return false;      }      ArrayList<File> odexDest=FilesUtils.searchrecursively(systemFolders[i],".odex");      odexDest.addAll(FilesUtils.searchrecursively(systemFolders[i],".apk"));      ArrayList<File> odexInExtractedSquash=FilesUtils.searchrecursively(destFile,".odex");      odexInExtractedSquash.addAll(FilesUtils.searchrecursively(destFile,".apk"));      boolean sucess=true;      for (      File f : odexInExtractedSquash) {        for (        File ff : odexDest) {          if (ff.getName().equals(f.getName())) {            ff.delete();            try {              Files.deleteIfExists(ff.toPath());            } catch (            IOException e) {              e.printStackTrace();            }            sucess=sucess && FilesUtils.copyFile(f,ff);          }        }      }      if (!sucess) {        return false;      }    }  }  return true;}  }
class C{  public ToolBarHasNorthToolBarState(){  super("HasNorthToolBar");}  }
class C{  public static Monitor start(MonKey key){  return factory.start(key);}  }
class C{  protected final void assertAttached(){  if (poolEntry == null) {    throw new IllegalStateException("Adapter is detached.");  }}  }
class C{  private PointDetails providePoint(LayoutBlock source,List<LayoutBlock> protecting,LayoutEditor panel){  PointDetails sourcePoint=getPointDetails(source,protecting,panel);  if (sourcePoint == null) {    sourcePoint=new PointDetails(source,protecting);    sourcePoint.setPanel(panel);  }  return sourcePoint;}  }
class C{  public void fireProcessSizeChanged(){  fireModelChanged(ModelEvent.PROCESS_SIZE_CHANGED);}  }
class C{  public Builder userStreamAcl(StreamAcl userStreamAcl){  this.userStreamAcl=userStreamAcl;  return this;}  }
class C{  public void prepareVdc(){  client.post(String.class,PREPARE_VDC_URL);}  }
class C{  public static PlaylistChooserFragment newInstance(Playlist playlist){  PlaylistChooserFragment fragment=new PlaylistChooserFragment();  Bundle bundle=new Bundle();  bundle.putParcelable(KEY_PLAYLIST,playlist);  fragment.setArguments(bundle);  return fragment;}  }
class C{  public static void init(){  ProfilerSection section=Profiler.INSTANCE.section("JavaScript");  section.start("ModuleConfig");  base_file=new File(ToastBootstrap.toastHome,"config");  base_file.mkdirs();  allConfigs=new LinkedList<>();  section.stop("ModuleConfig");}  }
class C{  public int size(){  return size(root);}  }
class C{  public void loadLogicalCategories(){  logicalOFMessageCategories=ImmutableSet.copyOf(logicalOFMessageCategories);  numRequiredConnections=calcNumRequiredConnections();}  }
class C{  @Override public void configureManagers(){  log.debug("Configuring Managers for XBee Connection");  XBeeTrafficController cont=(XBeeTrafficController)getTrafficController();  _NodeManager=new XBeeNodeManager(cont);  setSensorManager(new XBeeSensorManager(cont,getSystemPrefix()));  jmri.InstanceManager.setSensorManager(getSensorManager());  setLightManager(new XBeeLightManager(cont,getSystemPrefix()));  jmri.InstanceManager.setLightManager(getLightManager());  setTurnoutManager(new XBeeTurnoutManager(cont,getSystemPrefix()));  jmri.InstanceManager.setTurnoutManager(getTurnoutManager());}  }
class C{  @Override public ExampleSet performPrediction(ExampleSet exampleSet,Attribute predictedLabel){  if (modelRecentlyUpdated) {    updateDistributionProperties();  }  for (  Example example : exampleSet) {    double[] probabilities=new double[numberOfClasses];    double maxLogProbability=Double.NEGATIVE_INFINITY;    int mostProbableClass=0;    double probabilitySum=0;    for (int i=0; i < numberOfClasses; i++) {      double logProbability=priors[i];      int j=0;      for (      Attribute attribute : exampleSet.getAttributes()) {        double value=example.getValue(attribute);        if (nominal[j]) {          if (!Double.isNaN(value) && (int)value < distributionProperties[j][i].length) {            logProbability+=distributionProperties[j][i][(int)value];          } else {            logProbability+=distributionProperties[j][i][distributionProperties[j][i].length - 1];          }        } else {          if (!Double.isNaN(value)) {            if (useApplianceGrid) {              double upperBound=kernelDistributions[j][i].getUpperBound();              double lowerBound=kernelDistributions[j][i].getLowerBound();              double precision=(upperBound - lowerBound) / gridSize;              if (value >= lowerBound && value <= kernelDistributions[j][i].getUpperBound()) {                logProbability+=Math.log(grid[j][i][(int)((value - lowerBound) / precision)]);              } else {                logProbability+=Math.log(kernelDistributions[j][i].getProbability(value));              }            } else {              logProbability+=Math.log(kernelDistributions[j][i].getProbability(value));            }          }        }        j++;      }      if (!Double.isNaN(logProbability) && logProbability > maxLogProbability) {        maxLogProbability=logProbability;        mostProbableClass=i;      }      probabilities[i]=logProbability;    }    for (int i=0; i < numberOfClasses; i++) {      if (!Double.isNaN(probabilities[i])) {        probabilities[i]=Math.exp(probabilities[i] - maxLogProbability);        probabilitySum+=probabilities[i];      } else {        probabilities[i]=0;      }    }    if (maxLogProbability == Double.NEGATIVE_INFINITY) {      example.setPredictedLabel(Double.NaN);      for (int i=0; i < numberOfClasses; i++) {        example.setConfidence(classValues[i],Double.NaN);      }    } else {      example.setPredictedLabel(mostProbableClass);      for (int i=0; i < numberOfClasses; i++) {        example.setConfidence(classValues[i],probabilities[i] / probabilitySum);      }    }  }  return exampleSet;}  }
class C{  String assembleStringRepresentationOfObjectFromCookies(final Map<String,List<String>> headers) throws CartDetuplizationException {  final TuplizerSetting meta=tuplizerSetting;  final StringBuilder stringBuilder=new StringBuilder();  int headerIndex=0;  boolean continueSearch=true;  if (headers != null) {    final String terminator=String.valueOf(meta.key.hashCode());    final String objectKey=meta.key;    while (continueSearch) {      final String seekKey=objectKey + headerIndex;      final List<String> headerValues=headers.get(seekKey);      if (headerValues != null && headerValues.size() == 1) {        final String headerValue=headerValues.get(0);        continueSearch=!terminator.equals(headerValue);        if (continueSearch) {          stringBuilder.append(headerValue);          headerIndex++;        }      } else {        continueSearch=false;      }    }  }  return stringBuilder.toString();}  }
class C{  public static final JIPVariable create(final String strName){  return (strName == null) ? new JIPVariable(new Variable(false)) : new JIPVariable(new Variable(strName));}  }
class C{  boolean subTreeReferencesAllOriginalDocuments(CharSequence startKey,Node startNode){  final Set<String> documentsEncounteredSoFar=new HashSet<String>(originalDocuments.size());  final boolean[] result=new boolean[]{false};  for (  NodeKeyPair nodeKeyPair : lazyTraverseDescendants(startKey,startNode)) {    @SuppressWarnings({"unchecked"}) Set<String> documentsReferencedByThisNode=(Set<String>)nodeKeyPair.node.getValue();    if (documentsReferencedByThisNode != null) {      documentsEncounteredSoFar.addAll(documentsReferencedByThisNode);      if (documentsEncounteredSoFar.equals(originalDocuments)) {        result[0]=true;        break;      }    }  }  return result[0];}  }
class C{  public boolean isCurrent(){  return m_mTab != null ? m_mTab.isCurrent() : false;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ASSOCIATION_END___MULTIPLICITY_1:    return ((InternalEList<?>)getMultiplicity_1()).basicRemove(otherEnd,msgs);case UmplePackage.ASSOCIATION_END___IS_SORTED_1:  return ((InternalEList<?>)getIsSorted_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public String toLocalizedString(Object... params){  String idStr="";  if (includeMsgIDs) {    idStr="msgID " + this.id + ": ";  }  return MessageFormat.format(idStr + StringId.rb.getString(this),params);}  }
class C{  public int bufferedSize(){  return _bufferedEntryCount;}  }
class C{  public boolean isA_New_Used(){  Object oo=get_Value(COLUMNNAME_A_New_Used);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public CurrencyException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @SuppressWarnings("ConstantConditions") public void testDataStoring() throws Exception {  for (int i=0; i < 10; i++) {    IgfsPath path=IgfsPath.ROOT;    long t=System.currentTimeMillis();    IgfsEntryInfo info=IgfsUtils.createFile(IgniteUuid.randomUuid(),200,0L,null,IgfsUtils.DELETE_LOCK_ID,false,null,t,t);    assertNull(mgr.dataBlock(info,path,0,null).get());    byte[] data=new byte[rnd.nextInt(20000) + 5];    rnd.nextBytes(data);    IgniteInternalFuture<Boolean> fut=mgr.writeStart(info.id());    expectsStoreFail(info,data,"Not enough space reserved to store data");    info=info.length(info.length() + data.length - 3);    expectsStoreFail(info,data,"Not enough space reserved to store data");    info=info.length(info.length() + 3);    IgfsFileAffinityRange range=new IgfsFileAffinityRange();    byte[] remainder=mgr.storeDataBlocks(info,info.length(),null,0,ByteBuffer.wrap(data),true,range,null);    assert remainder == null;    mgr.writeClose(info.id());    fut.get(3000);    for (int j=0; j < NODES_CNT; j++) {      GridCacheContext<Object,Object> ctx=GridTestUtils.getFieldValue(grid(j).cachex(DATA_CACHE_NAME),"ctx");      Collection<IgniteInternalTx> txs=ctx.tm().txs();      assert txs.isEmpty() : "Incomplete transactions: " + txs;    }    for (int pos=0, block=0; pos < info.length(); block++) {      byte[] stored=mgr.dataBlock(info,path,block,null).get();      assertNotNull("Expects data exist [data.length=" + data.length + ", block="+ block+ ']',stored);      for (int j=0; j < stored.length; j++)       assertEquals(stored[j],data[pos + j]);      pos+=stored.length;    }    mgr.delete(info);    long nIters=getTestTimeout() / BUSY_WAIT_SLEEP_INTERVAL;    assert nIters < Integer.MAX_VALUE;    boolean rmvBlocks=false;    for (int j=0; j < nIters && !rmvBlocks; j=sleepAndIncrement(BUSY_WAIT_SLEEP_INTERVAL,j)) {      boolean b=true;      for (long block=0; block < info.blocksCount(); block++)       b&=mgr.dataBlock(info,path,block,null).get() == null;      rmvBlocks=b;    }    assertTrue("All blocks should be removed from cache.",rmvBlocks);  }}  }
class C{  protected void loadTableOIS(Vector<?> data){  dialog.getMiniTable().removeMiniTableSelectionListener(dialog);  DefaultTableModel model=new DefaultTableModel(data,getOISColumnNames());  dialog.getMiniTable().setModel(model);  configureMiniTable(dialog.getMiniTable());  dialog.getMiniTable().addMiniTableSelectionListener(dialog);}  }
class C{  public static boolean checkUtil(String util){  return getInternals().checkUtil(util);}  }
class C{  public PersistentSearchControl() throws IOException {  super(OID);  super.value=setEncodedValue();}  }
class C{  private void verifyRpConsistencyGroupWithDuplicatesMigration() throws Exception {  log.info("Verifying duplicate protection sets were cleaned up.");  List<URI> protSetIds=_dbClient.queryByType(ProtectionSet.class,true);  List<String> protSetNames=new ArrayList<String>();  for (  URI id : protSetIds) {    ProtectionSet protSet=_dbClient.queryObject(ProtectionSet.class,id);    if (protSet == null || protSet.getInactive()) {      continue;    }    if (protSetNames.contains(protSet.getLabel())) {      Assert.fail("Duplicate protection sets exist after migration " + protSet.getLabel());    } else {      protSetNames.add(protSet.getLabel());      List<String> volumeIds=new ArrayList<String>();      for (      String volId : protSet.getVolumes()) {        Volume vol=_dbClient.queryObject(Volume.class,URI.create(volId));        if (vol == null || vol.getInactive()) {          Assert.fail(String.format("Stale volume %s exists on protection set %s exist after migration",volId,protSet.getLabel()));        } else         if (volumeIds.contains(volId)) {          Assert.fail(String.format("Duplicate volume %s exists on protection set %s exist after migration",volId,protSet.getLabel()));        } else         if (vol.getProtectionSet() == null || vol.getProtectionSet().getURI() == null || !vol.getProtectionSet().getURI().equals(protSet.getId())) {          Assert.fail(String.format("Volume %s does not point back to protection set %s exist after migration",volId,protSet.getLabel()));        } else {          volumeIds.add(volId);        }      }    }  }  List<URI> volumes=_dbClient.queryByType(Volume.class,true);  for (  URI id : volumes) {    Volume vol=_dbClient.queryObject(Volume.class,id);    if (vol.getProtectionSet() != null && vol.getProtectionSet().getURI() != null) {      ProtectionSet protSet=_dbClient.queryObject(ProtectionSet.class,vol.getProtectionSet().getURI());      if (protSet == null || protSet.getInactive()) {        Assert.fail(String.format("Stale protection set %s on volume %s exists after migration",vol.getProtectionSet().getURI(),id));      }    }  }  List<URI> snapshots=_dbClient.queryByType(BlockSnapshot.class,true);  for (  URI id : snapshots) {    BlockSnapshot snapshot=_dbClient.queryObject(BlockSnapshot.class,id);    if (snapshot.getProtectionSet() != null) {      ProtectionSet protSet=_dbClient.queryObject(ProtectionSet.class,snapshot.getProtectionSet());      if (protSet == null || protSet.getInactive()) {        Assert.fail(String.format("Stale protection set %s on snapshot %s exists after migration",snapshot.getProtectionSet(),id));      }    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.129 -0500",hash_original_method="11712C48B70E4A29EC050275E8757D6B",hash_generated_method="01AF074B73D4C1F84F3199AA9ECEB8B1") public int saveLayerAlpha(RectF bounds,int alpha,int saveFlags){  alpha=Math.min(255,Math.max(0,alpha));  return native_saveLayerAlpha(mNativeCanvas,bounds,alpha,saveFlags);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  Agent bond=Carny.getInstance().getCauseAgent(a);  if (bond != null && bond.isFavorite())   return bond; else {    Agent[] favs=Wizard.getInstance().getFavorites();    StringBuffer sbCache=new StringBuffer();    for (int i=0; i < favs.length; i++) {      if (favs[i].followsTrend(a,false,sbCache))       return favs[i];    }  }  return null;}  }
class C{  private boolean scrollAndFocusV(int direction,int top,int bottom){  boolean handled=true;  int height=getHeight();  int containerTop=getScrollY();  int containerBottom=containerTop + height;  boolean up=direction == View.FOCUS_UP;  View newFocused=findFocusableViewInBoundsV(up,top,bottom);  if (newFocused == null) {    newFocused=this;  }  if (top >= containerTop && bottom <= containerBottom) {    handled=false;  } else {    int delta=up ? (top - containerTop) : (bottom - containerBottom);    doScrollY(delta);  }  if (newFocused != findFocus() && newFocused.requestFocus(direction)) {    mScrollViewMovedFocus=true;    mScrollViewMovedFocus=false;  }  return handled;}  }
class C{  public int select(int attIdx,int[] indices,int left,int right,int k){  if (left == right) {    return left;  } else {    int middle=partition(attIdx,indices,left,right);    if ((middle - left + 1) >= k) {      return select(attIdx,indices,left,middle,k);    } else {      return select(attIdx,indices,middle + 1,right,k - (middle - left + 1));    }  }}  }
class C{  private RestClientManager(Context context,ResponseDelivery responseDelivery){  mContext=context;  mRequestQueue=VolleyHelper.newRequestQueue(mContext,responseDelivery);}  }
class C{  @Override public void add(int location,E object){  insertElementAt(object,location);}  }
class C{  public void fullScreen(){  if (!fullScreen) {    if (insideSettings("fullScreen")) {      this.fullScreen=true;    }  }}  }
class C{  private void injectDynamically(){  injectionRequestProcessor.injectMembers();  stopwatch.resetAndLog("Static member injection");  initializer.injectAll(errors);  stopwatch.resetAndLog("Instance injection");  errors.throwCreationExceptionIfErrorsExist();  for (  InjectorShell shell : shells) {    loadEagerSingletons(shell.getInjector(),stage,errors);  }  stopwatch.resetAndLog("Preloading singletons");  errors.throwCreationExceptionIfErrorsExist();}  }
class C{  public void positionDialogRelativeToParent(final JDialog dialog,final double horizontalPercent,final double verticalPercent){  final Dimension d=dialog.getSize();  final Dimension p=mainFrame.getSize();  final int baseX=mainFrame.getX() - d.width;  final int baseY=mainFrame.getY() - d.height;  final int w=d.width + p.width;  final int h=d.height + p.height;  int x=baseX + (int)(horizontalPercent * w);  int y=baseY + (int)(verticalPercent * h);  final Rectangle s=getMaximumWindowBounds();  x=Math.min(x,(s.width - d.width));  x=Math.max(x,0);  y=Math.min(y,(s.height - d.height));  y=Math.max(y,0);  dialog.setBounds(x + s.x,y + s.y,d.width,d.height);}  }
class C{  public Object remove(int index){  Object o=opt(index);  remove((Object)index);  return o;}  }
class C{  void handleReporterChange(java.beans.PropertyChangeEvent e){  if ((_reportingCurrent && e.getPropertyName().equals("currentReport")) || (!_reportingCurrent && e.getPropertyName().equals("lastReport"))) {    setValue(e.getNewValue());  }}  }
class C{  @SuppressWarnings("unchecked") public ListIterator<AbstractInsnNode> iterator(int index){  return new InsnListIterator(index);}  }
class C{  public static void initializeStrictModeLogOnly(){  initializeStrictModeLogOnly(newVmPolicyBuilderWithDefaults(),newThreadPolicyBuilderWithDefaults());}  }
class C{  @SuppressWarnings("unchecked") public ArticleFilter() throws ConfigurationException {  this((Set<Integer>)config.getConfigParameter(ConfigurationKeys.NAMESPACES_TO_KEEP));}  }
class C{  public static boolean[] subarray(final boolean[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return ArrayUtils.EMPTY_BOOLEAN_ARRAY;  }  boolean[] subarray=new boolean[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  public static void warn(int windowNo,Component comp,String adMessage,String message,String title){  Properties ctx=Env.getCtx();  logger.info(adMessage + " - " + message);  String newTitle;  if (title == null) {    newTitle=AEnv.getDialogHeader(ctx,windowNo);  } else {    newTitle=title;  }  String out=constructMessage(adMessage,message);  try {    Messagebox.showDialog(out,newTitle,Messagebox.OK,Messagebox.EXCLAMATION);  } catch (  InterruptedException exception) {    Thread.currentThread().interrupt();  }  return;}  }
class C{  public boolean isDitherEnabled(){  return mDither;}  }
class C{  public String toString(){  return '[' + getLocalName() + "|=\""+ getValue()+ "\"]";}  }
class C{  @Override public void nextTuple(){}  }
class C{  public static int hashInsertOnly(final Memory mem,final int lgArrLongs,final long hash,final int memOffsetBytes){  final int arrayMask=(1 << lgArrLongs) - 1;  final int stride=getStride(hash,lgArrLongs);  int curProbe=(int)(hash & arrayMask);  int curProbeOffsetBytes=(curProbe << 3) + memOffsetBytes;  long curArrayHash=mem.getLong(curProbeOffsetBytes);  while (curArrayHash != 0L) {    curProbe=(curProbe + stride) & arrayMask;    curProbeOffsetBytes=(curProbe << 3) + memOffsetBytes;    curArrayHash=mem.getLong(curProbeOffsetBytes);  }  mem.putLong(curProbeOffsetBytes,hash);  return curProbe;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public FBManagedConnectionFactory canonicalize(){  final FBManagedConnectionFactory mcf=internalCanonicalize();  if (mcf != null)   return mcf;  start();  return this;}  }
class C{  private void timer(Player player,String[] args){  int id=Utils.getNumber(player,args[2]);  int seconds=Utils.getNumber(player,args[3]);  if (id < 0 || seconds < 0) {    Messages.POSITIVE_VALUES.send(player);    return;  }  editedFile.getConfig().set("Signs." + id + ".Timer",seconds);  editedFile.saveFile();}  }
class C{  @Override protected void writePostProcess(Object o) throws Exception {  Element root;  NodeList list;  Element conns;  Element child;  int i;  if (getDataType() == DATATYPE_LAYOUT) {    root=m_Document.getDocument().getDocumentElement();    conns=(Element)root.getChildNodes().item(INDEX_BEANCONNECTIONS);    list=conns.getChildNodes();    for (i=0; i < list.getLength(); i++) {      child=(Element)list.item(i);      child.setAttribute(ATT_NAME,"" + i);    }  }}  }
class C{  Class classForName(String name,ClassLoader[] classLoader) throws ClassNotFoundException {  for (  ClassLoader cl : classLoader) {    if (null != cl) {      try {        Class c=cl.loadClass(name);        if (null != c)         return c;      } catch (      ClassNotFoundException e) {      }    }  }  throw new ClassNotFoundException("Cannot find class: " + name);}  }
class C{  protected boolean IPIsBroadcast(int IPAddress){  int inv_subnet_mask=~this.subnet_mask;  return ((IPAddress & inv_subnet_mask) == inv_subnet_mask);}  }
class C{  public void cast(final Type from,final Type to){  if (from != to) {    if (from == Type.DOUBLE_TYPE) {      if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.D2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.D2L);      } else {        mv.visitInsn(Opcodes.D2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.FLOAT_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.F2D);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.F2L);      } else {        mv.visitInsn(Opcodes.F2I);        cast(Type.INT_TYPE,to);      }    } else     if (from == Type.LONG_TYPE) {      if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.L2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.L2F);      } else {        mv.visitInsn(Opcodes.L2I);        cast(Type.INT_TYPE,to);      }    } else {      if (to == Type.BYTE_TYPE) {        mv.visitInsn(Opcodes.I2B);      } else       if (to == Type.CHAR_TYPE) {        mv.visitInsn(Opcodes.I2C);      } else       if (to == Type.DOUBLE_TYPE) {        mv.visitInsn(Opcodes.I2D);      } else       if (to == Type.FLOAT_TYPE) {        mv.visitInsn(Opcodes.I2F);      } else       if (to == Type.LONG_TYPE) {        mv.visitInsn(Opcodes.I2L);      } else       if (to == Type.SHORT_TYPE) {        mv.visitInsn(Opcodes.I2S);      }    }  }}  }
class C{  private void buildXAdES(final ASiCParameters asicParameters,final DSSDocument signature,final ZipOutputStream outZip) throws DSSException {  final String signatureZipEntryName=getSignatureFileName(asicParameters);  final ZipEntry entrySignature=new ZipEntry(signatureZipEntryName);  createZipEntry(outZip,entrySignature);  Document xmlSignatureDoc=DSSXMLUtils.buildDOM(signature);  storeXmlDom(outZip,xmlSignatureDoc);}  }
class C{  public DelegationSelectionTool(Collection<Action> drawingActions,Collection<Action> selectionActions){  this.drawingActions=drawingActions;  this.selectionActions=selectionActions;}  }
class C{  protected SimpleJavaFileObject(URI uri,Kind kind){  uri.getClass();  kind.getClass();  if (uri.getPath() == null)   throw new IllegalArgumentException("URI must have a path: " + uri);  this.uri=uri;  this.kind=kind;}  }
class C{  public static byte[] randomBytes(char len){  byte[] data=new byte[len];  for (int i=0; i < len; i++) {    data[i]=randomByte();  }  return data;}  }
class C{  public boolean add(P model){  return getModelStore().add(model);}  }
class C{  public boolean contains(long prefix_hash){  if (prefix_hash == 0) {    return false;  }  int idx=-1 * Arrays.binarySearch(hashes_idx,prefix_hash) - 1;  if (idx == cache_size) {    return false;  } else {    return (hashes_idx[idx] & PREFIX_HASH_MASK) == prefix_hash;  }}  }
class C{  public void addMemberValue(String name,MemberValue value){  Pair p=new Pair();  p.name=pool.addUtf8Info(name);  p.value=value;  if (members == null)   members=new LinkedHashMap();  members.put(name,p);}  }
class C{  public double toModel(double viewDist){  return viewDist / scale;}  }
class C{  protected void edicionAvanzadaExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.FICHAS_EDICION_AVANZADA,request);  FichasForm fichasForm=(FichasForm)form;  if (fichasForm.isConEdicionAvanzada()) {    MapDescUDocVO mapeoDescripcion=getGestionDescripcionBI(request).getMapeoDescripcion(fichasForm.getId());    if (mapeoDescripcion != null) {      fichasForm.setId(mapeoDescripcion.getIdFicha());      fichasForm.setDefinicionMapeo(mapeoDescripcion.getInfo());    }    setReturnActionFordward(request,mapping.findForward("editAvanzado"));  } else {    ActionErrors errors=new ActionErrors();    errors.add(ErrorKeys.ERROR_FICHA_SIN_EDICION_AVANZADA,new ActionError(ErrorKeys.ERROR_FICHA_SIN_EDICION_AVANZADA));    ErrorsTag.saveErrors(request,errors);    setReturnActionFordward(request,mapping.findForward("retrieve"));  }}  }
class C{  public void prepareSession(MediaInput player,String remoteAddress,int remotePort,RtpStreamListener rtpStreamListener) throws NetworkException {  try {    inputStream=new VideoCaptureStream(format,player);    inputStream.open();    if (logger.isActivated()) {      logger.debug("Input stream: " + inputStream.getClass().getName());    }    outputStream=new RtpOutputStream(remoteAddress,remotePort,localPort,RtpOutputStream.RTCP_SOCKET_TIMEOUT);    outputStream.addRtpStreamListener(rtpStreamListener);    outputStream.open();    if (logger.isActivated()) {      logger.debug("Output stream: " + outputStream.getClass().getName());    }    Codec[] codecChain=MediaRegistry.generateEncodingCodecChain(format.getCodec());    processor=new Processor(inputStream,outputStream,codecChain);    if (logger.isActivated()) {      logger.debug("Session has been prepared with success");    }  } catch (  IOException e) {    throw new NetworkException(new StringBuilder("Can't prepare resources correctly for remoteAddress : ").append(remoteAddress).append(" with remotePort : ").append(remotePort).append("!").toString(),e);  }}  }
class C{  private boolean canEnterState(State state){  if (mState == state) {    return false;  }  boolean canEnterState=true;switch (state) {case UNINITIALIZED:    break;case MISSION_LOADED:  if (mState == State.MISSION_RUNNING) {    canEnterState=false;    Utils.logDebug(TAG,"Can not enter MISSION_LOADED state from MISSION_RUNNING state.");  }break;case MISSION_RUNNING:if (mState != State.MISSION_LOADED) {canEnterState=false;Utils.logDebug(TAG,"Can only enter MISSION_RUNNING state from MISSION_LOADED state.");}break;case END_SCREEN:if (mState != State.MISSION_RUNNING) {canEnterState=false;Utils.logDebug(TAG,"Can only enter END_SCREEN state from MISSION_RUNNING state.");}break;}return canEnterState;}  }
class C{  public Request parse(final String rawRequest){  if (rawRequest == null || rawRequest.isEmpty()) {    throw new IllegalArgumentException("request string can not be null or empty");  }  final StringTokenizer tokenizer=new StringTokenizer(rawRequest);  final Request req=new Request();  req.setMethod(Request.Method.lookup(tokenizer.nextToken()));  req.setUri(tokenizer.nextToken());  req.setVersion(tokenizer.nextToken());  String[] lines=rawRequest.split(NEW_LINE);  if (Request.Method.POST.equals(req.getMethod()) || Request.Method.PUT.equals(req.getMethod())) {    final String body=lines[lines.length - 1];    if (body != null) {      req.setBody(body);    }    lines=Arrays.copyOfRange(lines,0,lines.length - 1);  }  req.getHeaders().putAll(parseHeaders(lines));  return req;}  }
class C{  public static Integer intValue(String propName,Integer dflt){  String sysProp=getProperty(propName);  return (sysProp != null && !sysProp.isEmpty()) ? Integer.getInteger(sysProp) : dflt;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int indexOfFromTo(char element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  char[] theElements=elements;  for (int i=from; i <= to; i++) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  private boolean deposePrimaryForColocatedChildren(){  boolean deposedChildPrimaries=true;  List<PartitionedRegion> colocatedChildPRs=ColocationHelper.getColocatedChildRegions(this.pRegion);  if (colocatedChildPRs != null) {    for (    PartitionedRegion pr : colocatedChildPRs) {      Bucket b=pr.getRegionAdvisor().getBucket(getBucket().getId());      if (b != null) {        BucketAdvisor ba=b.getBucketAdvisor();        deposedChildPrimaries=ba.deposePrimary() && deposedChildPrimaries;      }    }  }  return deposedChildPrimaries;}  }
class C{  public static boolean isBlockStoragePortInUse(URI portId,DbClient dbClient){  if (portId != null) {    List<ExportMask> exportMasks=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,ExportMask.class,AlternateIdConstraint.Factory.getConstraint(ExportMask.class,"storagePorts",portId.toString()));    return (exportMasks != null && !exportMasks.isEmpty());  }  return false;}  }
class C{  private void registerIdlingResource(){  Espresso.registerIdlingResources(mNoteDetailActivityTestRule.getActivity().getCountingIdlingResource());}  }
class C{  @SuppressWarnings("unchecked") private void handleRequest(long requestId,Object request){  HandlerHolder holder=handlers.get(request.getClass());  if (holder == null) {    connection.handleResponseError(requestId,new ConnectException("no handler registered"));    return;  }  MessageHandler<Object,Object> handler=(MessageHandler<Object,Object>)holder.handler;  try {    holder.context.executor().execute(null);  } catch (  RejectedExecutionException e) {    connection.handleResponseError(requestId,new ConnectException("connection closed"));  }}  }
class C{  public boolean isEnabled(Capability c){  return m_Capabilities.handles(c);}  }
class C{  public Address __radd__(final Object rhs){  return new Address(m_value.add(getBigInteger(rhs)));}  }
class C{  public static Wallet loadFromFileStream(InputStream stream,@Nullable WalletExtension... walletExtensions) throws UnreadableWalletException {  Wallet wallet=new WalletProtobufSerializer().readWallet(stream,walletExtensions);  if (!wallet.isConsistent()) {    log.error("Loaded an inconsistent wallet");  }  return wallet;}  }
class C{  public static void main(String[] args){  int BIGNUM=1000000;  int maxGuess=20;  int i, max=0;  float sum=0;  for (i=1; i <= BIGNUM; i++) {    int k=turns(i,1,BIGNUM);    if (printAll) {      System.out.println(i + " guess in " + k+ " turns.");    }    if (k > maxGuess) {      System.err.println("Failed to guess " + i + " in "+ maxGuess+ " turns or less (needed "+ k+ ")");    } else     if (k == maxGuess) {      if (!printed) {        printed=true;        System.out.println(i + " needed " + maxGuess+ " turns.");      }    }    if (k > max) {      max=k;    }    sum+=k;  }  System.out.println("average number:" + sum / BIGNUM);  System.out.println("max number:" + max);}  }
class C{  @Override public void onMapLongClick(LatLng latLng){  WritableMap event=Arguments.createMap();  WritableMap data=Arguments.createMap();  data.putDouble("latitude",latLng.latitude);  data.putDouble("longitude",latLng.longitude);  event.putString("event","didLongPressAtCoordinate");  event.putMap("data",data);  reactContext.getJSModule(RCTEventEmitter.class).receiveEvent(mapView.getId(),"topChange",event);}  }
class C{  private int sampleLine(ResultPoint p1,ResultPoint p2,int size){  int result=0;  float d=distance(p1,p2);  float moduleSize=d / size;  float px=p1.getX();  float py=p1.getY();  float dx=moduleSize * (p2.getX() - p1.getX()) / d;  float dy=moduleSize * (p2.getY() - p1.getY()) / d;  for (int i=0; i < size; i++) {    if (image.get(MathUtils.round(px + i * dx),MathUtils.round(py + i * dy))) {      result|=1 << (size - i - 1);    }  }  return result;}  }
class C{  public Observable<String> exerciseHello(){  return Observable.error(new RuntimeException("Not Implemented"));}  }
class C{  default Maybe<T> toMaybe(){  return visit(null,null);}  }
class C{  public void updateTextVisibility(){  double scale=this.getNetworkPanel().getCanvas().getCamera().getViewScale();  if (scale > TEXT_VISIBILITY_THRESHOLD) {    if (!currentTextVisibility) {      setDisplayText(true);      currentTextVisibility=true;    }    updateText();    updateTextLabel();  } else {    if (currentTextVisibility) {      setDisplayText(false);      currentTextVisibility=false;    }  }}  }
class C{  protected void waitForClusterToBeStable(){  ClientResponse resp;  String info="";  Boolean notStable=true;  while (notStable) {    try {      Thread.sleep(2000);      System.out.println("Waiting for stable cluster state.");    } catch (    InterruptedException e) {      _log.error(e.getMessage(),e);    }    try {      resp=rSys.path("/upgrade/cluster-state").get(ClientResponse.class);    } catch (    ClientHandlerException e) {      _log.warn("Caught ClientHandlerException while waiting for cluster to be stable. Continuing...",e);      continue;    }    info=resp.getEntity(String.class);    if (info.contains("<cluster_state>STABLE</cluster_state>")) {      notStable=false;      System.out.println("Cluster state is stable.");    }  }  boolean apiSvcUp=false;  while (!apiSvcUp) {    resp=rSys.path("/tenant").get(ClientResponse.class);    if (resp.getStatus() != 503) {      apiSvcUp=true;    } else {      try {        Thread.sleep(2000);        System.out.println("Waiting apisvc to be up");      } catch (      InterruptedException e) {        _log.error(e.getMessage(),e);      }    }  }}  }
class C{  private EncodingUtil(){}  }
class C{  public boolean isAsTemplate(){  return asTemplate;}  }
class C{  public void addControlRoll(PilotingRollData control){  controlRolls.addElement(control);}  }
class C{  public MovieSetTreeNode(Object userObject){  super(userObject);}  }
class C{  @Override public double[] projectRelativeScaledToRender(double[] v){  return proj.applyRelative(v);}  }
class C{  public short[][] multiplyMatrix(short[][] M1,short[][] M2) throws RuntimeException {  if (M1[0].length != M2.length) {    throw new RuntimeException("Multiplication is not possible!");  }  short tmp=0;  A=new short[M1.length][M2[0].length];  for (int i=0; i < M1.length; i++) {    for (int j=0; j < M2.length; j++) {      for (int k=0; k < M2[0].length; k++) {        tmp=GF2Field.multElem(M1[i][j],M2[j][k]);        A[i][k]=GF2Field.addElem(A[i][k],tmp);      }    }  }  return A;}  }
class C{  public static String captureAudio(){  CallBack c=new CallBack();  captureAudio(c);  Display.getInstance().invokeAndBlock(c);  return c.url;}  }
class C{  public Builder notificationIconBackground(@DrawableRes int resId){  notificationConfig.setNotificationIconBackground(resId);  return this;}  }
class C{  @SuppressWarnings({"static-access"}) public int run(String[] args) throws Exception {  Options options=new Options();  options.addOption(new Option(COMBINER,"use combiner"));  options.addOption(new Option(INMAPPER_COMBINER,"user in-mapper combiner"));  options.addOption(new Option(RANGE,"use range partitioner"));  options.addOption(OptionBuilder.withArgName("path").hasArg().withDescription("base path").create(BASE));  options.addOption(OptionBuilder.withArgName("num").hasArg().withDescription("start iteration").create(START));  options.addOption(OptionBuilder.withArgName("num").hasArg().withDescription("end iteration").create(END));  options.addOption(OptionBuilder.withArgName("num").hasArg().withDescription("number of nodes").create(NUM_NODES));  CommandLine cmdline;  CommandLineParser parser=new GnuParser();  try {    cmdline=parser.parse(options,args);  } catch (  ParseException exp) {    System.err.println("Error parsing command line: " + exp.getMessage());    return -1;  }  if (!cmdline.hasOption(BASE) || !cmdline.hasOption(START) || !cmdline.hasOption(END)|| !cmdline.hasOption(NUM_NODES)) {    System.out.println("args: " + Arrays.toString(args));    HelpFormatter formatter=new HelpFormatter();    formatter.setWidth(120);    formatter.printHelp(this.getClass().getName(),options);    ToolRunner.printGenericCommandUsage(System.out);    return -1;  }  String basePath=cmdline.getOptionValue(BASE);  int n=Integer.parseInt(cmdline.getOptionValue(NUM_NODES));  int s=Integer.parseInt(cmdline.getOptionValue(START));  int e=Integer.parseInt(cmdline.getOptionValue(END));  boolean useCombiner=cmdline.hasOption(COMBINER);  boolean useInmapCombiner=cmdline.hasOption(INMAPPER_COMBINER);  boolean useRange=cmdline.hasOption(RANGE);  LOG.info("Tool name: RunPageRank");  LOG.info(" - base path: " + basePath);  LOG.info(" - num nodes: " + n);  LOG.info(" - start iteration: " + s);  LOG.info(" - end iteration: " + e);  LOG.info(" - use combiner: " + useCombiner);  LOG.info(" - use in-mapper combiner: " + useInmapCombiner);  LOG.info(" - user range partitioner: " + useRange);  for (int i=s; i < e; i++) {    iteratePageRank(i,i + 1,basePath,n,useCombiner,useInmapCombiner);  }  return 0;}  }
class C{  public void marshal(final Object obj,final HierarchicalStreamWriter writer,final DataHolder dataHolder){  marshallingStrategy.marshal(writer,obj,converterLookup,mapper,dataHolder);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS07.class,args);}  }
class C{  protected InformationModelImpl(){  super();}  }
class C{  public String normalizeDocLengthTipText(){  return "Sets whether if the word frequencies for a document (instance) " + "should be normalized or not.";}  }
class C{  public boolean isValidCurrent(long checkTime){  if (checkTime == 0 || (rDateList == null && rRulesList == null)) {    return false;  }  boolean found=false;  Iterator<RecurrenceRule> rulesIterator=getRecurrenceRuleIterator();  while (rulesIterator.hasNext()) {    RecurrenceRule rule=rulesIterator.next();    long currentTime=rule.validCurrent(getStartTime(),checkTime,getCurrentCount());    currentTime=checkDateList(rDateList,currentTime,checkTime);    if ((currentTime > 0) && isValid(checkTime)) {      found=true;    } else {      return false;    }  }  return found;}  }
class C{  private void checkEqual(String l1,int i1,String l2,int i2) throws Exception {  if (i1 != i2)   throw new Exception(l1 + " warn count, " + i1+ ", does not match "+ l2+ " warn count, "+ i2);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public ServiceEvent(int type,ServiceReference reference){  super(reference);  this.reference=reference;  this.type=type;}  }
class C{  BulkImportResult doImport(final JobStatusListener statusListener,final File[] filesToImport,final String csvImportDescriptorName,final CsvImportDescriptor csvImportDescriptor,final Set<String> importedFiles) throws Exception {  for (  File fileToImport : filesToImport) {    importedFiles.add(fileToImport.getAbsolutePath());  }  for (  File fileToImport : filesToImport) {    final BulkImportResult status=doImport(statusListener,fileToImport,csvImportDescriptorName,csvImportDescriptor);    if (status != BulkImportResult.OK) {      return status;    }  }  return BulkImportResult.OK;}  }
class C{  public boolean bind(DrawContext dc){  if (dc == null) {    String msg=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.disposeOldTextures(dc);  Texture texture=this.syncTexture(dc);  if (texture != null) {    texture.bind(dc.getGL());    return true;  } else {    return false;  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.727 -0500",hash_original_method="F14CEFDDF6A25D53C3E36A1E481088F2",hash_generated_method="622D4DB076F02438468DE4A4417A69A2") @Override AndroidHttpClientConnection openConnection(Request req) throws IOException {  SSLSocket sslSock=null;  if (mProxyHost != null) {    AndroidHttpClientConnection proxyConnection=null;    Socket proxySock=null;    try {      proxySock=new Socket(mProxyHost.getHostName(),mProxyHost.getPort());      proxySock.setSoTimeout(60 * 1000);      proxyConnection=new AndroidHttpClientConnection();      HttpParams params=new BasicHttpParams();      HttpConnectionParams.setSocketBufferSize(params,8192);      proxyConnection.bind(proxySock,params);    } catch (    IOException e) {      if (proxyConnection != null) {        proxyConnection.close();      }      String errorMessage=e.getMessage();      if (errorMessage == null) {        errorMessage="failed to establish a connection to the proxy";      }      throw new IOException(errorMessage);    }    StatusLine statusLine=null;    int statusCode=0;    Headers headers=new Headers();    try {      BasicHttpRequest proxyReq=new BasicHttpRequest("CONNECT",mHost.toHostString());      for (      Header h : req.mHttpRequest.getAllHeaders()) {        String headerName=h.getName().toLowerCase();        if (headerName.startsWith("proxy") || headerName.equals("keep-alive") || headerName.equals("host")) {          proxyReq.addHeader(h);        }      }      proxyConnection.sendRequestHeader(proxyReq);      proxyConnection.flush();      do {        statusLine=proxyConnection.parseResponseHeader(headers);        statusCode=statusLine.getStatusCode();      } while (statusCode < HttpStatus.SC_OK);    } catch (    ParseException e) {      String errorMessage=e.getMessage();      if (errorMessage == null) {        errorMessage="failed to send a CONNECT request";      }      throw new IOException(errorMessage);    }catch (    HttpException e) {      String errorMessage=e.getMessage();      if (errorMessage == null) {        errorMessage="failed to send a CONNECT request";      }      throw new IOException(errorMessage);    }catch (    IOException e) {      String errorMessage=e.getMessage();      if (errorMessage == null) {        errorMessage="failed to send a CONNECT request";      }      throw new IOException(errorMessage);    }    if (statusCode == HttpStatus.SC_OK) {      try {        sslSock=(SSLSocket)getSocketFactory().createSocket(proxySock,mHost.getHostName(),mHost.getPort(),true);      } catch (      IOException e) {        if (sslSock != null) {          sslSock.close();        }        String errorMessage=e.getMessage();        if (errorMessage == null) {          errorMessage="failed to create an SSL socket";        }        throw new IOException(errorMessage);      }    } else {      ProtocolVersion version=statusLine.getProtocolVersion();      req.mEventHandler.status(version.getMajor(),version.getMinor(),statusCode,statusLine.getReasonPhrase());      req.mEventHandler.headers(headers);      req.mEventHandler.endData();      proxyConnection.close();      return null;    }  } else {    try {      sslSock=(SSLSocket)getSocketFactory().createSocket(mHost.getHostName(),mHost.getPort());      sslSock.setSoTimeout(SOCKET_TIMEOUT);    } catch (    IOException e) {      if (sslSock != null) {        sslSock.close();      }      String errorMessage=e.getMessage();      if (errorMessage == null) {        errorMessage="failed to create an SSL socket";      }      throw new IOException(errorMessage);    }  }  SslError error=CertificateChainValidator.getInstance().doHandshakeAndValidateServerCertificates(this,sslSock,mHost.getHostName());  if (error != null) {synchronized (mSuspendLock) {      mSuspended=true;    }    boolean canHandle=req.getEventHandler().handleSslErrorRequest(error);    if (!canHandle) {      throw new IOException("failed to handle " + error);    }synchronized (mSuspendLock) {      if (mSuspended) {        try {          mSuspendLock.wait(10 * 60 * 1000);          if (mSuspended) {            mSuspended=false;            mAborted=true;            if (HttpLog.LOGV) {              HttpLog.v("HttpsConnection.openConnection():" + " SSL timeout expired and request was cancelled!!!");            }          }        } catch (        InterruptedException e) {        }      }      if (mAborted) {        sslSock.close();        throw new SSLConnectionClosedByUserException("connection closed by the user");      }    }  }  AndroidHttpClientConnection conn=new AndroidHttpClientConnection();  BasicHttpParams params=new BasicHttpParams();  params.setIntParameter(HttpConnectionParams.SOCKET_BUFFER_SIZE,8192);  conn.bind(sslSock,params);  return conn;}  }
class C{  public TextHitInfo hitTestChar(float x,float y,Rectangle2D bounds){  LayoutPathImpl lp=textLine.getLayoutPath();  boolean prev=false;  if (lp != null) {    Point2D.Float pt=new Point2D.Float(x,y);    prev=lp.pointToPath(pt,pt);    x=pt.x;    y=pt.y;  }  if (isVertical()) {    if (y < bounds.getMinY()) {      return TextHitInfo.leading(0);    } else     if (y >= bounds.getMaxY()) {      return TextHitInfo.trailing(characterCount - 1);    }  } else {    if (x < bounds.getMinX()) {      return isLeftToRight() ? TextHitInfo.leading(0) : TextHitInfo.trailing(characterCount - 1);    } else     if (x >= bounds.getMaxX()) {      return isLeftToRight() ? TextHitInfo.trailing(characterCount - 1) : TextHitInfo.leading(0);    }  }  double distance=Double.MAX_VALUE;  int index=0;  int trail=-1;  CoreMetrics lcm=null;  float icx=0, icy=0, ia=0, cy=0, dya=0, ydsq=0;  for (int i=0; i < characterCount; ++i) {    if (!textLine.caretAtOffsetIsValid(i)) {      continue;    }    if (trail == -1) {      trail=i;    }    CoreMetrics cm=textLine.getCoreMetricsAt(i);    if (cm != lcm) {      lcm=cm;      if (cm.baselineIndex == GraphicAttribute.TOP_ALIGNMENT) {        cy=-(textLine.getMetrics().ascent - cm.ascent) + cm.ssOffset;      } else       if (cm.baselineIndex == GraphicAttribute.BOTTOM_ALIGNMENT) {        cy=textLine.getMetrics().descent - cm.descent + cm.ssOffset;      } else {        cy=cm.effectiveBaselineOffset(baselineOffsets) + cm.ssOffset;      }      float dy=(cm.descent - cm.ascent) / 2 - cy;      dya=dy * cm.italicAngle;      cy+=dy;      ydsq=(cy - y) * (cy - y);    }    float cx=textLine.getCharXPosition(i);    float ca=textLine.getCharAdvance(i);    float dx=ca / 2;    cx+=dx - dya;    double nd=Math.sqrt(4 * (cx - x) * (cx - x) + ydsq);    if (nd < distance) {      distance=nd;      index=i;      trail=-1;      icx=cx;      icy=cy;      ia=cm.italicAngle;    }  }  boolean left=x < icx - (y - icy) * ia;  boolean leading=textLine.isCharLTR(index) == left;  if (trail == -1) {    trail=characterCount;  }  TextHitInfo result=leading ? TextHitInfo.leading(index) : TextHitInfo.trailing(trail - 1);  return result;}  }
class C{  public void copy(File src,File dst){  run(null);}  }
class C{  public String html_tooltip_xref(String txt,String popup_txt,String attrs,String xref){  String out=String.format("<a title='%s' target='%s' %s href=%s>%s</a>",popup_txt,TARGET,attrs,xref,txt);  return out;}  }
class C{  public int decode(byte[] data,int off,int length,OutputStream out) throws IOException {  byte b1, b2;  int outLen=0;  int end=off + length;  while (end > off) {    if (!ignore((char)data[end - 1])) {      break;    }    end--;  }  int i=off;  while (i < end) {    while (i < end && ignore((char)data[i])) {      i++;    }    b1=decodingTable[data[i++]];    while (i < end && ignore((char)data[i])) {      i++;    }    b2=decodingTable[data[i++]];    if ((b1 | b2) < 0) {      throw new IOException("invalid characters encountered in Hex data");    }    out.write((b1 << 4) | b2);    outLen++;  }  return outLen;}  }
class C{  @org.junit.Test public void testTopics(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("What is love?");  String response=waitForOutput(output);  checkResponse(response,"Strong affection.");  text.input("What is the current topic?");  response=waitForOutput(output);  checkResponse(response,"The current topic is love.");  text.input("tell me more");  response=waitForOutput(output);  checkResponse(response,"That is all I know about love.");  text.input("say you love me");  response=waitForOutput(output);  checkResponse(response,"I love you");  text.input("repeat");  response=waitForOutput(output);  checkResponse(response,"I love you");  text.input("what did you say?");  response=waitForOutput(output);  checkResponse(response,"I said \"I love you\".");  text.input("yell you love bridges");  response=waitForOutput(output);  checkResponse(response,"I LOVE BRIDGES");  text.input("what did I say?");  response=waitForOutput(output);  checkResponse(response,"You said \"yell you love bridges\".");  text.input("what was the first thing you said");  response=waitForOutput(output);  checkResponse(response,"I said \"Strong affection.\".");  bot.shutdown();}  }
class C{  private void filterExportMaskForGroup(ExportGroup exportGroup,Map<String,Set<URI>> matchingExportMaskURIs){  if (null != matchingExportMaskURIs && !matchingExportMaskURIs.isEmpty()) {    Set<String> exportKeysToRemove=new HashSet<String>();    Iterator<Entry<String,Set<URI>>> emITR=matchingExportMaskURIs.entrySet().iterator();    while (emITR.hasNext()) {      Set<URI> matchedExportMask=new HashSet<URI>();      Entry<String,Set<URI>> exprotMaskURI=emITR.next();      Set<URI> uris=exprotMaskURI.getValue();      for (      URI uri : uris) {        List<ExportGroup> exportGroups=ExportUtils.getExportGroupsForMask(uri,_dbClient);        for (        ExportGroup eg : exportGroups) {          if (eg.getId().equals(exportGroup.getId())) {            matchedExportMask.add(uri);            break;          }        }      }      if (!matchedExportMask.isEmpty()) {        uris.clear();        uris.addAll(matchedExportMask);      } else {        exportKeysToRemove.add(exprotMaskURI.getKey());      }    }    matchingExportMaskURIs.keySet().removeAll(exportKeysToRemove);  }}  }
class C{  public static <L extends List<CharSequence>>L splitLines(final IFont pFont,final CharSequence pText,final L pResult,final AutoWrap pAutoWrap,final float pAutoWrapWidth){switch (pAutoWrap) {case LETTERS:    return FontUtils.splitLinesByLetters(pFont,pText,pResult,pAutoWrapWidth);case WORDS:  return FontUtils.splitLinesByWords(pFont,pText,pResult,pAutoWrapWidth);case CJK:return FontUtils.splitLinesByCJK(pFont,pText,pResult,pAutoWrapWidth);case NONE:default :throw new IllegalArgumentException("Unexpected " + AutoWrap.class.getSimpleName() + ": '"+ pAutoWrap+ "'.");}}  }
class C{  public Tradestrategy findTradestrategyByUniqueKeys(ZonedDateTime open,String strategyName,Integer idContract,String portfolioName){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Tradestrategy> query=builder.createQuery(Tradestrategy.class);    Root<Tradestrategy> from=query.from(Tradestrategy.class);    query.select(from);    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != strategyName) {      Join<Tradestrategy,Strategy> strategies=from.join("strategy");      Predicate predicate=builder.equal(strategies.get("name"),strategyName);      predicates.add(predicate);    }    if (null != portfolioName) {      Join<Tradestrategy,Portfolio> portfolio=from.join("portfolio");      Predicate predicate=builder.equal(portfolio.get("name"),portfolioName);      predicates.add(predicate);    }    if (null != open) {      Join<Tradestrategy,Tradingday> tradingday=from.join("tradingday");      Predicate predicate=builder.equal(tradingday.get("open"),open);      predicates.add(predicate);    }    if (null != idContract) {      Join<Tradestrategy,Contract> contract=from.join("contract");      Predicate predicate=builder.equal(contract.get("idContract"),idContract);      predicates.add(predicate);    }    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<Tradestrategy> typedQuery=entityManager.createQuery(query);    List<Tradestrategy> items=typedQuery.getResultList();    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  private void extractField(final String[] array,final int line){  try {    Integer obj=null;    int id=0;    if (JOB_NUM == IRRELEVANT) {      id=jobs.size() + 1;    } else {      obj=new Integer(array[JOB_NUM].trim());      id=obj.intValue();    }    final Long l=new Long(array[SUBMIT_TIME].trim());    final long submitTime=l.intValue();    obj=new Integer(array[REQ_RUN_TIME].trim());    final int reqRunTime=obj.intValue();    obj=new Integer(array[RUN_TIME].trim());    int runTime=obj.intValue();    final int userID=new Integer(array[USER_ID].trim()).intValue();    final int groupID=new Integer(array[GROUP_ID].trim()).intValue();    if (runTime <= 0) {      runTime=1;    }    obj=new Integer(array[REQ_NUM_PROC].trim());    int numProc=obj.intValue();    if (numProc == IRRELEVANT || numProc == 0) {      obj=new Integer(array[NUM_PROC].trim());      numProc=obj.intValue();    }    if (numProc <= 0) {      numProc=1;    }    createJob(id,submitTime,runTime,numProc,reqRunTime,userID,groupID);  } catch (  final Exception e) {  }}  }
class C{  public VNXeCommandJob createLun(String name,String poolId,Long size,boolean isThin,String tieringPolicy){  LunParam lunParam=new LunParam();  lunParam.setIsThinEnabled(isThin);  lunParam.setSize(size);  lunParam.setPool(new VNXeBase(poolId));  FastVPParam fastVP=new FastVPParam();  if (tieringPolicy != null && !tieringPolicy.isEmpty()) {    TieringPolicyEnum tierValue=TieringPolicyEnum.valueOf(tieringPolicy);    if (tierValue != null) {      fastVP.setTieringPolicy(tierValue.getValue());      lunParam.setFastVPParameters(fastVP);    }  }  LunCreateParam createParam=new LunCreateParam();  createParam.setName(name);  createParam.setLunParameters(lunParam);  BlockLunRequests req=new BlockLunRequests(_khClient);  return req.createLun(createParam);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public final synchronized void queueStartEngine(int id,String engine){  killOldEngine(engine);  stopSearch();  searchRequest=SearchRequest.startRequest(id,engine);  handleQueue();}  }
class C{  private void populateSMISAccessProfile(AccessProfile accessProfile,StorageProvider providerInfo){  accessProfile.setSystemId(providerInfo.getId());  accessProfile.setSystemClazz(providerInfo.getClass());  accessProfile.setIpAddress(providerInfo.getIPAddress());  accessProfile.setUserName(providerInfo.getUserName());  accessProfile.setPassword(providerInfo.getPassword());  accessProfile.setSystemType(getSystemType(providerInfo));  accessProfile.setProviderPort(String.valueOf(providerInfo.getPortNumber()));  accessProfile.setInteropNamespace(Constants.INTEROP);  accessProfile.setSslEnable(String.valueOf(providerInfo.getUseSSL()));}  }
class C{  public void testSetLoginConfigReplacing() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "  <login-config>"+ "    <auth-method>DIGEST</auth-method>"+ "  </login-config>"+ "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  WebXmlUtils.setLoginConfig(webXml,"BASIC","Test Realm");  assertTrue(WebXmlUtils.hasLoginConfig(webXml));  assertEquals("BASIC",WebXmlUtils.getLoginConfigAuthMethod(webXml));}  }
class C{  public static void buyPageIntentResponse(PendingIntent pendingIntent,Intent intent){  if (sPurchaseObserver == null) {    if (Consts.DEBUG) {      Log.d(TAG,"UI is not running");    }    return;  }  sPurchaseObserver.startBuyPageActivity(pendingIntent,intent);}  }
class C{  public static byte[] tauAdicWNaf(byte mu,ZTauElement lambda,byte width,BigInteger pow2w,BigInteger tw,ZTauElement[] alpha){  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger norm=norm(mu,lambda);  int log2Norm=norm.bitLength();  int maxLength=log2Norm > 30 ? log2Norm + 4 + width : 34 + width;  byte[] u=new byte[maxLength];  BigInteger pow2wMin1=pow2w.shiftRight(1);  BigInteger r0=lambda.u;  BigInteger r1=lambda.v;  int i=0;  while (!((r0.equals(ECConstants.ZERO)) && (r1.equals(ECConstants.ZERO)))) {    if (r0.testBit(0)) {      BigInteger uUnMod=r0.add(r1.multiply(tw)).mod(pow2w);      byte uLocal;      if (uUnMod.compareTo(pow2wMin1) >= 0) {        uLocal=(byte)uUnMod.subtract(pow2w).intValue();      } else {        uLocal=(byte)uUnMod.intValue();      }      u[i]=uLocal;      boolean s=true;      if (uLocal < 0) {        s=false;        uLocal=(byte)-uLocal;      }      if (s) {        r0=r0.subtract(alpha[uLocal].u);        r1=r1.subtract(alpha[uLocal].v);      } else {        r0=r0.add(alpha[uLocal].u);        r1=r1.add(alpha[uLocal].v);      }    } else {      u[i]=0;    }    BigInteger t=r0;    if (mu == 1) {      r0=r1.add(r0.shiftRight(1));    } else {      r0=r1.subtract(r0.shiftRight(1));    }    r1=t.shiftRight(1).negate();    i++;  }  return u;}  }
class C{  protected void reuseEntry(HashEntry<K,V> entry,int hashIndex,int hashCode,K key,V value){  entry.next=data[hashIndex];  entry.hashCode=hashCode;  entry.key=key;  entry.value=value;}  }
class C{  static TranslatedFrame frameFromCode(final int value){  return INTERNAL_VALUES[value];}  }
class C{  private void validateLocale(){  FacesContext facesContext=getContext();  Locale currentLocale=facesContext.getViewRoot().getLocale();  if (!this.locale.equals(currentLocale.getLanguage())) {    this.locale=currentLocale.getLanguage();    for (    ConfigurationItem item : items.values()) {      applyLocale(item);    }  }}  }
class C{  public void complete(Symbol sym) throws CompletionFailure {  if (!completionEnabled) {    Assert.check((sym.flags() & Flags.COMPOUND) == 0);    sym.completer=this;    return;  }  ClassSymbol c=(ClassSymbol)sym;  ClassType ct=(ClassType)c.type;  Env<AttrContext> env=enter.typeEnvs.get(c);  JCClassDecl tree=(JCClassDecl)env.tree;  boolean wasFirst=isFirst;  isFirst=false;  JavaFileObject prev=log.useSource(env.toplevel.sourcefile);  DiagnosticPosition prevLintPos=deferredLintHandler.setPos(tree.pos());  try {    halfcompleted.append(env);    c.flags_field|=UNATTRIBUTED;    if (c.owner.kind == PCK) {      memberEnter(env.toplevel,env.enclosing(TOPLEVEL));      todo.append(env);    }    if (c.owner.kind == TYP)     c.owner.complete();    Env<AttrContext> baseEnv=baseEnv(tree,env);    if (tree.extending != null)     typeAnnotate(tree.extending,baseEnv,sym,tree.pos());    for (    JCExpression impl : tree.implementing)     typeAnnotate(impl,baseEnv,sym,tree.pos());    annotate.flush();    Type supertype=(tree.extending != null) ? attr.attribBase(tree.extending,baseEnv,true,false,true) : ((tree.mods.flags & Flags.ENUM) != 0) ? attr.attribBase(enumBase(tree.pos,c),baseEnv,true,false,false) : (c.fullname == names.java_lang_Object) ? Type.noType : syms.objectType;    ct.supertype_field=modelMissingTypes(supertype,tree.extending,false);    ListBuffer<Type> interfaces=new ListBuffer<Type>();    ListBuffer<Type> all_interfaces=null;    Set<Type> interfaceSet=new HashSet<Type>();    List<JCExpression> interfaceTrees=tree.implementing;    for (    JCExpression iface : interfaceTrees) {      Type i=attr.attribBase(iface,baseEnv,false,true,true);      if (i.hasTag(CLASS)) {        interfaces.append(i);        if (all_interfaces != null)         all_interfaces.append(i);        chk.checkNotRepeated(iface.pos(),types.erasure(i),interfaceSet);      } else {        if (all_interfaces == null)         all_interfaces=new ListBuffer<Type>().appendList(interfaces);        all_interfaces.append(modelMissingTypes(i,iface,true));      }    }    if ((c.flags_field & ANNOTATION) != 0) {      ct.interfaces_field=List.of(syms.annotationType);      ct.all_interfaces_field=ct.interfaces_field;    } else {      ct.interfaces_field=interfaces.toList();      ct.all_interfaces_field=(all_interfaces == null) ? ct.interfaces_field : all_interfaces.toList();    }    if (c.fullname == names.java_lang_Object) {      if (tree.extending != null) {        chk.checkNonCyclic(tree.extending.pos(),supertype);        ct.supertype_field=Type.noType;      } else       if (tree.implementing.nonEmpty()) {        chk.checkNonCyclic(tree.implementing.head.pos(),ct.interfaces_field.head);        ct.interfaces_field=List.nil();      }    }    attr.attribAnnotationTypes(tree.mods.annotations,baseEnv);    if (hasDeprecatedAnnotation(tree.mods.annotations))     c.flags_field|=DEPRECATED;    annotateLater(tree.mods.annotations,baseEnv,c,tree.pos());    chk.checkNonCyclicDecl(tree);    attr.attribTypeVariables(tree.typarams,baseEnv);    for (    JCTypeParameter tp : tree.typarams)     typeAnnotate(tp,baseEnv,sym,tree.pos());    if ((c.flags() & INTERFACE) == 0 && !TreeInfo.hasConstructors(tree.defs)) {      List<Type> argtypes=List.nil();      List<Type> typarams=List.nil();      List<Type> thrown=List.nil();      long ctorFlags=0;      boolean based=false;      boolean addConstructor=true;      JCNewClass nc=null;      if (c.name.isEmpty()) {        nc=(JCNewClass)env.next.tree;        if (nc.constructor != null) {          addConstructor=nc.constructor.kind != ERR;          Type superConstrType=types.memberType(c.type,nc.constructor);          argtypes=superConstrType.getParameterTypes();          typarams=superConstrType.getTypeArguments();          ctorFlags=nc.constructor.flags() & VARARGS;          if (nc.encl != null) {            argtypes=argtypes.prepend(nc.encl.type);            based=true;          }          thrown=superConstrType.getThrownTypes();        }      }      if (addConstructor) {        MethodSymbol basedConstructor=nc != null ? (MethodSymbol)nc.constructor : null;        JCTree constrDef=DefaultConstructor(make.at(tree.pos),c,basedConstructor,typarams,argtypes,thrown,ctorFlags,based);        tree.defs=tree.defs.prepend(constrDef);      }    }    VarSymbol thisSym=new VarSymbol(FINAL | HASINIT,names._this,c.type,c);    thisSym.pos=Position.FIRSTPOS;    env.info.scope.enter(thisSym);    if ((c.flags_field & INTERFACE) == 0 && ct.supertype_field.hasTag(CLASS)) {      VarSymbol superSym=new VarSymbol(FINAL | HASINIT,names._super,ct.supertype_field,c);      superSym.pos=Position.FIRSTPOS;      env.info.scope.enter(superSym);    }    if (checkClash && c.owner.kind == PCK && c.owner != syms.unnamedPackage && reader.packageExists(c.fullname)) {      log.error(tree.pos,"clash.with.pkg.of.same.name",Kinds.kindName(sym),c);    }    if (c.owner.kind == PCK && (c.flags_field & PUBLIC) == 0 && !env.toplevel.sourcefile.isNameCompatible(c.name.toString(),JavaFileObject.Kind.SOURCE)) {      c.flags_field|=AUXILIARY;    }  } catch (  CompletionFailure ex) {    chk.completionError(tree.pos(),ex);  } finally {    deferredLintHandler.setPos(prevLintPos);    log.useSource(prev);  }  if (wasFirst) {    try {      while (halfcompleted.nonEmpty()) {        Env<AttrContext> toFinish=halfcompleted.next();        finish(toFinish);        if (allowTypeAnnos) {          typeAnnotations.organizeTypeAnnotationsSignatures(toFinish,(JCClassDecl)toFinish.tree);          typeAnnotations.validateTypeAnnotationsSignatures(toFinish,(JCClassDecl)toFinish.tree);        }      }    }  finally {      isFirst=true;    }  }}  }
class C{  private void init(){  ExternalPathMovementReader reader=ExternalPathMovementReader.getInstance(this.traceFile,this.activeFile);  this.paths=reader.getPaths(getHost().getAddress());  this.active=reader.getActive(getHost().getAddress());}  }
class C{  public void startNull(){}  }
class C{  public NondeterministicVacuumEnvironment(){  super();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.451 -0500",hash_original_method="F25A7BAA745FE3E1539A4ACAD2E402AC",hash_generated_method="273F4FF9E160AB67701DDADFDFA75CDD") public WifiLock createWifiLock(String tag){  return new WifiLock(WIFI_MODE_FULL,tag);}  }
class C{  public static TargetDataLine selectAudioLine(Mixer.Info mixer){  for (  AudioFormat format : Arrays.asList(IN_HIGH,IN_LOW)) {    try {      DataLine.Info lineInfo=new DataLine.Info(TargetDataLine.class,format);      if (AudioSystem.getMixer(mixer).isLineSupported(lineInfo)) {        return AudioSystem.getTargetDataLine(format,mixer);      }    } catch (    LineUnavailableException e) {      log.warning(" line for mixer " + mixer + " is not available");      log.info("Available audio mixers: " + getMixers());    }  }  throw new RuntimeException("Cannot obtain audio line for mixer " + mixer);}  }
class C{  public boolean activateShortcut(KeyInputEvent kie){  ShortcutTool newShortcut=getActivableShortcut(kie);  if (newShortcut != null) {    currentShortcut=newShortcut;  }  return newShortcut != null;}  }
class C{  @Override protected Bitmap alloc(int size){  return Bitmap.createBitmap(1,(int)Math.ceil(size / (double)BitmapUtil.RGB_565_BYTES_PER_PIXEL),Bitmap.Config.RGB_565);}  }
class C{  MemberState startAppend(){  appending++;  appendTime=System.nanoTime();  return this;}  }
class C{  public WordsInDocumentByDirectory(String directory){  this(directory,null);}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  public CreateChangeOperation(Refactoring refactoring){  Assert.isNotNull(refactoring);  fRefactoring=refactoring;}  }
class C{  private static void createMongoClientForServer(final Configuration conf) throws ConfigurationRuntimeException, MongoException {  final String host=requireNonNull(conf.get(MongoDBRdfConfiguration.MONGO_INSTANCE),MSG_INTRO + "host name is required");  final int port=requireNonNullInt(conf.get(MongoDBRdfConfiguration.MONGO_INSTANCE_PORT),MSG_INTRO + "Port number is required.");  ServerAddress server=new ServerAddress(host,port);  if (conf.get(MongoDBRdfConfiguration.MONGO_USER) != null) {    final String username=conf.get(MongoDBRdfConfiguration.MONGO_USER);    final String dbName=requireNonNull(conf.get(MongoDBRdfConfiguration.MONGO_DB_NAME),MSG_INTRO + MongoDBRdfConfiguration.MONGO_DB_NAME + " is null but required configuration if "+ MongoDBRdfConfiguration.MONGO_USER+ " is configured.");    final char[] pswd=requireNonNull(conf.get(MongoDBRdfConfiguration.MONGO_USER_PASSWORD),MSG_INTRO + MongoDBRdfConfiguration.MONGO_USER_PASSWORD + " is null but required configuration if "+ MongoDBRdfConfiguration.MONGO_USER+ " is configured.").toCharArray();    final MongoCredential cred=MongoCredential.createCredential(username,dbName,pswd);    mongoClient=new MongoClient(server,Arrays.asList(cred));  } else {    mongoClient=new MongoClient(server);  }}  }
class C{  public void start(){}  }
class C{  public static ConstantNode forDouble(double d,StructuredGraph graph){  return unique(graph,createPrimitive(JavaConstant.forDouble(d)));}  }
class C{  public void testCertPathValidator01(){  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  String propName="certpathvalidator.type";  String defCPV=Security.getProperty(propName);  String dt=CertPathValidator.getDefaultType();  String resType=defCPV;  if (resType == null) {    resType=defaultType;  }  assertNotNull("Default type have not be null",dt);  assertEquals("Incorrect default type",dt,resType);  if (defCPV == null) {    Security.setProperty(propName,defaultType);    dt=CertPathValidator.getDefaultType();    resType=Security.getProperty(propName);    assertNotNull("Incorrect default type",resType);    assertNotNull("Default type have not be null",dt);    assertEquals("Incorrect default type",dt,resType);  }}  }
class C{  public void removeConnection(int registryID,BlockCoords coords){}  }
class C{  @Override public LocalDate date(Era era,int yearOfEra,int month,int dayOfMonth){  return date(prolepticYear(era,yearOfEra),month,dayOfMonth);}  }
class C{  public static int sp2px(Context context,int px){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,px,context.getResources().getDisplayMetrics());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.824 -0500",hash_original_method="19BAC4EB9F0AC75365ACA9BCF61634EC",hash_generated_method="5A47858CE58A0A9E5B3CA3FC60A78C82") private static HttpHost[] toChain(HttpHost[] proxies){  if ((proxies == null) || (proxies.length < 1))   return null;  for (  HttpHost proxy : proxies) {    if (proxy == null)     throw new IllegalArgumentException("Proxy chain may not contain null elements.");  }  HttpHost[] result=new HttpHost[proxies.length];  System.arraycopy(proxies,0,result,0,proxies.length);  return result;}  }
class C{  private static boolean isInExpression(PsiElement position){  final PsiElement actual=position.getParent();  final PsiElement parent=actual.getParent();  return parent instanceof GrArgumentList || parent instanceof GrBinaryExpression;}  }
class C{  private void handleActionPrevious(){  startServiceIntent(PlaybackService.COMMAND_PREVIOUS);}  }
class C{  protected static void closeAll(){  SETTINGS.clear();}  }
class C{  public static HashMap<CellIndex,Double> readRMatrixFromFS(String filePath){  HashMap<CellIndex,Double> expectedValues=new HashMap<CellIndex,Double>();  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(filePath));    String line=reader.readLine();    int matrixType=-1;    if (line.endsWith(" general"))     matrixType=1;    if (line.endsWith(" symmetric"))     matrixType=2;    if (matrixType == -1)     throw new RuntimeException("unknown matrix type while reading R matrix: ." + line);    line=reader.readLine();    while ((line=reader.readLine()) != null) {      StringTokenizer st=new StringTokenizer(line," ");      int i=Integer.parseInt(st.nextToken());      int j=Integer.parseInt(st.nextToken());      if (st.hasMoreTokens()) {        double v=Double.parseDouble(st.nextToken());        if (v == 0.0)         continue;        expectedValues.put(new CellIndex(i,j),v);        if (matrixType == 2)         expectedValues.put(new CellIndex(j,i),v);      } else       expectedValues.put(new CellIndex(i,j),1.0);    }  } catch (  IOException e) {    assertTrue("could not read from file " + filePath,false);  } finally {    IOUtilFunctions.closeSilently(reader);  }  return expectedValues;}  }
class C{  @SuppressWarnings("rawtypes") public static void assertNoExceptionsOnCollectionIteration(final Collection objs) throws Exception {  for (  final Object obj : objs) {    assertNoExceptionsOnGetters(obj);  }}  }
class C{  public void sort(Comparator c){  Arrays.sort(objs,0,numObjs,c);}  }
class C{  public void add(Block block){  add(block,null);}  }
class C{  public Builder proxyPort(int proxyPort){  this._proxyPort=proxyPort;  return this;}  }
class C{  private void removeEndpoint(Endpoint endpoint,boolean crashed){  endpoint.close();  boolean removedEndpoint=false;synchronized (this) {    Map<ServerLocation,Endpoint> endpointMapTemp=new HashMap<ServerLocation,Endpoint>(endpointMap);    endpoint=endpointMapTemp.remove(endpoint.getLocation());    if (endpoint != null) {      endpointMap=Collections.unmodifiableMap(endpointMapTemp);      removedEndpoint=true;    }    poolStats.setServerCount(endpointMap.size());  }  if (removedEndpoint) {    PoolImpl pool=(PoolImpl)PoolManager.find(this.poolName);    if (pool != null && pool.getMultiuserAuthentication()) {      int size=0;      ArrayList<ProxyCache> proxyCaches=pool.getProxyCacheList();synchronized (proxyCaches) {        for (        ProxyCache proxyCache : proxyCaches) {          try {            Long userId=proxyCache.getUserAttributes().getServerToId().remove(endpoint.getLocation());            if (userId != null) {              ++size;            }          } catch (          CacheClosedException cce) {          }        }        if (logger.isDebugEnabled()) {          logger.debug("EndpointManagerImpl.removeEndpoint() Removed server {} from {} user's ProxyCache",endpoint.getLocation(),size);        }      }      UserAttributes ua=UserAttributes.userAttributes.get();      if (ua != null) {        Long userId=ua.getServerToId().remove(endpoint.getLocation());        if (userId != null && logger.isDebugEnabled()) {          logger.debug("EndpointManagerImpl.removeEndpoint() Removed server {} from thread local variable",endpoint.getLocation());        }      }    } else     if (pool != null && !pool.getMultiuserAuthentication()) {      endpoint.getLocation().setUserId(-1);    }    if (crashed) {      listener.endpointCrashed(endpoint);    } else {      listener.endpointNoLongerInUse(endpoint);    }  }}  }
class C{  public void testPathExpressionNextMatchCumulativeRecursive(){  PathExpression pathExpression=createPathExpression(true,true,true);  GraphModel graph=new GraphModel();  GraphNode[] nodes=fillGraphModel(graph);  Collection<GraphNode> output=pathExpression.nextMatch(graph,buildSingleSet(nodes[0]));  assertEquals(6,output.size());  assertGraphContainsElement(output,nodes,1);  assertGraphContainsElement(output,nodes,2);  assertGraphContainsElement(output,nodes,3);  assertGraphContainsElement(output,nodes,4);  assertGraphContainsElement(output,nodes,5);  assertGraphContainsElement(output,nodes,6);}  }
class C{  @Override public boolean supportsUnion(){  debugCodeCall("supportsUnion");  return true;}  }
class C{  public String reason(){  return reason;}  }
class C{  public boolean isCached(){  return true;}  }
class C{  public Trie optimize(Trie orig){  List<CharSequence> cmds=orig.cmds;  List<Row> rows=new ArrayList<>();  List<Row> orows=orig.rows;  int remap[]=new int[orows.size()];  Arrays.fill(remap,-1);  rows=removeGaps(orig.root,rows,new ArrayList<Row>(),remap);  return new Trie(orig.forward,remap[orig.root],cmds,rows);}  }
class C{  private void sendSnapshot(JSONObject message){  if (mEditorConnection == null || !mEditorConnection.isValid()) {    return;  }  final long startSnapshot=System.currentTimeMillis();  try {    final JSONObject payload=message.getJSONObject("payload");    if (payload.has("config")) {      mSnapshot=mProtocol.readSnapshotConfig(payload);    }    if (null == mSnapshot) {      Log.w(LOGTAG,"Snapshot should be initialize at first callsing.");      return;    }    if (payload.has("last_image_hash")) {      final String lastImageHash=payload.getString("last_image_hash");      mSnapshot.updateLastImageHashArray(lastImageHash);    }  } catch (  final JSONException e) {    Log.e(LOGTAG,"Payload with snapshot config required with snapshot request",e);    return;  }catch (  final EditProtocol.BadInstructionsException e) {    Log.e(LOGTAG,"VTrack server sent malformed message with snapshot request",e);    return;  }  final ByteArrayOutputStream out=new ByteArrayOutputStream();  final OutputStreamWriter writer=new OutputStreamWriter(out);  try {    writer.write("{");    writer.write("\"type\": \"snapshot_response\",");    if (mUseGzip) {      final ByteArrayOutputStream payload_out=new ByteArrayOutputStream();      final OutputStreamWriter payload_writer=new OutputStreamWriter(payload_out);      payload_writer.write("{\"activities\":");      payload_writer.flush();      mSnapshot.snapshots(mEditState,payload_out);      final long snapshotTime=System.currentTimeMillis() - startSnapshot;      payload_writer.write(",\"snapshot_time_millis\": ");      payload_writer.write(Long.toString(snapshotTime));      payload_writer.write("}");      payload_writer.flush();      payload_out.close();      byte[] payloadData=payload_out.toString().getBytes();      ByteArrayOutputStream os=new ByteArrayOutputStream(payloadData.length);      GZIPOutputStream gos=new GZIPOutputStream(os);      gos.write(payloadData);      gos.close();      byte[] compressed=os.toByteArray();      os.close();      writer.write("\"gzip_payload\": \"" + new String(Base64Coder.encode(compressed)) + "\"");    } else {      writer.write("\"payload\": {");{        writer.write("\"activities\":");        writer.flush();        mSnapshot.snapshots(mEditState,out);      }      final long snapshotTime=System.currentTimeMillis() - startSnapshot;      writer.write(",\"snapshot_time_millis\": ");      writer.write(Long.toString(snapshotTime));      writer.write("}");    }    writer.write("}");    writer.flush();  } catch (  final IOException e) {    Log.e(LOGTAG,"Can't write snapshot request to server",e);  } finally {    try {      writer.close();    } catch (    final IOException e) {      Log.e(LOGTAG,"Can't close writer.",e);    }  }  if (mEditorConnection != null && mEditorConnection.isValid()) {    mEditorConnection.sendMessage(out.toString());  }}  }
class C{  public void addSubclass(ClassType type){  addSubclassNoBidirectionalUpdate(type);  type.addSuperClassNoBidirectionalUpdate(this);}  }
class C{  public boolean isConstructorVisible(NewExpression context,TypeRef receiverType,TMethod ctorMethod){  return isVisible(context,receiverType,ctorMethod,false).visibility;}  }
class C{  public void update(double price){  if (open == 0)   open=price;  this.latest=price;}  }
class C{  @Override public void write(byte[] buffer) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  protected void adjustQueryExecution(QueryExecution qexec){}  }
class C{  public static void startup(){  try {    final String cmdPath=IdeaHelper.getResourcePath(WindowsStartup.class.getResource("/"),CMD_NAME,WIN_DIR);    final File cmdFile=new File(cmdPath);    if (cmdFile.exists() && doesKeyNeedUpdated(cmdFile)) {      final File regeditFile=createRegeditFile(cmdFile);      launchElevatedCreation(regeditFile.getPath());      regeditFile.delete();    }  } catch (  IOException e) {    logger.warn("An IOException was encountered while creating/writing to the Regedit file: {}",e.getMessage());  }catch (  Win32Exception e) {    logger.warn("A Win32Exception was encountered while trying to get IntelliJ's registry key: {}",e.getMessage());  }catch (  Exception e) {    logger.warn("An exception was encountered while trying to create vsoi registry key: {}",e.getMessage());  }}  }
class C{  public void moveToNext(){  if (VM.VerifyAssertions)   VM._assert(this.hasMore());  this.moreElemnt=(maps[curidx] & NEXT_BIT) != 0;  this.curidx+=2;  if (!hasMoreElements() && hasMoreMethodId()) {    moveToNextMethodId();  }}  }
class C{  public void updateStats(CqEvent cqEvent){  if (cqEvent.getQueryOperation() == null)   return;  this.incNumEvents();  if (cqEvent.getQueryOperation().isCreate()) {    this.incNumInserts();  }  if (cqEvent.getQueryOperation().isUpdate()) {    this.incNumUpdates();  }  if (cqEvent.getQueryOperation().isDestroy()) {    this.incNumDeletes();  }}  }
class C{  public BlockwiseStatus(int contentFormat){  this.contentFormat=contentFormat;}  }
class C{  public void reset(){  this.fBuffer.setLength(0);}  }
class C{  protected JSONNode add(String name,Object value,NodeType type){  JSONNode child;  if (isPrimitive()) {    return null;  }  child=new JSONNode(name,value,type);  add(child);  return child;}  }
class C{  private void checkWritePermissions(String tableName){  if ((CMDatabaseHelper.CMTableNames.TABLE_SECURE.equals(tableName) || CMDatabaseHelper.CMTableNames.TABLE_GLOBAL.equals(tableName)) && getContext().checkCallingOrSelfPermission(cyanogenmod.platform.Manifest.permission.WRITE_SECURE_SETTINGS) != PackageManager.PERMISSION_GRANTED) {    throw new SecurityException(String.format("Permission denial: writing to cm secure settings requires %1$s",cyanogenmod.platform.Manifest.permission.WRITE_SECURE_SETTINGS));  }}  }
class C{  public ITypeHierarchy loadTypeHierachy(InputStream input,WorkingCopyOwner owner,IProgressMonitor monitor) throws JavaModelException {  throw new UnsupportedOperationException();}  }
class C{  protected int lengthOfByteStream(AbstractMRMessage m){  return m.getNumDataElements();}  }
class C{  public EigenvectorCentrality(Hypergraph<V,E> graph,Function<E,? extends Number> edge_weights){  super(graph,edge_weights,0);  acceptDisconnectedGraph(false);}  }
class C{  public Strategy findStrategyByName(String name) throws PersistentModelException {  return m_strategyHome.findByName(name);}  }
class C{  public static boolean isSynchronized(int flags){  return (flags & SYNCHRONIZED) != 0;}  }
class C{  public boolean visitVariableOrParamDecl(ElemVariable elem){  return true;}  }
class C{  public void jumpahead(int count){  if (count < 0) {    throw new IllegalArgumentException();  }  if (buf != null) {    bufPos+=count;    if (bufPos > buf.length) {      throw new IllegalArgumentException();    }    if (bufPos == buf.length) {      buf=null;    }  } else {    int i=pos.getIndex() + count;    pos.setIndex(i);    if (i > text.length()) {      throw new IllegalArgumentException();    }  }}  }
class C{  private void structuralEmInitialization(List partition){  this.observableNames=new Hashtable();  this.latentNames=new Hashtable();  this.numObserved=0;  this.numLatent=0;  this.latentNodes=new ArrayList();  this.measuredNodes=new ArrayList();  this.basicGraph=new EdgeListGraph();  for (int p=0; p < partition.size(); p++) {    int next[]=(int[])partition.get(p);    Node newLatent=new GraphNode("_L" + p);    newLatent.setNodeType(NodeType.LATENT);    basicGraph.addNode(newLatent);    Iterator it=latentNodes.iterator();    while (it.hasNext()) {      Node previousLatent=(Node)it.next();      basicGraph.addDirectedEdge(previousLatent,newLatent);    }    latentNodes.add(newLatent);    latentNames.put(newLatent.toString(),numLatent);    numLatent++;    for (int i=0; i < next.length; i++) {      Node newNode=new GraphNode(tetradTest.getVarNames()[next[i]]);      basicGraph.addNode(newNode);      basicGraph.addDirectedEdge(newLatent,newNode);      observableNames.put(newNode.toString(),numObserved);      measuredNodes.add(newNode);      numObserved++;    }  }  if (this.numLatent + this.numObserved < 1) {    throw new IllegalArgumentException("Input clusters must contain at least one variable.");  }  this.clusterId=new int[numObserved];  int count=0;  for (int p=0; p < partition.size(); p++) {    int next[]=(int[])partition.get(p);    for (int i=0; i < next.length; i++) {      this.clusterId[count++]=p;    }  }  this.purePartitionGraph=new SemGraph(basicGraph);  if (((ContinuousTetradTest)this.tetradTest).getTestType() == TestType.NONE) {    return;  }  this.correlatedErrors=new boolean[numObserved][numObserved];  this.latentParent=new boolean[numObserved][numLatent];  this.observedParent=new boolean[numObserved][numObserved];  this.Cyy=new double[numObserved][numObserved];  this.bestCyy=new double[numObserved][numObserved];  this.bestCyz=new double[numObserved][numLatent];  this.bestCzz=new double[numLatent][numLatent];  this.covarianceMatrix=((ContinuousTetradTest)tetradTest).getCovMatrix();  String varNames[]=covarianceMatrix.getVariableNames().toArray(new String[0]);  double cov[][]=covarianceMatrix.getMatrix().toArray();  for (int i=0; i < cov.length; i++) {    for (int j=0; j < cov.length; j++) {      if (observableNames.get(varNames[i]) != null && observableNames.get(varNames[j]) != null) {        Cyy[((Integer)observableNames.get(varNames[i]))][((Integer)observableNames.get(varNames[j]))]=cov[i][j];      }    }  }  this.parents=new int[this.numObserved][];  this.spouses=new int[this.numObserved][];  this.nSpouses=new int[this.numObserved];  this.parentsLat=new int[this.numLatent][];  this.parentsL=new boolean[this.numObserved][];  this.parentsCov=new double[this.numObserved][][];  this.parentsChildCov=new double[this.numObserved][];  this.parentsLatCov=new double[this.numLatent][][];  this.parentsChildLatCov=new double[this.numLatent][];  this.pseudoParentsCov=new double[this.numObserved][][];  this.pseudoParentsChildCov=new double[this.numObserved][];  this.covErrors=new double[this.numObserved][this.numObserved];  this.oldCovErrors=new double[this.numObserved][this.numObserved];  this.sampleCovErrors=new double[this.numObserved][this.numObserved];  this.varErrorLatent=new double[this.numLatent];  this.omega=new double[this.numLatent + this.numObserved - 1][this.numLatent + this.numObserved - 1];  this.omegaI=new double[this.numLatent + this.numObserved - 1];  this.selectedInverseOmega=new double[this.numObserved][][];  this.auxInverseOmega=new double[this.numObserved][][];  this.parentsResidualsCovar=new double[this.numObserved][][];  this.iResidualsCovar=new double[this.numObserved + this.numLatent - 1];  this.betas=new double[this.numObserved][this.numObserved + this.numLatent];  this.oldBetas=new double[this.numObserved][this.numObserved + this.numLatent];  this.betasLat=new double[this.numLatent][this.numLatent];}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeelementnodeattributes.class,args);}  }
class C{  public DateHistogramBuilder format(String format){  this.format=format;  return this;}  }
class C{  @Override public int size(){  return size;}  }
class C{  public void advance() throws ParseException {  fetch(true);  prev=current;  current=current.next;}  }
class C{  public boolean isSetDomainId(){  return EncodingUtils.testBit(__isset_bitfield,__DOMAINID_ISSET_ID);}  }
class C{  public PowerContainer(final int id,final int userId,final double mips,final int pesNumber,final int ram,final long bw,final long size,final String vmm,final ContainerCloudletScheduler cloudletScheduler,final double schedulingInterval){  super(id,userId,mips,pesNumber,ram,bw,size,vmm,cloudletScheduler,schedulingInterval);}  }
class C{  public synchronized SerializerRegistry register(Class<?> type,int id,TypeSerializerFactory factory){  if (type == null)   throw new NullPointerException("type cannot be null");  if (types.containsKey(id) && types.get(id) != type) {    throw new RegistrationException("serializable type ID already registered: " + id);  }  if (ids.containsKey(type)) {    if (ids.get(type) != id) {      throw new RegistrationException("type registered with a different ID: " + type);    }    return this;  }  factories.put(type,factory);  types.put(id,type);  ids.put(type,id);  return this;}  }
class C{  private void importLoyaltyCard(SQLiteDatabase database,DBHelper helper,CSVRecord record) throws IOException, FormatException {  int id=extractInt(DBHelper.LoyaltyCardDbIds.ID,record);  String store=extractString(DBHelper.LoyaltyCardDbIds.STORE,record,"");  if (store.isEmpty()) {    throw new FormatException("No store listed, but is required");  }  String note=extractString(DBHelper.LoyaltyCardDbIds.NOTE,record,"");  String cardId=extractString(DBHelper.LoyaltyCardDbIds.CARD_ID,record,"");  if (cardId.isEmpty()) {    throw new FormatException("No card ID listed, but is required");  }  String barcodeType=extractString(DBHelper.LoyaltyCardDbIds.BARCODE_TYPE,record,"");  if (barcodeType.isEmpty()) {    throw new FormatException("No barcode type listed, but is required");  }  helper.insertLoyaltyCard(database,id,store,note,cardId,barcodeType);}  }
class C{  public void addFacet(String facetName,TreeStructure treeStruct){  Util.notNull("facetName",facetName);  Util.notNull("treeStruct",treeStruct);  if (facets == null) {    facets=new HashMap<String,TreeStructure>();  }  facets.put(facetName,treeStruct);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.AUTOUNIQUE_ATTRIBUTE___AUTOUNIQUE_1:    return isAutounique_1();case UmplePackage.AUTOUNIQUE_ATTRIBUTE___NAME_1:  return getName_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @SuppressWarnings("unchecked") public V put(K key,V value){  Segment<K,V> s;  if (value == null)   throw new NullPointerException();  int hash=hash(key.hashCode());  int j=(hash >>> segmentShift) & segmentMask;  if ((s=(Segment<K,V>)UNSAFE.getObject(segments,(j << SSHIFT) + SBASE)) == null)   s=ensureSegment(j);  return s.put(key,hash,value,false);}  }
class C{  WebSessionV2(final String id,final @Nullable HttpSession ses,final boolean isNew,final ServletContext ctx,@Nullable WebSessionEntity entity,final Marshaller marshaller){  assert id != null;  assert marshaller != null;  assert ctx != null;  assert ses != null || entity != null;  this.marshaller=marshaller;  this.ctx=ctx;  this.isNew=isNew;  this.genuineSes=ses;  accessTime=System.currentTimeMillis();  if (entity == null) {    entity=new WebSessionEntity(id,ses.getCreationTime(),accessTime,ses.getMaxInactiveInterval());  }  this.entity=entity;  maxInactiveInterval=entity.maxInactiveInterval();  if (ses != null) {    final Enumeration<String> names=ses.getAttributeNames();    while (names.hasMoreElements()) {      final String name=names.nextElement();      attributes().put(name,ses.getAttribute(name));    }  }}  }
class C{  public DoubleVector unpivoting(IntVector index,int length){  if (index.size() > length) {    throw new IllegalArgumentException("index.size() > length ");  }  DoubleVector u=new DoubleVector(length);  for (int i=0; i < index.size(); i++) {    u.V[index.V[i]]=V[i];  }  return u;}  }
class C{  public static void closeSilently(ResultSet rs){  if (rs != null) {    try {      rs.close();    } catch (    SQLException e) {    }  }}  }
class C{  public void addTab(String title,Component component){  int componentIndex=this.indexOfComponent(component);  if (componentIndex == -1) {    super.addTab(title,this.xIcon,component);  }  super.setSelectedComponent(component);  component.addKeyListener(this.keyListener);}  }
class C{  private boolean moveAFile(Directory tmpIdxDir,Directory indexDir,String fname,List<String> copiedfiles){  LOG.debug("Moving file: {}",fname);  boolean success=false;  try {    if (slowFileExists(indexDir,fname)) {      LOG.info("Skipping move file - it already exists:" + fname);      return true;    }  } catch (  IOException e) {    SolrException.log(LOG,"could not check if a file exists",e);    return false;  }  try {    solrCore.getDirectoryFactory().move(tmpIdxDir,indexDir,fname,DirectoryFactory.IOCONTEXT_NO_CACHE);    success=true;  } catch (  IOException e) {    SolrException.log(LOG,"Could not move file",e);  }  return success;}  }
class C{  public static <T>void updateMappingToImmutableSet(Map<T,Set<AnnotationMirror>> map,T key,Set<AnnotationMirror> newQual){  Set<AnnotationMirror> result=AnnotationUtils.createAnnotationSet();  if (!map.containsKey(key)) {    result.addAll(newQual);  } else {    result.addAll(map.get(key));    result.addAll(newQual);  }  map.put(key,Collections.unmodifiableSet(result));}  }
class C{  public void nodeFailed(UUID nodeId){  lock.writeLock().lock();  try {    boolean nodeDeleted=nodes.containsKey(nodeId);    GridClientNode deleted=null;    if (nodeDeleted) {      Map<UUID,GridClientNodeImpl> updatedTop=new HashMap<>(nodes);      deleted=updatedTop.remove(nodeId);      nodes=updatedTop;    }    if (nodeDeleted)     notifyEvents(Collections.singletonList(new TopologyEvent(false,deleted)));  }  finally {    lock.writeLock().unlock();  }}  }
class C{  char charAt(int i){  return text.charAt(i);}  }
class C{  public static void addSeed(Item item,Block block){  seeds.put(item,block);}  }
class C{  private void include(String parent,int line,String name,boolean quoted) throws IOException, LexerException {  VirtualFile pdir=null;  if (quoted) {    if (!inIncludeNext && parent != null) {      VirtualFile pfile=parent == null ? null : filesystem.getFile(parent);      pdir=pfile == null ? null : pfile.getParentFile();      VirtualFile ifile=pdir.getChildFile(name);      if (include(ifile))       return;    }    if (include(quoteincludepath,name))     return;  } else {    String frameworkName=null;    int i=name.indexOf("/");    String subName=null;    if (i > 0) {      frameworkName=name.substring(0,i);      subName=name.substring(i + 1);    }    if (subName != null) {      String frameworkDirName=frameworkName + ".framework";      for (      String path : frameworkspath) {        File frameworkDir=new File(path,frameworkDirName);        if (frameworkDir.exists() && frameworkDir.isDirectory()) {          if (getFeature(Feature.DEBUG))           System.err.println("Found framework: " + frameworkDir);          File headers=new File(frameworkDir,"Headers");          if (!headers.exists())           headers=new File(frameworkDir,"PrivateHeaders");          if (headers.exists()) {            pdir=filesystem.getFile(headers.toString());            VirtualFile ifile=pdir.getChildFile(subName);            if (include(ifile))             return;            break;          }        }      }    }  }  if (include(sysincludepath,name))   return;  StringBuilder buf=new StringBuilder();  buf.append("File not found: ").append(name);  buf.append(" in");  if (quoted) {    buf.append(" .").append('(').append(pdir).append(')');    for (    String dir : quoteincludepath)     buf.append(" ").append(dir);  }  for (  String dir : sysincludepath)   buf.append(" ").append(dir);  error(line,0,buf.toString());}  }
class C{  protected void addNewDocument(String name,int parentId,String fileExt,int sortOrder,String pathDocumentFile,String pathDocAnnFile) throws Exception {  FolderTokenDocument doc;  int id;  id=super.generateNextNewNodeId();  doc=new FolderTokenDocument(id,name,parentId,id,fileExt,sortOrder,pathDocumentFile,pathDocAnnFile,FolderEditFlag.NEW);  super.add(doc);}  }
class C{  public static void clear(){  _clearCount++;  _stateCount=0;  _state="";  _featureMap.clear();}  }
class C{  public Builder interval(Integer interval){  this.interval=interval;  return this;}  }
class C{  public void configureIndicator(int indicatorWidth,int indicatorHeight,int indicatorMargin){  configureIndicator(indicatorWidth,indicatorHeight,indicatorMargin,R.animator.scale_with_alpha,0,R.drawable.white_radius,R.drawable.white_radius);}  }
class C{  @Override public void propertyChange(java.beans.PropertyChangeEvent e){  if (Control.SHOW_PROPERTY) {    log.debug("Property change: ({}) old: ({}) new: ({})",e.getPropertyName(),e.getOldValue(),e.getNewValue());  }  if (e.getPropertyName().equals(CarTypes.CARTYPES_NAME_CHANGED_PROPERTY)) {    replaceType((String)e.getOldValue(),(String)e.getNewValue());  }  if (e.getPropertyName().equals(CarRoads.CARROADS_NAME_CHANGED_PROPERTY)) {    replaceRoad((String)e.getOldValue(),(String)e.getNewValue());  }}  }
class C{  @SuppressWarnings("deprecation") public void testUPDATEWithoutChanges() throws Exception {  OptimizeUpdatesFilter filter=new OptimizeUpdatesFilter();  OneRowChange oneRowChange=generateRowChange("foo","bar",RowChangeData.ActionType.UPDATE);  oneRowChange.setColumnSpec(generateSpec(oneRowChange));  oneRowChange.setColumnValues(generateValues(oneRowChange,333,"CONST","const"));  oneRowChange.setKeySpec(generateSpec(oneRowChange));  oneRowChange.setKeyValues(generateValues(oneRowChange,333,"CONST","const"));  ReplDBMSEvent event=generateReplDBMSEvent(oneRowChange);  filter.filter(event);  RowChangeData rdata=(RowChangeData)event.getDBMSEvent().getData().get(0);  OneRowChange orc=rdata.getRowChanges().get(0);  Assert.assertEquals("All column specs are in place",3,orc.getColumnSpec().size());  Assert.assertEquals("All column values are in place",3,orc.getColumnValues().get(0).size());  Assert.assertEquals("All key specs are in place",3,orc.getKeySpec().size());  Assert.assertEquals("All key values are in place",3,orc.getKeyValues().get(0).size());}  }
class C{  public E remove(int index){  return innerItems.remove(index);}  }
class C{  public void testMultipleResourceParameters(){  doTest();}  }
class C{  public void testMergeInBothWithNodeMergeStrategyWithMixedContent() throws Exception {  WebXml srcWebXml=getWebXml("param","value1");  WebXml mergeWebXml=getWebXml("param","value2");  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  Element format=getContextParamElement("$left:param-name","111 $left:param-value 222 $right:param-value 333");  NodeMergeStrategy strategy=new NodeMergeStrategy(null,format);  merger.setMergeStrategy(WebXmlType.CONTEXT_PARAM,strategy);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasContextParam(srcWebXml,"param"));  assertEquals("111 value1 222 value2 333",getContextParamValue(WebXmlUtils.getContextParam(srcWebXml,"param")));}  }
class C{  void emitInvoke(Name name){  assert (!isLinkerMethodInvoke(name));  if (true) {    MethodHandle target=name.function.resolvedHandle;    assert (target != null) : name.exprString();    mv.visitLdcInsn(constantPlaceholder(target));    emitReferenceCast(MethodHandle.class,target);  } else {    emitAloadInsn(0);    emitReferenceCast(MethodHandle.class,null);    mv.visitFieldInsn(Opcodes.GETFIELD,MH,"form",LF_SIG);    mv.visitFieldInsn(Opcodes.GETFIELD,LF,"names",LFN_SIG);  }  emitPushArguments(name);  MethodType type=name.function.methodType();  mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,MH,"invokeBasic",type.basicType().toMethodDescriptorString(),false);}  }
class C{  public SCirc(short x1,short y1,short width,short height){  super(GraphicType.GT_Circle,RenderType.RT_XY,LineType.LT_Unknown,DeclutterType.DC_None);  ll1_=new LLPoint(0f,0f);  major_=0;  minor_=0;  p1_=new XYPoint(x1,y1);  width_=width;  height_=height;}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endPrefixMapping: " + prefix);  if (m_contentHandler != null) {    m_contentHandler.endPrefixMapping(prefix);  }}  }
class C{  public void bindWithPermutation(RealVector other){  RealVector result=createZeroVector(dimension);  result.superpose(other,1,PermutationUtils.getShiftPermutation(VectorType.REAL,dimension,1));  result.superpose(this,1,PermutationUtils.getShiftPermutation(VectorType.REAL,dimension,-1));  this.coordinates=result.coordinates;}  }
class C{  public boolean isSleepingAllowed(){  return body.isSleepingAllowed();}  }
class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  super.declareExtensions(extProfile);}  }
class C{  public boolean requires(MultiLabelClassifier classifier,Instances dataset){  boolean result;  String cls;  String rel;  result=true;  cls=Utils.toCommandLine(classifier);  rel=dataset.relationName();  for (  EvaluationStatistics stat : m_Statistics) {    if (stat.getCommandLine().equals(cls) && stat.getRelation().equals(rel)) {      result=false;      break;    }  }  return result;}  }
class C{  private void recalculateSources(){  AudioManager am=InstanceManager.getDefault(jmri.AudioManager.class);  for (  String sysName : am.getSystemNameList()) {    Audio audio=am.getBySystemName(sysName);    if (audio.getSubType() == Audio.SOURCE && audio instanceof JavaSoundAudioSource) {      ((JavaSoundAudioSource)audio).calculateGain();      ((JavaSoundAudioSource)audio).calculatePan();      if (log.isDebugEnabled()) {        log.debug("Recalculating gain & pan for JavaSoundAudioSource " + audio.getSystemName());      }    }  }}  }
class C{  @SuppressWarnings("unchecked") @OnMessage(AutumnMessage.SKINS_LOADED) public boolean injectFields(final InterfaceService interfaceService){  for (  final Entry<Pair<String,String>,Array<Pair<Field,Object>>> entry : fieldsToInject) {    final Skin skin=interfaceService.getParser().getData().getSkin(entry.key.getSecond());    final String assetId=entry.key.getFirst();    if (skin == null) {      throw new ContextInitiationException("Unable to inject asset: " + assetId + ". Unknown skin ID: "+ entry.key.getSecond());    }    for (    final Pair<Field,Object> injection : entry.value) {      try {        Reflection.setFieldValue(injection.getFirst(),injection.getSecond(),skin.get(assetId,injection.getFirst().getType()));      } catch (      final ReflectionException exception) {        throw new GdxRuntimeException("Unable to inject skin asset: " + assetId + " from skin: "+ skin+ " to field: "+ injection.getFirst()+ " of component: "+ injection.getSecond(),exception);      }    }  }  fieldsToInject.clear();  return OnMessage.REMOVE;}  }
class C{  public Map<String,Request> pathToRequest(){  return pathToRequest;}  }
class C{  public EmbeddedAccessor(){  super("<embedded>");}  }
class C{  public boolean supportsCatalogsInProcedureCalls() throws SQLException {  return false;}  }
class C{  public T caseEnumLiteral(EnumLiteral object){  return null;}  }
class C{  public Enumeration<E> elements(){  return delegate.elements();}  }
class C{  public static void sort(char[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public void put(String key,byte[] value){  mValues.put(key,value);}  }
class C{  public static void clearStaticData(){synchronized (serverVersions) {    serverVersions.clear();  }}  }
class C{  public static void main(String[] args){  TestThrowsTag tester=new TestThrowsTag();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public static boolean isDefaultResolveProtocols(){  return DEFAULT_RESOLVE_PROTOCOLS;}  }
class C{  private void createTestData() throws Exception {  supplier=Organizations.createOrganization(mgr,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  PlatformUser user=new PlatformUser();  user.setCreationDate(new Date(1L));  user.setFailedLoginCounter(100);  user.setLocale("EN");  user.setStatus(UserAccountStatus.ACTIVE);  user.setUserId(USER_KEY_EXISTING);  user.setOrganization(supplier);  mgr.persist(user);  long key=user.getKey();  user.setUserId(String.valueOf(key));  container.login(String.valueOf(key),ROLE_TECHNOLOGY_MANAGER);  TechnicalProduct technicalProduct=TechnicalProducts.createTechnicalProduct(mgr,supplier,"testTechProd",false,ServiceAccessType.LOGIN);  technicalProductId=technicalProduct.getTechnicalProductId();  Product product=Products.createProduct(supplier,technicalProduct,true,"PRODUCT_1",null,mgr);  productId=product.getProductId();  Organization customer=Organizations.createCustomer(mgr,supplier);  customerId=customer.getOrganizationId();  Subscription subscription=Subscriptions.createSubscription(mgr,customerId,productId,"SUBSCRIPTION_1",supplier);  SUBSCRIPTION_KEY=subscription.getKey();  instanceId=subscription.getProductInstanceId();  List<TechnicalProduct> list=new ArrayList<>();  list.add(technicalProduct);  supplier.setTechnicalProducts(list);  Event event=new Event();  event.setEventIdentifier(PlatformEventIdentifier.USER_LOGIN_TO_SERVICE);  event.setEventType(EventType.SERVICE_EVENT);  event.setTechnicalProduct(technicalProduct);  mgr.persist(event);  List<Event> eventList=new ArrayList<>();  eventList.add(event);  technicalProduct.setEvents(eventList);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  Document newDoc;  String namespaceURI="http://www.w3.org/xml/1998/namespace";  String qualifiedName="xml:root";  DocumentType docType=null;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      newDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("domimplementationcreatedocument05",success);  }}  }
class C{  public TransportNetworkCache(String sourceBucket,File cacheDir){  this.cacheDir=cacheDir;  this.sourceBucket=sourceBucket;  this.gtfsCache=new GTFSCache(sourceBucket,cacheDir);  this.osmCache=new OSMCache(sourceBucket,cacheDir);}  }
class C{  public static boolean isLoaded(){  return annotationMap != null;}  }
class C{  public static int hashCode(int pre,int i){  return 37 * pre + i;}  }
class C{  public int size(){  return sortedSet.size();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:09.413 -0500",hash_original_method="33D1B746D20986D17267826F3151AB68",hash_generated_method="40C8212AA2D38D28244FD69F411134EA") private void init(SSLParametersImpl sslParameters) throws IOException {  init(sslParameters,NativeCrypto.getSupportedProtocols(),NativeCrypto.getDefaultCipherSuites(),NativeCrypto.getDefaultCompressionMethods());}  }
class C{  public static List<OFPhysicalPort> ofPhysicalPortListOf(Collection<ImmutablePort> ports){  if (ports == null) {    throw new NullPointerException("Port list must not be null");  }  ArrayList<OFPhysicalPort> ofppList=new ArrayList<OFPhysicalPort>(ports.size());  for (  ImmutablePort p : ports) {    if (p == null)     throw new NullPointerException("Port must not be null");    ofppList.add(p.toOFPhysicalPort());  }  return ofppList;}  }
class C{  public E argMax(){  return entries.argmax();}  }
class C{  @Override public Queue createQueue(final String queueName) throws JMSException {  if (cri.getType() == ActiveMQRAConnectionFactory.TOPIC_CONNECTION || cri.getType() == ActiveMQRAConnectionFactory.XA_TOPIC_CONNECTION) {    throw new IllegalStateException("Cannot create browser or javax.jms.TopicSession");  }  Session session=getSessionInternal();  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createQueue " + session + " queueName="+ queueName);  }  Queue result=session.createQueue(queueName);  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createdQueue " + session + " queue="+ result);  }  return result;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/precheck2") public VdcPreCheckResponse2 precheckVdcConfig(VdcPreCheckParam2 checkParam){  log.info("Start vdc config precheck2 for {} ...",checkParam.getConfigChangeType());  if (service.getId().endsWith("standalone")) {    throw GeoException.fatals.remoteVDCWrongStandaloneInstall();  }  VdcConfig.ConfigChangeType type=checkParam.getConfigChangeType();  VirtualDataCenter vdc=null;  VdcPreCheckResponse2 resp2=new VdcPreCheckResponse2();  resp2.setCompatible(true);  boolean precheckFailed=checkParam.isPrecheckFailed();switch (type) {case DISCONNECT_VDC:    log.info("Precheck2 for disconnect ops");  vdc=helper.getDisconnectingVdc();if (checkParam.getIsAllNotReachable()) {  URI targetVdcId=checkParam.getVdcIds().get(0);  log.info("Precheck2 to check the disconnect vdc {} is reachable",targetVdcId);  VirtualDataCenter targetVdc=dbClient.queryObject(VirtualDataCenter.class,targetVdcId);  Site activeSite=drUtil.getActiveSite(targetVdc.getShortId());  resp2.setIsAllNodesNotReachable(!helper.areNodesReachable(getLocalVdc().getShortId(),activeSite.getHostIPv4AddressMap(),activeSite.getHostIPv6AddressMap(),checkParam.getIsAllNotReachable()));  break;}if (precheckFailed) {log.info("Precheck2 to update reconnect precheck fail status");String vdcState=checkParam.getDefaultVdcState();if (StringUtils.isNotEmpty(vdcState)) {  vdc.setConnectionStatus(VirtualDataCenter.ConnectionStatus.valueOf(vdcState));  dbClient.updateAndReindexObject(vdc);}break;}if (vdc == null) {log.info("Precheck2: there is no disconnecting vdc");URI srcVdcId=checkParam.getVdcIds().get(1);VirtualDataCenter srcVdc=dbClient.queryObject(VirtualDataCenter.class,srcVdcId);if (srcVdc.getConnectionStatus() == VirtualDataCenter.ConnectionStatus.DISCONNECTED) {resp2.setCompatible(false);break;}URI id=checkParam.getVdcIds().get(0);vdc=dbClient.queryObject(VirtualDataCenter.class,id);vdc.setConnectionStatus(VirtualDataCenter.ConnectionStatus.DISCONNECTING);dbClient.updateAndReindexObject(vdc);} else {resp2=toVirtualDataCenterResponse2(vdc,true,null);}break;case RECONNECT_VDC:log.info("Precheck2 for reconnect ops checkParam={}",checkParam);List<String> blackList=checkParam.getBlackList();List<String> whiteList=checkParam.getWhiteList();log.info("Precheck2 to check if two vdc disconnect each other");resp2.setCompatible(true);if (isDisconnectedEachOther(blackList,whiteList)) {log.info("Precheck2: two vdc have disconnected each other");resp2.setCompatible(false);break;}if (precheckFailed) {log.info("Precheck2 to update reconnect precheck fail status");URI targetVdcId=checkParam.getVdcIds().get(0);log.info("Precheck2 to check the disconnect vdc {} is reachable",targetVdcId);VirtualDataCenter targetVdc=dbClient.queryObject(VirtualDataCenter.class,targetVdcId);String vdcState=checkParam.getDefaultVdcState();if (StringUtils.isNotEmpty(vdcState)) {targetVdc.setConnectionStatus(VirtualDataCenter.ConnectionStatus.valueOf(vdcState));dbClient.updateAndReindexObject(targetVdc);}break;}break;}log.info("Precheck2 done, resp is {}",resp2.toString());return resp2;}  }
class C{  public static String checkNotEmpty(String string,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && TextUtils.isEmpty(string)) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }  return string;}  }
class C{  public String toString(){  String initState="";switch (state) {case UNINITIALIZED:    initState="<not initialized>";  break;case VERIFY:initState="<initialized for verifying>";break;case SIGN:initState="<initialized for signing>";break;}return "Signature object: " + getAlgorithm() + initState;}  }
class C{  public void testLeaderLeave() throws Throwable {  List<CopycatServer> servers=createServers(3);  CopycatServer server=servers.stream().filter(null).findFirst().get();  server.leave().thenRun(null);  await(30000);}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,T8,R>HexFunction<T3,T4,T5,T6,T7,T8,R> partial8(final T1 t1,final T2 t2,final OctFunction<T1,T2,T3,T4,T5,T6,T7,T8,R> octFunc){  return null;}  }
class C{  private void writeString(String s,byte stringTag,String enc) throws IOException {  byte[] data=s.getBytes(enc);  write(stringTag);  putLength(data.length);  write(data);}  }
class C{  public X509Name(boolean reverse,Hashtable lookUp,String dirName){  this(reverse,lookUp,dirName,new X509DefaultEntryConverter());}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  private Object executeGTE(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  return (executeCompare(pc,sql,qr,expression,row) >= 0) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public final boolean isFillX(){  return fillX;}  }
class C{  public static X509CRL loadCRL(final InputStream inputStream){  try {    final X509CRL crl=(X509CRL)certificateFactory.generateCRL(inputStream);    return crl;  } catch (  CRLException e) {    throw new DSSException(e);  }}  }
class C{  public static File createTempDir(final String prefix,final String suffix,final File directory) throws IOException {  final File dir=File.createTempFile(prefix,suffix,directory);  if (!dir.delete()) {    throw new IOException("Could not create directory: " + dir.toString());  }  if (!dir.mkdir()) {    throw new IOException("Could not create directory: " + dir.toString());  }  return dir;}  }
class C{  public void appendByte(int b){  elems=ArrayUtils.ensureCapacity(elems,length);  elems[length++]=(byte)b;}  }
class C{  @Ignore @Test public void test_DR_PR_PGS_4Nodes_Put_Receiver_2Nodes() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    Integer nyPort=(Integer)vm1.invoke(null);    createCacheInVMs(nyPort,vm2,vm3);    vm2.invoke(null);    vm3.invoke(null);    vm2.invoke(null);    vm3.invoke(null);    vm2.invoke(null);    vm3.invoke(null);    createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    startSenderInVMs("ln",vm4,vm5,vm6,vm7);    vm4.invoke(null);    vm5.invoke(null);    vm6.invoke(null);    vm7.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm2.invoke(null);    vm3.invoke(null);    vm2.invoke(null);    vm3.invoke(null);  } catch (  Exception e) {    Assert.fail("Unexpected exception",e);  }}  }
class C{  @Override public String toString(){  return this.getClass().getName();}  }
class C{  public static void stop(String gridName,boolean cancel){  IgniteProcessProxy proxy=gridProxies.get(gridName);  if (proxy != null) {    proxy.remoteCompute().run(new StopGridTask(gridName,cancel));    gridProxies.remove(gridName,proxy);  }}  }
class C{  public TodoExample(TodoObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getTodolistId() != null) {    criteria.andTodolistIdEqualTo(sample.getTodolistId());  }  if (sample.getContent() != null) {    criteria.andContentEqualTo(sample.getContent());  }  if (sample.getPosition() != null) {    criteria.andPositionEqualTo(sample.getPosition());  }  if (sample.getCompleted() != null) {    criteria.andCompletedEqualTo(sample.getCompleted());  }  if (sample.getDueDate() != null) {    criteria.andDueDateEqualTo(sample.getDueDate());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getAssigneeId() != null) {    criteria.andAssigneeIdEqualTo(sample.getAssigneeId());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getUpdated() != null) {    criteria.andUpdatedEqualTo(sample.getUpdated());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getDoing() != null) {    criteria.andDoingEqualTo(sample.getDoing());  }  if (sample.getProjectTodoId() != null) {    criteria.andProjectTodoIdEqualTo(sample.getProjectTodoId());  }  if (sample.getTodoType() != null) {    criteria.andTodoTypeEqualTo(sample.getTodoType());  }  if (sample.getDescription() != null) {    criteria.andDescriptionEqualTo(sample.getDescription());  }  if (sample.getEstimate() != null) {    criteria.andEstimateEqualTo(sample.getEstimate());  }  if (sample.getSpendTime() != null) {    criteria.andSpendTimeEqualTo(sample.getSpendTime());  }  if (sample.getPriority() != null) {    criteria.andPriorityEqualTo(sample.getPriority());  }  if (sample.getStatus() != null) {    criteria.andStatusEqualTo(sample.getStatus());  }  if (sample.getStartTime() != null) {    criteria.andStartTimeEqualTo(sample.getStartTime());  }  if (sample.getCompleteTime() != null) {    criteria.andCompleteTimeEqualTo(sample.getCompleteTime());  }  if (sample.getCompleterId() != null) {    criteria.andCompleterIdEqualTo(sample.getCompleterId());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }}  }
class C{  public GdiFont(int height,boolean bItalic,boolean bUnderlined,boolean bStrikeout,boolean bBold,String faceName,int escapement){  m_height=height;  m_bItalic=bItalic;  m_bBold=bBold;  m_faceName=faceName;  m_bUnderlined=bUnderlined;  m_escapement=escapement;  m_bStrikeout=bStrikeout;}  }
class C{  public static Test suite(String superclass,Vector<String> packages){  return suite(addAll(superclass,packages),getMissing(superclass,packages));}  }
class C{  public String addRowClass(){  IVisitedRowVO fila=(IVisitedRowVO)this.getCurrentRowObject();  return fila.getRowStyle();}  }
class C{  public static Control createPreferenceLinkArea(final Composite parent,final int style,final String pageId,final String message,final IPreferencePageContainer container,final Object pageData){  try {    final Class preferenceLinkClass=Class.forName("org.eclipse.ui.dialogs.PreferenceLinkArea");    final Class workbenchPrefContainerClass=Class.forName("org.eclipse.ui.preferences.IWorkbenchPreferenceContainer");    final Constructor preferenceLinkCtor=preferenceLinkClass.getConstructor(new Class[]{Composite.class,int.class,String.class,String.class,workbenchPrefContainerClass,Object.class});    final Object preferenceLinkArea=preferenceLinkCtor.newInstance(new Object[]{parent,new Integer(style),pageId,message,container,pageData});    final Method getControlMethod=preferenceLinkClass.getMethod("getControl",(Class[])null);    return (Control)getControlMethod.invoke(preferenceLinkArea,(Object[])null);  } catch (  final Exception e) {    return new EmptyControl(parent,style);  }}  }
class C{  public static synchronized void createPresenceManager(Context context,Collection<MXSession> sessions){  for (  MXSession session : sessions) {    if (!instances.containsKey(session)) {      createInstance(context,session);    }  }}  }
class C{  public MRadSplit(){  super();}  }
class C{  public ArtifactCoordinates(final String groupId,final String artifactId,final String version){  this(groupId,artifactId,version,"");}  }
class C{  public void report(){  for (  final Warning warn : mWarnings) {    warn.finalMsg();  }}  }
class C{  public AccessibleRelation(String key,Object[] target){  this.key=key;  this.target=target;}  }
class C{  SortedSet<String> typesToImport(){  SortedSet<String> typesToImport=new TreeSet<String>();  for (  Map.Entry<String,Spelling> entry : imports.entrySet()) {    if (entry.getValue().importIt) {      typesToImport.add(entry.getKey());    }  }  return typesToImport;}  }
class C{  public SlowPathException(Throwable cause){  super(cause);  CompilerDirectives.transferToInterpreterAndInvalidate();}  }
class C{  public Builder withLayer(){  mWithLayer=true;  return this;}  }
class C{  void handleReceiverOpen(final ProtonConnection con,final ProtonReceiver receiver){  if (receiver.getRemoteTarget().getAddress() == null) {    LOG.debug("client [{}] wants to open an anonymous link for sending messages to arbitrary addresses, closing link",con.getRemoteContainer());    receiver.setCondition(condition(AmqpError.NOT_FOUND.toString(),"anonymous relay not supported")).close();  } else {    LOG.debug("client [{}] wants to open a link for sending messages [address: {}]",con.getRemoteContainer(),receiver.getRemoteTarget());    try {      final ResourceIdentifier targetResource=getResourceIdentifier(receiver.getRemoteTarget().getAddress());      final Endpoint endpoint=getEndpoint(targetResource);      if (endpoint == null) {        handleUnknownEndpoint(con,receiver,targetResource);      } else {        final String user=getUserFromConnection(con);        checkAuthorizationToAttach(user,targetResource,Permission.WRITE,null);      }    } catch (    final IllegalArgumentException e) {      LOG.debug("client has provided invalid resource identifier as target address",e);      receiver.close();    }  }}  }
class C{  public CallerHierarchy(IProject project,SourceMethodNode root,IMethod method){  fProject=project;  fRoot=root;  fDesription=computeDescription(method);}  }
class C{  public double minLatitude(){  return minLatitude;}  }
class C{  public static long ceiling(double value){  return Math.round(Math.ceil(value));}  }
class C{  public Matrix4d mul(Matrix4dc right){  return mul(right,this);}  }
class C{  private <T>T readHandleField(){  int handlePos=BinaryUtils.positionForHandle(in) - in.readInt();  Object obj=getHandle(handlePos);  if (obj == null) {    int retPos=in.position();    streamPosition(handlePos);    obj=BinaryUtils.doReadObject(in,ctx,ldr,this);    streamPosition(retPos);  }  return (T)obj;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.VARIABLE_REFERENCE__VARIABLE_NAME:    return getVariableName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void resolutionFinished(final ConflictResolution resolution,final ConflictResolutionStatus status){  if (this.repository == null) {    log.warn("Could not resolve conflict.  Connection went offline before resolution finished.");    return;  }  ConflictHelpers.showConflictError(getSite().getShell(),resolution,status);  if (ConflictResolutionStatus.SUCCESS.equals(status) || ConflictResolutionStatus.SUCCEEDED_WITH_CONFLICTS.equals(status)) {    final RefreshPendingChangesCommand refreshCommand=new RefreshPendingChangesCommand(repository);    UICommandExecutorFactory.newUIJobCommandExecutor(getSite().getShell()).execute(refreshCommand);    queryConflicts(filters);  } else   if (ConflictResolutionStatus.CANCELLED.equals(status)) {    resolution.getConflictDescription().clearAnalysis();  }}  }
class C{  private void handleAlreadyClosedException(AlreadyClosedException ace){  unexpectedExceptions.inc();  logger.error("Encountered unexpected exception when writing data into stream {} : ",name,ace);  fatalErrorHandler.notifyFatalError();}  }
class C{  public DelimitedTextTableReader(String delimiterRegex){  m_delim=delimiterRegex;}  }
class C{  public UnicastServerRef(){}  }
class C{  public int sizeLeadDiffValue(int x,int y){  double result=0, tmp;  int maxK=1;  for (int k=0; k < 3; k++) {    tmp=Math.max(this.differencesBetweenNeighborhoodsHorizontal(x,y,k),this.differencesBetweenNeighborhoodsVertical(x,y,k));    if (result < tmp) {      maxK=k;      result=tmp;    }  }  return maxK;}  }
class C{  protected String buildImage(String repository,File tar,final ProgressMonitor progressMonitor,AuthConfigs authConfigs) throws IOException, InterruptedException {  return doBuildImage(repository,tar,progressMonitor,dockerDaemonUri,authConfigs);}  }
class C{  private Set<String> indicesWithMissingPrimaries(ClusterState clusterState,String[] concreteIndices){  Set<String> indices=newHashSet();  RoutingTable routingTable=clusterState.routingTable();  for (  String index : concreteIndices) {    IndexRoutingTable indexRoutingTable=routingTable.index(index);    if (indexRoutingTable.allPrimaryShardsActive() == false) {      indices.add(index);    }  }  return indices;}  }
class C{  protected void enviardesdevistaExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String idConsulta=request.getParameter("idconsulta");  enviarConsultaCodeLogic(idConsulta,mapping,form,request,response);}  }
class C{  public void alias(final String name,final Class<?> type){  if (classAliasingMapper == null) {    throw new InitializationException("No " + ClassAliasingMapper.class.getName() + " available");  }  classAliasingMapper.addClassAlias(name,type);}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public boolean isEnabled(){  return m_TextSearch.isEditable();}  }
class C{  public void loadArg(final int arg){  loadInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  private byte[] calculateCMSKeyChecksum(byte[] key){  byte[] result=new byte[8];  sha1.update(key,0,key.length);  sha1.doFinal(digest,0);  System.arraycopy(digest,0,result,0,8);  return result;}  }
class C{  public T onkeypress(String value){  return attr("onkeypress",value);}  }
class C{  public static void growSpecializedMethods(){  int org_length=specializedMethods.length;  int new_length=2 * org_length;  CodeArray[] temp=new CodeArray[new_length];  for (int i=0; i < org_length; i++) {    temp[i]=specializedMethods[i];  }  specializedMethods=temp;}  }
class C{  private ToneDetection(){}  }
class C{  RocPoint(){  this(Double.NaN,0,0,0);}  }
class C{  Query makeIntersects(Rectangle bbox){  Query qHasEnv;  if (ctx.isGeo()) {    Query qIsNonXDL=this.makeXDL(false);    Query qIsXDL=ctx.isGeo() ? this.makeXDL(true) : null;    qHasEnv=this.makeQuery(BooleanClause.Occur.SHOULD,qIsNonXDL,qIsXDL);  } else {    qHasEnv=this.makeXDL(false);  }  BooleanQuery.Builder qNotDisjoint=new BooleanQuery.Builder();  qNotDisjoint.add(qHasEnv,BooleanClause.Occur.MUST);  Query qDisjoint=makeDisjoint(bbox);  qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);  return qNotDisjoint.build();}  }
class C{  public boolean isQualified(){  if (value == null) {    int idot=ipos;    if (idot <= 0)     idot=name.length(); else     idot-=1;    int index=name.lastIndexOf('.',idot - 1);    value=(index < 0) ? idNull : Identifier.lookup(name.substring(0,index));  }  return (value instanceof Identifier) && (value != idNull);}  }
class C{  public void checkIsAllocated(){  int originalBits=AddressableMemoryManager.readIntVolatile(this.memoryAddress + REF_COUNT_OFFSET);  if ((originalBits & MAGIC_MASK) != MAGIC_NUMBER) {    throw new IllegalStateException("It looks like this off heap memory was already freed. rawBits=" + Integer.toHexString(originalBits));  }}  }
class C{  @Deprecated public synchronized boolean isProxySet(){  return proxyHost != null;}  }
class C{  DiagnosticEvent(final T type,final String... params){  if (type == null) {    throw new NullPointerException();  }  if (params.length != type.getNumberOfParameters()) {    throw new IllegalArgumentException(type + ":" + params.length+ ":"+ type.getNumberOfParameters());  }  mType=type;  mParams=params;}  }
class C{  public static Float asFloat(String str){  try {    return Float.valueOf(str);  } catch (  NumberFormatException e) {    return null;  }}  }
class C{  public IMouseState createBendPressedLeftState(final Bend b,final MouseEvent event){  final CBendPressedLeftState state=new CBendPressedLeftState(this,m_graph,b);  m_factory.createBendPressedLeftAction().execute(state,event);  return state;}  }
class C{  public SalsaIterations(CommonInternalState<T> salsaInternalState,SingleSalsaIteration leftSalsaIteration,SingleSalsaIteration rightSalsaIteration,SingleSalsaIteration finalSalsaIteration){  this.salsaInternalState=salsaInternalState;  this.salsaStats=salsaInternalState.getSalsaStats();  this.leftSalsaIteration=leftSalsaIteration;  this.rightSalsaIteration=rightSalsaIteration;  this.finalSalsaIteration=finalSalsaIteration;}  }
class C{  @Override public void convertClassNamesToClasses(ClassLoader classLoader){  super.convertClassNamesToClasses(classLoader);  for (  Converter converter : converters.values()) {    convertConverterClassNamesToClasses(converter,classLoader);  }}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required){  this.m_has_required=has_required;  build(namespace,name,nameAlias,elements,attributes,contentHandler,classObject);  if ((null != namespace) && (namespace.equals(Constants.S_XSLNAMESPACEURL) || namespace.equals(Constants.S_BUILTIN_EXTENSIONS_URL) || namespace.equals(Constants.S_BUILTIN_OLD_EXTENSIONS_URL))) {    schema.addAvailableElement(new QName(namespace,name));    if (null != nameAlias)     schema.addAvailableElement(new QName(namespace,nameAlias));  }}  }
class C{  public void clear() throws IOException {  this.stack.clear();}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  public static boolean canTab(List constraints){  for (Iterator iter=constraints.iterator(); iter.hasNext(); ) {    DockConstraint dc=(DockConstraint)iter.next();    if (!dc.canTab())     return false;  }  return true;}  }
class C{  public String toVerboseString(){  StringBuffer result=new StringBuffer();  result.append("ForeignK ky [");  if ((getName() != null) && (getName().length() > 0)) {    result.append("name=");    result.append(getName());    result.append("; ");  }  result.append("foreign table=");  result.append(getForeignTableName());  result.append("] references:");  for (int idx=0; idx < getReferenceCount(); idx++) {    result.append(" ");    result.append(getReference(idx).toString());  }  return result.toString();}  }
class C{  public String[] querySortedKeys(String type,int index,boolean ascending,int page,int limit,int visibilityScope) throws CloudException {  return (String[])queryImpl(type,null,0,page,limit,visibilityScope,1,index,ascending,false,true,null);}  }
class C{  public void removeNew(int where) throws CannotCompileException {  byte[] data=new NewRemover(this,where).doit();  this.set(data);}  }
class C{  public final Builder addDivider(@Nullable final CharSequence title){  bottomSheet.addDivider(title);  return this;}  }
class C{  public NBTTagStringList(@Nonnull NBTTagList list){  this.parent=list;}  }
class C{  public boolean isSetChallenge(){  return this.challenge != null;}  }
class C{  private void showPopup(final MouseEvent event){  int[] rows=getSelectedRows();  if ((rows.length == 0) || (rows.length == 1)) {    final int row=rowAtPoint(event.getPoint());    final int column=columnAtPoint(event.getPoint());    if ((row == -1) || (column == -1)) {      return;    }    changeSelection(row,column,false,false);    rows=getSelectedRows();  }  final JPopupMenu menu=new JPopupMenu();  menu.add(new JMenuItem(CActionProxy.proxy(new CDeleteBookmarkAction(m_debuggerProvider,rows))));  menu.show(event.getComponent(),event.getX(),event.getY());}  }
class C{  private static void exch(Object[] a,int i,int j){  Object swap=a[i];  a[i]=a[j];  a[j]=swap;}  }
class C{  private void hide(){  this.block.getToplevel().removeMenu(this);}  }
class C{  @Override public void endElement(String ns,String ln,String qn){  validatorInfo.setNameSpace(ns);  validatorInfo.setLocalName(ln);  validatorInfo.setQName(qn);  idTagParser.parseEndElement();  coreTagParser.parseEndElement();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:55.202 -0500",hash_original_method="9C711BE19A8C0E0A7CB116A3F753C6F0",hash_generated_method="3E11F84AAB428D962C364CC48C7D950E") public String encodeBody(){  return optionTag;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.404 -0400",hash_original_method="EBD3AE305BBE8ACEE25AF0014FD6CB2C",hash_generated_method="435068850F62FAE0A1527107415332CF") public static float swapFloat(float value){  return Float.intBitsToFloat(swapInteger(Float.floatToIntBits(value)));}  }
class C{  public final void testOnSaveInstanceState(){  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.addValidator(Validators.notEmpty("foo"));  abstractValidateableView.validateOnValueChange(false);  abstractValidateableView.validateOnFocusLost(false);  abstractValidateableView.validate();  SavedState savedState=(SavedState)abstractValidateableView.onSaveInstanceState();  assertFalse(savedState.validateOnValueChange);  assertFalse(savedState.validateOnFocusLost);  assertTrue(savedState.validated);}  }
class C{  public boolean hasSVUID(){  return hasSVUID;}  }
class C{  public long currentTimeMillis() throws IOException {  return System.currentTimeMillis() + getOffset();}  }
class C{  @Override public void openElement(String tagName){  int count=0;  NodeList list=current.getChildNodes();  int len=list.getLength();  for (int i=0; i < len; i++) {    Node node=list.item(i);    if ((node instanceof Element) && ((Element)node).getTagName().equals(tagName)) {      current=node;      return;    }  }  throw new IllegalArgumentException("element not found:" + tagName);}  }
class C{  public void addLocalDecl(Decl d){  if (locals == null)   locals=new OrderedHashSet<Decl>();  locals.add(d);  d.isLocal=true;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    if (mAdapter != null && ((HeaderViewListAdapter)mAdapter).removeFooter(v)) {      if (mObserver != null) {        mObserver.onChanged();      }      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public static float dpToPx(Resources res,float dp){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,res.getDisplayMetrics());  return px;}  }
class C{  void materialize(){  if (cachefill < 0) {    return;  }  double min=Double.MAX_VALUE, max=Double.MIN_VALUE;  for (int i=0; i < cachefill; i++) {    min=Math.min(min,cachec[i]);    max=Math.max(max,cachec[i]);  }  LinearScale scale=new LinearScale(min,max);  min=scale.getMin();  max=scale.getMax();  this.base=min;  this.max=max;  this.binsize=(max - min) / this.destsize;  this.data=new float[this.destsize << 1];  size=destsize;  final int end=cachefill;  cachefill=-1;  for (int i=0; i < end; i++) {    increment(cachec[i],cachev[i]);  }  cachec=null;  cachev=null;}  }
class C{  public static final String colorToString(Color color){  return (color.getRed() + "," + color.getGreen()+ ","+ color.getBlue()+ ","+ color.getAlpha());}  }
class C{  @Override public ExampleSet createExampleSet(Attribute labelAttribute){  return createExampleSet(labelAttribute,null,null);}  }
class C{  @Override public String valueToString(double milliseconds){  return this.formatter.format(new Date((long)milliseconds));}  }
class C{  public void testBug50348() throws Exception {  final TimeZone defaultTZ=TimeZone.getDefault();  final Properties testConnProps=new Properties();  testConnProps.setProperty("useTimezone","true");  testConnProps.setProperty("cacheDefaultTimezone","false");  Connection testConn=null;  try {    TimeZone.setDefault(TimeZone.getTimeZone("America/Chicago"));    final SimpleDateFormat tsFormat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    final Timestamp timestamp=new Timestamp(tsFormat.parse("2015-01-01 10:00:00").getTime());    final SimpleDateFormat tFormat=new SimpleDateFormat("HH:mm:ss");    final Time time=new Time(tFormat.parse("10:00:00").getTime());    for (    String tz : new String[]{"Europe/Lisbon","UTC","GMT+00","GMT"}) {      System.out.println("\nServer time zone: " + tz);      System.out.println("---------------------------------------------------");      testConnProps.setProperty("serverTimezone",tz);      testConn=getConnectionWithProps(testConnProps);      checkResultSetForTestBug50348(testConn,"2015-01-01 04:00:00.0",tz.equals("Europe/Lisbon") ? "03:00:00" : "04:00:00");      checkPreparedStatementForTestBug50348(testConn,timestamp,time,"2015-01-01 16:00:00",tz.equals("Europe/Lisbon") ? "17:00:00" : "16:00:00");      testConn.close();    }    for (int tzOffset=-15; tzOffset <= 15; tzOffset++) {      for (      int tzSubOffset : new int[]{0,30}) {        final StringBuilder tz=new StringBuilder("GMT");        tz.append(tzOffset < 0 ? "-" : "+").append(String.format("%02d",Math.abs(tzOffset)));        tz.append(String.format(":%02d",tzSubOffset));        System.out.println("\nServer time zone: " + tz.toString());        System.out.println("---------------------------------------------------");        testConnProps.setProperty("serverTimezone",tz.toString());        testConn=getConnectionWithProps(testConnProps);        final int diffTzOffset=tzOffset + 6;        final Calendar cal=Calendar.getInstance();        cal.setTime(tsFormat.parse("2015-01-01 10:00:00"));        cal.add(Calendar.HOUR,-diffTzOffset);        cal.add(Calendar.MINUTE,tzOffset < 0 ? tzSubOffset : -tzSubOffset);        String expectedTimestampFromRS=tsFormat.format(cal.getTime()) + ".0";        cal.setTime(tFormat.parse("10:00:00"));        cal.add(Calendar.HOUR,-diffTzOffset);        cal.add(Calendar.MINUTE,tzOffset < 0 ? tzSubOffset : -tzSubOffset);        String expectedTimeFromRS=tFormat.format(cal.getTime());        checkResultSetForTestBug50348(testConn,expectedTimestampFromRS,expectedTimeFromRS);        cal.setTime(tsFormat.parse("2015-01-01 10:00:00"));        cal.add(Calendar.HOUR,diffTzOffset);        cal.add(Calendar.MINUTE,tzOffset < 0 ? -tzSubOffset : tzSubOffset);        String expectedTimestampFromPS=tsFormat.format(cal.getTime());        cal.setTime(tFormat.parse("10:00:00"));        cal.add(Calendar.HOUR,diffTzOffset);        cal.add(Calendar.MINUTE,tzOffset < 0 ? -tzSubOffset : tzSubOffset);        String expectedTimeFromPS=tFormat.format(cal.getTime());        checkPreparedStatementForTestBug50348(testConn,timestamp,time,expectedTimestampFromPS,expectedTimeFromPS);        testConn.close();      }    }  }  finally {    TimeZone.setDefault(defaultTZ);    if (testConn != null) {      testConn.close();    }  }}  }
class C{  public int print(Graphics g,PageFormat pageFormat,int pageIndex){  return RPrintUtilities.printDocumentWordWrap(g,this,getFont(),pageIndex,pageFormat,getTabSize());}  }
class C{  public MockIgfs buildIgfs(){  return new MockIgfs(build());}  }
class C{  public SurfaceTileDrawContext(Tile tile,Collection<PickedObject> pickCandidates){  if (tile == null) {    String message=Logging.getMessage("nullValue.TileIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (pickCandidates == null) {    String message=Logging.getMessage("nullValue.PickedObjectList");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.sector=tile.getSector();  this.viewport=new Rectangle(0,0,tile.getWidth(),tile.getHeight());  this.modelview=Matrix.fromGeographicToViewport(tile.getSector(),0,0,tile.getWidth(),tile.getHeight());  this.pickCandidates=pickCandidates;}  }
class C{  public void remove(String key){  Cursor cursor=get(key);  if (cursor != null) {    cursor.dispose();    map.remove(key);  }}  }
class C{  public void testLocalInstances_deterministic(){  MatsimRandom.reset();  Random local1a=MatsimRandom.getLocalInstance();  Random local1b=MatsimRandom.getLocalInstance();  MatsimRandom.reset();  Random local2a=MatsimRandom.getLocalInstance();  Random local2b=MatsimRandom.getLocalInstance();  assertEqualRandomNumberGenerators(local1a,local2a);  assertEqualRandomNumberGenerators(local1b,local2b);}  }
class C{  public static void gluLookAt(GL10 gl,double eyeX,double eyeY,double eyeZ,double centerX,double centerY,double centerZ,double upX,double upY,double upZ){  double[] scratch=sScratch;synchronized (scratch) {    Matrix.setLookAtM(scratch,0,eyeX,eyeY,eyeZ,centerX,centerY,centerZ,upX,upY,upZ);    gl.glMultMatrixf(ArrayUtils.convertDoublesToFloats(scratch,sTempFloats),0);  }}  }
class C{  public static Collection<ServiceInfo> parseWSDL(String wsdlUrl) throws Exception {  try {    return internalParseWSDL(wsdlUrl);  } catch (  Exception e) {    throw translateException(clarifyWsdlParsingException(e));  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Enumeration<Option> superOpts=super.listOptions();  Vector<Option> newVector=new Vector<Option>();  while (superOpts.hasMoreElements()) {    newVector.addElement(superOpts.nextElement());  }  newVector.addElement(new Option("\tSave instances at the nodes in\n" + "\tthe tree (for visualization purposes)","L",0,"-L"));  return newVector.elements();}  }
class C{  @SuppressWarnings("unchecked") public CreateIndexRequest source(Map<String,?> source){  boolean found=false;  for (  Map.Entry<String,?> entry : source.entrySet()) {    String name=entry.getKey();    if (name.equals("settings")) {      found=true;      settings((Map<String,Object>)entry.getValue());    } else     if (name.equals("mappings")) {      found=true;      Map<String,Object> mappings=(Map<String,Object>)entry.getValue();      for (      Map.Entry<String,Object> entry1 : mappings.entrySet()) {        mapping(entry1.getKey(),(Map<String,Object>)entry1.getValue());      }    } else     if (name.equals("aliases")) {      found=true;      aliases((Map<String,Object>)entry.getValue());    } else {      IndexMetaData.Custom proto=IndexMetaData.lookupPrototype(name);      if (proto != null) {        found=true;        try {          customs.put(name,proto.fromMap((Map<String,Object>)entry.getValue()));        } catch (        IOException e) {          throw new ElasticsearchParseException("failed to parse custom metadata for [{}]",name);        }      }    }  }  if (!found) {    settings(source);  }  return this;}  }
class C{  public ProjectTodoIdExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static void main(String[] args) throws Exception {  int maxContentLength=Integer.MIN_VALUE;  String logLevel="info";  boolean dumpContent=false;  String urlString=null;  String usage="Usage: File [-logLevel level] [-maxContentLength L] [-dumpContent] url";  if (args.length == 0) {    System.err.println(usage);    System.exit(-1);  }  for (int i=0; i < args.length; i++) {    if (args[i].equals("-logLevel")) {      logLevel=args[++i];    } else     if (args[i].equals("-maxContentLength")) {      maxContentLength=Integer.parseInt(args[++i]);    } else     if (args[i].equals("-dumpContent")) {      dumpContent=true;    } else     if (i != args.length - 1) {      System.err.println(usage);      System.exit(-1);    } else     urlString=args[i];  }  File file=new File();  file.setConf(NutchConfiguration.create());  if (maxContentLength != Integer.MIN_VALUE)   file.setMaxContentLength(maxContentLength);  Content content=file.getProtocolOutput(new Text(urlString),new CrawlDatum()).getContent();  System.err.println("Content-Type: " + content.getContentType());  System.err.println("Content-Length: " + content.getMetadata().get(Response.CONTENT_LENGTH));  System.err.println("Last-Modified: " + content.getMetadata().get(Response.LAST_MODIFIED));  if (dumpContent) {    System.out.print(new String(content.getContent()));  }  file=null;}  }
class C{  public InvalidPhraseException(String message){  super(message);}  }
class C{  static byte[] serialize(Object obj){  try (ByteArrayOutputStream b=new ByteArrayOutputStream()){    try (ObjectOutputStream o=new ObjectOutputStream(b)){      o.writeObject(obj);    }     return b.toByteArray();  } catch (  Exception e) {    throw new IgniteException("Failed to serialize object to byte array [obj=" + obj,e);  }}  }
class C{  public GridEmbeddedHttpServer withFileDownloadingHandler(@Nullable String urlPath,File fileToBeDownloaded){  assert fileToBeDownloaded.exists();  httpSrv.createContext("/",new FileDownloadingHandler(urlPath,fileToBeDownloaded));  return this;}  }
class C{  public double trace(){  double t=0;  for (int i=0; i < Math.min(m,n); i++) {    t+=A[i][i];  }  return t;}  }
class C{  public void pushBack(){  pushCount++;}  }
class C{  @Around("execution(* org.yes.cart.service.payment.impl.PaymentProcessorImpl.authorize(..))") public Object doAuthorize(final ProceedingJoinPoint pjp) throws Throwable {  final String rez=(String)pjp.proceed();  doNotify(pjp,rez,authoriseShopperTemplates,authoriseAdminTemplates);  return rez;}  }
class C{  public static boolean hasParent(ClassSymbol clazz,String... qualifiedNamesToFind){  if (clazz == null) {    return false;  }  if (ArrayUtils.contains(qualifiedNamesToFind,clazz.getQualifiedName().toString())) {    return true;  }  if (hasParent((ClassSymbol)clazz.getSuperclass().tsym,qualifiedNamesToFind)) {    return true;  }  for (  Type t : clazz.getInterfaces()) {    if (hasParent((ClassSymbol)t.tsym,qualifiedNamesToFind)) {      return true;    }  }  return false;}  }
class C{  public TranscoderInput(Reader reader){  this.reader=reader;}  }
class C{  public void addNotify(){  super.addNotify();  if (textArea != null) {    l.install(textArea);  }  updateCellWidths();  updateCellHeights();}  }
class C{  @Override public void onUpdateComplete(int taskId,Object cookie,int updateCount){  if (taskId == AppConstants.QueryTokens.UPDATE_TAGS_SUGGESSTIONS) {    if (updateCount == 0) {      final ContentValues values=(ContentValues)cookie;      DBInterface.insertAsync(AppConstants.QueryTokens.INSERT_TAG_SUGGESSTIONS,getTaskTag(),null,TableTags.NAME,null,values,true,this);    }  }  if (taskId == AppConstants.QueryTokens.UPDATE_DISCOVER_TAGS_SUGGESSTIONS) {    if (updateCount == 0) {      final ContentValues values=(ContentValues)cookie;      DBInterface.insertAsync(AppConstants.QueryTokens.INSERT_DISCOVER_TAG_SUGGESSTIONS,getTaskTag(),null,TableDiscoverTags.NAME,null,values,true,this);    }  }}  }
class C{  private static void uaRIMLt(MatrixBlock in,MatrixBlock out,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ind0=uarimaxLt(0.0,bv,bvi,bOp);  int m=in.rlen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(i,0);    int ind=(ai == 0) ? ind0 : uarimaxLt(ai,bv,bvi,bOp);    out.quickSetValue(i,0,ind);  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public int indexOf(String o){  return index.indexOf(o);}  }
class C{  private int lrsDim(Geometry geom){  return 0;}  }
class C{  @SuppressWarnings("unchecked") private static void fixCommonProblems(@NotNull ProblemDescriptor[] problems,@NotNull PsiComment comment,@NotNull final Document document,@NotNull Project project){  List<PsiElement> toRemove=new ArrayList<PsiElement>();  for (  ProblemDescriptor problem : problems) {    PsiElement element=problem.getPsiElement();    if (element == null) {      continue;    }    if ((!(element instanceof PsiDocToken) || !JavaDocTokenType.DOC_COMMENT_START.equals(((PsiDocToken)element).getTokenType())) && comment.getTextRange().contains(element.getTextRange())) {      for (PsiElement e=element; e != null; e=e.getParent()) {        if (e instanceof PsiDocTag) {          toRemove.add(e);          break;        }      }    } else {      QuickFix[] fixes=problem.getFixes();      if (fixes != null && fixes.length > 0) {        fixes[0].applyFix(project,problem);      }    }  }  if (toRemove.isEmpty()) {    return;  }  if (toRemove.size() > 1) {    Collections.sort(toRemove,COMPARATOR);  }  PsiDocumentManager psiDocumentManager=PsiDocumentManager.getInstance(project);  psiDocumentManager.doPostponedOperationsAndUnblockDocument(document);  CharSequence text=document.getCharsSequence();  for (  PsiElement element : toRemove) {    int startOffset=element.getTextRange().getStartOffset();    int startLine=document.getLineNumber(startOffset);    int i=CharArrayUtil.shiftBackward(text,startOffset - 1," \t");    if (i >= 0) {      char c=text.charAt(i);      if (c == '*') {        i=CharArrayUtil.shiftBackward(text,i - 1," \t");      }    }    if (i >= 0 && text.charAt(i) == '\n') {      startOffset=Math.max(i,document.getLineStartOffset(startLine) - 1);    }    int endOffset=element.getTextRange().getEndOffset();    i=CharArrayUtil.shiftBackward(text,endOffset - 1," \t*");    if (i > 0 && text.charAt(i) == '\n') {      endOffset=i;    }    document.deleteString(startOffset,endOffset);  }  psiDocumentManager.commitDocument(document);}  }
class C{  public void parseOperatorByteCode(DataOutputStream dataStream,TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  String next=stream.nextWord();  next=next.toLowerCase();  if (!OPERATORS.contains(next)) {    throw new SelfParseException("Invalid operator: '" + next + "' valid operators are: "+ OPERATORS,stream);  }  if (next.equals(IS)) {    next=Primitive.RELATION.getIdentity();  } else   if (next.equals(FOR)) {    ensureNext(EACH,stream);  } else   if (next.equals(WEAK)) {    ensureNext(ASSOCIATE,stream);    next=WEAKASSOCIATE;  } else   if (next.equals(RELATED)) {    ensureNext(TO,stream);  }  String last=next.toLowerCase();  Vertex operator=network.createVertex(new Primitive(next));  dataStream.writeLong(operator.getId());  stream.skipWhitespace();  next=lower(stream.peekWord());  if (NOT.equals(next)) {    stream.nextWord();    dataStream.writeLong(network.createVertex(Primitive.NOT).getId());  }  int arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,0,stream,elements,false,debug,network);  if (last.equals(IF)) {    if (arguments != 1) {      ensureArguments(IF,2,arguments,stream);    }    next=lower(stream.peekWord());    while (OR.equals(next) || AND.equals(next)) {      boolean or=OR.equals(next);      boolean and=AND.equals(next);      if (or) {        dataStream.writeLong(network.createVertex(Primitive.OR).getId());      } else       if (and) {        dataStream.writeLong(network.createVertex(Primitive.AND).getId());      }      stream.nextWord();      next=lower(stream.peekWord());      if (NOT.equals(next)) {        stream.nextWord();        dataStream.writeLong(network.createVertex(Primitive.NOT).getId());        next=lower(stream.peekWord());      }      boolean bracket=false;      while ("(".equals(next)) {        bracket=true;        dataStream.writeLong(network.createVertex(Primitive.LEFTBRACKET).getId());        stream.nextWord();        next=lower(stream.peekWord());      }      parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,0,stream,elements,bracket,debug,network);      next=lower(stream.peekWord());      if (bracket) {        while (")".equals(next)) {          dataStream.writeLong(network.createVertex(Primitive.RIGHTBRACKET).getId());          stream.nextWord();          next=lower(stream.peekWord());        }      }    }    if (THEN.equals(next)) {      stream.nextWord();      parseArgumentsByteCode(dataStream,Primitive.THEN,0,stream,elements,false,debug,network);      next=lower(stream.peekWord());    }    if (ELSE.equals(next)) {      stream.nextWord();      parseArgumentsByteCode(dataStream,Primitive.ELSE,0,stream,elements,false,debug,network);    }  } else   if (last.equals(WHILE)) {    if (arguments != 1) {      ensureArguments(WHILE,2,arguments,stream);    }    ensureNext(DO,stream);    parseArgumentsByteCode(dataStream,Primitive.DO,0,stream,elements,false,debug,network);  } else   if (last.equals(FOR)) {    ensureArguments(FOR,1,arguments,stream);    ensureNext(OF,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(OF,1,arguments,stream);    ensureNext(AS,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,2,stream,elements,false,debug,network);    ensureArguments(AS,1,arguments,stream);    next=lower(stream.peekWord());    int index=3;    while (AND.equals(next)) {      stream.nextWord();      ensureNext(EACH,stream);      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,index++,stream,elements,false,debug,network);      ensureArguments(EACH,1,arguments,stream);      ensureNext(OF,stream);      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,index++,stream,elements,false,debug,network);      ensureArguments(OF,1,arguments,stream);      ensureNext(AS,stream);      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,index++,stream,elements,false,debug,network);      ensureArguments(AS,1,arguments,stream);      next=lower(stream.peekWord());    }    if (DO.equals(next)) {      stream.nextWord();      parseArgumentsByteCode(dataStream,Primitive.DO,0,stream,elements,false,debug,network);    }  } else   if (last.equals(GREATER)) {    ensureArguments(GREATER,2,arguments,stream);  } else   if (last.equals(LESS)) {    ensureArguments(LESS,2,arguments,stream);  } else   if (last.equals(EQUAL)) {    ensureArguments(EQUAL,2,arguments,stream);  } else   if (last.equals(GET)) {    ensureArguments(GET,1,arguments,stream);    ensureNext(FROM,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(FROM,1,arguments,stream);    next=stream.peekWord();    if ((next != null) && ASSOCIATED.equals(next.toLowerCase())) {      stream.nextWord();      next=lower(stream.peekWord());      ensureNext(TO,stream);      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,2,stream,elements,false,debug,network);      ensureArguments(TO,1,arguments,stream);      ensureNext(BY,stream);      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,3,stream,elements,false,debug,network);      ensureArguments(BY,1,arguments,stream);    } else     if ((next != null) && AT.equals(next.toLowerCase())) {      stream.nextWord();      next=lower(stream.peekWord());      if ((next != null) && LAST.equals(next.toLowerCase())) {        stream.nextWord();        arguments=parseArgumentsByteCode(dataStream,Primitive.LASTINDEX,0,stream,elements,false,debug,network);        ensureArguments(AT,1,arguments,stream);      } else {        arguments=parseArgumentsByteCode(dataStream,Primitive.INDEX,0,stream,elements,false,debug,network);        ensureArguments(AT,1,arguments,stream);      }    }  } else   if (last.equals(LEARN)) {    ensureArguments(LEARN,1,arguments,stream);    next=stream.peekWord();    if ((next != null) && THAT.equals(next.toLowerCase())) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.THAT,0,stream,elements,false,debug,network);      ensureArguments(THAT,1,arguments,stream);      next=stream.peekWord();    }    if ((next != null) && TOPIC.equals(next.toLowerCase())) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.TOPIC,0,stream,elements,false,debug,network);      ensureArguments(TOPIC,1,arguments,stream);    }    ensureNext(TEMPLATE,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(TEMPLATE,1,arguments,stream);  } else   if (last.equals(INPUT)) {    ensureArguments(INPUT,1,arguments,stream);    next=stream.peekWord();    int forIndex=1;    if ((next != null) && PART.equals(next.toLowerCase())) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,1,stream,elements,false,debug,network);      ensureArguments(PART,1,arguments,stream);      next=stream.peekWord();      forIndex=2;    }    if ((next != null) && FOR.equals(next.toLowerCase())) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,forIndex,stream,elements,false,debug,network);      ensureArguments(FOR,1,arguments,stream);    }  } else   if (last.equals(ALL)) {    ensureArguments(ALL,1,arguments,stream);    ensureNext(FROM,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(FROM,1,arguments,stream);    next=stream.peekWord();    if ((next != null) && ASSOCIATED.equals(next.toLowerCase())) {      stream.nextWord();      next=lower(stream.peekWord());      ensureNext(TO,stream);      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,2,stream,elements,false,debug,network);      ensureArguments(TO,1,arguments,stream);      ensureNext(BY,stream);      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,3,stream,elements,false,debug,network);      ensureArguments(BY,1,arguments,stream);    }  } else   if (last.equals(COUNT)) {    ensureArguments(COUNT,1,arguments,stream);    next=stream.peekWord();    if ((next != null) && OF.equals(next.toLowerCase())) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,2,stream,elements,false,debug,network);      ensureArguments(OF,1,arguments,stream);    }  } else   if (last.equals(SET)) {    ensureArguments(last,1,arguments,stream);    ensureNext(TO,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(TO,1,arguments,stream);    next=lower(stream.peekWord());    if (ON.equals(next)) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,2,stream,elements,false,debug,network);      ensureArguments(ON,1,arguments,stream);    }  } else   if (last.equals(RELATION)) {    ensureArguments(IS,1,arguments,stream);    ensureNext(RELATED,stream);    ensureNext(TO,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(RELATED,1,arguments,stream);    next=lower(stream.peekWord());    if (BY.equals(next)) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,2,stream,elements,false,debug,network);      ensureArguments(BY,1,arguments,stream);    }  } else   if (last.equals(RELATED)) {    ensureArguments(RELATED,1,arguments,stream);    next=lower(stream.peekWord());    if (BY.equals(next)) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,2,stream,elements,false,debug,network);      ensureArguments(BY,1,arguments,stream);    }  } else   if (last.equals(ASSOCIATE) || last.equals(DISSOCIATE) || last.equals(WEAKASSOCIATE)) {    ensureArguments(last,1,arguments,stream);    ensureNext(TO,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(TO,1,arguments,stream);    ensureNext(BY,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,2,stream,elements,false,debug,network);    ensureArguments(BY,1,arguments,stream);    next=lower(stream.peekWord());    if (WITH.equals(next)) {      stream.nextWord();      ensureNext(META,stream);      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,3,stream,elements,false,debug,network);      ensureArguments(META,1,arguments,stream);      ensureNext(AS,stream);      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,4,stream,elements,false,debug,network);      ensureArguments(AS,1,arguments,stream);    }  } else   if (last.equals(ASSIGN)) {    ensureArguments(ASSIGN,1,arguments,stream);    ensureNext(TO,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(TO,1,arguments,stream);  } else   if (last.equals(DEFINE)) {    ensureArguments(ASSIGN,1,arguments,stream);    ensureNext(AS,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,1,stream,elements,false,debug,network);  } else   if (last.equals(EVAL)) {    ensureArguments(EVAL,1,arguments,stream);  } else   if (last.equals(NOT)) {    ensureArguments(NOT,1,arguments,stream);  } else   if (last.equals(APPEND)) {    ensureArguments(APPEND,1,arguments,stream);    ensureNext(TO,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(TO,1,arguments,stream);    ensureNext(OF,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,2,stream,elements,false,debug,network);    ensureArguments(OF,1,arguments,stream);    next=lower(stream.peekWord());    if (WITH.equals(next)) {      stream.nextWord();      ensureNext(META,stream);      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,3,stream,elements,false,debug,network);      ensureArguments(META,1,arguments,stream);      ensureNext(AS,stream);      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,4,stream,elements,false,debug,network);      ensureArguments(AS,1,arguments,stream);    }  } else   if (last.equals(CALL)) {    ensureArguments(CALL,1,arguments,stream);    ensureNext(ON,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,1,stream,elements,false,debug,network);    ensureArguments(ON,1,arguments,stream);    next=lower(stream.peekWord());    if (WITH.equals(next)) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.ARGUMENT,2,stream,elements,false,debug,network);    }  } else   if (last.equals(FORMAT)) {    ensureNext(AS,stream);    arguments=parseArgumentsByteCode(dataStream,Primitive.AS,1,stream,elements,false,debug,network);    ensureArguments(AS,1,arguments,stream);  } else   if (last.equals(SRAI) || last.equals(REDIRECT)) {    ensureArguments(SRAI,1,arguments,stream);  } else   if (last.equals(SRAIX) || last.equals(REQUEST)) {    ensureArguments(SRAI,1,arguments,stream);    next=lower(stream.peekWord());    if ("bot".equals(next)) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.BOT,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("botid".equals(next)) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.BOTID,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("service".equals(next)) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.SERVICE,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("server".equals(next)) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.SERVER,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("apikey".equals(next)) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.APIKEY,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("limit".equals(next)) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.LIMIT,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("hint".equals(next)) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.HINT,0,stream,elements,false,debug,network);    }    next=lower(stream.peekWord());    if ("default".equals(next)) {      stream.nextWord();      arguments=parseArgumentsByteCode(dataStream,Primitive.DEFAULT,0,stream,elements,false,debug,network);    }  }  dataStream.writeLong(0l);}  }
class C{  public void testCallMBeanInfo() throws Exception {  List<Class> classes=new ArrayList<>();  classes.addAll(getClassesForPackage(StandardRequestHandler.class.getPackage().getName()));  classes.addAll(getClassesForPackage(SearchComponent.class.getPackage().getName()));  classes.addAll(getClassesForPackage(LukeRequestHandler.class.getPackage().getName()));  classes.addAll(getClassesForPackage(DefaultSolrHighlighter.class.getPackage().getName()));  classes.addAll(getClassesForPackage(LRUCache.class.getPackage().getName()));  int checked=0;  for (  Class clazz : classes) {    if (SolrInfoMBean.class.isAssignableFrom(clazz)) {      try {        SolrInfoMBean info=(SolrInfoMBean)clazz.newInstance();        assertNotNull(info.getName());        assertNotNull(info.getDescription());        assertNotNull(info.getCategory());        if (info instanceof LRUCache) {          continue;        }        assertNotNull(info.toString());        assertNotNull(info.getDocs() + "");        assertNotNull(info.getStatistics() + "");        checked++;      } catch (      InstantiationException ex) {      }    }  }  assertTrue("there are at least 10 SolrInfoMBean that should be found in the classpath, found " + checked,checked > 10);}  }
class C{  public static Function<String,String> uppercase(){  return null;}  }
class C{  public void clientSubmissionEvents(HadoopJobInfo info){  assert nodeId != null;  addEventFromProperty("JOB requestId",info,HadoopCommonUtils.REQ_NEW_JOBID_TS_PROPERTY);  addEventFromProperty("JOB responseId",info,HadoopCommonUtils.RESPONSE_NEW_JOBID_TS_PROPERTY);  addEventFromProperty("JOB submit",info,HadoopCommonUtils.JOB_SUBMISSION_START_TS_PROPERTY);}  }
class C{  public boolean retainEntries(TIntFloatProcedure procedure){  boolean modified=false;  byte[] states=_states;  int[] keys=_set;  float[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      removeAt(i);      modified=true;    }  }  return modified;}  }
class C{  private CallLocationModel(String clz,int line,Edge edge){  super(clz,line);  SootMethod targetMethod=edge.tgt();  String sig=targetMethod.getSignature();  targetMethodSig=sig.substring(1,sig.length() - 1);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,(double)Math.floor(z1));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static void printManagementEntities(Analytics analytics) throws IOException {  Accounts accounts=analytics.management().accounts().list().execute();  if (accounts.getItems().isEmpty()) {    System.err.println("No accounts found");  } else {    printAccounts(accounts);    String firstAccountId=accounts.getItems().get(0).getId();    Webproperties webproperties=analytics.management().webproperties().list(firstAccountId).execute();    if (webproperties.getItems().isEmpty()) {      System.err.println("No webproperties found");    } else {      printWebProperties(webproperties);      String firstWebpropertyId=webproperties.getItems().get(0).getId();      Profiles profiles=analytics.management().profiles().list(firstAccountId,firstWebpropertyId).execute();      if (profiles.getItems().isEmpty()) {        System.err.println("No profiles found");      } else {        printProfiles(profiles);        String firstProfileId=profiles.getItems().get(0).getId();        Goals goals=analytics.management().goals().list(firstAccountId,firstWebpropertyId,firstProfileId).execute();        if (goals.getItems() == null || goals.getItems().isEmpty()) {          System.err.println("No goals found");        } else {          printGoals(goals);        }      }    }  }  Segments segments=analytics.management().segments().list().execute();  printSegments(segments);}  }
class C{  private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  timeStamp=in.readLong();  duration=in.readLong();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.TAGGED_TEMPLATE_STRING__TARGET:    setTarget((Expression)newValue);  return;case N4JSPackage.TAGGED_TEMPLATE_STRING__TEMPLATE:setTemplate((TemplateLiteral)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static WaitingDialog showDialog(WindowBasedTextGUI textGUI,String title,String text){  WaitingDialog waitingDialog=createDialog(title,text);  waitingDialog.showDialog(textGUI,false);  return waitingDialog;}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  public static boolean isColumnHidden(Class<?> controllerClass,String columnName){  return hiddenColumnsCache.contains(getColumnHash(controllerClass,columnName));}  }
class C{  private void gobble(Iterator iter){  if (eatTheRest) {    while (iter.hasNext()) {      tokens.add(iter.next());    }  }}  }
class C{  @Override public void afterActivation(ActivateeType activated) throws Exception {}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  public <R>Observable<R> submitTasks(Observable<Func0<R>> tasks,Scheduler scheduler){  return tasks.observeOn(scheduler,true).concatMap(null);}  }
class C{  public ConfigurationInfo(int argcount,String argnames[]){  this.argcount=argcount;  this.argnames=argnames;}  }
class C{  public FBStatisticsManager(){  super();}  }
class C{  public ListBuffer<A> append(A x){  x.getClass();  if (shared)   copy();  List<A> newLast=List.<A>of(x);  if (last != null) {    last.tail=newLast;    last=newLast;  } else {    elems=last=newLast;  }  count++;  return this;}  }
class C{  public Ifge4(){  super("ifge4",4);}  }
class C{  public boolean isPropagate(){  return propagate;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:02.559 -0500",hash_original_method="36934C37A2F983F9B004D8F963783105",hash_generated_method="FCC64B53C0D1519E199C7FE2CAF59931") public static FileChannel newFileChannel(Object stream,FileDescriptor fd,int mode){  return new FileChannelImpl(stream,fd,mode);}  }
class C{  public String[] validBaudRates(){  return new String[]{"9,600 bps"};}  }
class C{  public static byte[] convertDsaXMLDSIGtoASN1(byte[] xmldsigBytes,int size) throws IOException {  int totalSize=size * 2;  if (xmldsigBytes.length != totalSize) {    throw new IOException("Invalid XMLDSIG format of DSA signature");  }  int i;  for (i=size; i > 0 && xmldsigBytes[size - i] == 0; i--)   ;  int j=i;  if (xmldsigBytes[size - i] < 0) {    j++;  }  int k;  for (k=size; k > 0 && xmldsigBytes[totalSize - k] == 0; k--)   ;  int l=k;  if (xmldsigBytes[totalSize - k] < 0) {    l++;  }  byte[] asn1Bytes=new byte[6 + j + l];  asn1Bytes[0]=48;  asn1Bytes[1]=(byte)(4 + j + l);  asn1Bytes[2]=2;  asn1Bytes[3]=(byte)j;  System.arraycopy(xmldsigBytes,size - i,asn1Bytes,4 + j - i,i);  asn1Bytes[4 + j]=2;  asn1Bytes[5 + j]=(byte)l;  System.arraycopy(xmldsigBytes,totalSize - k,asn1Bytes,6 + j + l - k,k);  return asn1Bytes;}  }
class C{  public static GasTank readFromNBT(NBTTagCompound nbtTags){  if (nbtTags == null || nbtTags.hasNoTags()) {    return null;  }  GasTank tank=new GasTank();  tank.read(nbtTags);  return tank;}  }
class C{  public static Network readNetwork(String path2Network){  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new MatsimNetworkReader(scenario.getNetwork()).readFile(path2Network);  return scenario.getNetwork();}  }
class C{  @SuppressWarnings("TryWithIdenticalCatches") private void deliverResult(@NonNull final ChronosOperationResult<?> operationResult,@NonNull final String methodName,final boolean warnIfNoCallback){  final Class listenerClass=mServiceListener.getClass();  final Method[] listenerMethods=listenerClass.getMethods();  Method callbackMethod=null;  final Class resultClass=operationResult.getClass();  for (  Method method : listenerMethods) {    if (isCallback(method,resultClass,methodName)) {      callbackMethod=method;      try {        callbackMethod.invoke(mServiceListener,operationResult);      } catch (      IllegalAccessException e) {        Log.w(LOG_TAG,Log.getStackTraceString(e));      }catch (      InvocationTargetException e) {        Log.w(LOG_TAG,Log.getStackTraceString(e));      }    }  }  if (warnIfNoCallback && callbackMethod == null) {    Log.w(LOG_TAG,"Operation result (id=" + operationResult.getId() + "; class="+ operationResult.getClass().getName()+ ") was obtained, but there is no method in "+ mServiceListener+ " to get it");    Log.w(LOG_TAG,"Method should look like");    Log.w(LOG_TAG,"public void " + methodName + "("+ resultClass.getName()+ " result) {}");  }}  }
class C{  public void deleteGroupMember(GitlabGroup group,GitlabUser user) throws IOException {  deleteGroupMember(group.getId(),user.getId());}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (m_nodeTests != null) {    for (int i=0; i < m_nodeTests.length; i++) {      m_nodeTests[i].fixupVariables(vars,globalsSize);    }  }}  }
class C{  public CustomEditor(){  setLayout(new BorderLayout());  add(m_Label,BorderLayout.CENTER);  m_DeleteBut.addActionListener(m_InnerActionListener);  m_EditBut.addActionListener(m_InnerActionListener);  m_UpBut.addActionListener(m_InnerActionListener);  m_DownBut.addActionListener(m_InnerActionListener);  m_AddBut.addActionListener(m_InnerActionListener);  m_ElementList.addListSelectionListener(m_InnerSelectionListener);  m_ElementList.addMouseListener(m_InnerMouseListener);  m_AddBut.setToolTipText("Add the current item to the list");  m_DeleteBut.setToolTipText("Delete the selected list item");  m_EditBut.setToolTipText("Edit the selected list item");  m_UpBut.setToolTipText("Move the selected item(s) one up");  m_DownBut.setToolTipText("Move the selected item(s) one down");}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  @NonNull public static Animator moveTo(float x,float y,float duration,@Nullable Interpolator interpolator){  return move(x,y,duration,interpolator,ActionType.MOVE_TO);}  }
class C{  private static byte[] encode3to4(final byte[] source,final int srcOffset,final int numSigBytes,final byte[] destination,final int destOffset,final int options){  final byte[] ALPHABET=getAlphabet(options);  final int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public ISchedulingRule deleteRule(IResource resource){  if (resource.getType() == IResource.ROOT)   return root;  return factoryFor(resource).deleteRule(resource);}  }
class C{  @Override public boolean needsMaterialization(){  return false;}  }
class C{  public static void handleError(String message,Throwable throwable,boolean show){  IStatus status=new Status(IStatus.ERROR,getPluginId(),message,throwable);  int style=StatusManager.LOG;  if (show) {    style|=StatusManager.SHOW;  }  StatusManager.getManager().handle(status,style);}  }
class C{  public void deleteLogicalRouterPort(String id,FutureCallback<Void> responseCallback) throws IOException {  deleteAsync(LOGICAL_ROUTER_PORTS_BASE_PATH + "/" + id,HttpStatus.SC_OK,responseCallback);}  }
class C{  private void updateStats(){  if (lastValidInfo != null) {    stats.setText("| " + Stats.makeFullStats(lastValidInfo));  } else {    stats.setText("| Week: - | Day: - | Hour: -");  }}  }
class C{  public static String toDecimal(double value){  return toDecimal(value,'.',',');}  }
class C{  protected String lifecycleTrace(String lmethod,String cmethod){  StringBuffer sb=new StringBuffer();  lifecycleTrace(lmethod,cmethod,component,sb);  return (sb.toString());}  }
class C{  public static Method parseSpecMethod(String meth){  try {    CharStream input=new ANTLRStringStream(meth);    DroidSafeLexer lexer=new DroidSafeLexer(input);    CommonTokenStream tokens=new CommonTokenStream(lexer);    DroidSafeParser parser=new DroidSafeParser(tokens);    DroidSafeParser.api_call_return method=parser.api_call();    CommonTree t=(CommonTree)method.getTree();    CommonTreeNodeStream nodes=new CommonTreeNodeStream(t);    SpecCreator specCreator=new SpecCreator(nodes);    specCreator.setSingleMethodParse();    return specCreator.api_call();  } catch (  Exception e) {    logger.error("Error while parsing spec method from Action: " + meth);    droidsafe.main.Main.exit(1);  }  return null;}  }
class C{  public AnnotationsAttribute(ConstPool cp,String attrname,byte[] info){  super(cp,attrname,info);}  }
class C{  ThaiBuddhistDate(LocalDate isoDate){  Objects.requireNonNull(isoDate,"isoDate");  this.isoDate=isoDate;}  }
class C{  public static void dismissProgressDialog(){  if (mProgressDialog != null) {    mProgressDialog.dismiss();  }  mProgressDialog=null;}  }
class C{  @Override public boolean isEvalBIgnoredPunctuationTag(String str){  return Filters.collectionAcceptFilter(tags).accept(str);}  }
class C{  protected RegularExpressionBodyImpl(){  super();}  }
class C{  private boolean checkAssignmentIfSpilled(CompoundInterval i,CompoundInterval spill){  Register r=spill.getAssignment(regAllocState);  GenericRegisterRestrictions restrict=ir.stackManager.getRestrictions();  if (restrict.isForbidden(i.getRegister(),r))   return false;  CompoundInterval rI=regAllocState.getInterval(r);  CompoundInterval cache=rI.removeIntervalsAndCache(spill);  boolean result=!rI.intersects(i);  rI.addAll(cache);  return result;}  }
class C{  public MultiMatchQueryBuilder tieBreaker(float tieBreaker){  this.tieBreaker=tieBreaker;  return this;}  }
class C{  public void actionPerformed(ActionEvent e){  setTitleText("");  if (e.getActionCommand().equals("Connect")) {    if (connected) {      setTitleText("MQTT session already active !");    } else {      connect.setEnabled(false);      led.setAmber();      connected=false;      new Thread(this).start();    }  } else   if (e.getActionCommand().equals("Disconnect")) {    if (connected) {      disconnect();    } else {      setTitleText("MQTT client not connected !");    }  } else   if (e.getActionCommand().equals("History")) {    historyComp.enableHistory();  }}  }
class C{  public static boolean isTypeTree(Tree tree){  return typeTreeKinds().contains(tree.getKind());}  }
class C{  public int findNextEmpty(@Nonnull IInventory inv){  for (int i=0; i < inv.getSizeInventory(); ++i) {    if (inv.getStackInSlot(i) == null)     return i;  }  return -1;}  }
class C{  @Override public void flushBuffer() throws IOException {  if (debug > 1) {    System.out.println("flush buffer @ GZipServletResponseWrapper");  }  ((CompressionResponseStream)stream).flush();}  }
class C{  public void initEncoderWithUploader(IChunkUploader uploader) throws IOException {  writer=new OpusWriter(uploader);  IntBuffer error=IntBuffer.allocate(4);  this.opusEncoder=JNAOpus.INSTANCE.opus_encoder_create(SpeechConfiguration.SAMPLE_RATE,SpeechConfiguration.AUDIO_CHANNELS,JNAOpus.OPUS_APPLICATION_VOIP,error);}  }
class C{  public SystemWebViewEngine(Context context,CordovaPreferences preferences){  this(new SystemWebView(context));}  }
class C{  public void msrpTransferError(String msgId,String error,MsrpSession.TypeMsrpChunk typeMsrpChunk){  try {    if (isSessionInterrupted() || getDialogPath().isSessionTerminated()) {      return;    }    if (sLogger.isActivated()) {      sLogger.debug("Data transfer error: ".concat(error));    }    closeSession(ImsServiceSession.TerminationReason.TERMINATION_BY_SYSTEM);    closeMediaSession();    getImsService().getImsModule().getCapabilityService().requestContactCapabilities(getRemoteContact());    removeSession();    if (isFileTransferred()) {      return;    }    ContactId contact=getRemoteContact();    for (    ImsSessionListener listener : getListeners()) {      ((FileSharingSessionListener)listener).onTransferError(new FileSharingError(FileSharingError.MEDIA_TRANSFER_FAILED,error),contact);    }  } catch (  PayloadException e) {    sLogger.error(new StringBuilder("Failed to handle msrp error").append(error).append(" for message ").append(msgId).toString(),e);  }catch (  NetworkException e) {    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }  }catch (  RuntimeException e) {    sLogger.error(new StringBuilder("Failed to handle msrp error").append(error).append(" for message ").append(msgId).toString(),e);  }}  }
class C{  public boolean equals(Object value){  if (value instanceof FieldKey) {    return equals((FieldKey)value);  }  return false;}  }
class C{  private void runSample(){  List<String> labels=new ArrayList<String>();  labels.add(MIGRATED_LABEL);  List<MailItemProperty> properties=new ArrayList<MailItemProperty>();  properties.add(MailItemProperty.UNREAD);  properties.add(MailItemProperty.INBOX);  MailItemEntry[] entries=new MailItemEntry[ITEMS_TO_BATCH];  for (int i=0; i < entries.length; i++) {    entries[i]=setupMailItem(rfcTxt,properties,labels);  }  LOGGER.log(Level.INFO,"Inserting " + Integer.toString(ITEMS_TO_BATCH) + " mail items in a batch.");  try {    MailItemFeed feed=batchInsertMailItems(entries);    int failedInsertions=0, successfulInsertions=0;    for (    MailItemEntry returnedEntry : feed.getEntries()) {      if (BatchUtils.isFailure(returnedEntry)) {        BatchStatus status=BatchUtils.getBatchStatus(returnedEntry);        LOGGER.log(Level.SEVERE,"Entry " + BatchUtils.getBatchId(returnedEntry) + " failed insertion: "+ status.getCode()+ " "+ status.getReason());        failedInsertions++;      } else {        successfulInsertions++;      }    }    LOGGER.log(Level.INFO,"Batch insertion: " + Integer.toString(successfulInsertions) + " succeeded, "+ Integer.toString(failedInsertions)+ " failed.");  } catch (  IOException e) {    LOGGER.log(Level.SEVERE,"Caught IOException: " + e.toString());    e.printStackTrace();  }catch (  ServiceException e) {    LOGGER.log(Level.SEVERE,"Caught ServiceException: " + e.toString());    e.printStackTrace();  }}  }
class C{  public <AE extends LayoutType>Class<AE> genPrimUserArray1DImpl(final Class<?> elementInterfaceClass,final Class<AE> userDefinedArrayClass){  try {    Class<AE> implCls=implClassloader.loadPrim1DClass(elementInterfaceClass,userDefinedArrayClass);    unsafe.ensureClassInitialized(implCls);    Field f=implCls.getDeclaredField("unsafe");    unsafe.putObject(unsafe.staticFieldBase(f),unsafe.staticFieldOffset(f),unsafe);    return implCls;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void clear(){  headers.clear();}  }
class C{  public DefaultRefactoringDescriptor(final String id,final String project,final String description,final String comment,final Map arguments,final int flags){  super(id,project,description,comment,flags);  Assert.isNotNull(arguments);  fArguments=Collections.unmodifiableMap(new HashMap(arguments));}  }
class C{  public ConversationSelectedListener(Context ctx,Server server,TextView titleView,ConversationPagerAdapter adapter,ConversationIndicator indicator){  this.context=ctx;  this.server=server;  this.titleView=titleView;  this.indicator=indicator;  this.adapter=adapter;}  }
class C{  @Override protected int computeHorizontalScrollExtent(){  return 1;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == bOK) {    dispose();    return;  } else   if (e.getSource() == bCancel) {    dispose();    return;  }  try {    if (e.getSource() == primary1) {      CompiereTheme.primary1=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("Primary1"),CompiereTheme.primary1));    } else     if (e.getSource() == primary2) {      CompiereTheme.primary2=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("Primary2"),CompiereTheme.primary2));    } else     if (e.getSource() == primary3) {      CompiereTheme.primary3=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("Primary3"),CompiereTheme.primary3));    } else     if (e.getSource() == secondary1) {      CompiereTheme.secondary1=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("Secondary1"),CompiereTheme.secondary1));    } else     if (e.getSource() == secondary2) {      CompiereTheme.secondary2=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("Secondary2"),CompiereTheme.secondary2));    } else     if (e.getSource() == secondary3) {      CompiereTheme.secondary3=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("Secondary3"),CompiereTheme.secondary3));    } else     if (e.getSource() == error) {      CompiereTheme.error=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("Error"),CompiereTheme.error));    } else     if (e.getSource() == mandatory) {      CompiereTheme.mandatory=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("Mandatory"),CompiereTheme.mandatory));    } else     if (e.getSource() == inactive) {      CompiereTheme.inactive=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("Inactive"),CompiereTheme.inactive));    } else     if (e.getSource() == info) {      CompiereTheme.info=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("Info"),CompiereTheme.info));    } else     if (e.getSource() == black) {      CompiereTheme.black=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("Black"),CompiereTheme.black));    } else     if (e.getSource() == white) {      CompiereTheme.white=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("White"),CompiereTheme.white));    } else     if (e.getSource() == txt_ok) {      CompiereTheme.txt_ok=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("TextOK"),CompiereTheme.txt_ok));    } else     if (e.getSource() == txt_error) {      CompiereTheme.txt_error=new ColorUIResource(JColorChooser.showDialog(this,s_res.getString("TextIssue"),CompiereTheme.txt_error));    } else     if (e.getSource() == controlFont) {      CompiereTheme.controlFont=new FontUIResource(FontChooser.showDialog(this,s_res.getString("ControlFont"),CompiereTheme.controlFont));    } else     if (e.getSource() == systemFont) {      CompiereTheme.systemFont=new FontUIResource(FontChooser.showDialog(this,s_res.getString("SystemFont"),CompiereTheme.systemFont));    } else     if (e.getSource() == userFont) {      CompiereTheme.userFont=new FontUIResource(FontChooser.showDialog(this,s_res.getString("UserFont"),CompiereTheme.userFont));    } else     if (e.getSource() == smallFont) {      CompiereTheme.smallFont=new FontUIResource(FontChooser.showDialog(this,s_res.getString("SmallFont"),CompiereTheme.smallFont));    } else     if (e.getSource() == menuFont) {      CompiereTheme.menuFont=new FontUIResource(FontChooser.showDialog(this,s_res.getString("MenuFont"),CompiereTheme.menuFont));    } else     if (e.getSource() == windowFont) {      CompiereTheme.windowFont=new FontUIResource(FontChooser.showDialog(this,s_res.getString("WindowTitleFont"),CompiereTheme.windowFont));    }  } catch (  Exception ee) {  }  dynInit();}  }
class C{  public EncodedMethod(CstMethodRef method,int accessFlags,DalvCode code,TypeList throwsList){  super(accessFlags);  if (method == null) {    throw new NullPointerException("method == null");  }  this.method=method;  if (code == null) {    this.code=null;  } else {    boolean isStatic=(accessFlags & AccessFlags.ACC_STATIC) != 0;    this.code=new CodeItem(method,code,isStatic,throwsList);  }}  }
class C{  private static synchronized void removeShutdownHooks(){  Iterator it=shutdownHooks_.iterator();  boolean vmShutdown=false;  while (it.hasNext()) {    Thread t=(Thread)it.next();    if (t.equals(Thread.currentThread()))     vmShutdown=true;  }  it=shutdownHooks_.iterator();  while (!vmShutdown && it.hasNext()) {    Thread hook=(Thread)it.next();    it.remove();    try {      Runtime.getRuntime().removeShutdownHook(hook);    } catch (    IllegalStateException alreadyShuttingDownVm) {    }  }}  }
class C{  public static boolean localDeviceHasDefaultNamingConvention(String deviceName,List<String> claimedVolumeNames){  if (!deviceName.startsWith(VPlexApiConstants.DEVICE_PREFIX)) {    s_logger.info("Local device {} does not start with the expected prefix",deviceName);    return false;  }  if (deviceName.equals(VPlexApiConstants.DEVICE_PREFIX.length())) {    s_logger.info("Local device name {} consists only of the device prefix",deviceName);    return false;  }  if (claimedVolumeNames.size() != 1) {    s_logger.info("Too many claimed volumes {} for local device {}",claimedVolumeNames,deviceName);    return false;  }  String claimedVolumeName=claimedVolumeNames.get(0);  int startIndex=VPlexApiConstants.DEVICE_PREFIX.length();  if (!claimedVolumeName.equals(deviceName.substring(startIndex))) {    s_logger.info("Local device name {} does not conform to default naming convention",deviceName);    return false;  }  return true;}  }
class C{  public static File namesDir(){  lock.readLock().lock();  try {    return (names_dir != null) ? names_dir : new File(dataDir(),DEFAULT_DIR_NAME_NAMES);  }  finally {    lock.readLock().unlock();  }}  }
class C{  public void connect(SocketAddress endpoint,int timeout) throws IOException {  if (endpoint == null)   throw new IllegalArgumentException("connect: The address can't be null");  if (timeout < 0)   throw new IllegalArgumentException("connect: timeout can't be negative");  if (isClosed())   throw new SocketException("Socket is closed");  if (!oldImpl && isConnected())   throw new SocketException("already connected");  if (!(endpoint instanceof InetSocketAddress))   throw new IllegalArgumentException("Unsupported address type");  InetSocketAddress epoint=(InetSocketAddress)endpoint;  InetAddress addr=epoint.getAddress();  int port=epoint.getPort();  checkAddress(addr,"connect");  SecurityManager security=System.getSecurityManager();  if (security != null) {    if (epoint.isUnresolved())     security.checkConnect(epoint.getHostName(),port); else     security.checkConnect(addr.getHostAddress(),port);  }  if (!created)   createImpl(true);  if (!oldImpl)   impl.connect(epoint,timeout); else   if (timeout == 0) {    if (epoint.isUnresolved())     impl.connect(addr.getHostName(),port); else     impl.connect(addr,port);  } else   throw new UnsupportedOperationException("SocketImpl.connect(addr, timeout)");  connected=true;  bound=true;}  }
class C{  @Override public boolean supportsConvert(){  debugCodeCall("supportsConvert");  return true;}  }
class C{  public List<PlanNodeTable> _queryRouteLineNodeTable_PlanNodes(Long typeID){synchronized (this) {    if (routeLineNodeTable_PlanNodesQuery == null) {      QueryBuilder<PlanNodeTable> queryBuilder=queryBuilder();      queryBuilder.where(Properties.TypeID.eq(null));      routeLineNodeTable_PlanNodesQuery=queryBuilder.build();    }  }  Query<PlanNodeTable> query=routeLineNodeTable_PlanNodesQuery.forCurrentThread();  query.setParameter(0,typeID);  return query.list();}  }
class C{  public static void disable(){  ExecutionTracer tracer=ExecutionTracer.getExecutionTracer();  tracer.disabled=true;}  }
class C{  public static Function lower(Object column){  return new Function(format("lower(%s)",column));}  }
class C{  public void historicalData(int reqId,String dateString,double open,double high,double low,double close,int volume,int tradeCount,double vwap,boolean hasGaps){  try {    volume=volume * 100;    if (m_historyDataRequests.containsKey(reqId)) {      Tradestrategy tradestrategy=m_historyDataRequests.get(reqId);      if (dateString.contains("finished-")) {        CandleSeries candleSeries=tradestrategy.getStrategyData().getBaseCandleSeries();        m_tradePersistentModel.persistCandleSeries(candleSeries);        _log.debug("HistoricalData complete Req Id: " + reqId + " Symbol: "+ tradestrategy.getContract().getSymbol()+ " Tradingday: "+ tradestrategy.getTradingday().getOpen()+ " candles to saved: "+ candleSeries.getItemCount()+ " Contract Tradestrategies size:: "+ tradestrategy.getContract().getTradestrategies().size());        if (tradestrategy.getTrade() && !this.isBrokerDataOnly()) {          this.fireHistoricalDataComplete(tradestrategy);        } else {synchronized (m_historyDataRequests) {            m_historyDataRequests.remove(reqId);            m_historyDataRequests.notify();          }        }      } else {        ZonedDateTime date=null;        if (dateString.length() == 8) {          date=TradingCalendar.getZonedDateTimeFromDateString(dateString,"yyyyMMdd",TradingCalendar.MKT_TIMEZONE);        } else {          date=TradingCalendar.getZonedDateTimeFromMilli((Long.parseLong(dateString) * 1000));        }        if (tradestrategy.getBarSize() > 3600) {          date=TradingCalendar.getDateAtTime(date,tradestrategy.getTradingday().getOpen());        }        if (tradestrategy.getTradingday().getClose().isAfter(date)) {          if (backfillUseRTH == 1 && !TradingCalendar.isMarketHours(tradestrategy.getTradingday().getOpen(),tradestrategy.getTradingday().getClose(),date))           return;          BigDecimal price=(new BigDecimal(close)).setScale(SCALE,BigDecimal.ROUND_HALF_EVEN);          tradestrategy.getStrategyData().getBaseCandleSeries().getContract().setLastAskPrice(price);          tradestrategy.getStrategyData().getBaseCandleSeries().getContract().setLastBidPrice(price);          tradestrategy.getStrategyData().getBaseCandleSeries().getContract().setLastPrice(price);          tradestrategy.getStrategyData().buildCandle(date,open,high,low,close,volume,vwap,tradeCount,1,null);        }      }    } else {      _log.error("HistoricalData request not found for Req Id: " + reqId + " Date: "+ dateString);    }  } catch (  Exception ex) {    error(reqId,3260,ex.getMessage());  }}  }
class C{  private byte[] zipFiles(File directory,String[] files) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ZipOutputStream zos=new ZipOutputStream(baos);  addFolderToZip("",directory.getPath(),zos);  zos.flush();  baos.flush();  zos.close();  baos.close();  return baos.toByteArray();}  }
class C{  public SampleVcpcFastRunner(GraphSource graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public IElementType capturePodBlock(){  CharSequence buffer=getBuffer();  int tokenStart=getTokenEnd();  setTokenStart(tokenStart);  int bufferEnd=getBufferEnd();  int currentPosition=tokenStart;  int linePos=currentPosition;  int linesNumber=0;  while (true) {    while (linePos < bufferEnd && buffer.charAt(linePos) != '\n') {      linePos++;    }    if (linePos < bufferEnd && buffer.charAt(linePos) == '\n') {      linePos++;    }    CharSequence line=buffer.subSequence(currentPosition,linePos);    currentPosition=linePos;    if (linePos == bufferEnd || StringUtil.startsWith(line,"=cut") && linesNumber > 0) {      if (linePos < bufferEnd) {        linePos--;      }      setTokenEnd(linePos);      break;    }    linesNumber++;  }  return POD;}  }
class C{  public static void restart(String name){  SystemProperties.set("ctl.restart",name);}  }
class C{  @DELETE @Path("/{id}/namespace") public Response unsetTenantNamespace(@PathParam("id") URI id){  TenantOrg tenant=getTenantById(id,true);  String origNamespace=(tenant.getNamespace() == null) ? "" : tenant.getNamespace();  tenant.setNamespace("");  _dbClient.persistObject(tenant);  auditOp(OperationTypeEnum.UNSET_TENANT_NAMESPACE,true,null,id.toString(),tenant.getLabel(),origNamespace);  return Response.ok().build();}  }
class C{  public void onConfigurationChanged(Configuration newConfig){}  }
class C{  private void load(File file) throws IOException {  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    String line=reader.readLine();    String[] tokens=line.split("\\s+");    if (tokens.length == 2) {      M=1;      N=Integer.parseInt(tokens[0]);      K=Integer.parseInt(tokens[1]);    } else     if (tokens.length == 3) {      M=Integer.parseInt(tokens[0]);      N=Integer.parseInt(tokens[1]);      K=Integer.parseInt(tokens[2]);    } else {      throw new IOException("expected two or three values on first line");    }    checkArguments();    neighbors=new int[M][N][K + 1];    function=new double[M][N][1 << (K + 1)];    for (int i=0; i < M; i++) {      for (int j=0; j < N; j++) {        for (int k=0; k < K + 1; k++) {          neighbors[i][j][k]=Integer.parseInt(reader.readLine());        }      }    }    for (int i=0; i < M; i++) {      for (int j=0; j < N; j++) {        for (int k=0; k < (1 << (K + 1)); k++) {          function[i][j][k]=Double.parseDouble(reader.readLine());        }      }    }  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public Pointer withByteOffset(long byteOffset){  return new Pointer(this,byteOffset);}  }
class C{  public PHDRMetaDataTrackSubDescriptorBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,PHDRMetaDataTrackSubDescriptor.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }}  }
class C{  public static void main(String... args) throws Exception {  final JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();  final List<String> compilerFlags=new ArrayList();  compilerFlags.add("-Xlint:all");  compilerFlags.add("-g:none");  String expression="System.getProperty(\"java.vendor\")";  while (true) {    expression=JOptionPane.showInputDialog("Please enter a Java expression",expression);    if (expression == null)     return;    long time=System.currentTimeMillis();    Object result=evalExpression(compiler,null,compilerFlags,expression);    time=System.currentTimeMillis() - time;    System.out.format("Elapsed time %dms %n",time);    if (result == ERROR)     System.out.format("Error compiling \"%s\"%n",expression); else     System.out.format("%s => %s%n",expression,result);  }}  }
class C{  public void finishedMovingUnits(BoardViewEvent b){}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  MinAggregator minAggregator=(MinAggregator)aggregator;  if (!aggregator.isFirstTime()) {    agg(minAggregator.aggVal);    firstTime=false;  }}  }
class C{  public void tagDefineBitsJPEG2(int id,InputStream jpegImage) throws IOException {  if (tags != null) {    tags.tagDefineBitsJPEG2(id,jpegImage);  }}  }
class C{  @DELETE @Path("/policies/{id}") public Response deletePolicy(@Context final HttpServletRequest httpServletRequest,@PathParam("id") String id){  return RestApiResponseHandler.getResponse204Ok();}  }
class C{  public static String addToCart(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCart cart=getCartObject(request);  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);  String controlDirective=null;  Map<String,Object> result=null;  String productId=null;  String parentProductId=null;  String itemType=null;  String itemDescription=null;  String productCategoryId=null;  String priceStr=null;  BigDecimal price=null;  String quantityStr=null;  BigDecimal quantity=BigDecimal.ZERO;  String reservStartStr=null;  String reservEndStr=null;  Timestamp reservStart=null;  Timestamp reservEnd=null;  String reservLengthStr=null;  BigDecimal reservLength=null;  String reservPersonsStr=null;  BigDecimal reservPersons=null;  String accommodationMapId=null;  String accommodationSpotId=null;  String shipBeforeDateStr=null;  String shipAfterDateStr=null;  Timestamp shipBeforeDate=null;  Timestamp shipAfterDate=null;  String numberOfDay=null;  String catalogId=CatalogWorker.getCurrentCatalogId(request);  Locale locale=UtilHttp.getLocale(request);  Map<String,Object> paramMap=UtilHttp.getCombinedMap(request);  String itemGroupNumber=(String)paramMap.get("itemGroupNumber");  String shoppingListId=(String)paramMap.get("shoppingListId");  String shoppingListItemSeqId=(String)paramMap.get("shoppingListItemSeqId");  if (paramMap.containsKey("ADD_PRODUCT_ID")) {    productId=(String)paramMap.remove("ADD_PRODUCT_ID");  } else   if (paramMap.containsKey("add_product_id")) {    Object object=paramMap.remove("add_product_id");    try {      productId=(String)object;    } catch (    ClassCastException e) {      List<String> productList=UtilGenerics.checkList(object);      productId=productList.get(0);    }  }  if (paramMap.containsKey("PRODUCT_ID")) {    parentProductId=(String)paramMap.remove("PRODUCT_ID");  } else   if (paramMap.containsKey("product_id")) {    parentProductId=(String)paramMap.remove("product_id");  }  Debug.logInfo("adding item product " + productId,module);  Debug.logInfo("adding item parent product " + parentProductId,module);  if (paramMap.containsKey("ADD_CATEGORY_ID")) {    productCategoryId=(String)paramMap.remove("ADD_CATEGORY_ID");  } else   if (paramMap.containsKey("add_category_id")) {    productCategoryId=(String)paramMap.remove("add_category_id");  }  if (productCategoryId != null && productCategoryId.length() == 0) {    productCategoryId=null;  }  if (paramMap.containsKey("ADD_ITEM_TYPE")) {    itemType=(String)paramMap.remove("ADD_ITEM_TYPE");  } else   if (paramMap.containsKey("add_item_type")) {    itemType=(String)paramMap.remove("add_item_type");  }  if (UtilValidate.isEmpty(productId)) {    if (UtilValidate.isEmpty(itemType)) {      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.noProductInfoPassed",locale));      return "success";    }  } else {    try {      String pId=ProductWorker.findProductId(delegator,productId);      if (pId != null) {        productId=pId;      }    } catch (    Throwable e) {      Debug.logWarning(e,module);    }  }  if (paramMap.containsKey("ADD_ITEM_DESCRIPTION")) {    itemDescription=(String)paramMap.remove("ADD_ITEM_DESCRIPTION");  } else   if (paramMap.containsKey("add_item_description")) {    itemDescription=(String)paramMap.remove("add_item_description");  }  if (itemDescription != null && itemDescription.length() == 0) {    itemDescription=null;  }  ProductConfigWrapper configWrapper=null;  configWrapper=ProductConfigWorker.getProductConfigWrapper(productId,cart.getCurrency(),request);  if (configWrapper != null) {    if (paramMap.containsKey("configId")) {      try {        configWrapper.loadConfig(delegator,(String)paramMap.remove("configId"));      } catch (      Exception e) {        Debug.logWarning(e,"Could not load configuration",module);      }    } else {      ProductConfigWorker.fillProductConfigWrapper(configWrapper,request);    }    if (!configWrapper.isCompleted()) {      request.setAttribute("product_id",productId);      request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.configureProductBeforeAddingToCart",locale));      return "product";    } else {      ProductConfigWorker.storeProductConfigWrapper(configWrapper,delegator);    }  }  if (ProductWorker.isVirtual(delegator,productId)) {    if ("VV_FEATURETREE".equals(ProductWorker.getProductVirtualVariantMethod(delegator,productId))) {      List<String> selectedFeatures=new LinkedList<String>();      Enumeration<String> paramNames=UtilGenerics.cast(request.getParameterNames());      while (paramNames.hasMoreElements()) {        String paramName=paramNames.nextElement();        if (paramName.startsWith("FT")) {          selectedFeatures.add(request.getParameterValues(paramName)[0]);        }      }      if (UtilValidate.isEmpty(selectedFeatures)) {        request.setAttribute("paramMap",paramMap);        request.setAttribute("product_id",productId);        request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.chooseVariationBeforeAddingToCart",locale));        return "product";      }      String variantProductId=ProductWorker.getVariantFromFeatureTree(productId,selectedFeatures,delegator);      if (UtilValidate.isNotEmpty(variantProductId)) {        productId=variantProductId;      } else {        request.setAttribute("paramMap",paramMap);        request.setAttribute("product_id",productId);        request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.incompatibilityVariantFeature",locale));        return "product";      }    } else {      request.setAttribute("paramMap",paramMap);      request.setAttribute("product_id",productId);      request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.chooseVariationBeforeAddingToCart",locale));      return "product";    }  }  if (paramMap.containsKey("PRICE")) {    priceStr=(String)paramMap.remove("PRICE");  } else   if (paramMap.containsKey("price")) {    priceStr=(String)paramMap.remove("price");  }  if (priceStr == null) {    priceStr="0";  }  if ("ASSET_USAGE_OUT_IN".equals(ProductWorker.getProductTypeId(delegator,productId))) {    if (paramMap.containsKey("numberOfDay")) {      numberOfDay=(String)paramMap.remove("numberOfDay");      reservStart=UtilDateTime.addDaysToTimestamp(UtilDateTime.nowTimestamp(),1);      reservEnd=UtilDateTime.addDaysToTimestamp(reservStart,Integer.valueOf(numberOfDay));    }  }  if ("ASSET_USAGE".equals(ProductWorker.getProductTypeId(delegator,productId)) || "ASSET_USAGE_OUT_IN".equals(ProductWorker.getProductTypeId(delegator,productId))) {    if (paramMap.containsKey("reservStart")) {      reservStartStr=(String)paramMap.remove("reservStart");      if (reservStartStr.length() == 10)       reservStartStr+=" 00:00:00.000000000";      if (reservStartStr.length() > 0) {        try {          reservStart=java.sql.Timestamp.valueOf(reservStartStr);        } catch (        Exception e) {          Debug.logWarning(e,"Problems parsing Reservation start string: " + reservStartStr,module);          reservStart=null;          request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.rental.startDate",locale));          return "error";        }      } else       reservStart=null;    }    if (paramMap.containsKey("reservEnd")) {      reservEndStr=(String)paramMap.remove("reservEnd");      if (reservEndStr.length() == 10)       reservEndStr+=" 00:00:00.000000000";      if (reservEndStr.length() > 0) {        try {          reservEnd=java.sql.Timestamp.valueOf(reservEndStr);        } catch (        Exception e) {          Debug.logWarning(e,"Problems parsing Reservation end string: " + reservEndStr,module);          reservEnd=null;          request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.rental.endDate",locale));          return "error";        }      } else       reservEnd=null;    }    if (reservStart != null && reservEnd != null) {      reservLength=new BigDecimal(UtilDateTime.getInterval(reservStart,reservEnd)).divide(new BigDecimal("86400000"),generalRounding);    }    if (reservStart != null && paramMap.containsKey("reservLength")) {      reservLengthStr=(String)paramMap.remove("reservLength");      try {        reservLength=(BigDecimal)ObjectType.simpleTypeConvert(reservLengthStr,"BigDecimal",null,locale);      } catch (      Exception e) {        Debug.logWarning(e,"Problems parsing reservation length string: " + reservLengthStr,module);        reservLength=BigDecimal.ONE;        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderReservationLengthShouldBeAPositiveNumber",locale));        return "error";      }    }    if (reservStart != null && paramMap.containsKey("reservPersons")) {      reservPersonsStr=(String)paramMap.remove("reservPersons");      try {        reservPersons=(BigDecimal)ObjectType.simpleTypeConvert(reservPersonsStr,"BigDecimal",null,locale);      } catch (      Exception e) {        Debug.logWarning(e,"Problems parsing reservation number of persons string: " + reservPersonsStr,module);        reservPersons=BigDecimal.ONE;        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderNumberOfPersonsShouldBeOneOrLarger",locale));        return "error";      }    }    if (UtilValidate.isEmpty(reservStart) && UtilValidate.isEmpty(reservLength) && UtilValidate.isEmpty(reservPersons)) {      request.setAttribute("product_id",productId);      request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.enterBookingInforamtionBeforeAddingToCart",locale));      return "product";    }    if ((paramMap.containsKey("accommodationMapId")) && (paramMap.containsKey("accommodationSpotId"))) {      accommodationMapId=(String)paramMap.remove("accommodationMapId");      accommodationSpotId=(String)paramMap.remove("accommodationSpotId");    }  }  if (paramMap.containsKey("QUANTITY")) {    quantityStr=(String)paramMap.remove("QUANTITY");  } else   if (paramMap.containsKey("quantity")) {    quantityStr=(String)paramMap.remove("quantity");  }  if (UtilValidate.isEmpty(quantityStr)) {    quantityStr="1";  }  try {    price=(BigDecimal)ObjectType.simpleTypeConvert(priceStr,"BigDecimal",null,locale);  } catch (  Exception e) {    Debug.logWarning(e,"Problems parsing price string: " + priceStr,module);    price=null;  }  try {    quantity=(BigDecimal)ObjectType.simpleTypeConvert(quantityStr,"BigDecimal",null,locale);    if (!ProductWorker.isDecimalQuantityOrderAllowed(delegator,productId,cart.getProductStoreId())) {      BigDecimal remainder=quantity.remainder(BigDecimal.ONE);      if (remainder.compareTo(BigDecimal.ZERO) != 0) {        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.quantityInDecimalNotAllowed",locale));        return "error";      }      quantity=quantity.setScale(0,UtilNumber.getBigDecimalRoundingMode("order.rounding"));    } else {      quantity=quantity.setScale(UtilNumber.getBigDecimalScale("order.decimals"),UtilNumber.getBigDecimalRoundingMode("order.rounding"));    }  } catch (  Exception e) {    Debug.logWarning(e,"Problems parsing quantity string: " + quantityStr,module);    quantity=BigDecimal.ONE;  }  String selectedAmountStr=null;  if (paramMap.containsKey("ADD_AMOUNT")) {    selectedAmountStr=(String)paramMap.remove("ADD_AMOUNT");  } else   if (paramMap.containsKey("add_amount")) {    selectedAmountStr=(String)paramMap.remove("add_amount");  }  BigDecimal amount=null;  if (UtilValidate.isNotEmpty(selectedAmountStr)) {    try {      amount=(BigDecimal)ObjectType.simpleTypeConvert(selectedAmountStr,"BigDecimal",null,locale);    } catch (    Exception e) {      Debug.logWarning(e,"Problem parsing amount string: " + selectedAmountStr,module);      amount=null;    }  } else {    amount=BigDecimal.ZERO;  }  if ((ProductWorker.isAmountRequired(delegator,productId)) && (amount == null || amount.doubleValue() == 0.0)) {    request.setAttribute("product_id",productId);    request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.enterAmountBeforeAddingToCart",locale));    return "product";  }  shipBeforeDateStr=(String)paramMap.remove("shipBeforeDate");  if (UtilValidate.isNotEmpty(shipBeforeDateStr)) {    if (shipBeforeDateStr.length() == 10)     shipBeforeDateStr+=" 00:00:00.000";    try {      shipBeforeDate=java.sql.Timestamp.valueOf(shipBeforeDateStr);    } catch (    IllegalArgumentException e) {      Debug.logWarning(e,"Bad shipBeforeDate input: " + e.getMessage(),module);      shipBeforeDate=null;    }  }  shipAfterDateStr=(String)paramMap.remove("shipAfterDate");  if (UtilValidate.isNotEmpty(shipAfterDateStr)) {    if (shipAfterDateStr.length() == 10)     shipAfterDateStr+=" 00:00:00.000";    try {      shipAfterDate=java.sql.Timestamp.valueOf(shipAfterDateStr);    } catch (    IllegalArgumentException e) {      Debug.logWarning(e,"Bad shipAfterDate input: " + e.getMessage(),module);      shipAfterDate=null;    }  }  List<String> surveyResponses=null;  if (productId != null) {    String productStoreId=ProductStoreWorker.getProductStoreId(request);    List<GenericValue> productSurvey=ProductStoreWorker.getProductSurveys(delegator,productStoreId,productId,"CART_ADD",parentProductId);    if (UtilValidate.isNotEmpty(productSurvey)) {      GenericValue survey=EntityUtil.getFirst(productSurvey);      String surveyResponseId=(String)request.getAttribute("surveyResponseId");      if (surveyResponseId != null) {        surveyResponses=UtilMisc.toList(surveyResponseId);      } else {        String origParamMapId=UtilHttp.stashParameterMap(request);        Map<String,Object> surveyContext=UtilMisc.<String,Object>toMap("_ORIG_PARAM_MAP_ID_",origParamMapId);        GenericValue userLogin=cart.getUserLogin();        String partyId=null;        if (userLogin != null) {          partyId=userLogin.getString("partyId");        }        String formAction="/additemsurvey";        String nextPage=RequestHandler.getOverrideViewUri(request.getPathInfo());        if (nextPage != null) {          formAction=formAction + "/" + nextPage;        }        ProductStoreSurveyWrapper wrapper=new ProductStoreSurveyWrapper(survey,partyId,surveyContext);        request.setAttribute("surveyWrapper",wrapper);        request.setAttribute("surveyAction",formAction);        return "survey";      }    }  }  if (surveyResponses != null) {    paramMap.put("surveyResponses",surveyResponses);  }  GenericValue productStore=ProductStoreWorker.getProductStore(request);  if (productStore != null) {    String addToCartRemoveIncompat=productStore.getString("addToCartRemoveIncompat");    String addToCartReplaceUpsell=productStore.getString("addToCartReplaceUpsell");    try {      if ("Y".equals(addToCartRemoveIncompat)) {        List<GenericValue> productAssocs=null;        EntityCondition cond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId),EntityOperator.OR,EntityCondition.makeCondition("productIdTo",EntityOperator.EQUALS,productId)),EntityCondition.makeCondition("productAssocTypeId",EntityOperator.EQUALS,"PRODUCT_INCOMPATABLE")),EntityOperator.AND);        productAssocs=EntityQuery.use(delegator).from("ProductAssoc").where(cond).filterByDate().queryList();        List<String> productList=FastList.newInstance();        for (        GenericValue productAssoc : productAssocs) {          if (productId.equals(productAssoc.getString("productId"))) {            productList.add(productAssoc.getString("productIdTo"));            continue;          }          if (productId.equals(productAssoc.getString("productIdTo"))) {            productList.add(productAssoc.getString("productId"));            continue;          }        }        for (        ShoppingCartItem sci : cart) {          if (productList.contains(sci.getProductId())) {            try {              cart.removeCartItem(sci,dispatcher);            } catch (            CartItemModifyException e) {              Debug.logError(e.getMessage(),module);            }          }        }      }      if ("Y".equals(addToCartReplaceUpsell)) {        List<GenericValue> productList=null;        productList=EntityQuery.use(delegator).select("productId").from("ProductAssoc").where("productIdTo",productId,"productAssocTypeId","PRODUCT_UPGRADE").queryList();        if (productList != null) {          for (          ShoppingCartItem sci : cart) {            if (productList.contains(sci.getProductId())) {              try {                cart.removeCartItem(sci,dispatcher);              } catch (              CartItemModifyException e) {                Debug.logError(e.getMessage(),module);              }            }          }        }      }    } catch (    GenericEntityException e) {      Debug.logError(e.getMessage(),module);    }  }  if (ProductWorker.isAlternativePacking(delegator,productId,parentProductId)) {    GenericValue parentProduct=null;    try {      parentProduct=EntityQuery.use(delegator).from("Product").where("productId",parentProductId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Error getting parent product",module);    }    BigDecimal piecesIncluded=BigDecimal.ZERO;    if (parentProduct != null) {      piecesIncluded=new BigDecimal(parentProduct.getLong("piecesIncluded"));      quantity=quantity.multiply(piecesIncluded);    }  }  result=cartHelper.addToCart(catalogId,shoppingListId,shoppingListItemSeqId,productId,productCategoryId,itemType,itemDescription,price,amount,quantity,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,shipBeforeDate,shipAfterDate,configWrapper,itemGroupNumber,paramMap,parentProductId);  controlDirective=processResult(result,request);  Integer itemId=(Integer)result.get("itemId");  if (UtilValidate.isNotEmpty(itemId)) {    request.setAttribute("itemId",itemId);  }  for (int shipGroupIndex=0; shipGroupIndex < cart.getShipGroupSize(); shipGroupIndex++) {    String shipContactMechId=cart.getShippingContactMechId(shipGroupIndex);    if (UtilValidate.isNotEmpty(shipContactMechId)) {      cart.setShipmentMethodTypeId(shipGroupIndex,null);    }  }  if (controlDirective.equals(ERROR)) {    return "error";  } else {    if (cart.viewCartOnAdd()) {      return "viewcart";    } else {      return "success";    }  }}  }
class C{  @SuppressWarnings("unchecked") private void addDetailsToContainer(final List<ActionWithStatusCount> actions){  for (  final ActionWithStatusCount actionWithStatusCount : actions) {    final Action action=actionWithStatusCount.getAction();    final Item item=hierarchicalContainer.addItem(actionWithStatusCount.getAction().getId());    item.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_STATUS_HIDDEN).setValue(actionWithStatusCount.getAction().getStatus());    item.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_ACTION_ID).setValue(actionWithStatusCount.getAction().getId().toString());    item.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_ACTIVE_HIDDEN).setValue(actionWithStatusCount.getAction().isActive() ? SPUIDefinitions.ACTIVE : SPUIDefinitions.IN_ACTIVE);    item.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_ACTION_ID_HIDDEN).setValue(actionWithStatusCount.getAction().getId());    item.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_DIST).setValue(actionWithStatusCount.getDsName() + ":" + actionWithStatusCount.getDsVersion());    item.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_FORCED).setValue(action);    ((Hierarchical)hierarchicalContainer).setChildrenAllowed(actionWithStatusCount.getAction().getId(),false);    item.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_DATETIME).setValue(SPDateTimeUtil.getFormattedDate(actionWithStatusCount.getAction().getLastModifiedAt()));    item.getItemProperty(SPUIDefinitions.ACTION_HIS_TBL_ROLLOUT_NAME).setValue(actionWithStatusCount.getRolloutName());    if (actionWithStatusCount.getActionStatusCount() > 0) {      ((Hierarchical)hierarchicalContainer).setChildrenAllowed(actionWithStatusCount.getAction().getId(),true);    }  }}  }
class C{  public void txRollbackAsync(final long txId,final long futId){  final Transaction asyncTx=(Transaction)tx(txId).withAsync();  asyncTx.rollback();  listenAndNotifyIntFuture(futId,asyncTx);}  }
class C{  public float update(){  value=(phase / TWO_PI < 0.5 ? 1 : -1) * amp + offset;  cyclePhase(frequency + fmod.update());  return value;}  }
class C{  public String ballTreeConstructorTipText(){  return "The tree constructor being used.";}  }
class C{  public void test_scheduleLjava_util_TimerTaskJJ() throws Exception {  Timer t=null;  try {    t=new Timer();    TimerTestTask testTask=new TimerTestTask();    t.cancel();    try {      t.schedule(testTask,100,100);      fail("Scheduling a task after Timer.cancel() should throw exception");    } catch (    IllegalStateException expected) {    }    t=new Timer();    testTask=new TimerTestTask();    testTask.cancel();    try {      t.schedule(testTask,100,100);      fail("Scheduling a task after cancelling it should throw exception");    } catch (    IllegalStateException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    try {      t.schedule(testTask,-100,100);      fail("Scheduling a task with negative delay should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    try {      t.schedule(testTask,100,-100);      fail("Scheduling a task with negative period should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    try {      t.schedule(testTask,100,0);      fail("Scheduling a task with 0 period should throw IllegalArgumentException");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    try {      t.schedule(null,10,10);      fail("Scheduling a null task should throw NullPointerException");    } catch (    NullPointerException expected) {    }    t.cancel();    t=new Timer();    try {      t.schedule(null,-10,-10);      fail("Scheduling a null task with negative delays should throw IllegalArgumentException first");    } catch (    IllegalArgumentException expected) {    }    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    t.schedule(testTask,100,100);    Thread.sleep(400);    assertTrue("TimerTask.run() method should have been called at least twice (" + testTask.wasRun() + ")",testTask.wasRun() >= 2);    t.cancel();    t=new Timer();    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,100,100);    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,200,100);    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,300,200);    testTask=new TimerTestTask();    testTask.incrementCount(true);    t.schedule(testTask,100,200);    Thread.sleep(1200);    assertTrue("Multiple tasks should have incremented counter 24 times not " + timerCounter,timerCounter >= 24);    t.cancel();  }  finally {    if (t != null)     t.cancel();  }}  }
class C{  public synchronized void disconnect(){  log.debug("disconnect()");  if (mSocket == null) {    return;  }  mPrintStream.close();  try {    mBufferedReader.close();  } catch (  IOException i) {    log.error("disconnect() close mBufferedReader IOException");    i.printStackTrace();  }  try {    mSocket.close();  } catch (  IOException e) {    log.error("disconnect() close mSocket IOException");    e.printStackTrace();  }  mLastPostTime=0;  mLastReceiveTime=0;  mSocket=null;  mPrintStream=null;  mBufferedReader=null;}  }
class C{  public ShadowRenderer(){  this(5,0.5f,Color.BLACK);}  }
class C{  public void popMode(){  m_modes.pop();}  }
class C{  public boolean hasFullName(){  return getFullName() != null;}  }
class C{  public List<Assignment> findByDepartmentDesignationAndBoundary(final Long deptId,final Long desigId,final Long boundaryId){  List<Assignment> assignments=null;  if (null == deptId)   assignments=assignmentRepository.findByDesignationAndBoundary(desigId,getRequiredBoundaries(boundaryId)); else   if (null == desigId)   assignments=assignmentRepository.findByDepartmentAndBoundary(deptId,getRequiredBoundaries(boundaryId)); else   assignments=assignmentRepository.findByDepartmentDesignationAndBoundary(deptId,desigId,getRequiredBoundaries(boundaryId));  return assignments;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof ColumnSchema)) {    return false;  }  ColumnSchema other=(ColumnSchema)obj;  if (columnName == null) {    if (other.columnName != null) {      return false;    }  } else   if (!columnName.equals(other.columnName)) {    return false;  }  return true;}  }
class C{  public StateMachineModelBuilder(ObjectPostProcessor<Object> objectPostProcessor){  super(objectPostProcessor);}  }
class C{  void trust(){  setState(State.OPEN);}  }
class C{  private PhysicalNAS createPhysicalNas(StorageSystem system,VNXDataMover dm) throws VNXFileCollectionException {  PhysicalNAS phyNas=new PhysicalNAS();  if (phyNas != null) {    phyNas.setNasName(dm.getName());    phyNas.setStorageDeviceURI(system.getId());    phyNas.setNativeId(String.valueOf(dm.getId()));    phyNas.setNasState(dm.getRole());    phyNas.setId(URIUtil.createId(PhysicalNAS.class));    String physicalNasNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,String.valueOf(dm.getId()),NativeGUIDGenerator.PHYSICAL_NAS);    phyNas.setNativeGuid(physicalNasNativeGuid);    _logger.info("Physical NAS created with guid {} ",phyNas.getNativeGuid());    StringMap dbMetrics=phyNas.getMetrics();    Long MaxObjects=2048L;    Long MaxCapacity=200L * TBsINKB;    String modelStr=system.getModel();    if (modelStr.startsWith("VNX")) {      if (Long.parseLong(modelStr.substring(3)) > 5300) {        MaxCapacity=256L * TBsINKB;      }    }    dbMetrics.put(MetricsKeys.maxStorageCapacity.name(),String.valueOf(MaxCapacity));    dbMetrics.put(MetricsKeys.maxStorageObjects.name(),String.valueOf(MaxObjects));    phyNas.setMetrics(dbMetrics);  }  return phyNas;}  }
class C{  public void putIntArray(String key,int[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public static void saveGifFrame(int cycleCount){  String filename=String.format("%05d.png",cycleCount);  StdDraw.save(filename);  toDelete.add(new File(filename));}  }
class C{  private void repaintGraphics(OMGraphic omg){  drawingAttributes.setTo(omg);  doPrepare();}  }
class C{  public PageAttributes(PageAttributes obj){  set(obj);}  }
class C{  public MailBuilder bcc(String name,String email){  return param("bcc",name + " <" + email+ ">");}  }
class C{  public boolean contains(long val){  return index(val) >= 0;}  }
class C{  public void chat(String text,boolean async){  if (text.charAt(0) == '/') {    Runnable task=null;    if (async) {      server.getScheduler().runTask(null,task);    } else {      task.run();    }  } else {    AsyncPlayerChatEvent event=EventFactory.onPlayerChat(async,this,text);    if (event.isCancelled()) {      return;    }    String message=String.format(event.getFormat(),getDisplayName(),event.getMessage());    getServer().getLogger().info(message);    for (    Player recipient : event.getRecipients()) {      recipient.sendMessage(message);    }  }}  }
class C{  public static void write(float lt1,float ln1,float lt2,float ln2,int lType,int nsegs,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.RECTANGLE_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_RECTANGLE);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeByte(lType);  dos.writeFloat(lt1);  dos.writeFloat(ln1);  dos.writeFloat(lt2);  dos.writeFloat(ln2);  dos.writeInt(nsegs);  properties.write(dos);}  }
class C{  public MessageType readMessage(Reader is) throws IOException {  JsonReaderImpl jIn=new JsonReaderImpl(is,_jsonFactory);  return readMessage(jIn);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ToContainsFilter(String to){  if (to == null) {    throw new IllegalArgumentException("Parameter cannot be null.");  }  this.to=to.toLowerCase();}  }
class C{  @Override public void run(){  int nP=Runtime.getRuntime().availableProcessors();  highPriorityExecutor=new ThreadPoolExecutor(1,nP,60,TimeUnit.SECONDS,new ArrayBlockingQueue<>(255));  highPriorityExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());  batchExecutor=new ThreadPoolExecutor(1,nP,60,TimeUnit.SECONDS,new ArrayBlockingQueue<>(nP * 2));  batchExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());  taskDeliveryExecutor=new ThreadPoolExecutor(1,nP,60,TimeUnit.SECONDS,new ArrayBlockingQueue<>(255));  taskDeliveryExecutor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());  if (networkId != null) {    LOG.info("Prebuilding graph {}",networkId);    transportNetworkCache.getNetwork(networkId);    LOG.info("Done prebuilding graph {}",networkId);  }  boolean idle=false;  while (true) {    long now=System.currentTimeMillis();    if (now > nextShutdownCheckTime && autoShutdown) {      if (idle && now > lastHighPriorityRequestProcessed + SINGLE_POINT_KEEPALIVE_MSEC) {        LOG.warn("Machine is idle, shutting down.");        try {          Process process=new ProcessBuilder("sudo","/sbin/shutdown","-h","now").start();          process.waitFor();        } catch (        Exception ex) {          LOG.error("Unable to terminate worker",ex);        } finally {          System.exit(0);        }      }      nextShutdownCheckTime+=60 * 60 * 1000;    }    LOG.debug("Long-polling for work ({} second timeout).",POLL_TIMEOUT / 1000.0);    List<GenericClusterRequest> tasks=getSomeWork(WorkType.REGIONAL);    if (tasks == null) {      LOG.debug("Didn't get any work. Retrying.");      idle=true;      continue;    }    tasks.stream().filter(null).forEach(null);    logQueueStatus();    tasks.stream().filter(null).forEach(null);    logQueueStatus();    idle=false;  }}  }
class C{  private void parseFile(Path file) throws Exception {  int lineNumber=1;  String line=null;  try {    List<String> lines=Files.readAllLines(file,StandardCharsets.ISO_8859_1);    List<TZDBZone> openZone=null;    for (; lineNumber < lines.size(); lineNumber++) {      line=lines.get(lineNumber);      int index=line.indexOf('#');      if (index >= 0) {        line=line.substring(0,index);      }      if (line.trim().length() == 0) {        continue;      }      Scanner s=new Scanner(line);      if (openZone != null && Character.isWhitespace(line.charAt(0)) && s.hasNext()) {        if (parseZoneLine(s,openZone)) {          openZone=null;        }      } else {        if (s.hasNext()) {          String first=s.next();          if (first.equals("Zone")) {            openZone=new ArrayList<>();            try {              zones.put(s.next(),openZone);              if (parseZoneLine(s,openZone)) {                openZone=null;              }            } catch (            NoSuchElementException x) {              printVerbose("Invalid Zone line in file: " + file + ", line: "+ line);              throw new IllegalArgumentException("Invalid Zone line");            }          } else {            openZone=null;            if (first.equals("Rule")) {              try {                parseRuleLine(s);              } catch (              NoSuchElementException x) {                printVerbose("Invalid Rule line in file: " + file + ", line: "+ line);                throw new IllegalArgumentException("Invalid Rule line");              }            } else             if (first.equals("Link")) {              try {                String realId=s.next();                String aliasId=s.next();                links.put(aliasId,realId);              } catch (              NoSuchElementException x) {                printVerbose("Invalid Link line in file: " + file + ", line: "+ line);                throw new IllegalArgumentException("Invalid Link line");              }            } else {              throw new IllegalArgumentException("Unknown line");            }          }        }      }    }  } catch (  Exception ex) {    throw new Exception("Failed while parsing file '" + file + "' on line "+ lineNumber+ " '"+ line+ "'",ex);  }}  }
class C{  public void updateWidth(int width){  if (getLayoutType() != LayoutType.VERTICAL)   return;  setSize(width,getHeight());}  }
class C{  public void handleCreateView(ReactShadowNode node,ThemedReactContext themedContext,@Nullable ReactStylesDiffMap initialProps){  if (!ENABLED) {    int tag=node.getReactTag();    mUIViewOperationQueue.enqueueCreateView(themedContext,tag,node.getViewClass(),initialProps);    return;  }  boolean isLayoutOnly=node.getViewClass().equals(ViewProps.VIEW_CLASS_NAME) && isLayoutOnlyAndCollapsable(initialProps);  node.setIsLayoutOnly(isLayoutOnly);  if (!isLayoutOnly) {    mUIViewOperationQueue.enqueueCreateView(themedContext,node.getReactTag(),node.getViewClass(),initialProps);  }}  }
class C{  public int optInt(int index,int defaultValue){  try {    return this.getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static void printRootCauseStackTrace(Throwable throwable){  printRootCauseStackTrace(throwable,System.err);}  }
class C{  public void clearRecords(){  if (_records != null) {    _records.clear();  }}  }
class C{  @Override public boolean add(T o){  int i=heap.size();  heap.setSize(i + 1);  percolateUp(i,o);  return true;}  }
class C{  public String attributesToString(){  StringBuffer text=new StringBuffer();  int j=0;  for (int i=0; i < m_attributes.length; i++) {    if (m_attributes[i]) {      if (isGaussian()) {        text.append(" Attribute: " + i);        text.append(" Mean: " + m_meanValue[j]);        text.append(" StdDev: " + m_stddevValue[j] + "\n%");      } else {        text.append(" Attribute: " + i);        text.append(" Range: " + m_minValue[j]);        text.append(" - " + m_maxValue[j] + "\n%");      }      j++;    }  }  return text.toString();}  }
class C{  public DialogueState(){  this(new BNetwork());}  }
class C{  private void deleteStorePath(){  FileFactory.FileType fileType=FileFactory.getFileType(this.hdfsStorePath);  CarbonFile carbonFile=FileFactory.getCarbonFile(this.hdfsStorePath,fileType);  deleteRecursiveSilent(carbonFile);}  }
class C{  public List<? extends Chart<?>> createCharts(){  chartsComp.getChartsCanvas().setMessage("This chart is not yet implemented.");  return Collections.emptyList();}  }
class C{  public String peek(){  if (resource == null) {    return NOT_FOUND;  }  peek=Lists.newArrayList();  columns=Lists.newArrayList();  Exception exception=null;  List<TaskMessage> messages=new LinkedList<TaskMessage>();  Term rowType=null;  if (id != null) {    rowType=TERM_FACTORY.findTerm(id);  }  if (rowType != null && mid != null) {    ExtensionMapping mapping=resource.getMappings(id).get(mid);    if (mapping != null) {      try {        GenerateDwca worker=dwcaFactory.create(resource,this);        worker.report();        File tmpDir=Files.createTempDir();        worker.setDwcaFolder(tmpDir);        Archive archive=new Archive();        worker.setArchive(archive);        worker.addDataFile(Lists.newArrayList(mapping),PEEK_ROWS);        File[] files=tmpDir.listFiles();        if (files != null && files.length > 0) {          ArchiveFile core=archive.getCore();          ArchiveFile ext=archive.getExtension(rowType);          String delimiter=(core == null) ? ext.getFieldsTerminatedBy() : core.getFieldsTerminatedBy();          Character quotes=(core == null) ? ext.getFieldsEnclosedBy() : core.getFieldsEnclosedBy();          int headerRows=(core == null) ? ext.getIgnoreHeaderLines() : core.getIgnoreHeaderLines();          CSVReader reader=CSVReaderFactory.build(files[0],CHARACTER_ENCODING,delimiter,quotes,headerRows);          while (reader.hasNext()) {            peek.add(reader.next());            if (columns.isEmpty()) {              columns=Arrays.asList(reader.header);            }          }        } else {          messages.add(new TaskMessage(Level.ERROR,getText("mapping.preview.not.found")));        }      } catch (      Exception e) {        exception=e;        messages.add(new TaskMessage(Level.ERROR,getText("mapping.preview.error",new String[]{e.getMessage()})));      }    } else {      messages.add(new TaskMessage(Level.ERROR,getText("mapping.preview.mapping.not.found",new String[]{id,String.valueOf(mid)})));    }  } else {    messages.add(new TaskMessage(Level.ERROR,getText("mapping.preview.bad.request")));  }  if (!messages.isEmpty()) {    report.getMessages().addAll(messages);  }  report=(exception == null) ? new StatusReport(true,"succeeded",report.getMessages()) : new StatusReport(exception,"failed",messages);  return SUCCESS;}  }
class C{  public static boolean check_browser_available(Context ctx){  if (_BROWSER_AVAILABLE != null) {    return _BROWSER_AVAILABLE;  }  Intent browser_intent=new Intent(Intent.ACTION_VIEW,Uri.parse("http://apktrack.kwiatkowski.fr/"));  _BROWSER_AVAILABLE=browser_intent.resolveActivity(ctx.getPackageManager()) != null;  return _BROWSER_AVAILABLE;}  }
class C{  public void writeObject(Object o){  if (internal) {    super.writeObject(o);  } else {    writeStatement(new Statement(this,"writeObject",new Object[]{o}));  }}  }
class C{  public OverScroller(Context context,Interpolator interpolator,boolean flywheel){  mInterpolator=interpolator;  mFlywheel=flywheel;  mScrollerX=new SplineOverScroller(context);  mScrollerY=new SplineOverScroller(context);}  }
class C{  public T highestKey(){  if (m_values.isEmpty()) {    return null;  }  int max=Integer.MIN_VALUE;  T rVal=null;  for (  final Entry<T,Integer> entry : m_values.entrySet()) {    if (entry.getValue() > max) {      max=entry.getValue();      rVal=entry.getKey();    }  }  return rVal;}  }
class C{  private void endArguments(){  if (argumentStack % 2 != 0) {    buf.append('>');  }  argumentStack/=2;}  }
class C{  private DefaultSelectorProvider(){}  }
class C{  void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_LONG);  out.writeLong(_value);}  }
class C{  @Override public void reset(){  mapIndex=0;  finishedWithRegularMap=false;  counterArrayBase=currentCompiledMethod.hasCounterArray();  if (bridgeTarget != null) {    bridgeParameterMappingRequired=true;    bridgeParameterIndex=bridgeParameterInitialIndex;    bridgeRegisterIndex=0;    bridgeRegisterLocation=framePtr.plus(STACKFRAME_FIRST_PARAMETER_OFFSET);    bridgeSpilledParamLocation=framePtr.plus(bridgeSpilledParamInitialOffset);  }}  }
class C{  final Object pop(){  int size=stack.size();  return size == 0 ? null : stack.remove(size - 1);}  }
class C{  public static DefUseCoverageTestFitness createGoal(Definition def,Use use,DefUseCoverageTestFitness.DefUsePairType type){  DefUseCoverageTestFitness goal=new DefUseCoverageTestFitness(def,use,type);  if (registerGoal(goal))   return goal; else {    return null;  }}  }
class C{  public static int extractOpcodeFromUnit(int opcodeUnit){  int lowByte=opcodeUnit & 0xff;  return ((lowByte == 0) || (lowByte == 0xff)) ? opcodeUnit : lowByte;}  }
class C{  @Override protected void calculateBarsWidth(int nSets,float x0,float x1){  barWidth=x1 - x0 - style.barSpacing;}  }
class C{  public static List propertyDescriptors(int apiLevel){switch (apiLevel) {case AST.JLS2_INTERNAL:case AST.JLS3:    return PROPERTY_DESCRIPTORS;default :  return PROPERTY_DESCRIPTORS_4_0;}}  }
class C{  public static Range<Float> valueOfFloat(String str){  return Range.valueOf(str,null);}  }
class C{  @Override public String toString(){  return super.toString() + " (w=" + getWeight()+ ", util="+ utility+ ")";}  }
class C{  public static String selectPreferredMIMEType(Iterator<String> mimeTypes,HttpServletRequest request){  List<HeaderElement> acceptElements=getHeaderElements(request,"Accept");  if (acceptElements.isEmpty()) {    if (mimeTypes.hasNext()) {      return mimeTypes.next();    } else {      return null;    }  }  String result=null;  HeaderElement matchingAcceptType=null;  double highestQuality=0.0;  while (mimeTypes.hasNext()) {    String mimeType=mimeTypes.next();    HeaderElement acceptType=matchAcceptHeader(mimeType,acceptElements);    if (acceptType != null) {      double quality=1.0;      String qualityStr=acceptType.getParameterValue("q");      if (qualityStr != null) {        try {          quality=Double.parseDouble(qualityStr);        } catch (        NumberFormatException e) {        }      }      if (quality > highestQuality) {        result=mimeType;        matchingAcceptType=acceptType;        highestQuality=quality;      } else       if (quality == highestQuality) {        if (isMoreSpecificType(acceptType,matchingAcceptType)) {          result=mimeType;          matchingAcceptType=acceptType;        }      }    }  }  return result;}  }
class C{  public boolean isViewClippingEnabled(){  return viewClippingEnabled;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  @Override protected SparseVertex addVertex(Attributes attrs){  return builder.addVertex(getGraph());}  }
class C{  public Yaml(BaseConstructor constructor,Representer representer,DumperOptions dumperOptions){  this(constructor,representer,dumperOptions,new Resolver());}  }
class C{  public static boolean isBackendVolumesNotHavingBackendCG(List<? extends BlockObject> blockObjectList,DbClient dbClient){  boolean result=false;  for (  BlockObject blockObject : blockObjectList) {    if (blockObject instanceof Volume) {      Volume srcVolume=getVPLEXBackendVolume((Volume)blockObject,true,dbClient);      if (srcVolume.isInCG() && !ControllerUtils.checkCGCreatedOnBackEndArray(srcVolume)) {        _log.error("Vplex backend volume {} is not associated with backend cg",srcVolume.getId());        result=true;        break;      }    } else {      _log.info("Block object {} is not a Volume",blockObject.getId());    }  }  return result;}  }
class C{  @Category(FlakyTest.class) @Test public void testP2PAuthenticationWithInvalidAuthenticator() throws Exception {  int locatorPort=getRandomAvailablePort(SOCKET);  CredentialGenerator gen=new DummyCredentialGenerator();  assertNotNull(gen.getAuthInit());  assertNull(gen.getJavaProperties());  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,getIPLiteral() + "[" + locatorPort+ "]");  props.setProperty(SECURITY_PEER_AUTH_INIT,gen.getAuthInit());  props.setProperty(SECURITY_PEER_AUTHENTICATOR,"xyz");  startTheLocator(props,null,locatorPort);  try {    new SecurityTestUtils("tmp").createSystem(props,null);    fail("AuthenticationFailedException was expected as the Authenticator object passed is incorrect");  } catch (  GemFireSecurityException expected) {  } finally {    locatorVM.invoke(null);  }}  }
class C{  public String cancel() throws Exception {  if (resource == null) {    return NOT_FOUND;  }  boolean cancelled=resourceManager.cancelPublishing(resource.getShortname(),this);  if (cancelled) {    BigDecimal version=resource.getEmlVersion();    String msg=getText("publishing.cancelled",new String[]{version.toPlainString(),resource.getShortname()});    LOG.warn(msg);    addActionError(msg);    resourceManager.restoreVersion(resource,version,this);    StatusReport tmpReport=new StatusReport(true,GenerateDwca.CANCELLED_STATE_MSG,report.getMessages());    report=tmpReport;    return execute();  }  addActionError(getText("manage.overview.failed.stop.publishing"));  return ERROR;}  }
class C{  @Override public void updateSelectedReduce(Collection<GraphNode> reduction){  selectedNodes.reduceSelection(reduction);}  }
class C{  private void spinWait(boolean fromTail){  long startNano=0;  long lastElapsedNano=0;  while (true) {    long startCycles=VM.statistics.cycles();    long endCycles=startCycles + ((long)1e9);    long nowCycles;    do {      VM.memory.isync();      Address rtn=((fromTail) ? tail : head);      if (!rtn.isZero() || complete())       return;      nowCycles=VM.statistics.cycles();    } while (startCycles < nowCycles && nowCycles < endCycles);    lock();    if (startNano == 0) {      startNano=VM.statistics.nanoTime();    } else {      long nowNano=VM.statistics.nanoTime();      long elapsedNano=nowNano - startNano;      if (elapsedNano - lastElapsedNano > WARN_PERIOD) {        Log.write("GC Warning: SharedDeque(");        Log.write(name);        Log.write(") wait has reached ");        Log.write(VM.statistics.nanosToSecs(elapsedNano));        Log.write(", ");        Log.write(numConsumersWaiting);        Log.write("/");        Log.write(numConsumers);        Log.writeln(" threads waiting");        lastElapsedNano=elapsedNano;      }      if (elapsedNano > TIMEOUT_PERIOD) {        unlock();        VM.assertions.fail("GC Error: SharedDeque Timeout");      }    }    unlock();  }}  }
class C{  private void updateAggregatedResult(){  if (!tableBlockExecutionInfos.isFixedKeyUpdateRequired() || !tableBlockExecutionInfos.isDimensionsExistInQuery()) {    return;  }  try {    long[] data=null;    ByteArrayWrapper key=null;    for (    Entry<ByteArrayWrapper,MeasureAggregator[]> e : aggData.entrySet()) {      key=e.getKey();      data=tableBlockExecutionInfos.getBlockKeyGenerator().getKeyArray(key.getDictionaryKey(),tableBlockExecutionInfos.getMaskedByteForBlock());      key.setDictionaryKey(QueryUtil.getMaskedKey(restructureInfos.getKeyGenerator().generateKey(data),restructureInfos.getMaxKey(),restructureInfos.getMaskByteRanges(),restructureInfos.getMaskByteRanges().length));      aggData.put(key,e.getValue());    }  } catch (  KeyGenException e) {    LOGGER.error(e);  }}  }
class C{  public void beginTracking(){  progressMonitor.registerSource(this);}  }
class C{  @Override public void start() throws GondolaException {  reconnect();}  }
class C{  public JimpleBody newBody(){  return new JimpleBody();}  }
class C{  public void recognize(){  RecognitionAudio audio;  try {    audio=createRecognitionAudio();  } catch (  IOException e) {    logger.log(Level.WARNING,"Failed to read audio uri input: " + input);    return;  }  logger.info("Sending " + audio.getContent().size() + " bytes from audio uri input: "+ input);  RecognitionConfig config=RecognitionConfig.newBuilder().setEncoding(AudioEncoding.LINEAR16).setSampleRate(samplingRate).build();  SyncRecognizeRequest request=SyncRecognizeRequest.newBuilder().setConfig(config).setAudio(audio).build();  SyncRecognizeResponse response;  try {    response=speechClient.syncRecognize(request);  } catch (  StatusRuntimeException e) {    logger.log(Level.WARNING,"RPC failed: {0}",e.getStatus());    return;  }  logger.info("Received response: " + TextFormat.printToString(response));}  }
class C{  public void clearLayers(){  if (Looper.myLooper() == null) {    throw new IllegalThreadStateException("Should be called from UI thread");  }  for (int i=layers.size() - 1; i >= 0; --i) {    layers.get(i).clearAll();  }  layers.clear();}  }
class C{  private void initWindow(){  setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  JMenuBar menuBar=new JMenuBar();  JMenu menu=new JMenu();  configureButton(menu,"File");  ActionListener actionListener=new FileMenuListener(tool,this);  addMenuItem(menu,NEW_POLICY_FILE,actionListener,"N");  addMenuItem(menu,OPEN_POLICY_FILE,actionListener,"O");  addMenuItem(menu,SAVE_POLICY_FILE,actionListener,"S");  addMenuItem(menu,SAVE_AS_POLICY_FILE,actionListener,null);  addMenuItem(menu,VIEW_WARNINGS,actionListener,null);  addMenuItem(menu,QUIT,actionListener,null);  menuBar.add(menu);  menu=new JMenu();  configureButton(menu,"KeyStore");  actionListener=new MainWindowListener(tool,this);  addMenuItem(menu,EDIT_KEYSTORE,actionListener,null);  menuBar.add(menu);  setJMenuBar(menuBar);  ((JPanel)getContentPane()).setBorder(new EmptyBorder(6,6,6,6));  JLabel label=new JLabel(PolicyTool.getMessage("Policy.File."));  addNewComponent(this,label,MW_FILENAME_LABEL,0,0,1,1,0.0,0.0,GridBagConstraints.BOTH,LR_TOP_BOTTOM_PADDING);  JTextField tf=new JTextField(50);  tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));  tf.getAccessibleContext().setAccessibleName(PolicyTool.getMessage("Policy.File."));  tf.setEditable(false);  addNewComponent(this,tf,MW_FILENAME_TEXTFIELD,1,0,1,1,0.0,0.0,GridBagConstraints.BOTH,LR_TOP_BOTTOM_PADDING);  JPanel panel=new JPanel();  panel.setLayout(new GridBagLayout());  JButton button=new JButton();  configureButton(button,ADD_POLICY_ENTRY);  button.addActionListener(new MainWindowListener(tool,this));  addNewComponent(panel,button,MW_ADD_BUTTON,0,0,1,1,0.0,0.0,GridBagConstraints.BOTH,LR_PADDING);  button=new JButton();  configureButton(button,EDIT_POLICY_ENTRY);  button.addActionListener(new MainWindowListener(tool,this));  addNewComponent(panel,button,MW_EDIT_BUTTON,1,0,1,1,0.0,0.0,GridBagConstraints.BOTH,LR_PADDING);  button=new JButton();  configureButton(button,REMOVE_POLICY_ENTRY);  button.addActionListener(new MainWindowListener(tool,this));  addNewComponent(panel,button,MW_REMOVE_BUTTON,2,0,1,1,0.0,0.0,GridBagConstraints.BOTH,LR_PADDING);  addNewComponent(this,panel,MW_PANEL,0,2,2,1,0.0,0.0,GridBagConstraints.BOTH,BOTTOM_PADDING);  String policyFile=tool.getPolicyFileName();  if (policyFile == null) {    String userHome;    userHome=java.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction("user.home"));    policyFile=userHome + File.separatorChar + ".java.policy";  }  try {    tool.openPolicy(policyFile);    DefaultListModel listModel=new DefaultListModel();    JList list=new JList(listModel);    list.setVisibleRowCount(15);    list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    list.addMouseListener(new PolicyListListener(tool,this));    PolicyEntry entries[]=tool.getEntry();    if (entries != null) {      for (int i=0; i < entries.length; i++) {        listModel.addElement(entries[i].headerToString());      }    }    JTextField newFilename=(JTextField)getComponent(MW_FILENAME_TEXTFIELD);    newFilename.setText(policyFile);    initPolicyList(list);  } catch (  FileNotFoundException fnfe) {    JList list=new JList(new DefaultListModel());    list.setVisibleRowCount(15);    list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    list.addMouseListener(new PolicyListListener(tool,this));    initPolicyList(list);    tool.setPolicyFileName(null);    tool.modified=false;    tool.warnings.addElement(fnfe.toString());  }catch (  Exception e) {    JList list=new JList(new DefaultListModel());    list.setVisibleRowCount(15);    list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);    list.addMouseListener(new PolicyListListener(tool,this));    initPolicyList(list);    tool.setPolicyFileName(null);    tool.modified=false;    MessageFormat form=new MessageFormat(PolicyTool.getMessage("Could.not.open.policy.file.policyFile.e.toString."));    Object[] source={policyFile,e.toString()};    displayErrorDialog(null,form.format(source));  }}  }
class C{  public FilterQuery count(final int count){  this.count=count;  return this;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final Entry<K,V> pollFirstEntry(){  throw new UnsupportedOperationException();}  }
class C{  public void removeContentSelectionChangedListener(XBLOMContentElement e,ContentSelectionChangedListener l){  EventListenerList ll=(EventListenerList)listeners.get(e);  if (ll != null) {    ll.remove(ContentSelectionChangedListener.class,l);  }}  }
class C{  public static void signPaymentRequest(Protos.PaymentRequest.Builder paymentRequest,X509Certificate[] certificateChain,PrivateKey privateKey){  try {    final Protos.X509Certificates.Builder certificates=Protos.X509Certificates.newBuilder();    for (    final Certificate certificate : certificateChain)     certificates.addCertificate(ByteString.copyFrom(certificate.getEncoded()));    paymentRequest.setPkiType("x509+sha256");    paymentRequest.setPkiData(certificates.build().toByteString());    paymentRequest.setSignature(ByteString.EMPTY);    final Protos.PaymentRequest paymentRequestToSign=paymentRequest.build();    final String algorithm;    if ("RSA".equalsIgnoreCase(privateKey.getAlgorithm()))     algorithm="SHA256withRSA"; else     throw new IllegalStateException(privateKey.getAlgorithm());    final Signature signature=Signature.getInstance(algorithm);    signature.initSign(privateKey);    signature.update(paymentRequestToSign.toByteArray());    paymentRequest.setSignature(ByteString.copyFrom(signature.sign()));  } catch (  final GeneralSecurityException x) {    throw new RuntimeException(x);  }}  }
class C{  public static Builder withHeaders(Map<String,String> headers){  return builder().headers(headers);}  }
class C{  public Builder includeTables(Set<String> tables){  this.innerTables=tables;  return this;}  }
class C{  public AsyncLogTarget(final LogTarget logTarget,final int queueSize){  this(logTarget,queueSize,false);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  void handleEOD(EncoderContext context,StringBuilder buffer){  int unwritten=(buffer.length() / 3) * 2;  int rest=buffer.length() % 3;  int curCodewordCount=context.getCodewordCount() + unwritten;  context.updateSymbolInfo(curCodewordCount);  int available=context.getSymbolInfo().getDataCapacity() - curCodewordCount;  if (rest == 2) {    buffer.append('\0');    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }  } else   if (available == 1 && rest == 1) {    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }    context.pos--;  } else   if (rest == 0) {    while (buffer.length() >= 3) {      writeNextTriplet(context,buffer);    }    if (available > 0 || context.hasMoreCharacters()) {      context.writeCodeword(HighLevelEncoder.C40_UNLATCH);    }  } else {    throw new IllegalStateException("Unexpected case. Please report!");  }  context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);}  }
class C{  public TimeValue lastTaskTime() throws IllegalStateException {  if (this.lastTaskInfo == null) {    throw new IllegalStateException("No tests run: can't get last interval");  }  return this.lastTaskInfo.getTime();}  }
class C{  public HashChain(){  firstItem=lastItem=null;}  }
class C{  @Override protected Class<?> findClass(String name) throws ClassNotFoundException {  Class<?> cl=findClassImpl(name);  if (cl != null)   return cl; else   throw new ClassNotFoundException(name);}  }
class C{  public A6Record(Name name,int dclass,long ttl,int prefixBits,InetAddress suffix,Name prefix){  super(name,Type.A6,dclass,ttl);  this.prefixBits=checkU8("prefixBits",prefixBits);  if (suffix != null && Address.familyOf(suffix) != Address.IPv6)   throw new IllegalArgumentException("invalid IPv6 address");  this.suffix=suffix;  if (prefix != null)   this.prefix=checkName("prefix",prefix);}  }
class C{  static boolean isLowUTF16Surrogate(char ch){  return ('\uDC00' <= ch && ch <= '\uDFFF');}  }
class C{  public User findUser(String name){  return users.get(name);}  }
class C{  protected void onChoiceChanged(int position,boolean selected){  if (swipeListViewListener != null && position != ListView.INVALID_POSITION) {    swipeListViewListener.onChoiceChanged(position,selected);  }}  }
class C{  @Override public void run(){  jamonDataPersister.put();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return XBoolean.S_TRUE;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_AFTER_CODE_2__MORE_CODE_1:    getMoreCode_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public synchronized void close(){  list.clear();  super.close();}  }
class C{  private void field(Detail detail) throws Exception {  Class type=detail.getType();  DefaultType access=detail.getOverride();  ContactList list=support.getFields(type,access);  for (  Contact contact : list) {    Annotation label=contact.getAnnotation();    if (label != null) {      builder.process(contact,label);    }  }}  }
class C{  public DERUTCTime(Date time){  SimpleDateFormat dateF=new SimpleDateFormat("yyMMddHHmmss'Z'");  dateF.setTimeZone(new SimpleTimeZone(0,"Z"));  this.time=Strings.toByteArray(dateF.format(time));}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.016 -0500",hash_original_method="4FD6D5D7FFBD58CDE4927F751F9B55A3",hash_generated_method="13B3758B8A5C0AACB128B23388DCBDF8") public void processResponse(SIPResponse response,MessageChannel incomingMessageChannel,SIPDialog dialog){  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("PROCESSING INCOMING RESPONSE" + response.encodeMessage());  }  if (listeningPoint == null) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("Dropping message: No listening point" + " registered!");    return;  }  if (sipStack.checkBranchId() && !Utils.getInstance().responseBelongsToUs(response)) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError("Dropping response - topmost VIA header does not originate from this stack");    }    return;  }  SipProviderImpl sipProvider=listeningPoint.getProvider();  if (sipProvider == null) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError("Dropping message:  no provider");    }    return;  }  if (sipProvider.getSipListener() == null) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError("No listener -- dropping response!");    }    return;  }  SIPClientTransaction transaction=(SIPClientTransaction)this.transactionChannel;  SipStackImpl sipStackImpl=sipProvider.sipStack;  if (sipStack.isLoggingEnabled()) {    sipStackImpl.getStackLogger().logDebug("Transaction = " + transaction);  }  if (transaction == null) {    if (dialog != null) {      if (response.getStatusCode() / 100 != 2) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Response is not a final response and dialog is found for response -- dropping response!");        }        return;      } else       if (dialog.getState() == DialogState.TERMINATED) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Dialog is terminated -- dropping response!");        }        return;      } else {        boolean ackAlreadySent=false;        if (dialog.isAckSeen() && dialog.getLastAckSent() != null) {          if (dialog.getLastAckSent().getCSeq().getSeqNumber() == response.getCSeq().getSeqNumber()) {            ackAlreadySent=true;          }        }        if (ackAlreadySent && response.getCSeq().getMethod().equals(dialog.getMethod())) {          try {            if (sipStack.isLoggingEnabled()) {              sipStack.getStackLogger().logDebug("Retransmission of OK detected: Resending last ACK");            }            dialog.resendAck();            return;          } catch (          SipException ex) {            sipStack.getStackLogger().logError("could not resend ack",ex);          }        }      }    }    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("could not find tx, handling statelessly Dialog =  " + dialog);    }    ResponseEventExt sipEvent=new ResponseEventExt(sipProvider,transaction,dialog,(Response)response);    if (response.getCSeqHeader().getMethod().equals(Request.INVITE)) {      SIPClientTransaction forked=this.sipStack.getForkedTransaction(response.getTransactionId());      sipEvent.setOriginalTransaction(forked);    }    sipProvider.handleEvent(sipEvent,transaction);    return;  }  ResponseEventExt responseEvent=null;  responseEvent=new ResponseEventExt(sipProvider,(ClientTransactionExt)transaction,dialog,(Response)response);  if (response.getCSeqHeader().getMethod().equals(Request.INVITE)) {    SIPClientTransaction forked=this.sipStack.getForkedTransaction(response.getTransactionId());    responseEvent.setOriginalTransaction(forked);  }  if (dialog != null && response.getStatusCode() != 100) {    dialog.setLastResponse(transaction,response);    transaction.setDialog(dialog,dialog.getDialogId());  }  sipProvider.handleEvent(responseEvent,transaction);}  }
class C{  private Template createAndStoreTemplate(String key,InputStream inputStream,File file) throws Exception {  if (verbose) {    log("Creating new template from " + key + "...");  }  Reader reader=null;  try {    String fileEncoding=(fileEncodingParamVal != null) ? fileEncodingParamVal : System.getProperty(GROOVY_SOURCE_ENCODING);    reader=fileEncoding == null ? new InputStreamReader(inputStream) : new InputStreamReader(inputStream,fileEncoding);    Template template=engine.createTemplate(reader);    cache.put(key,new TemplateCacheEntry(file,template,verbose));    if (verbose) {      log("Created and added template to cache. [key=" + key + "] "+ cache.get(key));    }    if (template == null) {      throw new ServletException("Template is null? Should not happen here!");    }    return template;  }  finally {    if (reader != null) {      reader.close();    } else     if (inputStream != null) {      inputStream.close();    }  }}  }
class C{  @Override protected final void init(String[] args) throws AdeException {  super.init(args);  if (!AdeExt.isCreated()) {    AdeExt.create(a_ade);  }  m_adeExt=AdeExt.getAdeExt();}  }
class C{  public void show(){  mDialog.show();}  }
class C{  public static double cdf(double x,double shape,double scale){  if (x < 0.0 || shape <= 0.0) {    return 0;  }  return GammaFunction.incompleteGammaP(shape,x / scale);}  }
class C{  protected synchronized byte[] encryptWrite(byte[] b,int off,int len,long fp){  if (writeBuffer == null || writeBuffer.length < b.length)   writeBuffer=new byte[b.length];  System.arraycopy(b,off,writeBuffer,off,len);  encrypt(writeBuffer,off,len,fp);  return writeBuffer;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.CALL__STEP:    if (resolve)     return getStep();  return basicGetStep();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private ExtraProviderWrapper buildPocketProvider(){  IntentShare.ExtraProvider provider=new IntentShare.ExtraProvider("com.ideashower.readitlater.pro").disableImage().disableSubject().overrideText(getString(R.string.article_url));  return new ExtraProviderWrapper("Pocket",provider);}  }
class C{  void copyValue(int[] val){  int len=val.length;  if (value.length < len)   value=new int[len];  System.arraycopy(val,0,value,0,len);  intLen=len;  offset=0;}  }
class C{  public void draw(Shape s){  mGraphics.draw(s);}  }
class C{  public static <LHS>org.hamcrest.core.CombinableMatcher.CombinableEitherMatcher<Iterable<LHS>> either(OutputMatcher<LHS> matcher){  return org.hamcrest.core.CombinableMatcher.either(matcher);}  }
class C{  public static Discount toDiscount(VODiscount voObj) throws ValidationException {  if (voObj == null) {    return null;  }  validate(voObj);  final Discount domObj=new Discount();  copyToDomainAttributes(domObj,voObj);  return domObj;}  }
class C{  public float syncGetSystemCpuUsage(long elapse){  String stat1=readSystemStat();  if (stat1 == null) {    return -1.f;  }  try {    Thread.sleep(elapse);  } catch (  Exception e) {  }  String stat2=readSystemStat();  if (stat2 == null) {    return -1.f;  }  return getSystemCpuUsage(stat1,stat2);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.PARAMETERS__PARAMS:    setParams((ExpressionList)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void speakAnnouncement(String announcement){  int result=audioManager.requestAudioFocus(null,TextToSpeech.Engine.DEFAULT_STREAM,AudioManager.AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK);  if (result == AudioManager.AUDIOFOCUS_REQUEST_FAILED) {    Log.w(TAG,"Failed to request audio focus.");  }  tts.speak(announcement,TextToSpeech.QUEUE_FLUSH,SPEECH_PARAMS);}  }
class C{  GeneralRange<T> intersect(GeneralRange<T> other){  checkNotNull(other);  checkArgument(comparator.equals(other.comparator));  boolean hasLowBound=this.hasLowerBound;  @Nullable T lowEnd=getLowerEndpoint();  BoundType lowType=getLowerBoundType();  if (!hasLowerBound()) {    hasLowBound=other.hasLowerBound;    lowEnd=other.getLowerEndpoint();    lowType=other.getLowerBoundType();  } else   if (other.hasLowerBound()) {    int cmp=comparator.compare(getLowerEndpoint(),other.getLowerEndpoint());    if (cmp < 0 || (cmp == 0 && other.getLowerBoundType() == OPEN)) {      lowEnd=other.getLowerEndpoint();      lowType=other.getLowerBoundType();    }  }  boolean hasUpBound=this.hasUpperBound;  @Nullable T upEnd=getUpperEndpoint();  BoundType upType=getUpperBoundType();  if (!hasUpperBound()) {    hasUpBound=other.hasUpperBound;    upEnd=other.getUpperEndpoint();    upType=other.getUpperBoundType();  } else   if (other.hasUpperBound()) {    int cmp=comparator.compare(getUpperEndpoint(),other.getUpperEndpoint());    if (cmp > 0 || (cmp == 0 && other.getUpperBoundType() == OPEN)) {      upEnd=other.getUpperEndpoint();      upType=other.getUpperBoundType();    }  }  if (hasLowBound && hasUpBound) {    int cmp=comparator.compare(lowEnd,upEnd);    if (cmp > 0 || (cmp == 0 && lowType == OPEN && upType == OPEN)) {      lowEnd=upEnd;      lowType=OPEN;      upType=CLOSED;    }  }  return new GeneralRange<T>(comparator,hasLowBound,lowEnd,lowType,hasUpBound,upEnd,upType);}  }
class C{  private void nicenDotOutput(){  registerVertexAttributeProvider(new CCFGNodeAttributeProvider());  registerEdgeAttributeProvider(new CCFGEdgeAttributeProvider());}  }
class C{  public final double cos(){  return Math.cos(this.radians);}  }
class C{  public boolean lessThan(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.greaterThan(this);  return this.num() < obj2.num();}  }
class C{  private void parseInlineImage() throws IOException {  HashMap<String,PDFObject> hm=new HashMap<String,PDFObject>();  while (true) {    Tok t=nextToken();    if (t.type == Tok.CMD && t.name.equals("ID")) {      break;    }    String name=t.name;    if (!RELEASE) {      debug("ParseInlineImage, token: " + name,1000);    }    if (name.equals("BPC")) {      name="BitsPerComponent";    } else     if (name.equals("CS")) {      name="ColorSpace";    } else     if (name.equals("D")) {      name="Decode";    } else     if (name.equals("DP")) {      name="DecodeParms";    } else     if (name.equals("F")) {      name="Filter";    } else     if (name.equals("H")) {      name="Height";    } else     if (name.equals("IM")) {      name="ImageMask";    } else     if (name.equals("W")) {      name="Width";    } else     if (name.equals("I")) {      name="Interpolate";    }    Object vobj=parseObject();    hm.put(name,new PDFObject(vobj));  }  if (stream[loc] == '\r') {    loc++;  }  if (stream[loc] == '\n' || stream[loc] == ' ') {    loc++;  }  PDFObject imObj=(PDFObject)hm.get("ImageMask");  if (imObj != null && imObj.getBooleanValue()) {    Double[] decode={new Double(0),new Double(1)};    PDFObject decodeObj=(PDFObject)hm.get("Decode");    if (decodeObj != null) {      decode[0]=new Double(decodeObj.getAt(0).getDoubleValue());      decode[1]=new Double(decodeObj.getAt(1).getDoubleValue());    }    hm.put("Decode",new PDFObject(decode));  }  PDFObject obj=new PDFObject(null,PDFObject.DICTIONARY,hm);  int dstart=loc;  while (!PDFFile.isWhiteSpace(stream[loc]) || stream[loc + 1] != 'E' || stream[loc + 2] != 'I') {    loc++;  }  byte[] data=new byte[loc - dstart];  System.arraycopy(stream,dstart,data,0,loc - dstart);  obj.setStream(ByteBuffer.wrap(data));  loc+=3;  doImage(obj);}  }
class C{  static public final int random(int range){  return random.nextInt(range + 1);}  }
class C{  private void updateCharBounds(final Font font){  m_charWidth=font.getStringBounds(m_text,m_fontContext).getWidth() / getTextLayout().getCharacterCount();  m_charHeight=font.getLineMetrics(m_text,m_fontContext).getHeight();}  }
class C{  public ClassifierOptions build(){  return new ClassifierOptions(this);}  }
class C{  public boolean match(Object other){  if (other == null)   return true;  if (!(other instanceof Address))   return false; else {    AddressImpl that=(AddressImpl)other;    if (that.getMatcher() != null)     return that.getMatcher().match(this.encode()); else     if (that.displayName != null && this.displayName == null)     return false; else     if (that.displayName == null)     return address.match(that.address); else     return displayName.equalsIgnoreCase(that.displayName) && address.match(that.address);  }}  }
class C{  public SingleSessionIoHandlerAdapter(IoSession session){  if (session == null) {    throw new IllegalArgumentException("session");  }  this.session=session;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  ThemePrefs themePrefs=new ThemePrefs(this);  setTheme(themePrefs.getNewTheme());  super.onCreate(savedInstanceState);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)   getWindow().setStatusBarColor(themePrefs.getPrimaryDarkColor());  findViewById(R.id.toolbar).setBackgroundColor(themePrefs.getPrimaryColor(false));}  }
class C{  @SuppressWarnings("unchecked") public static <T>T doLookup(Name name) throws NamingException {  return (T)(new InitialContext()).lookup(name);}  }
class C{  private static boolean checkLDAPGroupObjectClasses(LdapTemplate template,RootDSE rootDSE,final AuthnProviderParamsToValidate param,StringBuilder errorString){  boolean isValidGroupObjectClasses=true;  String schemaDN=rootDSE.getSchemaNamingContext();  Set<String> errorGroupObjectClasses=null;  List<List<String>> groupObjectClassLists=searchInLDAPSchema(template,LDAP_SCHEMA_OJBECT_CLASS_ATTRIBUTE,rootDSE,param.getUrls(),errorString);  if (CollectionUtils.isEmpty(groupObjectClassLists)) {    isValidGroupObjectClasses=false;  } else {    errorGroupObjectClasses=new HashSet<String>();    for (    String expGroupObjectClass : param.getGroupObjectClasses()) {      boolean groupObjectClassFound=false;      for (      List<String> groupObjectClassList : groupObjectClassLists) {        for (        String groupObjectClass : groupObjectClassList) {          if (groupObjectClass.equalsIgnoreCase(expGroupObjectClass)) {            _log.debug("Found objectClass {} in LDAP schema {}",expGroupObjectClass,schemaDN);            groupObjectClassFound=true;            break;          }        }        if (groupObjectClassFound) {          break;        }      }      if (!groupObjectClassFound) {        errorGroupObjectClasses.add(expGroupObjectClass);      }    }  }  if (!CollectionUtils.isEmpty(errorGroupObjectClasses)) {    errorString.append(MessageFormat.format("Could not find objectClasses {0} in LDAP schema {1} at {2}",errorGroupObjectClasses.toString(),schemaDN,param.getUrls().toString()));    isValidGroupObjectClasses=false;  }  return isValidGroupObjectClasses;}  }
class C{  public int lcp(int i){  if (i < 1 || i >= n)   throw new IndexOutOfBoundsException();  return lcp(index[i],index[i - 1]);}  }
class C{  protected StatechartRootImpl(){  super();}  }
class C{  public void printStackTrace(PrintStream printstream){  super.printStackTrace(printstream);}  }
class C{  public QueryStringDecoderUtil(URI uri,Charset charset,int maxParams){  if (uri == null) {    throw new NullPointerException("getUri");  }  if (charset == null) {    throw new NullPointerException("charset");  }  if (maxParams <= 0) {    throw new IllegalArgumentException("maxParams: " + maxParams + " (expected: a positive integer)");  }  String rawPath=uri.getRawPath();  if (rawPath != null) {    hasPath=true;  } else {    rawPath="";    hasPath=false;  }  this.uri=rawPath + (uri.getRawQuery() == null ? "" : '?' + uri.getRawQuery());  this.charset=charset;  this.maxParams=maxParams;}  }
class C{  public boolean supportsColumnAliasing() throws SQLException {  return true;}  }
class C{  public static InvalidCertificateE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  InvalidCertificateE object=new InvalidCertificateE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement()) {        reader.next();      }      return null;    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"InvalidCertificate".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (InvalidCertificateE)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","InvalidCertificate").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        object.setInvalidCertificate(null);        reader.next();        reader.next();      } else {        object.setInvalidCertificate(InvalidCertificate.Factory.parse(reader));        reader.next();      }    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  void checkParameterizedTypes(){  if (compilerOptions().sourceLevel < ClassFileConstants.JDK1_5)   return;  for (int i=0, length=this.topLevelTypes.length; i < length; i++) {    ClassScope scope=this.topLevelTypes[i].scope;    scope.checkParameterizedTypeBounds();    scope.checkParameterizedSuperTypeCollisions();  }}  }
class C{  public SVG12OMDocument(DocumentType dt,DOMImplementation impl){  super(dt,impl);}  }
class C{  private void sendResults(Player admin){  admin.sendPrivateText("Item\tRarity");  List<Entry<String,Double>> items=new ArrayList<Entry<String,Double>>(rarity.entrySet());  java.util.Collections.sort(items,new EntryComparator());  StringBuilder msg=new StringBuilder();  for (  Entry<String,Double> entry : items) {    msg.append(entry.getKey());    msg.append('\t');    msg.append(1 / entry.getValue());    msg.append('\n');  }  admin.sendPrivateText(msg.toString());}  }
class C{  public static <T>List<T> toList(T[] anArrayToConvert){  ArrayList<T> aListToEnrich=new ArrayList<T>();  enrichList(aListToEnrich,anArrayToConvert);  return aListToEnrich;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case DPID:    return isSetDpid();case PORT:  return isSetPort();}throw new IllegalStateException();}  }
class C{  private static JFreeChart createPieChart3D(PieDataset dataset){  return ChartFactory.createPieChart3D("Pie Chart",dataset);}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  public CorruptIndexException(String message,DataInput input){  this(message,input,null);}  }
class C{  @Override public Properties trackVideoStop(String videoId,Double currentTime,String courseId,String unitUrl){  SegmentAnalyticsEvent aEvent=getCommonPropertiesWithCurrentTime(currentTime,videoId,Values.VIDEO_STOPPED);  aEvent.setCourseContext(courseId,unitUrl,Values.VIDEOPLAYER);  tracker.track(Events.STOPPED_VIDEO,aEvent.properties);  return aEvent.properties;}  }
class C{  private void writeChunks(OutputStream outputStream,byte[] bytes,int length,boolean smallChunks) throws IOException {synchronized (outputStream) {    int chunksize=8 * 1024;    if (smallChunks) {      chunksize=512;    }    for (int p=0; p < length; p+=chunksize) {      int chunk=p + chunksize < length ? chunksize : length - p;      outputStream.write(bytes,p,chunk);    }  }  outputStream.flush();}  }
class C{  private void initDialog(final JCriteriumTree jtree,final CConditionBox selectionBox,final JPanel defineConditionPanel,final CPanelTwoButtons okCancelPanel,final JButton addConditionButton){  final JPanel mainPanel=new JPanel(new BorderLayout());  final JPanel deviderBorderPanel=new JPanel(new BorderLayout());  deviderBorderPanel.setBorder(new EmptyBorder(2,2,2,2));  final JPanel deviderPanel=new JPanel(new GridLayout(1,2));  final JPanel leftPanel=new JPanel(new BorderLayout());  leftPanel.setBorder(new TitledBorder("Expression Tree"));  final JPanel rightPanel=new JPanel(new BorderLayout());  final JPanel rightTopPanel=new JPanel(new BorderLayout());  rightTopPanel.setBorder(new TitledBorder("Create Condition"));  final JPanel rightTopComboPanel=new JPanel(new BorderLayout());  rightTopComboPanel.setBorder(new EmptyBorder(1,5,5,5));  final JPanel rightTopAddPanel=new JPanel(new BorderLayout());  rightTopAddPanel.setBorder(new EmptyBorder(1,0,5,5));  mainPanel.add(deviderBorderPanel,BorderLayout.CENTER);  mainPanel.add(okCancelPanel,BorderLayout.SOUTH);  okCancelPanel.getFirstButton().setEnabled(jtree.getSelectionPath() != null);  deviderBorderPanel.add(deviderPanel,BorderLayout.CENTER);  deviderPanel.add(leftPanel);  deviderPanel.add(rightPanel);  final JScrollPane pane=new JScrollPane(jtree);  pane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);  pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);  leftPanel.add(pane,BorderLayout.CENTER);  defineConditionPanel.setBorder(new TitledBorder("Define Condition"));  rightPanel.add(rightTopPanel,BorderLayout.NORTH);  rightPanel.add(defineConditionPanel,BorderLayout.CENTER);  rightTopPanel.add(rightTopComboPanel,BorderLayout.CENTER);  rightTopPanel.add(rightTopAddPanel,BorderLayout.EAST);  rightTopComboPanel.add(selectionBox,BorderLayout.CENTER);  addConditionButton.setText("Add");  addConditionButton.setEnabled(false);  rightTopAddPanel.add(addConditionButton,BorderLayout.CENTER);  add(mainPanel);  setIconImage(null);  pack();}  }
class C{  private ActionButton createToolbarButton(Action action){  return new ActionButton(action,actionManager,presentationFactory.getPresentation(action),managerProvider.get(),toolbarResources);}  }
class C{  public void applySettings(boolean loadCoreComponents){  if (GUIUtils.shouldShowStartOnStartupWindow()) {    boolean allow=_startup.isSelected();    if (OSUtils.isMacOSX())     MacOSXUtils.setLoginStatus(allow); else     if (WindowsUtils.isLoginStatusAvailable())     WindowsUtils.setLoginStatus(allow);    StartupSettings.RUN_ON_STARTUP.setValue(allow);  }  ApplicationSettings.UX_STATS_ENABLED.setValue(checkBoxUXStats.isSelected());}  }
class C{  public RemoteInterpreterEvent(RemoteInterpreterEvent other){  if (other.isSetType()) {    this.type=other.type;  }  if (other.isSetData()) {    this.data=other.data;  }}  }
class C{  private TSTNode deleteNodeRecursion(TSTNode currentNode){  if (currentNode == null) {    return null;  }  if (currentNode.relatives[TSTNode.EQKID] != null || currentNode.data != null) {    return null;  }  TSTNode currentParent=currentNode.relatives[TSTNode.PARENT];  boolean lokidNull=currentNode.relatives[TSTNode.LOKID] == null;  boolean hikidNull=currentNode.relatives[TSTNode.HIKID] == null;  int childType;  if (currentParent.relatives[TSTNode.LOKID] == currentNode) {    childType=TSTNode.LOKID;  } else   if (currentParent.relatives[TSTNode.EQKID] == currentNode) {    childType=TSTNode.EQKID;  } else   if (currentParent.relatives[TSTNode.HIKID] == currentNode) {    childType=TSTNode.HIKID;  } else {    rootNode=null;    return null;  }  if (lokidNull && hikidNull) {    currentParent.relatives[childType]=null;    return currentParent;  }  if (lokidNull) {    currentParent.relatives[childType]=currentNode.relatives[TSTNode.HIKID];    currentNode.relatives[TSTNode.HIKID].relatives[TSTNode.PARENT]=currentParent;    return currentParent;  }  if (hikidNull) {    currentParent.relatives[childType]=currentNode.relatives[TSTNode.LOKID];    currentNode.relatives[TSTNode.LOKID].relatives[TSTNode.PARENT]=currentParent;    return currentParent;  }  int deltaHi=currentNode.relatives[TSTNode.HIKID].splitchar - currentNode.splitchar;  int deltaLo=currentNode.splitchar - currentNode.relatives[TSTNode.LOKID].splitchar;  int movingKid;  TSTNode targetNode;  if (deltaHi == deltaLo) {    if (Math.random() < 0.5) {      deltaHi++;    } else {      deltaLo++;    }  }  if (deltaHi > deltaLo) {    movingKid=TSTNode.HIKID;    targetNode=currentNode.relatives[TSTNode.LOKID];  } else {    movingKid=TSTNode.LOKID;    targetNode=currentNode.relatives[TSTNode.HIKID];  }  while (targetNode.relatives[movingKid] != null) {    targetNode=targetNode.relatives[movingKid];  }  targetNode.relatives[movingKid]=currentNode.relatives[movingKid];  currentParent.relatives[childType]=targetNode;  targetNode.relatives[TSTNode.PARENT]=currentParent;  if (!lokidNull) {    currentNode.relatives[TSTNode.LOKID]=null;  }  if (!hikidNull) {    currentNode.relatives[TSTNode.HIKID]=null;  }  return currentParent;}  }
class C{  IntBuffer sizeBuffer(){  IntBuffer ib=IntBuffer.allocate(1);  ib.put(byteBuffer.capacity());  return ib;}  }
class C{  @Override public boolean isSingleWorker(){  return getQueue().counterGroupSize() == 2;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_ENTITY_1__TRACE_ENTITY_1:    setTrace_entity_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public boolean isBeforeFirst() throws SQLException {  try {    debugCodeCall("isBeforeFirst");    checkClosed();    int row=result.getRowId();    int count=result.getRowCount();    return count > 0 && row < 0;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void print(byte x){  out.print(x);  out.flush();}  }
class C{  public String nextMarker(){  return nextMarker;}  }
class C{  protected AbstractAnnotationListImpl(){  super();}  }
class C{  public static long scaleLargeTimestamp(long timestamp,long multiplier,long divisor){  if (divisor >= multiplier && (divisor % multiplier) == 0) {    long divisionFactor=divisor / multiplier;    return timestamp / divisionFactor;  } else   if (divisor < multiplier && (multiplier % divisor) == 0) {    long multiplicationFactor=multiplier / divisor;    return timestamp * multiplicationFactor;  } else {    double multiplicationFactor=(double)multiplier / divisor;    return (long)(timestamp * multiplicationFactor);  }}  }
class C{  public SQLTransactionRollbackException(String reason){  super(reason,null,0);}  }
class C{  public static void sendNormalizedSAXcharacters(char ch[],int start,int length,org.xml.sax.ContentHandler handler) throws org.xml.sax.SAXException {  sendNormalizedSAXcharacters(ch,start,length,handler,SUPPRESS_BOTH);}  }
class C{  public void fireResumeEvent(){  LinkedList<BreakpointListener> l=new LinkedList<>(breakpointListeners);  for (  BreakpointListener listener : l) {    listener.resume();  }}  }
class C{  public Certificate buildCertificate(String certString) throws InvalidCertificate {  try {    String base64Cert=formatCertificate(certString);    InputStream inBytes=new ByteArrayInputStream(base64Cert.getBytes());    CertificateFactory cf=CertificateFactory.getInstance("X.509");    assert inBytes.available() > 0;    Certificate certificate=cf.generateCertificate(inBytes);    inBytes.close();    return certificate;  } catch (  Exception e) {    log.debug("buildCertificate: error " + e + " converted to InvalidCertificate.");    throw FaultUtil.InvalidCertificate("Could not build certificate");  }}  }
class C{  public WriteBuffer putLong(long x){  ensureCapacity(8).putLong(x);  return this;}  }
class C{  private static long longValue(Object attributeValue) throws NumberFormatException {  if (attributeValue instanceof Number) {    return (((Number)attributeValue).longValue());  } else {    return (Long.parseLong(attributeValue.toString()));  }}  }
class C{  public static final long floorDivide(long n,long d){  return ((n >= 0) ? (n / d) : (((n + 1L) / d) - 1L));}  }
class C{  protected int handleMarkup(final char[] text,int pos,final int end){switch (text[++pos]) {case 'D':case 'd':    while (pos < end && text[pos++] != '>')     ;  break;case '-':if ((pos=CLOSED_COMMENT.search(text,pos,end)) == -1) pos=end; else pos+=CLOSED_COMMENT.length();break;default :if (pos < end - 6 && text[pos] == '[' && text[pos + 1] == 'C' && text[pos + 2] == 'D' && text[pos + 3] == 'A' && text[pos + 4] == 'T' && text[pos + 5] == 'A' && text[pos + 6] == '[') {final int last=CLOSED_CDATA.search(text,pos,end);if (parseCDATA) callback.cdata(null,text,pos + 7,(last == -1 ? end : last) - pos - 7);pos=last == -1 ? end : last + CLOSED_CDATA.length();} else while (pos < end && text[pos++] != '>') ;break;}return pos;}  }
class C{  public boolean approxEquals(R1Interval y,double maxError){  if (isEmpty()) {    return y.getLength() <= maxError;  }  if (y.isEmpty()) {    return getLength() <= maxError;  }  return Math.abs(y.lo() - lo()) + Math.abs(y.hi() - hi()) <= maxError;}  }
class C{  public DirectedPath(Iterable<? extends Position> positions){  super(positions);}  }
class C{  public void clear(){  Arrays.fill(bits,0);  size=0;}  }
class C{  private void allocateElements(int numElements){  int initialCapacity=MIN_INITIAL_CAPACITY;  if (numElements >= initialCapacity) {    initialCapacity=numElements;    initialCapacity|=(initialCapacity >>> 1);    initialCapacity|=(initialCapacity >>> 2);    initialCapacity|=(initialCapacity >>> 4);    initialCapacity|=(initialCapacity >>> 8);    initialCapacity|=(initialCapacity >>> 16);    initialCapacity++;    if (initialCapacity < 0)     initialCapacity>>>=1;  }  elements=new Object[initialCapacity];}  }
class C{  public boolean isEmpty(){  return extOrdering.isEmpty();}  }
class C{  public static short[] toShortArray(float[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(short)array[i];  }  return result;}  }
class C{  public void insert(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode next=location.next;  if (next == null) {    last=ilast;  } else {    next.prev=ilast;  }  location.next=ifirst;  ilast.next=next;  ifirst.prev=location;  cache=null;  insns.removeAll(false);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean leaveVehicle(DistAnalysisAgent a){  if (this.passengers.remove(a)) {    return true;  } else {    return false;  }}  }
class C{  private static DiscoverInfo restoreInfoFromFile(File file) throws IOException {  DataInputStream dis=new DataInputStream(new FileInputStream(file));  String fileContent=null;  String id;  String from;  String to;  try {    fileContent=dis.readUTF();  }  finally {    dis.close();  }  if (fileContent == null)   return null;  Reader reader=new StringReader(fileContent);  XmlPullParser parser;  try {    parser=XmlPullParserFactory.newInstance().newPullParser();    parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,true);    parser.setInput(reader);  } catch (  XmlPullParserException xppe) {    xppe.printStackTrace();    return null;  }  DiscoverInfo iqPacket;  IQProvider provider=new DiscoverInfoProvider();  try {    parser.next();    id=parser.getAttributeValue("","id");    from=parser.getAttributeValue("","from");    to=parser.getAttributeValue("","to");    parser.next();  } catch (  XmlPullParserException e1) {    return null;  }  try {    iqPacket=(DiscoverInfo)provider.parseIQ(parser);  } catch (  Exception e) {    return null;  }  iqPacket.setPacketID(id);  iqPacket.setFrom(from);  iqPacket.setTo(to);  iqPacket.setType(IQ.Type.RESULT);  return iqPacket;}  }
class C{  public static double scalarProduct(Vector v1,Vector v2,FlagConfig flagConfig,BLAS blas) throws IncompatibleVectorsException {  if (!v1.getVectorType().equals(v2.getVectorType()))   throw new IncompatibleVectorsException();switch (v1.getVectorType()) {case REAL:    return blas.sdot(flagConfig.dimension(),((RealVector)v1).getCoordinates(),1,((RealVector)v2).getCoordinates(),1);case COMPLEX:  return blas.sdot(flagConfig.dimension() * 2,((ComplexVector)v1).getCoordinates(),1,((ComplexVector)v2).getCoordinates(),1);case BINARY:((BinaryVector)v1).tallyVotes();((BinaryVector)v2).tallyVotes();return v1.measureOverlap(v2);default :return 0;}}  }
class C{  public static String parse(String[] options,String option,String defValue) throws Exception {  String value=Utils.getOption(option,options);  if (value.isEmpty())   return defValue; else   return value;}  }
class C{  public static boolean isDigit(String s){  if (s == null)   return false;  return Pattern.matches("^\\d+$",s);}  }
class C{  public Address province(String province){  this.province=province;  return this;}  }
class C{  private int computeLogElementSize(){  if (elementType.getTypeRef().equals(TypeReference.Code)) {    return ArchConstants.getLogInstructionWidth();  }switch (getDescriptor().parseForArrayElementTypeCode()) {case ClassTypeCode:    return LOG_BYTES_IN_ADDRESS;case ArrayTypeCode:  return LOG_BYTES_IN_ADDRESS;case BooleanTypeCode:return LOG_BYTES_IN_BOOLEAN;case ByteTypeCode:return 0;case ShortTypeCode:return LOG_BYTES_IN_SHORT;case IntTypeCode:return LOG_BYTES_IN_INT;case LongTypeCode:return LOG_BYTES_IN_LONG;case FloatTypeCode:return LOG_BYTES_IN_FLOAT;case DoubleTypeCode:return LOG_BYTES_IN_DOUBLE;case CharTypeCode:return LOG_BYTES_IN_CHAR;}if (VM.VerifyAssertions) VM._assert(NOT_REACHED);return -1;}  }
class C{  public Boolean isCorrespondsDefinedType(VeraPDFXMPNode node){  if (this.validator == null) {    return null;  }  String type=getType(node);  return type == null ? null : Boolean.valueOf(this.validator.validate(node,type));}  }
class C{  @Override public void validate(final IDescription desc){  final String type=desc.getLitteral(IKeyword.TYPE);  if (type.equals(IKeyword.MEMORIZE)) {    desc.warning("The memorize experiment is still in development. It should not be used.",IGamlIssue.DEPRECATED);  }  if (!type.equals(IKeyword.BATCH)) {    return;  }  if (!desc.hasFacet(IKeyword.UNTIL)) {    desc.warning("No stopping condition have been defined (facet 'until:'). This may result in an endless run of the simulations",IGamlIssue.MISSING_FACET);  }}  }
class C{  public static Option create(String opt) throws IllegalArgumentException {  Option option=null;  try {    option=new Option(opt,description);    option.setLongOpt(longopt);    option.setRequired(required);    option.setOptionalArg(optionalArg);    option.setArgs(numberOfArgs);    option.setType(type);    option.setValueSeparator(valuesep);    option.setArgName(argName);  }  finally {    OptionBuilder.reset();  }  return option;}  }
class C{  private boolean initWorkbenchWindows(){  String sql="SELECT AD_Window_ID, AD_Form_ID, AD_Process_ID, AD_Task_ID " + "FROM AD_WorkbenchWindow " + "WHERE AD_Workbench_ID=? AND IsActive='Y'"+ "ORDER BY SeqNo";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Workbench_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int AD_Window_ID=rs.getInt(1);      int AD_Form_ID=rs.getInt(2);      int AD_Process_ID=rs.getInt(3);      int AD_Task_ID=rs.getInt(4);      if (AD_Window_ID > 0)       m_windows.add(new WBWindow(TYPE_WINDOW,AD_Window_ID)); else       if (AD_Form_ID > 0)       m_windows.add(new WBWindow(TYPE_FORM,AD_Form_ID)); else       if (AD_Process_ID > 0)       m_windows.add(new WBWindow(TYPE_PROCESS,AD_Process_ID)); else       if (AD_Task_ID > 0)       m_windows.add(new WBWindow(TYPE_TASK,AD_Task_ID));    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    return false;  }  return true;}  }
class C{  public SelectIterator<T,ID> buildIterator(BaseDaoImpl<T,ID> classDao,ConnectionSource connectionSource,int resultFlags,ObjectCache objectCache) throws SQLException {  prepareQueryForAll();  return buildIterator(classDao,connectionSource,preparedQueryForAll,objectCache,resultFlags);}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void printInfo(PrintStream s,NumberFormat numberFormat){  s.print("filename = \"");  s.print(name);  s.println("\"");  s.print("rrd_version = \"");  s.print(header.version);  s.println("\"");  s.print("step = ");  s.println(header.pdpStep);  s.print("last_update = ");  s.println(lastUpdate.getTime() / 1000);  for (  DataSource ds : dataSources) {    ds.printInfo(s,numberFormat);  }  int index=0;  for (  Archive archive : archives) {    archive.printInfo(s,numberFormat,index++);  }}  }
class C{  public int localsLength(){  return locals.length;}  }
class C{  public Statement neq(Object value){  return compare("<>",value);}  }
class C{  public void testCase8(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,1,2,3,4,5};  int aSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  private boolean createTableData(MTable mTable){  boolean success=true;  int count=0;  int errors=0;  long start=System.currentTimeMillis();  String sql="SELECT * FROM " + mTable.getTableName();  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,mTable.get_TrxName());    rs=pstmt.executeQuery();    while (rs.next()) {      if (createTableDataRow(rs,mTable))       count++; else       errors++;    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    success=false;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  long elapsed=System.currentTimeMillis() - start;  log.config("Inserted=" + count + " - Errors="+ errors+ " - "+ elapsed+ " ms");  return success;}  }
class C{  public void loadTraces(Reader r) throws TraceException, java.io.IOException {  TrimLineReader reader=new LogFileTraces.TrimLineReader(r);  StringTokenizer tokens=reader.tokenizeLine();  if (tokens == null) {    throw new TraceException("Trace file is empty.");  }  while (!tokens.hasMoreTokens()) {    tokens=reader.tokenizeLine();  }  String token=tokens.nextToken();  while (token.startsWith("[") || token.startsWith("#")) {    readTraceType(token,tokens);    tokens=reader.tokenizeLine();    while (!tokens.hasMoreTokens()) {      tokens=reader.tokenizeLine();    }    token=tokens.nextToken();  }  String[] labels=new String[tokens.countTokens()];  for (int i=0; i < labels.length; i++) {    labels[i]=tokens.nextToken();    addTraceAndType(labels[i]);  }  int traceCount=getTraceCount();  boolean firstState=true;  tokens=reader.tokenizeLine();  while (tokens != null && tokens.hasMoreTokens()) {    String stateString=tokens.nextToken();    long state=0;    try {      try {        state=(long)Double.parseDouble(stateString);      } catch (      NumberFormatException nfe) {        throw new TraceException("Unable to parse state number in column 1 (Line " + reader.getLineNumber() + ")");      }      if (firstState) {        if (state == 1)         state=0;        firstState=false;      }      if (!addState(state)) {        throw new TraceException("State " + state + " is not consistent with previous spacing (Line "+ reader.getLineNumber()+ ")");      }    } catch (    NumberFormatException nfe) {      throw new TraceException("State " + state + ":Expected real value in column "+ reader.getLineNumber());    }    for (int i=0; i < traceCount; i++) {      if (tokens.hasMoreTokens()) {        String value=tokens.nextToken();        if (state == 0)         assignTraceTypeAccordingValue(value);        try {          addParsedValue(i,value);        } catch (        NumberFormatException nfe) {          throw new TraceException("State " + state + ": Expected correct number type (Double, Integer or String) in column "+ (i + 1)+ " (Line "+ reader.getLineNumber()+ ")");        }      } else {        throw new TraceException("State " + state + ": missing values at line "+ reader.getLineNumber());      }    }    tokens=reader.tokenizeLine();  }  burnIn=(int)(0.1 * lastState);}  }
class C{  public boolean isReadOnly(){  return m_readOnly;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:49.370 -0500",hash_original_method="A4CE5F54BDA2367531BCEA3F1517BC09",hash_generated_method="FE37A70ACE94F0EDE1EBA253A75202E1") public boolean isFixedSize(){  return (mRequestedWidth != -1 || mRequestedHeight != -1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.951 -0500",hash_original_method="CCD3032C3525D921C0B3FD28370332A3",hash_generated_method="BFC6A709237B3892C610C764284EEBC1") public void removeAttribute(int index){  if (index >= 0 && index < length) {    if (index < length - 1) {      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);    }    index=(length - 1) * 5;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index]=null;    length--;  } else {    badIndex(index);  }}  }
class C{  @Scheduled(cron="0 0 1 * * ?") public void removeNotActivatedUsers(){  ZonedDateTime now=ZonedDateTime.now();  List<User> users=userRepository.findAllByActivatedIsFalseAndCreatedDateBefore(now.minusDays(3));  for (  User user : users) {    log.debug("Deleting not activated user {}",user.getLogin());    userRepository.delete(user);  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? source[srcOffset] << 24 >>> 8 : 0) | (numSigBytes > 1 ? source[srcOffset + 1] << 24 >>> 16 : 0) | (numSigBytes > 2 ? source[srcOffset + 2] << 24 >>> 24 : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[inBuff >>> 18];  destination[destOffset + 1]=ALPHABET[inBuff >>> 12 & 0x3f];destination[destOffset + 2]=ALPHABET[inBuff >>> 6 & 0x3f];destination[destOffset + 3]=ALPHABET[inBuff & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[inBuff >>> 18];destination[destOffset + 1]=ALPHABET[inBuff >>> 12 & 0x3f];destination[destOffset + 2]=ALPHABET[inBuff >>> 6 & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[inBuff >>> 18];destination[destOffset + 1]=ALPHABET[inBuff >>> 12 & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){  return factory.getDefaultEnvelope();}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  private static Url parseUrl(final String spec){  final Url url=new Url();  int startIndex=0;  int endIndex=spec.length();  final int crosshatchIndex=indexOf(spec,'#',startIndex,endIndex);  if (crosshatchIndex >= 0) {    url.fragment_=spec.substring(crosshatchIndex + 1,endIndex);    endIndex=crosshatchIndex;  }  final int colonIndex=indexOf(spec,':',startIndex,endIndex);  if (colonIndex > 0) {    final String scheme=spec.substring(startIndex,colonIndex);    if (isValidScheme(scheme)) {      url.scheme_=scheme;      startIndex=colonIndex + 1;    }  }  final int locationStartIndex;  int locationEndIndex;  if (spec.startsWith("//",startIndex)) {    locationStartIndex=startIndex + 2;    locationEndIndex=indexOf(spec,'/',locationStartIndex,endIndex);    if (locationEndIndex >= 0) {      startIndex=locationEndIndex;    }  } else {    locationStartIndex=-1;    locationEndIndex=-1;  }  final int questionMarkIndex=indexOf(spec,'?',startIndex,endIndex);  if (questionMarkIndex >= 0) {    if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {      locationEndIndex=questionMarkIndex;      startIndex=questionMarkIndex;    }    url.query_=spec.substring(questionMarkIndex + 1,endIndex);    endIndex=questionMarkIndex;  }  final int semicolonIndex=indexOf(spec,';',startIndex,endIndex);  if (semicolonIndex >= 0) {    if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {      locationEndIndex=semicolonIndex;      startIndex=semicolonIndex;    }    url.parameters_=spec.substring(semicolonIndex + 1,endIndex);    endIndex=semicolonIndex;  }  if ((locationStartIndex >= 0) && (locationEndIndex < 0)) {    locationEndIndex=endIndex;  } else   if (startIndex < endIndex) {    url.path_=spec.substring(startIndex,endIndex);  }  if ((locationStartIndex >= 0) && (locationEndIndex >= 0)) {    url.location_=spec.substring(locationStartIndex,locationEndIndex);  }  return url;}  }
class C{  @Override public boolean onPreferenceChange(Preference preference,Object newValue){  preference.setSummary((CharSequence)newValue);  return true;}  }
class C{  public void assertSamePathCounts(int[][] expected,int[][] actual){  int nrows=expected.length;  int ncols=expected[0].length;  assertEquals("rows",nrows,actual.length);  assertEquals("cols",ncols,actual[0].length);  for (int i=0; i < nrows; i++) {    for (int j=0; j < ncols; j++) {      assertEquals("M[" + i + ","+ j+ "]",expected[i][j],actual[i][j]);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodehasattributes02.class,args);}  }
class C{  protected double findMaxValue(){  double max=0.0f;  for (int s=0; s < getSeriesCount(); s++) {    for (int i=0; i < this.historyCount; i++) {      double tmp=getYValue(s,i);      if (tmp > max) {        max=tmp;      }    }  }  return max;}  }
class C{  public float distance(int x,int y){  float distance=Float.POSITIVE_INFINITY;  if (getNeedToRegenerate()) {    System.err.println("JUnit.distance(): not projected!");    return distance;  }  if (point1 == null) {    System.err.println("JUnit.distance(): invalid" + " Raster location");    return distance;  }  if ((x >= point1.x && x <= point1.x + total_width) && (y >= point1.y && y <= point1.y + total_height)) {    return 0f;  } else {    distance=Math.max(Math.max(point1.x - x,x - (point1.x + total_width)),Math.max(point1.y - y,y - (point1.y + total_height)));  }  return distance;}  }
class C{  public void writeRawBytes(final byte[] value) throws IOException {  writeRawBytes(value,0,value.length);}  }
class C{  public XPathProcessorException(String message){  super(message);}  }
class C{  private float applyBounce(float velocity,float distOutOfBounds,float simulationRate){  if (isZero(distOutOfBounds)) {    return velocity;  }  velocity*=-1;  float bounce=BOUNCE_MULTIPLIER * Math.abs(distOutOfBounds / mIrisRadius);  if (velocity > 0) {    velocity+=bounce * simulationRate;  } else {    velocity-=bounce * simulationRate;  }  return velocity;}  }
class C{  public byte writeCredential(DataOutputStream dos,DataInputStream dis,String authInit,boolean isNotification,DistributedMember member,HeapDataOutputStream heapdos) throws IOException, GemFireSecurityException {  if (!this.multiuserSecureMode && (authInit == null || authInit.length() == 0)) {    heapdos.writeByte(CREDENTIALS_NONE);    heapdos.flush();    dos.write(heapdos.toByteArray());    dos.flush();    return -1;  }  if (dhSKAlgo == null || dhSKAlgo.length() == 0) {    heapdos.writeByte(CREDENTIALS_NORMAL);    this.appSecureMode=CREDENTIALS_NORMAL;    heapdos.flush();    dos.write(heapdos.toByteArray());    dos.flush();    return -1;  }  byte acceptanceCode=-1;  try {    InternalLogWriter securityLogWriter=(InternalLogWriter)this.system.getSecurityLogWriter();    securityLogWriter.fine("HandShake: using Diffie-Hellman key exchange with algo " + dhSKAlgo);    boolean requireAuthentication=(certificateFilePath != null && certificateFilePath.length() > 0);    if (requireAuthentication) {      securityLogWriter.fine("HandShake: server authentication using digital " + "signature required");    }    heapdos.writeByte(CREDENTIALS_DHENCRYPT);    this.appSecureMode=CREDENTIALS_DHENCRYPT;    heapdos.writeBoolean(requireAuthentication);    DataSerializer.writeString(dhSKAlgo,heapdos);    byte[] keyBytes=dhPublicKey.getEncoded();    DataSerializer.writeByteArray(keyBytes,heapdos);    byte[] clientChallenge=null;    if (requireAuthentication) {      clientChallenge=new byte[64];      random.nextBytes(clientChallenge);      DataSerializer.writeByteArray(clientChallenge,heapdos);    }    heapdos.flush();    dos.write(heapdos.toByteArray());    dos.flush();    acceptanceCode=dis.readByte();    if (acceptanceCode != REPLY_OK && acceptanceCode != REPLY_AUTH_NOT_REQUIRED) {      dis.readByte();      dis.readInt();      if (!isNotification) {        DataSerializer.readByteArray(dis);      }      readMessage(dis,dos,acceptanceCode,member);    } else     if (acceptanceCode == REPLY_OK) {      keyBytes=DataSerializer.readByteArray(dis);      if (requireAuthentication) {        String subject=DataSerializer.readString(dis);        byte[] signatureBytes=DataSerializer.readByteArray(dis);        if (!certificateMap.containsKey(subject)) {          throw new AuthenticationFailedException(LocalizedStrings.HandShake_HANDSHAKE_FAILED_TO_FIND_PUBLIC_KEY_FOR_SERVER_WITH_SUBJECT_0.toLocalizedString(subject));        }        X509Certificate cert=(X509Certificate)certificateMap.get(subject);        Signature sig=Signature.getInstance(cert.getSigAlgName());        sig.initVerify(cert);        sig.update(clientChallenge);        if (!sig.verify(signatureBytes)) {          throw new AuthenticationFailedException("Mismatch in client " + "challenge bytes. Malicious server?");        }        securityLogWriter.fine("HandShake: Successfully verified the " + "digital signature from server");      }      byte[] serverChallenge=DataSerializer.readByteArray(dis);      X509EncodedKeySpec x509KeySpec=new X509EncodedKeySpec(keyBytes);      KeyFactory keyFact=KeyFactory.getInstance("DH");      this.clientPublicKey=keyFact.generatePublic(x509KeySpec);      HeapDataOutputStream hdos=new HeapDataOutputStream(Version.CURRENT);      try {        DataSerializer.writeByteArray(serverChallenge,hdos);        byte[] encBytes=encryptBytes(hdos.toByteArray(),getEncryptCipher(dhSKAlgo,this.clientPublicKey));        DataSerializer.writeByteArray(encBytes,dos);      }  finally {        hdos.close();      }    }  } catch (  IOException ex) {    throw ex;  }catch (  GemFireSecurityException ex) {    throw ex;  }catch (  Exception ex) {    throw new AuthenticationFailedException("HandShake failed in Diffie-Hellman key exchange",ex);  }  dos.flush();  return acceptanceCode;}  }
class C{  public static void evaluateGateNoiseMargin(Gate g,Args options){  if (options.is_noise_margin() == false) {    g.get_scores().set_noise_margin_contract(true);    return;  }  if (g.Type == GateType.INPUT || g.Type == GateType.OUTPUT || g.Type == GateType.OUTPUT_OR) {    return;  }  HashMap<String,Double> lowest_on_rpu=GateUtil.getIncomingONlow(g);  HashMap<String,Double> highest_off_rpu=GateUtil.getIncomingOFFhigh(g);  ArrayList<Double> all_margins=new ArrayList<Double>();  for (  String var : highest_off_rpu.keySet()) {    if (g.get_variable_thresholds().get(var) != null) {      Double IL=g.get_variable_thresholds().get(var)[0];      Double log_input_rpu=Math.log10(highest_off_rpu.get(var));      Double NML=Math.log10(IL) - log_input_rpu;      all_margins.add(NML);    }  }  for (  String var : lowest_on_rpu.keySet()) {    if (g.get_variable_thresholds().get(var) != null) {      Double IH=g.get_variable_thresholds().get(var)[1];      Double NMH=Math.log10(lowest_on_rpu.get(var)) - Math.log10(IH);      all_margins.add(NMH);    }  }  if (all_margins.isEmpty()) {    g.get_scores().set_noise_margin(0.0);    g.get_scores().set_noise_margin_contract(true);  } else {    Collections.sort(all_margins);    g.get_scores().set_noise_margin(all_margins.get(0));    if (all_margins.get(0) < 0) {      g.get_scores().set_noise_margin_contract(false);    } else {      g.get_scores().set_noise_margin_contract(true);    }  }}  }
class C{  public static boolean isTrivialTable(SymbolTable table){  if (table == null)   return true;  if (table.isSystemTable())   return true;  if (table.isLocalTable()) {    if (table.getMaxId() == table.getSystemSymbolTable().getMaxId()) {      return true;    }  }  return false;}  }
class C{  public BranchGroupPortrayal3D(BranchGroup scene,Transform3D transform){  this(scene,transform,null);}  }
class C{  @Override public void remove(Object key){  try {    getGeodeRegion().destroy((String)key);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public LessEqualGlobalConstraint(NumberParameter<?,T> first,NumberParameter<?,T> second){  this.first=first;  this.second=second;}  }
class C{  public final long maxDoc(){  return maxDoc;}  }
class C{  void reseed(){  V=entropySource.getEntropy();  reseedCounter=1;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public boolean saveModel(FModel model,String filename,String cwd){  return saveModel(model,filename,cwd,null);}  }
class C{  public void widgetDefaultSelected(SelectionEvent e){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void checkAndRetry(final Iterable<? extends T> iterable) throws IOException {  checkAndRetry(iterable,null);}  }
class C{  public void addTab(String tabName,GridTab gTab,Component tabElement){  int index=getTabCount();  tabNames.add(tabName);  gTabs.add(gTab);  components.add(tabElement);  super.addTab(tabName,gTab.getIcon(),tabElement,gTab.getDescription());  ArrayList<String> dependents=gTab.getDependentOn();  for (int i=0; i < dependents.size(); i++) {    String name=dependents.get(i);    if (!m_dependents.contains(name))     m_dependents.add(name);  }  if (s_disabledIcon == null)   s_disabledIcon=Env.getImageIcon("Cancel10.gif");  setDisabledIconAt(index,s_disabledIcon);}  }
class C{  @Override public void processChallenge(final String challenge) throws MalformedChallengeException {  final String s=AuthChallengeParser.extractScheme(challenge);  if (!s.equalsIgnoreCase(getSchemeName())) {    throw new MalformedChallengeException("Invalid " + getSchemeName() + " challenge: "+ challenge);  }  params=AuthChallengeParser.extractParams(challenge);}  }
class C{  private boolean rcDisplayIsPluggedIn_syncRcStack(IRemoteControlDisplay rcd){  final Iterator<DisplayInfoForServer> displayIterator=mRcDisplays.iterator();  while (displayIterator.hasNext()) {    final DisplayInfoForServer di=(DisplayInfoForServer)displayIterator.next();    if (di.mRcDisplay.asBinder().equals(rcd.asBinder())) {      return true;    }  }  return false;}  }
class C{  public boolean previous() throws SQLException {  if (getType() == ResultSet.TYPE_FORWARD_ONLY) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.last").toString());  }  if (cursorPos < 0 || cursorPos > numRows + 1) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidcp").toString());  }  boolean ret=this.internalPrevious();  notifyCursorMoved();  return ret;}  }
class C{  public final boolean isWild(){  return m_wild;}  }
class C{  protected static String buildCoreTag(CoreDescriptor cd){  StringBuilder builder=new StringBuilder(NEWLINE).append(INDENT).append("<core");  for (  Map.Entry<Object,Object> entry : cd.getPersistableStandardProperties().entrySet()) {    builder.append(" ").append(entry.getKey()).append("=\"").append(entry.getValue()).append("\"");  }  Properties userProperties=cd.getPersistableUserProperties();  if (userProperties.isEmpty()) {    return builder.append("/>").append(NEWLINE).toString();  }  builder.append(">").append(NEWLINE);  for (  Map.Entry<Object,Object> entry : userProperties.entrySet()) {    builder.append(INDENT).append(INDENT).append("<property name=\"").append(entry.getKey()).append("\" value=\"").append(entry.getValue()).append("\"/>").append(NEWLINE);  }  return builder.append("</core>").append(NEWLINE).toString();}  }
class C{  private static void applyTypeface(ViewGroup viewGroup,TypefaceCollection typefaceCollection){  for (int i=0; i < viewGroup.getChildCount(); i++) {    View childView=viewGroup.getChildAt(i);    if (childView instanceof ViewGroup) {      applyTypeface((ViewGroup)childView,typefaceCollection);    } else {      applyForView(childView,typefaceCollection);    }  }}  }
class C{  private void cmd_type(){  ValueNamePair vp=(ValueNamePair)typeField.getSelectedItem();  if (vp.getValue().equals(CompiereColor.TYPE_FLAT))   m_cc=new CompiereColor(CompiereColor.TYPE_FLAT); else   if (vp.getValue().equals(CompiereColor.TYPE_GRADIENT))   m_cc=new CompiereColor(CompiereColor.TYPE_GRADIENT); else   if (vp.getValue().equals(CompiereColor.TYPE_TEXTURE))   m_cc=new CompiereColor(CompiereColor.TYPE_TEXTURE); else   if (vp.getValue().equals(CompiereColor.TYPE_LINES))   m_cc=new CompiereColor(CompiereColor.TYPE_LINES);  setColor(m_cc);}  }
class C{  public boolean waitFor(long timeout){  if (!complete) {    try {      value=task.get(timeout);      complete=true;      context.updateTaskLog(log,elapsedTime());    } catch (    TimeoutException e) {    }catch (    Exception e) {      error=new ExecutionException(e);      complete=true;      context.updateTaskLog(log,elapsedTime(),e);    }  }  return complete;}  }
class C{  public static void main(String[] args){  try {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  } catch (  ClassNotFoundException e) {    e.printStackTrace();  }catch (  InstantiationException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  UnsupportedLookAndFeelException e) {    e.printStackTrace();  }  ExampleGraphics2D window=new ExampleGraphics2D();  window.setVisible(true);  window.start();}  }
class C{  protected void reset(){  if (mTouchHelper != null) {    mTouchHelper.reset();  }  if (mMatrixHelper != null) {    mMatrixHelper.reset();  }}  }
class C{  private void generateHostComponentVariable(Context cx,CompilationUnit unit,TypeAnalyzer typeAnalyzer){  MetaDataNode node=unit.hostComponentMetaData;  if (node.count() == 1) {    Node def=node.def;    if (def instanceof ClassDefinitionNode) {      unit.expressions.add(NameFormatter.toMultiName(node.getValue(0)));      ClassDefinitionNode classDef=(ClassDefinitionNode)def;      if (!classDeclaresIdentifier(cx,classDef,typeAnalyzer,SKINHOSTCOMPONENT)) {        NodeFactory nodeFactory=cx.getNodeFactory();        MetaDataNode bindingMetaData=AbstractSyntaxTreeUtil.generateMetaData(nodeFactory,BINDABLE);        bindingMetaData.setId(BINDABLE);        StatementListNode statementList=nodeFactory.statementList(classDef.statements,bindingMetaData);        int listSize=node.def.metaData.items.size();        if (listSize > 1) {          for (int ix=0; ix < listSize; ix++) {            Node tempMeta=node.def.metaData.items.get(ix);            if (tempMeta instanceof MetaDataNode) {              MetaDataNode tempMetaData=(MetaDataNode)tempMeta;              if ("HostComponent".equals(tempMetaData.getId()) && (ix < listSize - 1)) {                Node temp=node.def.metaData.items.get(ix + 1);                if (temp instanceof DocCommentNode) {                  DocCommentNode tempDoc=((DocCommentNode)temp);                  macromedia.asc.parser.MetaDataEvaluator evaluator=new macromedia.asc.parser.MetaDataEvaluator();                  evaluator.evaluate(cx,tempDoc);                  if (evaluator.doccomments != null && evaluator.doccomments.size() != 0) {                    String comment=evaluator.doccomments.get(0).getId();                    if (comment != null) {                      DocCommentNode hostComponentComment=AbstractSyntaxTreeUtil.generateDocComment(nodeFactory,comment.intern());                      if (hostComponentComment != null) {                        statementList=nodeFactory.statementList(statementList,hostComponentComment);                      }                    }                  }                  break;                }              }            }          }        }        TypeExpressionNode typeExpression=AbstractSyntaxTreeUtil.generateTypeExpression(nodeFactory,node.getValue(0),true);        VariableDefinitionNode variableDefinition=AbstractSyntaxTreeUtil.generatePublicVariable(cx,typeExpression,SKINHOSTCOMPONENT);        classDef.statements=nodeFactory.statementList(statementList,variableDefinition);        BindableFirstPassEvaluator firstPassEvaluator=(BindableFirstPassEvaluator)unit.getContext().getAttribute(BindableExtension.FIRST_PASS_EVALUATOR_KEY);        if (firstPassEvaluator != null)         firstPassEvaluator.registerBindableVariable(cx,classDef,variableDefinition);      }    }  }}  }
class C{  protected LocPathIterator createDTMIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {  LocPathIterator lpi=(LocPathIterator)WalkerFactory.newDTMIterator(compiler,opPos,(compiler.getLocationPathDepth() <= 0));  return lpi;}  }
class C{  public TechnicalServiceOperationException(String message,Object[] params,Throwable t){  super(message,t,params);}  }
class C{  public void testDownOnInnerUpOnTouchableParent(){  View innerButton=getViewByTestId("A");  View touchableParent=getViewByTestId("B");  SingleTouchGestureGenerator gestureGenerator=createGestureGenerator();  gestureGenerator.startGesture(innerButton);  waitForBridgeAndUIIdle();  gestureGenerator.dragTo(touchableParent,15).endGesture();  waitForBridgeAndUIIdle();  assertEquals(1,mRecordingModule.getCalls().size());  assertEquals("inner",mRecordingModule.getCalls().get(0));  mRecordingModule.reset();  touchableParent=getViewByTestId("D");  innerButton=getViewByTestId("C");  gestureGenerator=createGestureGenerator();  gestureGenerator.startGesture(innerButton);  waitForBridgeAndUIIdle();  gestureGenerator.dragTo(touchableParent,15).endGesture();  waitForBridgeAndUIIdle();  assertEquals(1,mRecordingModule.getCalls().size());  assertEquals("outer",mRecordingModule.getCalls().get(0));}  }
class C{  public MutableInterval(ReadableInstant start,ReadablePeriod period){  super(start,period);}  }
class C{  private void commitCompetitiveNetworkFieldValues(){  ((CompetitiveNetwork)competitive).getCompetitive().setUpdateMethod((UpdateMethod)updateMethod.getSelectedItem());  ((CompetitiveNetwork)competitive).getCompetitive().setLearningRate(Double.parseDouble(tfEpsilon.getText()));  ((CompetitiveNetwork)competitive).getCompetitive().setWinValue(Double.parseDouble(tfWinnerValue.getText()));  ((CompetitiveNetwork)competitive).getCompetitive().setLoseValue(Double.parseDouble(tfLoserValue.getText()));  ((CompetitiveNetwork)competitive).getCompetitive().setSynpaseDecayPercent(Double.parseDouble(tfSynpaseDecayPercent.getText()));  ((CompetitiveNetwork)competitive).getCompetitive().setLeakyLearningRate(Double.parseDouble(tfLeakyEpsilon.getText()));  ((CompetitiveNetwork)competitive).getCompetitive().setUseLeakyLearning(cbUseLeakyLearning.isSelected());  ((CompetitiveNetwork)competitive).getCompetitive().setNormalizeInputs(cbNormalizeInputs.isSelected());}  }
class C{  protected void prepare(){  p_Record_ID=getRecord_ID();  ProcessInfoParameter[] parameters=getParameter();  for (  ProcessInfoParameter para : parameters) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public static int computeLazyFieldMessageSetExtensionSize(final int fieldNumber,final LazyField value){  return computeTagSize(WireFormat.MESSAGE_SET_ITEM) * 2 + computeUInt32Size(WireFormat.MESSAGE_SET_TYPE_ID,fieldNumber) + computeLazyFieldSize(WireFormat.MESSAGE_SET_MESSAGE,value);}  }
class C{  public double totalUsed(){  return memory.getHeapMemoryUsage().getUsed() + memory.getNonHeapMemoryUsage().getUsed();}  }
class C{  public static String notEmptyIfNotNull(String value,String name){  return notEmptyIfNotNull(value,name,null);}  }
class C{  protected void close(){  int index;  index=m_TabbedPane.getSelectedIndex();  if (index > -1) {    try {      getCurrentTable().finalize();    } catch (    Throwable t) {      System.out.println(t);    }    m_TabbedPane.removeTabAt(index);  }  setButtons();}  }
class C{  public Resize(DataSource data,int cols,int rows){  super(data,Mode.ZERO);  this.cols=cols;  this.rows=rows;  filter();}  }
class C{  public static void clear(RegionEventImpl regionEvent,RegionVersionVector rvv,Set<InternalDistributedMember> recipients){  new DistributedClearOperation(DistributedClearOperation.OperationType.OP_CLEAR,regionEvent,rvv,recipients).distribute();}  }
class C{  public EMail createEMail(String to,String subject,String message,boolean html){  if (to == null || to.length() == 0) {    log.warning("No To");    return null;  }  EMail email=null;  if (isServerEMail() && Ini.isClient()) {    Server server=CConnection.get().getServer();    try {      if (server != null) {        if (html && message != null)         message=EMail.HTML_MAIL_MARKER + message;        email=server.createEMail(Env.getRemoteCallCtx(getCtx()),getAD_Client_ID(),to,subject,message);      } else       log.log(Level.WARNING,"No AppsServer");    } catch (    Exception ex) {      log.log(Level.SEVERE,getName() + " - AppsServer error",ex);    }  }  if (email == null)   email=new EMail(this,getRequestEMail(),to,subject,message,html);  if (isSmtpAuthorization())   email.createAuthenticator(getRequestUser(),getRequestUserPW());  return email;}  }
class C{  public SpkacException(String message,Throwable causeThrowable){  super(message,causeThrowable);}  }
class C{  public static Range<Double> valueOfDouble(String str){  return Range.valueOf(str,null);}  }
class C{  protected void reduceJobResult(VisorNodeDataCollectorTaskResult taskRes,VisorNodeDataCollectorJobResult jobRes,UUID nid){  taskRes.gridNames().put(nid,jobRes.gridName());  taskRes.topologyVersions().put(nid,jobRes.topologyVersion());  taskRes.taskMonitoringEnabled().put(nid,jobRes.taskMonitoringEnabled());  taskRes.errorCounts().put(nid,jobRes.errorCount());  if (!jobRes.events().isEmpty())   taskRes.events().addAll(jobRes.events());  if (jobRes.eventsEx() != null)   taskRes.eventsEx().put(nid,new VisorExceptionWrapper(jobRes.eventsEx()));  if (!jobRes.caches().isEmpty())   taskRes.caches().put(nid,jobRes.caches());  if (jobRes.cachesEx() != null)   taskRes.cachesEx().put(nid,new VisorExceptionWrapper(jobRes.cachesEx()));  if (!jobRes.igfss().isEmpty())   taskRes.igfss().put(nid,jobRes.igfss());  if (!jobRes.igfsEndpoints().isEmpty())   taskRes.igfsEndpoints().put(nid,jobRes.igfsEndpoints());  if (jobRes.igfssEx() != null)   taskRes.igfssEx().put(nid,new VisorExceptionWrapper(jobRes.igfssEx()));}  }
class C{  public int pollValue(){  int first=0xFF & ((byte)getElement(0));  int second=0xFF & ((byte)getElement(1));  return first * 256 + second;}  }
class C{  public static int determineSeed(Output output,ParameterDatabase parameters,Parameter seedParameter,long currentTime,int offset,boolean auto){  int seed=1;  String tmp_s=parameters.getString(seedParameter,null);  if (tmp_s == null && !auto) {    output.fatal("Seed must exist.",seedParameter,null);  } else   if (V_SEED_TIME.equalsIgnoreCase(tmp_s) || (tmp_s == null && auto)) {    if (tmp_s == null && auto)     output.warnOnce("Using automatic determination number of threads, but not all seeds are defined.\nThe rest will be defined using the wall clock time.");    seed=(int)currentTime;    if (seed == 0)     output.fatal("Whoa! This Java version is returning 0 for System.currentTimeMillis(), which ain't right.  This means you can't use '" + V_SEED_TIME + "' as a seed ",seedParameter,null);  } else {    try {      seed=parameters.getInt(seedParameter,null);    } catch (    NumberFormatException e) {      output.fatal("Invalid, non-integer seed value (" + seed + ")",seedParameter,null);    }  }  return seed + offset;}  }
class C{  private final void cancelFullNotification(){  if (localLOGV)   Slog.i(TAG,"Canceling memory full notification");  mContext.removeStickyBroadcastAsUser(mStorageFullIntent,UserHandle.ALL);  mContext.sendBroadcastAsUser(mStorageNotFullIntent,UserHandle.ALL);}  }
class C{  @Override public boolean isMovable(){  return false;}  }
class C{  public static double binomial(double n,long k){  if (k < 0)   return 0;  if (k == 0)   return 1;  if (k == 1)   return n;  double a=n - k + 1;  double b=1;  double binomial=1;  for (long i=k; i-- > 0; ) {    binomial*=(a++) / (b++);  }  return binomial;}  }
class C{  public static void longToByteArray(long lValue,byte[] buffer,int nStartIndex){  buffer[nStartIndex]=(byte)(lValue >>> 56);  buffer[nStartIndex + 1]=(byte)((lValue >>> 48) & 0x0ff);  buffer[nStartIndex + 2]=(byte)((lValue >>> 40) & 0x0ff);  buffer[nStartIndex + 3]=(byte)((lValue >>> 32) & 0x0ff);  buffer[nStartIndex + 4]=(byte)((lValue >>> 24) & 0x0ff);  buffer[nStartIndex + 5]=(byte)((lValue >>> 16) & 0x0ff);  buffer[nStartIndex + 6]=(byte)((lValue >>> 8) & 0x0ff);  buffer[nStartIndex + 7]=(byte)lValue;}  }
class C{  public boolean hasTransaction(){  return this.transaction != null;}  }
class C{  public boolean isBodyReq(){  return isBodyReq;}  }
class C{  public MockSerializer(final Object deserializeReturn,final String serializeReturn){  mDeserializeReturn=deserializeReturn;  mSerializeReturn=serializeReturn;}  }
class C{  private void checkAffinityKey(Affinity testAff,Affinity aff){  for (int i=0; i < 10000; i++)   assertEquals(testAff.affinityKey(i),aff.affinityKey(i));}  }
class C{  public CNodeChooserModel(final ZyGraph graph){  m_graph=Preconditions.checkNotNull(graph,"IE01765: Graph argument can not be null");  m_nodeCache=CollectionHelpers.filter(getNodes(),new NodeFilter());}  }
class C{  @Override public ConnectionConsumer createConnectionConsumer(final Topic topic,final String messageSelector,final ServerSessionPool sessionPool,final int maxMessages) throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createConnectionConsumer(" + topic + ", "+ messageSelector+ ", "+ sessionPool+ ", "+ maxMessages+ ")");  }  throw new IllegalStateException(ISE);}  }
class C{  protected static void snooze(long ms){  try {    Thread.sleep(ms);  } catch (  InterruptedException ex) {  }}  }
class C{  public Element parseXMLURL(URL url){  try {    InputStream stream=Utils.openStream(url);    return parseXML(stream);  } catch (  FileNotFoundException notFound) {    log(notFound.toString(),Level.WARNING);    return null;  }catch (  Exception ioException) {    if (getBot().isDebugFine()) {      log(ioException);    } else {      log(ioException.toString(),Bot.WARNING,url);    }    return null;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  @Override public String toString(){  return title + " " + game+ " "+ lastActivity+ " "+ timesUsed+ " "+ favorite;}  }
class C{  public final static char toUniCode(int p){  return (char)(WHITE_KING + p - 1);}  }
class C{  public static ICCProfileFeaturesData newInstance(InputStream metadata,InputStream stream,Integer n,List<Double> range){  if (stream == null) {    throw new IllegalArgumentException("ICCProfile stream can not be null");  }  return new ICCProfileFeaturesData(metadata,stream,n,range);}  }
class C{  public void restore(){  for (  Map.Entry<Location,SectionBlock> block : blocks.entrySet()) {    SectionBlock sectionBlock=block.getValue();    block.getKey().getBlock().setTypeIdAndData(sectionBlock.material.getId(),sectionBlock.data,true);  }  blocks.clear();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean check(){  if (child == 0) {    return true;  }  if (secret == null) {    return false;  }  return Arrays.equals(secretHash,Tools.hashSecret(secret));}  }
class C{  public static Point newPoint(Attributes attrs){  String xstr=attrs.getValue(COORD_X_ATTR);  String ystr=attrs.getValue(COORD_Y_ATTR);  if (xstr != null && ystr != null) {    double x=Double.parseDouble(xstr);    double y=Double.parseDouble(ystr);    return geometryFactory.createPoint(new Coordinate(x,y));  } else {    return null;  }}  }
class C{  public String[] toASS(){  return new FormatASS().toFile(this);}  }
class C{  @Nullable private GridTuple3<GridRestCommand,Boolean,Boolean> command(int opCode){  GridRestCommand cmd;  boolean quiet=false;  boolean retKey=false;switch (opCode) {case 0x00:    cmd=CACHE_GET;  break;case 0x01:cmd=CACHE_PUT;break;case 0x02:cmd=CACHE_ADD;break;case 0x03:cmd=CACHE_REPLACE;break;case 0x04:cmd=CACHE_REMOVE;break;case 0x05:cmd=ATOMIC_INCREMENT;break;case 0x06:cmd=ATOMIC_DECREMENT;break;case 0x07:cmd=QUIT;break;case 0x08:cmd=CACHE_REMOVE_ALL;break;case 0x09:cmd=CACHE_GET;break;case 0x0A:cmd=NOOP;break;case 0x0B:cmd=VERSION;break;case 0x0C:cmd=CACHE_GET;retKey=true;break;case 0x0D:cmd=CACHE_GET;retKey=true;break;case 0x0E:cmd=CACHE_APPEND;break;case 0x0F:cmd=CACHE_PREPEND;break;case 0x10:cmd=CACHE_METRICS;break;case 0x11:cmd=CACHE_PUT;quiet=true;break;case 0x12:cmd=CACHE_ADD;quiet=true;break;case 0x13:cmd=CACHE_REPLACE;quiet=true;break;case 0x14:cmd=CACHE_REMOVE;quiet=true;break;case 0x15:cmd=ATOMIC_INCREMENT;quiet=true;break;case 0x16:cmd=ATOMIC_DECREMENT;quiet=true;break;case 0x17:cmd=QUIT;quiet=true;break;case 0x18:cmd=CACHE_REMOVE_ALL;quiet=true;break;case 0x19:cmd=CACHE_APPEND;quiet=true;break;case 0x1A:cmd=CACHE_PREPEND;quiet=true;break;default :return null;}return new GridTuple3<>(cmd,quiet,retKey);}  }
class C{  public String save() throws SaaSApplicationException {  VOVatRate defaultVat=getDefaultVat();  try {    if (defaultVat == null) {      getVatService().saveAllVats(null,null,null);    } else {      defaultVat.setRate(getASBigDecimal(getVatStrings().get(defaultVat)));      for (Iterator<VOCountryVatRate> it=getCountryVats().iterator(); it.hasNext(); ) {        VOCountryVatRate vat=it.next();        if (vat.getCountry() == null) {          it.remove();        } else {          vat.setRate(getASBigDecimal(getVatStrings().get(vat)));        }      }      for (Iterator<VOOrganizationVatRate> it=getCustomerVats().iterator(); it.hasNext(); ) {        VOOrganizationVatRate vat=it.next();        if (vat.getOrganization().getOrganizationId() == null) {          it.remove();        } else {          vat.setRate(getASBigDecimal(getVatStrings().get(vat)));        }      }      getVatService().saveAllVats(defaultVat,countryVats,customerVats);    }    addMessage(null,FacesMessage.SEVERITY_INFO,INFO_VAT_SAVED);  } catch (  ConverterException e) {    FacesContext.getCurrentInstance().addMessage(null,e.getFacesMessage());  } finally {    reset();  }  return OUTCOME_SUCCESS;}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  private void sendPushMessageToToken(@NonNull String recipientWhitelistToken,@NonNull String recipientProviderUrl,@NonNull PushSecureClient.RequestCallback<org.chatsecure.pushsecure.response.Message> callback){  client.sendMessage(recipientWhitelistToken,"",recipientProviderUrl,callback);}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public static String format(AST ast){  PrettyPrinter printer=new PrettyPrinter();  ast.accept(printer);  return printer.read();}  }
class C{  public Color blend(Color color){  float aA=alphaf();  float aB=color.alphaf();  float r=(redf() * aA) + (color.redf() * aB * (1 - aA));  float g=(greenf() * aA) + (color.greenf() * aB * (1 - aA));  float b=(bluef() * aA) + (color.bluef() * aB * (1 - aA));  float a=aA + (aB * (1 - aA));  return rgbafc(r,g,b,a);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static byte[] encodeBase64(byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  public NameContext<NAME,BINDING> makeChildContext(){  return new NameContext<NAME,BINDING>(this,this.nameGenerator);}  }
class C{  public static final double[] timesPlusTimes(final double[] v1,final double s1,final double[] v2,final double s2){  assert (v1.length == v2.length) : ERR_VEC_DIMENSIONS;  final double[] result=new double[v1.length];  for (int i=0; i < result.length; i++) {    result[i]=v1[i] * s1 + v2[i] * s2;  }  return result;}  }
class C{  public long skipUntil(char c) throws IllegalArgumentException, IOException {  if (lookaheadChar == UNDEFINED) {    lookaheadChar=super.read();  }  long counter=0;  while (lookaheadChar != c && lookaheadChar != END_OF_STREAM) {    if (lookaheadChar == '\n') {      lineCounter++;    }    lookaheadChar=super.read();    counter++;  }  return counter;}  }
class C{  protected UnManagedFileSystem checkUnManagedFileSystemExistsInDB(String nativeGuid){  UnManagedFileSystem filesystemInfo=null;  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemInfoNativeGUIdConstraint(nativeGuid),result);  List<URI> filesystemUris=new ArrayList<URI>();  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI unFileSystemtURI=iter.next();    filesystemUris.add(unFileSystemtURI);  }  if (!filesystemUris.isEmpty()) {    filesystemInfo=_dbClient.queryObject(UnManagedFileSystem.class,filesystemUris.get(0));  }  return filesystemInfo;}  }
class C{  public static void register(){  CommandCenter.register(AWAY,new AwayAction());}  }
class C{  private static <A,B,T extends Transform<A,B>>Stream<T> create(TransformFactory factory,BridgeTransform<A,B> bridge){  requireNonNull(factory);  requireNonNull(bridge);  if (bridge.end.equals(bridge.to)) {    @SuppressWarnings("unchecked") final T result=(T)bridge;    return Stream.of(result);  } else {    final List<Stream<T>> bridges=new ArrayList<>();    factory.allFrom(bridge.end).stream().forEachOrdered(null);    return bridges.stream().flatMap(null);  }}  }
class C{  public void add(float[] vals){  add(vals,0,vals.length);}  }
class C{  public static Result failure(String messageKey,Object... args){  return new Result(Type.FAILURE,Collections.singleton(new DiagMessage(messageKey,args)));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.140 -0500",hash_original_method="C562ECE8E2158A54C27A4525D88FEA63",hash_generated_method="63B9FB84CB44C042143E43DCB8FC5923") public AllowHeader createAllowHeader(String method) throws ParseException {  if (method == null)   throw new NullPointerException("null arg method");  Allow allow=new Allow();  allow.setMethod(method);  return allow;}  }
class C{  public BeiderMorseFilterFactory(Map<String,String> args){  super(args);  NameType nameType=NameType.valueOf(get(args,"nameType",NameType.GENERIC.toString()));  RuleType ruleType=RuleType.valueOf(get(args,"ruleType",RuleType.APPROX.toString()));  boolean concat=getBoolean(args,"concat",true);  engine=new PhoneticEngine(nameType,ruleType,concat);  Set<String> langs=getSet(args,"languageSet");  languageSet=(null == langs || (1 == langs.size() && langs.contains("auto"))) ? null : LanguageSet.from(langs);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public ArrayStoreException(String s){  super(s);}  }
class C{  public String encodeBody(){  String retval=Integer.toString(expires);  if (!parameters.isEmpty()) {    retval+=SEMICOLON + parameters.encode();  }  return retval;}  }
class C{  @Override public boolean isAcceptable(JsonPath jsonPath,String requestType){  return jsonPath.isCollection() && jsonPath instanceof ResourcePath && HttpMethod.GET.name().equals(requestType);}  }
