class C{  public boolean onCreate(){  mOpenHelper=new HobbitDatabaseHelper(mContext);  return true;}  }
class C{  private long addLocation(String locationSetting,String cityName,double lat,double lon){  long locationId;  City_Name=cityName;  Cursor locationCursor=getContext().getContentResolver().query(WeatherContract.LocationEntry.CONTENT_URI,new String[]{LocationEntry._ID},LocationEntry.COLUMN_LOCATION_SETTING + " = ?",new String[]{locationSetting},null);  if (locationCursor.moveToFirst()) {    int locationIdIndex=locationCursor.getColumnIndex(LocationEntry._ID);    locationId=locationCursor.getLong(locationIdIndex);  } else {    ContentValues locationValues=new ContentValues();    locationValues.put(LocationEntry.COLUMN_CITY_NAME,cityName);    locationValues.put(LocationEntry.COLUMN_LOCATION_SETTING,locationSetting);    locationValues.put(LocationEntry.COLUMN_COORD_LAT,lat);    locationValues.put(LocationEntry.COLUMN_COORD_LONG,lon);    Uri insertedUri=getContext().getContentResolver().insert(WeatherContract.LocationEntry.CONTENT_URI,locationValues);    locationId=ContentUris.parseId(insertedUri);  }  return locationId;}  }
class C{  public Rational(Rational r){  mNumerator=r.mNumerator;  mDenominator=r.mDenominator;}  }
class C{  public Coordinate intersection(Segment s){  return ls.intersection(s.getLineSegment());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double numDownslopeNeighbours;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  String pntrType=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  pntrType=args[2].toLowerCase();  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,noData);    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setPreferredPalette("spectrum_black_background.pal");    if ((pntrType.equals("d8") || (pntrType.equals("rho8")))) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (pntr.getValue(row,col) != noData) {            z=0;            for (i=0; i < 8; i++) {              if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {                z++;              }            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else     if (pntrType.equals("dinf")) {      double flowDir;      double[] startFD=new double[]{180,225,270,315,0,45,90,135};      double[] endFD=new double[]{270,315,360,45,90,135,180,225};      int c;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (flowDir != noData) {            c=0;            for (i=0; i < 8; i++) {              flowDir=pntr.getValue(row + dY[i],col + dX[i]);              if (flowDir != noData) {                if (i != 3) {                  if (flowDir > startFD[i] && flowDir < endFD[i]) {                    c++;                  }                } else {                  if (flowDir > startFD[i] || flowDir < endFD[i]) {                    c++;                  }                }              }            }            output.setValue(row,col,c);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static ITypedElement createCompareElementForResource(final IResource resource){  return createCompareElementForResource(resource,null);}  }
class C{  public SmbFile(String url) throws MalformedURLException {  this(new URL(null,url,Handler.SMB_HANDLER));}  }
class C{  @RequestMapping(value="/annuals/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public void delete(@PathVariable Long id){  log.debug("REST request to delete Annual : {}",id);  annualRepository.delete(id);}  }
class C{  public static synchronized void manageParallelLines(final JFreeChartPlotEngine engine){  if (dialog == null) {    dialog=new ManageParallelLinesDialog();  }  dialog.setChartEngine(engine);  dialog.showDialog();}  }
class C{  public void startElement(String name,UIComponent componentForElement) throws IOException {  if (name == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"name"));  }  closeStartIfNecessary();  char firstChar=name.charAt(0);  if ((firstChar == 's') || (firstChar == 'S')) {    if ("script".equalsIgnoreCase(name) || "style".equalsIgnoreCase(name)) {      dontEscape=true;    }  }  writer.write("<");  writer.write(name);  closeStart=true;}  }
class C{  public Item(String entityID){  this.entityID=entityID;}  }
class C{  public boolean runningVM(){  return true;}  }
class C{  public static void addExperimentalFormatWarning(SolrQueryResponse rsp){  rsp.add("WARNING","This response format is experimental.  It is likely to change in the future.");}  }
class C{  public void execute(){  IKnowledge knowledge=(IKnowledge)getParams().get("knowledge",new Knowledge2());  Graph graph;  if (getParams().getBoolean("rfciUsed",false)) {    Rfci fci=new Rfci(getIndependenceTest());    fci.setKnowledge(knowledge);    fci.setCompleteRuleSetUsed(getParams().getBoolean("completeRuleSetUsed",false));    fci.setMaxPathLength(getParams().getInt("maxReachablePathLength",-1));    fci.setDepth(getParams().getInt("depth",-1));    graph=fci.search();  } else {    Fci fci=new Fci(getIndependenceTest());    fci.setKnowledge(knowledge);    fci.setCompleteRuleSetUsed(getParams().getBoolean("completeRuleSetUsed",false));    fci.setPossibleDsepSearchDone(getParams().getBoolean("possibleDsepDone",true));    fci.setMaxPathLength(getParams().getInt("maxReachablePathLength",-1));    fci.setDepth(getParams().getInt("depth",-1));    graph=fci.search();  }  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (knowledge.isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,knowledge);  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);}  }
class C{  public void handleEvent(Event evt){  MouseEvent me=(MouseEvent)evt;  Element newTarget=(Element)me.getRelatedTarget();  Cursor cursor=CursorManager.DEFAULT_CURSOR;  if (newTarget != null)   cursor=CSSUtilities.convertCursor(newTarget,BridgeContext.this);  if (cursor == null)   cursor=CursorManager.DEFAULT_CURSOR;  userAgent.setSVGCursor(cursor);}  }
class C{  public SetResponse findRecords(Name name,int type){  return lookup(name,type);}  }
class C{  public EventStoreBuilder requireMasterDisabled(){  settingsBuilder.requireMaster(false);  return this;}  }
class C{  private PooledByteBuffer readFromDiskCache(final CacheKey key) throws IOException {  try {    FLog.v(TAG,"Disk cache read for %s",key.toString());    final BinaryResource diskCacheResource=mFileCache.getResource(key);    if (diskCacheResource == null) {      FLog.v(TAG,"Disk cache miss for %s",key.toString());      mImageCacheStatsTracker.onDiskCacheMiss();      return null;    } else {      FLog.v(TAG,"Found entry in disk cache for %s",key.toString());      mImageCacheStatsTracker.onDiskCacheHit();    }    PooledByteBuffer byteBuffer;    final InputStream is=diskCacheResource.openStream();    try {      byteBuffer=mPooledByteBufferFactory.newByteBuffer(is,(int)diskCacheResource.size());    }  finally {      is.close();    }    FLog.v(TAG,"Successful read from disk cache for %s",key.toString());    return byteBuffer;  } catch (  IOException ioe) {    FLog.w(TAG,ioe,"Exception reading from cache for %s",key.toString());    mImageCacheStatsTracker.onDiskCacheGetFail();    throw ioe;  }}  }
class C{  public static float calculateAspectRatio(Rect rect){  final float aspectRatio=(float)rect.width() / (float)rect.height();  return aspectRatio;}  }
class C{  protected String assertPropertyDefault(String key,String value){  if (properties.getString(key) == null) {    logger.info("Assigning default global property value: key=" + key + " default value="+ value);    properties.setString(key,value);  }  return properties.getString(key);}  }
class C{  public UpdateDispatchFutureSpin(TimeSourceService timeSourceService){  isCompleted=true;  this.timeSourceService=timeSourceService;}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(CONFIGURATION.getColorModel())) {    return image;  }  BufferedImage compatibleImage=CONFIGURATION.createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public void testResourceELEval() throws Exception {  ResourceHandler handler=getFacesContext().getApplication().getResourceHandler();  assertNotNull(handler);  Resource resource=handler.createResource("simple-with-el.css");  assertNotNull(resource);  byte[] bytes=getBytes(resource.getInputStream());  ByteArrayInputStream bai=new ByteArrayInputStream(bytes);  BufferedReader reader=new BufferedReader(new InputStreamReader(bai));  List<String> lines=new ArrayList<String>();  for (String l=reader.readLine(); l != null; l=reader.readLine()) {    String t=l.trim();    if (t.length() > 0) {      lines.add(t);    }  }  assertEquals(4,lines.size());  final String[] expectedLines={"# /test-servlet30_isolated-cactus","# /test-servlet30_isolated-cactus","h2 { color: red }","# /test-servlet30_isolated-cactus}"};  for (int i=0, len=expectedLines.length; i < len; i++) {    assertEquals(expectedLines[i],expectedLines[i],lines.get(i));  }}  }
class C{  public static void clickMenuItem(Activity activity,String name,int resourceId){  try {    onView(withId(resourceId)).perform(click());  } catch (  NoMatchingViewException e) {    openActionBarOverflowOrOptionsMenu(activity);    onData(allOf(Matchers.withMenuTitle(name))).perform(click());  }}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public void invalidateVisualState(){  this.anchor.invalidateVisualState();  boolean validConnection=this.anchor.hasValidConnection();  this.setTranslateY(validConnection ? 0 : -9);  this.inputType.setText(validConnection ? "zyxwv" : this.anchor.getStringType());  this.typePane.setVisible(!validConnection);}  }
class C{  public Point translateJava2DToScreen(Point2D java2DPoint){  Insets insets=getInsets();  int x=(int)(java2DPoint.getX() * this.scaleX + insets.left);  int y=(int)(java2DPoint.getY() * this.scaleY + insets.top);  return new Point(x,y);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (nonCapturing: ");  result.append(nonCapturing);  result.append(')');  return result.toString();}  }
class C{  void stop(){  t.stop();  logger.debug("stop scrolling");}  }
class C{  @Override public void addResourceHandlers(ResourceHandlerRegistry registry){  registry.addResourceHandler("/api/**").addResourceLocations("/api/");  registry.addResourceHandler("/css/**").addResourceLocations("/css/");  registry.addResourceHandler("/download/**").addResourceLocations("/download/");  registry.addResourceHandler("/images/**").addResourceLocations("/images/");  registry.addResourceHandler("/js/**").addResourceLocations("/js/");}  }
class C{  public boolean isSetHost(){  return this.host != null;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.easySlidingTabs=(EasySlidingTabs)this.findViewById(R.id.easy_sliding_tabs);  this.easyVP=(ViewPager)this.findViewById(R.id.easy_vp);}  }
class C{  @Before public void before(){  r=new Resource();  Eml eml=new Eml();  r.setEml(eml);  r.setTitle("Ants");  r.setShortname("ants");  eml.setTitle("Ants");  Calendar cal=Calendar.getInstance();  cal.set(2013,Calendar.JANUARY,9);  Date date=cal.getTime();  eml.setDateStamp(date);  Agent creator=new Agent();  creator.setFirstName("John");  creator.setLastName("Smith");  eml.addCreator(creator);  Organisation o=new Organisation();  o.setName("GBIF");  o.setKey(UUID.randomUUID().toString());  r.setOrganisation(o);  r.setEmlVersion(Constants.INITIAL_RESOURCE_VERSION);  r.setStatus(PublicationStatus.PUBLIC);  assertNull(r.getLastPublished());}  }
class C{  public TaskResourceRep removeInitiator(URI initiatorId,URI eventId){  Initiator initiator=_dbClient.queryObject(Initiator.class,initiatorId);  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Initiator.class,initiator.getId(),taskId,ResourceOperationTypeEnum.DELETE_INITIATOR);  if (ComputeSystemHelper.isInitiatorInUse(_dbClient,initiatorId.toString())) {    computeController.removeInitiatorFromExport(eventId,initiator.getHost(),initiator.getId(),taskId);  } else {    _dbClient.ready(Initiator.class,initiator.getId(),taskId);    _dbClient.markForDeletion(initiator);  }  return toTask(initiator,taskId,op);}  }
class C{  private static void translateCanvasToView(View from,View to,Canvas canvas) throws IllegalArgumentException {  assert from != null;  assert to != null;  while (to != from) {    canvas.translate(to.getLeft(),to.getTop());    if (!(to.getParent() instanceof View)) {      throw new IllegalArgumentException("View 'to' was not a desendent of 'from'.");    }    to=(View)to.getParent();  }}  }
class C{  public void finish() throws IOException {  this.encodePendingBytes(true);}  }
class C{  @Override public void increment(double coord,short val){  int bin=getBinNr(coord);  if (bin < 0) {    if (size - bin > data.length) {      short[] tmpdata=new short[growSize(data.length,size - bin)];      System.arraycopy(data,0,tmpdata,-bin,size);      data=tmpdata;    } else {      System.arraycopy(data,0,data,-bin,size);      Arrays.fill(data,0,-bin,(short)0);    }    data[0]=val;    assert (data.length >= size - bin);    offset-=bin;    size-=bin;  } else   if (bin >= data.length) {    short[] tmpdata=new short[growSize(data.length,bin + 1)];    System.arraycopy(data,0,tmpdata,0,size);    tmpdata[bin]=val;    data=tmpdata;    size=bin + 1;    max=Double.MAX_VALUE;  } else {    if (bin >= size) {      size=bin + 1;    }    data[bin]+=val;  }}  }
class C{  @NonNull public static Animator rotateTo(float rotation,float duration){  return rotateTo(rotation,duration,null);}  }
class C{  private void adjustForVSB(boolean wantsVSB,Rectangle available,Rectangle vsbR,Insets vpbInsets,boolean leftToRight){  int oldWidth=vsbR.width;  if (wantsVSB) {    int vsbWidth=Math.max(0,Math.min(vsb.getPreferredSize().width,available.width));    available.width-=vsbWidth;    vsbR.width=vsbWidth;    if (leftToRight) {      vsbR.x=available.x + available.width + vpbInsets.right;    } else {      vsbR.x=available.x - vpbInsets.left;      available.x+=vsbWidth;    }  } else {    available.width+=oldWidth;  }}  }
class C{  public void handle(Thread thread,Throwable exception,DesktopWindowManager windowManager){  for (  ExceptionHandler handler : handlers) {    if (handler.handle(thread,exception))     return;  }  for (  GenericExceptionHandler handler : genericHandlers) {    if (handler.handle(exception,windowManager))     return;  }  defaultHandler.handle(thread,exception);}  }
class C{  protected StopwordAnalyzerBase(){  this(null);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (name.equals("AD_Org_ID"))     p_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_BankAccount_ID"))     p_C_BankAccount_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DeleteOldImported"))     p_deleteOldImported="Y".equals(para[i].getParameter()); else     if (name.equals("DocAction"))     m_docAction=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  m_ctx=Env.getCtx();}  }
class C{  void saveToStream(DataOutputStream out) throws IOException {  out.writeUTF(mUrl);  out.writeUTF(mName);  out.writeUTF(mValue);  out.writeUTF(mDomain);  out.writeUTF(mPath);  out.writeLong(mCreation);  out.writeLong(mExpiration);  out.writeLong(mLastAccess);  out.writeBoolean(mSecure);  out.writeBoolean(mHttpOnly);  out.writeBoolean(mFirstPartyOnly);  out.writeInt(mPriority);}  }
class C{  public void testPeek(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.peek());    assertEquals(i,q.pollFirst());    assertTrue(q.peek() == null || !q.peek().equals(i));  }  assertNull(q.peek());}  }
class C{  @DELETE @Consumes(MediaType.APPLICATION_JSON) public Response unregisterApplication(@Context final HttpServletRequest httpServletRequest,@QueryParam("bindingId") String bindingId,@QueryParam("serviceId") String serviceId,@QueryParam("appId") String appId){  try {    logger.info("Remove application. BindingId: " + bindingId + " , appId: "+ appId+ ", serviceId: "+ serviceId);    ApplicationManager appManager=ApplicationManagerImpl.getInstance();    appManager.removeApplicationByBindingId(bindingId);    logger.info("Unbinding app " + appId + " from "+ serviceId+ " for metrics collector");    MonitorController.getInstance().unbindService(serviceId,appId);    MonitorController.getInstance().removePoller(appId);    return RestApiResponseHandler.getResponse(Status.NO_CONTENT);  } catch (  PolicyNotFoundException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_policy_not_found_error,e,httpServletRequest.getLocale());  }catch (  DataStoreException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_database_error,e,httpServletRequest.getLocale());  }catch (  MonitorServiceException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_cloud_error,e,httpServletRequest.getLocale());  }catch (  NoAttachedPolicyException e) {    return RestApiResponseHandler.getResponseError(MESSAGE_KEY.RestResponseErrorMsg_no_attached_policy_error,e,httpServletRequest.getLocale());  }catch (  Exception e) {    return RestApiResponseHandler.getResponseError(Response.Status.INTERNAL_SERVER_ERROR,e);  }}  }
class C{  public static int decodeDimension(byte value[],int offset){  return NumericUtils.sortableBytesToInt(value,offset);}  }
class C{  @SuppressWarnings("unchecked") public boolean add(Object o){  if (o == null)   o=nullObject;  int hash=o.hashCode();  int index=(hash & 0x7FFFFFFF) % objects.length;  int offset=1;  int deletedix=-1;  while (objects[index] != null && !(objects[index].hashCode() == hash && objects[index].equals(o))) {    if (objects[index] == deletedObject)     deletedix=index;    index=((index + offset) & 0x7FFFFFFF) % objects.length;    offset=offset * 2 + 1;    if (offset == -1)     offset=2;  }  if (objects[index] == null) {    if (deletedix != -1)     index=deletedix; else     freecells--;    modCount++;    elements++;    objects[index]=(E)o;    if (1 - (freecells / (double)objects.length) > LOAD_FACTOR)     rehash();    return true;  } else   return false;}  }
class C{  public void add(Axis axis,RectangleEdge edge){  ParamChecks.nullNotPermitted(axis,"axis");  ParamChecks.nullNotPermitted(edge,"edge");  if (edge == RectangleEdge.TOP) {    this.axesAtTop.add(axis);  } else   if (edge == RectangleEdge.BOTTOM) {    this.axesAtBottom.add(axis);  } else   if (edge == RectangleEdge.LEFT) {    this.axesAtLeft.add(axis);  } else   if (edge == RectangleEdge.RIGHT) {    this.axesAtRight.add(axis);  }}  }
class C{  @Deprecated public ScriptService.ScriptType templateType(){  return template == null ? null : template.getType();}  }
class C{  static public boolean validFunction(String function){  try {    String[] values=getValues(function);    if (values[0].equalsIgnoreCase(ValidationUtil.functionIdentifier)) {      if (values[1].equalsIgnoreCase("date"))       return DateFunctions.isValid(values); else       if (values[1].equalsIgnoreCase("monetary"))       return MonetaryFunctions.isValid(values); else       if (values[1].equalsIgnoreCase("numeric"))       return NumericFunctions.isValid(values); else       if (values[1].equalsIgnoreCase("generic"))       return GenericFunctions.isValid(values); else       if (values[1].equalsIgnoreCase("string"))       return StringFunctions.isValid(values); else       if (values[1].equalsIgnoreCase("datatype"))       return DataTypeFunctions.isValid(values); else       if (values[1].equalsIgnoreCase("tax"))       return TaxFunctions.isValid(values); else       return false;    } else     return false;  } catch (  Exception ex) {    logger.error(LogUtil.getLogMessage(ex.toString()),ex);    return false;  }}  }
class C{  public java.sql.Statement createStatement() throws SQLException {  return createStatement(DEFAULT_RESULT_SET_TYPE,DEFAULT_RESULT_SET_CONCURRENCY);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public InvalidCommandLengthException(Throwable cause){  super(cause);}  }
class C{  public boolean isMainModule(){  return mainModule;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public static void tagSelectedNodes(final JFrame parent,final JTree tagsTree,final ZyGraph graph){  try {    tagSelectedNodes(parent,graph,getSelectedTag(tagsTree));  } catch (  final MaybeNullException exception) {  }}  }
class C{  boolean isPrivateInOtherClass(){  return (tree.sym.flags() & PRIVATE) != 0 && !types.isSameType(types.erasure(tree.sym.enclClass().asType()),types.erasure(owner.enclClass().asType()));}  }
class C{  protected boolean mustIncludeLayer(Layer layer){  return this.isIncludeHiddenLayers() || layer.getValue(AVKey.HIDDEN) != Boolean.TRUE;}  }
class C{  protected JPopupMenu createPopupMenu(boolean properties,boolean copy,boolean save,boolean print,boolean zoom){  JPopupMenu result=new JPopupMenu(localizationResources.getString("Chart") + ":");  boolean separator=false;  if (properties) {    JMenuItem propertiesItem=new JMenuItem(localizationResources.getString("Properties..."));    propertiesItem.setActionCommand(PROPERTIES_COMMAND);    propertiesItem.addActionListener(this);    result.add(propertiesItem);    separator=true;  }  if (copy) {    if (separator) {      result.addSeparator();    }    JMenuItem copyItem=new JMenuItem(localizationResources.getString("Copy"));    copyItem.setActionCommand(COPY_COMMAND);    copyItem.addActionListener(this);    result.add(copyItem);    separator=!save;  }  if (save) {    if (separator) {      result.addSeparator();    }    JMenu saveSubMenu=new JMenu(localizationResources.getString("Save_as"));    JMenuItem pngItem=new JMenuItem(localizationResources.getString("PNG..."));    pngItem.setActionCommand("SAVE_AS_PNG");    pngItem.addActionListener(this);    saveSubMenu.add(pngItem);    if (createSVGGraphics2D(10,10) != null) {      JMenuItem svgItem=new JMenuItem(localizationResources.getString("SVG..."));      svgItem.setActionCommand("SAVE_AS_SVG");      svgItem.addActionListener(this);      saveSubMenu.add(svgItem);    }    if (isOrsonPDFAvailable()) {      JMenuItem pdfItem=new JMenuItem(localizationResources.getString("PDF..."));      pdfItem.setActionCommand("SAVE_AS_PDF");      pdfItem.addActionListener(this);      saveSubMenu.add(pdfItem);    }    result.add(saveSubMenu);    separator=true;  }  if (print) {    if (separator) {      result.addSeparator();    }    JMenuItem printItem=new JMenuItem(localizationResources.getString("Print..."));    printItem.setActionCommand(PRINT_COMMAND);    printItem.addActionListener(this);    result.add(printItem);    separator=true;  }  if (zoom) {    if (separator) {      result.addSeparator();    }    JMenu zoomInMenu=new JMenu(localizationResources.getString("Zoom_In"));    this.zoomInBothMenuItem=new JMenuItem(localizationResources.getString("All_Axes"));    this.zoomInBothMenuItem.setActionCommand(ZOOM_IN_BOTH_COMMAND);    this.zoomInBothMenuItem.addActionListener(this);    zoomInMenu.add(this.zoomInBothMenuItem);    zoomInMenu.addSeparator();    this.zoomInDomainMenuItem=new JMenuItem(localizationResources.getString("Domain_Axis"));    this.zoomInDomainMenuItem.setActionCommand(ZOOM_IN_DOMAIN_COMMAND);    this.zoomInDomainMenuItem.addActionListener(this);    zoomInMenu.add(this.zoomInDomainMenuItem);    this.zoomInRangeMenuItem=new JMenuItem(localizationResources.getString("Range_Axis"));    this.zoomInRangeMenuItem.setActionCommand(ZOOM_IN_RANGE_COMMAND);    this.zoomInRangeMenuItem.addActionListener(this);    zoomInMenu.add(this.zoomInRangeMenuItem);    result.add(zoomInMenu);    JMenu zoomOutMenu=new JMenu(localizationResources.getString("Zoom_Out"));    this.zoomOutBothMenuItem=new JMenuItem(localizationResources.getString("All_Axes"));    this.zoomOutBothMenuItem.setActionCommand(ZOOM_OUT_BOTH_COMMAND);    this.zoomOutBothMenuItem.addActionListener(this);    zoomOutMenu.add(this.zoomOutBothMenuItem);    zoomOutMenu.addSeparator();    this.zoomOutDomainMenuItem=new JMenuItem(localizationResources.getString("Domain_Axis"));    this.zoomOutDomainMenuItem.setActionCommand(ZOOM_OUT_DOMAIN_COMMAND);    this.zoomOutDomainMenuItem.addActionListener(this);    zoomOutMenu.add(this.zoomOutDomainMenuItem);    this.zoomOutRangeMenuItem=new JMenuItem(localizationResources.getString("Range_Axis"));    this.zoomOutRangeMenuItem.setActionCommand(ZOOM_OUT_RANGE_COMMAND);    this.zoomOutRangeMenuItem.addActionListener(this);    zoomOutMenu.add(this.zoomOutRangeMenuItem);    result.add(zoomOutMenu);    JMenu autoRangeMenu=new JMenu(localizationResources.getString("Auto_Range"));    this.zoomResetBothMenuItem=new JMenuItem(localizationResources.getString("All_Axes"));    this.zoomResetBothMenuItem.setActionCommand(ZOOM_RESET_BOTH_COMMAND);    this.zoomResetBothMenuItem.addActionListener(this);    autoRangeMenu.add(this.zoomResetBothMenuItem);    autoRangeMenu.addSeparator();    this.zoomResetDomainMenuItem=new JMenuItem(localizationResources.getString("Domain_Axis"));    this.zoomResetDomainMenuItem.setActionCommand(ZOOM_RESET_DOMAIN_COMMAND);    this.zoomResetDomainMenuItem.addActionListener(this);    autoRangeMenu.add(this.zoomResetDomainMenuItem);    this.zoomResetRangeMenuItem=new JMenuItem(localizationResources.getString("Range_Axis"));    this.zoomResetRangeMenuItem.setActionCommand(ZOOM_RESET_RANGE_COMMAND);    this.zoomResetRangeMenuItem.addActionListener(this);    autoRangeMenu.add(this.zoomResetRangeMenuItem);    result.addSeparator();    result.add(autoRangeMenu);  }  return result;}  }
class C{  public static boolean isRoleStatus(int status){  if (status != NO_ROLE_WITH_NAME && status != ROLE_NOT_READABLE && status != ROLE_NOT_WRITABLE && status != LESS_THAN_MIN_ROLE_DEGREE && status != MORE_THAN_MAX_ROLE_DEGREE && status != REF_MBEAN_OF_INCORRECT_CLASS && status != REF_MBEAN_NOT_REGISTERED) {    return false;  }  return true;}  }
class C{  public static Codecs findCodecsFormMimeType(String mimeType,boolean tryColorFormatSurface){  findSupportedColorFormats(mimeType);  SparseArray<ArrayList<String>> hardwareCodecs=sHardwareCodecs.get(mimeType);  SparseArray<ArrayList<String>> softwareCodecs=sSoftwareCodecs.get(mimeType);  Codecs list=new Codecs();  if (Build.VERSION.SDK_INT >= 18 && tryColorFormatSurface) {    int colorFormatSurface=MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface;    try {      list.hardwareCodec=hardwareCodecs.get(colorFormatSurface).get(0);      list.hardwareColorFormat=colorFormatSurface;    } catch (    Exception e) {    }    try {      list.softwareCodec=softwareCodecs.get(colorFormatSurface).get(0);      list.softwareColorFormat=colorFormatSurface;    } catch (    Exception e) {    }    if (list.hardwareCodec != null) {      Log.v(TAG,"Choosen primary codec: " + list.hardwareCodec + " with color format: "+ list.hardwareColorFormat);    } else {      Log.e(TAG,"No supported hardware codec found !");    }    if (list.softwareCodec != null) {      Log.v(TAG,"Choosen secondary codec: " + list.hardwareCodec + " with color format: "+ list.hardwareColorFormat);    } else {      Log.e(TAG,"No supported software codec found !");    }    return list;  }  for (int i=0; i < SUPPORTED_COLOR_FORMATS.length; i++) {    try {      list.hardwareCodec=hardwareCodecs.get(SUPPORTED_COLOR_FORMATS[i]).get(0);      list.hardwareColorFormat=SUPPORTED_COLOR_FORMATS[i];      break;    } catch (    Exception e) {    }  }  for (int i=0; i < SUPPORTED_COLOR_FORMATS.length; i++) {    try {      list.softwareCodec=softwareCodecs.get(SUPPORTED_COLOR_FORMATS[i]).get(0);      list.softwareColorFormat=SUPPORTED_COLOR_FORMATS[i];      break;    } catch (    Exception e) {    }  }  if (list.hardwareCodec != null) {    Log.v(TAG,"Choosen primary codec: " + list.hardwareCodec + " with color format: "+ list.hardwareColorFormat);  } else {    Log.e(TAG,"No supported hardware codec found !");  }  if (list.softwareCodec != null) {    Log.v(TAG,"Choosen secondary codec: " + list.hardwareCodec + " with color format: "+ list.softwareColorFormat);  } else {    Log.e(TAG,"No supported software codec found !");  }  return list;}  }
class C{  public boolean isValidOn(Date date){  AttCertValidityPeriod certValidityPeriod=attrCert.getAcinfo().getAttrCertValidityPeriod();  return !date.before(CertUtils.recoverDate(certValidityPeriod.getNotBeforeTime())) && !date.after(CertUtils.recoverDate(certValidityPeriod.getNotAfterTime()));}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String encryptionOID,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {  doAddSigner(key,subjectKeyID,encryptionOID,digestOID,signedAttrGen,unsignedAttrGen,null);}  }
class C{  protected void doRunning(IJobChangeEvent event){}  }
class C{  private boolean checkEmpty(Flow.Subscriber<? super T> s,int c){  boolean stat=true;  if (head == tail) {    if ((c & CONSUME) != 0)     U.compareAndSwapInt(this,CTL,c,c & ~CONSUME); else     if ((c & COMPLETE) != 0) {      if (U.compareAndSwapInt(this,CTL,c,DISABLED)) {        try {          if (s != null)           s.onComplete();        } catch (        Throwable ignore) {        }      }    } else     if (U.compareAndSwapInt(this,CTL,c,c & ~ACTIVE))     stat=false;  }  return stat;}  }
class C{  public boolean release(DTM dtm,boolean shouldHardDelete){  if (m_rtfdtm_stack != null && m_rtfdtm_stack.contains(dtm)) {    return false;  }  return m_dtmManager.release(dtm,shouldHardDelete);}  }
class C{  public void start(){  if (isStandby) {    _log.info("Start monitoring local coordinatorsvc status on standby site");    this.drZkHealthMonitor.start();  } else {    _log.info("Start monitoring db quorum on all standby sites");    this.drDbHealthMonitor.start();  }  this.drSiteNetworkMonitor.start();}  }
class C{  public static void main(String[] args){  TrialSuite tsM=new TrialSuite();  TrialSuite tsN=new TrialSuite();  System.gc();  long min=8000000;  long max=16000000;  long delta=2000000;  for (long len=min; len <= max; len+=delta) {    for (int i=0; i < 30; i++) {      long nowM=System.currentTimeMillis();      long nowN=System.nanoTime();      @SuppressWarnings("unused") long sum=0;      for (int x=1; x <= len; x++) {        sum+=x;      }      long endM=System.currentTimeMillis();      long endN=System.nanoTime();      tsM.addTrial(len,nowM,endM);      tsN.addTrial(len,nowN,endN);    }  }  System.out.println("MILLISECONDS");  System.out.println(tsM.computeTable());  System.out.println("NANOSECONDS");  System.out.println(tsN.computeTable());  System.out.println("MILLISECOND HISTOGRAM");  System.out.println(tsM.histogram());  System.out.println("NANOSECOND HISTOGRAM");  System.out.println(tsN.histogram());}  }
class C{  public static String formatRuleBasedAmount(double amount,String rule,Locale locale){  String ruleSet=rbnfRuleSets.get(locale);  if (ruleSet == null) {    Debug.logWarning("Cannot format rule based amount for locale " + locale.toString() + " because rule set for that locale does not exist",module);    return "";  }  RuleBasedNumberFormat formatter=new RuleBasedNumberFormat(ruleSet,locale);  String result="";  try {    result=formatter.format(amount,rule);  } catch (  Exception e) {    Debug.logError(e,"Failed to format amount " + amount + " using rule "+ rule,module);  }  return result;}  }
class C{  public static TMCoord fromLatLon(Angle latitude,Angle longitude,Double a,Double f,Angle originLatitude,Angle centralMeridian,double falseEasting,double falseNorthing,double scale){  if (latitude == null || longitude == null) {    throw new IllegalArgumentException("Latitude Or Longitude Is Null");  }  if (originLatitude == null || centralMeridian == null) {    throw new IllegalArgumentException("Angle Is Null");  }  final TMCoordConverter converter=new TMCoordConverter();  if (a == null || f == null) {    a=converter.getA();    f=converter.getF();  }  long err=converter.setTransverseMercatorParameters(a,f,originLatitude.radians,centralMeridian.radians,falseEasting,falseNorthing,scale);  if (err == TMCoordConverter.TRANMERC_NO_ERROR)   err=converter.convertGeodeticToTransverseMercator(latitude.radians,longitude.radians);  if (err != TMCoordConverter.TRANMERC_NO_ERROR && err != TMCoordConverter.TRANMERC_LON_WARNING) {    throw new IllegalArgumentException("TM Conversion Error");  }  return new TMCoord(latitude,longitude,converter.getEasting(),converter.getNorthing(),originLatitude,centralMeridian,falseEasting,falseNorthing,scale);}  }
class C{  public OpenForReadResult openForRead(Uri uri,boolean skipThreadCheck) throws IOException {  if (!skipThreadCheck) {    assertBackgroundThread();  }switch (getUriType(uri)) {case URI_TYPE_FILE:{      FileInputStream inputStream=new FileInputStream(uri.getPath());      String mimeType=getMimeTypeFromPath(uri.getPath());      long length=inputStream.getChannel().size();      return new OpenForReadResult(uri,inputStream,mimeType,length,null);    }case URI_TYPE_ASSET:{    String assetPath=uri.getPath().substring(15);    AssetFileDescriptor assetFd=null;    InputStream inputStream;    long length=-1;    try {      assetFd=assetManager.openFd(assetPath);      inputStream=assetFd.createInputStream();      length=assetFd.getLength();    } catch (    FileNotFoundException e) {      inputStream=assetManager.open(assetPath);    }    String mimeType=getMimeTypeFromPath(assetPath);    return new OpenForReadResult(uri,inputStream,mimeType,length,assetFd);  }case URI_TYPE_CONTENT:case URI_TYPE_RESOURCE:{  String mimeType=contentResolver.getType(uri);  AssetFileDescriptor assetFd=contentResolver.openAssetFileDescriptor(uri,"r");  InputStream inputStream=assetFd.createInputStream();  long length=assetFd.getLength();  return new OpenForReadResult(uri,inputStream,mimeType,length,assetFd);}case URI_TYPE_DATA:{OpenForReadResult ret=readDataUri(uri);if (ret == null) {  break;}return ret;}case URI_TYPE_HTTP:case URI_TYPE_HTTPS:{HttpURLConnection conn=(HttpURLConnection)new URL(uri.toString()).openConnection();conn.setDoInput(true);String mimeType=conn.getHeaderField("Content-Type");int length=conn.getContentLength();InputStream inputStream=conn.getInputStream();return new OpenForReadResult(uri,inputStream,mimeType,length,null);}case URI_TYPE_PLUGIN:{String pluginId=uri.getHost();CordovaPlugin plugin=pluginManager.getPlugin(pluginId);if (plugin == null) {throw new FileNotFoundException("Invalid plugin ID in URI: " + uri);}return plugin.handleOpenForRead(uri);}}throw new FileNotFoundException("URI not supported by CordovaResourceApi: " + uri);}  }
class C{  public static Long truncateOpCRC32(String stream,DLSN dlsn){  CRC32 crc=requestCRC.get();  try {    crc.update(stream.getBytes());    crc.update(dlsn.serializeBytes());    long result=crc.getValue();    return crc.getValue();  }  finally {    crc.reset();  }}  }
class C{  private void paintWithPen(int penObject,Shape shape,Graphics2D g2d){  if (penObject >= 0) {    Paint paint=getStoredPaint(currentStore,penObject);    if (!((firstEffectivePaint) && (paint.equals(Color.white)))) {      setPenColor(currentStore,g2d,penObject);      g2d.draw(shape);      firstEffectivePaint=false;    }  }}  }
class C{  public boolean isExpanded(){  return expandableSelectorAnimator.isExpanded();}  }
class C{  public void incMinedForItem(String item,int count){  handlePrefixedCounting(item,count,"mined.",mined);}  }
class C{  protected synchronized void doProcessEvent(final LogEvent event){  if (isFull()) {    if (m_overwrite) {      m_used--;    } else {      getErrorHandler().error("Memory buffer is full",null,event);      return;    }  }  if (0 == m_used) {    m_index=0;  } else {    m_index=(m_index + 1) % m_buffer.length;  }  m_buffer[m_index]=event;  m_used++;  if (shouldPush(event)) {    push();  }}  }
class C{  public T image(File file,int targetWidth){  return image(file,true,targetWidth,null);}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(ComboBoxDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new ComboBoxDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public boolean gameWon(){  return gameWon(Player.XMARK) || gameWon(Player.OMARK);}  }
class C{  public void update(){  ;}  }
class C{  public static void compareMatrices(double[][] expectedMatrix,double[][] actualMatrix,int rows,int cols,double epsilon){  int countErrors=0;  for (int i=0; i < rows; i++) {    for (int j=0; j < cols; j++) {      if (!compareCellValue(expectedMatrix[i][j],actualMatrix[i][j],epsilon,false)) {        System.out.println(expectedMatrix[i][j] + " vs actual: " + actualMatrix[i][j]+ " at "+ i+ " "+ j);        countErrors++;      }    }  }  assertTrue("" + countErrors + " values are not in equal",countErrors == 0);}  }
class C{  public static void addElectrolyticSeparatorRecipe(FluidStack input,double energy,GasStack leftOutput,GasStack rightOutput){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addElectrolyticSeparatorRecipe",FluidStack.class,Double.TYPE,GasStack.class,GasStack.class);    m.invoke(null,input,energy,leftOutput,rightOutput);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public boolean showConfirm(String message){  return false;}  }
class C{  public InfocardInvocation(FetchRequest fetch){  _requiredClaims.add(OpenIDTokenType.OPENID_CLAIM);  _tokenType=OpenIDTokenType.OPENID20_TOKEN;  _requiredClaims.addAll(fetch.getAttributes(true).values());  _optionalClaims.addAll(fetch.getAttributes(false).values());  if (DEBUG)   _log.debug("Created " + _tokenType + " token type InfocardInvocation from a FetchRequest.");}  }
class C{  public boolean deleteHost(final String xivSystem,final String hostName,final boolean forceDelete) throws Exception {  final String instanceURL=MessageFormat.format(HOST_INSTANCE_URL,xivSystem,hostName);  boolean deleteSuccessful=false;  if (findAvailability(instanceURL)) {    boolean isVolumeExportAvailable=findAvailability(MessageFormat.format(EXPORT_VOLUME_URL + SEARCH_URL,xivSystem,HOST,hostName));    if (forceDelete || !isVolumeExportAvailable) {      boolean isInitiatorAvailable=findAvailability(MessageFormat.format(HOST_PORT_URL + SEARCH_URL,xivSystem,HOST,hostName));      if (!isInitiatorAvailable) {        ResponseValidator failureStatus=executePOSTRequest(xivSystem,instanceURL,DELETE_BODY);        deleteSuccessful=true;        if (failureStatus.isFailed()) {          throw XIVRestException.exceptions.hostDeleteFailure(xivSystem,hostName,failureStatus.toString());        }      } else {        _log.warn("There are Initiators available on Host {}. Skipping deletion.",hostName);      }    } else {      _log.warn("There are some more Volume exported to Host {}. Skipping deletion.",hostName);    }  } else {    throw XIVRestException.exceptions.instanceUnavailableForDelete(xivSystem,HOST,hostName);  }  return deleteSuccessful;}  }
class C{  public void addPokemon(Pokemon pokemon) throws IOException {  Document doc=makeDocument(pokemon);  indexWriter.addDocument(doc);}  }
class C{  public void reconnect() throws RemotingException {  checkClient();  client.reconnect();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:09.087 -0400",hash_original_method="717E7D891ADBD4AB422EF144CDA66EDD",hash_generated_method="7612E3DFB2196C0574EEE2BCF97A472E") public AuthPermission(String name,String actions){  super(init(name),actions);}  }
class C{  static double zetastatic(long n,double theta){  return zetastatic(0,n,theta,0);}  }
class C{  private Long createUserFromLdapData(HashMap<String,String> userdata,String passwd,String login,HashMap<String,String> ldapAttrs) throws Exception {  log.debug("LdapLoginmanagement.createUserFromLdapData");  String lastname="lastname";  if (userdata.containsKey(ldapAttrs.get("lastnameAttr")) && userdata.get(ldapAttrs.get("lastnameAttr")) != null)   lastname=userdata.get(ldapAttrs.get("lastnameAttr"));  String firstname="firstname";  if (userdata.containsKey(ldapAttrs.get("firstnameAttr")) && userdata.get(ldapAttrs.get("firstnameAttr")) != null)   firstname=userdata.get(ldapAttrs.get("firstnameAttr"));  String email="email";  if (userdata.containsKey(ldapAttrs.get("mailAttr")) && userdata.get(ldapAttrs.get("mailAttr")) != null)   email=userdata.get(ldapAttrs.get("mailAttr"));  String street="street";  if (userdata.containsKey(ldapAttrs.get("streetAttr")) && userdata.get(ldapAttrs.get("streetAttr")) != null)   street=userdata.get(ldapAttrs.get("streetAttr"));  String additionalname="additionalname";  if (userdata.containsKey(ldapAttrs.get("additionalNameAttr")) && userdata.get(ldapAttrs.get("additionalNameAttr")) != null)   additionalname=userdata.get(ldapAttrs.get("additionalNameAttr"));  String fax="fax";  if (userdata.containsKey(ldapAttrs.get("faxAttr")) && userdata.get(ldapAttrs.get("faxAttr")) != null)   fax=userdata.get(ldapAttrs.get("faxAttr"));  String zip="zip";  if (userdata.containsKey(ldapAttrs.get("zipAttr")) && userdata.get(ldapAttrs.get("zipAttr")) != null)   zip=userdata.get(ldapAttrs.get("zipAttr"));  String state=null;  if (userdata.containsKey(ldapAttrs.get("countryAttr")) && userdata.get(ldapAttrs.get("countryAttr")) != null)   state=userdata.get(ldapAttrs.get("countryAttr"));  String phone="phone";  if (userdata.containsKey(ldapAttrs.get("phoneAttr")) && userdata.get(ldapAttrs.get("phoneAttr")) != null)   phone=userdata.get(ldapAttrs.get("phoneAttr"));  long state_id=-1;  String jName_timeZone="";  if (userdata.containsKey(ldapAttrs.get("timezoneAttr")) && userdata.get(ldapAttrs.get("timezoneAttr")) != null)   jName_timeZone=userdata.get(ldapAttrs.get("timezoneAttr"));  if (omTimeZoneDaoImpl.getOmTimeZone(jName_timeZone) == null) {    jName_timeZone=cfgManagement.getConfValue("default.timezone",String.class,"Europe/Berlin");  }  if (state != null) {    List<States> states=statemanagement.getStates();    for (int i=0; i < states.size(); i++) {      States oneState=states.get(i);      if (oneState.getName().equals(state)) {        state_id=oneState.getState_id();        break;      }    }  }  if (state_id < 0) {    Long id=statemanagement.addState(state);    if (id != null)     state_id=id;  }  String town="town";  if (userdata.containsKey(ldapAttrs.get("townAttr")) && userdata.get(ldapAttrs.get("townAttr")) != null)   town=userdata.get(ldapAttrs.get("townAttr"));  Long newUserId=null;  try {    newUserId=userManagement.registerUserInit(2,1,1,1,login,passwd,lastname,firstname,email,new java.util.Date(),street,additionalname,fax,zip,state_id,town,cfgManagement.getConfValue("default_lang_id",Long.class,"0"),false,Arrays.asList(cfgManagement.getConfValue("default_domain_id",Long.class,null)),phone,"",false,"","","",true,jName_timeZone,false,"","",false,true);  } catch (  Exception e) {    log.error("Error creating user : " + e.getMessage());  }  if (newUserId == -1) {    log.error("Error occured creating user");  } else   if (newUserId == -15) {    log.error("Error creating user : username already exists!");  } else   if (newUserId == -17) {    log.error("Error creating user : email already exists!");  } else   if (newUserId == -3) {    log.error("Error creating user : missing values");  } else {    log.debug("User Created!");  }  return newUserId;}  }
class C{  protected final void storeState(){  storedLikelihoodKnown=likelihoodKnown;  storedLogLikelihood=logLikelihood;}  }
class C{  public static Paint convertPaint(Element paintedElement,GraphicsNode paintedNode,Value paintDef,float opacity,BridgeContext ctx){  if (paintDef.getCssValueType() == CSSValue.CSS_PRIMITIVE_VALUE) {switch (paintDef.getPrimitiveType()) {case CSSPrimitiveValue.CSS_IDENT:      return null;case CSSPrimitiveValue.CSS_RGBCOLOR:    return convertColor(paintDef,opacity);case CSSPrimitiveValue.CSS_URI:  return convertURIPaint(paintedElement,paintedNode,paintDef,opacity,ctx);default :throw new IllegalArgumentException("Paint argument is not an appropriate CSS value");}} else {Value v=paintDef.item(0);switch (v.getPrimitiveType()) {case CSSPrimitiveValue.CSS_RGBCOLOR:return convertRGBICCColor(paintedElement,v,(ICCColor)paintDef.item(1),opacity,ctx);case CSSPrimitiveValue.CSS_URI:{Paint result=silentConvertURIPaint(paintedElement,paintedNode,v,opacity,ctx);if (result != null) return result;v=paintDef.item(1);switch (v.getPrimitiveType()) {case CSSPrimitiveValue.CSS_IDENT:return null;case CSSPrimitiveValue.CSS_RGBCOLOR:if (paintDef.getLength() == 2) {return convertColor(v,opacity);} else {return convertRGBICCColor(paintedElement,v,(ICCColor)paintDef.item(2),opacity,ctx);}default :throw new IllegalArgumentException("Paint argument is not an appropriate CSS value");}}default :throw new IllegalArgumentException("Paint argument is not an appropriate CSS value");}}}  }
class C{  protected int retrieveEndOfPotentialExtendedDimensions(int initializerEnd,int nameEnd,int end){  this.scanner.resetTo(initializerEnd,end);  boolean hasTokens=false;  int balance=0;  int pos=initializerEnd > nameEnd ? initializerEnd - 1 : nameEnd;  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {      hasTokens=true;switch (token) {case TerminalTokens.TokenNameLBRACE:case TerminalTokens.TokenNameLBRACKET:        balance++;      break;case TerminalTokens.TokenNameRBRACKET:case TerminalTokens.TokenNameRBRACE:    balance--;  pos=this.scanner.currentPosition - 1;break;case TerminalTokens.TokenNameCOMMA:if (balance == 0) return pos;pos=this.scanner.currentPosition - 1;break;case TerminalTokens.TokenNameSEMICOLON:if (balance == 0) return pos;return -pos;}}} catch (InvalidInputException e) {}return hasTokens ? Integer.MIN_VALUE : pos;}  }
class C{  public Document technicalProductToXmlDocument(List<TechnicalProduct> techProds,LocalizerServiceLocal localizer,DataService dm){  return technicalProductToXmlDocumentInt(techProds,localizer).getDomDocument();}  }
class C{  public static StyledParagraph insertChar(AttributedCharacterIterator aci,char[] chars,int insertPos,StyledParagraph oldParagraph){  char ch=aci.setIndex(insertPos);  int relativePos=Math.max(insertPos - aci.getBeginIndex() - 1,0);  Map<? extends Attribute,?> attributes=addInputMethodAttrs(aci.getAttributes());  Decoration d=Decoration.getDecoration(attributes);  if (!oldParagraph.getDecorationAt(relativePos).equals(d)) {    return new StyledParagraph(aci,chars);  }  Object f=getGraphicOrFont(attributes);  if (f == null) {    FontResolver resolver=FontResolver.getInstance();    int fontIndex=resolver.getFontIndex(ch);    f=resolver.getFont(fontIndex,attributes);  }  if (!oldParagraph.getFontOrGraphicAt(relativePos).equals(f)) {    return new StyledParagraph(aci,chars);  }  oldParagraph.length+=1;  if (oldParagraph.decorations != null) {    insertInto(relativePos,oldParagraph.decorationStarts,oldParagraph.decorations.size());  }  if (oldParagraph.fonts != null) {    insertInto(relativePos,oldParagraph.fontStarts,oldParagraph.fonts.size());  }  return oldParagraph;}  }
class C{  Program(ModeUsage modeUsage,ContentHandler handler){  this.modeUsage=modeUsage;  this.handler=handler;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public BeanContextSupport(BeanContext peer,Locale lcle,boolean dtime){  this(peer,lcle,dtime,true);}  }
class C{  public WriteException(WriteRequest request,String message,Throwable cause){  super(message);  initCause(cause);  this.requests=asRequestList(request);}  }
class C{  public MemoryHandler(int size,Level pushLevel,String handler){  this.pushLevelC=(pushLevel == null) ? DEFAULT_PUSHLEVEL : pushLevel;  if (size <= 0)   size=DEFAULT_SIZE;  handler=(handler.equals("")) ? DEFAULT_HANDLER : handler;  buffer=new LogRecord[size];  start=0;  count=0;  try {    targetC=(Handler)Class.forName("org.eclipse.paho.client.mqttv3.util." + handler).newInstance();    targetC.setLevel(pushLevelC);    targetC.setFormatter(new SimpleLogFormatter());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  public static <T extends IStaredItem>void sort(final List<T> items){  int insertCounter=0;  for (int i=0; i < items.size(); i++) {    final T item=items.get(i);    if (item.isStared()) {      items.remove(i);      items.add(insertCounter++,item);    }  }}  }
class C{  public static UpdateAlertDefinitionMessage create(StatAlertDefinition[] alertDefs,int actionCode){  UpdateAlertDefinitionMessage m=new UpdateAlertDefinitionMessage();  m._alertDefinitions=alertDefs;  m._actionCode=actionCode;  return m;}  }
class C{  public static Intent makeInitIntent(Context context){  Intent i=new Intent(context,FileObserverService.class);  i.setAction(ACTION_START_OBSERVE);  return i;}  }
class C{  public static byte[] transformToHeadlessKnight(String image) throws CommonsException {  return org.apache.commons.codec.binary.Base64.decodeBase64(cutHead(image));}  }
class C{  CarPane(){  drawCar();  animation=new Timeline(new KeyFrame(Duration.millis(50),null));  animation.setCycleCount(Timeline.INDEFINITE);}  }
class C{  protected EventID distributeTombstoneGC(Set<Object> keysRemoved){  this.getCachePerfStats().incTombstoneGCCount();  EventID eventId=new EventID(getSystem());  DistributedTombstoneOperation gc=DistributedTombstoneOperation.gc(this,eventId);  gc.distribute();  notifyClientsOfTombstoneGC(getVersionVector().getTombstoneGCVector(),keysRemoved,eventId,null);  return eventId;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.694 -0500",hash_original_method="A68E0921F08E40A4FFD6BCC285B4B760",hash_generated_method="8F8FF4F55B417D9FC34E9B3BBDC89DB8") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("InReplyToParser.parse");  InReplyToList list=new InReplyToList();  try {    headerName(TokenTypes.IN_REPLY_TO);    while (lexer.lookAhead(0) != '\n') {      InReplyTo inReplyTo=new InReplyTo();      inReplyTo.setHeaderName(SIPHeaderNames.IN_REPLY_TO);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      if (lexer.lookAhead(0) == '@') {        this.lexer.match('@');        this.lexer.match(TokenTypes.ID);        Token secToken=lexer.getNextToken();        inReplyTo.setCallId(token.getTokenValue() + "@" + secToken.getTokenValue());      } else {        inReplyTo.setCallId(token.getTokenValue());      }      this.lexer.SPorHT();      list.add(inReplyTo);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        inReplyTo=new InReplyTo();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        if (lexer.lookAhead(0) == '@') {          this.lexer.match('@');          this.lexer.match(TokenTypes.ID);          Token secToken=lexer.getNextToken();          inReplyTo.setCallId(token.getTokenValue() + "@" + secToken.getTokenValue());        } else {          inReplyTo.setCallId(token.getTokenValue());        }        list.add(inReplyTo);      }    }    return list;  }  finally {    if (debug)     dbg_leave("InReplyToParser.parse");  }}  }
class C{  private static String doSubstringExtract(final SubstringExtractFormatterDetails details,final String text){  String convertedText=text;  try {    final String input=extractValueForConversion(details,convertedText);    if (details.isKeepTags()) {      convertedText=details.getStartTag() + input + details.getEndTag();    } else {      convertedText=input;    }  } catch (  ConversionException e) {  }  return convertedText;}  }
class C{  private void kdRangeSearch(int left,int right,int axis,O query,ModifiableDoubleDBIDList res,DoubleDBIDListIter iter,double radius){  if (right - left <= leafsize) {    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {      double dist=norm.distance(query,relation.get(iter));      countObjectAccess();      countDistanceComputation();      if (dist <= radius) {        res.add(dist,iter);      }    }    return;  }  final int middle=(left + right) >>> 1;  final double delta=iter.seek(middle).doubleValue() - query.doubleValue(axis);  final boolean onleft=(delta >= 0);  final boolean onright=(delta <= 0);  final boolean close=(Math.abs(delta) <= radius);  final int next=(axis + 1) % dims;  if (close) {    O split=relation.get(iter.seek(middle));    countObjectAccess();    double dist=norm.distance(query,split);    countDistanceComputation();    if (dist <= radius) {      assert (iter.getOffset() == middle);      res.add(dist,iter);    }  }  if (left < middle && (onleft || close)) {    kdRangeSearch(left,middle,next,query,res,iter,radius);  }  if (middle + 1 < right && (onright || close)) {    kdRangeSearch(middle + 1,right,next,query,res,iter,radius);  }}  }
class C{  public void testIsSearchable(){  try {    assertTrue(rsmd.isSearchable(1));    assertTrue(rsmd.isSearchable(2));    assertTrue(rsmd.isSearchable(3));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.isReadOnly" + e1.getMessage());    e1.printStackTrace();  }  try {    rsmd.isSearchable(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  public NetworkAnalyzer(String networkInputFile,String targetCoordinateSystem){  super(NetworkAnalyzer.class.getSimpleName());  this.scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  this.targetCoordinateSystem=targetCoordinateSystem;  if (networkInputFile != null) {    new MatsimNetworkReader(this.scenario.getNetwork()).readFile(networkInputFile);    this.network=this.scenario.getNetwork();  }}  }
class C{  public int randomInt(int max){  return m_randGenerator.nextInt(max);}  }
class C{  private void printContentRange(Writer out,List content,int start,int end,int level,EclipseNamespaceStack namespaces) throws IOException {  boolean firstNode;  Object next;  int first, index;  index=start;  while (index < end) {    firstNode=(index == start) ? true : false;    next=content.get(index);    if ((next instanceof Text) || (next instanceof EntityRef)) {      first=skipLeadingWhite(content,index);      index=nextNonText(content,first);      if (first < index) {        if (!firstNode)         newline(out);        indent(out,level);        printTextRange(out,content,first,index);      }      continue;    }    if (!firstNode) {      newline(out);    }    indent(out,level);    if (next instanceof Comment) {      printComment(out,(Comment)next);    } else     if (next instanceof Element) {      printElement(out,(Element)next,level,namespaces);    } else     if (next instanceof ProcessingInstruction) {      printProcessingInstruction(out,(ProcessingInstruction)next);    } else {    }    index++;  }}  }
class C{  public void write(int c) throws IOException {  se.write(c);}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 p){  final long startTime=getTimestamp();  FetchBulkEntriesResponse processor=(FetchBulkEntriesResponse)p;  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"FetchBulkEntriesReplyMessage processor not found");    }    return;  }  processor.processChunkResponse(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} processed {}",processor,this);  }  dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);}  }
class C{  public void addControllerListener(ControllerInterface listener){  if (controllerListeners == null) {    controllerListeners=new ArrayList<ControllerInterface>(1);  }  if (!controllerListeners.contains(listener)) {    controllerListeners.add(listener);  }}  }
class C{  void createConsistencyGroup(String cgName,String clusterName,boolean isDistributed) throws VPlexApiException {  s_logger.info("Request to create consistency group {} on cluster {}",cgName,clusterName);  VPlexClusterInfo clusterInfo=null;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();  for (  VPlexClusterInfo info : clusterInfoList) {    if (info.getName().equals(clusterName)) {      clusterInfo=info;      break;    }  }  if (clusterInfo == null) {    throw VPlexApiException.exceptions.failedToFindCluster(clusterName);  }  ClientResponse response=null;  try {    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_CREATE_CG);    s_logger.info("Create consistency group URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_N,cgName);    argsMap.put(VPlexApiConstants.ARG_DASH_C,clusterInfo.getPath());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);    s_logger.info("Create consistency group POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Create consistency group response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Consistency group creation completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.createConsistencyGroupFailureStatus(cgName,String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully created consistency group");    VPlexConsistencyGroupInfo cgInfo=discoveryMgr.findConsistencyGroup(cgName,Collections.singletonList(clusterInfo),false,true);    setAutoResumeAtLoser(cgInfo,true);    if (isDistributed) {      s_logger.info("Is Distributed");      setConsistencyGroupVisibility(cgInfo,clusterInfoList);      setConsistencyGroupStorageClusters(cgInfo,clusterInfoList);      setDetachRuleWinner(cgInfo,clusterInfo);    } else {      setConsistencyGroupStorageClusters(cgInfo,Collections.singletonList(clusterInfo));    }  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedCreatingConsistencyGroup(cgName,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public void assertTermsStatistics(Terms leftTerms,Terms rightTerms) throws Exception {  if (leftTerms.getDocCount() != -1 && rightTerms.getDocCount() != -1) {    assertEquals(leftTerms.getDocCount(),rightTerms.getDocCount());  }  if (leftTerms.getSumDocFreq() != -1 && rightTerms.getSumDocFreq() != -1) {    assertEquals(leftTerms.getSumDocFreq(),rightTerms.getSumDocFreq());  }  if (leftTerms.getSumTotalTermFreq() != -1 && rightTerms.getSumTotalTermFreq() != -1) {    assertEquals(leftTerms.getSumTotalTermFreq(),rightTerms.getSumTotalTermFreq());  }  if (leftTerms.size() != -1 && rightTerms.size() != -1) {    assertEquals(leftTerms.size(),rightTerms.size());  }}  }
class C{  public double eigenValue(int i){  return eigenPairs[i].getEigenvalue();}  }
class C{  public Block toBlock(){  final Block $=ast.newBlock();  step.statements($).addAll(inner);  return $;}  }
class C{  public static <T extends Base>Multimap<ReferenceTarget,T> createReferentMap(JCas jCas,Class<T> clazz){  final Collection<T> potentialReferences=JCasUtil.select(jCas,clazz);  final Multimap<ReferenceTarget,T> targets=HashMultimap.create();  potentialReferences.stream().filter(null).forEach(null);  return targets;}  }
class C{  public Builder clearResize(){  targetWidth=0;  targetHeight=0;  centerCrop=false;  centerInside=false;  return this;}  }
class C{  private void checkRangeValidity(double min,double max){  if (min > max) {    throw new Error("Minimum value is larger than maximum");  }}  }
class C{  SelectResults evaluateCollection(ExecutionContext context) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  return evaluateCollection(context,null);}  }
class C{  public void startElement(String ns,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  Element elem;  if ((null == ns) || (ns.length() == 0))   elem=m_doc.createElementNS(null,name); else   elem=m_doc.createElementNS(ns,name);  append(elem);  try {    int nAtts=atts.getLength();    if (0 != nAtts) {      for (int i=0; i < nAtts; i++) {        if (atts.getType(i).equalsIgnoreCase("ID"))         setIDAttribute(atts.getValue(i),elem);        String attrNS=atts.getURI(i);        if ("".equals(attrNS))         attrNS=null;        String attrQName=atts.getQName(i);        if (attrQName.startsWith("xmlns:") || attrQName.equals("xmlns")) {          attrNS="http://www.w3.org/2000/xmlns/";        }        elem.setAttributeNS(attrNS,attrQName,atts.getValue(i));      }    }    int nDecls=m_prefixMappings.size();    String prefix, declURL;    for (int i=0; i < nDecls; i+=2) {      prefix=(String)m_prefixMappings.elementAt(i);      if (prefix == null)       continue;      declURL=(String)m_prefixMappings.elementAt(i + 1);      elem.setAttributeNS("http://www.w3.org/2000/xmlns/",prefix,declURL);    }    m_prefixMappings.clear();    m_elemStack.push(elem);    m_currentNode=elem;  } catch (  java.lang.Exception de) {    throw new org.xml.sax.SAXException(de);  }}  }
class C{  public String toString(){  return "IdRange ( " + this._lowVal + "->"+ this._highVal+ " )";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:36.255 -0500",hash_original_method="EEEA1D6F83C84A4A1EBDD2FD7850BFFE",hash_generated_method="6A266B715AEA1EC82B0D2051E5253859") public boolean verify(String provider) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  return verify(this.getPublicKey(provider),provider);}  }
class C{  private File uploadToTmp() throws ImportException {  if (fileFileName == null) {    return null;  }  File tmpFile=dataDir.tmpFile(shortname,fileFileName);  LOG.debug("Uploading dwc archive file for new resource " + shortname + " to "+ tmpFile.getAbsolutePath());  InputStream input=null;  OutputStream output=null;  try {    input=new FileInputStream(file);    output=new FileOutputStream(tmpFile);    IOUtils.copy(input,output);    output.flush();    LOG.debug("Uploaded file " + fileFileName + " with content-type "+ fileContentType);  } catch (  IOException e) {    LOG.error(e);    throw new ImportException("Failed to upload file to tmp file",e);  } finally {    if (output != null) {      IOUtils.closeQuietly(output);    }    if (input != null) {      IOUtils.closeQuietly(input);    }  }  return tmpFile;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void undoOrRedo() throws CannotUndoException, CannotRedoException {  undoOrRedoInProgress=true;  try {    super.undoOrRedo();  }  finally {    undoOrRedoInProgress=false;    updateActions();  }}  }
class C{  public Date lastModified(){  if (this.date_cache_LastModified != null)   return this.date_cache_LastModified;  Date d=headerDate(HeaderFramework.LAST_MODIFIED);  final Date now=new Date();  this.date_cache_LastModified=(d == null) ? date() : d.after(now) ? now : d;  return this.date_cache_LastModified;}  }
class C{  private long multDiffMe(long q,FDBigInteger S){  long diff=0L;  if (q != 0) {    int deltaSize=S.offset - this.offset;    if (deltaSize >= 0) {      int[] sd=S.data;      int[] td=this.data;      for (int sIndex=0, tIndex=deltaSize; sIndex < S.nWords; sIndex++, tIndex++) {        diff+=(td[tIndex] & LONG_MASK) - q * (sd[sIndex] & LONG_MASK);        td[tIndex]=(int)diff;        diff>>=32;      }    } else {      deltaSize=-deltaSize;      int[] rd=new int[nWords + deltaSize];      int sIndex=0;      int rIndex=0;      int[] sd=S.data;      for (; rIndex < deltaSize && sIndex < S.nWords; sIndex++, rIndex++) {        diff-=q * (sd[sIndex] & LONG_MASK);        rd[rIndex]=(int)diff;        diff>>=32;      }      int tIndex=0;      int[] td=this.data;      for (; sIndex < S.nWords; sIndex++, tIndex++, rIndex++) {        diff+=(td[tIndex] & LONG_MASK) - q * (sd[sIndex] & LONG_MASK);        rd[rIndex]=(int)diff;        diff>>=32;      }      this.nWords+=deltaSize;      this.offset-=deltaSize;      this.data=rd;    }  }  return diff;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void onSuccess(IMqttToken asyncActionToken){switch (action) {case CONNECT:    connect();  break;case DISCONNECT:disconnect();break;case SUBSCRIBE:subscribe();break;case PUBLISH:publish();break;}}  }
class C{  public static String toStringInLines(Collection<?> c){  if (c.isEmpty())   return "";  return join(Globals.lineSep,toStringLines(c)) + Globals.lineSep;}  }
class C{  void initComposeState(){  m_composeState=new ComposeState();}  }
class C{  @Override public boolean put(K key,V value){  addNode(key,value,null);  return true;}  }
class C{  public void rm(String fileOrDir){  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.rm"),fileOrDir);  sendWaitFor(command,defaultTimeout,prompts,buf);  log.debug(buf.toString());}  }
class C{  private void read(){  data.reset();  data.readByte();  data.readShortInt();  for (int i=0; i < pageCount; i+=8) {    int x=data.readByte() & 255;    used.setByte(i,x);  }  full=false;}  }
class C{  @Override public long addDisk(String fileName,InputStream inputStream) throws IOException, VmdkFormatException, NameTakenException, InternalException {  if (!inputStream.markSupported()) {    inputStream=new BufferedInputStream(inputStream);  }  int singleExtentSize=VmdkMetadata.getSingleExtentSize(inputStream);  String imagePath=getImageFilePath(fileName);  logger.info("write to {}",imagePath);  nfcClient.putStreamOptimizedDisk(imagePath,inputStream);  return singleExtentSize * 512L;}  }
class C{  public Key distance(Key x){  return distance(this,x);}  }
class C{  private void animateProperty(int constantName,float toValue){  float fromValue=getValue(constantName);  float deltaValue=toValue - fromValue;  animatePropertyBy(constantName,fromValue,deltaValue);}  }
class C{  static DProtocol createFromSocket(Socket s) throws IOException {  applyBaseSocketSettings(s);  return createDProtocolFromSocket(s,false);}  }
class C{  public EWMA(double alpha,long interval,TimeUnit intervalUnit){  this.interval=intervalUnit.toNanos(interval);  this.alpha=alpha;}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints a disassembled view of the given class.");    System.err.println("Usage: Textifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(new PrintWriter(System.out)),flags);}  }
class C{  private static byte[] decode(byte[] source,int len) throws Base64DecoderException {  return decode(source,0,len,DECODABET);}  }
class C{  @SuppressWarnings("deprecation") private void createCacheForVM1(){  try {    distributedSystem=(new Bug37377DUnitTest()).getSystem(props);    assertTrue(distributedSystem != null);    cache=CacheFactory.create(distributedSystem);    assertTrue("cache found null",cache != null);    AttributesFactory factory=new AttributesFactory();    factory.setScope(Scope.DISTRIBUTED_ACK);    factory.setDataPolicy(DataPolicy.PERSISTENT_REPLICATE);    factory.setDiskSynchronous(false);    factory.setDiskStoreName(cache.createDiskStoreFactory().setDiskDirs(dirs).create("Bug37377DUnitTest").getName());    RegionAttributes attr=factory.create();    DistributedRegion distRegion=new DistributedRegion(regionName,attr,null,(GemFireCacheImpl)cache,new InternalRegionArguments().setDestroyLockFlag(true).setRecreateFlag(false).setSnapshotInputStream(null).setImageTarget(null));    TestAbstractDiskRegionEntry.setMembers(vm1,vm0);    ((AbstractRegionMap)distRegion.entries).setEntryFactory(TestAbstractDiskRegionEntry.getEntryFactory());    LocalRegion region=(LocalRegion)((GemFireCacheImpl)cache).createVMRegion(regionName,attr,new InternalRegionArguments().setInternalMetaRegion(distRegion).setDestroyLockFlag(true).setSnapshotInputStream(null).setImageTarget(null));    assertTrue("Local Region is null",region != null);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Error Creating cache / region " + ex);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  assertSize("elementGetElementsByTagNameAssert",5,elementList);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:44.064 -0500",hash_original_method="20A64E7812064C08C37EDD86F8A561DF",hash_generated_method="E03AFB35E1AB6EEEE84CD19F72F0EB38") @Override public synchronized int hashCode(){  int result=1;  for (int i=0; i < elementCount; i++) {    result=(31 * result) + (elementData[i] == null ? 0 : elementData[i].hashCode());  }  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public CachingParanamer(){  this(new DefaultParanamer());}  }
class C{  @Override public QueueConnection createQueueConnection(final String userName,final String password) throws JMSException {  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createQueueConnection(" + userName + ", ****)");  }  ActiveMQRASessionFactoryImpl s=new ActiveMQRASessionFactoryImpl(mcf,cm,getResourceAdapter().getTM(),ActiveMQRAConnectionFactory.QUEUE_CONNECTION);  s.setUserName(userName);  s.setPassword(password);  validateUser(s);  if (ActiveMQRAConnectionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("Created queue connection: " + s);  }  return s;}  }
class C{  public void log(String title,int paddLines,PrintWriter logger,String prefix){  for (int i=0; i < paddLines; i++) {    logger.println();  }  if (title != null && title.trim().length() > 0) {    logger.println(title);  }  prefix=prefix == null ? "" : prefix;  NumberFormat nf=NumberFormat.getInstance(Locale.ROOT);  nf.setMaximumFractionDigits(3);  nf.setMinimumFractionDigits(3);  nf.setGroupingUsed(true);  int M=19;  logger.println(prefix + format("Search Seconds: ",M) + fracFormat(nf.format((double)searchTime / 1000)));  logger.println(prefix + format("DocName Seconds: ",M) + fracFormat(nf.format((double)docNamesExtractTime / 1000)));  logger.println(prefix + format("Num Points: ",M) + fracFormat(nf.format(numPoints)));  logger.println(prefix + format("Num Good Points: ",M) + fracFormat(nf.format(numGoodPoints)));  logger.println(prefix + format("Max Good Points: ",M) + fracFormat(nf.format(maxGoodPoints)));  logger.println(prefix + format("Average Precision: ",M) + fracFormat(nf.format(getAvp())));  logger.println(prefix + format("MRR: ",M) + fracFormat(nf.format(getMRR())));  logger.println(prefix + format("Recall: ",M) + fracFormat(nf.format(getRecall())));  for (int i=1; i < (int)numPoints && i < pAt.length; i++) {    logger.println(prefix + format("Precision At " + i + ": ",M) + fracFormat(nf.format(getPrecisionAt(i))));  }  for (int i=0; i < paddLines; i++) {    logger.println();  }}  }
class C{  public void testRemoveAttributeNS() throws Throwable {  Document doc;  Element element;  boolean state;  Attr attribute;  doc=(Document)load("staff",builder);  element=doc.createElementNS("http://www.w3.org/DOM","elem");  attribute=doc.createAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS","attr");  element.setAttributeNodeNS(attribute);  element.removeAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS","attr");  state=element.hasAttributeNS("http://www.w3.org/DOM/Test/createAttributeNS","attr");  assertFalse("elementremoveattributens01",state);}  }
class C{  @Beta(Beta.Feature.Analytics) public Builder withDigitsEventLogger(DigitsEventLogger digitsEventLogger){  this.digitsEventLogger=digitsEventLogger;  return this;}  }
class C{  public final void selectAll(){  select(0,getDocumentLength());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.RETURN_STATEMENT__EXPRESSION:    setExpression((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static Bitmap loadBitmap(byte[] data) throws ImageLoadException {  return loadBitmap(new MemorySource(data));}  }
class C{  private static String findProjectHome(File startDir){  for (File cur=startDir.getAbsoluteFile(); cur != null; cur=cur.getParentFile()) {    if (!new File(cur,"bin").isDirectory() || !new File(cur,"config").isDirectory())     continue;    return cur.getPath();  }  return null;}  }
class C{  @Override public void removeVetoableChangeListener(String name,VetoableChangeListener vcl){  m_bcSupport.removeVetoableChangeListener(name,vcl);}  }
class C{  protected ExtendedSolrQueryParser createEdismaxQueryParser(QParser qParser,String field){  return new ExtendedSolrQueryParser(qParser,field);}  }
class C{  public Graphics create(){  return new DefaultGraphics2D(this);}  }
class C{  private void methods(Class type){  Method[] list=type.getDeclaredMethods();  for (  Method method : list) {    MethodDetail detail=new MethodDetail(method);    methods.add(detail);  }}  }
class C{  public void close(){  if (file != null) {    file.autoDelete();    file.closeAndDeleteSilently();    file=null;    rowBuff=null;  }}  }
class C{  private Node _getNode(final CharSequence key,final int offset,final int length){  if ((offset > key.length() - 1) || (offset + length > key.length())) {    return null;  }  if (key.length() == 0) {    return _root;  }  Node last=_root;  Node match=null;  for (int i=offset; i < offset + length; i++) {    final char k=key.charAt(i);    final Node cur=last.children.get(k);    if (cur == null) {      break;    } else {      match=cur;    }    last=cur;  }  return ((match != null) && (match.level == length)) ? match : null;}  }
class C{  public double computeLogFactorial(int n){  if (n > m_maxFactComputed) {    for (int i=m_maxFactComputed + 1; i <= n; i++) {      m_logFactTbl.add(m_logFactTbl.get(i - 1) + Math.log(i));    }    m_maxFactComputed=n;  }  return m_logFactTbl.get(n);}  }
class C{  public GridFinishedFuture(T t){  res=t;  resFlag=RES;}  }
class C{  public void dispose(){synchronized (this) {    if (disposed)     return;    disposed=true;    cache.unregister(this);  }}  }
class C{  public static boolean isPrimitiveOrWrapper(Class<?> clazz){  Assert.notNull(clazz,"Class must not be null");  return (clazz.isPrimitive() || isPrimitiveWrapper(clazz));}  }
class C{  public T caseAnonymous_entryOrExitAction_2_(Anonymous_entryOrExitAction_2_ object){  return null;}  }
class C{  public static double[] abs(final double[] data){  double[] result=new double[data.length];  for (int i=0; i < result.length; i++) {    result[i]=Math.abs(data[i]);  }  return result;}  }
class C{  public void testMethod() throws Throwable {  try {    Method testMethod=testCase.getMethod(testName,null);    try {      testMethod.invoke(test,null);    } catch (    InvocationTargetException ex) {      if (ex.getTargetException() instanceof EETest.Fault)       throw new AssertionFailedError(exceptionToString(ex.getTargetException())); else       throw ex.getTargetException();    }  } catch (  NoSuchElementException ex) {    throw new AssertionFailedError("Method " + testName + " not found in class "+ testCase.getName());  }}  }
class C{  public static String decode(String s,String enc,boolean plusToSpace){  boolean modified=false;  if (enc == null || enc.length() == 0) {    enc="UTF-8";  }  int numChars=s.length();  StringBuilder sb=new StringBuilder(numChars > 500 ? numChars / 2 : numChars);  int i=0;  char c;  byte[] bytes=null;  while (i < numChars) {    c=s.charAt(i);switch (c) {case '+':      if (plusToSpace) {        sb.append(' ');      } else {        sb.append('+');      }    i++;  modified=true;break;case '%':try {if (bytes == null) {  bytes=new byte[(numChars - i) / 3];}int pos=0;while (((i + 2) < numChars) && (c == '%')) {  bytes[pos++]=(byte)Integer.parseInt(s.substring(i + 1,i + 3),16);  i+=3;  if (i < numChars) {    c=s.charAt(i);  }}if ((i < numChars) && (c == '%')) {  throw new IllegalArgumentException("Illegal URL % character: " + s);}try {  sb.append(new String(bytes,0,pos,enc));} catch (UnsupportedEncodingException e) {  throw new RuntimeException(e.toString());}} catch (NumberFormatException e) {throw new IllegalArgumentException("Illegal URL encoding: " + s);}modified=true;break;default :sb.append(c);i++;break;}}if (modified) {return sb.toString();}return s;}  }
class C{  public void testDefaultFoldersPrimary() throws Exception {  setSecondaryFs=true;  mode=DUAL_ASYNC;  startUp();  checkMode("/ignite/primary",PRIMARY);  checkMode("/ignite/primary/",PRIMARY);  checkMode("/ignite/primary/subfolder",PRIMARY);  checkMode("/ignite/primary/folder/file.txt",PRIMARY);  checkMode("/ignite/primaryx",DUAL_ASYNC);  checkMode("/ignite/primaryx/",DUAL_ASYNC);  checkMode("/ignite/primaryx/subfolder",DUAL_ASYNC);  checkMode("/ignite/primaryx/folder/file.txt",DUAL_ASYNC);}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN) private void recorderEncoderLoop(MediaCodec codec,SpeechRecord speechRecord){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    codec.start();    ByteBuffer[] codecInputBuffers=codec.getInputBuffers();    ByteBuffer[] codecOutputBuffers=codec.getOutputBuffers();    Log.i("input buffers " + codecInputBuffers.length + "; output buffers: "+ codecOutputBuffers.length);    boolean doneSubmittingInput=false;    int numRetriesDequeueOutputBuffer=0;    int index;    while (true) {      if (!doneSubmittingInput) {        index=codec.dequeueInputBuffer(DEQUEUE_TIMEOUT);        if (index >= 0) {          int size=queueInputBuffer(codec,codecInputBuffers,index,speechRecord);          if (size == -1) {            codec.queueInputBuffer(index,0,0,0,MediaCodec.BUFFER_FLAG_END_OF_STREAM);            Log.i("enc: in: EOS");            doneSubmittingInput=true;          } else {            Log.i("enc: in: " + size);            mNumBytesSubmitted+=size;          }        } else {          Log.i("enc: in: timeout, will try again");        }      }      MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();      index=codec.dequeueOutputBuffer(info,DEQUEUE_TIMEOUT);      Log.i("enc: out: flags/index: " + info.flags + "/"+ index);      if (index == MediaCodec.INFO_TRY_AGAIN_LATER) {        Log.i("enc: out: INFO_TRY_AGAIN_LATER: " + numRetriesDequeueOutputBuffer);        if (++numRetriesDequeueOutputBuffer > MAX_NUM_RETRIES_DEQUEUE_OUTPUT_BUFFER) {          break;        }      } else       if (index == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {        MediaFormat format=codec.getOutputFormat();        Log.i("enc: out: INFO_OUTPUT_FORMAT_CHANGED: " + format.toString());      } else       if (index == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {        codecOutputBuffers=codec.getOutputBuffers();        Log.i("enc: out: INFO_OUTPUT_BUFFERS_CHANGED");      } else {        dequeueOutputBuffer(codec,codecOutputBuffers,index,info);        mNumBytesDequeued+=info.size;        if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {          Log.i("enc: out: EOS");          break;        }      }    }    codec.stop();    codec.release();  }}  }
class C{  public HttpMethodInfoBuilder httpResourceModel(HttpResourceModel httpResourceModel){  this.httpResourceModel=httpResourceModel;  return this;}  }
class C{  public RatTerm(RatNum c,int e){  coeff=c;  expt=e;}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.LocaleType buildLocaleType(org.smpte_ra.schemas.st2067_2_2016.UserTextType annotationText,List<String> languages,List<String> regions,List<org.smpte_ra.schemas.st2067_2_2016.ContentMaturityRatingType> contentMaturityRatings){  org.smpte_ra.schemas.st2067_2_2016.LocaleType localeType=new org.smpte_ra.schemas.st2067_2_2016.LocaleType();  localeType.setAnnotation(annotationText);  org.smpte_ra.schemas.st2067_2_2016.LocaleType.LanguageList languageList=new org.smpte_ra.schemas.st2067_2_2016.LocaleType.LanguageList();  languageList.getLanguage().addAll(languages);  localeType.setLanguageList(languageList);  org.smpte_ra.schemas.st2067_2_2016.LocaleType.RegionList regionList=new org.smpte_ra.schemas.st2067_2_2016.LocaleType.RegionList();  regionList.getRegion().addAll(regions);  localeType.setRegionList(regionList);  org.smpte_ra.schemas.st2067_2_2016.LocaleType.ContentMaturityRatingList contentMaturityRatingList=new org.smpte_ra.schemas.st2067_2_2016.LocaleType.ContentMaturityRatingList();  contentMaturityRatingList.getContentMaturityRating().addAll(contentMaturityRatings);  return localeType;}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  public Token dup(){  Token token=new Token(this.type,this.text,this.startLine,this.startColumn);  token.setMeaning(this.meaning);  return token;}  }
class C{  private void provideScreenStateChangeFeedback(int feedbackIndex){switch (mProvidedFeedbackType) {case AccessibilityServiceInfo.FEEDBACK_SPOKEN:    String utterance=generateScreenOnOrOffUtternace(feedbackIndex);  mHandler.obtainMessage(MESSAGE_SPEAK,utterance).sendToTarget();return;case AccessibilityServiceInfo.FEEDBACK_AUDIBLE:mHandler.obtainMessage(MESSAGE_PLAY_EARCON,feedbackIndex,0).sendToTarget();return;case AccessibilityServiceInfo.FEEDBACK_HAPTIC:mHandler.obtainMessage(MESSAGE_VIBRATE,feedbackIndex,0).sendToTarget();return;default :throw new IllegalStateException("Unexpected feedback type " + mProvidedFeedbackType);}}  }
class C{  public synchronized int readInTestFromSUT(){  if (remoteBuffer.isEmpty()) {    return -1;  }  return remoteBuffer.poll() & 0xFF;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void drawDomainCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,int datasetIndex,Comparable rowKey,Comparable columnKey,Stroke stroke,Paint paint){  CategoryDataset dataset=getDataset(datasetIndex);  CategoryAxis axis=getDomainAxisForDataset(datasetIndex);  CategoryItemRenderer renderer=getRenderer(datasetIndex);  Line2D line;  if (orientation == PlotOrientation.VERTICAL) {    double xx=renderer.getItemMiddle(rowKey,columnKey,dataset,axis,dataArea,RectangleEdge.BOTTOM);    line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());  } else {    double yy=renderer.getItemMiddle(rowKey,columnKey,dataset,axis,dataArea,RectangleEdge.LEFT);    line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);  }  g2.setStroke(stroke);  g2.setPaint(paint);  g2.draw(line);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.439 -0500",hash_original_method="EC675B353AC97965B98DB90ABCC2C0E4",hash_generated_method="44F0A08A25047D89681036C930DBA04C") @Override public void receiveChangeCipherSpec(){  if (isResuming) {    if (serverHello == null) {      unexpectedMessage();    }  } else   if (clientFinished == null) {    unexpectedMessage();  }  changeCipherSpecReceived=true;}  }
class C{  public IndexMetaData upgradeIndexMetaData(IndexMetaData indexMetaData){  if (isUpgraded(indexMetaData)) {    return indexMetaData;  }  checkSupportedVersion(indexMetaData);  IndexMetaData newMetaData=upgradeLegacyRoutingSettings(indexMetaData);  newMetaData=addDefaultUnitsIfNeeded(newMetaData);  checkMappingsCompatibility(newMetaData);  newMetaData=upgradeSettings(newMetaData);  newMetaData=markAsUpgraded(newMetaData);  return newMetaData;}  }
class C{  public void testBuildTextFromElementTrim(){  LOGGER.debug("buildTextFromElementTrim");  Element element=new Element(Tag.valueOf("div"),"");  element.text("   test   ");  SimpleTextElementBuilder instance=new SimpleTextElementBuilder();  String expResult="test";  String result=instance.buildTextFromElement(element);  assertEquals(expResult,result);}  }
class C{  public boolean noColumnsSelected(){  return selectedColumns != null && selectedColumns.isEmpty();}  }
class C{  private void removeListeners(){  debugger.removeListener(m_debuggerListener);  breakpointManager.removeListener(m_breakpointManagerListener);  debugger.getProcessManager().removeListener(m_processListener);}  }
class C{  @Override public List<URIMetadataNode> query(QueryParams query){  List<URIMetadataNode> docs=new ArrayList<URIMetadataNode>();  Collection<String> remotecorename=new ArrayList<String>();  remotecorename.add(corename);  ModifiableSolrParams msp=new SolrQuery(query.getQueryGoal().getQueryString(false));  msp.add(CommonParams.QT,"/");  msp.add(CommonParams.ROWS,Integer.toString(query.itemsPerPage));  try {    RemoteInstance instance=new RemoteInstance(baseurl,remotecorename,corename,20000);    try {      SolrConnector solrConnector=new RemoteSolrConnector(instance,false,null);      try {        this.lastaccesstime=System.currentTimeMillis();        SolrDocumentList docList=solrConnector.getDocumentListByParams(msp);        for (        SolrDocument doc : docList) {          try {            URIMetadataNode anew=toYaCySchema(doc);            docs.add(anew);          } catch (          MalformedURLException ex) {          }        }      } catch (      IOException|SolrException e) {      } finally {        solrConnector.close();      }    } catch (    Throwable ee) {    } finally {      instance.close();    }  } catch (  IOException eee) {  }  return docs;}  }
class C{  private void logRequest(HttpURLConnection connection,String postBody){  String requestLog="Request URL : " + connection.getURL() + "\n";  requestLog+="Request Method : " + connection.getRequestMethod() + "\n";  requestLog+="Request Headers : " + "\n";  for (  Map.Entry<String,List<String>> header : connection.getRequestProperties().entrySet()) {    for (    String value : header.getValue()) {      requestLog+="\t\t" + header.getKey() + ":"+ value+ "\n";    }  }  if (connection.getRequestMethod().equalsIgnoreCase("post")) {    requestLog+="Body : " + postBody + "\n";  }  Log.i(TAG,requestLog);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.646 -0500",hash_original_method="25276A1ACE97D138BB17C9052B223D37",hash_generated_method="4E4B67595C9AA38B501A2B2B2088EE51") private boolean isViewDescendantOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewDescendantOf((View)theParent,parent);}  }
class C{  @Override public boolean isSelfSigned(){  if (selfSigned == null) {    final String n1=x509Certificate.getSubjectX500Principal().getName(X500Principal.CANONICAL);    final String n2=x509Certificate.getIssuerX500Principal().getName(X500Principal.CANONICAL);    selfSigned=n1.equals(n2);  }  return selfSigned;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1352) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static void main(String... args) throws Exception {  new GenerateDoc().run(args);}  }
class C{  protected void update(){  Attr attr=element.getAttributeNodeNS(namespaceURI,localName);  if (attr == null) {    baseVal=defaultValue;  } else {    String v=attr.getValue();    int len=v.length();    if (allowPercentage && len > 1 && v.charAt(len - 1) == '%') {      baseVal=.01f * Float.parseFloat(v.substring(0,len - 1));    } else {      baseVal=Float.parseFloat(v);    }  }  valid=true;}  }
class C{  static boolean isVMMultidexCapable(String versionString){  boolean isMultidexCapable=false;  if (versionString != null) {    Matcher matcher=Pattern.compile("(\\d+)\\.(\\d+)(\\.\\d+)?").matcher(versionString);    if (matcher.matches()) {      try {        int major=Integer.parseInt(matcher.group(1));        int minor=Integer.parseInt(matcher.group(2));        isMultidexCapable=(major > VM_WITH_MULTIDEX_VERSION_MAJOR) || ((major == VM_WITH_MULTIDEX_VERSION_MAJOR) && (minor >= VM_WITH_MULTIDEX_VERSION_MINOR));      } catch (      NumberFormatException e) {      }    }  }  Log.i(TAG,"VM with version " + versionString + (isMultidexCapable ? " has multidex support" : " does not have multidex support"));  return isMultidexCapable;}  }
class C{  public static BlockFace notchToBlockFace(int notch){switch (notch) {case 0:    return BlockFace.DOWN;case 1:  return BlockFace.UP;case 2:return BlockFace.NORTH;case 3:return BlockFace.SOUTH;case 4:return BlockFace.WEST;case 5:return BlockFace.EAST;default :return BlockFace.SELF;}}  }
class C{  public MixedBicScore(DataSet dataSet){  if (dataSet == null) {    throw new NullPointerException();  }  setDataSet(dataSet);  this.variables=dataSet.getVariables();  this.sampleSize=dataSet.getNumRows();  this.penaltyDiscount=4;  logn=Math.log(sampleSize);}  }
class C{  protected Profile(File path,boolean isReadable) throws IOException {  this.path=path;  if (isReadable) {    this.readProfile();  }}  }
class C{  public FileInfo(String name){  super();  this.name=name;}  }
class C{  public boolean containsKey(float key){  return contains(key);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public BasicRepeatableCraftingRecipeItem(final CraftingRecipeItem item,final BiFunction<ItemStack,List<ItemStack>,ItemStack> transformFunc,final BiFunction<ItemStack,CraftingGrid,ItemStack> transformAdvFunc){  this.item=item;  this.transformFunc=transformFunc;  this.transformAdvFunc=transformAdvFunc;}  }
class C{  protected static void autoBoxing(MethodVisitor mv,Type fieldType){switch (fieldType.getSort()) {case Type.BOOLEAN:    mv.visitMethodInsn(INVOKESTATIC,"java/lang/Boolean","valueOf","(Z)Ljava/lang/Boolean;");  break;case Type.BYTE:mv.visitMethodInsn(INVOKESTATIC,"java/lang/Byte","valueOf","(B)Ljava/lang/Byte;");break;case Type.CHAR:mv.visitMethodInsn(INVOKESTATIC,"java/lang/Character","valueOf","(C)Ljava/lang/Character;");break;case Type.SHORT:mv.visitMethodInsn(INVOKESTATIC,"java/lang/Short","valueOf","(S)Ljava/lang/Short;");break;case Type.INT:mv.visitMethodInsn(INVOKESTATIC,"java/lang/Integer","valueOf","(I)Ljava/lang/Integer;");break;case Type.FLOAT:mv.visitMethodInsn(INVOKESTATIC,"java/lang/Float","valueOf","(F)Ljava/lang/Float;");break;case Type.LONG:mv.visitMethodInsn(INVOKESTATIC,"java/lang/Long","valueOf","(J)Ljava/lang/Long;");break;case Type.DOUBLE:mv.visitMethodInsn(INVOKESTATIC,"java/lang/Double","valueOf","(D)Ljava/lang/Double;");break;}}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(line.toString().getBytes(cs));    }    output.write(lineEnding.getBytes(cs));  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  short season=0;  short episode=0;  if (curNumberOfParameters == 18) {    episode=(short)getInt(stack);    season=(short)getInt(stack);  }  long oad=getLong(stack);  String lang=getString(stack);  String extid=getString(stack);  String[] bonus=getStringList(stack);  String pr=getString(stack);  String year=getString(stack);  String[] ers=getStringList(stack);  String rated=getString(stack);  String[] roles=getStringList(stack);  byte[] broles=new byte[roles.length];  for (int i=0; i < broles.length; i++)   broles[i]=(byte)Show.getRoleForString(roles[i]);  String[] peeps=getStringList(stack);  String[] cats;  if (curNumberOfParameters == 18) {    cats=getStringList(stack);  } else {    cats=new String[2];    cats[1]=getString(stack);    cats[0]=getString(stack);  }  long dur=getLong(stack);  String desc=getString(stack);  String eps=getString(stack);  boolean first=evalBool(stack.pop());  String tit=getString(stack);  return Wizard.getInstance().addShow(tit,tit,eps,desc,dur,cats,peeps,broles,rated,ers,year,pr,bonus,extid,lang,oad,0,season,episode,false,(byte)0,(byte)0,(byte)0,(byte)0,(byte)0,(byte)0,(byte)0,(byte)0);}  }
class C{  public void addProperty(Property property){  getProperties().add(property);}  }
class C{  public void close(){  goOffline();  Iterator i=getNames().iterator();  while (i.hasNext()) {    String n=(String)i.next();    if (!n.equals(name))     destroyAgent(n);  }  clm.cleanup(0);  boxes=null;}  }
class C{  @Override @SuppressWarnings({"SleepWhileInLoop","UseSpecificCatch","BroadCatchBlock","TooBroadCatch"}) public final void run(){  doCheckpoint=false;  final long maxSpinMillis=context.getValue(OperatorContext.SPIN_MILLIS);  long spinMillis=0;  final boolean handleIdleTime=operator instanceof IdleTimeHandler;  int totalQueues=inputs.size();  int regularQueues=totalQueues;  for (  String portName : inputs.keySet()) {    if (isInputPortConnectedToDelayOperator(portName)) {      regularQueues--;    }  }  ArrayList<Map.Entry<String,SweepableReservoir>> activeQueues=new ArrayList<>();  activeQueues.addAll(inputs.entrySet());  int expectingBeginWindow=activeQueues.size();  int receivedEndWindow=0;  long firstWindowId=-1;  calculateNextCheckpointWindow();  TupleTracker tracker;  LinkedList<TupleTracker> resetTupleTracker=new LinkedList<>();  try {    do {      Iterator<Map.Entry<String,SweepableReservoir>> buffers=activeQueues.iterator();      activequeue:       while (buffers.hasNext()) {        Map.Entry<String,SweepableReservoir> activePortEntry=buffers.next();        SweepableReservoir activePort=activePortEntry.getValue();        Tuple t=activePort.sweep();        if (t != null) {          spinMillis=0;          boolean delay=(operator instanceof Operator.DelayOperator);          long windowAhead=0;          if (delay) {            windowAhead=WindowGenerator.getAheadWindowId(t.getWindowId(),firstWindowMillis,windowWidthMillis,1);          }switch (t.getType()) {case BEGIN_WINDOW:            if (expectingBeginWindow == totalQueues) {              if (isInputPortConnectedToDelayOperator(activePortEntry.getKey())) {                continue;              }              activePort.remove();              expectingBeginWindow--;              receivedEndWindow=0;              currentWindowId=t.getWindowId();              if (delay) {                if (WindowGenerator.getBaseSecondsFromWindowId(windowAhead) > t.getBaseSeconds()) {                  Tuple resetWindowTuple=new ResetWindowTuple(windowAhead);                  for (int s=sinks.length; s-- > 0; ) {                    sinks[s].put(resetWindowTuple);                  }                  controlTupleCount++;                }                t.setWindowId(windowAhead);              }              for (int s=sinks.length; s-- > 0; ) {                sinks[s].put(t);              }              controlTupleCount++;              context.setWindowsFromCheckpoint(nextCheckpointWindowCount--);              if (applicationWindowCount == 0) {                insideWindow=true;                operator.beginWindow(currentWindowId);              }            } else             if (t.getWindowId() == currentWindowId) {              activePort.remove();              expectingBeginWindow--;            } else {              buffers.remove();              String port=activePortEntry.getKey();              if (PROCESSING_MODE == ProcessingMode.AT_MOST_ONCE) {                if (t.getWindowId() < currentWindowId) {                  Sink<Object> sink=activePort.setSink(Sink.BLACKHOLE);                  deferredInputConnections.add(0,new DeferredInputConnection(port,activePort));                  WindowIdActivatedReservoir wiar=new WindowIdActivatedReservoir(port,activePort,currentWindowId);                  wiar.setSink(sink);                  inputs.put(port,wiar);                  activeQueues.add(new AbstractMap.SimpleEntry<String,SweepableReservoir>(port,wiar));                  break activequeue;                } else {                  expectingBeginWindow--;                  if (++receivedEndWindow == totalQueues) {                    processEndWindow(null);                    activeQueues.addAll(inputs.entrySet());                    expectingBeginWindow=activeQueues.size();                    break activequeue;                  }                }              } else {                logger.error("Catastrophic Error: Out of sequence {} tuple {} on port {} while expecting {}",t.getType(),Codec.getStringWindowId(t.getWindowId()),port,Codec.getStringWindowId(currentWindowId));                System.exit(2);              }            }          break;case END_WINDOW:        buffers.remove();      if (t.getWindowId() == currentWindowId) {        activePort.remove();        endWindowDequeueTimes.put(activePort,System.currentTimeMillis());        if (++receivedEndWindow == totalQueues) {          assert (activeQueues.isEmpty());          if (delay) {            t.setWindowId(windowAhead);          }          processEndWindow(t);          activeQueues.addAll(inputs.entrySet());          expectingBeginWindow=activeQueues.size();          break activequeue;        }      }    break;case CHECKPOINT:  activePort.remove();long checkpointWindow=t.getWindowId();if (lastCheckpointWindowId < checkpointWindow) {dagCheckpointOffsetCount=0;if (PROCESSING_MODE == ProcessingMode.EXACTLY_ONCE) {  lastCheckpointWindowId=checkpointWindow;} else if (!doCheckpoint) {  if (checkpointWindowCount == 0) {    checkpoint(checkpointWindow);    lastCheckpointWindowId=checkpointWindow;  } else {    doCheckpoint=true;  }}if (!delay) {  for (int s=sinks.length; s-- > 0; ) {    sinks[s].put(t);  }  controlTupleCount++;}}break;case RESET_WINDOW:activePort.remove();if (isInputPortConnectedToDelayOperator(activePortEntry.getKey())) {break;}buffers.remove();int baseSeconds=t.getBaseSeconds();tracker=null;for (Iterator<TupleTracker> trackerIterator=resetTupleTracker.iterator(); trackerIterator.hasNext(); ) {tracker=trackerIterator.next();if (tracker.tuple.getBaseSeconds() == baseSeconds) {break;}}if (tracker == null) {tracker=new TupleTracker(t,regularQueues);resetTupleTracker.add(tracker);}int trackerIndex=0;while (trackerIndex < tracker.ports.length) {if (tracker.ports[trackerIndex] == null) {tracker.ports[trackerIndex++]=activePort;break;} else if (tracker.ports[trackerIndex] == activePort) {break;}trackerIndex++;}if (trackerIndex == regularQueues) {Iterator<TupleTracker> trackerIterator=resetTupleTracker.iterator();while (trackerIterator.hasNext()) {if (trackerIterator.next().tuple.getBaseSeconds() <= baseSeconds) {trackerIterator.remove();}}if (!delay) {for (int s=sinks.length; s-- > 0; ) {sinks[s].put(t);}controlTupleCount++;}if (!activeQueues.isEmpty()) {for (Map.Entry<String,SweepableReservoir> entry : activeQueues) {if (!isInputPortConnectedToDelayOperator(entry.getKey())) {assert (false);}}activeQueues.clear();}activeQueues.addAll(inputs.entrySet());expectingBeginWindow=activeQueues.size();if (firstWindowId == -1) {if (delay) {for (int s=sinks.length; s-- > 0; ) {sinks[s].put(t);}controlTupleCount++;fabricateFirstWindow((Operator.DelayOperator)operator,windowAhead);}firstWindowId=t.getWindowId();}break activequeue;}break;case END_STREAM:activePort.remove();buffers.remove();if (firstWindowId == -1) {if (delay) {fabricateFirstWindow((Operator.DelayOperator)operator,windowAhead);}firstWindowId=t.getWindowId();}for (Iterator<Entry<String,SweepableReservoir>> it=inputs.entrySet().iterator(); it.hasNext(); ) {Entry<String,SweepableReservoir> e=it.next();if (e.getValue() == activePort) {if (!descriptor.inputPorts.isEmpty()) {descriptor.inputPorts.get(e.getKey()).component.setConnected(false);}it.remove();Iterator<DeferredInputConnection> dici=deferredInputConnections.iterator();while (dici.hasNext()) {DeferredInputConnection dic=dici.next();if (e.getKey().equals(dic.portname)) {connectInputPort(dic.portname,dic.reservoir);dici.remove();activeQueues.add(new AbstractMap.SimpleEntry<>(dic.portname,dic.reservoir));break activequeue;}}break;}}expectingBeginWindow--;regularQueues--;totalQueues--;boolean break_activequeue=false;if (regularQueues == 0) {alive=false;break_activequeue=true;} else if (activeQueues.isEmpty()) {assert (!inputs.isEmpty());processEndWindow(null);activeQueues.addAll(inputs.entrySet());expectingBeginWindow=activeQueues.size();break_activequeue=true;}Tuple tuple=null;for (Iterator<TupleTracker> trackerIterator=resetTupleTracker.iterator(); trackerIterator.hasNext(); ) {tracker=trackerIterator.next();trackerIndex=0;while (trackerIndex < tracker.ports.length) {if (tracker.ports[trackerIndex] == activePort) {SweepableReservoir[] ports=new SweepableReservoir[regularQueues];System.arraycopy(tracker.ports,0,ports,0,trackerIndex);if (trackerIndex < regularQueues) {System.arraycopy(tracker.ports,trackerIndex + 1,ports,trackerIndex,tracker.ports.length - trackerIndex - 1);}tracker.ports=ports;break;} else if (tracker.ports[trackerIndex] == null) {if (trackerIndex == regularQueues) {if (tuple == null || tuple.getBaseSeconds() < tracker.tuple.getBaseSeconds()) {tuple=tracker.tuple;}trackerIterator.remove();}break;} else {tracker.ports=Arrays.copyOf(tracker.ports,regularQueues);}trackerIndex++;}}if (tuple != null && !delay) {for (int s=sinks.length; s-- > 0; ) {sinks[s].put(tuple);}controlTupleCount++;}if (break_activequeue) {break activequeue;}break;default :throw new UnhandledException("Unrecognized Control Tuple",new IllegalArgumentException(t.toString()));}}}if (activeQueues.isEmpty() && alive) {logger.error("Catastrophic Error: Invalid State - the operator blocked forever!");System.exit(2);} else {boolean need2sleep=true;for (Map.Entry<String,SweepableReservoir> cb : activeQueues) {need2sleep=cb.getValue().isEmpty();if (!need2sleep) {spinMillis=0;break;}}if (need2sleep) {if (handleIdleTime && insideWindow) {((IdleTimeHandler)operator).handleIdleTime();} else {Thread.sleep(spinMillis);spinMillis=Math.min(maxSpinMillis,spinMillis + 1);}}}} while (alive);} catch (ShutdownException se) {logger.debug("Shutdown requested by the operator when alive = {}.",alive);alive=false;}catch (Throwable cause) {synchronized (this) {if (alive) {throw Throwables.propagate(cause);}}Throwable rootCause=cause;while (rootCause != null) {if (rootCause instanceof InterruptedException) {break;}rootCause=rootCause.getCause();}if (rootCause == null) {throw Throwables.propagate(cause);} else {logger.debug("Ignoring InterruptedException after shutdown",cause);}}if (insideWindow && !shutdown) {operator.endWindow();endWindowEmitTime=System.currentTimeMillis();if (++applicationWindowCount == APPLICATION_WINDOW_COUNT) {applicationWindowCount=0;}if (++checkpointWindowCount == CHECKPOINT_WINDOW_COUNT) {checkpointWindowCount=0;if (doCheckpoint || PROCESSING_MODE == ProcessingMode.EXACTLY_ONCE) {checkpoint(currentWindowId);}}ContainerStats.OperatorStats stats=new ContainerStats.OperatorStats();fixEndWindowDequeueTimesBeforeDeactivate();reportStats(stats,currentWindowId);stats.metrics=collectMetrics();handleRequests(currentWindowId);}}  }
class C{  public static double distance(BayesIm firstBn,BayesIm secondBn){  if (!firstBn.getBayesPm().equals(secondBn.getBayesPm())) {    throw new IllegalArgumentException("BayesPms must be equal.");  }  Graph graph=firstBn.getBayesPm().getDag();  Node[] nodes=new Node[graph.getNumNodes()];  Iterator<Node> it=graph.getNodes().iterator();  for (int i=0; i < nodes.length; i++) {    nodes[i]=it.next();  }  double sum=0.0;  for (int i=0; i < nodes.length; i++) {    int numRows=firstBn.getNumRows(i);    for (int j=0; j < numRows; j++) {      int numCols=firstBn.getNumColumns(i);      for (int k=0; k < numCols; k++) {        double diff=firstBn.getProbability(i,j,k) - secondBn.getProbability(i,j,k);        sum+=diff * diff;      }    }  }  return Math.sqrt(sum);}  }
class C{  public final int peepOrNull(){  return ((null != m_map) && (m_firstFree > 0)) ? m_map[m_firstFree - 1] : DTM.NULL;}  }
class C{  public static void notNull(Object obj,String message,Object... params) throws AssertException {  if (obj == null) {    throw new AssertException(ErrorCodeDef.IS_NULL_20006,message,params);  }}  }
class C{  public StatementRegressionTest(String name){  super(name);}  }
class C{  public Iterator iterator(){  return children().iterator();}  }
class C{  public boolean isSetScope(){  return this.scope != null;}  }
class C{  private static String translateSQL(String sql){  return translateSQL(sql,true);}  }
class C{  private boolean __reset(InetAddress inetAddress){  log.debug(Thread.currentThread().toString() + "##__reset(inetAddress=[" + inetAddress+ "]): "+ true);  String url=__getResetUrl(inetAddress);  EspBaseApiUtil.Post(url,null);  return true;}  }
class C{  private static int startsWithLenient(String s,String match,int minChars,boolean acceptTrailing){  if (s.charAt(0) != match.charAt(0)) {    return -1;  }  if (minChars == -1) {    minChars=match.length();  }  int sSz=s.length();  if (sSz < minChars) {    return -1;  }  int mSz=match.length();  int sIx=0;  for (int mIx=0; mIx < mSz; sIx++, mIx++) {    while (sIx < sSz && (s.charAt(sIx) == ' ' || s.charAt(sIx) == '_')) {      sIx++;    }    if (sIx >= sSz || s.charAt(sIx) != match.charAt(mIx)) {      return mIx >= minChars && (acceptTrailing || sIx >= sSz) && (sIx >= sSz || s.charAt(sIx - 1) == ' ') ? sIx : -1;    }  }  return sIx >= sSz || acceptTrailing || s.charAt(sIx) == ' ' ? sIx : -1;}  }
class C{  @Override public void start(Vertx vertx,ServicePublisher publisher,JsonObject configuration,Future<Void> completion){  this.publisher=publisher;  this.vertx=vertx;  DockerClientConfig.DockerClientConfigBuilder builder=DockerClientConfig.createDefaultConfigBuilder();  String dockerCertPath=configuration.getString("docker-cert-path");  String dockerCfgPath=configuration.getString("docker-cfg-path");  String email=configuration.getString("docker-registry-email");  String password=configuration.getString("docker-registry-password");  String username=configuration.getString("docker-registry-username");  String host=configuration.getString("docker-host");  boolean tlsVerify=configuration.getBoolean("docker-tls-verify",true);  String registry=configuration.getString("docker-registry-url","https://index.docker.io/v1/");  String version=configuration.getString("version");  if (dockerCertPath != null) {    builder.withDockerCertPath(dockerCertPath);  }  if (dockerCfgPath != null) {    builder.withDockerConfig(dockerCfgPath);  }  if (email != null) {    builder.withRegistryEmail(email);  }  if (password != null) {    builder.withRegistryPassword(password);  }  if (username != null) {    builder.withRegistryUsername(username);  }  if (host != null) {    builder.withDockerHost(host);  }  if (registry != null) {    builder.withRegistryUrl(registry);  }  if (version != null) {    builder.withApiVersion(version);  }  builder.withDockerTlsVerify(tlsVerify);  DockerClientConfig config=builder.build();  if (config.getDockerHost().getScheme().equalsIgnoreCase("unix")) {    try {      this.host=InetAddress.getLocalHost().getHostAddress();    } catch (    UnknownHostException e) {      completion.fail(e);    }  } else {    this.host=config.getDockerHost().getHost();  }  client=DockerClientBuilder.getInstance(config).build();  long period=configuration.getLong("scan-period",3000L);  if (period > 0) {    timer=vertx.setPeriodic(period,null);  }  scan(completion);}  }
class C{  private void sendMessageConnectedToUI(){  Log.i("medtronicCGMService","Connected");  if (!connectedSent) {    log.debug("Send Message Connected to UI");    connectedSent=true;  }  for (int i=mClients.size() - 1; i >= 0; i--) {    try {      Message mSend=null;      mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_CGM_USB_GRANTED);      mClients.get(i).send(mSend);    } catch (    RemoteException e) {      mClients.remove(i);    }  }}  }
class C{  public BulkUserImportException(){  super();}  }
class C{  @SuppressWarnings("UnnecessaryLocalVariable") public boolean rayThroughScreenPoint(float x,float y,Line result){  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WorldWindow","rayThroughScreenPoint","missingResult"));  }  double sx=x;  double sy=this.getHeight() - y;  this.computeViewingTransform(this.scratchProjection,this.scratchModelview);  this.scratchProjection.multiplyByMatrix(this.scratchModelview).invert();  if (this.scratchProjection.unProject(sx,sy,this.viewport,result.origin,result.direction)) {    result.direction.subtract(result.origin).normalize();    return true;  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_AFTER_CODE_1__CODE_LANG_1:    return codeLang_1 != null && !codeLang_1.isEmpty();case UmplePackage.ANONYMOUS_AFTER_CODE_1__CODE_LANGS_1:  return codeLangs_1 != null && !codeLangs_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private String[] parsePropertyName(String name){  List<String> propName=new ArrayList<String>(5);  StringTokenizer tokenizer=new StringTokenizer(name,".");  while (tokenizer.hasMoreTokens()) {    propName.add(tokenizer.nextToken());  }  return propName.toArray(new String[propName.size()]);}  }
class C{  public final void notifyOnChange(final boolean notifyOnChange){  this.notifyOnChange=notifyOnChange;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public ClipInfo(int inAngleId,String inClipName,String codecId,int inStcId){  if (!"M2TS".equals(codecId))   throw new IllegalArgumentException("Invalid BluRay Structure: codec ID for PlayList Item should be M2TS and we found: " + codecId);  angleId=inAngleId;  clipName=inClipName;  stcId=inStcId;}  }
class C{  static void validateCreateCommandContactsAndNameservers(Create command,String tld) throws EppException {  verifyNotInPendingDelete(command.getContacts(),command.getRegistrant(),command.getNameservers());  validateContactsHaveTypes(command.getContacts());  validateRegistrantAllowedOnTld(tld,command.getRegistrantContactId());  validateNoDuplicateContacts(command.getContacts());  validateRequiredContactsPresent(command.getRegistrant(),command.getContacts());  Set<String> fullyQualifiedHostNames=nullToEmpty(command.getNameserverFullyQualifiedHostNames());  validateNameserversCountForTld(tld,fullyQualifiedHostNames.size());  validateNameserversAllowedOnTld(tld,fullyQualifiedHostNames);}  }
class C{  public Matrix4x3f arcball(float radius,float centerX,float centerY,float centerZ,float angleX,float angleY){  return arcball(radius,centerX,centerY,centerZ,angleX,angleY,this);}  }
class C{  public void addNode(PNode node){  outlinedObjects.addChild(node);  if (node instanceof SynapseGroupNode) {    node.lowerToBottom();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.226 -0500",hash_original_method="804DBCB0CD99C171EB9C2BE85EFE707F",hash_generated_method="F945DE3E757AC7DD3DC8584B1CB11B30") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) public void addCopyStreamListener(CopyStreamListener listener){  internalListeners.addListener(listener);  if (listener != null) {    bytesTransferred(DSUtils.FAKE_INT,DSUtils.FAKE_INT,DSUtils.FAKE_INT);    CopyStreamEvent event=new CopyStreamEvent(this,DSUtils.FAKE_INT,DSUtils.FAKE_INT,DSUtils.FAKE_INT);    bytesTransferred(event);  }}  }
class C{  public void closeServer(){  MasterServices.getInstance().stopServices();}  }
class C{  public static void startWaveFilterForResult(final Activity activity,WaveDrawable waveDrawable,final Intent intent,final int requestCode,int backgroundColor){  intent.putExtra(IntentKey.BACKGROUND_COLOR,backgroundColor);  startWaveFilterForResult(activity,waveDrawable,intent,requestCode);}  }
class C{  public void clear(){  if (Log.isLoggingOn())   Log.logLine("Clearing sequence collection.");  this.sequenceMap=new LinkedHashMap<>();  this.typeSet=new SubTypeSet(false);  sequenceCount=0;  checkRep();}  }
class C{  public String func(Long arg){  called=true;  actualValue=arg;  return "called";}  }
class C{  private void calcCoordinates(){  if ((CTM[1][0] == 0) & ((CTM[0][1] == 0))) {    i_x=(int)CTM[2][0];    i_y=(int)CTM[2][1];    i_w=(int)CTM[0][0];    i_h=(int)CTM[1][1];    if (i_w < 0) {      i_w=-i_w;    }    if (i_h < 0) {      i_h=-i_h;    }  } else {    i_w=(int)(Math.sqrt((CTM[0][0] * CTM[0][0]) + (CTM[0][1] * CTM[0][1])));    i_h=(int)(Math.sqrt((CTM[1][1] * CTM[1][1]) + (CTM[1][0] * CTM[1][0])));    if ((CTM[1][0] > 0) & (CTM[0][1] < 0)) {      i_x=(int)(CTM[2][0]);      i_y=(int)(CTM[2][1] + CTM[0][1]);    } else     if ((CTM[1][0] < 0) & (CTM[0][1] > 0)) {      i_x=(int)(CTM[2][0] + CTM[1][0]);      i_y=(int)(CTM[2][1]);    } else     if ((CTM[1][0] > 0) & (CTM[0][1] > 0)) {      i_x=(int)(CTM[2][0]);      i_y=(int)(CTM[2][1]);    } else {      i_x=(int)(CTM[2][0]);      i_y=(int)(CTM[2][1]);    }  }  if (CTM[1][1] < 0) {    i_y-=i_h;  }  if (CTM[0][0] < 0) {    i_x-=i_w;  }}  }
class C{  public void write(Link link) throws IOException {  write(link.dos);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void writeDocument(Output out,Document doc){  out.writeXML(doc);}  }
class C{  public static char[] join(char[]... arrays){  if (arrays.length == 0) {    return EMPTY_CHARS;  }  if (arrays.length == 1) {    return arrays[0];  }  if (arrays.length == 2) {    return join(arrays[0],arrays[1]);  }  char[] notNull=null;  int finalSize=0;  int nullArrays=0;  CharArrayList list=new CharArrayList(arrays.length * 10);  for (  char[] array : arrays) {    if ((array == null) || (array.length == 0)) {      nullArrays++;    } else {      notNull=array;      finalSize+=array.length;      list.addElements(list.size(),array);    }  }  if (nullArrays == arrays.length) {    return EMPTY_CHARS;  }  if (nullArrays == (arrays.length - 1)) {    return notNull;  }  return list.toArray(new char[list.size()]);}  }
class C{  protected void removeAltaUdocExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String idRevDoc=request.getParameter("idRevDoc");  ServiceRepository services=getServiceRepository(request);  GestionPrestamosBI prestamosService=services.lookupGestionPrestamosBI();  RevisionDocumentacionVO revDocVO=prestamosService.getRevisionDocumentacionById(idRevDoc);  SecurityManagerBase securityManager=SecurityManagerLocator.loockupTransferenciasSM();  try {    securityManager.check(TransferenciasSecurityManager.ELABORACION_INGRESOS_DIRECTOS,getServiceClient(request));    if (revDocVO != null && revDocVO.getIdAlta() != null) {      GestionRelacionesEntregaBI relacionBI=services.lookupGestionRelacionesBI();      relacionBI.eliminarIngresosDirectos(new String[]{revDocVO.getIdAlta()});      revDocVO.setIdAlta(null);      prestamosService.actualizarRevisionDocumentacion(revDocVO);    } else {      ActionErrors errors=new ActionErrors();      errors.add(ActionErrors.GLOBAL_ERROR,new ActionError(PrestamosConstants.ERROR_ALTA_UDOC_NO_EXISTE));      ErrorsTag.saveErrors(request,errors);    }  } catch (  ActionNotAllowedException e) {    ActionErrors errors=new ActionErrors();    errors.add(ActionErrors.GLOBAL_ERROR,new ActionError(PrestamosConstants.ERROR_ALTA_UDOC_NO_ABIERTA));    ErrorsTag.saveErrors(request,errors);  }catch (  SecurityException e) {    ActionErrors errors=new ActionErrors();    errors.add(ActionErrors.GLOBAL_ERROR,new ActionError(PrestamosConstants.ERROR_ALTA_UDOC_USUARIO_SIN_PERMISOS));    ErrorsTag.saveErrors(request,errors);  }  setReturnActionFordward(request,mapping.findForward("listado_revisionDoc"));}  }
class C{  public byte[] serializeBytes(){  return serializeBytes(CUR_VERSION);}  }
class C{  public void generateAtom(XmlWriter w,ExtensionProfile extProfile) throws IOException {  generateStartElement(w,Namespaces.atomNs,"source",null,null);  generateInnerAtom(w,extProfile);  generateExtensions(w,extProfile);  w.endElement(Namespaces.atomNs,"source");}  }
class C{  public void testCrossSegmentsRobust(){  checkDistance("LINESTRING (0 0 0, 10000000 10000000 1 )","LINESTRING (0 0 1, 10000000 10000000 0 )",0,0.001);  checkDistance("LINESTRING (-10000 -10000 0, 10000 10000 1 )","LINESTRING (-10000 -10000 1, 10000 10000 0 )",0);  checkDistance("LINESTRING (-10000000 -10000000 0, 10000000 10000000 1 )","LINESTRING (-10000000 -10000000 1, 10000000 10000000 0 )",0,0.02);  checkDistance("LINESTRING (20000000 10000000 20, 10000000 20000000 10 )","LINESTRING (10000000 10000000 20, 20000000 20000000 10 )",0);}  }
class C{  OutbindRequest waitForRequest(long timeout) throws IllegalStateException, TimeoutException {  this.lock.lock();  try {    if (this.alreadyWaitForRequest) {      throw new IllegalStateException("waitForRequest(long) method already invoked");    } else     if (this.request == null) {      try {        this.requestCondition.await(timeout,TimeUnit.MILLISECONDS);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        throw new RuntimeException("waitForRequest was interrupted");      }    }    if (this.request != null) {      return this.request;    } else {      throw new TimeoutException("Waiting for outbind request take time too long");    }  }  finally {    this.alreadyWaitForRequest=true;    this.lock.unlock();  }}  }
class C{  public Boolean isRecommended(){  return recommended;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("bcq") @Valid BatchConsumpQueue batchConsumpQueue,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    batchConsumpQueue.setEndTs(DateConverter.stringToDate(batchConsumpQueue.getTableEndTS()));    batchConsumpQueue.setStartTs(DateConverter.stringToDate(batchConsumpQueue.getTableStartTS()));    batchConsumpQueue.setInsertTs(DateConverter.stringToDate(batchConsumpQueue.getTableInsertTS()));    if (batchConsumpQueue.getBatchMarking().isEmpty()) {      batchConsumpQueue.setBatchMarking(null);    }    com.wipro.ats.bdre.md.dao.jpa.BatchConsumpQueue jpaBcq=new com.wipro.ats.bdre.md.dao.jpa.BatchConsumpQueue();    jpaBcq.setQueueId(batchConsumpQueue.getQueueId());    jpaBcq.setSourceProcessId(batchConsumpQueue.getSourceProcessId());    jpaBcq.setInsertTs(batchConsumpQueue.getInsertTs());    jpaBcq.setStartTs(batchConsumpQueue.getStartTs());    jpaBcq.setEndTs(batchConsumpQueue.getEndTs());    if (batchConsumpQueue.getSourceBatchId() != null) {      Batch sourceBatch=new Batch();      sourceBatch.setBatchId(batchConsumpQueue.getSourceBatchId());      jpaBcq.setBatchBySourceBatchId(sourceBatch);    }    if (batchConsumpQueue.getTargetBatchId() != null) {      Batch targetBatch=new Batch();      targetBatch.setBatchId(batchConsumpQueue.getTargetBatchId());      jpaBcq.setBatchByTargetBatchId(targetBatch);    }    com.wipro.ats.bdre.md.dao.jpa.Process process=new Process();    process.setProcessId(batchConsumpQueue.getProcessId());    jpaBcq.setProcess(process);    BatchStatus batchStatus=new BatchStatus();    batchStatus.setBatchStateId(batchConsumpQueue.getBatchState());    jpaBcq.setBatchStatus(batchStatus);    jpaBcq.setBatchMarking(batchConsumpQueue.getBatchMarking());    Long queueId=batchConsumpQueueDAO.insert(jpaBcq);    jpaBcq.setQueueId(queueId);    batchConsumpQueue.setTableStartTS(DateConverter.dateToString(batchConsumpQueue.getStartTs()));    batchConsumpQueue.setTableEndTS(DateConverter.dateToString(batchConsumpQueue.getEndTs()));    batchConsumpQueue.setTableInsertTS(DateConverter.dateToString(batchConsumpQueue.getInsertTs()));    restWrapper=new RestWrapper(batchConsumpQueue,RestWrapper.OK);    LOGGER.info(RECORDWITHID + batchConsumpQueue.getQueueId() + " inserted in BatchConsumpQueue by User:"+ principal.getName()+ batchConsumpQueue);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public boolean validate(InputNode node) throws Exception {  Class expect=type.getType();  String name=entry.getValue();  if (!entry.isInline()) {    if (name == null) {      name=context.getName(expect);    }    return validateElement(node,name);  }  return validateAttribute(node,name);}  }
class C{  public Object put(Object o1,Object o2,Object value){  removeClearedEntries();  int hash=hashCode(o1,o2) & 0x7FFFFFFF;  int index=hash % table.length;  Entry e=table[index];  if (e != null) {    if ((e.hash == hash) && e.match(o1,o2)) {      Object old=e.get();      table[index]=new Entry(hash,o1,o2,value,e.next);      return old;    }    Entry o=e;    e=e.next;    while (e != null) {      if ((e.hash == hash) && e.match(o1,o2)) {        Object old=e.get();        e=new Entry(hash,o1,o2,value,e.next);        o.next=e;        return old;      }      o=e;      e=e.next;    }  }  int len=table.length;  if (count++ >= (len - (len >> 2))) {    rehash();    index=hash % table.length;  }  table[index]=new Entry(hash,o1,o2,value,table[index]);  return null;}  }
class C{  public boolean isInside(int x,int y){  boolean leftEdge=(edgeFlags & Keyboard.EDGE_LEFT) > 0;  boolean rightEdge=(edgeFlags & Keyboard.EDGE_RIGHT) > 0;  boolean topEdge=(edgeFlags & Keyboard.EDGE_TOP) > 0;  boolean bottomEdge=(edgeFlags & Keyboard.EDGE_BOTTOM) > 0;  if ((x >= this.x || (leftEdge && x <= this.x + this.width)) && (x < this.x + this.width || (rightEdge && x >= this.x)) && (y >= this.y || (topEdge && y <= this.y + this.height))&& (y < this.y + this.height || (bottomEdge && y >= this.y))) {    return true;  } else {    return false;  }}  }
class C{  public static Instances applyAttributeSelectionFilter(Instances trainData,Remove removeFilter) throws Exception {  Instances filtered=Filter.useFilter(trainData,removeFilter);  filtered.setClassIndex(trainData.classIndex());  MekaClassAttributes attFilter=new MekaClassAttributes();  attFilter.setAttributeIndices(filtered.numAttributes() - trainData.classIndex() + 1 + "-last");  attFilter.setInputFormat(filtered);  filtered=Filter.useFilter(filtered,attFilter);  int newClassindex=filtered.classIndex();  filtered.setRelationName(filtered.relationName().replaceAll("\\-C\\s[\\d]+","-C " + newClassindex));  return filtered;}  }
class C{  public static byte[] concat(final byte[]... arrays){  int len=0;  for (  final byte[] arr : arrays) {    len+=arr.length;  }  final byte[] result=new byte[len];  int pos=0;  for (  final byte[] arr : arrays) {    System.arraycopy(arr,0,result,pos,arr.length);    pos+=arr.length;  }  return result;}  }
class C{  public Table parseTableName(String sql){  parameters=New.arrayList();  initialize(sql);  read();  return readTableOrView();}  }
class C{  public Bindings add(String property,JComboBox combo){  combo.addActionListener(this);  return add(new JComboBoxBinding(property,combo,0));}  }
class C{  public Set<SootMethod> resolveAbstractDispatch(SootClass abstractType,SootMethod m){  String methodSig=m.getSubSignature();  HashSet<SootClass> resolved=new HashSet<SootClass>();  HashSet<SootMethod> ret=new HashSet<SootMethod>();  LinkedList worklist=new LinkedList();  worklist.add(abstractType);  while (!worklist.isEmpty()) {    SootClass concreteType=(SootClass)worklist.removeFirst();    SootClass savedConcreteType=concreteType;    if (concreteType.isInterface()) {      worklist.addAll(getAllImplementersOfInterface(concreteType));      continue;    }    Collection c=classToSubclasses.get(concreteType);    if (c != null)     worklist.addAll(c);    if (!concreteType.isAbstract()) {      while (true) {        if (resolved.contains(concreteType))         break;        resolved.add(concreteType);        if (concreteType.declaresMethod(methodSig)) {          SootMethod method=concreteType.getMethod(methodSig);          if (method.isAbstract())           throw new RuntimeException("abstract dispatch resolved to abstract method!\nAbstract Type: " + abstractType + "\nConcrete Type: "+ savedConcreteType+ "\nMethod: "+ m);          if (isVisible(concreteType,m)) {            ret.add(concreteType.getMethod(methodSig));            break;          }        }        if (!concreteType.hasSuperclass())         throw new RuntimeException("could not resolve abstract dispatch!\nAbstract Type: " + abstractType + "\nConcrete Type: "+ savedConcreteType+ "\nMethod: "+ m);        concreteType=concreteType.getSuperclass();      }    }  }  return ret;}  }
class C{  public static List<Author> listAuthors(){  List<Author> result=new LinkedList<Author>();  List<String> ids=new LinkedList<String>();  PreparedStatement statement=DatabaseRequest.ALL_AUTHORS.getStatement();  try {    ResultSet set=statement.executeQuery();    while (set.next()) {      String id=set.getString("id");      if (!ids.contains(id)) {        ids.add(id);        result.add(new Author(id,set.getString("name"),set.getString("sort")));      }    }  } catch (  SQLException e) {    logger.error("listAuthors: " + e);    sqlException+=(2 ^ 6);  }  return result;}  }
class C{  private ArabicTextHandler(){}  }
class C{  public HighFrequencyDictionary(IndexReader reader,String field,float thresh){  this.reader=reader;  this.field=field;  this.thresh=thresh;}  }
class C{  public static <T>Observable<T> observable(Publisher<T> publisher){  return RxReactiveStreams.toObservable(publisher);}  }
class C{  protected SearchTheMovieDbProxyResource mock_search_movie_rest_client_is_created(int status_code,Object entity) throws Exception {  moviedbresource=mock(SearchTheMovieDbProxyResource.class);  ResponseBuilder responseBuilder=mock(ResponseBuilder.class);  response=mock(Response.class);  when(response.getStatus()).thenReturn(status_code);  when(response.getEntity()).thenReturn(entity);  when((responseBuilder).build()).thenReturn(response);  return moviedbresource;}  }
class C{  public boolean isLegalCast(Type objType,Type refType){  return ptsProvider.castNeverFails(objType,refType);}  }
class C{  public static Classification confidential(){  return create(CONFIDENTIAL);}  }
class C{  public Tree(){  super(new Table(),false);}  }
class C{  public boolean equals(TransformMatrix2D op2){  if (op2 == null)   return false;  return Util.compareDoubles(this.a,op2.a) && Util.compareDoubles(this.b,op2.b) && Util.compareDoubles(this.c,op2.c)&& Util.compareDoubles(this.d,op2.d)&& Util.compareDoubles(this.e,op2.e)&& Util.compareDoubles(this.f,op2.f);}  }
class C{  protected Message(){}  }
class C{  public boolean isGroupBy(){  Object oo=get_Value(COLUMNNAME_IsGroupBy);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isDeviceOffline(){  return mIsDeviceOffline;}  }
class C{  @DSSink({DSSinkKind.LOCATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.195 -0500",hash_original_method="A7B31AF326321489C7AFBE2F446F3E30",hash_generated_method="B7C00E37E606958AED57A98D7B947491") public boolean sendExtraCommand(String provider,String command,Bundle extras){  try {    return mService.sendExtraCommand(provider,command,extras);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in sendExtraCommand: ",e);    return false;  }}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public void testCase24(){  byte rBytes[]={0};  BigInteger aNumber=BigInteger.ONE;  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(0,result.signum());}  }
class C{  private void enterDefaultValue(final JCExpression defaultValue,final Env<AttrContext> localEnv,final MethodSymbol m){  m.defaultValue=annotate.enterAttributeValue(m.type.getReturnType(),defaultValue,localEnv);}  }
class C{  protected boolean isMapKey(){  return false;}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  public static DynamicMessage parseFrom(Descriptor type,CodedInputStream input) throws IOException {  return newBuilder(type).mergeFrom(input).buildParsed();}  }
class C{  public boolean isSetVectors(){  return this.vectors != null;}  }
class C{  @Override public int proceduralInterval(){  return 1;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  UniqueCounter<String> oper=new UniqueCounter<String>();  CountAndLastTupleTestSink sink=new CountAndLastTupleTestSink<HashMap<String,Integer>>();  oper.count.setSink(sink);  String atuple="a";  String btuple="b";  String ctuple="c";  String dtuple="d";  int numTuples=10000;  oper.beginWindow(0);  for (int i=0; i < numTuples; i++) {    oper.data.process(atuple);    if (i % 2 == 0) {      oper.data.process(btuple);    }    if (i % 5 == 0) {      oper.data.process(ctuple);    }  }  oper.endWindow();  oper.beginWindow(1);  for (int i=0; i < numTuples; i++) {    oper.data.process(atuple);  }  oper.endWindow();  HashMap<String,Integer> tuple=(HashMap<String,Integer>)sink.tuple;  int acount=tuple.get("a");  Assert.assertEquals("number emitted tuples",numTuples,acount);  oper.beginWindow(2);  for (int i=0; i < numTuples; i++) {    if (i % 2 == 0) {      oper.data.process(btuple);    }    oper.data.process(btuple);    if (i % 10 == 0) {      oper.data.process(dtuple);    }  }  oper.endWindow();  tuple=(HashMap<String,Integer>)sink.tuple;  int bcount=tuple.get("b");  int dcount=tuple.get("d");  Assert.assertEquals("number emitted tuples",3,sink.count);  Assert.assertEquals("number emitted tuples",numTuples + (numTuples / 2),bcount);  Assert.assertEquals("number emitted tuples",numTuples / 10,dcount);}  }
class C{  private Endpoint createEndpoint(Node endpointNode){  Element endpointElement=(Element)endpointNode;  Endpoint endpoint=null;  if ("filter".equals(endpointElement.getLocalName())) {    endpoint=EipFactory.eINSTANCE.createFilter();  } else   if ("transformer".equals(endpointElement.getLocalName())) {    endpoint=EipFactory.eINSTANCE.createTransformer();  } else   if ("enricher".equals(endpointElement.getLocalName())) {    endpoint=EipFactory.eINSTANCE.createEnricher();  } else   if ("chain".equals(endpointElement.getLocalName())) {    endpoint=EipFactory.eINSTANCE.createCompositeProcessor();  } else   if ("splitter".equals(endpointElement.getLocalName())) {    endpoint=EipFactory.eINSTANCE.createSplitter();  } else   if ("aggregator".equals(endpointElement.getLocalName())) {    endpoint=EipFactory.eINSTANCE.createAggregator();  } else   if ("resequencer".equals(endpointElement.getLocalName())) {    endpoint=EipFactory.eINSTANCE.createResequencer();    Resequencer resequencer=(Resequencer)endpoint;    String strategy=endpointElement.getAttribute("correlation-strategy");    String expression=endpointElement.getAttribute("correlation-strategy-expression");    String streamSequences=endpointElement.getAttribute("release-partial-sequences");    if (strategy != null && strategy.length() > 0) {      resequencer.setStrategy(strategy);    }    if (expression != null && expression.length() > 0) {      resequencer.setExpression(expression);    }    if (streamSequences != null && streamSequences.length() > 0) {      resequencer.setStreamSequences(Boolean.valueOf(streamSequences));    }  } else   if ("gateway".equals(endpointElement.getLocalName())) {    endpoint=EipFactory.eINSTANCE.createGateway();  } else   if ("service-activator".equals(endpointElement.getLocalName())) {    endpoint=EipFactory.eINSTANCE.createServiceActivator();  } else   if (endpointElement.getLocalName().contains("router")) {    endpoint=EipFactory.eINSTANCE.createRouter();    Router router=((Router)endpoint);    String channelOut=endpointElement.getAttribute("default-output-channel");    if (channelOut != null && channelOut.trim().length() > 0) {      router.getToChannels().add(channelsMap.get(channelOut));    }    NodeList mappings=endpointElement.getElementsByTagNameNS(SPRING_INT_NS,"mapping");    for (int i=0; i < mappings.getLength(); i++) {      Element mapping=(Element)mappings.item(i);      ConditionalRoute cRoute=EipFactory.eINSTANCE.createConditionalRoute();      String cRouteChannel=mapping.getAttribute("channel");      cRoute.setChannel(channelsMap.get(cRouteChannel));      cRoute.setCondition(mapping.getAttribute("id"));      router.getOwnedRoutes().add(cRoute);    }    if ("header-value-router".equals(endpointElement.getLocalName())) {      router.setType(RoutingType.HEADER_VALUE);    } else     if ("payload-type-router".equals(endpointElement.getLocalName())) {      router.setType(RoutingType.PAYLOAD_TYPE);    } else     if ("router".equals(endpointElement.getLocalName())) {      router.setType(RoutingType.PAYLOAD_VALUE);    }  }  if (endpoint != null) {    endpoint.setName(endpointElement.getAttribute("id"));    String inputChannelName=endpointElement.getAttribute("input-channel");    if (inputChannelName != null && inputChannelName.trim().length() > 0) {      Channel inputChannel=channelsMap.get(inputChannelName);      if (inputChannel != null) {        endpoint.getFromChannels().add(inputChannel);      }    }    String outputChannelName=endpointElement.getAttribute("output-channel");    if (outputChannelName != null && outputChannelName.trim().length() > 0) {      endpoint.getToChannels().add(channelsMap.get(outputChannelName));    }    endpointsMap.put(endpoint.getName(),endpoint);  }  return endpoint;}  }
class C{  public CreateRequest(int objectId,LwM2mResource... resources){  this(null,new LwM2mPath(objectId),null,resources);}  }
class C{  @SuppressWarnings("unchecked") public void writeCharacterStream(java.io.Reader x) throws SQLException {  BufferedReader bufReader=new BufferedReader(x);  try {    int i;    while ((i=bufReader.read()) != -1) {      char ch=(char)i;      StringBuffer strBuf=new StringBuffer();      strBuf.append(ch);      String str=new String(strBuf);      String strLine=bufReader.readLine();      writeString(str.concat(strLine));    }  } catch (  IOException ioe) {  }}  }
class C{  public NatCubicSpline withSteps(int steps){  setSteps(steps);  return this;}  }
class C{  public void testInitBeaHome(){  this.container.initBeaHome();  String name=this.container.getBeaHome().replaceAll("\\\\","/");  assertEquals(BEA_HOME,name);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("LdapConnectionHandler[");  sb.append(hashCode()).append("]");  return sb.toString();}  }
class C{  int parseNumber(String source,int ofs,String name,int min,int max) throws ParseException {  if (source == null) {    throwInvalid(name,ofs);  }  int v=-1;  try {    v=Integer.parseInt(source);  } catch (  NumberFormatException nfe) {    throwInvalid(name,ofs);  }  if (min != max) {    validateNumber(v,ofs,name,min,max);  }  return v;}  }
class C{  public boolean isOverlapping(Collection<XDistribution> distributions,Collection<XSection> assignments){  if (isAllowOverlap())   return false;  if (getTime() == null || assignments == null)   return false;  for (  XSection assignment : assignments) {    if (assignment.isAllowOverlap())     continue;    if (assignment.getTime() == null)     continue;    if (isToIgnoreStudentConflictsWith(distributions,assignment.getSectionId()))     continue;    if (getTime().hasIntersection(assignment.getTime()))     return true;  }  return false;}  }
class C{  public void removeListener(final ITextNodeListener listener){  m_listeners.removeListener(listener);}  }
class C{  public static void playerDiscoverPage(EntityPlayer player,String name,Item itemManual){  if (!ManualManager.hasFoundPage(player,name,itemManual) && player != null && player.inventory.hasItemStack(new ItemStack(itemManual)) && !player.worldObj.isRemote) {    if (ManualManager.findPage(player,name,itemManual))     player.addChatMessage(new TextComponentTranslation("chat.manual.discover_page",new TextComponentTranslation("manual." + name + ".title")));  }}  }
class C{  protected byte[] generateRandomBytes(int length){  byte[] data=new byte[length];  while (length-- != 0) {    data[length]=(byte)(Math.random() * (122 - 65) + 65);  }  return data;}  }
class C{  public void resetTime(){  updater.resetTime();}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  public void writeLong(long x){  writeInt((int)(x >>> 32));  writeInt((int)x);}  }
class C{  public void notifyUnRegistration(RcsServiceRegistration.ReasonCode reasonCode){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceUnRegistered(reasonCode);  }}  }
class C{  public static JSONArray toJSONArray(JSONArray names,JSONTokener x) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (; ; ) {    JSONObject jo=rowToJSONObject(names,x);    if (jo == null) {      break;    }    ja.put(jo);  }  if (ja.length() == 0) {    return null;  }  return ja;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.686 -0500",hash_original_method="FBC03E5CDE4AF992F9EAA065B65F23C0",hash_generated_method="7F19AE149B5B43D49DC16C43F00EF024") public void sendRepeatedKeys(int... keys){  final int count=keys.length;  if ((count & 0x1) == 0x1) {    throw new IllegalArgumentException("The size of the keys array must " + "be a multiple of 2");  }  final Instrumentation instrumentation=getInstrumentation();  for (int i=0; i < count; i+=2) {    final int keyCount=keys[i];    final int keyCode=keys[i + 1];    for (int j=0; j < keyCount; j++) {      try {        instrumentation.sendKeyDownUpSync(keyCode);      } catch (      SecurityException e) {      }    }  }  instrumentation.waitForIdleSync();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:05.166 -0500",hash_original_method="4FF06135DA529EA5945D38DB9DEC9B0E",hash_generated_method="B945D9D44581F68296FA3FBD6173A146") private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  DynamicColumnData(final TableColumn tableColumn,final DynamicLength preferredLength,final DynamicLength minLength){  this.tableColumn=tableColumn;  this.preferredLength=preferredLength;  this.minLength=minLength;}  }
class C{  public void incrementCount(){  this.count++;}  }
class C{  public RoundedBitmapBuilder borderWidth(float width){  mBorderWidth=width;  return this;}  }
class C{  public boolean isPrivate(){  return this.modifierKeyword == ModifierKeyword.PRIVATE_KEYWORD;}  }
class C{  private int visitInst(int op,CodeIterator ci,int index,int stack) throws BadBytecode {  String desc;switch (op) {case GETFIELD:    stack+=getFieldSize(ci,index) - 1;  break;case PUTFIELD:stack-=getFieldSize(ci,index) + 1;break;case GETSTATIC:stack+=getFieldSize(ci,index);break;case PUTSTATIC:stack-=getFieldSize(ci,index);break;case INVOKEVIRTUAL:case INVOKESPECIAL:desc=constPool.getMethodrefType(ci.u16bitAt(index + 1));stack+=Descriptor.dataSize(desc) - 1;break;case INVOKESTATIC:desc=constPool.getMethodrefType(ci.u16bitAt(index + 1));stack+=Descriptor.dataSize(desc);break;case INVOKEINTERFACE:desc=constPool.getInterfaceMethodrefType(ci.u16bitAt(index + 1));stack+=Descriptor.dataSize(desc) - 1;break;case INVOKEDYNAMIC:desc=constPool.getInvokeDynamicType(ci.u16bitAt(index + 1));stack+=Descriptor.dataSize(desc);break;case ATHROW:stack=1;break;case MULTIANEWARRAY:stack+=1 - ci.byteAt(index + 3);break;case WIDE:op=ci.byteAt(index + 1);default :stack+=STACK_GROW[op];}return stack;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"shr");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a shr instruction (invalid number of operands)");  }  final long reilOffsetBase=instruction.getAddress().toLong() * 0x100;  long offset=reilOffsetBase;  final List<? extends IOperandTree> operands=instruction.getOperands();  final TranslationResult firstResult=Helpers.translateOperand(environment,offset,operands.get(0),true);  instructions.addAll(firstResult.getInstructions());  offset=reilOffsetBase + instructions.size();  final TranslationResult secondResult=Helpers.translateOperand(environment,offset,operands.get(1),true);  instructions.addAll(secondResult.getInstructions());  offset=reilOffsetBase + instructions.size();  final OperandSize size1=firstResult.getSize();  final OperandSize size2=secondResult.getSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(size1);  final String operand1=firstResult.getRegister();  final String operand2=secondResult.getRegister();  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(size1));  final String modValue=String.valueOf(size1.getBitSize());  final String shiftMask=environment.getNextVariableString();  final String shiftMaskZero=environment.getNextVariableString();  final String shiftMaskLessOne=environment.getNextVariableString();  final String shiftMaskOne=environment.getNextVariableString();  final String shiftMaskNeg=environment.getNextVariableString();  final String result=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  final String incShiftMaskNeg=environment.getNextVariableString();  final String decResult=environment.getNextVariableString();  final int before=instructions.size();  final List<ReilInstruction> writebackInstructions=new ArrayList<ReilInstruction>();  Helpers.writeBack(environment,offset + 17,operands.get(0),truncatedResult,size1,firstResult.getAddress(),firstResult.getType(),writebackInstructions);  instructions.add(ReilHelpers.createMod(offset,size2,operand2,size2,modValue,size2,shiftMask));  instructions.add(ReilHelpers.createBisz(offset + 1,size2,shiftMask,OperandSize.BYTE,shiftMaskZero));  instructions.add(ReilHelpers.createSub(offset + 2,size2,"1",size2,shiftMask,size2,shiftMaskLessOne));  instructions.add(ReilHelpers.createBisz(offset + 3,size2,shiftMaskLessOne,OperandSize.BYTE,shiftMaskOne));  instructions.add(ReilHelpers.createSub(offset + 4,size2,"0",size2,shiftMask,size2,shiftMaskNeg));  instructions.add(ReilHelpers.createBsh(offset + 5,size1,operand1,size2,shiftMaskNeg,resultSize,result));  instructions.add(ReilHelpers.createAnd(offset + 6,resultSize,result,size1,truncateMask,size1,truncatedResult));  final String jmpGoalWriteBack=String.format("%d.%d",instruction.getAddress().toLong(),before + 17);  instructions.add(ReilHelpers.createJcc(offset + 7,OperandSize.BYTE,shiftMaskZero,OperandSize.ADDRESS,jmpGoalWriteBack));  instructions.add(ReilHelpers.createStr(offset + 8,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createAdd(offset + 9,size2,shiftMaskNeg,size2,"1",size2,incShiftMaskNeg));  instructions.add(ReilHelpers.createBsh(offset + 10,size1,operand1,size2,incShiftMaskNeg,size1,decResult));  instructions.add(ReilHelpers.createAnd(offset + 11,size1,decResult,OperandSize.BYTE,"1",OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createBisz(offset + 12,size1,truncatedResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  final String jmpGoal2=String.format("%d.%d",instruction.getAddress().toLong(),before + 16);  instructions.add(ReilHelpers.createJcc(offset + 13,OperandSize.BYTE,shiftMaskOne,OperandSize.ADDRESS,jmpGoal2));  instructions.add(ReilHelpers.createUndef(offset + 14,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.add(ReilHelpers.createJcc(offset + 15,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoalWriteBack));  instructions.add(ReilHelpers.createXor(offset + 16,OperandSize.BYTE,Helpers.SIGN_FLAG,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.addAll(writebackInstructions);}  }
class C{  public static String loadNoInlinePatterns(String dirName,String fileName,ConfigData configData){  String filePath=dirName + fileName;  _noInlineFileName=fileName;  _noInlineFilePath=filePath;  _noInlineLastModified=0;  _noInlinePatterns=DEFAULT_NO_INLINE_PATTERNS;  PatternsInfo patternsInfo=loadPatterns(filePath,"no-inline");  if (patternsInfo.patterns != null) {    _noInlinePatterns=patternsInfo.patterns;    _noInlineVersion=patternsInfo.version;    _noInlineLastModified=new File(filePath).lastModified();  }  configData.setNoInlinePatterns(_noInlinePatterns);  return patternsInfo.html.toString();}  }
class C{  protected final void SSE2_FPR2GPR_32(Instruction s){  EMIT(MIR_Move.mutate(s,IA32_MOVD,Unary.getResult(s),Unary.getVal(s)));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildDwarfMineArea(zone);}  }
class C{  public static double rMSEmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  static public void fillRandomIntegerUniform(IDoubleVector vec,Random rand,int min,int max){  final int delta=max - min;  for (int i=0; i < vec.getLength(); ++i) {    vec.set(i,min + rand.nextInt(delta));  }}  }
class C{  public DynamicIntArray(int initialCapacity){  if (initialCapacity < 0) {    throw new IllegalArgumentException("Illegal initialCapacity: " + initialCapacity);  }  data=new int[initialCapacity];  size=0;}  }
class C{  private void executePropertiesOperation(int operation) throws SQLException {  try (FbService service=attachServiceManager()){    ServiceRequestBuffer srb=createPropertiesSRB(service,operation);    executeServicesOperation(service,srb);  } }  }
class C{  public static OutputLimitClause create(TimePeriodExpression timePeriodExpression){  return new OutputLimitClause(OutputLimitSelector.DEFAULT,timePeriodExpression);}  }
class C{  public RequestQueue(int threadPoolSize){  mDispatchers=new RequestDispatcher[threadPoolSize];}  }
class C{  public void testMultipleLogs() throws Exception {  File logDir=prepareLogDir("testMultipleLogs");  DiskLog log=openLog(logDir,false,3000);  writeEventsToLog(log,200);  logger.info("Log file count: " + log.fileCount());  assertTrue("More than one log file",log.fileCount() > 1);  log.validate();  log.release();  DiskLog log2=openLog(logDir,true);  log.validate();  assertEquals("Should have stored 200 events",199,log2.getMaxSeqno());  readBackStoredEvents(log2,0,200);  log2.release();}  }
class C{  private static StringListField strList(String key,List<String> defaults){  return new StringListField(key,defaults);}  }
class C{  public static Typeface greenAvocado(Context context){  sGreenAvocado=getFontFromRes(R.raw.green_avocado,context);  return sGreenAvocado;}  }
class C{  void addRule(String[] selector,AttributeSet declaration,boolean isLinked){  int n=selector.length;  StringBuilder sb=new StringBuilder();  sb.append(selector[0]);  for (int counter=1; counter < n; counter++) {    sb.append(' ');    sb.append(selector[counter]);  }  String selectorName=sb.toString();  Style rule=getStyle(selectorName);  if (rule == null) {    Style altRule=addStyle(selectorName,null);synchronized (this) {      SelectorMapping mapping=getRootSelectorMapping();      for (int i=n - 1; i >= 0; i--) {        mapping=mapping.getChildSelectorMapping(selector[i],true);      }      rule=mapping.getStyle();      if (rule == null) {        rule=altRule;        mapping.setStyle(rule);        refreshResolvedRules(selectorName,selector,rule,mapping.getSpecificity());      }    }  }  if (isLinked) {    rule=getLinkedStyle(rule);  }  rule.addAttributes(declaration);}  }
class C{  public static boolean isTimestampValid(String timestamp){  long timestampLong=0L;  final long window=15 * 60 * 1000L;  if (null == timestamp) {    return false;  }  timestampLong=DateUtils.parseISO8601Date(timestamp).getTime();  Long now=new Date().getTime();  long before15Mins=new Date(now - window).getTime();  long after15Mins=new Date(now + window).getTime();  return (timestampLong >= before15Mins && timestampLong <= after15Mins);}  }
class C{  public void trimToSize(){  elements=cern.colt.Arrays.trimToCapacity(elements,size());}  }
class C{  public DcwSpatialIndex(String filename,boolean border) throws FormatException {  try {    inputFile=new BinaryBufferedFile(filename);  } catch (  IOException e) {    throw new FormatException("Can't open file " + filename + ": "+ e.getMessage());  }  inputFile.byteOrder(border);  try {    numberOfPrimitives=inputFile.readInteger();    boundingRectx1=inputFile.readFloat();    boundingRecty1=inputFile.readFloat();    boundingRectx2=inputFile.readFloat();    boundingRecty2=inputFile.readFloat();    nodesInTree=inputFile.readInteger();    if (Debug.debugging("vpfserver")) {      System.out.println("NumberOfPrimitives = " + numberOfPrimitives);      System.out.println("Bounding Rect = (" + boundingRectx1 + ", "+ boundingRecty1+ ") - ("+ boundingRectx2+ ", "+ boundingRecty2+ ")");      System.out.println("Nodes in Tree = " + nodesInTree);    }    nodeinfo=new int[nodesInTree][2];    for (int i=0; i < nodesInTree; i++) {      inputFile.readIntegerArray(nodeinfo[i],0,2);    }    if (Debug.debugging("vpfserver")) {      int baseOffset=24 + nodesInTree * 8;      BitSet b=new BitSet(nodesInTree);      int actprimcnt=0;      b.set(0);      for (int i=0; i < nodesInTree; i++) {        if ((baseOffset + nodeinfo[i][0]) != inputFile.getFilePointer()) {          throw new FormatException("SI Input appears to be out-of-sync");        }        StringBuffer pr=new StringBuffer("i=").append(i + 1);        pr.append(" offset=").append(nodeinfo[i][0]);        pr.append(" count=").append(nodeinfo[i][1]);        for (int j=0; j < nodeinfo[i][1]; j++) {          actprimcnt++;          PrimitiveRecord prim=new PrimitiveRecord(inputFile);          pr.append("\n\t").append(prim.toString());        }        if (nodeinfo[i][1] != 0) {          if ((i < 15) || ((i + 1) == nodesInTree)) {            System.out.println(pr);          }          b.set(i + 1);          if (!b.get((i + 1) / 2)) {            throw new FormatException("condition failed");          }        }      }      if (actprimcnt == numberOfPrimitives) {        System.out.println("Got the right number of primitives");      } else {        System.out.println("!!Got the wrong number of primitives");      }      if (inputFile.available() != 0) {        throw new FormatException("Bytes left at end of file " + inputFile.available());      }    }  } catch (  EOFException e) {    throw new FormatException("Hit Premature EOF in thematic index");  }catch (  IOException i) {    throw new FormatException("Encountered IO Exception: " + i.getMessage());  }}  }
class C{  public String numFoldsTipText(){  return "Get the number of folds used for cross-validation.";}  }
class C{  protected TypeSpecifierImpl(){  super();}  }
class C{  public SIPServerTransaction createServerTransaction(MessageChannel encapsulatedMessageChannel){  if (unlimitedServerTransactionTableSize) {    return new SIPServerTransaction(this,encapsulatedMessageChannel);  } else {    float threshold=((float)(serverTransactionTable.size() - serverTransactionTableLowaterMark)) / ((float)(serverTransactionTableHighwaterMark - serverTransactionTableLowaterMark));    boolean decision=Math.random() > 1.0 - threshold;    if (decision) {      return null;    } else {      return new SIPServerTransaction(this,encapsulatedMessageChannel);    }  }}  }
class C{  public static long nowInNanos(){  return System.nanoTime();}  }
class C{  protected Differences compareChildNodes(final XNode xControl,final XNode xTest){  if ((xControl == null) || (xTest == null)) {    throw new IllegalArgumentException("Test and/or Control Node argument cannot be null");  }  log("Comparing CHILD Nodes for Test:" + xTest.getXPath() + "-Control:"+ xControl.getXPath()+ "-");  Differences differences=new Differences();  OrderedMap nodeTracker=new OrderedMap(OrderedMap.TYPE_UNSYNCHRONIZED_MOV);  Node control=xControl.getNode();  Node test=xTest.getNode();  NodeList testChildNodes=null;  NodeList controlChildNodes=null;  Node testChildNode=null;  Node controlChildNode=null;  if (control == null) {    if (test != null) {      if (!_config.isCustomDifference()) {        differences.add("Test Node added at " + xTest.getXPath());      } else {        Difference diff=new Difference(DifferenceConstants.ADDED_NODE,null,xTest);        differences.add(diff);      }      return differences;    } else {      return null;    }  } else {    if (test == null) {      if (!_config.isCustomDifference()) {        differences.add("Golden Node added at " + xControl.getXPath());      } else {        Difference diff=new Difference(DifferenceConstants.ADDED_NODE,xControl,null);        differences.add(diff);      }      return differences;    }  }  if (test.hasChildNodes()) {    if (control.hasChildNodes()) {      testChildNodes=test.getChildNodes();      controlChildNodes=control.getChildNodes();      NodeResult matchedNodeResult=null;      String testNodeXPath=null;      XNode xControlChildNode=null;      XNode xTestChildNode=null;      String testChildXPath=null;      String controlChildXPath=null;      for (int i=0; i < testChildNodes.getLength(); i++) {        testChildNode=testChildNodes.item(i);        testChildXPath=XMLUtil.generateXPath(testChildNode,xTest.getXPath(),_ignoringWhitespace,_includeNodeValueInXPath,false);        xTestChildNode=new XNode(testChildNode,testChildXPath);        xTestChildNode.setDepth(xTest.getDepth() + 1);        xTestChildNode.setPosition(i);        controlChildNode=controlChildNodes.item(i) == null ? controlChildNodes.item(0) : controlChildNodes.item(i);        log("******** controlChildNode " + controlChildNode.getNodeName() + " type "+ controlChildNode.getNodeType());        controlChildXPath=XMLUtil.generateXPath(controlChildNode,xControl.getXPath(),_ignoringWhitespace,_includeNodeValueInXPath,false);        log("compareChildNodes()......controlChildXPath " + controlChildXPath);        xControlChildNode=new XNode(controlChildNode,controlChildXPath);        if (_config.isXPathEListEnabled()) {          testNodeXPath=_config.applyEListToSiblings() ? xTestChildNode.getNoIndexXPath() : xTestChildNode.getXPath();        }        if ((XMLUtil.isWhitespaceTextNode(testChildNode)) && (isIgnoringWhitespace())) {          log("Ignoring Whitespace Node");        } else         if (XMLUtil.isCommentNode(testChildNode) && (_config.isIgnoringComments())) {          log("Ignoring Comment Node");        } else         if ((testNodeXPath != null) && (_config.getXPathEList().containsKey(testNodeXPath))) {          log("Ignoring the Node since its XPath entry in EList file");        } else {          if ((testChildNode.getNodeType() == Node.ELEMENT_NODE) && (_config.getExcludedElementsSet().contains(testChildNode.getNodeName()))) {            log("compareChildNodes: Ignoring element child node at " + XMLUtil.generateXPath(testChildNode,isIgnoringWhitespace()) + " since its in ignore list");          } else {            matchedNodeResult=compareSimilarNodes(xControlChildNode,xTestChildNode,nodeTracker);            log("CompareChildNodes: Matched node result " + matchedNodeResult.toString());            if (matchedNodeResult.getControlNode() != null) {              nodeTracker.add(matchedNodeResult.getControlNode().getNode(),matchedNodeResult);            } else {              differences.add(matchedNodeResult);            }          }        }      }      Object[] nodeResults=nodeTracker.elements();      for (int i=0; i < nodeResults.length; i++) {        Object nodeResult=nodeResults[i];        NodeResult minDiffNR=null;        if (nodeResult instanceof List) {          log("CompareChildNodes: ++++++ Adding child differences from LIST NodeResult " + nodeResult.toString());          NodeResult currentNR=null;          minDiffNR=(NodeResult)((List)nodeResult).get(0);          for (int j=1; j < ((List)nodeResult).size(); j++) {            currentNR=(NodeResult)((List)nodeResult).get(j);            if ((currentNR.getNumDifferences()) < (minDiffNR.getNumDifferences())) {              if (!_config.isCustomDifference()) {                if (currentNR.getNumDifferences() == 0) {                  differences.add("Added Node: Test Node " + minDiffNR.getTestNode().getXPath());                } else {                  differences.add("Added Node/Multiple Matches: Current Node " + minDiffNR.getTestNode().getXPath() + " seems to match with already matched Golden Node at "+ minDiffNR.getControlNode().getXPath());                  differences.add(minDiffNR);                }              } else {                XNode xTNode=new XNode(minDiffNR.getTestNode().getNode(),minDiffNR.getTestNode().getXPath());                XNode xCNode=new XNode(minDiffNR.getControlNode().getNode(),minDiffNR.getControlNode().getXPath());                Difference diff=null;                if (currentNR.getNumDifferences() == 0) {                  diff=new Difference(DifferenceConstants.ADDED_NODE,xCNode,xTNode);                } else {                  diff=new Difference(DifferenceConstants.MULTIPLE_MATCHES_ADDED_NODE,xCNode,xTNode);                }                differences.add(diff);              }              minDiffNR=currentNR;            } else {              if (!_config.isCustomDifference()) {                if (minDiffNR.getNumDifferences() == 0) {                  differences.add("Added Node: Test Node " + currentNR.getTestNode().getXPath());                } else {                  differences.add("Added Node/Multiple matches: Current Node " + currentNR.getTestNode().getXPath() + " seems to match with already matched Golden Node at "+ currentNR.getControlNode().getXPath());                  differences.add(currentNR);                }              } else {                XNode xTNode=new XNode(currentNR.getTestNode().getNode(),currentNR.getTestNode().getXPath());                XNode xCNode=new XNode(minDiffNR.getControlNode().getNode(),currentNR.getControlNode().getXPath());                Difference diff=null;                if (minDiffNR.getNumDifferences() == 0) {                  diff=new Difference(DifferenceConstants.ADDED_NODE,xCNode,xTNode);                } else {                  diff=new Difference(DifferenceConstants.MULTIPLE_MATCHES_ADDED_NODE,xCNode,xTNode);                }                differences.add(diff);              }            }          }          if ((!_config.isIgnoringOrder()) && (minDiffNR.getControlNode().getPosition() != minDiffNR.getTestNode().getPosition())) {            if (!_config.isCustomDifference()) {              differences.add("Position Mismatch: Current Node " + minDiffNR.getTestNode().getXPath() + " at position "+ Integer.toString(minDiffNR.getTestNode().getPosition())+ " matches "+ (minDiffNR.isExactMatch() ? "" : "closely")+ " with Golden Node "+ minDiffNR.getControlNode().getXPath()+ " at position "+ Integer.toString(minDiffNR.getControlNode().getPosition()));            } else {              differences.add(new Difference(DifferenceConstants.POSITION_MISMATCH,minDiffNR.getControlNode(),minDiffNR.getTestNode()));            }          }          differences.add(minDiffNR);        } else {          NodeResult nr=(NodeResult)nodeResult;          log("compareChildNodes: ++++++ Adding child differences from INDIVIDUAL NodeResult " + nodeResult.toString());          if ((!_config.isIgnoringOrder()) && (nr.getControlNode().getPosition() != nr.getTestNode().getPosition())) {            if (!_config.isCustomDifference()) {              differences.add("Position Mismatch: Current Node " + nr.getTestNode().getXPath() + " at position "+ Integer.toString(nr.getTestNode().getPosition())+ " matches "+ (nr.isExactMatch() ? "" : "closely")+ " with Golden Node "+ nr.getControlNode().getXPath()+ " at position "+ Integer.toString(nr.getControlNode().getPosition()));            } else {              differences.add(new Difference(DifferenceConstants.POSITION_MISMATCH,nr.getControlNode(),nr.getTestNode()));            }          }          differences.add(nr);        }      }      String controlChildNodeXPathStr=null;      for (int i=0; i < controlChildNodes.getLength(); i++) {        controlChildNode=controlChildNodes.item(i);        controlChildNodeXPathStr=XMLUtil.generateXPath(controlChildNode,xControl.getXPath(),_ignoringWhitespace,_includeNodeValueInXPath,false);        if (!nodeTracker.containsElementKey(controlChildNode)) {          if (_config.applyEListToSiblings()) {            controlChildNodeXPathStr=XMLUtil.getNoIndexXPath(controlChildNodeXPathStr);          }          if (!_config.getXPathEList().containsKey(controlChildNodeXPathStr)) {            reportNodeDifference(new XNode(controlChildNode,XMLUtil.generateXPath(controlChildNode,xControl.getXPath(),_ignoringWhitespace,_includeNodeValueInXPath,false)),xTest,differences,"Missing Node: Current Node ");          }        }      }    } else {      testChildNodes=test.getChildNodes();      String testChildNodeXPathStr=null;      for (int i=0; i < testChildNodes.getLength(); i++) {        testChildNode=testChildNodes.item(i);        testChildNodeXPathStr=XMLUtil.generateXPath(testChildNode,xTest.getXPath(),_ignoringWhitespace,_includeNodeValueInXPath,false);        reportNodeDifference(xControl,new XNode(testChildNode,testChildNodeXPathStr),differences,"Added Node: Test Node ");      }    }  } else {    if (control.hasChildNodes()) {      String controlChildNodeXPathStr=null;      controlChildNodes=control.getChildNodes();      for (int i=0; i < controlChildNodes.getLength(); i++) {        controlChildNode=controlChildNodes.item(i);        controlChildNodeXPathStr=XMLUtil.generateXPath(controlChildNode,xControl.getXPath(),_ignoringWhitespace,_includeNodeValueInXPath,false);        reportNodeDifference(new XNode(controlChildNode,controlChildNodeXPathStr),xTest,differences,"Missing Node: Test document is missing node ");      }    }  }  return differences;}  }
class C{  public long size(){  return fileSize;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.621 -0500",hash_original_method="356AAB4A47E20FEC6EFC92C05FCA16CC",hash_generated_method="446D729E9C4D815A9F5E81598B0F43C1") private void scrollToChild(View child){  child.getDrawingRect(mTempRect);  offsetDescendantRectToMyCoords(child,mTempRect);  int scrollDelta=computeScrollDeltaToGetChildRectOnScreen(mTempRect);  if (scrollDelta != 0) {    scrollBy(0,scrollDelta);  }}  }
class C{  public ParameterBlock add(short s){  return add(new Short(s));}  }
class C{  private static void writeVehicleStatsLine(BufferedWriter output,Vehicle thisVehicle) throws IOException {  output.write(String.valueOf(thisVehicle.getVehID()));  output.write(delimiter);  output.write(String.valueOf(thisVehicle.getHomeLocation().size()));  output.write(delimiter);  output.write(String.valueOf(thisVehicle.getChains().size()));  output.write(delimiter);  output.write(String.valueOf(thisVehicle.getAvgChainDuration()));  output.write(delimiter);  output.write(String.valueOf(thisVehicle.getAvgChainDistance()));  output.write(delimiter);  output.write(String.valueOf(thisVehicle.getAvgActivitesPerChain()));  output.write(delimiter);  output.write(String.valueOf(thisVehicle.getTotalActivities()));  output.write(delimiter);  output.write(String.valueOf(thisVehicle.getNumberOfStudyAreaActivities()));  output.write(delimiter);  output.write(String.valueOf(thisVehicle.getPercentStudyAreaActivities()));  output.write(delimiter);  output.write(String.valueOf(thisVehicle.getStudyAreaChainDistance()));  output.newLine();}  }
class C{  private Template findCachedTemplate(String key,File file){  Template template=null;  if (verbose) {    log("Looking for cached template by key \"" + key + "\"");  }  TemplateCacheEntry entry=(TemplateCacheEntry)cache.get(key);  if (entry != null) {    if (entry.validate(file)) {      if (verbose) {        log("Cache hit! " + entry);      }      template=entry.template;    } else {      if (verbose) {        log("Cached template " + key + " needs recompilation! "+ entry);      }    }  } else {    if (verbose) {      log("Cache miss for " + key);    }  }  return template;}  }
class C{  public void assertKeyEquals(QueryResultKey key1,QueryResultKey key2){  assertNotNull(key1);  assertNotNull(key2);  assertEquals(key1.hashCode(),key2.hashCode());  assertEquals(key1,key2);  assertEquals(key2,key1);}  }
class C{  protected static void addEntityDynamically(SimEntity e){  if (e == null) {    throw new IllegalArgumentException("Adding null entity.");  } else {    printMessage("Adding: " + e.getName());  }  e.startEntity();}  }
class C{  public static boolean propertyValueEqualsIgnoreCase(URL url,String name,String compareString){  String value=getPropertyValue(url,name);  if (value == null)   return false;  return value.trim().equalsIgnoreCase(compareString);}  }
class C{  boolean checkServerResponseAuth(byte[] serverResponse) throws SaslException {  char[] response;  ResponseAuth responseAuth=null;  String responseStr;  responseAuth=new ResponseAuth(serverResponse);  response=DigestCalcResponse(m_HA1,m_dc.getNonce(),"00000001",m_clientNonce,m_qopValue,DIGEST_METHOD,m_digestURI,false);  responseStr=new String(response);  return responseStr.equals(responseAuth.getResponseValue());}  }
class C{  public void skipToEndOfLine() throws IOException {  char ch;  do {    ch=read();    if (hasComments) {      if (ch == lineComment) {        skipComments(ch);        break;      }      if (ch == startComment) {        skipComments(ch);        ch=read();      }    }  } while (ch != '\n' && ch != '\r');  if (ch == '\r') {    if (nextCharacter() == '\n')     read();  }}  }
class C{  @Override public FileVisitResult visitFileFailed(T file,IOException exc) throws IOException {  Objects.requireNonNull(file);  throw exc;}  }
class C{  public @Test final void testCreationNegative2(){  thrown.expect(IllegalArgumentException.class);  new Email("Test",null);}  }
class C{  boolean addFrame(DStackContext ds,int isolateId){  getIsolateState(isolateId).m_frames.add(ds);  return true;}  }
class C{  private String stripLiteralChars(String string){  StringBuilder sb=null;  int last=0;  for (int counter=0, max=string.length(); counter < max; counter++) {    if (isLiteral(counter)) {      if (sb == null) {        sb=new StringBuilder();        if (counter > 0) {          sb.append(string.substring(0,counter));        }        last=counter + 1;      } else       if (last != counter) {        sb.append(string.substring(last,counter));      }      last=counter + 1;    }  }  if (sb == null) {    return string;  } else   if (last != string.length()) {    if (sb == null) {      return string.substring(last);    }    sb.append(string.substring(last));  }  return sb.toString();}  }
class C{  protected ByteType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public String toString(){switch (mod_op) {case DirContext.ADD_ATTRIBUTE:    return ("Add attribute: " + attr.toString());case DirContext.REPLACE_ATTRIBUTE:  return ("Replace attribute: " + attr.toString());case DirContext.REMOVE_ATTRIBUTE:return ("Remove attribute: " + attr.toString());}return "";}  }
class C{  private void init(SSLParametersImpl sslParameters,String[] enabledProtocols,String[] enabledCipherSuites) throws IOException {  this.sslParameters=sslParameters;  this.enabledProtocols=enabledProtocols;  this.enabledCipherSuites=enabledCipherSuites;}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final long[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  public RequiredRuntimeLibraries createRequiredRuntimeLibraries(){  RequiredRuntimeLibrariesImpl requiredRuntimeLibraries=new RequiredRuntimeLibrariesImpl();  return requiredRuntimeLibraries;}  }
class C{  public void clearScriptBytes(){  setScriptBytes(TransactionInput.EMPTY_ARRAY);}  }
class C{  public Element createElement(SVGGeneratorContext generatorContext){  Element imageElement=generatorContext.getDOMFactory().createElementNS(SVG_NAMESPACE_URI,SVG_IMAGE_TAG);  return imageElement;}  }
class C{  public static boolean writeFile(String filePath,InputStream stream){  return writeFile(filePath,stream,false);}  }
class C{  public int peekByte() throws DecodeException {  if (bufsize - offset < 1) {    throw new DecodeException("Insufficient data");  }  return buf[offset] & 0xff;}  }
class C{  public static boolean placeat(final StendhalRPZone zone,final Entity entity,final int x,final int y){  return placeat(zone,entity,x,y,null);}  }
class C{  protected void emitLine(String line){  line=line.replaceAll("\t","  ");  System.err.println(line);}  }
class C{  VelocimacroManager(RuntimeServices rs){  this.rsvc=rs;  addNamespace(GLOBAL_NAMESPACE);}  }
class C{  public CartPaymentInfo addPaymentAmount(String id,BigDecimal amount,String refNum,String authCode,boolean isSingleUse,boolean isPresent,boolean replace){  CartPaymentInfo inf=this.getPaymentInfo(id,refNum,authCode,amount,replace);  if (isSalesOrder()) {    GenericValue billingAddress=inf.getBillingAddress(this.getDelegator());    if (billingAddress != null) {      for (      GenericValue product : ShoppingCart.getItemsProducts(this.cartLines)) {        if (!ProductWorker.isBillableToAddress(product,billingAddress)) {          throw new IllegalArgumentException("The billing address is not compatible with ProductGeos rules.");        }      }    }  }  inf.singleUse=isSingleUse;  inf.isPresent=isPresent;  if (replace) {    paymentInfo.remove(inf);  }  paymentInfo.add(inf);  return inf;}  }
class C{  public Builder(String databaseName){  this.innerDatabase=databaseName;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:53.941 -0500",hash_original_method="4AFBAD62741BB9BDCEF60806B476332B",hash_generated_method="55E219AFF5D1BA280697DD4CECB13754") private void enqueueDiskWrite(final MemoryCommitResult mcr,final Runnable postWriteRunnable){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:03.057 -0500",hash_original_method="6BE6AAF45437494799568EB9C567DA33",hash_generated_method="DD6B2992DC02957B30A273B9FA89021E") public DigitsKeyListener(){  this(false,false);}  }
class C{  public SoapEnvInfo(String service,String http,String host,int port,String context){  this.service=service;  this.http=http;  this.host=host;  this.port=port;  this.context=context;}  }
class C{  @Ignore("TODO: test used to eat its own exception and it fails") @Test public void testEffectOfBlockingTimeoutOnXAConnection() throws Exception {  Map map=new HashMap();  map.put("init-pool-size","2");  map.put("jndi-name","TestXAPooledDataSource");  map.put("max-pool-size","7");  map.put("idle-timeout-seconds","20");  map.put("blocking-timeout-seconds","2");  map.put("login-timeout-seconds","5");  map.put("jdbc-driver-class","org.apache.derby.jdbc.EmbeddedDriver");  map.put("user-name","mitul");  map.put("password","83f0069202c571faf1ae6c42b4ad46030e4e31c17409e19a");  map.put("connection-url","jdbc:derby:newDB;create=true");  List props=new ArrayList();  props.add(new ConfigProperty("databaseName","newDB","java.lang.String"));  GemFireBasicDataSource gbds=(GemFireBasicDataSource)DataSourceFactory.getSimpleDataSource(map,props);  map.put("xa-datasource-class","org.apache.derby.jdbc.EmbeddedXADataSource");  map.put("connection-url","jdbc:derby:newDB;create=true");  GemFireTransactionDataSource gtds=(GemFireTransactionDataSource)DataSourceFactory.getTranxDataSource(map,props);  XAConnection xaconn=(XAConnection)gtds.provider.borrowConnection();  try {    Thread.sleep(4);  } catch (  InterruptedException e) {    fail("interrupted");  }  for (int i=0; i < 1000; ++i) {    XAResource xar=xaconn.getXAResource();    System.out.println("XAResource=" + xar);    assertNotNull(xar);  }}  }
class C{  static void test(Listener[] listeners,int... expected) throws Exception {  for (  Listener listener : listeners) {    listener.reset();  }  LogManager.getLogManager().readConfiguration();  for (int i=0; i < expected.length; i++) {    assertTrue(listeners[i].fireCount() == expected[i],"Unexpected event count");  }}  }
class C{  public void start(){  mUpdateExecutor=Executors.newSingleThreadExecutor();  updateSupportedExtensions();  if (mExternalCapabilityMonitoring == null) {    IntentFilter filter=new IntentFilter(Intent.ACTION_PACKAGE_ADDED);    filter.addAction(Intent.ACTION_PACKAGE_REPLACED);    filter.addAction(Intent.ACTION_PACKAGE_CHANGED);    filter.addAction(Intent.ACTION_PACKAGE_REMOVED);    filter.addDataScheme("package");    mExternalCapabilityMonitoring=new ExternalCapabilityMonitoring(mCore,this);    mCtx.registerReceiver(mExternalCapabilityMonitoring,filter);  }}  }
class C{  private void dropUpstreamFrom(long absolutePosition){  int relativePosition=(int)(absolutePosition - totalBytesDropped);  int allocationIndex=relativePosition / allocationLength;  int allocationOffset=relativePosition % allocationLength;  int allocationDiscardCount=dataQueue.size() - allocationIndex - 1;  if (allocationOffset == 0) {    allocationDiscardCount++;  }  for (int i=0; i < allocationDiscardCount; i++) {    allocator.release(dataQueue.removeLast());  }  lastAllocation=dataQueue.peekLast();  lastAllocationOffset=allocationOffset == 0 ? allocationLength : allocationOffset;}  }
class C{  public void syncbase(float offset,String syncbaseID,String timeSymbol){  TimingSpecifier ts=new SyncbaseTimingSpecifier(owner,isBegin,offset,syncbaseID,timeSymbol.charAt(0) == 'b');  timingSpecifiers.add(ts);}  }
class C{  public boolean inactiveObject(ActivationID id) throws ActivationException, UnknownObjectException, RemoteException {  try {    acquireLock(id);synchronized (this) {      if (groupInactive == true)       throw new ActivationException("group is inactive");    }    ActiveEntry entry=active.get(id);    if (entry == null) {      throw new UnknownObjectException("object not active");    }    try {      if (Activatable.unexportObject(entry.impl,false) == false)       return false;    } catch (    NoSuchObjectException allowUnexportedObjects) {    }    try {      super.inactiveObject(id);    } catch (    UnknownObjectException allowUnregisteredObjects) {    }    active.remove(id);  }  finally {    releaseLock(id);    checkInactiveGroup();  }  return true;}  }
class C{  @SuppressWarnings("unused") @Subscribe public void onEvent(BeforeInstallEvent event){  Log.d("CHCP","Dispatching Before install event");  PluginResult jsResult=PluginResultHelper.pluginResultFromEvent(event);  sendMessageToDefaultCallback(jsResult);}  }
class C{  public boolean removeParticle(VerletParticle2D p){  return particles.remove(p);}  }
class C{  public static boolean canCreatePalette(ImageTypeSpecifier type){  if (type == null) {    throw new IllegalArgumentException("type == null");  }  return true;}  }
class C{  @Override public void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenee=source;  }}  }
class C{  public TxInterruptRequest(Type type,int interruptNumber,int level){  super();  this.type=type;  this.interruptNumber=interruptNumber;  this.level=level;}  }
class C{  private int initialNumber(String tform){  int i;  for (i=0; i < tform.length(); i++) {    if (!Character.isDigit(tform.charAt(i))) {      break;    }  }  return Integer.parseInt(tform.substring(0,i));}  }
class C{  public TcpClient(SocketCreator socketCreator){  this.socketCreator=socketCreator;}  }
class C{  SAXParserMMImpl(SAXParserFactoryMMImpl spf,Hashtable features,boolean secureProcessing) throws SAXException {  xmlReader=new JAXPSAXParser(this);  xmlReader.setFeature0(NAMESPACES_FEATURE,spf.isNamespaceAware());  xmlReader.setFeature0(NAMESPACE_PREFIXES_FEATURE,!spf.isNamespaceAware());  if (spf.isXIncludeAware()) {    xmlReader.setFeature0(XINCLUDE_FEATURE,true);  }  if (secureProcessing) {    xmlReader.setProperty0(SECURITY_MANAGER,new SecurityManager());  }  setFeatures(features);  if (spf.isValidating()) {    fInitErrorHandler=new DefaultValidationErrorHandler();    xmlReader.setErrorHandler(fInitErrorHandler);  } else {    fInitErrorHandler=xmlReader.getErrorHandler();  }  xmlReader.setFeature0(VALIDATION_FEATURE,spf.isValidating());  this.grammar=spf.getSchema();  if (grammar != null) {    XMLParserConfiguration config=xmlReader.getXMLParserConfiguration();    XMLComponent validatorComponent=null;    if (grammar instanceof XSGrammarPoolContainer) {      validatorComponent=new XMLSchemaValidator();      fSchemaValidationManager=new ValidationManager();      fUnparsedEntityHandler=new UnparsedEntityHandler(fSchemaValidationManager);      config.setDTDHandler(fUnparsedEntityHandler);      fUnparsedEntityHandler.setDTDHandler(xmlReader);      xmlReader.setDTDSource(fUnparsedEntityHandler);      fSchemaValidatorComponentManager=new SchemaValidatorConfiguration(config,(XSGrammarPoolContainer)grammar,fSchemaValidationManager);    } else {      validatorComponent=new JAXPValidatorComponent(grammar.newValidatorHandler());      fSchemaValidatorComponentManager=config;    }    config.addRecognizedFeatures(validatorComponent.getRecognizedFeatures());    config.addRecognizedProperties(validatorComponent.getRecognizedProperties());    config.setDocumentHandler((XMLDocumentHandler)validatorComponent);    ((XMLDocumentSource)validatorComponent).setDocumentHandler(xmlReader);    xmlReader.setDocumentSource((XMLDocumentSource)validatorComponent);    fSchemaValidator=validatorComponent;  }  fInitEntityResolver=xmlReader.getEntityResolver();}  }
class C{  protected void enableButtons(){  m_M_Product_ID=-1;  m_ProductName=null;  m_Price=null;  int row=m_table.getSelectedRow();  boolean enabled=row != -1;  if (enabled) {    Integer ID=m_table.getSelectedRowKey();    if (ID != null) {      m_M_Product_ID=ID.intValue();      m_ProductName=(String)m_table.getValueAt(row,2);      m_Price=(BigDecimal)m_table.getValueAt(row,7);    }  }  f_ok.setEnabled(enabled);  log.fine("M_Product_ID=" + m_M_Product_ID + " - "+ m_ProductName+ " - "+ m_Price);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.COMPLEX_TYPE__FEATURES:    getFeatures().clear();  getFeatures().addAll((Collection<? extends Declaration>)newValue);return;case TypesPackage.COMPLEX_TYPE__SUPER_TYPES:getSuperTypes().clear();getSuperTypes().addAll((Collection<? extends ComplexType>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isEmpty(){  return this.fieldMap.isEmpty();}  }
class C{  protected int computeScrollDeltaToGetChildRectOnScreen(Rect rect){  if (getChildCount() == 0)   return 0;  int width=getWidth();  int screenLeft=getScrollX();  int screenRight=screenLeft + width;  int fadingEdge=getHorizontalFadingEdgeLength();  if (rect.left > 0) {    screenLeft+=fadingEdge;  }  if (rect.right < getChildAt(0).getWidth()) {    screenRight-=fadingEdge;  }  int scrollXDelta=0;  if (rect.right > screenRight && rect.left > screenLeft) {    if (rect.width() > width) {      scrollXDelta+=(rect.left - screenLeft);    } else {      scrollXDelta+=(rect.right - screenRight);    }    int right=getChildAt(0).getRight();    int distanceToRight=right - screenRight;    scrollXDelta=Math.min(scrollXDelta,distanceToRight);  } else   if (rect.left < screenLeft && rect.right < screenRight) {    if (rect.width() > width) {      scrollXDelta-=(screenRight - rect.right);    } else {      scrollXDelta-=(screenLeft - rect.left);    }    scrollXDelta=Math.max(scrollXDelta,-getScrollX());  }  return scrollXDelta;}  }
class C{  void allocBorders(){  BasicAlignedRect rect;  rect=new BasicAlignedRect();  rect.setPosition(ARENA_WIDTH / 2,ARENA_HEIGHT / 2);  rect.setScale(ARENA_WIDTH,ARENA_HEIGHT);  rect.setColor(0.1f,0.1f,0.1f);  mBackground=rect;  rect=new BasicAlignedRect();  rect.setPosition(ARENA_WIDTH / 2,-BORDER_WIDTH / 2);  rect.setScale(ARENA_WIDTH,BORDER_WIDTH);  rect.setColor(1.0f,0.65f,0.0f);  mBorders[BOTTOM_BORDER]=rect;  rect=new BasicAlignedRect();  rect.setPosition(BORDER_WIDTH / 2,ARENA_HEIGHT / 2);  rect.setScale(BORDER_WIDTH,ARENA_HEIGHT);  rect.setColor(0.6f,0.6f,0.6f);  mBorders[1]=rect;  rect=new BasicAlignedRect();  rect.setPosition(ARENA_WIDTH - BORDER_WIDTH / 2,ARENA_HEIGHT / 2);  rect.setScale(BORDER_WIDTH,ARENA_HEIGHT);  rect.setColor(0.6f,0.6f,0.6f);  mBorders[2]=rect;  rect=new BasicAlignedRect();  rect.setPosition(ARENA_WIDTH / 2,ARENA_HEIGHT - BORDER_WIDTH / 2);  rect.setScale(ARENA_WIDTH - BORDER_WIDTH * 2,BORDER_WIDTH);  rect.setColor(0.6f,0.6f,0.6f);  mBorders[3]=rect;}  }
class C{  public boolean isStateActive(State state){switch (state) {case default_namespace:    return stateVector[0] == State.default_namespace;case operation_interface:  return stateVector[1] == State.operation_interface;case operation_internal:return stateVector[1] == State.operation_internal;case namespace_event:return stateVector[2] == State.namespace_event;case namespace_local:return stateVector[2] == State.namespace_local;case local_in:return stateVector[3] == State.local_in;case local_out:return stateVector[3] == State.local_out;case interface_var:return stateVector[4] == State.interface_var;case interface_readonly:return stateVector[4] == State.interface_readonly;case internal_external:return stateVector[5] == State.internal_external;case internal_operation:return stateVector[5] == State.internal_operation;case event_default:return stateVector[6] == State.event_default;case event_else:return stateVector[6] == State.event_else;case in_entry:return stateVector[7] == State.in_entry;case in_exit:return stateVector[7] == State.in_exit;case out_always:return stateVector[8] == State.out_always;case out_oncycle:return stateVector[8] == State.out_oncycle;case var_raise:return stateVector[9] == State.var_raise;case var_valueof:return stateVector[9] == State.var_valueof;case readonly_active:return stateVector[10] == State.readonly_active;case readonly_namespace:return stateVector[10] == State.readonly_namespace;case external_interface:return stateVector[11] == State.external_interface;case external_internal:return stateVector[11] == State.external_internal;case else_event:return stateVector[12] == State.else_event;case else_local:return stateVector[12] == State.else_local;case entry_in:return stateVector[13] == State.entry_in;case entry_out:return stateVector[13] == State.entry_out;case exit_var:return stateVector[14] == State.exit_var;case exit_readonly:return stateVector[14] == State.exit_readonly;case always_external:return stateVector[15] == State.always_external;case always_operation:return stateVector[15] == State.always_operation;case oncycle_default:return stateVector[16] == State.oncycle_default;case oncycle_else:return stateVector[16] == State.oncycle_else;case raise_entry:return stateVector[17] == State.raise_entry;case raise_exit:return stateVector[17] == State.raise_exit;case valueof_always:return stateVector[18] == State.valueof_always;case valueof_oncycle:return stateVector[18] == State.valueof_oncycle;case active_raise:return stateVector[19] == State.active_raise;case active_valueof:return stateVector[19] == State.active_valueof;default :return false;}}  }
class C{  public static void exportClouds(File destination,File texturePack,String outputFileName) throws Exception {  if (destination == null)   throw new IllegalArgumentException("destination cannot be null");  if (outputFileName == null)   throw new IllegalArgumentException("outputFileName cannot be null");  if (!destination.exists() || !destination.isDirectory()) {    if (destination.exists())     throw new RuntimeException("Cannot create texture directory! File is in the way!");    if (!destination.mkdir())     throw new RuntimeException("Cannot create texture directory!");  }  File zipfile;  if (texturePack == null)   zipfile=Filesystem.getMinecraftJar(); else   zipfile=texturePack;  if (!zipfile.canRead())   throw new Exception("Cannot open " + zipfile.getName());  ZipInputStream zis=null;  PrintWriter writer=null;  try {    zis=new ZipInputStream(new FileInputStream(zipfile));    ZipEntry entry=null;    while ((entry=zis.getNextEntry()) != null) {      if (entry.isDirectory())       continue;      if (entry.getName().equals("assets/minecraft/textures/environment/clouds.png"))       break;      if (entry.getName().equals("environment/clouds.png"))       break;    }    if (entry == null)     throw new Exception(zipfile.toString() + " does not contain a clouds texture.");    BufferedImage image=ImageIO.read(zis);    Log.info("Exporting clouds to " + outputFileName);    writer=new PrintWriter(new FileWriter(new File(destination,outputFileName)));    ThreadOutputQueue outputQueue=new ThreadOutputQueue();    WriterRunnable writeRunner=new WriterRunnable(outputQueue,writer,null,null,1);    writeRunner.setPrintUseMTL(false);    writeRunner.setOffset(-image.getWidth() / 2,128f / 12f,-image.getHeight() / 2);    writeRunner.setScale(12.0f);    writer.println("g clouds");    writer.println();    Thread writeThread=new Thread(writeRunner);    writeThread.start();    renderClouds(image,outputQueue);    outputQueue.finish();    writeThread.join();    Log.info("Done.");  }  finally {    if (zis != null)     zis.close();    if (writer != null)     writer.close();  }}  }
class C{  public void removeCol(int r){  int size=rows * (cols + 1);  float[] x=new float[size];  float[] y=new float[size];  cols--;  for (int row=0; row < rows; row++) {    int i=row * (cols + 1);    int j=row * cols;    for (int col=0; col < cols; col++) {      x[j]=xGrid[i];      y[j]=yGrid[i];      if (col == r - 1)       i++;      i++;      j++;    }  }  xGrid=x;  yGrid=y;}  }
class C{  public static String parseOperationName(SOAPMessageContext context) throws SOAPException {  String operationName="";  org.w3c.dom.Node operationNode=context.getMessage().getSOAPBody().getFirstChild();  if (operationNode != null) {    operationName=operationNode.getLocalName();  }  return operationName;}  }
class C{  public void createRouterConfiguration(String clusterName) throws ConfigurationException {  String routerConfigFileName=getModulePropertiesFileName(ConfigurationConstants.TR_PROPERTIES,getClusterHome());  File routerConfigFile=new File(routerConfigFileName);  if (routerConfigFile.exists()) {    logger.debug(String.format("SQLRouter configuration already exists at '%s'",routerConfigFileName));    return;  }  RouterConfiguration config=new RouterConfiguration(null);  config.setClusterHome(getClusterHome());  config.setHost(ConfigurationConstants.TR_RMI_DEFAULT_HOST);  ArrayList<String> al=new ArrayList<String>();  al.add("localhost:9998");  config.setManagerList(al);  TungstenProperties configProps=new TungstenProperties();  configProps.extractProperties(config,true);  logger.debug("Writing out a router configuration to '" + routerConfigFileName + "'");  logger.debug("router.properties contains:" + configProps);  config.store(configProps,routerConfigFileName);}  }
class C{  public boolean isOperator(){  return meta.getType() == MetaCharacter.OPERATOR;}  }
class C{  protected final void fireColumnEvent(int idx,Object prev){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache asynchronous API example started.");    CacheConfiguration<Integer,String> cfg=new CacheConfiguration<>();    cfg.setCacheMode(CacheMode.PARTITIONED);    cfg.setName(CACHE_NAME);    try (IgniteCache<Integer,String> cache=ignite.getOrCreateCache(cfg)){      IgniteCache<Integer,String> asyncCache=cache.withAsync();      Collection<IgniteFuture<?>> futs=new ArrayList<>();      for (int i=0; i < 10; i++) {        asyncCache.put(i,String.valueOf(i));        futs.add(asyncCache.future());      }      futs.forEach(null);      asyncCache.get(1);      asyncCache.<String>future().listen(null);    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  static PTWidget build(final PropertyTable table){  PTWidget widget;  if (table.styleOfView == PropertyTable.VIEW_AS_FLAT_LIST) {    widget=new PTWidgetTable();  } else {    widget=new PTWidgetTree();  }  widget.setParentPropertyTable(table);  return widget;}  }
class C{  public static void main(String[] argv){  runFilter(new FirstOrder(),argv);}  }
class C{  public int squaredDistanceFrom(int x,int y){  int xDist=this.x + width / 2 - x;  int yDist=this.y + height / 2 - y;  return xDist * xDist + yDist * yDist;}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 91:{        return PyTokenTypes.YIELD_KEYWORD;      }case 102:    break;case 86:{    yypushback(getSpaceLength(yytext()));    if (zzCurrentPos != 0)     return PyTokenTypes.TRIPLE_QUOTED_STRING;    yybegin(PENDING_DOCSTRING);    return PyTokenTypes.DOCSTRING;  }case 103:break;case 2:{return PyTokenTypes.INTEGER_LITERAL;}case 104:break;case 18:{return PyTokenTypes.DIV;}case 105:break;case 19:{return PyTokenTypes.PERC;}case 106:break;case 8:{return PyTokenTypes.BACKSLASH;}case 107:break;case 27:{return PyTokenTypes.RPAR;}case 108:break;case 1:{return PyTokenTypes.BAD_CHARACTER;}case 109:break;case 30:{return PyTokenTypes.LBRACE;}case 110:break;case 73:{yybegin(IN_DOCSTRING_OWNER);return PyTokenTypes.DEF_KEYWORD;}case 111:break;case 35:{yypushback(1);yybegin(YYINITIAL);}case 112:break;case 89:{yybegin(IN_DOCSTRING_OWNER);return PyTokenTypes.CLASS_KEYWORD;}case 113:break;case 81:{yypushback(getSpaceLength(yytext()));return PyTokenTypes.DOCSTRING;}case 114:break;case 6:{return PyTokenTypes.MINUS;}case 115:break;case 7:{if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING; else return PyTokenTypes.SINGLE_QUOTED_STRING;}case 116:break;case 88:{return PyTokenTypes.BREAK_KEYWORD;}case 117:break;case 29:{return PyTokenTypes.RBRACKET;}case 118:break;case 66:{yypushback(getSpaceLength(yytext()));yybegin(YYINITIAL);return PyTokenTypes.DOCSTRING;}case 119:break;case 5:{return PyTokenTypes.DOT;}case 120:break;case 3:{return PyTokenTypes.IDENTIFIER;}case 121:break;case 26:{return PyTokenTypes.LPAR;}case 122:break;case 24:{return PyTokenTypes.LT;}case 123:break;case 47:{return PyTokenTypes.IN_KEYWORD;}case 124:break;case 90:{return PyTokenTypes.RAISE_KEYWORD;}case 125:break;case 78:{return PyTokenTypes.GTGTEQ;}case 126:break;case 9:{return PyTokenTypes.SPACE;}case 127:break;case 94:{return PyTokenTypes.EXCEPT_KEYWORD;}case 128:break;case 41:{return PyTokenTypes.IMAGINARY_LITERAL;}case 129:break;case 39:{return PyTokenTypes.SINGLE_QUOTED_STRING;}case 130:break;case 11:{return PyTokenTypes.FORMFEED;}case 131:break;case 13:{return PyTokenTypes.SEMICOLON;}case 132:break;case 23:{return PyTokenTypes.GT;}case 133:break;case 28:{return PyTokenTypes.LBRACKET;}case 134:break;case 33:{return PyTokenTypes.COLON;}case 135:break;case 79:{return PyTokenTypes.LTLTEQ;}case 136:break;case 53:{return PyTokenTypes.ATEQ;}case 137:break;case 84:{return PyTokenTypes.ELSE_KEYWORD;}case 138:break;case 21:{return PyTokenTypes.OR;}case 139:break;case 70:{yypushback(getSpaceLength(yytext()));if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;yybegin(PENDING_DOCSTRING);return PyTokenTypes.DOCSTRING;}case 140:break;case 69:{if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING; else return PyTokenTypes.TRIPLE_QUOTED_STRING;}case 141:break;case 51:{return PyTokenTypes.MULTEQ;}case 142:break;case 99:{return PyTokenTypes.FINALLY_KEYWORD;}case 143:break;case 92:{return PyTokenTypes.WHILE_KEYWORD;}case 144:break;case 16:{return PyTokenTypes.MULT;}case 145:break;case 95:{return PyTokenTypes.ASSERT_KEYWORD;}case 146:break;case 55:{return PyTokenTypes.FLOORDIV;}case 147:break;case 98:{return PyTokenTypes.GLOBAL_KEYWORD;}case 148:break;case 37:{if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING; else yybegin(YYINITIAL);return PyTokenTypes.SINGLE_QUOTED_STRING;}case 149:break;case 93:{return PyTokenTypes.LAMBDA_KEYWORD;}case 150:break;case 59:{return PyTokenTypes.XOREQ;}case 151:break;case 68:{return PyTokenTypes.FOR_KEYWORD;}case 152:break;case 17:{return PyTokenTypes.AT;}case 153:break;case 72:{return PyTokenTypes.NOT_KEYWORD;}case 154:break;case 14:{return PyTokenTypes.PLUS;}case 155:break;case 43:{return PyTokenTypes.MINUSEQ;}case 156:break;case 65:{return PyTokenTypes.NE;}case 157:break;case 32:{return PyTokenTypes.COMMA;}case 158:break;case 50:{return PyTokenTypes.EQEQ;}case 159:break;case 34:{return PyTokenTypes.TICK;}case 160:break;case 52:{return PyTokenTypes.EXP;}case 161:break;case 82:{return PyTokenTypes.TRIPLE_QUOTED_STRING;}case 162:break;case 101:{return PyTokenTypes.CONTINUE_KEYWORD;}case 163:break;case 64:{return PyTokenTypes.LTLT;}case 164:break;case 62:{return PyTokenTypes.LE;}case 165:break;case 71:{return PyTokenTypes.AND_KEYWORD;}case 166:break;case 42:{return PyTokenTypes.OR_KEYWORD;}case 167:break;case 4:{if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING);return PyTokenTypes.END_OF_LINE_COMMENT;}case 168:break;case 45:{yypushback(getSpaceLength(yytext()));if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;return PyTokenTypes.DOCSTRING;}case 169:break;case 87:{return PyTokenTypes.PASS_KEYWORD;}case 170:break;case 67:{yypushback(yylength() - 1);yybegin(PENDING_DOCSTRING);return PyTokenTypes.COLON;}case 171:break;case 36:{return PyTokenTypes.END_OF_LINE_COMMENT;}case 172:break;case 100:{yypushback(getSpaceLength(yytext()));if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;return PyTokenTypes.DOCSTRING;}case 173:break;case 58:{return PyTokenTypes.OREQ;}case 174:break;case 61:{return PyTokenTypes.GTGT;}case 175:break;case 20:{return PyTokenTypes.AND;}case 176:break;case 54:{return PyTokenTypes.DIVEQ;}case 177:break;case 96:{return PyTokenTypes.RETURN_KEYWORD;}case 178:break;case 97:{return PyTokenTypes.IMPORT_KEYWORD;}case 179:break;case 60:{return PyTokenTypes.GE;}case 180:break;case 49:{return PyTokenTypes.PLUSEQ;}case 181:break;case 80:{if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING; else yybegin(YYINITIAL);return PyTokenTypes.TRIPLE_QUOTED_STRING;}case 182:break;case 48:{return PyTokenTypes.IS_KEYWORD;}case 183:break;case 77:{return PyTokenTypes.FLOORDIVEQ;}case 184:break;case 40:{return PyTokenTypes.FLOAT_LITERAL;}case 185:break;case 38:{return PyTokenTypes.LINE_BREAK;}case 186:break;case 56:{return PyTokenTypes.PERCEQ;}case 187:break;case 75:{return PyTokenTypes.TRY_KEYWORD;}case 188:break;case 57:{return PyTokenTypes.ANDEQ;}case 189:break;case 15:{return PyTokenTypes.EQ;}case 190:break;case 83:{return PyTokenTypes.FROM_KEYWORD;}case 191:break;case 12:{if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING);return PyTokenTypes.LINE_BREAK;}case 192:break;case 76:{return PyTokenTypes.EXPEQ;}case 193:break;case 85:{return PyTokenTypes.ELIF_KEYWORD;}case 194:break;case 44:{return PyTokenTypes.RARROW;}case 195:break;case 31:{return PyTokenTypes.RBRACE;}case 196:break;case 46:{return PyTokenTypes.IF_KEYWORD;}case 197:break;case 10:{return PyTokenTypes.TAB;}case 198:break;case 63:{return PyTokenTypes.NE_OLD;}case 199:break;case 25:{return PyTokenTypes.TILDE;}case 200:break;case 74:{return PyTokenTypes.DEL_KEYWORD;}case 201:break;case 22:{return PyTokenTypes.XOR;}case 202:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void putViewState(int viewId,Object viewState,Context context){  OrientationChangeFragment fragment=getFragment(context);  CacheEntry<V,P> entry=fragment.get(viewId);  if (entry == null) {    throw new IllegalStateException("Try to put the ViewState into cache. However, the presenter hasn't been put into cache before. This is not allowed. Ensure that the presenter is saved before putting the ViewState into cache.");  } else {    entry.viewState=viewState;  }}  }
class C{  public dd addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public PLTransitionListenerManager(){  super();}  }
class C{  @Override public synchronized void stop(){  final double temp=get();  m_accumulatedTime=temp;  m_running=false;}  }
class C{  public PieLabelRecord(Comparable key,double angle,double baseY,TextBox label,double labelHeight,double gap,double linkPercent){  this.key=key;  this.angle=angle;  this.baseY=baseY;  this.allocatedY=baseY;  this.label=label;  this.labelHeight=labelHeight;  this.gap=gap;  this.linkPercent=linkPercent;}  }
class C{  public boolean askForResources(final ItemParserResult res,final EventRaiser npc,final Player player){  int amount=res.getAmount();  if (getMaximalAmount(player) < amount) {    npc.say("I can only " + getProductionActivity() + " "+ Grammar.quantityplnoun(amount,getProductName(),"a")+ " if you bring me "+ getRequiredResourceNamesWithHashes(amount)+ ".");    return false;  } else {    res.setAmount(amount);    npc.say("I need you to fetch me " + getRequiredResourceNamesWithHashes(amount) + " for this job, which will take "+ TimeUtil.approxTimeUntil(getProductionTime(amount))+ ". Do you have what I need?");    return true;  }}  }
class C{  public static ByteBuffer convertToSigned16BitSamples(Buffer buffer){  return convertToSigned16BitSamples(buffer.getSamples());}  }
class C{  public static void main(String[] argv){  runClusterer(new EM(),argv);}  }
class C{  public BatchId(String id){  this.id=id;}  }
class C{  public EchoOptions(){  super(Options.set,"Echo Options","Echo when options are set?",false);}  }
class C{  void cacheAuthorizationHeader(String callId,AuthorizationHeader authorization,int cacheTime){  String user=authorization.getUsername();  if (callId == null)   throw new NullPointerException("Call ID is null!");  if (authorization == null)   throw new NullPointerException("Null authorization domain");  List<AuthorizationHeader> authHeaders=authorizationHeaders.get(callId);  if (authHeaders == null) {    authHeaders=new LinkedList<AuthorizationHeader>();    authorizationHeaders.put(callId,authHeaders);  } else {    String realm=authorization.getRealm();    for (ListIterator<AuthorizationHeader> li=authHeaders.listIterator(); li.hasNext(); ) {      AuthorizationHeader authHeader=(AuthorizationHeader)li.next();      if (realm.equals(authHeader.getRealm())) {        li.remove();      }    }  }  authHeaders.add(authorization);  TimeoutTask timeoutTask=new TimeoutTask(callId,user);  if (cacheTime != -1)   this.timer.schedule(timeoutTask,cacheTime * 1000);}  }
class C{  private void print(String amt){  try {    System.out.println(amt + " = " + getAmtInWords(amt));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected Extent computeExtent(ExtrudedBoundaryInfo outerBoundary,Vec4 refPoint){  if (outerBoundary == null || outerBoundary.capVertices == null || outerBoundary.baseVertices == null)   return null;  Vec4[] topVertices=outerBoundary.capVertices;  Vec4[] botVertices=outerBoundary.baseVertices;  ArrayList<Vec4> allVertices=new ArrayList<Vec4>(2 * topVertices.length);  allVertices.addAll(Arrays.asList(topVertices));  allVertices.addAll(Arrays.asList(botVertices));  Box boundingBox=Box.computeBoundingBox(allVertices);  return boundingBox != null ? boundingBox.translate(refPoint) : null;}  }
class C{  public static boolean graphInPagStep0(Graph pag,Graph dag){  List<Node> pagNodes=pag.getNodes();  for (  Node pagNode : pagNodes) {    if (dag.getNode(pagNode.getName()) == null) {      return false;    }    if (dag.getNode(pagNode.getName()).getNodeType() != NodeType.MEASURED) {      return false;    }  }  return true;}  }
class C{  public static double[][] covariance(double[][] matrix,double[] means){  return scatter(matrix,means,matrix.length - 1,0);}  }
class C{  public static String toString(short[] array){  if (array == null) {    return NULL;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (i != 0) {      sb.append(',');    }    sb.append(array[i]);  }  return sb.toString();}  }
class C{  @SuppressWarnings("unchecked") private Segment<K,V> ensureSegment(int k){  final Segment<K,V>[] ss=this.segments;  long u=(k << SSHIFT) + SBASE;  Segment<K,V> seg;  if ((seg=(Segment<K,V>)UNSAFE.getObjectVolatile(ss,u)) == null) {    Segment<K,V> proto=ss[0];    int cap=proto.table.length;    float lf=proto.loadFactor;    int threshold=(int)(cap * lf);    HashEntry<K,V>[] tab=(HashEntry<K,V>[])new HashEntry<?,?>[cap];    if ((seg=(Segment<K,V>)UNSAFE.getObjectVolatile(ss,u)) == null) {      Segment<K,V> s=new Segment<K,V>(lf,threshold,tab);      while ((seg=(Segment<K,V>)UNSAFE.getObjectVolatile(ss,u)) == null) {        if (UNSAFE.compareAndSwapObject(ss,u,null,seg=s))         break;      }    }  }  return seg;}  }
class C{  public void testSquareToString(){  assertEquals("a1",TextIO.squareToString(Position.getSquare(0,0)));  assertEquals("h6",TextIO.squareToString(Position.getSquare(7,5)));  assertEquals("e4",TextIO.squareToString(Position.getSquare(4,3)));}  }
class C{  public static String bytesToHex(byte[] bytes){  char[] hexChars=new char[bytes.length * 2];  for (int j=0; j < bytes.length; j++) {    int v=bytes[j] & 0xFF;    hexChars[j * 2]=hexArray[v >>> 4];    hexChars[j * 2 + 1]=hexArray[v & 0x0F];  }  String rawHex=new String(hexChars);  return rawHex;}  }
class C{  public PopupFindMenu(){  super();  initialize();}  }
class C{  private int evaluateCost(BasicBlock bb){  int result=0;  for (Enumeration<Instruction> e=bb.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    if (!s.isBranch())     result++;  }  return result;}  }
class C{  public static String transform(InputSource xml,InputSource xsl,Map<String,Object> parameters) throws TransformerException, SAXException, IOException {  return transform(parse(xml,null,false),xsl,parameters);}  }
class C{  @SuppressWarnings("unchecked") public void insert(int id,Comparable<E> priority){  int i;  i=++_n;  ElementH p=new ElementH();  while (i > 1) {    int pIdx=i / 2;    ElementH eIdx=(ElementH)_elements[pIdx];    p.id=eIdx.id;    p.priority=eIdx.priority;    if (priority.compareTo((E)p.priority) > 0) {      break;    }    ElementH ei=(ElementH)_elements[i];    ei.id=p.id;    ei.priority=p.priority;    _pos[p.id]=i;    i=pIdx;  }  ElementH ei=(ElementH)_elements[i];  ei.id=id;  ei.priority=priority;  _pos[id]=i;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.459 -0500",hash_original_method="CF14EE2D4C6547AB65BEAA94D29C006C",hash_generated_method="AAE7B6C3C8CCFBA5AE2B6F0B28BC0BD7") public void draw(Canvas canvas,Rect location,Paint paint){  mRect.set(location);  canvas.addTaint(getTaint());  canvas.addTaint(location.getTaint());  canvas.addTaint(paint.getTaint());}  }
class C{  private static int toInterval(String interval) throws ScheduleException {  interval=interval.trim().toLowerCase();  int i=Caster.toIntValue(interval,0);  if (i == 0) {    interval=interval.trim();    if (interval.equals("once"))     return INTERVAL_ONCE; else     if (interval.equals("daily"))     return INTERVAL_DAY; else     if (interval.equals("day"))     return INTERVAL_DAY; else     if (interval.equals("monthly"))     return INTERVAL_MONTH; else     if (interval.equals("month"))     return INTERVAL_MONTH; else     if (interval.equals("weekly"))     return INTERVAL_WEEK; else     if (interval.equals("week"))     return INTERVAL_WEEK;    throw new ScheduleException("invalid interval definition [" + interval + "], valid values are [once,daily,monthly,weekly or number]");  }  if (i < 10) {    throw new ScheduleException("interval must be at least 10");  }  return i;}  }
class C{  public static int[] ints(int... elements){  return elements;}  }
class C{  public void invokeVirtual(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEVIRTUAL,owner,method,false);}  }
class C{  public static void cloneToResultTree(int node,int nodeType,DTM dtm,SerializationHandler rth,boolean shouldCloneAttributes) throws TransformerException {  try {switch (nodeType) {case DTM.TEXT_NODE:      dtm.dispatchCharactersEvents(node,rth,false);    break;case DTM.DOCUMENT_FRAGMENT_NODE:case DTM.DOCUMENT_NODE:  break;case DTM.ELEMENT_NODE:{  String ns=dtm.getNamespaceURI(node);  if (ns == null)   ns="";  String localName=dtm.getLocalName(node);  rth.startElement(ns,localName,dtm.getNodeNameX(node));  if (shouldCloneAttributes) {    SerializerUtils.addAttributes(rth,node);    SerializerUtils.processNSDecls(rth,node,nodeType,dtm);  }}break;case DTM.CDATA_SECTION_NODE:rth.startCDATA();dtm.dispatchCharactersEvents(node,rth,false);rth.endCDATA();break;case DTM.ATTRIBUTE_NODE:SerializerUtils.addAttribute(rth,node);break;case DTM.NAMESPACE_NODE:SerializerUtils.processNSDecls(rth,node,DTM.NAMESPACE_NODE,dtm);break;case DTM.COMMENT_NODE:XMLString xstr=dtm.getStringValue(node);xstr.dispatchAsComment(rth);break;case DTM.ENTITY_REFERENCE_NODE:rth.entityReference(dtm.getNodeNameX(node));break;case DTM.PROCESSING_INSTRUCTION_NODE:{rth.processingInstruction(dtm.getNodeNameX(node),dtm.getNodeValue(node));}break;default :throw new TransformerException("Can't clone node: " + dtm.getNodeName(node));}} catch (org.xml.sax.SAXException se) {throw new TransformerException(se);}}  }
class C{  private ParseException newParseException(String details) throws ParseException {  String fragment;  int end=Math.min(input.length(),upto + 1);  if (upto < 50) {    fragment=input.substring(0,end);  } else {    fragment="..." + input.substring(upto - 50,end);  }  return new ParseException(details + " at character offset " + upto+ "; fragment leading to this:\n"+ fragment,upto);}  }
class C{  public int lineno(){  return lineNumber;}  }
class C{  public int update(String table,ContentValues values,String whereClause,String[] whereArgs){  try {    openDB();    return mSQLiteDatabase.update(table,values,whereClause,whereArgs);  } catch (  Exception ex) {    ex.printStackTrace();    return -1;  }}  }
class C{  public Object plus(String s){  return getMetaClass().invokeMethod(this,"toString",new Object[]{}) + s;}  }
class C{  public static Pair<IAddress,Integer> calculateRequestRange(final BigInteger offset,final int size,final IAddress sectionStart,final IAddress sectionEnd){  final BigInteger availableBefore=offset.subtract(sectionStart.toBigInteger());  final BigInteger availableAfter=sectionEnd.toBigInteger().subtract(offset).add(BigInteger.ONE);  final BigInteger loadBefore=availableBefore.compareTo(BigInteger.valueOf(3L * size)) == -1 ? availableBefore : BigInteger.valueOf(3L * size);  final BigInteger loadAfter=availableAfter.compareTo(BigInteger.valueOf(3L * size)) == -1 ? availableAfter : BigInteger.valueOf(3L * size);  final BigInteger realOffset=offset.subtract(loadBefore);  final int realSize=(int)(loadBefore.add(loadAfter)).longValue();  return new Pair<IAddress,Integer>(new CAddress(realOffset),realSize);}  }
class C{  public static int visit(int x){  lastVisited=x;  return x;}  }
class C{  @Override public void rollback(){}  }
class C{  public boolean isElementVisible(Viewer viewer,Object element){  return isParentMatch(viewer,element) || isLeafMatch(viewer,element);}  }
class C{  public final int peepOrNull(){  return ((null != m_map) && (m_firstFree > 0)) ? m_map[m_firstFree - 1] : DTM.NULL;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.867 -0500",hash_original_method="26B374DF35690169D780ED0303365B37",hash_generated_method="C1310D0C442D41E97C20864B12FEEBBE") public Reader retrieveArticleInfo(int lowArticleNumber,int highArticleNumber) throws IOException {  return __retrieveArticleInfo(new String(lowArticleNumber + "-" + highArticleNumber));}  }
class C{  private IMPBuilder(){}  }
class C{  private static String binRangeString(double[] cutPoints,int j,int precision){  assert cutPoints != null;  int n=cutPoints.length;  assert 0 <= j && j <= n;  return j == 0 ? "" + "(" + "-inf"+ "-" + Utils.doubleToString(cutPoints[0],precision) + "]" : j == n ? "" + "(" + Utils.doubleToString(cutPoints[n - 1],precision) + "-"+ "inf"+ ")" : "" + "(" + Utils.doubleToString(cutPoints[j - 1],precision) + "-"+ Utils.doubleToString(cutPoints[j],precision)+ "]";}  }
class C{  public State duplicate(){  return new State(this,basicBlock,instructionIterator,patternElement,matchCount,currentMatch,bindingSet,canFork);}  }
class C{  @Override public int K(final Object ex,final FormObject formObj,final int actionID){  if (showMethods) {    System.out.println("DefaultActionHandler.K()");  }  final int result=javascript.execute(formObj,PdfDictionary.K,actionID,getKeyPressed(ex));  final int fontSize=formObj.getTextSize();  if (acrorend.getCompData() != null && (fontSize == 0 || fontSize == -1)) {    acrorend.getCompData().setAutoFontSize(formObj);  }  return result;}  }
class C{  public ColumnInformation(Buffer buffer){  this.buffer=buffer;  buffer.skipLengthEncodedBytes();  buffer.skipLengthEncodedBytes();  buffer.skipLengthEncodedBytes();  buffer.skipLengthEncodedBytes();  buffer.skipLengthEncodedBytes();  buffer.skipLengthEncodedBytes();  fixlength=buffer.readByte();  charsetNumber=buffer.readShort();  length=buffer.readInt();  type=MariaDbType.fromServer(buffer.readByte() & 0xff);  flags=buffer.readShort();  decimals=buffer.readByte();  int sqlType=type.getSqlType();  if ((sqlType == Types.BLOB || sqlType == Types.VARBINARY || sqlType == Types.BINARY || sqlType == Types.LONGVARBINARY) && !isBinary()) {    type=MariaDbType.VARCHAR;  }}  }
class C{  int updateEvaluationsFromServer() throws IOException {  checkInitialized();  if (!networkClient.ready())   return 0;  if (issueDataDownloaded.getCount() > 0)   return 0;  MutableCloudTask task=createTask("Checking " + getCloudName() + " for updates");  int count=0;  RecentEvaluations evals;  try {    int i=0;    do {      evals=networkClient.getRecentEvaluationsFromServer();      count+=mergeUpdatedEvaluations(evals);      task.update("found " + count + " so far...",0);    } while (evals.hasAskAgain() && evals.getAskAgain() && ++i < MAX_RECENT_EVALUATION_PAGES);  } catch (  ServerReturnedErrorCodeException e) {    task.failed(e.getMessage());    throw e;  }catch (  IOException e) {    if (getSigninState() == SigninState.SIGNED_IN) {      signOut(true);      getGuiCallback().showMessageDialog("A network error occurred while checking the " + getCloudName() + " for updates.\n"+ "\n"+ "You have been automatically signed out of the Cloud. Any reviews\n"+ "you add or change will only be stored on your computer if you save the\n"+ "analysis via the File->Save menu.\n"+ "\n"+ "To attempt to sign back in, click the Sign In button on the left.");    } else {      task.failed(Util.getNetworkErrorMessage(e));    }    throw e;  }catch (  RuntimeException e) {    task.failed(e.getClass().getSimpleName() + ": " + e.getMessage());    throw e;  } finally {    task.finished();  }  if (count > 0)   setStatusMsg(getCloudName() + ": found " + count+ " updated bug reviews");  return count;}  }
class C{  public static boolean cardMatches(Card card1,Card card2){  if (card1.getSuit() == card2.getSuit()) {    return true;  }  if (card1.getRank() == card2.getRank()) {    return true;  }  if (card1.getRank() == 8) {    return true;  }  return false;}  }
class C{  public static String bytesToHex(byte[] bytes){  char[] hexChars=new char[bytes.length * 2];  for (int j=0; j < bytes.length; j++) {    int v=bytes[j] & 0xFF;    hexChars[j * 2]=hexArray[v >>> 4];    hexChars[j * 2 + 1]=hexArray[v & 0x0F];  }  return new String(hexChars);}  }
class C{  public void writeToLuceneStream(IndexOutput outputStream,int k){  toCartesian();  for (int i=0; i < k * 2; ++i) {    try {      outputStream.writeInt(Float.floatToIntBits(coordinates[i]));    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public S_Display createS_Display(){  S_DisplayImpl s_Display=new S_DisplayImpl();  return s_Display;}  }
class C{  public boolean isUndefined(){  return (lat == 0 && lng == 0) || lat < -90 || lat > 90 || lng < -180 || lng > 180 || Double.isNaN(lat) || Double.isNaN(lng);}  }
class C{  private List<Node> parsePath(String pathString){  List<Node> nodes=new LinkedList<Node>();  StringTokenizer st=new StringTokenizer(pathString);  while (st.hasMoreElements()) {    String x=st.nextToken();    if (!st.hasMoreElements()) {      break;    }    String y=st.nextToken();    nodes.add(new Node(MathHelper.parseInt(x),MathHelper.parseInt(y)));  }  return nodes;}  }
class C{  public Skeleton(PrintWriter out){  this.out=out;}  }
class C{  public Block(NetworkParameters params,long version,Sha256Hash prevBlockHash,Sha256Hash merkleRoot,long time,long difficultyTarget,long nonce,List<Transaction> transactions){  super(params);  this.version=version;  this.prevBlockHash=prevBlockHash;  this.merkleRoot=merkleRoot;  this.time=time;  this.difficultyTarget=difficultyTarget;  this.nonce=nonce;  this.transactions=new LinkedList<Transaction>();  this.transactions.addAll(transactions);}  }
class C{  public ReplicationFailureException(String message){  super(message);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.MAPPING_RULE__TARGET:    setTarget((Target)null);  return;case MappingPackage.MAPPING_RULE__SOURCES:getSources().clear();return;}super.eUnset(featureID);}  }
class C{  public static boolean componentIsDisabledOnReadonly(UIComponent component){  Object disabledOrReadonly=null;  boolean result=false;  if (null != (disabledOrReadonly=component.getAttributes().get("disabled"))) {    if (disabledOrReadonly instanceof String) {      result=((String)disabledOrReadonly).equalsIgnoreCase("true");    } else {      result=disabledOrReadonly.equals(Boolean.TRUE);    }  }  if ((result == false) && null != (disabledOrReadonly=component.getAttributes().get("readonly"))) {    if (disabledOrReadonly instanceof String) {      result=((String)disabledOrReadonly).equalsIgnoreCase("true");    } else {      result=disabledOrReadonly.equals(Boolean.TRUE);    }  }  return result;}  }
class C{  public byte[] readRawBytes(final int size) throws IOException {  if (size < 0) {    throw InvalidProtocolBufferException.negativeSize();  }  if (totalBytesRetired + bufferPos + size > currentLimit) {    skipRawBytes(currentLimit - totalBytesRetired - bufferPos);    throw InvalidProtocolBufferException.truncatedMessage();  }  if (size <= bufferSize - bufferPos) {    final byte[] bytes=new byte[size];    System.arraycopy(buffer,bufferPos,bytes,0,size);    bufferPos+=size;    return bytes;  } else   if (size < BUFFER_SIZE) {    final byte[] bytes=new byte[size];    int pos=bufferSize - bufferPos;    System.arraycopy(buffer,bufferPos,bytes,0,pos);    bufferPos=bufferSize;    refillBuffer(true);    while (size - pos > bufferSize) {      System.arraycopy(buffer,0,bytes,pos,bufferSize);      pos+=bufferSize;      bufferPos=bufferSize;      refillBuffer(true);    }    System.arraycopy(buffer,0,bytes,pos,size - pos);    bufferPos=size - pos;    return bytes;  } else {    final int originalBufferPos=bufferPos;    final int originalBufferSize=bufferSize;    totalBytesRetired+=bufferSize;    bufferPos=0;    bufferSize=0;    int sizeLeft=size - (originalBufferSize - originalBufferPos);    final List<byte[]> chunks=new ArrayList<byte[]>();    while (sizeLeft > 0) {      final byte[] chunk=new byte[Math.min(sizeLeft,BUFFER_SIZE)];      int pos=0;      while (pos < chunk.length) {        final int n=(input == null) ? -1 : input.read(chunk,pos,chunk.length - pos);        if (n == -1) {          throw InvalidProtocolBufferException.truncatedMessage();        }        totalBytesRetired+=n;        pos+=n;      }      sizeLeft-=chunk.length;      chunks.add(chunk);    }    final byte[] bytes=new byte[size];    int pos=originalBufferSize - originalBufferPos;    System.arraycopy(buffer,originalBufferPos,bytes,0,pos);    for (    final byte[] chunk : chunks) {      System.arraycopy(chunk,0,bytes,pos,chunk.length);      pos+=chunk.length;    }    return bytes;  }}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public double dot(Vec3 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec3","dot","missingVector"));  }  return this.x * vector.x + this.y * vector.y + this.z * vector.z;}  }
class C{  public void historicalData(int reqId,String dateString,double open,double high,double low,double close,int volume,int tradeCount,double vwap,boolean hasGaps){  try {    volume=volume * 100;    if (m_historyDataRequests.containsKey(reqId)) {      Tradestrategy tradestrategy=m_historyDataRequests.get(reqId);      if (dateString.contains("finished-")) {        CandleSeries candleSeries=tradestrategy.getStrategyData().getBaseCandleSeries();        _log.debug("HistoricalData complete Req Id: " + reqId + " Symbol: "+ tradestrategy.getContract().getSymbol()+ " Tradingday: "+ tradestrategy.getTradingday().getOpen()+ " candles to saved: "+ candleSeries.getItemCount()+ " Contract Tradestrategies size:: "+ tradestrategy.getContract().getTradestrategies().size());        m_tradePersistentModel.persistCandleSeries(candleSeries);synchronized (m_historyDataRequests) {          m_historyDataRequests.remove(reqId);          m_historyDataRequests.notify();        }synchronized (tradestrategy.getContract().getTradestrategies()) {          this.fireHistoricalDataComplete(tradestrategy);          if (tradestrategy.getTradingday().getClose().isAfter(TradingCalendar.getDateTimeNowMarketTimeZone())) {            if (!this.isRealtimeBarsRunning(tradestrategy.getContract())) {              tradestrategy.getContract().addTradestrategy(tradestrategy);              this.onReqRealTimeBars(tradestrategy.getContract(),tradestrategy.getStrategy().getMarketData());            } else {              Contract contract=m_realTimeBarsRequests.get(tradestrategy.getContract().getId());              contract.addTradestrategy(tradestrategy);            }          }        }      } else {        ZonedDateTime date=null;        if (dateString.length() == 8) {          date=TradingCalendar.getZonedDateTimeFromDateString(dateString,"yyyyMMdd",TradingCalendar.MKT_TIMEZONE);        } else {          date=TradingCalendar.getZonedDateTimeFromMilli((Long.parseLong(dateString) * 1000));        }        if (tradestrategy.getBarSize() > 3600) {          date=TradingCalendar.getDateAtTime(date,tradestrategy.getTradingday().getOpen());        }        if (tradestrategy.getTradingday().getClose().isAfter(date)) {          if (backfillUseRTH == 1 && !TradingCalendar.isMarketHours(tradestrategy.getTradingday().getOpen(),tradestrategy.getTradingday().getClose(),date))           return;          BigDecimal price=(new BigDecimal(close)).setScale(SCALE,BigDecimal.ROUND_HALF_EVEN);          tradestrategy.getStrategyData().getBaseCandleSeries().getContract().setLastAskPrice(price);          tradestrategy.getStrategyData().getBaseCandleSeries().getContract().setLastBidPrice(price);          tradestrategy.getStrategyData().getBaseCandleSeries().getContract().setLastPrice(price);          tradestrategy.getStrategyData().buildCandle(date,open,high,low,close,volume,vwap,tradeCount,1,null);        }      }    }  } catch (  Exception ex) {    error(reqId,3260,ex.getMessage());  }}  }
class C{  public boolean isScale(){  return (type == TYPE_SCALE);}  }
class C{  public ValidationException(String message,ValidationExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;}  }
class C{  private static void printTotalsForAllResults(McfData mcfData){  System.out.println("Metric totals over all results:");  Map<String,String> totalsMap=mcfData.getTotalsForAllResults();  for (  Map.Entry<String,String> entry : totalsMap.entrySet()) {    System.out.println(entry.getKey() + " : " + entry.getValue());  }  System.out.println();}  }
class C{  public static boolean withinSetter(Tree.Declaration decl){  return withinSetter(decl.getDeclarationModel());}  }
class C{  public JSONBuffer appendKeyHash(Object key){  if (stack.empty() || stack.peek() != Operand.HASH) {    throw new JSONException("Appending key-value outside of hash context.");  }  addQuotedString(key);  buffer.append(":");  buffer.append("{");  stack.push(Operand.HASH);  return this;}  }
class C{  public static Object call1(Callable fun,Scriptable thisObj,Object arg0,Context cx,Scriptable scope){  return fun.call(cx,scope,thisObj,new Object[]{arg0});}  }
class C{  @Override public byte[] read(int length) throws IOException {  if (length > available()) {    throw new EndOfBufferException();  }  byte[] res=new byte[length];  System.arraycopy(buffer,read_pos,res,0,length);  read_pos=read_pos + length;  return res;}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  private void onWaitReleased(SceKernelThreadInfo thread){switch (thread.waitType) {case PSP_WAIT_THREAD_END:    if (thread.wait.ThreadEnd_returnExitStatus) {      thread.cpuContext._v0=ERROR_KERNEL_WAIT_STATUS_RELEASED;    }  break;case PSP_WAIT_EVENTFLAG:Managers.eventFlags.onThreadWaitReleased(thread);break;case PSP_WAIT_SEMA:Managers.semas.onThreadWaitReleased(thread);break;case JPCSP_WAIT_UMD:Modules.sceUmdUserModule.onThreadWaitReleased(thread);break;case PSP_WAIT_MUTEX:Managers.mutex.onThreadWaitReleased(thread);break;case PSP_WAIT_LWMUTEX:Managers.lwmutex.onThreadWaitReleased(thread);break;case PSP_WAIT_MSGPIPE:Managers.msgPipes.onThreadWaitReleased(thread);break;case PSP_WAIT_MBX:Managers.mbx.onThreadWaitReleased(thread);break;case PSP_WAIT_FPL:Managers.fpl.onThreadWaitReleased(thread);break;case PSP_WAIT_VPL:Managers.vpl.onThreadWaitReleased(thread);break;case JPCSP_WAIT_GE_LIST:case JPCSP_WAIT_NET:case JPCSP_WAIT_AUDIO:case JPCSP_WAIT_DISPLAY_VBLANK:case JPCSP_WAIT_CTRL:case JPCSP_WAIT_USB:thread.cpuContext._v0=ERROR_KERNEL_WAIT_STATUS_RELEASED;break;}}  }
class C{  @SuppressWarnings("unchecked") private List<Event> decodeEventStream(final BitPackedBuffer decoder,final int eventIdTypeid,final Map<Integer,Pair<Integer,String>> eventTypeMap,final boolean decodeUserId,final EventFactory ef,final int[] playerIdUserIdMap){  final int svaruint32Typeid=this.svaruint32Typeid;  final int replayUseridTypeid=this.replayUseridTypeid;  final String userIdProp=baseBuild >= 24764 ? Event.F_USER_ID : Event.F_PLAYER_ID;  final int extraEntriesCount=decodeUserId ? 4 : 3;  final List<Event> eventList=new ArrayList<>();  int loop=0;  int userId=decodeUserId ? 0 : -1;  while (decoder.hasRemaining()) {    final Pair<String,Integer> delta=(Pair<String,Integer>)decoder.instance(svaruint32Typeid);    loop+=delta.value2;    if (decodeUserId)     userId=((Map<String,Integer>)decoder.instance(replayUseridTypeid)).get(userIdProp);    final int eventId=(Integer)decoder.instance(eventIdTypeid);    final Pair<Integer,String> eventType=eventTypeMap.get(eventId);    final Map<String,Object> eventStruct=(Map<String,Object>)decoder.instance(eventType.value1,extraEntriesCount);    eventStruct.put(Event.F_ID,eventId);    eventStruct.put(Event.F_NAME,eventType.value2);    eventStruct.put(Event.F_LOOP,loop);    if (decodeUserId) {      eventStruct.put(userIdProp,userId);      if (baseBuild < 24764)       userId=playerIdUserIdMap[userId];    }    eventList.add(ef.create(eventStruct,eventId,eventType.value2,loop,userId));    decoder.byte_align();  }  return eventList;}  }
class C{  public int findFirstVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),false,true);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  public Word(String f,String pos,int start,int end){  this(f,pos,null,start,end);}  }
class C{  public HashCodeBuilder append(char[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (int i=0; i < array.length; i++) {      append(array[i]);    }  }  return this;}  }
class C{  public static ObjectAnimator ofFloat(Object target,String propertyName,float... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setFloatValues(values);  return anim;}  }
class C{  @NotNull public static SqlArray of(@NotNull String type,@NotNull Collection<?> values){  return new SqlArray(type,values);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  if (newRecord) {    StringBuffer sb=new StringBuffer("INSERT INTO AD_TreeNodeCMC " + "(AD_Client_ID,AD_Org_ID, IsActive,Created,CreatedBy,Updated,UpdatedBy, " + "AD_Tree_ID, Node_ID, Parent_ID, SeqNo) "+ "VALUES (").append(getAD_Client_ID()).append(",0, 'Y', SysDate, 0, SysDate, 0,").append(getAD_Tree_ID()).append(",").append(get_ID()).append(", 0, 999)");    int no=DB.executeUpdate(sb.toString(),get_TrxName());    if (no > 0)     log.fine("#" + no + " - TreeType=CMC"); else     log.warning("#" + no + " - TreeType=CMC");    return no > 0;  }  return success;}  }
class C{  public void removeReceiptReceivedListener(ReceiptReceivedListener listener){  receiptReceivedListeners.remove(listener);}  }
class C{  private void insertPatternInTable(StepPattern pattern,ElemTemplate template){  String target=pattern.getTargetString();  if (null != target) {    String pstring=template.getMatch().getPatternString();    TemplateSubPatternAssociation association=new TemplateSubPatternAssociation(template,pattern,pstring);    boolean isWildCard=association.isWild();    TemplateSubPatternAssociation head=isWildCard ? m_wildCardPatterns : getHead(target);    if (null == head) {      if (isWildCard)       m_wildCardPatterns=association; else       putHead(target,association);    } else {      insertAssociationIntoList(head,association,false);    }  }}  }
class C{  public void paintMenuBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public Vector<Command> parse(String commandBuf,boolean parseFlags){  Vector<Command> commandList=new Vector<Command>();  String[] commands=commandBuf.split(";");  for (  String commandLine : commands) {    Command command=new Command(commandLine);    String splitPattern=null;    if (parseFlags) {      splitPattern="\\s+|\\s+-\\b|'|\"";    } else {      splitPattern="\\s+|'|\"";    }    Vector<String> noBlanks=new Vector<String>();    noBlanks.toArray(new String[noBlanks.size()]);    String[] tokens=commandLine.split(splitPattern);    for (    String token : tokens) {      if (!token.trim().equals(""))       noBlanks.add(token.trim());    }    if (noBlanks.size() == 0) {      return null;    }    int i=0;    while (true) {      if (i == noBlanks.size())       break;      String currentToken=noBlanks.get(i);      if (parseFlags && currentToken.trim().startsWith(FLAG_INTRODUCER)) {        char[] flagChars=currentToken.trim().toCharArray();        for (int j=1; j < flagChars.length; j++) {          char flagChar=flagChars[j];          if (flagChar == LONG_FLAG)           command.setIsLong(true); else           if (flagChar == RECURSIVE_FLAG)           command.setIsRecursive(true); else           if (flagChar == PARENTS_FLAG)           command.setIncludeParents(true); else           if (flagChar == ABSOLUTE_FLAG)           command.setIsAbsolute(true); else           if (flagChar == BACKGROUND_FLAG) {            if (i + 1 == noBlanks.size() && (j + 1 == flagChars.length)) {              command.setIsBackground(true);            } else             CLUtils.println("The token '&' can only appear at the end of a command");          }        }      } else       if (currentToken.trim().equals(REDIRECT_IN_TOKEN)) {        if (i + 1 < noBlanks.size()) {          String input=noBlanks.get(++i);          command.setIsRedirectInput(true,input);        } else {          CLUtils.println("No arg supplied for input redirection");        }      } else       if (currentToken.trim().equals(REDIRECT_OUT_TOKEN)) {        if (i + 1 < noBlanks.size()) {          String output=noBlanks.get(++i);          command.setIsRedirectOutput(true,output);        } else {          CLUtils.println("No arg supplied for output redirection");        }      } else       if (currentToken.trim().endsWith(BACKGROUND_TOKEN)) {        if (i + 1 == noBlanks.size()) {          command.setIsBackground(true);          if (currentToken.trim().length() > 1) {            currentToken=currentToken.trim().substring(0,currentToken.indexOf(BACKGROUND_TOKEN));            command.addToken(currentToken);          }        } else         CLUtils.println("The token '&' can only appear at the end of a command");      } else {        command.addToken(currentToken);      }      i++;    }    if (command.getTokens() != null) {      commandList.add(command);    }  }  return commandList;}  }
class C{  public static <V,E>Function<V,Double> averageDistances(Hypergraph<V,E> g){  final ClosenessCentrality<V,E> cc=new ClosenessCentrality<V,E>(g,new UnweightedShortestPath<V,E>(g));  return new VertexScoreTransformer<V,Double>(cc);}  }
class C{  private static int DefineClass(JNIEnvironment env,Address classNameAddress,int classLoader,Address data,int dataLen){  if (traceJNI)   VM.sysWrite("JNI called: DefineClass  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    String classString=null;    if (!classNameAddress.isZero()) {      JNIGenericHelpers.createStringFromC(classNameAddress);    }    ClassLoader cl;    if (classLoader == 0) {      cl=RVMClass.getClassLoaderFromStackFrame(1);    } else {      cl=(ClassLoader)env.getJNIRef(classLoader);    }    AddressInputStream reader=new AddressInputStream(data,Extent.fromIntZeroExtend(dataLen));    final RVMType vmType=RVMClassLoader.defineClassInternal(classString,reader,cl);    return env.pushJNIRef(vmType.getClassForType());  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  @Override public boolean hasNext(){  return next != null;}  }
class C{  public String[] readAllLines(){  ArrayList<String> lines=new ArrayList<String>();  while (hasNextLine()) {    lines.add(readLine());  }  return lines.toArray(new String[0]);}  }
class C{  public void testSyncCancellation_doesNotCloseActivityIfNotUserInitiated(){  mController.init();  mFakeEventBus.post(new SyncCanceledEvent());  verify(mMockUi,times(0)).finish();}  }
class C{  public void indentWithSpaces(){  indentWithSpaces(4);}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  WhiteboxRaster image2;  int cols=0;  int rows=0;  double noData=-32768;  double noDataImage2=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, b, i;  String inputFilesString=null;  String[] imageFiles;  Object[] images;  double[] imageTotals;  long[] imageNs;  double[] imageAverages;  double image1TotalDeviation=0;  double image2TotalDeviation=0;  double totalProductDeviations=0;  double[][] correlationMatrix;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified for an image correlation.");    return;  }  try {    imageTotals=new double[numImages];    imageNs=new long[numImages];    imageAverages=new double[numImages];    correlationMatrix=new double[numImages][numImages];    for (a=0; a < numImages; a++) {      for (b=0; b < numImages; b++) {        correlationMatrix[a][b]=-99;      }    }    double[] data;    double[] data2;    updateProgress("Calculating image averages:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotals[a]+=data[col];            imageNs[a]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();      imageAverages[a]=imageTotals[a] / imageNs[a];      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    updateProgress("Calculating the correlation matrix:",0);    i=0;    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      for (b=0; b <= i; b++) {        if (a == b) {          correlationMatrix[a][b]=1.0;        } else {          image1TotalDeviation=0;          image2TotalDeviation=0;          totalProductDeviations=0;          image2=new WhiteboxRaster(imageFiles[b],"r");          noDataImage2=image2.getNoDataValue();          for (row=0; row < rows; row++) {            data=image.getRowValues(row);            data2=image2.getRowValues(row);            for (col=0; col < cols; col++) {              if (data[col] != noData && data2[col] != noDataImage2) {                image1TotalDeviation+=(data[col] - imageAverages[a]) * (data[col] - imageAverages[a]);                image2TotalDeviation+=(data2[col] - imageAverages[b]) * (data2[col] - imageAverages[b]);                totalProductDeviations+=(data[col] - imageAverages[a]) * (data2[col] - imageAverages[b]);              }            }            if (cancelOp) {              cancelOperation();              return;            }          }          image2.close();          correlationMatrix[a][b]=totalProductDeviations / (Math.sqrt(image1TotalDeviation * image2TotalDeviation));        }      }      i++;      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating the correlation matrix:",(int)progress);    }    String retstr=null;    retstr="IMAGE CORRELATION MATRIX\n\n";    String headers="\t";    for (a=0; a < numImages; a++) {      headers=headers + "Image" + (a + 1)+ "\t";    }    retstr+=headers;    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numImages; a++) {      retstr=retstr + "\nImage" + (a + 1)+ "\t";      for (b=0; b < numImages; b++) {        if (correlationMatrix[a][b] != -99) {          if (correlationMatrix[a][b] >= 0) {            retstr=retstr + "  " + df.format(correlationMatrix[a][b])+ "\t";          } else {            retstr=retstr + df.format(correlationMatrix[a][b]) + "\t";          }        } else {          retstr=retstr + "\t";        }      }    }    retstr=retstr + "\n\n";    String shortFileName;    int j, k;    for (a=0; a < numImages; a++) {      j=imageFiles[a].toString().lastIndexOf(File.separator);      k=imageFiles[a].toString().lastIndexOf(".");      shortFileName=imageFiles[a].toString().substring(j + 1,k);      retstr=retstr + "Image" + (a + 1)+ " = "+ shortFileName+ "\n";    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void caretUpdate(CaretEvent e){  timer.restart();}  }
class C{  public static void info(String s){  System.out.println("INFO: " + s);}  }
class C{  public static BufferedImage readImageFromYUVorGray(InputStream in) throws IOException {  BufferedImage img=(in instanceof ImageInputStream) ? ImageIO.read((ImageInputStream)in) : ImageIO.read(in);  return img;}  }
class C{  public void clear(){  throw new UnsupportedOperationException();}  }
class C{  public Offset toOffset(){  return new Offset(value);}  }
class C{  public final boolean contains(Vec4 point){  if (point == null) {    throw new IllegalArgumentException("Point Is Null");  }  if (this.far.dot(point) <= 0)   return false;  if (this.left.dot(point) <= 0)   return false;  if (this.right.dot(point) <= 0)   return false;  if (this.top.dot(point) <= 0)   return false;  if (this.bottom.dot(point) <= 0)   return false;  if (this.near.dot(point) <= 0)   return false;  return true;}  }
class C{  public Expression build(String path) throws Exception {  Expression expression=cache.fetch(path);  if (expression == null) {    return create(path);  }  return expression;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void initWith(Integer firstHop){  this.unvisited=new PriorityQueue<Integer>(PQ_INIT_SIZE,new DistanceComparator());  this.visited=new HashSet<Integer>();  this.prevNodes=new HashMap<Integer,Integer>();  this.distancesFromStart=new DistanceMap();  this.distancesFromStart.put(firstHop,0);  this.unvisited.add(firstHop);}  }
class C{  protected void describeOtherFeatures(){  g.add(aService,SD.feature,SD.BasicFederatedQuery);  if (tripleStore.isQuads()) {    g.add(aService,SD.feature,SD.UnionDefaultGraph);    g.add(aService,SD.feature,ModeQuads);  } else   if (tripleStore.isStatementIdentifiers()) {    g.add(aService,SD.feature,ModeSids);  } else {    g.add(aService,SD.feature,ModeTriples);  }  if (tripleStore.getLexiconRelation().isTextIndex()) {    g.add(aService,SD.feature,TextIndexValueCentric);  }  if (tripleStore.getLexiconRelation().isSubjectCentricTextIndex()) {    g.add(aService,SD.feature,TextIndexSubjectCentric);  }  final Properties properties=tripleStore.getProperties();  if (Boolean.valueOf(properties.getProperty(BigdataSail.Options.TRUTH_MAINTENANCE,BigdataSail.Options.DEFAULT_TRUTH_MAINTENANCE))) {    g.add(aService,SD.feature,TruthMaintenance);  }  if (Boolean.valueOf(properties.getProperty(BigdataSail.Options.ISOLATABLE_INDICES,BigdataSail.Options.DEFAULT_ISOLATABLE_INDICES))) {    g.add(aService,SD.feature,IsolatableIndices);  }  if (isMapgraphCompatible()) {    g.add(aService,SD.feature,MapgraphCompatible);    if (isMapgraphAccelerated()) {      g.add(aService,SD.feature,MapgraphAcceleration);    }  }{    final IIndexManager indexManager=tripleStore.getIndexManager();    if (indexManager instanceof IJournal) {      final IJournal jnl=(IJournal)indexManager;      final Quorum<HAGlue,QuorumService<HAGlue>> quorum=jnl.getQuorum();      if (quorum != null) {        final int k=quorum.replicationFactor();        g.add(aService,SD.ReplicationFactor,tripleStore.getValueFactory().createLiteral(k));        g.add(aService,SD.feature,HighlyAvailable);      }    } else     if (indexManager instanceof IBigdataFederation) {      g.add(aService,SD.feature,ScaleOut);    }  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_album);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);}  }
class C{  public static Tuple max(Iterator tuples,String field){  return max(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  void poll(long qAddr){  lrus[LruStripe.order(qAddr,mem)].poll(qAddr);}  }
class C{  public boolean compare(Object expected,Object current){  if (current != null) {    equal=current.equals(expected);  } else   if (expected != null) {    equal=expected.equals(1.0);  }  return equal;}  }
class C{  public void propertyChanged(String name,String value,String prio) throws DOMException {  ((SVGOMDocument)ownerDocument).overrideStylePropertyChanged(SVGStylableElement.this,name,value,prio);}  }
class C{  public CSVPrinter(final Appendable out,final CSVFormat format){  Assertions.notNull(out,"out");  Assertions.notNull(format,"format");  this.out=out;  this.format=format;  this.format.validate();}  }
class C{  TunnelState tunnelState(){  return tunnelState;}  }
class C{  private AddCloudHostWorkflowService.State buildValidStartState(TaskState.TaskStage stage){  AddCloudHostWorkflowService.State startState=new AddCloudHostWorkflowService.State();  startState.taskState=new TaskState();  startState.taskState.stage=stage;  startState.controlFlags=ControlFlags.CONTROL_FLAG_OPERATION_PROCESSING_DISABLED;  startState.hostServiceLink="hostServiceLink1";  return startState;}  }
class C{  public static ShoppingCartItem makeItem(Integer cartLocation,String productId,BigDecimal selectedAmount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool,Boolean triggerPriceRulesBool,String parentProductId,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  Delegator delegator=cart.getDelegator();  GenericValue product=findProduct(delegator,skipProductChecks.booleanValue(),prodCatalogId,productId,cart.getLocale());  GenericValue parentProduct=null;  if (parentProductId != null) {    try {      parentProduct=EntityQuery.use(delegator).from("Product").where("productId",parentProductId).cache().queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);    }  }  return makeItem(cartLocation,product,selectedAmount,quantity,unitPrice,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,shipBeforeDate,shipAfterDate,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,cart,triggerExternalOpsBool,triggerPriceRulesBool,parentProduct,skipInventoryChecks,skipProductChecks);}  }
class C{  public void putInt(int key,int value){  map.put(key,value);}  }
class C{  public ZipError(String s){  super(s);}  }
class C{  private void runRScripts(){  System.out.println("\nRunning R:");  (new File(workingDirectory + "/ROutput")).mkdir();  runSystemCall("\"" + pathToRScriptExe + "\" \""+ "RScripts/analysis_main.R\"",new File(workingDirectory));}  }
class C{  @GET @Path("/{id}/refresh-matched-pools") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public StoragePoolList refreshMatchedStoragePools(@PathParam("id") URI id){  return refreshMatchedPools(VirtualPool.Type.block,id);}  }
class C{  @Override protected void validate(){}  }
class C{  @Override public boolean isFactoryForType(Object type){  return supportedTypes.contains(type) || super.isFactoryForType(type);}  }
class C{  protected static int is387_FPC(Instruction s,int trueCost){  Operand val=Binary.getVal2(s);  if (val instanceof FloatConstantOperand) {    FloatConstantOperand fc=(FloatConstantOperand)val;    if (fc.value == 1.0f) {      return trueCost;    } else     if (fc.value == 0.0f) {      return trueCost;    } else     if (fc.value == (float)Math.PI) {      return trueCost;    } else     if (fc.value == (float)LG2) {      return trueCost;    } else     if (fc.value == (float)LN2) {      return trueCost;    } else     if (fc.value == (float)L2E) {      return trueCost;    } else     if (fc.value == (float)L2T) {      return trueCost;    }  } else {    DoubleConstantOperand dc=(DoubleConstantOperand)val;    if (dc.value == 1.0) {      return trueCost;    } else     if (dc.value == 0.0) {      return trueCost;    } else     if (dc.value == Math.PI) {      return trueCost;    } else     if (dc.value == LG2) {      return trueCost;    } else     if (dc.value == LN2) {      return trueCost;    } else     if (dc.value == L2E) {      return trueCost;    } else     if (dc.value == L2T) {      return trueCost;    }  }  return INFINITE;}  }
class C{  private void removeTextDecorationRecursive(Component cmp,CSSElement selector){  if (cmp instanceof Container) {    Container cont=(Container)cmp;    for (int i=0; i < cont.getComponentCount(); i++) {      removeTextDecorationRecursive(cont.getComponentAt(i),selector);    }  } else   if (cmp instanceof Label) {    int styles=getApplicableStyles(cmp,selector);    if ((styles & STYLE_UNSELECTED) != 0) {      cmp.getUnselectedStyle().setTextDecoration(Style.TEXT_DECORATION_NONE);    }    if ((styles & STYLE_SELECTED) != 0) {      cmp.getSelectedStyle().setTextDecoration(Style.TEXT_DECORATION_NONE);    }    if ((styles & STYLE_PRESSED) != 0) {      ((HTMLLink)cmp).getPressedStyle().setTextDecoration(Style.TEXT_DECORATION_NONE);    }  }}  }
class C{  public RequestHandle post(String url,ResponseHandlerInterface responseHandler){  return post(null,url,null,responseHandler);}  }
class C{  public DependencyContainer add(Dependency dependency){  if (dependency == this)   throw new IllegalArgumentException("Can't add self as a dependency.");  if (!_dependencyList.contains(dependency))   _dependencyList.add(dependency);  return this;}  }
class C{  @Nullable public Method firstMethod(Class<?> cls){  assert cls != null;  List<Method> l=methods(cls);  return l.isEmpty() ? null : l.get(0);}  }
class C{  public synchronized void ensureUpdated(){}  }
class C{  public static void register(){  DdmServer.registerHandler(CHUNK_HPIF,mInstance);  DdmServer.registerHandler(CHUNK_HPSG,mInstance);  DdmServer.registerHandler(CHUNK_HPDU,mInstance);  DdmServer.registerHandler(CHUNK_HPDS,mInstance);  DdmServer.registerHandler(CHUNK_NHSG,mInstance);  DdmServer.registerHandler(CHUNK_HPGC,mInstance);  DdmServer.registerHandler(CHUNK_REAE,mInstance);  DdmServer.registerHandler(CHUNK_REAQ,mInstance);  DdmServer.registerHandler(CHUNK_REAL,mInstance);}  }
class C{  @Override public void close() throws SQLException {  this.connection.close();  this.connection=null;}  }
class C{  protected void sequence_StandaloneBlock(ISerializationContext context,StandaloneBlock semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.STANDALONE_BLOCK__BLOCK) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.STANDALONE_BLOCK__BLOCK));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getStandaloneBlockAccess().getBlockBlockParserRuleCall_1_0(),semanticObject.getBlock());  feeder.finish();}  }
class C{  @Override public void addView(final View child,final int index,final ViewGroup.LayoutParams params){  super.addView(child,index,params);  mOverlay.bringToFront();}  }
class C{  StaticModel(final int[] counts){  mCounts=new int[counts.length + 1];  int sofar=0;  for (int i=1; i <= counts.length; i++) {    sofar+=counts[i - 1] + 1;    mCounts[i]=sofar;  }  mTotalCount=mCounts[mCounts.length - 1];}  }
class C{  public AttributesImpl atts(){  return theAtts;}  }
class C{  public static ASTQueryContainer parseQuery(String query) throws TokenMgrError, ParseException {  SyntaxTreeBuilder stb=new SyntaxTreeBuilder(new StringReader(query));  return stb.QueryContainer();}  }
class C{  public static boolean isBuiltIn(String function){  return BUILT_IN.contains(function);}  }
class C{  @Override public boolean isActive(){  return false;}  }
class C{  protected void createDatasourceDefinitions(StringBuilder sb,LocalContainer container) throws IOException {  for (  DataSource ds : getDataSources()) {    sb.append("\n");    sb.append("<New id=\"" + ds.getId() + "\" class=\"org.eclipse.jetty.plus.jndi.Resource\">\n");    sb.append("  <Arg>" + ds.getJndiLocation() + "</Arg>\n");    sb.append("  <Arg>\n");    sb.append("    <New class=\"com.mchange.v2.c3p0.ComboPooledDataSource\">\n");    sb.append("      <Set name=\"driverClass\">" + ds.getDriverClass() + "</Set>\n");    sb.append("      <Set name=\"jdbcUrl\">" + ds.getUrl() + "</Set>\n");    sb.append("      <Set name=\"user\">" + ds.getUsername() + "</Set>\n");    sb.append("      <Set name=\"password\">" + ds.getPassword() + "</Set>\n");    sb.append("    </New>\n");    sb.append("  </Arg>\n");    sb.append("</New>\n");  }  InputStream mchangeCommonsReader=getClass().getClassLoader().getResourceAsStream("org/codehaus/cargo/container/jetty/datasource/mchange-commons-java.jar");  String mchangeCommonsFile=getFileHandler().append(getHome(),"lib/ext/mchange-commons-java.jar");  OutputStream mchangeCommonsWriter=getFileHandler().getOutputStream(mchangeCommonsFile);  try {    getFileHandler().copy(mchangeCommonsReader,mchangeCommonsWriter);  }  finally {    mchangeCommonsWriter.close();    mchangeCommonsWriter=null;    System.gc();  }  InputStream c3p0Reader=getClass().getClassLoader().getResourceAsStream("org/codehaus/cargo/container/jetty/datasource/c3p0.jar");  String c3p0File=getFileHandler().append(getHome(),"lib/ext/c3p0.jar");  OutputStream c3p0Writer=getFileHandler().getOutputStream(c3p0File);  try {    getFileHandler().copy(c3p0Reader,c3p0Writer);  }  finally {    c3p0Writer.close();    c3p0Writer=null;    System.gc();  }  InstalledLocalContainer installedContainer=(InstalledLocalContainer)container;  installedContainer.addExtraClasspath(mchangeCommonsFile);  installedContainer.addExtraClasspath(c3p0File);}  }
class C{  private static void reverseDisplay(String value,int high){  if (high >= 0) {    System.out.print(value.charAt(high));    reverseDisplay(value,high - 1);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypeRefsPackage.BOUND_THIS_TYPE_REF__AST_STRUCTURAL_MEMBERS:    return ((InternalEList<?>)getAstStructuralMembers()).basicRemove(otherEnd,msgs);case TypeRefsPackage.BOUND_THIS_TYPE_REF__GEN_STRUCTURAL_MEMBERS:  return ((InternalEList<?>)getGenStructuralMembers()).basicRemove(otherEnd,msgs);case TypeRefsPackage.BOUND_THIS_TYPE_REF__POSTPONED_SUBSTITUTIONS:return ((InternalEList<?>)getPostponedSubstitutions()).basicRemove(otherEnd,msgs);case TypeRefsPackage.BOUND_THIS_TYPE_REF__ACTUAL_THIS_TYPE_REF:return basicSetActualThisTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void addRawData(Map<String,Object> rawData){  if (rawData != null && !rawData.isEmpty())   this.rawData.add(rawData);}  }
class C{  Iterator iter(){  return httpMonItemsHolder.iterator();}  }
class C{  public static int linkShaderProgram(GL2 gl,int[] shaders) throws ShaderCompilationException {  int[] error=new int[1];  int shaderprogram=gl.glCreateProgram();  for (  int shader : shaders) {    gl.glAttachShader(shaderprogram,shader);  }  gl.glLinkProgram(shaderprogram);  gl.glValidateProgram(shaderprogram);  gl.glGetObjectParameterivARB(shaderprogram,GL2.GL_OBJECT_INFO_LOG_LENGTH_ARB,error,0);  if (error[0] > 1) {    byte[] info=new byte[error[0]];    gl.glGetInfoLogARB(shaderprogram,info.length,error,0,info,0);    String out=new String(info);    gl.glDeleteProgram(shaderprogram);    throw new ShaderCompilationException("Shader compilation error: " + out);  }  return shaderprogram;}  }
class C{  private <T>InjectScope<T> findScope(AnnotatedElement annElement){  for (  Annotation ann : annElement.getAnnotations()) {    Class<? extends Annotation> annType=ann.annotationType();    if (annType.isAnnotationPresent(Scope.class)) {      Supplier<InjectScope<T>> scopeGen=(Supplier)_scopeMap.get(annType);      if (scopeGen != null) {        return scopeGen.get();      } else {        log.fine(L.l("@{0} is an unknown scope",annType.getSimpleName()));      }    }  }  return new InjectScopeFactory<>();}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  public static String readStringFromUrlGeneric(String url) throws IOException {  InputStream is=null;  URL urlObj=null;  String responseString=PcConstants.NA;  try {    urlObj=new URL(url);    URLConnection con=urlObj.openConnection();    con.setConnectTimeout(ParallecGlobalConfig.urlConnectionConnectTimeoutMillis);    con.setReadTimeout(ParallecGlobalConfig.urlConnectionReadTimeoutMillis);    is=con.getInputStream();    BufferedReader rd=new BufferedReader(new InputStreamReader(is,Charset.forName("UTF-8")));    responseString=PcFileNetworkIoUtils.readAll(rd);  }  finally {    if (is != null) {      is.close();    }  }  return responseString;}  }
class C{  public static ResultSet query(Connection conn,String sql) throws SQLException {  return conn.createStatement().executeQuery(sql);}  }
class C{  public Vec3 pointAt(double distance,Vec3 result){  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Line","pointAt","missingResult"));  }  result.x=this.origin.x + this.direction.x * distance;  result.y=this.origin.y + this.direction.y * distance;  result.z=this.origin.z + this.direction.z * distance;  return result;}  }
class C{  private void detach(){  if (prevTakeIndex >= 0) {    prevTakeIndex=DETACHED;    itrs.doSomeSweeping(true);  }}  }
class C{  static String key(String... names){  return Stream.of(names).filter(null).collect(Collectors.joining(DELIM));}  }
class C{  public CViewsToProjectHandler(final JFrame parent){  super(CViewTransferable.VIEW_FLAVOR);  Preconditions.checkNotNull(parent,"IE01934: Parent argument can not be null");  m_parent=parent;}  }
class C{  static Chunk readChunkHeader(ByteBuffer buff,long start){  int pos=buff.position();  byte[] data=new byte[Math.min(buff.remaining(),MAX_HEADER_LENGTH)];  buff.get(data);  try {    for (int i=0; i < data.length; i++) {      if (data[i] == '\n') {        buff.position(pos + i + 1);        String s=new String(data,0,i,DataUtils.LATIN).trim();        return fromString(s);      }    }  } catch (  Exception e) {    throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"File corrupt reading chunk at position {0}",start,e);  }  throw DataUtils.newIllegalStateException(DataUtils.ERROR_FILE_CORRUPT,"File corrupt reading chunk at position {0}",start);}  }
class C{  @Override protected void initListeners(){}  }
class C{  public TracePoint(final Module module,final Address address){  m_address=Preconditions.checkNotNull(address,"Error: Address argument can not be null");  m_module=Preconditions.checkNotNull(module,"Error: module argument can not be null");}  }
class C{  public int size(){  return list.size();}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public Collection<Object> values(){  return map.values();}  }
class C{  public static void run(){  if (PTABridge.v() == null) {    logger.error("IntegrateXMLLayouts must be called after PTA!");    droidsafe.main.Main.exit(1);  }  v=new IntegrateXMLLayouts();  for (  SootClass clz : Scene.v().getClasses()) {    debugOn=false;    if (clz.getName().contains("edu.kestrel")) {      logger.info("Class {} ",clz);      debugOn=true;    }    for (    SootMethod meth : clz.getMethods()) {      if (API.v().isSystemMethod(meth))       continue;      if (debugOn) {        logger.info("Checking method {} ",meth);      }      try {        if (meth.isConcrete()) {          v.transform(meth.retrieveActiveBody());        }      } catch (      Exception e) {        logger.debug("Error in IntegrateXMLLayouts. Ignoring... {} {}",e,meth);      }    }  }  ResourcesSoot.v().writeFile(Project.v().getOutputDir());}  }
class C{  public boolean mouseMoved(MouseEvent e){  if (coolMM) {    return getCurrentLayerMapMouseListener().mouseMoved(e);  } else {    return false;  }}  }
class C{  public int key(){  return _map._set[_index];}  }
class C{  private void resetToStream(){  this.m_cdataStartCalled=false;  this.m_disableOutputEscapingStates.clear();  this.m_escaping=true;  this.m_expandDTDEntities=true;  this.m_inDoctype=false;  this.m_ispreserve=false;  this.m_isprevtext=false;  this.m_isUTF8=false;  this.m_lineSep=s_systemLineSep;  this.m_lineSepLen=s_systemLineSep.length;  this.m_lineSepUse=true;  this.m_preserves.clear();  this.m_shouldFlush=true;  this.m_spaceBeforeClose=false;  this.m_startNewLine=false;  this.m_writer_set_by_user=false;}  }
class C{  public Class<? extends IGeneratorMarkerSupport> bindIGeneratorMarkerSupport(){  return GeneratorMarkerSupport.class;}  }
class C{  private void addInlineDefinitionTitle(String title,String anchor,MarkupDocBuilder docBuilder){  docBuilder.anchor(anchor,null);  docBuilder.newLine();  docBuilder.boldTextLine(title);}  }
class C{  public final int distance(Coords c){  int xd, ym, ymin, ymax, yo;  xd=Math.abs(this.getX() - c.getX());  yo=(xd / 2) + (!isXOdd() && c.isXOdd() ? 1 : 0);  ymin=this.getY() - yo;  ymax=ymin + xd;  ym=0;  if (c.getY() < ymin) {    ym=ymin - c.getY();  }  if (c.getY() > ymax) {    ym=c.getY() - ymax;  }  return xd + ym;}  }
class C{  public void documentRelease(){}  }
class C{  public synchronized void addTask(RunnableCourseComponent callback){  runnableCourseComponentWeakList.add(callback);  if (mainComponent != null && mainComponent.equals(callback.getCourseComponent())) {    taskIsRunning=true;    callback.run();    return;  }  if (!taskIsRunning) {    taskIsRunning=true;    callback.run();  }}  }
class C{  public Support_StringReader(String str){  super(str);  this.str=str;  this.count=str.length();}  }
class C{  public List typeArguments(){  if (this.typeArguments == null) {    unsupportedIn2();  }  return this.typeArguments;}  }
class C{  public int numberOfLinearModels(){  if (m_isLeaf) {    return 1;  } else {    return m_left.numberOfLinearModels() + m_right.numberOfLinearModels();  }}  }
class C{  private void findAdditions(IJavaElement newElement,int depth){  JavaElementInfo oldInfo=getElementInfo(newElement);  if (oldInfo == null && depth < this.maxDepth) {    this.delta.added(newElement);    added(newElement);  } else {    removeElementInfo(newElement);  }  if (depth >= this.maxDepth) {    this.delta.changed(newElement,IJavaElementDelta.F_CONTENT);    return;  }  JavaElementInfo newInfo=null;  try {    newInfo=(JavaElementInfo)((JavaElement)newElement).getElementInfo();  } catch (  JavaModelException npe) {    return;  }  findContentChange(oldInfo,newInfo,newElement);  if (oldInfo != null && newElement instanceof IParent) {    IJavaElement[] children=newInfo.getChildren();    if (children != null) {      int length=children.length;      for (int i=0; i < length; i++) {        findAdditions(children[i],depth + 1);      }    }  }}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public final void testGetCertificates(){  CertPath cp1=new MyCertPath(testEncoding);  cp1.getCertificates();}  }
class C{  static boolean isOperationInGroup(int op){switch (op) {case PLUS:case PLUS_EQUAL:case MINUS:case MINUS_EQUAL:case MULTIPLY:case MULTIPLY_EQUAL:    return true;default :  return false;}}  }
class C{  public DrawerBuilder drawerRoot(int drawerRootResId){  this.drawerRootResId=drawerRootResId;  return this;}  }
class C{  public TriggerBuilder<T> startAt(Date triggerStartTime){  this.startTime=triggerStartTime;  return this;}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public void taskStarted(){  if (m_TaskMonitor != null) {    m_TaskMonitor.taskStarted();  }}  }
class C{  private long makeMGRSString(long Zone,long[] Letters,double Easting,double Northing,long Precision){  int j;  double divisor;  long east;  long north;  long error_code=MGRS_NO_ERROR;  if (Zone != 0)   MGRSString=String.format("%02d",Zone); else   MGRSString="  ";  for (j=0; j < 3; j++) {    if (Letters[j] < 0 || Letters[j] > 26)     return MGRS_ZONE_ERROR;    MGRSString=MGRSString + alphabet.charAt((int)Letters[j]);  }  divisor=Math.pow(10.0,(5 - Precision));  Easting=Easting % 100000.0;  if (Easting >= 99999.5)   Easting=99999.0;  east=(long)(Easting / divisor);  Integer iEast=(int)east;  String sEast=iEast.toString();  if (sEast.length() > Precision)   sEast=sEast.substring(0,(int)Precision - 1); else {    int i;    int length=sEast.length();    for (i=0; i < Precision - length; i++) {      sEast="0" + sEast;    }  }  MGRSString=MGRSString + " " + sEast;  Northing=Northing % 100000.0;  if (Northing >= 99999.5)   Northing=99999.0;  north=(long)(Northing / divisor);  Integer iNorth=(int)north;  String sNorth=iNorth.toString();  if (sNorth.length() > Precision)   sNorth=sNorth.substring(0,(int)Precision - 1); else {    int i;    int length=sNorth.length();    for (i=0; i < Precision - length; i++) {      sNorth="0" + sNorth;    }  }  MGRSString=MGRSString + " " + sNorth;  return (error_code);}  }
class C{  public void clearAttributes(){  for (Iterator it=this.attributes.entrySet().iterator(); it.hasNext(); ) {    Map.Entry entry=(Map.Entry)it.next();    String name=(String)entry.getKey();    Object value=entry.getValue();    it.remove();    if (value instanceof HttpSessionBindingListener) {      ((HttpSessionBindingListener)value).valueUnbound(new HttpSessionBindingEvent(this,name,value));    }  }}  }
class C{  public void verifyVisibilityOfElementLocatedById(String id){  try {    WebDriverWait wait=(WebDriverWait)new WebDriverWait(appiumDriver,maxWaitTime,500);    wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(id)));  } catch (  Throwable t) {    Reporter.log("Elment by Id " + id + " not visible");    captureScreenshot();    throw t;  }}  }
class C{  public void putAll(ObjectIntHashMap m){  int numKeysToBeAdded=m.size();  if (numKeysToBeAdded == 0)   return;  if (numKeysToBeAdded > threshold) {    int targetCapacity=(int)(numKeysToBeAdded / loadFactor + 1);    if (targetCapacity > MAXIMUM_CAPACITY)     targetCapacity=MAXIMUM_CAPACITY;    int newCapacity=table.length;    while (newCapacity < targetCapacity)     newCapacity<<=1;    if (newCapacity > table.length)     resize(newCapacity);  }  for (Iterator i=m.entrySet().iterator(); i.hasNext(); ) {    Entry e=(Entry)i.next();    put(e.getKey(),e.getValue());  }}  }
class C{  private static void returnExpand(Instruction s,IR ir){  PhysicalRegisterSet phys=(PhysicalRegisterSet)ir.regpool.getPhysicalRegisterSet();  if (MIR_Return.hasVal(s)) {    RegisterOperand symb1=MIR_Return.getClearVal(s);    RegisterOperand phys1;    if (symb1.getType().isFloatType() || symb1.getType().isDoubleType()) {      phys1=D(phys.get(FIRST_DOUBLE_RETURN));      s.insertBefore(MIR_Move.create(PPC_FMR,phys1,symb1));    } else {      phys1=new RegisterOperand(phys.get(FIRST_INT_RETURN),symb1.getType());      s.insertBefore(MIR_Move.create(PPC_MOVE,phys1,symb1));    }    MIR_Return.setVal(s,phys1.copyD2U());  }  if (MIR_Return.hasVal2(s)) {    if (VM.VerifyAssertions)     VM._assert(VM.BuildFor32Addr);    RegisterOperand symb2=MIR_Return.getClearVal2(s);    RegisterOperand phys2=I(phys.get(FIRST_INT_RETURN + 1));    s.insertBefore(MIR_Move.create(PPC_MOVE,phys2,symb2));    MIR_Return.setVal2(s,phys2.copyD2U());  }}  }
class C{  public void delete(){  try {    Files.delete(file.toPath());  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isSkipOrg(int AD_Org_ID){  if (getAD_OrgOnly_ID() == 0)   return false;  if (getAD_OrgOnly_ID() == AD_Org_ID)   return false;  if (m_onlyOrg == null)   m_onlyOrg=MOrg.get(getCtx(),getAD_OrgOnly_ID());  if (!m_onlyOrg.isSummary())   return true;  final Integer[] onlyOrgs=getOnlyOrgs();  if (onlyOrgs == null) {    return false;  }  for (int i=0; i < onlyOrgs.length; i++) {    if (AD_Org_ID == onlyOrgs[i].intValue())     return false;  }  return true;}  }
class C{  public IgniteInternalFuture<?> nextAffinityReadyFuture(AffinityTopologyVersion curVer){  if (curVer == null)   return null;  AffinityTopologyVersion nextVer=new AffinityTopologyVersion(curVer.topologyVersion() + 1);  IgniteInternalFuture<?> fut=exchMgr.affinityReadyFuture(nextVer);  return fut == null ? new GridFinishedFuture<>() : fut;}  }
class C{  public DefaultSynthStyle(Insets insets,boolean opaque,StateInfo[] states,Map data){  this.insets=insets;  this.opaque=opaque;  this.states=states;  this.data=data;}  }
class C{  @Override public void generateRss(XmlWriter w,ExtensionProfile extProfile) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(3);  if (mimeType != null) {    attrs.add(new XmlWriter.Attribute("type",mimeType.getMediaType()));  }  if (uri != null) {    attrs.add(new XmlWriter.Attribute("url",uri));  }  if (length != -1) {    attrs.add(new XmlWriter.Attribute("length",Long.toString(length)));  }  w.simpleElement(Namespaces.rssNs,"enclosure",attrs,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:09.429 -0500",hash_original_method="7D68DA7254C24BFF3C6F787A75CF4E46",hash_generated_method="A3746014CF1BC3E00B0BE85D5DD3D3F5") public synchronized void startHandshake(boolean full) throws IOException {synchronized (handshakeLock) {    checkOpen();    if (!handshakeStarted) {      handshakeStarted=true;    } else {      return;    }  }  final int seedLengthInBytes=NativeCrypto.RAND_SEED_LENGTH_IN_BYTES;  final SecureRandom secureRandom=sslParameters.getSecureRandomMember();  if (secureRandom == null) {    NativeCrypto.RAND_load_file("/dev/urandom",seedLengthInBytes);  } else {    NativeCrypto.RAND_seed(secureRandom.generateSeed(seedLengthInBytes));  }  final boolean client=sslParameters.getUseClientMode();  final int sslCtxNativePointer=(client) ? sslParameters.getClientSessionContext().sslCtxNativePointer : sslParameters.getServerSessionContext().sslCtxNativePointer;  this.sslNativePointer=0;  boolean exception=true;  try {    sslNativePointer=NativeCrypto.SSL_new(sslCtxNativePointer);    guard.open("close");    if (!client) {      Set<String> keyTypes=new HashSet<String>();      for (      String enabledCipherSuite : enabledCipherSuites) {        if (enabledCipherSuite.equals(NativeCrypto.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {          continue;        }        String keyType=CipherSuite.getByName(enabledCipherSuite).getServerKeyType();        if (keyType != null) {          keyTypes.add(keyType);        }      }      for (      String keyType : keyTypes) {        try {          setCertificate(sslParameters.getKeyManager().chooseServerAlias(keyType,null,this));        } catch (        CertificateEncodingException e) {          throw new IOException(e);        }      }    }    NativeCrypto.setEnabledProtocols(sslNativePointer,enabledProtocols);    NativeCrypto.setEnabledCipherSuites(sslNativePointer,enabledCipherSuites);    if (enabledCompressionMethods.length != 0) {      NativeCrypto.setEnabledCompressionMethods(sslNativePointer,enabledCompressionMethods);    }    if (useSessionTickets) {      NativeCrypto.SSL_clear_options(sslNativePointer,NativeCrypto.SSL_OP_NO_TICKET);    }    if (hostname != null) {      NativeCrypto.SSL_set_tlsext_host_name(sslNativePointer,hostname);    }    boolean enableSessionCreation=sslParameters.getEnableSessionCreation();    if (!enableSessionCreation) {      NativeCrypto.SSL_set_session_creation_enabled(sslNativePointer,enableSessionCreation);    }    AbstractSessionContext sessionContext;    if (client) {      ClientSessionContext clientSessionContext=sslParameters.getClientSessionContext();      sessionContext=clientSessionContext;      OpenSSLSessionImpl session=getCachedClientSession(clientSessionContext);      if (session != null) {        NativeCrypto.SSL_set_session(sslNativePointer,session.sslSessionNativePointer);      }    } else {      sessionContext=sslParameters.getServerSessionContext();    }    if (client) {    } else {      boolean certRequested;      if (sslParameters.getNeedClientAuth()) {        NativeCrypto.SSL_set_verify(sslNativePointer,NativeCrypto.SSL_VERIFY_PEER | NativeCrypto.SSL_VERIFY_FAIL_IF_NO_PEER_CERT);        certRequested=true;      } else       if (sslParameters.getWantClientAuth()) {        NativeCrypto.SSL_set_verify(sslNativePointer,NativeCrypto.SSL_VERIFY_PEER);        certRequested=true;      } else {        certRequested=false;      }      if (certRequested) {        X509TrustManager trustManager=sslParameters.getTrustManager();        X509Certificate[] issuers=trustManager.getAcceptedIssuers();        if (issuers != null && issuers.length != 0) {          byte[][] issuersBytes;          try {            issuersBytes=NativeCrypto.encodeIssuerX509Principals(issuers);          } catch (          CertificateEncodingException e) {            throw new IOException("Problem encoding principals",e);          }          NativeCrypto.SSL_set_client_CA_list(sslNativePointer,issuersBytes);        }      }    }    if (client && full) {      NativeCrypto.SSL_clear_mode(sslNativePointer,NativeCrypto.SSL_MODE_HANDSHAKE_CUTTHROUGH);    }    int savedTimeoutMilliseconds=getSoTimeout();    if (handshakeTimeoutMilliseconds >= 0) {      setSoTimeout(handshakeTimeoutMilliseconds);    }    int sslSessionNativePointer;    try {      sslSessionNativePointer=NativeCrypto.SSL_do_handshake(sslNativePointer,socket.getFileDescriptor$(),this,getSoTimeout(),client);    } catch (    CertificateException e) {      SSLHandshakeException wrapper=new SSLHandshakeException(e.getMessage());      wrapper.initCause(e);      throw wrapper;    }    byte[] sessionId=NativeCrypto.SSL_SESSION_session_id(sslSessionNativePointer);    sslSession=(OpenSSLSessionImpl)sessionContext.getSession(sessionId);    if (sslSession != null) {      sslSession.lastAccessedTime=System.currentTimeMillis();      NativeCrypto.SSL_SESSION_free(sslSessionNativePointer);    } else {      if (!enableSessionCreation) {        throw new IllegalStateException("SSL Session may not be created");      }      X509Certificate[] localCertificates=createCertChain(NativeCrypto.SSL_get_certificate(sslNativePointer));      X509Certificate[] peerCertificates=createCertChain(NativeCrypto.SSL_get_peer_cert_chain(sslNativePointer));      if (wrappedHost == null) {        sslSession=new OpenSSLSessionImpl(sslSessionNativePointer,localCertificates,peerCertificates,super.getInetAddress().getHostName(),super.getPort(),sessionContext);      } else {        sslSession=new OpenSSLSessionImpl(sslSessionNativePointer,localCertificates,peerCertificates,wrappedHost,wrappedPort,sessionContext);      }      if (handshakeCompleted) {        sessionContext.putSession(sslSession);      }    }    if (handshakeTimeoutMilliseconds >= 0) {      setSoTimeout(savedTimeoutMilliseconds);    }    if (handshakeCompleted) {      notifyHandshakeCompletedListeners();    }    exception=false;  } catch (  SSLProtocolException e) {    throw new SSLHandshakeException(e);  } finally {    if (exception) {      close();    }  }}  }
class C{  public static double atof(String s){  int i=0;  int sign=1;  double r=0;  double f=0;  double p=1;  int state=0;  while (i < s.length() && Character.isWhitespace(s.charAt(i)))   i++;  if (i < s.length() && s.charAt(i) == '-') {    sign=-1;    i++;  } else   if (i < s.length() && s.charAt(i) == '+') {    i++;  }  while (i < s.length()) {    char ch=s.charAt(i);    if ('0' <= ch && ch <= '9') {      if (state == 0)       r=r * 10 + ch - '0'; else       if (state == 1) {        p=p / 10;        r=r + p * (ch - '0');      }    } else     if (ch == '.') {      if (state == 0)       state=1; else       return sign * r;    } else     if (ch == 'e' || ch == 'E') {      long e=(int)parseLong(s.substring(i + 1),10);      return sign * r * Math.pow(10,e);    } else     return sign * r;    i++;  }  return sign * r;}  }
class C{  @SuppressWarnings("UnusedDeclaration") public void colocateFileWrites(boolean colocateFileWrites){  this.colocateFileWrites=colocateFileWrites;}  }
class C{  @Override public void defineDirectoryNavigation(IDirectory root,int dirTypId,String initialAbsolutePath){  mDirectoryRoot=root;  mDirQueryID=dirTypId;  navigateTo(initialAbsolutePath);}  }
class C{  public static Long[] toReferenceType(long[] primArr){  Long[] refArr=new Long[primArr.length];  for (int i=0; i < primArr.length; i++)   refArr[i]=Long.valueOf(primArr[i]);  return refArr;}  }
class C{  public CompositePredicate(){}  }
class C{  java.sql.Date toSqlDate(Calendar calendar){  return new java.sql.Date(getTimeInMillis(calendar));}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSortedMap<K,V> of(){  return (ImmutableSortedMap<K,V>)NATURAL_EMPTY_MAP;}  }
class C{  @Override public String toString(){  return m_operand.toString();}  }
class C{  public static String findText(Node parent){  NodeList l=parent.getChildNodes();  for (int i=0; i < l.getLength(); i++) {    if (l.item(i).getNodeType() == Node.TEXT_NODE) {      Text text=(Text)l.item(i);      return text.getNodeValue();    }  }  return null;}  }
class C{  public static boolean isConsecutiveFour(int[] values){  int count=1;  for (int i=0; i < values.length - 1; i++) {    if (values[i] == values[i + 1])     count++;    if (count >= 4)     return true;    if (values[i] != values[i + 1])     count=1;  }  return false;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildBlacksmith(zone);}  }
class C{  protected float transformScale(float inScale){  return inScale;}  }
class C{  @Override public void onSdkAvailable(final boolean isSandboxMode){  Log.v(TAG,"onSdkAvailable recieved: Response -" + isSandboxMode);  PurchasingManager.initiateGetUserIdRequest();}  }
class C{  char readChar(){  int b1, b2;  b1=pkt.data[inCursor++] & 0xff;  b2=pkt.data[inCursor++] & 0xff;  return (char)((b1 << 8) + b2);}  }
class C{  public void testOnLayoutCalled(){  assertEquals(1,mStringRecordingModule.getCalls().size());  assertEquals("10,10-100x100",mStringRecordingModule.getCalls().get(0));}  }
class C{  public Builder enableUrlBarHiding(){  mIntent.putExtra(EXTRA_ENABLE_URLBAR_HIDING,true);  return this;}  }
class C{  public Quaternion interpolateToSelf(Quaternion target,double t){  double scale;  double invscale;  float dot=dot(target);  double theta=Math.acos(dot);  double sintheta=Math.sin(theta);  if (sintheta > 0.001f) {    scale=Math.sin(theta * (1.0 - t)) / sintheta;    invscale=Math.sin(theta * t) / sintheta;  } else {    scale=1 - t;    invscale=t;  }  if (dot < 0) {    w=(float)(scale * w - invscale * target.w);    x=(float)(scale * x - invscale * target.x);    y=(float)(scale * y - invscale * target.y);    z=(float)(scale * z - invscale * target.z);  } else {    w=(float)(scale * w + invscale * target.w);    x=(float)(scale * x + invscale * target.x);    y=(float)(scale * y + invscale * target.y);    z=(float)(scale * z + invscale * target.z);  }  return normalize();}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.162 -0400",hash_original_method="FA74FA0AB2970D0A2A58D7292C0359A2",hash_generated_method="FCE82F0F1B82413C83C4F4A0E17DA5C2") public static long copyFile(File input,OutputStream output) throws IOException {  final FileInputStream fis=new FileInputStream(input);  try {    return IOUtils.copyLarge(fis,output);  }  finally {    fis.close();  }}  }
class C{  public static int compute1(int x){  int lo=16807 * (x & 0xFFFF);  int hi=16807 * (x >>> 16);  lo+=(hi & 0x7FFF) << 16;  if ((lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  lo+=hi >>> 15;  if (lo == 0 || (lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  return lo;}  }
class C{  public BalanceTransferNotification(final Account sender,final Account recipient,final Amount amount){  super(NotificationType.BalanceTransfer);  this.sender=sender;  this.recipient=recipient;  this.amount=amount;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void initialize(){  ResultSetMetaData meta;  int i;  if (m_Initialized) {    return;  }  try {    meta=m_ResultSet.getMetaData();    m_ColumnNames=new String[meta.getColumnCount()];    for (i=1; i <= meta.getColumnCount(); i++) {      m_ColumnNames[i - 1]=meta.getColumnLabel(i);    }    m_NumericColumns=new boolean[meta.getColumnCount()];    for (i=1; i <= meta.getColumnCount(); i++) {      m_NumericColumns[i - 1]=typeIsNumeric(meta.getColumnType(i));    }    m_ColumnClasses=new Class[meta.getColumnCount()];    for (i=1; i <= meta.getColumnCount(); i++) {      try {        m_ColumnClasses[i - 1]=typeToClass(meta.getColumnType(i));      } catch (      Exception ex) {        m_ColumnClasses[i - 1]=String.class;      }    }    m_ColumnCount=meta.getColumnCount();    if (m_ResultSet.getType() == ResultSet.TYPE_FORWARD_ONLY) {      m_RowCount=-1;    } else {      m_RowCount=0;      m_ResultSet.first();      if (m_MaxRows > 0) {        try {          m_ResultSet.absolute(m_MaxRows);          m_RowCount=m_ResultSet.getRow();        } catch (        Exception ex) {        }      } else {        m_ResultSet.last();        m_RowCount=m_ResultSet.getRow();      }      try {        if ((m_RowCount == 0) && (m_ResultSet.first())) {          m_RowCount=1;          while (m_ResultSet.next()) {            m_RowCount++;            if (m_ResultSet.getRow() == m_MaxRows) {              break;            }          }          ;        }      } catch (      Exception e) {      }    }    m_Initialized=true;  } catch (  Exception ex) {  }}  }
class C{  public boolean isHandshakeComplete(){  return handshakeComplete;}  }
class C{  public Input remove(int code){synchronized (this.keys) {    return this.keys.remove(code);  }}  }
class C{  public static double distanceBetweenLocations(double lat1,double lon1,double lat2,double lon2){  double R=6371;  double dLat=Math.toRadians(lat2 - lat1);  double dLon=Math.toRadians(lon2 - lon1);  lat1=Math.toRadians(lat1);  lat2=Math.toRadians(lat2);  double a=Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1)* Math.cos(lat2);  double c=2 * Math.atan2(Math.sqrt(a),Math.sqrt(1 - a));  return R * c;}  }
class C{  private IPreferenceStore createCombinedPreferenceStore(IEditorInput input){  List stores=new ArrayList();  addPreferenceStores(stores,input);  return new ChainedPreferenceStore((IPreferenceStore[])stores.toArray(new IPreferenceStore[stores.size()]));}  }
class C{  private void updateActions(final IDatabase database){  openAction.setEnabled(allowConnection && !database.isConnected() && !database.getConfiguration().getIdentity().isEmpty()&& !database.getConfiguration().getUser().isEmpty()&& !database.getConfiguration().getPassword().isEmpty());  closeAction.setEnabled(database.isConnected());}  }
class C{  public boolean appliesFile(int mcaX,int mcaZ){  return true;}  }
class C{  private Token createClassPathToken(){  StringBuilder sb=new StringBuilder();  sb.append(jrunContainer.getHome() + "/servers/lib,");  sb.append(jrunContainer.getHome() + "/lib/macromedia_drivers.jar,");  sb.append(jrunContainer.getHome() + "/lib/webservices.jar");  if (jrunContainer.getExtraClasspath().length > 0) {    sb.append(",");    String[] extraPaths=jrunContainer.getExtraClasspath();    for (int i=0; i < extraPaths.length; i++) {      sb.append(extraPaths[i].replace('\\','/'));      if (i < extraPaths.length - 1) {        sb.append(",");      }    }  }  ReplaceTokens.Token tokenClasspath=new ReplaceTokens.Token();  tokenClasspath.setKey(JRun4xPropertySet.JRUN_CLASSPATH);  tokenClasspath.setValue(sb.toString());  return tokenClasspath;}  }
class C{  public static PropertyValuesHolder ofObject(String propertyName,TypeEvaluator evaluator,Object... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(propertyName);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  public YammerMetricsAssembler(File outDirectory,long period,TimeUnit timeunit){  reporter=new CsvReporter(Metrics.defaultRegistry(),outDirectory);  reporter.start(period,timeunit);}  }
class C{  public boolean isReportingAsyncExecExceptions(){  return reportingAsyncExecExceptions;}  }
class C{  private void sendUpdateHeartbeats(){  HeartbeatServiceLocal heartbeat=_bartender.getHeartbeatLocal();  if (heartbeat != null) {    heartbeat.updateHeartbeats();  }}  }
class C{  public PreparedStatementSpy(String sql,ConnectionSpy connectionSpy,PreparedStatement realPreparedStatement){  super(connectionSpy,realPreparedStatement);  this.sql=sql;  this.realPreparedStatement=realPreparedStatement;  rdbmsSpecifics=connectionSpy.getRdbmsSpecifics();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public String toString(){  return getTitle();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public DataFormatDetector withMaxInputLookahead(int lookaheadBytes){  if (lookaheadBytes == _maxInputLookahead) {    return this;  }  return new DataFormatDetector(_detectors,_optimalMatch,_minimalMatch,lookaheadBytes);}  }
class C{  public void doTransfer(Integer idTradestrategy){  try {    Tradestrategy tradestrategy=m_tradingdays.getTradestrategy(idTradestrategy);    if (null == tradestrategy) {      tradestrategy=m_tradePersistentModel.findTradestrategyById(idTradestrategy);    }    if (null == m_tradingdays.getTradingday(tradestrategy.getTradingday().getOpen(),tradestrategy.getTradingday().getClose())) {      Tradingday tradingday=m_tradePersistentModel.findTradingdayById(tradestrategy.getTradingday().getIdTradingDay());      m_tradingdays.add(tradingday);    }    if (tradestrategy.isDirty()) {      setStatusBarMessage("Please save ...\n",BasePanel.WARNING);    } else {      contractPanel.doTransfer(tradestrategy);      this.setSelectPanel(contractPanel);    }  } catch (  PersistentModelException ex) {    this.setErrorMessage("Error finding Tradingday.",ex.getMessage(),ex);  }}  }
class C{  private static void fillInNotSupportedReasons(Map<String,Change> changes,StringBuffer notSuppReasonBuff){  Set<String> allChanges=new HashSet<String>();  for (  Change foundChange : changes.values()) {    allChanges.add(foundChange.name);  }  notSuppReasonBuff.append(Joiner.on(", ").join(allChanges));  notSuppReasonBuff.append(". ");}  }
class C{  public PropertyPanel(PropertyEditor pe){  this(pe,false);}  }
class C{  public PolynomialGF2mSmallM(GF2mField field,int degree){  this.field=field;  this.degree=degree;  coefficients=new int[degree + 1];  coefficients[degree]=1;}  }
class C{  public SharedConnectionDefinition(ActiveConnectionRecord activeConnection,ModeledSharingProfile sharingProfile,String shareKey){  this.activeConnection=activeConnection;  this.sharingProfile=sharingProfile;  this.shareKey=shareKey;}  }
class C{  public ParcelFileDescriptor simpleQueryForBlobFileDescriptor(){  acquireReference();  try {    return getSession().executeForBlobFileDescriptor(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public boolean isNextPage(){  Object oo=get_Value(COLUMNNAME_IsNextPage);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String replaceString(String mainString,String oldString,String newString){  return StringUtil.replaceString(mainString,oldString,newString);}  }
class C{  private Bitmap overlayChildBadgeOnUserPicture(Bitmap userPicture,Bitmap badge){  Resources resources=getResources();  assert userPicture.getWidth() == resources.getDimensionPixelSize(R.dimen.user_picture_size);  int borderSize=resources.getDimensionPixelOffset(R.dimen.badge_border_size);  int badgeRadius=resources.getDimensionPixelOffset(R.dimen.badge_radius);  int badgedPictureWidth=resources.getDimensionPixelOffset(R.dimen.badged_user_picture_width);  int badgedPictureHeight=resources.getDimensionPixelOffset(R.dimen.badged_user_picture_height);  Bitmap badgedPicture=Bitmap.createBitmap(badgedPictureWidth,badgedPictureHeight,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(badgedPicture);  canvas.drawBitmap(userPicture,0,0,null);  Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  int badgeCenterX=badgedPictureWidth - badgeRadius;  int badgeCenterY=badgedPictureHeight - badgeRadius;  canvas.drawCircle(badgeCenterX,badgeCenterY,badgeRadius + borderSize,paint);  canvas.drawBitmap(badge,badgeCenterX - badgeRadius,badgeCenterY - badgeRadius,null);  return badgedPicture;}  }
class C{  public static synchronized void unregister(Class c,int classId){  if (c == null) {    throw new NullPointerException(LocalizedStrings.InternalInstantiator_CANNOT_UNREGISTER_A_NULL_CLASS.toLocalizedString());  }  final Integer idx=Integer.valueOf(classId);  final Instantiator i=(Instantiator)idsToInstantiators.remove(idx);  if (i == null) {    throw new IllegalArgumentException(LocalizedStrings.InternalInstantiator_CLASS_0_WAS_NOT_REGISTERED_WITH_ID_1.toLocalizedString(new Object[]{c.getName(),Integer.valueOf(classId)}));  } else {    dsMap.remove(c.getName(),i);  }  idsToHolders.remove(idx);  classNamesToHolders.remove(i.getInstantiatedClass().getName());}  }
class C{  public static int readVarInt32(final InputStream input) throws IOException {  int result=0;  int offset=0;  for (; offset < 32; offset+=7) {    final int b=safeRead(input);    result|=(b & 0x7f) << offset;    if ((b & 0x80) == 0) {      return result;    }  }  throw new EOFException();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected AbstractAnimation createAnimation(AnimationTarget target){  AnimatableValue from=parseAnimatableValue(SVG_FROM_ATTRIBUTE);  AnimatableValue to=parseAnimatableValue(SVG_TO_ATTRIBUTE);  AnimatableValue by=parseAnimatableValue(SVG_BY_ATTRIBUTE);  return new SimpleAnimation(timedElement,this,parseCalcMode(),parseKeyTimes(),parseKeySplines(),parseAdditive(),parseAccumulate(),parseValues(),from,to,by);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.719 -0400",hash_original_method="AD89F091290D19303ADA48600DF6A2FC",hash_generated_method="451594E5762109D8B39106231F5CEB3F") public void info(Object message,Throwable t){}  }
class C{  public DisposableArray(final boolean ordered,final Type[] array,final int start,final int count){  super(ordered,array,start,count);}  }
class C{  boolean hasFocus(){  return fDetailsBlock.hasFocus();}  }
class C{  public static Element addChildElementCDATAValue(Element element,String childElementName,String childElementValue,Document document){  Element newElement=addChildElement(element,childElementName,document);  newElement.appendChild(document.createCDATASection(childElementValue));  return newElement;}  }
class C{  public void testIt() throws ProtocolException, ParseException {  String urlString;  Protocol protocol;  Content content;  Parse parse;  Configuration conf=NutchConfiguration.create();  for (int i=0; i < sampleFiles.length; i++) {    urlString="file:" + sampleDir + fileSeparator+ sampleFiles[i];    protocol=new ProtocolFactory(conf).getProtocol(urlString);    content=protocol.getProtocolOutput(new Text(urlString),new CrawlDatum()).getContent();    parse=new ParseUtil(conf).parseByExtensionId("parse-tika",content).get(content.getUrl());    ParseData theParseData=parse.getData();    Outlink[] theOutlinks=theParseData.getOutlinks();    assertTrue("There aren't 2 outlinks read!",theOutlinks.length == 2);    boolean hasLink1=false, hasLink2=false;    for (int j=0; j < theOutlinks.length; j++) {      if (theOutlinks[j].getToUrl().equals("http://www-scf.usc.edu/~mattmann/")) {        hasLink1=true;      }      if (theOutlinks[j].getToUrl().equals("http://www.nutch.org/")) {        hasLink2=true;      }    }    if (!hasLink1 || !hasLink2) {      fail("Outlinks read from sample rss file are not correct!");    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.955 -0500",hash_original_method="DC6A356EFD140318ADF1C94BF09D3544",hash_generated_method="10B460DDFDD02DB492A2EE848F66304C") private void animateProperty(int constantName,float toValue){  float fromValue=getValue(constantName);  float deltaValue=toValue - fromValue;  animatePropertyBy(constantName,fromValue,deltaValue);}  }
class C{  public void process() throws Exception {  loadOldUpdateProperties();  updateVersion();  updateInit();  updateUpdateFileList();  updateFileSizeAndSignature();  writeNewUpdateProperties();}  }
class C{  public static void convert(IR ir){  for (Instruction next=null, s=ir.firstInstructionInCodeOrder(); s != null; s=next) {    next=s.nextInstructionInCodeOrder();switch (s.getOpcode()) {case DOUBLE_2INT_opcode:case FLOAT_2INT_opcode:      double_2int(s,ir);    break;case DOUBLE_2LONG_opcode:case FLOAT_2LONG_opcode:  if (VM.BuildFor64Addr) {    double_2long(s,ir);  } else {    if (VM.VerifyAssertions)     VM._assert(VM.NOT_REACHED);  }break;case LONG_SHR_opcode:if (VM.BuildFor32Addr) {long_shr(s,ir);} else {if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);}break;case LONG_IFCMP_opcode:if (VM.BuildFor32Addr) {long_ifcmp(s,ir);} else {if (VM.VerifyAssertions) VM._assert(VM.NOT_REACHED);}break;case BOOLEAN_CMP_INT_opcode:boolean_cmp(s,ir,true);break;case BOOLEAN_CMP_ADDR_opcode:boolean_cmp(s,ir,VM.BuildFor32Addr);break;case DOUBLE_CMPL_opcode:case FLOAT_CMPL_opcode:case DOUBLE_CMPG_opcode:case FLOAT_CMPG_opcode:threeValueCmp(s,ir);break;case LONG_CMP_opcode:threeValueLongCmp(s,ir);break;case GET_TIME_BASE_opcode:get_time_base(s,ir);break;case ATTEMPT_INT_opcode:attempt(s,ir,false,false);break;case ATTEMPT_LONG_opcode:attempt(s,ir,false,true);break;case ATTEMPT_ADDR_opcode:attempt(s,ir,true,false);break;}}DefUse.recomputeSpansBasicBlock(ir);}  }
class C{  public static double stepValue(double value,double min,double max){  if (value <= min) {    return 0;  } else   if (value >= max) {    return 1;  } else {    return (value - min) / (max - min);  }}  }
class C{  public ODataClient(String url) throws URISyntaxException, IOException, ODataException {  this(url,null,null);}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  StepProgress stepprog=LOG.isVerbose() ? new StepProgress("COF",3) : null;  DistanceQuery<O> dq=database.getDistanceQuery(relation,getDistanceFunction());  LOG.beginStep(stepprog,1,"Materializing COF neighborhoods.");  KNNQuery<O> knnq=DatabaseUtil.precomputedKNNQuery(database,relation,dq,k);  DBIDs ids=relation.getDBIDs();  LOG.beginStep(stepprog,2,"Computing Average Chaining Distances.");  WritableDoubleDataStore acds=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  computeAverageChainingDistances(knnq,dq,ids,acds);  LOG.beginStep(stepprog,3,"Computing Connectivity-based Outlier Factors.");  WritableDoubleDataStore cofs=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_DB);  DoubleMinMax cofminmax=new DoubleMinMax();  computeCOFScores(knnq,ids,acds,cofs,cofminmax);  LOG.setCompleted(stepprog);  DoubleRelation scoreResult=new MaterializedDoubleRelation("Connectivity-Based Outlier Factor","cof-outlier",cofs,ids);  OutlierScoreMeta scoreMeta=new QuotientOutlierScoreMeta(cofminmax.getMin(),cofminmax.getMax(),0.0,Double.POSITIVE_INFINITY,1.0);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  private int doCancel(){  int deselected=0;  Set<SelectionKey> cancelledKeys=cancelledKeys();synchronized (cancelledKeys) {    if (cancelledKeys.size() > 0) {      for (      SelectionKey currentKey : cancelledKeys) {        mutableKeys.remove(currentKey);        deregister((AbstractSelectionKey)currentKey);        if (mutableSelectedKeys.remove(currentKey)) {          deselected++;        }      }      cancelledKeys.clear();    }  }  return deselected;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private String renderTupleExpr(TupleExpr theExpr) throws Exception {  SparqlTupleExprRenderer aRenderer=new SparqlTupleExprRenderer();  aRenderer.mIndent=mIndent;  aRenderer.mContexts=new HashMap<TupleExpr,Var>(mContexts);  return aRenderer.render(theExpr);}  }
class C{  public EntityQuery where(EntityCondition... entityCondition){  this.whereEntityCondition=EntityCondition.makeCondition(Arrays.asList(entityCondition));  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected OMGraphicList filterList(OMGraphicList omgl,Area area,boolean getInsideArea){  OMGraphicList ret=new OMGraphicList();  boolean DEBUG_DETAIL=Debug.debugging("filtersupportdetail");  boolean DEBUG=Debug.debugging("filtersupport") || DEBUG_DETAIL;  if (DEBUG) {    Debug.output("FilterSupport.filterList");  }  int count=0;  if (area != null && omgl != null) {    for (    OMGraphic omg : omgl) {      if (DEBUG) {        Debug.output("FilterSupport.filterList evaluating " + (count++) + " OMGraphic, "+ omg);      }      boolean outsideFilter=true;      if (!omg.isVisible()) {        if (DEBUG) {          Debug.output("   OMGraphic not visible, ignoring");        }        continue;      }      if (omg instanceof OMGraphicList) {        if (omg == omgl) {          Debug.output("   OMGraphic is parent list (points to itself), ignoring...");          continue;        }        if (DEBUG) {          Debug.output("  (filterList recursiving handing OMGraphicList)");        }        OMGraphicList subList=filterList((OMGraphicList)omg,area,getInsideArea);        if (!subList.isEmpty()) {          if (DEBUG) {            Debug.output("  +++ OMGraphicList's contents (" + subList.size() + ") pass filter, adding...");          }          if (((OMGraphicList)omg).isVague()) {            passedFilter(omg);            omg.setVisible(true);            ret.add(omg);          } else {            passedFilter(subList);            ret.add(subList);          }        } else {          if (DEBUG) {            Debug.output("  --- OMGraphicList's contents fail filter, ignoring...");          }          failedFilter(omg);        }        continue;      } else {        Shape omgShape=omg.getShape();        if (omgShape != null) {          if (omgShape.getBounds2D().getWidth() == 0 && omgShape.getBounds2D().getHeight() == 0) {            if (area.contains(omgShape.getBounds2D().getX(),omgShape.getBounds2D().getY())) {              if (DEBUG_DETAIL) {                Debug.output("   +++ omg contains position");              }              outsideFilter=false;            }          } else           if (area.intersects(omgShape.getBounds2D())) {            if (DEBUG_DETAIL) {              Debug.output("   +++ omg intersects bounds");            }            if (precise) {              Area omgArea=new Area(omgShape);              if (!omgArea.isSingular()) {                Area clone=(Area)area.clone();                clone.intersect(omgArea);                if (!clone.isEmpty()) {                  outsideFilter=false;                }              } else {                outsideFilter=false;              }            } else {              outsideFilter=false;            }          }        }        if ((outsideFilter && !getInsideArea) || (!outsideFilter && getInsideArea)) {          if (DEBUG) {            Debug.output("   +++ OMGraphic passes filter, adding...");          }          passedFilter(omg);          ret.add(omg);        } else {          if (DEBUG) {            Debug.output("   --- OMGraphic fails filter, hiding...");          }          failedFilter(omg);        }      }    }  }  return ret;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.MORE_CODE___ANONYMOUS_MORE_CODE_11:    getAnonymous_moreCode_1_1().clear();  return;case UmplePackage.MORE_CODE___CODE_1:setCode_1(CODE_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static float noise(float x,float y,float z,float w){  float n0, n1, n2, n3, n4;  float s=(x + y + z+ w) * F4;  int i=fastfloor(x + s);  int j=fastfloor(y + s);  int k=fastfloor(z + s);  int l=fastfloor(w + s);  float t=(i + j + k+ l) * G4;  float X0=i - t;  float Y0=j - t;  float Z0=k - t;  float W0=l - t;  float x0=x - X0;  float y0=y - Y0;  float z0=z - Z0;  float w0=w - W0;  int rankx=0;  int ranky=0;  int rankz=0;  int rankw=0;  if (x0 > y0)   rankx++; else   ranky++;  if (x0 > z0)   rankx++; else   rankz++;  if (x0 > w0)   rankx++; else   rankw++;  if (y0 > z0)   ranky++; else   rankz++;  if (y0 > w0)   ranky++; else   rankw++;  if (z0 > w0)   rankz++; else   rankw++;  int i1, j1, k1, l1;  int i2, j2, k2, l2;  int i3, j3, k3, l3;  i1=rankx >= 3 ? 1 : 0;  j1=ranky >= 3 ? 1 : 0;  k1=rankz >= 3 ? 1 : 0;  l1=rankw >= 3 ? 1 : 0;  i2=rankx >= 2 ? 1 : 0;  j2=ranky >= 2 ? 1 : 0;  k2=rankz >= 2 ? 1 : 0;  l2=rankw >= 2 ? 1 : 0;  i3=rankx >= 1 ? 1 : 0;  j3=ranky >= 1 ? 1 : 0;  k3=rankz >= 1 ? 1 : 0;  l3=rankw >= 1 ? 1 : 0;  float x1=x0 - i1 + G4;  float y1=y0 - j1 + G4;  float z1=z0 - k1 + G4;  float w1=w0 - l1 + G4;  float x2=x0 - i2 + 2.0f * G4;  float y2=y0 - j2 + 2.0f * G4;  float z2=z0 - k2 + 2.0f * G4;  float w2=w0 - l2 + 2.0f * G4;  float x3=x0 - i3 + 3.0f * G4;  float y3=y0 - j3 + 3.0f * G4;  float z3=z0 - k3 + 3.0f * G4;  float w3=w0 - l3 + 3.0f * G4;  float x4=x0 - 1.0f + 4.0f * G4;  float y4=y0 - 1.0f + 4.0f * G4;  float z4=z0 - 1.0f + 4.0f * G4;  float w4=w0 - 1.0f + 4.0f * G4;  int ii=i & 255;  int jj=j & 255;  int kk=k & 255;  int ll=l & 255;  int gi0=(perm[ii + perm[jj + perm[kk + perm[ll] & 0xFF] & 0xFF] & 0xFF] & 0xFF) % 32;  int gi1=(perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1] & 0xFF] & 0xFF] & 0xFF] & 0xFF) % 32;  int gi2=(perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2] & 0xFF] & 0xFF] & 0xFF] & 0xFF) % 32;  int gi3=(perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3] & 0xFF] & 0xFF] & 0xFF] & 0xFF) % 32;  int gi4=(perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1] & 0xFF] & 0xFF] & 0xFF] & 0xFF) % 32;  float t0=0.6f - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;  if (t0 < 0.0f)   n0=0.0f; else {    t0*=t0;    n0=t0 * t0 * dot(grad4[gi0],x0,y0,z0,w0);  }  float t1=0.6f - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;  if (t1 < 0.0f)   n1=0.0f; else {    t1*=t1;    n1=t1 * t1 * dot(grad4[gi1],x1,y1,z1,w1);  }  float t2=0.6f - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;  if (t2 < 0.0f)   n2=0.0f; else {    t2*=t2;    n2=t2 * t2 * dot(grad4[gi2],x2,y2,z2,w2);  }  float t3=0.6f - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;  if (t3 < 0.0f)   n3=0.0f; else {    t3*=t3;    n3=t3 * t3 * dot(grad4[gi3],x3,y3,z3,w3);  }  float t4=0.6f - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;  if (t4 < 0.0f)   n4=0.0f; else {    t4*=t4;    n4=t4 * t4 * dot(grad4[gi4],x4,y4,z4,w4);  }  return 27.0f * (n0 + n1 + n2+ n3+ n4);}  }
class C{  public ContainerVmPe(int id,ContainerVmPeProvisioner containerVmPeProvisioner){  setId(id);  setContainerVmPeProvisioner(containerVmPeProvisioner);  status=FREE;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.599 -0500",hash_original_method="2C3CCC3A0B0167433C5BE22C88A67CDC",hash_generated_method="449300807E51E8F11A0B0C45F9B27BAA") public Mesh create(boolean uploadToBufferObject){  Element.Builder b=new Element.Builder(mRS);  int floatCount=mVtxSize;  b.add(Element.createVector(mRS,Element.DataType.FLOAT_32,mVtxSize),"position");  if ((mFlags & COLOR) != 0) {    floatCount+=4;    b.add(Element.F32_4(mRS),"color");  }  if ((mFlags & TEXTURE_0) != 0) {    floatCount+=2;    b.add(Element.F32_2(mRS),"texture0");  }  if ((mFlags & NORMAL) != 0) {    floatCount+=3;    b.add(Element.F32_3(mRS),"normal");  }  mElement=b.create();  int usage=Allocation.USAGE_SCRIPT;  if (uploadToBufferObject) {    usage|=Allocation.USAGE_GRAPHICS_VERTEX;  }  Builder smb=new Builder(mRS,usage);  smb.addVertexType(mElement,mVtxCount / floatCount);  smb.addIndexSetType(Element.U16(mRS),mIndexCount,Primitive.TRIANGLE);  Mesh sm=smb.create();  sm.getVertexAllocation(0).copy1DRangeFromUnchecked(0,mVtxCount / floatCount,mVtxData);  if (uploadToBufferObject) {    if (uploadToBufferObject) {      sm.getVertexAllocation(0).syncAll(Allocation.USAGE_SCRIPT);    }  }  sm.getIndexSetAllocation(0).copy1DRangeFromUnchecked(0,mIndexCount,mIndexData);  if (uploadToBufferObject) {    sm.getIndexSetAllocation(0).syncAll(Allocation.USAGE_SCRIPT);  }  return sm;}  }
class C{  public ValuePortrayal3D(int shape){  super(processArray(shape),SEMITRANSPARENT);  mPolyAttributes=new PolygonAttributes();  mPolyAttributes.setCapability(PolygonAttributes.ALLOW_MODE_WRITE);  mPolyAttributes.clearCapabilityIsFrequent(PolygonAttributes.ALLOW_MODE_WRITE);  if (shape == SHAPE_SQUARE) {    mPolyAttributes.setCapability(PolygonAttributes.ALLOW_CULL_FACE_WRITE);    mPolyAttributes.clearCapabilityIsFrequent(PolygonAttributes.ALLOW_CULL_FACE_WRITE);  } else   mPolyAttributes.setCullFace(PolygonAttributes.CULL_BACK);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public String invertSelectionTipText(){  return "Determines whether selected attributes are to be acted " + "on or all other attributes are used instead.";}  }
class C{  private void retrieveOutParams() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    int numParameters=this.paramInfo.numberOfParameters();    this.parameterIndexToRsIndex=new int[numParameters];    for (int i=0; i < numParameters; i++) {      this.parameterIndexToRsIndex[i]=NOT_OUTPUT_PARAMETER_INDICATOR;    }    int localParamIndex=0;    if (numParameters > 0) {      StringBuilder outParameterQuery=new StringBuilder("SELECT ");      boolean firstParam=true;      boolean hadOutputParams=false;      for (Iterator<CallableStatementParam> paramIter=this.paramInfo.iterator(); paramIter.hasNext(); ) {        CallableStatementParam retrParamInfo=paramIter.next();        if (retrParamInfo.isOut) {          hadOutputParams=true;          this.parameterIndexToRsIndex[retrParamInfo.index]=localParamIndex++;          if ((retrParamInfo.paramName == null) && (hasParametersView())) {            retrParamInfo.paramName="nullnp" + retrParamInfo.index;          }          String outParameterName=mangleParameterName(retrParamInfo.paramName);          if (!firstParam) {            outParameterQuery.append(",");          } else {            firstParam=false;          }          if (!outParameterName.startsWith("@")) {            outParameterQuery.append('@');          }          outParameterQuery.append(outParameterName);        }      }      if (hadOutputParams) {        java.sql.Statement outParameterStmt=null;        java.sql.ResultSet outParamRs=null;        try {          outParameterStmt=this.connection.createStatement();          outParamRs=outParameterStmt.executeQuery(outParameterQuery.toString());          this.outputParameterResults=((com.mysql.jdbc.ResultSetInternalMethods)outParamRs).copy();          if (!this.outputParameterResults.next()) {            this.outputParameterResults.close();            this.outputParameterResults=null;          }        }  finally {          if (outParameterStmt != null) {            outParameterStmt.close();          }        }      } else {        this.outputParameterResults=null;      }    } else {      this.outputParameterResults=null;    }  }}  }
class C{  public Boolean isVmotionWithStorageVMotionSupported(){  return vmotionWithStorageVMotionSupported;}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  Point theScreenResolution=new Point();  theScreenResolution=getDisplaySize(display);  screenResolution=theScreenResolution;  Log.i(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);  Log.i(TAG,"Camera resolution x: " + cameraResolution.x);  Log.i(TAG,"Camera resolution y: " + cameraResolution.y);}  }
class C{  public void removeDialog(String dialogId){  if (isLoggingEnabled()) {    stackLogger.logWarning("Silently removing dialog from table");  }  dialogTable.remove(dialogId);}  }
class C{  public XYEntry(K key,V value){  this.key=key;  this.value=value;}  }
class C{  private void insertCopies(BasicBlock bb,DominatorTree dom,LiveAnalysis live){  scheduleCopies(bb,live);  Enumeration<TreeNode> children=dom.getChildren(bb);  while (children.hasMoreElements()) {    BasicBlock c=((DominatorTreeNode)children.nextElement()).getBlock();    insertCopies(c,dom,live);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.REFERENCED_STATE_MACHINE___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.REFERENCED_STATE_MACHINE___DEFINITION_NAME_1:  return DEFINITION_NAME_1_EDEFAULT == null ? definitionName_1 != null : !DEFINITION_NAME_1_EDEFAULT.equals(definitionName_1);case UmplePackage.REFERENCED_STATE_MACHINE___EXTENDED_STATE_MACHINE_1:return extendedStateMachine_1 != null && !extendedStateMachine_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY).setContentRequired(false);  builder.addAttribute(YOMI);}  }
class C{  public DisplayMode(int width,int height,int bitDepth,int refreshRate){  this.size=new Dimension(width,height);  this.bitDepth=bitDepth;  this.refreshRate=refreshRate;}  }
class C{  public RemoteEndpointManager(NetworkConfig config){  this.config=config;}  }
class C{  public NodeReplaceByID(Element newe,SVGPlot plot,String id){  super();  this.newe=newe;  this.plot=plot;  this.id=id;}  }
class C{  @Override public String toString(String pad,int recursionLevel){  StringBuffer result=new StringBuffer();  result.append(pad);  result.append("+ ROOT\n");  for (  FPTreeNode node : m_children.values()) {    result.append(node.toString(pad + "|  ",recursionLevel));  }  return result.toString();}  }
class C{  protected Object[] initializeRoots(){  MethodModel method=(MethodModel)fInput;  if (!method.hasPointsToInfo())   return NO_CHILDREN;  List<MethodArgumentModel> methodArgs=new ArrayList<MethodArgumentModel>();  for (int i=-1; i < method.getMethodArguments().size(); i++) {    if (method.getArgumentAllocSources(i) != null)     methodArgs.add(method.getArgumentModel(i));  }  Object[] roots=new Object[methodArgs.size()];  for (int i=0; i < methodArgs.size(); i++) {    MethodArgumentModel methodArg=methodArgs.get(i);    TreeElement<MethodArgumentModel,AllocLocationModel> root=new TreeElement<MethodArgumentModel,AllocLocationModel>(methodArg.toString(),methodArg,AllocLocationModel.class);    roots[i]=root;    List<AllocLocationModel> locs=methodArg.getAllocSources();    for (    AllocLocationModel loc : locs) {      TreeElement<AllocLocationModel,CallLocationModel> locTreeElement=new TreeElement<AllocLocationModel,CallLocationModel>(loc.toString(),loc,CallLocationModel.class);      for (      CallLocationModel call : loc.getCallsOnAlloc()) {        TreeElement<CallLocationModel,Object> callTreeElement=new TreeElement<CallLocationModel,Object>(call.toString(),call,Object.class);        locTreeElement.addChild(callTreeElement);      }      root.addChild(locTreeElement);    }  }  return roots;}  }
class C{  protected void performAdditionalChecks(){}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  findAndInit(bcme.iterator());}  }
class C{  public boolean sendMail(final String subject,final String body){  return sendMail(getRecipient(),subject,body);}  }
class C{  public JNumberKeys(){  initComponents();  m_jKey0.addActionListener(new MyKeyNumberListener('0'));  m_jKey1.addActionListener(new MyKeyNumberListener('1'));  m_jKey2.addActionListener(new MyKeyNumberListener('2'));  m_jKey3.addActionListener(new MyKeyNumberListener('3'));  m_jKey4.addActionListener(new MyKeyNumberListener('4'));  m_jKey5.addActionListener(new MyKeyNumberListener('5'));  m_jKey6.addActionListener(new MyKeyNumberListener('6'));  m_jKey7.addActionListener(new MyKeyNumberListener('7'));  m_jKey8.addActionListener(new MyKeyNumberListener('8'));  m_jKey9.addActionListener(new MyKeyNumberListener('9'));  m_jKeyDot.addActionListener(new MyKeyNumberListener('.'));  m_jMultiply.addActionListener(new MyKeyNumberListener('*'));  m_jCE.addActionListener(new MyKeyNumberListener('\u007f'));  m_jPlus.addActionListener(new MyKeyNumberListener('+'));  m_jMinus.addActionListener(new MyKeyNumberListener('-'));  m_jEquals.addActionListener(new MyKeyNumberListener('='));}  }
class C{  public void enableTracing(Target target,String targetId) throws AdminException {}  }
class C{  private static void scheduleAlarm(Context context,long eventId,long alarmTime,long currentMillis,AlarmManagerInterface alarmManager){  long maxAlarmTime=currentMillis + MAX_ALARM_ELAPSED_MS;  if (alarmTime > maxAlarmTime) {    alarmTime=maxAlarmTime;  }  alarmTime+=ALARM_DELAY_MS;  if (AlertService.DEBUG) {    Time time=new Time();    time.set(alarmTime);    String schedTime=time.format("%a, %b %d, %Y %I:%M%P");    Log.d(TAG,"Scheduling alarm for EVENT_REMINDER_APP broadcast for event " + eventId + " at "+ alarmTime+ " ("+ schedTime+ ")");  }  Intent intent=new Intent(AlertReceiver.EVENT_REMINDER_APP_ACTION);  intent.setClass(context,AlertReceiver.class);  intent.putExtra(CalendarContract.CalendarAlerts.ALARM_TIME,alarmTime);  PendingIntent pi=PendingIntent.getBroadcast(context,0,intent,0);  alarmManager.set(AlarmManager.RTC_WAKEUP,alarmTime,pi);}  }
class C{  private static void defineUrlParserParameters(UrlParser urlParser,Properties properties,String hostAddressesString,String additionalParameters){  if (additionalParameters != null) {    String regex="(\\/[^\\?]*)(\\?.+)*|(\\?[^\\/]*)(\\/.+)*";    Pattern pattern=Pattern.compile(regex);    Matcher matcher=pattern.matcher(additionalParameters);    if (matcher.find()) {      String db1=(matcher.group(1) != null && !matcher.group(1).equals("/")) ? matcher.group(1).substring(1) : null;      String db2=(matcher.group(4) != null && !matcher.group(4).equals("/")) ? matcher.group(4).substring(1) : null;      String options1=(matcher.group(2) != null) ? matcher.group(2).substring(1) : "";      String options2=(matcher.group(3) != null) ? matcher.group(3).substring(1) : "";      urlParser.database=(db1 != null) ? db1 : db2;      urlParser.options=DefaultOptions.parse(urlParser.haMode,(!options1.equals("")) ? options1 : options2,properties,urlParser.options);    } else {      urlParser.database=null;      urlParser.options=DefaultOptions.parse(urlParser.haMode,"",properties,urlParser.options);    }  } else {    urlParser.database=null;    urlParser.options=DefaultOptions.parse(urlParser.haMode,"",properties,urlParser.options);  }  LoggerFactory.init(urlParser.options.log || urlParser.options.profileSql || urlParser.options.slowQueryThresholdNanos != null);  urlParser.addresses=HostAddress.parse(hostAddressesString,urlParser.haMode);}  }
class C{  private boolean checkToAvoid(IMovingAgent agent,IMovingAgent currentTarget){  State state=getState();  int mask=0;  int value=0;  if (agent == currentTarget)   value|=valueCurrentTarget;  if (agent instanceof Obstacle)   value|=valueObstacle;  if (agent instanceof Bee)   value|=valueBee;  if (agent instanceof Hive)   value|=valueHive;  if (agent instanceof HiveEntrance)   value|=valueEntrance;  if (agent instanceof FoodSource)   value|=valueFoodSource;switch (state) {case foraging:case searching:    mask=valueObstacle | valueBee | valueHive| valueEntrance;  break;case returnWithInfo:case returnWithInfoAndLoad:mask=valueObstacle | valueHive;break;case scouting:mask=valueObstacle | valueBee | valueHive| valueEntrance;break;case returnWithoutInfo:mask=valueObstacle | valueHive;break;case initialState:case leaveHive:case inHiveWithoutInfo:case inHiveWithInfo:case danceFollowing:case dancing:case unloadQueue:case dead:case terminated:System.err.println("checkToAvoid(): State " + state + " is not expected for testing to avoid.");return true;default :System.err.println("checkToAvoid(): State " + state + " is not implemented.");System.exit(-7);break;}return (value & mask) != 0;}  }
class C{  public IndTestFisherZ(ICovarianceMatrix covMatrix,double alpha){  this.covMatrix=covMatrix;  this.variables=covMatrix.getVariables();  this.indexMap=indexMap(variables);  this.nameMap=nameMap(variables);  setAlpha(alpha);}  }
class C{  public boolean checkUserLogin(String DataValue){  try {    TypedQuery<Users> query=em.createQuery("select c from Users as c where c.login = :DataValue AND c.deleted <> :deleted",Users.class);    query.setParameter("DataValue",DataValue);    query.setParameter("deleted","true");    int count=query.getResultList().size();    if (count != 0) {      return false;    }  } catch (  Exception ex2) {    log.error("[checkUserData]",ex2);  }  return true;}  }
class C{  private void bindAttrOrRelation(Class<?> cls,AccessibleObject fieldOrMethod){  boolean manyToMany=fieldOrMethod.isAnnotationPresent(ManyToMany.class);  boolean manyToOne=fieldOrMethod.isAnnotationPresent(ManyToOne.class);  boolean oneToMany=fieldOrMethod.isAnnotationPresent(OneToMany.class);  boolean oneToOne=fieldOrMethod.isAnnotationPresent(OneToOne.class);  boolean computedRelationship=fieldOrMethod.isAnnotationPresent(ComputedRelationship.class);  boolean isRelation=manyToMany || manyToOne || oneToMany|| oneToOne;  String fieldName=getFieldName(fieldOrMethod);  if (fieldName == null || fieldName.equals("id") || fieldName.equals("class") || OBJ_METHODS.contains(fieldOrMethod)) {    return;  }  Class<?> fieldType=getFieldType(fieldOrMethod);  ConcurrentLinkedDeque<String> fieldList;  if (isRelation) {    fieldList=relationshipsDeque;    RelationshipType type;    String mappedBy;    CascadeType[] cascadeTypes;    if (oneToMany) {      type=computedRelationship ? RelationshipType.COMPUTED_ONE_TO_MANY : RelationshipType.ONE_TO_MANY;      mappedBy=fieldOrMethod.getAnnotation(OneToMany.class).mappedBy();      cascadeTypes=fieldOrMethod.getAnnotation(OneToMany.class).cascade();    } else     if (oneToOne) {      type=computedRelationship ? RelationshipType.COMPUTED_ONE_TO_ONE : RelationshipType.ONE_TO_ONE;      mappedBy=fieldOrMethod.getAnnotation(OneToOne.class).mappedBy();      cascadeTypes=fieldOrMethod.getAnnotation(OneToOne.class).cascade();    } else     if (manyToMany) {      type=computedRelationship ? RelationshipType.COMPUTED_MANY_TO_MANY : RelationshipType.MANY_TO_MANY;      mappedBy=fieldOrMethod.getAnnotation(ManyToMany.class).mappedBy();      cascadeTypes=fieldOrMethod.getAnnotation(ManyToMany.class).cascade();    } else     if (manyToOne) {      type=computedRelationship ? RelationshipType.COMPUTED_MANY_TO_ONE : RelationshipType.MANY_TO_ONE;      mappedBy="";      cascadeTypes=fieldOrMethod.getAnnotation(ManyToOne.class).cascade();    } else {      type=computedRelationship ? RelationshipType.COMPUTED_NONE : RelationshipType.NONE;      mappedBy="";      cascadeTypes=new CascadeType[0];    }    relationshipTypes.put(fieldName,type);    relationshipToInverse.put(fieldName,mappedBy);    relationshipToCascadeTypes.put(fieldName,cascadeTypes);  } else {    fieldList=attributesDeque;  }  fieldList.push(fieldName);  fieldsToValues.put(fieldName,fieldOrMethod);  fieldsToTypes.put(fieldName,fieldType);}  }
class C{  private int parseEncryptionContextLen(final byte[] b,final int off) throws ParseException {  encryptionContextLen_=PrimitivesParser.parseUnsignedShort(b,off);  if (encryptionContextLen_ < 0) {    throw new BadCiphertextException("Invalid encryption context length in ciphertext");  }  return Short.SIZE / Byte.SIZE;}  }
class C{  private Builder(com.wipro.ats.bdre.imcrawler.mr.Contents.Builder other){  super(other);  if (isValidValue(fields()[0],other.docid)) {    this.docid=data().deepCopy(fields()[0].schema(),other.docid);    fieldSetFlags()[0]=true;  }  if (isValidValue(fields()[1],other.url)) {    this.url=data().deepCopy(fields()[1].schema(),other.url);    fieldSetFlags()[1]=true;  }  if (isValidValue(fields()[2],other.domain)) {    this.domain=data().deepCopy(fields()[2].schema(),other.domain);    fieldSetFlags()[2]=true;  }  if (isValidValue(fields()[3],other.path)) {    this.path=data().deepCopy(fields()[3].schema(),other.path);    fieldSetFlags()[3]=true;  }  if (isValidValue(fields()[4],other.subDomain)) {    this.subDomain=data().deepCopy(fields()[4].schema(),other.subDomain);    fieldSetFlags()[4]=true;  }  if (isValidValue(fields()[5],other.parentUrl)) {    this.parentUrl=data().deepCopy(fields()[5].schema(),other.parentUrl);    fieldSetFlags()[5]=true;  }  if (isValidValue(fields()[6],other.anchor)) {    this.anchor=data().deepCopy(fields()[6].schema(),other.anchor);    fieldSetFlags()[6]=true;  }  if (isValidValue(fields()[7],other.html)) {    this.html=data().deepCopy(fields()[7].schema(),other.html);    fieldSetFlags()[7]=true;  }  if (isValidValue(fields()[8],other.binary)) {    this.binary=data().deepCopy(fields()[8].schema(),other.binary);    fieldSetFlags()[8]=true;  }}  }
class C{  private void outputClients(Properties ctx,PrintWriter out,int clientID,boolean includeAny){  out.println("<clients>");  if (includeAny) {    out.println("<client id='-1'");    if (clientID == 0)     out.println(" selected='selected'");    out.println(">ANY</client>");  }  for (  MClient client : MClient.getAll(ctx)) {    out.print("<client id='" + client.getAD_Client_ID() + "'");    if (clientID == client.getAD_Client_ID())     out.print(" selected='selected'");    out.println(">" + Util.maskHTML(client.getName()) + "</client>");  }  out.println("</clients>");}  }
class C{  public static void deleteDirectory(Configuration conf,Path path) throws IOException {  Trash trash=new Trash(path.getFileSystem(conf),conf);  try {    if (!trash.isEnabled()) {      LOG.debug("Trash is not enabled for " + path + " so deleting instead");      FileSystem fs=path.getFileSystem(conf);      fs.delete(path,true);    } else {      boolean removed=trash.moveToTrash(path);      if (removed) {        LOG.debug("Moved to trash: " + path);      } else {        LOG.error("Item already in trash: " + path);      }    }  } catch (  FileNotFoundException e) {    LOG.debug("Attempting to delete non-existent directory " + path);    return;  }}  }
class C{  public static boolean isPrimitiveOrWrapper(Class<?> clazz){  Assert.notNull(clazz,"Class must not be null");  return (clazz.isPrimitive() || isPrimitiveWrapper(clazz));}  }
class C{  public ControlEditText(Context context){  this(context,null);}  }
class C{  public static <S extends HasDropOutHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    DropOutEvent event=new DropOutEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  private int growBuffer(int offset){  assert offset < 0;  byte[] oldBuf=myBuffer;  int oldLen=oldBuf.length;  byte[] newBuf=new byte[(-offset + oldLen) << 1];  int oldBegin=newBuf.length - oldLen;  System.arraycopy(oldBuf,0,newBuf,oldBegin,oldLen);  myBuffer=newBuf;  myOffset+=oldBegin;  return offset + oldBegin;}  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetownerdocumentnull.class,args);}  }
class C{  @Override public void run(){  amIActive=true;  try {    int i, j, progress, oldProgress;    ShapeFileRecord rec;    com.vividsolutions.jts.geom.Geometry jtsGeom;    com.vividsolutions.jts.geom.Geometry[] geomArray;    List<com.vividsolutions.jts.geom.Geometry> geomList=new ArrayList<>();    GeometryFactory factory=new GeometryFactory();    if (args.length != 3) {      showFeedback("Incorrect number of arguments given to tool.");      return;    }    String inputFile=args[0];    String clipFile=args[1];    String outputFile=args[2];    ShapeFile input=new ShapeFile(inputFile);    ShapeType shapeType=input.getShapeType().getBaseType();    ShapeFile clipRegion=new ShapeFile(clipFile);    if (clipRegion.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input clip shapefile must be of a POLYGON base ShapeType.");      return;    }    numFeatures=input.getNumberOfRecords();    AttributeTable table=input.getAttributeTable();    DBFField[] fields=table.getAllFields();    ShapeFile output=new ShapeFile(outputFile,shapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    int numClipFeatures=clipRegion.getNumberOfRecords();    BoundingBox[] clipBoxes=new BoundingBox[numClipFeatures];    for (i=0; i < numClipFeatures; i++) {      rec=clipRegion.getRecord(i);      clipBoxes[i]=rec.getGeometry().getBox();      geomArray=rec.getGeometry().getJTSGeometries();      for (int k=0; k < geomArray.length; k++) {        geomList.add(geomArray[k]);      }    }    com.vividsolutions.jts.geom.Geometry clipGeom=factory.buildGeometry(geomList);    if (!clipGeom.isValid()) {      com.vividsolutions.jts.geom.Geometry jtsGeom2=clipGeom.buffer(0d);      clipGeom=(com.vividsolutions.jts.geom.Geometry)jtsGeom2.clone();    }    ArrayList<DoWork> tasks=new ArrayList<>();    int numProcessors=Runtime.getRuntime().availableProcessors();    ExecutorService executor=Executors.newFixedThreadPool(numProcessors);    oldProgress=-1;    for (i=0; i < numFeatures; i++) {      rec=input.getRecord(i);      BoundingBox box=rec.getGeometry().getBox();      boolean isContained=false;      for (j=0; j < numClipFeatures; j++) {        if (clipBoxes[j].overlaps(box)) {          isContained=true;          break;        }      }      if (isContained) {        geomArray=rec.getGeometry().getJTSGeometries();        geomList.clear();        geomList.addAll(Arrays.asList(geomArray));        jtsGeom=factory.buildGeometry(geomList);        tasks.add(new DoWork(i,jtsGeom,clipGeom,shapeType));      }      progress=(int)(100f * i / (numFeatures - 1));      if (progress != oldProgress) {        updateProgress("Loop 1 of 2:",progress);        oldProgress=progress;        if (cancelOp) {          showFeedback("Operation cancelled");          return;        }      }    }    List<Future<WorkData>> results=executor.invokeAll(tasks);    executor.shutdown();    oldProgress=-1;    i=0;    for (    Future<WorkData> result : results) {      WorkData data=result.get();      int recNum=data.recordNum;      List<whitebox.geospatialfiles.shapefile.Geometry> wbGeometries=data.wbGeometries;      for (      whitebox.geospatialfiles.shapefile.Geometry geom : wbGeometries) {        Object[] rowData=table.getRecord(recNum);        output.addRecord(geom,rowData);      }      i++;      progress=(int)(100f * i / (numFeatures - 1));      if (progress != oldProgress) {        updateProgress("Writing Output:",progress);        oldProgress=progress;        if (cancelOp) {          if (!cancelOpMessagePlayed) {            showFeedback("Operation cancelled");          }          return;        }      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public CompositeFigureEdit(Figure figure,boolean isSignificant){  super(isSignificant);  this.figure=figure;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean bool(XPathContext xctxt,int contextNode,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  xctxt.pushNamespaceContext(namespaceContext);  xctxt.pushCurrentNodeAndExpression(contextNode,contextNode);  try {    return m_mainExp.bool(xctxt);  } catch (  TransformerException te) {    te.setLocator(this.getLocator());    ErrorListener el=xctxt.getErrorListener();    if (null != el) {      el.error(te);    } else     throw te;  }catch (  Exception e) {    while (e instanceof org.apache.xml.utils.WrappedRuntimeException) {      e=((org.apache.xml.utils.WrappedRuntimeException)e).getException();    }    String msg=e.getMessage();    if (msg == null || msg.length() == 0) {      msg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XPATH_ERROR,null);    }    TransformerException te=new TransformerException(msg,getLocator(),e);    ErrorListener el=xctxt.getErrorListener();    if (null != el) {      el.fatalError(te);    } else     throw te;  } finally {    xctxt.popNamespaceContext();    xctxt.popCurrentNodeAndExpression();  }  return false;}  }
class C{  @NoInline public boolean collectionPhase(int phaseId,boolean primary){  if (phaseId == Simple.SANITY_PREPARE) {    rootTraceLocal.prepare();    return true;  }  if (phaseId == Simple.SANITY_ROOTS) {    VM.scanning.computeGlobalRoots(rootTraceLocal);    VM.scanning.computeThreadRoots(rootTraceLocal);    VM.scanning.computeStaticRoots(rootTraceLocal);    if (Plan.SCAN_BOOT_IMAGE) {      VM.scanning.computeBootImageRoots(rootTraceLocal);    }    rootTraceLocal.flush();    return true;  }  if (phaseId == Simple.SANITY_COPY_ROOTS) {    if (primary) {      rootTraceLocal.copyRootValuesTo(Plan.sanityChecker.checkTraceLocal);    }    return true;  }  if (phaseId == Simple.SANITY_RELEASE) {    rootTraceLocal.release();    return true;  }  return false;}  }
class C{  public Zone showZone(String zoneName) throws NetworkDeviceControllerException {  return showZone(zoneName,null,true);}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  properties.setProperty("MapElement.Placemark.defaultColor",StringUtil.colorToString(defaultColor));  properties.setProperty("MapElement.Placemark.defaultSize",Double.toString(defaultSize));  properties.setProperty("MapElement.Placemark.defaultTextureIndex",Integer.toString(defaultTextureIndex));  properties.setProperty("MapElement.Placemark.defaultLabelVisible",Boolean.toString(defaultLabelVisible));}  }
class C{  public synchronized void run(){  while (true) {    try {      wait();      wait(delay);      if (source instanceof Component) {        parent=SwingUtilities.getRoot((Component)source);      } else       if (source instanceof MenuComponent) {        MenuContainer mParent=((MenuComponent)source).getParent();        if (mParent instanceof Component) {          parent=SwingUtilities.getRoot((Component)mParent);        }      }      if ((parent != null) && parent.isShowing()) {        parent.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));      }    } catch (    InterruptedException ie) {    }  }}  }
class C{  private void displayFragment(int position){  Fragment newFragment;  if (!data.get(position).isHas_tabs()) {    newFragment=FragmentEnum.valueOf(data.get(position).getFragment_id()).getFragment();  } else {    newFragment=new TabFragmentContainer();    Bundle args=new Bundle();    args.putParcelableArrayList(getString(R.string.tab_fragment_bundle_key),(ArrayList<? extends Parcelable>)data.get(position).getTabs());    newFragment.setArguments(args);  }  FragmentManager fragmentManager=getSupportFragmentManager();  FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();  fragmentTransaction.replace(R.id.container_body,newFragment);  fragmentTransaction.commit();  toolbarTitle.setText(data.get(position).getHeadline());}  }
class C{  public static String nameForStreamId(String streamId){  Objects.requireNonNull(streamId,"id");  return ID_PREFIX + streamId;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.viewPager=this.findView(R.id.view_pager_vp);  this.tabLayout=this.findView(R.id.tab_layout_tl);}  }
class C{  public CeylonRepoManagerBuilder overrides(String overrides){  this.overrides=overrides;  return this;}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  if (DEBUG)   System.out.println("endPrefixMapping: prefix: " + prefix);  if (null == prefix)   prefix="";  int index=m_contextIndexes.peek() - 1;  do {    index=m_prefixMappings.indexOf(prefix,++index);  } while ((index >= 0) && ((index & 0x01) == 0x01));  if (index > -1) {    m_prefixMappings.setElementAt("%@$#^@#",index);    m_prefixMappings.setElementAt("%@$#^@#",index + 1);  }}  }
class C{  public EPException(final Throwable cause){  super(cause);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!newRecord && ("Y".equals(Env.getContext(getCtx(),"$Element_LF")) || "Y".equals(Env.getContext(getCtx(),"$Element_LT"))) && (is_ValueChanged("Postal") || is_ValueChanged("City")))   MAccount.updateValueDescription(getCtx(),"(C_LocFrom_ID=" + getC_Location_ID() + " OR C_LocTo_ID="+ getC_Location_ID()+ ")",get_TrxName());  return success;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION___GET_RECEIVER:    return getReceiver();case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION___IS_PARAMETERIZED:  return isParameterized();}return super.eInvoke(operationID,arguments);}  }
class C{  public Iterable<Key> keysInOrder(){  Queue<Key> queue=new Queue<Key>();  keysInOrder(root,queue);  return queue;}  }
class C{  private void moveToNextStatMessage(){  secondCounter=0;  statMessageIndex++;  if (statMessageIndex == STATS_MESSAGES) {    statMessageIndex=0;  }  int retries=0;  while (!refreshStatsMessage(false) && retries < STATS_MESSAGES) {    statMessageIndex++;    if (statMessageIndex == STATS_MESSAGES) {      statMessageIndex=0;    }    retries++;  }}  }
class C{  public Iterator<String> keys(){  return this.keySet().iterator();}  }
class C{  public SoftValueHashMap(){  hash=new HashMap();}  }
class C{  private static boolean startsWith(String str,String prefix,boolean ignoreCase){  if (str == null || prefix == null) {    return (str == null && prefix == null);  }  if (prefix.length() > str.length()) {    return false;  }  return str.regionMatches(ignoreCase,0,prefix,0,prefix.length());}  }
class C{  private void initExtendedTypes(){  m_extendedTypes=new ExtendedType[m_initialSize];  for (int i=0; i < DTM.NTYPES; i++) {    m_extendedTypes[i]=m_defaultExtendedTypes[i];    m_table[i]=new HashEntry(m_defaultExtendedTypes[i],i,i,null);  }  m_nextType=DTM.NTYPES;}  }
class C{  public static SynthStyle updateSeaglassStyle(SynthContext context,SeaglassUI ui){  SynthStyle newStyle=getStyle(context.getComponent(),context.getRegion());  return newStyle;}  }
class C{  public void removeEdge(String factor,LaggedFactor laggedFactor){  TreeSet list=(TreeSet)connectivity.get(factor);  if (list != null) {    list.remove(laggedFactor);  } else {    throw new IllegalArgumentException("Either factor not in graph (" + factor + ") or lagged factor not in graph or not into "+ "factor ("+ laggedFactor+ ").");  }}  }
class C{  public boolean isSpinning(){  if (isSpinning) {    return true;  } else {    return false;  }}  }
class C{  @Override public String toString(){  return this.makeString("[",", ","]");}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  StmtBody stmtBody=(StmtBody)b;  Chain units=stmtBody.getUnits();  Iterator stmtIt=units.snapshotIterator();  while (stmtIt.hasNext()) {    Stmt stmt=(Stmt)stmtIt.next();    if (!stmt.containsInvokeExpr()) {      continue;    }    InvokeExpr expr=(InvokeExpr)stmt.getInvokeExpr();    for (int i=0; i < expr.getArgCount(); i++) {      Value v=expr.getArg(i);      if (v instanceof StringConstant) {        Local arg=Jimple.v().newLocal(LOCAL_PREFIX + LOCALID++,RefType.v("java.lang.String"));        stmtBody.getLocals().add(arg);        AssignStmt assignStmt=Jimple.v().newAssignStmt(arg,StringConstant.v(((StringConstant)v).value));        units.insertBefore(assignStmt,stmt);        expr.setArg(i,arg);      }    }  }}  }
class C{  protected void addConstrainedTypeApp(TypeApp typeapp){  if (!this.instance.associatedTypeApps.contains(typeapp)) {    this.instance.associatedTypeApps.add(typeapp);  }}  }
class C{  public void testWriteMessageWithNegativeEnumValue() throws Exception {  SparseEnumMessage message=SparseEnumMessage.newBuilder().setSparseEnum(TestSparseEnum.SPARSE_E).build();  assertTrue(message.getSparseEnum().getNumber() < 0);  byte[] rawBytes=message.toByteArray();  SparseEnumMessage message2=SparseEnumMessage.parseFrom(rawBytes);  assertEquals(TestSparseEnum.SPARSE_E,message2.getSparseEnum());}  }
class C{  protected void adjustChildIndexs(int index,int amount){  for (int counter=index, maxCounter=getChildCount(); counter < maxCounter; counter++) {    ((FHTreeStateNode)getChildAt(counter)).childIndex+=amount;  }}  }
class C{  public void RemoveAllNoClear(){  if (null == m_map)   return;  m_firstFree=0;}  }
class C{  public void draw(GL10 gl){  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);  gl.glEnable(GL10.GL_TEXTURE_2D);  gl.glBindTexture(GL10.GL_TEXTURE_2D,textures[0]);  gl.glColor4f(color[0],color[1],color[2],color[3]);  gl.glVertexPointer(COORDS_PER_VERTEX,GL10.GL_FLOAT,0,vertexBuffer);  gl.glTexCoordPointer(2,GL10.GL_FLOAT,0,textureBuffer);  gl.glDrawElements(GL10.GL_TRIANGLES,drawOrder.length,GL10.GL_UNSIGNED_SHORT,drawListBuffer);  gl.glDisable(GL10.GL_TEXTURE_2D);  gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);  gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);}  }
class C{  public boolean upgradeAvailable(URI tenantId){  UriBuilder uriBuilder=client.uriBuilder(PathConstants.CATALOG_UPGRADE_URI);  if (tenantId != null) {    uriBuilder=uriBuilder.queryParam(SearchConstants.TENANT_ID_PARAM,tenantId);  }  CatalogUpgrade response=client.getURI(CatalogUpgrade.class,uriBuilder.build());  return response != null && response.getUpgradeAvailable();}  }
class C{  public static void enable(boolean enabled,Control... controls){  if (controls != null) {    for (    Control control : controls) {      control.setEnabled(enabled);    }  }}  }
class C{  public final void sort(Attribute att){  sort(att.index());}  }
class C{  public static SdfId createPairedReaderDNAFastq(final String inputDnaSequenceLeft,final String inputDnaSequenceRight,final File dir,SdfId sdfId) throws IOException {  final SdfId id;  try (SequencesReader sr1=getReaderDNAFastq(inputDnaSequenceLeft,new File(dir,"left"),false)){    id=sr1.getSdfId();    final SequencesReader sr2=getReaderDNAFastq(inputDnaSequenceRight,new File(dir,"right"),false);    sr2.close();  }   return id;}  }
class C{  @Override public boolean equals(Object other){  if (other == null)   return false;  if (other.getClass() != getClass()) {    return false;  }  Authority otherAuth=(Authority)other;  if (!this.hostPort.equals(otherAuth.hostPort)) {    return false;  }  if (this.userInfo != null && otherAuth.userInfo != null) {    if (!this.userInfo.equals(otherAuth.userInfo)) {      return false;    }  }  return true;}  }
class C{  public LOFKNNListener(LOFResult<O> lofResult){  this.lofResult=lofResult;}  }
class C{  protected boolean[] declaresSerialVersionUID(){  boolean[] result=new boolean[2];  print("serialVersionUID...");  result[0]=!SerializationHelper.needsUID(m_Classifier.getClass());  if (result[0]) {    println("yes");  } else {    println("no");  }  return result;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9,e10);}  }
class C{  private int evaluateExpression(){  Stack<Integer> operandStack=new Stack<>();  Stack<Character> operatorStack=new Stack<>();  String expression=insertBlanks(textField.getText());  String[] tokens=expression.split(" ");  for (  String token : tokens) {    if (token.length() == 0)     continue; else     if (token.charAt(0) == '+' || token.charAt(0) == '-') {      while (!operatorStack.isEmpty() && (operatorStack.peek() == '+' || operatorStack.peek() == '-' || operatorStack.peek() == '*' || operatorStack.peek() == '/')) {        processAnOperator(operandStack,operatorStack);      }      operatorStack.push(token.charAt(0));    } else     if (token.charAt(0) == '*' || token.charAt(0) == '/') {      while (!operatorStack.isEmpty() && (operatorStack.peek() == '*') || operatorStack.peek() == '/') {        processAnOperator(operandStack,operatorStack);      }      operatorStack.push(token.charAt(0));    } else     if (token.trim().charAt(0) == '(') {      operatorStack.push('(');    } else     if (token.trim().charAt(0) == ')') {      while (operatorStack.peek() != '(') {        processAnOperator(operandStack,operatorStack);      }      operatorStack.pop();    } else {      operandStack.push(new Integer(token));    }  }  while (!operatorStack.isEmpty()) {    processAnOperator(operandStack,operatorStack);  }  return operandStack.pop();}  }
class C{  @Override public boolean isValid(String value){  if (value == null) {    return false;  }  if (!ASCII_PATTERN.matcher(value).matches()) {    return false;  }  Matcher urlMatcher=URL_PATTERN.matcher(value);  if (!urlMatcher.matches()) {    return false;  }  String scheme=urlMatcher.group(PARSE_URL_SCHEME);  if (!isValidScheme(scheme)) {    return false;  }  if (!isValidQuery(urlMatcher.group(PARSE_URL_QUERY))) {    return false;  }  if (!isValidFragment(urlMatcher.group(PARSE_URL_FRAGMENT))) {    return false;  }  return true;}  }
class C{  public OuterJoinQualifier add(String propertyLeft,String propertyRight){  additionalProperties.add(new PropertyValueExpressionPair(new PropertyValueExpression(propertyLeft),new PropertyValueExpression(propertyRight)));  return this;}  }
class C{  public void close(){  this.readyState=WebSocket.WEBSOCKET_STATE_CLOSING;  try {    this.socketChannel.close();  } catch (  IOException e) {    this.onError(e);  }  this.running=false;  selector.wakeup();  this.onClose();  this.readyState=WebSocket.WEBSOCKET_STATE_CLOSED;}  }
class C{  private void addAuthStatement(AssertionType assertion) throws DatatypeConfigurationException {  AuthnStatementType authStmt=_assertionFactory.createAuthnStatementType();  AuthnContextType authnContextType=_assertionFactory.createAuthnContextType();  authnContextType.setAuthnContextClassRef(AUTH_CONTEXT_PASS);  authStmt.setAuthnContext(authnContextType);  authStmt.setAuthnInstant(getIssueInstant());  assertion.getAuthnStatementOrAttributeStatement().add(authStmt);}  }
class C{  private void onCollapseImageArea(){  imageAreaIsExpanded=false;  setActionBarIconClose();}  }
class C{  public void testBug11115() throws Exception {  String tableName="testBug11115";  if (versionMeetsMinimum(4,1,0)) {    createTable(tableName,"(pwd VARBINARY(30)) DEFAULT CHARACTER SET utf8","InnoDB");    byte[] bytesToTest=new byte[]{17,120,-1,-73,-5};    PreparedStatement insStmt=this.conn.prepareStatement("INSERT INTO " + tableName + " (pwd) VALUES (?)");    insStmt.setBytes(1,bytesToTest);    insStmt.executeUpdate();    this.rs=this.stmt.executeQuery("SELECT pwd FROM " + tableName);    this.rs.next();    byte[] fromDatabase=this.rs.getBytes(1);    assertEquals(bytesToTest.length,fromDatabase.length);    for (int i=0; i < bytesToTest.length; i++) {      assertEquals(bytesToTest[i],fromDatabase[i]);    }    this.rs=this.conn.prepareStatement("SELECT pwd FROM " + tableName).executeQuery();    this.rs.next();    fromDatabase=this.rs.getBytes(1);    assertEquals(bytesToTest.length,fromDatabase.length);    for (int i=0; i < bytesToTest.length; i++) {      assertEquals(bytesToTest[i],fromDatabase[i]);    }  }}  }
class C{  private void generateBankTransfer(){  MBankAccount mBankFrom=new MBankAccount(getCtx(),p_From_C_BankAccount_ID,get_TrxName());  MBankAccount mBankTo=new MBankAccount(getCtx(),p_To_C_BankAccount_ID,get_TrxName());  MPayment paymentBankFrom=new MPayment(getCtx(),0,get_TrxName());  paymentBankFrom.setC_BankAccount_ID(mBankFrom.getC_BankAccount_ID());  paymentBankFrom.setDocumentNo(p_DocumentNo);  paymentBankFrom.setDateAcct(p_DateAcct);  paymentBankFrom.setDateTrx(p_StatementDate);  paymentBankFrom.setTenderType(MPayment.TENDERTYPE_DirectDeposit);  paymentBankFrom.setDescription(p_Description);  paymentBankFrom.setC_BPartner_ID(p_C_BPartner_ID);  paymentBankFrom.setC_Currency_ID(p_C_Currency_ID);  if (p_C_ConversionType_ID > 0)   paymentBankFrom.setC_ConversionType_ID(p_C_ConversionType_ID);  paymentBankFrom.setPayAmt(p_Amount);  paymentBankFrom.setOverUnderAmt(Env.ZERO);  paymentBankFrom.setC_DocType_ID(false);  paymentBankFrom.setC_Charge_ID(p_C_Charge_ID);  paymentBankFrom.saveEx();  paymentBankFrom.processIt(MPayment.DOCACTION_Complete);  paymentBankFrom.saveEx();  MPayment paymentBankTo=new MPayment(getCtx(),0,get_TrxName());  paymentBankTo.setC_BankAccount_ID(mBankTo.getC_BankAccount_ID());  paymentBankTo.setDocumentNo(p_DocumentNo);  paymentBankTo.setDateAcct(p_DateAcct);  paymentBankTo.setDateTrx(p_StatementDate);  paymentBankTo.setTenderType(MPayment.TENDERTYPE_DirectDeposit);  paymentBankTo.setDescription(p_Description);  paymentBankTo.setC_BPartner_ID(p_C_BPartner_ID);  paymentBankTo.setC_Currency_ID(p_C_Currency_ID);  if (p_C_ConversionType_ID > 0)   paymentBankFrom.setC_ConversionType_ID(p_C_ConversionType_ID);  paymentBankTo.setPayAmt(p_Amount);  paymentBankTo.setOverUnderAmt(Env.ZERO);  paymentBankTo.setC_DocType_ID(true);  paymentBankTo.setC_Charge_ID(p_C_Charge_ID);  paymentBankTo.saveEx();  paymentBankTo.processIt(MPayment.DOCACTION_Complete);  paymentBankTo.saveEx();  m_created++;  return;}  }
class C{  public static CodedInputStream newInstance(final byte[] buf){  return newInstance(buf,0,buf.length);}  }
class C{  public static boolean deleteRecursive(File fileOrDirectory){  if (fileOrDirectory.isDirectory()) {    File[] list=fileOrDirectory.listFiles();    if (list == null) {      return false;    }    for (    File f : list) {      if (!deleteRecursive(f)) {        return false;      }    }  }  if (!fileOrDirectory.delete()) {    if (fileOrDirectory.exists()) {      return false;    }  }  return true;}  }
class C{  private void notifySubstitutionChanged(final TypeSubstitution substitution){  for (  final TypeSubstitutionChangedListener listener : substitutionListeners) {    listener.substitutionsChanged(Sets.newHashSet(substitution));  }}  }
class C{  public void runTest(){  try {    assureResultsDirectoryExists(RESULTS_DIR);    Template template1=Velocity.getTemplate(getFileName(null,"path1",TMPL_FILE_EXT));    Template template2=Velocity.getTemplate(getFileName(null,"template/test1",TMPL_FILE_EXT));    Template template3=Velocity.getTemplate(getFileName(null,"template/test2",TMPL_FILE_EXT));    FileOutputStream fos1=new FileOutputStream(getFileName(RESULTS_DIR,"path1",RESULT_FILE_EXT));    FileOutputStream fos2=new FileOutputStream(getFileName(RESULTS_DIR,"test2",RESULT_FILE_EXT));    FileOutputStream fos3=new FileOutputStream(getFileName(RESULTS_DIR,"test3",RESULT_FILE_EXT));    Writer writer1=new BufferedWriter(new OutputStreamWriter(fos1));    Writer writer2=new BufferedWriter(new OutputStreamWriter(fos2));    Writer writer3=new BufferedWriter(new OutputStreamWriter(fos3));    VelocityContext context=new VelocityContext();    template1.merge(context,writer1);    writer1.flush();    writer1.close();    template2.merge(context,writer2);    writer2.flush();    writer2.close();    template3.merge(context,writer3);    writer3.flush();    writer3.close();    if (!isMatch(RESULTS_DIR,COMPARE_DIR,"path1",RESULT_FILE_EXT,CMP_FILE_EXT)) {      fail("Output incorrect for FileResourceLoader test.");    }    if (!isMatch(RESULTS_DIR,COMPARE_DIR,"test2",RESULT_FILE_EXT,CMP_FILE_EXT)) {      fail("Output incorrect for ClasspathResourceLoader test.");    }    if (!isMatch(RESULTS_DIR,COMPARE_DIR,"test3",RESULT_FILE_EXT,CMP_FILE_EXT)) {      fail("Output incorrect for JarResourceLoader test.");    }  } catch (  Exception e) {    fail(e.getMessage());  }}  }
class C{  public static <K,V>Map<K,V> readNullableMap(BinaryRawReaderEx reader){  if (!reader.readBoolean())   return null;  return readMap(reader);}  }
class C{  protected void processBDDPLists(){  int count=0;  Set<NodePortTuple> nptList=new HashSet<NodePortTuple>();  while (count < BDDP_TASK_SIZE && quarantineQueue.peek() != null) {    NodePortTuple npt;    npt=quarantineQueue.remove();    sendDiscoveryMessage(npt.getNodeId(),npt.getPortId(),false,false);    nptList.add(npt);    count++;  }  count=0;  while (count < BDDP_TASK_SIZE && maintenanceQueue.peek() != null) {    NodePortTuple npt;    npt=maintenanceQueue.remove();    sendDiscoveryMessage(npt.getNodeId(),npt.getPortId(),false,false);    count++;  }  for (  NodePortTuple npt : nptList) {    generateSwitchPortStatusUpdate(npt.getNodeId(),npt.getPortId());  }}  }
class C{  public static boolean isDescendantOrSelf(Node ctx,Node descendantOrSelf){  if (ctx == descendantOrSelf) {    return true;  }  Node parent=descendantOrSelf;  while (true) {    if (parent == null) {      return false;    }    if (parent == ctx) {      return true;    }    if (parent.getNodeType() == Node.ATTRIBUTE_NODE) {      parent=((Attr)parent).getOwnerElement();    } else {      parent=parent.getParentNode();    }  }}  }
class C{  private void edgeStmt(String i){  nextToken("error getting target of edge");  if (m_st.sval != null) {    m_edges.addElement(new InfoObject("an edge ,no id"));    m_edges.lastElement().m_source=i;    m_edges.lastElement().m_target=m_st.sval;    nodeId(m_st.sval,1);  } else {    System.out.println("error getting target of edge");  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.256 -0500",hash_original_method="3EE339644717E8959D7BEAA9750FDE03",hash_generated_method="0F41B9F0A794DA792133C40C5D75BFC3") public StringBuilder replace(int start,int end,String str){  replace0(start,end,str);  return this;}  }
class C{  List<URI> orderNetworksForAllocation(Map<URI,Set<URI>> hostToNetworks,Map<URI,Integer> net2MaxHostInitiators){  List<URI> orderedNetworks=new ArrayList<URI>();  List<URI> skippedNetworks=new ArrayList<URI>();  for (  Map.Entry<URI,Set<URI>> entry : hostToNetworks.entrySet()) {    if (entry.getValue().size() == 1) {      skippedNetworks.addAll(entry.getValue());      continue;    }    List<NetworkInitiatorCount> netInitiatorCounts=new ArrayList<NetworkInitiatorCount>();    for (    URI net : entry.getValue()) {      netInitiatorCounts.add(new NetworkInitiatorCount(net,net2MaxHostInitiators.get(net)));    }    Collections.sort(netInitiatorCounts);    List<URI> ordered=new ArrayList<URI>();    for (    NetworkInitiatorCount netInitiatorCount : netInitiatorCounts) {      ordered.add(netInitiatorCount.net);      if (!orderedNetworks.contains(netInitiatorCount.net)) {        orderedNetworks.add(netInitiatorCount.net);      }    }    _log.info(String.format("host %s ordered nets %s",entry.getKey(),ordered));  }  for (  URI skippedNet : skippedNetworks) {    if (!orderedNetworks.contains(skippedNet)) {      _log.info("Adding skipped network " + skippedNet);      orderedNetworks.add(skippedNet);    }  }  _log.info("Ordered networks: " + orderedNetworks);  return orderedNetworks;}  }
class C{  private void sumUsagesByCategory(String propType,Map<String,BoundryWisePropUsgeBean> propTypeMap,BoundryWisePropUsgeBean bean){  LOGGER.debug("Entered into sumUsagesByCategory method");  LOGGER.debug("Property Type : " + propType);  LOGGER.debug("PropTypeMap : " + (propTypeMap != null ? propTypeMap : ZERO));  BoundryWisePropUsgeBean newBean=new BoundryWisePropUsgeBean();  BoundryWisePropUsgeBean existingBean=propTypeMap.get(propType);  LOGGER.debug("Existing Bean Details : ");  LOGGER.debug("Total Properties : " + existingBean.getPropCount() + ", "+ "Arrears Demand : "+ existingBean.getArrDmd()+ ", "+ "Current Demand : "+ existingBean.getCurrDmd()+ ", "+ "Total Demand : "+ existingBean.getTotalDemand());  newBean.setArrDmd(existingBean.getArrDmd().add(bean.getArrDmd()));  newBean.setCurrDmd(existingBean.getCurrDmd().add(bean.getCurrDmd()));  newBean.setTotalDemand(existingBean.getTotalDemand().add(bean.getTotalDemand()));  newBean.setPropCount(existingBean.getPropCount() + bean.getPropCount());  propTypeMap.remove(propType);  propTypeMap.put(propType,newBean);  LOGGER.debug("New Bean Details : ");  LOGGER.debug("Total Properties : " + newBean.getPropCount() + ", "+ "Arrears Demand : "+ newBean.getArrDmd()+ ", "+ "Current Demand : "+ newBean.getCurrDmd()+ ", "+ "Total Demand : "+ newBean.getTotalDemand());  LOGGER.debug("Exit from sumUsagesByCategory method");}  }
class C{  private String removeRequest(String url){synchronized (pendingRequest) {    return pendingRequest.remove(url);  }}  }
class C{  public void endCDATA() throws SAXException {  if (null != m_resultLexicalHandler)   m_resultLexicalHandler.endCDATA();}  }
class C{  void writeSubFile(int i,String name) throws IOException {  File outfile=new File(name);  OutputStream ostream=new FileOutputStream(outfile);  try {    ostream.write(headers[i].getByteArray());  }  finally {    ostream.close();  }}  }
class C{  public double shortestDistance(final V a,final V b){  lazyCalculateMatrix();  return d[vertices.indexOf(a)][vertices.indexOf(b)];}  }
class C{  public static final Parameter base(){  return new Parameter(P_RULE);}  }
class C{  public static boolean isValidName11(String s){  int len=s.length();  if (len == 0) {    return false;  }  char c=s.charAt(0);  int d=c / 32;  int m=c % 32;  if ((NAME11_FIRST_CHARACTER[d] & (1 << m)) == 0) {    return false;  }  for (int i=1; i < len; i++) {    c=s.charAt(i);    d=c / 32;    m=c % 32;    if ((NAME11_CHARACTER[d] & (1 << m)) == 0) {      return false;    }  }  return true;}  }
class C{  private boolean validate(InputNode node,Class type) throws Exception {  Schema schema=context.getSchema(type);  Section section=schema.getSection();  validateText(node,schema);  validateSection(node,section);  return node.isElement();}  }
class C{  public MLContext(JavaSparkContext javaSparkContext){  this(javaSparkContext.sc(),false);}  }
class C{  public static char[] asCharArray(byte[] bytes){  char[] chars=new char[bytes.length];  for (int i=0; i != chars.length; i++) {    chars[i]=(char)(bytes[i] & 0xff);  }  return chars;}  }
class C{  public void constValueIndex(float value) throws IOException {  constValueIndex('F',pool.addFloatInfo(value));}  }
class C{  @LargeTest public void testVideoContentHD() throws Exception {  final String videoItemFileName1=INPUT_FILE_PATH + "H264_BP_1920x1080_30fps_1200Kbps_1_10.mp4";  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem1;  boolean flagForException=true;  try {    mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFileName1,renderingMode);  } catch (  IllegalArgumentException e) {  }  assertTrue("VideoContent 1920x1080",flagForException);}  }
class C{  public void ensureCapacity(int increament) throws BufferOverflowException {  if (buffer.remaining() >= increament) {    return;  }  int requiredCapacity=buffer.capacity() + increament - buffer.remaining();  if (requiredCapacity > m_maxCapacity) {    throw new BufferOverflowException();  }  int tmp=Math.max(requiredCapacity,buffer.capacity() * 2);  int newCapacity=Math.min(tmp,m_maxCapacity);  ByteBuffer newBuffer=ByteBuffer.allocate(newCapacity);  newBuffer.order(buffer.order());  buffer.flip();  newBuffer.put(buffer);  buffer=newBuffer;}  }
class C{  private static ElementKey<?,?> mergeKeys(ElementKey<?,?> sourceKey,ElementKey<?,?> metadataKey){  if (!metadataKey.getId().equals(sourceKey.getId())) {    return ElementKey.of(metadataKey.getId(),sourceKey.getDatatype(),sourceKey.getElementType());  }  return sourceKey;}  }
class C{  protected static void parseContentTypeParams(ByteArrayInputStream pduDataStream,HashMap<Integer,Object> map,Integer length){  assert (null != pduDataStream);  assert (length > 0);  int startPos=pduDataStream.available();  int tempPos=0;  int lastLen=length;  while (0 < lastLen) {    int param=pduDataStream.read();    assert (-1 != param);    lastLen--;switch (param) {case PduPart.P_TYPE:case PduPart.P_CT_MR_TYPE:      pduDataStream.mark(1);    int first=extractByteValue(pduDataStream);  pduDataStream.reset();if (first > TEXT_MAX) {  int index=parseShortInteger(pduDataStream);  if (index < PduContentTypes.contentTypes.length) {    byte[] type=(PduContentTypes.contentTypes[index]).getBytes();    map.put(PduPart.P_TYPE,type);  } else {  }} else {  byte[] type=parseWapString(pduDataStream,TYPE_TEXT_STRING);  if ((null != type) && (null != map)) {    map.put(PduPart.P_TYPE,type);  }}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;case PduPart.P_START:case PduPart.P_DEP_START:byte[] start=parseWapString(pduDataStream,TYPE_TEXT_STRING);if ((null != start) && (null != map)) {map.put(PduPart.P_START,start);}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;case PduPart.P_CHARSET:pduDataStream.mark(1);int firstValue=extractByteValue(pduDataStream);pduDataStream.reset();if (((firstValue > TEXT_MIN) && (firstValue < TEXT_MAX)) || (END_STRING_FLAG == firstValue)) {byte[] charsetStr=parseWapString(pduDataStream,TYPE_TEXT_STRING);try {int charsetInt=CharacterSets.getMibEnumValue(new String(charsetStr));map.put(PduPart.P_CHARSET,charsetInt);} catch (UnsupportedEncodingException e) {map.put(PduPart.P_CHARSET,CharacterSets.ANY_CHARSET);}} else {int charset=(int)parseIntegerValue(pduDataStream);if (map != null) {map.put(PduPart.P_CHARSET,charset);}}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;case PduPart.P_DEP_NAME:case PduPart.P_NAME:byte[] name=parseWapString(pduDataStream,TYPE_TEXT_STRING);if ((null != name) && (null != map)) {map.put(PduPart.P_NAME,name);}tempPos=pduDataStream.available();lastLen=length - (startPos - tempPos);break;default :if (-1 == skipWapValue(pduDataStream,lastLen)) {} else {lastLen=0;}break;}}if (0 != lastLen) {}}  }
class C{  public void reset() throws XNIException {  super.reset();  fInDTD=false;  fVersion="1.0";  fStandalone=false;  fNamespaces=fConfiguration.getFeature(NAMESPACES);  fAugmentations=null;  fDeclaredAttrs=null;}  }
class C{  protected List<Point2D> initSource(){  List<Point2D> source=new ArrayList<Point2D>();  for (double y=-85; y <= 85; y++) {    for (double x=-180; x < 180; x++) {      source.add(new Point2D.Double(x,y));    }  }  logger.fine("created source with " + source.size() + " points");  return source;}  }
class C{  public synchronized void removeHost(String hostPortPair,boolean removeExisting,boolean waitForGracefulFailover) throws SQLException {  if (this.activeHosts == 1) {    throw SQLError.createSQLException("Cannot remove host, only one configured host active.",null);  }  if (this.hostList.remove(hostPortPair)) {    this.activeHosts--;  } else {    throw SQLError.createSQLException("Host is not configured: " + hostPortPair,null);  }  if (removeExisting) {    Map<Long,LoadBalancedConnectionProxy> proxyMap=new HashMap<Long,LoadBalancedConnectionProxy>();synchronized (this.connectionProxies) {      proxyMap.putAll(this.connectionProxies);    }    for (    LoadBalancedConnectionProxy proxy : proxyMap.values()) {      if (waitForGracefulFailover) {        proxy.removeHostWhenNotInUse(hostPortPair);      } else {        proxy.removeHost(hostPortPair);      }    }  }  this.closedHosts.add(hostPortPair);}  }
class C{  public static boolean isOpposite(int quad1,int quad2){  if (quad1 == quad2)   return false;  int diff=(quad1 - quad2 + 4) % 4;  if (diff == 2)   return true;  return false;}  }
class C{  public BayesUpdaterClassifierEditor(BayesUpdaterClassifierWrapper wrapper){  this(wrapper.getClassifier());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:08.676 -0400",hash_original_method="F390E337D6352367BF020E091E2B438B",hash_generated_method="8E32C8D41118D9235A7CC44D6951ACEF") private static Collection<?> findFactories(String service){  HashSet<Object> fact=new HashSet<Object>();  Provider[] pp=Security.getProviders();  if ((pp == null) || (pp.length == 0)) {    return fact;  }  HashSet<String> props=new HashSet<String>();  for (int i=0; i < pp.length; i++) {    String prName=pp[i].getName();    Enumeration<Object> keys=pp[i].keys();    while (keys.hasMoreElements()) {      String s=(String)keys.nextElement();      if (s.startsWith(service)) {        String prop=pp[i].getProperty(s);        try {          if (props.add(prName.concat(prop))) {            fact.add(newInstance(prop,pp[i]));          }        } catch (        SaslException e) {          e.printStackTrace();        }      }    }  }  return fact;}  }
class C{  public Parameter defaultBase(){  return new Parameter(P_PROBLEM);}  }
class C{  private final void handleIdleState(){  SearchRequest sr=searchRequest;  if (sr == null)   return;  if ((uciEngine == null) || !engineState.engine.equals(sr.engine)) {    shutdownEngine();    startEngine();    return;  }  if (newGame) {    uciEngine.writeLineToEngine("ucinewgame");    uciEngine.writeLineToEngine("isready");    engineState.setState(MainState.WAIT_READY);    newGame=false;    return;  }  if (applyPendingOptions()) {    uciEngine.writeLineToEngine("isready");    engineState.setState(MainState.WAIT_READY);    return;  }  boolean isSearch=sr.isSearch;  boolean isAnalyze=sr.isAnalyze;  if (!isSearch && !isAnalyze) {    searchRequest=null;    return;  }  engineState.searchId=searchRequest.searchId;  if (isSearch) {    long now=System.currentTimeMillis();    int delay=(int)(now - searchRequest.startTime);    boolean wtm=searchRequest.currPos.whiteMove ^ (searchRequest.ponderMove != null);    if (wtm)     searchRequest.wTime=Math.max(1,searchRequest.wTime - delay); else     searchRequest.bTime=Math.max(1,searchRequest.bTime - delay);  }  clearInfo();  uciEngine.setStrength(searchRequest.strength);  if (maxPV > 1) {    int num=Math.min(maxPV,searchRequest.numPV);    uciEngine.setOption("MultiPV",num);  }  if (isSearch) {    StringBuilder posStr=new StringBuilder();    posStr.append("position fen ");    posStr.append(TextIO.toFEN(sr.prevPos));    int nMoves=sr.mList.size();    if (nMoves > 0) {      posStr.append(" moves");      for (int i=0; i < nMoves; i++) {        posStr.append(" ");        posStr.append(TextIO.moveToUCIString(sr.mList.get(i)));      }    }    uciEngine.setOption("Ponder",sr.ponderEnabled);    uciEngine.setOption("UCI_AnalyseMode",false);    uciEngine.writeLineToEngine(posStr.toString());    if (sr.wTime < 1)     sr.wTime=1;    if (sr.bTime < 1)     sr.bTime=1;    StringBuilder goStr=new StringBuilder(96);    goStr.append(String.format(Locale.US,"go wtime %d btime %d",sr.wTime,sr.bTime));    if (sr.wInc > 0)     goStr.append(String.format(Locale.US," winc %d",sr.wInc));    if (sr.bInc > 0)     goStr.append(String.format(Locale.US," binc %d",sr.bInc));    if (sr.movesToGo > 0)     goStr.append(String.format(Locale.US," movestogo %d",sr.movesToGo));    if (sr.ponderMove != null)     goStr.append(" ponder");    if (sr.searchMoves != null) {      goStr.append(" searchmoves");      for (      Move m : sr.searchMoves) {        goStr.append(' ');        goStr.append(TextIO.moveToUCIString(m));      }    }    uciEngine.writeLineToEngine(goStr.toString());    engineState.setState((sr.ponderMove == null) ? MainState.SEARCH : MainState.PONDER);  } else {    StringBuilder posStr=new StringBuilder();    posStr.append("position fen ");    posStr.append(TextIO.toFEN(sr.prevPos));    int nMoves=sr.mList.size();    if (nMoves > 0) {      posStr.append(" moves");      for (int i=0; i < nMoves; i++) {        posStr.append(" ");        posStr.append(TextIO.moveToUCIString(sr.mList.get(i)));      }    }    uciEngine.writeLineToEngine(posStr.toString());    uciEngine.setOption("UCI_AnalyseMode",true);    StringBuilder goStr=new StringBuilder(96);    goStr.append("go infinite");    if (sr.searchMoves != null) {      goStr.append(" searchmoves");      for (      Move m : sr.searchMoves) {        goStr.append(' ');        goStr.append(TextIO.moveToUCIString(m));      }    }    uciEngine.writeLineToEngine(goStr.toString());    engineState.setState(MainState.ANALYZE);  }}  }
class C{  private String replaceLanguageAndRegion(String str){  if (str.contains("%lang%") || str.contains("%region%")) {    Locale locale=Locale.getDefault();    str=str.replace("%lang%",locale.getLanguage().toLowerCase());    str=str.replace("%region%",locale.getCountry().toLowerCase());  }  return str;}  }
class C{  private static boolean isNodeWithDataType(Element node){  return node.getName().equalsIgnoreCase(NODE_ATTRIBUTE) && ATTRIBUTE_OPENMRS_DATATYPE.equalsIgnoreCase(node.getAttributeValue(null,ATTRIBUTE_NAME));}  }
class C{  private void initBlockDecoder() throws IOException {  try {    blockDecoder=null;    blockDecoder=new BlockInputStream(in,check,memoryLimit,curBlockInfo.unpaddedSize,curBlockInfo.uncompressedSize);  } catch (  MemoryLimitException e) {    assert memoryLimit >= 0;    throw new MemoryLimitException(e.getMemoryNeeded() + indexMemoryUsage,memoryLimit + indexMemoryUsage);  }catch (  IndexIndicatorException e) {    throw new CorruptedInputException();  }}  }
class C{  public static String expand(String source,int length,char ch,boolean beg){  StringBuffer sb=new StringBuffer(source == null ? "" : source.length() > length ? (beg ? source.substring(source.length() - length) : source.substring(0,length)) : source);  while (sb.length() < length) {    if (beg) {      sb.insert(0,ch);    } else {      sb.append(ch);    }  }  return sb.toString();}  }
class C{  public void mouseClicked(MouseEvent e){  if (getComponent() == null) {    return;  }  int nclicks=SwingUtilities2.getAdjustedClickCount(getComponent(),e);  if (!e.isConsumed()) {    if (SwingUtilities.isLeftMouseButton(e)) {      if (nclicks == 1) {        selectedWordEvent=null;      } else       if (nclicks == 2 && SwingUtilities2.canEventAccessSystemClipboard(e)) {        selectWord(e);        selectedWordEvent=null;      } else       if (nclicks == 3 && SwingUtilities2.canEventAccessSystemClipboard(e)) {        Action a=null;        ActionMap map=getComponent().getActionMap();        if (map != null) {          a=map.get(DefaultEditorKit.selectLineAction);        }        if (a == null) {          if (selectLine == null) {            selectLine=new DefaultEditorKit.SelectLineAction();          }          a=selectLine;        }        a.actionPerformed(new ActionEvent(getComponent(),ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));      }    } else     if (SwingUtilities.isMiddleMouseButton(e)) {      if (nclicks == 1 && component.isEditable() && component.isEnabled() && SwingUtilities2.canEventAccessSystemClipboard(e)) {        JTextComponent c=(JTextComponent)e.getSource();        if (c != null) {          try {            Toolkit tk=c.getToolkit();            Clipboard buffer=tk.getSystemSelection();            if (buffer != null) {              adjustCaret(e);              TransferHandler th=c.getTransferHandler();              if (th != null) {                Transferable trans=null;                try {                  trans=buffer.getContents(null);                } catch (                IllegalStateException ise) {                  UIManager.getLookAndFeel().provideErrorFeedback(c);                }                if (trans != null) {                  th.importData(c,trans);                }              }              adjustFocus(true);            }          } catch (          HeadlessException he) {          }        }      }    }  }}  }
class C{  private void initExpirationListener(View shareView){  mOnExpirationDateInteractionListener=new OnExpirationDateInteractionListener();  ((Switch)shareView.findViewById(R.id.shareViaLinkExpirationSwitch)).setOnCheckedChangeListener(mOnExpirationDateInteractionListener);  shareView.findViewById(R.id.shareViaLinkExpirationLabel).setOnClickListener(mOnExpirationDateInteractionListener);  shareView.findViewById(R.id.shareViaLinkExpirationValue).setOnClickListener(mOnExpirationDateInteractionListener);}  }
class C{  private static boolean[] createSafeOctets(String safeChars){  int maxChar=-1;  char[] safeCharArray=safeChars.toCharArray();  for (  char c : safeCharArray) {    maxChar=Math.max(c,maxChar);  }  boolean[] octets=new boolean[maxChar + 1];  for (  char c : safeCharArray) {    octets[c]=true;  }  return octets;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  Properties ctx=JSPEnv.getCtx(request);  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  String searchString=WebUtil.getParameter(request,P_SEARCHSTRING);  if (searchString != null)   ctx.put(P_SEARCHSTRING,searchString);  String category=WebUtil.getParameter(request,P_M_PRODUCT_CATEGORY_ID);  if (category != null)   ctx.put(P_M_PRODUCT_CATEGORY_ID,category);  String url="/index.jsp";  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public static ErrorCodeAttribute createErrorCodeAttribute(char errorCode) throws StunException {  return createErrorCodeAttribute(errorCode,null);}  }
class C{  public void testSimpleFunction(){  Context cx=Context.enter();  try {    Object result=cx.evaluateString(global,"f(7) + 1","test source",1,null);    assertEquals(15.0,result);  }  finally {    Context.exit();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void rotate(Animator.AnimatorListener listener){  clearAnimation();  rotationAnimator.removeAllListeners();  rotationAnimator.addListener(listener);  if (rotation == MAX_ROTATION) {    rotationAnimator.setFloatValues(0.0f);    rotationAnimator.start();  } else {    rotationAnimator.setFloatValues(MAX_ROTATION);    rotationAnimator.start();  }}  }
class C{  private CLIQUEUnit(ArrayList<CLIQUEInterval> intervals,ModifiableDBIDs ids){  this.intervals=intervals;  this.ids=ids;  assigned=false;}  }
class C{  protected String agentName(){  return this.agentName;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public <K>T ajax(String url,Class<K> type,long expire,Object handler,String callback){  AjaxCallback<K> cb=new AjaxCallback<K>();  cb.type(type).weakHandler(handler,callback).fileCache(true).expire(expire);  return ajax(url,type,cb);}  }
class C{  private void addResourceLink(Document doc,Resource resource) throws DocumentException {  if (resource.getStatus() != PublicationStatus.PRIVATE) {    Paragraph p=new Paragraph();    p.setFont(font);    p.add(new Phrase(getText("rtf.resourceLink") + " ",fontTitle));    Anchor gbifLink=new Anchor("GBIF",fontLinkTitle);    gbifLink.setReference(Constants.GBIF_HOME_PAGE_URL);    p.add(gbifLink);    p.add(": ");    String link=appConfig.getResourceUrl(resource.getShortname());    Anchor resourceLink=new Anchor(link,fontLink);    resourceLink.setReference(link);    p.add(resourceLink);    p.add(Chunk.NEWLINE);    doc.add(p);    p.clear();  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response deleteNetwork(@PathParam("id") URI id,@QueryParam("force") boolean force){  ArgValidator.checkFieldUriType(id,Network.class,"id");  Network network=_dbClient.queryObject(Network.class,id);  ArgValidator.checkEntityNotNull(network,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.UNREGISTERED.toString().equals(network.getRegistrationStatus())) {    throw APIException.badRequests.invalidParameterCannotDeactivateRegisteredNetwork(network.getId());  }  if (network.getDiscovered()) {    throw APIException.badRequests.invalidParameterCannotDeleteDiscoveredNetwork(network.getId());  }  if (network.getDiscovered() != true && force) {    NetworkAssociationHelper.handleEndpointsRemoved(network,network.retrieveEndpoints(),_dbClient,_coordinator);    _dbClient.markForDeletion(network);  } else   if (network.getDiscovered() != true && network.retrieveEndpoints() != null && !network.retrieveEndpoints().isEmpty()) {    throw APIException.badRequests.unableToDeleteNetworkContainsEndpoints();  } else {    NetworkAssociationHelper.handleEndpointsRemoved(network,network.retrieveEndpoints(),_dbClient,_coordinator);    _dbClient.markForDeletion(network);  }  recordAndAudit(network,OperationTypeEnum.DELETE_NETWORK);  return Response.ok().build();}  }
class C{  public long rangeCount(final Resource s,final URI p,final Value o,final Resource... c) throws Exception {  return rangeCount(false,s,p,o,c);}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized <T>T[] toArray(T[] contents){  if (elementCount > contents.length) {    return null;  }  System.arraycopy(elementData,0,contents,0,elementCount);  if (elementCount < contents.length) {    contents[elementCount]=null;  }  return contents;}  }
class C{  public void addListener(FileUploadSessionListener listener){  mListener=listener;}  }
class C{  public Tomcat85AgentValve(){  super(true);}  }
class C{  public void actionPerformed(ActionEvent e){  if (EDIT.equals(e.getActionCommand())) {    button.setBackground(currentColor);    colorChooser.setColor(currentColor);    dialog.setVisible(true);    fireEditingStopped();  } else {    currentColor=colorChooser.getColor();  }}  }
class C{  private static byte expectedNorm(final ClassicSimilarity sim,final int length,final float boost){  return (byte)sim.encodeNormValue(boost / ((float)Math.sqrt(length)));}  }
class C{  @Override public void openElement(String tagName,int index){  int count=0;  NodeList list=current.getChildNodes();  int len=list.getLength();  for (int i=0; i < len; i++) {    Node node=list.item(i);    if ((node instanceof Element) && ((Element)node).getTagName().equals(tagName)) {      if (count++ == index) {        current=node;        return;      }    }  }  throw new IllegalArgumentException("no such child " + tagName + "["+ index+ "]");}  }
class C{  public Object read(InputNode node) throws Exception {  Instance type=factory.getInstance(node);  Object list=type.getInstance();  if (!type.isReference()) {    return populate(node,list);  }  return list;}  }
class C{  public void addAllBlockIds(List<String> outList){  outList.add(getId());  int inputCount=mInputList.size();  for (int i=0; i < inputCount; ++i) {    Input input=mInputList.get(i);    Block connectedBlock=input.getConnectedBlock();    if (connectedBlock != null) {      connectedBlock.addAllBlockIds(outList);    }  }  if (mNextConnection != null) {    Block next=mNextConnection.getTargetBlock();    if (next != null) {      next.addAllBlockIds(outList);    }  }}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public SVGOMMatrix(AffineTransform at){  affineTransform=at;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < getLocals(); ++i) {    sb.append(getLocal(i));  }  sb.append(' ');  for (int i=0; i < getStackSize(); ++i) {    sb.append(getStack(i).toString());  }  return sb.toString();}  }
class C{  public void add(int i,int value){  expand(_size + 1);  System.arraycopy(_data,i,_data,i + 1,_size - i);  _data[i]=value;  _size++;}  }
class C{  public XMLFilter newXMLFilter(Templates templates) throws TransformerConfigurationException {  try {    return new TrAXFilter(templates);  } catch (  TransformerConfigurationException ex) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(ex);        return null;      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    }    throw ex;  }}  }
class C{  private static boolean isLetter(int c){  return (c >= 65 && c <= 90) || (c >= 97 && c <= 122) || (EXPANDED_LETTERS && (c == '_' || c == '-'));}  }
class C{  public void resetKeyStroke(){  currentKeyStroke=new KeyStroke();}  }
class C{  protected void buildRequestBody(OutputStream os) throws IOException {  if (post && requestArguments != null) {    StringBuilder val=new StringBuilder();    Enumeration e=requestArguments.keys();    while (e.hasMoreElements()) {      String key=(String)e.nextElement();      Object requestVal=requestArguments.get(key);      if (requestVal instanceof String) {        String value=(String)requestVal;        val.append(key);        val.append("=");        val.append(value);        if (e.hasMoreElements()) {          val.append("&");        }        continue;      }      String[] valArray=(String[])requestVal;      int vlen=valArray.length;      for (int iter=0; iter < vlen - 1; iter++) {        val.append(key);        val.append("=");        val.append(valArray[iter]);        val.append("&");      }      val.append(key);      val.append("=");      val.append(valArray[vlen - 1]);      if (e.hasMoreElements()) {        val.append("&");      }    }    if (shouldWriteUTFAsGetBytes()) {      os.write(val.toString().getBytes("UTF-8"));    } else {      OutputStreamWriter w=new OutputStreamWriter(os,"UTF-8");      w.write(val.toString());    }  }}  }
class C{  private void startPrecaching(){  Log.v(TAG,"Start precaching");  prepareNativeLibraries();  mIsPrecaching=true;  acquirePrecachingWakeLock();  mPrecacheLauncher.start();}  }
class C{  public FloatHalfBandNoDecimateFilter(Filters filter,float gain){  mCoefficients=filter.getCoefficients();  mBuffer=new ArrayList<Float>();  mBufferSize=mCoefficients.length;  for (int x=0; x < mCoefficients.length; x++) {    mBuffer.add(0.0f);  }  generateIndexMap(mCoefficients.length);  mGain=gain;}  }
class C{  protected void handleMesosFailure(String taskId){  int attempt=TaskUtils.getAttemptForTaskId(taskId);  BaseContainer container=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));  boolean hasAttemptsLeft=attempt < container.retries;  if (hasAttemptsLeft) {    LOG.warning(String.format("Retrying task: %s, attempt: %d",container.name,attempt + 1));    String newTaskId=TaskUtils.getTaskId(container.name,attempt + 1);    scheduleNewTask(newTaskId);  } else {    LOG.severe("Would not restart the job since it is beyond retries: " + attempt);  }}  }
class C{  public ObjectParser(final Object context,final Class<?> type,final String[] packages){  this(context,type,packages,null);}  }
class C{  public static byte[] decode(String s){  return decode(s.toCharArray());}  }
class C{  public StdOutWriter(){  super(System.out,true);}  }
class C{  public boolean isWrapperFor(Class iface) throws SQLException {  return true;}  }
class C{  private static void addChildSetParent(Object3D parent,Object3D object){  try {    parent.addChild(object);    mParent.set(object,parent);  } catch (  Exception e) {    RajLog.e("Reflection error Object3D.mParent");  }}  }
class C{  protected boolean isExactlyOnce(){  return true;}  }
class C{  public boolean isNotifyDelete(){  return parseBoolean(getFieldValue(ConfigureNodeFields.notify_delete));}  }
class C{  public void close() throws java.io.IOException {  flush();  super.close();  buffer=null;  out=null;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public void testStagingEditFrame(){  StagingEditFrame f=new StagingEditFrame();  f.setTitle("Test Staging Add Frame");  f.setLocation(0,0);  f.initComponents(l,null);  f.trackNameTextField.setText("new staging track");  f.trackLengthTextField.setText("34");  getHelper().enterClickAndLeave(new MouseEventData(this,f.addTrackButton));  f.trackNameTextField.setText("2nd staging track");  f.trackLengthTextField.setText("3456");  getHelper().enterClickAndLeave(new MouseEventData(this,f.addTrackButton));  f.trackNameTextField.setText("3rd staging track");  f.trackLengthTextField.setText("1");  getHelper().enterClickAndLeave(new MouseEventData(this,f.addTrackButton));  f.trackNameTextField.setText("4th staging track");  f.trackLengthTextField.setText("12");  getHelper().enterClickAndLeave(new MouseEventData(this,f.addTrackButton));  getHelper().enterClickAndLeave(new MouseEventData(this,f.northCheckBox));  getHelper().enterClickAndLeave(new MouseEventData(this,f.westCheckBox));  getHelper().enterClickAndLeave(new MouseEventData(this,f.southCheckBox));  getHelper().enterClickAndLeave(new MouseEventData(this,f.saveTrackButton));  sleep(1);  Track t=l.getTrackByName("2nd staging track",null);  Assert.assertNotNull("2nd staging track",t);  Assert.assertEquals("2nd staging track length",3456,t.getLength());  Assert.assertEquals("all directions",ALL,t.getTrainDirections());  Assert.assertEquals("all roads",Track.ALL_ROADS,t.getRoadOption());  t=l.getTrackByName("3rd staging track",null);  Assert.assertNotNull("3rd staging track",t);  Assert.assertEquals("3rd staging track length",1,t.getLength());  Assert.assertEquals("all directions",ALL,t.getTrainDirections());  Assert.assertEquals("all roads",Track.ALL_ROADS,t.getRoadOption());  t=l.getTrackByName("4th staging track",null);  Assert.assertNotNull("4th staging track",t);  Assert.assertEquals("4th staging track length",12,t.getLength());  Assert.assertEquals("only east",Track.EAST,t.getTrainDirections());  f.dispose();  Location l2=lManager.getLocationByName("Test Loc A");  Assert.assertNotNull("Test Loc A",l2);  LocationEditFrame fl=new LocationEditFrame(l2);  fl.setTitle("Test Edit Location Frame Staging");  Assert.assertEquals("name","Test Loc A",fl.locationNameTextField.getText());  Assert.assertEquals("number of sidings",0,fl.spurModel.getRowCount());  Assert.assertEquals("number of interchanges",0,fl.interchangeModel.getRowCount());  Assert.assertEquals("number of yards",0,fl.yardModel.getRowCount());  Assert.assertEquals("number of staging tracks",4,fl.stagingModel.getRowCount());  Assert.assertTrue("staging selected",fl.stageRadioButton.isSelected());  fl.dispose();}  }
class C{  public ElementCreatorImpl adapt(String kind,ElementKey<?,?> adaptation){synchronized (registry) {    adaptations.put(kind,adaptation);    registry.register(adaptation);    registry.dirty();  }  return this;}  }
class C{  @Inject protected MavenBuildPresenter(BuildController buildController,DtoFactory dtoFactory,MavenBuildView view){  this.view=view;  this.view.setDelegate(this);  this.view.setBuildCommand("clean install");  this.dtoFactory=dtoFactory;  this.buildController=buildController;}  }
class C{  public void loggerCreated(final String category,final Logger logger){  notifyLoggerCreated(category,logger);}  }
class C{  @Override public boolean canWrite(){  return true;}  }
class C{  public void testClassificationNominal(){  performTest(false,true,false,false,false);}  }
class C{  public void runTest(){  String template="$woogie.doException() boing!";  VelocityContext vc=new VelocityContext();  vc.put("woogie",this);  StringWriter w=new StringWriter();  try {    Velocity.evaluate(vc,w,"test",template);    fail("No exception thrown");  } catch (  MethodInvocationException mie) {    System.out.println("Caught MIE (good!) :");    System.out.println("  reference = " + mie.getReferenceName());    System.out.println("  method    = " + mie.getMethodName());    Throwable t=mie.getWrappedThrowable();    System.out.println("  throwable = " + t);    if (t instanceof Exception) {      System.out.println("  exception = " + ((Exception)t).getMessage());    }  }catch (  Exception e) {    fail("Wrong exception thrown, first test." + e);    e.printStackTrace();  }  template="$woogie.foo boing!";  try {    Velocity.evaluate(vc,w,"test",template);    fail("No exception thrown, second test.");  } catch (  MethodInvocationException mie) {    System.out.println("Caught MIE (good!) :");    System.out.println("  reference = " + mie.getReferenceName());    System.out.println("  method    = " + mie.getMethodName());    Throwable t=mie.getWrappedThrowable();    System.out.println("  throwable = " + t);    if (t instanceof Exception) {      System.out.println("  exception = " + ((Exception)t).getMessage());    }  }catch (  Exception e) {    fail("Wrong exception thrown, second test");  }  template="$woogie.Foo boing!";  try {    Velocity.evaluate(vc,w,"test",template);    fail("No exception thrown, third test.");  } catch (  MethodInvocationException mie) {    System.out.println("Caught MIE (good!) :");    System.out.println("  reference = " + mie.getReferenceName());    System.out.println("  method    = " + mie.getMethodName());    Throwable t=mie.getWrappedThrowable();    System.out.println("  throwable = " + t);    if (t instanceof Exception) {      System.out.println("  exception = " + ((Exception)t).getMessage());    }  }catch (  Exception e) {    fail("Wrong exception thrown, third test");  }  template="#set($woogie.foo = 'lala') boing!";  try {    Velocity.evaluate(vc,w,"test",template);    fail("No exception thrown, set test.");  } catch (  MethodInvocationException mie) {    System.out.println("Caught MIE (good!) :");    System.out.println("  reference = " + mie.getReferenceName());    System.out.println("  method    = " + mie.getMethodName());    Throwable t=mie.getWrappedThrowable();    System.out.println("  throwable = " + t);    if (t instanceof Exception) {      System.out.println("  exception = " + ((Exception)t).getMessage());    }  }catch (  Exception e) {    fail("Wrong exception thrown, set test");  }}  }
class C{  private void startTransaction() throws SQLException {  transactionStarted=true;  conn.setAutoCommit(false);}  }
class C{  public static double[][] makeDelayEmbeddingVector(double[][] data,int column,int k,int tau,int startKthPoint,int numEmbeddingVectors) throws Exception {  if (startKthPoint < (k - 1) * tau) {    throw new Exception("Start point t=" + startKthPoint + " is too early for a "+ k+ " length embedding vector with delay "+ tau);  }  if (numEmbeddingVectors + startKthPoint > data.length) {    throw new Exception("Too many embedding vectors " + numEmbeddingVectors + " requested for the given startPoint "+ startKthPoint+ " and time series length "+ data.length);  }  double[][] embeddingVectors=new double[numEmbeddingVectors][k];  for (int t=startKthPoint; t < numEmbeddingVectors + startKthPoint; t++) {    for (int i=0; i < k; i++) {      embeddingVectors[t - startKthPoint][i]=data[t - i * tau][column];    }  }  return embeddingVectors;}  }
class C{  public static boolean isFileExist(String filePath){  if (StringUtils.isBlank(filePath)) {    return false;  }  File file=new File(filePath);  return (file.exists() && file.isFile());}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (semIms == null) {    throw new NullPointerException();  }}  }
class C{  public boolean isBeginningInstruction(){  if (predecessors.size() == 0) {    return false;  }  return predecessors.first().instructionIndex == -1;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.710 -0500",hash_original_method="0F527F16FE7A8194B2376A18FA9A34FA",hash_generated_method="0F527F16FE7A8194B2376A18FA9A34FA") void error(int errorId,int resourceId){  mEventHandler.error(errorId,mConnection.mContext.getText(resourceId).toString());}  }
class C{  private String createString(String f){  return "srcArray=" + srcArray + f+ "srcPos="+ srcPos+ f+ "srcPtr="+ srcPtr+ f+ "srcDevice="+ srcDevice+ f+ "dstArray="+ dstArray+ f+ "dstPos="+ dstPos+ f+ "dstPtr="+ dstPtr+ f+ "dstDevice="+ dstDevice+ f+ "extent="+ extent;}  }
class C{  protected String toCommandLine(Element parent){  Vector<String> result;  Vector<Element> list;  Vector<Element> subList;  NodeList subNodeList;  String[] params;  int i;  int n;  String tmpStr;  result=new Vector<String>();  if (parent.getNodeName().equals(TAG_OPTIONS)) {    list=XMLDocument.getChildTags(parent);    if (parent.getAttribute(ATT_TYPE).equals(VAL_TYPE_CLASSIFIER)) {      System.err.println("Type '" + VAL_TYPE_CLASSIFIER + "' is deprecated, "+ "use '"+ VAL_TYPE_OPTIONHANDLER+ "' instead!");      parent.setAttribute(ATT_TYPE,VAL_TYPE_OPTIONHANDLER);    }    if (parent.getAttribute(ATT_TYPE).equals(VAL_TYPE_OPTIONHANDLER)) {      result.add(parent.getAttribute(ATT_VALUE));      if ((list.size() > 0) && (parent.getParentNode() != null) && (parent.getParentNode() instanceof Element)&& (((Element)parent.getParentNode()).getNodeName().equals(TAG_OPTION))&& (((Element)parent.getParentNode()).getAttribute(ATT_TYPE).equals(VAL_TYPE_HYPHENS))) {        result.add("--");      }    }    for (i=0; i < list.size(); i++) {      tmpStr=toCommandLine(list.get(i));      try {        params=Utils.splitOptions(tmpStr);        for (n=0; n < params.length; n++) {          result.add(params[n]);        }      } catch (      Exception e) {        System.err.println("Error splitting: " + tmpStr);        e.printStackTrace();      }    }  } else   if (parent.getNodeName().equals(TAG_OPTION)) {    subList=XMLDocument.getChildTags(parent);    subNodeList=parent.getChildNodes();    result.add("-" + parent.getAttribute(ATT_NAME));    if (parent.getAttribute(ATT_TYPE).equals(VAL_TYPE_SINGLE)) {      if ((subNodeList.getLength() > 0) && (subNodeList.item(0).getNodeValue().trim().length() > 0)) {        result.add(subNodeList.item(0).getNodeValue());      }    } else     if (parent.getAttribute(ATT_TYPE).equals(VAL_TYPE_QUOTES)) {      result.add(toCommandLine(subList.get(0)));    } else     if (parent.getAttribute(ATT_TYPE).equals(VAL_TYPE_HYPHENS)) {      tmpStr=toCommandLine(subList.get(0));      try {        params=Utils.splitOptions(tmpStr);        for (n=0; n < params.length; n++) {          result.add(params[n]);        }      } catch (      Exception e) {        System.err.println("Error splitting: " + tmpStr);        e.printStackTrace();      }    }  } else {    System.err.println("Unsupported tag '" + parent.getNodeName() + "' - skipped!");  }  return Utils.joinOptions(result.toArray(new String[result.size()]));}  }
class C{  protected void assertState(Phaser phaser,int phase,int parties,int unarrived){  assertEquals(phase,phaser.getPhase());  assertEquals(parties,phaser.getRegisteredParties());  assertEquals(unarrived,phaser.getUnarrivedParties());  assertEquals(parties - unarrived,phaser.getArrivedParties());  assertFalse(phaser.isTerminated());}  }
class C{  public Image paintLock(boolean hardLock){  if (!paintLockEnableChecked) {    paintLockEnableChecked=true;    paintLockEnabled=Display.getInstance().getProperty("paintLockEnabled","true").equals("true");  }  if (!paintLockEnabled || !Display.getInstance().areMutableImagesFast()) {    return null;  }  if ((getStyle().getBgTransparency() & 0xff) != 0xff) {    return null;  }  if (paintLockImage == null) {    paintLockImage=Image.createImage(getWidth(),getHeight());    int x=getX();    int y=getY();    setX(0);    setY(0);    paintInternalImpl(((Image)paintLockImage).getGraphics(),false);    setX(x);    setY(y);    if (hardLock) {      return (Image)paintLockImage;    } else {      paintLockImage=Display.getInstance().createSoftWeakRef(paintLockImage);    }  } else {    if (hardLock) {      return (Image)paintLockImage;    }  }  return null;}  }
class C{  public MyLinkedList(E[] objects){  super(objects);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.680 -0400",hash_original_method="2C8858F1FEF258A79F4059C0A1CB8058",hash_generated_method="73DBD95B0639383FC78436A99232C748") @Override public String toString(){  return super.toString() + "[caseSensitivity=" + caseSensitivity+ "]";}  }
class C{  public boolean parse(){  try {    String jsonManifest=readManifestFile(manifestPath);    Object obj=parser.parse(jsonManifest);    rootJSONObject=(JSONObject)obj;    return true;  } catch (  IOException ioe) {    logger.error("Error reading " + manifestPath + ": "+ ioe.toString());    return false;  }catch (  ParseException pe) {    logger.error("Error parsing JSON from " + manifestPath + ": "+ pe.getPosition());    logger.error(pe);    return false;  }}  }
class C{  public synchronized void add(double x,double y,double value){  super.add(x,y);  mValue.add(value);  updateRange(value);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.SOFTWARE_PATTERN___IS_A1:    getIsA_1().clear();  getIsA_1().addAll((Collection<? extends IsA_>)newValue);return;case UmplePackage.SOFTWARE_PATTERN___SINGLETON_1:getSingleton_1().clear();getSingleton_1().addAll((Collection<? extends Singleton_>)newValue);return;case UmplePackage.SOFTWARE_PATTERN___IMMUTABLE_1:getImmutable_1().clear();getImmutable_1().addAll((Collection<? extends Immutable_>)newValue);return;case UmplePackage.SOFTWARE_PATTERN___KEY_DEFINITION_1:getKeyDefinition_1().clear();getKeyDefinition_1().addAll((Collection<? extends KeyDefinition_>)newValue);return;case UmplePackage.SOFTWARE_PATTERN___CODE_INJECTION_1:getCodeInjection_1().clear();getCodeInjection_1().addAll((Collection<? extends CodeInjection_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void closeQuietly(final Closeable closeable){  try {    if (closeable != null) {      closeable.close();    }  } catch (  IOException ex) {  }}  }
class C{  @Override public void clearBatch(){  parameterList.clear();  this.parameters=new ParameterHolder[prepareResult.getParamCount()];}  }
class C{  @Override public void run(){  try {    BufferedReader reader=new BufferedReader(new InputStreamReader(socket.getInputStream(),FILE_ENCODING));    TranslationRequestStream request=new TranslationRequestStream(reader,joshuaConfiguration);    try {      TranslationResponseStream translationResponseStream=decoder.decodeAll(request);      OutputStream out=socket.getOutputStream();      for (      Translation translation : translationResponseStream) {        out.write(translation.toString().getBytes());      }    } catch (    SocketException e) {      LOG.error(" Socket interrupted",e);      request.shutdown();    } finally {      reader.close();      socket.close();    }  } catch (  IOException e) {    LOG.error(e.getMessage(),e);  }}  }
class C{  private void sendEMail(HttpServletRequest request,Properties ctx,WebOrder wo,WebUser wu){  StringBuffer message=new StringBuffer("\n");  MOrder mo=wo.getOrder();  if (mo != null) {    MOrderLine[] ol=mo.getLines(true,null);    for (int i=0; i < ol.length; i++) {      message.append("\n").append(ol[i].getQtyOrdered()).append(" * ").append(ol[i].getName());      if (ol[i].getDescription() != null)       message.append(" - ").append(ol[i].getDescription());      message.append(" (").append(ol[i].getPriceActual()).append(") = ").append(ol[i].getLineNetAmt());    }  }  message.append("\n\n").append(Msg.getElement(ctx,"C_Order_ID")).append(": ").append(wo.getDocumentNo()).append(" - ").append(Msg.getElement(ctx,"GrandTotal")).append(": ").append(wo.getGrandTotal());  JSPEnv.sendEMail(request,wu,MMailMsg.MAILMSGTYPE_OrderAcknowledgement,new Object[]{wo.getDocumentNo(),wu.getName(),message.toString()});}  }
class C{  public static int hash32(final String text){  final byte[] bytes=text.getBytes();  return hash32(bytes,bytes.length);}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(MAP)) {    maps=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:PolicyMappingsExtension.");  }  encodeThis();}  }
class C{  protected String doIt() throws Exception {  int Table_ID=getTable_ID();  int Record_ID=getRecord_ID();  if (m_matchers == null || m_matchers.length == 0)   throw new IllegalStateException("No Matchers found");  log.info("doIt - Table_ID=" + Table_ID + ", Record_ID="+ Record_ID+ ", Matchers="+ m_matchers.length);  if (Table_ID == X_I_BankStatement.Table_ID)   return match(new X_I_BankStatement(getCtx(),Record_ID,get_TrxName())); else   if (Table_ID == MBankStatement.Table_ID)   return match(new MBankStatement(getCtx(),Record_ID,get_TrxName())); else   if (Table_ID == MBankStatementLine.Table_ID)   return match(new MBankStatementLine(getCtx(),Record_ID,get_TrxName()));  return "??";}  }
class C{  public DirectionOfAttackForFeint(String sidc){  super(sidc);  this.setArrowAngle(DEFAULT_ARROWHEAD_ANGLE);}  }
class C{  public Iterator<SearchTree<VertexType>> searchTreeIterator(){  return m_stronglyConnectedSearchTreeList.iterator();}  }
class C{  public int restrictionEnd(){  return mRestriction == null ? -1 : mRestriction.getEnd();}  }
class C{  @Override public void onDonePressed(){  goToMainActivity();}  }
class C{  public Boolean isD1On(){  return this.isDigitalOn(1);}  }
class C{  public void paint(Graphics g,Shape allocation){  super.paint(g,allocation);  Rectangle alloc=allocation.getBounds();  Rectangle clip=g.getClipBounds();  if ((clip.x + clip.width) < (alloc.x + getLeftInset())) {    Rectangle childRect=alloc;    alloc=getInsideAllocation(allocation);    int n=getViewCount();    int endY=clip.y + clip.height;    for (int i=0; i < n; i++) {      childRect.setBounds(alloc);      childAllocation(i,childRect);      if (childRect.y < endY) {        if ((childRect.y + childRect.height) >= clip.y) {          listPainter.paint(g,childRect.x,childRect.y,childRect.width,childRect.height,this,i);        }      } else {        break;      }    }  }}  }
class C{  public ThermometerPlot(){  this(new DefaultValueDataset());}  }
class C{  public int size(){  return players.size();}  }
class C{  public MultiMatchQueryBuilder field(String field){  fields.add(field);  return this;}  }
class C{  public void init() throws MessagingException {  automaticInsert=Boolean.valueOf(getInitParameter("automaticInsert"));  log("automaticInsert: " + automaticInsert);  displayFlag=getInitParameter("displayFlag");  insertFlag=getInitParameter("insertFlag");  removeFlag=getInitParameter("removeFlag");  String whitelistManagerAddressString=getInitParameter("whitelistManagerAddress");  if (whitelistManagerAddressString != null) {    whitelistManagerAddressString=whitelistManagerAddressString.trim();    log("whitelistManagerAddress: " + whitelistManagerAddressString);    try {      whitelistManagerAddress=new MailAddress(whitelistManagerAddressString);    } catch (    javax.mail.internet.ParseException pe) {      throw new MessagingException("Bad whitelistManagerAddress",pe);    }    if (displayFlag != null) {      displayFlag=displayFlag.trim();      log("displayFlag: " + displayFlag);    } else {      log("displayFlag is null");    }    if (insertFlag != null) {      insertFlag=insertFlag.trim();      log("insertFlag: " + insertFlag);    } else {      log("insertFlag is null");    }    if (removeFlag != null) {      removeFlag=removeFlag.trim();      log("removeFlag: " + removeFlag);    } else {      log("removeFlag is null");    }  } else {    log("whitelistManagerAddress is null; will ignore commands");  }  String repositoryPath=getInitParameter("repositoryPath");  if (repositoryPath != null) {    log("repositoryPath: " + repositoryPath);  } else {    throw new MessagingException("repositoryPath is null");  }  try {    initSqlQueries(datasource.getConnection(),getMailetContext());  } catch (  Exception e) {    throw new MessagingException("Exception initializing queries",e);  }  selectByPK=sqlQueries.getSqlString("selectByPK",true);  selectBySender=sqlQueries.getSqlString("selectBySender",true);  insert=sqlQueries.getSqlString("insert",true);  deleteByPK=sqlQueries.getSqlString("deleteByPK",true);}  }
class C{  private void parseCommits(final Collection<Ref> refs) throws IOException {  if (commitToRef != null) {    return;  }  commitToRef=LinkedListMultimap.create();  for (  Ref ref : refs) {    final RevCommit commit;    try {      commit=rw.parseCommit(ref.getObjectId());    } catch (    IncorrectObjectTypeException notCommit) {      continue;    }catch (    MissingObjectException notHere) {      log.warn("Reference " + ref.getName() + " in "+ repo.getDirectory()+ " points to dangling object "+ ref.getObjectId());      continue;    }    commitToRef.put(commit,ref.getName());  }  tipsByCommitTime=Lists.newArrayList(commitToRef.keySet());  sortOlderFirst(tipsByCommitTime);}  }
class C{  public PainterChain addPainter(Painter p){  if (chain.length != 0) {    Painter[] newChain=new Painter[chain.length + 1];    System.arraycopy(chain,0,newChain,0,chain.length);    newChain[chain.length]=p;    return new PainterChain(newChain);  }  return new PainterChain(new Painter[]{p});}  }
class C{  private void nextToken(){  nextToken(fPosition);}  }
class C{  private static void s_ucumkp(SparseBlock a,double[] agg,double[] c,int m,int n,KahanObject kbuff,KahanPlus kplus,int rl,int ru){  double[] csums=new double[2 * n];  if (agg != null)   System.arraycopy(agg,0,csums,0,n);  for (int i=rl, ix=rl * n; i < ru; i++, ix+=n) {    if (!a.isEmpty(i))     sumAgg(a.values(i),csums,a.indexes(i),a.pos(i),a.size(i),n,kbuff,kplus);    System.arraycopy(csums,0,c,ix,n);  }}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public boolean hasTree() throws IOException, ImportException {  if (!isReadingTreesBlock) {    TaxonList[] taxonList=new TaxonList[1];    taxonList[0]=null;    isReadingTreesBlock=startReadingTrees(taxonList);    if (!isReadingTreesBlock)     return false;    translationList=readTranslationList(taxonList[0],lastToken);  }  if (nextTree == null) {    nextTree=readNextTree(translationList,lastToken,null);  }  return (nextTree != null);}  }
class C{  private void actionButton(String queryValue){  m_button.setEnabled(false);  if (m_lookup == null)   return;  m_text.requestFocus();  Frame frame=Env.getFrame(this);  Object result[]=null;  boolean cancelled=false;  boolean multipleSelection=false;  int record_id=0;  String col=m_lookup.getColumnName();  if (col.indexOf('.') != -1)   col=col.substring(col.indexOf('.') + 1);  String whereClause=getWhereClause();  log.fine(col + ", Zoom=" + m_lookup.getZoom()+ " ("+ whereClause+ ")");  if (queryValue.length() == 0 && getValue() != null && !getValue().equals("")) {    Object currentValue=getValue();    try {      record_id=((Number)currentValue).intValue();      queryValue="";    } catch (    Exception e) {    }  }  boolean resetValue=false;  String infoFactoryClass=m_lookup.getInfoFactoryClass();  if (infoFactoryClass != null && infoFactoryClass.trim().length() > 0) {    try {      Class<InfoFactory> clazz=(Class<InfoFactory>)this.getClass().getClassLoader().loadClass(infoFactoryClass);      InfoFactory factory=clazz.newInstance();      if (m_tableName == null) {        if (!hasSearchableColumns()) {          log.severe("Search enabled on field " + m_columnName + ". Associated table has no standard/identifier columns.");          return;        }      }      Info ig=factory.create(frame,true,m_lookup.getWindowNo(),m_tableName,m_keyColumnName,record_id,queryValue,multipleSelection,whereClause);      ig.setVisible(true);      cancelled=ig.isCancelled();      result=ig.getSelectedKeys();    } catch (    Exception e) {      log.log(Level.SEVERE,"Failed to load custom InfoFactory - " + e.getLocalizedMessage(),e);    }  } else   if (col.equals("M_Product_ID")) {    resetTabInfo();    int M_Warehouse_ID=Env.getContextAsInt(Env.getCtx(),m_lookup.getWindowNo(),"M_Warehouse_ID");    int M_PriceList_ID=Env.getContextAsInt(Env.getCtx(),m_lookup.getWindowNo(),"M_PriceList_ID");    if (m_mField != null) {      int AD_Table_ID=MColumn.getTable_ID(Env.getCtx(),m_mField.getAD_Column_ID(),null);      multipleSelection=(MOrderLine.Table_ID == AD_Table_ID) || (MInvoiceLine.Table_ID == AD_Table_ID) || (I_PP_Product_BOMLine.Table_ID == AD_Table_ID)|| (MProductPrice.Table_ID == AD_Table_ID);    }    InfoProduct ip=new InfoProduct(frame,true,m_lookup.getWindowNo(),M_Warehouse_ID,M_PriceList_ID,record_id,queryValue,multipleSelection,true,whereClause);    ip.setVisible(true);    cancelled=ip.isCancelled();    result=ip.getSelectedKeys();    resetValue=true;  } else   if (col.equals("C_BPartner_ID")) {    resetTabInfo();    setIsSOTrx(m_isSOTrxEnvOverride,false);    if (record_id > 0) {      String trxName=Trx.createTrxName();      MBPartner bp=new MBPartner(Env.getCtx(),record_id,trxName);      m_isSOMatch=(m_isSOTrx && bp.isCustomer()) || (!m_isSOTrx && bp.isVendor());      Trx.get(trxName,false).close();    }    InfoBPartner ip=new InfoBPartner(frame,true,m_lookup.getWindowNo(),record_id,queryValue,m_isSOTrx,m_isSOMatch,multipleSelection,true,whereClause);    ip.setVisible(true);    cancelled=ip.isCancelled();    result=ip.getSelectedKeys();  } else {    if (m_tableName == null) {      String rsql=getDirectAccessSQL("*");      if (rsql == null || rsql.length() == 0) {        m_button.setEnabled(false);        return;      }    }    Info ig=Info.create(frame,true,m_lookup.getWindowNo(),m_tableName,m_keyColumnName,record_id,queryValue,multipleSelection,true,whereClause);    ig.setVisible(true);    cancelled=ig.isCancelled();    result=ig.getSelectedKeys();  }  if (isReadWrite()) {    if (result != null && result.length > 0) {      log.config(m_columnName + " - Result = " + result.toString()+ " ("+ result.getClass().getName()+ ")");      m_lookup.getDirect(result[0],false,true);      if (resetValue)       actionCombo(null);      if (result.length > 1)       actionCombo(result); else       actionCombo(result[0]);    } else     if (cancelled) {      log.config(m_columnName + " - Result = null (cancelled)");      actionCombo(null);    } else {      log.config(m_columnName + " - Result = null (not cancelled)");      setValue(m_value);    }    m_text.requestFocus();  } else   log.config(m_columnName + " - Field not writable.  No change.");  m_button.setEnabled(true);}  }
class C{  public void advanceInputWatermark(Instant newInputWatermark) throws Exception {  ReduceFnRunner<String,InputT,OutputT,W> runner=createRunner();  timerInternals.advanceInputWatermark(runner,newInputWatermark);  runner.persist();}  }
class C{  public Entry(int hash,char c,Value value,Entry next){  super(value,referenceQueue);  this.hash=hash;  this.c=c;  this.next=next;}  }
class C{  public void destroy(){}  }
class C{  public void objectAdded(NamingEvent namingEvent){  Map<String,Set<Role>> newRoles=new HashMap<>();  try {    processSearchResult(newRoles,(SearchResult)namingEvent.getNewBinding());    for (    Map.Entry<String,Set<Role>> entry : newRoles.entrySet()) {      Set<Role> existingRoles=securityRepository.getMatch(entry.getKey());      for (      Role role : entry.getValue()) {        existingRoles.add(role);      }    }  } catch (  NamingException e) {    e.printStackTrace();  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @Override public void onAnimationUpdate(ValueAnimator animation){  PropertyBundle propertyBundle=mAnimatorMap.get(animation);  if (propertyBundle == null) {    return;  }  boolean useDisplayListProperties=mView.mDisplayList != null;  boolean alphaHandled=false;  if (!useDisplayListProperties) {    mView.invalidateParentCaches();  }  float fraction=animation.getAnimatedFraction();  int propertyMask=propertyBundle.mPropertyMask;  if ((propertyMask & TRANSFORM_MASK) != 0) {    mView.invalidateViewProperty(false,false);  }  ArrayList<NameValuesHolder> valueList=propertyBundle.mNameValuesHolder;  if (valueList != null) {    int count=valueList.size();    for (int i=0; i < count; ++i) {      NameValuesHolder values=valueList.get(i);      float value=values.mFromValue + fraction * values.mDeltaValue;      if (values.mNameConstant == ALPHA) {        alphaHandled=mView.setAlphaNoInvalidation(value);      } else {        setValue(values.mNameConstant,value);      }    }  }  if ((propertyMask & TRANSFORM_MASK) != 0) {    mView.mTransformationInfo.mMatrixDirty=true;    if (!useDisplayListProperties) {      mView.mPrivateFlags|=View.PFLAG_DRAWN;    }  }  if (alphaHandled) {    mView.invalidate(true);  } else {    mView.invalidateViewProperty(false,false);  }}  }
class C{  private static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SHADD8");  translateAll(environment,instruction,"SHADD8",instructions);}  }
class C{  public void incrementEppRequests(EppMetric metric){  String eppStatusCode=metric.getStatus().isPresent() ? String.valueOf(metric.getStatus().get().code) : "";  eppRequests.increment(metric.getCommandName().or(""),metric.getClientId().or(""),eppStatusCode);}  }
class C{  public PuzzleEvaluator1(int target[]){  this.target=target;}  }
class C{  public void push(Vertex source,Vertex vertex){  push(vertex);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean storeUser(File file){  boolean result=true;  Element root=initStore();  if (!addConfigStore(root)) {    result=false;  }  if (!addUserStore(root)) {    result=false;  }  includeHistory(root);  if (!finalStore(root,file)) {    result=false;  }  return result;}  }
class C{  public void stopListening(){  setReadyToStop(true);}  }
class C{  public void clear(){  count.set(0);}  }
class C{  public void subtract(final short operand){  this.value-=operand;}  }
class C{  public ValidationWarnings validate(ICalVersion version){  List<WarningsGroup> warnings=validate(new ArrayList<ICalComponent>(0),version);  return new ValidationWarnings(warnings);}  }
class C{  void notifyAcceptOutbind(Outbind outbind) throws IllegalStateException {  this.lock.lock();  try {    if (this.request == null) {      this.request=new OutbindRequest(outbind);      this.requestCondition.signal();    } else {      throw new IllegalStateException("Already waiting for acceptance outbind");    }  }  finally {    this.lock.unlock();  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  super.characters(ch,start,length);}  }
class C{  @Override public boolean isIdleNow(){  if (webView == null)   return true;  return webView.getProgress() == FINISHED && webView.getTitle() != null;}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.REQUIRED_RUNTIME_LIBRARIES;}  }
class C{  private static void checkArguments(final BackEndDebuggerProvider debuggerProvider){  Preconditions.checkNotNull(debuggerProvider,"IE01357: Debugger provider argument can not be null");}  }
class C{  private static String _trimString(String s,int n){  if (s.length() >= 2 * n) {    s=s.substring(n,s.length() - n);  }  return s;}  }
class C{  protected AbstractMatrix3D vDice(int axis0,int axis1,int axis2){  super.vDice(axis0,axis1,axis2);  int[][] offsets=new int[3][];  offsets[0]=this.sliceOffsets;  offsets[1]=this.rowOffsets;  offsets[2]=this.columnOffsets;  this.sliceOffsets=offsets[axis0];  this.rowOffsets=offsets[axis1];  this.columnOffsets=offsets[axis2];  return this;}  }
class C{  public Element parseXHTML(StringReader input) throws Exception {  Document document=getParser().parse(new InputSource(input));  return document.getDocumentElement();}  }
class C{  public static IntentFilter makeIntentFilter(){  final IntentFilter filter=new IntentFilter();  filter.addAction(BROADCAST_CONNECTION_STATE);  filter.addAction(BROADCAST_BOND_STATE);  filter.addAction(BROADCAST_DEVICE_READY);  filter.addAction(BROADCAST_DEVICE_NOT_SUPPORTED);  filter.addAction(BROADCAST_ERROR);  return filter;}  }
class C{  private void menuAll(HtmlCode html,MStore wstore){  boolean first=false;  if (wstore.isMenuRequests()) {    nl(html,first);    a a=new a("requests.jsp");    a.setClass("menuSub");    a.addElement("My Requests");    html.addElement(a);  }  if (wstore.isMenuInterests()) {    nl(html,first);    a a=new a("info.jsp");    a.setClass("menuSub");    a.addElement("Interest Area");    html.addElement(a);  }  if (wstore.isMenuRegistrations()) {    nl(html,false);    a a=new a("registrations.jsp");    a.setClass("menuSub");    a.addElement("Registration");    html.addElement(a);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void problemEdgePrep(){  for (int i=0; i < numTreeRoots; i++) {    AbstractBURS_TreeNode n=treeRoots[i];    problemEdgePrep(n,n.dg_node);  }}  }
class C{  public double valueFromPosition(final double v){  return max - v * max;}  }
class C{  public boolean rpInitiatorsInStorageConnectedNework(URI storageSystemURI,URI protectionSystemURI,String siteId,URI varrayURI) throws InternalException {  Map<URI,List<StoragePort>> arrayTargetMap=ConnectivityUtil.getStoragePortsOfType(_dbClient,storageSystemURI,StoragePort.PortType.frontend);  Set<URI> arrayTargetNetworks=new HashSet<URI>();  arrayTargetNetworks.addAll(arrayTargetMap.keySet());  ProtectionSystem protectionSystem=_dbClient.queryObject(ProtectionSystem.class,protectionSystemURI);  StringSet siteInitiators=protectionSystem.getSiteInitiators().get(siteId);  Set<URI> rpSiteInitiatorNetworks=new HashSet<URI>();  for (  String wwn : siteInitiators) {    NetworkLite rpSiteInitiatorNetwork=NetworkUtil.getEndpointNetworkLite(wwn,_dbClient);    if (rpSiteInitiatorNetwork != null) {      rpSiteInitiatorNetworks.add(rpSiteInitiatorNetwork.getId());    }  }  Iterator<URI> arrayTargetNetworksIter=arrayTargetNetworks.iterator();  while (arrayTargetNetworksIter.hasNext()) {    URI networkURI=arrayTargetNetworksIter.next();    Iterator<StoragePort> targetStoragePortsIter=arrayTargetMap.get(networkURI).iterator();    while (targetStoragePortsIter.hasNext()) {      StoragePort targetStoragePort=targetStoragePortsIter.next();      StringSet taggedVArraysForPort=targetStoragePort.getTaggedVirtualArrays();      if ((taggedVArraysForPort == null) || (!taggedVArraysForPort.contains(varrayURI.toString()))) {        targetStoragePortsIter.remove();      }    }    if (arrayTargetMap.get(networkURI).isEmpty()) {      arrayTargetMap.remove(networkURI);    }  }  List<URI> initiators=new ArrayList<URI>();  Iterator<URI> rpSiteInitiatorsNetworksItr=rpSiteInitiatorNetworks.iterator();  while (rpSiteInitiatorsNetworksItr.hasNext()) {    URI initiatorURI=rpSiteInitiatorsNetworksItr.next();    if (arrayTargetMap.keySet().contains(initiatorURI)) {      initiators.add(initiatorURI);    }  }  if (initiators.isEmpty()) {    return false;  }  return true;}  }
class C{  protected void truncateHistory(ContentResolver cr,int maxEntries){  if (maxEntries < 0) {    throw new IllegalArgumentException();  }  try {    String selection=null;    if (maxEntries > 0) {      selection="_id IN " + "(SELECT _id FROM suggestions" + " ORDER BY " + SuggestionColumns.DATE + " DESC"+ " LIMIT -1 OFFSET "+ String.valueOf(maxEntries)+ ")";    }    cr.delete(mSuggestionsUri,selection,null);  } catch (  RuntimeException e) {    Log.e(LOG_TAG,"truncateHistory",e);  }}  }
class C{  protected void fireUpdateAccountTime(String accountNumber){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).updateAccountTime(accountNumber);    }  }}  }
class C{  public void testFloatMissing() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatPoint("value",-1.3f));  doc.add(new StoredField("value",-1.3f));  writer.addDocument(doc);  doc=new Document();  doc.add(new FloatPoint("value",4.2f));  doc.add(new StoredField("value",4.2f));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.FLOAT_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.FLOAT));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public static String toStringMode(int octalMode){  String str=Integer.toString(octalMode,8);  while (str.length() < 3)   str="0" + str;  return str;}  }
class C{  @Override protected void processException(ReplyException ex){  logger.debug("MoveBucketMessage ignoring exception: {}",ex.getMessage(),ex);}  }
class C{  public static IndexColumn[] wrap(Column[] columns){  IndexColumn[] list=new IndexColumn[columns.length];  for (int i=0; i < list.length; i++) {    list[i]=new IndexColumn();    list[i].column=columns[i];  }  return list;}  }
class C{  static void test9(){  for (int i=0; i < input.length; i++) {    String str=input[i];    int length=str.length();    for (int j=0; j <= length; j++) {      int nCodePoints=Character.codePointCount(str,j,length);      int result=str.offsetByCodePoints(j,nCodePoints);      check(result != length,"offsetByCodePoints(input[" + i + "], "+ j+ ", "+ nCodePoints+ ")",result,length);      result=str.offsetByCodePoints(length,-nCodePoints);      int expected=j;      if (j > 0 && j < length) {        int cp=str.codePointBefore(j + 1);        if (Character.isSupplementaryCodePoint(cp)) {          expected--;        }      }      check(result != expected,"offsetByCodePoints(input[" + i + "], "+ j+ ", "+ (-nCodePoints)+ ")",result,expected);    }    for (int j=length; j >= 0; j--) {      int nCodePoints=Character.codePointCount(str,0,j);      int result=str.offsetByCodePoints(0,nCodePoints);      int expected=j;      if (j > 0 && j < length) {        int cp=str.codePointAt(j - 1);        if (Character.isSupplementaryCodePoint(cp)) {          expected++;        }      }      check(result != expected,"offsetByCodePoints(input[" + i + "], 0, "+ nCodePoints+ ")",result,expected);      result=str.offsetByCodePoints(j,-nCodePoints);      check(result != 0,"offsetByCodePoints(input[" + i + "], "+ j+ ", "+ (-nCodePoints)+ ")",result,0);    }    testOffsetByCodePoints(null,0,0,NullPointerException.class);    testOffsetByCodePoints(str,-1,length,IndexOutOfBoundsException.class);    testOffsetByCodePoints(str,0,length + 1,IndexOutOfBoundsException.class);    testOffsetByCodePoints(str,1,-2,IndexOutOfBoundsException.class);    testOffsetByCodePoints(str,length,length - 1,IndexOutOfBoundsException.class);    testOffsetByCodePoints(str,length,-(length + 1),IndexOutOfBoundsException.class);  }}  }
class C{  public synchronized void exiting(String sourceClass,String sourceMethod){  LogRecord record=new LogRecord(Level.CONFIG,"Exiting method");  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  log(record);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.032 -0500",hash_original_method="88A1392443C2003D9FA4C6DECF6A14A3",hash_generated_method="AEAAE41ED94955B07B93D5B2B222D042") @Deprecated public BitmapDrawable(String filepath){  this(new BitmapState(BitmapFactory.decodeFile(filepath)),null);  if (mBitmap == null) {    android.util.Log.w("BitmapDrawable","BitmapDrawable cannot decode " + filepath);  }}  }
class C{  public static Endpoint serializableInstance(){  return Endpoint.TAIL;}  }
class C{  public Format decideTextureFormat(Format fmt){switch (colorType) {case COLOR_TRUECOLOR:switch (fmt) {case ABGR:case RGBA:case BGRA:case RGB:      return fmt;default :    return Format.RGB;}case COLOR_TRUEALPHA:switch (fmt) {case ABGR:case RGBA:case BGRA:case RGB:return fmt;default :return Format.RGBA;}case COLOR_GREYSCALE:switch (fmt) {case LUMINANCE:case ALPHA:return fmt;default :return Format.LUMINANCE;}case COLOR_GREYALPHA:return Format.LUMINANCE_ALPHA;case COLOR_INDEXED:switch (fmt) {case ABGR:case RGBA:case BGRA:return fmt;default :return Format.RGBA;}default :throw new UnsupportedOperationException("Not yet implemented");}}  }
class C{  public void reset(InputStreamReader in){  reset();  this.reader=new LineReader(in);}  }
class C{  private FeedUris(){}  }
class C{  @Override public synchronized void reset() throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  public static void handleCdn(TempRsrc tempRsrc,ConfigData configData){  if (tempRsrc.url == null)   return;  if (tempRsrc.replacer == null || tempRsrc.replacer instanceof PageRsrc)   return;  if (configData.cdnSrcHostInfos.size() == 0)   return;  int hostFirst=tempRsrc.url.indexOf("//") + 2;  if (hostFirst < 2)   return;  int hostLast=tempRsrc.url.indexOf('/',hostFirst);  if (hostLast < 0)   return;  String srcHost=tempRsrc.url.substring(hostFirst,hostLast);  ConfigData.SrcHostInfo srcHostInfo=configData.cdnSrcHostInfos.get(srcHost);  if (srcHostInfo == null)   return;  int size=0;  Rsrc replacer=tempRsrc.replacer;  if (replacer instanceof ImageRsrc) {    ImageRsrc img=(ImageRsrc)replacer;    if (img.origData != null)     size=img.origData.length;  } else   if (replacer instanceof JsRsrc) {    JsRsrc js=(JsRsrc)replacer;    if (js.optimGzip != null)     size=js.optimGzip.length; else     if (js.origGzip != null)     size=js.origGzip.length; else     if (js.optimData != null)     size=js.optimData.length; else     if (js.origData != null)     size=js.origData.length;  } else   if (replacer instanceof CssRsrc) {    CssRsrc css=(CssRsrc)replacer;    if (css.optimGzip != null)     size=css.optimGzip.length; else     if (css.origGzip != null)     size=css.origGzip.length;  }  String cdnHost=null;  String cdnSslHost=null;  for (  ConfigData.SizeRange sizeRange : srcHostInfo.sizeRanges) {    if (sizeRange.minSize <= size && size <= sizeRange.maxSize) {      cdnHost=sizeRange.cdnHost;      cdnSslHost=sizeRange.cdnSslHost;      break;    }  }  if (cdnHost != null) {    String cdnUrl="//" + cdnHost + tempRsrc.url.substring(hostLast);    tempRsrc.cdnUrl=cdnUrl.getBytes();    String cdnSslUrl="//" + cdnSslHost + tempRsrc.url.substring(hostLast);    tempRsrc.cdnSslUrl=cdnSslUrl.getBytes();  }}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  public <U>MonoThenIgnore<U> shift(Mono<U> newLast){  Objects.requireNonNull(newLast,"newLast");  Mono<?>[] a=ignore;  int n=a.length;  Mono<?>[] b=new Mono[n + 1];  System.arraycopy(a,0,b,0,n);  b[n]=last;  return new MonoThenIgnore<>(b,newLast);}  }
class C{  public static boolean invalidUserPassword(final String password){  return password.length() < MIN_PWD_LENGTH || password.length() > MAX_PWD_LENGTH;}  }
class C{  @OnOpen public void onOpen(Session session) throws IOException {  if (Boolean.parseBoolean(InitParametersInjector.get(InitParametersInjector.INIT_PARAM_ENABLE_ROLES))) {    Principal principal=session.getUserPrincipal();    if (principal == null) {      session.getBasicRemote().sendText("Login first to be able to use the Debug websocket channel.");      session.close();    }  }  openSessions.put(session.getId(),session);  callInternal("onOpen",session,null);}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  public boolean isForwardEnabled(){  if (browser == null || browser.isDisposed())   return false;  return browser.isForwardEnabled();}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  registry.build(NAME);  registry.build(URI);  registry.build(EMAIL);  ElementCreator builder=registry.build(KEY).setCardinality(Cardinality.MULTIPLE);  builder.addElement(NAME).setRequired(true);  builder.addElement(URI);  builder.addElement(EMAIL);}  }
class C{  public IgniteIllegalStateException(String msg){  super(msg);}  }
class C{  public static void removePermissionRecursive(Path path,PosixFilePermission permission) throws IOException {  changePermissionsRecursive(path,PermissionChange.REMOVE,Collections.singleton(permission));}  }
class C{  @CanIgnoreReturnValue public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  protected boolean activateGyroscope(){  return (mSensorManager != null && mSensorManager.registerListener(this,mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE),(int)(PLConstants.kDefaultGyroscopeInterval * 1000.0f)));}  }
class C{  public void loadLocks(){  int AD_User_ID=Env.getContextAsInt(Env.getCtx(),"#AD_User_ID");  log.fine("#" + m_vo.TabNo + " - AD_User_ID="+ AD_User_ID);  if (!canHaveAttachment())   return;  String sql="SELECT Record_ID " + "FROM AD_Private_Access " + "WHERE AD_User_ID=? AND AD_Table_ID=? AND IsActive='Y' "+ "ORDER BY Record_ID";  try {    if (m_Lock == null)     m_Lock=new ArrayList<Integer>(); else     m_Lock.clear();    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_User_ID);    pstmt.setInt(2,m_vo.AD_Table_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      Integer key=new Integer(rs.getInt(1));      m_Lock.add(key);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  log.fine("#" + m_Lock.size());}  }
class C{  public static int indexOf(int[] array,int[] sub,int startIndex,int endIndex){  int sublen=sub.length;  if (sublen == 0) {    return startIndex;  }  int total=endIndex - sublen + 1;  int c=sub[0];  mainloop:   for (int i=startIndex; i < total; i++) {    if (array[i] != c) {      continue;    }    int j=1;    int k=i + 1;    while (j < sublen) {      if (sub[j] != array[k]) {        continue mainloop;      }      j++;      k++;    }    return i;  }  return -1;}  }
class C{  @Override public final String toString(){  StringBuilder sb=new StringBuilder();  sb=DFS(sb,root,0);  return sb.toString();}  }
class C{  public static boolean isSVGSupported(){  return Display.impl.isSVGSupported();}  }
class C{  public void assertNotEqual(float expected,float actual,double minRelativeError){  TestUtils.assertNotEqual(expected,actual,minRelativeError);}  }
class C{  public void testNegPos(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={0};  int aSign=-1;  int bSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public String sqlAdmin_createSchema(int step,String vendorName,String catalogName,String schemaName,String passwd){  return m_interfaces.get(getDBVendorID(vendorName)).sqlAdmin_createSchema(step,catalogName,schemaName,passwd);}  }
class C{  protected boolean shouldRenderAsCluster(Cluster<ClusterStatus> cluster){  return cluster.getSize() > MIN_CLUSTER_SIZE;}  }
class C{  public static void showFormattedMessage(String messageKey,Switch ignore,Object... args){  _callback.showFormattedMessage(messageKey,ignore,args);}  }
class C{  public FilePathWrapper wrap(FilePath base){  return base == null ? null : create(getPrefix() + base.name,base);}  }
class C{  private boolean isIntractable(PropertyDescriptor descriptor,Object value){  final Class<?> type=descriptor.getPropertyType();  return type.isPrimitive() || type.getName().startsWith("java.lang.") || value instanceof Iterable|| value instanceof Map;}  }
class C{  private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight(a[base2],a,base1,len1,0,c);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft(a[base1 + len1 - 1],a,base2,len2,len2 - 1,c);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LegendItem)) {    return false;  }  LegendItem that=(LegendItem)obj;  if (this.datasetIndex != that.datasetIndex) {    return false;  }  if (this.series != that.series) {    return false;  }  if (!this.label.equals(that.label)) {    return false;  }  if (!AttributedStringUtilities.equal(this.attributedLabel,that.attributedLabel)) {    return false;  }  if (!ObjectUtilities.equal(this.description,that.description)) {    return false;  }  if (this.shapeVisible != that.shapeVisible) {    return false;  }  if (!ShapeUtilities.equal(this.shape,that.shape)) {    return false;  }  if (this.shapeFilled != that.shapeFilled) {    return false;  }  if (!PaintUtilities.equal(this.fillPaint,that.fillPaint)) {    return false;  }  if (!ObjectUtilities.equal(this.fillPaintTransformer,that.fillPaintTransformer)) {    return false;  }  if (this.shapeOutlineVisible != that.shapeOutlineVisible) {    return false;  }  if (!this.outlineStroke.equals(that.outlineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {    return false;  }  if (!this.lineVisible == that.lineVisible) {    return false;  }  if (!ShapeUtilities.equal(this.line,that.line)) {    return false;  }  if (!this.lineStroke.equals(that.lineStroke)) {    return false;  }  if (!PaintUtilities.equal(this.linePaint,that.linePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.labelFont,that.labelFont)) {    return false;  }  if (!PaintUtilities.equal(this.labelPaint,that.labelPaint)) {    return false;  }  return true;}  }
class C{  private void addListeners(){  neuronPropertiesPanel.getUpdateRulePanel().getCbNeuronType().addActionListener(null);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MAlertRecipient[");  sb.append(get_ID()).append(",AD_User_ID=").append(getAD_User_ID()).append(",AD_Role_ID=").append(getAD_Role_ID()).append("]");  return sb.toString();}  }
class C{  private WordlistLoader(){}  }
class C{  public void testConstructorSignBytesNegative5(){  byte aBytes[]={-127,56,100,-2};  int aSign=-1;  byte rBytes[]={-1,126,-57,-101,2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public static void connectExpressionTrees(final CConnection connection,final int moduleId,final int rawModuleId) throws SQLException {  Preconditions.checkNotNull(connection,"IE00208: provider argument can not be null");  final String query="INSERT INTO " + CTableNames.EXPRESSION_TREE_MAPPING_TABLE + " (SELECT "+ moduleId+ ", expression_tree_id, expression_node_id "+ " FROM ex_"+ rawModuleId+ "_expression_tree_nodes)";  connection.executeUpdate(query,true);}  }
class C{  public boolean startSettingsActivityForExtension(ExtensionListing extension){  if (mService != null && extension.settingsActivity() != null) {    try {      mService.showExtensionSettings(extension.componentName(),mCallback);      return true;    } catch (    RemoteException e) {    }  }  return false;}  }
class C{  public ReplDBMSEvent filter(ReplDBMSEvent event) throws ReplicatorException, InterruptedException {  long seqno=event.getSeqno();  long seqnoStart;  if (this.skipSeqnoMultiple) {    if (skipSeqnoStart <= 0)     return null;    seqnoStart=(seqno / skipSeqnoStart) * skipSeqnoStart;  } else {    seqnoStart=skipSeqnoStart;  }  long seqnoEnd=seqnoStart + skipSeqnoRange - 1;  if (seqno >= seqnoStart && seqno <= seqnoEnd)   return null; else   return event;}  }
class C{  public final synchronized byte[] toByteArray(){  ByteArrayOutputStream baos=null;  DataOutputStream dos=null;  try {    baos=new ByteArrayOutputStream(32768);    dos=new DataOutputStream(baos);    game.writeToStream(dos);    dos.flush();    return baos.toByteArray();  } catch (  IOException e) {    return null;  } finally {    if (dos != null)     try {      dos.close();    } catch (    IOException ex) {    }    if (baos != null)     try {      baos.close();    } catch (    IOException ex) {    }  }}  }
class C{  public Boolean isAutoStart(){  return autoStart;}  }
class C{  private void downloadFile(File file,String downloadUrl) throws Exception {  File tempFile=File.createTempFile(file.getName(),TEMP_DOWNLOAD_EXTENSION,new File(Collect.getInstance().getCachePath()));  URI uri;  try {    URL url=new URL(downloadUrl);    uri=url.toURI();  } catch (  MalformedURLException e) {    e.printStackTrace();    throw e;  }catch (  URISyntaxException e) {    e.printStackTrace();    throw e;  }  boolean success=false;  int attemptCount=0;  final int MAX_ATTEMPT_COUNT=2;  while (!success && ++attemptCount <= MAX_ATTEMPT_COUNT) {    if (isCancelled()) {      throw new TaskCancelledException(tempFile,"Cancelled before requesting " + tempFile.getAbsolutePath());    } else {      Log.i(t,"Started downloading to " + tempFile.getAbsolutePath() + " from "+ downloadUrl);    }    HttpContext localContext=Collect.getInstance().getHttpContext();    HttpClient httpclient=WebUtils.createHttpClient(WebUtils.CONNECTION_TIMEOUT);    HttpGet req=WebUtils.createOpenRosaHttpGet(uri);    req.addHeader(WebUtils.ACCEPT_ENCODING_HEADER,WebUtils.GZIP_CONTENT_ENCODING);    HttpResponse response;    try {      response=httpclient.execute(req,localContext);      int statusCode=response.getStatusLine().getStatusCode();      if (statusCode != HttpStatus.SC_OK) {        WebUtils.discardEntityBytes(response);        if (statusCode == HttpStatus.SC_UNAUTHORIZED) {          Collect.getInstance().getCookieStore().clear();        }        String errMsg=Collect.getInstance().getApplication().getString(R.string.file_fetch_failed,downloadUrl,response.getStatusLine().getReasonPhrase(),statusCode);        Log.e(t,errMsg);        throw new Exception(errMsg);      }      InputStream is=null;      OutputStream os=null;      try {        HttpEntity entity=response.getEntity();        is=entity.getContent();        Header contentEncoding=entity.getContentEncoding();        if (contentEncoding != null && contentEncoding.getValue().equalsIgnoreCase(WebUtils.GZIP_CONTENT_ENCODING)) {          is=new GZIPInputStream(is);        }        os=new FileOutputStream(tempFile);        byte buf[]=new byte[4096];        int len;        while ((len=is.read(buf)) > 0 && !isCancelled()) {          os.write(buf,0,len);        }        os.flush();        success=true;      }  finally {        if (os != null) {          try {            os.close();          } catch (          Exception e) {          }        }        if (is != null) {          try {            final long count=1024L;            while (is.skip(count) == count)             ;          } catch (          Exception e) {          }          try {            is.close();          } catch (          Exception e) {          }        }      }    } catch (    Exception e) {      Log.e(t,e.toString());      FileUtils.deleteAndReport(tempFile);      if (attemptCount == MAX_ATTEMPT_COUNT) {        throw e;      }    }    if (isCancelled()) {      FileUtils.deleteAndReport(tempFile);      throw new TaskCancelledException(tempFile,"Cancelled downloading of " + tempFile.getAbsolutePath());    }  }  Log.d(t,"Completed downloading of " + tempFile.getAbsolutePath() + ". It will be moved to the proper path...");  FileUtils.deleteAndReport(file);  String errorMessage=FileUtils.copyFile(tempFile,file);  if (file.exists()) {    Log.w(t,"Copied " + tempFile.getAbsolutePath() + " over "+ file.getAbsolutePath());    FileUtils.deleteAndReport(tempFile);  } else {    String msg=Collect.getInstance().getApplication().getString(R.string.fs_file_copy_error,tempFile.getAbsolutePath(),file.getAbsolutePath(),errorMessage);    Log.w(t,msg);    throw new RuntimeException(msg);  }}  }
class C{  public ExceptionResponse(int fc,int exc){  setDataLength(1);  setFunctionCode(fc | Modbus.EXCEPTION_OFFSET);  exceptionCode=exc;}  }
class C{  public UnsignedByte subtract(UnsignedByte decrement){  return valueOf(getValue() - decrement.getValue());}  }
class C{  protected void removeThumbnailData(){  clearThumbnailAndStrips();  mIfdDatas[IfdId.TYPE_IFD_1]=null;}  }
class C{  public Chunk3D(Coord4D coord){  xCoord=coord.xCoord >> 4;  zCoord=coord.zCoord >> 4;  dimensionId=coord.dimensionId;}  }
class C{  public void writeChar(int c) throws IOException {  out.write(c & 0xFF);  out.write((c >>> 8) & 0xFF);  written+=2;}  }
class C{  private Object findAutoCompleteTerm(String value){  final boolean prefixIsEmpty="".equals(value);  final Matcher<String> valueMatcher=new TextMatcher<String>(new SearchTerm[]{new SearchTerm(value)},GlazedLists.toStringTextFilterator(),TextMatcherEditor.STARTS_WITH,getTextMatchingStrategy());  Object partialMatchItem=NOT_FOUND;  for (int i=0, n=allItemsUnfiltered.size(); i < n; i++) {    final E item=allItemsUnfiltered.get(i);    final String itemString=convertToString(item);    if (value.equals(itemString))     return item;    if (partialMatchItem == NOT_FOUND) {      if (prefixIsEmpty ? "".equals(itemString) : valueMatcher.matches(itemString))       partialMatchItem=item;    }  }  return partialMatchItem;}  }
class C{  private static void sparseRandomTest(final ISchemaVersion schemaVersion) throws IOException {  final Writer output=openOutput(schemaVersion,"sparse_random",TestType.ADD);  final Random random=new Random(randomLong());  final HLL hll=newHLL(HLLType.SPARSE);  initLineAdd(output,hll,schemaVersion);  for (int i=0; i < SPARSE_THRESHOLD; i++) {    final int registerIndex=Math.abs(random.nextInt()) % REGISTER_COUNT;    final int registerValue=((Math.abs(random.nextInt()) % REGISTER_MAX_VALUE) + 1);    final long rawValue=constructHLLValue(LOG2M,registerIndex,registerValue);    cumulativeAddLine(output,hll,rawValue,schemaVersion);  }  output.flush();  output.close();}  }
class C{  public static void createRandomIndex(int numdocs,RandomIndexWriter writer,long seed) throws IOException {  Random random=new Random(seed);  LineFileDocs lineFileDocs=new LineFileDocs(random);  for (int i=0; i < numdocs; i++) {    Document document=lineFileDocs.nextDoc();    String title=document.get("titleTokenized");    String split[]=title.split("\\s+");    document.removeFields("sortedset");    for (    String trash : split) {      document.add(new SortedSetDocValuesField("sortedset",new BytesRef(trash)));    }    document.removeFields("sparsenumeric");    if (random.nextInt(4) == 2) {      document.add(new NumericDocValuesField("sparsenumeric",random.nextInt()));    }    document.removeFields("sparsesortednum");    if (random.nextInt(5) == 1) {      document.add(new SortedNumericDocValuesField("sparsesortednum",random.nextLong()));      if (random.nextBoolean()) {        document.add(new SortedNumericDocValuesField("sparsesortednum",random.nextLong()));      }    }    writer.addDocument(document);  }  lineFileDocs.close();}  }
class C{  public static ValueDate parse(String s){  try {    return fromDateValue(DateTimeUtils.parseDateValue(s,0,s.length()));  } catch (  Exception e) {    throw DbException.get(ErrorCode.INVALID_DATETIME_CONSTANT_2,e,"DATE",s);  }}  }
class C{  public static void initialize(Context context,@Nullable ImagePipelineConfig imagePipelineConfig){  initialize(context,imagePipelineConfig,null);}  }
class C{  public TaskData createFullTaskData(TaskRepository repository,ReviewResult review,List<ReviewCommentResult> comments,List<DiffEntry> diffs,boolean isSubmitted){  TaskData taskData=new TaskData(getAttributeMapper(repository),repository.getConnectorKind(),repository.getRepositoryUrl(),review.getHash());  schema.initialize(taskData);  populateTaskData(taskData,review,repository);  setAttributeValue(taskData,schema.IS_SUBMITTED,Boolean.toString(isSubmitted));  populateDiffs(repository,diffs,taskData);  populateComments(repository,comments,taskData,review.getReview().getTimestamp());  return taskData;}  }
class C{  public static String registerServerAuthModule(ServerAuthModule serverAuthModule,ServletContext servletContext){  String registrationId=AuthConfigFactory.getFactory().registerConfigProvider(new DefaultAuthConfigProvider(serverAuthModule),"HttpServlet",getAppContextID(servletContext),"Default single SAM authentication config provider");  servletContext.setAttribute(CONTEXT_REGISTRATION_ID,registrationId);  return registrationId;}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public static void updateDocumentIndentOptions(@NotNull Project project,@NotNull Document document){  if (!project.isDisposed()) {    PsiDocumentManager documentManager=PsiDocumentManager.getInstance(project);    if (documentManager != null) {      PsiFile file=documentManager.getPsiFile(document);      if (file != null) {        CommonCodeStyleSettings.IndentOptions indentOptions=getSettings(project).getIndentOptionsByFile(file,null,true,null);        indentOptions.associateWithDocument(document);      }    }  }}  }
class C{  private void register(Path dir) throws IOException {  WatchKey key=dir.register(watcher,new WatchEvent.Kind[]{StandardWatchEventKinds.ENTRY_CREATE,StandardWatchEventKinds.ENTRY_DELETE,StandardWatchEventKinds.ENTRY_MODIFY},SensitivityWatchEventModifier.HIGH);  if (logger.isInfoEnabled()) {    Path prev=keys.get(key);    if (prev == null) {      logger.info("register: {}",dir);    } else {      if (!dir.equals(prev)) {        logger.info("update: {} -> {}",prev,dir);      }    }  }  keys.put(key,dir);}  }
class C{  public void characters(String characters) throws SAXException {  final int length=characters.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  characters.getChars(0,length,m_charsBuff,0);  characters(m_charsBuff,0,length);}  }
class C{  public final int readUnsignedShort() throws IOException {  mPosition+=2;  d.readFully(w,0,2);  return ((w[1] & 0xff) << 8 | (w[0] & 0xff));}  }
class C{  @Override protected void initData(){}  }
class C{  public BytecodeInstruction(ClassLoader classLoader,String className,String methodName,int instructionId,int bytecodeOffset,AbstractInsnNode asmNode){  if (className == null || methodName == null || asmNode == null)   throw new IllegalArgumentException("null given");  if (instructionId < 0)   throw new IllegalArgumentException("expect instructionId to be positive, not " + instructionId);  this.instructionId=instructionId;  this.bytecodeOffset=bytecodeOffset;  this.asmNode=asmNode;  this.classLoader=classLoader;  setClassName(className);  setMethodName(methodName);}  }
class C{  public void deselectAll(){  if (items == null) {    return;  }  for (  IMultiPoint imp : items) {    ((ISelectable)imp).select(false);  }}  }
class C{  public static float floor(float fValue){  return (float)Math.floor(fValue);}  }
class C{  public Runnable decrementAsRunnable(){  return mDecrementRunnable;}  }
class C{  public void encode(DerOutputStream out) throws IOException {  DerOutputStream theChoice=new DerOutputStream();  if (fullName != null) {    fullName.encode(theChoice);    out.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_FULL_NAME),theChoice);  } else {    relativeName.encode(theChoice);    out.writeImplicit(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_RELATIVE_NAME),theChoice);  }}  }
class C{  public TCPOutputStream(TransportAddress target){  this.target=target;}  }
class C{  private static <T>int gallopRight(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (c.compare(key,a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public void startElement(String name,UIComponent componentForElement) throws IOException {  if (name == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  closeStartIfNecessary();  char firstChar=name.charAt(0);  if ((firstChar == 's') || (firstChar == 'S')) {    if ("script".equalsIgnoreCase(name) || "style".equalsIgnoreCase(name)) {      dontEscape=true;    }  }  writer.write("<");  writer.write(name);  closeStart=true;}  }
class C{  public void testArabicSort(){  assertQ("Collated Sort: ",req("fl","id","q","sort_ar:[\u0698 TO \u0633\u0633]","sort","sort_ar asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=12]","//result/doc[2]/int[@name='id'][.=1]");}  }
class C{  private void checkSortMissingDefault(final String field,final String negative,final String positive){  assertU(adoc("id","0"));  assertU(adoc("id","1",field,negative));  assertU(adoc("id","2",field,positive));  assertU(commit());  assertQ(req("q","*:*","sort",field + " asc"),"//result/doc[1]/str[@name='id'][.=1]","//result/doc[2]/str[@name='id'][.=0]","//result/doc[3]/str[@name='id'][.=2]");  assertQ(req("q","*:*","sort",field + " desc"),"//result/doc[1]/str[@name='id'][.=2]","//result/doc[2]/str[@name='id'][.=0]","//result/doc[3]/str[@name='id'][.=1]");}  }
class C{  public boolean isQuoteTotalAmtOnly(){  return getRfQ().isQuoteTotalAmtOnly();}  }
class C{  public Referenceable(IReferenceableInstance instance) throws AtlasException {  this(instance.getId(),instance.getTypeName(),instance.getValuesMap(),instance.getTraits(),getTraits(instance));}  }
class C{  @SuppressWarnings("unchecked") public ArrayDeque(Collection<? extends E> c){  elements=(E[])new Object[countInitSize(c.size())];  front=rear=0;  status=DequeStatus.Empty;  modCount=0;  Iterator<? extends E> it=c.iterator();  while (it.hasNext()) {    addLastImpl(it.next());  }}  }
class C{  public static Appendable format(long l,Appendable a) throws IOException {  if (a == null)   throw new IllegalArgumentException("Appendable Cannot Be Null");  if (a instanceof TextBuilder)   return ((TextBuilder)a).append(l);  TextBuilder tb=new TextBuilder();  tb.append(l);  return a.append(tb);}  }
class C{  public Spkac(String challenge,SignatureType signatureAlgorithm,SpkacSubject subject,PublicKey publicKey,PrivateKey privateKey) throws SpkacException {  this.challenge=challenge;  this.signatureAlgorithm=signatureAlgorithm;  this.subject=subject;  this.publicKey=publicKey;  this.signature=createSignature(privateKey);}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  public static boolean isBLESupported(Context context){  return context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE);}  }
class C{  public UserCompanyObject(int id){  this.id=id;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int length=s.readInt();  this.longs=new AtomicLongArray(length);  for (int i=0; i < length; i++) {    set(i,s.readDouble());  }}  }
class C{  public boolean isUserApproval(){  return getNode().isUserApproval();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSeamstress(zone);}  }
class C{  public ContentValues createSnapshotValues(Bitmap bm){  WebView web=getWebView();  if (web == null)   return null;  ContentValues values=new ContentValues();  values.put(Snapshots.TITLE,mCurrentState.mTitle);  values.put(Snapshots.URL,mCurrentState.mUrl);  values.put(Snapshots.BACKGROUND,web.getPageBackgroundColor());  values.put(Snapshots.DATE_CREATED,System.currentTimeMillis());  values.put(Snapshots.FAVICON,compressBitmap(getFavicon()));  values.put(Snapshots.THUMBNAIL,compressBitmap(bm));  return values;}  }
class C{  protected boolean shouldDrawInnerBorderAfterRow(int row){  return true;}  }
class C{  public boolean canUndo(){  return m_undoIndex >= 0;}  }
class C{  public T noshade(String value){  return attr("noshade",value);}  }
class C{  public int next(){  if (_currentNode == _startNodeID || _currentNode == DTM.NULL) {    return NULL;  } else {    final int node=_currentNode;    _currentNode=_nextsib2(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  protected void addGateway(String guid,Integer ip){  if (ip.intValue() != 0) {    if (log.isDebugEnabled()) {      log.debug("Adding {} as gateway for GUID {}",IPv4.fromIPv4Address(ip),guid);    }    guidToGateway.put(guid,ip);    if (vNetsByGuid.get(guid) != null)     vNetsByGuid.get(guid).setGateway(IPv4.fromIPv4Address(ip));    if (gatewayToGuid.containsKey(ip)) {      Set<String> gSet=gatewayToGuid.get(ip);      gSet.add(guid);    } else {      Set<String> gSet=Collections.synchronizedSet(new HashSet<String>());      gSet.add(guid);      gatewayToGuid.put(ip,gSet);    }  }}  }
class C{  private void retrieveViews(){  loadingBar=(ProgressBar)findViewById(R.id.audio_player_loading);  artworkView=(ImageView)findViewById(R.id.audio_player_image);  currentPositionView=(TextView)findViewById(R.id.audio_player_position);  durationView=(TextView)findViewById(R.id.audio_player_duration);  seekBar=(SeekBar)findViewById(R.id.audio_player_seek);  previousButton=(ImageButton)findViewById(R.id.audio_player_previous);  playPauseButton=(ImageButton)findViewById(R.id.audio_player_play_pause);  nextButton=(ImageButton)findViewById(R.id.audio_player_next);}  }
class C{  @Override public void startCounting(ExampleSet eSet,boolean useExampleWeights) throws OperatorException {  super.startCounting(eSet,useExampleWeights);  this.labelAttribute=eSet.getAttributes().getLabel();  if (!this.labelAttribute.isNominal()) {    throw new UserError(null,101,"calculation of classification performance criteria",this.labelAttribute.getName());  }  this.predictedLabelAttribute=eSet.getAttributes().getPredictedLabel();  if (this.predictedLabelAttribute == null || !this.predictedLabelAttribute.isNominal()) {    throw new UserError(null,101,"calculation of classification performance criteria","predicted label attribute");  }  if (useExampleWeights) {    this.weightAttribute=eSet.getAttributes().getWeight();  }  List<String> values=labelAttribute.getMapping().getValues();  this.counter=new double[values.size()][values.size()];  this.classNames=new String[values.size()];  Iterator<String> i=values.iterator();  int n=0;  while (i.hasNext()) {    classNames[n]=i.next();    classNameMap.put(classNames[n],n);    n++;  }}  }
class C{  private void initialize(){  time_low=0;  time_mid=0;  time_hi_and_version=0;  clock_seq_low=0;  clock_seq_hi_and_reserved=0;  for (int j=0; j < node.length; j++) {    node[j]=0x00;  }}  }
class C{  @SuppressWarnings("static-access") private void resetSystemPassword(boolean isSource,String newSystemPassword){  String systemPassword=null;  if (isSource) {    if (newSystemPassword == null) {      systemPassword=s_parameters.getSourceSystemPasswd();    } else     if (newSystemPassword.length() == 0) {      systemPassword=m_sourceSystemPassword.getText();      ;    } else {      systemPassword=newSystemPassword;    }    m_sourceSystemPassword.setText(systemPassword);    m_sourceSystemPasswordOld=systemPassword;  } else {    if (newSystemPassword == null) {      systemPassword=s_parameters.getTargetSystemPasswd();    } else     if (newSystemPassword.length() == 0) {      systemPassword=m_targetSystemPassword.getText();    } else {      systemPassword=newSystemPassword;    }    m_targetSystemPassword.setText(systemPassword);    m_targetSystemPasswordOld=systemPassword;  }}  }
class C{  public MultipleFileDictionary(Reader[] readers){  ins=new ArrayList<BufferedReader>();  for (  Reader reader : readers) {    BufferedReader in=new BufferedReader(reader);    ins.add(in);  }}  }
class C{  public static Builder builder(RegisterRequest request){  return new Builder(request);}  }
class C{  public static Container encloseIn(Component... cmp){  return Container.encloseIn(autoFit(),cmp);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  private int calculateHeaderSize(final RTMP rtmp,final Header header,final Header lastHeader){  final byte headerType=getHeaderType(rtmp,header,lastHeader);  int channelIdAdd=0;  int channelId=header.getChannelId();  if (channelId > 320) {    channelIdAdd=2;  } else   if (channelId > 63) {    channelIdAdd=1;  }  return RTMPUtils.getHeaderLength(headerType) + channelIdAdd;}  }
class C{  public String changeJavaVersion(String applicationName,String jvmRelease){  Application application=applicationUtils.getSpecificOrCurrentApplication(applicationName);  if (!availableJavaVersion.contains(jvmRelease)) {    throw new CloudUnitCliException("The specified java version is not available");  }  Map<String,String> parameters=new HashMap<>();  parameters.put("applicationName",application.getName());  parameters.put("jvmRelease",jvmRelease);  parameters.put("jvmMemory",application.getServer().getJvmMemory().toString());  parameters.put("jvmOptions",application.getServer().getJvmOptions().toString());  try {    restUtils.sendPutCommand(authenticationUtils.finalHost + "/server/configuration/jvm",authenticationUtils.getMap(),parameters).get("body");  } catch (  ManagerResponseException e) {    throw new CloudUnitCliException("Couldn't change Java version",e);  }  return "Your java version has been successfully changed";}  }
class C{  public Collection<Member> members(){  return members;}  }
class C{  public void invalidate(){  value=null;}  }
class C{  private IStatus refreshRemoteResource(final TFSRepository repository,final IResource resource,RecursionType recursionType,final Collection<IResource> changedResources,final IProgressMonitor monitor){  monitor.beginTask(MessageFormat.format(Messages.getString("SynchronizeSubscriber.RefreshingResourceRemoteChangesFormat"),resource.getName()),1);  if (resource.getType() == IResource.FILE) {    recursionType=RecursionType.NONE;  }  changedResources.addAll(remoteGetOperationTree.removeOperation(resource));  final ItemSpec itemSpec=new ItemSpec(resource.getLocation().toOSString(),recursionType);  final GetRequest[] requests=new GetRequest[]{new GetRequest(itemSpec,LatestVersionSpec.INSTANCE)};  log.debug(MessageFormat.format("Previewing latest server state for {0}",resource.getLocation().toOSString()));  final PreviewGetCommand getCommand=new PreviewGetCommand(repository,requests,GetOptions.PREVIEW);  try {    final IStatus status=getCommand.run(monitor);    if (status == null) {      throw new Exception(Messages.getString("SynchronizeSubscriber.CouldNotExecuteCommand"));    } else     if (!status.isOK()) {      return status;    }  } catch (  final CanceledException e) {    return Status.CANCEL_STATUS;  }catch (  final Exception e) {    return new TeamStatus(IStatus.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,TeamException.IO_FAILED,Messages.getString("SynchronizeSubscriber.CouldNotGetStatusFromServer"),e,resource);  }  final GetOperation[][] operations=getCommand.getOperations();  for (int i=0; i < operations.length; i++) {    Arrays.sort(operations[i]);    for (int j=0; j < operations[i].length; j++) {      final IResource[] resources=getAffectedResources(operations[i][j]);      if (resources == null || resources.length == 0) {        return new TeamStatus(IStatus.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,TeamException.UNABLE,MessageFormat.format(Messages.getString("SynchronizeSubscriber.CouldNotDetermineLocalResourceForItemFormat"),operations[i][j].getTargetServerItem()),null,resource);      }      for (int k=0; k < resources.length; k++) {        if (log.isDebugEnabled()) {          log.debug(MessageFormat.format("Resource {0} is affected by incoming operation of version {1}",resources[k],operations[i][j].getVersionServer()));        }        remoteGetOperationTree.addOperation(resources[k],operations[i][j]);        changedResources.add(resources[k]);      }    }  }  monitor.worked(1);  monitor.done();  return Status.OK_STATUS;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public void methodEntered(MethodEntryEvent event){  Method meth=event.location().method();  ThreadReference thread=event.thread();  if (meth.name().equals("foo")) {    ++repetitionCount;    beforeRedefine=true;    try {      expectNonObsolete(thread);      inspectLineNumber(event,thread.frame(0));      doRedefine(thread);      beforeRedefine=false;switch (repetitionCount) {case 1:case 5:        expectNonObsolete(thread);      inspectLineNumber(event,thread.frame(0));    break;case 2:case 3:case 4:  expectObsolete(thread);inspectLineNumber(event,thread.frame(0));break;}} catch (Exception exc) {failure("Test Failure: unexpected exception - " + exc);exc.printStackTrace();}}}  }
class C{  public String pullLastError(){  @SuppressWarnings("RedundantStringConstructorCall") String ret=new String(lastError);  lastError="";  hasLastError=false;  return ret;}  }
class C{  public static byte[] decode(byte[] base64Data){  if (base64Data.length == 0) {    return null;  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return new byte[0];      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  public void processTimeout(TimeoutEvent timeoutEvent){  boolean loggerActivated=sLogger.isActivated();  if (loggerActivated) {    sLogger.debug("Transaction timeout " + timeoutEvent.getTimeout().toString());  }  if (timeoutEvent.isServerTransaction()) {    if (loggerActivated) {      sLogger.warn("Unexpected timeout for a server transaction: should never arrives");    }    return;  }  ClientTransaction transaction=timeoutEvent.getClientTransaction();  if (transaction == null) {    if (loggerActivated) {      sLogger.debug("No transaction exist for this transaction: by-pass it");    }    return;  }  String transactionId=SipTransactionContext.getTransactionContextId(transaction.getRequest());  notifyTransactionContext(transactionId,null);}  }
class C{  @Override public EncryptedPrivateKey encrypt(byte[] plainBytes,KeyParameter aesKey) throws KeyCrypterException {  checkNotNull(plainBytes);  checkNotNull(aesKey);  try {    byte[] iv=new byte[BLOCK_LENGTH];    secureRandom.nextBytes(iv);    ParametersWithIV keyWithIv=new ParametersWithIV(aesKey,iv);    BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()));    cipher.init(true,keyWithIv);    byte[] encryptedBytes=new byte[cipher.getOutputSize(plainBytes.length)];    final int length1=cipher.processBytes(plainBytes,0,plainBytes.length,encryptedBytes,0);    final int length2=cipher.doFinal(encryptedBytes,length1);    return new EncryptedPrivateKey(iv,Arrays.copyOf(encryptedBytes,length1 + length2));  } catch (  Exception e) {    throw new KeyCrypterException("Could not encrypt bytes.",e);  }}  }
class C{  @Override public String toString(){  String result="ppc trap ";switch (value) {case EQUAL:    return result + "==";case NOT_EQUAL:  return result + "!=";case LESS:return result + "<";case LESS_EQUAL:return result + "<=";case GREATER:return result + ">";case GREATER_EQUAL:return result + ">=";case HIGHER:return result + ">U";case LOWER:return result + "<U";case HIGHER_EQUAL:return result + ">=U";case LOWER_EQUAL:return result + "<=U";case NOT_SAME:return result + "U!=";case ALWAYS:return result + "always";}return "UNKNOWN";}  }
class C{  public void sendUrgentData(int data) throws IOException {  if (!getImpl().supportsUrgentData()) {    throw new SocketException("Urgent data not supported");  }  getImpl().sendUrgentData(data);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String encodeQueryString(String str){  if (str == null) {    return "";  }  return QUERY_ESCAPER.escape(str).replaceAll("\\!","%21").replaceAll("\\$","%24").replaceAll("\\&","%26").replaceAll("\\'","%27").replaceAll("\\(","%28").replaceAll("\\)","%29").replaceAll("\\*","%2A").replaceAll("\\+","%2B").replaceAll("\\,","%2C").replaceAll("\\\\","%2F").replaceAll("\\:","%3A").replaceAll("\\;","%3B").replaceAll("\\=","%3D").replaceAll("\\@","%40").replaceAll("\\[","%5B").replaceAll("\\]","%5D");}  }
class C{  private List<Extension> findExtensions(String contentType){  Extension[] extensions=this.extensionPoint.getExtensions();  List<String> parsePluginList=this.parsePluginList.getPluginList(contentType);  List<Extension> extensionList=matchExtensions(parsePluginList,extensions,contentType);  if (extensionList != null) {    return extensionList;  }  parsePluginList=this.parsePluginList.getPluginList(DEFAULT_PLUGIN);  return matchExtensions(parsePluginList,extensions,DEFAULT_PLUGIN);}  }
