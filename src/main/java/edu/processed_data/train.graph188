class C{  public Drawer build(){  if (mUsed) {    throw new RuntimeException("you must not reuse a DrawerBuilder builder");  }  if (mActivity == null) {    throw new RuntimeException("please pass an activity");  }  mUsed=true;  if (mDrawerLayout == null) {    withDrawerLayout(-1);  }  mMaterialize=new MaterializeBuilder().withActivity(mActivity).withRootView(mRootView).withFullscreen(mFullscreen).withSystemUIHidden(mSystemUIHidden).withUseScrimInsetsLayout(false).withTransparentStatusBar(mTranslucentStatusBar).withTranslucentNavigationBarProgrammatically(mTranslucentNavigationBarProgrammatically).withContainer(mDrawerLayout).build();  handleDrawerNavigation(mActivity,false);  Drawer result=buildView();  mSliderLayout.setId(R.id.material_drawer_slider_layout);  mDrawerLayout.addView(mSliderLayout,1);  return result;}  }
class C{  public static <E extends Comparable<E>>DoubleLinkedNode<E> sortedDLLToBBST(DoubleLinkedNode<E> node){  return sortedDLLToBBST(node,getLength(node));}  }
class C{  public boolean contains(E element){  return contains(element.toString().getBytes(charset));}  }
class C{  public static int[] randPermuteWithExclusion(int floor,int ceil,int excluded){  int[] permute=new int[ceil - floor - 1];  Random randi=new Random();  int k=floor - 1;  for (int i=floor; i < ceil; i++) {    if (i == excluded) {      continue;    } else {      k++;    }    int j=randi.nextInt(k - floor + 1);    if (j != k - floor) {      permute[k - floor]=permute[j];    }    permute[j]=i;  }  return permute;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public static float cuCimag(cuComplex x){  return x.y;}  }
class C{  public ISchedulingRule markerRule(IResource resource){  return null;}  }
class C{  public static HashMap<CellIndex,Double> readRScalarFromFS(String filePath){  HashMap<CellIndex,Double> expectedValues=new HashMap<CellIndex,Double>();  expectedValues.put(new CellIndex(1,1),readRScalar(filePath));  return expectedValues;}  }
class C{  public static void checkNotNull(Object object,String message){  if (object == null) {    throw new IllegalArgumentException(message);  }}  }
class C{  @VisibleForTesting void pruneOldContents(long secretId){  SecretsRecord secret=dslContext.select(SECRETS.CURRENT).from(SECRETS).where(SECRETS.ID.eq(secretId)).fetchOneInto(SecretsRecord.class);  if (secret == null || secret.getCurrent() == null) {    return;  }  long cutoff=OffsetDateTime.now().minusDays(PRUNE_CUTOFF_DAYS).toEpochSecond();  List<Long> records=dslContext.select(SECRETS_CONTENT.ID).from(SECRETS_CONTENT).where(SECRETS_CONTENT.SECRETID.eq(secretId)).and(SECRETS_CONTENT.CREATEDAT.lt(cutoff)).and(SECRETS_CONTENT.ID.ne(secret.getCurrent())).orderBy(SECRETS_CONTENT.ID.desc()).fetch(SECRETS_CONTENT.ID);  if (records.size() > PRUNE_CUTOFF_ITEMS) {    for (    long id : records.subList(PRUNE_CUTOFF_ITEMS,records.size())) {      dslContext.deleteFrom(SECRETS_CONTENT).where(SECRETS_CONTENT.ID.eq(id)).execute();    }  }}  }
class C{  public void reset(){  this.pageAttrState=0x0;  this.pageTagState=0x0;  this.strtblUsed=false;}  }
class C{  public CreateEditAddressPage(final PageParameters params){  super(params);  final ShoppingCart cart=ApplicationDirector.getShoppingCart();  final Shop shop=ApplicationDirector.getCurrentShop();  final boolean isCheckout=!RETURN_TO_SELFCARE.equals(params.get(WebParametersKeys.ADDRESS_FORM_RETURN_LABEL).toString());  final Customer customer=isCheckout ? customerServiceFacade.getCheckoutCustomer(shop,cart) : customerServiceFacade.getCustomerByEmail(shop,cart.getCustomerEmail());  final String addrId=params.get(WebParametersKeys.ADDRESS_ID).toString();  final String addrType=params.get(WebParametersKeys.ADDRESS_TYPE).toString();  final Address address=addressBookFacade.getAddress(customer,addrId,addrType);  final Pair<Class<? extends Page>,PageParameters> successTarget=determineSuccessTarget(isCheckout,customer);  final Pair<Class<? extends Page>,PageParameters> cancelTarget=determineCancelTarget(isCheckout,customer);  add(new FeedbackPanel(FEEDBACK));  if (isCheckout) {    add(new CheckoutHeader(HEADER));    add(new CheckoutFooter(FOOTER));  } else {    add(new StandardHeader(HEADER));    add(new StandardFooter(FOOTER));  }  add(new AddressForm(ADDRESS_FORM,new Model<Address>(address),addrType,successTarget.getFirst(),successTarget.getSecond(),cancelTarget.getFirst(),cancelTarget.getSecond()));  add(new ServerSideJs("serverSideJs"));  add(new HeaderMetaInclude("headerInclude"));}  }
class C{  public static String xml(Object o){  return Gestion.getXStream().toXML(o);}  }
class C{  @Override public boolean isBusy(){  return false;}  }
class C{  @Override protected int sendAsymmSecureMessage(final AsyncWrite msg,final SecurityConfiguration securityConfiguration,int secureChannelId,int requestNumber,AtomicInteger sendSequenceNumber) throws ServiceResultException {synchronized (msg) {    if (msg.isCanceled())     return -1;    msg.setQueued();  }  ChunkFactory cf=new ChunkFactory.AsymmMsgChunkFactory(ctx.maxSendChunkSize,securityConfiguration);  MessageToChunks mc=new MessageToChunks(msg.getMessage(),ctx,encoderCtx,cf,MessageType.Message);  final ByteBuffer[] plaintexts=mc.call();  final ByteBuffer[] chunks=cf.expandToCompleteChunk(plaintexts);synchronized (msg) {    if (msg.isCanceled())     return -1;    msg.setWriting();  }  SecurityPolicy policy=securityConfiguration.getSecurityPolicy();  startChunkSend(chunks);  for (int i=0; i < chunks.length; i++) {    ByteBuffer chunk=chunks[i];    ByteBuffer plaintext=plaintexts[i];    boolean finalChunk=chunk == chunks[chunks.length - 1];    chunk.rewind();    chunk.putInt(TcpMessageType.OPEN | (finalChunk ? TcpMessageType.FINAL : TcpMessageType.CONTINUE));    chunk.position(8);    chunk.putInt(secureChannelId);    byte[] data=policy.getEncodedPolicyUri();    chunk.putInt(data.length);    chunk.put(data);    data=securityConfiguration.getEncodedLocalCertificate();    chunk.putInt(data == null ? -1 : data.length);    if (data != null)     chunk.put(data);    data=securityConfiguration.getEncodedRemoteCertificateThumbprint();    chunk.putInt(data == null ? -1 : data.length);    if (data != null)     chunk.put(data);    chunk.putInt(sendSequenceNumber.getAndIncrement());    chunk.putInt(requestNumber);    new ChunkAsymmEncryptSigner(chunk,plaintext,securityConfiguration).run();    chunk.rewind();    endChunkSend(chunk);  }  msg.setWritten();  return chunks.length;}  }
class C{  public DeflaterInputStream(InputStream in,Deflater defl,int bufLen){  super(in);  if (in == null)   throw new NullPointerException("Null input");  if (defl == null)   throw new NullPointerException("Null deflater");  if (bufLen < 1)   throw new IllegalArgumentException("Buffer size < 1");  def=defl;  buf=new byte[bufLen];}  }
class C{  protected void showResults(){  this.intersectionsLayer.removeAllRenderables();  this.sightLinesLayer.removeAllRenderables();  for (  Position position : this.grid) {    this.showIntersectionsForPosition(position);  }  this.getWwd().redraw();}  }
class C{  public IElementType parseBarewordMinus(){  final CharSequence tokenText=yytext();  if (Character.isDigit(tokenText.charAt(0))) {    int endOffset=1;    while (Character.isDigit(tokenText.charAt(endOffset))) {      endOffset++;    }    yypushback(tokenText.length() - endOffset);    return NUMBER_SIMPLE;  }  return IDENTIFIER;}  }
class C{  @Override public Rule parseLine(String line){  String[] fields=line.split(Constants.fieldDelimiter);  StringBuffer hieroLine=new StringBuffer(Constants.defaultNT + " ||| " + fields[0]+ " ||| "+ fields[1]+ " |||");  String mosesFeatureString=fields[2];  for (  String value : mosesFeatureString.split(" ")) {    float f=Float.parseFloat(value);    hieroLine.append(String.format(" %f",f <= 0.0 ? -100 : -Math.log(f)));  }  if (fields.length >= 4)   hieroLine.append(" ||| ").append(fields[3]);  return super.parseLine(hieroLine.toString());}  }
class C{  public static boolean isOccupied(GlowBlock block){  return (block.getData() & 0x4) == 0x4;}  }
class C{  private void initBPRMADetails(int C_BPartner_ID){  rmaField.removeActionListener(this);  rmaField.removeAllItems();  KeyNamePair pp=new KeyNamePair(0,"");  rmaField.addItem(pp);  ArrayList<KeyNamePair> list=loadRMAData(C_BPartner_ID);  for (  KeyNamePair knp : list)   rmaField.addItem(knp);  rmaField.setSelectedIndex(0);  rmaField.addActionListener(this);}  }
class C{  private void registerAllCombinationsRecursion(Attribute[] groupByAttributes,MultidimensionalArraySet<AggregationFunction[]> functionSet,boolean ignoreMissings,AggregationAttribute[] aggregationAttributes,int[] indices,int depth) throws UserError {  if (depth == indices.length) {    AggregationFunction[] functions=new AggregationFunction[aggregationAttributes.length];    for (int j=0; j < aggregationAttributes.length; j++) {      functions[j]=getAggregationFunction(aggregationAttributes[j].functionName,ignoreMissings,aggregationAttributes[j].attribute);    }    functionSet.set(indices,functions);  } else {    NominalMapping mapping=groupByAttributes[depth].getMapping();    for (    String value : mapping.getValues()) {      indices[depth]=mapping.getIndex(value);      registerAllCombinationsRecursion(groupByAttributes,functionSet,ignoreMissings,aggregationAttributes,indices,depth + 1);    }  }}  }
class C{  private boolean isDualFeasible(){  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      if (reducedCost(i,j) < 0) {        StdOut.println("Dual variables are not feasible");        return false;      }    }  }  return true;}  }
class C{  @Override public Future<Void> asyncClose(){  Promise<Void> closeFuture;synchronized (this) {    if (null != closePromise) {      return closePromise;    }    closeFuture=closePromise=new Promise<Void>();  }  try {    if (ownWriterZKC) {      writerZKC.close();    }    if (ownReaderZKC) {      readerZKC.close();    }  } catch (  Exception e) {    LOG.warn("Exception while closing distributed log manager",e);  }  FutureUtils.setValue(closeFuture,null);  return closeFuture;}  }
class C{  public void closeCursor(Cursor cursor){  cursor.close();  cursorMap.remove(Integer.valueOf(cursor.getCursorId()));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.438 -0500",hash_original_method="39AA0B3013D1EF3A3A6D6B7DFFE53DC3",hash_generated_method="7822822DBB75EDF90FC9C36EAA9B10D3") private void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  for (int k=0; k < segments.length; ++k) {    Segment<K,V> seg=segments[k];    seg.lock();    try {      HashEntry<K,V>[] tab=seg.table;      for (int i=0; i < tab.length; ++i) {        for (HashEntry<K,V> e=tab[i]; e != null; e=e.next) {          s.writeObject(e.key);          s.writeObject(e.value);        }      }    }  finally {      seg.unlock();    }  }  s.writeObject(null);  s.writeObject(null);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.FOR_STATEMENT__STATEMENT:    return getStatement();case N4JSPackage.FOR_STATEMENT__EXPRESSION:  return getExpression();case N4JSPackage.FOR_STATEMENT__INIT_EXPR:return getInitExpr();case N4JSPackage.FOR_STATEMENT__UPDATE_EXPR:return getUpdateExpr();case N4JSPackage.FOR_STATEMENT__FOR_IN:return isForIn();case N4JSPackage.FOR_STATEMENT__FOR_OF:return isForOf();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Node(T data){  this();  setData(data);}  }
class C{  public boolean isReplaceable(World worldIn,BlockPos pos){  return true;}  }
class C{  public void test_getPrimeQ(){  assertEquals("invalid prime Q",Util.rsaCrtParam.getPrimeQ(),key.getPrimeQ());}  }
class C{  public static boolean byteArrayOutputStreamToFile(final ByteArrayOutputStream bos,final File targetFile,final boolean doAppend){  if (bos == null || targetFile == null) {    Log.e(FileUtils.class,"byteArrayOutputStreamToFile(): Null parameters given");    return false;  }  return byteArrayToFile(bos.toByteArray(),targetFile,doAppend);}  }
class C{  public Map<Object,List> mockInput(){  return mockInput;}  }
class C{  public void disallowPublicVisibility(){  allowsPublicVisibility=false;}  }
class C{  public Matrix4x3d translation(double x,double y,double z){  m00=1.0;  m01=0.0;  m02=0.0;  m10=0.0;  m11=1.0;  m12=0.0;  m20=0.0;  m21=0.0;  m22=1.0;  m30=x;  m31=y;  m32=z;  properties=PROPERTY_TRANSLATION;  return this;}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  private ArrayList<String> fetchConversation(SQLiteDatabase db,long lastWhatsapp){  if (Cfg.DEBUG) {    Check.log(TAG + " (fetchChangedConversation)");  }  ArrayList<String> changedConversations=new ArrayList<String>();  SQLiteQueryBuilder queryBuilderIndex=new SQLiteQueryBuilder();  queryBuilderIndex.setTables(M.e("chat_list"));  queryBuilderIndex.appendWhere("sort_timestamp > " + lastWhatsapp);  String[] projection={M.e("_id"),M.e("key_remote_jid"),M.e("message_table_id")};  Cursor cursor=queryBuilderIndex.query(db,projection,null,null,null,null,null);  while (cursor != null && cursor.moveToNext()) {    String jid=cursor.getString(cursor.getColumnIndexOrThrow(M.e("key_remote_jid")));    int mid=cursor.getInt(cursor.getColumnIndexOrThrow(M.e("message_table_id")));    if (Cfg.DEBUG) {      Check.log(TAG + " (readChatMessages): jid : " + jid+ " mid : "+ mid);    }    int lastReadIndex=0;    if (lastReadIndex < mid) {      changedConversations.add(jid);    }  }  cursor.close();  return changedConversations;}  }
class C{  @SuppressWarnings("unchecked") private void notifyDataSetListeners(DataSetEvent ge){  Vector<DataSourceListener> l;synchronized (this) {    l=(Vector<DataSourceListener>)m_dataSetListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptDataSet(ge);    }  }}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 14:{        addToken(Token.RESERVED_WORD);      }case 15:    break;case 2:{    addToken(Token.IDENTIFIER);  }case 16:break;case 13:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 17:break;case 11:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 18:break;case 4:{addToken(Token.COMMENT_EOL);addNullToken();return firstToken;}case 19:break;case 6:{addToken(Token.WHITESPACE);}case 20:break;case 10:{addToken(Token.ERROR_NUMBER_FORMAT);}case 21:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 22:break;case 12:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 23:break;case 8:{addToken(Token.OPERATOR);}case 24:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 25:break;case 7:{addToken(Token.ERROR_STRING_DOUBLE);addNullToken();return firstToken;}case 26:break;case 5:{addNullToken();return firstToken;}case 27:break;case 9:{addToken(Token.SEPARATOR);}case 28:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 242:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @Override public void runAndUpdate(final Runnable r){}  }
class C{  public static void generateImports(StringBuilder builder){  builder.append("import com.google.inject.Inject;\n");  builder.append("import com.google.inject.Provider;\n");  builder.append("import com.google.inject.Singleton;\n");  builder.append("import java.util.HashMap;\n");  builder.append("import java.util.Map;\n");}  }
class C{  @Deprecated public int _(final int row,final int col){  return addr.op(row,col);}  }
class C{  public static String unescapePath(String subject,SubstitutionFilterChain nextFilter,SubstitutionContext ctx){  String encoding="UTF-8";  if (FIND_ENCODING_PATTERN.matcher(subject).find()) {    encoding=subject.substring(0,subject.indexOf(':'));    subject=subject.substring(subject.indexOf(':') + 1);    if (!Charset.isSupported(encoding))     encoding="UTF-8";  }  subject=nextFilter.substitute(subject,ctx);  try {    return org.tuckey.web.filters.urlrewrite.utils.URLDecoder.decodePath(subject,encoding);  } catch (  URISyntaxException e) {    log.error(e,e);  }  return "";}  }
class C{  private MaterialSection newSectionInternal(String title,Drawable icon,MaterialMenu menu,int position,boolean refreshMenu){  MaterialSection section=new MaterialSection(MaterialSection.TARGET_CLICK,false,changeListener,new MaterialSectionBind<customTextView>());  additionalSection(section);  section.setFillIconColor(false);  section.setIcon(icon);  section.setTitle(title);  menu.addItem(section,position);  if (refreshMenu)   reloadMenu();  return section;}  }
class C{  public boolean contains(Object value){  if (value == null) {    throw new NullPointerException();  }  final Entry[] tab=table;  for (int i=tab.length; i-- > 0; ) {    for (Entry e=tab[i]; e != null; e=e.next) {      if (e.value.equals(value)) {        return true;      }    }  }  return false;}  }
class C{  private static void callExpand(Instruction s,IR ir){  int NumberParams=MIR_Call.getNumberOfParams(s);  int int_index=0;  int double_index=0;  int callSpillLoc=STACKFRAME_HEADER_SIZE;  PhysicalRegisterSet phys=(PhysicalRegisterSet)ir.regpool.getPhysicalRegisterSet();  Instruction prev=s.prevInstructionInCodeOrder();  Register FP=phys.getFP();  boolean isSysCall=ir.stackManager.isSysCall(s);  boolean firstLongHalf=false;  for (int opNum=0; opNum < NumberParams; opNum++) {    Operand param=MIR_Call.getClearParam(s,opNum);    RegisterOperand Reg=(RegisterOperand)param;    Register reg=Reg.getRegister();    if (Reg.getType().isFloatType()) {      if (double_index < NUMBER_DOUBLE_PARAM) {        Register real=phys.get(FIRST_DOUBLE_PARAM + (double_index++));        s.insertBefore(MIR_Move.create(PPC_FMR,F(real),Reg));        Reg=F(real);        MIR_Call.setParam(s,opNum,Reg);      } else {        Instruction p=prev.nextInstructionInCodeOrder();        callSpillLoc+=BYTES_IN_ADDRESS;        p.insertBefore(MIR_Store.create(PPC_STFS,F(reg),A(FP),IC(callSpillLoc - BYTES_IN_FLOAT)));        MIR_Call.setParam(s,opNum,null);      }    } else     if (Reg.getType().isDoubleType()) {      if (double_index < NUMBER_DOUBLE_PARAM) {        Register real=phys.get(FIRST_DOUBLE_PARAM + (double_index++));        s.insertBefore(MIR_Move.create(PPC_FMR,D(real),Reg));        Reg=D(real);        MIR_Call.setParam(s,opNum,Reg);      } else {        Instruction p=prev.nextInstructionInCodeOrder();        p.insertBefore(MIR_Store.create(PPC_STFD,D(reg),A(FP),IC(callSpillLoc)));        callSpillLoc+=BYTES_IN_DOUBLE;        MIR_Call.setParam(s,opNum,null);      }    } else {      if (VM.BuildForSVR4ABI) {        if (isSysCall && Reg.getType().isLongType()) {          if (firstLongHalf) {            firstLongHalf=false;          } else {            int true_index=FIRST_INT_PARAM + int_index;            int_index+=(true_index + 1) & 0x01;            firstLongHalf=true;          }        }      }      if (int_index < NUMBER_INT_PARAM) {        Register real=phys.get(FIRST_INT_PARAM + (int_index++));        RegisterOperand Real=new RegisterOperand(real,Reg.getType());        s.insertBefore(MIR_Move.create(PPC_MOVE,Real,Reg));        Reg=new RegisterOperand(real,Reg.getType());        MIR_Call.setParam(s,opNum,Reg);      } else {        Instruction p=prev.nextInstructionInCodeOrder();        callSpillLoc+=BYTES_IN_ADDRESS;        if (VM.BuildFor64Addr && (Reg.getType().isIntType() || Reg.getType().isShortType() || Reg.getType().isByteType()|| Reg.getType().isCharType()|| Reg.getType().isBooleanType())) {          p.insertBefore(MIR_Store.create(PPC_STW,new RegisterOperand(reg,Reg.getType()),A(FP),IC(callSpillLoc - BYTES_IN_INT)));        } else {          p.insertBefore(MIR_Store.create(PPC_STAddr,new RegisterOperand(reg,Reg.getType()),A(FP),IC(callSpillLoc - BYTES_IN_ADDRESS)));        }        MIR_Call.setParam(s,opNum,null);      }    }  }  if (callSpillLoc != STACKFRAME_HEADER_SIZE) {    ir.stackManager.allocateParameterSpace(callSpillLoc);  }  Instruction lastCallSeqInstr=s;  if (MIR_Call.hasResult2(s)) {    if (VM.VerifyAssertions)     VM._assert(VM.BuildFor32Addr);    RegisterOperand result2=MIR_Call.getClearResult2(s);    RegisterOperand physical=new RegisterOperand(phys.get(FIRST_INT_RETURN + 1),result2.getType());    Instruction tmp=MIR_Move.create(PPC_MOVE,result2,physical);    lastCallSeqInstr.insertAfter(tmp);    lastCallSeqInstr=tmp;    MIR_Call.setResult2(s,null);  }  if (MIR_Call.hasResult(s)) {    RegisterOperand result1=MIR_Call.getClearResult(s);    if (result1.getType().isFloatType() || result1.getType().isDoubleType()) {      RegisterOperand physical=new RegisterOperand(phys.get(FIRST_DOUBLE_RETURN),result1.getType());      Instruction tmp=MIR_Move.create(PPC_FMR,result1,physical);      lastCallSeqInstr.insertAfter(tmp);      lastCallSeqInstr=tmp;      MIR_Call.setResult(s,null);    } else {      RegisterOperand physical=new RegisterOperand(phys.get(FIRST_INT_RETURN),result1.getType());      Instruction tmp=MIR_Move.create(PPC_MOVE,result1,physical);      lastCallSeqInstr.insertAfter(tmp);      lastCallSeqInstr=tmp;      MIR_Call.setResult(s,null);    }  }}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder();  try {    appendTo(builder);  } catch (  IOException e) {    throw new RuntimeException(e);  }  return builder.toString();}  }
class C{  public void windowClosing(java.awt.event.WindowEvent e){  doneButtonActionPerformed();  super.windowClosing(e);}  }
class C{  public void init(OMDrawingTool drawingTool){  if (list != null) {    for (    OMGraphic omg : list) {      if (omg.isVisible()) {        add(omg,drawingTool);      }    }  }}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public void mouseEntered(java.awt.event.MouseEvent e){}  }
class C{  public static Column create(Columnar columnar,Column column,String name,Integer position){  Integer finalPosition=(position != null) ? position : column.position;  String finalName=(name != null) ? name : column.getName();  Column out=create(columnar,finalName,finalPosition,column.type,column.maxStorageSize,column.prefixSize);  if (column.identityGenerator != null) {    Sequence newGenerator=columnar.getAIS().getSequence(column.identityGenerator.getSequenceName());    if (newGenerator != null) {      out.setDefaultIdentity(column.defaultIdentity);      out.setIdentityGenerator(newGenerator);    }  }  out.setDefaultValue(column.getDefaultValue());  out.setDefaultFunction(column.getDefaultFunction());  out.setUuid(column.getUuid());  return out;}  }
class C{  public static boolean[] clone(boolean[] array){  if (array == null) {    return null;  }  return (boolean[])array.clone();}  }
class C{  public final void lazySet(V newValue){  unsafe.putOrderedObject(this,valueOffset,newValue);}  }
class C{  public void refreshListAfterBroadcastReceiver(){  viewPager.setCurrentItem(0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void test_UTCIIIIII(){  assertTrue("Returned incorrect UTC value for epoch",Date.UTC(70,0,1,0,0,0) == (long)0);  assertTrue("Returned incorrect UTC value for epoch +1yr",Date.UTC(71,0,1,0,0,0) == (long)365 * 24 * 60* 60* 1000);}  }
class C{  public static List<String> expandClassPath(List<String> files){  for (int i=0; i < files.size(); i++) {    String file=files.get(i);    if (!file.endsWith(".jar")) {      continue;    }    Manifest manifest=manifestMap.get(file);    JarFile jarfile=null;    if (manifest == null) {      try {        jarfile=new JarFile(file,false);        manifest=jarfile.getManifest();        if (manifest == null) {          manifestMap.put(file,nullManifest);          continue;        } else         if (!file.contains("/WEB-INF")) {          manifestMap.put(file,manifest);        }      } catch (      IOException ex) {        continue;      } finally {        try {          if (jarfile != null)           jarfile.close();        } catch (        IOException ex) {        }      }    } else     if (manifest == nullManifest) {      continue;    }    java.util.jar.Attributes attrs=manifest.getMainAttributes();    String cp=(String)attrs.getValue("Class-Path");    if (cp == null) {      continue;    }    String[] paths=cp.split(" ");    int lastIndex=file.lastIndexOf(File.separatorChar);    String baseDir="";    if (lastIndex > 0) {      baseDir=file.substring(0,lastIndex + 1);    }    for (    String path : paths) {      String p;      if (path.startsWith(File.separator)) {        p=path;      } else {        p=baseDir + path;      }      if (!files.contains(p)) {        files.add(p);      }    }  }  return files;}  }
class C{  public void tunerFrequencyChanged(Tuner tuner){  TunerConfiguration assigned=getTunerConfiguration(tuner.getTunerType(),tuner.getUniqueID());  assigned.setFrequency(tuner.getTunerController().getFrequency());  broadcast(new TunerConfigurationEvent(assigned,Event.CHANGE));}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public CircleLayout(String group){  super(group);}  }
class C{  public boolean isClosed(){  return _lifecycle.isDestroyed();}  }
class C{  public void fcmov(int size,Register result,Register trueValue,Register falseValue,ConditionFlag condition){  super.fcsel(size,result,trueValue,falseValue,condition);}  }
class C{  public Node buildTreeGrow(Class<?> type,int depth){  if (depth == 0) {    return PRNG.nextItem(listAvailableTerminals(type)).copyNode();  } else {    Node node=PRNG.nextItem(listAvailableNodes(type)).copyNode();    for (int i=0; i < node.getNumberOfArguments(); i++) {      node.setArgument(i,buildTreeGrow(node.getArgumentType(i),depth - 1));    }    return node;  }}  }
class C{  public synchronized boolean contains(Object key){  if (key == null) {    String message=Logging.getMessage("nullValue.KeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return this.entries.containsKey(key);}  }
class C{  public MapMouseSupport(MapMouseMode mode,boolean shouldConsumeEvents){  super(mode);  consumeEvents=shouldConsumeEvents;  DEBUG=logger.isLoggable(Level.FINE);  DEBUG_DETAIL=logger.isLoggable(Level.FINER);}  }
class C{  public static void loadClass(Class<?> klass){  try {    Class.forName(klass.getName(),true,klass.getClassLoader());  } catch (  ClassNotFoundException e) {    assertFail();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:10.606 -0500",hash_original_method="E5C5DBED2FC0D18DB80484DB83D94F8A",hash_generated_method="03D37BD64D7EA5A498C29F3157B06CA4") public void cancel(){}  }
class C{  @Override public synchronized void removeConfigurationListener(ConfigurationListener cl){}  }
class C{  private static String generateUserAgent(){  String androidVersion=Util.getAndroidVersion();  String userAgent="MuninForAndroid (" + androidVersion + ")";  log("User agent : " + userAgent);  return userAgent;}  }
class C{  public static String decode(StringBuffer buffer){  return decode(buffer.toString());}  }
class C{  static FacetMethod selectFacetMethod(SchemaField field,FacetMethod method,Integer mincount){  FieldType type=field.getType();  if (method == null) {    if (type instanceof BoolField && (field.indexed() == true || field.hasDocValues() == false)) {      method=FacetMethod.ENUM;    } else     if (type.getNumericType() != null && !field.multiValued()) {      method=FacetMethod.FCS;    } else {      method=FacetMethod.FC;    }  }  if (method == FacetMethod.FC && type.getNumericType() != null && !field.multiValued()) {    method=FacetMethod.FCS;  }  if (method == FacetMethod.UIF && !field.hasDocValues() && mincount == 0) {    method=field.multiValued() ? FacetMethod.FC : FacetMethod.FCS;  }  if (method == FacetMethod.ENUM && TrieField.getMainValuePrefix(type) != null) {    method=field.multiValued() ? FacetMethod.FC : FacetMethod.FCS;  }  final boolean multiToken=field.multiValued() || type.multiValuedFieldCache();  if (method == FacetMethod.FCS && multiToken) {    method=FacetMethod.FC;  }  return method;}  }
class C{  public T caseTagTitle(TagTitle object){  return null;}  }
class C{  public SimpleScheduleBuilder repeatForever(){  this.repeatCount=SimpleTrigger.REPEAT_INDEFINITELY;  return this;}  }
class C{  public void reset(){  this.isEquals=true;}  }
class C{  public AnalogPrototype lptohp(double omega0){  double[] tn={omega0};  double[] td={0.0,1.0};  Rational T=new Rational(tn,td);  AnalogPrototype retval=new AnalogPrototype();  for (int i=0; i < sections.size(); i++)   retval.addSection(sections.get(i).map(T));  return retval;}  }
class C{  void add(File file,SharedFsTimeData timeData){  assert file != null;  assert timeData != null;synchronized (mux) {    files.put(file,timeData);    mux.notifyAll();  }}  }
class C{  private int read(int n) throws IOException {  if (closed) {    return 0;  }  int c;  int i=n;  while (--i >= 0) {    c=is.read();    if (c < 0) {      closed=true;      break;    }    buff.append((char)c);  }  return n - i;}  }
class C{  public Matrix fitScreen(){  Matrix save=new Matrix();  save.set(mMatrixTouch);  float[] vals=new float[9];  save.getValues(vals);  vals[Matrix.MTRANS_X]=0f;  vals[Matrix.MTRANS_Y]=0f;  vals[Matrix.MSCALE_X]=1f;  vals[Matrix.MSCALE_Y]=1f;  save.setValues(vals);  return save;}  }
class C{  private boolean isOpen(){  return buf != null;}  }
class C{  public int diff_commonPrefix(String text1,String text2){  int n=Math.min(text1.length(),text2.length());  for (int i=0; i < n; i++) {    if (text1.charAt(i) != text2.charAt(i)) {      return i;    }  }  return n;}  }
class C{  public static void readOutputsFromFile(String fin_outputs,GateLibrary gate_library){  ArrayList<ArrayList<String>> outputs_list=Util.fileTokenizer(fin_outputs);  ArrayList<String> output_names=new ArrayList<String>();  for (int i=0; i < outputs_list.size(); ++i) {    if (outputs_list.get(i).get(0).substring(0,1).equals("#")) {      continue;    }    String name=outputs_list.get(i).get(0);    String output_seq=outputs_list.get(i).get(1);    output_names.add(name);    gate_library.get_OUTPUTS_SEQ().put(name,output_seq);  }  for (int i=0; i < output_names.size(); ++i) {    gate_library.get_OUTPUT_NAMES()[i]=output_names.get(i);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:58.682 -0400",hash_original_method="5BB837D750DC12D68B4610C57E179EC7",hash_generated_method="94BD60CF172F0C50E0B88CB0B4F17B80") public AsyncRunner(FilterContext context){  super(context);  mSchedulerClass=SimpleScheduler.class;  mLogVerbose=Log.isLoggable(TAG,Log.VERBOSE);}  }
class C{  protected InputUnit(){}  }
class C{  protected void preprocessArgument(Object arg){  if (arg instanceof Type) {    preprocessType((Type)arg);  } else   if (arg instanceof Symbol) {    preprocessSymbol((Symbol)arg);  } else   if (arg instanceof JCDiagnostic) {    preprocessDiagnostic((JCDiagnostic)arg);  } else   if (arg instanceof Iterable<?>) {    for (    Object o : (Iterable<?>)arg) {      preprocessArgument(o);    }  }}  }
class C{  protected void validateParameterValues(org.oscm.xsd.ServiceParameter[] param){}  }
class C{  private KdbSerializer(){}  }
class C{  public void addWayNode(long nodeId){  wayNodeIds.add(nodeId);}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  if (contentHandler != null) {    contentHandler.endPrefixMapping(prefix);  }}  }
class C{  private DataPoint _addPoint(DataPoint point){  DataPoint existingPoint=ntree.add(point);  if (existingPoint != null) {    return existingPoint;  }  ensureDistances();  lastAddedPoint=point;  return null;}  }
class C{  public String amt(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (isCalloutActive() || value == null)   return "";  int StdPrecision=2;  BigDecimal QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");  BigDecimal PriceEntered=(BigDecimal)mTab.getValue("PriceEntered");  log.fine("QtyEntered=" + QtyEntered + ", PriceEntered="+ PriceEntered);  if (QtyEntered == null)   QtyEntered=Env.ZERO;  if (PriceEntered == null)   PriceEntered=Env.ZERO;  BigDecimal LineNetAmt=QtyEntered.multiply(PriceEntered);  if (LineNetAmt.scale() > StdPrecision)   LineNetAmt=LineNetAmt.setScale(StdPrecision,BigDecimal.ROUND_HALF_UP);  boolean IsSOTrx="Y".equals(Env.getContext(Env.getCtx(),WindowNo,"IsSOTrx"));  boolean IsTaxIncluded="Y".equals(Env.getContext(Env.getCtx(),WindowNo,"IsTaxIncluded"));  BigDecimal TaxAmt=null;  if (mField.getColumnName().equals("TaxAmt")) {    TaxAmt=(BigDecimal)mTab.getValue("TaxAmt");  } else {    Integer taxID=(Integer)mTab.getValue("C_Tax_ID");    if (taxID != null) {      int C_Tax_ID=taxID.intValue();      MTax tax=new MTax(ctx,C_Tax_ID,null);      TaxAmt=tax.calculateTax(LineNetAmt,IsTaxIncluded,StdPrecision);      mTab.setValue("TaxAmt",TaxAmt);    }  }  if (IsTaxIncluded) {    mTab.setValue("LineTotalAmt",LineNetAmt);    mTab.setValue("LineNetAmt",LineNetAmt.subtract(TaxAmt));  } else {    mTab.setValue("LineNetAmt",LineNetAmt);    mTab.setValue("LineTotalAmt",LineNetAmt.add(TaxAmt));  }  return "";}  }
class C{  synchronized void redo(RTEditText editor){  Stack<Operation> redoStack=getRedoStack(editor);  if (!redoStack.empty()) {    Stack<Operation> undoStack=getUndoStack(editor);    Operation op=redoStack.pop();    push(op,undoStack);    op.redo(editor);    while (!redoStack.empty() && op.canMerge(redoStack.peek())) {      op=redoStack.pop();      push(op,undoStack);      op.redo(editor);    }  }}  }
class C{  public static void paintCheckedBackground(Component c,Graphics g,int x,int y,int width,int height){  if (backgroundImage == null) {    backgroundImage=new BufferedImage(64,64,BufferedImage.TYPE_INT_ARGB);    Graphics bg=backgroundImage.createGraphics();    for (int by=0; by < 64; by+=8) {      for (int bx=0; bx < 64; bx+=8) {        bg.setColor(((bx ^ by) & 8) != 0 ? Color.lightGray : Color.white);        bg.fillRect(bx,by,8,8);      }    }    bg.dispose();  }  if (backgroundImage != null) {    Shape saveClip=g.getClip();    Rectangle r=g.getClipBounds();    if (r == null)     r=new Rectangle(c.getSize());    r=r.intersection(new Rectangle(x,y,width,height));    g.setClip(r);    int w=backgroundImage.getWidth();    int h=backgroundImage.getHeight();    if (w != -1 && h != -1) {      int x1=(r.x / w) * w;      int y1=(r.y / h) * h;      int x2=((r.x + r.width + w - 1) / w) * w;      int y2=((r.y + r.height + h - 1) / h) * h;      for (y=y1; y < y2; y+=h)       for (x=x1; x < x2; x+=w)       g.drawImage(backgroundImage,x,y,c);    }    g.setClip(saveClip);  }}  }
class C{  @SuppressWarnings("fallthrough") public void executeCall() throws Exception {  byte returnType;  DGCAckHandler ackHandler=null;  try {    if (out != null) {      ackHandler=out.getDGCAckHandler();    }    releaseOutputStream();    DataInputStream rd=new DataInputStream(conn.getInputStream());    byte op=rd.readByte();    if (op != TransportConstants.Return) {      if (Transport.transportLog.isLoggable(Log.BRIEF)) {        Transport.transportLog.log(Log.BRIEF,"transport return code invalid: " + op);      }      throw new UnmarshalException("Transport return code invalid");    }    getInputStream();    returnType=in.readByte();    in.readID();  } catch (  UnmarshalException e) {    throw e;  }catch (  IOException e) {    throw new UnmarshalException("Error unmarshaling return header",e);  } finally {    if (ackHandler != null) {      ackHandler.release();    }  }switch (returnType) {case TransportConstants.NormalReturn:    break;case TransportConstants.ExceptionalReturn:  Object ex;try {  ex=in.readObject();} catch (Exception e) {  throw new UnmarshalException("Error unmarshaling return",e);}if (ex instanceof Exception) {exceptionReceivedFromServer((Exception)ex);} else {throw new UnmarshalException("Return type not Exception");}default :if (Transport.transportLog.isLoggable(Log.BRIEF)) {Transport.transportLog.log(Log.BRIEF,"return code invalid: " + returnType);}throw new UnmarshalException("Return code invalid");}}  }
class C{  public void addHeader(Header header){  if (this.headers == null) {    this.headers=new ArrayList<HeaderItem>();  }  this.headers.add(new HeaderItem(header));}  }
class C{  @Override public void increment(double coord,float val){  int bin=getBinNr(coord);  if (bin < 0) {    if (size - bin > data.length) {      float[] tmpdata=new float[growSize(data.length,size - bin)];      System.arraycopy(data,0,tmpdata,-bin,size);      data=tmpdata;    } else {      System.arraycopy(data,0,data,-bin,size);      Arrays.fill(data,0,-bin,(float)0);    }    data[0]=val;    assert (data.length >= size - bin);    offset-=bin;    size-=bin;  } else   if (bin >= data.length) {    float[] tmpdata=new float[growSize(data.length,bin + 1)];    System.arraycopy(data,0,tmpdata,0,size);    tmpdata[bin]=val;    data=tmpdata;    size=bin + 1;    max=Double.MAX_VALUE;  } else {    if (bin >= size) {      size=bin + 1;    }    data[bin]+=val;  }}  }
class C{  public void goTo(final Label label){  mv.visitJumpInsn(Opcodes.GOTO,label);}  }
class C{  public ConfusionMatrix(ArrayList<ClassLabel> labels,int[][] confusion) throws IllegalArgumentException {  for (int i=0; i < confusion.length; i++) {    if (confusion.length != confusion[i].length) {      throw new IllegalArgumentException("Confusion matrix irregular: row-dimension = " + confusion.length + ", col-dimension in col"+ i+ " = "+ confusion[i].length);    }  }  if (confusion.length != labels.size()) {    throw new IllegalArgumentException("Number of class labels does not match row dimension of confusion matrix.");  }  this.confusion=confusion;  this.labels=labels;}  }
class C{  public FeedFilter withFeedType(FeedType type){  FeedFilter result=new FeedFilter(this);  result.feedType=type;  return fix(result);}  }
class C{  public TenantOrgRestRep update(URI id,TenantUpdateParam input){  return client.put(TenantOrgRestRep.class,input,getIdUrl(),id);}  }
class C{  public static byte[] toBytes(ByteBuffer bb){  int length=bb.remaining();  byte[] result=new byte[length];  System.arraycopy(bb.array(),bb.arrayOffset() + bb.position(),result,0,length);  return result;}  }
class C{  protected void constructRationalRepresentation(){  double[] a=new double[order + 1];  double[] b=new double[order + 1];  a[0]=1.0;  for (int p=0; p < order; p++) {    Arrays.fill(b,0.0);    int i=0;    while (i <= p) {      b[i]+=a[i];      b[i + 1]+=k[p] * a[p - i];      i++;    }    System.arraycopy(b,0,a,0,p + 2);  }  Arrays.fill(b,0.0);  for (int i=0; i <= order; i++)   b[i]=a[order - i];  T=new Rational((new Polynomial(b)),(new Polynomial(a)));}  }
class C{  private static boolean allowedToExit(){  final int jobsCount=Env.JOBS.getJobsCount();  if (jobsCount > 0)   if (!GuiUtils.confirm((jobsCount == 1 ? "There is" : "There are") + Utils.plural(" %s running job%s! Are you sure you want to exit?",jobsCount)," ",GuiUtils.linkForAction("View Running Jobs...",Actions.RUNNING_JOBS)))   return false;  return true;}  }
class C{  public boolean containsValue(EObject originalASTNode){  return im2ast.containsValue(originalASTNode);}  }
class C{  public String keysTipText(){  return "For incremental loading a unique identiefer has to be specified." + "\nIf the query includes all columns of a table (SELECT *...) a primary key" + "\ncan be detected automatically depending on the JDBC driver. If that is not possible"+ "\nspecify the key columns here in a comma separated list.";}  }
class C{  public static DataSet readContinuous(File file,char delimiter) throws IOException {  return readInContinuousData(file,delimiter,Collections.singleton("MULT"));}  }
class C{  protected void stopJmxConnector(){  try {    if (jmxConnectorServer != null)     jmxConnectorServer.stop();  } catch (  IOException e) {    logger.warn("Unexpected error while shutting down JMX server",e);  }}  }
class C{  protected void addNamespacePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ScopedElement_namespace_feature"),getString("_UI_PropertyDescriptor_description","_UI_ScopedElement_namespace_feature","_UI_ScopedElement_type"),SGraphPackage.Literals.SCOPED_ELEMENT__NAMESPACE,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static boolean isNegativeInteger(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    int temp=Integer.parseInt(s);    if (temp < 0)     return true;    return false;  } catch (  Exception e) {    return false;  }}  }
class C{  public boolean isSetBinary_field(){  return this.binary_field != null;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static void quickSort1(float x[],int off,int len,FloatComparator comp){  if (len < SMALL) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && comp.compare(x[j - 1],x[j]) > 0; j--)     swap(x,j,j - 1);    return;  }  int m=off + len / 2;  if (len > SMALL) {    int l=off;    int n=off + len - 1;    if (len > MEDIUM) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s,comp);      m=med3(x,m - s,m,m + s,comp);      n=med3(x,n - 2 * s,n - s,n,comp);    }    m=med3(x,l,m,n,comp);  }  float v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    int comparison;    while (b <= c && (comparison=comp.compare(x[b],v)) <= 0) {      if (comparison == 0)       swap(x,a++,b);      b++;    }    while (c >= b && (comparison=comp.compare(x[c],v)) >= 0) {      if (comparison == 0)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   quickSort1(x,off,s,comp);  if ((s=d - c) > 1)   quickSort1(x,n - s,s,comp);}  }
class C{  public final TMessage header(){  return header;}  }
class C{  public Cuboid add(Vector3D other){  return new Cuboid(min.add(other),max.add(other));}  }
class C{  public boolean equals(MethodIdentifier o){  return o.method.equals(method) && Arrays.equals(args,o.args);}  }
class C{  public long messagingFilterCreate(long memPtr){  enter();  try {    return PlatformCallbackUtils.messagingFilterCreate(envPtr,memPtr);  }  finally {    leave();  }}  }
class C{  static void parseTextValue(Element element,ElementMetadata<?,?> metadata,Object value) throws ParseException {  if (metadata != null) {    metadata.parseValue(element,metadata,value);  } else {    element.setTextValue(value);  }}  }
class C{  public PieChartComponent(final String name){  super(name);  model=new PieChartModel();  model.defaultInit();  initializeAttributes();  addListener();}  }
class C{  protected static void registerAlias(Class<?> parent,String alias,String cname){  Entry e=data.get(parent);  assert (e != null);  e.addAlias(alias,cname);}  }
class C{  public boolean equals(Object obj){  if (obj == null || !(obj instanceof StringValue)) {    return false;  }  StringValue v=(StringValue)obj;  if (unitType != v.unitType) {    return false;  }  return value.equals(v.value);}  }
class C{  protected void process(List<String> messages){  String message=messages.get(messages.size() - 1);  this.firePropertyChange("information",new String("OK"),message);}  }
class C{  public FindBugsPreferences(BlueJ bluej){  this.bluej=bluej;  compileGroup=new ButtonGroup();  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  add(new JLabel("When FindBugs runs:"));  for (int i=0; i < radioList.length; i++) {    radioList[i]=new JRadioButton(radioDescription[i]);    radioList[i].setActionCommand(radioCommand[i]);    compileGroup.add(radioList[i]);    add(radioList[i]);  }  loadValues();}  }
class C{  public static final double newtonsToPounds(double newtons){  return newtons * NEWTON_TO_POUND;}  }
class C{  public DOMSignatureProperties(Element propsElem,XMLCryptoContext context) throws MarshalException {  Attr attr=propsElem.getAttributeNodeNS(null,"Id");  if (attr != null) {    id=attr.getValue();    propsElem.setIdAttributeNode(attr,true);  } else {    id=null;  }  NodeList nodes=propsElem.getChildNodes();  int length=nodes.getLength();  List<SignatureProperty> properties=new ArrayList<SignatureProperty>(length);  for (int i=0; i < length; i++) {    Node child=nodes.item(i);    if (child.getNodeType() == Node.ELEMENT_NODE) {      String name=child.getLocalName();      if (!name.equals("SignatureProperty")) {        throw new MarshalException("Invalid element name: " + name + ", expected SignatureProperty");      }      properties.add(new DOMSignatureProperty((Element)child,context));    }  }  if (properties.isEmpty()) {    throw new MarshalException("properties cannot be empty");  } else {    this.properties=Collections.unmodifiableList(properties);  }}  }
class C{  public static void main(String[] args){  MousePicking simulation=new MousePicking();  simulation.run();}  }
class C{  public Point2D forward(double lat,double lon,Point2D ret_val,boolean isRadians){  if (!isRadians) {    lon=Math.toRadians(lon);    lat=Math.toRadians(lat);  }  double lon_=wrapLongitude(lon - centerX);  double lat_=normalizeLatitude(lat);  int x=(int)ProjMath.roundAdjust(spps_x * lon_) - ul.x;  int y=(int)ProjMath.roundAdjust(-spps_y * lat_) + ul.y + oy;  ret_val.setLocation(x,y);  return ret_val;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerPluginInfo()) {      stack.push(pluggy);      return makeNetworkedCall(stack);    }    SageTVPlugin realPlug=sage.plugin.CorePluginManager.getInstance().getRealPlugin(pluggy.getId());    if (realPlug != null) {      if (stack.getUIMgr() != null) {        Catbert.uiContextThreadNames.set(stack.getUIMgr().getLocalUIClientName());      }      realPlug.resetConfig();    } else     Sage.putBoolean("sagetv_core_plugins/" + pluggy.getId() + "/reset",true);  }  return null;}  }
class C{  public void elementDecl(String name,String model) throws SAXException {}  }
class C{  public String print(String tab){  if (content instanceof RegExp) {    return tab + "type = " + type+ Out.NL+ tab+ "content :"+ Out.NL+ ((RegExp)content).print(tab + "  ");  } else   return tab + "type = " + type+ Out.NL+ tab+ "content :"+ Out.NL+ tab+ "  "+ content;}  }
class C{  private int parseInt(String[] ss,int ix,int dflt){  if (ss.length <= ix)   return dflt; else {    String s=ss[ix];    return s.isEmpty() ? dflt : Integer.parseInt(s);  }}  }
class C{  public boolean isClosed() throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  protected void restore(){  context.restore();}  }
class C{  public static void write(Path self,String text,String charset) throws IOException {  write(self,text,charset,false);}  }
class C{  private void addInput(byte[] in,int i,HashMap<String,Integer> urlToOffset){  if (_inInput) {    if (_inTypeAttr) {      _typeAttrLast=i;      _inTypeAttr=false;    }    if (_srcAttrFirst >= 0 && _typeAttrFirst >= 0 && isMatching(in,_typeAttrFirst + 1,IMAGE_TYPE)) {      ensureCapacity(INPUT_INFO_LEN);      _out[_outLen]=INPUT_KIND;      _out[_outLen + 1]=checkDuplicates(in,_out,urlToOffset,_srcAttrFirst,_srcAttrLast,_outLen + 1);      _out[_outLen + INPUT_FIRST]=_inputFirst;      _out[_outLen + INPUT_LAST]=i + 1;      _out[_outLen + INPUT_SRC_FIRST]=_srcAttrFirst;      _out[_outLen + INPUT_SRC_LAST]=_srcAttrLast;      _outLen+=INPUT_INFO_LEN;    }    _inInput=false;    _inputFirst=(-1);    _typeAttrFirst=(-1);    _typeAttrLast=(-1);    _srcAttrFirst=(-1);    _srcAttrLast=(-1);  }}  }
class C{  private String clippedToolTip(int row,int col,int colModel){  TableColumn tc=getColumnModel().getColumn(col);  int columnWidth=tc.getWidth();  int dataWidth=getDataWidth(row,colModel);  if (columnWidth < dataWidth) {    tips=CLIPPED_TIP;    stripHTMLFromTips();    return ((DataLineModel<?,?>)dataModel).get(row).toString() + col;  } else {    tips=EMPTY_STRING_ARRAY;    return null;  }}  }
class C{  public double scoreDag(Graph dag){  buildIndexing(dag.getNodes());  double score=0.0;  for (  Node y : dag.getNodes()) {    Set<Node> parents=new HashSet<>(dag.getParents(y));    int parentIndices[]=new int[parents.size()];    Iterator<Node> pi=parents.iterator();    int count=0;    while (pi.hasNext()) {      Node nextParent=pi.next();      parentIndices[count++]=hashIndices.get(nextParent);    }    int yIndex=hashIndices.get(y);    score+=fgsScore.localScore(yIndex,parentIndices);  }  return score;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.313 -0500",hash_original_method="31234679312EA392475BCCB545DA6E40",hash_generated_method="3B04045FA1A9995CA2B6266B7957485C") protected void notifyWaitingThread(RouteSpecificPool rospl){  WaitingThread waitingThread=null;  poolLock.lock();  try {    if ((rospl != null) && rospl.hasThread()) {      if (log.isDebugEnabled()) {        log.debug("Notifying thread waiting on pool" + " [" + rospl.getRoute() + "]");      }      waitingThread=rospl.nextThread();    } else     if (!waitingThreads.isEmpty()) {      if (log.isDebugEnabled()) {        log.debug("Notifying thread waiting on any pool");      }      waitingThread=waitingThreads.remove();    } else     if (log.isDebugEnabled()) {      log.debug("Notifying no-one, there are no waiting threads");    }    if (waitingThread != null) {      waitingThread.wakeup();    }  }  finally {    poolLock.unlock();  }}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public Builder append(int arrayIndex){  refTokens.add(String.valueOf(arrayIndex));  return this;}  }
class C{  public Vertex parseAIML(File file,boolean parseAsStateMachine,boolean createStates,boolean pin,boolean indexStatic,Vertex stateMachine,String encoding,Network network){  try {    String text=Utils.loadTextFile(new FileInputStream(file),encoding,MAX_FILE_SIZE);    return parseAIML(text,parseAsStateMachine,createStates,pin,indexStatic,stateMachine,network);  } catch (  IOException exception) {    throw new SelfParseException("Parsing error occurred",exception);  }}  }
class C{  public static void login(Context context,String productKey,String vendorKey,String mobile,String mail,String password,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  if (!TextUtils.isEmpty(productKey)) {    headerList.add(new BasicHeader(ApiKey.HeadKey.PRODUCT_KEY,productKey));  }  if (!TextUtils.isEmpty(vendorKey)) {    headerList.add(new BasicHeader(ApiKey.HeadKey.VENDOR_KEY,vendorKey));  }  try {    String jsonParams="";    JSONStringer jsonStringer=new JSONStringer().object();    if (!TextUtils.isEmpty(mobile)) {      jsonStringer.key(ApiKey.MOBILE).value(mobile);    } else {      jsonStringer.key(ApiKey.MAIL).value(mail);    }    jsonStringer.key(ApiKey.PASSWORD).value(password);    jsonParams=jsonStringer.endObject().toString();    if (DEBUG) {      LogUtils.d(jsonParams);    }    post(context,getApiServerUrl() + USER_LOGIN,headerList,jsonParams,responseHandler);  } catch (  JSONException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }catch (  UnsupportedEncodingException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }}  }
class C{  public FacebookException(String message){  super(message);}  }
class C{  public static boolean hasLollipop(){  return Build.VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP;}  }
class C{  public void removeCertificate(@NotNull X509Certificate certificate){  CertificateWrapper wrapper=new CertificateWrapper(certificate);  myCertificates.remove(wrapper.getSubjectField(ORGANIZATION),wrapper);  queueUpdateFrom(RootDescriptor.ROOT,true);}  }
class C{  public String toString(){  if (valid) {    StringBuffer sb=new StringBuffer();    if (filePrefix != null)     sb.append(filePrefix).append(".");    sb.append(String.format("%06d:%016d",fileIndex,offset));    if (sessionId > -1)     sb.append(";").append(sessionId);    return sb.toString();  } else   return rawEventId;}  }
class C{  static byte[] handleHexString(byte[] newValues,DecryptionFactory decryptor,String ref){  String nextValue;  String str=new String(newValues);  final byte[] IDbytes=new byte[str.length() / 2];  int ptr=0;  for (int ii=0; ii < newValues.length; ii+=2) {    if (ii + 2 > newValues.length) {      continue;    }    while (str.charAt(ii) == '\n' || str.charAt(ii) == ' ') {      ii++;    }    nextValue=str.substring(ii,ii + 2);    IDbytes[ptr]=(byte)Integer.parseInt(nextValue,16);    ptr++;  }  newValues=new byte[ptr];  System.arraycopy(IDbytes,0,newValues,0,ptr);  if (decryptor != null) {    byte[] decryptedValue=null;    try {      decryptedValue=decryptor.decryptString(IDbytes,ref);    } catch (    PdfSecurityException ex) {      LogWriter.writeLog("Exception: " + ex.getMessage());    }    newValues=(decryptedValue == null) ? IDbytes : decryptedValue;  }  return newValues;}  }
class C{  Sequence intArray2Sequence(int[] seq,NodeRef node){  String sSeq="" + seq[0];  return new Sequence(m_tree.getNodeTaxon(node),sSeq);}  }
class C{  protected BooleanLiteralImpl(){  super();}  }
class C{  public boolean isRunning(){  return STATE_Running.equals(m_state);}  }
class C{  public Tradingdays findTradingdaysByDateRange(ZonedDateTime startDate,ZonedDateTime endDate){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Tradingdays tradingdays=new Tradingdays();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Tradingday> query=builder.createQuery(Tradingday.class);    Root<Tradingday> from=query.from(Tradingday.class);    query.select(from);    query.orderBy(builder.desc(from.get("open")));    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != startDate) {      Predicate predicate=builder.greaterThanOrEqualTo(from.get("open").as(ZonedDateTime.class),startDate);      predicates.add(predicate);    }    if (null != endDate) {      Predicate predicate=builder.lessThanOrEqualTo(from.get("open").as(ZonedDateTime.class),endDate);      predicates.add(predicate);    }    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<Tradingday> typedQuery=entityManager.createQuery(query);    List<Tradingday> items=typedQuery.getResultList();    for (    Tradingday tradingday : items) {      tradingdays.add(tradingday);      for (      Tradestrategy tradestrategy : tradingday.getTradestrategies()) {        tradestrategy.getTradeOrders().size();        tradestrategy.getPortfolio().getPortfolioAccounts().size();        tradestrategy.getStrategy().getIndicatorSeries().size();      }    }    entityManager.getTransaction().commit();    return tradingdays;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public String toLowerCase(){  return value.toLowerCase();}  }
class C{  public void waitUntilDestroyed() throws InterruptedException {  while (true) {    boolean interrupted=Thread.interrupted();    try {      this.untilDestroyed.await();      break;    } catch (    InterruptedException e) {      interrupted=true;      throwIfInterruptible(e);    } finally {      if (interrupted)       Thread.currentThread().interrupt();    }  }}  }
class C{  private void checkParity(int section,int start,int end){  mCRC[section]=detectAndCorrect(start,end);}  }
class C{  static boolean isJFIFcompliant(ImageTypeSpecifier imageType,boolean input){  ColorModel cm=imageType.getColorModel();  if (cm.hasAlpha()) {    return false;  }  int numComponents=imageType.getNumComponents();  if (numComponents == 1) {    return true;  }  if (numComponents != 3) {    return false;  }  if (input) {    if (cm.getColorSpace().getType() == ColorSpace.TYPE_RGB) {      return true;    }  } else {    if (cm.getColorSpace().getType() == ColorSpace.TYPE_YCbCr) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.520 -0500",hash_original_method="7278F7A930851B1FF266754B78180AE2",hash_generated_method="24B3530AF7E11112C98142AB28B31EE8") public SipUri sipURL(boolean inBrackets) throws ParseException {  if (debug)   dbg_enter("sipURL");  SipUri retval=new SipUri();  Token nextToken=lexer.peekNextToken();  int sipOrSips=TokenTypes.SIP;  String scheme=TokenNames.SIP;  if (nextToken.getTokenType() == TokenTypes.SIPS) {    sipOrSips=TokenTypes.SIPS;    scheme=TokenNames.SIPS;  }  try {    lexer.match(sipOrSips);    lexer.match(':');    retval.setScheme(scheme);    int startOfUser=lexer.markInputPosition();    String userOrHost=user();    String passOrPort=null;    if (lexer.lookAhead() == ':') {      lexer.consume(1);      passOrPort=password();    }    if (lexer.lookAhead() == '@') {      lexer.consume(1);      retval.setUser(userOrHost);      if (passOrPort != null)       retval.setUserPassword(passOrPort);    } else {      lexer.rewindInputPosition(startOfUser);    }    HostNameParser hnp=new HostNameParser(this.getLexer());    HostPort hp=hnp.hostPort(false);    retval.setHostPort(hp);    lexer.selectLexer("charLexer");    while (lexer.hasMoreChars()) {      if (lexer.lookAhead(0) != ';' || !inBrackets)       break;      lexer.consume(1);      NameValue parms=uriParam();      if (parms != null)       retval.setUriParameter(parms);    }    if (lexer.hasMoreChars() && lexer.lookAhead(0) == '?') {      lexer.consume(1);      while (lexer.hasMoreChars()) {        NameValue parms=qheader();        retval.setQHeader(parms);        if (lexer.hasMoreChars() && lexer.lookAhead(0) != '&')         break; else         lexer.consume(1);      }    }    return retval;  }  finally {    if (debug)     dbg_leave("sipURL");  }}  }
class C{  private void startIntermediateMerging(File[] intermediateFiles){  File file=new File(this.tempFileLocation + File.separator + this.tableName+ System.nanoTime()+ CarbonCommonConstants.MERGERD_EXTENSION);  FileMergerParameters parameters=new FileMergerParameters();  parameters.setIsNoDictionaryDimensionColumn(noDictionaryDimnesionColumn);  parameters.setDimColCount(dimColCount);  parameters.setComplexDimColCount(complexDimColCount);  parameters.setMeasureColCount(measureColCount);  parameters.setIntermediateFiles(intermediateFiles);  parameters.setFileReadBufferSize(fileBufferSize);  parameters.setFileWriteBufferSize(fileBufferSize);  parameters.setOutFile(file);  parameters.setCompressionEnabled(isSortFileCompressionEnabled);  parameters.setNoOfRecordsInCompression(sortTempFileNoOFRecordsInCompression);  parameters.setPrefetch(prefetch);  parameters.setPrefetchBufferSize(bufferSize);  parameters.setAggType(aggType);  parameters.setNoDictionaryCount(noDictionaryCount);  IntermediateFileMerger merger=new IntermediateFileMerger(parameters);  executorService.submit(merger);}  }
class C{  public int readAll(byte[] buf,int offset,int length) throws IOException {  int readOffset=_readOffset;  int readLength=_readLength;  int i=0;  while (true) {    int sublen=Math.min(length - i,readLength - readOffset);    System.arraycopy(_readBuffer,readOffset,buf,offset + i,sublen);    i+=sublen;    if (length <= i) {      _readOffset=readOffset + sublen;      return i;    } else {      if (!readBuffer()) {        return i == 0 ? -1 : i;      }      readOffset=_readOffset;      readLength=_readLength;    }  }}  }
class C{  @Nonnull public static SourceLineAnnotation fromVisitedInstruction(ClassContext classContext,MethodGen methodGen,String sourceFile,@Nonnull InstructionHandle handle){  LineNumberTable table=methodGen.getLineNumberTable(methodGen.getConstantPool());  String className=methodGen.getClassName();  int bytecodeOffset=handle.getPosition();  if (table == null) {    return createUnknown(className,sourceFile,bytecodeOffset,bytecodeOffset);  }  int lineNumber=table.getSourceLine(handle.getPosition());  return new SourceLineAnnotation(className,sourceFile,lineNumber,lineNumber,bytecodeOffset,bytecodeOffset);}  }
class C{  private static <T>void assertCollectionEqualsNoOrder(Collection<T> expected,Collection<T> actual){  String msg=String.format("expected=%s, actual=%s",expected.toString(),actual.toString());  assertEquals(msg,expected.size(),actual.size());  for (  T e : expected) {    if (!actual.contains(e)) {      msg=String.format("Expected element %s not found in " + "actual. expected=%s, actual=%s",e,expected,actual);      fail(msg);    }  }}  }
class C{  public ServiceSchemeException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static void copyString(Reader source,OutputStream target) throws IOException {  char[] buff=new char[Constants.IO_BUFFER_SIZE];  Data d=new Data(null,new byte[3 * Constants.IO_BUFFER_SIZE]);  while (true) {    int l=source.read(buff);    if (l < 0) {      break;    }    d.writeStringWithoutLength(buff,l);    target.write(d.data,0,d.pos);    d.reset();  }}  }
class C{  double inverseDistanceWeighting(double xCoord,double yCoord,double exponent){  return fourNeighborsIDW(this.sg,xCoord,yCoord,exponent);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static String doCopyFileAction(Configuration conf,SimpleFileStatus srcFileStatus,FileSystem srcFs,String dstDir,FileSystem dstFs,Path tmpDirPath,Progressable progressable,boolean forceUpdate,String identifier){  int retry=3;  String lastError=null;  while (retry > 0) {    try {      Path srcPath=new Path(srcFileStatus.getFullPath());      if (!srcFs.exists(srcPath)) {        LOG.info("Src does not exist. " + srcFileStatus.getFullPath());        return "Src does not exist. " + srcFileStatus.getFullPath();      }      FileStatus srcStatus=srcFs.getFileStatus(srcPath);      final FSDataInputStream inputStream=srcFs.open(srcPath);      Path dstPath=new Path(dstDir,srcFileStatus.getFileName());      if (dstFs.exists(dstPath)) {        FileStatus dstStatus=dstFs.getFileStatus(dstPath);        if (!forceUpdate && srcStatus.getLen() == dstStatus.getLen()) {          LOG.info("dst already exists. " + dstPath.toString());          return "dst already exists. " + dstPath.toString();        }      }      Path dstParentPath=new Path(dstDir);      if (!dstFs.exists(dstParentPath) && !dstFs.mkdirs(dstParentPath)) {        LOG.info("Could not create directory: " + dstDir);        return "Could not create directory: " + dstDir;      }      Path tmpDstPath=new Path(tmpDirPath,"__tmp__copy__file_" + identifier + "_"+ srcFileStatus.getFileName()+ "."+ System.currentTimeMillis());      if (dstFs.exists(tmpDstPath)) {        dstFs.delete(tmpDstPath,false);      }      FSDataOutputStream outputStream=dstFs.create(tmpDstPath,progressable);      IOUtils.copyBytes(inputStream,outputStream,conf);      inputStream.close();      outputStream.close();      if (forceUpdate && dstFs.exists(dstPath)) {        dstFs.delete(dstPath,false);      }      if (!FsUtils.checksumsMatch(conf,srcPath,tmpDstPath).map(null).orElse(true)) {        LOG.warn(String.format("Not renaming %s to %s since checksums do not match between " + "%s and %s",tmpDstPath,dstPath,srcPath,tmpDstPath));        continue;      }      dstFs.rename(tmpDstPath,dstPath);      dstFs.setTimes(dstPath,srcStatus.getModificationTime(),srcStatus.getAccessTime());      LOG.info(dstPath.toString() + " file copied");      progressable.progress();      return null;    } catch (    IOException e) {      LOG.info("Got an exception!",e);      lastError=e.getMessage();      --retry;    }  }  return lastError;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:02.373 -0500",hash_original_method="5DAD3F148ACCC07E280B84A8DEBF40F1",hash_generated_method="9BE834C01C8A098E09C0FD53B58DEE38") public IssuingDistributionPoint(DistributionPointName distributionPoint,ReasonFlags onlySomeReasons){  this.distributionPoint=distributionPoint;  this.onlySomeReasons=onlySomeReasons;}  }
class C{  private void doHasStmt(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (!isReadable(getServletContext(),req,resp)) {    return;  }  final boolean includeInferred=getBooleanValue(req,INCLUDE_INFERRED,true);  final Resource s;  final URI p;  final Value o;  final Resource[] c;  try {    s=EncodeDecodeValue.decodeResource(req.getParameter("s"));    p=EncodeDecodeValue.decodeURI(req.getParameter("p"));    o=EncodeDecodeValue.decodeValue(req.getParameter("o"));    c=decodeContexts(req,"c");  } catch (  IllegalArgumentException ex) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,ex.getLocalizedMessage());    return;  }  if (log.isInfoEnabled())   log.info("HASSTMT: access path: (includeInferred=" + includeInferred + ", s="+ s+ ", p="+ p+ ", o="+ o+ ", c="+ Arrays.toString(c)+ ")");  try {    submitApiTask(new HasStmtTask(req,resp,getNamespace(req),getTimestamp(req),includeInferred,s,p,o,c)).get();  } catch (  Throwable t) {    launderThrowable(t,resp,"HASSTMT: access path: (includeInferred=" + includeInferred + ", s="+ s+ ", p="+ p+ ", o="+ o+ ", c="+ Arrays.toString(c)+ ")");  }}  }
class C{  public boolean isSame(String s1,String s2){  if (s1 == null)   return s2 == null; else   if (s2 == null)   return false; else   return s1.equals(s2);}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  TabularData other;  try {    other=(TabularData)obj;  } catch (  ClassCastException e) {    return false;  }  if (!this.getTabularType().equals(other.getTabularType())) {    return false;  }  if (this.size() != other.size()) {    return false;  }  for (  CompositeData value : dataMap.values()) {    if (!other.containsValue(value)) {      return false;    }  }  return true;}  }
class C{  public final int lastIndexOf(char c){  return lastIndexOf(c,_length - 1);}  }
class C{  public static boolean[] shortToBinary(final short src,final int srcPos,final boolean[] dst,final int dstPos,final int nBools){  if (0 == nBools) {    return dst;  }  if (nBools - 1 + srcPos >= 16) {    throw new IllegalArgumentException("nBools-1+srcPos is greather or equal to than 16");  }  int shift=0;  assert ((nBools - 1) < 16 - srcPos);  for (int i=0; i < nBools; i++) {    shift=i + srcPos;    dst[dstPos + i]=((0x1 & (src >> shift)) != 0);  }  return dst;}  }
class C{  public void applyFromAppWidgetProviderInfo(LauncherAppWidgetProviderInfo info,WidgetPreviewLoader loader){  InvariantDeviceProfile profile=LauncherAppState.getInstance().getInvariantDeviceProfile();  mInfo=info;  mWidgetName.setText(AppWidgetManagerCompat.getInstance(getContext()).loadLabel(info));  int hSpan=Math.min(info.spanX,profile.numColumns);  int vSpan=Math.min(info.spanY,profile.numRows);  mWidgetDims.setText(String.format(mDimensionsFormatString,hSpan,vSpan));  mWidgetPreviewLoader=loader;}  }
class C{  public String toString(){  return this.encode();}  }
class C{  public int supportedSpeedModes(){  return (DccThrottle.SpeedStepMode128 | DccThrottle.SpeedStepMode28);}  }
class C{  public void fatal(String msg){  innerLog(Level.FATAL,null,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public MalformedURLException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  private static SelectResults sizeSortedIntersection(SelectResults small,SelectResults large,ExecutionContext contextOrNull){  boolean smallModifiable=small.isModifiable() && (isBag(small) || !isBag(large));  boolean largeModifiable=large.isModifiable() && (isBag(large) || !isBag(small));  if (smallModifiable) {    try {      for (Iterator itr=small.iterator(); itr.hasNext(); ) {        Object element=itr.next();        int count=large.occurrences(element);        if (small.occurrences(element) > count) {          itr.remove();        }      }      return small;    } catch (    UnsupportedOperationException e1) {    }  }  if (largeModifiable) {    try {      for (Iterator itr=large.iterator(); itr.hasNext(); ) {        Object element=itr.next();        int count=small.occurrences(element);        if (large.occurrences(element) > count) {          itr.remove();        }      }      return large;    } catch (    UnsupportedOperationException e2) {    }  }  SelectResults rs;  if (contextOrNull != null) {    rs=contextOrNull.isDistinct() ? new ResultsSet(small) : new ResultsBag(small,contextOrNull.getCachePerfStats());  } else {    rs=new ResultsBag(small,null);  }  for (Iterator itr=rs.iterator(); itr.hasNext(); ) {    Object element=itr.next();    int count=large.occurrences(element);    if (rs.occurrences(element) > count) {      itr.remove();    }  }  return rs;}  }
class C{  private void startHeartbeatTimeout(){  LOGGER.debug("{} - Starting heartbeat timer",context.getCluster().member().address());  resetHeartbeatTimeout();}  }
class C{  @Override protected boolean includeOperation(Method method,String beanKey){  Method interfaceMethod=findJmxMethod(method,beanKey);  return interfaceMethod != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.874 -0400",hash_original_method="FDD74557385AB5C43DFFBCC40B0F400F",hash_generated_method="6E6BE198B271B0C8D8C3D445653B788B") public static boolean compileClass(Class<?> classToCompile){  return false;}  }
class C{  public boolean requiresTunnel(){  return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;}  }
class C{  public PolygonDescription(final List<? extends GeoPoint> points){  this(points,new ArrayList<>());}  }
class C{  public ResponseOnSingeRequest executeAndGenResponse(ChannelExec channel){  ResponseOnSingeRequest sshResponse=new ResponseOnSingeRequest();  InputStream in=null;  OutputStream outputStreamStdErr=new ByteArrayOutputStream();  StringBuilder sbStdOut=new StringBuilder();  try {    in=channel.getInputStream();    channel.setErrStream(outputStreamStdErr);    byte[] tmp=new byte[ParallecGlobalConfig.sshBufferSize];    while (true) {      while (in.available() > 0) {        int i=in.read(tmp,0,ParallecGlobalConfig.sshBufferSize);        if (i < 0)         break;        sbStdOut.append(new String(tmp,0,i));      }      if (channel.isClosed()) {        if (in.available() > 0)         continue;        sshResponse.setFailObtainResponse(false);        int exitStatus=channel.getExitStatus();        sshResponse.setStatusCodeInt(exitStatus);        sshResponse.setStatusCode(Integer.toString(exitStatus));        break;      }      Thread.sleep(ParallecGlobalConfig.sshSleepMIllisBtwReadBuffer);    }    sshResponse.setResponseBody(sbStdOut.toString());    sshResponse.setErrorMessage(outputStreamStdErr.toString());    sshResponse.setReceiveTimeNow();  } catch (  Exception t) {    throw new RuntimeException(t);  }  return sshResponse;}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,byte[] value){  if (extras == null) {    extras=new Bundle();  }  extras.putByteArray(name,value);  return this;}  }
class C{  public boolean hasDisplayName(){  return super.hasAttribute(DISPLAY_NAME);}  }
class C{  private void process(Field field,Annotation label,Annotation[] list){  Contact contact=new FieldContact(field,label,list);  Object key=new FieldKey(field);  if (!field.isAccessible()) {    field.setAccessible(true);  }  insert(key,contact);}  }
class C{  protected void restoreState(){  updateMatrix=true;}  }
class C{  public void visitMultiANewArrayInsn(String desc,int dims){  if (mv != null) {    mv.visitMultiANewArrayInsn(desc,dims);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:57.033 -0500",hash_original_method="13C71D739499D98499F08E0B68D72954",hash_generated_method="3B4139C4D3E5EEAC06EE22EAA7358A3F") public int[] startSubnegotiationRemote(){  return null;}  }
class C{  private int drawLabelStringValign(Graphics g,Label l,String str,int x,int y,int iconStringHGap,int iconHeight,int textSpaceW,int fontHeight){switch (l.getVerticalAlignment()) {case Component.TOP:    return drawLabelString(g,l,str,x,y,textSpaceW);case Component.CENTER:  return drawLabelString(g,l,str,x,y + iconHeight / 2 - fontHeight / 2,textSpaceW);default :return drawLabelString(g,l,str,x,y + iconStringHGap,textSpaceW);}}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  return list(null,null);}  }
class C{  public static long abs(long l){  return (l < 0) ? -l : l;}  }
class C{  protected synchronized void notifyStatisticsNotificationListeners(List<EvaluationStatistics> stats){  StatisticsNotificationEvent e;  if (m_StatisticsNotificationListeners == null)   return;  e=new StatisticsNotificationEvent(this,stats);  for (  StatisticsNotificationListener l : m_StatisticsNotificationListeners)   l.statisticsAvailable(e);}  }
class C{  private StringBuilder makeDescription(Collection<Relation<?>> relations,DBIDRef id){  StringBuilder buf=new StringBuilder();  for (  Relation<?> rel : relations) {    Object o=rel.get(id);    if (o == null) {      continue;    }    String s=o.toString();    if (s != null) {      if (buf.length() > 0) {        buf.append("<br />");      }      buf.append(s);    }  }  return buf;}  }
class C{  public Id<ActivityFacility> sampleBiasedOriginNode(String activityType){  return this.sampleBiasedOriginNode(activityType,MatsimRandom.getRandom());}  }
class C{  public static int nextClothColor(int data){switch (data) {case ClothColor.ID.WHITE:    return ClothColor.ID.LIGHT_GRAY;case ClothColor.ID.LIGHT_GRAY:  return ClothColor.ID.GRAY;case ClothColor.ID.GRAY:return ClothColor.ID.BLACK;case ClothColor.ID.BLACK:return ClothColor.ID.BROWN;case ClothColor.ID.BROWN:return ClothColor.ID.RED;case ClothColor.ID.RED:return ClothColor.ID.ORANGE;case ClothColor.ID.ORANGE:return ClothColor.ID.YELLOW;case ClothColor.ID.YELLOW:return ClothColor.ID.LIGHT_GREEN;case ClothColor.ID.LIGHT_GREEN:return ClothColor.ID.DARK_GREEN;case ClothColor.ID.DARK_GREEN:return ClothColor.ID.CYAN;case ClothColor.ID.CYAN:return ClothColor.ID.LIGHT_BLUE;case ClothColor.ID.LIGHT_BLUE:return ClothColor.ID.BLUE;case ClothColor.ID.BLUE:return ClothColor.ID.PURPLE;case ClothColor.ID.PURPLE:return ClothColor.ID.MAGENTA;case ClothColor.ID.MAGENTA:return ClothColor.ID.PINK;case ClothColor.ID.PINK:return ClothColor.ID.WHITE;}return ClothColor.ID.WHITE;}  }
class C{  public void files(int numberOfFiles,long totalSize){  this.numberOfFiles=numberOfFiles;  this.totalSize=totalSize;}  }
class C{  private Pair<String,Boolean> describeRain(Calendar calendar,int temperatureMod){  int month=calendar.get(Calendar.MONTH);  month=10 * Math.abs(month - 6);  int hour=calendar.get(Calendar.HOUR_OF_DAY);  hour=Math.abs((hour + 21) % 24 - 12) / 2;  int temp=temperature.getValue() - hour - month + (temperatureMod * 10);  LOGGER.debug("Modified temp: " + temp + " zone modifier: "+ temperatureMod);  if (temp <= -30) {    return new Pair<String,Boolean>("snow",Boolean.FALSE);  }  return new Pair<String,Boolean>("rain",temp >= -5 && thunder.getDescription(0) != null);}  }
class C{  private Discrete(double... p){  this.p=convert(p);}  }
class C{  public Object clone(){  try {    ZipEntry e=(ZipEntry)super.clone();    e.extra=(extra == null) ? null : extra.clone();    return e;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public void displayTour(Tour tour,Paint paint){synchronized (tours) {    tours.put(tour,new TourDisplaySetting(paint));  }  if (autoRepaint) {    repaint();  }}  }
class C{  public void testConstrStringExceptionExponentLessIntegerMin(){  String a="-238768.787678287e-214748364767876";  try {    new BigDecimal(a);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  @Override public int size(){  return 0;}  }
class C{  public static void UF10(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  int count3=0;  double sum1=0.0;  double sum2=0.0;  double sum3=0.0;  double yj;  double hj;  for (int j=3; j <= nx; j++) {    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);    hj=4.0 * yj * yj - Math.cos(8.0 * PI * yj) + 1.0;    if (j % 3 == 1) {      sum1+=hj;      count1++;    } else     if (j % 3 == 2) {      sum2+=hj;      count2++;    } else {      sum3+=hj;      count3++;    }  }  f[0]=Math.cos(0.5 * PI * x[0]) * Math.cos(0.5 * PI * x[1]) + 2.0 * sum1 / (double)count1;  f[1]=Math.cos(0.5 * PI * x[0]) * Math.sin(0.5 * PI * x[1]) + 2.0 * sum2 / (double)count2;  f[2]=Math.sin(0.5 * PI * x[0]) + 2.0 * sum3 / (double)count3;}  }
class C{  public PatternReplaceFilterFactory(Map<String,String> args){  super(args);  pattern=getPattern(args,"pattern");  replacement=get(args,"replacement");  replaceAll="all".equals(get(args,"replace",Arrays.asList("all","first"),"all"));  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public synchronized void close(){  if (LOGGER.isDebugEnabled())   LOGGER.logInfo(this + ": close...");  if (connectionPool != null) {    connectionPool.destroy();    connectionPool=null;  }  try {    IntraVmObjectRegistry.removeResource(getUniqueResourceName());  } catch (  NameNotFoundException e) {    if (LOGGER.isTraceEnabled())     LOGGER.logTrace(this + ": error removing from JNDI",e);  }  RecoverableResource res=Configuration.getResource(getUniqueResourceName());  if (res != null) {    Configuration.removeResource(getUniqueResourceName());    res.close();  }  if (LOGGER.isTraceEnabled())   LOGGER.logTrace(this + ": close done.");}  }
class C{  public static void init() throws Exception {  RuntimeSingleton.init();}  }
class C{  public static IgfsDirectoryInfo createDirectory(IgniteUuid id,@Nullable Map<String,IgfsListingEntry> listing,@Nullable Map<String,String> props){  long time=System.currentTimeMillis();  return createDirectory(id,listing,props,time,time);}  }
class C{  public static boolean isAppleKeychainSupported(){  return Security.getProvider(APPLE.jce()) != null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.464 -0500",hash_original_method="BEDC7093698B9136E99447F456E9608C",hash_generated_method="CDE373DF2B92F0C86FB3B28296D008D6") public void prepareForInsert(){  mPreparedStatement=getStatement(false);  mPreparedStatement.clearBindings();}  }
class C{  public ActionBarSearchHandler enableAutoCompletion(){  mAutoCompletionEnabled=true;  return this;}  }
class C{  protected void collectDependent(String dependencyClassName,Map<String,CharSequence> dependentSources) throws IOException {  TimestampClass removedClass=javaClassLoader.proxyClassLoader.removeFromCache(dependencyClassName);  if (removedClass != null) {    for (    String dependentName : removedClass.dependent) {      dependentSources.put(dependentName,sourceProvider.getSourceString(dependentName));      addDependency(dependentName,dependencyClassName);      collectDependent(dependentName,dependentSources);    }  }}  }
class C{  public void close(){  try {    file.close();  } catch (  IOException ignore) {  }}  }
class C{  public static int indexOf(int[] array,int value,int startIndex,int endIndex){  for (int i=startIndex; i < endIndex; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  public boolean removeScriptChangeEventListener(ScriptsChangeEventListener listener){  return ListenerRegistration.removeFromList(listener,scriptChangeListeners);}  }
class C{  public SocketConnection createSecureSocketClientConnection(){  return new AndroidSecureSocketConnection(mRcsSettings);}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSetMultimap<K,V> of(){  return (ImmutableSetMultimap<K,V>)EmptyImmutableSetMultimap.INSTANCE;}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  byte[] rotatedData=new byte[data.length];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++)     rotatedData[x * height + height - y - 1]=data[x + y * width];  }  int tmp=width;  width=height;  height=tmp;  PlanarYUVLuminanceSource source=CameraManager.get().buildLuminanceSource(rotatedData,width,height);  BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));  try {    rawResult=multiFormatReader.decodeWithState(bitmap);  } catch (  ReaderException re) {  } finally {    multiFormatReader.reset();  }  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode (" + (end - start) + " ms):\n"+ rawResult.toString());    Message message=Message.obtain(activity.getHandler(),R.id.decode_succeeded,rawResult);    Bundle bundle=new Bundle();    bundle.putParcelable(DecodeThread.BARCODE_BITMAP,source.renderCroppedGreyscaleBitmap());    message.setData(bundle);    message.sendToTarget();  } else {    Message message=Message.obtain(activity.getHandler(),R.id.decode_failed);    message.sendToTarget();  }}  }
class C{  public static FilterResult includedIf(boolean included){  return includedIf(included,null,null);}  }
class C{  private boolean validate(InputNode node,Class type) throws Exception {  while (true) {    InputNode next=node.getNext();    if (next == null) {      return true;    }    root.validate(next);  }}  }
class C{  public Option addArgument(String opt,String longOpt,boolean hasArg,String description,boolean required){  Option option=new Option(opt,longOpt,hasArg,description);  return addArgument(option,required);}  }
class C{  public static boolean isChanged(StringSet set1,StringSet set2){  return !getRemoved(set1,set2).isEmpty() || !getRemoved(set2,set1).isEmpty();}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Integer> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        Drawable drawable=context.getResources().getDrawable(entry.getValue());        drawable.setBounds(0,0,50,50);        ImageSpan imageSpan=new ImageSpan(drawable,ImageSpan.ALIGN_BOTTOM);        spannable.setSpan(imageSpan,matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);      }    }  }  return hasChanges;}  }
class C{  @Override public boolean onScale(ScaleGestureDetector detector){  return false;}  }
class C{  public static FillLayout createMarginlessFillLayout(){  FillLayout result=new FillLayout();  result.marginHeight=0;  result.marginWidth=0;  result.spacing=0;  result.type=SWT.HORIZONTAL;  return result;}  }
class C{  public static String correctFileName(String f){  f=f.replace('\\','/');  if (f.startsWith("/")) {    f=f.substring(1);  }  return f;}  }
class C{  public boolean isGeneric(){  return false;}  }
class C{  public Control move(List<String> urls,String newDirPath,OnMoveDownloadFilesListener onMoveDownloadFilesListener){  if (mMoveControl != null && !mMoveControl.isStopped()) {    return mMoveControl;  }  MoveDownloadFilesTask moveDownloadFilesTask=new MoveDownloadFilesTask(urls,newDirPath,mTaskEngine,mDownloadFileMover,mDownloadTaskPauseable);  moveDownloadFilesTask.setOnMoveDownloadFilesListener(onMoveDownloadFilesListener);  addAndRunTask(moveDownloadFilesTask);  mMoveControl=new MoveControl(moveDownloadFilesTask);  return mMoveControl;}  }
class C{  InterfaceAddress(Inet4Address address,Inet4Address broadcastAddress,Inet4Address mask){  this.address=address;  this.broadcastAddress=broadcastAddress;  this.prefixLength=countPrefixLength(mask);}  }
class C{  private void doUpdate() throws PageException, SearchException, IOException {  required("index",action,"collection",collection);  required("index",action,"key",key);  if (type == -1)   type=(query == null) ? SearchIndex.TYPE_FILE : SearchIndex.TYPE_CUSTOM;  if (type == SearchIndex.TYPE_CUSTOM) {    required("index",action,"body",body);  }  IndexResult result;  result=collection.index(pageContext,key,type,urlpath,title,body,language,extensions,query,recurse,categoryTree,category,timeout,custom1,custom2,custom3,custom4);  if (!StringUtil.isEmpty(status))   pageContext.setVariable(status,toStruct(result));}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:56.912 -0400",hash_original_method="C940420702EC6CB67ACCB966A7226BA0",hash_generated_method="074625E39B68E2CEB9C760ACE5F6FC21") public FilterFunctionEnvironment(){  super(null);}  }
class C{  public boolean handleIncompatibleReturnType(ReturnStatement returnStatement,ClassNode inferredReturnType){  return false;}  }
class C{  public static int scale(double value){  return (Integer.MAX_VALUE - 2) * (int)Math.ceil((value / (value + 1.0)));}  }
class C{  @Nullable public String nodeId(){  return nodeId;}  }
class C{  public Instruction(final INaviInstruction instruction){  m_instruction=Preconditions.checkNotNull(instruction,"Error: Instruction argument can't be null");  for (  final COperandTree operand : m_instruction.getOperands()) {    m_operands.add(new Operand(operand));  }  instruction.addListener(m_listener);}  }
class C{  public static String formatCurrentTenant(){  final UserDetails userDetails=getCurrentUser();  if (!(userDetails instanceof UserPrincipal)) {    return null;  }  final UserPrincipal userPrincipal=(UserPrincipal)userDetails;  return trimAndFormatDetail(userPrincipal.getTenant(),8);}  }
class C{  public static Typeface droidSerifBold(Context context){  return FontSourceProcessor.process(R.raw.droidserif_bold,context);}  }
class C{  protected void sequence_AnnotatedExportableElement_AsyncNoTrailingLineBreak_FunctionBody_FunctionDeclaration_FunctionHeader_FunctionImpl_StrictFormalParameters_TypeVariables(ISerializationContext context,FunctionDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void closeSoftKeyboard(){  ((InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(getWindowToken(),0);}  }
class C{  public String cacheName(){  return cacheName;}  }
class C{  protected String prepareForAssignment(String oldValue,String newValue){  if ((newValue != null) && (newValue.length() == 0)) {    newValue=null;  }  if (!DatatypeHelper.safeEquals(oldValue,newValue)) {    releaseThisandParentDOM();  }  return newValue;}  }
class C{  @Override public String toString(boolean freq){  StringBuffer result=new StringBuffer();  result.append(m_attribute.name() + " ");switch (m_comparison) {case EQUAL:    result.append("=");  break;case LESS_THAN_OR_EQUAL_TO:result.append("<=");break;case GREATER_THAN:result.append(">");break;default :break;}result.append(" " + Utils.doubleToString(m_splitPoint,4));if (freq) {result.append(":" + m_frequency);}return result.toString();}  }
class C{  private void compareLocalStateWithEnumerationData(EBSVolumesEnumerationSubStage next){  if (this.aws.remoteAWSVolumes == null || this.aws.remoteAWSVolumes.size() == 0) {    this.service.logFine("No disks discovered on the remote system. Nothing to be created locally");  } else   if (this.aws.localDiskStateMap == null || this.aws.localDiskStateMap.size() == 0) {    this.aws.remoteAWSVolumes.entrySet().forEach(null);  } else {    for (    String key : this.aws.remoteAWSVolumes.keySet()) {      if (this.aws.localDiskStateMap.containsKey(key)) {        this.aws.disksToBeUpdated.add(this.aws.remoteAWSVolumes.get(key));      } else {        this.aws.volumesToBeCreated.add(this.aws.remoteAWSVolumes.get(key));      }    }  }  this.aws.subStage=next;  handleReceivedEnumerationData();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private List<byte[]> load(ColumnIdentifier columnIdentifier,long startOffset,long endOffset) throws IOException {  CarbonDictionaryReader dictionaryReader=getDictionaryReader(columnIdentifier);  List<byte[]> dictionaryValue=null;  try {    dictionaryValue=dictionaryReader.read(startOffset,endOffset);  }  finally {    dictionaryReader.close();  }  return dictionaryValue;}  }
class C{  public Intent execute(Context context){  String[] titles=new String[]{"Crete Air Temperature","Skiathos Air Temperature"};  List<double[]> x=new ArrayList<double[]>();  for (int i=0; i < titles.length; i++) {    x.add(new double[]{1,2,3,4,5,6,7,8,9,10,11,12});  }  List<double[]> values=new ArrayList<double[]>();  values.add(new double[]{12.3,12.5,13.8,16.8,20.4,24.4,26.4,26.1,23.6,20.3,17.2,13.9});  values.add(new double[]{9,10,11,15,19,23,26,25,22,18,13,10});  int[] colors=new int[]{Color.GREEN,Color.rgb(200,150,0)};  PointStyle[] styles=new PointStyle[]{PointStyle.CIRCLE,PointStyle.DIAMOND};  XYMultipleSeriesRenderer renderer=buildRenderer(colors,styles);  renderer.setPointSize(5.5f);  int length=renderer.getSeriesRendererCount();  for (int i=0; i < length; i++) {    XYSeriesRenderer r=(XYSeriesRenderer)renderer.getSeriesRendererAt(i);    r.setLineWidth(5);    r.setFillPoints(true);  }  setChartSettings(renderer,"Weather data","Month","Temperature",0.5,12.5,0,40,Color.LTGRAY,Color.LTGRAY);  renderer.setXLabels(12);  renderer.setYLabels(10);  renderer.setShowGrid(true);  renderer.setXLabelsAlign(Align.RIGHT);  renderer.setYLabelsAlign(Align.RIGHT);  renderer.setZoomButtonsVisible(true);  renderer.setPanLimits(new double[]{-10,20,-10,40});  renderer.setZoomLimits(new double[]{-10,20,-10,40});  XYValueSeries sunSeries=new XYValueSeries("Sunshine hours");  sunSeries.add(1f,35,4.3);  sunSeries.add(2f,35,4.9);  sunSeries.add(3f,35,5.9);  sunSeries.add(4f,35,8.8);  sunSeries.add(5f,35,10.8);  sunSeries.add(6f,35,11.9);  sunSeries.add(7f,35,13.6);  sunSeries.add(8f,35,12.8);  sunSeries.add(9f,35,11.4);  sunSeries.add(10f,35,9.5);  sunSeries.add(11f,35,7.5);  sunSeries.add(12f,35,5.5);  XYSeriesRenderer lightRenderer=new XYSeriesRenderer();  lightRenderer.setColor(Color.YELLOW);  XYSeries waterSeries=new XYSeries("Crete Water Temperature");  waterSeries.add(1,16);  waterSeries.add(2,15);  waterSeries.add(3,16);  waterSeries.add(4,17);  waterSeries.add(5,20);  waterSeries.add(6,23);  waterSeries.add(7,25);  waterSeries.add(8,25.5);  waterSeries.add(9,26.5);  waterSeries.add(10,24);  waterSeries.add(11,22);  waterSeries.add(12,18);  XYSeries waterSeries2=new XYSeries("Skiathos Water Temperature");  waterSeries2.add(1,15);  waterSeries2.add(2,14);  waterSeries2.add(3,14);  waterSeries2.add(4,15);  waterSeries2.add(5,18);  waterSeries2.add(6,22);  waterSeries2.add(7,24);  waterSeries2.add(8,25);  waterSeries2.add(9,24);  waterSeries2.add(10,21);  waterSeries2.add(11,18);  waterSeries2.add(12,16);  renderer.setBarSpacing(0.3);  XYSeriesRenderer waterRenderer1=new XYSeriesRenderer();  waterRenderer1.setColor(0xff0099cc);  waterRenderer1.setChartValuesTextAlign(Align.CENTER);  XYSeriesRenderer waterRenderer2=new XYSeriesRenderer();  waterRenderer2.setColor(0xff9933cc);  waterRenderer2.setChartValuesTextAlign(Align.RIGHT);  XYMultipleSeriesDataset dataset=buildDataset(titles,x,values);  dataset.addSeries(0,sunSeries);  dataset.addSeries(0,waterSeries);  dataset.addSeries(0,waterSeries2);  renderer.addSeriesRenderer(0,lightRenderer);  renderer.addSeriesRenderer(0,waterRenderer1);  renderer.addSeriesRenderer(0,waterRenderer2);  waterRenderer1.setDisplayChartValues(true);  waterRenderer1.setChartValuesTextSize(10);  waterRenderer2.setDisplayChartValues(true);  waterRenderer2.setChartValuesTextSize(10);  XYCombinedChartDef[] types=new XYCombinedChartDef[]{new XYCombinedChartDef(BarChart.TYPE,0,1),new XYCombinedChartDef(BubbleChart.TYPE,2),new XYCombinedChartDef(LineChart.TYPE,3),new XYCombinedChartDef(CubicLineChart.TYPE,4)};  Intent intent=ChartFactory.getCombinedXYChartIntent(context,dataset,renderer,types,"Weather parameters");  return intent;}  }
class C{  public boolean isModify(){  return modify;}  }
class C{  private static void checkArguments(final BackEndDebuggerProvider debuggerProvider){  Preconditions.checkNotNull(debuggerProvider,"IE02235: Debugger provider argument can not be null");}  }
class C{  public SQLIntegrityConstraintViolationException(){}  }
class C{  @Override public void writePath(final Writer w,final String path,final int rootDepth) throws IOException {  final String[] a=path.split(ps);  if (rootDepth == 0) {    w.write("<a href=\"" + model.getRequestURL(new URLQueryParam[]{new URLQueryParam(URLQueryModel.PATH,ps)}) + "\">");    w.write(ps);    w.write("</a>");  }  final StringBuilder sb=new StringBuilder(ps);  for (int n=1; n < a.length; n++) {    final String name=a[n];    if (n > 1) {      if ((n + 1) > rootDepth) {        w.write("&nbsp;");        w.write(ps);      }      sb.append(ps);    }    final String prefix=sb.toString();    sb.append(name);    if ((n + 1) > rootDepth) {      if (rootDepth != 0 && n == rootDepth) {        w.write("<a href=\"" + model.getRequestURL(new URLQueryParam[]{new URLQueryParam(URLQueryModel.PATH,prefix)}) + "\">");        w.write("...");        w.write("</a>");        w.write("&nbsp;" + ps);      }      w.write("&nbsp;");      w.write("<a href=\"" + model.getRequestURL(new URLQueryParam[]{new URLQueryParam(URLQueryModel.PATH,sb.toString())}) + "\">");      w.write(cdata(name));      w.write("</a>");    }  }}  }
class C{  public static byte[] concatByteArrays(byte[] a,byte[] b){  byte[] c=new byte[a.length + b.length];  System.arraycopy(a,0,c,0,a.length);  System.arraycopy(b,0,c,a.length,b.length);  return c;}  }
class C{  public TransferEntropyCalculatorMultiVariateSingleObservationsKernel(){  super();}  }
class C{  public void close() throws IOException {  _in.close();}  }
class C{  public String write(Object value) throws Exception {  int length=Array.getLength(value);  if (entry == char.class) {    char[] array=(char[])value;    return new String(array);  }  return write(value,length);}  }
class C{  public void rotate(double theta,Point2D from){  AffineTransform rotate=AffineTransform.getRotateInstance(theta,from.getX(),from.getY());  inverse=null;  transform.preConcatenate(rotate);  fireStateChanged();}  }
class C{  public T caseAnonymous_linkingOp_3_(Anonymous_linkingOp_3_ object){  return null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean invertRes=false;  invertRes=!evalBool(stack.pop());  Object upperBound=stack.pop();  Object lowerBound=stack.pop();  String filterMethName=getString(stack);  Object dataObj=stack.pop();  if (dataObj == null)   return null;  Object[] currData;  if (dataObj instanceof java.util.Collection)   currData=((java.util.Collection)dataObj).toArray(); else   if (dataObj instanceof java.util.Map)   currData=((java.util.Map)dataObj).keySet().toArray(); else   currData=(Object[])dataObj;  Class filterClass=currData.getClass().getComponentType();  java.util.ArrayList passedData=new java.util.ArrayList();  if ("GetAiringEndTime".equals(filterMethName) || "GetAiringStartTime".equals(filterMethName) || "GetScheduleStartTime".equals(filterMethName)|| "GetScheduleEndTime".equals(filterMethName)) {    boolean isStart=filterMethName.indexOf("Start") != -1;    boolean isSched=filterMethName.indexOf("Schedule") != -1;    long minValue=!(lowerBound instanceof Number) ? Long.MIN_VALUE : ((Number)lowerBound).longValue();    long maxValue=!(upperBound instanceof Number) ? Long.MAX_VALUE : ((Number)upperBound).longValue();    for (int i=0; i < currData.length; i++) {      Airing a=getAirObj(currData[i]);      boolean didPass=true;      if (a != null) {        long endTime=isStart ? (isSched ? a.getSchedulingStart() : a.getStartTime()) : (isSched ? a.getSchedulingEnd() : a.getEndTime());        if (invertRes)         didPass=(endTime < minValue) || (endTime >= maxValue); else         didPass=(endTime >= minValue) && (endTime < maxValue);      } else       didPass=false;      if (didPass)       passedData.add(currData[i]);    }  } else {    sage.jep.function.PostfixMathCommandI filtMeth=(sage.jep.function.PostfixMathCommandI)Catbert.getAPI().get(filterMethName);    for (int i=0; i < currData.length; i++) {      stack.push(currData[i]);      filtMeth.setCurNumberOfParameters(1);      filtMeth.run(stack);      Object testRes=stack.pop();      boolean didPass=true;      if (lowerBound != null) {        if (((Comparable)lowerBound).compareTo(testRes) > 0) {          if (!invertRes)           didPass=false;        } else         if (invertRes)         didPass=false;      }      if (upperBound != null) {        if (((Comparable)upperBound).compareTo(testRes) <= 0) {          if (!invertRes)           didPass=false;        } else         if (invertRes)         didPass=false;      }      if (didPass)       passedData.add(currData[i]);    }  }  return passedData.toArray((Object[])java.lang.reflect.Array.newInstance(filterClass,passedData.size()));}  }
class C{  private boolean isAnnotation(){  return implInterfaces.contains("java.lang.annotation.Annotation");}  }
class C{  public void testKeyPairGenerator03() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  String provider=null;  for (int i=0; i < algs.length; i++) {    try {      KeyPairGenerator.getInstance(algs[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }    try {      KeyPairGenerator.getInstance(algs[i],"");      fail("IllegalArgumentException must be thrown when provider is empty");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public static Test suite(){  final TestSuite suite=new TestSuite("BOp solutions");  suite.addTestSuite(TestGroupByOp.class);  return suite;}  }
class C{  @SuppressWarnings("unchecked") public void analyzeProgram(DMLProgram dmlp) throws HopsException, ParseException, LanguageException {  Map<String,Integer> fcandCounts=new HashMap<String,Integer>();  Map<String,FunctionOp> fcandHops=new HashMap<String,FunctionOp>();  Map<String,Set<Long>> fcandSafeNNZ=new HashMap<String,Set<Long>>();  Set<String> allFCandKeys=new HashSet<String>();  if (!dmlp.getFunctionStatementBlocks().isEmpty()) {    for (    StatementBlock sb : dmlp.getStatementBlocks())     getFunctionCandidatesForStatisticPropagation(sb,fcandCounts,fcandHops);    allFCandKeys.addAll(fcandCounts.keySet());    pruneFunctionCandidatesForStatisticPropagation(fcandCounts,fcandHops);    determineFunctionCandidatesNNZPropagation(fcandHops,fcandSafeNNZ);    DMLTranslator.resetHopsDAGVisitStatus(dmlp);  }  Collection<String> unaryFcandTmp=CollectionUtils.subtract(allFCandKeys,fcandCounts.keySet());  HashSet<String> unaryFcands=new HashSet<String>();  if (!unaryFcandTmp.isEmpty() && UNARY_DIMS_PRESERVING_FUNS) {    for (    String tmp : unaryFcandTmp)     if (isUnarySizePreservingFunction(dmlp.getFunctionStatementBlock(tmp)))     unaryFcands.add(tmp);  }  if (!fcandCounts.isEmpty() || INTRA_PROCEDURAL_ANALYSIS) {    LocalVariableMap callVars=new LocalVariableMap();    for (    StatementBlock sb : dmlp.getStatementBlocks())     propagateStatisticsAcrossBlock(sb,fcandCounts,callVars,fcandSafeNNZ,unaryFcands,new HashSet<String>());  }  if (REMOVE_UNUSED_FUNCTIONS) {    removeUnusedFunctions(dmlp,allFCandKeys);  }  if (FLAG_FUNCTION_RECOMPILE_ONCE) {    flagFunctionsForRecompileOnce(dmlp);  }  if (REMOVE_UNNECESSARY_CHECKPOINTS && OptimizerUtils.isSparkExecutionMode()) {    removeCheckpointBeforeUpdate(dmlp);    moveCheckpointAfterUpdate(dmlp);    removeCheckpointReadWrite(dmlp);  }  if (REMOVE_CONSTANT_BINARY_OPS) {    removeConstantBinaryOps(dmlp);  }}  }
class C{  public double eval(double params[]){  return (Math.log10(params[0]));}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public void start(){  if (started) {    return;  }  Log.d(TAG,"Starting monitoring compass accuracy");  if (compassSensor != null) {    sensorManager.registerListener(this,compassSensor,SensorManager.SENSOR_DELAY_UI);  }  started=true;}  }
class C{  public OrdersPage(final PageParameters params){  super(params);  final String email=ApplicationDirector.getShoppingCart().getCustomerEmail();  final Customer customer;  if (StringUtils.hasLength(email)) {    customer=customerServiceFacade.getCustomerByEmail(ApplicationDirector.getCurrentShop(),email);  } else {    customer=null;    final PageParameters rparams=new PageParameters();    rparams.set(ShoppingCartCommand.CMD_LOGOUT,ShoppingCartCommand.CMD_LOGOUT);    setResponsePage(Application.get().getHomePage(),rparams);  }  final Model<Customer> customerModel=new Model<Customer>(customer);  add(new FeedbackPanel(FEEDBACK));  add(new CustomerOrderPanel(ORDERS_PANEL,customerModel));  add(new StandardFooter(FOOTER));  add(new StandardHeader(HEADER));  add(new ServerSideJs("serverSideJs"));  add(new HeaderMetaInclude("headerInclude"));}  }
class C{  private void animateView(final int position,@NonNull final View view,@NonNull final Animator[] animators){  if (mAnimationStartMillis == -1) {    mAnimationStartMillis=SystemClock.uptimeMillis();  }  ViewHelper.setAlpha(view,0);  AnimatorSet set=new AnimatorSet();  set.playTogether(animators);  set.setStartDelay(calculateAnimationDelay(position));  set.setDuration(mAnimationDurationMillis);  set.start();  mAnimators.put(view.hashCode(),set);}  }
class C{  public ScrollBar(HotSpot parent){  this.setOrientation(AVKey.VERTICAL);  this.initializeUIControls(parent);}  }
class C{  public Bounds translate(double x,double y){  return new BoundingBox(x + bounds.getMinX(),y + bounds.getMinY(),bounds.getWidth(),bounds.getHeight());}  }
class C{  public void checkLogin(){  if (User.isLogin()) {    startActivity(MainActivity.class);    this.finish();  } else {    startActivity(LoginActivity.class);    this.finish();  }}  }
class C{  private static int detectTexturePackFormat(File zipfile) throws IOException {  ZipInputStream zis=null;  try {    zis=new ZipInputStream(new FileInputStream(zipfile));    boolean foundAssetsDir=false;    boolean foundBlocksDir=false;    boolean foundTerrainPng=false;    ZipEntry entry=null;    while ((entry=zis.getNextEntry()) != null) {      String entryName=entry.getName();      if (entryName.startsWith("assets/minecraft/"))       foundAssetsDir=true; else       if (entryName.startsWith("textures/blocks/"))       foundBlocksDir=true; else       if (entryName.equals("terrain.png"))       foundTerrainPng=true;    }    return foundAssetsDir ? FORMAT_1_6 : foundBlocksDir ? FORMAT_1_5 : foundTerrainPng ? FORMAT_PRE_1_5 : FORMAT_INVALID;  }  finally {    if (zis != null)     zis.close();  }}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction action=new RPAction();  if (params[0].equals("message")) {    groupMessageAction.execute(params,remainder);    return true;  }  action.put("type","group_management");  action.put("action",params[0]);  action.put("params",remainder);  ClientSingletonRepository.getClientFramework().send(action);  return true;}  }
class C{  static void checkUnsignedShort(final int value,final String msg){  if (value < 0 || value > 65535) {    throw new IllegalArgumentException(msg + " (must be an unsigned short): " + value);  }}  }
class C{  public void push(final Type value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {switch (value.getSort()) {case Type.BOOLEAN:      mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Boolean","TYPE",CLDESC);    break;case Type.CHAR:  mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Character","TYPE",CLDESC);break;case Type.BYTE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Byte","TYPE",CLDESC);break;case Type.SHORT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Short","TYPE",CLDESC);break;case Type.INT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Integer","TYPE",CLDESC);break;case Type.FLOAT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Float","TYPE",CLDESC);break;case Type.LONG:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Long","TYPE",CLDESC);break;case Type.DOUBLE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Double","TYPE",CLDESC);break;default :mv.visitLdcInsn(value);}}}  }
class C{  private void markRecoverySuccessful(){  setRecoveryStatusWithEndTimeMarked(RecoveryStatus.Status.DONE);}  }
class C{  private static boolean equals(char[] lower,char[] mixed,int length){  if (lower.length != length)   return false;  for (int i=length - 1; i >= 0; i--) {    char a=lower[i];    char b=mixed[i];    if ('A' <= b && b <= 'Z')     b+='a' - 'A';    if (a != b)     return false;  }  return true;}  }
class C{  public static double distance(Vector2 a,Vector2 b){  Vector2 tempVector=Vector2.pow(Vector2.subtract(a,b),2);  return Math.sqrt(tempVector.x + tempVector.z);}  }
class C{  public BrowseRequest clone(){  BrowseRequest result=new BrowseRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.View=View == null ? null : View.clone();  result.RequestedMaxReferencesPerNode=RequestedMaxReferencesPerNode;  if (NodesToBrowse != null) {    result.NodesToBrowse=new BrowseDescription[NodesToBrowse.length];    for (int i=0; i < NodesToBrowse.length; i++)     result.NodesToBrowse[i]=NodesToBrowse[i].clone();  }  return result;}  }
class C{  public HashMap<String,DataSource_Definition> addDataSource(DataSource_Definition dataSourceDefinition){  this.listDataSourceDefinition.put(dataSourceDefinition.getName(),dataSourceDefinition);  return this.listDataSourceDefinition;}  }
class C{  public static LatLon[] greatCircleExtremeLocations(LatLon location,Angle azimuth){  if (location == null) {    String message=Logging.getMessage("nullValue.LocationIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (azimuth == null) {    String message=Logging.getMessage("nullValue.AzimuthIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double lat0=location.getLatitude().radians;  double az=azimuth.radians;  double tanDistance=-Math.tan(lat0) / Math.cos(az);  double distance=Math.atan(tanDistance);  Angle extremeDistance1=Angle.fromRadians(distance + (Math.PI / 2.0));  Angle extremeDistance2=Angle.fromRadians(distance - (Math.PI / 2.0));  return new LatLon[]{greatCircleEndPosition(location,azimuth,extremeDistance1),greatCircleEndPosition(location,azimuth,extremeDistance2)};}  }
class C{  @Override public double conf(double totalWeight,double totalPositiveWeight,Hypothesis hypo,double delta){  double g=hypo.getCoveredWeight() / totalWeight;  double p=hypo.getPositiveWeight() / hypo.getCoveredWeight();  double sg=variance(g,totalWeight);  double sp=variance(p,hypo.getCoveredWeight());  double inverseNormal=inverseNormal(1.0d - delta / 2.0d);  return 2.0d * sg * inverseNormal + sg * sg * Math.pow(inverseNormal,2.0d) + sp * inverseNormal + 2.0d * sg * sp* Math.pow(inverseNormal,2.0d) + sp * sg * sg* Math.pow(inverseNormal,3.0d);}  }
class C{  private static double[] computeCenterofMass(int dim,double[][] data,int begin,int end){  final int size=end - begin;  if (size == 1) {    return data[begin];  }  double[] center=new double[dim];  for (int i=begin; i < end; i++) {    double[] row=data[i];    for (int d=0; d < dim; d++) {      center[d]+=row[d];    }  }  double norm=1. / size;  for (int d=0; d < dim; d++) {    center[d]*=norm;  }  return center;}  }
class C{  public void backupFilesToDirectory(File backupDirectory) throws IOException {  copyBackupSet(getOperationsRoot(),backupDirectory);}  }
class C{  public int indexOf(Object element,boolean testForEquality){  return this.indexOfFromTo(element,0,size - 1,testForEquality);}  }
class C{  public boolean isStreamSequences(){  return streamSequences;}  }
class C{  public static void nextBytes(byte[] bytes){  wasAccessed=true;  for (int i=0; i < bytes.length; )   for (int rnd=nextInt(), n=Math.min(bytes.length - i,4); n-- > 0; rnd>>=8)   bytes[i++]=(byte)rnd;}  }
class C{  protected CCRepeat(CCFiniteTimeAction action,int t){  super(action.getDuration() * t);  times=t;  other=action;  total=0;}  }
class C{  @SuppressWarnings({"static-access"}) public int run(String[] args) throws Exception {  Options options=new Options();  options.addOption(new Option(COMBINER,"use combiner"));  options.addOption(new Option(INMAPPER_COMBINER,"user in-mapper combiner"));  options.addOption(new Option(RANGE,"use range partitioner"));  options.addOption(OptionBuilder.withArgName("path").hasArg().withDescription("base path").create(BASE));  options.addOption(OptionBuilder.withArgName("num").hasArg().withDescription("start iteration").create(START));  options.addOption(OptionBuilder.withArgName("num").hasArg().withDescription("end iteration").create(END));  options.addOption(OptionBuilder.withArgName("num").hasArg().withDescription("number of nodes").create(NUM_NODES));  CommandLine cmdline;  CommandLineParser parser=new GnuParser();  try {    cmdline=parser.parse(options,args);  } catch (  ParseException exp) {    System.err.println("Error parsing command line: " + exp.getMessage());    return -1;  }  if (!cmdline.hasOption(BASE) || !cmdline.hasOption(START) || !cmdline.hasOption(END)|| !cmdline.hasOption(NUM_NODES)) {    System.out.println("args: " + Arrays.toString(args));    HelpFormatter formatter=new HelpFormatter();    formatter.setWidth(120);    formatter.printHelp(this.getClass().getName(),options);    ToolRunner.printGenericCommandUsage(System.out);    return -1;  }  String basePath=cmdline.getOptionValue(BASE);  int n=Integer.parseInt(cmdline.getOptionValue(NUM_NODES));  int s=Integer.parseInt(cmdline.getOptionValue(START));  int e=Integer.parseInt(cmdline.getOptionValue(END));  boolean useCombiner=cmdline.hasOption(COMBINER);  boolean useInmapCombiner=cmdline.hasOption(INMAPPER_COMBINER);  boolean useRange=cmdline.hasOption(RANGE);  LOG.info("Tool name: RunPageRank");  LOG.info(" - base path: " + basePath);  LOG.info(" - num nodes: " + n);  LOG.info(" - start iteration: " + s);  LOG.info(" - end iteration: " + e);  LOG.info(" - use combiner: " + useCombiner);  LOG.info(" - use in-mapper combiner: " + useInmapCombiner);  LOG.info(" - user range partitioner: " + useRange);  for (int i=s; i < e; i++) {    iteratePageRank(basePath,i,i + 1,n,useCombiner,useInmapCombiner,useRange);  }  return 0;}  }
class C{  public static Writer utf8(OutputStream stream){  return new OutputStreamWriter(stream,UTF_8);}  }
class C{  public static Builder jsonToBuilder(String jsonDescriptor) throws OracleException {  byte[] data=jsonDescriptor.getBytes(ByteArray.DEFAULT_CHARSET);  ByteArrayInputStream inp=new ByteArrayInputStream(data);  return (CollectionDescriptor.jsonToBuilder(inp));}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public int taskNameHash(){  return taskNameHash;}  }
class C{  public void addMethod(final String resource,final ResourceMethod method){  resources.putIfAbsent(resource,new HashSet<>());  resources.get(resource).add(method);}  }
class C{  public static void safeCloseStream(InputStream in){  if (in != null) {    try {      in.close();    } catch (    Exception e) {      log.error(e.getMessage(),e);    }  }}  }
class C{  public static boolean saveImage(final String sURL,final byte[] img){  assert isInitialized || SD_CACHE_PATH != null : SD_CARD_HELPER_INIT_ERR;  if (sURL == null || img == null || !isWriteable())   return false;  final File file=getFile(sURL);  if (!FileUtils.makeDirsForFile(file))   return false;  return FileUtils.byteArrayToFile(img,file);}  }
class C{  public static void displaySynapseGroupDialog(NetworkPanel networkPanel){  NeuronGroup src=networkPanel.getSourceModelGroups().get(0);  NeuronGroup tar=networkPanel.getSelectedModelNeuronGroups().get(0);  JDialog dialog=SynapseGroupDialog.createSynapseGroupDialog(networkPanel,src,tar);  dialog.setLocationRelativeTo(null);  dialog.pack();  dialog.setVisible(true);}  }
class C{  public Stream(){  this.subscribed=false;}  }
class C{  private static Pair<String,String> preIndexedASR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String index=environment.getNextVariableString();  final String tmpVar=environment.getNextVariableString();  long baseOffset=offset;  if (immediateNodeValue.equals("0")) {    final String isZeroCondition=environment.getNextVariableString();    final String tmpVar1=environment.getNextVariableString();    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar1,bt,isZeroCondition));    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0x0L),bt,isZeroCondition,dw,index));  } else {    final String tmpVar1=environment.getNextVariableString();    final String tmpVar2=environment.getNextVariableString();    final String tmpVar3=environment.getNextVariableString();    final String tmpVar4=environment.getNextVariableString();    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,"-" + immediateNodeValue,dw,tmpVar2));    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,String.valueOf(0x80000000L),dw,"-" + immediateNodeValue,dw,tmpVar3));    instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));    instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,dWordBitMask,dw,index));  }  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));  instructions.add(ReilHelpers.createStr(baseOffset++,dw,address,dw,registerNodeValue1));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public void preApply(PMatrix3D left){  preApply(left.m00,left.m01,left.m02,left.m03,left.m10,left.m11,left.m12,left.m13,left.m20,left.m21,left.m22,left.m23,left.m30,left.m31,left.m32,left.m33);}  }
class C{  public void testBug8803() throws Exception {  String tableName="testBug8803";  createTable(tableName,"(field1 INT NOT NULL PRIMARY KEY)");  DatabaseMetaData metadata=this.conn.getMetaData();  try {    this.rs=metadata.getBestRowIdentifier(this.conn.getCatalog(),null,tableName,DatabaseMetaData.bestRowNotPseudo,true);    assertTrue(this.rs.next());    this.rs.getInt("DATA_TYPE");  }  finally {    if (this.rs != null) {      this.rs.close();      this.rs=null;    }  }}  }
class C{  public void addMissingColumns(String trxName){  int total=0;  String sql="SELECT * FROM AD_PrintFormat pf " + "ORDER BY Name";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,trxName);    rs=pstmt.executeQuery();    while (rs.next())     total+=addMissingColumns(new MPrintFormat(m_ctx,rs,trxName));  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  log.info("Total = " + total);}  }
class C{  public Range visibleRange(ContourDataset data,Range x,Range y){  Range range=data.getZValueRange(x,y);  return range;}  }
class C{  public boolean isDirty(){  return dirty.get();}  }
class C{  public Integer findTradeOrderByMaxKey() throws PersistentModelException {  return m_tradeOrderHome.findTradeOrderByMaxKey();}  }
class C{  @NonNull public DividerAdapterBuilder outerView(@NonNull ViewFactory viewFactory){  return leadingView(viewFactory).trailingView(viewFactory);}  }
class C{  public static int lastIndexOf(@NotNull char[] buffer,final char symbol,int fromIndex,final int toIndex){  if (fromIndex < 0) {    fromIndex=0;  }  for (int i=toIndex - 1; i >= fromIndex; i--) {    if (buffer[i] == symbol) {      return i;    }  }  return -1;}  }
class C{  public static StringBuilder sanitize(String script) throws WarpScriptException {  StringBuilder sb=new StringBuilder();  if (null == script) {    return sb;  }  BufferedReader br=new BufferedReader(new StringReader(script));  boolean inComment=false;  try {    while (true) {      String line=br.readLine();      if (null == line) {        break;      }      line=line.trim();      String[] statements;      line=UnsafeString.sanitizeStrings(line);      if (-1 != UnsafeString.indexOf(line,' ')) {        statements=UnsafeString.split(line,' ');      } else {        statements=new String[1];        statements[0]=line;      }      for (      String stmt : statements) {        if (0 == stmt.length()) {          continue;        }        stmt=stmt.trim();        if (stmt.charAt(0) == '#' || (stmt.charAt(0) == '/' && stmt.length() >= 2 && stmt.charAt(1) == '/')) {          break;        }        if (WarpScriptStack.COMMENT_END.equals(stmt)) {          if (inComment) {            throw new WarpScriptException("Not inside a comment.");          }          inComment=false;          continue;        } else         if (inComment) {          continue;        } else         if (WarpScriptStack.COMMENT_START.equals(stmt)) {          inComment=true;          continue;        }        if (sb.length() > 0) {          sb.append(" ");        }        sb.append(stmt);      }    }    br.close();  } catch (  IOException ioe) {    throw new WarpScriptException(ioe);  }  return sb;}  }
class C{  public RealVector generateRandomVector(int dimension,int seedLength,Random random){  RealVector randomVector=new RealVector(dimension);  if (seedLength == dimension)   return generateDenseRandomVector(dimension,seedLength,random);  boolean[] occupiedPositions=new boolean[dimension];  randomVector.sparseOffsets=new short[seedLength];  int testPlace, entryCount=0;  while (entryCount < seedLength / 2) {    testPlace=random.nextInt(dimension);    if (!occupiedPositions[testPlace]) {      occupiedPositions[testPlace]=true;      randomVector.sparseOffsets[entryCount]=new Integer(testPlace + 1).shortValue();      entryCount++;    }  }  while (entryCount < seedLength) {    testPlace=random.nextInt(dimension);    if (!occupiedPositions[testPlace]) {      occupiedPositions[testPlace]=true;      randomVector.sparseOffsets[entryCount]=new Integer((1 + testPlace) * -1).shortValue();      entryCount++;    }  }  return randomVector;}  }
class C{  public static File findUniqueFile(String fileName,String path) throws ConfigurationException {  File[] files=findFiles(fileName,path);  if (files.length == 0) {    StringBuffer errorMessageBuffer=new StringBuffer("No file found that matches specified name : ");    errorMessageBuffer.append(fileName);    if (path != null) {      errorMessageBuffer.append(" under path " + path);    }    LOGGER.error(errorMessageBuffer.toString());    throw new ConfigurationException(errorMessageBuffer.toString());  } else   if (files.length > 1) {    StringBuffer foundFiles=new StringBuffer();    for (int i=0; i < files.length; i++) {      foundFiles.append(files[i].getAbsolutePath() + "\n");    }    StringBuffer errorMessageBuffer=new StringBuffer("Multiple files found that match specified name : ");    errorMessageBuffer.append(fileName);    if (path != null) {      errorMessageBuffer.append(" under path " + path);    }    errorMessageBuffer.append(" as: \n ");    errorMessageBuffer.append(foundFiles.toString());    LOGGER.error(errorMessageBuffer.toString());    throw new ConfigurationException(errorMessageBuffer.toString());  }  return files[0];}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public int size(){  return mSize;}  }
class C{  private void updateColorPanelPosition(){  if (editPanel != null && colorOverlay != null) {    int colorPanelX=(int)editPanel.getLocationOnScreen().getX() + colorButton.getX();    int colorPanelY=(int)(editPanel.getLocationOnScreen().getY() + editPanel.getBounds().getHeight());    colorOverlay.setBounds(colorPanelX,colorPanelY,EDIT_COLOR_PANEL_WIDTH,EDIT_COLOR_PANEL_HEIGHT);  }}  }
class C{  public void testLocal() throws Exception {  testFileSystem(URI.create("file:///"));}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  long processingEndTime=System.currentTimeMillis();  Object iceProcessingState=evt.getNewValue();  logger.info("Agent entered the " + iceProcessingState + " state.");  if (iceProcessingState == IceProcessingState.COMPLETED) {    logger.info("Total ICE processing time: " + (processingEndTime - startTime) + "ms");    Agent agent=(Agent)evt.getSource();    List<IceMediaStream> streams=agent.getStreams();    for (    IceMediaStream stream : streams) {      String streamName=stream.getName();      logger.info("Pairs selected for stream: " + streamName);      List<Component> components=stream.getComponents();      for (      Component cmp : components) {        String cmpName=cmp.getName();        logger.info(cmpName + ": " + cmp.getSelectedPair());      }    }    logger.info("Printing the completed check lists:");    for (    IceMediaStream stream : streams) {      String streamName=stream.getName();      logger.info("Check list for  stream: " + streamName);      logger.info(stream.getCheckList().toString());    }    logger.info("Total ICE processing time to completion: " + (System.currentTimeMillis() - startTime));  } else   if (iceProcessingState == IceProcessingState.TERMINATED || iceProcessingState == IceProcessingState.FAILED) {    ((Agent)evt.getSource()).free();    logger.info("Total ICE processing time: " + (System.currentTimeMillis() - startTime));    System.exit(0);  }}  }
class C{  @Override public int interpretReturnCode(final int returnCode){  return returnCode == 1 ? 0 : returnCode;}  }
class C{  protected static byte[] encodeDHPrivateKey(DHPrivateKeyParameters privkey){  return privkey.getX().toByteArray();}  }
class C{  public static void signalCacheClose(){  isCacheClosing=true;  if (proctor != null) {    proctor.interrupt();  }  if (watchDog != null) {    watchDog.interrupt();  }}  }
class C{  public void addSymbol(String startText,String endText,boolean hidden){  symbols.add(new TokenizerSymbol(null,startText,endText,hidden,false,true,false));}  }
class C{  public void remove(int index){  if (index >= size) {    throwException(index);  }  int toMove=size - index - 1;  if (toMove > 0) {    System.arraycopy(data,index + 1,data,index,toMove);  }  --size;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private MultiPolygon readMultiPolygon(OraGeom oraGeom){  int nElem=oraGeom.numElements();  List geoms=new ArrayList();  for (int i=0; i < nElem; i++) {    int etype=oraGeom.eType(i);    if ((etype == OraGeom.ETYPE.POLYGON) || (etype == OraGeom.ETYPE.POLYGON_EXTERIOR)) {      Polygon poly=readPolygon(oraGeom,i);      i+=poly.getNumInteriorRing();      geoms.add(poly);    } else {      break;    }  }  MultiPolygon polys=geometryFactory.createMultiPolygon(GeometryFactory.toPolygonArray(geoms));  return polys;}  }
class C{  public FeatureList(RandomAccessFile raf,int offset) throws IOException {  raf.seek(offset);  featureCount=raf.readUnsignedShort();  featureRecords=new FeatureRecord[featureCount];  features=new Feature[featureCount];  for (int i=0; i < featureCount; i++) {    featureRecords[i]=new FeatureRecord(raf);  }  for (int i=0; i < featureCount; i++) {    features[i]=new Feature(raf,offset + featureRecords[i].getOffset());  }}  }
class C{  @Deprecated public void injectInsrumentation(Instrumentation instrumentation){  injectInstrumentation(instrumentation);}  }
class C{  public Color green(int green){  return rgba(red(),green,blue(),alpha());}  }
class C{  public synchronized void update(Vector2 mousePosition){  this.beginPosition=mousePosition;}  }
class C{  public void rethrow() throws Throwable {  if (cause == null) {    return;  }  throw cause;}  }
class C{  public Vertex processGreeting(Vertex input,Vertex conversation,Network network,LanguageState state,Map<Vertex,Vertex> variables){  Vertex language=network.createVertex(getPrimitive());  Collection<Relationship> greetings=language.getRelationships(Primitive.GREETING);  if (greetings == null) {    log("No greeting",Level.FINE);    return null;  }  Vertex greeting=Utils.random(greetings).getTarget();  log("Greeting",Level.FINE,greeting);  if ((greeting != null) && greeting.instanceOf(Primitive.LABEL)) {    greeting=greeting.mostConscious(Primitive.RESPONSE);  }  if ((greeting != null) && greeting.instanceOf(Primitive.FORMULA)) {    log("Greeting is template formula",Level.FINE,greeting);    Vertex result=evaluateFormula(greeting,variables,network);    if (result == null) {      log("Template formula cannot be evaluated",Level.FINE,greeting);      greeting=null;      for (      Relationship relationship : greetings) {        if (!relationship.getTarget().instanceOf(Primitive.FORMULA)) {          greeting=relationship.getTarget();        }      }    } else {      greeting=getWord(result,network);    }  }  return greeting;}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if ("graph".equals(e.getPropertyName())) {    selectArrowTools();  }}  }
class C{  public String compressionToolTip(){  return "Compression factor of the autoencoders, each level " + "of autoencoders will compress the labels to factor times " + "previous layer size.";}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:20.457 -0500",hash_original_method="CD78C78157016071B0AA2236145765B6",hash_generated_method="CD78C78157016071B0AA2236145765B6") void transformViewForTransition(int fromIndex,int toIndex,View view,boolean animate){  if (fromIndex == -1) {    mInAnimation.setTarget(view);    mInAnimation.start();  } else   if (toIndex == -1) {    mOutAnimation.setTarget(view);    mOutAnimation.start();  }}  }
class C{  public boolean isFalse(){  return isEmpty();}  }
class C{  public String[] validBaudRates(){  return new String[]{"115,200 bps"};}  }
class C{  public List<Integer> preorderTraversal(TreeNode root){  List<Integer> res=new ArrayList<Integer>();  if (root == null)   return res;  Stack<TreeNode> s=new Stack<TreeNode>();  s.push(root);  while (!s.isEmpty()) {    TreeNode curNode=s.pop();    res.add(curNode.val);    if (curNode.right != null)     s.push(curNode.right);    if (curNode.left != null)     s.push(curNode.left);  }  return res;}  }
class C{  public E current(){  if (pos < 0 || pos >= data.size()) {    return null;  }  return data.get(pos);}  }
class C{  @Override public Observable<ChangeNotification<InstanceInfo>> subscribeToInterest(String interest){  LOGGER.info("Subscribing to interest: " + interest);  return interestClient.forInterest(forApplications(Interest.Operator.Like,interest)).filter(null);}  }
class C{  public static ObjectAnimator ofInt(Object target,String propertyName,int... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setIntValues(values);  return anim;}  }
class C{  public TrayContentObserver(@NonNull final Handler handler){  super(handler);}  }
class C{  protected AsyncHttpRequest newAsyncHttpRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  return new AsyncHttpRequest(client,httpContext,uriRequest,responseHandler);}  }
class C{  public Enumeration<BasicBlock> forwardBlockEnumerator(){  return IREnumeration.forwardBE(this);}  }
class C{  public static int orientationIndex(Coordinate p1,Coordinate p2,Coordinate q){  return CGAlgorithmsDD.orientationIndex(p1,p2,q);}  }
class C{  public void toFront(){  stage.toFront();}  }
class C{  public void startAttack(){  this.setClock(new Clock());  this.ticker=new TickerThread(this);  this.tsAttackStart=System.currentTimeMillis();  this.performAttackThread=new PerformAttackThread(this);  this.performAttackThread.start();  Result.getGlobalResult().add(new ResultEntry(ResultLevel.Trace,"attackModel","done starting attack: " + this.attackName));  fireModelChanged();}  }
class C{  public int read(){  if (position >= document.getLength()) {    return -1;  }  try {    document.getText((int)position,1,segment);    position++;    return segment.array[segment.offset];  } catch (  BadLocationException ble) {    ble.printStackTrace();    return -1;  }}  }
class C{  public Anonymous_key_1_ createAnonymous_key_1_(){  Anonymous_key_1_Impl anonymous_key_1_=new Anonymous_key_1_Impl();  return anonymous_key_1_;}  }
class C{  public void prepareMatrixValuePx(float xChartMin,float deltaX,float deltaY,float yChartMin){  float scaleX=(float)((mViewPortHandler.contentWidth()) / deltaX);  float scaleY=(float)((mViewPortHandler.contentHeight()) / deltaY);  mMatrixValueToPx.reset();  mMatrixValueToPx.postTranslate(-xChartMin,-yChartMin);  mMatrixValueToPx.postScale(scaleX,-scaleY);}  }
class C{  public final boolean isReadAccess(){  return this.isReadAccess;}  }
class C{  public AbMenuItem(String text){  super();  this.text=text;}  }
class C{  public void testGetPropertyGroupStringBooleanStringArray(){  Properties props=new Properties();  props.put("x.y.z","");  PropertiesParser propertiesParser=new PropertiesParser(props);  Properties propGroup=propertiesParser.getPropertyGroup("x.y",true,new String[]{});  assertEquals("",propGroup.getProperty("z"));}  }
class C{  public <T>void realizeCacheFor(TypeTag tag,LinkedHashSet<TypeTag> typeStack){  if (!cache.contains(tag)) {    Tuple<T> tuple=createTuple(tag,typeStack);    addToCache(tag,tuple);  }}  }
class C{  @Override public XAQueueSession createXAQueueSession() throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createXAQueueSession()");  }  checkClosed();  if (type == ActiveMQRAConnectionFactory.CONNECTION || type == ActiveMQRAConnectionFactory.TOPIC_CONNECTION || type == ActiveMQRAConnectionFactory.XA_TOPIC_CONNECTION) {    throw new IllegalStateException("Can not get a topic session from a queue connection");  }  return allocateConnection(type);}  }
class C{  public <T extends B>MinMaxPriorityQueue<T> create(Iterable<? extends T> initialContents){  MinMaxPriorityQueue<T> queue=new MinMaxPriorityQueue<T>(this,initialQueueSize(expectedSize,maximumSize,initialContents));  for (  T element : initialContents) {    queue.offer(element);  }  return queue;}  }
class C{  public static double area(double side1,double side2,double side3){  double s=(side1 + side2 + side3) / 2;  return Math.sqrt(s * (s - side1) * (s - side2)* (s - side3));}  }
class C{  void appendNSDeclaration(int prefixIndex,int namespaceIndex,boolean isID){  final int namespaceForNamespaces=m_nsNames.stringToIndex("http://www.w3.org/2000/xmlns/");  int w0=NAMESPACE_NODE | (m_nsNames.stringToIndex("http://www.w3.org/2000/xmlns/") << 16);  int w1=currentParent;  int w2=0;  int w3=namespaceIndex;  int ourslot=appendNode(w0,w1,w2,w3);  previousSibling=ourslot;  previousSiblingWasParent=false;  return;}  }
class C{  public void connectProfile(BluetoothAdapter adapter,BluetoothDevice device,int profile,String methodName){  if (methodName == null) {    methodName=String.format("connectProfile(profile=%d, device=%s)",profile,device);  }  int mask=(ConnectProfileReceiver.STATE_CONNECTING_FLAG | ConnectProfileReceiver.STATE_CONNECTED_FLAG);  long start=-1;  if (!adapter.isEnabled()) {    fail(String.format("%s bluetooth not enabled",methodName));  }  if (!adapter.getBondedDevices().contains(device)) {    fail(String.format("%s device not paired",methodName));  }  BluetoothProfile proxy=connectProxy(adapter,profile);  assertNotNull(proxy);  ConnectProfileReceiver receiver=getConnectProfileReceiver(device,profile,mask);  int state=proxy.getConnectionState(device);switch (state) {case BluetoothProfile.STATE_CONNECTED:    removeReceiver(receiver);  return;case BluetoothProfile.STATE_CONNECTING:mask=0;break;case BluetoothProfile.STATE_DISCONNECTED:case BluetoothProfile.STATE_DISCONNECTING:start=System.currentTimeMillis();if (profile == BluetoothProfile.A2DP) {assertTrue(((BluetoothA2dp)proxy).connect(device));} else if (profile == BluetoothProfile.HEADSET) {assertTrue(((BluetoothHeadset)proxy).connect(device));} else if (profile == BluetoothProfile.INPUT_DEVICE) {assertTrue(((BluetoothInputDevice)proxy).connect(device));}break;default :removeReceiver(receiver);fail(String.format("%s invalid state: state=%d",methodName,state));}long s=System.currentTimeMillis();while (System.currentTimeMillis() - s < CONNECT_DISCONNECT_PROFILE_TIMEOUT) {state=proxy.getConnectionState(device);if (state == BluetoothProfile.STATE_CONNECTED && (receiver.getFiredFlags() & mask) == mask) {long finish=receiver.getCompletedTime();if (start != -1 && finish != -1) {writeOutput(String.format("%s completed in %d ms",methodName,(finish - start)));} else {writeOutput(String.format("%s completed",methodName));}removeReceiver(receiver);return;}sleep(POLL_TIME);}int firedFlags=receiver.getFiredFlags();removeReceiver(receiver);fail(String.format("%s timeout: state=%d (expected %d), flags=0x%x (expected 0x%x)",methodName,state,BluetoothProfile.STATE_CONNECTED,firedFlags,mask));}  }
class C{  public static String realFormat(final double x,final int dp){  assert dp >= 0;  if (Double.isNaN(x) || Double.isInfinite(x)) {    return Double.toString(x);  }  final String fmt="%1$01." + dp + "f";  final String res=String.format(Locale.ROOT,fmt,x);  if (x <= 0.0) {    if (negZero(res,dp)) {      return res.substring(1);    } else {      return res;    }  } else {    return res;  }}  }
class C{  public void test_initWithSecureRandom() throws Exception {  Cipher cipher=Cipher.getInstance(ALGORITHM_3DES + "/ECB/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES,new SecureRandom());  cipher=Cipher.getInstance("DES/CBC/NoPadding");  try {    cipher.init(Cipher.ENCRYPT_MODE,CIPHER_KEY_3DES,new SecureRandom());    fail();  } catch (  InvalidKeyException expected) {  }}  }
class C{  public void bootstrapSystem(Bot Bot,boolean addStates){  bootstrapMemory(Bot.memory(),addStates,true);}  }
class C{  public boolean tieneDocumentosAsociados(int tipoObjeto,String id,String idClfPadre){  if (tipoObjeto == TipoObjeto.ELEMENTO_CF)   return docDocumentoCFDBEntity.getCountDocumentosByIdClfPadre(id,idClfPadre) > 0; else   return docDocumentoDescrDBEntity.countNumDocumentos(id) > 0;}  }
class C{  public int size(){  return n;}  }
class C{  private static URL toURL(final String xmlFileName){  return (xmlFileName.startsWith("config/")) ? Thread.currentThread().getContextClassLoader().getResource(xmlFileName) : Thread.currentThread().getContextClassLoader().getResource("config/" + xmlFileName);}  }
class C{  public PojoValueField(PropertyDescriptor desc){  super(desc);}  }
class C{  public ExportedVariableStatement createExportedVariableStatement(){  ExportedVariableStatementImpl exportedVariableStatement=new ExportedVariableStatementImpl();  return exportedVariableStatement;}  }
class C{  protected CacheKey buildWrapperCacheKeyForAggregate(CacheKey owningCacheKey,boolean targetIsProtected){  if (!this.descriptor.getCachePolicy().isProtectedIsolation()) {    return owningCacheKey;  }  if (!targetIsProtected || this.isMapKeyMapping || (owningCacheKey == null)) {    return owningCacheKey;  }  CacheKey aggregateKey=owningCacheKey;  Object object=owningCacheKey.getObject();  if (owningCacheKey.getObject() != null) {    Object aggregate=getAttributeValueFromObject(object);    aggregateKey=new CacheKey(null,aggregate,null);    aggregateKey.setProtectedForeignKeys(owningCacheKey.getProtectedForeignKeys());    aggregateKey.setRecord(owningCacheKey.getRecord());    aggregateKey.setIsolated(owningCacheKey.isIsolated());    aggregateKey.setReadTime(owningCacheKey.getReadTime());  }  return aggregateKey;}  }
class C{  private JPanel createButtonPanel(){  JPanel panel=new JPanel();  panel.setLayout(new BoxLayout(panel,BoxLayout.X_AXIS));  panel.add(Box.createHorizontalGlue());  panel.add(Box.createHorizontalGlue());  JButton okButton=new JButton(ok);  JButton cancelButton=new JButton(cancel);  JButton helpButton=new JButton(help);  Dimension d=new Dimension(Math.max(cancelButton.getPreferredSize().width,70),cancelButton.getPreferredSize().height);  okButton.setPreferredSize(d);  cancelButton.setPreferredSize(d);  helpButton.setPreferredSize(d);  getRootPane().setDefaultButton(okButton);  panel.add(okButton);  panel.add(Box.createHorizontalStrut(10));  panel.add(cancelButton);  panel.add(Box.createHorizontalStrut(10));  panel.add(helpButton);  return panel;}  }
class C{  public KafkaTopicStreamConsumer(final KafkaStream<byte[],byte[]> kafkaTopicStream,final OneToOneConcurrentArrayQueue3<byte[]> messages,final MessageWaitStrategy<byte[]> messageWaitStrategy){  this.kafkaTopicPartitionStream=kafkaTopicStream;  this.messages=messages;  this.messageWaitStrategy=messageWaitStrategy;}  }
class C{  @Override public synchronized void acceptGraph(GraphEvent e){  ArrayList<Object> graphInfo=new ArrayList<Object>();  if (m_history == null) {    setUpResultHistory();  }  String name=(new SimpleDateFormat("HH:mm:ss - ")).format(new Date());  name+=e.getGraphTitle();  graphInfo.add(new Integer(e.getGraphType()));  graphInfo.add(e.getGraphString());  m_history.addResult(name,new StringBuffer());  m_history.addObject(name,graphInfo);}  }
class C{  public boolean isDestroyed(){  return destroyed;}  }
class C{  final public void println(Object v){  try {    _out.println(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public static TypeArray v(int size){  TypeArray newArray=new TypeArray();  newArray.types=new Type[size];  for (int i=0; i < size; i++)   newArray.types[i]=UnusuableType.v();  return newArray;}  }
class C{  private void processLoopBlock(BasicBlock block) throws NonRegularLoopException {  checkInEdgesAreInLoop(block);  checkOutEdgesAreInLoop(block);}  }
class C{  public static byte[] encodeBase64(byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  public String toString(){  return contents.toString();}  }
class C{  private static DefaultSampleValues parseTrex(ParsableByteArray trex){  trex.setPosition(Mp4Util.FULL_ATOM_HEADER_SIZE + 4);  int defaultSampleDescriptionIndex=trex.readUnsignedIntToInt() - 1;  int defaultSampleDuration=trex.readUnsignedIntToInt();  int defaultSampleSize=trex.readUnsignedIntToInt();  int defaultSampleFlags=trex.readInt();  return new DefaultSampleValues(defaultSampleDescriptionIndex,defaultSampleDuration,defaultSampleSize,defaultSampleFlags);}  }
class C{  public static String escapeXML(String string){  if (string == null) {    return "null";  }  return StringEscapeUtils.escapeXml(string);}  }
class C{  private BaseEvent createEvent(final String type,final ConfEvent conf){  BaseEvent event=null;  String subtype=conf.getSafeString("subtype");  if (subtype == null)   subtype="";  String ts=conf.getSafeString("ts");  String te=conf.getSafeString("te");  if (subtype == "" && "00:00:00".equals(ts) && "23:59:59".equals(te)) {    subtype="loop";  }  if (instances.containsKey(conf.getId()) == true) {    event=instances.get(conf.getId());    if (!subtype.equals(event.getSubType())) {      if (Cfg.DEBUG) {        Check.log(TAG + " (createEvent): same id, but different subtype");      }      event=null;    }  }  if (event == null) {    event=factory.create(type,subtype);  }  if (event != null) {    instances.put(conf.getId(),event);  }  return event;}  }
class C{  public void finalStatistics(final EvolutionState state,final int result){  super.finalStatistics(state,result);  for (int x=0; x < state.population.subpops.length; x++) {    int popSize=state.population.subpops[x].individuals.length;    if (numberOfBestToLog > popSize)     numberOfBestToLog=popSize;    GEPIndividual bestN[]=new GEPIndividual[numberOfBestToLog];    if (numberOfBestToLog == 1)     bestN[0]=(GEPIndividual)best_of_run[x]; else {      int[] orderedPop=new int[popSize];      for (int j=0; j < popSize; j++)       orderedPop[j]=j;      QuickSort.qsort(orderedPop,new BestGEPIndividualComparator(state.population.subpops[x].individuals));      Individual[] oldinds=state.population.subpops[x].individuals;      for (int j=0; j < numberOfBestToLog; j++)       bestN[j]=(GEPIndividual)(oldinds[orderedPop[popSize - 1 - j]]);    }    for (int bn=0; bn < bestN.length; bn++) {      GEPIndividual best=bestN[bn];      if (bn == 0) {        state.output.println("\nBEST INDIVIDUAL 1",Output.V_NO_GENERAL,statisticslog);        state.output.println("Found at Generation: " + best_of_run_generation[x],Output.V_NO_GENERAL,statisticslog);      } else       state.output.println("\n\nBEST INDIVIDUAL " + (bn + 1),Output.V_NO_GENERAL,statisticslog);      state.output.println("Raw Fitness: " + ((1000.0 / best.fitness.fitness()) - 1.0),Output.V_NO_GENERAL,statisticslog);      best.printIndividualForHumans(state,statisticslog,Output.V_NO_GENERAL);      int numChromosomes=best.chromosomes.length;      state.output.println("MODEL COMPOSITION",Output.V_NO_GENERAL,statisticslog);      for (int n=0; n < numChromosomes; n++) {        int j=n + 1;        if (n > 0)         state.output.println("",Output.V_NO_GENERAL,statisticslog);        if (numChromosomes > 1)         state.output.println("Chromosome " + j + ":",Output.V_NO_GENERAL,statisticslog);        GEPChromosome chromosome=best.chromosomes[n];        state.output.println("Size of program: " + chromosome.size(),Output.V_NO_GENERAL,statisticslog);        int counts[]=chromosome.variableUseageCounts();        int countsNotZero=0;        for (int i=0; i < counts.length; i++)         if (counts[i] > 0)         countsNotZero++;        state.output.print("Variables used(variable count) " + countsNotZero + ": ",Output.V_NO_GENERAL,statisticslog);        GEPSymbolSet ss=((GEPSpecies)state.population.subpops[x].species).symbolSet;        boolean first=true;        for (int i=0; i < counts.length; i++) {          if (counts[i] > 0) {            if (!first)             state.output.print(", ",Output.V_NO_GENERAL,statisticslog);            String terminalName=ss.symbols[ss.terminals[i]].symbol;            state.output.print(terminalName + " " + counts[i],Output.V_NO_GENERAL,statisticslog);            first=false;          }        }        HashMap fcounts=chromosome.functionUseageCounts();        Set countsSet=fcounts.entrySet();        state.output.print("\nFunctions used(function count) " + countsSet.size() + ": ",Output.V_NO_GENERAL,statisticslog);        first=true;        for (Iterator iter=countsSet.iterator(); iter.hasNext(); ) {          if (!first)           state.output.print(", ",Output.V_NO_GENERAL,statisticslog);          first=false;          Map.Entry e=(Map.Entry)iter.next();          String key=(String)e.getKey();          String value=((Integer)e.getValue()).toString();          state.output.print(key + " " + value,Output.V_NO_GENERAL,statisticslog);        }        if (GEPIndividual.simplifyExpressions) {          String mathExpression=chromosome.genotypeToStringForHumansMathExpression();          String mathExpressionSimplified="";          try {            mathExpressionSimplified=Expression.valueOf(mathExpression).simplify().toString();          } catch (          ParseException e) {          }          displaySimplifiedMathExpressionVariableFunctionCounts(state,ss,"MATH",mathExpressionSimplified);        }        GEPSpecies species=(GEPSpecies)state.population.subpops[0].species;        state.output.println("\n\nMODEL QUALITY MEASURES (TRAINING)",Output.V_NO_GENERAL,statisticslog);        displayStatistics(state,species,best,n,true);        double testingValues[]=GEPDependentVariable.testingData.getDependentVariableValues(n);        if (testingValues != null) {          state.output.println("\nMODEL QUALITY MEASURES (TEST)",Output.V_NO_GENERAL,statisticslog);          int numErrors=0;          for (int i=0; i < testingValues.length; i++) {            double computed=best.eval(n,false,i);            if (computed == Double.POSITIVE_INFINITY || computed == Double.NEGATIVE_INFINITY || Double.isNaN(computed))             numErrors++;          }          state.output.println("Number of Calculation Errors: " + numErrors + " out of "+ testingValues.length+ " test sets",Output.V_NO_GENERAL,statisticslog);          displayStatistics(state,species,best,n,false);        }        if (!noObserveredComputedDisplay) {          state.output.println("OBSERVED	AND COMPUTED (TRAINING)",Output.V_NO_GENERAL,observedVsComputedlog);          state.output.println("#Observed GEP-Model",Output.V_NO_GENERAL,observedVsComputedlog);          double dependentVarValues[]=GEPDependentVariable.trainingData.getDependentVariableValues(n);          for (int i=0; i < dependentVarValues.length; i++) {            double observed=dependentVarValues[i];            double computed=best.eval(n,true,i);            state.output.println(Double.toString(observed) + "\t" + Double.toString(computed),Output.V_NO_GENERAL,observedVsComputedlog);          }          if (testingValues != null) {            state.output.println("",Output.V_NO_GENERAL,statisticslog);            state.output.println("OBSERVED	AND COMPUTED (TEST)",Output.V_NO_GENERAL,observedVsComputedlog);            state.output.println("#Observed GEP-Model",Output.V_NO_GENERAL,observedVsComputedlog);            dependentVarValues=GEPDependentVariable.testingData.getDependentVariableValues(n);            for (int i=0; i < dependentVarValues.length; i++) {              double observed=dependentVarValues[i];              double computed=best.eval(n,false,i);              state.output.println(Double.toString(observed) + "\t" + Double.toString(computed),Output.V_NO_GENERAL,observedVsComputedTestlog);            }          }          state.output.println("#----------",Output.V_NO_GENERAL,observedVsComputedlog);        }      }    }  }}  }
class C{  public BaseItemRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  private void doServiceDescription(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final long tx=getBigdataRDFContext().newTx(getTimestamp(req));  try {    final AbstractTripleStore tripleStore=getBigdataRDFContext().getTripleStore(getNamespace(req),tx);    if (tripleStore == null) {      buildAndCommitNamespaceNotFoundResponse(req,resp);      return;    }    final String[] serviceURI=BigdataServlet.getServiceURIs(getServletContext(),req);    final Graph g=new LinkedHashModel();{      final SD sd=new SD(g,tripleStore,serviceURI);      final SparqlEndpointConfig config=getBigdataRDFContext().getConfig();      sd.describeService(true,config.describeEachNamedGraph);    }    sendGraph(req,resp,g);  } catch (  Throwable t) {    launderThrowable(t,resp,"");  } finally {    getBigdataRDFContext().abortTx(tx);  }}  }
class C{  private void updateAction(){  int numSynapses=networkPanel.getSelectedSynapses().size();  if (numSynapses > 0) {    String text=new String(("Edit " + numSynapses + ((numSynapses > 1) ? " Selected Synapses" : " Selected Synapse")));    putValue(NAME,text);    setEnabled(true);  } else {    putValue(NAME,"Edit Selected Synapse(s)");    setEnabled(false);  }}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey,Base64.DEFAULT);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }}  }
class C{  public Daemon(Map<String,String> properties){  this.properties=properties;}  }
class C{  public void genNodeDataMap(ParallelTask task){  TargetHostMeta targetHostMeta=task.getTargetHostMeta();  HttpMeta httpMeta=task.getHttpMeta();  String entityBody=httpMeta.getEntityBody();  String requestContent=HttpMeta.replaceDefaultFullRequestContent(entityBody);  Map<String,NodeReqResponse> parallelTaskResult=task.getParallelTaskResult();  for (  String fqdn : targetHostMeta.getHosts()) {    NodeReqResponse nodeReqResponse=new NodeReqResponse(fqdn);    nodeReqResponse.setDefaultReqestContent(requestContent);    parallelTaskResult.put(fqdn,nodeReqResponse);  }}  }
class C{  protected void determineActiveAttributes(){  TreeAttributes newAttributes=defaultAttributes;  if (this.isHighlighted()) {    if (this.getHighlightAttributes() != null)     newAttributes=this.getHighlightAttributes(); else {      if (this.getAttributes() != null)       newAttributes=this.getAttributes(); else       newAttributes=defaultAttributes;    }  } else   if (this.getAttributes() != null) {    newAttributes=this.getAttributes();  }  if (!newAttributes.equals(this.activeAttributes)) {    this.markUpdated();  }  this.activeAttributes.copy(newAttributes);}  }
class C{  public String path(){  return this.path;}  }
class C{  public title addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public double normF(){  double f=0;  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      f=Maths.hypot(f,A[i][j]);    }  }  return f;}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public DataServiceCallable(){}  }
class C{  private static void printDetectedAnnotatedCheckRepMethod(Method m){  String msg="ANNOTATION: Detected @CheckRep-annotated method \"" + m.toString() + "\". Will use it to check rep invariant of class "+ m.getDeclaringClass().getCanonicalName()+ " during generation.";  System.out.println(msg);}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,SecureRandom random) throws SecurityException, SignatureException, InvalidKeyException {  try {    return generateX509Certificate(key,"BC",random);  } catch (  NoSuchProviderException e) {    throw new SecurityException("BC provider not installed!");  }}  }
class C{  public static boolean isConnected(Context context){  NetworkInfo info=Connectivity.getNetworkInfo(context);  return (info != null && info.isConnected());}  }
class C{  @Override protected void doPreRender(KMLTraversalContext tc,DrawContext dc){  if (this.getRenderables() == null)   this.initializeGeometry(tc,this.getGeometry());  List<KMLRenderable> rs=this.getRenderables();  if (rs != null) {    for (    KMLRenderable r : rs) {      r.preRender(tc,dc);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  NamedNodeMap attributes;  Entity entity;  Notation notation;  Element element;  NodeList elementList;  Node newNode;  doc=(Document)load("staffNS",true);  docType=doc.getDoctype();  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entity=(Entity)entities.getNamedItem("ent1");  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)elementList.item(0);  attributes=element.getAttributes();{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(entity);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public boolean handleUnresolvedAttribute(AttributeExpression aexp){  return false;}  }
class C{  protected void clearOccupant(){  occupantRef=null;}  }
class C{  public boolean isEmpty(){  return getDimensions() == 1 && getBegin() == -1;}  }
class C{  private void configurationLoad(){  achievementsChronologicalOrder=plugin.getPluginConfig().getBoolean("BookChronologicalOrder",true);  tablePrefix=plugin.getPluginConfig().getString("TablePrefix","");  String dataHandler=plugin.getPluginConfig().getString("DatabaseType","sqlite");  if ("mysql".equalsIgnoreCase(dataHandler)) {    databaseType=MYSQL;    databaseAddress=plugin.getPluginConfig().getString("MYSQL.Database","jdbc:mysql://localhost:3306/minecraft");    databaseUser=plugin.getPluginConfig().getString("MYSQL.User","root");    databasePassword=plugin.getPluginConfig().getString("MYSQL.Password","root");  } else   if ("postgresql".equalsIgnoreCase(dataHandler)) {    databaseType=POSTGRESQL;    databaseAddress=plugin.getPluginConfig().getString("POSTGRESQL.Database","jdbc:postgresql://localhost:5432/minecraft");    databaseUser=plugin.getPluginConfig().getString("POSTGRESQL.User","root");    databasePassword=plugin.getPluginConfig().getString("POSTGRESQL.Password","root");  } else {    databaseType=SQLITE;  }}  }
class C{  public static Set<String> toSet(String s){  Set<String> newSet=new HashSet<String>();  if (s.startsWith("[") && s.endsWith("]")) {    s=s.substring(1,s.length() - 1);    String[] entries=s.split("\\,\\s");    for (    String entry : entries) {      newSet.add(entry);    }  } else {    throw new IllegalArgumentException("String is not from Set.toString()");  }  return newSet;}  }
class C{  protected void runPAMOptimization(DistanceQuery<V> distQ,DBIDs ids,ArrayModifiableDBIDs medoids,WritableIntegerDataStore assignment){  WritableDoubleDataStore nearest=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  WritableDoubleDataStore second=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  double tc=assignToNearestCluster(medoids,ids,nearest,second,assignment,distQ);  if (LOG.isStatistics()) {    LOG.statistics(new DoubleStatistic(KEY + ".iteration-" + 0+ ".cost",tc));  }  IndefiniteProgress prog=LOG.isVerbose() ? new IndefiniteProgress("PAM iteration",LOG) : null;  DBIDVar bestid=DBIDUtil.newVar();  DBIDArrayIter m=medoids.iter();  int iteration=1;  double[] cost=new double[k];  for (; maxiter <= 0 || iteration <= maxiter; iteration++) {    LOG.incrementProcessed(prog);    double best=Double.POSITIVE_INFINITY;    int bestcluster=-1;    for (DBIDIter h=ids.iter(); h.valid(); h.advance()) {      final int pm=assignment.intValue(h);      m.seek(pm);      double hdist=nearest.doubleValue(h);      if (DBIDUtil.equal(m,h) || hdist <= 0.) {        continue;      }      Arrays.fill(cost,-hdist);      for (DBIDIter j=ids.iter(); j.valid(); j.advance()) {        if (DBIDUtil.equal(h,j)) {          continue;        }        final int pj=assignment.intValue(j);        final double distcur=nearest.doubleValue(j);        final double distsec=second.doubleValue(j);        final double dist_h=distQ.distance(h,j);        if (dist_h < distcur) {          for (int pi=0; pi < k; pi++) {            if (pi == pj) {              cost[pi]+=((dist_h < distsec) ? dist_h : distsec) - distcur;            } else {              cost[pi]+=dist_h - distcur;            }          }        } else {          if (dist_h < distsec) {            cost[pj]+=dist_h - distcur;          } else {            cost[pj]+=distsec - distcur;          }        }      }      for (int pi=0; pi < k; pi++) {        if (cost[pi] < best) {          best=cost[pi];          bestid.set(h);          bestcluster=pi;        }      }    }    if (best >= 0.) {      break;    }    medoids.set(bestcluster,bestid);    double nc=assignToNearestCluster(medoids,ids,nearest,second,assignment,distQ);    if (LOG.isStatistics()) {      LOG.statistics(new DoubleStatistic(KEY + ".iteration-" + iteration+ ".cost",nc));    }    if (nc > tc) {      if (nc - tc < 1e-7 * tc) {        LOG.warning("PAM failed to converge (numerical instability?)");        break;      }      LOG.warning("PAM failed to converge: costs increased by: " + (nc - tc) + " exepected a decrease by "+ best);      break;    }    tc=nc;  }  LOG.setCompleted(prog);  if (LOG.isStatistics()) {    LOG.statistics(new LongStatistic(KEY + ".iterations",iteration));    LOG.statistics(new DoubleStatistic(KEY + ".iteration-" + iteration+ ".cost",tc));  }}  }
class C{  public RemoteRosterEntry(String user,String name,String[] groups){  this.user=user;  this.name=name;  if (groups != null) {    groupNames.addAll(Arrays.asList(groups));  }}  }
class C{  protected void sequence_TGetter(ISerializationContext context,TGetter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void minimize(){  int maxX=0;  int maxY=0;  int pad=5;  try {    maxX=this.nodes.stream().map(null).max(null).get();    maxY=this.nodes.stream().map(null).max(null).get();  } catch (  NoSuchElementException e) {  }  Dimension newDimension=new Dimension((maxX + pad),(maxY + pad));  this.setSize(newDimension);  this.swingNodeContainer.setPrefSize(newDimension.getWidth(),newDimension.getHeight());  this.repaint();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof KeyedObjects)) {    return false;  }  KeyedObjects that=(KeyedObjects)obj;  int count=getItemCount();  if (count != that.getItemCount()) {    return false;  }  for (int i=0; i < count; i++) {    Comparable k1=getKey(i);    Comparable k2=that.getKey(i);    if (!k1.equals(k2)) {      return false;    }    Object o1=getObject(i);    Object o2=that.getObject(i);    if (o1 == null) {      if (o2 != null) {        return false;      }    } else {      if (!o1.equals(o2)) {        return false;      }    }  }  return true;}  }
class C{  public int addFillStyle(FillStyle fs){  return fillstyles.add(fs) ? fillstyles.lastIndexOf(fs) + 1 : 0;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.532 -0400",hash_original_method="9C19363AC6FE6F140001E7099F182CB6",hash_generated_method="38087F6C7E7EAE7939E45753FC558FDC") public static int indexOfLastSeparator(String filename){  if (filename == null) {    return -1;  }  int lastUnixPos=filename.lastIndexOf(UNIX_SEPARATOR);  int lastWindowsPos=filename.lastIndexOf(WINDOWS_SEPARATOR);  return Math.max(lastUnixPos,lastWindowsPos);}  }
class C{  List<Integer> commands(Coordinate[] cs,boolean closePathAtEnd){  return commands(cs,closePathAtEnd,false);}  }
class C{  public void freeUniqueName(String name){  if (name != null) {synchronized (temporaryUniqueNames) {      temporaryUniqueNames.remove(name);    }  }}  }
class C{  public boolean shouldStart(){  return gameState == GameState.WAITING && isMinimumMet();}  }
class C{  public MapView(Context context){  this(context,null);}  }
class C{  public void manageWebAppBookmark(String url,String title,String operationType) throws AndroidAgentException {  final Intent bookmarkIntent=new Intent();  final Intent actionIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));  long urlHash=url.hashCode();  long uniqueId=(urlHash << MAX_URL_HASH) | actionIntent.hashCode();  actionIntent.putExtra(Browser.EXTRA_APPLICATION_ID,Long.toString(uniqueId));  bookmarkIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,actionIntent);  bookmarkIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME,title);  bookmarkIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,Intent.ShortcutIconResource.fromContext(context,R.drawable.ic_bookmark));  if (operationType != null) {    if (resources.getString(R.string.operation_install).equalsIgnoreCase(operationType)) {      bookmarkIntent.setAction(resources.getString(R.string.application_package_launcher_install_action));    } else     if (resources.getString(R.string.operation_uninstall).equalsIgnoreCase(operationType)) {      bookmarkIntent.setAction(resources.getString(R.string.application_package_launcher_uninstall_action));    } else {      throw new AndroidAgentException("Cannot create webclip due to invalid operation type.");    }  } else {    bookmarkIntent.setAction(resources.getString(R.string.application_package_launcher_install_action));  }  context.sendBroadcastAsUser(bookmarkIntent,android.os.Process.myUserHandle());}  }
class C{  public double doOperation() throws OperatorFailedException {  double logq=0;  double oldTreeHeight=tree.getNodeHeight(tree.getRoot());  NodeRef i, newParent, newChild;  ArrayList<NodeRef> potentialSubtrees=new ArrayList<NodeRef>();  int numPotentialSubtrees=this.getSlideableSubtrees(tree,potentialSubtrees);  i=potentialSubtrees.get(MathUtils.nextInt(numPotentialSubtrees));  NodeRef iP=tree.getParent(i);  NodeRef CiP=getOtherChild(tree,iP,i);  NodeRef PiP;  if (tree.isBifurcation(iP))   PiP=tree.getParent(iP); else {    PiP=tree.getParent(iP,MathUtils.nextInt(2));    logq-=Math.log(2);  }  double delta=getDelta();  double oldHeight=tree.getNodeHeight(iP);  double newHeight=oldHeight + delta;  if (delta > 0) {    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {      newParent=PiP;      newChild=iP;      while (tree.getNodeHeight(newParent) < newHeight) {        newChild=newParent;        if (tree.isBifurcation(newParent))         newParent=tree.getParent(newParent); else {          newParent=tree.getParent(newParent,MathUtils.nextInt(2));          logq-=Math.log(2);        }        if (newParent == null)         break;      }      tree.beginTreeEdit();      if (tree.isRoot(newChild)) {        if (true) {          tree.endTreeEdit();          try {            tree.checkTreeIsValid();          } catch (          MutableTree.InvalidTreeException e) {            e.printStackTrace();          }          throw new OperatorFailedException("Temporarily disable re-rooting");        }        tree.doubleRemoveChild(iP,CiP);        tree.doubleRemoveChild(PiP,iP);        tree.doubleAddChild(iP,newChild);        if (tree.isBifurcation(PiP))         tree.addChild(PiP,CiP); else         tree.addChild(PiP,CiP);        tree.setRoot(iP);      } else {        boolean doubly=tree.isBifurcationDoublyLinked(newParent);        tree.doubleRemoveChild(iP,CiP);        tree.doubleRemoveChild(PiP,iP);        tree.doubleRemoveChild(newParent,newChild);        tree.doubleAddChild(PiP,CiP);        if (!doubly) {          tree.doubleAddChild(iP,newChild);          tree.doubleAddChild(newParent,iP);        } else {          tree.singleAddChild(newParent,iP);          tree.singleAddChildWithOneParent(iP,newChild);          tree.singleAddChild(newParent,newChild);        }      }      tree.setNodeHeight(iP,newHeight);      tree.endTreeEdit();      try {        tree.checkTreeIsValid();      } catch (      MutableTree.InvalidTreeException ite) {        throw new RuntimeException(ite.toString());      }      int possibleSources=intersectingEdges(tree,newChild,iP,oldHeight,null);      logq-=Math.log(possibleSources);    } else {      tree.setNodeHeight(iP,newHeight);      logq=0.0;    }  } else {    if (tree.getNodeHeight(i) > newHeight) {      return Double.NEGATIVE_INFINITY;    }    if (tree.getNodeHeight(CiP) > newHeight) {      ArrayList<NodeRef[]> newChildren=new ArrayList<NodeRef[]>();      int possibleDestinations=intersectingEdges(tree,CiP,iP,newHeight,newChildren);      if (newChildren.size() == 0)       throw new OperatorFailedException("no valid destinations");      int childIndex=MathUtils.nextInt(newChildren.size());      NodeRef[] draw=(NodeRef[])newChildren.get(childIndex);      newChild=draw[1];      newParent=draw[0];      NodeRef oops=null;      tree.beginTreeEdit();      if (tree.isRoot(iP)) {        if (!tree.isBifurcation(CiP))         throw new OperatorFailedException("root cannot be a reassortment");        boolean doubly=tree.isBifurcationDoublyLinked(newParent);        tree.doubleRemoveChild(iP,CiP);        tree.doubleRemoveChild(newParent,newChild);        if (tree.isBifurcation(newChild))         tree.doubleAddChild(iP,newChild); else         tree.singleAddChildWithOneParent(iP,newChild);        if (!doubly)         tree.doubleAddChild(newParent,iP); else {          tree.singleAddChild(newParent,iP);          tree.singleAddChildWithOneParent(newParent,newChild);        }        tree.setRoot(CiP);      } else {        boolean doubly=tree.isBifurcationDoublyLinked(newParent);        tree.doubleRemoveChild(iP,CiP);        tree.doubleRemoveChild(PiP,iP);        tree.doubleRemoveChild(newParent,newChild);        if (tree.isBifurcation(newChild))         tree.doubleAddChild(iP,newChild); else         tree.singleAddChildWithOneParent(iP,newChild);        tree.doubleAddChild(PiP,CiP);        if (!doubly)         tree.doubleAddChild(newParent,iP); else {          tree.singleAddChild(newParent,iP);          tree.singleAddChildWithOneParent(newParent,newChild);        }      }      tree.setNodeHeight(iP,newHeight);      tree.endTreeEdit();      try {        tree.checkTreeIsValid();      } catch (      MutableTree.InvalidTreeException ite) {        throw new RuntimeException(ite.toString());      }      logq+=Math.log((double)possibleDestinations);    } else {      try {        tree.setNodeHeight(iP,newHeight);      } catch (      Exception e) {      }      logq=0.0;    }  }  if (tree.isBifurcationDoublyLinked(tree.getRoot()))   throw new OperatorFailedException("invalid slide");  if (!tree.validRoot())   throw new OperatorFailedException("Roots are invalid");  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException("invalid slide");  if (scaledDirichletBranches) {    if (oldTreeHeight != tree.getNodeHeight(tree.getRoot()))     throw new OperatorFailedException("Temporarily disabled.");  }  return logq;}  }
class C{  public IMqttToken subscribe(String[] topicFilters,int[] qos,IMqttMessageListener[] messageListeners) throws MqttException {  return subscribe(topicFilters,qos,null,null,messageListeners);}  }
class C{  public void writeDataFile(OutputStream outStream) throws DataFileException {  writeRecords(outStream,this.records);}  }
class C{  public CorrelationAnalysisSolution<V> generateModel(Relation<V> relation,DBIDs ids,double[] centroid){  CorrelationAnalysisSolution<V> sol;  if (LOG.isDebuggingFine()) {    LOG.debugFine("PCA...");  }  SortedEigenPairs epairs=pca.processIds(ids,relation).getEigenPairs();  int numstrong=filter.filter(epairs.eigenValues());  PCAFilteredResult pcares=new PCAFilteredResult(epairs,numstrong,1.,0.);  double[][] weakEigenvectors=pcares.getWeakEigenvectors();  double[][] strongEigenvectors=pcares.getStrongEigenvectors();  if (weakEigenvectors[0].length == 0) {    sol=new CorrelationAnalysisSolution<>(null,relation,strongEigenvectors,weakEigenvectors,pcares.similarityMatrix(),centroid);  } else {    double[][] transposedWeakEigenvectors=transpose(weakEigenvectors);    if (LOG.isDebugging()) {      StringBuilder log=new StringBuilder();      log.append("Strong Eigenvectors:\n");      FormatUtil.formatTo(log,pcares.getStrongEigenvectors()," [","]\n",", ",nf).append('\n');      log.append("Transposed weak Eigenvectors:\n");      FormatUtil.formatTo(log,transposedWeakEigenvectors," [","]\n",", ",nf).append('\n');      log.append("Eigenvalues:\n");      log.append(FormatUtil.format(pcares.getEigenvalues(),", ",nf));      LOG.debugFine(log.toString());    }    double[] b=times(transposedWeakEigenvectors,centroid);    if (LOG.isDebugging()) {      StringBuilder log=new StringBuilder();      log.append("Centroid:\n").append(centroid).append('\n');      log.append("tEV * Centroid\n");      log.append(FormatUtil.format(b));      LOG.debugFine(log.toString());    }    double[][] gaussJordan=new double[transposedWeakEigenvectors.length][transposedWeakEigenvectors[0].length + 1];    setMatrix(gaussJordan,0,transposedWeakEigenvectors.length - 1,0,transposedWeakEigenvectors[0].length - 1,transposedWeakEigenvectors);    setCol(gaussJordan,transposedWeakEigenvectors[0].length,b);    if (LOG.isDebuggingFiner()) {      LOG.debugFiner("Gauss-Jordan-Elimination of " + FormatUtil.format(gaussJordan," [","]\n",", ",nf));    }    double[][] a=new double[transposedWeakEigenvectors.length][transposedWeakEigenvectors[0].length];    System.arraycopy(transposedWeakEigenvectors,0,a,0,transposedWeakEigenvectors.length);    LinearEquationSystem lq=new LinearEquationSystem(a,b);    lq.solveByTotalPivotSearch();    sol=new CorrelationAnalysisSolution<>(lq,relation,strongEigenvectors,pcares.getWeakEigenvectors(),pcares.similarityMatrix(),centroid);    if (LOG.isDebuggingFine()) {      StringBuilder log=new StringBuilder();      log.append("Solution:\n");      log.append("Standard deviation ").append(sol.getStandardDeviation());      log.append(lq.equationsToString(nf.getMaximumFractionDigits()));      LOG.debugFine(log.toString());    }  }  return sol;}  }
class C{  @Override public boolean isUseableByPlayer(EntityPlayer player){  return this.worldObj.getTileEntity(this.pos) != this ? false : player.getDistanceSq(this.pos.getX() + 0.5D,this.pos.getY() + 0.5D,this.pos.getZ() + 0.5D) <= 64.0D;}  }
class C{  private void coalesceRemainingClusters(){}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double sumOfTheSquares;  double average;  double stdDev;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  double alpha;  double globalMean;  double predefinedStdDev;  double yij=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSizeX=Integer.parseInt(args[2]);  filterSizeY=Integer.parseInt(args[3]);  alpha=Double.parseDouble(args[4]);  if (alpha < 0 || alpha > 1.0) {    showFeedback("The alpha parameter should be within the range of \n0.0 and 1.0. Please reset and try again.");    return;  }  globalMean=Double.parseDouble(args[5]);  predefinedStdDev=Double.parseDouble(args[6]);  filterRounded=Boolean.parseBoolean(args[7]);  reflectAtBorders=Boolean.parseBoolean(args[8]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=filterShape[a];              sum+=z * filterShape[a];              sumOfTheSquares+=(z * filterShape[a]) * z;            }          }          if (n > 2) {            average=sum / n;            stdDev=(sumOfTheSquares / n) - (average * average);            if (stdDev > 0) {              stdDev=Math.sqrt(stdDev);              if (alpha >= 0 && alpha <= 1) {                yij=(alpha * globalMean) + ((1 - alpha) * average) + (z - average) * (predefinedStdDev / (stdDev + 1));                outputFile.setValue(row,col,yij);              }            } else {              outputFile.setValue(row,col,noData);            }          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void drawLabels(Canvas c,float pos){  float[] position=new float[]{0f,0f};  for (int i=mMinX; i <= mMaxX; i+=mXAxis.mAxisLabelModulus) {    position[0]=i;    mTrans.pointValuesToPixel(position);    if (mViewPortHandler.isInBoundsX(position[0])) {      String label=mXAxis.getValues().get(i);      if (mXAxis.isAvoidFirstLastClippingEnabled()) {        if (i == mXAxis.getValues().size() - 1 && mXAxis.getValues().size() > 1) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          if (width > mViewPortHandler.offsetRight() * 2 && position[0] + width > mViewPortHandler.getChartWidth())           position[0]-=width / 2;        } else         if (i == 0) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          position[0]+=width / 2;        }      }      c.drawText(label,position[0],pos,mAxisLabelPaint);    }  }}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ReferencingElement_IM.class) {switch (baseFeatureID) {case ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET:      return ImPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION_IM__REWIRED_TARGET;default :    return -1;}}if (baseClass == ReferencingElementExpression_IM.class) {switch (baseFeatureID) {default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static void main(String[] args){  final int NUMBER_OF_CHARS_PER_LINE=10;  char ch1='1';  char ch2='Z';  System.out.println("\nCharacters per 1 to Z");  printChars(ch1,ch2,NUMBER_OF_CHARS_PER_LINE);  System.out.println();}  }
class C{  private void testIsoWeekJanuary1thWednesday() throws Exception {  assertEquals(52,getIsoWeek(parse("2002-12-28")));  assertEquals(52,getIsoWeek(parse("2002-12-29")));  assertEquals(1,getIsoWeek(parse("2002-12-30")));  assertEquals(1,getIsoWeek(parse("2002-12-31")));  assertEquals(1,getIsoWeek(parse("2003-01-01")));  assertEquals(1,getIsoWeek(parse("2003-01-05")));  assertEquals(2,getIsoWeek(parse("2003-01-06")));}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (!learningphase) {    return;  }  int num_classes=(int)(snumClasses);  HashMap<Integer,Double> data=new HashMap<Integer,Double>();  HashMap<Integer,Double> labels=new HashMap<Integer,Double>();  int numChanges=0;  int numCategories_1=numCategories - 1;  numinstances+=1;  if (!instance.classIsMissing()) {    for (Integer tj=0; tj < instance.numValues(); tj++) {      int j=instance.index(tj);      double da=instance.value(j);      if (da == 0) {        continue;      }      if (j < num_classes) {        labels.put(j,da);      } else {        data.put(j - num_classes,da);      }    }    SortPair2[] cateacti=ARTActivateCategories(data,labels);    java.util.Arrays.sort(cateacti);    boolean resonance=false;    int currentSortedIndex=0;    int currentCategory=-1;    double matchA=0;    while (!resonance && currentSortedIndex < cateacti.length) {      currentCategory=cateacti[currentSortedIndex].getOriginalIndex();      if (currentCategory == numCategories_1) {        matchA=1;      } else {        matchA=(cateacti[currentSortedIndex].getRawValue() / snumFeatures);      }      if (matchA >= roa) {        if (currentCategory == numCategories_1) {          if (currentSortedIndex == maxNumCategories) {            System.out.println("WARNING: The maximum number of categories has been reached.");            resonance=true;          } else {            sweightsA[currentCategory]=0;            Set<Integer> s1=data.keySet();            for (            Integer j : s1) {              Double da=data.get(j);              weightsA[currentCategory].put(j,da);              weightsA[currentCategory].put(j + snumFeatures,da);              upweightsA[currentCategory].add(j + snumFeatures);            }            Set<Integer> s2=weightsA[currentCategory].keySet();            int count=0;            for (            int j : s2) {              double da=(Double)weightsA[currentCategory].get(j);              if (j < snumFeatures) {                sweightsA[currentCategory]+=da;              } else {                sweightsA[currentCategory]+=1 - da;                count+=1;              }            }            sweightsA[currentCategory]+=snumFeatures - count;            s1=labels.keySet();            for (            int j : s1) {              weightsB[currentCategory].put(j,labels.get(j));            }            String s=labels.keySet().toString();            if (hmclasses.containsKey(s)) {              hmclasses.get(s).add(currentCategory);              hmclasses.put(s,hmclasses.get(s));            } else {              Vector<Integer> v=new Vector<Integer>();              v.add(currentCategory);              hmclasses.put(s,v);            }            ARAMm_Add_New_Category();            numChanges=numChanges + 1;            resonance=true;            break;          }        } else {          double weightChange=ARAMm_Update_Weights(data,labels,currentCategory);          if (weightChange == 1) {            numChanges+=1;          }          resonance=true;          break;        }      } else {        currentSortedIndex+=1;        resonance=false;      }    }    if (!resonance && currentSortedIndex >= cateacti.length) {      sweightsA[numCategories_1]=0;      Set<Integer> s1=data.keySet();      int count=0;      for (      int j : s1) {        double da=data.get(j);        weightsA[numCategories_1].put(j,da);        sweightsA[numCategories_1]+=da;        weightsA[numCategories_1].put(j + snumFeatures,da);        sweightsA[numCategories_1]+=1 - da;        upweightsA[numCategories_1].add(j + snumFeatures);        count+=1;      }      sweightsA[numCategories_1]+=snumFeatures - count;      s1=labels.keySet();      for (      int j : s1) {        weightsB[numCategories_1].put(j,labels.get(j));      }      String s=labels.keySet().toString();      if (hmclasses.containsKey(s)) {        hmclasses.get(s).add(numCategories_1);        hmclasses.put(s,hmclasses.get(s));      } else {        Vector<Integer> v=new Vector<Integer>();        v.add(numCategories_1);        hmclasses.put(s,v);      }      ARAMm_Add_New_Category();      numChanges=numChanges + 1;    }  }}  }
class C{  @Override public void changeCursor(Cursor c){  if (DBG)   Log.d(LOG_TAG,"changeCursor(" + c + ")");  if (mClosed) {    Log.w(LOG_TAG,"Tried to change cursor after adapter was closed.");    if (c != null)     c.close();    return;  }  try {    super.changeCursor(c);    if (c != null) {      mText1Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_1);      mText2Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2);      mText2UrlCol=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2_URL);      mIconName1Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_1);      mIconName2Col=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_ICON_2);      mFlagsCol=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_FLAGS);    }  } catch (  Exception e) {    Log.e(LOG_TAG,"error changing cursor and caching columns",e);  }}  }
class C{  public ApiConfig(String apiKey,String accessToken){  this(apiKey);  mAccessToken=accessToken;}  }
class C{  public void addExtension(Extension extension){  fExtensions.add(extension);}  }
class C{  private void addWorkerFailed(Worker w){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    if (w != null)     workers.remove(w);    decrementWorkerCount();    tryTerminate();  }  finally {    mainLock.unlock();  }}  }
class C{  public BoolQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  protected void addAffectedChild(JavaElementDelta child){switch (this.kind) {case ADDED:case REMOVED:    return;case CHANGED:  this.changeFlags|=F_CHILDREN;break;default :this.kind=CHANGED;this.changeFlags|=F_CHILDREN;}if (this.changedElement.getElementType() >= IJavaElement.COMPILATION_UNIT) {fineGrained();}if (this.affectedChildren == null || this.affectedChildren.length == 0) {this.affectedChildren=new IJavaElementDelta[]{child};return;}JavaElementDelta existingChild=null;int existingChildIndex=-1;for (int i=0; i < this.affectedChildren.length; i++) {if (equalsAndSameParent(this.affectedChildren[i].getElement(),child.getElement())) {existingChild=(JavaElementDelta)this.affectedChildren[i];existingChildIndex=i;break;}}if (existingChild == null) {this.affectedChildren=growAndAddToArray(this.affectedChildren,child);} else {switch (existingChild.getKind()) {case ADDED:switch (child.getKind()) {case ADDED:case CHANGED:return;case REMOVED:this.affectedChildren=removeAndShrinkArray(this.affectedChildren,existingChildIndex);return;}break;case REMOVED:switch (child.getKind()) {case ADDED:child.kind=CHANGED;this.affectedChildren[existingChildIndex]=child;return;case CHANGED:case REMOVED:return;}break;case CHANGED:switch (child.getKind()) {case ADDED:case REMOVED:this.affectedChildren[existingChildIndex]=child;return;case CHANGED:IJavaElementDelta[] children=child.getAffectedChildren();for (int i=0; i < children.length; i++) {JavaElementDelta childsChild=(JavaElementDelta)children[i];existingChild.addAffectedChild(childsChild);}boolean childHadContentFlag=(child.changeFlags & F_CONTENT) != 0;boolean existingChildHadChildrenFlag=(existingChild.changeFlags & F_CHILDREN) != 0;existingChild.changeFlags|=child.changeFlags;if (childHadContentFlag && existingChildHadChildrenFlag) {existingChild.changeFlags&=~F_CONTENT;}IResourceDelta[] resDeltas=child.getResourceDeltas();if (resDeltas != null) {existingChild.resourceDeltas=resDeltas;existingChild.resourceDeltasCounter=child.resourceDeltasCounter;}return;}break;default :int flags=existingChild.getFlags();this.affectedChildren[existingChildIndex]=child;child.changeFlags|=flags;}}}  }
class C{  public DefaultInputHandler(){  bindings=currentBindings=new Hashtable<KeyStroke,Object>();}  }
class C{  @Override @SuppressWarnings("unchecked") public Set<ObjectName> queryNames(final ObjectName objectName,final QueryExp queryExpression){  final Link link=findLink(MBEAN_QUERY_LINK_RELATION);  if (link != null) {    final ClientHttpRequest request=createHttpRequest(link);    request.setContent(new QueryParameterSource(objectName,queryExpression));    final ResponseEntity<byte[]> response=send(request,byte[].class);    try {      return (Set<ObjectName>)IOUtils.deserializeObject(response.getBody());    } catch (    Exception e) {      throw new MBeanAccessException(String.format("An error occurred while querying for MBean names using ObjectName pattern (%1$s) and Query expression (%2$s)!",objectName,queryExpression),e);    }  } else {    printSevere("Running a query to get the ObjectNames of all MBeans matching the ObjectName pattern (%1$s) and Query expression (%2$s) is currently unsupported!",objectName,queryExpression);    throw new RestApiCallForCommandNotFoundException(MBEAN_QUERY_LINK_RELATION);  }}  }
class C{  public static long[] toLongArray(Character[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=((long)array[i].charValue());  }  return result;}  }
class C{  public void stop(){  try {    if (surfaceView != null && surfaceHolderCallback != null) {      surfaceView.getHolder().removeCallback(surfaceHolderCallback);    }    if (cameraRunning && cameraSource != null) {      cameraSource.stop();      cameraRunning=false;    }  } catch (  Exception ie) {    Log.e(LOGTAG,ie.getMessage());    ie.printStackTrace();  }}  }
class C{  public static void buildAllowHeader(Message msg) throws ParseException {  msg.addHeader(HEADER_FACTORY.createAllowHeader(Request.INVITE));  msg.addHeader(HEADER_FACTORY.createAllowHeader(Request.UPDATE));  msg.addHeader(HEADER_FACTORY.createAllowHeader(Request.ACK));  msg.addHeader(HEADER_FACTORY.createAllowHeader(Request.CANCEL));  msg.addHeader(HEADER_FACTORY.createAllowHeader(Request.BYE));  msg.addHeader(HEADER_FACTORY.createAllowHeader(Request.NOTIFY));  msg.addHeader(HEADER_FACTORY.createAllowHeader(Request.OPTIONS));  msg.addHeader(HEADER_FACTORY.createAllowHeader(Request.MESSAGE));  msg.addHeader(HEADER_FACTORY.createAllowHeader(Request.REFER));}  }
class C{  public void writeString(byte[] string) throws IOException {  flushBits();  if (string != null) {    out.write(string);  }  out.write(0);  bytesWritten+=string.length + 1;}  }
class C{  public GenericEntity(String name,String pubId,String sysId,AbstractDocument owner){  ownerDocument=owner;  setNodeName(name);  setPublicId(pubId);  setSystemId(sysId);}  }
class C{  public ResourceCache(){  this(WebConfiguration.getInstance());}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Fieldref_info cu=(CONSTANT_Fieldref_info)cp;  i=constant_pool[class_index].compareTo(constant_pool,cp_constant_pool[cu.class_index],cp_constant_pool);  if (i != 0)   return i;  return constant_pool[name_and_type_index].compareTo(constant_pool,cp_constant_pool[cu.name_and_type_index],cp_constant_pool);}  }
class C{  public void inverseTransform(double[] srcPts,int srcOff,double[] dstPts,int dstOff,int numPts) throws NoninvertibleTransformException {  double M00, M01, M02, M10, M11, M12;  double det;  if (dstPts == srcPts && dstOff > srcOff && dstOff < srcOff + numPts * 2) {    System.arraycopy(srcPts,srcOff,dstPts,dstOff,numPts * 2);    srcOff=dstOff;  }switch (state) {default :    stateError();  return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M01=m01;M02=m02;M10=m10;M11=m11;M12=m12;det=M00 * M11 - M01 * M10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}while (--numPts >= 0) {double x=srcPts[srcOff++] - M02;double y=srcPts[srcOff++] - M12;dstPts[dstOff++]=(x * M11 - y * M01) / det;dstPts[dstOff++]=(y * M00 - x * M10) / det;}return;case (APPLY_SHEAR | APPLY_SCALE):M00=m00;M01=m01;M10=m10;M11=m11;det=M00 * M11 - M01 * M10;if (Math.abs(det) <= Double.MIN_VALUE) {throw new NoninvertibleTransformException("Determinant is " + det);}while (--numPts >= 0) {double x=srcPts[srcOff++];double y=srcPts[srcOff++];dstPts[dstOff++]=(x * M11 - y * M01) / det;dstPts[dstOff++]=(y * M00 - x * M10) / det;}return;case (APPLY_SHEAR | APPLY_TRANSLATE):M01=m01;M02=m02;M10=m10;M12=m12;if (M01 == 0.0 || M10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}while (--numPts >= 0) {double x=srcPts[srcOff++] - M02;dstPts[dstOff++]=(srcPts[srcOff++] - M12) / M10;dstPts[dstOff++]=x / M01;}return;case (APPLY_SHEAR):M01=m01;M10=m10;if (M01 == 0.0 || M10 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}while (--numPts >= 0) {double x=srcPts[srcOff++];dstPts[dstOff++]=srcPts[srcOff++] / M10;dstPts[dstOff++]=x / M01;}return;case (APPLY_SCALE | APPLY_TRANSLATE):M00=m00;M02=m02;M11=m11;M12=m12;if (M00 == 0.0 || M11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}while (--numPts >= 0) {dstPts[dstOff++]=(srcPts[srcOff++] - M02) / M00;dstPts[dstOff++]=(srcPts[srcOff++] - M12) / M11;}return;case (APPLY_SCALE):M00=m00;M11=m11;if (M00 == 0.0 || M11 == 0.0) {throw new NoninvertibleTransformException("Determinant is 0");}while (--numPts >= 0) {dstPts[dstOff++]=srcPts[srcOff++] / M00;dstPts[dstOff++]=srcPts[srcOff++] / M11;}return;case (APPLY_TRANSLATE):M02=m02;M12=m12;while (--numPts >= 0) {dstPts[dstOff++]=srcPts[srcOff++] - M02;dstPts[dstOff++]=srcPts[srcOff++] - M12;}return;case (APPLY_IDENTITY):if (srcPts != dstPts || srcOff != dstOff) {System.arraycopy(srcPts,srcOff,dstPts,dstOff,numPts * 2);}return;}}  }
class C{  private boolean checkForMatchingExportMask(String maskName,String nativeId,URI device){  URIQueryResultList uriQueryList=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExportMaskByNameConstraint(maskName),uriQueryList);  while (uriQueryList.iterator().hasNext()) {    ExportMask exportMask=_dbClient.queryObject(ExportMask.class,uriQueryList.iterator().next());    if (exportMask != null && !exportMask.getInactive() && exportMask.getNativeId().equals(nativeId) && exportMask.getStorageDevice().equals(device)) {      return true;    }  }  return false;}  }
class C{  private void addTaskToNPC(final int idx){  final String state=points.get(idx);  final SpeakerNPC npc=npcs.get(state);  npc.add(ConversationStates.ATTENDING,Arrays.asList("paper","chase","paperchase"),new SystemPropertyCondition("stendhal.minetown"),ConversationStates.ATTENDING,null,new PaperChasePoint(idx));  if (NPC_IDLE.contains(state)) {    npc.add(ConversationStates.ANY,Arrays.asList("paper","chase","paperchase"),new SystemPropertyCondition("stendhal.minetown"),ConversationStates.ANY,null,new PaperChasePoint(idx));  }}  }
class C{  @Override protected void deleteMetadata(final DistributionSet entity,final String key,final String value){  distributionSetManagement.deleteDistributionSetMetadata(entity,key);}  }
class C{  public static String readTextFile(String fileName) throws IOException {  byte[] buff=readFile(fileName);  String s=new String(buff);  return s;}  }
class C{  public void write(byte b[]) throws IOException {  this.write(b,0,b.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.256 -0400",hash_original_method="57A7B93C54DE606B88D21BB5B70A1986",hash_generated_method="796F8DC669CDBAEECBF0B712EB668290") private Comparable<? super K> comparable(Object key) throws ClassCastException {  if (key == null)   throw new NullPointerException();  if (comparator != null)   return new ComparableUsingComparator<K>((K)key,comparator); else   return (Comparable<? super K>)key;}  }
class C{  @Override public void plotChanged(PlotChangeEvent event){  event.setChart(this);  notifyListeners(event);}  }
class C{  protected static TestSuite addAll(Vector<String> classnames){  int i;  Class<?> tc;  TestSuite result;  result=new TestSuite();  for (i=0; i < classnames.size(); i++) {    tc=testClassFor(classnames.get(i));    if (tc != null) {      result.addTest(new TestSuite(tc));    }  }  return result;}  }
class C{  public boolean containsValue(Object value){  if (value == null)   return false;  return m_values.contains(value);}  }
class C{  public static boolean isSignedIn(Context context){  return getAccount(context) != null;}  }
class C{  @Override public boolean flingToBeginning(Selector obj,boolean isVertical,int maxSwipes) throws UiObjectNotFoundException {  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());  if (isVertical)   scrollable.setAsVerticalList(); else   scrollable.setAsHorizontalList();  return scrollable.flingToBeginning(maxSwipes);}  }
class C{  private void scanClassAttribute(InputStream is) throws IOException {  int nameIndex=readShort(is);  int length=readInt(is);  if (!isNameAnnotation(nameIndex)) {    is.skip(length);    return;  }  int count=readShort(is);  for (int i=0; i < count; i++) {    int annTypeIndex=scanAnnotation(is);    if (annTypeIndex > 0) {      _matcher.addClassAnnotation(_charBuffer,_cpData[annTypeIndex] + 1,_cpLengths[annTypeIndex] - 2);    }  }}  }
class C{  public T caseAutouniqueAttribute_(AutouniqueAttribute_ object){  return null;}  }
class C{  public IIOMetadataNode(String nodeName){  this.nodeName=nodeName;}  }
class C{  public SphereRegion(Match match,Vector origin,double radius){  super(new RegionBounds(match,Cuboid.between(new Vector(origin.getX() - radius,origin.getY() - radius,origin.getZ() - radius),new Vector(origin.getX() + radius,origin.getY() + radius,origin.getZ() + radius))));  this.origin=origin;  this.radius=radius;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void writeObjectEntrySeparator(JsonGenerator jg) throws IOException, JsonGenerationException {  jg.writeRaw(',');}  }
class C{  public void reset(){  index=0;}  }
class C{  private void _fillChildSlots(final int slot,final int offset,final int length,final int depth){  assert !isReadOnly();  if (slot == offset && length == 1) {    assert childRefs[offset] != null;    return;  }  if (slot >= offset && slot < (offset + length)) {    final int delta=length / 2;    _fillChildSlots(slot,offset,delta,depth + 1);    _fillChildSlots(slot,offset + delta,delta,depth + 1);  } else {    final BucketPage bp=new BucketPage((HTree)htree,depth);    bp.parent=(Reference<DirectoryPage>)self;    ((HTree)htree).nleaves++;    for (int s=0; s < length; s++) {      if (isReadOnly())       assert !isReadOnly();      assert childRefs[offset + s] == null;      childRefs[offset + s]=(Reference<AbstractPage>)bp.self;    }  }}  }
class C{  protected void addReferencePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ServiceRef_reference_feature"),getString("_UI_PropertyDescriptor_description","_UI_ServiceRef_reference_feature","_UI_ServiceRef_type"),EipPackage.Literals.SERVICE_REF__REFERENCE,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  protected void logNotSupportedMessage(final String functionality){  Gdx.app.log(DragomeApplication.LOGGING_TAG,functionality + " is not supported on Dragome backend.");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:58.525 -0500",hash_original_method="A5F62C761E9F9A46D1D6185CEC65084F",hash_generated_method="E40F5F22E972A72C70D03CD93ED05067") public void addEventChargingFunctionAddress(String ecfAddress) throws ParseException {  if (ecfAddress == null)   throw new NullPointerException("JAIN-SIP Exception, " + "P-Charging-Function-Addresses, setEventChargingFunctionAddress(), the ecfAddress parameter is null.");  this.parameters.set(ParameterNamesIms.ECF,ecfAddress);}  }
class C{  public static boolean isRuleWhiteSpace(int c){  return (c >= 0x0009 && c <= 0x2029 && (c <= 0x000D || c == 0x0020 || c == 0x0085 || c == 0x200E || c == 0x200F || c >= 0x2028));}  }
class C{  public void testUnivariateTEVariousNumberThreads() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={4};  double[] expectedFromTRENTOOL={-0.0096556};  System.out.println("Kraskov Cond MI as TE - multivariate coupled data 1, k=2,l=2 (0->2)");  System.out.println(" with various numbers of threads:");  System.out.println(" -- 1 thread:");  NUM_THREADS_TO_USE="1";  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,expectedFromTRENTOOL);  System.out.println(" -- 2 threads:");  NUM_THREADS_TO_USE="2";  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,expectedFromTRENTOOL);  System.out.println(" -- 3 threads:");  NUM_THREADS_TO_USE="3";  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,expectedFromTRENTOOL);  System.out.println(" -- all threads:");  NUM_THREADS_TO_USE=ConditionalMutualInfoCalculatorMultiVariateKraskov.USE_ALL_THREADS;  checkTEForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1}),kNNs,expectedFromTRENTOOL);  double[] expectedValue=new double[]{0.026517704};  NUM_THREADS_TO_USE="2";  checkTEForGivenData(MatrixUtils.selectRows(MatrixUtils.selectColumns(data,new int[]{0}),0,501),MatrixUtils.selectRows(MatrixUtils.selectColumns(data,new int[]{1}),0,501),kNNs,expectedValue);  NUM_THREADS_TO_USE="3";  checkTEForGivenData(MatrixUtils.selectRows(MatrixUtils.selectColumns(data,new int[]{0}),0,501),MatrixUtils.selectRows(MatrixUtils.selectColumns(data,new int[]{1}),0,501),kNNs,expectedValue);  NUM_THREADS_TO_USE=NUM_THREADS_TO_USE_DEFAULT;}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null || getClass() != obj.getClass())   return false;  MessageFormat other=(MessageFormat)obj;  return (maxOffset == other.maxOffset && pattern.equals(other.pattern) && ((locale != null && locale.equals(other.locale)) || (locale == null && other.locale == null)) && Arrays.equals(offsets,other.offsets) && Arrays.equals(argumentNumbers,other.argumentNumbers) && Arrays.equals(formats,other.formats));}  }
class C{  public int encodeBase64Chunk(int b24,char[] buffer,int ptr){  buffer[ptr++]=_base64ToAsciiC[(b24 >> 18) & 0x3F];  buffer[ptr++]=_base64ToAsciiC[(b24 >> 12) & 0x3F];  buffer[ptr++]=_base64ToAsciiC[(b24 >> 6) & 0x3F];  buffer[ptr++]=_base64ToAsciiC[b24 & 0x3F];  return ptr;}  }
class C{  public CLimitedInputField(final String text){  super(new JTextFieldLimit(30000),text,0);}  }
class C{  public static boolean supportsAdd(int type){switch (type) {case Value.BYTE:case Value.DECIMAL:case Value.DOUBLE:case Value.FLOAT:case Value.INT:case Value.LONG:case Value.SHORT:    return true;default :  return false;}}  }
class C{  public UIAcceleration(){  super();  x=y=z=0.0f;}  }
class C{  @Override protected void onResume(){  super.onResume();  startCameraSource();}  }
class C{  public boolean contains(Object o){  return indexOf(o) != -1;}  }
class C{  static String quote(String value){  if (value == null) {    return "null";  }  return "\"" + StringEscapeUtils.escapeJson(value) + "\"";}  }
class C{  public void clearSnapShot(String name,String... keySpaces) throws IOException {  getProbe().clearSnapshot(name,keySpaces);}  }
class C{  public void updateSQLXML(String columnName,SQLXML xmlObject) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  private static double calculateSpeedupPercentage(double baseScore,double targetScore){  return ((targetScore - baseScore) * 100) / baseScore;}  }
class C{  private Node<K,V> findNode(Comparable<? super K> key){  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c == 0)       return n;      if (c < 0)       return null;      b=n;      n=f;    }  }}  }
class C{  public void testGetColorsByLevel(){  try {    for (    String colorLevel : MaterialPalettes.NON_ACCENT_COLOR_LEVELS) {      List<Integer> colors=MaterialPalettes.getColorsByLevel(colorLevel);      assertEquals(MaterialPalettes.ALL_COLOR_NAMES.length,colors.size());    }  } catch (  IllegalAccessException iae) {    fail();  }  try {    for (    String colorLevel : MaterialPalettes.ACCENT_COLOR_LEVELS) {      List<Integer> colors=MaterialPalettes.getColorsByLevel(colorLevel);      assertEquals(MaterialPalettes.COLORS_WITH_ACCENT_NAMES.length,colors.size());    }  } catch (  IllegalAccessException iae) {    fail();  }  try {    List<Integer> colors=MaterialPalettes.getColorsByName("");    fail();  } catch (  IllegalArgumentException iae) {  }catch (  IllegalAccessException iae1) {    fail();  }  try {    List<Integer> colors=MaterialPalettes.getColorsByLevel(null);    fail();  } catch (  IllegalArgumentException iae) {  }catch (  IllegalAccessException iae1) {    fail();  }}  }
class C{  public static String repeat(String str,int count){  final StringBuilder result=new StringBuilder(str.length() * count);  for (int i=0; i < count; i++) {    result.append(str);  }  return result.toString();}  }
class C{  public OMCircle(double latPoint,double lonPoint,int w,int h){  this(latPoint,lonPoint,0,0,w,h);}  }
class C{  private void writeOutput(SortedSet<String> ASCIITLDs) throws IOException {  final DateFormat dateFormat=DateFormat.getDateTimeInstance(DateFormat.FULL,DateFormat.FULL,Locale.ROOT);  dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));  final Writer writer=new OutputStreamWriter(new FileOutputStream(outputFile),StandardCharsets.UTF_8);  try {    writer.write(APACHE_LICENSE);    writer.write("// Generated from IANA Root Zone Database <");    writer.write(tldFileURL.toString());    writer.write(">");    writer.write(NL);    if (tldFileLastModified > 0L) {      writer.write("// file version from ");      writer.write(dateFormat.format(tldFileLastModified));      writer.write(NL);    }    writer.write("// generated on ");    writer.write(dateFormat.format(new Date()));    writer.write(NL);    writer.write("// by ");    writer.write(this.getClass().getName());    writer.write(NL);    writer.write(NL);    writer.write("ASCIITLD = \".\" (");    writer.write(NL);    boolean isFirst=true;    for (    String ASCIITLD : ASCIITLDs) {      writer.write("\t");      if (isFirst) {        isFirst=false;        writer.write("  ");      } else {        writer.write("| ");      }      writer.write(getCaseInsensitiveRegex(ASCIITLD));      writer.write(NL);    }    writer.write("\t) \".\"?   // Accept trailing root (empty) domain");    writer.write(NL);    writer.write(NL);  }  finally {    writer.close();  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void export(){  if (byteBuffer != null)   return;  if (clBuffer == null)   throw new UnsupportedOperationException("The device buffer has already been released.");  if (getByteCount() > Integer.MAX_VALUE)   throw new UnsupportedOperationException("Buffer byte count exceeds java.nio.ByteBuffer maximum capacity");  byteBuffer=ByteBuffer.allocateDirect((int)getByteCount()).order(clQueue.getDevice().getByteOrder());  clBuffer.read(clQueue,(Pointer<Byte>)Pointer.pointerToBuffer(byteBuffer),true,updateEvent);  release();}  }
class C{  @Override public void mouseDragged(java.awt.event.MouseEvent e){  repaintConnectors(e);  if (createdFigure != null) {    createdFigure.willChange();    Point2D.Double endPoint=viewToDrawing(new Point(e.getX(),e.getY()));    getView().getConstrainer().constrainPoint(endPoint);    Figure endFigure=getDrawing().findFigureExcept(endPoint,createdFigure);    endConnector=(endFigure == null) ? null : endFigure.findConnector(endPoint,prototype);    if (endConnector != null && canConnect(createdFigure,startConnector,endConnector)) {      endPoint=endConnector.getAnchor();    }    Rectangle r=new Rectangle(getView().drawingToView(createdFigure.getEndPoint()));    createdFigure.setEndPoint(endPoint);    r.add(getView().drawingToView(endPoint));    r.grow(ANCHOR_WIDTH + 2,ANCHOR_WIDTH + 2);    getView().getComponent().repaint(r);    createdFigure.changed();  }}  }
class C{  public int deleteAll(){  Query query=model.dialect().deleteAll(model);  query.use(db());  return query.execute();}  }
class C{  public void proceed(int priority) throws InterruptedException {synchronized (lock) {    while (highestPriority < priority) {      lock.wait();    }  }}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=LrMu.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="lr";  String vmSelectionPolicy="mu";  String parameter="1.2";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT:    return astElement != null;}return super.eIsSet(featureID);}  }
class C{  public VisibilityAwareTypeScope(IScope parent,TypeVisibilityChecker checker,Resource contextResource){  super(parent);  this.checker=checker;  this.contextResource=contextResource;}  }
class C{  public Boolean isAnalytics(){  return analytics;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.IDENTIFIER_REF_IM__REWIRED_TARGET:    if (resolve)     return getRewiredTarget();  return basicGetRewiredTarget();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public FactLine createLine(DocLine docLine,MAccount accountDr,MAccount accountCr,int C_Currency_ID,BigDecimal Amt){  if (Amt.signum() < 0)   return createLine(docLine,accountCr,C_Currency_ID,null,Amt.abs()); else   return createLine(docLine,accountDr,C_Currency_ID,Amt,null);}  }
class C{  public static void createLesson(@NotNull final Lesson lesson,@NotNull final VirtualFile courseDir,@NotNull final File resourceRoot,@NotNull final Project project) throws IOException {  String lessonDirName=EduNames.LESSON + Integer.toString(lesson.getIndex());  VirtualFile lessonDir=courseDir.createChildDirectory(project,lessonDirName);  final List<Task> taskList=lesson.getTaskList();  for (int i=1; i <= taskList.size(); i++) {    Task task=taskList.get(i - 1);    task.setIndex(i);    createTask(task,lessonDir,new File(resourceRoot,lessonDir.getName()),project);  }}  }
class C{  public JDiffClassDescription(String pkg,String className,ResultObserver resultObserver){  mPackageName=pkg;  mShortClassName=className;  mResultObserver=resultObserver;}  }
class C{  public static void verifyOutputAgainstFile(OutputAnalyzer output) throws IOException {  String testSrc=System.getProperty("test.src","?");  File file=new File(testSrc,"usage.out");  List<String> fileOutput=Utils.fileAsList(file);  List<String> outputAsLines=output.asLines();  assertTrue(outputAsLines.containsAll(fileOutput),"The ouput should contain all content of " + file.getAbsolutePath());}  }
class C{  private List _getByPositionGreater(List elements,int rvalue){  if (rvalue >= elements.size()) {    return null;  }  if (rvalue <= 0) {    return elements;  }  List array;  if (elements instanceof Vector) {    array=new Vector();  } else {    array=new ArrayList();  }  for (int i=rvalue; i < elements.size(); i++) {    array.add(elements.get(i));  }  return array;}  }
class C{  private Map<String,Integer> countWords(String contents){  Map<String,Integer> result=new HashMap<>();  if (contents == null) {    return result;  }  String[] words=contents.split("[\\s.,!?:;(){}\\[\\]]+");  for (  String word : words) {    result.merge(word,1,null);  }  return result;}  }
class C{  private static void vecswap(Object x[],int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  public boolean match(CharacterIterator search,int i){  if (program == null) {    internalError("No RE program to run!");  }  this.search=search;  if ((program.flags & REProgram.OPT_HASBOL) == REProgram.OPT_HASBOL) {    if ((matchFlags & MATCH_MULTILINE) == 0) {      return i == 0 && matchAt(i);    }    for (; !search.isEnd(i); i++) {      if (isNewline(i)) {        continue;      }      if (matchAt(i)) {        return true;      }      for (; !search.isEnd(i); i++) {        if (isNewline(i)) {          break;        }      }    }    return false;  }  if (program.prefix == null) {    for (; !search.isEnd(i - 1); i++) {      if (matchAt(i)) {        return true;      }    }    return false;  } else {    boolean caseIndependent=(matchFlags & MATCH_CASEINDEPENDENT) != 0;    char[] prefix=program.prefix;    for (; !search.isEnd(i + prefix.length - 1); i++) {      int j=i;      int k=0;      boolean match;      do {        match=(compareChars(search.charAt(j++),prefix[k++],caseIndependent) == 0);      } while (match && k < prefix.length);      if (k == prefix.length) {        if (matchAt(i)) {          return true;        }      }    }    return false;  }}  }
class C{  public static boolean isMultiplexerServicePresent(Context context){  return getMultiplexerService(context) != null;}  }
class C{  private byte[] readRawImage(ImageInputStream inStream) throws IOException {  byte[] buffer=new byte[4096];  int l=0;  ByteArrayOutputStream outStream=new ByteArrayOutputStream();  inStream.seek(0);  try {    while ((l=inStream.read(buffer)) >= 0) {      outStream.write(buffer,0,l);    }    return outStream.toByteArray();  }  finally {    try {      inStream.close();    } catch (    IOException ignored) {    }  }}  }
class C{  public void removeConnection(Connection conn){  matchingLists[conn.getType()].removeConnection(conn);}  }
class C{  public RangeConditionBuilder lower(Object lower){  this.lower=lower;  return this;}  }
class C{  public boolean equals(Operation other){  if (other == null) {    return false;  }  return ((m_nOperation == other.m_nOperation) && (m_nHead == other.m_nHead) && (m_nTail == other.m_nTail));}  }
class C{  public NPCOwnedChest(final SpeakerNPC npc){  this.npc=npc;}  }
class C{  public void removeReportStream(final String name){  reportStreamMap.remove(name);}  }
class C{  public PickPointFrustum(Frustum frustum,Rectangle rect){  super(frustum.getLeft(),frustum.getRight(),frustum.getBottom(),frustum.getTop(),frustum.getNear(),frustum.getFar());  if (rect == null) {    String message=Logging.getMessage("nullValue.RectangleIsNull");    Logging.logger().fine(message);    throw new IllegalArgumentException(message);  }  this.screenRect=rect;}  }
class C{  public int lineNo(){  return lineNo;}  }
class C{  public static void main(String[] argv){  runFilter(new MathExpression(),argv);}  }
class C{  public NedFrame(float x,float y,float z,double lat,double lon){  double ecef[]=new double[3];  double ned[]=new double[3];  double latitude=ProjMath.degToRad(lat);  double longitude=ProjMath.degToRad(lon);  ecef[0]=x;  ecef[1]=y;  ecef[2]=z;  ecef2ned(ned,latitude,longitude,ecef);  this.x=(float)ned[0];  this.y=(float)ned[1];  this.z=(float)ned[2];}  }
class C{  public CLayoutBytesAction(final CStackMemoryProvider model){  super("Bytes");  m_model=model;}  }
class C{  public boolean isPaired(){  return mIsPaired;}  }
class C{  public boolean isAncestorOf(Node node1,Node node2){  return (node1 == node2) || isProperAncestorOf(node1,node2);}  }
class C{  public PnSignalingParams(){  this.iceServers=defaultIceServers();  this.pcConstraints=defaultPcConstraints();  this.videoConstraints=defaultVideoConstraints();  this.audioConstraints=defaultAudioConstraints();}  }
class C{  public static String version(){  return version("release");}  }
class C{  public static void displayHelp(){  System.out.println("Usage:");  System.out.println("\tCase 1: JVnTokenizer -inputfile <input data file>");  System.out.println("\tCase 2: JVnTokenizer -inputdir <input data directory>");  System.out.println("Where:");  System.out.println("\t<input data file> is the file containing input text that need to");  System.out.println("\thave sentences tokenized (each sentence on a line)");  System.out.println("\t<input data directory> is the directory containing multiple input .sent files");  System.out.println();}  }
class C{  private void handleStateButtonClick(final int idx,int itemsRes,int[] itemIds){  listener.onStateButtonClick(idx,itemsRes,itemIds);}  }
class C{  public double dirtyPriceFromZSpread(final double zSpread,final DayCounter dc,final Compounding comp,final Frequency freq,Date settlement){  if (settlement.isNull()) {    settlement=settlementDate();  }  QL.require(engine != null,"null pricing engine");  QL.require(DiscountingBondEngine.class.isAssignableFrom(engine.getClass()),ReflectConstants.WRONG_ARGUMENT_TYPE);  final DiscountingBondEngine discountingBondEngine=(DiscountingBondEngine)engine;  return dirtyPriceFromZSpreadFunction(notional(settlement),cashflows_,zSpread,dc,comp,freq,settlement,discountingBondEngine.discountCurve());}  }
class C{  public static double P_Hamming(int Y[][],int Ypred[][]){  return 1. - L_Hamming(Y,Ypred);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void lowBoundConsistencyCheckAndAssign(List<NeuronUpdateRule> ruleList) throws ClassCastException {  Neuron neuronRef=neuronList.get(0);  double lowBound=((BoundedUpdateRule)neuronRef.getUpdateRule()).getLowerBound();  boolean lowDiscrepancy=ruleList.stream().anyMatch(null);  if (lowDiscrepancy) {    tfFloor.setText(SimbrainConstants.NULL_STRING);  } else {    tfFloor.setValue(lowBound);  }}  }
class C{  @SuppressWarnings("unchecked") static GuiComponent<?> createDesktopComponent(final GenericFrame parentFrame,final WorkspaceComponent component){  Class<? extends WorkspaceComponent> componentClass=component.getClass();  Class<? extends GuiComponent<?>> guiClass=wrappers.get(componentClass);  if (guiClass == null) {    throw new IllegalArgumentException("no desktop component registered for " + component.getClass());  }  try {    GenericFrame genericFrame=parentFrame != null ? parentFrame : new DesktopInternalFrame(component);    Constructor<? extends GuiComponent<?>> constructor=guiClass.getConstructor(GenericFrame.class,componentClass);    return constructor.newInstance(genericFrame,component);  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void onKeyEvent(KeyEvent event,int nestingLevel){  if (!startEvent(event,nestingLevel,EVENT_TYPE_KEY)) {    return;  }  try {    ensureMetaStateIsNormalized(event.getMetaState());    final int action=event.getAction();    final int deviceId=event.getDeviceId();    final int source=event.getSource();    final int keyCode=event.getKeyCode();switch (action) {case KeyEvent.ACTION_DOWN:{        KeyState state=findKeyState(deviceId,source,keyCode,false);        if (state != null) {          if (state.unhandled) {            state.unhandled=false;          } else           if ((mFlags & FLAG_RAW_DEVICE_INPUT) == 0 && event.getRepeatCount() == 0) {            problem("ACTION_DOWN but key is already down and this event " + "is not a key repeat.");          }        } else {          addKeyState(deviceId,source,keyCode);        }        break;      }case KeyEvent.ACTION_UP:{      KeyState state=findKeyState(deviceId,source,keyCode,true);      if (state == null) {        problem("ACTION_UP but key was not down.");      } else {        state.recycle();      }      break;    }case KeyEvent.ACTION_MULTIPLE:  break;default :problem("Invalid action " + KeyEvent.actionToString(action) + " for key event.");break;}}  finally {finishEvent();}}  }
class C{  protected boolean allowAddingImports(){  if (isInJavadoc()) {    if (fProposal.getKind() == CompletionProposal.TYPE_REF && fInvocationContext.getCoreContext().isInJavadocText())     return false;    if (!isJavadocProcessingEnabled())     return false;  }  return true;}  }
class C{  public static Type determine(final JSONObject json){  if (!json.isNull("sender"))   return Type.SENDER; else   if (!json.isNull("text"))   return Type.STATUS; else   if (!json.isNull("direct_message"))   return Type.DIRECT_MESSAGE; else   if (!json.isNull("delete"))   return Type.DELETE; else   if (!json.isNull("limit"))   return Type.LIMIT; else   if (!json.isNull("warning"))   return Type.STALL_WARNING; else   if (!json.isNull("scrub_geo"))   return Type.SCRUB_GEO; else   if (!json.isNull("friends"))   return Type.FRIENDS; else   if (!json.isNull("event")) {    String event;    try {      event=json.getString("event");      if ("favorite".equals(event))       return Type.FAVORITE; else       if ("unfavorite".equals(event))       return Type.UNFAVORITE; else       if ("follow".equals(event))       return Type.FOLLOW; else       if ("unfollow".equals(event))       return Type.UNFOLLOW; else       if (event.startsWith("list")) {        if ("list_member_added".equals(event))         return Type.USER_LIST_MEMBER_ADDED; else         if ("list_member_removed".equals(event))         return Type.USER_LIST_MEMBER_DELETED; else         if ("list_user_subscribed".equals(event))         return Type.USER_LIST_SUBSCRIBED; else         if ("list_user_unsubscribed".equals(event))         return Type.USER_LIST_UNSUBSCRIBED; else         if ("list_created".equals(event))         return Type.USER_LIST_CREATED; else         if ("list_updated".equals(event))         return Type.USER_LIST_UPDATED; else         if ("list_destroyed".equals(event))         return Type.USER_LIST_DESTROYED;      } else       if ("user_update".equals(event))       return Type.USER_UPDATE; else       if ("block".equals(event))       return Type.BLOCK; else       if ("unblock".equals(event))       return Type.UNBLOCK;    } catch (    final JSONException jsone) {      try {        logger.warn("Failed to get event element: ",json.toString(2));      } catch (      final JSONException ignore) {      }    }  } else   if (!json.isNull("disconnect"))   return Type.DISCONNECTION;  return Type.UNKNOWN;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof DBObject)   return ((DBObject)o).getMediaMaskString();  Airing a=getAirObj(o);  if (a != null)   return a.getMediaMaskString();  return "";}  }
class C{  public RemoteProductSkuServiceImpl(final DtoProductSkuService dtoProductSkuService,final ReindexService reindexService,final FederationFacade federationFacade){  super(dtoProductSkuService);  this.dtoProductSkuService=dtoProductSkuService;  this.reindexService=reindexService;  this.federationFacade=federationFacade;}  }
class C{  public void updateFog(){}  }
class C{  public byte readByte(){  return scanner.nextByte();}  }
class C{  public boolean isError(){  Object oo=get_Value(COLUMNNAME_IsError);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final Mono<T> elementAt(int index,T defaultValue){  return Mono.onAssembly(new MonoElementAt<>(this,index,defaultValue));}  }
class C{  public static IntList dincrList(IntList L,int x){  return L;}  }
class C{  public void reset(byte b[]){  bytes=b;  curindex=(short)2;  length=(short)(((((bytes[0])) & 0xff) << 8) + (((bytes[1])) & 0xff) + 2);}  }
class C{  public static void checkGreaterThanZero(int number,String message){  if (number <= 0) {    throw new IllegalArgumentException(message);  }}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public static int rawOffsetAbsolute(BinaryPositionReadable in,int start){  return start + rawOffsetRelative(in,start);}  }
class C{  private String changeExtension(String fileName,String extension){  if (fileName == null) {    return null;  }  int lastIndexOf=fileName.lastIndexOf(".");  return lastIndexOf != -1 ? fileName.substring(0,lastIndexOf + 1) + extension : fileName + "." + extension;}  }
class C{  public MemBufferHolderCachePool(long maxCapacity){  super(512,0.75f);  maxStoreCapacity=maxCapacity;}  }
class C{  @Get("json") public Map<String,Object> retrieve(){  return retrieveInternal(true);}  }
class C{  protected static boolean checkPathExistence(final String path,final boolean checkParent,final boolean checkWriteable,final I5Option option){  String pathToCheck=path;  if (checkParent) {    pathToCheck=path.substring(0,path.lastIndexOf(File.separator));  }  Path p=FileSystems.getDefault().getPath(pathToCheck);  boolean exists=Files.isReadable(p);  if (option != null && !exists) {    System.out.println("For the (-" + option.getShortOpt() + ") option you specified a location which doesn't exist or is not readable:");    System.out.println(path);    System.exit(2);  }  if (exists && checkWriteable) {    boolean writable=Files.isWritable(p);    if (option != null && !writable) {      System.out.println("For the (-" + option.getShortOpt() + ") option you specified a location which is not writable:");      System.out.println(path);      System.exit(2);    }    return writable;  }  return exists;}  }
class C{  public static int lowestOneBit(int i){  return i & -i;}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Events API example started.");    localListen();    remoteListen();    Thread.sleep(1000);  } }  }
class C{  public void add(String param){  fStrings.add(param);}  }
class C{  static boolean eq(Object x,Object y){  return x == y;}  }
class C{  public static void deleteFileTreeWithRetry(Path dir) throws IOException {  IOException ioe=null;  final List<IOException> excs=deleteFileTreeUnchecked(dir);  if (!excs.isEmpty()) {    ioe=excs.remove(0);    for (    IOException x : excs)     ioe.addSuppressed(x);  }  if (ioe != null)   throw ioe;}  }
class C{  protected boolean storeFile(RosterEntry _rosterEntry){  log.debug("storeFile starts");  Programmer p=InstanceManager.getDefault(jmri.ProgrammerManager.class).getGlobalProgrammer();  CvTableModel cvModel=new CvTableModel(null,p);  IndexedCvTableModel iCvModel=new IndexedCvTableModel(null,p);  VariableTableModel variableModel=new VariableTableModel(null,new String[]{"Name","Value"},cvModel,iCvModel);  if (_rosterEntry.getFileName() != null) {    _rosterEntry.readFile();    _rosterEntry.loadCvModel(variableModel,cvModel,iCvModel);  }  if (_rosterEntry.getId().equals("")) {    log.debug("storeFile without a filename; issued dialog");    return false;  }  _rosterEntry.ensureFilenameExists();  _rosterEntry.writeFile(cvModel,iCvModel,variableModel);  variableModel.setFileDirty(false);  Roster.getDefault().writeRoster();  return true;}  }
class C{  public void end(){  check(numthreads,0,0);  done.set(true);}  }
class C{  public static String formatDate(final Date date,final int type,final Locale locale){  Preconditions.checkNotNull(date,"Error: Date argument can't be null.");  Preconditions.checkNotNull(locale,"Error: Locale argument can't be null.");  final String s=String.format("%s %s",DateFormat.getDateInstance(type,locale).format(date),DateFormat.getTimeInstance(type,locale).format(date));  return s;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public MetricKDE(){  this(DEFAULT_KF,new EuclideanDistance(),defaultVCF);}  }
class C{  @SuppressWarnings("rawtypes") @Override protected AccessDecisionManager accessDecisionManager(){  List<AccessDecisionVoter<?>> decisionVoters=new ArrayList<>();  RoleVoter decisionVoter=new RoleVoter();  decisionVoter.setRolePrefix("");  decisionVoters.add(decisionVoter);  return new AffirmativeBased(decisionVoters);}  }
class C{  public static Sector fromRadians(double minLatitude,double maxLatitude,double minLongitude,double maxLongitude){  return new Sector(Angle.fromRadians(minLatitude),Angle.fromRadians(maxLatitude),Angle.fromRadians(minLongitude),Angle.fromRadians(maxLongitude));}  }
class C{  public Authenticator proxyAuthenticator(){  return proxyAuthenticator;}  }
class C{  public static boolean isInstanceRef(FDValue val){  if (val instanceof FDGeneric) {    return getInstanceRef(val) != null;  }  return false;}  }
class C{  private void retrieveLineNumber(){  if (isLineNumber()) {    int asmLine=super.getLineNumber();    if (this.lineNumber != -1 && asmLine != this.lineNumber)     throw new IllegalStateException("lineNumber field was manually set to a value different from the actual lineNumber contained in LineNumberNode");    this.lineNumber=asmLine;  }}  }
class C{  public boolean onSwipedAway(boolean toRight){  return false;}  }
class C{  static void addCases(CharBuffer cb,List<CharBuffer> buffers){  randomize(cb);  buffers.add(cb);  buffers.add(cb.slice());  buffers.add(cb.duplicate());  buffers.add(cb.asReadOnlyBuffer());  buffers.add(randomizeRange(cb.slice()));  buffers.add(randomizeRange(cb.duplicate()));  buffers.add(randomizeRange(cb.asReadOnlyBuffer()));}  }
class C{  public BasicWWTexture(Object imageSource){  this(imageSource,false);}  }
class C{  @Override protected void disconnect(){  getOwner().setStartConnector(null);}  }
class C{  public JSONArray put(Map<?,?> value){  this.put(new JSONObject(value));  return this;}  }
class C{  protected String doIt() throws java.lang.Exception {  if (p_EMailPDF && p_R_MailText_ID == 0)   throw new AdempiereUserError("@NotFound@: @R_MailText_ID@");  log.info("C_BPartner_ID=" + m_C_BPartner_ID + ", C_Invoice_ID="+ m_C_Invoice_ID+ ", EmailPDF="+ p_EMailPDF+ ",R_MailText_ID="+ p_R_MailText_ID+ ", DateInvoiced="+ m_dateInvoiced_From+ "-"+ m_dateInvoiced_To+ ", DocumentNo="+ m_DocumentNo_From+ "-"+ m_DocumentNo_To);  MMailText mText=null;  if (p_R_MailText_ID != 0) {    mText=new MMailText(getCtx(),p_R_MailText_ID,get_TrxName());    if (mText.get_ID() != p_R_MailText_ID)     throw new AdempiereUserError("@NotFound@: @R_MailText_ID@ - " + p_R_MailText_ID);  }  if (m_C_BPartner_ID == 0 && m_C_Invoice_ID == 0 && m_dateInvoiced_From == null && m_dateInvoiced_To == null && m_DocumentNo_From == null && m_DocumentNo_To == null)   throw new AdempiereUserError("@RestrictSelection@");  MClient client=MClient.get(getCtx());  StringBuffer sql=new StringBuffer("SELECT i.C_Invoice_ID,bp.AD_Language,c.IsMultiLingualDocument," + " COALESCE(bp.Invoice_PrintFormat_ID, dt.AD_PrintFormat_ID, pf.Invoice_PrintFormat_ID)," + " dt.DocumentCopies+bp.DocumentCopies,"+ " bpc.AD_User_ID, i.DocumentNo,"+ " bp.C_BPartner_ID "+ "FROM C_Invoice i"+ " INNER JOIN C_BPartner bp ON (i.C_BPartner_ID=bp.C_BPartner_ID)"+ " LEFT OUTER JOIN AD_User bpc ON (i.AD_User_ID=bpc.AD_User_ID)"+ " INNER JOIN AD_Client c ON (i.AD_Client_ID=c.AD_Client_ID)"+ " INNER JOIN AD_PrintForm pf ON (i.AD_Client_ID=pf.AD_Client_ID)"+ " INNER JOIN C_DocType dt ON (i.C_DocType_ID=dt.C_DocType_ID)"+ " WHERE i.AD_Client_ID=? AND i.AD_Org_ID=? AND i.isSOTrx='Y' AND "+ "       pf.AD_Org_ID IN (0,i.AD_Org_ID) AND ");  boolean needAnd=false;  if (m_C_Invoice_ID != 0)   sql.append("i.C_Invoice_ID=").append(m_C_Invoice_ID); else {    if (m_C_BPartner_ID != 0) {      sql.append("i.C_BPartner_ID=").append(m_C_BPartner_ID);      needAnd=true;    }    if (m_dateInvoiced_From != null && m_dateInvoiced_To != null) {      if (needAnd)       sql.append(" AND ");      sql.append("TRUNC(i.DateInvoiced, 'DD') BETWEEN ").append(DB.TO_DATE(m_dateInvoiced_From,true)).append(" AND ").append(DB.TO_DATE(m_dateInvoiced_To,true));      needAnd=true;    } else     if (m_dateInvoiced_From != null) {      if (needAnd)       sql.append(" AND ");      sql.append("TRUNC(i.DateInvoiced, 'DD') >= ").append(DB.TO_DATE(m_dateInvoiced_From,true));      needAnd=true;    } else     if (m_dateInvoiced_To != null) {      if (needAnd)       sql.append(" AND ");      sql.append("TRUNC(i.DateInvoiced, 'DD') <= ").append(DB.TO_DATE(m_dateInvoiced_To,true));      needAnd=true;    } else     if (m_DocumentNo_From != null && m_DocumentNo_To != null) {      if (needAnd)       sql.append(" AND ");      sql.append("i.DocumentNo BETWEEN ").append(DB.TO_STRING(m_DocumentNo_From)).append(" AND ").append(DB.TO_STRING(m_DocumentNo_To));    } else     if (m_DocumentNo_From != null) {      if (needAnd)       sql.append(" AND ");      if (m_DocumentNo_From.indexOf('%') == -1)       sql.append("i.DocumentNo >= ").append(DB.TO_STRING(m_DocumentNo_From)); else       sql.append("i.DocumentNo LIKE ").append(DB.TO_STRING(m_DocumentNo_From));    }    if (p_EMailPDF) {      if (needAnd) {        sql.append(" AND ");      }      sql.append("i.DocStatus IN ('CO','CL') ");    }  }  sql.append(" ORDER BY i.C_Invoice_ID, pf.AD_Org_ID DESC");  log.fine(sql.toString());  MPrintFormat format=null;  int old_AD_PrintFormat_ID=-1;  int old_C_Invoice_ID=-1;  int C_BPartner_ID=0;  int count=0;  int errors=0;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    pstmt.setInt(1,Env.getAD_Client_ID(Env.getCtx()));    pstmt.setInt(2,Env.getAD_Org_ID(Env.getCtx()));    rs=pstmt.executeQuery();    while (rs.next()) {      int C_Invoice_ID=rs.getInt(1);      if (C_Invoice_ID == old_C_Invoice_ID)       continue;      old_C_Invoice_ID=C_Invoice_ID;      Language language=Language.getLoginLanguage();      String AD_Language=rs.getString(2);      if (AD_Language != null && "Y".equals(rs.getString(3)))       language=Language.getLanguage(AD_Language);      int AD_PrintFormat_ID=rs.getInt(4);      int copies=rs.getInt(5);      if (copies == 0)       copies=1;      int AD_User_ID=rs.getInt(6);      MUser to=new MUser(getCtx(),AD_User_ID,get_TrxName());      String DocumentNo=rs.getString(7);      C_BPartner_ID=rs.getInt(8);      String documentDir=client.getDocumentDir();      if (documentDir == null || documentDir.length() == 0)       documentDir=".";      if (p_EMailPDF && (to.get_ID() == 0 || to.getEMail() == null || to.getEMail().length() == 0)) {        addLog(C_Invoice_ID,null,null,DocumentNo + " @RequestActionEMailNoTo@");        errors++;        continue;      }      if (AD_PrintFormat_ID == 0) {        addLog(C_Invoice_ID,null,null,DocumentNo + " No Print Format");        errors++;        continue;      }      if (AD_PrintFormat_ID != old_AD_PrintFormat_ID) {        format=MPrintFormat.get(getCtx(),AD_PrintFormat_ID,false);        old_AD_PrintFormat_ID=AD_PrintFormat_ID;      }      format.setLanguage(language);      format.setTranslationLanguage(language);      MQuery query=new MQuery("C_Invoice_Header_v");      query.addRestriction("C_Invoice_ID",MQuery.EQUAL,new Integer(C_Invoice_ID));      PrintInfo info=new PrintInfo(DocumentNo,X_C_Invoice.Table_ID,C_Invoice_ID,C_BPartner_ID);      info.setCopies(copies);      ReportEngine re=new ReportEngine(getCtx(),format,query,info);      boolean printed=false;      if (p_EMailPDF) {        String subject=mText.getMailHeader() + " - " + DocumentNo;        EMail email=client.createEMail(to.getEMail(),subject,null);        if (!email.isValid()) {          addLog(C_Invoice_ID,null,null,DocumentNo + " @RequestActionEMailError@ Invalid EMail: " + to);          errors++;          continue;        }        mText.setUser(to);        mText.setBPartner(C_BPartner_ID);        mText.setPO(new MInvoice(getCtx(),C_Invoice_ID,get_TrxName()));        String message=mText.getMailText(true);        if (mText.isHtml())         email.setMessageHTML(subject,message); else {          email.setSubject(subject);          email.setMessageText(message);        }        File invoice=null;        if (!Ini.isClient())         invoice=new File(MInvoice.getPDFFileName(documentDir,C_Invoice_ID));        File attachment=re.getPDF(invoice);        log.fine(to + " - " + attachment);        email.addAttachment(attachment);        String msg=email.send();        MUserMail um=new MUserMail(mText,getAD_User_ID(),email);        um.saveEx();        if (msg.equals(EMail.SENT_OK)) {          addLog(C_Invoice_ID,null,null,DocumentNo + " @RequestActionEMailOK@ - " + to.getEMail());          count++;          printed=true;        } else {          addLog(C_Invoice_ID,null,null,DocumentNo + " @RequestActionEMailError@ " + msg+ " - "+ to.getEMail());          errors++;        }      } else {        ServerReportCtl.startDocumentPrint(ReportEngine.INVOICE,null,C_Invoice_ID,null);        count++;        printed=true;      }      if (printed) {        StringBuffer sb=new StringBuffer("UPDATE C_Invoice " + "SET DatePrinted=SysDate, IsPrinted='Y' WHERE C_Invoice_ID=").append(C_Invoice_ID);        int no=DB.executeUpdate(sb.toString(),get_TrxName());      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,"doIt - " + sql,e);    throw new Exception(e);  } finally {    DB.close(rs,pstmt);  }  if (p_EMailPDF)   return "@Sent@=" + count + " - @Errors@="+ errors;  return "@Printed@=" + count;}  }
class C{  public void writeRawBytes(final byte[] value,int offset,int length) throws IOException {  if (limit - position >= length) {    System.arraycopy(value,offset,buffer,position,length);    position+=length;  } else {    final int bytesWritten=limit - position;    System.arraycopy(value,offset,buffer,position,bytesWritten);    offset+=bytesWritten;    length-=bytesWritten;    position=limit;    refreshBuffer();    if (length <= limit) {      System.arraycopy(value,offset,buffer,0,length);      position=length;    } else {      output.write(value,offset,length);    }  }}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Text insert(int index,Text txt){  return subtext(0,index).concat(txt).concat(subtext(index));}  }
class C{  @NotNull public static HKey asmKey(@NotNull Key key,@NotNull MessageDigest md){  byte[] classDigest=md.digest(key.method.internalClassName.getBytes());  md.update(key.method.methodName.getBytes());  md.update(key.method.methodDesc.getBytes());  byte[] sigDigest=md.digest();  byte[] digest=new byte[HASH_SIZE];  System.arraycopy(classDigest,0,digest,0,CLASS_HASH_SIZE);  System.arraycopy(sigDigest,0,digest,CLASS_HASH_SIZE,SIGNATURE_HASH_SIZE);  return new HKey(digest,mkDirectionKey(key.direction),key.stable);}  }
class C{  public void menuSelected(MenuEvent e){  JMenu source=(JMenu)e.getSource();  if ((source != null) && "File".equals(source.getText())) {    getMainMenu().getCloseMenuItem().setEnabled(tree.getSelectionPath() != null);    getMainMenu().getCloseToolBarButton().setEnabled(tree.getSelectionPath() != null);  }}  }
class C{  public static byte[] toByteArray(long macAddress){  return MacAddress.of(macAddress).getBytes();}  }
class C{  protected LogRecordWithDLSN recoverLastRecordInLedger(LogSegmentMetadata l,boolean fence,boolean includeControl,boolean includeEndOfStream) throws IOException {  return FutureUtils.result(asyncReadLastRecord(l,fence,includeControl,includeEndOfStream));}  }
class C{  @Override public DisjointSet<K> foldEdges(DisjointSet<K> ds,K vertex,K vertex2,NullValue edgeValue) throws Exception {  ds.union(vertex,vertex2);  return ds;}  }
class C{  public boolean drawEdgeGlows(Canvas canvas){  final int scrollX=mHostView.getScrollX();  final int scrollY=mHostView.getScrollY();  final int width=mHostView.getWidth();  int height=mHostView.getHeight();  boolean invalidateForGlow=false;  if (!mEdgeGlowTop.isFinished()) {    final int restoreCount=canvas.save();    canvas.translate(scrollX,mHostView.getVisibleTitleHeight() + Math.min(0,scrollY));    mEdgeGlowTop.setSize(width,height);    invalidateForGlow|=mEdgeGlowTop.draw(canvas);    canvas.restoreToCount(restoreCount);  }  if (!mEdgeGlowBottom.isFinished()) {    final int restoreCount=canvas.save();    canvas.translate(-width + scrollX,Math.max(mHostView.computeMaxScrollY(),scrollY) + height);    canvas.rotate(180,width,0);    mEdgeGlowBottom.setSize(width,height);    invalidateForGlow|=mEdgeGlowBottom.draw(canvas);    canvas.restoreToCount(restoreCount);  }  if (!mEdgeGlowLeft.isFinished()) {    final int restoreCount=canvas.save();    canvas.rotate(270);    canvas.translate(-height - scrollY,Math.min(0,scrollX));    mEdgeGlowLeft.setSize(height,width);    invalidateForGlow|=mEdgeGlowLeft.draw(canvas);    canvas.restoreToCount(restoreCount);  }  if (!mEdgeGlowRight.isFinished()) {    final int restoreCount=canvas.save();    canvas.rotate(90);    canvas.translate(scrollY,-(Math.max(mHostView.computeMaxScrollX(),scrollX) + width));    mEdgeGlowRight.setSize(height,width);    invalidateForGlow|=mEdgeGlowRight.draw(canvas);    canvas.restoreToCount(restoreCount);  }  return invalidateForGlow;}  }
class C{  @HLEFunction(nid=0xC0B3FFD2,version=150) public long sceKernelGetVTimerTimeWide(@CheckArgument("checkVTimerID") int vtimerUid){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.get(vtimerUid);  long time=sceKernelVTimerInfo.getCurrentTime();  if (log.isDebugEnabled()) {    log.debug(String.format("sceKernelGetVTimerTimeWide returning %d",time));  }  return time;}  }
class C{  protected void adaptToInsert(){  int myStart=fPosition.offset;  int myEnd=fPosition.offset + fPosition.length - 1;  myEnd=Math.max(myStart,myEnd);  int yoursStart=fOffset;  int yoursEnd=fOffset + fReplaceLength - 1;  yoursEnd=Math.max(yoursStart,yoursEnd);  if (myEnd < yoursStart)   return;  if (myStart < yoursStart)   fPosition.length+=fReplaceLength; else   fPosition.offset+=fReplaceLength;}  }
class C{  public void connectPort(XpaPortController p){  istream=p.getInputStream();  ostream=p.getOutputStream();  if (controller != null) {    log.warn("connectPort: connect called while connected");  }  controller=p;  this.sendXpaMessage(XpaMessage.getDefaultInitMsg(),null);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private FileUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  private boolean isCompressedStream(int pointer,final int eof) throws PdfException {  final boolean debug=false;  int bufSize=50, charReached_legacy=0, charReached_comp1=0, charReached_comp2=0;  final int[] objStm={'O','b','j','S','t','m'};  final int[] XRef={'X','R','e','f'};  int type=UNSET;  boolean firstRead=true;  while (true) {    if (pointer + bufSize > eof) {      bufSize=eof - pointer;    }    if (bufSize < 0) {      bufSize=50;    }    if (pointer < 0) {      pointer+=bufSize;      continue;    }    final byte[] buffer=getBytes(pointer,bufSize);    if (firstRead && buffer[0] == 'r' && buffer[1] == 'e' && buffer[2] == 'f') {      charReached_legacy=1;    }    firstRead=false;    for (int i=0; i < bufSize; i++) {      final byte currentByte=buffer[i];      if (debug) {        System.out.print((char)currentByte);      }      if (currentByte == oldPattern[charReached_legacy] && type != COMPRESSED) {        charReached_legacy++;        type=LEGACY;      } else       if ((currentByte == objStm[charReached_comp1]) && (charReached_comp1 == 0 || type == COMPRESSED)) {        charReached_comp1++;        type=COMPRESSED;      } else       if ((currentByte == XRef[charReached_comp2]) && (charReached_comp2 == 0 || type == COMPRESSED)) {        charReached_comp2++;        type=COMPRESSED;      } else {        charReached_legacy=0;        charReached_comp1=0;        charReached_comp2=0;        type=UNSET;      }      if (charReached_legacy == 3 || charReached_comp1 == 4 || charReached_comp2 == 3) {        break;      }    }    if (charReached_legacy == 3 || charReached_comp1 == 4 || charReached_comp2 == 3) {      break;    }    pointer+=bufSize;  }  if (type == UNSET) {    try {      closeFile();    } catch (    final IOException e1) {      LogWriter.writeLog("Exception " + 1 + " closing file "+ e1);    }    throw new PdfException("Exception unable to find ref or obj in trailer");  }  return type == COMPRESSED;}  }
class C{  public static separadorporto newInstance(String param1,String param2){  separadorporto fragment=new separadorporto();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  static float[] computeCentroid(float[] points){  float centerX=0;  float centerY=0;  int count=points.length;  for (int i=0; i < count; i++) {    centerX+=points[i];    i++;    centerY+=points[i];  }  float[] center=new float[2];  center[0]=2 * centerX / count;  center[1]=2 * centerY / count;  return center;}  }
class C{  public void addAnomalyTS(CombinedDomainXYPlot plot,DataSequence observedSeries,DataSequence expectedSeries){  HashMap<String,ArrayList<Float>> allErrors=aes.initAnomalyErrors(observedSeries,expectedSeries);  Float sDAutoSensitivity=(float)0.0;  Float amntAutoSensitivity=(float)0.0;  if (config.getProperty("AUTO_SENSITIVITY_ANOMALY_PCNT") != null) {    amntAutoSensitivity=new Float(config.getProperty("AUTO_SENSITIVITY_ANOMALY_PCNT"));  }  if (config.getProperty("AUTO_SENSITIVITY_SD") != null) {    sDAutoSensitivity=new Float(config.getProperty("AUTO_SENSITIVITY_SD"));  }  String errorDebug="";  for (int i=0; i < (aes.getIndexToError().keySet()).size(); i++) {    Float[] fArray=(allErrors.get(aes.getIndexToError().get(i))).toArray(new Float[(allErrors.get(aes.getIndexToError().get(i))).size()]);    XYDataset data1=createDataset(fArray,aes.getIndexToError().get(i));    XYItemRenderer renderer1=new StandardXYItemRenderer();    NumberAxis rangeAxis1=new NumberAxis(aes.getIndexToError().get(i));    XYPlot subplot1=new XYPlot(data1,null,rangeAxis1,renderer1);    Float d=AutoSensitivity.getLowDensitySensitivity(fArray,sDAutoSensitivity,amntAutoSensitivity);    subplot1.addRangeMarker(new ValueMarker(d));    subplot1.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);    plot.add(subplot1,1);    errorDebug+=aes.getIndexToError().get(i) + ": " + d+ " ";  }  System.out.println(errorDebug);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=InfiniteViewPager.FakePositionHelper.getAdapterSize(mViewPager);    ;    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  @Override public QueryResponse queryAndStreamResponse(SolrParams params,StreamingResponseCallback callback) throws SolrServerException, IOException {  throw new UnsupportedOperationException("stream response not possible with shards");}  }
class C{  public boolean canSave(){  return provider.canSave();}  }
class C{  public void start(Context context) throws NetworkErrorException {  ConnectivityManager connMgr=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connMgr.getActiveNetworkInfo();  if (networkInfo != null && networkInfo.isConnected()) {    new DownloadManager().execute(QUOTES_URL);  } else {    throw new NetworkErrorException("Network not found.");  }}  }
class C{  public MassnahmenUmsetzung createMassnahmenUmsetzung(Massnahme mn,String language){  MassnahmenUmsetzung mu=new MassnahmenUmsetzung();  mu.setEntity(new Entity(MassnahmenUmsetzung.TYPE_ID));  copyValues(mn,mu,language);  return mu;}  }
class C{  void pushImportURL(String hrefUrl){  m_importStack.push(hrefUrl);}  }
class C{  public UnsupportedHttpVersionException(final String message){  super(message);}  }
class C{  public static String cancelPayPalOrder(HttpServletRequest request,HttpServletResponse response){  Locale locale=UtilHttp.getLocale(request);  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  String orderId=(String)request.getSession().getAttribute("PAYPAL_ORDER");  boolean beganTransaction=false;  try {    beganTransaction=TransactionUtil.begin();  } catch (  GenericTransactionException gte) {    Debug.logError(gte,"Unable to begin transaction",module);  }  boolean okay=OrderChangeHelper.cancelOrder(dispatcher,userLogin,orderId);  if (okay) {    try {      TransactionUtil.commit(beganTransaction);    } catch (    GenericTransactionException gte) {      Debug.logError(gte,"Unable to commit transaction",module);    }  } else {    try {      TransactionUtil.rollback(beganTransaction,"Failure in processing PayPal cancel callback",null);    } catch (    GenericTransactionException gte) {      Debug.logError(gte,"Unable to rollback transaction",module);    }  }  if (okay)   OrderChangeHelper.releaseInitialOrderHold(dispatcher,orderId);  request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.previousPayPalOrderHasBeenCancelled",locale));  return "success";}  }
class C{  private void loadOrExecuteQueryPhase(final ShardSearchRequest request,final SearchContext context,final QueryPhase queryPhase) throws Exception {  final boolean canCache=indicesQueryCache.canCache(request,context);  if (canCache) {    indicesQueryCache.loadIntoContext(request,context,queryPhase);  } else {    queryPhase.execute(context);  }}  }
class C{  public Frame[] analyze(CtClass clazz,MethodInfo method) throws BadBytecode {  this.clazz=clazz;  CodeAttribute codeAttribute=method.getCodeAttribute();  if (codeAttribute == null)   return null;  int maxLocals=codeAttribute.getMaxLocals();  int maxStack=codeAttribute.getMaxStack();  int codeLength=codeAttribute.getCodeLength();  CodeIterator iter=codeAttribute.iterator();  IntQueue queue=new IntQueue();  exceptions=buildExceptionInfo(method);  subroutines=scanner.scan(method);  Executor executor=new Executor(clazz.getClassPool(),method.getConstPool());  frames=new Frame[codeLength];  frames[iter.lookAhead()]=firstFrame(method,maxLocals,maxStack);  queue.add(iter.next());  while (!queue.isEmpty()) {    analyzeNextEntry(method,iter,queue,executor);  }  return frames;}  }
class C{  public static <T>LazyPStackX<T> fromStreamS(Stream<T> stream){  return new LazyPStackX<T>(Flux.from(ReactiveSeq.fromStream(stream)));}  }
class C{  @Override public boolean handleMessage(SOAPMessageContext context){  Boolean request_p=(Boolean)context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);  if (request_p.booleanValue()) {    try {      SOAPMessage msg=context.getMessage();      SOAPEnvelope env=msg.getSOAPPart().getEnvelope();      SOAPHeader hdr=env.getHeader();      if (hdr == null) {        hdr=env.addHeader();      }      QName qname_user=new QName("http://com/auth/","auth");      SOAPHeaderElement helem_user=hdr.addHeaderElement(qname_user);      helem_user.setActor(VERSION);      if (version == null || version.trim().length() == 0) {        helem_user.addTextNode(apiVersionInfo.getProperty(VERSION));      } else {        helem_user.addTextNode(version);      }      msg.saveChanges();      message=soapMessage2String(msg);    } catch (    Exception e) {      e.printStackTrace();    }  }  return true;}  }
class C{  public SegmentNode addIntersectionNode(Coordinate intPt,int segmentIndex){  int normalizedSegmentIndex=segmentIndex;  int nextSegIndex=normalizedSegmentIndex + 1;  if (nextSegIndex < pts.length) {    Coordinate nextPt=pts[nextSegIndex];    if (intPt.equals2D(nextPt)) {      normalizedSegmentIndex=nextSegIndex;    }  }  SegmentNode ei=nodeList.add(intPt,normalizedSegmentIndex);  return ei;}  }
class C{  private void doMakeOffered(HttpServletRequest request,InstructionalOfferingDetailForm frm) throws Exception {  sessionContext.checkPermission(frm.getInstrOfferingId(),"InstructionalOffering",Right.OfferingMakeOffered);  org.hibernate.Session hibSession=null;  try {    InstructionalOfferingDAO idao=new InstructionalOfferingDAO();    hibSession=idao.getSession();    InstructionalOffering io=idao.get(frm.getInstrOfferingId());    io.setNotOffered(new Boolean(false));    idao.saveOrUpdate(io);    ChangeLog.addChange(hibSession,sessionContext,io,ChangeLog.Source.MAKE_OFFERED,ChangeLog.Operation.UPDATE,io.getControllingCourseOffering().getSubjectArea(),null);    if (sessionContext.hasPermission(io,Right.OfferingCanLock))     io.getSession().lockOffering(io.getUniqueId());    hibSession.flush();    hibSession.clear();    String className=ApplicationProperty.ExternalActionInstructionalOfferingOffered.value();    if (className != null && className.trim().length() > 0) {      ExternalInstructionalOfferingOfferedAction offeredAction=(ExternalInstructionalOfferingOfferedAction)(Class.forName(className).newInstance());      offeredAction.performExternalInstructionalOfferingOfferedAction(io,hibSession);    }    frm.setNotOffered(io.isNotOffered());  } catch (  Exception e) {    Debug.error(e);    throw (e);  }}  }
class C{  public static RegionAttributesRequest create(){  RegionAttributesRequest m=new RegionAttributesRequest();  return m;}  }
class C{  public int findFirstCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),true,false);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  protected byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  return core.wrap(key);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public synchronized void reset() throws IOException {  getBufIfOpen();  if (markpos < 0)   throw new IOException("Resetting to invalid mark");  pos=markpos;}  }
class C{  public int compare(QuotaLineItem val1,QuotaLineItem val2){  double normalizedResult;  double normalizedVal;  double normalizedThis;  int rv;  normalizedVal=normalize(val2);  normalizedThis=normalize(val1);  normalizedResult=normalizedThis - normalizedVal;  if (normalizedResult < 0) {    rv=-1;  } else   if (normalizedResult == 0) {    rv=0;  } else {    rv=1;  }  return rv;}  }
class C{  public boolean visit(TextElement node){  return true;}  }
class C{  public void pushSAXLocatorNull(){  m_saxLocations.push(null);}  }
class C{  public Holder(EvictableEntry<K,V> entry,long order){  assert order > 0;  this.entry=entry;  this.order=order;}  }
class C{  public int classSampleCount(int targetClass){  int count=0;  for (  int i : category)   if (i == targetClass)   count++;  return count;}  }
class C{  private void initializeServices(){  if (logger.isInfoEnabled()) {    logger.info("Initializing Metrics Services");  }  org.wso2.carbon.metrics.core.Metrics metrics=new org.wso2.carbon.metrics.core.Metrics();  metrics.activate();  metricService=metrics.getMetricService();  metricManagementService=metrics.getMetricManagementService();  Thread thread=new Thread(null);  Runtime.getRuntime().addShutdownHook(thread);}  }
class C{  public T scrolling(String value){  return attr("scrolling",value);}  }
class C{  private SelectResults evaluateOrJunction(ExecutionContext context) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  SelectResults intermediateResults=null;  Iterator itr=this.filterableCC.iterator();  Support.Assert(this.iterOperands == null || this.iterOperands.isEmpty(),"The iter operands shoudl not have been present for OR junction");  while (itr.hasNext()) {    CompiledValue cc=(CompiledComparison)itr.next();    SelectResults sr=((Filter)cc).filterEvaluate(context,null,this.completeExpansion,null,this.indpndnts,false,true,false);    intermediateResults=(intermediateResults == null) ? sr : QueryUtils.union(intermediateResults,sr,context);  }  if (this.groupJunctions != null) {    int len=this.groupJunctions.size();    if (len > 1) {      SelectResults[] grpResults=new SelectResults[1];      List finalList=null;      if (this.completeExpansion) {        finalList=context.getCurrentIterators();      } else {        finalList=QueryUtils.getDependentItrChainForIndpndntItrs(this.indpndnts,context);      }      RuntimeIterator[][] itrsForResultFields=new RuntimeIterator[1][];      AbstractGroupOrRangeJunction gj=null;      Iterator junctionItr=this.groupJunctions.iterator();      List grpItrs=null;      RuntimeIterator tempItr=null;      while (junctionItr.hasNext()) {        List expansionList=new LinkedList(finalList);        gj=(AbstractGroupOrRangeJunction)junctionItr.next();        grpResults[0]=((Filter)gj).filterEvaluate(context,null);        grpItrs=context.getCurrScopeDpndntItrsBasedOnSingleIndpndntItr(gj.getIndependentIteratorForGroup()[0]);        itrsForResultFields[0]=new RuntimeIterator[grpItrs.size()];        Iterator grpItr=grpItrs.iterator();        int k=0;        while (grpItr.hasNext()) {          tempItr=(RuntimeIterator)grpItr.next();          itrsForResultFields[0][k++]=tempItr;          expansionList.remove(tempItr);        }        SelectResults expandedResult=QueryUtils.cartesian(grpResults,itrsForResultFields,expansionList,finalList,context,null);        intermediateResults=(intermediateResults == null) ? expandedResult : QueryUtils.union(expandedResult,intermediateResults,context);      }    } else {      AbstractGroupOrRangeJunction newGJ=(AbstractGroupOrRangeJunction)this.groupJunctions.get(0);      if (!this.completeExpansion) {        newGJ=newGJ.recreateFromOld(this.completeExpansion,this.indpndnts,null);      }      SelectResults rs=newGJ.filterEvaluate(context,null);      intermediateResults=(intermediateResults == null) ? rs : QueryUtils.union(rs,intermediateResults,context);    }  }  return intermediateResults;}  }
class C{  public static QuadTree<Node> buildNodesQuadTree(Network network){  double startTime=System.currentTimeMillis();  double minx=Double.POSITIVE_INFINITY;  double miny=Double.POSITIVE_INFINITY;  double maxx=Double.NEGATIVE_INFINITY;  double maxy=Double.NEGATIVE_INFINITY;  for (  Node n : network.getNodes().values()) {    if (n.getCoord().getX() < minx) {      minx=n.getCoord().getX();    }    if (n.getCoord().getY() < miny) {      miny=n.getCoord().getY();    }    if (n.getCoord().getX() > maxx) {      maxx=n.getCoord().getX();    }    if (n.getCoord().getY() > maxy) {      maxy=n.getCoord().getY();    }  }  minx-=1.0;  miny-=1.0;  maxx+=1.0;  maxy+=1.0;  log.info("building QuadTree for nodes: xrange(" + minx + ","+ maxx+ "); yrange("+ miny+ ","+ maxy+ ")");  QuadTree<Node> quadTree=new QuadTree<Node>(minx,miny,maxx,maxy);  for (  Node n : network.getNodes().values()) {    quadTree.put(n.getCoord().getX(),n.getCoord().getY(),n);  }  log.info("Building QuadTree took " + ((System.currentTimeMillis() - startTime) / 1000.0) + " seconds.");  return quadTree;}  }
class C{  public DellSCDiscovery(String driverName,String driverVersion){  this.driverName=driverName;  this.driverVersion=driverVersion;  this.connectionManager=DellSCConnectionManager.getInstance();  this.util=DellSCUtil.getInstance();}  }
class C{  @SuppressWarnings("unchecked") public void registerDefaultDeviceTypes(){  final HashMap<String,String> devicesList=DefaultPlatform.getDeviceServiceMap();  for (  HashMap.Entry<String,String> entry : devicesList.entrySet()) {    String key=entry.getKey();    String value=entry.getValue();    try {      registerDeviceService((Class<DeviceService>)Class.forName(key),(Class<DiscoveryProvider>)Class.forName(value));    } catch (    ClassNotFoundException e) {      e.printStackTrace();    }  }}  }
class C{  public Router(){}  }
class C{  void convertToPSPath(PathIterator pathIter){  float[] segment=new float[6];  int segmentType;  int fillRule;  if (pathIter.getWindingRule() == PathIterator.WIND_EVEN_ODD) {    fillRule=FILL_EVEN_ODD;  } else {    fillRule=FILL_WINDING;  }  beginPath();  setFillMode(fillRule);  while (pathIter.isDone() == false) {    segmentType=pathIter.currentSegment(segment);switch (segmentType) {case PathIterator.SEG_MOVETO:      moveTo(segment[0],segment[1]);    break;case PathIterator.SEG_LINETO:  lineTo(segment[0],segment[1]);break;case PathIterator.SEG_QUADTO:float lastX=getPenX();float lastY=getPenY();float c1x=lastX + (segment[0] - lastX) * 2 / 3;float c1y=lastY + (segment[1] - lastY) * 2 / 3;float c2x=segment[2] - (segment[2] - segment[0]) * 2 / 3;float c2y=segment[3] - (segment[3] - segment[1]) * 2 / 3;bezierTo(c1x,c1y,c2x,c2y,segment[2],segment[3]);break;case PathIterator.SEG_CUBICTO:bezierTo(segment[0],segment[1],segment[2],segment[3],segment[4],segment[5]);break;case PathIterator.SEG_CLOSE:closeSubpath();break;}pathIter.next();}}  }
class C{  public BannersRecyclerAdapter(Context context,BannersRecyclerInterface bannersRecyclerInterface){  this.context=context;  this.bannersRecyclerInterface=bannersRecyclerInterface;}  }
class C{  public void onDestroy(){}  }
class C{  public static File open(@NonNull String path){  return new File(path);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static AnnotationMirror buildAnnoMirrorWithDefaultPrefix(final ProcessingEnvironment env,final Class<? extends Annotation> annoClass){  if (env == null || annoClass == null) {    return null;  }  return buildAnnoMirrorWithSpecificPrefix(env,annoClass,Prefix.one);}  }
class C{  public InactivePeerException(final Throwable cause){  super(cause);}  }
class C{  public JMenuItem createThemesMenuItem(JMenu menu,String label,String mnemonic,String accessibleDescription,MetalTheme theme){  JRadioButtonMenuItem mi=(JRadioButtonMenuItem)menu.add(new JRadioButtonMenuItem(getString(label)));  themesMenuGroup.add(mi);  mi.setMnemonic(getMnemonic(mnemonic));  mi.getAccessibleContext().setAccessibleDescription(getString(accessibleDescription));  return mi;}  }
class C{  public String[] optionArgs(){  return optionArgs;}  }
class C{  public void finer(String msg,Object... params){  log(Level.FINER,msg,params);}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder();  int i=0;  for (  PseudoOp op : contents) {    buf.append(String.format("%4d : %s%n",i++,op));  }  return buf.toString();}  }
class C{  public boolean isModified(){  return _modified;}  }
class C{  public static String probeOvfenvPartition(){  final String[] cmds={GET_OVF_PROPERTY_CMD,"--probe-ovfenv-partition"};  Exec.Result result=Exec.sudo(CMD_TIMEOUT,cmds);  if (!result.exitedNormally() || result.getExitValue() != 0) {    log.error("Failed to get ovfenv device with errcode: {}, error: {}",result.getExitValue(),result.getStdError());    throw new IllegalStateException("Failed to get ovfenv device");  }  String ovfenv_partition=result.getStdOutput().split("\n")[0];  log.info("Probed ovfenv partition {}",ovfenv_partition);  return ovfenv_partition;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:33.620 -0500",hash_original_method="08B6588D85EC619CC2E0611C0812F3DA",hash_generated_method="C90550FE6E97011D369405A6A248602A") public void onUsbMassStorageConnectionChanged(boolean connected){}  }
class C{  public MosaicSupplyChangeTransaction(final DeserializationOptions options,final Deserializer deserializer){  super(TransactionTypes.MOSAIC_SUPPLY_CHANGE,options,deserializer);  this.mosaicId=deserializer.readObject("mosaicId",null);  this.supplyType=MosaicSupplyType.fromValueOrDefault(deserializer.readInt("supplyType"));  this.delta=Supply.readFrom(deserializer,"delta");  this.validate();}  }
class C{  private static void updateMovingTime(Context context,RemoteViews remoteViews,int[] ids,TripStatistics tripStatistics){  String movingTime=tripStatistics == null ? context.getString(R.string.value_unknown) : StringUtils.formatElapsedTime(tripStatistics.getMovingTime());  remoteViews.setTextViewText(ids[0],context.getString(R.string.stats_moving_time));  remoteViews.setTextViewText(ids[1],movingTime);  remoteViews.setViewVisibility(ids[2],View.GONE);}  }
class C{  public boolean similar(Object other){  try {    if (!(other instanceof JSONObject)) {      return false;    }    Set<String> set=this.keySet();    if (!set.equals(((JSONObject)other).keySet())) {      return false;    }    Iterator<String> iterator=set.iterator();    while (iterator.hasNext()) {      String name=iterator.next();      Object valueThis=this.get(name);      Object valueOther=((JSONObject)other).get(name);      if (valueThis instanceof JSONObject) {        if (!((JSONObject)valueThis).similar(valueOther)) {          return false;        }      } else       if (valueThis instanceof JSONArray) {        if (!((JSONArray)valueThis).similar(valueOther)) {          return false;        }      } else       if (!valueThis.equals(valueOther)) {        return false;      }    }    return true;  } catch (  Throwable exception) {    return false;  }}  }
class C{  public static void enable(){}  }
class C{  public void test_getDefaultAlgorithm(){  String def=TrustManagerFactory.getDefaultAlgorithm();  if (getDefaultAlgorithm() == null) {    assertNull("DefaultAlgorithm must be null",def);  } else {    assertEquals("Invalid default algorithm",def,getDefaultAlgorithm());  }  String defA="Proba.trustmanagerfactory.defaul.type";  Security.setProperty("ssl.TrustManagerFactory.algorithm",defA);  assertEquals("Incorrect getDefaultAlgorithm()",TrustManagerFactory.getDefaultAlgorithm(),defA);  if (def == null) {    def="";  }  Security.setProperty("ssl.TrustManagerFactory.algorithm",def);  assertEquals("Incorrect getDefaultAlgorithm()",TrustManagerFactory.getDefaultAlgorithm(),def);}  }
class C{  public static List<Class<?>> findSuperTypes(Class<?> cls,Class<?> endBefore){  return findSuperTypes(cls,endBefore,new ArrayList<Class<?>>(8));}  }
class C{  @Override public void clearWarnings() throws SQLException {  try {    debugCodeCall("clearWarnings");    checkClosed();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected void updateDownloadVerifyButtons(){  if (parametersAreValid() && !inputContent.isEmpty()) {    enableDownloadVerifyButtons();  } else {    disableDownloadVerifyButtons();  }}  }
class C{  public InterruptedIOException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public int readTimeout(byte[] buffer,int offset,int length,long timeout) throws IOException {  return 0;}  }
class C{  public RegistrationException(String message,Reason reason){  super(message);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:27.400 -0500",hash_original_method="F10EA794C47048E710B5CED57C611CE1",hash_generated_method="8B97BEA59BFAC404F3B3E7E378DE5766") public void handleException(ParseException ex,SIPMessage sipMessage,Class hdrClass,String header,String message) throws ParseException {  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logException(ex);  if ((hdrClass != null) && (hdrClass.equals(From.class) || hdrClass.equals(To.class) || hdrClass.equals(CSeq.class)|| hdrClass.equals(Via.class)|| hdrClass.equals(CallID.class)|| hdrClass.equals(RequestLine.class)|| hdrClass.equals(StatusLine.class))) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Encountered bad message \n" + message);    String msgString=sipMessage.toString();    if (!msgString.startsWith("SIP/") && !msgString.startsWith("ACK ")) {      String badReqRes=createBadReqRes(msgString,ex);      if (badReqRes != null) {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Sending automatic 400 Bad Request:");          sipStack.getStackLogger().logDebug(badReqRes);        }        try {          this.sendMessage(badReqRes.getBytes(),this.getPeerInetAddress(),this.getPeerPort(),false);        } catch (        IOException e) {          this.sipStack.getStackLogger().logException(e);        }      } else {        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Could not formulate automatic 400 Bad Request");        }      }    }    throw ex;  } else {    sipMessage.addUnparsed(header);  }}  }
class C{  public void write(int b) throws IOException {  Boolean result=(Boolean)callback.call(consoleId.get().intValue(),String.valueOf((char)b));  if (result) {    out.write(b);  }}  }
class C{  private static Indent indentForBlock(PsiElement psiBlock,ASTNode child){  if (LEFT_CURLY.equals(child.getElementType()) || RIGHT_CURLY.equals(child.getElementType())) {    return Indent.getNoneIndent();  }  return Indent.getNormalIndent();}  }
class C{  public void selectNextOverlay(){  if (mCurrentOverlayIndex == NO_OVERLAY) {    if (mOverlays.isEmpty()) {      return;    }    mCurrentOverlayIndex=0;  } else {    mCurrentOverlayIndex=++mCurrentOverlayIndex % mOverlays.size();    if (mCurrentOverlayIndex == 0) {      mCurrentOverlayIndex=NO_OVERLAY;    }  }  doSetOverlay(getCurrentOverlay());}  }
class C{  public synchronized void removeZoomListener(ZoomListener listener){  zoomDelegate.remove(listener);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof AppInfo) {    AppInfo ai=(AppInfo)o;    return this.id.equals(ai.id);  }  return super.equals(o);}  }
class C{  public static List<Column> adaptFields(String[] aFields){  List<Column> columns=new ArrayList<Column>();  for (int i=0; i < aFields.length; i++) {    String col=aFields[i];    columns.add(new Column(col));  }  return columns;}  }
class C{  public Element removeAttribute(String attribute_name){  try {    getElementHashEntry().remove(attribute_name);  } catch (  Exception e) {  }  return (this);}  }
class C{  public MavenArtifactResolver(final MavenProperties properties){  Assert.notNull(properties,"MavenProperties must not be null");  Assert.notNull(properties.getLocalRepository(),"Local repository path cannot be null");  if (log.isDebugEnabled()) {    log.debug("Local repository: " + properties.getLocalRepository());    log.debug("Remote repositories: " + StringUtils.collectionToCommaDelimitedString(properties.getRemoteRepositories().keySet()));  }  this.properties=properties;  if (isProxyEnabled() && proxyHasCredentials()) {    final String username=this.properties.getProxy().getAuth().getUsername();    final String password=this.properties.getProxy().getAuth().getPassword();    this.authentication=newAuthentication(username,password);  } else {    this.authentication=null;  }  File localRepository=new File(this.properties.getLocalRepository());  if (!localRepository.exists()) {    Assert.isTrue(localRepository.mkdirs(),"Unable to create directory for local repository: " + localRepository);  }  for (  Map.Entry<String,MavenProperties.RemoteRepository> entry : this.properties.getRemoteRepositories().entrySet()) {    MavenProperties.RemoteRepository remoteRepository=entry.getValue();    RemoteRepository.Builder remoteRepositoryBuilder=new RemoteRepository.Builder(entry.getKey(),DEFAULT_CONTENT_TYPE,remoteRepository.getUrl());    if (isProxyEnabled()) {      MavenProperties.Proxy proxyProperties=this.properties.getProxy();      if (this.authentication != null) {        remoteRepositoryBuilder.setProxy(new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),proxyProperties.getPort(),this.authentication));      } else {        remoteRepositoryBuilder.setProxy(new Proxy(proxyProperties.getProtocol(),proxyProperties.getHost(),proxyProperties.getPort()));      }    }    if (remoteRepositoryHasCredentials(remoteRepository)) {      final String username=remoteRepository.getAuth().getUsername();      final String password=remoteRepository.getAuth().getPassword();      remoteRepositoryBuilder.setAuthentication(newAuthentication(username,password));    }    this.remoteRepositories.add(remoteRepositoryBuilder.build());  }  this.repositorySystem=newRepositorySystem();}  }
class C{  void assignThisToLocal(Local left){  PurityNode node=PurityThisNode.node;  localsRemove(left);  localsPut(left,node);  nodes.add(node);  paramNodes.add(node);  if (doCheck)   sanityCheck();}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"RECOMMEND_ENTITY\" ("+ "\"ID\" INTEGER PRIMARY KEY ,"+ "\"TITLE\" TEXT,"+ "\"TAG\" TEXT,"+ "\"SHARE_TITLE\" TEXT,"+ "\"DESCRIPTION\" TEXT,"+ "\"SHARE\" TEXT,"+ "\"THUMB\" TEXT,"+ "\"PUBLISHED_AT\" TEXT,"+ "\"URL\" TEXT,"+ "\"CHANNEL\" TEXT,"+ "\"LABEL\" TEXT,"+ "\"LABEL_COLOR\" TEXT,"+ "\"SCHEME\" TEXT,"+ "\"COMMENTS_TOTAL\" INTEGER);");}  }
class C{  public int nextDimension(int d){  if (d == maxDimension) {    return 1;  }  return d + 1;}  }
class C{  public void removeListener(final IDebugPerspectiveModelListener listener){  m_listeners.removeListener(listener);}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  m_extns=this.getNamespace();  m_decl=getElemExtensionDecl(sroot,m_extns);  if (m_decl == null)   sroot.getExtensionNamespacesManager().registerExtension(m_extns);}  }
class C{  public final byte[] update(byte[] input,int inputOffset,int inputLen){  if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {    throw new IllegalStateException();  }  if (input == null) {    throw new IllegalArgumentException("input == null");  }  checkInputOffsetAndCount(input.length,inputOffset,inputLen);  if (input.length == 0) {    return null;  }  return spiImpl.engineUpdate(input,inputOffset,inputLen);}  }
class C{  protected Package definePackage(String name,Manifest man,URL url) throws IllegalArgumentException {  String path=name.replace('.','/').concat("/");  String specTitle=null, specVersion=null, specVendor=null;  String implTitle=null, implVersion=null, implVendor=null;  String sealed=null;  URL sealBase=null;  Attributes attr=man.getAttributes(path);  if (attr != null) {    specTitle=attr.getValue(Name.SPECIFICATION_TITLE);    specVersion=attr.getValue(Name.SPECIFICATION_VERSION);    specVendor=attr.getValue(Name.SPECIFICATION_VENDOR);    implTitle=attr.getValue(Name.IMPLEMENTATION_TITLE);    implVersion=attr.getValue(Name.IMPLEMENTATION_VERSION);    implVendor=attr.getValue(Name.IMPLEMENTATION_VENDOR);    sealed=attr.getValue(Name.SEALED);  }  attr=man.getMainAttributes();  if (attr != null) {    if (specTitle == null) {      specTitle=attr.getValue(Name.SPECIFICATION_TITLE);    }    if (specVersion == null) {      specVersion=attr.getValue(Name.SPECIFICATION_VERSION);    }    if (specVendor == null) {      specVendor=attr.getValue(Name.SPECIFICATION_VENDOR);    }    if (implTitle == null) {      implTitle=attr.getValue(Name.IMPLEMENTATION_TITLE);    }    if (implVersion == null) {      implVersion=attr.getValue(Name.IMPLEMENTATION_VERSION);    }    if (implVendor == null) {      implVendor=attr.getValue(Name.IMPLEMENTATION_VENDOR);    }    if (sealed == null) {      sealed=attr.getValue(Name.SEALED);    }  }  if ("true".equalsIgnoreCase(sealed)) {    sealBase=url;  }  return definePackage(name,specTitle,specVersion,specVendor,implTitle,implVersion,implVendor,sealBase);}  }
class C{  public void resetSize(){  if (getMeasuredWidth() == 0 && getMeasuredHeight() == 0) {    return;  }  measure(MeasureSpec.makeMeasureSpec(0,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.EXACTLY));  layout(0,0,0,0);}  }
class C{  public int hashCode(){  return (lat_degrees | lon_degrees << 8 | (lat_minutes + (int)lat_seconds) << 16 | (lon_minutes + (int)lon_seconds) << 23);}  }
class C{  public boolean canEditFolder(AcsAccessObject acs,ArchiveObject arch,int fdrId,String entidad) throws Exception {  boolean can=false;  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    can=FolderMdoFdr.canEditFolder(dbConn,acs.getAccessToken(),arch.getArchiveToken(),fdrId);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public void print(Object obj){  print(String.valueOf(obj));}  }
class C{  private void searchAll(final List<NaviNode> nodes,final List<NaviEdge> edges,final String searchString){  for (  final NaviNode node : nodes) {    searchNode(node,searchString);  }  for (  final NaviEdge edge : edges) {    searchEdge(edge,searchString);  }}  }
class C{  public boolean isSetPath(){  return this.path != null;}  }
class C{  @Override protected void onPostProcess(String what,String[] oldPathNames,String[] newPathNames,int modifyCount,int itemCount,int opCode){  if (Global.debugEnabled) {    Log.i(Global.LOG_CONTEXT,mDebugPrefix + "onPostProcess('" + what+ "') => "+ modifyCount+ "/"+ itemCount);  }  super.onPostProcess(what,oldPathNames,newPathNames,modifyCount,itemCount,opCode);  int resId=getResourceId(opCode);  String message=mContext.getString(resId,Integer.valueOf(modifyCount),Integer.valueOf(itemCount));  if (itemCount > 0) {    MediaScanner.updateMediaDBInBackground(mContext,message,oldPathNames,newPathNames);  }  if (false && this.mHasNoMedia && (mContext != null)) {    this.mContext.getContentResolver().notifyChange(FotoSql.SQL_TABLE_EXTERNAL_CONTENT_URI,null,false);    this.mHasNoMedia=false;  }  Toast.makeText(mContext,message,Toast.LENGTH_LONG).show();}  }
class C{  protected void initializeDataExtends(Relation<NumberVector> relation,int dim,double[] min,double[] extend){  assert (min.length == dim && extend.length == dim);  if (minima == null || maxima == null || minima.length == 0 || maxima.length == 0) {    double[][] minmax=RelationUtil.computeMinMax(relation);    final double[] dmin=minmax[0], dmax=minmax[1];    for (int d=0; d < dim; d++) {      min[d]=dmin[d];      extend[d]=dmax[d] - dmin[d];    }    return;  }  if (minima.length == dim) {    System.arraycopy(minima,0,min,0,dim);  } else   if (minima.length == 1) {    Arrays.fill(min,minima[0]);  } else {    throw new AbortException("Invalid minima specified: expected " + dim + " got minima dimensionality: "+ minima.length);  }  if (maxima.length == dim) {    for (int d=0; d < dim; d++) {      extend[d]=maxima[d] - min[d];    }    return;  } else   if (maxima.length == 1) {    for (int d=0; d < dim; d++) {      extend[d]=maxima[0] - min[d];    }    return;  } else {    throw new AbortException("Invalid maxima specified: expected " + dim + " got maxima dimensionality: "+ maxima.length);  }}  }
class C{  public void addCoinsSentEventListener(WalletCoinsSentEventListener listener){  addCoinsSentEventListener(Threading.USER_THREAD,listener);}  }
class C{  private void writeLargeDataToFile(File file,int size) throws FileNotFoundException, IOException {  FileOutputStream fos=new FileOutputStream(file);  byte[] buf=new byte[size];  try {    fos.write(buf);  }  finally {    fos.close();  }}  }
class C{  private boolean isSubtype(TypeMirror t1,TypeMirror t2){  TypeMirror t1Erased=t1;  TypeMirror t2Erased=t2;  if (needsErasure(t1Erased)) {    t1Erased=env.getTypeUtils().erasure(t1Erased);  }  if (needsErasure(t2Erased)) {    t2Erased=env.getTypeUtils().erasure(t2Erased);  }  return env.getTypeUtils().isSubtype(t1Erased,t2Erased);}  }
class C{  public HandleErrorResult secondaryFail(Method method,Object[] args) throws Throwable {  if (pingSecondaryProtocol(this.secondaryProtocol)) {    return relaunchOperation(method,args);  }  if (!isMasterHostFail()) {    try {      if (masterProtocol != null) {        this.masterProtocol.ping();        syncConnection(secondaryProtocol,masterProtocol);        proxy.lock.lock();        try {          currentProtocol=masterProtocol;        }  finally {          proxy.lock.unlock();        }        FailoverLoop.addListener(this);        return relaunchOperation(method,args);      }    } catch (    Exception e) {      if (setMasterHostFail()) {        blackListAndCloseConnection(masterProtocol);      }    }  }  try {    reconnectFailedConnection(new SearchFilter(true,true));    handleFailLoop();    if (isSecondaryHostFail()) {      syncConnection(this.secondaryProtocol,this.masterProtocol);      proxy.lock.lock();      try {        currentProtocol=this.masterProtocol;      }  finally {        proxy.lock.unlock();      }    }    logger.info("Connection to slave lost, new slave " + currentProtocol.getHostAddress() + ", conn:"+ currentProtocol.getServerThreadId()+ " found"+ ", query is re-execute on new server without throwing exception");    return relaunchOperation(method,args);  } catch (  Exception ee) {    FailoverLoop.removeListener(this);    return new HandleErrorResult();  }}  }
class C{  private void handleEventPoint(EventPoint ep){  AugmentedNode<ILineSegment> left=lineState.leftNeighbor(ep);  AugmentedNode<ILineSegment> right=lineState.rightNeighbor(ep);  lineState.determineIntersecting(ep,left,right);  List<ILineSegment> ints=ep.intersectingSegments();  List<ILineSegment> ups=ep.upperEndpointSegments();  List<ILineSegment> lows=ep.lowerEndpointSegments();  if (lows.size() + ups.size() + ints.size() > 1) {    record(ep.point,lows,ups,ints);  }  lineState.deleteRange(left,right);  lineState.setSweepPoint(ep.point);  boolean update=false;  if (!ups.isEmpty()) {    lineState.insertSegments(ups);    update=true;  }  if (!ints.isEmpty()) {    lineState.insertSegments(ints);    update=true;  }  if (!update) {    if (left != null && right != null) {      updateQueue(left,right);    }  } else {    if (left != null) {      updateQueue(left,lineState.successor(left));    }    if (right != null) {      updateQueue(lineState.pred(right),right);    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.INLINE_TAG__TITLE:    return getTitle();case DomPackage.INLINE_TAG__VALUES:  return getValues();case DomPackage.INLINE_TAG__TAG_DEFINITION:return getTagDefinition();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static WriteCommentFragment newInstance(@Nullable Comment existingComment,@Nullable String enterableGiveawayId){  WriteCommentFragment fragment=new WriteCommentFragment();  Bundle args=new Bundle();  args.putSerializable(SAVED_COMMENT,existingComment);  args.putString(SAVED_GIVEAWAY_ID,enterableGiveawayId);  fragment.setArguments(args);  return fragment;}  }
class C{  public Chat createChat(String userJID,MessageListener listener){  String threadID;  do {    threadID=nextID();  } while (threadChats.get(threadID) != null);  return createChat(userJID,threadID,listener);}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public synchronized void commit(Session session){  checkOpen();  openForWriting();  log.commit(session.getId());  long size=log.getSize();  if (size - logSizeBase > maxLogSize / 2) {    int firstSection=log.getLogFirstSectionId();    checkpoint();    int newSection=log.getLogSectionId();    if (newSection - firstSection <= 2) {      return;    }    long newSize=log.getSize();    if (newSize < size || size < maxLogSize) {      ignoreBigLog=false;      return;    }    if (!ignoreBigLog) {      ignoreBigLog=true;      trace.error(null,"Transaction log could not be truncated; size: " + (newSize / 1024 / 1024) + " MB");    }    logSizeBase=log.getSize();  }}  }
class C{  public static LatLon[] greatCircleArcExtremeLocations(Iterable<? extends LatLon> locations){  if (locations == null) {    throw new IllegalArgumentException("Locations List Is Null");  }  LatLon minLatLocation=null;  LatLon maxLatLocation=null;  LatLon lastLocation=null;  for (  LatLon ll : locations) {    if (lastLocation != null) {      LatLon[] extremes=LatLon.greatCircleArcExtremeLocations(lastLocation,ll);      if (extremes == null)       continue;      if (minLatLocation == null || minLatLocation.getLatitude().degrees > extremes[0].getLatitude().degrees)       minLatLocation=extremes[0];      if (maxLatLocation == null || maxLatLocation.getLatitude().degrees < extremes[1].getLatitude().degrees)       maxLatLocation=extremes[1];    }    lastLocation=ll;  }  return new LatLon[]{minLatLocation,maxLatLocation};}  }
class C{  private void update(){  getDiff();  getCommitsLog();}  }
class C{  @SuppressWarnings("unchecked") public static void register(String algorithmURI,String implementingClass) throws AlgorithmAlreadyRegisteredException, ClassNotFoundException, InvalidTransformException {  JavaUtils.checkRegisterPermission();  Class<? extends TransformSpi> transformSpi=transformSpiHash.get(algorithmURI);  if (transformSpi != null) {    Object exArgs[]={algorithmURI,transformSpi};    throw new AlgorithmAlreadyRegisteredException("algorithm.alreadyRegistered",exArgs);  }  Class<? extends TransformSpi> transformSpiClass=(Class<? extends TransformSpi>)ClassLoaderUtils.loadClass(implementingClass,Transform.class);  transformSpiHash.put(algorithmURI,transformSpiClass);}  }
class C{  private E firstDataItem(){  for (Node p=head; p != null; p=succ(p)) {    Object item=p.item;    if (p.isData) {      if (item != null && item != p)       return this.<E>cast(item);    } else     if (item == null)     return null;  }  return null;}  }
class C{  public static List<LanguageStats> buildStats(List<Project> projectList){  List<Project> projects=filterUniqueSnapshots(projectList);  Map<Date,Map<String,Integer>> counts=new HashMap<>();  TreeSet<Date> dates=new TreeSet<>();  Set<String> languages=new HashSet<>();  for (  Project p : projects) {    String language=p.getPrimaryLanguage();    Date date=p.getSnapshotDate();    if (language == null)     language="unknown";    dates.add(date);    languages.add(language);    Map<String,Integer> hist=counts.get(date);    if (hist == null) {      hist=new HashMap<>();      counts.put(date,hist);    }    if (hist.containsKey(language)) {      hist.put(language,hist.get(language) + 1);    } else {      hist.put(language,1);    }  }  List<LanguageStats> result=new ArrayList<>();  for (  String l : languages) {    List<Integer> projectCounts=new ArrayList<>();    List<Date> snapshotDates=new ArrayList<>(dates);    for (    Date d : snapshotDates) {      Integer i=counts.get(d).get(l);      if (i == null) {        projectCounts.add(0);      } else {        projectCounts.add(i);      }    }    result.add(new LanguageStats(l,projectCounts,snapshotDates));  }  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean isLoggable(){  return Log.isLoggable(tag,level);}  }
class C{  public void subscribeToSyncBrokerService() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setDateFactory("2013-01-02 20:00:00");  VOServiceDetails supplService=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForBroker");  VendorData brokerData=setupNewBroker("2013-01-03 08:10:00");  setCutOffDay(brokerData.getAdminKey(),1);  CustomerData brokerCustomerData=registerCustomer(brokerData,"brokerCustomer");  setDateFactory("2013-07-10 20:00:00");  VOServiceDetails brokerService=grantResalePermission(supplierData,supplService,brokerData);  brokerService=publishActivateService(brokerData,brokerService);  subscribe(brokerCustomerData.getAdminUser(),"brokerSubscription",brokerService,"2013-08-18 00:00:00","ADMIN");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("subscribeToSyncBrokerService",new TestData(supplierData,brokerData));}  }
class C{  protected void saveKeys(){  ButtonInfo[] buttons=new ButtonInfo[NavigationButtons.SLOT_COUNT];  for (int i=0; i < NavigationButtons.SLOT_COUNT; i++) {    int idIndex=mVertical ? NavigationButtons.SLOT_COUNT - i - 1 : i;    buttons[i]=(ButtonInfo)mButtonViews.get(idIndex).getTag();  }  NavigationButtons.storeButtonMap(mContext,buttons);}  }
class C{  public int size(){  return size;}  }
class C{  private void paintOriginalImage(){  Graphics g=originalImage.getGraphics();  g.setColor(Color.BLACK);  g.fillRect(0,0,FULL_SIZE,FULL_SIZE);  for (int i=0; i < QUAD_SIZE; i+=3) {    int x=i;    g.setColor(Color.RED);    g.drawLine(x,0,x,QUAD_SIZE);    x++;    g.setColor(Color.GREEN);    g.drawLine(x,0,x,QUAD_SIZE);    x++;    g.setColor(Color.BLUE);    g.drawLine(x,0,x,QUAD_SIZE);  }  try {    URL url=getClass().getResource("images/BBGrayscale.png");    BufferedImage picture=ImageIO.read(url);    int xDiff=QUAD_SIZE - picture.getWidth();    int yDiff=QUAD_SIZE - picture.getHeight();    g.drawImage(picture,QUAD_SIZE + xDiff / 2,yDiff / 2,null);  } catch (  Exception e) {    System.out.println("Problem reading image file: " + e);  }  g.setColor(Color.WHITE);  g.fillRect(0,QUAD_SIZE,QUAD_SIZE,QUAD_SIZE);  g.setColor(Color.BLACK);  g.drawOval(2,QUAD_SIZE + 2,QUAD_SIZE - 4,QUAD_SIZE - 4);  g.drawArc(20,QUAD_SIZE + 20,(QUAD_SIZE - 40),QUAD_SIZE - 40,190,160);  int eyeSize=7;  int eyePos=30 - (eyeSize / 2);  g.fillOval(eyePos,QUAD_SIZE + eyePos,eyeSize,eyeSize);  g.fillOval(QUAD_SIZE - eyePos - eyeSize,QUAD_SIZE + eyePos,eyeSize,eyeSize);  g.setColor(Color.WHITE);  g.fillRect(QUAD_SIZE + 1,QUAD_SIZE + 1,QUAD_SIZE,QUAD_SIZE);  g.setColor(Color.BLACK);  for (int i=0; i < QUAD_SIZE; i+=4) {    int pos=QUAD_SIZE + i;    g.drawLine(pos,QUAD_SIZE + 1,pos,FULL_SIZE);    g.drawLine(QUAD_SIZE + 1,pos,FULL_SIZE,pos);  }  originalImagePainted=true;}  }
class C{  public void testSetBitPositiveInside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=17;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-13,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public ValueNumber forNumber(int number){  if (number >= getNumValuesAllocated()) {    throw new IllegalArgumentException("Value " + number + " has not been allocated");  }  return allocatedValueList.get(number);}  }
class C{  private boolean isParentOf(IModelNode node,IModelNode possibleParent){  assert (!(possibleParent instanceof WebAppDebugModel));  if (possibleParent == null) {    return false;  }  while (node != null) {    if (node.getParent() == possibleParent) {      return true;    }    node=node.getParent();  }  return false;}  }
class C{  public static String bagToString(String name,String key,String joinWith){  return StringUtils.join(BaggageContents.getStrings(name,key),joinWith);}  }
class C{  private boolean volumeHasDefaultNamingConvention(String volumeName,boolean isDistributed){  try {    int endIndex=volumeName.length() - VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX.length();    String supportingDeviceName=volumeName.substring(0,endIndex);    List<String> claimedVolumeNames=new ArrayList<String>();    if (!isDistributed) {      int startIndex=VPlexApiConstants.DEVICE_PREFIX.length();      claimedVolumeNames.add(volumeName.substring(startIndex,endIndex));    } else {      String distVolPrefix=VPlexApiConstants.DIST_DEVICE_PREFIX + VPlexApiConstants.DIST_DEVICE_NAME_DELIM;      int startIndex=distVolPrefix.length();      String supportingDeviceNameNoPrefix=supportingDeviceName.substring(startIndex);      claimedVolumeNames.addAll(Arrays.asList(supportingDeviceNameNoPrefix.split(VPlexApiConstants.DIST_DEVICE_NAME_DELIM)));    }    return VPlexApiUtils.volumeHasDefaultNamingConvention(volumeName,supportingDeviceName,isDistributed,claimedVolumeNames);  } catch (  Exception e) {    s_logger.info("Volume {} does not conform to default naming convention: {}",volumeName,e.getMessage());    return false;  }}  }
class C{  public static void debug(String message){  PROFILE_LOG.debug(message);}  }
class C{  public boolean isPropertyPattern(){  return _property_list_pattern || _property_value_pattern;}  }
class C{  public long roundTripTime(long timeout,TimeUnit unit) throws InterruptedException {  if (latch.await(timeout,unit)) {    return received - sent;  } else {    return -2;  }}  }
class C{  public static @Nullable <T extends Closeable>CloseableReference<T> of(@Nullable T t){  if (t == null) {    return null;  } else {    return new CloseableReference<T>(t,(ResourceReleaser<T>)DEFAULT_CLOSEABLE_RELEASER);  }}  }
class C{  public BrushedMetalComposite(final Composite parent,final int style){  super(parent,style);  addListeners(parent);}  }
class C{  public Name(Name src,int n){  int slabels=src.labels();  if (n > slabels)   throw new IllegalArgumentException("attempted to remove too " + "many labels");  name=src.name;  setlabels(slabels - n);  for (int i=0; i < MAXOFFSETS && i < slabels - n; i++)   setoffset(i,src.offset(i + n));}  }
class C{  @DSSink({DSSinkKind.LOG}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:14.319 -0500",hash_original_method="A4DA8672EE11B64C720877911E862CCA",hash_generated_method="DD466E571F8813B6A90B31373C9D4E21") public void enableCarMode(int flags){  if (mService != null) {    try {      mService.enableCarMode(flags);    } catch (    RemoteException e) {      Log.e(TAG,"disableCarMode: RemoteException",e);    }  }}  }
class C{  @Override public void flush(){}  }
class C{  public void testTodoCase() throws Exception {  String file="TodoTestCase.java";  String warningMessage=file + ":5: Warning: " + TodoDetector.ISSUE.getBriefDescription(TextFormat.TEXT)+ " ["+ TodoDetector.ISSUE.getId()+ "]\n"+ "    // TODO\n"+ "       ~~~~\n"+ "0 errors, 1 warnings\n";  assertEquals(warningMessage,lintFiles(file));}  }
class C{  public final void add(Matrix3d m1){  this.m00+=m1.m00;  this.m01+=m1.m01;  this.m02+=m1.m02;  this.m10+=m1.m10;  this.m11+=m1.m11;  this.m12+=m1.m12;  this.m20+=m1.m20;  this.m21+=m1.m21;  this.m22+=m1.m22;}  }
class C{  private void populateMqttConnectOptions() throws SpyException {  options=new MqttConnectOptions();  if (ProtocolVersionEnum.MQTT_3_1_1.equals(getProtocol())) {    options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1_1);  } else   if (ProtocolVersionEnum.MQTT_3_1.equals(getProtocol())) {    options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1);  } else {    options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_DEFAULT);  }  if (getServerURI().size() > 1) {    options.setServerURIs(getServerURI().toArray(new String[getServerURI().size()]));  }  options.setCleanSession(isCleanSession());  options.setConnectionTimeout(getConnectionTimeout());  options.setKeepAliveInterval(getKeepAliveInterval());  if (getUserCredentials() != null) {    options.setUserName(getUserCredentials().getUsername());    options.setPassword(ConversionUtils.base64ToString(getUserCredentials().getPassword()).toCharArray());  }  if (getLastWillAndTestament() != null) {    options.setWill(getLastWillAndTestament().getTopic(),Base64.decodeBase64(getLastWillAndTestament().getValue()),getLastWillAndTestament().getQos(),getLastWillAndTestament().isRetained());  }  if (getSSL() == null) {  } else {    if (SecureSocketModeEnum.PROPERTIES.equals(getSSL().getMode())) {      Properties props=new Properties();      for (      final Property prop : getSSL().getProperty()) {        props.put(prop.getName(),prop.getValue());      }      options.setSSLProperties(props);    } else     if (SecureSocketModeEnum.BASIC.equals(getSSL().getMode())) {      options.setSocketFactory(SecureSocketFactoryBuilder.getSocketFactory(getSSL().getProtocol()));    } else     if (SecureSocketModeEnum.SERVER_ONLY.equals(getSSL().getMode())) {      options.setSocketFactory(SecureSocketFactoryBuilder.getSocketFactory(getSSL().getProtocol(),getSSL().getCertificateAuthorityFile()));    } else     if (SecureSocketModeEnum.SERVER_KEYSTORE.equals(getSSL().getMode())) {      options.setSocketFactory(SecureSocketFactoryBuilder.getSocketFactory(getSSL().getProtocol(),getSSL().getServerKeyStoreFile(),getSSL().getServerKeyStorePassword()));    } else     if (SecureSocketModeEnum.SERVER_AND_CLIENT.equals(getSSL().getMode())) {      options.setSocketFactory(SecureSocketFactoryBuilder.getSocketFactory(getSSL().getProtocol(),getSSL().getCertificateAuthorityFile(),getSSL().getClientCertificateFile(),getSSL().getClientKeyFile(),getSSL().getClientKeyPassword(),Boolean.TRUE.equals(getSSL().isClientKeyPEM())));    } else     if (SecureSocketModeEnum.SERVER_AND_CLIENT_KEYSTORES.equals(getSSL().getMode())) {      options.setSocketFactory(SecureSocketFactoryBuilder.getSocketFactory(getSSL().getProtocol(),getSSL().getServerKeyStoreFile(),getSSL().getServerKeyStorePassword(),getSSL().getClientKeyStoreFile(),getSSL().getClientKeyStorePassword(),getSSL().getClientKeyPassword()));    }  }}  }
class C{  public int indexOf(Comparable seriesKey){  assert seriesKey instanceof String;  return names.indexOf(seriesKey);}  }
class C{  public void init(Processor processor){  if (action.getPredicate() != null) {    try {      predicate=ExpressionHandlerFactory.getHandler(action.getPredicate());      predicate.init(processor,getAction(),true);      if (!isUsesHeaders()) {        setUsesHeaders(predicate.isUsesHeaders());      }      if (!isUsesContent()) {        setUsesContent(predicate.isUsesContent());      }    } catch (    Throwable t) {      if (log.isLoggable(Level.FINE)) {        log.log(Level.FINE,"Failed to initialise predicate for action '" + action + "'",t);      }      ProcessorIssue pi=new ProcessorIssue();      pi.setProcessor(processor.getDescription());      pi.setAction(action.getDescription());      pi.setSeverity(Severity.Error);      pi.setDescription(t.getMessage());      if (issues == null) {        issues=new ArrayList<Issue>();      }      issues.add(pi);    }  }}  }
class C{  public boolean addLetBinding(Binder binder,Expression expr){  if (this.binders.containsKey(binder)) {    this.binders.remove(binder);    this.binders.put(binder,expr);    return false;  }  this.binders.put(binder,expr);  return true;}  }
class C{  public static void addSecurityPolicy(SecurityPolicy policy){  policies.put(policy.policyUri,policy);}  }
class C{  public static String prettyPrintHex(ByteBuffer bbToConvert){  return prettyPrintHex(bbToConvert.array());}  }
class C{  public void receiveErrordeleteSessionsForSessionId(java.lang.Exception e){}  }
class C{  @Override synchronized protected void forwardToPort(AbstractMRMessage m,AbstractMRListener reply){  if (log.isDebugEnabled()) {    log.debug("forwardToPort message: [" + m + "]");  }  mLastSender=reply;  Runnable r=new XmtNotifier(m,mLastSender,this);  javax.swing.SwingUtilities.invokeLater(r);  try {    xbee.sendPacketAsync(((XBeeMessage)m).getXBeeRequest());  } catch (  XBeeException xbe) {    log.error("Error Sending message to XBee: " + xbe);  }}  }
class C{  public ModifiedOWLQN(){  this(0.0);}  }
class C{  @Override protected void initData(){}  }
class C{  private void scanLitChar(int pos){  if (reader.ch == '\\') {    if (reader.peekChar() == '\\' && !reader.isUnicode()) {      reader.skipChar();      reader.putChar('\\',true);    } else {      reader.scanChar();switch (reader.ch) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':        char leadch=reader.ch;      int oct=reader.digit(pos,8);    reader.scanChar();  if ('0' <= reader.ch && reader.ch <= '7') {    oct=oct * 8 + reader.digit(pos,8);    reader.scanChar();    if (leadch <= '3' && '0' <= reader.ch && reader.ch <= '7') {      oct=oct * 8 + reader.digit(pos,8);      reader.scanChar();    }  }reader.putChar((char)oct);break;case 'b':reader.putChar('\b',true);break;case 't':reader.putChar('\t',true);break;case 'n':reader.putChar('\n',true);break;case 'f':reader.putChar('\f',true);break;case 'r':reader.putChar('\r',true);break;case '\'':reader.putChar('\'',true);break;case '\"':reader.putChar('\"',true);break;case '\\':reader.putChar('\\',true);break;default :lexError(reader.bp,"illegal.esc.char");}}} else if (reader.bp != reader.buflen) {reader.putChar(true);}}  }
class C{  Instruction makeMoveInstruction(Register lhs,Register rhs){  if (rhs.isFloatingPoint() && lhs.isFloatingPoint()) {    return MIR_Move.create(PPC_FMR,D(lhs),D(rhs));  } else   if (rhs.isAddress() && lhs.isAddress()) {    return MIR_Move.create(PPC_MOVE,A(lhs),A(rhs));  } else {    throw new OptimizingCompilerException("RegAlloc","unknown register:",lhs.toString());  }}  }
class C{  private void scaleImage(){  if (getAttachmentFile() == null || getAttachmentFile().getFileData() == null) {    return;  }  try {    long start=0;    long sizeBefore=0;    if (getLog().isDebugEnabled()) {      start=System.currentTimeMillis();      sizeBefore=getAttachmentFile().getFileData().length;    }    BufferedImage image=readImageFromByteArray();    if (image != null) {      BufferedImage thumbnailImage=createEmptyThumbnailImage(image);      drawThumbnail(image,thumbnailImage);      byte[] thumbByteArray=getByteArray(thumbnailImage);      getAttachmentFile().setFileData(thumbByteArray);      if (getLog().isDebugEnabled()) {        long time=System.currentTimeMillis() - start;        long size=thumbByteArray.length;        getLog().debug("Before: " + sizeBefore + "b, after: "+ size+ "b, "+ time+ "ms");      }    } else {      getAttachmentFile().setFileData(null);      getLog().info("Can not scale image. Maybe it has an unknown type. Db-Id is: " + getDbId());    }  } catch (  Exception e) {    getLog().error("Error while scaling image",e);  }}  }
class C{  @Override public String toString(){  String result=toString;  if (result == null) {    result=computeToString();    toString=result;  }  return result;}  }
class C{  protected void readExtras(@NonNull Bundle bundle){}  }
class C{  public static boolean equals(byte[] left,byte[] right){  if (left == null) {    return right == null;  }  if (right == null) {    return false;  }  if (left.length != right.length) {    return false;  }  boolean result=true;  for (int i=left.length - 1; i >= 0; i--) {    result&=left[i] == right[i];  }  return result;}  }
class C{  public static SolrInputDocument buildRandomDocument(int id){  SolrInputDocument doc=sdoc("id",id);  if (useField()) {    doc.addField("int",skewed(random().nextInt(),TestUtil.nextInt(random(),20,50)));  }  if (useField()) {    doc.addField("long",skewed(random().nextLong(),TestUtil.nextInt(random(),5000,5100)));  }  if (useField()) {    doc.addField("float",skewed(random().nextFloat() * random().nextInt(),1.0F / random().nextInt(23)));  }  if (useField()) {    doc.addField("double",skewed(random().nextDouble() * random().nextInt(),1.0D / random().nextInt(37)));  }  if (useField()) {    doc.addField("str",skewed(randomXmlUsableUnicodeString(),TestUtil.randomSimpleString(random(),1,1)));  }  if (useField()) {    int numBytes=(int)skewed(TestUtil.nextInt(random(),20,50),2);    byte[] randBytes=new byte[numBytes];    random().nextBytes(randBytes);    doc.addField("bin",ByteBuffer.wrap(randBytes));  }  if (useField()) {    doc.addField("date",skewed(randomDate(),randomSkewedDate()));  }  if (useField()) {    doc.addField("uuid",UUID.randomUUID().toString());  }  if (useField()) {    doc.addField("currency",skewed("" + (random().nextInt() / 100.) + ","+ randomCurrency(),"" + TestUtil.nextInt(random(),250,320) + ",USD"));  }  if (useField()) {    doc.addField("bool",random().nextBoolean() ? "t" : "f");  }  if (useField()) {    doc.addField("enum",randomEnumValue());  }  return doc;}  }
class C{  static Class<?> loadClass(String className,Class<?> callingClass) throws ClassNotFoundException {  try {    ClassLoader cl=Thread.currentThread().getContextClassLoader();    if (cl != null) {      return cl.loadClass(className);    }  } catch (  ClassNotFoundException e) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,e.getMessage(),e);    }  }  return loadClass2(className,callingClass);}  }
class C{  public FlowArrangement(){  this(HorizontalAlignment.CENTER,VerticalAlignment.CENTER,2.0,2.0);}  }
class C{  public static void downto(Float self,Number to,@ClosureParams(FirstParam.class) Closure closure){  float to1=to.floatValue();  if (self >= to1) {    for (float i=self; i >= to1; i--) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be greater than the value ("+ self+ ") it's called on.");}  }
class C{  public void store(StoredException storedException){  String fileName="FoamStoredException-" + storedException.platform.toString() + System.currentTimeMillis()+ new Random().nextInt();  OutputStream out=null;  try {    String json=new Gson().toJson(storedException);    out=context.openFileOutput(fileName,Context.MODE_PRIVATE);    final OutputStreamWriter writer=new OutputStreamWriter(out,"ISO8859_1");    writer.write(json);    writer.flush();  } catch (  Exception ex) {    utils.logIssue("Could not write exception to a file.",ex);  } finally {    closeStream(out);  }}  }
class C{  public int waitForTetherStateChange(long timeout){  long startTime=System.currentTimeMillis();  while (true) {    if ((System.currentTimeMillis() - startTime) > timeout) {      return mWifiTetherResult;    }    log("Wait for wifi tethering result.");synchronized (this) {      try {        this.wait(SHORT_TIMEOUT);      } catch (      InterruptedException e) {        e.printStackTrace();      }      if (mWifiTetherResult == INIT) {        continue;      } else {        return mWifiTetherResult;      }    }  }}  }
class C{  public synchronized void reset(){  count=0;}  }
class C{  public Matrix3f adjoint(Matrix3f store){  if (store == null) {    store=new Matrix3f();  }  store.m00=m11 * m22 - m12 * m21;  store.m01=m02 * m21 - m01 * m22;  store.m02=m01 * m12 - m02 * m11;  store.m10=m12 * m20 - m10 * m22;  store.m11=m00 * m22 - m02 * m20;  store.m12=m02 * m10 - m00 * m12;  store.m20=m10 * m21 - m11 * m20;  store.m21=m01 * m20 - m00 * m21;  store.m22=m00 * m11 - m01 * m10;  return store;}  }
class C{  public boolean isAllowedToWriteReview(PlatformUser user){  return isAllowedToCreateReview(user) || isAllowedToUpdateOwnReview(user);}  }
class C{  @Override public Request<RunnerStatus> status(ProjectReference projectReference,long processId){  checkNotNull(projectReference);  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path("status").path(String.valueOf(processId)).request().accept(APPLICATION_JSON).buildGet();  return new SimpleRequest<RunnerStatus>(request,DefaultRunnerStatus.class,getAuthenticationManager());}  }
class C{  public void compose(Raster srcArg,Raster dstIn,WritableRaster dstOut){  WritableRaster src;  int w;  int h;  if (dstIn != dstOut) {    dstOut.setDataElements(0,0,dstIn);  }  if (srcArg instanceof WritableRaster) {    src=(WritableRaster)srcArg;  } else {    src=srcArg.createCompatibleWritableRaster();    src.setDataElements(0,0,srcArg);  }  w=Math.min(src.getWidth(),dstIn.getWidth());  h=Math.min(src.getHeight(),dstIn.getHeight());  BufferedImage srcImg=new BufferedImage(srcCM,src,srcCM.isAlphaPremultiplied(),null);  BufferedImage dstImg=new BufferedImage(dstCM,dstOut,dstCM.isAlphaPremultiplied(),null);  SurfaceData srcData=BufImgSurfaceData.createData(srcImg);  SurfaceData dstData=BufImgSurfaceData.createData(dstImg);  Blit blit=Blit.getFromCache(srcData.getSurfaceType(),comptype,dstData.getSurfaceType());  blit.Blit(srcData,dstData,composite,null,0,0,0,0,w,h);}  }
class C{  public void testIntegrityFileTruncationAligned() throws Exception {  File testFile=tmpTestDir.newFile("alignedmalicioustruncationTest");  aesTestFile=createEncRAFInstance(testKey,testFile);  int i=0x41;  byte[] buf=new byte[aesTestFile.CHUNK_DATA_SIZE];  while (i < 0x61) {    Arrays.fill(buf,(byte)i++);    aesTestFile.write(buf);  }  RandomAccessFile randomAccessFile=new RandomAccessFile(testFile,"rw");  int nchunks=17;  randomAccessFile.setLength(nchunks * aesTestFile.CHUNK_ENC_SIZE);  randomAccessFile.close();  aesTestFile.seek(0);  i=1;  while (i < nchunks) {    i++;    aesTestFile.read(buf);  }  try {    aesTestFile.read(buf);    fail("failed detection of chunk modification");  } catch (  FileEncryptionException e) {    assertEquals("mac check in GCM failed",e.getMessage());  } finally {    aesTestFile.close();  }  try {    aesTestFile=openEncRAFInstance(testFile,false);    assertNotEquals(-1,aesTestFile.getShareKeyVersion());    aesTestFile.initWithShareKey(testKey);  } catch (  FileIntegrityException e) {    assertEquals("File authentication tag verification failed!",e.getMessage());  } finally {    if (aesTestFile != null) {      aesTestFile.close();    }  }}  }
class C{  public Boolean isSupportsMemoryHotAdd(){  return supportsMemoryHotAdd;}  }
class C{  private static OFActionSetNwTos decode_set_tos_bits(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        byte tosbits=get_byte(n.group(1));        OFActionSetNwTos.Builder ab=OFFactories.getFactory(version).actions().buildSetNwTos();        ab.setNwTos(tosbits);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid dst-port in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  protected double tokenToDouble(List recordList,int index,double def,boolean swapSign){  Double ret=tokenToDouble(recordList,index,def);  return swapSign ? -1 * ret : ret;}  }
class C{  public SortedDocValuesField(String name,BytesRef bytes){  super(name,TYPE);  fieldsData=bytes;}  }
class C{  public BaseEvent(Object source){  this.source=source;}  }
class C{  public static LiveChannelInfo parseGetLiveChannelInfo(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    LiveChannelInfo result=new LiveChannelInfo();    result.setDescription(root.getChildText("Description"));    result.setStatus(LiveChannelStatus.parse(root.getChildText("Status")));    Element targetElem=root.getChild("Target");    LiveChannelTarget target=new LiveChannelTarget();    target.setType(targetElem.getChildText("Type"));    target.setFragDuration(Integer.parseInt(targetElem.getChildText("FragDuration")));    target.setFragCount(Integer.parseInt(targetElem.getChildText("FragCount")));    target.setPlaylistName(targetElem.getChildText("PlaylistName"));    result.setTarget(target);    return result;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public boolean performContextMenuAction(int id){  return false;}  }
class C{  ItemPanel(final String slotName,final Sprite placeholder){  this.placeholder=preparePlaceholder(placeholder);  setName(slotName);  Dimension size=new Dimension(background.getWidth(),background.getHeight());  setPreferredSize(size);  setMinimumSize(size);  setMaximumSize(size);  setOpaque(false);  ItemPanelMouseHandler drag=new ItemPanelMouseHandler();  addMouseMotionListener(drag);  addMouseListener(drag);}  }
class C{  public Vertex createState(Vertex pattern,Vertex parent,Network network){  Vertex currentState=parent;  Collection<Relationship> words=pattern.orderedRelationships(Primitive.WORD);  if (words != null) {    StringWriter pathWriter=new StringWriter();    for (    Relationship word : words) {      Vertex value=word.getTarget();      if (value.is(Primitive.WILDCARD)) {        pathWriter.write("_star");      } else       if (value.is(Primitive.UNDERSCORE)) {        value=network.createVertex(Primitive.UNDERSCORE);        pathWriter.write("_underscore");      } else       if (value.is(Primitive.POUNDWILDCARD)) {        value=network.createVertex(Primitive.POUNDWILDCARD);        pathWriter.write("_pound");      } else       if (value.is(Primitive.HATWILDCARD)) {        value=network.createVertex(Primitive.HATWILDCARD);        pathWriter.write("_hat");      } else {        pathWriter.write("_");        pathWriter.write(value.printString());      }      List<Vertex> instructions=currentState.orderedRelations(Primitive.DO);      Vertex caseMatch=null;      if (instructions != null) {        for (        Vertex instruction : instructions) {          if (instruction.instanceOf(Primitive.CASE)) {            Vertex caseValue=instruction.getRelationship(Primitive.CASE);            if (caseValue != null) {              boolean match=caseValue == value;              if (!match) {                match=caseValue.equals(value);              }              if (!match && value.isVariable() && caseValue.isVariable()) {                match=value.getName() != null && value.getName().equals(caseValue.getName());              }              if (!match && value.isArray() && caseValue.isArray()&& (value.getRelationship(Primitive.REQUIRED) == caseValue.getRelationship(Primitive.REQUIRED))) {                List<Vertex> elements1=value.orderedRelations(Primitive.ELEMENT);                List<Vertex> elements2=caseValue.orderedRelations(Primitive.ELEMENT);                if (elements1 != null && elements2 != null && elements1.size() == elements2.size()) {                  match=true;                  for (int index=0; index < elements1.size(); index++) {                    if (!elements1.get(index).equals(elements2.get(index))) {                      match=false;                      break;                    }                  }                }              }              if (match) {                caseMatch=instruction;                break;              }            }          }        }      }      if (caseMatch == null) {        if (currentState.getData() instanceof BinaryData) {          BinaryData data=(BinaryData)currentState.getData();          data.setCache(null);          data=(BinaryData)network.getBot().memory().getLongTermMemory().findData(data);          if (data != null) {            data.setCache(null);          }        }        caseMatch=network.createInstance(Primitive.CASE);        caseMatch.setName("c" + caseMatch.getId() + "_"+ value.printString());        caseMatch.addRelationship(Primitive.CASE,value);        Vertex newState=network.createInstance(Primitive.STATE);        newState.setName("s" + newState.getId() + Utils.compress(pathWriter.toString(),MAX_IDENTIFIER));        caseMatch.addRelationship(Primitive.GOTO,newState);        if (word.getTarget().is(Primitive.UNDERSCORE) || word.getTarget().is(Primitive.POUNDWILDCARD)) {          currentState.addRelationship(Primitive.DO,caseMatch,3);          newState.addRelationship(Primitive.DO,caseMatch,10);        } else         if (word.getTarget().is(Primitive.WILDCARD) || word.getTarget().is(Primitive.HATWILDCARD)) {          currentState.addRelationship(Primitive.DO,caseMatch,6);          newState.addRelationship(Primitive.DO,caseMatch,10);        } else {          if (word.hasMeta() && word.getMeta().hasRelationship(Primitive.TYPE,Primitive.PRECEDENCE)) {            currentState.addRelationship(Primitive.DO,caseMatch,2);          } else           if (word.getTarget().instanceOf(Primitive.ARRAY)) {            currentState.addRelationship(Primitive.DO,caseMatch,5);          } else {            currentState.addRelationship(Primitive.DO,caseMatch,4);          }        }        currentState=newState;      } else {        Vertex state=caseMatch.getRelationship(Primitive.GOTO);        if (state == null) {          state=network.createInstance(Primitive.STATE);          state.setName("s" + state.getId() + Utils.compress(pathWriter.toString(),MAX_IDENTIFIER));          caseMatch.addRelationship(Primitive.GOTO,state);        }        currentState=state;      }    }  }  return currentState;}  }
class C{  private void logHeaders(){  if (LOG.isDebugEnabled()) {    Map<String,List<String>> headers=conn.getHeaderFields();    for (    String key : headers.keySet()) {      for (      String value : headers.get(key)) {        LOG.debug("HEADER {}: {}",key,value);      }    }  }}  }
class C{  private PriorityQueue<MLTTerm> createQueue(String fieldName,Map<String,Flt> words,boolean contentStreamQuery) throws IOException {  int numDocs=ir.numDocs();  FreqQ res=new FreqQ(words.size());  for (  String word : words.keySet()) {    if (word.trim().length() == 0) {      continue;    }    float tf=words.get(word).x;    float originalTf=tf;    if (minTermFreq > 0 && tf < minTermFreq) {      continue;    }    int docFreq=ir.docFreq(new Term(fieldName,word));    if (minDocFreq > 0 && docFreq < minDocFreq) {      continue;    }    if (docFreq > maxDocFreq) {      continue;    }    float idf=similarity.idf(docFreq,numDocs);    float score=0;    if (isLogTf()) {      tf=(float)Math.log(tf + 1.0d);    }    score=(tf * idf);    MLTTerm mltTerm;    if (isPayloadField(fieldName)) {      mltTerm=new MLTTerm(word,fieldName,score,tf,idf,docFreq,this.isLogTf(),contentStreamQuery ? this.getStreamFieldBoost(fieldName) : this.getFieldBoost(fieldName),originalTf);    } else {      mltTerm=new MLTTerm(word,fieldName,score,tf,idf,docFreq,this.isLogTf(),contentStreamQuery ? this.getStreamFieldBoost(fieldName) : this.getFieldBoost(fieldName));    }    res.insertWithOverflow(mltTerm);  }  return res;}  }
class C{  public static RepFilterBean createNewFilter(){  final RepFilterBean filterBean=new RepFilterBean();  filterBean.setEnabled(Boolean.TRUE);  filterBean.setConnection(Connection.VALUES[0]);  filterBean.setFilterByGroup(FilterByGroup.REPLAY);  filterBean.setFilterBy(filterBean.getFilterByGroup().filterBys[0]);  filterBean.setOperator(filterBean.getFilterBy().operators[0]);  return filterBean;}  }
class C{  public boolean isPublic(){  Object oo=get_Value(COLUMNNAME_IsPublic);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void doUpdate(HttpServletRequest request,SchedulingSubpartEditForm frm,SchedulingSubpart ss,SchedulingSubpartDAO sdao,boolean timeVertical) throws Exception {  Set s=ss.getPreferences();  s.clear();  super.doUpdate(request,frm,ss,s,timeVertical);  ss.setAutoSpreadInTime(frm.getAutoSpreadInTime());  ss.setStudentAllowOverlap(frm.getStudentAllowOverlap());  if (frm.getDatePattern() == null || frm.getDatePattern().intValue() < 0)   ss.setDatePattern(null); else   ss.setDatePattern(new DatePatternDAO().get(frm.getDatePattern()));  if (frm.getInstructionalType() == null || frm.getInstructionalType().length() == 0) {  } else {    ItypeDesc newItype=new ItypeDescDAO().get(new Integer(frm.getInstructionalType()));    if (newItype != null) {      ss.setItype(newItype);    }  }  if (frm.getCreditFormat() == null || frm.getCreditFormat().length() == 0 || frm.getCreditFormat().equals(Constants.BLANK_OPTION_VALUE)) {    CourseCreditUnitConfig origConfig=ss.getCredit();    if (origConfig != null) {      ss.setCredit(null);      sdao.getSession().delete(origConfig);    }  } else {    if (ss.getCredit() != null) {      CourseCreditUnitConfig ccuc=ss.getCredit();      if (ccuc.getCreditFormat().equals(frm.getCreditFormat())) {        boolean changed=false;        if (!ccuc.getCreditType().getUniqueId().equals(frm.getCreditType())) {          changed=true;        }        if (!ccuc.getCreditUnitType().getUniqueId().equals(frm.getCreditUnitType())) {          changed=true;        }        if (ccuc instanceof FixedCreditUnitConfig) {          FixedCreditUnitConfig fcuc=(FixedCreditUnitConfig)ccuc;          if (!fcuc.getFixedUnits().equals(frm.getUnits())) {            changed=true;          }        } else         if (ccuc instanceof VariableFixedCreditUnitConfig) {          VariableFixedCreditUnitConfig vfcuc=(VariableFixedCreditUnitConfig)ccuc;          if (!vfcuc.getMinUnits().equals(frm.getUnits())) {            changed=true;          }          if (!vfcuc.getMaxUnits().equals(frm.getMaxUnits())) {            changed=true;          }          if (vfcuc instanceof VariableRangeCreditUnitConfig) {            VariableRangeCreditUnitConfig vrcuc=(VariableRangeCreditUnitConfig)vfcuc;            if (!vrcuc.isFractionalIncrementsAllowed().equals(frm.getFractionalIncrementsAllowed())) {              changed=true;            }          }        }        if (changed) {          CourseCreditUnitConfig origConfig=ss.getCredit();          ss.setCredit(null);          sdao.getSession().delete(origConfig);          ss.setCredit(CourseCreditUnitConfig.createCreditUnitConfigOfFormat(frm.getCreditFormat(),frm.getCreditType(),frm.getCreditUnitType(),frm.getUnits(),frm.getMaxUnits(),frm.getFractionalIncrementsAllowed(),new Boolean(false)));          ss.getCredit().setOwner(ss);        }      } else {        CourseCreditUnitConfig origConfig=ss.getCredit();        ss.setCredit(null);        sdao.getSession().delete(origConfig);        ss.setCredit(CourseCreditUnitConfig.createCreditUnitConfigOfFormat(frm.getCreditFormat(),frm.getCreditType(),frm.getCreditUnitType(),frm.getUnits(),frm.getMaxUnits(),frm.getFractionalIncrementsAllowed(),new Boolean(false)));        ss.getCredit().setOwner(ss);      }    } else {      ss.setCredit(CourseCreditUnitConfig.createCreditUnitConfigOfFormat(frm.getCreditFormat(),frm.getCreditType(),frm.getCreditUnitType(),frm.getUnits(),frm.getMaxUnits(),frm.getFractionalIncrementsAllowed(),new Boolean(false)));      ss.getCredit().setOwner(ss);    }  }  if (ss.getCredit() != null) {    sdao.getSession().saveOrUpdate(ss.getCredit());  }  sdao.update(ss);  String className=ApplicationProperty.ExternalActionSchedulingSubpartEdit.value();  if (className != null && className.trim().length() > 0) {    ExternalSchedulingSubpartEditAction editAction=(ExternalSchedulingSubpartEditAction)(Class.forName(className).newInstance());    editAction.performExternalSchedulingSubpartEditAction(ss,sdao.getSession());  }  ChangeLog.addChange(null,sessionContext,ss,ChangeLog.Source.SCHEDULING_SUBPART_EDIT,ChangeLog.Operation.UPDATE,ss.getInstrOfferingConfig().getControllingCourseOffering().getSubjectArea(),ss.getManagingDept());}  }
class C{  private void validateElements(Class type,Order order) throws Exception {  if (order != null) {    for (    String name : order.elements()) {      if (!isElement(name)) {        throw new ElementException("Ordered element '%s' missing for %s",name,type);      }    }  }}  }
class C{  private void stopListeners(){  for (int i=0; i < gridCount(); i++) {    grid(i).events().stopLocalListen(objReadLsnrs[i]);    grid(i).events().stopLocalListen(qryExecLsnrs[i]);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.223 -0500",hash_original_method="162C0509301F2C51523E8B25D0579049",hash_generated_method="FCF69916F262C42E9B6A1EB9B1E1D628") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) public void bytesTransferred(long totalBytesTransferred,int bytesTransferred,long streamSize){  Enumeration listeners;  CopyStreamEvent event;  listeners=internalListeners.getListeners();  event=new CopyStreamEvent(this,totalBytesTransferred,bytesTransferred,streamSize);  while (listeners.hasMoreElements()) {    ((CopyStreamListener)(listeners.nextElement())).bytesTransferred(event);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public StateMachineTestPlanBuilder<S,E> defaultAwaitTime(int seconds){  if (seconds < 0) {    throw new IllegalArgumentException("Default await time cannot be negative, was " + seconds);  }  this.defaultAwaitTime=seconds;  return this;}  }
class C{  public TStream<String> receiveString(){  return receiveText(null);}  }
class C{  public void select(int x,int y){  select(new Coords(x,y));}  }
class C{  public static String readText(File file) throws IOException {  return readText(file,UTF_8);}  }
class C{  public void update(Row oldRow,Row newRow){  ArrayList<Value> params=New.arrayList();  StatementBuilder buff=new StatementBuilder("UPDATE ");  buff.append(targetTableName).append(" SET ");  for (int i=0; i < newRow.getColumnCount(); i++) {    buff.appendExceptFirst(", ");    buff.append(table.getColumn(i).getSQL()).append('=');    Value v=newRow.getValue(i);    if (v == null) {      buff.append("DEFAULT");    } else {      buff.append('?');      params.add(v);    }  }  buff.append(" WHERE ");  buff.resetCount();  for (int i=0; i < oldRow.getColumnCount(); i++) {    Column col=table.getColumn(i);    buff.appendExceptFirst(" AND ");    buff.append(col.getSQL());    Value v=oldRow.getValue(i);    if (isNull(v)) {      buff.append(" IS NULL");    } else {      buff.append('=');      params.add(v);      addParameter(buff,col);    }  }  String sql=buff.toString();  try {    link.execute(sql,params,true);  } catch (  Exception e) {    throw TableLink.wrapException(sql,e);  }}  }
class C{  public static String trimTrailingSpaces(String string){  if (string == null) {    return null;  }  for (int i=string.length() - 1; i >= 0; i--) {    if (string.charAt(i) == '\t' || string.charAt(i) == ' ' || string.charAt(i) == '\n' || string.charAt(i) == '\r') {      continue;    } else {      string=string.substring(0,i + 1);      return string;    }  }  return string;}  }
class C{  public Vertex parseEquation(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  Vertex equation=parseElement(stream,elements,debug,network);  stream.skipWhitespace();  ensureNext('{',stream);  Vertex operator=network.createVertex(Primitive.DO);  equation.addRelationship(Primitive.OPERATOR,operator);  stream.skipWhitespace();  char peek=stream.peek();  List<Vertex> operations=new ArrayList<Vertex>();  while (peek != '}') {    stream.skipWhitespace();    Vertex element=parseElement(stream,elements,debug,network);    operations.add(element);    ensureNext(';',',',stream);    stream.skipWhitespace();    peek=stream.peek();  }  boolean unravel=false;  if (operations.size() == 1) {    Vertex operation=operations.get(0);    operator=operation.getRelationship(Primitive.OPERATOR);    if (operator != null && operator.is(Primitive.DO) && !operation.instanceOf(Primitive.EQUATION)) {      unravel=true;      int index=0;      for (      Vertex nestedOperation : operation.orderedRelations(Primitive.ARGUMENT)) {        equation.addRelationship(Primitive.ARGUMENT,nestedOperation,index);        index++;      }    }  }  if (!unravel) {    int index=0;    for (    Vertex operation : operations) {      equation.addRelationship(Primitive.ARGUMENT,operation,index);      index++;    }  }  ensureNext('}',stream);  return equation;}  }
class C{  public DoubleMatrix2D like(int rows,int columns){  return new TridiagonalDoubleMatrix2D(rows,columns);}  }
class C{  public void saveExtraData(){}  }
class C{  @Override public void applyConfig(final ConfigSettings config){  Object o=config.getConfigParameter(ConfigurationKeys.MODE_OUTPUT);  if ((OutputType)o == OutputType.DATABASE) {    controller.setEnableSQLDatabaseOutput(true);  }  o=config.getConfigParameter(ConfigurationKeys.SQL_HOST);  if (o != null) {    this.sqlHostField.setText((String)o);  } else {    this.sqlHostField.setText("");  }  o=config.getConfigParameter(ConfigurationKeys.SQL_DATABASE);  if (o != null) {    this.sqlDatabaseField.setText((String)o);  } else {    this.sqlDatabaseField.setText("");  }  o=config.getConfigParameter(ConfigurationKeys.SQL_USERNAME);  if (o != null) {    this.sqlUserField.setText((String)o);  } else {    this.sqlUserField.setText("");  }  o=config.getConfigParameter(ConfigurationKeys.SQL_PASSWORD);  if (o != null) {    this.sqlPasswordField.setText((String)o);  } else {    this.sqlPasswordField.setText("");  }  o=config.getConfigParameter(ConfigurationKeys.MODE_ZIP_COMPRESSION_ENABLED);  if (o != null) {    controller.setEnableZipCompression((Boolean)o);  } else {    controller.setEnableZipCompression(false);  }}  }
class C{  protected int findTokenEnd(int from){  if (from < 0) {    throw new IllegalArgumentException("Token start position must not be negative: " + from);  }  final int to=this.currentHeader.length();  int end=from + 1;  while ((end < to) && isTokenChar(this.currentHeader.charAt(end))) {    end++;  }  return end;}  }
class C{  private void undo(){  m_ArffPanel.undo();}  }
class C{  public void init(final TargetTagFilterButtonClick filterButtonClickBehaviour){  this.filterButtonClickBehaviour=filterButtonClickBehaviour;  super.init(filterButtonClickBehaviour);  addNewTargetTag(entityFactory.generateTargetTag("NO TAG"));}  }
class C{  public static boolean isBLANK_NODE_LABEL_StartChar(int codePoint){  return isPN_CHARS_U(codePoint) || ASCIIUtil.isNumber(codePoint);}  }
class C{  public RegionQueueException(){}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("EMail[");  sb.append("From:").append(m_from).append(",To:").append(getTo()).append(",Subject=").append(getSubject()).append("]");  return sb.toString();}  }
class C{  public void makePath(String path,byte[] data,boolean retryOnConnLoss) throws KeeperException, InterruptedException {  makePath(path,data,CreateMode.PERSISTENT,retryOnConnLoss);}  }
class C{  public static Object convert(Class<?> targetType,Object sourceValue) throws JavaTypeTranslatorException {  if (targetType.isInstance(sourceValue)) {    return sourceValue;  }  if (null == sourceValue) {    try {      return convert(targetType,"");    } catch (    JavaTypeTranslatorException x) {      try {        return targetType.newInstance();      } catch (      Exception illegalX) {        throw new JavaTypeTranslatorException(illegalX,"permission is denied to create an instance of " + targetType.toString());      }    }  }  if (sourceValue instanceof JavaFormatForObject) {    if (null == ((JavaFormatForObject)sourceValue).getForObject()) {      return (null);    }  }  Hashtable<?,?> innerTable=m_converters.get(targetType);  if (innerTable == null) {    innerTable=m_noBaseConverters;  }  boolean topClass=true;  Class<?> sourceType=sourceValue.getClass();  while (sourceType != null) {    JavaTypeConverter converter=(JavaTypeConverter)innerTable.get(sourceType);    if (converter != null) {      try {        return converter.convert(sourceValue);      } catch (      IllegalArgumentException iae) {        throw new JavaTypeTranslatorException("The source value, of type " + sourceValue.getClass().getName() + ", cannot be converted to "+ targetType.getName()+ " because it is not in the proper format");      }    }    if (m_allowSupertypeConversions) {      if (topClass) {        Enumeration<Object> en=m_dynConverters.elements();        while (en.hasMoreElements()) {          JavaDynamicTypeConverter dc=(JavaDynamicTypeConverter)en.nextElement();          if (dc.supportsConversion(targetType,sourceValue)) {            return dc.convert(targetType,sourceValue);          }        }      }      sourceType=sourceType.getSuperclass();      topClass=false;    } else {      sourceType=null;    }  }  throw new JavaTypeTranslatorException("There is no converter for converting " + sourceValue.getClass().getName() + " values to "+ targetType.getName());}  }
class C{  @Override public Range findRangeBounds(CategoryDataset dataset){  return findRangeBounds(dataset,true);}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  public static boolean isEmailField(EditText editText){  return (editText.getInputType() & InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS) == InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;}  }
class C{  public String maxRadiusTipText(){  return "The upper boundary for the radius of the clusters.";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(sage.msg.MsgManager.getInstance().getAlertLevel());}  }
class C{  private void disconnect(Throwable exception){  c.changeConnectionStatus(ConnectionStatus.DISCONNECTED);  c.addAction("Disconnect Failed - an error occured");}  }
class C{  @Override public void close() throws IOException {  if (null != dictionarySortIndexThriftReader) {    dictionarySortIndexThriftReader.close();  }}  }
class C{  public PowerContainerHost(int id,ContainerVmRamProvisioner ramProvisioner,ContainerVmBwProvisioner bwProvisioner,long storage,List<? extends ContainerVmPe> peList,ContainerVmScheduler vmScheduler,PowerModel powerModel){  super(id,ramProvisioner,bwProvisioner,storage,peList,vmScheduler);  setPowerModel(powerModel);}  }
class C{  @Nullable public static ShelvedChangeList shelveChanges(final Project project,final ShelveChangesManager shelveManager,Collection<Change> changes,final String description,final List<VcsException> exceptions,boolean rollback){  try {    ShelvedChangeList shelve=shelveManager.shelveChanges(changes,description,rollback);    project.getMessageBus().syncPublisher(ShelveChangesManager.SHELF_TOPIC).stateChanged(new ChangeEvent(GitStashUtils.class));    return shelve;  } catch (  IOException e) {    exceptions.add(new VcsException("Shelving changes failed: " + description,e));    return null;  }catch (  VcsException e) {    exceptions.add(e);    return null;  }}  }
class C{  public static void checkRange(int row,int column){  if (row < 0) {    throw new IllegalArgumentException("row must be in range 0-" + (row - 1));  }  if (column < 0) {    throw new IllegalArgumentException("column must be in range 0-" + (row - 1));  }}  }
class C{  public CRL engineGenerateCRL(InputStream inStream) throws CRLException {  throw new UnsupportedOperationException("not yet.");}  }
class C{  public PublicKey loadPublicKey(int id) throws Exception {  if (defaultKeys) {    return getPublicKeyFromString(RSAKeyLoader.DEFAULT_UKEY);  }  FileReader f=new FileReader(path + "publickey" + id);  BufferedReader r=new BufferedReader(f);  String tmp="";  String key="";  while ((tmp=r.readLine()) != null) {    key=key + tmp;  }  f.close();  r.close();  PublicKey ret=getPublicKeyFromString(key);  return ret;}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  public static void modifyNetwork(final Network network,final String[] scenarioArray){  for (int i=0; i < scenarioArray.length; i++) {    if (scenarioArray[i].equalsIgnoreCase(CLOSE_SCHWAMENDINGERTUNNEL))     removeSchwamendingerTunnel(network); else     log.error("Identifier " + scenarioArray[i] + " not found. This means that no road or tunnel will be closed!");  }}  }
class C{  public void join() throws InterruptedException {  if (outThread != null) {    outThread.join();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.049 -0500",hash_original_method="A0692C4EAE17C62872816DE26503E51B",hash_generated_method="F987BF771176871B67EC4970A0CACE0D") public Throwable thrownException(){  return fThrownException;}  }
class C{  public void addElement(int id,byte[] data){  elements.add(new ExtensionElement(id,data));}  }
class C{  InstantiatedType(GenericClassType instantiatedType,List<TypeArgument> argumentList){  if (instantiatedType == null) {    throw new IllegalArgumentException("instantiated type must be non-null");  }  this.instantiatedType=instantiatedType;  this.argumentList=argumentList;}  }
class C{  public final long zobristHash(){  return hashKey;}  }
class C{  public Solution search(INode initial,INode goal){  if (initial.equals(goal)) {    return new Solution(initial,goal);  }  INodeSet open=StateStorageFactory.create(StateStorageFactory.STACK);  open.insert(initial.copy());  INodeSet closed=StateStorageFactory.create(closedStorage);  while (!open.isEmpty()) {    INode n=open.remove();    closed.insert(n);    DepthTransition trans=(DepthTransition)n.storedData();    DoubleLinkedList<IMove> moves=n.validMoves();    for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {      IMove move=it.next();      INode successor=n.copy();      move.execute(successor);      numMoves++;      if (closed.contains(successor) != null) {        continue;      }      int depth=1;      if (trans != null) {        depth=trans.depth + 1;      }      successor.storedData(new DepthTransition(move,n,depth));      if (successor.equals(goal)) {        numOpen=open.size();        numClosed=closed.size();        return new Solution(initial,successor);      }      if (depth < depthBound) {        open.insert(successor);      }    }  }  numOpen=open.size();  numClosed=closed.size();  return new Solution(initial,goal,false);}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JodaModule module=new JodaModule();  module.addSerializer(DateTime.class,new CustomDateTimeSerializer());  module.addSerializer(LocalDate.class,new CustomLocalDateSerializer());  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:18.771 -0500",hash_original_method="2DC067EE65EE5AEB61F14CBD640EED38",hash_generated_method="29B08364401AE1C2C8FFB7EC4FD994A9") public ATResponseParser(String line){  this.line=line;}  }
class C{  public Program(Rules rules){  super(rules.getReturnType(),rules.getReturnType());  this.rules=rules;}  }
class C{  public PSPCommunicationException(String message,Reason reason,Throwable cause){  super(message,cause);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  private static boolean isObjectValue(int encodedValueNum){  return encodedValueNum < 0;}  }
class C{  final Object pop(){  int size=stack.size();  return size == 0 ? null : stack.remove(size - 1);}  }
class C{  public void removePlugInFromBeanContext(PlugIn pi){  BeanContext bc=getBeanContext();  if (bc != null && pi != null && (pi instanceof BeanContextChild || (pi instanceof AbstractPlugIn && ((AbstractPlugIn)pi).getAddToBeanContext()))) {    bc.remove(pi);  }}  }
class C{  public void testBoxedProperty(){  final PlatformDefaultJavaObjectFactory factory=new PlatformDefaultJavaObjectFactory();  factory.initialize(CLS_NAME,Collections.singletonMap("fIntBoxed",1));  Object val=factory.create();  assertEquals(val,new TestJavaObject().setIntBoxed(1));}  }
class C{  private void $$$setupUI$$$(){  contentPane=new JPanel();  contentPane.setLayout(new BorderLayout(0,0));  final JScrollPane scrollPane1=new JScrollPane();  contentPane.add(scrollPane1,BorderLayout.CENTER);  usageTable=new JTable();  scrollPane1.setViewportView(usageTable);}  }
class C{  public String toString(){  return String.valueOf(getFirstCondition()) + getSecondCondition();}  }
class C{  public void hideTabs(){  removeComponent(tabsContainer);  revalidate();}  }
class C{  public static void main(String args[]){  int a[]=new int[]{1,3,4,8,-4,-3,4,4,4,10,-3,-3,-3,-3,-3};  System.out.println("mode: " + A.mode(a));}  }
class C{  public boolean hasName(){  return super.hasAttribute(NAME);}  }
class C{  public MMessage(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  protected static String htmlifyHelper(String text,boolean isHex,boolean isSurrogate){  StringBuffer sb=new StringBuffer();  for (int i=0; i < text.length(); i++) {    int ch=text.codePointAt(i);    if (ch <= 128) {      sb.appendCodePoint(ch);    } else     if (ch > 128 && (ch < 159 || (ch >= 55296 && ch <= 57343))) {      continue;    } else {      if (isHex) {        sb.append("&#x" + Integer.toHexString(ch) + ";");      } else {        if (isSurrogate) {          double H=Math.floor((ch - 0x10000) / 0x400) + 0xD800;          double L=((ch - 0x10000) % 0x400) + 0xDC00;          sb.append("&#" + String.format("%.0f",H) + ";&#"+ String.format("%.0f",L)+ ";");        } else {          sb.append("&#" + ch + ";");        }      }    }  }  return sb.toString();}  }
class C{  public static boolean isOneLevelMapping(final String serverPath){  return StringUtils.endsWith(serverPath,ONE_LEVEL_MAPPING_SUFFIX);}  }
class C{  private ColumnError makeDuplicateNameError(Entry<String,List<Integer>> nameEntry){  String duplicatenNameMessage=I18N.getGUILabel("io.dataimport.step.data_column_configuration.error_table.column_error.duplicate_name_message",nameEntry.getKey(),listToString(nameEntry.getValue()));  return new ColumnError(nameEntry.getValue(),nameEntry.getKey(),duplicatenNameMessage);}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.EssenceDescriptorBaseType buildEssenceDescriptorBaseType(UUID id,Node node){  org.smpte_ra.schemas.st2067_2_2013.EssenceDescriptorBaseType essenceDescriptorBaseType=new org.smpte_ra.schemas.st2067_2_2013.EssenceDescriptorBaseType();  essenceDescriptorBaseType.setId(UUIDHelper.fromUUID(id));  this.essenceDescriptorIDMap.put(node,UUIDHelper.fromUUID(id));  essenceDescriptorBaseType.getAny().add(node);  return essenceDescriptorBaseType;}  }
class C{  @Deprecated public CronTriggerImpl(String name,String group,String jobName,String jobGroup,Date startTime,Date endTime,String cronExpression,TimeZone timeZone) throws ParseException {  super(name,group,jobName,jobGroup);  setCronExpression(cronExpression);  if (startTime == null) {    startTime=new Date();  }  setStartTime(startTime);  if (endTime != null) {    setEndTime(endTime);  }  if (timeZone == null) {    setTimeZone(TimeZone.getDefault());  } else {    setTimeZone(timeZone);  }}  }
class C{  public static Kind org(){  return new Kind(ORG);}  }
class C{  public ElementType parent(){  return theType.parent();}  }
class C{  public final int _type2(int identity){  int eType;  if (identity < m_blocksize)   eType=m_exptype_map0[identity]; else   eType=m_exptype_map[identity >>> m_SHIFT][identity & m_MASK];  if (NULL != eType)   return m_extendedTypes[eType].getNodeType(); else   return NULL;}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,10,10,8,8,new ECBlocks(5,new ECB(1,3))),new Version(2,12,12,10,10,new ECBlocks(7,new ECB(1,5))),new Version(3,14,14,12,12,new ECBlocks(10,new ECB(1,8))),new Version(4,16,16,14,14,new ECBlocks(12,new ECB(1,12))),new Version(5,18,18,16,16,new ECBlocks(14,new ECB(1,18))),new Version(6,20,20,18,18,new ECBlocks(18,new ECB(1,22))),new Version(7,22,22,20,20,new ECBlocks(20,new ECB(1,30))),new Version(8,24,24,22,22,new ECBlocks(24,new ECB(1,36))),new Version(9,26,26,24,24,new ECBlocks(28,new ECB(1,44))),new Version(10,32,32,14,14,new ECBlocks(36,new ECB(1,62))),new Version(11,36,36,16,16,new ECBlocks(42,new ECB(1,86))),new Version(12,40,40,18,18,new ECBlocks(48,new ECB(1,114))),new Version(13,44,44,20,20,new ECBlocks(56,new ECB(1,144))),new Version(14,48,48,22,22,new ECBlocks(68,new ECB(1,174))),new Version(15,52,52,24,24,new ECBlocks(42,new ECB(2,102))),new Version(16,64,64,14,14,new ECBlocks(56,new ECB(2,140))),new Version(17,72,72,16,16,new ECBlocks(36,new ECB(4,92))),new Version(18,80,80,18,18,new ECBlocks(48,new ECB(4,114))),new Version(19,88,88,20,20,new ECBlocks(56,new ECB(4,144))),new Version(20,96,96,22,22,new ECBlocks(68,new ECB(4,174))),new Version(21,104,104,24,24,new ECBlocks(56,new ECB(6,136))),new Version(22,120,120,18,18,new ECBlocks(68,new ECB(6,175))),new Version(23,132,132,20,20,new ECBlocks(62,new ECB(8,163))),new Version(24,144,144,22,22,new ECBlocks(62,new ECB(8,156),new ECB(2,155))),new Version(25,8,18,6,16,new ECBlocks(7,new ECB(1,5))),new Version(26,8,32,6,14,new ECBlocks(11,new ECB(1,10))),new Version(27,12,26,10,24,new ECBlocks(14,new ECB(1,16))),new Version(28,12,36,10,16,new ECBlocks(18,new ECB(1,22))),new Version(29,16,36,14,16,new ECBlocks(24,new ECB(1,32))),new Version(30,16,48,14,22,new ECBlocks(28,new ECB(1,49)))};}  }
class C{  private void disposeOldImages(){  if (imageManager != null) {    imageManager.dispose();    imageManager=null;  }}  }
class C{  public void testGetServerMBeanName(){  try {    String objectName=deployer.getServerMBeanName("foo","bar").toString();    assertEquals("foo:j2eeType=J2EEServer,name=bar",objectName);  } catch (  MalformedObjectNameException e) {    fail("No error should be thrown");  }  try {    deployer.getServerMBeanName(null,"bar").toString();    fail("error should be thrown");  } catch (  MalformedObjectNameException expected) {  }  try {    deployer.getServerMBeanName("","bar").toString();    fail("error should be thrown");  } catch (  MalformedObjectNameException expected) {  }}  }
class C{  void assignCoordinateFromPadding(){  mCoordinate=mLayoutFromEnd ? mOrientationHelper.getEndAfterPadding() : mOrientationHelper.getStartAfterPadding();}  }
class C{  public String toString(){  return "move " + FreeCellNode.out(card) + " from free cell to foundation.";}  }
class C{  private boolean testPentanomials(){  int i, j, k, l;  boolean done=false;  l=0;  fieldPolynomial=new GF2Polynomial(mDegree + 1);  fieldPolynomial.setBit(0);  fieldPolynomial.setBit(mDegree);  for (i=1; (i <= (mDegree - 3)) && !done; i++) {    fieldPolynomial.setBit(i);    for (j=i + 1; (j <= (mDegree - 2)) && !done; j++) {      fieldPolynomial.setBit(j);      for (k=j + 1; (k <= (mDegree - 1)) && !done; k++) {        fieldPolynomial.setBit(k);        if (((mDegree & 1) != 0) | ((i & 1) != 0) | ((j & 1) != 0)| ((k & 1) != 0)) {          done=fieldPolynomial.isIrreducible();          l++;          if (done) {            isPentanomial=true;            pc[0]=i;            pc[1]=j;            pc[2]=k;            return done;          }        }        fieldPolynomial.resetBit(k);      }      fieldPolynomial.resetBit(j);    }    fieldPolynomial.resetBit(i);  }  return done;}  }
class C{  private int pickColor(final String identifier){  if (TextUtils.isEmpty(identifier)) {    return sDefaultColor;  }  final int color=Math.abs(identifier.hashCode()) % sColors.length();  return sColors.getColor(color,sDefaultColor);}  }
class C{  public void searchStopped(){}  }
class C{  public IgfsStringDelimiterRecordResolver(Charset charset,String... delims){  super(toBytes(charset,delims));}  }
class C{  public static String htmlEncode(String s){  StringBuffer encodedString=new StringBuffer("");  char[] chars=s.toCharArray();  for (  char c : chars) {    if (c == '<') {      encodedString.append("&lt;");    } else     if (c == '>') {      encodedString.append("&gt;");    } else     if (c == '\'') {      encodedString.append("&apos;");    } else     if (c == '"') {      encodedString.append("&quot;");    } else     if (c == '&') {      encodedString.append("&amp;");    } else {      encodedString.append(c);    }  }  return encodedString.toString();}  }
class C{  public void initialize() throws SQLException {  if (initialized) {    return;  }  if (connectionSource == null) {    throw new IllegalStateException("connectionSource was never set on " + getClass().getSimpleName());  }  databaseType=connectionSource.getDatabaseType();  if (databaseType == null) {    throw new IllegalStateException("connectionSource is getting a null DatabaseType in " + getClass().getSimpleName());  }  if (tableConfig == null) {    tableInfo=new TableInfo<T,ID>(connectionSource,this,dataClass);  } else {    tableConfig.extractFieldTypes(connectionSource);    tableInfo=new TableInfo<T,ID>(databaseType,this,tableConfig);  }  statementExecutor=new StatementExecutor<T,ID>(databaseType,tableInfo,this);  List<BaseDaoImpl<?,?>> daoConfigList=daoConfigLevelLocal.get();  daoConfigList.add(this);  if (daoConfigList.size() > 1) {    return;  }  try {    for (int i=0; i < daoConfigList.size(); i++) {      BaseDaoImpl<?,?> dao=daoConfigList.get(i);      DaoManager.registerDao(connectionSource,dao);      try {        for (        FieldType fieldType : dao.getTableInfo().getFieldTypes()) {          fieldType.configDaoInformation(connectionSource,dao.getDataClass());        }      } catch (      SQLException e) {        DaoManager.unregisterDao(connectionSource,dao);        throw e;      }      dao.initialized=true;    }  }  finally {    daoConfigList.clear();    daoConfigLevelLocal.remove();  }}  }
class C{  void addChild(Object child){  if (child instanceof XMLObject || child instanceof Reference || child instanceof String) {    children.add(child);  } else   throw new IllegalArgumentException();}  }
class C{  public static float convertHalfToFloat(short half){switch ((int)half) {case 0x0000:    return 0f;case 0x8000:  return -0f;case 0x7c00:return Float.POSITIVE_INFINITY;case 0xfc00:return Float.NEGATIVE_INFINITY;default :return Float.intBitsToFloat(((half & 0x8000) << 16) | (((half & 0x7c00) + 0x1C000) << 13) | ((half & 0x03FF) << 13));}}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Comparable<? super T>>void sort(List<T> list){  Object[] array=list.toArray();  Arrays.sort(array);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set((T)array[i++]);  }}  }
class C{  public ProcessTerminatedAbnormallyException(final int exitValue){  this.exitValue=exitValue;}  }
class C{  public String lowerRunsTipText(){  return "The lower number of runs to perform (included).";}  }
class C{  public static Intent createGetBootstrapProfileNameIntent(Context context,EvernoteSession evernoteSession){  if (evernoteSession.isForceAuthenticationInThirdPartyApp()) {    return null;  }  EvernoteUtil.EvernoteInstallStatus installStatus=EvernoteUtil.getEvernoteInstallStatus(context,EvernoteUtil.ACTION_GET_BOOTSTRAP_PROFILE_NAME);  if (!EvernoteUtil.EvernoteInstallStatus.INSTALLED.equals(installStatus)) {    return null;  }  return new Intent(EvernoteUtil.ACTION_GET_BOOTSTRAP_PROFILE_NAME).setPackage(PACKAGE_NAME);}  }
class C{  @Override public boolean hasStableIds(){  return adapter1.hasStableIds() && adapter2.hasStableIds();}  }
class C{  public TextSnippet textSnippet(){  return this.textSnippet;}  }
class C{  public static TypeReference newTypeParameterReference(int sort,int paramIndex){  return new TypeReference((sort << 24) | (paramIndex << 16));}  }
class C{  public static int toInt(byte[] bytes){  return toInt(bytes,0,SIZEOF_INT);}  }
class C{  public boolean isSetter(){  MemberType _memberType=this.getMemberType();  return Objects.equal(_memberType,MemberType.SETTER);}  }
class C{  public void secondaryTypesRemoving(IFile file,boolean cleanIndexCache){  if (VERBOSE) {    StringBuffer buffer=new StringBuffer("JavaModelManager.removeFromSecondaryTypesCache(");    buffer.append(file.getName());    buffer.append(')');    Util.verbose(buffer.toString());  }  if (file != null) {    PerProjectInfo projectInfo=getPerProjectInfo(file.getProject(),false);    if (projectInfo != null && projectInfo.secondaryTypes != null) {      if (VERBOSE) {        Util.verbose("-> remove file from cache of project: " + file.getProject().getName());      }      secondaryTypesRemoving(projectInfo.secondaryTypes,file);      HashMap indexingCache=(HashMap)projectInfo.secondaryTypes.get(INDEXED_SECONDARY_TYPES);      if (!cleanIndexCache) {        if (indexingCache == null) {          projectInfo.secondaryTypes.put(INDEXED_SECONDARY_TYPES,new HashMap());        }        return;      }      if (indexingCache != null) {        Set keys=indexingCache.keySet();        int filesSize=keys.size(), filesCount=0;        File[] removed=null;        Iterator cachedFiles=keys.iterator();        while (cachedFiles.hasNext()) {          File cachedFile=(File)cachedFiles.next();          if (file.equals(cachedFile)) {            if (removed == null)             removed=new File[filesSize];            filesSize--;            removed[filesCount++]=cachedFile;          }        }        if (removed != null) {          for (int i=0; i < filesCount; i++) {            indexingCache.remove(removed[i]);          }        }      }    }  }}  }
class C{  @SuppressWarnings("unchecked") public synchronized Enumeration keys(){  Enumeration keysEnum=super.keys();  Vector keyList=new Vector();  while (keysEnum.hasMoreElements()) {    keyList.add(keysEnum.nextElement());  }  Collections.sort(keyList);  return keyList.elements();}  }
class C{  public void deleteUser(Integer targetUserId) throws IOException {  String tailUrl=GitlabUser.USERS_URL + "/" + targetUserId;  retrieve().method("DELETE").to(tailUrl,Void.class);}  }
class C{  public synchronized int size(){  return processors.size();}  }
class C{  public boolean isValorPorDefecto(){  return valorPorDefecto;}  }
class C{  private long countHelper(Pipeline pipeline,LongSupplier fallbackSupplier){  requireNonNulls(pipeline,fallbackSupplier);  if (isCountOptimizable(pipeline)) {    final List<FieldPredicate<ENTITY>> andPredicateBuilders=StreamTerminatorUtil.topLevelAndPredicates(pipeline);    final SqlInfo sqlInfo=sqlInfo(sqlSelectCount,andPredicateBuilders);    return counter.apply(sqlInfo.sql,sqlInfo.values);  } else   if (pipeline.stream().allMatch(CHECK_RETAIN_SIZE)) {    return counter.apply(sqlSelectCount,Collections.emptyList());  } else {    return fallbackSupplier.getAsLong();  }}  }
class C{  private void moveToNextMethodId(){  this.curmid=maps[curidx] & ~NEXT_BIT;  this.moreMethId=(maps[curidx] & NEXT_BIT) != 0;  this.curidx++;  this.curmpc=maps[curidx] & ~NEXT_BIT;  this.moreElemnt=(maps[curidx] & NEXT_BIT) != 0;  this.curidx++;  if (!hasMoreElements() && hasMoreMethodId()) {    moveToNextMethodId();  }}  }
class C{  public DcwThematicIndex(String filename,boolean border) throws FormatException {  this(filename,border,false);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  static double incompleteBetaFraction2(double a,double b,double x) throws ArithmeticException {  double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;  double k1, k2, k3, k4, k5, k6, k7, k8;  double r, t, ans, z, thresh;  int n;  k1=a;  k2=b - 1.0;  k3=a;  k4=a + 1.0;  k5=1.0;  k6=a + b;  k7=a + 1.0;  ;  k8=a + 2.0;  pkm2=0.0;  qkm2=1.0;  pkm1=1.0;  qkm1=1.0;  z=x / (1.0 - x);  ans=1.0;  r=1.0;  n=0;  thresh=3.0 * MACHEP;  do {    xk=-(z * k1 * k2) / (k3 * k4);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    xk=(z * k5 * k6) / (k7 * k8);    pk=pkm1 + pkm2 * xk;    qk=qkm1 + qkm2 * xk;    pkm2=pkm1;    pkm1=pk;    qkm2=qkm1;    qkm1=qk;    if (qk != 0)     r=pk / qk;    if (r != 0) {      t=Math.abs((ans - r) / r);      ans=r;    } else     t=1.0;    if (t < thresh)     return ans;    k1+=1.0;    k2-=1.0;    k3+=2.0;    k4+=2.0;    k5+=1.0;    k6+=1.0;    k7+=2.0;    k8+=2.0;    if ((Math.abs(qk) + Math.abs(pk)) > big) {      pkm2*=biginv;      pkm1*=biginv;      qkm2*=biginv;      qkm1*=biginv;    }    if ((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {      pkm2*=big;      pkm1*=big;      qkm2*=big;      qkm1*=big;    }  } while (++n < 300);  return ans;}  }
class C{  public CFBBlockCipherMac(BlockCipher cipher,BlockCipherPadding padding){  this(cipher,8,(cipher.getBlockSize() * 8) / 2,padding);}  }
class C{  public static void releaseImageEditor(@NotNull ImageEditor editor){  if (!editor.isDisposed()) {    editor.dispose();  }}  }
class C{  public boolean isAntiMekTrained(){  return getAntiMekSkill() < ANTI_MECH_SKILL_UNTRAINED;}  }
class C{  public QueryRuleset(final RdfCloudTripleStoreConfiguration conf) throws QueryRulesetException {  this.conf=conf;  setQuery();  setRules();}  }
class C{  public void onRequestProcessingStart(){  mRequestProcessingStartTime=SystemClock.elapsedRealtime();}  }
class C{  public void uninstallUI(JComponent c){  super.uninstallUI(c);  uninstallClientDecorations(root);  layoutManager=null;  mouseInputListener=null;  root=null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Object registerCreateEvent(String sessionID,String eventId,Integer bookId,AxSf axsfNew,String entidad) throws BookException, SessionException, ValidationException {  RuleContext ruleCtx=null;  Object result=null;  CacheBag cacheBag=null;  AuthenticationUser user=null;  ScrOfic scrofic=null;  if (log.isDebugEnabled()) {    log.debug("Event eventId [" + eventId + "]");  }  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  try {    cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);    scrofic=(ScrOfic)cacheBag.get(HIBERNATE_ScrOfic);    THashMap bookInformation=(THashMap)cacheBag.get(bookId);    Idocarchdet idoc=(Idocarchdet)bookInformation.get(IDocKeys.IDOCARCHDET_FLD_DEF_ASOBJECT);    ruleCtx=new RuleContext();    ruleCtx.setAxsf(axsfNew);    ruleCtx.setIdocarchdet(idoc);    ruleCtx.setUsuario(user.getId().toString());    ruleCtx.setSessionId(sessionID);    ruleCtx.setEventId(eventId);    ruleCtx.setLibro(bookId);    ruleCtx.setRegistro((Integer)axsfNew.getAttributeValue("fdrid"));    if (scrofic != null) {      ruleCtx.setOficina(scrofic.getId());    }    ruleCtx.setEntidad(entidad);    AxSf axsfAux=(AxSf)EventsFactory.getCurrentEvent(ruleCtx.getEventId()).execute(ruleCtx);    axsfNew=axsfAux;  } catch (  EventException ee) {    log.error("Se ha producido un error durante la ejecucion del evento de creacion del registro [" + axsfNew.getAttributeValueAsString(AxSf.FDRID_FIELD) + "]");    throw ee;  }catch (  SessionException e) {    throw e;  }catch (  Exception e) {    log.error("Impossible to launch event for create register for the session [" + sessionID + "]",e);    throw new BookException(BookException.ERROR_CANNOT_CREATE_NEW_FOLDER,e);  }  return result;}  }
class C{  public StackOfIntegers(){  this(DEFAULT_CAPACITY);}  }
class C{  public void dispose(){  m_module.removeListener(m_moduleListener);  m_debuggerPanel.removeListener(m_internalDebuggerPanelListener);  m_debuggerPanel.dispose();  if (m_addressSpace == null) {    m_debuggerContainer.dispose();  }  m_bottomPanel.dispose();  m_middlePanel.dispose();}  }
class C{  public boolean checkToolPanelToggleMenuItem(ToolPanelToggleMenuItem mi){  return (mi != null && mi.getToolPanel().equals(this));}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.244 -0400",hash_original_method="223F529506D3BF44A149C901A5D55A6B",hash_generated_method="3426744C62A1AFB93B06E3E44C1DDB13") @Override public void write(char[] chr){}  }
class C{  public boolean checkDuplicate(T obj){  int top=_top.get();  for (int i=top - 1; i >= 0; i--) {    if (_freeStack.get(i) == obj)     return true;  }  return false;}  }
class C{  public void filter(final Predicate filter){  this.filter=filter;  filteredSize=-1;}  }
class C{  public static TextNode valueOf(String v){  if (v == null) {    return null;  }  if (v.length() == 0) {    return EMPTY_STRING_NODE;  }  return new TextNode(v);}  }
class C{  public void mouseReleased(MouseEvent evt){  if (evt.isPopupTrigger()) {    createPopup(evt.getPoint());  }}  }
class C{  private static void assertFieldArray(final Field field){  if (!field.getType().isArray()) {    throw new IllegalArgumentException("Detected non-array field marked to be written as an array [" + field + ']');  }}  }
class C{  public static void debug(final String message){  if (JQuantLib.logger != null) {    JQuantLib.logger.debug(message);  } else {    System.err.printf("DEBUG: %s\n",message);  }}  }
class C{  public boolean isIncrementalDefaultDelay(){  return incrementalDefaultDelay;}  }
class C{  public void copyTuple(ITuple t){  this.nvisited++;  this.versionDeleted=t.isDeletedVersion();  this.versionTimestamp=t.getVersionTimestamp();  if (needKeys) {    kbuf.reset().copyAll(t.getKeyBuffer());  }  if (needVals) {    vbuf.reset();    if (!versionDeleted) {      isNull=t.isNull();      if (!isNull) {        vbuf.reset().copyAll(t.getValueBuffer());      }    }  }}  }
class C{  public Matrix4x3f add(Matrix4x3fc other){  return add(other,this);}  }
class C{  public final double distance(IMovingAgent agent){  return location.distance(agent.getLocation());}  }
class C{  public static boolean initializeEntityActivationState(Entity entity){  if (entity.worldObj.isRemote) {    return true;  }  if (entity instanceof EntityPlayer && !SpongeImplHooks.isFakePlayer(entity) || entity instanceof EntityThrowable || entity instanceof EntityDragon || entity instanceof EntityDragonPart || entity instanceof EntityWither || entity instanceof EntityFireball || entity instanceof EntityWeatherEffect || entity instanceof EntityTNTPrimed || entity instanceof EntityEnderCrystal || entity instanceof EntityFireworkRocket || entity instanceof EntityFallingBlock || (entity.getClass().getSuperclass() == Entity.class && !SpongeImplHooks.isCreatureOfType(entity,EnumCreatureType.CREATURE) && !SpongeImplHooks.isCreatureOfType(entity,EnumCreatureType.AMBIENT) && !SpongeImplHooks.isCreatureOfType(entity,EnumCreatureType.MONSTER) && !SpongeImplHooks.isCreatureOfType(entity,EnumCreatureType.WATER_CREATURE))) {    return true;  }  EntityActivationRangeCategory config=((IMixinWorldServer)entity.worldObj).getActiveConfig().getConfig().getEntityActivationRange();  EntityType type=((org.spongepowered.api.entity.Entity)entity).getType();  IModData_Activation spongeEntity=(IModData_Activation)entity;  if (type == EntityTypes.UNKNOWN || !(type instanceof SpongeEntityType)) {    return false;  }  SpongeEntityType spongeType=(SpongeEntityType)type;  byte activationType=spongeEntity.getActivationType();  EntityActivationModCategory entityMod=config.getModList().get(spongeType.getModId());  int defaultActivationRange=config.getDefaultRanges().get(activationTypeMappings.get(activationType));  if (entityMod == null) {    spongeEntity.setActivationRange(defaultActivationRange);    if (defaultActivationRange <= 0) {      return true;    }    return false;  } else   if (!entityMod.isEnabled()) {    spongeEntity.setActivationRange(defaultActivationRange);    return true;  }  Integer defaultModActivationRange=entityMod.getDefaultRanges().get(activationTypeMappings.get(activationType));  Integer entityActivationRange=entityMod.getEntityList().get(type.getName());  if (defaultModActivationRange != null && entityActivationRange == null) {    spongeEntity.setActivationRange(defaultModActivationRange);    if (defaultModActivationRange <= 0) {      return true;    }    return false;  } else   if (entityActivationRange != null) {    spongeEntity.setActivationRange(entityActivationRange);    if (entityActivationRange <= 0) {      return true;    }  }  return false;}  }
class C{  protected String limitText(String text){  int startIndex=0;  int searchStart=0;  if (startPattern != null) {    Matcher startMatcher=startPattern.matcher(text);    if (startMatcher.find()) {      startIndex=startMatcher.start();      searchStart=startMatcher.end();    } else     if (!startMatchOptional) {      return null;    }  }  int endIndex=text.length();  if (endPattern != null) {    Matcher endMatcher=endPattern.matcher(text);    if (endMatcher.find(searchStart)) {      endIndex=endMatcher.start();    } else     if (!endMatchOptional) {      return null;    }  }  if ((startIndex > 0) || (endIndex < text.length())) {    return StringUtils.substring(text,startIndex,endIndex);  } else {    return text;  }}  }
class C{  public double dotProduct(VectorInstance other) throws Exception {  if (m_vectorFields.size() != other.getVectorFields().size()) {    throw new Exception("[VectorInstance.dotProduct] supplied vector instance does " + "not have the same number of vector fields as this vector instance!");  }  double result=0;  Array otherValues=other.getValues();  int n1=m_values.numValues();  int n2=otherValues.numValues();  for (int p1=0, p2=0; p1 < n1 && p2 < n2; ) {    int ind1=m_values.index(p1);    int ind2=otherValues.index(p2);    if (ind1 == ind2) {      result+=m_values.valueSparseDouble(p1) * otherValues.valueSparseDouble(p2);      p1++;      p2++;    } else     if (ind1 > ind2) {      p2++;    } else {      p1++;    }  }  return result;}  }
class C{  public ContentAssistInvocationContext(Document document,int offset){  Assert.isNotNull(document);  Assert.isTrue(offset >= 0);  fDocument=document;  fOffset=offset;}  }
class C{  protected void writeEvents(final Writer w,final IEventReportingService eventReportingService) throws IOException {  final Map<String,String> seriesByGroup=new HashMap<String,String>();  final Map<String,StringBuilder> eventsByHost=new HashMap<String,StringBuilder>();  final Map<String,StringBuilder> tooltipsByHost=new HashMap<String,StringBuilder>();  int naccepted=0;  int nvisited=0;  final Iterator<Event> itr=eventReportingService.rangeIterator(model.fromTime,model.toTime);  while (itr.hasNext()) {    final Event e=itr.next();    nvisited++;    if (!e.isComplete() || !acceptEvent(e)) {      continue;    }    naccepted++;    final String key=getEventKey(e);    final String series;    StringBuilder eventsSB=eventsByHost.get(key);    if (eventsSB == null) {      eventsSB=new StringBuilder();      series="series_" + seriesByGroup.size();      seriesByGroup.put(key,series);      eventsByHost.put(key,eventsSB);      eventsSB.append("var ");      eventsSB.append(series);      eventsSB.append(" = [\n");      final StringBuilder tooltipsSB=new StringBuilder();      final String tooltipvar=series + "tooltips";      tooltipsByHost.put(key,tooltipsSB);      tooltipsSB.append("var ");      tooltipsSB.append(tooltipvar);      tooltipsSB.append(" = [\n");    } else {      series=seriesByGroup.get(key);    }    eventsSB.append("[ ");    eventsSB.append(e.getStartTime());    eventsSB.append(", ");    final double offset=(Math.random() * .85d) + .05;    final String hostyvar=series + "y";    eventsSB.append(hostyvar);    eventsSB.append((offset < 0 ? "" : "+") + offset + " ], [ ");    eventsSB.append(e.getEndTime());    eventsSB.append(", ");    eventsSB.append(hostyvar);    eventsSB.append((offset < 0 ? "" : "+") + offset + " ], null,\n");    final StringBuilder tooltipsSB=tooltipsByHost.get(key);    final String tooltip;    if (false) {      StringWriter sw=new StringWriter();      writeEventFlyover(sw,e);      tooltip=sw.toString();    } else {      tooltip=e.toString().replace("\n","");    }    if (tooltip != null && !tooltip.startsWith("\"")) {      tooltipsSB.append("\"");    }    tooltipsSB.append(tooltip);    if (tooltip != null && !tooltip.endsWith("\"")) {      tooltipsSB.append("\"");    }    tooltipsSB.append(", null, null,\n");  }  if (log.isInfoEnabled())   log.info("accepted: " + naccepted + " out of "+ nvisited+ " events");  final String[] keys=eventsByHost.keySet().toArray(new String[0]);  Arrays.sort(keys);  for (int i=0; i < keys.length; i++) {    final int hosty=i;    final String key=keys[i];    final StringBuilder eventsSB=new StringBuilder();    final String series=seriesByGroup.get(key);    final String hostyvar=series + "y";    eventsSB.append("var ");    eventsSB.append(hostyvar);    eventsSB.append(" = ");    eventsSB.append(hosty);    eventsSB.append(";\n");    final StringBuilder sb=eventsSB.append(eventsByHost.get(key));    sb.setLength(sb.length() - ", null,\n".length());    sb.append("\n];");    w.write(sb.toString());    w.write("\n");  }  for (int i=0; i < keys.length; i++) {    final StringBuilder sb=tooltipsByHost.get(keys[i]);    sb.setLength(sb.length() - 2);    sb.append("\n];");    w.write(sb.toString());    w.write("\n");  }  final StringBuilder data=new StringBuilder();  data.append("var data = [\n");  for (int i=keys.length - 1; i >= 0; i--) {    final String key=keys[i];    final String series=seriesByGroup.get(key);    data.append("{ label: \"");    data.append(key);    data.append("\", data: ");    data.append(series);    data.append(" },\n");  }  if (data.charAt(data.length() - 2) == ',') {    data.setLength(data.length() - 2);  }  data.append("\n];\n");  w.write(data.toString());  final StringBuilder tooltips=new StringBuilder();  tooltips.append("var tooltips = [\n");  for (int i=keys.length - 1; i >= 0; i--) {    final String key=keys[i];    final String series=seriesByGroup.get(key);    final String tooltipvar=series + "tooltips";    tooltips.append(tooltipvar);    tooltips.append(",\n");  }  if (tooltips.charAt(tooltips.length() - 2) == ',') {    tooltips.setLength(tooltips.length() - 2);  }  tooltips.append("\n];\n");  w.write(tooltips.toString());}  }
class C{  public DateRecognizerFilterFactory(Map<String,String> args){  super(args);  this.locale=getLocale(get(args,LOCALE));  this.dateFormat=getDataFormat(get(args,DATE_PATTERN));  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static SearchRequest startRequest(int id,String engine){  SearchRequest sr=new SearchRequest();  sr.searchId=id;  sr.isSearch=false;  sr.isAnalyze=false;  sr.engine=engine;  sr.posHashList=null;  sr.posHashListSize=0;  return sr;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.431 -0500",hash_original_method="8B6A27DB4EF6FF923614BEDE2725C38D",hash_generated_method="C175DA295867E4B2748B526110F37F97") public void deleteOptionHandler(int optcode) throws InvalidTelnetOptionException {  super.deleteOptionHandler(optcode);}  }
class C{  @Override public Object readNull(Type target){  return null;}  }
class C{  public <UO>GenericRawResults<UO> queryRaw(ConnectionSource connectionSource,String query,DataType[] columnTypes,RawRowObjectMapper<UO> rowMapper,String[] arguments,ObjectCache objectCache) throws SQLException {  logger.debug("executing raw query for: {}",query);  if (arguments.length > 0) {    logger.trace("query arguments: {}",(Object)arguments);  }  DatabaseConnection connection=connectionSource.getReadOnlyConnection();  CompiledStatement compiledStatement=null;  try {    compiledStatement=connection.compileStatement(query,StatementType.SELECT,noFieldTypes,DatabaseConnection.DEFAULT_RESULT_FLAGS);    assignStatementArguments(compiledStatement,arguments);    RawResultsImpl<UO> rawResults=new RawResultsImpl<UO>(connectionSource,connection,query,String[].class,compiledStatement,new UserRawRowObjectMapper<UO>(rowMapper,columnTypes),objectCache);    compiledStatement=null;    connection=null;    return rawResults;  }  finally {    if (compiledStatement != null) {      compiledStatement.close();    }    if (connection != null) {      connectionSource.releaseConnection(connection);    }  }}  }
class C{  public boolean isOctetStream(){  return ((inputOctetStreamProxy != null || bytes != null) && (inputNodeSet == null && subNode == null));}  }
class C{  public static void applyStyle(View v,int resId){  applyStyle(v,null,0,resId);}  }
class C{  public void testJms() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/jms-war/test");  final String expected="Got queue!";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public static void load(Context cx,Scriptable thisObj,Object[] args,Function funObj){  for (int i=0; i < args.length; i++) {    Main.processFile(cx,thisObj,Context.toString(args[i]));  }}  }
class C{  public void clear(){  this.len=0;}  }
class C{  public long copyStream(InputStream is) throws IOException {  long ncopied=0L;  while (true) {    if (this.len == buffer.length) {      flush();    }    final int off=this.len;    final int remainder=this.buffer.length - off;    final int nread=is.read(buffer,off,remainder);    if (nread == -1) {      BigdataFileSystem.log.info("Copied " + ncopied + " bytes: id="+ id+ ", version="+ version);      try {        is.close();      } catch (      IOException ex) {        BigdataFileSystem.log.warn("Problem closing input stream: id=" + id + ", version="+ version,ex);      }      return ncopied;    }    this.len=off + nread;    ncopied+=nread;    nwritten+=nread;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void flushMyWriter(){  if (m_writer != null) {    try {      m_writer.flush();    } catch (    IOException ioe) {    }  }}  }
class C{  @Nullable public Comparator<V> comparator(){  return comp;}  }
class C{  public static float step(float a,float x){  return (x < a) ? 0.0f : 1.0f;}  }
class C{  static public SerialSensorManager instance(){  if (_instance == null) {    _instance=new SerialSensorManager();  }  return _instance;}  }
class C{  public void stop(){  timer.stop();}  }
class C{  public void run(){  while (!Thread.currentThread().isInterrupted()) {    try {      Thread.sleep(m_rate);    } catch (    InterruptedException ioe) {      break;    }synchronized (this) {      m_elapsed+=m_rate;      if (m_elapsed > m_length) {        timeout();      }    }  }}  }
class C{  public void doPrint(){}  }
class C{  static void testAccessMethods(Path tmpdir) throws IOException {  Path doesNotExist=tmpdir.resolve("doesNotExist");  assertTrue(!isReadable(doesNotExist));  assertTrue(!isWritable(doesNotExist));  assertTrue(!isExecutable(doesNotExist));  assertTrue(!exists(doesNotExist));  assertTrue(notExists(doesNotExist));  Path file=createFile(tmpdir.resolve("foo"));  try {    assertTrue(isReadable(file));    assertTrue(isWritable(file));    assertTrue(exists(file));    assertTrue(!notExists(file));    assertTrue(isReadable(tmpdir));    assertTrue(isWritable(tmpdir));    assertTrue(exists(tmpdir));    assertTrue(!notExists(tmpdir));    if (TestUtil.supportsLinks(tmpdir)) {      Path link=tmpdir.resolve("link");      createSymbolicLink(link,file);      try {        assertTrue(isReadable(link));        assertTrue(isWritable(link));        assertTrue(exists(link));        assertTrue(!notExists(link));      }  finally {        delete(link);      }      createSymbolicLink(link,doesNotExist);      try {        assertTrue(!isReadable(link));        assertTrue(!isWritable(link));        assertTrue(!exists(link));        assertTrue(exists(link,NOFOLLOW_LINKS));        assertTrue(notExists(link));        assertTrue(!notExists(link,NOFOLLOW_LINKS));      }  finally {        delete(link);      }    }    if (getFileStore(file).supportsFileAttributeView("acl")) {      AclFileAttributeView view=getFileAttributeView(file,AclFileAttributeView.class);      UserPrincipal owner=view.getOwner();      List<AclEntry> acl=view.getAcl();      AclEntry entry=AclEntry.newBuilder().setType(AclEntryType.DENY).setPrincipal(owner).setPermissions(AclEntryPermission.WRITE_DATA,AclEntryPermission.EXECUTE).build();      acl.add(0,entry);      view.setAcl(acl);      try {        if (isRoot()) {          assertTrue(isWritable(file));          assertTrue(isExecutable(file));        } else {          assertTrue(!isWritable(file));          assertTrue(!isExecutable(file));        }      }  finally {        acl.remove(0);        view.setAcl(acl);      }    }    if (System.getProperty("os.name").startsWith("Windows")) {      setAttribute(file,"dos:readonly",true);      try {        assertTrue(!isWritable(file));      }  finally {        setAttribute(file,"dos:readonly",false);      }      DosFileAttributeView view=getFileAttributeView(tmpdir,DosFileAttributeView.class);      boolean save=view.readAttributes().isReadOnly();      view.setReadOnly(true);      try {        assertTrue(isWritable(file));      }  finally {        view.setReadOnly(save);      }    }  }  finally {    delete(file);  }}  }
class C{  public static byte[] tauAdicNaf(byte mu,ZTauElement lambda){  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger norm=norm(mu,lambda);  int log2Norm=norm.bitLength();  int maxLength=log2Norm > 30 ? log2Norm + 4 : 34;  byte[] u=new byte[maxLength];  int i=0;  int length=0;  BigInteger r0=lambda.u;  BigInteger r1=lambda.v;  while (!((r0.equals(ECConstants.ZERO)) && (r1.equals(ECConstants.ZERO)))) {    if (r0.testBit(0)) {      u[i]=(byte)ECConstants.TWO.subtract((r0.subtract(r1.shiftLeft(1))).mod(ECConstants.FOUR)).intValue();      if (u[i] == 1) {        r0=r0.clearBit(0);      } else {        r0=r0.add(ECConstants.ONE);      }      length=i;    } else {      u[i]=0;    }    BigInteger t=r0;    BigInteger s=r0.shiftRight(1);    if (mu == 1) {      r0=r1.add(s);    } else {      r0=r1.subtract(s);    }    r1=t.shiftRight(1).negate();    i++;  }  length++;  byte[] tnaf=new byte[length];  System.arraycopy(u,0,tnaf,0,length);  return tnaf;}  }
class C{  @Override protected final void doGet(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html");  Resource resource=request.getResourceResolver().getResource("/content/world");  ValueMap properties=resource.adaptTo(ValueMap.class);  if (properties != null) {    response.getWriter().write("<html><head></head><body>Hello " + properties.get("name","World") + "!</body></html>");    response.setStatus(SlingHttpServletResponse.SC_OK);  } else {    response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);    response.getWriter().write("ERROR");  }}  }
class C{  public static void createFontDirIfNotExists(){  createDirIfNotExists(SYSTEM_THEME_FONT_PATH);}  }
class C{  @Inject protected PreferencesPresenter(PreferencesView view,Set<PreferencePagePresenter> preferences,PreferencesManager preferencesManager,DialogFactory dialogFactory,UserProfileServiceClient userProfileService,CoreLocalizationConstant locale){  this.view=view;  this.preferences=preferences;  this.preferencesManager=preferencesManager;  this.dialogFactory=dialogFactory;  this.userProfileService=userProfileService;  this.locale=locale;  this.view.setDelegate(this);  for (  PreferencePagePresenter preference : preferences) {    preference.setUpdateDelegate(this);  }}  }
class C{  @SuppressWarnings("unchecked") protected void unmarshalAuthorization(Map<String,Object> json){  this.status=Status.parse((String)json.get("status"),Status.PENDING);  String expires=(String)json.get("expires");  if (expires != null) {    this.expires=TimestampParser.parse(expires);  }  Map<String,Object> identifier=(Map<String,Object>)json.get("identifier");  if (identifier != null) {    String type=(String)identifier.get("type");    if (type != null && !"dns".equals(type)) {      throw new AcmeProtocolException("Unknown authorization type: " + type);    }    this.domain=(String)identifier.get("value");  }  Collection<Map<String,Object>> challenges=(Collection<Map<String,Object>>)json.get("challenges");  List<Challenge> cr=new ArrayList<>();  for (  Map<String,Object> c : challenges) {    Challenge ch=getSession().createChallenge(c);    if (ch != null) {      cr.add(ch);    }  }  this.challenges=cr;  Collection<List<Number>> combinations=(Collection<List<Number>>)json.get("combinations");  if (combinations != null) {    List<List<Challenge>> cmb=new ArrayList<>(combinations.size());    for (    List<Number> c : combinations) {      List<Challenge> clist=new ArrayList<>(c.size());      for (      Number n : c) {        clist.add(cr.get(n.intValue()));      }      cmb.add(clist);    }    this.combinations=cmb;  } else {    List<List<Challenge>> cmb=new ArrayList<>(1);    cmb.add(cr);    this.combinations=cmb;  }  loaded=true;}  }
class C{  public void addEntity(Entity entity){  int cubeX=Coords.getCubeXForEntity(entity);  int cubeY=Coords.getCubeYForEntity(entity);  int cubeZ=Coords.getCubeZForEntity(entity);  if (cubeX != this.coords.getX() || cubeY != this.coords.getY() || cubeZ != this.coords.getZ()) {    LOGGER.warn(String.format("Wrong entity (%s) location. Entity thinks it's in (%d,%d,%d) but actua location is (%d,%d,%d)!",entity.getClass().getName(),cubeX,cubeY,cubeZ,this.coords.getX(),this.coords.getY(),this.coords.getZ()));    entity.setDead();  }  MinecraftForge.EVENT_BUS.post(new EntityEvent.EnteringChunk(entity,this.getX(),this.getZ(),entity.chunkCoordX,entity.chunkCoordZ));  entity.addedToChunk=true;  entity.chunkCoordX=this.coords.getX();  entity.chunkCoordY=this.coords.getY();  entity.chunkCoordZ=this.coords.getZ();  this.entities.addEntity(entity);  this.isModified=true;}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  @Override public void handlePress(CallbackQuery query){  value=!value;  setText(callback.handleToggle(this,value));}  }
class C{  public static byte[] decrypt(byte[] encryptedByteData,File x509CertificateFile,File privateKeyPemFile) throws IOException, CertificateException, EncryptionException {  return decrypt(encryptedByteData,x509CertificateFile,privateKeyPemFile,null);}  }
class C{  private static boolean checkBusyboxInstalled(){  try {    File bsbin=new File("/system/bin/busybox");    File bsxbin=new File("/system/xbin/busybox");    File bssbin=new File("/sbin/busybox");    return bsbin.exists() || bsxbin.exists() || bssbin.exists();  } catch (  Exception ex) {    return false;  }}  }
class C{  public boolean isVoidTag(CharSequence tagName){  for (  String html5VoidTag : HTML5_VOID_TAGS) {    if (TagUtil.equalsToLowercase(tagName,html5VoidTag)) {      return true;    }  }  return false;}  }
class C{  public DelphiArgument(){  name="UNKNOWN_ARGUMENT";  type="UNKNOWN_TYPE";}  }
class C{  private XYNavigationDirection(String... axesNames){  this.axesNames=axesNames;}  }
class C{  public static void pauseTrack(TrackRecordingServiceConnection trackRecordingServiceConnection){  try {    ITrackRecordingService service=trackRecordingServiceConnection.getServiceIfBound();    if (service != null) {      service.pauseCurrentTrack();    }  } catch (  RemoteException e) {    Log.e(TAG,"Unable to resume track.",e);  }}  }
class C{  public void removeUpdate(DocumentEvent e,Shape a,ViewFactory f){  if (isLoaded()) {    super.removeUpdate(e,a,f);  }}  }
class C{  public static void main(String[] args) throws Exception {  new SetGenerator().start(args);}  }
class C{  public static LocalizedMethodFault convertExceptionToFault(Exception e){  LocalizedMethodFault lmf=new LocalizedMethodFault();  try {    Method m=e.getClass().getMethod("getFaultInfo");    MethodFault mf=(MethodFault)m.invoke(e);    lmf.setFault(mf);    lmf.setLocalizedMessage(e.getLocalizedMessage());    return lmf;  } catch (  NoSuchMethodException e1) {    lmf.setLocalizedMessage(e.getMessage());    lmf.setLocalizedMessage(e.getLocalizedMessage());    return lmf;  }catch (  InvocationTargetException|IllegalAccessException e1) {    lmf.setLocalizedMessage(e.getMessage());    return lmf;  }}  }
class C{  public static CCBitmapFontConfiguration FNTConfigLoadFile(String fntFile){  CCBitmapFontConfiguration ret=null;  if (configurations == null)   configurations=new HashMap<String,CCBitmapFontConfiguration>();  ret=configurations.get(fntFile);  if (ret == null) {    ret=CCBitmapFontConfiguration.configuration(fntFile);    configurations.put(fntFile,ret);  }  return ret;}  }
class C{  private void userSelectedADate(LocalDate selectedDate){  if (settings == null) {    return;  }  if (selectedDate != null) {    DateVetoPolicy vetoPolicy=settings.getVetoPolicy();    if (InternalUtilities.isDateVetoed(vetoPolicy,selectedDate)) {      return;    }  }  if (selectedDate != null) {    YearMonth selectedDateYearMonth=YearMonth.from(selectedDate);    displayedYearMonth=selectedDateYearMonth;  } else {    displayedYearMonth=YearMonth.now();  }  zInternalChangeSelectedDateProcedure(selectedDate);  if (settings.getParentDatePicker() != null) {    DatePicker parent=settings.getParentDatePicker();    parent.setDate(selectedDate);    parent.closePopup();  }}  }
class C{  public BaseConversation askMovieQuest(Recency recency){  BaseConversation conversation=new BaseConversation();  BaseQuestion question=new BaseQuestion.Builder("looking for a movie").timeFrame(recency.getType()).genre("no").rating("no").build();  conversation.setQuestions(question.deconQuest(this));  return conversation;}  }
class C{  public RangePredicate(Expression middle,Expression left,Expression right,Comparator cmp){  this(IN_IN,middle,left,right,cmp);}  }
class C{  public int size(){  processQueue();  return hash.size();}  }
class C{  public static CstType intern(Type type){synchronized (interns) {    CstType cst=interns.get(type);    if (cst == null) {      cst=new CstType(type);      interns.put(type,cst);    }    return cst;  }}  }
class C{  protected List<String> createProcessTreeList(int indent,String selfPrefix,String childPrefix,Operator markOperator,String mark){  List<String> processTreeList=new LinkedList<>();  processTreeList.add(createProcessTreeEntry(indent,selfPrefix,childPrefix,markOperator,mark));  return processTreeList;}  }
class C{  public static double parseDouble(String valueStr){  double value;  try {    value=Double.parseDouble(valueStr);  } catch (  NumberFormatException nfe) {    value=Double.NaN;  }  return value;}  }
class C{  public MutableString(final char[] a,final int offset,final int len){  makeCompactMutableString(len);  System.arraycopy(a,offset,array,0,len);}  }
class C{  void addScrapView(View scrap,int position){  if (DBG)   Log.d(TAG,"addScrapView position = " + position);  LayoutParams lp=(LayoutParams)scrap.getLayoutParams();  if (lp == null) {    return;  }  lp.position=position;  int viewType=lp.viewType;  final boolean scrapHasTransientState=ViewCompat.hasTransientState(scrap);  if (!shouldRecycleViewType(viewType) || scrapHasTransientState) {    if (viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER || scrapHasTransientState) {      if (mSkippedScrap == null) {        mSkippedScrap=new ArrayList<View>();      }      mSkippedScrap.add(scrap);    }    if (scrapHasTransientState) {      if (mTransientStateViews == null) {        mTransientStateViews=new SparseArrayCompat<View>();      }      mTransientStateViews.put(position,scrap);    }    return;  }  if (mViewTypeCount == 1) {    mCurrentScrap.add(scrap);  } else {    mScrapViews[viewType].add(scrap);  }}  }
class C{  private void runFinalize(SimpleSink.SimpleWriteOperation writeOp,List<File> temporaryFiles,boolean retainTemporaryFiles) throws Exception {  PipelineOptions options=PipelineOptionsFactory.create();  int numFiles=temporaryFiles.size();  List<File> outputFiles=new ArrayList<>();  List<FileResult> fileResults=new ArrayList<>();  List<String> outputFilenames=writeOp.generateDestinationFilenames(numFiles);  for (int i=0; i < numFiles; i++) {    fileResults.add(new FileResult(temporaryFiles.get(i).toString()));    outputFiles.add(new File(outputFilenames.get(i)));  }  writeOp.finalize(fileResults,options);  for (int i=0; i < numFiles; i++) {    assertTrue(outputFiles.get(i).exists());    assertEquals(retainTemporaryFiles,temporaryFiles.get(i).exists());  }}  }
class C{  public void serializeContacts(){  if (Cfg.DEBUG) {    Check.log(TAG + " (serializeContacts)");  }  if (Cfg.DEBUG) {    Check.ensures(contacts != null,"null contacts");  }  try {    final boolean ret=markupContacts.writeMarkupSerializable(contacts);    if (Cfg.DEBUG) {      Check.ensures(ret,"cannot serialize");    }  } catch (  final IOException e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(TAG + " Error (serializeContacts): " + e);    }  }}  }
class C{  @Override public void start(Future<Void> fut){  mongo=MongoClient.createShared(vertx,config());  createSomeData(null,fut);}  }
class C{  private void drawTitle(Graphics g){  int stringWidth=titleFm.stringWidth(title);  int stringHeight=titleFm.getHeight();  g.setFont(titleFont);  g.setColor(titleColor);  g.drawString(title,plotRect.x + plotRect.width / 2 - stringWidth / 2,stringHeight);}  }
class C{  public Response handleRequest(Request request,Context context) throws RuntimeException {  Service businessService=getApplicationContext().getBean(Service.class);  return new Response(businessService.getText(request.getFirstName() + " " + request.getLastName()));}  }
class C{  public void showValues(){  String attribute;  ArffSortedTableModel model;  ArffTable table;  HashSet<String> values;  Vector<String> items;  Iterator<String> iter;  ListSelectorDialog dialog;  int i;  int col;  attribute=showAttributes();  if (attribute == null) {    return;  }  table=getCurrentPanel().getTable();  model=(ArffSortedTableModel)table.getModel();  col=-1;  for (i=0; i < table.getColumnCount(); i++) {    if (table.getPlainColumnName(i).equals(attribute)) {      col=i;      break;    }  }  if (col == -1) {    return;  }  values=new HashSet<String>();  items=new Vector<String>();  for (i=0; i < model.getRowCount(); i++) {    values.add(model.getValueAt(i,col).toString());  }  if (values.isEmpty()) {    return;  }  iter=values.iterator();  while (iter.hasNext()) {    items.add(iter.next());  }  Collections.sort(items);  dialog=new ListSelectorDialog(getParentFrame(),new JList(items));  dialog.showDialog();}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public void testValuesPlacement02(){  new Helper(){{      given=select(varNode(s),where(stmtPatternWithVars("s","o"),assignmentWithVar("o","reused"),bindingsClauseWithVars("reused")));      expected=select(varNode(s),where(bindingsClauseWithVars("reused"),assignmentWithVar("o","reused"),stmtPatternWithVars("s","o")));    }  }.test();}  }
class C{  public MaterialEditText inputText(String s){  mEditText.setText(s);  mEditText.setSelection(s.length());  return this;}  }
class C{  protected void appendDateValue(long date){  appendLongInteger(date);}  }
class C{  private void endMBean(){  this.seenAttribute=false;  this.seenOperation=false;  this.seenNotifications=false;  pw.println("</table>");  pw.println("");  pw.println("<P></P>");  pw.println("");}  }
class C{  public static double nanoToMilliseconds(long nanoTime){  return nanoTime / NANO_TO_MS_VALUE;}  }
class C{  public void clearPacket(){  clearInputBuffer();  packetValues.clear();}  }
class C{  public void startDocument() throws ODataRenderException {  outputStream=new ByteArrayOutputStream();  try {    xmlWriter=XML_OUTPUT_FACTORY.createXMLStreamWriter(outputStream,UTF_8.name());    metadataWriter=new AtomMetadataWriter(xmlWriter,oDataUri,entityDataModel,nsConfigurationProvider);    dataWriter=new AtomDataWriter(xmlWriter,entityDataModel,nsConfigurationProvider);    xmlWriter.writeStartDocument(UTF_8.name(),XML_VERSION);    xmlWriter.setPrefix(METADATA,nsConfigurationProvider.getOdataMetadataNs());    xmlWriter.setPrefix(ODATA_DATA,nsConfigurationProvider.getOdataDataNs());  } catch (  XMLStreamException e) {    LOG.error("Not possible to start stream XML");    throw new ODataRenderException("Not possible to start stream XML: ",e);  }}  }
class C{  public void removeElementFromRelation(final OsmElement element,Relation r){  Log.i("StorageDelegator","removing " + element.getName() + " #"+ element.getOsmId()+ " from relation #"+ r.getOsmId());  dirty=true;  undo.save(r);  try {    r.removeMember(r.getMember(element));    r.updateState(OsmElement.STATE_MODIFIED);    apiStorage.insertElementSafe(r);    undo.save(element);    element.removeParentRelation(r);    Log.i("StorageDelegator","... done");    recordImagery();  } catch (  StorageException e) {    e.printStackTrace();  }}  }
class C{  public static CompiledMethod compile(MethodTable methods){  CompiledMethodTable table=new CompiledMethodTable();  for (  NormalMethod m : methods.normalMethods()) {    Compiler compiler=new Compiler(m,table);    m.accept(compiler);    table.put(compiler.getCompiledMethod());  }  for (  CompiledMethod cm : table) {    cm.resolveMethodReferences();    if (Harness.dumpPcode.getValue()) {      System.out.println(cm.getName() + "\n" + cm.toString());    }  }  return table.get("main");}  }
class C{  public OMArc(LatLonPoint center,double radius,Length units,int nverts,double s,double e){  super(RENDERTYPE_LATLON,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  this.radius=units.toRadians(radius);  this.center=center;  this.nverts=nverts;  this.start=s;  this.extent=e;}  }
class C{  public SQLNonTransientConnectionException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public void addOutOfContextMessage(ConsensusMessage m){  outOfContextLock.lock();  if (m.getType() == MessageFactory.PROPOSE) {    Logger.println("(ExecutionManager.addOutOfContextMessage) adding " + m);    outOfContextProposes.put(m.getNumber(),m);  } else {    List<ConsensusMessage> messages=outOfContext.get(m.getNumber());    if (messages == null) {      messages=new LinkedList<ConsensusMessage>();      outOfContext.put(m.getNumber(),messages);    }    Logger.println("(ExecutionManager.addOutOfContextMessage) adding " + m);    messages.add(m);  }  outOfContextLock.unlock();}  }
class C{  public void add(String name,Object val){  values.add(name,val);}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MInOutBoundLine[").append(get_ID()).append("-").append("").append("]");  return sb.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int miscB=0;  String premFin=getString(stack);  if (curNumberOfParameters == 13) {    boolean subtitled=evalBool(stack.pop());    boolean sap=evalBool(stack.pop());    boolean cc=evalBool(stack.pop());    boolean stereo=evalBool(stack.pop());    boolean hdtv=evalBool(stack.pop());    if (subtitled)     miscB|=sage.Airing.SUBTITLE_MASK;    if (sap)     miscB|=sage.Airing.SAP_MASK;    if (cc)     miscB|=sage.Airing.CC_MASK;    if (stereo)     miscB|=sage.Airing.STEREO_MASK;    if (hdtv)     miscB|=sage.Airing.HDTV_MASK;  } else {    String[] attribs=getStringList(stack);    for (int i=0; attribs != null && i < attribs.length; i++) {      String test=attribs[i];      if ("HDTV".equalsIgnoreCase(test))       miscB|=sage.Airing.HDTV_MASK; else       if ("Stereo".equalsIgnoreCase(test))       miscB|=sage.Airing.STEREO_MASK; else       if ("CC".equalsIgnoreCase(test))       miscB|=sage.Airing.CC_MASK; else       if ("SAP".equalsIgnoreCase(test))       miscB|=sage.Airing.SAP_MASK; else       if ("Subtitled".equalsIgnoreCase(test))       miscB|=sage.Airing.SUBTITLE_MASK; else       if ("3D".equalsIgnoreCase(test))       miscB|=sage.Airing.THREED_MASK; else       if ("DD5.1".equalsIgnoreCase(test))       miscB|=sage.Airing.DD51_MASK; else       if ("Dolby".equalsIgnoreCase(test))       miscB|=sage.Airing.DOLBY_MASK; else       if ("Letterbox".equalsIgnoreCase(test))       miscB|=sage.Airing.LETTERBOX_MASK; else       if ("Live".equalsIgnoreCase(test))       miscB|=sage.Airing.LIVE_MASK; else       if ("New".equalsIgnoreCase(test))       miscB|=sage.Airing.NEW_MASK; else       if ("Widescreen".equalsIgnoreCase(test))       miscB|=sage.Airing.WIDESCREEN_MASK; else       if ("Surround".equalsIgnoreCase(test))       miscB|=sage.Airing.SURROUND_MASK; else       if ("Dubbed".equalsIgnoreCase(test))       miscB|=sage.Airing.DUBBED_MASK; else       if ("Taped".equalsIgnoreCase(test))       miscB|=sage.Airing.TAPE_MASK;    }  }  if (premFin != null && premFin.length() > 0) {    if (Sage.rez("Premiere").equals(premFin))     miscB|=sage.Airing.PREMIERE_MASK; else     if (Sage.rez("Season_Premiere").equals(premFin))     miscB|=sage.Airing.SEASON_PREMIERE_MASK; else     if (Sage.rez("Season_Finale").equals(premFin))     miscB|=sage.Airing.SEASON_FINALE_MASK; else     if (Sage.rez("Series_Finale").equals(premFin))     miscB|=sage.Airing.SERIES_FINALE_MASK; else     if (Sage.rez("Series_Premiere").equals(premFin))     miscB|=sage.Airing.SERIES_PREMIERE_MASK; else     if (Sage.rez("Channel_Premiere").equals(premFin))     miscB|=sage.Airing.CHANNEL_PREMIERE_MASK;  }  String prs=getString(stack);  int totalParts=getInt(stack);  int currPart=getInt(stack);  long dur=getLong(stack);  long start=getLong(stack);  int statID=getInt(stack);  byte partsB=0;  if (totalParts > 0) {    partsB=(byte)(totalParts & 0x0F);    partsB=(byte)((partsB | ((currPart & 0x0F) << 4)) & 0xFF);  } else {    partsB=(byte)(currPart & 0xFF);  }  byte prB=0;  if (prs != null && prs.length() > 0) {    for (int i=0; i < sage.Airing.PR_NAMES.length; i++) {      if (sage.Airing.PR_NAMES[i].equals(prs)) {        prB=(byte)i;        break;      }    }  }  return Wizard.getInstance().addAiring(getString(stack),statID,start,dur,partsB,miscB,prB,(byte)0);}  }
class C{  public String valueOf(Object obj){  return String.valueOf(obj);}  }
class C{  private static Pair<String,String> split(String name,String split,boolean first){  if (name == null) {    return Pair.of("","");  }  if (split != null) {    int indexOf=name.indexOf(split);    if (indexOf != -1) {      return Pair.of(name.substring(0,indexOf),name.substring(indexOf + split.length()));    }  }  if (first) {    return Pair.of(name,"");  }  return Pair.of("",name);}  }
class C{  public ObjectMatrix1D make(int size,Object initialValue){  return make(size).assign(initialValue);}  }
class C{  private void fciOrientbk(IKnowledge bk,Graph graph,List<Node> variables){  logger.log("info","Starting BK Orientation.");  for (Iterator<KnowledgeEdge> it=bk.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.ARROW);    graph.setEndpoint(from,to,Endpoint.CIRCLE);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  for (Iterator<KnowledgeEdge> it=bk.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  logger.log("info","Finishing BK Orientation.");}  }
class C{  public static Multiset<CFD> readCFDs(String filename) throws FileNotFoundException {  Multiset<CFD> CFDs=HashMultiset.create();  System.out.println("\nReading CFDs: " + filename + "...\n");  Scanner in=new Scanner(new FileReader(filename));  while (in.hasNextLine()) {    String line=in.nextLine();    if (line.contains("->")) {      String[] cfd=line.split("->");      String[] premise;      if (cfd[0].contains(","))       premise=cfd[0].split(","); else       premise=new String[]{cfd[0]};      LinkedList<SimpleImmutableEntry<Integer,String>> premises=new LinkedList<SimpleImmutableEntry<Integer,String>>();      for (      String p : premise) {        String[] w;        if (p.contains("="))         w=p.split("="); else {          System.out.println("invalid CFD syntax: " + line);          continue;        }        premises.add(new SimpleImmutableEntry<Integer,String>(Integer.parseInt(w[0]),Util.removeFirstAndLastChars(w[1])));      }      String[] rhs;      if (cfd[1].contains("="))       rhs=cfd[1].split("="); else {        System.out.println("invalid CFD syntax: " + line);        continue;      }      SimpleImmutableEntry<Integer,String> rhsValue=new SimpleImmutableEntry<Integer,String>(Integer.parseInt(rhs[0]),Util.removeFirstAndLastChars(rhs[1]));      CFD newCFD=new CFD(premises,rhsValue);      CFDs.add(newCFD);    } else {      System.out.println("invalid CFD syntax: " + line);      continue;    }  }  return CFDs;}  }
class C{  public static VideoEditor create(String projectPath) throws IOException {  final File dir=new File(projectPath);  if (!dir.exists()) {    if (!dir.mkdirs()) {      throw new FileNotFoundException("Cannot create project path: " + projectPath);    } else {      if (!new File(dir,".nomedia").createNewFile()) {        throw new FileNotFoundException("Cannot create file .nomedia");      }    }  }  return new VideoEditorImpl(projectPath);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isRoot(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:19.773 -0500",hash_original_method="2D361BDF919FB90BFEE4AC2A951EDF8C",hash_generated_method="2FA62C5737D30F6A8A02EE66F40B4FCB") public void handleAuthRequest(LoadListener loader){  if (DebugFlags.NETWORK)   Assert.assertNotNull(loader);  if (loader != null) {    mHttpAuthHandler.handleAuthRequest(loader);  }}  }
class C{  public static void writeListingEntry(BinaryRawWriter out,@Nullable IgfsListingEntry entry){  if (entry != null) {    out.writeBoolean(true);    BinaryUtils.writeIgniteUuid(out,entry.fileId());    out.writeBoolean(entry.isDirectory());  } else   out.writeBoolean(false);}  }
class C{  public StringBuffer format(double n,StringBuffer a,FieldPosition p){  return format((long)n,a,p);}  }
class C{  @RequestMapping(value=CUSTOM_DDLS_URI_PREFIX,method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_CUSTOM_DDLS_POST) public CustomDdl createCustomDdl(@RequestBody CustomDdlCreateRequest request){  return customDdlService.createCustomDdl(request);}  }
class C{  public static boolean isDirectory(Resource directory){  if (directory.exists())   return directory.isDirectory();  return directory.mkdirs();}  }
class C{  public void buildClassifier(Instances data) throws Exception {  initializeClassifier(data);  while (next()) {  }  ;  done();}  }
class C{  private void initSubstitutionModel(SubstitutionModel model){  DataType dataType=model.getDataType();  int stateCount=dataType.getStateCount();  iProbs=new double[iTau.length][stateCount][stateCount];  double[] transProb=new double[stateCount * stateCount];  int count;  for (int i=0; i < iTau.length; i++) {    model.getTransitionProbabilities(iTau[i],transProb);    count=0;    for (int j=0; j < stateCount; j++) {      for (int k=0; k < stateCount; k++) {        iProbs[i][j][k]=transProb[count];        count+=1;      }    }  }  iBaseFreqs=new double[stateCount];  for (int k=0; k < stateCount; k++) {    iBaseFreqs[k]=model.getFrequencyModel().getFrequency(k);  }}  }
class C{  protected void loadListFile(){  loadListFile(client.getLocalPlayer());}  }
class C{  private void loadUserProfile(){  ImsModule.setImsUserProfile(mCurrentNetworkInterface.getUserProfile());  RtpSource.setCname(ImsModule.getImsUserProfile().getPublicUri());  if (sLogger.isActivated()) {    sLogger.debug("User profile has been reloaded");  }}  }
class C{  public String fireDocValidate(PO po,int docTiming){  if (po == null || m_docValidateListeners.size() == 0)   return null;  String propertyName=po.get_TableName() + "*";  ArrayList<ModelValidator> list=m_docValidateListeners.get(propertyName);  if (list != null) {    String error=fireDocValidate(po,docTiming,list);    if (error != null && error.length() > 0)     return error;  }  propertyName=po.get_TableName() + po.getAD_Client_ID();  list=m_docValidateListeners.get(propertyName);  if (list != null) {    String error=fireDocValidate(po,docTiming,list);    if (error != null && error.length() > 0)     return error;  }  List<MTableScriptValidator> scriptValidators=MTableScriptValidator.getModelValidatorRules(po.getCtx(),po.get_Table_ID(),ModelValidator.documentEventValidators[docTiming]);  if (scriptValidators != null) {    for (    MTableScriptValidator scriptValidator : scriptValidators) {      MRule rule=MRule.get(po.getCtx(),scriptValidator.getAD_Rule_ID());      if (rule != null && rule.isActive() && rule.getRuleType().equals(MRule.RULETYPE_JSR223ScriptingAPIs) && rule.getEventType().equals(MRule.EVENTTYPE_ModelValidatorDocumentEvent)) {        String error;        try {          ScriptEngine engine=rule.getScriptEngine();          MRule.setContext(engine,po.getCtx(),0);          engine.put(MRule.ARGUMENTS_PREFIX + "Ctx",po.getCtx());          engine.put(MRule.ARGUMENTS_PREFIX + "PO",po);          engine.put(MRule.ARGUMENTS_PREFIX + "Type",docTiming);          engine.put(MRule.ARGUMENTS_PREFIX + "Event",ModelValidator.documentEventValidators[docTiming]);          Object retval=engine.eval(rule.getScript());          error=(retval == null ? "" : retval.toString());        } catch (        Exception e) {          e.printStackTrace();          error=e.toString();        }        if (error != null && error.length() > 0)         return error;      }    }  }  return null;}  }
class C{  public BasicBlockOperand(BasicBlock b){  block=b;}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  protected void processObjectField(final Object obj,final Field field,final Bin annotation,final Object customFieldProcessor){  if (annotation.custom()) {    this.onFieldCustom(obj,field,annotation,customFieldProcessor,readFieldValue(obj,field));  } else {    final Class<?> fieldType=field.getType();    final BinType type;    if (annotation.type() == BinType.UNDEFINED) {      type=BinType.findCompatible(fieldType);    } else {      type=annotation.type();    }    final boolean reverseBits=annotation.bitOrder() == JBBPBitOrder.MSB0;switch (type) {case BIT:{        final JBBPBitNumber bitNumber=annotation.outBitNumber();        if (fieldType == boolean.class) {          this.onFieldBits(obj,field,annotation,bitNumber,((Boolean)readFieldValue(obj,field)) ? 0xFF : 0x00);        } else {          byte value=((Number)readFieldValue(obj,field)).byteValue();          if (reverseBits) {            value=JBBPUtils.reverseBitsInByte(bitNumber,value);          }          this.onFieldBits(obj,field,annotation,bitNumber,value);        }      }    break;case BOOL:{    if (fieldType == boolean.class) {      onFieldBool(obj,field,annotation,(Boolean)readFieldValue(obj,field));    } else {      onFieldBool(obj,field,annotation,((Number)readFieldValue(obj,field)).longValue() != 0);    }  }break;case BYTE:case UBYTE:{byte value=((Number)readFieldValue(obj,field)).byteValue();if (reverseBits) {  value=JBBPUtils.reverseBitsInByte(value);}this.onFieldByte(obj,field,annotation,type == BinType.BYTE,value);}break;case SHORT:case USHORT:{short value;if (fieldType == char.class) {value=(short)((Character)readFieldValue(obj,field)).charValue();} else {value=((Number)readFieldValue(obj,field)).shortValue();}if (reverseBits) {value=(short)JBBPFieldShort.reverseBits(value);}this.onFieldShort(obj,field,annotation,type == BinType.SHORT,value);}break;case INT:{int value;if (float.class == fieldType) {value=Float.floatToIntBits((Float)readFieldValue(obj,field));} else {value=((Number)readFieldValue(obj,field)).intValue();}if (reverseBits) {value=(int)JBBPFieldInt.reverseBits(value);}this.onFieldInt(obj,field,annotation,value);}break;case LONG:{long value;if (float.class == fieldType) {value=Float.floatToIntBits((Float)readFieldValue(obj,field));} else if (double.class == fieldType) {value=Double.doubleToLongBits((Double)readFieldValue(obj,field));} else {value=((Number)readFieldValue(obj,field)).longValue();}if (reverseBits) {value=JBBPFieldLong.reverseBits(value);}this.onFieldLong(obj,field,annotation,value);}break;case STRUCT:{processObject(readFieldValue(obj,field),field,customFieldProcessor);}break;default :{final Object array=readFieldValue(obj,field);switch (type) {case BIT_ARRAY:{assertFieldArray(field);final int len=Array.getLength(array);this.onArrayStart(obj,field,annotation,len);final JBBPBitNumber bitNumber=annotation.outBitNumber();if (fieldType.getComponentType() == boolean.class) {for (int i=0; i < len; i++) {this.onFieldBits(obj,field,annotation,bitNumber,(Boolean)Array.get(array,i) ? 0xFF : 0x00);}} else {for (int i=0; i < len; i++) {byte value=((Number)Array.get(array,i)).byteValue();if (reverseBits) {value=JBBPUtils.reverseBitsInByte(bitNumber,value);}this.onFieldBits(obj,field,annotation,bitNumber,value);}}this.onArrayEnd(obj,field,annotation);}break;case BOOL_ARRAY:{assertFieldArray(field);final int len=Array.getLength(array);this.onArrayStart(obj,field,annotation,len);for (int i=0; i < len; i++) {this.onFieldBool(obj,field,annotation,(Boolean)Array.get(array,i));}this.onArrayEnd(obj,field,annotation);}break;case UBYTE_ARRAY:case BYTE_ARRAY:{final boolean signed=type == BinType.BYTE_ARRAY;if (fieldType == String.class) {final String strValue=(String)readFieldValue(obj,field);this.onArrayStart(obj,field,annotation,strValue.length());for (int i=0; i < strValue.length(); i++) {byte value=(byte)strValue.charAt(i);if (reverseBits) {value=JBBPUtils.reverseBitsInByte(value);}this.onFieldByte(obj,field,annotation,signed,value);}} else {assertFieldArray(field);final int len=Array.getLength(array);this.onArrayStart(obj,field,annotation,len);for (int i=0; i < len; i++) {byte value=((Number)Array.get(array,i)).byteValue();if (reverseBits) {value=JBBPUtils.reverseBitsInByte(value);}this.onFieldByte(obj,field,annotation,signed,value);}}this.onArrayEnd(obj,field,annotation);}break;case SHORT_ARRAY:case USHORT_ARRAY:{final boolean signed=type == BinType.SHORT_ARRAY;if (fieldType == String.class) {final String str=(String)readFieldValue(obj,field);this.onArrayStart(obj,field,annotation,str.length());for (int i=0; i < str.length(); i++) {short value=(short)str.charAt(i);if (reverseBits) {value=(short)JBBPFieldShort.reverseBits(value);}this.onFieldShort(obj,field,annotation,signed,value);}} else {assertFieldArray(field);final int len=Array.getLength(array);this.onArrayStart(obj,field,annotation,len);if (fieldType.getComponentType() == char.class) {for (int i=0; i < len; i++) {short value=(short)((Character)Array.get(array,i)).charValue();if (reverseBits) {value=(short)JBBPFieldShort.reverseBits(value);}this.onFieldShort(obj,field,annotation,signed,value);}} else {for (int i=0; i < len; i++) {short value=((Number)Array.get(array,i)).shortValue();if (reverseBits) {value=(short)JBBPFieldShort.reverseBits(value);}this.onFieldShort(obj,field,annotation,signed,value);}}this.onArrayEnd(obj,field,annotation);}}break;case INT_ARRAY:{assertFieldArray(field);final int len=Array.getLength(array);this.onArrayStart(obj,field,annotation,len);if (fieldType.getComponentType() == float.class) {for (int i=0; i < len; i++) {int value=Float.floatToIntBits(Array.getFloat(array,i));if (reverseBits) {value=(int)JBBPFieldInt.reverseBits(value);}this.onFieldInt(obj,field,annotation,value);}} else {for (int i=0; i < len; i++) {int value=((Number)Array.get(array,i)).intValue();if (reverseBits) {value=(int)JBBPFieldInt.reverseBits(value);}this.onFieldInt(obj,field,annotation,value);}}this.onArrayEnd(obj,field,annotation);}break;case LONG_ARRAY:{assertFieldArray(field);final int len=Array.getLength(array);this.onArrayStart(obj,field,annotation,len);if (fieldType.getComponentType() == float.class) {for (int i=0; i < len; i++) {long value=Float.floatToIntBits(Array.getFloat(array,i));if (reverseBits) {value=JBBPFieldLong.reverseBits(value);}this.onFieldLong(obj,field,annotation,value);}} else if (fieldType.getComponentType() == double.class) {for (int i=0; i < len; i++) {long value=Double.doubleToLongBits(Array.getDouble(array,i));if (reverseBits) {value=JBBPFieldLong.reverseBits(value);}this.onFieldLong(obj,field,annotation,value);}} else {for (int i=0; i < len; i++) {long value=((Number)Array.get(array,i)).longValue();if (reverseBits) {value=JBBPFieldLong.reverseBits(value);}this.onFieldLong(obj,field,annotation,value);}}this.onArrayEnd(obj,field,annotation);}break;case STRUCT_ARRAY:{assertFieldArray(field);final int len=Array.getLength(array);this.onArrayStart(obj,field,annotation,len);for (int i=0; i < len; i++) {this.processObject(Array.get(array,i),field,customFieldProcessor);}this.onArrayEnd(obj,field,annotation);}break;default :{throw new Error("Unexpected situation for field type, contact developer [" + type + ']');}}}break;}}}  }
class C{  public void pushPackage(final byte[] p){  packages.add(p);synchronized (packages) {    packages.notifyAll();  }}  }
class C{  public final void testEqualsObject06(){  assertFalse(new ECFieldF2m(2000).equals(null));}  }
class C{  public void testVirtualDestinationsWithWildcardWithIndividualVirtualQueue() throws Exception {  startAllBrokers();  sendReceive("local.test.1",true,"Consumer.a.local.test.1",false,1,1);  sendReceive("local.test.1",true,"Consumer.a.local.test.>",false,1,1);  sendReceive("global.test.1",true,"Consumer.a.global.test.1",false,1,1);  sendReceive("global.test.1",true,"Consumer.a.global.test.>",false,1,1);  destroyAllBrokers();}  }
class C{  public GalicianAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  @NotNull public Pair<String,Integer> print(@NotNull String s,@NotNull ConsoleViewContentType contentType,@Nullable HyperlinkInfo info){  int numberOfSymbolsToProceed=s.length();  int trimmedSymbolsNumber=myDeferredOutputLength;  if (contentType != ConsoleViewContentType.USER_INPUT) {    numberOfSymbolsToProceed=trimDeferredOutputIfNecessary(s.length());    trimmedSymbolsNumber-=myDeferredOutputLength;  } else {    trimmedSymbolsNumber=0;  }  if (numberOfSymbolsToProceed <= 0) {    return new Pair<String,Integer>("",0);  }  if (numberOfSymbolsToProceed < s.length()) {    s=s.substring(s.length() - numberOfSymbolsToProceed);  }  myDeferredTypes.add(contentType);  s=StringUtil.convertLineSeparators(s,true);  myDeferredOutputLength+=s.length();  StringBuilder bufferToUse;  if (myDeferredOutput.isEmpty()) {    myDeferredOutput.add(bufferToUse=new StringBuilder(myCyclicBufferUnitSize));  } else {    bufferToUse=myDeferredOutput.getLast();  }  int offset=0;  while (offset < s.length()) {    if (bufferToUse.length() >= myCyclicBufferUnitSize) {      myDeferredOutput.add(bufferToUse=new StringBuilder(myCyclicBufferUnitSize));    }    if (bufferToUse.length() < myCyclicBufferUnitSize) {      int numberOfSymbolsToAdd=Math.min(myCyclicBufferUnitSize - bufferToUse.length(),s.length() - offset);      bufferToUse.append(s.substring(offset,offset + numberOfSymbolsToAdd));      offset+=numberOfSymbolsToAdd;    }  }  if (contentType == ConsoleViewContentType.USER_INPUT) {    myDeferredUserInput.append(s);  }  ConsoleUtil.addToken(s.length(),info,contentType,myDeferredTokens);  return new Pair<String,Integer>(s,trimmedSymbolsNumber);}  }
class C{  public Activity run(String key){  Activity a=get(key);  if (a != null)   ActivityManager.scheduleNow(a);  return a;}  }
class C{  public List<CustomHandler> customHandlers(){  return subresources().customHandlers();}  }
class C{  @Override public Version version(){  return PackageVersion.VERSION;}  }
class C{  public GermanNormalizationFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public TaskList deactivateApplicationSnapshot(URI id,VolumeGroupSnapshotOperationParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_DEACTIVATE_SNAPSHOT_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  @Override public void run(){  amIActive=true;  String pointerHeader, DEMHeader, outputHeader;  int row, col, x, y;  int progress;  int c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  boolean flag;  double flowDir, flowLength, flowLengthThroughCell;  double zSt, zCurrent, zLastCell;  double rad2Deg=180.0 / Math.PI;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  pointerHeader=args[0];  DEMHeader=args[1];  outputHeader=args[2];  double d=Double.parseDouble(args[3]);  if (d <= 0) {    showFeedback("The vertical drop parameter must be set to a positive numerical value.");    return;  }  String outputType=args[4].toLowerCase().trim();  if (pointerHeader.isEmpty() || DEMHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pointer=new WhiteboxRaster(pointerHeader,"r");    int rows=pointer.getNumberRows();    int cols=pointer.getNumberColumns();    double noData=pointer.getNoDataValue();    double gridResX=pointer.getCellSizeX();    double gridResY=pointer.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster dem=new WhiteboxRaster(DEMHeader,"r");    if (dem.getNumberColumns() != cols || dem.getNumberRows() != rows) {      showFeedback("Each of the input images must have the same dimensions (i.e. rows and columns).");      return;    }    double demNoData=dem.getNoDataValue();    if (pointer.getXYUnits().toLowerCase().contains("deg") || dem.getXYUnits().toLowerCase().contains("deg")) {      double p1=111412.84;      double p2=-93.5;      double p3=0.118;      double lat=Math.toRadians((pointer.getNorth() - pointer.getSouth()) / 2.0);      double longlen=(p1 * Math.cos(lat)) + (p2 * Math.cos(3 * lat)) + (p3 * Math.cos(5 * lat));      for (int i=0; i < 8; i++) {        gridLengths[i]=gridLengths[i] * longlen;      }    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);switch (outputType) {case "tangent":      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {            zSt=dem.getValue(row,col);            flag=false;            x=col;            y=row;            flowLength=0;            do {              zLastCell=dem.getValue(row,col);              flowDir=pointer.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                x+=dX[c];                y+=dY[c];                zCurrent=dem.getValue(y,x);                if (zCurrent != demNoData) {                  if ((zSt - zCurrent) < d) {                    flowLength+=gridLengths[c];                  } else {                    flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);                    flowLength+=flowLengthThroughCell;                    output.setValue(row,col,d / flowLength);                    flag=true;                  }                } else {                  if (flowLength > 0) {                    output.setValue(row,col,(zSt - zLastCell) / flowLength);                  } else {                    output.setValue(row,col,noData);                  }                  flag=true;                }              } else {                if (flowLength > 0) {                  output.setValue(row,col,(zSt - zLastCell) / flowLength);                } else {                  output.setValue(row,col,noData);                }                flag=true;              }            } while (!flag);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }    break;case "degrees":  for (row=0; row < rows; row++) {    for (col=0; col < cols; col++) {      if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {        zSt=dem.getValue(row,col);        flag=false;        x=col;        y=row;        flowLength=0;        do {          zLastCell=dem.getValue(row,col);          flowDir=pointer.getValue(y,x);          if (flowDir > 0) {            c=(int)(Math.log(flowDir) / LnOf2);            x+=dX[c];            y+=dY[c];            zCurrent=dem.getValue(y,x);            if (zCurrent != demNoData) {              if ((zSt - zCurrent) < d) {                flowLength+=gridLengths[c];              } else {                flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);                flowLength+=flowLengthThroughCell;                output.setValue(row,col,Math.atan(d / flowLength) * rad2Deg);                flag=true;              }            } else {              if (flowLength > 0) {                output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength) * rad2Deg);              } else {                output.setValue(row,col,noData);              }              flag=true;            }          } else {            if (flowLength > 0) {              output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength) * rad2Deg);            } else {              output.setValue(row,col,noData);            }            flag=true;          }        } while (!flag);      }    }    if (cancelOp) {      cancelOperation();      return;    }    progress=(int)(100f * row / (rows - 1));    updateProgress(progress);  }break;case "radians":for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {  if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {    zSt=dem.getValue(row,col);    flag=false;    x=col;    y=row;    flowLength=0;    do {      zLastCell=dem.getValue(row,col);      flowDir=pointer.getValue(y,x);      if (flowDir > 0) {        c=(int)(Math.log(flowDir) / LnOf2);        x+=dX[c];        y+=dY[c];        zCurrent=dem.getValue(y,x);        if (zCurrent != demNoData) {          if ((zSt - zCurrent) < d) {            flowLength+=gridLengths[c];          } else {            flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);            flowLength+=flowLengthThroughCell;            output.setValue(row,col,Math.atan(d / flowLength));            flag=true;          }        } else {          if (flowLength > 0) {            output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength));          } else {            output.setValue(row,col,noData);          }          flag=true;        }      } else {        if (flowLength > 0) {          output.setValue(row,col,Math.atan((zSt - zLastCell) / flowLength));        } else {          output.setValue(row,col,noData);        }        flag=true;      }    } while (!flag);  }}if (cancelOp) {  cancelOperation();  return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}break;case "distance":for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {if (pointer.getValue(row,col) != noData && dem.getValue(row,col) != demNoData) {zSt=dem.getValue(row,col);flag=false;x=col;y=row;flowLength=0;do {  zLastCell=dem.getValue(row,col);  flowDir=pointer.getValue(y,x);  if (flowDir > 0) {    c=(int)(Math.log(flowDir) / LnOf2);    x+=dX[c];    y+=dY[c];    zCurrent=dem.getValue(y,x);    if (zCurrent != demNoData) {      if ((zSt - zCurrent) < d) {        flowLength+=gridLengths[c];      } else {        flowLengthThroughCell=gridLengths[c] * (zLastCell - (zSt - d)) / (zLastCell - zCurrent);        flowLength+=flowLengthThroughCell;        output.setValue(row,col,flowLength);        flag=true;      }    } else {      if (flowLength > 0) {        output.setValue(row,col,flowLength);      } else {        output.setValue(row,col,noData);      }      flag=true;    }  } else {    if (flowLength > 0) {      output.setValue(row,col,flowLength);    } else {      output.setValue(row,col,noData);    }    flag=true;  }} while (!flag);}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress(progress);}break;}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());pointer.close();dem.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  @Override public String generateStart(){  StringBuffer result;  int i;  result=new StringBuffer();  result.append("%\n");  result.append("% centroids:\n");  for (i=0; i < getNumCentroids(); i++) {    result.append("% " + i + ".: "+ Utils.arrayToString(m_centroids[i])+ "\n");  }  result.append("%\n");  result.append("% centroidClasses: " + Utils.arrayToString(m_centroidClasses) + "\n");  result.append("%\n");  result.append("% centroidWeights: " + Utils.arrayToString(m_centroidWeights) + "\n");  result.append("%\n");  result.append("% centroidStdDevs: " + Utils.arrayToString(m_centroidStdDevs) + "\n");  result.append("%\n");  return result.toString();}  }
class C{  private boolean parseArguments(String[] args){  boolean requestDetails=false;  for (int i=0; i < args.length; i++) {    if (args[i].equals("-user") && i + 1 < args.length) {      i++;      username=args[i];    } else     if (args[i].equals("-pass") && i + 1 < args.length) {      i++;      password=args[i];    } else     if (args[i].equals("-l") && i + 1 < args.length) {      i++;      option.setLanguage(args[i]);      if (args[i].equals("?"))       requestDetails=true;    } else     if (args[i].equals("-cl") && i + 1 < args.length) {      i++;      option.setCountryLang(args[i]);      if (args[i].equals("?"))       requestDetails=true;    } else     if (args[i].equals("-s")) {      option.setReadSubdirs(true);    } else     if (args[i].equals("-S") && i + 1 < args.length) {      i++;      option.setPathToFiles(args[i]);    } else     if (args[i].equals("-p") && i + 1 < args.length) {      i++;      suffixes=args[i].split(",");      option.setSuffixes(suffixes);    } else     if (args[i].equals("-t") && i + 1 < args.length) {      i++;      try {        option.setMinimumMatchLength(Integer.parseInt(args[i]));      } catch (      NumberFormatException e) {        System.out.println("Illegal minimum match length: " + args[i] + "\nMust be an integer!");        return false;      }    } else     if (args[i].equals("-m") && i + 1 < args.length) {      i++;      option.setStoreMatches(args[i]);    } else     if (args[i].equals("-bc") && i + 1 < args.length) {      i++;      option.setBasecodeDir(args[i]);    } else     if (args[i].equals("-r") && i + 1 < args.length) {      i++;      resultDirName=args[i];    } else     if (args[i].equals("-title") && i + 1 < args.length) {      i++;      option.setTitle(args[i]);    } else     if (args[i].equals("-list")) {      listSubmissions=true;    } else     if (args[i].equals("-download")) {      if (i + 1 < args.length && Character.isDigit(args[i + 1].charAt(0))) {        i++;        try {          downloadResultNumber=Integer.parseInt(args[i]);        } catch (        NumberFormatException e) {          System.out.println("Illegal download number: " + args[i] + "\nMust be an positive integer!");          return false;        }      } else       downloadResultNumber=1;    } else     if (args[i].equals("-cancel")) {      if (i + 1 < args.length && Character.isDigit(args[i + 1].charAt(0))) {        i++;        try {          cancelSubmissionNumber=Integer.parseInt(args[i]);        } catch (        NumberFormatException e) {          System.out.println("Illegal cancel number: " + args[i] + "\nMust be an positive integer!");          return false;        }      } else       cancelSubmissionNumber=1;    } else     if (args[i].startsWith("-")) {      System.out.println("Unknown option: " + args[i]);      return false;    } else {      if (option.getOriginalDir() != null) {        System.out.println("The rootdir has already been defined " + "as \"" + option.getOriginalDir() + "\"!");        return false;      }      option.setOriginalDir(args[i]);    }  }  boolean valid=true;  if (username == null) {    System.out.println("Username is missing!");    valid=false;  }  if (password == null) {    System.out.println("Password is missing!");    valid=false;  }  if (!requestDetails && !listSubmissions && downloadResultNumber == 0 && cancelSubmissionNumber == 0 && option.getOriginalDir() == null) {    System.out.println("You must specify either a \"root-dir\", the " + "\"-list\", the \"-download\"\nor the \"-cancel\" option!");    valid=false;  }  return valid;}  }
class C{  public void afterLast() throws SQLException {  checkState();  rs.afterLast();  notifyCursorMoved();}  }
class C{  public static LineNumberNode findLineNumberForInstruction(InsnList insnList,AbstractInsnNode insnNode){  Validate.notNull(insnList);  Validate.notNull(insnNode);  int idx=insnList.indexOf(insnNode);  Validate.isTrue(idx != -1);  ListIterator<AbstractInsnNode> insnIt=insnList.iterator(idx);  while (insnIt.hasPrevious()) {    AbstractInsnNode node=insnIt.previous();    if (node instanceof LineNumberNode) {      return (LineNumberNode)node;    }  }  return null;}  }
class C{  public ColladaColor(String ns){  super(ns);}  }
class C{  public int allowed_modifier_changes(){  String s=soot.PhaseOptions.getString(options,"allowed-modifier-changes");  if (s.equalsIgnoreCase("unsafe"))   return allowed_modifier_changes_unsafe;  if (s.equalsIgnoreCase("safe"))   return allowed_modifier_changes_safe;  if (s.equalsIgnoreCase("none"))   return allowed_modifier_changes_none;  throw new RuntimeException("Invalid value " + s + " of phase option allowed-modifier-changes");}  }
class C{  protected final void fireVetoableChange(String propertyName,int oldValue,int newValue) throws PropertyVetoException {  VetoableChangeSupport aVetoSupport=this.vetoSupport;  if (aVetoSupport == null) {    return;  }  aVetoSupport.fireVetoableChange(propertyName,Integer.valueOf(oldValue),Integer.valueOf(newValue));}  }
class C{  public ImplInvite(ImplDiscordAPI api,JSONObject data){  this.api=api;  this.code=data.getString("code");  this.serverId=data.getJSONObject("guild").getString("id");  this.serverName=data.getJSONObject("guild").getString("name");  this.channelId=data.getJSONObject("channel").getString("id");  this.channelName=data.getJSONObject("channel").getString("name");  this.voice=!data.getJSONObject("channel").getString("type").equals("text");  if (data.has("max_age")) {    this.maxAge=data.getInt("max_age");  }  if (data.has("revoked")) {    this.revoked=data.getBoolean("revoked");  }  if (data.has("created_at")) {    String time=data.getString("created_at");    Calendar calendar=Calendar.getInstance();synchronized (FORMAT) {      try {        calendar.setTime(FORMAT.parse(time.substring(0,time.length() - 9)));      } catch (      ParseException ignored) {        try {          calendar.setTime(FORMAT_ALTERNATIVE.parse(time.substring(0,time.length() - 9)));        } catch (        ParseException ignored2) {          try {            calendar.setTime(FORMAT_ALTERNATIVE_TWO.parse(time.substring(0,time.length() - 9)));          } catch (          ParseException e) {            logger.warn("Could not parse timestamp {}. Please contact the developer!",time,e);          }        }      }    }    creationDate=calendar;  }  if (data.has("temporary")) {    this.temporary=data.getBoolean("temporary");  }  if (data.has("uses")) {    this.uses=data.getInt("uses");  }  if (data.has("max_uses")) {    this.maxUses=data.getInt("max_uses");    if (this.maxUses == 0) {      this.maxUses=-1;    }  }  if (data.has("inviter")) {    this.creator=api.getOrCreateUser(data.getJSONObject("inviter"));  }}  }
class C{  static void notifcation(Context context,String messageString,Intent intent,int notificationTitle){  String ns=Context.NOTIFICATION_SERVICE;  NotificationManager mNotificationManager=(NotificationManager)context.getSystemService(ns);  Calendar.getInstance().getTime().toString();  long when=System.currentTimeMillis();  CharSequence contentTitle=context.getString(notificationTitle);  String ticker=contentTitle + " " + messageString;  PendingIntent pendingIntent=PendingIntent.getActivity(context,Constants.showHistory,intent,0);  Builder notificationCompat=new Builder(context);  notificationCompat.setAutoCancel(true).setContentTitle(contentTitle).setContentIntent(pendingIntent).setContentText(messageString).setTicker(ticker).setWhen(when).setSmallIcon(R.drawable.ic_launcher);  Notification notification=notificationCompat.build();  mNotificationManager.notify(MessageID,notification);  MessageID++;}  }
class C{  public static boolean isLoaded(){  return s_loaded;}  }
class C{  public final String toFriendlyString(){  return "(" + (getX() + 1) + ", "+ (getY() + 1)+ ")";}  }
class C{  public DelphiRuleViolation(DelphiRule rule,RuleContext ctx,DelphiPMDNode node,String message){  this.rule=rule;  this.filename=ctx.getSourceCodeFile().getAbsolutePath();  this.description=message;  if (node != null) {    Tree classTypeNode=node.getAncestor(DelphiLexer.TkNewType);    if (classTypeNode != null) {      Tree classNameNode=classTypeNode.getChild(0);      className=classNameNode.getText();    } else {      className="";    }    Tree methodNode=node.getAncestor(DelphiLexer.FUNCTION);    if (methodNode == null) {      methodNode=node.getAncestor(DelphiLexer.PROCEDURE);    }    if (methodNode == null) {      Tree currentNode=node;      Tree beginNode=null;      while ((beginNode=currentNode.getAncestor(DelphiLexer.BEGIN)) != null) {        Tree parent=beginNode.getParent();        currentNode=parent;        int index=beginNode.getChildIndex();        for (int lookBack=1; lookBack <= 2; ++lookBack) {          if (index - lookBack > -1 && isProcedureOrFunction(parent.getChild(index - lookBack).getType())) {            methodNode=parent.getChild(index - lookBack);            break;          }          if (methodNode != null) {            break;          }        }      }    }    if (methodNode != null) {      StringBuilder name=new StringBuilder();      Tree nameNode=((CommonTree)methodNode).getFirstChildWithType(DelphiLexer.TkFunctionName);      for (int i=0; i < nameNode.getChildCount(); ++i) {        name.append(nameNode.getChild(i).getText());      }      methodName=name.toString();      if (nameNode.getChildCount() > 1) {        className=nameNode.getChild(0).getText();      }    } else {      methodName="";    }    packageName="";    beginLine=node.getLine();    endLine=beginLine;    beginColumn=node.getCharPositionInLine();    endColumn=beginColumn;  } else {    className="";    methodName="";    packageName="";    filename="";  }}  }
class C{  public void True(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public boolean hasGraphicsNodeBridge(Element element){  if (namespaceURIMap == null || element == null) {    return false;  }  String localName=element.getLocalName();  String namespaceURI=element.getNamespaceURI();  namespaceURI=((namespaceURI == null) ? "" : namespaceURI);  HashMap localNameMap=(HashMap)namespaceURIMap.get(namespaceURI);  if (localNameMap == null) {    return false;  }  return (localNameMap.get(localName) instanceof GraphicsNodeBridge);}  }
class C{  public double nextDouble(boolean includeZero,boolean includeOne){  double d=0.0;  do {    d=nextDouble();    if (includeOne && nextBoolean())     d+=1.0;  } while ((d > 1.0) || (!includeZero && d == 0.0));  return d;}  }
class C{  public Vector4d lerp(Vector4dc other,double t){  return lerp(other,t,this);}  }
class C{  public void normal(float nx,float ny,float nz){  normalX=nx;  normalY=ny;  normalZ=nz;  if (shape != 0) {    if (normalMode == NORMAL_MODE_AUTO) {      normalMode=NORMAL_MODE_SHAPE;    } else     if (normalMode == NORMAL_MODE_SHAPE) {      normalMode=NORMAL_MODE_VERTEX;    }  }}  }
class C{  public List<GroupRemoveDeviceDB> queryDeep(String where,String... selectionArg){  Cursor cursor=db.rawQuery(getSelectDeep() + where,selectionArg);  return loadDeepAllAndCloseCursor(cursor);}  }
class C{  public static void writeElement(final XMLStreamWriter writer,final String elementName,final String value) throws XMLStreamException {  if (value == null) {    return;  }  writer.writeStartElement(elementName);  writer.writeCharacters(value);  writer.writeEndElement();}  }
class C{  TypeNode typeNode(int id,Type type,ClassHierarchy hierarchy){  if (type == null || hierarchy == null) {    throw new InternalTypingException();  }  this.id=id;  this.hierarchy=hierarchy;  type.apply(this);  return result;}  }
class C{  public boolean isExternal(){  return this.external;}  }
class C{  public void ret(final int local){  mv.visitVarInsn(Opcodes.RET,local);}  }
class C{  private E advance(){  lastRet=nextNode;  E x=nextItem;  Node<E> pred, p;  if (nextNode == null) {    p=first();    pred=null;  } else {    pred=nextNode;    p=succ(nextNode);  }  for (; ; ) {    if (p == null) {      nextNode=null;      nextItem=null;      return x;    }    E item=p.item;    if (item != null) {      nextNode=p;      nextItem=item;      return x;    } else {      Node<E> next=succ(p);      if (pred != null && next != null)       pred.casNext(p,next);      p=next;    }  }}  }
class C{  @Override public int hashCode(){  int result;  result=this.data.hashCode();  result=29 * result + (this.workingCalendar != null ? this.workingCalendar.hashCode() : 0);  result=29 * result + (this.xPosition != null ? this.xPosition.hashCode() : 0);  result=29 * result + (this.domainIsPointsInTime ? 1 : 0);  return result;}  }
class C{  public static Expression compile(String sourceText) throws ParseException {  return new JavascriptCompiler(sourceText).compileExpression(JavascriptCompiler.class.getClassLoader());}  }
class C{  public synchronized void connect(BluetoothDevice bluetoothDevice){  Log.d(TAG,"connect to: " + bluetoothDevice);  cancelThreads();  connectThread=new ConnectThread(bluetoothDevice);  connectThread.start();  setState(Sensor.SensorState.CONNECTING);}  }
class C{  public ToStringBuilder append(final byte value){  style.append(buffer,null,value);  return this;}  }
class C{  public ListenerWrapper(final ITraceManagerListener listener){  this.listener=Preconditions.checkNotNull(listener,"IE00773: Listener argument can not be null");}  }
class C{  public long reserveWritingPosition(long writeSize){  while (true) {    long writingPosition=nextWritingPosition.get();    if (nextWritingPosition.compareAndSet(writingPosition,writingPosition + writeSize)) {      return writingPosition;    }  }}  }
class C{  public void preparePaymentRequest(PaymentRequest paymentRequest,Context context,OnPaymentRequestPreparedListener listener){  if (paymentRequest == null) {    throw new InvalidParameterException("Error preparing pamyentrequest, paymentRequest may not be null");  }  if (context == null) {    throw new InvalidParameterException("Error preparing pamyentrequest, context may not be null");  }  if (listener == null) {    throw new InvalidParameterException("Error preparing pamyentrequest, listener may not be null");  }  Map<String,String> metaData=communicator.getMetadata(context);  GcSessionEncryptionHelper gcSessionEncryptionHelper=new GcSessionEncryptionHelper(paymentRequest,clientSessionId,metaData,listener);  getPublicKey(context,gcSessionEncryptionHelper);}  }
class C{  public void finaliseAddObservations(){  totalObservations=0;  for (  double[] destination : vectorOfDestinationObservations) {    totalObservations+=destination.length - k;  }  timeSeriesIndex=new int[totalObservations];  timeStepIndex=new int[totalObservations];  int obs=0;  int currentTimeSeriesIndex=0;  double sumDest=0.0, sumSqDest=0.0, sumSource=0.0, sumSqSource=0.0;  Iterator<double[]> iterator=vectorOfSourceObservations.iterator();  for (  double[] destination : vectorOfDestinationObservations) {    for (int t=k; t < destination.length; t++) {      timeSeriesIndex[obs]=currentTimeSeriesIndex;      timeStepIndex[obs++]=t;    }    currentTimeSeriesIndex++;    if (normalise) {      double[] source=iterator.next();      for (int t=0; t < k - 1; t++) {        sumDest+=destination[t];        sumSqDest+=destination[t] * destination[t];      }      for (int t=k - 1; t < destination.length - 1; t++) {        sumDest+=destination[t];        sumSqDest+=destination[t] * destination[t];        sumSource+=source[t];        sumSqSource+=source[t] * source[t];      }      sumDest+=destination[destination.length - 1];      sumSqDest+=destination[destination.length - 1] * destination[destination.length - 1];    }  }  if (normalise) {    double meanDest=sumDest / (double)totalObservations;    double meanSource=sumSource / (double)totalObservations;    double meanSqDest=sumSqDest / (double)totalObservations;    double meanSqSource=sumSqSource / (double)totalObservations;    double stdDest=Math.sqrt(meanSqDest - meanDest * meanDest);    double stdSource=Math.sqrt(meanSqSource - meanSource * meanSource);    epsDest=epsilon * stdDest;    epsSource=epsilon * stdSource;  } else {    epsDest=epsilon;    epsSource=epsilon;  }  addedMoreThanOneObservationSet=vectorOfDestinationObservations.size() > 1;  if (addedMoreThanOneObservationSet && dynCorrExcl) {  }}  }
class C{  public boolean isPDFLicense(){  String key=getSummary();  return key != null && key.length() > 25;}  }
class C{  public synchronized void mark(int readlimit){  marklimit=readlimit;  markpos=pos;}  }
class C{  public boolean match(AnnotationTypeMemberDeclaration node,Object other){  if (!(other instanceof AnnotationTypeMemberDeclaration)) {    return false;  }  AnnotationTypeMemberDeclaration o=(AnnotationTypeMemberDeclaration)other;  return (safeSubtreeMatch(node.getJavadoc(),o.getJavadoc()) && safeSubtreeListMatch(node.modifiers(),o.modifiers()) && safeSubtreeMatch(node.getType(),o.getType())&& safeSubtreeMatch(node.getName(),o.getName())&& safeSubtreeMatch(node.getDefault(),o.getDefault()));}  }
class C{  private static void acc_multiplyDigit(AccurateValue n1,int d,AccurateValue result){  AccurateValue n2=new AccurateValue();  n2.digits=new int[n1.digits.length];  n2.digits[n2.digits.length - 1]=d;  n2.sign=1;  acc_multiply(n2,n1,result);}  }
class C{  private static void orderMatches(List<Variable> typeMatches,String paramName){  if (typeMatches != null)   Collections.sort(typeMatches,new MatchComparator(paramName));}  }
class C{  public void play(@Nullable List<I> items,@IntRange(from=0) int startPosition,@IntRange(from=0) int playbackPosition,boolean startPaused){  setParameters(items,startPosition);  play(playbackPosition,startPaused);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","sziitxy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public SensorMatrixEditorException(){  super();}  }
class C{  private void generateRoundTripVectorDrawable() throws IOException {  CustomLogger.log("Generating the following file " + animatedVectorRoundTrip);  String fileName;  for (int i=0; i < vectors.size() - 1; i++) {    currentVectorFileName=vectors.get(i).getFileName();    File animatedRoundTripVectorFile=new File(drawableFolder,animatedVectorRoundTrip.replace("#fileName",currentVectorFileName));    BufferedWriter animatedRoundTripBW=createIt(animatedRoundTripVectorFile);    CustomLogger.log("Generating the following file " + animatedRoundTripVectorFile.getAbsolutePath());    animatedRoundTripBW.write(levellist_start);    animatedRoundTripBW.newLine();    animatedRoundTripBW.write(levellist_item.replace("#itemNumber","" + 0).replace("#animatedVectorName",animatedVectorSimpleName.replace("#fileName",currentVectorFileName)));    animatedRoundTripBW.newLine();    animatedRoundTripBW.write(levellist_item.replace("#itemNumber","" + 1).replace("#animatedVectorName",animatedVectorSimpleName.replace("#fileName",currentVectorFileName + reverse)));    animatedRoundTripBW.newLine();    animatedRoundTripBW.write(levellist_end);    animatedRoundTripBW.flush();    animatedRoundTripBW.close();  }}  }
class C{  public static String generateMIN(DbColumnDef colDef,String alias){  StringBuffer sql=new StringBuffer(" MIN(").append(colDef.getQualifiedName()).append(") AS ").append(alias).append(" ");  return sql.toString();}  }
class C{  @Override public void handlePOST(CoapExchange exchange){  exchange.accept();synchronized (this) {    try {      Thread.sleep(5000);    } catch (    Exception e) {      e.printStackTrace();    }    exchange.respond(ResponseCode.CONTENT,"Your POST request has been handled by one of my " + getThreadCount() + " threads: "+ Thread.currentThread().getName());  }}  }
class C{  @Override public void onPageFinished(WebView view,String url){  super.onPageFinished(view,url);  if (!isCurrentlyLoading && !url.startsWith("about:")) {    return;  }  isCurrentlyLoading=false;  if (this.doClearHistory) {    view.clearHistory();    this.doClearHistory=false;  }  parentEngine.client.onPageFinishedLoading(url);}  }
