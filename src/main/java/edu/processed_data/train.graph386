class C{  private void noteNewMember(GemFireVM member){  InetAddress hostIpAddress=member.getHost();  List members=(List)this.hostMembers.get(hostIpAddress);  if (members == null) {    members=new ArrayList();    this.hostMembers.put(hostIpAddress,members);  }  members.add(member);}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  public static byte[] toCachedBytes(String str){  byte[] bytes=cache.getIfPresent(str);  if (bytes == null) {    bytes=toBytes(str);    cache.put(str,bytes);  }  return bytes;}  }
class C{  public void addIndicationListener(TransportAddress localAddr,MessageEventHandler indicationListener){  eventDispatcher.addIndicationListener(localAddr,indicationListener);}  }
class C{  public T caseConfigurationSource(ConfigurationSource object){  return null;}  }
class C{  public static OptionBuilder isRequired(boolean newRequired){  OptionBuilder.required=newRequired;  return instance;}  }
class C{  public T caseExternalDefinition_(ExternalDefinition_ object){  return null;}  }
class C{  synchronized void startTimer(Object source){  this.source=source;  notify();}  }
class C{  public Line(){}  }
class C{  public void markRow(final int rowIndex,final boolean valid){  validRows.set(rowIndex,valid);}  }
class C{  private short[] makeMessageRepresentative(byte[] message){  short[] output=new short[this.signableDocumentLength];  int h=0;  int i=0;  do {    if (i >= message.length) {      break;    }    output[i]=(short)message[h];    output[i]&=(short)0xff;    h++;    i++;  } while (i < output.length);  return output;}  }
class C{  public ZyGraphDisplaySettings(final ZyGraphDisplaySettings settings){  m_type=null;  m_animationSpeed=settings.getAnimationSpeed();  m_gradientBackground=settings.getGradientBackground();  m_showFunctionNodeInformation=settings.getFunctionNodeInformation();  m_simplifiedVariableAccess=settings.getSimplifiedVariableAccess();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.489 -0500",hash_original_method="ABD9DF23A5A8A0A83F11C474E2CAFB17",hash_generated_method="196266A25FB1B61B7E293883A2B18682") public void putStringArrayList(String key,ArrayList<String> value){  unparcel();  mMap.put(key,value);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix02.class,args);}  }
class C{  public BindingsConfigurationProvider define(URL url){  elements.add(new YamlBindingsUrl(url));  return this;}  }
class C{  public static ComponentUI createUI(JComponent h){  return new SynthTableHeaderUI();}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5,K k6,V v6,K k7,V v7){  Map map=of();  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  map.put(k4,v4);  map.put(k5,v5);  map.put(k6,v6);  map.put(k7,v7);  return map;}  }
class C{  public static int prepareInt(Object object,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return -1;}  }
class C{  public void testPreferredUnitsRecording_chart(){  testPreferredUnitsRecording(R.string.track_detail_chart_tab);}  }
class C{  protected int unwrapKey(Object key){  return ((Integer)key).intValue();}  }
class C{  public static Switch normallyClosed(int channel){  DigitalInput input=new DigitalInput(channel);  return null;}  }
class C{  @Override public void updateClassifier(BayesNet bayesNet,Instance instance) throws Exception {  for (int iAttribute=0; iAttribute < bayesNet.m_Instances.numAttributes(); iAttribute++) {    double iCPT=0;    for (int iParent=0; iParent < bayesNet.getParentSet(iAttribute).getNrOfParents(); iParent++) {      int nParent=bayesNet.getParentSet(iAttribute).getParent(iParent);      iCPT=iCPT * bayesNet.m_Instances.attribute(nParent).numValues() + instance.value(nParent);    }    bayesNet.m_Distributions[iAttribute][(int)iCPT].addValue(instance.value(iAttribute),instance.weight());  }}  }
class C{  public static MessageConsole findConsole(){  ConsolePlugin plugin=ConsolePlugin.getDefault();  IConsoleManager conMan=plugin.getConsoleManager();  IConsole[] existing=conMan.getConsoles();  for (  IConsole element : existing) {    if (consoleName.equals(element.getName())) {      return (MessageConsole)element;    }  }  MessageConsole myConsole=new MessageConsole(consoleName,null);  conMan.addConsoles(new IConsole[]{myConsole});  return myConsole;}  }
class C{  protected String computeDefaultDomainName(){  String hostName;  try {    hostName=getDNSServer().getLocalHost().getCanonicalHostName();  } catch (  UnknownHostException ue) {    hostName="localhost";  }  return hostName;}  }
class C{  public void writeOut(Writer out) throws IOException {  if (writer == null) {    out.write(cb,0,nextChar);  }}  }
class C{  public void failRecovery(long id,RecoveryFailedException e,boolean sendShardFailure){  RecoveryStatus removed=onGoingRecoveries.remove(id);  if (removed != null) {    logger.trace("{} failing recovery from {}, id [{}]. Send shard failure: [{}]",removed.shardId(),removed.sourceNode(),removed.recoveryId(),sendShardFailure);    removed.fail(e,sendShardFailure);  }}  }
class C{  public final boolean weakCompareAndSet(int index,short expected,short newValue){  return this.compareAndSet(index,expected,newValue);}  }
class C{  public static <T>void randomSample(List<T> source,List<T> dest,int samples,Random rand){  randomSample((Collection<T>)source,dest,samples,rand);}  }
class C{  public static double max(double x,double y){  return (x >= y) ? x : y;}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0) {    return;  }  mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);  Canvas canvas=new Canvas(mBitmap);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredTypeAccessModifier: ");  result.append(declaredTypeAccessModifier);  result.append(", declaredProvidedByRuntime: ");  result.append(declaredProvidedByRuntime);  result.append(", const: ");  result.append(const_);  result.append(", external: ");  result.append(external);  result.append(')');  return result.toString();}  }
class C{  private synchronized void access(Object key,int hash){  Entry<K,V> e=find(key,hash);  if (e == null || e.value == null) {    return;  }  if (e.isHot()) {    if (e != stack.stackNext) {      if (stackMoveDistance == 0 || stackMoveCounter - e.topMove > stackMoveDistance) {        boolean wasEnd=e == stack.stackPrev;        removeFromStack(e);        if (wasEnd) {          pruneStack();        }        addToStack(e);      }    }  } else {    removeFromQueue(e);    if (e.stackNext != null) {      removeFromStack(e);      convertOldestHotToCold();    } else {      addToQueue(queue,e);    }    addToStack(e);  }}  }
class C{  public Centroid(Geometry geom){  areaBasePt=null;  add(geom);}  }
class C{  public EmoteCondition(final String playerAction){  this.playerAction=playerAction.trim();}  }
class C{  @Override public byte[] serialize(){  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();  }  int optionsLength=0;  if (this.options != null)   optionsLength=this.options.length / 4;  this.headerLength=(byte)(5 + optionsLength);  this.totalLength=(short)(this.headerLength * 4 + ((payloadData == null) ? 0 : payloadData.length));  byte[] data=new byte[this.totalLength];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.put((byte)(((this.version & 0xf) << 4) | (this.headerLength & 0xf)));  bb.put(this.diffServ);  bb.putShort(this.totalLength);  bb.putShort(this.identification);  bb.putShort((short)(((this.flags & IPV4_FLAGS_MASK) << IPV4_FLAGS_SHIFT) | (this.fragmentOffset & IPV4_OFFSET_MASK)));  bb.put(this.ttl);  bb.put((byte)this.protocol.getIpProtocolNumber());  bb.putShort(this.checksum);  bb.putInt(this.sourceAddress.getInt());  bb.putInt(this.destinationAddress.getInt());  if (this.options != null)   bb.put(this.options);  if (payloadData != null)   bb.put(payloadData);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    for (int i=0; i < this.headerLength * 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(10,this.checksum);  }  return data;}  }
class C{  public void shutdown(){  group.shutdownGracefully();  if (flushTask != null) {    flushTask.cancel();  }}  }
class C{  @Override public int intValue(){  return (int)value;}  }
class C{  static public NetLocator newLocatorHandler(InetAddress bindAddress,File stateFile,String locatorString,boolean usePreferredCoordinators,boolean networkPartitionDetectionEnabled,LocatorStats stats,String securityUDPDHAlgo){  return services.newLocatorHandler(bindAddress,stateFile,locatorString,usePreferredCoordinators,networkPartitionDetectionEnabled,stats,securityUDPDHAlgo);}  }
class C{  DHCrypt(BigInteger modulus,BigInteger base,SecureRandom random){  this(modulus.bitLength(),new DHParameterSpec(modulus,base),random);}  }
class C{  public int hashCode(){  return (Float.floatToIntBits(extraAlpha) * 31 + rule);}  }
class C{  public ActionBarSearchHandler enableAutoCompletionDynamic(OnSearchDynamicListener onSearchDynamicListener){  mAutoCompletionDynamic=true;  mOnSearchDynamicListener=onSearchDynamicListener;  return this;}  }
class C{  public boolean contains(Vector2D point){  return contains(point.getX(),point.getY());}  }
class C{  public static Encoding find(String value){  return enums.find(value);}  }
class C{  public TransformedString(String originalString,String transformedString,Map<Integer,Integer> mapping){  original=originalString;  transformed=transformedString;  map=mapping;}  }
class C{  private static void testBasic() throws Exception {  try {    Runnable r=null;    r.run();  } catch (  Exception ex) {    verifyFrames(ex.getStackTrace(),"LambdaStackTrace\\..*","LambdaStackTrace.testBasic");  }}  }
class C{  public void markWorkflowBeenCreated(String stepId,String workflowKey){  try {    Workflow workflow=getWorkflowFromStepId(stepId);    if (workflow == null) {      _log.info(String.format("Step %s has already been deleted and therefore cannot mark sub-workflow created, key %s",stepId,workflowKey));      return;    }    WorkflowService.getInstance().storeStepData(stepId,workflowKey,Boolean.TRUE.toString());  } catch (  WorkflowException ex) {    _log.info(String.format("Step %s unable to mark sub-workflow created, key %s",stepId,workflowKey));  }}  }
class C{  public void clear(){  m.clear();}  }
class C{  private boolean isMatchingLinkSettings(ConsistencyGroupLinkSettings linkSettings,GlobalCopyUID prodCopyUID,GlobalCopyUID targetCopyUID){  GlobalCopyUID firstCopy=null;  GlobalCopyUID secondCopy=null;  if (linkSettings.getGroupLinkUID() != null) {    firstCopy=linkSettings.getGroupLinkUID().getFirstCopy();    secondCopy=linkSettings.getGroupLinkUID().getSecondCopy();    if ((RecoverPointUtils.copiesEqual(firstCopy,prodCopyUID) && RecoverPointUtils.copiesEqual(secondCopy,targetCopyUID)) || (RecoverPointUtils.copiesEqual(firstCopy,targetCopyUID) && RecoverPointUtils.copiesEqual(secondCopy,prodCopyUID))) {      return true;    }  }  return false;}  }
class C{  public Xception2(Xception2 other){  __isset_bitfield=other.__isset_bitfield;  this.errorCode=other.errorCode;  if (other.isSetStruct_thing()) {    this.struct_thing=new Xtruct(other.struct_thing);  }}  }
class C{  public EvernoteSession build(String consumerKey,String consumerSecret){  EvernoteSession evernoteSession=new EvernoteSession();  evernoteSession.mConsumerKey=EvernotePreconditions.checkNotEmpty(consumerKey);  evernoteSession.mConsumerSecret=EvernotePreconditions.checkNotEmpty(consumerSecret);  evernoteSession.mAuthenticationResult=AuthenticationResult.fromPreferences(mContext);  return build(evernoteSession);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_TYPING_STRATEGY:    return getTypingStrategy();case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___SET_TYPING_STRATEGY__TYPINGSTRATEGY:  setTypingStrategy((TypingStrategy)arguments.get(0));return null;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_STRUCTURAL_MEMBERS:return getStructuralMembers();case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___GET_TYPE_REF_AS_STRING:return getTypeRefAsString();case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE:return hasPostponedSubstitutionFor((TypeVariable)arguments.get(0));}return super.eInvoke(operationID,arguments);}  }
class C{  private void validateIDRegisterByDistribution(UseCaseConf useCaseConf,Integer bookID,Integer regIdRequest) throws TecDocException, IOException, ServletException {  if (_logger.isDebugEnabled()) {    _logger.debug("validateIDRegisterByDistribution");  }  int size=DistributionSession.getAllDistributionByRegisterAndUser(useCaseConf.getSessionID(),bookID,regIdRequest,useCaseConf.getEntidadId());  if (size <= 0) {    _logger.error("El usuario no tiene permisos para realizar operaciones sobre el registro con FDRID [" + regIdRequest + "] en el libro ["+ bookID+ "]");    throw new BookException(BookException.ERROR_ROW_OUTSIDE);  }}  }
class C{  public static float max(final float a,final float b){  if (Float.isNaN(a)) {    return b;  } else   if (Float.isNaN(b)) {    return a;  } else {    return Math.max(a,b);  }}  }
class C{  private Object readResolve(){  return Weeks.weeks(getValue());}  }
class C{  private List<SimpleSuperMatch> buildSuperMatchList(){  final List<SimpleSuperMatch> superMatchList=new ArrayList<SimpleSuperMatch>();  for (  final SimpleEntry entry : entries) {    if (INCLUDED_TYPES.contains(entry.getType())) {      for (      SimpleSignature simpleSignature : entry.getSignatures()) {        for (        final SimpleLocation location : simpleSignature.getLocations()) {          superMatchList.add(new SimpleSuperMatch(entry,location));        }      }    }  }  return superMatchList;}  }
class C{  public void restart() throws ConnectionException {  if (!stopped) {    return;  }  this.stats=null;  if (directChannel != null) {    this.stats=directChannel.getDMStats();  }  if (this.stats == null) {    this.stats=new LonerDistributionManager.DummyDMStats();  }  try {    this.conTable=ConnectionTable.create(this);  } catch (  IOException io) {    throw new ConnectionException(LocalizedStrings.TCPConduit_UNABLE_TO_INITIALIZE_CONNECTION_TABLE.toLocalizedString(),io);  }  startAcceptor();}  }
class C{  public Map update(byte[] data){  return (new Update(data)).update();}  }
class C{  public void testCreateContainerWhenValidContainerIdButInvalidType(){  factory.registerContainer("dummy",ContainerType.EMBEDDED,EmbeddedLocalContainerStub.class);  try {    factory.createContainer("dummy",ContainerType.INSTALLED,null);    fail("Should have received an exception for the invalid container name");  } catch (  ContainerException expected) {    assertEquals("Cannot create container. There's no registered container for the " + "parameters (container [id = [dummy]], container type [installed]). Valid types " + "for this container are: \n  - embedded",expected.getMessage());  }}  }
class C{  public void testIntsCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.ints(size).parallel().forEach(null);    assertEquals(counter.sum(),size);    size+=524959;  }}  }
class C{  public void mouseEntered(MouseEvent e){  if (AWTEventMonitor.mouseListener_private != null) {    AWTEventMonitor.mouseListener_private.mouseEntered(e);  }}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public static Collection<String> string2Collection(String in,String delimiter,boolean doStrip,Collection<String> collection){  if (in == null) {    return null;  }  if (collection == null) {    collection=new ArrayList<String>();  }  if (delimiter == null || delimiter.length() == 0) {    collection.add(in);    return collection;  }  int fromIndex=0;  int pos;  while ((pos=in.indexOf(delimiter,fromIndex)) >= 0) {    String interim=in.substring(fromIndex,pos);    if (doStrip) {      interim=strip(interim);    }    if (!doStrip || interim.length() > 0) {      collection.add(interim);    }    fromIndex=pos + delimiter.length();  }  String interim=in.substring(fromIndex);  if (doStrip) {    interim=strip(interim);  }  if (!doStrip || interim.length() > 0) {    collection.add(interim);  }  return collection;}  }
class C{  public final void randomize(int[] index,Random random){  for (int j=index.length - 1; j > 0; j--) {    int k=random.nextInt(j + 1);    int temp=index[j];    index[j]=index[k];    index[k]=temp;  }}  }
class C{  @Override protected URLConnection openConnection(URL url) throws IOException {  return new IcyURLConnection(url);}  }
class C{  public void addOperandComment(int pos,String comment){  List<String> list=comments.get(pos);  if (list == null) {    list=new ArrayList<>(1);    comments.put(pos,list);  }  list.add(encodeString(comment));}  }
class C{  public RexNode convertSortExpression(SqlNode expr,Set<SqlKind> flags){switch (expr.getKind()) {case DESCENDING:case NULLS_LAST:case NULLS_FIRST:    flags.add(expr.getKind());  final SqlNode operand=((SqlCall)expr).operand(0);return convertSortExpression(operand,flags);default :return convertExpression(expr);}}  }
class C{  public static Range iterateToFindRangeBounds(CategoryDataset dataset,List visibleSeriesKeys,boolean includeInterval){  ParamChecks.nullNotPermitted(dataset,"dataset");  ParamChecks.nullNotPermitted(visibleSeriesKeys,"visibleSeriesKeys");  double minimum=Double.POSITIVE_INFINITY;  double maximum=Double.NEGATIVE_INFINITY;  int columnCount=dataset.getColumnCount();  if (includeInterval && dataset instanceof BoxAndWhiskerCategoryDataset) {    BoxAndWhiskerCategoryDataset bx=(BoxAndWhiskerCategoryDataset)dataset;    Iterator iterator=visibleSeriesKeys.iterator();    while (iterator.hasNext()) {      Comparable seriesKey=(Comparable)iterator.next();      int series=dataset.getRowIndex(seriesKey);      int itemCount=dataset.getColumnCount();      for (int item=0; item < itemCount; item++) {        Number lvalue=bx.getMinRegularValue(series,item);        if (lvalue == null) {          lvalue=bx.getValue(series,item);        }        Number uvalue=bx.getMaxRegularValue(series,item);        if (uvalue == null) {          uvalue=bx.getValue(series,item);        }        if (lvalue != null) {          minimum=Math.min(minimum,lvalue.doubleValue());        }        if (uvalue != null) {          maximum=Math.max(maximum,uvalue.doubleValue());        }      }    }  } else   if (includeInterval && dataset instanceof IntervalCategoryDataset) {    IntervalCategoryDataset icd=(IntervalCategoryDataset)dataset;    Number lvalue, uvalue;    Iterator iterator=visibleSeriesKeys.iterator();    while (iterator.hasNext()) {      Comparable seriesKey=(Comparable)iterator.next();      int series=dataset.getRowIndex(seriesKey);      for (int column=0; column < columnCount; column++) {        lvalue=icd.getStartValue(series,column);        uvalue=icd.getEndValue(series,column);        if (lvalue != null && !Double.isNaN(lvalue.doubleValue())) {          minimum=Math.min(minimum,lvalue.doubleValue());        }        if (uvalue != null && !Double.isNaN(uvalue.doubleValue())) {          maximum=Math.max(maximum,uvalue.doubleValue());        }      }    }  } else   if (includeInterval && dataset instanceof MultiValueCategoryDataset) {    MultiValueCategoryDataset mvcd=(MultiValueCategoryDataset)dataset;    Iterator iterator=visibleSeriesKeys.iterator();    while (iterator.hasNext()) {      Comparable seriesKey=(Comparable)iterator.next();      int series=dataset.getRowIndex(seriesKey);      for (int column=0; column < columnCount; column++) {        List values=mvcd.getValues(series,column);        Iterator valueIterator=values.iterator();        while (valueIterator.hasNext()) {          Object o=valueIterator.next();          if (o instanceof Number) {            double v=((Number)o).doubleValue();            if (!Double.isNaN(v)) {              minimum=Math.min(minimum,v);              maximum=Math.max(maximum,v);            }          }        }      }    }  } else   if (includeInterval && dataset instanceof StatisticalCategoryDataset) {    StatisticalCategoryDataset scd=(StatisticalCategoryDataset)dataset;    Iterator iterator=visibleSeriesKeys.iterator();    while (iterator.hasNext()) {      Comparable seriesKey=(Comparable)iterator.next();      int series=dataset.getRowIndex(seriesKey);      for (int column=0; column < columnCount; column++) {        Number meanN=scd.getMeanValue(series,column);        if (meanN != null) {          double std=0.0;          Number stdN=scd.getStdDevValue(series,column);          if (stdN != null) {            std=stdN.doubleValue();            if (Double.isNaN(std)) {              std=0.0;            }          }          double mean=meanN.doubleValue();          if (!Double.isNaN(mean)) {            minimum=Math.min(minimum,mean - std);            maximum=Math.max(maximum,mean + std);          }        }      }    }  } else {    Iterator iterator=visibleSeriesKeys.iterator();    while (iterator.hasNext()) {      Comparable seriesKey=(Comparable)iterator.next();      int series=dataset.getRowIndex(seriesKey);      for (int column=0; column < columnCount; column++) {        Number value=dataset.getValue(series,column);        if (value != null) {          double v=value.doubleValue();          if (!Double.isNaN(v)) {            minimum=Math.min(minimum,v);            maximum=Math.max(maximum,v);          }        }      }    }  }  if (minimum == Double.POSITIVE_INFINITY) {    return null;  } else {    return new Range(minimum,maximum);  }}  }
class C{  public int update(DatabaseConnection databaseConnection,PreparedUpdate<T> preparedUpdate) throws SQLException {  CompiledStatement stmt=preparedUpdate.compile(databaseConnection,StatementType.UPDATE);  try {    return stmt.runUpdate();  }  finally {    stmt.close();  }}  }
class C{  public void testOneNodeSubmitQueryWithBoundedLinearizableConsistency() throws Throwable {  testSubmitQuery(1,Query.ConsistencyLevel.LINEARIZABLE_LEASE);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  protected GithubUrl subfolder(String subfolder){  this.subfolder=subfolder;  return this;}  }
class C{  @Override public boolean gesture(Selector obj,Point startPoint1,Point startPoint2,Point endPoint1,Point endPoint2,int steps) throws UiObjectNotFoundException, NotImplementedException {  return gesture(device.findObject(obj.toUiSelector()),startPoint1,startPoint2,endPoint1,endPoint2,steps);}  }
class C{  ContentProposalPopup(String infoText,IContentProposal[] proposals){  super(control.getShell(),SWT.RESIZE | SWT.ON_TOP,false,false,false,false,false,null,infoText);  this.proposals=proposals;}  }
class C{  public static Object typeCast(String value,Method method){  Class[] parameterTypes=method.getParameterTypes();  if (parameterTypes[0].toString().contains("Long")) {    return Long.parseLong(value);  } else   if (parameterTypes[0].toString().contains("String")) {    return value;  } else   if (parameterTypes[0].toString().contains("Boolean")) {    return Boolean.parseBoolean(value);  }  return null;}  }
class C{  public boolean isVertex(){  return segmentFraction <= 0.0 || segmentFraction >= 1.0;}  }
class C{  public static final double[][] times(final double[] v1,final double[][] m2){  assert (m2.length == 1) : ERR_MATRIX_INNERDIM;  final int columndimension=m2[0].length;  final double[][] re=new double[v1.length][columndimension];  for (int j=0; j < columndimension; j++) {    for (int i=0; i < v1.length; i++) {      re[i][j]=v1[i] * m2[0][j];    }  }  return re;}  }
class C{  public static double calculateStackTotal(TableXYDataset dataset,int item){  double total=0.0;  int seriesCount=dataset.getSeriesCount();  for (int s=0; s < seriesCount; s++) {    double value=dataset.getYValue(s,item);    if (!Double.isNaN(value)) {      total=total + value;    }  }  return total;}  }
class C{  public void startHeartbeat(String url,String user,String password,String name,String initScript) throws SQLException {  Database db=null;  try {    db=DatabaseFactory.createDatabase(url,user,password);    if (initScript != null)     db.setInitScript(initScript);    db.connect();    startHeartbeat(db,name);  }  finally {    db.close();  }}  }
class C{  @Override public final ImmutableList<E> asList(){  return this;}  }
class C{  public CLoadAllAction(final JFrame parent,final IDebugger debugger,final IAddress offset,final int size){  super("Load whole section");  Preconditions.checkNotNull(parent,"IE01421: Parent argument can not be null");  Preconditions.checkNotNull(debugger,"IE01422: Debugger argument can not be null");  Preconditions.checkNotNull(offset,"IE01423: Offset argument can't be null");  m_parent=parent;  m_debugger=debugger;  m_offset=offset;  m_size=size;}  }
class C{  protected void push(State newState,int where){  this.state=newState.stateIndex();  newState.push(where);  stack.add(newState);}  }
class C{  private void actionText(){  String text=m_text.getText();  if (text != null && text.length() > 0 && text.equals(m_lastDisplay)) {    log.finest("Nothing entered [SKIP]");    return;  }  if (text == null || text.length() == 0 || text.equals("%")) {    actionButton(text);    return;  }  text=text.toUpperCase();  log.config(m_columnName + " - " + text);  PreparedStatement pstmt=null;  ResultSet rs=null;  String rSQL=getDirectAccessSQL(text);  if (rSQL == null || rSQL.length() == 0) {    log.severe("Search enabled on field " + m_columnName + ". Associated table has no standard/identifier columns.");    return;  }  String finalSQL=Msg.parseTranslation(Env.getCtx(),rSQL);  int id=-3;  try {    pstmt=DB.prepareStatement(finalSQL,null);    rs=pstmt.executeQuery();    if (rs.next()) {      id=rs.getInt(1);      if (rs.next())       id=-1;    }  } catch (  Exception e) {    log.log(Level.SEVERE,finalSQL,e);    id=-2;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (id == -3) {    rSQL=getDirectAccessSQL(Info.getSQLText(text));    if (rSQL == null || rSQL.length() == 0) {      log.severe("Search enabled on field " + m_columnName + ". Associated table has no standard/identifier columns.");      return;    }    finalSQL=Msg.parseTranslation(Env.getCtx(),rSQL);    try {      pstmt=DB.prepareStatement(finalSQL,null);      rs=pstmt.executeQuery();      if (rs.next()) {        id=rs.getInt(1);        if (rs.next())         id=-1;      }    } catch (    Exception e) {      log.log(Level.SEVERE,finalSQL,e);      id=-2;    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }  if (id <= 0) {    if (id == -3)     log.fine(m_columnName + " - Not Found - " + finalSQL); else     log.fine(m_columnName + " - Not Unique - " + finalSQL);    m_value=null;    actionButton(m_text.getText());    return;  }  log.fine(m_columnName + " - Unique ID=" + id);  m_value=null;  resetTabInfo();  actionCombo(new Integer(id));  if (id <= 0) {    m_text.requestFocus();  }}  }
class C{  public final void checkAssert(final Consumer5<P,P2,P3,P4,T> property){  check(null);}  }
class C{  @SuppressWarnings("static-access") public static void main(String[] argv) throws AuditLogEntryException, ConfigurationException, IOException, ParseException, StateUpdateException, SQLException {  Options options=new Options();  options.addOption(OptionBuilder.withLongOpt("config-files").withDescription("Comma separated list of paths to " + "configuration files").hasArg().withArgName("PATH").create());  options.addOption(OptionBuilder.withLongOpt("start-after-id").withDescription("Start processing entries from the audit " + "log after this ID").hasArg().withArgName("ID").create());  CommandLineParser parser=new BasicParser();  CommandLine cl=parser.parse(options,argv);  String configPaths=null;  Optional<Long> startAfterId=Optional.empty();  boolean resetState=false;  if (cl.hasOption("config-files")) {    configPaths=cl.getOptionValue("config-files");    LOG.info("configPaths=" + configPaths);  }  if (cl.hasOption("start-after-id")) {    startAfterId=Optional.of(Long.parseLong(cl.getOptionValue("start-after-id")));    LOG.info("startAfterId=" + startAfterId);    resetState=true;  }  Thread.setDefaultUncaughtExceptionHandler(null);  Configuration conf=new Configuration();  if (configPaths != null) {    for (    String configPath : configPaths.split(",")) {      conf.addResource(new Path(configPath));    }  }  try {    launch(conf,startAfterId,resetState);  } catch (  Exception e) {    LOG.fatal("Got an exception!",e);    throw e;  }}  }
class C{  public BoxBlurFilter(){}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  protected InputStream send() throws ClientException {  mBaseRequest.setHttpMethod(HttpMethod.GET);  return mBaseRequest.getClient().getHttpProvider().send(this,InputStream.class,null);}  }
class C{  public StorageProviderRestRep update(URI id,StorageProviderUpdateParam input){  return client.put(StorageProviderRestRep.class,input,getIdUrl(),id);}  }
class C{  public void markAsStaticlyPolyfilled(N4MemberDeclaration element){  tag(Tag.staticlyPolyfilled,element);}  }
class C{  public Organisation(Organisation another){  setKey(another.getKey().toString());  setName(another.getName());  setAlias(another.getAlias());  setPassword(another.getPassword());  setCanHost(another.isCanHost());  setAgencyAccountPrimary(another.isAgencyAccountPrimary());  setDoiRegistrationAgency(another.getDoiRegistrationAgency());  setAgencyAccountUsername(another.getAgencyAccountUsername());  setAgencyAccountPassword(another.getAgencyAccountPassword());  setDoiPrefix(another.getDoiPrefix());  setDescription(another.getDescription());  setHomepageURL(another.getHomepageURL());  setPrimaryContactType(another.getPrimaryContactType());  setPrimaryContactName(another.getPrimaryContactName());  setPrimaryContactFirstName(another.getPrimaryContactFirstName());  setPrimaryContactLastName(another.getPrimaryContactLastName());  setPrimaryContactDescription(another.getPrimaryContactDescription());  setPrimaryContactAddress(another.getPrimaryContactAddress());  setPrimaryContactEmail(another.getPrimaryContactEmail());  setPrimaryContactPhone(another.getPrimaryContactPhone());  setNodeKey(another.getNodeKey());  setNodeName(another.getNodeName());  setNodeContactEmail(another.getNodeContactEmail());}  }
class C{  public void updateStatsUtilJobCounts(){  statsUtil.pollStatsBrokerResponseQueue();  int responseDequeueCount=statsUtil.getStatsMessageListener().getDequeueCount();  statsUtil.pollStatsBrokerJobQueue();  int requestEnqueueCount=statsUtil.getStatsMessageListener().getEnqueueCount();  int queueConsumerCount=statsUtil.getStatsMessageListener().getConsumers();  statsUtil.setUnfinishedJobs(requestEnqueueCount - responseDequeueCount);  statsUtil.setTotalJobs(Long.valueOf(requestEnqueueCount));}  }
class C{  protected HiddenUnit(Unit[] units,double[] weights){  this.units=units;  this.weights=new double[weights.length];  System.arraycopy(weights,0,this.weights,0,weights.length);}  }
class C{  public Address plus(long v){  return null;}  }
class C{  public int hash(Object key){  return System.identityHashCode(key);}  }
class C{  public void randomizeRow(int nodeIndex,int rowIndex){  final int size=getNumColumns(nodeIndex);  probs[nodeIndex][rowIndex]=getRandomWeights(size);}  }
class C{  public Route copyRoute(Route route,String routeName,boolean invert){  Route newRoute=newRoute(routeName);  List<RouteLocation> routeList=route.getLocationsBySequenceList();  if (!invert) {    for (    RouteLocation rl : routeList) {      copyRouteLocation(newRoute,rl,null,invert);    }  } else {    for (int i=routeList.size() - 1; i >= 0; i--) {      int y=i - 1;      if (y < 0) {        y=0;      }      copyRouteLocation(newRoute,routeList.get(i),routeList.get(y),invert);    }  }  newRoute.setComment(route.getComment());  return newRoute;}  }
class C{  @Transactional public void redeem(final Token token){  checkIsRedeemable(token);  tokenRepository.delete(token);  if (LOGGER.isDebugEnabled())   LOGGER.debug("Redeemed token: " + token.getTokenNumber());}  }
class C{  public static Map<String,String> createTagsForVolumeAndSnaps(XtremIOClient client,String rootTagName,String clusterName) throws Exception {  List<String> tagNames=client.getTagNames(clusterName);  _log.info("Tag Names found on Array : {}",Joiner.on("; ").join(tagNames));  Map<String,String> tagNamesMap=new HashMap<String,String>();  String volumesTagName=XtremIOConstants.V2_VOLUME_ROOT_FOLDER.concat(rootTagName);  String snapshotsTagName=XtremIOConstants.V2_SNAPSHOT_ROOT_FOLDER.concat(rootTagName);  tagNamesMap.put(XtremIOConstants.VOLUME_KEY,volumesTagName);  tagNamesMap.put(XtremIOConstants.SNAPSHOT_KEY,snapshotsTagName);  long waitTime=30000;  int count=0;  while (waitTime > 0) {    count++;    _log.debug("Retrying {} time to find the volume tag",count);    if (!tagNames.contains(volumesTagName)) {      _log.debug("sleeping time {} remaining time: {}",SLEEP_TIME,(waitTime - SLEEP_TIME));      Thread.sleep(SLEEP_TIME);      waitTime=waitTime - SLEEP_TIME;      tagNames=client.getTagNames(clusterName);    } else {      _log.info("Found {} tag on the Array.",volumesTagName);      break;    }  }  if (!tagNames.contains(volumesTagName)) {    _log.info("Sending create volume tag request {}",volumesTagName);    client.createTag(volumesTagName,null,XtremIOConstants.XTREMIO_ENTITY_TYPE.Volume.name(),clusterName);  }  if (!tagNames.contains(snapshotsTagName)) {    _log.info("Sending create snapshot tag request {}",snapshotsTagName);    client.createTag(snapshotsTagName,null,XtremIOConstants.XTREMIO_ENTITY_TYPE.SnapshotSet.name(),clusterName);  } else {    _log.info("Found {} tag on the Array.",snapshotsTagName);  }  return tagNamesMap;}  }
class C{  public static OutputLimitClause createAfter(int afterNumEvents){  return new OutputLimitClause(OutputLimitSelector.DEFAULT,OutputLimitUnit.AFTER,null,afterNumEvents);}  }
class C{  public final boolean postAtFrontOfQueue(Runnable r){  return mExec.postAtFrontOfQueue(wrapRunnable(r));}  }
class C{  VPlexVirtualVolumeInfo expandVirtualVolume(String virtualVolumeName,int expansionStatusRetryCount,long expansionStatusSleepTime) throws VPlexApiException {  s_logger.info("Expanding virtual volume {}",virtualVolumeName);  String clusterName=null;  VPlexVirtualVolumeInfo virtualVolumeInfo=null;  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexClusterInfo> clusterInfoList=discoveryMgr.getClusterInfoLite();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    virtualVolumeInfo=discoveryMgr.findVirtualVolume(clusterInfo.getName(),virtualVolumeName,false);    if (virtualVolumeInfo != null) {      clusterName=clusterInfo.getName();      break;    }  }  if (virtualVolumeInfo == null) {    throw VPlexApiException.exceptions.cantFindRequestedVolume(virtualVolumeName);  }  s_logger.info("Found virtual volume");  ClientResponse response=null;  try {    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_EXPAND_VIRTUAL_VOLUME);    s_logger.info("Expand virtual volume URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_V,virtualVolumeInfo.getPath());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Expand virtual volume POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Expand virtual volume response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Virtual volume expansion completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.expandVolumeFailureStatus(virtualVolumeName,String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully expanded virtual volume");  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedExpandVolume(virtualVolumeName,e);  } finally {    if (response != null) {      response.close();    }  }  updateVirtualVolumeInfoAfterExpansion(clusterName,virtualVolumeInfo,expansionStatusRetryCount,expansionStatusSleepTime);  s_logger.info("Updated virtual volume info");  return virtualVolumeInfo;}  }
class C{  public JSONException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public static synchronized Type tClass(Identifier className){  if (className.isInner()) {    Type t=tClass(mangleInnerType(className));    if (t.getClassName() != className)     changeClassName(t.getClassName(),className);    return t;  }  if (className.typeObject != null) {    return className.typeObject;  }  String sig=new String(SIG_CLASS + className.toString().replace('.',SIGC_PACKAGE) + SIG_ENDCLASS);  Type t=(Type)typeHash.get(sig);  if (t == null) {    t=new ClassType(sig,className);  }  className.typeObject=t;  return t;}  }
class C{  @Override public void shutdown(){  super.shutdown();  disconnect();}  }
class C{  @Override public boolean isFirst() throws SQLException {  try {    debugCodeCall("isFirst");    checkClosed();    int row=result.getRowId();    return row == 0 && row < result.getRowCount();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean isSelected(){  return selected;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public void writeDetails(javax.xml.namespace.QName qname,org.apache.axis.encoding.SerializationContext context) throws java.io.IOException {  context.serialize(qname,null,this);}  }
class C{  protected void bindViewHelper(BaseViewHolder viewHolder){  Context ctx=viewHolder.itemView.getContext();  viewHolder.itemView.setId(getIdentifier());  viewHolder.itemView.setSelected(isSelected());  int selectedColor=getSelectedColor(ctx);  int color=getColor(ctx);  int selectedTextColor=getSelectedTextColor(ctx);  int iconColor=getIconColor(ctx);  int selectedIconColor=getSelectedIconColor(ctx);  UIUtils.setBackground(viewHolder.view,DrawerUIUtils.getSelectableBackground(ctx,selectedColor));  StringHolder.applyTo(this.getName(),viewHolder.name);  StringHolder.applyToOrHide(this.getDescription(),viewHolder.description);  viewHolder.name.setTextColor(getTextColorStateList(color,selectedTextColor));  ColorHolder.applyToOr(getDescriptionTextColor(),viewHolder.description,getTextColorStateList(getColor(ctx),getSelectedColor(ctx)));  if (getTypeface() != null) {    viewHolder.name.setTypeface(getTypeface());    viewHolder.description.setTypeface(getTypeface());  }  Drawable icon=ImageHolder.decideIcon(getIcon(),ctx,iconColor,isIconTinted(),1);  Drawable selectedIcon=ImageHolder.decideIcon(getSelectedIcon(),ctx,selectedIconColor,isIconTinted(),1);  ImageHolder.applyMultiIconTo(icon,iconColor,selectedIcon,selectedIconColor,isIconTinted(),viewHolder.icon);  DrawerUIUtils.setDrawerVerticalPadding(viewHolder.view,level);}  }
class C{  protected void startBridgeServer(int port,boolean notifyBySubscription) throws IOException {  Cache cache=getCache();  CacheServer bridge=cache.addCacheServer();  bridge.setPort(port);  bridge.setNotifyBySubscription(notifyBySubscription);  bridge.start();  bridgeServerPort=bridge.getPort();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void validateItem(){  final Element current=Elements.getDocument().getActiveElement();  if (current.getParentElement().isEqualNode(listElement)) {    this.popupWidget.validateItem(current);  }}  }
class C{  public Alias routing(String routing){  this.indexRouting=routing;  this.searchRouting=routing;  return this;}  }
class C{  public ArrayList gatherFollowSets(GrammarNode gn,GrammarNode parent){  ArrayList followSet=new ArrayList();  return followSet;}  }
class C{  @Override public void visit(Visitor visitor){  visitor.visit(this);  rootTable.visit(visitor);  for (  Index i : getIndexes()) {    i.visit(visitor);  }}  }
class C{  public List<SnapshotFiles> snapshots(){  return this.shardSnapshots;}  }
class C{  public static String stringFor(int k){switch (k) {case cudaMemAdviseSetReadMostly:    return "cudaMemAdviseSetReadMostly";case cudaMemAdviseUnsetReadMostly:  return "cudaMemAdviseUnsetReadMostly";case cudaMemAdviseSetPreferredLocation:return "cudaMemAdviseSetPreferredLocation";case cudaMemAdviseUnsetPreferredLocation:return "cudaMemAdviseUnsetPreferredLocation";case cudaMemAdviseSetAccessedBy:return "cudaMemAdviseSetAccessedBy";case cudaMemAdviseUnsetAccessedBy:return "cudaMemAdviseUnsetAccessedBy";}return "INVALID cudaMemoryAdvise: " + k;}  }
class C{  public static ByteList Vars(ByteList bytes,ObjectList<ByteList> vars){  for (  ByteList list : vars) {    bytes.addAll(list);  }  return bytes;}  }
class C{  public boolean string_constants(){  return soot.PhaseOptions.getBoolean(options,"string-constants");}  }
class C{  public void defineFillStyle(Matrix matrix,int[] ratios,Color[] colors,boolean radial) throws IOException {  fillStyles.add(new FillStyle(matrix,ratios,colors,radial));  outstandingChanges=true;}  }
class C{  public static String replicaSetUsedIn(String addresses){  if (addresses.startsWith("[")) {    return null;  }  int index=addresses.indexOf('/');  if (index < 0)   return null;  return addresses.substring(0,index);}  }
class C{  public static String binarySetMapToString(String[] setDefs,long currentValue){  StringBuilder list=new StringBuilder();  String binary=Long.toBinaryString(currentValue);  for (int i=0; i < binary.length(); i++) {    if (binary.charAt(binary.length() - i - 1) == '1') {      String option=setDefs[i];      if (list.length() > 0)       list.append(",");      list.append(option);      if (logger.isDebugEnabled())       logger.debug("Bit " + i + " -> "+ option);    }  }  return list.toString();}  }
class C{  public static <T>T nullOf(Class<?> objClass){  Object result=NULL_CACHE.get(objClass);  if (result == null) {synchronized (NULL_CACHE) {      result=NULL_CACHE.get(objClass);      if (result == null) {        if (objClass.isArray()) {          int dims=0;          Class<?> componentType=objClass;          do {            componentType=componentType.getComponentType();            dims++;          } while (componentType.isArray());          result=Array.newInstance(componentType,new int[dims]);        } else         if (objClass.isEnum()) {          FieldInfo fieldInfo=ClassInfo.of(objClass).getFieldInfo(null);          Preconditions.checkNotNull(fieldInfo,"enum missing constant with @NullValue annotation: %s",objClass);          @SuppressWarnings({"unchecked","rawtypes"}) Enum e=fieldInfo.<Enum>enumValue();          result=e;        } else {          result=Types.newInstance(objClass);        }        NULL_CACHE.put(objClass,result);      }    }  }  @SuppressWarnings("unchecked") T tResult=(T)result;  return tResult;}  }
class C{  private void createGeoTags(){  if (!hasGeoKeys)   return;  char numberOfKeys=(char)geoKeyIndex.size();  char[] keys=new char[(numberOfKeys + 1) * 4];  keys[0]=1;  keys[1]=1;  keys[2]=0;  keys[3]=numberOfKeys;  Iterator it=geoKeyIndex.values().iterator();  double[] doubles=new double[numberOfKeys];  String strings="";  int indx=4;  char numDoubles=0;  char tag=0;  char valueOrOffset=0;  while (it.hasNext()) {    XTIFFField geoKey=(XTIFFField)it.next();switch (geoKey.getType()) {case XTIFFField.TIFF_SHORT:      tag=0;    valueOrOffset=(char)geoKey.getAsInt(0);  break;case XTIFFField.TIFF_DOUBLE:tag=(char)XTIFF.TIFFTAG_GEO_DOUBLE_PARAMS;doubles[numDoubles]=geoKey.getAsDouble(0);valueOrOffset=numDoubles++;break;case XTIFFField.TIFF_ASCII:tag=(char)XTIFF.TIFFTAG_GEO_ASCII_PARAMS;valueOrOffset=(char)strings.length();strings=strings + geoKey.getAsString(0) + "|";break;}keys[indx++]=(char)geoKey.getTag();keys[indx++]=tag;keys[indx++]=(char)geoKey.getCount();keys[indx++]=valueOrOffset;}addField(XTIFF.TIFFTAG_GEO_KEY_DIRECTORY,XTIFFField.TIFF_SHORT,keys.length,keys);if (strings.length() > 0) {char zero=0;strings=strings + zero;addField(XTIFF.TIFFTAG_GEO_ASCII_PARAMS,XTIFFField.TIFF_ASCII,strings.length(),new String[]{strings});}if (numDoubles > 0) {double[] doubleVals=new double[numDoubles];for (int i=0; i < numDoubles; i++) doubleVals=doubles;addField(XTIFF.TIFFTAG_GEO_DOUBLE_PARAMS,XTIFFField.TIFF_DOUBLE,numDoubles,doubleVals);}if (matrix != null) addField(XTIFF.TIFFTAG_GEO_TRANS_MATRIX,XTIFFField.TIFF_DOUBLE,matrix.length,matrix);if (tiepoints != null) addField(XTIFF.TIFFTAG_GEO_TIEPOINTS,XTIFFField.TIFF_DOUBLE,tiepoints.length,tiepoints);if (scales != null) addField(XTIFF.TIFFTAG_GEO_PIXEL_SCALE,XTIFFField.TIFF_DOUBLE,scales.length,scales);}  }
class C{  public static Text valueOf(char[] chars){  return Text.valueOf(chars,0,chars.length);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void moveViewToX(float xIndex){  Runnable job=new MoveViewJob(mViewPortHandler,xIndex,0f,getTransformer(AxisDependency.LEFT),this);  if (mViewPortHandler.hasChartDimens()) {    post(job);  } else {    mJobs.add(job);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public static long doubleExponent(double d){  long l=Double.doubleToRawLongBits(d);  long mask=2047;  l=l >> 52;  l&=mask;  return l;}  }
class C{  public String toString(){  return getName() + paramsToString();}  }
class C{  public void contextInitialized(ServletContextEvent event){  try {    DataSourceUtil.setStoreProvider(Constants.CONFIG_ENTRY_DATASTORE_PROVIDER_COUCHDB);    ScalingServiceMgr.getInstance();  } catch (  Exception e) {    logger.error(e.getMessage(),e);  }}  }
class C{  public ByteArrayArgument(int type,ArgumentType argumentType,byte[] value){  super(type);  this.argumentType=argumentType;  if (argumentType != ArgumentType.TraditionalDpb && argumentType != ArgumentType.Wide && argumentType != ArgumentType.StringSpb) {    throw new IllegalArgumentException("ByteArrayArgument only works for TraditionalDpb, Wide, or StringSpb was: " + argumentType);  }  if (value == null) {    throw new IllegalArgumentException("byte array value should not be null");  }  if (value.length > argumentType.getMaxLength()) {    throw new IllegalArgumentException(String.format("byte array value should not be longer than %d bytes, length was %d",argumentType.getMaxLength(),value.length));  }  this.value=value;}  }
class C{  public GradientLabel(String text){  super(text);  setForeground(Color.WHITE);  setHorizontalAlignment(SwingConstants.CENTER);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_capture);  CameraManager.init(getApplication());  viewfinderView=(ViewfinderView)findViewById(R.id.viewfinder_view);  hasSurface=false;  inactivityTimer=new InactivityTimer(this);}  }
class C{  public int next(){  return NativeCollation.next(address);}  }
class C{  public ProtocolCodecException(String message){  super(message);}  }
class C{  protected void diagnoseMultistepList(int matchCount,int lengthToTest,boolean isGlobal){  if (matchCount > 0) {    System.err.print("Found multistep matches: " + matchCount + ", "+ lengthToTest+ " length");    if (isGlobal)     System.err.println(" (global)"); else     System.err.println();  }}  }
class C{  @SuppressWarnings("unchecked") public Iterator iterator(){  return new ArrayList(this).iterator();}  }
class C{  public int locals(int pos,int offset,int num){  return typeInfoArray(pos,offset,num,true);}  }
class C{  void add(MembershipKeyImpl key){  InetAddress group=key.group();  List<MembershipKeyImpl> keys;  if (groups == null) {    groups=new HashMap<InetAddress,List<MembershipKeyImpl>>();    keys=null;  } else {    keys=groups.get(group);  }  if (keys == null) {    keys=new LinkedList<MembershipKeyImpl>();    groups.put(group,keys);  }  keys.add(key);}  }
class C{  public static int supplemental(char h,char l){  return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;}  }
class C{  public CannotInvokeException(ClassNotFoundException e){  super("by " + e.toString());  err=e;}  }
class C{  protected int computeMaxTextHeight(DrawContext dc){  TreeAttributes attributes=this.getActiveAttributes();  Rectangle2D bounds=this.getTextBounds(dc,"_\u00c9",attributes.getFont());  double lineHeight=Math.abs(bounds.getY());  return (int)Math.max(lineHeight,attributes.getIconSize().height);}  }
class C{  public ServiceCall<List<IdentifiedLanguage>> identify(final String text){  final RequestBuilder requestBuilder=RequestBuilder.post(PATH_IDENTIFY).header(HttpHeaders.ACCEPT,HttpMediaType.APPLICATION_JSON).bodyContent(text,HttpMediaType.TEXT_PLAIN);  ResponseConverter<List<IdentifiedLanguage>> converter=ResponseConverterUtils.getGenericObject(TYPE_LIST_IDENTIFIED_LANGUAGE,LANGUAGES);  return createServiceCall(requestBuilder.build(),converter);}  }
class C{  public void testDateFormats(){  DateFormat tFrm1=frmStatic;  if (tFrm1.equals(frmStatic))   System.out.println("Frm1 equals frmStatic");  DateFormat tFrm2=getFrm();  if (System.currentTimeMillis() < 1L)   return;  if (tFrm2.equals(frmStatic))   return;  DateFormat tCal3=frmInstance;  tCal3.setLenient(true);  DateFormat tCal4=frmStatic2;  int tInt=1;  boolean tBoolean=false;  Object tObj=new Object();  if (tObj.hashCode() > 0)   return;  tCal4.setLenient(true);  tCal4=new SimpleDateFormat();  tCal4.setLenient(true);}  }
class C{  public void itemStateChanged(ItemEvent e){  if (AWTEventMonitor.itemListener_private != null) {    AWTEventMonitor.itemListener_private.itemStateChanged(e);  }}  }
class C{  public IntSet(int numBuckets,int bucketInitialCapacity){  if (numBuckets < 1) {    String msg=Logging.getMessage("generic.SizeOutOfRange",numBuckets);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (bucketInitialCapacity < 1) {    String msg=Logging.getMessage("generic.SizeOutOfRange",bucketInitialCapacity);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.buckets=new Bucket[numBuckets];  this.numBuckets=numBuckets;  this.bucketInitialCapacity=bucketInitialCapacity;}  }
class C{  public static List<Integer> convertToIntegerList(int[] array){  List<Integer> integers=new ArrayList<Integer>();  for (int i=0; i < array.length; i++) {    integers.add(array[i]);  }  return integers;}  }
class C{  public String toString(){  String classname=Util.getUnqualifiedName(getClass());  return (ref == null) ? classname : classname + "[" + ref.remoteToString()+ "]";}  }
class C{  public SunCertPathBuilderException(String msg){  super(msg);}  }
class C{  private JWT signIdTokenWithDefaultService(final ClientDetailsEntity client,final JWSAlgorithm signingAlg,final JWTClaimsSet.Builder idClaims){  final JWT idToken;  idClaims.claim(OIDCConstants.KID,jwtService.getDefaultSignerKeyId());  log.debug("Client {} required a signed idToken with signing alg of {} and kid {}",client.getClientId(),signingAlg,jwtService.getDefaultSignerKeyId());  final JWSHeader header=new JWSHeader(signingAlg,null,null,null,null,null,null,null,null,null,jwtService.getDefaultSignerKeyId(),null,null);  idToken=new SignedJWT(header,idClaims.build());  log.debug("Using the default signer service to sign the idToken. Default signing alg is {}",jwtService.getDefaultSigningAlgorithm());  jwtService.signJwt((SignedJWT)idToken);  return idToken;}  }
class C{  public boolean generate(Projection proj){  Debug.message("eomg","EditableOMPoly.generate()");  if (poly != null) {    poly.generate(proj);  }  generateGrabPoints(proj);  return true;}  }
class C{  public void interrupt(){  if (sLogger.isActivated()) {    sLogger.warn("interrupting transfer");  }  mIsCancelled=true;}  }
class C{  public static <E>boolean listIsSubset(List<E> list1,List<E> list2){  int size1=list1.size();  int size2=list2.size();  if (size1 > size2) {    return false;  }  if (size1 == 1) {    return list2.contains(list1.get(0));  }  if (size2 == 1) {    return list1.contains(list2.get(0));  }  for (int i=0; i < size2; i++) {    if (list2.get(i).equals(list1.get(0))) {      if (i < size2 - 1 && list1.get(1).equals(list2.get(i + 1))) {        for (int j=1; j < list1.size(); j++) {          if ((i + j) == size2) {            return false;          }          if (!list1.get(j).equals(list2.get(i + j))) {            return false;          }        }        return true;      } else       if (list1.get(1).equals(list2.get(i - 1))) {        for (int j=1; j < size1; j++) {          if ((i - j) == -1) {            return false;          }          if (!list1.get(j).equals(list2.get(i - j))) {            return false;          }        }        return true;      } else {        return false;      }    }  }  return false;}  }
class C{  public static void tvseries(){}  }
class C{  public DSAPrivateKeyImpl(DSAPrivateKeySpec keySpec){  super("DSA");  PrivateKeyInfo pki;  g=keySpec.getG();  p=keySpec.getP();  q=keySpec.getQ();  ThreeIntegerSequence threeInts=new ThreeIntegerSequence(p.toByteArray(),q.toByteArray(),g.toByteArray());  AlgorithmIdentifier ai=new AlgorithmIdentifier(AlgNameMapper.map2OID("DSA"),threeInts.getEncoded());  x=keySpec.getX();  pki=new PrivateKeyInfo(0,ai,ASN1Integer.getInstance().encode(x.toByteArray()),null);  setEncoding(pki.getEncoded());  params=new DSAParameterSpec(p,q,g);}  }
class C{  public String toString(){  if (iLowerLimit == iUpperLimit) {    return "DateTimeComparator[" + (iLowerLimit == null ? "" : iLowerLimit.getName()) + "]";  } else {    return "DateTimeComparator[" + (iLowerLimit == null ? "" : iLowerLimit.getName()) + "-"+ (iUpperLimit == null ? "" : iUpperLimit.getName())+ "]";  }}  }
class C{  public void importAsTrusted(final KeyStoreCertificateSource keyStore){  final List<CertificateToken> certTokenList=keyStore.getCertificates();  for (  final CertificateToken certToken : certTokenList) {    certPool.getInstance(certToken,getCertificateSourceType());  }}  }
class C{  private JPanel createScatterPlotDialog(ContinuousVariable yVariable,ContinuousVariable xVariable){  String dialogTitle="Scatter Plots";  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout());  DataSet dataSet=(DataSet)dataEditor.getSelectedDataModel();  ScatterPlotOld scatterPlot=new ScatterPlotOld(dataSet,yVariable,xVariable);  ScatterPlotEditorPanel editorPanel=new ScatterPlotEditorPanel(scatterPlot,dataSet);  ScatterPlotDisplayPanelOld display=new ScatterPlotDisplayPanelOld(scatterPlot);  editorPanel.addPropertyChangeListener(new ScatterPlotListener(display));  JMenuBar bar=new JMenuBar();  JMenu menu=new JMenu("File");  menu.add(new JMenuItem(new SaveComponentImage(display,"Save Scatter Plot")));  bar.add(menu);  Box box=Box.createHorizontalBox();  box.add(display);  box.add(Box.createHorizontalStrut(3));  box.add(editorPanel);  box.add(Box.createHorizontalStrut(5));  box.add(Box.createHorizontalGlue());  Box vBox=Box.createVerticalBox();  vBox.add(Box.createVerticalStrut(15));  vBox.add(box);  vBox.add(Box.createVerticalStrut(5));  panel.add(bar,BorderLayout.NORTH);  panel.add(vBox,BorderLayout.CENTER);  return panel;}  }
class C{  public TrieNode find(String word){  return (word.length() < 1 ? null : find(word,root,0));}  }
class C{  public void remove(int childIndex){  FHTreeStateNode node=(FHTreeStateNode)getChildAt(childIndex);  node.removeFromMapping();  super.remove(childIndex);}  }
class C{  public NoSuchMechanismException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  protected int __vector(int offset){  offset+=bb_pos;  return offset + bb.getInt(offset) + SIZEOF_INT;}  }
class C{  public void execDetailsEnd(int reqId){}  }
class C{  @Override public void onPerformSync(Account account,Bundle extras,String authority,ContentProviderClient provider,SyncResult syncResult){  if (logger.isActivated()) {    logger.debug("On performing sync has been called, but nothing to be done");  }}  }
class C{  public synchronized void addFailedKeys(Collection<KeyCacheObject> keys,Throwable e){  if (keys != null) {    if (failedKeys == null)     failedKeys=new ArrayList<>(keys.size());    failedKeys.addAll(keys);  }  if (err == null)   err=new IgniteCheckedException("Failed to update keys on primary node.");  err.addSuppressed(e);}  }
class C{  @SafeVarargs public static <T>T[] join(IntFunction<T[]> arrayFunction,T[]... arrays){  if (arrays.length == 0) {    return arrayFunction.apply(0);  }  if (arrays.length == 1) {    return arrays[0];  }  if (arrays.length == 2) {    return join(arrayFunction,arrays[0],arrays[1]);  }  T[] notNull=null;  int finalSize=0;  int nullArrays=0;  List<T> list=new ArrayList<>(arrays.length * 10);  for (  T[] array : arrays) {    if ((array == null) || (array.length == 0)) {      nullArrays++;    } else {      notNull=array;      finalSize+=array.length;      Collections.addAll(list,array);    }  }  if (nullArrays == arrays.length) {    return arrayFunction.apply(0);  }  if (nullArrays == (arrays.length - 1)) {    return notNull;  }  return list.toArray(arrayFunction.apply(list.size()));}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_MORE_CODE_1__CODE_LANG_1:    return ((InternalEList<?>)getCodeLang_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_MORE_CODE_1__CODE_LANGS_1:  return ((InternalEList<?>)getCodeLangs_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  static void d(String msg){  if (debug) {    android.util.Log.d(TAG,msg);  }}  }
class C{  private void update(){  listData.clear();  for (  String game : searchResult) {    listData.addElement(game);  }  if (!searchResult.isEmpty() && !favorites.isEmpty()) {    listData.addElement("-");  }  for (  String game : favorites) {    listData.addElement(game);  }  searchResultInfo.setText("Search: " + searchResult.size() + " / "+ "Favorites: "+ favorites.size()+ "");  list.setSelectedValue(gameInput.getText(),false);}  }
class C{  private String readQuotedId(boolean returnText) throws IOException, XmlPullParserException {  int quote=peekCharacter();  char[] delimiter;  if (quote == '"') {    delimiter=DOUBLE_QUOTE;  } else   if (quote == '\'') {    delimiter=SINGLE_QUOTE;  } else {    throw new XmlPullParserException("Expected a quoted string",this,null);  }  position++;  return readUntil(delimiter,returnText);}  }
class C{  @Deprecated public Complex times(double alpha){  return new Complex(alpha * re,alpha * im);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:29.320 -0500",hash_original_method="1891CC0C108558254961316EC04BF5C2",hash_generated_method="1891CC0C108558254961316EC04BF5C2") GsmConnection(Context context,String dialString,GsmCallTracker ct,GsmCall parent){  createWakeLock(context);  acquireWakeLock();  owner=ct;  h=new MyHandler(owner.getLooper());  this.dialString=dialString;  this.address=PhoneNumberUtils.extractNetworkPortionAlt(dialString);  this.postDialString=PhoneNumberUtils.extractPostDialPortion(dialString);  index=-1;  isIncoming=false;  createTime=System.currentTimeMillis();  this.parent=parent;  parent.attachFake(this,GsmCall.State.DIALING);}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(RPCLASS_NAME);  rpclass.add(DefinitionClass.ATTRIBUTE,TEXT,Type.LONG_STRING);}  }
class C{  private boolean basicIsAffected(Collection<Delta> deltas,final IResourceDescription candidate){  Collection<QualifiedName> namesImportedByCandidate=null;  for (  IResourceDescription.Delta delta : deltas) {    if (delta.haveEObjectDescriptionsChanged() && fileExtensionProvider.isValid(delta.getUri().fileExtension())) {      if (null == namesImportedByCandidate) {        namesImportedByCandidate=getImportedNames(candidate);      }      if (isAffected(namesImportedByCandidate,delta.getNew()) || isAffected(namesImportedByCandidate,delta.getOld())) {        if (hasDependencyTo(candidate,delta)) {          return true;        }      }    }  }  return false;}  }
class C{  public void disableDeserializationOption(DeserializationFeature option){  this.deserializationFeatures.remove(option);}  }
class C{  public static void purgeSharedSpriteFrameCache(){  if (sharedSpriteFrameCache_ != null) {    sharedSpriteFrameCache_.removeAllSpriteFrames();    sharedSpriteFrameCache_=null;  }}  }
class C{  public static float calculateLeft(float top,float right,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float left=right - (targetAspectRatio * height);  return left;}  }
class C{  public UniqueFileStrategy(final File baseFile,String pattern){  this(baseFile);  m_formatter=new SimpleDateFormat(pattern);}  }
class C{  @JavascriptInterface @SuppressWarnings("unused") public void onResult(String id,String result){  if (DEBUG) {    Log.w(TAG,"Saw CVOX result of '" + result + "' for ID "+ id);  }  final int resultId;  try {    resultId=Integer.parseInt(id);  } catch (  NumberFormatException e) {    return;  }synchronized (mResultLock) {    if (resultId > mResultId) {      mResult=Boolean.parseBoolean(result);      mResultId=resultId;    } else {      if (DEBUG) {        Log.w(TAG,"Result with ID " + resultId + " was stale vesus "+ mResultId);      }    }    mResultLock.notifyAll();  }}  }
class C{  public void onAbsorb(int velocity){  mState=STATE_ABSORB;  velocity=Math.max(MIN_VELOCITY,Math.abs(velocity));  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mDuration=0.1f + (velocity * 0.03f);  mEdgeAlphaStart=0.f;  mEdgeScaleY=mEdgeScaleYStart=0.f;  mGlowAlphaStart=0.5f;  mGlowScaleYStart=0.f;  mEdgeAlphaFinish=Math.max(0,Math.min(velocity * VELOCITY_EDGE_FACTOR,1));  mEdgeScaleYFinish=Math.max(HELD_EDGE_SCALE_Y,Math.min(velocity * VELOCITY_EDGE_FACTOR,1.f));  mGlowScaleYFinish=Math.min(0.025f + (velocity * (velocity / 100) * 0.00015f),1.75f);  mGlowAlphaFinish=Math.max(mGlowAlphaStart,Math.min(velocity * VELOCITY_GLOW_FACTOR * .00001f,MAX_ALPHA));}  }
class C{  private void release(){  noxItemCatalog.release();  noxItemCatalog.deleteObserver(catalogObserver);}  }
class C{  public HttpHeaders headers(){  return headers;}  }
class C{  public boolean equals(Object obj){  if (!super.equals(obj)) {    return false;  }  if (obj.getClass() != getClass()) {    return false;  }  return true;}  }
class C{  public void clear(){  this.activities.clear();  this.activityTypes.clear();  this.parents.clear();  this.globalQueue.clear();}  }
class C{  public static int readVarInt(ByteBuffer buff){  int b=buff.get();  if (b >= 0) {    return b;  }  return readVarIntRest(buff,b);}  }
class C{  public static void addElectrolyticSeparatorRecipe(FluidStack input,double energy,GasStack leftOutput,GasStack rightOutput){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addElectrolyticSeparatorRecipe",FluidStack.class,Double.TYPE,GasStack.class,GasStack.class);    m.invoke(null,input,energy,leftOutput,rightOutput);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WChat.init");}  }
class C{  void postReplaceChildEvent(ASTNode node,ASTNode child,ASTNode newChild,StructuralPropertyDescriptor property){synchronized (this.internalASTLock) {    if (this.disableEvents > 0) {      return;    } else {      disableEvents();    }  }  try {    this.eventHandler.postReplaceChildEvent(node,child,newChild,property);  }  finally {    reenableEvents();  }}  }
class C{  private void addCSSClasses(SVGPlot svgp){  final StyleLibrary style=context.getStyleLibrary();  if (!svgp.getCSSClassManager().contains(KNNMARKER)) {    CSSClass cls=new CSSClass(this,KNNMARKER);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_DARKGREEN_VALUE);    cls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,style.getOpacity(StyleLibrary.SELECTION));    svgp.addCSSClassOrLogError(cls);  }  if (!svgp.getCSSClassManager().contains(DISTANCEFUNCTION)) {    CSSClass cls=new CSSClass(this,DISTANCEFUNCTION);    cls.setStatement(SVGConstants.CSS_STROKE_PROPERTY,SVGConstants.CSS_RED_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.PLOT));    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_NONE_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_LINECAP_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_LINEJOIN_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    svgp.addCSSClassOrLogError(cls);  }  if (!svgp.getCSSClassManager().contains(KNNDIST)) {    CSSClass cls=new CSSClass(this,KNNDIST);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_BLACK_VALUE);    cls.setStatement(SVGConstants.CSS_FONT_SIZE_PROPERTY,style.getTextSize(StyleLibrary.PLOT));    cls.setStatement(SVGConstants.CSS_FONT_FAMILY_PROPERTY,style.getFontFamily(StyleLibrary.PLOT));    svgp.addCSSClassOrLogError(cls);  }}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public static SpatialGrid createSpatialGridByShapeBoundary(Geometry boundary,double gridSize){  Envelope env=boundary.getEnvelopeInternal();  double xMin=env.getMinX();  double xMax=env.getMaxX();  double yMin=env.getMinY();  double yMax=env.getMaxY();  return new SpatialGrid(xMin,yMin,xMax,yMax,gridSize,Double.NaN);}  }
class C{  public SVGFeDisplacementMapElementBridge(){}  }
class C{  public SolrResourceLoader(String instanceDir,ClassLoader parent,Properties coreProperties){  if (instanceDir == null) {    this.instanceDir=SolrResourceLoader.locateSolrHome();    log.info("new SolrResourceLoader for deduced Solr Home: '{}'",this.instanceDir);  } else {    this.instanceDir=normalizeDir(instanceDir);    log.info("new SolrResourceLoader for directory: '{}'",this.instanceDir);  }  this.classLoader=createClassLoader(null,parent);  addToClassLoader("./lib/",null,true);  reloadLuceneSPI();  this.coreProperties=coreProperties;}  }
class C{  private void error(Response response,VirtualFile file,Exception e){  response.status=Http.StatusCode.INTERNAL_ERROR;  response.print(StringUtils.defaultString(e.getMessage(),e.getClass().getName()));  Logger.error(e,"Less Compilation Failed: %s",file.relativePath());}  }
class C{  private void processStart(final State current){  try {    if (!isFinalStage(current)) {      sendStageProgressPatch(current,current.taskState.stage);    }  } catch (  Throwable e) {    failTask(e,null);  }}  }
class C{  public TransformVariablesAffine(BBOBFunction function,double[][] M,double[] b){  super(function);  this.M=M;  this.b=b;}  }
class C{  public area(String shape){  setShape(shape);}  }
class C{  public void propertyChange(@Nonnull java.beans.PropertyChangeEvent e){  if ("Mode".equals(e.getPropertyName()) && getProgrammer().equals(e.getSource())) {    log.debug("Mode propertyChange with {}",isSelected());    if (isSelected()) {      setGuiFromProgrammer();    }  }}  }
class C{  static public boolean start(ASyncProcess parent,int WindowNo,ProcessInfo pi,boolean IsDirectPrint){  pi.setPrintPreview(!IsDirectPrint);  return start(parent,WindowNo,pi);}  }
class C{  public TreeNode deserialize(String data){  if (data == null) {    return null;  }  TreeNode root=new TreeNode(0);  root.val=Integer.parseInt(data.substring(0,data.indexOf(",")));  data=data.substring(data.indexOf(",") + 1);  Queue<TreeNode> queue=new LinkedList<TreeNode>();  queue.offer(root);  int size=0;  while (!queue.isEmpty()) {    size=queue.size();    for (int i=0; i < size; i++) {      TreeNode node=queue.poll();      String temp=data.substring(0,data.indexOf(","));      if (!temp.equals("#")) {        node.left=new TreeNode(Integer.parseInt(temp));      }      data=data.substring(data.indexOf(",") + 1);      temp=data.substring(0,data.indexOf(","));      if (!temp.equals("#")) {        node.right=new TreeNode(Integer.parseInt(temp));      }      data=data.substring(data.indexOf(",") + 1);    }  }  return root;}  }
class C{  private void notifyListeners(){synchronized (lsnrs) {    for (    GridPortListener lsnr : lsnrs)     lsnr.onPortChange();  }}  }
class C{  private RankedSpellPossibility internalNext(){  if (nextOnes != null && nextOnes.hasNext()) {    RankedSpellPossibility rsl=new RankedSpellPossibility();    rsl.corrections=nextOnes.next();    rsl.rank=nextOnesRank;    rsl.index=nextOnesIndex++;    return rsl;  }  if (done) {    throw new NoSuchElementException();  }  internalNextAdvance();  if (nextOnes != null && nextOnes.hasNext()) {    RankedSpellPossibility rsl=new RankedSpellPossibility();    rsl.corrections=nextOnes.next();    rsl.rank=nextOnesRank;    rsl.index=nextOnesIndex++;    return rsl;  }  throw new NoSuchElementException();}  }
class C{  public static boolean disjoint(Collection<?> c1,Collection<?> c2){  if ((c1 instanceof Set) && !(c2 instanceof Set) || (c2.size()) > c1.size()) {    Collection<?> tmp=c1;    c1=c2;    c2=tmp;  }  Iterator<?> it=c1.iterator();  while (it.hasNext()) {    if (c2.contains(it.next())) {      return false;    }  }  return true;}  }
class C{  public void testBigMinCalculation2Dim(){  final byte[] searchMinZOrder={Byte.valueOf("00001100",2)};  final byte[] searchMaxZOrder={Byte.valueOf("00101101",2)};  final ZOrderRangeScanUtil rangeScanUtil=new ZOrderRangeScanUtil(searchMinZOrder,searchMaxZOrder,2);  final byte[] divRecord1={Byte.valueOf("00010011",2)};  final byte[] bigMinExp1={Byte.valueOf("00100100",2)};  final byte[] bigMinAct1=rangeScanUtil.calculateBigMin(divRecord1);  assertEquals(bigMinExp1,bigMinAct1);  assertFalse(rangeScanUtil.isInSearchRange(divRecord1));  assertTrue(rangeScanUtil.isInSearchRange(bigMinAct1));  final byte[] divRecord2={Byte.valueOf("00100000",2)};  final byte[] bigMinExp2={Byte.valueOf("00100100",2)};  final byte[] bigMinAct2=rangeScanUtil.calculateBigMin(divRecord2);  assertEquals(bigMinExp2,bigMinAct2);  assertFalse(rangeScanUtil.isInSearchRange(divRecord2));  assertTrue(rangeScanUtil.isInSearchRange(bigMinAct2));  final byte[] divRecord3={Byte.valueOf("00011111",2)};  final byte[] bigMinExp3={Byte.valueOf("00100100",2)};  final byte[] bigMinAct3=rangeScanUtil.calculateBigMin(divRecord3);  assertEquals(bigMinExp3,bigMinAct3);  assertFalse(rangeScanUtil.isInSearchRange(divRecord3));  assertTrue(rangeScanUtil.isInSearchRange(bigMinAct3));  final byte[] divRecord4={Byte.valueOf("00100011",2)};  final byte[] bigMinExp4={Byte.valueOf("00100100",2)};  final byte[] bigMinAct4=rangeScanUtil.calculateBigMin(divRecord4);  assertEquals(bigMinExp4,bigMinAct4);  assertFalse(rangeScanUtil.isInSearchRange(divRecord4));  assertTrue(rangeScanUtil.isInSearchRange(bigMinAct4));  final byte[] divRecord5={Byte.valueOf("00101000",2)};  final byte[] bigMinExp5={Byte.valueOf("00101100",2)};  final byte[] bigMinAct5=rangeScanUtil.calculateBigMin(divRecord5);  assertEquals(bigMinExp5,bigMinAct5);  assertFalse(rangeScanUtil.isInSearchRange(divRecord5));  assertTrue(rangeScanUtil.isInSearchRange(bigMinAct5));  final byte[] divRecord6={Byte.valueOf("00101001",2)};  final byte[] bigMinExp6={Byte.valueOf("00101100",2)};  final byte[] bigMinAct6=rangeScanUtil.calculateBigMin(divRecord6);  assertEquals(bigMinExp6,bigMinAct6);  assertFalse(rangeScanUtil.isInSearchRange(divRecord6));  assertTrue(rangeScanUtil.isInSearchRange(bigMinAct6));  final byte[] divRecord7={Byte.valueOf("00101010",2)};  final byte[] bigMinExp7={Byte.valueOf("00101100",2)};  final byte[] bigMinAct7=rangeScanUtil.calculateBigMin(divRecord7);  assertEquals(bigMinExp7,bigMinAct7);  assertFalse(rangeScanUtil.isInSearchRange(divRecord7));  assertTrue(rangeScanUtil.isInSearchRange(bigMinAct7));  final byte[] divRecord8={Byte.valueOf("00101011",2)};  final byte[] bigMinExp8={Byte.valueOf("00101100",2)};  final byte[] bigMinAct8=rangeScanUtil.calculateBigMin(divRecord8);  assertEquals(bigMinExp8,bigMinAct8);  assertFalse(rangeScanUtil.isInSearchRange(divRecord8));  assertTrue(rangeScanUtil.isInSearchRange(bigMinAct8));}  }
class C{  public static void main(String[] args){  Properties options=StringUtils.argsToProperties(args,optionArgDefs());  if (options.containsKey("help") || args.length == 0) {    System.err.println(usage(EnglishPostprocessor.class.getName()));    System.exit(-1);  }  int nThreads=PropertiesUtils.getInt(options,"nthreads",1);  EnglishPreprocessor preProcessor=new EnglishPreprocessor();  EnglishPostprocessor postProcessor=new EnglishPostprocessor(options);  CRFPostprocessor.setup(postProcessor,preProcessor,options);  CRFPostprocessor.execute(nThreads,preProcessor,postProcessor);}  }
class C{  public VirtualFileEntry copyTo(String itemPath,String newParentPath,String newName,boolean overwrite) throws ServerException, NotFoundException, ConflictException, ForbiddenException {  VirtualFile oldItem=vfs.getRoot().getChild(Path.of(itemPath));  if (oldItem == null) {    throw new NotFoundException("Item not found " + itemPath);  }  VirtualFile newParent=vfs.getRoot().getChild(Path.of(newParentPath));  if (newParent == null) {    throw new NotFoundException("New parent not found " + newParentPath);  }  final VirtualFile newItem=oldItem.copyTo(newParent,newName,overwrite);  final RegisteredProject owner=projectRegistry.getParentProject(newItem.getPath().toString());  if (owner == null) {    throw new NotFoundException("Parent project not found " + newItem.getPath().toString());  }  final VirtualFileEntry copy;  if (newItem.isFile()) {    copy=new FileEntry(newItem,projectRegistry);  } else {    copy=new FolderEntry(newItem,projectRegistry);  }  if (copy.isProject()) {    projectRegistry.getProject(copy.getProject()).getTypes();  }  return copy;}  }
class C{  public void commit() throws IOException {  if (writer == null) {    throw new IllegalStateException("Cannot commit on an closed writer. Add documents first");  }  writer.commit();}  }
class C{  public static String removeWhiteSpaces(String input){  if (input != null) {    input=trim(input).getString();    StringBuffer output=new StringBuffer();    for (int i=0; i < input.length(); i++) {      char ch=input.charAt(i);      if (PreprocessorUtils.isWhitespace(ch)) {        continue;      } else {        output.append(ch);      }    }    return output.toString();  } else {    return null;  }}  }
class C{  static long med3(final CommonIndex x,final long a,final long b,final long c){  final long xa=x.get(a);  final long xb=x.get(b);  final long xc=x.get(c);  return xa < xb ? (xb < xc ? b : xa < xc ? c : a) : (xb > xc ? b : xa > xc ? c : a);}  }
class C{  public final int numAttributes(){  return m_Attributes.size();}  }
class C{  public void startTrace() throws MqttException {  traceEnabled=true;}  }
class C{  String principalsToString(){  String result="";  if ((grantEntry.principals != null) && (!grantEntry.principals.isEmpty())) {    StringBuffer buffer=new StringBuffer(200);    ListIterator<PolicyParser.PrincipalEntry> list=grantEntry.principals.listIterator();    while (list.hasNext()) {      PolicyParser.PrincipalEntry pppe=list.next();      buffer.append(" Principal " + pppe.getDisplayClass() + " "+ pppe.getDisplayName(true));      if (list.hasNext())       buffer.append(", ");    }    result=buffer.toString();  }  return result;}  }
class C{  public void updateLabel(){  try {    super.setText("<html><body><div style=\"width:" + width + "pt\">"+ rootlessHTML+ "</div></body></html>");  } catch (  RuntimeException e) {  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEFuncGElement(prefix,(AbstractDocument)doc);}  }
class C{  public void close() throws IOException {synchronized (NamedInputStream.class) {    numberOfReferences--;  }  super.close();}  }
class C{  public SPARQLResultsXMLParser(ValueFactory valueFactory){  super(valueFactory);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  public static IClasspathAttribute[] createClasspathAttributes(OmniClasspathEntry entry){  List<OmniClasspathAttribute> attributes=entry.getClasspathAttributes().isPresent() ? entry.getClasspathAttributes().get() : Collections.<OmniClasspathAttribute>emptyList();  IClasspathAttribute[] classpathAttributes=new IClasspathAttribute[attributes.size()];  for (int i=0; i < attributes.size(); i++) {    OmniClasspathAttribute attribute=attributes.get(i);    classpathAttributes[i]=JavaCore.newClasspathAttribute(attribute.getName(),attribute.getValue());  }  return classpathAttributes;}  }
class C{  public void test_initLjava_security_KeyStore$C() throws NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  KeyManagerFactory[] keyMF=createKMFac();  assertNotNull("KeyManagerFactory object were not created",keyMF);  KeyStore ksNull=null;  KeyManager[] km;  for (int i=0; i < keyMF.length; i++) {    keyMF[i].init(ksNull,new char[10]);    km=keyMF[i].getKeyManagers();    assertNotNull("Result should not be null",km);    assertTrue("Length of result KeyManager array should not be 0",(km.length > 0));  }  KeyStore ks;  try {    ks=KeyStore.getInstance(KeyStore.getDefaultType());    ks.load(null,null);  } catch (  KeyStoreException e) {    fail(e.toString() + "default KeyStore type is not supported");    return;  }catch (  Exception e) {    fail("Unexpected: " + e.toString());    return;  }  for (int i=0; i < keyMF.length; i++) {    try {      keyMF[i].init(ks,new char[10]);    } catch (    KeyStoreException e) {    }    km=keyMF[i].getKeyManagers();    assertNotNull("Result has not be null",km);    assertTrue("Length of result KeyManager array should not be 0",(km.length > 0));  }}  }
class C{  protected void calculateStatesPartialsPruning(int[] states1,double[] matrices1,double[] partials2,double[] matrices2,double[] partials3,int[] matrixMap){  throw new RuntimeException("calculateStatesStatesPruning not implemented using matrixMap");}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos == count) {      return -1;    }    return buf[pos++];  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public void launchUrl(Activity context,Uri url,int requestCode){  intent.setData(url);  ActivityCompat.startActivityForResult(context,intent,requestCode,startAnimationBundle);}  }
class C{  public static final float[] liang_clip(int xleft,int xright,int ytop,int ybottom,float[] x,float[] y,int n,float[] ret_val){  int i, num=0;  double dx, dy, xin, xout, yin, yout, tinx, tiny, tin1, tin2, toutx, touty, tout1;  for (i=0; i < n; i++) {    dx=x[i + 1] - x[i];    dy=y[i + 1] - y[i];    if ((dx > 0) || ((dx == 0) && (x[i] > xright))) {      xin=xleft;      xout=xright;    } else {      xin=xright;      xout=xleft;    }    if ((dy > 0) || ((dy == 0) && (y[i] > ytop))) {      yin=ybottom;      yout=ytop;    } else {      yin=ytop;      yout=ybottom;    }    tinx=(dx != 0) ? (xin - x[i]) / dx : Double.NEGATIVE_INFINITY;    tiny=(dy != 0) ? (yin - y[i]) / dy : Double.NEGATIVE_INFINITY;    if (tinx < tiny) {      tin1=tinx;      tin2=tiny;    } else {      tin1=tiny;      tin2=tinx;    }    if (tin1 <= 1) {      if (tin1 > 0) {        ret_val[num++]=(int)ProjMath.qint((double)(xin));        ret_val[num++]=(int)ProjMath.qint((double)(yin));      }      if (tin2 <= 1) {        if (dx != 0)         toutx=(xout - x[i]) / dx; else         toutx=((xleft <= x[i]) && (x[i] <= xright)) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;        if (dy != 0)         touty=(yout - y[i]) / dy; else         touty=((ybottom <= y[i]) && (y[i] <= ytop)) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;        tout1=(toutx < touty) ? toutx : touty;        if ((tin2 > 0) || (tout1 > 0)) {          if (tin2 <= tout1) {            if (tin2 > 0)             if (tinx > tiny) {              ret_val[num++]=(int)ProjMath.qint(xin);              ret_val[num++]=(int)ProjMath.qint(y[i] + (tinx * dy));            } else {              ret_val[num++]=(int)ProjMath.qint(x[i] + (tiny * dx));              ret_val[num++]=(int)ProjMath.qint(yin);            }            if (tout1 < 1) {              if (toutx < touty) {                ret_val[num++]=(int)ProjMath.qint(xout);                ret_val[num++]=(int)ProjMath.qint(y[i] + (toutx * dy));              } else {                ret_val[num++]=(int)ProjMath.qint(x[i] + (touty * dx));                ret_val[num++]=(int)ProjMath.qint(yout);              }            } else {              ret_val[num++]=(int)(x[i + 1]);              ret_val[num++]=(int)(y[i + 1]);            }          } else {            if (tinx > tiny) {              ret_val[num++]=(int)ProjMath.qint(xin);              ret_val[num++]=(int)ProjMath.qint(yout);            } else {              ret_val[num++]=(int)ProjMath.qint(xout);              ret_val[num++]=(int)ProjMath.qint(yin);            }          }        }      }    }  }  if (num != 0) {    ret_val[num++]=ret_val[0];    ret_val[num++]=ret_val[1];    ret_val[ret_val.length - 1]=num;  } else   ret_val[ret_val.length - 1]=num;  return ret_val;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ServerInfo(String host,int port){  Objects.requireNonNull(host);  if (port < 0) {    throw new IllegalArgumentException("port<0");  }  this.host=host;  this.port=port;}  }
class C{  private static void log(final RqFallback req) throws IOException {  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  final Throwable error=req.throwable();  final PrintStream stream=new Utf8PrintStream(baos,false);  try {    error.printStackTrace(stream);  }  finally {    stream.close();  }  FbSlf4j.LOGGER.error("{} {} failed with {}: {}",new RqMethod.Base(req).method(),new RqHref.Base(req).href(),req.code(),baos.toString("UTF-8"));}  }
class C{  public static void transferPEToCollectors(World world,BlockPos pos,IEnergyManipulator manipulator,int boost){  int xp=pos.getX();  int yp=pos.getY();  int zp=pos.getZ();  List<TileEntity> collectors=Lists.newArrayList();  for (int x=-1 * (3 + boost); x <= 3 + boost; x++)   for (int y=0; y <= getRangeAmplifiers(world,pos); y++)   for (int z=-1 * (3 + boost); z <= 3 + boost; z++)   if (x < -2 || x > 2 || z < -2 || z > 2)   if (isCollector(world.getTileEntity(new BlockPos(xp + x,yp - y,zp + z))))   collectors.add(world.getTileEntity(new BlockPos(xp + x,yp - y,zp + z)));  for (  TileEntity tile : collectors)   if (checkForAdjacentCollectors(world,tile.getPos()))   if (world.rand.nextInt(120 - (int)(20 * manipulator.getAmplifier(AmplifierType.DURATION))) == 0)   if (((IEnergyContainer)tile).getContainedEnergy() < ((IEnergyContainer)tile).getMaxEnergy()) {    if (!world.isRemote)     ((IEnergyContainer)tile).addEnergy(manipulator.getEnergyQuanta());    for (double i=0; i <= 0.7; i+=0.03) {      int xPos=xp < tile.getPos().getX() ? 1 : xp > tile.getPos().getX() ? -1 : 0;      int yPos=yp < tile.getPos().getY() ? 1 : yp > tile.getPos().getY() ? -1 : 0;      int zPos=zp < tile.getPos().getZ() ? 1 : zp > tile.getPos().getZ() ? -1 : 0;      double x=i * Math.cos(i) / 2 * xPos;      double y=i * Math.sin(i) / 2 * yPos;      double z=i * Math.sin(i) / 2 * zPos;      world.spawnParticle(EnumParticleTypes.SMOKE_LARGE,xp + 0.5,yp + 0.5,zp + 0.5,x,y,z);    }  }}  }
class C{  public void removeRow(Assignment condition,Value head){  if (table.containsKey(condition)) {    table.get(condition).removeRow(head);  } else {    log.fine("cannot remove row: condition " + condition + " is not present");  }}  }
class C{  public static SmsNpi valueOf(int value){switch (value) {case 0x00:    return UNKNOWN;case 0x01:  return ISDN_TELEPHONE;case 0x03:return DATA;case 0x04:return TELEX;case 0x08:return NATIONAL;case 0x09:return PRIVATE;case 0x10:return ERMES;default :return new SmsNpi(value,String.valueOf(value));}}  }
class C{  synchronized void checkTFileDataIndex() throws IOException {  if (tfileIndex == null) {    BlockReader brIndex=readerBCF.getMetaBlock(TFileIndex.BLOCK_NAME);    try {      tfileIndex=new TFileIndex(readerBCF.getBlockCount(),brIndex,tfileMeta.getComparator());    }  finally {      brIndex.close();    }  }}  }
class C{  protected void assertObjectsEqual(Object expected,Object actual){  if (expected == null) {    assertNull(actual);  } else {    assertNotNull("Should not be null",actual);    if (actual.getClass().isArray()) {      assertArrayEquals(expected,actual);    } else {      if (!expected.equals(actual)) {        assertEquals("Object deserialization failed","DESERIALIZED OBJECT\n" + xstream.toXML(expected),"DESERIALIZED OBJECT\n" + xstream.toXML(actual));      }    }  }}  }
class C{  private static boolean shouldIncludeMethod(MethodDoc method,String accessType,ClassDoc classDoc){  if (method.isStatic() || AnnotationUtils.hasAnnotation(method,KnownAnnotations.XMLTransient_Annotation) || AnnotationUtils.hasAnnotation(method,KnownAnnotations.XMLAttribute_Annotation)) {    return false;  }  if (accessType.equals("FIELD")) {    return false;  } else   if (accessType.equals("PUBLIC_MEMBER")) {    return method.isPublic() && method.name().startsWith("get") && hasMatchingSetter(method.name(),classDoc);  } else   if (accessType.equals("PROPERTY")) {    return method.isPublic() && method.name().startsWith("get") && hasMatchingSetter(method.name(),classDoc);  } else   if (accessType.equals("NONE")) {    return false;  }  return false;}  }
class C{  private static void generateOldData(){  for (int i=0; i < categoryNames.length; i++) {    for (int j=BEFORE; j <= AFTER; j++) {      oldListCount[j][i]=0;      oldList[j][i]=new StringBuffer();      oldListLen[j][i]=17;    }  }  storeOldData();  if (oldTotalCount[categoryNames.length - 1] != 1) {    System.err.println("This should not happen. Unicode data which belongs to an undefined category exists");    System.exit(1);  }}  }
class C{  public void toggle(boolean animate){  toggle(animate,fadeIn,fadeOut);}  }
class C{  public void clear(){  length=0;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public boolean isSubcontracting(){  Object oo=get_Value(COLUMNNAME_IsSubcontracting);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void layoutContainer(Container target){  checkContainer(target);  checkRequests();  int nChildren=target.getComponentCount();  int[] xOffsets=new int[nChildren];  int[] xSpans=new int[nChildren];  int[] yOffsets=new int[nChildren];  int[] ySpans=new int[nChildren];  Dimension alloc=target.getSize();  Insets in=target.getInsets();  alloc.width-=in.left + in.right;  alloc.height-=in.top + in.bottom;  SizeRequirements.calculateAlignedPositions(alloc.width,xTotal,xChildren,xOffsets,xSpans);  SizeRequirements.calculateAlignedPositions(alloc.height,yTotal,yChildren,yOffsets,ySpans);  for (int i=0; i < nChildren; i++) {    Component c=target.getComponent(i);    c.setBounds(in.left + xOffsets[i],in.top + yOffsets[i],xSpans[i],ySpans[i]);  }}  }
class C{  public boolean hangUpCall(){  if (super.isActive()) {    return super.isConnected() ? mSession.hangup() : mSession.reject();  }  return false;}  }
class C{  @Override public String toString(){  return "ZoneRules[currentStandardOffset=" + standardOffsets[standardOffsets.length - 1] + "]";}  }
class C{  public boolean readBoolean() throws IOException {  final int read=this.read();  if (read < 0) {    throw new EOFException("Can't read a boolean value");  }  return read != 0;}  }
class C{  public void writeByte(int dest,byte b){  int blockIndex=dest >> blockBits;  byte[] block=blocks.get(blockIndex);  block[dest & blockMask]=b;}  }
class C{  private ResultSet readData(Connection conn,String columnNames,String templateName) throws SQLException {  Statement stmt=conn.createStatement();  String sql="SELECT " + columnNames + " FROM "+ tableName+ " WHERE "+ keyColumn+ " = '"+ templateName+ "'";  return stmt.executeQuery(sql);}  }
class C{  private MediaStoreUtil(){}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public DoubleMetaphone(){  super();}  }
class C{  public static void virticallyAllignNodes(Node tallestNode,Collection<Node> nodesToAlign){  Point centerPoint=tallestNode.getNodePointValue(NodePoint.leftCenter);  int vOffset=0;  for (  Node node : nodesToAlign) {    vOffset=centerPoint.y - node.getNodePointValue(NodePoint.leftCenter).y;    node.moveNode(new Point(node.getNodePointValue(NodePoint.topLeft).x,node.getNodePointValue(NodePoint.topLeft).y + vOffset));  }}  }
class C{  public void testDivideBigDecimalScaleMathContextHALF_EVEN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=70;  int precision=21;  RoundingMode rm=RoundingMode.HALF_EVEN;  MathContext mc=new MathContext(precision,rm);  String c="2.77923185514690367475E+26";  int resScale=-6;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public String toString(){  return "ExtEvent @ " + this.time;}  }
class C{  public static short duplicate(short _short){  return _short;}  }
class C{  public CGotoStackAction(final JStackView stackView,final CStackMemoryProvider model){  super("Goto Stack Pointer");  m_stackView=stackView;  m_model=model;}  }
class C{  public void endVisit(CatchClause node){}  }
class C{  private void removeListeners(){  final Process process=debugger.getProcess();  process.removeListener(processListener);  for (  final Thread thread : process.getThreads()) {    thread.removeListener(threadListener);  }}  }
class C{  @Override public void clear(){  super.clear();  double[] keys=_set;  int[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  public String str(){  return m_val ? "true" : "false";}  }
class C{  public Property basicGetProperty(){  return property;}  }
class C{  private DataFilterCriterion(){}  }
class C{  public Arg(QName qname,String expression,boolean isFromWithParam){  m_qname=qname;  m_val=null;  m_expression=expression;  m_isFromWithParam=isFromWithParam;  m_isVisible=!isFromWithParam;}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding,boolean append) throws IOException {  FileOutputStream out=null;  try {    out=openOutputStream(file,append);    final BufferedOutputStream buffer=new BufferedOutputStream(out);    IOUtils.writeLines(lines,lineEnding,buffer,encoding);    buffer.flush();    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public void log(){  if (status == Status.TIMEDOUT_ANALYSIS) {    logger.warn("String analysis timed out.");  } else {    logger.debug("Done with String analysis");    logger.info("Generating regular expressions with timeout " + timeout);    generateRegexs();    if (reGenTimoutCount > 0) {      logger.warn("Regular expression generatation timed out on " + reGenTimoutCount + " of "+ hotspots.size()+ " hotspots.");    }  }}  }
class C{  public void clear(){synchronized (lock) {    if (items == null) {      return;    }    items.clear();  }  if (notifyOnChange) {    notifyDataSetChanged();  }}  }
class C{  public static void main(String[] args) throws FloodlightModuleException {  try {    System.setProperty("org.restlet.engine.loggerFacadeClass","org.restlet.ext.slf4j.Slf4jLoggerFacade");    CmdLineSettings settings=new CmdLineSettings();    CmdLineParser parser=new CmdLineParser(settings);    try {      parser.parseArgument(args);    } catch (    CmdLineException e) {      parser.printUsage(System.out);      System.exit(1);    }    FloodlightModuleLoader fml=new FloodlightModuleLoader();    try {      IFloodlightModuleContext moduleContext=fml.loadModulesFromConfig(settings.getModuleFile());      IRestApiService restApi=moduleContext.getServiceImpl(IRestApiService.class);      restApi.run();    } catch (    FloodlightModuleConfigFileNotFoundException e) {      logger.error("Could not read config file: {}",e.getMessage());      System.exit(1);    }    try {      fml.runModules();    } catch (    FloodlightModuleException e) {      logger.error("Failed to run controller modules",e);      System.exit(1);    }  } catch (  Exception e) {    logger.error("Exception in main",e);    System.exit(1);  }}  }
class C{  public boolean containsKey(double key){  return indexOfKey(key) >= 0;}  }
class C{  protected Size2D arrangeNF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  double height=constraint.getHeight() / this.rows;  RectangleConstraint bc=constraint.toFixedHeight(height);  List blocks=container.getBlocks();  double maxW=0.0;  for (int r=0; r < this.rows; r++) {    for (int c=0; c < this.columns; c++) {      int index=r * this.columns + c;      if (index >= blocks.size()) {        break;      }      Block b=(Block)blocks.get(index);      if (b != null) {        Size2D s=b.arrange(g2,bc);        maxW=Math.max(maxW,s.getWidth());      }    }  }  RectangleConstraint cc=constraint.toFixedWidth(maxW * this.columns);  return arrange(container,g2,cc);}  }
class C{  @Override @SuppressWarnings("unchecked") protected void heapifyUpComparable(int pos,Object elem){  final Comparable<Object> cur=(Comparable<Object>)elem;  while (pos > 0) {    final int parent=(pos - 1) >>> 1;    Object par=queue[parent];    if (cur.compareTo(par) >= 0) {      break;    }    queue[pos]=par;    index.put(par,pos);    pos=parent;  }  queue[pos]=cur;  index.put(cur,pos);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public int read() throws IOException {  if (markerFound) {    return -1;  }  int b;  if (isStuffed0xff) {    isStuffed0xff=false;    b=0xff;  } else {    b=read0();  }  if (segment.isEntropyCoded()) {    if (b == 0xff) {      b=read0();      if (b == 0x00) {        return 0xff;      } else       if (b == 0xff) {        isStuffed0xff=true;        return 0xff;      }      markerFound=true;      marker=0xff00 | b;      return -1;    }  }  return b;}  }
class C{  public void addYTextLabel(double y,String text){  addYTextLabel(y,text,0);}  }
class C{  public void clearMemoryAndDiskCache(){  model.clearMemoryAndDiskCache();}  }
class C{  public void replaceByPredictions() throws IOException {  System.out.println("\nReplacing errornous entries with the predicted values");  for (int folder=1; folder <= CFDsMergedSize; folder++) {    int numOfTargets=-1;    FileInputStream fs=new FileInputStream("exp/" + folder + "/setting.s");    BufferedReader br=new BufferedReader(new InputStreamReader(fs));    String line=br.readLine();    String[] targetAttr=null;    while (line != null) {      if (line.contains("Target = ")) {        targetAttr=line.substring(line.indexOf('=') + 1,line.length()).split(",");      }      if (line.contains("TargetSize = ")) {        line=line.replaceAll("\\D+","");        numOfTargets=Integer.parseInt(line);      } else       line=br.readLine();    }    if (numOfTargets < 0 || targetAttr == null) {      System.out.println("\nError: Coudln't complete method replaceByPredictions()");      System.exit(1);    }    FileInputStream fs0=new FileInputStream("exp/" + folder + "/setting.test.pred.arff");    BufferedReader br0=new BufferedReader(new InputStreamReader(fs0));    String predictedLine=br0.readLine();    while (predictedLine != null) {      if (predictedLine.contentEquals("@DATA")) {        predictedLine=br0.readLine();        break;      } else       predictedLine=br0.readLine();    }    FileInputStream fs1=new FileInputStream("exp/" + folder + "/test.arff");    BufferedReader br1=new BufferedReader(new InputStreamReader(fs1));    String tmpFileName="exp/" + folder + "/testCleaned.arff";    BufferedWriter bw=new BufferedWriter(new FileWriter(tmpFileName));    String testLine=br1.readLine();    bw.write(testLine);    while (testLine != null) {      if (testLine.toLowerCase().contentEquals("@data")) {        testLine=br1.readLine();        break;      } else       testLine=br1.readLine();      bw.write(testLine + "\n");    }    while (testLine != null) {      System.out.println("replacing: " + predictedLine.substring(0,Util.nthOccurrence(predictedLine,',',numOfTargets)));      System.out.println("To       : " + predictedLine.substring(Util.nthOccurrence(predictedLine,',',numOfTargets) + 1,Util.nthOccurrence(predictedLine,',',numOfTargets * 2)));      System.out.println("In       : " + testLine + "\n------------------");      String[] predictedValues=predictedLine.substring(Util.nthOccurrence(predictedLine,',',numOfTargets) + 1,Util.nthOccurrence(predictedLine,',',numOfTargets * 2)).split(",");      String[] testLineValues=testLine.split(",");      int predictedValuesIndex=0;      for (      String t : targetAttr) {        int tar=Integer.parseInt(t.replaceAll("[^0-9]",""));        testLineValues[tar - 1]=predictedValues[predictedValuesIndex];        predictedValuesIndex++;      }      StringBuilder replacedTestLine=new StringBuilder();      for (      String s : testLineValues) {        replacedTestLine.append(s + ",");      }      replacedTestLine.deleteCharAt(replacedTestLine.length() - 1);      testLine=replacedTestLine.toString();      bw.write(testLine + "\n");      predictedLine=br0.readLine();      testLine=br1.readLine();    }    fs.close();    br.close();    fs0.close();    br0.close();    fs1.close();    br1.close();    bw.close();    try {      printClassificationAccuracy("exp/" + folder + "/testCleaned.arff");    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public boolean isIn(int i){  return (i >= this.min) && (i <= this.max);}  }
class C{  protected void engineSetMode(String mode) throws NoSuchAlgorithmException {  core.setMode(mode);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private static boolean hasEulerianPath(Graph G){  if (G.E() == 0)   return true;  int oddDegreeVertices=0;  for (int v=0; v < G.V(); v++)   if (G.degree(v) % 2 != 0)   oddDegreeVertices++;  if (oddDegreeVertices > 2)   return false;  int s=nonIsolatedVertex(G);  BreadthFirstPaths bfs=new BreadthFirstPaths(G,s);  for (int v=0; v < G.V(); v++)   if (G.degree(v) > 0 && !bfs.hasPathTo(v))   return false;  return true;}  }
class C{  @Override protected void initListeners(){}  }
class C{  private void loadResource(Attributes atts){  final HumanResource hr;  try {    String id=atts.getValue("id");    if (id == null) {      hr=getResourceManager().newHumanResource();      hr.setName(atts.getValue("name"));      getResourceManager().add(hr);    } else {      hr=getResourceManager().create(atts.getValue("name"),Integer.parseInt(id));    }    myCurrentResource=hr;  } catch (  NumberFormatException e) {    System.out.println("ERROR in parsing XML File id is not numeric: " + e.toString());    return;  }  hr.setMail(atts.getValue("contacts"));  hr.setPhone(atts.getValue("phone"));  try {    String roleID=atts.getValue("function");    myLateResource2roleBinding.put(hr,roleID);  } catch (  NumberFormatException e) {    System.out.println("ERROR in parsing XML File function id is not numeric: " + e.toString());  }}  }
class C{  public void stop(){  if (srv != null)   srv.stop();  if (log.isDebugEnabled())   log.debug("Socket streaming server stopped");}  }
class C{  public static String toString(long x){  return toString(x,10);}  }
class C{  public Object visit(ASTBlock node,Object data){  return showNode(node,data);}  }
class C{  void run(){  log.info("Starting MATSim from Urbansim");  Network network=scenario.getNetwork();  modifyNetwork(network);  cleanNetwork(network);  prepareReadFromUrbanSim();  ActivityFacilitiesImpl parcels=(ActivityFacilitiesImpl)scenario.getActivityFacilities();  ActivityFacilitiesImpl zones=new ActivityFacilitiesImpl("urbansim zones");  ActivityFacilitiesImpl opportunities=new ActivityFacilitiesImpl("opportunity locations (e.g. workplaces) for zones or parcels");  if (isParcelMode) {    readFromUrbansim.readFacilitiesParcel(parcels,zones);    readFromUrbansim.readJobs(opportunities,parcels,this.isParcelMode);  } else {    readFromUrbansim.readFacilitiesZones(zones);    readFromUrbansim.readJobs(opportunities,zones,this.isParcelMode);  }  int pc=benchmark.addMeasure("Population construction");  Population newPopulation=readUrbansimPersons(parcels,zones,network);  modifyPopulation(newPopulation);  benchmark.stoppMeasurement(pc);  System.out.println("Population construction took: " + benchmark.getDurationInSeconds(pc) + " seconds.");  log.info("### DONE with demand generation from urbansim ###");  ((MutableScenario)scenario).setPopulation(newPopulation);  runControler(zones,parcels,opportunities);}  }
class C{  public void onDestroyView(){  if (bottomSheetLayout != null) {    viewDestroyed=true;    bottomSheetLayout.dismissSheet();    bottomSheetLayout=null;  }}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public JsonArray add(long value){  values.add(Json.value(value));  return this;}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  protected void matchReportReference(ASTNode reference,IJavaElement element,IJavaElement localElement,IJavaElement[] otherElements,Binding elementBinding,int accuracy,MatchLocator locator) throws CoreException {  if (this.isDeclarationOfReferencedTypesPattern) {    if ((element=findElement(element,accuracy)) != null)     reportDeclaration(reference,element,locator,((DeclarationOfReferencedTypesPattern)this.pattern).knownTypes);    return;  }  TypeReferenceMatch refMatch=locator.newTypeReferenceMatch(element,elementBinding,accuracy,reference);  refMatch.setLocalElement(localElement);  refMatch.setOtherElements(otherElements);  this.match=refMatch;  if (reference instanceof QualifiedNameReference)   matchReportReference((QualifiedNameReference)reference,element,elementBinding,accuracy,locator); else   if (reference instanceof QualifiedTypeReference)   matchReportReference((QualifiedTypeReference)reference,element,elementBinding,accuracy,locator); else   if (reference instanceof ArrayTypeReference)   matchReportReference((ArrayTypeReference)reference,element,elementBinding,accuracy,locator); else {    TypeBinding typeBinding=reference instanceof Expression ? ((Expression)reference).resolvedType : null;    if (typeBinding != null) {      matchReportReference((Expression)reference,-1,typeBinding,locator);      return;    }    locator.report(this.match);  }}  }
class C{  public static CCBitmapFontAtlas bitmapFontAtlas(CharSequence string,String fntFile){  return new CCBitmapFontAtlas(string,fntFile);}  }
class C{  private String convertTimeStampToString(String factTimeStamp){  SimpleDateFormat parser=new SimpleDateFormat(CarbonCommonConstants.CARBON_TIMESTAMP);  Date dateToStr=null;  try {    dateToStr=parser.parse(factTimeStamp);    return Long.toString(dateToStr.getTime());  } catch (  ParseException e) {    LOGGER.error("Cannot convert" + TIMESTAMP.toString() + " to Time/Long type value"+ e.getMessage());    return null;  }}  }
class C{  public DoubleMatrix2D assign(double value){  if (this.isNoView && value == 0)   this.elements.clear(); else   super.assign(value);  return this;}  }
class C{  public ContextedException(final String message,final Throwable cause){  super(message,cause);  exceptionContext=new DefaultExceptionContext();}  }
class C{  @SuppressWarnings("unchecked") public static List<LifecycleRule> parseGetBucketLifecycle(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    List<LifecycleRule> lifecycleRules=new ArrayList<LifecycleRule>();    List<Element> ruleElements=root.getChildren("Rule");    for (    Element ruleElem : ruleElements) {      LifecycleRule rule=new LifecycleRule();      if (ruleElem.getChild("ID") != null) {        rule.setId(ruleElem.getChildText("ID"));      }      if (ruleElem.getChild("Prefix") != null) {        rule.setPrefix(ruleElem.getChildText("Prefix"));      }      if (ruleElem.getChild("Status") != null) {        rule.setStatus(RuleStatus.valueOf(ruleElem.getChildText("Status")));      }      if (ruleElem.getChild("Expiration") != null) {        if (ruleElem.getChild("Expiration").getChild("Date") != null) {          Date expirationDate=DateUtil.parseIso8601Date(ruleElem.getChild("Expiration").getChildText("Date"));          rule.setExpirationTime(expirationDate);        } else         if (ruleElem.getChild("Expiration").getChild("Days") != null) {          rule.setExpirationDays(Integer.parseInt(ruleElem.getChild("Expiration").getChildText("Days")));        } else {          Date createdBeforeDate=DateUtil.parseIso8601Date(ruleElem.getChild("Expiration").getChildText("CreatedBeforeDate"));          rule.setCreatedBeforeDate(createdBeforeDate);        }      }      if (ruleElem.getChild("AbortMultipartUpload") != null) {        LifecycleRule.AbortMultipartUpload abortMultipartUpload=new LifecycleRule.AbortMultipartUpload();        if (ruleElem.getChild("AbortMultipartUpload").getChild("Days") != null) {          abortMultipartUpload.setExpirationDays(Integer.parseInt(ruleElem.getChild("AbortMultipartUpload").getChildText("Days")));        } else {          Date createdBeforeDate=DateUtil.parseIso8601Date(ruleElem.getChild("AbortMultipartUpload").getChildText("CreatedBeforeDate"));          abortMultipartUpload.setCreatedBeforeDate(createdBeforeDate);        }        rule.setAbortMultipartUpload(abortMultipartUpload);      }      lifecycleRules.add(rule);    }    return lifecycleRules;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  @Override public boolean canBeCollidedWith(){  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","njrts");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public static boolean isYear(String s){  if (isEmpty(s))   return defaultEmptyOK;  if (!isNonnegativeInteger(s))   return false;  return ((s.length() == 2) || (s.length() == 4));}  }
class C{  public Vset checkAmbigName(Environment env,Context ctx,Vset vset,Hashtable exp,UnaryExpression loc){  return checkCommon(env,ctx,vset,exp);}  }
class C{  @Deprecated public static Offset calculateElementOffset(Element childElement,Element ancestorElement,boolean includeScroll){  Offset offset=new Offset();  Element element=childElement;  for (; element.getOffsetParent() != null && element != ancestorElement; element=element.getOffsetParent()) {    offset.top+=element.getOffsetTop();    offset.left+=element.getOffsetLeft();    if (!includeScroll) {      offset.top-=element.getOffsetParent().getScrollTop();      offset.left-=element.getOffsetParent().getScrollLeft();    }  }  return offset;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;}  }
class C{  private void navigate(String url){  InputMethodManager imm=(InputMethodManager)this.cordova.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);  imm.hideSoftInputFromWindow(edittext.getWindowToken(),0);  if (!url.startsWith("http") && !url.startsWith("file:")) {    this.inAppWebView.loadUrl("http://" + url);  } else {    this.inAppWebView.loadUrl(url);  }  this.inAppWebView.requestFocus();}  }
class C{  public void start(){  super.start();  try {    URL wardsFile=PolySchelling.class.getResource("data/1991_wards_disolved_Project.shp");    ShapeFileImporter.read(wardsFile,world,Polygon.class);  } catch (  Exception ex) {    System.out.println("Error opening shapefile!" + ex);    System.exit(-1);  }  setup();}  }
class C{  private void drawFace(final Canvas canvas,final Bitmap view,final int top,final int left,final int centerX,final int centerY,final float scale,final float rotation){  if (mCamera == null) {    mCamera=new Camera();  }  mCamera.save();  mCamera.translate(0,0,centerY);  mCamera.rotateX(rotation);  mCamera.translate(0,0,-centerY);  if (mMatrix == null) {    mMatrix=new Matrix();  }  mCamera.getMatrix(mMatrix);  mCamera.restore();  mMatrix.preTranslate(-centerX,-centerY);  mMatrix.postScale(scale,scale);  mMatrix.postTranslate(left + centerX,top + centerY);  if (mPaint == null) {    mPaint=new Paint();    mPaint.setAntiAlias(true);    mPaint.setFilterBitmap(true);  }  if (mLightEnabled) {    mPaint.setColorFilter(calculateLight(rotation));  } else {    mPaint.setAlpha(0xFF - (int)(2 * Math.abs(rotation)));  }  canvas.drawBitmap(view,mMatrix,mPaint);}  }
class C{  public void train(TrainingConfig config){  config.addCredentials(this);  POST(this.url + "/train-instance",config.toXML());}  }
class C{  public static ReservationTokenAttribute createReservationTokenAttribute(byte token[]){  ReservationTokenAttribute attribute=new ReservationTokenAttribute();  attribute.setReservationToken(token);  return attribute;}  }
class C{  public List fetchRowsByUInstalacion(String[] idUnidadInstalacion){  StringBuffer qual=new StringBuffer("where ").append(DBUtils.generateInTokenField(UINSTALACION_RELACION_FIELD,idUnidadInstalacion));  StringBuffer orderBy=new StringBuffer(" order by ").append(UINSTALACION_COLUMN_NAME).append(",").append(POSUDOC_COLUMN_NAME);  return getPartesUnidadDocumental(qual.toString(),orderBy.toString());}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException("remove() is unsupported");}  }
class C{  private void cleanUpIndeterminateValues(){  if (progressBar.isDisplayable()) {    stopAnimationTimer();  }  cycleTime=repaintInterval=0;  numFrames=animationIndex=0;  maxPosition=0;  delta=0.0;  boxRect=nextPaintRect=null;  componentInnards=oldComponentInnards=null;  progressBar.removeHierarchyListener(getHandler());}  }
class C{  public static synchronized int register(DebugValue value){  String name=value.getName();  if (!keyMap.containsKey(name)) {    keyMap.put(name,debugValues.size());    debugValues.add(value);  }  return keyMap.get(name);}  }
class C{  public void postProcessBirthday(boolean root){  if (root && time_born == -1)   birthday=-1; else   if (time_born != -1)   birthday=(int)time_born; else   if (parent.embryo_division_time != -1)   birthday=(int)parent.embryo_division_time; else   if (parent.birthday >= post_embryonic_birthday)   birthday=parent.birthday + 1; else   birthday=post_embryonic_birthday;  for (int z=0; z < num_children; z++)   daughters[z].postProcessBirthday(false);  birthday+=2;}  }
class C{  protected void affectEntity(@Nullable Entity source,@Nullable Entity indirectSource,EntityLivingBase target,int amplifier,double health){}  }
class C{  public void start(final Player player){  final IRPZone playerZone=player.getZone();  if (playerZone.equals(zone)) {    this.player=player;    removeAllTokens();    addAllTokens();    timer=new Timer(player);    SingletonRepository.getTurnNotifier().notifyInTurns(0,timer);    moveCount=0;  }}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2));}  }
class C{  protected boolean isWhitespace(char ch){  return ((ch == '\t') || Character.isSpaceChar(ch));}  }
class C{  public int read(char[] cbuf,int off,int len) throws IOException {  int n=reader.read(cbuf,off,len);  if (n != 0 || len <= 0) {    return n;  } else {    if (off < cbuf.length) {      int c=reader.read();      if (c == -1)       return -1;      cbuf[off]=(char)c;      return 1;    } else     throw new IOException("Offset outside buffer");  }}  }
class C{  private static final int nextPiece(Position pos,int sq,int delta){  while (true) {    sq+=delta;    int p=pos.getPiece(sq);    if (p != Piece.EMPTY)     return p;  }}  }
class C{  private void expandRoot(){  TreeModel model=getModel();  if (model != null && model.getRoot() != null) {    expandPath(new TreePath(model.getRoot()));  }}  }
class C{  public void stopAnimation(Object animationName){  this.get(animationName).stop();}  }
class C{  @SuppressWarnings("deprecation") public void flip(FlipDirection dir,boolean aroundPlayer){  checkNotNull(dir);  final int width=getWidth();  final int length=getLength();  final int height=getHeight();switch (dir) {case WEST_EAST:    final int wid=(int)Math.ceil(width / 2.0f);  for (int xs=0; xs < wid; ++xs) {    for (int z=0; z < length; ++z) {      for (int y=0; y < height; ++y) {        BaseBlock block1=getBlock(xs,y,z);        if (block1 != null) {          block1.flip(dir);        }        if (xs == width - xs - 1) {          continue;        }        BaseBlock block2=getBlock(width - xs - 1,y,z);        if (block2 != null) {          block2.flip(dir);        }        setBlock(xs,y,z,block2);        setBlock(width - xs - 1,y,z,block1);      }    }  }if (aroundPlayer) {  offset=offset.setX(1 - offset.getX() - width);}break;case NORTH_SOUTH:final int len=(int)Math.ceil(length / 2.0f);for (int zs=0; zs < len; ++zs) {for (int x=0; x < width; ++x) {for (int y=0; y < height; ++y) {BaseBlock block1=getBlock(x,y,zs);if (block1 != null) {  block1.flip(dir);}if (zs == length - zs - 1) {  continue;}BaseBlock block2=getBlock(x,y,length - zs - 1);if (block2 != null) {  block2.flip(dir);}setBlock(x,y,zs,block2);setBlock(x,y,length - zs - 1,block1);}}}if (aroundPlayer) {offset=offset.setZ(1 - offset.getZ() - length);}break;case UP_DOWN:final int hei=(int)Math.ceil(height / 2.0f);for (int ys=0; ys < hei; ++ys) {for (int x=0; x < width; ++x) {for (int z=0; z < length; ++z) {BaseBlock block1=getBlock(x,ys,z);if (block1 != null) {block1.flip(dir);}if (ys == height - ys - 1) {continue;}BaseBlock block2=getBlock(x,height - ys - 1,z);if (block2 != null) {block2.flip(dir);}setBlock(x,ys,z,block2);setBlock(x,height - ys - 1,z,block1);}}}if (aroundPlayer) {offset=offset.setY(1 - offset.getY() - height);}break;}}  }
class C{  public boolean hasEulerianPath(){  return path != null;}  }
class C{  public void testEmptyRunIndex(){  String rs="runSetting";  Settings s=new Settings("Ns");  s.setSecondaryNamespace("DefNs");  assertEquals(s.getInt(rs),1);  Settings.setRunIndex(1);  assertEquals(s.getInt(rs),1);  Settings.setRunIndex(2);  assertEquals(s.getInt(rs),2);  Settings.setRunIndex(3);  assertEquals(s.getInt(rs),1);}  }
class C{  public static boolean isCSSHexadecimalCharacter(char c){  return c < 128 && ((HEXADECIMAL[c >> 5] & (1 << (c & 0x1F))) != 0);}  }
class C{  public static Word prepareAvailableBits(Object o){  return Magic.prepareWord(o,STATUS_OFFSET);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public void testWeak() throws InterruptedException {  Set<Object> objectSet=new WeakHashSet<Object>();  objectSet.add(new Object());  for (int i=0; i < 1000000; ++i) {    new Object();  }  System.gc();  Thread.sleep(100);  assertTrue(objectSet.isEmpty());}  }
class C{  public void addToTweetSocialProofs(byte socialProofType,SmallArrayBasedLongToDoubleMap userSocialProofs,long rightNode,int maxUserSocialProofSize,int maxTweetSocialProofSize){  Map<Long,LongList> socialProofByType=socialProof.get(socialProofType);  long[] leftNodes=userSocialProofs.keys();  if (socialProofByType == null) {    socialProofByType=new HashMap<Long,LongList>();    for (int i=0; i < userSocialProofs.size(); i++) {      LongList tweetIds=new LongArrayList(INITIAL_TWEET_ARRAY_SIZE);      tweetIds.add(rightNode);      socialProofByType.put(leftNodes[i],tweetIds);    }    socialProof.put(socialProofType,socialProofByType);  } else {    for (int i=0; i < userSocialProofs.size(); i++) {      LongList tweetIds=socialProofByType.get(leftNodes[i]);      if (socialProofByType.size() < maxUserSocialProofSize) {        if (tweetIds == null) {          tweetIds=new LongArrayList(INITIAL_TWEET_ARRAY_SIZE);          socialProofByType.put(leftNodes[i],tweetIds);        }        if (tweetIds.size() < maxTweetSocialProofSize) {          tweetIds.add(rightNode);        }      } else {        if (tweetIds != null && tweetIds.size() < maxTweetSocialProofSize) {          tweetIds.add(rightNode);        }      }    }  }}  }
class C{  public void createSubsampleWithReplacement(Random random,int origSize,int sampleSize){  for (int i=0; i < sampleSize; i++) {    int index=random.nextInt(origSize);    push((Instance)getInputFormat().instance(index).copy());  }}  }
class C{  public EmpiricalMeasurementDistribution computeSignificance(int numPermutationsToCheck) throws Exception {  return miKernel.computeSignificance(numPermutationsToCheck);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean hasVibroblades(){  int count=0;  if (hasVibrobladesInLocation(Mech.LOC_RARM)) {    count++;  }  if (hasVibrobladesInLocation(Mech.LOC_LARM)) {    count++;  }  return count > 0;}  }
class C{  public boolean isAllow_Info_Account(){  Object oo=get_Value(COLUMNNAME_Allow_Info_Account);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected static void emit_action_code(PrintStream out,production start_prod) throws internal_error {  production prod;  long start_time=System.currentTimeMillis();  out.println();  out.println("/** JavaCup generated class to encapsulate user supplied action code.*/");  out.println("class " + pre("actions") + " {");  if (action_code != null) {    out.println();    out.println(action_code);  }  out.println();  out.println("  /** Constructor */");  out.println("  " + pre("actions") + "() { }");  out.println();  out.println("  /** Method with the actual generated action code. */");  out.println("  public final java_cup.runtime.symbol " + pre("do_action") + "(");  out.println("    int                        " + pre("act_num,"));  out.println("    java_cup.runtime.lr_parser " + pre("parser,"));  out.println("    java.util.Stack            " + pre("stack,"));  out.println("    int                        " + pre("top)"));  out.println("    throws java.lang.Exception");  out.println("    {");  out.println("      /* object for return from actions */");  out.println("      java_cup.runtime.symbol " + pre("result") + ";");  out.println();  out.println("      /* select the action based on the action number */");  out.println("      switch (" + pre("act_num") + ")");  out.println("        {");  for (Enumeration p=production.all(); p.hasMoreElements(); ) {    prod=(production)p.nextElement();    out.println("          /*. . . . . . . . . . . . . . . . . . . .*/");    out.println("          case " + prod.index() + ": // "+ prod.to_simple_string());    out.println("            {");    if (debug_grammar != null)     out.println("             " + debug_grammar + "(\""+ prod.to_simple_string()+ "\");");    out.println("              " + pre("result") + " = new "+ prod.lhs().the_symbol().stack_type()+ "(/*"+ prod.lhs().the_symbol().name()+ "*/"+ prod.lhs().the_symbol().index()+ ");");    if (prod.action() != null && prod.action().code_string() != null && !prod.action().equals(""))     out.println("              " + prod.action().code_string());    out.println("            }");    if (prod == start_prod) {      out.println("          /* ACCEPT */");      out.println("          " + pre("parser") + ".done_parsing();");    }    out.println("          return " + pre("result") + ";");    out.println();  }  out.println("          /* . . . . . .*/");  out.println("          default:");  out.println("            throw new Exception(");  out.println("               \"Invalid action number found in " + "internal parse table\");");  out.println();  out.println("        }");  out.println("    }");  out.println("};\n");  action_code_time=System.currentTimeMillis() - start_time;}  }
class C{  public void addPixel(float x,float y,float z,float width,float height,float length){  addPixel(x,y,z,new float[]{width,height,length},textureOffsetX,textureOffsetY);}  }
class C{  private AddressingModeTwoGenerator(){}  }
class C{  private Duration plus(long secondsToAdd,long nanosToAdd){  if ((secondsToAdd | nanosToAdd) == 0) {    return this;  }  long epochSec=Math.addExact(seconds,secondsToAdd);  epochSec=Math.addExact(epochSec,nanosToAdd / NANOS_PER_SECOND);  nanosToAdd=nanosToAdd % NANOS_PER_SECOND;  long nanoAdjustment=nanos + nanosToAdd;  return ofSeconds(epochSec,nanoAdjustment);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static void register(){  final WrapAction wrap=new WrapAction();  CommandCenter.register("wrap",wrap,800);}  }
class C{  public void testChecksumTypeFailure() throws Exception {  Serializer serializer=new ProtobufSerializer();  ReplDBMSEvent replEvent=new ReplDBMSEvent(32,(short)0,true,"unittest",1,new Timestamp(System.currentTimeMillis()),new DBMSEvent());  LogFile tfrw=writeToLogFile("testChecksumTypeFailure.dat",replEvent);  RandomAccessFile raf=new RandomAccessFile(tfrw.getFile(),"rw");  long len=raf.length();  raf.seek(len - 9);  raf.writeByte(25);  raf.close();  LogFile tfro=LogHelper.openExistingFileForRead("testChecksumTypeFailure.dat");  LogRecord logRec2=tfro.readRecord(0);  try {    LogEventReplReader reader=new LogEventReplReader(logRec2,serializer,true);    throw new Exception("Able to instantiate reader with corrupt CRC type: reader=" + reader.toString());  } catch (  LogConsistencyException e) {    logger.info("Got expected exception: " + e.toString(),e);  } finally {    tfro.close();  }  tfro=LogHelper.openExistingFileForRead("testChecksumTypeFailure.dat");  logRec2=tfro.readRecord(0);  try {    LogEventReplReader reader=new LogEventReplReader(logRec2,serializer,false);    reader.deserializeEvent();    reader.done();    assertEquals("Checking recordType",LogRecord.EVENT_REPL,reader.getRecordType());    assertEquals("Checking setno",32,reader.getSeqno());    logger.info("Able to ignore bad checksum type with checksums disabled...");  }  finally {    tfro.close();  }}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public ServiceHelper startTimeoutSeconds(int timeoutSeconds){  this.timeoutSeconds=timeoutSeconds;  return this;}  }
class C{  protected void sequence_TAnonymousFormalParameterList_TStructMethod(ISerializationContext context,TStructMethod semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void unshare(int needExtra){  int sharedLen=_inputLen;  _inputLen=0;  char[] inputBuf=_inputBuffer;  _inputBuffer=null;  int start=_inputStart;  _inputStart=-1;  int needed=sharedLen + needExtra;  if (_currentSegment == null || needed > _currentSegment.length) {    _currentSegment=findBuffer(needed);  }  if (sharedLen > 0) {    System.arraycopy(inputBuf,start,_currentSegment,0,sharedLen);  }  _segmentSize=0;  _currentSize=sharedLen;}  }
class C{  public static int computeMessageSize(final int fieldNumber,final MessageNano value){  return computeTagSize(fieldNumber) + computeMessageSizeNoTag(value);}  }
class C{  public static void addPassThroughData(Intent requestQueryIntent,Bundle data){  Bundle passThroughBundle=retrieveOrCreatePassThroughBundle(requestQueryIntent);  passThroughBundle.putAll(data);}  }
class C{  public static String stringFor(int n){switch (n) {case CU_LIMIT_STACK_SIZE:    return "CU_LIMIT_STACK_SIZE";case CU_LIMIT_PRINTF_FIFO_SIZE:  return "CU_LIMIT_PRINTF_FIFO_SIZE";case CU_LIMIT_MALLOC_HEAP_SIZE:return "CU_LIMIT_MALLOC_HEAP_SIZE";case CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH:return "CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH";case CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT:return "CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT";}return "INVALID CUlimit: " + n;}  }
class C{  public static <E>E parse(String jsonString,ParameterizedType<E> jsonObjectType) throws IOException {  return mapperFor(jsonObjectType).parse(jsonString);}  }
class C{  public Interval(T a,double start,double end){  this.a=a;  this.start=start;  this.end=end;}  }
class C{  static MediaType createVideoType(String subtype){  return create(VIDEO_TYPE,subtype);}  }
class C{  protected EventDefinitionImpl(){  super();}  }
class C{  public static IStatus validateClassFileName(String name,String sourceLevel,String complianceLevel){  if (name == null) {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_nullName,null);  }  if (!org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(name)) {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_notClassFileName,null);  }  String identifier;  int index;  index=name.lastIndexOf('.');  if (index == -1) {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_notClassFileName,null);  }  identifier=name.substring(0,index);  if (!identifier.equals(PACKAGE_INFO)) {    IStatus status=validateIdentifier(identifier,sourceLevel,complianceLevel);    if (!status.isOK()) {      return status;    }  }  return JavaModelStatus.VERIFIED_OK;}  }
class C{  private static void printHelp(){  System.out.println("Usage:\n" + "\n" + "$> ParallelIndexer -i <index> <-d <image-directory> | -l <image-list>> [-n <number of threads>]\n"+ "\n"+ "index             ... The directory of the index. Will be appended or created if not existing.\n"+ "images-directory  ... The directory the images are found in. It's traversed recursively.\n"+ "image-list        ... A list of images in a file, one per line. Use instead of images-directory.\n"+ "number of threads ... The number of threads used for extracting features, e.g. # of CPU cores.");}  }
class C{  public boolean retainAll(AbstractLongList other){  if (!(other instanceof LongArrayList))   return super.retainAll(other);  int limit=other.size() - 1;  int j=0;  long[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    LongArrayList sortedList=(LongArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) >= 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  public static void waitTextToDisappear(String text){  instrumentation.waitForIdleSync();  SOLO.waitForText(text,1,VERY_SHORT_WAIT_TIME);  while (SOLO.waitForText(text,1,VERY_SHORT_WAIT_TIME)) {  }  return;}  }
class C{  protected void drawRangeCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,double value,ValueAxis axis,Stroke stroke,Paint paint){  if (!axis.getRange().contains(value)) {    return;  }  Line2D line;  if (orientation == PlotOrientation.HORIZONTAL) {    double xx=axis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);    line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());  } else {    double yy=axis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);    line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);  }  g2.setStroke(stroke);  g2.setPaint(paint);  g2.draw(line);}  }
class C{  public UtilityTable(){  table=new HashMap<Assignment,UtilityEstimate>();  variables=new HashSet<String>();}  }
class C{  public static void append(Path self,Object text) throws IOException {  append(self,text,Charset.defaultCharset().name(),false);}  }
class C{  boolean isDtoInterface(Class<?> potentialDto){  for (  DtoImpl dto : getDtoInterfaces()) {    if (dto.getDtoInterface().equals(potentialDto)) {      return true;    }  }  return false;}  }
class C{  public GridTcpMemcachedNioListener(IgniteLogger log,GridRestProtocolHandler hnd,GridKernalContext ctx){  this.log=log;  this.hnd=hnd;  this.ctx=ctx;}  }
class C{  public static boolean isArithmeticOperator(Kind kind){switch (kind) {case MINUS:case PLUS:case MULTIPLY:case DIVIDE:case AND:case OR:case XOR:    return true;default :  return false;}}  }
class C{  public IndexType canGoThroughIndex(ORExpression query,List<byte[]> rowkeys){  if (query == null || query.getANDExprList() == null || query.getANDExprList().isEmpty())   return IndexType.NON_CLUSTER_INDEX;  if (rowkeys != null) {    rowkeys.clear();  }  final Map<String,String> indexfieldMap=new HashMap<String,String>();  for (  ANDExpression andExpr : query.getANDExprList()) {    indexfieldMap.clear();    for (    AtomicExpression ae : andExpr.getAtomicExprList()) {      final String fieldName=parseEntityAttribute(ae.getKey());      if (fieldName != null && ComparisonOperator.EQUAL.equals(ae.getOp())) {        indexfieldMap.put(fieldName,ae.getValue());      }    }    final String[] partitions=entityDef.getPartitions();    int[] partitionValueHashs=null;    if (partitions != null) {      partitionValueHashs=new int[partitions.length];      for (int i=0; i < partitions.length; ++i) {        final String value=indexfieldMap.get(partitions[i]);        if (value == null) {          throw new IllegalArgumentException("Partition " + partitions[i] + " is not defined in the query: "+ query.toString());        }        partitionValueHashs[i]=value.hashCode();      }    }    final byte[][] indexFieldValues=new byte[columns.length][];    for (int i=0; i < columns.length; ++i) {      final IndexColumn col=columns[i];      if (!indexfieldMap.containsKey(col.getColumnName())) {        return IndexType.NON_INDEX;      }      final String value=indexfieldMap.get(col.getColumnName());      indexFieldValues[i]=value.getBytes();    }    final byte[] rowkey=generateUniqueIndexRowkey(indexFieldValues,partitionValueHashs,null);    if (rowkeys != null) {      rowkeys.add(rowkey);    }  }  if (index.unique()) {    return IndexType.UNIQUE_INDEX;  }  return IndexType.NON_CLUSTER_INDEX;}  }
class C{  public static void assertEquals(double d1,double d2){  try {    DEFAULT_ERROR.assertEquals(d1,d2);  } catch (  AssertionError e) {    if (((d1 != 0.0) && (d2 != 0.0)) || (Math.abs(d1 - d2) > 0.05)) {      throw e;    }  }}  }
class C{  @Override public boolean supportsFloatValues(){  return SUPPORTS_FLOAT_VALUES;}  }
class C{  public int hashCode(){  int h=0;  for (int i=0; i < keyUniverse.length; i++) {    if (null != vals[i]) {      h+=entryHashCode(i);    }  }  return h;}  }
class C{  public void onCharacteristicRead(String address,int status,int srvcType,int srvcInstId,ParcelUuid srvcUuid,int charInstId,ParcelUuid charUuid,byte[] value){  if (DBG)   Log.d(TAG,"onCharacteristicRead() - Device=" + address + " UUID="+ charUuid+ " Status="+ status);  if (!address.equals(mDevice.getAddress())) {    return;  }  if ((status == GATT_INSUFFICIENT_AUTHENTICATION || status == GATT_INSUFFICIENT_ENCRYPTION) && mAuthRetry == false) {    try {      mAuthRetry=true;      mService.readCharacteristic(mClientIf,address,srvcType,srvcInstId,srvcUuid,charInstId,charUuid,AUTHENTICATION_MITM);      return;    } catch (    RemoteException e) {      Log.e(TAG,"",e);    }  }  mAuthRetry=false;  BluetoothGattService service=getService(mDevice,srvcUuid.getUuid(),srvcInstId,srvcType);  if (service == null)   return;  BluetoothGattCharacteristic characteristic=service.getCharacteristic(charUuid.getUuid(),charInstId);  if (characteristic == null)   return;  if (status == 0)   characteristic.setValue(value);  try {    mCallback.onCharacteristicRead(BluetoothGatt.this,characteristic,status);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  public void deleteBoundingBox(BoundingBox box){  if (this.bboxes != null) {    this.bboxes.remove(box);  }}  }
class C{  public boolean hasNewFacts(){  return !newFacts.isEmpty();}  }
class C{  public void enqueue(Item item){  Node oldlast=last;  last=new Node();  last.item=item;  last.next=null;  if (isEmpty())   first=last; else   oldlast.next=last;  n++;  assert check();}  }
class C{  public boolean isEnableBlending(){  return false;}  }
class C{  public void APIObject(String Object,String url,String username,String password,JSONBuilder jsonString){  HTTPController api=new HTTPController(username,password);  SAXBuilder sb=new SAXBuilder();  try {    String result="";    Document doc=null;    if (!Object.equals("summarydata")) {      try {        result=replaceSpecChars(api.doGet(url + "/JSSResource/" + Object));        doc=sb.build(new ByteArrayInputStream(result.getBytes("UTF-8")));      } catch (      Exception e) {        System.out.println("Unable to parse XML document for object: " + Object);      }    } else {      System.out.println("Parsing JSS Summary..");      jsonString.addObject("password_strength");      String[] password_info=this.summary.getPasswordInformation();      jsonString.addElement("uppercase?",password_info[0]);      jsonString.addElement("lowercase?",password_info[1]);      jsonString.addElement("number?",password_info[2]);      jsonString.addFinalElement("spec_chars?",password_info[3]);      jsonString.closeObject();      String[] change_info=this.summary.getChangeManagementInfo();      jsonString.addObject("changemanagment");      jsonString.addElement("isusinglogfile",change_info[0]);      jsonString.addFinalElement("logpath",change_info[1]);      jsonString.closeObject();      String[] tomcat_info=this.summary.getTomcatCert();      jsonString.addObject("tomcat");      jsonString.addElement("ssl_cert_issuer",tomcat_info[0]);      jsonString.addFinalElement("cert_expires",tomcat_info[1]);      jsonString.closeObject();      jsonString.addObject("logflushing");      jsonString.addFinalElement("log_flush_time",this.summary.getLogFlushingInfo());      jsonString.closeObject();      String[] push_cert_info=this.summary.getPushCertInfo();      jsonString.addObject("push_cert_expirations");      jsonString.addElement("mdm_push_cert",push_cert_info[0]);      jsonString.addFinalElement("push_proxy",push_cert_info[1]);      jsonString.closeObject();      jsonString.addObject("loginlogouthooks");      jsonString.addFinalElement("is_configured",this.summary.loginLogoutHooksEnabled().toString());      jsonString.closeObject();      try {        String[] device_table_counts=this.summary.getTableRowCounts().split(",");        jsonString.addObject("device_row_counts");        jsonString.addElement("computers",device_table_counts[0]);        jsonString.addElement("computers_denormalized",device_table_counts[1]);        jsonString.addElement("mobile_devices",device_table_counts[2]);        jsonString.addFinalElement("mobile_devices_denormalized",device_table_counts[3]);        jsonString.closeObject();      } catch (      Exception e) {        System.out.println("Unable to parse table row counts from the JSS Summary.");      }    }    if (Object.equals("activationcode")) {      List<Element> activationcode=doc.getRootElement().getChildren();      jsonString.addObject("activationcode");      jsonString.addElement("expires",this.summary.getActivationCodeExpiration());      jsonString.addFinalElement("code",activationcode.get(1).getValue());      jsonString.closeObject();    } else     if (Object.equals("computercheckin")) {      List<Element> computercheckin=doc.getRootElement().getChildren();      jsonString.addObject("computercheckin");      jsonString.addFinalElement("frequency",computercheckin.get(0).getValue());      jsonString.closeObject();    } else     if (Object.equals("ldapservers")) {      List<Element> ldapservers=doc.getRootElement().getChildren();      ArrayList<String> ldap_servers=parseMultipleObjects(ldapservers);      jsonString.addArrayObject("ldapservers");      for (int l=0; l < ldap_servers.size(); l++) {        String ldap_info=api.doGet(url + "/JSSResource/ldapservers/id/" + ldap_servers.get(l));        Document account_as_xml=sb.build(new ByteArrayInputStream(ldap_info.getBytes("UTF-8")));        List<Element> serv=account_as_xml.getRootElement().getChildren();        jsonString.openArrayObject();        jsonString.addElement("id",serv.get(0).getContent().get(0).getValue());        jsonString.addElement("name",serv.get(0).getContent().get(1).getValue());        jsonString.addElement("type",serv.get(0).getContent().get(3).getValue());        jsonString.addFinalElement("address",serv.get(0).getContent().get(2).getValue());        jsonString.closeObject();      }      if (ldap_servers.size() > 0) {        jsonString.removeComma();      }      jsonString.closeArrayObject();    } else     if (Object.equals("gsxconnection")) {      List<Element> gsxconnection=doc.getRootElement().getChildren();      jsonString.addObject("gsxconnection");      if (gsxconnection.get(0).getValue().equals("true")) {        jsonString.addElement("status","enabled");        jsonString.addFinalElement("uri",gsxconnection.get(5).getValue());      } else {        jsonString.addFinalElement("status","disabled");      }      jsonString.closeObject();    } else     if (Object.equals("managedpreferenceprofiles")) {      List<Element> managedpreferenceprofiles=doc.getRootElement().getChildren();      jsonString.addObject("managedpreferenceprofiles");      if (!(managedpreferenceprofiles.get(0).getValue().equals("0"))) {        jsonString.addFinalElement("status","enabled");      } else {        jsonString.addFinalElement("status","disabled");      }      jsonString.closeObject();    } else     if (Object.equals("computergroups") || Object.equals("mobiledevicegroups") || Object.equals("usergroups")) {      parseGroupObjects(Object,url,username,password,jsonString);    } else     if (Object.equals("vppaccounts")) {      List<Element> vpp_accounts=doc.getRootElement().getChildren();      ArrayList<String> vpp_account_ids=parseMultipleObjects(vpp_accounts);      Date date=new Date();      jsonString.addArrayObject("vppaccounts");      for (int a=0; a < vpp_account_ids.size(); a++) {        String account_info=api.doGet(url + "/JSSResource/vppaccounts/id/" + vpp_account_ids.get(a));        Document account_as_xml=sb.build(new ByteArrayInputStream(account_info.getBytes("UTF-8")));        List<Element> acc=account_as_xml.getRootElement().getChildren();        String exp_date=acc.get(5).getContent().get(0).getValue();        jsonString.openArrayObject();        jsonString.addElement("id",acc.get(0).getContent().get(0).getValue());        jsonString.addElement("name",acc.get(1).getContent().get(0).getValue());        jsonString.addFinalElement("days_until_expire",Long.toString(calculateDays(dateFormat.format(date),exp_date)));        jsonString.closeObject();      }      if (vpp_accounts.size() > 1) {        jsonString.removeComma();      }      jsonString.closeArrayObject();    } else     if (Object.equals("scripts")) {      List<Element> scripts=doc.getRootElement().getChildren();      ArrayList<String> script_ids=parseMultipleObjects(scripts);      ArrayList<String> scripts_needing_update=new ArrayList<>();      jsonString.addArrayObject("scripts_needing_update");      for (int s=0; s < script_ids.size(); s++) {        String script_info=api.doGet(url + "/JSSResource/scripts/id/" + script_ids.get(s));        Document script_as_xml=sb.build(new ByteArrayInputStream(script_info.getBytes("UTF-8")));        List<Element> script=script_as_xml.getRootElement().getChildren();        String script_name="";        if (script.size() > 0) {          script_name=script.get(1).getContent().get(0).getValue();        }        String script_code="";        if (script.size() >= 10) {          if (script.get(9).getContent().size() > 0) {            script_code=script.get(9).getContent().get(0).getValue();          }        }        if (script_code.toLowerCase().contains("/usr/sbin/jamf") || script_code.toLowerCase().contains("rm -rf") || script_code.toLowerCase().contains("jamf recon")) {          scripts_needing_update.add(script_name);        }      }      if (scripts_needing_update.size() > 0) {        for (int s=0; s < scripts_needing_update.size(); s++) {          jsonString.openArrayObject();          jsonString.addFinalElement("name",scripts_needing_update.get(s));          jsonString.closeObject();        }        jsonString.removeComma();      }      jsonString.closeArrayObject();    } else     if (Object.equals("printers")) {      List<Element> printers=doc.getRootElement().getChildren();      ArrayList<String> printer_ids=parseMultipleObjects(printers);      jsonString.addArrayObject("printer_warnings");      int xerox_count=0;      for (int p=0; p < printer_ids.size(); p++) {        String printer_info=api.doGet(url + "/JSSResource/printers/id/" + printer_ids.get(p));        Document printer_as_xml=sb.build(new ByteArrayInputStream(printer_info.getBytes("UTF-8")));        List<Element> printer=printer_as_xml.getRootElement().getChildren();        if (printer.get(6).getContent().size() != 0) {          String printer_model=printer.get(6).getContent().get(0).getValue();          if (printer_model.toLowerCase().contains("xerox")) {            xerox_count++;            jsonString.openArrayObject();            jsonString.addFinalElement("model",printer_model);            jsonString.closeObject();          }        }      }      if (xerox_count > 0) {        jsonString.removeComma();      }      jsonString.closeArrayObject();    } else     if (Object.equals("computerextensionattributes")) {      parseObjectCount(Object,url,username,password,jsonString);    } else     if (Object.equals("mobiledeviceextensionattributes")) {      parseObjectCount(Object,url,username,password,jsonString);    } else     if (Object.equals("computerconfigurations")) {      parseObjectCount(Object,url,username,password,jsonString);    } else     if (Object.equals("networksegments")) {      parseObjectCount(Object,url,username,password,jsonString);    } else     if (Object.equals("policies")) {      List<Element> policies=doc.getRootElement().getChildren();      ArrayList<String> policy_ids=parseMultipleObjects(policies);      jsonString.addArrayObject("policies_with_issues");      int issue_policy_count=0;      for (int p=0; p < policy_ids.size(); p++) {        String policy_info=api.doGet(url + "/JSSResource/policies/id/" + policy_ids.get(p));        Document policy_info_as_xml=sb.build(new ByteArrayInputStream(policy_info.getBytes("UTF-8")));        List<Element> policy=policy_info_as_xml.getRootElement().getChildren();        if ((policy.get(9).getContent().get(0).getValue().equals("true")) && (policy.get(0).getContent().get(11).getValue().equals("Ongoing") && policy.get(0).getContent().get(4).getValue().equals("true"))) {          jsonString.openArrayObject();          jsonString.addElement("name",policy.get(0).getContent().get(1).getValue());          jsonString.addElement("ongoing",Boolean.toString(policy.get(9).getContent().get(0).getValue().equals("true") && policy.get(0).getContent().get(11).getValue().equals("Ongoing")));          jsonString.addFinalElement("checkin_trigger",Boolean.toString(policy.get(0).getContent().get(4).getValue().equals("true")));          jsonString.closeObject();          issue_policy_count++;        }      }      if (issue_policy_count > 0) {        jsonString.removeComma();      }      jsonString.closeArrayObject();    } else     if (Object.equals("smtpserver")) {      List<Element> smtp_server=doc.getRootElement().getChildren();      jsonString.addObject("smtpserver");      if (smtp_server.get(10).getContent().size() > 0) {        jsonString.addElement("server",smtp_server.get(1).getContent().get(0).getValue());        jsonString.addFinalElement("sender_email",smtp_server.get(10).getContent().get(0).getValue());      }      jsonString.closeFinalObject();    }  } catch (  Exception e) {    if (Object.equals("activationcode") || Object.equals("computercheckin") || Object.equals("gsxconnection")|| Object.equals("managedpreferenceprofiles")) {      jsonString.closeObject();    } else     if (Object.equals("ldapservers") || Object.equals("vppaccounts") || Object.equals("printers")|| Object.equals("scripts")|| Object.equals("policies")) {      jsonString.closeArrayObject();    } else     if (Object.equals("smtpserver")) {      jsonString.closeFinalObject();    }    System.out.println("Error making API call: " + e);    e.printStackTrace();  }}  }
class C{  @RequestMapping(value={"/{cg}/{key}","/{cg}/{key}/"},method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("cg") String configGroup,@PathVariable("key") String key,Principal principal){  RestWrapper restWrapper=null;  try {    GeneralConfig generalConfig=new GeneralConfig();    generalConfig.setConfigGroup(configGroup);    generalConfig.setKey(key);    GeneralConfigId jpaGeneralConfigId=new GeneralConfigId();    jpaGeneralConfigId.setConfigGroup(generalConfig.getConfigGroup());    jpaGeneralConfigId.setGcKey(generalConfig.getKey());    generalConfigDAO.delete(jpaGeneralConfigId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with key:" + key + " deleted from general_config by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public String name(){  return name;}  }
class C{  public Object parse(Map params,URL url,String charset){  return parseURL(url,params,charset);}  }
class C{  private void fetchStreamStart(){  Mark mark=reader.getMark();  Token token=new StreamStartToken(mark,mark);  this.tokens.add(token);}  }
class C{  public String formatDate(double date){switch (m_Type) {case DATE:    return ((DateAttributeInfo)m_AttributeInfo).m_DateFormat.format(new Date((long)date));default :  throw new IllegalArgumentException("Can only format date values for date" + " attributes!");}}  }
class C{  public void addRet(int var){  if (var < 0x100) {    addOpcode(RET);    add(var);  } else {    addOpcode(WIDE);    addOpcode(RET);    addIndex(var);  }}  }
class C{  public static void test(int size){  Timer t=new Timer().start();  int j=0;  for (int i=0; i < size; i++) {    j++;  }  t.stop();  t.display();  System.out.println("I finished the test using " + t);  j=0;  for (int i=0; i < size; i++) {    j++;  }  t.start();  j=0;  for (int i=0; i < size; i++) {    j++;  }  t.stop().display();  t.reset();  t.start();  j=0;  for (int i=0; i < size; i++) {    j++;  }  t.stop().display();}  }
class C{  public static DomainApplicationIndex createUpdatedInstance(DomainApplication application){  DomainApplicationIndex existing=load(application.getFullyQualifiedDomainName());  ImmutableSet<Key<DomainApplication>> newKeys=CollectionUtils.union((existing == null ? ImmutableSet.<Key<DomainApplication>>of() : existing.getKeys()),Key.create(application));  return createWithSpecifiedKeys(application.getFullyQualifiedDomainName(),newKeys);}  }
class C{  public final void execute(@NotNull List<FinalizableCommand> commandList,@NotNull Condition expired){synchronized (myLock) {    final boolean isBusy=myCommandCount > 0;    final CommandGroup commandGroup=new CommandGroup(commandList,expired);    myCommandGroupList.add(commandGroup);    myCommandCount+=commandList.size();    if (!isBusy) {      run();    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected LibraryInfo generateLibraryInfo(File javaHome,File javaExecutable){  LibraryInfo info=null;  IPath classesZip=new Path(javaHome.getAbsolutePath()).append(LIB).append("classes.zip");  if (classesZip.toFile().exists()) {    return new LibraryInfo("1.1.x",new String[]{classesZip.toOSString()},new String[0],new String[0]);  }  if (info == null) {    Launching.log(NLS.bind("Failed to retrieve default libraries for {0}",new String[]{javaHome.getAbsolutePath()}));  }  return info;}  }
class C{  public static IndependenceResult serializableInstance(){  return new IndependenceResult(1,"X _||_ Y",Type.DEPENDENT,0.0001);}  }
class C{  public SVGDrawingPanelSample(){  initComponents();  setSize(new Dimension(600,400));}  }
class C{  private void dispatchTakePictureIntent(){  Intent takePictureIntent=createCameraIntent();  if (takePictureIntent != null) {    try {      File imageFile=createImageFile();      takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(imageFile));      startActivityForResult(takePictureIntent,REQUEST_IMAGE_CAPTURE);    } catch (    IOException e) {      genericError("Could not create imageFile for camera");    }  }}  }
class C{  protected void startDocumentInternal() throws org.xml.sax.SAXException {  super.startDocumentInternal();  m_needToCallStartDocument=false;  m_needToOutputDocTypeDecl=true;  m_startNewLine=false;  setOmitXMLDeclaration(true);}  }
class C{  public static void showWarningMsg(final Object... messages){  Sound.beepOnWarning();  JOptionPane.showMessageDialog(Env.CURRENT_GUI_FRAME.get(),messages,"Warning!",JOptionPane.WARNING_MESSAGE);}  }
class C{  private final OpDefNode processModuleDefinition(TreeNode treeNode,Vector defs,Vector insts,ModuleNode cm) throws AbortException {  boolean localness=treeNode.zero() != null;  TreeNode[] children=treeNode.one()[0].heirs();  UniqueString name=children[0].getUS();  FormalParamNode[] args=nullParam;  Context parmCtxt=null;  if (children.length > 1) {    args=new FormalParamNode[children.length / 2 - 1];    parmCtxt=new Context(moduleTable,errors);    symbolTable.pushContext(parmCtxt);    for (int i=0; i < args.length; i++) {      TreeNode child=children[2 + 2 * i];      UniqueString id=null;      int count=0;      if (child.isKind(N_IdentDecl)) {        id=child.heirs()[0].getUS();        count=(child.heirs().length - 1) / 2;      } else       if (child.isKind(N_InfixDecl)) {        id=child.heirs()[1].getUS();        count=2;      } else       if (child.isKind(N_PrefixDecl)) {        id=child.heirs()[0].getUS();        count=1;      } else       if (child.isKind(N_PostfixDecl)) {        id=child.heirs()[1].getUS();        count=1;      } else {        errors.addAbort(treeNode.getLocation(),"Internal error: Error in formal params part of parse tree.",true);      }      if (id != null) {        args[i]=new FormalParamNode(id,count,child,symbolTable,cm);      }    }  }  children=treeNode.one()[2].heirs();  Context instanceeCtxt=this.getContext(children[1].getUS());  ModuleNode instanceeModule=symbolTable.resolveModule(children[1].getUS());  if (instanceeCtxt == null) {    errors.addError(children[1].getLocation(),"Module " + children[1].getImage() + " does not have a context.");    return nullODN;  }  if (instanceeModule == null) {    errors.addError(children[1].getLocation(),"Module name " + children[1].getImage() + " is not known"+ " in current context.");    return nullODN;  }  instanceeModule.setInstantiated(true);  SubstInNode substIn=processSubst(treeNode,children,symbolTable,instanceeCtxt,instanceeModule,cm);  if (parmCtxt != null)   symbolTable.popContext();  Vector elts=instanceeCtxt.getByClass(OpDefNode.class);  for (int i=0; i < elts.size(); i++) {    OpDefNode odn=(OpDefNode)elts.elementAt(i);    if (!odn.isLocal() && ((odn.getKind() == UserDefinedOpKind) || (odn.getKind() == ModuleInstanceKind))) {      String compoundID=name + "!" + odn.getName();      UniqueString qualifiedName=UniqueString.uniqueStringOf(compoundID);      FormalParamNode[] fpn=odn.getParams();      FormalParamNode[] params=new FormalParamNode[fpn.length + args.length];      System.arraycopy(args,0,params,0,args.length);      System.arraycopy(fpn,0,params,args.length,fpn.length);      OpDefNode newOdn;      if (odn.getKind() == UserDefinedOpKind) {        if (substIn.getSubsts().length > 0) {          SubstInNode substInNode=new SubstInNode(treeNode,substIn.getSubsts(),odn.getBody(),cm,instanceeModule);          newOdn=new OpDefNode(qualifiedName,UserDefinedOpKind,params,localness,substInNode,cm,symbolTable,treeNode,true,odn.getSource());          setOpDefNodeRecursionFields(newOdn,cm);          newOdn.setLabels(odn.getLabelsHT());        } else {          newOdn=new OpDefNode(qualifiedName,UserDefinedOpKind,params,localness,odn.getBody(),cm,symbolTable,treeNode,true,odn.getSource());          setOpDefNodeRecursionFields(newOdn,cm);          newOdn.setLabels(odn.getLabelsHT());        }      } else {        newOdn=new OpDefNode(qualifiedName,params,localness,odn.getOriginallyDefinedInModuleNode(),symbolTable,treeNode,odn.getSource());      }      ;      if (defs == null) {        cm.appendDef(newOdn);      } else {        defs.addElement(newOdn);      }    }  }  Vector taelts=instanceeCtxt.getByClass(ThmOrAssumpDefNode.class);  for (int i=0; i < taelts.size(); i++) {    ThmOrAssumpDefNode taOdn=(ThmOrAssumpDefNode)taelts.elementAt(i);    if (!taOdn.isLocal()) {      String compoundID=name + "!" + taOdn.getName();      UniqueString qualifiedName=UniqueString.uniqueStringOf(compoundID);      FormalParamNode[] fpn=taOdn.getParams();      FormalParamNode[] params=new FormalParamNode[fpn.length + args.length];      System.arraycopy(args,0,params,0,args.length);      System.arraycopy(fpn,0,params,args.length,fpn.length);      ThmOrAssumpDefNode newtaOdn;      if (substIn.getSubsts().length > 0) {        APSubstInNode substInNode=new APSubstInNode(treeNode,substIn.getSubsts(),taOdn.getBody(),cm,instanceeModule);        newtaOdn=new ThmOrAssumpDefNode(qualifiedName,taOdn.isTheorem(),substInNode,cm,symbolTable,treeNode,params,instanceeModule,taOdn.getSource());        newtaOdn.setLocal(localness);        newtaOdn.setLabels(taOdn.getLabelsHT());      } else {        newtaOdn=new ThmOrAssumpDefNode(qualifiedName,taOdn.isTheorem(),taOdn.getBody(),cm,symbolTable,treeNode,params,instanceeModule,taOdn.getSource());        newtaOdn.setLocal(localness);        newtaOdn.setLabels(taOdn.getLabelsHT());      }      if (defs == null) {        cm.appendDef(newtaOdn);      } else {        defs.addElement(newtaOdn);      }    }  }  InstanceNode inst=new InstanceNode(name,localness,args,instanceeModule,substIn.getSubsts(),treeNode);  if (insts == null) {    cm.appendInstance(inst);  } else {    insts.addElement(inst);  }  return new OpDefNode(name,args,localness,cm,symbolTable,treeNode,null);}  }
class C{  public void removeListener(final IDebuggerTemplateListener listener){  m_listeners.removeListener(listener);}  }
class C{  protected boolean isRelevantToUser(IReferenceDescription input){  EReference reference=input.getEReference();  boolean result=isRelevantToUser(reference);  return result;}  }
class C{  private String buildTask1GoldElemReason(StringBuilder textBuilder,List<String> goldTokens){  String strGoldReason;  textBuilder.setLength(0);  textBuilder.append("Der Text beinhaltet ");  textBuilder.append(goldTokens.size());  textBuilder.append(" Named Entiti(es): ");  textBuilder.append(escapeHtml(concatWithSeparator(goldTokens,", ")));  textBuilder.append(goldNER1ReasonHints);  strGoldReason=new String(textBuilder);  return strGoldReason;}  }
class C{  public final int size(){  return m_firstFree;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.599 -0500",hash_original_method="A3F2FAE5568048D2CF4F883B9C3D720D",hash_generated_method="B862C7BADFD4FD07162D5B768643F727") private synchronized void sendMessage(Message msg){  if (mBlockMessages) {    return;  }  if (mMessages != null) {    mMessages.add(msg);  } else {    mHandler.sendMessage(msg);  }}  }
class C{  protected boolean shouldPaintExpandControl(TreePath path,int row,boolean isExpanded,boolean hasBeenExpanded,boolean isLeaf){  if (isLeaf)   return false;  int depth=path.getPathCount() - 1;  if ((depth == 0 || (depth == 1 && !isRootVisible())) && !getShowsRootHandles())   return false;  return true;}  }
class C{  private FileUtils(){  throw new AssertionError("Do not instantiate.");}  }
class C{  private void updateProgressBar(Progress prog,JProgressBar pbar){  if (prog instanceof FiniteProgress) {    pbar.setValue(((FiniteProgress)prog).getProcessed());    pbar.setString(((FiniteProgress)prog).toString());  } else   if (prog instanceof IndefiniteProgress) {    pbar.setValue(((IndefiniteProgress)prog).getProcessed());    pbar.setString(((IndefiniteProgress)prog).toString());  } else   if (prog instanceof MutableProgress) {    pbar.setValue(((MutableProgress)prog).getProcessed());    pbar.setMaximum(((MutableProgress)prog).getProcessed());    pbar.setString(((MutableProgress)prog).toString());  } else {    throw new RuntimeException("Unsupported progress record");  }}  }
class C{  public Model copy(){  return new Model(this.modelBoxes,this.fwdVec,this.upVec);}  }
class C{  private static boolean isArrowpointAllowedPattern(Node from,Node to,IKnowledge knowledge,Graph graph){  Edge edge=graph.getEdge(from,to);  if (knowledge == null) {    return true;  } else   if (graph.getEndpoint(from,to) == Endpoint.ARROW || graph.getEndpoint(to,from) == Endpoint.ARROW) {    return false;  } else {    return !knowledge.isRequired(to.toString(),from.toString()) && !knowledge.isForbidden(from.toString(),to.toString());  }}  }
class C{  public static void compareFromDifferentFolders(final File sourceFolder,final File targetFolder,final ResourcePreProcessor processor) throws IOException {  compareFromDifferentFolders(sourceFolder,targetFolder,TrueFileFilter.TRUE,Transformers.noOpTransformer(),processor);}  }
class C{  public T readonly(String value){  return attr("readonly",value);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean hasDelay(){  return delay != -1;}  }
class C{  private static BasicBlock myCopyWithoutLinks(BasicBlock bb,IR ir){  BasicBlock newBlock=bb.copyWithoutLinks(ir);  updateTemps(newBlock,ir);  return newBlock;}  }
class C{  public static void play(Activity context,String... url){  Intent intent=new Intent(context,GiraffePlayerActivity.class);  intent.putExtra("url",url[0]);  if (url.length > 1) {    intent.putExtra("title",url[1]);  }  context.startActivity(intent);}  }
class C{  public PlayerProducedNumberOfItemsCondition(int number,String... items){  itemProducedList=new ArrayList<String>();  if (items != null) {    for (    String item : items) {      itemProducedList.add(item);    }  }  quantity=number;}  }
class C{  public static void writeVarLong(ByteBuffer buff,long x){  while ((x & ~0x7f) != 0) {    buff.put((byte)(0x80 | (x & 0x7f)));    x>>>=7;  }  buff.put((byte)x);}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.ANY_TYPE;}  }
class C{  public InvalidPhraseException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static Result search(){  DynamicForm form=Form.form().bindFromRequest(request());  String appId=form.get(APP_ID);  appId=appId != null ? appId.trim() : "";  if (appId.contains("job")) {    appId=appId.replaceAll("job","application");  }  String partialFlowExecId=form.get(FLOW_EXEC_ID);  partialFlowExecId=(partialFlowExecId != null) ? partialFlowExecId.trim() : null;  if (!appId.isEmpty()) {    AppResult result=AppResult.find.select("*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,"*").fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS + "." + AppHeuristicResult.TABLE.APP_HEURISTIC_RESULT_DETAILS,"*").where().idEq(appId).findUnique();    return ok(searchPage.render(null,jobDetails.render(result)));  } else   if (Utils.isSet(partialFlowExecId)) {    IdUrlPair flowExecPair=bestSchedulerInfoMatchGivenPartialId(partialFlowExecId,AppResult.TABLE.FLOW_EXEC_ID);    List<AppResult> results=AppResult.find.select(AppResult.getSearchFields() + "," + AppResult.TABLE.JOB_EXEC_ID).fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,AppHeuristicResult.getSearchFields()).where().eq(AppResult.TABLE.FLOW_EXEC_ID,flowExecPair.getId()).findList();    Map<IdUrlPair,List<AppResult>> map=ControllerUtil.groupJobs(results,ControllerUtil.GroupBy.JOB_EXECUTION_ID);    return ok(searchPage.render(null,flowDetails.render(flowExecPair,map)));  }  PaginationStats paginationStats=new PaginationStats(PAGE_LENGTH,PAGE_BAR_LENGTH);  int pageLength=paginationStats.getPageLength();  paginationStats.setCurrentPage(1);  final Map<String,String[]> searchString=request().queryString();  if (searchString.containsKey(PAGE)) {    try {      paginationStats.setCurrentPage(Integer.parseInt(searchString.get(PAGE)[0]));    } catch (    NumberFormatException ex) {      logger.error("Error parsing page number. Setting current page to 1.");      paginationStats.setCurrentPage(1);    }  }  int currentPage=paginationStats.getCurrentPage();  int paginationBarStartIndex=paginationStats.getPaginationBarStartIndex();  Query<AppResult> query=generateSearchQuery(AppResult.getSearchFields(),getSearchParams());  List<AppResult> results=query.setFirstRow((paginationBarStartIndex - 1) * pageLength).setMaxRows((paginationStats.getPageBarLength() - 1) * pageLength + 1).fetch(AppResult.TABLE.APP_HEURISTIC_RESULTS,AppHeuristicResult.getSearchFields()).findList();  paginationStats.setQueryString(getQueryString());  if (results.isEmpty() || currentPage > paginationStats.computePaginationBarEndIndex(results.size())) {    return ok(searchPage.render(null,jobDetails.render(null)));  } else {    List<AppResult> resultsToDisplay=results.subList((currentPage - paginationBarStartIndex) * pageLength,Math.min(results.size(),(currentPage - paginationBarStartIndex + 1) * pageLength));    return ok(searchPage.render(paginationStats,searchResults.render(String.format("Results: Showing %,d of %,d",resultsToDisplay.size(),query.findRowCount()),resultsToDisplay)));  }}  }
class C{  public void endDocument() throws SAXException {  charactersFlush();  m_nextsib.setElementAt(NULL,m_currentDocumentNode);  if (m_firstch.elementAt(m_currentDocumentNode) == NOTPROCESSED)   m_firstch.setElementAt(NULL,m_currentDocumentNode);  if (DTM.NULL != m_previous)   m_nextsib.setElementAt(DTM.NULL,m_previous);  m_parents=null;  m_prefixMappings=null;  m_contextIndexes=null;  m_currentDocumentNode=NULL;  m_endDocumentOccured=true;}  }
class C{  @Override public void mark(final int readlimit){  markedSource=currentSource;  bytesReadFromMarkedSource=bytesReadFromCurrentSource;}  }
class C{  public static long byteArrayToLong(byte[] buffer,int nStartIndex){  return (((long)buffer[nStartIndex]) << 56) | ((buffer[nStartIndex + 1] & 0x0ffL) << 48) | ((buffer[nStartIndex + 2] & 0x0ffL) << 40)| ((buffer[nStartIndex + 3] & 0x0ffL) << 32)| ((buffer[nStartIndex + 4] & 0x0ffL) << 24)| ((buffer[nStartIndex + 5] & 0x0ffL) << 16)| ((buffer[nStartIndex + 6] & 0x0ffL) << 8)| ((long)buffer[nStartIndex + 7] & 0x0ff);}  }
class C{  public void close(){  if (wantClose) {    try {      is.close();    } catch (    IOException e) {    }  }}  }
class C{  protected boolean internalNext() throws SQLException {  boolean bool=false;  for (int rows=this.getRow(); rows <= this.size(); rows++) {    bool=super.internalNext();    if (!bool || p == null) {      return bool;    }    if (p.evaluate(this)) {      break;    }  }  return bool;}  }
class C{  private void completeSnapshot(){  if (pendingSnapshot != null && lastCompleted >= pendingSnapshot.index()) {    long snapshotIndex=pendingSnapshot.index();    LOGGER.debug("{} - Completing snapshot {}",state.getCluster().member().address(),snapshotIndex);synchronized (pendingSnapshot) {      Snapshot currentSnapshot=state.getSnapshotStore().currentSnapshot();      if (currentSnapshot == null || snapshotIndex > currentSnapshot.index()) {        pendingSnapshot.complete();      } else {        LOGGER.debug("Discarding pending snapshot at index {} since the current snapshot is at index {}",pendingSnapshot.index(),currentSnapshot.index());      }      pendingSnapshot=null;    }    log.compactor().snapshotIndex(snapshotIndex);    log.compactor().compact();  }}  }
class C{  public final char readChar() throws IOException {  mPosition+=2;  d.readFully(w,0,2);  return (char)((w[1] & 0xff) << 8 | (w[0] & 0xff));}  }
class C{  public boolean forwardRaw(float[] rawllpts,int rawoff,float[] xcoords,float[] ycoords,boolean[] visible,int copyoff,int copylen){  double[] drawllpts=new double[rawllpts.length];  System.arraycopy(drawllpts,0,rawllpts,0,rawllpts.length);  return forwardRaw(drawllpts,rawoff,xcoords,ycoords,visible,copyoff,copylen);}  }
class C{  public void callAsync(String jsFunc,JSObject self,Object[] params,Callback callback){  call(jsFunc,self,params,true,callback);}  }
class C{  public Map<String,Object> processOutputs(Map<String,Object> outputs,Draft3PortProcessorCallback portProcessor) throws Draft3PortProcessorException {  return processValues(outputs,job.getApp().getOutputs(),Draft3OutputPort.class,portProcessor);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public NullArgumentException(final String argName){  super((argName == null ? "Argument" : argName) + " must not be null.");}  }
class C{  public FilterPredClause(String field,CompareOp compOp,String value){  this.field=field;  this.compOp=compOp;  this.value=value;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.121 -0500",hash_original_method="A3FC13DF1E683960EBCF25B1C68B6117",hash_generated_method="30891C70FD2F977FC1621D90F9DB3D9C") private void grow(){  int oldCapacity=queue.length;  int newCapacity=oldCapacity + (oldCapacity >> 1);  if (newCapacity < 0)   newCapacity=Integer.MAX_VALUE;  queue=Arrays.copyOf(queue,newCapacity);}  }
class C{  public final static String wrapStreamSmbURL(String url,String ip,int port){  if (TextUtils.isEmpty(url)) {    return null;  }  if (!url.startsWith(SambaHelper.SMB_URL_LAN)) {    return null;  }  try {    url=url.substring(SambaHelper.SMB_URL_LAN.length());    url=URLEncoder.encode(url,"UTF-8");  } catch (  Exception e) {    e.printStackTrace();  }  StringBuilder builder=new StringBuilder("http://").append(ip).append(File.pathSeparator).append(port).append(SambaHelper.CONTENT_EXPORT_URI);  builder.append(url);  return builder.toString();}  }
class C{  private static boolean slowEquals(byte[] a,byte[] b){  int diff=a.length ^ b.length;  for (int i=0; i < a.length && i < b.length; i++) {    diff|=a[i] ^ b[i];  }  return diff == 0;}  }
class C{  public void addAttributeCertificate(X509AttributeCertificateHolder attrCert) throws CMSException {  certs.add(new DERTaggedObject(false,2,attrCert.toASN1Structure()));}  }
class C{  public void testUnsizedDoublesCountSeq(){  LongAdder counter=new LongAdder();  Random r=new Random();  long size=100;  r.doubles().limit(size).forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public void enableAll(boolean enable){  enable(enable);  enableInterface(enable);  enableSQLSummary(enable);  enableSQLDetail(enable);  enableResultSet(enable);}  }
class C{  public DatatypeConfigurationException(Throwable cause){  super(cause == null ? null : cause.toString());  initCauseByReflection(cause);}  }
class C{  byte[] makeToKey(final byte[] fromKey,final byte[] tmp){  assert fromKey.length == SIZEOF_PREFIX_KEY;  final byte[] toKey;  if (tmp == null) {    toKey=new byte[SIZEOF_PREFIX_KEY];  } else   if (tmp.length != SIZEOF_PREFIX_KEY) {    throw new IllegalArgumentException();  } else {    toKey=tmp;  }  System.arraycopy(fromKey,0,toKey,0,SIZEOF_PREFIX_KEY);  SuccessorUtil.successor(toKey);  return tmp;}  }
class C{  @Override public void handleStart(Operation startOperation){  ServiceUtils.logInfo(this,"Handling start operation for service %s",getSelfLink());  State startState=startOperation.getBody(State.class);  InitializationUtils.initialize(startState);  validateStartState(startState);  Operation start=startOperation.setBody(startState);  start.complete();}  }
class C{  @SuppressWarnings("fallthrough") private boolean findSection(int offset,Position pos){  int i=offset, len=rawBytes.length;  int last=offset;  int next;  boolean allBlank=true;  pos.endOfFirstLine=-1;  while (i < len) {    byte b=rawBytes[i];switch (b) {case '\r':      if (pos.endOfFirstLine == -1)       pos.endOfFirstLine=i - 1;    if ((i < len) && (rawBytes[i + 1] == '\n'))     i++;case '\n':  if (pos.endOfFirstLine == -1)   pos.endOfFirstLine=i - 1;if (allBlank || (i == len - 1)) {  if (i == len - 1)   pos.endOfSection=i; else   pos.endOfSection=last;  pos.startOfNext=i + 1;  return true;} else {  last=i;  allBlank=true;}break;default :allBlank=false;break;}i++;}return false;}  }
class C{  private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  public boolean isInline(){  return label.isInline();}  }
class C{  private void loadDBCatalog(){  s_logger.log(Level.FINE,"loadDBCatalog",getDirection());  if (getCatalog() == null) {    try {      DatabaseMetaData md=m_connection.getMetaData();      String url=md.getURL();      String user=md.getUserName();      ResultSet rs=md.getCatalogs();      while (getResultSetNext(rs)) {        String s=getResultSetString(rs,"TABLE_CAT");        if (user.equalsIgnoreCase(s) || url.toUpperCase().contains(s.toUpperCase())) {          setCatalog(s);        }      }      releaseResultSet(rs);    } catch (    SQLException e) {      s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"loadDBCatalogError",new Object[]{getDirection(),e.getMessage()});    }  }  s_logger.log(Level.FINE,"dbCatalogLoaded",new Object[]{getDirection(),getCatalog()});  s_logger.flush();}  }
class C{  public ResequencerItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static boolean hasLength(BytesReference bytesReference){  return (bytesReference != null && bytesReference.length() > 0);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.ApplicationConfig);  ApplicationConfigForm frm=(ApplicationConfigForm)form;  MessageResources rsc=getResources(request);  String op=(frm.getOp() != null ? frm.getOp() : request.getParameter("op"));  if (op == null) {    frm.reset(mapping,request);    op=frm.getOp();  }  if ("1".equals(request.getParameter("apply"))) {    sessionContext.getUser().setProperty("ApplicationConfig.showAll",frm.getShowAll() ? "1" : "0");  }  ActionMessages errors=new ActionMessages();  if (op.equals("edit")) {    sessionContext.checkPermission(Right.ApplicationConfigEdit);    String id=request.getParameter("id");    if (id == null || id.trim().isEmpty()) {      errors.add("key",new ActionMessage("errors.invalid","Name : " + id));      saveErrors(request,errors);    } else {      SessionConfig sessionConfig=SessionConfig.getConfig(id,sessionContext.getUser().getCurrentAcademicSessionId());      if (sessionConfig == null) {        ApplicationConfig appConfig=ApplicationConfigDAO.getInstance().get(id);        if (appConfig == null) {          ApplicationProperty p=ApplicationProperty.fromKey(id);          if (p != null) {            frm.setOp("add");            frm.setKey(id);            frm.setValue(ApplicationProperties.getProperty(id,""));            frm.setDescription(p.description());            frm.setAllSessions(true);          } else {            errors.add("key",new ActionMessage("errors.invalid","Name : " + id));            saveErrors(request,errors);          }        } else {          frm.setKey(appConfig.getKey());          frm.setValue(appConfig.getValue());          frm.setDescription(appConfig.getDescription());          if (frm.getDescription() == null || frm.getDescription().isEmpty())           frm.setDescription(ApplicationProperty.getDescription(frm.getKey()));          frm.setAllSessions(true);        }      } else {        frm.setKey(sessionConfig.getKey());        frm.setValue(sessionConfig.getValue());        frm.setDescription(sessionConfig.getDescription());        if (frm.getDescription() == null || frm.getDescription().isEmpty())         frm.setDescription(ApplicationProperty.getDescription(frm.getKey()));        frm.setAllSessions(false);        List<Long> sessionIds=SessionConfigDAO.getInstance().getSession().createQuery("select session.uniqueId from SessionConfig where key = :key and value = :value").setString("key",id).setString("value",sessionConfig.getValue()).list();        Long[] sessionIdsArry=new Long[sessionIds.size()];        for (int i=0; i < sessionIds.size(); i++)         sessionIdsArry[i]=sessionIds.get(i);        frm.setSessions(sessionIdsArry);        if (sessionConfig.getDescription() == null || sessionConfig.getDescription().isEmpty()) {          ApplicationConfig appConfig=ApplicationConfigDAO.getInstance().get(id);          if (appConfig != null)           frm.setDescription(appConfig.getDescription());        }      }    }  }  if (op.equals(rsc.getMessage("button.addAppConfig"))) {    sessionContext.checkPermission(Right.ApplicationConfigEdit);    frm.reset(mapping,request);    frm.setAllSessions(true);    if (sessionContext.getUser().getCurrentAcademicSessionId() != null)     frm.setSessions(new Long[]{sessionContext.getUser().getCurrentAcademicSessionId()});    frm.setOp(rsc.getMessage("button.createAppConfig"));  }  if (op.equals(rsc.getMessage("button.updateAppConfig")) || op.equals(rsc.getMessage("button.createAppConfig"))) {    sessionContext.checkPermission(Right.ApplicationConfigEdit);    errors=frm.validate(mapping,request);    if (!errors.isEmpty()) {      saveErrors(request,errors);    } else {      try {        org.hibernate.Session hibSession=SessionConfigDAO.getInstance().getSession();        boolean update=op.equals(rsc.getMessage("button.updateAppConfig"));        String oldValue=null;        boolean wasSession=false;        SessionConfig sessionConfig=SessionConfig.getConfig(frm.getKey(),sessionContext.getUser().getCurrentAcademicSessionId());        if (sessionConfig == null) {          ApplicationConfig appConfig=ApplicationConfigDAO.getInstance().get(frm.getKey());          if (appConfig != null)           oldValue=appConfig.getValue();        } else {          oldValue=sessionConfig.getValue();          wasSession=true;        }        if (frm.isAllSessions()) {          if (wasSession) {            if (update) {              for (              SessionConfig config : (List<SessionConfig>)hibSession.createQuery("from SessionConfig where key = :key and value = :value").setString("key",frm.getKey()).setString("value",oldValue).list()) {                solverServerService.setApplicationProperty(config.getSession().getUniqueId(),frm.getKey(),null);                hibSession.delete(config);              }            } else {              SessionConfig config=SessionConfig.getConfig(frm.getKey(),sessionContext.getUser().getCurrentAcademicSessionId());              if (config != null) {                solverServerService.setApplicationProperty(config.getSession().getUniqueId(),frm.getKey(),null);                hibSession.delete(config);              }            }          }          ApplicationConfig config=ApplicationConfigDAO.getInstance().get(frm.getKey());          if (config == null) {            config=new ApplicationConfig();            config.setKey(frm.getKey());          }          config.setValue(frm.getValue());          config.setDescription(frm.getDescription());          solverServerService.setApplicationProperty(null,frm.getKey(),frm.getValue());          hibSession.saveOrUpdate(config);        } else {          if (update && !wasSession) {            ApplicationConfig config=ApplicationConfigDAO.getInstance().get(frm.getKey());            if (config != null) {              solverServerService.setApplicationProperty(null,frm.getKey(),null);              hibSession.delete(config);            }          }          Set<Long> updatedSessionIds=new HashSet<Long>();          for (          Long sessionId : frm.getSessions()) {            SessionConfig config=(SessionConfig)hibSession.createQuery("from SessionConfig where key = :key and session.uniqueId = :sessionId").setLong("sessionId",sessionId).setString("key",frm.getKey()).uniqueResult();            if (config == null) {              config=new SessionConfig();              config.setKey(frm.getKey());              config.setSession(SessionDAO.getInstance().get(sessionId,hibSession));            }            config.setValue(frm.getValue());            config.setDescription(frm.getDescription());            solverServerService.setApplicationProperty(sessionId,frm.getKey(),frm.getValue());            hibSession.saveOrUpdate(config);            updatedSessionIds.add(sessionId);          }          if (update && oldValue != null) {            for (            SessionConfig other : (List<SessionConfig>)hibSession.createQuery("from SessionConfig where key = :key and value = :value").setString("key",frm.getKey()).setString("value",oldValue).list()) {              if (!updatedSessionIds.contains(other.getSession().getUniqueId())) {                solverServerService.setApplicationProperty(other.getSession().getUniqueId(),frm.getKey(),null);                hibSession.delete(other);              }            }          }        }        hibSession.flush();        request.setAttribute("hash",frm.getKey());        frm.reset(mapping,request);      } catch (      Exception e) {        errors.add("key",new ActionMessage("errors.generic",e.getMessage()));        saveErrors(request,errors);      }    }  }  if (op.equals(rsc.getMessage("button.deleteAppConfig"))) {    sessionContext.checkPermission(Right.ApplicationConfigEdit);    errors=frm.validate(mapping,request);    if (!errors.isEmpty()) {      saveErrors(request,errors);    } else {      try {        org.hibernate.Session hibSession=SessionConfigDAO.getInstance().getSession();        SessionConfig sessionConfig=null;        if (sessionContext.getUser().getCurrentAcademicSessionId() != null) {          sessionConfig=(SessionConfig)hibSession.createQuery("from SessionConfig where key = :key and session.uniqueId = :sessionId").setLong("sessionId",sessionContext.getUser().getCurrentAcademicSessionId()).setString("key",frm.getKey()).uniqueResult();        }        if (sessionConfig == null) {          ApplicationConfig appConfig=ApplicationConfigDAO.getInstance().get(frm.getKey());          if (appConfig != null) {            hibSession.delete(appConfig);            solverServerService.setApplicationProperty(null,frm.getKey(),null);          }        } else {          String oldValue=sessionConfig.getValue();          hibSession.delete(sessionConfig);          solverServerService.setApplicationProperty(sessionContext.getUser().getCurrentAcademicSessionId(),frm.getKey(),null);          for (          SessionConfig other : (List<SessionConfig>)hibSession.createQuery("from SessionConfig where key = :key and value = :value").setString("key",frm.getKey()).setString("value",oldValue).list()) {            solverServerService.setApplicationProperty(other.getSession().getUniqueId(),frm.getKey(),null);            hibSession.delete(other);          }        }        hibSession.flush();        frm.reset(mapping,request);      } catch (      Exception e) {        e.printStackTrace();        errors.add("key",new ActionMessage("errors.generic",e.getMessage()));        saveErrors(request,errors);      }    }  }  if (op.equals(rsc.getMessage("button.cancelUpdateAppConfig"))) {    request.setAttribute("hash",frm.getKey());    frm.reset(mapping,request);  }  frm.setShowAll("1".equals(sessionContext.getUser().getProperty("ApplicationConfig.showAll","0")));  if ("list".equals(frm.getOp())) {    getApplicationConfigList(request,frm.getShowAll());    return mapping.findForward("list");  }  return mapping.findForward(rsc.getMessage("button.createAppConfig").equals(frm.getOp()) ? "add" : "edit");}  }
class C{  private void connectionEvent(String action){  if (!ConnectivityManager.CONNECTIVITY_ACTION.equals(action)) {    return;  }  NetworkInfo networkInfo=mConnMgr.getActiveNetworkInfo();  if (networkInfo == null) {    return;  }  if (!networkInfo.isConnected()) {    if (sLogger.isActivated()) {      sLogger.debug("Device disconnected");    }    return;  }  if (sLogger.isActivated()) {    sLogger.debug("Device connected - Launch RCS service");  }  LauncherUtils.launchRcsCoreService(mCtx,mRcsSettings);  if (mNetworkStateListener == null) {    return;  }  unregisterReceiver(mNetworkStateListener);  mNetworkStateListener=null;}  }
class C{  public void combForLineRecords(DSwfInfo info){  probeForLineRecords(getMasterList(),new ActionLocation(),info);}  }
class C{  private void validateElements(Class type) throws Exception {  Set<String> keys=elements.keySet();  for (  String name : keys) {    ModelList list=models.get(name);    Label label=elements.get(name);    if (list == null && label == null) {      throw new ElementException("Ordered element '%s' does not exist in %s",name,type);    }    if (list != null && label != null) {      if (!list.isEmpty()) {        throw new ElementException("Element '%s' is also a path name in %s",name,type);      }    }    if (expression != null) {      expression.getElement(name);    }  }}  }
class C{  public void mainImpl(){  JFrame frame=new JFrame(getName());  frame.getContentPane().setLayout(new BorderLayout());  frame.getContentPane().add(getDemoPanel(),BorderLayout.CENTER);  getDemoPanel().setPreferredSize(new Dimension(PREFERRED_WIDTH,PREFERRED_HEIGHT));  frame.pack();  frame.show();}  }
class C{  public int lastIndexOf(int value){  return lastIndexOf(_pos,value);}  }
class C{  public OMGraphicList readCachedGraphics(URL url) throws java.io.IOException {  if (Debug.debugging("areas")) {    Debug.output("Reading cached graphics");  }  OMGraphicList omgraphics=new OMGraphicList();  if (url != null) {    omgraphics.readGraphics(url);  }  return omgraphics;}  }
class C{  private static boolean needsSimpleFollowMenu(final IDebugger debugger,final COperandTreeNode treeNode,final BigInteger simpleAddress){  return (treeNode.getType() == ExpressionType.REGISTER) || ((treeNode.getType() == ExpressionType.IMMEDIATE_INTEGER) && (ProcessHelpers.getSectionWith(debugger.getProcessManager().getMemoryMap(),new CAddress(simpleAddress)) != null));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider(){  String[] alg={"","qwertyu","!@#$%^&*()"};  Provider pp=null;  try {    AlgorithmParameters ap=AlgorithmParameters.getInstance("ABC",p);    checkUnititialized(ap);    ap.init(new byte[6],"aaa");    checkAP(ap,p);  } catch (  Exception e) {    fail("Unexpected exception");  }  for (int i=0; i < alg.length; i++) {    try {      AlgorithmParameters ap=AlgorithmParameters.getInstance(alg[i],p);      fail("NoSuchAlgorithmException was not thrown for parameter " + alg[i]);    } catch (    NoSuchAlgorithmException nsae) {    }catch (    Exception e) {      fail("Incorrect exception " + e + " was thrown for "+ alg[i]);    }  }  try {    AlgorithmParameters ap=AlgorithmParameters.getInstance("ABC",pp);    fail("IllegalArgumentException was not thrown for NULL provider");  } catch (  IllegalArgumentException iae) {  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }}  }
class C{  @Override public <T>T loadObject(Class<T> loadClass,Serializable id,Optional<FilterExpression> filterExpression){  try {    if (!filterExpression.isPresent()) {      T record=session.get(loadClass,id);      return record;    }    Criteria criteria=session.createCriteria(loadClass).add(Restrictions.idEq(id));    CriterionFilterOperation filterOpn=buildCriterionFilterOperation(criteria);    criteria=filterOpn.apply(filterExpression.get());    T record=(T)criteria.uniqueResult();    return record;  } catch (  ObjectNotFoundException e) {    return null;  }}  }
class C{  public Configurator recordDuration(int numberOfSeconds){  if (numberOfSeconds < 0)   throw new IllegalArgumentException("The number of seconds may not be negative");  estimatedRecordDurationInSeconds=numberOfSeconds;  return this;}  }
class C{  public LongMap(int initialCapacity){  this(initialCapacity,0.8f);}  }
class C{  public boolean rollbackTransaction() throws IOException {  if (inTransaction) {    rollForwardOut.close();    insertRecordOut.close();    finishTransaction();  }  getRollForwardFile(true).delete();  getRollForwardFile(false).delete();synchronized (this) {    rwRaf.setLength(HEADER_SIZE + recordSize * committedNextRowId);  }  return true;}  }
class C{  public static Executor createTaskDistributor(){  return Executors.newCachedThreadPool(createThreadFactory(Thread.NORM_PRIORITY,"uil-pool-d-"));}  }
class C{  private int useCount(){  return m_useCount2;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (quote_1: ");  result.append(quote_1);  result.append(')');  return result.toString();}  }
class C{  public static void notLicensed(){  render();}  }
class C{  public static boolean validateEmailList(String value){  String[] emails=value.split(",");  for (  String email : emails) {    if (validateEmail(email.trim()) == false) {      return false;    }  }  return true;}  }
class C{  private void sendSelfPatch(State s){  sendRequest(buildSelfPatchOperation(s));}  }
class C{  public static VolumeGroupRestRep map(VolumeGroup from){  if (from == null) {    return null;  }  VolumeGroupRestRep rep=new VolumeGroupRestRep();  mapDataObjectFields(from,rep);  rep.setDescription(from.getDescription());  rep.setRoles(from.getRoles());  rep.setParent(toRelatedResource(ResourceTypeEnum.VOLUME_GROUP,from.getParent()));  rep.setMigrationGroupBy(from.getMigrationGroupBy());  rep.setMigrationType(from.getMigrationType());  return rep;}  }
class C{  public InMemoryDocument(final byte[] bytes,final String name){  this.bytes=bytes;  this.name=name;  this.mimeType=MimeType.fromFileName(name);}  }
class C{  private UCrop basisConfig(@NonNull UCrop uCrop){switch (mRadioGroupAspectRatio.getCheckedRadioButtonId()) {case R.id.radio_origin:    uCrop=uCrop.useSourceImageAspectRatio();  break;case R.id.radio_square:uCrop=uCrop.withAspectRatio(1,1);break;case R.id.radio_dynamic:break;default :try {float ratioX=Float.valueOf(mEditTextRatioX.getText().toString().trim());float ratioY=Float.valueOf(mEditTextRatioY.getText().toString().trim());if (ratioX > 0 && ratioY > 0) {uCrop=uCrop.withAspectRatio(ratioX,ratioY);}} catch (NumberFormatException e) {Log.e(TAG,"Number please",e);}break;}if (mCheckBoxMaxSize.isChecked()) {try {int maxWidth=Integer.valueOf(mEditTextMaxWidth.getText().toString().trim());int maxHeight=Integer.valueOf(mEditTextMaxHeight.getText().toString().trim());if (maxWidth > 0 && maxHeight > 0) {uCrop=uCrop.withMaxResultSize(maxWidth,maxHeight);}} catch (NumberFormatException e) {Log.e(TAG,"Number please",e);}}return uCrop;}  }
class C{  public boolean renewLease(IPv4Address ip,int time){  DHCPBinding binding=this.getDHCPbindingFromIPv4(ip);  if (binding != null) {    binding.setLeaseStartTimeSeconds();    binding.setLeaseDurationSeconds(time);    binding.setLeaseStatus(true);    return true;  }  return false;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SuppressWarnings("unchecked") public static void renderPassThruAttributes(FacesContext context,ResponseWriter writer,UIComponent component,Attribute[] attributes,Map<String,List<ClientBehavior>> behaviors) throws IOException {  assert (null != writer);  assert (null != component);  if (behaviors == null) {    behaviors=Collections.emptyMap();  }  if (canBeOptimized(component,behaviors)) {    List<String> setAttributes=(List<String>)component.getAttributes().get(ATTRIBUTES_THAT_ARE_SET_KEY);    if (setAttributes != null) {      renderPassThruAttributesOptimized(context,writer,component,attributes,setAttributes,behaviors);    }  } else {    renderPassThruAttributesUnoptimized(context,writer,component,attributes,behaviors);  }}  }
class C{  public void destroy(){  log.info("destroy");}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  for (  ValueAxis yAxis : this.rangeAxes.values()) {    if (yAxis != null) {      yAxis.configure();    }  }  if (getParent() != null) {    getParent().datasetChanged(event);  } else {    PlotChangeEvent e=new PlotChangeEvent(this);    e.setType(ChartChangeEventType.DATASET_UPDATED);    notifyListeners(e);  }}  }
class C{  public static XmlAttribute toXmlAttribute(Attribute attribute){  return toXmlAttribute(attribute.getName(),attribute.getValue(),attribute.getGet(),attribute.getSet(),attribute.getAttributes(),attribute.getClasses());}  }
class C{  public AndPredicate(){}  }
class C{  public FBBackupManager(GDSType gdsType){  super(gdsType);}  }
class C{  protected Document createDefaultModel(){  DateDocument doc=new DateDocument();  return doc;}  }
class C{  @Command(description="Lists all keys on all tokens") public void listKeys() throws Exception {  List<TokenInfo> tokens=SignerClient.execute(new ListTokens());  tokens.forEach(null);}  }
class C{  public WriteRequest(final ContentFormat contentFormat,final int objectId,final int objectInstanceId,final int resourceId,boolean value){  this(Mode.REPLACE,contentFormat,new LwM2mPath(objectId,objectInstanceId,resourceId),LwM2mSingleResource.newBooleanResource(resourceId,value));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.143 -0500",hash_original_method="5559D0B771CBEE6A1A38BCD3A9AC5162",hash_generated_method="FFDE58BDE0F4E8A7BB6CEACB56352E98") public void restoreToCount(int saveCount){}  }
class C{  private static void addNamespace(Map<String,XmlNamespace> namespaces,QName name){  if (name == null) {    return;  }  XmlNamespace ns=name.getNs();  if (ns == null) {    return;  }  String alias=ns.getAlias();  if (alias == null) {    return;  }  String uri=ns.getUri();  if (namespaces.containsKey(uri)) {    return;  }  namespaces.put(uri,ns);}  }
class C{  public void saveAsGIF(String file) throws IOException {  save(file,"gif");}  }
class C{  public long roundTripTime(long timeout,TimeUnit unit) throws InterruptedException {  if (latch.await(timeout,unit)) {    return received - sent;  } else {    return -2;  }}  }
class C{  public boolean hasArgument(String arg){  return arguments.contains(arg);}  }
class C{  public void updateFrom(StorageOSUserDAO newDao){  if (_tenantId == null || !_tenantId.equals(newDao.getTenantId())) {    setTenantId(newDao.getTenantId());  }  if (newDao.getGroups() == null || newDao.getGroups().isEmpty()) {    if (_groups != null) {      _groups.clear();    }  } else {    StringSet newGroups=newDao.getGroups();    if (_groups == null) {      _groups=new StringSet();    } else {      Set<String> remove=new HashSet<String>();      for (      String group : _groups) {        if (!newGroups.contains(group)) {          remove.add(group);        }      }      _groups.removeAll(remove);    }    for (    String group : newGroups) {      if (!_groups.contains(group)) {        _groups.add(group);      }    }  }  if (newDao.getAttributes() == null || newDao.getAttributes().isEmpty()) {    if (_attributes != null) {      _attributes.clear();    }  } else {    StringSet newAttributes=newDao.getAttributes();    if (_attributes == null) {      _attributes=new StringSet();    } else {      Set<String> remove=new HashSet<String>();      for (      String attr : new StringSet(_attributes)) {        if (!newAttributes.contains(attr)) {          remove.add(attr);        }      }      _attributes.removeAll(remove);    }    for (    String attr : newAttributes) {      if (!_attributes.contains(attr)) {        _attributes.add(attr);      }    }  }}  }
class C{  public synchronized StunMessageEvent sendRequestAndWaitForResponse(Request request,TransportAddress serverAddress) throws StunException, IOException {synchronized (sendLock) {    stunStack.sendRequest(request,serverAddress,localAddress,BlockingRequestSender.this);  }  ended=false;  while (!ended) {    try {      wait();    } catch (    InterruptedException ex) {      logger.log(Level.WARNING,"Interrupted",ex);    }  }  StunMessageEvent res=responseEvent;  responseEvent=null;  return res;}  }
class C{  protected void commit(String collection) throws IOException, SolrServerException {  CloudSolrClient client=createCloudClient(collection);  try {    client.commit(true,true);  }  finally {    client.close();  }}  }
class C{  public boolean canHarvest(C crop,int stage){  return stage >= crop.getStages() || (crop.requiresSickle() && stage >= crop.getMinimumCut());}  }
class C{  public static String convertJson(JSONObject json){  if (json == null || !json.containsKey("text") && !(json.get("text") instanceof String))   return null;  ChatColor color=ChatColor.WHITE;  if (json.containsKey("color")) {    if (!(json.get("color") instanceof String))     return null;    color=toColor((String)json.get("color"));  }  if (color == null)   return null;  String text=color + (String)json.get("text");  if (json.containsKey("extra")) {    Object extraObj=json.get("extra");    if (!(extraObj instanceof JSONArray))     return null;    JSONArray extra=(JSONArray)extraObj;    if (extra.isEmpty())     return null;    for (    Object o : extra) {      if (!(o instanceof JSONObject))       return null;      JSONObject e=(JSONObject)o;      String temp=convertJson(e);      if (temp == null)       return null;      text+=temp;    }  }  return text;}  }
class C{  @Override public void stopForegroundForPlugin(boolean removeNotification){  if (mPluginHostService != null) {    mPluginHostService.stopForeground(removeNotification);  }}  }
class C{  public static List<SuspensionRecord> findByUser(EntityManager em,PrincipalUser user){  TypedQuery<SuspensionRecord> query=em.createNamedQuery("SuspensionRecord.findByUser",SuspensionRecord.class);  try {    query.setParameter("user",user);    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  public int countNumberOfColumns() throws IOException {  if (columnCount == -1) {    int count=0;    try (FileChannel fc=new RandomAccessFile(dataFile.toFile(),"r").getChannel()){      MappedByteBuffer buffer=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());      byte currentChar=-1;      byte prevChar=NEW_LINE;      while (buffer.hasRemaining()) {        currentChar=buffer.get();        if (currentChar == CARRIAGE_RETURN) {          currentChar=NEW_LINE;        }        if (currentChar == delimiter || (currentChar == NEW_LINE && prevChar != NEW_LINE)) {          count++;          if (currentChar == NEW_LINE) {            break;          }        }        prevChar=currentChar;      }      if (!(currentChar == -1 || currentChar == NEW_LINE)) {        count++;      }    }     columnCount=count;  }  return columnCount;}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String) {      return object;    }    if (object instanceof Collection) {      return new JSONArray((Collection)object);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      return new JSONObject((Map)object);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public NoAvailableLocatorsException(){}  }
class C{  static int applyMaskPenaltyRule4(ByteMatrix matrix){  int numDarkCells=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    byte[] arrayY=array[y];    for (int x=0; x < width; x++) {      if (arrayY[x] == 1) {        numDarkCells++;      }    }  }  int numTotalCells=matrix.getHeight() * matrix.getWidth();  double darkRatio=(double)numDarkCells / numTotalCells;  int fivePercentVariances=(int)(Math.abs(darkRatio - 0.5) * 20.0);  return fivePercentVariances * N4;}  }
class C{  public NameBuilder(String sep){  separator=sep;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  SerializationHandler rth=transformer.getResultTreeHandler();  try {    xctxt.pushNamespaceContext(this);    int current=xctxt.getCurrentNode();    xctxt.pushCurrentNodeAndExpression(current,current);    if (m_disableOutputEscaping)     rth.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");    try {      Expression expr=m_selectExpression.getExpression();      expr.executeCharsToContentHandler(xctxt,rth);    }  finally {      if (m_disableOutputEscaping)       rth.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");      xctxt.popNamespaceContext();      xctxt.popCurrentNodeAndExpression();    }  } catch (  SAXException se) {    throw new TransformerException(se);  }catch (  RuntimeException re) {    TransformerException te=new TransformerException(re);    te.setLocator(this);    throw te;  }}  }
class C{  void init(AccessibilityRecord record){  mSealed=record.mSealed;  mBooleanProperties=record.mBooleanProperties;  mCurrentItemIndex=record.mCurrentItemIndex;  mItemCount=record.mItemCount;  mFromIndex=record.mFromIndex;  mToIndex=record.mToIndex;  mScrollX=record.mScrollX;  mScrollY=record.mScrollY;  mMaxScrollX=record.mMaxScrollX;  mMaxScrollY=record.mMaxScrollY;  mAddedCount=record.mAddedCount;  mRemovedCount=record.mRemovedCount;  mClassName=record.mClassName;  mContentDescription=record.mContentDescription;  mBeforeText=record.mBeforeText;  mParcelableData=record.mParcelableData;  mText.addAll(record.mText);  mSourceWindowId=record.mSourceWindowId;  mSourceNodeId=record.mSourceNodeId;  mConnectionId=record.mConnectionId;}  }
class C{  private void updateOffsets(){  if (this.blockAnchor.equals(RectangleAnchor.BOTTOM_LEFT)) {    this.xOffset=0.0;    this.yOffset=0.0;  } else   if (this.blockAnchor.equals(RectangleAnchor.BOTTOM)) {    this.xOffset=-this.blockWidth / 2.0;    this.yOffset=0.0;  } else   if (this.blockAnchor.equals(RectangleAnchor.BOTTOM_RIGHT)) {    this.xOffset=-this.blockWidth;    this.yOffset=0.0;  } else   if (this.blockAnchor.equals(RectangleAnchor.LEFT)) {    this.xOffset=0.0;    this.yOffset=-this.blockHeight / 2.0;  } else   if (this.blockAnchor.equals(RectangleAnchor.CENTER)) {    this.xOffset=-this.blockWidth / 2.0;    this.yOffset=-this.blockHeight / 2.0;  } else   if (this.blockAnchor.equals(RectangleAnchor.RIGHT)) {    this.xOffset=-this.blockWidth;    this.yOffset=-this.blockHeight / 2.0;  } else   if (this.blockAnchor.equals(RectangleAnchor.TOP_LEFT)) {    this.xOffset=0.0;    this.yOffset=-this.blockHeight;  } else   if (this.blockAnchor.equals(RectangleAnchor.TOP)) {    this.xOffset=-this.blockWidth / 2.0;    this.yOffset=-this.blockHeight;  } else   if (this.blockAnchor.equals(RectangleAnchor.TOP_RIGHT)) {    this.xOffset=-this.blockWidth;    this.yOffset=-this.blockHeight;  }}  }
class C{  public static void beSickMember(DistributedSystem sys){  ((Manager)getMembershipManager(sys)).beSick();}  }
class C{  public static OrganizationAuthoritiesException convertToApi(org.oscm.internal.types.exception.OrganizationAuthoritiesException oldEx){  return convertExceptionToApi(oldEx,OrganizationAuthoritiesException.class);}  }
class C{  public ForwardLineOfOwnTroops(String sidc){  super(sidc);}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public static String convertByte2HexString(byte b){  char u8=convertByte2Uint8(b);  return Integer.toHexString(u8);}  }
class C{  public LdapServer(String ldifFile) throws Exception {  InMemoryDirectoryServiceFactory dsFactory=new InMemoryDirectoryServiceFactory();  dsFactory.init("ds");  directoryService=dsFactory.getDirectoryService();  final SchemaManager schemaManager=directoryService.getSchemaManager();  importLdif(directoryService,schemaManager,new LdifReader(ldifFile));  ldapServer=new org.apache.directory.server.ldap.LdapServer();  ldapServer.setTransports(new TcpTransport("127.0.0.1",1024));  ldapServer.setDirectoryService(directoryService);  ldapServer.start();}  }
class C{  public void lineTo(float x,float y){  mPoints.add(PathPoint.lineTo(x,y));}  }
class C{  public static NamespaceDto transformToDto(Namespace namespace){  if (namespace == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  NamespaceDto result=createDtoObject(NamespaceDto.class,namespace);  for (  PrincipalUser user : namespace.getUsers()) {    result.addUsername(user.getUserName());  }  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void store(Element root){  store(root,Xml.LENGTHS,Xml.LENGTH,Xml.ENGINE_LENGTHS);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public boolean onTouch(View view,MotionEvent motionEvent){switch (motionEvent.getAction()) {case MotionEvent.ACTION_DOWN:    UIUtils.handleVibration(context);  repeatHandler.removeCallbacks(handlerRunnable);if (initialInterval >= 0) {  repeatHandler.postDelayed(handlerRunnable,initialInterval);}downView=view;if (animDown != null) {animDown.setFillAfter(true);view.startAnimation(animDown);}break;case MotionEvent.ACTION_UP:clickListener.onClick(view);view.playSoundEffect(SoundEffectConstants.CLICK);case MotionEvent.ACTION_CANCEL:repeatHandler.removeCallbacks(handlerRunnable);downView=null;if (animUp != null) {view.startAnimation(animUp);}break;}return !((view instanceof Button) || (view instanceof ImageButton));}  }
class C{  public void contextDestroyed(ServletContextEvent sce){}  }
class C{  public static int statusNameToCode(String statusName){  for (int i=STOPPED_STATUS_CODE; i <= STARTED_STATUS_CODE; i++) {    if (statusNames[i].equalsIgnoreCase(statusName)) {      return i;    }  }  throw new IllegalArgumentException(LocalizedStrings.ManagerInfo_UNKNOWN_STATUSNAME_0.toLocalizedString(statusName));}  }
class C{  public static Class<?> findCommonElementType(Collection collection){  if (isEmpty(collection)) {    return null;  }  Class<?> candidate=null;  for (  Object val : collection) {    if (val != null) {      if (candidate == null) {        candidate=val.getClass();      } else       if (candidate != val.getClass()) {        return null;      }    }  }  return candidate;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String sampleSizePercentTipText(){  return "Size of the subsample as a percentage of the original dataset.";}  }
class C{  public Biome byBiomeName(String name){  return byBiomeName.get(name);}  }
class C{  public CoreDescriptor(CoreContainer container,String name,String instanceDir){  this(container,name,instanceDir,new Properties());}  }
class C{  public Builder withSendBufferSize(int sendBufferSize){  properties.setProperty(NettyOptions.SEND_BUFFER_SIZE,String.valueOf(Assert.argNot(sendBufferSize,sendBufferSize <= 0,"buffer size must be positive")));  return this;}  }
class C{  private static Object unwrap(Object object){  if (object instanceof ReflectUtils) {    return ((ReflectUtils)object).get();  }  return object;}  }
class C{  public void decode(int[] received,int twoS) throws ReedSolomonException {  GenericGFPoly poly=new GenericGFPoly(field,received);  int[] syndromeCoefficients=new int[twoS];  boolean noError=true;  for (int i=0; i < twoS; i++) {    int eval=poly.evaluateAt(field.exp(i + field.getGeneratorBase()));    syndromeCoefficients[syndromeCoefficients.length - 1 - i]=eval;    if (eval != 0) {      noError=false;    }  }  if (noError) {    return;  }  GenericGFPoly syndrome=new GenericGFPoly(field,syndromeCoefficients);  GenericGFPoly[] sigmaOmega=runEuclideanAlgorithm(field.buildMonomial(twoS,1),syndrome,twoS);  GenericGFPoly sigma=sigmaOmega[0];  GenericGFPoly omega=sigmaOmega[1];  int[] errorLocations=findErrorLocations(sigma);  int[] errorMagnitudes=findErrorMagnitudes(omega,errorLocations);  for (int i=0; i < errorLocations.length; i++) {    int position=received.length - 1 - field.log(errorLocations[i]);    if (position < 0) {      throw new ReedSolomonException("Bad error location");    }    received[position]=GenericGF.addOrSubtract(received[position],errorMagnitudes[i]);  }}  }
class C{  static void _dumpAsString(String indent,boolean verbose,ASN1Primitive obj,StringBuffer buf){  String nl=System.getProperty("line.separator");  if (obj instanceof ASN1Sequence) {    Enumeration e=((ASN1Sequence)obj).getObjects();    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERSequence) {      buf.append("BER Sequence");    } else     if (obj instanceof DERSequence) {      buf.append("DER Sequence");    } else {      buf.append("Sequence");    }    buf.append(nl);    while (e.hasMoreElements()) {      Object o=e.nextElement();      if (o == null || o.equals(DERNull.INSTANCE)) {        buf.append(tab);        buf.append("NULL");        buf.append(nl);      } else       if (o instanceof ASN1Primitive) {        _dumpAsString(tab,verbose,(ASN1Primitive)o,buf);      } else {        _dumpAsString(tab,verbose,((ASN1Encodable)o).toASN1Primitive(),buf);      }    }  } else   if (obj instanceof ASN1TaggedObject) {    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERTaggedObject) {      buf.append("BER Tagged [");    } else {      buf.append("Tagged [");    }    ASN1TaggedObject o=(ASN1TaggedObject)obj;    buf.append(Integer.toString(o.getTagNo()));    buf.append(']');    if (!o.isExplicit()) {      buf.append(" IMPLICIT ");    }    buf.append(nl);    if (o.isEmpty()) {      buf.append(tab);      buf.append("EMPTY");      buf.append(nl);    } else {      _dumpAsString(tab,verbose,o.getObject(),buf);    }  } else   if (obj instanceof ASN1Set) {    Enumeration e=((ASN1Set)obj).getObjects();    String tab=indent + TAB;    buf.append(indent);    if (obj instanceof BERSet) {      buf.append("BER Set");    } else {      buf.append("DER Set");    }    buf.append(nl);    while (e.hasMoreElements()) {      Object o=e.nextElement();      if (o == null) {        buf.append(tab);        buf.append("NULL");        buf.append(nl);      } else       if (o instanceof ASN1Primitive) {        _dumpAsString(tab,verbose,(ASN1Primitive)o,buf);      } else {        _dumpAsString(tab,verbose,((ASN1Encodable)o).toASN1Primitive(),buf);      }    }  } else   if (obj instanceof ASN1OctetString) {    ASN1OctetString oct=(ASN1OctetString)obj;    if (obj instanceof BEROctetString || obj instanceof BERConstructedOctetString) {      buf.append(indent + "BER Constructed Octet String" + "["+ oct.getOctets().length+ "] ");    } else {      buf.append(indent + "DER Octet String" + "["+ oct.getOctets().length+ "] ");    }    if (verbose) {      buf.append(dumpBinaryDataAsString(indent,oct.getOctets()));    } else {      buf.append(nl);    }  } else   if (obj instanceof ASN1ObjectIdentifier) {    buf.append(indent + "ObjectIdentifier(" + ((ASN1ObjectIdentifier)obj).getId()+ ")"+ nl);  } else   if (obj instanceof DERBoolean) {    buf.append(indent + "Boolean(" + ((DERBoolean)obj).isTrue()+ ")"+ nl);  } else   if (obj instanceof ASN1Integer) {    buf.append(indent + "Integer(" + ((ASN1Integer)obj).getValue()+ ")"+ nl);  } else   if (obj instanceof DERBitString) {    DERBitString bt=(DERBitString)obj;    buf.append(indent + "DER Bit String" + "["+ bt.getBytes().length+ ", "+ bt.getPadBits()+ "] ");    if (verbose) {      buf.append(dumpBinaryDataAsString(indent,bt.getBytes()));    } else {      buf.append(nl);    }  } else   if (obj instanceof DERIA5String) {    buf.append(indent + "IA5String(" + ((DERIA5String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERUTF8String) {    buf.append(indent + "UTF8String(" + ((DERUTF8String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERPrintableString) {    buf.append(indent + "PrintableString(" + ((DERPrintableString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERVisibleString) {    buf.append(indent + "VisibleString(" + ((DERVisibleString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERBMPString) {    buf.append(indent + "BMPString(" + ((DERBMPString)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERT61String) {    buf.append(indent + "T61String(" + ((DERT61String)obj).getString()+ ") "+ nl);  } else   if (obj instanceof DERUTCTime) {    buf.append(indent + "UTCTime(" + ((DERUTCTime)obj).getTime()+ ") "+ nl);  } else   if (obj instanceof DERGeneralizedTime) {    buf.append(indent + "GeneralizedTime(" + ((DERGeneralizedTime)obj).getTime()+ ") "+ nl);  } else   if (obj instanceof BERApplicationSpecific) {    buf.append(outputApplicationSpecific("BER",indent,verbose,obj,nl));  } else   if (obj instanceof DERApplicationSpecific) {    buf.append(outputApplicationSpecific("DER",indent,verbose,obj,nl));  } else   if (obj instanceof DEREnumerated) {    DEREnumerated en=(DEREnumerated)obj;    buf.append(indent + "DER Enumerated(" + en.getValue()+ ")"+ nl);  } else   if (obj instanceof DERExternal) {    DERExternal ext=(DERExternal)obj;    buf.append(indent + "External " + nl);    String tab=indent + TAB;    if (ext.getDirectReference() != null) {      buf.append(tab + "Direct Reference: " + ext.getDirectReference().getId()+ nl);    }    if (ext.getIndirectReference() != null) {      buf.append(tab + "Indirect Reference: " + ext.getIndirectReference().toString()+ nl);    }    if (ext.getDataValueDescriptor() != null) {      _dumpAsString(tab,verbose,ext.getDataValueDescriptor(),buf);    }    buf.append(tab + "Encoding: " + ext.getEncoding()+ nl);    _dumpAsString(tab,verbose,ext.getExternalContent(),buf);  } else {    buf.append(indent + obj.toString() + nl);  }}  }
class C{  boolean selectExistsUnregisteredQuery(Connection c,String sql,Object... vs) throws PalantirSqlException, PalantirInterruptedException {  return basicSql.selectExistsInternal(c,SQLString.getUnregisteredQuery(sql),vs);}  }
class C{  public static void reportError(UnrecoverableException e){  if (e instanceof UnrecoverablePositionedException) {    reportError(e.getMessage(),((UnrecoverablePositionedException)e).getPosition());  } else {    reportError(e.getMessage());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.506 -0500",hash_original_method="6DCA089E698119AE5E5CAA45D8347BA0",hash_generated_method="D8E4CE4B18148E063615B4C3F682702D") public boolean isWildcard(){  return this.addressType == WILD_CARD;}  }
class C{  public boolean isInitialized(){  return lastPts != Long.MIN_VALUE;}  }
class C{  public JCIdent Ident(Symbol sym){  return (JCIdent)new JCIdent((sym.name != names.empty) ? sym.name : sym.flatName(),sym).setPos(pos).setType(sym.type);}  }
class C{  public static int parseInt(CharSequence csq){  return parseInt(csq,10);}  }
class C{  public void addLabel(Label label){  getLabels().add(label);}  }
class C{  public HistoryReadResponse HistoryRead(RequestHeader RequestHeader,ExtensionObject HistoryReadDetails,TimestampsToReturn TimestampsToReturn,Boolean ReleaseContinuationPoints,HistoryReadValueId... NodesToRead) throws ServiceFaultException, ServiceResultException {  HistoryReadRequest req=new HistoryReadRequest(RequestHeader,HistoryReadDetails,TimestampsToReturn,ReleaseContinuationPoints,NodesToRead);  return (HistoryReadResponse)channel.serviceRequest(req);}  }
class C{  public void log(Level level,Throwable throwable,String msg,Object[] argArray){  innerLog(level,throwable,msg,UNKNOWN_ARG,UNKNOWN_ARG,UNKNOWN_ARG,argArray);}  }
class C{  public void gotoMark(){  _currentNode=_markedNode;}  }
class C{  public void notationDecl(String name,String publicId,String systemId){}  }
class C{  public static PrintJobAttributeSet synchronizedView(PrintJobAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new SynchronizedPrintJobAttributeSet(attributeSet);}  }
class C{  private HashMap<String,List<StoragePort>> discoverFileStoragePorts(StorageSystem system,VNXeApiClient client,Map<String,URI> nasServerIdMap) throws VNXeException {  HashMap<String,List<StoragePort>> storagePorts=new HashMap<String,List<StoragePort>>();  List<StoragePort> newStoragePorts=new ArrayList<StoragePort>();  List<StoragePort> existingStoragePorts=new ArrayList<StoragePort>();  _logger.info("Start storage port discovery for storage system {}",system.getId());  List<VNXeFileInterface> interfaces=client.getFileInterfaces();  if (interfaces == null || interfaces.isEmpty()) {    _logger.info("No file interfaces found for the system: {} ",system.getId());    return storagePorts;  }  _logger.info("Number file interfaces found: {}",interfaces.size());  for (  VNXeFileInterface intf : interfaces) {    StoragePort port=null;    VNXeBase nasServer=intf.getNasServer();    if (nasServer == null) {      continue;    }    String nasServerId=nasServer.getId();    URI haDomainUri=nasServerIdMap.get(nasServerId);    if (haDomainUri == null) {      continue;    }    String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,intf.getIpAddress(),NativeGUIDGenerator.PORT);    URIQueryResultList results=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid),results);    if (results.iterator().hasNext()) {      _logger.info("cross verifying for duplicate port");      StoragePort tmpPort=_dbClient.queryObject(StoragePort.class,results.iterator().next());      _logger.info(String.format("StorageDevice found for port %s - Actual StorageDevice %s : PortGroup found for port %s - Actual PortGroup %s",tmpPort.getStorageDevice(),system.getId(),tmpPort.getPortGroup(),nasServerId));      if (tmpPort.getStorageDevice().equals(system.getId()) && tmpPort.getPortGroup().equals(nasServerId)) {        port=tmpPort;        _logger.info("found duplicate dm intf {}",intf.getName());      }    }    if (port == null) {      port=new StoragePort();      port.setId(URIUtil.createId(StoragePort.class));      port.setLabel(portNativeGuid);      port.setTransportType("IP");      port.setNativeGuid(portNativeGuid);      port.setStorageDevice(system.getId());      port.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());      port.setPortName(intf.getName());      port.setPortNetworkId(intf.getIpAddress());      port.setPortGroup(nasServerId);      port.setStorageHADomain(haDomainUri);      _logger.info("Creating new storage port using NativeGuid : {}, IP : {}",portNativeGuid,intf.getIpAddress());      newStoragePorts.add(port);    } else {      existingStoragePorts.add(port);    }    port.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());    port.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());  }  _logger.info("Storage port discovery for storage system {} complete",system.getId());  storagePorts.put(NEW,newStoragePorts);  storagePorts.put(EXISTING,existingStoragePorts);  return storagePorts;}  }
class C{  public void clear(){  logpane.clear();  for (  Entry<Progress,JProgressBar> ent : pbarmap.entrySet()) {    super.remove(ent.getValue());    pbarmap.remove(ent.getKey());  }}  }
class C{  private int checkSet(Set<?> remoteSet,Set<?> referenceSet){  if (!remoteSet.equals(referenceSet)) {    System.out.println("SupportedQueryTypesTest::checkSet:" + " (ERROR) Set aren't as expected");    printSet(remoteSet,"remoteSet");    printSet(referenceSet,"referenceSet");    return 1;  } else {    return 0;  }}  }
class C{  @Override public ContinuousDistribution toContinuous(){  return this;}  }
class C{  public BEncodedHeap(final File location,final int keylength,final ByteOrder ordering,final int buffermax) throws IOException {  this.table=new Heap(location,keylength,ordering,buffermax);  this.columnames=new LinkedHashSet<String>();}  }
class C{  public void deploy(String path,String version,InputStream war,boolean update,String tag) throws TomcatManagerException, IOException {  deployImpl(path,version,null,null,war,update,tag);}  }
class C{  public void unread() throws IOException {  _is.unread();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:56.705 -0500",hash_original_method="A2824ED5DB0FCCB2C192A225E52EA88C",hash_generated_method="D836B75E16EC26E91DC8D560B1AA7650") public final byte[] generateSecret() throws IllegalStateException {  return spiImpl.engineGenerateSecret();}  }
class C{  public static boolean hasImageFile(String name){  return (getImageFilename(name) != null);}  }
class C{  @Deprecated public boolean attachInView(View view,CGRect rect){  return initOpenGLViewWithView(view,rect);}  }
class C{  public void startDocument(){  LOG.info("Begin parse");}  }
class C{  public void insertRow() throws SQLException {  int pos;  if (onInsertRow == false || insertRow.isCompleteRow(RowSetMD) == false) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.failedins").toString());  }  Object[] toInsert=getParams();  for (int i=0; i < toInsert.length; i++) {    insertRow.setColumnObject(i + 1,toInsert[i]);  }  Row insRow=new Row(RowSetMD.getColumnCount(),insertRow.getOrigRow());  insRow.setInserted();  if (currentRow >= numRows || currentRow < 0) {    pos=numRows;  } else {    pos=currentRow;  }  rvh.add(pos,insRow);  ++numRows;  notifyRowChanged();}  }
class C{  @Override public void close(){  panel.dispose();}  }
class C{  private void scroll(int row){  int rows=data.getRows();  if (rows < 1) {    append("scroll(" + row + ") showing entire table already");    return;  }  if (row < 0) {    data.setFirst(0);  } else   if (row >= data.getRowCount()) {    data.setFirst(data.getRowCount() - 1);  } else {    data.setFirst(row - (row % rows));  }  append("scroll(" + row + "), first="+ data.getFirst());}  }
class C{  public boolean isOutOfMemory(){  try {    Thread.sleep(m_SleepTime);  } catch (  InterruptedException ex) {    ex.printStackTrace();  }  m_MemoryUsage=m_MemoryMXBean.getHeapMemoryUsage();  if (isEnabled()) {    long avail=m_MemoryUsage.getMax() - m_MemoryUsage.getUsed();    if (avail > OUT_OF_MEMORY_THRESHOLD) {      long num=(avail - OUT_OF_MEMORY_THRESHOLD) / 5242880 + 1;      m_SleepTime=(long)(2.0 * (Math.log(num) + 2.5));      if (m_SleepTime > MAX_SLEEP_TIME) {        m_SleepTime=MAX_SLEEP_TIME;      }    }    return avail < OUT_OF_MEMORY_THRESHOLD;  } else {    return false;  }}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  private int nextInElement(boolean attributes){  if (attributes && !elementIndex.currentElement.isAttributesEmpty()) {    elementIndex.index=null;    event=ATTRIBUTE;  } else   if (elementIndex.index != null && elementIndex.currentElement.contentsSize() > elementIndex.index) {    WbXmlContent content=elementIndex.currentElement.getContent(elementIndex.index);    if (content.isEntity()) {      event=ENTITY_REFERENCE;    } else     if (content.isString()) {      event=CHARACTERS;    } else     if (content.isPi()) {      event=PROCESSING_INSTRUCTION;    } else {      parents.push(elementIndex);      elementIndex=new ElementIndex();      elementIndex.currentElement=content.getElement();      elementIndex.index=null;      event=START_ELEMENT;    }  } else {    event=END_ELEMENT;  }  return event;}  }
class C{  public static ValueTimestamp fromMillis(long ms){  long dateValue=DateTimeUtils.dateValueFromDate(ms);  long nanos=DateTimeUtils.nanosFromDate(ms);  return fromDateValueAndNanos(dateValue,nanos);}  }
class C{  synchronized void store(long maxTxId) throws IOException {  if (enabled && currentMax < maxTxId) {    if (LOG.isTraceEnabled()) {      LOG.trace("Setting maxTxId to " + maxTxId);    }    String txidStr=Long.toString(maxTxId);    try {      Stat stat=zkc.get().setData(path,txidStr.getBytes("UTF-8"),-1);      currentMax=maxTxId;    } catch (    Exception e) {      LOG.error("Error writing new MaxTxId value {}",maxTxId,e);    }  }}  }
class C{  public void registerTableNodes(SnmpMib mib,MBeanServer server){  tableJvmMemMgrPoolRelTable=createJvmMemMgrPoolRelTableMetaNode("JvmMemMgrPoolRelTable","JvmMemory",mib,server);  if (tableJvmMemMgrPoolRelTable != null) {    tableJvmMemMgrPoolRelTable.registerEntryNode(mib,server);    mib.registerTableMeta("JvmMemMgrPoolRelTable",tableJvmMemMgrPoolRelTable);  }  tableJvmMemPoolTable=createJvmMemPoolTableMetaNode("JvmMemPoolTable","JvmMemory",mib,server);  if (tableJvmMemPoolTable != null) {    tableJvmMemPoolTable.registerEntryNode(mib,server);    mib.registerTableMeta("JvmMemPoolTable",tableJvmMemPoolTable);  }  tableJvmMemGCTable=createJvmMemGCTableMetaNode("JvmMemGCTable","JvmMemory",mib,server);  if (tableJvmMemGCTable != null) {    tableJvmMemGCTable.registerEntryNode(mib,server);    mib.registerTableMeta("JvmMemGCTable",tableJvmMemGCTable);  }  tableJvmMemManagerTable=createJvmMemManagerTableMetaNode("JvmMemManagerTable","JvmMemory",mib,server);  if (tableJvmMemManagerTable != null) {    tableJvmMemManagerTable.registerEntryNode(mib,server);    mib.registerTableMeta("JvmMemManagerTable",tableJvmMemManagerTable);  }}  }
class C{  private void onBluetoothDisconnected(Context context,Intent intent){  BluetoothDevice device;  device=(BluetoothDevice)intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);  log.info("Bluetooth broadcast: disconnected! (from " + device + ")");}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMSVGElement(prefix,(AbstractDocument)doc);}  }
class C{  public boolean merge(final Frame<? extends V> frame,final boolean[] access){  boolean changes=false;  for (int i=0; i < locals; ++i) {    if (!access[i] && !values[i].equals(frame.values[i])) {      values[i]=frame.values[i];      changes=true;    }  }  return changes;}  }
class C{  public synchronized void addPreset(String id,String name,String url,boolean active){  SQLiteDatabase db=getWritableDatabase();  ContentValues values=new ContentValues();  values.put("id",id);  values.put("name",name);  values.put("url",url);  values.put("active",active ? 1 : 0);  db.insert("presets",null,values);  db.close();}  }
class C{  XMLAttribute(String fullName,String name,String namespace,String value,String type){  this.fullName=fullName;  this.name=name;  this.namespace=namespace;  this.value=value;  this.type=type;}  }
class C{  public void createAsyncSubUsageScenario01() throws Exception {  long subscribeTime=DateTimeHandling.calculateMillis("2012-11-30 00:00:00") - DateTimeHandling.daysToMillis(17.5);  BillingIntegrationTestBase.setDateFactoryInstance(subscribeTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO01_ASYNC_PERUNIT_DAY",TestService.EXAMPLE_ASYNC,TestPriceModel.EXAMPLE_PERUNIT_DAY_ROLES,technicalServiceAsync,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(basicSetup.getCustomerAdminKey(),"SCENARIO01_ASYNC_PERUNIT_DAY",serviceDetails,basicSetup.getCustomerUser1(),role);  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(17.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),basicSetup.getCustomerAdmin(),subDetails);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(15.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(basicSetup.getCustomerAdminKey(),subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO01_ASYNC_PERUNIT_DAY",subDetails);}  }
class C{  @Override public Instances outputFormat() throws Exception {  if (m_InputFormat == null) {    throw new Exception("No output format defined.");  }  return new Instances(m_InputFormat,0);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public DefaultTableCellHeaderRenderer(){  setHorizontalAlignment(JLabel.CENTER);}  }
class C{  public static DefaultIterableAdapter adapt(Iterable<?> iterable,ObjectWrapperWithAPISupport wrapper){  return new DefaultIterableAdapter(iterable,wrapper);}  }
class C{  private Object decodeData(final ByteBuffer buf){  if (buf == null)   throw new IllegalArgumentException();  try {    return SerializerUtil.deserialize(buf.duplicate());  } catch (  RuntimeException ex) {  }{    final long commitTime=journal.getLastCommitTime();    final Iterator<String> nitr=journal.indexNameScan(null,commitTime);    while (nitr.hasNext()) {      final String name=nitr.next();      final ICheckpointProtocol ndx=journal.getIndexLocal(name,commitTime);      final IndexTypeEnum indexType=ndx.getCheckpoint().getIndexType();switch (indexType) {case BTree:{          final AbstractBTree btree=(AbstractBTree)ndx;          final com.bigdata.btree.NodeSerializer nodeSer=btree.getNodeSerializer();          try {            final com.bigdata.btree.data.IAbstractNodeData nodeOrLeaf=nodeSer.decode(buf.duplicate());            log.warn("Record decoded from index=" + name);            return nodeOrLeaf;          } catch (          Throwable t) {            continue;          }        }case HTree:{        final AbstractHTree htree=(AbstractHTree)ndx;        final com.bigdata.htree.NodeSerializer nodeSer=htree.getNodeSerializer();        try {          final com.bigdata.btree.data.IAbstractNodeData nodeOrLeaf=nodeSer.decode(buf.duplicate());          log.warn("Record decoded from index=" + name);          return nodeOrLeaf;        } catch (        Throwable t) {          continue;        }      }case Stream:    @SuppressWarnings("unused") final Stream stream=(Stream)ndx;  continue;default :throw new UnsupportedOperationException("Unknown indexType=" + indexType);}}}return null;}  }
class C{  public void waitUntilEnd(long limit,TimeUnit limitUnit) throws TimeoutException {  long expiry=limitUnit.toMillis(limit) + System.currentTimeMillis();  waitUntilEnd(expiry);}  }
class C{  @Override public void invoke(@NotNull final Project project,final Editor editor,@NotNull final PsiElement element) throws IncorrectOperationException {  if (!element.getLanguage().isKindOf(JavaLanguage.INSTANCE)) {    new Notification("FindBugs Missing Feature","Not Supported","Sorry, insert annotation not supported for this language.",NotificationType.INFORMATION).notify(project);    return;  }  final PsiDocCommentOwner container=getContainer(element);  assert container != null;  if (!FileModificationServiceUtil.preparePsiElementForWrite(container)) {    return;  }  @SuppressWarnings({"ConstantConditions"}) final ReadonlyStatusHandler.OperationStatus status=ReadonlyStatusHandler.getInstance(project).ensureFilesWritable(container.getContainingFile().getVirtualFile());  if (status.hasReadonlyFiles()) {    return;  }  if (use15Suppressions(container)) {    final PsiModifierList modifierList=container.getModifierList();    if (modifierList != null) {      addSuppressAnnotation(project,editor,container,modifierList,getID(container));    }  } else {    Messages.showErrorDialog(editor.getComponent(),"Add suppress annotation is not supported for Java 1.3 and older","Unsupported");  }  final ToolWindowPanel toolWindow=ToolWindowPanel.getInstance(project);  final Map<PsiFile,List<ExtendedProblemDescriptor>> problems=toolWindow.getProblems();  problems.get(element.getContainingFile()).remove(getProblemDescriptor());  DaemonCodeAnalyzer.getInstance(project).restart();}  }
class C{  public void loadPreviousSettingsToServerInfo(){  String REMOTE_SERVER_USERNAME="remote_server_username";  String REMOTE_SERVER_PASSWORD="remote_server_password";  String REMOTE_SERVER_URL="remote_server_url";  String REMOTE_SERVER_PORT="remote_server_port";  String REMOTE_SERVER_DIRECTORY="remote_server_directory";  String REMOTE_SERVER_SECURE="remote_server_secure";  String REMOTE_SERVER_AUTHENTICATION_METHOD="remote_server_authentication_method";  String IS_LOCAL_SERVER_ADDRESS_DIFFERENT="local_server_different_address";  String USE_ONLY_LOCAL="use_ony_local";  String LOCAL_SERVER_USERNAME="local_server_username";  String LOCAL_SERVER_PASSWORD="local_server_password";  String LOCAL_SERVER_URL="local_server_url";  String LOCAL_SERVER_PORT="local_server_port";  String LOCAL_SERVER_DIRECTORY="local_server_directory";  String LOCAL_SERVER_SECURE="local_server_secure";  String LOCAL_SERVER_AUTHENTICATION_METHOD="local_server_authentication_method";  String LOCAL_SERVER_SSID="local_server_ssid";  ServerInfo oPrefServer=new ServerInfo();  oPrefServer.setRemoteServerUsername(prefs.getString(REMOTE_SERVER_USERNAME,""));  oPrefServer.setRemoteServerPassword(prefs.getString(REMOTE_SERVER_PASSWORD,""));  oPrefServer.setRemoteServerUrl(prefs.getString(REMOTE_SERVER_URL,""));  oPrefServer.setRemoteServerDirectory(prefs.getString(REMOTE_SERVER_DIRECTORY,""));  oPrefServer.setRemoteServerPort(prefs.getString(REMOTE_SERVER_PORT,""));  oPrefServer.setRemoteServerSecure(prefs.getBoolean(REMOTE_SERVER_SECURE,true));  oPrefServer.setRemoteServerAuthentication(prefs.getBoolean(REMOTE_SERVER_AUTHENTICATION_METHOD,true));  if (!prefs.getBoolean(IS_LOCAL_SERVER_ADDRESS_DIFFERENT,false))   oPrefServer.setLocalSameAddressAsRemote();  oPrefServer.setUseOnlyLocal(prefs.getBoolean(USE_ONLY_LOCAL,false));  oPrefServer.setIsLocalServerAddressDifferent(prefs.getBoolean(IS_LOCAL_SERVER_ADDRESS_DIFFERENT,false));  oPrefServer.setLocalServerUsername(prefs.getString(LOCAL_SERVER_USERNAME,""));  oPrefServer.setLocalServerPassword(prefs.getString(LOCAL_SERVER_PASSWORD,""));  oPrefServer.setLocalServerUrl(prefs.getString(LOCAL_SERVER_URL,""));  oPrefServer.setLocalServerPort(prefs.getString(LOCAL_SERVER_PORT,""));  oPrefServer.setLocalServerDirectory(prefs.getString(LOCAL_SERVER_DIRECTORY,""));  oPrefServer.setLocalServerSecure(prefs.getBoolean(LOCAL_SERVER_SECURE,false));  oPrefServer.setLocalServerAuthentication(prefs.getBoolean(LOCAL_SERVER_AUTHENTICATION_METHOD,false));  oPrefServer.setLocalServerSsid(prefs.getStringSet(LOCAL_SERVER_SSID,null));  oPrefServer.setEnabled(true);  setActiveServer(oPrefServer);  if (mServerList == null || mServerList.size() <= 0)   mServerList=new ArrayList<>();  mServerList.add(oPrefServer);  saveDomoticzServers(false);}  }
class C{  public void removeListener(final IZyGraphDisplaySettingsListener listener){  m_listeners.removeListener(listener);}  }
class C{  public void release(){  releaseEglSurface();  if (mSurface != null) {    if (mReleaseSurface) {      mSurface.release();    }    mSurface=null;  }}  }
class C{  public LayerDeclaration using(Iterable<String> layerNames){  Iterables.addAll(using,layerNames);  return this;}  }
class C{  protected void syncConsumeLoop(MessageConsumer requestConsumer){  try {    Message message=requestConsumer.receive(5000);    if (message != null) {      onMessage(message);    } else {      LOG.error("No message received");    }  } catch (  JMSException e) {    onException(e);  }}  }
class C{  public static int mixHashCodes(int hash1,int hash2,int hash3){  long result=hash1 * HASHPRIME + hash2;  return (int)(result * HASHPRIME + hash3);}  }
class C{  public void moveCondition(ConditionExpression condition,PlanNode before){  Select select=null;  PlanWithInput after=before.getOutput();  if (after instanceof Select)   select=(Select)after; else {    select=new Select(before,new ConditionList(1));    after.replaceInput(before,select);  }  select.getConditions().add(condition);}  }
class C{  public static PatternAndExpr and(PatternExpr first,PatternExpr second,PatternExpr... more){  return new PatternAndExpr(first,second,more);}  }
class C{  public void actionPerformed(ActionEvent e){  if (isFocusOwner() && isRegularSearchMode()) {    postActionEvent();  }  requestFocusInWindow();  selectAll();}  }
class C{  public static void spinLoopHint(){}  }
class C{  public HessianDebugOutputStream(OutputStream os,PrintWriter dbg){  _os=os;  _state=new HessianDebugState(dbg);}  }
class C{  public UserRoleAssignmentException(){}  }
class C{  private int lastRealMethod(int first){  int max=compiledMethods.length - 1;  if (Options.stackTraceFull) {    return max;  } else {    for (int i=max; i >= first; i--) {      if (compiledMethods[i] == StackFrameLayout.getInvisibleMethodID()) {        if (i - 1 >= 0) {          return i - 1;        } else {          return max;        }      }      CompiledMethod compiledMethod=getCompiledMethod(i);      if (compiledMethod.getCompilerType() == CompiledMethod.TRAP) {        return max;      }      Class<?> frameClass=compiledMethod.getMethod().getDeclaringClass().getClassForType();      if ((frameClass != org.jikesrvm.scheduler.MainThread.class) && (frameClass != org.jikesrvm.scheduler.RVMThread.class) && (frameClass != org.jikesrvm.runtime.Reflection.class)) {        return i;      }    }    return max;  }}  }
class C{  MetricsFactory(MetricRegistry registry){  metricRegistry=registry;}  }
class C{  public void applyViewOptions(){  setMainToolbarVisible(options.getViewParam().isShowMainToolbar());  setWorkbenchLayout(WorkbenchPanel.Layout.getLayout(options.getViewParam().getDisplayOption()));  WorkbenchPanel.ResponsePanelPosition position=WorkbenchPanel.ResponsePanelPosition.TABS_SIDE_BY_SIDE;  try {    position=WorkbenchPanel.ResponsePanelPosition.valueOf(options.getViewParam().getResponsePanelPosition());  } catch (  IllegalArgumentException e) {    LOGGER.warn("Failed to restore the position of response panel: ",e);  }  setResponsePanelPosition(position);  setShowTabNames(options.getViewParam().getShowTabNames());}  }
class C{  public XObject execute(XPathContext xctxt,org.w3c.dom.Node contextNode,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  return execute(xctxt,xctxt.getDTMHandleFromNode(contextNode),namespaceContext);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String executeSolrCommand(String command) throws IOException {  logger.info(command);  return executeSolrCommandWithTimeout(DEFAULT_TIMEOUT,command);}  }
class C{  public XBLOMContentElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public void endOperation(ISchedulingRule rule,boolean build,IProgressMonitor monitor) throws CoreException {  WorkManager workManager=getWorkManager();  if (workManager.checkInFailed(rule))   return;  boolean hasTreeChanges=false;  boolean depthOne=false;  try {    workManager.setBuild(build);    depthOne=workManager.getPreparedOperationDepth() == 1;    try {      Assert.isTrue(workManager.getPreparedOperationDepth() > 0,"Mismatched begin/endOperation");      workManager.rebalanceNestedOperations();    }  finally {    }  }  finally {    workManager.checkOut(rule);  }}  }
class C{  public void drawTexturedModalRectWithCustomSize(int x,int y,int u,int v,int width,int height){  float f=0.00390625F;  float f1=0.00390625F;  Tessellator tessellator=Tessellator.instance;  tessellator.startDrawingQuads();  tessellator.addVertexWithUV((double)(x + 0),(double)(y + height),(double)this.zLevel,(double)((float)(u + 0) * f),(double)((float)(v + height) * f1));  tessellator.addVertexWithUV((double)(x + width),(double)(y + height),(double)this.zLevel,(double)((float)(u + width) * f),(double)((float)(v + height) * f1));  tessellator.addVertexWithUV((double)(x + width),(double)(y + 0),(double)this.zLevel,(double)((float)(u + width) * f),(double)((float)(v + 0) * f1));  tessellator.addVertexWithUV((double)(x + 0),(double)(y + 0),(double)this.zLevel,(double)((float)(u + 0) * f),(double)((float)(v + 0) * f1));  tessellator.draw();}  }
class C{  public void doTask(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {switch (operation.getCode()) {case Constants.Operation.DEVICE_INFO:    operationManager.getDeviceInfo(operation);  break;case Constants.Operation.DEVICE_LOCATION:operationManager.getLocationInfo(operation);break;case Constants.Operation.APPLICATION_LIST:operationManager.getApplicationList(operation);break;case Constants.Operation.DEVICE_LOCK:operationManager.lockDevice(operation);break;case Constants.Operation.DEVICE_UNLOCK:operationManager.unlockDevice(operation);break;case Constants.Operation.WIPE_DATA:operationManager.wipeDevice(operation);break;case Constants.Operation.CLEAR_PASSWORD:operationManager.clearPassword(operation);break;case Constants.Operation.NOTIFICATION:operationManager.displayNotification(operation);break;case Constants.Operation.WIFI:operationManager.configureWifi(operation);break;case Constants.Operation.CAMERA:operationManager.disableCamera(operation);break;case Constants.Operation.INSTALL_APPLICATION:case Constants.Operation.INSTALL_APPLICATION_BUNDLE:case Constants.Operation.UPDATE_APPLICATION:operationManager.installAppBundle(operation);break;case Constants.Operation.UNINSTALL_APPLICATION:operationManager.uninstallApplication(operation);break;case Constants.Operation.ENCRYPT_STORAGE:operationManager.encryptStorage(operation);break;case Constants.Operation.DEVICE_RING:operationManager.ringDevice(operation);break;case Constants.Operation.DEVICE_MUTE:operationManager.muteDevice(operation);break;case Constants.Operation.WEBCLIP:operationManager.manageWebClip(operation);break;case Constants.Operation.PASSWORD_POLICY:operationManager.setPasswordPolicy(operation);break;case Constants.Operation.INSTALL_GOOGLE_APP:operationManager.installGooglePlayApp(operation);break;case Constants.Operation.CHANGE_LOCK_CODE:operationManager.changeLockCode(operation);break;case Constants.Operation.POLICY_BUNDLE:this.setPolicyBundle(operation);break;case Constants.Operation.WORK_PROFILE:operationManager.configureWorkProfile(operation);break;case Constants.Operation.POLICY_MONITOR:operationManager.monitorPolicy(operation);break;case Constants.Operation.POLICY_REVOKE:operationManager.revokePolicy(operation);break;case Constants.Operation.ENTERPRISE_WIPE:operationManager.enterpriseWipe(operation);break;case Constants.Operation.BLACKLIST_APPLICATIONS:operationManager.blacklistApps(operation);break;case Constants.Operation.DISENROLL:operationManager.disenrollDevice(operation);break;case Constants.Operation.UPGRADE_FIRMWARE:operationManager.upgradeFirmware(operation);break;case Constants.Operation.REBOOT:operationManager.rebootDevice(operation);break;case Constants.Operation.EXECUTE_SHELL_COMMAND:operationManager.executeShellCommand(operation);break;case Constants.Operation.ALLOW_PARENT_PROFILE_APP_LINKING:if (operationManager instanceof OperationManagerDeviceOwner) {operationManager.passOperationToSystemApp(operation);} else {operationManager.handleUserRestriction(operation);}break;case Constants.Operation.DISALLOW_CONFIG_VPN:if (operationManager instanceof OperationManagerDeviceOwner) {operationManager.passOperationToSystemApp(operation);} else {operationManager.handleUserRestriction(operation);}break;case Constants.Operation.DISALLOW_INSTALL_APPS:if (operationManager instanceof OperationManagerDeviceOwner) {operationManager.passOperationToSystemApp(operation);} else {operationManager.handleUserRestriction(operation);}break;case Constants.Operation.VPN:operationManager.configureVPN(operation);break;case Constants.Operation.APP_RESTRICTION:operationManager.restrictAccessToApplications(operation);break;case Constants.Operation.LOGCAT:operationManager.getLogcat(operation);break;default :operationManager.passOperationToSystemApp(operation);break;}}  }
class C{  public void initialize(UimaContext aContext){  return;}  }
class C{  public boolean handleCopyConflict(Cluster srcCluster,Cluster destCluster,Table srcTable,Table existingDestTable) throws HiveMetastoreException {  HiveObjectSpec spec=new HiveObjectSpec(existingDestTable.getDbName(),existingDestTable.getTableName());  if (existingDestTable.getParameters().get(HiveParameterKeys.SRC_CLUSTER) != null && !existingDestTable.getParameters().get(HiveParameterKeys.SRC_CLUSTER).equals(srcCluster.getName())) {    LOG.warn("Table " + spec + " exists on destination, and it's "+ "missing tags that indicate that it was replicated.");  }  if (!srcTable.getPartitionKeys().equals(existingDestTable.getPartitionKeys())) {    LOG.warn(String.format("For %s, there is a mismatch in the " + "partitioning keys. src: %s dest: %s",spec,srcTable.getPartitionKeys(),existingDestTable.getPartitionKeys()));    boolean dropData=!locationOnS3(existingDestTable.getSd());    LOG.warn("Not dropping data at location " + ReplicationUtils.getLocation(existingDestTable));    HiveMetastoreClient destMs=destCluster.getMetastoreClient();    LOG.debug(String.format("Dropping %s on destination (delete " + "data: %s)",spec,dropData));    destMs.dropTable(spec.getDbName(),spec.getTableName(),dropData);    LOG.debug("Dropped " + spec);  }  return true;}  }
class C{  public void createAndShowGui(Component component){  setTitle(s_logger.localizeMessage("guiHelpTitle"));  ArrayList<Image> images=new ArrayList<Image>();  images.add(getImage("AD16.png"));  images.add(getImage("AD32.png"));  setIconImages(images);  Container pane=getContentPane();  Locale locale=Locale.getDefault();  pane.setComponentOrientation(ComponentOrientation.getOrientation(locale));  pane.setLayout(new GridBagLayout());  JEditorPane info=new JEditorPane();  info.setEditable(false);  info.setContentType("text/html");  HTMLDocument htmlDoc=(HTMLDocument)info.getEditorKit().createDefaultDocument();  info.setDocument(htmlDoc);  info.setText(getHelpText());  info.setCaretPosition(0);  JScrollPane infoPane=new JScrollPane();  infoPane.setBorder(BorderFactory.createLoweredBevelBorder());  infoPane.setPreferredSize(new Dimension(500,400));  infoPane.getViewport().add(info,null);  pane.add(infoPane,getInfoPaneConstraints());  m_buttonClose=new JButton(s_logger.localizeMessage("guiButtonClose"));  m_buttonClose.setMnemonic(new Integer(s_logger.localizeMessage("guiButtonCloseMnemonic")));  m_buttonClose.setIcon(new ImageIcon(getImage("Cancel16.png")));  m_buttonClose.addActionListener(this);  pane.add(m_buttonClose,getCloseConstraints());  pack();  validate();  m_buttonClose.requestFocusInWindow();  setLocationRelativeTo(component);  setVisible(true);}  }
class C{  public <X extends Throwable>double orElseThrow(Supplier<X> exceptionSupplier) throws X {  if (isPresent) {    return value;  } else {    throw exceptionSupplier.get();  }}  }
class C{  private void sendTapEvent(BitSet bitset,Shift shift,boolean decision){  for (  SymbolEventTap tap : mTaps) {    SymbolEvent event=new SymbolEvent(bitset.get(0,mSymbolLength),mSymbolLength,decision,shift);    tap.receive(event);  }}  }
class C{  @Override public void endUpdate(UpdateContext op) throws SailException {  throw new SailException(ERR_OPENRDF_QUERY_MODEL);}  }
class C{  public static SeasonalityType readFrom(StreamInput in) throws IOException {  byte id=in.readByte();  for (  SeasonalityType seasonalityType : values()) {    if (id == seasonalityType.id) {      return seasonalityType;    }  }  throw new IllegalStateException("Unknown Seasonality Type with id [" + id + "]");}  }
class C{  public void releaseReadLock(){  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(RELEASE_TEXT + " read ",lock);  }  lock.readLock().unlock();  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(RELEASED_TEXT + " read ",lock);  }}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  public static DoubleSolenoid doubleSolenoid(int solenoidFwdChannel,int solenoidRevChannel){  return doubleSolenoid(0,solenoidFwdChannel,solenoidRevChannel);}  }
class C{  public static boolean isSystemApplication(Context context){  if (context == null) {    return false;  }  return isSystemApplication(context,context.getPackageName());}  }
class C{  private void preProcessTweet(Tweet tweet){  String rawTweet=tweet.getRawTweetString();  rawTweet=rawTweet.toLowerCase();  rawTweet=rawTweet.replaceAll("@[^\\s]+","");  rawTweet=rawTweet.replaceAll("((www\\.[^\\s]+)|(https?://[^\\s]+))","");  tweet.setTweetString(rawTweet.trim());}  }
class C{  public static byte[] readBytesFromByteBuffer(ByteBuffer byteBuffer){  byte[] buffer=new byte[byteBuffer.remaining()];  byteBuffer.get(buffer);  return buffer;}  }
class C{  public static boolean referencesVPlexCGs(BlockConsistencyGroup cg,DbClient dbClient){  if (cg.getTypes() != null && cg.getTypes().contains(Types.VPLEX.name())) {    for (    StorageSystem storageSystem : getVPlexStorageSystems(cg,dbClient)) {      if (storageSystem.getSystemType().equals(DiscoveredDataObject.Type.vplex.name())) {        StringSet cgNames=cg.getSystemConsistencyGroups().get(storageSystem.getId().toString());        if (cgNames != null && !cgNames.isEmpty()) {          return true;        }      }    }  }  return false;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void lookupContactMatchesStart(final Callback<Contacts> callback){  lookupContactMatches(null,100,callback);}  }
class C{  protected void scanCommentChar(){  scanChar();  if (ch == '\\') {    if (peekChar() == '\\' && !isUnicode()) {      skipChar();    } else {      convertUnicode();    }  }}  }
class C{  private void fetchSubtitlesTask(){  try {    if (this.subtitleFetchHandler != null) {      subtitleFetchHandler.removeCallbacks(this.subtitleFetchProcessesor);      subtitleFetchHandler=null;    }    LinkedHashMap<String,String> languageList=getLanguageList();    if (languageList != null && languageList.size() > 0) {      subtitleFetchHandler=new Handler();      if (subtitleFetchProcessesor != null)       subtitleFetchHandler.post(this.subtitleFetchProcessesor);    }  } catch (  Exception localException) {    logger.error(localException);  }}  }
class C{  protected void skipRemainingTagsInCurrentIfd() throws IOException, ExifInvalidFormatException {  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  int offset=mTiffStream.getReadByteCount();  if (offset > endOfTags) {    return;  }  if (mNeedToParseOffsetsInCurrentIfd) {    while (offset < endOfTags) {      mTag=readTag();      offset+=TAG_SIZE;      if (mTag == null) {        continue;      }      checkOffsetOrImageTag(mTag);    }  } else {    skipTo(endOfTags);  }  long ifdOffset=readUnsignedLong();  if (mIfdType == IfdId.TYPE_IFD_0 && (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested())) {    if (ifdOffset > 0) {      registerIfd(IfdId.TYPE_IFD_1,ifdOffset);    }  }}  }
class C{  public void configureManagers(){  InstanceManager.setProgrammerManager(getProgrammerManager());  InstanceManager.store(getPowerManager(),jmri.PowerManager.class);  InstanceManager.setTurnoutManager(getTurnoutManager());  InstanceManager.setThrottleManager(getThrottleManager());  InstanceManager.setConsistManager(getConsistManager());  commandStation=new jmri.jmrix.easydcc.EasyDccCommandStation(this);  InstanceManager.setCommandStation(commandStation);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (declaredVendorId: ");  result.append(declaredVendorId);  result.append(", projectId: ");  result.append(projectId);  result.append(')');  return result.toString();}  }
class C{  public void addSeparator(){  ensurePopupMenuCreated();  popupMenu.addSeparator();}  }
class C{  private void updateBackendVolumeToMirrorVpoolMap(Volume vplexVolume,StringSet associatedVolumeIds,VirtualPool sourceVirtualPool,VirtualPool sourceMirrorVPool,VirtualPool haMirrorVPool,Map<Volume,VirtualPool> backendVolumeToMirrorVpoolMap){  Set<String> vplexClusterWithMirrorForVolume=new HashSet<String>();  if (vplexVolume.getMirrors() != null && !vplexVolume.getMirrors().isEmpty()) {    StringSet existingMirrors=vplexVolume.getMirrors();    for (    String existingMirrorURI : existingMirrors) {      VplexMirror existingMirror=_dbClient.queryObject(VplexMirror.class,URI.create(existingMirrorURI));      if (existingMirror != null && !existingMirror.getInactive()) {        String cluster=ConnectivityUtil.getVplexClusterForVarray(existingMirror.getVirtualArray(),vplexVolume.getStorageController(),_dbClient);        checkIfClusterIsUnknown(cluster,existingMirror.getVirtualArray().toString(),vplexVolume.getStorageController().toString());        vplexClusterWithMirrorForVolume.add(cluster);      }    }    s_logger.info("Vplex Mirror(s) already exists for Vplex volume" + vplexVolume.getLabel() + " "+ vplexVolume.getId()+ " on cluster "+ vplexClusterWithMirrorForVolume);  }  for (  String associatedVolumeId : associatedVolumeIds) {    if (sourceMirrorVPool != null && sourceVirtualPool.getMaxNativeContinuousCopies() > 0) {      Volume associatedVolume=VPlexUtil.getVPLEXBackendVolume(vplexVolume,true,_dbClient);      if (associatedVolume != null && associatedVolume.getId().toString().equals(associatedVolumeId)) {        if (!vplexClusterWithMirrorForVolume.isEmpty()) {          String cluster=ConnectivityUtil.getVplexClusterForVarray(vplexVolume.getVirtualArray(),vplexVolume.getStorageController(),_dbClient);          checkIfClusterIsUnknown(cluster,vplexVolume.getVirtualArray().toString(),vplexVolume.getStorageController().toString());          if (!vplexClusterWithMirrorForVolume.contains(cluster)) {            backendVolumeToMirrorVpoolMap.put(associatedVolume,sourceMirrorVPool);          }        } else {          backendVolumeToMirrorVpoolMap.put(associatedVolume,sourceMirrorVPool);        }      }    } else {      s_logger.info("The max native continuous copies for the source Vpool {} is {} ",sourceVirtualPool.getLabel(),sourceVirtualPool.getMaxNativeContinuousCopies());      if (sourceMirrorVPool == null) {        s_logger.info("The mirror will not be created on the source side as the source mirror pool is not provided " + "in the virtual pool {} {}",sourceVirtualPool.getLabel(),sourceVirtualPool.getId());      }    }    VirtualPool haVPool=VirtualPool.getHAVPool(sourceVirtualPool,_dbClient);    if (haMirrorVPool != null && haVPool != null && haVPool.getMaxNativeContinuousCopies() > 0) {      Volume associatedVolume=VPlexUtil.getVPLEXBackendVolume(vplexVolume,false,_dbClient);      if (associatedVolume != null && associatedVolume.getId().toString().equals(associatedVolumeId)) {        if (!vplexClusterWithMirrorForVolume.isEmpty()) {          URI haVarrayURI=VPlexUtil.getHAVarray(sourceVirtualPool);          if (haVarrayURI != null) {            String cluster=ConnectivityUtil.getVplexClusterForVarray(haVarrayURI,vplexVolume.getStorageController(),_dbClient);            checkIfClusterIsUnknown(cluster,haVarrayURI.toString(),vplexVolume.getStorageController().toString());            if (!vplexClusterWithMirrorForVolume.contains(cluster)) {              backendVolumeToMirrorVpoolMap.put(associatedVolume,haMirrorVPool);            }          }        } else {          backendVolumeToMirrorVpoolMap.put(associatedVolume,haMirrorVPool);        }      }    } else {      if (haVPool != null) {        s_logger.info("The max native continuous copies for the HA Vpool {} is {} ",haVPool.getLabel(),haVPool.getMaxNativeContinuousCopies());        if (haMirrorVPool == null) {          s_logger.info("The mirror will not be created on the HA side as the HA mirror pool is not provided " + "in the virtual pool {} {}",haVPool.getLabel(),haVPool.getId());        }      }    }  }}  }
class C{  protected static void updateBezierControlPoints(CubicCurve wire){  double yOffset=getBezierYOffset(wire);  wire.setControlX1(wire.getStartX());  wire.setControlY1(wire.getStartY() + yOffset);  wire.setControlX2(wire.getEndX());  wire.setControlY2(wire.getEndY() - yOffset);}  }
class C{  public void changeEndpoint(String endpoint) throws ConnectionEndpointArray.UnknownSchemeException {  changeEndpoints(new Endpoints(new ConnectionEndpointArray().addEndpoint(endpoint).toArray(new ConnectionEndpoint[1]),new TrustedKey[0]));}  }
class C{  protected void detailExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de detailExecuteLogic");  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionEliminacionBI service=services.lookupGestionEliminacionBI();  String id=request.getParameter(Constants.ID);  if (id != null && id.trim().length() > 0) {    EliminacionSerieVO eliminacion=service.abrirEliminacion(id,false);    setInTemporalSession(request,ValoracionConstants.ELIMINACION_KEY,EliminacionToPO.getInstance(services).transform(eliminacion));  }  saveCurrentInvocation(KeysClientsInvocations.VALORACION_DETALLEVALORACION,request);  setReturnActionFordward(request,mapping.findForward("detalle_valoracion"));}  }
class C{  private void doDeleteWithBody(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final String baseURI=req.getRequestURL().toString();  final String contentType=req.getContentType();  final boolean suppressTruthMaintenance=getBooleanValue(req,QueryServlet.ATTR_TRUTH_MAINTENANCE,false);  if (contentType == null)   throw new UnsupportedOperationException();  if (log.isInfoEnabled())   log.info("Request body: " + contentType);  final RDFFormat format=RDFFormat.forMIMEType(new MiniMime(contentType).getMimeType());  if (format == null) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,"Content-Type not recognized as RDF: " + contentType);    return;  }  final RDFParserFactory rdfParserFactory=RDFParserRegistry.getInstance().get(format);  if (rdfParserFactory == null) {    buildAndCommitResponse(resp,HTTP_INTERNALERROR,MIME_TEXT_PLAIN,"Parser factory not found: Content-Type=" + contentType + ", format="+ format);    return;  }  final Resource[] defaultContext;{    final String[] s=req.getParameterValues("context-uri");    if (s != null && s.length > 0) {      try {        defaultContext=toURIs(s);      } catch (      IllegalArgumentException ex) {        buildAndCommitResponse(resp,HTTP_INTERNALERROR,MIME_TEXT_PLAIN,ex.getLocalizedMessage());        return;      }    } else {      defaultContext=new Resource[0];    }  }  try {    submitApiTask(new DeleteWithBodyTask(req,resp,getNamespace(req),ITx.UNISOLATED,baseURI,suppressTruthMaintenance,defaultContext,rdfParserFactory)).get();  } catch (  Throwable t) {    BigdataRDFServlet.launderThrowable(t,resp,"DELETE-WITH-BODY: baseURI=" + baseURI + ", context-uri="+ Arrays.toString(defaultContext));  }}  }
class C{  public Matrix(double[][] A,int m,int n){  this.A=A;  this.m=m;  this.n=n;}  }
class C{  public static void emitLoadThread(Assembler asm,GPR base,Offset offset){  if (VM.BuildFor32Addr) {    asm.emitMOV_Reg_RegDisp(THREAD_REGISTER,base,offset);  } else {    asm.emitMOV_Reg_RegDisp_Quad(THREAD_REGISTER,base,offset);  }}  }
class C{  public double pdf(double x){  return pdf(x,v);}  }
class C{  private static int skey(int testnum) throws Exception {  if (ks == null) {    ks=KeyStore.getInstance(KS_TYPE,provider);    ks.load(null,tokenPwd);  }  Enumeration enu=ks.aliases();  int count=0;  while (enu.hasMoreElements()) {    String next=(String)enu.nextElement();    ks.deleteEntry(next);    System.out.println("deleted entry for: " + next);  }  ks.setKeyEntry("sk1",sk1,null,null);  System.out.println("test " + testnum++ + " passed");  ks.setKeyEntry("sk2",sk2,null,null);  System.out.println("test " + testnum++ + " passed");  KeyStore.SecretKeyEntry ske=(KeyStore.SecretKeyEntry)ks.getEntry("sk1",null);  if ("DES".equals(ske.getSecretKey().getAlgorithm())) {    System.out.println("test " + testnum++ + " passed");  } else {    throw new SecurityException("expected DES, got " + ske.getSecretKey().getAlgorithm());  }  ske=(KeyStore.SecretKeyEntry)ks.getEntry("sk2",null);  if ("DESede".equals(ske.getSecretKey().getAlgorithm())) {    System.out.println("test " + testnum++ + " passed");  } else {    throw new SecurityException("expected DESede, got " + ske.getSecretKey().getAlgorithm());  }  SecretKey skey=(SecretKey)ks.getKey("sk1",null);  if ("DES".equals(skey.getAlgorithm())) {    System.out.println("test " + testnum++ + " passed");  } else {    throw new SecurityException("expected DES, got " + skey.getAlgorithm());  }  skey=(SecretKey)ks.getKey("sk2",null);  if ("DESede".equals(skey.getAlgorithm())) {    System.out.println("test " + testnum++ + " passed");  } else {    throw new SecurityException("expected DESede, got " + skey.getAlgorithm());  }  enu=ks.aliases();  count=0;  while (enu.hasMoreElements()) {    count++;    System.out.println("alias " + count + " = "+ (String)enu.nextElement());  }  if (count == 2) {    System.out.println("test " + testnum++ + " passed");  } else {    throw new SecurityException("expected 2 aliases");  }  if (ks.size() == 2) {    System.out.println("test " + testnum++ + " passed");  } else {    throw new SecurityException("expected size 2");  }  if (!ks.isCertificateEntry("sk1")) {    System.out.println("test " + testnum++ + " passed");  } else {    throw new SecurityException("expected ske");  }  if (ks.isKeyEntry("sk1")) {    System.out.println("test " + testnum++ + " passed");  } else {    throw new SecurityException("expected ske");  }  if (ks.entryInstanceOf("sk2",KeyStore.SecretKeyEntry.class)) {    System.out.println("test " + testnum++ + " passed");  } else {    throw new SecurityException("expected ske");  }  return testnum;}  }
class C{  void foo(String s,String s1){  bar(s,s1);}  }
class C{  public double manhattanDistance(final double x,final double y,final double z){  final double dx=Math.abs((double)this.x - x);  final double dy=Math.abs((double)this.y - y);  final double dz=Math.abs((double)this.z - z);  return dx + dy + dz;}  }
class C{  public UseSupertypeDescriptor(){  super(IJavaRefactorings.USE_SUPER_TYPE);}  }
class C{  private void calculateTotalMemoryOfPartitionRegion(){  for (int i=0; i < 4; i++) {    if (vm[i] == null)     LogWriterUtils.getLogWriter().fine("VM is null" + vm[i]);    vm[i].invoke(calculateMemoryOfPartitionRegion(i,i + 1));  }}  }
class C{  private void simulateStore(final StoreInstruction instruction){  final int index=instruction.getNumber();  final Element elementToStore=runtimeStack.pop();  if (elementToStore instanceof MethodHandle)   mergeMethodHandleStore(index,(MethodHandle)elementToStore); else   mergeElementStore(index,instruction.getVariableType(),elementToStore);}  }
class C{  void jbInit() throws Exception {  this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  titledBorder1=new TitledBorder(BorderFactory.createEtchedBorder(Color.white,new Color(148,145,140)),Msg.getMsg(Env.getCtx(),"ScriptVariables"));  titledBorder2=new TitledBorder(BorderFactory.createEtchedBorder(Color.white,new Color(148,145,140)),Msg.getMsg(Env.getCtx(),"ScriptEditor"));  mainPanel.setLayout(borderLayout1);  editor.setLineWrap(true);  editor.setTabSize(4);  editor.setWrapStyleWord(true);  bOK.addActionListener(this);  bCancel.addActionListener(this);  bHelp.addActionListener(this);  bProcess.addActionListener(this);  bValidate.addActionListener(this);  variables.setBackground(Color.lightGray);  variables.setEditable(false);  variables.setContentType("text/html");  variablesPane.setBorder(titledBorder1);  editorPane.setBorder(titledBorder2);  centerPane.setPreferredSize(new Dimension(500,500));  centerPane.setLeftComponent(editorPane);  centerPane.setRightComponent(variablesPane);  southPanel.setLayout(southLayout);  resultPanel.setLayout(resultLayout);  lResult.setText(Msg.getMsg(Env.getCtx(),"ScriptResult"));  fResult.setBackground(Color.lightGray);  fResult.setEditable(false);  fResult.setText("");  northPanel.setLayout(northLayout);  lResultVariable.setText(Msg.getMsg(Env.getCtx(),"ScriptResultVariable"));  fResultVariable.setBackground(Color.lightGray);  fResultVariable.setEditable(false);  resultVariablePanel.setLayout(resultVariableLayout);  okPanel.setLayout(okLayout);  northPanel.add(resultVariablePanel,BorderLayout.CENTER);  getContentPane().add(mainPanel);  editorPane.getViewport().add(editor,null);  variablesPane.getViewport().add(variables,null);  mainPanel.add(northPanel,BorderLayout.NORTH);  mainPanel.add(southPanel,BorderLayout.SOUTH);  southPanel.add(okPanel,BorderLayout.EAST);  okPanel.add(bCancel,null);  okPanel.add(bOK,null);  southPanel.add(resultPanel,BorderLayout.CENTER);  resultPanel.add(bValidate,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  resultPanel.add(bProcess,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  resultPanel.add(lResult,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  resultPanel.add(fResult,new GridBagConstraints(3,0,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  mainPanel.add(centerPane,BorderLayout.CENTER);  resultVariablePanel.add(lResultVariable,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  resultVariablePanel.add(fResultVariable,new GridBagConstraints(1,0,1,1,1.0,0.0,GridBagConstraints.CENTER,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  northPanel.add(helpPanel,BorderLayout.EAST);  helpPanel.add(bHelp,null);  centerPane.setDividerLocation(350);}  }
class C{  public static void doToFiles(File baseDir,Function<File,Void> doFunction){  for (  File file : Injector.INSTANCE.fileSystem().findFiles(baseDir)) {    doFunction.apply(file);  }}  }
class C{  public static void trace(String format,Object arg1,Object arg2){  trace(null);}  }
class C{  private Scope peek() throws JSONException {  if (stack.isEmpty()) {    throw new JSONException("Nesting problem");  }  return stack.get(stack.size() - 1);}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof MaskPropertyNode) {    if (children != null) {      throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidMaskElement");    }    if (mask == null) {      mask=((MaskPropertyNode)child).mask;    } else {      throw new FXGException(child.getStartLine(),child.getStartColumn(),"MultipleMaskElements");    }  } else   if (child instanceof LibraryNode) {    if (mask != null || children != null) {      throw new FXGException(child.getStartLine(),child.getStartColumn(),"InvalidLibraryElement");    }    if (library == null) {      library=(LibraryNode)child;    } else {      throw new FXGException(child.getStartLine(),child.getStartColumn(),"MultipleLibraryElements");    }  } else   if (child instanceof GraphicContentNode) {    if (children == null)     children=new ArrayList<GraphicContentNode>();    if (child instanceof GroupNode) {      GroupNode group=(GroupNode)child;      if (definesScaleGrid) {        group.setInsideScaleGrid(true);      }    }    children.add((GraphicContentNode)child);  } else {    super.addChild(child);  }}  }
class C{  private void applyForceAtPointAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      Vector2[] forcePoint=ApplyForceAtPointDialog.show(ControlUtilities.getParentWindow(this));      if (forcePoint != null) {synchronized (Simulation.LOCK) {          body.applyForce(forcePoint[0],forcePoint[1]);        }      }    }  }}  }
class C{  public void mark(int readAheadLimit){  return;}  }
class C{  private boolean hasImages(IAction actionToCheck){  return actionToCheck.getImageDescriptor() != null || actionToCheck.getHoverImageDescriptor() != null || actionToCheck.getDisabledImageDescriptor() != null;}  }
class C{  private void checkPageComplete(){  List<GefaehrdungsUmsetzung> arrListAllGefaehrdungsUmsetzungen=((RiskAnalysisWizard)getWizard()).getAllGefaehrdungsUmsetzungen();  Boolean complete=false;  for (  GefaehrdungsUmsetzung gefaehrdungsUmsetzung : arrListAllGefaehrdungsUmsetzungen) {    if (gefaehrdungsUmsetzung.getAlternative().equals(CHOISE_CONDITION_NEXT_PAGE)) {      complete=true;      break;    }  }  if (complete) {    setPageComplete(true);  } else {    setPageComplete(false);  }}  }
class C{  public OraWriter(int outputDimension){  this.outputDimension=outputDimension;}  }
class C{  @Pure public String classNameFromDescriptor(){  if (VM.VerifyAssertions) {    VM._assert(val.length > 0);    VM._assert(val[0] == 'L' && val[val.length - 1] == ';');  }  if (unicodeStringOrJTOCoffset == null) {    return StringUtilities.asciiBytesToString(val,1,val.length - 2).replace('/','.');  } else {    return toUnicodeStringInternal().substring(1,val.length - 1).replace('/','.');  }}  }
class C{  public void disableSuperPickAxe(){  superPickaxe=false;}  }
class C{  private static Take refresh(final String path) throws IOException {  return new TkFork(new FkHitRefresh(new File(path),null,new TkFiles("./target/classes")),new FkFixed(new TkClasspath()));}  }
class C{  private DatabaseMetadataDialect dialect(Connection conn){  try {    String dbProductName=conn.getMetaData().getDatabaseProductName();    if ("Oracle".equals(dbProductName))     return new OracleMetadataDialect(); else     if (dbProductName.startsWith("DB2/"))     return new DB2MetadataDialect(); else     if (dbProductName.equals("MySQL"))     return new MySQLMetadataDialect(); else     return new JdbcMetadataDialect();  } catch (  SQLException e) {    log.log(Level.SEVERE,"Failed to resolve dialect (JdbcMetaDataDialect will be used.",e);    return new JdbcMetadataDialect();  }}  }
class C{  public static EnhancedBookmarkPage buildPage(Activity activity,Tab tab){  if (DeviceFormFactor.isTablet(activity))   return new EnhancedBookmarkPage(activity,tab); else   return null;}  }
class C{  private void displaySuperToast(SuperActivityToast superActivityToast){  if (superActivityToast.isShowing()) {    return;  }  final ViewGroup viewGroup=superActivityToast.getViewGroup();  final View toastView=superActivityToast.getView();  if (viewGroup != null) {    try {      viewGroup.addView(toastView);      if (!superActivityToast.getShowImmediate()) {        toastView.startAnimation(getShowAnimation(superActivityToast));      }    } catch (    IllegalStateException e) {      this.cancelAllSuperActivityToastsForActivity(superActivityToast.getActivity());    }  }  if (!superActivityToast.isIndeterminate()) {    Message message=obtainMessage(Messages.REMOVE);    message.obj=superActivityToast;    sendMessageDelayed(message,superActivityToast.getDuration() + getShowAnimation(superActivityToast).getDuration());  }}  }
class C{  private void unmapVolumes(StorageSystem storage,Collection<URI> volumeURIs,Collection<Initiator> initiators,TaskCompleter completer){  try {    ScaleIORestClient scaleIOHandle=scaleIOHandleFactory.using(dbClient).getClientHandle(storage);    for (    URI volumeURI : volumeURIs) {      BlockObject blockObject=BlockObject.fetch(dbClient,volumeURI);      if (blockObject == null || blockObject.getInactive()) {        log.warn(String.format("Attempted to unmap BlockObject %s, which was either not found in the DB or was inactive",volumeURI.toString()));        continue;      }      String nativeId=blockObject.getNativeId();      for (      Initiator initiator : initiators) {        String port=initiator.getInitiatorPort();        boolean wasUnMapped=false;        if (initiator.getProtocol().equals(HostInterface.Protocol.ScaleIO.name())) {          wasUnMapped=unmapFromSDC(scaleIOHandle,nativeId,port,completer);        } else         if (initiator.getProtocol().equals(HostInterface.Protocol.iSCSI.name())) {          wasUnMapped=unmapFromSCSI(scaleIOHandle,nativeId,port,initiator.getLabel(),completer);        } else {          ServiceCoded code=DeviceControllerErrors.scaleio.unmapVolumeToClientFailed(nativeId,port,String.format("Unexpected initiator type %s",initiator.getProtocol()));          completer.error(dbClient,code);        }        if (!wasUnMapped) {          return;        }      }    }    completer.ready(dbClient);  } catch (  Exception e) {    log.error("Encountered an exception",e);    ServiceCoded code=DeviceControllerErrors.scaleio.encounteredAnExceptionFromScaleIOOperation("unmapVolume",e.getMessage());    completer.error(dbClient,code);  }}  }
class C{  private void paint(PaintEvent e){  e.gc.setBackground(widgetBackground);  e.gc.setForeground(widgetForeground);  Rectangle bounds=getBounds();  if (elements.length != 0) {    e.gc.fillRectangle(0,0,bounds.width,bounds.height);    e.gc.setForeground(widgetNormalShadow);    e.gc.drawLine(bounds.width - 1,0,bounds.width - 1,bounds.height - 1);  } else {    e.gc.setBackground(listBackground);    e.gc.fillRectangle(0,0,bounds.width,bounds.height);    int textIndent=INDENT_LEFT;    FontMetrics fm=e.gc.getFontMetrics();    int height=fm.getHeight();    int textMiddle=(bounds.height - height) / 2;    e.gc.setForeground(widgetForeground);    e.gc.drawText(LABEL_NA,textIndent,textMiddle);  }  if (isUpScrollRequired()) {    e.gc.setForeground(widgetDarkShadow);    int middle=bounds.width / 2;    e.gc.drawLine(middle + 1,3,middle + 5,7);    e.gc.drawLine(middle,3,middle - 4,7);    e.gc.drawLine(middle - 3,7,middle + 4,7);    e.gc.setForeground(listBackground);    e.gc.drawLine(middle,4,middle + 1,4);    e.gc.drawLine(middle - 1,5,middle + 2,5);    e.gc.drawLine(middle - 2,6,middle + 3,6);    e.gc.setForeground(widgetNormalShadow);    e.gc.drawLine(0,0,bounds.width - 2,0);    e.gc.setForeground(navigationElementShadowStroke);    e.gc.drawLine(0,1,bounds.width - 2,1);    e.gc.drawLine(0,bounds.height - 1,bounds.width - 2,bounds.height - 1);  }}  }
class C{  public final String toString(String codeset){  return (html.toString(codeset));}  }
class C{  @Override protected void buildRepresentation(T entity){  final SpriteStore store=SpriteStore.get();  Sprite sprite;  if (!isContained()) {    ZoneInfo info=ZoneInfo.get();    sprite=store.getModifiedSprite(translate(getClassResourcePath()),info.getZoneColor(),info.getColorMethod());  } else {    sprite=store.getSprite(translate(getClassResourcePath()));  }  final int width=sprite.getWidth();  if (width > IGameScreen.SIZE_UNIT_PIXELS) {    sprite=store.getAnimatedSprite(sprite,100);  } else   if (sprite.getHeight() > IGameScreen.SIZE_UNIT_PIXELS) {    sprite=store.getTile(sprite,0,0,IGameScreen.SIZE_UNIT_PIXELS,IGameScreen.SIZE_UNIT_PIXELS);    logger.warn("Multi-row item image for: " + getClassResourcePath());  }  setSprite(sprite);}  }
class C{  private final void consumeExpected(char expected) throws javax.xml.transform.TransformerException {  if (tokenIs(expected)) {    nextToken();  } else {    error(XPATHErrorResources.ER_EXPECTED_BUT_FOUND,new Object[]{String.valueOf(expected),m_token});    throw new XPathProcessorException(CONTINUE_AFTER_FATAL_ERROR);  }}  }
class C{  public void writePartialMessageToMessage(Message message,int endIndex){  int startIndexOfPartialMessage=message.offset + endIndex;  int lengthOfPartialMessage=(message.offset + message.length) - endIndex;  System.arraycopy(message.sharedArray,startIndexOfPartialMessage,this.sharedArray,this.offset,lengthOfPartialMessage);}  }
class C{  public static final void render(Graphics2D g,Shape shape,double scale,Color color){  if (shape == null)   return;  if (color == null)   color=Color.ORANGE;  if (shape instanceof Circle) {    Graphics2DRenderer.render(g,(Circle)shape,scale,color);  } else   if (shape instanceof Polygon) {    Graphics2DRenderer.render(g,(Polygon)shape,scale,color);  } else   if (shape instanceof Segment) {    Graphics2DRenderer.render(g,(Segment)shape,scale,color);  } else   if (shape instanceof Capsule) {    Graphics2DRenderer.render(g,(Capsule)shape,scale,color);  } else   if (shape instanceof Ellipse) {    Graphics2DRenderer.render(g,(Ellipse)shape,scale,color);  } else   if (shape instanceof Slice) {    Graphics2DRenderer.render(g,(Slice)shape,scale,color);  } else   if (shape instanceof HalfEllipse) {    Graphics2DRenderer.render(g,(HalfEllipse)shape,scale,color);  } else {  }}  }
class C{  public void incCqsActive(){  this._stats.incLong(_numCqsActiveId,1);}  }
class C{  public static Color parseColorFromProperties(Properties p,String propName,String dfault) throws NumberFormatException {  String colorString=p.getProperty(propName,dfault);  return parseColor(colorString,true);}  }
class C{  public DiskRegionDUnitTest(){  super();}  }
class C{  public SimpleContent(String text){  this(text,null);}  }
class C{  public static String msHumanReadable(final long millis){  double number=millis;  final String[] units=new String[]{"ms","sec","min","h","days"};  final double[] divisors=new double[]{1000,60,60,24};  int magnitude=0;  do {    double currentDivisor=divisors[Math.min(magnitude,divisors.length - 1)];    if (number < currentDivisor) {      break;    }    number/=currentDivisor;    magnitude++;  } while (magnitude < units.length - 1);  NumberFormat format=NumberFormat.getNumberInstance(Locale.UK);  format.setMinimumFractionDigits(0);  format.setMaximumFractionDigits(1);  String result=format.format(number) + units[magnitude];  return result;}  }
class C{  protected int findAndEliminateRedundant(int start,int firstOccuranceIndex,ExpressionOwner firstOccuranceOwner,ElemTemplateElement psuedoVarRecipient,Vector paths) throws org.w3c.dom.DOMException {  MultistepExprHolder head=null;  MultistepExprHolder tail=null;  int numPathsFound=0;  int n=paths.size();  Expression expr1=firstOccuranceOwner.getExpression();  if (DEBUG)   assertIsLocPathIterator(expr1,firstOccuranceOwner);  boolean isGlobal=(paths == m_absPaths);  LocPathIterator lpi=(LocPathIterator)expr1;  int stepCount=countSteps(lpi);  for (int j=start; j < n; j++) {    ExpressionOwner owner2=(ExpressionOwner)paths.elementAt(j);    if (null != owner2) {      Expression expr2=owner2.getExpression();      boolean isEqual=expr2.deepEquals(lpi);      if (isEqual) {        LocPathIterator lpi2=(LocPathIterator)expr2;        if (null == head) {          head=new MultistepExprHolder(firstOccuranceOwner,stepCount,null);          tail=head;          numPathsFound++;        }        tail.m_next=new MultistepExprHolder(owner2,stepCount,null);        tail=tail.m_next;        paths.setElementAt(null,j);        numPathsFound++;      }    }  }  if ((0 == numPathsFound) && isGlobal) {    head=new MultistepExprHolder(firstOccuranceOwner,stepCount,null);    numPathsFound++;  }  if (null != head) {    ElemTemplateElement root=isGlobal ? psuedoVarRecipient : findCommonAncestor(head);    LocPathIterator sharedIter=(LocPathIterator)head.m_exprOwner.getExpression();    ElemVariable var=createPseudoVarDecl(root,sharedIter,isGlobal);    if (DIAGNOSE_MULTISTEPLIST)     System.err.println("Created var: " + var.getName() + (isGlobal ? "(Global)" : ""));    QName uniquePseudoVarName=var.getName();    while (null != head) {      ExpressionOwner owner=head.m_exprOwner;      if (DIAGNOSE_MULTISTEPLIST)       diagnoseLineNumber(owner.getExpression());      changeToVarRef(uniquePseudoVarName,owner,paths,root);      head=head.m_next;    }    paths.setElementAt(var.getSelect(),firstOccuranceIndex);  }  return numPathsFound;}  }
class C{  public Builder dialogId(String dialogId){  this.dialogId=dialogId;  return this;}  }
class C{  public void testBug25624() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  createProcedure("testBug25624","(in _par1 decimal( 10 , 2 ) , in _par2 varchar( 4 )) BEGIN select 1; END");  this.conn.prepareCall("{call testBug25624(?,?)}").close();}  }
class C{  public AbstractInsnNode[] toArray(){  int i=0;  AbstractInsnNode elem=first;  AbstractInsnNode[] insns=new AbstractInsnNode[size];  while (elem != null) {    insns[i]=elem;    elem.index=i++;    elem=elem.next;  }  return insns;}  }
class C{  private static boolean isEncrypted(String password){  for (int i=0; i < ALGORITHMS.length; i++) {    if (password.startsWith(ALGORITHMS[i] + SEPERATOR)) {      return true;    }  }  return false;}  }
class C{  public void processPoints(List<Coord> list){  for (  Coord coord : list) {    processPoint(coord);  }}  }
class C{  public void play(int position) throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  LOGD(TAG,"attempting to play media at position " + position + " seconds");  if (mRemoteMediaPlayer == null) {    LOGE(TAG,"Trying to play a video with no active media session");    throw new NoConnectionException();  }  seekAndPlay(position);}  }
class C{  public static double[] ensureCapacity(double[] array,int minCapacity){  int oldCapacity=array.length;  double[] newArray;  if (minCapacity > oldCapacity) {    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }    newArray=new double[newCapacity];    System.arraycopy(array,0,newArray,0,oldCapacity);  } else {    newArray=array;  }  return newArray;}  }
class C{  private void writeUserRegistry(LocalContainer container,File configDir,Map<String,String> users,Map<String,List<String>> groups) throws IOException {  File usersXML=new File(configDir,"cargo-users.xml");  PrintStream writer=ServerConfigUtils.open(usersXML);  writer.println("  <basicRegistry id=\"basic\">");  for (  Map.Entry<String,String> user : users.entrySet()) {    writer.print("    <user name=\"");    writer.print(user.getKey());    writer.print("\" password=\"");    writer.print(user.getValue());    writer.println("\"/>");  }  for (  Map.Entry<String,List<String>> group : groups.entrySet()) {    writer.print("    <group name=\"");    writer.print(group.getKey());    writer.println("\">");    for (    String member : group.getValue()) {      writer.print("      <member name=\"");      writer.print(member);      writer.println("\"/>");    }    writer.println("    </group>");  }  writer.println("  </basicRegistry>");  ServerConfigUtils.close(writer);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (LruDiskCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public static boolean isCdiOneOneOrLater(FacesContext facesContext){  boolean result=false;  if (facesContext != null && facesContext.getAttributes().containsKey(RIConstants.CDI_1_1_OR_LATER)) {    result=(Boolean)facesContext.getAttributes().get(RIConstants.CDI_1_1_OR_LATER);  } else   if (facesContext != null && facesContext.getExternalContext().getApplicationMap().containsKey(RIConstants.CDI_1_1_OR_LATER)) {    result=facesContext.getExternalContext().getApplicationMap().containsKey(RIConstants.CDI_1_1_OR_LATER);  } else {    try {      Class.forName("javax.enterprise.context.Initialized");      result=true;    } catch (    ClassNotFoundException ignored) {      if (LOGGER.isLoggable(Level.FINEST)) {        LOGGER.log(Level.FINEST,"Detected CDI 1.0",ignored);      }    }    if (facesContext != null) {      facesContext.getAttributes().put(RIConstants.CDI_1_1_OR_LATER,result);      facesContext.getExternalContext().getApplicationMap().put(RIConstants.CDI_1_1_OR_LATER,result);    }  }  return result;}  }
class C{  private static boolean mergeFaces(Face face1,Face face2,int axis){  if (face1.remove || face2.remove) {    return false;  }  boolean isFacingEqual=true;  if (face1.isAnticlockwise() != face2.isAnticlockwise()) {    isFacingEqual=false;  }  if (face1.material != face2.material) {    return false;  }  Vertex[] verts1=face1.vertices;  Vertex[] verts2=face2.vertices;  ArrayList<Vertex> matches=new ArrayList<Vertex>();  ArrayList<Integer> verts1MatchIndex=new ArrayList<Integer>();  ArrayList<Integer> verts2MatchIndex=new ArrayList<Integer>();  for (int i=0; i < 4; i++) {    Vertex vert1=verts1[i];    for (int j=0; j < 4; j++) {      Vertex vert2=verts2[j];      if (vert1.similar(vert2)) {        matches.add(vert1);        verts1MatchIndex.add(i);        verts2MatchIndex.add(j);      }    }  }  if (matches.size() == 4 && !isFacingEqual) {    face1.remove=true;    face2.remove=true;    return false;  }  if (matches.size() == 2 && isFacingEqual) {    int extendingIn;    float xMin1, xMax1, yMin1, yMax1, zMin1, zMax1;    float xMin2, xMax2, yMin2, yMax2, zMin2, zMax2;    xMin1=xMax1=verts1[0].x;    yMin1=yMax1=verts1[0].y;    zMin1=zMax1=verts1[0].z;    xMin2=xMax2=verts2[0].x;    yMin2=yMax2=verts2[0].y;    zMin2=zMax2=verts2[0].z;    for (    Vertex v : verts1) {      if (v.x > xMax1)       xMax1=v.x;      if (v.x < xMin1)       xMin1=v.x;      if (v.y > yMax1)       yMax1=v.y;      if (v.y < yMin1)       yMin1=v.y;      if (v.z > zMax1)       zMax1=v.z;      if (v.z < zMin1)       zMin1=v.z;    }    for (    Vertex v : verts2) {      if (v.x > xMax2)       xMax2=v.x;      if (v.x < xMin2)       xMin2=v.x;      if (v.y > yMax2)       yMax2=v.y;      if (v.y < yMin2)       yMin2=v.y;      if (v.z > zMax2)       zMax2=v.z;      if (v.z < zMin2)       zMin2=v.z;    }    if (xMax1 > xMax2 || xMin1 < xMin2)     extendingIn=0; else     if (yMax1 > yMax2 || yMin1 < yMin2)     extendingIn=1; else     if (zMax1 > zMax2 || zMin1 < zMin2)     extendingIn=2; else     extendingIn=3;    if (extendingIn != axis) {      return false;    }    if (face1.isUVAnticlockwise() != face2.isUVAnticlockwise()) {      return false;    }    UV uv1=face1.uvs[verts1MatchIndex.get(0)];    UV uv2=face2.uvs[verts2MatchIndex.get(0)];    UV uvVec1=UV.subtract(face1.uvs[verts1MatchIndex.get(1)],uv1);    UV uvVec2=UV.subtract(face2.uvs[verts2MatchIndex.get(1)],uv2);    if (!uvVec1.similar(uvVec2)) {      return false;    }    if (FaceUtils.similar(uv1.u % 1.0f,uv2.u % 1.0f) && FaceUtils.similar(uv1.v % 1.0f,uv2.v % 1.0f)) {      Vertex[] newVerts=verts2.clone();      UV[] newUVs=face2.uvs.clone();      int changeCount=0;      for (int i=0; i < 2; i++) {        int v1Index=verts1MatchIndex.get(i);        int v2Index=verts2MatchIndex.get(i);        for (int j=0; j < 4; j++) {          Vertex v=verts1[j];          boolean[] axisEqual=new boolean[3];          for (int ax=0; ax < 3; ax++) {            axisEqual[ax]=verts2[v2Index].getByInt(ax) == v.getByInt(ax);          }          axisEqual[axis]=!axisEqual[axis];          if (axisEqual[0] && axisEqual[1] && axisEqual[2]) {            newVerts[v2Index]=v;            UV uvA=face1.uvs[v1Index];            UV uvB=face1.uvs[j];            newUVs[v2Index]=UV.add(newUVs[v2Index],UV.subtract(uvB,uvA));            changeCount++;            break;          }        }      }      if (changeCount == 2) {        face2.vertices=newVerts;        face2.uvs=newUVs;        return true;      }    }  }  return false;}  }
class C{  public static int[] copyFrom(int[] array,int newLength){  int[] copy=(int[])Array.newInstance(Integer.TYPE,newLength);  System.arraycopy(array,0,copy,0,Math.min(array.length,newLength));  return copy;}  }
class C{  public boolean shouldIgnoreHotKeys(){  return ignoreHotKeys || (about != null && about.isVisible()) || (help != null && help.isVisible())|| (setdlg != null && setdlg.isVisible())|| texElev.hasFocus()|| texTerrainLevel.hasFocus()|| texTerrExits.hasFocus()|| texTheme.hasFocus();}  }
class C{  public static BarSize newInstance(){  final BarSize returnInstance=new BarSize();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  protected int match_bitap(String text,String pattern,int loc){  assert (Match_MaxBits == 0 || pattern.length() <= Match_MaxBits) : "Pattern too long for this application.";  Map<Character,Integer> s=match_alphabet(pattern);  double score_threshold=Match_Threshold;  int best_loc=text.indexOf(pattern,loc);  if (best_loc != -1) {    score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);    best_loc=text.lastIndexOf(pattern,loc + pattern.length());    if (best_loc != -1) {      score_threshold=Math.min(match_bitapScore(0,best_loc,loc,pattern),score_threshold);    }  }  int matchmask=1 << (pattern.length() - 1);  best_loc=-1;  int bin_min, bin_mid;  int bin_max=pattern.length() + text.length();  int[] last_rd=new int[0];  for (int d=0; d < pattern.length(); d++) {    bin_min=0;    bin_mid=bin_max;    while (bin_min < bin_mid) {      if (match_bitapScore(d,loc + bin_mid,loc,pattern) <= score_threshold) {        bin_min=bin_mid;      } else {        bin_max=bin_mid;      }      bin_mid=(bin_max - bin_min) / 2 + bin_min;    }    bin_max=bin_mid;    int start=Math.max(1,loc - bin_mid + 1);    int finish=Math.min(loc + bin_mid,text.length()) + pattern.length();    int[] rd=new int[finish + 2];    rd[finish + 1]=(1 << d) - 1;    for (int j=finish; j >= start; j--) {      int charMatch;      if (text.length() <= j - 1 || !s.containsKey(text.charAt(j - 1))) {        charMatch=0;      } else {        charMatch=s.get(text.charAt(j - 1));      }      if (d == 0) {        rd[j]=((rd[j + 1] << 1) | 1) & charMatch;      } else {        rd[j]=(((rd[j + 1] << 1) | 1) & charMatch) | (((last_rd[j + 1] | last_rd[j]) << 1) | 1) | last_rd[j + 1];      }      if ((rd[j] & matchmask) != 0) {        double score=match_bitapScore(d,j - 1,loc,pattern);        if (score <= score_threshold) {          score_threshold=score;          best_loc=j - 1;          if (best_loc > loc) {            start=Math.max(1,2 * loc - best_loc);          } else {            break;          }        }      }    }    if (match_bitapScore(d + 1,loc,loc,pattern) > score_threshold) {      break;    }    last_rd=rd;  }  return best_loc;}  }
class C{  private void loop(final ServerSocket server) throws IOException {  try {    this.back.accept(server.accept());  } catch (  final SocketTimeoutException ex) {    assert ex != null;  }}  }
class C{  static void die(String mesg){  throw new RuntimeException(mesg);}  }
class C{  @Override protected <T extends DataObject>GarbageCollectionRunnable genGCTask(Class<T> clazz){  return new LocalGCRunnable(dbClient,clazz,dependencyTracker,gcDelayMins,coordinator);}  }
class C{  public void init(Object context) throws ServiceException {  servletEndpointContext=(ServletEndpointContext)context;  AccessStructure.ensureExistence();  JPLAG_CENTRAL=JPlagCentral.getInstance();  JPLAG_CENTRAL.start();}  }
class C{  public boolean isMale(){  return MALE.equals(gender);}  }
class C{  public static boolean addToFirewall(){  if (!OSUtils.isWindows())   return false;  String path=SystemUtils.getRunningPath();  if (path == null)   return false;  if (!path.equalsIgnoreCase(GUIConstants.FROSTWIRE_EXE_FILE.getAbsolutePath()))   return false;  if (SystemUtils.isProgramListedOnFirewall(path))   return true;  if (SystemUtils.addProgramToFirewall(path,name)) {    scheduleRemovalOnShutdown();    return true;  }  return false;}  }
class C{  public boolean isAnyOutputSpent(){  maybeParse();  for (  TransactionOutput output : outputs) {    if (!output.isAvailableForSpending())     return true;  }  return false;}  }
class C{  public MatchQueryBuilder(Analyzer analyzer,@Nullable MappedFieldType mapper){  super(analyzer);  this.mapper=mapper;}  }
class C{  public static void initManager(Context context){  if (mInstance == null) {    mInstance=new AssetsDatabaseManager(context);  }}  }
class C{  public static Tag parseArray(String mojangson) throws MojangsonParseException {  final int parseArrayStart=0;  final int parseArrayElement=1;  int context=parseArrayStart;  String tmpval="";  int scope=0;  boolean inString=false;  TagType tagType=null;  List<Tag> values=new ArrayList<>();  for (int index=0; index < mojangson.length(); index++) {    Character character=mojangson.charAt(index);    if (character == STRING_QUOTES.getSymbol()) {      inString=!inString;    }    if (character == WHITE_SPACE.getSymbol()) {      if (!inString)       continue;    }    if ((character == COMPOUND_START.getSymbol() || character == ARRAY_START.getSymbol()) && !inString) {      scope++;    }    if ((character == COMPOUND_END.getSymbol() || character == ARRAY_END.getSymbol()) && !inString) {      scope--;    }    if (context == parseArrayStart) {      if (character != ARRAY_START.getSymbol()) {        throw new MojangsonParseException("Index: " + index + ", symbol: \'"+ character+ "\'",MojangsonParseException.ParseExceptionReason.UNEXPECTED_SYMBOL);      }      context++;      continue;    }    if (context == parseArrayElement) {      if ((character == ELEMENT_SEPERATOR.getSymbol() || character == ARRAY_END.getSymbol()) && scope <= 1 && !inString) {        if (tmpval.length() == 0) {          continue;        }        Tag val=parseTag(tmpval);        if (tagType == null) {          tagType=val.getType();        } else         if (tagType != val.getType()) {          throw new MojangsonParseException("Index: " + index + ", value: \'"+ tmpval+ "\'",MojangsonParseException.ParseExceptionReason.INCOMPATIBLE_TYPE);        }        values.add(val);        tmpval="";        continue;      }      tmpval+=character;    }  }  if (tagType == TagType.BYTE) {    byte[] bytes=new byte[values.size()];    for (int i=0; i < values.size(); i++) {      bytes[i]=(byte)values.get(i).getValue();    }    return new ByteArrayTag(bytes);  } else   if (tagType == TagType.INT) {    int[] ints=new int[values.size()];    for (int i=0; i < values.size(); i++) {      ints[i]=(int)values.get(i).getValue();    }    return new IntArrayTag(ints);  } else {    return new ListTag<>(tagType,values);  }}  }
class C{  public void reinitDeterministicId(){  deterministicId=null;}  }
class C{  public static NbtInputStream fromCompressed(File in,NbtLimiter limiter) throws IOException {  return fromCompressed(new FileInputStream(in),limiter);}  }
class C{  public void fatal(Object message){}  }
class C{  public void writeln(int c) throws IOException {  super.write(c);  newLine();}  }
class C{  public void close(){  try {    stream.close();  } catch (  IOException e) {    throw new FormUploadException("Error while closing the stream",e);  }}  }
class C{  public FunctionScoreQueryBuilder scoreMode(String scoreMode){  this.scoreMode=scoreMode;  return this;}  }
class C{  public static Map<String,AttributeValue> cloneItem(Map<String,AttributeValue> item){  if (item == null) {    return null;  }  Map<String,AttributeValue> clonedItem=Maps.newHashMap();  IdentityHashMap<AttributeValue,AttributeValue> sourceDestinationMap=new IdentityHashMap<>();  for (  Entry<String,AttributeValue> entry : item.entrySet()) {    if (!sourceDestinationMap.containsKey(entry.getValue())) {      sourceDestinationMap.put(entry.getValue(),clone(entry.getValue(),sourceDestinationMap));    }    clonedItem.put(entry.getKey(),sourceDestinationMap.get(entry.getValue()));  }  return clonedItem;}  }
class C{  private boolean verifyManifestHash(Manifest sf,ManifestDigester md,List<Object> manifestDigests) throws IOException {  Attributes mattr=sf.getMainAttributes();  boolean manifestSigned=false;  for (  Map.Entry<Object,Object> se : mattr.entrySet()) {    String key=se.getKey().toString();    if (key.toUpperCase(Locale.ENGLISH).endsWith("-DIGEST-MANIFEST")) {      String algorithm=key.substring(0,key.length() - 16);      manifestDigests.add(key);      manifestDigests.add(se.getValue());      MessageDigest digest=getDigest(algorithm);      if (digest != null) {        byte[] computedHash=md.manifestDigest(digest);        byte[] expectedHash=Base64.getMimeDecoder().decode((String)se.getValue());        if (debug != null) {          debug.println("Signature File: Manifest digest " + digest.getAlgorithm());          debug.println("  sigfile  " + toHex(expectedHash));          debug.println("  computed " + toHex(computedHash));          debug.println();        }        if (MessageDigest.isEqual(computedHash,expectedHash)) {          manifestSigned=true;        } else {        }      }    }  }  return manifestSigned;}  }
class C{  public int predictTravelTime(int direction,double distance){  byte directionBucket=getDirectionBucket(direction);  double prediction=models[directionBucket].predict(distance);  if (Double.isNaN(prediction)) {    return -1;  } else {    return (int)prediction;  }}  }
class C{  private static void validateReadonly(ConfigurationSetting dbConfigurationSetting,VOConfigurationSetting voConfigurationSetting) throws ValidationException {  boolean isReadonly=dbConfigurationSetting.getInformationId().isReadonly();  if (isReadonly) {    String domObjValue=dbConfigurationSetting.getValue();    if (domObjValue == null)     domObjValue="";    String voValue=voConfigurationSetting.getValue();    if (voValue == null)     voValue="";    if (!voValue.equals(domObjValue)) {      ValidationException vf=new ValidationException(ReasonEnum.READONLY,voConfigurationSetting.getInformationId().name(),new Object[]{voConfigurationSetting.getInformationId().name(),voConfigurationSetting.getValue()});      logger.logWarn(Log4jLogger.SYSTEM_LOG,vf,LogMessageIdentifier.WARN_VALIDATION_FAILED);      throw vf;    }  }}  }
class C{  public void upFocusCycle(Component aComponent){  if (aComponent != null) {    aComponent.transferFocusUpCycle();  }}  }
class C{  public int size(){  return names.size();}  }
class C{  public boolean reset(){  return m_handler.reset();}  }
class C{  public DragKeyPairEntry(String name,PrivateKey privateKey,Password password,Certificate[] certificateChain) throws CryptoException {  super(name);  try {    KeyStore p12=KeyStoreUtil.create(KeyStoreType.PKCS12);    p12.setKeyEntry(name,privateKey,new char[]{},certificateChain);    ByteArrayOutputStream baos=null;    try {      baos=new ByteArrayOutputStream();      p12.store(baos,password.toCharArray());      contentBytes=baos.toByteArray();    }  finally {      IOUtils.closeQuietly(baos);    }    StringBuffer sbContent=new StringBuffer();    String pkcs8=Pkcs8Util.getEncryptedPem(privateKey,Pkcs8PbeType.SHA1_128BIT_RC4,password);    String pkcs7=X509CertUtil.getCertsEncodedPkcs7Pem(X509CertUtil.convertCertificates(certificateChain));    sbContent.append(res.getString("DragKeyPairEntry.StringFlavor.PrivateKeyPart.text"));    sbContent.append("\n\n");    sbContent.append(pkcs8);    sbContent.append('\n');    sbContent.append(res.getString("DragKeyPairEntry.StringFlavor.CertificateChainPart.text"));    sbContent.append("\n\n");    sbContent.append(pkcs7);    contentStr=sbContent.toString();    image=new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("DragKeyPairEntry.Drag.image"))));  } catch (  IOException ex) {    throw new CryptoException(res.getString("NoGetKeyPairEntryContent.exception.message"),ex);  }catch (  GeneralSecurityException ex) {    throw new CryptoException(res.getString("NoGetKeyPairEntryContent.exception.message"),ex);  }}  }
class C{  public ChainingXmlWriter xmlVersion(String xmlVersion){  outputProperties.setXmlVersion(xmlVersion);  return this;}  }
class C{  public void wiggleSort(int[] nums){  for (int i=0; i < nums.length; i++) {    if ((i & 1) > 0) {      if (nums[i - 1] > nums[i]) {        swap(nums,i);      }    } else     if (i != 0 && nums[i - 1] < nums[i]) {      swap(nums,i);    }  }}  }
class C{  public static String[] listDescendantFilenames(File file,FileFilter filter){  if (file == null) {    String msg=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return listDescendantFilenames(file,filter,true);}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedConcurrentMap(boolean reversed,Comparator<V> comparator){  return new ByValueSortingConcurrentSkipListMap<>(ByValueComparator.<K,V>create(reversed,comparator));}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  public static boolean isContainsFolderPath(final String filePath,final String folderPath){  if (filePath != null && folderPath != null) {    if (folderPath.charAt(folderPath.length() - 1) == '/') {      filePath.startsWith(folderPath);    } else {      return filePath.startsWith(folderPath + "/");    }  }  return false;}  }
class C{  @Override public void remove(byte[] tableKey,byte[] rowKey,long version,Result<Boolean> result){  _tableManager.getKelpBacking().remove(tableKey,rowKey,version,result);}  }
class C{  public void addProperty(String type,String name,String key,String value) throws Exception {  validateComponentType(type);  conf.setString("replicator." + type + "."+ name+ "."+ key,value);}  }
class C{  public boolean isConnectedToWifi(){  return mCurrentNetworkInterface == getWifiNetworkInterface();}  }
class C{  private void rehash(){  int oldCapacity=table.length;  Entry oldMap[]=table;  int newCapacity=(oldCapacity << 1) + 1;  Entry newMap[]=new Entry[newCapacity];  modCount++;  threshold=(int)(newCapacity * loadFactor);  table=newMap;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry old=oldMap[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=(e.key & 0x7FFFFFFF) % newCapacity;      e.next=newMap[index];      newMap[index]=e;    }  }}  }
class C{  public void initWithContext(URI uri){  this.setHostURL(uri);}  }
class C{  @Override public void run(Updatable<Void> imageExposureUpdatable,ImageSaver imageSaver) throws InterruptedException, CameraAccessException, CameraCaptureSessionClosedException, ResourceAcquisitionFailedException {  try (FrameServer.Session session=mFrameServer.createExclusiveSession();ImageStream imageStream=mImageReader.createStream(1)){    UpdatableCountDownLatch<Void> exposureLatch=new UpdatableCountDownLatch<>(1);    RequestBuilder photoRequest=mBuilderFactory.create(CameraDevice.TEMPLATE_STILL_CAPTURE);    photoRequest.addStream(imageStream);    MetadataFuture metadataFuture=new MetadataFuture();    photoRequest.addResponseListener(metadataFuture);    photoRequest.addResponseListener(forFrameExposure(imageExposureUpdatable));    photoRequest.addResponseListener(forFrameExposure(exposureLatch));    session.submitRequest(Arrays.asList(photoRequest.build()),FrameServer.RequestType.NON_REPEATING);    exposureLatch.await();    session.close();    ImageProxy image=imageStream.getNext();    imageSaver.addFullSizeImage(image,metadataFuture.getMetadata());  } catch (  BufferQueue.BufferQueueClosedException e) {  } finally {    imageSaver.close();  }}  }
class C{  @Activate protected void activate(Map<String,Object> properties){}  }
class C{  public Object copy(){  Instance result=new Instance(this);  result.m_Dataset=m_Dataset;  return result;}  }
class C{  public boolean applyOptions() throws IOException {  if (!isDirty())   return false;  StatusBarSettings.FIREWALL_DISPLAY_ENABLED.setValue(CHECK_BOX.isSelected());  GUIMediator.instance().getStatusLine().refresh();  return false;}  }
class C{  public Builder(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:49.329 -0500",hash_original_method="8E0B311EF662738B18859A93F77EBD0A",hash_generated_method="7F3ABD94AC5707F2B693CA2A6A0497E8") protected Drawable loadDefaultIcon(PackageManager pm){  return pm.getDefaultActivityIcon();}  }
class C{  public CostEstimate union(CostEstimate other){  return new CostEstimate(rowCount + other.rowCount,cost + other.cost);}  }
class C{  public void updateEntry(ContactsExampleParameters parameters) throws IOException, ServiceException {  if (parameters.isGroupFeed()) {    ContactGroupEntry group=buildGroup(parameters);    ContactGroupEntry canonicalGroup=getGroupInternal(parameters.getId());    canonicalGroup.setTitle(group.getTitle());    canonicalGroup.setContent(group.getContent());    List<ExtendedProperty> extendedProperties=canonicalGroup.getExtendedProperties();    extendedProperties.clear();    if (group.hasExtendedProperties()) {      extendedProperties.addAll(group.getExtendedProperties());    }    printGroup(canonicalGroup.update());  } else {    ContactEntry contact=buildContact(parameters);    ContactEntry canonicalContact=getContactInternal(parameters.getId());    ElementHelper.updateContact(canonicalContact,contact);    printContact(canonicalContact.update());  }}  }
class C{  public void testloadAuthenticationInformation_and_setSystemProperties() throws ConfigurationException {  resetSecuritySystemProperties();  AuthenticationInfo authInfo=SecurityHelper.loadAuthenticationInformation("sample.security.properties");  assertNotNull(authInfo);  String systemProperty=null;  systemProperty=System.getProperty("javax.net.ssl.keyStore",null);  assertNotNull(systemProperty);  systemProperty=System.getProperty("javax.net.ssl.keyStorePassword",null);  assertNotNull(systemProperty);  systemProperty=System.getProperty("javax.net.ssl.trustStore",null);  assertNotNull(systemProperty);  systemProperty=System.getProperty("javax.net.ssl.trustStorePassword",null);  assertNotNull(systemProperty);}  }
class C{  public int length(){  return length;}  }
class C{  public TMember possibleOverrideCandidateOrError(TMember member){  TMember result=null;  for (  TMember m : Iterables.concat(implemented(),inherited())) {    if (!TypeUtils.isAccessorPair(member,m)) {      if (m.getMemberAccessModifier() == MemberAccessModifier.PRIVATE) {        result=m;      } else {        return m;      }    }  }  return result;}  }
class C{  public NumberRangeModel(float lo,float hi,float min,float max){  this(new Float(lo),new Float(hi),new Float(min),new Float(max));}  }
class C{  public ApplicationSecurityEnforcer(Class appMainClass,String securityPolicy){  this.appMainClass=appMainClass;  this.securityPolicy=securityPolicy;  this.appMainClassRelativeURL=appMainClass.getName().replace('.','/') + ".class";}  }
class C{  public EmptyStackException(){}  }
class C{  @Override protected void addMetadataKeys(final Context context) throws IOException {  try {    if (childDao != null && childDao.isInitialized()) {      if (runTime != null) {        final RyaStatement ryaStatement=AccumuloRyaUtils.createCopyToolRunTimeRyaStatement(runTime);        copyStatement(ryaStatement,context);      }      if (startTime != null) {        final RyaStatement ryaStatement=AccumuloRyaUtils.createCopyToolSplitTimeRyaStatement(startTime);        copyStatement(ryaStatement,context);      }      if (timeOffset != null) {        final RyaStatement ryaStatement=AccumuloRyaUtils.createTimeOffsetRyaStatement(timeOffset);        copyStatement(ryaStatement,context);      }    }  } catch (  RyaDAOException|IOException|InterruptedException e) {    throw new IOException("Failed to write metadata key",e);  }}  }
class C{  void invalidate(){  if (mAudioWaveformFilename != null) {    new File(mAudioWaveformFilename).delete();    mAudioWaveformFilename=null;  }}  }
class C{  @Override protected boolean beforeDelete(){  if (isPosted()) {    MPeriod.testPeriodOpen(getCtx(),getDateTrx(),MDocType.DOCBASETYPE_MatchPO,getAD_Org_ID());    setPosted(false);    MFactAcct.deleteEx(Table_ID,get_ID(),get_TrxName());  }  return true;}  }
class C{  public void tag(int tagType,boolean longTag,byte[] contents) throws IOException {  if (tags != null) {    tags.tag(tagType,longTag,contents);  }}  }
class C{  private void ItoOSP(int i,byte[] sp){  sp[0]=(byte)(i >>> 24);  sp[1]=(byte)(i >>> 16);  sp[2]=(byte)(i >>> 8);  sp[3]=(byte)(i >>> 0);}  }
class C{  public void shutDown(){  shutDown=true;  try {    socket.close();  } catch (  IOException e) {  }}  }
class C{  private IgniteCache cacheForIndex(int idx){  return grid(idx).cache(CACHE_NAME);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static byte[] externalize(Name name){  return externalize(name.getByteArray(),name.getByteOffset(),name.getByteLength());}  }
class C{  private static void expandFieldArray(Object instance,String fieldName,Object[] extraElements) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  System.arraycopy(extraElements,0,combined,0,extraElements.length);  System.arraycopy(original,0,combined,extraElements.length,original.length);  jlrField.set(instance,combined);}  }
class C{  public static synchronized Object register(String name,Object image){  if (!WWUtil.isEmpty(name) && image != null) {    if (image instanceof BufferedImage)     instance.imageMap.put(name,(BufferedImage)image); else     if (image instanceof ImageIcon)     instance.iconMap.put(name,(ImageIcon)image);  }  return image;}  }
class C{  public LinearProbingHashST(){  this(INIT_CAPACITY);}  }
class C{  public AppProcessInfo(){  super();}  }
class C{  public static int uniqueCount(Iterator tuples,String field){  HashSet set=new HashSet();  while (tuples.hasNext())   set.add(((Tuple)tuples.next()).get(field));  return set.size();}  }
class C{  static void verifyClientUpdateNotProhibited(Update command,DomainBase existingResource) throws ResourceHasClientUpdateProhibitedException {  if (existingResource.getStatusValues().contains(StatusValue.CLIENT_UPDATE_PROHIBITED) && !command.getInnerRemove().getStatusValues().contains(StatusValue.CLIENT_UPDATE_PROHIBITED)) {    throw new ResourceHasClientUpdateProhibitedException();  }}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  WhiteboxRaster output;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  final double LnOf2=0.693147180559945;  int row, col, x, y;  float progress=0;  double slope;  double z;  int i, c;  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  double outletID=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  streamsHeader=args[0];  pointerHeader=args[1];  outputHeader=args[2];  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    double noData=pntr.getNoDataValue();    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(noData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    byte numNeighbouringStreamCells=0;    double currentID=0;    double currentValue=0;    double streamsID=0;    updateProgress("Loop 1 of 4:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentID++;            output.setValue(y,x,currentID);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > 0) {                    flag=false;                    break;                  }                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells >= 2) {                    currentID++;                  }                  output.setValue(y,x,currentID);                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,currentID);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 4:",(int)progress);    }    updateProgress("Loop 2 of 4:",0);    byte numStreamNeighbours=0;    double startingStreamHeadID=currentID + 1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numStreamNeighbours=0;          for (c=0; c < 8; c++) {            if (streams.getValue(row + dY[c],col + dX[c]) > 0 && pntr.getValue(row + dY[c],col + dX[c]) == inflowingVals[c]) {              numStreamNeighbours++;            }          }          if (numStreamNeighbours == 0) {            currentID++;            output.setValue(row,col,currentID);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 4:",(int)progress);    }    int d;    boolean state=false;    int currentMaxID=(int)currentID;    double[][] sideVals=new double[4][currentMaxID + 1];    for (i=1; i <= currentMaxID; i++) {      sideVals[0][i]=i;      currentID++;      sideVals[1][i]=currentID;    }    for (i=1; i <= currentMaxID; i++) {      currentID++;      sideVals[2][i]=currentID;    }    for (i=1; i <= currentMaxID; i++) {      currentID++;      sideVals[3][i]=currentID;    }    updateProgress("Loop 3 of 4:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          currentID=output.getValue(row,col);          flowDir=pntr.getValue(row,col);          if (flowDir > 0) {            c=(int)(Math.log(flowDir) / LnOf2);            flag=false;            d=c;            state=false;            do {              d++;              if (d > 7) {                d=0;              }              if (d < 0) {                d=7;              }              x=col + dX[d];              y=row + dY[d];              z=streams.getValue(y,x);              if (z <= 0 && z != noData) {                state=true;                if (pntr.getValue(y,x) == inflowingVals[d]) {                  output.setValue(y,x,sideVals[0][(int)currentID]);                }              } else {                if (state) {                  flag=true;                }              }            } while (!flag);            flag=false;            d=c;            state=false;            int k=0;            double val=sideVals[1][(int)currentID];            int j=1;            do {              d--;              if (d > 7) {                d=0;              }              if (d < 0) {                d=7;              }              x=col + dX[d];              y=row + dY[d];              z=streams.getValue(y,x);              if (z <= 0 && z != noData) {                if (!state) {                  val=sideVals[j][(int)currentID];                  j++;                  state=true;                }                if (pntr.getValue(y,x) == inflowingVals[d] && output.getValue(y,x) <= 0) {                  output.setValue(y,x,val);                }              }              k++;              if (k == 7) {                flag=true;              }            } while (!flag);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 3 of 4:",(int)progress);    }    updateProgress("Loop 4 of 4:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == noData && pntr.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                streamsID=z;                flag=true;              }            } else {              streamsID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,streamsID);          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,streamsID);          } while (!flag);        } else         if (pntr.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 4 of 4:",(int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          output.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testPessimisticMixed() throws Exception {  testTransactionMixed(cache,PESSIMISTIC,KEY_1,wrap(1),KEY_2,1);}  }
class C{  private N createRoot(N root,List<E> objects){  for (  E entry : objects) {    if (entry.isLeafEntry()) {      root.addLeafEntry(entry);    } else {      root.addDirectoryEntry(entry);    }  }  ((SpatialDirectoryEntry)getRootEntry()).setMBR(root.computeMBR());  writeNode(root);  if (getLogger().isDebuggingFiner()) {    StringBuilder msg=new StringBuilder();    msg.append("pageNo ").append(root.getPageID());    getLogger().debugFiner(msg.toString());  }  return root;}  }
class C{  @VisibleForTesting protected static DataCiteMetadata.Contributors.Contributor.NameIdentifier convertEmlUserIdIntoContributorNameIdentifier(UserId userId){  if (!Strings.isNullOrEmpty(userId.getIdentifier()) && !Strings.isNullOrEmpty(userId.getDirectory())) {    String directory=Strings.nullToEmpty(userId.getDirectory()).toLowerCase();    if (directory.contains(ORCID_NAME_IDENTIFIER_SCHEME.toLowerCase()) || directory.contains(RESEARCHERID_NAME_IDENTIFIER_SCHEME.toLowerCase())) {      DataCiteMetadata.Contributors.Contributor.NameIdentifier nid=FACTORY.createDataCiteMetadataContributorsContributorNameIdentifier();      nid.setValue(userId.getIdentifier());      nid.setSchemeURI(userId.getDirectory());      nid.setNameIdentifierScheme((directory.contains(ORCID_NAME_IDENTIFIER_SCHEME.toLowerCase())) ? ORCID_NAME_IDENTIFIER_SCHEME : RESEARCHERID_NAME_IDENTIFIER_SCHEME);      return nid;    } else {      LOG.debug("UserId has unrecognized directory (" + directory + "), only ORCID and ResearcherID are supported");      return null;    }  }  return null;}  }
class C{  @Deprecated public static Collection<String> id8s(@Nullable Collection<UUID> ids){  if (ids == null || ids.isEmpty())   return Collections.emptyList();  return F.viewReadOnly(ids,ID2ID8);}  }
class C{  public Setting(String key,String value){  this.key=key;  this.value=value;}  }
class C{  public boolean hasReturn4w(){  return getReturn4w() != null;}  }
class C{  boolean shouldReadResources(IN4JSSourceContainer container){  return (processTestCode || !container.isTest());}  }
class C{  public BoundingPolygon(final Network network,double stepSize){  this.network=network;  this.stepSize=stepSize;  this.createPolygon();}  }
class C{  private static void implSquareToLenChecks(int[] x,int len,int[] z,int zlen) throws RuntimeException {  if (len < 1) {    throw new IllegalArgumentException("invalid input length: " + len);  }  if (len > x.length) {    throw new IllegalArgumentException("input length out of bound: " + len + " > "+ x.length);  }  if (len * 2 > z.length) {    throw new IllegalArgumentException("input length out of bound: " + (len * 2) + " > "+ z.length);  }  if (zlen < 1) {    throw new IllegalArgumentException("invalid input length: " + zlen);  }  if (zlen > z.length) {    throw new IllegalArgumentException("input length out of bound: " + len + " > "+ z.length);  }}  }
class C{  public DefaultHttpRequest(){  this(new DefaultHttpHeaders());}  }
class C{  public static boolean applyTo(ImageHolder imageHolder,ImageView imageView){  return applyTo(imageHolder,imageView,null);}  }
class C{  protected void init() throws InvalidJobException {  if (Debug.verboseOn())   Debug.logVerbose("Async-Service initializing.",module);}  }
class C{  public boolean isUsingInOutNotation(){  return usingInOutNotation;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  protected void updateDegrees(int e,int s,int t,int incr){  int od=m_links.getInt(s,OUTDEGREE);  int id=m_links.getInt(t,INDEGREE);  if (incr > 0) {    addLink(OUTLINKS,od,s,e);    addLink(INLINKS,id,t,e);  } else   if (incr < 0) {    remLink(OUTLINKS,od,s,e);    remLink(INLINKS,id,t,e);  }  m_links.setInt(s,OUTDEGREE,od + incr);  m_links.setInt(t,INDEGREE,id + incr);  m_spanning=null;}  }
class C{  public InvalidObjectIdException(Throwable causeThrowable){  super(causeThrowable);}  }
class C{  public ShellFolder createShellFolder(File file) throws FileNotFoundException {  return new DefaultShellFolder(null,file);}  }
class C{  protected String buildGraphVizInput(){  StringBuilder fsbResult=new StringBuilder();  fsbResult.append("digraph cup2Automaton {");  fsbResult.append("node [shape=doublecircle]; ");  fsbResult.append(this.fsbAcceptingStates.toString());  fsbResult.append("node [shape=circle]; ");  fsbResult.append(this.fsbNormalStates.toString());  fsbResult.append(this.fsbStartEdges.toString());  fsbResult.append(this.fsbEdges.toString());  fsbResult.append("}");  return fsbResult.toString();}  }
class C{  public static void combineIdenticalTransitRoutes(TransitSchedule schedule){  log.info("Combining TransitRoutes with identical stop sequence...");  int combined=0;  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    Map<List<String>,List<TransitRoute>> profiles=new HashMap<>();    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      List<String> stopFacilitySequence=new LinkedList<>();      for (      TransitRouteStop routeStop : transitRoute.getStops()) {        stopFacilitySequence.add(routeStop.getStopFacility().getId().toString());      }      MapUtils.getList(stopFacilitySequence,profiles).add(transitRoute);    }    for (    List<TransitRoute> routeList : profiles.values()) {      if (routeList.size() > 1) {        TransitRoute finalRoute=routeList.get(0);        for (int i=1; i < routeList.size(); i++) {          combined++;          transitLine.removeRoute(routeList.get(i));          for (          Departure departure : routeList.get(i).getDepartures().values()) {            finalRoute.addDeparture(departure);          }        }      }    }  }  log.info("... Combined " + combined + " transit routes");}  }
class C{  private RefactoringStatus qualifyThisExpression(ThisExpression expr,MethodInvocation originalInvocation,IMember enclosing,CompilationUnitRewrite unitRewriter){  RefactoringStatus status=new RefactoringStatus();  IMethodBinding methodBinding=originalInvocation.resolveMethodBinding();  MethodDeclaration methodDeclaration=(MethodDeclaration)ASTNodes.findDeclaration(methodBinding,originalInvocation.getRoot());  ITypeBinding currentTypeBinding=null;  if (methodDeclaration != null) {    if (ASTNodes.isParent(originalInvocation,methodDeclaration.getParent()))     currentTypeBinding=methodBinding.getDeclaringClass(); else     currentTypeBinding=ASTNodes.getEnclosingType(originalInvocation);  } else {    ASTNode currentTypeDeclaration=getEnclosingTypeDeclaration(originalInvocation);    currentTypeBinding=ASTNodes.getEnclosingType(currentTypeDeclaration);    while (currentTypeDeclaration != null && (Bindings.findMethodInHierarchy(currentTypeBinding,methodBinding.getName(),methodBinding.getParameterTypes()) == null)) {      currentTypeDeclaration=getEnclosingTypeDeclaration(currentTypeDeclaration.getParent());      currentTypeBinding=ASTNodes.getEnclosingType(currentTypeDeclaration);    }  }  if (currentTypeBinding == null) {    status.merge(createWarningAboutCall(enclosing,originalInvocation,RefactoringCoreMessages.IntroduceIndirectionRefactoring_call_warning_declaring_type_not_found));    return status;  }  currentTypeBinding=currentTypeBinding.getTypeDeclaration();  ITypeBinding typeOfCall=ASTNodes.getEnclosingType(originalInvocation);  if (!typeOfCall.equals(currentTypeBinding)) {    if (currentTypeBinding.isAnonymous()) {      status.merge(createWarningAboutCall(enclosing,originalInvocation,RefactoringCoreMessages.IntroduceIndirectionRefactoring_call_warning_anonymous_cannot_qualify));    } else {      expr.setQualifier(unitRewriter.getAST().newSimpleName(currentTypeBinding.getName()));    }  } else {  }  return status;}  }
class C{  public T caseTMemberWithAccessModifier(TMemberWithAccessModifier object){  return null;}  }
class C{  public MessageEvent(ByteBuffer data,String origin,String lastEventId,String messageType){  super(Event.MESSAGE);  LOG.entering(CLASS_NAME,"<init>",new Object[]{type,data,origin,lastEventId});  this.data=data;  this.origin=origin;  this.lastEventId=lastEventId;  this.messageType=messageType;}  }
class C{  public static boolean isWhiteSpace(StringBuffer buf){  int n=buf.length();  for (int i=0; i < n; i++) {    if (!isWhiteSpace(buf.charAt(i)))     return false;  }  return true;}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  protected void close(){  inUseMsgIds.clear();  pendingMessages.clear();  pendingFlows.clear();  outboundQoS2.clear();  outboundQoS1.clear();  outboundQoS0.clear();  inboundQoS2.clear();  tokenStore.clear();  inUseMsgIds=null;  pendingMessages=null;  pendingFlows=null;  outboundQoS2=null;  outboundQoS1=null;  outboundQoS0=null;  inboundQoS2=null;  tokenStore=null;  callback=null;  clientComms=null;  persistence=null;  pingCommand=null;}  }
class C{  protected int read(byte[] buffer,int offset,int length) throws IOException {  return mTiffStream.read(buffer,offset,length);}  }
class C{  CreditsDialog(final Frame owner){  super(owner,true);  initGUI(owner);  LOGGER.debug("about dialog initialized");  eventHandling();  LOGGER.debug("about dialog event handling ready");  this.setTitle("Stendhal Credits");  this.pack();  Dimension size=owner.getSize();  size.width-=50;  size.height-=50;  setSize(size);  setLocationRelativeTo(owner);  WindowUtils.closeOnEscape(this);  this.setVisible(true);}  }
class C{  @Override public boolean supportsMinimumSQLGrammar(){  debugCodeCall("supportsMinimumSQLGrammar");  return true;}  }
class C{  public static void stop(){  exec.shutdownNow();  try {    exec.awaitTermination(3,TimeUnit.SECONDS);  } catch (  InterruptedException ignored) {  }  clean();  files.clear();  LOG.info("File cleaner is stopped");}  }
class C{  protected Volume checkStorageVolumeExistsInDB(String nativeGuid,DbClient dbClient) throws IOException {  @SuppressWarnings("deprecation") List<URI> volumeUris=dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeNativeGuidConstraint(nativeGuid));  for (  URI volumeURI : volumeUris) {    Volume volume=dbClient.queryObject(Volume.class,volumeURI);    if (volume != null && !volume.getInactive()) {      return volume;    }  }  return null;}  }
class C{  public LingamRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public static Intent createOldPlayStoreIntent(String packageName){  Intent i=new Intent(Intent.ACTION_VIEW);  i.setData(Uri.parse("market://details?id=" + packageName));  return i;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ANNOTABLE_EXPRESSION__ANNOTATION_LIST:    return getAnnotationList();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){  if (str == null || prefix == null) {    return (str == null && prefix == null);  }  if (prefix.length() > str.length()) {    return false;  }  return str.regionMatches(ignoreCase,0,prefix,0,prefix.length());}  }
class C{  public static void write(Object o){  buffer.append(o);  scheduleBufferPrint();}  }
class C{  public int nextNode(){  if (m_foundLast)   return DTM.NULL;  int next;  m_lastFetched=next=(DTM.NULL == m_lastFetched) ? m_cdtm.getFirstChild(m_context) : m_cdtm.getNextSibling(m_lastFetched);  if (DTM.NULL != next) {    m_pos++;    return next;  } else {    m_foundLast=true;    return DTM.NULL;  }}  }
class C{  public void removeOperatorFromSelection(Operator selectedOperator){  List<Operator> newList=new ArrayList<>(getSelectedOperators());  newList.remove(selectedOperator);  this.selectedOperators=Collections.unmodifiableList(newList);}  }
class C{  public Select<T> exclude(String... columns){  Collections.addAll(mExcludedColumns,columns);  return this;}  }
class C{  public void printExtendedUsage(Flag.Level level){  out(getExtendedUsageString(level));}  }
class C{  public Outfit removeOutfit(final Outfit other){  int newDetail;  int newHair;  int newHead;  int newDress;  int newBody;  if ((detail == null) || detail.equals(other.detail)) {    newDetail=0;  } else {    newDetail=detail;  }  if ((hair == null) || hair.equals(other.hair)) {    newHair=0;  } else {    newHair=hair;  }  if ((head == null) || head.equals(other.head)) {    newHead=0;  } else {    newHead=head;  }  if ((dress == null) || dress.equals(other.dress)) {    newDress=0;  } else {    newDress=dress;  }  if ((body == null) || body.equals(other.body)) {    newBody=0;  } else {    newBody=body;  }  return new Outfit(newDetail,newHair,newHead,newDress,newBody);}  }
class C{  public int deleteByQuery(String indexName,final QueryBuilder q){  Map<String,String> ids=new TreeMap<>();  @SuppressWarnings("deprecation") SearchResponse response=elasticsearchClient.prepareSearch(indexName).setSearchType(SearchType.SCAN).setScroll(new TimeValue(60000)).setQuery(q).setSize(100).execute().actionGet();  while (true) {    for (    SearchHit hit : response.getHits().getHits()) {      ids.put(hit.getId(),hit.getType());    }    response=elasticsearchClient.prepareSearchScroll(response.getScrollId()).setScroll(new TimeValue(600000)).execute().actionGet();    if (response.getHits().getHits().length == 0)     break;  }  return deleteBulk(indexName,ids);}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  public ConditionRHS_ createConditionRHS_(){  ConditionRHS_Impl conditionRHS_=new ConditionRHS_Impl();  return conditionRHS_;}  }
class C{  public Builder parallelCorpus(File parallelCorpus){  this.parallelCorpus=parallelCorpus;  return this;}  }
class C{  public UTF8StreamReader(InputStream inputStream){  _bytes=new byte[2048];  _inputStream=inputStream;}  }
class C{  public boolean isOptOut(){  configuration.load();  return configuration.get(Configuration.CATEGORY_GENERAL,"opt-out",false).getBoolean(false);}  }
class C{  public Analyzer saveAnalysis(File file) throws IOException {  PrintStream ps=null;  try {    ps=new PrintStream(new BufferedOutputStream(new FileOutputStream(file)));    printAnalysis(ps);  }  finally {    if (ps != null) {      ps.close();    }  }  return this;}  }
class C{  public static Session parse(String uri) throws IllegalStateException, IOException {  SessionBuilder builder=SessionBuilder.getInstance().clone();  byte audioApi=0, videoApi=0;  List<NameValuePair> params=URLEncodedUtils.parse(URI.create(uri),"UTF-8");  if (params.size() > 0) {    builder.setAudioEncoder(AUDIO_NONE).setVideoEncoder(VIDEO_NONE);    for (Iterator<NameValuePair> it=params.iterator(); it.hasNext(); ) {      NameValuePair param=it.next();      if (param.getName().equalsIgnoreCase("flash")) {        if (param.getValue().equalsIgnoreCase("on"))         builder.setFlashEnabled(true); else         builder.setFlashEnabled(false);      } else       if (param.getName().equalsIgnoreCase("camera")) {        if (param.getValue().equalsIgnoreCase("back"))         builder.setCamera(CameraInfo.CAMERA_FACING_BACK); else         if (param.getValue().equalsIgnoreCase("front"))         builder.setCamera(CameraInfo.CAMERA_FACING_FRONT);      } else       if (param.getName().equalsIgnoreCase("multicast")) {        if (param.getValue() != null) {          try {            InetAddress addr=InetAddress.getByName(param.getValue());            if (!addr.isMulticastAddress()) {              throw new IllegalStateException("Invalid multicast address !");            }            builder.setDestination(param.getValue());          } catch (          UnknownHostException e) {            throw new IllegalStateException("Invalid multicast address !");          }        } else {          builder.setDestination("228.5.6.7");        }      } else       if (param.getName().equalsIgnoreCase("unicast")) {        if (param.getValue() != null) {          builder.setDestination(param.getValue());        }      } else       if (param.getName().equalsIgnoreCase("videoapi")) {        if (param.getValue() != null) {          if (param.getValue().equalsIgnoreCase("mr")) {            videoApi=MediaStream.MODE_MEDIARECORDER_API;          } else           if (param.getValue().equalsIgnoreCase("mc")) {            videoApi=MediaStream.MODE_MEDIACODEC_API;          }        }      } else       if (param.getName().equalsIgnoreCase("audioapi")) {        if (param.getValue() != null) {          if (param.getValue().equalsIgnoreCase("mr")) {            audioApi=MediaStream.MODE_MEDIARECORDER_API;          } else           if (param.getValue().equalsIgnoreCase("mc")) {            audioApi=MediaStream.MODE_MEDIACODEC_API;          }        }      } else       if (param.getName().equalsIgnoreCase("ttl")) {        if (param.getValue() != null) {          try {            int ttl=Integer.parseInt(param.getValue());            if (ttl < 0)             throw new IllegalStateException();            builder.setTimeToLive(ttl);          } catch (          Exception e) {            throw new IllegalStateException("The TTL must be a positive integer !");          }        }      } else       if (param.getName().equalsIgnoreCase("h264")) {        VideoQuality quality=VideoQuality.parseQuality(param.getValue());        builder.setVideoQuality(quality).setVideoEncoder(VIDEO_H264);      } else       if (param.getName().equalsIgnoreCase("h263")) {        VideoQuality quality=VideoQuality.parseQuality(param.getValue());        builder.setVideoQuality(quality).setVideoEncoder(VIDEO_H263);      } else       if (param.getName().equalsIgnoreCase("amrnb") || param.getName().equalsIgnoreCase("amr")) {        AudioQuality quality=AudioQuality.parseQuality(param.getValue());        builder.setAudioQuality(quality).setAudioEncoder(AUDIO_AMRNB);      } else       if (param.getName().equalsIgnoreCase("aac")) {        AudioQuality quality=AudioQuality.parseQuality(param.getValue());        builder.setAudioQuality(quality).setAudioEncoder(AUDIO_AAC);      }    }  }  if (builder.getVideoEncoder() == VIDEO_NONE && builder.getAudioEncoder() == AUDIO_NONE) {    SessionBuilder b=SessionBuilder.getInstance();    builder.setVideoEncoder(b.getVideoEncoder());    builder.setAudioEncoder(b.getAudioEncoder());  }  Session session=builder.build();  if (videoApi > 0 && session.getVideoTrack() != null) {    session.getVideoTrack().setStreamingMethod(videoApi);  }  if (audioApi > 0 && session.getAudioTrack() != null) {    session.getAudioTrack().setStreamingMethod(audioApi);  }  return session;}  }
class C{  public void testSendMomentaryFunctionGroup5(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.sendMomentaryFunctionGroup5();}  }
class C{  private void extractAllChildren(List<InvocationSequenceData> resultList,InvocationSequenceData invocation){  resultList.add(invocation);  for (  InvocationSequenceData child : invocation.getNestedSequences()) {    extractAllChildren(resultList,child);  }}  }
class C{  public static void assertExceptions(final Exception occurred,final Class<?> expectedClass,final String... expectedMessageParts){  assertEquals(occurred.getClass(),expectedClass);  final String actualMessage=occurred.getMessage();  final List<String> parts=Arrays.asList(expectedMessageParts);  for (  final String currentPart : parts)   assertTrue(String.format("Actual exception's message [%s] does not contain [%s] text.",actualMessage,currentPart),actualMessage.contains(currentPart));}  }
class C{  @SuppressWarnings("unchecked") private void prepareProcess(HadoopPrepareForJobRequest req){  if (initGuard.compareAndSet(false,true)) {    try {      if (log.isDebugEnabled())       log.debug("Initializing external hadoop task: " + req);      assert job == null;      Class jobCls;      try {        jobCls=Class.forName(HadoopCommonUtils.JOB_CLS_NAME);      } catch (      ClassNotFoundException e) {        throw new IgniteException("Failed to load job class: " + HadoopCommonUtils.JOB_CLS_NAME,e);      }      job=req.jobInfo().createJob(jobCls,req.jobId(),log,null,new HadoopHelperImpl());      job.initialize(true,nodeDesc.processId());      shuffleJob=new HadoopShuffleJob<>(comm.localProcessDescriptor(),log,job,mem,req.totalReducerCount(),req.localReducers());      initializeExecutors(req);      if (log.isDebugEnabled())       log.debug("External process initialized [initWaitTime=" + (U.currentTimeMillis() - startTime) + ']');      initFut.onDone();    } catch (    IgniteCheckedException e) {      U.error(log,"Failed to initialize process: " + req,e);      initFut.onDone(e);    }  } else   log.warning("Duplicate initialize process request received (will ignore): " + req);}  }
class C{  public HashMapImpl(){  this(16);}  }
class C{  public void validate(Object obj){  Class clazz=obj.getClass();  Validator validator=_inputTypeMap.get(clazz);  if (validator == null) {    validator=new Validator(clazz);    _inputTypeMap.putIfAbsent(clazz,validator);  }  validator.validate(obj);}  }
class C{  private void splitParagraphs(LayoutContext c,Node parent,Paragraph nearestBlock){  Node node=parent.getFirstChild();  if (node == null) {    return;  }  do {    if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) {      String text=((Text)node).getData();      nearestBlock.add(text,(Text)node);      paragraphs.put((Text)node,nearestBlock);    } else     if (node.getNodeType() == Node.ELEMENT_NODE) {      Element element=(Element)node;      CalculatedStyle style=c.getSharedContext().getStyle(element);      if (element.getNodeName().equals("head")) {        continue;      }      if (style.isSpecifiedAsBlock() || element.hasAttribute("dir") || element.getNodeName().equals("bdi")) {        Paragraph para=new Paragraph(style.getDirection());        blocks.put(element,para);        splitParagraphs(c,element,para);      } else {        blocks.put(element,nearestBlock);        splitParagraphs(c,element,nearestBlock);      }    }  } while ((node=node.getNextSibling()) != null);}  }
class C{  private void createToolsMenu(Column column){  JComponent label=createMenuTitle("Tools");  column.addComponent(label);  JMenuItem item=createMenuItem("Take Screenshot","takescreenshot");  column.addComponent(item);  item=createMenuItem("Settings","settings");  column.addComponent(item);}  }
class C{  public void removePanListener(PanListener listener){  mTouchHandler.removePanListener(listener);}  }
class C{  protected void checkClientInfoSupport() throws SQLException {  if (!getFbDatabase().getServerVersion().isEqualOrAbove(2,0)) {    throw new FBDriverNotCapableException("Required functionality (RDB$SET_CONTEXT()) only available in Firebird 2.0 or higher");  }}  }
class C{  @Override public void circuitBreak(String fieldName,long bytesNeeded){  this.trippedCount.incrementAndGet();  final String message="[" + this.name + "] Data too large, data for ["+ fieldName+ "] would be larger than limit of ["+ memoryBytesLimit+ "/"+ new ByteSizeValue(memoryBytesLimit)+ "]";  logger.debug(message);  throw new CircuitBreakingException(message,bytesNeeded,this.memoryBytesLimit);}  }
class C{  public boolean isACP(){  return this.ACP;}  }
class C{  public void done(){  m_TrainingData=null;  if (m_NumIterationsPerformed > 0) {    m_ZeroR=null;  }}  }
class C{  protected void addOrderIdTag(URI taskId){  Order order=ExecutionUtils.currentContext().getOrder();  if (order != null) {    if (order.getId() != null) {      MachineTagUtils.setTaskOrderIdTag(getClient(),taskId,order.getId().toString());    }    MachineTagUtils.setTaskOrderNumberTag(getClient(),taskId,order.getOrderNumber());  }}  }
class C{  public static IOException create(IOException exn){  if (exn.getClass().equals(IOException.class) || exn.getClass().equals(java.net.SocketException.class) || exn.getClass().getName().equals("javax.net.ssl.SSLException"))   return new SocketTimeoutException(exn); else   return exn;}  }
class C{  @Override public boolean canBeLongAddress(int address){  if (address > 0) {    return true;  }  return false;}  }
class C{  @Override public int hashCode(){  return Float.floatToIntBits(value);}  }
class C{  @Override public Document build(InputStream stream) throws ParsingException, ValidityException, IOException {  return build(new InputSource(stream));}  }
class C{  @SuppressWarnings("unchecked") public void testPOJOString() throws Exception {  ObjectMapper mapper=new ObjectMapper();  ObjectNode n=mapper.getNodeFactory().objectNode();  n.put("pojo",mapper.getNodeFactory().POJONode("abc"));  StringWriter sw=new StringWriter();  JsonGenerator jg=mapper.getJsonFactory().createJsonGenerator(sw);  mapper.writeTree(jg,n);  Map<String,Object> result=(Map<String,Object>)mapper.readValue(sw.toString(),Map.class);  assertEquals(1,result.size());  assertEquals("abc",result.get("pojo"));}  }
class C{  public static RegExpExpression notRegexp(Expression left,Expression right,String escape){  return new RegExpExpression(left,right,new ConstantExpression(escape),true);}  }
class C{  public void testGetF21(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF21();  assertEquals(expResult,result);}  }
class C{  public void testTxReplicatedPessimisticReadCommitted() throws Exception {  checkTx(REPLICATED,PESSIMISTIC,READ_COMMITTED);}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public char[] elements(){  return a;}  }
class C{  public boolean configureFixedIPLease(IPv4Address ip,MacAddress mac){  DHCPBinding binding=this.getDHCPbindingFromIPv4(ip);  if (binding != null) {    binding.setMACAddress(mac);    binding.setStaticIPLease(true);    binding.setLeaseStatus(false);    return true;  } else {    return false;  }}  }
class C{  protected Query newFuzzyQuery(String text,int fuzziness){  BooleanQuery.Builder bq=new BooleanQuery.Builder();  for (  Map.Entry<String,Float> entry : weights.entrySet()) {    final String fieldName=entry.getKey();    final BytesRef term=getAnalyzer().normalize(fieldName,text);    Query q=new FuzzyQuery(new Term(fieldName,term),fuzziness);    float boost=entry.getValue();    if (boost != 1f) {      q=new BoostQuery(q,boost);    }    bq.add(q,BooleanClause.Occur.SHOULD);  }  return simplify(bq.build());}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ParameterizedAccess.class) {switch (baseFeatureID) {case N4JSPackage.PARAMETERIZED_ACCESS__TYPE_ARGS:      return N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TYPE_ARGS;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  @SuppressWarnings("unchecked") public int reset(String tableName,int Record_ID){  if (tableName == null)   return reset();  if (!m_tableNames.contains(tableName))   return 0;  int counter=0;  int total=0;  for (int i=0; i < m_instances.size(); i++) {    CacheInterface stored=(CacheInterface)m_instances.get(i);    if (stored != null && stored instanceof CCache) {      CCache cc=(CCache)stored;      if (cc.getName().startsWith(tableName)) {{          log.fine("(all) - " + stored);          total+=stored.reset();          counter++;        }      }    }  }  log.fine(tableName + ": #" + counter+ " ("+ total+ ")");  return total;}  }
class C{  public CommandManager(final WorldEdit worldEdit,PlatformManager platformManager){  checkNotNull(worldEdit);  checkNotNull(platformManager);  INSTANCE=this;  this.worldEdit=worldEdit;  this.platformManager=platformManager;  this.exceptionConverter=new WorldEditExceptionConverter(worldEdit);  worldEdit.getEventBus().register(this);  commandLog.addHandler(dynamicHandler);  dynamicHandler.setFormatter(new LogFormat());  ParametricBuilder builder=new ParametricBuilder();  builder.setAuthorizer(new ActorAuthorizer());  builder.setDefaultCompleter(new UserCommandCompleter(platformManager));  builder.addBinding(new WorldEditBinding(worldEdit));  builder.addInvokeListener(new LegacyCommandsHandler());  builder.addInvokeListener(new CommandLoggingHandler(worldEdit,commandLog));  dispatcher=new CommandGraph().builder(builder).commands().registerMethods(new AnvilCommands(worldEdit)).registerMethods(new BiomeCommands(worldEdit)).registerMethods(new ChunkCommands(worldEdit)).registerMethods(new ClipboardCommands(worldEdit)).registerMethods(new GeneralCommands(worldEdit)).registerMethods(new GenerationCommands(worldEdit)).registerMethods(new HistoryCommands(worldEdit)).registerMethods(new NavigationCommands(worldEdit)).registerMethods(new RegionCommands(worldEdit)).registerMethods(new ScriptingCommands(worldEdit)).registerMethods(new SelectionCommands(worldEdit)).registerMethods(new SnapshotUtilCommands(worldEdit)).registerMethods(new ToolUtilCommands(worldEdit)).registerMethods(new ToolCommands(worldEdit)).registerMethods(new UtilityCommands(worldEdit)).register(adapt(new SelectionCommand(new ApplyCommand(new ReplaceParser(),"Set all blocks within selection"),"worldedit.region.set")),"/set").group("worldedit","we").describeAs("WorldEdit commands").registerMethods(new WorldEditCommands(worldEdit)).parent().group("schematic","schem","/schematic","/schem").describeAs("Schematic commands for saving/loading areas").registerMethods(new SchematicCommands(worldEdit)).parent().group("snapshot","snap").describeAs("Schematic commands for saving/loading areas").registerMethods(new SnapshotCommands(worldEdit)).parent().group("brush","br").describeAs("Brushing commands").registerMethods(new BrushCommands(worldEdit)).register(adapt(new ShapedBrushCommand(new DeformCommand(),"worldedit.brush.deform")),"deform").register(adapt(new ShapedBrushCommand(new ApplyCommand(new ReplaceParser(),"Set all blocks within region"),"worldedit.brush.set")),"set").register(adapt(new ShapedBrushCommand(new PaintCommand(),"worldedit.brush.paint")),"paint").register(adapt(new ShapedBrushCommand(new ApplyCommand(),"worldedit.brush.apply")),"apply").register(adapt(new ShapedBrushCommand(new PaintCommand(new TreeGeneratorParser("treeType")),"worldedit.brush.forest")),"forest").register(adapt(new ShapedBrushCommand(ProvidedValue.create(new Deform("y-=1",Mode.RAW_COORD),"Raise one block"),"worldedit.brush.raise")),"raise").register(adapt(new ShapedBrushCommand(ProvidedValue.create(new Deform("y+=1",Mode.RAW_COORD),"Lower one block"),"worldedit.brush.lower")),"lower").parent().group("superpickaxe","pickaxe","sp").describeAs("Super-pickaxe commands").registerMethods(new SuperPickaxeCommands(worldEdit)).parent().group("tool").describeAs("Bind functions to held items").registerMethods(new ToolCommands(worldEdit)).parent().graph().getDispatcher();}  }
class C{  public void testBigIntsCompare(){  for (int i=0; i < 10000; i++) {    int maxLength=TestUtil.nextInt(random(),1,16);    BigInteger leftValue=TestUtil.nextBigInteger(random(),maxLength);    BytesRef left=new BytesRef(new byte[maxLength]);    NumericUtils.bigIntToSortableBytes(leftValue,maxLength,left.bytes,left.offset);    BigInteger rightValue=TestUtil.nextBigInteger(random(),maxLength);    BytesRef right=new BytesRef(new byte[maxLength]);    NumericUtils.bigIntToSortableBytes(rightValue,maxLength,right.bytes,right.offset);    assertEquals(Integer.signum(leftValue.compareTo(rightValue)),Integer.signum(left.compareTo(right)));  }}  }
class C{  private boolean deliberateRightTrim(){  boolean result=false;  for (TemplateElement elem=this.prevTerminalNode(); elem != null && elem.endLine == this.beginLine; elem=elem.prevTerminalNode()) {    if (elem instanceof TrimInstruction) {      TrimInstruction ti=(TrimInstruction)elem;      if (!ti.left && !ti.right) {        result=true;      }      if (ti.right) {        result=true;        int firstLineIndex=firstNewLineIndex() + 1;        if (firstLineIndex == 0) {          return false;        }        if (text.length > firstLineIndex && text[firstLineIndex - 1] == '\r' && text[firstLineIndex] == '\n') {          firstLineIndex++;        }        char[] trailingPart=substring(text,firstLineIndex);        char[] openingPart=substring(text,0,firstLineIndex);        if (StringUtil.isTrimmableToEmpty(openingPart)) {          this.text=trailingPart;          this.beginLine++;          this.beginColumn=1;        } else {          int lastNonWS=openingPart.length - 1;          while (Character.isWhitespace(text[lastNonWS])) {            lastNonWS--;          }          char[] printablePart=substring(text,0,lastNonWS + 1);          if (StringUtil.isTrimmableToEmpty(trailingPart)) {            boolean trimTrailingPart=true;            for (TemplateElement te=this.nextTerminalNode(); te != null && te.beginLine == this.endLine; te=te.nextTerminalNode()) {              if (te.heedsOpeningWhitespace()) {                trimTrailingPart=false;              }              if (te instanceof TrimInstruction && ((TrimInstruction)te).left) {                trimTrailingPart=true;                break;              }            }            if (trimTrailingPart)             trailingPart=CollectionUtils.EMPTY_CHAR_ARRAY;          }          this.text=concat(printablePart,trailingPart);        }      }    }  }  return result;}  }
class C{  private String validateSystemHost(String systemHost){  return InetAddressUtil.validateHost(systemHost);}  }
class C{  public DateMidnight withDurationAdded(long durationToAdd,int scalar){  if (durationToAdd == 0 || scalar == 0) {    return this;  }  long instant=getChronology().add(getMillis(),durationToAdd,scalar);  return withMillis(instant);}  }
class C{  @SuppressWarnings("unchecked") private static <T>Stream<T> all(Class<T> type,Iterator<Object> i){  requireNonNull(type);  requireNonNull(i);  return all(i).filter(null).map(null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static final boolean isEndOfMonth(final Date d){  return (d.dayOfMonth() == monthLength(d.month().value(),isLeap(d.year())));}  }
class C{  @Override public boolean othersUpdatesAreVisible(int type){  debugCodeCall("othersUpdatesAreVisible",type);  return false;}  }
class C{  public static <T>List<List<T>> partition(List<T> list,int num){  if (num < 1) {    throw new IllegalArgumentException("Number of sub-lists must be greater than zero");  }  List<List<T>> result=new ArrayList<List<T>>();  int index=0;  int listsRemaining=num;  int elementsRemaining=list.size();  while (elementsRemaining > 0) {    int size=(int)Math.ceil(elementsRemaining / (listsRemaining + 0.0));    List<T> subList=list.subList(index,index + size);    result.add(subList);    listsRemaining--;    elementsRemaining-=size;    index+=size;  }  if (elementsRemaining != 0) {    throw new IllegalStateException(String.format("Loop exited with %d elements still remaining",elementsRemaining));  }  return result;}  }
class C{  public SingletonTask(ScheduledExecutorService ses,Runnable task){  super();  this.task=task;  this.ses=ses;}  }
class C{  public void parse(GsmaRelease release,MessagingMode messagingMode,boolean first) throws SAXException {  ByteArrayInputStream inputStream=null;  try {    final boolean logActivated=sLogger.isActivated();    if (logActivated) {      sLogger.debug("Start the parsing of content first=".concat(Boolean.toString(first)));    }    mFirst=first;    inputStream=new ByteArrayInputStream(mContent.getBytes(UTF8));    DocumentBuilderFactory dfactory=DocumentBuilderFactory.newInstance();    DocumentBuilder dbuilder=dfactory.newDocumentBuilder();    Document doc=dbuilder.parse(inputStream);    if (doc == null) {      throw new SAXException("The provisioning content document is null!");    }    if (logActivated) {      sLogger.debug("Parsed Doc =" + doc);    }    Node rootnode=doc.getDocumentElement();    Node childnode=rootnode.getFirstChild();    if (childnode == null) {      throw new SAXException("The first chid node in the provisioning content document is null!");    }    int nodeNumber=0;    do {      if (childnode.getNodeName().equals("characteristic")) {        if (childnode.getAttributes().getLength() > 0) {          Node typenode=childnode.getAttributes().getNamedItem("type");          if (typenode != null && typenode.getNodeValue() != null) {            if (logActivated) {              sLogger.debug("Node " + childnode.getNodeName() + " with type "+ typenode.getNodeValue());            }            nodeNumber++;            String nodeType=typenode.getNodeValue().toUpperCase();            try {              RootNodeType rootNodeType=RootNodeType.valueOf(nodeType);switch (rootNodeType) {case VERS:                parseVersion(childnode);              break;case TOKEN:            parseToken(childnode);          break;case MSG:        parseTermsMessage(childnode);      break;case APPLICATION:    parseApplication(childnode);  break;case IMS:parseIMS(childnode);break;case PRESENCE:parsePresence(childnode);break;case XDMS:parseXDMS(childnode);break;case IM:parseIM(childnode);break;case APN:parseAPN(childnode);break;case OTHER:parseOther(childnode);break;case SERVICES:parseServices(childnode);break;case SUPL:parseSupl(childnode);break;case SERVICEPROVIDEREXT:parseServiceProviderExt(childnode);break;case UX:parseUx(childnode,ImsServerVersion.NON_JOYN);break;default :if (sLogger.isActivated()) {sLogger.warn("unhandled node type: " + nodeType);}}} catch (IllegalArgumentException e) {if (sLogger.isActivated()) {sLogger.warn("invalid node type: " + nodeType);}}}}}} while ((childnode=childnode.getNextSibling()) != null);if (nodeNumber == 1) {mRcsSettings.setGsmaRelease(release);mRcsSettings.setMessagingMode(messagingMode);}} catch (ParserConfigurationException|IOException e) {throw new SAXException("Can't parse provisioning content document!",e);} finally {CloseableUtils.tryToClose(inputStream);}}  }
class C{  public Map<Integer,Double> compute(Collection<? extends Number> dataset){  return computeInPlace(Doubles.toArray(dataset));}  }
class C{  public ClassNode(String display,String clsname){  super(display);  this.clsname=clsname;}  }
class C{  @Override public void onSearchHint(SearchActionBar searchview,CharSequence constraint){}  }
class C{  public void mousePressed(MouseEvent e){  if (AWTEventMonitor.mouseListener_private != null) {    AWTEventMonitor.mouseListener_private.mousePressed(e);  }}  }
class C{  public static boolean isBoolean(Class clazz){  if ((clazz == Boolean.class) || (clazz == boolean.class)) {    return true;  }  return false;}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(DATE)) {    date=null;  } else {    throw new IOException("Name not supported by InvalidityDateExtension");  }  encodeThis();}  }
class C{  public static int readReplace(String fname,String oldPattern,String replPattern){  String line;  StringBuffer sb=new StringBuffer();  try {    FileInputStream fis=new FileInputStream(fname);    BufferedReader reader=new BufferedReader(new InputStreamReader(fis));    while ((line=reader.readLine()) != null) {      line=line.replaceAll(oldPattern,replPattern);      System.err.println(line);      sb.append(line + "\n");    }    reader.close();    BufferedWriter out=new BufferedWriter(new FileWriter(fname));    out.write(sb.toString());    out.close();  } catch (  Throwable e) {    System.err.println("error replacing codesnipit " + e);    return -1;  }  return 0;}  }
class C{  public static boolean isBridge(int flags){  return (flags & AccBridge) != 0;}  }
class C{  private LayoutManagerFactory(){}  }
class C{  public TlsKeyMaterialSpec(SecretKey clientMacKey,SecretKey serverMacKey,SecretKey clientCipherKey,SecretKey serverCipherKey){  this(clientMacKey,serverMacKey,clientCipherKey,null,serverCipherKey,null);}  }
class C{  private static boolean containsAnnoOfType(List<Attribute.Compound> annos,Type type){  for (  Attribute.Compound anno : annos) {    if (anno.type.tsym == type.tsym)     return true;  }  return false;}  }
class C{  public void newInternalMinute(){  if (lastClockReadPacket != null && lastClockReadPacket.getElement(CS_CLOCK_STATUS) == 0) {    if (clockMode == SYNCMODE_INTERNAL_MASTER) {      alarmSyncStart();    }  }}  }
class C{  private DiskStorage.Inserter startInsert(final String resourceId,final CacheKey key) throws IOException {  maybeEvictFilesInCacheDir();  return mStorage.insert(resourceId,key);}  }
class C{  public String consumeTo(String seq){  int offset=queue.indexOf(seq,pos);  if (offset != -1) {    String consumed=queue.substring(pos,offset);    pos+=consumed.length();    return consumed;  } else {    return remainder();  }}  }
class C{  public String name(){  return mPath;}  }
class C{  public boolean hasMoreProperties(){  byte pad=0x00;  byte pad0=buf.get();  byte pad1=buf.get();  byte type=buf.get();  boolean isEndOfObject=(pad0 == pad && pad1 == pad && type == AMF.TYPE_END_OF_OBJECT);  buf.position(buf.position() - 3);  return !isEndOfObject;}  }
class C{  @Override public boolean contains(Point2D.Double p){  if (get(TRANSFORM) != null) {    try {      p=(Point2D.Double)get(TRANSFORM).inverseTransform(p,new Point2D.Double());    } catch (    NoninvertibleTransformException ex) {      ex.printStackTrace();    }  }  return getTextShape().getBounds2D().contains(p);}  }
class C{  public Object load(InputStream io){  return loadFromReader(new StreamReader(new UnicodeReader(io)),Object.class);}  }
class C{  private void handle407Authentication(SipTransactionContext ctx) throws PayloadException, NetworkException {  try {    if (sLogger.isActivated()) {      sLogger.info("407 response received");    }    SipResponse resp=ctx.getSipResponse();    mAuthenticationAgent.readProxyAuthenticateHeader(resp);    mDialogPath.incrementCseq();    if (sLogger.isActivated()) {      sLogger.info("Send second SUBSCRIBE");    }    SipRequest subscribe=createSubscribe(mDialogPath,ctx.getTransaction().getRequest().getExpires().getExpires() * SECONDS_TO_MILLISECONDS_CONVERSION_RATE);    mAuthenticationAgent.setProxyAuthorizationHeader(subscribe);    sendSubscribe(subscribe);  } catch (  InvalidArgumentException e) {    throw new PayloadException("Failed to handle 407 authentication response!",e);  }catch (  ParseException e) {    throw new PayloadException("Failed to handle 407 authentication response!",e);  }}  }
class C{  private static byte randomByte(){  return (byte)(127 - new Random().nextInt(256));}  }
class C{  private void exportData(boolean markCompleted) throws IOException, EncryptionException {  FormController formController=Collect.getInstance().getFormController();  publishProgress(Collect.getInstance().getApplication().getString(R.string.survey_saving_collecting_message));  ByteArrayPayload payload=formController.getFilledInFormXml();  String instancePath=formController.getInstancePath().getAbsolutePath();  publishProgress(Collect.getInstance().getApplication().getString(R.string.survey_saving_saving_message));  exportXmlFile(payload,instancePath);  updateInstanceDatabase(true,true);  if (markCompleted) {    boolean canEditAfterCompleted=formController.isSubmissionEntireForm();    boolean isEncrypted=false;    File instanceXml=formController.getInstancePath();    File submissionXml=new File(instanceXml.getParentFile(),"submission.xml");    payload=formController.getSubmissionXml();    publishProgress(Collect.getInstance().getApplication().getString(R.string.survey_saving_finalizing_message));    exportXmlFile(payload,submissionXml.getAbsolutePath());    EncryptedFormInformation formInfo=EncryptionUtils.getEncryptedFormInformation(mUri,formController.getSubmissionMetadata());    if (formInfo != null) {      canEditAfterCompleted=false;      publishProgress(Collect.getInstance().getApplication().getString(R.string.survey_saving_encrypting_message));      EncryptionUtils.generateEncryptedSubmission(instanceXml,submissionXml,formInfo);      isEncrypted=true;    }    updateInstanceDatabase(false,canEditAfterCompleted);    if (!canEditAfterCompleted) {      if (!instanceXml.delete()) {        String msg="Error deleting " + instanceXml.getAbsolutePath() + " prior to renaming submission.xml";        Log.e(t,msg);        throw new IOException(msg);      }      if (!submissionXml.renameTo(instanceXml)) {        String msg="Error renaming submission.xml to " + instanceXml.getAbsolutePath();        Log.e(t,msg);        throw new IOException(msg);      }    } else {      if (!submissionXml.delete()) {        String msg="Error deleting " + submissionXml.getAbsolutePath() + " (instance is re-openable)";        Log.w(t,msg);      }    }    if (isEncrypted) {      if (!EncryptionUtils.deletePlaintextFiles(instanceXml)) {        Log.e(t,"Error deleting plaintext files for " + instanceXml.getAbsolutePath());      }    }  }}  }
class C{  @LargeTest public void testPropertiesH264HD1080WithoutAudio() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_1080x720_30fps_800kbps_1_17.mp4";  final int aspectRatio=MediaProperties.ASPECT_RATIO_3_2;  final int fileType=MediaProperties.FILE_MP4;  final int videoCodecType=MediaProperties.VCODEC_H264;  final int duration=77366;  final int videoBitrate=859000;  final int audioBitrate=0;  final int fps=30;  final int audioCodecType=-1;  final int audioSamplingFrequency=0;  final int audioChannel=0;  final int videoProfile=MediaProperties.H264Profile.H264ProfileBaseline;  final int videoLevel=MediaProperties.H264Level.H264Level13;  final int width=1080;  final int height=MediaProperties.HEIGHT_720;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mvi=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  validateVideoProperties(aspectRatio,fileType,videoCodecType,duration,videoBitrate,fps,videoProfile,videoLevel,width,height,audioCodecType,audioSamplingFrequency,audioChannel,audioBitrate,mvi);}  }
class C{  public DTMAxisIterator reset(){  if (_isConstant) {    _currentNode=_startNode;    return resetPosition();  } else {    final boolean temp=_isRestartable;    _isRestartable=true;    setStartNode(_startNode);    _isRestartable=temp;  }  return this;}  }
class C{  public TestSubscriber(){  this(EmptySubscriber.instance(),Long.MAX_VALUE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:26.347 -0500",hash_original_method="B501A93D9CBCF588AB28D650AA03E986",hash_generated_method="3AF269BE68360F55A86A36CC1C885EF7") protected void syncClirSetting(){  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getContext());  int clirSetting=sp.getInt(CLIR_KEY,-1);  if (clirSetting >= 0) {    mCM.setCLIR(clirSetting,null);  }}  }
class C{  private static void validateEndpoint(X509Certificate x509Certificate,String endpoint){  Set<String> ipsOfEndpoint=new HashSet<String>();  Set<String> subjectIpsInCert=new HashSet<String>();  try {    for (    InetAddress addr : InetAddress.getAllByName(endpoint)) {      ipsOfEndpoint.add(addr.getHostAddress());    }  } catch (  UnknownHostException uhe) {    _log.error(uhe.getMessage());  }  Collection altNames=null;  try {    altNames=x509Certificate.getSubjectAlternativeNames();  } catch (  CertificateParsingException cpe) {    _log.error(cpe.getMessage());  }  if (altNames != null) {    Iterator itAltNames=altNames.iterator();    while (itAltNames.hasNext()) {      List extensionEntry=(List)itAltNames.next();      Integer nameType=(Integer)extensionEntry.get(0);      if (nameType == SUBALTNAME_DNSNAME || nameType == SUBALTNAME_IPADDRESS) {        String name=(String)extensionEntry.get(1);        try {          for (          InetAddress addr : InetAddress.getAllByName(name)) {            subjectIpsInCert.add(addr.getHostAddress());          }        } catch (        UnknownHostException uhe) {          _log.error(uhe.getMessage());        }      }    }  }  if (ipsOfEndpoint.isEmpty() || subjectIpsInCert.isEmpty()) {    throw APIException.badRequests.apiEndpointNotMatchCertificate(endpoint);  }  boolean bFound=false;  for (  String ip : ipsOfEndpoint) {    if (subjectIpsInCert.contains(ip)) {      bFound=true;      break;    }  }  if (!bFound) {    throw APIException.badRequests.apiEndpointNotMatchCertificate(endpoint);  }}  }
class C{  public JavaPacketizer(){}  }
class C{  public int numBitsPerCoordinate(){  return numBytesPerCoordinate << 3;}  }
class C{  public void saveChannel(CumulusChannel newChannel,CumulusChannel original){  String jsonString=newChannel.toString();  Intent i=new Intent();  String ogString=original.toString();  i.setClassName("com.felkertech.n.cumulustv","com.felkertech.n.plugins.DataReceiver");  i.setAction(ACTION_RECEIVER);  i.putExtra(INTENT_EXTRA_JSON,jsonString);  if (getChannel() != null) {    i.putExtra(INTENT_EXTRA_ORIGINAL_JSON,ogString);  }  if (proprietary) {    i.putExtra(INTENT_EXTRA_SOURCE,getApplicationInfo().packageName + "," + getApplicationInfo().name);  } else {    i.putExtra(INTENT_EXTRA_SOURCE,"");  }  i.putExtra(INTENT_EXTRA_ACTION,INTENT_EXTRA_ACTION_WRITE);  Log.d("cumulus:plugin","Saving changes");  sendBroadcast(i);  finish();}  }
class C{  private void createPopupMenu(MouseEvent e){  JPopupMenu menu=new JPopupMenu();  AbstractAction[] resourceActions=myResourceActionSet.getActions();  menu.add(resourceActions[0]);  if (getSelectedNodes().length == 1) {    for (int i=1; i < resourceActions.length; i++) {      menu.add(resourceActions[i]);    }    menu.add(myResourceActionSet.getResourceSendMailAction());    menu.addSeparator();    menu.add(myResourceActionSet.getResourceMoveUpAction());    menu.add(myResourceActionSet.getResourceMoveDownAction());    menu.addSeparator();    menu.add(appli.getCutAction());    menu.add(appli.getCopyAction());    menu.add(appli.getPasteAction());    menu.add(myResourceActionSet.getResourceDeleteAction());  }  menu.applyComponentOrientation(GanttLanguage.getInstance().getComponentOrientation());  Point popupPoint=getPopupMenuPoint(e);  menu.show(this,popupPoint.x,popupPoint.y);}  }
class C{  public static void update(Activity activity){  orientation=activity.getResources().getConfiguration().orientation;  DisplayMetrics displayMetrics=new DisplayMetrics();  activity.getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);  density=displayMetrics.density;  densityDpi=displayMetrics.densityDpi;  widthPx=displayMetrics.widthPixels;  heightPx=displayMetrics.heightPixels;  updateDp();  Log.d(MetricsUtil.class.getSimpleName(),"Orientation: " + nameForOrientation(orientation) + "\nWidth (px): "+ widthPx+ ", Height (px): "+ heightPx+ "\nDPI: "+ densityDpi+ ", "+ "Density Factor: "+ density+ "\nWidth (dp): "+ widthDp+ ", Height (dp): "+ heightDp);}  }
class C{  public List<Integer> emit(String streamId,List<Object> tuple,Object messageId){  return delegate.emit(streamId,tuple,messageId);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:    return isValidSimpleAssignmentTarget();}return super.eInvoke(operationID,arguments);}  }
class C{  private static void expandTestSuite(TestSuiteChromosome suite,LocalSearchObjective<TestSuiteChromosome> objective){  logger.debug("Expanding tests for local search");  TestSuiteChromosome newTestSuite=new TestSuiteChromosome();  for (  TestChromosome test : suite.getTestChromosomes()) {    if (test.getLastExecutionResult() == null || test.isChanged()) {      test.setLastExecutionResult(TestCaseExecutor.runTest(test.getTestCase()));      test.setChanged(false);    }    if (test.getLastExecutionResult().hasTimeout() || test.getLastExecutionResult().hasTestException()) {      logger.info("Skipping test with timeout or exception");      continue;    }    boolean hasLocalSearchBeenApplied=test.hasLocalSearchBeenApplied();    TestCase newTest=test.getTestCase().clone();    TestCase expandedTest=expandTestCase(newTest);    TestChromosome expandedTestChromosome=newTestSuite.addTest(expandedTest);    expandedTestChromosome.setLocalSearchApplied(hasLocalSearchBeenApplied);  }  List<TestChromosome> oldTests=suite.getTestChromosomes();  oldTests.clear();  oldTests.addAll(newTestSuite.getTestChromosomes());  suite.setChanged(true);  for (  FitnessFunction<? extends Chromosome> ff : objective.getFitnessFunctions()) {    ((TestSuiteFitnessFunction)ff).getFitness(suite);  }}  }
class C{  private static void encodeDataPair(final StringBuilder buffer,final String key,final String value) throws UnsupportedEncodingException {  buffer.append('&').append(encode(key)).append('=').append(encode(value));}  }
class C{  public PushbackInputStream(InputStream in){  this(in,1);}  }
class C{  protected boolean sendKeepAliveMessage(LocalCandidate candidate) throws StunException {  Message keepAliveMessage=createKeepAliveMessage(candidate);  if (keepAliveMessage == null) {    return false;  } else   if (keepAliveMessage instanceof Request) {    return (sendRequest((Request)keepAliveMessage,false,null) != null);  } else {    throw new StunException(StunException.ILLEGAL_ARGUMENT,"Failed to create keep-alive STUN message for candidate: " + candidate);  }}  }
class C{  public ServerSecurityException(String message,String serverMessage){  super(message,Key.POTENITAL_TAMPERING_OF_REQUEST,null,serverMessage);}  }
class C{  public final void print(char ch) throws IOException {  write((byte)ch);}  }
class C{  public int size(){  return counts.size();}  }
class C{  public final String createMessage(String msgKey,Object args[]){  if (m_resourceBundle == null)   m_resourceBundle=loadResourceBundle(m_resourceBundleName);  if (m_resourceBundle != null) {    return createMsg(m_resourceBundle,msgKey,args);  } else   return "Could not load the resource bundles: " + m_resourceBundleName;}  }
class C{  private CamelStreamer<Integer,String> createCamelStreamer(IgniteDataStreamer<Integer,String> dataStreamer){  CamelStreamer<Integer,String> streamer=new CamelStreamer<>();  streamer.setIgnite(grid());  streamer.setStreamer(dataStreamer);  streamer.setEndpointUri("jetty:" + url);  dataStreamer.allowOverwrite(true);  dataStreamer.autoFlushFrequency(1);  return streamer;}  }
class C{  public XmlXpathHelper(String xml,boolean namespaceAware) throws XmlParserException {  xpath=XPathFactory.newInstance().newXPath();  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    InputSource is=new InputSource(new StringReader(xml));    factory.setNamespaceAware(namespaceAware);    factory.setValidating(false);    xmlDocument=factory.newDocumentBuilder().parse(is);  } catch (  Exception ex) {    throw new XmlParserException(ex);  }}  }
class C{  public int read() throws IOException {  if (inputStream == null) {    reopen();  }  count(1);  return inputStream.read();}  }
class C{  public synchronized boolean isTerminalResized(){  if (wasResized) {    wasResized=false;    return true;  } else {    return false;  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.583 -0500",hash_original_method="8CD79681F48962D4344E68AA337F0770",hash_generated_method="8CD79681F48962D4344E68AA337F0770") boolean arrowScroll(int direction){  final int selectedPosition=mSelectedPosition;  final int numColumns=mNumColumns;  int startOfRowPos;  int endOfRowPos;  boolean moved=false;  if (!mStackFromBottom) {    startOfRowPos=(selectedPosition / numColumns) * numColumns;    endOfRowPos=Math.min(startOfRowPos + numColumns - 1,mItemCount - 1);  } else {    final int invertedSelection=mItemCount - 1 - selectedPosition;    endOfRowPos=mItemCount - 1 - (invertedSelection / numColumns) * numColumns;    startOfRowPos=Math.max(0,endOfRowPos - numColumns + 1);  }switch (direction) {case FOCUS_UP:    if (startOfRowPos > 0) {      mLayoutMode=LAYOUT_MOVE_SELECTION;      setSelectionInt(Math.max(0,selectedPosition - numColumns));      moved=true;    }  break;case FOCUS_DOWN:if (endOfRowPos < mItemCount - 1) {  mLayoutMode=LAYOUT_MOVE_SELECTION;  setSelectionInt(Math.min(selectedPosition + numColumns,mItemCount - 1));  moved=true;}break;case FOCUS_LEFT:if (selectedPosition > startOfRowPos) {mLayoutMode=LAYOUT_MOVE_SELECTION;setSelectionInt(Math.max(0,selectedPosition - 1));moved=true;}break;case FOCUS_RIGHT:if (selectedPosition < endOfRowPos) {mLayoutMode=LAYOUT_MOVE_SELECTION;setSelectionInt(Math.min(selectedPosition + 1,mItemCount - 1));moved=true;}break;}if (moved) {playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));invokeOnItemScrollListener();}if (moved) {awakenScrollBars();}return moved;}  }
class C{  void updateFinish(String instanceId){  if (!isDomThread()) {    throw new WXRuntimeException("RefreshFinish operation must be done in dom thread");  }  WXDomStatement statement=mDomRegistries.get(instanceId);  if (statement == null) {    return;  }  statement.updateFinish();}  }
class C{  private void insertNormalStackOverflowCheck(Instruction plg){  if (!ir.method.isInterruptible()) {    plg.remove();    return;  }  if (ir.compiledMethod.isSaveVolatile()) {    return;  }  PhysicalRegisterSet phys=(PhysicalRegisterSet)ir.regpool.getPhysicalRegisterSet();  Register ESP=phys.getESP();  MemoryOperand M=MemoryOperand.BD(ir.regpool.makeTROp(),Entrypoints.stackLimitField.getOffset(),(byte)WORDSIZE,null,null);  MIR_TrapIf.mutate(plg,IA32_TRAPIF,null,new RegisterOperand(ESP,PRIMITIVE_TYPE_FOR_WORD),M,IA32ConditionOperand.LE(),TrapCodeOperand.StackOverflow());}  }
class C{  public boolean insert(E comparable){  if (comparable == null)   return false;  BinarySearchTreeNode<E> node=new BinarySearchTreeNode<E>(comparable);  return this.insert(node);}  }
class C{  public byte[] embedData(byte[] msg,String msgFileName,byte[] cover,String coverFileName,String stegoFileName) throws OpenStegoException {  BufferedImage image=null;  List<int[][]> yuv=null;  DWT dwt=null;  ImageTree dwtTree=null;  ImageTree p=null;  Signature sig=null;  int[][] luminance=null;  int imgType=0;  int cols=0;  int rows=0;  int levels=0;  int currLevel=0;  int w=0;  double maxCoeff=0.0;  double alpha=0.0;  if (cover == null) {    throw new OpenStegoException(null,NAMESPACE,DWTKimErrors.ERR_NO_COVER_FILE);  } else {    image=ImageUtil.byteArrayToImage(cover,coverFileName);  }  imgType=image.getType();  cols=image.getWidth();  rows=image.getHeight();  yuv=ImageUtil.getYuvFromImage(image);  luminance=yuv.get(0);  sig=new Signature(msg);  levels=DWTUtil.findDeepestLevel(cols,rows) - 1;  if (sig.decompositionLevel > levels) {    throw new OpenStegoException(null,NAMESPACE,DWTKimErrors.ERR_DECOMP_LEVEL_NOT_ENOUGH);  }  dwt=new DWT(cols,rows,sig.filterNumber,sig.decompositionLevel,sig.waveletFilterMethod);  dwtTree=dwt.forwardDWT(luminance);  p=dwtTree;  w=0;  while (p.getCoarse() != null) {    double threshold;    currLevel=p.getHorizontal().getLevel();    maxCoeff=findLevelMaxCoeff(p);    threshold=calcLevelThreshold(maxCoeff);    alpha=calcLevelAlphaDetail(sig.alphaForDetailSubBand,currLevel);    w=markSubBand(p.getHorizontal(),alpha,sig.watermark,threshold,w,sig.watermarkLength);    w=markSubBand(p.getVertical(),alpha,sig.watermark,threshold,w,sig.watermarkLength);    w=markSubBand(p.getDiagonal(),alpha,sig.watermark,threshold,w,sig.watermarkLength);    p=p.getCoarse();  }  w=markSubBand(p,sig.alphaForApproxSubBand,sig.watermark,calcLevelThreshold(findSubBandMaxCoeff(p,1)),w,sig.watermarkLength);  dwt.inverseDWT(dwtTree,luminance);  yuv.set(0,luminance);  return ImageUtil.imageToByteArray(ImageUtil.getImageFromYuv(yuv,imgType),stegoFileName,this);}  }
class C{  @Override public Eval<Optional<T>> max(final Comparator<? super T> comparator){  return Eval.later(null);}  }
class C{  public boolean unlockIt(){  log.info("unlockIt - " + toString());  setProcessing(false);  return true;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof ActivationGroupDesc) {    ActivationGroupDesc desc=(ActivationGroupDesc)obj;    return ((className == null ? desc.className == null : className.equals(desc.className)) && (location == null ? desc.location == null : location.equals(desc.location)) && (data == null ? desc.data == null : data.equals(desc.data))&& (env == null ? desc.env == null : env.equals(desc.env))&& (props == null ? desc.props == null : props.equals(desc.props)));  } else {    return false;  }}  }
class C{  final public MutableString replace(final CharSequence s){  return replace(0,Integer.MAX_VALUE,s);}  }
class C{  private void fillTable(MWarehouse wh) throws Exception {  String sql="INSERT INTO T_Replenish " + "(AD_PInstance_ID, M_Warehouse_ID, M_Product_ID, AD_Client_ID, AD_Org_ID," + " ReplenishType, Level_Min, Level_Max,"+ " C_BPartner_ID, Order_Min, Order_Pack, QtyToOrder, ReplenishmentCreate) "+ "SELECT " + getAD_PInstance_ID() + ", r.M_Warehouse_ID, r.M_Product_ID, r.AD_Client_ID, r.AD_Org_ID,"+ " r.ReplenishType, r.Level_Min, r.Level_Max,"+ " po.C_BPartner_ID, po.Order_Min, po.Order_Pack, 0, ";  if (p_ReplenishmentCreate == null)   sql+="null"; else   sql+="'" + p_ReplenishmentCreate + "'";  sql+=" FROM M_Replenish r" + " INNER JOIN M_Product_PO po ON (r.M_Product_ID=po.M_Product_ID) " + "WHERE po.IsCurrentVendor='Y'"+ " AND r.ReplenishType<>'0'"+ " AND po.IsActive='Y' AND r.IsActive='Y'"+ " AND r.M_Warehouse_ID="+ p_M_Warehouse_ID;  if (p_C_BPartner_ID != 0)   sql+=" AND po.C_BPartner_ID=" + p_C_BPartner_ID;  int no=DB.executeUpdate(sql,get_TrxName());  log.finest(sql);  log.fine("Insert (1) #" + no);  if (p_C_BPartner_ID == 0) {    sql="INSERT INTO T_Replenish " + "(AD_PInstance_ID, M_Warehouse_ID, M_Product_ID, AD_Client_ID, AD_Org_ID," + " ReplenishType, Level_Min, Level_Max,"+ " C_BPartner_ID, Order_Min, Order_Pack, QtyToOrder, ReplenishmentCreate) "+ "SELECT " + getAD_PInstance_ID() + ", r.M_Warehouse_ID, r.M_Product_ID, r.AD_Client_ID, r.AD_Org_ID,"+ " r.ReplenishType, r.Level_Min, r.Level_Max,"+ " 0, 1, 1, 0, ";    if (p_ReplenishmentCreate == null)     sql+="null"; else     sql+="'" + p_ReplenishmentCreate + "'";    sql+=" FROM M_Replenish r " + "WHERE r.ReplenishType<>'0' AND r.IsActive='Y'" + " AND r.M_Warehouse_ID=" + p_M_Warehouse_ID + " AND NOT EXISTS (SELECT * FROM T_Replenish t "+ "WHERE r.M_Product_ID=t.M_Product_ID"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID()+ ")";    no=DB.executeUpdate(sql,get_TrxName());    log.fine("Insert (BP) #" + no);  }  sql="UPDATE T_Replenish t SET " + "QtyOnHand = (SELECT COALESCE(SUM(QtyOnHand),0) FROM M_Storage s, M_Locator l WHERE t.M_Product_ID=s.M_Product_ID" + " AND l.M_Locator_ID=s.M_Locator_ID AND l.M_Warehouse_ID=t.M_Warehouse_ID),"+ "QtyReserved = (SELECT COALESCE(SUM(QtyReserved),0) FROM M_Storage s, M_Locator l WHERE t.M_Product_ID=s.M_Product_ID"+ " AND l.M_Locator_ID=s.M_Locator_ID AND l.M_Warehouse_ID=t.M_Warehouse_ID),"+ "QtyOrdered = (SELECT COALESCE(SUM(QtyOrdered),0) FROM M_Storage s, M_Locator l WHERE t.M_Product_ID=s.M_Product_ID"+ " AND l.M_Locator_ID=s.M_Locator_ID AND l.M_Warehouse_ID=t.M_Warehouse_ID)";  if (p_C_DocType_ID != 0)   sql+=", C_DocType_ID=" + p_C_DocType_ID;  sql+=" WHERE AD_PInstance_ID=" + getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Update #" + no);  sql="DELETE T_Replenish r " + "WHERE (EXISTS (SELECT * FROM M_Product p " + "WHERE p.M_Product_ID=r.M_Product_ID AND p.IsActive='N')"+ " OR EXISTS (SELECT * FROM M_Replenish rr "+ " WHERE rr.M_Product_ID=r.M_Product_ID AND rr.IsActive='N'"+ " AND rr.M_Warehouse_ID=" + p_M_Warehouse_ID + " ))"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Delete Inactive=" + no);  sql="UPDATE T_Replenish SET QtyOnHand = 0 WHERE QtyOnHand IS NULL";  no=DB.executeUpdate(sql,get_TrxName());  sql="UPDATE T_Replenish SET QtyReserved = 0 WHERE QtyReserved IS NULL";  no=DB.executeUpdate(sql,get_TrxName());  sql="UPDATE T_Replenish SET QtyOrdered = 0 WHERE QtyOrdered IS NULL";  no=DB.executeUpdate(sql,get_TrxName());  sql="UPDATE T_Replenish" + " SET QtyToOrder = CASE WHEN QtyOnHand - QtyReserved + QtyOrdered <= Level_Min " + " THEN Level_Max - QtyOnHand + QtyReserved - QtyOrdered "+ " ELSE 0 END "+ "WHERE ReplenishType='1'"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Update Type-1=" + no);  sql="UPDATE T_Replenish" + " SET QtyToOrder = Level_Max - QtyOnHand + QtyReserved - QtyOrdered " + "WHERE ReplenishType='2'"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Update Type-2=" + no);  sql="UPDATE T_Replenish" + " SET QtyToOrder = Order_Min " + "WHERE QtyToOrder < Order_Min"+ " AND QtyToOrder > 0"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Set MinOrderQty=" + no);  sql="UPDATE T_Replenish" + " SET QtyToOrder = QtyToOrder - MOD(QtyToOrder, Order_Pack) + Order_Pack " + "WHERE MOD(QtyToOrder, Order_Pack) <> 0"+ " AND QtyToOrder > 0"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Set OrderPackQty=" + no);  if (wh.getM_WarehouseSource_ID() != 0) {    sql="UPDATE T_Replenish" + " SET M_WarehouseSource_ID=" + wh.getM_WarehouseSource_ID() + " WHERE AD_PInstance_ID="+ getAD_PInstance_ID();    no=DB.executeUpdate(sql,get_TrxName());    if (no != 0)     log.fine("Set Source Warehouse=" + no);  }  sql="UPDATE T_Replenish" + " SET M_WarehouseSource_ID = NULL " + "WHERE M_Warehouse_ID=M_WarehouseSource_ID"+ " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Set same Source Warehouse=" + no);  String className=wh.getReplenishmentClass();  if (className != null && className.length() > 0) {    ReplenishInterface custom=null;    try {      Class<?> clazz=Class.forName(className);      custom=(ReplenishInterface)clazz.newInstance();    } catch (    Exception e) {      throw new AdempiereUserError("No custom Replenishment class " + className + " - "+ e.toString());    }    X_T_Replenish[] replenishs=getReplenish("ReplenishType='9'");    for (int i=0; i < replenishs.length; i++) {      X_T_Replenish replenish=replenishs[i];      if (replenish.getReplenishType().equals(X_T_Replenish.REPLENISHTYPE_Custom)) {        BigDecimal qto=null;        try {          qto=custom.getQtyToOrder(wh,replenish);        } catch (        Exception e) {          log.log(Level.SEVERE,custom.toString(),e);        }        if (qto == null)         qto=Env.ZERO;        replenish.setQtyToOrder(qto);        replenish.saveEx();      }    }  }  sql="DELETE T_Replenish " + "WHERE QtyToOrder < 1" + " AND AD_PInstance_ID="+ getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Delete No QtyToOrder=" + no);}  }
class C{  private void onCopyFileOperationFinish(CopyFileOperation operation,RemoteOperationResult result){  if (result.isSuccess()) {    dismissLoadingDialog();    refreshListOfFilesFragment();  } else {    dismissLoadingDialog();    try {      Toast msg=Toast.makeText(FileDisplayActivity.this,ErrorMessageAdapter.getErrorCauseMessage(result,operation,getResources()),Toast.LENGTH_LONG);      msg.show();    } catch (    NotFoundException e) {      Log_OC.e(TAG,"Error while trying to show fail message ",e);    }  }}  }
class C{  void put(List<LocalizedDomainObject> localizedDomainObjects){  for (  LocalizedDomainObject localizedDomainObject : localizedDomainObjects) {    put(localizedDomainObject.getObjKey(),localizedDomainObject.getLocalizedResources());  }}  }
class C{  public AuthenticationInfoParser(String authenticationInfo){  super(authenticationInfo);}  }
class C{  public Map createPdxHelperMap(){  Map fieldMap=new HashMap();  fieldMap.put("className",this.getClass().getName());  fieldMap.put("myVersion",myVersion);  fieldMap.put("id",id);  fieldMap.put("name",name);  fieldMap.put("status",status);  fieldMap.put("type",type);  fieldMap.put("positions",positions);  fieldMap.put("undefinedTestField",undefinedTestField);  return fieldMap;}  }
class C{  protected DenseDoubleMatrix1D(int size,double[] elements,int zero,int stride){  setUp(size,zero,stride);  this.elements=elements;  this.isNoView=false;}  }
class C{  public void reset(){  currentContext=new Context2(null);  currentContext.declarePrefix("xml",XMLNS);}  }
class C{  public int write(OutputStream out) throws IOException {  writeId(out,"RIFF");  writeInt(out,36 + mNumBytes);  writeId(out,"WAVE");  writeId(out,"fmt ");  writeInt(out,16);  writeShort(out,mFormat);  writeShort(out,mNumChannels);  writeInt(out,mSampleRate);  writeInt(out,mNumChannels * mSampleRate * mBitsPerSample / 8);  writeShort(out,(short)(mNumChannels * mBitsPerSample / 8));  writeShort(out,mBitsPerSample);  writeId(out,"data");  writeInt(out,mNumBytes);  return HEADER_LENGTH;}  }
class C{  public void dispose() throws IOException {  reader.close();  reader=null;}  }
class C{  public static JSONObject createOpenGraphObjectForPost(String type){  return createOpenGraphObjectForPost(type,null,null,null,null,null,null);}  }
class C{  public String convertSystemNameToAlternate(String systemName){  return (SerialAddress.convertSystemNameToAlternate(systemName));}  }
class C{  private Defaults(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:56.702 -0500",hash_original_method="BB12C4D69D38F4161821D54CA8CAAD00",hash_generated_method="CA67A7465EC0007AFC6782CFBB480377") public final Key doPhase(Key key,boolean lastPhase) throws InvalidKeyException, IllegalStateException {  return spiImpl.engineDoPhase(key,lastPhase);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  final public int indexOf(final CharSequence pattern){  return indexOf(pattern,0);}  }
class C{  public static byte[] decode(String s){  return decode(s.toCharArray());}  }
class C{  @Override public void printStackTrace(PrintWriter s){  if (s != null) {    super.printStackTrace(s);    SQLException next=getNextException();    for (int i=0; i < 100 && next != null; i++) {      s.println(next.toString());      next=next.getNextException();    }    if (next != null) {      s.println("(truncated)");    }  }}  }
class C{  int requestACK(){  return (writeTelegram(tgmEmpty,CMD_ACK,null));}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @RequestProcessing(value="/journals",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showJournals(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("journals.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("latestArticlesCnt");  final int windowSize=Symphonys.getInt("latestArticlesWindowSize");  final List<JSONObject> latestArticles=journalQueryService.getRecentJournals(pageNum,pageSize);  dataModel.put(Common.LATEST_ARTICLES,latestArticles);  final int pageCount=latestArticles.isEmpty() ? 0 : latestArticles.get(0).optInt(Pagination.PAGINATION_PAGE_COUNT);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  this.forEncryption=forEncryption;  this.macBlock=null;  KeyParameter keyParam;  if (params instanceof AEADParameters) {    AEADParameters param=(AEADParameters)params;    nonce=param.getNonce();    initialAssociatedText=param.getAssociatedText();    int macSizeBits=param.getMacSize();    if (macSizeBits < 32 || macSizeBits > 128 || macSizeBits % 8 != 0) {      throw new IllegalArgumentException("Invalid value for MAC size: " + macSizeBits);    }    macSize=macSizeBits / 8;    keyParam=param.getKey();  } else   if (params instanceof ParametersWithIV) {    ParametersWithIV param=(ParametersWithIV)params;    nonce=param.getIV();    initialAssociatedText=null;    macSize=16;    keyParam=(KeyParameter)param.getParameters();  } else {    throw new IllegalArgumentException("invalid parameters passed to GCM");  }  int bufLength=forEncryption ? BLOCK_SIZE : (BLOCK_SIZE + macSize);  this.bufBlock=new byte[bufLength];  if (nonce == null || nonce.length < 1) {    throw new IllegalArgumentException("IV must be at least 1 byte");  }  if (keyParam != null) {    cipher.init(true,keyParam);    this.H=new byte[BLOCK_SIZE];    cipher.processBlock(H,0,H,0);    multiplier.init(H);    exp=null;  } else   if (this.H == null) {    throw new IllegalArgumentException("Key must be specified in initial init");  }  this.J0=new byte[BLOCK_SIZE];  if (nonce.length == 12) {    System.arraycopy(nonce,0,J0,0,nonce.length);    this.J0[BLOCK_SIZE - 1]=0x01;  } else {    gHASH(J0,nonce,nonce.length);    byte[] X=new byte[BLOCK_SIZE];    Pack.longToBigEndian((long)nonce.length * 8,X,8);    gHASHBlock(J0,X);  }  this.S=new byte[BLOCK_SIZE];  this.S_at=new byte[BLOCK_SIZE];  this.S_atPre=new byte[BLOCK_SIZE];  this.atBlock=new byte[BLOCK_SIZE];  this.atBlockPos=0;  this.atLength=0;  this.atLengthPre=0;  this.counter=Arrays.clone(J0);  this.bufOff=0;  this.totalLength=0;  if (initialAssociatedText != null) {    processAADBytes(initialAssociatedText,0,initialAssociatedText.length);  }}  }
class C{  @Override public boolean hasActiveECM(){  if (!game.getOptions().booleanOption("stratops_ecm") || !game.getBoard().inSpace()) {    return super.hasActiveECM();  }  return getECMRange() >= 0;}  }
class C{  @Override public void addEjbReference(EjbRef ref){  Element ejbRefElement=new Element("ejb-ref-mapping");  ejbRefElement.setAttribute("name",ref.getName());  ejbRefElement.setAttribute("location",ref.getJndiName());  addElement(new DescriptorTag(OrionWebXmlType.getInstance(),"ejb-ref-mapping",true),ejbRefElement,getRootElement());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.750 -0500",hash_original_method="52672E8127CAFECE2449AA57E7257570",hash_generated_method="238E57666ACD9E7CED5C9BB42FE11C28") public static Bitmap decodeFile(String pathName,Options opts){  Bitmap bm=null;  InputStream stream=null;  try {    stream=new FileInputStream(pathName);    bm=decodeStream(stream,null,opts);  } catch (  Exception e) {  } finally {    if (stream != null) {      try {        stream.close();      } catch (      IOException e) {      }    }  }  return bm;}  }
class C{  public Attribute(AVT avt,Element elem){  m_attribute=avt;  m_owner=elem;}  }
class C{  public void addRevision(String revremark){  addRevision(System.getProperty("user.name"),revremark);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void writeTo(ChannelBuffer data){  data.writeByte(version);  data.writeByte(type.getTypeValue());  data.writeShort(length);  data.writeInt(xid);}  }
class C{  private List<DimensionIndex> populateHierarchy(Space space,Axis parent,DimensionIndex root,Axis axis) throws InterruptedException {  ArrayList<DimensionIndex> result=new ArrayList<DimensionIndex>();  try {    IDomain type=axis.getDimension().getImageDomain();    if (type.isInstanceOf(IDomain.OBJECT)) {      if (parent == null) {        populateSubDomainHierarchyLazy(space,root,axis,result,type);        if (!dimensionIndexInList(result,axis)) {          DimensionIndex index=DimensionIndexCreationUtils.createIndex(root,axis,type);          result.add(index);        }      } else {        logger.error("Invalid definition: Object dimension cannot have a parent");        if (!dimensionIndexInList(result,axis)) {          result.add(DimensionIndexCreationUtils.createInvalidIndex(root,axis,"Invalid definition: Object dimension cannot have a parent"));        }      }    } else {      if (!dimensionIndexInList(result,axis)) {        DimensionIndex index=DimensionIndexCreationUtils.createIndex(root,axis,type);        result.add(index);        List<DimensionIndex> sub=populateSubDimensions(space,axis,index);        result.addAll(sub);      }    }  } catch (  Exception e) {    logger.error("error while evaluating the dimension: " + e.getLocalizedMessage());    if (!dimensionIndexInList(result,axis)) {      DimensionIndex index=DimensionIndexCreationUtils.createInvalidIndex(root,axis,"error while evaluating the dimension: " + e.getLocalizedMessage());      result.add(index);      List<DimensionIndex> sub=populateSubDimensions(space,axis,index);      result.addAll(sub);    }  }  return result;}  }
class C{  static void processEntity(String entity,IXMLReader reader,IXMLEntityResolver entityResolver) throws IOException, XMLParseException {  entity=entity.substring(1,entity.length() - 1);  Reader entityReader=entityResolver.getEntity(reader,entity);  if (entityReader == null) {    XMLUtil.errorInvalidEntity(reader.getSystemID(),reader.getLineNr(),entity);  }  boolean externalEntity=entityResolver.isExternalEntity(entity);  reader.startNewStream(entityReader,!externalEntity);}  }
class C{  private void buildFirstLine(LinePath path,Rect r){  int[] range=new int[]{-r.left,-r.top,r.right,r.bottom};  int max=-1;  int maxId=0;  for (int i=0; i < 4; i++) {    if (range[i] > max) {      max=range[i];      maxId=i;    }  }switch (maxId) {case 0:    path.setEndPoint(r.left,Utils.nextInt(r.height()) + r.top);  break;case 1:path.setEndPoint(Utils.nextInt(r.width()) + r.left,r.top);break;case 2:path.setEndPoint(r.right,Utils.nextInt(r.height()) + r.top);break;case 3:path.setEndPoint(Utils.nextInt(r.width()) + r.left,r.bottom);break;}path.lineToEnd();}  }
class C{  public static void covarianceMatrix(Vec mean,DataSet dataSet,Matrix covariance,double sumOfWeights,double sumOfSquaredWeights){  if (!covariance.isSquare())   throw new ArithmeticException("Storage for covariance matrix must be square"); else   if (covariance.rows() != mean.length())   throw new ArithmeticException("Covariance Matrix size and mean size do not agree"); else   if (dataSet.getSampleSize() == 0)   throw new ArithmeticException("No data points to compute covariance from"); else   if (mean.length() != dataSet.getNumNumericalVars())   throw new ArithmeticException("Data vectors do not agree with mean and covariance matrix");  Vec scratch=new DenseVector(mean.length());  for (int i=0; i < dataSet.getSampleSize(); i++) {    DataPoint dp=dataSet.getDataPoint(i);    Vec x=dp.getNumericalValues();    x.copyTo(scratch);    scratch.mutableSubtract(mean);    Matrix.OuterProductUpdate(covariance,scratch,scratch,dp.getWeight());  }  covariance.mutableMultiply(sumOfWeights / (Math.pow(sumOfWeights,2) - sumOfSquaredWeights));}  }
class C{  public static final void writeInt(int val,OutputStream os) throws IOException {  os.write(val >>> 8);  os.write(val);}  }
class C{  public MemberList<TMember> members(ContainerType<?> type){  return members(type,true,true);}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitLongMemberValue(this);}  }
class C{  public String convertAdditiveOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  static public boolean isCNF(final IValueExpressionNode vexpr){  if (!(vexpr instanceof FunctionNode)) {    return true;  }  final FunctionNode functionNode=(FunctionNode)vexpr;  final URI functionURI=functionNode.getFunctionURI();  if (functionURI.equals(FunctionRegistry.NOT)) {    return isCNFNegationOrTerminal(functionNode);  } else   if (functionURI.equals(FunctionRegistry.OR)) {    return isCNFDisjunct(functionNode);  } else   if (functionURI.equals(FunctionRegistry.AND)) {    return isCNF((ValueExpressionNode)functionNode.get(0)) && isCNF((ValueExpressionNode)functionNode.get(1));  } else {    return true;  }}  }
class C{  @Override public void onPageScrollStateChanged(int state){}  }
class C{  public String toString(){  return Long.toString(get());}  }
class C{  public void addListener(MemoryEventListener listener){  getListeners().add(listener);}  }
class C{  @EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onBlockPlace(BlockPlaceEvent event){  for (  Wool wool : getWools(Cardinal.getMatch(event.getWorld()))) {    if (wool.isComplete()) {      continue;    }    Player player=event.getPlayer();    Block block=event.getBlock();    if (wool.getMonument().contains(block.getLocation().toVector()) && block.getType().equals(Material.WOOL) && ((org.bukkit.material.Wool)block.getState().getMaterialData()).getColor().equals(wool.getColor())) {      wool.setComplete(true);      if (wool.isShow()) {        Match match=Cardinal.getMatch(event.getWorld());        Team team=(Team)match.getPlayingContainer(player);        Channels.getGlobalChannel(match.getMatchThread()).sendMessage(new LocalizedComponentBuilder(ChatConstant.getConstant("objective.wool.completed"),Components.getName(player).build(),wool.getComponent(),new TeamComponent(team)).color(ChatColor.GRAY).build());      }      Bukkit.getPluginManager().callEvent(new ObjectiveCompleteEvent(wool,player));    }  }}  }
class C{  private SourceLineAnnotation inspectPackageMemberSourceLines(PackageMemberAnnotation packageMember){  return (packageMember != null) ? packageMember.getSourceLines() : null;}  }
class C{  public static void disposeCursors(){  for (  Cursor cursor : m_idToCursorMap.values()) {    cursor.dispose();  }  m_idToCursorMap.clear();}  }
class C{  public boolean match(String text,int start,int end){  if (null == text)   throw new IllegalArgumentException();  if (start > end)   return false;  if (fIgnoreWildCards)   return (end - start == fLength) && fPattern.regionMatches(fIgnoreCase,0,text,start,fLength);  int segCount=fSegments.length;  if (segCount == 0 && (fHasLeadingStar || fHasTrailingStar))   return true;  if (start == end)   return fLength == 0;  if (fLength == 0)   return start == end;  int tlen=text.length();  if (start < 0)   start=0;  if (end > tlen)   end=tlen;  int tCurPos=start;  int bound=end - fBound;  if (bound < 0)   return false;  int i=0;  String current=fSegments[i];  int segLength=current.length();  if (!fHasLeadingStar) {    if (!regExpRegionMatches(text,start,current,0,segLength)) {      return false;    } else {      ++i;      tCurPos=tCurPos + segLength;    }  }  if ((fSegments.length == 1) && (!fHasLeadingStar) && (!fHasTrailingStar)) {    return tCurPos == end;  }  while (i < segCount) {    current=fSegments[i];    int currentMatch;    int k=current.indexOf(fSingleWildCard);    if (k < 0) {      currentMatch=textPosIn(text,tCurPos,end,current);      if (currentMatch < 0)       return false;    } else {      currentMatch=regExpPosIn(text,tCurPos,end,current);      if (currentMatch < 0)       return false;    }    tCurPos=currentMatch + current.length();    i++;  }  if (!fHasTrailingStar && tCurPos != end) {    int clen=current.length();    return regExpRegionMatches(text,end - clen,current,0,clen);  }  return i == segCount;}  }
class C{  public MoveAndStrengthenOnlinePlayers(){  StendhalRPWorld rpWorld=SingletonRepository.getRPWorld();  for (  IRPZone irpZone : rpWorld) {    StendhalRPZone irpZone2=(StendhalRPZone)irpZone;    if (!irpZone2.getName().startsWith("int")) {      zones.add(irpZone2);    }  }}  }
class C{  public synchronized void addListener(StatementAwareUpdateListener listener){  if (listener == null) {    throw new IllegalArgumentException("Null listener reference supplied");  }  for (  StatementAwareUpdateListener existing : stmtAwareListeners) {    if (existing == listener) {      return;    }  }  stmtAwareListeners=(StatementAwareUpdateListener[])CollectionUtil.arrayExpandAddSingle(stmtAwareListeners,listener);}  }
class C{  public void generateGrid(final Geometry g){  LOG.warn("Did you check that the width given is in the same unit-of-measure as the shapefile?");  LOG.info("Generating " + this.type.toString() + " grid. This may take some time...");  this.geometry=g;  Polygon envelope=(Polygon)g.getEnvelope();  qt=new QuadTree<>(envelope.getCoordinates()[0].x - width,envelope.getCoordinates()[0].y - width,envelope.getCoordinates()[2].x + width,envelope.getCoordinates()[2].y + width);  Counter counter=new Counter("   cells # ");  double startX=envelope.getCoordinates()[0].x;  double startY=envelope.getCoordinates()[0].y;  double yStep;  double xStep;switch (this.type) {case SQUARE:    xStep=width;  yStep=width;break;case HEX:xStep=0.75 * width;yStep=(Math.sqrt(3.0) / 2) * width;break;case UNKNOWN:throw new RuntimeException("Don't know how to generate grid for type " + GridType.UNKNOWN);default :throw new RuntimeException("Don't know how to generate grid for type " + GridType.UNKNOWN);}double y=startY;int row=0;while (y <= envelope.getCoordinates()[2].y) {double x=startX;int col=0;while (x <= envelope.getCoordinates()[2].x) {double thisX=0.0;double thisY=0.0;if (this.type == GridType.SQUARE) {thisX=x;thisY=y;} else if (this.type == GridType.HEX) {thisX=x;if (col % 2 == 0) {thisY=y;} else {thisY=y - 0.5 * yStep;}}Point p=gf.createPoint(new Coordinate(thisX,thisY));Geometry cell=this.getIndividualGeometry(p);if (g.intersects(cell)) {qt.put(thisX,thisY,p);geometryCache.put(p,cell);}x+=xStep;col++;counter.incCounter();}y+=yStep;row++;}counter.printCounter();}  }
class C{  public E take() throws InterruptedException {  return this.get(System.nanoTime()).take();}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public PostgresFullPrunedBlockStore(NetworkParameters params,int fullStoreDepth,String hostname,String dbName,String username,String password) throws BlockStoreException {  super(params,DATABASE_CONNECTION_URL_PREFIX + hostname + "/"+ dbName,fullStoreDepth,username,password,null);}  }
class C{  public RectangularFireSupportArea(String sidc){  super(sidc);}  }
class C{  public boolean isAnonymousName(){  return (gssNameType.equals(GSSName.NT_ANONYMOUS));}  }
class C{  protected int findTokenSeparator(int from){  if (from < 0) {    throw new IllegalArgumentException("Search position must not be negative: " + from);  }  boolean found=false;  final int to=this.currentHeader.length();  while (!found && (from < to)) {    final char ch=this.currentHeader.charAt(from);    if (isTokenSeparator(ch)) {      found=true;    } else     if (isWhitespace(ch)) {      from++;    } else     if (isTokenChar(ch)) {      throw new ParseException("Tokens without separator (pos " + from + "): "+ this.currentHeader);    } else {      throw new ParseException("Invalid character after token (pos " + from + "): "+ this.currentHeader);    }  }  return from;}  }
class C{  public ASTList sublist(int nth){  ASTList list=this;  while (nth-- > 0)   list=list.right;  return list;}  }
class C{  private static Document createStandaloneCopy(Element element){  Map<String,String> visibleNamespaces=new HashMap<String,String>();  Node walker=element.getParentNode();  while (walker != null && walker.getNodeType() == Node.ELEMENT_NODE) {    NamedNodeMap attrs=walker.getAttributes();    for (int i=0; i < attrs.getLength(); ++i) {      Attr attr=(Attr)attrs.item(i);      if (XMLNS_NS_URI.equals(attr.getNamespaceURI()) && !visibleNamespaces.containsKey(attr.getName())) {        visibleNamespaces.put(attr.getName(),attr.getValue());      }    }    walker=walker.getParentNode();  }  Transformer tx;  try {    tx=TransformerFactory.newInstance().newTransformer();  } catch (  TransformerException e) {    throw new IllegalStateException("Failed to create identity XML " + "transformer. Incompatible Java platform?",e);  }  DOMResult result=new DOMResult();  try {    tx.transform(new DOMSource(element),result);  } catch (  TransformerException e) {    throw new IllegalStateException("Unexpected failure in Identity " + "DOM-to-DOM transformation",e);  }  Document standaloneDoc=(Document)result.getNode();  Element standaloneToken=standaloneDoc.getDocumentElement();  for (  Map.Entry<String,String> nsAttr : visibleNamespaces.entrySet()) {    standaloneToken.setAttributeNS(XMLNS_NS_URI,nsAttr.getKey(),nsAttr.getValue());  }  return standaloneDoc;}  }
class C{  public static Properties readPropertyFile(String propertyFile) throws Exception {  Properties properties=null;  try {    BufferedReader br=new BufferedReader(new FileReader(propertyFile));    properties=new Properties();    String str;    while ((str=br.readLine()) != null) {      str=str.trim();      if ((!str.startsWith("#")) && (str.length() > 0)) {        int indexOf=str.indexOf("=");        int length=str.length();        String propertyName=str.substring(0,indexOf);        String value="";        int valueStart=indexOf + 1;        if (valueStart == length) {          value="";        } else {          value=str.substring(valueStart,length);        }        properties.setProperty(propertyName,value);      }    }  } catch (  Throwable t) {    throw new Exception("Unable to load property file" + propertyFile,t);  }  return properties;}  }
class C{  public void changeScrollPeriod(int duration){  this.mScrollPeriod=duration;}  }
class C{  private void sendPartiallyMinedBlockToPlayer(EntityPlayerMP p,PartiallyMinedBlock block){  MultiMine.instance().networkHelper.sendPacketToPlayer(new PartialBlockPacket("server",block.getPos().getX(),block.getPos().getY(),block.getPos().getZ(),block.getProgress()),p);}  }
class C{  public void firePaletteEvent(ComponentEvent event){  if (localHackList == null) {    return;  }  palette=(Container)event.getSource();  int eventType=event.getID();  for (  ComponentListener listener : localHackList) {    if (eventType == ComponentEvent.COMPONENT_HIDDEN) {      listener.componentHidden(event);    } else     if (eventType == ComponentEvent.COMPONENT_SHOWN) {      listener.componentShown(event);    }  }  if (eventType == ComponentEvent.COMPONENT_HIDDEN) {    palette=null;  }}  }
class C{  public EaseIn(){}  }
class C{  private void downloadReadingLoop() throws IOException {  final byte[] buffer=new byte[SpeedTestConst.READ_BUFFER_SIZE];  int read;  while ((read=mSocket.getInputStream().read(buffer)) != -1) {    mDownloadTemporaryPacketSize+=read;    if (mRepeatWrapper.isRepeatDownload()) {      mRepeatWrapper.updateTempPacketSize(read);    }    if (!mReportInterval) {      final SpeedTestReport report=mSocketInterface.getLiveDownloadReport();      for (int i=0; i < mListenerList.size(); i++) {        mListenerList.get(i).onDownloadProgress(report.getProgressPercent(),report);      }    }    if (mDownloadTemporaryPacketSize == mDownloadPckSize.longValueExact()) {      break;    }  }}  }
class C{  public long compareAddAndGet(long terminalState,long delta){  while (true) {    long current=get();    if (current == terminalState) {      return terminalState;    }    long newValue=current + delta;    if (compareAndSet(current,newValue)) {      return newValue;    }  }}  }
class C{  public static int unsignedLeb128Size(int value){  int remaining=value >> 7;  int count=0;  while (remaining != 0) {    remaining>>=7;    count++;  }  return count + 1;}  }
class C{  public boolean containsValue(Object value){  if (value == null)   return containsNullValue();  Entry<K,V>[] tab=getTable();  for (int i=tab.length; i-- > 0; )   for (Entry<K,V> e=tab[i]; e != null; e=e.next)   if (value.equals(e.value))   return true;  return false;}  }
class C{  public UserConfig connect(UserConfig config){  this.user=fetch(config);  return this.user;}  }
class C{  public Element store(Object o){  TripleOutputSignalHead p=(TripleOutputSignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.setAttribute("systemName",p.getSystemName());  element.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,element);  element.addContent(addTurnoutElement(p.getGreen(),"green"));  element.addContent(addTurnoutElement(p.getBlue(),"blue"));  element.addContent(addTurnoutElement(p.getRed(),"red"));  return element;}  }
class C{  public double deltaY(){  return sym.orig.y - orig.y;}  }
class C{  public boolean shouldBeRemoved(){  return (System.currentTimeMillis() >= removeTime);}  }
class C{  public static StringBuffer append(StringBuffer target,int char32){  if (char32 < CODEPOINT_MIN_VALUE || char32 > CODEPOINT_MAX_VALUE) {    throw new IllegalArgumentException("Illegal codepoint: " + Integer.toHexString(char32));  }  if (char32 >= SUPPLEMENTARY_MIN_VALUE) {    target.append(getLeadSurrogate(char32));    target.append(getTrailSurrogate(char32));  } else {    target.append((char)char32);  }  return target;}  }
class C{  public void addingEdge(SessionEvent event){  assertTrue(event.getType() == SessionEvent.ADDING_EDGE);  assertNull(event.getParent());  setEvent1Received(true);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public Map<String,AbstractIndex> loadAndGetTaskIdToSegmentsMap(Map<String,List<TableBlockInfo>> segmentToTableBlocksInfos,AbsoluteTableIdentifier absoluteTableIdentifier) throws IndexBuilderException {  Map<String,AbstractIndex> taskIdToTableSegmentMap=new HashMap<String,AbstractIndex>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  addLockObject(absoluteTableIdentifier);  Iterator<Entry<String,List<TableBlockInfo>>> iteratorOverSegmentBlocksInfos=segmentToTableBlocksInfos.entrySet().iterator();  Map<String,Map<String,AbstractIndex>> tableSegmentMapTemp=addTableSegmentMap(absoluteTableIdentifier);  Map<String,AbstractIndex> taskIdToSegmentIndexMap=null;  String segmentId=null;  String taskId=null;  try {    while (iteratorOverSegmentBlocksInfos.hasNext()) {      Entry<String,List<TableBlockInfo>> next=iteratorOverSegmentBlocksInfos.next();      Map<String,List<TableBlockInfo>> taskIdToTableBlockInfoMap=mappedAndGetTaskIdToTableBlockInfo(segmentToTableBlocksInfos);      segmentId=next.getKey();      taskIdToSegmentIndexMap=tableSegmentMapTemp.get(segmentId);      if (taskIdToSegmentIndexMap == null) {        Object segmentLoderLockObject=segmentLockMap.get(segmentId);        if (null == segmentLoderLockObject) {          segmentLoderLockObject=addAndGetSegmentLock(segmentId);        }synchronized (segmentLoderLockObject) {          taskIdToSegmentIndexMap=tableSegmentMapTemp.get(segmentId);          if (null == taskIdToSegmentIndexMap) {            taskIdToSegmentIndexMap=new HashMap<String,AbstractIndex>();            Iterator<Entry<String,List<TableBlockInfo>>> iterator=taskIdToTableBlockInfoMap.entrySet().iterator();            while (iterator.hasNext()) {              Entry<String,List<TableBlockInfo>> taskToBlockInfoList=iterator.next();              taskId=taskToBlockInfoList.getKey();              taskIdToSegmentIndexMap.put(taskId,loadBlocks(taskId,taskToBlockInfoList.getValue(),absoluteTableIdentifier));            }            tableSegmentMapTemp.put(next.getKey(),taskIdToSegmentIndexMap);            segmentLockMap.remove(segmentId);          }        }        taskIdToTableSegmentMap.putAll(taskIdToSegmentIndexMap);      }    }  } catch (  CarbonUtilException e) {    LOGGER.error("Problem while loading the segment");    throw new IndexBuilderException(e);  }  return taskIdToTableSegmentMap;}  }
class C{  public boolean isTagCountDefined(int tagId){  int info=getTagInfo().get(tagId);  if (info == 0) {    return false;  }  return getComponentCountFromInfo(info) != ExifTag.SIZE_UNDEFINED;}  }
class C{  private XML checksClassAbsence(Class<?> aClass){  if (classExists(aClass))   Error.xmlClassExistent(this.xmlPath,aClass);  return this;}  }
class C{  public Builder addPart(Headers headers,RequestBody body){  return addPart(Part.create(headers,body));}  }
class C{  public static double normalPdf(double x,double mu,double sigma) throws Exception {  if (sigma < 0) {    throw new Exception("Standard deviation cannot be < 0");  }  double expArg=(x - mu) / sigma;  expArg*=expArg;  double pdf=Math.pow(2.0 * Math.PI,-0.5) / sigma * Math.exp(-0.5 * expArg);  return pdf;}  }
class C{  public void addJoin(S target,List<S> sources){  this.joins.put(target,sources);}  }
class C{  @Nullable public static String md5(@Nullable File file,@Nullable IgniteLogger log){  if (file != null)   return file.isFile() ? fileMd5(file,log) : directoryMd5(file,log);  return null;}  }
class C{  public static boolean matches(long tid){  return Bits.WAN_TYPE.extract(tid) > 0;}  }
class C{  private Token processHiddenToken(ILeafNode leaf){  Token result=nextToken();  if (result == Token.EOF_TOKEN && Strings.countLineBreaks(leaf.getText()) > 0) {    next=result;    CommonToken hidden=new CommonToken(tokenTypeMapper.getInternalTokenType(leaf),leaf.getText());    hidden.setChannel(Token.HIDDEN_CHANNEL);    return hidden;  }  return result;}  }
class C{  public static String prepareUpdateTemplateWithColumn(String tableName,String[] columnNames,String[] conditions){  return "UPDATE " + tableName + " SET "+ generateAssignmentFields(columnNames,", ")+ " WHERE "+ generateAssignmentFields(conditions," AND ");}  }
class C{  private Builder tag(String tag){  ends.push("</" + tag + ">");  html.a('<').a(tag).a('>');  return this;}  }
class C{  @Override public void handleStart(Operation start){  ServiceUtils.logInfo(this,"Starting service %s",getSelfLink());  State startState=start.getBody(State.class);  InitializationUtils.initialize(startState);  if (null == startState.taskPollDelay) {    startState.taskPollDelay=HostUtils.getDeployerContext(this).getTaskPollDelay();  }  validateState(startState);  if (TaskState.TaskStage.CREATED == startState.taskState.stage) {    startState.taskState.stage=TaskState.TaskStage.STARTED;    startState.taskState.subStage=TaskState.SubStage.UPLOAD_IMAGE;  }  if (startState.documentExpirationTimeMicros <= 0) {    startState.documentExpirationTimeMicros=ServiceUtils.computeExpirationTime(ServiceUtils.DEFAULT_DOC_EXPIRATION_TIME_MICROS);  }  start.setBody(startState).complete();  try {    if (ControlFlags.isOperationProcessingDisabled(startState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping start operation processing (disabled)");    } else     if (TaskState.TaskStage.STARTED == startState.taskState.stage) {      sendStageProgressPatch(startState.taskState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  private boolean hasNextProxy(){  return hasNextProxy;}  }
class C{  public UshrExpr newUshrExpr(Value op1,Value op2){  return new JUshrExpr(op1,op2);}  }
class C{  private void startForm(int AD_Form_ID){  FormFrame ff=null;  if (Ini.isPropertyBool(Ini.P_SINGLE_INSTANCE_PER_WINDOW)) {    ff=m_menu.getWindowManager().findForm(AD_Form_ID);    if (ff != null) {      ff.toFront();      return;    }  }  ff=new FormFrame(m_menu.getGraphicsConfiguration());  SwingUtilities.invokeLater(m_updatePB);  boolean ok=ff.openForm(AD_Form_ID);  if (!ok) {    ff.dispose();    return;  }  m_menu.getWindowManager().add(ff);  SwingUtilities.invokeLater(m_updatePB);  SwingUtilities.invokeLater(m_updatePB);  if (Ini.isPropertyBool(Ini.P_OPEN_WINDOW_MAXIMIZED)) {    AEnv.showMaximized(ff);  } else   AEnv.showCenterScreen(ff);}  }
class C{  protected Map<Object,Object> createElementIndex(){  return createIndex();}  }
class C{  private static void expandFieldArray(Object instance,String fieldName,Object[] extraElements,boolean isHotfix) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  if (isHotfix) {    System.arraycopy(extraElements,0,combined,0,extraElements.length);    System.arraycopy(original,0,combined,extraElements.length,original.length);  } else {    System.arraycopy(original,0,combined,0,original.length);    System.arraycopy(extraElements,0,combined,original.length,extraElements.length);  }  jlrField.set(instance,combined);}  }
class C{  public CompletableFuture<Void> kill(){  return CompletableFuture.runAsync(null,context.executor());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testFsUriOverridesUriInConfiguration() throws Exception {  primaryCfgScheme="foo";  primaryCfgAuthority="moo:zoo@bee";  passPrimaryConfiguration=true;  primaryFsUriStr=mkUri(IGFS_SCHEME,PRIMARY_AUTHORITY);  secondaryCfgScheme="foo";  secondaryCfgAuthority="moo:zoo@bee";  passSecondaryConfiguration=true;  secondaryFsUriStr=mkUri(IGFS_SCHEME,SECONDARY_AUTHORITY);  check();}  }
class C{  public Connection monitor(Connection conn){  return (Connection)monitorJDBC(conn);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.682 -0500",hash_original_method="1F7F0E32648D183A0E0322F85F939567",hash_generated_method="7378C5C87E4A70DA63BC52C05023B2A8") public boolean handleAck(SIPServerTransaction ackTransaction){  SIPRequest sipRequest=ackTransaction.getOriginalRequest();  if (isAckSeen() && getRemoteSeqNumber() == sipRequest.getCSeq().getSeqNumber()) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("ACK already seen by dialog -- dropping Ack" + " retransmission");    }    acquireTimerTaskSem();    try {      if (this.timerTask != null) {        this.timerTask.cancel();        this.timerTask=null;      }    }  finally {      releaseTimerTaskSem();    }    return false;  } else   if (this.getState() == DialogState.TERMINATED) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dialog is terminated -- dropping ACK");    return false;  } else {    SIPServerTransaction tr=getInviteTransaction();    SIPResponse sipResponse=(tr != null ? tr.getLastResponse() : null);    if (tr != null && sipResponse != null && sipResponse.getStatusCode() / 100 == 2 && sipResponse.getCSeq().getMethod().equals(Request.INVITE) && sipResponse.getCSeq().getSeqNumber() == sipRequest.getCSeq().getSeqNumber()) {      ackTransaction.setDialog(this,sipResponse.getDialogId(false));      ackReceived(sipRequest);      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("ACK for 2XX response --- sending to TU ");      return true;    } else {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug(" INVITE transaction not found  -- Discarding ACK");      return false;    }  }}  }
class C{  public static BlockChainConfiguration createBlockChainConfiguration(final int maxTransactionsPerSyncAttempt,final int maxTransactionsPerBlock,final int blockGenerationTargetTime,final int blockChainRewriteLimit,final BlockChainFeature[] blockChainFeatures){  return new BlockChainConfigurationBuilder().setMaxTransactionsPerSyncAttempt(maxTransactionsPerSyncAttempt).setMaxTransactionsPerBlock(maxTransactionsPerBlock).setBlockGenerationTargetTime(blockGenerationTargetTime).setBlockChainRewriteLimit(blockChainRewriteLimit).setBlockChainFeatures(blockChainFeatures).build();}  }
class C{  public static boolean launchDesktopDefaultBrowserAndHandleExceptions(String targetUrl){  if (Desktop.isDesktopSupported()) {    try {      Desktop.getDesktop().browse(new URI(targetUrl));      return true;    } catch (    Exception ex) {      CorePluginLog.logError(ex,"There was an error launching the desktop default browser.");    }  }  return false;}  }
class C{  public void testReadSimpleRootValue() throws Exception {  String json="[false,\"Bubba\",1,2]";  FlatPojo p=MAPPER.readValue(json,FlatPojo.class);  assertFalse(p.complete);  assertEquals("Bubba",p.name);  assertEquals(1,p.x);  assertEquals(2,p.y);}  }
class C{  public CLoadModuleAction(final JTree projectTree,final INaviModule[] modules){  super(generateActionString(modules));  m_projectTree=Preconditions.checkNotNull(projectTree,"IE01901: Project tree argument can not be null");  m_modules=Preconditions.checkNotNull(modules,"IE01902: Modules argument can't be null").clone();  for (  final INaviModule module : modules) {    Preconditions.checkNotNull(module,"IE01903: Modules list contains a null-element");  }  putValue(ACCELERATOR_KEY,HotKeys.LOAD_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_LOAD_MODULE".charAt(0));}  }
class C{  public boolean isExported(){  EObject _eContainer=this.eContainer();  return (_eContainer instanceof ExportDeclaration);}  }
class C{  public static Query asQuery(Resource resource){  if (resource.canAs(Select.class)) {    return resource.as(Select.class);  } else   if (resource.canAs(Construct.class)) {    return resource.as(Construct.class);  } else   if (resource.canAs(Ask.class)) {    return resource.as(Ask.class);  } else   if (resource.canAs(Describe.class)) {    return resource.as(Describe.class);  } else {    return null;  }}  }
class C{  static void transformKillSlot(final RPObject object){  final RPObject kills=KeyedSlotUtil.getKeyedSlotObject(object,"!kills");  if (kills != null) {    final RPObject newKills=new RPObject();    for (    final String attr : kills) {      if (!attr.equals("id")) {        String newAttr=attr;        String value=kills.get(attr);        if (attr.indexOf('.') < 0) {          newAttr=updateItemName(newAttr);          newAttr=value + "." + newAttr;          value="1";        }        newKills.put(newAttr,value);      }    }    final RPSlot slot=object.getSlot("!kills");    slot.remove(kills.getID());    slot.add(newKills);  }}  }
class C{  private void saveData(ICallback callback){  Log.d(LOG_TAG,"saveData()");  note=db.updateNoteAndSync(note,getContent(),callback);}  }
class C{  public BinomialMinPQ<Key> union(BinomialMinPQ<Key> heap){  if (heap == null)   throw new IllegalArgumentException("Cannot merge a Binomial Heap with null");  this.head=merge(new Node(),this.head,heap.head).sibling;  Node x=this.head;  Node prevx=null, nextx=x.sibling;  while (nextx != null) {    if (x.order < nextx.order || (nextx.sibling != null && nextx.sibling.order == x.order)) {      prevx=x;      x=nextx;    } else     if (greater(nextx.key,x.key)) {      x.sibling=nextx.sibling;      link(nextx,x);    } else {      if (prevx == null) {        this.head=nextx;      } else {        prevx.sibling=nextx;      }      link(x,nextx);      x=nextx;    }    nextx=x.sibling;  }  return this;}  }
class C{  @Override public Result applyOnce(final IIndex ndx,final IRaba keys,final IRaba vals){  final boolean DEBUG=log.isDebugEnabled();  final int numTerms=keys.size();  assert numTerms > 0 : "numTerms=" + numTerms;  @SuppressWarnings("rawtypes") final IV[] ivs=new IV[numTerms];  final ICounter counter=ndx.getCounter();  @SuppressWarnings("resource") final DataOutputBuffer idbuf=new DataOutputBuffer();  final TermIdEncoder encoder=readOnly ? null : scaleOutTermIdBitsToReverse == 0 ? null : new TermIdEncoder(scaleOutTermIdBitsToReverse);  int nnew=0;  for (int i=0; i < numTerms; i++) {    final byte[] key=keys.get(i);    final byte code=key[0];    if (!storeBlankNodes && code == ITermIndexCodes.TERM_CODE_BND) {      if (readOnly) {        ivs[i]=null;      } else {        final long ctr=counter.incrementAndGet();        final long termId=encoder == null ? ctr : encoder.encode(ctr);        ivs[i]=new TermId(VTE(code),termId);      }    } else {      final byte[] tmp=ndx.lookup(key);      if (tmp == null) {        if (readOnly) {          ivs[i]=null;        } else {          final long ctr=counter.incrementAndGet();          final long termId=encoder == null ? ctr : encoder.encode(ctr);          @SuppressWarnings("rawtypes") final TermId<?> iv=new TermId(VTE(code),termId);          if (DEBUG && enableGroundTruth) {            groundTruthTest(key,termId,ndx,counter);          }          final byte[] bytes=iv.encode(KeyBuilder.newInstance()).getKey();          idbuf.reset().write(bytes);          if (ndx.insert(key,idbuf.toByteArray()) != null) {            throw new AssertionError();          }          nnew++;          ivs[i]=iv;        }      } else {        ivs[i]=IVUtility.decode(tmp);      }    }  }  return new Result(ivs);}  }
class C{  public Enumeration<Permission> elements(){synchronized (this) {    return Collections.enumeration(permsMap.values());  }}  }
class C{  public static boolean isTerminal(String s){  for (int i=0; i < s.length(); i++) {    if (!Character.isLowerCase(s.charAt(i))) {      return false;    }  }  return true;}  }
class C{  void updateClipToTaskBar(View taskBar){  mTaskBar=taskBar;  int top=(int)Math.max(0,taskBar.getTranslationY() + taskBar.getMeasuredHeight() - 1);  mClipRect.set(0,top,getMeasuredWidth(),getMeasuredHeight());  setClipBounds(mClipRect);}  }
class C{  private void initialize(){  ws=WebSocket.create(url);  wsListener=new WsListener();  ws.setOnMessageHandler(this);  ws.setOnOpenHandler(wsListener);  ws.setOnCloseHandler(wsListener);  ws.setOnErrorHandler(wsListener);}  }
class C{  public NotificationChain basicSetPattern(BindingPattern newPattern,NotificationChain msgs){  BindingPattern oldPattern=pattern;  pattern=newPattern;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.VARIABLE_BINDING__PATTERN,oldPattern,newPattern);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void beforeRouting(){  long printStats=System.currentTimeMillis();  ProcessInfo processInfo=this.statisticManager.newProcessInfo(new ProcessInfoKey(nodeService.findIdentityNodeId(),null,ProcessType.GAP_DETECT));  try {    long ts=System.currentTimeMillis();    processInfo.setStatus(Status.QUERYING);    final List<DataGap> gaps=dataService.findDataGaps();    long lastDataId=-1;    final int dataIdIncrementBy=parameterService.getInt(ParameterConstants.DATA_ID_INCREMENT_BY);    final long maxDataToSelect=parameterService.getLong(ParameterConstants.ROUTING_LARGEST_GAP_SIZE);    final long gapTimoutInMs=parameterService.getLong(ParameterConstants.ROUTING_STALE_DATA_ID_GAP_TIME);    long databaseTime=symmetricDialect.getDatabaseTime();    int idsFilled=0;    int newGapsInserted=0;    int rangeChecked=0;    int gapsDeleted=0;    Set<DataGap> gapCheck=new HashSet<DataGap>(gaps);    boolean supportsTransactionViews=symmetricDialect.supportsTransactionViews();    long earliestTransactionTime=0;    if (supportsTransactionViews) {      Date date=symmetricDialect.getEarliestTransactionStartTime();      if (date != null) {        earliestTransactionTime=date.getTime() - parameterService.getLong(ParameterConstants.DBDIALECT_ORACLE_TRANSACTION_VIEW_CLOCK_SYNC_THRESHOLD_MS,60000);      }    }    for (    final DataGap dataGap : gaps) {      final boolean lastGap=dataGap.equals(gaps.get(gaps.size() - 1));      String sql=routerService.getSql("selectDistinctDataIdFromDataEventUsingGapsSql");      ISqlTemplate sqlTemplate=symmetricDialect.getPlatform().getSqlTemplate();      Object[] params=new Object[]{dataGap.getStartId(),dataGap.getEndId()};      lastDataId=-1;      processInfo.setStatus(Status.QUERYING);      long queryForIdsTs=System.currentTimeMillis();      List<Number> ids=sqlTemplate.query(sql,new NumberMapper(),params);      if (System.currentTimeMillis() - queryForIdsTs > Constants.LONG_OPERATION_THRESHOLD) {        log.info("It took longer than {}ms to run the following sql for gap from {} to {}.  {}",new Object[]{Constants.LONG_OPERATION_THRESHOLD,dataGap.getStartId(),dataGap.getEndId(),sql});      }      processInfo.setStatus(Status.PROCESSING);      idsFilled+=ids.size();      rangeChecked+=dataGap.getEndId() - dataGap.getStartId();      ISqlTransaction transaction=null;      try {        transaction=sqlTemplate.startSqlTransaction();        for (        Number number : ids) {          long dataId=number.longValue();          processInfo.incrementCurrentDataCount();          if (lastDataId == -1 && dataGap.getStartId() + dataIdIncrementBy <= dataId) {            DataGap newGap=new DataGap(dataGap.getStartId(),dataId - 1);            if (!gapCheck.contains(newGap)) {              dataService.insertDataGap(transaction,newGap);              gapCheck.add(newGap);            }            newGapsInserted++;          } else           if (lastDataId != -1 && lastDataId + dataIdIncrementBy != dataId && lastDataId != dataId) {            DataGap newGap=new DataGap(lastDataId + 1,dataId - 1);            if (!gapCheck.contains(newGap)) {              dataService.insertDataGap(transaction,newGap);              gapCheck.add(newGap);            }            newGapsInserted++;          }          lastDataId=dataId;        }        if (lastDataId != -1) {          if (!lastGap && lastDataId + dataIdIncrementBy <= dataGap.getEndId()) {            DataGap newGap=new DataGap(lastDataId + dataIdIncrementBy,dataGap.getEndId());            if (!gapCheck.contains(newGap)) {              dataService.insertDataGap(transaction,newGap);              gapCheck.add(newGap);            }            newGapsInserted++;          }          dataService.deleteDataGap(transaction,dataGap);          gapsDeleted++;        } else         if (!lastGap) {          Date createTime=dataGap.getCreateTime();          if (supportsTransactionViews) {            if (createTime != null && (createTime.getTime() < earliestTransactionTime || earliestTransactionTime == 0)) {              if (dataService.countDataInRange(dataGap.getStartId() - 1,dataGap.getEndId() + 1) == 0) {                if (dataGap.getStartId() == dataGap.getEndId()) {                  log.info("Found a gap in data_id at {}.  Skipping it because there are no pending transactions in the database",dataGap.getStartId());                } else {                  log.info("Found a gap in data_id from {} to {}.  Skipping it because there are no pending transactions in the database",dataGap.getStartId(),dataGap.getEndId());                }                dataService.deleteDataGap(transaction,dataGap);                gapsDeleted++;              }            }          } else           if (createTime != null && databaseTime - createTime.getTime() > gapTimoutInMs) {            if (dataService.countDataInRange(dataGap.getStartId() - 1,dataGap.getEndId() + 1) == 0) {              if (dataGap.getStartId() == dataGap.getEndId()) {                log.info("Found a gap in data_id at {}.  Skipping it because the gap expired",dataGap.getStartId());              } else {                log.info("Found a gap in data_id from {} to {}.  Skipping it because the gap expired",dataGap.getStartId(),dataGap.getEndId());              }              dataService.deleteDataGap(transaction,dataGap);              gapsDeleted++;            }          }        }        if (System.currentTimeMillis() - printStats > 30000) {          log.info("The data gap detection process has been running for {}ms, detected {} rows that have been previously routed over a total gap range of {}, " + "inserted {} new gaps, and deleted {} gaps",new Object[]{System.currentTimeMillis() - ts,idsFilled,rangeChecked,newGapsInserted,gapsDeleted});          printStats=System.currentTimeMillis();        }        transaction.commit();      } catch (      Error ex) {        if (transaction != null) {          transaction.rollback();        }        throw ex;      }catch (      RuntimeException ex) {        if (transaction != null) {          transaction.rollback();        }        throw ex;      } finally {        if (transaction != null) {          transaction.close();        }      }    }    if (lastDataId != -1) {      DataGap newGap=new DataGap(lastDataId + 1,lastDataId + maxDataToSelect);      if (!gapCheck.contains(newGap)) {        dataService.insertDataGap(newGap);        gapCheck.add(newGap);      }    }    long updateTimeInMs=System.currentTimeMillis() - ts;    if (updateTimeInMs > 10000) {      log.info("Detecting gaps took {} ms",updateTimeInMs);    }    processInfo.setStatus(Status.OK);  } catch (  RuntimeException ex) {    processInfo.setStatus(Status.ERROR);    throw ex;  }}  }
class C{  public Parser(String encoding){  int mc=0, ic=0, dc=0;  char[] decoded=RunLengthEncoding.decode(encoding).toCharArray();  for (  char c : decoded) {switch (c) {case MATCH_CHAR:{        mc++;        break;      }case INSERT_CHAR:{      ic++;      break;    }case DELETE_CHAR:{    dc++;    break;  }}}matchCount=mc;insertCount=ic;deleteCount=dc;}  }
class C{  public boolean equals(Time that){  return this.hour == that.hour && this.minute == that.minute && this.second == that.second;}  }
class C{  @Override public void finishTerm(BlockTermState _state) throws IOException {  if (lastDocID == -1) {    return;  }  IDVersionTermState state=(IDVersionTermState)_state;  assert state.docFreq > 0;  state.docID=lastDocID;  state.idVersion=lastVersion;}  }
class C{  @Override public void mark(int readAheadLimit) throws IOException {  ensureOpen();  markedPos=pos;}  }
class C{  public UnregisterRepositoryRequest(String cause,String name){  this.cause=cause;  this.name=name;}  }
class C{  public synchronized void execute(String sql,Object[] values) throws DataAccessException {  jdbcTemplate.update(sql,values);}  }
class C{  public void copyFrom(Path other){  grow(other.length - 1);  System.arraycopy(other.blockIdList,0,this.blockIdList,0,other.length);  this.length=other.length;  this.cachedHashCode=other.cachedHashCode;}  }
class C{  public static double pdf(double val,double alpha,double beta){  if (alpha <= 0. || beta <= 0. || Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(val)) {    return Double.NaN;  }  if (val < 0. || val > 1.) {    return 0.;  }  if (val == 0.) {    return (alpha > 1.) ? 0. : (alpha < 1.) ? Double.POSITIVE_INFINITY : beta;  }  if (val == 1.) {    return (beta > 1.) ? 0. : (beta < 1.) ? Double.POSITIVE_INFINITY : alpha;  }  return Math.exp(-logBeta(alpha,beta) + Math.log(val) * (alpha - 1) + Math.log1p(-val) * (beta - 1));}  }
class C{  public final void testClone01(){  Vector<Certificate> certificates=new Vector<Certificate>();  certificates.add(new MyCertificate("TEST",new byte[]{(byte)4}));  CollectionCertStoreParameters cp1=new CollectionCertStoreParameters(certificates);  CollectionCertStoreParameters cp2=(CollectionCertStoreParameters)cp1.clone();  assertTrue(cp1 != cp2);}  }
class C{  public final CC width(String size){  hor.setSize(ConstraintParser.parseBoundSize(size,false,true));  return this;}  }
class C{  public Global(Interpreter interp,String lang){  super(interp,lang);}  }
class C{  public void removeAccessibleSelection(int i){  JList.this.removeSelectionInterval(i,i);}  }
class C{  public void loadLocal(final int local,final Type type){  setLocalType(local,type);  loadInsn(type,local);}  }
class C{  public boolean contains(final double VALUE){  return (Double.compare(VALUE,getStart()) >= 0 && Double.compare(VALUE,getStop()) <= 0);}  }
class C{  @Deprecated public void loadNetwork(){  String networkFileName=null;  if ((this.config.network() != null) && (this.config.network().getInputFile() != null)) {    networkFileName=this.config.network().getInputFile();    log.info("loading network from " + networkFileName);    Network network=(Network)this.scenario.getNetwork();    if (this.config.network().isTimeVariantNetwork()) {      log.info("use TimeVariantLinks in NetworkFactory.");      network.getFactory().setLinkFactory(new VariableIntervalTimeVariantLinkFactory());    }    new MatsimNetworkReader(this.scenario.getNetwork()).readFile(networkFileName);    if ((this.config.network().getChangeEventsInputFile() != null) && this.config.network().isTimeVariantNetwork()) {      log.info("loading network change events from " + this.config.network().getChangeEventsInputFileUrl(this.config.getContext()).getFile());      List<NetworkChangeEvent> changeEvents=new ArrayList<>();      NetworkChangeEventsParser parser=new NetworkChangeEventsParser(network,changeEvents);      parser.parse(this.config.network().getChangeEventsInputFileUrl(config.getContext()));      NetworkUtils.setNetworkChangeEvents(network,changeEvents);    }  }}  }
class C{  public <T extends Entry>void walk(Entry start,RepositoryVisitor<T> visitor,Class<T> visitedType) throws RepositoryException {  boolean continueChildren=true;  if (visitedType.isInstance(start)) {    continueChildren&=visitor.visit(visitedType.cast(start));  }  if (continueChildren && start instanceof Folder) {    Folder folder=(Folder)start;    for (    Entry child : folder.getDataEntries()) {      walk(child,visitor,visitedType);    }    for (    Folder childFolder : folder.getSubfolders()) {      walk(childFolder,visitor,visitedType);    }  }}  }
class C{  private Base64(){}  }
class C{  CSSElement parseCSSSegment(Reader isr,InputStream is,HTMLComponent htmlC,String pageURL) throws IOException {  CSSElement addTo=new CSSElement("style");  ExtInputStreamReader r=new ExtInputStreamReader(isr);  DocumentInfo docInfo=null;  String encoding=htmlC.getDocumentInfo() != null ? htmlC.getDocumentInfo().getEncoding() : null;  String token=nextToken(r,true,false,true,false);  while (token.startsWith("@")) {    if (token.equals("@import")) {      token=nextToken(r,true,true,true,true);      String url=getImportURLByMediaType(token);      if (url != null) {        if (docInfo == null) {          docInfo=pageURL == null ? htmlC.getDocumentInfo() : new DocumentInfo(pageURL);        }        if (docInfo != null) {          htmlC.getThreadQueue().addCSS(docInfo.convertURL(url),encoding);        } else {          if (DocumentInfo.isAbsoluteURL(url)) {            htmlC.getThreadQueue().addCSS(url,encoding);          } else {            notifyError(CSSParserCallback.ERROR_CSS_NO_BASE_URL,"@import",null,url,"Ignoring CSS file referred in an @import rule (" + url + "), since page was set by setBody/setHTML/setDOM so there's no way to access relative URLs");          }        }      }    } else     if (token.equals("@media")) {      ExtInputStreamReader mediaReader=getMediaSegment(r,encoding,htmlC);      if (mediaReader != null) {        parseCSS(mediaReader,htmlC,addTo,null);      }    } else     if (token.equals("@charset")) {      token=CSSEngine.omitQuotesIfExist(nextToken(r,true,false,true,false));      if (is != null) {        try {          ExtInputStreamReader encodedReader=new ExtInputStreamReader(new InputStreamReader(is,token));          r=encodedReader;          encoding=token;        } catch (        UnsupportedEncodingException uee) {          notifyError(ParserCallback.ERROR_ENCODING,"@charset",null,token,"External CSS encoding @charset " + token + " directive failed: "+ uee.getMessage());        }      }    }    token=nextToken(r,true,false,true,false);  }  return parseCSS(r,htmlC,addTo,token);}  }
class C{  public static void enqueueMonitoringJob(DataCollectionJob job) throws Exception {  _monitoringJobQueue.put(job);  _log.info("Queued Monitoring Job");}  }
class C{  public boolean forEachValue(TDoubleProcedure procedure){  byte[] states=_states;  double[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  protected void initialize(){  levels=new int[256];  if (numLevels != 1)   for (int i=0; i < 256; i++)   levels[i]=255 * (numLevels * i / 256) / (numLevels - 1);}  }
class C{  public void colorMode(int mode,float maxX,float maxY,float maxZ){  colorMode(mode,maxX,maxY,maxZ,colorModeA);}  }
