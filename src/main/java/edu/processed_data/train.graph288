class C{  @Override public boolean isMovable(){  return true;}  }
class C{  private void validateConfiguredParameters(List<VOTriggerProcessParameter> parameters,TriggerProcess triggerProcess) throws ValidationException {  VOService service=null;  for (  VOTriggerProcessParameter parameter : parameters) {    if (TriggerProcessParameterType.PRODUCT.equals(parameter.getType())) {      service=(VOService)parameter.getValue();      updateParameterDefinitions(triggerProcess,service);      break;    }  }  if (service != null) {    for (    VOParameter serviceParameter : service.getParameters()) {      ValidationPerformer.validate(serviceParameter.getParameterDefinition().getValueType(),serviceParameter);    }  }}  }
class C{  public CacheExistsException(Cache cache,String msg,Throwable cause){  super(msg,cause);  this.cache=cache;}  }
class C{  public void convertAutoIncrementToSequence(Session session,Schema schema,int id,boolean temporary){  if (!autoIncrement) {    DbException.throwInternalError();  }  if ("IDENTITY".equals(originalSQL)) {    originalSQL="BIGINT";  } else   if ("SERIAL".equals(originalSQL)) {    originalSQL="INT";  }  String sequenceName;  while (true) {    ValueUuid uuid=ValueUuid.getNewRandom();    String s=uuid.getString();    s=s.replace('-','_').toUpperCase();    sequenceName="SYSTEM_SEQUENCE_" + s;    if (schema.findSequence(sequenceName) == null) {      break;    }  }  Sequence seq=new Sequence(schema,id,sequenceName,start,increment);  seq.setTemporary(temporary);  session.getDatabase().addSchemaObject(session,seq);  setAutoIncrement(false,0,0);  SequenceValue seqValue=new SequenceValue(seq);  setDefaultExpression(session,seqValue);  setSequence(seq);}  }
class C{  protected void fireSelectionChange(Object object,String[] properties){  for (  StructuredViewer listener : listeners) {    listener.update(object,properties);  }}  }
class C{  private static void populateSingleMockMetric(String metricName,double latestValue,String unit,Map<String,List<ServiceStat>> statsMap){  ServiceStat stat=new ServiceStat();  stat.latestValue=latestValue;  stat.unit=AWSStatsNormalizer.getNormalizedUnitValue(unit);  List<ServiceStat> statDatapoints=new ArrayList<>();  statDatapoints.add(stat);  statsMap.put(metricName,statDatapoints);}  }
class C{  @Override protected void onException(final Throwable e,Object... params){  StringBuffer message=new StringBuffer();  message.append(mDebugPrefix).append("onException(");  for (  Object param : params) {    if (param != null) {      message.append(param).append(" ");    }  }  message.append("): ").append(e.getMessage());  Log.e(Global.LOG_CONTEXT,message.toString(),e);}  }
class C{  public static boolean createDirectory(@NonNull File file){  return FileUtil.makeDir(file);}  }
class C{  public boolean removeNode(Node n){  nodeCheck(n,true);  return removeNode(n.getRow());}  }
class C{  public BatchIterableProcedureFJTask(BatchIterableProcedureFJTaskRunner<T,BT> newFJTaskRunner,ProcedureFactory<BT> procedureFactory,BatchIterable<T> iterable,int index,int count){  this.taskRunner=newFJTaskRunner;  this.procedureFactory=procedureFactory;  this.iterable=iterable;  this.sectionIndex=index;  this.sectionCount=count;}  }
class C{  private RawProtein<PrintsRawMatch> processProtein(final RawProtein<PrintsRawMatch> rawProteinUnfiltered){  final RawProtein<PrintsRawMatch> filteredMatches=new RawProtein<PrintsRawMatch>(rawProteinUnfiltered.getProteinIdentifier());  final Set<PrintsRawMatch> sortedRawMatches=new TreeSet<PrintsRawMatch>(PrintsFilteredMatchDAOImpl.PRINTS_RAW_MATCH_COMPARATOR);  sortedRawMatches.addAll(rawProteinUnfiltered.getMatches());  LOGGER.debug("New 'sortedRawMatches' set contains " + sortedRawMatches.size() + " matches.");  String currentModelAccession=null;  Set<PrintsRawMatch> motifMatchesForCurrentModel=new HashSet<PrintsRawMatch>();  boolean currentMatchesPass=true;  FingerPRINTSHierarchyDBParser.HierachyDBEntry currentHierachyDBEntry=null;  final List<String> hierarchyModelIDLimitation=new ArrayList<String>(allPrintsModelIDs);  for (  PrintsRawMatch rawMatch : sortedRawMatches) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Iterating over sorted raw matches.  Currently looking at protein " + rawProteinUnfiltered.getProteinIdentifier() + " model "+ rawMatch.getModelId());    }    if (currentModelAccession == null || !currentModelAccession.equals(rawMatch.getModelId())) {      if (currentMatchesPass && currentModelAccession != null) {        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("In processProtein method, calling filterModelMatches for protein " + rawProteinUnfiltered.getProteinIdentifier() + " and model "+ currentModelAccession);        }        filteredMatches.addAllMatches(filterModelMatches(motifMatchesForCurrentModel,currentHierachyDBEntry,hierarchyModelIDLimitation));      }      currentMatchesPass=true;      motifMatchesForCurrentModel.clear();      currentModelAccession=rawMatch.getModelId();      currentHierachyDBEntry=printsModelData.get(currentModelAccession);      if (currentHierachyDBEntry == null) {        throw new IllegalStateException("There is no entry in the FingerPRINThierarchy.db file for model accession " + rawMatch.getModelId());      }    }    if (currentMatchesPass)     currentMatchesPass=rawMatch.getEvalue() <= currentHierachyDBEntry.getEvalueCutoff();    if (currentMatchesPass)     motifMatchesForCurrentModel.add(rawMatch);  }  if (currentMatchesPass) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("In processProtein method, calling filterModelMatches for protein " + rawProteinUnfiltered.getProteinIdentifier() + " and model "+ currentModelAccession);    }    filteredMatches.addAllMatches(filterModelMatches(motifMatchesForCurrentModel,currentHierachyDBEntry,hierarchyModelIDLimitation));  }  return filteredMatches;}  }
class C{  static private void removeEmptyChildGroups(final GraphPatternGroup<?> op){  int n=op.arity();  for (int i=0; i < n; i++) {    final BOp child=op.get(i);    if (!(child instanceof GroupNodeBase<?>))     continue;    if (((GroupNodeBase<?>)child).getContext() != null) {      continue;    }    if (child.arity() == 0) {      op.removeArg(child);      n--;    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.ARRAY__EXPRS:    setExprs((ExpressionList)null);  return;}super.eUnset(featureID);}  }
class C{  private SpreadsheetApiDemo(){}  }
class C{  public void testLoadingWithSubstitutions() throws Exception {  Properties props=new Properties();  props.setProperty("a","a");  props.setProperty("b1","a$");  props.setProperty("b2","a$a");  props.setProperty("c1","a${");  props.setProperty("c2","a${a");  props.setProperty("d1","a${}");  props.setProperty("d2","a${e");  props.setProperty("e1","_${e1sys}_");  props.setProperty("e2","${test.test}");  props.setProperty("e3","${novalue}");  props.setProperty("e4","${no value}");  System.setProperty("e1sys","testLoadingWithSubstitutions");  System.setProperty("test.test","e2");  TungstenProperties.substituteSystemValues(props);  Assert.assertEquals("a",props.getProperty("a"));  Assert.assertEquals("a$",props.getProperty("b1"));  Assert.assertEquals("a$a",props.getProperty("b2"));  Assert.assertEquals("a${",props.getProperty("c1"));  Assert.assertEquals("a${a",props.getProperty("c2"));  Assert.assertEquals("a${}",props.getProperty("d1"));  Assert.assertEquals("a${e",props.getProperty("d2"));  Assert.assertEquals("_testLoadingWithSubstitutions_",props.getProperty("e1"));  Assert.assertEquals("e2",props.getProperty("e2"));  Assert.assertEquals("${novalue}",props.getProperty("e3"));  Assert.assertEquals("${no value}",props.getProperty("e4"));}  }
class C{  public static final String writeTime(double seconds,final String timeformat,final char separator){  if (seconds < 0) {    if (seconds == UNDEFINED_TIME)     return "undefined";    return "-" + writeTime(Math.abs(seconds),timeformat,separator);  }  int day=(int)(seconds / MIDNIGHT);  seconds%=MIDNIGHT;  if (TIMEFORMAT_EEESSSS.equals(timeformat))   return Week.getDayName(day) + "," + Long.toString((long)(seconds));  double s=seconds;  long h=(long)(s / 3600);  s=s % 3600;  int m=(int)(s / 60);  s=s % 60;  StringBuilder str=new StringBuilder(10);  if (h < timeElements.length) {    str.append(timeElements[(int)h]);  } else {    str.append(Long.toString(h));  }  str.append(separator);  str.append(timeElements[m]);  if (TIMEFORMAT_EEEHHMM.equals(timeformat)) {    return Week.getDayName(day) + "," + str.toString();  }  if (TIMEFORMAT_EEEHHMMSS.equals(timeformat)) {    str.append(separator);    str.append(timeElements[(int)s]);    return Week.getDayName(day) + "," + str.toString();  }  if (TIMEFORMAT_HHMMSSDOTSS.equals(timeformat)) {    str.append(separator);    if (s < 10.) {      str.append("0");    }    str.append(s);    return Week.getDayName(day) + "," + str.toString();  }  throw new IllegalArgumentException("The time format (" + timeformat + ") is not known.");}  }
class C{  public void replace(String statement) throws CannotCompileException {  thisClass.getClassFile();  ConstPool constPool=getConstPool();  int pos=currentPos;  int index=iterator.u16bitAt(pos + 1);  Javac jc=new Javac(thisClass);  ClassPool cp=thisClass.getClassPool();  CodeAttribute ca=iterator.get();  try {    CtClass[] params=new CtClass[]{cp.get(javaLangObject)};    CtClass retType=CtClass.booleanType;    int paramVar=ca.getMaxLocals();    jc.recordParams(javaLangObject,params,true,paramVar,withinStatic());    int retVar=jc.recordReturnType(retType,true);    jc.recordProceed(new ProceedForInstanceof(index));    jc.recordType(getType());    checkResultValue(retType,statement);    Bytecode bytecode=jc.getBytecode();    storeStack(params,true,paramVar,bytecode);    jc.recordLocalVariables(ca,pos);    bytecode.addConstZero(retType);    bytecode.addStore(retVar,retType);    jc.compileStmnt(statement);    bytecode.addLoad(retVar,retType);    replace0(pos,bytecode,3);  } catch (  CompileError e) {    throw new CannotCompileException(e);  }catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  BadBytecode e) {    throw new CannotCompileException("broken method");  }}  }
class C{  private void doubleList(){  E[] tempList=(E[])new Object[list.length * 2];  System.arraycopy(list,0,tempList,0,list.length);  list=tempList;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_INTERFACE_DECLARATION___GET_DEFINED_TYPE_AS_INTERFACE:    return getDefinedTypeAsInterface();case N4JSPackage.N4_INTERFACE_DECLARATION___GET_SUPER_CLASSIFIER_REFS:  return getSuperClassifierRefs();case N4JSPackage.N4_INTERFACE_DECLARATION___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:return getImplementedOrExtendedInterfaceRefs();}return super.eInvoke(operationID,arguments);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @SuppressWarnings("rawtypes") private List safeLdapSearch(final String base,final String ldapQuery,final SearchControls searchControls,final AttributesMapper mapper,ValidationFailureReason[] failureReason){  try {    _log.debug("Ldap query to get user's attributes is {}",ldapQuery);    return doLdapSearch(base,ldapQuery,searchControls,mapper);  } catch (  AuthenticationException e) {    _log.error("Caught authentication exception connecting to ldap server",e);    failureReason[0]=ValidationFailureReason.LDAP_MANAGER_AUTH_FAILED;    return null;  }}  }
class C{  public void onShowSnackbar(String msg,View parentView,int duration){  showSnackbar(msg,parentView,duration);}  }
class C{  public ProjectBuildException(String message){  super(message);}  }
class C{  public static Geometry bufferOp(Geometry g,double distance,BufferParameters params){  BufferOp bufOp=new BufferOp(g,params);  Geometry geomBuf=bufOp.getResultGeometry(distance);  return geomBuf;}  }
class C{  private void preMessageArrived(DMessage msg,DProtocol which){switch (msg.getType()) {case DMessage.InIsolate:    m_lastPreIsolate=(int)msg.getDWord();  break;case DMessage.InAskBreakpoints:case DMessage.InBreakAt:case DMessage.InBreakAtExt:{  if (m_lastPreIsolate == Isolate.DEFAULT_ID)   m_isHalted=true; else   updateHaltIsolateStatus(m_lastPreIsolate,true);  break;}}}  }
class C{  public static double nextLogistic(RandomEngine randomGenerator){  double u=randomGenerator.raw();  return (-Math.log(1.0 / u - 1.0));}  }
class C{  public static void decodeProperties(Set<PropertyCriteria> properties,String encoded){  if (encoded != null && !encoded.trim().isEmpty()) {    StringTokenizer st=new StringTokenizer(encoded,",");    while (st.hasMoreTokens()) {      String token=st.nextToken();      String[] parts=token.split("[|]");      if (parts.length >= 2) {        String name=parts[0].trim();        String value=parts[1].trim();        Operator op=Operator.HAS;        if (parts.length > 2) {          op=Operator.valueOf(parts[2].trim());        }        log.tracef("Extracted property name [%s] value [%s] operator [%s]",name,value,op);        properties.add(new PropertyCriteria(name,value,op));      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  NamedNodeMap addrAttr;  Node attrNode;  String attrName;  java.util.Collection attrList=new java.util.ArrayList();  java.util.Collection expected=new java.util.ArrayList();  expected.add("domestic");  expected.add("street");  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(2);  addrAttr=testAddr.getAttributes();  for (int indexN1005C=0; indexN1005C < addrAttr.getLength(); indexN1005C++) {    attrNode=(Node)addrAttr.item(indexN1005C);    attrName=attrNode.getNodeName();    attrList.add(attrName);  }  assertEquals("nodeElementNodeValueAssert1",expected,attrList);}  }
class C{  public void onProgressed(CaptureResult partialResult){}  }
class C{  public CreateTimeSeriesDataAction(DataEditor editor){  super("Time Series Data");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public boolean forEachKey(TDoubleProcedure procedure){  return forEach(procedure);}  }
class C{  protected void clearMod2Rbfll(){  mod2=mod2 & ~MOD2_RBFLL_MASK;}  }
class C{  public String buildFilePath(int x,int y,int z,String fileExt){  TilePathBuilder pathBuilder=getTilePathBuilder();  if (pathBuilder == null) {    pathBuilder=new TilePathBuilder(rootDir);    setTilePathBuilder(pathBuilder);  }  return pathBuilder.buildTilePath(x,y,z,fileExt);}  }
class C{  @Override public void kill(Session session) throws SQLException, ReplicatorException {  if (!isPrivileged()) {    throw new ReplicatorException("Attempt to issue a kill command on a non-privileged connection");  }  String sql=String.format("kill %s",session.getIdentifier());  execute(sql);}  }
class C{  void send404(PrintStream ps) throws IOException {  ps.println("Not Found\n\n" + "The requested resource was not found.\n");}  }
class C{  void error(String msg){  System.err.println("Error: " + msg);  errors++;}  }
class C{  public boolean isBatchProcessing(){  return isBatchProcessing;}  }
class C{  protected Object[] toArray(LoggingEvent event,Monitor mon){  Object[] data=log4jHeader.getData(mon);  data[0]=mon.getMonKey().getDetails();  data[1]=event.getLoggerName();  data[2]=event.getLevel().toString();  data[3]=event.getThreadName();  data[4]=(event.getThrowableInformation() == null || event.getThrowableInformation().getThrowable() == null) ? "" : Misc.getExceptionTrace(event.getThrowableInformation().getThrowable());  return data;}  }
class C{  public UserEntry createUser(String username,String givenName,String familyName,String password,String passwordHashFunction,Integer quotaLimitInMb) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Creating user '" + username + "'. Given Name: '"+ givenName+ "' Family Name: '"+ familyName+ (passwordHashFunction != null ? "' Hash Function: '" + passwordHashFunction : "")+ (quotaLimitInMb != null ? "' Quota Limit: '" + quotaLimitInMb + "'." : "'."));  UserEntry entry=new UserEntry();  Login login=new Login();  login.setUserName(username);  login.setPassword(password);  if (passwordHashFunction != null) {    login.setHashFunctionName(passwordHashFunction);  }  entry.addExtension(login);  Name name=new Name();  name.setGivenName(givenName);  name.setFamilyName(familyName);  entry.addExtension(name);  if (quotaLimitInMb != null) {    Quota quota=new Quota();    quota.setLimit(quotaLimitInMb);    entry.addExtension(quota);  }  URL insertUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION);  return userService.insert(insertUrl,entry);}  }
class C{  @Override public byte[] dataToRGBByteArray(final byte[] data,final int w,final int h){  final int size=w * h;  float cl, ca, cb;  for (int i=0; i < size * 3; i+=3) {    cl=data[i] & 255;    ca=data[i + 1] & 255;    cb=data[i + 2] & 255;    convertToRGB(cl,ca,cb);    data[i]=(byte)r;    data[i + 1]=(byte)g;    data[i + 2]=(byte)b;  }  return data;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public final Object deserialize(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {  JsonToken t=jp.getCurrentToken();  if (t == JsonToken.START_OBJECT) {    jp.nextToken();    return deserializeFromObject(jp,ctxt);  }switch (t) {case VALUE_STRING:    return deserializeFromString(jp,ctxt);case VALUE_NUMBER_INT:  return deserializeFromNumber(jp,ctxt);case VALUE_NUMBER_FLOAT:return deserializeFromDouble(jp,ctxt);case VALUE_EMBEDDED_OBJECT:return jp.getEmbeddedObject();case VALUE_TRUE:case VALUE_FALSE:return deserializeFromBoolean(jp,ctxt);case START_ARRAY:return deserializeFromArray(jp,ctxt);case FIELD_NAME:case END_OBJECT:return deserializeFromObject(jp,ctxt);}throw ctxt.mappingException(getBeanClass());}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws IOException, SAXException {  return null;}  }
class C{  private int interpretReplaceEscape(final char ch,int i,StringBuffer buf,String replaceText,String foundText){  int length=replaceText.length();switch (ch) {case 'r':    buf.append('\r');  break;case 'n':buf.append('\n');break;case 't':buf.append('\t');break;case 'f':buf.append('\f');break;case 'a':buf.append('\u0007');break;case 'e':buf.append('\u001B');break;case 'R':buf.append(fLineDelim);break;case '0':buf.append('$').append(ch);if (i + 1 < length) {char ch1=replaceText.charAt(i + 1);if ('0' <= ch1 && ch1 <= '9') {buf.append('\\');}}break;case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':buf.append('$').append(ch);break;case 'c':if (i + 1 < length) {char ch1=replaceText.charAt(i + 1);interpretRetainCase(buf,(char)(ch1 ^ 64));i++;} else {String msg=SearchMessages.PatternConstructor_error_escape_sequence;throw new PatternSyntaxException(msg,replaceText,i);}break;case 'x':if (i + 2 < length) {int parsedInt;try {parsedInt=Integer.parseInt(replaceText.substring(i + 1,i + 3),16);if (parsedInt < 0) throw new NumberFormatException();} catch (NumberFormatException e) {String msg=SearchMessages.PatternConstructor_error_hex_escape_sequence;throw new PatternSyntaxException(msg,replaceText,i);}interpretRetainCase(buf,(char)parsedInt);i+=2;} else {String msg=SearchMessages.PatternConstructor_error_hex_escape_sequence;throw new PatternSyntaxException(msg,replaceText,i);}break;case 'u':if (i + 4 < length) {int parsedInt;try {parsedInt=Integer.parseInt(replaceText.substring(i + 1,i + 5),16);if (parsedInt < 0) throw new NumberFormatException();} catch (NumberFormatException e) {String msg=SearchMessages.PatternConstructor_error_unicode_escape_sequence;throw new PatternSyntaxException(msg,replaceText,i);}interpretRetainCase(buf,(char)parsedInt);i+=4;} else {String msg=SearchMessages.PatternConstructor_error_unicode_escape_sequence;throw new PatternSyntaxException(msg,replaceText,i);}break;case 'C':if (foundText.toUpperCase().equals(foundText)) fRetainCaseMode=RC_UPPER; else if (foundText.toLowerCase().equals(foundText)) fRetainCaseMode=RC_LOWER; else if (Character.isUpperCase(foundText.charAt(0))) fRetainCaseMode=RC_FIRSTUPPER; else fRetainCaseMode=RC_MIXED;break;default :buf.append('\\').append(ch);break;}return i;}  }
class C{  @Nullable public static Class findCallerClass(int framesToSkip){  try {    Class[] stack=MySecurityManager.INSTANCE.getStack();    int indexFromTop=1 + framesToSkip;    return stack.length > indexFromTop ? stack[indexFromTop] : null;  } catch (  Exception e) {    LOG.warn(e);    return null;  }}  }
class C{  public PathMappings(){  this(1024);}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  public void test3(){  final JPanel panel=new JPanel(new GridLayoutManager(1,3,new Insets(0,0,0,0),0,0));  final JButton button=new JButton();  button.setPreferredSize(new Dimension(50,10));  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(110,10));  panel.add(button,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field1,new GridConstraints(0,1,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  if (SystemInfo.isMac) {    assertEquals(185,preferredSize.width);  } else {    assertEquals(160,preferredSize.width);  }  panel.setSize(new Dimension(500,panel.getHeight()));  panel.doLayout();  if (SystemInfo.isMac) {    assertEquals(75,button.getWidth());    assertEquals(425,field1.getWidth());  } else {    assertEquals(50,button.getWidth());    assertEquals(450,field1.getWidth());  }}  }
class C{  public static Complex subtract(Complex c1,Complex c2){  return new Complex(c1.real - c2.real,c1.imag - c2.imag);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:19.371 -0500",hash_original_method="BADEFBD4164CAA2A58BD789F486A58F8",hash_generated_method="8799397ACB923924360E86C38C6E53CC") protected boolean tryReleaseShared(int ignore){  runner=null;  return true;}  }
class C{  public NoAvailableLocatorsException(Throwable cause){  super(cause);}  }
class C{  public void testBug10144() throws Exception {  if (versionMeetsMinimum(4,1)) {    Properties props=new Properties();    props.setProperty("emulateUnsupportedPstmts","false");    props.setProperty("useServerPrepStmts","true");    Connection bareConn=getConnectionWithProps(props);    int currentOpenStatements=((com.mysql.jdbc.Connection)bareConn).getActiveStatementCount();    try {      bareConn.prepareStatement("Boo!");      fail("Should not've been able to prepare that one!");    } catch (    SQLException sqlEx) {      assertEquals(currentOpenStatements,((com.mysql.jdbc.Connection)bareConn).getActiveStatementCount());    } finally {      bareConn.close();    }  }}  }
class C{  public void addItem(Object anItem){  String name=anItem.toString();  for (int i=0; i < getItemCount(); i++) {    Object o=getItemAt(i);    String oName=o.toString();    if (oName.compareTo(name) > 0) {      insertItemAt(anItem,i);      return;    }  }  super.addItem(anItem);}  }
class C{  protected static svm_node[] makeNodes(Example e,FastExample2SparseTransform ripper){  int[] nonDefaultIndices=ripper.getNonDefaultAttributeIndices(e);  double[] nonDefaultValues=ripper.getNonDefaultAttributeValues(e,nonDefaultIndices);  svm_node[] nodeArray=new svm_node[nonDefaultIndices.length];  for (int a=0; a < nonDefaultIndices.length; a++) {    svm_node node=new svm_node();    node.index=nonDefaultIndices[a];    node.value=nonDefaultValues[a];    nodeArray[a]=node;  }  return nodeArray;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final boolean addAll(int index,Collection<? extends E> newElements){  throw new UnsupportedOperationException();}  }
class C{  public void print(long x){  out.print(x);  out.flush();}  }
class C{  public Composite basicGetOwner(){  if (eContainerFeatureID() != DomPackage.SIMPLE_TYPE_REFERENCE__OWNER)   return null;  return (Composite)eInternalContainer();}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public void closure(){  for (  OwlProperty subprop : properties.values()) {    subprop.computeSuperProperties();  }  for (  OwlClass c1 : classes.values()) {    for (    OwlClass c2 : classes.values()) {      c1.compareRestrictions(c2);    }  }  boolean repeat;  do {    for (    OwlClass subclass : classes.values()) {      subclass.computeSuperClasses();    }    repeat=false;    for (    OwlProperty prop : properties.values()) {      repeat=prop.compareRestrictions() || repeat;    }  } while (repeat);  for (  OwlProperty prop : properties.values()) {    prop.inheritDomainRange();  }}  }
class C{  @Override public void write(int c) throws IOException {switch (c) {case '\r':    out.write(lineSeparator);  skipLF=true;break;case '\n':if (!skipLF) out.write(lineSeparator);skipLF=false;break;default :out.write(c);skipLF=false;break;}}  }
class C{  public final static <T>CompletableFuture<List<T>> streamToCompletableFuture(final Stream<T> stream){  return CompletableFuture.completedFuture(stream.collect(CyclopsCollectors.toListX()));}  }
class C{  public float clamp(float domainValue){  if (mDomainA > mDomainB) {    return Math.max(mDomainB,Math.min(mDomainA,domainValue));  }  return Math.max(mDomainA,Math.min(mDomainB,domainValue));}  }
class C{  public void testNextDouble(){  SplittableRandom sr=new SplittableRandom();  double f=sr.nextDouble();  int i=0;  while (i < NCALLS && sr.nextDouble() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  private static SortedMap<String,String> createParameterMap(final String queryString){  if (queryString == null || queryString.isEmpty()) {    return null;  }  final String[] pairs=queryString.split("&");  final SortedMap<String,String> params=new TreeMap<String,String>();  for (  final String pair : pairs) {    if (pair.length() == 0) {      continue;    }    String[] tokens=pair.split("=",2);switch (tokens.length) {case 1:      if (pair.charAt(0) == '=') {        params.put("",tokens[0]);      } else {        params.put(tokens[0],"");      }    break;case 2:  params.put(tokens[0],tokens[1]);break;}}return params;}  }
class C{  protected void buildMeta(){  if (haslabels) {    meta=new BundleMeta(2);    meta.add(getTypeInformation(mindim,maxdim));    meta.add(TypeUtil.LABELLIST);  } else {    meta=new BundleMeta(1);    meta.add(getTypeInformation(mindim,maxdim));  }}  }
class C{  @Override public int numEvals(){  return 0;}  }
class C{  private boolean isTimeFrequency(){  return taskFrequency > 0;}  }
class C{  @Deprecated public AbstractXmlDriver(){  this(new XmlFriendlyNameCoder());}  }
class C{  public EqualStringConstraint(String[] testStrings){  this.testStrings=testStrings;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.TYPE_REF__REF:    setRef((TypeDefinition)null);  return;case GamlPackage.TYPE_REF__PARAMETER:setParameter((TypeInfo)null);return;}super.eUnset(featureID);}  }
class C{  public double[][] computeLocalFromPreviousObservations(int states[][],int j){  int timeSteps=states.length;  if ((timeSteps == 0) || (states[0] == null)) {    return new double[timeSteps][];  }  int variables=states[0].length;  double[][] localTE=new double[timeSteps][variables];  average=0;  max=0;  min=0;  if (timeSteps - startObservationTime <= 0) {    return localTE;  }  int[][] pastVal=new int[variables][destEmbeddingDelay];  for (int c=0; c < variables; c++) {    for (int d=0; d < destEmbeddingDelay; d++) {      pastVal[c][d]=0;      for (int p=0; p < k - 1; p++) {        pastVal[c][d]+=states[startObservationTime + d - 1 - (k - 1) * destEmbeddingDelay + p * destEmbeddingDelay][c];        pastVal[c][d]*=base;      }    }  }  int[][] sourcePastVal=new int[variables][sourceEmbeddingDelay];  for (int c=0; c < variables; c++) {    int sourceVariable=c - j;    if ((sourceVariable < 0) || (sourceVariable >= variables)) {      if (periodicBoundaryConditions) {        sourceVariable=(sourceVariable + variables) % variables;      } else {        continue;      }    }    for (int d=0; d < sourceEmbeddingDelay; d++) {      sourcePastVal[c][d]=0;      for (int p=0; p < sourceHistoryEmbedLength - 1; p++) {        sourcePastVal[c][d]+=states[startObservationTime + d - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay + p * sourceEmbeddingDelay][sourceVariable];        sourcePastVal[c][d]*=base;      }    }  }  int destVal, destEmbeddingPhase=0, sourceEmbeddingPhase=0;  double logTerm;  for (int t=startObservationTime; t < timeSteps; t++) {    for (int c=0; c < variables; c++) {      int sourceVariable=c - j;      if ((sourceVariable < 0) || (sourceVariable >= variables)) {        if (periodicBoundaryConditions) {          sourceVariable=(sourceVariable + variables) % variables;        } else {          continue;        }      }      if (k > 0) {        pastVal[c][destEmbeddingPhase]+=states[t - 1][c];      }      sourcePastVal[c][sourceEmbeddingPhase]+=states[t - delay][sourceVariable];      destVal=states[t][c];      int thisPastVal=pastVal[c][destEmbeddingPhase];      int thisSourceVal=sourcePastVal[c][sourceEmbeddingPhase];      logTerm=((double)sourceNextPastCount[thisSourceVal][destVal][thisPastVal] / (double)sourcePastCount[thisSourceVal][thisPastVal]) / ((double)nextPastCount[destVal][thisPastVal] / (double)pastCount[thisPastVal]);      localTE[t][c]=Math.log(logTerm) / log_2;      average+=localTE[t][c];      if (localTE[t][c] > max) {        max=localTE[t][c];      } else       if (localTE[t][c] < min) {        min=localTE[t][c];      }      if (k > 0) {        pastVal[c][destEmbeddingPhase]-=maxShiftedValue[states[t - 1 - (k - 1) * destEmbeddingDelay][c]];        pastVal[c][destEmbeddingPhase]*=base;      }      sourcePastVal[c][sourceEmbeddingPhase]-=maxShiftedSourceValue[states[t - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay][sourceVariable]];      sourcePastVal[c][sourceEmbeddingPhase]*=base;    }    destEmbeddingPhase=(destEmbeddingPhase + 1) % destEmbeddingDelay;    sourceEmbeddingPhase=(sourceEmbeddingPhase + 1) % sourceEmbeddingDelay;  }  if (periodicBoundaryConditions) {    average=average / (double)((timeSteps - startObservationTime) * variables);  } else {    average=average / (double)((timeSteps - startObservationTime) * (variables - Math.abs(j)));  }  return localTE;}  }
class C{  public QuadEdge locateFromEdge(Vertex v,QuadEdge startEdge){  int iter=0;  int maxIter=quadEdges.size();  QuadEdge e=startEdge;  while (true) {    iter++;    if (iter > maxIter) {      throw new LocateFailureException(e.toLineSegment());    }    if ((v.equals(e.orig())) || (v.equals(e.dest()))) {      break;    } else     if (v.rightOf(e)) {      e=e.sym();    } else     if (!v.rightOf(e.oNext())) {      e=e.oNext();    } else     if (!v.rightOf(e.dPrev())) {      e=e.dPrev();    } else {      break;    }  }  return e;}  }
class C{  static int findEndTrimBlanks(CharSequence s){  for (int i=s.length(); i > 0; i--) {    final char ch=s.charAt(i - 1);    if (ch != ' ' && ch != '\t') {      return i;    }  }  return 0;}  }
class C{  public boolean isShowXLabels(){  return mShowXLabels;}  }
class C{  public static boolean authenticateHash(final String password,final String hash,final String salt){  try {    return SecureEngine.getSHA512Hash(1000,password,Secure.convertHexString(salt)).equals(hash);  } catch (  NoSuchAlgorithmException ignored) {    throw new AdempiereException("Password hashing not supported by JVM");  }catch (  UnsupportedEncodingException ignored) {    throw new AdempiereException("Password hashing not supported by JVM");  }}  }
class C{  private boolean noteNotificationOp(String pkg,int uid){  if (mAppOps.noteOpNoThrow(AppOpsManager.OP_POST_NOTIFICATION,uid,pkg) != AppOpsManager.MODE_ALLOWED) {    Slog.v(TAG,"notifications are disabled by AppOps for " + pkg);    return false;  }  return true;}  }
class C{  public SimpleDateFormat(String pattern,DateFormatSymbols formatSymbols){  if (pattern == null || formatSymbols == null) {    throw new NullPointerException();  }  this.pattern=pattern;  this.formatData=(DateFormatSymbols)formatSymbols.clone();  this.locale=Locale.getDefault(Locale.Category.FORMAT);  initializeCalendar(this.locale);  initialize(this.locale);  useDateFormatSymbols=true;}  }
class C{  public void comment(char ch[],int start,int length) throws org.xml.sax.SAXException {  flushPending();  if (m_tracer != null)   super.fireCommentEvent(ch,start,length);}  }
class C{  protected Tuple<Message,Connection> tryMessagesForConnected(List<Tuple<Message,Connection>> tuples){  if (tuples.size() == 0) {    return null;  }  for (  Tuple<Message,Connection> t : tuples) {    Message m=t.getKey();    Connection con=t.getValue();    if (startTransfer(m,con) == RCV_OK) {      return t;    }  }  return null;}  }
class C{  public void initialPositionIsSet(){  int sideToCheck;  if ((getCastling(WHITE) & CASTLE_BOTH) != 0 && getPieceCount(WHITE,ROOK) == 2)   sideToCheck=WHITE; else   sideToCheck=BLACK;  initialKingFile=getFile(bitscanForward(getPieceBB(sideToCheck,KING)));  long rookBB=getPieceBB(sideToCheck,ROOK);  int firstRook=getFile(bitscanForward(rookBB));  rookBB=bitscanClear(rookBB);  int secondRook=getFile(bitscanForward(rookBB));  if (firstRook < initialKingFile) {    initialLongRookFile=firstRook;    initialShortRookFile=secondRook;  } else {    initialLongRookFile=secondRook;    initialShortRookFile=firstRook;  }}  }
class C{  public static DynamicClassLoader create(PathImpl path){  DynamicClassLoader loader=new DynamicClassLoader(null);  CompilingLoader compilingLoader=new CompilingLoader(loader,path);  compilingLoader.init();  loader.init();  return loader;}  }
class C{  private void showNotification(String cityId,boolean microApp){  List<Attraction> attractions=ATTRACTIONS.get(cityId);  if (microApp) {    sendDataToWearable(attractions);  }  Attraction attraction=attractions.get(0);  int count=attractions.size() > Constants.MAX_ATTRACTIONS ? Constants.MAX_ATTRACTIONS : attractions.size();  HashMap<String,Bitmap> bitmaps=new HashMap<>();  try {    for (int i=0; i < count; i++) {      bitmaps.put(attractions.get(i).name,Glide.with(this).load(attractions.get(i).imageUrl).asBitmap().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(Constants.WEAR_IMAGE_SIZE,Constants.WEAR_IMAGE_SIZE).get());    }  } catch (  InterruptedException|ExecutionException e) {    Log.e(TAG,"Error fetching image from network: " + e);  }  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,DetailActivity.getLaunchIntent(this,attraction.name),PendingIntent.FLAG_UPDATE_CURRENT);  PendingIntent deletePendingIntent=PendingIntent.getService(this,0,getClearRemoteNotificationsIntent(this),0);  NotificationCompat.Builder builder=new NotificationCompat.Builder(this).setStyle(new NotificationCompat.BigPictureStyle().bigPicture(bitmaps.get(attraction.name)).setBigContentTitle(attraction.name).setSummaryText(getString(R.string.nearby_attraction))).setLocalOnly(microApp).setContentTitle(attraction.name).setContentText(getString(R.string.nearby_attraction)).setSmallIcon(R.drawable.ic_stat_maps_pin_drop).setContentIntent(pendingIntent).setDeleteIntent(deletePendingIntent).setColor(getResources().getColor(R.color.colorPrimary,getTheme())).setCategory(Notification.CATEGORY_RECOMMENDATION).setAutoCancel(true);  if (!microApp) {    ArrayList<Notification> pages=new ArrayList<Notification>();    for (int i=1; i < count; i++) {      String distance=Utils.formatDistanceBetween(Utils.getLocation(this),attractions.get(i).location);      pages.add(new NotificationCompat.Builder(this).setContentTitle(attractions.get(i).name).setContentText(distance).setSmallIcon(R.drawable.ic_stat_maps_pin_drop).extend(new NotificationCompat.WearableExtender().setBackground(bitmaps.get(attractions.get(i).name))).build());    }    builder.extend(new NotificationCompat.WearableExtender().addPages(pages));  }  NotificationManagerCompat.from(this).notify(Constants.MOBILE_NOTIFICATION_ID,builder.build());}  }
class C{  public static void assertEmpty(String message,BufferedImage image){  if (!isEmpty(image)) {    fail((String.valueOf(message) + " Image is not empty.").trim());  }}  }
class C{  public static Media createMediaRecorder(String path) throws IOException {  return createMediaRecorder(path,getAvailableRecordingMimeTypes()[0]);}  }
class C{  public static void doMove(Project project,@NotNull PsiElement[] elements,PsiElement targetContainer,DataContext dataContext,MoveCallback callback){  if (elements.length == 0)   return;  for (  MoveHandlerDelegate delegate : Extensions.getExtensions(MoveHandlerDelegate.EP_NAME)) {    if (delegate.canMove(elements,targetContainer)) {      delegate.doMove(project,elements,delegate.adjustTargetForMove(dataContext,targetContainer),callback);      break;    }  }}  }
class C{  public boolean search(final Expression item){  boolean found=false;  final String itemName=item.getNormalized();  for (  Map.Entry<String,Sentence> e : parsedNames.entrySet()) {    if (e.getValue().matchesNormalized(itemName)) {      name=e.getKey();      found=true;      break;    }  }  if (!found) {    found=searchEndMatch(itemName);  }  if (!found) {    final String pluralName=Grammar.plural(itemName);    if (!pluralName.equals(itemName)) {      for (      Map.Entry<String,Sentence> e : parsedNames.entrySet()) {        if (e.getValue().matchesStartNormalized(pluralName)) {          name=e.getKey();          found=true;          break;        }      }    }    if (!found && !pluralName.equals(itemName)) {      found=searchEndMatch(pluralName);    }  }  if (!found) {    final String singularName=Grammar.singular(itemName);    if (!singularName.equals(itemName)) {      for (      Map.Entry<String,Sentence> e : parsedNames.entrySet()) {        if (e.getValue().matchesStartNormalized(singularName)) {          name=e.getKey();          found=true;          break;        }      }      if (!found && !singularName.equals(itemName)) {        found=searchEndMatch(singularName);      }    }    if (!found) {      final String singular2=Grammar.singular(singularName);      if (!singular2.equals(singularName)) {        for (        Map.Entry<String,Sentence> e : parsedNames.entrySet()) {          if (e.getValue().matchesStartNormalized(singular2)) {            name=e.getKey();            found=true;            break;          }        }      }      if (!found && !singular2.equals(itemName)) {        found=searchEndMatch(singular2);      }    }  }  if (found) {    amount=item.getAmount();    return true;  } else   return false;}  }
class C{  public static byte[] createNonce(int bytes){  LOGGER.debug("createNonce: bytes={}",bytes);  byte[] nonce=new byte[bytes];  random.nextBytes(nonce);  return nonce;}  }
class C{  public Rect updateFastScrollerBounds(FastScrollRecyclerView recyclerView,int thumbOffsetY){  mInvalidateRect.set(mBgBounds);  if (isVisible()) {    int edgePadding=recyclerView.getScrollBarWidth();    int bgPadding=(mBackgroundSize - mTextBounds.height()) / 2;    int bgHeight=mBackgroundSize;    int bgWidth=Math.max(mBackgroundSize,mTextBounds.width() + (2 * bgPadding));    if (Utils.isRtl(mRes)) {      mBgBounds.left=(2 * recyclerView.getScrollBarWidth());      mBgBounds.right=mBgBounds.left + bgWidth;    } else {      mBgBounds.right=recyclerView.getWidth() - (2 * recyclerView.getScrollBarWidth());      mBgBounds.left=mBgBounds.right - bgWidth;    }    mBgBounds.top=thumbOffsetY - bgHeight + recyclerView.getScrollBarThumbHeight() / 2;    mBgBounds.top=Math.max(edgePadding,Math.min(mBgBounds.top,recyclerView.getHeight() - edgePadding - bgHeight));    mBgBounds.bottom=mBgBounds.top + bgHeight;  } else {    mBgBounds.setEmpty();  }  mInvalidateRect.union(mBgBounds);  return mInvalidateRect;}  }
class C{  public String minNumInstancesTipText(){  return "The minimum number of instances to allow at a leaf node.";}  }
class C{  public static void e(String tag,String s){  if (LOG.ERROR >= LOGLEVEL)   Log.e(tag,s);}  }
class C{  public CLEvent write(CLQueue queue,long offset,long length,Pointer<T> in,boolean blocking,CLEvent... eventsToWaitFor){}  }
class C{  public void send(String message){}  }
class C{  @Override public List<Session> listSessions() throws SQLException {  String sql="show processlist";  Statement stmt=null;  ResultSet rs=null;  LinkedList<Session> sessions=new LinkedList<Session>();  try {    stmt=dbConn.createStatement();    rs=stmt.executeQuery(sql);    while (rs.next()) {      Session session=new Session();      session.setIdentifier(rs.getString("Id"));      session.setLogin(rs.getString("User"));      sessions.add(session);    }  }  finally {    if (rs != null)     rs.close();    if (stmt != null)     stmt.close();  }  return sessions;}  }
class C{  public void remove(CategoryPlot subplot){  ParamChecks.nullNotPermitted(subplot,"subplot");  int position=-1;  int size=this.subplots.size();  int i=0;  while (position == -1 && i < size) {    if (this.subplots.get(i) == subplot) {      position=i;    }    i++;  }  if (position != -1) {    this.subplots.remove(position);    subplot.setParent(null);    subplot.removeChangeListener(this);    ValueAxis range=getRangeAxis();    if (range != null) {      range.configure();    }    ValueAxis range2=getRangeAxis(1);    if (range2 != null) {      range2.configure();    }    fireChangeEvent();  }}  }
class C{  @Override protected void makeFinished(){  byte[] verify_data;  if (serverHello.server_version[1] == 1) {    verify_data=new byte[12];    computerVerifyDataTLS("client finished",verify_data);  } else {    verify_data=new byte[36];    computerVerifyDataSSLv3(SSLv3Constants.client,verify_data);  }  clientFinished=new Finished(verify_data);  send(clientFinished);  if (isResuming) {    session.lastAccessedTime=System.currentTimeMillis();    status=FINISHED;  } else {    if (serverHello.server_version[1] == 1) {      computerReferenceVerifyDataTLS("server finished");    } else {      computerReferenceVerifyDataSSLv3(SSLv3Constants.server);    }    status=NEED_UNWRAP;  }}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  @Override public void destroy(){  try {    close();  } catch (  IOException e) {  } finally {    TempBuffer ptr=_head;    _head=null;    _tail=null;    TempBuffer.freeAll(ptr);  }}  }
class C{  JarFile open(final File jarFile) throws IOException {  isTrue(jarFile.exists(),"The JAR file must exists.");  return new JarFile(jarFile);}  }
class C{  public void reply(SerialReply r){  SerialNode node=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(r.getAddr());  if (node != null) {    node.markChanges(r);  }}  }
class C{  public static boolean isWindowsMe(){  return osName.indexOf("Windows") > -1 && osVersion.equals("4.9");}  }
class C{  @Override protected void onVersion(String sourceNick,String sourceLogin,String sourceHostname,String target){  this.sendRawLine("NOTICE " + sourceNick + " :\u0001VERSION "+ "Yaaic - Yet Another Android IRC Client - http://www.yaaic.org"+ "\u0001");}  }
class C{  public static String jreName(){  return javaRtName;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:11.747 -0500",hash_original_method="C0BFA4AD92D4DEF654107ADD12EA3FEE",hash_generated_method="21389218728DC2B181D1950BEC50F95B") public String encodeBody(){  return encodeProduct();}  }
class C{  public void translate(Point2D vector){  translate(vector.getX(),vector.getY());}  }
class C{  public RenderContext(AffineTransform usr2dev,RenderingHints hints){  this(usr2dev,null,hints);}  }
class C{  void startJVMThresholdListener(){  final MemoryPoolMXBean memoryPoolMXBean=getTenuredMemoryPoolMXBean();  if (!testDisableMemoryUpdates) {    memoryPoolMXBean.setCollectionUsageThreshold(1);  }  final long usageThreshold=memoryPoolMXBean.getUsageThreshold();  this.cache.getLoggerI18n().info(LocalizedStrings.HeapMemoryMonitor_OVERRIDDING_MEMORYPOOLMXBEAN_HEAP_0_NAME_1,new Object[]{Long.valueOf(usageThreshold),memoryPoolMXBean.getName()});  MemoryMXBean mbean=ManagementFactory.getMemoryMXBean();  NotificationEmitter emitter=(NotificationEmitter)mbean;  emitter.addNotificationListener(this,null,null);}  }
class C{  public ProductInfoEdit(){  m_ID=null;  m_sRef="0000";  m_sCode="0000";  m_sCodeType=null;  m_sName=null;  m_bCom=false;  m_bScale=false;  m_sCategoryID=null;  m_sTaxID=null;  attributeuseid=null;  m_dPriceBuy=0.0;  m_dPriceSell=0.0;  m_Image=null;  m_dStockCost=null;  m_dStockVolume=null;  m_iCatalogOrder=null;}  }
class C{  protected static FilterSpecParam makeFilterParam(ExprNode constituent,LinkedHashMap<String,Pair<EventType,String>> arrayEventTypes,ExprEvaluatorContext exprEvaluatorContext,String statementName) throws ExprValidationException {  if ((constituent instanceof ExprEqualsNode) || (constituent instanceof ExprRelationalOpNode)) {    FilterSpecParam param=handleEqualsAndRelOp(constituent,arrayEventTypes,exprEvaluatorContext,statementName);    if (param != null) {      return param;    }  }  constituent=rewriteOrToInIfApplicable(constituent);  if (constituent instanceof ExprInNode) {    FilterSpecParam param=handleInSetNode((ExprInNode)constituent,arrayEventTypes,exprEvaluatorContext,statementName);    if (param != null) {      return param;    }  }  if (constituent instanceof ExprBetweenNode) {    FilterSpecParam param=handleRangeNode((ExprBetweenNode)constituent,arrayEventTypes,exprEvaluatorContext,statementName);    if (param != null) {      return param;    }  }  if (constituent instanceof ExprPlugInSingleRowNode) {    FilterSpecParam param=handlePlugInSingleRow((ExprPlugInSingleRowNode)constituent);    if (param != null) {      return param;    }  }  return null;}  }
class C{  private int read(byte[] buffer,int offset,int byteCount) throws IOException {  if (byteCount == 0) {    return 0;  }  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (shutdownInput) {    return -1;  }  int readCount=IoBridge.recvfrom(true,fd,buffer,offset,byteCount,0,null,false);  if (readCount == 0) {    throw new SocketTimeoutException();  }  if (readCount == -1) {    shutdownInput=true;  }  return readCount;}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){  paint.setColor(renderer.getColor());  final float stroke=paint.getStrokeWidth();  if (renderer.isFillPoints()) {    paint.setStyle(Style.FILL);  } else {    paint.setStrokeWidth(renderer.getPointStrokeWidth());    paint.setStyle(Style.STROKE);  }  int length=points.size();switch (renderer.getPointStyle()) {case X:    paint.setStrokeWidth(renderer.getPointStrokeWidth());  for (int i=0; i < length; i+=2) {    drawX(canvas,paint,points.get(i),points.get(i + 1));  }break;case CIRCLE:for (int i=0; i < length; i+=2) {drawCircle(canvas,paint,points.get(i),points.get(i + 1));}break;case TRIANGLE:float[] path=new float[6];for (int i=0; i < length; i+=2) {drawTriangle(canvas,paint,path,points.get(i),points.get(i + 1));}break;case SQUARE:for (int i=0; i < length; i+=2) {drawSquare(canvas,paint,points.get(i),points.get(i + 1));}break;case DIAMOND:path=new float[8];for (int i=0; i < length; i+=2) {drawDiamond(canvas,paint,path,points.get(i),points.get(i + 1));}break;case POINT:for (int i=0; i < length; i+=2) {canvas.drawPoint(points.get(i),points.get(i + 1),paint);}break;}paint.setStrokeWidth(stroke);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isFrozen(){  return this.getState().equals(CandidatePairState.FROZEN);}  }
class C{  @Inline public static void zeroSmall(Address start,Extent bytes){  if (VM.VERIFY_ASSERTIONS) {    assertAligned(start);    assertAligned(bytes);  }  Address end=start.plus(bytes);  for (Address addr=start; addr.LT(end); addr=addr.plus(BYTES_IN_INT))   addr.store(0);}  }
class C{  public void write(int b) throws IOException {  if (closed) {    return;  }  write(new byte[]{(byte)b});}  }
class C{  public static void resetDisableShufflingOfEndpointsFlag(){  System.setProperty(DistributionConfig.GEMFIRE_PREFIX + "bridge.disableShufflingOfEndpoints","false");}  }
class C{  public void remove(Rule rule){  rules.remove(rule);}  }
class C{  protected void fillPaymentParameters(final ProceedingJoinPoint pjp,final CustomerOrder customerOrder,final PaymentGateway paymentGateway,final String rez,final HashMap<String,Object> map){  final Shop shop=shopService.getById(customerOrder.getShop().getShopId());  map.put(StandardMessageListener.SHOP_CODE,shop.getCode());  map.put(StandardMessageListener.CUSTOMER_EMAIL,customerOrder.getEmail());  map.put(StandardMessageListener.RESULT,rez);  map.put(StandardMessageListener.ROOT,customerOrder);  map.put(StandardMessageListener.TEMPLATE_FOLDER,themeService.getMailTemplateChainByShopId(shop.getShopId()));  map.put(StandardMessageListener.SHOP,shop);  map.put(StandardMessageListener.CUSTOMER,customerOrder.getCustomer());  map.put(StandardMessageListener.SHIPPING_ADDRESS,customerOrder.getShippingAddressDetails());  map.put(StandardMessageListener.BILLING_ADDRESS,customerOrder.getBillingAddressDetails());  map.put(StandardMessageListener.LOCALE,customerOrder.getLocale());  final PaymentGatewayFeature feature=paymentGateway.getPaymentGatewayFeatures();  map.put(StandardMessageListener.PAYMENT_GATEWAY_FEATURE,feature);  final Map<String,String> carrier=new HashMap<String,String>();  final Map<String,String> carrierSla=new HashMap<String,String>();  for (  final CustomerOrderDelivery delivery : customerOrder.getDelivery()) {    final I18NModel carrierName=new FailoverStringI18NModel(delivery.getCarrierSla().getCarrier().getDisplayName(),delivery.getCarrierSla().getCarrier().getName());    carrier.put(delivery.getDeliveryNum(),carrierName.getValue(customerOrder.getLocale()));    final I18NModel carrierSlaName=new FailoverStringI18NModel(delivery.getCarrierSla().getDisplayName(),delivery.getCarrierSla().getName());    carrierSla.put(delivery.getDeliveryNum(),carrierSlaName.getValue(customerOrder.getLocale()));  }  map.put(StandardMessageListener.DELIVERY_CARRIER,carrier);  map.put(StandardMessageListener.DELIVERY_CARRIER_SLA,carrierSla);}  }
class C{  final Object peek(){  int size=stack.size();  return size == 0 ? null : stack.get(size - 1);}  }
class C{  public boolean contains(RxAction action){  Pair<Integer,Subscription> old=mMap.get(action.getType());  return (old != null && old.first == action.hashCode() && !old.second.isUnsubscribed());}  }
class C{  protected void fillTable(Listbox cb){  ValueNamePair select=null;  String sql="SELECT AD_Table_ID, TableName FROM AD_Table t " + "WHERE EXISTS (SELECT * FROM AD_Column c" + " WHERE t.AD_Table_ID=c.AD_Table_ID AND c.ColumnName='Posted')"+ " AND IsView='N'";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int id=rs.getInt(1);      String tableName=rs.getString(2);      String name=Msg.translate(Env.getCtx(),tableName + "_ID");      ValueNamePair pp=new ValueNamePair(tableName,name);      cb.appendItem(pp.getName(),pp);      tableInfo.put(tableName,new Integer(id));      if (id == AD_Table_ID)       select=pp;    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (select != null)   ;}  }
class C{  public static String matchCount(String content,String pattern,int count,int group){  return matchCount(content,pattern,count,group,false);}  }
class C{  public void removeXValue(int index){  mXVals.remove(index);}  }
class C{  public HookResult onMessage(SMTPSession session,Mail mail){  try {    MimeMessage message=mail.getMessage();    if (headerName != null) {      message.setHeader(headerName,headerValue);      message.saveChanges();    }  } catch (  javax.mail.MessagingException me) {    session.getLogger().error(me.getMessage());  }  return new HookResult(HookReturnCode.DECLINED);}  }
class C{  public static <T extends Number>boolean isBetween(T a,T b,T c){  return b.doubleValue() > a.doubleValue() ? c.doubleValue() >= a.doubleValue() && c.doubleValue() <= b.doubleValue() : c.doubleValue() >= b.doubleValue() && c.doubleValue() <= a.doubleValue();}  }
class C{  protected boolean validateNodeName(String nodeName){  if (null == nodeName)   return false;  if (nodeName.equals("xmlns"))   return false;  return XML11Char.isXML11ValidQName(nodeName);}  }
class C{  public String cpuInfo(){  return m_cpuInfo;}  }
class C{  public UnfoldAnimation(View view){  this.view=view;  numOfFolds=1;  orientation=Orientation.HORIZONTAL;  anchorFactor=0f;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  private static Method findMethod(Object instance,String name,Class<?>... parameterTypes) throws NoSuchMethodException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Method method=clazz.getDeclaredMethod(name,parameterTypes);      if (!method.isAccessible()) {        method.setAccessible(true);      }      return method;    } catch (    NoSuchMethodException e) {    }  }  throw new NoSuchMethodException("Method " + name + " with parameters "+ Arrays.asList(parameterTypes)+ " not found in "+ instance.getClass());}  }
class C{  public Expression order(){  if (precedence() > cond.precedence()) {    UnaryExpression e=(UnaryExpression)cond;    cond=e.right;    e.right=order();    return e;  }  return this;}  }
class C{  private static int computeMaxFlow(){  int sum;  for (int i=1; i < n - 1; i++) {    sum=0;    for (int j=0; j < n; j++) {      sum=sum + outgoing[j][i] - outgoing[i][j];    }    if (sum != 0) {      return -1;    }  }  sum=0;  for (int j=0; j < n; j++) {    sum=sum + outgoing[0][j];  }  return sum;}  }
class C{  public int addOrderTerm(GenericValue orderTerm){  orderTerms.add(orderTerm);  return orderTerms.indexOf(orderTerm);}  }
class C{  protected ArgsBase(){  _argv=null;  _env=null;}  }
class C{  public void openFile(File aFile,String charset) throws IOException {  if (content != null) {    content.dispose();    content=null;  }  content=new BinaryContent(aFile);  hexEditControl.setCharset(charset);  hexEditControl.setContentProvider(content);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void validate(ValidationContext vc,Element e,ElementMetadata<?,?> metadata){  int type=getType(e);switch (type) {case UNKNOWN_TYPE:    vc.addError(e,CoreErrorDomain.ERR.invalidTextContentType.withInternalReason("Invalid type: " + type));  break;case IContent.Type.TEXT:case IContent.Type.HTML:if (!e.hasTextValue()) {  vc.addError(e,CoreErrorDomain.ERR.missingTextContent);}if (e.getElementCount() != 0) {vc.addError(e,CoreErrorDomain.ERR.invalidChildElement.withInternalReason("Child elements not allowed on text content"));}break;case IContent.Type.XHTML:if (!e.hasElement(DIV)) {vc.addError(e,CoreErrorDomain.ERR.missingExtensionElement.withInternalReason("xhtml text content must have a div element"));} else if (e.getElementCount() != 1) {vc.addError(e,CoreErrorDomain.ERR.invalidChildElement.withInternalReason("xhtml must only have a single child element"));}break;default :throw new IllegalStateException("Shouldn't be possible, " + "TYPE_MAP can only map to text, html, or xhtml.");}}  }
class C{  public static Node firstParent(Node node){  final Iterable<? extends Node> parents=node.getParents();  for (  Node parent : parents) {    return parent;  }  return null;}  }
class C{  @Override @SuppressWarnings("rawtypes") protected void configureMessageConverters(List<HttpMessageConverter<?>> converters){  converters.add(marshallingMessageConverter());  addDefaultHttpMessageConverters(converters);  for (  HttpMessageConverter httpMessageConverter : converters) {    if (httpMessageConverter instanceof MappingJackson2XmlHttpMessageConverter) {      converters.remove(httpMessageConverter);      break;    }  }}  }
class C{  protected boolean hasUncompressedStrip(){  return mStripBytes.size() != 0;}  }
class C{  public static void appendEscapedSQLString(StringBuilder sb,String sqlString){  sb.append('\'');  if (sqlString.indexOf('\'') != -1) {    int length=sqlString.length();    for (int i=0; i < length; i++) {      char c=sqlString.charAt(i);      if (c == '\'') {        sb.append('\'');      }      sb.append(c);    }  } else   sb.append(sqlString);  sb.append('\'');}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  protected void updateControls(){}  }
class C{  public ModelList build(){  ModelList list=new ModelList();  for (  Model model : this) {    list.register(model);  }  return list;}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape,int line,boolean strictQuotes){  this(reader,separator,quotechar,escape,line,strictQuotes,CSVParser.DEFAULT_IGNORE_LEADING_WHITESPACE);}  }
class C{  public boolean isIncludeNullsBPartner(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsBPartner);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int writeUShortLE(int index,int us){  this.array.put(index,(byte)(us & 0xff));  this.array.put(index + 1,(byte)((us >> 8) & 0xff));  return 2;}  }
class C{  public void elementEncode(XMLWriter writer,IPath projectPath,boolean indent,boolean newLine,Map unknownElements,boolean isReferencedEntry){  HashMap parameters=new HashMap();  parameters.put(TAG_KIND,ClasspathEntry.kindToString(this.entryKind));  IPath xmlPath=this.path;  if (this.entryKind != IClasspathEntry.CPE_VARIABLE && this.entryKind != IClasspathEntry.CPE_CONTAINER) {    if (xmlPath.isAbsolute()) {      if (projectPath != null && projectPath.isPrefixOf(xmlPath)) {        if (xmlPath.segment(0).equals(projectPath.segment(0))) {          xmlPath=xmlPath.removeFirstSegments(projectPath.segmentCount());          xmlPath=xmlPath.makeRelative();        } else {          xmlPath=xmlPath.makeAbsolute();        }      }    }  }  parameters.put(TAG_PATH,String.valueOf(xmlPath));  if (this.sourceAttachmentPath != null) {    xmlPath=this.sourceAttachmentPath;    if (this.entryKind != IClasspathEntry.CPE_VARIABLE && projectPath != null && projectPath.isPrefixOf(xmlPath)) {      if (xmlPath.segment(0).equals(projectPath.segment(0))) {        xmlPath=xmlPath.removeFirstSegments(1);        xmlPath=xmlPath.makeRelative();      }    }    parameters.put(TAG_SOURCEPATH,String.valueOf(xmlPath));  }  if (this.sourceAttachmentRootPath != null) {    parameters.put(TAG_ROOTPATH,String.valueOf(this.sourceAttachmentRootPath));  }  if (this.isExported) {    parameters.put(TAG_EXPORTED,"true");  }  encodePatterns(this.inclusionPatterns,TAG_INCLUDING,parameters);  encodePatterns(this.exclusionPatterns,TAG_EXCLUDING,parameters);  if (this.entryKind == IClasspathEntry.CPE_PROJECT && !this.combineAccessRules)   parameters.put(TAG_COMBINE_ACCESS_RULES,"false");  UnknownXmlElements unknownXmlElements=unknownElements == null ? null : (UnknownXmlElements)unknownElements.get(this.path);  String[] unknownAttributes;  if (unknownXmlElements != null && (unknownAttributes=unknownXmlElements.attributes) != null)   for (int i=0, length=unknownAttributes.length; i < length; i+=2) {    String tagName=unknownAttributes[i];    String tagValue=unknownAttributes[i + 1];    parameters.put(tagName,tagValue);  }  if (this.specificOutputLocation != null) {    IPath outputLocation=this.specificOutputLocation.removeFirstSegments(1);    outputLocation=outputLocation.makeRelative();    parameters.put(TAG_OUTPUT,String.valueOf(outputLocation));  }  boolean hasExtraAttributes=this.extraAttributes.length != 0;  boolean hasRestrictions=getAccessRuleSet() != null;  ArrayList unknownChildren=unknownXmlElements != null ? unknownXmlElements.children : null;  boolean hasUnknownChildren=unknownChildren != null;  String tagName=isReferencedEntry ? TAG_REFERENCED_ENTRY : TAG_CLASSPATHENTRY;  writer.printTag(tagName,parameters,indent,newLine,!hasExtraAttributes && !hasRestrictions && !hasUnknownChildren);  if (hasExtraAttributes)   encodeExtraAttributes(writer,indent,newLine);  if (hasRestrictions)   encodeAccessRules(writer,indent,newLine);  if (hasUnknownChildren)   encodeUnknownChildren(writer,indent,newLine,unknownChildren);  if (hasExtraAttributes || hasRestrictions || hasUnknownChildren)   writer.endTag(tagName,indent,true);}  }
class C{  public double cond(){  return s[0] / s[Math.min(m,n) - 1];}  }
class C{  @Deprecated public static String toString(Match match){  return "";}  }
class C{  public void destroy(){  services=null;  if (matchesArrayThreadLocal != null) {    matchesArrayThreadLocal.remove();  }  if (matchesPerStmtThreadLocal != null) {    matchesPerStmtThreadLocal.remove();  }  if (scheduleArrayThreadLocal != null) {    scheduleArrayThreadLocal.remove();  }  if (schedulePerStmtThreadLocal != null) {    schedulePerStmtThreadLocal.remove();  }  matchesArrayThreadLocal=null;  matchesPerStmtThreadLocal=null;  scheduleArrayThreadLocal=null;  schedulePerStmtThreadLocal=null;}  }
class C{  public void applicationWillTerminate(){}  }
class C{  @Override public Document parse(InputSource is) throws SAXException, IOException {  domTreeBuilder.setFragmentContext(null);  tokenize(is);  return domTreeBuilder.getDocument();}  }
class C{  public Matrix4d mul4x3ComponentWise(Matrix4dc other){  return mul4x3ComponentWise(other,this);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void configureGameState(){  int maxLives, minSpeed, maxSpeed;  float ballSize, paddleSize, scoreMultiplier;switch (sDifficultyIndex) {case 0:    ballSize=2.0f;  paddleSize=2.0f;scoreMultiplier=0.75f;maxLives=4;minSpeed=200;maxSpeed=500;break;case 1:ballSize=1;paddleSize=1.0f;scoreMultiplier=1.0f;maxLives=3;minSpeed=300;maxSpeed=800;break;case 2:ballSize=1.0f;paddleSize=0.8f;scoreMultiplier=1.25f;maxLives=3;minSpeed=600;maxSpeed=1200;break;case 3:ballSize=1.0f;paddleSize=0.5f;scoreMultiplier=0.1f;maxLives=1;minSpeed=1000;maxSpeed=100000;break;default :throw new RuntimeException("bad difficulty index " + sDifficultyIndex);}mGameState.setBallSizeMultiplier(ballSize);mGameState.setPaddleSizeMultiplier(paddleSize);mGameState.setScoreMultiplier(scoreMultiplier);mGameState.setMaxLives(maxLives);mGameState.setBallInitialSpeed(minSpeed);mGameState.setBallMaximumSpeed(maxSpeed);mGameState.setNeverLoseBall(sNeverLoseBall);SoundResources.setSoundEffectsEnabled(sSoundEffectsEnabled);}  }
class C{  private FileShare prepareFileSystem(FileSystemParam param,Project project,TenantOrg tenantOrg,VirtualArray neighborhood,VirtualPool vpool,DataObject.Flag[] flags,FileRecommendation placement,String token){  _log.info("prepareFile System");  StoragePool pool=null;  FileShare fs=new FileShare();  fs.setId(URIUtil.createId(FileShare.class));  fs.setLabel(param.getLabel());  String convertedName=param.getLabel().replaceAll("[^\\dA-Za-z\\_]","");  _log.info("Original name {} and converted name {}",param.getLabel(),convertedName);  fs.setName(convertedName);  Long fsSize=SizeUtil.translateSize(param.getSize());  fs.setCapacity(fsSize);  fs.setVirtualPool(param.getVpool());  if (project != null) {    fs.setProject(new NamedURI(project.getId(),fs.getLabel()));  }  fs.setTenant(new NamedURI(tenantOrg.getId(),param.getLabel()));  fs.setVirtualArray(neighborhood.getId());  if (null != placement.getSourceStoragePool()) {    pool=_dbClient.queryObject(StoragePool.class,placement.getSourceStoragePool());    if (null != pool) {      fs.setProtocol(new StringSet());      fs.getProtocol().addAll(VirtualPoolUtil.getMatchingProtocols(vpool.getProtocols(),pool.getProtocols()));    }  }  fs.setStorageDevice(placement.getSourceStorageSystem());  fs.setPool(placement.getSourceStoragePool());  if (param.getSoftLimit() != 0) {    fs.setSoftLimit(new Long(param.getSoftLimit()));  }  if (param.getNotificationLimit() != 0) {    fs.setNotificationLimit(new Long(param.getNotificationLimit()));  }  if (param.getSoftGrace() > 0) {    fs.setSoftGracePeriod(new Integer(param.getSoftGrace()));  }  if (placement.getStoragePorts() != null && !placement.getStoragePorts().isEmpty()) {    fs.setStoragePort(placement.getStoragePorts().get(0));  }  if (VirtualPool.ProvisioningType.Thin.toString().equalsIgnoreCase(vpool.getSupportedProvisioningType())) {    fs.setThinlyProvisioned(Boolean.TRUE);  }  if (placement.getvNAS() != null) {    fs.setVirtualNAS(placement.getvNAS());  }  fs.setOpStatus(new OpStatusMap());  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.CREATE_FILE_SYSTEM);  fs.getOpStatus().createTaskStatus(token,op);  if (flags != null) {    fs.addInternalFlags(flags);  }  _dbClient.createObject(fs);  return fs;}  }
class C{  public void doFetch(final Tradestrategy tradestrategy){  try {    if (null != tradestrategy.getIdTradeStrategy()) {      int result=JOptionPane.showConfirmDialog(this.getFrame(),"Do you want to save orders that did not orginate from this TM client?","Information",JOptionPane.YES_NO_OPTION);      if (result == JOptionPane.YES_OPTION) {        m_brokerModel.onReqExecutions(tradestrategy,true);      } else {        m_brokerModel.onReqExecutions(tradestrategy,false);      }    }  } catch (  BrokerModelException ex) {    setErrorMessage("Error getting executions.",ex.getMessage(),ex);  }}  }
class C{  public void addAttribute(AttributedCharacterIterator.Attribute attribute,Object value){  if (attribute == null) {    throw new NullPointerException("attribute == null");  }  if (text.isEmpty()) {    throw new IllegalArgumentException("text is empty");  }  List<Range> ranges=attributeMap.get(attribute);  if (ranges == null) {    ranges=new ArrayList<Range>(1);    attributeMap.put(attribute,ranges);  } else {    ranges.clear();  }  ranges.add(new Range(0,text.length(),value));}  }
class C{  private boolean diffuseSkylightInBlockColumn(Cube cube,MutableBlockPos pos,int minBlockY,int maxBlockY,Int2ObjectMap<FastCubeBlockAccess> blockAccessMap){  ICubicWorld world=cube.getCubicWorld();  int cubeMinBlockY=cubeToMinBlock(cube.getY());  int cubeMaxBlockY=cubeToMaxBlock(cube.getY());  int maxBlockYInCube=Math.min(cubeMaxBlockY,maxBlockY);  int minBlockYInCube=Math.max(cubeMinBlockY,minBlockY);  FastCubeBlockAccess blockAccess=blockAccessMap.get(cube.getY());  if (blockAccess == null) {    blockAccess=new FastCubeBlockAccess(this.cache,cube,UPDATE_BUFFER_RADIUS);    blockAccessMap.put(cube.getY(),blockAccess);  }  for (int blockY=maxBlockYInCube; blockY >= minBlockYInCube; --blockY) {    pos.setY(blockY);    if (!needsSkylightUpdate(blockAccess,pos)) {      continue;    }    if (!world.checkLightFor(EnumSkyBlock.SKY,pos)) {      return false;    }  }  return true;}  }
class C{  public static Character previous(Character self){  return (char)(self - 1);}  }
class C{  protected boolean handle(){  moveFwd=true;  throttle.setIsForward(moveFwd);  throttle.setSpeedSetting(0.50f);  log.debug("Waiting for state change");  while ((fwdState=fwdSensor.getKnownState()) != Sensor.ACTIVE) {    waitSensorChange(fwdState,fwdSensor);  }  log.debug("Forward sensor active");  moveFwd=false;  throttle.setIsForward(moveFwd);  throttle.setSpeedSetting(0.33f);  while ((revState=revSensor.getKnownState()) != Sensor.ACTIVE) {    waitSensorChange(revState,revSensor);  }  log.debug("Backward sensor active");  moveFwd=true;  throttle.setIsForward(moveFwd);  return true;}  }
class C{  public Prepared prepare(String sql){  return prepare(sql,false);}  }
class C{  public FBProcedureParam(int position,String paramValue){  this.position=position;  this.isLiteral=paramValue.startsWith("'") && paramValue.endsWith("'");  this.isParam=!isLiteral && paramValue.indexOf('?') >= 0;  this.paramValue=paramValue.trim();}  }
class C{  public PRTimeAllocationMutator(Config config,final int mutationRange){  super(config.global());  this.mutationRange=new Double(mutationRange);}  }
class C{  public static void applyMultiIconTo(Drawable icon,int iconColor,Drawable selectedIcon,int selectedIconColor,boolean tinted,ImageView imageView){  if (icon != null) {    if (selectedIcon != null) {      imageView.setImageDrawable(DrawerUIUtils.getIconStateList(icon,selectedIcon));    } else     if (tinted) {      imageView.setImageDrawable(new PressedEffectStateListDrawable(icon,iconColor,selectedIconColor));    } else {      imageView.setImageDrawable(icon);    }    imageView.setVisibility(View.VISIBLE);  } else {    imageView.setVisibility(View.GONE);  }}  }
class C{  protected void scaleImpl(float sx,float sy,float sz){  modelview.scale(sx,sy,sz);  invScale(modelviewInv,sx,sy,sz);  projmodelview.scale(sx,sy,sz);}  }
class C{  @Override public Set<Statement> apply(final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> state,final Value u,final Set<Statement> sum){  if (sum != null) {    final Set<Statement> us=state.getState(u);    us.addAll(sum);    return us;  }  return null;}  }
class C{  public static void clearQueue(){  try {    if (musicPlaybackService != null) {      musicPlaybackService.removeTracks(0,Integer.MAX_VALUE);    }  } catch (  final RemoteException ignored) {  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:00.823 -0400",hash_original_method="F45749C038E3DA7A80BFF6F195583EB7",hash_generated_method="27DF04D1A08681E2AEA2289C7DD9B109") public String toString(){  StringBuilder result=new StringBuilder(mResponse.toString());switch (mResultCode) {case OK:    appendWithCrlf(result,OK_STRING);  break;case ERROR:appendWithCrlf(result,ERROR_STRING);break;}return result.toString();}  }
class C{  private void loadInsn(final Type type,final int index){  mv.visitVarInsn(type.getOpcode(Opcodes.ILOAD),index);}  }
class C{  static float reverse(float x){  return (-x * XScale) + 1;}  }
class C{  public Matrix4d rotationZYX(double angleZ,double angleY,double angleX){  double cosZ=Math.cos(angleZ);  double sinZ=Math.sin(angleZ);  double cosY=Math.cos(angleY);  double sinY=Math.sin(angleY);  double cosX=Math.cos(angleX);  double sinX=Math.sin(angleX);  double m_sinZ=-sinZ;  double m_sinY=-sinY;  double m_sinX=-sinX;  double nm00=cosZ;  double nm01=sinZ;  double nm10=m_sinZ;  double nm11=cosZ;  double nm20=nm00 * sinY;  double nm21=nm01 * sinY;  double nm22=cosY;  m00=nm00 * cosY;  m01=nm01 * cosY;  m02=m_sinY;  m03=0.0;  m10=nm10 * cosX + nm20 * sinX;  m11=nm11 * cosX + nm21 * sinX;  m12=nm22 * sinX;  m13=0.0;  m20=nm10 * m_sinX + nm20 * cosX;  m21=nm11 * m_sinX + nm21 * cosX;  m22=nm22 * cosX;  m23=0.0;  m30=0.0;  m31=0.0;  m32=0.0;  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  public LeftToRightSplitterAlgorithm(Dictionary aDict,LinkingMorphemes aMorphemes){  setDictionary(aDict);  setLinkingMorphemes(aMorphemes);}  }
class C{  public T lowestKey(){  if (mapValues.isEmpty()) {    return null;  }  int min=Integer.MAX_VALUE;  T rVal=null;  for (  final Entry<T,Integer> entry : mapValues.entrySet()) {    if (entry.getValue() < min) {      min=entry.getValue();      rVal=entry.getKey();    }  }  return rVal;}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public Object clone(){  Paper newPaper;  try {    newPaper=(Paper)super.clone();  } catch (  CloneNotSupportedException e) {    e.printStackTrace();    newPaper=null;  }  return newPaper;}  }
class C{  void initDefaultVM(IVMInstallType vm){  fDefault=vm;}  }
class C{  private void resolveConflicts(final ConflictDescription[] descriptions,final ConflictResolution resolution){  if (this.repository == null) {    return;  }  final ConflictResolution[] resolutions=new ConflictResolution[descriptions.length];  for (int i=0; i < descriptions.length; i++) {    resolutions[i]=resolution.newForConflictDescription(descriptions[i]);  }  final ResolveConflictsCommand resolver=new ResolveConflictsCommand(repository,resolutions);  UICommandExecutorFactory.newUICommandExecutor(getSite().getShell()).execute(new ResourceChangingCommand(resolver));  resolutionFinished(resolutions,resolver.getStatuses());}  }
class C{  @Override public void run(){  amIActive=true;  String inputStreamsFile;  int row, col;  int i;  int topRow, bottomRow, leftCol, rightCol;  float progress;  double decrement;  double decayCoefficient=0;  double elevation;  double infVal=9999999;  double value;  double rowYCoord, colXCoord;  double[][] geometry;  BoundingBox box;  int numPoints, numParts, part;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime, yPrime;  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  inputStreamsFile=args[1];  outputHeader=args[2];  decrement=Double.parseDouble(args[3]);  if (!args[4].toLowerCase().contains("not specified")) {    decayCoefficient=Double.parseDouble(args[4]);    if (decayCoefficient < 0) {      decayCoefficient=0;    }  }  if ((demHeader == null) || (inputStreamsFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(demHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    if (inputStreamsFile.toLowerCase().endsWith(".dep")) {      streamsHeader=inputStreamsFile;      streams=new WhiteboxRaster(streamsHeader,"r");    } else     if (inputStreamsFile.toLowerCase().endsWith(".shp")) {      streamsHeader=inputStreamsFile.replace(".shp","_temp.dep");      ShapeFile input=new ShapeFile(inputStreamsFile);      int numRecs=input.getNumberOfRecords();      if (input.getShapeType() != ShapeType.POLYLINE && input.getShapeType() != ShapeType.POLYLINEZ && input.getShapeType() != ShapeType.POLYLINEM && input.getShapeType() != ShapeType.POLYGON && input.getShapeType() != ShapeType.POLYGONZ && input.getShapeType() != ShapeType.POLYGONM) {        showFeedback("The input shapefile must be of a 'polyline' or " + "'polygon' data type.");        return;      }      streams=new WhiteboxRaster(streamsHeader,"rw",demHeader,WhiteboxRasterBase.DataType.INTEGER,0);      streams.isTemporaryFile=true;      ArrayList<RecordInfo> myList=new ArrayList<RecordInfo>();      for (      ShapeFileRecord record : input.records) {        i=record.getRecordNumber();        box=getBoundingBoxFromShapefileRecord(record);        myList.add(new RecordInfo(box.getMaxY(),i));      }      Collections.sort(myList);      long heapSize=Runtime.getRuntime().totalMemory();      int flushSize=(int)(heapSize / 32);      int j, numCellsToWrite;      PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<RowPriorityGridCell>(flushSize);      RowPriorityGridCell cell;      int numRecords=input.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      progress=0;      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=input.getRecord(ri.recNumber - 1);        value=record.getRecordNumber();        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][0] < box.getMinX()) {              box.setMinX(geometry[i][0]);            }            if (geometry[i][0] > box.getMaxX()) {              box.setMaxX(geometry[i][0]);            }            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=streams.getRowFromYCoordinate(box.getMaxY());          bottomRow=streams.getRowFromYCoordinate(box.getMinY());          leftCol=streams.getColumnFromXCoordinate(box.getMinX());          rightCol=streams.getColumnFromXCoordinate(box.getMaxX());          for (row=topRow; row <= bottomRow; row++) {            rowYCoord=streams.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1);                  col=streams.getColumnFromXCoordinate(xPrime);                  pq.add(new RowPriorityGridCell(row,col,value));                }              }            }          }          for (col=leftCol; col <= rightCol; col++) {            colXCoord=streams.getXCoordinateFromColumn(col);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(colXCoord,geometry[i][0],geometry[i + 1][0])) {                x1=geometry[i][0];                x2=geometry[i + 1][0];                if (x1 != x2) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  yPrime=y1 + (colXCoord - x1) / (x2 - x1) * (y2 - y1);                  row=streams.getRowFromYCoordinate(yPrime);                  pq.add(new RowPriorityGridCell(row,col,value));                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            streams.setValue(cell.row,cell.col,cell.z);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress((int)progress);        }      }      j=0;      numCellsToWrite=pq.size();      do {        cell=pq.poll();        streams.setValue(cell.row,cell.col,cell.z);        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);      streams.flush();    } else {      showFeedback("The input streams file must be either a Whitebox raster or shapefile.");      return;    }    if (streams.getNumberColumns() != cols || streams.getNumberRows() != rows) {      showFeedback("The input files must have the same dimensions.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,infVal);    output.setPreferredPalette(DEM.getPreferredPalette());    if (decayCoefficient > 0) {      if (!CalculateDistance()) {        showFeedback("An error was encountered calculating distances.");        return;      }      double distVal=0;      double[] data;      for (row=0; row < rows; row++) {        data=DEM.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            distVal=output.getValue(row,col);            elevation=data[col] - (Math.pow((gridRes / (gridRes + distVal)),decayCoefficient) * decrement);            output.setValue(row,col,elevation);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Burning Streams:",(int)progress);      }    } else {      double[] demData;      double[] streamData;      for (row=0; row < rows; row++) {        demData=DEM.getRowValues(row);        streamData=streams.getRowValues(row);        for (col=0; col < cols; col++) {          if (demData[col] != noData && streamData[col] > 0) {            elevation=demData[col] - decrement;            output.setValue(row,col,elevation);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Burning Streams:",(int)progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return NOTE_ID;case 2:  return PARAGRAPH_ID;case 3:return PARAGRAPH_TITLE;case 4:return PARAGRAPH_TEXT;case 5:return AUTHENTICATION_INFO;case 6:return CONFIG;case 7:return GUI;case 8:return RUNNERS;default :return null;}}  }
class C{  public void append(int key,int value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=Math.max(pos + 1,mKeys.length * 2);    int[] nkeys=new int[n];    int[] nvalues=new int[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public ShardListPartitioner(){}  }
class C{  public boolean ready() throws IOException {synchronized (lock) {    ensureOpen();    if (skipLF) {      if (nextChar >= nChars && in.ready()) {        fill();      }      if (nextChar < nChars) {        if (cb[nextChar] == '\n')         nextChar++;        skipLF=false;      }    }    return (nextChar < nChars) || in.ready();  }}  }
class C{  private Tag readTagPayload(int type,int depth) throws IOException {switch (type) {case NBTConstants.TYPE_END:    if (depth == 0) {      throw new IOException("TAG_End found without a TAG_Compound/TAG_List tag preceding it.");    } else {      return new EndTag();    }case NBTConstants.TYPE_BYTE:  return new ByteTag(is.readByte());case NBTConstants.TYPE_SHORT:return new ShortTag(is.readShort());case NBTConstants.TYPE_INT:return new IntTag(is.readInt());case NBTConstants.TYPE_LONG:return new LongTag(is.readLong());case NBTConstants.TYPE_FLOAT:return new FloatTag(is.readFloat());case NBTConstants.TYPE_DOUBLE:return new DoubleTag(is.readDouble());case NBTConstants.TYPE_BYTE_ARRAY:int length=is.readInt();byte[] bytes=new byte[length];is.readFully(bytes);return new ByteArrayTag(bytes);case NBTConstants.TYPE_STRING:length=is.readShort();bytes=new byte[length];is.readFully(bytes);return new StringTag(new String(bytes,NBTConstants.CHARSET));case NBTConstants.TYPE_LIST:int childType=is.readByte();length=is.readInt();List<Tag> tagList=new ArrayList<Tag>();for (int i=0; i < length; ++i) {Tag tag=readTagPayload(childType,depth + 1);if (tag instanceof EndTag) {throw new IOException("TAG_End not permitted in a list.");}tagList.add(tag);}return new ListTag(NBTUtils.getTypeClass(childType),tagList);case NBTConstants.TYPE_COMPOUND:Map<String,Tag> tagMap=new HashMap<String,Tag>();while (true) {NamedTag namedTag=readNamedTag(depth + 1);Tag tag=namedTag.getTag();if (tag instanceof EndTag) {break;} else {tagMap.put(namedTag.getName(),tag);}}return new CompoundTag(tagMap);case NBTConstants.TYPE_INT_ARRAY:length=is.readInt();int[] data=new int[length];for (int i=0; i < length; i++) {data[i]=is.readInt();}return new IntArrayTag(data);default :throw new IOException("Invalid tag type: " + type + ".");}}  }
class C{  private static Map<String,Set<String>> parseSparseFields(MultivaluedMap<String,String> queryParams){  Map<String,Set<String>> result=new HashMap<>();  for (  Map.Entry<String,List<String>> kv : queryParams.entrySet()) {    String key=kv.getKey();    if (key.startsWith("fields[") && key.endsWith("]")) {      String type=key.substring(7,key.length() - 1);      LinkedHashSet<String> filters=new LinkedHashSet<>();      for (      String filterParams : kv.getValue()) {        Collections.addAll(filters,filterParams.split(","));      }      if (!filters.isEmpty()) {        result.put(type,filters);      }    }  }  return result;}  }
class C{  private static double gnorm(double a,double x){  double sx;  if ((x <= 0.0) || (a <= 0.0)) {    return 0.0;  } else {    sx=Math.sqrt(a) * 3.0 * (Math.pow(x / a,1.0 / 3.0) + 1.0 / (a * 9.0) - 1.0);    return normalCdf(sx);  }}  }
class C{  public Object attribLazyConstantValue(Env<AttrContext> env,JCVariableDecl variable,Type type){  DiagnosticPosition prevLintPos=deferredLintHandler.setPos(variable.pos());  try {    memberEnter.typeAnnotate(variable.init,env,null,variable.pos());    annotate.flush();    Type itype=attribExpr(variable.init,env,type);    if (itype.constValue() != null) {      return coerce(itype,type).constValue();    } else {      return null;    }  }  finally {    deferredLintHandler.setPos(prevLintPos);  }}  }
class C{  public void threadAssertFalse(boolean b){  if (b) {    threadFailed=true;    assertFalse(b);  }}  }
class C{  public Boolean isHbrNicSelectionSupported(){  return hbrNicSelectionSupported;}  }
class C{  protected MapWayFilter createMapWayFilter(OsmMap map,int waySelection){  if (waySelection == 1)   return MapWayAttFilter.createCarWayFilter(); else   if (waySelection == 2)   return MapWayAttFilter.createBicycleWayFilter(); else   return MapWayAttFilter.createAnyWayFilter();}  }
class C{  public Vset checkLHS(Environment env,Context ctx,Vset vset,Hashtable exp){  if (!bind(env,ctx))   return vset;  vset=assign(env,ctx,vset);  if (implementation != null)   vset=implementation.checkValue(env,ctx,vset,exp);  return vset;}  }
class C{  public StateInfo addTo(StateInfo info){  if (font != null) {    info.font=font;  }  if (data != null) {    if (info.data == null) {      info.data=new HashMap();    }    info.data.putAll(data);  }  if (colors != null) {    if (info.colors == null) {      info.colors=new Color[colors.length];      System.arraycopy(colors,0,info.colors,0,colors.length);    } else {      if (info.colors.length < colors.length) {        Color[] old=info.colors;        info.colors=new Color[colors.length];        System.arraycopy(old,0,info.colors,0,old.length);      }      for (int counter=colors.length - 1; counter >= 0; counter--) {        if (colors[counter] != null) {          info.colors[counter]=colors[counter];        }      }    }  }  return info;}  }
class C{  public RoleUnresolvedList(int initialCapacity){  super(initialCapacity);}  }
class C{  public AbstractState(StateType initialState,StateType errorState){  state=initialState;  this.errorState=errorState;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.845 -0500",hash_original_method="C2E7AD44BF6B2BCB887E6B9726568F1C",hash_generated_method="27CD2F962D4BA9E3B360C7DBEFB959CC") public void writeToParcel(Parcel dest,int flags){  dest.writeString(activity);  dest.writeString(cause);  dest.writeString(info);}  }
class C{  public void addArgumentNoEncoding(String key,String value){  addArg(key,value);}  }
class C{  public boolean selectAt(double x,double y){  beginMark=textPainter.selectAt(x,y,this);  return true;}  }
class C{  public synchronized void reset(){  path.reset();  numSeg=0;  numVals=0;  values=null;  types=null;}  }
class C{  public void initOptions(){}  }
class C{  public Map<State,Double> threadStatePercentages(){  final Map<State,Double> conditions=new HashMap<State,Double>();  for (  State state : State.values()) {    conditions.put(state,0.0);  }  final long[] allThreadIds=threads.getAllThreadIds();  final ThreadInfo[] allThreads=threads.getThreadInfo(allThreadIds);  int liveCount=0;  for (  ThreadInfo info : allThreads) {    if (info != null) {      final State state=info.getThreadState();      conditions.put(state,conditions.get(state) + 1);      liveCount++;    }  }  for (  State state : new ArrayList<State>(conditions.keySet())) {    conditions.put(state,conditions.get(state) / liveCount);  }  return Collections.unmodifiableMap(conditions);}  }
class C{  public void disallowComplement(int variable,int category){  for (int i=0; i < allowedCategories[variable].length; i++) {    if (i != category) {      allowedCategories[variable][i]=false;    }  }}  }
class C{  public SetSystemPropertyScriptCommand(Configuration configuration,String resourcePath,String propertyName,String propertyValue){  super(configuration,resourcePath);  this.propertyName=propertyName;  this.propertyValue=propertyValue;}  }
class C{  public static int nextLesserValueToTarget(int currentIndex,FixedLengthDimensionDataChunk dimColumnDataChunk,byte[] compareValue){  while (currentIndex - 1 >= 0 && ByteUtil.UnsafeComparer.INSTANCE.compareTo(dimColumnDataChunk.getCompleteDataChunk(),(currentIndex - 1) * compareValue.length,compareValue.length,compareValue,0,compareValue.length) >= 0) {    --currentIndex;  }  return --currentIndex;}  }
class C{  protected void expandClusterOrder(DBIDRef objectID){  ModifiableDoubleDBIDList neighbors=DBIDUtil.newDistanceDBIDList();  DoubleDBIDListIter neighbor=neighbors.iter();  heap.add(new OPTICSHeapEntry(DBIDUtil.deref(objectID),null,Double.POSITIVE_INFINITY));  while (!heap.isEmpty()) {    final OPTICSHeapEntry current=heap.poll();    clusterOrder.add(current.objectID,current.reachability,current.predecessorID);    processedIDs.add(current.objectID);    neighbors.clear();    rangeQuery.getRangeForDBID(current.objectID,epsilon,neighbors);    if (neighbors.size() >= minpts) {      neighbors.sort();      final double coreDistance=neighbor.seek(minpts - 1).doubleValue();      for (neighbor.seek(0); neighbor.valid(); neighbor.advance()) {        if (processedIDs.contains(neighbor)) {          continue;        }        double reachability=MathUtil.max(neighbor.doubleValue(),coreDistance);        heap.add(new OPTICSHeapEntry(DBIDUtil.deref(neighbor),current.objectID,reachability));      }    }    LOG.incrementProcessed(progress);  }}  }
class C{  private String[] split(String hash) throws PasswordException {  assert hash != null;  String[] parts=hash.split(HASH_DELIMITER);  if (parts.length != 5) {    throw new PasswordException("Expected a length of 5, but got " + parts.length);  }  return parts;}  }
class C{  public static String convertPropertyName(String prop){  if (Character.isDigit(prop.charAt(0))) {    return prop;  }  return java.beans.Introspector.decapitalize(prop);}  }
class C{  public CollapsedSubtreeLayout(String group,int orientation){  super(group);  m_orientation=orientation;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  ArrayList<ArrayList<Way>> groupWays(List<Way> ways){  ArrayList<ArrayList<Way>> groups=new ArrayList<ArrayList<Way>>();  int group=0;  int index=0;  int groupIndex=1;  groups.add(new ArrayList<Way>());  Way startWay=ways.get(index);  groups.get(group).add(startWay);  do {    do {      for (      Node nd : startWay.getNodes()) {        for (        Way w : ways) {          if (w.getNodes().contains(nd) && !groups.get(group).contains(w)) {            groups.get(group).add(w);          }        }      }      if (groupIndex < groups.get(group).size()) {        startWay=groups.get(group).get(groupIndex);        groupIndex++;      }    } while (groupIndex < groups.get(group).size());    for (; index < ways.size(); index++) {      Way w=ways.get(index);      boolean found=false;      for (      ArrayList<Way> list : groups) {        found=found || list.contains(w);      }      if (!found) {        group++;        groups.add(new ArrayList<Way>());        startWay=w;        groupIndex=1;        break;      }    }  } while (index < ways.size());  Log.d(DEBUG_TAG,"number of groups found " + groups.size());  return groups;}  }
class C{  private String convertPennToUniversal(final String tag){  return MaltParser.PENN_TO_UNIVERSAL_TAGS.getOrDefault(tag,tag);}  }
class C{  public Ripple(RippleDrawable owner,Rect bounds,float startingX,float startingY){  mOwner=owner;  mBounds=bounds;  mStartingX=startingX;  mStartingY=startingY;}  }
class C{  public static Color createColor(int value,boolean forceAlpha){  return new Color(value,forceAlpha);}  }
class C{  private Document makeDocument(Pokemon pokemon) throws IOException {  Document doc=new Document();  Field id=new IntField(LuceneConstants.ID_FIELD,pokemon.getId(),Field.Store.YES);  Field name=new StringField(LuceneConstants.NAME_FIELD,pokemon.getName(),Field.Store.YES);  Field types=new TextField(LuceneConstants.TYPES_FIELD,pokemon.getTypes(),Field.Store.YES);  Field moves=new TextField(LuceneConstants.MOVES_FIELD,pokemon.getMoves(),Field.Store.NO);  doc.add(id);  doc.add(name);  doc.add(types);  doc.add(moves);  return doc;}  }
class C{  public void addRequestListener(TransportAddress localAddr,RequestListener listener){  addMessageListener(localAddr,new RequestListenerMessageEventHandler(listener));}  }
class C{  public TransferEntropyCalculatorViaCondMutualInfo(ConditionalMutualInfoCalculatorMultiVariate condMiCalc) throws Exception {  if (condMiCalc == null) {    throw new Exception("Conditional MI calculator used to construct ConditionalTransferEntropyCalculatorViaCondMutualInfo " + " must have already been instantiated.");  }  construct(condMiCalc);}  }
class C{  public static String termFromResult(String result){  String[] parts=result.split(":");  if (parts.length != 2)   return null;  return parts[1];}  }
class C{  public MethodInfo findMethodHere(MethodInfo mproto){  return methods.get(new MethodInfoWrapper(mproto));}  }
class C{  public void test_getInstanceLjava_lang_String01() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  KeyManagerFactory keyMF;  for (int i=0; i < validValues.length; i++) {    keyMF=KeyManagerFactory.getInstance(validValues[i]);    assertNotNull("No KeyManagerFactory created",keyMF);    assertEquals("Invalid algorithm",keyMF.getAlgorithm(),validValues[i]);  }}  }
class C{  @ReactMethod public void manageChildren(int viewTag,@Nullable ReadableArray moveFrom,@Nullable ReadableArray moveTo,@Nullable ReadableArray addChildTags,@Nullable ReadableArray addAtIndices,@Nullable ReadableArray removeFrom){  if (DEBUG) {    FLog.d(ReactConstants.TAG,"(UIManager.manageChildren) tag: " + viewTag + ", moveFrom: "+ moveFrom+ ", moveTo: "+ moveTo+ ", addTags: "+ addChildTags+ ", atIndices: "+ addAtIndices+ ", removeFrom: "+ removeFrom);  }  mUIImplementation.manageChildren(viewTag,moveFrom,moveTo,addChildTags,addAtIndices,removeFrom);}  }
class C{  boolean displayContextAssump(NodeRepresentation rep,int i){  return rep.isCreated || ((!state.splitChosen()) && showContextValue);}  }
class C{  private static void cloneWorkEffortPartyAssignments(DispatchContext dctx,GenericValue userLogin,String routingTaskId,String productionRunTaskId){  List<GenericValue> workEffortPartyAssignments=null;  try {    workEffortPartyAssignments=EntityUtil.filterByDate(dctx.getDelegator().findByAnd("WorkEffortPartyAssignment",UtilMisc.toMap("workEffortId",routingTaskId),null,false));  } catch (  GenericEntityException e) {    Debug.logError(e.getMessage(),module);  }  if (workEffortPartyAssignments != null) {    for (    GenericValue workEffortPartyAssignment : workEffortPartyAssignments) {      Map<String,Object> partyToWorkEffort=UtilMisc.<String,Object>toMap("workEffortId",productionRunTaskId,"partyId",workEffortPartyAssignment.getString("partyId"),"roleTypeId",workEffortPartyAssignment.getString("roleTypeId"),"fromDate",workEffortPartyAssignment.getTimestamp("fromDate"),"statusId",workEffortPartyAssignment.getString("statusId"),"userLogin",userLogin);      try {        dctx.getDispatcher().runSync("assignPartyToWorkEffort",partyToWorkEffort);      } catch (      GenericServiceException e) {        Debug.logError(e,"Problem calling the assignPartyToWorkEffort service",module);      }      if (Debug.infoOn())       Debug.logInfo("ProductionRunPartyassigment for party: " + workEffortPartyAssignment.get("partyId") + " created",module);    }  }}  }
class C{  public void finish(){  GLES20.glFinish();}  }
class C{  @Path("/create-customer") @POST public CustomerInfo createCustomer(@Context HttpServletRequest request,@FormParam("customerName") String customerName,@FormParam("email") String email,@FormParam("login") String login,@FormParam("password") String password,@FormParam("locale") String locale,@FormParam("linkURL") String linkURL){  ServiceUtils.getInstance().logAPIRequest(null,null,null,login,request);  String reqIP=ServiceUtils.getInstance().getRemoteIP(request);  String defaultClientURL=KrakenConfig.getProperty("default.client.url",true);  AppContext ctx=delegate.accessRequest(AUTH_MODE.OAUTH,customerName,email,login,password,locale,reqIP,linkURL,defaultClientURL,EmailHelperImpl.getInstance());  return delegate.readCustomerInfo(ctx);}  }
class C{  public Stream<? extends SymbolInformation> allInFile(URI source){  SourceFileIndex index=sourcePath.getOrDefault(source,new SourceFileIndex());  return index.declarations.values().stream().flatMap(null);}  }
class C{  public BufferingChunkedInput(ReadableByteChannel ch){  this(ch,STACK_OVERFLOW_SUGGESTED_BUFFER_SIZE);}  }
class C{  public boolean isDirectory(){  if (this.file != null)   return FileSystemStorage.getInstance().isDirectory(this.file);  if (this.header != null) {    if (this.header.linkFlag == TarHeader.LF_DIR)     return true;    if (this.header.name.toString().endsWith("/"))     return true;  }  return false;}  }
class C{  public DirectoryFilter(boolean matchPasses){  super(matchPasses);}  }
class C{  @Override public boolean canCapture(final IAgent other,final ISpecies newSpecies){  if (other == null || other.dead() || newSpecies == null || !this.getSpecies().containMicroSpecies(newSpecies)) {    return false;  }  if (this.getMacroAgents().contains(other)) {    return false;  }  if (other.getHost().equals(this)) {    return false;  }  return true;}  }
class C{  public static boolean isNegative(String name) throws UserDoesNotExistException {  return getMoneyExact(name).signum() < 0;}  }
class C{  public boolean rejectedDueToInitialization(){  return (this.msg != null) && this.msg.notYetInitialized;}  }
class C{  public void refreshRESTExportMask(StorageSystem storage,ExportMask mask,NetworkDeviceController _networkDeviceController){  try {    final String storageIP=storage.getSmisProviderIP();    final String name=mask.getNativeId();    XIVRestClient restExportOpr=getRestClient(storage);    StringBuilder builder=new StringBuilder();    Set<String> discoveredPorts=new HashSet<String>();    Set<URI> hostURIs=new HashSet<URI>();    Set<Initiator> exportMaskInits=ExportMaskUtils.getInitiatorsForExportMask(_dbClient,mask,null);    Iterator<Initiator> exportMaskInitsItr=exportMaskInits.iterator();    while (exportMaskInitsItr.hasNext()) {      hostURIs.add(exportMaskInitsItr.next().getHost());    }    List<Host> hostList=_dbClient.queryObject(Host.class,hostURIs);    for (    Host host : hostList) {      discoveredPorts.addAll(restExportOpr.getHostPorts(storageIP,host.getLabel()));    }    boolean addInitiators=false;    List<String> initiatorsToAdd=new ArrayList<String>();    List<Initiator> initiatorIdsToAdd=new ArrayList<>();    for (    String port : discoveredPorts) {      String normalizedPort=Initiator.normalizePort(port);      if (!mask.hasExistingInitiator(normalizedPort) && !mask.hasUserInitiator(normalizedPort)) {        initiatorsToAdd.add(normalizedPort);        Initiator existingInitiator=ExportUtils.getInitiator(Initiator.toPortNetworkId(port),_dbClient);        if (existingInitiator != null) {          initiatorIdsToAdd.add(existingInitiator);        }        addInitiators=true;      }    }    boolean removeInitiators=false;    List<String> initiatorsToRemove=new ArrayList<String>();    List<URI> initiatorIdsToRemove=new ArrayList<>();    if (mask.getExistingInitiators() != null && !mask.getExistingInitiators().isEmpty()) {      initiatorsToRemove.addAll(mask.getExistingInitiators());      initiatorsToRemove.removeAll(discoveredPorts);    }    removeInitiators=!initiatorsToRemove.isEmpty();    Map<String,Integer> discoveredVolumes=new HashMap<String,Integer>();    final String exportType=ExportMaskUtils.getExportType(_dbClient,mask);    if (ExportGroup.ExportGroupType.Cluster.name().equals(exportType)) {      discoveredVolumes.putAll(restExportOpr.getVolumesMappedToHost(storageIP,mask.getLabel(),null));    } else {      for (      Host host : hostList) {        discoveredVolumes.putAll(restExportOpr.getVolumesMappedToHost(storageIP,null,host.getLabel()));      }    }    Map<String,Integer> volumesToAdd=ExportMaskUtils.diffAndFindNewVolumes(mask,discoveredVolumes);    boolean addVolumes=!volumesToAdd.isEmpty();    boolean removeVolumes=false;    List<String> volumesToRemove=new ArrayList<String>();    if (mask.getExistingVolumes() != null && !mask.getExistingVolumes().isEmpty()) {      volumesToRemove.addAll(mask.getExistingVolumes().keySet());      volumesToRemove.removeAll(discoveredVolumes.keySet());      removeVolumes=!volumesToRemove.isEmpty();    }    builder.append(String.format("XM refresh: %s initiators; add:{%s} remove:{%s}%n",name,Joiner.on(',').join(initiatorsToAdd),Joiner.on(',').join(initiatorsToRemove)));    builder.append(String.format("XM refresh: %s volumes; add:{%s} remove:{%s}%n",name,Joiner.on(',').join(volumesToAdd.keySet()),Joiner.on(',').join(volumesToRemove)));    if (addInitiators || removeInitiators || addVolumes|| removeVolumes) {      builder.append("XM refresh: There are changes to mask, " + "updating it...\n");      mask.removeFromExistingInitiators(initiatorsToRemove);      if (initiatorIdsToRemove != null && !initiatorIdsToRemove.isEmpty()) {        mask.removeInitiators(_dbClient.queryObject(Initiator.class,initiatorIdsToRemove));      }      List<Initiator> userAddedInitiators=ExportMaskUtils.findIfInitiatorsAreUserAddedInAnotherMask(mask,initiatorIdsToAdd,_dbClient);      mask.addToUserCreatedInitiators(userAddedInitiators);      mask.addToExistingInitiatorsIfAbsent(initiatorsToAdd);      mask.addInitiators(initiatorIdsToAdd);      mask.removeFromExistingVolumes(volumesToRemove);      mask.setExistingVolumes(new StringMap());      mask.addToExistingVolumesIfAbsent(volumesToAdd);      ExportMaskUtils.sanitizeExportMaskContainers(_dbClient,mask);      _dbClient.updateObject(mask);    } else {      builder.append("XM refresh: There are no changes to the mask\n");    }    _networkDeviceController.refreshZoningMap(mask,initiatorsToRemove,Collections.EMPTY_LIST,(addInitiators || removeInitiators),true);    _log.info(builder.toString());  } catch (  Exception e) {    String msg="Error when attempting to query LUN masking information: " + e.getMessage();    _log.error(MessageFormat.format("Encountered an error when attempting to refresh existing exports: {0}",msg),e);    throw XIVRestException.exceptions.refreshExistingMaskFailure(msg);  }}  }
class C{  public static QRCode encode(String content,ErrorCorrectionLevel ecLevel) throws WriterException {  return encode(content,ecLevel,null);}  }
class C{  protected void sendFunctionGroup3(){  log.debug("sendFunctionGroup3() called");}  }
class C{  private DictionaryAdapter open() throws SQLException {  db=SQLiteDatabase.openOrCreateDatabase(mDbFile,null);  return this;}  }
class C{  public void readBlocks(ByteBuf input) throws Exception {  palette.clear();  int bitsPerBlock=input.readUnsignedByte();  long maxEntryValue=(1L << bitsPerBlock) - 1;  if (bitsPerBlock == 0) {    bitsPerBlock=13;  }  if (bitsPerBlock < 4) {    bitsPerBlock=4;  }  if (bitsPerBlock > 8) {    bitsPerBlock=13;  }  int paletteLength=Type.VAR_INT.read(input);  for (int i=0; i < paletteLength; i++) {    if (bitsPerBlock != 13) {      palette.add(Type.VAR_INT.read(input));    } else {      Type.VAR_INT.read(input);    }  }  Long[] blockData=Type.LONG_ARRAY.read(input);  if (blockData.length > 0) {    for (int i=0; i < blocks.length; i++) {      int bitIndex=i * bitsPerBlock;      int startIndex=bitIndex / 64;      int endIndex=((i + 1) * bitsPerBlock - 1) / 64;      int startBitSubIndex=bitIndex % 64;      int val;      if (startIndex == endIndex) {        val=(int)(blockData[startIndex] >>> startBitSubIndex & maxEntryValue);      } else {        int endBitSubIndex=64 - startBitSubIndex;        val=(int)((blockData[startIndex] >>> startBitSubIndex | blockData[endIndex] << endBitSubIndex) & maxEntryValue);      }      if (bitsPerBlock == 13) {        int type=val >> 4;        int data=val & 0xF;        setBlock(i,type,data);      } else {        blocks[i]=val;      }    }  }}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  public boolean isPrivileged(){  return privileged;}  }
class C{  @Override public boolean onOptionsItemSelected(final MenuItem item){  int id=item.getItemId();  if (id == R.id.action_clear_creds) {    final BaseApplication application=(BaseApplication)getApplication();    application.signOut();    finish();    return true;  }  return super.onOptionsItemSelected(item);}  }
class C{  public double availability(){  if (!honorLease) {    return connection.availability();  }  final long now=System.currentTimeMillis();  double available=0.0;  if (numberOfRemainingRequests > 0 && (now < ttlExpiration)) {    available=1.0;  }  return available * connection.availability();}  }
class C{  public static SpeechletResponse newTellResponse(final OutputSpeech outputSpeech){  if (outputSpeech == null) {    throw new IllegalArgumentException("OutputSpeech cannot be null");  }  SpeechletResponse response=new SpeechletResponse();  response.setShouldEndSession(true);  response.setOutputSpeech(outputSpeech);  return response;}  }
class C{  public Socks5Message(int cmd,InetAddress ip,int port){  super(cmd,ip,port);  this.host=ip == null ? "0.0.0.0" : ip.getHostName();  this.version=SOCKS_VERSION;  byte[] addr;  if (ip == null) {    addr=new byte[4];    addr[0]=addr[1]=addr[2]=addr[3]=0;  } else   addr=ip.getAddress();  addrType=addr.length == 4 ? SOCKS_ATYP_IPV4 : SOCKS_ATYP_IPV6;  data=new byte[6 + addr.length];  data[0]=(byte)SOCKS_VERSION;  data[1]=(byte)command;  data[2]=(byte)0;  data[3]=(byte)addrType;  System.arraycopy(addr,0,data,4,addr.length);  data[data.length - 2]=(byte)(port >> 8);  data[data.length - 1]=(byte)(port);}  }
class C{  private static byte[] extractFullEvent(ReplicatorRuntime runtime,int eventLength,BinlogReader tempPosition,byte[] tmpHeader,int binlogReadTimeout) throws IOException, ReplicatorException, InterruptedException {  byte[] fullEvent;  fullEvent=new byte[tmpHeader.length + eventLength];  readDataFromBinlog(runtime,tempPosition,fullEvent,tmpHeader.length,eventLength,binlogReadTimeout);  System.arraycopy(tmpHeader,0,fullEvent,0,tmpHeader.length);  return fullEvent;}  }
class C{  public void initialize(UimaContext aContext){  annotate_tokens=(Boolean)aContext.getConfigParameterValue(PARAM_ANNOTATE_TOKENS);  annotate_sentences=(Boolean)aContext.getConfigParameterValue(PARAM_ANNOTATE_SENTENCES);  annotate_partofspeech=(Boolean)aContext.getConfigParameterValue(PARAM_ANNOTATE_PARTOFSPEECH);  sentModelPath=(String)aContext.getConfigParameterValue(PARAM_SENTSEGMODEL_PATH);  wordModelPath=(String)aContext.getConfigParameterValue(PARAM_WORDSEGMODEL_PATH);  posModelPath=(String)aContext.getConfigParameterValue(PARAM_POSMODEL_PATH);  if (sentModelPath != null)   if (!vnSenSegmenter.init(sentModelPath)) {    Logger.printError(component,"Error initializing the sentence segmenter model: " + sentModelPath);    System.exit(-1);  }  if (wordModelPath != null)   try {    vnSegmenter.init(wordModelPath);  } catch (  Exception e) {    Logger.printError(component,"Error initializing the word segmenter model: " + wordModelPath);    System.exit(-1);  }  if (posModelPath != null)   try {    dataTagger.addContextGenerator(new POSContextGenerator(posModelPath + File.separator + "featuretemplate.xml"));    classifier=new Classification(posModelPath);  } catch (  Exception e) {    Logger.printError(component,"Error initializing the POS tagging model: " + posModelPath);    System.exit(-1);  }}  }
class C{  @SuppressWarnings("unused") public ApplicationPassivationThread(final Application application){  this(application,null,null);}  }
class C{  public static void convertToASCII(File in,File out) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  NSObject root=parse(in);  if (root instanceof NSDictionary) {    saveAsASCII((NSDictionary)root,out);  } else   if (root instanceof NSArray) {    saveAsASCII((NSArray)root,out);  } else {    throw new PropertyListFormatException("The root of the given input property list " + "is neither a Dictionary nor an Array!");  }}  }
class C{  private int[] smallArrayOfRandomNumbers(){  int size=TestUtil.nextInt(random(),1,5);  int[] result=new int[size];  for (int i=0; i < size; i++) {    result[i]=TestUtil.nextInt(random(),1,5);  }  return result;}  }
class C{  public void onFindToolbarShown(){}  }
class C{  public static IJavaProject createJavaProject(String projectName) throws CoreException {  return createProject(projectName,PreferenceConstants.getDefaultJRELibrary());}  }
class C{  public BerEncoder(byte b[]){  bytes=b;  start=b.length;  stackTop=0;}  }
class C{  @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.660 -0500",hash_original_method="65554F0C302DA5F8C76906F90F535223",hash_generated_method="684EA5F33B6E7AA3FC0B779B5BE44EC3") @DSVerified @DSSpec(DSCat.IO) public int read(char[] buffer) throws IOException {  return read(buffer,0,buffer.length);}  }
class C{  public void delItems(int s,int e){  boolean hsbWasVisible=hsbVis;  boolean vsbWasVisible=vsbVis;  int oldLastDisplayed=lastItemDisplayed();  if (log.isLoggable(PlatformLogger.Level.FINE)) {    log.fine("Deleting from " + s + " to "+ e);  }  if (log.isLoggable(PlatformLogger.Level.FINEST)) {    log.finest("Last displayed item: " + oldLastDisplayed + ", items in window "+ itemsInWindow()+ ", size "+ items.size());  }  if (items.size() == 0) {    return;  }  if (s > e) {    int tmp=s;    s=e;    e=tmp;  }  if (s < 0) {    s=0;  }  if (e >= items.size()) {    e=items.size() - 1;  }  boolean repaintNeeded=(s >= getFirstVisibleItem() && s <= getLastVisibleItem());  for (int i=s; i <= e; i++) {    items.removeElementAt(s);    int j=posInSel(i);    if (j != -1) {      int newsel[]=new int[selected.length - 1];      System.arraycopy(selected,0,newsel,0,j);      System.arraycopy(selected,j + 1,newsel,j,selected.length - (j + 1));      selected=newsel;    }  }  int diff=(e - s) + 1;  for (int i=0; i < selected.length; i++) {    if (selected[i] > e) {      selected[i]-=diff;    }  }  int options=PAINT_VSCROLL;  if (getFocusIndex() > e) {    setFocusIndex(getFocusIndex() - (e - s + 1));    options|=PAINT_FOCUS;  } else   if (getFocusIndex() >= s && getFocusIndex() <= e) {    int focusBound=(items.size() > 0) ? 0 : -1;    setFocusIndex(Math.max(s - 1,focusBound));    options|=PAINT_FOCUS;  }  if (log.isLoggable(PlatformLogger.Level.FINEST)) {    log.finest("Multiple selections: " + multipleSelections);  }  if (vsb.getValue() >= s) {    if (vsb.getValue() <= e) {      vsb.setValue(e + 1 - diff);    } else {      vsb.setValue(vsb.getValue() - diff);    }  }  int oldMaxLength=maxLength;  maxLength=maxLength();  if (maxLength != oldMaxLength) {    options|=PAINT_HSCROLL;  }  layout();  repaintNeeded|=(vsbWasVisible ^ vsbVis) || (hsbWasVisible ^ hsbVis);  if (repaintNeeded) {    options|=PAINT_ALL;  }  repaint(s,oldLastDisplayed,options);}  }
class C{  public SamFilterParamsBuilder excludeUnmated(final boolean val){  mExcludeUnmated=val;  return this;}  }
class C{  public boolean hasRolloutUpdatePermission(){  return hasUpdateTargetPermission() && hasReadDistributionPermission() && permissionService.hasPermission(SpPermission.ROLLOUT_MANAGEMENT);}  }
class C{  public boolean containsKey(double key){  return contains(key);}  }
class C{  public Builder withTags(Map<String,String> tags){  this.tags=Collections.unmodifiableMap(tags);  return this;}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public boolean isStoreAndForwardMode(){  return isStoreAndForwardMode(esmClass);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:19.362 -0500",hash_original_method="9E881C2879A613DB548C02DA2AC20129",hash_generated_method="445D9BE0B3E6A16F60D0C20F91B79742") private StringUtils(){}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("DateAcct"))     acctDate=para[i].getParameterAsTimestamp(); else     if (name.equals("No_Of_Periods"))     noOfPeriods=para[i].getParameterAsInt(); else     if (name.equals("AD_Org_ID"))     m_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("BatchDescription"))     batchDesc=para[i].getParameterAsString(); else     if (name.equals("C_AcctSchema_ID"))     m_C_AcctSchema_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DeleteOldImported"))     m_DeleteOldImported="Y".equals(para[i].getParameter()); else     if (name.equals("DocAction"))     docAction=para[i].getParameterAsString(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public void revertJavaNames(){  for (  PojoField field : fields)   field.resetJavaName();}  }
class C{  public boolean isZoomXEnabled(){  return mZoomXEnabled;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testSeqnoSkip() throws Exception {  TungstenProperties config=helper.createSimpleRuntime();  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  DummyApplier dummy=(DummyApplier)((ApplierWrapper)pipeline.getTailApplier()).getApplier();  dummy.setStoreAppliedEvents(true);  Stage stage=pipeline.getStages().get(0);  stage.applySkipCount=5;  pipeline.start(new MockEventDispatcher());  Thread.sleep(1000);  long seqno=pipeline.getLastExtractedSeqno();  assertEquals("Expect seqno to be 9 after 10 Xacts",9,seqno);  long stmtCount=dummy.getTrx().size();  assertEquals("Expect statement count to be 10 after skipping 5 of 10 transactions",10,stmtCount);  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  void reset(){  status=Command.STATUS_NONE;  size=0;  leaderId=-1;  commitIndex=-1;  term=-1;  index=-1;  counter=0;}  }
class C{  public static final long encode(double latitude,double longitude){  checkLatitude(latitude);  checkLongitude(longitude);  final int latEnc=encodeLatitude(latitude) ^ 0x80000000;  final int lonEnc=encodeLongitude(longitude) ^ 0x80000000;  return BitUtil.interleave(lonEnc,latEnc);}  }
class C{  @Override public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {  debugCodeCall("supportsMixedCaseQuotedIdentifiers");  String m=getMode();  return !m.equals("MySQL");}  }
class C{  public synchronized boolean deferDrfDelete(Oplog oplog){  if (pendingBackup.contains(oplog)) {    deferredDrfDeletes.add(oplog);    return true;  }  return false;}  }
class C{  public static long copy(InputStream from,OutputStream to) throws IOException {  if (from == null || to == null)   throw new NullPointerException();  byte[] buf=new byte[BUF_SIZE];  long total=0;  while (true) {    int r=from.read(buf);    if (r == -1) {      break;    }    to.write(buf,0,r);    total+=r;  }  return total;}  }
class C{  public TooManyListenersException(){  super();}  }
class C{  public final void testGetAffineY02(){  assertNull(ECPoint.POINT_INFINITY.getAffineY());}  }
class C{  public boolean isTickWhenFocused(){  return tickWhenFocused;}  }
class C{  public DoubleNode<ILineSegment> successor(DoubleNode<ILineSegment> n){  return n.next();}  }
class C{  private static void clearStack(int depth){  int a=0;  int b=0;  int c=0;  int d=0;  int e=0;  int f=0;  int g=0;  int h=0;  int i=0;  int j=0;  if (depth > 0) {    clearStack(depth - 1);  }}  }
class C{  public void onServerRegistered(int status,int serverIf){  if (DBG)   Log.d(TAG,"onServerRegistered() - status=" + status + " serverIf="+ serverIf);synchronized (mServerIfLock) {    if (mCallback != null) {      mServerIf=serverIf;      mServerIfLock.notify();    } else {      Log.e(TAG,"onServerRegistered: mCallback is null");    }  }}  }
class C{  public Cursor newCursor(String storeName) throws UnknownStoreException {  IStore<ByteArray,byte[]> store=getStore(storeName);  int cursorId=rpcService.getTransactionId();  Cursor cursor=new Cursor(cursorId,store.entries());  cursorMap.put(Integer.valueOf(cursorId),cursor);  return cursor;}  }
class C{  public synchronized void stop(){  cancelled=true;  if (this.taskThread != null) {    taskThread.interrupt();    try {      taskThread.join(2000);    } catch (    InterruptedException e) {    }  }}  }
class C{  private void processStart(final State current){  try {    if (!isFinalStage(current)) {      TaskUtils.sendSelfPatch(this,buildPatch(current.taskState.stage,null,null));    }  } catch (  Throwable e) {    failTask(e,null);  }}  }
class C{  public Matrix4d sub4x3(Matrix4dc subtrahend){  return sub4x3(subtrahend,this);}  }
class C{  @Deprecated public void findNoteCounts(NoteFilter filter,boolean withTrash,OnClientCallback<NoteCollectionCounts> callback){  AsyncReflector.execute(mClient,callback,"findNoteCounts",mAuthenticationToken,filter,withTrash);}  }
class C{  public boolean stateEquals(MersenneTwisterFast other){  if (other == this)   return true;  if (other == null)   return false;  if (mti != other.mti)   return false;  for (int x=0; x < mag01.length; x++)   if (mag01[x] != other.mag01[x])   return false;  for (int x=0; x < mt.length; x++)   if (mt[x] != other.mt[x])   return false;  return true;}  }
class C{  public XMLParser(final Class classToBeBound,final String[] schemas) throws XMLException {  try {    JAXBContext jc=JAXBContext.newInstance(classToBeBound);    marshaller=jc.createMarshaller();    marshaller.setSchema(XMLSchemaUtils.createSchema(schemas));    unmarshaller=jc.createUnmarshaller();    unmarshaller.setSchema(XMLSchemaUtils.createSchema(schemas));  } catch (  JAXBException e) {    throw new XMLException("Cannot instantiate marshaller/unmarshaller for " + classToBeBound,e);  }}  }
class C{  public CompressingCodec(String name,String segmentSuffix,CompressionMode compressionMode,int chunkSize,int maxDocsPerChunk,int blockSize){  super(name,TestUtil.getDefaultCodec());  this.storedFieldsFormat=new CompressingStoredFieldsFormat(name,segmentSuffix,compressionMode,chunkSize,maxDocsPerChunk,blockSize);  this.termVectorsFormat=new CompressingTermVectorsFormat(name,segmentSuffix,compressionMode,chunkSize,blockSize);}  }
class C{  public static byte[] encode(final byte[] data) throws IOException {  ByteArrayOutputStream byteOut=new ByteArrayOutputStream();  DeflaterOutputStream deflateOut=null;  try {    deflateOut=new DeflaterOutputStream(byteOut);    deflateOut.write(data);    deflateOut.close();    byteOut.close();    return byteOut.toByteArray();  }  finally {    deflateOut.close();    byteOut.close();  }}  }
class C{  public void testCreateBytesMessageFromDataWithUnknownContentType() throws Exception {  Message message=Proton.message();  Binary binary=new Binary(new byte[0]);  message.setBody(new Data(binary));  message.setContentType("unknown-content-type");  EncodedMessage em=encodeMessage(message);  JMSMappingInboundTransformer transformer=new JMSMappingInboundTransformer(idGenerator);  javax.jms.Message jmsMessage=transformer.transform(em);  assertNotNull("Message should not be null",jmsMessage);  assertEquals("Unexpected message class type",ServerJMSBytesMessage.class,jmsMessage.getClass());}  }
class C{  public static void reverse(char[] array){  int len=array.length - 1;  int len2=array.length / 2;  for (int i=0; i < len2; i++) {    char tmp=array[i];    array[i]=array[len - i];    array[len - i]=tmp;  }}  }
class C{  @Override public void write(BinaryRawWriterEx writer,Object obj,Throwable err){  writeInvokeAllResult(writer,(Map)obj);}  }
class C{  private Lock lock(final IIndexProcedure<?> proc){  if (proc == null)   throw new IllegalArgumentException();  if (proc.isReadOnly()) {    return readLock();  }  return writeLock();}  }
class C{  private void createMultiplePartitionRegion(VM vm0,VM vm1,VM vm2,VM vm3,int startIndexForRegion,int endIndexForRegion){  vm0.invoke(createMultiplePartitionRegion(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory));  vm1.invoke(createMultiplePartitionRegion(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory));  vm2.invoke(createMultiplePartitionRegion(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory));  vm3.invoke(createMultiplePartitionRegion(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory));}  }
class C{  @Override public void transitionState(RobotState state,RobotState oldState){switch (state) {case DISABLED:    disabledInit();  break;case AUTONOMOUS:autonomousInit();break;case TELEOP:teleopInit();break;case TEST:testInit();break;}}  }
class C{  public synchronized void write(byte[] buf,int off,int len) throws IOException {  super.write(buf,off,len);  crc.update(buf,off,len);}  }
class C{  public boolean isAutoExpandNode(final NodeDescriptor descriptor){  final Object element=descriptor.getElement();  return element == myRootElement || element == myEditor.getRootContainer();}  }
class C{  protected boolean checkPortalIconForUpdate(PortalIcon icon,boolean moved){  Portal portal=icon.getPortal();  if (portal == null) {    icon.remove();    log.error("Removed PortalIcon without Portal");    return false;  }  String name=portal.getDisplayName();  String msg=null;  OBlock fromBlock=portal.getFromBlock();  OBlock toBlock=portal.getToBlock();  if (!_homeBlock.equals(fromBlock) && !_homeBlock.equals(toBlock)) {    msg=Bundle.getMessage("iconNotOnBlock",_homeBlock.getDisplayName(),portal.getDescription());    _adjacentBlock=null;  }  if (msg == null) {    msg=iconIntersectsBlock(icon,_homeBlock);  }  if (log.isDebugEnabled()) {    log.debug("checkPortalIconForUpdate: _homeBlock= " + _homeBlock.getDisplayName() + " icon On _homeBlock "+ (msg == null)+ ".  msg = "+ msg);  }  if (msg == null) {    if (_homeBlock.equals(fromBlock)) {      _adjacentBlock=toBlock;    } else {      _adjacentBlock=fromBlock;    }    if (_adjacentBlock == null) {      _adjacentBlock=findAdjacentBlock(icon);      if (_homeBlock.equals(fromBlock)) {        portal.setToBlock(_adjacentBlock,false);      } else {        portal.setFromBlock(_adjacentBlock,false);      }      _portalList.dataChange();    }    if (moved) {      OBlock block=findAdjacentBlock(icon);      if (log.isDebugEnabled()) {        log.debug("Icon also on " + (block != null ? block.getDisplayName() : "null") + ", _adjacentBlock= "+ (_adjacentBlock != null ? _adjacentBlock.getDisplayName() : "null"));      }      if (block != null && block.equals(_adjacentBlock)) {        _portalList.setSelectedValue(portal,true);        return true;      }    }    if (_adjacentBlock != null) {      msg=iconIntersectsBlock(icon,_adjacentBlock);      if (msg == null) {        _portalList.setSelectedValue(portal,true);        return true;      }    }    if (_adjacentBlock == null) {      _adjacentBlock=findAdjacentBlock(icon);      if (_adjacentBlock != null) {        if (log.isDebugEnabled()) {          log.debug("Current position: _homeBlock= " + _homeBlock.getDisplayName() + " and _adjacentBlock= "+ _adjacentBlock.getDisplayName());        }        int result=JOptionPane.showConfirmDialog(this,Bundle.getMessage("repositionPortal",name,_homeBlock.getDisplayName(),_adjacentBlock.getDisplayName()),Bundle.getMessage("makePortal"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);        if (result == JOptionPane.YES_OPTION) {          if (_homeBlock.equals(fromBlock)) {            portal.setToBlock(_adjacentBlock,true);          } else {            portal.setFromBlock(_adjacentBlock,true);          }        }        msg=null;      } else {        msg=Bundle.getMessage("iconNotOnAdjacent",icon.getNameString(),_homeBlock.getDisplayName());      }    }  }  if (msg != null) {    JOptionPane.showMessageDialog(this,msg,Bundle.getMessage("makePortal"),JOptionPane.INFORMATION_MESSAGE);    clearListSelection();    return false;  }  _portalList.setSelectedValue(portal,true);  _portalList.dataChange();  return true;}  }
class C{  public RegexGraph(String arg,String regex){  transitions=createGraph(arg,regex);}  }
class C{  public static short min(final short... array){  validateArray(array);  short min=array[0];  for (int i=1; i < array.length; i++) {    if (array[i] < min) {      min=array[i];    }  }  return min;}  }
class C{  @Interruptible private void checkOrder(int others){  if (others > 0) {    throw new IllegalArgumentException("EventType constructor: attributes not declared in the required order int/long/double/String");  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TSTRUCT_MEMBER___GET_DEFAULT_MEMBER_ACCESS_MODIFIER:    return getDefaultMemberAccessModifier();case TypesPackage.TSTRUCT_MEMBER___IS_STATIC:  return isStatic();case TypesPackage.TSTRUCT_MEMBER___GET_MEMBER_ACCESS_MODIFIER:return getMemberAccessModifier();}return super.eInvoke(operationID,arguments);}  }
class C{  public byte[] decrypt(byte[] iv,byte[] data) throws IntegrityException {  if (data.length % blockSize != 0) {    throw new IntegrityException("Incorrect data size");  }  if (iv.length != blockSize) {    throw new IntegrityException("Incorrect iv size");  }  byte[] res=new byte[data.length];  byte[] r=new byte[blockSize];  for (int i=0; i < blockSize; i++) {    r[i]=iv[i];  }  int count=data.length / blockSize;  for (int i=0; i < count; i++) {    blockCipher.decryptBlock(data,i * blockSize,res,i * blockSize);    for (int j=0; j < blockSize; j++) {      res[i * blockSize + j]=(byte)((res[i * blockSize + j] & 0xFF) ^ (r[j] & 0xFF));    }    for (int j=0; j < blockSize; j++) {      r[j]=data[i * blockSize + j];    }  }  return res;}  }
class C{  private boolean qoSHandledRequest(final HttpServerRequest request){  for (  QoSRule rule : qosRules) {    if (rule.performAction() && rule.getUrlPattern().matcher(request.uri()).matches()) {      boolean requestHandled=false;      for (      String action : rule.getActions()) {switch (action) {case REJECT_ACTION:          handleReject(request);        requestHandled=true;      break;case WARN_ACTION:    log.warn("QoS Warning: Heavy load detected for rule {}, concerning the request {}",rule.getUrlPattern(),request.uri());  break;}}return requestHandled;}}return false;}  }
class C{  public void testBuildersToTables() throws Exception {  Font[] originalFont=TestFontUtils.loadFont(TEST_FONT_FILE);  long originalChecksum=originalFont[0].checksum();  Builder fontBuilder=TestFontUtils.builderForFontFile(TEST_FONT_FILE);  Set<Integer> builderTags=new HashSet<Integer>(fontBuilder.tableBuilderMap().keySet());  FontHeaderTable.Builder headerBuilder=(FontHeaderTable.Builder)fontBuilder.getTableBuilder(Tag.head);  long modDate=headerBuilder.modified();  headerBuilder.setModified(modDate + 1);  Font font=fontBuilder.build();  Iterator<? extends Table> iter=font.iterator();  while (iter.hasNext()) {    Table table=iter.next();    Header header=table.header();    assertTrue(builderTags.contains(header.tag()));    builderTags.remove(header.tag());  }  assertTrue(builderTags.isEmpty());  FontHeaderTable header=font.getTable(Tag.head);  long afterModDate=header.modified();  assertEquals(modDate + 1,afterModDate);  long fontChecksum=font.checksum();  assertEquals(originalChecksum + 1,fontChecksum);}  }
class C{  public static int deepHashCode(byte[][][] array){  int result=1;  for (int i=0; i < array.length; i++) {    result=31 * result + deepHashCode(array[i]);  }  return result;}  }
class C{  public void paintSliderThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  if (context.getComponent().getClientProperty("Slider.paintThumbArrowShape") == Boolean.TRUE) {    if (orientation == JSlider.HORIZONTAL) {      orientation=JSlider.VERTICAL;    } else {      orientation=JSlider.HORIZONTAL;    }    paintBackground(context,g,x,y,w,h,orientation);  } else {    paintBackground(context,g,x,y,w,h,orientation);  }}  }
class C{  @SubscribeEvent public void onTick(PlayerTickEvent event){  if (event.player.getEntityWorld().isRemote) {    return;  }  count++;  if (count >= maxCount) {    sender=event.player;    if (boxContainers == null) {      buildCommands.refreshAndBuildContainers();    } else {      buildCommands.updateContainers(true);    }    count=0;  }}  }
class C{  public boolean removeTuple(Tuple t){  if (containsTuple(t)) {    removeRow(t.getRow());    return true;  } else {    return false;  }}  }
class C{  protected void updateSelection(Mode mode,int begin,int end){  ClusterOrder order=getClusterOrder();  if (begin < 0 || begin > end || end >= order.size()) {    LOG.warning("Invalid range in updateSelection: " + begin + " .. "+ end);    return;  }  DBIDSelection selContext=context.getSelection();  HashSetModifiableDBIDs selection;  if (selContext == null || mode == Mode.REPLACE) {    selection=DBIDUtil.newHashSet();  } else {    selection=DBIDUtil.newHashSet(selContext.getSelectedIds());  }  for (DBIDArrayIter it=order.iter().seek(begin); it.getOffset() <= end; it.advance()) {    if (mode == Mode.INVERT) {      if (!selection.contains(it)) {        selection.add(it);      } else {        selection.remove(it);      }    } else {      selection.add(it);    }  }  context.setSelection(new DBIDSelection(selection));}  }
class C{  public boolean isTeleportInAllowed(int x,int y){  return teleRules.isInAllowed(x,y);}  }
class C{  public void put(UniqueString key,Object val){  int loc=key.getDefnLoc();  if (loc == -1) {    loc=defnIdx++;    key.setLoc(loc);  }  if (loc >= this.table.length) {    int oldSize=this.table.length;    int newSize=Math.max(2 * oldSize,loc + 1);    Object[] old=this.table;    this.table=new Object[newSize];    System.arraycopy(old,0,this.table,0,old.length);  }  this.table[loc]=val;}  }
class C{  static public CommitTimeIndex createTransient(){  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setBTreeClassName(CommitTimeIndex.class.getName());  metadata.setTupleSerializer(new TupleSerializer(new ASCIIKeyBuilderFactory(Bytes.SIZEOF_LONG)));  return (CommitTimeIndex)BTree.createTransient(metadata);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public AllConnectionsInUseException(Throwable cause){  super(cause);}  }
class C{  public String str(){  return "";}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(POINT)) {    distributionPoint=null;  } else   if (name.equalsIgnoreCase(INDIRECT_CRL)) {    isIndirectCRL=false;  } else   if (name.equalsIgnoreCase(REASONS)) {    revocationReasons=null;  } else   if (name.equalsIgnoreCase(ONLY_USER_CERTS)) {    hasOnlyUserCerts=false;  } else   if (name.equalsIgnoreCase(ONLY_CA_CERTS)) {    hasOnlyCACerts=false;  } else   if (name.equalsIgnoreCase(ONLY_ATTRIBUTE_CERTS)) {    hasOnlyAttributeCerts=false;  } else {    throw new IOException("Attribute name [" + name + "] not recognized by "+ "CertAttrSet:IssuingDistributionPointExtension.");  }  encodeThis();}  }
class C{  public boolean isBarcodeSceneModeEnabled(){  return barcodeSceneModeEnabled;}  }
class C{  public void addSessionParticipant(SessionParticipant sessionParticipant){  Validate.notNull(sessionParticipant);  this.participants.put(sessionParticipant.getSessionId(),sessionParticipant);  this.participantsByUrl.put(sessionParticipant.getRelyingPartyUrl(),sessionParticipant);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean equals(final Object o){  if (!(o instanceof IntegerGeoPoint))   return false;  IntegerGeoPoint oo=(IntegerGeoPoint)o;  return (this.latlon == oo.latlon);}  }
class C{  public static void initiateClientTileEntityEvent(TileEntity te,int event){  try {    if (NetworkManager_initiateClientTileEntityEvent == null)     NetworkManager_initiateClientTileEntityEvent=Class.forName(getPackage() + ".core.network.NetworkManager").getMethod("initiateClientTileEntityEvent",TileEntity.class,Integer.TYPE);    if (instance == null)     instance=getInstance();    NetworkManager_initiateClientTileEntityEvent.invoke(instance,te,event);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private boolean containsMapping(Object key,Object value){  if (key == null) {    HashMapEntry<K,V> e=entryForNullKey;    return e != null && Objects.equal(value,e.value);  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index]; e != null; e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      return Objects.equal(value,e.value);    }  }  return false;}  }
class C{  public int size(){  return serialQueue.size();}  }
class C{  public static void updateBreakpointID(int location,BPINSTRUCTION_STATUS status){  int lineNumber=getBreakpointLineNumber(location);  if (lineNumber != -1) {    breakpoints.get(lineNumber).setBPInstructionStatus(status);    System.out.format("Breakpoint updated at %s, line %d.\n",breakpoints.get(lineNumber).getBPInstructionLocation(),lineNumber);  }}  }
class C{  @SuppressWarnings({"unchecked"}) @Nullable public <V>V addMeta(int key,V val){  assert val != null;synchronized (this) {    if (this.data == null)     this.data=new Object[key + 1]; else     if (this.data.length <= key)     this.data=Arrays.copyOf(this.data,key + 1);    V old=(V)data[key];    data[key]=val;    return old;  }}  }
class C{  synchronized Value computeValue(Session session,Row row){  computeTableFilter.setSession(session);  computeTableFilter.set(row);  return defaultExpression.getValue(session);}  }
class C{  public static void directErrors(OutputStream os,boolean alsoToErrStream){  errorLog=new DataOutputStream(os);  notifyErr=alsoToErrStream;}  }
class C{  public static void generatePseudoKingCastlingMoves(ClassicGame game,long fromBB,PriorityMoveList moves,int initialKingFile,int initialShortRookFile,int initialLongRookFile){  int kingSquare=game.getColorToMove() == WHITE ? getSquare(0,initialKingFile) : getSquare(7,initialKingFile);  long kingSquareBB=getBitboard(kingSquare);  if (game.getColorToMove() == WHITE && (game.getCastling(game.getColorToMove()) & CASTLE_SHORT) != 0 && fromBB == kingSquareBB && emptyBetweenFiles(game,0,initialKingFile,initialShortRookFile) && isKingEmptyOrRook(game,SQUARE_F1,WHITE,initialShortRookFile) && isKingEmptyOrRook(game,SQUARE_G1,WHITE,initialShortRookFile) && !isCastlePathInCheck(game,kingSquare,SQUARE_G1,WHITE)) {    moves.appendLowPriority(new Move(kingSquare,SQUARE_G1,KING,WHITE,EMPTY,Move.SHORT_CASTLING_CHARACTERISTIC));  }  if (game.getColorToMove() == BLACK && (game.getCastling(game.getColorToMove()) & CASTLE_SHORT) != 0 && fromBB == kingSquareBB && emptyBetweenFiles(game,7,initialKingFile,initialShortRookFile) && isKingEmptyOrRook(game,SQUARE_F8,BLACK,initialShortRookFile) && isKingEmptyOrRook(game,SQUARE_G8,BLACK,initialShortRookFile) && !isCastlePathInCheck(game,kingSquare,SQUARE_G8,BLACK)) {    moves.appendLowPriority(new Move(kingSquare,SQUARE_G8,KING,BLACK,EMPTY,Move.SHORT_CASTLING_CHARACTERISTIC));  }  if (game.getColorToMove() == WHITE && (game.getCastling(game.getColorToMove()) & CASTLE_LONG) != 0 && fromBB == kingSquareBB && emptyBetweenFiles(game,0,initialLongRookFile,initialKingFile) && isKingEmptyOrRook(game,SQUARE_D1,WHITE,initialLongRookFile) && isKingEmptyOrRook(game,SQUARE_C1,WHITE,initialLongRookFile) && !isCastlePathInCheck(game,kingSquare,SQUARE_C1,WHITE)) {    moves.appendLowPriority(new Move(kingSquare,SQUARE_C1,KING,WHITE,EMPTY,Move.LONG_CASTLING_CHARACTERISTIC));  }  if (game.getColorToMove() == BLACK && (game.getCastling(game.getColorToMove()) & CASTLE_LONG) != 0 && fromBB == kingSquareBB && emptyBetweenFiles(game,7,initialLongRookFile,initialKingFile) && isKingEmptyOrRook(game,SQUARE_D8,BLACK,initialLongRookFile) && isKingEmptyOrRook(game,SQUARE_C8,BLACK,initialLongRookFile) && !isCastlePathInCheck(game,kingSquare,SQUARE_C8,BLACK)) {    moves.appendLowPriority(new Move(kingSquare,SQUARE_C8,KING,BLACK,EMPTY,Move.LONG_CASTLING_CHARACTERISTIC));  }}  }
class C{  private void combo(){  Combo.popular(cbColecao,ControleDAO.getBanco().getColecaoDAO().combo());  Combo.popular(cbEstratigrafia,ControleDAO.getBanco().getEstratigrafiaDAO().combo());  Combo.popular(cbDesignacao,ControleDAO.getBanco().getDesignacaoDAO().combo());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void handleSecurityPanel(int idx){  listener.onSecurityPanelButtonClick(idx);}  }
class C{  private static void openTorrent(String uriStr){  try {    URI uri=new URI(uriStr);    String scheme=uri.getScheme();    if (scheme == null || !scheme.equalsIgnoreCase("http")) {      return;    }    String authority=uri.getAuthority();    if (authority == null || authority.equals("") || authority.indexOf(' ') != -1) {      return;    }    GUIMediator.instance().openTorrentURI(uri.toString(),false);  } catch (  URISyntaxException e) {    System.out.println(e);  }}  }
class C{  @Deprecated public void deleteEmailList(String emailList) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Attempting to delete emailList '" + emailList + "'.");  URL deleteUrl=new URL(domainUrlBase + "emailList/" + SERVICE_VERSION+ "/"+ emailList);  emailListService.delete(deleteUrl);}  }
class C{  public void deregister(Train train){  if (train == null) {    return;  }  train.dispose();  Integer oldSize=Integer.valueOf(_trainHashTable.size());  _trainHashTable.remove(train.getId());  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_trainHashTable.size()));}  }
class C{  void handleReceivedMultipleImages(Intent i){  ArrayList<Uri> imageUris=i.getParcelableArrayListExtra(Intent.EXTRA_STREAM);  Device device=deviceProvider.getDefaultDevice();  Intent intent=new Intent(this,GenerateMultipleFramesService.class);  intent.putExtra(AbstractGenerateFrameService.KEY_EXTRA_DEVICE,device);  intent.putExtra(GenerateMultipleFramesService.KEY_EXTRA_SCREENSHOTS,imageUris);  startService(intent);}  }
class C{  public static boolean renameTo(final Path self,URI newPathName){  try {    Files.move(self,Paths.get(newPathName));    return true;  } catch (  IOException e) {    return false;  }}  }
class C{  @Deprecated public LBHttpSolrClient(HttpClient httpClient,ResponseParser parser,String... solrServerUrl){  clientIsInternal=(httpClient == null);  this.httpClient=httpClient == null ? constructClient(solrServerUrl) : httpClient;  this.parser=parser;  for (  String s : solrServerUrl) {    ServerWrapper wrapper=new ServerWrapper(makeSolrClient(s));    aliveServers.put(wrapper.getKey(),wrapper);  }  updateAliveList();}  }
class C{  public SourceRuntimeEnvironment(final String processingNodeId,final String pipelineId,final Source source,final StreamingMessageQueueProducer queueProducer,final ExecutorService executorService) throws RequiredInputMissingException {  if (StringUtils.isBlank(processingNodeId))   throw new RequiredInputMissingException("Missing required processing node identifier");  if (StringUtils.isBlank(pipelineId))   throw new RequiredInputMissingException("Missing required pipeline identifier");  if (source == null)   throw new RequiredInputMissingException("Missing required source");  if (queueProducer == null)   throw new RequiredInputMissingException("Missing required queue producer");  if (executorService == null)   throw new RequiredInputMissingException("Missing required executor service");  this.processingNodeId=StringUtils.lowerCase(StringUtils.trim(processingNodeId));  this.pipelineId=StringUtils.lowerCase(StringUtils.trim(pipelineId));  this.sourceId=StringUtils.lowerCase(StringUtils.trim(source.getId()));  this.source=source;  this.source.setIncomingMessageCallback(this);  this.queueProducer=queueProducer;  this.executorService=executorService;  this.executorService.submit(source);  if (logger.isDebugEnabled())   logger.debug("source runtime environment initialized [id=" + source.getId() + "]");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.670 -0500",hash_original_method="DFC79029E1119A3D48A14DE1B9564947",hash_generated_method="609DA5A8C24051423EB44DD6C80C5A5C") private static Map<String,File> newAccessOrder(){  return new LinkedHashMap<String,File>(MAX_SIZE,0.75f,true);}  }
class C{  public List<IComment> appendGlobalCodeNodeComment(final String commentText) throws CouldntSaveDataException, CouldntLoadDataException {  if (m_parentFunction != null) {    return CommentManager.get(m_provider).appendGlobalCodeNodeComment(m_codeNode,commentText);  }  return null;}  }
class C{  protected void testSettings(Connection dbConnection,Properties unProperties,String testEmailAddress) throws SQLException, MailOperationException {  System.out.println("Trying to retrieve data from the database ...");  List<UserData> userData=getUserData(dbConnection);  System.out.println("Found " + userData.size() + " to notify. The following users will be notified:");  for (  UserData user : userData) {    System.out.println("Old UserID: " + user.olduserid + "; new UserID: "+ user.userid+ "; Email: "+ user.email);  }  System.out.println("Trying to send test email ...");  userData=new ArrayList<UserData>();  UserData ud=new UserData();  ud.email=testEmailAddress;  ud.olduserid="olduserid";  ud.userid="newuserid";  userData.add(ud);  sendMail(userData,unProperties);}  }
class C{  public List<StackTraceGraph> makeTraceGraph(String basePackage,Log log){  try {    if (log.getLoggingEvent().getThrowableInfo() == null) {      return null;    }    List<StackTraceGraph> graphs=new ArrayList<>();    StackTraceGraph lastGraph=new StackTraceGraph(basePackage);    graphs.add(lastGraph);    for (    ErStackTraceElement element : log.getLoggingEvent().getThrowableInfo().getThrowable().getStackTraceElements()) {      if (lastGraph.getClassName() != null && !lastGraph.getDeclaringClass().equals(element.getDeclaringClass())) {        lastGraph=new StackTraceGraph(basePackage);        graphs.add(lastGraph);      }      lastGraph.addElement(element);    }    return graphs;  } catch (  Exception e) {    logger.error(e.getMessage(),e);    return null;  }}  }
class C{  private static String convertToQuotedString(String string){  if (string == null || string.length() == 0) {    return null;  }  if (string.charAt(0) == '"' && string.charAt(string.length() - 1) == '"') {    return string;  }  return '\"' + string + '\"';}  }
class C{  public cudaSurfaceObject(){}  }
class C{  public ImageSizesAdapter(Context context,int layoutResourceId){  super(context,layoutResourceId);  mContext=context;  mLayoutResourceId=layoutResourceId;  mLayoutInflater=LayoutInflater.from(mContext);}  }
class C{  private static int CallStaticObjectMethodV(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticObjectMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithVarArg(methodID,argAddress,null);    return env.pushJNIRef(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  void startForegroundCompat(int id,Notification notification){  if (mStartForeground != null) {    mStartForegroundArgs[0]=Integer.valueOf(id);    mStartForegroundArgs[1]=notification;    invokeMethod(mStartForeground,mStartForegroundArgs);    return;  }  mSetForegroundArgs[0]=Boolean.TRUE;  invokeMethod(mSetForeground,mSetForegroundArgs);  mNM.notify(id,notification);}  }
class C{  public static List<CoreLabel> toCharacterSequence(String str){  Sequence<IString> sequence=IStrings.tokenize(str);  return toCharacterSequence(sequence);}  }
class C{  public static void decomposition(Image inputImg,Image coarseImg,Image horizontalImg,Image verticalImg,Image diagonalImg,Filter filterG,Filter filterH,int method){  Image tempImg=null;  tempImg=new Image(coarseImg.getWidth(),inputImg.getHeight());  convoluteLines(tempImg,inputImg,filterH,method);  convoluteRows(coarseImg,tempImg,filterH,method);  convoluteRows(horizontalImg,tempImg,filterG,method);  tempImg=new Image(verticalImg.getWidth(),inputImg.getHeight());  convoluteLines(tempImg,inputImg,filterG,method);  convoluteRows(verticalImg,tempImg,filterH,method);  convoluteRows(diagonalImg,tempImg,filterG,method);}  }
class C{  public boolean isThisParameter(){  return (o1 instanceof SootMethod && o2.equals(PointsToAnalysis.THIS_NODE)) ? true : false;}  }
class C{  public static boolean putMapNotEmptyKeyAndValue(Map<String,String> map,String key,String value){  if (map == null || StringUtils.isEmpty(key) || StringUtils.isEmpty(value)) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  private void addChannelToFavorites(String channel){  channel=prepareChannel(channel);  if (channel != null) {    settings.setAdd(FAVORITES_SETTING,channel);  }}  }
class C{  public synchronized DbException recompile(Session session,boolean force,boolean clearIndexCache){  try {    compileViewQuery(session,querySQL);  } catch (  DbException e) {    if (!force) {      return e;    }  }  ArrayList<TableView> views=getViews();  if (views != null) {    views=New.arrayList(views);  }  initColumnsAndTables(session);  if (views != null) {    for (    TableView v : views) {      DbException e=v.recompile(session,force,false);      if (e != null && !force) {        return e;      }    }  }  if (clearIndexCache) {    clearIndexCaches(database);  }  return force ? null : createException;}  }
class C{  public void prepareMatrixOffset(boolean inverted){  mMatrixOffset.reset();  if (!inverted)   mMatrixOffset.postTranslate(mViewPortHandler.offsetLeft(),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom()); else {    mMatrixOffset.setTranslate(-(mViewPortHandler.getChartWidth() - mViewPortHandler.offsetRight()),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom());    mMatrixOffset.postScale(-1.0f,1.0f);  }}  }
class C{  public List<FiredTriggerRecord> selectFiredTriggerRecords(Connection conn,String triggerName,String groupName) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    List<FiredTriggerRecord> lst=new LinkedList<FiredTriggerRecord>();    if (triggerName != null) {      ps=conn.prepareStatement(rtp(SELECT_FIRED_TRIGGER));      ps.setString(1,triggerName);      ps.setString(2,groupName);    } else {      ps=conn.prepareStatement(rtp(SELECT_FIRED_TRIGGER_GROUP));      ps.setString(1,groupName);    }    rs=ps.executeQuery();    while (rs.next()) {      FiredTriggerRecord rec=new FiredTriggerRecord();      rec.setFireInstanceId(rs.getString(COL_ENTRY_ID));      rec.setFireInstanceState(rs.getString(COL_ENTRY_STATE));      rec.setFireTimestamp(rs.getLong(COL_FIRED_TIME));      rec.setScheduleTimestamp(rs.getLong(COL_SCHED_TIME));      rec.setPriority(rs.getInt(COL_PRIORITY));      rec.setSchedulerInstanceId(rs.getString(COL_INSTANCE_NAME));      rec.setTriggerKey(triggerKey(rs.getString(COL_TRIGGER_NAME),rs.getString(COL_TRIGGER_GROUP)));      if (!rec.getFireInstanceState().equals(STATE_ACQUIRED)) {        rec.setJobDisallowsConcurrentExecution(getBoolean(rs,COL_IS_NONCONCURRENT));        rec.setJobRequestsRecovery(rs.getBoolean(COL_REQUESTS_RECOVERY));        rec.setJobKey(jobKey(rs.getString(COL_JOB_NAME),rs.getString(COL_JOB_GROUP)));      }      lst.add(rec);    }    return lst;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  protected byte[] engineDoFinal(byte[] input,int inputOffset,int inputLen) throws IllegalBlockSizeException, BadPaddingException {  return core.doFinal(input,inputOffset,inputLen);}  }
class C{  @Override public void mouseDragged(MouseEvent e){  int x=e.getX();  int y=e.getY();  if (selecting_area) {    if (shaping_selection) {      int dx=(x - origin_x) / 4;      int dy=(y - origin_y) / 4;      if (shaping_action == CursorSelectionPosition.INSIDE || shaping_action == CursorSelectionPosition.W_SIDE || shaping_action == CursorSelectionPosition.NW_CORNER || shaping_action == CursorSelectionPosition.SW_CORNER)       selection_start_x=(int)(ssx + dx / zoom_level);      if (shaping_action == CursorSelectionPosition.INSIDE || shaping_action == CursorSelectionPosition.N_SIDE || shaping_action == CursorSelectionPosition.NW_CORNER || shaping_action == CursorSelectionPosition.NE_CORNER)       selection_start_z=(int)(ssz + dy / zoom_level);      if (shaping_action == CursorSelectionPosition.INSIDE || shaping_action == CursorSelectionPosition.E_SIDE || shaping_action == CursorSelectionPosition.NE_CORNER || shaping_action == CursorSelectionPosition.SE_CORNER)       selection_end_x=(int)(sex + dx / zoom_level);      if (shaping_action == CursorSelectionPosition.INSIDE || shaping_action == CursorSelectionPosition.S_SIDE || shaping_action == CursorSelectionPosition.SW_CORNER || shaping_action == CursorSelectionPosition.SE_CORNER)       selection_end_z=(int)(sez + dy / zoom_level);      repaint();      return;    }    selection_end_x=(int)Math.floor((e.getX() / zoom_level - shift_x) / 4);    selection_end_z=(int)Math.floor((e.getY() / zoom_level - shift_y) / 4);    if (selectchunks) {      if (selection_start_x % 16 != 0) {        selection_start_x=Math.round(selection_start_x / 16) * 16;      }      if (selection_start_z % 16 != 0) {        selection_start_z=Math.round(selection_start_z / 16) * 16;      }      if (selection_end_x % 16 != 0) {        selection_end_x=Math.round(selection_end_x / 16) * 16;      }      if (selection_end_z % 16 != 0) {        selection_end_z=Math.round(selection_end_z / 16) * 16;      }    }    repaint();    return;  }  if (moving_map) {    shift_x+=(x - last_x) / zoom_level;    shift_y+=(y - last_y) / zoom_level;    last_x=x;    last_y=y;    redraw(true);    repaint();  }}  }
class C{  public byte[] convertNv21toJpeg(byte[] data_copy,int w,int h,int[] strides){  Log.e(TAG,"TIMER_BEGIN NV21 to Jpeg Conversion.");  YuvImage yuvImage=new YuvImage(data_copy,ImageFormat.NV21,w,h,strides);  ByteArrayOutputStream postViewBytes=new ByteArrayOutputStream();  yuvImage.compressToJpeg(new Rect(0,0,w,h),90,postViewBytes);  try {    postViewBytes.flush();  } catch (  IOException e) {    e.printStackTrace();  }  Log.e(TAG,"TIMER_END NV21 to Jpeg Conversion.");  return postViewBytes.toByteArray();}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;    return;  }}  }
class C{  public DexcoderException(Throwable e){  super(e);  this.resultMsg=e.getMessage();}  }
class C{  private Long parseLong(final String input){  try {    return Long.parseLong(input);  } catch (  NumberFormatException e) {    return null;  }}  }
class C{  public static Object[] ordinalArray(Iterator tuples,String field){  return DataLib.ordinalArray(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  protected void filterByUserId(List<OrderRestRep> orders){  if (userInfo != null) {    String userId=userInfo.getIdentifier();    Iterator<OrderRestRep> iter=orders.iterator();    while (iter.hasNext()) {      if (!StringUtils.equals(userId,iter.next().getSubmittedBy())) {        iter.remove();      }    }  }}  }
class C{  private void loadCache(int count) throws IOException {  int charToRead=count == 0 ? 0 : count - 1;  if (cachePosition + charToRead >= cacheSize) {    if (cacheSize == 0) {      cacheSize=reader.read(cacheBuffer,0,cacheBuffer.length);      cachePosition=0;    } else     if (cacheSize == cacheBuffer.length) {      int halfCacheSize=cacheSize / 2;      System.arraycopy(cacheBuffer,halfCacheSize,cacheBuffer,0,halfCacheSize);      cachePosition-=halfCacheSize;      if (cachePinPosition != -1) {        cachePinPosition-=halfCacheSize;      }      int charsRead=reader.read(cacheBuffer,halfCacheSize,cacheSize - halfCacheSize);      if (charsRead == -1) {        cacheSize=halfCacheSize;      } else {        cacheSize=charsRead + halfCacheSize;      }    }  }}  }
class C{  public int cospan(final char[] c,int from){  final int length=length(), n=c.length;  if (n == 0)   return from < 0 ? length : (from < length ? length - from : 0);  final int bloomFilter=buildFilter(c,n);  final char[] a=array;  if (from < 0)   from=0;  int i=from - 1, k;  while (++i < length) {    if ((bloomFilter & (1 << (a[i] & 0x1F))) != 0) {      k=n;      while (k-- != 0)       if (a[i] == c[k])       break;      if (k != -1)       return i - from;    }  }  return i - from;}  }
class C{  protected boolean shallBeMoved(LocalDate fixed,MovingCondition mc){  return fixed.getDayOfWeek() == xmlUtil.getWeekday(mc.getSubstitute());}  }
class C{  public final IOContainer run(final int logVerbosity) throws OperatorException {  return run(new IOContainer(),logVerbosity);}  }
class C{  public Movie(){}  }
class C{  @Override public int hashCode(){  return super.hashCode();}  }
class C{  public static String name(DataObjectRestRep value){  return value != null ? value.getName() : null;}  }
class C{  public String toString(){  return RANKS[this.rank] + " of " + SUITS[this.suit];}  }
class C{  public void error(RequestContext context,Object obj,String method,Exception e){  error(context,obj.getClass().getName() + "." + method,e);}  }
class C{  public String name(){  if (SystemType.isMacOSX() || (SystemType.isWindows() && Double.valueOf(System.getProperty("os.version")) >= 6)) {    return "(LocoNet MS100 not available)";  } else {    return "LocoNet MS100";  }}  }
class C{  public static void main(String[] args){  TermJob tj=new TermJob();  TermJobInfo termJobInfo=tj.execute(args);  OozieUtil oozieUtil=new OozieUtil();  try {    oozieUtil.persistBeanData(termJobInfo,false);  } catch (  Exception e) {    LOGGER.error(e);    throw new MetadataException(e);  }}  }
class C{  public void removeNotify(){  dropTargetContextPeer=null;  transferable=null;}  }
class C{  public static byte[] buildAacAudioSpecificConfig(int sampleRate,int numChannels){  int sampleRateIndex=-1;  for (int i=0; i < AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE.length; ++i) {    if (sampleRate == AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE[i]) {      sampleRateIndex=i;    }  }  int channelConfig=-1;  for (int i=0; i < AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE.length; ++i) {    if (numChannels == AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE[i]) {      channelConfig=i;    }  }  byte[] csd=new byte[2];  csd[0]=(byte)((AUDIO_OBJECT_TYPE_AAC_LC << 3) | (sampleRateIndex >> 1));  csd[1]=(byte)(((sampleRateIndex & 0x1) << 7) | (channelConfig << 3));  return csd;}  }
class C{  public void clear(){  return;}  }
class C{  public void beforeProcessControllerEvent(@Observes BeforeControllerEvent event){  if (usingCookies()) {    final Cookie[] cookies=request.getCookies();    if (null != cookies) {      for (      Cookie cookie : cookies) {        if (cookie.getName().equals(COOKIE_NAME)) {          request.setAttribute(SCOPE_ID,cookie.getValue());          return;        }      }    }  } else {    final String scopeId=event.getUriInfo().getQueryParameters().getFirst(SCOPE_ID);    if (scopeId != null) {      request.setAttribute(SCOPE_ID,scopeId);    }  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== RandomIndexPack ======================\n");  sb.append(this.header.toString());  Set<Map.Entry<Long,List<Long>>> entrySet=this.partitionMap.entrySet();  for (  Map.Entry<Long,List<Long>> entry : entrySet) {    sb.append(String.format("SID = %d%n",entry.getKey()));    long number=0;    for (    long byteOffset : entry.getValue()) {      sb.append(String.format("%02d: byteOffset = %013d(0x%011x)%n",number++,byteOffset,byteOffset));    }  }  sb.append(String.format("length = %d%n",this.length));  return sb.toString();}  }
class C{  public void clear(){  events.clear();}  }
class C{  public T add(T elem){  if (elem == null)   throw new NullPointerException();  T interned;  WeakEntry<T> e=new WeakEntry<>(elem,stale);  do {    expungeStaleElements();    WeakEntry<T> exist=map.putIfAbsent(e,e);    interned=(exist == null) ? elem : exist.get();  } while (interned == null);  return interned;}  }
class C{  public int rtf(XPathContext support){  DTM frag=support.createDocumentFragment();  frag.appendTextChild(str());  return frag.getDocument();}  }
class C{  private void copySplitPointsFromBidiSplitter(BidiSplitter splitter){  int length=splitter.countTextRuns();  for (int i=0; i < length; i++) {    BidiTextRun run=splitter.getVisualRun(i);    splitPoints.put(run.getStart(),run);  }}  }
class C{  public void run(){  InputStream inputStream=null;  JOSMTolerantFastXMLParser parser=null;  try {    if (file.getName().equals("-")) {      inputStream=System.in;    } else {      inputStream=new FileInputStream(file);    }    inputStream=new CompressionActivator(compressionMethod).createCompressionInputStream(inputStream);    XMLInputFactory factory=XMLInputFactory.newInstance();    factory.setProperty(XMLInputFactory.IS_COALESCING,false);    factory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE,false);    factory.setProperty(XMLInputFactory.IS_VALIDATING,false);    XMLStreamReader xpp=factory.createXMLStreamReader(inputStream);    parser=new JOSMTolerantFastXMLParser(sink,xpp,enableDateParsing);    parser.readOsm();    sink.complete();  } catch (  Exception e) {    throw new OsmosisRuntimeException("Unable to read XML file " + file + ".",e);  } finally {    sink.release();    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {        log.log(Level.SEVERE,"Unable to close input stream.",e);      }      inputStream=null;    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected VirtualNAS queryRegisteredResource(URI id){  ArgValidator.checkUri(id);  VirtualNAS vNas=_dbClient.queryObject(VirtualNAS.class,id);  ArgValidator.checkEntity(vNas,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(vNas.getRegistrationStatus())) {    throw APIException.badRequests.resourceNotRegistered(VirtualNAS.class.getSimpleName(),id);  }  return vNas;}  }
class C{  public static ResolveUserTokenResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ResolveUserTokenResponseE object=new ResolveUserTokenResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","resolveUserTokenResponse").equals(reader.getName())) {          object.setResolveUserTokenResponse(ResolveUserTokenResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected <T>T fromJson(String json,Class<T> type) throws IOException {  return MAPPER.readValue(json,type);}  }
class C{  public void selectStatistics(List<Parameter> params){}  }
class C{  public ECKeySizeParameterSpec(int keySize){  this.keySize=keySize;}  }
class C{  void requireDelayedInvalidation(){  this.invalidationDelayedRequired=true;  LOGGER.trace("Set delayed invalidation required");}  }
class C{  public void registerRitual(NecronomiconRitual ritual){  if (ritual.getBookType() <= 4 && ritual.getBookType() >= 0) {    for (    NecronomiconRitual entry : rituals)     if (ritual.getUnlocalizedName().equals(entry.getUnlocalizedName())) {      FMLLog.log("RitualRegistry",Level.ERROR,"Necronomicon Ritual already registered: %s",ritual.getUnlocalizedName());      return;    }    rituals.add(ritual);  } else   FMLLog.log("RitualRegistry",Level.ERROR,"Necronomicon book type does not exist: %d",ritual.getBookType());}  }
class C{  public ExternalPriceModelException(Throwable cause){  super(cause);}  }
class C{  @SuppressWarnings("unchecked") private void writeNSDecls() throws SAXException {  Enumeration<String> prefixes=(Enumeration<String>)nsSupport.getDeclaredPrefixes();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    String uri=nsSupport.getURI(prefix);    if (uri == null) {      uri="";    }    write(' ');    if ("".equals(prefix)) {      write("xmlns=\"");    } else {      write("xmlns:");      write(prefix);      write("=\"");    }    writeEscUTF16(uri,0,uri.length(),true);    write('\"');  }}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.annotationValue();  value.write(writer);}  }
class C{  private static StepPattern createDefaultStepPattern(Compiler compiler,int opPos,MatchPatternIterator mpi,int analysis,StepPattern tail,StepPattern head) throws javax.xml.transform.TransformerException {  int stepType=compiler.getOp(opPos);  boolean simpleInit=false;  boolean prevIsOneStepDown=true;  int whatToShow=compiler.getWhatToShow(opPos);  StepPattern ai=null;  int axis, predicateAxis;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:    prevIsOneStepDown=false;  Expression expr;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:  expr=compiler.compile(opPos);break;default :expr=compiler.compile(opPos + 2);}axis=Axis.FILTEREDLIST;predicateAxis=Axis.FILTEREDLIST;ai=new FunctionPattern(expr,axis,predicateAxis);simpleInit=true;break;case OpCodes.FROM_ROOT:whatToShow=DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT;axis=Axis.ROOT;predicateAxis=Axis.ROOT;ai=new StepPattern(DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT,axis,predicateAxis);break;case OpCodes.FROM_ATTRIBUTES:whatToShow=DTMFilter.SHOW_ATTRIBUTE;axis=Axis.PARENT;predicateAxis=Axis.ATTRIBUTE;break;case OpCodes.FROM_NAMESPACE:whatToShow=DTMFilter.SHOW_NAMESPACE;axis=Axis.PARENT;predicateAxis=Axis.NAMESPACE;break;case OpCodes.FROM_ANCESTORS:axis=Axis.DESCENDANT;predicateAxis=Axis.ANCESTOR;break;case OpCodes.FROM_CHILDREN:axis=Axis.PARENT;predicateAxis=Axis.CHILD;break;case OpCodes.FROM_ANCESTORS_OR_SELF:axis=Axis.DESCENDANTORSELF;predicateAxis=Axis.ANCESTORORSELF;break;case OpCodes.FROM_SELF:axis=Axis.SELF;predicateAxis=Axis.SELF;break;case OpCodes.FROM_PARENT:axis=Axis.CHILD;predicateAxis=Axis.PARENT;break;case OpCodes.FROM_PRECEDING_SIBLINGS:axis=Axis.FOLLOWINGSIBLING;predicateAxis=Axis.PRECEDINGSIBLING;break;case OpCodes.FROM_PRECEDING:axis=Axis.FOLLOWING;predicateAxis=Axis.PRECEDING;break;case OpCodes.FROM_FOLLOWING_SIBLINGS:axis=Axis.PRECEDINGSIBLING;predicateAxis=Axis.FOLLOWINGSIBLING;break;case OpCodes.FROM_FOLLOWING:axis=Axis.PRECEDING;predicateAxis=Axis.FOLLOWING;break;case OpCodes.FROM_DESCENDANTS_OR_SELF:axis=Axis.ANCESTORORSELF;predicateAxis=Axis.DESCENDANTORSELF;break;case OpCodes.FROM_DESCENDANTS:axis=Axis.ANCESTOR;predicateAxis=Axis.DESCENDANT;break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}if (null == ai) {whatToShow=compiler.getWhatToShow(opPos);ai=new StepPattern(whatToShow,compiler.getStepNS(opPos),compiler.getStepLocalName(opPos),axis,predicateAxis);}if (false || DEBUG_PATTERN_CREATION) {System.out.print("new step: " + ai);System.out.print(", axis: " + Axis.getNames(ai.getAxis()));System.out.print(", predAxis: " + Axis.getNames(ai.getAxis()));System.out.print(", what: ");System.out.print("    ");ai.debugWhatToShow(ai.getWhatToShow());}int argLen=compiler.getFirstPredicateOpPos(opPos);ai.setPredicates(compiler.getCompiledPredicates(argLen));return ai;}  }
class C{  @Override public double variance(){  QL.require(sampleWeight_ > 0.0,UNSUFFICIENT_SAMPLE_WEIGHT);  QL.require(sampleNumber_ > 1,UNSUFFICIENT_SAMPLE_NUMBER);  double m=mean();  double v=quadraticSum_ / sampleWeight_;  v-=m * m;  v*=sampleNumber_ / (sampleNumber_ - 1.0);  QL.ensure(v >= 0.0,NEGATIVE_VARIANCE);  return v;}  }
class C{  public void stateChanged(ChangeEvent e){  boolean visible=m_data.documentQuery && tabbedPane.getSelectedIndex() == 1;  bRePost.setVisible(visible);  bExport.setVisible(tabbedPane.getSelectedIndex() == 1);  if (Ini.isPropertyBool(Ini.P_SHOW_ADVANCED))   forcePost.setVisible(visible);}  }
class C{  private void notifyMoney(final PoliticalActionAttachment paa,final boolean enough){  if (enough) {    sendNotification("Charging " + paa.getCostPU() + " PU's to perform this action");  } else {    sendNotification("You don't have ennough money, you need " + paa.getCostPU() + " PU's to perform this action");  }}  }
class C{  private void createColorBackground(Rectangle bounds){  m_height=Math.max(bounds.y + bounds.height,m_height);  m_width=Math.max(bounds.x + bounds.width,m_width);  m_backImage=new BufferedImage(m_width,m_height,BufferedImage.TYPE_INT_ARGB_PRE);}  }
class C{  public static AbImageLoader newInstance(Context context){  AbImageLoader imageDownloader=new AbImageLoader(context);  return imageDownloader;}  }
class C{  String addParametersAndRetrieveHeader(String requestUrl,String httpMethod) throws OAuthException {  addCommonRequestParameters(requestUrl,httpMethod);  KeyValuePair headerParams=new HeaderKeyValuePair();  headerParams.add(OAuthParameters.REALM_KEY,parameters.getRealm());  headerParams.add(OAuthParameters.OAUTH_SIGNATURE_KEY,parameters.getOAuthSignature());  for (  Map.Entry<String,String> e : parameters.getBaseParameters().entrySet()) {    if (e.getValue().length() > 0) {      headerParams.add(e.getKey(),e.getValue());    }  }  parameters.reset();  return (new StringBuilder()).append(OAuthParameters.OAUTH_KEY).append(" ").append(headerParams.toString()).toString();}  }
class C{  public Panel(){  super(new GridBagLayout());  initCountryIcons();  setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),resources.getString("Panel.title")));  listeners.put("AddLanguageButtonAction",new AddLanguageButtonAction());  listeners.put("RemoveLanguageButtonAction",new RemoveLanguageButtonAction());  listeners.put("UpLanguageButtonAction",new UpLanguageButtonAction());  listeners.put("DownLanguageButtonAction",new DownLanguageButtonAction());  listeners.put("ClearLanguageButtonAction",new ClearLanguageButtonAction());  userList=new JList(userListModel);  userList.setCellRenderer(new IconAndTextCellRenderer());  languageList=new JList(languageListModel);  languageList.setCellRenderer(new IconAndTextCellRenderer());  StringTokenizer st;  st=new StringTokenizer(resources.getString("Country.list")," ");  while (st.hasMoreTokens()) {    languageListModel.addElement(st.nextToken());  }  ExtendedGridBagConstraints constraints=new ExtendedGridBagConstraints();  constraints.insets=new Insets(5,5,5,5);  constraints.weightx=1.0;  constraints.weighty=1.0;  constraints.fill=GridBagConstraints.BOTH;  constraints.setGridBounds(0,0,1,1);  JScrollPane sp=new JScrollPane();  sp.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(),resources.getString("Languages.title")),BorderFactory.createLoweredBevelBorder()));  sp.getViewport().add(languageList);  this.add(sp,constraints);  languageList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  languageList.addListSelectionListener(new LanguageListSelectionListener());  constraints.setGridBounds(2,0,1,1);  JScrollPane sp2=new JScrollPane();  sp2.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(),resources.getString("User.title")),BorderFactory.createLoweredBevelBorder()));  sp2.getViewport().add(userList);  this.add(sp2,constraints);  userList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  userList.addListSelectionListener(new UserListSelectionListener());  constraints.setGridBounds(0,1,3,1);  constraints.weightx=0;  constraints.weighty=0;  this.add(new JLabel(resources.getString("InfoLabel.text")),constraints);  ButtonFactory bf=new ButtonFactory(bundle,this);  JPanel p=new JPanel(new GridLayout(5,1,0,3));  p.add(addLanguageButton=bf.createJButton("AddLanguageButton"));  addLanguageButton.setEnabled(false);  p.add(removeLanguageButton=bf.createJButton("RemoveLanguageButton"));  removeLanguageButton.setEnabled(false);  p.add(upLanguageButton=bf.createJButton("UpLanguageButton"));  upLanguageButton.setEnabled(false);  p.add(downLanguageButton=bf.createJButton("DownLanguageButton"));  downLanguageButton.setEnabled(false);  p.add(clearLanguageButton=bf.createJButton("ClearLanguageButton"));  clearLanguageButton.setEnabled(false);  JPanel t=new JPanel(new GridBagLayout());  constraints.setGridBounds(1,0,1,1);  this.add(t,constraints);  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.setGridBounds(0,0,1,1);  constraints.insets=new Insets(0,0,0,0);  t.add(p,constraints);  sp2.setPreferredSize(sp.getPreferredSize());}  }
class C{  private void updateAuthDescriptions(){  mAuthDescs=AccountManager.get(this).getAuthenticatorTypes();  for (int i=0; i < mAuthDescs.length; i++) {    mTypeToAuthDescription.put(mAuthDescs[i].type,mAuthDescs[i]);  }  onAuthDescriptionsUpdated();}  }
class C{  @Override public boolean swipe(Selector obj,String dir,int steps) throws UiObjectNotFoundException {  return swipe(device.findObject(obj.toUiSelector()),dir,steps);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:41.054 -0500",hash_original_method="171496FE667133D572716C296277B927",hash_generated_method="D3FD447AE5153B73BF6854A34B2A5107") private void newline(){  print(System.lineSeparator());}  }
class C{  public int read(char[] buffer,int offset,int length) throws IOException {  byte[] bytes=new byte[length];  int count=_file.read(bytes,0,length);  for (int i=0; i < count; i++) {    buffer[offset + i]=(char)bytes[i];  }  return count;}  }
class C{  public void close() throws IOException {}  }
class C{  void reopenReadChannel() throws FileNotFoundException {  readCh.close();  readCh=new StripedFileChannel(file,readCh.chs.length);}  }
class C{  protected ForkJoinWorkerThread(ForkJoinPool pool){  super(NAME_PLACEHOLDER);  this.pool=pool;  this.workQueue=pool.registerWorker(this);}  }
class C{  @Override public void addDroppedDataCount(int count){  droppedDataCount+=count;}  }
class C{  public double score(String str,boolean verbose){  if (verbose == true) {    System.out.println("String is " + str);  }  double log_prob=0;  int no_chars=str.length();  for (int i=-1; i < (no_chars - 1); i++) {    String first_char;    String second_char;    if (i == -1) {      first_char="<s>";      second_char=str.substring(0,1);    } else {      first_char=str.substring(i,i + 1);      second_char=str.substring(i + 1,i + 2);    }    if (first_char.equals(" ")) {      first_char="<w>";    }    if (second_char.equals(" ")) {      second_char="<w>";    }    String bigram=first_char + " " + second_char;    if (verbose == true) {      System.out.println("Bigram is " + bigram);    }    if (bigram_probs.containsKey(bigram)) {      double bigram_prob=bigram_probs.get(bigram);      log_prob=log_prob + bigram_prob;      if (verbose == true) {        System.out.println("Direct bigram prob: " + Math.pow(10,bigram_prob) + "\n");      }    } else     if (unigram_probs.containsKey(second_char) && unigram_backoff_probs.containsKey(first_char)) {      double unigram_backoff_prob=unigram_backoff_probs.get(first_char);      log_prob=log_prob + unigram_backoff_prob;      double unigram_prob=unigram_probs.get(second_char);      log_prob=log_prob + unigram_prob;      if (verbose == true) {        double bigram_prob=unigram_backoff_prob + unigram_prob;        System.out.println("Inferred bigram prob: " + Math.pow(10,bigram_prob) + " (formed from unigram probs "+ first_char+ ": "+ Math.pow(10,unigram_backoff_prob)+ " and "+ second_char+ ": "+ Math.pow(10,unigram_prob)+ ")\n");      }    } else {      log_prob+=unknown_char_prob;    }  }  double avg_prob=Math.pow(10,log_prob / ((double)no_chars));  return avg_prob;}  }
class C{  public void install(PTQuery query,QueryResultsCallback resultsCallback){  if (!installedQueries.containsKey(query)) {    QueryAdvice advice=generateAdvice(query);    PivotTracingCommand.Builder b=PivotTracingCommand.newBuilder();    b.getUpdateBuilder().addAllWeave(advice.getWeaveSpecs());    PivotTracingCommand command=b.build();    log.info("Publishing command to {}:\n{}",PivotTracingConfig.COMMANDS_TOPIC,command);    PubSub.publish(PivotTracingConfig.COMMANDS_TOPIC,command);    installedQueries.put(query,advice);  }  if (resultsCallback != null) {    subscriber().subscribe(queryId(query),resultsCallback);  }}  }
class C{  public static void murmur3(final BitVector bv,final long prefixLength,final long[] hh1,final long[] hh2,final long[] cc1,final long cc2[],final long lcp,final long h[]){  final int startStateWord=(int)(Math.min(lcp,prefixLength) / (2 * Long.SIZE));  long from=startStateWord * 2L * Long.SIZE;  long h1=hh1[startStateWord];  long h2=hh2[startStateWord];  long c1=cc1[startStateWord];  long c2=cc2[startStateWord];  long k1, k2;  while (prefixLength - from >= Long.SIZE * 2) {    k1=bv.getLong(from,from + Long.SIZE);    k2=bv.getLong(from + Long.SIZE,from+=2 * Long.SIZE);    k1*=c1;    k1=Long.rotateLeft(k1,23);    k1*=c2;    h1^=k1;    h1+=h2;    h2=Long.rotateLeft(h2,41);    k2*=c2;    k2=Long.rotateLeft(k2,23);    k2*=c1;    h2^=k2;    h2+=h1;    h1=h1 * 3 + 0x52dce729;    h2=h2 * 3 + 0x38495ab5;    c1=c1 * 5 + 0x7b7d159c;    c2=c2 * 5 + 0x6bce6396;  }  if (prefixLength - from != 0) {    if (prefixLength - from > Long.SIZE) {      k1=bv.getLong(from,from + Long.SIZE);      k2=bv.getLong(from + Long.SIZE,prefixLength);    } else {      k1=bv.getLong(from,prefixLength);      k2=0;    }    k1*=c1;    k1=Long.rotateLeft(k1,23);    k1*=c2;    h1^=k1;    h1+=h2;    h2=Long.rotateLeft(h2,41);    k2*=c2;    k2=Long.rotateLeft(k2,23);    k2*=c1;    h2^=k2;    h2+=h1;    h1=h1 * 3 + 0x52dce729;    h2=h2 * 3 + 0x38495ab5;    c1=c1 * 5 + 0x7b7d159c;    c2=c2 * 5 + 0x6bce6396;  }  h2^=prefixLength;  h1+=h2;  h2+=h1;  h1=finalizeMurmur3(h1);  h2=finalizeMurmur3(h2);  h1+=h2;  h2+=h1;  h[0]=h1;  h[1]=h2;}  }
class C{  public void removeDocumentListener(DocumentListener listener){  this.documentListeners.remove(listener);}  }
class C{  public double truePositiveRate(int classindex){  int tp=truePositives(classindex);  return (double)tp / ((double)(tp + falseNegatives(classindex)));}  }
class C{  public TDoubleObjectHashMap(TDoubleHashingStrategy strategy){  _hashingStrategy=strategy;}  }
class C{  private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos < buf.length) {      return buf[pos++];    }    return in.read();  }}  }
class C{  public void executeCqs(String regionName) throws CqException {  try {    getCqService().executeAllRegionCqs(regionName);  } catch (  CqException cqe) {    if (logger.isDebugEnabled()) {      logger.debug("Unable to execute cqs on the specified region. Error :{}",cqe.getMessage(),cqe);    }  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public final void deliver(QueuedInputEvent q){  if ((q.mFlags & QueuedInputEvent.FLAG_FINISHED) != 0) {    forward(q);  } else   if (mView == null || !mAdded) {    Slog.w(TAG,"Dropping event due to root view being removed: " + q.mEvent);    finish(q,false);  } else   if (!mAttachInfo.mHasWindowFocus && !q.mEvent.isFromSource(InputDevice.SOURCE_CLASS_POINTER) && !isTerminalInputEvent(q.mEvent)) {    Slog.w(TAG,"Dropping event due to no window focus: " + q.mEvent);    finish(q,false);  } else {    apply(q,onProcess(q));  }}  }
class C{  private static void printErr(String msg){  System.out.println("Error: " + msg);}  }
class C{  private void makeExcitatory(final Neuron source,List<Synapse> syns,boolean looseSynapses){  for (  Neuron target : getNeuronsInRadius(source,excitatoryRadius)) {    if (!sourceNeurons.contains(target)) {      continue;    }    if (Network.getSynapse(source,target) != null) {      continue;    }    if (!allowSelfConnections) {      if (source == target) {        continue;      }    }    if (Math.random() < excitatoryProbability) {      Synapse synapse=new Synapse(source,target);      synapse.setStrength(1);      if (looseSynapses) {        network.addSynapse(synapse);      }      syns.add(synapse);    }    network.fireSynapsesUpdated();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  String s;  if (o instanceof Channel)   s=((Channel)o).getName(); else   if (o != null)   s=o.toString(); else   s=null;  Agent a=(Agent)stack.pop();  int newMask=a.getAgentMask();  if (s != null && s.length() > 0)   newMask=newMask | Agent.CHANNEL_MASK; else   newMask=newMask & (~Agent.CHANNEL_MASK);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent noob=Carny.getInstance().updateFavorite(a,newMask,a.getTitle(),a.getCategory(),a.getSubCategory(),a.getPersonObj(),a.getRole(),a.getRated(),a.getYear(),a.getPR(),a.getNetwork(),s,a.getSlotType(),a.getTimeslots(),a.getKeyword());    return (noob == a) ? Boolean.TRUE : Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  public void test_encode_decode_0bits_pid1_ctr1(){  final TermIdEncoder encoder=new TermIdEncoder(0);  final int pid=1;  final int ctr=1;  doEncodeDecodeTest(encoder,pid,ctr);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthComboBoxUI();}  }
class C{  private boolean isOverMaxDistance(){  final float length=mOriginCircle.distanceToOtherCircle(mTouchCircle);  return length > mTouchedDotView.getMaxStretchLength() - 50;}  }
class C{  @SuppressWarnings("rawtypes") public void extractVarSPUsageInfoChildren(GroupNodeBase<?> group){  for (  IQueryNode child : group) {    if (child instanceof GroupNodeBase) {      extractVarSPUsageInfoChildrenOrSelf((GroupNodeBase)child);    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void addInvokespecial(String clazz,String name,String desc){  addInvokespecial(false,constPool.addClassInfo(clazz),name,desc);}  }
class C{  public Vertex nextMostConscious(Vertex type,Vertex ignoring,float min){  return nextMostConscious(type,ignoring,min,false);}  }
class C{  public String randomSeedTipText(){  return "The seed used for random sampling.";}  }
class C{  public JMRIClientReporter(int number,JMRIClientSystemConnectionMemo memo){  super(memo.getSystemPrefix() + "R" + number);  transmitName=memo.getTransmitPrefix() + "R" + number;  _number=number;  tc=memo.getJMRIClientTrafficController();  tc.addJMRIClientListener(this);  requestUpdateFromLayout();}  }
class C{  public boolean makeCall(String remoteUri){  boolean ret;  super.mOutgoing=true;  super.setToUri(remoteUri);  ActionConfig config=new ActionConfig();  int level=mConfigurationService.getInt(NgnConfigurationEntry.QOS_PRECOND_BANDWIDTH_LEVEL,NgnConfigurationEntry.DEFAULT_QOS_PRECOND_BANDWIDTH_LEVEL);  tmedia_bandwidth_level_t bl=tmedia_bandwidth_level_t.swigToEnum(level);  config.setMediaInt(twrap_media_type_t.twrap_media_audiovideo,"bandwidth-level",bl.swigValue());  ret=mSession.call(remoteUri,NgnMediaType.ConvertToNative(super.getMediaType()),config);  config.delete();  return ret;}  }
class C{  public String toStringWithoutBraces(){  String set=toString();  return set.substring(1,set.length() - 1);}  }
class C{  public static <S extends HasContentLoadedHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    ContentLoadedEvent event=new ContentLoadedEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public static void writeCPLToFile(CompositionPlaylistType compositionPlaylistType,File outputFile) throws IOException {  try {    IMFCPLSerializer imfcplSerializer=new IMFCPLSerializer();    FileOutputStream fileOutputStream=new FileOutputStream(outputFile);    imfcplSerializer.write(compositionPlaylistType,fileOutputStream,true);    fileOutputStream.close();  } catch (  FileNotFoundException e) {    throw new IMFException(String.format("Error occurred while trying to serialize the CompositionPlaylistType, file %s not found",outputFile.getName()));  }catch (  SAXException|JAXBException e) {    throw new IMFException(e);  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void update(int ind,int value){  assert ind > 0;  while (ind < array.length) {    array[ind]+=value;    ind+=ind & (-ind);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.IF_STATEMENT__EXPRESSION:    return getExpression();case N4JSPackage.IF_STATEMENT__IF_STMT:  return getIfStmt();case N4JSPackage.IF_STATEMENT__ELSE_STMT:return getElseStmt();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static JButton createButton(String key,ActionListener al){  JButton btn=new JButton(getMsg(key));  btn.setMnemonic(getMnemonic(key));  btn.addActionListener(al);  return btn;}  }
class C{  protected void prepare(){  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals(I_M_Forecast.COLUMNNAME_M_Forecast_ID))     p_M_Forecast_ID=para.getParameterAsInt(); else     if (name.equals(I_PP_ForecastRun.COLUMNNAME_PP_ForecastRun_ID))     p_PP_ForecastRun_ID=para.getParameterAsInt(); else     if (name.equals(I_M_ForecastLine.COLUMNNAME_DatePromised)) {      p_StartDate=(Timestamp)para.getParameter();      p_EndDate=(Timestamp)para.getParameter_To();    } else     if (name.equals("ForecastActionType"))     p_ForecastActionType=(String)para.getParameter(); else     if (name.equals("ForecastLoadType"))     p_ForecastLoadType=(String)para.getParameter(); else     if (name.equals("DaysAfterDue"))     p_DaysAfterDue=para.getParameterAsInt(); else     if (name.equals(I_M_Product.COLUMNNAME_M_Product_ID))     p_M_Product_ID=para.getParameterAsInt(); else     if (name.equals(I_M_Product.COLUMNNAME_M_Product_Category_ID))     p_M_Product_Category_ID=para.getParameterAsInt(); else     if (name.equals(I_M_Product_Classification.COLUMNNAME_M_Product_Classification_ID))     p_M_Product_Classification_ID=para.getParameterAsInt(); else     if (name.equals(I_M_Product_Class.COLUMNNAME_M_Product_Class_ID))     p_M_Product_Class_ID=para.getParameterAsInt(); else     if (name.equals(I_M_Product_Group.COLUMNNAME_M_Product_Group_ID))     p_M_Product_Group_ID=para.getParameterAsInt(); else     if (name.equals(I_M_ForecastLine.COLUMNNAME_SalesRep_ID))     p_SalesRep_ID=para.getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public static Process execute(ProcessBuilder pb,LineConsumer consumer) throws IOException {  pb.redirectErrorStream(true);  Process process=pb.start();  process(process,consumer);  return process;}  }
class C{  static void test(String... schemes) throws IOException {  String expected=null;  for (  String s : schemes) {    if (expected == null) {      expected=s;    } else     if (s.equals("Digest")) {      expected=s;    }  }  String reply=authReplyFor(schemes);  System.out.println("====================================");  System.out.println("Expect client to choose: " + expected);  System.out.println(reply);  try (ServerSocket ss=new ServerSocket(0)){    Client.start(ss.getLocalPort());    try (Socket s=ss.accept()){      new MessageHeader().parseHeader(s.getInputStream());      s.getOutputStream().write(reply.getBytes("US-ASCII"));    }     String auth;    try (Socket s=ss.accept()){      MessageHeader mh=new MessageHeader();      mh.parseHeader(s.getInputStream());      s.getOutputStream().write(OKAY.getBytes("US-ASCII"));      auth=mh.findValue("Authorization");    }     if (auth == null)     throw new RuntimeException("Authorization header not found");    System.out.println("Server received Authorization header: " + auth);    String[] values=auth.split(" ");    if (!values[0].equals(expected))     throw new RuntimeException("Unexpected value");  } }  }
class C{  public void testTimedInvokeAllNullTimeUnit() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(new StringTask());    try {      e.invokeAll(l,MEDIUM_DELAY_MS,null);      shouldThrow();    } catch (    NullPointerException success) {    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  protected void process(Document document) throws Exception {  TransformerFactory factory=TransformerFactory.newInstance();  Transformer transformer=factory.newTransformer(new StreamSource(xsl));  Source source=new DocumentSource(document);  DocumentResult result=new DocumentResult();  transformer.transform(source,result);  Document transformedDoc=result.getDocument();  writer.write(transformedDoc);}  }
class C{  public void checkValidity() throws CertificateExpiredException, CertificateNotYetValidException {  checkValidity(new Date());}  }
class C{  public static boolean eqParamTypes(String desc1,String desc2){  if (desc1.charAt(0) != '(')   return false;  for (int i=0; true; ++i) {    char c=desc1.charAt(i);    if (c != desc2.charAt(i))     return false;    if (c == ')')     return true;  }}  }
class C{  public void paintEditorPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static byte[] asUnsignedByteArray(BigInteger value){  byte[] bytes=value.toByteArray();  if (bytes[0] == 0) {    byte[] tmp=new byte[bytes.length - 1];    System.arraycopy(bytes,1,tmp,0,tmp.length);    return tmp;  }  return bytes;}  }
class C{  public boolean isAllLoaded(){  return m_allLoaded;}  }
class C{  public void testFalsePositive(){  final Integer x=null;  assertNotNull(x);  assertTrue(x.intValue() > 0);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildDrowTunnelArea(zone);}  }
class C{  @Inline static void compilePutfieldBarrierShort(Assembler asm,GPR offset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,offset,locationMetadata,Entrypoints.shortFieldWriteBarrierMethod);}  }
class C{  @Override public Type type(){  return Type.INT;}  }
class C{  private void addParents(Lop node,ArrayList<Lop> node_v,ArrayList<Lop> exec_n){  for (  Lop enode : exec_n) {    if (isChild(node,enode,IDMap)) {      if (!node_v.contains(enode)) {        if (LOG.isTraceEnabled())         LOG.trace("Adding parent - " + enode.toString());        node_v.add(enode);      }    }  }}  }
class C{  @Override public void onReceive(Context context,Intent intent){  boolean isRadioServiceBinded=RadioManager.getService() == null ? false : true;  boolean isMediaServiceBinded=MediaManager.getService() == null ? false : true;  String action=intent.getAction();  if (action.equals(MediaPlayerService.ACTION_RADIOPLAYER_STOP) && isRadioServiceBinded && RadioManager.getService().isPlaying()) {    RadioManager.getService().stop();  } else   if (action.equals(RadioPlayerService.ACTION_MEDIAPLAYER_STOP) && isMediaServiceBinded && MediaManager.getService().isPlaying()) {    MediaManager.getService().stop();  } else   if (action.equals(RadioPlayerService.NOTIFICATION_INTENT_PLAY_PAUSE) && isRadioServiceBinded) {    if (RadioManager.getService().isPlaying())     RadioManager.getService().stop(); else     RadioManager.getService().resume();  } else   if (action.equals(RadioPlayerService.NOTIFICATION_INTENT_CANCEL) && isRadioServiceBinded) {    RadioManager.getService().stopFromNotification();  } else   if (action.equals(MediaPlayerService.NOTIFICATION_INTENT_PLAY_PAUSE) && isMediaServiceBinded) {    if (MediaManager.getService().isPlaying())     MediaManager.getService().pause(); else     MediaManager.getService().resume();  } else   if (action.equals(MediaPlayerService.NOTIFICATION_INTENT_CANCEL) && isMediaServiceBinded) {    MediaManager.getService().stopFromNotification();  }}  }
class C{  @Synchronized("accessLock") public boolean containsChannel(@NonNull String name){  if (channelNameMap.containsKey(name.toLowerCase(locale)))   return true;  String modePrefixes=bot.getConfiguration().getUserLevelPrefixes();  if (modePrefixes.contains(Character.toString(name.charAt(0)))) {    String nameTrimmed=name.toLowerCase(locale);    do {      nameTrimmed=nameTrimmed.substring(1);      if (channelNameMap.containsKey(nameTrimmed))       return true;    } while (modePrefixes.contains(Character.toString(nameTrimmed.charAt(0))));  }  return false;}  }
class C{  private static String normalizeUrl(URI uri){  return uri.getScheme() + COLON_2X_BACKSLASH + uri.getHost()+ uri.getRawPath();}  }
class C{  public static StringBuffer replace(StringBuffer original,String search,String replace,boolean ignoreCase,boolean allOccurences){  return doReplace(original,search,replace,ignoreCase,allOccurences);}  }
class C{  private String printOFormat(final short x){  String sx=null;  if (x == Short.MIN_VALUE) {    sx="100000";  } else   if (x < 0) {    final String t=Integer.toString((~(-x - 1)) ^ Short.MIN_VALUE,8);switch (t.length()) {case 1:      sx="10000" + t;    break;case 2:  sx="1000" + t;break;case 3:sx="100" + t;break;case 4:sx="10" + t;break;case 5:sx='1' + t;break;}} else {sx=Integer.toString(x,8);}return printOFormat(sx);}  }
class C{  public static void merge(final Network baseNetwork,final String addPrefix,final Network addNetwork){  double capacityFactor=baseNetwork.getCapacityPeriod() / addNetwork.getCapacityPeriod();  NetworkFactory factory=baseNetwork.getFactory();  for (  Node node : addNetwork.getNodes().values()) {    Node node2=(Node)factory.createNode(Id.create(addPrefix + node.getId().toString(),Node.class),node.getCoord());    baseNetwork.addNode(node2);  }  for (  Link link : addNetwork.getLinks().values()) {    Id<Node> fromNodeId=Id.create(addPrefix + link.getFromNode().getId().toString(),Node.class);    Id<Node> toNodeId=Id.create(addPrefix + link.getToNode().getId().toString(),Node.class);    Node fromNode=baseNetwork.getNodes().get(fromNodeId);    Node toNode=baseNetwork.getNodes().get(toNodeId);    Link link2=factory.createLink(Id.create(addPrefix + link.getId().toString(),Link.class),fromNode,toNode);    link2.setAllowedModes(link.getAllowedModes());    link2.setCapacity(link.getCapacity() * capacityFactor);    link2.setFreespeed(link.getFreespeed());    link2.setLength(link.getLength());    link2.setNumberOfLanes(link.getNumberOfLanes());    baseNetwork.addLink(link2);  }}  }
class C{  public Edge removeEdge(final Edge edge){  if (edge == null)   return null;  if (edge.owner != this)   return null;  edge.owner=null;  final Bag outNodeBag=((IndexOutIn)(indexOutInHash.get(edge.from))).out;  outNodeBag.remove(edge.indexFrom);  if (outNodeBag.numObjs > edge.indexFrom) {    Edge shiftedEdge=(Edge)(outNodeBag.objs[edge.indexFrom]);    int shiftedIndex=outNodeBag.numObjs;    if (directed) {      shiftedEdge.indexFrom=edge.indexFrom;    } else {      if (shiftedEdge.indexFrom == shiftedIndex && shiftedEdge.from.equals(edge.from))       shiftedEdge.indexFrom=edge.indexFrom; else       if (shiftedEdge.indexTo == shiftedIndex && shiftedEdge.to.equals(edge.from))       shiftedEdge.indexTo=edge.indexFrom; else       throw new InternalError("This shouldn't ever happen: #1");    }  }  final Bag inNodeBag=((IndexOutIn)(indexOutInHash.get(edge.to))).in;  inNodeBag.remove(edge.indexTo);  if (inNodeBag.numObjs > edge.indexTo) {    Edge shiftedEdge=(Edge)(inNodeBag.objs[edge.indexTo]);    int shiftedIndex=inNodeBag.numObjs;    if (directed) {      shiftedEdge.indexTo=edge.indexTo;    } else {      if (shiftedEdge.indexTo == shiftedIndex && shiftedEdge.to.equals(edge.to))       shiftedEdge.indexTo=edge.indexTo; else       if (shiftedEdge.indexFrom == shiftedIndex && shiftedEdge.from.equals(edge.to))       shiftedEdge.indexFrom=edge.indexTo; else       throw new InternalError("This shouldn't ever happen: #2");    }  }  return edge;}  }
class C{  private boolean isHiddenEvent(int type){  return type == EVT_NODE_METRICS_UPDATED;}  }
class C{  private Remote encodeObject(Object obj,Name name) throws NamingException, RemoteException {  obj=NamingManager.getStateToBind(obj,name,this,environment);  if (obj instanceof Remote) {    return (Remote)obj;  }  if (obj instanceof Reference) {    return (new ReferenceWrapper((Reference)obj));  }  if (obj instanceof Referenceable) {    return (new ReferenceWrapper(((Referenceable)obj).getReference()));  }  throw (new IllegalArgumentException("RegistryContext: " + "object to bind must be Remote, Reference, or Referenceable"));}  }
class C{  DynamicColumnData(final TreeColumn treeColumn,final DynamicLength preferredLength,final DynamicLength minLength){  this.treeColumn=treeColumn;  this.preferredLength=preferredLength;  this.minLength=minLength;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  protected DiskRegion(DiskStoreImpl ds,String name,boolean isBucket,boolean isPersistBackup,boolean overflowEnabled,boolean isSynchronous,DiskRegionStats stats,CancelCriterion cancel,DiskExceptionHandler exceptionHandler,RegionAttributes ra,EnumSet<DiskRegionFlag> flags,String partitionName,int startingBucketId,String compressorClassName,boolean offHeap){  super(ds,name);  if (this.getPartitionName() != null) {    if (this.getStartingBucketId() != startingBucketId || !this.getPartitionName().equals(partitionName)) {      partitionName=this.getPartitionName();      startingBucketId=this.getStartingBucketId();    }  }  if (isRecreated() && isBackup() && !isPersistBackup) {    throw new IllegalStateException("The region \"" + name + "\" has been persisted to disk so it can not be recreated on the same disk store without persistence. Either destroy the persistent region, recreate it as overflow and persistent, or create the overflow only region on a different disk store.");  }  if (isRecreated() && isBucket != isBucket()) {    if (isBucket()) {      throw new IllegalStateException("The region \"" + name + "\" has been persisted to disk as a partition region bucket but is not being recreated as a bucket. This should not be possible.");    } else {      throw new IllegalStateException("The region \"" + name + "\" has not been persisted to disk as a partition region bucket but is now being recreated as a bucket. This should not be possible.");    }  }  if (isRecreated() && !flags.equals(getFlags())) {    throw new IllegalStateException("The region \"" + name + "\" has changed it's concurrency enabled setting. Old setting "+ getFlags()+ ", new setting "+ flags);  }  setBackup(isPersistBackup);  this.overflowEnabled=overflowEnabled;  this.stats=stats;  this.name=name;  this.isSync=isSynchronous;  this.cancel=cancel;  this.exceptionHandler=exceptionHandler;  this.rwLock=new StoppableReentrantReadWriteLock(ds.getCancelCriterion());  if (ra != null) {    byte raLruAlgorithm=(byte)(ra.getEvictionAttributes().getAlgorithm().getValue());    byte raLruAction=(byte)(ra.getEvictionAttributes().getAction().getValue());    int raLruLimit=0;    if (!ra.getEvictionAttributes().getAlgorithm().isLRUHeap()) {      raLruLimit=ra.getEvictionAttributes().getMaximum();    }    if (isRecreated()) {      if (raLruAlgorithm != getLruAlgorithm() || raLruAction != getLruAction() || raLruLimit != getLruLimit() || ra.getConcurrencyLevel() != getConcurrencyLevel() || ra.getInitialCapacity() != getInitialCapacity() || ra.getLoadFactor() != getLoadFactor() || ra.getStatisticsEnabled() != getStatisticsEnabled() || offHeap != getOffHeap() || !hasSameCompressor(ra)) {        if (getRecoveredEntryMap() != null) {          getRecoveredEntryMap().lruCloseStats();        }        setEntriesMapIncompatible(true);        setConfigChanged(true);      }    }    setConfig(raLruAlgorithm,raLruAction,raLruLimit,ra.getConcurrencyLevel(),ra.getInitialCapacity(),ra.getLoadFactor(),ra.getStatisticsEnabled(),isBucket,flags,partitionName,startingBucketId,compressorClassName,offHeap);  }  if (!isBucket) {    createDataStorage();  }}  }
class C{  public static Conjunction and(Criterion... criteria){  return new Conjunction(criteria);}  }
class C{  public static String convertTimestampToDateStringCompact(boolean useUTC,long milli){  Date date=new Date(milli);  SimpleDateFormat sourceFormat=new SimpleDateFormat("dd-MM-yyyy");  sourceFormat.setTimeZone(useUTC ? TimeZone.getTimeZone("UTC") : TimeZone.getDefault());  return sourceFormat.format(date);}  }
class C{  public void resetAxisMinValue(){  mCustomAxisMin=Float.NaN;}  }
class C{  public double[] basisFunctions(float u){  return basisFunctions(findSpan(u),u);}  }
class C{  public ColumnId(String catalogName,String schemaName,String tableName,String columnName){  this(new TableId(catalogName,schemaName,tableName),columnName);}  }
class C{  public void init(Drawer drawer){  if (drawer.getDrawerItems() != null) {    init(drawer.getRecyclerView(),drawer.getDrawerItems().toArray(new IDrawerItem[drawer.getDrawerItems().size()]));  }}  }
class C{  public final int indexOfValue(String value){  if (!isNominal() && !isString())   return -1;  Object store=value;  if (value.length() > STRING_COMPRESS_THRESHOLD) {    try {      store=new SerializedObject(value,true);    } catch (    Exception ex) {      System.err.println("Couldn't compress string attribute value -" + " searching uncompressed.");    }  }  Integer val=(Integer)m_Hashtable.get(store);  if (val == null)   return -1; else   return val.intValue();}  }
class C{  public boolean checkInternalFlags(Flag flag){  if (flag == null) {    _log.warn("checkInternalFlags called with null argument");    return false;  }  return (_internalFlags & flag.getMask()) != 0;}  }
class C{  public Builder url(HttpUrl url){  Validator.notNull(url,"'url' cannot be null");  this.url=url;  return this;}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    Integer counter=deployStatusDAO.totalRecordCount().intValue();    List<com.wipro.ats.bdre.md.dao.jpa.DeployStatus> jpaDeployStatus=deployStatusDAO.list(startPage,pageSize);    List<DeployStatus> deployStatuses=new ArrayList<DeployStatus>();    for (    com.wipro.ats.bdre.md.dao.jpa.DeployStatus deployStatus : jpaDeployStatus) {      DeployStatus returnDeployStatus=new DeployStatus();      returnDeployStatus.setDeployStatusId((int)deployStatus.getDeployStatusId());      returnDeployStatus.setDescription(deployStatus.getDescription());      returnDeployStatus.setCounter(counter);      deployStatuses.add(returnDeployStatus);    }    restWrapper=new RestWrapper(deployStatuses,RestWrapper.OK);    LOGGER.info("All records listed from DeployStatus by User:" + principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    return new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private Dimension createInitialSize(final ExecutionUnit unit){  Dimension frameSize;  if (view.getParent() instanceof JViewport) {    frameSize=view.getParent().getSize();  } else {    frameSize=view.getSize();  }  int processes=model.getProcesses().size();  int wallSpace=(processes - 1) * 2 * ProcessDrawer.WALL_WIDTH;  return new Dimension((int)((frameSize.getWidth() - wallSpace) / processes),(int)frameSize.getHeight());}  }
class C{  public DiskWriteAttributesFactory(DiskWriteAttributes dwa){  this.props.setProperty(CacheXml.BYTES_THRESHOLD,String.valueOf(dwa.getBytesThreshold()));  long maxOplogSizeInBytes=convertToBytes(dwa.getMaxOplogSize());  this.props.setProperty(CacheXml.MAX_OPLOG_SIZE,String.valueOf(maxOplogSizeInBytes));  this.props.setProperty(CacheXml.ROLL_OPLOG,String.valueOf(dwa.isRollOplogs()));  this.props.setProperty(DiskWriteAttributesImpl.SYNCHRONOUS_PROPERTY,String.valueOf(dwa.isSynchronous()));  if (dwa.getTimeInterval() > -1) {    this.props.setProperty(CacheXml.TIME_INTERVAL,String.valueOf(dwa.getTimeInterval()));  }}  }
class C{  public void stopMouseCapture(){  mouseCaptureTarget=null;}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.ASSIGNMENT_EXPRESSION;}  }
class C{  public List<E> next(){  if (numLeft.equals(total)) {    numLeft=numLeft.subtract(BigInteger.ONE);    return items;  }  int temp;  int j=a.length - 2;  while (a[j] > a[j + 1]) {    j--;  }  int k=a.length - 1;  while (a[j] > a[k]) {    k--;  }  temp=a[k];  a[k]=a[j];  a[j]=temp;  int r=a.length - 1;  int s=j + 1;  while (r > s) {    temp=a[s];    a[s]=a[r];    a[r]=temp;    r--;    s++;  }  numLeft=numLeft.subtract(BigInteger.ONE);  List<E> ans=new ArrayList<E>(a.length);  for (  int index : a) {    ans.add(items.get(index));  }  return ans;}  }
class C{  public TestSetEvent(Object source,Instances testSet){  super(source);  m_testSet=testSet;  if (m_testSet != null && m_testSet.numInstances() == 0) {    m_structureOnly=true;  }}  }
class C{  public static int addNaive(int x,int y){  int carry=0, sum=0, c=0, xLSB, yLSB;  while (c < 32) {    xLSB=x & 1;    yLSB=y & 1;    sum|=(xLSB ^ yLSB ^ carry) << c;    if ((xLSB & yLSB) == 1 || (xLSB & carry) == 1 || (yLSB & carry) == 1) {      carry=1;    } else {      carry=0;    }    x>>=1;    y>>=1;    c++;  }  return sum;}  }
class C{  public TObjectIntHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public HexFormatException(String hex){  super(hex + " is not a hex string");  this.hex=hex;}  }
class C{  private static <T>int countRunAndMakeAscending(T[] a,int lo,int hi,Comparator<? super T> c){  if (DEBUG)   assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (c.compare(a[runHi++],a[lo]) < 0) {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public GPUImage3x3ConvolutionFilter(final float[] convolutionKernel){  super(THREE_X_THREE_TEXTURE_SAMPLING_FRAGMENT_SHADER);  mConvolutionKernel=convolutionKernel;}  }
class C{  private String safeDoubleToString(Double number){  if (number.isNaN()) {    return "NULL";  }  String orig=number.toString();  int pos=orig.indexOf('E');  if ((pos == -1) || (orig.charAt(pos + 1) == '-')) {    return orig;  } else {    StringBuffer buff=new StringBuffer(orig);    buff.insert(pos + 1,'+');    return new String(buff);  }}  }
class C{  public long computeCheckSum(byte[] buf){  long sum=0;  int blen=buf.length;  for (int i=0; i < blen; ++i) {    sum+=255 & buf[i];  }  return sum;}  }
class C{  public void load(Element element,Object o){  LayoutEditor p=(LayoutEditor)o;  String name=element.getAttribute("ident").getValue();  double x=0.0;  double y=0.0;  int tType=LayoutTurnout.RH_TURNOUT;  try {    x=element.getAttribute("xcen").getFloatValue();    y=element.getAttribute("ycen").getFloatValue();    tType=element.getAttribute("type").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert layoutturnout attribute");  }  int version=1;  try {    version=element.getAttribute("ver").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert layoutturnout b coords attribute");  }catch (  java.lang.NullPointerException e) {  }  LayoutTurnout l=new LayoutTurnout(name,tType,new Point2D.Double(x,y),0.0,1.0,1.0,p,version);  Attribute a=element.getAttribute("blockname");  if (a != null) {    l.tBlockName=a.getValue();  }  a=element.getAttribute("blockbname");  if (a != null) {    l.tBlockBName=a.getValue();  }  a=element.getAttribute("blockcname");  if (a != null) {    l.tBlockCName=a.getValue();  }  a=element.getAttribute("blockdname");  if (a != null) {    l.tBlockDName=a.getValue();  }  a=element.getAttribute("turnoutname");  if (a != null) {    l.tTurnoutName=a.getValue();  }  a=element.getAttribute("secondturnoutname");  if (a != null) {    l.tSecondTurnoutName=a.getValue();  }  a=element.getAttribute("connectaname");  if (a != null) {    l.connectAName=a.getValue();  }  a=element.getAttribute("connectbname");  if (a != null) {    l.connectBName=a.getValue();  }  a=element.getAttribute("connectcname");  if (a != null) {    l.connectCName=a.getValue();  }  a=element.getAttribute("connectdname");  if (a != null) {    l.connectDName=a.getValue();  }  a=element.getAttribute("signala1name");  if (a != null) {    l.setSignalA1Name(a.getValue());  }  a=element.getAttribute("signala2name");  if (a != null) {    l.setSignalA2Name(a.getValue());  }  a=element.getAttribute("signala3name");  if (a != null) {    l.setSignalA3Name(a.getValue());  }  a=element.getAttribute("signalb1name");  if (a != null) {    l.setSignalB1Name(a.getValue());  }  a=element.getAttribute("signalb2name");  if (a != null) {    l.setSignalB2Name(a.getValue());  }  a=element.getAttribute("signalc1name");  if (a != null) {    l.setSignalC1Name(a.getValue());  }  a=element.getAttribute("signalc2name");  if (a != null) {    l.setSignalC2Name(a.getValue());  }  a=element.getAttribute("signald1name");  if (a != null) {    l.setSignalD1Name(a.getValue());  }  a=element.getAttribute("signald2name");  if (a != null) {    l.setSignalD2Name(a.getValue());  }  a=element.getAttribute("linkedturnoutname");  if (a != null) {    l.linkedTurnoutName=a.getValue();    try {      l.linkType=element.getAttribute("linktype").getIntValue();    } catch (    org.jdom2.DataConversionException e) {      log.error("failed to convert linked layout turnout type");    }  }  a=element.getAttribute("continuing");  if (a != null) {    int continuing=Turnout.CLOSED;    try {      continuing=element.getAttribute("continuing").getIntValue();    } catch (    org.jdom2.DataConversionException e) {      log.error("failed to convert continuingsense attribute");    }    l.setContinuingSense(continuing);  }  boolean value=false;  if ((a=element.getAttribute("disabled")) != null && a.getValue().equals("yes")) {    value=true;  }  l.setDisabled(value);  value=false;  if ((a=element.getAttribute("disableWhenOccupied")) != null && a.getValue().equals("yes")) {    value=true;  }  l.setDisableWhenOccupied(value);  boolean hide=false;  if (element.getAttribute("hidden") != null) {    if (element.getAttribute("hidden").getValue().equals("yes")) {      hide=true;    }  }  l.setHidden(hide);  if (version == 2) {    try {      x=element.getAttribute("xa").getFloatValue();      y=element.getAttribute("ya").getFloatValue();      l.setCoordsA(new Point2D.Double(x,y));    } catch (    org.jdom2.DataConversionException e) {      log.error("failed to convert layoutturnout b coords attribute");    }catch (    java.lang.NullPointerException e) {    }  }  try {    x=element.getAttribute("xb").getFloatValue();    y=element.getAttribute("yb").getFloatValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert layoutturnout b coords attribute");  }  l.setCoordsB(new Point2D.Double(x,y));  try {    x=element.getAttribute("xc").getFloatValue();    y=element.getAttribute("yc").getFloatValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert layoutturnout c coords attribute");  }  l.setCoordsC(new Point2D.Double(x,y));  if (version == 2) {    try {      x=element.getAttribute("xd").getFloatValue();      y=element.getAttribute("yd").getFloatValue();      l.setCoordsD(new Point2D.Double(x,y));    } catch (    org.jdom2.DataConversionException e) {      log.error("failed to convert layoutturnout c coords attribute");    }catch (    java.lang.NullPointerException e) {    }  }  if (element.getChild("signalAMast") != null) {    String mast=element.getChild("signalAMast").getText();    if (mast != null && !mast.equals("")) {      l.setSignalAMast(mast);    }  }  if (element.getChild("signalBMast") != null) {    String mast=element.getChild("signalBMast").getText();    if (mast != null && !mast.equals("")) {      l.setSignalBMast(mast);    }  }  if (element.getChild("signalCMast") != null) {    String mast=element.getChild("signalCMast").getText();    if (mast != null && !mast.equals("")) {      l.setSignalCMast(mast);    }  }  if (element.getChild("signalDMast") != null) {    String mast=element.getChild("signalDMast").getText();    if (mast != null && !mast.equals("")) {      l.setSignalDMast(mast);    }  }  if (element.getChild("sensorA") != null) {    String sensor=element.getChild("sensorA").getText();    if (sensor != null && !sensor.equals("")) {      l.setSensorA(sensor);    }  }  if (element.getChild("sensorB") != null) {    String sensor=element.getChild("sensorB").getText();    if (sensor != null && !sensor.equals("")) {      l.setSensorB(sensor);    }  }  if (element.getChild("sensorC") != null) {    String sensor=element.getChild("sensorC").getText();    if (sensor != null && !sensor.equals("")) {      l.setSensorC(sensor);    }  }  if (element.getChild("sensorD") != null) {    String sensor=element.getChild("sensorD").getText();    if (sensor != null && !sensor.equals("")) {      l.setSensorD(sensor);    }  }  p.turnoutList.add(l);}  }
class C{  public void writeSI32(int value) throws IOException {  flushBits();  out.write(value & 0xff);  out.write(value >> 8);  out.write(value >> 16);  out.write(value >> 24);  bytesWritten+=4;}  }
class C{  protected void addRawEdge(BytecodeInstruction src,BasicBlock target,ControlFlowEdge origEdge){  BasicBlock srcBlock=src.getBasicBlock();  if (srcBlock == null)   throw new IllegalStateException("when adding an edge to a CFG it is expected to know both the src- and the target-instruction");  addRawEdge(srcBlock,target,origEdge);}  }
class C{  public void testPutCauseEviction(){  List<String> log=new ArrayList<String>();  LruCache<String,String> cache=newRemovalLogCache(log);  cache.put("a","A");  cache.put("b","B");  cache.put("c","C");  cache.put("b","B2");  assertEquals(Arrays.asList("b=B>B2"),log);  assertSnapshot(cache,"a","A","c","C","b","B2");}  }
class C{  public final int countCells(final long session){  final Cursor cursor=contentResolver.query(ContentUris.withAppendedId(Uri.withAppendedPath(ContentProvider.CONTENT_URI_CELL,ContentProvider.CONTENT_URI_OVERVIEW_SUFFIX),session),new String[]{Schema.COL_ID},null,null,null);  final int count=cursor.getCount();  cursor.close();  return count;}  }
class C{  public void error(String msg){  _log.error("BrokerModel error str: " + msg);}  }
class C{  public WritableRaster createCompatibleWritableRaster(){  return createCompatibleWritableRaster(width,height);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.660 -0400",hash_original_method="29EA35F6FB0E6D052E871169B2D3DF12",hash_generated_method="F779F844A3F9E5AA3C3DEACB8DA1C9E6") public void resetAllSlots(){  SR_GrammarResetAllSlots(mGrammar);}  }
class C{  private CharSet(long[] mapping){  _mapping=mapping;}  }
class C{  public SequenceInputStream(Enumeration<? extends InputStream> e){  this.e=e;  try {    nextStream();  } catch (  IOException ex) {    throw new Error("panic");  }}  }
class C{  public boolean isLast(){  return last;}  }
class C{  public boolean createXML(File file){  try {    Writer fw=new OutputStreamWriter(new FileOutputStream(file,false),Ini.getCharset());    return createXML(new BufferedWriter(fw));  } catch (  FileNotFoundException fnfe) {    log.log(Level.SEVERE,"(f) - " + fnfe.toString());  }catch (  Exception e) {    log.log(Level.SEVERE,"(f)",e);  }  return false;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static String cleanTruncate(String s,int length){  if (s == null) {    return s;  }  if (length == 0) {    return "";  }  if (length >= s.length()) {    return s;  }  if (Character.isHighSurrogate(s.charAt(length - 1))) {    length--;  }  return s.substring(0,length);}  }
class C{  public HashPrintRequestAttributeSet(PrintRequestAttributeSet attributes){  super(attributes,PrintRequestAttribute.class);}  }
class C{  public void seek(long pos) throws IOException {  boolean seekComments=false;  long skipped;  if (Debug.debugging("binaryfileseek")) {    seekComments=true;  }  long curPosition=inputStreamCount;  if (pos >= curPosition) {    if (seekComments) {      Debug.output("StreamInputReader - seeking to " + pos + " from "+ curPosition);    }    skipped=skipBytes(pos - curPosition);    if (seekComments) {      Debug.output("   now at: " + inputStreamCount + ", having skipped "+ skipped);    }  } else {    if (seekComments) {      Debug.output("StreamInputReader - having to start over for seek - " + pos + " from "+ curPosition);    }    reopen();    if (seekComments)     Debug.output("   skipping to: " + pos);    skipped=skipBytes(pos);    if (seekComments) {      Debug.output("   now at: " + inputStreamCount + ", having skipped "+ skipped);    }  }}  }
class C{  @Override public void run(){  try {    log.trace("block on initRings:{}",stage.getClass().getSimpleName());    GraphManager.initAllPipes(graphManager,stage.stageId);    log.trace("finished on initRings:{}",stage.getClass().getSimpleName());    Thread.currentThread().setName(stage.getClass().getSimpleName() + " id:" + stage.stageId);    stage.startup();    GraphManager.setStateToStarted(graphManager,stage.stageId);    try {      allStagesLatch.await();    } catch (    InterruptedException e) {    }catch (    BrokenBarrierException e) {    }    runPeriodicLoop(nsScheduleRate / 1_000_000l,(int)(nsScheduleRate % 1_000_000l),stage);    stage.shutdown();    GraphManager.setStateToShutdown(graphManager,stage.stageId);  } catch (  Throwable t) {synchronized (this) {      if (null == firstException) {        firstException=t;      }    }    GraphManager.reportError(graphManager,stage,t,log);    GraphManager.shutdownNeighborRings(graphManager,stage);    Thread.currentThread().interrupt();    shutdown();  }}  }
class C{  public IllegalReceiveException(){}  }
class C{  public static final String createXPATHMsg(ListResourceBundle fResourceBundle,String msgKey,Object args[]){  String fmsg=null;  boolean throwex=false;  String msg=null;  if (msgKey != null)   msg=fResourceBundle.getString(msgKey);  if (msg == null) {    msg=fResourceBundle.getString(XPATHErrorResources.BAD_CODE);    throwex=true;  }  if (args != null) {    try {      int n=args.length;      for (int i=0; i < n; i++) {        if (null == args[i])         args[i]="";      }      fmsg=java.text.MessageFormat.format(msg,args);    } catch (    Exception e) {      fmsg=fResourceBundle.getString(XPATHErrorResources.FORMAT_FAILED);      fmsg+=" " + msg;    }  } else   fmsg=msg;  if (throwex) {    throw new RuntimeException(fmsg);  }  return fmsg;}  }
class C{  public Cookie2(final String domain,final String name,final String value,final String path,final Date expires,final boolean secure,final int[] ports){  super(domain,name,value,path,expires,secure);  setPorts(ports);}  }
class C{  void removeMutator(MutatorThread m){synchronized (scheduler) {    mutators.remove(m);    Trace.trace(Item.SCHEDULER,"%d: mutator removed, %d mutators remaining",m.getId(),mutators.size());    wakeScheduler();  }}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  public boolean forEach(FloatProcedure procedure){  float[] theElements=elements;  int theSize=size;  for (int i=0; i < theSize; )   if (!procedure.apply(theElements[i++]))   return false;  return true;}  }
class C{  public void testBasicsV6() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document document=new Document();  InetAddress address=InetAddress.getByName("fec0::f66d");  document.add(new InetAddressPoint("field",address));  writer.addDocument(document);  IndexReader reader=writer.getReader();  IndexSearcher searcher=newSearcher(reader);  assertEquals(1,searcher.count(InetAddressPoint.newExactQuery("field",address)));  assertEquals(1,searcher.count(InetAddressPoint.newPrefixQuery("field",address,64)));  assertEquals(1,searcher.count(InetAddressPoint.newRangeQuery("field",InetAddress.getByName("fec0::f66c"),InetAddress.getByName("fec0::f66e"))));  reader.close();  writer.close();  dir.close();}  }
class C{  public GsonRequest(String url,Class<T> clazz,Map<String,String> headers,Listener<T> listener,ErrorListener errorListener){  super(Method.GET,url,errorListener);  this.clazz=clazz;  this.headers=headers;  this.params=null;  this.listener=listener;}  }
class C{  public E lookup(String fqn){  int index=findRetrieveIndexFor(fqn);  return getAt(index);}  }
class C{  private void rejectLoop(List<S2Point> v,int n,List<S2Edge> unusedEdges){  for (int i=n - 1, j=0; j < n; i=j++) {    unusedEdges.add(new S2Edge(v.get(i),v.get(j)));  }}  }
class C{  @RequestProcessing(value="/city/{city}",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,LoginCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showCityArticles(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String city) throws Exception {  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  renderer.setTemplateName("city-articles.ftl");  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  filler.fillRandomArticles(dataModel);  filler.fillHotArticles(dataModel);  filler.fillSideTags(dataModel);  filler.fillLatestCmts(dataModel);  List<JSONObject> articles=new ArrayList<JSONObject>();  dataModel.put(Article.ARTICLES,articles);  final JSONObject user=(JSONObject)request.getAttribute(User.USER);  dataModel.put(UserExt.USER_GEO_STATUS,true);  dataModel.put(Common.CITY_FOUND,true);  dataModel.put(Common.CITY,langService.get("sameCityLabel"));  if (UserExt.USER_GEO_STATUS_C_PUBLIC != user.optInt(UserExt.USER_GEO_STATUS)) {    dataModel.put(UserExt.USER_GEO_STATUS,false);    return;  }  final String userCity=user.optString(UserExt.USER_CITY);  String queryCity=city;  if ("my".equals(city)) {    dataModel.put(Common.CITY,userCity);    queryCity=userCity;  } else {    dataModel.put(Common.CITY,city);  }  if (StringUtils.isBlank(userCity)) {    dataModel.put(Common.CITY_FOUND,false);    return;  }  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  final int pageSize=Symphonys.getInt("cityArticlesCnt");  final int windowSize=Symphonys.getInt("cityArticlesWindowSize");  final JSONObject statistic=optionQueryService.getOption(queryCity + "-ArticleCount");  if (null != statistic) {    articles=articleQueryService.getArticlesByCity(queryCity,pageNum,pageSize);    dataModel.put(Article.ARTICLES,articles);  }  final int articleCnt=null == statistic ? 0 : statistic.optInt(Option.OPTION_VALUE);  final int pageCount=(int)Math.ceil(articleCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);}  }
class C{  public static <T extends SabresObject>SabresQuery<T> or(List<SabresQuery<T>> queries){  return new SabresQuery<>(queries);}  }
class C{  public static void e(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg,throwable);}  }
class C{  static void validate(VODiscount voObj) throws ValidationException {  BLValidator.isNotNull(FIELD_NAME_VALUE,voObj.getValue());  BLValidator.isInRange(FIELD_NAME_VALUE,voObj.getValue(),MIN_DISCOUNT_VALUE,MAX_DISCOUNT_VALUE);  BLValidator.isEqual(FIELD_NAME_VALUE,voObj.getValue(),BigDecimal.ZERO);  BLValidator.isValidPriceScale(FIELD_NAME_VALUE,voObj.getValue());  if (voObj.getStartTime() != null) {    BLValidator.isInRange(FIELD_NAME_STARTDATE,voObj.getStartTime().longValue(),voObj.getStartTime(),voObj.getEndTime());  }}  }
class C{  public static String dumpToAsciiTable(final MigrationInfo[] migrationInfos){  int versionWidth=VERSION_TITLE.length();  int descriptionWidth=DESCRIPTION_TITLE.length();  for (  MigrationInfo migrationInfo : migrationInfos) {    versionWidth=Math.max(versionWidth,migrationInfo.getVersion().toString().length());    descriptionWidth=Math.max(descriptionWidth,migrationInfo.getDescription().length());  }  String ruler="+-" + StringUtils.trimOrPad("",versionWidth,'-') + "-+-"+ StringUtils.trimOrPad("",descriptionWidth,'-')+ "-+---------------------+---------+\n";  StringBuilder table=new StringBuilder();  table.append(ruler);  table.append("| ").append(StringUtils.trimOrPad(VERSION_TITLE,versionWidth,' ')).append(" | ").append(StringUtils.trimOrPad(DESCRIPTION_TITLE,descriptionWidth)).append(" | Installed on        | State   |\n");  table.append(ruler);  if (migrationInfos.length == 0) {    table.append(StringUtils.trimOrPad("| No migrations found",ruler.length() - 2,' ')).append("|\n");  } else {    for (    MigrationInfo migrationInfo : migrationInfos) {      table.append("| ").append(StringUtils.trimOrPad(migrationInfo.getVersion().toString(),versionWidth));      table.append(" | ").append(StringUtils.trimOrPad(migrationInfo.getDescription(),descriptionWidth));      table.append(" | ").append(StringUtils.trimOrPad(DateUtils.formatDateAsIsoString(migrationInfo.getInstalledOn()),19));      table.append(" | ").append(StringUtils.trimOrPad(migrationInfo.getState().getDisplayName(),7));      table.append(" |\n");    }  }  table.append(ruler);  return table.toString();}  }
class C{  private void updateRecordingTrack(Track track,long lastTrackPointId,boolean increaseNumberOfPoints){  if (lastTrackPointId >= 0) {    if (track.getStartId() < 0) {      track.setStartId(lastTrackPointId);    }    track.setStopId(lastTrackPointId);  }  if (increaseNumberOfPoints) {    track.setNumberOfPoints(track.getNumberOfPoints() + 1);  }  trackTripStatisticsUpdater.updateTime(System.currentTimeMillis());  track.setTripStatistics(trackTripStatisticsUpdater.getTripStatistics());  myTracksProviderUtils.updateTrack(track);}  }
class C{  private void updateZoningMap(UnManagedExportMask mask,List<Initiator> initiators,List<StoragePort> storagePorts){  ZoneInfoMap zoningMap=networkDeviceController.getInitiatorsZoneInfoMap(initiators,storagePorts);  for (  ZoneInfo zoneInfo : zoningMap.values()) {    log.info("Found zone: {} for initiator {} and port {}",new Object[]{zoneInfo.getZoneName(),zoneInfo.getInitiatorWwn(),zoneInfo.getPortWwn()});  }  mask.setZoningMap(zoningMap);}  }
class C{  private boolean isAsyncOperation(final Class resultClass){  return resultClass == AsyncOperationStatus.class;}  }
class C{  private void createShareMap(HashSet<UnManagedSMBFileShare> unManagedSMBFileShareHashSet,UnManagedSMBShareMap unManagedSMBShareMap,String addr,String nativeid){  UnManagedSMBFileShare newUnManagedSMBFileShare=null;  if (unManagedSMBFileShareHashSet != null && !unManagedSMBFileShareHashSet.isEmpty()) {    for (    UnManagedSMBFileShare unManagedSMBFileShare : unManagedSMBFileShareHashSet) {      String mountPoint="\\\\" + addr + "\\"+ unManagedSMBFileShare.getName();      newUnManagedSMBFileShare=new UnManagedSMBFileShare(unManagedSMBFileShare.getName(),unManagedSMBFileShare.getDescription(),FileControllerConstants.CIFS_SHARE_PERMISSION_TYPE_ALLOW,FileControllerConstants.CIFS_SHARE_PERMISSION_CHANGE,unManagedSMBFileShare.getMaxUsers(),mountPoint);      newUnManagedSMBFileShare.setNativeId(nativeid);      newUnManagedSMBFileShare.setPath(nativeid);      unManagedSMBShareMap.put(unManagedSMBFileShare.getName(),newUnManagedSMBFileShare);      _logger.info("New SMB share name: {} has mount point: {}",unManagedSMBFileShare.getName(),mountPoint);    }  }}  }
class C{  public int length(){  return 0;}  }
class C{  public static void isInstanceOf(String argumentName,Object argumentObject,Class<?> targetClass){  notNull(argumentName,argumentObject);  if (!targetClass.isInstance(argumentObject)) {    throw new IllegalArgumentException(argumentName + " is not an instance of " + targetClass.getName());  }}  }
class C{  public ReferredByParser(String referBy){  super(referBy);}  }
class C{  public static void main(String[] args){  int three=3;  System.out.println("(int) Three is " + three);  double threePointOh=3.000000000;  System.out.println("(double) Three is " + threePointOh);  double threePointOhOneTwoThree=3.0123;  System.out.println("(double) Three point oh one two three is " + threePointOhOneTwoThree);  double foo=10.1;  System.out.printf("Here's a floating point number! %f\n",foo);  System.out.printf("Here's another floating point number! %f\n",99.17);  System.out.printf("Here is foo as an integer! %d\n",(int)foo);  System.out.printf("Here is another integer! %d\n",17);  int bigNum=1000000000;  int smallNum=6;  System.out.printf("Bignum with commas is %,d.\n",bigNum);  System.out.printf("Smallnum with commas is %,d.\n",smallNum);  int dogs=10;  int cats=3;  int snakes=2;  System.out.printf("I have %d dogs, %d cats, and %d snakes.\n",dogs,cats,snakes);  System.out.printf("I have %f dogs, %d cats, and %d snakes.\n",(float)dogs,cats,snakes);  long bar=99999999999L;  System.out.printf("Here is bar in exponential notation! %e\n",(float)bar);  String iLoveIt="hot sauce";  System.out.printf("I love %s!\n",iLoveIt);  System.out.print("I love " + iLoveIt + "!\n");  int percentSure=99;  System.out.printf("I am %d%% \"sure\" that I love %s!\n",percentSure,iLoveIt);  int numBirds=4;  System.out.printf("I have %09d birds.\n",numBirds);  System.out.printf("I have %02d birds.\n",numBirds);  numBirds=50000;  System.out.printf("I have %09d birds.\n",numBirds);  System.out.printf("I have %02d birds.\n",numBirds);  for (int j=0; j < 8; j++) {    System.out.printf("Agent %03d has died.\n",j);  }  numBirds=50;  System.out.printf("I have %03d birds.\n",numBirds);  numBirds=500;  System.out.printf("I have %03d birds.\n",numBirds);  numBirds=5000;  System.out.printf("I have %03d birds.\n",numBirds);  numBirds=2;  System.out.printf("(LEFT) I have %-5d birds.\n",numBirds);  numBirds=21;  System.out.printf("(LEFT) I have %-5d birds.\n",numBirds);  numBirds=210;  System.out.printf("(LEFT) I have %-5d birds.\n",numBirds);  numBirds=2;  System.out.printf("(RIGHT) I have %5d birds.\n",numBirds);  numBirds=21;  System.out.printf("(RIGHT) I have %5d birds.\n",numBirds);  numBirds=210;  System.out.printf("(RIGHT) I have %5d birds.\n",numBirds);  System.out.printf("(RIGHT) I have %5d birds.\n",999999);  numBirds=999210;  if (numBirds > 99999) {    System.out.printf("(RIGHT) I have -ERR- birds.\n",numBirds);  } else {    System.out.printf("(RIGHT) I have %5d birds.\n",numBirds);  }  double pi=Math.PI;  double meow=3.10000;  System.out.printf("Pi rounded to three decimal places is %.3f\n",pi);  System.out.printf("Pi rounded to four decimal places is %.4f\n",pi);  System.out.printf("Meow rounded to eight decimal places is %.8f\n",meow);  System.out.printf("Pi rounded to four decimal places is %08.4f\n",pi);  System.out.printf("Pi rounded to three decimal places is %-9.3f",pi);  System.out.println("END OF LINE HERE!");}  }
class C{  public Task<VcenterRestRep> discover(URI id){  return postTask(getIdUrl() + "/discover",id);}  }
class C{  public void init(Controller controller){  super.init(controller);  display=new Display2D(600,600,this);  display.attach(polyPortrayal,"Polys");  display.attach(peoplePortrayal,"People");  displayFrame=display.createFrame();  controller.registerFrame(displayFrame);  displayFrame.setVisible(true);  happinessChart=new TimeSeriesChartGenerator();  happinessChart.setTitle("Percent of Happy Persons in Simulation");  happinessChart.setYAxisLabel("Percent Happy");  happinessChart.setXAxisLabel("Opportunities to Move");  JFrame chartFrame=happinessChart.createFrame(this);  chartFrame.pack();  controller.registerFrame(chartFrame);  numMovesHisto=new HistogramGenerator();  numMovesHisto.setTitle("Number of Moves People Have Made");  numMovesHisto.setYAxisLabel("Number of Moves");  numMovesHisto.setXAxisLabel("number");  JFrame histoFrame=numMovesHisto.createFrame(this);  histoFrame.pack();  controller.registerFrame(histoFrame);}  }
class C{  public void testExampleKeystorePath(){  assertNotNull("Example keystore is null, meaning that something has changed in the " + "structure of the example configs and/or ExternalPaths.java - " + "SSL randomization is broken",SSLTestConfig.TEST_KEYSTORE);}  }
class C{  private void processRetList(int[] retList,int nextRetList){  int otherRetCount;  for (int i=0; i < nextRetList; i++) {    int retBlockNum=retList[i];    BasicBlock retBB=basicBlocks[retBlockNum];    boolean[] seenAlready=new boolean[bbf.getNumberofBlocks() + 1];    otherRetCount=0;    findAndSetJSRCallSite(retBlockNum,retBB,otherRetCount,seenAlready);  }}  }
class C{  public void moveReadGroup(Taxon read,int oldGroup,int newGroup){  boolean found=groups.get(oldGroup).remove(read);  if (!found)   throw new RuntimeException("Error, could not find read " + read + " in linkage group "+ oldGroup);  groups.get(newGroup).add(read);  movesMade.add(new Move(read,oldGroup,newGroup));  computeTipPartials(data.getReferenceTaxa().getTaxonCount() + oldGroup);  computeTipPartials(data.getReferenceTaxa().getTaxonCount() + newGroup);  this.fireModelChanged(alignmentTaxa.get(alignmentTaxa.size() - groups.size() + oldGroup));  this.fireModelChanged(alignmentTaxa.get(alignmentTaxa.size() - groups.size() + newGroup));}  }
class C{  private void sendFromServer(FafServerMessage fafServerMessage) throws InterruptedException {  serverToClientReadyLatch.await();  serverToClientWriter.write(fafServerMessage);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DatatypePackage.CONSTRAINT_RULE__CONSTRAINTS:    return ((InternalEList<?>)getConstraints()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void read(Reader in,Object desc) throws IOException {  RTextAreaEditorKit kit=(RTextAreaEditorKit)getUI().getEditorKit(this);  setText(null);  Document doc=getDocument();  if (desc != null)   doc.putProperty(Document.StreamDescriptionProperty,desc);  try {    kit.read(in,doc,0);  } catch (  BadLocationException e) {    throw new IOException(e.getMessage());  }}  }
class C{  @Override public String toString(){  return mediaType;}  }
class C{  public boolean isGroupChatActive(){  GroupChatSession session=mImService.getGroupChatSession(mChatId);  return session != null || State.STARTED == mPersistedStorage.getState();}  }
class C{  public void onWrite(){  writes.incrementAndGet();  if (delegate != null)   delegate.onWrite();}  }
class C{  public void run(){  if (m_menu != null)   m_menu.setBusy(true);  SwingUtilities.invokeLater(m_resetPB);  m_timer.start();  SwingUtilities.invokeLater(m_updatePB);  PreparedStatement pstmt=null;  ResultSet rs=null;  String errmsg=null;  try {    String sql="SELECT * FROM AD_Menu WHERE AD_Menu_ID=?";    if (!m_isMenu)     sql="SELECT * FROM AD_WF_Node WHERE AD_WF_Node_ID=?";    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_ID);    rs=pstmt.executeQuery();    SwingUtilities.invokeLater(m_updatePB);    if (rs.next()) {      String Action=rs.getString("Action");      String IsSOTrx="Y";      if (m_isMenu)       IsSOTrx=rs.getString("IsSOTrx");      int cmd;      if (Action.equals("W")) {        cmd=rs.getInt("AD_Window_ID");        startWindow(0,cmd);      } else       if (Action.equals("P") || Action.equals("R")) {        cmd=rs.getInt("AD_Process_ID");        startProcess(cmd,IsSOTrx);      } else       if (Action.equals("B")) {        cmd=rs.getInt("AD_Workbench_ID");        startWindow(cmd,0);      } else       if (Action.equals("F")) {        if (m_isMenu)         cmd=rs.getInt("AD_Workflow_ID"); else         cmd=rs.getInt("Workflow_ID");        if (m_menu != null)         m_menu.startWorkFlow(cmd);      } else       if (Action.equals("T")) {        cmd=rs.getInt("AD_Task_ID");        startTask(cmd);      } else       if (Action.equals("X")) {        cmd=rs.getInt("AD_Form_ID");        startForm(cmd);      } else       if (Action.equals("S")) {        cmd=rs.getInt("AD_Browse_ID");        startSmartBrowse(cmd);      } else       log.log(Level.SEVERE,"No valid Action in ID=" + m_ID);    }    SwingUtilities.invokeLater(m_updatePB);  } catch (  Exception e) {    log.log(Level.SEVERE,"ID=" + m_ID,e);    errmsg=Msg.parseTranslation(Env.getCtx(),e.getMessage());  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (errmsg != null)   ADialog.error(0,null,"Error",errmsg);  try {    Thread.sleep(1000);  } catch (  InterruptedException ie) {  }  m_timer.stop();  SwingUtilities.invokeLater(m_resetPB);  if (m_menu != null) {    m_menu.setBusy(false);  }}  }
class C{  public void authorize(Context ctx,Provider provider){  currentProvider=provider;  Log.d("SocialAuthAdapter","Selected provider is " + currentProvider);  if (socialAuthManager != null) {    if (socialAuthManager.getConnectedProvidersIds().contains(currentProvider.toString())) {      Log.d("SocialAuthAdapter","Provider already connected");      Bundle bundle=new Bundle();      bundle.putString(SocialAuthAdapter.PROVIDER,currentProvider.toString());      dialogListener.onComplete(bundle);    } else {      connectProvider(ctx,provider);    }  } else {    Log.d("SocialAuthAdapter","Loading keys and secrets from configuration");    socialAuthManager=new SocialAuthManager();    try {      loadConfig(ctx);    } catch (    Exception e) {      Log.d("SocialAuthAdapter","Could not load configuration");    }    connectProvider(ctx,provider);  }  if (!Util.isNetworkAvailable(ctx)) {    dialogListener.onError(new SocialAuthError("Please check your Internet connection",new Exception("")));  }}  }
class C{  public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  protected boolean isZoomOutKey(int keyCode){  return keyCode == '3';}  }
class C{  @Override protected void onPause(){  super.onPause();  mDownloadTask.cancel(true);  mLoadingProgressBar.setVisibility(View.INVISIBLE);}  }
class C{  public static IStatus validateIdentifier(String id,String sourceLevel,String complianceLevel){  if (scannedIdentifier(id,sourceLevel,complianceLevel) != null) {    return JavaModelStatus.VERIFIED_OK;  } else {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.bind(Messages.convention_illegalIdentifier,id),null);  }}  }
class C{  public void reverse(int i,int j){  while (j < i) {    j+=nodes.size();  }  for (int k=0; k < (j - i + 1) / 2; k++) {    int temp=get(i + k);    set(i + k,get(j - k));    set(j - k,temp);  }}  }
class C{  public void remove(){  checkState();  iterator.remove();}  }
class C{  public static boolean equals(char[] array1,char[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public void processIOException(IOExceptionEvent exceptionEvent){  if (sLogger.isActivated()) {    sLogger.debug("IO Exception on " + exceptionEvent.getTransport() + " transport");  }}  }
class C{  private static String readLine() throws IOException {  return bufferedReader.readLine();}  }
class C{  public boolean minValue(float val,float minVal){  return GenericValidator.minValue(val,minVal);}  }
class C{  public static void main(final String[] args) throws Exception {  int i=0;  int flags=ClassReader.SKIP_DEBUG;  boolean ok=true;  if (args.length < 1 || args.length > 2) {    ok=false;  }  if (ok && "-debug".equals(args[0])) {    i=1;    flags=0;    if (args.length != 2) {      ok=false;    }  }  if (!ok) {    System.err.println("Prints a disassembled view of the given class.");    System.err.println("Usage: Textifier [-debug] " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[i].endsWith(".class") || args[i].indexOf('\\') > -1 || args[i].indexOf('/') > -1) {    cr=new ClassReader(new FileInputStream(args[i]));  } else {    cr=new ClassReader(args[i]);  }  cr.accept(new TraceClassVisitor(new PrintWriter(System.out)),flags);}  }
class C{  public void sendLoadEntity(int id,int loaderId,int bayNumber){  send(new Packet(Packet.COMMAND_ENTITY_LOAD,new Object[]{id,loaderId,bayNumber}));}  }
class C{  public XpDropDownListView(Context context,boolean hijackFocus){  super(context,null,R.attr.dropDownListViewStyle);  mHijackFocus=hijackFocus;  setCacheColorHint(0);}  }
class C{  public PacketOutputStream writeByteArrayLength(final byte[] bytes){  assureBufferCapacity(bytes.length + 9);  writeFieldLength(bytes.length);  buffer.put(bytes);  return this;}  }
class C{  public double weightedFMeasure(){  return m_delegate.weightedFMeasure();}  }
class C{  public boolean isEmpty(){  return this.streams.isEmpty();}  }
class C{  protected boolean beforeSave(boolean newRecord){  setDifferenceAmt(getOpenAmt().subtract(getPayAmt()).subtract(getDiscountAmt()));  return true;}  }
class C{  public void close(){  closeParent();}  }
class C{  private void initialiseHeader(){  ListHead head=null;  head=super.getListHead();  if (head != null) {    return;  }  head=new ListHead();  if (this.getItemRenderer() instanceof WListItemRenderer) {    ((WListItemRenderer)this.getItemRenderer()).renderListHead(head);  } else {    throw new ApplicationException("Rendering of the ListHead is unsupported for " + this.getItemRenderer().getClass().getSimpleName());  }  head.setParent(this);  return;}  }
class C{  public static double toDegrees(double angrad){  if (USE_JDK_MATH) {    return Math.toDegrees(angrad);  }  return angrad * (180 / Math.PI);}  }
class C{  private void verify(){  int[] initialLocals=createInitialLocals();  superBlocks[0].merge(initialLocals,initialLocals.length,new int[0],0,itsConstantPool);  workList=new SuperBlock[]{superBlocks[0]};  workListTop=1;  executeWorkList();  for (int i=0; i < superBlocks.length; i++) {    SuperBlock sb=superBlocks[i];    if (!sb.isInitialized()) {      killSuperBlock(sb);    }  }  executeWorkList();}  }
class C{  public static int printDocumentMonospacedWordWrap(Graphics g,Document doc,int fontSize,int pageIndex,PageFormat pageFormat,int tabSize){  g.setColor(Color.BLACK);  g.setFont(new Font("Monospaced",Font.PLAIN,fontSize));  tabSizeInSpaces=tabSize;  fm=g.getFontMetrics();  int fontWidth=fm.charWidth('w');  int fontHeight=fm.getHeight();  int MAX_CHARS_PER_LINE=(int)pageFormat.getImageableWidth() / fontWidth;  int MAX_LINES_PER_PAGE=(int)pageFormat.getImageableHeight() / fontHeight;  final int STARTING_LINE_NUMBER=MAX_LINES_PER_PAGE * pageIndex;  xOffset=(int)pageFormat.getImageableX();  int y=(int)pageFormat.getImageableY() + fm.getAscent() + 1;  int numPrintedLines=0;  currentDocLineNumber=0;  rootElement=doc.getDefaultRootElement();  numDocLines=rootElement.getElementCount();  while (currentDocLineNumber < numDocLines) {    String curLineString;    Element currentLine=rootElement.getElement(currentDocLineNumber);    int startOffs=currentLine.getStartOffset();    try {      curLineString=doc.getText(startOffs,currentLine.getEndOffset() - startOffs);    } catch (    BadLocationException ble) {      ble.printStackTrace();      return Printable.NO_SUCH_PAGE;    }    curLineString=curLineString.replaceAll("\n","");    if (tabSizeInSpaces == 0) {      curLineString=curLineString.replaceAll("\t","");    } else {      int tabIndex=curLineString.indexOf('\t');      while (tabIndex > -1) {        int spacesNeeded=tabSizeInSpaces - (tabIndex % tabSizeInSpaces);        String replacementString="";        for (int i=0; i < spacesNeeded; i++)         replacementString+=' ';        curLineString=curLineString.replaceFirst("\t",replacementString);        tabIndex=curLineString.indexOf('\t');      }    }    while (curLineString.length() > MAX_CHARS_PER_LINE) {      int breakPoint=getLineBreakPoint(curLineString,MAX_CHARS_PER_LINE) + 1;      numPrintedLines++;      if (numPrintedLines > STARTING_LINE_NUMBER) {        g.drawString(curLineString.substring(0,breakPoint),xOffset,y);        y+=fontHeight;        if (numPrintedLines == STARTING_LINE_NUMBER + MAX_LINES_PER_PAGE)         return Printable.PAGE_EXISTS;      }      curLineString=curLineString.substring(breakPoint,curLineString.length());    }    currentDocLineNumber+=1;    numPrintedLines++;    if (numPrintedLines > STARTING_LINE_NUMBER) {      g.drawString(curLineString,xOffset,y);      y+=fontHeight;      if (numPrintedLines == STARTING_LINE_NUMBER + MAX_LINES_PER_PAGE)       return Printable.PAGE_EXISTS;    }  }  if (numPrintedLines > STARTING_LINE_NUMBER)   return Printable.PAGE_EXISTS;  return Printable.NO_SUCH_PAGE;}  }
class C{  public void updateDefaultPose(){  this.boxList.stream().filter(null).forEach(null);}  }
class C{  @Override protected EClass eStaticClass(){  return SRuntimePackage.Literals.EXECUTION_EVENT;}  }
class C{  public static void p(String text,int level){  instance.print(text,level);}  }
class C{  public BigAttachmentWriter(PipedOutputStream mpos,TestRequest testRequest,int attachmentSize) throws IOException {  super(mpos,testRequest);  this.attachmentSize=attachmentSize;  log.debug("Creating big attachment writer, attachment size: '{}'",attachmentSize);}  }
class C{  public String toFormattedString(){  return "3D memory copy setup:\n    " + createString("\n    ");}  }
class C{  private void reloadBuffer() throws XMLStreamException {  if (_reader == null)   throw new XMLStreamException("Input not specified");  _location._column+=_readIndex;  _location._charactersRead+=_readIndex;  _readIndex=0;  try {    _readCount=_reader.read(_readBuffer,0,_readBuffer.length);    if ((_readCount <= 0) && ((_depth != 0) || (_state != STATE_CHARACTERS)))     throw new XMLStreamException("Unexpected end of document",_location);  } catch (  IOException e) {    throw new XMLStreamException(e);  }  while ((_index + _readCount) >= _data.length) {    increaseDataBuffer();  }}  }
class C{  private static char[] yy_unpack_cmap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 86) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Override public Model makeModel(){  return new GeneratorModel(this,computeMean());}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mPm.cpuBoost(1500000);  mScrollerX.startScroll(startX,dx,duration);  mScrollerY.startScroll(startY,dy,duration);}  }
class C{  public void appendVariable(StringBuilder sb,Variable v,int isolateId){  String name=v.getName();  sb.append(name);  sb.append(" = ");  appendVariableValue(sb,v.getValue(),name,isolateId);}  }
class C{  public SimpleString[] split(final char delim){  List<SimpleString> all=null;  byte low=(byte)(delim & 0xFF);  byte high=(byte)(delim >> 8 & 0xFF);  int lasPos=0;  for (int i=0; i < data.length; i+=2) {    if (data[i] == low && data[i + 1] == high) {      byte[] bytes=new byte[i - lasPos];      System.arraycopy(data,lasPos,bytes,0,bytes.length);      lasPos=i + 2;      if (all == null) {        all=new ArrayList<>(2);      }      all.add(new SimpleString(bytes));    }  }  if (all == null) {    return new SimpleString[]{this};  } else {    byte[] bytes=new byte[data.length - lasPos];    System.arraycopy(data,lasPos,bytes,0,bytes.length);    all.add(new SimpleString(bytes));    SimpleString[] parts=new SimpleString[all.size()];    return all.toArray(parts);  }}  }
class C{  public PacketLOG(byte loglevel,String logmessage){  super(PT_LOG);  appendPayload(loglevel);  appendPayload(logmessage);}  }
class C{  private boolean isGitUrlCorrect(@NotNull String url){  if (WHITE_SPACE.test(url)) {    view.markURLInvalid();    view.setURLErrorMessage(locale.importProjectMessageStartWithWhiteSpace());    return false;  }  if (SCP_LIKE_SYNTAX.test(url)) {    view.markURLValid();    view.setURLErrorMessage(null);    return true;  }  if (!PROTOCOL.test(url)) {    view.markURLInvalid();    view.setURLErrorMessage(locale.importProjectMessageProtocolIncorrect());    return false;  }  if (!(HOST1.test(url) || HOST2.test(url))) {    view.markURLInvalid();    view.setURLErrorMessage(locale.importProjectMessageHostIncorrect());    return false;  }  if (!(REPO_NAME.test(url))) {    view.markURLInvalid();    view.setURLErrorMessage(locale.importProjectMessageNameRepoIncorrect());    return false;  }  view.markURLValid();  view.setURLErrorMessage(null);  return true;}  }
class C{  public Bucket(int itemSize,int maxLength,int inUseLength){  Preconditions.checkState(itemSize > 0);  Preconditions.checkState(maxLength >= 0);  Preconditions.checkState(inUseLength >= 0);  mItemSize=itemSize;  mMaxLength=maxLength;  mFreeList=new LinkedList();  mInUseLength=inUseLength;}  }
class C{  public static CompatibilityLinkControl createLink(final Composite parent,final int style){  Check.notNull(parent,"parent");  try {    return createNewLink(parent,style);  } catch (  final Exception e) {    return createLegacyLink(parent,style);  }}  }
class C{  public ScriptThread newThread(String[] args){  return new GroovyThread(this,args);}  }
class C{  private void initComponents(){  setLayout(new FormLayout("pref:grow, 5px, pref:grow(0.6)","fill:pref:grow"));}  }
class C{  public OptionPayloadGUI_NB(){  initComponents();}  }
class C{  public void show(){  showImpl(false);}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  int attribArgs(int initialKind,List<JCExpression> trees,Env<AttrContext> env,ListBuffer<Type> argtypes){  int kind=initialKind;  for (  JCExpression arg : trees) {    Type argtype;    if (allowPoly && deferredAttr.isDeferred(env,arg)) {      argtype=deferredAttr.new DeferredType(arg,env);      kind|=POLY;    } else {      argtype=chk.checkNonVoid(arg,attribTree(arg,env,unknownAnyPolyInfo));    }    argtypes.append(argtype);  }  return kind;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public int readUnsigned() throws IOException, EOFException {  byte b=(byte)read();  if (b == -1) {    throw new EOFException();  }  return MoreMath.signedToInt(b);}  }
class C{  @VisibleForTesting static boolean circularBufferMatchesBytePattern(byte[] byteArray,int offset,byte[] pattern){  Preconditions.checkNotNull(byteArray);  Preconditions.checkNotNull(pattern);  Preconditions.checkArgument(offset >= 0);  if (pattern.length > byteArray.length) {    return false;  }  for (int i=0; i < pattern.length; i++) {    if (byteArray[(i + offset) % byteArray.length] != pattern[i]) {      return false;    }  }  return true;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case FunctionblockPackage.RETURN_PRIMITIVE_TYPE__CONSTRAINT_RULE:    return basicSetConstraintRule(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public ShrExpr newShrExpr(Value op1,Value op2){  return new JShrExpr(op1,op2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:56.779 -0400",hash_original_method="A5E7BCD31AF83D3157F8D11FE9DEE1F1",hash_generated_method="B0989563A2859A21237FD768866FD7A4") private boolean readHeader() throws IOException {  if (consecutiveLineBreaks > 1) {    consecutiveLineBreaks=0;    return false;  }  readName();  consecutiveLineBreaks=0;  readValue();  return consecutiveLineBreaks > 0;}  }
class C{  protected Fixture(Body body,org.jbox2d.dynamics.Fixture fixture){  this.body=body;  this.fixture=fixture;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.FUNCTION_BLOCK_SOURCE;}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof FacesConfigBean : "Assertion Error: Expected FacesConfigBean to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[NavigationRuleRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  NavigationRuleBean cb=(NavigationRuleBean)clazz.newInstance();  digester.push(cb);}  }
class C{  public DenseObjectMatrix1D(Object[] values){  this(values.length);  assign(values);}  }
class C{  public static Object parse(Reader in){  try {    JSONParser parser=new JSONParser();    return parser.parse(in);  } catch (  Exception e) {    return null;  }}  }
class C{  public void clearClingForViewer(int viewerType){  Cling cling=mClingMap.get(viewerType);  if (cling == null) {    Log.w(TAG,"Cling does not exist for the given viewer type: " + viewerType);  }  cling.setReferenceView(null);  mClingMap.remove(viewerType);}  }
class C{  public static double version(){  return 19.0;}  }
class C{  public boolean isAutoStart(){  return mAutoStart;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebDoc doc=WebDoc.create("WStatus Post Request");  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public Boolean isDowngradeFormat(){  return downgradeFormat;}  }
class C{  public static void hide(Activity context){  hide(context,context.getCurrentFocus());}  }
class C{  private void adjustApproximatedKNNDistances(MkAppEntry entry,Map<DBID,KNNList> knnLists){  MkAppTreeNode<O> node=getNode(entry);  if (node.isLeaf()) {    for (int i=0; i < node.getNumEntries(); i++) {      MkAppLeafEntry leafEntry=(MkAppLeafEntry)node.getEntry(i);      PolynomialApproximation approx=approximateKnnDistances(getMeanKNNList(leafEntry.getDBID(),knnLists));      leafEntry.setKnnDistanceApproximation(approx);    }  } else {    for (int i=0; i < node.getNumEntries(); i++) {      MkAppEntry dirEntry=node.getEntry(i);      adjustApproximatedKNNDistances(dirEntry,knnLists);    }  }  ArrayModifiableDBIDs ids=DBIDUtil.newArray();  leafEntryIDs(node,ids);  PolynomialApproximation approx=approximateKnnDistances(getMeanKNNList(ids,knnLists));  entry.setKnnDistanceApproximation(approx);}  }
class C{  public static double min(double a,double b,double c){  return min(min(a,b),c);}  }
class C{  public long sum(){  long sum=0L;  for (  AtomicLong value : map.values()) {    sum=sum + value.get();  }  return sum;}  }
class C{  private DigicoreNetwork buildMultiplexNetwork(){  DigicoreNetwork dn=new DigicoreNetwork();  DigicoreActivity da1a=new DigicoreActivity("1a",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da1a.setCoord(new Coord(0.0,0.0));  da1a.setFacilityId(Id.create(1,ActivityFacility.class));  DigicoreActivity da1b=new DigicoreActivity("1b",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da1b.setCoord(new Coord(0.0,0.0));  da1b.setFacilityId(Id.create(1,ActivityFacility.class));  DigicoreActivity da2=new DigicoreActivity("2",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da2.setCoord(new Coord(2.0,0.0));  da2.setFacilityId(Id.create(2,ActivityFacility.class));  dn.addArc(da1a,da2);  dn.addArc(da1b,da2);  dn.addArc(da1b,da2);  return dn;}  }
class C{  static void skipTag(@NonNull XmlPullParser parser) throws XmlPullParserException, IOException {  if (parser.getEventType() != XmlPullParser.START_TAG) {    throw new IllegalStateException();  }  int depth=1;  while (depth != 0) {switch (parser.next()) {case XmlPullParser.END_TAG:      depth--;    break;case XmlPullParser.START_TAG:  depth++;break;}}}  }
class C{  protected void loadInputProperties(){  if (VERBOSE) {    System.out.println("Loading '" + getInputFilename() + "'...");  }  m_InputProperties=new Properties();  try {    File f=new File(getInputFilename());    if (getExplicitPropsFile() && f.exists()) {      m_InputProperties.load(new FileInputStream(getInputFilename()));    } else {      m_InputProperties=Utils.readProperties(getInputFilename());    }    m_Excludes.clear();    Properties p=Utils.readProperties(EXCLUDE_FILE);    Enumeration<?> enm=p.propertyNames();    while (enm.hasMoreElements()) {      String name=enm.nextElement().toString();      Hashtable<String,Vector<String>> t=new Hashtable<String,Vector<String>>();      m_Excludes.put(name,t);      t.put(EXCLUDE_INTERFACE,new Vector<String>());      t.put(EXCLUDE_CLASS,new Vector<String>());      t.put(EXCLUDE_SUPERCLASS,new Vector<String>());      StringTokenizer tok=new StringTokenizer(p.getProperty(name),",");      while (tok.hasMoreTokens()) {        String item=tok.nextToken();        Vector<String> list=new Vector<String>();        if (item.startsWith(EXCLUDE_INTERFACE + ":")) {          list=t.get(EXCLUDE_INTERFACE);        } else         if (item.startsWith(EXCLUDE_CLASS + ":")) {          list=t.get(EXCLUDE_CLASS);        } else         if (item.startsWith(EXCLUDE_SUPERCLASS)) {          list=t.get(EXCLUDE_SUPERCLASS);        }        list.add(item.substring(item.indexOf(":") + 1));      }    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  int pturbY(double yvalP,double yj){  int ypturb=0;  if (m_JitterVal > 0) {    ypturb=(int)(m_JitterVal * (yj / 2.0));    if (((yvalP + ypturb) < m_YaxisStart) || ((yvalP + ypturb) > m_YaxisEnd)) {      ypturb*=-1;    }  }  return ypturb;}  }
class C{  public int availablePermits(){  return sync.getPermits();}  }
class C{  private void clearDomain(DomainPK domain){  try {    ESIndexFactory.getInstance().removeDomain(getIndexNameForDomain(domain));    refreshIndexNameForDomain(domain);  } catch (  ESIndexFacadeException e) {    e.printStackTrace();  }  domains.remove(domain);}  }
class C{  private void validatePatch(State current,State patch){  ValidationUtils.validatePatch(current,patch);  ValidationUtils.validateTaskStageProgression(current.taskState,patch.taskState);}  }
class C{  public Node(Node parent,Object name){  this(parent,name,new NodeList());}  }
class C{  public int addHistogramPlot(String name,Color color,double[] sample,double... bounds){  return ((Plot2DCanvas)plotCanvas).addHistogramPlot(name,color,sample,bounds);}  }
class C{  public ConnectionResult connect(Transaction transaction,ConnectMode mode){  if (!transaction.getHash().equals(outpoint.getHash()))   return ConnectionResult.NO_SUCH_TX;  checkElementIndex((int)outpoint.getIndex(),transaction.getOutputs().size(),"Corrupt transaction");  TransactionOutput out=transaction.getOutput((int)outpoint.getIndex());  if (!out.isAvailableForSpending()) {    if (getParentTransaction().equals(outpoint.fromTx)) {      return ConnectionResult.SUCCESS;    } else     if (mode == ConnectMode.DISCONNECT_ON_CONFLICT) {      out.markAsUnspent();    } else     if (mode == ConnectMode.ABORT_ON_CONFLICT) {      outpoint.fromTx=out.getParentTransaction();      return TransactionInput.ConnectionResult.ALREADY_SPENT;    }  }  connect(out);  return TransactionInput.ConnectionResult.SUCCESS;}  }
class C{  public boolean equals(int i){  return value == i;}  }
class C{  public static void printSymbolCodePoint(Appendable out,int codePoint) throws IOException {  printCodePoint(out,codePoint,EscapeMode.ION_SYMBOL);}  }
class C{  private boolean write(Type type,Object value,NodeMap<OutputNode> node) throws Exception {  Converter converter=scanner.getConverter(type,value);  OutputNode parent=node.getNode();  if (converter != null) {    converter.write(parent,value);    return true;  }  return false;}  }
class C{  public String catalog(){  return tableId.catalog();}  }
class C{  private String executeMeshDeviceUpgradeLocalSuc(){  mIsFinished=true;  mIsSuc=true;  String uriStr="http://" + mInetAddr.getHostAddress() + "/upgrade?action=sys_reboot";  String method="POST";  EspHttpRequestBaseEntity requestEntity=new EspHttpRequestBaseEntity(method,uriStr);  return requestEntity.toString();}  }
class C{  public static Test suite(){  return new TestSuite(InstancesTest.class);}  }
class C{  public Index directoryPath(String directoryPath){  this.directoryPath=directoryPath;  return this;}  }
class C{  public static float calculateRight(float left,float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float right=(targetAspectRatio * height) + left;  return right;}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  @Override protected void forwardReply(AbstractMRListener client,AbstractMRReply r){  if (client instanceof XBeeListener) {    ((XBeeListener)client).reply((XBeeReply)r);  } else {    ((IEEE802154Listener)client).reply((IEEE802154Reply)r);  }}  }
class C{  public static void main(String[] args){  TestNotifications tester=new TestNotifications();  run(tester,ARGS,TEST,NO_TEST);  run(tester,ARGS,NO_TEST,NEGATED_TEST);  run(tester,ARGS2,NO_TEST,NEGATED_TEST2);  tester.printSummary();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void removeCollisionHandler(CollisionHandler handler){  collisionHandlers.removeValue(handler,true);}  }
class C{  public void testRecordLongTrack(){  if (!runTest) {    Log.d(TAG,BigTestUtils.DISABLE_MESSAGE);    return;  }  EndToEndTestUtils.startRecording();  int gpsNumber=5000;  for (int i=0; i < gpsNumber / 10; i++) {    EndToEndTestUtils.sendGps(10,i * 10);  }  EndToEndTestUtils.stopRecording(true);}  }
class C{  private void takeSnapshot(){  Snapshot currentSnapshot=state.getSnapshotStore().currentSnapshot();  if (pendingSnapshot == null && stateMachine instanceof Snapshottable && (currentSnapshot == null || (log.compactor().compactIndex() > currentSnapshot.index() && lastApplied > currentSnapshot.index()))) {    pendingSnapshot=state.getSnapshotStore().createSnapshot(lastApplied);    LOGGER.info("{} - Taking snapshot {}",state.getCluster().member().address(),pendingSnapshot.index());synchronized (pendingSnapshot) {      try (SnapshotWriter writer=pendingSnapshot.writer()){        ((Snapshottable)stateMachine).snapshot(writer);      }     }  }}  }
class C{  public void clear(){  size=0;  offset=0;  currentBufferIndex=-1;  currentBuffer=null;  buffersCount=0;}  }
class C{  public static void openProjects(final JTree projectTree,final INaviProject[] projects){  for (  final INaviProject project : projects) {    CProjectLoader.loadProject(projectTree,project);  }}  }
class C{  GenericPackageBO(KLVPacket.Header header){  super(header);}  }
class C{  private void fillBook(List<String> achievements,Player player){  ItemStack book=new ItemStack(Material.WRITTEN_BOOK);  ArrayList<String> pages=new ArrayList<>();  BookMeta bm=(BookMeta)book.getItemMeta();  try {    for (int i=0; i < achievements.size(); i+=3) {      String currentAchievement="&0" + achievements.get(i) + "\n"+ bookSeparator+ "\n"+ achievements.get(i + 1)+ "\n"+ bookSeparator+ "\n&r"+ achievements.get(i + 2);      currentAchievement=ChatColor.translateAlternateColorCodes('&',currentAchievement);      pages.add(currentAchievement);    }  } catch (  Exception e) {    plugin.getLogger().severe("Error while creating book pages of book.");  }  bm.setPages(pages);  bm.setAuthor(player.getName());  bm.setTitle(plugin.getPluginLang().getString("book-name","Achievements Book"));  SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd");  bm.setLore(Arrays.asList(ChatColor.translateAlternateColorCodes('&',"&r&o" + plugin.getPluginLang().getString("book-date","Book created on DATE.").replace("DATE",format.format(new Date())))));  book.setItemMeta(bm);  if (player.getInventory().firstEmpty() != -1)   player.getInventory().addItem(book); else   player.getWorld().dropItem(player.getLocation(),book);}  }
class C{  protected boolean[] instanceWeights(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("scheme uses instance weights");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=2 * getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  boolean[] result=new boolean[2];  Instances train=null;  ASSearch[] search=null;  ASEvaluation evaluationB=null;  ASEvaluation evaluationI=null;  AttributeSelection attselB=null;  AttributeSelection attselI=null;  boolean evalFail=false;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() + 1 : 0,numericPredictor ? getNumNumeric() + 1 : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);    }    search=ASSearch.makeCopies(getSearch(),2);    evaluationB=ASEvaluation.makeCopies(getEvaluator(),1)[0];    evaluationI=ASEvaluation.makeCopies(getEvaluator(),1)[0];    attselB=search(search[0],evaluationB,train);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    for (int i=0; i < train.numInstances(); i++) {      train.instance(i).setWeight(0);    }    Random random=new Random(1);    for (int i=0; i < train.numInstances() / 2; i++) {      int inst=Math.abs(random.nextInt()) % train.numInstances();      int weight=Math.abs(random.nextInt()) % 10 + 1;      train.instance(inst).setWeight(weight);    }    attselI=search(search[1],evaluationI,train);    if (attselB.toResultsString().equals(attselI.toResultsString())) {      evalFail=true;      throw new Exception("evalFail");    }    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      if (evalFail) {        println("Results don't differ between non-weighted and " + "weighted instance models.");        println("Here are the results:\n");        println("\nboth methods\n");        println(evaluationB.toString());      } else {        print("Problem during training");        println(": " + ex.getMessage() + "\n");      }      println("Here is the dataset:\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");      println("=== Train Weights ===\n");      for (int i=0; i < train.numInstances(); i++) {        println(" " + (i + 1) + "    "+ train.instance(i).weight());      }    }  }  return result;}  }
class C{  public static Integer valueOf(int i){  return null;}  }
class C{  protected MathIllegalNumberException(Localizable pattern,Number wrong,Object... arguments){  super(pattern,wrong,arguments);  argument=wrong;}  }
class C{  public InlineQueryResultVenue.InlineQueryResultVenueBuilder id(String id){  this.id=id;  return this;}  }
class C{  private void afterKeyDestroy(EntryEvent<String,RedisDataType> event){  if (event.isOriginRemote()) {    final String key=(String)event.getKey();    final RedisDataType value=event.getOldValue();    if (value != null && value != RedisDataType.REDIS_STRING && value != RedisDataType.REDIS_HLL && value != RedisDataType.REDIS_PROTECTED) {      ByteArrayWrapper kW=Coder.stringToByteArrayWrapper(key);      Region<?,?> r=this.regionCache.getRegion(kW);      if (r != null) {        this.regionCache.removeRegionReferenceLocally(kW,value);      }    }  }}  }
class C{  private void showToast(@StringRes int resId){  hideToast();  mToast=Toast.makeText(getContext(),resId,Toast.LENGTH_SHORT);  mToast.show();}  }
class C{  static List<File> tidyDatabaseList(List<File> databaseFiles){  Set<File> originalAsSet=new HashSet<File>(databaseFiles);  List<File> tidiedList=new ArrayList<File>();  for (  File databaseFile : databaseFiles) {    String databaseFilename=databaseFile.getPath();    String sansSuffix=removeSuffix(databaseFilename,UNINTERESTING_FILENAME_SUFFIXES);    if (sansSuffix.equals(databaseFilename) || !originalAsSet.contains(new File(sansSuffix))) {      tidiedList.add(databaseFile);    }  }  return tidiedList;}  }
class C{  public static ContentSigner createContentSigner(String algorithm,PrivateKey key) throws OperatorCreationException {  return new JcaContentSignerBuilder(algorithm).build(key);}  }
class C{  private static void addOffset(byte[] code,int offset){  if ((codeIndex ^ (codeIndex + GUARD_REGION)) >= CHUNK_BYTES) {    codeIndex=(codeIndex + GUARD_REGION) & ~(CHUNK_BYTES - 1);    oldIndex=codeIndex;    codeIndex=encodeLongEncoding(code,codeIndex,offset);    if (DEBUG) {      startRefs++;      Log.write("[chunk: ");      Log.write(codeIndex);      Log.write(" offset: ");      Log.write(offset);      Log.write(" last offset: ");      Log.write(lastOffset);      Log.writeln("]");    }  } else {    int delta=offset - lastOffset;    if (VM.VerifyAssertions)     VM._assert((delta & 0x3) == 0);    if (VM.VerifyAssertions)     VM._assert(delta > 0);    int currentrun=(code[codeIndex]) & 0xff;    if ((delta == BYTES_IN_ADDRESS) && (currentrun < MAX_RUN)) {      currentrun++;      code[codeIndex]=(byte)(currentrun & 0xff);      code[oldIndex]|=RUN_MASK;      if (DEBUG)       runRefs++;    } else {      if (currentrun != 0)       codeIndex++;      oldIndex=codeIndex;      if (delta < 1 << BITS_IN_BYTE) {        code[codeIndex++]=(byte)(delta & 0xff);        if (DEBUG)         shortRefs++;      } else {        codeIndex=encodeLongEncoding(code,codeIndex,offset);        if (DEBUG)         longRefs++;      }    }  }  if (offset != getOffset(code,oldIndex,lastOffset)) {    Log.write("offset: ");    Log.writeln(offset);    Log.write("last offset: ");    Log.writeln(lastOffset);    Log.write("offset: ");    Log.writeln(getOffset(code,oldIndex,lastOffset));    Log.write("index: ");    Log.writeln(oldIndex);    Log.write("index: ");    Log.writeln(oldIndex & (CHUNK_BYTES - 1));    Log.writeln();    Log.write("1: ");    Log.writeln(code[oldIndex]);    Log.write("2: ");    Log.writeln(code[oldIndex + 1]);    Log.write("3: ");    Log.writeln(code[oldIndex + 2]);    Log.write("4: ");    Log.writeln(code[oldIndex + 3]);    Log.write("5: ");    Log.writeln(code[oldIndex + 4]);    if (VM.VerifyAssertions)     VM._assert(offset == getOffset(code,oldIndex,lastOffset));  }  lastOffset=offset;}  }
class C{  private void init(String saxParser,InputSource is) throws TagLibException {  try {    xmlReader=XMLUtil.createXMLReader(saxParser);    xmlReader.setContentHandler(this);    xmlReader.setErrorHandler(this);    xmlReader.setEntityResolver(new TagLibEntityResolver());    xmlReader.parse(is);  } catch (  IOException e) {    throw new TagLibException(e);  }catch (  SAXException e) {    e.printStackTrace();    throw new TagLibException(e);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:10.814 -0500",hash_original_method="D4F915DF738351C94CAE2742EF7502E4",hash_generated_method="00D080E7FE990AFC83626B54C393ADE4") synchronized String[][] internalZoneStrings(){  if (zoneStrings == null) {    zoneStrings=TimeZones.getZoneStrings(locale);  }  return zoneStrings;}  }
class C{  public V put(long key,V value){  return put(key,value,sizeOf(value));}  }
class C{  private Object readResolve(){  return forName(name);}  }
class C{  public DistributedQueueImpl(ZkConnection conn,DistributedQueueConsumer<T> consumer,QueueSerializer<T> serializer,String name,int maxThreads){  this(conn,consumer,serializer,name,maxThreads,DEFAULT_MAX_ITEM);}  }
class C{  public ObdDataPlotter(){  setLayout(new BorderLayout());  chart=createChart(dataset);  ChartPanel chartPanel=new ChartPanel(chart);  chartPanel.setMouseZoomable(true,false);  add(chartPanel,BorderLayout.CENTER);}  }
class C{  public void dirty(){  dirty=true;  Log.d("StorageDelegator","setting delegator to dirty");}  }
class C{  static final public byte[] serialize(final Object obj){  final ByteArrayOutputStream baos=new ByteArrayOutputStream();  try {    final ObjectOutputStream oos=new ObjectOutputStream(baos);    oos.writeObject(obj);    oos.flush();    oos.close();  } catch (  Exception ex) {    throw new RuntimeException(ex);  }  return baos.toByteArray();}  }
class C{  public boolean matches(Function function,String id){  return mFunction == function && mID != null && id != null && id.matches(mID.replace("*",".?"));}  }
class C{  public void removeParameters(){  parameters=new Vector();}  }
class C{  public void confirm(String result){  mStringResult=result;  confirm();}  }
class C{  protected final int addNode(int type,int expandedTypeID,int parentIndex,int previousSibling,int dataOrPrefix,boolean canHaveFirstChild){  int nodeIndex=m_size++;  if (nodeIndex == m_maxNodeIndex) {    addNewDTMID(nodeIndex);    m_maxNodeIndex+=(1 << DTMManager.IDENT_DTM_NODE_BITS);  }  m_firstch.addElement(DTM.NULL);  m_nextsib.addElement(DTM.NULL);  m_parent.addElement(parentIndex);  m_exptype.addElement(expandedTypeID);  m_dataOrQName.addElement(dataOrPrefix);  if (m_prevsib != null) {    m_prevsib.addElement(previousSibling);  }  if (m_locator != null && m_useSourceLocationProperty) {    setSourceLocation();  }switch (type) {case DTM.NAMESPACE_NODE:    declareNamespaceInContext(parentIndex,nodeIndex);  break;case DTM.ATTRIBUTE_NODE:break;default :if (DTM.NULL != previousSibling) {m_nextsib.setElementAt(nodeIndex,previousSibling);} else if (DTM.NULL != parentIndex) {m_firstch.setElementAt(nodeIndex,parentIndex);}break;}return nodeIndex;}  }
class C{  public void addDatatype(Class<?> type,URI datatype) throws ObjectStoreConfigException {  List<URI> list=datatypes.get(type);  if (list == null && datatypes.containsKey(type))   throw new ObjectStoreConfigException(type.getSimpleName() + " can only be added once");  if (list == null) {    datatypes.put(type,list=new LinkedList<URI>());  }  list.add(datatype);}  }
class C{  private String determineSubscriptionKey(long triggerProcessKey) throws Exception {  ResourceHolder holder=getTriggerProcessParameters(triggerProcessKey);  ResultSet triggerProcessParameters=holder.getRs();  while (triggerProcessParameters.next()) {    String parameterName=triggerProcessParameters.getString("name");    if (TriggerProcessParameterName.SUBSCRIPTION.name().equals(parameterName)) {      VOSubscription entry=getObjectFromXML(triggerProcessParameters,VOSubscription.class);      holder.close();      return String.valueOf(entry.getKey());    }  }  throw new Exception("Migration failed, no product entry found for trigger process!");}  }
class C{  public String toString(){  return "RGB(" + red + ","+ green+ ","+ blue+ ")";}  }
class C{  public Node<T> addChildren(Collection<? extends T> data){  for (  T aux : data)   children.add(new Node<T>(aux,depth + 1,this,children.size()));  return this;}  }
class C{  public static void main(String[] args){  ArrayList<Number> list=new ArrayList<>();  list.add(1);  list.add(2.3);  list.add(3);  list.add(4.6);  list.add(5);  list.add(6.246);  list.add(7.43);  list.add(8);  System.out.println(list.toString());  shuffle(list);  System.out.println(list.toString());}  }
class C{  public void truncateBlocking(){  truncateBlocking(DatabaseDescriptor.isAutoSnapshot());}  }
class C{  public long size(){  return text == null ? 0 : text.length();}  }
class C{  protected ShaderVar addAttribute(String name,DataType dataType){  ShaderVar v=getInstanceForDataType(name,dataType);  v.isGlobal(true);  mAttributes.put(v.getName(),v);  return v;}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  @Override public Long waitReplicas(int replicas,long timeout){  checkIsInMultiOrPipeline();  client.waitReplicas(replicas,timeout);  return client.getIntegerReply();}  }
class C{  public MaterializeBuilder withFullscreen(boolean fullscreen){  this.mFullscreen=fullscreen;  if (fullscreen) {    withTranslucentNavigationBarProgrammatically(true);    withTintedStatusBar(false);    withTintedNavigationBar(false);  }  return this;}  }
class C{  private IPersistentMap<String,PnLStream> loadHistoricData() throws IOException {  PersistentHashMap<String,PnLStream> out=new PersistentHashMap<String,PnLStream>();  InputStream is=this.getClass().getResourceAsStream("/historic_var.csv");  BufferedReader br=new BufferedReader(new InputStreamReader(is));  String line=br.readLine();  IPersistentVector<LocalDate> dates=PersistentVector.emptyVector();  String[] headerRow=line.split(",");  for (int i=1; i < headerRow.length; i++) {    LocalDate ta=LocalDate.parse(headerRow[i].trim());    dates=dates.cons(ta);  }  line=br.readLine();  while (line != null) {    String[] parts=line.split(",");    String ticker=parts[0];    IPersistentMap<LocalDate,Float> pnls=new PersistentHashMap<LocalDate,Float>();    for (int i=1; i < parts.length; i++) {      Float f=Float.parseFloat(parts[i]);      pnls=pnls.assoc(dates.get(i - 1),f);    }    PnLStream pnl=new PnLStream(pnls);    out=out.assoc(ticker,pnl);    line=br.readLine();  }  return out;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void pasteIntoCurrentDir(File file){  mIsPasteShown=false;  AsyncCopyMoveTask task=new AsyncCopyMoveTask(mContext,file,new File(currentDir + "/" + file.getName()),this,shouldMoveCopiedFile);  task.execute();}  }
class C{  public static ServiceDiscoveryRestEndpoint create(Router router,ServiceDiscovery discovery,String root){  return new ServiceDiscoveryRestEndpoint(router,discovery,root);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean containsNode(Node node){  return sessionNodeWrappers.contains(node);}  }
class C{  public void dismiss(){  mPopupView.mMarker.animateClose();}  }
class C{  void init(int opmode,Key key,SecureRandom random) throws InvalidKeyException {  try {    init(opmode,key,(AlgorithmParameterSpec)null,random);  } catch (  InvalidAlgorithmParameterException e) {    throw new InvalidKeyException(e.getMessage());  }}  }
class C{  public void addTvShow(TvShow newValue){  int oldValue=tvShowList.size();  tvShowList.add(newValue);  newValue.addPropertyChangeListener(propertyChangeListener);  firePropertyChange(TV_SHOWS,null,tvShowList);  firePropertyChange(ADDED_TV_SHOW,null,newValue);  firePropertyChange(TV_SHOW_COUNT,oldValue,tvShowList.size());}  }
class C{  public static String padAndTruncateString(String s,int fieldSize){  return padAndTruncateString(s,fieldSize,Setup.isTabEnabled());}  }
class C{  private void addWeekNumberLabels(){  weekNumberLabels=new ArrayList<JLabel>();  int weekNumberLabelColumnX=constantFirstWeekNumberLabelCell.x;  int weekNumberLabelWidthInCells=1;  int weekNumberLabelHeightInCells=1;  for (int i=0; i < 6; ++i) {    int weekNumberLabelRowY=(i + constantFirstWeekNumberLabelCell.y);    JLabel weekNumberLabel=new JLabel();    weekNumberLabel.setHorizontalAlignment(SwingConstants.CENTER);    weekNumberLabel.setVerticalAlignment(SwingConstants.CENTER);    weekNumberLabel.setBorder(new EmptyBorder(constantWeekNumberLabelInsets));    weekNumberLabel.setOpaque(true);    weekNumberLabel.setText("3" + i);    weekNumberLabel.setVisible(false);    CellConstraints constraints=CC.xywh(weekNumberLabelColumnX,weekNumberLabelRowY,weekNumberLabelWidthInCells,weekNumberLabelHeightInCells);    centerPanel.add(weekNumberLabel,constraints);    weekNumberLabels.add(weekNumberLabel);  }  setSizeOfWeekNumberLabels();}  }
class C{  private double computeWidth(){  return hitBoxes.stream().mapToDouble(null).max().orElse(0);}  }
class C{  public ESNNetworkNode(NetworkPanel networkPanel,EchoStateNetwork group){  super(networkPanel,group);  setContextMenu();}  }
class C{  @Override protected void starting_bytecode(){}  }
class C{  public CReilInstructionDialogMenu(final JTextArea textArea){  add(new JMenuItem(new CActionCopyReilCode(textArea)));}  }
class C{  public Observable<Void> unpublishObservable(String id){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  unpublish(id,resultHandler.toHandler());  return resultHandler;}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    push(instance);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y, z;  int progress;  int i, n;  double[][] vertices=null;  int pointNum=0;  int numPoints=0;  int numFeatures;  int oneHundredthTotal;  double neighbourhoodRadius;  ShapeType shapeType, outputShapeType;  List<KdTree.Entry<Double>> results;  double[] entry;  double nodeGapThreshold=5;  int[] parts={0};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  neighbourhoodRadius=Double.parseDouble(args[2]);  nodeGapThreshold=Integer.parseInt(args[3]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    outputShapeType=ShapeType.POLYLINE;    DBFField[] fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("VALUE");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(4);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    int recordNum;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      vertices=record.getGeometry().getPoints();      numPoints=vertices.length;      KdTree<Double> pointsTree=new KdTree.SqrEuclid(2,new Integer(numPoints));      for (i=0; i < numPoints; i++) {        x=vertices[i][0];        y=vertices[i][1];        entry=new double[]{y,x};        z=i;        pointsTree.addPoint(entry,z);      }      ArrayList<ShapefilePoint> pnts=new ArrayList<>();      int lineLength=0;      for (i=0; i < numPoints; i++) {        x=vertices[i][0];        y=vertices[i][1];        entry=new double[]{y,x};        results=pointsTree.neighborsWithinRange(entry,neighbourhoodRadius);        double maxVal=0;        double minVal=numPoints;        double range=0;        double j;        double[] values=new double[results.size()];        int k=0;        for (        KdTree.Entry entry2 : results) {          j=(double)entry2.value;          values[k]=j;          k++;          if (j > maxVal) {            maxVal=j;          }          if (j < minVal) {            minVal=j;          }        }        range=maxVal - minVal;        if (range == numPoints - 1) {          maxVal=0;          minVal=numPoints;          values=new double[results.size()];          k=0;          for (          KdTree.Entry entry2 : results) {            j=(double)entry2.value;            if (j < numPoints / 2) {              j+=numPoints;            }            if (j > maxVal) {              maxVal=j;            }            if (j < minVal) {              minVal=j;            }            values[k]=j;            k++;          }          range=maxVal - minVal;        }        Arrays.sort(values);        double maxGap=0;        for (int a=1; a < k; a++) {          if (values[a] - values[a - 1] > maxGap) {            maxGap=values[a] - values[a - 1];          }        }        if (maxGap >= nodeGapThreshold) {          pnts.add(new ShapefilePoint(x,y));          lineLength++;          if (i == numPoints - 1) {            PointsList pl=new PointsList(pnts);            whitebox.geospatialfiles.shapefile.PolyLine wbPoly=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());            Object[] rowData=new Object[1];            rowData[0]=new Double(recordNum);            output.addRecord(wbPoly,rowData);            pnts.clear();            lineLength=0;          }        } else         if (lineLength > 1) {          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbPoly=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          Object[] rowData=new Object[1];          rowData[0]=new Double(recordNum);          output.addRecord(wbPoly,rowData);          pnts.clear();          lineLength=0;        } else {          pnts.clear();          lineLength=0;        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress(progress);      }    }    output.write();    updateProgress("Displaying vector: ",0);    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected final boolean passesHavelHakimiTest(){  MutableDegreeDistribution copy=new MutableSimpleDegreeDistribution(getDegrees());  int i=0;  int first;  int L=this.size();  while (L > 0) {    first=copy.get(i);    L--;    int j=1;    for (int k=0; k < first; ++k) {      while (copy.get(j) == 0) {        j++;        if (j > L) {          return false;        }      }      copy.set(j,copy.get(j) - 1);    }    copy.set(i,0);    copy.sort(Collections.<Integer>reverseOrder());  }  return true;}  }
class C{  public Renaming addAll(Renaming renaming){  Renaming result=this.clone();  for (int i=0; i < renaming.identifiers.size(); i++) {    int j=0;    boolean notFound=true;    while ((j < this.identifiers.size()) && notFound) {      if (renaming.identifiers.elementAt(i) == this.identifiers.elementAt(j)) {        notFound=false;      }      j++;    }    if (notFound) {      result.identifiers.add(renaming.identifiers.elementAt(i));      result.newNames.add(renaming.newNames.elementAt(i));    }  }  return result;}  }
class C{  public static int gcd_differences(int[] a){  if (a.length < 2) {    return 0;  }  int result=a[1] - a[0];  for (int i=2; i < a.length; i++) {    result=gcd(a[i] - a[i - 1],result);    if ((result == 1) || (result == 0)) {      return result;    }  }  return result;}  }
class C{  private void recursiveExtendedREsCollector(IN4JSSourceContainerAware sourceContainer,Collection<IN4JSProject> addHere){  final IN4JSProject project=extractProject(sourceContainer);  if (project.getProjectType().equals(ProjectType.RUNTIME_ENVIRONMENT)) {    addHere.add(project);    project.getProvidedRuntimeLibraries().forEach(null);    Optional<String> ep=project.getExtendedRuntimeEnvironmentId();    Optional<IN4JSProject> extendedRE=Optional.absent();    if (ep.isPresent()) {      extendedRE=findRuntimeEnvironemtnWithName(ep.get());    }    if (extendedRE.isPresent()) {      IN4JSProject e=extendedRE.get();      recursiveExtendedREsCollector(e,addHere);    }  }}  }
class C{  public Object parse(InputStream inputStream){  if (inputStream == null) {    throw new IllegalArgumentException("inputStream must not be null");  }  Object content;  JsonParser parser=createParser();  content=parser.parse(inputStream);  return content;}  }
class C{  public Identity(final int dim){  this(dim,EnumSet.noneOf(Address.Flags.class));}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Node refChild;  Node newChild;  NodeList elementList;  Node elementNode;  Node insertedNode;  doc1=(Document)load("hc_staff",false);  doc2=(Document)load("hc_staff",true);  newChild=doc1.createElement("br");  elementList=doc2.getElementsByTagName("p");  elementNode=elementList.item(1);  refChild=elementNode.getFirstChild();{    boolean success=false;    try {      insertedNode=elementNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  throw new NotSerializableException();}  }
class C{  public void add(LogLevelHourStatistics statistics){  if (level_DEBUG == null) {    level_DEBUG=0;  }  if (level_TRACE == null) {    level_TRACE=0;  }  if (level_INFO == null) {    level_INFO=0;  }  if (level_WARN == null) {    level_WARN=0;  }  if (level_FATAL == null) {    level_FATAL=0;  }  if (level_ERROR == null) {    level_ERROR=0;  }  level_DEBUG+=statistics.getLevel_DEBUG();  level_TRACE+=statistics.getLevel_TRACE();  level_INFO+=statistics.getLevel_INFO();  level_ERROR+=statistics.getLevel_ERROR();  level_WARN+=statistics.getLevel_WARN();  level_FATAL+=statistics.getLevel_FATAL();}  }
class C{  public static int tick2index(Track track,long tick){  int ret=0;  if (tick > 0) {    int low=0;    int high=track.size() - 1;    while (low < high) {      ret=(low + high) >> 1;      long t=track.get(ret).getTick();      if (t == tick) {        break;      } else       if (t < tick) {        if (low == high - 1) {          ret++;          break;        }        low=ret;      } else {        high=ret;      }    }  }  return ret;}  }
class C{  private boolean matchesEthernet(NetworkIdentity ident){  if (ident.mType == TYPE_ETHERNET) {    return true;  }  return false;}  }
class C{  public StringBuffer computeIndentation(int offset,boolean assumeOpeningBrace){  StringBuffer reference=getReferenceIndentation(offset,assumeOpeningBrace);  if (fAlign != JavaHeuristicScanner.NOT_FOUND) {    try {      IRegion line=fDocument.getLineInformationOfOffset(fAlign);      int lineOffset=line.getOffset();      return createIndent(lineOffset,fAlign,false);    } catch (    BadLocationException e) {      return null;    }  }  if (reference == null)   return null;  return createReusingIndent(reference,fIndent);}  }
class C{  public void storageType(int type){  closedStorage=type;}  }
class C{  public static String stringArrayToString(String[] A){  if (A.length == 0) {    return A[0];  }  String result=A[0];  for (int i=1; i < A.length; i++) {    result=result + "\n" + A[i];  }  return result;}  }
class C{  private boolean nextElement(String uri,String name){  try {    while (reader.hasNext()) {      reader.next();      if (isAtElement(uri,name)) {        return true;      }    }  } catch (  Exception e) {    throw new RuntimeException(e);  }  return false;}  }
class C{  private void performAxisTransition(int fromAxis,int toAxis,boolean sendEvent,String contentDescription){  if (mCurrentAxis == fromAxis) {    setCurrentAxis(toAxis,sendEvent,contentDescription);  }}  }
class C{  public DeleteIndexTemplateRequest(String name){  this.name=name;}  }
class C{  protected void autoAdjust(int w,int h){  if (autoAdjustDialogSize) {    growOrShrinkImpl(w,h);  }}  }
class C{  public Stream<T> depthFirst(){  Stream<T> childStream=children.stream().flatMap(null);  if (value == null) {    return childStream;  } else {    return Stream.concat(Stream.of(value),childStream);  }}  }
class C{  @Override public int remainingCapacity(){  return size - stackTop;}  }
class C{  public void onEvent(Event e) throws Exception {  if (e.getTarget().getId().equals(ConfirmPanel.A_OK)) {    dispose();    m_wasCancelled=false;  } else   if (e.getTarget().getId().equals(ConfirmPanel.A_CANCEL)) {    dispose();    m_M_AttributeSetInstance_ID=-1;    m_M_AttributeSetInstanceName=null;    m_wasCancelled=true;  } else   if (e.getTarget() == showAll) {    refresh();  }}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 1;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static synchronized void initializeEnvironment(){  if (_isStaticInit)   return;  _isStaticInit=true;  ClassLoader systemLoader=ClassLoader.getSystemClassLoader();  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  try {    thread.setContextClassLoader(systemLoader);    if ("1.8.".compareTo(System.getProperty("java.runtime.version")) > 0)     throw new ConfigException("Baratine requires JDK 1.8 or later");    Properties props=System.getProperties();    ClassLoader envClassLoader=EnvironmentClassLoader.class.getClassLoader();  } catch (  Throwable e) {    log().log(Level.FINE,e.toString(),e);  } finally {    thread.setContextClassLoader(oldLoader);    _isInitComplete=true;  }}  }
class C{  public TermTermVectorsFromLucene(FlagConfig flagConfig,VectorStore elementalTermVectors) throws IOException {  this.flagConfig=flagConfig;  this.random=new Random();  if (elementalTermVectors != null) {    retraining=true;    this.elementalTermVectors=elementalTermVectors;    VerbatimLogger.info("Reusing basic term vectors; number of terms: " + elementalTermVectors.getNumVectors() + "\n");  } else {    this.elementalTermVectors=new ElementalVectorStore(flagConfig);  }  if (flagConfig.positionalmethod().equals(PositionalMethod.EMBEDDINGS)) {    if (!flagConfig.vectortype().equals(VectorType.BINARY)) {      flagConfig.seedlength=flagConfig.dimension();      VerbatimLogger.info("Setting seedlength=dimensionality, to initialize embedding weights");    } else {      VerbatimLogger.info("Warning: binary vector embeddings are in the experimental phase");    }  }  if (flagConfig.positionalmethod() == PositionalMethod.PERMUTATION || flagConfig.positionalmethod() == PositionalMethod.PERMUTATIONPLUSBASIC)   initializePermutations(); else   if (flagConfig.positionalmethod() == PositionalMethod.DIRECTIONAL)   initializeDirectionalPermutations(); else   if (flagConfig.positionalmethod() == PositionalMethod.PROXIMITY)   initializeNumberRepresentations();  trainTermTermVectors();}  }
class C{  public String baseModelId(){  return baseModelId;}  }
class C{  public Surface clear(){  return clear(0,0,0,0);}  }
class C{  public Builder clear(){  localeBuilder.clear();  return this;}  }
class C{  public TLongFloatHashMapDecorator(TLongFloatHashMap map){  super();  this._map=map;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public onCellUpdated(final String operatorName,final String mcc,final String mnc,final String sid,final String nid,final String bid,final int area,final String cell_id,final String technology,final int level){  this.operator=operatorName;  this.mcc=mcc;  this.mnc=mnc;  this.area=area;  this.cell_id=cell_id;  this.technology=technology;  this.level=level;  this.sid=sid;  this.nid=nid;  this.bid=bid;}  }
class C{  protected static void remotePut(String regionName,String entryName,Object value,Scope scope) throws CacheException {  Region root=getRootRegion();  Region region=root.getSubregion(regionName);  Region sub=region.getSubregion(entryName);  if (sub == null) {    AttributesFactory factory=new AttributesFactory();    factory.setScope(scope);    sub=region.createSubregion(entryName,factory.create());  }  sub.put(entryName,value);  LogWriterUtils.getLogWriter().info("Put value " + value + " in entry "+ entryName+ " in region '"+ region.getFullPath()+ "'");}  }
class C{  private static String dblString(BigDecimal decimalValue,int availableSpace){  return dblString(decimalValue,-1,availableSpace);}  }
class C{  public void testRemainingCapacity(){  LinkedBlockingQueue q=populatedQueue(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.remainingCapacity());    assertEquals(SIZE - i,q.size());    q.remove();  }  for (int i=0; i < SIZE; ++i) {    assertEquals(SIZE - i,q.remainingCapacity());    assertEquals(i,q.size());    q.add(new Integer(i));  }}  }
class C{  public byte[] toByteArray(){  return toProto().toByteArray();}  }
class C{  private static double arcAngle(Point center,Point a,Point b,Rect area,int radius){  double angle=threePointsAngle(center,a,b);  Point innerPoint=findMidnormalPoint(center,a,b,area,radius);  Point midInsectPoint=new Point((a.x + b.x) / 2,(a.y + b.y) / 2);  double distance=pointsDistance(midInsectPoint,innerPoint);  if (distance > radius) {    return 360 - angle;  }  return angle;}  }
class C{  private void connectToWifi(WifiConfiguration config){  assertTrue("failed to associate with " + config.SSID,mAct.connectToWifiWithConfiguration(config));  assertTrue("failed to connect with " + config.SSID,mAct.waitForNetworkState(ConnectivityManager.TYPE_WIFI,State.CONNECTED,ConnectivityManagerTestActivity.WIFI_CONNECTION_TIMEOUT));  assertNotNull("Wifi connection returns null",mAct.mWifiManager.getConnectionInfo());  assertTrue(config.SSID.contains(mAct.mWifiManager.getConnectionInfo().getSSID()));}  }
class C{  public void addGroupMembershipInfo(GroupMembershipInfo groupMembershipInfo){  getGroupMembershipInfos().add(groupMembershipInfo);}  }
class C{  public h2 addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private IllegalArgumentException missingDialog(int id){  return new IllegalArgumentException("no dialog with id " + id + " was ever "+ "shown via Activity#showDialog");}  }
class C{  @Override protected final int nextIndex(){  if (_expectedSize != _map.size()) {    throw new ConcurrentModificationException();  }  Object[] values=_map._values;  int i=_index;  while (i-- > 0 && !TDoubleObjectHashMap.isFull(values,i))   ;  return i;}  }
class C{  public boolean readMessage(InputStream is) throws IOException {  Thread thread=Thread.currentThread();  ClassLoader loader=thread.getContextClassLoader();  try (OutboxAmp outbox=OutboxAmp.currentOrCreate(getManager())){    return readMessage(is,outbox);  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    throw e;  } finally {    thread.setContextClassLoader(loader);  }}  }
class C{  @Override public void mousePressed(MouseEvent e){  if (typingTarget != null) {    endEdit();    if (isToolDoneAfterCreation()) {      fireToolDone();    }  } else {    super.mousePressed(e);    TextHolderFigure textHolder=(TextHolderFigure)getCreatedFigure();    getView().clearSelection();    getView().addToSelection(textHolder);    beginEdit(textHolder);    updateCursor(getView(),e.getPoint());  }}  }
class C{  public Integer loadRepAllValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadRepAllValues");  _id=statement.getShortInteger(index++);  _name=statement.getShortText(index++);  _info=FssMdoUtil.decodeRepInfo(statement.getLongText(index++));  _path=_info.m_path;  _server=_info.m_srv;  _port=_info.m_port;  _user=_info.m_usr;  _password=_info.m_pwd;  _os=_info.m_os;  _type=_info.m_type;  _state=statement.getLongInteger(index++);  _remarks=statement.getShortText(index++);  _creatorId=statement.getLongInteger(index++);  _creationDate=statement.getDateTime(index++);  _updaterId=statement.getLongInteger(index++);  _updateDate=statement.getDateTime(index++);  return new Integer(index);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEFloodElement(prefix,(AbstractDocument)doc);}  }
class C{  public HashMapPro(Map<? extends K,? extends V> m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR);  putAllForCreate(m);}  }
class C{  public final void removeAllAttributes(){  attributes.clear();  attributeImpls.clear();}  }
class C{  public void testDivideToIntegralValueMathContextDOWN(){  String a="3736186567876876578956958769675785435673453453653543654354365435675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=70;  int precision=75;  RoundingMode rm=RoundingMode.DOWN;  MathContext mc=new MathContext(precision,rm);  String c="2.7792318551469036747477068339450205874992634417590178670822889E+62";  int resScale=-1;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divideToIntegralValue(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public long numberOfKeySchemaChanges(){  return keySchemas.size();}  }
class C{  public AbstractMRMessage encodeForHardware(CanMessage m){  log.debug("Encoding for hardware");  Message ret=new Message(m);  if (log.isDebugEnabled()) {    log.debug("encoded as " + ret);  }  return ret;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean isNeedSaved(){  return false;}  }
class C{  public static byte[] calculateDigest(DigestCalculator dc,InputStream data) throws IOException {  IOUtils.copy(data,dc.getOutputStream());  dc.getOutputStream().close();  return dc.getDigest();}  }
class C{  public void writeTo(DexFile file,AnnotatedOutput out){  finishProcessingIfNecessary();  if (out.annotates()) {    annotateEntries("  ",null,out);  }  int tableSize=table.size();  for (int i=0; i < tableSize; i++) {    CatchTable.Entry one=table.get(i);    int start=one.getStart();    int end=one.getEnd();    int insnCount=end - start;    if (insnCount >= 65536) {      throw new UnsupportedOperationException("bogus exception range: " + Hex.u4(start) + ".."+ Hex.u4(end));    }    out.writeInt(start);    out.writeShort(insnCount);    out.writeShort(handlerOffsets.get(one.getHandlers()));  }  out.write(encodedHandlers);}  }
class C{  public boolean isNewFlag(){  return newFlag;}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public static boolean isMonitorNotify(Instruction ins,ConstantPoolGen cpg){  if (!(ins instanceof InvokeInstruction)) {    return false;  }  if (ins.getOpcode() == Constants.INVOKESTATIC) {    return false;  }  InvokeInstruction inv=(InvokeInstruction)ins;  String methodName=inv.getMethodName(cpg);  String methodSig=inv.getSignature(cpg);  return isMonitorNotify(methodName,methodSig);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ScriptElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == Statement.class) {switch (derivedFeatureID) {default :    return -1;}}if (baseClass == IterationStatement.class) {switch (derivedFeatureID) {case N4JSPackage.FOR_STATEMENT__STATEMENT:  return N4JSPackage.ITERATION_STATEMENT__STATEMENT;case N4JSPackage.FOR_STATEMENT__EXPRESSION:return N4JSPackage.ITERATION_STATEMENT__EXPRESSION;default :return -1;}}if (baseClass == VariableEnvironmentElement.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  private void parse() throws SAXException {  XStream xstream=(XStream)properties.get(CONFIGURED_XSTREAM_PROPERTY);  if (xstream == null) {    xstream=new XStream();  }  final List<?> source=(List<?>)properties.get(SOURCE_OBJECT_LIST_PROPERTY);  if (source == null || source.isEmpty()) {    throw new SAXException("Missing or empty source object list. Setting property \"" + SOURCE_OBJECT_LIST_PROPERTY + "\" is mandatory");  }  try {    startDocument(true);    for (    final Object name : source) {      xstream.marshal(name,this);    }    endDocument(true);  } catch (  final StreamException e) {    if (e.getCause() instanceof SAXException) {      throw (SAXException)e.getCause();    } else {      throw new SAXException(e);    }  }}  }
class C{  public boolean isOptInFullRBF(){  for (  TransactionInput input : getInputs())   if (input.isOptInFullRBF())   return true;  return false;}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public QuickAdapter(int layoutResId,List<T> data){  this(layoutResId,data,ISelectable.SELECT_MODE_SINGLE);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public TramiteDatos(){}  }
class C{  public static <T>List<T> parseJsonToList(Context context,String jsonName){  String json=getTextFromAssets(context,jsonName);  return JsonUtils.jsonToList(json);}  }
class C{  public final byte[] update(byte[] input){  if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {    throw new IllegalStateException();  }  if (input == null) {    throw new IllegalArgumentException("input == null");  }  if (input.length == 0) {    return null;  }  return spiImpl.engineUpdate(input,0,input.length);}  }
class C{  private List<String> buildCommandLine(){  List<String> commandLine=new ArrayList<String>();  commandLine.add(executable);  commandLine.addAll(jvmArguments);  commandLine.addAll(systemProperties);  if (classpath != null && jarPath == null) {    commandLine.add("-classpath");    commandLine.add(classpath);  }  if (jarPath != null) {    commandLine.add("-jar");    commandLine.add(jarPath);  }  if (jarPath == null) {    commandLine.add(mainClass);  }  commandLine.addAll(applicationArguments);  return commandLine;}  }
class C{  private Filters(){}  }
class C{  public void pleaseStop(){  for (  MarkovChain chain : chains) {    chain.pleaseStop();  }}  }
class C{  public AssociationServiceImpl(final GenericDAO<Association,Long> genericDao){  super(genericDao);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void migrateAppPrefs(){  SharedPreferences def=Prefs.get(this);  Editor editDef=def.edit();  SharedPreferences app=Prefs.get(this,APP);  Editor editApp=app.edit();  if (def.contains(ACCOUNT_INITIALISED)) {    editApp.putBoolean(ACCOUNT_INITIALISED,def.getBoolean(ACCOUNT_INITIALISED,false));    editDef.remove(ACCOUNT_INITIALISED);  }  if (def.contains(ACCOUNT_NAME)) {    editApp.putString(ACCOUNT_NAME,def.getString(ACCOUNT_NAME,null));    editDef.remove(ACCOUNT_NAME);  }  if (def.contains(CLOUD_ID)) {    editApp.putString(CLOUD_ID,def.getString(CLOUD_ID,null));    editDef.remove(CLOUD_ID);  }  if (def.contains(INSTALL_ID)) {    editApp.putLong(INSTALL_ID,def.getLong(INSTALL_ID,0L));    editDef.remove(INSTALL_ID);  }  if (def.contains(LAST_SYNC)) {    editApp.putLong(LAST_SYNC,def.getLong(LAST_SYNC,0L));    editDef.remove(LAST_SYNC);  }  if (def.contains(NAVIGATION_DRAWER_OPENED)) {    editApp.putBoolean(NAVIGATION_DRAWER_OPENED,def.getBoolean(NAVIGATION_DRAWER_OPENED,false));    editDef.remove(NAVIGATION_DRAWER_OPENED);  }  if (def.contains(ONBOARDED)) {    editApp.putBoolean(ONBOARDED,def.getBoolean(ONBOARDED,false));    editDef.remove(ONBOARDED);  }  editDef.apply();  editApp.apply();}  }
class C{  private void yypushback(int number){  if (number > yylength())   yy_ScanError(YY_PUSHBACK_2BIG);  yy_markedPos-=number;}  }
class C{  public void putDocument(final SolrInputDocument queueEntry){  try {    this.fulltext().putDocument(queueEntry);  } catch (  final IOException e) {    ConcurrentLog.logException(e);  }}  }
class C{  protected WebView createLinuxWebView(Dimension frameSize){  return this.createUnknownOSWebView(frameSize);}  }
class C{  public BasicConstraints(byte[] encoding) throws IOException {  super(encoding);  Object[] values=(Object[])ASN1.decode(encoding);  ca=(Boolean)values[0];  if (values[1] != null) {    pathLenConstraint=new BigInteger((byte[])values[1]).intValue();  }}  }
class C{  public void configure(){  NceTrafficController tc=new NceTrafficController();  this.getSystemConnectionMemo().setNceTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  if (getOptionState(option1Name).equals(getOptionChoices(option1Name)[0])) {    this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_2006);    this.getSystemConnectionMemo().setNceCmdGroups(~NceTrafficController.CMDS_USB);  } else {    this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_2004);    this.getSystemConnectionMemo().setNceCmdGroups(~NceTrafficController.CMDS_USB);  }  tc.connectPort(this);  this.getSystemConnectionMemo().configureManagers();  jmri.jmrix.nce.ActiveFlag.setActive();}  }
class C{  public FloatBuffer makeRectangle(float x,float y,float width,float height){  if (width < 0) {    String message=Logging.getMessage("Geom.WidthIsNegative");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (height < 0) {    String message=Logging.getMessage("Geom.HeightIsNegative");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  FloatBuffer buffer=Buffers.newDirectFloatBuffer(8);  buffer.put(x);  buffer.put(y);  buffer.put(x + width);  buffer.put(y);  buffer.put(x + width);  buffer.put(y + height);  buffer.put(x);  buffer.put(y + height);  buffer.rewind();  return buffer;}  }
class C{  public void buildReport(String organizationId,VOReportResult result) throws XPathExpressionException, ParserConfigurationException {  result.setServerTimeZone(DateConverter.getCurrentTimeZoneAsUTCString());  List<ReportResultData> reportData=subscriptionDao.retrieveSupplierProductReportData(organizationId);  ReportDataConverter converter=new ReportDataConverter(subscriptionDao);  converter.convertToXml(reportData,result.getData(),Collections.<String,String>emptyMap());}  }
class C{  public void addListener(final IViewEdgeListener listener){  m_listeners.addListener(listener);}  }
class C{  @Override public synchronized void println(boolean x){  print(x);  println();}  }
class C{  @RequestMapping(value="/stub/admin/users/{userid}",method=RequestMethod.PUT) public ResponseEntity<?> updateUser(@RequestBody UserData userData,@PathVariable(value="userid") Long userid) throws UserServiceException, UserServiceMailingException {  fr.gael.dhus.service.UserService userService=ApplicationContextProvider.getBean(fr.gael.dhus.service.UserService.class);  User user=new User();  user.setId(userid);  user.setUsername(userData.getUsername());  user.setFirstname(userData.getFirstname());  user.setLastname(userData.getLastname());  user.setAddress(userData.getAddress());  user.setEmail(userData.getEmail());  user.setPhone(userData.getPhone());  List<Role> roles=new ArrayList<Role>();  for (  RoleData role : userData.getRoles()) {    roles.add(Role.valueOf(role.name()));  }  user.setRoles(roles);  user.setCountry(userService.getCountry(Long.parseLong(userData.getCountry())).getName());  user.setUsage(userData.getUsage());  user.setSubUsage(userData.getSubUsage());  user.setDomain(userData.getDomain());  user.setSubDomain(userData.getSubDomain());  if (userData.getLockedReason() != null) {    LockedAccessRestriction lock=new LockedAccessRestriction();    if (!userData.getLockedReason().trim().isEmpty()) {      lock.setBlockingReason(userData.getLockedReason());    }    user.addRestriction(lock);  }  try {    userService.updateUser(user);  } catch (  EmailNotSentException e) {    e.printStackTrace();    return new ResponseEntity<>("{\"code\":\"email_not_sent\"}",HttpStatus.INTERNAL_SERVER_ERROR);  }catch (  AccessDeniedException e) {    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  Exception e) {    e.printStackTrace();    throw new UserServiceException(e.getMessage());  }  return new ResponseEntity<>("{\"code\":\"OK\"}",HttpStatus.OK);}  }
class C{  @Override public void info(PrintStream stream){  if (isHeader(this.myHeader)) {    stream.println("  Image");  } else {    stream.println("  Image (bad header)");  }  stream.println("      Header Information:");  stream.println("         BITPIX=" + this.myHeader.getIntValue(BITPIX,-1));  int naxis=this.myHeader.getIntValue(NAXIS,-1);  stream.println("         NAXIS=" + naxis);  for (int i=1; i <= naxis; i+=1) {    stream.println("         NAXIS" + i + "="+ this.myHeader.getIntValue(NAXISn.n(i),-1));  }  stream.println("      Data information:");  try {    if (this.myData.getData() == null) {      stream.println("        No Data");    } else {      stream.println("         " + ArrayFuncs.arrayDescription(this.myData.getData()));    }  } catch (  Exception e) {    LOG.log(Level.SEVERE,"Unable to get image data",e);    stream.println("      Unable to get data");  }}  }
class C{  public void remove(Component c){  if (popupMenu != null)   popupMenu.remove(c);}  }
class C{  public void refreshMappedByField(String lazyLoadedFieldName,DataObject obj){  DataObjectType doType=TypeMap.getDoType(obj.getClass());  ColumnField lazyLoadedField=doType.getColumnField(lazyLoadedFieldName);  if (lazyLoadedField == null) {    throw new IllegalStateException(String.format("lazy loaded field %s in class %s not found; make sure the argument passed into refreshMappedByField matches the @Name annotation on the getter method",lazyLoadedFieldName,obj.getClass()));  }  Method lazyLoadedFieldReadMethod=lazyLoadedField.getPropertyDescriptor().getReadMethod();  if (lazyLoadedFieldReadMethod == null) {    throw new IllegalStateException(String.format("lazy loaded field %s in class %s must have a read method",lazyLoadedFieldName,obj.getClass()));  }  Class lazyLoadedObjType=doType.getColumnField(lazyLoadedFieldName).getPropertyDescriptor().getPropertyType();  if (!Set.class.isAssignableFrom(lazyLoadedObjType) && !List.class.isAssignableFrom(lazyLoadedObjType) && !DataObject.class.isAssignableFrom(lazyLoadedObjType)) {    throw new IllegalStateException(String.format("lazy loaded field %s in class %s is an unsupported type: %s; " + "supported type are DataObject, List and Set",lazyLoadedFieldName,obj.getClass(),lazyLoadedObjType.getName()));  }  ColumnField mappedByField=null;  if (doType != null) {    String mappedByFieldName=doType.getColumnField(lazyLoadedFieldName).getMappedByField();    mappedByField=doType.getColumnField(mappedByFieldName);    if (mappedByField == null) {      return;    }  }  Method mappedByFieldReadMethod=mappedByField.getPropertyDescriptor().getReadMethod();  Method mappedByFieldWriteMethod=mappedByField.getPropertyDescriptor().getWriteMethod();  if (mappedByFieldReadMethod == null || mappedByFieldWriteMethod == null) {    throw new IllegalStateException(String.format("mapped by field %s mapped to lazy loaded field %s in class %s must have both a read method and a write method",mappedByField.getName(),lazyLoadedFieldName,obj.getClass()));  }  if (Collection.class.isAssignableFrom(lazyLoadedObjType)) {    Class mappedByObjType=mappedByField.getPropertyDescriptor().getReadMethod().getReturnType();    if (!StringSet.class.isAssignableFrom(mappedByObjType)) {      throw new IllegalStateException(String.format("lazy loaded field %s in class %s has mapped by field %s with an unsupported type: %s;" + " the mappedby field for a collection must be a StringSet",lazyLoadedFieldName,obj.getClass(),mappedByField.getName(),lazyLoadedObjType.getName()));    }    refreshMappedByStringSet(obj,lazyLoadedFieldReadMethod,mappedByFieldReadMethod,mappedByFieldWriteMethod,mappedByObjType);  } else   if (DataObject.class.isAssignableFrom(lazyLoadedObjType)) {    Class mappedByObjType=mappedByFieldReadMethod.getReturnType();    if (!URI.class.isAssignableFrom(mappedByObjType)) {      throw new IllegalStateException(String.format("lazy loaded field %s in class %s has mapped by field %s with an unsupported type: %s;" + " the mapped by field for a DataObject must be a URI",lazyLoadedFieldName,obj.getClass(),mappedByField.getName(),mappedByObjType.getName()));    }    refreshMappedByDataObject(obj,lazyLoadedFieldReadMethod,mappedByFieldWriteMethod);  }}  }
class C{  public static void traverse(TreeModel model,Object parent,TreeNodeAction action){  int count=model.getChildCount(parent);  for (int i=0; i < count; i++) {    Object child=model.getChild(parent,i);    if (child instanceof SimpleTreeNode) {      action.run((SimpleTreeNode)child);    }    traverse(model,child,action);  }}  }
class C{  public DirectColorModel(int bits,int rmask,int gmask,int bmask,int amask){  super(ColorSpace.getInstance(ColorSpace.CS_sRGB),bits,rmask,gmask,bmask,amask,false,amask == 0 ? Transparency.OPAQUE : Transparency.TRANSLUCENT,ColorModel.getDefaultTransferType(bits));  setFields();}  }
class C{  public static boolean isSQL99ReservedKeyword(String identifier){  if (identifier == null) {    throw new NullPointerException("The identifier cannot be null");  }  return Arrays.binarySearch(SQL99_RESERVED,identifier.toUpperCase()) >= 0;}  }
class C{  public static boolean isGetterMethod(PsiMethod method){  if (isTypeOfVoid(method.getReturnType())) {    return false;  }  final PsiParameterList parameterList=method.getParameterList();  if (parameterList.getParametersCount() != 0) {    return false;  }  return true;}  }
class C{  @Override public void clear(){  full=false;  start=0;  end=0;  Arrays.fill(elements,null);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.cos(z * multiplier));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testMac10() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] b={(byte)0,(byte)0,(byte)0,(byte)0,(byte)0};  byte[] byteA=new byte[b.length];  SecretKeySpec sks=new SecretKeySpec(b,"SHA1");  for (int i=0; i < macs.length; i++) {    macs[i].init(sks);    try {      macs[i].doFinal(null,10);      fail("ShortBufferException must be thrown");    } catch (    ShortBufferException e) {    }    try {      macs[i].doFinal(byteA,-4);      fail("ShortBufferException must be thrown");    } catch (    ShortBufferException e) {    }    try {      macs[i].doFinal(byteA,10);      fail("ShortBufferException must be thrown");    } catch (    ShortBufferException e) {    }    try {      macs[i].doFinal(new byte[1],0);      fail("ShortBufferException must be thrown");    } catch (    ShortBufferException e) {    }    byte[] res=macs[i].doFinal();    try {      macs[i].doFinal(new byte[res.length - 1],0);      fail("ShortBufferException must be thrown");    } catch (    ShortBufferException e) {    }  }}  }
class C{  public void testBug64805() throws Exception {  try {    this.stmt.setQueryTimeout(5);    this.rs=this.stmt.executeQuery("select sleep(5)");  } catch (  NullPointerException e) {    e.printStackTrace();    fail();  }catch (  Exception e) {    if (e instanceof MySQLTimeoutException) {    } else {      throw e;    }  }}  }
class C{  @LogMessageDocs({@LogMessageDoc(level="INFO",message="Loading modules from file {file name}",explanation="The controller is initializing its module " + "configuration from the specified properties file"),@LogMessageDoc(level="INFO",message="Loading default modules",explanation="The controller is initializing its module " + "configuration to the default configuration"),@LogMessageDoc(level="ERROR",message="Could not load module configuration file",explanation="The controller failed to read the " + "module configuration file",recommendation="Verify that the module configuration is " + "present. " + LogMessageDoc.CHECK_CONTROLLER),@LogMessageDoc(level="ERROR",message="Could not load default modules",explanation="The controller failed to read the default " + "module configuration",recommendation=LogMessageDoc.CHECK_CONTROLLER)}) public IFloodlightModuleContext loadModulesFromConfig(String fName) throws FloodlightModuleException {  Properties prop=new Properties();  Collection<String> configMods;  File f=new File(fName);  if (f.isFile()) {    logger.info("Loading modules from file {}",f.getPath());    configMods=loadProperties(null,f,prop);  } else {    logger.info("Loading default modules");    InputStream is=this.getClass().getClassLoader().getResourceAsStream(COMPILED_CONF_FILE);    configMods=loadProperties(is,null,prop);  }  return loadModulesFromList(configMods,prop);}  }
class C{  private Node select(Node x,int k){  if (x == null)   return null;  int t=size(x.left);  if (t > k)   return select(x.left,k); else   if (t < k)   return select(x.right,k - t - 1); else   return x;}  }
class C{  public String toString(){  String result;  result=super.toString();  result=result.substring(0,result.length() - 1);  result+=",query=" + getQuery() + ",maxrows="+ getMaxRows()+ ",failed="+ failed()+ ",exception="+ getException()+ "]";  return result;}  }
class C{  public void testAddAll5(){  Integer[] empty=new Integer[0];  Integer[] ints=new Integer[SIZE];  for (int i=0; i < SIZE; ++i)   ints[i]=new Integer(i);  LinkedBlockingDeque q=new LinkedBlockingDeque(SIZE);  assertFalse(q.addAll(Arrays.asList(empty)));  assertTrue(q.addAll(Arrays.asList(ints)));  for (int i=0; i < SIZE; ++i)   assertEquals(ints[i],q.poll());}  }
class C{  protected void layoutLegend(){  if (getPlotArea() == null) {    return;  }  Container legendContainer=getLegendContainer();  Rectangle2D plotBounds=getPlotArea().getBounds();  legendContainer.setBounds(plotBounds);}  }
class C{  private void normalizeDate(){  while (day <= 0) {    int days=TimeUtils.yearLength(month > 2 ? year : year - 1);    day+=days;    --year;  }  if (month <= 0) {    int years=month / 12 - 1;    year+=years;    month-=12 * years;  } else   if (month > 12) {    int years=(month - 1) / 12;    year+=years;    month-=12 * years;  }  while (true) {    if (month == 1) {      int yearLength=TimeUtils.yearLength(year);      if (day > yearLength) {        ++year;        day-=yearLength;      }    }    int monthLength=TimeUtils.monthLength(year,month);    if (day <= monthLength) {      break;    }    day-=monthLength;    if (++month > 12) {      month-=12;      ++year;    }  }}  }
class C{  public boolean isLeapYear(){  return IsoChronology.INSTANCE.isLeapYear(year);}  }
class C{  private void receiveIsAlive() throws IOException {  Logger.debug(getClass().getName(),"an ISALIVE arrived");  oos.writeObject(name);}  }
class C{  public void resolve(Chain chain){  Assert.check(!alive || chain == null || state.stacksize == chain.state.stacksize && state.nlocks == chain.state.nlocks);  pendingJumps=mergeChains(chain,pendingJumps);}  }
class C{  public GeoHashGridBuilder field(String field){  this.field=field;  return this;}  }
class C{  public static ClassPath createClassPath(String classPathString,String sysClassPathString,String extDirsString){  Path path=new Path();  if (sysClassPathString == null) {    sysClassPathString=System.getProperty("sun.boot.class.path");  }  if (sysClassPathString != null) {    path.addFiles(sysClassPathString);  }  path.expandJarClassPaths(true);  if (extDirsString == null) {    extDirsString=System.getProperty("java.ext.dirs");  }  if (extDirsString != null) {    path.addDirectories(extDirsString);  }  path.emptyPathDefault(".");  if (classPathString == null) {    classPathString=System.getProperty("env.class.path");    if (classPathString == null) {      classPathString=".";    }  }  path.addFiles(classPathString);  return new ClassPath(path.toArray(new String[path.size()]));}  }
class C{  public AWTPermission(String name){  super(name);}  }
class C{  public static void populateDeviceLists(BluetoothAdapter bluetoothAdapter,List<String> deviceNames,List<String> deviceAddresses){  bluetoothAdapter.cancelDiscovery();  Set<BluetoothDevice> pairedDevices=bluetoothAdapter.getBondedDevices();  for (  BluetoothDevice device : pairedDevices) {    BluetoothClass bluetoothClass=device.getBluetoothClass();    if (bluetoothClass != null) {switch (bluetoothClass.getMajorDeviceClass()) {case BluetoothClass.Device.Major.COMPUTER:case BluetoothClass.Device.Major.PHONE:        break;default :      deviceAddresses.add(device.getAddress());    deviceNames.add(device.getName());}}}}  }
class C{  protected double reweightExamples(WeightedPerformanceMeasures wp,ExampleSet exampleSet) throws OperatorException {  boolean allowMarginalSkews=this.getParameterAsBoolean(PARAMETER_ALLOW_MARGINAL_SKEWS);  double remainingWeight=WeightedPerformanceMeasures.reweightExamples(exampleSet,wp.getContingencyMatrix(),allowMarginalSkews);  return remainingWeight;}  }
class C{  @Override public void run(){  while (true) {    try {      deliverTasks();    } catch (    InterruptedException e) {      LOG.info("Task pump thread was interrupted.");      return;    }  }}  }
class C{  public Navigator(){  initComponents();  setLayout(new BorderLayout());  beanTreeView=new BeanTreeView();  add(beanTreeView,BorderLayout.CENTER);  final GuiEditorModel model=(GuiEditorModel)CommandProcessor.getInstance().getObservable();  model.addObserver(this);  if (model.getCurrent() != null) {    try {      this.intNavigator(model.getCurrent());    } catch (    PropertyVetoException ex) {      Exceptions.printStackTrace(ex);    }  }}  }
class C{  public void waitForFirstExecution(){synchronized (this.firstRunnableSync) {    while (!this.firstRunnableCompleted) {      try {        this.firstRunnableSync.wait(1000);      } catch (      InterruptedException e) {      }      GemFireCacheImpl cache=GemFireCacheImpl.getInstance();      if (cache == null) {        return;      }      cache.getCancelCriterion().checkCancelInProgress(null);    }  }}  }
class C{  private boolean isChecked(int id){  return ((CheckBox)findViewById(id)).isChecked();}  }
class C{  public void discoverUnManagedObjects(AccessProfile accessProfile,DbClient dbClient,PartitionManager partitionManager) throws Exception {  this.partitionManager=partitionManager;  log.info("Started discovery of UnManagedVolumes for system {}",accessProfile.getSystemId());  ProtectionSystem protectionSystem=dbClient.queryObject(ProtectionSystem.class,accessProfile.getSystemId());  if (protectionSystem == null) {    log.error("Discovery is not run!  Protection System not found: " + accessProfile.getSystemId());    return;  }  RecoverPointClient rp=RPHelper.getRecoverPointClient(protectionSystem);  unManagedCGsInsert=new ArrayList<UnManagedProtectionSet>();  unManagedCGsUpdate=new ArrayList<UnManagedProtectionSet>();  unManagedVolumesToDelete=new ArrayList<UnManagedVolume>();  unManagedVolumesToUpdateByWwn=new HashMap<String,UnManagedVolume>();  unManagedCGsReturnedFromProvider=new HashSet<URI>();  Set<GetCGsResponse> cgs=rp.getAllCGs();  if (cgs == null) {    log.warn("No CGs were found on protection system: " + protectionSystem.getLabel());    return;  }  Map<String,String> rpWwnToNativeWwn=new HashMap<String,String>();  List<URI> storageSystemIds=dbClient.queryByType(StorageSystem.class,true);  List<String> storageNativeIdPrefixes=new ArrayList<String>();  if (storageSystemIds != null) {    Iterator<StorageSystem> storageSystemsItr=dbClient.queryIterativeObjects(StorageSystem.class,storageSystemIds);    while (storageSystemsItr.hasNext()) {      StorageSystem storageSystem=storageSystemsItr.next();      if (storageSystem.getSystemType().equalsIgnoreCase(Type.xtremio.name())) {        storageNativeIdPrefixes.add(storageSystem.getNativeGuid());      }    }  }  for (  GetCGsResponse cg : cgs) {    try {      log.info("Processing returned CG: " + cg.getCgName());      boolean newCG=false;      String nativeGuid=protectionSystem.getNativeGuid() + Constants.PLUS + cg.getCgId();      if (null != DiscoveryUtils.checkProtectionSetExistsInDB(dbClient,nativeGuid)) {        log.info("Protection Set " + nativeGuid + " already is managed by ViPR, skipping unmanaged discovery");        continue;      }      UnManagedProtectionSet unManagedProtectionSet=DiscoveryUtils.checkUnManagedProtectionSetExistsInDB(dbClient,nativeGuid);      if (null == unManagedProtectionSet) {        log.info("Creating new unmanaged protection set for CG: " + cg.getCgName());        unManagedProtectionSet=new UnManagedProtectionSet();        unManagedProtectionSet.setId(URIUtil.createId(UnManagedProtectionSet.class));        unManagedProtectionSet.setNativeGuid(nativeGuid);        unManagedProtectionSet.setProtectionSystemUri(protectionSystem.getId());        StringSet protectionId=new StringSet();        protectionId.add("" + cg.getCgId());        unManagedProtectionSet.putCGInfo(SupportedCGInformation.PROTECTION_ID.toString(),protectionId);        unManagedProtectionSet.getCGCharacteristics().put(UnManagedProtectionSet.SupportedCGCharacteristics.IS_MP.name(),Boolean.FALSE.toString());        newCG=true;      } else {        log.info("Found existing unmanaged protection set for CG: " + cg.getCgName() + ", using "+ unManagedProtectionSet.getId().toString());      }      unManagedCGsReturnedFromProvider.add(unManagedProtectionSet.getId());      unManagedProtectionSet.setCgName(cg.getCgName());      unManagedProtectionSet.setLabel(cg.getCgName());      unManagedProtectionSet.getCGCharacteristics().put(UnManagedProtectionSet.SupportedCGCharacteristics.IS_HEALTHY.name(),cg.getCgState().equals(GetCGStateResponse.HEALTHY) ? Boolean.TRUE.toString() : Boolean.FALSE.toString());      unManagedProtectionSet.getCGCharacteristics().put(UnManagedProtectionSet.SupportedCGCharacteristics.IS_SYNC.name(),cg.getCgPolicy().synchronous ? Boolean.TRUE.toString() : Boolean.FALSE.toString());      StringSet rpoType=new StringSet();      rpoType.add(cg.getCgPolicy().rpoType);      unManagedProtectionSet.putCGInfo(SupportedCGInformation.RPO_TYPE.toString(),rpoType);      StringSet rpoValue=new StringSet();      rpoValue.add(cg.getCgPolicy().rpoValue.toString());      unManagedProtectionSet.putCGInfo(SupportedCGInformation.RPO_VALUE.toString(),rpoValue);      if (null == cg.getCopies()) {        log.info("Protection Set " + nativeGuid + " does not contain any copies.  Skipping...");        continue;      }      if (null == cg.getRsets()) {        log.info("Protection Set " + nativeGuid + " does not contain any replication sets.  Skipping...");        continue;      }      if (!newCG) {        cleanUpUnManagedResources(unManagedProtectionSet,unManagedVolumesToUpdateByWwn,dbClient);      }      Map<String,String> rpCopyAccessStateMap=new HashMap<String,String>();      mapCgJournals(unManagedProtectionSet,cg,rpCopyAccessStateMap,rpWwnToNativeWwn,storageNativeIdPrefixes,dbClient);      mapCgSourceAndTargets(unManagedProtectionSet,cg,rpCopyAccessStateMap,rpWwnToNativeWwn,storageNativeIdPrefixes,dbClient);      if (newCG) {        unManagedCGsInsert.add(unManagedProtectionSet);      } else {        unManagedCGsUpdate.add(unManagedProtectionSet);      }    } catch (    Exception ex) {      log.error("Error processing RP CG {}",cg.getCgName(),ex);    }  }  handlePersistence(dbClient,false);  cleanUp(protectionSystem,dbClient);}  }
class C{  private void updateDistribution(){  if (isDuplicate()) {    return;  }  final String name=HawkbitCommonUtil.trimAndNullIfEmpty(distNameTextField.getValue());  final String version=HawkbitCommonUtil.trimAndNullIfEmpty(distVersionTextField.getValue());  final String distSetTypeName=HawkbitCommonUtil.trimAndNullIfEmpty((String)distsetTypeNameComboBox.getValue());  final DistributionSet currentDS=distributionSetManagement.findDistributionSetByIdWithDetails(editDistId);  final String desc=HawkbitCommonUtil.trimAndNullIfEmpty(descTextArea.getValue());  final boolean isMigStepReq=reqMigStepCheckbox.getValue();  setDistributionValues(currentDS,name,version,distSetTypeName,desc,isMigStepReq);  distributionSetManagement.updateDistributionSet(currentDS);  notificationMessage.displaySuccess(i18n.get("message.new.dist.save.success",new Object[]{currentDS.getName(),currentDS.getVersion()}));  eventBus.publish(this,new DistributionTableEvent(BaseEntityEventType.UPDATED_ENTITY,currentDS));}  }
class C{  public static boolean connectionIsCompatible(Connection conn){  if (conn == null)   return false;  String className=conn.getClass().getSimpleName();  if (className.equals(C3P0_CONNECTION_CLASSNAME) || className.equals(BONECP_CONNECTION_CLASSNAME) || className.equals(DRIZZLE_CONNECTION_CLASSNAME)|| className.equals(TSR_CONNECTION_SIMPLE_CLASSNAME)|| conn.getClass().getName().startsWith(MYSQL_CONNECTION_CLASSNAME_PREFIX))   return true;  return false;}  }
class C{  private void makeTunnel(TunnelRequest tunnelRequest) throws IOException {  RawHeaders requestHeaders=tunnelRequest.getRequestHeaders();  while (true) {    out.write(requestHeaders.toBytes());    RawHeaders responseHeaders=RawHeaders.fromBytes(in);switch (responseHeaders.getResponseCode()) {case HTTP_OK:      return;case HTTP_PROXY_AUTH:    requestHeaders=new RawHeaders(requestHeaders);  URL url=new URL("https",tunnelRequest.host,tunnelRequest.port,"/");boolean credentialsFound=HttpAuthenticator.processAuthHeader(route.address.authenticator,HTTP_PROXY_AUTH,responseHeaders,requestHeaders,route.proxy,url);if (credentialsFound) {continue;} else {throw new IOException("Failed to authenticate with proxy");}default :throw new IOException("Unexpected response code for CONNECT: " + responseHeaders.getResponseCode());}}}  }
class C{  public static DataPersister lookupForField(Field field){  if (registeredPersisters != null) {    for (    DataPersister persister : registeredPersisters) {      if (persister.isValidForField(field)) {        return persister;      }      for (      Class<?> clazz : persister.getAssociatedClasses()) {        if (field.getType() == clazz) {          return persister;        }      }    }  }  DataPersister dataPersister=builtInMap.get(field.getType().getName());  if (dataPersister != null) {    return dataPersister;  }  if (field.getType().isEnum()) {    return DEFAULT_ENUM_PERSISTER;  } else {    return null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:02.906 -0500",hash_original_method="1D294A58F2AF56C9FF5AA47948D4FB5C",hash_generated_method="E9923B82A81C7844CF398360A889445F") public String encodeBody(){  StringBuffer s=new StringBuffer();  if (retryAfter != null)   s.append(retryAfter);  if (comment != null)   s.append(SP + LPAREN + comment+ RPAREN);  if (!parameters.isEmpty()) {    s.append(SEMICOLON + parameters.encode());  }  return s.toString();}  }
class C{  public void clearResults(){  for (  final SearchResult result : m_results) {    if (result.getObject() instanceof NaviNode) {      ((NaviNode)result.getObject()).setBackgroundColor(result.getLine(),result.getPosition(),result.getLength(),null);    } else     if (result.getObject() instanceof NaviEdge) {      final NaviEdge edge=(NaviEdge)result.getObject();      final ZyLabelContent content=edge.getLabelContent();      content.getLineContent(result.getLine()).setBackgroundColor(result.getPosition(),result.getLength(),null);    }  }  m_results.clear();  m_cursor.clear();  m_changed=false;}  }
class C{  @MainThread @ObjectiveCName("subscribeWithListener:") public synchronized void subscribe(@NotNull ModelChangedListener<GroupVM> listener){  if (listeners.contains(listener)) {    return;  }  listeners.add(listener);  listener.onChanged(this);}  }
class C{  @Inject public NotificationManagerViewImpl(PartStackUIResources partStackUIResources,Resources resources,NotificationManagerViewImplUiBinder uiBinder){  super(partStackUIResources);  setContentWidget(uiBinder.createAndBindUi(this));  minimizeButton.ensureDebugId("notification-minimizeBut");  scrollPanel.getElement().setTabIndex(0);}  }
class C{  public void doRefresh(){  if (DATA_MODEL == null) {    return;  }  DATA_MODEL.refresh();  if (TABLE != null) {    int[] selRows=TABLE.getSelectedRows();    if (selRows.length > 0) {      BTDownloadDataLine dataLine=DATA_MODEL.get(selRows[0]);      if (dataLine != null) {        BTDownload dl=dataLine.getInitializeObject();        if (dl != null) {          boolean completed=dl.isCompleted();          resumeAction.setEnabled(dl.isResumable());          pauseAction.setEnabled(dl.isPausable());          exploreAction.setEnabled(completed);          showInLibraryAction.setEnabled(completed);        }      }    }  }  int n=DATA_MODEL.getRowCount();  boolean anyClearable=false;  for (int i=n - 1; i >= 0; i--) {    BTDownloadDataLine btDownloadDataLine=DATA_MODEL.get(i);    if (btDownloadDataLine != null) {      BTDownload initializeObject=btDownloadDataLine.getInitializeObject();      if (initializeObject != null && isClearable(initializeObject)) {        anyClearable=true;        break;      }    }  }  clearInactiveAction.setEnabled(anyClearable);}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(Constant.messages.getString("variant.options.title"));  this.add(getPanelScanner(),getPanelScanner().getName());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.328 -0500",hash_original_method="ACD8C6EB71D9F6C325AF8CC21E8A00EF",hash_generated_method="A8D3FAD76122181118088323A43DA948") public void disableCurlLogging(){  curlConfiguration=null;}  }
class C{  public static DefaultMutableTreeNode leftShift(DefaultMutableTreeNode self,DefaultMutableTreeNode node){  self.add(node);  return self;}  }
class C{  public float bezierTangent(float a,float b,float c,float d,float t){  return (3 * t * t* (-a + 3 * b - 3 * c + d) + 6 * t * (a - 2 * b + c) + 3 * (-a + b));}  }
class C{  public static void removeSentencePreviousMeta(Relationship relationship,Vertex previousQuestionInput,Network network){  if (previousQuestionInput != null) {    Vertex previousQuestion=previousQuestionInput.getRelationship(Primitive.INPUT);    if (previousQuestion != null) {      Vertex meta=network.createMeta(relationship);      meta.removeRelationship(Primitive.PREVIOUS,previousQuestion);    }  }}  }
class C{  public LUBMVocabulary(){  super();}  }
class C{  public Hypervolume(Problem problem,double[] minimum,double[] maximum){  super(problem,new NondominatedPopulation(),minimum,maximum);}  }
class C{  private void decode64(ByteBuffer infile,LongArrayPointer a){  byte[] nbitplanes=new byte[N03];  byte[] tmagic=new byte[2];  infile.get(tmagic);  if (tmagic[0] != CODE_MAGIC[0] || tmagic[1] != CODE_MAGIC[1]) {    throw new RuntimeException("Compression error");  }  this.nx=infile.getInt();  this.ny=infile.getInt();  this.scale=infile.getInt();  long sumall=infile.getLong();  infile.get(nbitplanes);  dodecode64(infile,a,nbitplanes);  a.set(0,sumall);}  }
class C{  public static Context fromJAAS(final String name) throws Exception {  Context out=new Context();  out.name=name;  LoginContext lc=new LoginContext(name);  lc.login();  out.s=lc.getSubject();  return out;}  }
class C{  public DuplicateEventException(){  super("Event has no unique ID for the subscription.");}  }
class C{  public Builder curatorClient(CuratorFramework curatorClient,boolean closeCurator){  this.curatorClient=curatorClient;  this.closeCurator=closeCurator;  return this;}  }
class C{  public void selectionCleared(SelectionEvent evt){}  }
class C{  public long longValue(){  return duration;}  }
class C{  public NeighborLogic copy(){  NeighborLogic nb=new NeighborLogic();  return nb;}  }
class C{  public void add(final AbstractInsnNode insn){  ++size;  if (last == null) {    first=insn;    last=insn;  } else {    last.next=insn;    insn.prev=last;  }  last=insn;  cache=null;  insn.index=0;}  }
class C{  private <T>T withJedis(final Function<Jedis,T> callback){  Jedis jedis=jedisPool.getResource();  try {    T result=callback.apply(jedis);    jedisPool.returnResource(jedis);    return result;  } catch (  Exception e) {    jedisPool.returnBrokenResource(jedis);    throw e;  }}  }
class C{  public AnimatableAngleOrIdentValue(AnimationTarget target,float v,short unit){  super(target,v,unit);}  }
class C{  public boolean isGlobalOnly(){  return (Boolean)getStateHelper().eval(PropertyKeys.globalOnly,false);}  }
class C{  public static void cursorDoubleToContentValuesIfPresent(Cursor cursor,ContentValues values,String column){  final int index=cursor.getColumnIndex(column);  if (index != -1 && !cursor.isNull(index)) {    values.put(column,cursor.getDouble(index));  }}  }
class C{  protected String loadDocumentDetails(){  MDDOrder order=(MDDOrder)getPO();  setDateDoc(order.getDateOrdered());  return STATUS_Posted;}  }
class C{  private void next(long qAddr,long next){  mem.writeLong(qAddr + 19,next);}  }
class C{  public void addColumn(String name,Class type,Object defaultValue){  if (type.isEnum()) {    type=String.class;    defaultValue=((Enum)defaultValue).name();  }  Column col=ColumnFactory.getColumn(type,m_rows.getMaximumRow() + 1,defaultValue);  addColumn(name,col);}  }
class C{  String def(final String[] split,final boolean match){  if (split.length != 4) {    return "Default line has incorrect number of fields.";  }  final String ploidyString=split[2];  final Ploidy ploidy=getPloidy(ploidyString);  if (ploidy == null) {    return "Invalid ploidy value:" + ploidyString;  }  final String linearString=split[3];  final Boolean linear=linear(linearString);  if (linear == null) {    return "Invalid linear/circular value:" + linearString;  }  if (match) {    if (mPloidyDefault != null) {      return "Duplicate default definition.";    }    mLinearDefault=linear;    mPloidyDefault=ploidy;  }  return null;}  }
class C{  @Override protected int computeHorizontalScrollOffset(){  return mSelectedPosition;}  }
class C{  private void showErrorIconHax(Drawable icon){  if (icon == null)   return;  if (Build.VERSION.SDK_INT != Build.VERSION_CODES.JELLY_BEAN && Build.VERSION.SDK_INT != Build.VERSION_CODES.JELLY_BEAN_MR1)   return;  try {    Class<?> textview=Class.forName("android.widget.TextView");    Field tEditor=textview.getDeclaredField("mEditor");    tEditor.setAccessible(true);    Class<?> editor=Class.forName("android.widget.Editor");    Method privateShowError=editor.getDeclaredMethod("setErrorIcon",Drawable.class);    privateShowError.setAccessible(true);    privateShowError.invoke(tEditor.get(this),icon);  } catch (  Exception e) {  }}  }
class C{  protected Model typeModelToDocumentSearchResultModel(String indexName,Model typeModel){  return Model.builder().id(getDocumentSearchResultModelId(indexName,typeModel.getName())).properties(Property.builder().name("shards").required(true).model(SHARD_INFO).build(),Property.builder().name("hits").required(true).model(Model.builder().id("hits").properties(Property.builder().name("total").required(true).model(Primitive.INTEGER).build(),Property.builder().name("hits").required(true).model(getDocumentModel(typeModel)).isCollection(true).build()).build()).build()).build();}  }
class C{  public int selectFirstWeapon(){  if (entity.getWeaponList().size() == 0 || (entity.usesWeaponBays() && entity.getWeaponBayList().size() == 0)) {    return -1;  }  WeaponListModel weapList=(WeaponListModel)weaponList.getModel();  for (int i=0; i < weaponList.getModel().getSize(); i++) {    Mounted selectedWeap=weapList.getWeaponAt(i);    if (entity.isWeaponValidForPhase(selectedWeap)) {      weaponList.setSelectedIndex(i);      weaponList.ensureIndexIsVisible(i);      return entity.getEquipmentNum(selectedWeap);    }  }  weaponList.setSelectedIndex(-1);  return -1;}  }
class C{  public Object removeAttribute(String key){  return attributes.remove(key);}  }
class C{  public synchronized BookKeeperClientBuilder name(String name){  this.name=name;  return this;}  }
class C{  void draw(Graphics sc,DimensionalNode n,DrawingInfo info){  if (n == null)   return;  int ht=canvas.getHeight();  IMultiPoint tdp=(IMultiPoint)n.point;  double x=tdp.getCoordinate(1);  double y=ht - tdp.getCoordinate(2);  sc.setColor(Color.black);  if (n.dimension == 1) {    sc.drawLine((int)x,ht - info.minVertical,(int)x,ht - info.maxVertical);  } else {    sc.drawLine(info.minHorizontal,(int)y,info.maxHorizontal,(int)y);  }  canvas.drawElement(sc,tdp);  if (n.dimension == 1) {    sc.drawLine((int)x - 2,(int)y,(int)x + 1,(int)y);  } else {    sc.drawLine((int)x,(int)y - 2,(int)x,(int)y + 1);  }  draw(sc,n.getAbove(),info.above(n));  draw(sc,n.getBelow(),info.below(n));}  }
class C{  protected Pair<Class<? extends Page>,PageParameters> determineAddressPage(final boolean isCheckout,final long addressId,final String addressType){  final Class<? extends Page> successfulPage=(Class)wicketPagesMounter.getPageProviderByUri("/address").get();  final PageParameters parameters=new PageParameters();  parameters.add(WebParametersKeys.ADDRESS_FORM_RETURN_LABEL,isCheckout ? CreateEditAddressPage.RETURN_TO_CHECKOUT : CreateEditAddressPage.RETURN_TO_SELFCARE);  parameters.add(WebParametersKeys.ADDRESS_ID,String.valueOf(addressId));  parameters.add(WebParametersKeys.ADDRESS_TYPE,addressType);  return new Pair<Class<? extends Page>,PageParameters>(successfulPage,parameters);}  }
class C{  @Override public void close() throws IOException {  if (null != dictionaryThriftWriter) {    writeDictionaryFile();    closeThriftWriter();  }}  }
class C{  public LookupException(String message){  super(message);}  }
class C{  public JSheet(Dialog owner){  super(owner);  init();}  }
class C{  public int[] validBaudNumber(){  return new int[]{57600};}  }
class C{  void refreshUI(String xml,DOMTree m_tree){  if ((xml == null) || xml.equals("")) {    setErrorMessage("Error","No input XML  specified \n");    return;  }  final Document newRoot=getRoot(xml);  if (newRoot == null) {    setErrorMessage("Error","Unable to get new DOM Tree \n");    return;  }  m_tree.setDocument(newRoot);}  }
class C{  public MethodBinding original(){  return this.originalMethod.original();}  }
class C{  public GeoShapeMapper maxLevels(Integer maxLevels){  this.maxLevels=maxLevels;  return this;}  }
class C{  private void computeBlockGenAndKill(BasicBlock bblock,IR ir){  if (VERBOSE) {    System.out.println(" --> Computing Gen/Kill for block " + bblock);  }  boolean seenFirstPEI=false;  Instruction firstPEI=null;  if (bblock.canThrowExceptions()) {    for (Instruction inst=bblock.firstInstruction(); inst != bblock.lastInstruction(); inst=inst.nextInstructionInCodeOrder()) {      if (inst.isPEI() && bblock.getApplicableExceptionalOut(inst).hasMoreElements()) {        firstPEI=inst;        bbLiveInfo[bblock.getNumber()].setContainsPEIWithHandler(true);        break;      }    }  }  getUsesFromPhis(bblock);  for (Instruction inst=bblock.lastInstruction(); inst != bblock.firstInstruction(); inst=inst.prevInstructionInCodeOrder()) {    Enumeration<Operand> defs=inst.getPureDefs();    while (defs.hasMoreElements()) {      Operand def=defs.nextElement();      if (def instanceof RegisterOperand) {        RegisterOperand regOp=(RegisterOperand)def;        if (isSkippableReg(regOp,ir)) {          continue;        }        TypeReference regType=regOp.getType();        if (regOp.getRegister().spansBasicBlock() && regType != null) {          bbLiveInfo[bblock.getNumber()].BBKillSet().add(regOp);          bbLiveInfo[bblock.getNumber()].getGen().remove(regOp);          if (seenFirstPEI) {            bbLiveInfo[bblock.getNumber()].firstPEIKillSet().add(regOp);          }        }      }    }    if (inst.operator() != PHI) {      for (Enumeration<Operand> uses=inst.getUses(); uses.hasMoreElements(); ) {        Operand use=uses.nextElement();        if (use instanceof RegisterOperand) {          RegisterOperand regOp=(RegisterOperand)use;          if (isSkippableReg(regOp,ir)) {            continue;          }          TypeReference regType=regOp.getType();          if (regOp.getRegister().spansBasicBlock() && regType != null) {            bbLiveInfo[bblock.getNumber()].getGen().add(regOp);          }        }      }    }    if (firstPEI == inst) {      seenFirstPEI=true;    }  }  if (VERBOSE) {    System.out.println("  Gen: " + bbLiveInfo[bblock.getNumber()].getGen());    System.out.println("  Kill: " + bbLiveInfo[bblock.getNumber()].BBKillSet());    System.out.println("  1st PEI Kill: " + bbLiveInfo[bblock.getNumber()].firstPEIKillSet());    System.out.println(" ---> Done computing Gen/Kill for block");  }}  }
class C{  public static IPath computeQualifiedContainerPath(String containerId,Sdk sdk){  assert (containerId != null && containerId.length() > 0);  assert (sdk != null);  return new Path(containerId).append(sdk.getName());}  }
class C{  public int addTgtEntry(ConcreteRule<TK,FV> rule,boolean allowStraddle){  if (rule.abstractRule.target.size() == 0)   return 0;  List<Integer> matches=findTgtMatches(rule.abstractRule.target);  int rv=0;  for (  int startPos : matches) {    int targetLength=rule.abstractRule.target.size();    int sourceLength=rule.abstractRule.source.size();    if (targetLength > maxTargetLength)     maxTargetLength=targetLength;    if (sourceLength > maxSourceLength)     maxSourceLength=sourceLength;    if (!allowStraddle && startPos + targetLength > prefix.size())     continue;    int endPos=Math.min(prefix.size() - 1,startPos + targetLength - 1);    assert startPos <= endPos : String.format("Illegal span: [%d,%d]",startPos,endPos);    assert endPos < sequenceLength : String.format("End index out of bounds: [%d,%d] >= %d",startPos,endPos,sequenceLength);    int offset=getIndex(startPos,endPos);    if (grid[offset] == null)     grid[offset]=new ArrayList<>();    grid[offset].add(rule);    isSorted.clear(offset);    ++rv;    coverage.set(startPos,endPos + 1);  }  return rv;}  }
class C{  public void createDatabaseEntitiesForBusinessObjectFormatDdlCollectionTesting(){  List<SchemaColumn> schemaColumns=new ArrayList<>();  schemaColumns.add(new SchemaColumn(AbstractServiceTest.FIRST_PARTITION_COLUMN_NAME,"DATE",AbstractServiceTest.NO_COLUMN_SIZE,AbstractServiceTest.COLUMN_REQUIRED,AbstractServiceTest.NO_COLUMN_DEFAULT_VALUE,AbstractServiceTest.NO_COLUMN_DESCRIPTION));  schemaColumns.add(new SchemaColumn(AbstractServiceTest.COLUMN_NAME,"NUMBER",AbstractServiceTest.COLUMN_SIZE,AbstractServiceTest.NO_COLUMN_REQUIRED,AbstractServiceTest.COLUMN_DEFAULT_VALUE,AbstractServiceTest.COLUMN_DESCRIPTION));  List<SchemaColumn> partitionColumns=schemaColumns.subList(0,1);  businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,FileTypeEntity.TXT_FILE_TYPE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.FORMAT_DESCRIPTION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,AbstractServiceTest.FIRST_PARTITION_COLUMN_NAME,AbstractServiceTest.NO_PARTITION_KEY_GROUP,AbstractServiceTest.NO_ATTRIBUTES,AbstractServiceTest.SCHEMA_DELIMITER_PIPE,AbstractServiceTest.SCHEMA_ESCAPE_CHARACTER_BACKSLASH,AbstractServiceTest.SCHEMA_NULL_VALUE_BACKSLASH_N,schemaColumns,partitionColumns);}  }
class C{  public NewDisplayWorldAction(Workspace workspace){  super("TextWorld-Display",workspace);  putValue(SHORT_DESCRIPTION,"New Text World");  putValue(SMALL_ICON,ResourceManager.getImageIcon("Text.png"));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.SDEFINITION__TKEY:    setTkey((Expression)null);  return;case GamlPackage.SDEFINITION__ARGS:setArgs((ActionArguments)null);return;}super.eUnset(featureID);}  }
class C{  public static final String modifyPlaylist(Context context) throws JSONException, IllegalArgumentException {  JSONObject jsonParam=new JSONObject();  jsonParam.put("mutations",mPlaylistEntriesMutationsArray);  mHttpClient.setUserAgent(mMobileClientUserAgent);  String result=mHttpClient.post(context,"https://www.googleapis.com/sj/v1.1/plentriesbatch?alt=json&hl=en_US",new ByteArrayEntity(jsonParam.toString().getBytes()),"application/json");  mHttpClient.setUserAgent(mWebClientUserAgent);  mPlaylistEntriesMutationsArray=null;  mPlaylistEntriesMutationsArray=new JSONArray();  return result;}  }
class C{  public static boolean checkCompatibility(final String v1,final String v2){  final String ev1=cut(v1,2);  final String ev2=cut(v2,2);  final boolean res=ev1.equals(ev2);  return res;}  }
class C{  public void loadClass(Class<?> cls){  try {    classLoader.loadClass(cls.getName());  } catch (  ClassNotFoundException e) {    LogContext.debug("Class " + cls + " not found.");  }}  }
class C{  public Builder addPhoto(Photo photo){  photos.add(photo);  return this;}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  private Base64(){}  }
class C{  public void notifyTurnoutCreationError(String conflict,int bitNum){  javax.swing.JOptionPane.showMessageDialog(null,"ERROR - The output bit, " + bitNum + ", is currently assigned to "+ conflict+ ". Turnout can not be "+ "created as you specified.","C/MRI Assignment Conflict",javax.swing.JOptionPane.INFORMATION_MESSAGE,null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testReset(){  LongAccumulator ai=new LongAccumulator(null,0L);  ai.accumulate(2);  assertEquals(2,ai.get());  ai.reset();  assertEquals(0,ai.get());}  }
class C{  public static GssExtractor extract(IDocument document,int offset,int length,CSSModelLoader cssModelLoader){  try {    String cssBlock=document.get(offset,length);    return extract(cssBlock,cssModelLoader);  } catch (  BadLocationException e) {    return null;  }}  }
class C{  private BiosCommandResult rollbackCreatedFilesystem(StorageSystem system,URI uri,String opId,boolean isForceDelete){  FileDeviceInputOutput fileInputOutput=this.prepareFileDeviceInputOutput(isForceDelete,uri,opId);  return this.doDeleteFS(system,fileInputOutput);}  }
class C{  protected void fireUpdate(){  fireUpdate(null);}  }
class C{  public int estimateCellVSpan(int height){  int availHeight=height - (getPaddingTop() + getPaddingBottom());  int n=Math.max(1,(availHeight + mHeightGap) / (mCellHeight + mHeightGap));  return n;}  }
class C{  public static void main(String[] args) throws Exception {  int res=ToolRunner.run(NutchConfiguration.create(),new Fetcher(),args);  System.exit(res);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.863 -0500",hash_original_method="7FBFA5DF7A2D6014C9CA2F913F0914FC",hash_generated_method="F39600EBE8DF940850F3163642F0ABA9") public String toString(){  return toString(ntpTime);}  }
class C{  public HttpStatus deleteProject(String applicationName){  logger.info("GitlabService : deleteProject " + applicationName);  if (gitlabToken == null || gitlabToken.trim().length() == 0) {    logger.warn("Cannot use this feature because no token for GitLab");    return HttpStatus.NOT_IMPLEMENTED;  }  if (gitlabAPI == null || gitlabAPI.trim().length() == 0) {    logger.warn("Cannot use this feature because no URL given for GitLab API");    return HttpStatus.NOT_IMPLEMENTED;  }  try {    GitlabAPI api=GitlabAPI.connect(gitlabAPI,gitlabToken,TokenType.PRIVATE_TOKEN,AuthMethod.URL_PARAMETER);    List<GitlabProject> projects=api.getAllProjects();    for (    GitlabProject project : projects) {      if (project.getName().equals(applicationName)) {        api.deleteProject(project.getId());        return HttpStatus.OK;      }    }    return HttpStatus.NOT_FOUND;  } catch (  Exception e) {    logger.error(applicationName,e);    return HttpStatus.BAD_REQUEST;  }}  }
class C{  public EventStoreBuilder clientReconnectionDelay(Duration duration){  settingsBuilder.reconnectionDelay(duration);  return this;}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  return asByteSource(url).read();}  }
class C{  private void loadSpaghetti(){  try {    getController().loadWorkspaceContents(getAssets().open("sample_sections/workspace_spaghetti.xml"));  } catch (  IOException e) {    Toast.makeText(getApplicationContext(),R.string.toast_workspace_file_not_found,Toast.LENGTH_LONG).show();  }}  }
class C{  private void checkTokenized(){  if (tokens == null) {    if (chars == null) {      final List<String> split=tokenize(null,0,0);      tokens=split.toArray(new String[split.size()]);    } else {      final List<String> split=tokenize(chars,0,chars.length);      tokens=split.toArray(new String[split.size()]);    }  }}  }
class C{  private CopyTask createCopyTask(final HttpServerRequest request,final Buffer buffer){  JsonObject task=new JsonObject(buffer.toString());  JsonObject staticHeadersJson=task.getJsonObject("staticHeaders");  MultiMap staticHeaders=new CaseInsensitiveHeaders();  if (staticHeadersJson != null && staticHeadersJson.size() > 0) {    for (    Map.Entry<String,Object> entry : staticHeadersJson.getMap().entrySet()) {      staticHeaders.add(entry.getKey(),entry.getValue().toString());    }  }  return new CopyTask(task.getString("source"),task.getString("destination"),request.headers(),staticHeaders);}  }
class C{  private static List<COperandTree> clone(final List<COperandTree> operands){  final List<COperandTree> clonedOperands=new FilledList<COperandTree>();  for (  final COperandTree operand : operands) {    clonedOperands.add(operand.cloneTree());  }  return clonedOperands;}  }
class C{  private int measureWidth(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)mTextPaint.measureText(mText) + getPaddingLeft() + getPaddingRight();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public ModelChangeStructureDataType clone(){  ModelChangeStructureDataType result=new ModelChangeStructureDataType();  result.Affected=Affected;  result.AffectedType=AffectedType;  result.Verb=Verb;  return result;}  }
class C{  @SuppressWarnings("unchecked") public HTTPTunnelRequest(HttpServletRequest request){  for (  Map.Entry<String,String[]> mapEntry : ((Map<String,String[]>)request.getParameterMap()).entrySet()) {    String parameterName=mapEntry.getKey();    List<String> parameterValues=Arrays.asList(mapEntry.getValue());    parameterMap.put(parameterName,new ArrayList<String>(parameterValues));  }}  }
class C{  public boolean isConnectedOrConnecting(){  return (status == ConnectionStatus.CONNECTED) || (status == ConnectionStatus.CONNECTING);}  }
class C{  public boolean isInline(){  return true;}  }
class C{  private <T extends DataObject>int queryAndPrintRecords(List<URI> ids,Class<T> clazz,Map<String,String> criterias) throws Exception {  Iterator<T> objects;  int countLimit=0;  int countAll=0;  String input;  BufferedReader buf=new BufferedReader(new InputStreamReader(System.in));  boolean isPrint=true;  try {    objects=_dbClient.queryIterativeObjects(clazz,ids);    while (objects.hasNext()) {      T object=(T)objects.next();      isPrint=printBeanProperties(clazz,object,criterias);      if (isPrint) {        countLimit++;        countAll++;      }      if (!turnOnLimit || countLimit != listLimit) {        continue;      }      System.out.println(String.format("Read %s rows ",countAll));      do {        System.out.println("\nPress 'ENTER' to continue or 'q<ENTER>' to quit...");        input=buf.readLine();        if (input.isEmpty()) {          countLimit=0;          break;        }        if (input.equalsIgnoreCase(QUITCHAR)) {          return countAll;        }      } while (!input.isEmpty());    }  } catch (  DatabaseException ex) {    log.error("Error querying from db: " + ex);    System.err.println("Error querying from db: " + ex);    throw ex;  } finally {    buf.close();  }  return countAll;}  }
class C{  private JsonWriter close(JsonScope empty,JsonScope nonempty,String closeBracket) throws IOException {  JsonScope context=peek();  if (context != nonempty && context != empty) {    throw new IllegalStateException("Nesting problem: " + stack);  }  if (deferredName != null) {    throw new IllegalStateException("Dangling name: " + deferredName);  }  stack.remove(stack.size() - 1);  if (context == nonempty) {    newline();  }  out.write(closeBracket);  return this;}  }
class C{  public boolean shouldOverrideUrlLoading(WebView view,String url){  return false;}  }
class C{  private UrlPart nextExistingPart(UrlPart urlPart){  UrlPart nextPart=urlPart.getNextPart();  if (exists(nextPart)) {    return nextPart;  } else   if (nextPart == null) {    return null;  } else {    return nextExistingPart(nextPart);  }}  }
class C{  public static synchronized ResultSet executeQuery(String sqlStatement){  logger.trace(String.format("executeQuery( %s ) -->entry",sqlStatement));  ResultSet R=null;  final Statement S=getStatement();  if (S == null) {    logger.error("executeQuery() <--exit (error: Statement unavailable)");    return null;  }  try {    R=S.executeQuery(sqlStatement);    logger.trace("executeQuery() <--exit (normal): " + (null == R));    return R;  } catch (  Throwable t) {    surfaceThrowable(String.format("executeQuery( %s )",sqlStatement),t);    cleanup(S,R);  }  return null;}  }
class C{  public CipherTextIvMac(byte[] c,byte[] i,byte[] h){  cipherText=new byte[c.length];  System.arraycopy(c,0,cipherText,0,c.length);  iv=new byte[i.length];  System.arraycopy(i,0,iv,0,i.length);  mac=new byte[h.length];  System.arraycopy(h,0,mac,0,h.length);}  }
class C{  public Journal(final Properties properties){  this(properties,null);}  }
class C{  public String numAttributesTipText(){  return "The number of attributes the generated data will contain.";}  }
class C{  private final void sendChunkTo(ByteBuffer in,SocketChannel sc,ByteBuffer out) throws IOException {  int bytesSent=in.remaining();  if (in.isDirect()) {    flushBuffer(sc,out);    while (in.remaining() > 0) {      sc.write(in);    }  } else {    int OUT_MAX=out.remaining();    if (bytesSent <= OUT_MAX) {      out.put(in);    } else {      final byte[] bytes=in.array();      int off=in.arrayOffset() + in.position();      int len=bytesSent;      while (len > 0) {        int bytesThisTime=len;        if (bytesThisTime > OUT_MAX) {          bytesThisTime=OUT_MAX;        }        out.put(bytes,off,bytesThisTime);        off+=bytesThisTime;        len-=bytesThisTime;        flushBuffer(sc,out);        OUT_MAX=out.remaining();      }      in.position(in.limit());    }  }  this.size-=bytesSent;}  }
class C{  public static RealVariable newReal(double lowerBound,double upperBound){  return new RealVariable(lowerBound,upperBound);}  }
class C{  public ByteArrayInputStream(byte[] buf){}  }
class C{  @Override public boolean isPostOperation(){  return false;}  }
class C{  public String toRFC2253String(){  return toRFC2253String(Collections.<String,String>emptyMap());}  }
class C{  public static DecomposableMatchBuilder0<Character> caseChar(char c){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(eq(c));  return new DecomposableMatchBuilder0<>(matchers,new PrimitiveFieldExtractor<>(Character.class));}  }
class C{  public void writeExternal(ObjectOutput out) throws IOException {  out.writeFloat(x);  out.writeFloat(y);}  }
class C{  public MediaFile(MediaFile clone){  this.path=new String(clone.path);  this.filename=new String(clone.filename);  this.filesize=clone.filesize;  this.filedate=clone.filedate;  this.videoCodec=new String(clone.videoCodec);  this.containerFormat=new String(clone.containerFormat);  this.exactVideoFormat=new String(clone.exactVideoFormat);  this.video3DFormat=new String(clone.video3DFormat);  this.videoHeight=clone.videoHeight;  this.videoWidth=clone.videoWidth;  this.overallBitRate=clone.overallBitRate;  this.durationInSecs=clone.durationInSecs;  this.stacking=clone.stacking;  this.stackingMarker=clone.stackingMarker;  this.type=clone.type;  this.audioStreams.addAll(clone.audioStreams);  this.subtitles.addAll(clone.subtitles);}  }
class C{  public static String makeUrl(FileDescriptor fd,boolean attachment){  StringBuilder sb=new StringBuilder();  UserSessionSource sessionSource=AppBeans.get(UserSessionSource.NAME);  sb.append("dispatch/download?").append("s=").append(sessionSource.getUserSession().getId()).append("&").append("f=").append(fd.getId());  if (attachment)   sb.append("&a=true");  return sb.toString();}  }
class C{  public RegisterOperand makeTempAddress(){  return new RegisterOperand(getAddress(),TypeReference.Address);}  }
class C{  public void growShrink(int duration){  Motion wMotion=Motion.createSplineMotion(getWidth(),getPreferredW(),duration);  Motion hMotion=Motion.createSplineMotion(getHeight(),getPreferredH(),duration);  wMotion.start();  hMotion.start();  setPreferredSize(new Dimension(getWidth(),getHeight()));  getComponentForm().registerAnimated(new BGPainter(wMotion,hMotion));  getComponentForm().revalidate();}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public InputStream fetchCheckpointInfo(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating checkpoint info query");  InputStream iStream=null;  try {    Query query=new Query();    CheckpointQueryParams ckptParams=new CheckpointQueryParams();    query.getQueryRequestChoice().add(ckptParams);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(ckptParams,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for celerra system info",jaxbException.getCause());  }  return iStream;}  }
class C{  public static void createJar(File jar,List<File> files) throws IOException {  Manifest manifest=new Manifest();  manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,"1.0");  try (JarOutputStream target=new JarOutputStream(new FileOutputStream(jar),manifest)){    for (    File file : files) {      add(file,target);    }  } }  }
class C{  public long nextLong(long n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive");  long offset=0;  while (n >= Integer.MAX_VALUE) {    final int bits=next(2);    final long half=n >>> 1;    final long nextn=((bits & 2) == 0) ? half : n - half;    if ((bits & 1) == 0)     offset+=n - nextn;    n=nextn;  }  return offset + nextInt((int)n);}  }
class C{  private float map(float value,float low1,float high1,float low2,float high2){  return low2 + (value - low1) * (high2 - low2) / (high1 - low1);}  }
class C{  public BoyerMooreMatcher(String pattern){  this.pattern=pattern;  this.occurrence=new HashMap<>();  for (int i=0; i < pattern.length(); i++) {    occurrence.put(pattern.charAt(i),i);  }}  }
class C{  @Override public boolean isAuthorizationStale(String header){  return false;}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (outputDataSet == null) {    throw new NullPointerException();  }}  }
class C{  public boolean isOne(){  boolean result=true;  for (int i=0; i < mLength - 1 && result; i++) {    result=result && ((mPol[i] & 0xFFFFFFFFFFFFFFFFL) == 0xFFFFFFFFFFFFFFFFL);  }  if (result) {    result=result && ((mPol[mLength - 1] & mMaxmask[mBit - 1]) == mMaxmask[mBit - 1]);  }  return result;}  }
class C{  public final static String String(final byte[] bytes){  return new String(bytes,0,bytes.length,StandardCharsets.UTF_8);}  }
class C{  public static StreamMetadata fromJson(String json){  checkArgument(!isNullOrEmpty(json),"json");  return fromJson(toBytes(json));}  }
class C{  @Path("") @GET @ApiOperation(value="Gets All UserGroups") public List<UserGroup> readAll(){  return delegate.readAll(userContext);}  }
class C{  public List<CompoundCurve3D> parseResourceString(Context context,int resourceId){  InputStream rawResource=context.getResources().openRawResource(resourceId);  String l;  BufferedReader r=new BufferedReader(new InputStreamReader(rawResource));  StringBuilder s=new StringBuilder();  try {    while ((l=r.readLine()) != null) {      s.append(l + "\n");    }    rawResource.close();    r.close();  } catch (  IOException e) {  }  return parseString(s.toString());}  }
class C{  private void removeRHExtension(Config config,RHExtension rhe,RHExtension replacementRH,boolean deleteExtension) throws PageException {  ConfigImpl ci=((ConfigImpl)config);  Log logger=ci.getLog("deploy");  try {    BundleDefinition[] candidatesToRemove=OSGiUtil.toBundleDefinitions(rhe.getBundles());    if (replacementRH != null) {      Map<String,BundleDefinition> notRemove=toMap(OSGiUtil.toBundleDefinitions(replacementRH.getBundles()));      List<BundleDefinition> tmp=new ArrayList<OSGiUtil.BundleDefinition>();      String key;      for (int i=0; i < candidatesToRemove.length; i++) {        key=candidatesToRemove[i].getName() + "|" + candidatesToRemove[i].getVersionAsString();        if (notRemove.containsKey(key))         continue;        tmp.add(candidatesToRemove[i]);      }      candidatesToRemove=tmp.toArray(new BundleDefinition[tmp.size()]);    }    XMLConfigAdmin.cleanBundles(rhe,ci,candidatesToRemove);    removeFLDs(rhe.getFlds());    removeTLDs(rhe.getTlds());    removeTags(rhe.getTags());    removeFunctions(rhe.getFunctions());    removeEventGateways(rhe.getEventGateways());    removeContext(config,false,rhe.getContexts());    removeWebContexts(config,false,rhe.getWebContexts());    removeApplications(config,rhe.getWebContexts());    removePlugins(config,rhe.getWebContexts());    if (!ArrayUtil.isEmpty(rhe.getCacheHandlers())) {      Iterator<Map<String,String>> itl=rhe.getCacheHandlers().iterator();      Map<String,String> map;      while (itl.hasNext()) {        map=itl.next();        ClassDefinition cd=RHExtension.toClassDefinition(config,map);        String _id=map.get("id");        if (!StringUtil.isEmpty(_id) && cd.hasClass()) {          _removeCacheHandler(_id);        }        logger.info("extension","remove cache handler [" + cd + "] from extension ["+ rhe.getName()+ ":"+ rhe.getVersion()+ "]");      }    }    if (!ArrayUtil.isEmpty(rhe.getCaches())) {      Iterator<Map<String,String>> itl=rhe.getCaches().iterator();      Map<String,String> map;      while (itl.hasNext()) {        map=itl.next();        ClassDefinition cd=RHExtension.toClassDefinition(config,map);        if (cd.isBundle()) {          _removeCache(cd);        }        logger.info("extension","remove cache handler [" + cd + "] from extension ["+ rhe.getName()+ ":"+ rhe.getVersion()+ "]");      }    }    if (!ArrayUtil.isEmpty(rhe.getSearchs())) {      Iterator<Map<String,String>> itl=rhe.getSearchs().iterator();      Map<String,String> map;      while (itl.hasNext()) {        map=itl.next();        ClassDefinition cd=RHExtension.toClassDefinition(config,map);        if (cd.hasClass()) {          _removeSearchEngine();        }        logger.info("extension","remove search engine [" + cd + "] from extension ["+ rhe.getName()+ ":"+ rhe.getVersion()+ "]");      }    }    if (!ArrayUtil.isEmpty(rhe.getResources())) {      Iterator<Map<String,String>> itl=rhe.getResources().iterator();      Map<String,String> map;      while (itl.hasNext()) {        map=itl.next();        ClassDefinition cd=RHExtension.toClassDefinition(config,map);        String scheme=map.get("scheme");        if (cd.hasClass()) {          _removeResourceProvider(scheme);        }        logger.info("extension","remove resource [" + cd + "] from extension ["+ rhe.getName()+ ":"+ rhe.getVersion()+ "]");      }    }    if (!ArrayUtil.isEmpty(rhe.getAMFs())) {      Iterator<Map<String,String>> itl=rhe.getAMFs().iterator();      Map<String,String> map;      while (itl.hasNext()) {        map=itl.next();        ClassDefinition cd=RHExtension.toClassDefinition(config,map);        if (cd.hasClass()) {          _removeAMFEngine();        }        logger.info("extension","remove search engine [" + cd + "] from extension ["+ rhe.getName()+ ":"+ rhe.getVersion()+ "]");      }    }    if (!ArrayUtil.isEmpty(rhe.getOrms())) {      Iterator<Map<String,String>> itl=rhe.getOrms().iterator();      Map<String,String> map;      while (itl.hasNext()) {        map=itl.next();        ClassDefinition cd=RHExtension.toClassDefinition(config,map);        if (cd.hasClass()) {          _removeORMEngine();        }        logger.info("extension","remove orm engine [" + cd + "] from extension ["+ rhe.getName()+ ":"+ rhe.getVersion()+ "]");      }    }    if (!ArrayUtil.isEmpty(rhe.getMonitors())) {      Iterator<Map<String,String>> itl=rhe.getMonitors().iterator();      Map<String,String> map;      String name;      while (itl.hasNext()) {        map=itl.next();        _removeMonitor(map.get("type"),name=map.get("name"));        logger.info("extension","remove monitor [" + name + "] from extension ["+ rhe.getName()+ ":"+ rhe.getVersion()+ "]");      }    }    if (!ArrayUtil.isEmpty(rhe.getJdbcs())) {      Iterator<Map<String,String>> itl=rhe.getJdbcs().iterator();      Map<String,String> map;      while (itl.hasNext()) {        map=itl.next();        ClassDefinition cd=RHExtension.toClassDefinition(config,map);        if (cd.isBundle()) {          _removeJDBCDriver(cd);        }        logger.info("extension","remove JDBC Driver [" + cd + "] from extension ["+ rhe.getName()+ ":"+ rhe.getVersion()+ "]");      }    }    if (!ArrayUtil.isEmpty(rhe.getMappings())) {      Iterator<Map<String,String>> itl=rhe.getMappings().iterator();      Map<String,String> map;      String virtual;      while (itl.hasNext()) {        map=itl.next();        virtual=map.get("virtual");        _removeMapping(virtual);        logger.info("extension","remove Mapping [" + virtual + "]");      }    }    ZipInputStream zis=new ZipInputStream(IOUtil.toBufferedInputStream(rhe.getExtensionFile().getInputStream()));    String type=ci instanceof ConfigWeb ? "web" : "server";    try {      ZipEntry entry;      String path;      String fileName;      Resource tmp;      while ((entry=zis.getNextEntry()) != null) {        path=entry.getName();        fileName=fileName(entry);        if (!entry.isDirectory() && (startsWith(path,type,"archives") || startsWith(path,type,"mappings"))) {          String sub=subFolder(entry);          logger.log(Log.LEVEL_INFO,"extension","remove archive " + sub + " registered as a mapping");          tmp=SystemUtil.getTempFile(".lar",false);          IOUtil.copy(zis,tmp,false);          removeArchive(tmp);        }        zis.closeEntry();      }    }  finally {      IOUtil.closeEL(zis);    }    if (deleteExtension)     rhe.getExtensionFile().delete();  } catch (  Throwable t) {    try {      updateRHExtension(config,rhe.getExtensionFile(),true);    } catch (    Throwable t2) {      t2.printStackTrace();    }    throw Caster.toPageException(t);  }}  }
class C{  public synchronized Certificate[] engineGetCertificateChain(String alias){  token.ensureValid();  AliasInfo aliasInfo=aliasMap.get(alias);  if (aliasInfo == null || aliasInfo.type != ATTR_CLASS_PKEY) {    return null;  }  return aliasInfo.chain;}  }
class C{  public T onsubmit(String value){  return attr("onsubmit",value);}  }
class C{  public void actionPerformed(ActionEvent e){  File nextPage=null;  for (Iterator iter=testFiles.iterator(); iter.hasNext(); ) {    File f=(File)iter.next();    if (f.equals(currentDisplayed)) {      if (iter.hasNext()) {        nextPage=(File)iter.next();        break;      }    }  }  if (nextPage == null) {    Iterator iter=testFiles.iterator();    nextPage=(File)iter.next();  }  try {    switchPage(nextPage,false);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void removeHighlight(Object tag){  if (tag instanceof LayeredHighlightInfo) {    LayeredHighlightInfo lhi=(LayeredHighlightInfo)tag;    if (lhi.width > 0 && lhi.height > 0) {      component.repaint(lhi.x,lhi.y,lhi.width,lhi.height);    }  } else {    HighlightInfo info=(HighlightInfo)tag;    safeDamageRange(info.p0,info.p1);  }  highlights.removeElement(tag);}  }
class C{  protected final T delegate(){  return delegate;}  }
class C{  public static void bomb(String message,Exception e){  String testFailed="TEST FAILED: ";  if ((message == null) && (e == null)) {    testFailed+=" No relevant information";  } else   if (e == null) {    testFailed+=message;  }  System.err.println(testFailed);  if (e != null) {    System.err.println("Test failed with: " + e.getMessage());    e.printStackTrace(System.err);  }  throw new TestFailedException(testFailed,e);}  }
class C{  public static Instruction findInstruction(final BasicBlock block,final IInstruction searchInstruction){  Preconditions.checkNotNull(block,"IE02005: Block argument can not be null");  Preconditions.checkNotNull(searchInstruction,"IE02012: Instruction argument can not be null");  for (  final Instruction instruction : block.getInstructions()) {    if (instruction.getNative() == searchInstruction) {      return instruction;    }  }  throw new IllegalStateException("IE01272: Could not determine what instruction could not be translated");}  }
class C{  protected void initialize(Random random){  for (int i=0; i < m_Elements.length; i++) {    m_Elements[i]=random.nextDouble();  }}  }
class C{  public boolean allowsExpansion(){  return (expandable != null && expandable);}  }
class C{  private void sendInputStringToProcess(Process process){  if (inputString != null) {    try (PrintStream ps=new PrintStream(process.getOutputStream())){      ps.print(inputString);      ps.print('\n');    }   }}  }
class C{  public Map<Variable,Term> unify(List<? extends FOLNode> x,List<? extends FOLNode> y,Map<Variable,Term> theta){  if (theta == null) {    return null;  } else   if (x.size() != y.size()) {    return null;  } else   if (x.size() == 0 && y.size() == 0) {    return theta;  } else   if (x.size() == 1 && y.size() == 1) {    return unify(x.get(0),y.get(0),theta);  } else {    return unify(x.subList(1,x.size()),y.subList(1,y.size()),unify(x.get(0),y.get(0),theta));  }}  }
class C{  protected String relativePath(final HasStorablePath node){  String path=node.getStorablePath().replaceFirst(appContext.getCurrentProject().getRootProject().getPath(),"");  if (path.startsWith("/")) {    path=path.substring(1);  }  return path;}  }
class C{  public void printMemberReport(PrintWriter out,int member,Set<Integer> cluster) throws AdeException {  out.printf("%-15s:\n",memberStr(member));  final ListSortedByKey<Double,String> list=new ListSortedByKey<Double,String>();  list.setValueNaturalOrder();  for (  int i : cluster) {    double info;    info=mCoOccurrencesAndMiMatrix.get(member,i);    list.add(info,memberStr(i));  }  list.invertKeyOrdering();  out.printf("\t\tCluster relations:");  for (int i=0; i < list.size(); ++i) {    out.printf(" %f:%s",list.getKey(i),list.getValue(i));  }  out.println();  list.clear();  for (int i=0; i < mCoOccurrencesAndMiMatrix.getRowNum(); ++i) {    if (cluster.contains(i)) {      continue;    }    double info;    info=mCoOccurrencesAndMiMatrix.get(member,i);    list.add(info,memberStr(i));  }  out.printf("\t\tTop 5 out of cluster relations:");  for (int i=0; i < Math.min(5,list.size()); ++i) {    out.printf(" %f:%s",list.getKey(i),list.getValue(i));  }  out.println();}  }
class C{  private void initialize(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {  mOpsInstance=opsType.newInstance();  mRetainedFragmentManager.put(opsType.getSimpleName(),mOpsInstance);  mOpsInstance.onConfiguration(instance,true);}  }
class C{  public static String replaceStrByMap(Map<String,String> requestParameters,String sourceContent){  String contentAfterReplace=sourceContent;  for (  Entry<String,String> entry : requestParameters.entrySet()) {    String sourceContentHelperNew=contentAfterReplace;    String varName=entry.getKey();    String replacement=entry.getValue();    if (varName.contains(PcConstants.NODE_REQUEST_PREFIX_REPLACE_VAR)) {      String varTrueName="$" + varName.replace(PcConstants.NODE_REQUEST_PREFIX_REPLACE_VAR,"");      sourceContentHelperNew=contentAfterReplace.replace(varTrueName,replacement);      contentAfterReplace=sourceContentHelperNew;    }  }  return contentAfterReplace;}  }
class C{  private void updateGameFromSelection(){  String selected=list.getSelectedValue();  if (selected != null) {    gameInput.setText(selected);  }}  }
class C{  private void drawGraphPaperBackground(Canvas canvas,Paint paint){  int i=0;  boolean doneH=false, doneV=false;  while (!(doneH && doneV)) {    if (i < canvas.getHeight())     canvas.drawLine(0,i,canvas.getWidth(),i,paint); else     doneH=true;    if (i < canvas.getWidth())     canvas.drawLine(i,0,i,canvas.getHeight(),paint); else     doneV=true;    i+=75;  }}  }
class C{  public static String stripPrefix(String propName){  if (propName == null) {    return null;  }  if (propName.startsWith(PREFIX_OVF_PROP)) {    return propName.substring(PREFIX_OVF_NET.length() + 1);  }  return null;}  }
class C{  protected void monitor(long millisTimeStamp,List<ResourceInstance> resourceInstances){  monitorStatisticIds(millisTimeStamp,resourceInstances);}  }
class C{  public PrimitivePropertyType createPrimitivePropertyType(){  PrimitivePropertyTypeImpl primitivePropertyType=new PrimitivePropertyTypeImpl();  return primitivePropertyType;}  }
class C{  @Override protected void sendFunctionGroup3(){  int new_fn=((getF9() ? CbusConstants.CBUS_F9 : 0) | (getF10() ? CbusConstants.CBUS_F10 : 0) | (getF11() ? CbusConstants.CBUS_F11 : 0)| (getF12() ? CbusConstants.CBUS_F12 : 0));  cs.setFunctions(3,_handle,new_fn);}  }
class C{  public static Area punch(Area shapeArea,double gap,boolean rounded,Point2D pointPos,Shape pointShape){  if (gap <= 1e-10 || pointPos == null || pointShape == null) {    return shapeArea;  }  AffineTransform tx=AffineTransform.getTranslateInstance(pointPos.getX(),pointPos.getY());  int gapJoin=rounded ? BasicStroke.JOIN_ROUND : BasicStroke.JOIN_MITER;  Area gapArea=GeometryUtils.grow(tx.createTransformedShape(pointShape),gap,gapJoin,10f);  shapeArea.subtract(gapArea);  return shapeArea;}  }
class C{  protected boolean beforeDelete(){  if (getC_Order_ID() != 0) {    log.saveError("Error",Msg.getMsg(getCtx(),"CannotDelete"));    return false;  }  return true;}  }
class C{  public void java(Action<JavaExtension> closure){  JavaExtension java=new JavaExtension(this);  closure.execute(java);}  }
class C{  protected String longestOp(Iterable<TaskStats> taskStats){  String longest=OP;  for (  final TaskStats stat : taskStats) {    if (stat.getElapsed() >= 0) {      String name=stat.getTask().getName();      if (name.length() > longest.length()) {        longest=name;      }    }  }  return longest;}  }
class C{  public PostCode(String value){  this();  setValue(value);}  }
class C{  public H2FullPrunedBlockStore(NetworkParameters params,String dbName,int fullStoreDepth,int cacheSize) throws BlockStoreException {  this(params,dbName,fullStoreDepth);  try {    Statement s=conn.get().createStatement();    s.executeUpdate("SET CACHE_SIZE " + cacheSize);    s.close();  } catch (  SQLException e) {    throw new BlockStoreException(e);  }}  }
class C{  public synchronized int runCount(){  return fRunTests;}  }
class C{  public void assertConvertible(Type s,Type t,boolean expected){  if (types.isConvertible(s,t) != expected) {    String msg=expected ? " is not convertible to " : " is convertible to ";    error(s + msg + t);  }}  }
class C{  public PermissionCollection newPermissionCollection(){  return new CryptoAllPermissionCollection();}  }
class C{  public NPCNameValidator(final String parameterValue){  this.parameterValue=parameterValue;}  }
class C{  public static <E extends Comparable<E>>MinMaxPriorityQueue<E> create(Iterable<? extends E> initialContents){  return new Builder<E>(Ordering.<E>natural()).create(initialContents);}  }
class C{  protected Button createTouchCommandButton(Command c){  Button b=new Button(c);  if (b.getIcon() == null) {    b.setIcon((Image)parent.getUIManager().getThemeImageConstant("defaultCommandImage"));  } else {    if (UIManager.getInstance().isThemeConstant("commandAsIconBool",false)) {      b.setText("");    }  }  b.setTactileTouch(true);  b.setTextPosition(Label.BOTTOM);  b.setEndsWith3Points(false);  String uiid=(String)c.getClientProperty("cn1$CommandUIID");  if (uiid != null) {    b.setUIID(uiid);  } else {    b.setUIID("TouchCommand");  }  Integer gap=(Integer)c.getClientProperty("iconGap");  if (gap != null) {    b.setGap(gap.intValue());  }  return b;}  }
class C{  protected static double createPosition(int start,double decimal,int density){  double l=((double)start) / (double)density;  double r=((double)(start + 1)) / (double)density;  return (decimal - l) / (r - l);}  }
class C{  private Encoding fromExternalToWrapperEncoding(org.carbondata.format.Encoding encoder){  if (null == encoder) {    return null;  }switch (encoder) {case DICTIONARY:    return Encoding.DICTIONARY;case DELTA:  return Encoding.DELTA;case RLE:return Encoding.RLE;case INVERTED_INDEX:return Encoding.INVERTED_INDEX;case BIT_PACKED:return Encoding.BIT_PACKED;case DIRECT_DICTIONARY:return Encoding.DIRECT_DICTIONARY;default :return Encoding.DICTIONARY;}}  }
class C{  private static int intIntoCharArray(char[] buf,int cursor,int n){  while ((n & 0xffff0000) != 0) {    int q=(int)((0x51EB851FL * (n >>> 2)) >>> 35);    int r=n - 100 * q;    buf[--cursor]=ONES[r];    buf[--cursor]=TENS[r];    n=q;  }  while (n != 0) {    int q=(0xCCCD * n) >>> 19;    int r=n - 10 * q;    buf[--cursor]=DIGITS[r];    n=q;  }  return cursor;}  }
class C{  public void init() throws ServletException {}  }
class C{  public static double mix(double a,double x,double y){  double t=clamp(a,0d,1d);  return x + t * (y - x);}  }
class C{  public void addSheetListener(SheetListener l){  listenerList.add(SheetListener.class,l);}  }
class C{  public boolean isConstructor(){  return false;}  }
class C{  public Builder argument(GraphQLArgument.Builder builder){  this.arguments.add(builder.build());  return this;}  }
class C{  private void checkCollisions(){  for (  Entity e : entities) {    if (isCollidable(e)) {      collidables.add(e);    }  }  for (int i=0; i < collidables.size(); i++) {    Entity e1=collidables.get(i);    for (int j=i + 1; j < collidables.size(); j++) {      Entity e2=collidables.get(j);      CollisionHandler handler=getHandler(e1,e2);      if (handler == null)       continue;      if (!needManualCheck(e1,e2)) {        continue;      }      CollisionResult result=Entities.getBBox(e1).checkCollision(Entities.getBBox(e2));      if (result.hasCollided()) {        CollisionPair pair=getPair(e1,e2);        if (pair == null) {          pair=pooler.get(CollisionPair.class);          pair.init(e1,e2,handler);          collisions.add(pair);          handler.onHitBoxTrigger(pair.getA(),pair.getB(),result.getBoxA(),result.getBoxB());          pair.collisionBegin();        }        pooler.put(result);      } else {        int pairIndex=getPairIndex(e1,e2);        if (pairIndex != -1) {          CollisionPair pair=collisions.get(pairIndex);          collisions.removeIndex(pairIndex);          pair.collisionEnd();          pooler.put(pair);        }      }    }  }  collidables.clear();}  }
class C{  public synchronized long size(){  return size;}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public FuzzyQueryBuilder(String name,double value){  this(name,(Object)value);}  }
class C{  private double k(int a,int b){  evalCount++;  return kernel.eval(a,b,vecs,accelCache);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Intent addCategory(String category){  if (mCategories == null) {    mCategories=new HashSet<String>();  }  mCategories.add(category.intern());  return this;}  }
class C{  private static void generateSysPropsReport(J2DAnalyzer.SingleResultSetHolder srsh){  File sysPropsFile=new File(resultsDir,"System_Properties.html");  PrintWriter writer=openFile(sysPropsFile.getAbsolutePath(),HTMLGEN_FILE_NEW);  String headerTitle=getHeaderTitle("System Properties");  writer.println(headerTitle);  writer.flush();  writer.println("<tr><td bgcolor=\"#CCCCFF\"><b>" + "System Property</b></td><td bgcolor=\"#CCCCFF\">" + "<b>Value</b></td></tr>");  String key=null;  String value=null;  Map sysProps=srsh.getProperties();  Iterator iter=sysProps.keySet().iterator();  while (iter.hasNext()) {    key=iter.next().toString();    value=sysProps.get(key).toString();    writer.println("<tr><td bgcolor=\"#f0f0f0\">" + key + "</td><td>"+ value+ "</td></tr>");  }  writer.println("</table>");  writer.flush();  writer.println("<br><hr WIDTH=\"100%\" size=\"1\">");  writer.println("</p><hr WIDTH=\"100%\" size=\"1\"></body></html>");  writer.flush();}  }
class C{  public void addActivity(Activity activity){  if (mActivityStack == null)   mActivityStack=new Stack<>();  mActivityStack.add(activity);}  }
class C{  public void testLargeSampleCopy(){  int rightFiles=20;  String rightExtension=".txt";  createFile(rightFiles,rightExtension);  int wrongFiles=20;  String wrongExtention=".abc";  createFile(wrongFiles,wrongExtention);  MyFileFilter txtFilter=new MyFileFilter(rightExtension);  MyFileSampler textSampler=new MyFileSampler(textInputFolder.getAbsolutePath(),textOutputFolder.getAbsolutePath());  int numberToSample=2 * rightFiles;  List<File> files=textSampler.sampleFiles(numberToSample,txtFilter);  assertEquals("Incorrect number of files sampled.",rightFiles,files.size());  assertEquals("Incorrect number of files copied.",rightFiles,textOutputFolder.listFiles().length);  for (  File file : textOutputFolder.listFiles()) {    String thisExtension=file.getName().substring(file.getName().indexOf("."),file.getName().length());    assertEquals("Wrong file identified by the filter",true,thisExtension.equals(rightExtension));  }}  }
class C{  private boolean tryReplaceItem(final IItemHandler inventory,final int slot,final ItemStack stackToReplace,final ItemStack replacementStack){  if (slot < inventory.getSlots() && inventory.getStackInSlot(slot) == stackToReplace && inventory.extractItem(slot,stackToReplace.stackSize,true) != null) {    inventory.extractItem(slot,stackToReplace.stackSize,false);    inventory.insertItem(slot,replacementStack,false);    return true;  }  return false;}  }
class C{  private State buildPatch(TaskState.TaskStage stage,Integer activeHostCount,Throwable e){  State s=new State();  s.taskState=new TaskState();  s.taskState.stage=stage;  if (activeHostCount != null) {    s.activeHostCount=activeHostCount;  }  if (e != null) {    s.taskState.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public static void dumpCurrentRow(ICursor cursor){  dumpCurrentRow(cursor,20);}  }
class C{  public void test_registerIndex(){  final String name="testIndex";  final IndexMetadata metadata=new IndexMetadata(name,UUID.randomUUID());  metadata.setDeleteMarkers(true);  assertNull(fed.getIndex(name,ITx.UNISOLATED));  assertNull(fed.getIndex(name,ITx.READ_COMMITTED));  fed.registerIndex(metadata);{    final long tx=ITx.UNISOLATED;    final IIndex ndx=fed.getIndex(name,tx);    assertNotNull(ndx);    assertEquals(metadata.getIndexUUID(),ndx.getIndexMetadata().getIndexUUID());  }{    final long tx=ITx.READ_COMMITTED;    final IIndex ndx=fed.getIndex(name,tx);    assertNotNull(ndx);    assertEquals(metadata.getIndexUUID(),ndx.getIndexMetadata().getIndexUUID());  }  fed.dropIndex(name);  assertNull(fed.getIndex(name,ITx.READ_COMMITTED));  assertNull(fed.getIndex(name,ITx.UNISOLATED));}  }
class C{  public void test_ticket_1007_string5() throws Exception {  new TestHelper("ticket-1007-string5","ticket-1007-string5.rq","ticket-1007-custom.trig","ticket-1007-string.srx",false).runTest();}  }
class C{  @Override protected URLConnection openConnection(URL url,Proxy proxy) throws IOException {  if (url == null || proxy == null) {    throw new IllegalArgumentException("url == null || proxy == null");  }  return new FtpURLConnection(url,proxy);}  }
class C{  public static <T>FileWriterCycleConfig<T> newConfig(long fileSize,int cntTuples,long periodMsec,Predicate<T> tuplePredicate){  return new FileWriterCycleConfig<>(fileSize,cntTuples,periodMsec,tuplePredicate);}  }
class C{  public ProtocolException(final String message){  super(message);}  }
class C{  public static <C extends Comparable<?>>Range<C> upTo(C endpoint,BoundType boundType){switch (boundType) {case OPEN:    return lessThan(endpoint);case CLOSED:  return atMost(endpoint);default :throw new AssertionError();}}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  private void mapOutProviderTenantCheck(TenantOrg tenant){  if (!_permissionsHelper.userHasGivenRole((StorageOSUser)sc.getUserPrincipal(),null,Role.SECURITY_ADMIN)) {    return;  }  String user=getUserFromContext().getName();  UserInfoPage.UserTenantList userAndTenants=Validator.getUserTenants(user,tenant);  if (null != userAndTenants) {    List<UserInfoPage.UserTenant> userTenants=userAndTenants._userTenantList;    if (CollectionUtils.isEmpty(userTenants)) {      _log.error("User {} will not match any tenant after this user mapping change",user);      throw APIException.badRequests.userMappingNotAllowed(user);    } else     if (userTenants.size() > 1) {      _log.error("User {} will map to multiple tenants {} after this user mapping change",user,userTenants.toArray());      throw APIException.badRequests.userMappingNotAllowed(user);    } else {      String tenantUri=userTenants.get(0)._id.toString();      String providerTenantId=_permissionsHelper.getRootTenant().getId().toString();      _log.debug("user will map to tenant: " + tenantUri);      _log.debug("provider tenant ID: " + providerTenantId);      if (!providerTenantId.equalsIgnoreCase(tenantUri)) {        _log.error("User {} will map to tenant {}, which is not provider tenant",user,tenant.getLabel());        throw APIException.badRequests.userMappingNotAllowed(user);      }    }  }}  }
class C{  public char charValue(){  return ((Character)value).charValue();}  }
class C{  public static void main(String[] args){  try {    CheckEstimator check=new CheckEstimator();    try {      check.setOptions(args);      Utils.checkForRemainingOptions(args);    } catch (    Exception ex) {      String result=ex.getMessage() + "\n\n" + check.getClass().getName().replaceAll(".*\\.","")+ " Options:\n\n";      Enumeration<Option> enu=check.listOptions();      while (enu.hasMoreElements()) {        Option option=enu.nextElement();        result+=option.synopsis() + "\n" + option.description()+ "\n";      }      throw new Exception(result);    }    check.doTests();  } catch (  Exception ex) {    System.err.println(ex.getMessage());  }}  }
class C{  public static <T,CopyType>CopyType copyRootOut(TreeDef<T> def,T root,BiFunction<T,CopyType,CopyType> mapper){  List<T> children=def.childrenOf(root);  CopyType copyRoot=mapper.apply(root,null);  copyMutableRecurse(def,root,children,copyRoot,mapper);  return copyRoot;}  }
class C{  public ExecutionEventImpl(){  super();}  }
class C{  public void onMouseOver(){  if (pressed) {    return;  }  if (enabled && hasVisibleItems) {    element.setClassName(css.menuBarItemOver());  }}  }
class C{  public static byte[] concat(byte[] b1,byte[] b2){  byte[] out=new byte[b1.length + b2.length];  System.arraycopy(b1,0,out,0,b1.length);  System.arraycopy(b2,0,out,b1.length,b2.length);  return out;}  }
class C{  protected String paramString(){  String defaultIconString=((defaultIcon != null) && (defaultIcon != this) ? defaultIcon.toString() : "");  String pressedIconString=((pressedIcon != null) && (pressedIcon != this) ? pressedIcon.toString() : "");  String disabledIconString=((disabledIcon != null) && (disabledIcon != this) ? disabledIcon.toString() : "");  String selectedIconString=((selectedIcon != null) && (selectedIcon != this) ? selectedIcon.toString() : "");  String disabledSelectedIconString=((disabledSelectedIcon != null) && (disabledSelectedIcon != this) ? disabledSelectedIcon.toString() : "");  String rolloverIconString=((rolloverIcon != null) && (rolloverIcon != this) ? rolloverIcon.toString() : "");  String rolloverSelectedIconString=((rolloverSelectedIcon != null) && (rolloverSelectedIcon != this) ? rolloverSelectedIcon.toString() : "");  String paintBorderString=(paintBorder ? "true" : "false");  String paintFocusString=(paintFocus ? "true" : "false");  String rolloverEnabledString=(rolloverEnabled ? "true" : "false");  return super.paramString() + ",defaultIcon=" + defaultIconString+ ",disabledIcon="+ disabledIconString+ ",disabledSelectedIcon="+ disabledSelectedIconString+ ",margin="+ margin+ ",paintBorder="+ paintBorderString+ ",paintFocus="+ paintFocusString+ ",pressedIcon="+ pressedIconString+ ",rolloverEnabled="+ rolloverEnabledString+ ",rolloverIcon="+ rolloverIconString+ ",rolloverSelectedIcon="+ rolloverSelectedIconString+ ",selectedIcon="+ selectedIconString+ ",text="+ text;}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return CONFIGURATION.createCompatibleImage(width,height,image.getTransparency());}  }
class C{  public boolean test(List<ReferenceType> tuple,Substitution<ReferenceType> substitution){  int i=0;  while (i < tuple.size() && parameters.get(i).getLowerTypeBound().isLowerBound(tuple.get(i),substitution) && parameters.get(i).getUpperTypeBound().isUpperBound(tuple.get(i),substitution)) {    i++;  }  return i == tuple.size();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof PLPosition) {    if (this == o)     return true;    PLPosition position=(PLPosition)o;    return (x == position.x && y == position.y && z == position.z);  }  return false;}  }
class C{  public static String toXml(Object root){  Class clazz=Reflections.getUserClass(root);  return toXml(root,clazz,null);}  }
class C{  private void emit8ByteCompare(CompilationResultBuilder crb,AMD64MacroAssembler masm,Register result,Register array1,Register array2,Register length,Label trueLabel,Label falseLabel){  Label loop=new Label();  Label compareTail=new Label();  Register temp=asRegister(temp4);  masm.andl(result,VECTOR_SIZE - 1);  masm.andl(length,~(VECTOR_SIZE - 1));  masm.jccb(ConditionFlag.Zero,compareTail);  masm.leaq(array1,new AMD64Address(array1,length,Scale.Times1,0));  masm.leaq(array2,new AMD64Address(array2,length,Scale.Times1,0));  masm.negq(length);  masm.align(crb.target.wordSize * 2);  masm.bind(loop);  masm.movq(temp,new AMD64Address(array1,length,Scale.Times1,0));  masm.cmpq(temp,new AMD64Address(array2,length,Scale.Times1,0));  masm.jccb(ConditionFlag.NotEqual,falseLabel);  masm.addq(length,VECTOR_SIZE);  masm.jccb(ConditionFlag.NotZero,loop);  masm.testl(result,result);  masm.jccb(ConditionFlag.Zero,trueLabel);  masm.movq(temp,new AMD64Address(array1,result,Scale.Times1,-VECTOR_SIZE));  masm.cmpq(temp,new AMD64Address(array2,result,Scale.Times1,-VECTOR_SIZE));  masm.jccb(ConditionFlag.NotEqual,falseLabel);  masm.jmpb(trueLabel);  masm.bind(compareTail);  masm.movl(length,result);}  }
class C{  private MemberName loadMethod(byte[] classFile){  Class<?> invokerClass=loadAndInitializeInvokerClass(classFile,cpPatches(classFile));  return resolveInvokerMember(invokerClass,invokerName,invokerType);}  }
class C{  public String globalInfo(){  return "Changes the date format used by a date attribute. This is most " + "useful for converting to a format with less precision, for example, " + "from an absolute date to day of year, etc. This changes the format "+ "string, and changes the date values to those that would be parsed "+ "by the new format.";}  }
class C{  static <T>List<T> cast(Iterable<T> iterable){  return (List<T>)iterable;}  }
class C{  public Object nextToken() throws JSONException {  char c;  char q;  StringBuilder sb;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped element");case '<':  throw syntaxError("Misplaced '<'");case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;sb=new StringBuilder();for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return sb.toString();}if (c == '&') {sb.append(nextEntity(c));} else {sb.append(c);}}default :sb=new StringBuilder();for (; ; ) {sb.append(c);c=next();if (Character.isWhitespace(c)) {return sb.toString();}switch (c) {case 0:return sb.toString();case '>':case '/':case '=':case '!':case '?':case '[':case ']':back();return sb.toString();case '<':case '"':case '\'':throw syntaxError("Bad character in a name");}}}}  }
class C{  public boolean isEmpty(){  return this.constructionElement.getFirstChild() == null;}  }
class C{  public Builder field(GraphQLFieldDefinition.Builder builder){  this.fieldDefinitions.add(builder.build());  return this;}  }
class C{  public SSLTestConfig createSSLTestConfig(){  final boolean useSSL=TestUtil.nextInt(LuceneTestCase.random(),0,999) < (int)(1000 * getEffectiveOdds(ssl,LuceneTestCase.TEST_NIGHTLY,LuceneTestCase.RANDOM_MULTIPLIER));  final boolean useClientAuth=TestUtil.nextInt(LuceneTestCase.random(),0,999) < (int)(1000 * getEffectiveOdds(clientAuth,LuceneTestCase.TEST_NIGHTLY,LuceneTestCase.RANDOM_MULTIPLIER));  return new SSLTestConfig(useSSL,useClientAuth);}  }
class C{  public BulkTest(String name){  super(name);  this.verboseName=getClass().getName();}  }
class C{  public void putSiteIntitiatorsEntry(String internalSiteName,StringSet initiators){  if (this.siteInitiators == null) {    this.siteInitiators=new StringSetMap();  }  this.siteInitiators.put(internalSiteName,initiators);}  }
class C{  public DiscoveryResource(Resource root){  this(CORE,root);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof NumberTickUnit)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  NumberTickUnit that=(NumberTickUnit)obj;  if (!this.formatter.equals(that.formatter)) {    return false;  }  return true;}  }
class C{  public double nextDouble(double freedom){  double u, v, z, zz, r;  if (freedom == 1.0) {    for (; ; ) {      u=randomGenerator.raw();      v=randomGenerator.raw() * 0.857763884960707;      z=v / u;      if (z < 0)       continue;      zz=z * z;      r=2.5 - zz;      if (z < 0.0)       r=r + zz * z / (3.0 * z);      if (u < r * 0.3894003915)       return (z * z);      if (zz > (1.036961043 / u + 1.4))       continue;      if (2.0 * Math.log(u) < (-zz * 0.5))       return (z * z);    }  } else {    if (freedom != freedom_in) {      b=Math.sqrt(freedom - 1.0);      vm=-0.6065306597 * (1.0 - 0.25 / (b * b + 1.0));      vm=(-b > vm) ? -b : vm;      vp=0.6065306597 * (0.7071067812 + b) / (0.5 + b);      vd=vp - vm;      freedom_in=freedom;    }    for (; ; ) {      u=randomGenerator.raw();      v=randomGenerator.raw() * vd + vm;      z=v / u;      if (z < -b)       continue;      zz=z * z;      r=2.5 - zz;      if (z < 0.0)       r=r + zz * z / (3.0 * (z + b));      if (u < r * 0.3894003915)       return ((z + b) * (z + b));      if (zz > (1.036961043 / u + 1.4))       continue;      if (2.0 * Math.log(u) < (Math.log(1.0 + z / b) * b * b - zz * 0.5 - z * b))       return ((z + b) * (z + b));    }  }}  }
class C{  private int measureHeight(int measureSpec,View view){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    if (view != null) {      result=view.getMeasuredHeight();    }    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private int advanceSoftWrapOffsets(@NotNull IncrementalCacheUpdateEvent event){  int lengthDiff=event.getLengthDiff();  int recalcEndOffsetTranslated=event.getActualEndOffset() - lengthDiff;  int firstIndex=-1;  int softWrappedLinesDiff=myStorage.getNumberOfSoftWrapsInRange(event.getStartOffset() + 1,myEditor.getDocument().getTextLength());  boolean softWrapsChanged=softWrappedLinesDiff > 0;  for (int i=0; i < myAffectedByUpdateSoftWraps.size(); i++) {    SoftWrap softWrap=myAffectedByUpdateSoftWraps.get(i);    if (firstIndex < 0) {      if (softWrap.getStart() > recalcEndOffsetTranslated) {        firstIndex=i;        if (lengthDiff == 0) {          break;        }      } else {        softWrappedLinesDiff--;        softWrapsChanged=true;      }    }    if (firstIndex >= 0 && i >= firstIndex) {      ((SoftWrapImpl)softWrap).advance(lengthDiff);    }  }  if (firstIndex >= 0) {    List<SoftWrapImpl> updated=myAffectedByUpdateSoftWraps.subList(firstIndex,myAffectedByUpdateSoftWraps.size());    SoftWrapImpl lastSoftWrap=getLastSoftWrap();    if (lastSoftWrap != null && lastSoftWrap.getStart() >= updated.get(0).getStart()) {      LOG.error("Invalid soft wrap recalculation",new Attachment("state.txt",myEditor.getSoftWrapModel().toString()));    }    myStorage.addAll(updated);  }  myAffectedByUpdateSoftWraps.clear();  if (softWrapsChanged) {    myStorage.notifyListenersAboutChange();  }  return softWrappedLinesDiff;}  }
class C{  public static boolean isFinal(int flags){  return (flags & AccFinal) != 0;}  }
