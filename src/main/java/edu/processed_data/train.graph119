class C{  public static String quote(String string){  boolean quote=false;  if ((string.indexOf('\n') != -1) || (string.indexOf('\r') != -1) || (string.indexOf('\'') != -1)|| (string.indexOf('"') != -1)|| (string.indexOf('\\') != -1)|| (string.indexOf('\t') != -1)|| (string.indexOf('%') != -1)) {    string=backQuoteChars(string);    quote=true;  }  if ((quote == true) || (string.indexOf('{') != -1) || (string.indexOf('}') != -1)|| (string.indexOf(',') != -1)|| (string.equals("?"))|| (string.indexOf(' ') != -1)|| (string.equals(""))) {    string=("'".concat(string)).concat("'");  }  return string;}  }
class C{  private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  final String namespace=in.readUTF();  valueFactory=BigdataValueFactoryImpl.getInstance(namespace);}  }
class C{  public ZAddParams xx(){  addParam(XX);  return this;}  }
class C{  @Override public void addEventListener2(IGeolocSharingListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  if (sLogger.isActivated()) {    sLogger.info("Add a Geoloc sharing event listener");  }  try {synchronized (mLock) {      mBroadcaster.addEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public void exit(){  if (invisibleOnDispose)   this.setVisible(false); else   this.dispose();}  }
class C{  public VerantwortlicheStelle(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public void addListener(final ICriteriumCacheListener listener){  m_listeners.addListener(listener);}  }
class C{  public Conf(){  loadedDate=new Date();}  }
class C{  public boolean isAmazonDevice(){  if (android.os.Build.MANUFACTURER.equals(AMAZON_DEVICE)) {    return true;  }  return false;}  }
class C{  private void createLexCoocTable(int vocabSize){  logger.info("Creating lexical cooc table");  coocTable=new LexCoocTable(10 * vocabSize);  sa.stream().forEach(null);}  }
class C{  public boolean is_superset_of(symbol_set other) throws internal_error {  not_null(other);  return other.is_subset_of(this);}  }
class C{  private boolean resizeAndSaveImage(int maxWidth,int maxHeight) throws IOException {  boolean saved=false;  File targetFile=configuration.diskCache.get(uri);  if (targetFile != null && targetFile.exists()) {    ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);    DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();    ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,Scheme.FILE.wrap(targetFile.getAbsolutePath()),uri,targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);    Bitmap bmp=decoder.decode(decodingInfo);    if (bmp != null && configuration.processorForDiskCache != null) {      L.d(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISK,memoryCacheKey);      bmp=configuration.processorForDiskCache.process(bmp);      if (bmp == null) {        L.e(ERROR_PROCESSOR_FOR_DISK_CACHE_NULL,memoryCacheKey);      }    }    if (bmp != null) {      saved=configuration.diskCache.save(uri,bmp);      bmp.recycle();    }  }  return saved;}  }
class C{  public static void zero(boolean useNT,Address start,Extent len){  if (useNT) {    SysCall.sysCall.sysZeroNT(start,len);  } else {    SysCall.sysCall.sysZero(start,len);  }}  }
class C{  public TBase<TBase<?,?>,TFieldIdEnum> newResult(){  return result.deepCopy();}  }
class C{  public static Record createRecord(String name,String address,String itf,JsonObject metadata){  Record ret=io.vertx.servicediscovery.types.EventBusService.createRecord(name,address,itf,metadata);  return ret;}  }
class C{  public boolean isTimeSeries(){  Object oo=get_Value(COLUMNNAME_IsTimeSeries);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void inPatientListClickFirstPatient(){  click(dataThat(is(Patient.class)).inAdapterView(hasId(R.id.fragment_patient_list)).atPosition(0));}  }
class C{  public boolean isUsbMassStorageConnected(){  try {    return mMountService.isUsbMassStorageConnected();  } catch (  Exception ex) {    Log.e(TAG,"Failed to get UMS connection state",ex);  }  return false;}  }
class C{  private void markRemovedDefaultSessionToken(String site,String token){  if (removedDefaultTokens == null)   removedDefaultTokens=new HashMap<>(1);  HashSet<String> removedSet=removedDefaultTokens.get(site);  if (removedSet == null) {    removedSet=new HashSet<>(1);    removedDefaultTokens.put(site,removedSet);  }  removedSet.add(token);}  }
class C{  public double squaredDistance(DoubleVector v){  double deltaX=v.x - x, deltaY=v.y - y, deltaZ=v.z - z;  return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;}  }
class C{  public void putStatic(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTSTATIC,owner,name,type);}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  public Source<Float> fromZeroToPositiveInfinity(){  return Compositions.weightWithValues(Floats.fromZeroToPositiveInfinity(),Float.POSITIVE_INFINITY,0f);}  }
class C{  public boolean intersect(float left,float top,float right,float bottom){  if (this.left < right && left < this.right && this.top < bottom && top < this.bottom) {    if (this.left < left) {      this.left=left;    }    if (this.top < top) {      this.top=top;    }    if (this.right > right) {      this.right=right;    }    if (this.bottom > bottom) {      this.bottom=bottom;    }    return true;  }  return false;}  }
class C{  public double compute(long... dataset){  return computeInPlace(longsToDoubles(dataset));}  }
class C{  public Quaternionf scale(float factor){  return scale(factor,this);}  }
class C{  private void addFixtureAction(Image icon,ConvexShapePanel shapePanel){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      BodyFixture fixture=AddConvexFixtureDialog.show(ControlUtilities.getParentWindow(this),icon,shapePanel);      SandboxBody body=(SandboxBody)node.getUserObject();      if (fixture != null) {synchronized (Simulation.LOCK) {          body.addFixture(fixture);          if (!body.isMassExplicit()) {            body.updateMass();          }        }        DefaultMutableTreeNode fixtureNode=new DefaultMutableTreeNode(fixture);        this.model.insertNodeInto(fixtureNode,node,node.getChildCount());        this.tree.expandPath(new TreePath(fixtureNode.getPath()).getParentPath());      }    }  }}  }
class C{  public void printText(String text){  view.print(text,text.endsWith("\r"));  for (  ActionDelegate actionDelegate : actionDelegates) {    actionDelegate.onConsoleOutput(this);  }}  }
class C{  private SentenceFilteredTrie filter(Trie unfilteredTrieRoot){  SentenceFilteredTrie filteredTrieRoot=new SentenceFilteredTrie(unfilteredTrieRoot);  for (int i=0; i < tokens.length; i++) {    filter(i,filteredTrieRoot,false);  }  return filteredTrieRoot;}  }
class C{  public void testMapHashCode(){  resetEmpty();  assertTrue("Empty maps have different hashCodes.",map.hashCode() == confirmed.hashCode());  resetFull();  assertTrue("Equal maps have different hashCodes.",map.hashCode() == confirmed.hashCode());}  }
class C{  private void loadFileRecursively(String path,Map<String,ThriftFileElement> loadedFiles) throws IOException {  ThriftFileElement element=null;  File dir=null;  File file=findFirstExisting(path,null);  if (file != null) {    file=file.getCanonicalFile();    if (loadedFiles.containsKey(file.getAbsolutePath())) {      return;    }    dir=file.getParentFile();    element=loadSingleFile(file.getParentFile(),file.getName());  }  if (element == null) {    throw new FileNotFoundException("Failed to locate " + path + " in "+ includePaths);  }  loadedFiles.put(file.getAbsolutePath(),element);  ImmutableList<IncludeElement> includes=element.includes();  if (includes.size() > 0) {    includePaths.addFirst(dir);    for (    IncludeElement include : includes) {      if (!include.isCpp()) {        loadFileRecursively(include.path(),loadedFiles);      }    }    includePaths.removeFirst();  }}  }
class C{  private void initNotificationBuilder(Context context){  mNotificationBuilder=new NotificationCompat.Builder(context);  mNotificationView=new RemoteViews(context.getPackageName(),R.layout.simple_sound_cloud_notification);  mNotificationExpandedView=new RemoteViews(context.getPackageName(),R.layout.simple_sound_cloud_notification_expanded);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    addSmallIcon(mNotificationView);    addSmallIcon(mNotificationExpandedView);  }  mNotificationView.setOnClickPendingIntent(R.id.simple_sound_cloud_notification_previous,mPreviousPendingIntent);  mNotificationExpandedView.setOnClickPendingIntent(R.id.simple_sound_cloud_notification_previous,mPreviousPendingIntent);  mNotificationView.setOnClickPendingIntent(R.id.simple_sound_cloud_notification_next,mNextPendingIntent);  mNotificationExpandedView.setOnClickPendingIntent(R.id.simple_sound_cloud_notification_next,mNextPendingIntent);  mNotificationView.setOnClickPendingIntent(R.id.simple_sound_cloud_notification_play,mTogglePlaybackPendingIntent);  mNotificationExpandedView.setOnClickPendingIntent(R.id.simple_sound_cloud_notification_play,mTogglePlaybackPendingIntent);  mNotificationView.setOnClickPendingIntent(R.id.simple_sound_cloud_notification_clear,mClearPendingIntent);  mNotificationExpandedView.setOnClickPendingIntent(R.id.simple_sound_cloud_notification_clear,mClearPendingIntent);  mNotificationBuilder.setSmallIcon(mNotificationConfig.getNotificationIcon());  mNotificationBuilder.setContent(mNotificationView);  mNotificationBuilder.setPriority(NotificationCompat.PRIORITY_HIGH);  Class<?> playerActivity=mNotificationConfig.getNotificationActivity();  if (playerActivity != null) {    Intent i=new Intent(context,playerActivity);    PendingIntent contentIntent=PendingIntent.getActivity(context,REQUEST_DISPLAYING_CONTROLLER,i,PendingIntent.FLAG_UPDATE_CURRENT);    mNotificationBuilder.setContentIntent(contentIntent);  }}  }
class C{  public void testAddAccessSQL(){  String sql=m_role.addAccessSQL("SELECT r.a,r.b,r.c FROM AD_Role r WHERE EXISTS " + "(SELECT AD_Column c WHERE c.a=c.b) ORDER BY r.a","r",MRole.SQL_FULLYQUALIFIED,MRole.SQL_RO);  System.out.println(sql);  assertEquals(sql,"SELECT r.a,r.b,r.c FROM AD_Role r WHERE EXISTS (SELECT AD_Column c WHERE c.a=c.b) AND r.AD_Client_ID=0 AND r.AD_Org_ID=0 ORDER BY r.a");}  }
class C{  public static void onEventEnd(final Context context,final String event_id){  onEventDuration(context,event_id,log.onEventEnd(context,event_id));}  }
class C{  @SuppressWarnings("unchecked") public <T extends BeanDescription>T introspect(JavaType type){  return (T)getClassIntrospector().forDeserialization(this,type,this);}  }
class C{  protected int _sliceOffset(int absRank){  return sliceOffsets[absRank];}  }
class C{  protected void handleException(Exception e){  e.printStackTrace();  updateResult("ERROR",e.getClass().getSimpleName() + ": \"" + e.getMessage()+ "\"");  if (e instanceof SmbAuthException) {    updateResult("handleException","AUTH ERROR!!! " + e.getMessage());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected Action_Impl(){  super();}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public MetadataTest(String name){  super(name);}  }
class C{  public VNXeCommandJob createFileSystemSnap(FileSystemSnapCreateParam param) throws VNXeException {  MultivaluedMap<String,String> queryParams=new MultivaluedMapImpl();  queryParams.add(VNXeConstants.TIMEOUT,"0");  setQueryParameters(queryParams);  return postRequestAsync(param);}  }
class C{  public static String dispTargetTagsDropHintScript(){  final String targetDropStyle="document.getElementById('show-filter-drop-hint').innerHTML = '." + UI.getCurrent().getTheme() + " .target-tag-drop-hint { border: 1px dashed #26547a !important; }';";  return new StringBuilder().append(TARGET_TAG_DROP_CREATE_SCRIPT).append(targetDropStyle).toString();}  }
class C{  @Override public StreamBuilderImpl<T,U> local(){  return new Local<T,U>(this);}  }
class C{  @Override public void writeState(FacesContext ctx,Object state,StringBuilder stateCapture) throws IOException {  if (stateCapture != null) {    doWriteState(ctx,state,new StringBuilderWriter(stateCapture));  } else {    ResponseWriter writer=ctx.getResponseWriter();    writer.startElement("input",null);    writer.writeAttribute("type","hidden",null);    writer.writeAttribute("name",VIEW_STATE_PARAM.getName(ctx),null);    if (webConfig.isOptionEnabled(EnableViewStateIdRendering)) {      String viewStateId=Util.getViewStateId(ctx);      writer.writeAttribute("id",viewStateId,null);    }    StringBuilder stateBuilder=new StringBuilder();    doWriteState(ctx,state,new StringBuilderWriter(stateBuilder));    writer.writeAttribute("value",stateBuilder.toString(),null);    if (webConfig.isOptionEnabled(AutoCompleteOffOnViewState)) {      writer.writeAttribute("autocomplete","off",null);    }    writer.endElement("input");    writeClientWindowField(ctx,writer);    writeRenderKitIdField(ctx,writer);  }}  }
class C{  public GeometryLocation[] nearestLocations(){  computeMinDistance();  return minDistanceLocation;}  }
class C{  public void encode(DerOutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  for (int i=0; i < ids.size(); i++) {    ids.elementAt(i).encode(tmp);  }  out.write(DerValue.tag_Sequence,tmp);}  }
class C{  @SuppressWarnings("unchecked") protected void removeSelectedEngineers(){  ISelection selection=engineersTable.getSelection();  if (!(selection instanceof IStructuredSelection)) {    return;  }  IStructuredSelection structuredSelection=(IStructuredSelection)selection;  Iterator<String> iterator=structuredSelection.iterator();  while (iterator.hasNext()) {    String engineerName=iterator.next();    engineers.remove(engineerName);    migrationTask.removeEngineer(engineerName);  }  engineersTable.refresh(false);}  }
class C{  public static IStatus validateJavaTypeName(String name){  return validateJavaTypeName(name,org.eclipse.jdt.core.JavaCore.VERSION_1_3,org.eclipse.jdt.core.JavaCore.VERSION_1_3);}  }
class C{  protected ComponentListener createComponentListener(){  return new ComponentHandler();}  }
class C{  public void putAttribute(final String attrId,final List ltValues){  if (map == null) {    map=new HashMap();  }  map.put(attrId.toLowerCase(),new LdapEntryAttributeVO(attrId.toLowerCase(),ltValues));}  }
class C{  private void initializeBottomSheet(){  BottomSheet.Builder builder=createBottomSheetBuilder();  addItems(builder);  bottomSheet=builder.create();}  }
class C{  public void add(final Job job){  jobList.add(job);  pcs.firePropertyChange(null,null,null);}  }
class C{  public void disableCrashUploading(){  mCrashUploadingEnabled=false;}  }
class C{  public static String shortFormatDayTime(Date dt){  return createDateFormatter().shortFormatDayTime(dt);}  }
class C{  public void sendKeySync(KeyEvent event){  validateNotAppThread();  long downTime=event.getDownTime();  long eventTime=event.getEventTime();  int action=event.getAction();  int code=event.getKeyCode();  int repeatCount=event.getRepeatCount();  int metaState=event.getMetaState();  int deviceId=event.getDeviceId();  int scancode=event.getScanCode();  int source=event.getSource();  int flags=event.getFlags();  if (source == InputDevice.SOURCE_UNKNOWN) {    source=InputDevice.SOURCE_KEYBOARD;  }  if (eventTime == 0) {    eventTime=SystemClock.uptimeMillis();  }  if (downTime == 0) {    downTime=eventTime;  }  KeyEvent newEvent=new KeyEvent(downTime,eventTime,action,code,repeatCount,metaState,deviceId,scancode,flags | KeyEvent.FLAG_FROM_SYSTEM,source);  InputManager.getInstance().injectInputEvent(newEvent,InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH);}  }
class C{  public Map<String,Object> flattenAsMap(){  if (flattenedMap != null)   return flattenedMap;  flattenedMap=newJsonifyLinkedHashMap();  reduce(source);  while (!elementIters.isEmpty()) {    IndexedPeekIterator<?> deepestIter=elementIters.getLast();    if (!deepestIter.hasNext()) {      elementIters.removeLast();    } else     if (deepestIter.peek() instanceof Member) {      Member mem=(Member)deepestIter.next();      reduce(mem.getValue());    } else {      JsonValue val=(JsonValue)deepestIter.next();      reduce(val);    }  }  return flattenedMap;}  }
class C{  private ClassPluginLoader(){}  }
class C{  public void checkClosedMsgSent() throws InterruptedException {synchronized (this) {    this.wait(LnTurnout.METERINTERVAL + 25);  }  Assert.assertTrue("at least two messages",lnis.outbound.size() >= 2);  Assert.assertEquals(lnis.outbound.elementAt(lnis.outbound.size() - 2).toString(),"B0 14 30 00");  Assert.assertEquals(lnis.outbound.elementAt(lnis.outbound.size() - 1).toString(),"B0 14 20 00");  Assert.assertTrue(t.getCommandedState() == jmri.Turnout.CLOSED);}  }
class C{  public Map<String,String> namedGroups(){  Map<String,String> result=new LinkedHashMap<String,String>();  if (matcher.find(0)) {    for (    String groupName : parentPattern.groupNames()) {      String groupValue=matcher.group(groupIndex(groupName));      result.put(groupName,groupValue);    }  }  return result;}  }
class C{  public void testNotifyPropertyChangeListener(){  String property="";  Object oldValue=null;  Object newValue=null;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.notifyPropertyChangeListener(property,oldValue,newValue);  jmri.util.JUnitAppender.assertErrorMessage("notifyPropertyChangeListener without change");}  }
class C{  public void updateLine(HiddenLine line){  int pointCount=getNumberOfChildren();  if (pointCount < 2) {    return;  }  FloatBuffer vertexBuffer=line.getVertexBuffer();  if ((pointCount * 3) > vertexBuffer.capacity()) {    vertexBuffer=BufferUtils.createFloatBuffer(pointCount * 3);  }  vertexBuffer.clear();  ReadOnlyVector3 trans=null;  getPointList();  for (int i=0; i < pointCount; ++i) {    int j=i * 3;    trans=pointList.get(i);    vertexBuffer.put(j,trans.getXf());    vertexBuffer.put(j + 1,trans.getYf());    vertexBuffer.put(j + 2,trans.getZf());  }  vertexBuffer.limit(pointCount * 3);  vertexBuffer.rewind();  line.setVertexBuffer(vertexBuffer);  line.updateModelBound();}  }
class C{  public String toString(){  return ("Level " + this.name + " ("+ this.value+ ")");}  }
class C{  public void expandRow(int row){  expandPath(getPathForRow(row));}  }
class C{  public int maintain(boolean add){  String sql="SELECT TableName FROM AD_Table WHERE TableName LIKE '%_Trl' ORDER BY TableName";  PreparedStatement pstmt=null;  ResultSet rs=null;  int retNo=0;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      if (add)       retNo+=addTable(rs.getString(1)); else       retNo+=deleteTable(rs.getString(1));    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return retNo;}  }
class C{  public void step(SimState state){  if (segment == null) {    return;  } else   if (reachedDestination) {    return;  }  boolean toWork=((Gridlock)state).goToWork;  if ((toWork && pathDirection < 0) || (!toWork && pathDirection > 0)) {    flipPath();  }  speed=progress(moveRate);  currentIndex+=speed;  if (linkDirection == 1 && currentIndex > endIndex) {    Coordinate currentPos=segment.extractPoint(endIndex);    updatePosition(currentPos);    transitionToNextEdge(currentIndex - endIndex);  } else   if (linkDirection == -1 && currentIndex < startIndex) {    Coordinate currentPos=segment.extractPoint(startIndex);    updatePosition(currentPos);    transitionToNextEdge(startIndex - currentIndex);  } else {    Coordinate currentPos=segment.extractPoint(currentIndex);    updatePosition(currentPos);  }}  }
class C{  public static boolean hasExtension(String extension){  if (extension == null || extension.isEmpty()) {    return false;  }  return extensionToMimeTypeMap.containsKey(extension);}  }
class C{  public static String htmlSingleQuotes(String str){  str=str.replaceAll("[\']","&rsquo;");  str=str.replaceAll("&#039;","&rsquo;");  str=str.replaceAll("&#145;","&rsquo;");  str=str.replaceAll("&#146;","&rsquo;");  return str;}  }
class C{  private Base64(){}  }
class C{  protected double defaultNoiseRate(){  return 0.0;}  }
class C{  protected static void safeMap(@NotNull final Map<IElementType,TextAttributesKey> map,@NotNull final IElementType type,@NotNull final TextAttributesKey value){  final TextAttributesKey oldVal=map.put(type,value);  if (oldVal != null && !oldVal.equals(value)) {    LOG.error("Remapping highlighting for \"" + type + "\" val: old="+ oldVal+ " new="+ value);  }}  }
class C{  public boolean rejectIt(){  log.info(toString());  setIsApproved(false);  return true;}  }
class C{  private CompiledValue resolveAsVariable(String name){  CompiledValue value=null;  for (int i=scopes.size() - 1; i >= 0; i--) {    QScope scope=(QScope)scopes.get(i);    value=scope.resolve(name);    if (value != null)     return value;  }  return null;}  }
class C{  @Override public Object readCustom(Type target){  return null;}  }
class C{  public void run(final String[] args){  parseArguments(args);  this.config=ConfigUtils.loadConfig(this.configfile);  MatsimRandom.reset(this.config.global().getRandomSeed());  MutableScenario scenario=ScenarioUtils.createMutableScenario(this.config);  new MatsimNetworkReader(scenario.getNetwork()).readFile(this.config.network().getInputFile());  Network network=(Network)scenario.getNetwork();  this.config=scenario.getConfig();  StreamingPopulationReader reader=new StreamingPopulationReader(scenario);  final StreamingPopulationWriter plansWriter=new StreamingPopulationWriter(null,network);  plansWriter.startStreaming(this.plansfile);  reader.addAlgorithm(new org.matsim.core.population.algorithms.XY2Links(scenario));  reader.addAlgorithm(plansWriter);  reader.readFile(this.config.plans().getInputFile());  PopulationUtils.printPlansCount(reader);  plansWriter.closeStreaming();  System.out.println("done.");}  }
class C{  @Ignore @Test public void javabeanTester(){  JavaBeanTester.builder(DataSourceInfoGroup.class).loadData().test();}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  @Transactional public void processFailureMsg(final ReceiptHeader receiptHeader,final PaymentResponse paymentResponse){  receiptHeader.setStatus(collectionsUtil.getReceiptStatusForCode(CollectionConstants.RECEIPT_STATUS_CODE_FAILED));  EgwStatus paymentStatus;  if (CollectionConstants.AXIS_ABORTED_STATUS_CODE.equals(paymentResponse.getAuthStatus()))   paymentStatus=collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_ONLINEPAYMENT,CollectionConstants.ONLINEPAYMENT_STATUS_CODE_ABORTED); else   paymentStatus=collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_ONLINEPAYMENT,CollectionConstants.ONLINEPAYMENT_STATUS_CODE_FAILURE);  receiptHeader.getOnlinePayment().setStatus(paymentStatus);  receiptHeader.getOnlinePayment().setAuthorisationStatusCode(paymentResponse.getAuthStatus());  receiptHeader.getOnlinePayment().setRemarks(paymentResponse.getErrorDescription());  receiptHeaderService.persist(receiptHeader);  LOGGER.debug("Cancelled receipt after receiving failure message from the payment gateway");}  }
class C{  protected static long nextID(){  return PRINTED_NODES++;}  }
class C{  public ListValue(){}  }
class C{  public static TypeReference newTypeReference(int sort){  return new TypeReference(sort << 24);}  }
class C{  public static boolean checkVersion(final int[] version,final int major,final int minor,final int minor2){  return (version[0] > major) || ((version[0] == major) && (version[1] > minor)) || ((version[0] == major) && (version[1] == minor) && (version[2] >= minor2));}  }
class C{  public MinimumSpanningForest2(Graph<V,E> graph,Forest<V,E> forest,Supplier<? extends Graph<V,E>> treeFactory,Function<? super E,Double> weights){  if (forest.getVertexCount() != 0) {    throw new IllegalArgumentException("Supplied Forest must be empty");  }  this.graph=graph;  this.forest=forest;  if (weights != null) {    this.weights=weights;  }  WeakComponentClusterer<V,E> wcc=new WeakComponentClusterer<V,E>();  Set<Set<V>> component_vertices=wcc.apply(graph);  Collection<Graph<V,E>> components=FilterUtils.createAllInducedSubgraphs(component_vertices,graph);  for (  Graph<V,E> component : components) {    PrimMinimumSpanningTree<V,E> mst=new PrimMinimumSpanningTree<V,E>(treeFactory,this.weights);    Graph<V,E> subTree=mst.apply(component);    if (subTree instanceof Tree) {      TreeUtils.addSubTree(forest,(Tree<V,E>)subTree,null,null);    }  }}  }
class C{  public boolean isArray(){  return hasRelationship(Primitive.INSTANTIATION,Primitive.ARRAY);}  }
class C{  public static void main(String args[]) throws IOException {  Debug.init(System.getProperties());  int argc=args.length;  if (argc == 1) {    ShapeFile sf=new ShapeFile(args[0]);    Debug.output("Shape file: " + args[0]);    Debug.output("version: " + sf.getFileVersion());    Debug.output("length: " + sf.getFileLength());    Debug.output("bounds:");    Debug.output("\tmin: " + sf.getBoundingBox().min);    Debug.output("\tmax: " + sf.getBoundingBox().max);    int nRecords=0;    ESRIRecord record=sf.getNextRecord();    while (record != null) {      if (record instanceof ESRIPointRecord) {        double lat=((ESRIPointRecord)record).getY();        double lon=((ESRIPointRecord)record).getX();        Debug.output("record: " + lat + ", "+ lon);      } else {        Debug.output("record: " + record.getClass().getName());      }      nRecords++;      record=sf.getNextRecord();    }    Debug.output("records: " + nRecords);  } else   if ("-a".equals(args[0])) {    String destFile=args[1];    String srcFile=args[2];    ShapeFile in=new ShapeFile(srcFile);    ShapeFile out=new ShapeFile(destFile);    if (in.getShapeType() != out.getShapeType()) {      try {        out.setShapeType(in.getShapeType());      } catch (      IllegalArgumentException e) {        Debug.error("Incompatible shape types.");        System.exit(1);      }    }    ESRIRecord r;    while ((r=in.getNextRecord()) != null) {      out.add(r);    }    out.verify(true,true);  } else   if ("-v".equals(args[0])) {    String shpFile=args[1];    ShapeFile s=new ShapeFile(shpFile);    s.verify(true,true);  } else {    Debug.output("Usage:");    Debug.output("ShapeFile file.shp  -- displays information about file.shp");    Debug.output("ShapeFile -a dest.shp src.shp  -- appends records from src.shp to dest.shp");    Debug.output("ShapeFile -v file.shp  -- verifies file.shp");  }}  }
class C{  public void updatePercentChanged(CandleItem candleItem){  ZonedDateTime prevDay=TradingCalendar.getPrevTradingDay(candleItem.getPeriod().getStart());  ZonedDateTime prevDayEnd=TradingCalendar.getDateAtTime(prevDay,this.getEndTime());  prevDayEnd=prevDayEnd.minusSeconds(1);  ZonedDateTime prevDayStart=TradingCalendar.getDateAtTime(prevDay,this.getStartTime());  ZonedDateTime todayOpen=TradingCalendar.getDateAtTime(candleItem.getPeriod().getStart(),this.getStartTime());  int index=this.indexOf(todayOpen);  if (index > -1) {    CandleItem openCandleItem=(CandleItem)this.getDataItem(index);    try {      percentChangeFromOpen.setValue(new Percent((candleItem.getClose() - openCandleItem.getOpen()) / openCandleItem.getOpen()));    } catch (    ValueTypeException ex) {      _log.error("Could not set ValueType Msg: " + ex.getMessage(),ex);    }    if (candleItem.getPeriod().getStart().isAfter(prevDayEnd)) {      if (this.indexOf(prevDayStart) > -1 && this.indexOf(prevDayEnd) > -1) {        Candle prevDayCandle=this.getBar(prevDayStart,prevDayEnd);        try {          percentChangeFromClose.setValue(new Percent((candleItem.getClose() - prevDayCandle.getClose().doubleValue()) / prevDayCandle.getClose().doubleValue()));        } catch (        ValueTypeException ex) {          _log.error("Could not set ValueType Msg: " + ex.getMessage(),ex);        }      }    }  }}  }
class C{  public int rowAtPoint(Point point){  CodeDisplayCoordinate coordinate=new CodeDisplayCoordinate(0,0,0,0);  fillCoordinateFromXY(point.x,point.y,coordinate);  return coordinate.getRow();}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  private void scanCharacter() throws IOException {  token=CHARVAL;switch (ch=in.read()) {case '\\':    int c=scanEscapeChar();  charValue=(char)((c >= 0) ? c : 0);break;case '\'':charValue=0;env.error(pos,"invalid.char.constant");ch=in.read();while (ch == '\'') {ch=in.read();}return;case '\r':case '\n':charValue=0;env.error(pos,"invalid.char.constant");return;default :charValue=(char)ch;ch=in.read();break;}if (ch == '\'') {ch=in.read();} else {env.error(pos,"invalid.char.constant");while (true) {switch (ch) {case '\'':ch=in.read();return;case ';':case '\n':case EOF:return;default :ch=in.read();}}}}  }
class C{  public List<Note> searchNotes(String account,String rootFolder,String keyWord,NoteSorting noteSorting){  List<Note> notes=new ArrayList<Note>();  StringBuilder query=new StringBuilder(DatabaseHelper.COLUMN_ACCOUNT + " = '" + account+ "' AND ");  query.append(DatabaseHelper.COLUMN_ROOT_FOLDER + " = '" + rootFolder+ "' AND ");  query.append(DatabaseHelper.COLUMN_DISCRIMINATOR + " = '" + DatabaseHelper.DESCRIMINATOR_NOTE+ "' AND ");  query.append(" " + DatabaseHelper.COLUMN_SUMMARY + " like '%"+ keyWord.trim()+ "%' COLLATE NOCASE ");  Cursor cursor=ConnectionManager.getDatabase(context).query(DatabaseHelper.TABLE_NOTES,allColumns,query.toString(),null,null,null,noteSorting.getColumnName() + " " + noteSorting.getDirection());  while (cursor.moveToNext()) {    Note note=cursorToNoteWithoutDescription(account,rootFolder,cursor);    notes.add(note);  }  cursor.close();  return notes;}  }
class C{  private OutfitColor(){}  }
class C{  public void leftClickBlock(GlowPlayer player,GlowBlock block,ItemStack holding){}  }
class C{  public void skip(int n) throws IOException, EOFException {  while (this.len > 0 && this.curr + n >= this.len) {    n-=(this.len - this.curr);    this.len=this.in.read(this.buff);    Assert.check(this.len != 0,EC.SYSTEM_STREAM_EMPTY);    this.curr=0;  }  if (n > 0 && this.len < 0)   throw new EOFException();  this.curr+=n;  Assert.check(this.len < 0 || this.curr < this.len,EC.SYSTEM_INDEX_ERROR);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.204 -0400",hash_original_method="ED944854A8F02AEADF4CC8C107FECB1E",hash_generated_method="B484DF978297E9AEF193B14D747C1808") public static boolean isFileNewer(File file,Date date){  if (date == null) {    throw new IllegalArgumentException("No specified date");  }  return isFileNewer(file,date.getTime());}  }
class C{  private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException {  namespace=stream.readUTF();  entityContextState=(EntityContextState)stream.readObject();  env=EnvironmentAccessor.get();  Objects.requireNonNull(env,"Could not get environment");  boolean allowGarbageCollection=stream.readBoolean();  init(allowGarbageCollection);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public PointerIcon load(Context context){  if (context == null) {    throw new IllegalArgumentException("context must not be null");  }  if (mSystemIconResourceId == 0 || mBitmap != null) {    return this;  }  PointerIcon result=new PointerIcon(mStyle);  result.mSystemIconResourceId=mSystemIconResourceId;  result.loadResource(context.getResources(),mSystemIconResourceId);  return result;}  }
class C{  String internalsprintf(Object s){  String s2="";  if (conversionCharacter == 's' || conversionCharacter == 'S')   s2=printSFormat(s.toString()); else   throw new IllegalArgumentException("Cannot format a String with a format using" + " a " + conversionCharacter + " conversion character.");  return s2;}  }
class C{  public void assertGrabPoints(){  int rt=getGraphic().getRenderType();  if (rt != lastRenderType) {    clearGrabPoints();    lastRenderType=rt;  }  if (gpc == null) {    gpc=new GrabPoint(-1,-1);    gPoints[CENTER_POINT_INDEX]=gpc;  }  if (gpo == null) {    gpo=new OffsetGrabPoint(-1,-1);    gPoints[OFFSET_POINT_INDEX]=gpo;    gpo.addGrabPoint(gpc);  }}  }
class C{  public static void displayError(JDialog dialog,Throwable error){  DError dError=new DError(dialog,error);  dError.setLocationRelativeTo(dialog);  dError.setVisible(true);}  }
class C{  public static boolean matchesClassName(MethodFilter[] filters,String className){  for (  MethodFilter filter : filters) {    if (filter.matchesClassName(className)) {      return true;    }  }  return false;}  }
class C{  public void testDivideRoundHalfEvenPos1(){  String a="92948782094488478231212478987482988798104576347813847567949855464535634534563456";  int aScale=-24;  String b="74723342238476237823754692930187879183479";  int bScale=13;  String c="1.2439055763572051712242335979928354832010167729111113605E+76";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_EVEN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static double footprintInMapper(long m1_dim1,long m1_dim2,long m2_dim1,long m2_dim2,long m1_rpb,long m1_cpb){  double footprint=0;  footprint+=OptimizerUtils.estimateSize(Math.min(m1_dim1,m1_rpb),Math.min(m1_dim2,m1_cpb));  footprint+=OptimizerUtils.estimateSize(m2_dim1,m2_dim2);  footprint+=OptimizerUtils.estimateSize(Math.min(m1_dim1,m1_rpb),Math.min(m1_dim2 + m2_dim2,m1_cpb));  return footprint;}  }
class C{  @Override public void queueTailInsert(String queueName,Address value){  if (Trace.isEnabled(Item.QUEUE)) {    Clock.stop();    Trace.trace(Item.QUEUE,"tail insert %s to %s",value,queueName);    Clock.start();  }}  }
class C{  public int executeUpdate(String sql) throws SQLException {  return Util.truncateAndConvertToInt(executeLargeUpdate(sql));}  }
class C{  public SkuWarehouseServiceImpl(final GenericDAO<SkuWarehouse,Long> genericDao){  super(genericDao);}  }
class C{  private void switchCurrentBuffer(){  currBuf=currBufIdx == file.numBuffers() ? file.addBuffer() : file.getBuffer(currBufIdx);  bufPosition=0;  bufStart=(long)BUFFER_SIZE * (long)currBufIdx;  bufLength=BUFFER_SIZE;}  }
class C{  public Bits orSet(Bits xs){  Assert.check(currentState != BitsState.UNKNOWN);  sizeTo(xs.bits.length);  for (int i=0; i < xs.bits.length; i++) {    bits[i]=bits[i] | xs.bits[i];  }  currentState=BitsState.NORMAL;  return this;}  }
class C{  public final void mul(double scalar,Matrix3d m1){  this.m00=scalar * m1.m00;  this.m01=scalar * m1.m01;  this.m02=scalar * m1.m02;  this.m10=scalar * m1.m10;  this.m11=scalar * m1.m11;  this.m12=scalar * m1.m12;  this.m20=scalar * m1.m20;  this.m21=scalar * m1.m21;  this.m22=scalar * m1.m22;}  }
class C{  ChildDrawable addLayer(Drawable dr,int[] themeAttrs,int id,int left,int top,int right,int bottom){  final ChildDrawable childDrawable=createLayer(dr);  childDrawable.mId=id;  childDrawable.mThemeAttrs=themeAttrs;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT)   childDrawable.mDrawable.setAutoMirrored(isAutoMirrored());  childDrawable.mInsetL=left;  childDrawable.mInsetT=top;  childDrawable.mInsetR=right;  childDrawable.mInsetB=bottom;  addLayer(childDrawable);  mLayerState.mChildrenChangingConfigurations|=dr.getChangingConfigurations();  dr.setCallback(this);  return childDrawable;}  }
class C{  public static File downloadFile(File parent,String prefix,String suffix,URL url) throws IOException {  File file=File.createTempFile(prefix,suffix,parent);  URLConnection conn=null;  final String protocol=url.getProtocol().toLowerCase(Locale.ENGLISH);  try {    conn=url.openConnection();    if ("http".equals(protocol) || "https".equals(protocol)) {      HttpURLConnection http=(HttpURLConnection)conn;      http.setInstanceFollowRedirects(false);      http.setRequestMethod(HttpMethod.GET);    }    try (InputStream input=conn.getInputStream();FileOutputStream fOutput=new FileOutputStream(file)){      byte[] b=new byte[8192];      int r;      while ((r=input.read(b)) != -1) {        fOutput.write(b,0,r);      }    }   }  finally {    if (conn != null && ("http".equals(protocol) || "https".equals(protocol))) {      ((HttpURLConnection)conn).disconnect();    }  }  return file;}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  public static int[] computeUpdatedPixels(Rectangle sourceRegion,Point destinationOffset,int dstMinX,int dstMinY,int dstMaxX,int dstMaxY,int sourceXSubsampling,int sourceYSubsampling,int passXStart,int passYStart,int passWidth,int passHeight,int passPeriodX,int passPeriodY){  int[] vals=new int[6];  computeUpdatedPixels(sourceRegion.x,sourceRegion.width,destinationOffset.x,dstMinX,dstMaxX,sourceXSubsampling,passXStart,passWidth,passPeriodX,vals,0);  computeUpdatedPixels(sourceRegion.y,sourceRegion.height,destinationOffset.y,dstMinY,dstMaxY,sourceYSubsampling,passYStart,passHeight,passPeriodY,vals,1);  return vals;}  }
class C{  @Subscribe public void onDateClick(Event.OnDateClickEvent event){  if (listener != null)   listener.onDateClick(event.getDateTime());}  }
class C{  private void addIdIndexAndType(String id,String index,String type,Float score,Map<String,HighlightField> highlights,Heading head,List<Object> row){  if (id != null && head.hasAllCols() || head.hasLabel(Heading.ID)) {    row.set(head.getColumnByLabel(Heading.ID).getIndex(),id);  }  if (index != null && head.hasAllCols() || head.hasLabel(Heading.INDEX)) {    row.set(head.getColumnByLabel(Heading.INDEX).getIndex(),index);  }  if (type != null && head.hasAllCols() || head.hasLabel(Heading.TYPE)) {    row.set(head.getColumnByLabel(Heading.TYPE).getIndex(),type);  }  if (score != null && head.hasLabel(Heading.SCORE)) {    row.set(head.getColumnByLabel(Heading.SCORE).getIndex(),score);  }  if (highlights != null) {    for (    String field : highlights.keySet()) {      Column col=head.getColumnByNameAndOp(field,Operation.HIGHLIGHT);      if (col == null)       continue;      List<Object> fragments=new ArrayList<Object>();      for (      Text fragment : highlights.get(field).getFragments())       fragments.add(fragment.toString());      row.set(col.getIndex(),new ESArray(fragments));    }  }}  }
class C{  public void addFileset(FileSet arg){  fileSets.add(arg);}  }
class C{  protected V create(K key){  return null;}  }
class C{  public TIntMap(final Functionality<T> keyFunc,final int expectedSize){  this.keyFunc=keyFunc;  this.mapType=MapType.HASH_TABLE;  this.locked=false;  this.num=0;  allocate(getCapacity(expectedSize,false));  this.numCollisions=0;}  }
class C{  public DefaultStateMachineContext(S state,E event,Map<String,Object> eventHeaders,ExtendedState extendedState,Map<S,S> historyStates,String id){  this(new ArrayList<StateMachineContext<S,E>>(),state,event,eventHeaders,extendedState,historyStates,id);}  }
class C{  @Override public final double[] weights(Instance instance){  double[] weights;  int i;  if (instance.isMissing(m_attIndex)) {    weights=new double[m_numSubsets];    for (i=0; i < m_numSubsets; i++) {      weights[i]=m_distribution.perBag(i) / m_distribution.total();    }    return weights;  } else {    return null;  }}  }
class C{  public Constraints(){}  }
class C{  private static int writePackedInt(final OutputStream out,final int value) throws IOException {  final byte[] packedInt=JBBPUtils.packInt(value);  out.write(packedInt);  return packedInt.length;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == MappedElement.class) {switch (baseFeatureID) {case SexecPackage.MAPPED_ELEMENT__SOURCE_ELEMENT:      return SexecPackage.EXECUTION_FLOW__SOURCE_ELEMENT;default :    return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {case BasePackage.NAMED_ELEMENT__NAME:  return SexecPackage.EXECUTION_FLOW__NAME;default :return -1;}}if (baseClass == ExecutionScope.class) {switch (baseFeatureID) {case SexecPackage.EXECUTION_SCOPE__STATE_VECTOR:return SexecPackage.EXECUTION_FLOW__STATE_VECTOR;case SexecPackage.EXECUTION_SCOPE__SUB_SCOPES:return SexecPackage.EXECUTION_FLOW__SUB_SCOPES;case SexecPackage.EXECUTION_SCOPE__SUPER_SCOPE:return SexecPackage.EXECUTION_FLOW__SUPER_SCOPE;case SexecPackage.EXECUTION_SCOPE__ENTER_SEQUENCES:return SexecPackage.EXECUTION_FLOW__ENTER_SEQUENCES;case SexecPackage.EXECUTION_SCOPE__EXIT_SEQUENCE:return SexecPackage.EXECUTION_FLOW__EXIT_SEQUENCE;case SexecPackage.EXECUTION_SCOPE__INIT_SEQUENCE:return SexecPackage.EXECUTION_FLOW__INIT_SEQUENCE;default :return -1;}}if (baseClass == ExecutionNode.class) {switch (baseFeatureID) {case SexecPackage.EXECUTION_NODE__REACTIONS:return SexecPackage.EXECUTION_FLOW__REACTIONS;case SexecPackage.EXECUTION_NODE__SIMPLE_NAME:return SexecPackage.EXECUTION_FLOW__SIMPLE_NAME;case SexecPackage.EXECUTION_NODE__REACT_SEQUENCE:return SexecPackage.EXECUTION_FLOW__REACT_SEQUENCE;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  boolean readModule(int row,int column,int numRows,int numColumns){  if (row < 0) {    row+=numRows;    column+=4 - ((numRows + 4) & 0x07);  }  if (column < 0) {    column+=numColumns;    row+=4 - ((numColumns + 4) & 0x07);  }  readMappingMatrix.set(column,row);  return mappingBitMatrix.get(column,row);}  }
class C{  private void buildCreatureTables(){  classToCreature=new LowerCaseMap<DefaultCreature>();  final CreatureGroupsXMLLoader loader=new CreatureGroupsXMLLoader("/data/conf/creatures.xml");  final List<DefaultCreature> creatures=loader.load();  for (  final DefaultCreature creature : creatures) {    final String id=creature.getTileId();    final String clazz=creature.getCreatureName();    if (classToCreature.containsKey(clazz)) {      LOGGER.warn("Repeated creature name: " + clazz);    }    if (!creature.verifyItems(this)) {      LOGGER.warn("Items dropped by creature name: " + clazz + " doesn't exists");    }    classToCreature.put(clazz,creature);    idToClass.put(id,clazz);    WordList.getInstance().registerName(creature.getCreatureName(),ExpressionType.SUBJECT);  }}  }
class C{  public void generateNonBooleanEqual(BlockScope currentScope,boolean valueRequired){  if (((this.left.implicitConversion & IMPLICIT_CONVERSION_MASK) >> 4) == T_int) {    Constant cst;    if ((cst=this.left.constant) != Constant.NotAConstant && cst.intValue() == 0) {      this.right.generateCode(currentScope,valueRequired);      return;    }    if ((cst=this.right.constant) != Constant.NotAConstant && cst.intValue() == 0) {      this.left.generateCode(currentScope,valueRequired);      return;    }  }  if (this.right instanceof NullLiteral) {    if (this.left instanceof NullLiteral) {    }    return;  } else   if (this.left instanceof NullLiteral) {    this.right.generateCode(currentScope,valueRequired);    return;  }  this.left.generateCode(currentScope,valueRequired);  this.right.generateCode(currentScope,valueRequired);}  }
class C{  public void testGet() throws Exception {  IgniteCache<Long,Long> cache=grid(0).cache(null);  for (long i=0; i < 100; i++)   cache.put(i,i);  for (long i=0; i < 100; i++)   assertEquals((Long)i,cache.get(i));  SqlQuery<Long,Long> qry=new SqlQuery<>(Long.class,"_val >= 90");  List<Cache.Entry<Long,Long>> res=cache.query(qry).getAll();  assertEquals(10,res.size());  for (  Cache.Entry<Long,Long> e : res) {    assertNotNull(e.getKey());    assertNotNull(e.getValue());  }}  }
class C{  public boolean recreateWorkspaceTable(SQLiteDatabase db){  db.beginTransaction();  try {    Cursor c=db.query(TABLE_WORKSPACE_SCREENS,new String[]{LauncherSettings.WorkspaceScreens._ID},null,null,null,null,LauncherSettings.WorkspaceScreens.SCREEN_RANK);    ArrayList<Long> sortedIDs=new ArrayList<Long>();    long maxId=0;    try {      while (c.moveToNext()) {        Long id=c.getLong(0);        if (!sortedIDs.contains(id)) {          sortedIDs.add(id);          maxId=Math.max(maxId,id);        }      }    }  finally {      c.close();    }    db.execSQL("DROP TABLE IF EXISTS " + TABLE_WORKSPACE_SCREENS);    addWorkspacesTable(db,false);    int total=sortedIDs.size();    for (int i=0; i < total; i++) {      ContentValues values=new ContentValues();      values.put(LauncherSettings.WorkspaceScreens._ID,sortedIDs.get(i));      values.put(LauncherSettings.WorkspaceScreens.SCREEN_RANK,i);      addModifiedTime(values);      db.insertOrThrow(TABLE_WORKSPACE_SCREENS,null,values);    }    db.setTransactionSuccessful();    mMaxScreenId=maxId;  } catch (  SQLException ex) {    Log.e(TAG,ex.getMessage(),ex);    return false;  } finally {    db.endTransaction();  }  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_numExpr_4_();}  }
class C{  public boolean isOnPostback(){  return (Boolean)getStateHelper().eval(PropertyKeys.onPostback,false);}  }
class C{  public Yaml(Representer representer){  this(new Constructor(),representer);}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public T3Display(final int pageNumber,final boolean addBackground,final int defaultSize,final ObjectStore newObjectRef){  this.rawPageNumber=pageNumber;  this.objectStoreRef=newObjectRef;  this.addBackground=addBackground;  setupArrays(defaultSize);  type=CREATE_T3;}  }
class C{  public NBTTagCompound loadFile(File saveDirectory,String filename){  return loadFile(new File(saveDirectory,filename + ".dat"));}  }
class C{  public void debugPrintObservations(){  System.out.println("Var1\tVar2\tCond\tc(1,2,c)\tc(1,c)\tc(2,c)\tc(c)");  for (int condVal=0; condVal < condBase; condVal++) {    for (int var2Val=0; var2Val < base2; var2Val++) {      for (int var1Val=0; var1Val < base1; var1Val++) {        System.out.println(var1Val + "\t" + var2Val+ "\t"+ condVal+ "\t"+ firstSecondCondCount[var1Val][var2Val][condVal]+ "\t\t"+ firstCondCount[var1Val][condVal]+ "\t"+ secondCondCount[var2Val][condVal]+ "\t"+ condCount[condVal]);      }    }  }}  }
class C{  public static PeriodRange create(Date dateInSomePeriod,int numPeriods) throws AdeException {  final Date somePeriodStart=PeriodUtils.getContainingPeriodStart(dateInSomePeriod);  if (numPeriods > 0) {    final Date lastPeriodStart=PeriodUtils.getShiftedPeriod(somePeriodStart,numPeriods - 1);    return new PeriodRange(somePeriodStart,lastPeriodStart);  }  if (numPeriods < 0) {    final Date firstPeriodStart=PeriodUtils.getShiftedPeriod(somePeriodStart,numPeriods + 1);    return new PeriodRange(firstPeriodStart,somePeriodStart);  }  throw new IllegalArgumentException("The input number of periods must differ from zero!");}  }
class C{  public void initializeGlobalComment(final List<IComment> comments){  m_edge.initializeGlobalComment(comments);}  }
class C{  public int requestTimeout(){  return reader.getInteger(REQUEST_TIMEOUT,DEFAULT_REQUEST_TIMEOUT);}  }
class C{  private void jbInit() throws Exception {  scrollPane.setPreferredSize(new Dimension(500,500));  this.getContentPane().add(scrollPane,BorderLayout.CENTER);  scrollPane.getViewport().add(editorPane,null);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void flipAttributeUsed(Attribute attribute){  setWeight(attribute,isAttributeUsed(attribute) ? 0.0d : 1.0d);}  }
class C{  public boolean isSrcClass(String clz){  if (Config.v().apk != null) {    if (isLibClass(clz))     return false;  }  return srcClasses.contains(clz);}  }
class C{  public boolean isEmpty(){  return stack.isEmpty();}  }
class C{  @Override protected void createEditPolicies(){  final boolean editEnabled=isEditEnabled();  if (editEnabled) {    installEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE,new EntityNodeEditPolicy());    installEditPolicy(EditPolicy.CONTAINER_ROLE,new EntityContainerEditPolicy());    installEditPolicy(EditPolicy.COMPONENT_ROLE,new EntityEditPolicy());  }}  }
class C{  public StrokeShapePainter(Shape shape){  if (shape == null) {    throw new IllegalArgumentException();  }  this.shape=shape;}  }
class C{  @Override public void keyPressed(final String c){  if (c.equals(event)) {    executeEvent(-1,-1);  }}  }
class C{  public Label(String text,Image icon,String uiid){  this(text,uiid);  this.icon=icon;  if (icon != null && icon.requiresDrawImage()) {    legacyRenderer=true;  }  endsWith3Points=UIManager.getInstance().getLookAndFeel().isDefaultEndsWith3Points();}  }
class C{  public FileCommandInfo(String command,int result,String parameters){  this(false,-2,command,result,parameters);}  }
class C{  public CGPoint applyTransform(CGPoint src){  CGPoint dst=CGPoint.make(0,0);  float x=src.x;  float y=src.y;  dst.x=(float)(x * m00 + y * m01 + m02);  dst.y=(float)(x * m10 + y * m11 + m12);  return dst;}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  static int differenceEncoded(String es1,String es2){  if (es1 == null || es2 == null) {    return 0;  }  int lengthToMatch=Math.min(es1.length(),es2.length());  int diff=0;  for (int i=0; i < lengthToMatch; i++) {    if (es1.charAt(i) == es2.charAt(i)) {      diff++;    }  }  return diff;}  }
class C{  public void createROCPlotDialog(ROCData data){  ROCChartPlotter plotter=new ROCChartPlotter();  plotter.addROCData("ROC",data);  JDialog dialog=new JDialog();  dialog.setTitle("ROC Plot");  dialog.add(plotter);  dialog.setSize(500,500);  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);}  }
class C{  private void reduce(CssTokenType type){  StringBuilder sb=new StringBuilder();  for (  Token<CssTokenType> t : pending) {    sb.append(t.text);  }  FilePosition fp=FilePosition.span(pending.getFirst().pos,pending.getLast().pos);  pending.clear();  pending.add(Token.instance(sb.toString(),type,fp));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @SuppressWarnings("MethodMayBeStatic") @NotNull public LogicalPosition calculateDescriptionStartPosition(@NotNull PsiFile psiFile,@NotNull Collection<JavadocParameterInfo> data,@NotNull JavadocHelper.JavadocParameterInfo anchor){  int descriptionStartColumn=-1;  int parameterNameEndColumn=-1;  for (  JavadocHelper.JavadocParameterInfo parameterInfo : data) {    parameterNameEndColumn=Math.max(parameterNameEndColumn,parameterInfo.parameterNameEndPosition.column);    if (parameterInfo.parameterDescriptionStartPosition != null) {      descriptionStartColumn=Math.max(descriptionStartColumn,parameterInfo.parameterDescriptionStartPosition.column);    }  }  final CodeStyleSettings codeStyleSettings=CodeStyleSettingsManager.getInstance(psiFile.getProject()).getCurrentSettings();  final int indentSize=codeStyleSettings.getIndentSize(psiFile.getFileType());  int column;  if (codeStyleSettings.JD_ALIGN_PARAM_COMMENTS) {    column=Math.max(descriptionStartColumn,parameterNameEndColumn);    if (column <= parameterNameEndColumn) {      column=parameterNameEndColumn + indentSize;    }  } else {    column=anchor.parameterNameEndPosition.column + indentSize;  }  return new LogicalPosition(anchor.parameterNameEndPosition.line,column);}  }
class C{  final void chompNewline() throws IOException {  if ((pos != end || fillBuf() != -1) && buf[pos] == '\n') {    ++pos;  }}  }
class C{  public void testQueueRecoverMarksMessageRedelivered() throws JMSException {  connection.start();  Session session=connection.createSession(false,Session.CLIENT_ACKNOWLEDGE);  Queue queue=session.createQueue("queue-" + getName());  MessageProducer producer=createProducer(session,queue);  producer.send(createTextMessage(session));  MessageConsumer consumer=session.createConsumer(queue);  Message msg=consumer.receive(1000);  assertNotNull(msg);  assertFalse("Message should not be redelivered.",msg.getJMSRedelivered());  session.recover();  msg=consumer.receive(2000);  assertNotNull(msg);  assertTrue("Message should be redelivered.",msg.getJMSRedelivered());  msg.acknowledge();  session.close();}  }
class C{  public static SourceViewer createOutputViewer(Composite parent,int flags){  SourceViewer sourceViewer=new SourceViewer(parent,null,null,false,flags);  SourceViewerConfiguration configuration=new SourceViewerConfiguration();  sourceViewer.configure(configuration);  sourceViewer.setTabsToSpacesConverter(getTabToSpacesConverter());  StyledText control=sourceViewer.getTextWidget();  control.setFont(TLCUIActivator.getDefault().getOutputFont());  control.setEditable(false);  return sourceViewer;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:55.579 -0500",hash_original_method="205FEBDC4595F3CAF3DB8C26A01A3B21",hash_generated_method="A183CBD9E1CF30868F2BB1F12CE4231F") private boolean checkAttribute(String servAlg,String attribute,String val){  String attributeValue=getPropertyIgnoreCase(servAlg + ' ' + attribute);  if (attributeValue != null) {    if (attribute.equalsIgnoreCase("KeySize")) {      if (Integer.parseInt(attributeValue) >= Integer.parseInt(val)) {        return true;      }    } else {      if (attributeValue.equalsIgnoreCase(val)) {        return true;      }    }  }  return false;}  }
class C{  @Override public void selectionChanged(IWorkbenchPart part,ISelection input){  if (input instanceof IStructuredSelection) {    IStructuredSelection selection=(IStructuredSelection)input;    if (selection.size() < 2) {      setEnabled(false);      return;    }    String kapitel=null;    for (Iterator iter=selection.iterator(); iter.hasNext(); ) {      Object o=iter.next();      if (o instanceof BausteinUmsetzung) {        BausteinUmsetzung bst=(BausteinUmsetzung)o;        if (kapitel == null) {          kapitel=bst.getKapitel();        } else {          if (!bst.getKapitel().equals(kapitel)) {            setEnabled(false);            return;          }        }      } else {        setEnabled(false);        return;      }    }    if (checkRights()) {      setEnabled(true);    }    return;  }  setEnabled(false);}  }
class C{  public static String rate2speed(double rate){  return NUMBER_FORMAT0.format(rate) + " " + GENERAL_UNIT_KBPSEC;}  }
class C{  public void writeMapEnd() throws IOException {  print("</map>");}  }
class C{  public static boolean isReservedMACAddress(String s){  if (!looksLikeBluetoothAddress(s)) {    return false;  }  s=s.replace(":","-");  s=s.toUpperCase();  if (Pattern.matches("^0[0-3]-00-5E.*",s)) {    return true;  } else   if (Pattern.matches("^FF-FF-FF-FF-FF-FF$",s)) {    return true;  }  return false;}  }
class C{  public static Rectangle2D convertEnableBackground(Element e){  Value v=getComputedStyle(e,SVGCSSEngine.ENABLE_BACKGROUND_INDEX);  if (v.getCssValueType() != CSSValue.CSS_VALUE_LIST) {    return null;  }  ListValue lv=(ListValue)v;  int length=lv.getLength();switch (length) {case 1:    return CompositeGraphicsNode.VIEWPORT;case 5:  float x=lv.item(1).getFloatValue();float y=lv.item(2).getFloatValue();float w=lv.item(3).getFloatValue();float h=lv.item(4).getFloatValue();return new Rectangle2D.Float(x,y,w,h);default :throw new IllegalStateException("Unexpected length:" + length);}}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatablePreserveAspectRatioValue res;  if (result == null) {    res=new AnimatablePreserveAspectRatioValue(target);  } else {    res=(AnimatablePreserveAspectRatioValue)result;  }  short newAlign, newMeetOrSlice;  if (to != null && interpolation >= 0.5) {    AnimatablePreserveAspectRatioValue toValue=(AnimatablePreserveAspectRatioValue)to;    newAlign=toValue.align;    newMeetOrSlice=toValue.meetOrSlice;  } else {    newAlign=align;    newMeetOrSlice=meetOrSlice;  }  if (res.align != newAlign || res.meetOrSlice != newMeetOrSlice) {    res.align=align;    res.meetOrSlice=meetOrSlice;    res.hasChanged=true;  }  return res;}  }
class C{  private void purgeOrphans(){  m_source.temporarilyDisconnectSource();  resetDBObjects(DBObject_Table.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"purgeOrphans",new Object[]{m_objectTypes,m_direction});  m_counterPrg=new Integer(0);  m_totalPrg=new Integer(0);  Savepoint sp=m_target.setSavepoint("purge orphans");  Vector<String> v=new Vector<String>(m_sourceMap.keySet());  java.util.Collections.sort(v);  for (Iterator<String> it=v.iterator(); it.hasNext(); ) {    String key=it.next();    DBObject obj=m_sourceMap.get(key);    purgeOrphan(obj,false);  }  v=new Vector<String>(m_targetMap.keySet());  java.util.Collections.sort(v);  for (Iterator<String> it=v.iterator(); it.hasNext(); ) {    String key=it.next();    DBObject obj=m_targetMap.get(key);    if (obj.getCustomizationLevel() > s_parameters.CUSTOMNONE)     purgeOrphan(obj,true);  }  m_target.releaseSavepoint(sp);  logResults();  m_source.reconnectSource();}  }
class C{  protected void createPanel(){  JScrollPane pane;  setLayout(new BorderLayout());  menuItemMean=new JMenuItem("Get mean...");  menuItemMean.addActionListener(this);  menuItemSetAllValues=new JMenuItem("Set all values to...");  menuItemSetAllValues.addActionListener(this);  menuItemSetMissingValues=new JMenuItem("Set missing values to...");  menuItemSetMissingValues.addActionListener(this);  menuItemReplaceValues=new JMenuItem("Replace values with...");  menuItemReplaceValues.addActionListener(this);  menuItemRenameAttribute=new JMenuItem("Rename attribute...");  menuItemRenameAttribute.addActionListener(this);  menuItemAttributeAsClass=new JMenuItem("Attribute as class");  menuItemAttributeAsClass.addActionListener(this);  menuItemDeleteAttribute=new JMenuItem("Delete attribute");  menuItemDeleteAttribute.addActionListener(this);  menuItemDeleteAttributes=new JMenuItem("Delete attributes...");  menuItemDeleteAttributes.addActionListener(this);  menuItemSortInstances=new JMenuItem("Sort data (ascending)");  menuItemSortInstances.addActionListener(this);  menuItemOptimalColWidth=new JMenuItem("Optimal column width (current)");  menuItemOptimalColWidth.addActionListener(this);  menuItemOptimalColWidths=new JMenuItem("Optimal column width (all)");  menuItemOptimalColWidths.addActionListener(this);  menuItemUndo=new JMenuItem("Undo");  menuItemUndo.addActionListener(this);  menuItemCopy=new JMenuItem("Copy");  menuItemCopy.addActionListener(this);  menuItemSearch=new JMenuItem("Search...");  menuItemSearch.addActionListener(this);  menuItemClearSearch=new JMenuItem("Clear search");  menuItemClearSearch.addActionListener(this);  menuItemDeleteSelectedInstance=new JMenuItem("Delete selected instance");  menuItemDeleteSelectedInstance.addActionListener(this);  menuItemDeleteAllSelectedInstances=new JMenuItem("Delete ALL selected instances");  menuItemDeleteAllSelectedInstances.addActionListener(this);  m_TableArff=new ArffTable();  m_TableArff.setToolTipText("Right click (or left+alt) for context menu");  m_TableArff.getTableHeader().addMouseListener(this);  m_TableArff.getTableHeader().setToolTipText("<html><b>Sort view:</b> left click = ascending / Shift + left click = descending<br><b>Menu:</b> right click (or left+alt)</html>");  m_TableArff.getTableHeader().setDefaultRenderer(new ArffTableCellRenderer());  m_TableArff.addChangeListener(this);  m_TableArff.addMouseListener(this);  pane=new JScrollPane(m_TableArff);  add(pane,BorderLayout.CENTER);  m_LabelName=new JLabel();  add(m_LabelName,BorderLayout.NORTH);}  }
class C{  public Object init(InternalContextAdapter context,Object data) throws Exception {  super.init(context,data);  paramCount=jjtGetNumChildren() - 1;  return data;}  }
class C{  public void onNotificationReceived(SipRequest notify) throws PayloadException, ContactManagerException {  try {    boolean logActivated=logger.isActivated();    if (logActivated) {      logger.debug("Anonymous fetch notification received");    }    byte[] content=notify.getContentBytes();    if (content != null) {      if (logActivated) {        logger.debug("Anonymous fetch notification with PIDF document");      }      InputSource pidfInput=new InputSource(new ByteArrayInputStream(content));      PidfParser pidfParser=new PidfParser(pidfInput);      PidfDocument presence=pidfParser.getPresence();      if (presence == null) {        return;      }      Capabilities.CapabilitiesBuilder capaBuilder=new Capabilities.CapabilitiesBuilder();      capaBuilder.setPresenceDiscovery(true);      String entity=presence.getEntity();      PhoneNumber validPhoneNumber=ContactUtil.getValidPhoneNumberFromUri(entity);      if (validPhoneNumber == null) {        if (logActivated) {          logger.error(new StringBuilder("Discard XML notification: bad entity '").append(entity).append("'").toString());        }        return;      }      ContactId contact=ContactUtil.createContactIdFromValidatedData(validPhoneNumber);      for (      Tuple tuple : presence.getTuplesList()) {        boolean state=false;        if (PresenceInfo.ONLINE.equals(tuple.getStatus().getBasic().getValue())) {          state=true;        }        String id=tuple.getService().getId();        if (PresenceUtils.FEATURE_RCS2_VIDEO_SHARE.equalsIgnoreCase(id)) {          capaBuilder.setVideoSharing(state);        } else         if (PresenceUtils.FEATURE_RCS2_IMAGE_SHARE.equalsIgnoreCase(id)) {          capaBuilder.setImageSharing(state);        } else         if (PresenceUtils.FEATURE_RCS2_FT.equalsIgnoreCase(id)) {          capaBuilder.setFileTransferMsrp(state);        } else         if (PresenceUtils.FEATURE_RCS2_CS_VIDEO.equalsIgnoreCase(id)) {          capaBuilder.setCsVideo(state);        } else         if (PresenceUtils.FEATURE_RCS2_CHAT.equalsIgnoreCase(id)) {          capaBuilder.setImSession(state);        }      }      Capabilities capabilities=capaBuilder.build();      mContactManager.setContactCapabilities(contact,capabilities,RcsStatus.RCS_CAPABLE,RegistrationState.UNKNOWN);      mImsModule.getCapabilityService().onReceivedCapabilities(contact,capabilities);    } else {      if (logActivated) {        logger.debug("Anonymous fetch notification is empty");      }      String sipAssertedId=SipUtils.getAssertedIdentity(notify);      PhoneNumber validPhoneNumber=ContactUtil.getValidPhoneNumberFromUri(sipAssertedId);      if (validPhoneNumber == null) {        if (logActivated) {          logger.error(new StringBuilder("Cannot process notification: invalid SIP id '").append(sipAssertedId).append("'").toString());        }        return;      }      ContactId contact=ContactUtil.createContactIdFromValidatedData(validPhoneNumber);      mContactManager.setContactCapabilities(contact,Capabilities.sDefaultCapabilities,RcsStatus.NO_INFO,RegistrationState.UNKNOWN);      mImsModule.getCapabilityService().onReceivedCapabilities(contact,Capabilities.sDefaultCapabilities);    }  } catch (  FileAccessException e) {    throw new PayloadException(new StringBuilder("Can't parse XML notification! CallId=").append(notify.getCallId()).toString(),e);  }}  }
class C{  protected void doSearchlight(){  if ((ce() == null) || (target == null)) {    throw new IllegalArgumentException("current searchlight parameters are invalid");  }  if (!SearchlightAttackAction.isPossible(clientgui.getClient().getGame(),cen,target,null)) {    return;  }  SearchlightAttackAction saa=new SearchlightAttackAction(cen,target.getTargetType(),target.getTargetId());  attacks.addElement(saa);  clientgui.getClient().getGame().addAction(saa);  clientgui.bv.addAttack(saa);  clientgui.minimap.drawMap();  updateTarget();}  }
class C{  private static boolean copyDir(Context context,File srcDir,File dstDir,Handler handler,long totalSize){  if (!ableToCreateDir(dstDir)) {    return false;  }  Queue<File> queue=new LinkedList<File>();  queue.offer(srcDir);  Queue<File> queueDst=new LinkedList<File>();  queueDst.offer(dstDir);  File files=null;  while (null != (files=queue.poll()) && null != (dstDir=queueDst.poll())) {    for (    File file : files.listFiles()) {      File dstFile=new File(dstDir,file.getName());      if (file.isDirectory()) {        if (!ableToCreateDir(dstFile))         return false;        queue.offer(file);        queueDst.offer(dstFile);      } else {        copyFile(context,file,dstFile,handler,totalSize);      }    }  }  return true;}  }
class C{  public WireServiceConnection(IServiceProperties serviceProperties) throws SQLException {  super(serviceProperties);}  }
class C{  @Override protected void onStopLoading(){  cancelLoad();}  }
class C{  public void createGraphic(GraphicAttributes ga){  init();  stateMachine.setUndefined();  int renderType=OMGraphic.RENDERTYPE_LATLON;  if (ga != null) {    renderType=ga.getRenderType();  }  if (Debug.debugging("eomc")) {    Debug.output("EditableOMRangeRings.createGraphic(): rendertype = " + renderType);  }  circle=new OMRangeRings(90f,-180f,0f);  if (ga != null) {    ga.setTo(circle,true);  }}  }
class C{  public boolean consumerHasPermission(long consumerId,String permissionType,String targetId){  Permission permission=permissionRepository.findTopByPermissionTypeAndTargetId(permissionType,targetId);  if (permission == null) {    return false;  }  List<ConsumerRole> consumerRoles=consumerRoleRepository.findByConsumerId(consumerId);  if (CollectionUtils.isEmpty(consumerRoles)) {    return false;  }  Set<Long> roleIds=FluentIterable.from(consumerRoles).transform(null).toSet();  List<RolePermission> rolePermissions=rolePermissionRepository.findByRoleIdIn(roleIds);  if (CollectionUtils.isEmpty(rolePermissions)) {    return false;  }  for (  RolePermission rolePermission : rolePermissions) {    if (rolePermission.getPermissionId() == permission.getId()) {      return true;    }  }  return false;}  }
class C{  @NotNull private static GrMethod prepareNewMethod(@NotNull GrCallExpression call,@NotNull GrMethod method,@Nullable GrExpression qualifier) throws IncorrectOperationException {  GroovyPsiElementFactory factory=GroovyPsiElementFactory.getInstance(method.getProject());  if (method instanceof GrReflectedMethod) {    method=((GrReflectedMethod)method).getBaseMethod();  }  GrMethod newMethod=factory.createMethodFromText(method.getText(),call);  if (qualifier != null) {    Collection<GroovyInlineMethodUtil.ReferenceExpressionInfo> infos=GroovyInlineMethodUtil.collectReferenceInfo(method);    GroovyInlineMethodUtil.addQualifiersToInnerReferences(newMethod,infos,qualifier);  }  ArrayList<PsiNamedElement> innerDefinitions=new ArrayList<PsiNamedElement>();  collectInnerDefinitions(newMethod.getBlock(),innerDefinitions);  for (  PsiNamedElement namedElement : innerDefinitions) {    String name=namedElement.getName();    if (name != null) {      String newName=qualifier instanceof GrReferenceExpression ? InlineMethodConflictSolver.suggestNewName(name,method,call,((GrReferenceExpression)qualifier).getReferenceName()) : InlineMethodConflictSolver.suggestNewName(name,method,call);      if (!newName.equals(namedElement.getName())) {        final Collection<PsiReference> refs=ReferencesSearch.search(namedElement).findAll();        for (        PsiReference ref : refs) {          PsiElement element=ref.getElement();          if (element instanceof GrReferenceExpression) {            GrExpression newExpr=factory.createExpressionFromText(newName);            ((GrReferenceExpression)element).replaceWithExpression(newExpr,false);          }        }        namedElement.setName(newName);      }    }  }  GroovyInlineMethodUtil.replaceParametersWithArguments(call,newMethod);  return newMethod;}  }
class C{  public static boolean isNameValid(String name){  if (name == null) {    throw new IllegalArgumentException("name must not be null!");  }  if ("".equals(name.trim())) {    return false;  }  for (  String forbiddenString : BLACKLISTED_STRINGS) {    if (name.contains(forbiddenString)) {      return false;    }  }  return true;}  }
class C{  public Object[] allKeys(){  int count=size();  ActionMap parent=getParent();  if (count == 0) {    if (parent != null) {      return parent.allKeys();    }    return keys();  }  if (parent == null) {    return keys();  }  Object[] keys=keys();  Object[] pKeys=parent.allKeys();  if (pKeys == null) {    return keys;  }  if (keys == null) {    return pKeys;  }  HashMap<Object,Object> keyMap=new HashMap<Object,Object>();  int counter;  for (counter=keys.length - 1; counter >= 0; counter--) {    keyMap.put(keys[counter],keys[counter]);  }  for (counter=pKeys.length - 1; counter >= 0; counter--) {    keyMap.put(pKeys[counter],pKeys[counter]);  }  return keyMap.keySet().toArray();}  }
class C{  @Override public String toString(){  StringBuilder ans=new StringBuilder();  for (int i=0; i < cms.length; i++) {    ans.append(cms[i]);    ans.append(" = ");    ans.append(counters[i]);    ans.append("\n");  }  return ans.toString();}  }
class C{  protected CharSequence convertSelectionToString(Object selectedItem){switch (mAutoCompleteMode) {case AUTOCOMPLETE_MODE_SINGLE:    return ((InternalAutoCompleteTextView)mInputView).superConvertSelectionToString(selectedItem);case AUTOCOMPLETE_MODE_MULTI:  return ((InternalMultiAutoCompleteTextView)mInputView).superConvertSelectionToString(selectedItem);default :return null;}}  }
class C{  public void send(MimeBodyPart message,MmsHeaders headers) throws MmsException, IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  Mm1Encoder.writeMessageToStream(baos,message,headers);  baos.close();  if (log_.isDebugEnabled()) {    String str=StringUtil.bytesToHexString(baos.toByteArray());    log_.debug("request [" + str + "]");  }  URL url=new URL(mmsProxyGatewayAddress_);  HttpURLConnection urlConn=(HttpURLConnection)url.openConnection();  urlConn.addRequestProperty("Content-Length","" + baos.size());  urlConn.addRequestProperty("Content-Type",CONTENT_TYPE_WAP_MMS_MESSAGE);  urlConn.setDoOutput(true);  urlConn.setDoInput(true);  urlConn.setAllowUserInteraction(false);  OutputStream out=urlConn.getOutputStream();  baos.writeTo(out);  out.flush();  out.close();  baos.reset();  baos=new ByteArrayOutputStream();  InputStream response=urlConn.getInputStream();  int responsecode=urlConn.getResponseCode();  log_.debug("HTTP response code : " + responsecode);  IOUtil.copy(response,baos);  baos.close();  if (log_.isDebugEnabled()) {    String str=StringUtil.bytesToHexString(baos.toByteArray());    log_.debug("response [" + str + "]");  }}  }
class C{  public void appendOnlyFirst(String s){  if (index == 0) {    builder.append(s);  }}  }
class C{  void addBodyAttributeValue(final BodyQName name,final String value){  attrs.put(name,value);}  }
class C{  public ScanQuery(@Nullable Integer part,@Nullable IgniteBiPredicate<K,V> filter){  setPartition(part);  setFilter(filter);}  }
class C{  public static boolean checkForMissingClasses(Package toLoad,PrintStream... progress){  boolean result=true;  Object doNotLoadIfClassNotInstantiable=toLoad.getPackageMetaDataElement("DoNotLoadIfClassNotPresent");  if (doNotLoadIfClassNotInstantiable != null && doNotLoadIfClassNotInstantiable.toString().length() > 0) {    StringTokenizer tok=new StringTokenizer(doNotLoadIfClassNotInstantiable.toString(),",");    while (tok.hasMoreTokens()) {      String nextT=tok.nextToken().trim();      try {        Class.forName(nextT);      } catch (      Exception ex) {        for (        PrintStream p : progress) {          p.println("[Weka] " + toLoad.getName() + " can't be loaded because "+ nextT+ " can't be instantiated.");        }        result=false;        break;      }    }  }  if (!result) {    Object doNotLoadMessage=toLoad.getPackageMetaDataElement("DoNotLoadIfClassNotPresentMessage");    if (doNotLoadMessage != null && doNotLoadMessage.toString().length() > 0) {      for (      PrintStream p : progress) {        String dnlM=doNotLoadMessage.toString();        try {          dnlM=Environment.getSystemWide().substitute(dnlM);        } catch (        Exception e) {        }        p.println("[Weka] " + dnlM);      }    }  }  return result;}  }
class C{  public Matrix3f rotationYXZ(float angleY,float angleX,float angleZ){  float cosY=(float)Math.cos(angleY);  float sinY=(float)Math.sin(angleY);  float cosX=(float)Math.cos(angleX);  float sinX=(float)Math.sin(angleX);  float cosZ=(float)Math.cos(angleZ);  float sinZ=(float)Math.sin(angleZ);  float m_sinY=-sinY;  float m_sinX=-sinX;  float m_sinZ=-sinZ;  float nm00=cosY;  float nm02=m_sinY;  float nm20=sinY;  float nm22=cosY;  float nm10=nm20 * sinX;  float nm11=cosX;  float nm12=nm22 * sinX;  m20=nm20 * cosX;  m21=m_sinX;  m22=nm22 * cosX;  m00=nm00 * cosZ + nm10 * sinZ;  m01=nm11 * sinZ;  m02=nm02 * cosZ + nm12 * sinZ;  m10=nm00 * m_sinZ + nm10 * cosZ;  m11=nm11 * cosZ;  m12=nm02 * m_sinZ + nm12 * cosZ;  return this;}  }
class C{  public void advance(){  pos+=2;}  }
class C{  public void putInt(String key,int value){  if (key != null && value > -1) {    mPreferences.edit().putInt(key,value).apply();  }}  }
class C{  public Object remove(Object obj){  throw new UnsupportedOperationException();}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  public void reset() throws IOException {  stream.reset();  framePos=markpos;  pushBackLen=markPushBackLen;  if (pushBackLen > 0) {    if (pushBackBuffer == null) {      pushBackBuffer=new byte[frameSize - 1];    }    System.arraycopy(markPushBackBuffer,0,pushBackBuffer,0,pushBackLen);  }}  }
class C{  public T caseConstraintExpr_(ConstraintExpr_ object){  return null;}  }
class C{  public static boolean exists(final String url){  return XAdES132.equals(url) || XAdES111.equals(url) || XAdES122.equals(url)|| XAdES.equals(url);}  }
class C{  @SuppressWarnings("unchecked") public Response onCommand(POP3Session session,Request request){  String parameters=request.getArgument();  List<MessageMetaData> uidList=(List<MessageMetaData>)session.getAttachment(POP3Session.UID_LIST,State.Transaction);  List<String> deletedUidList=(List<String>)session.getAttachment(POP3Session.DELETED_UID_LIST,State.Transaction);  if (session.getHandlerState() == POP3Session.TRANSACTION) {    POP3Response response=null;    if (parameters == null) {      long size=0;      int count=0;      List<MessageMetaData> validResults=new ArrayList<MessageMetaData>();      if (uidList.isEmpty() == false) {        for (        MessageMetaData data : uidList) {          if (deletedUidList.contains(data.getUid()) == false) {            size+=data.getSize();            count++;            validResults.add(data);          }        }      }      StringBuilder responseBuffer=new StringBuilder(32).append(count).append(" ").append(size);      response=new POP3Response(POP3Response.OK_RESPONSE,responseBuffer.toString());      count=0;      for (int i=0; i < validResults.size(); i++) {        responseBuffer=new StringBuilder(16).append(i + 1).append(" ").append(validResults.get(i).getSize());        response.appendLine(responseBuffer.toString());      }      response.appendLine(".");    } else {      int num=0;      try {        num=Integer.parseInt(parameters);        MessageMetaData data=MessageMetaDataUtils.getMetaData(session,num);        if (data == null) {          StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") does not exist.");          return new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());        }        if (deletedUidList.contains(data.getUid()) == false) {          StringBuilder responseBuffer=new StringBuilder(64).append(num).append(" ").append(data.getSize());          response=new POP3Response(POP3Response.OK_RESPONSE,responseBuffer.toString());        } else {          StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") already deleted.");          response=new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());        }      } catch (      IndexOutOfBoundsException npe) {        StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") does not exist.");        response=new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());      }catch (      NumberFormatException nfe) {        StringBuilder responseBuffer=new StringBuilder(64).append(parameters).append(" is not a valid number");        response=new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());      }    }    return response;  } else {    return POP3Response.ERR;  }}  }
class C{  private Optional<BlockPos> checkRitual(EntityPlayer player){  final World world=player.getEntityWorld();  final BlockPos playerPos=new BlockPos(player);  if (!(world.getBlockState(playerPos.down()).getBlock() == Blocks.OBSIDIAN))   return Optional.of(playerPos.down());  for (int x=-2; x <= 2; x++) {    for (int z=-2; z <= 2; z++) {      if (x == 0 && z == 0) {        continue;      }      final BlockPos pos=playerPos.add(x,0,z);      final Block block=world.getBlockState(pos).getBlock();      if (Math.abs(x) == 2 || Math.abs(z) == 2) {        if (block != Blocks.AIR)         return Optional.of(pos);      } else {        if (block != Blocks.REDSTONE_WIRE)         return Optional.of(pos);      }    }  }  return Optional.empty();}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  checkNotNull(e);  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    while (count == items.length) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    enqueue(e);    return true;  }  finally {    lock.unlock();  }}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  @Override protected void onSizeChanged(int w,int h,int oldw,int oldh){  if (w != oldw)   this.fitText(this.getText().toString(),w);}  }
class C{  public boolean handleMessage(Message m,Object o){  if (!super.handleMessage(m,o)) {    if (m.getType().equals(INFOMESSAGE)) {      System.out.println("Received: " + o);    } else     if (m.getType().equals(SUICIDEMESSAGE)) {      System.out.println("Received: " + o);      fireMessage(m.getSender(),INFOMESSAGE,"I'll be back.");      suicide();    } else     return false;  }  return true;}  }
class C{  public SendableVideoMessage.SendableVideoMessageBuilder video(InputFile video){  this.video=video;  return this;}  }
class C{  @Override public Instance nearestNeighbour(Instance target) throws Exception {  return kNearestNeighbours(target,1).instance(0);}  }
class C{  public static byte[] encode(byte[] data,int off,int length){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.encode(data,off,length,bOut);  } catch (  Exception e) {    throw new EncoderException("exception encoding Hex string: " + e.getMessage(),e);  }  return bOut.toByteArray();}  }
class C{  @Override public void onTcpReadable(PseudoTCPBase tcp){  assertEquals("Unexpected onTcpReadable",receiver,tcp);  try {    readData();  } catch (  IOException ex) {    throw new RuntimeException(ex);  }  int recvd=recv_stream.getBuffered();  int required=send_stream.length();  if (logger.isLoggable(Level.FINER)) {    logger.log(Level.FINER,"test - receivied: " + recvd + " required: "+ required);  }  if (recvd == required) {    if (receiver == getLocalTcp() && --iterationsRemaining == 0) {      close();      onTcpClosed(getRemoteTcp(),null);      return;    }    PseudoTCPBase tmp=receiver;    receiver=sender;    sender=tmp;    send_stream.resetReadPosition();    send_stream.consumeWriteBuffer(send_stream.getWriteRemaining());    recv_stream.resetWritePosition();    onTcpWriteable(sender);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.ACTION_REF__REF:    setRef((ActionDefinition)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public double transformLevel(double level,double minLevel,double maxLevel){  if (level <= minLevel)   return minLevel;  if (level >= maxLevel)   return maxLevel;  double interval=maxLevel - minLevel;  return filterLevel((level - minLevel) / interval) * interval + minLevel;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  DTMIterator nl=m_arg0.asIterator(xctxt,xctxt.getCurrentNode());  int i=nl.getLength();  nl.detach();  return new XNumber((double)i);}  }
class C{  public void write(OutputStream out) throws IOException {  DataOutputStream dos=new DataOutputStream(out);  attr.writeMain(dos);  Iterator<Map.Entry<String,Attributes>> it=entries.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<String,Attributes> e=it.next();    StringBuffer buffer=new StringBuffer("Name: ");    String value=e.getKey();    if (value != null) {      byte[] vb=value.getBytes("UTF8");      value=new String(vb,0,0,vb.length);    }    buffer.append(value);    buffer.append("\r\n");    make72Safe(buffer);    dos.writeBytes(buffer.toString());    e.getValue().write(dos);  }  dos.flush();}  }
class C{  public String provideUid(){  return "uid";}  }
class C{  public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.bool(xctxt) && m_right.bool(xctxt));}  }
class C{  public FastItemAdapter<Item> move(int fromPosition,int toPosition){  mItemAdapter.move(fromPosition,toPosition);  return this;}  }
class C{  void replaceImage(Image img){  if (parent == null) {    return;  }  BufferedImage bi=null;  if (img != null && iconWidth != 0 && iconHeight != 0) {    GraphicsConfiguration defaultGC=parent.getGraphicsConfiguration().getDevice().getDefaultConfiguration();    ColorModel model=defaultGC.getColorModel();    WritableRaster raster=model.createCompatibleWritableRaster(iconWidth,iconHeight);    bi=new BufferedImage(model,raster,model.isAlphaPremultiplied(),null);    Graphics g=bi.getGraphics();    try {      g.setColor(SystemColor.window);      g.fillRect(0,0,iconWidth,iconHeight);      if (g instanceof Graphics2D) {        ((Graphics2D)g).setComposite(AlphaComposite.Src);      }      g.drawImage(img,0,0,iconWidth,iconHeight,null);    }  finally {      g.dispose();    }  }  XToolkit.awtLock();  try {    if (iconPixmap != 0) {      XlibWrapper.XFreePixmap(XToolkit.getDisplay(),iconPixmap);      iconPixmap=0;      log.finest("Freed previous pixmap");    }    if (bi == null || iconWidth == 0 || iconHeight == 0) {      return;    }    AwtGraphicsConfigData adata=parent.getGraphicsConfigurationData();    awtImageData awtImage=adata.get_awtImage(0);    XVisualInfo visInfo=adata.get_awt_visInfo();    iconPixmap=XlibWrapper.XCreatePixmap(XToolkit.getDisplay(),XlibWrapper.RootWindow(XToolkit.getDisplay(),visInfo.get_screen()),iconWidth,iconHeight,awtImage.get_Depth());    if (iconPixmap == 0) {      log.finest("Can't create new pixmap for icon");      return;    }    long bytes=0;    DataBuffer srcBuf=bi.getData().getDataBuffer();    if (srcBuf instanceof DataBufferByte) {      byte[] buf=((DataBufferByte)srcBuf).getData();      ColorData cdata=adata.get_color_data(0);      int num_colors=cdata.get_awt_numICMcolors();      for (int i=0; i < buf.length; i++) {        buf[i]=(buf[i] >= num_colors) ? 0 : cdata.get_awt_icmLUT2Colors(buf[i]);      }      bytes=Native.toData(buf);    } else     if (srcBuf instanceof DataBufferInt) {      bytes=Native.toData(((DataBufferInt)srcBuf).getData());    } else     if (srcBuf instanceof DataBufferUShort) {      bytes=Native.toData(((DataBufferUShort)srcBuf).getData());    } else {      throw new IllegalArgumentException("Unknown data buffer: " + srcBuf);    }    int bpp=awtImage.get_wsImageFormat().get_bits_per_pixel();    int slp=awtImage.get_wsImageFormat().get_scanline_pad();    int bpsl=paddedwidth(iconWidth * bpp,slp) >> 3;    if (((bpsl << 3) / bpp) < iconWidth) {      log.finest("Image format doesn't fit to icon width");      return;    }    long dst=XlibWrapper.XCreateImage(XToolkit.getDisplay(),visInfo.get_visual(),(int)awtImage.get_Depth(),(int)XConstants.ZPixmap,0,bytes,iconWidth,iconHeight,32,bpsl);    if (dst == 0) {      log.finest("Can't create XImage for icon");      XlibWrapper.XFreePixmap(XToolkit.getDisplay(),iconPixmap);      iconPixmap=0;      return;    } else {      log.finest("Created XImage for icon");    }    long gc=XlibWrapper.XCreateGC(XToolkit.getDisplay(),iconPixmap,0,0);    if (gc == 0) {      log.finest("Can't create GC for pixmap");      XlibWrapper.XFreePixmap(XToolkit.getDisplay(),iconPixmap);      iconPixmap=0;      return;    } else {      log.finest("Created GC for pixmap");    }    try {      XlibWrapper.XPutImage(XToolkit.getDisplay(),iconPixmap,gc,dst,0,0,0,0,iconWidth,iconHeight);    }  finally {      XlibWrapper.XFreeGC(XToolkit.getDisplay(),gc);    }  }  finally {    XToolkit.awtUnlock();  }}  }
class C{  public static String hex(ByteBuffer bytes,int offset,int length){  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    PrintStream ps;    ps=new PrintStream(baos,true,"UTF-8");    print(bytes,ps,offset,length);    return baos.toString("UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public void bind(int tcpPort,int udpPort) throws IOException {  bind(new InetSocketAddress(tcpPort),new InetSocketAddress(udpPort));}  }
class C{  private boolean isBluetoothOn(){  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  if (adapter == null) {    return false;  } else {    return adapter.isEnabled();  }}  }
class C{  @Override protected final synchronized boolean gc(final int last,final String info){  assert last >= 10000;  final long elapsed=System.currentTimeMillis() - lastGC;  if (elapsed > last) {    final long before=free();    final long start=System.currentTimeMillis();    System.gc();    lastGC=System.currentTimeMillis();    final long after=free();    this.gcs[this.gcs_pos++]=after - before;    if (this.gcs_pos >= this.gcs.length)     this.gcs_pos=0;    if (log.isFine())     log.info("[gc] before: " + Formatter.bytesToString(before) + ", after: "+ Formatter.bytesToString(after)+ ", freed: "+ Formatter.bytesToString(after - before)+ ", rt: "+ (lastGC - start)+ " ms, call: "+ info);    return true;  }  if (log.isFinest())   log.finest("[gc] no execute, last run: " + (elapsed / 1000) + " seconds ago, call: "+ info);  return false;}  }
class C{  public void showRevisions(Project project,File selectedFile){  this.project=project;  checkState(project.getLocation().isPrefixOf(selectedFile.getLocation()),"Given selected file is not descendant of given project");  selectedFilePath=selectedFile.getLocation().removeFirstSegments(project.getLocation().segmentCount()).removeTrailingSeparator();  getRevisions();}  }
class C{  public int addPadding(byte[] in,int inOff){  byte code=(byte)(in.length - inOff);  while (inOff < in.length) {    in[inOff]=code;    inOff++;  }  return code;}  }
class C{  public void showBackWitboxFace(){  if (mRenderer.getShowBackWitboxFace())   mRenderer.showBackWitboxFace(false); else   mRenderer.showBackWitboxFace(true);  requestRender();}  }
class C{  public static void checkUnderRecording(){  instrumentation.waitForIdleSync();  Assert.assertEquals(trackListActivity.getString(R.string.image_pause),(String)SOLO.getCurrentActivity().findViewById(R.id.track_controller_record).getContentDescription());  Assert.assertTrue(SOLO.getCurrentActivity().findViewById(R.id.track_controller_stop).isEnabled());  Assert.assertNotNull(findTextView(trackListActivity.getString(R.string.generic_recording)));  Assert.assertNull(findTextView(trackListActivity.getString(R.string.generic_paused)));  String totalTimeOld=((TextView)SOLO.getCurrentActivity().findViewById(R.id.track_controller_total_time)).getText().toString();  sleep(2000);  String totalTimeNew=((TextView)SOLO.getCurrentActivity().findViewById(R.id.track_controller_total_time)).getText().toString();  Assert.assertFalse(totalTimeOld.equalsIgnoreCase(totalTimeNew));}  }
class C{  public void launchAuroraFailover(){  FailoverDBClusterRequest request=new FailoverDBClusterRequest();  request.setDBClusterIdentifier(auroraClusterIdentifier);  amazonRDSClient.failoverDBCluster(request);}  }
class C{  protected void addAnnotationsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_AnnotatableElement_annotations_feature"),getString("_UI_PropertyDescriptor_description","_UI_AnnotatableElement_annotations_feature","_UI_AnnotatableElement_type"),TypesPackage.Literals.ANNOTATABLE_ELEMENT__ANNOTATIONS,true,false,true,null,null,null));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:01.723 -0500",hash_original_method="8808742E73FD3FA546FD7E08E34E1555",hash_generated_method="4A32F7BAE69E0E9EB8F923C70A16AC18") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public static boolean isPositivePreliminary(int reply){  return (reply >= 100 && reply < 200);}  }
class C{  public UniqueRowIterator(IntIterator iter){  m_iter=iter;  m_visited=new BitSet();  advance();}  }
class C{  public GenericFastItemAdapter<Model,Item> removeModelRange(int position,int itemCount){  mItemAdapter.removeModelRange(position,itemCount);  return this;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.966 -0500",hash_original_method="A3382A53D185805D9FEF81E52E78D014",hash_generated_method="CE386F23A09968D7056636BB7A12DD1A") public void write(String string,int offset,int length) throws IOException {  write(string.toCharArray(),offset,length);}  }
class C{  public static void main(String[] args) throws PlayOnLinuxException {  final PlayOnLinuxApp application=new PlayOnLinuxApp();  application.start(args);}  }
class C{  private long insertSettingsInTransaction(SQLiteDatabase db,ContentValues values){  String key=values.getAsString(Settings.KEY);  if (TextUtils.isEmpty(key)) {    throw new IllegalArgumentException("Must include the KEY field");  }  String[] keyArray=new String[]{key};  Cursor cursor=null;  try {    cursor=db.query(TABLE_SETTINGS,new String[]{Settings.KEY},Settings.KEY + "=?",keyArray,null,null,null);    if (cursor.moveToNext()) {      long id=cursor.getLong(0);      db.update(TABLE_SETTINGS,values,Settings.KEY + "=?",keyArray);      return id;    } else {      return db.insertOrThrow(TABLE_SETTINGS,Settings.VALUE,values);    }  }  finally {    if (cursor != null)     cursor.close();  }}  }
class C{  public T visible(){  return visibility(View.VISIBLE);}  }
class C{  public boolean isPair(){  assert (error == null);  return isPair;}  }
class C{  public void start(final String key,Trigger trigger){  HashMap<String,ConfModule> agents=status.getModulesMap();  if (agents == null) {    if (Cfg.DEBUG) {      Check.log(TAG + " Agents map null");    }    return;  }  if (instances == null) {    if (Cfg.DEBUG) {      Check.log(TAG + " Running Agents map null");    }    return;  }  BaseModule a=makeAgent(key);  if (a == null) {    return;  }  if (a.isRunning() || a.isSuspended()) {    if (Cfg.DEBUG) {      Check.log(TAG + " Agent " + key+ " is already running or suspended");    }    return;  }  if (Cfg.DEBUG) {    Check.asserts(a != null,"null agent");  }  if (Cfg.DEBUG) {    Check.asserts(instances.get(key) != null,"null running");  }  if (a.setConf(agents.get(key))) {    a.setTrigger(trigger);    final Thread t=new Thread(a);    if (Cfg.DEBUG) {      t.setName(a.getClass().getSimpleName());    }    threads.put(a,t);    t.start();  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " (start) Error: Cannot set Configuration");    }  }}  }
class C{  public SSLException(Throwable cause){  super(cause == null ? null : cause.toString());  initCause(cause);}  }
class C{  protected boolean end(TextView widget,Spannable buffer){  return false;}  }
class C{  public void removeEventListener(final JIPEventListener listener){  m_eventNotifier.removeEventListener(listener);}  }
class C{  public final void testIPv6AddressWithContextAndResourceIdParameters(){  assertNotNull(Validators.iPv6Address(getContext(),android.R.string.cancel));}  }
class C{  public S2Polyline(List<S2Point> vertices){  this.numVertices=vertices.size();  this.vertices=vertices.toArray(new S2Point[numVertices]);}  }
class C{  @Override public void IFGT(String className,String methName,int branchIndex,int p){  IntegerValue rightBv=env.topFrame().operandStack.popBv32();  env.topFrame().operandStack.pushBv32(ExpressionFactory.ICONST_0);  env.topFrame().operandStack.pushBv32(rightBv);  IF_ICMPLT(className,methName,branchIndex,0,p);}  }
class C{  public boolean isLowerExclusive(){  return !lowerInclusive;}  }
class C{  public void invDctBlock8x8(double[][] input,int[][] output,int col,int row){  invDct8x8(input,this.tmpIntArray);  for (int i=0; i < NJPEG; i++) {    for (int j=0; j < NJPEG; j++) {      output[col + i][row + j]=this.tmpIntArray[i][j];    }  }}  }
class C{  public static boolean inViFamilyNameList(String word){  return hsViFamilyNames.contains(word);}  }
class C{  @DataProvider(name="guardedMap") public Object[][] providesGuardedMap(){  return new Object[][]{{newGuarded()}};}  }
class C{  public static String escapeFilterParameter(String parameter){  return parameter.replace("\\","\\\\").replace(",","\\,");}  }
class C{  public <T extends Comparable<T>>void sort(List<T> list){  sort(list,defaultComp);}  }
class C{  public boolean containsNumericalData(){  return numericalValues != null && numericalValues.length() > 0;}  }
class C{  public void addAttribute(AttributeInfo info){  AttributeInfo.remove(attributes,info.getName());  attributes.add(info);}  }
class C{  private void showDebugDialog(int titleResId,int bodyResId){  AlertDialog.Builder builder=new AlertDialog.Builder(this).setTitle(titleResId).setMessage(bodyResId).setPositiveButton(android.R.string.ok,null);  builder.create().show();}  }
class C{  static boolean hasCustomOpenShiftUrl(OpenShiftConfig config){  try {    URI masterUri=new URI(config.getMasterUrl()).resolve("/");    URI openshfitUri=new URI(config.getOpenShiftUrl()).resolve("/");    return !masterUri.equals(openshfitUri);  } catch (  Exception e) {    throw KubernetesClientException.launderThrowable(e);  }}  }
class C{  public void replaceRange(String str,int start,int end){  if (end < start)   throw new IllegalArgumentException("end before start");  Document doc=getDocument();  if (doc != null) {    try {      undoManager.beginInternalAtomicEdit();      ((AbstractDocument)doc).replace(start,end - start,str,null);    } catch (    BadLocationException e) {      throw new IllegalArgumentException(e.getMessage());    } finally {      undoManager.endInternalAtomicEdit();    }  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public final double[] toArray2(double[] array,int offset){  if (array == null) {    throw new IllegalArgumentException("Array Is Null");  }  return toDoubleArray(array,offset,2);}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  protected void removeDescriptorExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de removeDescriptorExecuteLogic");  String id=request.getParameter(Constants.ID);  if (StringUtils.isNotEmpty(id)) {    ResultadoRegistrosVO res=getGestionDescripcionBI(request).deleteDescriptores(new String[]{id});    if (!res.getErrores().isEmpty()) {      ActionErrors errores=obtenerErrores(request,true);      errores.add(res.getErrores());      goLastClientExecuteLogic(mapping,form,request,response);      return;    }  }  goBackExecuteLogic(mapping,form,request,response);}  }
class C{  public void dataRefreshAll(){  dataRefreshAll(true,false);}  }
class C{  public void focusLost(FocusEvent e){  if (focusLog.isLoggable(PlatformLogger.Level.FINE)) {    focusLog.fine("{0}",e);  }  bHasFocus=false;}  }
class C{  private void addLDAPBindCredentials() throws LDAPException {  String baseDN=_baseDN;  if (StringUtils.isEmpty(baseDN)) {    baseDN=DEFAULT_LDAP_BASE_DN;  }  _log.debug("BaseDN {}",baseDN);  _inMemoryDSConfig=new InMemoryDirectoryServerConfig(baseDN);  String managerDN=_managerDN;  if (StringUtils.isEmpty(managerDN)) {    managerDN=DEFAULT_LDAP_MANAGER_DN;  }  String managerDNPassword=_managerDNPassword;  if (StringUtils.isEmpty(managerDNPassword)) {    managerDNPassword=DEFAULT_LDAP_MANAGER_DN_PASSWORD;  }  _log.debug("ManagerDN {} and ManagerDN password {}",managerDN,managerDNPassword);  _inMemoryDSConfig.addAdditionalBindCredentials(managerDN,managerDNPassword);}  }
class C{  public boolean isBottom(){  return valueNumbersUnconditionallyDereferenced.get(numValueNumbersInMethod);}  }
class C{  protected void engineUpdate(byte input[],int offset,int len){  if (first == true) {    md.update(k_ipad);    first=false;  }  md.update(input,offset,len);}  }
class C{  public double incorrect(){  double incorrect=0;  for (int row=0; row < size(); row++) {    for (int col=0; col < size(); col++) {      if (row != col) {        incorrect+=get(row,col);      }    }  }  return incorrect;}  }
class C{  public static void signalCacheCreate(){  isCacheClosing=false;}  }
class C{  public void testFollowersNoLeaderSelectionStrategy() throws Throwable {  List<Address> results=(List<Address>)ServerSelectionStrategies.FOLLOWERS.selectConnections(null,servers);  assertTrue(listsEqual(results,servers));}  }
class C{  public Boolean isRecordRepeatedSteps(){  return recordRepeatedSteps;}  }
class C{  public void scrollPixels(int pixels,boolean animate){  int scrollToY=getScrollY() + pixels;  scrollTo(scrollToY,animate);}  }
class C{  public SymMatrix(String fname) throws FileNotFoundException, IOException {  super(fname);}  }
class C{  public DataFilterCriterion.Builder<Select<T>> or(){  return new DataFilterCriterion.Builder<>(this,DataFilterClause.DataFilterConjunction.OR);}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  boolean independent=ResolveSepsets.isIndependentPooled(method,independenceTests,x,y,z);  if (independent) {    TetradLogger.getInstance().log("independencies","In aggregate independent: " + SearchLogUtils.independenceFact(x,y,z));  } else {    TetradLogger.getInstance().log("dependencies","In aggregate dependent: " + SearchLogUtils.independenceFact(x,y,z));  }  return independent;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getVideoFrame().getDVDTitle());}  }
class C{  public void java_lang_Throwable_fillInStackTrace(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assign(returnVar,thisVar);}  }
class C{  public static AngleAnimator createHeadingAnimator(View view,Angle begin,Angle end){  if (begin == null || end == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  final long MIN_LENGTH_MILLIS=500;  final long MAX_LENGTH_MILLIS=3000;  long lengthMillis=AnimationSupport.getScaledTimeMillisecs(begin,end,Angle.POS180,MIN_LENGTH_MILLIS,MAX_LENGTH_MILLIS);  return new AngleAnimator(new ScheduledInterpolator(lengthMillis),begin,end,new ViewPropertyAccessor.HeadingAccessor(view));}  }
class C{  private static int numInitialSplits(long numRecords){  final int maxSplits=100;  final long recordsPerSplit=10000;  return (int)Math.min(maxSplits,numRecords / recordsPerSplit + 1);}  }
class C{  public void Done(){  nextCharBuf=null;  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static String stringFor(int n){switch (n) {case cudaSharedMemBankSizeDefault:    return "cudaSharedMemBankSizeDefault";case cudaSharedMemBankSizeFourByte:  return "cudaSharedMemBankSizeFourByte";case cudaSharedMemBankSizeEightByte:return "cudaSharedMemBankSizeEightByte";}return "INVALID cudaSharedMemConfig: " + n;}  }
class C{  public SAML2StatusCodeInvalidException(String message){  super(message);}  }
class C{  public void printString(String v,int offset,int length) throws IOException {  for (int i=0; i < length; i++) {    char ch=v.charAt(i + offset);    if (ch < 0x80)     os.write(ch); else     if (ch < 0x800) {      os.write(0xc0 + ((ch >> 6) & 0x1f));      os.write(0x80 + (ch & 0x3f));    } else {      os.write(0xe0 + ((ch >> 12) & 0xf));      os.write(0x80 + ((ch >> 6) & 0x3f));      os.write(0x80 + (ch & 0x3f));    }  }}  }
class C{  public static void write(float lt,float ln,int offset_x1,int offset_y1,String url,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.RASTER_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_RASTER);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeByte(COLORMODEL_URL);  dos.writeFloat(lt);  dos.writeFloat(ln);  dos.writeInt(offset_x1);  dos.writeInt(offset_y1);  properties.setProperty(LPC_LINKRASTERIMAGEURL,url);  properties.write(dos);}  }
class C{  public static boolean testAarLine(float minX,float minY,float maxX,float maxY,float a,float b,float c){  float pX, pY, nX, nY;  if (a > 0.0f) {    pX=maxX;    nX=minX;  } else {    pX=minX;    nX=maxX;  }  if (b > 0.0f) {    pY=maxY;    nY=minY;  } else {    pY=minY;    nY=maxY;  }  float distN=c + a * nX + b * nY;  float distP=c + a * pX + b * pY;  return distN <= 0.0f && distP >= 0.0f;}  }
class C{  public Message(InputStream inputStream,String contentType) throws Exception {  log.debug("new Message({})",contentType);  try {    MimeConfig config=new MimeConfig();    config.setHeadlessParsing(contentType);    MimeStreamParser parser=new MimeStreamParser(config);    parser.setContentHandler(new ContentHandler());    parser.parse(inputStream);  } catch (  Exception ex) {    log.error("Error when parsing message",ex);  }}  }
class C{  public static int endPos(JCTree tree){  if (tree.hasTag(BLOCK) && ((JCBlock)tree).endpos != Position.NOPOS)   return ((JCBlock)tree).endpos; else   if (tree.hasTag(SYNCHRONIZED))   return endPos(((JCSynchronized)tree).body); else   if (tree.hasTag(TRY)) {    JCTry t=(JCTry)tree;    return endPos((t.finalizer != null) ? t.finalizer : (t.catchers.nonEmpty() ? t.catchers.last().body : t.body));  } else   return tree.pos;}  }
class C{  public Assignment(String var1,Value val1,String var2,Value val2){  this();  map.put(var1,val1);  map.put(var2,val2);}  }
class C{  public void addKey(Key key){  keys.add(key);}  }
class C{  private void validateStorageUnitNotificationRegistrationKey(NotificationRegistrationKey notificationRegistrationKey) throws IllegalArgumentException {  Assert.notNull(notificationRegistrationKey,"A storage unit notification registration key must be specified.");  notificationRegistrationKey.setNamespace(alternateKeyHelper.validateStringParameter("namespace",notificationRegistrationKey.getNamespace()));  notificationRegistrationKey.setNotificationName(alternateKeyHelper.validateStringParameter("notification name",notificationRegistrationKey.getNotificationName()));}  }
class C{  public static void createCrawlDb(Configuration conf,FileSystem fs,Path crawldb,List<URLCrawlDatum> init) throws Exception {  LOG.trace("* creating crawldb: " + crawldb);  Path dir=new Path(crawldb,CrawlDb.CURRENT_NAME);  MapFile.Writer writer=new MapFile.Writer(conf,fs,new Path(dir,"part-00000").toString(),Text.class,CrawlDatum.class);  Iterator<URLCrawlDatum> it=init.iterator();  while (it.hasNext()) {    URLCrawlDatum row=it.next();    LOG.info("adding:" + row.url.toString());    writer.append(new Text(row.url),row.datum);  }  writer.close();}  }
class C{  public void testBug4010() throws Exception {  if (!versionMeetsMinimum(4,1)) {    if ("GBK".equalsIgnoreCase(getMysqlVariable("character_set"))) {      String origString="\u603d";      Properties props=new Properties();      props.put("useUnicode","true");      props.put("characterEncoding","GBK");      Connection unicodeConn=getConnectionWithProps(props);      Statement unicodeStmt=unicodeConn.createStatement();      PreparedStatement unicodePstmt=unicodeConn.prepareStatement("INSERT INTO testBug4010 VALUES (?)");      try {        unicodeStmt.executeUpdate("DROP TABLE IF EXISTS testBug4010");        unicodeStmt.executeUpdate("CREATE TABLE testBug4010 (field1 varchar(10))");        unicodePstmt.setString(1,origString);        unicodePstmt.executeUpdate();        this.rs=unicodeStmt.executeQuery("SELECT * FROM testBug4010");        assertTrue(this.rs.next());        String stringFromDb=this.rs.getString(1);        assertTrue("Retrieved string != sent string",origString.equals(stringFromDb));      }  finally {        unicodeStmt.executeUpdate("DROP TABLE IF EXISTS testBug4010");        unicodeStmt.close();        unicodePstmt.close();        unicodeConn.close();      }    } else {      System.err.println("WARN: Test not valid for servers not running GBK encoding");    }  } else {    System.err.println("WARN: Test not valid for MySQL version > 4.1.0, skipping");  }}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new JSONException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  public void ReInit(CharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  public static void addMessage(String path,String message){  settingsManager.addDefault(path,message);}  }
class C{  @Listener(order=Order.LATE) public void onPlayerLogin(final ClientConnectionEvent.Join event){  final Player user=event.getTargetEntity();  Optional<UserService> oqs=loader.get(user);  if (!oqs.isPresent()) {    return;  }  UserService qs=oqs.get();  JailHandler handler=ism.getService(JailHandler.class).get();  if (qs.jailOnNextLogin() && qs.getJailData().isPresent()) {    Optional<LocationData> owl=handler.getWarpLocation(user);    if (!owl.isPresent()) {      MessageChannel.permission(JailCommand.notifyPermission).send(Text.of(TextColors.RED,"WARNING: No jail is defined. Jailed players are going free!"));      handler.unjailPlayer(user);      return;    }    JailData jd=qs.getJailData().get();    jd.setPreviousLocation(user.getLocation());    qs.setJailData(jd);    plugin.getTeleportHandler().teleportPlayer(user,owl.get().getLocation().get(),owl.get().getRotation(),NucleusTeleportHandler.TeleportMode.NO_CHECK);    Optional<Duration> timeLeft=jd.getTimeLeft();    Text message;    if (timeLeft.isPresent()) {      message=plugin.getMessageProvider().getTextMessageWithFormat("command.jail.jailed",owl.get().getName(),plugin.getNameUtil().getNameFromUUID(jd.getJailer()),plugin.getMessageProvider().getMessageWithFormat("standard.for"),Util.getTimeStringFromSeconds(timeLeft.get().getSeconds()));    } else {      message=plugin.getMessageProvider().getTextMessageWithFormat("command.jail.jailed",owl.get().getName(),plugin.getNameUtil().getNameFromUUID(jd.getJailer()),"","");    }    qs.setFlying(false);    user.sendMessage(message);    user.sendMessage(plugin.getMessageProvider().getTextMessageWithFormat("standard.reason",jd.getReason()));  }  qs.setJailOnNextLogin(false);  Sponge.getScheduler().createTaskBuilder().async().delay(500,TimeUnit.MILLISECONDS).execute(null).submit(plugin);}  }
class C{  public void testSignumZero(){  BigInteger aNumber=BigInteger.ZERO;  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  private static Vector<MappingPair> cloneMappingPairVector(Vector<MappingPair> vec){  Vector<MappingPair> result=new Vector<DecomposeProofHandler.MappingPair>();  for (int i=0; i < vec.size(); i++) {    result.add(vec.elementAt(i).clone());  }  return result;}  }
class C{  public void addItem(final String name,final JComponent item,int col){  JLabel label=new JLabel(name);  GridBagConstraints labelConstraints=new GridBagConstraints();  labelConstraints.gridx=col;  labelConstraints.gridy=myNextItemRow;  labelConstraints.insets=new Insets(10,10,0,0);  labelConstraints.anchor=GridBagConstraints.NORTHEAST;  labelConstraints.fill=GridBagConstraints.NONE;  add(label,labelConstraints);  GridBagConstraints itemConstraints=new GridBagConstraints();  itemConstraints.gridx=col + 1;  itemConstraints.gridy=myNextItemRow;  itemConstraints.insets=new Insets(10,10,0,10);  itemConstraints.weightx=1.0;  itemConstraints.anchor=GridBagConstraints.WEST;  itemConstraints.fill=GridBagConstraints.HORIZONTAL;  add(item,itemConstraints);}  }
class C{  protected void processSpecialTag(boolean allowCDATA) throws Exception {  String str=XMLUtil.read(this.reader,'&');  char ch=str.charAt(0);  if (ch == '&') {    XMLUtil.errorUnexpectedEntity(reader.getSystemID(),reader.getLineNr(),str);  }switch (ch) {case '[':    if (allowCDATA) {      this.processCDATA();    } else {      XMLUtil.errorUnexpectedCDATA(reader.getSystemID(),reader.getLineNr());    }  return;case 'D':this.processDocType();return;case '-':XMLUtil.skipComment(this.reader);return;}}  }
class C{  public LZ8(){  super(10,2,21,21,4);}  }
class C{  public ArithmeticException(java.lang.String s){  super(s);}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int KC=key.length / 4;  int t;  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];  t=0;  int i=0;  while (i < key.length) {    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);    i+=4;    t++;  }  int k=(ROUNDS + 1) << 2;  for (i=KC; (i < k); i++) {    int temp=W[(i - 1) >> 2][(i - 1) & 3];    if ((i % KC) == 0) {      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];    } else     if ((KC > 6) && ((i % KC) == 4)) {      temp=subWord(temp);    }    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;  }  if (!forEncryption) {    for (int j=1; j < ROUNDS; j++) {      for (i=0; i < 4; i++) {        W[j][i]=inv_mcol(W[j][i]);      }    }  }  return W;}  }
class C{  public TripPattern(TIntList intStopIds){  stops=intStopIds.toArray();  int nStops=stops.length;  pickups=new PickDropType[nStops];  dropoffs=new PickDropType[nStops];  wheelchairAccessible=new BitSet(nStops);  for (int s=0; s < nStops; s++) {    pickups[s]=PickDropType.SCHEDULED;    dropoffs[s]=PickDropType.SCHEDULED;    wheelchairAccessible.set(s);  }  routeId="SCENARIO_MODIFICATION";}  }
class C{  public JdbcUrlParserImpl(){}  }
class C{  public CachedRowSet createCopySchema() throws SQLException {  return crsInternal.createCopySchema();}  }
class C{  public ZkSolrResourceLoader(Path instanceDir,String configSet,ClassLoader parent,Properties coreProperties,ZkController zooKeeperController){  super(instanceDir,parent,coreProperties);  this.zkController=zooKeeperController;  configSetZkPath=ZkConfigManager.CONFIGS_ZKNODE + "/" + configSet;}  }
class C{  public static <T>byte[] obj2Byte(T src){  if (src == null) {    return null;  }  try {    return src instanceof byte[] ? (byte[])src : objectMapper.writeValueAsBytes(src);  } catch (  Exception e) {    log.info("parse Object to byte[] error",e);    return null;  }}  }
class C{  public void computeAverageLocal(int history,int base,int states[][],int col){  initialise(history,base);  addObservations(states,col);  computeAverageLocalOfObservations();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:33.451 -0500",hash_original_method="948816836115B6F212C1F0250C125169",hash_generated_method="56CB4EE59BE5F1D850A81405D23C80A8") protected final void assertValid(final OperatedClientConnection wrappedConn){  if (wrappedConn == null) {    throw new IllegalStateException("No wrapped connection.");  }}  }
class C{  public List<WorkOrder> searchWO(final Map<String,Object> criteriaMap){  logger.info("-------------------------Inside searchWO---------------------------------");  List<WorkOrder> wolList=null;  String dynQuery="select distinct wo from WorkOrder wo left join wo.workOrderEstimates workOrderEstimate" + " where wo.id is not null and wo.parent is null ";  Object[] params;  final List<Object> paramList=new ArrayList<Object>();  final String setStat=worksService.getWorksConfigValue("WorkOrder.setstatus");  if (criteriaMap.get(STATUS) != null)   if (criteriaMap.get(STATUS).equals("APPROVED") || criteriaMap.get(STATUS).equals("CANCELLED")) {    if (criteriaMap.get(SOURCEPAGE) != null && CANCELWO.equals(criteriaMap.get(SOURCEPAGE))) {      dynQuery=dynQuery + " and wo.egwStatus.code = ? ";      paramList.add(criteriaMap.get(STATUS));    } else {      dynQuery=dynQuery + " and wo.egwStatus.code = ? and " + " wo.id not in (select objectId from OfflineStatus where objectType=?)";      paramList.add(criteriaMap.get(STATUS));      paramList.add("WorkOrder");    }  } else   if (!criteriaMap.get(STATUS).equals("-1") && Arrays.asList(setStat.split(",")).contains(criteriaMap.get(STATUS))) {    dynQuery=dynQuery + " and wo.id in(select stat.objectId from " + "OfflineStatus stat where stat.egwStatus.code=? and stat.id = (select"+ " max(stat1.id) from OfflineStatus stat1 where wo.id=stat1.objectId and stat1.objectType=?) and stat.objectType=?)";    paramList.add(criteriaMap.get(STATUS));    paramList.add("WorkOrder");    paramList.add("WorkOrder");  } else   if (!criteriaMap.get(STATUS).equals("-1") && !Arrays.asList(setStat.split(",")).contains(criteriaMap.get(STATUS))) {    dynQuery=dynQuery + " and wo.egwStatus.code = ?";    paramList.add(criteriaMap.get(STATUS));  }  if (criteriaMap.get(CREATE_DATE) != null) {    dynQuery=dynQuery + " and wo.workOrderDate = ? ";    paramList.add(criteriaMap.get(CREATE_DATE));  }  if (criteriaMap.get(FROM_DATE) != null && criteriaMap.get(TO_DATE) == null) {    dynQuery=dynQuery + " and wo.workOrderDate >= ? ";    paramList.add(criteriaMap.get(FROM_DATE));  } else   if (criteriaMap.get(TO_DATE) != null && criteriaMap.get(FROM_DATE) == null) {    dynQuery=dynQuery + " and wo.workOrderDate <= ? ";    paramList.add(criteriaMap.get(TO_DATE));  } else   if (criteriaMap.get(FROM_DATE) != null && criteriaMap.get(TO_DATE) != null) {    dynQuery=dynQuery + " and wo.workOrderDate between ? and ? ";    paramList.add(criteriaMap.get(FROM_DATE));    paramList.add(criteriaMap.get(TO_DATE));  }  if (criteriaMap.get(WORKORDER_NO) != null) {    dynQuery=dynQuery + " and UPPER(wo.workOrderNumber) like ? ";    paramList.add("%" + criteriaMap.get(WORKORDER_NO).toString().trim().toUpperCase() + "%");  }  if (criteriaMap.get(WP_NO) != null) {    dynQuery=dynQuery + " and UPPER(wo.packageNumber) like ? ";    paramList.add("%" + criteriaMap.get(WP_NO).toString().trim().toUpperCase() + "%");  }  if (criteriaMap.get(TENDER_FILE_NO) != null) {    dynQuery=dynQuery + " and wo.negotiationNumber in (select tr1.negotiationNumber from TenderResponse tr1 where " + "UPPER(tr1.tenderEstimate.worksPackage.tenderFileNumber) like ? )";    paramList.add("%" + criteriaMap.get(TENDER_FILE_NO).toString().trim().toUpperCase() + "%");  }  if (criteriaMap.get(CONTRACTOR_ID) != null) {    dynQuery=dynQuery + " and wo.contractor.id = ? ";    paramList.add(criteriaMap.get(CONTRACTOR_ID));  }  if (criteriaMap.get("DEPT_ID") != null) {    dynQuery=dynQuery + " and wo.id in (select we.workOrder.id from WorkOrderEstimate we where we.workOrder.id=wo.id and " + " we.estimate.executingDepartment.id = ?) ";    paramList.add(criteriaMap.get("DEPT_ID"));  }  if (criteriaMap.get(ESTIMATE_NO) != null) {    dynQuery=dynQuery + " and wo.id in (select we.workOrder.id from WorkOrderEstimate we where we.workOrder.id=wo.id and " + " UPPER(we.estimate.estimateNumber) like ? ) ";    paramList.add("%" + criteriaMap.get(ESTIMATE_NO).toString().trim().toUpperCase() + "%");  }  if (criteriaMap.get(TENDER_NO) != null && !"".equalsIgnoreCase((String)criteriaMap.get(TENDER_NO))) {    logger.debug("-------TENDER_NO-----------" + criteriaMap.get(TENDER_NO));    dynQuery=dynQuery + " and UPPER(wo.tenderNumber like) ? ) ";    paramList.add("%" + criteriaMap.get(TENDER_NO).toString().trim().toUpperCase() + "%");  }  if (criteriaMap.get(PROJECT_CODE) != null) {    dynQuery=dynQuery + " and wo.id in (select we.workOrder.id from WorkOrderEstimate we where we.workOrder.id=wo.id and " + " UPPER(we.estimate.executingDepartment.projectCode.code) like ? ) ";    paramList.add("%" + criteriaMap.get(PROJECT_CODE).toString().trim().toUpperCase() + "%");  }  if (criteriaMap.get(ACTION_FLAG) != null && criteriaMap.get(ACTION_FLAG).toString().equalsIgnoreCase("searchWOForMB")) {    dynQuery=dynQuery + " and workOrderEstimate.workOrder.egwStatus.code!='CANCELLED' and workOrderEstimate.estimate.projectCode.egwStatus.code!='CLOSED' and workOrderEstimate.id not in (select distinct mbh.workOrderEstimate.id " + "from MBHeader mbh where mbh.egwStatus.code=? "+ " or mbh.egwStatus.code=?"+ " or mbh.egwStatus.code=?"+ " or mbh.egwStatus.code=? or mbh.egwStatus.code=? )"+ "and workOrderEstimate.id not in (select distinct mbh.workOrderEstimate.id "+ "from MBHeader mbh where "+ " mbh.egwStatus.code = ? and  mbh.egBillregister.billstatus = ? and "+ " mbh.egBillregister.billtype=?)";    paramList.add(MBHeader.MeasurementBookStatus.CREATED.toString());    paramList.add(MBHeader.MeasurementBookStatus.CHECKED.toString());    paramList.add(MBHeader.MeasurementBookStatus.RESUBMITTED.toString());    paramList.add(MBHeader.MeasurementBookStatus.REJECTED.toString());    paramList.add(MBHeader.MeasurementBookStatus.NEW.toString());    paramList.add(MBHeader.MeasurementBookStatus.APPROVED.toString());    paramList.add(MBHeader.MeasurementBookStatus.APPROVED.toString());    paramList.add(getFinalBillTypeConfigValue());  }  if (criteriaMap.get(ACTION_FLAG) != null && criteriaMap.get(ACTION_FLAG).toString().equalsIgnoreCase("searchWOForBilling")) {    dynQuery=dynQuery + " and workOrderEstimate.workOrder.egwStatus.code!='CANCELLED' and workOrderEstimate.estimate.projectCode.egwStatus.code!='CLOSED' and workOrderEstimate.id not in " + "(select distinct mbh.workOrderEstimate.id from MBHeader mbh where mbh.egwStatus.code = ? "+ " and (mbh.egBillregister.billstatus <> ? and mbh.egBillregister.billtype = ?))";    paramList.add(MBHeader.MeasurementBookStatus.APPROVED.toString());    paramList.add(MBHeader.MeasurementBookStatus.CANCELLED.toString());    paramList.add(getFinalBillTypeConfigValue());  }  logger.debug("Query is ::" + dynQuery);  if (paramList.isEmpty())   wolList=findAllBy(dynQuery); else {    params=new Object[paramList.size()];    params=paramList.toArray(params);    wolList=findAllBy(dynQuery,params);  }  return wolList;}  }
class C{  @Override public void serviceRemoved(ServiceEvent event){synchronized (this) {    _infos.remove(event.getName());    _events.remove(event.getName());  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.417 -0400",hash_original_method="399FD48625B469905478587F05C86457",hash_generated_method="F966BFD96A459D6C96FDF4FB8616DC0C") public static int readSwappedInteger(InputStream input) throws IOException {  int value1=read(input);  int value2=read(input);  int value3=read(input);  int value4=read(input);  return ((value1 & 0xff) << 0) + ((value2 & 0xff) << 8) + ((value3 & 0xff) << 16)+ ((value4 & 0xff) << 24);}  }
class C{  public static void postBoot(){  attribMap=new HashMap<CompilerAdviceAttribute,CompilerAdviceAttribute>();  defaultAttr=new CompilerAdviceAttribute(null,null,null,CompiledMethod.BASELINE);  tempAttr=new CompilerAdviceAttribute(null,null,null,CompiledMethod.BASELINE);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());}  }
class C{  public FilterFunctionEnvironment(){  super(null);}  }
class C{  public AppSettings(Context context,String settingsFilename){  mSharedPreferences=context.getSharedPreferences(settingsFilename,Context.MODE_PRIVATE);}  }
class C{  private Transfer writeByte(byte x) throws IOException {  out.writeByte(x);  return this;}  }
class C{  public final void addHitBox(HitBox hitBox){  hitBoxes.add(hitBox);}  }
class C{  public Square(){  super(Number.class,Number.class);}  }
class C{  public static void main(String[] args){  Alphabet alphabet=new Alphabet(args[0]);  final int R=alphabet.radix();  int[] count=new int[R];  while (StdIn.hasNextChar()) {    char c=StdIn.readChar();    if (alphabet.contains(c))     count[alphabet.toIndex(c)]++;  }  for (int c=0; c < R; c++)   StdOut.println(alphabet.toChar(c) + " " + count[c]);}  }
class C{  public void createImp_Sum_table(String tablename){  Connection conn=DB.getConnectionRW();  DatabaseMetaData dbm;  try {    dbm=conn.getMetaData();    ResultSet tables=null;    if (m_DatabaseType.equals("Oracle"))     tables=dbm.getTables(null,null,tablename.toUpperCase(),null); else     if (m_DatabaseType.equals("PostgreSQL"))     tables=dbm.getTables(null,null,tablename.toLowerCase(),null);    if (tables.next()) {      log.info("Table Found");    } else {      if (tablename.equals("AD_Package_Imp")) {        StringBuffer sqlB=new StringBuffer("CREATE TABLE " + tablename.toUpperCase() + "( ").append(tablename.toUpperCase() + "_ID   NUMBER(10) NOT NULL, ").append("AD_CLIENT_ID NUMBER(10) NOT NULL, ").append("AD_ORG_ID  NUMBER(10) NOT NULL, ").append("ISACTIVE CHAR(1) DEFAULT 'Y' NOT NULL, ").append("CREATED DATE DEFAULT SYSDATE NOT NULL, ").append("CREATEDBY NUMBER(10) NOT NULL, ").append("UPDATED DATE DEFAULT SYSDATE NOT NULL, ").append("UPDATEDBY NUMBER(10) NOT NULL, ").append("NAME NVARCHAR2(60) NOT NULL, ").append("PK_STATUS NVARCHAR2(22), ").append("RELEASENO NVARCHAR2(20), ").append("PK_VERSION NVARCHAR2(20), ").append("VERSION NVARCHAR2(20), ").append("DESCRIPTION NVARCHAR2(1000) NOT NULL, ").append("EMAIL NVARCHAR2(60), ").append("PROCESSED CHAR(1) DEFAULT 'N', ").append("PROCESSING CHAR(1) DEFAULT 'N', ").append("CREATOR VARCHAR2(60 ), ").append("CREATORCONTACT VARCHAR2(255), ").append(" CREATEDDATE  VARCHAR2(25), ").append("UPDATEDDATE VARCHAR2(25), ").append("PRIMARY KEY( " + tablename.toUpperCase() + "_ID)"+ ")");        try {          PreparedStatement pstmt=DB.prepareStatement(sqlB.toString(),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE,null);          pstmt.executeUpdate();          MSequence.createTableSequence(m_ctx,"AD_Package_Imp",m_trxName);          pstmt.close();          pstmt=null;        } catch (        Exception e) {          log.info("createImp_Sum_table:" + e);        }      }      if (tablename.equals("AD_Package_Imp_Inst")) {        StringBuffer sqlB=new StringBuffer("CREATE TABLE " + tablename.toUpperCase() + "( ").append(tablename.toUpperCase() + "_ID   NUMBER(10) NOT NULL, ").append("AD_CLIENT_ID NUMBER(10) NOT NULL, ").append("AD_ORG_ID  NUMBER(10) NOT NULL, ").append("ISACTIVE CHAR(1) DEFAULT 'Y' NOT NULL, ").append("CREATED DATE DEFAULT SYSDATE NOT NULL, ").append("CREATEDBY NUMBER(10) NOT NULL, ").append("UPDATED DATE DEFAULT SYSDATE NOT NULL, ").append("UPDATEDBY NUMBER(10) NOT NULL, ").append("NAME NVARCHAR2(60) NOT NULL, ").append("PK_STATUS NVARCHAR2(22), ").append("RELEASENO NVARCHAR2(20), ").append("PK_VERSION NVARCHAR2(20), ").append("VERSION NVARCHAR2(20), ").append("DESCRIPTION NVARCHAR2(1000) NOT NULL, ").append("EMAIL NVARCHAR2(60), ").append("PROCESSED CHAR(1) DEFAULT 'N', ").append("PROCESSING CHAR(1) DEFAULT 'N', ").append("CREATOR VARCHAR2(60 ), ").append("CREATORCONTACT VARCHAR2(255), ").append(" CREATEDDATE  VARCHAR2(25), ").append("UPDATEDDATE VARCHAR2(25), ").append("PRIMARY KEY( " + tablename.toUpperCase() + "_ID)"+ ")");        try {          PreparedStatement pstmt=DB.prepareStatement(sqlB.toString(),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE,null);          pstmt.executeUpdate();          MSequence.createTableSequence(m_ctx,"AD_Package_Imp_Inst",m_trxName);          pstmt.close();          pstmt=null;        } catch (        Exception e) {          log.info("createImp_Sum_table:" + e);        }      }      if (tablename.equals("AD_Package_Imp_Detail")) {        StringBuffer sqlB=new StringBuffer("CREATE TABLE " + tablename.toUpperCase() + "( ").append(tablename.toUpperCase() + "_ID   NUMBER(10) NOT NULL, ").append("AD_CLIENT_ID NUMBER(10) NOT NULL, ").append("AD_ORG_ID  NUMBER(10) NOT NULL, ").append("ISACTIVE CHAR(1) DEFAULT 'Y' NOT NULL, ").append("CREATED DATE DEFAULT SYSDATE NOT NULL, ").append("CREATEDBY NUMBER(10) NOT NULL, ").append("UPDATED DATE DEFAULT SYSDATE NOT NULL, ").append("UPDATEDBY NUMBER(10) NOT NULL, ").append("NAME NVARCHAR2(60), ").append("AD_PACKAGE_IMP_ID Number(10) NOT NULL, ").append("AD_ORIGINAL_ID Number(10) NOT NULL, ").append("AD_BACKUP_ID Number(10), ").append("ACTION NVARCHAR2(20), ").append("SUCCESS NVARCHAR2(20), ").append("TYPE NVARCHAR2(60), ").append("TABLENAME NVARCHAR2(60), ").append("AD_TABLE_ID NUMBER(10), ").append("UNINSTALL CHAR(1), ").append("PRIMARY KEY( " + tablename.toUpperCase() + "_ID)"+ ")");        try {          PreparedStatement pstmt=DB.prepareStatement(sqlB.toString(),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE,null);          pstmt.executeUpdate();          MSequence.createTableSequence(m_ctx,"AD_Package_Imp_Detail",m_trxName);          pstmt.close();          pstmt=null;        } catch (        Exception e) {          log.info("createImp_Sum_table:" + e);        }      }      if (tablename.equals("AD_Package_Imp_Backup")) {        StringBuffer sqlB=new StringBuffer("CREATE TABLE " + tablename.toUpperCase() + "( ").append(tablename.toUpperCase() + "_ID NUMBER(10) NOT NULL, ").append("AD_CLIENT_ID NUMBER(10) NOT NULL, ").append("AD_ORG_ID  NUMBER(10) NOT NULL, ").append("ISACTIVE CHAR(1) DEFAULT 'Y' NOT NULL, ").append("CREATED DATE DEFAULT SYSDATE NOT NULL, ").append("CREATEDBY NUMBER(10) NOT NULL, ").append("UPDATED DATE DEFAULT SYSDATE NOT NULL, ").append("UPDATEDBY NUMBER(10) NOT NULL, ").append("AD_PACKAGE_IMP_ID Number(10) NOT NULL, ").append("AD_PACKAGE_IMP_DETAIL_ID Number(10) NOT NULL, ").append("AD_TABLE_ID NUMBER(10), ").append("AD_COLUMN_ID NUMBER(10), ").append("AD_REFERENCE_ID NUMBER(10), ").append("AD_PACKAGE_IMP_BCK_DIR NVARCHAR2(255), ").append("AD_PACKAGE_IMP_ORG_DIR NVARCHAR2(255), ").append("COLVALUE NVARCHAR2(2000), ").append("UNINSTALL CHAR(1), ").append("PRIMARY KEY( " + tablename.toUpperCase() + "_ID)"+ ")");        try {          PreparedStatement pstmt=DB.prepareStatement(sqlB.toString(),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE,null);          pstmt.executeUpdate();          MSequence.createTableSequence(m_ctx,"AD_Package_Imp_Backup",m_trxName);          pstmt.close();          pstmt=null;        } catch (        Exception e) {          log.info("createImp_Sum_table:" + e);        }      }    }    tables.close();  } catch (  SQLException e) {    log.info("createImp_Sum_table:" + e);  } finally {    if (conn != null) {      try {        conn.close();      } catch (      Exception e) {      }    }  }}  }
class C{  public static List<ObjectModel> loadJsonStream(InputStream input){  List<ObjectModel> models=new ArrayList<>();  Reader reader=new InputStreamReader(input);  ObjectModel[] objectModels=GSON.fromJson(reader,ObjectModel[].class);  for (  ObjectModel objectModel : objectModels) {    models.add(objectModel);  }  return models;}  }
class C{  public void fill(float val){  Arrays.fill(_data,0,_pos,val);}  }
class C{  private void doMonitor(ScalingStateMonitorTask task){  String appId=task.getAppId();  int targetCount=task.getTargetInstanceCount();  try {    CloudFoundryManager manager=CloudFoundryManager.getInstance();    int runningInstances=manager.getRunningInstances(appId);    int instances=manager.getAppInstancesByAppId(appId);    String actionId=task.getScaclingActionId();    if (runningInstances == instances) {      logger.info("Scaling is completed for application " + appId + ". Target count is "+ targetCount+ " and With current running instance number is "+ runningInstances);      ScalingStateManager.getInstance().setScalingStateCompleted(appId,actionId);      taskQueue.remove(task);    }  } catch (  CloudException e) {    logger.error("An error occurs when monitoring a scaling action for app " + task.getAppId() + "."+ e.getMessage(),e);  }catch (  AppNotFoundException e) {    taskQueue.remove(task);    logger.error("The application " + appId + " can not be found. ");  }catch (  Exception e) {    String message=e.getMessage();    if (message != null && message.contains("404 Not Found")) {      logger.warn("Application " + appId + " is not available for now. Stop to monitor the scaling status.");      taskQueue.remove(task);    } else     logger.error("An error occurs when monitoring a scaling action for app " + task.getAppId() + ". "+ e.getMessage(),e);  }}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  protected void deleteAllHistoricJobs(){  HistoricProcessInstanceQuery query=activitiHistoryService.createHistoricProcessInstanceQuery();  List<HistoricProcessInstance> historicProcessInstances=query.list();  for (  HistoricProcessInstance historicProcessInstance : historicProcessInstances) {    activitiHistoryService.deleteHistoricProcessInstance(historicProcessInstance.getId());  }}  }
class C{  protected void handleAttributes(Context context,AttributeSet attrs){  try {    TypedArray styledAttrs=context.obtainStyledAttributes(attrs,R.styleable.MaterialViewPager);{      headerLayoutId=styledAttrs.getResourceId(R.styleable.MaterialViewPager_viewpager_header,-1);    }{      pagerTitleStripId=styledAttrs.getResourceId(R.styleable.MaterialViewPager_viewpager_pagerTitleStrip,-1);      if (pagerTitleStripId == -1) {        pagerTitleStripId=R.layout.material_view_pager_pagertitlestrip_standard;      }    }{      viewpagerId=styledAttrs.getResourceId(R.styleable.MaterialViewPager_viewpager_viewpager,-1);    }{      logoLayoutId=styledAttrs.getResourceId(R.styleable.MaterialViewPager_viewpager_logo,-1);      logoMarginTop=styledAttrs.getDimensionPixelSize(R.styleable.MaterialViewPager_viewpager_logoMarginTop,0);    }{      color=styledAttrs.getColor(R.styleable.MaterialViewPager_viewpager_color,0);    }{      headerHeightPx=styledAttrs.getDimensionPixelOffset(R.styleable.MaterialViewPager_viewpager_headerHeight,200);      headerHeight=Math.round(pxToDp(headerHeightPx,context));    }{      headerAdditionalHeight=styledAttrs.getDimensionPixelOffset(R.styleable.MaterialViewPager_viewpager_headerAdditionalHeight,60);    }{      headerAlpha=styledAttrs.getFloat(R.styleable.MaterialViewPager_viewpager_headerAlpha,0.5f);    }{      imageHeaderDarkLayerAlpha=styledAttrs.getFloat(R.styleable.MaterialViewPager_viewpager_imageHeaderDarkLayerAlpha,0.0f);    }{      parallaxHeaderFactor=styledAttrs.getFloat(R.styleable.MaterialViewPager_viewpager_parallaxHeaderFactor,1.5f);      parallaxHeaderFactor=Math.max(parallaxHeaderFactor,1);    }{      hideToolbarAndTitle=styledAttrs.getBoolean(R.styleable.MaterialViewPager_viewpager_hideToolbarAndTitle,false);      hideLogoWithFade=styledAttrs.getBoolean(R.styleable.MaterialViewPager_viewpager_hideLogoWithFade,false);    }{      enableToolbarElevation=styledAttrs.getBoolean(R.styleable.MaterialViewPager_viewpager_enableToolbarElevation,false);    }{      displayToolbarWhenSwipe=styledAttrs.getBoolean(R.styleable.MaterialViewPager_viewpager_displayToolbarWhenSwipe,false);    }{      toolbarTransparent=styledAttrs.getBoolean(R.styleable.MaterialViewPager_viewpager_transparentToolbar,false);    }{      animatedHeaderImage=styledAttrs.getBoolean(R.styleable.MaterialViewPager_viewpager_animatedHeaderImage,true);    }{      disableToolbar=styledAttrs.getBoolean(R.styleable.MaterialViewPager_viewpager_disableToolbar,false);    }    styledAttrs.recycle();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected float parsePos(int index,double value){  if (handleValues)   return (float)(chartView.getInnerChartLeft() + (((value - minLabelValue) * screenStep) / (labelsValues.get(1) - minLabelValue))); else   return labelsPos.get(index);}  }
class C{  public static Impp msn(String handle){  return new Impp(MSN,handle);}  }
class C{  public Document read(InputStream in,String systemID) throws DocumentException, IOException, XmlPullParserException {  return read(createReader(in),systemID);}  }
class C{  public static List<TransitionState> makeFullViterbiStateSeq(TransitionState[][] decodeStates,Indexer<String> charIndexer){  int numLines=decodeStates.length;  @SuppressWarnings("unchecked") List<String>[] viterbiChars=new List[numLines];  List<TransitionState> fullViterbiStateSeq=new ArrayList<TransitionState>();  for (int line=0; line < numLines; ++line) {    viterbiChars[line]=new ArrayList<String>();    if (line < decodeStates.length) {      int lineLength=decodeStates[line].length;      for (int i=0; i < lineLength; ++i) {        TransitionState ts=decodeStates[line][i];        int c=ts.getGlyphChar().templateCharIndex;        if (viterbiChars[line].isEmpty() || !(HYPHEN.equals(viterbiChars[line].get(viterbiChars[line].size() - 1)) && HYPHEN.equals(charIndexer.getObject(c)))) {          viterbiChars[line].add(charIndexer.getObject(c));          fullViterbiStateSeq.add(ts);        }      }    }  }  return fullViterbiStateSeq;}  }
class C{  public static void makeVisible(){}  }
class C{  public boolean isBoolean(int key){  return get(key) instanceof Boolean;}  }
class C{  public boolean regionMatches(int toffset,String other,int ooffset,int len){  return value.regionMatches(toffset,other,ooffset,len);}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  protected final void copyAttribute(int nodeID,int exptype,SerializationHandler handler) throws SAXException {  final ExtendedType extType=m_extendedTypes[exptype];  final String uri=extType.getNamespace();  final String localName=extType.getLocalName();  String prefix=null;  String qname=null;  int dataIndex=_dataOrQName(nodeID);  int valueIndex=dataIndex;  if (dataIndex <= 0) {    int prefixIndex=m_data.elementAt(-dataIndex);    valueIndex=m_data.elementAt(-dataIndex + 1);    qname=m_valuesOrPrefixes.indexToString(prefixIndex);    int colonIndex=qname.indexOf(':');    if (colonIndex > 0) {      prefix=qname.substring(0,colonIndex);    }  }  if (uri.length() != 0) {    handler.namespaceAfterStartElement(prefix,uri);  }  String nodeName=(prefix != null) ? qname : localName;  String nodeValue=(String)m_values.elementAt(valueIndex);  handler.addAttribute(nodeName,nodeValue);}  }
class C{  public JPEGHuffmanTable(short[] lengths,short[] values){  if (lengths == null || values == null || lengths.length == 0 || values.length == 0 || lengths.length > 16 || values.length > 256) {    throw new IllegalArgumentException("Illegal lengths or values");  }  for (int i=0; i < lengths.length; i++) {    if (lengths[i] < 0) {      throw new IllegalArgumentException("lengths[" + i + "] < 0");    }  }  for (int i=0; i < values.length; i++) {    if (values[i] < 0) {      throw new IllegalArgumentException("values[" + i + "] < 0");    }  }  this.lengths=Arrays.copyOf(lengths,lengths.length);  this.values=Arrays.copyOf(values,values.length);  validate();}  }
class C{  private void issueErrorIfGuardSatisfiedAnnotationInUnsupportedLocation(AnnotationTree annotationTree){  TreePath currentPath=getCurrentPath();  TreePath path=getPathForLocalVariableRetrieval(currentPath);  if (path != null) {    Tree tree=path.getLeaf();    Tree.Kind kind=tree.getKind();    if (kind == Tree.Kind.METHOD) {      return;    } else     if (kind == Tree.Kind.VARIABLE) {      VariableTree varTree=(VariableTree)tree;      Tree varTypeTree=varTree.getType();      if (varTypeTree != null) {        TreePath parentPath=path.getParentPath();        if (parentPath != null && parentPath.getLeaf().getKind() == Tree.Kind.METHOD) {          Tree.Kind varTypeTreeKind=varTypeTree.getKind();          if (varTypeTreeKind == Tree.Kind.ANNOTATED_TYPE) {            AnnotatedTypeTree annotatedTypeTree=(AnnotatedTypeTree)varTypeTree;            if (annotatedTypeTree.getUnderlyingType().getKind() != Tree.Kind.ARRAY_TYPE || annotatedTypeTree.getAnnotations().contains(annotationTree)) {              return;            }          } else           if (varTypeTreeKind != Tree.Kind.ARRAY_TYPE) {            return;          }        }      }    }  }  checker.report(Result.failure("guardsatisfied.location.disallowed"),annotationTree);}  }
class C{  public boolean isRetried(){  return hasFailed() && retried_;}  }
class C{  public boolean isNot(){  return not;}  }
class C{  public boolean hasBatchOperation(){  return hasExtension(BatchOperation.class);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  @SuppressWarnings("unchecked") public String register(String channel,String scope,Serializable user){switch (Scope.of(scope,user)) {case APPLICATION:    return register(null,channel,APPLICATION_SCOPE,sessionScope,getViewScope(false));case SESSION:  return register(user,channel,sessionScope,APPLICATION_SCOPE,getViewScope(false));case VIEW:return register(user,channel,getViewScope(true),APPLICATION_SCOPE,sessionScope);default :throw new UnsupportedOperationException();}}  }
class C{  public void testMaxUnequal2(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=41;  String b="94488478231212478987482988429808779810457634781384756794987";  int bScale=41;  String c="92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=41;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.max(bNumber));}  }
class C{  public void addKeyInfoReference(String URI) throws XMLSecurityException {  this.add(new KeyInfoReference(this.doc,URI));}  }
class C{  private View obtainView(int position,boolean[] isScrap){  isScrap[0]=false;  View scrapView;  scrapView=mRecycleBin.getScrapView(position);  View child;  if (scrapView != null) {    if (DBG)     Log.d(TAG,"getView from scrap position:" + position);    child=mAdapter.getView(position,scrapView,this);    if (child != scrapView) {      mRecycleBin.addScrapView(scrapView,position);    } else {      isScrap[0]=true;    }  } else {    if (DBG)     Log.d(TAG,"getView position:" + position);    child=mAdapter.getView(position,null,this);  }  return child;}  }
class C{  public JBoss5xRuntimeConfigurationCapability(){  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.CONFIGURATION,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.CLUSTERED,Boolean.TRUE);  this.propertySupportMap.put(JBossPropertySet.PROFILE,Boolean.TRUE);}  }
class C{  public static void println(double x){  out.println(x);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  boolean found=false;  for (ElemTemplateElement childElem=getFirstChildElem(); childElem != null; childElem=childElem.getNextSiblingElem()) {    int type=childElem.getXSLToken();    if (Constants.ELEMNAME_WHEN == type) {      found=true;      ElemWhen when=(ElemWhen)childElem;      XPathContext xctxt=transformer.getXPathContext();      int sourceNode=xctxt.getCurrentNode();      if (when.getTest().bool(xctxt,sourceNode,when)) {        transformer.executeChildTemplates(when,true);        return;      }    } else     if (Constants.ELEMNAME_OTHERWISE == type) {      found=true;      transformer.executeChildTemplates(childElem,true);      return;    }  }  if (!found)   transformer.getMsgMgr().error(this,XSLTErrorResources.ER_CHOOSE_REQUIRES_WHEN);}  }
class C{  public boolean isSipURI(){  return false;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__DEFINED_TYPE:    if (resolve)     return getDefinedType();  return basicGetDefinedType();case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__DECLARED_DYNAMIC:return isDeclaredDynamic();case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER__ALIAS:return getAlias();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  super.endElement(handler,uri,localName,rawName);  handler.popElemTemplateElement();  handler.popStylesheet();}  }
class C{  public void nextBytes(byte[] bytes){  for (int x=0; x < bytes.length; x++)   bytes[x]=(byte)next(8);}  }
class C{  private void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  validateTaskSubStage(patchState.taskState);  ValidationUtils.validateTaskStageProgression(startState.taskState,patchState.taskState);  if (null != startState.taskState.subStage && null != patchState.taskState.subStage) {    checkState(patchState.taskState.subStage.ordinal() >= startState.taskState.subStage.ordinal());  }}  }
class C{  public synchronized void add(Peer peer){  String hash=peer.get(Peer.Schema.hash);  if (hash == null)   return;  Peer p=this.put(ASCII.getBytes(hash),peer);  if (p == null)   return;  if (p.lastseenTime() < peer.lastseenTime())   this.put(ASCII.getBytes(hash),p);}  }
class C{  protected int _rowRank(int rank){  return rowZero + rank * rowStride;}  }
class C{  public void checkServerTrusted(X509Certificate[] chain,String authType){}  }
class C{  public AvatarImage(AccountInfo account,int size,boolean addPopup){  addLoadHandler(this);  setAccount(account,size,addPopup);}  }
class C{  public static _WorkingFolderType fromString(final String value) throws SOAPSerializationException {  return (_WorkingFolderType)Enumeration.fromString(value,_WorkingFolderType.VALUES_TO_INSTANCES);}  }
class C{  public FireworkEffectType(String enumName,int typeID){  super(enumName);  this.typeID=(byte)typeID;}  }
class C{  public static TopParams create(@NotNull String container){  return new TopParams().withContainer(container);}  }
class C{  public ConfigurationSection createConfigurationSection(String path){  ConfigurationSection cs=fileConfiguration.createSection(path);  try {    fileConfiguration.save(file);  } catch (  Exception e) {    e.printStackTrace();  }  return cs;}  }
class C{  protected static Object[] concatenate(Object[] a1,Object[] a2){  int a1Len=a1.length;  int a2Len=a2.length;  if (a1Len == 0)   return a2;  if (a2Len == 0)   return a1;  Object[] res=new Object[a1Len + a2Len];  System.arraycopy(a1,0,res,0,a1Len);  System.arraycopy(a2,0,res,a1Len,a2Len);  return res;}  }
class C{  private void checkMaximumDistance(Geometry input,Geometry bufCurve,double maxDist){  DiscreteHausdorffDistance haus=new DiscreteHausdorffDistance(bufCurve,input);  haus.setDensifyFraction(0.25);  maxDistanceFound=haus.orientedDistance();  if (maxDistanceFound > maxDist) {    isValid=false;    Coordinate[] pts=haus.getCoordinates();    errorLocation=pts[1];    errorIndicator=input.getFactory().createLineString(pts);    errMsg="Distance between buffer curve and input is too large " + "(" + maxDistanceFound + " at "+ WKTWriter.toLineString(pts[0],pts[1])+ ")";  }}  }
class C{  public void testCrawl_Page(){  System.out.println("crawl_page");  crawlerFactory.setCrawlConfigFilePath(PAGE_CRAWL_CONF_FILE_PATH);  String siteUrl=bundle.getString(FULL_SITE_CRAWL_URL_KEY);  Audit audit=new AuditImpl();  audit.setParameterSet(setCrawlParameters("3","","","",""));  WebResource page=crawlerService.crawlPage(audit,siteUrl);  Collection<Long> contentListId=mockContentDataService.getSSPIdsFromWebResource(page.getId(),HttpStatus.SC_OK,0,10);  List<Content> contentList=new ArrayList<>();  for (  Long id : contentListId) {    contentList.add(mockContentDataService.readWithRelatedContent(id,false));  }  assertEquals(1,contentList.size());  Set<String> urlSet=getUrlSet(contentList);  assertTrue(urlSet.contains(siteUrl));  assertFalse(urlSet.contains(siteUrl + PAGE_NAME_LEVEL1));  assertFalse(urlSet.contains(siteUrl + PAGE_NAME_LEVEL2));  assertFalse(urlSet.contains(siteUrl + FORBIDDEN_PAGE_NAME));}  }
class C{  private boolean revisionIsCurrent(NativeValue value){  return revision.equals(value.getValueStoreRevision());}  }
class C{  @Override public Date readDate(Type target){  int ref=readAMF3Integer();  if ((ref & 1) == 0) {    return (Date)getReference(ref >> 1);  }  long ms=(long)buf.getDouble();  Date date=new Date(ms);  storeReference(date);  return date;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:14.063 -0500",hash_original_method="EDCCEC3121F6C5E9B0FA391DCCD578AC",hash_generated_method="42BD6C6AD200AF45DBF1A2C083230116") public ASN1InputStream(InputStream input,int limit){  this(input,limit,false);}  }
class C{  public static int typeTagOf(char descriptor){switch (descriptor) {case 'D':    return DOUBLE;case 'F':  return FLOAT;case 'J':return LONG;case 'L':case '[':return OBJECT;default :return INTEGER;}}  }
class C{  public static void d(String msg){  if (Config.LOG <= Level.DEBUG) {    Log.d(TAG,msg);  }}  }
class C{  @Override protected void doSetNextReader(LeafReaderContext context) throws IOException {  if (multiValued) {    setValues=context.reader().getSortedSetDocValues(name);  } else {    if (numField) {      numValues=context.reader().getNumericDocValues(name);    } else {      sortValues=context.reader().getSortedDocValues(name);    }  }}  }
class C{  private Pair<Integer,String> checkEmailText(){  int i=0;  for (  String address : getEmailAddresses()) {    if (!address.isEmpty() && !EMailUtils.isValidEmailAddress(address)) {      return new Pair<Integer,String>(i + 1,address);    }    i++;  }  return null;}  }
class C{  public AccessModifierComponent(AccessModifiableModel model,WizardComponentContainer container){  super(container);  this.model=model;  this.componentContainer=container;  this.dataBindingContext=container.getDataBindingContext();  Label accessModifierLabel=new Label(componentContainer.getComposite(),SWT.NONE);  accessModifierLabel.setLayoutData(fillLabelDefaults());  accessModifierLabel.setText("Access modifier:");  Composite accessModifiersComposite=new Composite(componentContainer.getComposite(),SWT.NONE);  accessModifiersComposite.setLayout(RowLayoutFactory.swtDefaults().extendedMargins(0,0,0,0).create());  GridData accessModifiersCompositeLayoutData=fillTextDefaults();  accessModifiersCompositeLayoutData.horizontalSpan=2;  accessModifiersComposite.setLayoutData(accessModifiersCompositeLayoutData);  publicAccessModifierBox=new Button(accessModifiersComposite,SWT.RADIO);  publicAccessModifierBox.setText("public");  projectAccessModifierBox=new Button(accessModifiersComposite,SWT.RADIO);  projectAccessModifierBox.setText("project");  privateAccessModifierBox=new Button(accessModifiersComposite,SWT.RADIO);  privateAccessModifierBox.setText("private");  internalAnnotationBox=new Button(accessModifiersComposite,SWT.CHECK);  getInternalAnnotationBox().setText("@Internal");  setupBindings();}  }
class C{  @Override public int compare(ExtensionFileFilter o1,ExtensionFileFilter o2){  int result;  int i;  result=0;  for (i=0; i < o1.getExtensions().length && i < o2.getExtensions().length; i++) {    result=o1.getExtensions()[i].compareTo(o2.getExtensions()[i]);    if (result != 0)     break;  }  if ((result == 0) && (o1.getExtensions().length != o2.getExtensions().length))   result=new Integer(o1.getExtensions().length).compareTo(o2.getExtensions().length);  return result;}  }
class C{  private void writeOccupancy(String outputFolder,Counts<Link> paxCounts,Counts<Link> capCounts){  String fileName=outputFolder + this.createFilename(TAXI_PREFIX,TaxiTravelStatsAnalyzer.OCCUPANCY);  try {    BufferedWriter bw=new BufferedWriter(new FileWriter(new File(fileName)));    bw.write(this.header);    for (int i=0; i < 25; i++) {      bw.write(separator + i);    }    for (    Entry<Id<Link>,Count<Link>> linkId2Count : capCounts.getCounts().entrySet()) {      bw.newLine();      bw.write(linkId2Count.getKey().toString());      Link link=this.scenario.getNetwork().getLinks().get(linkId2Count.getKey());      bw.write(separator + link.getFromNode().getCoord().getX());      bw.write(separator + link.getFromNode().getCoord().getY());      bw.write(separator + link.getToNode().getCoord().getX());      bw.write(separator + link.getToNode().getCoord().getY());      double capSum=0.0;      for (      Volume volume : linkId2Count.getValue().getVolumes().values()) {        capSum+=volume.getValue();      }      double paxSum=0.0;      for (      Volume volume : paxCounts.getCounts().get(linkId2Count.getKey()).getVolumes().values()) {        paxSum+=volume.getValue();      }      if (capSum == 0.0) {        bw.write(separator + 0.0);      } else {        bw.write(separator + paxSum / capSum);      }      for (int i=0; i < 25; i++) {        double capValue=0.0;        if (linkId2Count.getValue().getVolume(i) != null) {          capValue=linkId2Count.getValue().getVolume(i).getValue();        }        double paxValue=0.0;        if (paxCounts.getCounts().get(linkId2Count.getKey()).getVolume(i) != null) {          paxValue=paxCounts.getCounts().get(linkId2Count.getKey()).getVolume(i).getValue();        }        if (capValue == 0.0) {          bw.write(separator + 0.0);        } else {          bw.write(separator + paxValue / capValue);        }      }    }    bw.close();    log.info("Output written to " + fileName);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static ASTList concat(ASTList a,ASTList b){  if (a == null)   return b; else {    ASTList list=a;    while (list.right != null)     list=list.right;    list.right=b;    return a;  }}  }
class C{  private List<MBrowseField> initBrowserTable(){  List<MBrowseField> list=initBrowserData();  if (list.size() == 0) {    FDialog.error(getWindowNo(),m_frame,"Error","No Browse Fields");    log.log(Level.SEVERE,"No Browser for view=" + m_View.getName());    return null;  }  log.finest("Browse Fields #" + list.size());  return list;}  }
class C{  public void testCloneFloat(){  final Float float1=new Float(8);  final Float cloned=cloner.deepClone(float1);  assertSame(float1,cloned);  assertEquals(float1,cloned);}  }
class C{  public boolean hasNextFeature(){  return (currentFeatureIdx < currentFeatures.size());}  }
class C{  public java.util.ArrayList<TreeNode<E>> path(E e){  java.util.ArrayList<TreeNode<E>> list=new java.util.ArrayList<>();  TreeNode<E> current=root;  while (current != null) {    list.add(current);    if (e.compareTo(current.element) < 0) {      current=current.left;    } else     if (e.compareTo(current.element) > 0) {      current=current.right;    } else     break;  }  return list;}  }
class C{  private Rectangle2D drawFill(Graphics2D g2,Rectangle2D area){  Rectangle2D filledArea=(Rectangle2D)area.clone();  filledArea=trimMargin(filledArea);  filledArea=trimBorder(filledArea);  area=trimPadding(area);  g2.setPaint(this.fillPaint);  g2.fill(filledArea);  drawBorder(g2,filledArea);  return filledArea;}  }
class C{  private void addAllWithExactNumber(Population pop,double[] weights,int startIndex,int exactNumberOfFeatures){  Individual individual=new Individual(weights);  if (individual.getNumberOfUsedAttributes() > exactNumberOfFeatures) {    return;  }  for (int i=startIndex; i < weights.length; i++) {    double[] clone=individual.getWeightsClone();    clone[i]=1.0d;    Individual newIndividual=new Individual(clone);    if (newIndividual.getNumberOfUsedAttributes() == exactNumberOfFeatures) {      pop.add(newIndividual);    } else {      addAllWithExactNumber(pop,clone,i + 1,exactNumberOfFeatures);    }  }}  }
class C{  public static void eachFileRecurse(final File self,final FileType fileType,@ClosureParams(value=SimpleType.class,options="java.io.File") final Closure closure) throws FileNotFoundException, IllegalArgumentException {  checkDir(self);  final File[] files=self.listFiles();  if (files == null)   return;  for (  File file : files) {    if (file.isDirectory()) {      if (fileType != FileType.FILES)       closure.call(file);      eachFileRecurse(file,fileType,closure);    } else     if (fileType != FileType.DIRECTORIES) {      closure.call(file);    }  }}  }
class C{  public Component findNextFocusHorizontal(boolean right){  Container actual=getActualPane();  Component c=findNextFocusHorizontal(focused,null,actual,right);  if (c != null) {    return c;  }  if (cyclicFocus) {    c=findNextFocusHorizontal(focused,null,actual,!right);    if (c != null) {      Component current=findNextFocusHorizontal(c,null,actual,!right);      while (current != null) {        c=current;        current=findNextFocusHorizontal(c,null,actual,!right);      }      return c;    }  }  return null;}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public boolean createMirrorSession(URI systemURI,URI sourceURI,URI targetURI,URI vpoolChangeUri,String opId){  log.info("Create Mirror Session between source and Target Pair");  TaskCompleter completer=null;  try {    WorkflowStepCompleter.stepExecuting(opId);    StorageSystem system=getStorageSystem(systemURI);    completer=new MirrorFileCreateTaskCompleter(sourceURI,targetURI,vpoolChangeUri,opId);    getRemoteMirrorDevice(system).doCreateMirrorLink(system,sourceURI,targetURI,completer);    log.info("Source: {}",sourceURI);    log.info("Target: {}",targetURI);    log.info("OpId: {}",opId);  } catch (  Exception e) {    ServiceError error=DeviceControllerException.errors.jobFailed(e);    if (null != completer) {      completer.error(dbClient,error);    }    WorkflowStepCompleter.stepFailed(opId,error);    return false;  }  return true;}  }
class C{  public int stepToPreviousScreenEvent() throws JavaRosaException {  try {    if (getEvent() != FormEntryController.EVENT_BEGINNING_OF_FORM) {      int event=stepToPreviousEvent();      while (event == FormEntryController.EVENT_REPEAT_JUNCTURE || event == FormEntryController.EVENT_PROMPT_NEW_REPEAT || (event == FormEntryController.EVENT_QUESTION && indexIsInFieldList()) || ((event == FormEntryController.EVENT_GROUP || event == FormEntryController.EVENT_REPEAT) && !indexIsInFieldList())) {        event=stepToPreviousEvent();      }      if (getEvent() == FormEntryController.EVENT_GROUP) {        FormIndex currentIndex=getFormIndex();        IFormElement element=mFormEntryController.getModel().getForm().getChild(currentIndex);        if (element instanceof GroupDef) {          GroupDef gd=(GroupDef)element;          if (ODKView.FIELD_LIST.equalsIgnoreCase(gd.getAppearanceAttr())) {            FormEntryCaption[] fclist=this.getCaptionHierarchy(currentIndex);            if (fclist.length > 1) {              FormEntryCaption fc=fclist[fclist.length - 2];              GroupDef pd=(GroupDef)fc.getFormElement();              if (pd.getChildren().size() == 1 && ODKView.FIELD_LIST.equalsIgnoreCase(pd.getAppearanceAttr())) {                mFormEntryController.jumpToIndex(fc.getIndex());              }            }          }        }      }    }    return getEvent();  } catch (  RuntimeException e) {    throw new JavaRosaException(e);  }}  }
class C{  public boolean isInProgress(){  return inProgress;}  }
class C{  protected EchelonSymbol createEchelonSymbol(String sidc){  EchelonSymbol symbol=new EchelonSymbol(sidc);  if (this.symbolAttributes == null)   this.symbolAttributes=new BasicTacticalSymbolAttributes();  symbol.setAttributes(this.symbolAttributes);  return symbol;}  }
class C{  public DocumentListEntry(){  super();}  }
class C{  boolean transmit(SSegment seg,long now){  if (seg.xmit >= ((m_state == PseudoTcpState.TCP_ESTABLISHED) ? 15 : 30)) {    logger.log(Level.FINE,"too many retransmits");    return false;  }  long nTransmit=Math.min(seg.len,m_mss);  while (true) {    long seq=seg.seq;    short flags=(seg.bCtrl ? FLAG_CTL : 0);    WriteResult wres=packet(seq,flags,seg.seq - m_snd_una,nTransmit);    if (wres == WriteResult.WR_SUCCESS) {      break;    }    if (wres == WriteResult.WR_FAIL) {      logger.log(Level.WARNING,"packet failed");      return false;    }    assert wres == WriteResult.WR_TOO_LARGE;    while (true) {      if (PACKET_MAXIMUMS[(m_msslevel + 1)] == 0) {        logger.log(Level.INFO,"MTU too small");        return false;      }      m_mss=PACKET_MAXIMUMS[++m_msslevel] - PACKET_OVERHEAD;      m_cwnd=2 * m_mss;      if (m_mss < nTransmit) {        nTransmit=m_mss;        break;      }    }    if (logger.isLoggable(Level.INFO)) {      logger.log(Level.INFO,"Adjusting mss to " + m_mss + " bytes");    }  }  if (nTransmit < seg.len) {    if (logger.isLoggable(Level.INFO)) {      logger.log(Level.INFO,"mss reduced to " + m_mss);    }    SSegment subseg=new SSegment(seg.seq + nTransmit,seg.len - nTransmit,seg.bCtrl);    subseg.xmit=seg.xmit;    seg.len=nTransmit;    m_slist.add(m_slist.indexOf(seg) + 1,subseg);  }  if (seg.xmit == 0) {    m_snd_nxt+=seg.len;  }  seg.xmit+=1;  if (m_rto_base == 0) {    m_rto_base=now;  }  return true;}  }
class C{  @Override public boolean isOperational(){  return inputStreams.get(key) != null;}  }
class C{  public SQLTransientConnectionException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public void addListener(ActionListener<RestoreCompletionResponse> listener){  this.listeners.add(listener);}  }
class C{  public boolean isTagPresent(int tag){  return fieldIndex.containsKey(new Integer(tag));}  }
class C{  public static String asciiString(byte[] buf,int start,int len){  return new String(buf,start,len,US_ASCII);}  }
class C{  public TraceReactionWillFire createTraceReactionWillFire(){  TraceReactionWillFireImpl traceReactionWillFire=new TraceReactionWillFireImpl();  return traceReactionWillFire;}  }
class C{  @Override public Clob createClob() throws SQLException {  try {    int id=getNextId(TraceObject.CLOB);    debugCodeAssign("Clob",TraceObject.CLOB,id,"createClob()");    checkClosedForWrite();    try {      Value v=ValueLobDb.createTempClob(new InputStreamReader(new ByteArrayInputStream(Utils.EMPTY_BYTES)),0);      session.addTemporaryLob(v);      return new JdbcClob(this,v,id);    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Builder wordConfidence(Boolean wordConfidence){  this.wordConfidence=wordConfidence;  return this;}  }
class C{  Address(String type,long id,LinkedHashMap<String,ArrayList<String>> tags){  OsmElement e=Application.getDelegator().getOsmElement(type,id);  if (e == null) {    Log.e(DEBUG_TAG,type + " " + id+ " doesn't exist in storage ");    return;  }  init(e,tags);}  }
class C{  public static String toJSONString(Object value){  if (value == null)   return "null";  if (value instanceof String)   return "\"" + escape((String)value) + "\"";  if (value instanceof Double) {    if (((Double)value).isInfinite() || ((Double)value).isNaN())     return "null"; else     return value.toString();  }  if (value instanceof Float) {    if (((Float)value).isInfinite() || ((Float)value).isNaN())     return "null"; else     return value.toString();  }  if (value instanceof Number)   return value.toString();  if (value instanceof Boolean)   return value.toString();  if ((value instanceof JSONAware))   return ((JSONAware)value).toJSONString();  if (value instanceof Map)   return JSONObject.toJSONString((Map)value);  if (value instanceof List)   return JSONArray.toJSONString((List)value);  return value.toString();}  }
class C{  public final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:52.079 -0500",hash_original_method="AF3422E1C079F6B2A15130B45797502F",hash_generated_method="AF3422E1C079F6B2A15130B45797502F") boolean isSealed(){  return mSealed;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.908 -0500",hash_original_method="4ED8FEC7EC4817417CFF539CEB8CD3D5",hash_generated_method="5C4D73D90534F267ACD4AF169BAC2F86") public void inset(float dx,float dy){  addTaintLocal(dx + dy);}  }
class C{  public static byte[] decode(String s){  return decode(s.toCharArray());}  }
class C{  public static boolean equalsWithNullCheck(Object a,Object b){  if (a == null) {    return (b == null);  }  return a.equals(b);}  }
class C{  public ModbusRTUTCPTransport(Socket socket){  super(socket);  setHeadless();}  }
class C{  public void persistCandleSeries(final CandleSeries candleSeries) throws PersistentModelException {  try {    if (null == candleSeries.getContract().getIdContract()) {      Contract contract=this.persistContract(candleSeries.getContract());      candleSeries.getContract().setIdContract(contract.getIdContract());      candleSeries.getContract().setVersion(contract.getVersion());    }    m_candleHome.persistCandleSeries(candleSeries);  } catch (  OptimisticLockException ex1) {    throw new PersistentModelException("Error saving CandleSeries please refresh before save.");  }catch (  Exception e) {    throw new PersistentModelException("Error saving CandleSeries: " + candleSeries.getDescription() + "\n Msg: "+ e.getMessage());  }}  }
class C{  public static double[][] solveViaCholeskyResult(double[][] L,double[][] B){  int aRows=L.length;  if (aRows != B.length) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  double[][] X=MatrixUtils.arrayCopy(B);  int bCols=B[0].length;  for (int k=0; k < aRows; k++) {    for (int j=0; j < bCols; j++) {      for (int i=0; i < k; i++) {        X[k][j]-=X[i][j] * L[k][i];      }      X[k][j]/=L[k][k];    }  }  for (int k=aRows - 1; k >= 0; k--) {    for (int j=0; j < bCols; j++) {      for (int i=k + 1; i < aRows; i++) {        X[k][j]-=X[i][j] * L[i][k];      }      X[k][j]/=L[k][k];    }  }  return X;}  }
class C{  public JSONWriter object() throws JSONException {  if (this.mode == 'i') {    this.mode='o';  }  if (this.mode == 'o' || this.mode == 'a') {    this.append("{");    this.push(new JSONObject());    this.comma=false;    return this;  }  throw new JSONException("Misplaced object.");}  }
class C{  public History fetchRecentPipelineHistory(Rules rules) throws URISyntaxException, IOException {  if (mRecentPipelineHistory == null) {    Server server=serverFactory.getServer(rules);    mRecentPipelineHistory=server.getPipelineHistory(pipeline.name);  }  return mRecentPipelineHistory;}  }
class C{  public String scrollId(){  return scrollId;}  }
class C{  static public void inssort(float[] array){  float tmp;  for (int i=1; i < array.length; i++)   for (int j=i; (j > 0) && (array[j] < array[j - 1]); j--) {    tmp=array[j];    array[j]=array[j - 1];    array[j - 1]=tmp;  }}  }
class C{  private void genPreambleStaticInitializers() throws JasperException {  out.printil("private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();");  out.println();  out.printil("private static java.util.List<String> _jspx_dependants;");  out.println();  List<String> dependants=pageInfo.getDependants();  Iterator<String> iter=dependants.iterator();  if (!dependants.isEmpty()) {    out.printil("static {");    out.pushIndent();    out.printin("_jspx_dependants = new java.util.ArrayList<String>(");    out.print("" + dependants.size());    out.println(");");    while (iter.hasNext()) {      out.printin("_jspx_dependants.add(\"");      out.print(iter.next());      out.println("\");");    }    out.popIndent();    out.printil("}");    out.println();  }  if (genBytes) {    String contentType=pageInfo.getContentType();    String encoding="ISO-8859-1";    int i=contentType.indexOf("charset=");    if (i > 0)     encoding=contentType.substring(i + 8);    try {      "testing".getBytes(encoding);      out.printin("private static final String _jspx_encoding = ");      out.print(quote(encoding));      out.println(";");      out.printil("private boolean _jspx_gen_bytes = true;");      out.printil("private boolean _jspx_encoding_tested;");    } catch (    java.io.UnsupportedEncodingException ex) {      genBytes=false;    }  }}  }
class C{  public final SpaceEffGraphNode fromNode(){  return _fromNode;}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  HideFileDao.dropTable(db,ifExists);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.469 -0500",hash_original_method="7494058829006BF7A7CEB593562FC10D",hash_generated_method="F5D0E2CEBBA0D53949FF1561E59A2401") public final boolean greaterEquals(ProtocolVersion version){  return isComparable(version) && (compareToVersion(version) >= 0);}  }
class C{  public PrinterMoreInfoManufacturer(URI uri){  super(uri);}  }
class C{  private void drawLines(DrawPane drawPane){  drawPane.erase();  int lineWidth=(Integer)lineStyleDynamicForm.getValue("lineWidth");  String lineStyle=(String)lineStyleDynamicForm.getValue("lineStyle");  String arrowheadStyle=(String)lineStyleDynamicForm.getValue("arrowheadStyle");  LineCap lineCap=null;  if (LineCap.BUTT.getValue().equals(arrowheadStyle)) {    lineCap=LineCap.BUTT;  } else   if (LineCap.ROUND.getValue().equals(arrowheadStyle)) {    lineCap=LineCap.ROUND;  } else   if (LineCap.SQUARE.getValue().equals(arrowheadStyle)) {    lineCap=LineCap.SQUARE;  }  LinePattern linePattern=null;  if (LinePattern.DASH.getValue().equals(lineStyle)) {    linePattern=LinePattern.DASH;  } else   if (LinePattern.DOT.getValue().equals(lineStyle)) {    linePattern=LinePattern.DOT;  } else   if (LinePattern.LONGDASH.getValue().equals(lineStyle)) {    linePattern=LinePattern.LONGDASH;  } else   if (LinePattern.SHORTDASH.getValue().equals(lineStyle)) {    linePattern=LinePattern.SHORTDASH;  } else   if (LinePattern.SHORTDOT.getValue().equals(lineStyle)) {    linePattern=LinePattern.SHORTDOT;  } else   if (LinePattern.SOLID.getValue().equals(lineStyle)) {    linePattern=LinePattern.SOLID;  }  DrawLine drawLine=new DrawLine();  drawLine.setDrawPane(drawPane);  drawLine.setStartPoint(new Point(20,30));  drawLine.setEndPoint(new Point(180,160));  drawLine.setLineWidth(lineWidth);  drawLine.setLineCap(lineCap);  drawLine.setLinePattern(linePattern);  drawLine.draw();  DrawLinePath drawLinePath=new DrawLinePath();  drawLinePath.setDrawPane(drawPane);  drawLinePath.setStartTop(40);  drawLinePath.setStartLeft(170);  drawLinePath.setEndLeft(340);  drawLinePath.setEndTop(160);  drawLinePath.setLineWidth(lineWidth);  drawLinePath.setLineCap(lineCap);  drawLinePath.setLinePattern(linePattern);  drawLinePath.draw();}  }
class C{  private void createAndShowGUI(){  frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  frame.setVisible(true);}  }
class C{  protected int dotNumber() throws IOException {  loop:   for (; ; ) {switch (nextChar()) {default :      break loop;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  }}return NUMBER;}  }
class C{  public static Result ping(){  return ok(Json.toJson("alive"));}  }
class C{  private static Set<String> parseBots(String json){  Set<String> result=new HashSet<>();  if (json == null) {    return result;  }  JSONParser parser=new JSONParser();  try {    JSONObject root=(JSONObject)parser.parse(json);    JSONArray botsArray=(JSONArray)root.get("bots");    if (botsArray == null) {      return result;    }    for (    Object o : botsArray) {      result.add((String)o);    }  } catch (  ParseException|ClassCastException ex) {    LOGGER.warning("BTTV: Error parsing bots: " + ex);  }  return result;}  }
class C{  public final void loadFile(final String strFileName) throws IOException {  try {    Load1.load(strFileName,this);  } catch (  ClassNotFoundException ex) {    throw new JIPTypeException(JIPTypeException.LIBRARY,Atom.createAtom(strFileName));  }}  }
class C{  @Override public void draw(final Canvas canvas){}  }
class C{  public void start(){  if (dependencies.isEmpty()) {    EXECUTOR.execute(makeWrapper());  } else {    boolean blocked=false;synchronized (LOCK) {      blocked=isBlockedByDependencies();    }    if (!blocked) {      EXECUTOR.execute(makeWrapper());    } else {synchronized (LOCK) {        queuedThreads.add(this);      }      taskQueued(this);    }  }}  }
class C{  public boolean isAfter(Date that){  return compareTo(that) > 0;}  }
class C{  private void checkNext() throws GridNioException {  if (nextFilter == null)   throw new GridNioException("Failed to proceed with filter call since previous filter is not set " + "(do you use filter outside the filter chain?): " + getClass().getName());}  }
class C{  public void addLink(Id<Link> newLinkId,Id<Node> fromNodeId,Id<Node> toNodeId,Id<Link> attributeLinkId){  Node fromNode=network.getNodes().get(fromNodeId);  Node toNode=network.getNodes().get(toNodeId);  Link newLink=networkFactory.createLink(newLinkId,fromNode,toNode);  if (attributeLinkId != null) {    Link attributeLink=network.getLinks().get(attributeLinkId);    newLink.setAllowedModes(attributeLink.getAllowedModes());    newLink.setCapacity(attributeLink.getCapacity());    newLink.setFreespeed(attributeLink.getFreespeed());    newLink.setNumberOfLanes(attributeLink.getNumberOfLanes());  }  network.addLink(newLink);}  }
class C{  public static ImageInfo renderImage(String symbolCode,SparseArray<String> modifiers,SparseArray<String> attributes){  if (!initialized) {    throw new IllegalStateException(Logger.logMessage(Logger.ERROR,"MilStd2525","renderImage","renderer has not been initialized."));  }  SparseArray<String> unitModifiers=modifiers == null ? new SparseArray<String>() : modifiers;  SparseArray<String> renderAttributes=attributes == null ? new SparseArray<String>() : attributes;  if (!renderer.CanRender(symbolCode,unitModifiers,renderAttributes)) {    return null;  }  return renderer.RenderIcon(symbolCode,unitModifiers,renderAttributes);}  }
class C{  public static void wtf(String tag,String msg){  wtf(tag,msg,null);}  }
class C{  public static void testAddressBooks(Context context){  long startTime=System.currentTimeMillis();  EventBus.getDefault().post(new LogTestDataEvent(-1,FRAMEWORK_NAME,MainActivity.SAVE_TIME));  EventBus.getDefault().post(new LogTestDataEvent(-1,FRAMEWORK_NAME,MainActivity.LOAD_TIME));}  }
class C{  public void test_createSolutionSet_01() throws UpdateExecutionException, RepositoryException, MalformedQueryException {  if (!isSolutionSetUpdateEnabled()) {    return;  }  try {    con.prepareUpdate(QueryLanguage.SPARQL,"drop solutions %namedSet1").execute();    fail("Excepting: " + UpdateExecutionException.class);  } catch (  UpdateExecutionException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  con.prepareUpdate(QueryLanguage.SPARQL,"create solutions %namedSet1").execute();  con.prepareUpdate(QueryLanguage.SPARQL,"drop solutions %namedSet1").execute();}  }
class C{  public CircuitBreakerBuilder failureRateThreshold(double failureRateThreshold){  if (failureRateThreshold <= 0 || 1 < failureRateThreshold) {    throw new IllegalArgumentException("failureRateThreshold: " + failureRateThreshold + " (expected: > 0 and <= 1)");  }  this.failureRateThreshold=failureRateThreshold;  return this;}  }
class C{  private void refresh(String limit){  mSwipeRefreshLayout.setEnabled(false);  mDBNotifyCounter=0;  mFetchedOnOpen=false;  if (mUserId.equals(AppConstants.UserInfo.INSTANCE.getId())) {    String selection=DatabaseColumns.ID + " NOT IN ( SELECT " + DatabaseColumns.ID+ " from "+ TableWallPosts.NAME+ " order by "+ DatabaseColumns.TIMESTAMP_EPOCH_UPDATED_AT+ " desc limit "+ limit+ ")"+ SQLConstants.AND+ DatabaseColumns.USER_ID+ SQLConstants.EQUALS_ARG;    DBInterface.deleteAsync(AppConstants.QueryTokens.DELETE_WALL_POSTS_SEARCH_RESULTS,getTaskTag(),null,TableWallPosts.NAME,selection,new String[]{mUserId},true,this);  } else {    String selection=DatabaseColumns.ID + " NOT IN ( SELECT " + DatabaseColumns.ID+ " from "+ TableWallPosts.NAME+ " order by "+ DatabaseColumns.TIMESTAMP_EPOCH_UPDATED_AT+ " desc limit "+ limit+ ")";    DBInterface.deleteAsync(AppConstants.QueryTokens.DELETE_WALL_POSTS_SEARCH_RESULTS,getTaskTag(),null,TableWallPosts.NAME,selection,null,true,this);    DBInterface.deleteAsync(AppConstants.QueryTokens.DELETE_WALL_COMMENTS,getTaskTag(),null,TableWallComments.NAME,null,null,true,this);  }}  }
class C{  public void write(OutputStream out) throws TransformerException {  write(out,(Integer)null);}  }
class C{  public static void main(String[] args){  AimaDemoFrame frame=new AimaDemoFrame();  registerDemos(frame);  frame.setSize(1000,700);  frame.setVisible(true);}  }
class C{  public static boolean hasLegacyWebContent(AccessibilityNodeInfoCompat node){  if (node == null) {    return false;  }  if (!supportsWebActions(node)) {    return false;  }  AccessibilityNodeInfoCompat parent=node.getParent();  if (supportsWebActions(parent)) {    if (parent != null) {      parent.recycle();    }    return false;  }  if (parent != null) {    parent.recycle();  }  return node.getChildCount() == 0;}  }
class C{  public static Number sub(Number a,Number b){  if (isFloatingPoint(a) || isFloatingPoint(b)) {    return a.doubleValue() - b.doubleValue();  } else {    return a.longValue() - b.longValue();  }}  }
class C{  private int handleScopeIntroduction(int bound){switch (fToken) {case Symbols.TokenLPAREN:    int pos=fPosition;  if (looksLikeMethodDecl()) {    if (fPrefs.prefMethodDeclDeepIndent)     return setFirstElementAlignment(pos,bound); else {      fIndent=fPrefs.prefMethodDeclIndent;      return pos;    }  } else {    fPosition=pos;    if (looksLikeMethodCall()) {      if (fPrefs.prefMethodCallDeepIndent)       return setFirstElementAlignment(pos,bound); else {        fIndent=fPrefs.prefMethodCallIndent;        return pos;      }    } else     if (fPrefs.prefParenthesisDeepIndent)     return setFirstElementAlignment(pos,bound);  }fIndent=fPrefs.prefParenthesisIndent;return pos;case Symbols.TokenLBRACE:pos=fPosition;if (looksLikeArrayInitializerIntro()) if (fPrefs.prefArrayDeepIndent) return setFirstElementAlignment(pos,bound); else fIndent=fPrefs.prefArrayIndent; else fIndent=fPrefs.prefBlockIndent;if (looksLikeArrayInitializerIntro() && !fPrefs.prefIndentBracesForArrays || !fPrefs.prefIndentBracesForBlocks) {fPosition=pos;return skipToStatementStart(true,true);} else {return pos;}case Symbols.TokenLBRACKET:pos=fPosition;if (fPrefs.prefArrayDimensionsDeepIndent) {return setFirstElementAlignment(pos,bound);}fIndent=fPrefs.prefBracketIndent;return pos;default :Assert.isTrue(false);return -1;}}  }
class C{  public CuboidRegionSelector(RegionSelector oldSelector){  this(checkNotNull(oldSelector).getIncompleteRegion().getWorld());  if (oldSelector instanceof CuboidRegionSelector) {    final CuboidRegionSelector cuboidRegionSelector=(CuboidRegionSelector)oldSelector;    position1=cuboidRegionSelector.position1;    position2=cuboidRegionSelector.position2;  } else {    final Region oldRegion;    try {      oldRegion=oldSelector.getRegion();    } catch (    IncompleteRegionException e) {      return;    }    position1=oldRegion.getMinimumPoint().toBlockVector();    position2=oldRegion.getMaximumPoint().toBlockVector();  }  region.setPos1(position1);  region.setPos2(position2);}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public Vertex define(Vertex source,Vertex vertex,Vertex vertex2){  return define(source,vertex,vertex2,null,null,null);}  }
class C{  public ServiceCall<Answers> convertDocumentToAnswer(File document,String mediaType){  Request request=createConversionRequest(document,mediaType,ConversionTarget.ANSWER_UNITS,null);  return createServiceCall(request,ResponseConverterUtils.getObject(Answers.class));}  }
class C{  public void append(StringBuffer buffer,String fieldName,byte[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public void afterTest(){  if (networked && server != null) {    server.stop();  }  FileUtils.deleteRecursive("trace.db",true);  FileUtils.deleteRecursive(TestBase.BASE_TEST_DIR,true);}  }
class C{  public static Angle linearDistance(LatLon p1,LatLon p2){  if (p1 == null || p2 == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double lat1=p1.getLatitude().radians;  double lon1=p1.getLongitude().radians;  double lat2=p2.getLatitude().radians;  double lon2=p2.getLongitude().radians;  if (lat1 == lat2 && lon1 == lon2)   return Angle.ZERO;  double dLat=lat2 - lat1;  double dLon=lon2 - lon1;  if (Math.abs(dLon) > Math.PI) {    dLon=dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  }  double distanceRadians=Math.hypot(dLat,dLon);  return Double.isNaN(distanceRadians) ? Angle.ZERO : Angle.fromRadians(distanceRadians);}  }
class C{  public boolean isTouchable(){  return isTouchable;}  }
class C{  private final int search(char c,boolean exact){  int low=0;  int high=children.size() - 1;  while (low <= high) {    int middle=(low + high) / 2;    char cmiddle=get(middle).getLabelStart();    if (cmiddle < c)     low=middle + 1; else     if (c < cmiddle)     high=middle - 1; else     return middle;  }  if (exact)   return -1;  return high;}  }
class C{  public Sorter(){  useDefaultVisual();  setLayout(new BorderLayout());  add(m_visual,BorderLayout.CENTER);  m_env=Environment.getSystemWide();  m_stopRequested=new AtomicBoolean(false);}  }
class C{  private void validate(Parameter parameter,Object key) throws Exception {  Parameter other=registry.get(key);  if (parameter.isText() != other.isText()) {    Annotation expect=parameter.getAnnotation();    Annotation actual=other.getAnnotation();    String path=parameter.getPath();    if (!expect.equals(actual)) {      throw new ConstructorException("Annotations do not match for '%s' in %s",path,type);    }    Class real=other.getType();    if (real != parameter.getType()) {      throw new ConstructorException("Parameter types do not match for '%s' in %s",path,type);    }  }}  }
class C{  public static MySQLConnection forTestDatabase(String databaseName){  return new MySQLConnection(JdbcConfiguration.copy(Configuration.fromSystemProperties("database.")).withDatabase(databaseName).with("useSSL",false).build());}  }
class C{  public static Button createCheckButton(Composite parent,String label,Image image,boolean checked,int hspan){  Button button=new Button(parent,SWT.CHECK);  button.setFont(parent.getFont());  button.setSelection(checked);  if (image != null) {    button.setImage(image);  }  if (label != null) {    button.setText(label);  }  GridData gd=new GridData();  gd.horizontalSpan=hspan;  button.setLayoutData(gd);  return button;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.224 -0500",hash_original_method="4CCD1E71A8A3F25E13404A132CF88582",hash_generated_method="FC74BA086DC8580A48F5BE9E1EAF38F2") public void unregister(SipProfile localProfile,SipRegistrationListener listener) throws SipException {  try {    ISipSession session=mSipService.createSession(localProfile,createRelay(listener,localProfile.getUriString()));    if (session == null) {      throw new SipException("SipService.createSession() returns null");    }    session.unregister();  } catch (  RemoteException e) {    throw new SipException("unregister()",e);  }}  }
class C{  public boolean needsToBeRefreshed(){  long now=System.currentTimeMillis();  return now - lastRefresh > DHTConstants.BUCKET_REFRESH_INTERVAL && entries.stream().anyMatch(null);}  }
class C{  Font(){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public String globalInfo(){  return "A simple variant of the FilteredClassifier that implements the Randomizable interface, useful for " + "building ensemble classifiers using the RandomCommittee meta learner. It requires " + "that either the filter or the base learner implement the Randomizable interface.";}  }
class C{  public ForceMergeRequest(String... indices){  super(indices);}  }
class C{  public void restoreDefaults(Font baseFont){  Color comment=new Color(0,128,0);  Color docComment=new Color(164,0,0);  Color keyword=Color.BLUE;  Color function=new Color(173,128,0);  Color literalNumber=new Color(100,0,200);  Color literalString=new Color(220,0,156);  Color error=new Color(148,148,0);  if (baseFont == null) {    baseFont=RSyntaxTextArea.getDefaultFont();  }  StyleContext sc=StyleContext.getDefaultStyleContext();  Font boldFont=sc.getFont(baseFont.getFamily(),Font.BOLD,baseFont.getSize());  Font italicFont=sc.getFont(baseFont.getFamily(),Font.ITALIC,baseFont.getSize());  Font commentFont=italicFont;  Font keywordFont=boldFont;  styles[Token.COMMENT_EOL]=new Style(comment,null,commentFont);  styles[Token.COMMENT_MULTILINE]=new Style(comment,null,commentFont);  styles[Token.COMMENT_DOCUMENTATION]=new Style(docComment,null,commentFont);  styles[Token.RESERVED_WORD]=new Style(keyword,null,keywordFont);  styles[Token.FUNCTION]=new Style(function,null);  styles[Token.LITERAL_BOOLEAN]=new Style(literalNumber,null);  styles[Token.LITERAL_NUMBER_DECIMAL_INT]=new Style(literalNumber,null);  styles[Token.LITERAL_NUMBER_FLOAT]=new Style(literalNumber,null);  styles[Token.LITERAL_NUMBER_HEXADECIMAL]=new Style(literalNumber,null);  styles[Token.LITERAL_STRING_DOUBLE_QUOTE]=new Style(literalString,null);  styles[Token.LITERAL_CHAR]=new Style(literalString,null);  styles[Token.LITERAL_BACKQUOTE]=new Style(literalString,null);  styles[Token.DATA_TYPE]=new Style(new Color(0,128,128),null);  styles[Token.VARIABLE]=new Style(new Color(255,153,0),null);  styles[Token.IDENTIFIER]=new Style(null,null);  styles[Token.WHITESPACE]=new Style(Color.gray,null);  styles[Token.SEPARATOR]=new Style(Color.RED,null);  styles[Token.OPERATOR]=new Style(new Color(128,64,64),null);  styles[Token.PREPROCESSOR]=new Style(new Color(128,128,128),null);  styles[Token.MARKUP_TAG_DELIMITER]=new Style(Color.RED,null);  styles[Token.MARKUP_TAG_NAME]=new Style(Color.BLUE,null);  styles[Token.MARKUP_TAG_ATTRIBUTE]=new Style(new Color(63,127,127),null);  styles[Token.ERROR_IDENTIFIER]=new Style(error,null);  styles[Token.ERROR_NUMBER_FORMAT]=new Style(error,null);  styles[Token.ERROR_STRING_DOUBLE]=new Style(error,null);  styles[Token.ERROR_CHAR]=new Style(error,null);}  }
class C{  public AddressExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void replaceMissingValues(double[] array){  if ((array == null) || (array.length != m_AttValues.length)) {    throw new IllegalArgumentException("Unequal number of attributes!");  }  freshAttributeVector();  for (int i=0; i < m_AttValues.length; i++) {    if (isMissing(i)) {      m_AttValues[i]=array[i];    }  }}  }
class C{  public boolean exists(){  return scanner != null;}  }
class C{  public void rollbackMigrateVirtualVolume(URI vplexURI,URI migrationURI,String migrateStepId,String stepId) throws WorkflowException {  Migration migration=null;  String migrationVolumeLabel=null;  try {    WorkflowStepCompleter.stepExecuting(stepId);    Boolean migrationStarted=(Boolean)_workflowService.loadStepData(migrateStepId);    if (!migrationStarted.booleanValue()) {      WorkflowStepCompleter.stepSucceded(stepId);      return;    }    migration=_dbClient.queryObject(Migration.class,migrationURI);    Volume migrationVolume=_dbClient.queryObject(Volume.class,migration.getVolume());    if (migrationVolume != null) {      migrationVolumeLabel=migrationVolume.getLabel();    }    if (!VPlexMigrationInfo.MigrationStatus.CANCELLED.getStatusValue().equals(migration.getMigrationStatus())) {      _log.info("Cancel migration {}",migrationURI);      StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);      VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplexSystem,_dbClient);      _log.info("Got VPlex API client for VPlex {}",vplexURI);      client.cancelMigrations(Arrays.asList(migration.getLabel()),true,true);      _log.info("Migration cancelled");    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _workflowService.setWorkflowRollbackContOnError(stepId,false);    _log.error("Error during rollback of start migration: {}",vae.getMessage(),vae);    if (migration != null) {      setOrClearVolumeInternalFlag(migration.getVolume(),true);      vae=VPlexApiException.exceptions.migrationRollbackFailureContactEMC(migration.getVolume().toString(),migrationVolumeLabel,migration.getLabel());    }    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception e) {    _log.error("Error during rollback of start migration: {}",e.getMessage());    _workflowService.setWorkflowRollbackContOnError(stepId,false);    if (migration != null) {      setOrClearVolumeInternalFlag(migration.getVolume(),true);      e=VPlexApiException.exceptions.migrationRollbackFailureContactEMC(migration.getVolume().toString(),migrationVolumeLabel,migration.getLabel());    }    WorkflowStepCompleter.stepFailed(stepId,VPlexApiException.exceptions.rollbackMigrateVolume(migrationURI.toString(),e));  }}  }
class C{  private void printLocalsInBody(Body body,UnitPrinter up){{    Map<Type,List> typeToLocals=new DeterministicHashMap(body.getLocalCount() * 2 + 1,0.7f);{      Iterator localIt=body.getLocals().iterator();      while (localIt.hasNext()) {        Local local=(Local)localIt.next();        List<Local> localList;        Type t=local.getType();        if (typeToLocals.containsKey(t))         localList=typeToLocals.get(t); else {          localList=new ArrayList<Local>();          typeToLocals.put(t,localList);        }        localList.add(local);      }    }{      Iterator<Type> typeIt=typeToLocals.keySet().iterator();      while (typeIt.hasNext()) {        Type type=typeIt.next();        List localList=typeToLocals.get(type);        Object[] locals=localList.toArray();        up.type(type);        up.literal(" ");        for (int k=0; k < locals.length; k++) {          if (k != 0)           up.literal(", ");          up.local((Local)locals[k]);        }        up.literal(";");        up.newline();      }    }    if (!typeToLocals.isEmpty()) {      up.newline();    }  }}  }
class C{  protected void resetAttribute(){  super.resetAttribute();  missing=false;  malformed=false;}  }
class C{  public void search(IWorkspace workspace,IJavaElement element,int limitTo,IJavaSearchScope scope,IJavaSearchResultCollector resultCollector) throws JavaModelException {  search(workspace,createSearchPattern(element,limitTo),scope,resultCollector);}  }
class C{  protected Image(Object image){  this.image=image;  animated=Display.impl.isAnimation(image);}  }
class C{  public static boolean canOpenIndex(ESLogger logger,Path indexLocation) throws IOException {  try {    tryOpenIndex(indexLocation);  } catch (  Exception ex) {    logger.trace("Can't open index for path [{}]",ex,indexLocation);    return false;  }  return true;}  }
class C{  static String buildKeySelection(int selectionCount){  String[] list=new String[selectionCount];  Arrays.fill(list,"?");  return KEY_COLUMN + " IN (" + TextUtils.join(", ",list)+ ")";}  }
class C{  public void testHotkey(){  g.showTokenWarning();}  }
class C{  private void initGUI(){  JPanel outerPanel=new JPanel(new BorderLayout());  outerPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY,1));  threadPanel=new JPanel(new GridBagLayout());  threadPanel.setOpaque(true);  threadPanel.setBackground(Color.WHITE);  JScrollPane scrollPane=new ExtendedJScrollPane(threadPanel);  scrollPane.setBorder(null);  outerPanel.add(scrollPane,BorderLayout.CENTER);  setDefaultSize(ButtonDialog.NORMAL);  layoutDefault(outerPanel,makeCancelButton("hide"));  setModalExclusionType(ModalExclusionType.APPLICATION_EXCLUDE);  setModalityType(ModalityType.APPLICATION_MODAL);}  }
class C{  public PaymentInformationException(String message){  super(message);}  }
class C{  public ForeignKey findForeignKey(ForeignKey key,boolean caseSensitive){  for (int idx=0; idx < getForeignKeyCount(); idx++) {    ForeignKey fk=getForeignKey(idx);    if ((caseSensitive && fk.equals(key)) || (!caseSensitive && fk.equalsIgnoreCase(key))) {      return fk;    }  }  return null;}  }
class C{  public void removeFieldValues(int fldId) throws Exception {  m_fdr.removeFieldValues(fldId);}  }
class C{  public boolean isShowGridY(){  return mShowGridY;}  }
class C{  private void init(){  setLayout(new GridBagLayout());  GridBagConstraints constraints=new GridBagConstraints();  constraints.gridx=0;  constraints.gridy=99;  constraints.insets=new Insets(10,0,0,0);  constraints.weighty=1.0;  constraints.fill=GridBagConstraints.VERTICAL;  JLabel verticalFillLabel=new JLabel();  add(verticalFillLabel,constraints);}  }
class C{  private boolean isMessageFromMyDevices(byte[] readData){  int initByte=firstByteOfDeviceId(readData);  if (initByte < 0 || readData.length < initByte) {    log.error("Error checking initByte and received length, I can't check If is from 'My devices'");    return false;  }  for (  String knownDevice : knownDevices) {    int nBytes=knownDevice.length() / 2;    if (knownDevice.length() % 2 > 0 && knownDevice.length() > 2) {      nBytes++;    }    if (readData.length < (nBytes + initByte)) {      log.error("Error checking received length, I can't check If is from 'My devices'");      return false;    }    String deviceCode=HexDump.toHexString(readData,initByte,nBytes);    if (knownDevice.equals(deviceCode))     return true; else     log.error("Current Known Device " + knownDevice + " Message Received From "+ deviceCode);  }  return false;}  }
class C{  private <T extends MessageNano>T unpackProto(T proto,byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {  MessageNano.mergeFrom(proto,readCheckedBytes(buffer,dataSize));  if (DEBUG)   Log.d(TAG,"unpacked proto " + proto);  return proto;}  }
class C{  public String locallyPredictiveTipText(){  return "Identify locally predictive attributes. Iteratively adds " + "attributes with the highest correlation with the class as long " + "as there is not already an attribute in the subset that has a "+ "higher correlation with the attribute in question";}  }
class C{  public static boolean isCenteredDefault(){  return centeredDefault;}  }
class C{  public void parseChangeText(String changeLogText){  if (changeLogText != null) {    changeLogText=changeLogText.replaceAll("\\[","<").replaceAll("\\]",">");  }  setChangeText(changeLogText);}  }
class C{  public void mountSecret(String secretBackend){  Assert.hasText(secretBackend,"SecretBackend must not be empty");  adminOperations.mount(secretBackend,VaultMount.create(secretBackend));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.282 -0400",hash_original_method="BC991485BBA1DBDB0B4ABE6F7B6B2027",hash_generated_method="DD4F3C636A4675243747EAD20501E686") public void clear(){  initialize();}  }
class C{  @Override public int hashCode(){  return dateTime.hashCode() ^ offset.hashCode();}  }
class C{  private boolean isRootTag(){  return m_model.getPathToRoot(this).length == 2;}  }
class C{  private void addLinkSetMember(final URI property,final Resource resource){  materialize();  final GPOEntry entry=establishLinkEntry(property);  entry.add(this,resource);}  }
class C{  public NormalRewrittenUrl(RuleExecutionOutput ruleExecutionOutput){  this.target=ruleExecutionOutput.getReplacedUrl();  this.targetContext=ruleExecutionOutput.getReplacedUrlContext();  this.stopFilterChain=ruleExecutionOutput.isStopFilterMatch();  this.rewriteMatch=ruleExecutionOutput.getRewriteMatch();  this.noSubstitution=ruleExecutionOutput.isNoSubstitution();}  }
class C{  public Automaton toAutomaton(){  Automaton arg;switch (this.op) {case EMPTY:    return Automaton.makeEmpty();case EPSILON:  return Automaton.makeEmptyString();case RANGE:return Automaton.makeCharRange(low,high);case STRING:return Automaton.makeString(lit);case STAR:arg=unaryArg.toAutomaton();return arg.repeat();case PLUS:arg=unaryArg.toAutomaton();return arg.repeat(1);case OPTION:arg=unaryArg.toAutomaton();return arg.optional();case UNION:Set<Automaton> args=new HashSet<Automaton>();for (RE a : alts) {args.add(a.toAutomaton());}return Automaton.union(args);case CONCAT:arg=Automaton.makeEmptyString();for (RE a : cats) {arg=arg.concatenate(a.toAutomaton());}return arg;case BINOP:BinaryOperation bo=(BinaryOperation)strOp;return bo.op(cats.get(0).toAutomaton(),cats.get(1).toAutomaton());case UNOP:UnaryOperation uo=(UnaryOperation)strOp;return uo.op(cats.get(0).toAutomaton());default :return null;}}  }
class C{  public <T>T createDtoFromJson(InputStream json,Class<T> dtoInterface) throws IOException {  return createDtoFromJson(new InputStreamReader(json),dtoInterface);}  }
class C{  public static void putObject_test2() throws Exception {  println("Test: multipart: putObject(String bucketName, String objectName, String fileName)");  String fileName=createFile(13 * MB);  client.putObject(bucketName,fileName,fileName);  Files.delete(Paths.get(fileName));  client.removeObject(bucketName,fileName);}  }
class C{  protected static Set keySet(){  return map.keySet();}  }
class C{  private static void log(int op,int k,byte[] v,String msg){  if (LOG) {    msg=MessageFormat.format(msg,k,v == null ? null : "new byte[" + v.length + "]");    System.out.println(msg + "; // op " + op);  }}  }
class C{  public static Date parse(final String date){  return parse(date,DATE_FORMAT_DEFAULT);}  }
class C{  public void release(){  stop();  try {    mCurrentMediaPlayer.release();  } catch (  Throwable ignored) {  }}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public static PointXy serializableInstance(){  return new PointXy(1,2);}  }
class C{  public List<NamedRelatedResourceRep> listByStorageSystemVirtualPool(URI storageSystemId,URI vpool,boolean exported){  String exportType=exported ? EXPORTED : UNEXPORTED;  URI path=client.uriBuilder(PathConstants.UNMANAGED_FILESYSTEM_BY_STORAGE_SYSTEM_VIRTUAL_POOL_URL).queryParam("exportType",exportType).build(storageSystemId,vpool);  UnManagedFileSystemList response=client.getURI(UnManagedFileSystemList.class,path);  return ResourceUtils.defaultList(response.getNamedUnManagedFileSystem());}  }
class C{  public void clearTable(int nodeIndex){  for (int rowIndex=0; rowIndex < getNumRows(nodeIndex); rowIndex++) {    clearRow(nodeIndex,rowIndex);  }}  }
class C{  @Override public void handleMouseClicked(ChartCanvas canvas,MouseEvent e){  if (this.mousePressedPoint == null) {    return;  }  Point2D currPt=new Point2D.Double(e.getX(),e.getY());  if (this.mousePressedPoint.distance(currPt) < 2) {    canvas.dispatchMouseClickedEvent(currPt,e);  }  this.mousePressedPoint=null;}  }
class C{  public void add(Timestamp DueDate,int daysDue,BigDecimal invoicedAmt,BigDecimal openAmt){  if (invoicedAmt == null)   invoicedAmt=Env.ZERO;  setTrxAmt(getTrxAmt().add(invoicedAmt));  if (openAmt == null)   openAmt=Env.ZERO;  setOpenAmt(getOpenAmt().add(openAmt));  m_noItems++;  m_daysDueSum+=daysDue;  setDaysDue(m_daysDueSum / m_noItems);  if (getDueDate().after(DueDate))   setDueDate(DueDate);  BigDecimal amt=openAmt;  if (daysDue <= 0) {    setDueAmt(getDueAmt().add(amt));    if (daysDue == 0)     setDue0(getDue0().add(amt));    if (daysDue >= -7)     setDue0_7(getDue0_7().add(amt));    if (daysDue >= -30)     setDue0_30(getDue0_30().add(amt));    if (daysDue <= -1 && daysDue >= -7)     setDue1_7(getDue1_7().add(amt));    if (daysDue <= -8 && daysDue >= -30)     setDue8_30(getDue8_30().add(amt));    if (daysDue <= -31 && daysDue >= -60)     setDue31_60(getDue31_60().add(amt));    if (daysDue <= -31)     setDue31_Plus(getDue31_Plus().add(amt));    if (daysDue <= -61 && daysDue >= -90)     setDue61_90(getDue61_90().add(amt));    if (daysDue <= -61)     setDue61_Plus(getDue61_Plus().add(amt));    if (daysDue <= -91)     setDue91_Plus(getDue91_Plus().add(amt));  } else {    setPastDueAmt(getPastDueAmt().add(amt));    if (daysDue <= 7)     setPastDue1_7(getPastDue1_7().add(amt));    if (daysDue <= 30)     setPastDue1_30(getPastDue1_30().add(amt));    if (daysDue >= 8 && daysDue <= 30)     setPastDue8_30(getPastDue8_30().add(amt));    if (daysDue >= 31 && daysDue <= 60)     setPastDue31_60(getPastDue31_60().add(amt));    if (daysDue >= 31)     setPastDue31_Plus(getPastDue31_Plus().add(amt));    if (daysDue >= 61 && daysDue <= 90)     setPastDue61_90(getPastDue61_90().add(amt));    if (daysDue >= 61)     setPastDue61_Plus(getPastDue61_Plus().add(amt));    if (daysDue >= 91)     setPastDue91_Plus(getPastDue91_Plus().add(amt));  }}  }
class C{  public AudioException(){}  }
class C{  public static boolean isFileOlder(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileOlder(file,reference.lastModified());}  }
class C{  public boolean reverseAccrualIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  public FloatLiteral createFloatLiteral(){  FloatLiteralImpl floatLiteral=new FloatLiteralImpl();  return floatLiteral;}  }
class C{  public static String truncate(String text,int maxWidth){  final int maxWidthSubtrahend=3;  String truncatedText=text;  if (text != null && text.length() > maxWidth) {    truncatedText=new StringBuilder(text.substring(0,(maxWidth - maxWidthSubtrahend))).append("...").toString();  }  return truncatedText;}  }
class C{  public String nextToken(){  if (currentPosition >= maxPosition) {    throw new NoSuchElementException();  }  int start=currentPosition;  while ((currentPosition < maxPosition) && Character.isLetterOrDigit(str.charAt(currentPosition))) {    currentPosition++;  }  if ((start == currentPosition) && (!Character.isLetterOrDigit(str.charAt(currentPosition)))) {    currentPosition++;  }  return str.substring(start,currentPosition);}  }
class C{  void printEntry(ZipEntry e,String[] files) throws IOException {  if (files == null) {    printEntry(e);  } else {    String name=e.getName();    for (    String file : files) {      if (name.startsWith(file)) {        printEntry(e);        return;      }    }  }}  }
class C{  public static IntentModel createModelForImplicitIntent(IAllocNode node,RefVAModel intentRefVAModel){  ImplicitIntentModel rii=new ImplicitIntentModel(node,intentRefVAModel);  Set<String> intentActions=new HashSet<String>();  if (IntentUtils.v().getFieldFromImplicitIntent("mAction",RefType.v("java.lang.String"),intentRefVAModel,intentActions)) {    for (    String intentAction : intentActions) {      rii.addValue(ImplicitIntentFields.ACTION,intentAction);    }  } else {    rii.invalidateField(ImplicitIntentFields.ACTION);    try {      AnalysisReport.v().addEntry("Implicit Intent with unresolved Action field; forces low-precision.",JimpleRelationships.v().getEnclosingStmt((Expr)node.getNewExpr()),AnalysisReport.Level.ELEVATED);    } catch (    Exception e) {    }  }  Set<String> intentCategories=new HashSet<String>();  if (IntentUtils.v().getFieldFromImplicitIntent("DSmCategories",RefType.v("java.lang.String"),intentRefVAModel,intentCategories)) {    for (    String cat : intentCategories) {      rii.addValue(ImplicitIntentFields.CATEGORY,cat);    }  } else {    rii.invalidateField(ImplicitIntentFields.CATEGORY);    try {      AnalysisReport.v().addEntry("Implicit Intent with unresolved Category field; forces low-precision.",JimpleRelationships.v().getEnclosingStmt((Expr)node.getNewExpr()),AnalysisReport.Level.ELEVATED);    } catch (    Exception e) {    }  }  Set<String> intenttypes=new HashSet<String>();  if (IntentUtils.v().getFieldFromImplicitIntent("mType",RefType.v("java.lang.String"),intentRefVAModel,intenttypes)) {    for (    String type : intenttypes) {      rii.addValue(ImplicitIntentFields.TYPE,type);    }  } else {    rii.invalidateField(ImplicitIntentFields.TYPE);    try {      AnalysisReport.v().addEntry("Implicit Intent with unresolved Type field; forces low-precision.",JimpleRelationships.v().getEnclosingStmt((Expr)node.getNewExpr()),AnalysisReport.Level.ELEVATED);    } catch (    Exception e) {    }  }  Set<String> intentDatas=new HashSet<String>();  if (IntentUtils.v().getDataFieldForIntent(intentRefVAModel,intentDatas)) {    for (    String intentData : intentDatas) {      try {        URI parsedIntentData=new URI(intentData);        rii.addValue(ImplicitIntentFields.DATA,intentData);      } catch (      URISyntaxException e) {        rii.invalidateField(ImplicitIntentFields.DATA);        try {          AnalysisReport.v().addEntry("Implicit Intent with unresolved Data field; forces low-precision.",JimpleRelationships.v().getEnclosingStmt((Expr)node.getNewExpr()),AnalysisReport.Level.ELEVATED);        } catch (        Exception x) {        }        break;      }    }  } else {    rii.invalidateField(ImplicitIntentFields.DATA);  }  boolean anyFieldValid=false;  for (  ImplicitIntentFields field : ImplicitIntentFields.values()) {    if (!rii.isFieldInvalidated(field)) {      anyFieldValid=true;      break;    }  }  if (anyFieldValid)   return rii; else   return UnresolvedIntent.v();}  }
class C{  private void createSubscriptionLocked(){  if (getZk().createSubscription()) {    getZk().fillEmptySubscription(getKafka().getSubscriptionOffsets());  } else {    final Session[] sessions=getZk().listSessions();    final Partition[] partitions=getZk().listPartitions();    if (sessions.length >= partitions.length) {      switchState(new CleanupState(new NoStreamingSlotsAvailable(partitions.length)));      return;    }  }  registerSession();  try {    getOut().onInitialized(getSessionId());    switchState(new StreamingState());  } catch (  final IOException e) {    getLog().error("Failed to notify of initialization. Switch to cleanup directly",e);    switchState(new CleanupState(e));  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void stop(){  try {    discoverySchedulingSelector.close();    _dataCollectionExecutorService.shutdown();    _dataCollectionExecutorService.awaitTermination(120,TimeUnit.SECONDS);  } catch (  Exception e) {    _logger.error("TimeOut occured after waiting Client Threads to finish");  }}  }
class C{  public void testMove() throws IOException {  InfoStreamListener stream=new InfoStreamListener("move");  Path dir=wrap(createTempDir(),stream);  Files.createFile(dir.resolve("foobar"));  Files.move(dir.resolve("foobar"),dir.resolve("baz"));  assertTrue(stream.sawMessage());  try {    Files.move(dir.resolve("nonexistent"),dir.resolve("something"));    fail("didn't get expected exception");  } catch (  IOException expected) {  }}  }
class C{  public TestEntity(int index,String text,double minConfidence){  this(index,text,text,minConfidence);}  }
class C{  @ObjectiveCName("sendMessageWithPeer:withText:withMarkdownText:withMentions:autoDetect:") public void sendMessage(@NotNull Peer peer,@NotNull String text,@Nullable String markDownText,@Nullable ArrayList<Integer> mentions,boolean autoDetect){  modules.getMessagesModule().sendMessage(peer,text,markDownText,mentions,autoDetect);}  }
class C{  public boolean equals(Object obj){  if (getClass() != obj.getClass()) {    return false;  }  UserInfo other=(UserInfo)obj;  if (this.userType != other.userType) {    return false;  }  if (!this.user.equalsIgnoreCase(other.user)) {    return false;  }  if (this.password != null && other.password == null)   return false;  if (other.password != null && this.password == null)   return false;  if (this.password == other.password)   return true;  return (this.password.equals(other.password));}  }
class C{  public final static boolean isStartsPostDial(char c){  return c == PAUSE || c == WAIT;}  }
class C{  public ImageFetcher(Context context,ImageFetcherParams params){  super(context);  setParams(params);}  }
class C{  public ProjectionWgs84(){}  }
class C{  public LoggingListener(String level){  try {    this.level=Level.valueOf(level.toUpperCase());  } catch (  IllegalArgumentException e) {    throw new IllegalArgumentException("Invalid log level '" + level + "'. The (case-insensitive) supported values are: "+ StringUtils.arrayToCommaDelimitedString(Level.values()));  }}  }
class C{  @Override public void trim(MemoryTrimType trimType){  if (!mSemaphore.tryAcquire()) {    return;  }  try {    mByteArraySoftRef.clear();  }  finally {    mSemaphore.release();  }}  }
class C{  public View build(Context ctx){  mContainer=new LinearLayout(ctx);  if (mInnerShadow) {    if (!mInRTL) {      mContainer.setBackgroundResource(R.drawable.material_drawer_shadow_left);    } else {      mContainer.setBackgroundResource(R.drawable.material_drawer_shadow_right);    }  }  mRecyclerView=new RecyclerView(ctx);  mContainer.addView(mRecyclerView,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);  mRecyclerView.setItemAnimator(new DefaultItemAnimator());  mRecyclerView.setFadingEdgeLength(0);  mRecyclerView.setClipToPadding(false);  mRecyclerView.setLayoutManager(new LinearLayoutManager(ctx));  mDrawerAdapter=new DrawerAdapter();  mRecyclerView.setAdapter(mDrawerAdapter);  if (mDrawer != null && mDrawer.mDrawerBuilder != null && (mDrawer.mDrawerBuilder.mFullscreen || mDrawer.mDrawerBuilder.mTranslucentStatusBar)) {    mRecyclerView.setPadding(mRecyclerView.getPaddingLeft(),UIUtils.getStatusBarHeight(ctx),mRecyclerView.getPaddingRight(),mRecyclerView.getPaddingBottom());  }  if (mDrawer != null && mDrawer.mDrawerBuilder != null && (mDrawer.mDrawerBuilder.mFullscreen || mDrawer.mDrawerBuilder.mTranslucentNavigationBar)) {    mRecyclerView.setPadding(mRecyclerView.getPaddingLeft(),mRecyclerView.getPaddingTop(),mRecyclerView.getPaddingRight(),UIUtils.getNavigationBarHeight(ctx));  }  createItems();  return mContainer;}  }
class C{  public boolean isUnset(Option option){  return (values.get(option.text) == null);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, j, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  double bufferSize=0;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry geometriesToBuffer=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  bufferSize=Double.parseDouble(args[2]);  if (bufferSize < 0) {    showFeedback("The buffer size has not been set properly.");    return;  }  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numRecs=input.getNumberOfRecords();    oneHundredthTotal=numRecs / 100;    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYGON);    output.setProjectionStringFromOtherShapefile(input);    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    if (shapeType.getBaseType() == ShapeType.POLYGON) {      progress=0;      ArrayList<com.vividsolutions.jts.geom.Polygon> polygons=new ArrayList<>();      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            polygons.add((com.vividsolutions.jts.geom.Polygon)recJTSPoly[a]);          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      com.vividsolutions.jts.geom.Polygon[] polygonArray=new com.vividsolutions.jts.geom.Polygon[polygons.size()];      for (i=0; i < polygons.size(); i++) {        polygonArray[i]=polygons.get(i);      }      polygons.clear();      geometriesToBuffer=factory.createMultiPolygon(polygonArray);    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE) {      ArrayList<LineString> lineStringList=new ArrayList<>();      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            lineStringList.add((com.vividsolutions.jts.geom.LineString)recJTSPoly[a]);          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      com.vividsolutions.jts.geom.LineString[] lineStringArray=new com.vividsolutions.jts.geom.LineString[lineStringList.size()];      for (i=0; i < lineStringList.size(); i++) {        lineStringArray[i]=lineStringList.get(i);      }      lineStringList.clear();      geometriesToBuffer=factory.createMultiLineString(lineStringArray);    } else     if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      ArrayList<com.vividsolutions.jts.geom.Point> pointList=new ArrayList<>();      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      n=0;      progress=0;      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            pointList.add((com.vividsolutions.jts.geom.Point)recJTSPoly[a]);          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      com.vividsolutions.jts.geom.Point[] pointArray=new com.vividsolutions.jts.geom.Point[pointList.size()];      for (i=0; i < pointList.size(); i++) {        pointArray[i]=pointList.get(i);      }      pointList.clear();      geometriesToBuffer=factory.createMultiPoint(pointArray);    }    updateProgress("Buffering data (progress will not be updated):",-1);    com.vividsolutions.jts.geom.Geometry buffer=geometriesToBuffer.buffer(bufferSize);    progress=0;    updateProgress("Creating new shapefile:",-1);    if (buffer instanceof com.vividsolutions.jts.geom.MultiPolygon) {      MultiPolygon mpBuffer=(MultiPolygon)buffer;      FID=0;      n=0;      for (int a=0; a < mpBuffer.getNumGeometries(); a++) {        com.vividsolutions.jts.geom.Geometry g=mpBuffer.getGeometryN(a);        if (g instanceof com.vividsolutions.jts.geom.Polygon) {          com.vividsolutions.jts.geom.Polygon bufferPoly=(com.vividsolutions.jts.geom.Polygon)g;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[bufferPoly.getNumInteriorRing() + 1];          Coordinate[] buffCoords=bufferPoly.getExteriorRing().getCoordinates();          if (!Topology.isLineClosed(buffCoords)) {            System.out.println("Exterior ring not closed.");          }          if (Topology.isClockwisePolygon(buffCoords)) {            for (i=0; i < buffCoords.length; i++) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          } else {            for (i=buffCoords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          }          for (int b=0; b < bufferPoly.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            buffCoords=bufferPoly.getInteriorRingN(b).getCoordinates();            if (!Topology.isLineClosed(buffCoords)) {              System.out.println("Interior ring not closed.");            }            if (Topology.isClockwisePolygon(buffCoords)) {              for (i=buffCoords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            } else {              for (i=0; i < buffCoords.length; i++) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          output.addRecord(wbPoly);          FID++;          Object[] rowData=new Object[1];          rowData[0]=new Double(FID);          writer.addRecord(rowData);          if (cancelOp) {            cancelOperation();            return;          }          n++;          progress=(int)(n * 100.0 / mpBuffer.getNumGeometries());          updateProgress("Creating new shapefile:",progress);        } else {        }      }    } else     if (buffer instanceof com.vividsolutions.jts.geom.Polygon) {      com.vividsolutions.jts.geom.Polygon pBuffer=(com.vividsolutions.jts.geom.Polygon)buffer;      com.vividsolutions.jts.geom.Geometry g=pBuffer.getGeometryN(0);      if (g instanceof com.vividsolutions.jts.geom.Polygon) {        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts=new int[pBuffer.getNumInteriorRing() + 1];        Coordinate[] buffCoords=pBuffer.getExteriorRing().getCoordinates();        if (Topology.isClockwisePolygon(buffCoords)) {          for (i=0; i < buffCoords.length; i++) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        } else {          for (i=buffCoords.length - 1; i >= 0; i--) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        }        for (int b=0; b < pBuffer.getNumInteriorRing(); b++) {          parts[b + 1]=pnts.size();          buffCoords=pBuffer.getInteriorRingN(b).getCoordinates();          if (Topology.isClockwisePolygon(buffCoords)) {            for (i=buffCoords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          } else {            for (i=0; i < buffCoords.length; i++) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          }        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());        output.addRecord(wbPoly);        Object[] rowData=new Object[1];        rowData[0]=new Double(1);        writer.addRecord(rowData);      } else {      }    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static int registerBitSize(final long expectedUniqueElements){  return Math.max(HLL.MINIMUM_REGWIDTH_PARAM,(int)Math.ceil(NumberUtil.log2(NumberUtil.log2(expectedUniqueElements))));}  }
class C{  private String readBuffer(InputNode from) throws Exception {  int length=text.length();  if (length > 0) {    String value=text.toString();    text.setLength(0);    return value;  }  return null;}  }
class C{  public void intersectPermittedSubtree(GeneralSubtree[] permitted){  Map subtreesMap=new HashMap();  for (int i=0; i != permitted.length; i++) {    GeneralSubtree subtree=permitted[i];    Integer tagNo=Integers.valueOf(subtree.getBase().getTagNo());    if (subtreesMap.get(tagNo) == null) {      subtreesMap.put(tagNo,new HashSet());    }    ((Set)subtreesMap.get(tagNo)).add(subtree);  }  for (Iterator it=subtreesMap.entrySet().iterator(); it.hasNext(); ) {    Map.Entry entry=(Map.Entry)it.next();switch (((Integer)entry.getKey()).intValue()) {case 1:      permittedSubtreesEmail=intersectEmail(permittedSubtreesEmail,(Set)entry.getValue());    break;case 2:  permittedSubtreesDNS=intersectDNS(permittedSubtreesDNS,(Set)entry.getValue());break;case 4:permittedSubtreesDN=intersectDN(permittedSubtreesDN,(Set)entry.getValue());break;case 6:permittedSubtreesURI=intersectURI(permittedSubtreesURI,(Set)entry.getValue());break;case 7:permittedSubtreesIP=intersectIP(permittedSubtreesIP,(Set)entry.getValue());}}}  }
class C{  private boolean compareChromaPanes(boolean crossed){  int d, f=0;  for (int j=0; j < NB_DECODED; j++) {    if (mDecodedVideo[j] != null) {      if (!crossed) {        for (int i=mSize; i < 3 * mSize / 2; i+=1) {          d=(mInitialImage[i] & 0xFF) - (mDecodedVideo[j][i] & 0xFF);          d=d < 0 ? -d : d;          if (d > 50) {            f++;            break;          }        }      } else {        for (int i=mSize; i < 3 * mSize / 2; i+=2) {          d=(mInitialImage[i] & 0xFF) - (mDecodedVideo[j][i + 1] & 0xFF);          d=d < 0 ? -d : d;          if (d > 50) {            f++;          }        }      }    }  }  return f <= NB_DECODED / 2;}  }
class C{  public static String formatDateDay(Date date){  return getSimplDateFormat(DF_DEF).format(date);}  }
class C{  private void updateGui(){  final int currentStep=callResolver.getCurrentStep();  for (int i=0; i < panels.length; i++) {    panels[i].setEnabled(i <= currentStep);    panels[i].setDone(i < currentStep);  }  listResolvedFunctionsButton.setEnabled(currentStep == panels.length);  graphResolvedFunctionsButton.setEnabled(currentStep == panels.length);  portResultsButton.setEnabled(currentStep == panels.length);  nextAction.putValue(Action.NAME,currentStep == panels.length ? "Reset" : "Next");}  }
class C{  @Override protected void process(final DistributionManager dm){  boolean failed=true;  ReplyException replyException=null;  try {    this.svc=DLockService.getInternalServiceNamed(this.serviceName);    if (this.svc == null) {      failed=false;      basicProcess(dm,false);    } else {      executeBasicProcess(dm);    }    failed=false;  } catch (  RuntimeException e) {    replyException=new ReplyException(e);    throw e;  }catch (  VirtualMachineError e) {    SystemFailure.initiateFailure(e);    replyException=new ReplyException(e);    throw e;  }catch (  Error e) {    SystemFailure.checkFailure();    replyException=new ReplyException(e);    throw e;  } finally {    if (failed) {      if (logger.isTraceEnabled(LogMarker.DLS)) {        logger.trace(LogMarker.DLS,"DLockReleaseMessage.process failed for <{}>",this);      }      int replyCode=DLockReleaseReplyMessage.NOT_GRANTOR;      DLockReleaseReplyMessage replyMsg=new DLockReleaseReplyMessage();      replyMsg.serviceName=this.serviceName;      replyMsg.replyCode=replyCode;      replyMsg.setProcessorId(this.processorId);      replyMsg.setRecipient(getSender());      replyMsg.setException(replyException);      if (dm.getId().equals(getSender())) {        replyMsg.setSender(getSender());        replyMsg.dmProcess(dm);      } else {        dm.putOutgoing(replyMsg);      }    }  }}  }
class C{  static void logIfNecessary(){  if (logger.isDebugEnabled()) {    try {      doLogging();    } catch (    IOException|SecurityException e) {      logger.warn("unable to gather network information",e);    }  }}  }
class C{  public int length(){  List<A> l=this;  int len=0;  while (l.tail != null) {    l=l.tail;    len++;  }  return len;}  }
class C{  public Long updateLabel(Long fieldvalues_id,String name,Long fieldlanguagesvalues_id,String value){  try {    Fieldvalues fv=this.getFieldvaluesById(fieldvalues_id);    if (fv == null) {      return new Long(-24);    } else {      fv.setName(name);      fv.setUpdatetime(new Date());      this.updateField(fv);    }    Fieldlanguagesvalues flv=this.getFieldlanguagesvaluesById(fieldlanguagesvalues_id);    if (flv == null) {      return new Long(-25);    } else {      flv.setUpdatetime(new Date());      flv.setValue(value);      this.updateFieldLanguagesLabel(flv);    }    return fieldvalues_id;  } catch (  Exception ex2) {    log.error("[updateFieldLanguagesLabel]: ",ex2);  }  return new Long(-1);}  }
class C{  public Hamsi384(){  super();}  }
class C{  private void pushFrame(CompiledMethod callee){  env.pushFrame(callee);}  }
class C{  public Result execute(@NonNull Search search) throws Exception {  if (search.getOffset() >= search.getMaxNotes()) {    throw new IllegalArgumentException("offset must be less than max notes");  }  Result result=new Result(search.getScopes());  for (  Scope scope : search.getScopes()) {switch (scope) {case PERSONAL_NOTES:      try {        result.setPersonalResults(findPersonalNotes(search));      } catch (      Exception e) {        maybeRethrow(search,e);      }    break;case LINKED_NOTEBOOKS:  List<LinkedNotebook> linkedNotebooks=getLinkedNotebooks(search,false);for (LinkedNotebook linkedNotebook : linkedNotebooks) {  try {    result.addLinkedNotebookResult(linkedNotebook,findNotesInLinkedNotebook(search,linkedNotebook));  } catch (  Exception e) {    maybeRethrow(search,e);  }}break;case BUSINESS:linkedNotebooks=getLinkedNotebooks(search,true);for (LinkedNotebook linkedNotebook : linkedNotebooks) {try {result.addBusinessResult(linkedNotebook,findNotesInBusinessNotebook(search,linkedNotebook));} catch (Exception e) {maybeRethrow(search,e);}}break;}}return result;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private <T extends MessageNano>T unpackProto(T proto,byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {  MessageNano.mergeFrom(proto,readCheckedBytes(buffer,dataSize));  if (DEBUG)   Log.d(TAG,"unpacked proto " + proto);  return proto;}  }
class C{  public boolean isEnabled(){  if (isEnableable()) {    return ((AbstractControl)control).isEnabled();  } else   return false;}  }
class C{  public MemoryThresholds(long maxMemoryBytes,float criticalThreshold,float evictionThreshold){  if (criticalThreshold > 100.0f || criticalThreshold < 0.0f) {    throw new IllegalArgumentException(LocalizedStrings.MemoryThresholds_CRITICAL_PERCENTAGE_GT_ZERO_AND_LTE_100.toLocalizedString());  }  if (evictionThreshold > 100.0f || evictionThreshold < 0.0f) {    throw new IllegalArgumentException(LocalizedStrings.MemoryThresholds_EVICTION_PERCENTAGE_GT_ZERO_AND_LTE_100.toLocalizedString());  }  if (evictionThreshold != 0 && criticalThreshold != 0 && evictionThreshold >= criticalThreshold) {    throw new IllegalArgumentException(LocalizedStrings.MemoryThresholds_CRITICAL_PERCENTAGE_GTE_EVICTION_PERCENTAGE.toLocalizedString());  }  this.maxMemoryBytes=maxMemoryBytes;  this.criticalThreshold=criticalThreshold;  this.criticalThresholdBytes=(long)(criticalThreshold * 0.01 * maxMemoryBytes);  this.criticalThresholdClearBytes=(long)(this.criticalThresholdBytes - (0.01 * THRESHOLD_THICKNESS * this.maxMemoryBytes));  this.evictionThreshold=evictionThreshold;  this.evictionThresholdBytes=(long)(evictionThreshold * 0.01 * maxMemoryBytes);  this.evictionThresholdClearBytes=(long)(this.evictionThresholdBytes - (0.01 * THRESHOLD_THICKNESS_EVICT * this.maxMemoryBytes));}  }
class C{  public static void main(String[] args) throws Throwable {  HasExpiredCertTest test=new HasExpiredCertTest();  test.start();}  }
class C{  public synchronized short mergeExt(EntityManager em,Object obj){  try {    if (em != null) {      em.merge(obj);    } else {      return 0;    }  } catch (  Exception Ex) {    return 0;  }  return 1;}  }
class C{  void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  private void updateGrid(int row){  if (validateIfNecessary()) {    boolean emptyRow=false;    while (!emptyRow) {      for (int counter=0; counter < grid[row].length; counter++) {        if (grid[row][counter] == null) {          emptyRow=true;          break;        }      }      if (!emptyRow) {        row++;      }    }    for (int col=0, counter=0; counter < getChildCount(); counter++) {      TableCellElementInfo cell=(TableCellElementInfo)getChild(counter);      while (grid[row][col] != null) {        col++;      }      for (int rowCount=cell.getRowCount() - 1; rowCount >= 0; rowCount--) {        for (int colCount=cell.getColumnCount() - 1; colCount >= 0; colCount--) {          grid[row + rowCount][col + colCount]=cell;        }      }      col+=cell.getColumnCount();    }  }}  }
class C{  public DiskRequest addNewRequest(DiskRequest request) throws InterruptedException {  if (!isActive(request.time))   setStartingWeight(request.time);  limiter.acquire(request.estimatedCost);  pending.add(request);  return request;}  }
class C{  public boolean isArgPointer(int i){  return PTABridge.v().isPointer(getArgValue(i));}  }
class C{  public SynchronizationCommitConflictException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static <T>T withStreams(Socket socket,@ClosureParams(value=SimpleType.class,options={"java.io.InputStream","java.io.OutputStream"}) Closure<T> closure) throws IOException {  InputStream input=socket.getInputStream();  OutputStream output=socket.getOutputStream();  try {    T result=closure.call(new Object[]{input,output});    InputStream temp1=input;    input=null;    temp1.close();    OutputStream temp2=output;    output=null;    temp2.close();    return result;  }  finally {    closeWithWarning(input);    closeWithWarning(output);  }}  }
class C{  @Override public boolean acceptsInstances(){  return false;}  }
class C{  @Nullable public static PsiElement turnDirIntoInit(PsiElement target){  if (target instanceof PsiDirectory) {    final PsiDirectory dir=(PsiDirectory)target;    final PsiFile file=dir.findFile(PyNames.INIT_DOT_PY);    if (file != null) {      return file;    } else {      return null;    }  } else {    return target;  }}  }
class C{  public Table findLocalTempTable(String name){  if (localTempTables == null) {    return null;  }  return localTempTables.get(name);}  }
class C{  public ProcessPipe(Process process,OutputStream outputStream,OutputStream errorStream,InputStream inputStream){  this.process=process;  this.redirectOutputStream=outputStream;  this.redirectErrorStream=errorStream;  this.redirectInputStream=inputStream;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.newattr.com";  String qualifiedName="emp:newAttr";  Document doc;  Element newElement;  Attr newAttr;  NodeList elementList;  Node testAddr;  Node appendedChild;  Attr setAttr1;  Attr setAttr2;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  newElement=doc.createElement("newElement");  appendedChild=testAddr.appendChild(newElement);  newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);  setAttr1=newElement.setAttributeNodeNS(newAttr);{    boolean success=false;    try {      setAttr2=((Element)testAddr).setAttributeNodeNS(newAttr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  @Override public void run(){  amIActive=true;  String ouptutFile=null;  String shapefileName=null;  int i=0;  int row, col, rows, cols;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  Geometry[] JTSGeometries;  GMLWriter gmlWriter=new GMLWriter();  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  if (inputFilesString.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  String[] imageFiles=inputFilesString.split(";");  int numFiles=imageFiles.length;  try {    for (i=0; i < numFiles; i++) {      if (numFiles > 1) {        progress=(int)(100f * i / (numFiles - 1));        updateProgress("Loop " + (i + 1) + " of "+ numFiles+ ":",progress);      }      shapefileName=imageFiles[i];      if (!((new File(shapefileName)).exists())) {        showFeedback("Vector file does not exist.");        break;      }      ShapeFile shapefile=new ShapeFile(shapefileName);      ouptutFile=shapefileName.replace(".shp",".gml");      (new File(ouptutFile)).delete();      fw=new FileWriter(ouptutFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      progress=0;      int n=0;      int onePercentOfRecs=shapefile.getNumberOfRecords() / 100;      for (      ShapeFileRecord record : shapefile.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          JTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < JTSGeometries.length; a++) {            str1=gmlWriter.write(JTSGeometries[a]);            out.println(str1);          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        if (n == onePercentOfRecs) {          n=0;          progress++;          updateProgress("Exporting shapefile data:",progress);        }      }    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private JMenuItem createJMenuItem(boolean grayWithoutDiagram,final String name,int[] keyEvents,int preferredMnemonic){  JMenuItem menuItem=new JMenuItem(name);  MultipleKeyBindingsAction action=new MultipleKeyBindingsAction(name,preferredMnemonic);  for (  int keyEvent : keyEvents) {    addKeyBinding(menuItem,keyEvent,name);  }  menuItem.getActionMap().put(name,action);  menuItem.setAction(action);  if (grayWithoutDiagram) {    diagramDependendComponents.add(menuItem);  }  return menuItem;}  }
class C{  public static ConstantNode forPrimitive(JavaConstant constant,StructuredGraph graph){  assert constant.getJavaKind() != JavaKind.Object;  return forConstant(constant,null,graph);}  }
class C{  public void verify(PublicKey publicKey,int responseCode,String signedData,String signature){  String userId=null;  ResponseData data=null;  if (responseCode == LICENSED || responseCode == NOT_LICENSED || responseCode == LICENSED_OLD_KEY) {    try {      Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);      sig.initVerify(publicKey);      sig.update(signedData.getBytes());      if (!sig.verify(Base64.decode(signature))) {        Log.e(TAG,"Signature verification failed.");        handleInvalidResponse();        return;      }    } catch (    NoSuchAlgorithmException e) {      throw new RuntimeException(e);    }catch (    InvalidKeyException e) {      handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PUBLIC_KEY);      return;    }catch (    SignatureException e) {      throw new RuntimeException(e);    }catch (    Base64DecoderException e) {      Log.e(TAG,"Could not Base64-decode signature.");      handleInvalidResponse();      return;    }    try {      data=ResponseData.parse(signedData);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Could not parse response.");      handleInvalidResponse();      return;    }    if (data.responseCode != responseCode) {      Log.e(TAG,"Response codes don't match.");      handleInvalidResponse();      return;    }    if (data.nonce != mNonce) {      Log.e(TAG,"Nonce doesn't match.");      handleInvalidResponse();      return;    }    if (!data.packageName.equals(mPackageName)) {      Log.e(TAG,"Package name doesn't match.");      handleInvalidResponse();      return;    }    if (!data.versionCode.equals(mVersionCode)) {      Log.e(TAG,"Version codes don't match.");      handleInvalidResponse();      return;    }    userId=data.userId;    if (TextUtils.isEmpty(userId)) {      Log.e(TAG,"User identifier is empty.");      handleInvalidResponse();      return;    }  }switch (responseCode) {case LICENSED:case LICENSED_OLD_KEY:    int limiterResponse=mDeviceLimiter.isDeviceAllowed(userId);  handleResponse(limiterResponse,data);break;case NOT_LICENSED:handleResponse(Policy.NOT_LICENSED,data);break;case ERROR_CONTACTING_SERVER:Log.w(TAG,"Error contacting licensing server.");handleResponse(Policy.RETRY,data);break;case ERROR_SERVER_FAILURE:Log.w(TAG,"An error has occurred on the licensing server.");handleResponse(Policy.RETRY,data);break;case ERROR_OVER_QUOTA:Log.w(TAG,"Licensing server is refusing to talk to this device, over quota.");handleResponse(Policy.RETRY,data);break;case ERROR_INVALID_PACKAGE_NAME:handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PACKAGE_NAME);break;case ERROR_NON_MATCHING_UID:handleApplicationError(LicenseCheckerCallback.ERROR_NON_MATCHING_UID);break;case ERROR_NOT_MARKET_MANAGED:handleApplicationError(LicenseCheckerCallback.ERROR_NOT_MARKET_MANAGED);break;default :Log.e(TAG,"Unknown response code for license check.");handleInvalidResponse();}}  }
class C{  public JInternalFrame frame(){  return frame;}  }
class C{  public byte[] toByteArray(){  ByteBuffer buffer=ByteBuffer.allocate(BYTES).order(ByteOrder.LITTLE_ENDIAN);  xStats.writeTo(buffer);  yStats.writeTo(buffer);  buffer.putDouble(sumOfProductsOfDeltas);  return buffer.array();}  }
class C{  public void encodeSignedData(OutputStream out) throws IOException {  DerOutputStream derout=new DerOutputStream();  encodeSignedData(derout);  out.write(derout.toByteArray());}  }
class C{  private int compareMagnitude(BigDecimal val){  long ys=val.intCompact;  long xs=this.intCompact;  if (xs == 0)   return (ys == 0) ? 0 : -1;  if (ys == 0)   return 1;  long sdiff=(long)this.scale - val.scale;  if (sdiff != 0) {    long xae=(long)this.precision() - this.scale;    long yae=(long)val.precision() - val.scale;    if (xae < yae)     return -1;    if (xae > yae)     return 1;    BigInteger rb=null;    if (sdiff < 0) {      if (sdiff > Integer.MIN_VALUE && (xs == INFLATED || (xs=longMultiplyPowerTen(xs,(int)-sdiff)) == INFLATED) && ys == INFLATED) {        rb=bigMultiplyPowerTen((int)-sdiff);        return rb.compareMagnitude(val.intVal);      }    } else {      if (sdiff <= Integer.MAX_VALUE && (ys == INFLATED || (ys=longMultiplyPowerTen(ys,(int)sdiff)) == INFLATED) && xs == INFLATED) {        rb=val.bigMultiplyPowerTen((int)sdiff);        return this.intVal.compareMagnitude(rb);      }    }  }  if (xs != INFLATED)   return (ys != INFLATED) ? longCompareMagnitude(xs,ys) : -1; else   if (ys != INFLATED)   return 1; else   return this.intVal.compareMagnitude(val.intVal);}  }
class C{  public void onProfileInfoAdded(final ProfileMethod profileMethod){  if (ENABLED) {    track("Profile Info Added",mPropsGenerator.makeProfileMethodProps(profileMethod));  }}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  public static void list(){  renderArgs.put("dataTable",new LDAPsourcesDataTable());  render();}  }
class C{  public int remove(int amount){  int original=amount();  setAmount(original - amount);  return original - amount();}  }
class C{  public boolean equals(Object color){  return (red == ((Color)color).getRed()) && (green == ((Color)color).getGreen()) && (blue == ((Color)color).getBlue());}  }
class C{  public void fixConversion(String rep){  if (sHashCode != rep.hashCode())   throw new RuntimeException("bad use of fixConversion!");  if (s == null) {    s=rep;  }}  }
class C{  protected boolean isRepaintingRoot(){  return isRepaintingRoot;}  }
class C{  public ToStringBuilder append(final String fieldName,final int[] array,final boolean fullDetail){  style.append(buffer,fieldName,array,Boolean.valueOf(fullDetail));  return this;}  }
class C{  private void refreshCallButtons(){  if ((null == sRoomPreviewData) && (null == mEventId) && canSendMessages()) {    boolean isCallSupported=mRoom.canPerformCall() && mSession.isVoipCallSupported();    IMXCall call=VectorCallViewActivity.getActiveCall();    if (null == call) {      mStartCallLayout.setVisibility((isCallSupported && (mEditText.getText().length() == 0)) ? View.VISIBLE : View.GONE);      mStopCallLayout.setVisibility(View.GONE);    } else {      call.removeListener(mCallListener);      call.addListener(mCallListener);      IMXCall roomCall=mSession.mCallsManager.getCallWithRoomId(mRoom.getRoomId());      mStartCallLayout.setVisibility(View.GONE);      mStopCallLayout.setVisibility((call == roomCall) ? View.VISIBLE : View.GONE);    }    mVectorOngoingConferenceCallView.refresh();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static <T extends DataObject>StringSet objCollectionToStringSet(Collection<T> dataObjects){  StringSet set=new StringSet();  if (dataObjects != null && !dataObjects.isEmpty()) {    for (    T dataObject : dataObjects) {      set.add(dataObject.getId().toString());    }  }  return set;}  }
class C{  public boolean useFilterExpressions(){  return useFilterExpressions;}  }
class C{  public void periodicProcessing() throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Execute re-subscribe");  }  subscribe();}  }
class C{  public UriMatcher(int code){  mCode=code;  mWhich=-1;  mChildren=new ArrayList<UriMatcher>();  mText=null;}  }
class C{  public static StringBuilder readFile(String filePath,String charsetName){  File file=new File(filePath);  StringBuilder fileContent=new StringBuilder("");  if (file == null || !file.isFile()) {    return null;  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      if (!fileContent.toString().equals("")) {        fileContent.append("\r\n");      }      fileContent.append(line);    }    return fileContent;  } catch (  IOException e) {    throw new RuntimeException("IOException",e);  } finally {    IOUtils.close(reader);  }}  }
class C{  private Component createStep2Panel(){  JPanel panel=new JPanel();  panel.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=1;  gbc.fill=GridBagConstraints.BOTH;  gbc.insets=new Insets(0,51,0,0);  codeText=new JTextField();  codeText.setMinimumSize(new Dimension(80,33));  codeText.setPreferredSize(new Dimension(80,33));  panel.add(codeText,gbc);  panel.setBorder(new RoundTitledBorder(2,I18N.getMessage(I18N.getGUIBundle(),"gui.dialog.oauth_dialog.copy_code.label"),false));  return panel;}  }
class C{  public AppConfiguration(final String applicationId,final AppVersion version){  this(applicationId);  setVersion(version);}  }
class C{  protected final void INT_2LONG(Instruction s,RegisterOperand result,Operand value,boolean signExtend){  if (VM.BuildFor32Addr) {    Register hr=result.getRegister();    Register lr=regpool.getSecondReg(hr);    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lr,TypeReference.Int),value)));    if (signExtend) {      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(hr,TypeReference.Int),new RegisterOperand(lr,TypeReference.Int))));      EMIT(MIR_BinaryAcc.mutate(s,IA32_SAR,new RegisterOperand(hr,TypeReference.Int),IC(31)));    } else {      EMIT(MIR_Move.mutate(s,IA32_MOV,new RegisterOperand(hr,TypeReference.Int),IC(0)));    }  } else {    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,result,value)));    if (signExtend) {      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHL,result.copy(),LC(32))));      EMIT(MIR_BinaryAcc.mutate(s,IA32_SAR,result.copy(),LC(32)));    } else {      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHL,result.copy(),LC(32))));      EMIT(MIR_BinaryAcc.mutate(s,IA32_SHR,result.copy(),LC(32)));    }  }}  }
class C{  public boolean isAsterisk(){  return asterisk;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  private void simpleGradientShapesDraw(DrawPane drawPane){  drawPane.erase();  SimpleGradient simpleGradient=new SimpleGradient();  simpleGradient.setDirection((Integer)simpleGradientDynamicForm.getValue("direction"));  simpleGradient.setEndColor((String)simpleGradientDynamicForm.getValue("endColor"));  simpleGradient.setStartColor((String)simpleGradientDynamicForm.getValue("startColor"));  DrawTriangle drawTriangle=new DrawTriangle();  drawTriangle.setDrawPane(drawPane);  drawTriangle.setFillGradient(simpleGradient);  drawTriangle.setPoints(new Point(100,50),new Point(150,150),new Point(50,150));  drawTriangle.draw();  DrawCurve drawCurve=new DrawCurve();  drawCurve.setDrawPane(drawPane);  drawCurve.setFillGradient(simpleGradient);  drawCurve.setStartPoint(new Point(200,50));  drawCurve.setEndPoint(new Point(340,150));  drawCurve.setControlPoint1(new Point(270,0));  drawCurve.setControlPoint2(new Point(270,200));  drawCurve.draw();  DrawOval drawOval=new DrawOval();  drawOval.setDrawPane(drawPane);  drawOval.setFillGradient(simpleGradient);  drawOval.setLeft(50);  drawOval.setTop(200);  drawOval.setWidth(100);  drawOval.setHeight(150);  drawOval.draw();  DrawRect drawRect=new DrawRect();  drawRect.setDrawPane(drawPane);  drawRect.setFillGradient(simpleGradient);  drawRect.setLeft(200);  drawRect.setTop(225);  drawRect.setWidth(150);  drawRect.setHeight(100);  drawRect.draw();}  }
class C{  @Override public String bgrewriteaof(){  client.bgrewriteaof();  return client.getStatusCodeReply();}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public SpanNearQuery(SpanQuery[] clausesIn,int slop,boolean inOrder){  this.clauses=new ArrayList<>(clausesIn.length);  for (  SpanQuery clause : clausesIn) {    if (this.field == null) {      this.field=clause.getField();    } else     if (clause.getField() != null && !clause.getField().equals(field)) {      throw new IllegalArgumentException("Clauses must have same field.");    }    this.clauses.add(clause);  }  this.slop=slop;  this.inOrder=inOrder;}  }
class C{  public static Flag registerRestrictionFlag(final CFlags flags){  return flags.registerOptional(CommonFlags.RESTRICTION_FLAG,String.class,"string",RESTRICTION_DESC).setCategory(INPUT_OUTPUT);}  }
class C{  public void add(EObject object){  this.applicableTypes.add(object.eClass());  this.valueStrings.add(SimpleAttributeResolver.NAME_RESOLVER.apply(object));  if (object instanceof TMember || object instanceof TEnumLiteral) {    Type t=EcoreUtil2.getContainerOfType(object.eContainer(),Type.class);    typesOrModulesToFind.add(qualifiedNameProvider.getFullyQualifiedName(t));  } else   if (object instanceof Type) {    typesOrModulesToFind.add(qualifiedNameProvider.getFullyQualifiedName(object));  } else   if (object instanceof TModule) {    typesOrModulesToFind.add(qualifiedNameProvider.getFullyQualifiedName(object));  }}  }
class C{  @OkCancelResult public static int showOkCancelDialog(String message,@Nls(capitalization=Nls.Capitalization.Title) String title,String okText,String cancelText,Icon icon){  return showOkCancelDialog(message,title,okText,cancelText,icon,null);}  }
class C{  private void bounceAWSClient(){  this.client.shutdown();  this.client=AWSUtils.getAsyncClient(this.creds,TestAWSSetupUtils.zoneId,getExecutor());}  }
class C{  public E remove(){  if (list.size() == 0)   return null;  E removedObject=list.get(0);  list.set(0,list.get(list.size() - 1));  list.remove(list.size() - 1);  int currentIndex=0;  while (currentIndex < list.size()) {    int leftChildIndex=2 * currentIndex + 1;    int rightChildIndex=2 * currentIndex + 2;    if (leftChildIndex >= list.size())     break;    int maxIndex=leftChildIndex;    if (rightChildIndex < list.size()) {      if (comparator.compare(list.get(maxIndex),list.get(rightChildIndex)) < 0) {        maxIndex=rightChildIndex;      }    }    if (comparator.compare(list.get(currentIndex),list.get(maxIndex)) < 0) {      E temp=list.get(maxIndex);      list.set(maxIndex,list.get(currentIndex));      list.set(currentIndex,temp);      currentIndex=maxIndex;    } else     break;  }  return removedObject;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.653 -0500",hash_original_method="516016D8DE08604CF0F5A3746D5ACA08",hash_generated_method="F7284E3F9F89FE40660E3A9EBEBCC085") public final boolean isUnresolved(){  return addr == null;}  }
class C{  public static boolean isConnectedFast(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected() && isConnectionFast(info.getType(),info.getSubtype()));}  }
class C{  public VirtualFile resolve(String relativeStr){  File relativeFile=null;  if (FileUtils.isDirectory(f)) {    relativeFile=FileUtil.openFile(f,relativeStr);  } else   if (FileUtils.isFile(f)) {    relativeFile=FileUtil.openFile(f.getParentFile(),relativeStr);  }  VirtualFile result=null;  if (relativeFile != null && FileUtils.exists(relativeFile)) {    result=new LocalFile(relativeFile);  }  if ((result != null) && Trace.pathResolver) {    Trace.trace("LocalFile.resolve: resolved " + relativeStr + " to "+ result.getName());  }  return result;}  }
class C{  public Iterator<E> iterator(E u){  return new PatchingIterator(innerChain,u);}  }
class C{  public static void line(double x0,double y0,double x1,double y1){  offscreen.draw(new Line2D.Double(scaleX(x0),scaleY(y0),scaleX(x1),scaleY(y1)));  draw();}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  super.addPropertyChangeListener(listener);}  }
class C{  @Deprecated public static Builder builder(){  return new Builder();}  }
class C{  private void assertSetIteratorsCleared(){  for (int i=0; i < gridCount(); i++) {    IgniteKernal grid=(IgniteKernal)grid(i);    for (    IgniteCache cache : grid.caches()) {      GridCacheQueryManager queries=grid.internalCache(cache.getName()).context().queries();      Map map=GridTestUtils.getFieldValue(queries,GridCacheQueryManager.class,"qryIters");      for (      Object obj : map.values())       assertEquals("Iterators not removed for grid " + i,0,((Map)obj).size());    }  }}  }
class C{  @Override public void finish() throws IOException {  super.finish();  writeLong(crc.getValue());  writeLong(crc.tbytes);}  }
class C{  public MmsException(){  super();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void validateEventCore(Archive arch) throws GeneratorException {  boolean validEventCore=true;  ArchiveFile occurrenceExtension=arch.getExtension(DwcTerm.Occurrence);  if (occurrenceExtension == null) {    validEventCore=false;  } else {    if (!occurrenceExtension.iterator().hasNext()) {      validEventCore=false;    }  }  if (!validEventCore) {    addMessage(Level.WARN,"The sampling event resource has no associated occurrences.");  }}  }
class C{  public Object evaluate(float fraction,Object startValue,Object endValue){  int startInt=(Integer)startValue;  int startA=(startInt >> 24) & 0xff;  int startR=(startInt >> 16) & 0xff;  int startG=(startInt >> 8) & 0xff;  int startB=startInt & 0xff;  int endInt=(Integer)endValue;  int endA=(endInt >> 24) & 0xff;  int endR=(endInt >> 16) & 0xff;  int endG=(endInt >> 8) & 0xff;  int endB=endInt & 0xff;  return (int)((startA + (int)(fraction * (endA - startA))) << 24) | (int)((startR + (int)(fraction * (endR - startR))) << 16) | (int)((startG + (int)(fraction * (endG - startG))) << 8)| (int)((startB + (int)(fraction * (endB - startB))));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapnotfounderr.class,args);}  }
class C{  public ContactsExample(ContactsExampleParameters parameters) throws MalformedURLException, AuthenticationException {  projection=parameters.getProjection();  String url=parameters.getBaseUrl() + (parameters.isGroupFeed() ? "groups/" : "contacts/") + parameters.getUserName()+ "/"+ projection;  feedUrl=new URL(url);  service=new ContactsService("Google-contactsExampleApp-3");  String userName=parameters.getUserName();  String password=parameters.getPassword();  if (userName == null || password == null) {    return;  }  service.setUserCredentials(userName,password);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_ASSIGNMENT__DECLARED_NAME:    return declaredName != null;}return super.eIsSet(featureID);}  }
class C{  public long startTimeMs(){  return _startTimeMs;}  }
class C{  public static void appendEscapedTextToBuilder(StringBuilder out,String item,char separator){  for (int i=0; i < item.length(); i++) {    char ch=item.charAt(i);    if (ch == '\\' || ch == separator) {      out.append('\\');    }    out.append(ch);  }}  }
class C{  public static MultiSegmentPowerLawBipartiteGraph buildRandomMultiSegmentBipartiteGraph(int maxNumSegments,int maxNumEdgesPerSegment,int leftSize,int rightSize,double edgeProbability,Random random){  MultiSegmentPowerLawBipartiteGraph multiSegmentPowerLawBipartiteGraph=new MultiSegmentPowerLawBipartiteGraph(maxNumSegments,maxNumEdgesPerSegment,leftSize / 2,(int)(rightSize * edgeProbability / 2),2.0,rightSize / 2,(int)(leftSize * edgeProbability / 2),2.0,new IdentityEdgeTypeMask(),new NullStatsReceiver());  for (int i=0; i < leftSize; i++) {    for (int j=0; j < rightSize; j++) {      if (random.nextDouble() < edgeProbability) {        multiSegmentPowerLawBipartiteGraph.addEdge(i,j,(byte)0);      }    }  }  return multiSegmentPowerLawBipartiteGraph;}  }
class C{  private Debugger(String host,int port) throws VMConnectException {  this.host=host;  this.port=port;  connect();}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.size() <= 0) {    functionValueMap.add(this,Double.NaN);    return;  }  timeSeries.sort();  double first=timeSeries.getValue(0);  double last=timeSeries.getValue(timeSeries.size() - 1);  if (first < 0 && last < 0) {    functionValueMap.add(this,last - first);    return;  }  if (first > 0 && last > 0) {    functionValueMap.add(this,last - first);    return;  }  if (first < 0 && last > 0) {    functionValueMap.add(this,last - first);    return;  }  functionValueMap.add(this,last - first);}  }
class C{  public Plane(final Vector v,final double D){  super(v.x,v.y,v.z);  this.D=D;}  }
class C{  private ViewConfiguration(Context context){  final Resources res=context.getResources();  final DisplayMetrics metrics=res.getDisplayMetrics();  final Configuration config=res.getConfiguration();  final float density=metrics.density;  final float sizeAndDensity;  if (config.isLayoutSizeAtLeast(Configuration.SCREENLAYOUT_SIZE_XLARGE)) {    sizeAndDensity=density * 1.5f;  } else {    sizeAndDensity=density;  }  mContext=context;  mEdgeSlop=(int)(sizeAndDensity * EDGE_SLOP + 0.5f);  mFadingEdgeLength=(int)(sizeAndDensity * FADING_EDGE_LENGTH + 0.5f);  mMinimumFlingVelocity=(int)(density * MINIMUM_FLING_VELOCITY + 0.5f);  mMaximumFlingVelocity=(int)(density * MAXIMUM_FLING_VELOCITY + 0.5f);  mScrollbarSize=(int)(density * SCROLL_BAR_SIZE + 0.5f);  mDoubleTapSlop=(int)(sizeAndDensity * DOUBLE_TAP_SLOP + 0.5f);  mWindowTouchSlop=(int)(sizeAndDensity * WINDOW_TOUCH_SLOP + 0.5f);  final WindowManager win=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  final Display display=win.getDefaultDisplay();  final Point size=new Point();  display.getRealSize(size);  mMaximumDrawingCacheSize=4 * size.x * size.y;  mOverscrollDistance=(int)(sizeAndDensity * OVERSCROLL_DISTANCE + 0.5f);  mOverflingDistance=(int)(sizeAndDensity * OVERFLING_DISTANCE + 0.5f);  if (!sHasPermanentMenuKeySet) {    IWindowManager wm=WindowManagerGlobal.getWindowManagerService();    try {      sHasPermanentMenuKey=!wm.hasSystemNavBar() && !wm.hasNavigationBar();      sHasPermanentMenuKeySet=true;    } catch (    RemoteException ex) {      sHasPermanentMenuKey=false;    }  }  mFadingMarqueeEnabled=res.getBoolean(com.android.internal.R.bool.config_ui_enableFadingMarquee);  mTouchSlop=res.getDimensionPixelSize(com.android.internal.R.dimen.config_viewConfigurationTouchSlop);  mPagingTouchSlop=mTouchSlop * 2;  mDoubleTapTouchSlop=mTouchSlop;}  }
class C{  protected void engineInit(AlgorithmParameterSpec params,SecureRandom random) throws InvalidAlgorithmParameterException {  throw new InvalidAlgorithmParameterException("HMAC-SHA1 key generation does not take any parameters");}  }
class C{  public static TransferTransaction createTransferWithAttachment(final TransferTransactionAttachment attachment){  return createTransferWithAttachment(Utils.generateRandomAccount(),attachment);}  }
class C{  public Builder from(Context context){  this.context=context;  return this;}  }
class C{  public boolean tenantHasUsageACL(List<URI> tenantUris,VirtualPool virtualPool){  for (  URI tenantUri : tenantUris) {    if (tenantHasUsageACL(tenantUri,virtualPool)) {      return true;    }  }  return false;}  }
class C{  public void cancelAllAnimations(){  removeCallbacks(mWrapCropBoundsRunnable);  removeCallbacks(mZoomImageToPositionRunnable);}  }
class C{  @Override public SocketImpl createSocketImpl(){  if (enabled) {    final int socketId=SOCKET_IDS.incrementAndGet();    if (socketId % clearClosedPerCount == 0) {      notifyClearClosed();    }    final SocketImplDecorator wrapper=new SocketImplDecorator(socketId);    openSockets.put(wrapper.id,wrapper);    socketCount.incrementAndGet();    AtomicInteger countWithThisStack=countByStack.get(wrapper.stack);    if (countWithThisStack == null) {      final AtomicInteger newCount=new AtomicInteger();      final AtomicInteger priorEntry=countByStack.putIfAbsent(wrapper.stack,newCount);      countWithThisStack=priorEntry == null ? newCount : priorEntry;    }    countWithThisStack.incrementAndGet();    return wrapper.impl;  } else {    return newSocketImpl();  }}  }
class C{  SwitchCase(AST ast){  super(ast);}  }
class C{  @Override public boolean canLoad(Entity unit){  boolean result=false;  return result;}  }
class C{  private boolean doAcquireNanos(int arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforenewchilddiffdocument.class,args);}  }
class C{  private void removeTree(final ITreeNode<CTag> tag){  m_allTags.remove(tag);  for (  final ITreeNode<CTag> child : tag.getChildren()) {    removeTree(child);  }}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  MoveEvaluation minimax(int ply,IComparator comp,IPlayer player,IPlayer opponent){  Iterator<IGameMove> it=player.validMoves(state).iterator();  if (ply == 0 || !it.hasNext()) {    return new MoveEvaluation(original.eval(state));  }  MoveEvaluation best=new MoveEvaluation(comp.initialValue());  while (it.hasNext()) {    IGameMove move=it.next();    move.execute(state);    numStates++;    MoveEvaluation me=minimax(ply - 1,comp.opposite(),opponent,player);    move.undo(state);    if (comp.compare(best.score,me.score) < 0) {      best=new MoveEvaluation(move,me.score);    }  }  return best;}  }
class C{  protected AbstractPooledConnAdapter(ClientConnectionManager manager,AbstractPoolEntry entry){  super(manager,entry.connection);  this.poolEntry=entry;}  }
class C{  public PerformPersistOptionGUI_NB(PerformPersistOption performPersistOption){  this.option=performPersistOption;  bindingGroup=new org.jdesktop.beansbinding.BindingGroup();  initComponents();}  }
class C{  public static String osName(){  return osName;}  }
class C{  private void storeDeviceMetrics(Map<String,String> metrics){  if (mMetrics.isEmpty()) {    mMetrics.putAll(metrics);    return;  }  checkMetrics(metrics,DeviceInfoConstants.BUILD_FINGERPRINT,DeviceInfoConstants.BUILD_MODEL,DeviceInfoConstants.BUILD_BRAND,DeviceInfoConstants.BUILD_MANUFACTURER,DeviceInfoConstants.BUILD_BOARD,DeviceInfoConstants.BUILD_DEVICE,DeviceInfoConstants.PRODUCT_NAME,DeviceInfoConstants.BUILD_ABI,DeviceInfoConstants.BUILD_ABI2,DeviceInfoConstants.SCREEN_SIZE);}  }
class C{  @Override public <U>CompletableFuture<U> foldLeft(final U seed,final BiFunction<U,? super T,U> function){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  public GImage(){  super();}  }
class C{  public static String repeat(String str,int count){  final StringBuilder result=new StringBuilder(str.length() * count);  for (int i=0; i < count; i++) {    result.append(str);  }  return result.toString();}  }
class C{  public void clearWarnings() throws SQLException {  warningsCleared=true;}  }
class C{  public int hashCode(){  return (int)(value ^ (value >>> 32));}  }
class C{  public void mul(int size,Register dst,Register src1,Register src2){  super.madd(size,dst,src1,src2,zr);}  }
class C{  public boolean add(MidiEvent event){  if (event == null) {    return false;  }synchronized (eventsList) {    if (!set.contains(event)) {      int eventsCount=eventsList.size();      MidiEvent lastEvent=null;      if (eventsCount > 0) {        lastEvent=(MidiEvent)eventsList.get(eventsCount - 1);      }      if (lastEvent != eotEvent) {        if (lastEvent != null) {          eotEvent.setTick(lastEvent.getTick());        } else {          eotEvent.setTick(0);        }        eventsList.add(eotEvent);        set.add(eotEvent);        eventsCount=eventsList.size();      }      if (MidiUtils.isMetaEndOfTrack(event.getMessage())) {        if (event.getTick() > eotEvent.getTick()) {          eotEvent.setTick(event.getTick());        }        return true;      }      set.add(event);      int i=eventsCount;      for (; i > 0; i--) {        if (event.getTick() >= ((MidiEvent)eventsList.get(i - 1)).getTick()) {          break;        }      }      if (i == eventsCount) {        eventsList.set(eventsCount - 1,event);        if (eotEvent.getTick() < event.getTick()) {          eotEvent.setTick(event.getTick());        }        eventsList.add(eotEvent);      } else {        eventsList.add(i,event);      }      return true;    }  }  return false;}  }
class C{  public void registerService(BlockingService serviceImplementation){  addService(true,serviceImplementation);}  }
class C{  @Override public int executeUpdate(String sql,String[] columnNames) throws SQLException {  try {    debugCode("executeUpdate(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static Proposition serializableInstance(){  return new Proposition(MlBayesIm.serializableInstance());}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  checkWidget();  this.selectionListeners.remove(listener);}  }
class C{  public Node removeNamedItem(String name){  throw new DTMException(DTMException.NO_MODIFICATION_ALLOWED_ERR);}  }
class C{  @Override public int incrementFirstValue(int key){  return array.incrementEntry(key << 1,1);}  }
class C{  public void queryLessThanCount(String type,int index,String value,int visibilityScope,CloudResponse<Integer> response){  try {    queryImpl(type,value,index,0,0,visibilityScope,3,0,false,true,false,response);  } catch (  CloudException e) {    response.onError(e);  }}  }
class C{  public static void runTrialOneHelper(int size,TrialSuite set,IPoint[] pts,IPivotIndex selector,int ratio){  Integer[] ar=new Integer[size];  for (int i=0, idx=0; i < pts.length; i++) {    ar[idx++]=(int)(pts[i].getX() * BASE);    ar[idx++]=(int)(pts[i].getY() * BASE);  }  QuickSortOneHelper<Integer> qs=new QuickSortOneHelper<Integer>(ar);  qs.setThresholdRatio(ratio);  qs.setPivotMethod(selector);  System.gc();  long start=System.currentTimeMillis();  qs.qsort(0,size - 1);  long end=System.currentTimeMillis();  set.addTrial(size,start,end);  for (int i=0; i < ar.length - 1; i++) {    assert (ar[i] <= ar[i + 1]);  }}  }
class C{  public CursorRequestMessage(CursorRequestMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  this.cursorId=other.cursorId;  this.close=other.close;}  }
class C{  protected void registerListAttributes(){  addAttributeProcessor(new MultipleLmlAttribute(),"multiple");  addAttributeProcessor(new RangeSelectLmlAttribute(),"rangeSelect");  addAttributeProcessor(new RequiredLmlAttribute(),"required");  addAttributeProcessor(new SelectedLmlAttribute(),"selected","select","value");  addAttributeProcessor(new SelectionDisabledLmlAttribute(),"disabled","disable");  addAttributeProcessor(new ToggleLmlAttribute(),"toggle");}  }
class C{  protected boolean parseUpload(final byte[] result) throws ProtocolException {  final int res=ByteArray.byteArrayToInt(result,0);  if (res == Proto.OK) {    if (Cfg.DEBUG) {      Check.log(TAG + " parseUpload, OK");    }    final DataBuffer dataBuffer=new DataBuffer(result,4,result.length - 4);    try {      final int totSize=dataBuffer.readInt();      final int left=dataBuffer.readInt();      if (Cfg.DEBUG) {        Check.log(TAG + " parseUpload left: " + left);      }      final String filename=WChar.readPascal(dataBuffer);      if (Cfg.DEBUG) {        Check.log(TAG + " parseUpload: " + filename);      }      final int size=dataBuffer.readInt();      final byte[] content=new byte[size];      dataBuffer.read(content);      if (Cfg.DEBUG) {        Check.log(TAG + " parseUpload: saving");      }      Protocol.saveUpload(filename,content);      if (filename.equals(Protocol.UPGRADE_FILENAME)) {        final Vector<String> vector=new Vector<String>();        vector.add(filename);        Protocol.upgradeMulti(vector);      }      return left > 0;    } catch (    final IOException e) {      if (Cfg.EXCEPTION) {        Check.log(e);      }      if (Cfg.DEBUG) {        Check.log(TAG + " Error: " + e.toString());      }      throw new ProtocolException();    }  } else   if (res == Proto.NO) {    if (Cfg.DEBUG) {      Check.log(TAG + " parseUpload, NO");    }    return false;  } else {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: parseUpload, wrong answer: " + res);    }    throw new ProtocolException();  }}  }
class C{  public void clear(){  table.clear();}  }
class C{  public int read(char b[],int off,int len) throws IOException {synchronized (lock) {    ensureOpen();    if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {      throw new IndexOutOfBoundsException();    } else     if (len == 0) {      return 0;    }    if (pos >= count) {      return -1;    }    if (pos + len > count) {      len=count - pos;    }    if (len <= 0) {      return 0;    }    System.arraycopy(buf,pos,b,off,len);    pos+=len;    return len;  }}  }
class C{  public static double[][] plus(double[][] v1,double[][] v2){  checkRowDimension(v2,v1.length);  checkColumnDimension(v2,v1[0].length);  double[][] array=new double[v1.length][v1[0].length];  for (int i=0; i < v1.length; i++)   for (int j=0; j < v1[0].length; j++)   array[i][j]=v1[i][j] + v2[i][j];  return array;}  }
class C{  private boolean remove(final int row,final int colIndex){  boolean copied=false;  final int lastIndex=this.maxIndices[row] - 1;  if (lastIndex > 0 && lastIndex != colIndex) {    System.arraycopy(this.cols[row],colIndex + 1,this.cols[row],colIndex,lastIndex - colIndex);    System.arraycopy(this.values[row],colIndex + 1,this.values[row],colIndex,lastIndex - colIndex);    copied=true;  }  if (lastIndex >= 0) {    this.cols[row][lastIndex]=0;    this.values[row][lastIndex]=0.0;  }  --this.maxIndices[row];  return copied;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  synchronized final void backup(final int[] order){  final int n=order.length;  for (int i=0; i < n; i++) {    final int oi=order[i];    for (int j=0; j < n; j++) {      final int oj=order[j];      M1[oi][oj]=M[oi][oj];    }  }}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (StringUtils.isBlank(idExt)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_NOMBRE,request.getLocale())));  }  if (StringUtils.isBlank(nombre)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DepositoConstants.DEPOSITO_ELECTRONICO_IDEXT,request.getLocale())));  }  if (StringUtils.isBlank(usoFirma)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DepositoConstants.DEPOSITO_ELECTRONICO_USO_FIRMA,request.getLocale())));  }  if (StringUtils.isBlank(uri)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DepositoConstants.DEPOSITO_ELECTRONICO_WS_WSDL,request.getLocale())));  }  if (StringUtils.isNotBlank(clave) && StringUtils.isBlank(confirmacionClave)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DepositoConstants.CLAVE_CONFIRMACION,request.getLocale())));  } else   if (StringUtils.isNotBlank(clave) && !clave.equals(confirmacionClave)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CONFIRMACION_CLAVE));  }  if (errors.isEmpty()) {    checkCadena(request,DepositoConstants.DEPOSITO_ELECTRONICO_WS_WSDL,uri,new String[]{"<",">"},errors);    checkCadena(request,DepositoConstants.USUARIO,usuario,new String[]{"<",">"},errors);  }  return errors;}  }
class C{  void trySetTrustAnchor(TrustAnchor anchor){  if (prevPubKey == null) {    if (anchor == null) {      throw new IllegalArgumentException("The trust anchor cannot be null");    }    if (anchor.getTrustedCert() != null) {      prevPubKey=anchor.getTrustedCert().getPublicKey();    } else {      prevPubKey=anchor.getCAPublicKey();    }  }}  }
class C{  public static void testPubKeyCreatePos() throws AssertFailException {  byte[] sec=BaseEncoding.base16().lowerCase().decode("67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530".toLowerCase());  byte[] resultArr=NativeSecp256k1.computePubkey(sec);  String pubkeyString=javax.xml.bind.DatatypeConverter.printHexBinary(resultArr);  assertEquals(pubkeyString,"04C591A8FF19AC9C4E4E5793673B83123437E975285E7B442F4EE2654DFFCA5E2D2103ED494718C697AC9AEBCFD19612E224DB46661011863ED2FC54E71861E2A6","testPubKeyCreatePos");}  }
class C{  @Override public void onInit(List<? extends IndexCommit> list) throws IOException {  List<IndexCommitWrapper> wrapperList=wrap(list);  deletionPolicy.onInit(wrapperList);  updateCommitPoints(wrapperList);  cleanReserves();}  }
class C{  private void parseImagesAndInternalLinks(SpanManager sm,List<Span> linkSpans,List<Link> links){  sm.manageList(linkSpans);  int pos=-1;  Stack<Integer> linkOpenTags=new Stack<Integer>();  while ((pos=sm.indexOf("[[",pos + 1)) != -1) {    linkOpenTags.push(pos);  }  Span lastLinkSpan=new Span(sm.length() + 1,sm.length() + 1);  Link.type linkType=Link.type.INTERNAL;  while (!linkOpenTags.empty()) {    int linkStartTag=linkOpenTags.pop();    int linkEndTag=sm.indexOf("]]",linkStartTag);    if (linkEndTag == -1) {      continue;    }    int linkOptionTag=sm.indexOf("|",linkStartTag,linkEndTag);    int linkTextStart;    String linkTarget;    if (linkOptionTag != -1) {      linkTextStart=linkOptionTag + 1;      linkTarget=sm.substring(new Span(linkStartTag + 2,linkOptionTag).trim(sm));    } else {      linkTextStart=linkStartTag + 2;      linkTarget=sm.substring(new Span(linkStartTag + 2,linkEndTag).trim(sm));    }    if (linkTarget.indexOf(lineSeparator) != -1) {      continue;    }    linkTarget=encodeWikistyle(linkTarget);    List<String> parameters;    String namespace=getLinkNameSpace(linkTarget);    if (namespace != null) {      if (imageIdentifers.indexOf(namespace) != -1) {        if (linkOptionTag != -1) {          int temp;          while ((temp=sm.indexOf("|",linkTextStart,linkEndTag)) != -1) {            linkTextStart=temp + 1;          }          parameters=tokenize(sm,linkOptionTag + 1,linkEndTag,"|");          if (sm.charAt(linkEndTag + 2) == ']' && sm.indexOf("[",linkTextStart,linkEndTag) != -1) {            linkEndTag++;          }        } else {          parameters=null;        }        linkType=Link.type.IMAGE;      } else {        linkType=Link.type.UNKNOWN;        parameters=null;      }    } else {      if (linkType == Link.type.INTERNAL && lastLinkSpan.hits(new Span(linkStartTag,linkEndTag + 2))) {        continue;      }      parameters=null;      linkType=Link.type.INTERNAL;    }    Span posSpan=new Span(linkTextStart,linkEndTag).trim(sm);    linkSpans.add(posSpan);    Link l=new Link(null,posSpan,linkTarget,linkType,parameters);    links.add(l);    if (calculateSrcSpans) {      l.setSrcSpan(new SrcSpan(sm.getSrcPos(linkStartTag),sm.getSrcPos(linkEndTag + 2)));    }    sm.delete(posSpan.getEnd(),linkEndTag + 2);    sm.delete(linkStartTag,posSpan.getStart());    int lsinlink;    while ((lsinlink=sm.indexOf(lineSeparator,posSpan)) != -1) {      sm.replace(lsinlink,lsinlink + lineSeparator.length()," ");    }    lastLinkSpan=posSpan;  }}  }
class C{  public UnknownFormatConversionException(String s){  if (s == null)   throw new NullPointerException();  this.s=s;}  }
class C{  public VelocityScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY,boolean flywheel){  this(context,interpolator,flywheel);}  }
class C{  public Rect copy(){  return new Rect(x,y,width,height);}  }
class C{  public IllegalThreadStateException(String s){  super(s);}  }
class C{  public Transaction tx(){  return graph.tx();}  }
class C{  public StateEntity_ createStateEntity_(){  StateEntity_Impl stateEntity_=new StateEntity_Impl();  return stateEntity_;}  }
class C{  private static String queryString(Collection<Pair<String,String>> pairs){  if (pairs.isEmpty()) {    return "";  }  final Joiner joiner=Joiner.on("&");  final List<String> params=new LinkedList<>();  for (  Pair<String,String> pair : pairs) {    params.add(pair.first + '=' + pair.second);  }  return '?' + joiner.join(params);}  }
class C{  public void start(){  log.info("Starting {}: {}",this.getClass().getSimpleName(),this.getServerName());  try {    jmsServer.start();  } catch (  Exception ex) {    throw new RuntimeException(String.format("Exception encountered starting %s: %s",jmsServer.getClass().getSimpleName(),this.getServerName()),ex);  }}  }
class C{  final boolean casBase(long cmp,long val){  return UNSAFE.compareAndSwapLong(this,BASE,cmp,val);}  }
class C{  @Nullable public <VS extends ValuesSource>VS valuesSource(ValuesSourceConfig<VS> config,SearchContext context) throws IOException {  assert config.valid() : "value source config is invalid - must have either a field context or a script or marked as unmapped";  final VS vs;  if (config.unmapped) {    if (config.missing == null) {      vs=null;    } else     if (ValuesSource.Numeric.class.isAssignableFrom(config.valueSourceType)) {      vs=(VS)ValuesSource.Numeric.EMPTY;    } else     if (ValuesSource.GeoPoint.class.isAssignableFrom(config.valueSourceType)) {      vs=(VS)ValuesSource.GeoPoint.EMPTY;    } else     if (ValuesSource.class.isAssignableFrom(config.valueSourceType) || ValuesSource.Bytes.class.isAssignableFrom(config.valueSourceType) || ValuesSource.Bytes.WithOrdinals.class.isAssignableFrom(config.valueSourceType)) {      vs=(VS)ValuesSource.Bytes.EMPTY;    } else {      throw new SearchParseException(searchContext,"Can't deal with unmapped ValuesSource type " + config.valueSourceType,null);    }  } else {    vs=originalValuesSource(config);  }  if (config.missing == null) {    return vs;  }  if (vs instanceof ValuesSource.Bytes) {    final BytesRef missing=new BytesRef(config.missing.toString());    if (vs instanceof ValuesSource.Bytes.WithOrdinals) {      return (VS)MissingValues.replaceMissing((ValuesSource.Bytes.WithOrdinals)vs,missing);    } else {      return (VS)MissingValues.replaceMissing((ValuesSource.Bytes)vs,missing);    }  } else   if (vs instanceof ValuesSource.Numeric) {    Number missing=null;    if (config.missing instanceof Number) {      missing=(Number)config.missing;    } else {      if (config.fieldContext != null && config.fieldContext.fieldType() instanceof DateFieldMapper.DateFieldType) {        final DateFieldMapper.DateFieldType fieldType=(DateFieldMapper.DateFieldType)config.fieldContext.fieldType();        try {          missing=fieldType.dateTimeFormatter().parser().parseDateTime(config.missing.toString()).getMillis();        } catch (        IllegalArgumentException e) {          throw new SearchParseException(context,"Expected a date value in [missing] but got [" + config.missing + "]",null,e);        }      } else {        try {          missing=Double.parseDouble(config.missing.toString());        } catch (        NumberFormatException e) {          throw new SearchParseException(context,"Expected a numeric value in [missing] but got [" + config.missing + "]",null,e);        }      }    }    return (VS)MissingValues.replaceMissing((ValuesSource.Numeric)vs,missing);  } else   if (vs instanceof ValuesSource.GeoPoint) {    final GeoPoint missing=GeoUtils.parseGeoPoint(config.missing.toString(),new GeoPoint());    return (VS)MissingValues.replaceMissing((ValuesSource.GeoPoint)vs,missing);  } else {    throw new SearchParseException(searchContext,"Can't apply missing values on a " + vs.getClass(),null);  }}  }
class C{  public static String[] split(String input,String regularExpression,int limit){  return input.split(regularExpression,limit);}  }
class C{  private final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  private void addMsrpTransactionInfo(String transactionId,String msrpMsgId,String cpimMsgId,TypeMsrpChunk typeMsrpChunk){  if (mTransactionInfoMap != null && transactionId != null) {synchronized (mTransactionMsgIdMapLock) {      mTransactionInfoMap.put(transactionId,new MsrpTransactionInfo(transactionId,msrpMsgId,cpimMsgId,typeMsrpChunk));      if (mMessageTransactionMap != null && msrpMsgId != null) {        mMessageTransactionMap.put(msrpMsgId,transactionId);      }    }  }}  }
class C{  private static String tableToHtml(Table t){  if (t == null) {    return "null";  }  StringBuilder result=new StringBuilder();  int colspan;  try {    colspan=t.getTableElement(t.nrOfTableElements() - 1).getCol() + 1;  } catch (  Exception e) {    colspan=1;  }  result.append("<table class=\"Table\">\n<tr><th colspan=" + colspan + " class=\"Table\">Table");  if (t.getTitleElement() != null) {    result.append(contentElementToHtml(t.getTitleElement()));  }  result.append("</th></tr>\n<tr>\n");  int row=0;  for (int i=0; i < t.nrOfTableElements(); i++) {    TableElement td=t.getTableElement(i);    if (td.getRow() > row) {      result.append("</tr><tr>\n");      row=td.getRow();    }    result.append("<td class=\"Table\">\n" + tableElementToHtml(td) + "</td>\n");  }  result.append("</tr>\n</table>\n");  return result.toString();}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  private void notifyPreloader(int step,int totalSteps,String detailMessage){  int numPreloaderSteps;  if (totalSteps != 0)   numPreloaderSteps=totalSteps; else   numPreloaderSteps=3;  double progress=(double)step / numPreloaderSteps;  LauncherImpl.notifyPreloader(this,new CustomProgressNotification(progress,detailMessage));}  }
class C{  public static SpannableString typeface(CharSequence sequence){  if (sDefaultTypefaceCollection == null) {    throw new IllegalStateException("Default typeface collection not initialized. Forgot to call init()?");  }  return typeface(sequence,sDefaultTypefaceCollection,Typeface.NORMAL);}  }
class C{  private boolean initTransition(Transition transition,Form source,Form dest){  try {    dest.setVisible(true);    transition.init(source,dest);    if (source != null) {      source.setLightweightMode(true);    }    if (dest != null) {      dest.setLightweightMode(true);    }    transition=impl.getNativeTransition(transition);    animationQueue.add(transition);    if (animationQueue.size() == 1) {      transition.initTransition();    }  } catch (  Throwable e) {    e.printStackTrace();    transition.cleanup();    animationQueue.remove(transition);    return false;  }  return true;}  }
class C{  public boolean isGuaranteeDate(){  Object oo=get_Value(COLUMNNAME_IsGuaranteeDate);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void onTrimMemory(int level){switch (level) {case Application.TRIM_MEMORY_COMPLETE:    clear();  break;case Application.TRIM_MEMORY_MODERATE:clear(CACHE_PROTOTYPE,CACHE_SCRIPTS);break;case Application.TRIM_MEMORY_BACKGROUND:clear(CACHE_SCRIPTS);break;case Application.TRIM_MEMORY_UI_HIDDEN:clear(CACHE_SCRIPTS);break;case Application.TRIM_MEMORY_RUNNING_CRITICAL:break;case Application.TRIM_MEMORY_RUNNING_LOW:break;case Application.TRIM_MEMORY_RUNNING_MODERATE:break;}}  }
class C{  private static boolean determineRPStandbyJournalMigration(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,List<RPVPlexMigration> potentialMigrations,StringBuffer notSuppReasonBuff,DbClient dbClient){  boolean invalidMigration=false;  String currentStandbyJournalVarrayId=NullColumnValueGetter.getStringValue(currentVpool.getStandbyJournalVarray());  String currentStandbyJournalVpoolId=NullColumnValueGetter.getStringValue(currentVpool.getStandbyJournalVpool());  String newStandbyJournalVarrayId=NullColumnValueGetter.getStringValue(newVpool.getStandbyJournalVarray());  String newStandbyJournalVpoolId=NullColumnValueGetter.getStringValue(newVpool.getStandbyJournalVpool());  if (currentStandbyJournalVarrayId.equals(NullColumnValueGetter.getNullStr())) {    URI haVarrayURI=getHaVarrayURI(currentVpool);    currentStandbyJournalVarrayId=(haVarrayURI != null ? haVarrayURI.toString() : NullColumnValueGetter.getNullStr());  }  if (currentStandbyJournalVpoolId.equals(NullColumnValueGetter.getNullStr())) {    currentStandbyJournalVpoolId=currentVpool.getId().toString();  }  VirtualPool currentStandbyJournalVpool=dbClient.queryObject(VirtualPool.class,URI.create(currentStandbyJournalVpoolId));  if (newStandbyJournalVarrayId.equals(NullColumnValueGetter.getNullStr())) {    URI haVarrayURI=getHaVarrayURI(newVpool);    newStandbyJournalVarrayId=(haVarrayURI != null ? haVarrayURI.toString() : NullColumnValueGetter.getNullStr());  }  if (newStandbyJournalVpoolId.equals(NullColumnValueGetter.getNullStr())) {    newStandbyJournalVpoolId=newVpool.getId().toString();  }  VirtualPool newStandbyJournalVpool=dbClient.queryObject(VirtualPool.class,URI.create(newStandbyJournalVpoolId));  if (!currentStandbyJournalVpoolId.equals(newStandbyJournalVpoolId)) {    if (currentStandbyJournalVarrayId.equals(newStandbyJournalVarrayId) && VirtualPool.vPoolSpecifiesHighAvailability(currentStandbyJournalVpool) && VirtualPool.vPoolSpecifiesHighAvailability(newStandbyJournalVpool)) {      potentialMigrations.add(new RPVPlexMigration(Volume.PersonalityTypes.METADATA,Volume.PersonalityTypes.SOURCE,URI.create(currentStandbyJournalVarrayId),currentStandbyJournalVpool,newStandbyJournalVpool));    } else {      notSuppReasonBuff.append("Not valid for migration due to changes in RP Standby Journal virtual pool / virtual array.");      invalidMigration=true;    }  } else {    if (!currentStandbyJournalVarrayId.equals(newStandbyJournalVarrayId)) {      notSuppReasonBuff.append("Not valid for migration due to changes in RP Standby Journal virtual array.");      invalidMigration=true;    }  }  return invalidMigration;}  }
class C{  public boolean hasFormat(String key){  return mFormatAndSample.containsKey(key);}  }
class C{  private void doValidate(Object target,Object[] validationHints,MethodParameter methodParam){  String name=Conventions.getVariableNameForParameter(methodParam);  Errors errors=new BeanPropertyBindingResult(target,name);  if (!ObjectUtils.isEmpty(validationHints) && this.validator instanceof SmartValidator) {    ((SmartValidator)this.validator).validate(target,errors,validationHints);  } else   if (this.validator != null) {    this.validator.validate(target,errors);  }  if (errors.hasErrors()) {    throw new ServerWebInputException("Validation failed",methodParam);  }}  }
class C{  public int compareTo(Object other){  FormRange otherRange=(FormRange)other;  return new Integer(start).compareTo(new Integer(otherRange.start));}  }
class C{  public Set<Entry<T,Integer>> entrySet(){  return map.entrySet();}  }
class C{  public SVGOMRect(){}  }
class C{  private void showEapFieldsByMethod(int eapMethod){  mView.findViewById(R.id.l_method).setVisibility(View.VISIBLE);  mView.findViewById(R.id.l_identity).setVisibility(View.VISIBLE);  mView.findViewById(R.id.l_ca_cert).setVisibility(View.VISIBLE);  mView.findViewById(R.id.password_layout).setVisibility(View.VISIBLE);  mView.findViewById(R.id.show_password_layout).setVisibility(View.VISIBLE);  Context context=mConfigUi.getContext();switch (eapMethod) {case WIFI_EAP_METHOD_PWD:    setPhase2Invisible();  setCaCertInvisible();setAnonymousIdentInvisible();setUserCertInvisible();break;case WIFI_EAP_METHOD_TLS:mView.findViewById(R.id.l_user_cert).setVisibility(View.VISIBLE);setPhase2Invisible();setAnonymousIdentInvisible();setPasswordInvisible();break;case WIFI_EAP_METHOD_PEAP:if (mPhase2Adapter != PHASE2_PEAP_ADAPTER) {mPhase2Adapter=PHASE2_PEAP_ADAPTER;mPhase2Spinner.setAdapter(mPhase2Adapter);}mView.findViewById(R.id.l_phase2).setVisibility(View.VISIBLE);mView.findViewById(R.id.l_anonymous).setVisibility(View.VISIBLE);setUserCertInvisible();break;case WIFI_EAP_METHOD_TTLS:if (mPhase2Adapter != PHASE2_FULL_ADAPTER) {mPhase2Adapter=PHASE2_FULL_ADAPTER;mPhase2Spinner.setAdapter(mPhase2Adapter);}mView.findViewById(R.id.l_phase2).setVisibility(View.VISIBLE);mView.findViewById(R.id.l_anonymous).setVisibility(View.VISIBLE);setUserCertInvisible();break;}}  }
class C{  public static byte[] stringToGsm7BitPacked(String data,int languageTable,int languageShiftTable) throws EncodeException {  return stringToGsm7BitPacked(data,0,true,languageTable,languageShiftTable);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private SnmpPduPacket executeSubRequest(SnmpPduPacket req,Object userData){  int errorStatus=SnmpDefinitions.snmpRspNoError;  int i;  if (req.type == pduSetRequestPdu) {    i=0;    for (Enumeration<SnmpSubRequestHandler> e=subs.elements(); e.hasMoreElements(); i++) {      SnmpSubRequestHandler sub=e.nextElement();      sub.setUserData(userData);      sub.type=pduWalkRequest;      sub.run();      sub.type=pduSetRequestPdu;      if (sub.getErrorStatus() != SnmpDefinitions.snmpRspNoError) {        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {          SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"executeSubRequest","an error occurs");        }        return newErrorResponsePdu(req,errorStatus,sub.getErrorIndex() + 1);      }    }  }  i=0;  for (Enumeration<SnmpSubRequestHandler> e=subs.elements(); e.hasMoreElements(); i++) {    SnmpSubRequestHandler sub=e.nextElement();    sub.setUserData(userData);    sub.run();    if (sub.getErrorStatus() != SnmpDefinitions.snmpRspNoError) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"executeSubRequest","an error occurs");      }      return newErrorResponsePdu(req,errorStatus,sub.getErrorIndex() + 1);    }  }  return null;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","lzlqc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public Builder cacheOnDisc(boolean cacheOnDisc){  this.cacheOnDisc=cacheOnDisc;  return this;}  }
class C{  protected int readShort(){  return read() | (read() << 8);}  }
class C{  protected S_ExperimentImpl(){  super();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void sendRequest() throws IOException {  if (_conn instanceof HttpURLConnection) {    HttpURLConnection httpConn=(HttpURLConnection)_conn;    _statusCode=500;    try {      _statusCode=httpConn.getResponseCode();    } catch (    Exception e) {    }    parseResponseHeaders(httpConn);    InputStream is=null;    if (_statusCode != 200) {      StringBuffer sb=new StringBuffer();      int ch;      try {        is=httpConn.getInputStream();        if (is != null) {          while ((ch=is.read()) >= 0)           sb.append((char)ch);          is.close();        }        is=httpConn.getErrorStream();        if (is != null) {          while ((ch=is.read()) >= 0)           sb.append((char)ch);        }        _statusMessage=sb.toString();      } catch (      FileNotFoundException e) {        throw new HessianConnectionException("HessianProxy cannot connect to '" + _url,e);      }catch (      IOException e) {        if (is == null)         throw new HessianConnectionException(_statusCode + ": " + e,e); else         throw new HessianConnectionException(_statusCode + ": " + sb,e);      }      if (is != null)       is.close();      throw new HessianConnectionException(_statusCode + ": " + sb.toString());    }  }}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private AccessGrant createAccessGrant(Map<String,String> params){  AccessGrant accessGrant=new AccessGrant();  if (params.get("access_token") != null) {    String accessToken=params.get("access_token");    Integer expires=null;    if (params.get("expires") != null) {      expires=Integer.valueOf(params.get("expires"));    }    accessGrant.setKey(accessToken);    accessGrant.setAttribute("expires",expires);  }  accessGrant.setProviderId(mProviderName.toString());  return accessGrant;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.SDECLARATION__NAME:    setName(NAME_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof lalr_state))   return false; else   return equals((lalr_state)other);}  }
class C{  public void outputGraph(FlowNetwork<?> fn,boolean includeCut){  System.out.println(computeDotty(fn,includeCut));}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:12.053 -0500",hash_original_method="4A11638BF238EC4AAC97B2692C051A84",hash_generated_method="8903FA48DC3DA7ABC8ACEDC2841258A0") public SocketTimeoutException(){}  }
class C{  private void updateTitle(){  if (mRestaurantsSel == 0 && mFriendsSel == 0) {    setTitle(R.string.init_title);  } else   if (mPager != null) {    int page=mPager.getCurrentItem();    if (page == 0 && mRestaurantsSel > 0) {      setTitle(getString(R.string.n_selected,mRestaurantsSel));    } else     if (page == 1 && mFriendsSel > 0) {      setTitle(getString(R.string.n_selected,mFriendsSel));    } else {      setTitle(R.string.init_title);    }  } else {    String restaurants=mRestaurantsSel > 0 ? res().getQuantityString(R.plurals.n_restaurants,mRestaurantsSel,mRestaurantsSel) : null;    String friends=mFriendsSel > 0 ? res().getQuantityString(R.plurals.n_friends,mFriendsSel,mFriendsSel) : null;    if (restaurants != null && friends != null) {      setTitle(getString(R.string.s_s_selected,restaurants,friends));    } else {      setTitle(getString(R.string.s_selected,restaurants != null ? restaurants : friends));    }  }}  }
class C{  public static void assertNotInstanceOf(Class<?> expectedClassType,Object actualObject){  try {    Verify.assertNotInstanceOf(actualObject.getClass().getName(),expectedClassType,actualObject);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public DrawerBuilder withDelayOnDrawerClose(int delayOnDrawerClose){  this.mDelayOnDrawerClose=delayOnDrawerClose;  return this;}  }
class C{  public void mouseEntered(MouseEvent e){  if (Debug.debugging("mousemodedetail")) {    Debug.output(getID() + "|NavMouseMode.mouseEntered()");  }  super.mouseEntered(e);  autoZoom=true;}  }
class C{  public static void assertEqualsAndHash(Object one,Object two){  assertEquals(one,two);  assertEquals(two,one);  assertEquals(one.hashCode(),two.hashCode());}  }
class C{  public boolean dialMemory(BluetoothDevice device,int location){  if (DBG)   log("dialMemory()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.dialMemory(device,location);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  ModeUsage changeCurrentMode(Mode currentMode){  return new ModeUsage(mode,currentMode,modeMap);}  }
class C{  private static boolean isSeparator(char ch){  return !isDialable(ch) && !(('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z'));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=getMediaFile(stack);  return (mf != null) ? mf.getEncodedBy() : "";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:22.204 -0400",hash_original_method="E3CF5E1255C11A7B0E4018DC6610F4FD",hash_generated_method="C33CB26CC9C743A741A8B65447ABCB10") public NTLMEngineException(String message){  super(message);}  }
class C{  public StateMachineException(String message,Exception e){  super(message,e);}  }
class C{  @Override void initDevicePreference(BluetoothDevicePreference preference){  CachedBluetoothDevice cachedDevice=preference.getCachedDevice();  if (cachedDevice.getBondState() == BluetoothDevice.BOND_BONDED) {    preference.setOnSettingsClickListener(mDeviceProfilesListener);  }}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    CandleItem dataItem=(CandleItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Open: "+ dataItem.getOpen()+ " Close: "+ dataItem.getClose()+ " High: "+ dataItem.getHigh()+ " Low: "+ dataItem.getLow()+ " Volume: "+ dataItem.getVolume());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public double readDouble(String delimiters) throws IOException, ImportException {  String token=readToken(delimiters);  try {    return Double.parseDouble(token);  } catch (  NumberFormatException nfe) {    throw new ImportException("Number format error: " + nfe.getMessage());  }}  }
class C{  private static Uri user(Context context,ContentResolver cr,long id,Set<CharSequence> lines,Bitmap icon){  Uri photo=null;  String[] proj={Contacts.ANDROID_LOOKUP_KEY,Contacts.ANDROID_ID,Contacts.NAME};  String sel=Contacts.STATUS_ID + " = ?";  String[] args={String.valueOf(ACTIVE.id)};  EasyCursor c=new EasyCursor(cr.query(ContentUris.withAppendedId(Contacts.CONTENT_URI,id),proj,sel,args,null));  if (c.moveToFirst()) {    String name=c.getString(Contacts.NAME);    if (name == null) {      name=context.getString(R.string.non_contact);    }    lines.add(context.getString(R.string.new_friend,name));    photo=EMPTY;    if (icon == null) {      String androidKey=c.getString(Contacts.ANDROID_LOOKUP_KEY);      long androidId=c.getLong(Contacts.ANDROID_ID);      if (androidKey != null && androidId > 0) {        photo=ContactsContract.Contacts.getLookupUri(androidId,androidKey);      }    }  }  c.close();  return photo;}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public int stepToNextEvent(boolean stepIntoGroup){  if ((getEvent() == FormEntryController.EVENT_GROUP || getEvent() == FormEntryController.EVENT_REPEAT) && indexIsInFieldList() && !stepIntoGroup) {    return stepOverGroup();  } else {    return mFormEntryController.stepToNextEvent();  }}  }
class C{  public QueryExecutionLowMemoryException(Throwable cause){  super(cause);}  }
class C{  public Stream<Tuple2io<int[][]>> read(InputStream in){  return new BufferedReader(new InputStreamReader(in)).lines().map(null);}  }
class C{  public boolean isOutContentProcessed(){  return (collector().isOutContentProcessed(getRuleName()));}  }
class C{  public void writePathsToStream(final ObjectOutput os) throws IOException {  if ((paths != null)) {    final GeneralPath[] generalPaths=paths.get();    int count=0;    for (int i=0; i < generalPaths.length; i++) {      if (generalPaths[i] == null) {        count=i;        break;      }    }    os.writeObject(count);    for (int i=0; i < count; i++) {      final PathIterator pathIterator=generalPaths[i].getPathIterator(new AffineTransform());      PathSerializer.serializePath(os,pathIterator);    }  }}  }
class C{  @Override public int read() throws IOException {  int x=in.read();  if (x != -1) {    check.update(x);  }  return x;}  }
class C{  public StringCharacterIterator(String text,int pos){  this(text,0,text.length(),pos);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,null,e));}  }
class C{  public static Color deriveBrighter(Color color){  return deriveWithAlpha(blend(color,Color.WHITE,0.5),color.getAlpha());}  }
class C{  public boolean areDifferent(){  return !this.fileDiffs.isEmpty();}  }
class C{  private void postInitViewPager(){  try {    Class<?> viewpager=ViewPager.class;    Field scroller=viewpager.getDeclaredField("mScroller");    scroller.setAccessible(true);    Field interpolator=viewpager.getDeclaredField("sInterpolator");    interpolator.setAccessible(true);    mScroller=new CustomDurationScroller(getContext(),(Interpolator)interpolator.get(null));    double duration=15;    mScroller.setScrollDurationFactor(duration);    scroller.set(this,mScroller);  } catch (  NoSuchFieldException e) {  }catch (  IllegalArgumentException e) {  }catch (  IllegalAccessException e) {  }}  }
class C{  public BoolLiteral createBoolLiteral(){  BoolLiteralImpl boolLiteral=new BoolLiteralImpl();  return boolLiteral;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:17.544 -0500",hash_original_method="534F9793819E6D7D8427F97C64CDA54E",hash_generated_method="616A7277059590F31C767CB08E6096DD") private void watchChildren(){  MutableInt status=new MutableInt(-1);  while (true) {    try {      int pid=Libcore.os.waitpid(0,status,0);      int exitValue;      if (WIFEXITED(status.value)) {        exitValue=WEXITSTATUS(status.value);      } else       if (WIFSIGNALED(status.value)) {        exitValue=WTERMSIG(status.value);      } else       if (WIFSTOPPED(status.value)) {        exitValue=WSTOPSIG(status.value);      } else {        throw new AssertionError("unexpected status from waitpid: " + status.value);      }      onExit(pid,exitValue);    } catch (    ErrnoException errnoException) {      if (errnoException.errno == ECHILD) {        waitForMoreChildren();        continue;      } else {        throw new AssertionError(errnoException);      }    }  }}  }
class C{  public static String generateORTokens(DbColumnDef colDef,Object[] valuesFields,DbColumnDef secondColDef,Object[] secondValuesFields){  String[] sentences=new String[valuesFields.length];  for (int i=0; i < valuesFields.length; i++) {    StringBuffer sentencia=new StringBuffer("(").append(generateEQTokenField(colDef,valuesFields[i].toString())).append(DBUtils.AND).append(generateEQTokenField(secondColDef,secondValuesFields[i].toString())).append(")");    sentences[i]=sentencia.toString();  }  return generateORTokens(sentences);}  }
class C{  public void positionClosed(TradePosition trade){}  }
class C{  public static void downloadFiles(final String downloadFolder,final String contentFolderUrl,final List<ManifestFile> files,final Map<String,String> requestHeaders) throws Exception {  for (  ManifestFile file : files) {    String fileUrl=URLUtility.construct(contentFolderUrl,file.name);    String filePath=Paths.get(downloadFolder,file.name);    download(fileUrl,filePath,file.hash,requestHeaders);  }}  }
class C{  public void info(Object message){  log(Level.INFO,String.valueOf(message),null);}  }
class C{  public LayerEvent(Object source,int type,Layer[] layers){  super(source);  this.layers=layers;  this.type=type;}  }
class C{  public void multiplyAllValuesBy(final double multiplyBy,final int roundType){  m_resources.multiplyAllValuesBy(multiplyBy,roundType);}  }
class C{  public void testLongReverse() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new NumericDocValuesField("value",3000000000L));  doc.add(newStringField("value","3000000000",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",-1));  doc.add(newStringField("value","-1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",4));  doc.add(newStringField("value","4",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.LONG,true));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("3000000000",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("-1",searcher.doc(td.scoreDocs[2].doc).get("value"));  ir.close();  dir.close();}  }
class C{  private static void ArrayReadByteWrite() throws Throwable {  byte[] buf=new byte[512];  reset();  for (; ; ) {    int len=dis.read(buf,0,buf.length);    if (len <= 0) {      break;    } else {      for (int i=0; i < len; i++) {        byte x=(byte)(buf[i] & 0xff);        ios.write(x);      }    }  }  check(dis.available() == 0);  ios.close();  check(Arrays.equals(data,baos.toByteArray()));}  }
class C{  protected void receivePlayerInfo(Packet c){  int pindex=c.getIntValue(0);  IPlayer newPlayer=(IPlayer)c.getObject(1);  if (getPlayer(newPlayer.getId()) == null) {    game.addPlayer(pindex,newPlayer);  } else {    game.setPlayer(pindex,newPlayer);  }  PreferenceManager.getClientPreferences().setLastPlayerColor(newPlayer.getColorIndex());  PreferenceManager.getClientPreferences().setLastPlayerCategory(newPlayer.getCamoCategory());  PreferenceManager.getClientPreferences().setLastPlayerCamoName(newPlayer.getCamoFileName());}  }
class C{  @Override public void testFinished(Description description){  LoggingUtils.getEvoLogger().info("* Finished: " + "ClassName: " + description.getClassName() + ", MethodName: "+ description.getMethodName());  this.testResult.setRuntime(System.nanoTime() - this.start);  this.testResult.setExecutionTrace(ExecutionTracer.getExecutionTracer().getTrace());  this.testResult.incrementRunCount();  ExecutionTracer.getExecutionTracer().clear();  this.junitRunner.addResult(this.testResult);}  }
class C{  private static void addMarkerForMethod(MethodModel method,IFile file,String message,int lineNbr) throws CoreException {  IMarker marker=file.createMarker(DROIDSAFE_MARKER_ID);  marker.setAttribute(IMarker.LINE_NUMBER,lineNbr);  marker.setAttribute(IMarker.SEVERITY,IMarker.SEVERITY_INFO);  marker.setAttribute("methodName",method.getMethodName());  marker.setAttribute("methodClass",method.getClassName());  marker.setAttribute(IMarker.MESSAGE,message);}  }
class C{  public MailBuilder subject(String subject){  return param("subject",subject);}  }
class C{  public static InputStream openContentStream(){  String progName=Program.getInstance().getProgramName().toLowerCase();  String contents="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><" + progName + "_diagram></"+ progName+ "_diagram>";  try {    return new ByteArrayInputStream(contents.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("UTF-8 encoding not supported",e);  }}  }
class C{  public String toString(){  return "null";}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null)   return new Long(tun.getRemoteInfo(remoteName).bit_time); else   return new Long(0);}  }
class C{  public void onAbort(R result,Throwable failure,ExecutionContext context){}  }
class C{  public void formatWindow(final ManagedWindow window){  final WindowConfiguration config=getConfig(window);  window.moveTo(config.x,config.y);  window.setMinimized(config.minimized);  window.setVisible(config.visible);}  }
class C{  private Button addSkinny(LinearLayout root,String label,boolean atRight){  Button button=new MyButton(this);  button.setText(label);  button.setLayoutParams(new LinearLayout.LayoutParams(0,ViewGroup.LayoutParams.WRAP_CONTENT,480));  TextView filler=new TextView(this);  filler.setText("filler");  filler.setLayoutParams(new LinearLayout.LayoutParams(0,ViewGroup.LayoutParams.WRAP_CONTENT,520));  LinearLayout ll=new LinearLayout(this);  ll.setOrientation(LinearLayout.HORIZONTAL);  ll.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT));  if (atRight) {    ll.addView(filler);    ll.addView(button);    root.addView(ll);  } else {    ll.addView(button);    ll.addView(filler);    root.addView(ll);  }  return button;}  }
class C{  public void checkAndCleanAuthenticationInfo() throws ServerRuntimeException, ConfigurationException {  checkAndCleanAuthenticationInfo(TUNGSTEN_APPLICATION_NAME.ANY);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static synchronized void install(){}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe expression to use for filtering\n" + "\t(default: true).","E",1,"-E <expr>"));  result.addElement(new Option("\tApply the filter to instances that arrive after the first\n" + "\t(training) batch. The default is to not apply the filter (i.e.\n" + "\talways return the instance)","F",0,"-F"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:31.069 -0500",hash_original_method="FA8D422BA92412355CA6BC772A1072B7",hash_generated_method="FA55FD0704AB426B33539342BB0248C9") public MalformedCookieException(){  super();}  }
class C{  public void readBitString() throws IOException {  if (tag == ASN1Constants.TAG_BITSTRING) {    if (length == 0) {      throw new ASN1Exception("ASN.1 Bitstring: wrong length. Tag at [" + tagOffset + "]");    }    readContent();    if (buffer[contentOffset] > 7) {      throw new ASN1Exception("ASN.1 Bitstring: wrong content at [" + contentOffset + "]. A number of unused bits MUST be in range 0 to 7");    }    if (length == 1 && buffer[contentOffset] != 0) {      throw new ASN1Exception("ASN.1 Bitstring: wrong content at [" + contentOffset + "]. For empty string unused bits MUST be 0");    }  } else   if (tag == ASN1Constants.TAG_C_BITSTRING) {    throw new ASN1Exception("Decoding constructed ASN.1 bitstring  type is not provided");  } else {    throw expected("bitstring");  }}  }
class C{  public RemoteSageFile(String hostname,File file,String transcodeMode) throws IOException {  this(hostname,file.getPath(),transcodeMode);}  }
class C{  public void findPackageAndClass() throws IOException {  packageName=null;  className=null;  LineNumberReader reader=new LineNumberReader(new FileReader(inputFile));  try {    while (className == null || packageName == null) {      String line=reader.readLine();      if (line == null)       break;      if (packageName == null) {        Matcher matcher=PACKAGE_PATTERN.matcher(line);        if (matcher.find()) {          packageName=matcher.group(1);        }      }      if (className == null) {        Matcher matcher=CLASS_PATTERN.matcher(line);        if (matcher.find()) {          className=matcher.group(1);        }      }    }    if (className == null) {      className="Yylex";    }  }  finally {    reader.close();  }}  }
class C{  public static void lookupUpdates(){  if (LOOKUP_BOOTSTRAP_UPDATE) {    WindowManager.getDefault().invokeWhenUIReady(null);  }}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public double calcChiSquare(Tetrad... tetrads){  this.df=tetrads.length;  Set<Sigma> boldSigmaSet=new LinkedHashSet<>();  List<Sigma> boldSigma=new ArrayList<>();  for (  Tetrad tetrad : tetrads) {    boldSigmaSet.add(new Sigma(tetrad.getI(),tetrad.getK()));    boldSigmaSet.add(new Sigma(tetrad.getI(),tetrad.getL()));    boldSigmaSet.add(new Sigma(tetrad.getJ(),tetrad.getK()));    boldSigmaSet.add(new Sigma(tetrad.getJ(),tetrad.getL()));  }  for (  Sigma sigma : boldSigmaSet) {    boldSigma.add(sigma);  }  TetradMatrix sigma_ss=new TetradMatrix(boldSigma.size(),boldSigma.size());  for (int i=0; i < boldSigma.size(); i++) {    for (int j=0; j < boldSigma.size(); j++) {      Sigma sigmaef=boldSigma.get(i);      Sigma sigmagh=boldSigma.get(j);      Node e=sigmaef.getA();      Node f=sigmaef.getB();      Node g=sigmagh.getA();      Node h=sigmagh.getB();      if (cov != null && cov instanceof CorrelationMatrix) {        double rr=0.5 * (sxy(e,f) * sxy(g,h)) * (sxy(e,g) * sxy(e,g) + sxy(e,h) * sxy(e,h) + sxy(f,g) * sxy(f,g) + sxy(f,h) * sxy(f,h)) + sxy(e,g) * sxy(f,h) + sxy(e,h) * sxy(f,g) - sxy(e,f) * (sxy(f,g) * sxy(f,h) + sxy(e,g) * sxy(e,h)) - sxy(g,h) * (sxy(f,g) * sxy(e,g) + sxy(f,h) * sxy(e,h));        sigma_ss.set(i,j,rr);      } else       if (cov != null && dataSet == null) {        double _ss=sxy(e,g) * sxy(f,h) - sxy(e,h) * sxy(f,g);        sigma_ss.set(i,j,_ss);      } else {        double _ss=sxyzw(e,f,g,h) - sxy(e,f) * sxy(g,h);        sigma_ss.set(i,j,_ss);      }    }  }  TetradMatrix del=new TetradMatrix(boldSigma.size(),tetrads.length);  for (int i=0; i < boldSigma.size(); i++) {    for (int j=0; j < tetrads.length; j++) {      Sigma sigma=boldSigma.get(i);      Tetrad tetrad=tetrads[j];      Node e=tetrad.getI();      Node f=tetrad.getJ();      Node g=tetrad.getK();      Node h=tetrad.getL();      double derivative=getDerivative(e,f,g,h,sigma.getA(),sigma.getB());      del.set(i,j,derivative);    }  }  TetradMatrix t=new TetradMatrix(tetrads.length,1);  for (int i=0; i < tetrads.length; i++) {    Tetrad tetrad=tetrads[i];    Node e=tetrad.getI();    Node f=tetrad.getJ();    Node g=tetrad.getK();    Node h=tetrad.getL();    double d1=sxy(e,f);    double d2=sxy(g,h);    double d3=sxy(e,g);    double d4=sxy(f,h);    double value=d1 * d2 - d3 * d4;    t.set(i,0,value);  }  TetradMatrix w1=del.transpose().times(sigma_ss);  TetradMatrix sigma_tt=w1.times(del);  TetradMatrix v0=sigma_tt.inverse();  TetradMatrix v1=t.transpose().times(v0);  TetradMatrix v2=v1.times(t);  double chisq=N * v2.get(0,0);  this.chisq=chisq;  return chisq;}  }
class C{  public void csneg(int size,Register dst,Register src,ConditionFlag condition){  super.csneg(size,dst,src,src,condition.negate());}  }
class C{  public static Poisson serializableInstance(){  return new Poisson();}  }
class C{  public boolean removeStickyEventLocal(Object event){  return eventBus.removeStickyEvent(event);}  }
class C{  public boolean isAll(){  return isAll;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testCipherSpi04() throws Exception {  Mock_CipherSpi cSpi=new Mock_CipherSpi();  try {    cSpi.engineUnwrap(new byte[0],"",0);    fail("UnsupportedOperationException must be thrown");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public MandatoryUdaMissingException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public boolean save() throws CouldntSaveDataException {  m_rawView.save();  CSettingsFunctions.saveSettings(m_rawView,getView(),m_settings);  return true;}  }
class C{  public E element(){  E o=peek();  if (null == o) {    throw new NoSuchElementException();  }  return o;}  }
class C{  private void flipRightToLeft(int tabCount,Dimension size){  int rightMargin=size.width;  for (int i=0; i < tabCount; i++) {    rects[i].x=rightMargin - rects[i].x - rects[i].width;  }  if (scrollBackwardButton.isVisible()) {    Rectangle b=scrollBackwardButton.getBounds();    scrollBackwardButton.setLocation(rightMargin - b.x - b.width,b.y);  }  if (scrollForwardButton.isVisible()) {    Rectangle b=scrollForwardButton.getBounds();    scrollForwardButton.setLocation(rightMargin - b.x - b.width,b.y);  }}  }
class C{  private ValueLobDb(byte[] buff,int len,InputStream in,long remaining) throws IOException {  this.type=Value.BLOB;  this.small=null;  this.lobId=0;  this.fileName=createTempLobFileName();  RandomAccessFile tempFile=new RandomAccessFile(fileName,"rw");  long tmpPrecision=0;  try {    while (true) {      tmpPrecision+=len;      tempFile.write(buff,0,len);      remaining-=len;      if (remaining <= 0) {        break;      }      len=getBufferSize(remaining);      len=IOUtils.readFully(in,buff,len);      if (len <= 0) {        break;      }    }  }  finally {    tempFile.close();  }  this.precision=tmpPrecision;}  }
class C{  @Override public int compare(final Long o1,final Long o2){  if (o1.longValue() < o2.longValue())   return 1;  if (o1.longValue() > o2.longValue())   return -1;  return 0;}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public XMLElement(String fullName,String namespace){  this(fullName,namespace,null,NO_LINE);}  }
class C{  public void returnSpareRegisters(){  borrowedSpareRegisters=0;}  }
class C{  public void addPop(){  addCommand(new PDFPopCmd());}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public HuTuckerTransformationStrategy(final Iterable<? extends CharSequence> iterable,final boolean prefixFree){  this(getCoder(iterable,prefixFree),prefixFree);}  }
class C{  public SetMonitoringModeRequest clone(){  SetMonitoringModeRequest result=new SetMonitoringModeRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.SubscriptionId=SubscriptionId;  result.MonitoringMode=MonitoringMode;  result.MonitoredItemIds=MonitoredItemIds == null ? null : MonitoredItemIds.clone();  return result;}  }
class C{  public <Ex extends Throwable>Try<R,Ex> execute(T input,Class<Ex> classes){  return Try.withCatch(null,classes);}  }
class C{  @Override public void logCurrentState(){  StringBuilder logString=new StringBuilder();  logString.append("Logging current state. Time = ").append(currentTimeMillis()).append("\n");  logString.append("isStandaloneServer = ").append(isStandaloneServer).append("\n");  logString.append("maxAllowedLockTimeout = ").append(maxAllowedLockTimeout).append("\n");  logString.append("maxAllowedClockDrift = ").append(maxAllowedClockDrift).append("\n");  logString.append("maxAllowedBlockingDuration = ").append(maxAllowedBlockingDuration).append("\n");  logString.append("randomBitCount = ").append(randomBitCount).append("\n");  for (  Pair<String,? extends Collection<?>> nameValuePair : ImmutableList.of(Pair.create("descriptorToLockMap",descriptorToLockMap.asMap().entrySet()),Pair.create("outstandingLockRequestMultimap",outstandingLockRequestMultimap.asMap().entrySet()),Pair.create("heldLocksTokenMap",heldLocksTokenMap.entrySet()),Pair.create("heldLocksGrantMap",heldLocksGrantMap.entrySet()),Pair.create("lockTokenReaperQueue",queueToOrderedList(lockTokenReaperQueue)),Pair.create("lockGrantReaperQueue",queueToOrderedList(lockGrantReaperQueue)),Pair.create("lockClientMultimap",lockClientMultimap.asMap().entrySet()),Pair.create("versionIdMap",versionIdMap.asMap().entrySet()))) {    Collection<?> elements=nameValuePair.getRhSide();    logString.append(nameValuePair.getLhSide()).append(".size() = ").append(elements.size()).append("\n");    if (elements.size() > MAX_LOCKS_TO_LOG) {      logString.append("WARNING: Only logging the first ").append(MAX_LOCKS_TO_LOG).append(" locks, ");      logString.append("logging more is likely to OOM or slow down lock server to the point of failure");    }    for (    Object element : Iterables.limit(elements,MAX_LOCKS_TO_LOG)) {      logString.append(element).append("\n");    }  }  logString.append("Finished logging current state. Time = ").append(currentTimeMillis());  log.error(logString.toString());}  }
class C{  public long cubeRandomSeed(){  long hash=3;  hash=41 * hash + this.world.getSeed();  hash=41 * hash + getX();  hash=41 * hash + getY();  return 41 * hash + getZ();}  }
class C{  private boolean isUserAuthorized(HttpServletRequest httpRequest){  if (authorizedUsers == null) {    return true;  }  final String auth=httpRequest.getHeader("Authorization");  if (auth == null) {    return false;  }  if (!auth.toUpperCase(Locale.ENGLISH).startsWith("BASIC ")) {    return false;  }  final String userpassEncoded=auth.substring("BASIC ".length());  final String userpassDecoded=Base64Coder.decodeString(userpassEncoded);  final boolean authOk=authorizedUsers.contains(userpassDecoded);  return checkLockAgainstBruteForceAttack(authOk);}  }
class C{  public Extension build(String url) throws IOException, SAXException {  HttpGet get=new HttpGet(url);  try {    HttpResponse response=client.execute(get);    HttpEntity entity=response.getEntity();    if (entity != null) {      InputStream is=entity.getContent();      try {        Extension e=build(is);        LOG.info("Successfully parsed extension: " + e.getTitle());        return e;      } catch (      SAXException e) {        LOG.error("Unable to parse XML for extension: " + e.getMessage(),e);      } finally {        is.close();      }      EntityUtils.consume(entity);    }  } catch (  Exception e) {    LOG.error(e);  }  return null;}  }
class C{  private void addExternalValueInputPatch(boolean isShadow,int i,int xTo,InputView inputView,ViewPoint inputLayoutOrigin){  mHelper.setPointMaybeFlip(mInputConnectorOffsets.get(i),xTo,inputLayoutOrigin.y);  final NinePatchDrawable inputDrawable=getColoredPatchDrawable(isShadow ? R.drawable.value_input_external_shadow : R.drawable.value_input_external);  final NinePatchDrawable inputBorderDrawable=mPatchManager.getPatchDrawable(R.drawable.value_input_external_border);  final NinePatchDrawable connectionHighlightDrawable=mPatchManager.getPatchDrawable(R.drawable.value_input_external_connection);  int patchLeft=xTo - inputDrawable.getIntrinsicWidth();  int patchRight=xTo;  int connectorTop=inputLayoutOrigin.y + mBlockTopPadding;  int connectorBottom=inputLayoutOrigin.y + inputView.getMeasuredHeight();  mHelper.setRtlAwareBounds(tempRect,mBlockViewSize.x,patchLeft,connectorTop,patchRight,connectorBottom);  inputDrawable.setBounds(tempRect);  inputBorderDrawable.setBounds(tempRect);  connectionHighlightDrawable.setBounds(tempRect);  mBlockPatches.add(inputDrawable);  mBlockBorderPatches.add(inputBorderDrawable);  mInputConnectionHighlightPatches.set(i,connectionHighlightDrawable);  if (i > 0) {    final NinePatchDrawable boundaryGapDrawable=getColoredPatchDrawable(R.drawable.dummy_input);    final NinePatchDrawable boundaryGapBorderDrawable=mPatchManager.getPatchDrawable(R.drawable.dummy_input_border);    mHelper.setRtlAwareBounds(tempRect,mBlockViewSize.x,patchLeft,inputLayoutOrigin.y,patchRight,connectorTop);    boundaryGapDrawable.setBounds(tempRect);    boundaryGapBorderDrawable.setBounds(tempRect);    mBlockPatches.add(boundaryGapDrawable);    mBlockBorderPatches.add(boundaryGapBorderDrawable);  }}  }
class C{  public void addNotify(){  super.addNotify();  KeyboardManager.getCurrentManager().registerMenuBar(this);}  }
class C{  final LinkedVertexHull divide(Vector2[] points,int first,int last){  int size=last - first;  if (size == 0) {    return new LinkedVertexHull(points[first]);  } else {    int mid=(first + last) / 2;    LinkedVertexHull left=divide(points,first,mid);    LinkedVertexHull right=divide(points,mid + 1,last);    return LinkedVertexHull.merge(left,right);  }}  }
class C{  public static String backQuoteChars(String string){  return backQuoteChars(string,new char[]{'\\','\'','\t','\n','\r','"'},new String[]{"\\\\","\\'","\\t","\\n","\\r","\\\""});}  }
class C{  public ParenthesizedExpression newParenthesizedExpression(){  ParenthesizedExpression result=new ParenthesizedExpression(this);  return result;}  }
class C{  static void checkIdentifier(final String name,final int start,final int end,final String msg){  if (name == null || (end == -1 ? name.length() <= start : end <= start)) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (!Character.isJavaIdentifierStart(name.charAt(start))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);  }  int max=end == -1 ? name.length() : end;  for (int i=start + 1; i < max; ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);    }  }}  }
class C{  private static void bm() throws Exception {  doBnM('a');  report("Boyer Moore (ASCII)");  doBnM(Character.MIN_SUPPLEMENTARY_CODE_POINT - 10);  report("Boyer Moore (Supplementary)");}  }
class C{  public ChronixSolrStorage(final int nrOfDocumentPerBatch,final Function<T,String> groupBy,final BinaryOperator<T> reduce){  this.nrOfDocumentPerBatch=nrOfDocumentPerBatch;  this.groupBy=groupBy;  this.reduce=reduce;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.057 -0500",hash_original_method="C7F1FA27B1E7517E25F1C7951B5E8CA8",hash_generated_method="28B05CF58E648131424EE9C2854BECE4") protected AbstractQueuedSynchronizer(){}  }
class C{  public LinkedList<Diff> diff_main(String text1,String text2,boolean checklines){  long deadline;  if (Diff_Timeout <= 0) {    deadline=Long.MAX_VALUE;  } else {    deadline=System.currentTimeMillis() + (long)(Diff_Timeout * 1000);  }  return diff_main(text1,text2,checklines,deadline);}  }
class C{  public JSONArray put(int index,Collection value) throws JSONException {  put(index,(Object)new JSONArray(value));  return this;}  }
class C{  private void addClasses(Class<?>[] classes,HashSet<Class<?>> result,String fieldName){  if (classes == null || classes.length == 0)   Error.classesAbsent(fieldName,configuredClass);  for (  Class<?> classe : classes)   result.add(classe);}  }
class C{  public Shape createRoundRectangle(final int x,final int y,final int w,final int h,final CornerSize size){  return createRoundRectangle(x,y,w,h,size,CornerStyle.ROUNDED,CornerStyle.ROUNDED,CornerStyle.ROUNDED,CornerStyle.ROUNDED);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.STRICT_MODE_RELEVANT__STRICT_MODE:    return strictMode != STRICT_MODE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public final void addToTier(int tier,String spec){  addVariable(spec);  if (tier < 0) {    throw new IllegalArgumentException();  }  if (spec == null) {    throw new NullPointerException();  }  spec=checkSpec(spec);  final Set<MyNode> vars=getExtent(spec);  ensureTiers(tier);  for (  MyNode s : vars) {    if (checkVarName(s.getName())) {      addVariable(s.getName());      tierSpecs.get(tier).add(s);    }  }}  }
class C{  public static String stringFor(int k){switch (k) {case cudaMemoryTypeHost:    return "cudaMemoryTypeHost";case cudaMemoryTypeDevice:  return "cudaMemoryTypeDevice";}return "INVALID cudaMemoryType: " + k;}  }
class C{  protected void doDropFlow(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  if (log.isTraceEnabled()) {    log.trace("doDropFlow pi={} srcSwitch={}",new Object[]{pi,sw});  }  if (sw == null) {    log.warn("Switch is null, not installing drop flowmod for PacketIn {}",pi);    return;  }  OFFlowMod.Builder fmb=sw.getOFFactory().buildFlowModify();  List<OFAction> actions=new ArrayList<OFAction>();  U64 cookie=AppCookie.makeCookie(APP_ID,0);  fmb.setCookie(cookie).setIdleTimeout(ForwardingBase.FLOWMOD_DEFAULT_IDLE_TIMEOUT).setHardTimeout(ForwardingBase.FLOWMOD_DEFAULT_HARD_TIMEOUT).setBufferId(OFBufferId.NO_BUFFER).setMatch(pi.getMatch()).setActions(actions);  if (log.isTraceEnabled()) {    log.trace("write drop flow-mod srcSwitch={} match={} " + "pi={} flow-mod={}",new Object[]{sw,pi.getMatch(),pi,fmb.build()});  }  sw.write(fmb.build());  return;}  }
class C{  public void call() throws IOException {  print("call",null);}  }
class C{  public void removeTuner(Tuner tuner){  if (mTuners.contains(tuner)) {    tuner.removeTunerChangeListener(this);    int index=mTuners.indexOf(tuner);    mTuners.remove(tuner);    fireTableRowsDeleted(index,index);  }}  }
class C{  @SuppressWarnings("rawtypes") public SPOPredicate(final String relationName,final IVariableOrConstant<IV> s,final IVariableOrConstant<IV> p,final IVariableOrConstant<IV> o,final IVariableOrConstant<IV> c){  super(new IVariableOrConstant[]{s,p,o,c},new NV(Annotations.RELATION_NAME,relationName));}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  @Override public boolean supportsStatementPooling(){  debugCodeCall("supportsStatementPooling");  return false;}  }
class C{  public static int minBits(int range){  int max=2;  int bits=1;  while (max > 0) {    if (range <= max) {      return bits;    }    max=max << 1;    bits++;  }  return 31;}  }
class C{  private void checkConnection(){  connectionCheckedCount++;  if (connectionCheckedCount == PING_AFTER_CHECKS) {    send("PING");    connectionCheckedCount=0;  }}  }
class C{  public void pushElemTemplateElement(ElemTemplateElement elem){  m_currentTemplateElements.push(elem);}  }
class C{  public static double sqrtInterp(double val,double min,double max){  double sqrtMin=safeSqrt(min);  double denominator=(safeSqrt(max) - sqrtMin);  if (denominator == 0)   return 0;  return (safeSqrt(val) - sqrtMin) / denominator;}  }
class C{  public final boolean isRelCanonicalPage(Content content){  if (!excludeRelCanonical) {    return false;  }  if (!(content instanceof SSP)) {    return false;  }  if (StringUtils.isBlank(((SSP)content).getSource())) {    return false;  }  Elements relCanonical=Jsoup.parse(((SSP)content).getSource()).select(REL_CANONICAL_CSS_LIKE_QUERY);  if (relCanonical.isEmpty() || relCanonical.size() > 1) {    return false;  }  String href=relCanonical.first().attr("href");  if (href.equals(".")) {    return false;  }  if (href.endsWith("/")) {    href=href.substring(0,href.length() - 1);  }  if (href.startsWith("/")) {    Elements base=Jsoup.parse(((SSP)content).getSource()).select(BASE_CSS_LIKE_QUERY);    if (!base.isEmpty()) {      if (StringUtils.endsWith(base.first().attr("href"),"/")) {        href=StringUtils.join(base.first().attr("href"),href.substring(1));      } else {        href=StringUtils.join(base.first().attr("href") + href);      }      LOGGER.debug("(BASE CASE) The concat href " + href);    } else {      URI contractUri;      try {        contractUri=new URI(content.getURI());        href=StringUtils.join(contractUri.getScheme(),"://",contractUri.getHost(),href);        LOGGER.debug("(NORMAL CASE) The concat href " + href);      } catch (      URISyntaxException ex) {        LOGGER.error("Error when creating uri object with url " + content.getURI());      }    }  }  if (href.contains("//")) {    href=href.substring(href.indexOf("//") + 2);  }  String currentUrl=content.getURI();  if (currentUrl.endsWith("/")) {    currentUrl=currentUrl.substring(0,currentUrl.length() - 1);  }  if (currentUrl.contains("//")) {    currentUrl=currentUrl.substring(currentUrl.indexOf("//") + 2);  }  if (currentUrl.equals(href)) {    LOGGER.info("rel canonical present but points to itself " + content.getURI());    return false;  }  return true;}  }
class C{  public static Properties readProperties(File propsFile,Properties defaults) throws IOException {  return readProperties(new FileInputStream(propsFile),defaults);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public <T>String serializeObject(final T serializableObject){  mLogger.logDebug("Serializing type " + serializableObject.getClass().getSimpleName());  return mGson.toJson(serializableObject);}  }
class C{  public boolean isRotationEnabled(){  return mIsRotationEnabled;}  }
class C{  public void testJobFailedOver() throws Exception {  failed.set(false);  routed.set(false);  try {    Ignite ignite1=startGrid(NODE1);    Ignite ignite2=startGrid(NODE2);    Ignite ignite3=startGrid(NODE3);    assert ignite1 != null;    assert ignite2 != null;    assert ignite3 != null;    Integer res=(Integer)compute(ignite1.cluster().forPredicate(p)).withTimeout(10000).execute(JobFailTask.class.getName(),"1");    assert res == 1;  } catch (  ClusterTopologyException ignored) {    failed.set(true);  } finally {    assertFalse(failed.get());    assertTrue(routed.get());    stopGrid(NODE1);    stopGrid(NODE2);    stopGrid(NODE3);  }}  }
class C{  public StorageUnitEntity createStorageUnitEntity(String storageName,String storagePlatform,BusinessObjectDataEntity businessObjectDataEntity,String storageUnitStatus,String storageDirectoryPath){  StorageEntity storageEntity=storageDao.getStorageByName(storageName);  if (storageEntity == null) {    storageEntity=storageDaoTestHelper.createStorageEntity(storageName,storagePlatform);  }  return createStorageUnitEntity(storageEntity,businessObjectDataEntity,storageUnitStatus,storageDirectoryPath);}  }
class C{  public final boolean betterThan(TTEntry other,int currGen){  if ((generation == currGen) != (other.generation == currGen)) {    return generation == currGen;  }  if ((type == T_EXACT) != (other.type == T_EXACT)) {    return type == T_EXACT;  }  if (getDepth() != other.getDepth()) {    return getDepth() > other.getDepth();  }  return false;}  }
class C{  public double distanceKM(Geo v2){  return km(distance(v2));}  }
class C{  private void askPermissions(){  mPermissionsToAsk=getNotGrantedPermissions();  if (mPermissionsToAsk.size() > 0 && Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    requestPermissions(mPermissionsToAsk.toArray(new String[mPermissionsToAsk.size()]),MY_PERMISSION_REQUEST_ALL);  }}  }
class C{  @Override protected void createLabels(){  FireSupportTextBuilder textBuilder=new FireSupportTextBuilder();  String[] allText=textBuilder.createText(this);  String text=allText[0];  if (!WWUtil.isEmpty(text)) {    TacticalGraphicLabel mainLabel=this.addLabel(text);    mainLabel.setTextAlign(this.getMainLabelTextAlign());    if (this.isFilled()) {      mainLabel.setEffect(AVKey.TEXT_EFFECT_NONE);      mainLabel.setDrawInterior(true);    }  }  if (allText.length > 1 && !WWUtil.isEmpty(allText[1])) {    TacticalGraphicLabel timeLabel=this.addLabel(allText[1]);    timeLabel.setTextAlign(AVKey.RIGHT);    timeLabel.setOffset(new Offset(0d,0d,AVKey.FRACTION,AVKey.FRACTION));  }}  }
class C{  public static Boolean isPro(){  return isPro;}  }
class C{  public boolean isHourHandVisible(){  return hourHandVisible;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  public void addAttribute(String namespaceURI,String localName,String rawName,String value) throws XmlPullParserException {  QName qname=QName.get(rawName,namespaceURI);  element.addAttribute(qname,value);}  }
class C{  private BufferedImage readFile() throws IOException {  BufferedImage image=null;  FileInputStream jpegFile=new FileInputStream(id_);  Metadata metadata=new Metadata();  try {    new ExifReader(jpegFile).extract(metadata);    byte[] thumb=((ExifDirectory)metadata.getDirectory(ExifDirectory.class)).getThumbnailData();    if (thumb != null)     image=ImageIO.read(new ByteArrayInputStream(thumb));  } catch (  JpegProcessingException e) {    System.err.println("Could not extract thumbnail");    e.printStackTrace();  }catch (  MetadataException e) {    System.err.println("Could not extract thumbnail");    e.printStackTrace();  }  if (image == null) {    image=ImageIO.read(new FileInputStream(id_));  }  return image;}  }
class C{  protected boolean shouldSendPointerReleaseToOtherForm(){  return false;}  }
class C{  private static byte charToByte(char c){  return (byte)"0123456789ABCDEF".indexOf(c);}  }
class C{  public static Angle ellipsoidalForwardAzimuth(LatLon p1,LatLon p2,double equatorialRadius,double polarRadius){  if (p1 == null || p2 == null) {    throw new IllegalArgumentException("Position Is Null");  }  final double f=(equatorialRadius - polarRadius) / equatorialRadius;  final double U1=Math.atan((1.0 - f) * Math.tan(p1.latitude.radians));  final double cU1=Math.cos(U1);  final double sU1=Math.sin(U1);  final double U2=Math.atan((1.0 - f) * Math.tan(p2.latitude.radians));  final double cU2=Math.cos(U2);  final double sU2=Math.sin(U2);  final double L=p2.longitude.subtract(p1.longitude).radians;  double lambda=L;  double sLambda=Math.sin(lambda);  double cLambda=Math.cos(lambda);  double lambda_prev=Double.MAX_VALUE;  int count=0;  while (Math.abs(lambda - lambda_prev) > 1e-12 && count++ < 100) {    lambda_prev=lambda;    double sSigma=Math.sqrt(Math.pow(cU2 * sLambda,2) + Math.pow(cU1 * sU2 - sU1 * cU2 * cLambda,2));    double cSigma=sU1 * sU2 + cU1 * cU2 * cLambda;    double sigma=Math.atan2(sSigma,cSigma);    double sAlpha=cU1 * cU2 * sLambda / sSigma;    double cAlpha2=1 - sAlpha * sAlpha;    double cSigmam2;    if (Math.abs(cAlpha2) < 1e-6) {      cSigmam2=0;    } else {      cSigmam2=cSigma - 2 * sU1 * sU2 / cAlpha2;    }    double c=f / 16 * cAlpha2 * (4 + f * (4 - 3 * cAlpha2));    lambda=L + (1 - c) * f * sAlpha* (sigma + c * sSigma * (cSigmam2 + c * cSigma * (-1 + 2 * cSigmam2)));    sLambda=Math.sin(lambda);    cLambda=Math.cos(lambda);  }  return Angle.fromRadians(Math.atan2(cU2 * sLambda,cU1 * sU2 - sU1 * cU2 * cLambda));}  }
class C{  public void initVertices(){  double[][] verts={{-width / 2,-width / 2,width / 2,width / 2},{-height / 2,height / 2,height / 2,-height / 2},{1,1,1,1}};  vertices=new DenseMatrix(verts);}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public static short[] convertArray(byte[] in){  short[] out=new short[in.length];  for (int i=0; i < in.length; i++) {    out[i]=(short)(in[i] & GF2Field.MASK);  }  return out;}  }
class C{  public Task<HostRestRep> update(URI id,HostUpdateParam input){  return update(id,input,Boolean.FALSE);}  }
class C{  private boolean pauseWebViewTimers(Tab tab){  if (tab == null) {    return true;  } else   if (!tab.inPageLoad()) {    CookieSyncManager.getInstance().stopSync();    WebViewTimersControl.getInstance().onBrowserActivityPause(getCurrentWebView());    return true;  }  return false;}  }
class C{  public boolean isDefinitelyWritable(int columnIndex) throws SQLException {  checkColRange(columnIndex);  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String cnt=getString(stack);  Sage.put("mmc/dvbc_region",cnt);  return null;}  }
class C{  void writeRepeatedSqr(DD xdd){  if (xdd.ge(DD.valueOf(1)))   throw new IllegalArgumentException("Argument must be < 1");  int count=0;  while (xdd.doubleValue() > 1e-300) {    count++;    if (count == 100)     count=count;    double x=xdd.doubleValue();    DD xSqr=xdd.sqr();    String s=xSqr.toString();    DD xSqr2=DD.parse(s);    xdd=xSqr;  }}  }
class C{  private final void _writeStringSegment(char[] cbuf,int offset,int len) throws IOException, JsonGenerationException {  len+=offset;  int outputPtr=_outputTail;  final byte[] outputBuffer=_outputBuffer;  final int[] escCodes=_outputEscapes;  while (offset < len) {    int ch=cbuf[offset];    if (ch > 0x7F || escCodes[ch] != 0) {      break;    }    outputBuffer[outputPtr++]=(byte)ch;    ++offset;  }  _outputTail=outputPtr;  if (offset < len) {    if (_characterEscapes != null) {      _writeCustomStringSegment2(cbuf,offset,len);    } else     if (_maximumNonEscapedChar == 0) {      _writeStringSegment2(cbuf,offset,len);    } else {      _writeStringSegmentASCII2(cbuf,offset,len);    }  }}  }
class C{  protected boolean isConfigValid(GraphicsConfiguration gc){  return true;}  }
class C{  private SOAPMessage createMessage(Node body,Node header) throws ParserException {  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  dbf.setNamespaceAware(true);  SOAPMessage message=null;  try {    message=MessageFactory.newInstance().createMessage();    Document adoptedBody=dbf.newDocumentBuilder().newDocument();    adoptedBody.appendChild(adoptedBody.importNode(body,true));    message.getSOAPBody().addDocument(adoptedBody);    Node adoptedHeader=message.getSOAPPart().importNode(header,true);    message.getSOAPHeader().appendChild(adoptedHeader);  } catch (  ParserConfigurationException e) {    log.error(CREATION_ERROR_MSG,e);    throw new ParserException(CREATION_ERROR_MSG,e);  }catch (  SOAPException e) {    log.error(CREATION_ERROR_MSG,e);    throw new ParserException(CREATION_ERROR_MSG,e);  }  return message;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:15.467 -0400",hash_original_method="72773B6FD1BAF89A8E321B3FAD129281",hash_generated_method="A06C768179BEE4123FFEB193A942CDB8") public void testDiscoverable(){  int iterations=BluetoothTestRunner.sDiscoverableIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.undiscoverable(adapter);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("discoverable iteration " + (i + 1) + " of "+ iterations);    mTestUtils.discoverable(adapter);    mTestUtils.undiscoverable(adapter);  }  mTestUtils.disable(adapter);}  }
class C{  public void testAddMissingJmsResourcesAllJmsResources() throws Exception {  Resource jmsQueueResource=new Resource("jms/queue/REQUEST",WebLogicConfigurationEntryType.JMS_QUEUE);  configuration.addResource(jmsQueueResource);  WebLogicResourceRules.addMissingJmsResources(configuration);  List<Resource> resources=configuration.getResources();  assertEquals(4,resources.size());  Resource jmsServer=null;  Resource jmsModule=null;  Resource jmsSubdeployment=null;  Resource jmsQueue=null;  for (  Resource resource : configuration.getResources()) {    if (WebLogicConfigurationEntryType.JMS_SERVER.equals(resource.getType())) {      jmsServer=resource;    } else     if (WebLogicConfigurationEntryType.JMS_MODULE.equals(resource.getType())) {      jmsModule=resource;    } else     if (WebLogicConfigurationEntryType.JMS_SUBDEPLOYMENT.equals(resource.getType())) {      jmsSubdeployment=resource;    } else     if (WebLogicConfigurationEntryType.JMS_QUEUE.equals(resource.getType())) {      jmsQueue=resource;    }  }  assertNotNull(jmsServer);  assertNotNull(jmsModule);  assertNotNull(jmsSubdeployment);  assertNotNull(jmsQueue);}  }
class C{  private static boolean contains(String value,int start,int length,String criteria){  return contains(value,start,length,new String[]{criteria});}  }
class C{  protected void resetCache(){  cache=null;  hardCache=null;}  }
class C{  private boolean cellIsPopulated(int row,int col){  if (rowIndexFlagsIndex[row] < 0) {    return col == -rowIndexFlagsIndex[row];  } else {    int flags=rowIndexFlags[rowIndexFlagsIndex[row] + (col >> 5)];    return (flags & (1 << (col & 0x1f))) != 0;  }}  }
class C{  PosixTarHeader(byte[] header){  this.header=header;}  }
class C{  public void testSignerString() throws Exception {  Signer s=new SignerStub("sss3");  assertNotNull(s);  assertEquals("sss3",s.getName());  assertNull(s.getPrivateKey());  Signer s2=new SignerStub(null);  assertNull(s2.getName());}  }
class C{  public DiskRegionTestImpl(RegionTestCase rtc){  this.rtc=rtc;}  }
class C{  public Symbol newSymbol(String name,int id,Location left,Location right){  return new ComplexSymbol(name,id,left,right);}  }
class C{  public static boolean isBeforeDay(Date date1,Date date2){  if (date1 == null || date2 == null) {    throw new IllegalArgumentException("The dates must not be null");  }  Calendar cal1=Calendar.getInstance();  cal1.setTime(date1);  Calendar cal2=Calendar.getInstance();  cal2.setTime(date2);  return isBeforeDay(cal1,cal2);}  }
class C{  public CSVTableReader(ParserFactory parserFactory){  super(parserFactory);}  }
class C{  public void updateUpdate(String type,String location) throws SecurityException {  checkWriteAccess();  if (!(config instanceof ConfigServer)) {    throw new SecurityException("can't change update setting from this context, access is denied");  }  Element update=_getRootElement("update");  update.setAttribute("type",type);  try {    location=HTTPUtil.toURL(location,true).toString();  } catch (  Throwable e) {  }  update.setAttribute("location",location);}  }
class C{  @Suppress public void disable_testConnectWithIP4IPAddr(){  InetSocketAddress scktAddrss=new InetSocketAddress(KNOW_GOOD_ADDRESS,80);  Socket clntSckt=new Socket();  try {    clntSckt.connect(scktAddrss,5000);  } catch (  Throwable e) {    fail("connection problem:" + e.getClass().getName() + ": "+ e.getMessage());  } finally {    try {      clntSckt.close();    } catch (    Exception e) {    }  }}  }
class C{  public static RequestInfo markSending(RequestInfo requestInfo){  RequestInfo result=getCopy(requestInfo);  result.sending=true;  return result;}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public JMenu createJMenu(String name) throws MissingResourceException, ResourceFormatException, MissingListenerException {  return createJMenu(name,null);}  }
class C{  @Override public ServiceBuilderAmp newService(Object worker){  Objects.requireNonNull(worker);  return new ServiceBuilderImpl<>(this,worker);}  }
class C{  void start() throws IOException {  _currentTagToken=null;  _tokenList.clear();  _asExpected=true;  _isSpecialContext=false;  _isLateForDoctype=false;  _namespacePrefixes.clear();  this._pos=WORKING_BUFFER_SIZE;  readIfNeeded(0);  boolean isSpecialEmpty=true;  while (!isAllRead()) {    if (Thread.currentThread().isInterrupted()) {      this.handleInterruption();      _tokenList.clear();      _namespacePrefixes.clear();      _reader.close();      return;    }    _saved.delete(0,_saved.length());    _currentTagToken=null;    _asExpected=true;    readIfNeeded(10);    if (_isSpecialContext) {      int nameLen=_isSpecialContextName.length();      if (startsWith("</" + _isSpecialContextName) && (isWhitespace(_pos + nameLen + 2) || isChar(_pos + nameLen + 2,'>'))) {        tagEnd();      } else       if (isSpecialEmpty && startsWith("<!--")) {        comment();      } else       if (startsWith(CData.SAFE_BEGIN_CDATA) || startsWith(CData.BEGIN_CDATA) || startsWith(CData.SAFE_BEGIN_CDATA_ALT)) {        cdata();      } else {        boolean isTokenAdded=content();        if (isSpecialEmpty && isTokenAdded) {          final BaseToken lastToken=(BaseToken)_tokenList.get(_tokenList.size() - 1);          if (lastToken != null) {            final String lastTokenAsString=lastToken.toString();            if (lastTokenAsString != null && lastTokenAsString.trim().length() > 0) {              isSpecialEmpty=false;            }          }        }      }      if (!_isSpecialContext) {        isSpecialEmpty=true;      }    } else {      if (startsWith("<!doctype")) {        if (!_isLateForDoctype) {          doctype();          _isLateForDoctype=true;        } else {          ignoreUntil('<');        }      } else       if (startsWith("</") && isIdentifierStartChar(_pos + 2)) {        _isLateForDoctype=true;        tagEnd();      } else       if (startsWith(CData.SAFE_BEGIN_CDATA) || startsWith(CData.BEGIN_CDATA) || startsWith(CData.SAFE_BEGIN_CDATA_ALT)) {        cdata();      } else       if (startsWith("<!--")) {        comment();      } else       if (startsWith("<") && isIdentifierStartChar(_pos + 1)) {        _isLateForDoctype=true;        tagStart();      } else       if (props.isIgnoreQuestAndExclam() && (startsWith("<!") || startsWith("<?"))) {        ignoreUntil('<');        if (isChar('>')) {          go();        }      } else       if (startsWith("<?xml")) {        ignoreUntil('<');      } else {        content();      }    }  }  _reader.close();}  }
class C{  @Override public void mouseClicked(MouseEvent e){  int col;  boolean popup;  col=m_TableArff.columnAtPoint(e.getPoint());  popup=((e.getButton() == MouseEvent.BUTTON3) && (e.getClickCount() == 1)) || ((e.getButton() == MouseEvent.BUTTON1) && (e.getClickCount() == 1) && e.isAltDown()&& !e.isControlDown()&& !e.isShiftDown());  popup=popup && (getInstances() != null);  if (e.getSource() == m_TableArff.getTableHeader()) {    m_CurrentCol=col;    if (popup) {      e.consume();      setMenu();      initPopupMenus();      m_PopupHeader.show(e.getComponent(),e.getX(),e.getY());    }  } else   if (e.getSource() == m_TableArff) {    if (popup) {      e.consume();      setMenu();      initPopupMenus();      m_PopupRows.show(e.getComponent(),e.getX(),e.getY());    }  }  if ((e.getButton() == MouseEvent.BUTTON1) && (e.getClickCount() == 1) && (!e.isAltDown())&& (col > -1)) {    m_TableArff.setSelectedColumn(col);  }}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  public BasicEofSensorWatcher(ManagedClientConnection conn,boolean reuse){  if (conn == null)   throw new IllegalArgumentException("Connection may not be null.");  managedConn=conn;  attemptReuse=reuse;}  }
class C{  public synchronized boolean hasAnyAssociatedInverseRelationship(Primitive associate,Vertex target,Primitive type){  return hasAnyAssociatedInverseRelationship(this.network.createVertex(associate),target,this.network.createVertex(type));}  }
class C{  public void testTrecFeedDirAllTypes() throws Exception {  Path dataDir=createTempDir("trecFeedAllTypes");  TestUtil.unzip(getDataInputStream("trecdocs.zip"),dataDir);  TrecContentSource tcs=new TrecContentSource();  Properties props=new Properties();  props.setProperty("print.props","false");  props.setProperty("content.source.verbose","false");  props.setProperty("content.source.excludeIteration","true");  props.setProperty("docs.dir",dataDir.toRealPath().toString().replace('\\','/'));  props.setProperty("trec.doc.parser",TrecParserByPath.class.getName());  props.setProperty("content.source.forever","false");  tcs.setConfig(new Config(props));  tcs.resetInputs();  DocData dd=new DocData();  int n=0;  boolean gotExpectedException=false;  HashSet<ParsePathType> unseenTypes=new HashSet<>(Arrays.asList(ParsePathType.values()));  try {    while (n < 100) {      dd=tcs.getNextDocData(dd);      ++n;      assertNotNull("doc data " + n + " should not be null!",dd);      unseenTypes.remove(tcs.currPathType);switch (tcs.currPathType) {case GOV2:        assertDocData(dd,"TEST-000","TEST-000 title","TEST-000 text",tcs.parseDate("Sun, 11 Jan 2009 08:00:00 GMT"));      break;case FBIS:    assertDocData(dd,"TEST-001","TEST-001 Title","TEST-001 text",tcs.parseDate("1 January 1991"));  break;case FR94:assertDocData(dd,"TEST-002",null,"DEPARTMENT OF SOMETHING",tcs.parseDate("February 3, 1994"));break;case FT:assertDocData(dd,"TEST-003","Test-003 title","Some pub text",tcs.parseDate("980424"));break;case LATIMES:assertDocData(dd,"TEST-004","Test-004 Title","Some paragraph",tcs.parseDate("January 17, 1997, Sunday"));break;default :assertTrue("Should never get here!",false);}}} catch (NoMoreDataException e) {gotExpectedException=true;}assertTrue("Should have gotten NoMoreDataException!",gotExpectedException);assertEquals("Wrong number of documents created by source!",5,n);assertTrue("Did not see all types!",unseenTypes.isEmpty());}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public Vulnerability(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public SlidingActivityHelper(Activity activity){  mActivity=activity;}  }
class C{  protected static String quoteIntArray(int[] s){  return StringUtils.quoteJavaIntArray(s);}  }
class C{  public static RegressionDataSet readR(int numeric_target_column,Reader reader,char delimiter,int lines_to_skip,char comment,Set<Integer> cat_cols) throws IOException {  return (RegressionDataSet)readCSV(reader,lines_to_skip,delimiter,comment,cat_cols,numeric_target_column,-1);}  }
class C{  private static boolean deleteResolveEBUSY(File file){  final File to=new File(file.getAbsolutePath() + System.currentTimeMillis());  file.renameTo(to);  return to.delete();}  }
class C{  protected void startup(final Exception whatToThrow) throws Exception {  mockConfiguration(2);  mockStore();  EasyMock.expect(store.getTransactionManager()).andThrow(whatToThrow);  replay();  storage.startup(store,configuration);}  }
class C{  void addBridges(DiagnosticPosition pos,ClassSymbol origin,ListBuffer<JCTree> bridges){  Type st=types.supertype(origin.type);  while (st.hasTag(CLASS)) {    addBridges(pos,st.tsym,origin,bridges);    st=types.supertype(st);  }  for (List<Type> l=types.interfaces(origin.type); l.nonEmpty(); l=l.tail)   addBridges(pos,l.head.tsym,origin,bridges);}  }
class C{  public void installDefaults(AbstractButton b){  super.installDefaults(b);  b.setOpaque(false);}  }
class C{  @Override public double updateContainerProcessing(double currentTime,List<Double> mipsShare){  setCurrentMipsShare(mipsShare);  double timeSpan=currentTime - getPreviousTime();  double nextEvent=Double.MAX_VALUE;  List<ResCloudlet> cloudletsToFinish=new ArrayList<>();  for (  ResCloudlet rcl : getCloudletExecList()) {    rcl.updateCloudletFinishedSoFar((long)(timeSpan * getTotalCurrentAllocatedMipsForCloudlet(rcl,getPreviousTime()) * Consts.MILLION));    if (rcl.getRemainingCloudletLength() == 0) {      cloudletsToFinish.add(rcl);    } else {      double estimatedFinishTime=getEstimatedFinishTime(rcl,currentTime);      if (estimatedFinishTime - currentTime < CloudSim.getMinTimeBetweenEvents()) {        estimatedFinishTime=currentTime + CloudSim.getMinTimeBetweenEvents();      }      if (estimatedFinishTime < nextEvent) {        nextEvent=estimatedFinishTime;      }    }  }  for (  ResCloudlet rgl : cloudletsToFinish) {    getCloudletExecList().remove(rgl);    cloudletFinish(rgl);  }  setPreviousTime(currentTime);  if (getCloudletExecList().isEmpty()) {    return 0;  }  cloudletsToFinish.clear();  return nextEvent;}  }
class C{  private void cd() throws IOException {  int idx=url.getFile().lastIndexOf('/');  if (idx > 0) {    String dir=url.getFile().substring(0,idx);    write("CWD " + dir + "\r\n");    int reply=getReply();    if (reply != FTP_FILEOK && dir.length() > 0 && dir.charAt(0) == '/') {      write("CWD " + dir.substring(1) + "\r\n");      reply=getReply();    }    if (reply != FTP_FILEOK) {      throw new IOException("Unable to change directories");    }  }}  }
class C{  @Override public void addAttribute(String name,boolean value){  current.setAttribute(name,Boolean.valueOf(value).toString());}  }
class C{  private double computeProbability(String token){  double hamFactor=0;  double spamFactor=0;  boolean foundInHam=false;  boolean foundInSpam=false;  double minThreshold=0.01;  double maxThreshold=0.99;  if (hamTokenCounts.containsKey(token)) {    foundInHam=true;  }  if (spamTokenCounts.containsKey(token)) {    foundInSpam=true;  }  if (foundInHam) {    hamFactor=2 * hamTokenCounts.get(token).doubleValue();    if (!foundInSpam) {      minThreshold=(hamFactor > 20) ? 0.0001 : 0.0002;    }  }  if (foundInSpam) {    spamFactor=spamTokenCounts.get(token).doubleValue();    if (!foundInHam) {      maxThreshold=(spamFactor > 10) ? 0.9999 : 0.9998;    }  }  if ((hamFactor + spamFactor) < 5) {    return 0.4;  }  double spamFreq=Math.min(1.0,spamFactor / spamMessageCount);  double hamFreq=Math.min(1.0,hamFactor / hamMessageCount);  return Math.max(minThreshold,Math.min(maxThreshold,(spamFreq / (hamFreq + spamFreq))));}  }
class C{  public static boolean isFingerprint(String keyId){  return isValidKeyId(keyId) && keyId.length() == HEX_V4_FINGERPRINT_LENGTH;}  }
class C{  public static Volume addVolumeDetails(StringSetMap volumeInformation,Volume volume) throws Exception {  for (  VolumeObjectProperties volumeObjectProp : VolumeObjectProperties.values()) {    addVolumeDetail(volumeInformation,volume,volumeObjectProp);  }  return volume;}  }
class C{  public boolean isScan(){  return scan;}  }
class C{  private void storeAndEmit(final IBindingSet bs,final Gearing gearing,final Map<SolutionKey,IBindingSet> solutions){  final SolutionKey solutionKey=newSolutionKey(gearing,bs);  if (log.isDebugEnabled()) {    log.debug("solution key: " + solutionKey);  }  storeAndEmit(solutionKey,bs,gearing,solutions);}  }
class C{  public RegularExpressionFactoryImpl(){  super();}  }
class C{  protected final void bindLifeCycle(Class<? extends Annotation> annotation){  bindLifeCycle(annotation,any());}  }
class C{  public TransformerFactoryConfigurationError(String msg){  super(msg);  this.exception=null;}  }
class C{  public void write(Geometry geometry,Writer writer) throws IOException {  writeFormatted(geometry,false,writer);}  }
class C{  protected Rectangle layoutLabelRect(Offset offset,Offset hotspot,Dimension size,Object layoutMode,OrderedSymbol osym){  int x=0;  int y=0;  if (offset != null) {    Rectangle rect;    if (LAYOUT_ABSOLUTE.equals(layoutMode))     rect=osym.iconRectScaled; else     if (LAYOUT_RELATIVE.equals(layoutMode))     rect=osym.layoutRectScaled; else     rect=osym.iconRectScaled;    Point2D p=offset.computeOffset(rect.getWidth(),rect.getHeight(),null,null);    x+=rect.getX() + p.getX();    y+=rect.getY() + p.getY();  }  if (hotspot != null) {    Point2D p=hotspot.computeOffset(size.getWidth(),size.getHeight(),null,null);    x-=p.getX();    y-=p.getY();  }  Rectangle rect=new Rectangle(x,y,size.width,size.height);  if (LAYOUT_ABSOLUTE.equals(layoutMode) || LAYOUT_RELATIVE.equals(layoutMode)) {    if (osym.layoutRectScaled != null) {      osym.layoutRectScaled.add(rect);    } else     osym.layoutRectScaled=new Rectangle(rect);    Rectangle scaledRect=this.computeScaledRect(rect,rect.getSize(),1 / osym.sx,1 / osym.sy);    if (osym.layoutRect != null)     osym.layoutRect.add(scaledRect); else     osym.layoutRect=new Rectangle(scaledRect);  }  return rect;}  }
class C{  public void stop(){  Set<Service> servicesToClose=null;synchronized (this.state) {    if (!this.state.isStarted || this.state.isStopping) {      return;    }    this.state.isStopping=true;    servicesToClose=new HashSet<Service>(this.attachedServices.values());  }  this.serviceResourceTracker.close();  this.serviceMaintTracker.close();  this.operationTracker.close();  this.serviceSynchTracker.close();  ScheduledFuture<?> task=this.maintenanceTask;  if (task != null) {    task.cancel(false);    this.maintenanceTask=null;  }  List<Service> privilegedServiceInstances=stopServices(servicesToClose);  stopPrivilegedServices(privilegedServiceInstances);  stopCoreServices();  this.attachedServices.clear();  this.attachedNamespaceServices.clear();  this.pendingServiceDeletions.clear();  this.state.isStarted=false;  removeLogging();  try {    this.client.stop();    this.client=null;  } catch (  Throwable e1) {  }  try {    this.httpListener.stop();    this.httpListener=null;    if (this.httpsListener != null) {      this.httpsListener.stop();      this.httpsListener=null;    }  } catch (  Throwable e1) {  }  this.executor.shutdownNow();  this.scheduledExecutor.shutdownNow();  this.executor=null;  this.scheduledExecutor=null;}  }
class C{  public static boolean supportsDumbModeFolding(@NotNull Editor editor){  Project project=editor.getProject();  if (project != null) {    PsiFile file=PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());    if (file != null) {      return supportsDumbModeFolding(file);    }  }  return true;}  }
class C{  protected TrieNode add(Character c){  TrieNode child;  child=new TrieNode(c);  add(child);  m_Children.put(c,child);  return child;}  }
class C{  public ProblemException(Problem problem,String message,Throwable cause){  super(message,cause);  this.problem=problem;}  }
class C{  public SourceRange cspCatchers(List<JCCatch> trees){  if ((trees == null) || !(trees.nonEmpty()))   return null;  SourceRange list_sr=new SourceRange();  for (List<JCCatch> l=trees; l.nonEmpty(); l=l.tail) {    list_sr.mergeWith(csp(l.head));  }  positions.put(trees,list_sr);  return list_sr;}  }
class C{  @CheckReturnValue @Nonnull static public String to8Bits(int val,boolean msbLeft){  String result="";  for (int i=0; i < 8; i++) {    if (msbLeft) {      result=(((val & 0x01) != 0) ? "1" : "0") + result;    } else {      result=result + (((val & 0x01) != 0) ? "1" : "0");    }    val=val >> 1;  }  return result;}  }
class C{  public void deregister(Location location){  if (location == null) {    return;  }  location.dispose();  Integer oldSize=Integer.valueOf(_locationHashTable.size());  _locationHashTable.remove(location.getId());  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_locationHashTable.size()));}  }
class C{  private static int gallopLeft(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (key.compareTo(a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 190) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Override public boolean hasNext(){  return (m_Current < m_Providers.length) && (m_Providers[m_Current].hasNext());}  }
class C{  public static void sortMethods(MethodBinding[] sortedMethods,int left,int right){  Arrays.sort(sortedMethods,left,right,METHOD_COMPARATOR);}  }
class C{  public void put(E e) throws InterruptedException {  if (e == null)   throw new NullPointerException();  int c=-1;  Node<E> node=new Node<E>(e);  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() == capacity) {      notFull.await();    }    enqueue(node);    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();}  }
class C{  private @Nullable ScaleTypeDrawable findLayerScaleTypeDrawable(int index){  Drawable drawable=mFadeDrawable.getDrawable(index);  if (drawable instanceof MatrixDrawable) {    drawable=drawable.getCurrent();  }  if (drawable instanceof ScaleTypeDrawable) {    return (ScaleTypeDrawable)drawable;  } else {    return null;  }}  }
class C{  public DTMAxisIterator cloneIterator(){  _isRestartable=false;  try {    final PrecedingIterator clone=(PrecedingIterator)super.clone();    final int[] stackCopy=new int[_stack.length];    System.arraycopy(_stack,0,stackCopy,0,_stack.length);    clone._stack=stackCopy;    return clone;  } catch (  CloneNotSupportedException e) {    throw new DTMException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ITERATOR_CLONE_NOT_SUPPORTED,null));  }}  }
class C{  @Override protected void observableActivated(){  observable.addUpdatable(this);}  }
class C{  public static void addDirectories(ArrayList<File> list){  for (int i=1; i <= 34; i++) {    File dir=new File("srcRootDirectory/chapter" + i);    if (!dir.isDirectory()) {      if (dir.mkdirs())       list.add(dir);    }  }}  }
class C{  public void removeAccessibleSelection(int i){  List.this.deselect(i);}  }
class C{  public static Process exec(List<String> args) throws IOException {  if (SAFUtils.isJellyBeanOrHigher() && !SuperUserHelper.isFailedToObtainRoot()) {    Process process=Runtime.getRuntime().exec("su");    PrintStream outputStream=null;    try {      outputStream=new PrintStream(new BufferedOutputStream(process.getOutputStream(),8192));      outputStream.println(TextUtils.join(" ",args));      outputStream.flush();    }  finally {      if (outputStream != null) {        outputStream.close();      }    }    return process;  }  return Runtime.getRuntime().exec(ArrayUtil.toArray(args,String.class));}  }
class C{  public static BuildImageParams create(@NotNull File... files){  return new BuildImageParams().withFiles(files);}  }
class C{  @Override public EndpointStatus join(InetSocketAddress endpoint,Map<String,InetSocketAddress> additionalEndpoints,int shardId) throws Group.JoinException, InterruptedException {  throw new UnsupportedOperationException("NameServerSet does not support join");}  }
class C{  public void bindAppWidgetId(int appWidgetId,ComponentName provider){  try {    sService.bindAppWidgetId(appWidgetId,provider,null,mContext.getUserId());  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }}  }
class C{  public Prepared prepare(String sql){  Prepared p=parse(sql);  p.prepare();  if (currentTokenType != END) {    throw getSyntaxError();  }  return p;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected ActionMap createActionMap(){  ActionMap map=super.createActionMap();  map.put("save",new SCXMLEditorActions.SaveAction(false));  map.put("saveAs",new SCXMLEditorActions.SaveAction(true));  map.put("new",new SCXMLEditorActions.NewSCXMLAction());  map.put("open",new SCXMLEditorActions.OpenAction());  map.put("delete",new SCXMLEditorActions.SCXMLDelete());  map.put("undo",new SCXMLEditorActions.HistoryAction(true));  map.put("redo",new SCXMLEditorActions.HistoryAction(false));  map.put("selectVertices",mxGraphActions.getSelectVerticesAction());  map.put("selectEdges",mxGraphActions.getSelectEdgesAction());  map.put("selectAll",mxGraphActions.getSelectAllAction());  map.put("selectNone",mxGraphActions.getSelectNoneAction());  map.put("zoomIN",new SCXMLEditorActions.ZoomIN());  map.put("zoomOUT",new SCXMLEditorActions.ZoomOUT());  map.put("find",new SCXMLEditorActions.ShowSCXMLFindTool());  map.put("edit",new SCXMLEditorActions.EditSelectedCellAction(null));  return map;}  }
class C{  public void testCertStore15() throws CertStoreException {  if (!initParams()) {    return;  }  CertStore[] certS=createCS();  assertNotNull("CertStore object were not created",certS);  Collection<?> coll;  for (int i=0; i < certS.length; i++) {    coll=certS[i].getCertificates(null);    assertTrue("Result collection not empty",coll.isEmpty());    coll=certS[i].getCRLs(null);    assertTrue("Result collection not empty",coll.isEmpty());  }}  }
class C{  AgentBox(IAgent a,Thread t,Date time,IBase fw){  agent=a;  thread=t;  timeOfArrival=time;  baseFirewall=fw;}  }
class C{  public void displayErrorMessage(String text){  displayMessage(name,text,TrayIcon.MessageType.ERROR);}  }
class C{  public DeleteIndexRequest timeout(String timeout){  return timeout(TimeValue.parseTimeValue(timeout,null,getClass().getSimpleName() + ".timeout"));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildFemaleDressingRoom(zone);}  }
class C{  public static LosEffects.AttackInfo buildAttackInfo(Coords c1,Coords c2,int h1,int h2,int h1Floor,int h2Floor){  LosEffects.AttackInfo ai=new LosEffects.AttackInfo();  ai.attackPos=c1;  ai.targetPos=c2;  ai.attackHeight=h1;  ai.targetHeight=h2;  ai.attackAbsHeight=h1Floor + h1;  ai.targetAbsHeight=h2Floor + h2;  return ai;}  }
class C{  public static GeneralPath cardinalSpline(GeneralPath p,float pts[],int start,int npoints,float slack,boolean closed,float tx,float ty){  try {    int len=2 * npoints;    int end=start + len;    if (len < 6) {      throw new IllegalArgumentException("To create spline requires at least 3 points");    }    float dx1, dy1, dx2, dy2;    if (closed) {      dx2=pts[start + 2] - pts[end - 2];      dy2=pts[start + 3] - pts[end - 1];    } else {      dx2=pts[start + 4] - pts[start];      dy2=pts[start + 5] - pts[start + 1];    }    int i;    for (i=start + 2; i < end - 2; i+=2) {      dx1=dx2;      dy1=dy2;      dx2=pts[i + 2] - pts[i - 2];      dy2=pts[i + 3] - pts[i - 1];      p.curveTo(tx + pts[i - 2] + slack * dx1,ty + pts[i - 1] + slack * dy1,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);    }    if (closed) {      dx1=dx2;      dy1=dy2;      dx2=pts[start] - pts[i - 2];      dy2=pts[start + 1] - pts[i - 1];      p.curveTo(tx + pts[i - 2] + slack * dx1,ty + pts[i - 1] + slack * dy1,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);      dx1=dx2;      dy1=dy2;      dx2=pts[start + 2] - pts[end - 2];      dy2=pts[start + 3] - pts[end - 1];      p.curveTo(tx + pts[end - 2] + slack * dx1,ty + pts[end - 1] + slack * dy1,tx + pts[0] - slack * dx2,ty + pts[1] - slack * dy2,tx + pts[0],ty + pts[1]);      p.closePath();    } else {      p.curveTo(tx + pts[i - 2] + slack * dx2,ty + pts[i - 1] + slack * dy2,tx + pts[i] - slack * dx2,ty + pts[i + 1] - slack * dy2,tx + pts[i],ty + pts[i + 1]);    }  } catch (  IllegalPathStateException ex) {  }  return p;}  }
class C{  public SetDebuggerEventSettingsReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:14.708 -0400",hash_original_method="9D73270D970CE651CDDED76CEC412EF8",hash_generated_method="872CEA5703FF32831EF4AB7103C20BC2") private void removeAt(int i){  Object[] array=queue;  int n=size - 1;  if (n == i)   array[i]=null; else {    E moved=(E)array[n];    array[n]=null;    Comparator<? super E> cmp=comparator;    if (cmp == null)     siftDownComparable(i,moved,array,n); else     siftDownUsingComparator(i,moved,array,n,cmp);    if (array[i] == moved) {      if (cmp == null)       siftUpComparable(i,moved,array); else       siftUpUsingComparator(i,moved,array,cmp);    }  }  size=n;}  }
class C{  private static void matchVirtualPoolWithUnManagedVolumeVPLEX(List<UnManagedVolume> modifiedUnManagedVolumes,VirtualPool vpool,DbClient dbClient){  if (!VirtualPool.vPoolSpecifiesHighAvailability(vpool)) {    return;  }  _log.info("START: matching virtual pool with unmanaged volume for VPLEX");  Joiner j=new Joiner(dbClient).join(StorageSystem.class,"ss").match("systemType","vplex").join("ss",UnManagedVolume.class,"umv","storageDevice").go();  Map<StorageSystem,List<URI>> ssToUmvMap=j.pushList("ss").pushUris("umv").map();  for (  Entry<StorageSystem,List<URI>> ssToUmvEntry : ssToUmvMap.entrySet()) {    StorageSystem vplex=ssToUmvEntry.getKey();    Map<String,String> clusterIdToNameMap=null;    try {      VPlexApiClient client=VPlexControllerUtils.getVPlexAPIClient(VPlexApiFactory.getInstance(),vplex,dbClient);      clusterIdToNameMap=client.getClusterIdToNameMap();    } catch (    Exception ex) {      _log.warn("Exception caught while getting cluster name info from VPLEX {}",vplex.forDisplay());    }    if (null == clusterIdToNameMap || clusterIdToNameMap.isEmpty()) {      _log.warn("Could not update virtual pool matches for VPLEX {} because cluster name info couldn't be retrieved",vplex.forDisplay());      continue;    }    Map<String,String> varrayToClusterIdMap=new HashMap<String,String>();    Iterator<UnManagedVolume> volumeIter=dbClient.queryIterativeObjects(UnManagedVolume.class,ssToUmvEntry.getValue());    while (volumeIter.hasNext()) {      UnManagedVolume volume=volumeIter.next();      String highAvailability=null;      if (volume.getVolumeInformation().get(SupportedVolumeInformation.VPLEX_LOCALITY.toString()) != null) {        String haFound=volume.getVolumeInformation().get(SupportedVolumeInformation.VPLEX_LOCALITY.toString()).iterator().next();        if (haFound.equalsIgnoreCase(LOCAL)) {          highAvailability=VirtualPool.HighAvailabilityType.vplex_local.name();        } else {          highAvailability=VirtualPool.HighAvailabilityType.vplex_distributed.name();        }      }      _log.debug("finding valid virtual pools for UnManagedVolume {}",volume.getLabel());      if (!vpool.getHighAvailability().equals(highAvailability) && !(VirtualPool.vPoolSpecifiesRPVPlex(vpool) && highAvailability.equals(VirtualPool.HighAvailabilityType.vplex_local.name()))) {        _log.info(String.format("   virtual pool %s is not valid because " + "its high availability setting does not match the unmanaged volume %s",vpool.getLabel(),volume.forDisplay()));        continue;      }      Boolean mvConsistency=vpool.getMultivolumeConsistency();      if ((TRUE.equals(volume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.IS_VOLUME_ADDED_TO_CONSISTENCYGROUP.toString()))) && ((mvConsistency == null) || (mvConsistency == Boolean.FALSE))) {        _log.info(String.format("   virtual pool %s is not valid because it does not have the " + "multi-volume consistency flag set, and the unmanaged volume %s is in a consistency group",vpool.getLabel(),volume.forDisplay()));        continue;      }      StringSet volumeClusters=new StringSet();      if (volume.getVolumeInformation().get(SupportedVolumeInformation.VPLEX_CLUSTER_IDS.toString()) != null) {        volumeClusters.addAll(volume.getVolumeInformation().get(SupportedVolumeInformation.VPLEX_CLUSTER_IDS.toString()));      }      StringSet varraysForVpool=vpool.getVirtualArrays();      for (      String varrayId : varraysForVpool) {        String varrayClusterId=varrayToClusterIdMap.get(varrayId);        if (null == varrayClusterId) {          varrayClusterId=ConnectivityUtil.getVplexClusterForVarray(URI.create(varrayId),vplex.getId(),dbClient);          varrayToClusterIdMap.put(varrayId,varrayClusterId);        }        if (!ConnectivityUtil.CLUSTER_UNKNOWN.equals(varrayClusterId)) {          String varrayClusterName=clusterIdToNameMap.get(varrayClusterId);          if (volumeClusters.contains(varrayClusterName)) {            if (volume.getSupportedVpoolUris() == null) {              volume.setSupportedVpoolUris(new StringSet());            }            volume.getSupportedVpoolUris().add(vpool.getId().toString());            modifiedUnManagedVolumes.add(volume);            break;          }        }      }      if (!modifiedUnManagedVolumes.contains(volume)) {        _log.info(String.format("   virtual pool %s is not valid because " + "volume %s resides on a cluster that does not match the varray(s) associated with the vpool",vpool.getLabel(),volume.forDisplay()));      }    }  }  _log.info("END: matching virtual pool with unmanaged volume for VPLEX");}  }
class C{  public int size(Key lo,Key hi){  if (lo == null)   throw new NullPointerException("first argument to size() is null");  if (hi == null)   throw new NullPointerException("second argument to size() is null");  if (lo.compareTo(hi) > 0)   return 0;  if (contains(hi))   return rank(hi) - rank(lo) + 1; else   return rank(hi) - rank(lo);}  }
class C{  public static void main(String[] args) throws Exception {  new MessageLogIntegrationTest().run();}  }
class C{  private void _testSingleQuotesDefault(boolean useStream) throws Exception {  JsonFactory f=new JsonFactory();  String JSON="[ 'text' ]";  JsonParser jp=useStream ? createParserUsingStream(f,JSON,"UTF-8") : createParserUsingReader(f,JSON);  assertToken(JsonToken.START_ARRAY,jp.nextToken());  try {    jp.nextToken();    fail("Expected exception");  } catch (  JsonParseException e) {    verifyException(e,"Unexpected character ('''");  }  JSON="{ 'a':1 }";  jp=useStream ? createParserUsingStream(f,JSON,"UTF-8") : createParserUsingReader(f,JSON);  assertToken(JsonToken.START_OBJECT,jp.nextToken());  try {    jp.nextToken();    fail("Expected exception");  } catch (  JsonParseException e) {    verifyException(e,"Unexpected character ('''");  }}  }
class C{  public static void showConflictErrors(final Shell parent,final ConflictResolution[] resolutions,final ConflictResolutionStatus[] statuses){  int newConflictCount=0;  String conflictFile=null;  String conflictMessage=null;  int errorCount=0;  String errorFile=null;  String errorMessage=null;  for (int i=0; i < statuses.length; i++) {    final String filename=(resolutions[i].getConflictDescription().getLocalPath() != null) ? LocalPath.getFileName(resolutions[i].getConflictDescription().getLocalPath()) : Messages.getString("ConflictHelpers.UnknownFile");    if (statuses[i] == ConflictResolutionStatus.SUCCEEDED_WITH_CONFLICTS) {      newConflictCount+=resolutions[i].getConflicts().length;      conflictFile=filename;      conflictMessage=resolutions[i].getErrorMessage();    } else     if (statuses[i] == ConflictResolutionStatus.FAILED) {      errorCount++;      errorFile=filename;      errorMessage=resolutions[i].getErrorMessage();    }  }  if (newConflictCount > 0 || errorCount > 0) {    final StringBuffer message=new StringBuffer();    if (newConflictCount > 0) {      String error=ConflictResolution.DefaultErrorMessage;      if (newConflictCount == 1 && conflictMessage != null) {        error=conflictMessage;      }      if (newConflictCount == 1) {        final String textFormat=Messages.getString("ConflictHelpers.SingleConflictFormat");        message.append(MessageFormat.format(textFormat,conflictFile,error));      } else {        final String textFormat=Messages.getString("ConflictHelpers.MultiConflictFormat");        message.append(MessageFormat.format(textFormat,newConflictCount,error));      }    }    if (newConflictCount > 0 && errorCount > 0) {      message.append("\n\n");    }    if (errorCount > 0) {      String error=ConflictResolution.DefaultErrorMessage;      if (errorCount == 1 && errorMessage != null) {        error=errorMessage;      }      if (newConflictCount == 1) {        if (errorCount == 1) {          final String textFormat=Messages.getString("ConflictHelpers.SingleConflictFormat");          message.append(MessageFormat.format(textFormat,errorFile,error));        } else {          final String textFormat=Messages.getString("ConflictHelpers.SingleConflictMutliErrorFormat");          message.append(MessageFormat.format(textFormat,errorCount,error));        }      } else {        if (errorCount == 1) {          final String textFormat=Messages.getString("ConflictHelpers.MultiConflictSingleErrorFormat");          message.append(MessageFormat.format(textFormat,errorFile,error));        } else {          final String textFormat=Messages.getString("ConflictHelpers.MultiConflictMultiErrorFormat");          message.append(MessageFormat.format(textFormat,errorCount,error));        }      }    }    message.append("\n\n");    if (newConflictCount + errorCount > 1) {      message.append(Messages.getString("ConflictHelpers.SingleConflictResolve"));    } else {      message.append(Messages.getString("ConflictHelpers.MultiConflictResolve"));    }    final String title=(resolutions.length > 1) ? Messages.getString("ConflictHelpers.MultiConflictDialogTitle") : Messages.getString("ConflictHelpers.SingleConflictDialogTitle");    MessageDialog.openError(parent,title,message.toString());  }}  }
class C{  public Bundler putCharSequence(String key,CharSequence value){  bundle.putCharSequence(key,value);  return this;}  }
class C{  public boolean isCellSpannedThroughHorizontally(int row,int column){  return tablePositions[row * columns + column] == H_SPAN_CONSTRAINT || tablePositions[row * columns + column] == VH_SPAN_CONSTRAINT;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Node textNode;  Node retval;  Node lastChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        textNode=doc.createCDATASection("terday");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {    textNode=doc.createCDATASection("terday");{      boolean success=false;      try {        retval=titleAttr.appendChild(textNode);      } catch (      DOMException ex) {        success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);      }      assertTrue("throw_HIERARCHY_REQUEST_ERR",success);    }  }}  }
class C{  public void executeQuery(KeyNamePair docTypeKNPair,IMiniTable miniTable){  log.info("");  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  String sql="";  if (docTypeKNPair.getKey() == MInOut.Table_ID) {    sql=getInOutSQL();  } else {  }  int row=0;  miniTable.setRowCount(row);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql.toString(),null);    pstmt.setInt(1,AD_Client_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      miniTable.setRowCount(row + 1);      int i=0;      miniTable.setValueAt(new IDColumn(rs.getInt(1)),row,i++);      miniTable.setValueAt(rs.getString(4),row,i++);      miniTable.setValueAt(rs.getString(5),row,i++);      miniTable.setValueAt(rs.getTimestamp(6),row,i++);      miniTable.setValueAt(rs.getString(8),row,i++);      row++;    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql.toString(),e);  } finally {    DB.close(rs,pstmt);  }  miniTable.autoSize();}  }
class C{  public boolean isCurrent(char c){  if (!isValidIndex())   return false;  return lcText[pos] == c;}  }
class C{  public void add(Annotation ann){  _add(ann);}  }
class C{  public void onIdleBegin(){  _idleCount.incrementAndGet();}  }
class C{  public static boolean hasStatus(byte[] receivedApdu,String statusCode) throws IOException {  return hasStatus(receivedApdu,decodeHex(statusCode));}  }
class C{  public RDN(ASN1ObjectIdentifier oid,ASN1Encodable value){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(oid);  v.add(value);  this.values=new DERSet(new DERSequence(v));}  }
class C{  public void startSynchronizationTask(int interval){  try {    if (interval > MIN_INTERVAL_DELAY) {      start(interval);    }  } catch (  Exception e) {    _log.error("Exception when trying to start synchronization task: {}",e.getMessage());  }}  }
class C{  public TFloatHashSet(){}  }
class C{  public boolean checkSpam(String user,String text){  String lastSpam=this.spamText.get(user);  if (text.equals(lastSpam)) {    Integer count=this.spamCount.get(user);    if (count == null) {      count=0;    }    this.spamCount.put(user,count + 1);    if (count.intValue() > this.maxSpam) {      return true;    }  } else {    this.spamText.put(user,text);    this.spamCount.put(user,1);  }  if (this.spamText.size() > 50) {    this.spamText.clear();    this.spamCount.clear();  }  return false;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MLdapProcessor[");  sb.append(get_ID()).append("-").append(getName()).append(",Port=").append(getLdapPort()).append("]");  return sb.toString();}  }
class C{  @Override public boolean canSeeSky(BlockPos pos){  int height=this.getHeightValue(Coords.blockToLocal(pos.getX()),Coords.blockToLocal(pos.getZ()));  return pos.getY() >= height;}  }
class C{  public <T>T removeEnv(String key){  String ekey=FlexibleStringExpander.expandString(key,this.env);  FlexibleMapAccessor<T> fma=FlexibleMapAccessor.getInstance(ekey);  return this.removeEnv(fma);}  }
class C{  public void sendMessage(Message msg){  msg.replyTo=mSrcMessenger;  try {    mDstMessenger.send(msg);  } catch (  RemoteException e) {    replyDisconnected(STATUS_SEND_UNSUCCESSFUL);  }}  }
class C{  public static String toString(InetSocketAddress socketAddress){  return String.format(TO_STRING_FORMAT,socketAddress.getAddress().getHostAddress(),socketAddress.getPort());}  }
class C{  public static void main(String[] args){  Options options=new Options();  Option helpOpts=OptionBuilder.withArgName("help").withDescription("show this help message").create("help");  Option urlOpts=OptionBuilder.withArgName("urls").hasArg().withDescription("the urls file to check").create("urls");  Option numThreadOpts=OptionBuilder.withArgName("numThreads").hasArgs().withDescription("the number of threads to use").create("numThreads");  options.addOption(helpOpts);  options.addOption(urlOpts);  options.addOption(numThreadOpts);  CommandLineParser parser=new GnuParser();  try {    CommandLine line=parser.parse(options,args);    if (line.hasOption("help") || !line.hasOption("urls")) {      HelpFormatter formatter=new HelpFormatter();      formatter.printHelp("ResolveUrls",options);      return;    }    String urls=line.getOptionValue("urls");    int numThreads=100;    String numThreadsStr=line.getOptionValue("numThreads");    if (numThreadsStr != null) {      numThreads=Integer.parseInt(numThreadsStr);    }    ResolveUrls resolve=new ResolveUrls(urls,numThreads);    resolve.resolveUrls();  } catch (  Exception e) {    LOG.error("ResolveUrls: " + StringUtils.stringifyException(e));  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void removeAutos(boolean removeImpossibles){  ArrayList<TargetRollModifier> toKeep=new ArrayList<TargetRollModifier>();  for (  TargetRollModifier modifier : modifiers) {    if (!removeImpossibles) {      if ((modifier.getValue() != AUTOMATIC_FAIL) && (modifier.getValue() != AUTOMATIC_SUCCESS)) {        toKeep.add(modifier);      }    } else     if ((modifier.getValue() != AUTOMATIC_FAIL) && (modifier.getValue() != AUTOMATIC_SUCCESS) && (modifier.getValue() != IMPOSSIBLE)) {      toKeep.add(modifier);    }  }  modifiers=toKeep;  recalculate();}  }
class C{  public void unassignPolicyToFileSystem(URI fileSystemId,URI policyId){  client.put(String.class,PathConstants.UNASSIGN_POLICY_URL,fileSystemId,policyId);}  }
class C{  public void testProperties(){  Properties properties=new Properties();  properties.put(NettyOptions.THREADS,"1");  properties.put(NettyOptions.CONNECT_TIMEOUT,"1000");  properties.put(NettyOptions.SEND_BUFFER_SIZE,"1024");  properties.put(NettyOptions.RECEIVE_BUFFER_SIZE,"1024");  properties.put(NettyOptions.REUSE_ADDRESS,"false");  properties.put(NettyOptions.TCP_KEEP_ALIVE,"false");  properties.put(NettyOptions.TCP_NO_DELAY,"true");  properties.put(NettyOptions.ACCEPT_BACKLOG,"1234");  NettyOptions options=new NettyOptions(properties);  assertEquals(options.threads(),1);  assertEquals(options.connectTimeout(),1000);  assertEquals(options.sendBufferSize(),1024);  assertEquals(options.receiveBufferSize(),1024);  assertEquals(options.reuseAddress(),false);  assertEquals(options.tcpKeepAlive(),false);  assertEquals(options.tcpNoDelay(),true);  assertEquals(options.acceptBacklog(),1234);}  }
class C{  private void fetchDouble(){  fetchFlowScalar('"');}  }
class C{  public WebXml parse() throws IOException, JDOMException {  bufferedStream.mark(1024 * 1024);  BufferedReader reader=new BufferedReader(new InputStreamReader(bufferedStream));  String line=reader.readLine();  while (line != null && this.version == null) {    if (line.contains(WebXmlVersion.V2_2.getPublicId())) {      version=WebXmlVersion.V2_2;    }    if (line.contains(WebXmlVersion.V2_3.getPublicId())) {      version=WebXmlVersion.V2_3;    }    if (line.contains("<web-app")) {      break;    }    line=reader.readLine();  }  if (this.version != null) {    generateWebXml();  } else {    try {      bufferedStream.reset();      bufferedStream.mark(1024 * 1024);      SAXParser parser=SAXParserFactory.newInstance().newSAXParser();      parser.parse(new InputSource(bufferedStream),this);    } catch (    SAXException e) {    }catch (    Exception ex) {      throw new CargoException("Problem in parsing",ex);    }  }  return this.webXml;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildTavern(zone);}  }
class C{  public static Socket createSocket(String server,int defaultPort,boolean ssl) throws IOException {  int port=defaultPort;  int startIndex=server.startsWith("[") ? server.indexOf(']') : 0;  int idx=server.indexOf(':',startIndex);  if (idx >= 0) {    port=Integer.decode(server.substring(idx + 1));    server=server.substring(0,idx);  }  InetAddress address=InetAddress.getByName(server);  return createSocket(address,port,ssl);}  }
class C{  private View fillUp(int pos,int nextBottom){  View selectedView=null;  int end=0;  if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {    end=mListPadding.top;  }  while (nextBottom > end && pos >= 0) {    View temp=makeRow(pos,nextBottom,false);    if (temp != null) {      selectedView=temp;    }    nextBottom=mReferenceView.getTop() - mVerticalSpacing;    mFirstPosition=pos;    pos-=mNumColumns;  }  if (mStackFromBottom) {    mFirstPosition=Math.max(0,pos + 1);  }  setVisibleRangeHint(mFirstPosition,mFirstPosition + getChildCount() - 1);  return selectedView;}  }
class C{  @Override public String toString(){  return "(" + exp1 + ") or ("+ exp2+ ")";}  }
class C{  public boolean isCycle(){  return isCycle;}  }
class C{  public void addControlListener(Control cl){  m_controls.add(cl);}  }
class C{  public void add(final double[] datum,final double weight){  if (dimension_ == 0) {    final int dimension=datum.length;    QL.require(dimension > 0,NULL_DIMENSION);    reset(dimension);  }  QL.require(datum.length == dimension_,SAMPLE_SIZE_MISMATCH);  final Array array=new Array(datum);  quadraticSum.addAssign(array.outerProduct(array).mulAssign(weight));  for (int i=0; i < dimension_; i++) {    stats[i].add(datum[i],weight);  }}  }
class C{  private void normalActionHistoryTable(){  setColumnCollapsingAllowed(false);  managementUIState.setActionHistoryMaximized(false);  removeGeneratedColumn(SPUIDefinitions.ACTION_HIS_TBL_MSGS);  setVisibleColumns(getVisbleColumns().toArray());  setColumnExpandRatioForMinimisedTable();}  }
class C{  public Executor env(Map<String,String> env){  this.env=env;  return this;}  }
class C{  public RemainderDateTimeField(DividedDateTimeField dividedField){  this(dividedField,dividedField.getType());}  }
class C{  void lockTrade(){  RPAction action=makeAction();  action.put("action","lock");  ClientSingletonRepository.getClientFramework().send(action);}  }
class C{  public List<Vertex> findAll(int pageSize,int page){  return findAll();}  }
class C{  public static Matrix identity(int m,int n){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=(i == j ? 1.0 : 0.0);    }  }  return A;}  }
class C{  void reset(){}  }
class C{  public void expressionChanged(Expression expr){  fireExpressionChange();}  }
class C{  public static String defaultConsistFilename(){  return getFileLocation() + "consist.xml";}  }
class C{  public void testAND() throws Exception {  BooleanQuery.Builder expected=new BooleanQuery.Builder();  expected.add(new TermQuery(new Term("field","foo")),Occur.MUST);  expected.add(new TermQuery(new Term("field","bar")),Occur.MUST);  assertEquals(expected.build(),parse("foo+bar"));}  }
class C{  public static Associator forName(String associatorName,String[] options) throws Exception {  return (Associator)Utils.forName(Associator.class,associatorName,options);}  }
class C{  String readDayOfWeek(String source,int ofs){  int i=findEndText(source,ofs);  if (i == -1) {    i=source.length();  }  String fragment=source.substring(ofs,i);  for (  String weekday : getDateFormatSymbols().getWeekdays()) {    if (fragment.equalsIgnoreCase(weekday)) {      return source.substring(ofs,ofs + weekday.length());    }  }  for (  String weekday : getDateFormatSymbols().getShortWeekdays()) {    if (fragment.equalsIgnoreCase(weekday)) {      return source.substring(ofs,ofs + weekday.length());    }  }  return null;}  }
class C{  public void removeListener(final ITagManagerListener listener){  m_listeners.removeListener(listener);}  }
class C{  public String modelFileTipText(){  return "The serialized classifier model to use for predictions.";}  }
class C{  public ActivationGroupID returnGroupID() throws RemoteException {  return ActivationGroup.currentGroupID();}  }
class C{  public static void printArrayWithLRM(int[] arr,int l,int r,int m){  System.out.print("[ ");  for (int j=0; j < (arr.length - 1); j++) {    System.out.print(arr[j] + " ");  }  if (arr.length > 0) {    System.out.print(arr[arr.length - 1]);  }  System.out.println(" ]");  System.out.print("  ");  for (int j=0; j < arr.length; j++) {    if (j == r && j == l && j == m) {      System.out.print("LMR ");    } else     if (j == l && j == m) {      System.out.print("LM  ");    } else     if (j == r && j == m) {      System.out.print("MR  ");    } else     if (j == l) {      System.out.print("L   ");    } else     if (j == r) {      System.out.print("R   ");    } else     if (j == m) {      System.out.print("M   ");    } else {      System.out.print("    ");    }  }  System.out.println();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected byte[] engineUpdate(byte[] input,int inputOffset,int inputLen){  return core.update(input,inputOffset,inputLen);}  }
class C{  public String toString(){  String description;  try {    description=getDescription();  } catch (  MetadataException e) {    description=_directory.getString(getTagType()) + " (unable to formulate description)";  }  return "[" + _directory.getName() + "] "+ getTagName()+ " - "+ description;}  }
class C{  public <X extends Throwable>int orElseThrow(Supplier<X> exceptionSupplier) throws X {  if (isPresent) {    return value;  } else {    throw exceptionSupplier.get();  }}  }
class C{  public void aggregate(ThreadInformationData other){  count+=other.count;  minDaemonThreadCount=Math.min(other.getMinDaemonThreadCount(),minDaemonThreadCount);  minPeakThreadCount=Math.min(other.getMinPeakThreadCount(),minPeakThreadCount);  minThreadCount=Math.min(other.getMinThreadCount(),minThreadCount);  minTotalStartedThreadCount=Math.min(other.getMinTotalStartedThreadCount(),minTotalStartedThreadCount);  maxDaemonThreadCount=Math.max(other.getMaxDaemonThreadCount(),maxDaemonThreadCount);  maxPeakThreadCount=Math.max(other.getMaxPeakThreadCount(),maxPeakThreadCount);  maxThreadCount=Math.max(other.getMaxThreadCount(),maxThreadCount);  maxTotalStartedThreadCount=Math.max(other.getMaxTotalStartedThreadCount(),maxTotalStartedThreadCount);  totalDaemonThreadCount+=other.getTotalDaemonThreadCount();  totalPeakThreadCount+=other.getTotalPeakThreadCount();  totalThreadCount+=other.getTotalThreadCount();  totalTotalStartedThreadCount+=other.getTotalTotalStartedThreadCount();}  }
class C{  public JsonArray add(int value){  values.add(valueOf(value));  return this;}  }
class C{  public static boolean isImdnService(SipRequest request){  String content=request.getContent();  String contentType=request.getContentType();  return (content != null) && (content.contains(ImdnDocument.IMDN_NAMESPACE)) && (contentType != null)&& (contentType.equalsIgnoreCase(CpimMessage.MIME_TYPE));}  }
class C{  private Object readResolve(){  Chronology base=getBase();  return base == null ? getInstance(DateTimeZone.UTC,getMinimumDaysInFirstWeek()) : getInstance(base.getZone(),getMinimumDaysInFirstWeek());}  }
class C{  public boolean isEver(){  return ever;}  }
class C{  public static Bitmap createThumbnailBitmap(Bitmap bitmap,Context context){  int sIconWidth=-1;  int sIconHeight=-1;  final Resources resources=context.getResources();  sIconWidth=sIconHeight=(int)resources.getDimension(android.R.dimen.app_icon_size);  final Paint sPaint=new Paint();  final Rect sBounds=new Rect();  final Rect sOldBounds=new Rect();  Canvas sCanvas=new Canvas();  int width=sIconWidth;  int height=sIconHeight;  sCanvas.setDrawFilter(new PaintFlagsDrawFilter(Paint.DITHER_FLAG,Paint.FILTER_BITMAP_FLAG));  final int bitmapWidth=bitmap.getWidth();  final int bitmapHeight=bitmap.getHeight();  if (width > 0 && height > 0) {    if (width < bitmapWidth || height < bitmapHeight) {      final float ratio=(float)bitmapWidth / bitmapHeight;      if (bitmapWidth > bitmapHeight) {        height=(int)(width / ratio);      } else       if (bitmapHeight > bitmapWidth) {        width=(int)(height * ratio);      }      final Config c=(width == sIconWidth && height == sIconHeight) ? bitmap.getConfig() : Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(sIconWidth,sIconHeight,c);      final Canvas canvas=sCanvas;      final Paint paint=sPaint;      canvas.setBitmap(thumb);      paint.setDither(false);      paint.setFilterBitmap(true);      sBounds.set((sIconWidth - width) / 2,(sIconHeight - height) / 2,width,height);      sOldBounds.set(0,0,bitmapWidth,bitmapHeight);      canvas.drawBitmap(bitmap,sOldBounds,sBounds,paint);      return thumb;    } else     if (bitmapWidth < width || bitmapHeight < height) {      final Config c=Config.ARGB_8888;      final Bitmap thumb=Bitmap.createBitmap(sIconWidth,sIconHeight,c);      final Canvas canvas=sCanvas;      final Paint paint=sPaint;      canvas.setBitmap(thumb);      paint.setDither(false);      paint.setFilterBitmap(true);      canvas.drawBitmap(bitmap,(sIconWidth - bitmapWidth) / 2,(sIconHeight - bitmapHeight) / 2,paint);      return thumb;    }  }  return bitmap;}  }
class C{  private void correctTooLow(int childCount){  if (mFirstPosition == 0 && childCount > 0) {    final View firstChild=getChildAt(0);    final int firstTop=firstChild.getTop();    final int start=mListPadding.top;    final int end=(mBottom - mTop) - mListPadding.bottom;    int topOffset=firstTop - start;    View lastChild=getChildAt(childCount - 1);    final int lastBottom=lastChild.getBottom();    int lastPosition=mFirstPosition + childCount - 1;    if (topOffset > 0) {      if (lastPosition < mItemCount - 1 || lastBottom > end) {        if (lastPosition == mItemCount - 1) {          topOffset=Math.min(topOffset,lastBottom - end);        }        offsetChildrenTopAndBottom(-topOffset);        if (lastPosition < mItemCount - 1) {          fillDown(lastPosition + 1,lastChild.getBottom() + mDividerHeight);          adjustViewsUpOrDown();        }      } else       if (lastPosition == mItemCount - 1) {        adjustViewsUpOrDown();      }    }  }}  }
class C{  void recomposeDecimalFormats(DecimalFormatProperties dfp){  DecimalFormatSymbols oldDfs=(DecimalFormatSymbols)m_decimalFormatSymbols.get(dfp.getName());  if (null == oldDfs) {    m_decimalFormatSymbols.put(dfp.getName(),dfp.getDecimalFormatSymbols());  } else   if (!dfp.getDecimalFormatSymbols().equals(oldDfs)) {    String themsg;    if (dfp.getName().equals(new QName(""))) {      themsg=XSLMessages.createWarning(XSLTErrorResources.WG_ONE_DEFAULT_XSLDECIMALFORMAT_ALLOWED,new Object[0]);    } else {      themsg=XSLMessages.createWarning(XSLTErrorResources.WG_XSLDECIMALFORMAT_NAMES_MUST_BE_UNIQUE,new Object[]{dfp.getName()});    }    error(themsg);  }}  }
class C{  public void buildIndexes(boolean clearAndBuildFlag) throws IOException {  if (clearAndBuildFlag) {    clearIndex();  }  this.addPokemon();  this.closeIndexWriter();}  }
class C{  public void initializeBounds(Scope scope,ParameterizedTypeBinding capturedParameterizedType){  TypeVariableBinding wildcardVariable=this.wildcard.typeVariable();  if (wildcardVariable == null) {    TypeBinding originalWildcardBound=this.wildcard.bound;switch (this.wildcard.boundKind) {case Wildcard.EXTENDS:      TypeBinding capturedWildcardBound=originalWildcardBound.capture(scope,this.position);    if (originalWildcardBound.isInterface()) {      this.superclass=scope.getJavaLangObject();      this.superInterfaces=new ReferenceBinding[]{(ReferenceBinding)capturedWildcardBound};    } else {      if (capturedWildcardBound.isArrayType() || capturedWildcardBound == this) {        this.superclass=scope.getJavaLangObject();      } else {        this.superclass=(ReferenceBinding)capturedWildcardBound;      }      this.superInterfaces=Binding.NO_SUPERINTERFACES;    }  this.firstBound=capturedWildcardBound;if ((capturedWildcardBound.tagBits & TagBits.HasTypeVariable) == 0) this.tagBits&=~TagBits.HasTypeVariable;break;case Wildcard.UNBOUND:this.superclass=scope.getJavaLangObject();this.superInterfaces=Binding.NO_SUPERINTERFACES;this.tagBits&=~TagBits.HasTypeVariable;break;case Wildcard.SUPER:this.superclass=scope.getJavaLangObject();this.superInterfaces=Binding.NO_SUPERINTERFACES;this.lowerBound=this.wildcard.bound;if ((originalWildcardBound.tagBits & TagBits.HasTypeVariable) == 0) this.tagBits&=~TagBits.HasTypeVariable;break;}return;}ReferenceBinding originalVariableSuperclass=wildcardVariable.superclass;ReferenceBinding substitutedVariableSuperclass=(ReferenceBinding)Scope.substitute(capturedParameterizedType,originalVariableSuperclass);if (substitutedVariableSuperclass == this) substitutedVariableSuperclass=originalVariableSuperclass;ReferenceBinding[] originalVariableInterfaces=wildcardVariable.superInterfaces();ReferenceBinding[] substitutedVariableInterfaces=Scope.substitute(capturedParameterizedType,originalVariableInterfaces);if (substitutedVariableInterfaces != originalVariableInterfaces) {for (int i=0, length=substitutedVariableInterfaces.length; i < length; i++) {if (substitutedVariableInterfaces[i] == this) substitutedVariableInterfaces[i]=originalVariableInterfaces[i];}}TypeBinding originalWildcardBound=this.wildcard.bound;switch (this.wildcard.boundKind) {case Wildcard.EXTENDS:TypeBinding capturedWildcardBound=originalWildcardBound.capture(scope,this.position);if (originalWildcardBound.isInterface()) {this.superclass=substitutedVariableSuperclass;if (substitutedVariableInterfaces == Binding.NO_SUPERINTERFACES) {this.superInterfaces=new ReferenceBinding[]{(ReferenceBinding)capturedWildcardBound};} else {int length=substitutedVariableInterfaces.length;System.arraycopy(substitutedVariableInterfaces,0,substitutedVariableInterfaces=new ReferenceBinding[length + 1],1,length);substitutedVariableInterfaces[0]=(ReferenceBinding)capturedWildcardBound;this.superInterfaces=Scope.greaterLowerBound(substitutedVariableInterfaces);}} else {if (capturedWildcardBound.isArrayType() || capturedWildcardBound == this) {this.superclass=substitutedVariableSuperclass;} else {this.superclass=(ReferenceBinding)capturedWildcardBound;if (this.superclass.isSuperclassOf(substitutedVariableSuperclass)) {this.superclass=substitutedVariableSuperclass;}}this.superInterfaces=substitutedVariableInterfaces;}this.firstBound=capturedWildcardBound;if ((capturedWildcardBound.tagBits & TagBits.HasTypeVariable) == 0) this.tagBits&=~TagBits.HasTypeVariable;break;case Wildcard.UNBOUND:this.superclass=substitutedVariableSuperclass;this.superInterfaces=substitutedVariableInterfaces;this.tagBits&=~TagBits.HasTypeVariable;break;case Wildcard.SUPER:this.superclass=substitutedVariableSuperclass;if (wildcardVariable.firstBound == substitutedVariableSuperclass || originalWildcardBound == substitutedVariableSuperclass) {this.firstBound=substitutedVariableSuperclass;}this.superInterfaces=substitutedVariableInterfaces;this.lowerBound=originalWildcardBound;if ((originalWildcardBound.tagBits & TagBits.HasTypeVariable) == 0) this.tagBits&=~TagBits.HasTypeVariable;break;}}  }
class C{  public void init(){  m_csv=new File(m_filename);  try {    m_csv.createNewFile();    m_fw=new FileWriter(m_csv);  } catch (  IOException e) {    e.printStackTrace();    return;  }}  }
class C{  Arguments(String args[]) throws IllegalArgumentException {  parseArgs(args);}  }
class C{  public void writeReport(OutputStream os) throws IOException {  Enumeration e=testsExecuted.elements();  while (e.hasMoreElements()) {    String key=(String)e.nextElement();    Boolean v=(Boolean)testsExecuted.get(key);    if (v.booleanValue()) {      os.write((key + " passed\n").getBytes());    } else {      os.write((key + " failed\n").getBytes());    }  }}  }
class C{  public static String wrapInTag(String line,String tag,String cssClass){  StringBuilder tagBuilder=new StringBuilder();  tagBuilder.append("<");  tagBuilder.append(tag);  if (cssClass != null) {    tagBuilder.append(" class=\"");    tagBuilder.append(cssClass);    tagBuilder.append("\"");  }  tagBuilder.append(">");  String startTag=tagBuilder.toString();  tagBuilder.delete(0,tagBuilder.length());  tagBuilder.append("</");  tagBuilder.append(tag);  tagBuilder.append(">");  String endTag=tagBuilder.toString();  return startTag + line + endTag;}  }
class C{  public ScriptBuilder number(long num){  if (num >= 0 && num < 16) {    return smallNum((int)num);  } else {    return bigNum(num);  }}  }
class C{  private boolean hasNextBranchCondition(){  return !unsolvedBranchConditions.isEmpty();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void afterDestroy(GlowPlayer player,GlowBlock block,BlockFace face,GlowBlockState oldState){  block.applyPhysics(oldState.getType(),block.getTypeId(),oldState.getRawData(),block.getData());}  }
class C{  public static short parseShort(java.lang.String s,int radix) throws java.lang.NumberFormatException {  return (short)Integer.parseInt(s,radix);}  }
class C{  public Inet6Network(InetAddress ip,Integer netmask){  network=maskIP(ip,netmask);  this.netmask=netmask;}  }
class C{  public InMemoryDatabase create() throws OrmException {  if (!created) {    created=true;    try (ReviewDb c=open()){      schemaCreator.create(c);    } catch (    IOException|ConfigInvalidException e) {      throw new OrmException("Cannot create in-memory database",e);    }  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.146 -0500",hash_original_method="1C78A3648C04874A6B02C5BA2CA8304A",hash_generated_method="8D68F5485B633B11ECD1D0A455A715D8") public void cancel(){  if (handleResponseForSynchronousRequest(null,null)) {    signalRequestComplete();    return;  }  sendMessage(obtainMessage(AUTH_CANCEL));  signalRequestComplete();}  }
class C{  void preReplaceChildEvent(ASTNode node,ASTNode child,ASTNode newChild,StructuralPropertyDescriptor property){synchronized (this.internalASTLock) {    if (this.disableEvents > 0) {      return;    } else {      disableEvents();    }  }  try {    this.eventHandler.preReplaceChildEvent(node,child,newChild,property);  }  finally {    reenableEvents();  }}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public TrieNode(){}  }
class C{  public static <V>int distinctList(List<V> sourceList){  if (isEmpty(sourceList)) {    return 0;  }  int sourceCount=sourceList.size();  int sourceListSize=sourceList.size();  for (int i=0; i < sourceListSize; i++) {    for (int j=(i + 1); j < sourceListSize; j++) {      if (sourceList.get(i).equals(sourceList.get(j))) {        sourceList.remove(j);        sourceListSize=sourceList.size();        j--;      }    }  }  return sourceCount - sourceList.size();}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public MLContext(SparkContext sparkContext){  this(sparkContext,false);}  }
class C{  static public void writeText(Writer out,char[] buff,char[] text,int start,int length) throws IOException {  int buffLength=buff.length;  int buffIndex=0;  int end=start + length;  for (int i=start; i < end; i++) {    char ch=text[i];    if (ch < 0xA0) {      if (ch >= 0x3f) {        buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);      } else       if (ch >= 0x27) {        if (ch < 0x3c) {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        } else         if (ch == '<') {          buffIndex=flushBuffer(out,buff,buffIndex);          out.write("&lt;");        } else         if (ch == '>') {          buffIndex=flushBuffer(out,buff,buffIndex);          out.write("&gt;");        } else {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        }      } else {        if (ch == '&') {          buffIndex=flushBuffer(out,buff,buffIndex);          out.write("&amp;");        } else {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        }      }    } else {      buffIndex=flushBuffer(out,buff,buffIndex);      _writeDecRef(out,ch);    }  }  flushBuffer(out,buff,buffIndex);}  }
