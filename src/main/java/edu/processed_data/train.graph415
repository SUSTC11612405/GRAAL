class C{  public AccountHeaderBuilder withAccountHeader(@LayoutRes int resLayout){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (resLayout != -1) {    this.mAccountHeaderContainer=mActivity.getLayoutInflater().inflate(resLayout,null,false);  } else {    if (mCompactStyle) {      this.mAccountHeaderContainer=mActivity.getLayoutInflater().inflate(R.layout.material_drawer_compact_header,null,false);    } else {      this.mAccountHeaderContainer=mActivity.getLayoutInflater().inflate(R.layout.material_drawer_header,null,false);    }  }  return this;}  }
class C{  public MimSearchEditor(BuildPureClustersRunner pureClustersRunner){  this(pureClustersRunner,"Result MAG");}  }
class C{  @Override public void process(ResponseBuilder rb) throws IOException {  LOG.debug("process: {}",rb.req.getParams());  SolrQueryRequest req=rb.req;  SolrParams params=req.getParams();  if (!params.getBool(COMPONENT_NAME,true)) {    return;  }  SolrIndexSearcher searcher=req.getSearcher();  StatsCache statsCache=req.getCore().getStatsCache();  int purpose=params.getInt(ShardParams.SHARDS_PURPOSE,ShardRequest.PURPOSE_GET_TOP_IDS);  if ((purpose & ShardRequest.PURPOSE_GET_TERM_STATS) != 0) {    statsCache.returnLocalStats(rb,searcher);    return;  }  if ((purpose & ShardRequest.PURPOSE_SET_TERM_STATS) != 0) {    statsCache.receiveGlobalStats(req);  }  SolrQueryResponse rsp=rb.rsp;  IndexSchema schema=searcher.getSchema();  String ids=params.get(ShardParams.IDS);  if (ids != null) {    SchemaField idField=schema.getUniqueKeyField();    List<String> idArr=StrUtils.splitSmart(ids,",",true);    int[] luceneIds=new int[idArr.size()];    int docs=0;    for (int i=0; i < idArr.size(); i++) {      int id=searcher.getFirstMatch(new Term(idField.getName(),idField.getType().toInternal(idArr.get(i))));      if (id >= 0)       luceneIds[docs++]=id;    }    DocListAndSet res=new DocListAndSet();    res.docList=new DocSlice(0,docs,luceneIds,null,docs,0);    if (rb.isNeedDocSet()) {      List<Query> queries=new ArrayList<>();      queries.add(rb.getQuery());      List<Query> filters=rb.getFilters();      if (filters != null)       queries.addAll(filters);      res.docSet=searcher.getDocSet(queries);    }    rb.setResults(res);    ResultContext ctx=new BasicResultContext(rb);    rsp.addResponse(ctx);    return;  }  long timeAllowed=params.getLong(CommonParams.TIME_ALLOWED,-1L);  if (null != rb.getCursorMark() && 0 < timeAllowed) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Can not search using both " + CursorMarkParams.CURSOR_MARK_PARAM + " and "+ CommonParams.TIME_ALLOWED);  }  QueryCommand cmd=rb.getQueryCommand();  cmd.setTimeAllowed(timeAllowed);  req.getContext().put(SolrIndexSearcher.STATS_SOURCE,statsCache.get(req));  QueryResult result=new QueryResult();  cmd.setSegmentTerminateEarly(params.getBool(CommonParams.SEGMENT_TERMINATE_EARLY,CommonParams.SEGMENT_TERMINATE_EARLY_DEFAULT));  if (cmd.getSegmentTerminateEarly()) {    result.setSegmentTerminatedEarly(Boolean.FALSE);  }  GroupingSpecification groupingSpec=rb.getGroupingSpec();  if (groupingSpec != null) {    cmd.setSegmentTerminateEarly(false);    try {      boolean needScores=(cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;      if (params.getBool(GroupParams.GROUP_DISTRIBUTED_FIRST,false)) {        CommandHandler.Builder topsGroupsActionBuilder=new CommandHandler.Builder().setQueryCommand(cmd).setNeedDocSet(false).setIncludeHitCount(true).setSearcher(searcher);        for (        String field : groupingSpec.getFields()) {          topsGroupsActionBuilder.addCommandField(new SearchGroupsFieldCommand.Builder().setField(schema.getField(field)).setGroupSort(groupingSpec.getGroupSort()).setTopNGroups(cmd.getOffset() + cmd.getLen()).setIncludeGroupCount(groupingSpec.isIncludeGroupCount()).build());        }        CommandHandler commandHandler=topsGroupsActionBuilder.build();        commandHandler.execute();        SearchGroupsResultTransformer serializer=new SearchGroupsResultTransformer(searcher);        rsp.add("firstPhase",commandHandler.processResult(result,serializer));        rsp.add("totalHitCount",commandHandler.getTotalHitCount());        rb.setResult(result);        return;      } else       if (params.getBool(GroupParams.GROUP_DISTRIBUTED_SECOND,false)) {        CommandHandler.Builder secondPhaseBuilder=new CommandHandler.Builder().setQueryCommand(cmd).setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0).setSearcher(searcher);        for (        String field : groupingSpec.getFields()) {          SchemaField schemaField=schema.getField(field);          String[] topGroupsParam=params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);          if (topGroupsParam == null) {            topGroupsParam=new String[0];          }          List<SearchGroup<BytesRef>> topGroups=new ArrayList<>(topGroupsParam.length);          for (          String topGroup : topGroupsParam) {            SearchGroup<BytesRef> searchGroup=new SearchGroup<>();            if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {              searchGroup.groupValue=new BytesRef(schemaField.getType().readableToIndexed(topGroup));            }            topGroups.add(searchGroup);          }          secondPhaseBuilder.addCommandField(new TopGroupsFieldCommand.Builder().setField(schemaField).setGroupSort(groupingSpec.getGroupSort()).setSortWithinGroup(groupingSpec.getSortWithinGroup()).setFirstPhaseGroups(topGroups).setMaxDocPerGroup(groupingSpec.getGroupOffset() + groupingSpec.getGroupLimit()).setNeedScores(needScores).setNeedMaxScore(needScores).build());        }        for (        String query : groupingSpec.getQueries()) {          secondPhaseBuilder.addCommandField(new Builder().setDocsToCollect(groupingSpec.getOffset() + groupingSpec.getLimit()).setSort(groupingSpec.getGroupSort()).setQuery(query,rb.req).setDocSet(searcher).build());        }        CommandHandler commandHandler=secondPhaseBuilder.build();        commandHandler.execute();        TopGroupsResultTransformer serializer=new TopGroupsResultTransformer(rb);        rsp.add("secondPhase",commandHandler.processResult(result,serializer));        rb.setResult(result);        return;      }      int maxDocsPercentageToCache=params.getInt(GroupParams.GROUP_CACHE_PERCENTAGE,0);      boolean cacheSecondPassSearch=maxDocsPercentageToCache >= 1 && maxDocsPercentageToCache <= 100;      Grouping.TotalCount defaultTotalCount=groupingSpec.isIncludeGroupCount() ? Grouping.TotalCount.grouped : Grouping.TotalCount.ungrouped;      int limitDefault=cmd.getLen();      Grouping grouping=new Grouping(searcher,result,cmd,cacheSecondPassSearch,maxDocsPercentageToCache,groupingSpec.isMain());      grouping.setGroupSort(groupingSpec.getGroupSort()).setWithinGroupSort(groupingSpec.getSortWithinGroup()).setDefaultFormat(groupingSpec.getResponseFormat()).setLimitDefault(limitDefault).setDefaultTotalCount(defaultTotalCount).setDocsPerGroupDefault(groupingSpec.getGroupLimit()).setGroupOffsetDefault(groupingSpec.getGroupOffset()).setGetGroupedDocSet(groupingSpec.isTruncateGroups());      if (groupingSpec.getFields() != null) {        for (        String field : groupingSpec.getFields()) {          grouping.addFieldCommand(field,rb.req);        }      }      if (groupingSpec.getFunctions() != null) {        for (        String groupByStr : groupingSpec.getFunctions()) {          grouping.addFunctionCommand(groupByStr,rb.req);        }      }      if (groupingSpec.getQueries() != null) {        for (        String groupByStr : groupingSpec.getQueries()) {          grouping.addQueryCommand(groupByStr,rb.req);        }      }      if (rb.isNeedDocList() || rb.isDebug()) {        cmd.setFlags(SolrIndexSearcher.GET_DOCLIST);      }      grouping.execute();      if (grouping.isSignalCacheWarning()) {        rsp.add("cacheWarning",String.format(Locale.ROOT,"Cache limit of %d percent relative to maxdoc has exceeded. Please increase cache size or disable caching.",maxDocsPercentageToCache));      }      rb.setResult(result);      if (grouping.mainResult != null) {        ResultContext ctx=new BasicResultContext(rb,grouping.mainResult);        rsp.addResponse(ctx);        rsp.getToLog().add("hits",grouping.mainResult.matches());      } else       if (!grouping.getCommands().isEmpty()) {        rsp.add("grouped",result.groupedResults);        rsp.getToLog().add("hits",grouping.getCommands().get(0).getMatches());      }      return;    } catch (    SyntaxError e) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);    }  }  searcher.search(result,cmd);  rb.setResult(result);  ResultContext ctx=new BasicResultContext(rb);  rsp.addResponse(ctx);  rsp.getToLog().add("hits",rb.getResults().docList.matches());  if (!rb.req.getParams().getBool(ShardParams.IS_SHARD,false)) {    if (null != rb.getNextCursorMark()) {      rb.rsp.add(CursorMarkParams.CURSOR_MARK_NEXT,rb.getNextCursorMark().getSerializedTotem());    }  }  if (rb.mergeFieldHandler != null) {    rb.mergeFieldHandler.handleMergeFields(rb,searcher);  } else {    doFieldSortValues(rb,searcher);  }  doPrefetch(rb);}  }
class C{  public static synchronized void initializeJavaRosa(IPropertyManager mgr){  if (!isJavaRosaInitialized) {    PrototypeManager.registerPrototypes(SERIALIABLE_CLASSES);    new XFormsModule().registerModule();    isJavaRosaInitialized=true;  }  org.javarosa.core.services.PropertyManager.setPropertyManager(mgr);}  }
class C{  public CROSS_JOIN CROSS_JOIN(String tableToJoin){  return new CROSS_JOIN(this,tableToJoin);}  }
class C{  public T caseConditionalRoute(ConditionalRoute object){  return null;}  }
class C{  static void initializeVM(){  throw new Error("TODO");}  }
class C{  public void addColumnListener(ColumnListener listener){  m_listeners.add(listener);}  }
class C{  public void buildClassifier(Instances data) throws Exception {  if (m_Classifier == null) {    throw new Exception("A base classifier has not been specified!");  }  m_Classifiers=AbstractClassifier.makeCopies(m_Classifier,m_NumIterations);}  }
class C{  public void decreaseSpeed(){  animation.setRate(animation.getRate() > 0 ? animation.getRate() - 1 : 0);}  }
class C{  HeapCompactOrderedSketch(UpdateSketch sketch){  super(sketch.isEmpty(),sketch.getSeedHash(),sketch.getRetainedEntries(true),sketch.getThetaLong());  boolean ordered=true;  cache_=CompactSketch.compactCache(sketch.getCache(),getRetainedEntries(false),getThetaLong(),ordered);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:06.803 -0500",hash_original_method="356AA5E78F17E2ABD0F401EB8EAF983A",hash_generated_method="356AA5E78F17E2ABD0F401EB8EAF983A") boolean collapseGroup(int groupPos){  PositionMetadata pm=getFlattenedPos(ExpandableListPosition.obtain(ExpandableListPosition.GROUP,groupPos,-1,-1));  if (pm == null)   return false;  boolean retValue=collapseGroup(pm);  pm.recycle();  return retValue;}  }
class C{  private void sendViewEvent(AgendaItem item,long selectedTime){  long startTime;  long endTime;  if (item.allDay) {    startTime=Utils.convertAlldayLocalToUTC(null,item.begin,mTimeZone);    endTime=Utils.convertAlldayLocalToUTC(null,item.end,mTimeZone);  } else {    startTime=item.begin;    endTime=item.end;  }  if (DEBUGLOG) {    Log.d(TAG,"Sent (AgendaWindowAdapter): VIEW EVENT: " + new Date(startTime));  }  CalendarController.getInstance(mContext).sendEventRelatedEventWithExtra(this,EventType.VIEW_EVENT,item.id,startTime,endTime,0,0,CalendarController.EventInfo.buildViewExtraLong(Attendees.ATTENDEE_STATUS_NONE,item.allDay),selectedTime);}  }
class C{  public void delete(long key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  @Override public void languageChanged(Event event){  applyComponentOrientation(language.getComponentOrientation());  area.repaint();  getResourcePanel().area.repaint();  CustomColumnsStorage.changeLanguage(language);  applyComponentOrientation(language.getComponentOrientation());}  }
class C{  private String retrieveAttributeValue(final StartElement element,final QName attributeQName,final boolean mandatory,final String xPath){  Attribute attribute=element.getAttributeByName(attributeQName);  if (attribute == null) {    if (mandatory) {      throw new IllegalStateException("Looking for value for " + xPath + " but not present - flagged as mandatory.");    }    return null;  } else {    return attribute.getValue();  }}  }
class C{  public Boolean isConsolidationNeeded(){  return consolidationNeeded;}  }
class C{  public void handleEvent(Event evt){  EventTarget target=evt.getTarget();  if (!(target instanceof XBLOMDefinitionElement)) {    return;  }  XBLOMDefinitionElement def=(XBLOMDefinitionElement)target;  if (!isActiveDefinition(def,importElement)) {    return;  }  MutationEvent mevt=(MutationEvent)evt;  String attrName=mevt.getAttrName();  if (attrName.equals(XBL_ELEMENT_ATTRIBUTE)) {    DefinitionRecord defRec=(DefinitionRecord)definitions.get(def,importElement);    removeDefinition(defRec);    addDefinition(def.getElementNamespaceURI(),def.getElementLocalName(),def,importElement);  } else   if (attrName.equals(XBL_REF_ATTRIBUTE)) {    if (mevt.getNewValue().length() != 0) {      DefinitionRecord defRec=(DefinitionRecord)definitions.get(def,importElement);      removeDefinition(defRec);      addDefinitionRef(def);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  void beginSymbolicInterval(Register r,Register scratch,Instruction begin){  if (DEBUG) {    System.out.println("beginSymbolicInterval " + r + " "+ scratch+ " "+ regAllocState.getDFN(begin));  }  SymbolicInterval i=new SymbolicInterval(r,scratch);  i.begin=begin;  ArrayList<Interval> v=findOrCreateIntervalSet(r);  v.add(i);  pending.put(r,i);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isLDAP(String userName,String password){  return LDAP.validate(getLDAPHost(),getLDAPDomain(),userName,password);}  }
class C{  public XingApi removeAuthErrorCallback(AuthErrorCallback errorCallback){  authErrorCallbacks.remove(errorCallback);  return this;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  LookMyPrivateDao.createTable(db,ifNotExists);}  }
class C{  final public SyntaxTreeNode ClosedExpressionOnly() throws ParseException {  SyntaxTreeNode tn;  tn=ClosedExpressionOrOp();  if (isGenOp(tn)) {    if (true)     throw new ParseException("Encountered unexpected Operator");  } else {    if (true)     return tn;  }  throw new Error("Missing return statement in function");}  }
class C{  public static SolrInputDocument buildRandomDocument(int id){  SolrInputDocument doc=sdoc("id",id);  if (useField()) {    doc.addField("int",skewed(random().nextInt(),TestUtil.nextInt(random(),20,50)));  }  if (useField()) {    doc.addField("long",skewed(random().nextLong(),TestUtil.nextInt(random(),5000,5100)));  }  if (useField()) {    doc.addField("float",skewed(random().nextFloat() * random().nextInt(),1.0F / random().nextInt(23)));  }  if (useField()) {    doc.addField("double",skewed(random().nextDouble() * random().nextInt(),1.0D / random().nextInt(37)));  }  if (useField()) {    doc.addField("str",skewed(randomXmlUsableUnicodeString(),TestUtil.randomSimpleString(random(),1,1)));  }  if (useField()) {    int numBytes=(Integer)skewed(TestUtil.nextInt(random(),20,50),2);    byte[] randBytes=new byte[numBytes];    random().nextBytes(randBytes);    doc.addField("bin",ByteBuffer.wrap(randBytes));  }  if (useField()) {    doc.addField("date",skewed(randomDate(),randomSkewedDate()));  }  if (useField()) {    doc.addField("uuid",UUID.randomUUID().toString());  }  if (useField()) {    doc.addField("currency",skewed("" + (random().nextInt() / 100.) + ","+ randomCurrency(),"" + TestUtil.nextInt(random(),250,320) + ",USD"));  }  if (useField()) {    doc.addField("bool",random().nextBoolean() ? "t" : "f");  }  if (useField()) {    doc.addField("enum",randomEnumValue());  }  return doc;}  }
class C{  public static long spooky4(final BitVector bv,final long prefixLength,final long seed,final long[] state){  long h0, h1, h2, h3;  h0=seed;  h1=seed;  h2=ARBITRARY_BITS;  h3=ARBITRARY_BITS;  long pos;  if (prefixLength >= 2 * Long.SIZE) {    final int p=4 * (int)((prefixLength - 2 * Long.SIZE) / (4 * Long.SIZE));    h0=state[p + 0];    h1=state[p + 1];    h2=state[p + 2];    h3=state[p + 3];    pos=p * Long.SIZE + 2 * Long.SIZE;  } else   pos=0;  long remaining=prefixLength - pos;  if (remaining >= Long.SIZE * 2) {    h0+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);    h1+=bv.getLong(pos + 1 * Long.SIZE,pos + 2 * Long.SIZE);    remaining-=2 * Long.SIZE;    pos+=2 * Long.SIZE;  }  if (remaining > Long.SIZE) {    h2+=bv.getLong(pos + 0 * Long.SIZE,pos + 1 * Long.SIZE);    h3+=bv.getLong(pos + 1 * Long.SIZE,prefixLength);  } else   if (remaining > 0) {    h2+=bv.getLong(pos,prefixLength);  } else {    h2+=ARBITRARY_BITS;    h3+=ARBITRARY_BITS;  }  h0+=prefixLength;  h3^=h2;  h2=Long.rotateLeft(h2,15);  h3+=h2;  h0^=h3;  h3=Long.rotateLeft(h3,52);  h0+=h3;  h1^=h0;  h0=Long.rotateLeft(h0,26);  h1+=h0;  h2^=h1;  h1=Long.rotateLeft(h1,51);  h2+=h1;  h3^=h2;  h2=Long.rotateLeft(h2,28);  h3+=h2;  h0^=h3;  h3=Long.rotateLeft(h3,9);  h0+=h3;  h1^=h0;  h0=Long.rotateLeft(h0,47);  h1+=h0;  h2^=h1;  h1=Long.rotateLeft(h1,54);  h2+=h1;  h3^=h2;  h2=Long.rotateLeft(h2,32);  h3+=h2;  h0^=h3;  h3=Long.rotateLeft(h3,25);  h0+=h3;  h1^=h0;  h0=Long.rotateLeft(h0,63);  h1+=h0;  return h0;}  }
class C{  public boolean retainEntries(TIntObjectProcedure<V> procedure){  boolean modified=false;  int[] keys=_set;  V[] values=_values;  stopCompactingOnRemove();  try {    for (int i=keys.length; i-- > 0; ) {      if (isFull(values,i) && !procedure.execute(keys[i],unwrapNull(values[i]))) {        removeAt(i);        modified=true;      }    }  }  finally {    startCompactingOnRemove(modified);  }  return modified;}  }
class C{  public String toString(){  return " world(" + world.x + ","+ world.y+ ")"+ super.toString();}  }
class C{  public void visitTryCatchBlock(Label start,Label end,Label handler,String type){  if (mv != null) {    mv.visitTryCatchBlock(start,end,handler,type);  }}  }
class C{  public boolean isReadWrite(){  Object oo=get_Value(COLUMNNAME_IsReadWrite);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected int insertKey(T key){  consumeFreeSlot=false;  if (key == null)   return insertKeyForNull();  final int hash=hash(key) & 0x7fffffff;  int index=hash % _set.length;  Object cur=_set[index];  if (cur == FREE) {    consumeFreeSlot=true;    _set[index]=key;    return index;  }  if (cur == key || equals(key,cur)) {    return -index - 1;  }  return insertKeyRehash(key,index,hash,cur);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void appendPhoneticNameFields(final ContentValues contentValues){  final String phoneticFamilyName;  final String phoneticMiddleName;  final String phoneticGivenName;{    final String tmpPhoneticFamilyName=contentValues.getAsString(StructuredName.PHONETIC_FAMILY_NAME);    final String tmpPhoneticMiddleName=contentValues.getAsString(StructuredName.PHONETIC_MIDDLE_NAME);    final String tmpPhoneticGivenName=contentValues.getAsString(StructuredName.PHONETIC_GIVEN_NAME);    if (mNeedsToConvertPhoneticString) {      phoneticFamilyName=VCardUtils.toHalfWidthString(tmpPhoneticFamilyName);      phoneticMiddleName=VCardUtils.toHalfWidthString(tmpPhoneticMiddleName);      phoneticGivenName=VCardUtils.toHalfWidthString(tmpPhoneticGivenName);    } else {      phoneticFamilyName=tmpPhoneticFamilyName;      phoneticMiddleName=tmpPhoneticMiddleName;      phoneticGivenName=tmpPhoneticGivenName;    }  }  if (TextUtils.isEmpty(phoneticFamilyName) && TextUtils.isEmpty(phoneticMiddleName) && TextUtils.isEmpty(phoneticGivenName)) {    if (mIsDoCoMo) {      mBuilder.append(VCardConstants.PROPERTY_SOUND);      mBuilder.append(VCARD_PARAM_SEPARATOR);      mBuilder.append(VCardConstants.PARAM_TYPE_X_IRMC_N);      mBuilder.append(VCARD_DATA_SEPARATOR);      mBuilder.append(VCARD_ITEM_SEPARATOR);      mBuilder.append(VCARD_ITEM_SEPARATOR);      mBuilder.append(VCARD_ITEM_SEPARATOR);      mBuilder.append(VCARD_ITEM_SEPARATOR);      mBuilder.append(VCARD_END_OF_LINE);    }    return;  }  if (VCardConfig.isVersion40(mVCardType)) {  } else   if (VCardConfig.isVersion30(mVCardType)) {    final String sortString=VCardUtils.constructNameFromElements(mVCardType,phoneticFamilyName,phoneticMiddleName,phoneticGivenName);    mBuilder.append(VCardConstants.PROPERTY_SORT_STRING);    if (VCardConfig.isVersion30(mVCardType) && shouldAppendCharsetParam(sortString)) {      mBuilder.append(VCARD_PARAM_SEPARATOR);      mBuilder.append(mVCardCharsetParameter);    }    mBuilder.append(VCARD_DATA_SEPARATOR);    mBuilder.append(escapeCharacters(sortString));    mBuilder.append(VCARD_END_OF_LINE);  } else   if (mIsJapaneseMobilePhone) {    mBuilder.append(VCardConstants.PROPERTY_SOUND);    mBuilder.append(VCARD_PARAM_SEPARATOR);    mBuilder.append(VCardConstants.PARAM_TYPE_X_IRMC_N);    boolean reallyUseQuotedPrintable=(!mRefrainsQPToNameProperties && !(VCardUtils.containsOnlyNonCrLfPrintableAscii(phoneticFamilyName) && VCardUtils.containsOnlyNonCrLfPrintableAscii(phoneticMiddleName) && VCardUtils.containsOnlyNonCrLfPrintableAscii(phoneticGivenName)));    final String encodedPhoneticFamilyName;    final String encodedPhoneticMiddleName;    final String encodedPhoneticGivenName;    if (reallyUseQuotedPrintable) {      encodedPhoneticFamilyName=encodeQuotedPrintable(phoneticFamilyName);      encodedPhoneticMiddleName=encodeQuotedPrintable(phoneticMiddleName);      encodedPhoneticGivenName=encodeQuotedPrintable(phoneticGivenName);    } else {      encodedPhoneticFamilyName=escapeCharacters(phoneticFamilyName);      encodedPhoneticMiddleName=escapeCharacters(phoneticMiddleName);      encodedPhoneticGivenName=escapeCharacters(phoneticGivenName);    }    if (shouldAppendCharsetParam(encodedPhoneticFamilyName,encodedPhoneticMiddleName,encodedPhoneticGivenName)) {      mBuilder.append(VCARD_PARAM_SEPARATOR);      mBuilder.append(mVCardCharsetParameter);    }    mBuilder.append(VCARD_DATA_SEPARATOR);{      boolean first=true;      if (!TextUtils.isEmpty(encodedPhoneticFamilyName)) {        mBuilder.append(encodedPhoneticFamilyName);        first=false;      }      if (!TextUtils.isEmpty(encodedPhoneticMiddleName)) {        if (first) {          first=false;        } else {          mBuilder.append(' ');        }        mBuilder.append(encodedPhoneticMiddleName);      }      if (!TextUtils.isEmpty(encodedPhoneticGivenName)) {        if (!first) {          mBuilder.append(' ');        }        mBuilder.append(encodedPhoneticGivenName);      }    }    mBuilder.append(VCARD_ITEM_SEPARATOR);    mBuilder.append(VCARD_ITEM_SEPARATOR);    mBuilder.append(VCARD_ITEM_SEPARATOR);    mBuilder.append(VCARD_ITEM_SEPARATOR);    mBuilder.append(VCARD_END_OF_LINE);  }  if (mUsesDefactProperty) {    if (!TextUtils.isEmpty(phoneticGivenName)) {      final boolean reallyUseQuotedPrintable=(mShouldUseQuotedPrintable && !VCardUtils.containsOnlyNonCrLfPrintableAscii(phoneticGivenName));      final String encodedPhoneticGivenName;      if (reallyUseQuotedPrintable) {        encodedPhoneticGivenName=encodeQuotedPrintable(phoneticGivenName);      } else {        encodedPhoneticGivenName=escapeCharacters(phoneticGivenName);      }      mBuilder.append(VCardConstants.PROPERTY_X_PHONETIC_FIRST_NAME);      if (shouldAppendCharsetParam(phoneticGivenName)) {        mBuilder.append(VCARD_PARAM_SEPARATOR);        mBuilder.append(mVCardCharsetParameter);      }      if (reallyUseQuotedPrintable) {        mBuilder.append(VCARD_PARAM_SEPARATOR);        mBuilder.append(VCARD_PARAM_ENCODING_QP);      }      mBuilder.append(VCARD_DATA_SEPARATOR);      mBuilder.append(encodedPhoneticGivenName);      mBuilder.append(VCARD_END_OF_LINE);    }    if (!TextUtils.isEmpty(phoneticMiddleName)) {      final boolean reallyUseQuotedPrintable=(mShouldUseQuotedPrintable && !VCardUtils.containsOnlyNonCrLfPrintableAscii(phoneticMiddleName));      final String encodedPhoneticMiddleName;      if (reallyUseQuotedPrintable) {        encodedPhoneticMiddleName=encodeQuotedPrintable(phoneticMiddleName);      } else {        encodedPhoneticMiddleName=escapeCharacters(phoneticMiddleName);      }      mBuilder.append(VCardConstants.PROPERTY_X_PHONETIC_MIDDLE_NAME);      if (shouldAppendCharsetParam(phoneticMiddleName)) {        mBuilder.append(VCARD_PARAM_SEPARATOR);        mBuilder.append(mVCardCharsetParameter);      }      if (reallyUseQuotedPrintable) {        mBuilder.append(VCARD_PARAM_SEPARATOR);        mBuilder.append(VCARD_PARAM_ENCODING_QP);      }      mBuilder.append(VCARD_DATA_SEPARATOR);      mBuilder.append(encodedPhoneticMiddleName);      mBuilder.append(VCARD_END_OF_LINE);    }    if (!TextUtils.isEmpty(phoneticFamilyName)) {      final boolean reallyUseQuotedPrintable=(mShouldUseQuotedPrintable && !VCardUtils.containsOnlyNonCrLfPrintableAscii(phoneticFamilyName));      final String encodedPhoneticFamilyName;      if (reallyUseQuotedPrintable) {        encodedPhoneticFamilyName=encodeQuotedPrintable(phoneticFamilyName);      } else {        encodedPhoneticFamilyName=escapeCharacters(phoneticFamilyName);      }      mBuilder.append(VCardConstants.PROPERTY_X_PHONETIC_LAST_NAME);      if (shouldAppendCharsetParam(phoneticFamilyName)) {        mBuilder.append(VCARD_PARAM_SEPARATOR);        mBuilder.append(mVCardCharsetParameter);      }      if (reallyUseQuotedPrintable) {        mBuilder.append(VCARD_PARAM_SEPARATOR);        mBuilder.append(VCARD_PARAM_ENCODING_QP);      }      mBuilder.append(VCARD_DATA_SEPARATOR);      mBuilder.append(encodedPhoneticFamilyName);      mBuilder.append(VCARD_END_OF_LINE);    }  }}  }
class C{  public static int toIPv4Address(byte[] ipAddress){  int ip=0;  for (int i=0; i < 4; i++) {    int t=(ipAddress[i] & 0xff) << ((3 - i) * 8);    ip|=t;  }  return ip;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:48.056 -0500",hash_original_method="745916B1AE6188C8022A7E21DA1360C3",hash_generated_method="0BCFE0C51BC238C65CB386EEA59890A5") public NdefMessage(byte[] data) throws FormatException {  mRecords=null;  if (parseNdefMessage(data) == -1) {    throw new FormatException("Error while parsing NDEF message");  }}  }
class C{  @Override protected void initVars(Instances data){  super.initVars(data);  try {    if (m_KernelMatrix == null) {      m_KernelMatrix=new Matrix(new FileReader(m_KernelMatrixFile));    }  } catch (  Exception e) {    System.err.println("Problem reading matrix from " + m_KernelMatrixFile);  }  m_Counter++;}  }
class C{  private static LatLon computeLatLonFromString(String coordString,Globe globe){  if (coordString == null) {    String msg=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Angle lat=null;  Angle lon=null;  coordString=coordString.trim();  String regex;  String separators="(\\s*|,|,\\s*)";  Pattern pattern;  Matcher matcher;  regex="\\d{1,2}[A-Za-z]\\s*[A-Za-z]{2}\\s*\\d{1,5}\\s*\\d{1,5}";  if (coordString.matches(regex)) {    try {      MGRSCoord MGRS=MGRSCoord.fromString(coordString,globe);      if (MGRS.getLatitude().degrees != 0 || MGRS.getLatitude().degrees != 0) {        lat=MGRS.getLatitude();        lon=MGRS.getLongitude();      } else       return null;    } catch (    IllegalArgumentException e) {      return null;    }  }  if (lat == null || lon == null) {    regex="([-|\\+]?\\d+?(\\.\\d+?)??\\s*[N|n|S|s]??)";    regex+=separators;    regex+="([-|\\+]?\\d+?(\\.\\d+?)??\\s*[E|e|W|w]??)";    pattern=Pattern.compile(regex);    matcher=pattern.matcher(coordString);    if (matcher.matches()) {      String sLat=matcher.group(1).trim();      int signLat=1;      char suffix=sLat.toUpperCase().charAt(sLat.length() - 1);      if (!Character.isDigit(suffix)) {        signLat=suffix == 'N' ? 1 : -1;        sLat=sLat.substring(0,sLat.length() - 1);        sLat=sLat.trim();      }      String sLon=matcher.group(4).trim();      int signLon=1;      suffix=sLon.toUpperCase().charAt(sLon.length() - 1);      if (!Character.isDigit(suffix)) {        signLon=suffix == 'E' ? 1 : -1;        sLon=sLon.substring(0,sLon.length() - 1);        sLon=sLon.trim();      }      lat=Angle.fromDegrees(Double.parseDouble(sLat) * signLat);      lon=Angle.fromDegrees(Double.parseDouble(sLon) * signLon);    }  }  if (lat == null || lon == null) {    regex="([-|\\+]?\\d{1,3}[d|D|\u00B0|\\s](\\s*\\d{1,2}['|\u2019|\\s])?(\\s*\\d{1,2}[\"|\u201d])?\\s*[N|n|S|s]?)";    regex+=separators;    regex+="([-|\\+]?\\d{1,3}[d|D|\u00B0|\\s](\\s*\\d{1,2}['|\u2019|\\s])?(\\s*\\d{1,2}[\"|\u201d])?\\s*[E|e|W|w]?)";    pattern=Pattern.compile(regex);    matcher=pattern.matcher(coordString);    if (matcher.matches()) {      lat=parseDMSString(matcher.group(1));      lon=parseDMSString(matcher.group(5));    }  }  if (lat == null || lon == null)   return null;  if (lat.degrees >= -90 && lat.degrees <= 90 && lon.degrees >= -180 && lon.degrees <= 180)   return new LatLon(lat,lon);  return null;}  }
class C{  public List findUserByName(String username){  return new ArrayList();}  }
class C{  public void kickOffEnumerationWorkFlows(EnumerationContext context,AWSEnumerationStages next){  AWSEnumerationRequest awsEnumerationRequest=new AWSEnumerationRequest(context.computeEnumerationRequest,context.parentAuth,context.parentCompute);  Operation patchAWSCreationAdapterService=Operation.createPatch(this,AWSEnumerationAndCreationAdapterService.SELF_LINK).setBody(awsEnumerationRequest).setReferer(this.getHost().getUri());  Operation patchAWSDeletionAdapterService=Operation.createPatch(this,AWSEnumerationAndDeletionAdapterService.SELF_LINK).setBody(awsEnumerationRequest).setReferer(getHost().getUri());  Operation patchAWSStorageAdapterService=Operation.createPatch(this,AWSBlockStorageEnumerationAdapterService.SELF_LINK).setBody(awsEnumerationRequest).setReferer(getHost().getUri());  context.enumerationOperations.add(patchAWSCreationAdapterService);  context.enumerationOperations.add(patchAWSDeletionAdapterService);  context.enumerationOperations.add(patchAWSStorageAdapterService);  if (context.enumerationOperations == null || context.enumerationOperations.size() == 0) {    logInfo("There are no enumeration tasks to run.");    context.stage=next;    handleEnumerationRequest(context);    return;  }  OperationJoin.JoinedCompletionHandler joinCompletion=null;  OperationJoin joinOp=OperationJoin.create(context.enumerationOperations);  joinOp.setCompletion(joinCompletion);  joinOp.sendWith(getHost());  logInfo("Kicked off enumeration creation,deletion and storage workflows for AWS");}  }
class C{  public boolean isFulfilled(Collection<Plugin> plugins){  Iterator<Plugin> i=plugins.iterator();  while (i.hasNext()) {    Plugin plugin=i.next();    if (plugin.getExtensionId().equals(this.extensionId) && ManagedExtension.normalizeVersion(plugin.getVersion()).compareTo(ManagedExtension.normalizeVersion(this.version)) >= 0) {      return true;    }  }  return false;}  }
class C{  public void endDrawing(GL10 gl){  checkState(STATE_DRAWING,STATE_INITIALIZED);  gl.glDisable(GL10.GL_BLEND);  gl.glMatrixMode(GL10.GL_PROJECTION);  gl.glPopMatrix();  gl.glMatrixMode(GL10.GL_MODELVIEW);  gl.glPopMatrix();}  }
class C{  @Override public void checkProfile(){  log("Checking messages.",Level.FINE);  checkDirectMessages();  log("Done checking messages.",Level.FINE);}  }
class C{  public JToolTip createToolTip(){  JToolTip tip=new JToolTip();  tip.setComponent(this);  return tip;}  }
class C{  public int verifyHostkey(String hostname,String serverHostKeyAlgorithm,byte[] serverHostKey) throws IOException {  Object remoteKey=null;  if ("ssh-rsa".equals(serverHostKeyAlgorithm)) {    remoteKey=RSASHA1Verify.decodeSSHRSAPublicKey(serverHostKey);  } else   if ("ssh-dss".equals(serverHostKeyAlgorithm)) {    remoteKey=DSASHA1Verify.decodeSSHDSAPublicKey(serverHostKey);  } else   throw new IllegalArgumentException("Unknown hostkey type " + serverHostKeyAlgorithm);  int result=checkKey(hostname,remoteKey);  if (result == HOSTKEY_IS_OK)   return result;  InetAddress[] ipAdresses=null;  try {    ipAdresses=InetAddress.getAllByName(hostname);  } catch (  UnknownHostException e) {    return result;  }  for (int i=0; i < ipAdresses.length; i++) {    int newresult=checkKey(ipAdresses[i].getHostAddress(),remoteKey);    if (newresult == HOSTKEY_IS_OK)     return newresult;    if (newresult == HOSTKEY_HAS_CHANGED)     result=HOSTKEY_HAS_CHANGED;  }  return result;}  }
class C{  public MainControllerPanel(Frame frame){  super(frame);  try {    setMenu(new MainPanelMenu(this));    setSelected(true);    title=ConfigProperties.getPropAsString("component.name.base");    version=ConfigProperties.getPropAsString("component.name.version");    date=ConfigProperties.getPropAsString("component.name.date");  } catch (  Exception e) {    this.setErrorMessage("Error During Initialization.",e.getMessage(),e);  }}  }
class C{  protected void addDataset(){  int retVal;  retVal=m_FileChooserDatasets.showOpenDialog(this);  if (retVal != ConverterFileChooser.APPROVE_OPTION)   return;  m_ModelDatasets.addElement(m_FileChooserDatasets.getSelectedFile().getAbsolutePath());  m_Modified=true;  updateButtons();}  }
class C{  public static String toString(int v[]){  StringBuilder sb=new StringBuilder("[ ");  for (int k=0; k < v.length; k++) {    sb.append((int)v[k]);    sb.append(" ");  }  sb.append("]");  return sb.toString();}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  public CSVTableReader(){  super();}  }
class C{  private JSONWriter append(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null pointer");  }  if (this.mode == 'o' || this.mode == 'a') {    try {      if (this.comma && this.mode == 'a') {        this.writer.write(',');      }      this.writer.write(string);    } catch (    IOException e) {      throw new JSONException(e);    }    if (this.mode == 'o') {      this.mode='k';    }    this.comma=true;    return this;  }  throw new JSONException("Value out of sequence.");}  }
class C{  public void paint(Graphics g,int x,int y){  g.translate(x,y);  if (!paint(g) && paintLoading) {    paintTileLoading(g);  }  g.translate(-x,-y);}  }
class C{  public boolean checkSetOptions(){  boolean result;  print("SetOptions...");  try {    getDefaultHandler().setOptions(getUserOptions());    println("yes");    result=true;  } catch (  Exception e) {    println("no");    result=false;    if (getDebug()) {      println(e);    }  }  return result;}  }
class C{  public void mapAddress(View view){  Animatable mAnimatable;  if (mIsEditTextVisible) {    UiUtils.hideEditText(mEditTextReveal);    mIsEditTextVisible=false;    mAddButton.setImageResource(R.drawable.icon_morph_reverse);    mAnimatable=(Animatable)(mAddButton).getDrawable();    mAnimatable.start();    startMap();  } else {    UiUtils.revealEditText(mEditTextReveal);    mIsEditTextVisible=true;    mEditTextReveal.requestFocus();    mAddButton.setImageResource(R.drawable.icon_morph);    mAnimatable=(Animatable)(mAddButton).getDrawable();    mAnimatable.start();  }}  }
class C{  protected void removeExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  TipoDocumentoVitalForm frm=(TipoDocumentoVitalForm)form;  TipoDocumentoVitalVO tipo=(TipoDocumentoVitalVO)getFromTemporalSession(request,DocumentosVitalesConstants.TIPO_DOCUMENTO_VITAL_KEY);  try {    getGestionDocumentosVitalesBI(request).deleteTipoDocumentoVital(frm.getId());    goBackExecuteLogic(mapping,form,request,response);  } catch (  TipoDocumentoVitalEnUsoException e) {    obtenerErrores(request,true).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(DocumentosVitalesConstants.ERRORS_DOCVITALES_DELETE_TIPODOCVITAL_EN_USO,tipo.getNombre()));    goLastClientExecuteLogic(mapping,form,request,response);  }}  }
class C{  @Deprecated public static InputStream openContactPhotoInputStream(ContentResolver cr,Uri person){  Uri photoUri=Uri.withAppendedPath(person,Contacts.Photos.CONTENT_DIRECTORY);  Cursor cursor=cr.query(photoUri,new String[]{Photos.DATA},null,null,null);  try {    if (cursor == null || !cursor.moveToNext()) {      return null;    }    byte[] data=cursor.getBlob(0);    if (data == null) {      return null;    }    return new ByteArrayInputStream(data);  }  finally {    if (cursor != null)     cursor.close();  }}  }
class C{  public void testMapToString(){  resetEmpty();  assertTrue("Empty map toString() should not return null",map.toString() != null);  verify();  resetFull();  assertTrue("Empty map toString() should not return null",map.toString() != null);  verify();}  }
class C{  public Vector3i sub(Vector3i v){  x-=v.x;  y-=v.y;  z-=v.z;  return this;}  }
class C{  private void removeTransaction(CompositeTransaction ct){  if (ct == null)   return;  tidToTransactionMap_.remove(ct.getTid().intern());}  }
class C{  public ConfigurationDBAdapter configure(File configFile) throws RuntimeException {  if (log.isDebugEnabled()) {    log.debug("configuring from file: " + configFile.getName());  }  try {    ConfigurationDBAdapterParser.doConfigure(this,new FileInputStream(configFile),configFile.toString());  } catch (  FileNotFoundException fnfe) {    throw new RuntimeException("could not find file: " + configFile,fnfe);  }  return this;}  }
class C{  private String normalizeUrl(String url){  if (!normalize) {    return url;  }  String normalized=null;  if (urlNormalizers != null) {    try {      normalized=urlNormalizers.normalize(url,URLNormalizers.SCOPE_DEFAULT);      normalized=normalized.trim();    } catch (    Exception e) {      LOG.warn("Skipping " + url + ":"+ e);      normalized=null;    }  }  return normalized;}  }
class C{  public boolean isSelected(){  return selected;}  }
class C{  public CompressionResponseStream(CompressionServletResponseWrapper responseWrapper,ServletOutputStream originalOutput){  super();  closed=false;  this.response=responseWrapper;  this.output=originalOutput;}  }
class C{  public static ResourceLoader createMavenArtifactLoader(final String name) throws IOException {  return createMavenArtifactLoader(MavenResolver.createDefaultResolver(),name);}  }
class C{  public InvalidSearchControlsException(String msg){  super(msg);}  }
class C{  public <B>Set<B> map(Function<? super A,? extends B> fn){  Set<B> result=empty();  for (  A a : this) {    result=result.plus(fn.apply(a));  }  return result;}  }
class C{  public void incrementCount(){  this.count++;}  }
class C{  public final void testGetPolicyTree02() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  PKIXCertPathValidatorResult vr=new PKIXCertPathValidatorResult(ta,null,testPublicKey);  assertNull(vr.getPolicyTree());}  }
class C{  public static double charge(ItemStack itemStack,double amount){  if (itemStack != null) {    if (itemStack.getItem() instanceof IEnergizedItem) {      IEnergizedItem energizedItem=(IEnergizedItem)itemStack.getItem();      if (energizedItem.canReceive(itemStack)) {        double energyToSend=Math.min(energizedItem.getMaxTransfer(itemStack),Math.min(energizedItem.getMaxEnergy(itemStack) - energizedItem.getEnergy(itemStack),amount));        energizedItem.setEnergy(itemStack,energizedItem.getEnergy(itemStack) + energyToSend);        return energyToSend;      }    }  }  return 0;}  }
class C{  @Deprecated @SuppressWarnings("deprecation") public void addEventListener(AbstractPeerEventListener listener,Executor executor){  addBlocksDownloadedEventListener(Threading.USER_THREAD,listener);  addChainDownloadStartedEventListener(Threading.USER_THREAD,listener);  addConnectedEventListener(Threading.USER_THREAD,listener);  addDisconnectedEventListener(Threading.USER_THREAD,listener);  addDiscoveredEventListener(Threading.USER_THREAD,listener);  addGetDataEventListener(Threading.USER_THREAD,listener);  addOnTransactionBroadcastListener(Threading.USER_THREAD,listener);  addPreMessageReceivedEventListener(Threading.USER_THREAD,listener);}  }
class C{  public List<FacetResult> runSearch() throws IOException {  index();  return search();}  }
class C{  private void analize(){  fldid=Integer.parseInt(tokenizer.nextToken());  tokenizer.nextToken();  String nextToken=tokenizer.nextToken();  StringTokenizer tokenizer2=new StringTokenizer(nextToken,",");  vldtype=Integer.parseInt(tokenizer2.nextToken());  id1=Integer.parseInt(tokenizer2.nextToken());}  }
class C{  public static void stopTrace(String operation){  Long start=sTraceMap.remove(operation);  if (start != null) {    long end=System.currentTimeMillis();    long interval=end - start;    Log.v(TAG_DEBUG,operation + " use time: " + interval+ "ms");  }}  }
class C{  public void validate(byte[] buffer,int rowOffset,int rowHead,int blobTail){  for (  Column column : columns()) {    column.validate(buffer,rowOffset,rowHead,blobTail);  }}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public boolean hasDurableClient(String durableId){  for (Iterator iter=this._clientProxies.values().iterator(); iter.hasNext(); ) {    CacheClientProxy proxy=(CacheClientProxy)iter.next();    ClientProxyMembershipID proxyID=proxy.getProxyID();    if (durableId.equals(proxyID.getDurableId())) {      return true;    }  }  return false;}  }
class C{  public IntervalXYDelegate(XYDataset dataset){  this(dataset,true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeissupported05.class,args);}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  protected int index(int slice,int row,int column){  return sliceZero + slice * sliceStride + rowZero + row * rowStride + columnZero + column * columnStride;}  }
class C{  public void dup2X1(){  mv.visitInsn(Opcodes.DUP2_X1);}  }
class C{  public IntegerConverter(Object defaultValue){  super(false,defaultValue);}  }
class C{  public ReadWriteMultipleResponse(InputRegister[] registers){  super();  setFunctionCode(Modbus.READ_WRITE_MULTIPLE);  setDataLength(registers.length * 2 + 1);  this.registers=registers;  byteCount=registers.length * 2;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (graph == null) {    throw new NullPointerException();  }}  }
class C{  public static String exists(EventType type,String fieldNameOne,String fieldNameTwo){  Class clazz=getClass(type,fieldNameOne);  if (clazz == null) {    return "Parent view does not contain a field named '" + fieldNameOne + '\'';  }  clazz=getClass(type,fieldNameTwo);  if (clazz == null) {    return "Parent view does not contain a field named '" + fieldNameTwo + '\'';  }  return null;}  }
class C{  public static void populateMenu(AbstractExplorerTab tab,ResultHistoryList history,int index,JPopupMenu menu){  AbstractResultHistoryPlugin.populateMenu(tab,getPlugins(),history,index,menu);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_DURING___TRACE_DURATION_1:    return getTrace_duration_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public EventReplayer filter(Predicate<Event> predicate){  return new EventReplayer(events,orderedStreamer,Optional.of(predicate));}  }
class C{  public boolean isSetSubject(){  return this.subject != null;}  }
class C{  public synchronized void clear(){  columns=new Column[0];  rows.clear();}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final ECEFPoint pt=(ECEFPoint)obj;  return (MoreMath.approximately_equal(x_,pt.x_,EQUIVALENT_TOLERANCE) && MoreMath.approximately_equal(y_,pt.y_,EQUIVALENT_TOLERANCE) && MoreMath.approximately_equal(z_,pt.z_,EQUIVALENT_TOLERANCE));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Warrant createNewWarrant(String systemName,String userName,boolean SCWa,long TTP){  log.debug("createNewWarrant " + systemName + " SCWa="+ SCWa);  Warrant r;  if (userName != null && userName.trim().length() > 0) {    r=getByUserName(userName);    if (r == null) {      r=getBySystemName(systemName);    }    if (r != null) {      log.warn("Warrant " + r.getDisplayName() + "  exits.");      return null;    }  }  String sName=systemName.trim().toUpperCase();  if ((sName.compareTo(systemName) != 0) || !sName.startsWith("IW") || sName.length() < 3) {    log.error("Warrant system name \"" + systemName + "\" must be upper case  begining with \"IW\".");    return null;  }  if (SCWa) {    r=new SCWarrant(sName,userName,TTP);  } else {    r=new Warrant(sName,userName);  }  register(r);  return r;}  }
class C{  public boolean isGreen2Yellow(){  return green2Yellow;}  }
class C{  public void printElementStart(char[] name,List attributes,char[] space) throws IOException {  xmlSpace.add(0,xmlSpace.get(0));  startingLines.add(0,new Integer(line));  if (prettyPrinter.getFormat()) {    if (canIndent) {      printNewline();      printString(margin.toString());    }  }  printCharacter('<');  printCharacters(name);  if (prettyPrinter.getFormat()) {    Iterator it=attributes.iterator();    if (it.hasNext()) {      AttributeInfo ai=(AttributeInfo)it.next();      if (ai.isAttribute("xml:space")) {        xmlSpace.set(0,(ai.value.equals("preserve") ? Boolean.TRUE : Boolean.FALSE));      }      printCharacter(' ');      printCharacters(ai.name);      printCharacter('=');      printCharacter(ai.delimiter);      printString(ai.value);      printCharacter(ai.delimiter);    }    while (it.hasNext()) {      AttributeInfo ai=(AttributeInfo)it.next();      if (ai.isAttribute("xml:space")) {        xmlSpace.set(0,(ai.value.equals("preserve") ? Boolean.TRUE : Boolean.FALSE));      }      int len=ai.name.length + ai.value.length() + 4;      if (lineAttributes || len + column > prettyPrinter.getDocumentWidth()) {        printNewline();        printString(margin.toString());        for (int i=0; i < name.length + 2; i++) {          printCharacter(' ');        }      } else {        printCharacter(' ');      }      printCharacters(ai.name);      printCharacter('=');      printCharacter(ai.delimiter);      printString(ai.value);      printCharacter(ai.delimiter);    }  } else {    Iterator it=attributes.iterator();    while (it.hasNext()) {      AttributeInfo ai=(AttributeInfo)it.next();      if (ai.isAttribute("xml:space")) {        xmlSpace.set(0,(ai.value.equals("preserve") ? Boolean.TRUE : Boolean.FALSE));      }      printSpaces(ai.space,false);      printCharacters(ai.name);      if (ai.space1 != null) {        printSpaces(ai.space1,true);      }      printCharacter('=');      if (ai.space2 != null) {        printSpaces(ai.space2,true);      }      printCharacter(ai.delimiter);      printString(ai.value);      printCharacter(ai.delimiter);    }  }  if (space != null) {    printSpaces(space,true);  }  level++;  for (int i=0; i < prettyPrinter.getTabulationWidth(); i++) {    margin.append(' ');  }  canIndent=true;}  }
class C{  private void processCopyInstruction(ExecutionContext ec) throws DMLRuntimeException {  Data dd=ec.getVariable(input1.getName());  if (dd == null)   throw new DMLRuntimeException("Unexpected error: could not find a data object for variable name:" + input1.getName() + ", while processing instruction "+ this.toString());  Data input2_data=ec.removeVariable(input2.getName());  if (input2_data != null && input2_data instanceof MatrixObject) {    ec.cleanupMatrixObject((MatrixObject)input2_data);  }  ec.setVariable(input2.getName(),dd);}  }
class C{  public void updateUI(){  setUI((SpinnerUI)UIManager.getUI(this));  invalidate();}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  public ModbusTCPTransaction(TCPMasterConnection con){  setConnection(con);  transport=con.getModbusTransport();}  }
class C{  protected static int lookup(CharacterReference[] array,char ref,int lo,int hi){  int num;  int mid;  int half;  int result;  int ret;  ret=-1;  num=(hi - lo) + 1;  while ((-1 == ret) && (lo <= hi)) {    half=num / 2;    mid=lo + ((0 != (num & 1)) ? half : half - 1);    result=ref - array[mid].getCharacter();    if (0 == result)     ret=mid; else     if (0 > result) {      hi=mid - 1;      num=((0 != (num & 1)) ? half : half - 1);    } else {      lo=mid + 1;      num=half;    }  }  if (-1 == ret)   ret=lo;  return (ret);}  }
class C{  public SQLiteSession(SQLiteConnectionPool connectionPool){  if (connectionPool == null) {    throw new IllegalArgumentException("connectionPool must not be null");  }  mConnectionPool=connectionPool;}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMEllipseElement(prefix,(AbstractDocument)doc);}  }
class C{  public Wildcards withNwDstMask(int dstCidrMask){  int flags=Flag.NW_DST.setInt(this.flags,Math.max(0,32 - dstCidrMask));  if (flags == this.flags)   return this; else   return new Wildcards(flags);}  }
class C{  @SerializationIndex(2) public boolean isProxyToken(){  return _proxyToken;}  }
class C{  @Override public int countTreeNodes(){  return computeTreeNodes().size();}  }
class C{  public ThreadStatesMetricSet(ThreadMXBean threads,ThreadDeadlockDetector deadlockDetector){  this.threads=threads;  this.deadlockDetector=deadlockDetector;}  }
class C{  protected void drawOrderedRenderable(DrawContext dc){  if (this.currentPoints == null)   return;  this.beginDrawing(dc);  try {    this.doDrawOrderedRenderable(dc);  }  finally {    this.endDrawing(dc);  }}  }
class C{  private void fadeOut(){  this.animate().alpha(0f).setDuration(this.fadeTimeMs).start();}  }
class C{  protected IStructureComparator createChild(final IResource child,final ResourceFilter resourceFilter){  return new CustomResourceNode(child,resourceFilter);}  }
class C{  public synchronized void execute(Runnable task){  if (running) {    try {      taskPool.put(task);    } catch (    InterruptedException ex) {    }  }}  }
class C{  static void svd_opa(SMat A,double[] x,double[] y){  int[] pointr=A.pointr, rowind=A.rowind;  double[] value=A.value;  for (int i=0; i < A.rows; i++)   y[i]=0;  for (int i=0; i < A.cols; i++) {    int end=pointr[i + 1];    for (int j=pointr[i]; j < end; j++)     y[rowind[j]]+=value[j] * x[i];  }  return;}  }
class C{  @Override public void addWord(int word){  super.addWord(word);  edges.add(word);  updateVertices(word);}  }
class C{  protected void selectVerticalAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  Range range=getRange();  double logAxisMin=calculateLog(Math.max(this.smallestValue,range.getLowerBound()));  double logAxisMax=calculateLog(range.getUpperBound());  double size=(logAxisMax - logAxisMin) / 50;  TickUnitSource tickUnits=getStandardTickUnits();  TickUnit candidate=tickUnits.getCeilingTickUnit(size);  TickUnit prevCandidate=candidate;  boolean found=false;  while (!found) {    this.tickUnit=(NumberTickUnit)candidate;    double tickLabelHeight=estimateMaximumTickLabelHeight(g2);    double candidateHeight=exponentLengthToJava2D(candidate.getSize(),dataArea,edge);    if (tickLabelHeight < candidateHeight) {      found=true;    } else     if (Double.isNaN(candidateHeight)) {      candidate=prevCandidate;      found=true;    } else {      prevCandidate=candidate;      candidate=tickUnits.getLargerTickUnit(prevCandidate);      if (candidate.equals(prevCandidate)) {        found=true;      }    }  }  setTickUnit((NumberTickUnit)candidate,false,false);}  }
class C{  private static int checkPtypes(Class<?>[] ptypes){  int slots=0;  for (  Class<?> ptype : ptypes) {    checkPtype(ptype);    if (ptype == double.class || ptype == long.class) {      slots++;    }  }  checkSlotCount(ptypes.length + slots);  return slots;}  }
class C{  public boolean equals(Object p){  if (p instanceof PrincipalImpl || p instanceof NetMaskImpl) {    PrincipalImpl received=(PrincipalImpl)p;    InetAddress addr=received.getAddress();    if (SNMP_LOGGER.isLoggable(Level.FINEST)) {      SNMP_LOGGER.logp(Level.FINEST,NetMaskImpl.class.getName(),"equals","Received Address : " + addr);    }    byte[] recAddr=addr.getAddress();    for (int i=0; i < subnet.length; i++) {      if (SNMP_LOGGER.isLoggable(Level.FINEST)) {        SNMP_LOGGER.logp(Level.FINEST,NetMaskImpl.class.getName(),"equals","(recAddr[i]) : " + (recAddr[i] & 0xFF));        SNMP_LOGGER.logp(Level.FINEST,NetMaskImpl.class.getName(),"equals","(recAddr[i] & subnet[i]) : " + ((recAddr[i] & (int)subnet[i]) & 0xFF) + " subnet[i] : "+ (subnet[i] & 0xFF));      }      if ((recAddr[i] & subnet[i]) != subnet[i]) {        if (SNMP_LOGGER.isLoggable(Level.FINEST)) {          SNMP_LOGGER.logp(Level.FINEST,NetMaskImpl.class.getName(),"equals","FALSE");        }        return false;      }    }    if (SNMP_LOGGER.isLoggable(Level.FINEST)) {      SNMP_LOGGER.logp(Level.FINEST,NetMaskImpl.class.getName(),"equals","TRUE");    }    return true;  } else   return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.454 -0500",hash_original_method="FA67D7760B995854EEA852AD4B17EA85",hash_generated_method="EFBC73C8AAB088A9FB92BE8F4CD8B42C") public TelephoneNumber parseTelephoneNumber(String telephone_number) throws ParseException {  return new URLParser(telephone_number).parseTelephoneNumber(true);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (is_ValueChanged("DueAmt")) {    log.fine("afterSave");    getParent();    m_parent.validatePaySchedule();    m_parent.saveEx();  }  return success;}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3));}  }
class C{  public static RotateBitmapResult rotateBitmapByExif(Bitmap bitmap,Context context,Uri uri){  try {    File file=getFileFromUri(context,uri);    if (file.exists()) {      ExifInterface ei=new ExifInterface(file.getAbsolutePath());      return rotateBitmapByExif(bitmap,ei);    }  } catch (  Exception ignored) {  }  return new RotateBitmapResult(bitmap,0);}  }
class C{  public String archiveAddress(String address) throws APIException, IOException {  Map<String,String> params=buildBasicRequest();  params.put("address",address);  String response=HttpClient.getInstance().post(String.format("merchant/%s/archive_address",identifier),params);  JsonObject topElem=parseResponse(response);  return topElem.get("archived").getAsString();}  }
class C{  private void internalInit(String logfile) throws Exception {  logger=Category.getInstance(this.getClass().getName());  logger.setAdditivity(false);  logger.setPriority(Priority.DEBUG);  RollingFileAppender appender=new RollingFileAppender(new PatternLayout("%d - %m%n"),logfile,true);  appender.setMaxBackupIndex(1);  appender.setMaximumFileSize(100000);  logger.addAppender(appender);}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  public static Vector3D reciprocal(Vector3D vec){  return new Vector3D(1 / vec.getX(),1 / vec.getY(),1 / vec.getZ());}  }
class C{  private void addCallback(BeanMessageID type,Callback<?> callback){  List<Callback<?>> callbacks=beanCallbacks.get(type);  if (callbacks == null) {    callbacks=new ArrayList<>(16);    beanCallbacks.put(type,callbacks);  }  callbacks.add(callback);}  }
class C{  public ProxyGeneratorAdapter(final Map<Object,Object> closureMap,final Class superClass,final Class[] interfaces,final ClassLoader proxyLoader,final boolean emptyBody,final Class delegateClass){  super(Opcodes.ASM4,new ClassWriter(0));  this.loader=proxyLoader != null ? createInnerLoader(proxyLoader,interfaces) : findClassLoader(superClass,interfaces);  this.visitedMethods=new LinkedHashSet<Object>();  this.delegatedClosures=closureMap.isEmpty() ? EMPTY_DELEGATECLOSURE_MAP : new HashMap<String,Boolean>();  boolean wildcard=false;  for (  Map.Entry<Object,Object> entry : closureMap.entrySet()) {    String name=entry.getKey().toString();    if ("*".equals(name)) {      wildcard=true;    }    this.delegatedClosures.put(name,Boolean.FALSE);  }  this.hasWildcard=wildcard;  Class fixedSuperClass=adjustSuperClass(superClass,interfaces);  this.generateDelegateField=delegateClass != null;  this.objectDelegateMethods=generateDelegateField ? createDelegateMethodList(fixedSuperClass,delegateClass,interfaces) : EMPTY_STRING_SET;  this.delegateClass=delegateClass;  this.superClass=fixedSuperClass;  this.classList=new LinkedHashSet<Class>();  this.classList.add(superClass);  if (generateDelegateField) {    classList.add(delegateClass);    Collections.addAll(this.classList,delegateClass.getInterfaces());  }  if (interfaces != null) {    Collections.addAll(this.classList,interfaces);  }  this.proxyName=proxyName();  this.emptyBody=emptyBody;  ClassWriter writer=(ClassWriter)cv;  this.visit(Opcodes.V1_5,ACC_PUBLIC,proxyName,null,null,null);  byte[] b=writer.toByteArray();  cachedClass=loader.defineClass(proxyName.replace('/','.'),b);  Class[] args=generateDelegateField ? new Class[]{Map.class,delegateClass} : new Class[]{Map.class};  Constructor constructor;  try {    constructor=cachedClass.getConstructor(args);  } catch (  NoSuchMethodException e) {    constructor=null;  }  cachedNoArgConstructor=constructor;}  }
class C{  public static IPath findFilterPath(final IProject project){  FilterLocator filterLocator=Activator.getDefault().getFilterLocator();  IFolder syncFolder=ProjectUtil.getSyncDirectory(project);  if (syncFolder == null) {    return null;  }  File filterLocation=filterLocator.findFilterLocation(syncFolder.getLocation().toFile());  if (filterLocation == null) {    return null;  }  return Path.fromOSString(filterLocation.getAbsolutePath());}  }
class C{  @Override public Adapter adapt(Notifier notifier,Object type){  return super.adapt(notifier,this);}  }
class C{  @Override public Iterator<JdbcRow> iterator(){  return _rowList.iterator();}  }
class C{  public boolean isPanelSelected(){  return (getCurrentPanel() != null);}  }
class C{  public void configureManagers(){  log.debug("Do configureManagers - doesn't pre-build anything");  if (configured)   log.warn("configureManagers called for a second time",new Exception("traceback"));  configured=true;}  }
class C{  public static void showForm(String serviceId){  TenantSelector.addRenderArgs();  CatalogServiceRestRep service=CatalogServiceUtils.getCatalogService(uri(serviceId));  List<CatalogServiceFieldRestRep> serviceFields=service.getCatalogServiceFields();  ServiceDescriptorRestRep serviceDescriptor=service.getServiceDescriptor();  if (serviceDescriptor == null) {    corruptedService(service);  }  Map<String,Object> fieldOptions=new HashMap<String,Object>();  addBreadCrumbToRenderArgs(service);  Map<String,AssetFieldDescriptor> assetFieldDescriptors=ServiceFormUtils.createAssetFieldDescriptors(serviceDescriptor);  Map<String,String> defaultValues=getDefaultValues(serviceDescriptor);  Map<String,String> overriddenValues=getOverriddenValues(service);  Map<String,String> availableAssets=getAvailableAssets(assetFieldDescriptors,overriddenValues);  List<ServiceFieldRestRep> allFields=ServiceDescriptorUtils.getAllFieldList(serviceDescriptor.getItems());  for (  ServiceFieldRestRep field : allFields) {    if (field.isAsset()) {      AssetFieldDescriptor fieldDescriptor=assetFieldDescriptors.get(field.getName());      boolean hasAllDependencies=overriddenValues.keySet().containsAll(fieldDescriptor.fieldsWeDependOn);      boolean isOverridden=overriddenValues.containsKey(field.getName());      if (hasAllDependencies && !isOverridden) {        List<AssetOption> options=getAssetOptions(field,availableAssets);        fieldOptions.put(field.getType() + "-options",options);        if (options.isEmpty() && field.isRequired() && !field.getType().equalsIgnoreCase("field")) {          flash.put("rawWarning",MessagesUtils.get("service.missingAssets",field.getLabel()));        }      }    }  }  Gson gson=new Gson();  String defaultValuesJSON=gson.toJson(defaultValues);  String assetFieldDescriptorsJSON=gson.toJson(assetFieldDescriptors);  String overriddenValuesJSON=gson.toJson(overriddenValues);  boolean showForm=true;  if (Boolean.TRUE.equals(service.isExecutionWindowRequired()) && !hasExecutionWindows()) {    flash.error(MessagesUtils.get("service.noExecutionWindows"));    showForm=false;  }  renderArgs.data.putAll(new ImmutableMap.Builder<String,Object>().put("service",service).put("serviceFields",serviceFields).put("serviceDescriptor",serviceDescriptor).put("assetFieldDescriptorsJSON",assetFieldDescriptorsJSON).put("defaultValuesJSON",defaultValuesJSON).put("overriddenValuesJSON",overriddenValuesJSON).put("showForm",new Boolean(showForm)).build());  request.current().args.putAll(fieldOptions);  copyRenderArgsToAngular();  angularRenderArgs().putAll(fieldOptions);  angularRenderArgs().putAll(ImmutableMap.of("assetFieldDescriptors",assetFieldDescriptors,"defaultValues",defaultValues,"overriddenValues",overriddenValues));  render();}  }
class C{  public AttributeStore(IAttributeStore values){  setAttributes(values);}  }
class C{  public void editar(Estratigrafia estratigrafia){  try {    String sql="UPDATE tb_estratigrafia SET formacao=?, grupo=?, descricao=? WHERE id_estratigrafia=? ";    stm=conector.prepareStatement(sql);    stm.setString(1,estratigrafia.getFormacao());    stm.setString(2,estratigrafia.getGrupo());    stm.setString(3,estratigrafia.getDescricao());    stm.setInt(4,estratigrafia.getId());    stm.executeUpdate();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao atualizar na base de dados estratigrafias! \n" + ex);  }}  }
class C{  public static void main(String[] args) throws IOException {  if (args == null || args.length == 0) {    printHelpAndExit();  }switch (args[0]) {case "-d":case "--dump":    dumpCards(args);  break;case "-w":case "--write":writeToCards(args);break;case "-h":case "--help":default :printHelpAndExit();break;}}  }
class C{  public SelfIteratorNoPredicate() throws javax.xml.transform.TransformerException {  super(null);}  }
class C{  private boolean typesMatch(Class[] methodParamTypes){  if ((methodParamTypes == null) || (_parameterTypes.length != methodParamTypes.length)) {    return false;  }  for (int idx=0; idx < _parameterTypes.length; idx++) {    if ((idx != _callbackTypePos) && !_parameterTypes[idx].equals(methodParamTypes[idx])) {      return false;    }  }  return true;}  }
class C{  public void onDebug(PnRTCMessage message){}  }
class C{  public void removeParameter(String key){  SharedPreferences.Editor editor=preferences.edit();  editor.remove(key);  editor.commit();}  }
class C{  public static IndexWriter simpleWriter(String pathToIndexDir) throws IOException {  return writer(pathToIndexDir,newConfig(SIMPLE));}  }
class C{  public static String formatDistanceBetween(LatLng point1,LatLng point2){  if (point1 == null || point2 == null) {    return null;  }  NumberFormat numberFormat=NumberFormat.getNumberInstance();  double distance=Math.round(SphericalUtil.computeDistanceBetween(point1,point2));  if (distance >= 1000) {    numberFormat.setMaximumFractionDigits(1);    return numberFormat.format(distance / 1000) + DISTANCE_KM_POSTFIX;  }  return numberFormat.format(distance) + DISTANCE_M_POSTFIX;}  }
class C{  public void close(){  if (log != null) {    compactClose(null);    log.close();  }}  }
class C{  public static AdminFailureResponse create(DistributionManager dm,InternalDistributedMember recipient,Exception cause){  AdminFailureResponse m=new AdminFailureResponse();  m.setRecipient(recipient);  m.cause=cause;  return m;}  }
class C{  public void update(Graphics g,JComponent c){  AbstractButton button=(AbstractButton)c;  if ((c.getBackground() instanceof UIResource) && button.isContentAreaFilled() && c.isEnabled()) {    ButtonModel model=button.getModel();    if (!MetalUtils.isToolBarButton(c)) {      if (!model.isArmed() && !model.isPressed() && MetalUtils.drawGradient(c,g,"Button.gradient",0,0,c.getWidth(),c.getHeight(),true)) {        paint(g,c);        return;      }    } else     if (model.isRollover() && MetalUtils.drawGradient(c,g,"Button.gradient",0,0,c.getWidth(),c.getHeight(),true)) {      paint(g,c);      return;    }  }  super.update(g,c);}  }
class C{  public static long checkArgumentPositive(final long value,final String errorMessage){  if (value <= 0) {    throw new IllegalArgumentException(errorMessage);  }  return value;}  }
class C{  private RawContactsEntity(){}  }
class C{  public static Distribution guessC(DataSet d){  return new LogUniform(1e-4,1e5);}  }
class C{  private boolean casHead(HeadIndex<K,V> cmp,HeadIndex<K,V> val){  return UNSAFE.compareAndSwapObject(this,headOffset,cmp,val);}  }
class C{  private void clearBackEdges(SpaceEffGraphNode bb){  SpaceEffGraphNode.OutEdgeEnumeration f=bb.outEdges();  while (f.hasMoreElements()) {    SpaceEffGraphEdge outEdge=(SpaceEffGraphEdge)f.next();    outEdge.clearBackEdge();  }}  }
class C{  @Override public final String leftSide(Instances data){  return data.attribute(m_attIndex).name();}  }
class C{  public DoubleMemberValue(ConstPool cp){  super('D',cp);  setValue(0.0);}  }
class C{  public JSONWriter array() throws JSONException {  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {    this.push(null);    this.append("[");    this.comma=false;    return this;  }  throw new JSONException("Misplaced array.");}  }
class C{  static String cleanup(String s){  for (; ; ) {    s=s.trim();    if (s.startsWith("*") || s.startsWith(";") || s.startsWith("/")|| s.startsWith("#")) {      s=s.substring(1);    } else {      return s;    }  }}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  private void put(char[] string,int tokenType){  int hashCode=getHashCode(string,0,string.length);  addTokenToBucket(hashCode,new TokenMapToken(string,tokenType));}  }
class C{  protected void checkClosed() throws IllegalStateException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("checkClosed()" + this);  }  if (closed) {    throw new IllegalStateException("The connection is closed");  }}  }
class C{  public void testOnHeapWithOffHeapSwap() throws Exception {  final int PLC_MAX_SIZE=50;  CacheConfiguration<Integer,Object> ccfg=cacheConfiguration(grid(0).name());  ccfg.setName("testOnHeapWithOffHeapSwap");  ccfg.setStatisticsEnabled(true);  ccfg.setOffHeapMaxMemory(MAX_MEMORY_SIZE);  FifoEvictionPolicy plc=new FifoEvictionPolicy();  plc.setMaxMemorySize(MAX_MEMORY_SIZE);  plc.setMaxSize(PLC_MAX_SIZE);  ccfg.setSwapEnabled(true);  ccfg.setMemoryMode(CacheMemoryMode.ONHEAP_TIERED);  ccfg.setEvictionPolicy(plc);  final IgniteCache<Integer,Object> cache=grid(0).getOrCreateCache(ccfg);  fillCache(cache,getTestTimeout());  assertEquals(cache.size(CachePeekMode.SWAP) + cache.size(CachePeekMode.ONHEAP) + cache.size(CachePeekMode.OFFHEAP),cache.size(CachePeekMode.ALL));  assertTrue(PLC_MAX_SIZE >= cache.size(CachePeekMode.ONHEAP));  assertTrue(PLC_MAX_SIZE - 5 <= cache.size(CachePeekMode.ONHEAP));  assertTrue(MAX_VALS_AMOUNT >= cache.size(CachePeekMode.OFFHEAP));  assertTrue(MAX_VALS_AMOUNT - 5 <= cache.size(CachePeekMode.OFFHEAP));  assertTrue((MAX_VALS_AMOUNT + 5) * VAL_SIZE > cache.localMetrics().getOffHeapAllocatedSize());  assertTrue((MAX_VALS_AMOUNT - 5) * VAL_SIZE < cache.localMetrics().getOffHeapAllocatedSize());  assertTrue(cache.localMetrics().getOffHeapAllocatedSize() >= cache.size(CachePeekMode.OFFHEAP) * VAL_SIZE);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isLive(){  return rot != null;}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer deployStatusId,Principal principal){  RestWrapper restWrapper=null;  try {    deployStatusDAO.delete(deployStatusId.shortValue());    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info(RECORDWITHID + deployStatusId + " deleted from DeployStatus by User:"+ principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    return new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  protected void discoverIp6Interface(Host host,IpInterface ipInterface,HostVirtualNic nic){  HostIpConfigIpV6Address config=getIp6Address(nic);  setHostInterfaceRegistrationStatus(ipInterface,host);  ipInterface.setHost(host.getId());  ipInterface.setProtocol(Protocol.IPV6.name());  ipInterface.setIpAddress(config.getIpAddress());  ipInterface.setPrefixLength(config.getPrefixLength());  ipInterface.setIsManualCreation(false);  save(ipInterface);}  }
class C{  public void warn(SourceLocator srcLctr,String msg) throws TransformerException {  warn(srcLctr,null,null,msg,null);}  }
class C{  public final boolean isNoGrid(){  return noGrid;}  }
class C{  private static boolean checkVariables(String val,String key,HashMap<String,String> hMap){  if (!hMap.containsKey(key) && !hMap.containsValue(val)) {    return true;  } else   if (!hMap.containsKey(key) && hMap.containsValue(val) || hMap.containsKey(key) && !hMap.containsValue(val)) {    return false;  } else {    if (hMap.get(key).equals(val)) {      return true;    } else     return false;  }}  }
class C{  protected static double eclipticToEquatorialDeclination(double lambda,double beta){  double sin_e=Math.sin(MEAN_OBLIQUITY_OF_EPOCH);  double cos_e=Math.cos(MEAN_OBLIQUITY_OF_EPOCH);  return Math.asin(Math.sin(beta) * cos_e + Math.cos(beta) * sin_e * Math.sin(lambda));}  }
class C{  private boolean sameMembers(Object[] ar1,Object[] ar2,int length){  if (ar1 == null && ar2 == null) {    return true;  }  if (ar1 == null || ar2 == null) {    return false;  }  boolean found;  for (int i=0; i < length; i++) {    found=false;    for (int j=0; j < length; j++) {      if (ar1[i].equals(ar2[j])) {        found=true;        break;      }    }    if (!found) {      return false;    }  }  return true;}  }
class C{  protected void preorder(TreeNode<E> root){  if (root == null)   return;  System.out.print(root.element + " ");  preorder(root.left);  preorder(root.right);}  }
class C{  public void testUnsizedIntsCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.ints().limit(size).parallel().forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public void storeUnSyncedPayPalRecords(Context context,String newRecord){  if (context == null) {    Log.e("BCCache","param context NPE");    return;  }  final SharedPreferences prefs=context.getSharedPreferences(BC_PAYPAL_SHARED_PREFERENCE_NAME,0);  String cachedStr=prefs.getString(BC_PAYPAL_UNSYNCED_STR_CACHE,null);  SharedPreferences.Editor spEditor=prefs.edit();  if (cachedStr == null) {    spEditor.putString(BC_PAYPAL_UNSYNCED_STR_CACHE,newRecord);  } else {    List<String> totalRec=new ArrayList<String>(Arrays.asList(cachedStr.split(separator)));    totalRec.add(newRecord);    spEditor.putString(BC_PAYPAL_UNSYNCED_STR_CACHE,joinStrings(totalRec));  }  spEditor.apply();}  }
class C{  public int size(){  return defaultProps.size();}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public String toString_d(){  return root.toStringAll();}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("SIPIfMatch.parse");  SIPIfMatch sipIfMatch=new SIPIfMatch();  try {    headerName(TokenTypes.SIP_IF_MATCH);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    sipIfMatch.setETag(token.getTokenValue());    this.lexer.SPorHT();    this.lexer.match('\n');    return sipIfMatch;  }  finally {    if (debug)     dbg_leave("SIPIfMatch.parse");  }}  }
class C{  public static String encodeQueryString(String urlQuery,String charsetName){  StringBuffer out=new StringBuffer(urlQuery.length() * 6 / 5);  byte[] ba=null;  try {    ba=urlQuery.getBytes(charsetName);  } catch (  UnsupportedEncodingException exc) {    return urlQuery;  }  for (int j=0; j < ba.length; j++) {    if (ba[j] >= 0)     out.append((char)ba[j]); else     out.append("%" + Long.toHexString((long)(ba[j] & 0xff)).toUpperCase());  }  return out.toString();}  }
class C{  public CEventListTableModel(final ITraceListProvider traceProvider){  Preconditions.checkNotNull(traceProvider,"IE01375: Event list manager can't be null");  m_traceProvider=traceProvider;  m_traceProvider.addListener(m_listener);  if (traceProvider.isLoaded()) {    for (    final TraceList traceList : traceProvider) {      traceList.addListener(m_listener);    }  }}  }
class C{  public boolean isValid(){  if (getC_BP_BankAccount_ID() != 0)   return true;  return !isDirect();}  }
class C{  private void rightMultByVector(MatrixBlock vector,MatrixBlock result,int k) throws DMLRuntimeException {  result.allocateDenseBlock();  try {    ExecutorService pool=Executors.newFixedThreadPool(k);    int rlen=getNumRows();    int seqsz=BitmapEncoder.BITMAP_BLOCK_SZ;    int blklen=(int)(Math.ceil((double)rlen / k));    blklen+=(blklen % seqsz != 0) ? seqsz - blklen % seqsz : 0;    ArrayList<RightMatrixMultTask> tasks=new ArrayList<RightMatrixMultTask>();    for (int i=0; i < k & i * blklen < getNumRows(); i++)     tasks.add(new RightMatrixMultTask(_colGroups,vector,result,i * blklen,Math.min((i + 1) * blklen,rlen)));    pool.invokeAll(tasks);    pool.shutdown();  } catch (  Exception ex) {    throw new DMLRuntimeException(ex);  }  result.recomputeNonZeros();}  }
class C{  public Counted(E element,int count){  this.element=element;  this.count=count;}  }
class C{  @TargetApi(23) private boolean maybeRequestPermission(){  if (requiresPermission(contentUri)) {    requestPermissions(new String[]{permission.READ_EXTERNAL_STORAGE},0);    return true;  } else {    return false;  }}  }
class C{  private boolean isInState(WebSocketState state){synchronized (mStateManager) {    return (mStateManager.getState() == state);  }}  }
class C{  public Fields(){}  }
class C{  public void play(String url) throws Exception {  play(url,-1);}  }
class C{  public ExtendedFilter makeExtendedFilter(AbstractBounds<RowPosition> keyRange,SliceQueryFilter columnRange,Composite columnStart,Composite columnStop,List<IndexExpression> rowFilter,int maxResults,boolean countCQL3Rows,long now){  DataRange dataRange=new DataRange.Paging(keyRange,columnRange,columnStart,columnStop,metadata);  return ExtendedFilter.create(this,dataRange,rowFilter,maxResults,countCQL3Rows,now);}  }
class C{  public void addItem(String s){  if (_nstored == 0) {    addItem(s,0);  } else {    addItem(s,_valueArray[_nstored - 1] + 1);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:04.252 -0500",hash_original_method="EEA55C49C96425F7EA6FAB4AE055FF38",hash_generated_method="EEA55C49C96425F7EA6FAB4AE055FF38") HugeEnumSet(Class<E> elementType,E[] enums){  super(elementType);  this.enums=enums;  bits=new long[(enums.length + BIT_IN_LONG - 1) / BIT_IN_LONG];}  }
class C{  private static boolean isValid(World world,BlockPos pos,IBlockState state,@Nullable EntityPlayer player){  if (player == null)   return false;  final ItemStack heldItem=player.getHeldItemMainhand();  return !world.isRemote && state.getBlock() == Blocks.MOB_SPAWNER && heldItem != null && heldItem.getItem().getHarvestLevel(heldItem,"pickaxe",player,state) > 0 && EnchantmentHelper.getEnchantmentLevel(Enchantments.SILK_TOUCH,heldItem) > 0;}  }
class C{  public void addColumn(RColumn rc,int index){  m_data.cols.add(index,rc);}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  if (z == null) {    throw new NullPointerException();  }  for (  Node node : z) {    if (node == null) {      throw new NullPointerException();    }  }  int[] indices=createIndexArray(z,x,y);  return isIndependent(indices);}  }
class C{  public void actionPerformed(ActionEvent e){  loadTimeSeriesDataSet();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.EQUALITY_EXPRESSION__LHS:    return getLhs();case N4JSPackage.EQUALITY_EXPRESSION__OP:  return getOp();case N4JSPackage.EQUALITY_EXPRESSION__RHS:return getRhs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void testEqualsAttributes() throws Exception {  final String xml="<dom a='1' b='2'/>";  XppDom dom1=XppFactory.buildDom(xml);  XppDom dom2=XppFactory.buildDom(xml);  assertEquals(comparator,dom1,dom2);  assertNull(xpath.get());}  }
class C{  public ColladaBindMaterial(String ns){  super(ns);}  }
class C{  public static long javaToExtendedDosTime(long time){  if (time < 0) {    return ZipEntry.DOSTIME_BEFORE_1980;  }  long dostime=javaToDosTime(time);  return (dostime != ZipEntry.DOSTIME_BEFORE_1980) ? dostime + ((time % 2000) << 32) : ZipEntry.DOSTIME_BEFORE_1980;}  }
class C{  public void printCarHeader(PrintWriter file,boolean isManifest,boolean isTwoColumnTrack){  int lineLength=getLineLength(isManifest);  printHorizontalLine(file,0,lineLength);  if (!Setup.isPrintHeadersEnabled()) {    return;  }  String s=padAndTruncateString(tabString(Setup.getPickupCarPrefix(),lineLength / 4 - Setup.getPickupCarPrefix().length() / 2,true),lineLength / 2,true) + VERTICAL_LINE_CHAR + tabString(Setup.getDropCarPrefix(),lineLength / 4 - Setup.getDropCarPrefix().length() / 2,true);  s=padAndTruncateString(s,lineLength,true);  addLine(file,s);  printHorizontalLine(file,0,lineLength);  s=padAndTruncateString(getPickupCarHeader(isManifest,isTwoColumnTrack),lineLength / 2,true);  s=padAndTruncateString(s + VERTICAL_LINE_CHAR + getDropCarHeader(isManifest,isTwoColumnTrack),lineLength,true);  addLine(file,s);  printHorizontalLine(file,0,lineLength);}  }
class C{  private Path findPluginRoot(Path dir) throws IOException {  if (Files.exists(dir.resolve(PluginInfo.ES_PLUGIN_PROPERTIES))) {    return dir;  } else {    final Path[] topLevelFiles=FileSystemUtils.files(dir);    if (topLevelFiles.length == 1 && Files.isDirectory(topLevelFiles[0])) {      Path subdir=topLevelFiles[0];      if (Files.exists(subdir.resolve(PluginInfo.ES_PLUGIN_PROPERTIES))) {        return subdir;      }    }  }  throw new RuntimeException("Could not find plugin descriptor '" + PluginInfo.ES_PLUGIN_PROPERTIES + "' in plugin zip");}  }
class C{  public void processWrappedEvent(EventBean eventBean){  unisolatedServices.getEventProcessingRWLock().acquireReadLock();  try {    processMatches(eventBean);  } catch (  RuntimeException ex) {    matchesArrayThreadLocal.get().clear();    throw new EPException(ex);  } finally {    unisolatedServices.getEventProcessingRWLock().releaseReadLock();  }  dispatch();  processThreadWorkQueue();}  }
class C{  public void savePSP() throws SaaSApplicationException {  if (!isTokenValid() && pspId != null) {    updateSelectedPSP();  }  final List<VOPSPSetting> list=new ArrayList<>();  for (  PSPSettingRow row : pspSettingRowList) {    if (!row.isSelected() && (row.getDefinition().getSettingKey() != null && row.getDefinition().getSettingKey().trim().length() > 0 || row.getDefinition().getSettingValue() != null && row.getDefinition().getSettingValue().trim().length() > 0)) {      list.add(row.getDefinition());    }  }  final VOPSP psp=getSelectedPSP();  psp.setPspSettings(list);  OperatorService operatorService=getOperatorService();  selectedPSP=operatorService.savePSP(psp);  resetToken();  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_PSP_SAVED,selectedPSP.getId());  setSelectedPSP(selectedPSP);}  }
class C{  protected void clearEvents(){}  }
class C{  public static int toInt(short a,short b){  return (a << SHORT_SIZE) | (b & SHORT_MASK);}  }
class C{  public void generateSecret(){  try {    int secretKeySize=applicationSettings.getGenerateSecretKeySize();    SecretKeyType secretKeyType=applicationSettings.getGenerateSecretKeyType();    DGenerateSecretKey dGenerateSecretKey=new DGenerateSecretKey(frame,secretKeyType,secretKeySize);    dGenerateSecretKey.setLocationRelativeTo(frame);    dGenerateSecretKey.setVisible(true);    if (!dGenerateSecretKey.isSuccessful()) {      return;    }    secretKeySize=dGenerateSecretKey.getSecretKeySize();    secretKeyType=dGenerateSecretKey.getSecretKeyType();    applicationSettings.setGenerateSecretKeySize(secretKeySize);    applicationSettings.setGenerateSecretKeyType(secretKeyType);    SecretKey secretKey=SecretKeyUtil.generateSecretKey(secretKeyType,secretKeySize);    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    DGetAlias dGetAlias=new DGetAlias(frame,res.getString("GenerateSecretKeyAction.NewSecretKeyEntryAlias.Title"),null);    dGetAlias.setLocationRelativeTo(frame);    dGetAlias.setVisible(true);    String alias=dGetAlias.getAlias();    if (alias == null) {      return;    }    if (keyStore.containsAlias(alias)) {      String message=MessageFormat.format(res.getString("GenerateSecretKeyAction.OverWriteEntry.message"),alias);      int selected=JOptionPane.showConfirmDialog(frame,message,res.getString("GenerateSecretKeyAction.NewSecretKeyEntryAlias.Title"),JOptionPane.YES_NO_OPTION);      if (selected != JOptionPane.YES_OPTION) {        return;      }    }    Password password=new Password((char[])null);    KeyStoreType type=KeyStoreType.resolveJce(keyStore.getType());    if (type.hasEntryPasswords()) {      DGetNewPassword dGetNewPassword=new DGetNewPassword(frame,res.getString("GenerateSecretKeyAction.NewSecretKeyEntryPassword.Title"),applicationSettings.getPasswordQualityConfig());      dGetNewPassword.setLocationRelativeTo(frame);      dGetNewPassword.setVisible(true);      password=dGetNewPassword.getPassword();      if (password == null) {        return;      }    }    if (keyStore.containsAlias(alias)) {      keyStore.deleteEntry(alias);      newState.removeEntryPassword(alias);    }    keyStore.setKeyEntry(alias,secretKey,password.toCharArray(),null);    newState.setEntryPassword(alias,password);    currentState.append(newState);    kseFrame.updateControls(true);    JOptionPane.showMessageDialog(frame,res.getString("GenerateSecretKeyAction.SecretKeyGenerationSuccessful.message"),res.getString("GenerateSecretKeyAction.GenerateSecretKey.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public void testSerialization() throws Exception {  IgniteEx g0=grid(0);  IgniteCache<Integer,GridCacheQueryTestValue> c0=g0.cache(CACHE_NAME);  c0.put(1,value("A",1,1));  c0.put(2,value("B",2,2));  IgniteEx g1=grid(1);  IgniteCache<Integer,GridCacheQueryTestValue> c1=g1.cache(CACHE_NAME);  c1.put(3,value("C",3,3));  c1.put(4,value("D",4,4));  List<Cache.Entry<Integer,GridCacheQueryTestValue>> qryRes=g0.compute(g0.cluster().forNode(g1.localNode())).withNoFailover().call(new QueryCallable());  assert !qryRes.isEmpty();  info(">>>> Query result:");  for (  Cache.Entry<Integer,GridCacheQueryTestValue> entry : qryRes)   info(">>>>>>>" + entry.getKey() + " "+ entry.getValue().getField1());}  }
class C{  private static double p_j_i(int j,int i,double sigma,List<List<? extends VecPaired<Vec,Double>>> neighbors,List<Vec> vecs,List<Double> accelCache,DistanceMetric dm){  if (i == j)   return 0;  Vec x_j=neighbors.get(j).get(0).getVector();  final double sigmaSqrdInv=1 / (2 * (sigma * sigma));  double numer=0;  double denom=0;  boolean jIsNearBy=false;  final List<? extends VecPaired<Vec,Double>> neighbors_i=neighbors.get(i);  for (int k=1; k < neighbors_i.size(); k++) {    VecPaired<Vec,Double> neighbor_ik=neighbors_i.get(k);    final double d_ik=neighbor_ik.getPair();    denom+=FastMath.exp(-(d_ik * d_ik) * sigmaSqrdInv);    if (neighbor_ik.getVector() == x_j) {      jIsNearBy=true;      numer=FastMath.exp(-(d_ik * d_ik) * sigmaSqrdInv);    }  }  if (!jIsNearBy) {    double d_ij=dm.dist(i,j,vecs,accelCache);    numer=FastMath.exp(-(d_ij * d_ij) * sigmaSqrdInv);  }  return numer / (denom + 1e-9);}  }
class C{  public static String encodeHex(byte[] array,boolean zeroTerminated){  char[] cArray=new char[array.length * 2];  int j=0;  for (int i=0; i < array.length; i++) {    int index=array[i] & 0xFF;    if (index == 0 && zeroTerminated) {      break;    }    cArray[j++]=FIRST_CHAR[index];    cArray[j++]=SECOND_CHAR[index];  }  return new String(cArray,0,j);}  }
class C{  public static String layoutCompoundLabel(FontMetrics fm,String text,Icon icon,int verticalAlignment,int horizontalAlignment,int verticalTextPosition,int horizontalTextPosition,Rectangle viewR,Rectangle iconR,Rectangle textR,int textIconGap){  return layoutCompoundLabelImpl(null,fm,text,icon,verticalAlignment,horizontalAlignment,verticalTextPosition,horizontalTextPosition,viewR,iconR,textR,textIconGap);}  }
class C{  public static double cdf(double val,double loc,double scale,double shape){  val=(val - loc) / scale;  return Math.pow(1. + Math.exp(-val),-shape);}  }
class C{  public static List<Cell> stringToPattern(final String string,final CellManager cellManager){  final List<Cell> result=new ArrayList<>();  if (string.isEmpty()) {    return result;  }  final String[] allCells=string.split("&");  for (  String allCell : allCells) {    final String[] rowAndColumn=allCell.split("-");    final int row=Integer.valueOf(rowAndColumn[0]);    final int column=Integer.valueOf(rowAndColumn[1]);    final Cell cell=cellManager.get(row,column);    result.add(cell);  }  return result;}  }
class C{  public static boolean isInitialized(){  return INSTANCE.codenameOneRunning && (INSTANCE.impl == null ? false : INSTANCE.impl.isInitialized());}  }
class C{  public FakeTweetTimeline(long numItems){  this.numItems=numItems;}  }
class C{  public static byte[][][] convertArray(short[][][] in){  byte[][][] out=new byte[in.length][in[0].length][in[0][0].length];  for (int i=0; i < in.length; i++) {    for (int j=0; j < in[0].length; j++) {      for (int k=0; k < in[0][0].length; k++) {        out[i][j][k]=(byte)in[i][j][k];      }    }  }  return out;}  }
class C{  public void testResourcesAvailable(){  new ArabicAnalyzer().close();}  }
class C{  public ShortBuffer put(short c){  shortArray.set(position++,c);  return this;}  }
class C{  private void formatNodeTo(Formatter f,int level,RadixTreeNode<T> node){  for (int i=0; i < level; i++) {    f.format(" ");  }  f.format("|");  for (int i=0; i < level; i++) {    f.format("-");  }  if (node.isReal() == true)   f.format("%s[%s]*%n",node.getKey(),node.getValue()); else   f.format("%s%n",node.getKey());  for (  RadixTreeNode<T> child : node.getChildern()) {    formatNodeTo(f,level + 1,child);  }}  }
class C{  public static Map<String,Object> updateTrackingNumber(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=new HashMap<String,Object>();  Delegator delegator=dctx.getDelegator();  String orderId=(String)context.get("orderId");  String shipGroupSeqId=(String)context.get("shipGroupSeqId");  String trackingNumber=(String)context.get("trackingNumber");  try {    GenericValue shipGroup=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId,"shipGroupSeqId",shipGroupSeqId).queryOne();    if (shipGroup == null) {      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);      result.put(ModelService.ERROR_MESSAGE,"ERROR: No order shipment preference found!");    } else {      shipGroup.set("trackingNumber",trackingNumber);      shipGroup.store();      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    }  } catch (  GenericEntityException e) {    Debug.logError(e,module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not set tracking number (" + e.getMessage() + ").");  }  return result;}  }
class C{  protected void clearStageTable(CsvInfo info) throws ReplicatorException {  Statement tmpStatement=null;  Table table=info.stageTableMetadata;  if (logger.isDebugEnabled()) {    logger.debug("Clearing InfiniDB stage table: " + table.fullyQualifiedName());  }  String delete="DELETE FROM " + table.fullyQualifiedName();  if (logger.isDebugEnabled()) {    logger.debug("Executing delete command: " + delete);  }  try {    Database conn=(Database)connections.get(0);    tmpStatement=conn.createStatement();    conn.setAutoCommit(false);    int rowsLoaded=tmpStatement.executeUpdate(delete);    conn.commit();    conn.setAutoCommit(true);    if (logger.isDebugEnabled()) {      logger.debug("Rows deleted: " + rowsLoaded);    }  } catch (  Exception e) {    ReplicatorException re=new ReplicatorException("Unable to delete data from stage table: " + table.fullyQualifiedName(),e);    re.setExtraData(delete);    throw re;  } finally {    if (tmpStatement != null)     try {      tmpStatement.close();    } catch (    SQLException e) {    }  }}  }
class C{  public UnicastServerRef2(int port,RMIClientSocketFactory csf,RMIServerSocketFactory ssf){  super(new LiveRef(port,csf,ssf));}  }
class C{  public double computeFirstCover(boolean leaf){  double max=0.;  for (  DistanceEntry<E> e : firstAssignments) {    double cover=leaf ? e.getDistance() : (e.getEntry().getCoveringRadius() + e.getDistance());    max=cover > max ? cover : max;  }  return max;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.403 -0500",hash_original_method="CB69F89B2E3E5728AFF3169858F2154E",hash_generated_method="857E7991EAD75DEDA36FF25D925F7A65") public void startWps(WpsInfo config){  if (config == null) {    return;  }  mAsyncChannel.sendMessage(CMD_START_WPS,config);}  }
class C{  public CounterSetBTreeTupleSerializer(){  super();}  }
class C{  protected void doLog(Level level,String msg,String cls,String method,int lineno){  System.err.println(m_DateFormat.format(new Date()) + " " + cls+ " "+ method+ "\n"+ level+ ": "+ msg);}  }
class C{  public void test_ticket_bg1899_d() throws Exception {  new TestHelper("ticket_bg1899d","ticket_bg1899d.rq","ticket_bg1899abcd.ttl","ticket_bg1899abcd.srx").runTest();}  }
class C{  private Object readElement(InputNode node,String key) throws Exception {  String name=style.getAttribute(key);  InputNode child=node.getNext(name);  if (child == null) {    return null;  }  return root.read(child);}  }
class C{  public RequestTargetReply(final int packetId,final int errorCode){  super(packetId,errorCode);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void variableUseageCounts(int counts[]){  if (symbol instanceof GEPTerminalSymbol && !(symbol instanceof GEPConstantTerminalSymbol)) {    GEPTerminalSymbol s=(GEPTerminalSymbol)symbol;    counts[s.id - s.symbolSet.getBaseTerminalSymbolId()]++;  }  for (int i=0; i < numParameters; i++)   parameters[i].variableUseageCounts(counts);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANG_1:    return ((InternalEList<?>)getCodeLang_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANGS_1:  return ((InternalEList<?>)getCodeLangs_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void write(byte[] data){  if (mService.getState() == STATE_CONNECTED) {    mService.write(data);  }}  }
class C{  public void onConversationVisible(Peer peer){  this.visiblePeer=peer;}  }
class C{  public static final void show(final int[][] matrix1){  for (int row=0; row < 3; row++) {    LogWriter.writeLog(row + "((" + matrix1[row][0]+ " , "+ matrix1[row][1]+ " , "+ matrix1[row][2]+ " ))");  }}  }
class C{  private MutableBigInteger binaryGCD(MutableBigInteger v){  MutableBigInteger u=this;  MutableBigInteger r=new MutableBigInteger();  int s1=u.getLowestSetBit();  int s2=v.getLowestSetBit();  int k=(s1 < s2) ? s1 : s2;  if (k != 0) {    u.rightShift(k);    v.rightShift(k);  }  boolean uOdd=(k == s1);  MutableBigInteger t=uOdd ? v : u;  int tsign=uOdd ? -1 : 1;  int lb;  while ((lb=t.getLowestSetBit()) >= 0) {    t.rightShift(lb);    if (tsign > 0)     u=t; else     v=t;    if (u.intLen < 2 && v.intLen < 2) {      int x=u.value[u.offset];      int y=v.value[v.offset];      x=binaryGcd(x,y);      r.value[0]=x;      r.intLen=1;      r.offset=0;      if (k > 0)       r.leftShift(k);      return r;    }    if ((tsign=u.difference(v)) == 0)     break;    t=(tsign >= 0) ? u : v;  }  if (k > 0)   u.leftShift(k);  return u;}  }
class C{  @Deprecated public static IgnitePredicate<IgniteInternalFuture<?>> unfinishedFutures(){  return UNFINISHED_FUTURE;}  }
class C{  public static int activeCount(){  return 0;}  }
class C{  private int lastCategoryIndex(){  if (this.maximumCategoryCount == 0) {    return -1;  }  return Math.min(this.firstCategoryIndex + this.maximumCategoryCount,this.underlying.getColumnCount()) - 1;}  }
class C{  public static boolean writeXMPMeta(String filename,XMPMeta meta){  if (!filename.toLowerCase().endsWith(".jpg") && !filename.toLowerCase().endsWith(".jpeg")) {    Log.d(TAG,"XMP parse: only jpeg file is supported");    return false;  }  List<Section> sections=null;  try {    sections=parse(new FileInputStream(filename),false);    sections=insertXMPSection(sections,meta);    if (sections == null) {      return false;    }  } catch (  FileNotFoundException e) {    Log.e(TAG,"Could not read file: " + filename,e);    return false;  }  FileOutputStream os=null;  try {    os=new FileOutputStream(filename);    writeJpegFile(os,sections);  } catch (  IOException e) {    Log.d(TAG,"Write file failed:" + filename,e);    return false;  } finally {    if (os != null) {      try {        os.close();      } catch (      IOException e) {      }    }  }  return true;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_create_widget_week);}  }
class C{  private boolean dispatchDrawUsingBitmap(Canvas canvas){  Bitmap unmaskBitmap=tryObtainRenderUnmaskBitmap();  Bitmap maskBitmap=tryObtainRenderMaskBitmap();  if (unmaskBitmap == null || maskBitmap == null) {    return false;  }  drawUnmasked(new Canvas(unmaskBitmap));  canvas.drawBitmap(unmaskBitmap,0,0,mAlphaPaint);  drawMasked(new Canvas(maskBitmap));  canvas.drawBitmap(maskBitmap,0,0,null);  return true;}  }
class C{  @InterfaceAudience.Private @InterfaceStability.Unstable public synchronized long remainingInCurrentRequest(){  return contentRangeFinish - pos;}  }
class C{  public void mergeStates(boolean[][][] mergeThesePairs,double[][] mergeWeights){  short[] newNumSubStates=new short[numSubStates.length];  short[][] mapping=new short[numSubStates.length][];  short[][][] partners=new short[numSubStates.length][][];  Grammar.calculateMergeArrays(mergeThesePairs,newNumSubStates,mapping,partners,numSubStates);  for (int tag=0; tag < mergeThesePairs.length; tag++) {    if (wordToTagCounters[tag] != null) {      for (      String word : wordToTagCounters[tag].keySet()) {        double[] scores=wordToTagCounters[tag].get(word);        double[] newScores=new double[newNumSubStates[tag]];        for (int i=0; i < numSubStates[tag]; i++) {          short nSplit=(short)partners[tag][i].length;          if (nSplit == 2) {            newScores[mapping[tag][i]]=scores[partners[tag][i][0]] + scores[partners[tag][i][1]];          } else {            newScores[mapping[tag][i]]=scores[i];          }        }        wordToTagCounters[tag].put(word,newScores);      }    }    double[] newTagCounter=new double[newNumSubStates[tag]];    for (int i=0; i < numSubStates[tag]; i++) {      if (partners[tag][i].length == 2) {        newTagCounter[mapping[tag][i]]=tagCounter[tag][partners[tag][i][0]] + tagCounter[tag][partners[tag][i][1]];      } else {        newTagCounter[mapping[tag][i]]=tagCounter[tag][i];      }    }    tagCounter[tag]=newTagCounter;  }  numSubStates=newNumSubStates;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void M_ForecastLine(MForecastLine fl){  String trxName=fl.get_TrxName();  Properties ctx=fl.getCtx();  MForecast f=new MForecast(ctx,fl.getM_Forecast_ID(),trxName);  MPPMRP mrp=getQuery(fl,null,null).firstOnly();  if (mrp == null) {    mrp=new MPPMRP(ctx,0,trxName);    mrp.setM_ForecastLine_ID(fl.getM_ForecastLine_ID());  }  mrp.setM_Forecast(f);  mrp.setName("MRP");  mrp.setAD_Org_ID(fl.getAD_Org_ID());  mrp.setDatePromised(fl.getDatePromised());  mrp.setDateStartSchedule(fl.getDatePromised());  mrp.setDateFinishSchedule(fl.getDatePromised());  mrp.setDateOrdered(fl.getDatePromised());  mrp.setM_Warehouse_ID(fl.getM_Warehouse_ID());  mrp.setM_Product_ID(fl.getM_Product_ID());  mrp.setQty(fl.getQty());  mrp.setDocStatus(DocAction.STATUS_InProgress);  mrp.saveEx();}  }
class C{  @Override protected Profile instantiateProfile(InternalDistributedMember memberId,int version){  return new ControllerProfile(memberId,version);}  }
class C{  public static <V,E>void growSubTree(Forest<V,E> tree,Forest<V,E> subTree,V root){  if (tree.getSuccessorCount(root) > 0) {    Collection<E> edges=tree.getOutEdges(root);    for (    E e : edges) {      subTree.addEdge(e,tree.getEndpoints(e));    }    Collection<V> kids=tree.getSuccessors(root);    for (    V kid : kids) {      growSubTree(tree,subTree,kid);    }  }}  }
class C{  public final void rotZ(float angle){  float sinAngle, cosAngle;  sinAngle=(float)Math.sin(angle);  cosAngle=(float)Math.cos(angle);  this.m00=cosAngle;  this.m01=-sinAngle;  this.m02=(float)0.0;  this.m03=(float)0.0;  this.m10=sinAngle;  this.m11=cosAngle;  this.m12=(float)0.0;  this.m13=(float)0.0;  this.m20=(float)0.0;  this.m21=(float)0.0;  this.m22=(float)1.0;  this.m23=(float)0.0;  this.m30=(float)0.0;  this.m31=(float)0.0;  this.m32=(float)0.0;  this.m33=(float)1.0;}  }
class C{  private static int determineConsecutiveTextCount(CharSequence msg,int startpos){  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch) && idx < len) {      numericCount++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }    if (numericCount >= 13) {      return idx - startpos - numericCount;    }    if (numericCount > 0) {      continue;    }    ch=msg.charAt(idx);    if (!isText(ch)) {      break;    }    idx++;  }  return idx - startpos;}  }
class C{  @Override public void cascadePerformRemoveIfRequired(Object object,UnitOfWorkImpl uow,Map visitedObjects,boolean getAttributeValueFromObject){  Object objectReferenced=null;  if (getAttributeValueFromObject) {    objectReferenced=getAttributeValueFromObject(object);  } else {    objectReferenced=object;  }  if ((objectReferenced == null)) {    return;  }  if (!visitedObjects.containsKey(objectReferenced)) {    visitedObjects.put(objectReferenced,objectReferenced);    ObjectBuilder builder=getReferenceDescriptor(objectReferenced.getClass(),uow).getObjectBuilder();    builder.cascadePerformRemove(objectReferenced,uow,visitedObjects);  }}  }
class C{  public boolean isSAMLToken(){  return samlToken;}  }
class C{  public boolean contains(final String documentText,final String... needles){  final String text=getCoveredText(documentText);  return Arrays.stream(needles).anyMatch(null);}  }
class C{  public final byte readByte() throws IOException {  int temp=this.read();  if (temp < 0) {    throw new EOFException();  }  return (byte)temp;}  }
class C{  public IgfsFileRange(IgfsPath path,long start,long len){  this.path=path;  this.start=start;  this.len=len;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.983 -0400",hash_original_method="9FB34A64AFD23F37DE49FF2A86984A48",hash_generated_method="3D95C44EB6A9227F514528AC80794E40") private FileEntry createFileEntry(FileEntry parent,File file){  FileEntry entry=parent.newChildInstance(file);  entry.refresh(file);  File[] files=listFiles(file);  FileEntry[] children=files.length > 0 ? new FileEntry[files.length] : FileEntry.EMPTY_ENTRIES;  for (int i=0; i < files.length; i++) {    children[i]=createFileEntry(entry,files[i]);  }  entry.setChildren(children);  return entry;}  }
class C{  public static byte[] fromAscii(char[] ascii){  if (ascii == null || ascii.length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] l_raw=new byte[ascii.length >> 3];  for (int ii=0, jj=ascii.length - 1; ii < l_raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if (ascii[jj - bits] == '1') {        l_raw[ii]|=BITS[bits];      }    }  }  return l_raw;}  }
class C{  public static <T,U>Flux<T> sorted(Flux<T> flux,Function<? super T,? extends U> function){  return Flux.fromIterable(null);}  }
class C{  public final int computeLookupSwitchOffset(int value,int num){  if (VM.VerifyAssertions)   VM._assert(opcode == JBC_lookupswitch);  for (int i=0; i < num; i++) {    if (getSignedInt(bcIndex + (i << (LOG_BYTES_IN_INT + 1))) == value) {      return getSignedInt(bcIndex + (i << (LOG_BYTES_IN_INT + 1)) + BYTES_IN_INT);    }  }  return 0;}  }
class C{  public static DiscordRecord findBestDiscordBruteForce(double[] series,Integer windowSize,VisitRegistry globalRegistry,double nThreshold) throws Exception {  Date start=new Date();  long distanceCallsCounter=0;  double bestSoFarDistance=-1.0;  int bestSoFarPosition=-1;  VisitRegistry outerRegistry=globalRegistry.clone();  int outerIdx=-1;  while (-1 != (outerIdx=outerRegistry.getNextRandomUnvisitedPosition())) {    outerRegistry.markVisited(outerIdx);    if (globalRegistry.isVisited(outerIdx)) {      continue;    }    double[] candidateSeq=tsProcessor.znorm(tsProcessor.subseriesByCopy(series,outerIdx,outerIdx + windowSize),nThreshold);    double nearestNeighborDistance=Double.MAX_VALUE;    VisitRegistry innerRegistry=new VisitRegistry(series.length - windowSize);    int innerIdx;    while (-1 != (innerIdx=innerRegistry.getNextRandomUnvisitedPosition())) {      innerRegistry.markVisited(innerIdx);      if (Math.abs(outerIdx - innerIdx) > windowSize) {        double[] currentSubsequence=tsProcessor.znorm(tsProcessor.subseriesByCopy(series,innerIdx,innerIdx + windowSize),nThreshold);        double dist=ed.earlyAbandonedDistance(candidateSeq,currentSubsequence,nearestNeighborDistance);        distanceCallsCounter++;        if ((!Double.isNaN(dist)) && dist < nearestNeighborDistance) {          nearestNeighborDistance=dist;        }      }    }    if (!(Double.isInfinite(nearestNeighborDistance)) && nearestNeighborDistance > bestSoFarDistance) {      bestSoFarDistance=nearestNeighborDistance;      bestSoFarPosition=outerIdx;      LOGGER.trace("discord updated: pos {}, dist {}",bestSoFarPosition,bestSoFarDistance);    }  }  Date firstDiscord=new Date();  LOGGER.debug("best discord found at {}, best distance: {}, in {} distance calls: {}",bestSoFarPosition,bestSoFarDistance,SAXProcessor.timeToString(start.getTime(),firstDiscord.getTime()),distanceCallsCounter);  DiscordRecord res=new DiscordRecord(bestSoFarPosition,bestSoFarDistance);  res.setLength(windowSize);  res.setInfo("distance calls: " + distanceCallsCounter);  return res;}  }
class C{  public void stop() throws IgniteException {  if (stopped)   return;  stopped=true;  getIgnite().<K,V>dataStreamer(cacheName).close(true);  getIgnite().close();}  }
class C{  protected boolean rightOn(Vector2 a,Vector2 b,Vector2 p){  return Segment.getLocation(p,a,b) <= 0;}  }
class C{  protected void incorporateRevocationValues(final Element parentDom,final ValidationContext validationContext){  final DefaultAdvancedSignature.RevocationDataForInclusion revocationsForInclusion=xadesSignature.getRevocationDataForInclusion(validationContext);  if (!revocationsForInclusion.isEmpty()) {    final Element revocationValuesDom=DSSXMLUtils.addElement(documentDom,parentDom,XAdESNamespaces.XAdES,"xades:RevocationValues");    incorporateCrlTokens(revocationValuesDom,revocationsForInclusion.crlTokens);    incorporateOcspTokens(revocationValuesDom,revocationsForInclusion.ocspTokens);  }}  }
class C{  public PropertyEditorSupport(Object source){  if (source == null) {    throw new NullPointerException();  }  setSource(source);}  }
class C{  public void addMarkerElement(String label,double value,RGB color){  if (markersMap.containsKey(label)) {    markersMap.get(label).value=value;    markersMap.get(label).color=color;  } else   markersMap.put(label,new MarkerProperties(value,color));  dirty=true;}  }
class C{  public boolean isSERVER_STATUS_AUTOCOMMIT(){  return this.isServerFlagSet(MySQLConstants.SERVER_STATUS_AUTOCOMMIT);}  }
class C{  public void testBug63800() throws Exception {  try {    Properties props=new NonRegisteringDriver().parseURL(dbUrl,null);    String dbname=props.getProperty(NonRegisteringDriver.DBNAME_PROPERTY_KEY);    if (dbname == null) {      fail("No database selected");    }    for (    String prop : new String[]{"dummyProp","useInformationSchema"}) {      props=new Properties();      if (versionMeetsMinimum(5,7,4)) {        props.put("jdbcCompliantTruncation","false");      }      if (versionMeetsMinimum(5,7,5)) {        String sqlMode=getMysqlVariable("sql_mode");        if (sqlMode.contains("STRICT_TRANS_TABLES")) {          sqlMode=removeSqlMode("STRICT_TRANS_TABLES",sqlMode);          props.put("sessionVariables","sql_mode='" + sqlMode + "'");        }      }      props.setProperty(prop,"true");      Connection conn2=getConnectionWithProps(props);      Statement stmt2=null;      try {        stmt2=conn2.createStatement();        testTimestamp(conn2,stmt2,dbname);        if (versionMeetsMinimum(5,6,5)) {          testDatetime(conn2,stmt2,dbname);        }      }  finally {        if (stmt2 != null) {          stmt2.close();        }        if (conn2 != null) {          conn2.close();        }      }    }  }  finally {    dropTable("testBug63800");  }}  }
class C{  public NodesInfoRequest os(boolean os){  this.os=os;  return this;}  }
class C{  public boolean isNonZero(){  return 0 == ArrayUtils.isEqualConstantTime(this.values,this.zero);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void add(T object){synchronized (mutex) {    ParseRelationOperation<T> operation=new ParseRelationOperation<>(Collections.singleton(object),null);    targetClass=operation.getTargetClass();    getParent().performOperation(key,operation);    knownObjects.add(object);  }}  }
class C{  public int runTest(boolean setBeforeStart) throws Exception {  echo("=-=-= MBSFPreStartPostStartTest: Set MBSF " + (setBeforeStart ? "before" : "after") + " starting the connector server =-=-=");  JMXConnectorServer server=null;  JMXConnector client=null;  final MBeanServer mbs=MBeanServerFactory.createMBeanServer();  try {    final JMXServiceURL url=new JMXServiceURL("service:jmx:rmi://");    server=JMXConnectorServerFactory.newJMXConnectorServer(url,null,mbs);    MBeanServerForwarder mbsf=MBSFInvocationHandler.newProxyInstance();    if (setBeforeStart)     server.setMBeanServerForwarder(mbsf);    server.start();    if (!setBeforeStart)     server.setMBeanServerForwarder(mbsf);    client=server.toJMXConnector(null);    client.connect(null);    final MBeanServerConnection mbsc=client.getMBeanServerConnection();    mbsc.getDefaultDomain();    MBSFInvocationHandler mbsfih=(MBSFInvocationHandler)Proxy.getInvocationHandler(mbsf);    if (mbsfih.getFlag() == true) {      echo("OK: Did go into MBeanServerForwarder!");    } else {      echo("KO: Didn't go into MBeanServerForwarder!");      return 1;    }  } catch (  Exception e) {    echo("Failed to perform operation: " + e);    return 1;  } finally {    if (client != null)     client.close();    if (server != null)     server.stop();    if (mbs != null)     MBeanServerFactory.releaseMBeanServer(mbs);  }  return 0;}  }
class C{  public boolean isTopicNameValid(String topicName){  return !StringUtils.isEmpty(topicName) && !topicName.contains("+") && !topicName.contains("#")&& (this.topicNamePattern == null || this.topicNamePattern.matcher(topicName).matches());}  }
class C{  public AutoReconnectGateway(String remoteIpAddress,int remotePort,BindParameter bindParam) throws IOException {  this.remoteIpAddress=remoteIpAddress;  this.remotePort=remotePort;  this.bindParam=bindParam;  session=newSession();}  }
class C{  public void testOnlyMimeMagic(){  for (  String[] testPage : textBasedFormats) {    String mimeType=getMimeType(urlPrefix,testPage[3].getBytes(defaultCharset),"",true);    assertEquals("",testPage[0],mimeType);  }}  }
class C{  public void update(byte[] data){  if (sha != null) {    sha.update(data);  }  if (md5 != null) {    md5.update(data);  }}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void declareExtensions(ExtensionProfile extProfile){  extProfile.declare(CalendarEntry.class,AccessLevelProperty.getDefaultDescription());  extProfile.declare(CalendarEntry.class,ColorProperty.getDefaultDescription());  extProfile.declare(CalendarEntry.class,HiddenProperty.getDefaultDescription());  extProfile.declare(CalendarEntry.class,OverrideNameProperty.getDefaultDescription());  extProfile.declare(CalendarEntry.class,SelectedProperty.getDefaultDescription());  extProfile.declare(CalendarEntry.class,TimeZoneProperty.getDefaultDescription());  extProfile.declare(CalendarEntry.class,TimesCleanedProperty.getDefaultDescription(false,false));  extProfile.declare(CalendarEntry.class,When.getDefaultDescription());  extProfile.declare(CalendarEntry.class,Where.getDefaultDescription());}  }
class C{  public void add(Iterator<T> iterator){  if (allIterators.contains(iterator)) {    throw new IllegalArgumentException("Duplicate iterator");  }  allIterators.add(iterator);}  }
class C{  public Draw(){  init();}  }
class C{  public static boolean isLess(Date d1,Date d2){  if (d1 == null || d2 == null) {    return false;  }  return d1.compareTo(d2) < 0;}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key instanceof String) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  @Provides @Config("publicDomainName") public static String providePublicDomainName(RegistryEnvironment environment){switch (environment) {case PRODUCTION:    return "registry.google";default :  return "domainregistry-sandbox.co";}}  }
class C{  void handleDepartureOf(InternalDistributedMember owner) throws InterruptedException {  final boolean isDebugEnabled_DLS=logger.isTraceEnabled(LogMarker.DLS);  if (acquireDestroyReadLock(0)) {    try {      if (isDestroyed()) {        if (isDebugEnabled_DLS) {          logger.trace(LogMarker.DLS,"[DLockGrantor.handleDepartureOf] grantor is destroyed; ignoring {}",owner);        }        return;      }      try {        DLockLessorDepartureHandler handler=this.dlock.getDLockLessorDepartureHandler();        if (isDebugEnabled_DLS) {          logger.trace(LogMarker.DLS,"[DLockGrantor.handleDepartureOf] handler = {}",handler);        }        if (handler != null) {          handler.handleDepartureOf(owner,this);        }      } catch (      CancelException e) {        if (isDebugEnabled_DLS) {          logger.trace(LogMarker.DLS,"[DlockGrantor.handleDepartureOf] ignored cancellation (1)");        }      } finally {synchronized (this.suspendLock) {          HashSet removals=new HashSet();          for (Iterator it=readLockCountMap.entrySet().iterator(); it.hasNext(); ) {            Map.Entry entry=(Map.Entry)it.next();            RemoteThread rThread=(RemoteThread)entry.getKey();            if (rThread.getDistributedMember().equals(owner)) {              removals.add(rThread);            }          }          for (Iterator it=removals.iterator(); it.hasNext(); ) {            try {              postReleaseLock((RemoteThread)it.next(),null);            } catch (            CancelException e) {              if (isDebugEnabled_DLS) {                logger.trace(LogMarker.DLS,"[DlockGrantor.handleDepartureOf] ignored cancellation (2)");              }            }          }        }synchronized (this.grantTokens) {          List grantsReferencingMember=new ArrayList();          Collection grants=this.grantTokens.values();          for (Iterator iter=grants.iterator(); iter.hasNext(); ) {            DLockGrantToken grant=(DLockGrantToken)iter.next();            try {              grant.checkDepartureOf(owner,grantsReferencingMember);            } catch (            CancelException e) {              if (isDebugEnabled_DLS) {                logger.trace(LogMarker.DLS,"[DlockGrantor.handleDepartureOf] ignored cancellation (3)");              }            }          }          ArrayList grantsToRemoveIfUnused=new ArrayList();          for (Iterator iter=grantsReferencingMember.iterator(); iter.hasNext(); ) {            DLockGrantToken grant=(DLockGrantToken)iter.next();            try {              grant.handleDepartureOf(owner,grantsToRemoveIfUnused);            } catch (            CancelException e) {              if (isDebugEnabled_DLS) {                logger.trace(LogMarker.DLS,"[DlockGrantor.handleDepartureOf] ignored cancellation (4)");              }            }          }          for (Iterator iter=grantsToRemoveIfUnused.iterator(); iter.hasNext(); ) {            DLockGrantToken grant=(DLockGrantToken)iter.next();            try {              removeGrantIfUnused(grant);            } catch (            CancelException e) {              if (isDebugEnabled_DLS) {                logger.trace(LogMarker.DLS,"[DlockGrantor.handleDepartureOf] ignored cancellation (5)");              }            }          }        }      }    }  finally {      releaseDestroyReadLock();    }  }}  }
class C{  public void addDocument(String name,int parentDivId,String fileExt,int sortOrder,InputStream inputStreamDocumentFile,Reader readerAnnFile) throws Exception {  checkExistsParent(parentDivId);  checkValidDocumentName(parentDivId,name);  m_documents.addNewDocument(name,parentDivId,fileExt,sortOrder,inputStreamDocumentFile,readerAnnFile);}  }
class C{  public static void printScreen(Window element){  PrintUtil.print(new PrintScreenPainter(element),null,"PrintScreen",1,false);}  }
class C{  public void stop(){  if (mService != null) {    mService.stop();  }}  }
class C{  public boolean isHandle(String handle){  return clientHandle.equals(handle);}  }
class C{  boolean parseParams(StatsField sf){  try {    sf.hllOpts=HllOptions.parseHllOptions(sf.localParams,sf.schemaField);    return (null != sf.hllOpts);  } catch (  Exception e) {    throw new SolrException(ErrorCode.BAD_REQUEST,"Unable to parse " + StatsParams.STATS_FIELD + " local params: "+ sf.localParams+ " due to: "+ e.getMessage(),e);  }}  }
class C{  protected void revokeSessionToken(String token) throws IOException, ServletException {  try {    AuthSubUtil.revokeToken(authsubProtocol,authsubHostname,token,null);  } catch (  AuthenticationException e) {    throw new ServletException(e);  }catch (  GeneralSecurityException e) {    throw new ServletException(e);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.383 -0400",hash_original_method="470E22CC32FA86C99C3D62D15B859950",hash_generated_method="87D6EDE96859AF961B8D65DCD93E3C60") @Override public String toString(){  return in.toString();}  }
class C{  public static double exponent(Object left,Object right) throws PageException {  return StrictMath.pow(Caster.toDoubleValue(left),Caster.toDoubleValue(right));}  }
class C{  ConverterSet add(Converter converter,Converter[] removed){  Converter[] converters=iConverters;  int length=converters.length;  for (int i=0; i < length; i++) {    Converter existing=converters[i];    if (converter.equals(existing)) {      if (removed != null) {        removed[0]=null;      }      return this;    }    if (converter.getSupportedType() == existing.getSupportedType()) {      Converter[] copy=new Converter[length];      for (int j=0; j < length; j++) {        if (j != i) {          copy[j]=converters[j];        } else {          copy[j]=converter;        }      }      if (removed != null) {        removed[0]=existing;      }      return new ConverterSet(copy);    }  }  Converter[] copy=new Converter[length + 1];  System.arraycopy(converters,0,copy,0,length);  copy[length]=converter;  if (removed != null) {    removed[0]=null;  }  return new ConverterSet(copy);}  }
class C{  public static byte[] toBytes(int val){  byte[] b=new byte[4];  for (int i=3; i > 0; i--) {    b[i]=(byte)val;    val>>>=8;  }  b[0]=(byte)val;  return b;}  }
class C{  @Override public ObjectNode createObjectNode(){  return _deserializationConfig.getNodeFactory().objectNode();}  }
class C{  private static boolean isScrollable(AccessibilityNodeInfoCompat node){  return node.isScrollable() || supportsAnyAction(node,AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD,AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD);}  }
class C{  public boolean isCategory2(){switch (basicType) {case BT_LONG:case BT_DOUBLE:{      return true;    }}return false;}  }
class C{  private void insertLookAheadChoices(int baseEnd,Action a,RegExp lookAhead){  if (lookAhead.type == sym.BAR) {    RegExp2 r=(RegExp2)lookAhead;    insertLookAheadChoices(baseEnd,a,r.r1);    insertLookAheadChoices(baseEnd,a,r.r2);  } else   if (lookAhead.type == sym.MACROUSE) {    RegExp1 r=(RegExp1)lookAhead;    insertLookAheadChoices(baseEnd,a,macros.getDefinition((String)r.content));  } else {    int len=SemCheck.length(lookAhead);    if (len >= 0) {      IntPair look=insertNFA(lookAhead);      addEpsilonTransition(baseEnd,look.start);      Action x=a.copyChoice(len);      action[look.end]=x;      isFinal[look.end]=true;      scanner.actions.add(x);    } else {      throw new Error("When inserting lookahead expression: unkown expression type " + lookAhead.type + " in "+ lookAhead);    }  }}  }
class C{  public void triggerUpdate(){  try {    UpdaterActivity fragment=(UpdaterActivity)Class.forName(UpdaterActivity.class.getName()).getConstructor().newInstance();    fragment.triggerUpdateOnStartup();    setActiveFragment(fragment);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public InlineQueryResultLocation.InlineQueryResultLocationBuilder latitude(Double latitude){  this.latitude=latitude;  return this;}  }
class C{  public int compareTo(EventElement<K,V> another){  int groupComparison=getGroup().compareTo(another.getGroup());  if (groupComparison != 0) {    return groupComparison;  }  if (another.getViewType() >> MASK_SHIFT == HEADER_MASK)   return 1;  if (another.getViewType() >> MASK_SHIFT == FOOTER_MASK)   return -1;  return eventGroupComparator.compare(getData(),another.getData());}  }
class C{  public StateMachineEnsembleException(IOException e){  super(e);}  }
class C{  private static void tryToSetExcludeStoppedPackagesFlag(Intent intent){  intent.addFlags(Intent.FLAG_EXCLUDE_STOPPED_PACKAGES);}  }
class C{  public Object saveAndFlush(Object entity){  log.info("Saving entity " + entity + " to the data store.");  final Object saved=save(entity);  log.info("Going to flush the data store after the save");  flush();  return saved;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node firstChild;  EntityReference alphaRef;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("class");  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        alphaRef=doc.createEntityReference("alpha");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {    alphaRef=doc.createEntityReference("alpha");    firstChild=titleAttr.getFirstChild();    retval=titleAttr.insertBefore(alphaRef,firstChild);    value=titleAttr.getValue();    assertEquals("attrValue1","\u03b1Y\u03b1",value);  }}  }
class C{  public static String formatDate(Date date){  return formatDate(date,PATTERN_RFC1123);}  }
class C{  public boolean hasRequiredRoles(){  return !this.requiredRoles.isEmpty();}  }
class C{  public TIntHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  _hashingStrategy=this;}  }
class C{  public boolean undefinedOrNull(){  return (Objects.equal(this.getNullModifier(),NullModifier.ISNULL) || Objects.equal(this.getUndefModifier(),UndefModifier.ISUNDEFINED));}  }
class C{  private void handleBrowse(){  ContainerSelectionDialog dialog=new ContainerSelectionDialog(getShell(),ResourcesPlugin.getWorkspace().getRoot(),false,"Select new file container");  if (dialog.open() == ContainerSelectionDialog.OK) {    Object[] result=dialog.getResult();    if (result.length == 1) {      containerText.setText(((Path)result[0]).toString());    }  }}  }
class C{  public synchronized NSObject member(NSObject obj){  for (  NSObject o : set) {    if (o.equals(obj))     return o;  }  return null;}  }
class C{  public boolean hasDependencyIssue(){  return (depIssue != null);}  }
class C{  protected DateTimeConverter makeConverter(){  return new DateConverter();}  }
class C{  static void addBISFunctions(@NotNull Project project,@NotNull CompletionResultSet result){  String functionName;  String tailText=Plugin.resources.getString("lang.sqf.completion.tail_text.bis_function");  for (int i=0; i < SQFStatic.LIST_BIS_FUNCTIONS.size(); i++) {    functionName=SQFStatic.LIST_BIS_FUNCTIONS.get(i);    result.addElement(LookupElementBuilder.createWithSmartPointer(functionName,SQFPsiUtil.createElement(project,functionName,SQFTypes.GLOBAL_VAR)).withIcon(PluginIcons.ICON_SQF_FUNCTION).appendTailText(" " + tailText,true));  }}  }
class C{  private void handleExceptionAndMarkForRetry(PaymentResult pr,IOException e) throws PSPCommunicationException {  PSPCommunicationException pce=new PSPCommunicationException("Debit request could not be sent to the payment service provider successfully",Reason.DEBIT_INVOCATION_FAILED,e);  logger.logWarn(Log4jLogger.SYSTEM_LOG,pce,LogMessageIdentifier.WARN_CHARGING_PROCESS_FAILED);  pr.setProcessingException(pce);  pr.setProcessingStatus(PaymentProcessingStatus.RETRY);  throw pce;}  }
class C{  @NonNull public DividerAdapterBuilder view(@NonNull ViewFactory viewFactory){  return outerView(viewFactory).innerView(viewFactory);}  }
class C{  private ImageManipulator(boolean b,int p){  brighter=b;  percent=p;  canFilterIndexColorModel=true;}  }
class C{  final long newOplogEntryId(){  long result=this.oplogEntryId.incrementAndGet();  return result;}  }
class C{  private static int numericCompaction(int[] codewords,int codeIndex,StringBuilder result) throws FormatException {  int count=0;  boolean end=false;  int[] numericCodewords=new int[MAX_NUMERIC_CODEWORDS];  while (codeIndex < codewords[0] && !end) {    int code=codewords[codeIndex++];    if (codeIndex == codewords[0]) {      end=true;    }    if (code < TEXT_COMPACTION_MODE_LATCH) {      numericCodewords[count]=code;      count++;    } else {      if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      }    }    if (count % MAX_NUMERIC_CODEWORDS == 0 || code == NUMERIC_COMPACTION_MODE_LATCH || end) {      String s=decodeBase900toBase10(numericCodewords,count);      result.append(s);      count=0;    }  }  return codeIndex;}  }
class C{  public boolean isInitialState(){  return this == history.getInitialState();}  }
class C{  private DigicoreNetwork buildSmallNetwork(){  DigicoreNetwork dn=new DigicoreNetwork();  DigicoreActivity da1=new DigicoreActivity("test",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da1.setCoord(new Coord(0.0,0.0));  da1.setFacilityId(Id.create(1,ActivityFacility.class));  DigicoreActivity da2=new DigicoreActivity("test",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da2.setCoord(new Coord(0.0,1.0));  da2.setFacilityId(Id.create(2,ActivityFacility.class));  DigicoreActivity da3=new DigicoreActivity("test",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da3.setCoord(new Coord(1.0,1.0));  da3.setFacilityId(Id.create(3,ActivityFacility.class));  DigicoreActivity da4=new DigicoreActivity("test",TimeZone.getTimeZone("GMT+2"),new Locale("en"));  da4.setCoord(new Coord(1.0,0.0));  da4.setFacilityId(Id.create(4,ActivityFacility.class));  dn.addArc(da1,da2);  dn.addArc(da1,da3);  dn.addArc(da1,da3);  dn.addArc(da3,da1);  dn.addArc(da4,da1);  dn.addArc(da4,da1);  dn.addArc(da4,da1);  return dn;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String sourceAsString(){  if (source == null) {    return null;  }  BytesReference source=sourceRef();  try {    return XContentHelper.convertToJson(source,false);  } catch (  IOException e) {    throw new ElasticsearchParseException("failed to convert source to a json string");  }}  }
class C{  public static boolean isLinux(){  return osName.indexOf("Linux") > -1;}  }
class C{  public static SLModel loadModel(String fileName) throws IOException, ClassNotFoundException {  logger.info("Load trained Models from {} .....",fileName);  SLModel res=null;  ObjectInputStream ios=new ObjectInputStream(new BufferedInputStream(new FileInputStream(fileName)));  res=(SLModel)ios.readObject();  ios.close();  SLParameters.HASHING_MASK=res.numFeatuerBit;  logger.info("Load Model complete!");  return res;}  }
class C{  private HttpEntity paramsToEntity(RequestParams params,ResponseHandlerInterface responseHandler){  HttpEntity entity=null;  try {    if (params != null) {      entity=params.getEntity(responseHandler);    }  } catch (  IOException e) {    if (responseHandler != null) {      responseHandler.sendFailureMessage(0,null,null,e);    } else {      e.printStackTrace();    }  }  return entity;}  }
class C{  public void copyEntity(Entity source,List<String> propertyTypeBlacklist){  Map<String,PropertyList> sourceProperties=source.getTypedPropertyLists();  for (  Entry<String,PropertyList> propertyListMapEntry : sourceProperties.entrySet()) {    copyPropertyList(propertyListMapEntry,propertyTypeBlacklist);  }}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.COMPOSED_CONTENT;}  }
class C{  public MultiMap(){  this(false);}  }
class C{  public void addError(String text,CSTNode context,SourceUnit source) throws CompilationFailedException {  addError(new LocatedMessage(text,context,source));}  }
class C{  public void flushRcsContactProvider(){  if (sLogger.isActivated()) {    sLogger.debug("clear ContactInfo cache");  }synchronized (mContactInfoCache) {    mContactInfoCache.clear();    mLocalContentResolver.delete(CONTENT_URI,null,null);  }}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 1 + ((expr != null) ? expr.costInline(thresh,env,ctx) : 0);}  }
class C{  public static CipherParameters makePBEParameters(PBEKeySpec keySpec,int type,int hash,int keySize,int ivSize){  PBEParametersGenerator generator=makePBEGenerator(type,hash);  byte[] key;  CipherParameters param;  key=convertPassword(type,keySpec);  generator.init(key,keySpec.getSalt(),keySpec.getIterationCount());  if (ivSize != 0) {    param=generator.generateDerivedParameters(keySize,ivSize);  } else {    param=generator.generateDerivedParameters(keySize);  }  for (int i=0; i != key.length; i++) {    key[i]=0;  }  return param;}  }
class C{  private void pushLong(GPR reg1,GPR reg2){  if (VM.VerifyAssertions)   validateStackPush(BYTES_IN_LONG);  if (VM.BuildFor64Addr) {    asm.emitSTD(reg2,spTopOffset - BYTES_IN_LONG,FP);  } else {    asm.emitSTW(reg2,spTopOffset - BYTES_IN_STACKSLOT,FP);    asm.emitSTW(reg1,spTopOffset - 2 * BYTES_IN_STACKSLOT,FP);  }  spTopOffset-=2 * BYTES_IN_STACKSLOT;}  }
class C{  public static List<String> checkAddressesOnSameSubNetwork(LinkedHashMap<String,String> map1,LinkedHashMap<String,String> map2){  List<String> errorMsg=new ArrayList<String>();  if (!map1.isEmpty()) {    Map<String,String> ipv4=new HashMap<String,String>();    ipv4.putAll(map1);    String mask=ipv4.get(InstallerConstants.DISPLAY_LABEL_IPV4_NETMASK);    ipv4.remove(InstallerConstants.DISPLAY_LABEL_IPV4_NETMASK);    if (!isOnSameNetworkIPv4(ipv4.values(),mask)) {      errorMsg.add("IPv4 addresses are not in the same subnet");      log.warn("IPv4 addresses are not in the same subnet");    }  }  if (!map2.isEmpty()) {    Map<String,String> ipv6=new HashMap<String,String>();    ipv6.putAll(map2);    String prefixLength=ipv6.get(InstallerConstants.DISPLAY_LABEL_IPV6_PREFIX);    ipv6.remove(InstallerConstants.DISPLAY_LABEL_IPV6_PREFIX);    if (!isOnSameNetworkIPv6(ipv6.values(),prefixLength)) {      errorMsg.add("IPv6 addresses are not in the same subnet");      log.warn("IPv6 addresses are not in the same subnet");    }  }  return errorMsg;}  }
class C{  public void initializeNamespaces(Map<Integer,String> namespaceMap){  this.namespaceMap=namespaceMap;  initializePrefixes();}  }
class C{  @SuppressWarnings("unchecked") public Action(){  init((Class<Action>)getClass());}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:15.010 -0500",hash_original_method="BBCDAD7BF06FB621822DBBAD11355700",hash_generated_method="235D538D470CAF18D465A30A0FFDA613") @Override final public int hashCode(){  return super.hashCode();}  }
class C{  public EquipmentActionBuilder(Player player,RPAction action){  data=new EquipmentActionData();  this.player=player;  this.action=action;}  }
class C{  private String receiver(Tree tree){  if (tree.getKind() == Tree.Kind.MEMBER_SELECT) {    return ((MemberSelectTree)tree).getExpression().toString();  } else {    return "this";  }}  }
class C{  public NoticeReference(String organization,ASN1EncodableVector noticeNumbers){  this(new DisplayText(organization),noticeNumbers);}  }
class C{  public static String indent(String s){  return indent(s,4,true);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testSingleLineStringManyPointRoundTrip() throws SQLException {  LineStringGenerator pg=new LineStringGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setGenerationAlgorithm(LineStringGenerator.HORZ);  pg.setNumberPoints(1000);  LineString pt=(LineString)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  LineString pt2=(LineString)or.read(st);  assertTrue("The input LineString is not the same as the output LineString",pt.equals(pt2));}  }
class C{  public static void write(int x1,int y1,int majorAxisSpan,int minorAxisSpan,float rotateAngle,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.ELLIPSE_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_ELLIPSE);  dos.writeByte(RENDERTYPE_XY);  dos.writeInt(x1);  dos.writeInt(y1);  dos.writeInt(majorAxisSpan);  dos.writeInt(minorAxisSpan);  dos.writeFloat(rotateAngle);  properties.write(dos);}  }
class C{  public static <T>T eachLine(Path self,String charset,int firstLine,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return IOGroovyMethods.eachLine(newReader(self,charset),firstLine,closure);}  }
class C{  public boolean isMapped(Class<?> classToCheck){  return !isNull(loadGlobals().get(classToCheck.getName())) || !isEmpty(loadAttributes().get(classToCheck.getName()));}  }
class C{  public void incrementVolume(double delta) throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  double vol=getVolume() + delta;  if (vol > 1) {    vol=1;  } else   if (vol < 0) {    vol=0;  }  setVolume(vol);}  }
class C{  public E[] array(){  assertOpen();  return buffer;}  }
class C{  @Override public void addVertex(double par1,double par3,double par5){  if (rawBufferIndex >= rawBufferSize - 40) {    if (rawBufferSize == 0) {      rawBufferSize=0x10000;      rawBuffer=new int[rawBufferSize];    } else {      rawBufferSize*=2;      rawBuffer=Arrays.copyOf(rawBuffer,rawBufferSize);    }  }  ++this.addedVertices;  if (this.drawMode == 7 && convertQuadsToTriangles && this.addedVertices % 4 == 0) {    for (int var7=0; var7 < 2; ++var7) {      int var8=10 * (3 - var7);      if (this.hasTexture) {        this.rawBuffer[this.rawBufferIndex + 3]=this.rawBuffer[this.rawBufferIndex - var8 + 3];        this.rawBuffer[this.rawBufferIndex + 4]=this.rawBuffer[this.rawBufferIndex - var8 + 4];        this.rawBuffer[this.rawBufferIndex + 5]=this.rawBuffer[this.rawBufferIndex - var8 + 5];        this.rawBuffer[this.rawBufferIndex + 6]=this.rawBuffer[this.rawBufferIndex - var8 + 6];      }      if (this.hasBrightness) {        this.rawBuffer[this.rawBufferIndex + 9]=this.rawBuffer[this.rawBufferIndex - var8 + 9];      }      if (this.hasColor) {        this.rawBuffer[this.rawBufferIndex + 7]=this.rawBuffer[this.rawBufferIndex - var8 + 7];      }      this.rawBuffer[this.rawBufferIndex]=this.rawBuffer[(this.rawBufferIndex - var8)];      this.rawBuffer[this.rawBufferIndex + 1]=this.rawBuffer[this.rawBufferIndex - var8 + 1];      this.rawBuffer[this.rawBufferIndex + 2]=this.rawBuffer[this.rawBufferIndex - var8 + 2];      ++this.vertexCount;      this.rawBufferIndex+=10;    }  }  if (this.hasTexture) {    this.rawBuffer[this.rawBufferIndex + 3]=Float.floatToRawIntBits((float)this.textureU);    this.rawBuffer[this.rawBufferIndex + 4]=Float.floatToRawIntBits((float)this.textureV);    this.rawBuffer[this.rawBufferIndex + 5]=Float.floatToRawIntBits(0.0F);    this.rawBuffer[this.rawBufferIndex + 6]=Float.floatToRawIntBits((float)this.textureW);  }  if (this.hasBrightness) {    this.rawBuffer[this.rawBufferIndex + 9]=this.brightness;  }  if (this.hasColor) {    this.rawBuffer[this.rawBufferIndex + 7]=this.color;  }  if (this.hasNormals) {    this.rawBuffer[this.rawBufferIndex + 8]=this.normal;  }  this.rawBuffer[this.rawBufferIndex]=Float.floatToRawIntBits((float)(par1 + this.xOffset));  this.rawBuffer[this.rawBufferIndex + 1]=Float.floatToRawIntBits((float)(par3 + this.yOffset));  this.rawBuffer[this.rawBufferIndex + 2]=Float.floatToRawIntBits((float)(par5 + this.zOffset));  this.rawBufferIndex+=10;  ++this.vertexCount;}  }
class C{  public T caseExportedVariableStatement(ExportedVariableStatement object){  return null;}  }
class C{  @SuppressWarnings("unchecked") public void postProcessBeanFactory(ConfigurableListableBeanFactory configurableListableBeanFactory){  if (configurableListableBeanFactory.containsBean(sessionFactoryBeanName)) {    BeanDefinition sessionFactoryBeanDefinition=configurableListableBeanFactory.getBeanDefinition(sessionFactoryBeanName);    MutablePropertyValues propertyValues=sessionFactoryBeanDefinition.getPropertyValues();    if (mappingResources != null) {      PropertyValue propertyValue=propertyValues.getPropertyValue("mappingResources");      if (propertyValue == null) {        propertyValue=new PropertyValue("mappingResources",new ArrayList());        propertyValues.addPropertyValue(propertyValue);      }      List existingMappingResources=(List)propertyValue.getValue();      existingMappingResources.addAll(mappingResources);    }    if (annotatedClasses != null) {      PropertyValue propertyValue=propertyValues.getPropertyValue("annotatedClasses");      if (propertyValue == null) {        propertyValue=new PropertyValue("annotatedClasses",new ArrayList());        propertyValues.addPropertyValue(propertyValue);      }      List existingMappingResources=(List)propertyValue.getValue();      existingMappingResources.addAll(annotatedClasses);    }    if (configLocations != null) {      PropertyValue propertyValue=propertyValues.getPropertyValue("configLocations");      if (propertyValue == null) {        propertyValue=new PropertyValue("configLocations",new ArrayList());        propertyValues.addPropertyValue(propertyValue);      }      List existingConfigLocations=(List)propertyValue.getValue();      existingConfigLocations.addAll(configLocations);    }    if (hibernateProperties != null) {      PropertyValue propertyValue=propertyValues.getPropertyValue("hibernateProperties");      if (propertyValue == null) {        propertyValue=new PropertyValue("hibernateProperties",new Properties());        propertyValues.addPropertyValue(propertyValue);      }      Properties existingHibernateProperties=(Properties)propertyValue.getValue();      existingHibernateProperties.putAll(hibernateProperties);    }  } else {    throw new NoSuchBeanDefinitionException("No bean named [" + sessionFactoryBeanName + "] exists within the bean factory. "+ "Cannot post process session factory to add Hibernate resource definitions.");  }}  }
class C{  protected final void firePropertyChange(PropertyChangeEvent event){  PropertyChangeSupport aChangeSupport=this.changeSupport;  if (aChangeSupport == null) {    return;  }  aChangeSupport.firePropertyChange(event);}  }
class C{  public EntryFile(File dir,String tag,long timestampMillis) throws IOException {  this.tag=tag;  this.timestampMillis=timestampMillis;  this.flags=DropBoxManager.IS_EMPTY;  this.file=new File(dir,Uri.encode(tag) + "@" + timestampMillis+ ".lost");  this.blocks=0;  new FileOutputStream(this.file).close();}  }
class C{  public Frame copy(){  Frame frame=new Frame(locals.length,stack.length);  System.arraycopy(locals,0,frame.locals,0,locals.length);  System.arraycopy(stack,0,frame.stack,0,stack.length);  frame.top=top;  return frame;}  }
class C{  private void initIndicators(){  if (mIndicators.getChildCount() != mHeroes.size() && mHeroes.size() > 1) {    mIndicators.removeAllViews();    Resources res=mIndicators.getResources();    int size=res.getDimensionPixelOffset(R.dimen.indicator_size);    int margin=res.getDimensionPixelOffset(R.dimen.indicator_margin);    for (int i=0; i < getPagerCount(); i++) {      ImageView indicator=new ImageView(mIndicators.getContext());      indicator.setAlpha(180);      LinearLayout.LayoutParams lp=new LinearLayout.LayoutParams(size,size);      lp.setMargins(margin,0,0,0);      lp.gravity=Gravity.CENTER;      indicator.setLayoutParams(lp);      Drawable drawable=res.getDrawable(R.drawable.selector_indicator);      indicator.setImageDrawable(drawable);      mIndicators.addView(indicator);    }  }}  }
class C{  @Deprecated public User(final String userId){  this(userId,null);}  }
class C{  public boolean isPasswordVisible(){  return passwordVisible;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.894 -0400",hash_original_method="3EE76FAAD44E7D402237FB87195A0164",hash_generated_method="96841BFB408C4B5DF5056E5A74E9CB8E") public BOMInputStream(InputStream delegate,ByteOrderMark... boms){  this(delegate,false,boms);}  }
class C{  public float distance(int x,int y){  float distance=Float.POSITIVE_INFINITY;  return distance;}  }
class C{  public static String localTimeToString(LocalTime time,String emptyTimeString){  return (time == null) ? emptyTimeString : time.toString();}  }
class C{  public void addGroup(final Group group){  group.recursivelySetIds();  if (group.isTopLevelGroup()) {    groupList.add(group);  }  fireGroupAdded(group);}  }
class C{  @SuppressWarnings("unchecked") public static Set<Character> toSet(char[] array){  return toSet(DefaultTypeTransformation.primitiveArrayToList(array));}  }
class C{  public void addDecorator(final ProcessDrawDecorator decorator,final RenderPhase phase){  if (decorator == null) {    throw new IllegalArgumentException("decorator must not be null!");  }  if (phase == null) {    throw new IllegalArgumentException("phase must not be null!");  }  decorators.get(phase).add(decorator);}  }
class C{  public boolean isColumnLookup(int index){  if (index < 0 || index >= m_columns.length)   return false;  return DisplayType.isLookup(m_columns[index].DisplayType);}  }
class C{  private static void addPortMapping(final UPnPMappingType type,final UPnPMapping mapping,final int port){  if (port < 1) {    return;  }  if (mapping.getPort() > 0) {    deletePortMapping(mapping);  }  if ((mapping.isConfigEnabledKeyEmpty() || SB.getConfigBool(mapping.getConfigEnabledKey(),false)) && mapping.getPort() == 0 && ((gatewayDevice != null) || init())) {    String localHostIP;    boolean mapped;    String msg;    try {      localHostIP=toString(gatewayDevice.getLocalAddress());      int portCandidate=port;      while (isInUse(portCandidate) && portCandidate > 0) {        portCandidate=getNewPortCandidate(portCandidate);      }      if (portCandidate > 0) {        mapped=gatewayDevice.addPortMapping(portCandidate,port,localHostIP,mapping.getProtocol(),mapping.getDescription());        msg="mapped port " + port + " to port "+ portCandidate+ " on device "+ gatewayDevice.getFriendlyName()+ ", external IP is "+ gatewayDevice.getExternalIPAddress();      } else {        mapped=false;        msg="no free port found";      }      if (mapped) {        LOG.info("mapped " + msg);        mapping.setPort(portCandidate);        SB.setUpnpPorts(mapping.getConfigPortKey(),portCandidate);      } else {        LOG.warn("could not map " + msg);      }    } catch (    IOException|SAXException e) {      LOG.severe("mapping error: " + e.getMessage());    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.679 -0400",hash_original_method="D665A56B967657697241157E26C6DEC4",hash_generated_method="7B982F46665AEB02475C933C743369B0") public NameFileComparator(IOCase caseSensitivity){  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  private static boolean isPalindrome(String s){  if (s == null || s.length() == 0)   return false;  if (s.length() == 1)   return true;  int i=0;  int len=s.length();  while (i < len / 2) {    if (s.charAt(i) != s.charAt(len - i - 1))     return false;    i++;  }  return true;}  }
class C{  public void publishItems(String entityID,String node,DiscoverItems discoverItems) throws XMPPException {  Connection connection=ServiceDiscoveryManager.this.connection.get();  if (connection == null)   throw new XMPPException("Connection instance already gc'ed");  discoverItems.setType(IQ.Type.SET);  discoverItems.setTo(entityID);  discoverItems.setNode(node);  PacketCollector collector=connection.createPacketCollector(new PacketIDFilter(discoverItems.getPacketID()));  connection.sendPacket(discoverItems);  IQ result=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (result == null) {    throw new XMPPException("No response from the server.");  }  if (result.getType() == IQ.Type.ERROR) {    throw new XMPPException(result.getError());  }}  }
class C{  private void attemptLogin(){  if (mAuthTask != null) {    return;  }  mEmailView.setError(null);  mPasswordView.setError(null);  String email=mEmailView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!isEmailValid(email)) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new UserLoginTask(email,password);    mAuthTask.execute((Void)null);  }}  }
class C{  protected void computeTabsThatFitInComposite(){  tabsThatFitInComposite=Math.round((getSize().y - 22) / getTabHeight());  if (tabsThatFitInComposite <= 0) {    tabsThatFitInComposite=1;  }}  }
class C{  public static <K,V>Map<K,V> plus(Map<K,V> self,Collection<? extends Map.Entry<? extends K,? extends V>> entries){  Map<K,V> map=cloneSimilarMap(self);  putAll(map,entries);  return map;}  }
class C{  protected void fillRaster(int pixels[],int off,int adjust,int x,int y,int w,int h){  if (isSimpleFocus && isNonCyclic && isSimpleLookup) {    simpleNonCyclicFillRaster(pixels,off,adjust,x,y,w,h);  } else {    cyclicCircularGradientFillRaster(pixels,off,adjust,x,y,w,h);  }}  }
class C{  protected boolean isDeviceArray(){  return mDevice instanceof IEspDeviceArray;}  }
class C{  public static int indexOf(String strPattern,String strInput,int offset,boolean caseSensitive) throws MalformedPatternException {  PatternMatcherInput input=new PatternMatcherInput(strInput);  Perl5Matcher matcher=new Perl5Matcher();  int compileOptions=caseSensitive ? 0 : Perl5Compiler.CASE_INSENSITIVE_MASK;  compileOptions+=Perl5Compiler.SINGLELINE_MASK;  if (offset < 1)   offset=1;  Pattern pattern=getPattern(strPattern,compileOptions);  if (offset <= strInput.length())   input.setCurrentOffset(offset - 1);  if (offset <= strInput.length() && matcher.contains(input,pattern)) {    return matcher.getMatch().beginOffset(0) + 1;  }  return 0;}  }
class C{  public static void assertEqual(int expected,int actual){  if (verbose) {    log("assertEqual(" + expected + ", "+ actual+ ")");  }  assertBool(expected == actual);}  }
class C{  public Note importNote(String sourceJson,String noteName,AuthenticationInfo subject) throws IOException {  GsonBuilder gsonBuilder=new GsonBuilder();  gsonBuilder.setPrettyPrinting();  Gson gson=gsonBuilder.registerTypeAdapter(Date.class,new NotebookImportDeserializer()).create();  JsonReader reader=new JsonReader(new StringReader(sourceJson));  reader.setLenient(true);  Note newNote;  try {    Note oldNote=gson.fromJson(reader,Note.class);    newNote=createNote(subject);    if (noteName != null)     newNote.setName(noteName); else     newNote.setName(oldNote.getName());    List<Paragraph> paragraphs=oldNote.getParagraphs();    for (    Paragraph p : paragraphs) {      newNote.addCloneParagraph(p);    }    newNote.persist(subject);  } catch (  IOException e) {    logger.error(e.toString(),e);    throw e;  }  return newNote;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public CHelpSavePane(final IHelpInformation information){  this("",information);}  }
class C{  public void testBasicRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_de:[tone TO tp]","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=4]","//result/doc[2]/int[@name='id'][.=7]");}  }
class C{  @Override public int hashCode(){  return fullyQualifiedName.hashCode();}  }
class C{  long createDateTimeEpochSecond(int savingsSecs){  ZoneOffset wallOffset=createWallOffset(savingsSecs);  LocalDateTime ldt=timeDefinition.createDateTime(windowEnd,standardOffset,wallOffset);  return ldt.toEpochSecond(wallOffset);}  }
class C{  private void beginMyTurn(){  clientgui.setDisplayVisible(true);  GameTurn turn=clientgui.getClient().getMyTurn();  if (turn instanceof GameTurn.CounterGrappleTurn) {    disableButtons();    selectEntity(((GameTurn.CounterGrappleTurn)turn).getEntityNum());    grapple(true);    ready();  } else {    target(null);    selectEntity(clientgui.getClient().getFirstEntityNum());    setNextEnabled(true);    butDone.setEnabled(true);    if (numButtonGroups > 1)     buttons.get(PhysicalCommand.PHYSICAL_MORE).setEnabled(true);  }  clientgui.getBoardView().select(null);}  }
class C{  public boolean removeHeaderView(View v){  if (mHeaderViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeHeader(v)) {      result=true;    }    removeFixedViewInfo(v,mHeaderViewInfos);    return result;  }  return false;}  }
class C{  private Spannable highlightUserHandles(Spannable text){  if (text == null) {    return null;  }  final Matcher matcher=PATTERN_USER_HANDLES.matcher(text);  while (matcher.find()) {    final int start=matcher.start(1);    final int end=matcher.end(1);    text.setSpan(new ForegroundColorSpan(mHighlightColor),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);    text.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  }  return text;}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in[in.length - 1] & 0xff;  if (count > in.length) {    throw new InvalidCipherTextException("pad block corrupted");  }  return count;}  }
class C{  default void environmentStop(EnvironmentClassLoader loader){}  }
class C{  private void moveLaneToBuffer(final double now){  QVehicle veh;  this.moveTransitToQueue(now);  while ((veh=this.vehQueue.peek()) != null) {    if (veh.getEarliestLinkExitTime() > now) {      return;    }    MobsimDriverAgent driver=veh.getDriver();    boolean handled=this.handleTransitStop(now,veh,driver);    if (!handled) {      if ((this.getLink().getId().equals(driver.getDestinationLinkId())) && (driver.chooseNextLinkId() == null)) {        this.addParkedVehicle(veh);        network.simEngine.letVehicleArrive(veh);        this.makeVehicleAvailableToNextDriver(veh,now);        this.vehQueue.poll();        this.usedStorageCapacity-=veh.getSizeInEquivalents();        if (HOLES) {          Hole hole=new Hole();          hole.setEarliestLinkExitTime(now + this.link.getLength() * 3600. / 15. / 1000.);          holes.add(hole);        }        continue;      }      if (!hasFlowCapacityLeftAndBufferSpace()) {        return;      }      if (driver instanceof TransitDriverAgent) {        TransitDriverAgent trDriver=(TransitDriverAgent)driver;        Id<Link> nextLinkId=trDriver.chooseNextLinkId();        if (nextLinkId == null || nextLinkId.equals(trDriver.getCurrentLinkId())) {          network.simEngine.letVehicleArrive(veh);          this.addParkedVehicle(veh);          makeVehicleAvailableToNextDriver(veh,now);          this.vehQueue.poll();          this.usedStorageCapacity-=veh.getSizeInEquivalents();          if (HOLES) {            Hole hole=new Hole();            hole.setEarliestLinkExitTime(now + this.link.getLength() * 3600. / 15. / 1000.);            holes.add(hole);          }          continue;        }      }      addToBuffer(veh,now);      this.vehQueue.poll();      this.usedStorageCapacity-=veh.getSizeInEquivalents();      if (HOLES) {        Hole hole=new Hole();        double offset=this.link.getLength() * 3600. / 15. / 1000.;        hole.setEarliestLinkExitTime(now + 0.9 * offset + 0.2 * MatsimRandom.getRandom().nextDouble() * offset);        holes.add(hole);      }    }  }}  }
class C{  private void writeTrackpoints(final String trackName,final BufferedWriter bw) throws IOException {  Log.i(TAG,"Writing trackpoints");  Cursor c=mDbHelper.getReadableDatabase().rawQuery(TRACKPOINT_SQL_QUERY1,new String[]{String.valueOf(mSession),String.valueOf(0)});  final int colLatitude=c.getColumnIndex(Schema.COL_LATITUDE);  final int colLongitude=c.getColumnIndex(Schema.COL_LONGITUDE);  final int colAltitude=c.getColumnIndex(Schema.COL_ALTITUDE);  final int colTimestamp=c.getColumnIndex(Schema.COL_TIMESTAMP);  bw.write("<trk>");  bw.write("<name>");  bw.write(trackName);  bw.write("</name>");  bw.write("<trkseg>");  long outer=0;  while (!c.isAfterLast()) {    c.moveToFirst();    while (!c.isAfterLast()) {      StringBuffer out=new StringBuffer(32 * 1024);      out.append("<trkpt lat=\"");      out.append(String.valueOf(c.getDouble(colLatitude)));      out.append("\" ");      out.append("lon=\"");      out.append(String.valueOf(c.getDouble(colLongitude)));      out.append("\">");      out.append("<ele>");      out.append(String.valueOf(c.getDouble(colAltitude)));      out.append("</ele>");      out.append("<time>");      out.append(getGpxDate(c.getLong(colTimestamp)));      out.append("</time>");      out.append("</trkpt>");      bw.write(out.toString());      bw.flush();      c.moveToNext();    }    outer+=CURSOR_SIZE;    c.close();    c=mDbHelper.getReadableDatabase().rawQuery(TRACKPOINT_SQL_QUERY1,new String[]{String.valueOf(mSession),String.valueOf(outer)});  }  c.close();  bw.write("</trkseg>");  bw.write("</trk>");  bw.flush();}  }
class C{  public void postEvaluationStatistics(final EvolutionState state){  super.postEvaluationStatistics(state);  boolean newBest=false;  for (int y=0; y < state.population.subpops[0].individuals.length; y++)   if (best_of_run == null || state.population.subpops[0].individuals[y].fitness.betterThan(best_of_run.fitness)) {    best_of_run=(Individual)(state.population.subpops[0].individuals[y].clone());    newBest=true;  }  if (newBest) {    ((SimpleProblemForm)(state.evaluator.p_problem.clone())).describe(state,best_of_run,0,0,0);  }}  }
class C{  public AATreeFileAllocator(long size){  super();  this.capacity=size;  add(new Region(0,capacity - 1));}  }
class C{  @Override void thresholdReached(){  if (DEBUG)   VM.sysWriteln("DCG_Organizer.thresholdReached()");  for (int i=0; i < bufferSize; i=i + 3) {    int calleeCMID=0;    while (calleeCMID == 0) {      calleeCMID=buffer[i + 0];    }    Magic.isync();    CompiledMethod compiledMethod=CompiledMethods.getCompiledMethod(calleeCMID);    if (compiledMethod == null)     continue;    RVMMethod callee=compiledMethod.getMethod();    if (callee.isRuntimeServiceMethod()) {      if (DEBUG)       VM.sysWrite("Skipping sample with runtime service callee");      continue;    }    int callerCMID=buffer[i + 1];    compiledMethod=CompiledMethods.getCompiledMethod(callerCMID);    if (compiledMethod == null)     continue;    RVMMethod stackFrameCaller=compiledMethod.getMethod();    int MCOff=buffer[i + 2];    Offset MCOffset=Offset.fromIntSignExtend(buffer[i + 2]);    int bytecodeIndex=-1;    RVMMethod caller=null;switch (compiledMethod.getCompilerType()) {case CompiledMethod.TRAP:case CompiledMethod.JNI:      if (DEBUG)       VM.sysWrite("Skipping sample with TRAP/JNI caller");    continue;case CompiledMethod.BASELINE:{    BaselineCompiledMethod baseCompiledMethod=(BaselineCompiledMethod)compiledMethod;    bytecodeIndex=baseCompiledMethod.findBytecodeIndexForInstruction(MCOffset);    caller=stackFrameCaller;  }break;case CompiledMethod.OPT:{OptCompiledMethod optCompiledMethod=(OptCompiledMethod)compiledMethod;OptMachineCodeMap mc_map=optCompiledMethod.getMCMap();try {  bytecodeIndex=mc_map.getBytecodeIndexForMCOffset(MCOffset);  if (bytecodeIndex == -1) {    if (DEBUG) {      VM.sysWrite("  *** SKIP SAMPLE ",stackFrameCaller.toString());      VM.sysWrite("@",compiledMethod.toString());      VM.sysWrite(" at MC offset ",MCOff);      VM.sysWrite(" calling ",callee.toString());      VM.sysWriteln(" due to invalid bytecodeIndex");    }    continue;  }} catch (java.lang.ArrayIndexOutOfBoundsException e) {  VM.sysWrite("  ***ERROR: getBytecodeIndexForMCOffset(",MCOffset);  VM.sysWrite(") ArrayIndexOutOfBounds!\n");  e.printStackTrace();  if (VM.ErrorsFatal)   VM.sysFail("Exception in AI organizer.");  caller=stackFrameCaller;  continue;}catch (OptimizingCompilerException e) {  VM.sysWrite("***Error: SKIP SAMPLE: can't find bytecode index in OPT compiled " + stackFrameCaller + "@"+ compiledMethod+ " at MC offset ",MCOff);  VM.sysWrite("!\n");  if (VM.ErrorsFatal)   VM.sysFail("Exception in AI organizer.");  continue;}try {  caller=mc_map.getMethodForMCOffset(MCOffset);} catch (java.lang.ArrayIndexOutOfBoundsException e) {  VM.sysWrite("  ***ERROR: getMethodForMCOffset(",MCOffset);  VM.sysWrite(") ArrayIndexOutOfBounds!\n");  e.printStackTrace();  if (VM.ErrorsFatal)   VM.sysFail("Exception in AI organizer.");  caller=stackFrameCaller;  continue;}catch (OptimizingCompilerException e) {  VM.sysWrite("***Error: SKIP SAMPLE: can't find caller in OPT compiled " + stackFrameCaller + "@"+ compiledMethod+ " at MC offset ",MCOff);  VM.sysWrite("!\n");  if (VM.ErrorsFatal)   VM.sysFail("Exception in AI organizer.");  continue;}if (caller == null) {  VM.sysWrite("  ***ERROR: getMethodForMCOffset(",MCOffset);  VM.sysWrite(") returned null!\n");  caller=stackFrameCaller;  continue;}}break;}Controller.dcg.incrementEdge(caller,bytecodeIndex,callee);}if (thresholdReachedCount > 0) {thresholdReachedCount--;}}  }
class C{  @Override public boolean isModified(){  if (_isDigestModified) {    if (log.isLoggable(Level.FINE))     log.fine(_source.getNativePath() + " digest is modified.");    return true;  }  long sourceLastModified=_source.getLastModified();  long sourceLength=_source.length();  if (!_requireSource && sourceLastModified == 0) {    return false;  } else   if (sourceLength != _length) {    if (log.isLoggable(Level.FINE)) {      log.fine(_source.getNativePath() + " length is modified (" + _length+ " -> "+ sourceLength+ ")");    }    return true;  } else   if (sourceLastModified != _lastModified) {    if (log.isLoggable(Level.FINE))     log.fine(_source.getNativePath() + " time is modified.");    return true;  } else   return false;}  }
class C{  public boolean isLocal(){  return this.dm.getId().equals(this.lockGrantorMember);}  }
class C{  public FlexibleColumnResizeAdapter(int defaultMode,int shiftMode,int controlMode,int altMode){  dMode=defaultMode;  sMode=shiftMode;  cMode=controlMode;  aMode=altMode;}  }
class C{  public int countTokens(){  int count=0;  boolean inToken=false;  for (int i=position, length=string.length(); i < length; i++) {    if (delimiters.indexOf(string.charAt(i),0) >= 0) {      if (returnDelimiters)       count++;      if (inToken) {        count++;        inToken=false;      }    } else {      inToken=true;    }  }  if (inToken)   count++;  return count;}  }
class C{  public GridReflectionCache(@Nullable IgnitePredicate<Field> fp,@Nullable IgnitePredicate<Method> mp){  this.fp=fp;  this.mp=mp;}  }
class C{  public EvaluationStatistics(MultiLabelClassifier classifier,Instances dataset,Result result){  this(classifier,(dataset != null) ? dataset.relationName() : null,result);}  }
class C{  public final boolean isDaemon(){  return daemon;}  }
class C{  public void addGreeting(final String text,final ChatAction action){  add(ConversationStates.IDLE,ConversationPhrases.GREETING_MESSAGES,new GreetingMatchesNameCondition(getName()),true,ConversationStates.ATTENDING,text,action);}  }
class C{  public boolean isSelectionColumn(){  Object oo=get_Value(COLUMNNAME_IsSelectionColumn);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isPrimaryKeyEmbedded(){  return primaryKeyEmbedded;}  }
class C{  private static HashSet<X500Principal> parseIssuerNames(Collection<Object> names) throws IOException {  HashSet<X500Principal> x500Principals=new HashSet<X500Principal>();  for (Iterator<Object> t=names.iterator(); t.hasNext(); ) {    Object nameObject=t.next();    if (nameObject instanceof String) {      x500Principals.add(new X500Name((String)nameObject).asX500Principal());    } else {      try {        x500Principals.add(new X500Principal((byte[])nameObject));      } catch (      IllegalArgumentException e) {        throw (IOException)new IOException("Invalid name").initCause(e);      }    }  }  return x500Principals;}  }
class C{  protected AfterEvent_Impl(){  super();}  }
class C{  boolean isDependentOnCurrentScope(CompiledValue cv){  Set setRItr=getDependencySet(cv,true);  boolean isDependent=false;  if (!setRItr.isEmpty()) {    int currScopeID=currentScope().getScopeID();    for (Iterator itr=setRItr.iterator(); itr.hasNext(); ) {      RuntimeIterator ritr=(RuntimeIterator)itr.next();      if (currScopeID == ritr.getScopeID()) {        isDependent=true;        break;      }    }  }  return isDependent;}  }
class C{  public static String stampToString(long tstamp){  return (stampToString(tstamp,"%04d-%02d-%02dT%02d:%02d:%02d.%06dZ"));}  }
class C{  public final boolean checkTag(int identifier){  return this.id == identifier || this.constrId == identifier;}  }
class C{  private double medianValue(Collection<mxGraphAbstractHierarchyCell> connectedCells,int rankValue){  double[] medianValues=new double[connectedCells.size()];  int arrayCount=0;  Iterator<mxGraphAbstractHierarchyCell> iter=connectedCells.iterator();  while (iter.hasNext()) {    medianValues[arrayCount++]=((mxGraphAbstractHierarchyCell)iter.next()).getGeneralPurposeVariable(rankValue);  }  Arrays.sort(medianValues);  if (arrayCount % 2 == 1) {    return medianValues[arrayCount / 2];  } else   if (arrayCount == 2) {    return ((medianValues[0] + medianValues[1]) / 2.0);  } else {    int medianPoint=arrayCount / 2;    double leftMedian=medianValues[medianPoint - 1] - medianValues[0];    double rightMedian=medianValues[arrayCount - 1] - medianValues[medianPoint];    return (medianValues[medianPoint - 1] * rightMedian + medianValues[medianPoint] * leftMedian) / (leftMedian + rightMedian);  }}  }
class C{  protected void deleteSelectedBean(){  if (Debug.debugging("beanbox"))   Debug.output("Enter> deleteSelectedBean");  if (selectedBean == null || selectedBeanLocation == null) {    if (Debug.debugging("beanbox"))     Debug.output("selectedBean=" + selectedBean);    if (Debug.debugging("beanbox"))     Debug.output("selectedBeanLocation=" + selectedBeanLocation);    return;  }  selectedBeanBox.removeBean(selectedBean);  cutBean=null;  if (Debug.debugging("beanbox"))   Debug.output("Exit> deleteSelectedBean");}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public Long deserializeKey(ITuple tuple){  final byte[] key=tuple.getKeyBuffer().array();  final long id=KeyBuilder.decodeLong(key,0);  return id;}  }
class C{  public static int allParametersAndArgumentsMatch(Parameter[] params,ClassNode[] args){  if (params == null) {    params=Parameter.EMPTY_ARRAY;  }  int dist=0;  if (args.length < params.length)   return -1;  for (int i=0; i < params.length; i++) {    ClassNode paramType=params[i].getType();    ClassNode argType=args[i];    if (!isAssignableTo(argType,paramType))     return -1; else {      if (!paramType.equals(argType))       dist+=getDistance(argType,paramType);    }  }  return dist;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Time(Date date){  SimpleTimeZone tz=new SimpleTimeZone(0,"Z");  SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss");  dateF.setTimeZone(tz);  String d=dateF.format(date) + "Z";  int year=Integer.parseInt(d.substring(0,4));  if (year < 1950 || year > 2049) {    time=new DERGeneralizedTime(d);  } else {    time=new DERUTCTime(d.substring(2));  }}  }
class C{  public void testGetInstance2() throws java.security.cert.CertificateEncodingException, CertificateEncodingException {  boolean certificateException=false;  X509Certificate c=null;  if (this.cert == null) {    return;  }  try {    c=X509Certificate.getInstance(cert.getEncoded());  } catch (  java.security.cert.CertificateEncodingException e) {    fail("Unexpected CertificateEncodingException was thrown.");  }catch (  CertificateException e) {    certificateException=true;  }  if (!certificateException) {    assertNotNull(c);    assertTrue(Arrays.equals(c.getEncoded(),cert.getEncoded()));  }  try {    X509Certificate.getInstance(new byte[]{(byte)1});  } catch (  CertificateException e) {  }  try {    X509Certificate.getInstance((byte[])null);    fail("No expected CertificateException");  } catch (  CertificateException e) {  }}  }
class C{  int encrypt(byte[] plain,int plainOffset,int plainLen,byte[] cipher,int cipherOffset){  if ((plainLen % numBytes) != 0) {    throw new ProviderException("Internal error in input buffering");  }  int nShift=blockSize - numBytes;  int loopCount=plainLen / numBytes;  for (; loopCount > 0; plainOffset+=numBytes, cipherOffset+=numBytes, loopCount--) {    embeddedCipher.encryptBlock(register,0,k,0);    for (int i=0; i < numBytes; i++) {      cipher[i + cipherOffset]=(byte)(k[i] ^ plain[i + plainOffset]);      if (nShift != 0) {        System.arraycopy(register,numBytes,register,0,nShift);      }      System.arraycopy(k,0,register,nShift,numBytes);    }  }  return plainLen;}  }
class C{  public boolean isDisableVmMigrations(){  return disableVmMigrations;}  }
class C{  public String toStringWithPrivate(){  StringBuilder b=new StringBuilder();  b.append(toString());  if (priv != null) {    b.append(" priv:").append(Utils.bytesToHexString(priv.toByteArray()));  }  return b.toString();}  }
class C{  private List<Volume> prepareFullCopyPrimaryVolumes(String name,int copyCount,BlockObject srcBlockObject,VirtualPoolCapabilityValuesWrapper srcCapabilities,List<VolumeDescriptor> volumeDescriptors,VirtualPool vPool){  List<Volume> copyPrimaryVolumes=new ArrayList<>();  VirtualArray vArray=_dbClient.queryObject(VirtualArray.class,srcBlockObject.getVirtualArray());  List<VolumeRecommendation> recommendations=((VPlexScheduler)_scheduler).getBlockScheduler().getRecommendationsForVolumeClones(vArray,vPool,srcBlockObject,srcCapabilities);  if (recommendations.isEmpty()) {    throw APIException.badRequests.noStorageForPrimaryVolumesForVplexVolumeCopies();  }  StringBuilder nameBuilder=new StringBuilder(name);  nameBuilder.append("-0");  int copyIndex=(copyCount > 1) ? 1 : 0;  for (  VolumeRecommendation recommendation : recommendations) {    Volume volume=StorageScheduler.prepareFullCopyVolume(_dbClient,nameBuilder.toString(),srcBlockObject,recommendation,copyIndex++,srcCapabilities);    volume.addInternalFlags(Flag.INTERNAL_OBJECT);    _dbClient.persistObject(volume);    copyPrimaryVolumes.add(volume);    VolumeDescriptor volumeDescriptor=new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_IMPORT_VOLUME,volume.getStorageController(),volume.getId(),volume.getPool(),srcCapabilities);    volumeDescriptors.add(volumeDescriptor);  }  return copyPrimaryVolumes;}  }
class C{  private void applyTorqueAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      double torque=ApplyTorqueDialog.show(ControlUtilities.getParentWindow(this));      if (torque != 0.0) {synchronized (Simulation.LOCK) {          body.applyTorque(torque);        }      }    }  }}  }
class C{  public Collection<SimpleFeature> readFileAndInitialize(final String filename) throws UncheckedIOException {  try {    this.featureSource=ShapeFileReader.readDataFile(filename);    this.init();    SimpleFeature ft=null;    SimpleFeatureIterator it=this.featureSource.getFeatures().features();    this.featureSet=new ArrayList<SimpleFeature>();    log.info("features to read #" + this.featureSource.getFeatures().size());    Counter cnt=new Counter("features read #");    while (it.hasNext()) {      ft=it.next();      this.featureSet.add(ft);      cnt.incCounter();    }    cnt.printCounter();    it.close();    return this.featureSet;  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  public static Name css(String cssName){  return new Name(Strings.lower(cssName));}  }
class C{  boolean isVetoed(){  log.debug("check for veto");  if (!_enabled) {    return true;  }  for (int i=0; i < _controlSensorList.size(); i++) {    ControlSensor controlSensor=_controlSensorList.get(i);    int s=controlSensor.getSensor().getKnownState();    int mode=controlSensor.getState();    if (((mode == VETOACTIVE) && (s == Sensor.ACTIVE)) || ((mode == VETOINACTIVE) && (s == Sensor.INACTIVE))) {      return true;    }  }  Turnout ctl=getCtlTurnout();  if (ctl != null) {    int tstate=ctl.getKnownState();    if (mControlTurnoutState == Route.VETOCLOSED && tstate == Turnout.CLOSED) {      return true;    }    if (mControlTurnoutState == Route.VETOTHROWN && tstate == Turnout.THROWN) {      return true;    }  }  return false;}  }
class C{  protected static ConfigurationEventTypeAxiom parse(String theString) throws EPException {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder;  Document document;  try {    builder=factory.newDocumentBuilder();    document=builder.parse(new InputSource(new StringReader(theString)));  } catch (  ParserConfigurationException ex) {    throw new EPException("Could not get a DOM parser configuration",ex);  }catch (  SAXException ex) {    throw new EPException("Could not parse configuration",ex);  }catch (  IOException ex) {    throw new EPException("Could not read configuration",ex);  }  return parse(document);}  }
class C{  protected ExpressionException invalidKey(String key){  return new ExpressionException("key [" + key + "] doesn't exist in struct");}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.TAG_TITLE__TAG:    setTag((Tag)newValue);  return;case DomPackage.TAG_TITLE__TITLE:setTitle((String)newValue);return;case DomPackage.TAG_TITLE__ACTUAL_TITLE:setActualTitle((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  boolean isSystemTheme(){  return (getClass() == DefaultMetalTheme.class);}  }
class C{  private void addAliasesFromRequest(ExtendedSolrQueryParser up,float tiebreaker){  Iterator<String> it=config.solrParams.getParameterNamesIterator();  while (it.hasNext()) {    String param=it.next();    if (param.startsWith("f.") && param.endsWith(".qf")) {      String fname=param.substring(2,param.length() - 3);      String qfReplacement=config.solrParams.get(param);      Map<String,Float> parsedQf=SolrPluginUtils.parseFieldBoosts(qfReplacement);      if (parsedQf.size() == 0)       return;      up.addAlias(fname,tiebreaker,parsedQf);    }  }}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent e){  String command=e.getActionCommand();  if (Debug.debugging("scaletextpanel")) {    Debug.output("ScaleTextPanel.actionPerformed(): " + command);  }  if (command.equals(setScaleCmd)) {    setScale(scaleField.getText());  }}  }
class C{  public static boolean displayMemoryInformation(Activity activity){  long freeSize=0L;  long totalSize=0L;  long usedSize=-1L;  try {    Runtime info=Runtime.getRuntime();    freeSize=info.freeMemory();    totalSize=info.totalMemory();    usedSize=totalSize - freeSize;  } catch (  Exception e) {    e.printStackTrace();  }  Log.e(LOW_MEMORY_LOG_TAG,"---------------------------------------------------");  Log.e(LOW_MEMORY_LOG_TAG,"usedSize   " + (usedSize / 1048576L) + " MB");  Log.e(LOW_MEMORY_LOG_TAG,"freeSize   " + (freeSize / 1048576L) + " MB");  Log.e(LOW_MEMORY_LOG_TAG,"totalSize  " + (totalSize / 1048576L) + " MB");  Log.e(LOW_MEMORY_LOG_TAG,"---------------------------------------------------");  ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();  ActivityManager activityManager=(ActivityManager)activity.getSystemService(Context.ACTIVITY_SERVICE);  activityManager.getMemoryInfo(mi);  Log.e(LOW_MEMORY_LOG_TAG,"availMem   " + (mi.availMem / 1048576L) + " MB");  Log.e(LOW_MEMORY_LOG_TAG,"totalMem   " + (mi.totalMem / 1048576L) + " MB");  Log.e(LOW_MEMORY_LOG_TAG,"threshold  " + (mi.threshold / 1048576L) + " MB");  Log.e(LOW_MEMORY_LOG_TAG,"lowMemory  " + (mi.lowMemory));  Log.e(LOW_MEMORY_LOG_TAG,"---------------------------------------------------");  return mi.lowMemory;}  }
class C{  private List<List<DimensionIndex>> populateHierarchy(Space space,List<Dimension> dims) throws InterruptedException {  List<List<DimensionIndex>> result=new ArrayList<>();  for (  Dimension dimension : dims) {    logger.info("populateHierarchy " + dimension.toString());    if (dimension.getParentId() == null) {      Axis axis=space.A(dimension);      List<DimensionIndex> hierarchy=populateHierarchy(space,null,null,axis);      if (!hierarchy.isEmpty()) {        result.add(hierarchy);      }    }  }  return result;}  }
class C{  public void writeToNBT(){  NBTTagList list=new NBTTagList();  for (  FluidStack stack : stacks) {    list.appendTag(stack.writeToNBT(new NBTTagCompound()));  }  tag.setTag(NBT_FLUIDS,list);  tag.setInteger(NBT_PROTOCOL,PROTOCOL);}  }
class C{  public void validateTickUnit(){  double newTickUnit;  try {    newTickUnit=Double.parseDouble(this.manualTickUnit.getText());  } catch (  NumberFormatException e) {    newTickUnit=this.manualTickUnitValue;  }  if (newTickUnit > 0.0) {    this.manualTickUnitValue=newTickUnit;  }  this.manualTickUnit.setText(Double.toString(this.manualTickUnitValue));}  }
class C{  public MTreeNode(int node_ID,int seqNo,String name,String description,int parent_ID,boolean isSummary,String imageIndicator,boolean onBar,Color color){  super();  m_node_ID=node_ID;  m_seqNo=seqNo;  m_name=name;  m_description=description;  if (m_description == null)   m_description="";  m_parent_ID=parent_ID;  setSummary(isSummary);  setImageIndicator(imageIndicator);  m_onBar=onBar;  m_color=color;}  }
class C{  @PutMapping @ResponseBody public ResponseEntity<Response<UserVO>> save(@RequestBody @Valid UserVO user){  User eo=m.map(user,User.class);  UserVO saved=m.map(service.save(eo),UserVO.class);  if (user.getId() == null) {    return buildResponse(HttpStatus.CREATED,translate(Messages.CREATED),Messages.CREATED,saved);  } else {    return buildResponse(HttpStatus.OK,translate(Messages.SERVER_OK),Messages.SERVER_OK,saved);  }}  }
class C{  public boolean printingEnabled(OptOptions options,boolean before){  return false;}  }
class C{  protected ServiceManagementRecord(){  super(null);}  }
class C{  public AlternatingSequencesWriter(SequenceDataSource source,File outputDir,long sizeLimit,PrereadType type,boolean compressed,Integer trimQualityThreshold){  super(source,outputDir,sizeLimit,null,type,compressed,trimQualityThreshold);}  }
class C{  public void addParameter(GEPExpressionTreeNode node){  parameters[numParameters++]=node;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case INTEGERLIST:    return isSetIntegerlist();}throw new IllegalStateException();}  }
class C{  public Writer write(Writer writer) throws JSONException {  try {    boolean b=false;    Iterator<?> keys=keys();    writer.write('{');    while (keys.hasNext()) {      if (b) {        writer.write(',');      }      Object k=keys.next();      writer.write(quote(k.toString()));      writer.write(':');      Object v=this.get(k);      if (v instanceof JSONObject) {        ((JSONObject)v).write(writer);      } else       if (v instanceof JSONArray) {        ((JSONArray)v).write(writer);      } else {        writer.write(valueToString(v));      }      b=true;    }    writer.write('}');    return writer;  } catch (  IOException exception) {    throw new JSONException(exception);  }}  }
class C{  private CGraphFreezer(){}  }
class C{  public int referenceLength(final int refId){  return mReferenceLengths[refId];}  }
class C{  @LargeTest public void testNavigationByDocument() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<button>Click</button>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_LEFT,META_STATE_ALT_LEFT_ON);  assertSelectionString("6");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("Click");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<body><button>Click</button></body>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("Click");}  }
class C{  public static void watchObject(int id){  watchSet.add(id);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  int analysis=getAnalysisBits();  if (WalkerFactory.isNaturalDocOrder(analysis)) {    m_inNaturalOrderStatic=true;  } else {    m_inNaturalOrderStatic=false;  }}  }
class C{  public static void writeLines(File file,Collection<?> lines) throws IOException {  writeLines(file,null,lines,null,false);}  }
class C{  @Unpreemptible public void unlockHeavy(Object o){  boolean deflated=false;  mutex.lock();  RVMThread me=RVMThread.getCurrentThread();  if (ownerId != me.getLockingId()) {    mutex.unlock();    raiseIllegalMonitorStateException("heavy unlocking",o);  }  recursionCount--;  if (0 < recursionCount) {    mutex.unlock();    return;  }  if (STATS)   unlockOperations++;  ownerId=0;  RVMThread toAwaken=entering.dequeue();  if (toAwaken == null && entering.isEmpty() && waiting.isEmpty()) {    Offset lockOffset=Magic.getObjectType(o).getThinLockOffset();    if (!lockOffset.isMax()) {      deflate(o,lockOffset);      deflated=true;    }  }  mutex.unlock();  if (toAwaken != null) {    toAwaken.monitor().lockedBroadcastNoHandshake();  }}  }
class C{  protected Object createElementInfo(){  return null;}  }
class C{  protected boolean isUseClassName(){  return useClassName;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void shiftDown(){  if (m_shifter != null) {    m_shifter.set(DoubleSolenoid.Value.kForward);  }}  }
class C{  public static String infixToPostfix(String expression){  LinkedList<String> operatorList=new LinkedList<>();  LinkedList<String> resultList=new LinkedList<>();  Stack<Character> stack=new Stack<>();  expression=insertBlanks(expression);  String[] tokens=expression.split(" ");  for (  String token : tokens) {    if (token.length() == 0)     continue; else     if (token.charAt(0) == '(')     stack.push(token.charAt(0)); else     if (!stack.isEmpty() && stack.peek() == '(' && token.charAt(0) != ')') {      if (Character.isDigit(token.charAt(0)))       resultList.addLast(token); else       if (token.charAt(0) == '+' || token.charAt(0) == '-' || token.charAt(0) == '*' || token.charAt(0) == '/')       operatorList.addFirst(token);    } else     if (!stack.isEmpty() && token.charAt(0) == ')') {      resultList.addAll(operatorList);      operatorList.clear();      stack.pop();    } else     if (token.charAt(0) == '+' || token.charAt(0) == '-')     operatorList.addLast(token); else     if (token.charAt(0) == '*' || token.charAt(0) == '/')     operatorList.addFirst(token); else     if (Character.isDigit(token.charAt(0)))     resultList.addLast(token);  }  String result="";  resultList.addAll(operatorList);  for (  String e : resultList) {    result+=e + " ";  }  return result;}  }
class C{  public void init(BigInteger N,BigInteger g,BigInteger v,Digest digest,SecureRandom random){  this.N=N;  this.g=g;  this.v=v;  this.random=random;  this.digest=digest;}  }
class C{  public Map<byte[],byte[]> hgetAll(final byte[] key){  checkIsInMulti();  client.hgetAll(key);  final List<byte[]> flatHash=client.getBinaryMultiBulkReply();  final Map<byte[],byte[]> hash=new JedisByteHashMap();  final Iterator<byte[]> iterator=flatHash.iterator();  while (iterator.hasNext()) {    hash.put(iterator.next(),iterator.next());  }  return hash;}  }
class C{  private static void applyseInfoSecurityPolicy(Arguments args,Credentials peer,String peerSecurityContext) throws ZygoteSecurityException {  int peerUid=peer.getUid();  if (args.seInfo == null) {    return;  }  if (!(peerUid == 0 || peerUid == Process.SYSTEM_UID)) {    throw new ZygoteSecurityException("This UID may not specify SELinux info.");  }  boolean allowed=SELinux.checkSELinuxAccess(peerSecurityContext,peerSecurityContext,"zygote","specifyseinfo");  if (!allowed) {    throw new ZygoteSecurityException("Peer may not specify SELinux info");  }  return;}  }
class C{  public static boolean isCarteBlanche(String cc){  return isDinersClub(cc);}  }
class C{  public void addTranscodingHint(TranscodingHints.Key key,Object value){  hints.put(key,value);}  }
class C{  final static int internalKeyCodeTranslate(int keyCode){switch (keyCode) {case KeyEvent.KEYCODE_DPAD_DOWN:    return AndroidImplementation.DROID_IMPL_KEY_DOWN;case KeyEvent.KEYCODE_DPAD_UP:  return AndroidImplementation.DROID_IMPL_KEY_UP;case KeyEvent.KEYCODE_DPAD_LEFT:return AndroidImplementation.DROID_IMPL_KEY_LEFT;case KeyEvent.KEYCODE_DPAD_RIGHT:return AndroidImplementation.DROID_IMPL_KEY_RIGHT;case KeyEvent.KEYCODE_DPAD_CENTER:return AndroidImplementation.DROID_IMPL_KEY_FIRE;case KeyEvent.KEYCODE_MENU:return AndroidImplementation.DROID_IMPL_KEY_MENU;case KeyEvent.KEYCODE_CLEAR:return AndroidImplementation.DROID_IMPL_KEY_CLEAR;case KeyEvent.KEYCODE_DEL:return AndroidImplementation.DROID_IMPL_KEY_BACKSPACE;case KeyEvent.KEYCODE_BACK:return AndroidImplementation.DROID_IMPL_KEY_BACK;default :return keyCode;}}  }
class C{  public static String unmask(char charToUnmask,String masked){  if (charToUnmask == '%' || charToUnmask == '\\') {    throw new IllegalArgumentException("Parameter charToMask " + charToUnmask + " is not allowed!");  }  StringBuilder unmaskedStringBuilder=new StringBuilder();  char maskChar='%';  char escapeChar='\\';  boolean escapeCharFound=false;  for (  char c : masked.toCharArray()) {    if (c == maskChar) {      if (escapeCharFound) {        unmaskedStringBuilder.append(maskChar);        escapeCharFound=false;      } else {        unmaskedStringBuilder.append(charToUnmask);      }    } else     if (c == escapeChar) {      if (escapeCharFound) {        unmaskedStringBuilder.append(escapeChar);        escapeCharFound=false;      } else {        escapeCharFound=true;      }    } else {      unmaskedStringBuilder.append(c);    }  }  return unmaskedStringBuilder.toString();}  }
class C{  public void testEqualsUnequal3(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertFalse(aNumber.equals(b));}  }
class C{  public void test_distinctTermScanOptimizer_variable_context_not_projected(){  new Helper(){{      final long rangeCount_sp1=1000L;{        given=select(projection(varNode(s)),where(statementPatternNode(varNode(s),varNode(p),varNode(o),varNode(z),property(Annotations.ESTIMATED_CARDINALITY,rangeCount_sp1))),DISTINCT);      }{        final long newRangeCount=(long)((1.0 / (store.isQuads() ? 4 : 3)) * rangeCount_sp1);        StatementPatternNode sp=statementPatternNode(varNode(s),varNode(p),varNode(o),varNode(z),property(Annotations.ESTIMATED_CARDINALITY,newRangeCount),property(Annotations.DISTINCT_TERM_SCAN_VAR,varNode(s)));        sp.setQueryHint(IPredicate.Annotations.KEY_ORDER,"SPOC");        expected=select(projection(varNode(s)),where(sp),NOT_DISTINCT,NOT_REDUCED);      }    }  }.test();}  }
class C{  void removeRefactoringDescriptors(final RefactoringDescriptorProxy[] proxies,final IProgressMonitor monitor,final String task) throws CoreException {  try {    final Map paths=new HashMap();    monitor.beginTask(task,proxies.length + 300);    for (int index=0; index < proxies.length; index++) {      final IPath path=stampToPath(proxies[index].getTimeStamp());      Collection collection=(Collection)paths.get(path);      if (collection == null) {        collection=new ArrayList(64);        paths.put(path,collection);      }      collection.add(proxies[index]);    }    final IProgressMonitor subMonitor=new SubProgressMonitor(monitor,300);    try {      final Set entries=paths.entrySet();      subMonitor.beginTask(task,entries.size());      for (final Iterator iterator=entries.iterator(); iterator.hasNext(); ) {        final Map.Entry entry=(Map.Entry)iterator.next();        final Collection collection=(Collection)entry.getValue();        removeRefactoringDescriptors((RefactoringDescriptorProxy[])collection.toArray(new RefactoringDescriptorProxy[collection.size()]),(IPath)entry.getKey(),new SubProgressMonitor(subMonitor,1),task);      }    }  finally {      subMonitor.done();    }  }  finally {    monitor.done();  }}  }
class C{  public boolean hasParameterizedElementType(){  return getElementType().isParameterized();}  }
class C{  public static int compare(final IV iv1,final IV iv2){  if (iv1 == iv2)   return 0;  if (iv1 == null)   return -1;  if (iv2 == null)   return 1;  return iv1.compareTo(iv2);}  }
class C{  private BundledBlockData(){}  }
class C{  public static boolean loadingThreads(){synchronized (Cache.getInstance()) {    return sLoadingThreads;  }}  }
class C{  private Result regress(int[] target,String targetName,double[][] regressors,List<String> regressorNames){  double[][] x;  double[] c1;  int numRegressors=regressors.length;  int numCases=target.length;  x=new double[numRegressors + 1][];  c1=new double[numCases];  x[0]=c1;  System.arraycopy(regressors,0,x,1,numRegressors);  for (int i=0; i < numCases; i++) {    x[0][i]=1.0;    c1[i]=1.0;  }  double[] xMeans=new double[numRegressors + 1];  double[] xStdDevs=new double[numRegressors + 1];  double[] y0=new double[numCases];  double[] y1=new double[numCases];  for (int i=0; i < numCases; i++) {    y0[i]=0;    y1[i]=0;  }  int ny0=0;  int ny1=0;  int nc=0;  for (int i=0; i < numCases; i++) {    if (target[i] == 0.0) {      y0[i]=1;      ny0++;    } else {      y1[i]=1;      ny1++;    }    nc+=y0[i] + y1[i];    for (int j=1; j <= numRegressors; j++) {      xMeans[j]+=(y0[i] + y1[i]) * x[j][i];      xStdDevs[j]+=(y0[i] + y1[i]) * x[j][i] * x[j][i];    }  }  for (int j=1; j <= numRegressors; j++) {    xMeans[j]/=nc;    xStdDevs[j]/=nc;    xStdDevs[j]=Math.sqrt(Math.abs(xStdDevs[j] - xMeans[j] * xMeans[j]));  }  xMeans[0]=0.0;  xStdDevs[0]=1.0;  for (int i=0; i < nc; i++) {    for (int j=1; j <= numRegressors; j++) {      x[j][i]=(x[j][i] - xMeans[j]) / xStdDevs[j];    }  }  double[] par=new double[numRegressors + 1];  double[] parStdErr=new double[numRegressors + 1];  double[] coefficients;  par[0]=Math.log((double)ny1 / (double)ny0);  for (int j=1; j <= numRegressors; j++) {    par[j]=0.0;  }  double[][] arr=new double[numRegressors + 1][numRegressors + 2];  double lnV;  double ln1mV;  double llP=2e+10;  double ll=1e+10;  double llN=0.0;  while (Math.abs(llP - ll) > 1e-7) {    llP=ll;    ll=0.0;    for (int j=0; j <= numRegressors; j++) {      for (int k=j; k <= numRegressors + 1; k++) {        arr[j][k]=0.0;      }    }    for (int i=0; i < nc; i++) {      double q;      double v=par[0];      for (int j=1; j <= numRegressors; j++) {        v+=par[j] * x[j][i];      }      if (v > 15.0) {        lnV=-Math.exp(-v);        ln1mV=-v;        q=Math.exp(-v);        v=Math.exp(lnV);      } else {        if (v < -15.0) {          lnV=v;          ln1mV=-Math.exp(v);          q=Math.exp(v);          v=Math.exp(lnV);        } else {          v=1.0 / (1 + Math.exp(-v));          lnV=Math.log(v);          ln1mV=Math.log(1.0 - v);          q=v * (1.0 - v);        }      }      ll=ll - 2.0 * y1[i] * lnV - 2.0 * y0[i] * ln1mV;      for (int j=0; j <= numRegressors; j++) {        double xij=x[j][i];        arr[j][numRegressors + 1]+=xij * (y1[i] * (1.0 - v) + y0[i] * (-v));        for (int k=j; k <= numRegressors; k++) {          arr[j][k]+=xij * x[k][i] * q* (y0[i] + y1[i]);        }      }    }    if (llP == 1e+10) {      llN=ll;    }    for (int j=1; j <= numRegressors; j++) {      for (int k=0; k < j; k++) {        arr[j][k]=arr[k][j];      }    }    for (int i=0; i <= numRegressors; i++) {      double s=arr[i][i];      arr[i][i]=1.0;      for (int k=0; k <= numRegressors + 1; k++) {        arr[i][k]=arr[i][k] / s;      }      for (int j=0; j <= numRegressors; j++) {        if (i != j) {          s=arr[j][i];          arr[j][i]=0.0;          for (int k=0; k <= numRegressors + 1; k++) {            arr[j][k]=arr[j][k] - s * arr[i][k];          }        }      }    }    for (int j=0; j <= numRegressors; j++) {      par[j]+=arr[j][numRegressors + 1];    }  }  double chiSq=llN - ll;  String[] sigMarker=new String[numRegressors];  double[] pValues=new double[numRegressors + 1];  double[] zScores=new double[numRegressors + 1];  for (int j=1; j <= numRegressors; j++) {    par[j]=par[j] / xStdDevs[j];    parStdErr[j]=Math.sqrt(arr[j][j]) / xStdDevs[j];    par[0]=par[0] - par[j] * xMeans[j];    double zScore=par[j] / parStdErr[j];    double prob=norm(Math.abs(zScore));    pValues[j]=prob;    zScores[j]=zScore;  }  parStdErr[0]=Math.sqrt(arr[0][0]);  double zScore=par[0] / parStdErr[0];  pValues[0]=norm(zScore);  zScores[0]=zScore;  double intercept=par[0];  coefficients=par;  return new Result(targetName,regressorNames,xMeans,xStdDevs,numRegressors,ny0,ny1,coefficients,parStdErr,pValues,intercept,ll,sigMarker,chiSq,alpha);}  }
class C{  protected void calculateSamplePoints(){  plotterPoints.clear();  this.minColor=Double.POSITIVE_INFINITY;  this.maxColor=Double.NEGATIVE_INFINITY;  if (colorColumn >= 0) {    Iterator<DataTableRow> sample=this.dataTable.iterator();    while (sample.hasNext()) {      DataTableRow row=sample.next();      double color=row.getValue(colorColumn);      this.minColor=MathFunctions.robustMin(minColor,color);      this.maxColor=MathFunctions.robustMax(maxColor,color);    }  }  Iterator<DataTableRow> sample=this.dataTable.iterator();  ColorProvider colorProvider=getColorProvider();  while (sample.hasNext()) {    DataTableRow row=sample.next();    double xPos=0.0d;    double yPos=0.0d;    double sum=0.0d;    for (int d=0; d < this.dataTable.getNumberOfColumns(); d++) {      if ((d != colorColumn) && (!shouldIgnoreColumn(d))) {        sum+=row.getValue(columnMapping[d]);      }    }    double[] w=new double[this.dataTable.getNumberOfColumns()];    for (int d=0; d < this.dataTable.getNumberOfColumns(); d++) {      if ((d == colorColumn) || (shouldIgnoreColumn(d))) {        continue;      }      w[d]=row.getValue(columnMapping[d]) / sum;    }    for (int d=0; d < this.dataTable.getNumberOfColumns(); d++) {      if ((d == colorColumn) || (shouldIgnoreColumn(d))) {        continue;      }      xPos+=w[d] * anchorVectorX[d];      yPos+=w[d] * anchorVectorY[d];    }    double color=1.0d;    Color borderColor=Color.BLACK;    if (colorColumn >= 0) {      color=colorProvider.getPointColorValue(this.dataTable,row,colorColumn,this.minColor,this.maxColor);      borderColor=colorProvider.getPointBorderColor(this.dataTable,row,colorColumn);    }    plotterPoints.add(new PlotterPoint(xPos,yPos,color,borderColor));  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entityList;  String name;  java.util.Collection expectedResult=new java.util.ArrayList();  expectedResult.add("ent1");  expectedResult.add("ent2");  expectedResult.add("ent3");  expectedResult.add("ent4");  expectedResult.add("ent5");  java.util.Collection expectedResultSVG=new java.util.ArrayList();  expectedResultSVG.add("ent1");  expectedResultSVG.add("ent2");  expectedResultSVG.add("ent3");  expectedResultSVG.add("ent4");  expectedResultSVG.add("ent5");  expectedResultSVG.add("svgunit");  expectedResultSVG.add("svgtest");  java.util.Collection nameList=new java.util.ArrayList();  Node entity;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  for (int indexN1007B=0; indexN1007B < entityList.getLength(); indexN1007B++) {    entity=(Node)entityList.item(indexN1007B);    name=entity.getNodeName();    nameList.add(name);  }  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("entityNamesSVG",expectedResultSVG,nameList);  } else {    assertEquals("entityNames",expectedResult,nameList);  }}  }
class C{  public static CodedException fromFault(QName faultCode,String faultString,String faultActor,String faultDetail){  CodedException ret=new Fault(faultCode,faultString);  ret.faultActor=faultActor;  ret.faultDetail=faultDetail;  return ret;}  }
class C{  private void checkEqualsIsConsistent(UnknownFieldSet set){  assertEquals(set,set);  UnknownFieldSet copy=UnknownFieldSet.newBuilder(set).build();  assertEquals(set,copy);  assertEquals(copy,set);  assertEquals(set.hashCode(),copy.hashCode());}  }
class C{  protected final boolean removeInternal(Tuple t){  return (m_tuples.remove(t));}  }
class C{  public SimpleConstant(String name,boolean booleanValue,String annotation){  this(name,booleanValue);  this.annotation=annotation;}  }
class C{  public Square(){  super(Number.class,Number.class);}  }
class C{  public boolean logout() throws LoginException {  reset();  return true;}  }
class C{  public DebugConnection(final String host,final int port){  debugClientHost=Preconditions.checkNotNull(host,"IE00739: Host can not be null");  Preconditions.checkArgument(NetHelpers.isValidPort(port),"IE00740: Invalid port");  debugClientPort=port;}  }
class C{  private void accumulate(Mutation mutation){  List<Mutation> mutations=(List<Mutation>)storeSes.properties().get(TRANSACTION_BUFFER);  if (mutations == null) {    mutations=new LinkedList<>();    storeSes.properties().put(TRANSACTION_BUFFER,mutations);  }  mutations.add(mutation);}  }
class C{  public boolean delete(){  U.closeQuiet(raf);  readCh.close();  return U.delete(file);}  }
class C{  public GdbPType ptype(String variable) throws IOException, InterruptedException, DebuggerException {  GdbOutput gdbOutput=sendCommand("ptype " + variable);  return GdbPType.parse(gdbOutput);}  }
class C{  @Override public final boolean delete(DBIDRef id){  throw new NotImplementedException();}  }
class C{  public void createPictScenario03() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-06-30 00:00:00");  String supplierAdminId="Pict03Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict03SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict03Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC03Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC03CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetailsTemp=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_03",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceDetailsTemp,TestPriceModel.EXAMPLE_PICT03_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_03",serviceDetails,customerAdmin,role);  long usageStartTime=DateTimeHandling.calculateMillis("2013-07-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-02 10:00:00");  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-02 12:00:00");  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-02 13:00:00");  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-02 14:00:00");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-22 10:00:00");  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance("2013-07-22 10:10:00");  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-08-01 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-11-01 13:00:02"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetailsTemp);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 13:00:03"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_03",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_03",customer);}  }
class C{  private void writeMethodFieldInitializers(IndentingWriter p) throws IOException {  for (int i=0; i < methodFieldNames.length; i++) {    p.p(methodFieldNames[i] + " = ");    RemoteClass.Method method=remoteMethods[i];    MemberDefinition def=method.getMemberDefinition();    Identifier methodName=method.getName();    Type methodType=method.getType();    Type paramTypes[]=methodType.getArgumentTypes();    p.p(def.getClassDefinition().getName() + ".class.getMethod(\"" + methodName+ "\", new java.lang.Class[] {");    for (int j=0; j < paramTypes.length; j++) {      if (j > 0)       p.p(", ");      p.p(paramTypes[j] + ".class");    }    p.pln("});");  }}  }
class C{  public void addToDamaged(final Unit damagedUnit){  m_damaged.add(damagedUnit);}  }
class C{  private List<String> processPartitionValueListFilterOption(List<String> partitionValues,String partitionKey,int partitionColumnPosition,BusinessObjectFormatKey businessObjectFormatKey,Integer businessObjectDataVersion,List<String> storageNames,String storagePlatformType,String excludedStoragePlatformType){  List<String> resultPartitionValues=new ArrayList<>();  List<String> uniqueAndSortedPartitionValues=new ArrayList<>();  uniqueAndSortedPartitionValues.addAll(new TreeSet<>(partitionValues));  boolean partitionValueListUpdated=false;  if (uniqueAndSortedPartitionValues.contains(BusinessObjectDataService.MAX_PARTITION_VALUE_TOKEN)) {    String maxPartitionValue=businessObjectDataDao.getBusinessObjectDataMaxPartitionValue(partitionColumnPosition,businessObjectFormatKey,businessObjectDataVersion,BusinessObjectDataStatusEntity.VALID,storageNames,storagePlatformType,excludedStoragePlatformType,null,null);    if (maxPartitionValue == null) {      throw new ObjectNotFoundException(getPartitionValueNotFoundErrorMessage("maximum",partitionKey,businessObjectFormatKey,businessObjectDataVersion,storageNames));    }    uniqueAndSortedPartitionValues.remove(BusinessObjectDataService.MAX_PARTITION_VALUE_TOKEN);    uniqueAndSortedPartitionValues.add(maxPartitionValue);    partitionValueListUpdated=true;  }  if (uniqueAndSortedPartitionValues.contains(BusinessObjectDataService.MIN_PARTITION_VALUE_TOKEN)) {    String minPartitionValue=businessObjectDataDao.getBusinessObjectDataMinPartitionValue(partitionColumnPosition,businessObjectFormatKey,businessObjectDataVersion,BusinessObjectDataStatusEntity.VALID,storageNames,storagePlatformType,excludedStoragePlatformType);    if (minPartitionValue == null) {      throw new ObjectNotFoundException(getPartitionValueNotFoundErrorMessage("minimum",partitionKey,businessObjectFormatKey,businessObjectDataVersion,storageNames));    }    uniqueAndSortedPartitionValues.remove(BusinessObjectDataService.MIN_PARTITION_VALUE_TOKEN);    uniqueAndSortedPartitionValues.add(minPartitionValue);    partitionValueListUpdated=true;  }  if (partitionValueListUpdated) {    resultPartitionValues.addAll(new TreeSet<>(uniqueAndSortedPartitionValues));  } else {    resultPartitionValues.addAll(uniqueAndSortedPartitionValues);  }  return resultPartitionValues;}  }
class C{  public static int computeEnumSize(final int fieldNumber,final int value){  return computeTagSize(fieldNumber) + computeEnumSizeNoTag(value);}  }
class C{  public String toStringRep(){  if (align < 1 || align > 10) {    return null;  }  String value=ALIGN_VALUES[align];  if (align == SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_NONE) {    return value;  }  if (meetOrSlice < 1 || meetOrSlice > 2) {    return null;  }  return value + ' ' + MEET_OR_SLICE_VALUES[meetOrSlice];}  }
class C{  public TriplyIndexedTable(int c){  table=new Entry[c];}  }
class C{  public boolean containsKey(String key){  return mValues.containsKey(key);}  }
class C{  public void putParameter(String param,String value){  if (param == null) {    throw new IllegalArgumentException("Parameter name cannot be null");  }  if (value == null) {    throw new IllegalArgumentException("Parameter value cannot be null");  }  Map<String,String> newParameters;  if (this.parameters != null) {    newParameters=new LinkedHashMap<>(this.getParameters());  } else {    newParameters=new LinkedHashMap<>();  }  newParameters.put(param,value);  validate(newParameters);  this.parameters=newParameters;}  }
class C{  CompositeRef(List<Sprite> slaves,Composite blend,Sprite adj){  int tmphash=0;  if (blend == null) {    refs=new Object[slaves.size()];  } else {    refs=new Object[slaves.size() + 1];    Object ref=adj.getReference();    refs[slaves.size()]=ref + "@" + blend.toString();    tmphash=(ref == null) ? 42 : ref.hashCode();  }  for (int i=0; i < slaves.size(); i++) {    Object ref=slaves.get(i).getReference();    refs[i]=ref;    if (ref != null) {      tmphash^=ref.hashCode();    }  }  hash=tmphash;}  }
class C{  public static void writeByteCodeAndJimple(String parentDir,SootClass clz){  String methodThatFailed="";  File packageDirectory=new File(parentDir + File.separator + clz.getPackageName().replaceAll("\\.",File.separator));  try {    packageDirectory.mkdirs();    FileOutputStream fos=new FileOutputStream(packageDirectory.toString() + File.separator + clz.getShortName()+ ".class");    OutputStream streamOut=new JasminOutputStream(fos);    OutputStreamWriter osw=new OutputStreamWriter(streamOut);    PrintWriter writerOut=new PrintWriter(osw);    for (    SootMethod method : clz.getMethods()) {      methodThatFailed=method.getName();      if (method.isConcrete())       method.retrieveActiveBody();    }    try {      JasminClass jasminClass=new soot.jimple.JasminClass(clz);      jasminClass.print(writerOut);    } catch (    Exception e) {      logger.warn("Error writing class to file {}",clz,e);    }    writerOut.flush();    streamOut.close();    streamOut=new FileOutputStream(packageDirectory.toString() + File.separator + clz.getShortName()+ ".jimple");    writerOut=new PrintWriter(new OutputStreamWriter(streamOut));    Printer.v().printTo(clz,writerOut);    writerOut.flush();    writerOut.close();    fos.close();    osw.close();    streamOut.close();  } catch (  Exception e) {    logger.error("Method that failed = " + methodThatFailed);    logger.error("Error writing class to file {}",clz,e);  }}  }
class C{  protected int engineGetKeySize(Key key) throws InvalidKeyException {  byte[] encoded=key.getEncoded();  if (encoded.length != 24) {    throw new InvalidKeyException("Invalid key length: " + encoded.length + " bytes");  }  return 112;}  }
class C{  private void insertSymbols(){  for (  final int row : table.getSelectedModelRows()) {    final Symbol s=(Symbol)table.getModel().getValueAt(row,symbolColIdx);    if (engine != null || templateField.getTemplate().isEmpty()) {      templateField.textField.setCaretPosition(nextValidSymbolInsertionPos(s));    }    try {      String text;      if (valueRangeCheckBox.isSelected() && s.text.charAt(0) == '[')       text='[' + s.id + '{'+ rangeFirstSpinner.getValue()+ '-'+ rangeLastSpinner.getValue()+ "}]"; else       text=s.text;      if (s.hasParam)       text=text.replace('X',(char)('0' + (Integer)paramSpinner.getValue()));      templateField.textField.getDocument().insertString(templateField.textField.getCaretPosition(),text,null);      if (s == Symbol.PIB)       templateField.textField.setCaretPosition(templateField.textField.getCaretPosition() - 1);    } catch (    final BadLocationException ble) {      Env.LOGGER.warning("Could not insert symbol: " + s,ble);    }  }  if (valueRangeCheckBox.isSelected())   valueRangeCheckBox.doClick(0);  templateField.textField.requestFocusInWindow();}  }
class C{  public static int[] obtenerMarcas(int value){  String binary=Integer.toBinaryString(value);  binary=StringUtils.reverse(binary);  List listaBitsActivos=new ArrayList();  for (int i=0; i < binary.length(); i++) {    if (binary.charAt(i) == BIT_ACTIVADO)     listaBitsActivos.add(new Integer(i));  }  return ArrayUtils.IntegerToInt(listaBitsActivos.toArray());}  }
class C{  public boolean containsKey(Object key){  return isValidKey(key) && vals[((Enum<?>)key).ordinal()] != null;}  }
class C{  public synchronized String fullValue(){  if (m_Current == m_Root) {    return m_Root.value;  } else {    return (m_Current.context + m_Seperator + m_Current.value);  }}  }
class C{  public CIMObjectPath callModifyReplica(StorageSystem storage,CIMArgument[] inArgs) throws WBEMException {  CIMObjectPath replicationSvcPath=_cimPath.getControllerReplicationSvcPath(storage);  CIMArgument[] outArgs=new CIMArgument[5];  invokeMethod(storage,replicationSvcPath,MODIFY_REPLICA_SYNCHRONIZATION,inArgs,outArgs);  return _cimPath.getCimObjectPathFromOutputArgs(outArgs,JOB);}  }
class C{  private void drawBubble(final Graphics2D g2d,final Color fillColor,final Color outLineColor,final int width,final int height){  g2d.setColor(outLineColor);  g2d.fillRoundRect(BUBBLE_OFFSET,0,width,height,ARC_DIAMETER,ARC_DIAMETER);  g2d.setColor(fillColor);  g2d.fillRoundRect(BUBBLE_OFFSET + 1,1,width - 2,height - 2,ARC_DIAMETER,ARC_DIAMETER);  final Polygon p=new Polygon();  p.addPoint(BUBBLE_OFFSET + 1,MARGIN_WIDTH + 1);  p.addPoint(0,LINE_HEIGHT);  p.addPoint(BUBBLE_OFFSET + 1,LINE_HEIGHT / 2 + MARGIN_WIDTH);  g2d.fillPolygon(p);  g2d.setColor(outLineColor);  g2d.drawLine(0,LINE_HEIGHT,BUBBLE_OFFSET,MARGIN_WIDTH + 1);  g2d.drawLine(0,LINE_HEIGHT,BUBBLE_OFFSET,LINE_HEIGHT / 2 + MARGIN_WIDTH);}  }
class C{  public void takeOver(ChessBoardController newController,boolean isOtherBughouseBoard){  isBughouseOtherBoard=isOtherBughouseBoard;  controller=newController;  controller.setItemChangedListeners(board.getController().getItemChangedListeners());  board.getController().setItemChangedListeners(null);  board.getController().dispose();  board.getSquareHighlighter().removeAllHighlights();  board.getResultDecorator().setDecoration(null);  board.getArrowDecorator().removeAllArrows();  board.hideEngineAnalysisWidget();  board.hideMoveList();  board.setController(newController);  controller.setBoard(board);  board.getController().init();  board.getControl().layout(true,true);}  }
class C{  public void fireModelDestroyed(SessionNode node){  SessionEvent event=new SessionEvent(this.source,node,SessionEvent.MODEL_DESTROYED);  fireSessionEvent(event);}  }
class C{  public void writeRawVarint64(long value) throws IOException {  while (true) {    if ((value & ~0x7FL) == 0) {      writeRawByte((int)value);      return;    } else {      writeRawByte(((int)value & 0x7F) | 0x80);      value>>>=7;    }  }}  }
class C{  public Quaterniond conjugate(){  x=-x;  y=-y;  z=-z;  return this;}  }
class C{  public NumericNode numberNode(float v){  return DoubleNode.valueOf((double)v);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:40.923 -0500",hash_original_method="07C0079BF2F96BA7A92F94B983D4C2AC",hash_generated_method="F80200D97F01813E3D660C511F1F4EE3") static String calculateResponse(String algorithm,String username_value,String realm_value,String passwd,String nonce_value,String nc_value,String cnonce_value,String method,String digest_uri_value,String entity_body,String qop_value,StackLogger stackLogger){  if (stackLogger.isLoggingEnabled()) {    stackLogger.logDebug("trying to authenticate using : " + algorithm + ", "+ username_value+ ", "+ realm_value+ ", "+ (passwd != null && passwd.trim().length() > 0)+ ", "+ nonce_value+ ", "+ nc_value+ ", "+ cnonce_value+ ", "+ method+ ", "+ digest_uri_value+ ", "+ entity_body+ ", "+ qop_value);  }  if (username_value == null || realm_value == null || passwd == null || method == null || digest_uri_value == null || nonce_value == null)   throw new NullPointerException("Null parameter to MessageDigestAlgorithm.calculateResponse()");  String A1=null;  if (algorithm == null || algorithm.trim().length() == 0 || algorithm.trim().equalsIgnoreCase("MD5")) {    A1=username_value + ":" + realm_value+ ":"+ passwd;  } else {    if (cnonce_value == null || cnonce_value.length() == 0)     throw new NullPointerException("cnonce_value may not be absent for MD5-Sess algorithm.");    A1=H(username_value + ":" + realm_value+ ":"+ passwd) + ":" + nonce_value+ ":"+ cnonce_value;  }  String A2=null;  if (qop_value == null || qop_value.trim().length() == 0 || qop_value.trim().equalsIgnoreCase("auth")) {    A2=method + ":" + digest_uri_value;  } else {    if (entity_body == null)     entity_body="";    A2=method + ":" + digest_uri_value+ ":"+ H(entity_body);  }  String request_digest=null;  if (cnonce_value != null && qop_value != null && nc_value != null && (qop_value.equalsIgnoreCase("auth") || qop_value.equalsIgnoreCase("auth-int"))) {    request_digest=KD(H(A1),nonce_value + ":" + nc_value+ ":"+ cnonce_value+ ":"+ qop_value+ ":"+ H(A2));  } else {    request_digest=KD(H(A1),nonce_value + ":" + H(A2));  }  return request_digest;}  }
class C{  public RightFlipAnimator(Context context){  super(context);}  }
class C{  private void deleteImpl(int startIndex,int endIndex,int len){  System.arraycopy(buffer,endIndex,buffer,startIndex,size - endIndex);  size-=len;}  }
class C{  public boolean startPrefixMapping(String prefix,String uri,boolean shouldFlush) throws org.xml.sax.SAXException {  boolean pushed;  int pushDepth;  if (shouldFlush) {    flushPending();    pushDepth=m_elemContext.m_currentElemDepth + 1;  } else {    pushDepth=m_elemContext.m_currentElemDepth;  }  pushed=m_prefixMap.pushNamespace(prefix,uri,pushDepth);  if (pushed) {    m_saxHandler.startPrefixMapping(prefix,uri);    if (getShouldOutputNSAttr()) {      String name;      if (EMPTYSTRING.equals(prefix)) {        name="xmlns";        addAttributeAlways(XMLNS_URI,name,name,"CDATA",uri,false);      } else {        if (!EMPTYSTRING.equals(uri)) {          name="xmlns:" + prefix;          addAttributeAlways(XMLNS_URI,prefix,name,"CDATA",uri,false);        }      }    }  }  return pushed;}  }
class C{  public boolean isInTargetZone(float x,float y){  return (Math.abs(x - mX) <= mTargetRadiusPx && Math.abs(y - mY + mPinPadding) <= mTargetRadiusPx);}  }
class C{  private void readHeader() throws IOException {  int size=input.readShort();  majorVersion=input.readShort();  minorVersion=input.readShort();  metaData=new String[input.readShort()];  int mlen=metaData.length;  for (int iter=0; iter < mlen; iter++) {    metaData[iter]=input.readUTF();  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\ttreat missing values as a seperate " + "value.","M",0,"-M"));  return newVector.elements();}  }
class C{  public ItemHit itemCategory(String value){  setString(ITEM_CATEGORY,value);  return this;}  }
class C{  protected void renderList(final MBasicTable table,final Table datatable) throws BadElementException {  final int columnCount=table.getColumnCount();  final int rowCount=table.getRowCount();  final Font font=FontFactory.getFont(FontFactory.HELVETICA,10,Font.NORMAL);  datatable.getDefaultCell().setBorderWidth(1);  datatable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);  Object value;  String text;  int horizontalAlignment;  for (int k=0; k < rowCount; k++) {    for (int i=0; i < columnCount; i++) {      value=getValueAt(table,k,i);      if (value instanceof Number || value instanceof Date) {        horizontalAlignment=Element.ALIGN_RIGHT;      } else       if (value instanceof Boolean) {        horizontalAlignment=Element.ALIGN_CENTER;      } else {        horizontalAlignment=Element.ALIGN_LEFT;      }      datatable.getDefaultCell().setHorizontalAlignment(horizontalAlignment);      text=getTextAt(table,k,i);      datatable.addCell(new Phrase(8,text != null ? text : "",font));    }  }}  }
class C{  public SourceLibrary(AbstractClassLibrary parent){  super(parent);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void expectIllegalStateForUninitializedExceptionType(){  exceptionRule.expect(IllegalStateException.class);  exceptionRule.expectMessage("FbExceptionBuilder requires call to warning() or exception() first");}  }
class C{  public boolean isShowPreference(){  return !X_AD_Role.PREFERENCETYPE_None.equals(getPreferenceType());}  }
class C{  private double stopProbUsingEntropy(){  String debug="(KStarNominalAttribute.stopProbUsingEntropy)";  if (m_ClassType != Attribute.NOMINAL) {    System.err.println("Error: " + debug + " attribute class must be nominal!");    System.exit(1);  }  int itcount=0;  double stopProb;  double lower, upper, pstop;  double bestminprob=0.0, bestpsum=0.0;  double bestdiff=0.0, bestpstop=0.0;  double currentdiff, lastdiff, stepsize, delta;  KStarWrapper botvals=new KStarWrapper();  KStarWrapper upvals=new KStarWrapper();  KStarWrapper vals=new KStarWrapper();  lower=0.0 + ROOT_FINDER_ACCURACY / 2.0;  upper=1.0 - ROOT_FINDER_ACCURACY / 2.0;  calculateEntropy(upper,upvals);  calculateEntropy(lower,botvals);  if (upvals.avgProb == 0) {    calculateEntropy(lower,vals);  } else {    if ((upvals.randEntropy - upvals.actEntropy < botvals.randEntropy - botvals.actEntropy) && (botvals.randEntropy - botvals.actEntropy > FLOOR)) {      bestpstop=pstop=lower;      stepsize=INITIAL_STEP;      bestminprob=botvals.minProb;      bestpsum=botvals.avgProb;    } else {      bestpstop=pstop=upper;      stepsize=-INITIAL_STEP;      bestminprob=upvals.minProb;      bestpsum=upvals.avgProb;    }    bestdiff=currentdiff=FLOOR;    itcount=0;    while (true) {      itcount++;      lastdiff=currentdiff;      pstop+=stepsize;      if (pstop <= lower) {        pstop=lower;        currentdiff=0.0;        delta=-1.0;      } else       if (pstop >= upper) {        pstop=upper;        currentdiff=0.0;        delta=-1.0;      } else {        calculateEntropy(pstop,vals);        currentdiff=vals.randEntropy - vals.actEntropy;        if (currentdiff < FLOOR) {          currentdiff=FLOOR;          if ((Math.abs(stepsize) < INITIAL_STEP) && (bestdiff == FLOOR)) {            bestpstop=lower;            bestminprob=botvals.minProb;            bestpsum=botvals.avgProb;            break;          }        }        delta=currentdiff - lastdiff;      }      if (currentdiff > bestdiff) {        bestdiff=currentdiff;        bestpstop=pstop;        bestminprob=vals.minProb;        bestpsum=vals.avgProb;      }      if (delta < 0) {        if (Math.abs(stepsize) < ROOT_FINDER_ACCURACY) {          break;        } else {          stepsize/=-2.0;        }      }      if (itcount > ROOT_FINDER_MAX_ITER) {        break;      }    }  }  m_SmallestProb=bestminprob;  m_AverageProb=bestpsum;switch (m_MissingMode) {case M_DELETE:    m_MissingProb=0.0;  break;case M_NORMAL:m_MissingProb=1.0;break;case M_MAXDIFF:m_MissingProb=m_SmallestProb;break;case M_AVERAGE:m_MissingProb=m_AverageProb;break;}if (Math.abs(bestpsum - m_TotalCount) < EPSILON) {stopProb=1.0;} else {stopProb=bestpstop;}return stopProb;}  }
class C{  public TextDrawer scaleRegistration(float regX,float regY){  setScaleRegistration(regX,regY);  return this;}  }
class C{  private Boolean isSMISProviderConnected(String storageSystemURI){  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,URI.create(storageSystemURI));  if (null != storageSystem.getSmisConnectionStatus() && ConnectionStatus.CONNECTED.toString().equalsIgnoreCase(storageSystem.getSmisConnectionStatus())) {    return true;  } else {    _logger.info("Subscription will not be initiated for storage device {} as the storage provider is in NOT_CONNECTED state",storageSystemURI);    return false;  }}  }
class C{  @Override public void onStart(){  super.onStart();  EventBus.getDefault().register(this);  if (ctlr != null) {    ctlr.start();  }}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.FUNCTION_BLOCK;}  }
class C{  private CNodeTypeSwitcher(){}  }
class C{  private Class<?> findServiceInterface(Class<?> serviceClass){  Class<?> serviceInterface=null;  if (AnnotationUtils.isAnnotationDeclaredLocally(serviceAnnotationType,serviceClass)) {    for (    Class<?> interfaceClass : serviceClass.getInterfaces()) {      if (AnnotationUtils.isAnnotationDeclaredLocally(serviceInterfaceAnnotationType,interfaceClass)) {        serviceInterface=interfaceClass;      }    }  }  return serviceInterface;}  }
class C{  public void addStandardTime(StandardTime standardTime){  addComponent(standardTime);}  }
class C{  public static boolean isValidNCName(String ncName){  if (ncName.length() == 0)   return false;  char ch=ncName.charAt(0);  if (isNCNameStart(ch) == false)   return false;  for (int i=1; i < ncName.length(); i++) {    ch=ncName.charAt(i);    if (isNCName(ch) == false) {      return false;    }  }  return true;}  }
class C{  public void blockRequestOnBuckets(Range<Integer> splitRange){  trace("[{}] Block requests on buckets : {}",gondola.getHostId(),splitRange);  bucketLocks.putIfAbsent(splitRange,new CountDownLatch(1));}  }
class C{  private void createClientEntity(){  this.clientId=ClientHelper.createClient(this.requestSpec,this.responseSpec);  ClientHelper.verifyClientCreatedOnServer(this.requestSpec,this.responseSpec,this.clientId);}  }
class C{  public PublishingToMarketplaceNotPermittedException(String message){  super(message);}  }
class C{  private void enforceAddedRule(ACLRule denyRule){  Set<String> dpidSet;  if (denyRule.getNw_src() != null) {    dpidSet=apManager.getDpidSet(denyRule.getNw_src_prefix(),denyRule.getNw_src_maskbits());  } else {    dpidSet=apManager.getDpidSet(denyRule.getNw_dst_prefix(),denyRule.getNw_dst_maskbits());  }  for (  String dpid : dpidSet) {    String flowName;    List<Integer> allowRuleList=deny2Allow.get(denyRule.getId());    for (    int allowRuleId : allowRuleList) {      flowName="ACLRule_" + allowRuleId + "_"+ dpid;      generateFlow(aclRules.get(allowRuleId),dpid,flowName);    }    flowName="ACLRule_" + denyRule.getId() + "_"+ dpid;    generateFlow(denyRule,dpid,flowName);  }}  }
class C{  public static void storagePoolsJson(String id){  List<StoragePoolInfo> items=Lists.newArrayList();  CachedResources<StorageSystemRestRep> storageSystems=StorageSystemUtils.createCache();  for (  StoragePoolRestRep storagePool : StoragePoolUtils.getStoragePoolsAssignedToVirtualArray(id)) {    StoragePoolInfo item=new StoragePoolInfo(storagePool,storageSystems);    item.assigned=VirtualArrayUtils.isAssigned(storagePool,id);    items.add(item);  }  renderJSON(DataTablesSupport.createJSON(items,params));}  }
class C{  private Write(){}  }
class C{  public void queryFirmwareVersion(){  if (!isConnected()) {    onError(OneSheeldError.DEVICE_NOT_CONNECTED);    return;  } else   if (isUpdatingFirmware()) {    onError(OneSheeldError.FIRMWARE_UPDATE_IN_PROGRESS);    return;  }  Log.i("Device " + this.name + ": Query firmware version.");  isFirmwareVersionQueried=false;  sendFirmwareVersionQueryFrame();}  }
class C{  @SuppressWarnings("OverloadedVarargsMethod") static <T>T checkNotNull(final T reference,@NonNls final String errorMessage,@NonNls final Object... args){  if (reference == null) {    throw new NullPointerException(String.format(errorMessage,args));  }  return reference;}  }
class C{  public WhileStatement newWhileStatement(){  return new WhileStatement(this);}  }
class C{  public List<Property> properties(Type type){  ensureLoaded();  ArrayList<Property> result=new ArrayList<Property>();  for (  Artifact member : artifacts.values()) {    if (member instanceof Property) {      Property p=(Property)member;      if (type == null || p.type().isAssignableFrom(type)) {        result.add(p);      }    }  }  return result;}  }
class C{  public MutablePeriod(long startInstant,long endInstant){  super(startInstant,endInstant,null,null);}  }
class C{  public void testLoadSearchResults_showsSpinner(){  mController.loadSearchResults();  verify(mFragmentMockUi).showSpinner(true);}  }
class C{  public void addExtraInput(){  ChoiceInputAnchor arg=new ChoiceInputAnchor();  inputAnchors.add(arg);  inputSpace.getChildren().add(arg);  lanes.forEach(null);  inputSpace.setMinHeight(35);  initiateConnectionChanges();}  }
class C{  private void signalNotEmpty(){  final ReentrantLock takeLock=this.takeLock;  takeLock.lock();  try {    notEmpty.signal();  }  finally {    takeLock.unlock();  }}  }
class C{  public void writeLEShort(short s) throws IOException {  out.write(s & 0xFF);  out.write((s >>> 8) & 0xFF);  written+=2;}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  private boolean checkSupertypes(Class<?> cls){  for (  Class<?> c : knownParameterizables) {    if (c.isAssignableFrom(cls)) {      return true;    }  }  return false;}  }
class C{  public static FileResource softwareModuleFilename(final Long softwareModuleId,final String filename){  final FileResource resource=new FileResource();  resource.softwareModuleFilenameResource=new SoftwareModuleFilenameResource(softwareModuleId,filename);  return resource;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (moreOp_1: ");  result.append(moreOp_1);  result.append(')');  return result.toString();}  }
class C{  @Deprecated public static Source fromFileName(CharSequence chars,String fileName) throws IOException {  CompilerAsserts.neverPartOfCompilation("do not call Source.fromFileName from compiled code");  assert chars != null;  final File file=new File(fileName);  final String path=file.getCanonicalPath();  Content content=new ClientManagedFileSourceImpl(file,fileName,path,chars);  Source source=new SourceImpl(content);  return source;}  }
class C{  private void nextStream() throws IOException {  if (in != null) {    in.close();  }  if (e.hasMoreElements()) {    in=e.nextElement();    if (in == null) {      throw new NullPointerException("element is null");    }  } else {    in=null;  }}  }
class C{  @Override public boolean isPropertySupported(String name){  return DEFINITION_PROPERTY.equals(name);}  }
class C{  public SimpleRegister(byte b1,byte b2){  register[0]=b1;  register[1]=b2;}  }
class C{  public static ArrayList<Stock> fromJson(JSONArray jsonQuotes) throws JSONException {  ArrayList<Stock> stocks=new ArrayList<Stock>();  for (int i=0; i < jsonQuotes.length(); i++) {    JSONObject jsonQuoteItem=(JSONObject)jsonQuotes.get(i);    stocks.add(new Stock(jsonQuoteItem));  }  return stocks;}  }
class C{  private boolean isTmcsrUfSet(){  return (tmcsr & TMCSR_UF_MASK) != 0;}  }
class C{  @Override public int executeUpdate(String sql,int[] columnIndexes) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("executeUpdate(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    }    return executeUpdateInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mYAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] pts=new float[2];  Path limitLinePath=new Path();  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    mLimitLinePaint.setStyle(Paint.Style.STROKE);    mLimitLinePaint.setColor(l.getLineColor());    mLimitLinePaint.setStrokeWidth(l.getLineWidth());    mLimitLinePaint.setPathEffect(l.getDashPathEffect());    pts[1]=l.getLimit();    mTrans.pointValuesToPixel(pts);    limitLinePath.moveTo(mViewPortHandler.contentLeft(),pts[1]);    limitLinePath.lineTo(mViewPortHandler.contentRight(),pts[1]);    c.drawPath(limitLinePath,mLimitLinePaint);    limitLinePath.reset();    String label=l.getLabel();    if (label != null && !label.equals("")) {      float xOffset=Utils.convertDpToPixel(4f);      float yOffset=l.getLineWidth() + Utils.calcTextHeight(mLimitLinePaint,label) / 2f;      mLimitLinePaint.setStyle(l.getTextStyle());      mLimitLinePaint.setPathEffect(null);      mLimitLinePaint.setColor(l.getTextColor());      mLimitLinePaint.setStrokeWidth(0.5f);      mLimitLinePaint.setTextSize(l.getTextSize());      if (l.getLabelPosition() == LimitLabelPosition.POS_RIGHT) {        mLimitLinePaint.setTextAlign(Align.RIGHT);        c.drawText(label,mViewPortHandler.contentRight() - xOffset,pts[1] - yOffset,mLimitLinePaint);      } else {        mLimitLinePaint.setTextAlign(Align.LEFT);        c.drawText(label,mViewPortHandler.offsetLeft() + xOffset,pts[1] - yOffset,mLimitLinePaint);      }    }  }}  }
class C{  public TokenInfo toDTO(){  return new TokenInfo(type,friendlyName,id,readOnly,available,active,serialNumber,label,slotIndex,status,Collections.unmodifiableList(getKeysAsDTOs()),Collections.unmodifiableMap(tokenInfo));}  }
class C{  public static boolean isValidGMonthDay(String value){  String regex="--\\d\\d-\\d\\d(Z|(\\+|-)\\d\\d:\\d\\d)?";  if (value.matches(regex)) {    return isValidCalendarValue(value);  } else {    return false;  }}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  @Override protected boolean isHorizontal(){  return true;}  }
class C{  public TriangulationProcess(){  this(TriangulationAlgorithm.DTSweep);}  }
class C{  private void writeNodesFiles(String outputFolder) throws IOException {  if (this.nodesChecked) {    writeNodeStatisticsFile(outputFolder);    exportNodesToShape(outputFolder);  }}  }
class C{  private static Vector findFirstPrimes(int count){  Vector primes=new Vector(count);  for (int i=0; i != count; i++) {    primes.addElement(BigInteger.valueOf(smallPrimes[i]));  }  return primes;}  }
class C{  @Override public boolean isRowAvailable(){  if (resultSet == null) {    return (false);  } else   if (index < 0) {    return (false);  }  try {    if (resultSet.absolute(index + 1)) {      return (true);    } else {      return (false);    }  } catch (  SQLException e) {    throw new FacesException(e);  }}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public void seekStart(long pos) throws IOException {  flushBuffer();  StreamImpl source=_source;  if (source != null) {    source.seekStart(pos);    _position=pos;  }}  }
class C{  public String formatUnMountCmd(String dataMover,String path,String protocol){  StringBuilder cmd=new StringBuilder();  cmd.append(" ");  cmd.append(dataMover);  cmd.append(" ");  cmd.append("-perm");  cmd.append(" ");  cmd.append(path);  return cmd.toString();}  }
class C{  public FileFormat(String name,String mimeType,Charset charset,String fileExtension){  this(name,Arrays.asList(mimeType),charset,Arrays.asList(fileExtension));}  }
class C{  public boolean isAbsolute(){  return (separators & HAS_LEADING) != 0;}  }
class C{  @POST @Path("/property/createProperty") @Consumes({MediaType.MULTIPART_FORM_DATA}) @Produces(MediaType.APPLICATION_JSON) public String createProperty(@FormDataParam("propertyTypeMasterCode") String propertyTypeMasterCode,@FormDataParam("propertyCategoryCode") String propertyCategoryCode,@FormDataParam("apartmentCmplxCode") String apartmentCmplxCode,@FormDataParam("ownerDetails") String ownerDetails,@FormDataParam("mutationReasonCode") String mutationReasonCode,@FormDataParam("extentOfSite") String extentOfSite,@FormDataParam("isExtentAppurtenantLand") String isExtentAppurtenantLand,@FormDataParam("occupancyCertificationNo") String occupancyCertificationNo,@FormDataParam("isSuperStructure") Boolean isSuperStructure,@FormDataParam("isBuildingPlanDetails") Boolean isBuildingPlanDetails,@FormDataParam("regdDocNo") String regdDocNo,@FormDataParam("regdDocDate") String regdDocDate,@FormDataParam("localityCode") String localityCode,@FormDataParam("street") String street,@FormDataParam("electionWardCode") String electionWardCode,@FormDataParam("doorNo") String doorNo,@FormDataParam("enumerationBlockCode") String enumerationBlockCode,@FormDataParam("pinCode") String pinCode,@FormDataParam("isCorrAddrDiff") Boolean isCorrAddrDiff,@FormDataParam("corrAddr1") String corrAddr1,@FormDataParam("corrAddr2") String corrAddr2,@FormDataParam("corrPinCode") String corrPinCode,@FormDataParam("hasLift") Boolean hasLift,@FormDataParam("hasToilet") Boolean hasToilet,@FormDataParam("hasWaterTap") Boolean hasWaterTap,@FormDataParam("hasElectricity") Boolean hasElectricity,@FormDataParam("hasAttachedBathroom") String hasAttachedBathroom,@FormDataParam("hasWaterHarvesting") String hasWaterHarvesting,@FormDataParam("floorTypeCode") String floorTypeCode,@FormDataParam("roofTypeCode") String roofTypeCode,@FormDataParam("wallTypeCode") String wallTypeCode,@FormDataParam("woodTypeCode") String woodTypeCode,@FormDataParam("floorDetails") String floorDetails,@FormDataParam("surveyNumber") String surveyNumber,@FormDataParam("pattaNumber") String pattaNumber,@FormDataParam("vacantLandArea") Double vacantLandArea,@FormDataParam("marketValue") Double marketValue,@FormDataParam("currentCapitalValue") Double currentCapitalValue,@FormDataParam("completionDate") String completionDate,@FormDataParam("northBoundary") String northBoundary,@FormDataParam("southBoundary") String southBoundary,@FormDataParam("eastBoundary") String eastBoundary,@FormDataParam("westBoundary") String westBoundary,@FormDataParam("photoAsmnt") InputStream photoAsmntStream,@FormDataParam("photoAsmnt") FormDataContentDisposition photoAsmntDisp,@FormDataParam("bldgPermCopy") InputStream bldgPermCopyStream,@FormDataParam("bldgPermCopy") FormDataContentDisposition bldgPermCopyDisp,@FormDataParam("atstdCopyPropDoc") InputStream atstdCopyPropDocStream,@FormDataParam("atstdCopyPropDoc") FormDataContentDisposition atstdCopyPropDocDisp,@FormDataParam("nonJudcStamp") InputStream nonJudcStampStream,@FormDataParam("nonJudcStamp") FormDataContentDisposition nonJudcStampDisp,@FormDataParam("afdvtBond") InputStream afdvtBondStream,@FormDataParam("afdvtBond") FormDataContentDisposition afdvtBondDisp,@FormDataParam("deathCertCopy") InputStream deathCertCopyStream,@FormDataParam("deathCertCopy") FormDataContentDisposition deathCertCopyDisp,@FormDataParam("username") String username,@FormDataParam("password") String password) throws JsonGenerationException, JsonMappingException, IOException, ParseException {  return null;}  }
class C{  private void processUnary(Instruction s){  RegisterOperand result=Unary.getResult(s);  ValueGraphVertex v=findOrCreateVertex(result.getRegister());  v.setLabel(s.operator(),1);  Operand val=Unary.getVal(s);  val=bypassMoves(val);  link(v,findOrCreateVertex(val),0);}  }
class C{  public static String ByteArrayToHexString(byte[] in_array){  if (in_array == null)   return null;  int i, j, in;  String[] hex={"0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"};  String out="";  for (j=0; j < in_array.length; ++j) {    in=(int)in_array[j] & 0xff;    i=(in >> 4) & 0x0f;    out+=hex[i];    i=in & 0x0f;    out+=hex[i];  }  return out;}  }
class C{  public final void addProgressThreadListener(final ProgressThreadListener listener){  listeners.add(listener);}  }
class C{  private void finishKbMode(){  mInKbMode=false;  if (!mTypedTimes.isEmpty()) {    int values[]=getEnteredTime(null);    mRadialTimePickerView.setCurrentHour(values[0]);    mRadialTimePickerView.setCurrentMinute(values[1]);    if (!mIs24HourView) {      mRadialTimePickerView.setAmOrPm(values[2]);    }    mTypedTimes.clear();  }  updateDisplay(false);  mRadialTimePickerView.setInputEnabled(true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.949 -0500",hash_original_method="68A658D6A5BAAA4F48B195A7B0E88D46",hash_generated_method="5F228E07FEAE93D40C07AA6B1EDC541E") public static byte[] encodeBase64Chunked(byte[] binaryData){  return encodeBase64(binaryData,true);}  }
class C{  @Override public void updateBigDecimal(String columnLabel,BigDecimal x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBigDecimal(" + quote(columnLabel) + ", "+ quoteBigDecimal(x)+ ");");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueDecimal.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void insertAt(int row,int[] values){  if ((row < 0) || (row > size())) {    throw new IndexOutOfBoundsException("row " + row);  }  if ((values != null) && (values.length < width())) {    throw new IndexOutOfBoundsException("value count " + values.length);  }  moveRowGapTo(row);  if (mRowGapLength == 0) {    growBuffer();  }  mRowGapStart++;  mRowGapLength--;  if (values == null) {    for (int i=mColumns - 1; i >= 0; i--) {      setValueInternal(row,i,0);    }  } else {    for (int i=mColumns - 1; i >= 0; i--) {      setValueInternal(row,i,values[i]);    }  }}  }
class C{  public void write(String baseDir) throws IOException {  final String baseName=getBaseFileName(baseDir);  writeDictionary(baseName + BinaryDictionary.DICT_FILENAME_SUFFIX);  writeTargetMap(baseName + BinaryDictionary.TARGETMAP_FILENAME_SUFFIX);  writePosDict(baseName + BinaryDictionary.POSDICT_FILENAME_SUFFIX);}  }
class C{  public X509ExtensionSetLoadException(String message,Throwable causeThrowable){  super(message,causeThrowable);}  }
class C{  private String documentToString(Document doc) throws TransformerException {  StringWriter writer=new StringWriter();  Source source=new DOMSource(doc);  Result result=new StreamResult(writer);  TransformerFactory factory=TransformerFactory.newInstance();  factory.setAttribute("indent-number","4");  Transformer transformer=factory.newTransformer();  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  transformer.transform(source,result);  return writer.toString();}  }
class C{  public static <T>LazySortedSetX<T> fromStreamS(Stream<T> stream){  return new LazySortedSetX<T>(Flux.from(ReactiveSeq.fromStream(stream)));}  }
class C{  protected String jdbcCatalogLookupName(Schema schema){  return schema.getName();}  }
class C{  public void testNoAutoCloseReader() throws Exception {  final String DOC="[ 1 ]";  JsonFactory f=new JsonFactory();  assertTrue(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));  f.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE);  assertFalse(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));  MyReader input=new MyReader(DOC);  JsonParser jp=f.createJsonParser(input);  assertFalse(input.isClosed());  assertToken(JsonToken.START_ARRAY,jp.nextToken());  assertToken(JsonToken.VALUE_NUMBER_INT,jp.nextToken());  assertToken(JsonToken.END_ARRAY,jp.nextToken());  assertNull(jp.nextToken());  assertFalse(input.isClosed());  jp.close();  assertFalse(input.isClosed());}  }
class C{  private AppLocal(){}  }
class C{  protected Node newNode(){  return new SVGOMAnimateMotionElement();}  }
class C{  protected boolean isAlwaysNonNull(Value v){  return false;}  }
class C{  public DMLProgram doParse(String fileName,String dmlScript,String sourceNamespace,Map<String,String> argVals) throws ParseException {  DMLProgram dmlPgm=null;  ANTLRInputStream in;  try {    if (dmlScript == null) {      dmlScript=readDMLScript(fileName,LOG);    }    InputStream stream=new ByteArrayInputStream(dmlScript.getBytes());    in=new ANTLRInputStream(stream);  } catch (  FileNotFoundException e) {    throw new ParseException("Cannot find file: " + fileName,e);  }catch (  IOException e) {    throw new ParseException("Cannot open file: " + fileName,e);  }catch (  LanguageException e) {    throw new ParseException(e.getMessage(),e);  }  ProgramrootContext ast=null;  CustomErrorListener errorListener=new CustomErrorListener();  try {    DmlLexer lexer=new DmlLexer(in);    CommonTokenStream tokens=new CommonTokenStream(lexer);    DmlParser antlr4Parser=new DmlParser(tokens);    boolean tryOptimizedParsing=false;    if (tryOptimizedParsing) {      antlr4Parser.getInterpreter().setPredictionMode(PredictionMode.SLL);      antlr4Parser.removeErrorListeners();      antlr4Parser.setErrorHandler(new BailErrorStrategy());      try {        ast=antlr4Parser.programroot();      } catch (      ParseCancellationException ex) {        tokens.reset();        antlr4Parser.reset();        if (fileName != null) {          errorListener.setCurrentFileName(fileName);        } else {          errorListener.setCurrentFileName("MAIN_SCRIPT");        }        antlr4Parser.addErrorListener(errorListener);        antlr4Parser.setErrorHandler(new DefaultErrorStrategy());        antlr4Parser.getInterpreter().setPredictionMode(PredictionMode.LL);        ast=antlr4Parser.programroot();      }    } else {      antlr4Parser.removeErrorListeners();      antlr4Parser.addErrorListener(errorListener);      errorListener.setCurrentFileName(fileName);      ast=antlr4Parser.programroot();    }  } catch (  Exception e) {    throw new ParseException("ERROR: Cannot parse the program:" + fileName,e);  }  ParseTree tree=ast;  ParseTreeWalker walker=new ParseTreeWalker();  DmlPreprocessor prep=new DmlPreprocessor(errorListener);  walker.walk(prep,tree);  DmlSyntacticValidator validator=new DmlSyntacticValidator(errorListener,argVals,sourceNamespace,prep.getFunctionDefs());  walker.walk(validator,tree);  errorListener.unsetCurrentFileName();  this.parseIssues=errorListener.getParseIssues();  this.atLeastOneWarning=errorListener.isAtLeastOneWarning();  this.atLeastOneError=errorListener.isAtLeastOneError();  if (atLeastOneError) {    throw new ParseException(parseIssues,dmlScript);  }  if (atLeastOneWarning) {    LOG.warn(CustomErrorListener.generateParseIssuesMessage(dmlScript,parseIssues));  }  dmlPgm=createDMLProgram(ast,sourceNamespace);  return dmlPgm;}  }
class C{  public static PropertyValuesHolder ofObject(String propertyName,TypeEvaluator evaluator,Object... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(propertyName);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  public RecurrenceException(){  super(KEY);}  }
class C{  private void commitChanges(){  model.setAutoRange(autoRange.isSelected());  model.setAutoDomain(autoDomain.isSelected());  if (!autoRange.isSelected()) {    model.setUpperRangeBoundary(Double.parseDouble(maxRangeField.getText()));    model.setLowerRangeBoundary(Double.parseDouble(minRangeField.getText()));  }  if (!autoDomain.isSelected()) {    model.setUpperDomainBoundary(Double.parseDouble(maxDomainField.getText()));    model.setLowerDomainBoundary(Double.parseDouble(minDomainField.getText()));  }  model.setDotSize(Integer.parseInt(dotSizeField.getText()));  model.setChartSeriesPaint(theColor);  model.setShowHistory(showHistory.isSelected());}  }
class C{  public static int rotateLeft(int i,int distance){  return (i << distance) | (i >>> -distance);}  }
class C{  public long index(){  return index;}  }
class C{  public float distance(double x,double y){  return 0.0f;}  }
class C{  public DocTreePath(TreePath treePath,DocCommentTree t){  treePath.getClass();  t.getClass();  this.treePath=treePath;  this.docComment=t;  this.parent=null;  this.leaf=t;}  }
class C{  public void changeHeight(float h){  setContentSize(CGSize.make(getWidth(),h));}  }
class C{  @RequestProcessing(value="/settings/geo/status",method=HTTPRequestMethod.POST) @Before(adviceClass={LoginCheck.class,CSRFCheck.class}) public void updateGeoStatus(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  context.renderJSON();  JSONObject requestJSONObject;  try {    requestJSONObject=Requests.parseRequestJSONObject(request,response);    request.setAttribute(Keys.REQUEST,requestJSONObject);  } catch (  final Exception e) {    LOGGER.warn(e.getMessage());    requestJSONObject=new JSONObject();  }  int geoStatus=requestJSONObject.optInt(UserExt.USER_GEO_STATUS);  if (UserExt.USER_GEO_STATUS_C_PRIVATE != geoStatus && UserExt.USER_GEO_STATUS_C_PRIVATE != geoStatus) {    geoStatus=UserExt.USER_GEO_STATUS_C_PUBLIC;  }  final JSONObject user=userQueryService.getCurrentUser(request);  user.put(UserExt.USER_GEO_STATUS,geoStatus);  try {    userMgmtService.updateUser(user.optString(Keys.OBJECT_ID),user);    context.renderTrueResult();  } catch (  final ServiceException e) {    context.renderMsg(e.getMessage());  }}  }
class C{  private void addEmlFile() throws GeneratorException, InterruptedException {  checkForInterruption();  setState(STATE.METADATA);  try {    FileUtils.copyFile(dataDir.resourceEmlFile(resource.getShortname()),new File(dwcaFolder,DataDir.EML_XML_FILENAME));    archive.setMetadataLocation(DataDir.EML_XML_FILENAME);  } catch (  IOException e) {    throw new GeneratorException("Problem occurred while adding EML file to DwC-A folder",e);  }  addMessage(Level.INFO,"EML file added");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static long computeCellIndex(long blockIndex,int blockSize,int cellInBlock){  return (blockIndex - 1) * blockSize + 1 + cellInBlock;}  }
class C{  private static CalendarEventEntry createWebContentEvent(CalendarService service,String title,String type,String url,String icon,String width,String height) throws ServiceException, IOException {  WebContent wc=new WebContent();  wc.setHeight(height);  wc.setWidth(width);  wc.setTitle(title);  wc.setType(type);  wc.setUrl(url);  wc.setIcon(icon);  return createEvent(service,title,null,null,false,wc);}  }
class C{  public static <A extends Comparable<? super A>>PriorityQueue<A> minQueue(A... as){  return new PriorityQueue<>(Comparator.<A>naturalOrder(),0,Heap.empty(),QueueType.MIN).plus(as);}  }
class C{  public static String pduTypeToString(int cmd){switch (cmd) {case pduGetRequestPdu:    return "SnmpGet";case pduGetNextRequestPdu:  return "SnmpGetNext";case pduWalkRequest:return "SnmpWalk(*)";case pduSetRequestPdu:return "SnmpSet";case pduGetResponsePdu:return "SnmpResponse";case pduV1TrapPdu:return "SnmpV1Trap";case pduV2TrapPdu:return "SnmpV2Trap";case pduGetBulkRequestPdu:return "SnmpGetBulk";case pduInformRequestPdu:return "SnmpInform";}return "Unknown Command = " + cmd;}  }
class C{  public static void collect(Map<FeatureStructure,FeatureStructure> aFSes,Set<FeatureStructure> aIndexed,FeatureStructure aFS,FeatureStructure aLastIndexed){  if (aFS != null && !aFSes.containsKey(aFS)) {    if (aIndexed.contains(aFS)) {      aFSes.put(aFS,aFS);    } else {      aFSes.put(aFS,aLastIndexed);    }    for (    Feature f : aFS.getType().getFeatures()) {      if (!f.getRange().isPrimitive() && !CAS.FEATURE_BASE_NAME_SOFA.equals(f.getShortName())) {        collect(aFSes,aIndexed,aFS.getFeatureValue(f),aIndexed.contains(aFS) ? aFS : aLastIndexed);      }    }  }}  }
class C{  protected void modifyPropertySourceInEnvironment(Map<String,Object> overrideMap) throws Exception {  removeReloadablePropertySourceFromEnvironment();  Map<String,Object> updatedPropertiesMap=new HashMap<>();  updatedPropertiesMap.putAll(propertySourceHoldingLocation.getSource());  updatedPropertiesMap.putAll(overrideMap);  getMutablePropertySources().addLast(new MapPropertySource(OVERRIDE_PROPERTY_SOURCE_MAP_NAME,updatedPropertiesMap));}  }
class C{  public static URLConnection createConnection(URL url) throws java.io.IOException {  URLConnection urlConn=url.openConnection();  if (urlConn instanceof HttpURLConnection) {    HttpURLConnection httpConn=(HttpURLConnection)urlConn;    httpConn.setRequestMethod("POST");  }  urlConn.setDoInput(true);  urlConn.setDoOutput(true);  urlConn.setUseCaches(false);  urlConn.setDefaultUseCaches(false);  return urlConn;}  }
class C{  public void showTabs(){  int tp=tabPlacement;  tabPlacement=-1;  setTabPlacement(tp);  revalidate();}  }
class C{  public K maxValue(){  if (refSet.isEmpty()) {    return null;  }  return refSet.lastKey();}  }
class C{  public void push(T e){  if (list.size() >= sizeLimit)   list.removeFirst();  list.addLast(e);}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  public static int turns(double x0,double y0,double x1,double y1,double x2,double y2){  final double cross=(x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0);  return ((cross > 0.000001) ? LEFT : ((cross < -0.000001) ? RIGHT : STRAIGHT));}  }
class C{  public static double parseNumberPercent(FXGNode node,String value,String name,double min,double max,double defaultValue){  if (value.length() != 0 && value.charAt(value.length() - 1) == '%') {    String doubleValue=value.substring(0,value.length() - 1);    try {      return parseDouble(node,doubleValue,name,min,max,defaultValue);    } catch (    FXGException e) {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidPercentValue",name,value);    }  } else {    return parseDouble(node,value,name,min,max,defaultValue);  }}  }
class C{  public int findNextEmptyFromEnd(@Nonnull IInventory inv){  for (int i=inv.getSizeInventory() - 1; i >= 0; --i) {    if (inv.getStackInSlot(i) == null)     return i;  }  return -1;}  }
class C{  public synchronized void subtract(int x,int y,int w,int h){  Rectangle subtract=new Rectangle(x,y,w,h);  for (int i=0; i < RECT_COUNT; i++) {    if (subtract(paintRects[i],subtract)) {      if (paintRects[i] != null && paintRects[i].isEmpty()) {        paintRects[i]=null;      }    }  }}  }
class C{  public static <T>Set<T> immutableSet(@SuppressWarnings("unchecked") T... elements){  if (elements == null || elements.length == 0)   return emptySet();  Set<T> result=new LinkedHashSet<>(elements.length);  for (  T element : elements) {    if (element != null)     result.add(element);  }  return java.util.Collections.unmodifiableSet(result);}  }
class C{  public RedBlackTree(){  header=new RedBlackNode(null);  header.left=header.right=nullNode;}  }
class C{  @Override public void test() throws ParameterException {  boolean first=false;  int constraintSize=-1;  for (  ListParameter<?,?> listParam : parameters) {    if (listParam.isDefined()) {      if (!first) {        constraintSize=listParam.size();        first=true;      } else       if (constraintSize != listParam.size()) {        throw new WrongParameterValueException("Global constraint errror.\n" + "The list parameters " + OptionUtil.optionsNamesToString(parameters) + " must have equal list sizes.");      }    }  }}  }
class C{  public void removeModifyListener(final ModifyListener listener){  checkWidget();  this.composite.removeModifyListener(listener);}  }
class C{  public void changePriority(int priority){  this.priority=priority;}  }
class C{  public void finish() throws IOException {  if (!this.wroteLastChunk) {    flushCache();    writeClosingChunk();    this.wroteLastChunk=true;  }}  }
class C{  public Entry toCacheEntry(byte[] data){  Entry e=new Entry();  e.data=data;  e.etag=etag;  e.serverDate=serverDate;  e.lastModified=lastModified;  e.ttl=ttl;  e.softTtl=softTtl;  e.responseHeaders=responseHeaders;  return e;}  }
class C{  private static void quickSort1(double x[],int off,int len,DoubleComparator comp){  if (len < SMALL) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && comp.compare(x[j - 1],x[j]) > 0; j--)     swap(x,j,j - 1);    return;  }  int m=off + len / 2;  if (len > SMALL) {    int l=off;    int n=off + len - 1;    if (len > MEDIUM) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s,comp);      m=med3(x,m - s,m,m + s,comp);      n=med3(x,n - 2 * s,n - s,n,comp);    }    m=med3(x,l,m,n,comp);  }  double v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    int comparison;    while (b <= c && (comparison=comp.compare(x[b],v)) <= 0) {      if (comparison == 0)       swap(x,a++,b);      b++;    }    while (c >= b && (comparison=comp.compare(x[c],v)) >= 0) {      if (comparison == 0)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   quickSort1(x,off,s,comp);  if ((s=d - c) > 1)   quickSort1(x,n - s,s,comp);}  }
class C{  public BlockTask(Minion_Job_Manager boss,EntityMinion input,int ix,int iy,int iz){  this.boss=boss;  this.worker=input;  this.posX=ix;  this.posY=iy;  this.posZ=iz;  pos=new BlockPos(ix,iy,iz);  startedTask=false;  accessRangeSq=9.0D;  taskDurationMillis=1000L;  workerReachedBlock=false;}  }
class C{  public MockTransaction(final Account sender,final int customField){  super(TYPE,VERSION,TIMESTAMP,sender);  this.customField=customField;  this.setDeadline(DEADLINE);}  }
class C{  @After public void after(){  Thread.interrupted();}  }
class C{  public Document read(Reader reader) throws Exception {  m_Document=getBuilder().parse(new InputSource(reader));  return getDocument();}  }
class C{  public void addPlayerContainerDisplay(PlayingPlayerContainer container){  displays.put(container,new ScoreboardDisplay(match,container));}  }
class C{  private void refreshTerrainList(){  ((DefaultListModel<String>)lisTerrain.getModel()).removeAllElements();  int terrainTypes[]=curHex.getTerrainTypes();  for (int i=0; i < terrainTypes.length; i++) {    ITerrain terrain=curHex.getTerrain(terrainTypes[i]);    if (terrain != null) {      ((DefaultListModel<String>)lisTerrain.getModel()).addElement(terrain.toString());    }  }}  }
class C{  public void putEntryInLocalNotificationRegion(NotificationKey key,Notification notif){  localNotificationRegion.put(key,notif);}  }
class C{  private static void leftMultByVectorTranspose(List<ColGroup> colGroups,MatrixBlock vector,MatrixBlock result,boolean doTranspose) throws DMLRuntimeException {  MatrixBlock rowVector=vector;  if (doTranspose) {    rowVector=new MatrixBlock(1,vector.getNumRows(),false);    LibMatrixReorg.transpose(vector,rowVector);  }  result.reset();  result.allocateDenseBlock();  for (  ColGroup grp : colGroups) {    grp.leftMultByRowVector(rowVector,result);  }  result.recomputeNonZeros();}  }
class C{  private void stopCapture(){  final CaptureLog log=Capturer.stopCapture();  this.processLog(log);  Capturer.clear();}  }
class C{  public MySqlDdlParser(boolean includeViews){  super(";",includeViews);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static ICompilationUnit findCompilationUnit(ITypeBinding typeBinding,IJavaProject project) throws JavaModelException {  IJavaElement type=typeBinding.getJavaElement();  if (type instanceof IType)   return ((IType)type).getCompilationUnit(); else   return null;}  }
class C{  public static String formatParagraph(String src,int len,boolean breakOnWhitespace){  StringBuilder str=new StringBuilder();  int total=src.length();  int from=0;  while (from < total) {    int to=from + len;    if (to >= total) {      to=total;    } else     if (breakOnWhitespace) {      int ndx=lastIndexOfWhitespace(src,to - 1,from);      if (ndx != -1) {        to=ndx + 1;      }    }    int cutFrom=indexOfNonWhitespace(src,from,to);    if (cutFrom != -1) {      int cutTo=lastIndexOfNonWhitespace(src,to - 1,from) + 1;      str.append(src.substring(cutFrom,cutTo));    }    str.append('\n');    from=to;  }  return str.toString();}  }
class C{  public synchronized IFloodlightModuleContext loadModulesFromList(Collection<String> configMods,Properties prop) throws FloodlightModuleException {  logger.debug("Starting module loader");  findAllModules(configMods);  ArrayList<IFloodlightModule> moduleList=new ArrayList<>();  Map<Class<? extends IFloodlightService>,IFloodlightModule> moduleMap=new HashMap<>();  HashSet<String> modsVisited=new HashSet<>();  ArrayDeque<String> modsToLoad=new ArrayDeque<>(configMods);  while (!modsToLoad.isEmpty()) {    String moduleName=modsToLoad.removeFirst();    traverseDeps(moduleName,modsToLoad,moduleList,moduleMap,modsVisited);  }  parseConfigParameters(prop);  loadedModuleList=moduleList;  initModules(moduleList);  if (startupModules)   startupModules(moduleList);  return floodlightModuleContext;}  }
class C{  static public char[] encode(byte[] data){  char[] out=new char[((data.length + 2) / 3) * 4];  for (int i=0, index=0; i < data.length; i+=3, index+=4) {    boolean quad=false;    boolean trip=false;    int val=(0xFF & data[i]);    val<<=8;    if ((i + 1) < data.length) {      val|=(0xFF & data[i + 1]);      trip=true;    }    val<<=8;    if ((i + 2) < data.length) {      val|=(0xFF & data[i + 2]);      quad=true;    }    out[index + 3]=alphabet[(quad ? (val & 0x3F) : 64)];    val>>=6;    out[index + 2]=alphabet[(trip ? (val & 0x3F) : 64)];    val>>=6;    out[index + 1]=alphabet[val & 0x3F];    val>>=6;    out[index + 0]=alphabet[val & 0x3F];  }  return out;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF__DECLARED_TYPE:    return declaredType != null;case TypeRefsPackage.PARAMETERIZED_TYPE_REF__TYPE_ARGS:  return typeArgs != null && !typeArgs.isEmpty();case TypeRefsPackage.PARAMETERIZED_TYPE_REF__ARRAY_TYPE_LITERAL:return arrayTypeLiteral != ARRAY_TYPE_LITERAL_EDEFAULT;case TypeRefsPackage.PARAMETERIZED_TYPE_REF__DEFINED_TYPING_STRATEGY:return definedTypingStrategy != DEFINED_TYPING_STRATEGY_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public void displayResults(List<AcronymExpansion> results,String errorMessage){  Log.d(TAG,"results = " + results);  if (results == null || results.size() == 0)   Utils.showToast(this,errorMessage); else {    Log.d(TAG,"displayResults() with number of acronyms = " + results.size());    mAdapter.clear();    mAdapter.addAll(results);    mAdapter.notifyDataSetChanged();  }}  }
class C{  public AcronymDataArrayAdapter(Context context,List<ParcelableAcronymExpansion> objects){  super(context,R.layout.acronym_data_row,objects);}  }
class C{  public Object referenceInsert(String reference,Object value){  String s=null;  if (value != null) {    s=REFERENCE_VALUE;  } else {    if (reference.equals("$floobie")) {      s=NO_REFERENCE_VALUE;    }  }  return s;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testConcurrentReadWrite() throws Exception {  LogFile tf=LogHelper.createLogFile("testConcurrentReadWrite.dat",-1);  tf.close();  LogFile tfwr=LogHelper.openExistingFileForWrite("testConcurrentReadWrite.dat");  LogFile tfro=LogHelper.openExistingFileForRead("testConcurrentReadWrite.dat");  assertEquals("File lengths must match",tfwr.getLength(),tfro.getLength());  SimpleLogFileReader lr=new SimpleLogFileReader(tfro,100000);  Thread reader=new Thread(lr);  reader.start();  long bytesWritten=0;  for (int i=0; i < 100000; i++) {    byte[] data=new byte[100];    for (int j=0; j < 100; j++)     data[j]=(byte)(Math.random() * 255);    long crc32=LogRecord.computeCrc32(data);    LogRecord rec=new LogRecord(tf.getFile(),-1,data,LogRecord.CRC_TYPE_32,crc32);    tfwr.writeRecord(rec,100000000);    bytesWritten+=rec.getRecordLength();    if (i % 10000 == 0)     logger.info("Records written: " + i);  }  tfwr.close();  try {    reader.join(5000);  } catch (  InterruptedException e) {  }  assertEquals("Checking records read",100000,lr.recordsRead);  assertEquals("Checking bytes read",bytesWritten,lr.bytesRead);  assertEquals("Checking CRC failures",0,lr.crcFailures);  if (lr.error != null)   throw lr.error;}  }
class C{  public static void main(String[] args){  try {    weka.core.WekaPackageManager.loadPackages(false,true,false);    RemoteExperiment exp=null;    String xmlOption=Utils.getOption("xml",args);    if (!xmlOption.equals("")) {      args=new XMLOptions(xmlOption).toArray();    }    Experiment base=null;    String expFile=Utils.getOption('l',args);    String saveFile=Utils.getOption('s',args);    boolean runExp=Utils.getFlag('r',args);    ArrayList<String> remoteHosts=new ArrayList<String>();    String runHost=" ";    while (runHost.length() != 0) {      runHost=Utils.getOption('h',args);      if (runHost.length() != 0) {        remoteHosts.add(runHost);      }    }    if (expFile.length() == 0) {      base=new Experiment();      try {        base.setOptions(args);        Utils.checkForRemainingOptions(args);      } catch (      Exception ex) {        ex.printStackTrace();        String result="Usage:\n\n" + "-l <exp file>\n" + "\tLoad experiment from file (default use cli options)\n"+ "-s <exp file>\n"+ "\tSave experiment to file after setting other options\n"+ "\t(default don't save)\n"+ "-h <remote host name>\n"+ "\tHost to run experiment on (may be specified more than once\n"+ "\tfor multiple remote hosts)\n"+ "-r \n"+ "\tRun experiment on (default don't run)\n"+ "-xml <filename | xml-string>\n"+ "\tget options from XML-Data instead from parameters\n"+ "\n";        Enumeration<Option> enm=((OptionHandler)base).listOptions();        while (enm.hasMoreElements()) {          Option option=enm.nextElement();          result+=option.synopsis() + "\n";          result+=option.description() + "\n";        }        throw new Exception(result + "\n" + ex.getMessage());      }    } else {      Object tmp;      if ((KOML.isPresent()) && (expFile.toLowerCase().endsWith(KOML.FILE_EXTENSION))) {        tmp=KOML.read(expFile);      } else       if (expFile.toLowerCase().endsWith(".xml")) {        XMLExperiment xml=new XMLExperiment();        tmp=xml.read(expFile);      } else {        FileInputStream fi=new FileInputStream(expFile);        ObjectInputStream oi=new ObjectInputStream(new BufferedInputStream(fi));        tmp=oi.readObject();        oi.close();      }      if (tmp instanceof RemoteExperiment) {        exp=(RemoteExperiment)tmp;      } else {        base=(Experiment)tmp;      }    }    if (base != null) {      exp=new RemoteExperiment(base);    }    for (int i=0; i < remoteHosts.size(); i++) {      exp.addRemoteHost(remoteHosts.get(i));    }    System.err.println("Experiment:\n" + exp.toString());    if (saveFile.length() != 0) {      if ((KOML.isPresent()) && (saveFile.toLowerCase().endsWith(KOML.FILE_EXTENSION))) {        KOML.write(saveFile,exp);      } else       if (saveFile.toLowerCase().endsWith(".xml")) {        XMLExperiment xml=new XMLExperiment();        xml.write(saveFile,exp);      } else {        FileOutputStream fo=new FileOutputStream(saveFile);        ObjectOutputStream oo=new ObjectOutputStream(new BufferedOutputStream(fo));        oo.writeObject(exp);        oo.close();      }    }    if (runExp) {      System.err.println("Initializing...");      exp.initialize();      System.err.println("Iterating...");      exp.runExperiment();      System.err.println("Postprocessing...");      exp.postProcess();    }  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  public int length(){  return s.length();}  }
class C{  public void testExecuteStopOk(){  this.task.setAction("stop");  this.task.setHome("home");  this.task.execute();}  }
class C{  protected static void processGenericPropertiesCreatorProps(File propsFile){  try {    Properties expProps=new Properties();    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));    expProps.load(bi);    bi.close();    bi=null;    Properties GPCInputProps=GenericPropertiesCreator.getGlobalInputProperties();    Set<Object> keys=expProps.keySet();    Iterator<Object> keysI=keys.iterator();    while (keysI.hasNext()) {      String key=(String)keysI.next();      String existingVal=GPCInputProps.getProperty(key,"");      if (existingVal.length() > 0) {        String newVal=expProps.getProperty(key);        if (existingVal.indexOf(newVal) < 0) {          newVal=existingVal + "," + newVal;          GPCInputProps.put(key,newVal);        }      } else {        String newVal=expProps.getProperty(key);        GPCInputProps.put(key,newVal);      }    }  } catch (  Exception ex) {  }}  }
class C{  public boolean isSmeManualAckRequested(){  return isSmeManualAckRequested(registeredDelivery);}  }
class C{  public String buildS3KeyPrefix(String s3KeyPrefixVelocityTemplate,BusinessObjectFormatEntity businessObjectFormatEntity,BusinessObjectDataKey businessObjectDataKey,String storageName){  BusinessObjectFormat businessObjectFormat=businessObjectFormatHelper.createBusinessObjectFormatFromEntity(businessObjectFormatEntity);  return buildS3KeyPrefixHelper(s3KeyPrefixVelocityTemplate,businessObjectFormatEntity.getBusinessObjectDefinition().getDataProvider().getName(),businessObjectFormat,businessObjectDataKey,storageName);}  }
class C{  public DTEDLocator(){  super();  if (logger.isLoggable(Level.FINE)) {    DEBUG=true;  }  setCallback(this);}  }
class C{  public void unsubscribe(PTQuery query){  QueryAdvice advice=installedQueries.get(query);  if (advice != null) {    subscriber().unsubscribeAll(advice.getQueryId());  }}  }
class C{  public static boolean initAsync(String Version,Context AppContext,LoaderCallbackInterface Callback){  return AsyncServiceHelper.initOpenCV(Version,AppContext,Callback);}  }
class C{  public void logVerbose(String tag,String message){  log(LogEntryType.Verbose,tag,message);}  }
class C{  public final void processResponseWarnings(final Response response,WarningMessageCallback warningCallback){  if (warningCallback == null) {    warningCallback=defaultWarningMessageCallback;  }  if (response instanceof GenericResponse) {    GenericResponse genericResponse=(GenericResponse)response;    @SuppressWarnings("ThrowableResultOfMethodCallIgnored") SQLException exception=genericResponse.getException();    if (exception != null && exception instanceof SQLWarning) {      warningCallback.processWarning((SQLWarning)exception);    }  }}  }
class C{  public static Date parseHTTPDate(String s){  s=s.trim();  if (s == null || s.length() < 9)   return null;  for (  final SimpleDateFormat format : FORMATS_HTTP) synchronized (format) {    try {      return format.parse(s);    } catch (    final ParseException e) {    }  }  return null;}  }
class C{  protected void fixAfterInsertion(BalancedBinaryNode<K,V> x){  x.color=BalancedBinaryNode.RED;  while (x != null && x != root && x.parent.color == BalancedBinaryNode.RED) {    if (parentOf(x) == leftOf(parentOf(parentOf(x)))) {      BalancedBinaryNode<K,V> y=rightOf(parentOf(parentOf(x)));      if (colorOf(y) == BalancedBinaryNode.RED) {        setColor(parentOf(x),BalancedBinaryNode.BLACK);        setColor(y,BalancedBinaryNode.BLACK);        setColor(parentOf(parentOf(x)),BalancedBinaryNode.RED);        x=parentOf(parentOf(x));      } else {        if (x == rightOf(parentOf(x))) {          x=parentOf(x);          rotateLeft(x);        }        setColor(parentOf(x),BalancedBinaryNode.BLACK);        setColor(parentOf(parentOf(x)),BalancedBinaryNode.RED);        if (parentOf(parentOf(x)) != null)         rotateRight(parentOf(parentOf(x)));      }    } else {      BalancedBinaryNode<K,V> y=leftOf(parentOf(parentOf(x)));      if (colorOf(y) == BalancedBinaryNode.RED) {        setColor(parentOf(x),BalancedBinaryNode.BLACK);        setColor(y,BalancedBinaryNode.BLACK);        setColor(parentOf(parentOf(x)),BalancedBinaryNode.RED);        x=parentOf(parentOf(x));      } else {        if (x == leftOf(parentOf(x))) {          x=parentOf(x);          rotateRight(x);        }        setColor(parentOf(x),BalancedBinaryNode.BLACK);        setColor(parentOf(parentOf(x)),BalancedBinaryNode.RED);        if (parentOf(parentOf(x)) != null)         rotateLeft(parentOf(parentOf(x)));      }    }  }  root.color=BalancedBinaryNode.BLACK;}  }
class C{  public void updateProtectionSystemMetrics(ProtectionSystem rpSystem,Set<RPSite> rpSites,RecoverPointStatisticsResponse response,DbClient dbClient){  for (  RPSite site : rpSites) {    rpSystem.setCgCount(getParameter(response.getParamList(),NumberOfGroups,CurrentOrMax.CURRENT_VALUE));    rpSystem.setCgCapacity(getParameter(response.getParamList(),NumberOfGroups,CurrentOrMax.MAX_VALUE));    rpSystem.setRsetCount(getParameter(response.getParamList(),NumberOfReplicatingSets,CurrentOrMax.CURRENT_VALUE));    rpSystem.setRsetCapacity(getParameter(response.getParamList(),NumberOfReplicatingSets,CurrentOrMax.MAX_VALUE));    rpSystem.setRemoteReplicationGBCount(getParameter(response.getParamList(),RemoteReplicatedArray,CurrentOrMax.CURRENT_VALUE));    rpSystem.setRemoteReplicationGBCapacity(getParameter(response.getParamList(),RemoteReplicatedArray,CurrentOrMax.MAX_VALUE));    StringMap localRepCountStringMap=new StringMap();    localRepCountStringMap.put(site.getInternalSiteName(),"" + getParameter(response.getParamList(),LocalReplicatedArray,CurrentOrMax.CURRENT_VALUE,site.getSiteUID()));    rpSystem.setSiteLocalReplicationGBCount(localRepCountStringMap);    StringMap localRepCapacityStringMap=new StringMap();    localRepCapacityStringMap.put(site.getInternalSiteName(),"" + getParameter(response.getParamList(),LocalReplicatedArray,CurrentOrMax.MAX_VALUE,site.getSiteUID()));    rpSystem.setSiteLocalReplicationGBCapacity(localRepCapacityStringMap);    StringMap sitePathCountStringMap=new StringMap();    sitePathCountStringMap.put(site.getInternalSiteName(),"" + getParameter(response.getParamList(),NumberOfWLPS,CurrentOrMax.CURRENT_VALUE,site.getSiteUID()));    rpSystem.setSitePathCount(sitePathCountStringMap);    StringMap sitePathCapacityStringMap=new StringMap();    sitePathCapacityStringMap.put(site.getInternalSiteName(),"" + getParameter(response.getParamList(),NumberOfWLPS,CurrentOrMax.MAX_VALUE,site.getSiteUID()));    rpSystem.setSitePathCapacity(sitePathCapacityStringMap);    StringMap siteVNXSplitterCountStringMap=new StringMap();    siteVNXSplitterCountStringMap.put(site.getInternalSiteName(),"" + getParameter(response.getParamList(),NumberOfClariionHosts,CurrentOrMax.CURRENT_VALUE,site.getSiteUID()));    rpSystem.setSiteVNXSplitterCount(siteVNXSplitterCountStringMap);    StringMap siteVNXSplitterCapacityStringMap=new StringMap();    siteVNXSplitterCapacityStringMap.put(site.getInternalSiteName(),"" + getParameter(response.getParamList(),NumberOfClariionHosts,CurrentOrMax.MAX_VALUE,site.getSiteUID()));    rpSystem.setSiteVNXSplitterCapacity(siteVNXSplitterCapacityStringMap);    StringMap siteVolumeCountStringMap=new StringMap();    siteVolumeCountStringMap.put(site.getInternalSiteName(),"" + getParameter(response.getParamList(),NumberOfGUIDS,CurrentOrMax.CURRENT_VALUE,site.getSiteUID()));    rpSystem.setSiteVolumeCount(siteVolumeCountStringMap);    StringMap siteVolumeCapacityStringMap=new StringMap();    siteVolumeCapacityStringMap.put(site.getInternalSiteName(),"" + getParameter(response.getParamList(),NumberOfGUIDS,CurrentOrMax.MAX_VALUE,site.getSiteUID()));    rpSystem.setSiteVolumeCapacity(siteVolumeCapacityStringMap);    StringMap siteVolumesAttachedToSplitterCountStringMap=new StringMap();    siteVolumesAttachedToSplitterCountStringMap.put(site.getInternalSiteName(),"" + getParameter(response.getParamList(),TotalNumberOfSplitterLUNs,CurrentOrMax.CURRENT_VALUE,site.getSiteUID()));    rpSystem.setSiteVolumesAttachedToSplitterCount(siteVolumesAttachedToSplitterCountStringMap);    StringMap siteVolumesAttachedToSplitterCapacityStringMap=new StringMap();    siteVolumesAttachedToSplitterCapacityStringMap.put(site.getInternalSiteName(),"" + getParameter(response.getParamList(),TotalNumberOfSplitterLUNs,CurrentOrMax.MAX_VALUE,site.getSiteUID()));    rpSystem.setSiteVolumesAttachedToSplitterCapacity(siteVolumesAttachedToSplitterCapacityStringMap);    dbClient.persistObject(rpSystem);  }}  }
class C{  public String substring(int startIndex,int endIndex){  endIndex=validateRange(startIndex,endIndex);  return new String(buffer,startIndex,endIndex - startIndex);}  }
class C{  public void writeTag(final int fieldNumber,final int wireType) throws IOException {  writeRawVarint32(WireFormat.makeTag(fieldNumber,wireType));}  }
class C{  public ObjectPermission(Type type,String identifier){  this.identifier=identifier;  this.type=type;}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  protected void appendSummary(final StringBuffer buffer,final String fieldName,final double[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public Synapse(Neuron source,Neuron target){  setSourceAndTarget(source,target);  initSpikeResponder();  if (source != null) {    parentNetwork=source.getNetwork();  }  isTemplate=source == null;}  }
class C{  @Override public void emitTuple(HashMap<K,HashMap<V,Integer>> tuple){  most.emit(tuple);}  }
class C{  public DrunkStatus(){  super("drunk");}  }
class C{  public String apply(T input){  return formatter.format(values.apply(input));}  }
class C{  @HLEFunction(nid=0xB3A59970,version=150) public int sceKernelGetVTimerBase(@CheckArgument("checkVTimerID") int vtimerUid,TPointer64 baseAddr){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.get(vtimerUid);  baseAddr.setValue(sceKernelVTimerInfo.base);  return 0;}  }
class C{  public void visualizeClusters(String pointFilename,String clusterFilename,String lineFilename,String polygonFilename){  log.info("Processing clusters for visualization (" + this.getClusterList().size() + " clusters)");  GeometryFactory gf=new GeometryFactory();  int clusterCount=0;  int clusterMultiplier=1;  int pointId=0;  try {    BufferedWriter output_Points=new BufferedWriter(new FileWriter(new File(pointFilename)));    BufferedWriter output_Clusters=new BufferedWriter(new FileWriter(new File(clusterFilename)));    BufferedWriter output_Lines=new BufferedWriter(new FileWriter(new File(lineFilename)));    try {      output_Points.write("ID,X,Y,ClusterID");      output_Points.newLine();      output_Clusters.write("ID,X,Y,NumberOfPoints");      output_Clusters.newLine();      output_Lines.write("ID");      output_Lines.newLine();      for (      Cluster c : this.getClusterList()) {        c.setCenterOfGravity();        Point cog=c.getCenterOfGravity();        output_Clusters.write(c.getClusterId());        output_Clusters.write(",");        output_Clusters.write(String.valueOf(cog.getX()));        output_Clusters.write(",");        output_Clusters.write(String.valueOf(cog.getY()));        output_Clusters.write(",");        output_Clusters.write(String.valueOf(c.getPoints().size()));        output_Clusters.newLine();        for (        ClusterPoint cp : c.getPoints()) {          Point p=cp.getPoint();          output_Points.write(String.valueOf(pointId));          output_Points.write(",");          output_Points.write(String.valueOf(p.getX()));          output_Points.write(",");          output_Points.write(String.valueOf(p.getY()));          output_Points.write(",");          output_Points.write(c.getClusterId());          output_Points.newLine();          output_Lines.write(String.valueOf(pointId));          output_Lines.newLine();          output_Lines.write(String.valueOf(p.getX()));          output_Lines.write(",");          output_Lines.write(String.valueOf(p.getY()));          output_Lines.newLine();          output_Lines.write(String.valueOf(cog.getX()));          output_Lines.write(",");          output_Lines.write(String.valueOf(cog.getY()));          output_Lines.newLine();          output_Lines.write("END");          output_Lines.newLine();          pointId++;        }        clusterCount++;        if (clusterCount == clusterMultiplier) {          log.info("   Clusters completed: " + clusterCount);          clusterMultiplier*=2;        }      }      log.info("   Clusters completed: " + clusterCount + " (Done)");    }  finally {      output_Points.write("END");      output_Points.close();      output_Clusters.write("END");      output_Clusters.close();      output_Lines.write("END");      output_Lines.close();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected FinalizablePhantomReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (streamSequences: ");  result.append(streamSequences);  result.append(')');  return result.toString();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setRetainInstance(true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void sort(char[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  public static <T>T orderWrites(T ref){  theVolatile=0;  return ref;}  }
class C{  protected void hideTabs(){  if (getPageCount() <= 1) {    setPageText(0,"");    if (getContainer() instanceof CTabFolder) {      ((CTabFolder)getContainer()).setTabHeight(1);      Point point=getContainer().getSize();      getContainer().setSize(point.x,point.y + 6);    }  }}  }
class C{  public void actionPerformed(ActionEvent ae){  if (ae.getActionCommand().equals("Go")) {    animator.stop();    animator.start();  } else   if (ae.getActionCommand().equals("Stop")) {    animator.stop();  }}  }
class C{  public void updateQtree(String qtree,String volume,Boolean opLocks,String securityStyle){  if (log.isDebugEnabled()) {    log.debug("Creating Qtree " + qtree + " in volume "+ volume);  }  ClusterQtreeCommands commands=new ClusterQtreeCommands(server.getNaServer());  commands.updateQtree(qtree,volume,opLocks,securityStyle);}  }
class C{  protected static void cleanDirectory(File dir){  File[] files=dir.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    if (file.isDirectory()) {      cleanDirectory(file);    } else {      file.delete();    }  }  dir.delete();}  }
class C{  @DSComment("Notification can only go to screen") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:55.200 -0500",hash_original_method="40D57D78EF425D9AA1571205DDC7CF63",hash_generated_method="A0E0DC88E05BABDCC3A25F5F9F730F35") public void cancel(String tag,int id){  INotificationManager service=getService();  String pkg=mContext.getPackageName();  if (localLOGV)   Log.v(TAG,pkg + ": cancel(" + id+ ")");  try {    service.cancelNotificationWithTag(pkg,tag,id);  } catch (  RemoteException e) {  }}  }
class C{  private static void configureLogging(){  log=LogManager.getLogger(LookingGlass.MODID);}  }
class C{  private void createJavaClassLoader(){  List<URL> urls=new ArrayList<URL>();  try {    File classesDir=new File(Config.v().APP_ROOT_DIR,CLASSES_DIR);    urls.add(classesDir.toURI().toURL());    File androidJar=new File(Config.v().ANDROID_LIB_DIR,Config.v().ANDROID_JAR);    urls.add(androidJar.toURI().toURL());    for (    File f : getAppLibJars()) {      urls.add(f.toURI().toURL());    }  } catch (  MalformedURLException e) {    logger.error("Encountered a malformed url when creating java class laoder for application: {}",e);    droidsafe.main.Main.exit(1);  }  javaAppClassLoader=new URLClassLoader(urls.toArray(new URL[0]));}  }
class C{  final void printSecs(long value){  Log.write(VM.statistics.nanosToSecs(value));}  }
class C{  public boolean isMinimumMet(){  return Bukkit.getOnlinePlayers().size() >= MINIMUM_PLAYERS;}  }
class C{  private void displayMusicVideoDetails(Cursor cursor){  cursor.moveToFirst();  String musicVideoTitle=cursor.getString(MusicVideoDetailsQuery.TITLE);  mediaTitle.setText(musicVideoTitle);  setMediaUndertitle(cursor.getString(MusicVideoDetailsQuery.ARTIST),cursor.getString(MusicVideoDetailsQuery.ALBUM));  setMediaYear(cursor.getInt(MusicVideoDetailsQuery.RUNTIME),cursor.getInt(MusicVideoDetailsQuery.YEAR));  mediaGenres.setText(cursor.getString(MusicVideoDetailsQuery.GENRES));  mediaDescription.setText(cursor.getString(MusicVideoDetailsQuery.PLOT));  Resources resources=getActivity().getResources();  DisplayMetrics displayMetrics=new DisplayMetrics();  getActivity().getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);  String fanart=cursor.getString(MusicVideoDetailsQuery.FANART), poster=cursor.getString(MusicVideoDetailsQuery.THUMBNAIL);  int artHeight=resources.getDimensionPixelOffset(R.dimen.now_playing_art_height), artWidth=displayMetrics.widthPixels;  int posterWidth=resources.getDimensionPixelOffset(R.dimen.musicvideodetail_poster_width);  int posterHeight=resources.getDimensionPixelOffset(R.dimen.musicvideodetail_poster_width);  UIUtils.loadImageWithCharacterAvatar(getActivity(),getHostManager(),poster,musicVideoTitle,mediaPoster,posterWidth,posterHeight);  UIUtils.loadImageIntoImageview(getHostManager(),TextUtils.isEmpty(fanart) ? poster : fanart,mediaArt,artWidth,artHeight);  musicVideoDownloadInfo=new FileDownloadHelper.MusicVideoInfo(musicVideoTitle,cursor.getString(MusicVideoDetailsQuery.FILE));  if (musicVideoDownloadInfo.downloadFileExists()) {    Resources.Theme theme=getActivity().getTheme();    TypedArray styledAttributes=theme.obtainStyledAttributes(new int[]{R.attr.colorAccent});    downloadButton.setColorFilter(styledAttributes.getColor(0,getActivity().getResources().getColor(R.color.accent_default)));    styledAttributes.recycle();  } else {    downloadButton.clearColorFilter();  }}  }
class C{  public String substring(final int startIndex,int endIndex){  endIndex=validateRange(startIndex,endIndex);  return new String(buffer,startIndex,endIndex - startIndex);}  }
class C{  protected Node newNode(){  return new GenericElementNS();}  }
class C{  public static byte[] copyOf(byte[] original,int newLength){  byte[] copy=new byte[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public boolean requiresWater(){  return needsWatering;}  }
class C{  @Override public RandomAccessStream openFileRandomAccess() throws IOException {  RandomAccessStream stream=getWritePath().openFileRandomAccess();  return stream;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public TimeoutException(){}  }
class C{  public boolean hasEncounteredAllWarnings(){  return (warnings == null) ? warningsIndex == 0 : warnings.length == warningsIndex;}  }
class C{  public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  @Override public FrameReader newReader(BufferedSource source,boolean client){  return new Reader(source,4096,client);}  }
class C{  public RasterPlotComponent(final String name,final int numDataSources){  super(name);  model=new RasterModel(numDataSources);  initializeAttributes();  addListener();}  }
class C{  @DSComment("parameter is from IO") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.619 -0500",hash_original_method="7C3B72CDCF95023F438211CC038E601E",hash_generated_method="B633A9743DD0CC7151290BD357306BDA") public InputSource(InputStream byteStream){  setByteStream(byteStream);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void enableLayers(boolean enable){  final int childCount=getChildCount();  for (int i=0; i < childCount; i++) {    final int layerType=enable ? ViewCompat.LAYER_TYPE_HARDWARE : ViewCompat.LAYER_TYPE_NONE;    ViewCompat.setLayerType(getChildAt(i),layerType,null);  }}  }
class C{  private void renameFieldsJavaNames(Collection<PojoField> selFields,String regex,String replace){  for (  PojoField field : selFields)   field.javaName(field.javaName().replaceAll(regex,replace));}  }
class C{  @CanIgnoreReturnValue @Override public int add(E element,int occurrences){  checkNotNull(element);  if (occurrences == 0) {    return count(element);  }  CollectPreconditions.checkPositive(occurrences,"occurences");  while (true) {    AtomicInteger existingCounter=Maps.safeGet(countMap,element);    if (existingCounter == null) {      existingCounter=countMap.putIfAbsent(element,new AtomicInteger(occurrences));      if (existingCounter == null) {        return 0;      }    }    while (true) {      int oldValue=existingCounter.get();      if (oldValue != 0) {        try {          int newValue=IntMath.checkedAdd(oldValue,occurrences);          if (existingCounter.compareAndSet(oldValue,newValue)) {            return oldValue;          }        } catch (        ArithmeticException overflow) {          throw new IllegalArgumentException("Overflow adding " + occurrences + " occurrences to a count of "+ oldValue);        }      } else {        AtomicInteger newCounter=new AtomicInteger(occurrences);        if ((countMap.putIfAbsent(element,newCounter) == null) || countMap.replace(element,existingCounter,newCounter)) {          return 0;        }        break;      }    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String value=getString(stack);  String name=getString(stack);  UserRecord rec=getUserRecord(stack);  if (name == null || rec == null || name.length() == 0)   return null;  rec.setProperty(name,value);  return null;}  }
class C{  public void write(OutputNode node,Object value) throws Exception {  write(node,value);}  }
class C{  public void deleteLocation(RouteLocation rl){  if (rl != null) {    rl.removePropertyChangeListener(this);    String id=rl.getId();    rl.dispose();    Integer old=Integer.valueOf(_routeHashTable.size());    _routeHashTable.remove(id);    resequenceIds();    setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,old,Integer.valueOf(_routeHashTable.size()));  }}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public static Comment fromFile(final File file) throws FileNotFoundException, IOException, InvalidPostFormatException {  try (BufferedReader br=new BufferedReader(new FileReader(file))){    final XmlRpcStruct c=FileParser.parseFile(br);    final Comment result=new Comment();    result.fromXmlRpcStruct(c);    return result;  } }  }
class C{  public static void assertSize(int expectedSize,Object[] actualArray){  try {    Verify.assertSize("array",expectedSize,actualArray);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public String globalInfo(){  return m_globalInfo;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.EQUALITY_EXPRESSION__LHS:    setLhs((Expression)newValue);  return;case N4JSPackage.EQUALITY_EXPRESSION__OP:setOp((EqualityOperator)newValue);return;case N4JSPackage.EQUALITY_EXPRESSION__RHS:setRhs((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public AbstractAddress asFloatConstRef(JavaConstant value){  return asFloatConstRef(value,4);}  }
class C{  public static void validatePriceModelSettings(VOPriceModel inputValue) throws ValidationException {  notNegativeAndScaleInRange(FIELD_NAME_PRICE_PERIOD,inputValue.getPricePerPeriod());  notNegativeAndScaleInRange(FIELD_NAME_PRICE_USERASSIGNMENT,inputValue.getPricePerUserAssignment());  notNegativeAndScaleInRange(FIELD_NAME_ONE_TIME_FEE,inputValue.getOneTimeFee());  BLValidator.isNonNegativeNumber(FIELD_NAME_FREE_PERIOD,inputValue.getFreePeriod());  if (inputValue.isChargeable()) {    BLValidator.isNotNull(FIELD_NAME_PERIOD,inputValue.getPeriod());  }  List<VOPricedRole> pmRoleSpecificPrices=inputValue.getRoleSpecificUserPrices();  PricedProductRoleAssembler.validatePricedProductRoles(pmRoleSpecificPrices);  for (  VOPricedParameter param : inputValue.getSelectedParameters()) {    PricedProductRoleAssembler.validatePricedProductRoles(param.getRoleSpecificUserPrices());    for (    VOPricedOption option : param.getPricedOptions()) {      PricedProductRoleAssembler.validatePricedProductRoles(option.getRoleSpecificUserPrices());    }  }  List<VOSteppedPrice> steppedPriceList=inputValue.getSteppedPrices();  SteppedPriceAssembler.validateSteppedPrice(steppedPriceList);}  }
class C{  public boolean isWrap(){  return wrap != null;}  }
class C{  public static void string_to_file(String text,File file) throws IOException {  FileWriter writer=null;  writer=new FileWriter(file);  try {    StringReader reader=new StringReader(text);    char[] buf=new char[1000];    while (true) {      int n=reader.read(buf,0,1000);      if (n == -1) {        break;      }      writer.write(buf,0,n);    }    writer.flush();  }  finally {    if (writer != null) {      writer.close();    }  }}  }
class C{  private void applyColors(Composite composite){  Color color=getForeground();  if (color == null)   color=getDefaultForeground();  applyForegroundColor(color,composite,getForegroundColorExclusions());  color=getBackground();  if (color == null)   color=getDefaultBackground();  applyBackgroundColor(color,composite,getBackgroundColorExclusions());}  }
class C{  protected static void log(String s){  Log.d(TAG,s);}  }
class C{  private void addCurrentName(FormalParamNode node,String name,Renaming rename){  int i=0;  while ((i < rename.identifiers.size()) && (rename.identifiers.elementAt(i) != node)) {    i++;  }  if (i < rename.identifiers.size()) {    rename.newNames.remove(i);    rename.newNames.insertElementAt(name,i);  } else {    if (!name.equals(node.getName().toString())) {      rename.identifiers.add(node);      rename.newNames.add(name);    }  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public void fireNeuronsUpdated(Collection<Neuron> neurons){  for (int i=0, n=networkListeners.size(); i < n; i++) {    networkListeners.get(i).updateNeurons(neurons);  }}  }
class C{  public void delete(ID id){  T obj=findOne(id);  if (obj != null) {    PMF.get().getPersistenceManager().deletePersistent(obj);  }}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle r=(Rectangle)a;  g.clipRect(r.x,r.y,r.width,r.height);  super.paint(g,adjustAllocation(a));}  }
class C{  public static void main(String... args) throws Exception {  System.out.println("URL=" + URL);  System.out.println("backup...");  new File(TEST_DIRECTORY).mkdirs();  File backup=backup(TEST_DIRECTORY,BACKUP_DIRECTORY,"data",10,NODE);  System.out.println("check consistency...");  if (!testConsistency()) {    System.out.println("error! renaming file");    backup.renameTo(new File(backup.getParentFile(),"error-" + backup.getName()));  }  System.out.println("deleting old run...");  deleteRecursive(new File(TEST_DIRECTORY));  System.out.println("testing...");  testLoop();}  }
class C{  public static void auditFile(DbClient dbClient,OperationTypeEnum auditType,boolean operationalStatus,String description,Object... descparams){  AuditLogManager auditMgr=AuditLogManagerFactory.getAuditLogManager();  auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus ? AuditLogManager.AUDITLOG_SUCCESS : AuditLogManager.AUDITLOG_FAILURE,description,descparams);}  }
class C{  protected IGangliaMessage decodeRecord(final byte[] data,final int off,final int len){  if (log.isTraceEnabled())   log.trace(BytesUtil.toString(data,off,len));  return decoder.decode(data,off,len);}  }
class C{  private DoubleMatrix2D subMatrix(DoubleMatrix2D A,int[] rowIndexes,int columnFrom,int columnTo){  int width=columnTo - columnFrom + 1;  int rows=A.rows();  A=A.viewPart(0,columnFrom,rows,width);  DoubleMatrix2D sub=A.like(rowIndexes.length,width);  for (int r=rowIndexes.length; --r >= 0; ) {    int row=rowIndexes[r];    if (row < 0 || row >= rows)     throw new IndexOutOfBoundsException("Illegal Index");    sub.viewRow(r).assign(A.viewRow(row));  }  return sub;}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("CountFilterTarg");  targetClass=bpe.location().declaringType();  mainThread=bpe.thread();  erm=vm().eventRequestManager();  ThreadReference otherThread=null;  for (Iterator it=vm().allThreads().iterator(); it.hasNext(); ) {    ThreadReference tr=(ThreadReference)it.next();    if (!tr.equals(mainThread)) {      otherThread=tr;      break;    }  }  if (otherThread == null) {    throw new Exception("test error: couldn't find " + "other thread");  }  MethodEntryRequest meRequest=erm.createMethodEntryRequest();  meRequest.addClassFilter("CountFilterTarg");  meRequest.addCountFilter(5);  meRequest.enable();  whereMap.put(meRequest,"butThisOne");  MethodExitRequest mxRequest=erm.createMethodExitRequest();  mxRequest.addCountFilter(2);  mxRequest.addClassFilter("borp");  mxRequest.enable();  whereMap.put(mxRequest,"nowhere (from method exit)");  BreakpointRequest thisOneRequest=breakpointAtMethod("thisOne");  thisOneRequest.addCountFilter(1);  thisOneRequest.addThreadFilter(mainThread);  thisOneRequest.enable();  whereMap.put(thisOneRequest,"thisOne");  BreakpointRequest butNotThisOneRequest=breakpointAtMethod("butNotThisOne");  butNotThisOneRequest.addCountFilter(1);  butNotThisOneRequest.addThreadFilter(otherThread);  butNotThisOneRequest.enable();  whereMap.put(butNotThisOneRequest,"nowhere (post filter)");  BreakpointRequest norThisOneRequest=breakpointAtMethod("norThisOne");  norThisOneRequest.addThreadFilter(otherThread);  norThisOneRequest.addCountFilter(1);  norThisOneRequest.enable();  whereMap.put(norThisOneRequest,"nowhere (pre filter)");  BreakpointRequest butThisOneRequest=breakpointAtMethod("butThisOne");  butThisOneRequest.addThreadFilter(mainThread);  butThisOneRequest.addCountFilter(1);  butThisOneRequest.enable();  whereMap.put(butThisOneRequest,"butThisOne");  listenUntilVMDisconnect();  if (!testFailed) {    println("CountFilterTest: passed");  } else {    throw new Exception("CountFilterTest: failed");  }}  }
class C{  public int compareTo(Object o){  if (o == this) {    return 0;  }  Point p=(Point)o;  for (int i=0; i < getSize(); i++) {    if (getValue(i) != p.getValue(i)) {      return (int)Math.signum(p.getValue(i) - getValue(i));    }  }  return 0;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  TextView tv=new TextView(this);  tv.setText("Hello, Unresponsive Android");  setContentView(tv);}  }
class C{  private void _writeAtts() throws IOException {  for (  Entry<String,String> entry : _attributes.entrySet()) {    String name=entry.getKey();    String value=entry.getValue();    _write(" " + name + "='");    if (value != null) {      _write(XMLUtil.escapeSingleQuotedAttValue(value));    }    _write("'");  }  _attributes.clear();}  }
class C{  public final Expression find(final Expression expr){  final int idx=indexOf(expr);  if (idx != -1) {    return get(idx);  } else {    return null;  }}  }
class C{  public ProjectionSupport(Object aSource,boolean useNotifier){  super(aSource);  this.useNotifier=useNotifier;}  }
class C{  static BillingEvent.Recurring.Builder newAutorenewBillingEvent(DomainResource domain){  return new BillingEvent.Recurring.Builder().setReason(Reason.RENEW).setFlags(ImmutableSet.of(Flag.AUTO_RENEW)).setTargetId(domain.getFullyQualifiedDomainName()).setClientId(domain.getCurrentSponsorClientId()).setEventTime(domain.getRegistrationExpirationTime());}  }
class C{  public void testEncode(){  optionalAttribute.setBody(expectedAttributeValue,0,expectedAttributeValue.length);  byte[] actualReturn=optionalAttribute.encode();  assertTrue("encode failed",Arrays.equals(msgFixture.unknownOptionalAttribute,actualReturn));}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ExecutionSlot.class) {switch (derivedFeatureID) {case SRuntimePackage.EXECUTION_CONTEXT__VALUE:      return SRuntimePackage.EXECUTION_SLOT__VALUE;case SRuntimePackage.EXECUTION_CONTEXT__FQ_NAME:    return SRuntimePackage.EXECUTION_SLOT__FQ_NAME;case SRuntimePackage.EXECUTION_CONTEXT__WRITABLE:  return SRuntimePackage.EXECUTION_SLOT__WRITABLE;case SRuntimePackage.EXECUTION_CONTEXT__TYPE:return SRuntimePackage.EXECUTION_SLOT__TYPE;default :return -1;}}if (baseClass == CompositeSlot.class) {switch (derivedFeatureID) {case SRuntimePackage.EXECUTION_CONTEXT__SLOTS:return SRuntimePackage.COMPOSITE_SLOT__SLOTS;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public final DoubleGrid3D lowerBound(double toNoLowerThanThisMuch){  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       if (fieldxy[z] < toNoLowerThanThisMuch)       fieldxy[z]=toNoLowerThanThisMuch;    }  }  return this;}  }
class C{  public boolean isSetByte_thing(){  return EncodingUtils.testBit(__isset_bitfield,__BYTE_THING_ISSET_ID);}  }
class C{  protected WifiP2pServiceInfo(List<String> queryList){  if (queryList == null) {    throw new IllegalArgumentException("query list cannot be null");  }  mQueryList=queryList;}  }
class C{  private void closeOpenEditors(List<CnATreeElement> deleteList) throws PartInitException {  Set<IEditorReference> editorsToCloseSet=getRelevantEditors(deleteList);  List<IEditorReference> editorsToCloseList=new ArrayList(editorsToCloseSet.size());  editorsToCloseList.addAll(editorsToCloseSet);  PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().closeEditors((IEditorReference[])editorsToCloseList.toArray(new IEditorReference[editorsToCloseList.size()]),true);}  }
class C{  public JSONWriter array() throws JSONException {  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {    this.push(null);    this.append("[");    this.comma=false;    return this;  }  throw new JSONException("Misplaced array.");}  }
class C{  public static final void main(String args[]) throws Exception {  if (args.length > 0) {    Instances D=new Instances(new BufferedReader(new FileReader(args[0])));    int N=D.numInstances();    int L=Integer.parseInt(Utils.getOption('C',MLUtils.getDatasetOptions(D)));    D.setClassIndex(L);switch (args[1].charAt(0)) {case 'L':      System.out.println(L);    break;case 'N':  System.out.println(D.numInstances());break;case 'd':System.out.println(D.numAttributes() - L);break;case 'A':System.out.println(D.numAttributes());break;case 'l':System.out.println(MLUtils.labelCardinality(D));break;case 'P':System.out.println(Arrays.toString(MLUtils.labelCardinalities(D)));break;case 'C':System.out.println(hashMapToString(MLUtils.countCombinations(D,L)));break;case 'p':System.out.println("collecting ...");HashMap<LabelSet,Integer> hm=PSUtils.countCombinationsSparse(D,L);System.out.println("pruning ...");System.out.println("writing ...");saveObject(hm,"hm-NEW.serialized");break;default :System.out.println(MLUtils.getDatasetName(D));break;}return;} else {return;}}  }
class C{  public void test_SelectHaving() throws SQLException {  String selectQuery="SELECT snum, max(amt) AS max FROM " + DatabaseCreator.ORDERS_TABLE + " GROUP BY snum HAVING max(amt) > 3000";  ResultSet result=statement.executeQuery(selectQuery);  HashSet<Double> values=new HashSet<Double>();  values.add(Double.valueOf(9891.88));  values.add(Double.valueOf(5160.45));  while (result.next()) {    Double max=result.getDouble("max");    assertTrue("result set doesn't contain value",values.contains(max));    assertTrue("wrong value in the result set",values.remove(max));  }  result.close();  assertTrue("Result set has wrong size",values.isEmpty());}  }
class C{  public boolean isFromSplitAnd(){  if (m_fromSplitAnd != null)   return m_fromSplitAnd.booleanValue();  return false;}  }
class C{  public boolean isExpired(OCSPResp response) throws Exception {  BasicOCSPResp basicResp=(BasicOCSPResp)response.getResponseObject();  SingleResp singleResp=basicResp.getResponses()[0];  return isExpired(singleResp,new Date());}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  protected XmlHandler createRootHandler(ValidationContext vc,Element element,ElementMetadata<?,?> metadata){  return new XmlHandler(vc,null,element,metadata);}  }
class C{  public final int[] hashSignature(final int[] signature){  int[] hash=new int[stages];  int rows=signature.length / stages;  for (int i=0; i < signature.length; i++) {    int stage=Math.min(i / rows,stages - 1);    hash[stage]=(int)((hash[stage] + (long)signature[i] * LARGE_PRIME) % buckets);  }  return hash;}  }
class C{  protected static CProject loadProject(final AbstractSQLProvider provider,final int projectId) throws SQLException {  final String query="select id, name, description, creation_date, modification_date from " + CTableNames.PROJECTS_TABLE + " where id = "+ projectId;  try (ResultSet resultSet=provider.getConnection().executeQuery(query,true)){    while (resultSet.next()) {      final String name=PostgreSQLHelpers.readString(resultSet,"name");      final String description=PostgreSQLHelpers.readString(resultSet,"description");      final int addressSpaceCount=0;      final Timestamp creationDate=resultSet.getTimestamp("creation_date");      final Timestamp modificationDate=resultSet.getTimestamp("modification_date");      return new CProject(projectId,name,description,creationDate,modificationDate,addressSpaceCount,new ArrayList<DebuggerTemplate>(),provider);    }  }   return null;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static Network lookupNetworkFull(DbClient dbClient,StorageProtocol.Transport transportType,String endpoint){  _log.info(String.format("Network lookup: type(%s), endpoint(%s)",transportType.name(),endpoint));  try {    return NetworkUtil.getEndpointNetwork(endpoint,dbClient);  } catch (  DatabaseException e) {    _log.error("Network is not found for endpoint: ",endpoint);  }  _log.info("Network lookup: endpoint not found.");  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int match_main(String text,String pattern,int loc){  if (text == null || pattern == null) {    throw new IllegalArgumentException("Null inputs. (match_main)");  }  loc=Math.max(0,Math.min(loc,text.length()));  if (text.equals(pattern)) {    return 0;  } else   if (text.length() == 0) {    return -1;  } else   if (loc + pattern.length() <= text.length() && text.substring(loc,loc + pattern.length()).equals(pattern)) {    return loc;  } else {    return match_bitap(text,pattern,loc).get("location",Integer.class);  }}  }
class C{  public void writeAsSerializedByteArray(Object v) throws IOException {  if (v instanceof HeapDataOutputStream) {    this.size+=4;    this.size+=((HeapDataOutputStream)v).size();  } else {    this.size+=5;    DataSerializer.writeObject(v,this);  }}  }
class C{  public static boolean isBoxOf(TypeMirror declaredType,TypeMirror primitiveType){  if (declaredType.getKind() != TypeKind.DECLARED) {    return false;  }  final String qualifiedName=getQualifiedName((DeclaredType)declaredType).toString();switch (primitiveType.getKind()) {case BOOLEAN:    return qualifiedName.equals("java.lang.Boolean");case BYTE:  return qualifiedName.equals("java.lang.Byte");case CHAR:return qualifiedName.equals("java.lang.Character");case DOUBLE:return qualifiedName.equals("java.lang.Double");case FLOAT:return qualifiedName.equals("java.lang.Float");case INT:return qualifiedName.equals("java.lang.Integer");case LONG:return qualifiedName.equals("java.lang.Long");case SHORT:return qualifiedName.equals("java.lang.Short");default :return false;}}  }
class C{  static boolean renderImageWithOp(SunGraphics2D sg,BufferedImage img,BufferedImageOp biop,int x,int y){  if (biop instanceof ConvolveOp) {    if (!isConvolveOpValid((ConvolveOp)biop)) {      return false;    }  } else   if (biop instanceof RescaleOp) {    if (!isRescaleOpValid((RescaleOp)biop,img)) {      return false;    }  } else   if (biop instanceof LookupOp) {    if (!isLookupOpValid((LookupOp)biop,img)) {      return false;    }  } else {    return false;  }  SurfaceData dstData=sg.surfaceData;  if (!(dstData instanceof OGLSurfaceData) || (sg.interpolationType == AffineTransformOp.TYPE_BICUBIC) || (sg.compositeState > SunGraphics2D.COMP_ALPHA)) {    return false;  }  SurfaceData srcData=dstData.getSourceSurfaceData(img,SunGraphics2D.TRANSFORM_ISIDENT,CompositeType.SrcOver,null);  if (!(srcData instanceof OGLSurfaceData)) {    srcData=dstData.getSourceSurfaceData(img,SunGraphics2D.TRANSFORM_ISIDENT,CompositeType.SrcOver,null);    if (!(srcData instanceof OGLSurfaceData)) {      return false;    }  }  OGLSurfaceData oglSrc=(OGLSurfaceData)srcData;  OGLGraphicsConfig gc=oglSrc.getOGLGraphicsConfig();  if (oglSrc.getType() != OGLSurfaceData.TEXTURE || !gc.isCapPresent(CAPS_EXT_BIOP_SHADER)) {    return false;  }  int sw=img.getWidth();  int sh=img.getHeight();  OGLBlitLoops.IsoBlit(srcData,dstData,img,biop,sg.composite,sg.getCompClip(),sg.transform,sg.interpolationType,0,0,sw,sh,x,y,x + sw,y + sh,true);  return true;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.758 -0500",hash_original_method="4893EC862C01D5D2A6E85A7017E94B9B",hash_generated_method="349D9D12DF3A6DA1D0A30BA63321958C") public void onWindowFocus(View rootView,View focusedView,int softInputMode,boolean first,int windowFlags){synchronized (mH) {    if (DEBUG)     Log.v(TAG,"onWindowFocus: " + focusedView + " softInputMode="+ softInputMode+ " first="+ first+ " flags=#"+ Integer.toHexString(windowFlags));    if (mHasBeenInactive) {      if (DEBUG)       Log.v(TAG,"Has been inactive!  Starting fresh");      mHasBeenInactive=false;      mNextServedNeedsStart=true;    }    focusInLocked(focusedView != null ? focusedView : rootView);  }  checkFocus();synchronized (mH) {    try {      final boolean isTextEditor=focusedView != null && focusedView.onCheckIsTextEditor();      mService.windowGainedFocus(mClient,rootView.getWindowToken(),focusedView != null,isTextEditor,softInputMode,first,windowFlags);    } catch (    RemoteException e) {    }  }}  }
class C{  public void repaint(){  this.components.repaint();}  }
class C{  public Vertex applyLESS(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network){  Vertex left=arguments.get(0).getTarget().applyQuotient(variables,network);  Vertex right=arguments.get(1).getTarget().applyQuotient(variables,network);  if (!(left.getData() instanceof Number) || !(right.getData() instanceof Number)) {    return network.createVertex(Primitive.FALSE);  }  if (((Number)left.getData()).doubleValue() < ((Number)right.getData()).doubleValue()) {    return network.createVertex(Primitive.TRUE);  } else {    return network.createVertex(Primitive.FALSE);  }}  }
class C{  private void clearParentFilter(SiteNode parent){  if (parent != null) {    parent.setFiltered(false);    clearParentFilter(parent.getParent());  }}  }
class C{  static public boolean isCNF(final FilterNode filter){  return isCNF(filter.getValueExpressionNode());}  }
class C{  public void skip(){  decrementThisActive();  decrementActivity();}  }
class C{  protected void process(Document document) throws Exception {  System.out.println("about to output: " + document);  StringWriter out=new StringWriter();  outputDocument(document,out);  Document doc2=parseDocument(new StringReader(out.toString()));  System.out.println("parsed back again: " + doc2);  System.out.println("Writing it out...");  XMLWriter writer=new XMLWriter(System.out);  writer.write(doc2);}  }
class C{  protected void forwardUpdateToView(View v,DocumentEvent e,Shape a,ViewFactory f){  v.setParent(this);  super.forwardUpdateToView(v,e,a,f);}  }
class C{  private boolean addEnvironmentClassToCluster(Class<?> klass){  if (handledClasses.contains(klass.getCanonicalName()) || !TestClusterUtils.isEvoSuiteClass(klass)) {    return false;  }  handledClasses.add(klass.getCanonicalName());  boolean excludeClass=klass.getAnnotation(EvoSuiteClassExclude.class) != null;  for (  Constructor c : klass.getConstructors()) {    if (shouldSkip(excludeClass,c)) {      continue;    }    GenericAccessibleObject gc=new GenericConstructor(c,klass);    TestCluster.getInstance().addEnvironmentTestCall(gc);    GenericClass genclass=new GenericClass(klass);    TestCluster.getInstance().invalidateGeneratorCache(genclass);    TestCluster.getInstance().addGenerator(genclass,gc);    testClusterGenerator.addNewDependencies(Arrays.asList(c.getParameterTypes()));  }  for (  Method m : klass.getMethods()) {    if (shouldSkip(excludeClass,m)) {      continue;    }    GenericAccessibleObject gm=new GenericMethod(m,klass);    TestCluster.getInstance().addEnvironmentTestCall(gm);    testClusterGenerator.addNewDependencies(Arrays.asList(m.getParameterTypes()));    Class<?> returnType=m.getReturnType();    if (!returnType.equals(Void.TYPE)) {      GenericClass genclass=new GenericClass(returnType);      TestCluster.getInstance().invalidateGeneratorCache(genclass);      TestCluster.getInstance().addGenerator(genclass,gm);      addEnvironmentDependency(returnType);    }  }  return true;}  }
class C{  public IgniteFutureCancelledCheckedException(String msg){  super(msg);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.392 -0500",hash_original_method="2438A746B67FAB4E454DBFA828DCDAA3",hash_generated_method="296ACCF2FB476623414493F173998EA9") private void parseParameters(String parameters){  if (HttpLog.LOGV) {    HttpLog.v("HttpAuthHeader.parseParameters():" + " parameters: " + parameters);  }  if (parameters != null) {    int i;    do {      i=parameters.indexOf(',');      if (i < 0) {        parseParameter(parameters);      } else {        parseParameter(parameters.substring(0,i));        parameters=parameters.substring(i + 1);      }    } while (i >= 0);  }}  }
class C{  private void completeWinnerDetection(final Map<Integer,List<Integer>> teamMemberListMap){  final List<Integer> humanTeamList=new ArrayList<>(teamMemberListMap.size());  final List<Integer> compTeamList=new ArrayList<>(teamMemberListMap.size());  int unknownTeamCounter=0;  for (  final Entry<Integer,List<Integer>> entry : teamMemberListMap.entrySet()) {    final int team=entry.getKey();    boolean computerOnly=true;    boolean foundHuman=false;    for (    final Integer playerId : entry.getValue())     if (usersByPlayerId[playerId].slot.getController() == Controller.HUMAN) {      foundHuman=true;      break;    } else     if (usersByPlayerId[playerId].slot.getController() != Controller.COMPUTER) {      computerOnly=false;      if (foundHuman)       break;    }    if (foundHuman)     humanTeamList.add(team); else     if (computerOnly)     compTeamList.add(team); else     unknownTeamCounter++;  }  if (unknownTeamCounter == 0 && humanTeamList.size() == 1) {    setTeamDeducedResult(humanTeamList.get(0),Result.VICTORY);    for (    final int compTeam : compTeamList)     setTeamDeducedResult(compTeam,Result.DEFEAT);  } else   if (largestRemainingTeamWins && teamMemberListMap.size() > 1) {    int maxTeamSize=0;    for (    final Entry<Integer,List<Integer>> entry : teamMemberListMap.entrySet())     if (maxTeamSize < entry.getValue().size())     maxTeamSize=entry.getValue().size();    Integer loserTeam;    do {      loserTeam=null;      for (      final Entry<Integer,List<Integer>> entry : teamMemberListMap.entrySet())       if (entry.getValue().size() < maxTeamSize) {        loserTeam=entry.getKey();        teamMemberListMap.remove(loserTeam);        setTeamDeducedResult(loserTeam,Result.DEFEAT);        break;      }    } while (loserTeam != null);    if (teamMemberListMap.size() == 1) {      final int winnerTeam=teamMemberListMap.keySet().iterator().next();      teamMemberListMap.remove(winnerTeam);      setTeamDeducedResult(winnerTeam,Result.VICTORY);    }  }}  }
class C{  public static byte[] toPrimitive(Byte[] array,byte valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_BYTE_ARRAY;  }  final byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    Byte b=array[i];    result[i]=(b == null ? valueForNull : b.byteValue());  }  return result;}  }
class C{  public String encodeBody(){  return callId.encode();}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  public Long hlen(final String key){  checkIsInMulti();  client.hlen(key);  return client.getIntegerReply();}  }
class C{  public static double convertDaysToMillis(double millis){  return millis * DAY_TO_MILLIS;}  }
class C{  @SuppressWarnings("try") public static <T extends CompilationResult>T compile(Request<T> r){  try (Scope s=MethodMetricsRootScopeInfo.createRootScopeIfAbsent(r.installedCodeOwner)){    assert !r.graph.isFrozen();    try (Scope s0=Debug.scope("GraalCompiler",r.graph,r.providers.getCodeCache());DebugCloseable a=CompilerTimer.start()){      emitFrontEnd(r.providers,r.backend,r.graph,r.graphBuilderSuite,r.optimisticOpts,r.profilingInfo,r.suites);      emitBackEnd(r.graph,null,r.installedCodeOwner,r.backend,r.compilationResult,r.factory,null,r.lirSuites);    } catch (    Throwable e) {      throw Debug.handle(e);    }    return r.compilationResult;  } }  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:25.744 -0500",hash_original_method="8F1A1CDA0B50B3C3FF8220D3A1F18B22",hash_generated_method="4D1F018057D46810BCA86915AB70D911") private byte[] embiggen(byte[] b,int len){  if (b == null || b.length < len) {    return new byte[len];  } else {    return b;  }}  }
class C{  private void createRasterFrameBufferObject(){  this.fbo=glCreateFramebuffers();  this.depthBuffer=glCreateRenderbuffers();  IntBuffer renderBuffers=BufferUtils.createIntBuffer(2).put(GL_COLOR_ATTACHMENT0).put(GL_COLOR_ATTACHMENT1);  renderBuffers.flip();  glNamedFramebufferDrawBuffers(this.fbo,renderBuffers);  glNamedRenderbufferStorage(this.depthBuffer,GL_DEPTH_COMPONENT,width,height);  glNamedFramebufferTexture(this.fbo,GL_COLOR_ATTACHMENT0,positionTexture,0);  glNamedFramebufferTexture(this.fbo,GL_COLOR_ATTACHMENT1,normalTexture,0);  glNamedFramebufferRenderbuffer(this.fbo,GL_DEPTH_ATTACHMENT,GL_RENDERBUFFER,depthBuffer);  int fboStatus=glCheckNamedFramebufferStatus(this.fbo,GL_FRAMEBUFFER);  if (fboStatus != GL_FRAMEBUFFER_COMPLETE) {    throw new AssertionError("Could not create FBO: " + fboStatus);  }}  }
class C{  public void testBug12975() throws Exception {  assertEquals(false,this.conn.getMetaData().supportsIntegrityEnhancementFacility());  Connection overrideConn=null;  try {    Properties props=new Properties();    props.setProperty("overrideSupportsIntegrityEnhancementFacility","true");    overrideConn=getConnectionWithProps(props);    assertEquals(true,overrideConn.getMetaData().supportsIntegrityEnhancementFacility());  }  finally {    if (overrideConn != null) {      overrideConn.close();    }  }}  }
class C{  @Deprecated public JTable makeJTable(TableModel srtr){  table=new SignalMastJTable(srtr);  table.getTableHeader().setReorderingAllowed(true);  table.setColumnModel(new XTableColumnModel());  table.createDefaultColumnsFromModel();  addMouseListenerToHeader(table);  return table;}  }
class C{  public void displayMech(Entity en){  gi.setEntity(en);  onResize();  update();}  }
class C{  public boolean isRaw(){  return (this.isGeneric() && (this.getTypeArgs().size() < this.getTypeVars().size()));}  }
class C{  public CotainerPeProvisionerSimple(double availableMips){  super(availableMips);  setPeTable(new HashMap<String,ArrayList<Double>>());}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  final int NUMBER_OF_YEARS=30;  System.out.print("\nThe amount invested: ");  double amount=input.nextDouble();  System.out.print("Annual interest rate: ");  double annualInterestRate=input.nextDouble();  double monthlyInterestRate=annualInterestRate / 1200;  System.out.println("Years     Future Value");  for (int years=1; years <= NUMBER_OF_YEARS; years++) {    System.out.printf("%-10d",years);    System.out.printf("%11.2f\n",futureInvestmentValue(amount,monthlyInterestRate,years));  }}  }
class C{  public int provideDumpInterval(){  return provideBlockThreshold();}  }
class C{  public static HashMap<String,Double> calcMLStats(double predictions[][],int goldStandard[][],double t[],String[] classNames){  HashMap<String,Double> results=calcMLStats(predictions,goldStandard,t);  int L=goldStandard[0].length;  int Ypred[][]=ThresholdUtils.threshold(predictions,t);  for (int j=0; j < L; j++) {    results.put(HAMMING_ACCURACY + " [" + classNames[j]+ "]",Metrics.P_Hamming(goldStandard,Ypred,j));    results.put(PRECISION + " [" + classNames[j]+ "]",Metrics.P_Precision(goldStandard,Ypred,j));    results.put(RECALL + " [" + classNames[j]+ "]",Metrics.P_Recall(goldStandard,Ypred,j));  }  return results;}  }
class C{  private static Image icon(){  if (!iconInitialized) {    iconInitialized=true;    try {      icon=new Image(null,ImageDescriptor.createFromURL(new URL(ICON_PATH)).getImageData());    } catch (    final MalformedURLException x) {      monitor.log(x);    }  }  return icon;}  }
class C{  private void handleResponse(Request request,JsonObject response,long startTime){  if (interceptors == null) {    return;  }  long ellapsedTime=getElapsedTimeInMs(startTime);  for (  IInterceptor interceptor : interceptors) {    interceptor.handleResponse(response,this,request.getCommand(),ellapsedTime);  }}  }
class C{  protected DateTimeConverter makeConverter(){  return new DateConverter();}  }
class C{  private void buildMap(){  int array[]=new int[DateSorter.DAY_COUNT];  for (int j=0; j < DateSorter.DAY_COUNT; j++) {    array[j]=0;  }  mNumberOfBins=0;  int dateIndex=-1;  if (mCursor.moveToFirst() && mCursor.getCount() > 0) {    while (!mCursor.isAfterLast()) {      long date=getLong(mDateIndex);      int index=mDateSorter.getIndex(date);      if (index > dateIndex) {        mNumberOfBins++;        if (index == DateSorter.DAY_COUNT - 1) {          array[index]=mCursor.getCount() - mCursor.getPosition();          break;        }        dateIndex=index;      }      array[dateIndex]++;      mCursor.moveToNext();    }  }  mItemMap=array;}  }
class C{  public String substr(final String key,final int start,final int end){  checkIsInMulti();  client.substr(key,start,end);  return client.getBulkReply();}  }
class C{  public static void validateReferenceType(int referenceType){  if (referenceType < 0 || referenceType > 3) {    throw new InvalidReferenceTypeException(referenceType);  }}  }
class C{  private synchronized void pauseTrackDataHub(){  trackDataHub.unregisterTrackDataListener(this);  trackDataHub=null;}  }
class C{  public static String decode(String uri){  StringBuffer translatedUri=new StringBuffer(uri.length());  byte[] encodedchars=new byte[uri.length() / 3];  int i=0;  int length=uri.length();  int encodedcharsLength=0;  while (i < length) {    if (uri.charAt(i) == '%') {      while (i < length && uri.charAt(i) == '%') {        if (i + 2 < length) {          try {            byte x=(byte)Integer.parseInt(uri.substring(i + 1,i + 3),16);            encodedchars[encodedcharsLength]=x;          } catch (          NumberFormatException e) {            throw new IllegalArgumentException("Illegal hex characters in pattern %" + uri.substring(i + 1,i + 3));          }          encodedcharsLength++;          i+=3;        } else {          throw new IllegalArgumentException("% character should be followed by 2 hexadecimal characters.");        }      }      try {        String translatedPart=new String(encodedchars,0,encodedcharsLength,"UTF-8");        translatedUri.append(translatedPart);      } catch (      UnsupportedEncodingException e) {        throw new RuntimeException("Problem in decodePath: UTF-8 encoding not supported.");      }      encodedcharsLength=0;    } else {      translatedUri.append(uri.charAt(i));      i++;    }  }  return translatedUri.toString();}  }
class C{  private void updateProgress(int progress){  if (pluginHost != null && progress != previousProgress) {    pluginHost.updateProgress(progress);  } else {    System.out.println(progress + "%");  }  previousProgress=progress;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.568 -0500",hash_original_method="3D6D7F94DFC73BF2A0EB1C158A6FC357",hash_generated_method="D1E57725ACE8F38B9709E328D5A54E89") public boolean decodeTokenText(int startIndex){  int index=startIndex;  while (wspData[index] != 0) {    index++;  }  dataLength=index - startIndex + 1;  stringValue=new String(wspData,startIndex,dataLength - 1);  return true;}  }
class C{  public ConnectionFactory(){  this(null,null);}  }
class C{  public Iterable<Edge> edges(){  return mst;}  }
class C{  @Override public boolean pruneValues(double threshold){  boolean changed=false;  Map<Assignment,Double> newTable=new HashMap<Assignment,Double>();  for (  Assignment row : table.keySet()) {    double prob=table.get(row);    if (prob >= threshold) {      newTable.put(row,prob);    } else {      changed=true;    }  }  table=newTable;  return changed;}  }
class C{  private HashMap<String,Object> createHeaderDetails(String indexNumber,String transaction){  SimpleDateFormat sdf=new SimpleDateFormat("MMM-dd-yyyy HH:mm:ss");  String description="PTIS / " + indexNumber + " / "+ transaction+ " / "+ sdf.format(new Date());  String sourceURL=URL_FOR_DCB + indexNumber;  HashMap<String,Object> headerdetails=new HashMap<String,Object>();  headerdetails.put(VoucherConstant.VOUCHERNAME,VOUCHERNAME);  headerdetails.put(VoucherConstant.VOUCHERTYPE,VOUCHERTYPE);  headerdetails.put(VoucherConstant.DESCRIPTION,description);  headerdetails.put(VoucherConstant.VOUCHERNUMBER,VOUCHERNUMBER);  headerdetails.put(VoucherConstant.VOUCHERDATE,new Date());  headerdetails.put(VoucherConstant.STATUS,0);  headerdetails.put(VoucherConstant.MODULEID,PTIS_EG_MODULES_ID);  headerdetails.put(VoucherConstant.DEPARTMENTCODE,DEPT_CODE_TAX);  headerdetails.put(VoucherConstant.FUNDCODE,getFundCode());  headerdetails.put(VoucherConstant.SOURCEPATH,sourceURL);  return headerdetails;}  }
class C{  public void drawImage(int x,int y,int width,int height,Bitmap pic){  CBitmap bitmap=new CBitmap(pic,x,y);  bitmap.setWidth(width);  bitmap.setHeight(height);  mDrawableList.add(bitmap);  invalidate();}  }
class C{  public Transaction(Context context,Settings settings){  this.settings=settings;  this.context=context;  SMS_SENT=context.getPackageName() + SMS_SENT;  SMS_DELIVERED=context.getPackageName() + SMS_DELIVERED;  if (NOTIFY_SMS_FAILURE.equals(".NOTIFY_SMS_FAILURE")) {    NOTIFY_SMS_FAILURE=context.getPackageName() + NOTIFY_SMS_FAILURE;  }}  }
class C{  public Builder aclDeleteRoles(List<String> aclDeleteRoles){  aclBuilder().deleteRoles(aclDeleteRoles);  return this;}  }
class C{  public String toString(){  return store.toString();}  }
class C{  void notifyArriving(Integer id){  firePropertyChange("Arriving",null,id);  setReport("" + id);}  }
class C{  public CreateIndexRequest source(byte[] source,int offset,int length){  return source(new BytesArray(source,offset,length));}  }
class C{  private int assignLocalReducers(HadoopInputSplit split,int cnt,HadoopMapReducePlanTopology top,Mappers mappers,Map<UUID,Integer> resMap){  UUID nodeId=mappers.splitToNode.get(split);  assert nodeId != null;  HadoopMapReducePlanGroup grp=top.groupForId(nodeId);  assert grp != null;  int res=0;  while (res < cnt && grp.weight() < preferLocReducerThresholdWeight) {    res++;    grp.weight(grp.weight() + locReducerWeight);  }  if (res > 0) {    Integer reducerCnt=resMap.get(nodeId);    resMap.put(nodeId,reducerCnt == null ? res : reducerCnt + res);  }  return res;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void deployContext(String path,URL config,boolean update) throws TomcatManagerException, IOException {  deployContext(path,config,update,null);}  }
class C{  private Descriptor validDescriptor(final Descriptor in) throws RuntimeOperationsException {  Descriptor clone;  boolean defaulted=(in == null);  if (defaulted) {    clone=new DescriptorSupport();    MODELMBEAN_LOGGER.finer("Null Descriptor, creating new.");  } else {    clone=(Descriptor)in.clone();  }  if (defaulted && clone.getFieldValue("name") == null) {    clone.setField("name",this.getName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor name to " + this.getName());  }  if (defaulted && clone.getFieldValue("descriptorType") == null) {    clone.setField("descriptorType","operation");    MODELMBEAN_LOGGER.finer("Defaulting descriptorType to \"operation\"");  }  if (clone.getFieldValue("displayName") == null) {    clone.setField("displayName",this.getName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor displayName to " + this.getName());  }  if (clone.getFieldValue("role") == null) {    clone.setField("role","operation");    MODELMBEAN_LOGGER.finer("Defaulting Descriptor role field to \"operation\"");  }  if (!clone.isValid()) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The isValid() method of the Descriptor object itself returned false," + "one or more required fields are invalid. Descriptor:" + clone.toString());  }  if (!getName().equalsIgnoreCase((String)clone.getFieldValue("name"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"name\" field does not match the object described. " + " Expected: " + this.getName() + " , was: "+ clone.getFieldValue("name"));  }  if (!"operation".equalsIgnoreCase((String)clone.getFieldValue("descriptorType"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"descriptorType\" field does not match the object described. " + " Expected: \"operation\" ," + " was: "+ clone.getFieldValue("descriptorType"));  }  final String role=(String)clone.getFieldValue("role");  if (!(role.equalsIgnoreCase("operation") || role.equalsIgnoreCase("setter") || role.equalsIgnoreCase("getter"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"role\" field does not match the object described. " + " Expected: \"operation\", \"setter\", or \"getter\" ," + " was: "+ clone.getFieldValue("role"));  }  final Object targetValue=clone.getFieldValue("targetType");  if (targetValue != null) {    if (!(targetValue instanceof java.lang.String)) {      throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor field \"targetValue\" is invalid class. " + " Expected: java.lang.String, " + " was: "+ targetValue.getClass().getName());    }  }  return clone;}  }
class C{  public Transformation(){  clear();}  }
class C{  public void serialize(final OutputStream output) throws IOException {  ZipOutputStream zipStream=new ZipOutputStream(output);  WorkspaceComponentSerializer serializer=new WorkspaceComponentSerializer(zipStream);  ArchiveContents archive=new ArchiveContents(workspace,serializer);  workspace.preSerializationInit();  serializeComponents(serializer,archive,zipStream);  for (  Coupling<?> coupling : workspace.getCouplingManager().getCouplings()) {    archive.addCoupling(coupling);  }  for (  UpdateAction action : workspace.getUpdater().getUpdateManager().getActionList()) {    archive.addUpdateAction(action);  }  ZipEntry entry=new ZipEntry("contents.xml");  zipStream.putNextEntry(entry);  archive.toXml(zipStream);  zipStream.finish();}  }
class C{  private boolean isAtElement(String uri,String name){  return reader.getEventType() == XMLStreamReader.START_ELEMENT && uri.equals(reader.getNamespaceURI()) && name.equals(reader.getName().getLocalPart());}  }
class C{  public static float nextDown(final float start){  if (start > Float.NEGATIVE_INFINITY) {    if (start == 0.0f) {      return -Float.MIN_VALUE;    }    final int bits=Float.floatToRawIntBits(start);    return Float.intBitsToFloat(bits + (bits > 0 ? -1 : 1));  } else   if (start == Float.NEGATIVE_INFINITY) {    return Float.NEGATIVE_INFINITY;  } else {    return start;  }}  }
class C{  private static boolean hasEulerianCycle(Digraph G){  if (G.E() == 0)   return false;  for (int v=0; v < G.V(); v++)   if (G.outdegree(v) != G.indegree(v))   return false;  Graph H=new Graph(G.V());  for (int v=0; v < G.V(); v++)   for (  int w : G.adj(v))   H.addEdge(v,w);  int s=nonIsolatedVertex(G);  BreadthFirstPaths bfs=new BreadthFirstPaths(H,s);  for (int v=0; v < G.V(); v++)   if (H.degree(v) > 0 && !bfs.hasPathTo(v))   return false;  return true;}  }
class C{  void balanceTree(BinarySearchTreeNode<E> node){  while (node != null) {    node=balance(node);    node=node.parent;  }}  }
class C{  public boolean canBeInstantiated(){  return (this.modifiers & (ClassFileConstants.AccAbstract | ClassFileConstants.AccInterface | ClassFileConstants.AccEnum| ClassFileConstants.AccAnnotation)) == 0;}  }
class C{  protected void addLogRec(String string){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.mLogRecords.add(this,smh.getCurrentMessage(),string,smh.getCurrentState(),smh.mStateStack[smh.mStateStackTopIndex].state,smh.mDestState);}  }
class C{  public void paintSplitPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static int dip2px(Context context,float dip){  float density=getDensity(context);  return (int)(dip * density + DensityUtils.DOT_FIVE);}  }
class C{  public Object put(Object key1,Object key2,Object key3,Object key4,Object value){  int hashCode=hash(key1,key2,key3,key4);  int index=map.hashIndex(hashCode,map.data.length);  AbstractHashedMap.HashEntry entry=map.data[index];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(entry,key1,key2,key3,key4)) {      Object oldValue=entry.getValue();      map.updateEntry(entry,value);      return oldValue;    }    entry=entry.next;  }  map.addMapping(index,hashCode,new MultiKey(key1,key2,key3,key4),value);  return null;}  }
class C{  public static long parseDateValue(String s,int start,int end){  if (s.charAt(start) == '+') {    start++;  }  int s1=s.indexOf('-',start + 1);  int s2=s.indexOf('-',s1 + 1);  if (s1 <= 0 || s2 <= s1) {    throw new IllegalArgumentException(s);  }  int year=Integer.parseInt(s.substring(start,s1));  int month=Integer.parseInt(s.substring(s1 + 1,s2));  int day=Integer.parseInt(s.substring(s2 + 1,end));  if (!isValidDate(year,month,day)) {    throw new IllegalArgumentException(year + "-" + month+ "-"+ day);  }  return dateValue(year,month,day);}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  float[] oldKeys=_set;  float[] oldVals=_values;  byte[] oldStates=_states;  _set=new float[newCapacity];  _values=new float[newCapacity];  _states=new byte[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldStates[i] == FULL) {      float o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];      _states[index]=FULL;    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public final void testEqualsObject03(){  assertFalse(new ECFieldFp(BigInteger.valueOf(23L)).equals(new Object()));}  }
class C{  protected static long calculateDownlink(IBandIdentifier iden,int channel){  if (iden != null) {    return iden.getBaseFrequency() + (channel * iden.getChannelSpacing());  }  return 0;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean execute(String sql,int[] columnIndexes) throws SQLException {  try {    debugCode("execute(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void parseGenes(){  GEPSpecies species=(GEPSpecies)this.myGEPIndividual.species;  boolean hasConstants=species.useConstants;  parsedGeneExpressions=new GEPExpressionTreeNode[genome.length];  for (int i=0; i < genome.length; i++) {    if (hasConstants)     parsedGeneExpressions[i]=parseGeneWithConstants(genome[i],genomeDc[i],genomeConstants[i],species.symbolSet); else     parsedGeneExpressions[i]=parseGene(genome[i],species.symbolSet);  }}  }
class C{  public boolean isReadOnly(){  if (m_vo.IsReadOnly)   return true;  if (m_parentNeedSave)   return true;  if (m_vo.ReadOnlyLogic == null || m_vo.ReadOnlyLogic.equals(""))   return m_vo.IsReadOnly;  boolean retValue=Evaluator.evaluateLogic(this,m_vo.ReadOnlyLogic);  log.finest(m_vo.Name + " (" + m_vo.ReadOnlyLogic+ ") => "+ retValue);  return retValue;}  }
class C{  public static void printSeparator(final Display display,final char c){  Check.notNull(display,"display");  final StringBuffer sb=new StringBuffer();  final int w=display.getWidth() - 1;  for (int i=0; i < w; i++) {    sb.append(c);  }  display.printLine(sb.toString());}  }
class C{  public static LoganSquareConverterFactory create(){  return new LoganSquareConverterFactory();}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  CandleDataset clone=(CandleDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public int[] clusterSplit(int targetK){  if (originalDataSet == null)   throw new ClusterFailureException("No prior cluster stored");  int[] newDesignations=Arrays.copyOf(fullDesignations,fullDesignations.length);  for (int k=splitList.length / 2 - 1; k >= targetK; k--) {    if (splitList[k * 2] == splitList[k * 2 + 1])     continue;    for (int j=0; j < newDesignations.length; j++)     if (newDesignations[j] == splitList[k * 2 + 1])     newDesignations[j]=splitList[k * 2];  }  return newDesignations;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double z, z2, zMin;  int x, y, a, b, i;  double h=0;  int whichCell;  double infVal=9999999;  int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};  int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};  int[] Gx=new int[]{1,1,0,1,1,1,0,1};  int[] Gy=new int[]{0,1,1,1,0,1,1,1};  double gridRes;  double bufferSize=1;  boolean bufferInGridCells=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      bufferSize=Double.parseDouble(args[i]);    } else     if (i == 3) {      if (args[i].toLowerCase().contains("cells")) {        bufferInGridCells=true;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    gridRes=(image.getCellSizeX() + image.getCellSizeY()) / 2;    WhiteboxRaster outputImage=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    outputImage.setPreferredPalette(image.getPreferredPalette());    WhiteboxRaster allocation=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    allocation.isTemporaryFile=true;    WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Rx.isTemporaryFile=true;    WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Ry.isTemporaryFile=true;    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != 0) {          outputImage.setValue(row,col,0);          allocation.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=outputImage.getValue(row,col);        if (z != 0) {          zMin=infVal;          whichCell=-1;          for (i=0; i <= 3; i++) {            x=col + dX[i];            y=row + dY[i];            z2=outputImage.getValue(y,x);            if (z2 != noData) {switch (i) {case 0:                h=2 * Rx.getValue(y,x) + 1;              break;case 1:            h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);          break;case 2:        h=2 * Ry.getValue(y,x) + 1;      break;case 3:    h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);  break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=outputImage.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=outputImage.getValue(y,x);if (z2 != noData) {switch (i) {case 5:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * (rows - 1 - row) / (rows - 1));updateProgress((int)progress);}if (bufferInGridCells) {bufferSize=bufferSize * bufferSize;} else {bufferSize=(bufferSize / gridRes) * (bufferSize / gridRes);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {if (image.getValue(row,col) != noData) {z=outputImage.getValue(row,col);if (z <= bufferSize) {outputImage.setValue(row,col,allocation.getValue(row,col));} else {outputImage.setValue(row,col,0);}} else {outputImage.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}outputImage.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");outputImage.addMetadataEntry("Created on " + new Date());image.close();allocation.close();outputImage.close();Rx.close();Ry.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void doNextOp(DhcpStateMachine machine){  machine.onAckReceived(mYourIp,mSubnetMask,mGateway,mDnsServers,mServerIdentifier,getInt(mLeaseTime));}  }
class C{  static byte[] generateDSDigest(DNSKEYRecord key,int digestid){  MessageDigest digest;  try {switch (digestid) {case DSRecord.Digest.SHA1:      digest=MessageDigest.getInstance("sha-1");    break;case DSRecord.Digest.SHA256:  digest=MessageDigest.getInstance("sha-256");break;case DSRecord.Digest.SHA384:digest=MessageDigest.getInstance("sha-384");break;default :throw new IllegalArgumentException("unknown DS digest type " + digestid);}} catch (NoSuchAlgorithmException e) {throw new IllegalStateException("no message digest support");}digest.update(key.getName().toWireCanonical());digest.update(key.rdataToWireCanonical());return digest.digest();}  }
class C{  private void selectDefaultSaveFolderOnLibraryFirstTime(GUIMediator.Tabs tab){  if (!tab.navigatedTo && tab.equals(GUIMediator.Tabs.LIBRARY)) {    LibraryMediator.instance().getLibraryExplorer().selectFinishedDownloads();    tab.navigatedTo=true;  }}  }
class C{  public Transcript(String sessionID){  this.sessionID=sessionID;  this.packets=new ArrayList<Packet>();}  }
class C{  private double calcTargetPotentialDamageMultiplier(Targetable target){  double target_damage=calcTargetPotentialDamage(target);  if (target_damage == 0.0) {    return 1.0;  }  double self_preservation=owner.getBehaviorSettings().getSelfPreservationValue();  double max_self_preservation=owner.getBehaviorSettings().getSelfPreservationValue(10);  double preservation_scaling_factor=max_self_preservation / self_preservation;  return Math.log10(TARGET_POTENTIAL_DAMAGE_UTILITY * preservation_scaling_factor * target_damage + 10);}  }
class C{  public static <T1,T2>void transform(Collection<T1> from,Collection<T2> to,Transformer<T1,T2> transformer){  for (  T1 instance : from) {    to.add(transformer.transform(instance));  }}  }
class C{  private void add(int address,Disposition disposition,RegisterSpec spec){  int regNum=spec.getReg();  result.add(new Entry(address,disposition,spec));  if (disposition == Disposition.START) {    regs.put(spec);    endIndices[regNum]=-1;  } else {    regs.remove(spec);    endIndices[regNum]=result.size() - 1;  }}  }
class C{  public void addAuthPolicy(String policyUri){  String policies=getAuthPolicies();  if (policies == null || AUTH_POLICY_NONE.equals(policies))   setAuthPolicies(policyUri); else   setAuthPolicies(policies + " " + policyUri);}  }
class C{  public static void markExistingUsersForNoFolderCreation(Context context){  UserManagerCompat userManager=UserManagerCompat.getInstance(context);  UserHandleCompat myUser=UserHandleCompat.myUserHandle();  SharedPreferences prefs=null;  for (  UserHandleCompat user : userManager.getUserProfiles()) {    if (myUser.equals(user)) {      continue;    }    if (prefs == null) {      prefs=context.getSharedPreferences(LauncherFiles.MANAGED_USER_PREFERENCES_KEY,Context.MODE_PRIVATE);    }    String folderIdKey=USER_FOLDER_ID_PREFIX + userManager.getSerialNumberForUser(user);    if (!prefs.contains(folderIdKey)) {      prefs.edit().putLong(folderIdKey,ItemInfo.NO_ID).apply();    }  }}  }
class C{  public static boolean isDecimalPoint(String langInfo){  return getLanguage(langInfo).isDecimalPoint();}  }
class C{  private <T>T argument(String key){  return (T)args.get(key);}  }
class C{  public static ELText parse(ExpressionFactory fact,ELContext ctx,String in,String alias) throws ELException {  char[] ca=in.toCharArray();  int i=0;  char c=0;  int len=ca.length;  int end=len - 1;  boolean esc=false;  int vlen=0;  StringBuffer buff=new StringBuffer(128);  List text=new ArrayList();  ELText t=null;  ValueExpression ve=null;  while (i < len) {    c=ca[i];    if ('\\' == c) {      esc=!esc;      if (esc && i < end && (ca[i + 1] == '$' || ca[i + 1] == '#')) {        i++;        continue;      }    } else     if (!esc && ('$' == c || '#' == c)) {      if (i < end) {        if ('{' == ca[i + 1]) {          if (buff.length() > 0) {            text.add(new ELText(buff.toString()));            buff.setLength(0);          }          vlen=findVarLength(ca,i);          if (ctx != null && fact != null) {            ve=fact.createValueExpression(ctx,new String(ca,i,vlen),String.class);            t=new ELTextVariable(ve);          } else {            String expr=new String(ca,i,vlen);            if (null != alias && ELUtils.isCompositeComponentExpr(expr)) {              if (ELUtils.isCompositeComponentLookupWithArgs(expr)) {                String message=MessageUtils.getExceptionMessageString(MessageUtils.ARGUMENTS_NOT_LEGAL_CC_ATTRS_EXPR);                throw new ELException(message);              }              FacesContext context=FacesContext.getCurrentInstance();              ELContext elContext=context.getELContext();              ValueExpression delegate=context.getApplication().getExpressionFactory().createValueExpression(elContext,expr,Object.class);              Location location=new Location(alias,-1,-1);              ve=new ContextualCompositeValueExpression(location,delegate);            } else {              ve=new LiteralValueExpression(expr);            }            t=new ELTextVariable(ve);          }          text.add(t);          i+=vlen;          continue;        }      }    }    esc=false;    buff.append(c);    i++;  }  if (buff.length() > 0) {    text.add(new ELText(buff.toString()));    buff.setLength(0);  }  if (text.isEmpty()) {    return new ELText("");  } else   if (text.size() == 1) {    return (ELText)text.get(0);  } else {    ELText[] ta=(ELText[])text.toArray(new ELText[text.size()]);    return new ELTextComposite(ta);  }}  }
class C{  public PipedWriter(PipedReader snk) throws IOException {  connect(snk);}  }
class C{  public NSAP_PTRRecord(Name name,int dclass,long ttl,Name target){  super(name,Type.NSAP_PTR,dclass,ttl,target,"target");}  }
class C{  public static List<String> searchRegex(String text,Pattern pattern){  List<String> result=new ArrayList<>();  Matcher matcher=pattern.matcher(text);  while (matcher.find()) {    result.add(matcher.group());  }  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix08.class,args);}  }
class C{  java.sql.Time toSqlTime(Calendar calendar){  return new java.sql.Time(getTimeInMillis(calendar));}  }
class C{  public static void putString(Context context,String key,String value){  SharedPreferences mainPref=context.getSharedPreferences(context.getResources().getString(R.string.shared_pref_package),Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putString(key,value);  editor.commit();}  }
class C{  default Information put(final String name,final Information i){  throw new IllegalArgumentException(name + "/" + i);}  }
class C{  public void release(){  reset();  if (_bufferRecycler != null && _currBlock != null) {    _bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.WRITE_CONCAT_BUFFER,_currBlock);    _currBlock=null;  }}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  protected void addStatePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TraceStateEntered_state_feature"),getString("_UI_PropertyDescriptor_description","_UI_TraceStateEntered_state_feature","_UI_TraceStateEntered_type"),SexecPackage.Literals.TRACE_STATE_ENTERED__STATE,true,false,true,null,null,null));}  }
class C{  public void close(){  if (client != null) {    client.close();  }}  }
class C{  public static Security rpk(String serverUri,int shortServerId,byte[] clientPublicKey,byte[] clientPrivateKey,byte[] serverPublicKey){  return new Security(serverUri,false,1,clientPublicKey.clone(),serverPublicKey.clone(),clientPrivateKey.clone(),shortServerId);}  }
class C{  public boolean hasWildcard(){  return false;}  }
class C{  public Installer on(@NonNull Fragment fragment){  rootView=(ViewGroup)fragment.getView().getRootView();  return this;}  }
class C{  public long readI64() throws TException {  return zigzagToLong(readVarint64());}  }
class C{  public boolean isDecimalSeparatorAlwaysShown(){  return ndf.isDecimalSeparatorAlwaysShown();}  }
class C{  @Nullable DebugCounterImpl addCounter(@Nonnull DebugCounterImpl counter){  verifyIsRoot();  ArrayList<String> path=new ArrayList<>();  path.add(counter.getModuleName());  for (  String element : counter.getCounterHierarchy().split(QUOTED_SEP)) {    path.add(element);  }  String newCounterName=path.get(path.size() - 1);  CounterNode parent=lookup(path.subList(0,path.size() - 1));  if (parent == null) {    throw new IllegalArgumentException("Missing hierarchy level for " + "counter: " + counter.getModuleName() + " "+ counter.getCounterHierarchy());  }  if (parent.children.containsKey(newCounterName)) {    CounterNode old=parent.children.get(newCounterName);    old.resetHierarchy();    return old.counter;  } else {    CounterNode newNode=new CounterNode(path,counter);    parent.children.put(newCounterName,newNode);    return null;  }}  }
class C{  public TunerConfigurationModel(){}  }
class C{  public void testResourcesAvailable(){  new NorwegianAnalyzer().close();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void loadChangePubKey(){  changePubKey=KeyOps.loadDSAPublicKeyFile(username);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void removeAllListeners(){  listeners.clear();}  }
class C{  private void writeResources(CSVPrinter writer) throws IOException {  writeResourceHeaders(writer);  for (  HumanResource p : myProject.getHumanResourceManager().getResources()) {    for (    Map.Entry<String,BooleanOption> entry : csvOptions.getResourceOptions().entrySet()) {      if (!entry.getValue().isChecked()) {        continue;      }      ResourceDefaultColumn defaultColumn=ResourceDefaultColumn.find(entry.getKey());      if (defaultColumn == null) {        if ("id".equals(entry.getKey())) {          writer.print(String.valueOf(p.getId()));          continue;        }      } else {switch (defaultColumn) {case NAME:          writer.print(p.getName());        break;case EMAIL:      writer.print(p.getMail());    break;case PHONE:  writer.print(p.getPhone());break;case ROLE:Role role=p.getRole();String sRoleID=role == null ? "0" : role.getPersistentID();writer.print(sRoleID);break;case ROLE_IN_TASK:writer.print("");break;case STANDARD_RATE:writer.print(p.getStandardPayRate().toPlainString());break;}}}List<CustomProperty> customProps=p.getCustomProperties();for (int j=0; j < customProps.size(); j++) {CustomProperty nextProperty=customProps.get(j);writer.print(nextProperty.getValueAsString());}writer.println();}}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("BreakpointTarg");  targetClass=(ClassType)bpe.location().declaringType();  mainThread=bpe.thread();  EventRequestManager erm=vm().eventRequestManager();  Location loc1=findLocation(targetClass,BreakpointTarg.BKPT_LINE);  bkptRequest=erm.createBreakpointRequest(loc1);  bkptRequest.enable();  debuggeeCountField=targetClass.fieldByName("count");  try {    addListener(this);  } catch (  Exception ex) {    ex.printStackTrace();    failure("failure: Could not add listener");    throw new Exception("BreakpointTest: failed");  }  int prevBkptCount;  vm().resume();  while (!vmDisconnected && bkptCount < maxBkpts) {    try {      Thread.sleep(5000);    } catch (    InterruptedException ee) {    }  }  println("done with loop, final count = " + ((LongValue)targetClass.getValue(debuggeeCountField)).value());  bkptRequest.disable();  removeListener(this);  if (!testFailed) {    println("BreakpointTest: passed");  } else {    throw new Exception("BreakpointTest: failed");  }}  }
class C{  private void generateRecursive(List<double[]> weights,double[] weight,int numberOfObjectives,int left,int total,int index){  if (index == (numberOfObjectives - 1)) {    weight[index]=(double)left / total;    weights.add(weight.clone());  } else {    for (int i=0; i <= left; i+=1) {      weight[index]=(double)i / total;      generateRecursive(weights,weight,numberOfObjectives,left - i,total,index + 1);    }  }}  }
class C{  public boolean canRead(){  return file.canRead();}  }
class C{  public static TestGenerationResult writeJUnitTestsAndCreateResult(TestSuiteChromosome testSuite,String suffix){  List<TestCase> tests=testSuite.getTests();  if (Properties.JUNIT_TESTS) {    ClientServices.getInstance().getClientNode().changeState(ClientState.WRITING_TESTS);    TestSuiteWriter suiteWriter=new TestSuiteWriter();    suiteWriter.insertTests(tests);    if (Properties.CHECK_CONTRACTS) {      LoggingUtils.getEvoLogger().info("* Writing failing test cases");      FailingTestSet.writeJUnitTestSuite(suiteWriter);    }    String name=Properties.TARGET_CLASS.substring(Properties.TARGET_CLASS.lastIndexOf(".") + 1);    String testDir=Properties.TEST_DIR;    LoggingUtils.getEvoLogger().info("* Writing JUnit test case '" + (name + suffix) + "' to "+ testDir);    suiteWriter.writeTestSuite(name + suffix,testDir,testSuite.getLastExecutionResults());    if (!RegressionSearchListener.statsID.equals("") && Properties.REGRESSION_STATISTICS) {      File evosuiterTestDir=new File("evosuiter-stats");      boolean madeDir=false;      if (!evosuiterTestDir.exists() || !evosuiterTestDir.isDirectory()) {        madeDir=evosuiterTestDir.mkdirs();      }      if (madeDir) {        String regressionTestName="T" + RegressionSearchListener.statsID + "Test";        LoggingUtils.getEvoLogger().info("* Writing JUnit test case '" + (regressionTestName) + "' to "+ evosuiterTestDir);        suiteWriter.writeTestSuite(regressionTestName,evosuiterTestDir.getName(),Collections.EMPTY_LIST);      }    }  }  return TestGenerationResultBuilder.buildSuccessResult();}  }
class C{  protected boolean isDefaultGateway(Ethernet frame){  if (macToGateway.containsKey(frame.getSourceMACAddress()))   return true;  IPv4Address gwIp=macToGateway.get(frame.getDestinationMACAddress());  if (gwIp != null) {    MacAddress host=frame.getSourceMACAddress();    String srcNet=macToGuid.get(host);    if (srcNet != null) {      IPv4Address gwIpSrcNet=guidToGateway.get(srcNet);      if ((gwIpSrcNet != null) && (gwIp.equals(gwIpSrcNet)))       return true;    }  }  return false;}  }
class C{  public void aggregateCheck(){  boolean ret=true;  List<ScriptStep> selectedSteps=scriptEditor.getSelectedSteps();  List<ScriptStep> steps=scriptEditor.getSteps();  if (selectedSteps.size() > 1) {    Collections.sort(selectedSteps);    int index=selectedSteps.get(0).getStepIndex();    for (int i=0; i < selectedSteps.size(); i++) {      if (selectedSteps.get(i).getStepIndex() != (i + index)) {        ret=false;        break;      }    }  } else {    ret=false;  }  canBeAggregated=ret;}  }
class C{  @Override public void agg(Object newVal){  aggVal++;}  }
class C{  public static List<GeoTimeSerie> partitionAndApply(Object function,WarpScriptStack stack,Macro validator,Collection<String> bylabels,List<GeoTimeSerie>... series) throws WarpScriptException {  Map<Map<String,String>,List<GeoTimeSerie>> unflattened=partitionAndApplyUnflattened(function,stack,validator,bylabels,series);  List<GeoTimeSerie> results=new ArrayList<GeoTimeSerie>();  for (  List<GeoTimeSerie> l : unflattened.values()) {    results.addAll(l);  }  return results;}  }
class C{  protected CacheConfiguration cacheConfiguration(String gridName,String cacheName){  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setName(cacheName);  cacheCfg.setCacheMode(PARTITIONED);  cacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  cacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(GRP_SIZE));  cacheCfg.setBackups(0);  cacheCfg.setAtomicityMode(TRANSACTIONAL);  return cacheCfg;}  }
class C{  public static void createFromToken(String token){  if (instance == null) {    instance=new CloudPersona();  }  instance.persona=token;  Preferences.set("CN1Persona",token);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void resizeMedia(int byteLimit,long messageId) throws MmsException {}  }
class C{  public static void list(){  if (MAIN.lastIndex == 0) {    return;  }  try {    MAIN.listUnvisited();    MAIN.listTop("MOST CALLED",MAIN.count,top);    MAIN.listTop("MOST TIME USED",MAIN.time,top);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public UCrop withAspectRatio(float x,float y){  mCropOptionsBundle.putBoolean(EXTRA_ASPECT_RATIO_SET,true);  mCropOptionsBundle.putFloat(EXTRA_ASPECT_RATIO_X,x);  mCropOptionsBundle.putFloat(EXTRA_ASPECT_RATIO_Y,y);  return this;}  }
class C{  public void addBelow(double dWidth,double dHeight){  if (this.width < dWidth)   this.width=dWidth;  this.height+=dHeight;}  }
class C{  private Query readInitialQuery(BinaryRawReaderEx reader) throws IgniteCheckedException {  int typ=reader.readInt();switch (typ) {case -1:    return null;case OP_QRY_SCAN:  return readScanQuery(reader);case OP_QRY_SQL:return readSqlQuery(reader);case OP_QRY_TXT:return readTextQuery(reader);}throw new IgniteCheckedException("Unsupported query type: " + typ);}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case N4JSPackage.N4_SETTER_DECLARATION__OWNER:    return eInternalContainer().eInverseRemove(this,N4JSPackage.N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW,N4ClassifierDefinition.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  public void handleConfiguration(Class<OpsType> opsType) throws InstantiationException, IllegalAccessException {  if (mRetainedFragmentManager.firstTimeIn()) {    Log.d(TAG,"First time onCreate() call");    initialize(opsType);  } else {    Log.d(TAG,"Second or subsequent onCreate() call");    mOpsInstance=mRetainedFragmentManager.get(opsType.getSimpleName());    if (mOpsInstance == null)     initialize(opsType); else     mOpsInstance.onConfiguration(this,false);  }}  }
class C{  private void loadChildRoles(boolean reload){  m_includedRoles=null;  final int AD_User_ID=getAD_User_ID();  if (AD_User_ID < 0) {    return;  }  final String whereClause=X_AD_Role_Included.COLUMNNAME_AD_Role_ID + "=?";  List<X_AD_Role_Included> list=new Query(getCtx(),X_AD_Role_Included.Table_Name,whereClause,get_TrxName()).setParameters(new Object[]{getAD_Role_ID()}).setOnlyActiveRecords(true).setOrderBy(X_AD_Role_Included.COLUMNNAME_SeqNo + "," + X_AD_Role_Included.COLUMNNAME_Included_Role_ID).list();  for (  X_AD_Role_Included includedRole : list) {    MRole role=MRole.get(getCtx(),includedRole.getIncluded_Role_ID());    includeRole(role,includedRole.getSeqNo());  }}  }
class C{  protected Vec4 computeEllipsoidalPointFromScreen(DragContext dragContext,Point screenPoint,double altitude,boolean utilizeSearchMethod){  Line ray=dragContext.getView().computeRayFromScreenPoint(screenPoint.getX(),screenPoint.getY());  Vec4 globePoint=this.computeGlobeIntersection(ray,altitude,utilizeSearchMethod,dragContext.getGlobe(),dragContext.getSceneController());  if (globePoint == null)   return null;  Position screenPosition=dragContext.getGlobe().computePositionFromPoint(globePoint);  if (screenPosition == null)   return null;  return dragContext.getGlobe().computeEllipsoidalPointFromPosition(screenPosition);}  }
class C{  private void displayServiceBinding(boolean status){  mServiceBound.setText(String.valueOf(status));}  }
class C{  private void output(String string) throws IOException {  int length=string.length();  if (tempChars == null || tempChars.length < length) {    tempChars=new char[length];  }  string.getChars(0,length,tempChars,0);  super.output(tempChars,0,length);}  }
class C{  public boolean visit(VariableDeclarationFragment node){  return true;}  }
class C{  ClientResponse put(URI uri){  return setResourceHeaders(_client.resource(uri)).put(ClientResponse.class);}  }
class C{  public static _ApplicationGroupSpecialType fromString(final String value) throws SOAPSerializationException {  return (_ApplicationGroupSpecialType)Enumeration.fromString(value,_ApplicationGroupSpecialType.VALUES_TO_INSTANCES);}  }
class C{  private void addGroupText(FormEntryCaption[] groups){  StringBuilder s=new StringBuilder("");  String t="";  int i;  for (  FormEntryCaption g : groups) {    i=g.getMultiplicity() + 1;    t=g.getLongText();    if (t != null) {      s.append(t);      if (g.repeats() && i > 0) {        s.append(" (" + i + ")");      }      s.append(" > ");    }  }  if (s.length() > 0) {    TextView tv=new TextView(getContext());    tv.setText(s.substring(0,s.length() - 3));    int questionFontsize=Collect.getQuestionFontsize();    tv.setTextSize(TypedValue.COMPLEX_UNIT_DIP,questionFontsize - 4);    tv.setPadding(0,0,0,5);    mView.addView(tv,mLayout);  }}  }
class C{  public final MutableDouble2D negate(){  x=-x;  y=-y;  return this;}  }
class C{  @PostUpdate public void postUpdate(final Object entity){  notifyAll(null);}  }
class C{  private static void rejectPoolingOptions(Properties p) throws SQLFeatureNotSupportedException {  if (p.containsKey(DataSourceFactory.JDBC_INITIAL_POOL_SIZE) || p.containsKey(DataSourceFactory.JDBC_MAX_IDLE_TIME) || p.containsKey(DataSourceFactory.JDBC_MAX_POOL_SIZE)|| p.containsKey(DataSourceFactory.JDBC_MAX_STATEMENTS)|| p.containsKey(DataSourceFactory.JDBC_MIN_POOL_SIZE)|| p.containsKey(DataSourceFactory.JDBC_PROPERTY_CYCLE)) {    throw new SQLFeatureNotSupportedException("Pooling properties are not supported by H2");  }}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public MultipartBody build(){  if (parts.isEmpty()) {    throw new IllegalStateException("Multipart body must have at least one part.");  }  return new MultipartBody(boundary,type,parts);}  }
class C{  public void target(Object... targets){  if (targets.length == 0) {    this.target=getProject().files();  } else   if (targets.length == 1) {    this.target=parseTarget(targets[0]);  } else {    if (Arrays.stream(targets).allMatch(null)) {      this.target=parseTarget(Arrays.asList(targets));    } else {      UnionFileCollection union=new UnionFileCollection();      for (      Object target : targets) {        union.add(parseTarget(target));      }      this.target=union;    }  }}  }
class C{  public R addParams(String key,InputStream stream,String name,String contentType,boolean autoClose){  if (key != null && stream != null) {    mStreamParams.put(key,StreamWrapper.newInstance(stream,name,contentType,autoClose));  }  return (R)this;}  }
class C{  public Builder addDnsServer(InetAddress address){  if (address.isLoopbackAddress() || address.isAnyLocalAddress()) {    throw new IllegalArgumentException("Bad address");  }  if (mConfig.dnsServers == null) {    mConfig.dnsServers=new ArrayList<String>();  }  mConfig.dnsServers.add(address.getHostAddress());  return this;}  }
class C{  public boolean isSTW(){  return stw;}  }
class C{  public static void hshaServer(PacketStreamer.Processor<PacketStreamerHandler> processor){  try {    TNonblockingServerTransport serverTransport=new TNonblockingServerSocket(port);    THsHaServer.Args args=new THsHaServer.Args(serverTransport);    args.processor(processor);    args.transportFactory(new TFramedTransport.Factory());    args.protocolFactory(new TBinaryProtocol.Factory(true,true));    TServer server=new THsHaServer(args);    log.info("Starting the packetstreamer hsha server on port {} ...",port);    server.serve();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Override public void visitMethodDef(final JCMethodDecl tree){  if (tree.sym == null) {    Assert.error("Visiting tree node before memberEnter");  }  if (sigOnly) {    if (!tree.mods.annotations.isEmpty()) {      TypeAnnotationPosition pos=new TypeAnnotationPosition();      pos.type=TargetType.METHOD_RETURN;      if (tree.sym.isConstructor()) {        pos.pos=tree.pos;        separateAnnotationsKinds(tree,null,tree.sym,pos);      } else {        pos.pos=tree.restype.pos;        separateAnnotationsKinds(tree.restype,tree.sym.type.getReturnType(),tree.sym,pos);      }    }    if (tree.recvparam != null && tree.recvparam.sym != null && !tree.recvparam.mods.annotations.isEmpty()) {      TypeAnnotationPosition pos=new TypeAnnotationPosition();      pos.type=TargetType.METHOD_RECEIVER;      pos.pos=tree.recvparam.vartype.pos;      separateAnnotationsKinds(tree.recvparam.vartype,tree.recvparam.sym.type,tree.recvparam.sym,pos);    }    int i=0;    for (    JCVariableDecl param : tree.params) {      if (!param.mods.annotations.isEmpty()) {        TypeAnnotationPosition pos=new TypeAnnotationPosition();        pos.type=TargetType.METHOD_FORMAL_PARAMETER;        pos.parameter_index=i;        pos.pos=param.vartype.pos;        separateAnnotationsKinds(param.vartype,param.sym.type,param.sym,pos);      }      ++i;    }  }  push(tree);  if (sigOnly) {    scan(tree.mods);    scan(tree.restype);    scan(tree.typarams);    scan(tree.recvparam);    scan(tree.params);    scan(tree.thrown);  } else {    scan(tree.defaultValue);    scan(tree.body);  }  pop();}  }
class C{  private Long updateLongWithMax(Long previousValue,Long newValue){  if (newValue == null) {    return previousValue;  }  if (newValue < 0) {    return 0L;  }  return Math.max(previousValue,newValue);}  }
class C{  public static boolean checkClientSequences(Properties ctx,int AD_Client_ID,String trxName){  String sql="SELECT TableName " + "FROM AD_Table t " + "WHERE IsActive='Y' AND IsView='N'"+ " AND AD_Table_ID IN "+ "(SELECT AD_Table_ID FROM AD_Column "+ "WHERE ColumnName = 'DocumentNo' OR ColumnName = 'Value')"+ " AND 'DocumentNo_' || TableName NOT IN "+ "(SELECT Name FROM AD_Sequence s "+ "WHERE s.AD_Client_ID=?)";  int counter=0;  boolean success=true;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,trxName);    pstmt.setInt(1,AD_Client_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      String tableName=rs.getString(1);      s_log.fine("Add: " + tableName);      MSequence seq=new MSequence(ctx,AD_Client_ID,tableName,trxName);      if (seq.save())       counter++; else {        s_log.severe("Not created - AD_Client_ID=" + AD_Client_ID + " - "+ tableName);        success=false;      }    }  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  s_log.info("AD_Client_ID=" + AD_Client_ID + " - created #"+ counter+ " - success="+ success);  return success;}  }
class C{  @Override public void onReceive(Context context,Intent uriData){  Log.d(TAG,"onReceive() called.");  viewImage(context,uriData);}  }
class C{  public void deleteEntities(List<? extends TaggedLogAPIEntity> entities,EntityDefinition entityDef) throws Exception {  final List<byte[]> rowkeys=RowkeyHelper.getRowkeysByEntities(entities,entityDef);  deleteRowkeys(rowkeys);}  }
class C{  public void componentResized(final ComponentEvent e){}  }
class C{  private void updateExpirationTimes(){  final Preference byAdmin=findPreference(Keys.EXPIRATION_TIME);  final Preference byAll=findPreference(Keys.EXPIRATION_BY_ALL);  byAdmin.setSummary(Util.formatTimestamp(getDpm().getPasswordExpiration(getAdmin())));  byAll.setSummary(Util.formatTimestamp(getDpm().getPasswordExpiration(null)));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.531 -0500",hash_original_method="AA61F30EE9F68EF2787A55BE84FD9C61",hash_generated_method="A7C3AA52849A0E697C5FC3DACAD2587D") private void nextStream() throws IOException {  if (in != null) {    in.close();  }  if (e.hasMoreElements()) {    in=e.nextElement();    if (in == null) {      throw new NullPointerException();    }  } else {    in=null;  }}  }
class C{  public RotateFilter(float angle,boolean resize){  setAngle(angle);  this.resize=resize;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:10.467 -0500",hash_original_method="166A4AF2B4A563746350FD29F5208B27",hash_generated_method="C922C1384CF85260CDE8879B6D8D288B") public Builder add(Element element,String name){  return add(element,name,1);}  }
class C{  private HexParser(){}  }
class C{  public T caseUnit(Unit object){  return null;}  }
class C{  public OrientedDrawable(Drawable drawable,int rotationAngle){  super(drawable);  Preconditions.checkArgument(rotationAngle % 90 == 0);  mRotationMatrix=new Matrix();  mRotationAngle=rotationAngle;}  }
class C{  public DriverTask removeVolumesFromConsistencyGroup(List<StorageVolume> volumes,StorageCapabilities capabilities){  DellSCDriverTask task=new DellSCDriverTask("removeVolumeFromCG");  StringBuilder errBuffer=new StringBuilder();  int removeCount=0;  for (  StorageVolume volume : volumes) {    String ssn=volume.getStorageSystemId();    try {      StorageCenterAPI api=connectionManager.getConnection(ssn);      api.removeVolumeFromConsistencyGroup(volume.getNativeId(),volume.getConsistencyGroup());      removeCount++;    } catch (    StorageCenterAPIException|DellSCDriverException dex) {      String error=String.format("Error adding volume %s to consistency group: %s",volume.getNativeId(),dex);      LOG.warn(error);      errBuffer.append(String.format("%s%n",error));    }  }  task.setMessage(errBuffer.toString());  if (removeCount == volumes.size()) {    task.setStatus(TaskStatus.READY);  } else   if (removeCount == 0) {    task.setStatus(TaskStatus.FAILED);  } else {    task.setStatus(TaskStatus.PARTIALLY_FAILED);  }  return task;}  }
class C{  protected synchronized WebHistoryItem clone(){  throw new MustOverrideException();}  }
class C{  protected static SampleModel fixSampleModel(RenderedImage src,int stepX,int stepY,int width,int height){  int defSz=AbstractTiledRed.getDefaultTileSize();  SampleModel sm=src.getSampleModel();  int w=sm.getWidth();  if (w < defSz)   w=defSz;  if (w > stepX)   w=stepX;  int h=sm.getHeight();  if (h < defSz)   h=defSz;  if (h > stepY)   h=stepY;  return sm.createCompatibleSampleModel(w,h);}  }
class C{  public Cylinder(Vec4 bottomCenter,Vec4 topCenter,double cylinderRadius){  if (bottomCenter == null || topCenter == null || bottomCenter.equals(topCenter)) {    String message=Logging.getMessage(bottomCenter == null || topCenter == null ? "nullValue.EndPointIsNull" : "generic.EndPointsCoincident");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (cylinderRadius <= 0) {    String message=Logging.getMessage("Geom.Cylinder.RadiusIsZeroOrNegative",cylinderRadius);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.bottomCenter=bottomCenter.toHomogeneousPoint3();  this.topCenter=topCenter.toHomogeneousPoint3();  this.cylinderHeight=this.bottomCenter.distanceTo3(this.topCenter);  this.cylinderRadius=cylinderRadius;  this.axisUnitDirection=this.topCenter.subtract3(this.bottomCenter).normalize3();}  }
class C{  @DebugLog public void start(@NonNull final ActivityType nextActivityType,@NonNull DateTime nextPomodoro){  nextPomodoroStorage.set(nextPomodoro);  activityTypeStorage.set(nextActivityType);  isOngoingStorage.set(true);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("XML","9.0");  assertFalse("throw_False",state);}  }
class C{  public static synchronized OwnerId register(String ownerString){  if (map.inverse().containsKey(ownerString)) {    return map.inverse().get(ownerString);  }  final OwnerId newId=new OwnerId(map.size());  map.put(newId,ownerString);  return newId;}  }
class C{  public IndexMaintenanceException(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:34.591 -0400",hash_original_method="25C8EDE7956B3FAF53379C2102242C38",hash_generated_method="F2AA305B8BDA4CEFE944759A6C288841") public UnsupportedHttpVersionException(final String message){  super(message);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:07.733 -0500",hash_original_method="C8C1F446DBB41359AB2C72DE65947E17",hash_generated_method="87AB1F2A75B0DA527C4EB5550803BD97") public static boolean isPositiveIntermediate(int reply){  return (reply >= 300 && reply < 400);}  }
class C{  public MissingArgumentException(String message){  super(message);}  }
class C{  public ConsoleWindow(){  initComponents();  System.setOut(m_stdoutPS);}  }
class C{  public ConfiguredDataSourceProperties(){}  }
class C{  public void fireTreeCollapsed(TreePath path){  Object[] listeners=listenerList.getListenerList();  TreeExpansionEvent e=null;  if (uiTreeExpansionListener != null) {    e=new TreeExpansionEvent(this,path);    uiTreeExpansionListener.treeCollapsed(e);  }  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeExpansionListener.class && listeners[i + 1] != uiTreeExpansionListener) {      if (e == null)       e=new TreeExpansionEvent(this,path);      ((TreeExpansionListener)listeners[i + 1]).treeCollapsed(e);    }  }}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(TestOldSchoolVessel.class);}  }
class C{  public long optLong(String key,long defaultValue){  try {    return getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  private String buildToolTip(final List<NaviNode> nodes){  final StringBuilder tooltip=new StringBuilder("<html>");  boolean first=true;  for (  final NaviNode graphNode : nodes) {    if (!first) {      tooltip.append("<br>");    }    tooltip.append(CNodesDisplayString.getDisplayString(graphNode));    first=false;  }  return tooltip + "</html>";}  }
class C{  public CreateSessionRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final ChunkedUploadSessionDescriptor item){  super(requestUrl,client,options,item);}  }
class C{  public void updateBinaryStream(int columnIndex,java.io.InputStream x,int length) throws SQLException {  throw new NotUpdatable();}  }
class C{  static byte[] concatAndHash(String x,String y) throws NoSuchAlgorithmException, UnsupportedEncodingException {  MessageDigest md;  md=MessageDigest.getInstance("SHA-256");  md.update((x + y).getBytes("UTF-8"));  return md.digest();}  }
class C{  public static double[][] covarianceMatrix(double[][] data1,double[][] data2,double[][] data3){  int numVariables1=data1[0].length;  int numVariables2=data2[0].length;  int numVariables3=data3[0].length;  int numVariables=numVariables1 + numVariables2 + numVariables3;  double[][] covariances=new double[numVariables][numVariables];  double[] means1=new double[numVariables1];  double[] means2=new double[numVariables2];  double[] means3=new double[numVariables3];  for (int r=0; r < numVariables1; r++) {    means1[r]=mean(data1,r);  }  for (int r=0; r < numVariables2; r++) {    means2[r]=mean(data2,r);  }  for (int r=0; r < numVariables3; r++) {    means3[r]=mean(data3,r);  }  for (int r=0; r < numVariables1; r++) {    for (int c=r; c < numVariables1; c++) {      covariances[r][c]=covarianceTwoColumns(data1,r,c,means1[r],means1[c]);      covariances[c][r]=covariances[r][c];    }    for (int c=0; c < numVariables2; c++) {      covariances[r][numVariables1 + c]=covarianceTwoColumns(data1,data2,r,c,means1[r],means2[c]);      covariances[numVariables1 + c][r]=covariances[r][numVariables1 + c];    }    for (int c=0; c < numVariables3; c++) {      covariances[r][numVariables1 + numVariables2 + c]=covarianceTwoColumns(data1,data3,r,c,means1[r],means3[c]);      covariances[numVariables1 + numVariables2 + c][r]=covariances[r][numVariables1 + numVariables2 + c];    }  }  for (int r=0; r < numVariables2; r++) {    for (int c=r; c < numVariables2; c++) {      covariances[numVariables1 + r][numVariables1 + c]=covarianceTwoColumns(data2,r,c,means2[r],means2[c]);      covariances[numVariables1 + c][numVariables1 + r]=covariances[numVariables1 + r][numVariables1 + c];    }    for (int c=0; c < numVariables3; c++) {      covariances[numVariables1 + r][numVariables1 + numVariables2 + c]=covarianceTwoColumns(data2,data3,r,c,means2[r],means3[c]);      covariances[numVariables1 + numVariables2 + c][numVariables1 + r]=covariances[numVariables1 + r][numVariables1 + numVariables2 + c];    }  }  for (int r=0; r < numVariables3; r++) {    for (int c=r; c < numVariables3; c++) {      covariances[numVariables1 + numVariables2 + r][numVariables1 + numVariables2 + c]=covarianceTwoColumns(data3,r,c,means3[r],means3[c]);      covariances[numVariables1 + numVariables2 + c][numVariables1 + numVariables2 + r]=covariances[numVariables1 + numVariables2 + r][numVariables1 + numVariables2 + c];    }  }  return covariances;}  }
class C{  public void writeRawByte(final int value) throws IOException {  writeRawByte((byte)value);}  }
class C{  private static byte[] exposeByteArrayInputStreamBytes(ByteArrayInputStream bais){  byte[] buffer;synchronized (bais) {    byte[] buf;    int pos;    try {      buf=(byte[])BAIS_BUF.get(bais);      pos=BAIS_POS.getInt(bais);    } catch (    IllegalAccessException iae) {      throw new AssertionError(iae);    }    int available=bais.available();    if (pos == 0 && buf.length == available) {      buffer=buf;    } else {      buffer=new byte[available];      System.arraycopy(buf,pos,buffer,0,available);    }    bais.skip(available);  }  return buffer;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void findAndInit(Object obj){  if (obj instanceof DTEDFrameCache) {    logger.fine("LOSGraphicLoader: found DTEDFrameCache");    setDTEDFrameCache((DTEDFrameCache)obj);  }  if (obj instanceof OMDrawingTool) {    logger.fine("LOSGraphicLoader: found OMDrawingTool");    setDrawingTool((OMDrawingTool)obj);  }}  }
class C{  public static String showAsConstant(final int parameterConstant){  final Field[] ts=ColorSpaces.class.getFields();  int count=ts.length;  String type=null;  for (int ii=0; ii < count; ii++) {    try {      final int t=ts[ii].getInt(new ColorSpaces());      if (t == parameterConstant) {        type="ColorSpaces." + ts[ii].getName();        count=ii;      }    } catch (    final IllegalAccessException e) {      LogWriter.writeLog("Exception: " + e.getMessage());    }catch (    IllegalArgumentException ee) {      LogWriter.writeLog("Exception: " + ee.getMessage());    }  }  return type;}  }
class C{  public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  public long create_sound_media_header_atom(MP4DataStream bitstream) throws IOException {  create_full_atom(bitstream);  balance=(int)bitstream.readBytes(2);  bitstream.skipBytes(2);  readed+=4;  return readed;}  }
class C{  public void receiveOneOneChatSessionInitiation(OneToOneChatSession session){  mChatService.receiveOneToOneChatSessionInitiation(session);}  }
class C{  public InputNode readRoot() throws Exception {  if (stack.isEmpty()) {    InputNode node=readElement(null);    if (node == null) {      throw new NodeException("Document has no root element");    }    return node;  }  return null;}  }
class C{  private void upgradeDatabase(KelpUpgrade upgradeKelp) throws IOException {  Collections.sort(_tableList,null);  for (  TableEntry10 table : _tableList) {    TableUpgrade upgradeTable=upgradeKelp.table(table.key(),table.row());    upgradeTable(table,upgradeTable);  }}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  Position line=node.getPosition();  Class expect=type.getType();  if (value != null) {    throw new PersistenceException("Can not read key of %s for %s at %s",expect,entry,line);  }  return read(node);}  }
class C{  private DelphiRulesUtils(){}  }
class C{  public PathTool(SVGPathFigure pathPrototype,SVGBezierFigure bezierPrototype){  this(pathPrototype,bezierPrototype,null);}  }
class C{  public final long address(){  try {    Class<?> dbClass=Class.forName("sun.nio.ch.DirectBuffer");    java.lang.reflect.Method address=dbClass.getDeclaredMethod("address",new Class[0]);    return ((Long)address.invoke(this.getByteBuffer(),(Object[])null)).longValue();  } catch (  Throwable error) {    error.printStackTrace();    throw new UnsupportedOperationException("Method Struct.address() not supported on this platform.");  }}  }
class C{  private static void resolveVersionConflict(Plugin newExtension,Plugin conflictingExtension,Collection<Plugin> plugins){  VersionNumber newVersion=new VersionNumber(newExtension.getVersion());  VersionNumber conflictVersion=new VersionNumber(conflictingExtension.getVersion());  VersionNumber higherNumber=conflictVersion;  if (newVersion.compareTo(conflictVersion) > 0) {    plugins.remove(conflictingExtension);    plugins.add(newExtension);    higherNumber=newVersion;  }  if (LogService.getRoot().isLoggable(Level.WARNING)) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.tools.plugin.Plugin.duplicate_plugin_definition_higher_version",new Object[]{newExtension.getExtensionId(),newExtension.file,conflictingExtension.file,higherNumber.toString()});  }}  }
class C{  public ResultMapQuery(HGQuery query,Mapping mapping){  this.query=query;  this.mapping=mapping;}  }
class C{  public CreateExecParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  public ConfigServiceLocator(){  List<ServiceDTO> initial=Lists.newArrayList();  m_configServices=new AtomicReference<>(initial);  m_responseType=new TypeToken<List<ServiceDTO>>(){  }.getType();  this.m_executorService=Executors.newScheduledThreadPool(1,ApolloThreadFactory.create("ConfigServiceLocator",true));}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  public void put(Song song){  if (!mSongs.contains(song)) {    mSongs.add(song);  }}  }
class C{  protected final void closeAllCache(){  delegate.closeAllCache();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.736 -0500",hash_original_method="EAFE8FC789D709377CF509D3CD765292",hash_generated_method="51188B37EB4E00338394120ECAFD5F4B") public final static String formatParameters(final NameValuePair[] nvps,final boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatParameters(null,nvps,quote).toString();}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  private void checkGroupList(List<PrincipalId> groupList,PrincipalId subject) throws InvalidTokenException, SystemException {  PrincipalAttributeDefinition groupAttributeDefinition=getSupportedAttributeDefinition(GROUP);  if (groupAttributeDefinition == null) {    throw new InvalidTokenException(GROUP + " is not supported attribute in token attributes.");  }  final PrincipalAttribute groupAttribute;  try {    groupAttribute=getAttribute(subject,groupAttributeDefinition);  } catch (  InvalidPrincipalException e) {    throw new InvalidTokenException(String.format("Principal %s not found, race condition suspected since the principal has just been validated.",subject),e);  }  List<PrincipalId> currentGroupList=toGroupList(groupAttribute.getValues());  List<PrincipalId> tokenGroupList=groupList;  if (tokenGroupList.size() != currentGroupList.size() || !tokenGroupList.containsAll(currentGroupList)) {    throw new InvalidTokenException("Current group membership of " + "the principal is different from the one stated in the token");  }}  }
class C{  public @Test final void testRemoveGrants(){  Role role=new Role(TEST_ROLE);  SecurityObject grant=new Grant(TEST_ROLE);  role.addGrant(grant);  assertThat(role.getGrants()).hasSize(1);  role.removeGrants(Collections.singletonList(grant));  assertThat(role.getGrants()).hasSize(0);}  }
class C{  public TargetChooserPanelGUI(Project p,SourceGroup[] groups,Component bottomPanel,Type type,String fileType){  this.type=type;  this.project=p;  this.groups=groups;  this.ignoreChange=new ThreadLocal<Boolean>();  this.fileType=fileType;  for (  SourceGroup sourceGroup : groups)   if (sourceGroup == null)   throw new NullPointerException();  initComponents();  if (type == Type.PACKAGE) {    packageComboBox.setVisible(false);    packageLabel.setVisible(false);    Mnemonics.setLocalizedText(fileLabel,NbBundle.getMessage(TargetChooserPanelGUI.class,"LBL_JavaTargetChooserPanelGUI_CreatedFolder_Label"));    Mnemonics.setLocalizedText(documentNameLabel,NbBundle.getMessage(TargetChooserPanelGUI.class,"LBL_JavaTargetChooserPanelGUI_PackageName_Label"));    documentNameTextField.getDocument().addDocumentListener(this);  } else   if (type == Type.PKG_INFO) {    documentNameTextField.setEditable(false);  } else {    packageComboBox.getEditor().addActionListener(this);    documentNameTextField.getDocument().addDocumentListener(this);  }  if (bottomPanel != null) {    bottomPanelContainer.add(bottomPanel,java.awt.BorderLayout.CENTER);  }  Component packageEditor=packageComboBox.getEditor().getEditorComponent();  if (packageEditor instanceof javax.swing.JTextField) {    ((javax.swing.JTextField)packageEditor).getDocument().addDocumentListener(this);  } else {    packageComboBox.addActionListener(this);  }  rootComboBox.setRenderer(new GroupListCellRenderer());  packageComboBox.setRenderer(PackageView.listRenderer());  rootComboBox.addActionListener(this);  setPreferredSize(PREF_DIM);  setName(NbBundle.getBundle(TargetChooserPanelGUI.class).getString("LBL_JavaTargetChooserPanelGUI_Name"));}  }
class C{  public InputBuilder<T> repeatAll(int times){  List<T> toAppend=new ArrayList<>();  for (int i=0; i < times; i++) {    toAppend.addAll(input);  }  input.addAll(toAppend);  return this;}  }
class C{  @SuppressWarnings({"unchecked"}) public SubqueryCostReport estimateSubqueryCost(final BOpContextBase context,final int limit,final Predicate pred){  final IRelation r=context.getRelation(pred);  double subqueryCost=0d;  long rangeCount=0L;  int nsamples=0;  for (  IV graph : graphs) {    if (nsamples == limit)     break;    final Predicate tmp=pred.asBound((IVariable)pred.get(3),new Constant(graph));    final AccessPath ap=(AccessPath)context.getAccessPath(r,tmp);    subqueryCost+=ap.estimateCost().cost;    rangeCount+=context.getAccessPath(context.getRelation(tmp),tmp).rangeCount(false);    nsamples++;  }  subqueryCost=(subqueryCost * nknown) / nsamples;  rangeCount=(rangeCount * nknown) / nsamples;  return new SubqueryCostReport(nknown,limit,nsamples,rangeCount,subqueryCost);}  }
class C{  private String _serializeDate(Date date){  return _serializeDateTime(new DateTimeImpl(date));}  }
class C{  private void openDatabases(){  s_logger.log(Level.INFO,"");  s_logger.log(Level.INFO,"migrateConnectDatabases");  if (m_source != null) {    m_source.close();    m_source.reset();    m_source=null;  }  if (m_target != null) {    m_target.close();    m_target.reset();    m_target=null;  }  m_source=new DBConnection(s_parameters.thisIsSource());  m_target=new DBConnection(s_parameters.thisIsTarget());  if (m_source != null) {    s_logger.log(Level.CONFIG,"");    m_source.connectDatabase();  }  if (m_target != null) {    s_logger.log(Level.CONFIG,"");    m_target.connectDatabase();  }}  }
class C{  public boolean isInSegment(double angle){  if (angle >= mStartAngle && angle <= mEndAngle) {    return true;  }  double cAngle=angle % 360;  double startAngle=mStartAngle;  double stopAngle=mEndAngle;  while (stopAngle > 360) {    startAngle-=360;    stopAngle-=360;  }  return cAngle >= startAngle && cAngle <= stopAngle;}  }
class C{  @Override public String toString(){  final ServiceScore[] serviceTable=serviceTableRef.get();  final String tmp;  if (serviceTable != null) {    tmp=Arrays.toString(serviceTable);  } else {    tmp="N/A";  }  final StringBuilder sb=new StringBuilder(256);  sb.append(this.getClass().getName());  sb.append("{contextPath=" + contextPath.get());  sb.append(",journal=" + journalRef.get());  sb.append(",serviceID=" + serviceIDRef.get());  sb.append(",services=" + tmp);  toString(sb);  sb.append("}");  return sb.toString();}  }
class C{  static public boolean startFinReport(ProcessInfo pi){  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  String TableName=pi.getAD_Process_ID() == 202 ? "T_Report" : "T_ReportStatement";  MQuery query=MQuery.get(Env.getCtx(),pi.getAD_PInstance_ID(),TableName);  MPrintFormat format=(MPrintFormat)pi.getTransientObject();  if (format == null)   format=(MPrintFormat)pi.getSerializableObject();  if (format == null) {    s_log.log(Level.SEVERE,"startFinReport - No PrintFormat");    return false;  }  PrintInfo info=new PrintInfo(pi);  ReportEngine re=new ReportEngine(Env.getCtx(),format,query,info);  createOutput(re,null);  return true;}  }
class C{  private Object[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  public LED24(){  super();  setNoisePercent(defaultNoisePercent());}  }
class C{  @RequestMapping(value="/api/greetings",method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Greeting> createGreeting(@RequestBody Greeting greeting){  logger.info("> createGreeting");  Greeting savedGreeting=greetingService.create(greeting);  logger.info("< createGreeting");  return new ResponseEntity<Greeting>(savedGreeting,HttpStatus.CREATED);}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  charactersFlush();  int dataIndex=m_data.size();  m_previous=addNode(DTM.PROCESSING_INSTRUCTION_NODE,DTM.PROCESSING_INSTRUCTION_NODE,m_parents.peek(),m_previous,-dataIndex,false);  m_data.addElement(m_valuesOrPrefixes.stringToIndex(target));  m_values.addElement(data);  m_data.addElement(m_valueIndex++);}  }
class C{  @Override public ITupleIterator rangeIterator(){  return getIndex().rangeIterator();}  }
class C{  public static ClassNode lowestUpperBound(List<ClassNode> nodes){  if (nodes.size() == 1)   return nodes.get(0);  return lowestUpperBound(nodes.get(0),lowestUpperBound(nodes.subList(1,nodes.size())));}  }
class C{  void finishSourceFileForGeneratedImplementation() throws IOException {  writer.write("}");  writer.close();}  }
class C{  private void openShell(){  this.shell.pack();  this.shell.open();  SWTGraphicUtil.centerShell(this.shell);  while (!this.shell.isDisposed()) {    if (!this.shell.getDisplay().readAndDispatch()) {      this.shell.getDisplay().sleep();    }  }}  }
class C{  protected String dumpRemainingTokenQueue(){  int q=m_queueMark;  String returnMsg;  if (q < m_ops.getTokenQueueSize()) {    String msg="\n Remaining tokens: (";    while (q < m_ops.getTokenQueueSize()) {      String t=(String)m_ops.m_tokenQueue.elementAt(q++);      msg+=(" '" + t + "'");    }    returnMsg=msg + ")";  } else {    returnMsg="";  }  return returnMsg;}  }
class C{  public DeployMinefieldDisplay(ClientGUI clientgui){  super(clientgui);  clientgui.getClient().getGame().addGameListener(this);  setupStatusBar(Messages.getString("DeployMinefieldDisplay.waitingForDeployMinefieldPhase"));  p=clientgui.getClient().getLocalPlayer();  buttons=new HashMap<Command,MegamekButton>((int)(Command.values().length * 1.25 + 0.5));  for (  Command cmd : Command.values()) {    String title=Messages.getString("DeployMinefieldDisplay." + cmd.getCmd());    MegamekButton newButton=new MegamekButton(title,SkinSpecification.UIComponents.PhaseDisplayButton.getComp());    newButton.addActionListener(this);    newButton.setActionCommand(cmd.getCmd());    newButton.setEnabled(false);    buttons.put(cmd,newButton);  }  numButtonGroups=(int)Math.ceil((buttons.size() + 0.0) / buttonsPerGroup);  butDone.setText(Messages.getString("DeployMinefieldDisplay.Done"));  butDone.setEnabled(false);  layoutScreen();  setupButtonPanel();}  }
class C{  public void checkCapacity(int plus){  if (pos + plus >= data.length) {    expand(plus);  }}  }
class C{  protected void fireCaretUpdate(CaretEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == CaretListener.class) {      ((CaretListener)listeners[i + 1]).caretUpdate(e);    }  }}  }
class C{  public static void downloadRangeToOutputStream(Storage storage,String bucketName,String objectName,long firstBytePos,long lastBytePos,OutputStream data) throws IOException {  Storage.Objects.Get getObject=storage.objects().get(bucketName,objectName);  getObject.getMediaHttpDownloader().setDirectDownloadEnabled(!IS_APP_ENGINE).setContentRange(firstBytePos,(int)lastBytePos);  getObject.executeMediaAndDownloadTo(data);}  }
class C{  @Override public void onClick(View v){  Intent createIntent=new Intent(this,CreateNoteActivity.class);  startActivityForResult(createIntent,create_note_cmd);}  }
class C{  boolean addI18nKeyToPreset(String key,String value,PresetItem preset,Map<String,String> map,EditableLayout editableView){  for (  String tag : Tags.I18N_NAME_KEYS) {    if (key.startsWith(tag + ":")) {      String[] s=key.split("\\Q:\\E");      if (preset.hasKey(tag) && s != null && s.length == 2) {        preset.addTag(preset.isOptionalTag(tag),key,PresetKeyType.TEXT,null);        String hint=preset.getHint(tag);        if (hint != null) {          preset.addHint(key,getActivity().getString(R.string.internationalized_hint,hint,s[1]));        }        map.put(key,value);        editableView.putTag(key,value);        return true;      }    }  }  return false;}  }
class C{  @Override public void onScaleEnd(ScaleGestureDetector detector){  float scale=cellSize / initialCellSize;  double f=Math.pow(ZOOM_STEP,Math.round(Math.log(scale) / Math.log(ZOOM_STEP)));  scale=(float)(initialCellSize * f) / cellSize;  cellSize*=scale;  originX+=lastFocusX * scale - lastFocusX;  originY+=lastFocusY * scale - lastFocusY;  originX=Math.round(originX / cellSize) * cellSize;  originY=Math.round(originY / cellSize) * cellSize;  selection.setVisibility(INVISIBLE);  sge.setState(originX,originY,cellSize);  invalidate();}  }
class C{  private void waitForStorageSystemDiscovery(){  final int maxWaitTimeSeconds=30 * 60;  final int sleepIntervalSeconds=15;  int totalSleep=0;  List<URI> storageSystemIds=_dbClient.queryByType(StorageSystem.class,true);  if (!storageSystemIds.iterator().hasNext()) {    return;  }  List<URI> allStorageSystemIds=new ArrayList<>();  for (  URI storageSystemId : storageSystemIds) {    allStorageSystemIds.add(storageSystemId);  }  while (totalSleep < maxWaitTimeSeconds) {    List<StorageSystem> storageSystems=_dbClient.queryObject(StorageSystem.class,allStorageSystemIds);    boolean slept=false;    for (    StorageSystem storageSystem : storageSystems) {      if (storageSystem.getDiscoveryStatus().equals(DataCollectionJobStatus.IN_PROGRESS.name())) {        _log.info("Sleeping due to discovery running on storage system: " + (storageSystem.getSerialNumber() != null ? storageSystem.getSerialNumber() : storageSystem.getId()));        try {          slept=true;          totalSleep+=sleepIntervalSeconds;          Thread.sleep(sleepIntervalSeconds * 1000);          break;        } catch (        InterruptedException e) {        }      }    }    if (!slept) {      _log.info("Found no Storage Systems that are currently in progress with discovery");      return;    }  }  _log.info("RP discovery is going to proceed even though storage systems seem to still be in discovery mode");}  }
class C{  public byte[] serializeSessionData(CustomRequestSession session,SessionSerializationMetadata metadata) throws IOException {  byte[] serialized=null;  try (ByteArrayOutputStream bos=new ByteArrayOutputStream();ObjectOutputStream oos=new ObjectOutputStream(new BufferedOutputStream(bos))){    oos.writeObject(metadata);    session.writeObjectData(oos);    oos.flush();    serialized=bos.toByteArray();  }   return serialized;}  }
class C{  @Override public boolean equals(Object other){  if (other instanceof InstalledApp) {    return _package_name.equals(((InstalledApp)other).get_package_name());  }  return super.equals(other);}  }
class C{  public boolean isSetPacket(){  return this.packet != null;}  }
class C{  public String synopsis(){  return m_Synopsis;}  }
class C{  public <T>MXBeanSupport(T resource,Class<T> mxbeanInterface) throws NotCompliantMBeanException {  super(resource,mxbeanInterface);}  }
class C{  public static void unbindReferences(View view){  try {    if (view != null) {      view.destroyDrawingCache();      unbindViewReferences(view);      if (view instanceof ViewGroup) {        unbindViewGroupReferences((ViewGroup)view);      }    }  } catch (  Throwable e) {  }}  }
class C{  public void drawBitmap(byte[] byteArray){  this.drawBitmap(BitmapFactory.decodeByteArray(byteArray,0,byteArray.length));}  }
class C{  @Override public void close() throws IOException {  writeColumnSortInfo();  if (null != sortIndexThriftWriter) {    sortIndexThriftWriter.close();  }}  }
class C{  public static String quoteIdentifier(String s){  if (s == null || s.length() == 0) {    return "\"\"";  }  char c=s.charAt(0);  if ((!Character.isLetter(c) && c != '_') || Character.isLowerCase(c)) {    return StringUtils.quoteIdentifier(s);  }  for (int i=1, length=s.length(); i < length; i++) {    c=s.charAt(i);    if ((!Character.isLetterOrDigit(c) && c != '_') || Character.isLowerCase(c)) {      return StringUtils.quoteIdentifier(s);    }  }  if (isKeyword(s,true)) {    return StringUtils.quoteIdentifier(s);  }  return s;}  }
class C{  void validConversion(Converter converter,Object expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "'";  try {    Object result=converter.convert(getExpectedType(),value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    boolean v1=expected instanceof Date;    boolean v2=result instanceof Date;    long t1=((Date)expected).getTime();    long t2=((Date)result).getTime();    assertEquals("VALUE " + msg + ", "+ v1+ ", "+ v2+ ", "+ t1+ ", "+ t2,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  public String crossValTipText(){  return "Sets the number of folds for cross validation (1 = leave one out).";}  }
class C{  private void drawImage(Graphics g){  g.setColor(Color.GRAY);  g.fillRect(1,1,width,height);  g.setColor(determineColor());  g.fillRect(1,1,model.getRepresentation(),height - 2);  g.setColor(Color.BLACK);  g.drawRect(0,0,width - 1,height - 1);}  }
class C{  @Override public String toString(){  return this.originalSql;}  }
class C{  @LargeTest public void testFrameOverlayInvalidTimeImage() throws Exception {  final String videoItemFilename1=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String overlayFile1=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  boolean flagForException=false;  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename1,10000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaImageItem1);  try {    final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayFile1,640,480);    mVideoEditorHelper.createOverlay(mediaImageItem1,"overlayId1",mBitmap,400000000,2000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Overlay With Invalid Start Time",flagForException);  flagForException=false;  try {    final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayFile1,640,480);    mVideoEditorHelper.createOverlay(mediaImageItem1,"overlayId2",mBitmap,-1,2000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Overlay With Invalid Start Time",flagForException);  flagForException=false;  try {    final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayFile1,640,480);    mVideoEditorHelper.createOverlay(mediaImageItem1,"overlayId3",mBitmap,2000,-1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Overlay With Invalid Start Time",flagForException);}  }
class C{  @NonNull public static Animator scaleTo(float scaleX,float scaleY,float duration){  return scaleTo(scaleX,scaleY,duration,null);}  }
class C{  public String warn(String msg,Object... params){  if (level.intValue() < Level.WARNING.intValue())   return (NO_MESSAGE);  return (format(msg,params));}  }
class C{  @Override public String toString(){  if (isPhysical()) {    return GenericPhysicalRegisterSet.getName(number);  }  String s=isLocal() ? "l" : "t";  s=s + getNumber() + (spansBasicBlock() ? "p" : "")+ (isSSA() ? "s" : "")+ typeName();  return s;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected Object createElementInfo(){  return new ClassFileInfo(manager);}  }
