class C{  public void appendError(final String errorMessage){  if (this.errorMessage == null) {    this.errorMessage=errorMessage;  } else {    this.errorMessage+=("\n" + errorMessage);  }  state=CHANGE_STATE.FAIL;}  }
class C{  public static boolean isSchemaValid(Document doc) throws MaryConfigurationException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  MaryNormalisedWriter mnw=new MaryNormalisedWriter();  try {    mnw.output(doc,baos);  } catch (  TransformerException te) {    Log.d(Mary.LOG,"Cannot serialize document for Schema-valid parsing" + te);    throw new MaryConfigurationException("Cannot serialize document for Schema-valid parsing",te);  }  try {    parseDocument(new ByteArrayInputStream(baos.toByteArray()),true);  } catch (  ParserConfigurationException pce) {    Log.d(Mary.LOG,"Problem setting up parser" + pce);    throw new MaryConfigurationException("Problem setting up parser",pce);  }catch (  IOException ioe) {    Log.d(Mary.LOG,"IOException should not occur but it does" + ioe);    throw new MaryConfigurationException("IOException should not occur but it does",ioe);  }catch (  SAXException se) {    return false;  }  return true;}  }
class C{  private static int indexOfNonDigit(String string,int offset){  for (int i=offset; i < string.length(); i++) {    char c=string.charAt(i);    if (c < '0' || c > '9')     return i;  }  return string.length();}  }
class C{  public TObjectShortHashMap(int initialCapacity,TObjectHashingStrategy<K> strategy){  super(initialCapacity,strategy);}  }
class C{  public void writeFloat(float a) throws IOException {  writeInt(Float.floatToIntBits(a));}  }
class C{  public While whilst(Conditional cond,Task task){  return new While(this.executor_,cond,task);}  }
class C{  @Override public void revertToDefaultValue(){  populateField(defaultValue);}  }
class C{  @Override public ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){  View v=LayoutInflater.from(parent.getContext()).inflate(R.layout.item_photo,parent,false);  return new ViewHolder(v,viewType);}  }
class C{  public static boolean ensureAccess(SootMethod container,ClassMember target,String options){  boolean accessors=options.equals("accessors");  boolean allowChanges=!(options.equals("none"));  boolean safeChangesOnly=!(options.equals("unsafe"));  SootClass targetClass=target.getDeclaringClass();  if (!ensureAccess(container,targetClass,options))   return false;  if (isAccessLegal(container,target))   return true;  if (!allowChanges && !accessors)   return false;  if (target.getDeclaringClass().isApplicationClass()) {    if (accessors)     return true;    if (safeChangesOnly)     throw new RuntimeException("Not implemented yet!");    target.setModifiers(target.getModifiers() | Modifier.PUBLIC);    return true;  } else   return false;}  }
class C{  public void show(){  if (mNextView == null) {    throw new RuntimeException("setView must have been called");  }  TN tn=mTN;  tn.mNextView=mNextView;  Message.obtain(mHandler,MSG_ENQUEUE_TOAST,this).sendToTarget();}  }
class C{  public static int calculateViewMemory(int connectionServerCount,int securityServerCount,int vCenterServerCount){  final int cs=Integer.parseInt(VDICalculator.DEFAULTS.getString("view.connectionserver.memory.default")) * connectionServerCount;  final int ss=Integer.parseInt(VDICalculator.DEFAULTS.getString("view.securityserver.memory.default")) * securityServerCount;  final int vc=Integer.parseInt(VDICalculator.DEFAULTS.getString("view.vcenter.memory.default")) * securityServerCount;  final int co=Integer.parseInt(VDICalculator.DEFAULTS.getString("view.composer.memory.default"));  return cs + ss + vc+ co;}  }
class C{  @Override public void dataSourceLoaded(GeometryTypeEnum geometryType,boolean isConnectedToDataSourceFlag){}  }
class C{  protected List<ProcessChange> removeEquipmentControlTags(final T abstractEquipment,final ConfigurationElementReport equipmentReport){  List<ProcessChange> changes=new ArrayList<>();  LOGGER.debug("Removing (Sub-)Equipment control tags.");  Long aliveTagId=abstractEquipment.getAliveTagId();  if (aliveTagId != null) {    ConfigurationElementReport tagReport=new ConfigurationElementReport(Action.REMOVE,Entity.CONTROLTAG,aliveTagId);    ProcessChange change=controlTagConfigHandler.removeControlTag(aliveTagId,tagReport);    if (change.processActionRequired()) {      change.setNestedSubReport(tagReport);      changes.add(change);    } else {      equipmentReport.addSubReport(tagReport);    }  }  Long commTagId=abstractEquipment.getCommFaultTagId();  if (commTagId != null) {    ConfigurationElementReport tagReport=new ConfigurationElementReport(Action.REMOVE,Entity.CONTROLTAG,commTagId);    ProcessChange change=controlTagConfigHandler.removeControlTag(commTagId,tagReport);    if (change.processActionRequired()) {      change.setNestedSubReport(tagReport);      changes.add(change);    } else {      equipmentReport.addSubReport(tagReport);    }  }  Long stateTagId=abstractEquipment.getStateTagId();  ConfigurationElementReport tagReport=new ConfigurationElementReport(Action.REMOVE,Entity.CONTROLTAG,stateTagId);  ProcessChange change=controlTagConfigHandler.removeControlTag(stateTagId,tagReport);  if (change.processActionRequired()) {    change.setNestedSubReport(tagReport);    changes.add(change);  } else {    equipmentReport.addSubReport(tagReport);  }  return changes;}  }
class C{  private DataFrame toDataFrame(JavaSparkContext jsc,List<DependencyGraph> graphs,FeatureFrame featureFrame){  List<ParsingContext> list=new ArrayList<ParsingContext>();  for (  DependencyGraph graph : graphs) {    List<ParsingContext> xy=TransitionDecoder.decode(graph,featureFrame);    list.addAll(xy);  }  JavaRDD<ParsingContext> javaRDD=jsc.parallelize(list);  return sqlContext.createDataFrame(javaRDD,ParsingContext.class);}  }
class C{  protected void removeUnnecessaryOperations(){  for (  Class<? extends Entity> entityClass : deletedObjects.keySet()) {    Set<String> ids=new HashSet<String>();    Iterator<Entity> entitiesToDeleteIterator=deletedObjects.get(entityClass).values().iterator();    while (entitiesToDeleteIterator.hasNext()) {      Entity entityToDelete=entitiesToDeleteIterator.next();      if (!ids.contains(entityToDelete.getId())) {        ids.add(entityToDelete.getId());      } else {        entitiesToDeleteIterator.remove();      }    }    for (    String id : ids) {      if (insertedObjects.containsKey(entityClass) && insertedObjects.get(entityClass).containsKey(id)) {        insertedObjects.get(entityClass).remove(id);        deletedObjects.get(entityClass).remove(id);      }    }  }}  }
class C{  @deprecated public char first(){  this.pos=this.begin;  return current();}  }
class C{  @deprecated public String formatOffsetLocalizedGMT(int offset){  if (offset == 0) {    return this._gmtZeroFormat;  }  StringBuilder buf=new StringBuilder();  boolean positive=true;  if (offset < 0) {    offset=-offset;    positive=false;  }  int offsetH=offset / 3600000;  offset%=3600000;  int offsetM=offset / 60000;  offset%=60000;  int offsetS=offset / 1000;  if ((offsetH > 23) || (offsetM > 59) || (offsetS > 59)) {    throw new IllegalArgumentException("Offset out of range :" + offset);  }  Object[] offsetPatternItems;  Object[] offsetPatternItems;  if (positive) {    offsetPatternItems=offsetS == 0 ? this._gmtOffsetPatternItems[GMTOffsetPatternType.POSITIVE_HM.ordinal()] : this._gmtOffsetPatternItems[GMTOffsetPatternType.POSITIVE_HMS.ordinal()];  } else {    offsetPatternItems=offsetS == 0 ? this._gmtOffsetPatternItems[GMTOffsetPatternType.NEGATIVE_HM.ordinal()] : this._gmtOffsetPatternItems[GMTOffsetPatternType.NEGATIVE_HMS.ordinal()];  }  buf.append(this._gmtPatternTokens[0]);  for (  Object item : offsetPatternItems) {    if ((item instanceof String)) {      buf.append((String)item);    } else     if ((item instanceof GMTOffsetField)) {      GMTOffsetField field=(GMTOffsetField)item;switch (field.getType()) {case 'H':        appendOffsetDigits(buf,offsetH,field.getWidth());      break;case 'm':    appendOffsetDigits(buf,offsetM,field.getWidth());  break;case 's':appendOffsetDigits(buf,offsetS,field.getWidth());}}}buf.append(this._gmtPatternTokens[1]);return buf.toString();}  }
class C{  FTPReply(int code,String[] messages){  this.code=code;  this.messages=messages;}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public final byte[] read(final int num){  byte[] ret=new byte[num];  for (int x=0; x < num; x++) {    ret[x]=readByte();  }  return ret;}  }
class C{  public Bundler putByte(String key,byte value){  bundle.putByte(key,value);  return this;}  }
class C{  @Override public void transform(Context<MutableTimeSeriesCollectionPair> ctx){  DateTime now=ctx.getTSData().getCurrentCollection().getTimestamp();  ctx.getTSData().getCurrentCollection().addMetrics(MONITOR_GROUP,get_metrics_(now,ctx));  ctx.getAlertManager().accept(new Alert(now,MONITOR_DOWN_ALERT,null,Optional.of(false),Duration.ZERO,"builtin rule: monitor is not running for some time",EMPTY_MAP));}  }
class C{  public static Settings init(){  return init(DEFAULT_TAG);}  }
class C{  public static boolean isAcceptCsvGzip(HttpServletRequest request){  return request != null && ((request.getPathInfo() != null && request.getPathInfo().endsWith(".gz")) || (request.getHeader("Accept") != null && request.getHeader("Accept").contains("application/csv+gzip")));}  }
class C{  public static final void emoteStartWalking(Npc owner){  owner.setState(CreatureState.WALKING);  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.WALK));}  }
class C{  protected void shareByWeixinCircle(){  ShareUtil.startShare(this,ShareConstant.SHARE_CHANNEL_WEIXIN_CIRCLE,getShareData(ShareConstant.SHARE_CHANNEL_WEIXIN_CIRCLE),ShareConstant.REQUEST_CODE);}  }
class C{  protected void validateDateTime(DateTimeData data){  if (!Constants.SCHEMA_1_1_SUPPORT && data.year == 0) {    throw new RuntimeException("The year \"0000\" is an illegal year value");  }  if (data.month < 1 || data.month > 12) {    throw new RuntimeException("The month must have values 1 to 12");  }  if (data.day > maxDayInMonthFor(data.year,data.month) || data.day < 1) {    throw new RuntimeException("The day must have values 1 to 31");  }  if (data.hour > 23 || data.hour < 0) {    if (data.hour == 24 && data.minute == 0 && data.second == 0) {      data.hour=0;      if (++data.day > maxDayInMonthFor(data.year,data.month)) {        data.day=1;        if (++data.month > 12) {          data.month=1;          if (Constants.SCHEMA_1_1_SUPPORT) {            ++data.year;          } else           if (++data.year == 0) {            data.year=1;          }        }      }    } else {      throw new RuntimeException("Hour must have values 0-23, unless 24:00:00");    }  }  if (data.minute > 59 || data.minute < 0) {    throw new RuntimeException("Minute must have values 0-59");  }  if (data.second >= 60 || data.second < 0) {    throw new RuntimeException("Second must have values 0-59");  }  if (data.timezoneHr > 14 || data.timezoneHr < -14) {    throw new RuntimeException("Time zone should have range -14:00 to +14:00");  } else {    if ((data.timezoneHr == 14 || data.timezoneHr == -14) && data.timezoneMin != 0)     throw new RuntimeException("Time zone should have range -14:00 to +14:00"); else     if (data.timezoneMin > 59 || data.timezoneMin < -59)     throw new RuntimeException("Minute must have values 0-59");  }}  }
class C{  public SM_TITLE_INFO(int titleId){  this.action=1;  this.titleId=titleId;}  }
class C{  public Timestamp recalculateEstimatedCompletionDate(Long priority,Timestamp startDate){  if (exist()) {    getProductionRunRoutingTasks();    if (quantity == null)     getQuantity();    Timestamp endDate=null;    for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {      GenericValue routingTask=iter.next();      if (priority.compareTo(routingTask.getLong("priority")) <= 0) {        long totalTime=ProductionRun.getEstimatedTaskTime(routingTask,quantity,dispatcher);        endDate=TechDataServices.addForward(TechDataServices.getTechDataCalendar(routingTask),startDate,totalTime);        routingTask.set("estimatedStartDate",startDate);        routingTask.set("estimatedCompletionDate",endDate);        startDate=endDate;      }    }    return endDate;  } else {    return null;  }}  }
class C{  public static DataTagCacheObject createTestDataTag2(){  DataTagCacheObject cacheObject=new DataTagCacheObject();  cacheObject.setId(new Long(100001));  cacheObject.setName("Junit_test_datatag2");  cacheObject.setDescription("test description");  cacheObject.setMode(DataTagConstants.MODE_TEST);  cacheObject.setDataType("Boolean");  cacheObject.setLogged(false);  cacheObject.setUnit("test unit m/sec");  cacheObject.setDipAddress("testDIPaddress");  cacheObject.setJapcAddress("testJAPCaddress");  cacheObject.setValue(Boolean.TRUE);  cacheObject.setValueDescription("test value description");  cacheObject.setSimulated(false);  cacheObject.setEquipmentId(new Long(100));  cacheObject.setMinValue(new Float(23.3));  cacheObject.setMaxValue(new Float(12.2));  cacheObject.setValueDictionary(new DataTagValueDictionary());  cacheObject.setAddress(new DataTagAddress());  cacheObject.setDataTagQuality(createValidQuality());  cacheObject.setCacheTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setDaqTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setSourceTimestamp(new Timestamp(System.currentTimeMillis()));  cacheObject.setRuleIdsString("130");  return cacheObject;}  }
class C{  public int length(){  return Histogram.length() + Graph.length();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_PARRY(String value0){  return new SM_SYSTEM_MESSAGE(1210001,value0);}  }
class C{  public Set<String> keySet(){  HashSet<String> set=new HashSet<String>();  Iterator<String> keys=keys();  while (keys.hasNext()) {    set.add(keys.next());  }  return set;}  }
class C{  private float dp2px(float dp){  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,getResources().getDisplayMetrics());}  }
class C{  public Phone(String name,String[] possibleValues,String pauseSymbol,TargetElementNavigator segmentNavigator){  this.name=name;  this.values=new ByteStringTranslator(possibleValues);  this.pauseSymbol=pauseSymbol;  this.navigator=segmentNavigator;}  }
class C{  public User(String username){  if (username == null)   throw new IllegalArgumentException("user's name can't be null");  this.username=username;}  }
class C{  public static String gmlPosListToString(String posList,String precision) throws ParseException {  int nDecimals=Integer.parseInt(precision);  StringBuilder sb=new StringBuilder();  String[] c=posList.trim().split("\\s");  if (c.length % 2 != 0) {    return "";  }  for (int i=0; i < c.length; i+=2) {    String lat=parseCoordinate(c[i],nDecimals,NF), lon=parseCoordinate(c[i + 1],nDecimals,NF);    sb.append("[").append(lat).append(",").append(lon).append("],");  }  return sb.length() > 0 ? sb.deleteCharAt(sb.length() - 1).toString() : "";}  }
class C{  public boolean supportsUserRemove(){  return false;}  }
class C{  public MonsterHabitatCursor queryHabitatMonster(long id){  return mHelper.queryHabitatMonster(id);}  }
class C{  public static boolean isInitialized(Context ctx){  vitamioPackage=ctx.getPackageName();  vitamioLibraryPath=ContextUtils.getDataDir(ctx) + "lib/";  return true;}  }
class C{  public R compareTo(FileVersion f1){  if (!this.name.equalsIgnoreCase(f1.name)) {    return R.DIFF;  }  if (ver != null) {    if (f1.ver == null) {      return R.HIGH;    } else {      return ver.compareTo(f1.ver);    }  } else   if (f1.ver == null) {    return R.SAME;  } else {    return R.LOW;  }}  }
class C{  public LogEntry(){  index=ENTRY_INDEX.getAndIncrement();  time=System.currentTimeMillis();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public CatchParameterDeclaration fullCopy(){  CatchParameterDeclaration tree=(CatchParameterDeclaration)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private View findCurrentCenterView(){  float centerX=getWidth() / 2;  float viewHalfWidth=settings.getViewWidthPx() / 2;  View nearestToCenterView=null;  int nearestDeltaX=0;  View item;  int centerXView;  for (int count=getChildCount(), i=0; i < count; i++) {    item=getChildAt(i);    centerXView=(int)(getDecoratedLeft(item) + viewHalfWidth);    if (nearestToCenterView == null || Math.abs(nearestDeltaX) > Math.abs(centerX - centerXView)) {      nearestToCenterView=item;      nearestDeltaX=(int)(centerX - centerXView);    }  }  return nearestToCenterView;}  }
class C{  private void fillXMLAttributes(Attributes att){  fAttributes.removeAllAttributes();  final int len=att.getLength();  for (int i=0; i < len; ++i) {    fillXMLAttribute(att,i);    fAttributes.setSpecified(i,true);  }}  }
class C{  @Override @CallSuper public void onResume(){  running=true;}  }
class C{  public RequestParams(Object... keysAndValues){  init();  int len=keysAndValues.length;  if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even");  for (int i=0; i < len; i+=2) {    String key=String.valueOf(keysAndValues[i]);    String val=String.valueOf(keysAndValues[i + 1]);    put(key,val);  }}  }
class C{  public void render(Graphics2D g,double scale){  this.render(g,scale,this.color);}  }
class C{  public static int gray(int v,int a){  return rgba(v,v,v,a);}  }
class C{  private void calculateSun(int x){  LightUtils.calculateChunkLightDown(chunkManager,x + (startX * CHUNK_SIZE),highestBlocks[x] + (startY * CHUNK_SIZE),1f + BlockManager.getBlock(blocks[x][highestBlocks[x]]).getLightBlockingAmount());}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  updateSymbol();}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0d,0.0183156388887d,0.073262555555d,0.14652511111d,0.195366814813d,0.195366814813,0.156293451851d,0.00529247667642d,8.27746364655e-09};}  }
class C{  public static void log(int severity,String message,Throwable e){  log(new Status(severity,SVNUIPlugin.ID,0,message,e));}  }
class C{  public Path createClasspath(){  if (classpath == null) {    classpath=new Path(getProject());  }  return classpath.createPath();}  }
class C{  public TablePlan(String tblName,Transaction tx){  this.tx=tx;  ti=VanillaDb.catalogMgr().getTableInfo(tblName,tx);  if (ti == null)   throw new TableNotFoundException("table '" + tblName + "' is not defined in catalog.");  si=VanillaDb.statMgr().getTableStatInfo(ti,tx);}  }
class C{  protected static SAXParseException createSAXParseException(XMLParseException exception){  return new SAXParseException(exception.getMessage(),exception.getPublicId(),exception.getExpandedSystemId(),exception.getLineNumber(),exception.getColumnNumber(),exception.getException());}  }
class C{  public KMeansPlusPlusClusterer(final int k,final int maxIterations,final DistanceMeasure measure){  this(k,maxIterations,measure,new JDKRandomGenerator());}  }
class C{  public boolean moveStream(final String streamName){  try {    doMoveStream(streamName);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  protected Object interpret(Node n,FeatureVector fv){  if (n == null)   return null; else   if (n.isLeafNode()) {    return n.getAllData();  } else   if (n.isDecisionNode()) {    Node next=((DecisionNode)n).getNextNode(fv);    return interpret(next,fv);  } else   if (n.isDirectedGraphNode()) {    DirectedGraphNode g=(DirectedGraphNode)n;    Object data=interpret(g.getDecisionNode(),fv);    if (data != null) {      return data;    }    return interpret(g.getLeafNode(),fv);  }  throw new IllegalArgumentException("Unknown node type: " + n.getClass());}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigFont copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigFont(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public int size(){  return this.size;}  }
class C{  public DataSourceConfigPanel(){  dataSource.addListener(this);  setLayout(new BorderLayout());  add(createDataSourceConnectorPanel(),BorderLayout.NORTH);  add(createTable(),BorderLayout.CENTER);}  }
class C{  @Override public PlatformUser parseToken(String token){  try {    Claims body=Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();    String role=(String)body.get(ROLE);    List<GrantedAuthority> authorityList=AuthorityUtils.commaSeparatedStringToAuthorityList(role);    PlatformUser user=new PlatformUser(body.getSubject(),StringConstant.EMPTY_STRING,authorityList);    user.setDeviceId((String)body.get(DEVICE_ID));    user.setPlatform((String)body.get(PLATFORM));    user.setRole(role);    user.setLoginTime((Long)body.get(LOGIN_TIME));    return user;  } catch (  Exception e) {    return null;  }}  }
class C{  private T[][] copyOut(){  final int nRows=this.getRowDimension();  final T[][] out=MathArrays.buildArray(getField(),nRows,getColumnDimension());  for (int i=0; i < nRows; i++) {    System.arraycopy(data[i],0,out[i],0,data[i].length);  }  return out;}  }
class C{  private static boolean isWebEndpoint(Method method){  return Stream.of(method.getAnnotations()).anyMatch(null);}  }
class C{  public ResourcesPoet addString(String name,String value){  Element element=document.createElement("string");  element.setAttribute("name",name);  element.appendChild(document.createTextNode(value));  resourceElement.appendChild(element);  return this;}  }
class C{  public void check() throws ErlangVersionException {  String erlangVersion;  try {    erlangVersion=erlangShell.getErlangVersion();    LOGGER.debug("Erlang version installed in this system: {}",erlangVersion);  } catch (  ErlangShellException e) {    throw new ErlangVersionException("Could not determine Erlang version. Ensure Erlang is correctly installed.",e);  }  if (minErlangVersion == null) {    LOGGER.debug("RabbitMQ version to execute doesn't specify a minimum Erlang version. Will skip this check.");    return;  } else {    LOGGER.debug("RabbitMQ version to execute requires Erlang version {} or above.",minErlangVersion);  }  double expected;  double actual;  try {    expected=parse(minErlangVersion);    actual=parse(erlangVersion);  } catch (  RuntimeException e) {    LOGGER.warn("Error parsing Erlang version: " + minErlangVersion + " or "+ erlangVersion+ ". Ignoring check...");    return;  }  if (actual < expected) {    throw new ErlangVersionException(String.format("Minimum required Erlang version not found. Expected '%s' or higher. Actual is: '%s'",minErlangVersion,erlangVersion));  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public Serializable parseIdString(String id){  TypeParser parser=new TypeParser();  Class idType=getIdField().getType();  return parser.parse(id,idType);}  }
class C{  public void preMultiply(MatrixN mat){  final MatrixN tmp=new MatrixN(size());  for (int j=0; j < size(); j++)   for (int i=0; i < size(); i++) {    double f=0.;    for (int k=0; k < size(); k++)     f+=mat.get(i,k) * get(k,j);    tmp.set(i,j,f);  }  set(tmp);}  }
class C{  private void placeGroups(){  startRow();  placeChild(mCloseButton,Gravity.END);  placeGroup(mMainGroup);  int customGroupWidth=0;  if (mCustomGroup != null) {    updateCustomGroupForRow(ROW_MAIN);    customGroupWidth=getWidthWithMargins(mCustomGroup);  }  int buttonGroupWidth=0;  if (mButtonGroup != null) {    updateButtonGroupForRow(ROW_MAIN);    buttonGroupWidth=getWidthWithMargins(mButtonGroup);  }  boolean customGroupOnMainRow=customGroupWidth <= availableWidth();  boolean buttonGroupOnMainRow=customGroupWidth + buttonGroupWidth <= availableWidth();  if (mCustomGroup != null) {    if (customGroupOnMainRow) {      mCustomGroup.gravity=(mButtonGroup != null && buttonGroupOnMainRow) ? Gravity.START : Gravity.END;    } else {      startRow();      updateCustomGroupForRow(ROW_OTHER);    }    placeGroup(mCustomGroup);  }  if (mButtonGroup != null) {    if (!buttonGroupOnMainRow) {      startRow();      updateButtonGroupForRow(ROW_OTHER);      if (mCustomGroup == null && mMessageTextView != null) {        LayoutParams lp=(LayoutParams)mMessageTextView.getLayoutParams();        int messageBottom=lp.top + mMessageTextView.getMeasuredHeight();        mTop=Math.max(mTop,messageBottom + 2 * mMargin);      }    }    placeGroup(mButtonGroup);    if (mCustomButton != null && !buttonGroupOnMainRow) {      LayoutParams primaryButtonLP=(LayoutParams)mPrimaryButton.getLayoutParams();      LayoutParams customButtonLP=(LayoutParams)mCustomButton.getLayoutParams();      LayoutParams messageLP=(LayoutParams)mMessageView.getLayoutParams();      if (customButtonLP.start >= messageLP.start) {        customButtonLP.start=messageLP.start;      } else {        customButtonLP.start=mMargin;      }      if (!mButtonGroup.isStacked) {        customButtonLP.top=primaryButtonLP.top + (mPrimaryButton.getMeasuredHeight() - mCustomButton.getMeasuredHeight()) / 2;      }    }  }  startRow();  if (buttonGroupOnMainRow) {    int layoutHeight=mBottom;    for (int i=0; i < getChildCount(); i++) {      View child=getChildAt(i);      int extraSpace=layoutHeight - child.getMeasuredHeight();      LayoutParams lp=(LayoutParams)child.getLayoutParams();      lp.top=extraSpace / 2;    }  }}  }
class C{  public void onSuccess(JSONArray response){}  }
class C{  public SlicesApiRequest(String sliceName,String format,@NotNull String perPage,@NotNull String page,PhysicalTableDictionary tableDictionary,UriInfo uriInfo) throws BadApiRequestException {  super(format,perPage,page,uriInfo);  this.slices=generateSlices(tableDictionary,uriInfo);  this.slice=sliceName != null ? generateSlice(sliceName,tableDictionary,uriInfo) : null;  LOG.debug("Api request: \nSlices: {},\nFormat: {}\nPagination: {}",this.slices,this.format,this.paginationParameters);}  }
class C{  public RotationControl(int mouseButton){  m_button=mouseButton;}  }
class C{  private void computeValues(){  logger.debug("Computing the final values for the edge functions");  Map<N,Set<D>> allSeeds=new HashMap<N,Set<D>>(initialSeeds);  for (  N unbalancedRetSite : unbalancedRetSites) {    Set<D> seeds=allSeeds.get(unbalancedRetSite);    if (seeds == null) {      seeds=new HashSet<D>();      allSeeds.put(unbalancedRetSite,seeds);    }    seeds.add(zeroValue);  }  for (  Entry<N,Set<D>> seed : allSeeds.entrySet()) {    N startPoint=seed.getKey();    for (    D val : seed.getValue()) {      setVal(startPoint,val,valueLattice.bottomElement());      Pair<N,D> superGraphNode=new Pair<N,D>(startPoint,val);      scheduleValueProcessing(new ValuePropagationTask(superGraphNode));    }  }  logger.debug("Computed the final values of the edge functions");  try {    executor.awaitCompletion();  } catch (  InterruptedException e) {    e.printStackTrace();  }  Set<N> allNonCallStartNodes=icfg.allNonCallStartNodes();  @SuppressWarnings("unchecked") N[] nonCallStartNodesArray=(N[])new Object[allNonCallStartNodes.size()];  int i=0;  for (  N n : allNonCallStartNodes) {    nonCallStartNodesArray[i]=n;    i++;  }  for (int t=0; t < numThreads; t++) {    ValueComputationTask task=new ValueComputationTask(nonCallStartNodesArray,t);    scheduleValueComputationTask(task);  }  try {    executor.awaitCompletion();  } catch (  InterruptedException e) {    e.printStackTrace();  }}  }
class C{  final void put(final ByteVector out){  out.putShort(access).putShort(name).putShort(desc);  if (classReaderOffset != 0) {    out.putByteArray(cw.cr.b,classReaderOffset,classReaderLength);    return;  }  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0 && (cw.version & 0xffff) < Opcodes.V1_5) {    ++attributeCount;  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && annd != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && panns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * handlerCount;    if (localVar != null) {      size+=8 + localVar.length;    }    if (localVarType != null) {      size+=8 + localVarType.length;    }    if (lineNumber != null) {      size+=8 + lineNumber.length;    }    if (stackMap != null) {      size+=8 + stackMap.length;    }    if (cattrs != null) {      size+=cattrs.getSize(cw,code.data,code.length,maxStack,maxLocals);    }    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(handlerCount);    if (handlerCount > 0) {      Handler h=firstHandler;      while (h != null) {        out.putShort(h.start.position).putShort(h.end.position).putShort(h.handler.position).putShort(h.type);        h=h.next;      }    }    attributeCount=0;    if (localVar != null) {      ++attributeCount;    }    if (localVarType != null) {      ++attributeCount;    }    if (lineNumber != null) {      ++attributeCount;    }    if (stackMap != null) {      ++attributeCount;    }    if (cattrs != null) {      attributeCount+=cattrs.getCount();    }    out.putShort(attributeCount);    if (localVar != null) {      out.putShort(cw.newUTF8("LocalVariableTable"));      out.putInt(localVar.length + 2).putShort(localVarCount);      out.putByteArray(localVar.data,0,localVar.length);    }    if (localVarType != null) {      out.putShort(cw.newUTF8("LocalVariableTypeTable"));      out.putInt(localVarType.length + 2).putShort(localVarTypeCount);      out.putByteArray(localVarType.data,0,localVarType.length);    }    if (lineNumber != null) {      out.putShort(cw.newUTF8("LineNumberTable"));      out.putInt(lineNumber.length + 2).putShort(lineNumberCount);      out.putByteArray(lineNumber.data,0,lineNumber.length);    }    if (stackMap != null) {      boolean zip=(cw.version & 0xFFFF) >= Opcodes.V1_6;      out.putShort(cw.newUTF8(zip ? "StackMapTable" : "StackMap"));      out.putInt(stackMap.length + 2).putShort(frameCount);      out.putByteArray(stackMap.data,0,stackMap.length);    }    if (cattrs != null) {      cattrs.put(cw,code.data,code.length,maxLocals,maxStack,out);    }  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0 && (cw.version & 0xffff) < Opcodes.V1_5) {    out.putShort(cw.newUTF8("Synthetic")).putInt(0);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != null) {    out.putShort(cw.newUTF8("Signature")).putInt(2).putShort(cw.newUTF8(signature));  }  if (ClassReader.ANNOTATIONS && annd != null) {    out.putShort(cw.newUTF8("AnnotationDefault"));    out.putInt(annd.length);    out.putByteArray(annd.data,0,annd.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && panns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleParameterAnnotations"));    AnnotationWriter.put(panns,synthetics,out);  }  if (ClassReader.ANNOTATIONS && ipanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleParameterAnnotations"));    AnnotationWriter.put(ipanns,synthetics,out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  public ThrowableSet mightThrow(Unit u){  return ThrowableSet.Manager.v().ALL_THROWABLES;}  }
class C{  public void didStopRefreshing(){  if (!mSwipeRefreshLayout.isRefreshing())   return;  cancelStopRefreshingRunnable();  mSwipeRefreshLayout.postDelayed(getStopRefreshingRunnable(),STOP_REFRESH_ANIMATION_DELAY_MS);}  }
class C{  private javax.ws.rs.core.Response buildErrorResponse(ResponseException responseException){  return RequestHandlerUtils.makeErrorResponse(responseException.getStatusCode(),responseException.getReason(),responseException.getDescription(),responseException.getDruidQuery(),writer);}  }
class C{  public static <T>ArrayList<T> arrayList(Collection<T> c){  return new ArrayList<T>(c);}  }
class C{  public static double chiSquareTest(final double[] expected,final long[] observed){  final org.hipparchus.distribution.continuous.ChiSquaredDistribution distribution=new ChiSquaredDistribution(expected.length - 1.0);  return 1.0 - distribution.cumulativeProbability(chiSquare(expected,observed));}  }
class C{  public void startAnimations(){  isStopSearchingAnim=false;  if (animatorSet == null) {    animatorSet=new AnimatorSet();    animatorSet.playTogether(lineCircleAnim(),rotateCircleAnim(),smallCircleAnim(),largeCircleAnim());  }  animatorSet.start();}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  private List<Field> parseNextLine() throws IOException, ParseException {  final List<Field> fields=new ArrayList<Field>();  line=br.readLine();  if (line == null) {    throw new EOFException();  }  final StringTokenizer tokenizer=new StringTokenizer(line);  while (tokenizer.hasMoreTokens()) {    fields.add(new Field(tokenizer.nextToken()));  }  return fields;}  }
class C{  private static void initialize(){  InputStream is=null;  BufferedReader reader=null;  int index;  String name;  String value;  int code;  String line;  if (_byName != null)   return;  try {    _byName=new Hashtable();    _byChar=new Hashtable();    is=HTMLdtd.class.getResourceAsStream(ENTITIES_RESOURCE);    if (is == null) {      throw new RuntimeException(DOMMessageFormatter.formatMessage(DOMMessageFormatter.SERIALIZER_DOMAIN,"ResourceNotFound",new Object[]{ENTITIES_RESOURCE}));    }    reader=new BufferedReader(new InputStreamReader(is,"ASCII"));    line=reader.readLine();    while (line != null) {      if (line.length() == 0 || line.charAt(0) == '#') {        line=reader.readLine();        continue;      }      index=line.indexOf(' ');      if (index > 1) {        name=line.substring(0,index);        ++index;        if (index < line.length()) {          value=line.substring(index);          index=value.indexOf(' ');          if (index > 0)           value=value.substring(0,index);          code=Integer.parseInt(value);          defineEntity(name,(char)code);        }      }      line=reader.readLine();    }    is.close();  } catch (  Exception except) {    throw new RuntimeException(DOMMessageFormatter.formatMessage(DOMMessageFormatter.SERIALIZER_DOMAIN,"ResourceNotLoaded",new Object[]{ENTITIES_RESOURCE,except.toString()}));  } finally {    if (is != null) {      try {        is.close();      } catch (      Exception except) {      }    }  }}  }
class C{  protected void initSentenceRepresentationFilter(){  if (SentenceRepresentationFilter == null)   SentenceRepresentationFilter=new IdentityObjectFilter<DocumentNGramGraph>();}  }
class C{  public T call(long startTimeout,TimeUnit startTimeoutUnit) throws Exception {  final CountDownLatch taskStarted=new CountDownLatch(1);  final AtomicBoolean taskCancelled=new AtomicBoolean(false);  final JDialog modalBlocker=new JDialog();  modalBlocker.setModal(true);  modalBlocker.setUndecorated(true);  modalBlocker.setOpacity(0.0f);  modalBlocker.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);  final CountDownLatch modalityLatch=new CountDownLatch(1);  final FutureTask<T> task=new FutureTask<>(null);  Platform.runLater(task);  if (!taskStarted.await(startTimeout,startTimeoutUnit)) {synchronized (taskStarted) {      if (!taskStarted.await(0,TimeUnit.MILLISECONDS)) {        taskCancelled.set(true);        throw new IllegalStateException("JavaFX was shut down" + " or is unresponsive");      }    }  }  SwingUtilities.invokeLater(null);  modalBlocker.setVisible(true);  modalBlocker.dispose();  try {    return task.get();  } catch (  ExecutionException ex) {    Throwable ec=ex.getCause();    if (ec instanceof Exception) {      throw (Exception)ec;    } else     if (ec instanceof Error) {      throw (Error)ec;    } else {      throw new AssertionError("Unexpected exception type",ec);    }  }}  }
class C{  public boolean enclosedBy(NestableTransaction enclosing){  for (NestableServerTransaction ancestor=this.parent; ancestor != null; ancestor=ancestor.parent) {    if (ancestor.equals(enclosing))     return true;  }  return false;}  }
class C{  private void renderRasterMap(Rectangle imageSize,Style style,int dpi){  DataSourceInterface dataSource=DataSourceFactory.getDataSource();  AbstractGridCoverage2DReader gridCoverage=dataSource.getGridCoverageReader();  if (gridCoverage == null) {    validSymbol=false;  }  GridReaderLayer rasterLayer=null;  MapViewport viewport=null;  List<Layer> layerList=new ArrayList<Layer>();  if (style != null) {    rasterLayer=new GridReaderLayer(gridCoverage,style);    layerList.add(rasterLayer);    viewport=new MapViewport(rasterLayer.getBounds());  }  boolean hasGeometry=true;  MapContent map=new MapContent();  map.addLayers(layerList);  map.setViewport(viewport);  try {    Map<Object,Object> hints=new HashMap<Object,Object>();    hints.put(StreamingRenderer.DPI_KEY,dpi);    hints.put(StreamingRenderer.LABEL_CACHE_KEY,new LabelCacheImpl());    renderer.setRendererHints(hints);    renderer.setMapContent(map);    BufferedImage image=new BufferedImage(imageSize.width,imageSize.height,BufferedImage.TYPE_INT_ARGB);    Graphics2D graphics=image.createGraphics();    if (useAntiAlias) {      graphics.setRenderingHints(new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON));    }    try {      if (!hasGeometry) {        graphics.setColor(Color.BLACK);        int y=imageSize.height / 2;        Font font=new Font(Font.SERIF,Font.BOLD,14);        graphics.setFont(font);        graphics.drawString(Localisation.getString(RenderPanelImpl.class,"RenderPanelImpl.error1"),10,y - 14);      } else {        if (rasterLayer != null) {          ReferencedEnvelope bounds=rasterLayer.getBounds();          renderer.paint(graphics,imageSize,bounds);        }        this.bImage=image;      }    }  finally {      graphics.dispose();    }  }  finally {    map.dispose();  }}  }
class C{  @RequestMapping(value="/race-normals",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<RaceNormal> updateRaceNormal(@RequestBody RaceNormal raceNormal) throws URISyntaxException {  log.debug("REST request to update RaceNormal : {}",raceNormal);  if (raceNormal.getRaceId() == null) {    return createRaceNormal(raceNormal);  }  RaceNormal result=raceNormalRepository.save(raceNormal);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("raceNormal",raceNormal.getRaceId().toString())).body(result);}  }
class C{  public TrafficLogPredicate add(TrafficLogPredicate query){  predicates.addAll(query.getPredicates());  return this;}  }
class C{  private ReferentUuids(){  throw new AssertionError();}  }
class C{  public MultiFile8BitAudioPlayer(String baseName,AudioFileFormat.Type type){  this.baseName=baseName;  this.outputType=type;  debug=Utilities.getBoolean("com.sun.speech.freetts.audio.AudioPlayer.debug");}  }
class C{  public void animateApperance(){  mIsVisible=true;  mPanel.addToAnimation(this,AnimationType.APPEARANCE,0.f,1.f,ContextualSearchPanelAnimation.MAXIMUM_ANIMATION_DURATION_MS,0);}  }
class C{  public INDArray toRaveledTensor(BufferedImage image){  try {    image=scalingIfNeed(image,false);    return toINDArrayBGR(image).ravel();  } catch (  Exception e) {    throw new RuntimeException("Unable to load image",e);  }}  }
class C{  public static void storeProductConfigWrapper(ProductConfigWrapper configWrapper,Delegator delegator){  if (configWrapper == null || (!configWrapper.isCompleted()))   return;  String configId=null;  List<ConfigItem> questions=configWrapper.getQuestions();  List<GenericValue> configsToCheck=FastList.newInstance();  int selectedOptionSize=0;  for (  ConfigItem ci : questions) {    String configItemId=null;    Long sequenceNum=null;    List<ProductConfigWrapper.ConfigOption> selectedOptions=FastList.newInstance();    List<ConfigOption> options=ci.getOptions();    if (ci.isStandard()) {      selectedOptions.addAll(options);    } else {      for (      ConfigOption oneOption : options) {        if (oneOption.isSelected()) {          selectedOptions.add(oneOption);        }      }    }    if (selectedOptions.size() > 0) {      selectedOptionSize+=selectedOptions.size();      configItemId=ci.getConfigItemAssoc().getString("configItemId");      sequenceNum=ci.getConfigItemAssoc().getLong("sequenceNum");      try {        List<GenericValue> configs=EntityQuery.use(delegator).from("ProductConfigConfig").where("configItemId",configItemId,"sequenceNum",sequenceNum).queryList();        for (        GenericValue productConfigConfig : configs) {          for (          ConfigOption oneOption : selectedOptions) {            String configOptionId=oneOption.configOption.getString("configOptionId");            if (productConfigConfig.getString("configOptionId").equals(configOptionId)) {              String comments=oneOption.getComments() != null ? oneOption.getComments() : "";              if ((UtilValidate.isEmpty(comments) && UtilValidate.isEmpty(productConfigConfig.getString("description"))) || comments.equals(productConfigConfig.getString("description"))) {                configsToCheck.add(productConfigConfig);              }            }          }        }      } catch (      GenericEntityException e) {        Debug.logError(e,module);      }    }  }  if (UtilValidate.isNotEmpty(configsToCheck)) {    for (    GenericValue productConfigConfig : configsToCheck) {      String tempConfigId=productConfigConfig.getString("configId");      try {        List<GenericValue> tempResult=EntityQuery.use(delegator).from("ProductConfigConfig").where("configId",tempConfigId).queryList();        if (tempResult.size() == selectedOptionSize && configsToCheck.containsAll(tempResult)) {          List<GenericValue> configOptionProductOptions=EntityQuery.use(delegator).from("ConfigOptionProductOption").where("configId",tempConfigId).queryList();          if (UtilValidate.isNotEmpty(configOptionProductOptions)) {            for (            ConfigItem ci : questions) {              String configItemId=null;              Long sequenceNum=null;              List<ProductConfigWrapper.ConfigOption> selectedOptions=FastList.newInstance();              List<ConfigOption> options=ci.getOptions();              if (ci.isStandard()) {                selectedOptions.addAll(options);              } else {                for (                ConfigOption oneOption : options) {                  if (oneOption.isSelected()) {                    selectedOptions.add(oneOption);                  }                }              }              boolean match=true;              for (              ProductConfigWrapper.ConfigOption anOption : selectedOptions) {                if (match && anOption.hasVirtualComponent()) {                  List<GenericValue> components=anOption.getComponents();                  for (                  GenericValue aComponent : components) {                    if (anOption.isVirtualComponent(aComponent)) {                      Map<String,String> componentOptions=anOption.getComponentOptions();                      String optionProductId=aComponent.getString("productId");                      String optionProductOptionId=componentOptions.get(optionProductId);                      String configOptionId=anOption.configOption.getString("configOptionId");                      configItemId=ci.getConfigItemAssoc().getString("configItemId");                      sequenceNum=ci.getConfigItemAssoc().getLong("sequenceNum");                      GenericValue configOptionProductOption=delegator.makeValue("ConfigOptionProductOption");                      configOptionProductOption.set("configId",tempConfigId);                      configOptionProductOption.set("configItemId",configItemId);                      configOptionProductOption.set("sequenceNum",sequenceNum);                      configOptionProductOption.set("configOptionId",configOptionId);                      configOptionProductOption.set("productId",optionProductId);                      configOptionProductOption.set("productOptionId",optionProductOptionId);                      if (!configOptionProductOptions.remove(configOptionProductOption)) {                        match=false;                        break;                      }                    }                  }                }              }              if (match && (UtilValidate.isEmpty(configOptionProductOptions))) {                configWrapper.configId=tempConfigId;                Debug.logInfo("Existing configuration found with configId:" + tempConfigId,module);                return;              }            }          } else {            configWrapper.configId=tempConfigId;            Debug.logInfo("Existing configuration found with configId:" + tempConfigId,module);            return;          }        }      } catch (      GenericEntityException e) {        Debug.logError(e,module);      }    }  }  boolean nextId=true;  for (  ConfigItem ci : questions) {    String configItemId=null;    Long sequenceNum=null;    List<ProductConfigWrapper.ConfigOption> selectedOptions=FastList.newInstance();    List<ConfigOption> options=ci.getOptions();    if (ci.isStandard()) {      selectedOptions.addAll(options);    } else {      for (      ConfigOption oneOption : options) {        if (oneOption.isSelected()) {          selectedOptions.add(oneOption);        }      }    }    if (selectedOptions.size() > 0) {      if (nextId) {        configId=delegator.getNextSeqId("ProductConfigConfig");        nextId=false;      }      configItemId=ci.getConfigItemAssoc().getString("configItemId");      sequenceNum=ci.getConfigItemAssoc().getLong("sequenceNum");      for (      ConfigOption oneOption : selectedOptions) {        Map<String,String> componentOptions=oneOption.componentOptions;        List<GenericValue> toBeStored=FastList.newInstance();        String configOptionId=oneOption.configOption.getString("configOptionId");        String description=oneOption.getComments();        GenericValue productConfigConfig=delegator.makeValue("ProductConfigConfig");        productConfigConfig.put("configId",configId);        productConfigConfig.put("configItemId",configItemId);        productConfigConfig.put("sequenceNum",sequenceNum);        productConfigConfig.put("configOptionId",configOptionId);        productConfigConfig.put("description",description);        toBeStored.add(productConfigConfig);        if (oneOption.hasVirtualComponent()) {          List<GenericValue> components=oneOption.getComponents();          for (          GenericValue component : components) {            if (oneOption.isVirtualComponent(component) && UtilValidate.isNotEmpty(componentOptions)) {              String componentOption=componentOptions.get(component.getString("productId"));              GenericValue configOptionProductOption=delegator.makeValue("ConfigOptionProductOption");              configOptionProductOption.put("configId",configId);              configOptionProductOption.put("configItemId",configItemId);              configOptionProductOption.put("sequenceNum",sequenceNum);              configOptionProductOption.put("configOptionId",configOptionId);              configOptionProductOption.put("productId",component.getString("productId"));              configOptionProductOption.put("productOptionId",componentOption);              toBeStored.add(configOptionProductOption);            }          }        }        try {          delegator.storeAll(toBeStored);        } catch (        GenericEntityException e) {          configId=null;          Debug.logWarning(e.getMessage(),module);        }      }    }  }  configWrapper.configId=configId;  Debug.logInfo("New configId created:" + configId,module);  return;}  }
class C{  public void union(FlowSet<T> otherFlow,FlowSet<T> destFlow){  if (sameType(otherFlow) && sameType(destFlow)) {    DavaFlowSet<T> other=(DavaFlowSet<T>)otherFlow;    DavaFlowSet<T> dest=(DavaFlowSet<T>)destFlow;    if (dest == other) {      for (int i=0; i < this.numElements; i++)       dest.add(this.elements[i]);    } else {      if (this != dest)       copy(dest);      for (int i=0; i < other.numElements; i++)       dest.add(other.elements[i]);    }  } else   super.union(otherFlow,destFlow);}  }
class C{  private void rdp_decoding_r(List<ArrayList<Character>> g_data,int disks,int stripe_unit_size,int w,int k){  int off, p;  int packet_size=stripe_unit_size / w;  int i=0;  Collections.copy(g_data.get(k),g_data.get(0));  for (i=2; i < (disks + 2); i++) {    if (i == k)     continue;    for (p=0; p < w; p++) {      for (off=0; off < packet_size; off++) {        g_data.get(k).set(p * packet_size + off,(char)(g_data.get(k).get(p * packet_size + off) ^ g_data.get(i).get(p * packet_size + off)));      }    }  }}  }
class C{  public void persistCollection(Collection<?> collection,boolean explicit,OpCallbacks call,StateManager ownerStateManager,FieldMetaData fieldMetaData){  if (collection.isEmpty())   return;  beginOperation(true);  List<Exception> exceps=null;  try {    assertWriteOperation();    for (    Object object : collection) {      try {        StateManager stateManager=(StateManager)persist(object,null,explicit,call);        stateManager.setOwnerInformation(ownerStateManager,fieldMetaData);      } catch (      UserException e) {        if (exceps == null)         exceps=new ArrayList<Exception>();        exceps.add(e);      }    }  }  finally {    endOperation();  }  if (exceps != null && !exceps.isEmpty()) {    boolean fatal=false;    Throwable[] throwables=exceps.toArray(new Throwable[exceps.size()]);    for (int i=0; i < throwables.length; i++) {      if (throwables[i] instanceof OpenJPAException && ((OpenJPAException)throwables[i]).isFatal())       fatal=true;    }    Localizer loc=Localizer.forPackage(BrokerImpl.class);    OpenJPAException err=new UserException(loc.get("nested-exceps"));    throw err.setNestedThrowables(throwables).setFatal(fatal);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void initSpaceUserAccountDriver(String spaceName,String url,String containerName) throws Exception {  String fullSpaceName=JSpaceUtilities.createFullSpaceName(containerName,spaceName);  String driverClassName=JProperties.getSpaceProperty(fullSpaceName,"filters.userAccountDriver","com.j_spaces.core.filters.MemoryRealm");  m_realm=(ISpaceUserAccountDriver)ClassLoaderHelper.loadClass(driverClassName).newInstance();  String rootDir=MemoryRealm.getRootDir();  String urlPath=MemoryRealm.getUrlPath(url);  String fileURL=rootDir + urlPath;  URL securityFileURL=ResourceLoader.getResourceURL(urlPath,rootDir);  if (securityFileURL != null) {    fileURL=securityFileURL.toURI().getPath();  }  m_realm.init(fileURL,containerName);}  }
class C{  public ExitMonitorStmt newExitMonitorStmt(Value op){  return new JExitMonitorStmt(op);}  }
class C{  public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONArray errorResponse){}  }
class C{  public boolean isHiddenAttribute(String attribute){  return attribute.endsWith(" [hidden]");}  }
class C{  public void loadData(Table t,String query,String keyField,Object lock){  loadData(t,query,keyField,lock,null);}  }
class C{  public void makeLiteral(StringBuilder sb,Object object,boolean singleQuote){  if (object == null) {    return;  } else   if (object instanceof Map) {    sb.append("{");    int i=0;    for (    Map.Entry<?,?> entry : ((Map<?,?>)object).entrySet()) {      if (entry.getValue() != null) {        if (i > 0) {          sb.append(",");        }        makeLiteral(sb,entry.getKey(),singleQuote);        sb.append(":");        makeLiteral(sb,entry.getValue(),singleQuote);        i++;      }    }    sb.append("}");  } else   if (object instanceof Iterable) {    sb.append("[");    int i=0;    for (    Object entry : (Iterable<?>)object) {      if (entry != null) {        if (i > 0) {          sb.append(",");        }        makeLiteral(sb,entry,singleQuote);        i++;      }    }    sb.append("]");  } else   if (object instanceof Object[]) {    sb.append("[");    int i=0;    for (    Object entry : (Object[])object) {      if (entry != null) {        if (i > 0) {          sb.append(",");        }        makeLiteral(sb,entry,singleQuote);        i++;      }    }    sb.append("]");  } else   if (object instanceof String) {    sb.append(singleQuote ? makeStringLiteralSQ((String)object) : makeStringLiteral((String)object));  } else   if (object instanceof Number) {    sb.append(object.toString());  } else   if (object instanceof Boolean) {    sb.append(((Boolean)object) ? "true" : "false");  } else {    sb.append(singleQuote ? makeStringLiteralSQ(object.toString()) : makeStringLiteral(object.toString()));  }}  }
class C{  public void addEdge(Object from,Object to,int w){  if (this.isUnknown)   throw new RuntimeException("Unknown graph can not have edges");  Hashtable<Object,IntContainer> targets=sources.get(from);  if (targets == null) {    targets=new Hashtable<Object,IntContainer>();    sources.put(from,targets);  }  IntContainer weight=targets.get(to);  if (weight == null) {    weight=new IntContainer(w);    targets.put(to,weight);  } else {    if (weight.value > w)     weight.value=w;  }}  }
class C{  @Override protected int callSpeak(String text,float volume,int utteranceId){  Bundle params=new Bundle();  if (volume != 1.0) {    params.putFloat(TextToSpeech.Engine.KEY_PARAM_VOLUME,volume);  }  return mTextToSpeech.speak(text,TextToSpeech.QUEUE_FLUSH,params,Integer.toString(utteranceId));}  }
class C{  public WorkspacePath blazePackage(){  String labelStr=toString();  int startIndex=labelStr.indexOf("//") + "//".length();  int colonIndex=labelStr.lastIndexOf(':');  LOG.assertTrue(colonIndex >= 0);  return new WorkspacePath(labelStr.substring(startIndex,colonIndex));}  }
class C{  public static boolean isConnectedFast(Context context){  NetworkInfo info=NetworkUtil.getNetworkInfo(context);  return (info != null && info.isConnected() && NetworkUtil.isConnectionFast(info.getType(),info.getSubtype()));}  }
class C{  public boolean searchSymbolsInScope(Processor<BuildElement> processor,@Nullable PsiElement stopAtElement){  for (  BuildElement child : findChildrenByClass(BuildElement.class)) {    if (child == stopAtElement) {      break;    }    if (child instanceof AssignmentStatement) {      TargetExpression target=((AssignmentStatement)child).getLeftHandSideExpression();      if (target != null && !processor.process(target)) {        return false;      }    } else     if (child instanceof FunctionStatement) {      if (!processor.process(child)) {        return false;      }    }  }  for (  BuildElement child : findChildrenByClass(BuildElement.class)) {    if (child == stopAtElement) {      break;    }    if (child instanceof LoadStatement) {      for (      StringLiteral importedSymbol : ((LoadStatement)child).getImportedSymbolElements()) {        if (!processor.process(importedSymbol)) {          return false;        }      }    }  }  return true;}  }
class C{  @Override public String resolveTemplateParameter(TemplateParameter templateParameter,ContextInfo contextInfo){  SequenceContextParameters sequenceParameter=SequenceContextParameters.fromName(templateParameter.getName());  if (sequenceParameter == null) {    throw new UnknownTemplateParameterNameException(templateParameter.toString(),String.format("Unknown Sequence Template Parameter Name '%s'. Supported Sequence Parameter Names: %s'",templateParameter.getName(),SequenceContextParameters.getSupportedContextParameters()));  }  return getParameterValue(templateParameter,sequenceParameter,contextInfo);}  }
class C{  private void sendDiscarded(ServiceRegistrar reg,String[] curGroups){  ServiceID srvcID=reg.getServiceID();  if (curGroups == null) {    UnicastResponse resp=(UnicastResponse)registrars.get(srvcID);    if (resp == null)     return;    curGroups=resp.getGroups();  }  if (registrars.remove(srvcID) != null) {    regInfo.remove(srvcID);    if (!listeners.isEmpty()) {      addNotify((ArrayList)listeners.clone(),mapRegToGroups(reg,curGroups),DISCARDED);    }  }}  }
class C{  public boolean isFilterColumn(int[] selectedColumns){  if (selectedColumns != null) {    for (    int column : selectedColumns) {      if (column == COL_FILTER) {        return true;      }    }  }  return false;}  }
class C{  public int propagator(){  String s=soot.PhaseOptions.getString(options,"propagator");  if (s.equalsIgnoreCase("auto"))   return propagator_auto;  if (s.equalsIgnoreCase("iter"))   return propagator_iter;  if (s.equalsIgnoreCase("worklist"))   return propagator_worklist;  if (s.equalsIgnoreCase("alias"))   return propagator_alias;  if (s.equalsIgnoreCase("bdd"))   return propagator_bdd;  if (s.equalsIgnoreCase("incbdd"))   return propagator_incbdd;  throw new RuntimeException("Invalid value " + s + " of phase option propagator");}  }
class C{  public static String whichDoctypePublic(Document doc){  DocumentType doctype;  doctype=doc.getDoctype();  if (doctype != null) {    try {      return doctype.getPublicId();    } catch (    Error except) {    }  }  if (doc instanceof HTMLDocument)   return DTD.XHTMLPublicId;  return null;}  }
class C{  public ExpandableODE(final OrdinaryDifferentialEquation primary){  this.primary=primary;  this.components=new ArrayList<SecondaryODE>();  this.mapper=new EquationsMapper(null,primary.getDimension());}  }
class C{  public BigFraction(final double value,final double epsilon,final int maxIterations) throws MathIllegalStateException {  this(value,epsilon,Integer.MAX_VALUE,maxIterations);}  }
class C{  public CatalogEntry(int type,Vector args) throws CatalogException {  try {    Integer iArgs=(Integer)entryArgs.get(type);    if (iArgs.intValue() != args.size()) {      throw new CatalogException(CatalogException.INVALID_ENTRY);    }  } catch (  ArrayIndexOutOfBoundsException e) {    throw new CatalogException(CatalogException.INVALID_ENTRY_TYPE);  }  entryType=type;  this.args=args;}  }
class C{  public Vector2D toSpace(Vector<Euclidean1D> vector){  return toSpace((Point<Euclidean1D>)vector);}  }
class C{  private void doNormalizedStep(boolean isLast){  if (!bounds.firstIncluded() && first.getTime() == last.getTime()) {    return;  }  handler.handleStep(last,isLast);}  }
class C{  public void removeSample(String name){  if (table.rowKeySet().contains(name)) {    table.rowKeySet().remove(name);    sampleOrder.remove(name);  }}  }
class C{  private void synchronizeCache(final Set<Long> pTagIds) throws CacheSynchronizationException {  try {    if (!liveCache.isEmpty()) {      final Set<Long> unsynchronizedTagIds;      if (pTagIds == null || jmsConnectionDown || heartbeatExpired) {        unsynchronizedTagIds=new HashSet<Long>(liveCache.keySet());      } else {        unsynchronizedTagIds=new HashSet<Long>(pTagIds);      }      unsynchronizedTagIds.removeAll(synchronizeTags(unsynchronizedTagIds));      for (      Long tagId : unsynchronizedTagIds) {        final ClientDataTagImpl liveTag=liveCache.get(tagId);        if (liveTag.getDataTagQuality().isExistingTag()) {          if (jmsProxy.isRegisteredListener(liveTag)) {            try {              jmsProxy.unregisterUpdateListener(liveTag);            } catch (            Exception e) {              LOG.warn("synchronizeCache() - Could not unregister tag " + tagId + " from JmsProxy. Reason: "+ e.getMessage());            }          }          supervisionManager.removeSupervisionListener(liveTag);          final ClientDataTagImpl unkownTag=new ClientDataTagImpl(tagId,true);          unkownTag.addUpdateListeners(liveTag.getUpdateListeners());          liveCache.put(tagId,unkownTag);        }      }    }    jmsConnectionDown=false;    heartbeatExpired=false;  } catch (  Exception e) {    throw new CacheSynchronizationException("Could not refresh tags in the live cache.",e);  }}  }
class C{  @Override public WebElement findElementByName(String name){  return ((FindsByName)super.getWrappedDriver()).findElementByName(name);}  }
class C{  private synchronized static void compareConfiguration(final ProcessConfigurationResponse processConfigurationResponse){  if (ActiveRequestSenderTest.testType == TestType.CONFIG) {    assertNotNull(processConfigurationResponse);    assertEquals(PROCESS_NAME,processConfigurationResponse.getProcessName());  }}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public WallGetQuery filter(WallGetFilter value){  return unsafeParam("filter",value);}  }
class C{  public static URI toLocation(String source,String table){  URI sourceUri=URI.create(source);  return toLocation(sourceUri,table);}  }
class C{  public void begin(int size){  outputData=new byte[size];  curIndex=0;}  }
class C{  public String[] readAllLines(){  ArrayList<String> lines=new ArrayList<String>();  while (hasNextLine()) {    lines.add(readLine());  }  return lines.toArray(new String[0]);}  }
class C{  @Override public boolean isDataSource(){  return false;}  }
class C{  @Override public SparseArray<Face> detect(Frame frame){  final int kMinDimension=147;  final int kDimensionLower=640;  int width=frame.getMetadata().getWidth();  int height=frame.getMetadata().getHeight();  if (height > (2 * kDimensionLower)) {    double multiple=(double)height / (double)kDimensionLower;    double lowerWidth=Math.floor((double)width / multiple);    if (lowerWidth < kMinDimension) {      int newWidth=(int)Math.ceil(kMinDimension * multiple);      frame=padFrameRight(frame,newWidth);    }  } else   if (width > (2 * kDimensionLower)) {    double multiple=(double)width / (double)kDimensionLower;    double lowerHeight=Math.floor((double)height / multiple);    if (lowerHeight < kMinDimension) {      int newHeight=(int)Math.ceil(kMinDimension * multiple);      frame=padFrameBottom(frame,newHeight);    }  } else   if (width < kMinDimension) {    frame=padFrameRight(frame,kMinDimension);  }  return mDelegate.detect(frame);}  }
class C{  public CrossesExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public StartupException(Throwable nested){  super();  this.nested=nested;}  }
class C{  public void inASTWhileNode(ASTWhileNode node){  nodeStack.add(node);}  }
class C{  protected void noteUpdate(K key,V newValue,V oldValue){  for (  CacheListener<K,V> listener : listeners) {    listener.noteKeyUpdate(this,key,newValue,oldValue);  }}  }
class C{  public void updateTask(){  this.villager.getLookHelper().setLookPositionWithEntity(this.mate,10.0F,(float)this.villager.getVerticalFaceSpeed());  this.villager.getNavigator().tryMoveToEntityLiving(this.mate,this.moveSpeed);  ++this.spawnBabyDelay;  if (this.spawnBabyDelay >= 60 && this.villager.getDistanceSqToEntity(this.mate) < 9.0D) {    this.spawnBaby();  }}  }
class C{  public DefaultMovieInfoProvider(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MEMBER_RANK_DONE_GUILD_NEWBIE(String value0){  return new SM_SYSTEM_MESSAGE(1400903,value0);}  }
class C{  public static Drawable byteToDrawable(byte[] b){  return bitmapToDrawable(byteToBitmap(b));}  }
class C{  public static void uinstallApplication(final Context context,final String packageName){  final Intent intent=new Intent(Intent.ACTION_DELETE,Uri.fromParts("package",packageName,null));  context.startActivity(intent);}  }
class C{  public KeyPair createKeys() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeySpecException {  DHPublicKey publicKey=(DHPublicKey)this.getValueLinkPublicKey();  DHParameterSpec dhParamSpec=publicKey.getParams();  KeyPairGenerator keyGen=KeyPairGenerator.getInstance("DH");  keyGen.initialize(dhParamSpec);  KeyPair keyPair=keyGen.generateKeyPair();  return keyPair;}  }
class C{  public static String[] include(String... includes){  return includes;}  }
class C{  final boolean unlink(Index<K,V> succ){  return !indexesDeletedNode() && casRight(succ,succ.right);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_MOVE_BIRTHAREA_FRIENDLY_IDARENA(String value0){  return new SM_SYSTEM_MESSAGE(1400933,value0);}  }
class C{  public static String nowAsString(){  return Long.toString(System.currentTimeMillis());}  }
class C{  public boolean with_cse(){  return soot.PhaseOptions.getBoolean(options,"with-cse");}  }
class C{  public static boolean startsWithIgnoreCase(String str,String prefix){  return str != null && prefix != null && str.regionMatches(true,0,prefix,0,prefix.length());}  }
class C{  protected double tTest(final double m,final double mu,final double v,final double n) throws MathIllegalArgumentException, MathIllegalStateException {  final double t=FastMath.abs(t(m,mu,v,n));  final TDistribution distribution=new TDistribution(n - 1);  return 2.0 * distribution.cumulativeProbability(-t);}  }
class C{  public static Element encloseWithMTU(Element t,String orig,String accentPosition){  if (!t.getNodeName().equals(MaryXML.TOKEN))   throw new DOMException(DOMException.INVALID_ACCESS_ERR,"Only t elements allowed, received " + t.getNodeName() + ".");  Element parent=(Element)t.getParentNode();  assert parent != null;  Document doc=t.getOwnerDocument();  Element mtu=MaryXML.createElement(doc,MaryXML.MTU);  mtu.setAttribute("orig",orig);  if (accentPosition != null)   mtu.setAttribute("accent",accentPosition);  parent.insertBefore(mtu,t);  mtu.appendChild(t);  return mtu;}  }
class C{  public boolean contains(short val){  return index(val) >= 0;}  }
class C{  public void testQueryByAssigneeExcludeSubtasksPaginated() throws Exception {  TaskQuery query=taskService.createTaskQuery().taskAssignee("gonzo");  assertEquals(7,query.count());  assertEquals(2,query.listPage(0,2).size());  query=taskService.createTaskQuery().taskAssignee("gonzo").excludeSubtasks();  assertEquals(2,query.count());  assertEquals(1,query.listPage(0,1).size());  query=taskService.createTaskQuery().taskAssignee("kermit");  assertEquals(0,query.count());  assertEquals(0,query.listPage(0,2).size());  assertNull(query.singleResult());  query=taskService.createTaskQuery().taskAssignee("kermit").excludeSubtasks();  assertEquals(0,query.count());  assertEquals(0,query.listPage(0,2).size());  assertNull(query.singleResult());}  }
class C{  public OutputFormat(String method,String encoding,boolean indenting){  setMethod(method);  setEncoding(encoding);  setIndenting(indenting);}  }
class C{  public boolean containsElement(String elementName){  return typeMap.containsKey(elementName);}  }
class C{  @NotNull public String findTemplate(@NotNull File file) throws IOException {  if (!file.isAbsolute()) {    file=resolveName(file.getPath());  }  String path=FileUtil.getRelativePath(myTemplateRootFolder,file);  if (path == null) {    throw new IOException("Absolute paths must start with: " + myTemplateRootFolder.getPath());  }  return ROOT + FileUtil.toSystemIndependentName(path);}  }
class C{  public boolean forEach(TShortProcedure procedure){  byte[] states=_states;  short[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  public GroupsEditQuery video(GroupsEditVideo value){  return unsafeParam("video",value);}  }
class C{  public CompositeAction(long duration,long stepTime){  super(null,duration,stepTime);}  }
class C{  public boolean isDrawHoleEnabled(){  return mDrawHole;}  }
class C{  public UniqueVertexGraph(){  UniqueVertices=new HashMap<String,Vertex>();}  }
class C{  public static void mainQuickTest2(String[] args) throws UnsupportedAudioFileException, IOException, MaryConfigurationException {  String wavBaseFolder="/project/mary/marcela/VoiceConversion/Neutral-Spike-Conversion/";  String sourceTag="source";  String targetTag="target";  String method;  int numTrainingFiles=99;  boolean isContextualGMMs=false;  int contextClassificationType=ContextualGMMParams.NO_PHONEME_CLASS;  int[] numComponents={10};  BaselinePreprocessor pp=new BaselinePreprocessor();  BaselineFeatureExtractor fe=new BaselineFeatureExtractor();  WeightedCodebookTrainerParams pa=new WeightedCodebookTrainerParams();  JointGMMTrainerParams gp=new JointGMMTrainerParams();  ContextualGMMParams cg=null;  int i;  pa.codebookHeader.codebookType=WeightedCodebookFileHeader.FRAMES;  method="F";  pa.codebookHeader.vocalTractFeature=BaselineFeatureExtractor.LSF_FEATURES;  pa.codebookHeader.sourceTag=sourceTag + method;  pa.codebookHeader.targetTag=targetTag + method;  pa.trainingBaseFolder=wavBaseFolder + "output/" + sourceTag+ "2"+ targetTag;  pa.sourceTrainingFolder=wavBaseFolder + sourceTag + "/train_"+ String.valueOf(numTrainingFiles)+ "/";  pa.targetTrainingFolder=wavBaseFolder + targetTag + "/train_"+ String.valueOf(numTrainingFiles)+ "/";  pa.indexMapFileExtension=".imf";  pa.codebookHeader.lsfParams.dimension=0;  pa.codebookHeader.lsfParams.preCoef=0.97f;  pa.codebookHeader.lsfParams.skipsize=0.010f;  pa.codebookHeader.lsfParams.winsize=0.020f;  pa.codebookHeader.lsfParams.windowType=Window.HAMMING;  gp.vocalTractFeature=pa.codebookHeader.vocalTractFeature;  gp.isContextualGMMs=isContextualGMMs;  gp.gmmEMTrainerParams.totalComponents=numComponents[0];  gp.gmmEMTrainerParams.isDiagonalCovariance=true;  gp.gmmEMTrainerParams.kmeansMaxIterations=200;  gp.gmmEMTrainerParams.kmeansMinClusterChangePercent=0.1;  gp.gmmEMTrainerParams.kmeansMinSamplesInOneCluster=50;  gp.gmmEMTrainerParams.emMinIterations=100;  gp.gmmEMTrainerParams.emMaxIterations=400;  gp.gmmEMTrainerParams.isUpdateCovariances=true;  gp.gmmEMTrainerParams.tinyLogLikelihoodChangePercent=1e-5;  gp.gmmEMTrainerParams.minCovarianceAllowed=1e-4;  gp.gmmEMTrainerParams.useNativeCLibTrainer=true;  if (gp.isContextualGMMs) {    GMMTrainerParams[] gmmParams=new GMMTrainerParams[numComponents.length];    for (i=0; i < numComponents.length; i++) {      gmmParams[i]=new GMMTrainerParams(gp.gmmEMTrainerParams);      gmmParams[i].totalComponents=numComponents[i];    }    String phoneSetFile="/project/mary/marcela/openmary/lib/modules/de/cap/phone-list-de.xml";    cg=getContextualGMMParams(phoneSetFile,gmmParams,contextClassificationType);  }  String baseFile=StringUtils.checkLastSlash(pa.trainingBaseFolder) + pa.codebookHeader.sourceTag + "_X_"+ pa.codebookHeader.targetTag;  pa.codebookFile=baseFile + "_" + String.valueOf(numTrainingFiles)+ WeightedCodebookFile.DEFAULT_EXTENSION;  pa.pitchMappingFile=baseFile + "_" + String.valueOf(numTrainingFiles)+ PitchMappingFile.DEFAULT_EXTENSION;  if (!isContextualGMMs)   gp.jointGMMFile=baseFile + "_" + String.valueOf(numTrainingFiles)+ "_"+ String.valueOf(gp.gmmEMTrainerParams.totalComponents)+ JointGMMSet.DEFAULT_EXTENSION; else {    gp.jointGMMFile=baseFile + "_" + String.valueOf(numTrainingFiles)+ "_context"+ String.valueOf(contextClassificationType);    for (i=0; i < numComponents.length; i++)     gp.jointGMMFile+="_" + String.valueOf(numComponents[i]);    gp.jointGMMFile+=JointGMMSet.DEFAULT_EXTENSION;  }  pa.isForcedAnalysis=false;  pa.codebookHeader.ptcParams.windowSizeInSeconds=0.040;  pa.codebookHeader.ptcParams.skipSizeInSeconds=0.005;  pa.codebookHeader.ptcParams.voicingThreshold=0.30;  pa.codebookHeader.ptcParams.isDoublingCheck=false;  pa.codebookHeader.ptcParams.isHalvingCheck=false;  pa.codebookHeader.ptcParams.minimumF0=40.0f;  pa.codebookHeader.ptcParams.maximumF0=400.0f;  pa.codebookHeader.ptcParams.centerClippingRatio=0.3;  pa.codebookHeader.ptcParams.cutOff1=pa.codebookHeader.ptcParams.minimumF0 - 20.0;  pa.codebookHeader.ptcParams.cutOff2=pa.codebookHeader.ptcParams.maximumF0 + 200.0;  pa.codebookHeader.energyParams.windowSizeInSeconds=0.020;  pa.codebookHeader.energyParams.skipSizeInSeconds=0.010;  TotalStandardDeviations tsd=new TotalStandardDeviations();  tsd.lsf=1.5;  tsd.f0=1.0;  tsd.duration=1.0;  tsd.energy=2.0;  pa.gaussianEliminatorParams.isActive=true;  pa.gaussianEliminatorParams.isCheckLsfOutliers=true;  pa.gaussianEliminatorParams.isEliminateTooSimilarLsf=false;  pa.gaussianEliminatorParams.isCheckF0Outliers=true;  pa.gaussianEliminatorParams.isCheckDurationOutliers=true;  pa.gaussianEliminatorParams.isCheckEnergyOutliers=true;  pa.gaussianEliminatorParams.totalStandardDeviations=new TotalStandardDeviations(tsd);  pa.kmeansEliminatorParams.isActive=false;  pa.kmeansEliminatorParams.eliminationAlgorithm=KMeansMappingEliminatorParams.ELIMINATE_MEAN_DISTANCE_MISMATCHES;  pa.kmeansEliminatorParams.distanceType=DistanceComputer.NORMALIZED_EUCLIDEAN_DISTANCE;  pa.kmeansEliminatorParams.isGlobalVariance=true;  pa.kmeansEliminatorParams.isSeparateClustering=false;  tsd.general=0.1;  pa.kmeansEliminatorParams.numClusters=30;  tsd.lsf=1.0;  tsd.f0=1.0;  tsd.duration=1.0;  tsd.energy=1.0;  pa.kmeansEliminatorParams.numClustersLsf=30;  pa.kmeansEliminatorParams.numClustersF0=50;  pa.kmeansEliminatorParams.numClustersDuration=5;  pa.kmeansEliminatorParams.numClustersEnergy=5;  pa.kmeansEliminatorParams.isCheckLsfOutliers=false;  pa.kmeansEliminatorParams.isCheckF0Outliers=false;  pa.kmeansEliminatorParams.isCheckDurationOutliers=false;  pa.kmeansEliminatorParams.isCheckEnergyOutliers=false;  pa.kmeansEliminatorParams.totalStandardDeviations=new TotalStandardDeviations(tsd);  pa.labelsToExcludeFromTraining=new String[1];  pa.labelsToExcludeFromTraining[0]="_";  JointGMMParallelTrainer t=new JointGMMParallelTrainer(pp,fe,pa,gp,cg);  t.run();}  }
class C{  public boolean isLocalConfiguration(){  return localConfiguration;}  }
class C{  private void log(final RuleTagCacheObject ruleTagCacheObject){  if (RULELOG.isInfoEnabled()) {    RULELOG.info(ruleTagCacheObject.toString());  } else   if (updateCount % 10000 == 0) {    RULELOG.warn("Total rule updates to the cache so far: " + updateCount);  }}  }
class C{  private boolean checkFileModifications() throws Exception {  long destFileTime=destFile.lastModified();  if (sourceFile.lastModified() > destFileTime) {    logger.debug("Source file was modified ");    return true;  }  Properties metadata=restoreFileModifications(metaDataFile);  if (metadata == null) {    return true;  }  SAXParserFactory parserFactory=SAXParserFactory.newInstance();  SAXParser parser=parserFactory.newSAXParser();  TimeCheckerHandler handler=new TimeCheckerHandler(baseDir,metadata);  parser.parse(sourceFile,handler);  return handler.isModified();}  }
class C{  private int determineMaxLevelRec(int level,Node v){  int newLevel=level;  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    newLevel=Math.max(newLevel,determineMaxLevelRec(level,e.getTarget()) + 1);  }  return newLevel;}  }
class C{  public static String[] splitWithoutEscaped(String str,char separatorChar,boolean retainEmpty){  int len=str.length();  if (len == 0) {    return new String[0];  }  List<String> list=new ArrayList<String>();  int i=0;  int start=0;  boolean match=false;  while (i < len) {    if (str.charAt(i) == '\\') {      match=true;      i+=2;    } else     if (str.charAt(i) == separatorChar) {      if (retainEmpty || match) {        list.add(str.substring(start,i));        match=false;      }      start=++i;    } else {      match=true;      i++;    }  }  if (retainEmpty || match) {    list.add(str.substring(start,i));  }  return list.toArray(new String[list.size()]);}  }
class C{  private Rotation composeInverseInternal(Rotation r){  return new Rotation(-r.q0 * q0 - (r.q1 * q1 + r.q2 * q2 + r.q3 * q3),-r.q1 * q0 + r.q0 * q1 + (r.q2 * q3 - r.q3 * q2),-r.q2 * q0 + r.q0 * q2 + (r.q3 * q1 - r.q1 * q3),-r.q3 * q0 + r.q0 * q3 + (r.q1 * q2 - r.q2 * q1),false);}  }
class C{  public void cancelRequests(Context context,boolean mayInterruptIfRunning){  List<WeakReference<Future<?>>> requestList=requestMap.get(context);  if (requestList != null) {    for (    WeakReference<Future<?>> requestRef : requestList) {      Future<?> request=requestRef.get();      if (request != null) {        request.cancel(mayInterruptIfRunning);      }    }  }  requestMap.remove(context);}  }
class C{  @Override public void mouseReleased(MouseEvent e){synchronized (mouseLock) {    mousePressed=false;  }}  }
class C{  @Autowired public EquipmentMessageSender(final IFilterMessageSender filterMessageSender,final IProcessMessageSender processMessageSender,@Qualifier("medDynamicTimeDeadbandFilterActivator") final IDynamicTimeDeadbandFilterActivator medDynamicTimeDeadbandFilterActivator,@Qualifier("lowDynamicTimeDeadbandFilterActivator") final IDynamicTimeDeadbandFilterActivator lowDynamicTimeDeadbandFilterActivator){  super();  this.filterMessageSender=filterMessageSender;  this.processMessageSender=processMessageSender;  this.medDynamicTimeDeadbandFilterActivator=medDynamicTimeDeadbandFilterActivator;  this.lowDynamicTimeDeadbandFilterActivator=lowDynamicTimeDeadbandFilterActivator;}  }
class C{  public synchronized VisualTable addTable(String group){  VisualTable vt=new VisualTable(this,group);  addDataGroup(group,vt,null);  return vt;}  }
class C{  @Override public Order searchById(Long id){  return sessionTemplate.selectOne(NAMESPACE + ".searchById",id);}  }
class C{  public DescriptiveStatistics copy(){  return new DescriptiveStatistics(this);}  }
class C{  public Map<String,Object> makeValid(Map<String,? extends Object> source,String mode,boolean includeInternal,List<Object> errorMessages,Locale locale){  return makeValid(source,mode,includeInternal,errorMessages,null,locale);}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  @Override public boolean deletePlayerItems(final int playerId){  Connection con=null;  try {    con=DatabaseFactory.getConnection();    PreparedStatement stmt=con.prepareStatement(DELETE_CLEAN_QUERY);    stmt.setInt(1,playerId);    stmt.execute();    stmt.close();  } catch (  Exception e) {    log.error("Error Player all items. PlayerObjId: " + playerId,e);    return false;  } finally {    DatabaseFactory.close(con);  }  return true;}  }
class C{  public static double[] fitPolynomial(double[] data,int order){  if (data == null)   throw new NullPointerException("Null data");  if (order < 0)   throw new IllegalArgumentException("Polynomial order < 0 not supported");  double[][] A=new double[data.length][order + 1];  double[][] b=new double[data.length][1];  for (int i=0; i < A.length; i++) {    if (Double.isNaN(data[i])) {      b[i][0]=0;      for (int j=0; j <= order; j++) {        A[i][j]=0;      }    } else {      b[i][0]=data[i];      double t=((double)i) / data.length;      for (int j=0; j <= order; j++) {        A[i][j]=Math.pow(t,order - j);      }    }  }  try {    Matrix x=new Matrix(A).solve(new Matrix(b));    double[] coeffs=new double[order + 1];    for (int j=0; j <= order; j++) {      coeffs[j]=x.get(j,0);    }    return coeffs;  } catch (  RuntimeException re) {    return null;  }}  }
class C{  private void clearNotifications(){  updateNotificationsNodeLabel(currentNode,Resources.getText("LBL_Notifications"));}  }
class C{  public RequestHandle head(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params)),null,responseHandler,context);}  }
class C{  public Object executeTransactionalCommandInSeparateThread(final TransactionalCommand command,final int retries) throws MithraBusinessException {  return executeTransactionalCommandInSeparateThread(command,new TransactionStyle(this.transactionTimeout,retries));}  }
class C{  public void updateColourMapEntry(int selectedRow,ColourMapData newData){  if ((selectedRow >= 0) && (selectedRow < colourMapList.size())) {    ColourMapData existingColourMapData=colourMapList.get(selectedRow);    if (existingColourMapData != null) {      existingColourMapData.update(newData);    }  }  this.fireTableDataChanged();  if (parentObj != null) {    parentObj.colourMapUpdated();  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ConditionalExpr fullCopy(){  ConditionalExpr tree=(ConditionalExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void loadString(TRSHttpRequest request,TRSStringHttpCallback callback){  mProvider.loadString(request,callback);}  }
class C{  private static void extractChainRec(Node v,Edge e,NodeSet used,List<Node> order,EdgeSet selectedEdges){  if (!used.contains(v)) {    used.add(v);    order.add(v);    for (Edge f=v.getFirstAdjacentEdge(); f != null; f=v.getNextAdjacentEdge(f)) {      if (f != e && selectedEdges.contains(f))       extractChainRec(f.getOpposite(v),f,used,order,selectedEdges);    }  } else   throw new RuntimeException("Illegal cycle at: " + v);}  }
class C{  @Override TaskDomino<T,R,U> defaultScheduler(){  return new TaskDomino<T,R,U>(super.defaultScheduler());}  }
class C{  public boolean updateOwner(String stream,SocketAddress addr){  SocketAddress oldAddr=stream2Addresses.putIfAbsent(stream,addr);  if (null != oldAddr && oldAddr.equals(addr)) {    return true;  }  if (null != oldAddr) {    if (stream2Addresses.replace(stream,oldAddr,addr)) {      logger.info("Storing ownership for stream : {}, old host : {}, new host : {}.",new Object[]{stream,oldAddr,addr});      StringBuilder sb=new StringBuilder();      sb.append("Ownership changed '").append(oldAddr).append("' -> '").append(addr).append("'");      removeOwnerFromStream(stream,oldAddr,sb.toString());      ownershipStatsLogger.onRemove(stream);      ownershipStatsLogger.onAdd(stream);    } else {      logger.warn("Ownership of stream : {} has been changed from {} to {} when storing host : {}.",new Object[]{stream,oldAddr,stream2Addresses.get(stream),addr});      return false;    }  } else {    logger.info("Storing ownership for stream : {}, host : {}.",stream,addr);    ownershipStatsLogger.onAdd(stream);  }  Set<String> streamsForHost=address2Streams.get(addr);  if (null == streamsForHost) {    Set<String> newStreamsForHost=new HashSet<String>();    streamsForHost=address2Streams.putIfAbsent(addr,newStreamsForHost);    if (null == streamsForHost) {      streamsForHost=newStreamsForHost;    }  }synchronized (streamsForHost) {    if (addr.equals(stream2Addresses.get(stream))) {      streamsForHost.add(stream);    }  }  return true;}  }
class C{  public void reset(byte b[]){  bytes=b;  curindex=(short)2;  length=(short)(((((bytes[0])) & 0xff) << 8) + (((bytes[1])) & 0xff) + 2);}  }
class C{  private static boolean isCertificateRequest(Service service){  val annotations=service.getMetadata().getAnnotations();  return (annotations != null && annotations.containsKey(REQUEST_ANNOTATION));}  }
class C{  private void initializeComponentGetters(){  mDownloadServiceConnection=newTransferenceServiceConnection();  if (mDownloadServiceConnection != null) {    bindService(new Intent(this,FileDownloader.class),mDownloadServiceConnection,Context.BIND_AUTO_CREATE);  }  mUploadServiceConnection=newTransferenceServiceConnection();  if (mUploadServiceConnection != null) {    bindService(new Intent(this,FileUploader.class),mUploadServiceConnection,Context.BIND_AUTO_CREATE);  }}  }
class C{  public Host(String eth){  this.eth=eth;}  }
class C{  public void onNativeLibraryReady(WindowAndroid windowAndroid,TabContentManager tabContentManager){  assert mLayerTitleCache == null : "Should be called once";  if (DeviceClassManager.enableLayerDecorationCache()) {    mLayerTitleCache=new LayerTitleCache(getContext());  }  mCompositorView.initNativeCompositor(SysUtils.isLowEndDevice(),windowAndroid,mLayerTitleCache,tabContentManager);  if (mLayerTitleCache != null) {    mLayerTitleCache.setResourceManager(getResourceManager());  }  if (mControlContainer != null) {    mCompositorView.getResourceManager().getDynamicResourceLoader().registerResource(R.id.control_container,mControlContainer.getToolbarResourceAdapter());  }}  }
class C{  public ObjectFactory(){}  }
class C{  public List<T> nearest(final double[] key,final int n) throws KeySizeException, IllegalArgumentException {  return nearest(key,n,null);}  }
class C{  public static Map<String,Object> prepareFind(DispatchContext dctx,Map<String,?> context){  String entityName=(String)context.get("entityName");  Delegator delegator=dctx.getDelegator();  String orderBy=(String)context.get("orderBy");  Map<String,?> inputFields=checkMap(context.get("inputFields"),String.class,Object.class);  String noConditionFind=(String)context.get("noConditionFind");  if (UtilValidate.isEmpty(noConditionFind)) {    noConditionFind=(String)inputFields.get("noConditionFind");  }  if (UtilValidate.isEmpty(noConditionFind)) {    noConditionFind=EntityUtilProperties.getPropertyValue("widget","widget.defaultNoConditionFind",delegator);  }  String filterByDate=(String)context.get("filterByDate");  if (UtilValidate.isEmpty(filterByDate)) {    filterByDate=(String)inputFields.get("filterByDate");  }  Timestamp filterByDateValue=(Timestamp)context.get("filterByDateValue");  Map<String,Object> queryStringMap=new LinkedHashMap<String,Object>();  ModelEntity modelEntity=delegator.getModelEntity(entityName);  List<EntityCondition> tmpList=createConditionList(inputFields,modelEntity.getFieldsUnmodifiable(),queryStringMap,delegator,context);  if (tmpList.size() > 0 || "Y".equals(noConditionFind)) {    if ("Y".equals(filterByDate)) {      queryStringMap.put("filterByDate",filterByDate);      if (UtilValidate.isEmpty(filterByDateValue)) {        EntityCondition filterByDateCondition=EntityUtil.getFilterByDateExpr();        tmpList.add(filterByDateCondition);      } else {        queryStringMap.put("filterByDateValue",filterByDateValue);        EntityCondition filterByDateCondition=EntityUtil.getFilterByDateExpr(filterByDateValue);        tmpList.add(filterByDateCondition);      }    }  }  EntityConditionList<EntityCondition> exprList=null;  if (tmpList.size() > 0) {    exprList=EntityCondition.makeCondition(tmpList);  }  List<String> orderByList=null;  if (UtilValidate.isNotEmpty(orderBy)) {    orderByList=StringUtil.split(orderBy,"|");  }  Map<String,Object> results=ServiceUtil.returnSuccess();  queryStringMap.put("noConditionFind",noConditionFind);  String queryString=UtilHttp.urlEncodeArgs(queryStringMap);  results.put("queryString",queryString);  results.put("queryStringMap",queryStringMap);  results.put("orderByList",orderByList);  results.put("entityConditionList",exprList);  return results;}  }
class C{  public static Map<String,Object> recalcOrderTax(DispatchContext ctx,Map<String,? extends Object> context){  LocalDispatcher dispatcher=ctx.getDispatcher();  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  String orderItemSeqId=(String)context.get("orderItemSeqId");  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Security security=ctx.getSecurity();  boolean hasPermission=OrderServices.hasPermission(orderId,userLogin,"UPDATE",security,delegator);  if (!hasPermission) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderYouDoNotHavePermissionToChangeThisOrdersStatus",locale));  }  GenericValue orderHeader=null;  try {    orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCannotGetOrderHeaderEntity",locale) + e.getMessage());  }  if (orderHeader == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorNoValidOrderHeaderFoundForOrderId",UtilMisc.toMap("orderId",orderId),locale));  }  List<GenericValue> orderTaxAdjustments=null;  try {    orderTaxAdjustments=EntityQuery.use(delegator).from("OrderAdjustment").where("orderId",orderId,"orderAdjustmentTypeId","SALES_TAX").queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,"Unable to retrieve SALES_TAX adjustments for order : " + orderId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderUnableToRetrieveSalesTaxAdjustments",locale));  }  BigDecimal totalExistingOrderTax=ZERO;  for (  GenericValue orderTaxAdjustment : orderTaxAdjustments) {    if (orderTaxAdjustment.get("amount") != null) {      totalExistingOrderTax=totalExistingOrderTax.add(orderTaxAdjustment.getBigDecimal("amount").setScale(taxDecimals,taxRounding));    }  }  BigDecimal totalManuallyAddedOrderTax=ZERO;  for (  GenericValue orderTaxAdjustment : orderTaxAdjustments) {    String comment=orderTaxAdjustment.getString("comments");    if (orderTaxAdjustment.get("amount") != null && "Y".equals(orderTaxAdjustment.getString("isManual"))) {      totalManuallyAddedOrderTax=totalManuallyAddedOrderTax.add(orderTaxAdjustment.getBigDecimal("amount").setScale(taxDecimals,taxRounding));    }  }  BigDecimal totalNewOrderTax=ZERO;  OrderReadHelper orh=new OrderReadHelper(orderHeader);  List<GenericValue> shipGroups=orh.getOrderItemShipGroups();  if (shipGroups != null) {    for (    GenericValue shipGroup : shipGroups) {      String shipGroupSeqId=shipGroup.getString("shipGroupSeqId");      List<GenericValue> validOrderItems=orh.getValidOrderItems(shipGroupSeqId);      if (validOrderItems != null) {        List<GenericValue> products=new ArrayList<GenericValue>(validOrderItems.size());        List<BigDecimal> amounts=new ArrayList<BigDecimal>(validOrderItems.size());        List<BigDecimal> shipAmts=new ArrayList<BigDecimal>(validOrderItems.size());        List<BigDecimal> itPrices=new ArrayList<BigDecimal>(validOrderItems.size());        List<BigDecimal> itQuantities=new ArrayList<BigDecimal>(validOrderItems.size());        List<GenericValue> allAdjustments=orh.getAdjustments();        List<GenericValue> orderHeaderAdjustments=OrderReadHelper.getOrderHeaderAdjustments(allAdjustments,shipGroupSeqId);        BigDecimal orderSubTotal=OrderReadHelper.getOrderItemsSubTotal(validOrderItems,allAdjustments);        BigDecimal orderShipping=OrderReadHelper.calcOrderAdjustments(orderHeaderAdjustments,orderSubTotal,false,false,true);        BigDecimal orderPromotions=OrderReadHelper.calcOrderPromoAdjustmentsBd(allAdjustments);        for (int i=0; i < validOrderItems.size(); i++) {          GenericValue orderItem=validOrderItems.get(i);          String productId=orderItem.getString("productId");          try {            products.add(i,EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne());            amounts.add(i,OrderReadHelper.getOrderItemSubTotal(orderItem,allAdjustments,true,false));            shipAmts.add(i,OrderReadHelper.getOrderItemAdjustmentsTotal(orderItem,allAdjustments,false,false,true));            itPrices.add(i,orderItem.getBigDecimal("unitPrice"));            itQuantities.add(i,orderItem.getBigDecimal("quantity"));          } catch (          GenericEntityException e) {            Debug.logError(e,"Cannot read order item entity : " + orderItem,module);            return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCannotReadTheOrderItemEntity",locale));          }        }        GenericValue shippingAddress=orh.getShippingAddress(shipGroupSeqId);        if (shippingAddress == null) {          List<GenericValue> billingAddressList=orh.getBillingLocations();          if (billingAddressList.size() > 0) {            shippingAddress=billingAddressList.get(0);          }        }        if (shippingAddress == null) {          String facilityId=orderHeader.getString("originFacilityId");          if (facilityId != null) {            GenericValue facilityContactMech=ContactMechWorker.getFacilityContactMechByPurpose(delegator,facilityId,UtilMisc.toList("SHIP_ORIG_LOCATION","PRIMARY_LOCATION"));            if (facilityContactMech != null) {              try {                shippingAddress=EntityQuery.use(delegator).from("PostalAddress").where("contactMechId",facilityContactMech.getString("contactMechId")).queryOne();              } catch (              GenericEntityException e) {                Debug.logError(e,module);              }            }          }        }        if (shippingAddress == null) {          Debug.logWarning("Not calculating tax for Order [" + orderId + "] because there is no shippingAddress, and no address on the origin facility ["+ orderHeader.getString("originFacilityId")+ "]",module);          continue;        }        Map<String,Object> serviceContext=UtilMisc.<String,Object>toMap("productStoreId",orh.getProductStoreId(),"itemProductList",products,"itemAmountList",amounts,"itemShippingList",shipAmts,"itemPriceList",itPrices,"itemQuantityList",itQuantities,"orderShippingAmount",orderShipping);        serviceContext.put("shippingAddress",shippingAddress);        serviceContext.put("orderPromotionsAmount",orderPromotions);        if (orh.getBillToParty() != null)         serviceContext.put("billToPartyId",orh.getBillToParty().getString("partyId"));        if (orh.getBillFromParty() != null)         serviceContext.put("payToPartyId",orh.getBillFromParty().getString("partyId"));        Map<String,Object> serviceResult=null;        try {          serviceResult=dispatcher.runSync("calcTax",serviceContext);        } catch (        GenericServiceException e) {          Debug.logError(e,module);          return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemOccurredInTaxService",locale));        }        if (ServiceUtil.isError(serviceResult)) {          return ServiceUtil.returnError(ServiceUtil.getErrorMessage(serviceResult));        }        List<GenericValue> orderAdj=UtilGenerics.checkList(serviceResult.get("orderAdjustments"));        List<List<GenericValue>> itemAdj=UtilGenerics.checkList(serviceResult.get("itemAdjustments"));        if (UtilValidate.isNotEmpty(orderAdj)) {          for (          GenericValue oa : orderAdj) {            if (oa.get("amount") != null) {              totalNewOrderTax=totalNewOrderTax.add(oa.getBigDecimal("amount").setScale(taxDecimals,taxRounding));            }          }        }        if (UtilValidate.isNotEmpty(itemAdj)) {          for (int i=0; i < itemAdj.size(); i++) {            List<GenericValue> itemAdjustments=itemAdj.get(i);            for (            GenericValue ia : itemAdjustments) {              if (ia.get("amount") != null) {                totalNewOrderTax=totalNewOrderTax.add(ia.getBigDecimal("amount").setScale(taxDecimals,taxRounding));              }            }          }        }      }    }    if (totalManuallyAddedOrderTax.compareTo(BigDecimal.ZERO) > 0) {      totalNewOrderTax=totalNewOrderTax.add(totalManuallyAddedOrderTax).setScale(taxDecimals,taxRounding);    }    BigDecimal orderTaxDifference=totalNewOrderTax.subtract(totalExistingOrderTax).setScale(taxDecimals,taxRounding);    if (orderTaxDifference.signum() != 0) {      Map<String,Object> createOrderAdjContext=new HashMap<String,Object>();      createOrderAdjContext.put("orderAdjustmentTypeId","SALES_TAX");      createOrderAdjContext.put("orderId",orderId);      if (UtilValidate.isNotEmpty(orderItemSeqId)) {        createOrderAdjContext.put("orderItemSeqId",orderItemSeqId);      } else {        createOrderAdjContext.put("orderItemSeqId","_NA_");      }      createOrderAdjContext.put("shipGroupSeqId","_NA_");      createOrderAdjContext.put("description","Tax adjustment due to order change");      createOrderAdjContext.put("amount",orderTaxDifference);      try {        GenericValue systemLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId","system").queryOne();        createOrderAdjContext.put("userLogin",systemLogin);      } catch (      GenericEntityException e) {        String createOrderAdjErrMsg=UtilProperties.getMessage(resource_error,"OrderErrorCallingCreateOrderAdjustmentService",locale);        Debug.logError(e,createOrderAdjErrMsg,module);        return ServiceUtil.returnError(createOrderAdjErrMsg);      }      Map<String,Object> createOrderAdjResponse=null;      try {        createOrderAdjResponse=dispatcher.runSync("createOrderAdjustment",createOrderAdjContext);      } catch (      GenericServiceException e) {        String createOrderAdjErrMsg=UtilProperties.getMessage(resource_error,"OrderErrorCallingCreateOrderAdjustmentService",locale);        Debug.logError(createOrderAdjErrMsg,module);        return ServiceUtil.returnError(createOrderAdjErrMsg);      }      if (ServiceUtil.isError(createOrderAdjResponse)) {        Debug.logError(ServiceUtil.getErrorMessage(createOrderAdjResponse),module);        return ServiceUtil.returnError(ServiceUtil.getErrorMessage(createOrderAdjResponse));      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  if (mFlywheel && !mFinished) {    float oldVel=getCurrVelocity();    float dx=(float)(mFinalX - mStartX);    float dy=(float)(mFinalY - mStartY);    float hyp=(float)Math.sqrt(dx * dx + dy * dy);    float ndx=dx / hyp;    float ndy=dy / hyp;    float oldVelocityX=ndx * oldVel;    float oldVelocityY=ndy * oldVel;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mFinished=false;  float velocity=(float)Math.sqrt(velocityX * velocityX + velocityY * velocityY);  mVelocity=velocity;  final double l=Math.log(START_TENSION * velocity / ALPHA);  mDuration=(int)(1000.0 * Math.exp(l / (DECELERATION_RATE - 1.0)));  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;  int totalDistance=(int)(ALPHA * Math.exp(DECELERATION_RATE / (DECELERATION_RATE - 1.0) * l));  mMinX=minX;  mMaxX=maxX;  mMinY=minY;  mMaxY=maxY;  mFinalX=startX + Math.round(totalDistance * coeffX);  mFinalX=Math.min(mFinalX,mMaxX);  mFinalX=Math.max(mFinalX,mMinX);  mFinalY=startY + Math.round(totalDistance * coeffY);  mFinalY=Math.min(mFinalY,mMaxY);  mFinalY=Math.max(mFinalY,mMinY);}  }
class C{  @deprecated public Transliterator safeClone(){  UnicodeFilter filter=getFilter();  if ((filter != null) && ((filter instanceof UnicodeSet))) {    filter=new UnicodeSet((UnicodeSet)filter);  }  return new RuleBasedTransliterator(getID(),this.data,filter);}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  protected MemorySection(ConfigurationSection parent,String path){  this.path=path;  this.parent=parent;  this.root=parent.getRoot();  this.fullPath=createPath(parent,path);}  }
class C{  public boolean hasOrganisationUnits(){  return organisationUnits != null && !organisationUnits.isEmpty();}  }
class C{  private void createThrowStmt(Body body,Unit oldStmt,LocalCreation lc){  RefType tp=RefType.v("java.lang.NullPointerException");  Local lcEx=lc.newLocal(tp);  SootMethodRef constructorRef=Scene.v().makeConstructorRef(tp.getSootClass(),Collections.singletonList((Type)RefType.v("java.lang.String")));  Stmt newExStmt=Jimple.v().newAssignStmt(lcEx,Jimple.v().newNewExpr(tp));  body.getUnits().insertBefore(newExStmt,oldStmt);  Stmt invConsStmt=Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(lcEx,constructorRef,Collections.singletonList(StringConstant.v("Null throw statement replaced by Soot"))));  body.getUnits().insertBefore(invConsStmt,oldStmt);  body.getUnits().swapWith(oldStmt,Jimple.v().newThrowStmt(lcEx));}  }
class C{  public static double computeTextWidth(final Font font,final String text){  TEXT.setText(text);  TEXT.setFont(font);  TEXT.setWrappingWidth(0.0D);  TEXT.setLineSpacing(0.0D);  double d=Math.min(TEXT.prefWidth(-1.0D),0.0D);  TEXT.setWrappingWidth((int)Math.ceil(d));  d=Math.ceil(TEXT.getLayoutBounds().getWidth());  TEXT.setWrappingWidth(DEFAULT_WRAPPING_WIDTH);  TEXT.setLineSpacing(DEFAULT_LINE_SPACING);  TEXT.setText(DEFAULT_TEXT);  return d;}  }
class C{  public int readLabel() throws IOException {  return readUnsignedByte();}  }
class C{  public static int convertDpToPixelSize(Context context,float dp){  float pixels=convertDpToPixel(context,dp);  final int res=(int)(pixels + 0.5f);  if (res != 0) {    return res;  } else   if (pixels == 0) {    return 0;  } else   if (pixels > 0) {    return 1;  }  return -1;}  }
class C{  @Override public void subreportStart(SubreportStartEntry subreportStartLogEntry){  throw new UnsupportedOperationException();}  }
class C{  public static int maxIndex(double[] doubles){  double maximum=0;  int maxIndex=0;  for (int i=0; i < doubles.length; i++) {    if ((i == 0) || (doubles[i] > maximum)) {      maxIndex=i;      maximum=doubles[i];    }  }  return maxIndex;}  }
class C{  public static double[] levinson(double[] r,int m){  int i;  int j;  int k;  double gap;  double gamma;  double e[]=new double[m + 1];  double l[][]=new double[m + 1][m + 1];  double[] coeffs=new double[m + 1];  for (i=0; i <= m; i++) {    for (j=i + 1; j <= m; j++) {      l[i][j]=0.;    }  }  l[0][0]=1.;  l[1][1]=1.;  l[1][0]=-r[1] / r[0];  e[0]=r[0];  e[1]=e[0] * (1. - l[1][0] * l[1][0]);  for (i=2; i <= m; i++) {    gap=0.;    for (k=0; k <= i - 1; k++) {      gap+=r[k + 1] * l[i - 1][k];    }    gamma=gap / e[i - 1];    l[i][0]=-gamma;    for (k=1; k <= i - 1; k++) {      l[i][k]=l[i - 1][k - 1] - gamma * l[i - 1][i - 1 - k];    }    l[i][i]=1.;    e[i]=e[i - 1] * (1. - gamma * gamma);  }  coeffs[0]=1.;  for (i=1; i <= m; i++) {    coeffs[i]=l[m][m - i];  }  return coeffs;}  }
class C{  public void read(IInputReader reader,long startPos) throws IOException {  reader.seek(startPos);  final int magicNumber=reader.readInt();  if (magicNumber != RMA2File.MAGIC_NUMBER) {    throw new IOException("Not an RMA file");  }  final int version=reader.readInt();  if (version != 3) {    throw new IOException("Not an RMA 3 file");  }  setFormatDef(reader.readString());  FormatDefinition formatDefinition=FormatDefinition.fromString(getFormatDef());  for (  Pair<String,FormatDefinition.Type> pair : formatDefinition.getList()) {    if (pair.getFirst().equals("Creator"))     setCreator(reader.readString()); else     if (pair.getFirst().equals("CreationDate"))     setCreationDate(reader.readLong());  }}  }
class C{  public Boolean createProduct(EntityManager em,String productId){  Boolean status=true;  Product product=new Product();  try {    em.getTransaction().begin();    product.setProductId(productId);    product.setCategory("SMARTPHONE");    product.setQuantityUnit("EA");    product.setWeightUnit("KG");    product.setPrice(BigDecimal.valueOf(Double.parseDouble("500")));    em.persist(product);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during creation of product. Detailed info: " + e);  }  return status;}  }
class C{  public final int size(){  return dis.size();}  }
class C{  public void animateX(int durationMillis){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SUBMIT_PETITION_OK(String value0){  return new SM_SYSTEM_MESSAGE(1300539,value0);}  }
class C{  String internalsprintf(String s) throws IllegalArgumentException {  String s2="";  if (conversionCharacter == 's' || conversionCharacter == 'S')   s2=printSFormat(s); else   throw new IllegalArgumentException("Cannot " + "format a String with a format using a " + conversionCharacter + " conversion character.");  return s2;}  }
class C{  public void reset(final Vector3D p,final Vector3D normal) throws MathRuntimeException {  setNormal(normal);  originOffset=-p.dotProduct(w);  setFrame();}  }
class C{  public static void scaleComponentTree(Class clazz,JComponent root){  new FormScalingUtil(clazz).scaleComponentTree(root);}  }
class C{  public Buffer merge(){  int l=0;  List<Buffer> mergeCandidates=null;  while (mergeCandidates == null && l <= maxLevel) {    final List<Buffer> bufferList=bufferMap.get(l);    if (bufferList != null && bufferList.size() > 1) {      mergeCandidates=bufferList;    } else {      l++;    }  }  if (mergeCandidates == null) {    throw new MathIllegalStateException(LocalizedCoreFormats.INTERNAL_ERROR);  }  Buffer buffer1=mergeCandidates.get(0);  Buffer buffer2=mergeCandidates.get(1);  mergeCandidates.remove(0);  mergeCandidates.remove(0);  if (bufferMap.get(l).size() == 0) {    bufferMap.remove(l);  }  buffer1.mergeWith(buffer2);  List<Buffer> bufferList=bufferMap.get(l + 1);  if (bufferList == null) {    bufferList=new ArrayList<Buffer>();    bufferMap.put(l + 1,bufferList);  }  bufferList.add(buffer1);  bufferList.add(buffer2);  if (l + 1 > maxLevel) {    maxLevel=l + 1;  }  return buffer2;}  }
class C{  public static PrettyPrint indentWithSpaces(int number){  if (number < 0) {    throw new IllegalArgumentException("number is negative");  }  char[] chars=new char[number];  Arrays.fill(chars,' ');  return new PrettyPrint(chars);}  }
class C{  public UTF8Reader(InputStream inputStream,MessageFormatter messageFormatter,Locale locale){  this(inputStream,DEFAULT_BUFFER_SIZE,messageFormatter,locale);}  }
class C{  private static ArrayList<ConstraintWidgetContainer> gatherContainers(ConstraintWidgetContainer container){  ArrayList<ConstraintWidgetContainer> containers=new ArrayList<>();  for (  ConstraintWidget widget : container.getChildren()) {    if (widget instanceof ConstraintWidgetContainer) {      containers.add((ConstraintWidgetContainer)widget);    }  }  return containers;}  }
class C{  public Bindings addOptComponent(String property,Class<? extends IValidatable> clazz,JToggleButton c){  return addOptComponent(property,clazz,c,false);}  }
class C{  public void toNativeArray(short[] dest,int offset,int len){  if (len == 0) {    return;  }  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  System.arraycopy(_data,offset,dest,0,len);}  }
class C{  @Override public void sldDataUpdated(SLDDataInterface sldData,boolean dataEditedFlag){  if (sldData != null) {    outputFormat=sldData.getOriginalFormat();    comboBox.setSelectValueKey(outputFormat.name());  }}  }
class C{  public String process(Item item) throws ProcessException {  int count=0;  Item ss=item.getItemAs(Relation.SYLLABLE);  Item firstSyllable=FIRST_SYLLABLE_PATH.findItem(item);  for (Item p=ss; p != null; p=p.getPrevious()) {    if (isAccented(p)) {      count++;    }    if (p.equalsShared(firstSyllable)) {      break;    }  }  return Integer.toString(rail(count));}  }
class C{  @Override public XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier) throws XNIException, IOException {  String pubId=resourceIdentifier.getPublicId();  String sysId=resourceIdentifier.getExpandedSystemId();  if (pubId == null && sysId == null)   return null;  if (fEntityResolver != null && resourceIdentifier != null) {    try {      InputSource inputSource=fEntityResolver.resolveEntity(pubId,sysId);      if (inputSource != null) {        String publicId=inputSource.getPublicId();        String systemId=inputSource.getSystemId();        String baseSystemId=resourceIdentifier.getBaseSystemId();        InputStream byteStream=inputSource.getByteStream();        Reader charStream=inputSource.getCharacterStream();        String encoding=inputSource.getEncoding();        XMLInputSource xmlInputSource=new XMLInputSource(publicId,systemId,baseSystemId);        xmlInputSource.setByteStream(byteStream);        xmlInputSource.setCharacterStream(charStream);        xmlInputSource.setEncoding(encoding);        return xmlInputSource;      }    } catch (    SAXException e) {      Exception ex=e.getException();      if (ex == null) {        ex=e;      }      throw new XNIException(ex);    }  }  return null;}  }
class C{  protected PollsGetByIdQuery pollId(int value){  return unsafeParam("poll_id",value);}  }
class C{  public MapObjects(PokemonGo api){  this.api=api;}  }
class C{  @NotNull public ImageDescription describeImage(@NotNull InputStream image){  return computerVisionBuilder.describeImage(1,image).withResult();}  }
class C{  public String toXml(){  Integer totalInt=txTotalAmount.multiply(new BigDecimal(100)).intValue();  StringBuffer xml=new StringBuffer("<ewaygateway>");  xml.append(createNode("ewayCustomerID",txCustomerID));  xml.append(createNode("ewayTotalAmount","" + totalInt));  xml.append(createNode("ewayCustomerInvoiceRef",txCustomerInvoiceRef));  xml.append(createNode("ewayCardExpiryMonth",txCardExpiryMonth));  xml.append(createNode("ewayCardExpiryYear",txCardExpiryYear));  if (requestMethod != REQUEST_METHOD_REFUND) {    xml.append(createNode("ewayCardHoldersName",txCardHoldersName));    xml.append(createNode("ewayCardNumber",txCardNumber));    xml.append(createNode("ewayTrxnNumber",txTrxnNumber));    xml.append(createNode("ewayCustomerInvoiceDescription",txCustomerInvoiceDescription));    xml.append(createNode("ewayCustomerFirstName",txCustomerFirstName));    xml.append(createNode("ewayCustomerLastName",txCustomerLastName));    xml.append(createNode("ewayCustomerEmail",txCustomerEmailAddress));    xml.append(createNode("ewayCustomerAddress",txCustomerAddress));    xml.append(createNode("ewayCustomerPostcode",txCustomerPostcode));  }  if (requestMethod == REQUEST_METHOD_CVN || requestMethod == REQUEST_METHOD_BEAGLE) {    xml.append(createNode("ewayCVN",txCVN));  }  xml.append(createNode("ewayOption1",txOption1));  xml.append(createNode("ewayOption2",txOption2));  xml.append(createNode("ewayOption3",txOption3));  if (requestMethod == REQUEST_METHOD_BEAGLE) {    xml.append(createNode("ewayCustomerIPAddress",txCustomerIPAddress));    xml.append(createNode("ewayCustomerBillingCountry",txCustomerBillingCountry));  }  if (requestMethod == REQUEST_METHOD_REFUND) {    xml.append(createNode("ewayOriginalTrxnNumber",txTrxnNumber));    xml.append(createNode("ewayRefundPassword",txRefundPassword));  }  xml.append("</ewaygateway>");  if (isTestMode()) {    Debug.logInfo("[eWay Request] : " + xml.toString(),module);  }  return xml.toString();}  }
class C{  public static void registerOreGen(ResourceLocation id,IBlockState ore,IBlockState[] replaceables,int veinSize,int minY,int maxY,int[] dimensions,int attempts){  List<IBlockState> replaceableList=Arrays.asList(replaceables);  WorldGenMinable generator=new WorldGenMinable(ore,veinSize,null);  registerWorldGen(id,null);}  }
class C{  public int compareTo(HumanTime t){  return delta == t.delta ? 0 : (delta < t.delta ? -1 : 1);}  }
class C{  protected void initInstances(Operation post,ServiceDocument... states){  initInstances(post,true,true,states);}  }
class C{  private void processNewLedgerEntry(final LedgerReadPosition readPosition,final LedgerEntry ledgerEntry,final String reason,boolean envelopeEntries,long startSequenceId){  try {    Entry.Reader reader=Entry.newBuilder().setLogSegmentInfo(readPosition.getLogSegmentSequenceNumber(),startSequenceId).setEntryId(ledgerEntry.getEntryId()).setEnvelopeEntry(envelopeEntries).deserializeRecordSet(deserializeRecordSet).setInputStream(ledgerEntry.getEntryInputStream()).buildReader();    while (true) {      LogRecordWithDLSN record=reader.nextRecord();      if (null == record) {        break;      }      if (lastReadAheadDLSN.compareTo(record.getDlsn()) >= 0) {        LOG.error("Out of order reads last {} : curr {}",lastReadAheadDLSN,record.getDlsn());        throw new LogReadException("Out of order reads");      }      lastReadAheadDLSN=record.getDlsn();      if (record.isControl()) {        continue;      }      lastReadAheadUserDLSN=lastReadAheadDLSN;      if (minActiveDLSN.get().compareTo(record.getDlsn()) > 0) {        continue;      }      if (traceDeliveryLatencyEnabled && !suppressDeliveryLatency) {        long currentMs=System.currentTimeMillis();        long deliveryMs=currentMs - record.getTransactionId();        if (deliveryMs >= 0) {          readAheadDeliveryLatencyStat.registerSuccessfulEvent(deliveryMs);        } else {          negativeReadAheadDeliveryLatencyStat.registerSuccessfulEvent(-deliveryMs);        }        if (deliveryMs > deliveryLatencyWarnThresholdMillis) {          LOG.warn("Record {} for stream {} took long time to deliver : publish time = {}, available time = {}, delivery time = {}, reason = {}.",new Object[]{record.getDlsn(),streamName,record.getTransactionId(),currentMs,deliveryMs,reason});        }      }      readAheadRecords.add(record);      cacheBytes.addAndGet(record.getPayload().length);    }  } catch (  InvalidEnvelopedEntryException ieee) {    alertStatsLogger.raise("Found invalid enveloped entry on stream {} : ",streamName,ieee);    setLastException(ieee);  }catch (  IOException exc) {    setLastException(exc);  }}  }
class C{  public XPointerErrorHandler(PrintWriter out){  fOut=out;}  }
class C{  public static Timestamp adjustTimestamp(Timestamp stamp,int adjType,int adjQuantity,TimeZone timeZone,Locale locale){  Calendar tempCal=toCalendar(stamp,timeZone,locale);  tempCal.add(adjType,adjQuantity);  return new Timestamp(tempCal.getTimeInMillis());}  }
class C{  public IsBetweenExtended(){  super(null,null,null);}  }
class C{  public Builder withLeaseId(long leaseId){  checkArgument(leaseId >= 0,"leaseId should greater than or equal to zero: leaseId=%s",leaseId);  this.leaseId=leaseId;  return this;}  }
class C{  public static boolean equalStrings(String string1,String string2){  return string1.toLowerCase().replace(" ","").replace(",","").equals(string2.toLowerCase().replace(" ","").replace(",",""));}  }
class C{  public static boolean shuffle(Object[] objArray){  if (objArray == null) {    return false;  }  return shuffle(objArray,getRandom(objArray.length));}  }
class C{  @Override public void endDocument(){  super.endDocument();}  }
class C{  public boolean isPrintHeader(){  return m_printHeader;}  }
class C{  public void init$Children(){}  }
class C{  public LuceneSearcher(){  this(new RAMDirectory(),FIELD,false);}  }
class C{  public void updateOneStep(){  Runnable batch=myBatchQueue.poll();  if (batch != null) {    batch.run();  }}  }
class C{  public LikesGetListQueryWithExtended(VkApiClient client,UserActor actor,LikesType type){  super(client,"likes.getList",GetListExtendedResponse.class);  accessToken(actor.getAccessToken());  type(type);  extended(true);}  }
class C{  @ObjectiveCName("init:") public RecordMergeStrategyException(String error){  this(-1,null,-1,null,error);}  }
class C{  public static ITextComponent handle(ITextComponent message,Side side){  final MessageEvent.Snackbar event=new MessageEvent.Snackbar(message,side);  return OpenModLoader.getEventBus().post(event) ? event.getMessage() : null;}  }
class C{  public boolean isDashedHighlightLineEnabled(){  return mHighlightDashPathEffect == null ? false : true;}  }
class C{  public void saveAs(){  throw new UnsupportedOperationException("Save as not supported");}  }
class C{  @Override public int hashCode(){  if (isNaN()) {    return 542;  }  return 134 * (37 * MathUtils.hash(theta) + MathUtils.hash(phi));}  }
class C{  private <T>T send(String method,@Nullable Object entity){  try {    if (entity == null) {      builder().method(method);    } else {      builder().method(method,entity);    }    return null;  } catch (  UniformInterfaceException e) {    throw asEmoClientException(e);  }}  }
class C{  public static double rootMeansSquaredError(double[] real,double[] predicted){  double ret=0.0;  for (int i=0; i < real.length; i++) {    ret+=Math.pow((real[i] - predicted[i]),2);  }  return Math.sqrt(ret / real.length);}  }
class C{  public WyporiumTradeCursor queryWyporiumTrades(){  QueryHelper qh=new QueryHelper();  qh.Columns=null;  qh.Table=S.TABLE_WYPORIUM_TRADE;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new WyporiumTradeCursor(wrapJoinHelper(builderWyporiumTrade(),qh));}  }
class C{  public boolean isSimilarTo(final Line line){  final double angle=Vector3D.angle(direction,line.direction);  return ((angle < tolerance) || (angle > (FastMath.PI - tolerance))) && contains(line.zero);}  }
class C{  @Override public boolean copyNodes(NodeInterface destinationTreeNode,Map<NodeInterface,List<SLDDataInterface>> droppedDataMap){  return false;}  }
class C{  public static void init(Context context){  if (sCameraManager == null) {    sCameraManager=new CameraManager(context);  }}  }
class C{  public static NameValuePair[] split_metadata(String meta_buff,String recordSeperator,String filedSeperator){  String[] rows;  String[] cols;  NameValuePair[] meta_list;  rows=meta_buff.split(recordSeperator);  meta_list=new NameValuePair[rows.length];  for (int i=0; i < rows.length; i++) {    cols=rows[i].split(filedSeperator,2);    meta_list[i]=new NameValuePair(cols[0]);    if (cols.length == 2) {      meta_list[i].setValue(cols[1]);    }  }  return meta_list;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CAN_NOT_GET_LORE_ITEM(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300422,descriptionId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_CANT_SUMMON_STATE(String value0){  return new SM_SYSTEM_MESSAGE(1400733,value0);}  }
class C{  public static final void shuffle(double[] a,Random r){  shuffle(a,0,a.length,r);}  }
class C{  @Override public void onWebsocketMessageFragment(WebSocket conn,Framedata frame){}  }
class C{  @Override public XSModel loadURI(String uri){  try {    fGrammarPool.clear();    return ((XSGrammar)fSchemaLoader.loadGrammar(new XMLInputSource(null,uri,null))).toXSModel();  } catch (  Exception e) {    fSchemaLoader.reportDOMFatalError(e);    return null;  }}  }
class C{  public XMLResourceIdentifierImpl(String publicId,String literalSystemId,String baseSystemId,String expandedSystemId){  setValues(publicId,literalSystemId,baseSystemId,expandedSystemId,null);}  }
class C{  public static void isNotNull(Object object,String message){  if (object == null)   throw new AssertionFailedException("null argument:" + message);}  }
class C{  public void writeChar(char a) throws IOException {  io.write((byte)(a >> 8));  io.write((byte)(a));}  }
class C{  public void testSingleLineFalse() throws Exception {  deleteManifest();  myFixture.copyFileToProject(BASE_PATH_GLOBAL + "deprecation/AndroidManifest.xml","AndroidManifest.xml");  myFixture.enableInspections(new AndroidLintInspectionToolProvider.AndroidLintDeprecatedInspection());  myFixture.configureFromExistingVirtualFile(myFixture.copyFileToProject(BASE_PATH + "singleLineFalse.xml","res/layout/singleLineFalse.xml"));  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,"Replace singleLine=\"true\" with maxLines=\"1\"");  assertNull(action);}  }
class C{  public NewsfeedSaveListQuery sourceIds(List<Integer> value){  return unsafeParam("source_ids",value);}  }
class C{  public void removeObserver(final FileAlterationObserver observer){  if (observer != null) {    while (observers.remove(observer)) {    }  }}  }
class C{  public S2CellId next(){  return new S2CellId(id + (lowestOnBit() << 1));}  }
class C{  public boolean requestInterceptPreScroll(CoordinatorLayout parent){  return false;}  }
class C{  public String readLine(){  String line;  try {    line=scanner.nextLine();  } catch (  NoSuchElementException e) {    line=null;  }  return line;}  }
class C{  private void addMemberToReplGroup(String ownerMemberName,String targetMemberName,String targetMemberURL) throws ClusterException {  Element memElem=findMemberInReplGroup(ownerMemberName);  if (memElem == null)   throw new ClusterException(ownerMemberName + " couldn't found in no replication group.");  Element memberElem=m_rootDoc.createElement(MEMBER_TAG);  Element memberNameElem=m_rootDoc.createElement(MEMBER_NAME_TAG);  Text textNode=m_rootDoc.createTextNode(targetMemberName);  Element groupMemNode=(Element)memElem.getParentNode();  groupMemNode.appendChild(memberElem);  memberElem.appendChild(memberNameElem).appendChild(textNode);  Node rootClusMemNode=m_rootDoc.getElementsByTagName(CLUSTER_MEMBERS_TAG).item(0);  Node clusMemElem=memberElem.cloneNode(true);  Element memberElemURL=m_rootDoc.createElement(MEMBER_URL_TAG);  Text textURL=m_rootDoc.createTextNode(targetMemberURL);  rootClusMemNode.appendChild(clusMemElem).appendChild(memberElemURL).appendChild(textURL);}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  public Zdiagmat(Z1 val){  Parameters.BaseIndexNotChangeable=true;  bx=Parameters.BaseIndex;  order=val.re.length;  getProperties();  re=new double[n];  im=new double[n];  for (int i=0; i < n; i++) {    re[i]=val.re[i];    im[i]=val.im[i];  }}  }
class C{  public DataParseException(String message){  super(message);}  }
class C{  public String process(Item seg) throws ProcessException {  if (seg == null) {    return "0";  } else   if (seg.getPrevious() == null) {    return seg.getFeatures().getObject("end").toString();  } else {    return Float.toString(seg.getFeatures().getFloat("end") - seg.getPrevious().getFeatures().getFloat("end"));  }}  }
class C{  public SortScan(List<TempTable> runs,RecordComparator comp){  this.comp=comp;  s1=(UpdateScan)runs.get(0).open();  s1.beforeFirst();  hasMore1=s1.next();  if (runs.size() > 1) {    s2=(UpdateScan)runs.get(1).open();    s2.beforeFirst();    hasMore2=s2.next();  }}  }
class C{  private Solver(final double[][] lTData){  this.lTData=lTData;}  }
class C{  private void addSelectorForProtocol(Properties settings,String protocol,ProtocolDispatchSelector ps){  String proxy=settings.getProperty(protocol);  if (proxy != null) {    FixedProxySelector protocolSelector=ProxyUtil.parseProxySettings(proxy);    ps.setSelector(protocol,protocolSelector);  }}  }
class C{  public DistributedLogNamespaceBuilder regionId(int regionId){  this._regionId=regionId;  return this;}  }
class C{  public static Zmat o(Zmat A){  Zmat B=new Zmat(A.nrow,A.ncol);  for (int i=0; i < A.nrow; i++)   for (int j=0; j < A.ncol; j++) {    B.re[i][j]=-A.re[i][j];    B.im[i][j]=-A.im[i][j];  }  return B;}  }
class C{  private static void doCopyDirectory(File srcDir,File destDir,FileFilter filter,boolean preserveFileDate,List<String> exclusionList) throws IOException {  File[] srcFiles=filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);  if (srcFiles == null) {    throw new IOException("Failed to list contents of " + srcDir);  }  if (destDir.exists()) {    if (destDir.isDirectory() == false) {      throw new IOException("Destination '" + destDir + "' exists but is not a directory");    }  } else {    if (!destDir.mkdirs() && !destDir.isDirectory()) {      throw new IOException("Destination '" + destDir + "' directory cannot be created");    }  }  if (destDir.canWrite() == false) {    throw new IOException("Destination '" + destDir + "' cannot be written to");  }  for (  File srcFile : srcFiles) {    File dstFile=new File(destDir,srcFile.getName());    if (exclusionList == null || !exclusionList.contains(srcFile.getCanonicalPath())) {      if (srcFile.isDirectory()) {        doCopyDirectory(srcFile,dstFile,filter,preserveFileDate,exclusionList);      } else {        doCopyFile(srcFile,dstFile,preserveFileDate);      }    }  }  if (preserveFileDate) {    destDir.setLastModified(srcDir.lastModified());  }}  }
class C{  public void loadData(String classificationName,Integer classId,String name,boolean refSeqOnly,ProgressListener progressListener) throws CanceledException, IOException {  this.classificationName=classificationName;  this.classId=classId;  this.className=name;  int totalReads=0;  int totalReadsUsed=0;  reference2ReadMatchPairs.clear();  Set<String> matchesSeenForGivenRead=new HashSet<>();  progressListener.setSubtask("Processing '" + name + "'");  try (IReadBlockIterator it=doc.getMeganFile().getDataConnector().getReadsIterator(classificationName,classId,0,10,true,true)){    progressListener.setMaximum(it.getMaximumProgress());    progressListener.setProgress(0);    while (it.hasNext()) {      IReadBlock readBlock=copy(it.next(),new String[]{classificationName});      totalReads++;      boolean readUsed=false;      for (      IMatchBlock matchBlock : readBlock.getMatchBlocks()) {        if (matchBlock.getBitScore() >= doc.getMinScore() && matchBlock.getExpected() <= doc.getMaxExpected() && matchBlock.getPercentIdentity() >= doc.getMinPercentIdentity()) {          if (!refSeqOnly || (matchBlock.getRefSeqId() != null && matchBlock.getRefSeqId().length() > 0)) {            String key=Basic.getFirstLine(matchBlock.getText());            if (!matchesSeenForGivenRead.contains(key)) {              matchesSeenForGivenRead.add(key);              List<Pair<IReadBlock,IMatchBlock>> pairs=reference2ReadMatchPairs.get(key);              if (pairs == null) {                pairs=new LinkedList<>();                reference2ReadMatchPairs.put(key,pairs);              }              pairs.add(new Pair<>(readBlock,matchBlock));              readUsed=true;            }          }        }      }      matchesSeenForGivenRead.clear();      progressListener.incrementProgress();      if (readUsed)       totalReadsUsed++;    }  }   System.err.println(String.format("Reads total: %,10d",totalReads));  System.err.println(String.format("Reads used:  %,10d ",totalReadsUsed));  System.err.println(String.format("References:  %,10d",reference2ReadMatchPairs.keySet().size()));}  }
class C{  private boolean freeMemorySizeForAddingCache(long requiredSize){  boolean memoryAvailable=false;  if (lruCacheMemorySize > 0) {    if (isSizeAvailableToLoadColumnDictionary(requiredSize)) {      memoryAvailable=true;    } else {synchronized (lruCacheMap) {        List<String> keysToBeRemoved=getKeysToBeRemoved(requiredSize);        for (        String cacheKey : keysToBeRemoved) {          removeKey(cacheKey);        }        if (isSizeAvailableToLoadColumnDictionary(requiredSize)) {          memoryAvailable=true;        }      }    }  } else {    memoryAvailable=true;  }  return memoryAvailable;}  }
class C{  public final synchronized void close(AionServerPacket closePacket,boolean forced){  if (isWriteDisabled()) {    return;  }  log.info("sending packet: " + closePacket + " and closing connection after that.");  pendingClose=true;  isForcedClosing=forced;  sendMsgQueue.clear();  sendMsgQueue.addLast(closePacket);  enableWriteInterest();}  }
class C{  public void disconnect(){  if (mService == null)   return;  mContext.unbindService(mConnection);  mContext=null;  mService=null;}  }
class C{  public void onOperationsBatchSynchronization(OperationsBatchData batchData){}  }
class C{  @Override public void completed(Exception exception,long ledgerId,long entryId){  if (exception != null) {    producer.cnx.ctx().channel().eventLoop().execute(null);  } else {    if (log.isDebugEnabled()) {      log.debug("[{}] [{}] [{}] triggered send callback. cnx {}, sequenceId {}",producer.topic,producer.producerName,producer.producerId,producer.cnx.clientAddress(),sequenceId);    }    this.ledgerId=ledgerId;    this.entryId=entryId;    producer.cnx.ctx().channel().eventLoop().execute(this);  }}  }
class C{  private static long computeVisibilitySortingValue(float area,float orderSortingValue,float stackVisibility){  return (long)(area * stackVisibility - orderSortingValue);}  }
class C{  public void reportBadSelectors(DiagCollector collector,ConfigLocationResolver configLocationResolver,String category){  reportBadSelectors(collector,configLocationResolver,category,"");}  }
class C{  public static final void changeGroupRules(PlayerGroup group,LootGroupRules lootRules){  group.onEvent(new ChangeGroupLootRulesEvent(group,lootRules));}  }
class C{  private static Cachable fromBytes(byte[] b) throws IOException, ClassNotFoundException {  ByteArrayInputStream in=null;  ObjectInputStream d=null;  try {    in=new ByteArrayInputStream(b);    d=new ObjectInputStream(in);    return (Cachable)d.readObject();  }  finally {    if (d != null) {      d.close();    }    if (in != null) {      in.close();    }  }}  }
class C{  private void tell(List<Entry> bad){  for (Iterator<Entry> iter=bad.iterator(); iter.hasNext(); ) {    Entry e=iter.next();    if (e.renewalsDone()) {      final DesiredExpirationListener del=e.desiredExpirationListener();      if (del != null) {        del.expirationReached(new LeaseRenewalEvent(this,e.lease,e.expiration,null));      }      continue;    }    e.listener.notify(new LeaseRenewalEvent(this,e.lease,e.expiration,e.ex));  }}  }
class C{  public static double intPow(double b,int e){  if (e == 0) {    return 1;  }  float result=1;  double currPow=b;  do {    if ((e & 1) == 1)     result*=currPow;    currPow=currPow * currPow;    e>>=1;  } while (e > 0);  return result;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public final void updateAndValidate(final Long dataTagId,final Object value,final String valueDescription,final Timestamp timestamp){  if (tagCache.hasKey(dataTagId)) {    tagCache.acquireWriteLockOnKey(dataTagId);    try {      T dataTag=tagCache.get(dataTagId);      updateAndValidate(dataTag,value,valueDescription,timestamp);      tagCache.put(dataTag.getId(),dataTag);    } catch (    CacheElementNotFoundException cacheEx) {      LOGGER.error("Unable to locate tag in cache (id " + dataTagId + ") - no update performed.",cacheEx);    } finally {      tagCache.releaseWriteLockOnKey(dataTagId);    }  } else {    LOGGER.error("Unable to locate tag in conrolTag and dataTag cache (id " + dataTagId + ") - no update performed.");  }}  }
class C{  public SkillCursor querySkillFromTree(long id){  return mHelper.querySkillFromTree(id);}  }
class C{  public PlacesGetCheckinsQuery friendsOnly(Boolean value){  return unsafeParam("friends_only",value);}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] enclosingRectangle=image.getEnclosingRectangle();  if (enclosingRectangle == null) {    throw NotFoundException.getNotFoundInstance();  }  int left=enclosingRectangle[0];  int top=enclosingRectangle[1];  int width=enclosingRectangle[2];  int height=enclosingRectangle[3];  BitMatrix bits=new BitMatrix(MATRIX_WIDTH,MATRIX_HEIGHT);  for (int y=0; y < MATRIX_HEIGHT; y++) {    int iy=top + (y * height + height / 2) / MATRIX_HEIGHT;    for (int x=0; x < MATRIX_WIDTH; x++) {      int ix=left + (x * width + width / 2 + (y & 0x01) * width / 2) / MATRIX_WIDTH;      if (image.get(ix,iy)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  TaxonomicProfileDialog viewer=(TaxonomicProfileDialog)getParent();  viewer.setMethod(TaxonomicProfileDialog.ProfileMethod.ReadSpreading);}  }
class C{  public boolean isOpen(){  if (null != binaryOut && null != dataOutputStream) {    return true;  }  return false;}  }
class C{  @Override public void onActivityResult(int requestCode,int resultCode,Intent data){  super.onActivityResult(requestCode,resultCode,data);  if (requestCode == REQUEST_CODE_AUTOCOMPLETE) {    if (resultCode == RESULT_OK) {      Place place=PlaceAutocomplete.getPlace(mContext,data);      LatLng latLong;      latLong=place.getLatLng();      CameraPosition cameraPosition=new CameraPosition.Builder().target(latLong).zoom(19f).tilt(70).build();      if (ActivityCompat.checkSelfPermission(this,Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this,Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {        return;      }      mMap.setMyLocationEnabled(true);      mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));    }  } else   if (resultCode == PlaceAutocomplete.RESULT_ERROR) {    Status status=PlaceAutocomplete.getStatus(mContext,data);  } else   if (resultCode == RESULT_CANCELED) {  }}  }
class C{  public static void cleanupTemporaryWorlds(String currentWorld){  List<SaveFormatComparator> saveList;  ISaveFormat isaveformat=Minecraft.getMinecraft().getSaveLoader();  isaveformat.flushCache();  try {    saveList=isaveformat.getSaveList();  } catch (  AnvilConverterException e) {    e.printStackTrace();    return;  }  String searchString=tempMark + AddressHelper.getMissionControlPort() + "_";  for (  SaveFormatComparator s : saveList) {    String folderName=s.getFileName();    if (folderName.startsWith(searchString) && !folderName.equals(currentWorld)) {      isaveformat.deleteWorldDirectory(folderName);    }  }}  }
class C{  @Override public void startCDATA(Augmentations augs) throws XNIException {}  }
class C{  public static ArrayList<String> matches(String text,int results){  ArrayList<String> urls=new ArrayList<String>();  String[] splitString=(text.split(" "));  for (  String string : splitString) {    try {      URL item=new URL(string);      urls.add(item.toString());    } catch (    Exception e) {    }    if (results == FIRST && urls.size() > 0)     break;  }  return urls;}  }
class C{  int onUpdate(Class<?> modelClass,long id,ContentValues values){  if (values.size() > 0) {    return mDatabase.update(getTableName(modelClass),values,"id = " + id,null);  }  return 0;}  }
class C{  public static void text(double x,double y,String text,double degrees){  if (text == null)   throw new NullPointerException();  double xs=scaleX(x);  double ys=scaleY(y);  offscreen.rotate(Math.toRadians(-degrees),xs,ys);  text(x,y,text);  offscreen.rotate(Math.toRadians(+degrees),xs,ys);}  }
class C{  @Override public void confirm(){  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(yesButton));}  }
class C{  public static void v(String c,String s){  if (isEnable()) {    if (s == null)     s="\"NULL\"";    Log.v(c,s);  }}  }
class C{  public AccessJwtToken createAccessJwtToken(UserContext userContext){  if (StringUtils.isBlank(userContext.getUsername()))   throw new IllegalArgumentException("Cannot create JWT Token without username");  if (userContext.getAuthorities() == null || userContext.getAuthorities().isEmpty())   throw new IllegalArgumentException("User doesn't have any privileges");  Claims claims=Jwts.claims().setSubject(userContext.getUsername());  claims.put("scopes",userContext.getAuthorities().stream().map(null).collect(Collectors.toList()));  DateTime currentTime=new DateTime();  String token=Jwts.builder().setClaims(claims).setIssuer(settings.getTokenIssuer()).setIssuedAt(currentTime.toDate()).setExpiration(currentTime.plusMinutes(settings.getTokenExpirationTime()).toDate()).signWith(SignatureAlgorithm.HS512,settings.getTokenSigningKey()).compact();  return new AccessJwtToken(token,claims);}  }
class C{  public CardinalityAggregation withByRow(boolean byRow){  return new CardinalityAggregation(getName(),dimensions,byRow);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SignetBurst_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200562,num0,skilltarget,skillname);}  }
class C{  private boolean isAfterParent(final BSPTree<Euclidean1D> node){  final BSPTree<Euclidean1D> parent=node.getParent();  if (parent == null) {    return false;  } else {    return node == childAfter(parent);  }}  }
class C{  @Override protected void drawBlurredBitmap(Canvas canvas,Bitmap blurredBitmap,int overlayColor){  if (blurredBitmap != null) {    mRectF.right=getWidth();    mRectF.bottom=getHeight();    mPaint.reset();    mPaint.setAntiAlias(true);    BitmapShader shader=new BitmapShader(blurredBitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);    Matrix matrix=new Matrix();    matrix.postScale(mRectF.width() / blurredBitmap.getWidth(),mRectF.height() / blurredBitmap.getHeight());    shader.setLocalMatrix(matrix);    mPaint.setShader(shader);    canvas.drawOval(mRectF,mPaint);    mPaint.reset();    mPaint.setAntiAlias(true);    mPaint.setColor(overlayColor);    canvas.drawOval(mRectF,mPaint);  }}  }
class C{  private void clustering(){  clustering(CLUSTER_DEFAULT_SIZE,"Average");}  }
class C{  protected final void startNamespaceMapping() throws SAXException {  int count=fNamespaceContext.getDeclaredPrefixCount();  if (count > 0) {    String prefix=null;    String uri=null;    for (int i=0; i < count; i++) {      prefix=fNamespaceContext.getDeclaredPrefixAt(i);      uri=fNamespaceContext.getURI(prefix);      fContentHandler.startPrefixMapping(prefix,(uri == null) ? "" : uri);    }  }}  }
class C{  private boolean readyPlayer(String file){  if (playMode()) {switch (this.state) {case MEDIA_NONE:      if (this.player == null) {        this.player=new MediaPlayer();      }    try {      this.loadAudioFile(file);    } catch (    Exception e) {      sendErrorStatus(MEDIA_ERR_ABORTED);    }  return false;case MEDIA_LOADING:Log.d(LOG_TAG,"AudioPlayer Loading: startPlaying() called during media preparation: " + STATE.MEDIA_STARTING.ordinal());this.prepareOnly=false;return false;case MEDIA_STARTING:case MEDIA_RUNNING:case MEDIA_PAUSED:return true;case MEDIA_STOPPED:if (this.audioFile.compareTo(file) == 0) {if (this.recorder != null && player == null) {this.player=new MediaPlayer();this.prepareOnly=false;try {this.loadAudioFile(file);} catch (Exception e) {sendErrorStatus(MEDIA_ERR_ABORTED);}return false;} else {player.seekTo(0);player.pause();return true;}} else {this.player.reset();try {this.loadAudioFile(file);} catch (Exception e) {sendErrorStatus(MEDIA_ERR_ABORTED);}return false;}default :Log.d(LOG_TAG,"AudioPlayer Error: startPlaying() called during invalid state: " + this.state);sendErrorStatus(MEDIA_ERR_ABORTED);}}return false;}  }
class C{  public MainFrame(){  initComponents();  saveAsItem.setEnabled(itemIsEnable);  forceLayoutItem.setEnabled(itemIsEnable);  CircleLayoutItem.setEnabled(itemIsEnable);  randomLayoutItem.setEnabled(itemIsEnable);  gridLayoutItem.setEnabled(itemIsEnable);  fruchtermanLayoutItem.setEnabled(itemIsEnable);  radialTreeLayout.setEnabled(itemIsEnable);  nodeLinkTreeLayoutItem.setEnabled(itemIsEnable);  noTextItem.setEnabled(itemIsEnable);  textOnlyItem.setEnabled(itemIsEnable);  textAndImageItem.setEnabled(itemIsEnable);  rectangleItem.setEnabled(itemIsEnable);  roundItem.setEnabled(itemIsEnable);  roundRectangleItem.setEnabled(itemIsEnable);  curveItem.setEnabled(itemIsEnable);  straightItem.setEnabled(itemIsEnable);  zoomToFitItem.setEnabled(itemIsEnable);  switchButton.setEnabled(itemIsEnable);  backgroundButton.setEnabled(itemIsEnable);}  }
class C{  @Override public void monitor(Object proxy,ServiceID serviceID) throws Exception {  spaceProxy=proxy;  super.monitor(proxy,serviceID);}  }
class C{  private double[][][][] loadPdfs(int numState,InputStream pdfStream,PdfFileFormat fileFormat) throws IOException, MaryConfigurationException {  DataInputStream data_in;  int i, j, k, l, numDurPdf, lf0Stream;  double vw, uvw;  int vsize;  int numPdf[];  int numStream;  int numMSDFlag;  double pdf[][][][]=null;  if (fileFormat == PdfFileFormat.dur || fileFormat == PdfFileFormat.join) {    data_in=new DataInputStream(new BufferedInputStream(pdfStream));    Log.d(Mary.LOG,"loadPdfs reading model of type " + fileFormat);    numMSDFlag=data_in.readInt();    numStream=data_in.readInt();    vectorSize=data_in.readInt();    numState=numStream;    if (numState < 0)     throw new MaryConfigurationException("loadPdfs: #HMM states must be positive value.");    numDurPdf=data_in.readInt();    Log.d(Mary.LOG,"loadPdfs: numPdf[state:0]=" + numDurPdf);    pdf=new double[1][numDurPdf][1][2 * numState];    vsize=(2 * numState);    for (i=0; i < numDurPdf; i++) {      for (j=0; j < numState; j++) {        pdf[0][i][0][j]=data_in.readFloat();        pdf[0][i][0][j + numState]=data_in.readFloat();      }    }    data_in.close();    data_in=null;  } else   if (fileFormat == PdfFileFormat.lf0) {    data_in=new DataInputStream(new BufferedInputStream(pdfStream));    Log.d(Mary.LOG,"loadPdfs reading model of type " + fileFormat);    numMSDFlag=data_in.readInt();    numStream=data_in.readInt();    vectorSize=data_in.readInt();    lf0Stream=numStream;    if (lf0Stream < 0)     throw new MaryConfigurationException("loadPdfs:  #stream for log f0 part must be positive value.");    pdf=new double[numState][][][];    numPdf=new int[numState];    for (i=0; i < numState; i++) {      numPdf[i]=data_in.readInt();      Log.d(Mary.LOG,"loadPdfs: numPdf[state:" + i + "]="+ numPdf[i]);      if (numPdf[i] < 0)       throw new MaryConfigurationException("loadPdfs: #lf0 pdf at state " + i + " must be positive value.");      pdf[i]=new double[numPdf[i]][lf0Stream][4];    }    for (i=0; i < numState; i++) {      for (j=0; j < numPdf[i]; j++) {        for (k=0; k < lf0Stream; k++) {          for (l=0; l < 4; l++) {            pdf[i][j][k][l]=data_in.readFloat();          }          vw=pdf[i][j][k][2];          uvw=pdf[i][j][k][3];          if (vw < 0.0 || uvw < 0.0 || vw + uvw < 0.99 || vw + uvw > 1.01)           throw new MaryConfigurationException("loadPdfs: voiced/unvoiced weights must be within 0.99 to 1.01.");        }      }    }    data_in.close();    data_in=null;  } else   if (fileFormat == PdfFileFormat.mgc || fileFormat == PdfFileFormat.str || fileFormat == PdfFileFormat.mag) {    data_in=new DataInputStream(new BufferedInputStream(pdfStream));    Log.d(Mary.LOG,"loadPdfs reading model of type " + fileFormat);    numMSDFlag=data_in.readInt();    numStream=data_in.readInt();    vectorSize=data_in.readInt();    vsize=vectorSize;    if (vsize < 0)     throw new MaryConfigurationException("loadPdfs: vector size of pdf must be positive.");    pdf=new double[numState][][][];    numPdf=new int[numState];    for (i=0; i < numState; i++) {      numPdf[i]=data_in.readInt();      Log.d(Mary.LOG,"loadPdfs: numPdf[state:" + i + "]="+ numPdf[i]);      if (numPdf[i] < 0)       throw new MaryConfigurationException("loadPdfs: #pdf at state " + i + " must be positive value.");      pdf[i]=new double[numPdf[i]][numStream][2 * vsize];    }    for (i=0; i < numState; i++) {      for (j=0; j < numPdf[i]; j++) {        for (k=0; k < vsize; k++) {          pdf[i][j][0][k]=data_in.readFloat();          pdf[i][j][0][k + vsize]=data_in.readFloat();        }      }    }    data_in.close();    data_in=null;  }  return pdf;}  }
class C{  @Bean public Auth0Client auth0Client(){  return new Auth0Client(clientId,issuer);}  }
class C{  public NotesRestoreCommentQuery restoreComment(UserActor actor,int commentId){  return new NotesRestoreCommentQuery(getClient(),actor,commentId);}  }
class C{  public static ViewsFinder from(@NonNull final ViewGroup... rootViews){  return new ViewsFinder(rootViews);}  }
class C{  private void testLockDir(File lockDir) throws IOException {  if (!lockDir.exists()) {    throw new IOException("Could not find lockDir: " + lockDir.getAbsolutePath());  }  if (!lockDir.canWrite()) {    throw new IOException("Could not write to lockDir: " + lockDir.getAbsolutePath());  }}  }
class C{  public FriendsGetSuggestionsQuery fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  private void initializeMembershipMatrix(){  for (int i=0; i < points.size(); i++) {    for (int j=0; j < k; j++) {      membershipMatrix[i][j]=random.nextDouble();    }    membershipMatrix[i]=MathArrays.normalizeArray(membershipMatrix[i],1.0);  }}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / ((float)metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);  return dp;}  }
class C{  public boolean checkSessionKey(SessionKey key){  return (playOk1 == key.playOk1 && accountId == key.accountId && playOk2 == key.playOk2 && loginOk == key.loginOk);}  }
class C{  public boolean hasDimension(String key){  return dimensions.indexOf(new BaseDimensionalObject(key)) != -1;}  }
class C{  public WallGetByIdQuery(VkApiClient client,UserActor actor,String... posts){  super(client,"wall.getById",Utils.buildParametrizedType(List.class,WallpostFull.class));  accessToken(actor.getAccessToken());  posts(posts);}  }
class C{  public EncodingInfo(String ianaName,String javaName,int lastPrintable){  this.ianaName=ianaName;  this.javaName=EncodingMap.getIANA2JavaMapping(ianaName);  this.lastPrintable=lastPrintable;}  }
class C{  public float toFloatBits(){  int color=((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8)| ((int)(255 * r));  return NumberUtils.intToFloatColor(color);}  }
class C{  public AemDialog openByContextMenu(final By clickableArea){  openByContextMenu(currentScope.findElement(clickableArea));  return this;}  }
class C{  public static void reportDiags(DiagCollector diagCollector,boolean colored){  for (  Diag diag : diagCollector.getDiags()) {    System.err.println(diagToString(diag,colored));  }}  }
class C{  char multiply(char a,char b){  if (a == 0 || b == 0) {    return 0;  } else {    int logA=B_TO_J[a & 0xFF];    int logB=B_TO_J[b & 0xFF];    int logResult=logA + logB;    return (char)J_TO_B[logResult];  }}  }
class C{  @Override public void messageReceived(ChannelHandlerContext channelHandlerContext,MessageEvent messageEvent) throws Exception {  if (!(messageEvent.getMessage() instanceof CommandMessage)) {    channelHandlerContext.sendUpstream(messageEvent);    return;  }  CommandMessage command=(CommandMessage)messageEvent.getMessage();  Op cmd=command.op;  int cmdKeysSize=command.keys.size();  cache.asyncEventPing();  if (this.verbose) {    StringBuilder log=new StringBuilder();    log.append(cmd);    if (command.element != null) {      log.append(" ").append(command.element.getKey());    }    for (int i=0; i < cmdKeysSize; i++) {      log.append(" ").append(command.keys.get(i));    }    logger.info(log.toString());  }  Channel channel=messageEvent.getChannel();  if (cmd == Op.GET || cmd == Op.GETS) {    handleGets(channelHandlerContext,command,channel);  } else   if (cmd == Op.SET) {    handleSet(channelHandlerContext,command,channel);  } else   if (cmd == Op.CAS) {    handleCas(channelHandlerContext,command,channel);  } else   if (cmd == Op.ADD) {    handleAdd(channelHandlerContext,command,channel);  } else   if (cmd == Op.REPLACE) {    handleReplace(channelHandlerContext,command,channel);  } else   if (cmd == Op.APPEND) {    handleAppend(channelHandlerContext,command,channel);  } else   if (cmd == Op.PREPEND) {    handlePrepend(channelHandlerContext,command,channel);  } else   if (cmd == Op.INCR) {    handleIncr(channelHandlerContext,command,channel);  } else   if (cmd == Op.DECR) {    handleDecr(channelHandlerContext,command,channel);  } else   if (cmd == Op.DELETE) {    handleDelete(channelHandlerContext,command,channel);  } else   if (cmd == Op.STATS) {    handleStats(channelHandlerContext,command,cmdKeysSize,channel);  } else   if (cmd == Op.VERSION) {    handleVersion(channelHandlerContext,command,channel);  } else   if (cmd == Op.QUIT) {    handleQuit(channel);  } else   if (cmd == Op.FLUSH_ALL) {    handleFlush(channelHandlerContext,command,channel);  } else   if (cmd == Op.VERBOSITY) {    handleVerbosity(channelHandlerContext,command,channel);  } else   if (cmd == null) {    handleNoOp(channelHandlerContext,command);  } else {    throw new UnknownCommandException("unknown command:" + cmd);  }}  }
class C{  private void writeJavaParameterSpec(JavaParameterSpec spec,Document document,Element parentElement){  Element parameter=document.createElement("parameter");  parentElement.appendChild(parameter);  parameter.setAttribute("package",spec.getPackageName());  parameter.setAttribute("class",spec.getClassName());  parameter.setAttribute("method",spec.getHalfSignature());  parameter.setAttribute("parameter",Integer.toString(spec.getParamIdx()));}  }
class C{  public AirMapSchoolProperties(JSONObject propertiesJson){  constructFromJson(propertiesJson);}  }
class C{  public SelectedFiles(){}  }
class C{  public boolean isDashedHighlightLineEnabled(){  return mHighlightDashPathEffect != null;}  }
class C{  public boolean evaluateWord(String sWord){  return Dictionary.contains(sWord);}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  private static void check(MethodDesc prev,MethodDesc desc){  if (prev.types == null || Arrays.equals(prev.types,desc.types)) {    StringBuffer buf=new StringBuffer();    prev.toString(buf,false);    buf.append(" cannot precede ");    desc.toString(buf,false);    throw new IllegalArgumentException(buf.toString());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_WILL_DELETE_ITEM_CHANGE_TO_PUBLIC(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400956,value0,value1);}  }
class C{  public boolean isFinalState(int state){  return (state < 0) ? false : fFinalStateFlags[state];}  }
class C{  public static int deflate(byte[] previous,int previousLength,byte[] current,int currentLength,byte[] result){  if (previous == null) {    System.arraycopy(current,0,result,0,currentLength);    return currentLength;  }  int length=0;  int start1=0;  int start2=0;  while (start1 < previousLength && start2 < currentLength) {    int end1=start1;    int end2=start2;    while (end1 <= previousLength && end2 <= currentLength) {      byte c1=(end1 < previousLength ? previous[end1] : (byte)'\t');      byte c2=(end2 < currentLength ? current[end2] : (byte)'\t');      if (c1 == c2) {        if (c1 == '\t') {          result[length++]='&';          break;        } else {          end1++;          end2++;        }      } else {        while (end1 < previousLength && previous[end1] != '\t') {          end1++;        }        while (end2 < currentLength && current[end2] != '\t') {          end2++;        }        for (int i=start2; i < end2; i++)         result[length++]=current[i];        break;      }    }    start1=end1 + 1;    start2=end2 + 1;    if (start2 < currentLength)     result[length++]='\t';  }  return length;}  }
class C{  private static WeightedObservedPoints createDataset(double[][] points){  final WeightedObservedPoints obs=new WeightedObservedPoints();  for (int i=0; i < points.length; i++) {    obs.add(points[i][0],points[i][1]);  }  return obs;}  }
class C{  @Override public void onSuccess(){}  }
class C{  public void message(int level,String message,String spec){  if (debug >= level) {    System.out.println(message + ": " + spec);  }}  }
class C{  public void readFromFileSystem(final File propertyFileLocation) throws ConfigurationException {  properties=readPropertyFileFromFileSystem(propertyFileLocation);}  }
class C{  @Override public boolean add(MODEL object){  add(getItemCount(),object);  return true;}  }
class C{  public static Map<String,Object> quickScheduleShipmentRouteSegment(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String shipmentId=(String)context.get("shipmentId");  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");  String carrierPartyId=null;  try {    GenericValue shipmentRouteSegment=EntityQuery.use(delegator).from("ShipmentRouteSegment").where("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId).cache(true).queryOne();    carrierPartyId=shipmentRouteSegment.getString("carrierPartyId");  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    Map<String,Object> input=UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId,"userLogin",userLogin);    if (carrierPartyId.equals("DHL")) {      dispatcher.runAsync("dhlShipmentConfirm",input);    } else {      Debug.logError(carrierPartyId + " is not supported at this time.  Sorry.",module);    }  } catch (  GenericServiceException se) {    Debug.logError(se,se.getMessage(),module);  }  return ServiceUtil.returnSuccess();}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public String toString(){  return format;}  }
class C{  @Override public ListenableFuture<AlarmResponse> disalarm(AlarmMember member){  AlarmRequest alarmRequest=AlarmRequest.newBuilder().setAlarm(AlarmType.NOSPACE).setAction(AlarmRequest.AlarmAction.DEACTIVATE).setMemberID(member.getMemberID()).build();  checkArgument(member.getMemberID() != 0,"the member id can not be 0");  checkArgument(member.getAlarm() != AlarmType.NONE,"alarm type can not be NONE");  return this.futureStub.alarm(alarmRequest);}  }
class C{  private Object writeReplace() throws ObjectStreamException {  Object impl_proxy=impl;  if (impl instanceof ProxyAccessor) {    impl_proxy=((ProxyAccessor)impl).getProxy();    logger.log(Level.FINEST,"Obtained implementation proxy: {0}",impl_proxy);    if (impl_proxy == null) {      throw new InvalidObjectException("Implementation's getProxy() returned null");    }  }  return impl_proxy;}  }
class C{  public AdsAddOfficeUsersQuery(VkApiClient client,UserActor actor,int accountId,String data){  super(client,"ads.addOfficeUsers",Boolean.class);  accessToken(actor.getAccessToken());  accountId(accountId);  data(data);}  }
class C{  public void addComponent(String parsys,String componentName){  getParsys(parsys).insertComponent(componentName);  verifyParsysRerendered(parsys);}  }
class C{  public static int delete(long id){  Lock.cleanup(id);  return Helper.delete(id,User.class);}  }
class C{  public synchronized void doneAppending(){  doneAppending=true;  notifyAll();}  }
class C{  public void reset(){  npoints=0;  bounds=null;  path=new GeneralPath();  closedPath=null;}  }
class C{  public void computeMinimization(){  LinkedList<TrieNode> identityCandidates=new LinkedList<TrieNode>();  for (  TrieNode fn : this.finalNodes) {    if (!fn.hasSuccessor()) {      identityCandidates.add(fn);    }  }  this.rlist=new ArrayList<TrieNode>();  this.reprs=new HashMap<TrieNode,Integer>();  while (!identityCandidates.isEmpty()) {    TrieNode currCan=identityCandidates.remove();    if (this.reprs.containsKey(currCan)) {      currCan.setId(reprs.get(currCan));    }    if (!currCan.hasId()) {      currCan.setId(reprs.size());      reprs.put(currCan,currCan.getId());      rlist.add(currCan);    }    TrieNode pred=currCan.getBackPointer();    if (null != pred && !pred.hasId() && pred.rightIdentified()) {      identityCandidates.add(pred);    }  }}  }
class C{  public String quotedNameOf(String s){  if (reservedNames.contains(s))   return "\'" + s + "\'"; else   return s;}  }
class C{  public static Date stringToDate(String date,String datePattern){  DateFormat format=new SimpleDateFormat(datePattern,Locale.ENGLISH);  try {    return format.parse(date);  } catch (  ParseException e) {    Log.e(" " + e.getMessage()," Please check if you have valid pattern! ");  }  return null;}  }
class C{  public static String completeAssignment(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  Map<String,Object> parameterMap=UtilHttp.getParameterMap(request);  String workEffortId=(String)parameterMap.remove("workEffortId");  String partyId=(String)parameterMap.remove("partyId");  String roleTypeId=(String)parameterMap.remove("roleTypeId");  String fromDateStr=(String)parameterMap.remove("fromDate");  java.sql.Timestamp fromDate=null;  Locale locale=UtilHttp.getLocale(request);  try {    fromDate=(java.sql.Timestamp)ObjectType.simpleTypeConvert(fromDateStr,"java.sql.Timestamp",null,null);  } catch (  GeneralException e) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderInvalidDateFormatForFromDate",locale));    return "error";  }  Map<String,Object> result=null;  try {    Map<String,? extends Object> context=UtilMisc.toMap("workEffortId",workEffortId,"partyId",partyId,"roleTypeId",roleTypeId,"fromDate",fromDate,"result",parameterMap,"userLogin",userLogin);    result=dispatcher.runSync("wfCompleteAssignment",context);    if (result.containsKey(ModelService.RESPOND_ERROR)) {      request.setAttribute("_ERROR_MESSAGE_",result.get(ModelService.ERROR_MESSAGE));      return "error";    }  } catch (  GenericServiceException e) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderProblemsInvokingTheCompleteAssignmentService",locale));    return "error";  }  return "success";}  }
class C{  private void dealAssociatedModelOnOneSide(DataSupport baseObj,DataSupport associatedModel){  dealsAssociationsOnTheSideWithoutFK(baseObj,associatedModel);}  }
class C{  public NotesGetByIdQuery(VkApiClient client,UserActor actor,int noteId){  super(client,"notes.getById",Note.class);  accessToken(actor.getAccessToken());  noteId(noteId);}  }
class C{  public static LinkedHashSet<PhysicalTableDefinition> buildHourlyMonthlyTableDefinitions(TestDimensions testDimensions){  return Stream.concat(buildHourlyTableDefinitions(testDimensions).stream(),buildMonthlyTableDefinitions(testDimensions).stream()).collect(Collectors.toCollection(null));}  }
class C{  public void populate(List<DataSourceAttributeData> attributeList){  valueList.clear();  valueMap.clear();  if (attributeList != null) {    for (    DataSourceAttributeData data : attributeList) {      valueList.add(data);      valueMap.put(data.getName().getLocalPart(),data);    }  }}  }
class C{  private void startThread(Context context){  this.mContext=context;  post(this);}  }
class C{  void dumpBinary(String path){  try {    FileOutputStream fos=new FileOutputStream(path);    DataOutputStream os=new DataOutputStream(new BufferedOutputStream(fos));    os.writeInt(MAGIC);    os.writeInt(VERSION);    os.writeInt(continuityWeight);    os.writeInt(optimalCoupling);    os.writeInt(extendSelections);    os.writeInt(joinMethod);    os.writeInt(joinWeightShift);    os.writeInt(joinWeights.length);    for (int i=0; i < joinWeights.length; i++) {      os.writeInt(joinWeights[i]);    }    os.writeInt(units.length);    for (int i=0; i < units.length; i++) {      units[i].dumpBinary(os);    }    os.writeInt(unitTypes.length);    for (int i=0; i < unitTypes.length; i++) {      unitTypes[i].dumpBinary(os);    }    sts.dumpBinary(os);    mcep.dumpBinary(os);    os.writeInt(cartMap.size());    for (Iterator i=cartMap.keySet().iterator(); i.hasNext(); ) {      String name=(String)i.next();      CART cart=(CART)cartMap.get(name);      Utilities.outString(os,name);      cart.dumpBinary(os);    }    os.close();  } catch (  FileNotFoundException fe) {    throw new Error("Can't dump binary database " + fe.getMessage());  }catch (  IOException ioe) {    throw new Error("Can't write binary database " + ioe.getMessage());  }}  }
class C{  public boolean canFinish(){  IWizardPage page=getContainer().getCurrentPage();  if (page == directoryPage) {    return directoryPage.useProjectName() || directoryPage.getDirectoryName() != null;  } else   if (page == finishPage) {    return true;  }  return super.canFinish();}  }
class C{  private Collection<Map<String,Object>> batchParse(Collection<Json> batch){  return batch.stream().map(null).collect(toList());}  }
class C{  public T val(){  return value;}  }
class C{  private static void populate(){  if (descriptionMap.isEmpty()) {    descriptionMap.put(jpg,"JPEG (*.png)");    descriptionMap.put(gif,"GIF (*.gif)");    descriptionMap.put(tif,"TIFF (*.tif)");    descriptionMap.put(png,"PNG (*.png)");  }}  }
class C{  public void onSizeChanged(float width,float height){  if (mWidth == width && mHeight == height)   return;  boolean widthChanged=mWidth != width;  mWidth=width;  mHeight=height;  for (int i=0; i < mStripTabs.length; i++) {    mStripTabs[i].setHeight(mHeight);  }  if (widthChanged)   computeAndUpdateTabWidth(false);  if (mStripTabs.length > 0)   mUpdateHost.requestUpdate();  mTabMenu.dismiss();}  }
class C{  public final boolean isOverridingDevice(){  return (myOverride & CFG_DEVICE) != 0;}  }
class C{  public GroupsEditQuery ageLimits(GroupsEditAgeLimit value){  return unsafeParam("age_limits",value);}  }
class C{  private static boolean isTextSplitable(String text,int index){  char c0=text.charAt(index);  char c1=text.charAt(index + 1);  if (isLetter(c0) && isLetter(c1)) {    return false;  } else   return !(NumberExpander.isDigit(c0) && NumberExpander.isDigit(c1));}  }
class C{  public static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize){  Encoder[] encoders={new ASCIIEncoder(),new C40Encoder(),new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};  EncoderContext context=new EncoderContext(msg);  context.setSymbolShape(shape);  context.setSizeConstraints(minSize,maxSize);  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {    context.writeCodeword(MACRO_05);    context.setSkipAtEnd(2);    context.pos+=MACRO_05_HEADER.length();  } else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {    context.writeCodeword(MACRO_06);    context.setSkipAtEnd(2);    context.pos+=MACRO_06_HEADER.length();  }  int encodingMode=ASCII_ENCODATION;  while (context.hasMoreCharacters()) {    encoders[encodingMode].encode(context);    if (context.getNewEncoding() >= 0) {      encodingMode=context.getNewEncoding();      context.resetEncoderSignal();    }  }  int len=context.getCodewordCount();  context.updateSymbolInfo();  int capacity=context.getSymbolInfo().getDataCapacity();  if (len < capacity) {    if (encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION) {      context.writeCodeword('\u00fe');    }  }  StringBuilder codewords=context.getCodewords();  if (codewords.length() < capacity) {    codewords.append(PAD);  }  while (codewords.length() < capacity) {    codewords.append(randomize253State(PAD,codewords.length() + 1));  }  return context.getCodewords().toString();}  }
class C{  void remask(){  if (parsedFormatInfo == null) {    return;  }  DataMask dataMask=DataMask.values()[parsedFormatInfo.getDataMask()];  int dimension=bitMatrix.getHeight();  dataMask.unmaskBitMatrix(bitMatrix,dimension);}  }
class C{  public boolean filterOut(final SAMRecord first,final SAMRecord second){  throw new UnsupportedOperationException("Paired *Filter not implemented!");}  }
class C{  public boolean isInBoundsX(float x){  return isInBoundsLeft(x) && isInBoundsRight(x);}  }
class C{  public boolean isApplicable(){  ClusterViewer viewer=getViewer();  if (viewer.getMatrixTab() != null) {    TableModel model=viewer.getMatrixTab().getTable().getModel();    return model.getRowCount() > 1;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPAttack_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200839,skillcaster,num0,skillname);}  }
class C{  public static double mlsadf(double x,double b[],int m,double a,double d[],int pt2,int pt3[]){  x=mlsadf1(x,b,m,a,d);  x=mlsadf2(x,b,m - 1,a,d,pt2,pt3);  return x;}  }
class C{  @Override public void dataSourceLoaded(GeometryTypeEnum geometryType,boolean isConnectedToDataSourceFlag){  DataSourceInterface dataSource=DataSourceFactory.getDataSource();  propertyPanel.dataSourceLoaded(dataSource);  expressionPanel.dataSourceLoaded(dataSource);}  }
class C{  public QRDecomposition(Matrix A){  QR=A.getArrayCopy();  m=A.getRowDimension();  n=A.getColumnDimension();  Rdiag=new double[n];  for (int k=0; k < n; k++) {    double nrm=0;    for (int i=k; i < m; i++) {      nrm=Maths.hypot(nrm,QR[i][k]);    }    if (nrm != 0.0) {      if (QR[k][k] < 0) {        nrm=-nrm;      }      for (int i=k; i < m; i++) {        QR[i][k]/=nrm;      }      QR[k][k]+=1.0;      for (int j=k + 1; j < n; j++) {        double s=0.0;        for (int i=k; i < m; i++) {          s+=QR[i][k] * QR[i][j];        }        s=-s / QR[k][k];        for (int i=k; i < m; i++) {          QR[i][j]+=s * QR[i][k];        }      }    }    Rdiag[k]=-nrm;  }}  }
class C{  public void maximizePanelThenPromoteToTab(StateChangeReason reason,long duration){  mShouldPromoteToTabAfterMaximizing=true;  animatePanelToState(PanelState.MAXIMIZED,reason,duration);}  }
class C{  public static void organizeAndSpawn(int worldId,int instanceId){  InstanceWalkerFormations formations=WalkerFormationsCache.getInstanceFormations(worldId,instanceId);  formations.organizeAndSpawn();}  }
class C{  public TextEditor outdent(){  return outdent(4);}  }
class C{  public BlacklistEntry(String urlPattern,int statusCode,String httpMethodPattern){  this.urlPattern=Pattern.compile(urlPattern);  this.statusCode=statusCode;  if (httpMethodPattern == null || httpMethodPattern.isEmpty()) {    this.httpMethodPattern=null;  } else {    this.httpMethodPattern=Pattern.compile(httpMethodPattern);  }}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source,boolean ignoreSpace){  return parseKeyAndValueToMap(source,DEFAULT_KEY_AND_VALUE_SEPARATOR,DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR,ignoreSpace);}  }
class C{  public boolean forEachKey(TIntProcedure procedure){  return forEach(procedure);}  }
class C{  private boolean hasProperties(ModelImpl modelImpl){  return modelImpl.getProperties() != null;}  }
class C{  public boolean addAttribute(String attribute,Map<String,Object> sample2value,boolean allowReplaceAttribute,boolean allowAddSample){  if (allowReplaceAttribute || !table.columnKeySet().contains(attribute)) {    if (sample2value.size() > 0) {      for (      String sample : sample2value.keySet()) {        if (allowAddSample || getSampleSet().contains(sample))         put(sample,attribute,sample2value.get(sample));      }    } else {      for (      String sample : getSampleSet()) {        put(sample,attribute,null);      }    }    return true;  }  return false;}  }
class C{  static ShapeDrawable makeShapeDrawable(int color){  ShapeDrawable badgeBackground=new ShapeDrawable(new OvalShape());  badgeBackground.setIntrinsicWidth(10);  badgeBackground.setIntrinsicHeight(10);  badgeBackground.getPaint().setColor(color);  return badgeBackground;}  }
class C{  public SM_FRIEND_NOTIFY(int code,String name){  this.code=code;  this.name=name;}  }
class C{  private double[][] generatePartition(double[] sample){  final RandomDataGenerator randomDataGenerator=new RandomDataGenerator(100);  final int length=sample.length;  final double[][] out=new double[5][];  int cur=0;  int offset=0;  int sampleCount=0;  for (int i=0; i < 5; i++) {    if (cur == length || offset == length) {      break;    }    final int next;    if (i == 4 || cur == length - 1) {      next=length - 1;    } else {      next=randomDataGenerator.nextInt(cur,length - 1);    }    final int subLength=next - cur + 1;    out[i]=new double[subLength];    System.arraycopy(sample,offset,out[i],0,subLength);    cur=next + 1;    sampleCount++;    offset+=subLength;  }  if (sampleCount < 5) {    double[][] out2=new double[sampleCount][];    for (int j=0; j < sampleCount; j++) {      final int curSize=out[j].length;      out2[j]=new double[curSize];      System.arraycopy(out[j],0,out2[j],0,curSize);    }    return out2;  } else {    return out;  }}  }
class C{  public static List<String> findAllTableNames(SQLiteDatabase db){  List<String> tableNames=new ArrayList<String>();  Cursor cursor=null;  try {    cursor=db.rawQuery("select * from sqlite_master where type = ?",new String[]{"table"});    if (cursor.moveToFirst()) {      do {        String tableName=cursor.getString(cursor.getColumnIndexOrThrow("tbl_name"));        if (!tableNames.contains(tableName)) {          tableNames.add(tableName);        }      } while (cursor.moveToNext());    }  } catch (  Exception e) {    e.printStackTrace();    throw new DatabaseGenerateException(e.getMessage());  } finally {    if (cursor != null) {      cursor.close();    }  }  return tableNames;}  }
class C{  public static String quote(String sentence){  if (!sentence.contains("'")) {    return addSingleQuotation(sentence);  } else   if (sentence.contains("'") && !sentence.contains("\"")) {    return addDoubleQuotation(sentence);  } else {    return changeToConcat(sentence);  }}  }
class C{  @Override public Node lastChild(){  if (fCurrentNode == null)   return null;  Node node=getLastChild(fCurrentNode);  if (node != null) {    fCurrentNode=node;  }  return node;}  }
class C{  public static void startSync(Project project,GradleSyncListener listener){  GradleProjectImporter.getInstance().requestProjectSync(project,listener);}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PERSONAL_SHOP_SELL_ITEM_MULTI(int num1,String value0s){  return new SM_SYSTEM_MESSAGE(1400135,num1,value0s);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_EVENT_LOSE_ARTIFACT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1320004,value0,value1);}  }
class C{  public void checkYellowStatus(){  client.admin().cluster().prepareHealth().setWaitForYellowStatus().execute().actionGet();}  }
class C{  public <S>S createService(Class<S> serviceClass){  String baseUrl="";  try {    Field field1=serviceClass.getField("BASE_URL");    baseUrl=(String)field1.get(serviceClass);  } catch (  NoSuchFieldException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.getMessage();    e.printStackTrace();  }  Retrofit retrofit=new Retrofit.Builder().baseUrl(baseUrl).client(getOkHttpClient()).addConverterFactory(GsonConverterFactory.create(mGsonDateFormat)).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).build();  return retrofit.create(serviceClass);}  }
class C{  @Override public boolean hasMoreElements(){  return index < array.length;}  }
class C{  public void putFramePathOnStack(String nameOrId){  if (!switchRequestComingFromFrameSwitcher) {    expandFramePathStack(new NamedFrame(nameOrId));  }}  }
class C{  protected void registerAcousticModels(Voice voice){  Map<String,Model> acousticModels=voice.getAcousticModels();  if (acousticModels == null) {    return;  }  for (  Model model : acousticModels.values()) {    String modelFeatureName=model.getFeatureName();    if (modelFeatureName != null && !listContinuousFeatureProcessorNames().contains(modelFeatureName)) {      String modelAttributeName=model.getTargetAttributeName();      MaryFeatureProcessor featureProcessor=new MaryGenericFeatureProcessors.GenericContinuousFeature(modelFeatureName,modelAttributeName);      addFeatureProcessor(featureProcessor);    }  }}  }
class C{  public void stopRecording(){  m_line.stop();  m_line.close();}  }
class C{  public TextEditor(CharSequence text){  this.text=new StringBuilder(text);}  }
class C{  public static synchronized ExplorerSupport sharedInstance(){  if (sharedInstance == null)   sharedInstance=new ExplorerSupport();  return sharedInstance;}  }
class C{  public JsonObject add(String name,float value){  add(name,Json.value(value));  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200617,skillcaster,skillname);}  }
class C{  private void update(){  String title;  String summary;  String fragment;  Account account=ChromeSigninController.get(getContext()).getSignedInUser();  if (account == null) {    title=getContext().getString(R.string.sign_in_to_chrome);    summary=getContext().getString(R.string.sign_in_to_chrome_summary);    fragment=null;  } else {    List<String> accounts=AccountManagerHelper.get(getContext()).getGoogleAccountNames();    if (accounts.size() == 1) {      summary=accounts.get(0);    } else {      summary=getContext().getString(R.string.number_of_signed_in_accounts,accounts.size());    }    fragment=AccountManagementFragment.class.getName();    title=AccountManagementFragment.getCachedUserName(account.name);    if (title == null) {      final Profile profile=Profile.getLastUsedProfile();      String cachedName=ProfileDownloader.getCachedFullName(profile);      Bitmap cachedBitmap=ProfileDownloader.getCachedAvatar(profile);      if (TextUtils.isEmpty(cachedName) || cachedBitmap == null) {        AccountManagementFragment.startFetchingAccountInformation(getContext(),profile,account.name);      }      title=TextUtils.isEmpty(cachedName) ? account.name : cachedName;    }  }  setTitle(title);  setSummary(summary);  setFragment(fragment);  ChromeSigninController signinController=ChromeSigninController.get(getContext());  boolean enabled=signinController.isSignedIn() || SigninManager.get(getContext()).isSignInAllowed();  if (mViewEnabled != enabled) {    mViewEnabled=enabled;    notifyChanged();  }  if (!enabled)   setFragment(null);  if (SigninManager.get(getContext()).isSigninDisabledByPolicy()) {    setIcon(ManagedPreferencesUtils.getManagedByEnterpriseIconId());  } else {    Resources resources=getContext().getResources();    Bitmap bitmap=AccountManagementFragment.getUserPicture(signinController.getSignedInAccountName(),resources);    setIcon(new BitmapDrawable(resources,bitmap));  }}  }
class C{  private synchronized void applyException(Throwable t){  exception=t;  reschedule(FAILURE_RESCHEDULE_DELAY);}  }
class C{  public void reenterPreparedExternalXid(Object xid,List<TransactionParticipant> parts) throws RemoteException, CannotCommitException {  getProxy().reenterPreparedExternalXid(xid,parts);}  }
class C{  private void onSaveAuthChkbxChanged(final ActionEvent actionEvent){  final boolean saveCredentials=((CheckBox)actionEvent.getSource()).isSelected();  accountManager.setSaveLogin(saveCredentials);  toggleFields(saveCredentials);}  }
class C{  boolean importExistingProject(IProgressMonitor monitor) throws TeamException {  if (directory == null) {    return false;  }  try {    monitor.beginTask("Importing",3 * 1000);    createExistingProject(new SubProgressMonitor(monitor,1000));    monitor.subTask("Refreshing " + project.getName());    RepositoryProvider.map(project,SVNProviderPlugin.getTypeId());    monitor.worked(1000);    SVNWorkspaceRoot.setSharing(project,new SubProgressMonitor(monitor,1000));    return true;  } catch (  CoreException ce) {    throw new SVNException("Failed to import External SVN Project" + ce,ce);  } finally {    monitor.done();  }}  }
class C{  private static String genSalt(final byte[] Random){  final StringBuilder Salt=new StringBuilder("$H$");  Salt.append(iota64[30]);  Salt.append(encode64(Random));  return Salt.toString();}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigString copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigString(fieldConfigBase.getCommonData(),this.buttonText);  }  return copy;}  }
class C{  public void destroyReaderModeControl(){  if (mControl != null) {    ((ViewGroup)mControl.getParent()).removeView(mControl);    mControl=null;    if (mResourceLoader != null) {      mResourceLoader.unregisterResource(R.id.reader_mode_view);    }  }}  }
class C{  public Dfp newInstance(final byte x){  return new Dfp(getField(),x);}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public void unexport(Remote object,String protocol,boolean force) throws RemoteException, NoSuchObjectException {  if (_isShutdown)   return;synchronized (_objectRegistry) {    ObjectRegistry.Entry orEntry=_objectRegistry.getEntryFromObject(object);    if (orEntry == null)     throw new NoSuchObjectException("Failed to unexport object: object is not exported");    if (!orEntry.getProtocol().equals(protocol))     throw new NoSuchObjectException("Failed to unexport object: " + object.getClass().getName() + " object is not exported on protocol "+ protocol);    _objectRegistry.removeEntry(object);    ServerPeer serverPeer=orEntry.getServerPeer();    serverPeer.afterUnexport(force);    if (_shutdownOnLastRegistrar && _objectRegistry.isLastRegistrar(protocol)) {      _protocolRegistry.remove(protocol);      serverPeer.getProtocolAdapter().shutdown();    }    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,"LRMIRuntime unexported remote object [localObj=" + object.getClass().getName() + "@"+ System.identityHashCode(object)+ ", protocol="+ protocol+ ", remoteObjID="+ orEntry.m_ObjectId+ "]");    }  }}  }
class C{  public void add(LogInfo phase){  body.put(phase.getName(),phase);}  }
class C{  public int size(){  return bits.cardinality();}  }
class C{  public boolean isApplicable(){  return getViewer().isPCoATab();}  }
class C{  public ElementType(String name,int model,int memberOf,int flags,Schema schema){  theName=name;  theModel=model;  theMemberOf=memberOf;  theFlags=flags;  theAtts=new AttributesImpl();  theSchema=schema;  theNamespace=namespace(name,false);  theLocalName=localName(name);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParameterDeclarationSubstituted fullCopy(){  ParameterDeclarationSubstituted tree=(ParameterDeclarationSubstituted)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public IntegratedParserConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool,XMLComponentManager parentSettings){  super(symbolTable,grammarPool,parentSettings);  fNonNSScanner=new XMLDocumentScannerImpl();  fNonNSDTDValidator=new XMLDTDValidator();  addComponent(fNonNSScanner);  addComponent(fNonNSDTDValidator);}  }
class C{  public void prepareForUnion(ITypeDesc typeDesc){  _allIndexValuesQuery=true;  if (_multipleUids != null) {    setMultipleUIDs(_multipleUids.toArray(new String[_multipleUids.size()]));    _allIndexValuesQuery=false;  }  List<IQueryIndexScanner> queryIndexes=new LinkedList<IQueryIndexScanner>();  List<ICustomQuery> customQueries=null;  HashMap<String,List<Range>> containsSamePathRanges=null;  HashMap<ContainsItemIntersectionBase,ContainsItemValueRange> containsIntersections;  if (_containsItemsQueries != null && !_containsItemsQueries.isEmpty()) {    customQueries=new ArrayList<ICustomQuery>(_containsItemsQueries);    if (_ranges == null)     _ranges=new HashMap<String,Range>();    containsSamePathRanges=new HashMap<String,List<Range>>();    containsIntersections=new HashMap<ContainsItemIntersectionBase,ContainsItemValueRange>();    insertContainsItemsRanges(_containsItemsQueries,containsSamePathRanges,null,containsIntersections);  }  Map<Range,IQueryIndexScanner> usedByRanges=null;  Map<String,Range> possibleCompoundSegments=typeDesc.anyCompoundIndex() && _ranges != null ? new HashMap<String,Range>() : null;  if (_ranges != null) {    if (customQueries == null)     customQueries=new ArrayList<ICustomQuery>();    String idPropertyName=typeDesc.getIdPropertyName();    Range idRange=null;    if (idPropertyName != null && typeDesc.isAutoGenerateId()) {      idRange=_ranges.get(idPropertyName);      if (idRange != null) {        _allIndexValuesQuery=false;        int propertyIndex=_typeDesc.getFixedPropertyPosition(idPropertyName);        idRange.toEntryPacket(this,propertyIndex);      }    }    String routingPropertyName=typeDesc.getRoutingPropertyName();    Range routingRange;    if (routingPropertyName != null) {      routingRange=_ranges.get(routingPropertyName);      if (routingRange != null) {        int propertyIndex=_typeDesc.getFixedPropertyPosition(routingPropertyName);        routingRange.toEntryPacket(this,propertyIndex);      }    }    for (    Map.Entry<String,Range> mapEntry : _ranges.entrySet()) {      Range range=mapEntry.getValue();      if (idRange != range && !range.isInternalRange())       customQueries.add(mapEntry.getValue());      if (possibleCompoundSegments != null && range.suitableAsCompoundIndexSegment())       possibleCompoundSegments.put(mapEntry.getKey(),range);      if (isRangeIndexed(range)) {        if (!range.isRelevantForAllIndexValuesOptimization())         _allIndexValuesQuery=false;        IQueryIndexScanner indexScanner=range.getIndexScanner();        if (indexScanner != null) {          queryIndexes.add(indexScanner);          if (possibleCompoundSegments != null && range.suitableAsCompoundIndexSegment()) {            if (usedByRanges == null)             usedByRanges=new HashMap<Range,IQueryIndexScanner>();            usedByRanges.put(range,indexScanner);          }        }        if (containsSamePathRanges != null && containsSamePathRanges.containsKey(range.getPath())) {          List<Range> l=containsSamePathRanges.get(range.getPath());          for (          Range r : l) {            if (r == range)             continue;            IQueryIndexScanner is=r.getIndexScanner();            if (indexScanner != null)             queryIndexes.add(is);          }        }      } else       _allIndexValuesQuery=false;    }    if (!customQueries.isEmpty() && possibleCompoundSegments != null && possibleCompoundSegments.size() > 1) {      List<Range> possibleSegments=new ArrayList<Range>();      for (      SpaceIndex idx : typeDesc.getCompoundIndexes()) {        possibleSegments.clear();        CompoundIndex index=(CompoundIndex)idx;        for (        ISpaceCompoundIndexSegment seg : index.getCompoundIndexSegments()) {          if (possibleCompoundSegments.containsKey(seg.getName())) {            possibleSegments.add(possibleCompoundSegments.get(seg.getName()));          } else {            possibleSegments.clear();            break;          }        }        if (!possibleSegments.isEmpty()) {          IQueryIndexScanner indexScanner=buildCompoundIndexScannerFromSegmentRanges(index,possibleSegments);          if (indexScanner != null) {            queryIndexes.add(indexScanner);            if (usedByRanges != null && !usedByRanges.isEmpty()) {              for (              Range r : possibleSegments) {                IQueryIndexScanner s=usedByRanges.get(r);                if (s != null)                 queryIndexes.remove(s);              }            }          }        }      }    }    if (!customQueries.isEmpty()) {      if (customQueries.size() == 1) {        customQueries.get(0).getCustomIndexes().addAll(queryIndexes);        setCustomQuery(customQueries.get(0));      } else {        CompoundAndCustomQuery customQuery=new CompoundAndCustomQuery(customQueries);        customQuery.getCustomIndexes().addAll(queryIndexes);        setCustomQuery(customQuery);      }    }  }  _preparedForSpace=true;}  }
class C{  public boolean remove(E comparable){  if (comparable == null)   return false;  if (this.root == null)   return false;  return this.remove(this.root,comparable) != null;}  }
class C{  public void paint(Graphics2D gc,Rectangle rect){  try {    if (gc instanceof SelectionGraphics) {      final SelectionGraphics sgc=(SelectionGraphics)gc;      select(rect,sgc.getSelectionRectangle(),sgc.getMouseClicks());    } else     if (!inUpdate) {      doPaint(gc,rect);    }  } catch (  Exception ex) {  }}  }
class C{  public boolean hasProgramIncidentEndDate(){  return programIncidentEndDate != null;}  }
class C{  private void handleEvent(){  Object value=txtName.getText();  bodyFixture.setUserData(value);}  }
class C{  public int rank(){  return new SingularValueDecomposition(this).rank();}  }
class C{  public PhotosCreateCommentQuery createComment(UserActor actor,int photoId){  return new PhotosCreateCommentQuery(getClient(),actor,photoId);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public PolynomialFunction add(final PolynomialFunction p){  final int lowLength=FastMath.min(coefficients.length,p.coefficients.length);  final int highLength=FastMath.max(coefficients.length,p.coefficients.length);  double[] newCoefficients=new double[highLength];  for (int i=0; i < lowLength; ++i) {    newCoefficients[i]=coefficients[i] + p.coefficients[i];  }  System.arraycopy((coefficients.length < p.coefficients.length) ? p.coefficients : coefficients,lowLength,newCoefficients,lowLength,highLength - lowLength);  return new PolynomialFunction(newCoefficients);}  }
class C{  public MonotoneChain(final boolean includeCollinearPoints){  super(includeCollinearPoints);}  }
class C{  public static void main(String[] args){  WKTDialog dlg=new WKTDialog();  dlg.setDefaultCloseOperation(DISPOSE_ON_CLOSE);  String wktString="";  dlg.showDialog(wktString);}  }
class C{  @SuppressWarnings("deprecation") public static Range toRange(String colName,FunctionCallDescription functionCallDescription,Object value,short matchCode){switch (matchCode) {case TemplateMatchCodes.IS_NULL:    return new IsNullRange(colName,functionCallDescription);case TemplateMatchCodes.NOT_NULL:  return new NotNullRange(colName,functionCallDescription);case TemplateMatchCodes.EQ:return new EqualValueRange(colName,functionCallDescription,value);case TemplateMatchCodes.NE:return new NotEqualValueRange(colName,functionCallDescription,value);case TemplateMatchCodes.GT:return new SegmentRange(colName,functionCallDescription,castToComparable(value),false,null,false);case TemplateMatchCodes.GE:return new SegmentRange(colName,functionCallDescription,castToComparable(value),true,null,false);case TemplateMatchCodes.LE:return new SegmentRange(colName,functionCallDescription,null,false,castToComparable(value),true);case TemplateMatchCodes.LT:return new SegmentRange(colName,functionCallDescription,null,false,castToComparable(value),false);case TemplateMatchCodes.REGEX:return new RegexRange(colName,functionCallDescription,(String)value);case TemplateMatchCodes.NOT_REGEX:return new NotRegexRange(colName,functionCallDescription,(String)value);case TemplateMatchCodes.IN:return new InRange(colName,functionCallDescription,(Set)value);}return Range.EMPTY_RANGE;}  }
class C{  public static <K,V>LinkedHashMap<K,V> linkedHashMap(){  return new LinkedHashMap<K,V>();}  }
class C{  public S2CellId parent(int level){  long newLsb=lowestOnBitForLevel(level);  return new S2CellId((id & -newLsb) | newLsb);}  }
class C{  public void clearSelection(){  List<Integer> selection=getSelectedItemsPosition();  selectedItems.clear();  for (  Integer i : selection) {    notifyItemChanged(i);  }}  }
class C{  public synchronized void mergeSimpleSettings(Request r){  if (isStarted()) {    throw new IllegalStateException("index \"" + name + "\" was already started (cannot change non-live settings)");  }  StructType topType=r.getType();  Iterator<Map.Entry<String,Object>> it=r.getParams();  while (it.hasNext()) {    Map.Entry<String,Object> ent=it.next();    String paramName=ent.getKey();    Param p=topType.params.get(paramName);    if (p == null) {      throw new IllegalArgumentException("unrecognized parameter \"" + paramName + "\"");    }    Type type=p.type;    if (type instanceof StringType || type instanceof IntType || type instanceof LongType|| type instanceof FloatType|| type instanceof BooleanType) {      Object value=ent.getValue();      try {        type.validate(value);      } catch (      IllegalArgumentException iae) {        r.fail(paramName,iae.toString());      }      settingsSaveState.put(paramName,value);      it.remove();    } else {      r.fail(paramName,"unhandled parameter");    }  }}  }
class C{  public AudioSaveQuery save(UserActor actor,int server,String audio){  return new AudioSaveQuery(getClient(),actor,server,audio);}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  static byte[] altBase64ToByteArray(String s){  return base64ToByteArray(s,true);}  }
class C{  public static String updateAllKeywords(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  Security security=(Security)request.getAttribute("security");  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  String updateMode="CREATE";  String errMsg=null;  String doAll=request.getParameter("doAll");  if (!security.hasEntityPermission("CATALOG","_" + updateMode,request.getSession())) {    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode);    errMsg=UtilProperties.getMessage(resource,"productevents.not_sufficient_permissions",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  EntityCondition condition=null;  if (!"Y".equals(doAll)) {    List<EntityCondition> condList=FastList.newInstance();    condList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("autoCreateKeywords",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("autoCreateKeywords",EntityOperator.NOT_EQUAL,"N")));    if ("true".equals(EntityUtilProperties.getPropertyValue("prodsearch","index.ignore.variants",delegator))) {      condList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("isVariant",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("isVariant",EntityOperator.NOT_EQUAL,"Y")));    }    if ("true".equals(EntityUtilProperties.getPropertyValue("prodsearch","index.ignore.discontinued.sales",delegator))) {      condList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("salesDiscontinuationDate",EntityOperator.GREATER_THAN_EQUAL_TO,nowTimestamp)));    }    condition=EntityCondition.makeCondition(condList,EntityOperator.AND);  } else {    condition=EntityCondition.makeCondition(EntityCondition.makeCondition("autoCreateKeywords",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("autoCreateKeywords",EntityOperator.NOT_EQUAL,"N"));  }  EntityListIterator entityListIterator=null;  int numProds=0;  int errProds=0;  boolean beganTx=false;  try {    beganTx=TransactionUtil.begin(7200);    try {      if (Debug.infoOn()) {        long count=EntityQuery.use(delegator).from("Product").where(condition).queryCount();        Debug.logInfo("========== Found " + count + " products to index ==========",module);      }      entityListIterator=EntityQuery.use(delegator).from("Product").where(condition).queryIterator();    } catch (    GenericEntityException gee) {      Debug.logWarning(gee,gee.getMessage(),module);      Map<String,String> messageMap=UtilMisc.toMap("gee",gee.toString());      errMsg=UtilProperties.getMessage(resource,"productevents.error_getting_product_list",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      throw gee;    }    GenericValue product;    while ((product=entityListIterator.next()) != null) {      try {        KeywordIndex.indexKeywords(product,"Y".equals(doAll));      } catch (      GenericEntityException e) {        Debug.logWarning("[ProductEvents.updateAllKeywords] Could not create product-keyword (write error); message: " + e.getMessage(),module);        errProds++;      }      numProds++;      if (numProds % 500 == 0) {        Debug.logInfo("Keywords indexed for " + numProds + " so far",module);      }    }  } catch (  GenericEntityException e) {    try {      TransactionUtil.rollback(beganTx,e.getMessage(),e);    } catch (    Exception e1) {      Debug.logError(e1,module);    }    return "error";  }catch (  Throwable t) {    Debug.logError(t,module);    request.setAttribute("_ERROR_MESSAGE_",t.getMessage());    try {      TransactionUtil.rollback(beganTx,t.getMessage(),t);    } catch (    Exception e2) {      Debug.logError(e2,module);    }    return "error";  } finally {    if (entityListIterator != null) {      try {        entityListIterator.close();      } catch (      GenericEntityException gee) {        Debug.logError(gee,"Error closing EntityListIterator when indexing product keywords.",module);      }    }    try {      TransactionUtil.commit(beganTx);    } catch (    Exception e) {      Debug.logError(e,module);    }  }  if (errProds == 0) {    Map<String,String> messageMap=UtilMisc.toMap("numProds",Integer.toString(numProds));    errMsg=UtilProperties.getMessage(resource,"productevents.keyword_creation_complete_for_products",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_EVENT_MESSAGE_",errMsg);    return "success";  } else {    Map<String,String> messageMap=UtilMisc.toMap("numProds",Integer.toString(numProds));    messageMap.put("errProds",Integer.toString(errProds));    errMsg=UtilProperties.getMessage(resource,"productevents.keyword_creation_complete_for_products_with_errors",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }}  }
class C{  @Override public Schema schema(){  Schema schema=new Schema();  schema.addField("query-plan",Type.VARCHAR(500));  return schema;}  }
class C{  public StatsTrackVisitorQuery(VkApiClient client,UserActor actor){  super(client,"stats.trackVisitor",OkResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  private void drawRing(Canvas canvas,Rect bounds){  final RectF arcBounds=mTempBounds;  final Ring ring=mRing;  arcBounds.set(bounds);  arcBounds.inset(ring.strokeInset,ring.strokeInset);  canvas.drawArc(arcBounds,ring.start,ring.sweep,false,mPaint);}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  public IOUtils(){  super();}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  public void register(IJSpace spaceProxy,String containerName){  String spaceName=spaceProxy.getName();  _registeredSpaces.put(spaceName,spaceProxy);  try {    if (m_jmsFlag && m_jndiFlag) {      Context internalContext=m_jndiContext != null && m_isInternalJmsJndi ? m_jndiContext : null;      Context externalContext=m_isExternalJmsJndi ? createExternalContext(spaceName) : null;      m_jmsLookupManager=JmsFactory.getInstance().createLookupManager(containerName,spaceProxy,internalContext,externalContext);    }    if (m_jmsFlag && !m_jndiFlag && !m_isExternalJmsJndi) {      if (_logger.isLoggable(Level.WARNING)) {        _logger.warning("The JMS Service must have an enabled JNDI Lookup service." + " \nPlease enable Internal or External JNDI service (under <jms_services> tag) and restart the container.");      }    }  } catch (  Exception ex) {    String cause="";    if (_logger.isLoggable(Level.WARNING)) {      if (ex instanceof NamingException) {        Throwable rootException=((NamingException)ex).getRootCause();        if (rootException != null)         cause=rootException.toString();        _logger.warning("\n\nDirectory Service: Failed registering space <" + spaceProxy + "> : "+ cause);      } else       _logger.log(Level.WARNING,"\n\nDirectory Service: Failed registering space <" + spaceProxy + "> : ",ex);    }  }}  }
class C{  @Override public void processingInstruction(String target,String pidata) throws SAXException {  if (target.equals("oasis-xml-catalog")) {    URL catalog=null;    String data=pidata;    int pos=data.indexOf("catalog=");    if (pos >= 0) {      data=data.substring(pos + 8);      if (data.length() > 1) {        String quote=data.substring(0,1);        data=data.substring(1);        pos=data.indexOf(quote);        if (pos >= 0) {          data=data.substring(0,pos);          try {            if (baseURL != null) {              catalog=new URL(baseURL,data);            } else {              catalog=new URL(data);            }          } catch (          MalformedURLException mue) {          }        }      }    }    if (allowXMLCatalogPI) {      if (catalogManager.getAllowOasisXMLCatalogPI()) {        catalogManager.debug.message(4,"oasis-xml-catalog PI",pidata);        if (catalog != null) {          try {            catalogManager.debug.message(4,"oasis-xml-catalog",catalog.toString());            oasisXMLCatalogPI=true;            if (piCatalogResolver == null) {              piCatalogResolver=new CatalogResolver(true);            }            piCatalogResolver.getCatalog().parseCatalog(catalog.toString());          } catch (          Exception e) {            catalogManager.debug.message(3,"Exception parsing oasis-xml-catalog: " + catalog.toString());          }        } else {          catalogManager.debug.message(3,"PI oasis-xml-catalog unparseable: " + pidata);        }      } else {        catalogManager.debug.message(4,"PI oasis-xml-catalog ignored: " + pidata);      }    } else {      catalogManager.debug.message(3,"PI oasis-xml-catalog occurred in an invalid place: " + pidata);    }  } else {    if (documentHandler != null) {      documentHandler.processingInstruction(target,pidata);    }  }}  }
class C{  @DataProvider(name="circuits") public String[][] createCircuitData(){  return new String[][]{{"monza","Italy"},{"spa","Belgium"},{"sepang","Malaysia"}};}  }
class C{  public Observable<CatchResult> catchPokemonAsync(double normalizedHitPosition,double normalizedReticleSize,double spinModifier,Pokeball type){  if (!isEncountered()) {    return Observable.just(new CatchResult());  }  CatchPokemonMessage reqMsg=CatchPokemonMessage.newBuilder().setEncounterId(getEncounterId()).setHitPokemon(true).setNormalizedHitPosition(normalizedHitPosition).setNormalizedReticleSize(normalizedReticleSize).setSpawnPointId(getSpawnPointId()).setSpinModifier(spinModifier).setPokeball(type.getBallType()).build();  AsyncServerRequest serverRequest=new AsyncServerRequest(RequestType.CATCH_POKEMON,reqMsg);  return catchPokemonAsync(serverRequest);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static void executeGraph(LoadModel loadModel,String storeLocation,String kettleHomePath) throws Exception {  System.setProperty("KETTLE_HOME",kettleHomePath);  new File(storeLocation).mkdirs();  String outPutLoc=storeLocation + "/etl";  String databaseName=loadModel.getDatabaseName();  String tableName=loadModel.getTableName();  String tempLocationKey=databaseName + '_' + tableName+ "_1";  CarbonProperties.getInstance().addProperty(tempLocationKey,storeLocation);  CarbonProperties.getInstance().addProperty("store_output_location",outPutLoc);  CarbonProperties.getInstance().addProperty("send.signal.load","false");  CarbonProperties.getInstance().addProperty("carbon.is.columnar.storage","true");  CarbonProperties.getInstance().addProperty("carbon.dimension.split.value.in.columnar","1");  CarbonProperties.getInstance().addProperty("carbon.is.fullyfilled.bits","true");  CarbonProperties.getInstance().addProperty("is.int.based.indexer","true");  CarbonProperties.getInstance().addProperty("aggregate.columnar.keyblock","true");  CarbonProperties.getInstance().addProperty("high.cardinality.value","100000");  CarbonProperties.getInstance().addProperty("is.compressed.keyblock","false");  CarbonProperties.getInstance().addProperty("carbon.leaf.node.size","120000");  String fileNamePrefix="";  String graphPath=outPutLoc + File.separator + loadModel.getDatabaseName()+ File.separator+ tableName+ File.separator+ 0+ File.separator+ 1+ File.separator+ tableName+ ".ktr";  File path=new File(graphPath);  if (path.exists()) {    path.delete();  }  DataProcessTaskStatus dataProcessTaskStatus=new DataProcessTaskStatus(databaseName,tableName);  dataProcessTaskStatus.setCsvFilePath(loadModel.getFactFilePath());  SchemaInfo info=new SchemaInfo();  BlockDetails blockDetails=new BlockDetails(loadModel.getFactFilePath(),0,new File(loadModel.getFactFilePath()).length(),new String[]{"localhost"});  GraphGenerator.blockInfo.put("qwqwq",new BlockDetails[]{blockDetails});  dataProcessTaskStatus.setBlocksID("qwqwq");  dataProcessTaskStatus.setEscapeCharacter("\\");  dataProcessTaskStatus.setQuoteCharacter("\"");  dataProcessTaskStatus.setCommentCharacter("#");  info.setDatabaseName(databaseName);  info.setTableName(tableName);  generateGraph(dataProcessTaskStatus,info,loadModel.getTableName(),"0",loadModel.getSchema(),null,loadModel.getLoadMetadataDetails());  DataGraphExecuter graphExecuter=new DataGraphExecuter(dataProcessTaskStatus);  graphExecuter.executeGraph(graphPath,new ArrayList<String>(CarbonCommonConstants.CONSTANT_SIZE_TEN),info,"0",loadModel.getSchema());  writeLoadMetadata(loadModel.schema,loadModel.getTableName(),loadModel.getTableName(),new ArrayList<LoadMetadataDetails>());  String segLocation=storeLocation + "/" + databaseName+ "/"+ tableName+ "/Fact/Part0/Segment_0";  File file=new File(segLocation);  File factFile=null;  File[] folderList=file.listFiles();  File folder=null;  for (int i=0; i < folderList.length; i++) {    if (folderList[i].isDirectory()) {      folder=folderList[i];    }  }  if (folder.isDirectory()) {    File[] files=folder.listFiles();    for (int i=0; i < files.length; i++) {      if (!files[i].isDirectory() && files[i].getName().startsWith("part")) {        factFile=files[i];        break;      }    }    factFile.renameTo(new File(segLocation + "/" + factFile.getName()));    CarbonUtil.deleteFoldersAndFiles(folder);  }}  }
class C{  private void findEigenVectorsFromSchur(final SchurTransformer schur) throws MathRuntimeException {  final double[][] matrixT=schur.getT().getData();  final double[][] matrixP=schur.getP().getData();  final int n=matrixT.length;  double norm=0.0;  for (int i=0; i < n; i++) {    for (int j=FastMath.max(i - 1,0); j < n; j++) {      norm+=FastMath.abs(matrixT[i][j]);    }  }  if (Precision.equals(norm,0.0,EPSILON)) {    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_NORM);  }  double r=0.0;  double s=0.0;  double z=0.0;  for (int idx=n - 1; idx >= 0; idx--) {    double p=realEigenvalues[idx];    double q=imagEigenvalues[idx];    if (Precision.equals(q,0.0)) {      int l=idx;      matrixT[idx][idx]=1.0;      for (int i=idx - 1; i >= 0; i--) {        double w=matrixT[i][i] - p;        r=0.0;        for (int j=l; j <= idx; j++) {          r+=matrixT[i][j] * matrixT[j][idx];        }        if (Precision.compareTo(imagEigenvalues[i],0.0,EPSILON) < 0) {          z=w;          s=r;        } else {          l=i;          if (Precision.equals(imagEigenvalues[i],0.0)) {            if (w != 0.0) {              matrixT[i][idx]=-r / w;            } else {              matrixT[i][idx]=-r / (Precision.EPSILON * norm);            }          } else {            double x=matrixT[i][i + 1];            double y=matrixT[i + 1][i];            q=(realEigenvalues[i] - p) * (realEigenvalues[i] - p) + imagEigenvalues[i] * imagEigenvalues[i];            double t=(x * s - z * r) / q;            matrixT[i][idx]=t;            if (FastMath.abs(x) > FastMath.abs(z)) {              matrixT[i + 1][idx]=(-r - w * t) / x;            } else {              matrixT[i + 1][idx]=(-s - y * t) / z;            }          }          double t=FastMath.abs(matrixT[i][idx]);          if ((Precision.EPSILON * t) * t > 1) {            for (int j=i; j <= idx; j++) {              matrixT[j][idx]/=t;            }          }        }      }    } else     if (q < 0.0) {      int l=idx - 1;      if (FastMath.abs(matrixT[idx][idx - 1]) > FastMath.abs(matrixT[idx - 1][idx])) {        matrixT[idx - 1][idx - 1]=q / matrixT[idx][idx - 1];        matrixT[idx - 1][idx]=-(matrixT[idx][idx] - p) / matrixT[idx][idx - 1];      } else {        final Complex result=cdiv(0.0,-matrixT[idx - 1][idx],matrixT[idx - 1][idx - 1] - p,q);        matrixT[idx - 1][idx - 1]=result.getReal();        matrixT[idx - 1][idx]=result.getImaginary();      }      matrixT[idx][idx - 1]=0.0;      matrixT[idx][idx]=1.0;      for (int i=idx - 2; i >= 0; i--) {        double ra=0.0;        double sa=0.0;        for (int j=l; j <= idx; j++) {          ra+=matrixT[i][j] * matrixT[j][idx - 1];          sa+=matrixT[i][j] * matrixT[j][idx];        }        double w=matrixT[i][i] - p;        if (Precision.compareTo(imagEigenvalues[i],0.0,EPSILON) < 0) {          z=w;          r=ra;          s=sa;        } else {          l=i;          if (Precision.equals(imagEigenvalues[i],0.0)) {            final Complex c=cdiv(-ra,-sa,w,q);            matrixT[i][idx - 1]=c.getReal();            matrixT[i][idx]=c.getImaginary();          } else {            double x=matrixT[i][i + 1];            double y=matrixT[i + 1][i];            double vr=(realEigenvalues[i] - p) * (realEigenvalues[i] - p) + imagEigenvalues[i] * imagEigenvalues[i] - q * q;            final double vi=(realEigenvalues[i] - p) * 2.0 * q;            if (Precision.equals(vr,0.0) && Precision.equals(vi,0.0)) {              vr=Precision.EPSILON * norm * (FastMath.abs(w) + FastMath.abs(q) + FastMath.abs(x)+ FastMath.abs(y)+ FastMath.abs(z));            }            final Complex c=cdiv(x * r - z * ra + q * sa,x * s - z * sa - q * ra,vr,vi);            matrixT[i][idx - 1]=c.getReal();            matrixT[i][idx]=c.getImaginary();            if (FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs(q))) {              matrixT[i + 1][idx - 1]=(-ra - w * matrixT[i][idx - 1] + q * matrixT[i][idx]) / x;              matrixT[i + 1][idx]=(-sa - w * matrixT[i][idx] - q * matrixT[i][idx - 1]) / x;            } else {              final Complex c2=cdiv(-r - y * matrixT[i][idx - 1],-s - y * matrixT[i][idx],z,q);              matrixT[i + 1][idx - 1]=c2.getReal();              matrixT[i + 1][idx]=c2.getImaginary();            }          }          double t=FastMath.max(FastMath.abs(matrixT[i][idx - 1]),FastMath.abs(matrixT[i][idx]));          if ((Precision.EPSILON * t) * t > 1) {            for (int j=i; j <= idx; j++) {              matrixT[j][idx - 1]/=t;              matrixT[j][idx]/=t;            }          }        }      }    }  }  for (int j=n - 1; j >= 0; j--) {    for (int i=0; i <= n - 1; i++) {      z=0.0;      for (int k=0; k <= FastMath.min(j,n - 1); k++) {        z+=matrixP[i][k] * matrixT[k][j];      }      matrixP[i][j]=z;    }  }  eigenvectors=new ArrayRealVector[n];  final double[] tmp=new double[n];  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++) {      tmp[j]=matrixP[j][i];    }    eigenvectors[i]=new ArrayRealVector(tmp);  }}  }
class C{  public ScatterDataSet(List<Entry> yVals,String label){  super(yVals,label);}  }
class C{  public void start(){  try {    new StartHarness().startHarness();  } catch (  Exception e) {    throw (e instanceof IllegalStateException) ? (IllegalStateException)e : new IllegalStateException(e);  }}  }
class C{  @Override public boolean isEnabled(){  return true;}  }
class C{  public static double mean(double[] data,int startIndex,int endIndex){  double mean=0;  int total=0;  startIndex=Math.max(startIndex,0);  startIndex=Math.min(startIndex,data.length - 1);  endIndex=Math.max(endIndex,0);  endIndex=Math.min(endIndex,data.length - 1);  if (startIndex > endIndex)   startIndex=endIndex;  for (int i=startIndex; i <= endIndex; i++) {    if (Double.isNaN(data[i]))     throw new IllegalArgumentException("NaN not allowed in mean calculation");    mean+=data[i];    total++;  }  mean/=total;  return mean;}  }
class C{  public void addListener(PrefUpdateInterface listener){  if (!listenerList.contains(listener)) {    listenerList.add(listener);    listener.useAntiAliasUpdated(this.prefData.isUseAntiAlias());  }}  }
class C{  public Builder cloneFrom(DisplayImageOptions options){  imageResOnLoading=options.imageResOnLoading;  imageResForEmptyUri=options.imageResForEmptyUri;  imageResOnFail=options.imageResOnFail;  imageOnLoading=options.imageOnLoading;  imageForEmptyUri=options.imageForEmptyUri;  imageOnFail=options.imageOnFail;  resetViewBeforeLoading=options.resetViewBeforeLoading;  cacheInMemory=options.cacheInMemory;  cacheOnDisc=options.cacheOnDisc;  imageScaleType=options.imageScaleType;  decodingOptions=options.decodingOptions;  delayBeforeLoading=options.delayBeforeLoading;  considerExifParams=options.considerExifParams;  extraForDownloader=options.extraForDownloader;  preProcessor=options.preProcessor;  postProcessor=options.postProcessor;  displayer=options.displayer;  handler=options.handler;  isSyncLoading=options.isSyncLoading;  return this;}  }
class C{  public void centerViewPort(final float[] transformedPts,final View view){  Matrix save=mCenterViewPortMatrixBuffer;  save.reset();  save.set(mMatrixTouch);  final float x=transformedPts[0] - offsetLeft();  final float y=transformedPts[1] - offsetTop();  save.postTranslate(-x,-y);  refresh(save,view,true);}  }
class C{  public SpaceHealthStatus(Throwable[] healthIssueErrors){  this.healthIssueErrors=healthIssueErrors;}  }
class C{  @SuppressWarnings("rawtypes") public static void main(String args[]){  if (args.length < 1) {    System.out.println("Usage: java org.csource.fastdht.Test <config filename>");    return;  }  System.out.println("java.version=" + System.getProperty("java.version"));  String conf_filename=args[0];  try {    ClientGlobal.init(conf_filename);    FastDHTClient client;    KeyInfo keyInfo;    Hashtable stats;    System.out.println("network_timeout=" + ClientGlobal.g_network_timeout + "ms");    System.out.println("charset=" + ClientGlobal.g_charset);    ClientGlobal.g_server_group.print();    client=new FastDHTClient(false);    try {      keyInfo=new KeyInfo("bbs","test","username");      System.out.println("set: " + client.set(keyInfo,"12345678901234"));      System.out.println("get: " + client.get(keyInfo));      System.out.println("inc: " + client.inc(keyInfo,100));      for (int i=0; i < ClientGlobal.g_server_group.servers.length; i++) {        stats=client.stat(i);        if (stats == null) {          continue;        }        System.out.println("server=" + ClientGlobal.g_server_group.servers[i].address.getAddress().getHostAddress() + ":"+ ClientGlobal.g_server_group.servers[i].address.getPort());        System.out.println(stats.toString());      }      ObjectInfo objInfo=new ObjectInfo(keyInfo.getNamespace(),keyInfo.getObjectId());      System.out.println("sub keys: " + Arrays.toString(client.getSubKeys(objInfo)));    }  finally {      client.close();    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  View view=inflater.inflate(R.layout.fragment_home,container,false);  initModel();  initPresenter();  initView(view);  return view;}  }
class C{  public boolean isIgnoreSensors(){  return this.ignoreSensors;}  }
class C{  public String makeLinkWithQueryString(HttpServletRequest request,HttpServletResponse response,String url,Boolean fullPath,Boolean secure,Boolean encode,ConfigXMLReader.RequestResponse requestResponse){  String initialLink=this.makeLink(request,response,url,fullPath,secure,encode);  String queryString=this.makeQueryString(request,requestResponse);  return initialLink + queryString;}  }
class C{  public static Object unmarshalValue(Class type,ObjectInput in) throws IOException, ClassNotFoundException {  if (type.isPrimitive()) {    if (type == int.class)     return in.readInt();    if (type == boolean.class)     return in.readBoolean();    if (type == long.class)     return in.readLong();    if (type == short.class)     return in.readShort();    if (type == float.class)     return in.readFloat();    if (type == double.class)     return in.readDouble();    if (type == char.class)     return in.readChar();    if (type == byte.class)     return in.readByte();    throw new AssertionError("Unrecognized primitive type: " + type);  }  return in.readObject();}  }
class C{  private void updateVideoSessionPlayState(int playbackState){  if (mVideoSession == null) {    return;  }  PlaybackState.Builder playbackStateBuilder=new PlaybackState.Builder();  long currentPosition=getCurrentPosition();  playbackStateBuilder.setState(playbackState,currentPosition,(float)1.0).setActions(getPlaybackStateActions());  mVideoSession.setPlaybackState(playbackStateBuilder.build());}  }
class C{  protected void drawYAxis(Graphics2D gc,Dimension size){  if (inUpdateCoordinates)   return;  if (isTranspose()) {    drawYAxisTransposed(gc,size);    return;  }  final int numberOfClasses=(classNames == null ? 0 : classNames.length);  if (numberOfClasses > 0) {    SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);    gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));    final boolean doDraw=(size == null);    Rectangle bbox=null;    int x0=leftMargin;    int x1=getWidth() - rightMargin;    int y0=getHeight() - bottomMargin;    int y1=topMargin;    if (viewer.getClassesList().isDoClustering())     y1+=topTreeSpace;    int longest=0;    for (    String className : classNames) {      longest=Math.max(longest,Basic.getStringSize(gc,className,gc.getFont()).getSize().width);    }    int right=Math.max(leftMargin,longest + 5);    if (doDraw)     gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));    double yStep=(y0 - y1) / (double)numberOfClasses;    int c=numberOfClasses - 1;    for (    String className : classNames) {      Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();      int x=right - labelSize.width - 4;      int y=(int)Math.round(y0 - (c + 0.5) * yStep);      if (doDraw) {        if (getChartData().getChartSelection().isSelected(null,className)) {          gc.setColor(ProgramProperties.SELECTION_COLOR);          fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);        }        gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.DARK_GRAY));        gc.drawString(className,x,y);      } else {        Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);        if (bbox == null)         bbox=rect; else         bbox.add(rect);      }      if (sgc != null) {        sgc.setCurrentItem(new String[]{null,className});        drawRect(gc,x,y,labelSize.width,labelSize.height,0);        sgc.clearCurrentItem();      }      c--;    }    if (size != null && bbox != null) {      size.setSize(bbox.width + 3,bbox.height);    }  }}  }
class C{  @Override public boolean hasFeature(String feature,String version){  return (feature.equalsIgnoreCase("XS-Loader") && (version == null || version.equals("1.0")) || super.hasFeature(feature,version));}  }
class C{  @Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){  Log.d(TAG,"Obtained cursor.");  if (isAdded()) {    mListOfFavPokemon=PokeCursorManager.getPokemonInDb(cursor,PokeDBContract.FavoritePokemonEntry.TABLE_NAME,PokeDBContract.FavoritePokemonEntry.COLUMN_NUMBER);  }}  }
class C{  public OLSMultipleLinearRegression(){  this(0d);}  }
class C{  public NewsfeedDeleteBanQuery userIds(Integer... value){  return unsafeParam("user_ids",value);}  }
class C{  protected Type(String name){  super(name);}  }
class C{  protected String generateCreateTableSQL(TableModel tableModel){  return generateCreateTableSQL(tableModel.getTableName(),tableModel.getColumnModels(),true);}  }
class C{  public SaveListHeaderIterator(List headers,String name){  if (headers == null) {    throw new IllegalArgumentException("Header list must not be null.");  }  this.allHeaders=headers;  this.headerName=name;  this.currentIndex=findNext(-1);  this.lastIndex=-1;}  }
class C{  public String toString(){  return "ContourGenerator";}  }
class C{  @Override public int read(){  return -1;}  }
class C{  TypeVariableBV typeVariable(Local local){  TypeVariableBV result=typeVariableMap.get(local);  if (result == null) {    int id=typeVariableList.size();    typeVariableList.add(null);    result=new TypeVariableBV(id,this);    typeVariableList.set(id,result);    typeVariableMap.put(local,result);    if (DEBUG) {      G.v().out.println("[LOCAL VARIABLE \"" + local + "\" -> "+ id+ "]");    }  }  return result;}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public void update(){  TileEntity te=(TileEntity)conductor;  World w=te.getWorld();  if (w.isRemote) {    return;  }  createOrJoinConductorSet();  if (isConductorSetLeader) {    conductorSet.update();  }  int seed=((te.getPos().getX() << 4 + te.getPos().getZ()) << 8) + te.getPos().getY();  if (justCreated || (w.getTotalWorldTime() + seed) % 600 == 0) {    justCreated=false;    if (conductorSet.leader == null) {      conductorSet.leader=conductor;    }    Coord here=conductor.getCoord();    for (    IChargeConductor neighbor : here.getAdjacentTEs(IChargeConductor.class)) {      justCreated|=conductorSet.addNeighbor(neighbor.getCharge().conductorSet);    }  }}  }
class C{  public void register(String pattern,String result){  Assert.isTrue(matchers.size() == results.size());  pattern=pattern.trim();  if (pattern.length() == 0) {    return;  }  matchers.add(new StringMatcher(pattern,false,false));  results.add(result);}  }
class C{  public DateParser(DateFormat dateFormat){  m_dfmt=dateFormat;  m_pos=new ParsePosition(0);}  }
class C{  public static UUID playerNameToId(String name){  byte[] bytes=name.toLowerCase().getBytes(StandardCharsets.UTF_8);  byte[] trimmedTo16=Arrays.copyOf(bytes,16);  long leastSigBits=0;  long mostSigBits=0;  for (int i=0; i < 8; i++)   mostSigBits=(mostSigBits << 8) | (trimmedTo16[i] & 0xff);  for (int i=8; i < 16; i++)   leastSigBits=(leastSigBits << 8) | (trimmedTo16[i] & 0xff);  return new UUID(mostSigBits,leastSigBits);}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  String name;  JSONObject jo=new JSONObject();  Object value;  JSONTokener x=new JSONTokener(string);  jo.put("name",x.nextTo('='));  x.next('=');  jo.put("value",x.nextTo(';'));  x.next();  while (x.more()) {    name=unescape(x.nextTo("=;"));    if (x.next() != '=') {      if (name.equals("secure")) {        value=Boolean.TRUE;      } else {        throw x.syntaxError("Missing '=' in cookie parameter.");      }    } else {      value=unescape(x.nextTo(';'));      x.next();    }    jo.put(name,value);  }  return jo;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof BlockInfo)) {    return false;  }  BlockInfo other=(BlockInfo)obj;  if (!info.getSegmentId().equals(other.info.getSegmentId())) {    return false;  }  if (info.getBlockOffset() != other.info.getBlockOffset()) {    return false;  }  if (info.getBlockLength() != info.getBlockLength()) {    return false;  }  if (info.getFilePath() == null && other.info.getFilePath() != null) {    return false;  } else   if (info.getFilePath() != null && other.info.getFilePath() == null) {    return false;  } else   if (!info.getFilePath().equals(other.info.getFilePath())) {    return false;  }  return true;}  }
class C{  public static Object evaluate(String expression,Map<String,Object> vars){  return evaluate(expression,vars,false);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private ProcessFunctionParameterValue createProcessDescription(String type,String defaultValue,int minOccurs,int maxOccurs){  ProcessDescriptionType process=Wps10FactoryImpl.init().createProcessDescriptionType();  CodeType codeType=Ows11FactoryImpl.init().createCodeType();  codeType.setValue("JTS:area");  process.setIdentifier(codeType);  DataInputsType dataInputs=Wps10FactoryImpl.init().createDataInputsType();  EList dataInputList=dataInputs.getInput();  InputDescriptionType inputDescription=Wps10FactoryImpl.init().createInputDescriptionType();  CodeType codeType2=Ows11FactoryImpl.init().createCodeType();  codeType2.setValue("dummyParameter");  inputDescription.setIdentifier(codeType2);  inputDescription.setMinOccurs(BigInteger.valueOf(minOccurs));  inputDescription.setMaxOccurs(BigInteger.valueOf(maxOccurs));  LiteralInputType literal=Wps10FactoryImpl.init().createLiteralInputType();  DomainMetadataType domainType=Ows11FactoryImpl.init().createDomainMetadataType();  domainType.setValue(type);  literal.setDefaultValue(defaultValue);  literal.setDataType(domainType);  inputDescription.setLiteralData(literal);  dataInputList.add(inputDescription);  process.setDataInputs(dataInputs);  CustomProcessFunction obj=new CustomProcessFunction();  List<ProcessFunctionParameterValue> valueList=obj.extractParameters(process);  assertEquals(type,1,valueList.size());  ProcessFunctionParameterValue value=valueList.get(0);  assertEquals(type,minOccurs,value.minOccurences);  assertEquals(type,maxOccurs,value.maxOccurences);  return value;}  }
class C{  protected static int bandwidth2kernelLength(double normalisedTransitionBandwidth){  int l=(int)(4 / normalisedTransitionBandwidth);  if (l % 2 == 0)   l++;  return l;}  }
class C{  public StringProperty lastReceivedTimestampProperty(){  return lastReceivedTimestamp;}  }
class C{  public SQLQuery<?> build(ITemplateHolder template,String typeName,ITypeDesc typeDesc){  if (typeDesc == null)   return new SQLQuery<Object>(typeName,"");  return template.toSQLQuery(typeDesc);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_RESISTED_MAGIC_MY(String skillcaster){  return new SM_SYSTEM_MESSAGE(1210003,skillcaster);}  }
class C{  public static Collection<Vector2D> reducePoints(final Collection<Vector2D> points){  int size=0;  Vector2D minX=null;  Vector2D maxX=null;  Vector2D minY=null;  Vector2D maxY=null;  for (  Vector2D p : points) {    if (minX == null || p.getX() < minX.getX()) {      minX=p;    }    if (maxX == null || p.getX() > maxX.getX()) {      maxX=p;    }    if (minY == null || p.getY() < minY.getY()) {      minY=p;    }    if (maxY == null || p.getY() > maxY.getY()) {      maxY=p;    }    size++;  }  if (size < 4) {    return points;  }  final List<Vector2D> quadrilateral=buildQuadrilateral(minY,maxX,maxY,minX);  if (quadrilateral.size() < 3) {    return points;  }  final List<Vector2D> reducedPoints=new ArrayList<Vector2D>(quadrilateral);  for (  final Vector2D p : points) {    if (!insideQuadrilateral(p,quadrilateral)) {      reducedPoints.add(p);    }  }  return reducedPoints;}  }
class C{  public VideoSaveQuery privacyView(String... value){  return unsafeParam("privacy_view",value);}  }
class C{  public int compareTo(Fraction object){  long nOd=((long)numerator) * object.denominator;  long dOn=((long)denominator) * object.numerator;  return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);}  }
class C{  private void startFeedbackActivity(@NonNull Result result){  Intent intent=FeedbackActivity.newIntent(activity,result.getScreenshotUri(),result.getData());  activity.startActivity(intent);}  }
class C{  synchronized double acquire(double minTokens,double maxTokens){  refill();  double avail=Math.floor(Math.min(maxTokens,tokens));  if (avail >= minTokens) {    tokens-=avail;    return avail;  }  return 0.0f;}  }
class C{  public static String escape(String url) throws UnsupportedEncodingException {  return escape(url,"UTF-8");}  }
class C{  public static <K,V>ConcurrentHashMap<K,V> concurrentHashMap(int initialCapacity){  return new ConcurrentHashMap<K,V>(initialCapacity);}  }
class C{  public void onTransactionConsolidationFailure(ConsolidationParticipantData participantData){  participantData.commit();}  }
class C{  public IdQuery(Class<T> type,Object id,QueryResultType queryResultType){  this(type.getName(),id,null,queryResultType,0);}  }
class C{  public long queueNewOperation(Intent operationIntent){  Pair<Target,RemoteOperation> itemToQueue=newOperation(operationIntent);  if (itemToQueue != null) {    mServiceHandler.mPendingOperations.add(itemToQueue);    startService(new Intent(OperationsService.this,OperationsService.class));    return itemToQueue.second.hashCode();  } else {    return Long.MAX_VALUE;  }}  }
class C{  private ConfigurationReport applyConfiguration(final int configId,final String configName,final List<ConfigurationElement> configElements,final ConfigProgressMonitor configProgressMonitor,final boolean isDBConfig){  ConfigurationReport report=new ConfigurationReport(configId,configName,"");  Map<Long,ConfigurationElementReport> daqReportPlaceholder=new HashMap<Long,ConfigurationElementReport>();  Map<Long,ConfigurationElement> elementPlaceholder=new HashMap<Long,ConfigurationElement>();  Map<Long,List<Change>> processLists=new HashMap<Long,List<Change>>();  if (configProgressMonitor != null) {    configProgressMonitor.serverTotalParts(configElements.size());  }  try {    clusterCache.acquireWriteLockOnKey(this.cachePersistenceLock);    if (!isDBConfig && runInParallel(configElements)) {      log.debug("Enter parallel configuration");      configElements.parallelStream().forEach(null);    } else {      log.debug("Enter serialized configuration");      configElements.stream().forEach(null);    }  }  finally {    clusterCache.releaseWriteLockOnKey(this.cachePersistenceLock);  }  if (daqConfigEnabled) {    if (configProgressMonitor != null) {      configProgressMonitor.daqTotalParts(processLists.size());    }    log.info(configId + " Reconfiguring " + processLists.keySet().size()+ " processes ...");    AtomicInteger daqProgressCounter=new AtomicInteger(1);    for (    Long processId : processLists.keySet()) {      if (!cancelRequested) {        List<Change> processChangeEvents=processLists.get(processId);        if (processFacade.isRunning(processId) && !processFacade.isRebootRequired(processId)) {          try {            log.trace(configId + " Sending " + processChangeEvents.size()+ " change events to process "+ processId+ "...");            ConfigurationChangeEventReport processReport=processCommunicationManager.sendConfiguration(processId,processChangeEvents);            if (!processReport.getChangeReports().isEmpty()) {              log.trace(configId + " Received " + processReport.getChangeReports().size()+ " back from process.");            } else {              log.trace(configId + " Received 0 reports back from process");            }            for (            ChangeReport changeReport : processReport.getChangeReports()) {              ConfigurationElementReport convertedReport=ConfigurationReportConverter.fromProcessReport(changeReport,daqReportPlaceholder.get(changeReport.getChangeId()));              daqReportPlaceholder.get(changeReport.getChangeId()).addSubReport(convertedReport);              if (changeReport.isReboot()) {                report.addProcessToReboot(processCache.get(processId).getName());                elementPlaceholder.get(changeReport.getChangeId()).setDaqStatus(Status.RESTART);              } else               if (changeReport.isFail()) {                log.debug(configId + " changeRequest failed at process " + processCache.get(processId).getName());                report.addStatus(Status.FAILURE);                report.setStatusDescription("Failed to apply the configuration successfully. See details in the report below.");                elementPlaceholder.get(changeReport.getChangeId()).setDaqStatus(Status.FAILURE);              } else {                if (elementPlaceholder.get(changeReport.getChangeId()).getDaqStatus().equals(Status.RESTART)) {                  elementPlaceholder.get(changeReport.getChangeId()).setDaqStatus(Status.OK);                }              }            }          } catch (          Exception e) {            String errorMessage="Error during DAQ reconfiguration: unsuccessful application of configuration (possible timeout) to Process " + processCache.get(processId).getName();            log.error(errorMessage,e);            processFacade.requiresReboot(processId,true);            report.addProcessToReboot(processCache.get(processId).getName());            report.addStatus(Status.FAILURE);            report.setStatusDescription(report.getStatusDescription() + errorMessage + "\n");          }        } else {          processFacade.requiresReboot(processId,true);          report.addProcessToReboot(processCache.get(processId).getName());          report.addStatus(Status.RESTART);        }        if (configProgressMonitor != null) {          configProgressMonitor.onDaqProgress(daqProgressCounter.getAndIncrement());        }      } else {        log.info("Interrupting configuration " + configId + " due to cancel request.");      }    }  } else {    log.debug("DAQ runtime reconfiguration not enabled - setting required restart flags");    if (!processLists.isEmpty()) {      report.addStatus(Status.RESTART);      for (      Long processId : processLists.keySet()) {        processFacade.requiresReboot(processId,true);        report.addProcessToReboot(processCache.get(processId).getName());      }    }  }  for (  ConfigurationElement element : configElements) {    configurationDAO.saveStatusInfo(element);  }  configurationDAO.markAsApplied(configId);  log.info("Finished applying configuraton " + configId);  report.normalize();  return report;}  }
class C{  public synchronized void notifyChange(){  if (mCallbacks != null) {    mCallbacks.notifyCallbacks(this,0,null);  }}  }
class C{  public XMLParser(final String namespace,final String schema) throws XMLException {  try {    JAXBContext jc=JAXBContext.newInstance(namespace);    marshaller=jc.createMarshaller();    marshaller.setSchema(XMLSchemaUtils.createSchema(schema));    unmarshaller=jc.createUnmarshaller();    unmarshaller.setSchema(XMLSchemaUtils.createSchema(schema));  } catch (  JAXBException e) {    throw new XMLException("Cannot instantiate marshaller/unmarshaller for " + namespace,e);  }}  }
class C{  @Override public void seek(final long offset) throws IOException {  pos=(int)offset;}  }
class C{  public final boolean canGetInt(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetInt());}  }
class C{  @Override public void xmlDecl(String version,String encoding,String standalone,Augmentations augs) throws XNIException {  fGrammarBucket.setStandalone(standalone != null && standalone.equals("yes"));  if (fDocumentHandler != null) {    fDocumentHandler.xmlDecl(version,encoding,standalone,augs);  }}  }
class C{  private boolean hasLegalRootContainer(Node node){  if (node == null)   return false;  Node rootContainer=getRootContainer(node);switch (rootContainer.getNodeType()) {case Node.ATTRIBUTE_NODE:case Node.DOCUMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:    return true;}return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200671,skillcaster,skillname);}  }
class C{  public boolean this_edges(){  return soot.PhaseOptions.getBoolean(options,"this-edges");}  }
class C{  public SerialMessage generateAndBuildNonceReport(){  Nonce nonce=ourNonceTable.generateNewUniqueNonceForDevice();  SerialMessage message=new SerialMessage(node.getNodeId(),SerialMessageClass.SendData,SerialMessageType.Request,SerialMessageClass.ApplicationCommandHandler,SerialMessagePriority.Immediate);  ByteArrayOutputStream baos=new ByteArrayOutputStream();  baos.write((byte)node.getNodeId());  baos.write((byte)10);  baos.write((byte)ZWaveSecurityCommandClass.getSecurityCommandClass().getKey());  baos.write(ZWaveSecurityCommandClass.SECURITY_NONCE_REPORT);  try {    baos.write(nonce.getNonceBytes());    message.setMessagePayload(baos.toByteArray());    if (ZWaveSecurityCommandClass.OVERRIDE_DEFAULT_TRANSMIT_OPTIONS) {      logger.trace("NODE {}: Using custom transmit options",node.getNodeId());      message.setTransmitOptions(ZWaveController.TRANSMIT_OPTION_ACK | ZWaveController.TRANSMIT_OPTION_AUTO_ROUTE);    }  } catch (  IOException e) {    logger.error("NODE {}: Error during Security sendNonceReport.",node.getNodeId(),e);    return null;  }  return message;}  }
class C{  @Override public void initMutationEvent(String typeArg,boolean canBubbleArg,boolean cancelableArg,Node relatedNodeArg,String prevValueArg,String newValueArg,String attrNameArg,short attrChangeArg){  relatedNode=relatedNodeArg;  prevValue=prevValueArg;  newValue=newValueArg;  attrName=attrNameArg;  attrChange=attrChangeArg;  super.initEvent(typeArg,canBubbleArg,cancelableArg);}  }
class C{  public void select(List<String> columnNames) throws QueryPlanException {  if (!this.selectColumns.isEmpty()) {    throw new QueryPlanException("Cannot add more than one select operator to this query.");  }  if (columnNames.isEmpty()) {    throw new QueryPlanException("Cannot select no columns.");  }  this.selectColumns=columnNames;}  }
class C{  public boolean isApplicable(){  return getViewer().isPCoATab();}  }
class C{  void calculateAverage(long period){  final long count=metric.getTotal();  if (count != 0) {    average=(count - previousCount) / (period / 1000.0);    previousCount=count;  }}  }
class C{  public static void clearMediaNotifications(Context context){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);  Set<String> notificationIds=sharedPreferences.getStringSet(WEBRTC_NOTIFICATION_IDS,null);  if (notificationIds == null || notificationIds.isEmpty())   return;  context.startService(new Intent(context,MediaCaptureNotificationService.class));}  }
class C{  public Boolean createCustomerReview(EntityManager em,String customerReviewId){  Boolean status=true;  Date date=null;  CustomerReview customerReview=new CustomerReview();  Calendar cal=Calendar.getInstance();  DateFormat formatter=new SimpleDateFormat("yyyymmdd");  try {    date=formatter.parse("19770707");    cal.setTime(date);    em.getTransaction().begin();    customerReview.setCustomerReviewId(customerReviewId);    customerReview.setComment("This product is really great. I like especially the design, speed and performance");    customerReview.setRating(5);    customerReview.setFirstName("John");    customerReview.setLastName("Smith");    customerReview.setProductId("HT-2001");    customerReview.setCreationDate(cal);    em.persist(customerReview);    em.getTransaction().commit();  } catch (  Exception e) {    status=false;    logger.error("Error occured during creation of customer review. Detailed info: " + e);  }  return status;}  }
class C{  public static int longestCommonSubstring(String s,String t){  int d[][];  int n;  int m;  int i;  int j;  char s_i;  char t_j;  n=s.length();  m=t.length();  if (n == 0) {    return 0;  }  if (m == 0) {    return 0;  }  d=new int[n + 1][m + 1];  for (i=0; i <= n; i++) {    d[i][0]=0;  }  for (j=0; j <= m; j++) {    d[0][j]=0;  }  for (i=1; i <= n; i++) {    s_i=s.charAt(i - 1);    for (j=1; j <= m; j++) {      t_j=t.charAt(j - 1);      if (s_i == t_j) {        d[i][j]=SloppyMath.max(d[i - 1][j],d[i][j - 1],d[i - 1][j - 1] + 1);      } else {        d[i][j]=Math.max(d[i - 1][j],d[i][j - 1]);      }    }  }  return d[n][m];}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public static void registerItem(ResourceLocation id,Item item){  AutomaticNamespacedRegistry<ResourceLocation,Item> registry=Registries.get(Item.class);  if (item == null) {    throw new NullPointerException("Attempted to register a null item");  } else   if (id == null) {    throw new NullPointerException("Attempted to register an item with a null ID");  } else   if (registry.containsKey(id)) {    throw new IllegalArgumentException(String.format("The item ID %s has already been registered",id));  }  registry.register(id,item);}  }
class C{  protected OrdersGetAmountQuery votes(String... value){  return unsafeParam("votes",value);}  }
class C{  protected boolean matchesSequence(TokenKind... kinds){  PsiBuilder.Marker marker=builder.mark();  for (  TokenKind kind : kinds) {    if (!matches(kind)) {      marker.rollbackTo();      return false;    }  }  marker.drop();  return true;}  }
class C{  public void encoding(){  outputRes();  rdp_encoding();}  }
class C{  public QueryTemplatePacket buildTemplate(LiteralNode node,QueryColumnData queryColumnData,short op,short nullOp,FunctionCallDescription functionCallDescription) throws SQLException {  QueryTableData tableData=queryColumnData.getColumnTableData();  ITypeDesc typeDesc=tableData.getTypeDesc();  Object value=node.getConvertedObject(typeDesc,queryColumnData.getColumnPath());  return new QueryTemplatePacket(tableData,query.getQueryResultType(),queryColumnData.getColumnPath(),toRange(queryColumnData.getColumnPath(),functionCallDescription,value,value == null ? nullOp : op));}  }
class C{  @Override public boolean equals(Object object){  if (object == this) {    return true;  }  if (object instanceof ResizableDoubleArray == false) {    return false;  }  boolean result=true;  final ResizableDoubleArray other=(ResizableDoubleArray)object;  result=result && (other.contractionCriterion == contractionCriterion);  result=result && (other.expansionFactor == expansionFactor);  result=result && (other.expansionMode == expansionMode);  result=result && (other.numElements == numElements);  result=result && (other.startIndex == startIndex);  if (!result) {    return false;  } else {    return Arrays.equals(internalArray,other.internalArray);  }}  }
class C{  public static byte[] decompressContents(byte[] fullMessage) throws DecompressionException {  InflaterInputStream gzipReader=null;  ByteArrayOutputStream uncompressed;  try {    gzipReader=new GZIPInputStream(new ByteArrayInputStream(fullMessage));    uncompressed=new ByteArrayOutputStream(fullMessage.length);    byte[] decompressBuffer=new byte[DECOMPRESS_BUFFER_SIZE];    int bytesRead;    while ((bytesRead=gzipReader.read(decompressBuffer)) > -1) {      uncompressed.write(decompressBuffer,0,bytesRead);    }    fullMessage=uncompressed.toByteArray();  } catch (  IOException e) {    throw new DecompressionException("Unable to decompress response",e);  } finally {    try {      if (gzipReader != null) {        gzipReader.close();      }    } catch (    IOException e) {      log.warn("Unable to close gzip stream",e);    }  }  return fullMessage;}  }
class C{  public boolean isSetTraceId(){  return this.traceId != null;}  }
class C{  private int klattRule5(Element segment){  Element token=getToken(segment);  if (isPolysyllabic(token)) {    if (isInNucleus(segment)) {      return getPropertyAsInteger("rule5.nucleus");    }  }  return 100;}  }
class C{  static boolean objectsEquality(Object a,Object b){  if (a == null)   return b == null;  if (a == b)   return true;  return (a.equals(b));}  }
class C{  public Matrix arrayTimesEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] * B.A[i][j];    }  }  return this;}  }
class C{  protected boolean merge(Local local,Constant constant){  Constant current=localToConstant.get(local);  if (current instanceof BottomConstant)   return false;  if (current instanceof TopConstant) {    localToConstant.put(local,constant);    return true;  }  if (current.equals(constant))   return false;  localToConstant.put(local,BottomConstant.v());  return true;}  }
class C{  public void writeDataFile(OutputStream outStream) throws DataFileException {  writeRecords(outStream,this.records);}  }
class C{  public boolean isUptoDate(){  return uptodate;}  }
class C{  @Override public boolean processPathSpecificationToInclude(Project project,@Nullable VirtualFile targetFile,final VirtualFile fileToImport,OCResolveRootAndConfiguration rootAndConfiguration,Processor<ImportSpecification> processor){  String name=fileToImport.getName();  String path=fileToImport.getPath();  VirtualFile targetFileParent=targetFile != null ? targetFile.getParent() : null;  if (targetFileParent != null && targetFileParent.equals(fileToImport.getParent())) {    if (!processor.process(new ImportSpecification(name,ImportSpecification.Kind.PROJECT_HEADER))) {      return false;    }  }  for (  PsiFileSystemItem root : rootAndConfiguration.getProjectHeadersRoots().getRoots()) {    if (!(root instanceof IncludedHeadersRoot)) {      continue;    }    VirtualFile rootBase=root.getVirtualFile();    String relativePath=VfsUtilCore.getRelativePath(fileToImport,rootBase);    if (relativePath == null) {      continue;    }    if (!processor.process(new ImportSpecification(relativePath,ImportSpecification.Kind.PROJECT_HEADER))) {      return false;    }  }  return true;}  }
class C{  public UsersSearchQuery schoolCity(Integer value){  return unsafeParam("school_city",value);}  }
class C{  public SwipeBackImplementor(SwipeBackView view){  this.view=view;}  }
class C{  public XmlMerger(File source,File target){  this(source,target,source.getParentFile());}  }
class C{  private static void addHorizontalSmallSpring(Path2D.Float path,int y0,int x1,int x2){  int springHeight=2;  int springWidth=2;  int distance=Math.abs(x2 - x1);  int numSprings=(distance / (springHeight));  int leftOver=(distance - (numSprings * springHeight)) / 2;  path.lineTo(x1,y0);  path.lineTo(x1 - leftOver,y0 - leftOver);  int count=0;  if (x1 > x2) {    for (int x=x1 - leftOver; x > x2 + leftOver; x-=springHeight) {      int y=(count % 2 == 0) ? y0 - springWidth : y0 + springWidth;      path.lineTo(x,y);      count++;    }  } else {    for (int x=x1 + leftOver; x < x2 - leftOver; x+=springHeight) {      int y=(count % 2 == 0) ? y0 - springWidth : y0 + springWidth;      path.lineTo(x,y);      count++;    }  }  path.lineTo(x2 + leftOver,y0);  path.lineTo(x2,y0);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  protected VideoGetCatalogSectionQuery sectionId(String value){  return unsafeParam("section_id",value);}  }
class C{  public static String collectionToDelimitedString(Collection<String> coll,String delim){  return collectionToDelimitedString(coll,delim,"","");}  }
class C{  public void initializeImages(URL baseURL,int iconSet){  createImageDescriptor(ISVNUIConstants.IMG_REPOSITORY,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_REFRESH,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_REFRESH_ENABLED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_REFRESH_DISABLED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_SYNCPANE,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_PROPERTIES,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_URL_SOURCE_REPO,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_GET_ALL,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_GET_NEXT,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_FILTER_HISTORY,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_FILTER_HISTORY_DISABLED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_COLLAPSE_ALL,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_COLLAPSE_ALL_ENABLED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_EXPAND_ALL,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_EXPAND_ALL_ENABLED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_NEWLOCATION,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_CLOUDFORGE,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_BRANCH,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_CLEAR,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_CLEAR_DISABLED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_BRANCHES_CATEGORY,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_VERSIONS_CATEGORY,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_PROJECT_VERSION,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_WARNING,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_SVN,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_RESOLVE_TREE_CONFLICT,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_SHARE,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_SYNCH,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_DIFF,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_LOCATION,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_WIZBAN_NEW_FOLDER,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_QUESTIONABLE,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_CONFLICTED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_ADDED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_MOVED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_EXTERNAL,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_LOCKED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_NEEDSLOCK,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_DELETED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_SWITCHED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_PROPERTY_CHANGED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_TEXT_CONFLICTED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_TREE_CONFLICT,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_PROPERTY_CONFLICTED,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_UPDATE_ALL,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_COMMIT_ALL,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_SHOW_DELETED,baseURL);  createImageDescriptor("glyphs/glyph1.gif",baseURL);  createImageDescriptor("glyphs/glyph2.gif",baseURL);  createImageDescriptor("glyphs/glyph3.gif",baseURL);  createImageDescriptor("glyphs/glyph4.gif",baseURL);  createImageDescriptor("glyphs/glyph5.gif",baseURL);  createImageDescriptor("glyphs/glyph6.gif",baseURL);  createImageDescriptor("glyphs/glyph7.gif",baseURL);  createImageDescriptor("glyphs/glyph8.gif",baseURL);  createImageDescriptor(ISVNUIConstants.IMG_FILEADD_PENDING,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_FILEDELETE_PENDING,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_FOLDERADD_PENDING,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_FOLDERDELETE_PENDING,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_FILEMODIFIED_PENDING,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_FOLDERMODIFIED_PENDING,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_FOLDER,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_AFFECTED_PATHS_TABLE_MODE,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_AFFECTED_PATHS_FLAT_MODE,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_AFFECTED_PATHS_COMPRESSED_MODE,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_AFFECTED_PATHS_TREE_MODE,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_AFFECTED_PATHS_HORIZONTAL_LAYOUT,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_AFFECTED_PATHS_VERTICAL_LAYOUT,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_COMMENTS,baseURL);  createImageDescriptor(ISVNUIConstants.IMG_SVN_CONSOLE,baseURL);switch (iconSet) {case ISVNUIConstants.MENU_ICON_SET_TORTOISESVN:    createImageDescriptor(ISVNUIConstants.IMG_MENU_UPDATE,"tortoise/update.gif",baseURL);  createImageDescriptor(ISVNUIConstants.IMG_MENU_COMMIT,"tortoise/commit.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_SYNC,"obj16/synch_synch.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_REVERT,"tortoise/revert.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_ADD,"tortoise/add.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_IGNORE,"tortoise/ignore.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_PROPSET,"ctool16/svn_prop_add.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_SHOWPROPERTY,"cview16/props_view.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_RELOCATE,"tortoise/relocate.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_CHECKOUTAS,"tortoise/checkout.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_IMPORTFOLDER,"tortoise/import.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_LOCK,"tortoise/lock.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_UNLOCK,"tortoise/unlock.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_CLEANUP,"tortoise/cleanup.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_EXPORT,"tortoise/export.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_DIFF,"tortoise/diff.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_PROPDELETE,"ctool16/delete.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_DELETE,"ctool16/delete.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_BRANCHTAG,"tortoise/copy.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_MOVE,"tortoise/rename.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_COMPARE,"tortoise/compare.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_RESOLVE,"tortoise/resolve.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_EDITCONFLICT,"tortoise/conflict.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_SWITCH,"tortoise/switch.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_MARKMERGED,"tortoise/merge.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_MERGE,"tortoise/merge.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_SHOWHISTORY,"cview16/history_view.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_ANNOTATE,"cview16/annotate_view.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_COPY,"ctool16/copy_edit.gif",baseURL);break;case ISVNUIConstants.MENU_ICON_SET_SUBVERSIVE:createImageDescriptor(ISVNUIConstants.IMG_MENU_UPDATE,"subversive/update.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_COMMIT,"subversive/commit.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_SYNC,"subversive/synch.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_REVERT,"subversive/revert.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_CHECKOUTAS,"subversive/checkout.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_LOCK,"subversive/lock.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_UNLOCK,"subversive/unlock.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_BRANCHTAG,"subversive/branch.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_SWITCH,"subversive/switch.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_MERGE,"subversive/merge.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_SHOWHISTORY,"subversive/showhistory.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_EXPORT,"subversive/export.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_IMPORTFOLDER,"subversive/import.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_ANNOTATE,"subversive/annotate.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_COPY,"subversive/copy.gif",baseURL);break;default :createImageDescriptor(ISVNUIConstants.IMG_MENU_MERGE,"tortoise/merge.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_SHOWHISTORY,"cview16/history_view.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_ANNOTATE,"cview16/annotate_view.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_COPY,"ctool16/copy_edit.gif",baseURL);createImageDescriptor(ISVNUIConstants.IMG_MENU_SHOWPROPERTY,"cview16/props_view.gif",baseURL);break;}}  }
class C{  public Single<Void> fetch(){  int cache=0;  if (!this.firebaseRemoteConfig.getInfo().getConfigSettings().isDeveloperModeEnabled()) {    cache=3600;  }  return observeSingleValue(this.firebaseRemoteConfig.fetch(cache));}  }
class C{  public AccountGetAppPermissionsQuery(VkApiClient client,UserActor actor,int userId){  super(client,"account.getAppPermissions",Integer.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  boolean isPresent(String name){  if (f == null) {    return false;  } else {    return getFeature(name) != null;  }}  }
class C{  protected void layout(NodeItem n,double r,double theta1,double theta2){  double dtheta=(theta2 - theta1);  double dtheta2=dtheta / 2.0;  double width=((Params)n.get(PARAMS)).width;  double cfrac, nfrac=0.0;  Iterator childIter=sortedChildren(n);  while (childIter != null && childIter.hasNext()) {    NodeItem c=(NodeItem)childIter.next();    Params cp=(Params)c.get(PARAMS);    cfrac=cp.width / width;    if (c.isExpanded() && c.getChildCount() > 0) {      layout(c,r + m_radiusInc,theta1 + nfrac * dtheta,theta1 + (nfrac + cfrac) * dtheta);    }    setPolarLocation(c,n,r,theta1 + nfrac * dtheta + cfrac * dtheta2);    cp.angle=cfrac * dtheta;    nfrac+=cfrac;  }}  }
class C{  public boolean contains(float value){  return (value > from && value <= to);}  }
class C{  private boolean closeTab(Tab tabToClose,boolean animate,boolean uponExit,boolean canUndo,boolean notify){  if (tabToClose == null) {    assert false : "Tab is null!";    return false;  }  if (!mTabs.contains(tabToClose)) {    assert false : "Tried to close a tab from another model!";    return false;  }  canUndo&=supportsPendingClosures();  startTabClosure(tabToClose,animate,uponExit,canUndo);  if (notify && canUndo) {    for (    TabModelObserver obs : mObservers)     obs.tabPendingClosure(tabToClose);  }  if (!canUndo)   finalizeTabClosure(tabToClose);  return true;}  }
class C{  public boolean isApplicable(){  AlignmentViewer viewer=(AlignmentViewer)getViewer();  return viewer.getAlignment().getLength() > 0;}  }
class C{  public boolean showAllSites(){  return CATEGORY_ALL_SITES.equals(mCategory);}  }
class C{  public HilbertMatrix(final int n){  this.n=n;}  }
class C{  private static void print(String s){  System.out.print(s);}  }
class C{  public VOGeoServerContrastEnhancementNormalizeGrey(Class<?> panelId,RasterSymbolizerDetails parentPanel){  super(panelId,"geoserver/GeoServerContrastEnhancementNormalizeGrey.xml",parentPanel,FieldIdEnum.VO_RASTER_NORMALIZE_ALGORITHM_GREY,FieldIdEnum.VO_RASTER_NORMALIZE_MIN_VALUE_GREY,FieldIdEnum.VO_RASTER_NORMALIZE_MAX_VALUE_GREY);}  }
class C{  @Override public boolean isAssignable(){  return false;}  }
class C{  public final boolean containsKey(String name){  return mMap.containsKey(name);}  }
class C{  public boolean pre_jimplify(){  return soot.PhaseOptions.getBoolean(options,"pre-jimplify");}  }
class C{  public void onPause(){  mOnResumePending=false;  if (mInitializationComplete)   mActivityDelegate.onPauseWithNative();}  }
class C{  public static String compileProgressSuccessAction(String progressSuccessAction) throws TemplateModelException {  Environment env=CommonFtlUtil.getCurrentEnvironment();  return compileProgressSuccessAction(progressSuccessAction,ContextFtlUtil.getRequest(env),ContextFtlUtil.getResponse(env));}  }
class C{  public String newSessionId(HttpServletRequest request,long created){synchronized (this) {    String requested_id=request.getRequestedSessionId();    if (requested_id != null) {      String cluster_id=getClusterId(requested_id);      if (idInUse(cluster_id))       return cluster_id;    }    String new_id=(String)request.getAttribute(__NEW_SESSION_ID);    if (new_id != null && idInUse(new_id))     return new_id;    String id=null;    while (id == null || id.length() == 0 || idInUse(id)) {      long r=_weakRandom ? (hashCode() ^ Runtime.getRuntime().freeMemory() ^ _random.nextInt()^ (((long)request.hashCode()) << 32)) : _random.nextLong();      r^=created;      if (request != null && request.getRemoteAddr() != null)       r^=request.getRemoteAddr().hashCode();      if (r < 0)       r=-r;      id=Long.toString(r,36);      if (_workerName != null) {        id=_workerName + id;      }    }    request.setAttribute(__NEW_SESSION_ID,id);    return id;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_StatDown_A_TO_B(String skilltarget,String value0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201029,skilltarget,value0,skillcaster,skillname);}  }
class C{  public CountingOutputStream(OutputStream out){  super(out);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Rebirth_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200553,skilltarget,skillname);}  }
class C{  public void start(){  logger.info("Starting computation...");  jssc.start();  try {    jssc.awaitTermination();  } catch (  InterruptedException e) {    Thread.interrupted();  }}  }
class C{  public boolean computeScrollOffset(){  if (mFinished) {    return false;  }  final long timePassed=AnimationUtils.currentAnimationTimeMillis() - mStartTime;  float timePassedPercent=timePassed * 1f / mDuration;  if (timePassed >= mDuration) {    mFinished=true;    timePassedPercent=1f;  }  mCurrValue=Math.round(mValueFactor * mPathPointsHolder.getY(timePassedPercent));  return true;}  }
class C{  private boolean promptForAddOfIgnored(){  IResource[] resources=getSelectedResources();  boolean prompt=false;  for (int i=0; i < resources.length; i++) {    ISVNLocalResource resource=SVNWorkspaceRoot.getSVNResourceFor(resources[i]);    try {      if (resource.isIgnored()) {        prompt=true;        break;      }    } catch (    SVNException e) {      handle(e);    }  }  if (prompt) {    return MessageDialog.openQuestion(getShell(),Policy.bind("AddAction.addIgnoredTitle"),Policy.bind("AddAction.addIgnoredQuestion"));  }  return true;}  }
class C{  public LSInputListImpl(LSInput[] array,int length){  fArray=array;  fLength=length;}  }
class C{  SAXParserImpl(SAXParserFactoryImpl spf,Hashtable features) throws SAXException {  this(spf,features,false);}  }
class C{  private void refreshDays(int month,int year){  Calendar calendar=DateFormat.getDateTimeInstance().getCalendar();  calendar.setTime(date);  calendar.set(Calendar.DAY_OF_MONTH,1);  calendar.set(Calendar.MONTH,month);  calendar.set(Calendar.YEAR,year);  int day=daysComp.getSelectedDay();  if (day > 0) {    if (day > calendar.getActualMaximum(Calendar.DAY_OF_MONTH)) {      day=calendar.getActualMaximum(Calendar.DAY_OF_MONTH);    }    calendar.set(Calendar.DAY_OF_MONTH,day);  }  date=calendar.getTime();  refreshDate();}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  if (security != null) {    final int lastDot=className.lastIndexOf(".");    String packageName=className;    if (lastDot != -1)     packageName=className.substring(0,lastDot);    security.checkPackageAccess(packageName);  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public FaveRemoveUserQuery(VkApiClient client,UserActor actor,int userId){  super(client,"fave.removeUser",OkResponse.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  public void init(AccessToken accessToken){  session.setAccessToken(accessToken);}  }
class C{  @deprecated public final String format(Style style,TimeZone tz,long date){  return format(style,tz,date,null);}  }
class C{  @Override public int hashCode(){  return 37 * (37 * 17 + numerator) + denominator;}  }
class C{  private boolean shouldContract(){  if (expansionMode == ExpansionMode.MULTIPLICATIVE) {    return (internalArray.length / ((float)numElements)) > contractionCriterion;  } else {    return (internalArray.length - numElements) > contractionCriterion;  }}  }
class C{  public void reset(final Vector3D newPole){  this.pole=newPole.normalize();  this.x=newPole.orthogonal();  this.y=Vector3D.crossProduct(newPole,x).normalize();}  }
class C{  public boolean empties_as_allocs(){  return soot.PhaseOptions.getBoolean(options,"empties-as-allocs");}  }
class C{  private void registerValue(int index){synchronized (L) {    L.pushValue(index);    int key=L.Lref(LuaState.LUA_REGISTRYINDEX.intValue());    ref=new Integer(key);  }}  }
class C{  public UsersSearchQuery city(Integer value){  return unsafeParam("city",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200932,skilltarget);}  }
class C{  public static boolean checkURLforSpiders(HttpServletRequest request){  boolean result=false;  String spiderRequest=(String)request.getAttribute("_REQUEST_FROM_SPIDER_");  if (UtilValidate.isNotEmpty(spiderRequest)) {    if ("Y".equals(spiderRequest)) {      return true;    } else {      return false;    }  } else {    String initialUserAgent=request.getHeader("User-Agent") != null ? request.getHeader("User-Agent") : "";    List<String> spiderList=StringUtil.split(UtilProperties.getPropertyValue("url","link.remove_lsessionid.user_agent_list"),",");    if (UtilValidate.isNotEmpty(spiderList)) {      for (      String spiderNameElement : spiderList) {        Pattern pattern=null;        try {          pattern=PatternFactory.createOrGetPerl5CompiledPattern(spiderNameElement,false);        } catch (        MalformedPatternException e) {          Debug.logError(e,module);        }        PatternMatcher matcher=new Perl5Matcher();        if (matcher.contains(initialUserAgent,pattern)) {          request.setAttribute("_REQUEST_FROM_SPIDER_","Y");          result=true;          break;        }      }    }  }  if (!result) {    request.setAttribute("_REQUEST_FROM_SPIDER_","N");  }  return result;}  }
class C{  public boolean equals(XMLGrammarDescription desc1,XMLGrammarDescription desc2){  if (desc1 instanceof XMLSchemaDescription) {    if (!(desc2 instanceof XMLSchemaDescription)) {      return false;    }    final XMLSchemaDescription sd1=(XMLSchemaDescription)desc1;    final XMLSchemaDescription sd2=(XMLSchemaDescription)desc2;    final String targetNamespace=sd1.getTargetNamespace();    if (targetNamespace != null) {      if (!targetNamespace.equals(sd2.getTargetNamespace())) {        return false;      }    } else     if (sd2.getTargetNamespace() != null) {      return false;    }    final String expandedSystemId=sd1.getExpandedSystemId();    if (expandedSystemId != null) {      if (!expandedSystemId.equals(sd2.getExpandedSystemId())) {        return false;      }    } else     if (sd2.getExpandedSystemId() != null) {      return false;    }    return true;  }  return desc1.equals(desc2);}  }
class C{  public GroupsIsMemberQueryWithUserIdsExtended(VkApiClient client,String groupId,List<Integer> userIds){  super(client,"groups.isMember",Utils.buildParametrizedType(List.class,MemberStatusFull.class));  groupId(groupId);  extended(true);  userIds(userIds);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  AttributesWindow viewer=(AttributesWindow)getViewer();  if (viewer != null) {    viewer.doSortByAlpha=false;    viewer.doSortByNrOfReads=true;    int div=viewer.getSplitPane().getDividerLocation();    viewer.getSplitPane().remove(viewer.getSplitPane().getTopComponent());    viewer.getSplitPane().setTopComponent(viewer.getTreePanel());    viewer.getSplitPane().setDividerLocation(div);  }}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public Properties readSettings(){  try {    String pacScriptUrl=detectScriptUrlPerDHCP();    if (pacScriptUrl == null) {      pacScriptUrl=detectScriptUrlPerDNS();    }    if (pacScriptUrl == null) {      return null;    }    Properties result=new Properties();    result.setProperty("url",pacScriptUrl);    return result;  } catch (  IOException e) {    return new Properties();  }}  }
class C{  private void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(this);  onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  private static boolean isMergedSegment(String segName){  if (segName.contains(".")) {    return true;  }  return false;}  }
class C{  public String toString(){  return "Value: " + String.format("%5.2f%%",ValueSimilarity * 100.0) + " Containment: "+ String.format("%5.2f%%",ContainmentSimilarity * 100.0)+ " Size: "+ String.format("%5.2f%%",SizeSimilarity * 100.0);}  }
class C{  public void add(IResource[] resources,int depth,IProgressMonitor progress) throws SVNException {  AddResourcesCommand command=new AddResourcesCommand(getSVNWorkspaceRoot(),resources,depth);  command.run(progress);}  }
class C{  public void updateStatusBar(){  int ntax=Math.max(0,getPhyloTree().getNumberOfNodes());  getStatusBar().setText1("Taxa=" + ntax);  StringBuilder buf2=new StringBuilder();  final DataTable dataTable=doc.getDataTable();  if (dataTable.getNumberOfSamples() == 0 || dataTable.getTotalReads() == 0) {    if (ProgramProperties.get(MeganProperties.TAXONOMYFILE,MeganProperties.DEFAULT_TAXONOMYFILE).equals(MeganProperties.DEFAULT_TAXONOMYFILE))     buf2.append("Taxonomy"); else     buf2.append("Taxonomy=").append(Basic.replaceFileSuffix(Basic.getFileNameWithoutPath(ProgramProperties.get(MeganProperties.TAXONOMYFILE,MeganProperties.DEFAULT_TAXONOMYFILE)),""));    if (TaxonomyData.isAvailable()) {      if (TaxonomyData.getTree().getNumberOfNodes() > 0)       buf2.append(String.format(" size=%,d,",TaxonomyData.getTree().getNumberOfNodes()));      final Set<Integer> disabledTaxa=TaxonomyData.getDisabledTaxa();      if (disabledTaxa != null && disabledTaxa.size() > 0)       buf2.append(String.format(" disabledTaxa=%,d",disabledTaxa.size()));    }  } else   if (dataTable.getNumberOfSamples() == 1) {    buf2.append(String.format("Reads=%,d Assigned=%,d",doc.getNumberOfReads(),getTotalAssignedReads()));    buf2.append(" MinScore=").append(doc.getMinScore());    if (doc.getMaxExpected() != 10000)     buf2.append(" MaxExpected=").append(doc.getMaxExpected());    if (doc.getMinPercentIdentity() > 0)     buf2.append(" MinPercentIdentity=").append(doc.getMinPercentIdentity());    buf2.append(" TopPercent=").append(doc.getTopPercent());    if (doc.getMinSupportPercent() > 0)     buf2.append(" MinSupportPercent=").append(doc.getMinSupportPercent());    if (doc.getMinSupportPercent() == 0 || doc.getMinSupport() > 1)     buf2.append(" MinSupport=").append(doc.getMinSupport());    final Set<Integer> disabledTaxa=TaxonomyData.getDisabledTaxa();    if (disabledTaxa != null && disabledTaxa.size() > 0)     buf2.append(String.format(" disabledTaxa=%,d",disabledTaxa.size()));    if (doc.isUseIdentityFilter())     buf2.append(" UseIdentityFilter=true");  } else {    buf2.append(String.format("Samples=%d,",doc.getNumberOfSamples()));    Comparer.COMPARISON_MODE mode=Comparer.parseMode(dataTable.getParameters());    int normalized_to=Comparer.parseNormalizedTo(dataTable.getParameters());    if (mode.equals(Comparer.COMPARISON_MODE.RELATIVE)) {      buf2.append(String.format(" Relative Comparison, Reads=%,d Assigned=%,d (normalized to %,d reads per sample)",doc.getNumberOfReads(),getTotalAssignedReads(),normalized_to));    } else     buf2.append(String.format(" Absolute Comparison, Reads=%,d, Assigned=%,d",doc.getNumberOfReads(),getTotalAssignedReads()));  }  if (doc.getBlastMode() != BlastMode.Unknown)   buf2.append(" mode=").append(doc.getBlastMode().toString());  getStatusBar().setText2(buf2.toString());}  }
class C{  public Fraction reciprocal(){  return new Fraction(denominator,numerator);}  }
class C{  public Rect addImage(BufferedImage image,String name){  Rect rect=processImage(image,name);  if (rect == null) {    if (!settings.silent)     System.out.println("Ignoring blank input image: " + name);    return null;  }  if (settings.alias) {    String crc=hash(rect.getImage(this));    Rect existing=crcs.get(crc);    if (existing != null) {      if (!settings.silent)       System.out.println(rect.name + " (alias of " + existing.name+ ")");      existing.aliases.add(new Alias(rect));      return null;    }    crcs.put(crc,rect);  }  rects.add(rect);  return rect;}  }
class C{  public Configuration(InputParam param) throws IOException, TinkerPatchException {  mUsingGradle=true;  mSoFilePattern=new HashSet<>();  mDexFilePattern=new HashSet<>();  mDexLoaderPattern=new HashSet<>();  mResFilePattern=new HashSet<>();  mResRawPattern=new HashSet<>();  mResIgnoreChangePattern=new HashSet<>();  mPackageFields=new HashMap<>();  for (  String item : param.soFilePattern) {    addToPatterns(item,mSoFilePattern);  }  for (  String item : param.dexFilePattern) {    addToPatterns(item,mDexFilePattern);  }  for (  String item : param.resourceFilePattern) {    mResRawPattern.add(item);    addToPatterns(item,mResFilePattern);  }  for (  String item : param.resourceIgnoreChangePattern) {    addToPatterns(item,mResIgnoreChangePattern);  }  mLargeModSize=param.largeModSize;  mUseApplyResource=param.useApplyResource;  mDexLoaderPattern.addAll(param.dexLoaderPattern);  if (param.dexMode.equals("raw")) {    mDexRaw=true;  }  mOldApkPath=param.oldApk;  mOldApkFile=new File(mOldApkPath);  mNewApkPath=param.newApk;  mNewApkFile=new File(mNewApkPath);  mOutFolder=param.outFolder;  mIgnoreWarning=param.ignoreWarning;  mUsePreGeneratedPatchDex=param.usePreGeneratedPatchDex;  mSevenZipPath=param.sevenZipPath;  mPackageFields=param.configFields;  mUseSignAPk=param.useSign;  setSignData(param.signFile,param.keypass,param.storealias,param.storepass);  FileOperation.cleanDir(new File(mOutFolder));  createTempDirectory();  checkInputPatternParameter();}  }
class C{  public static void computeApprox(TreeSet<TypeVariable> workList) throws TypeException {  while (workList.size() > 0) {    TypeVariable var=workList.first();    workList.remove(var);    var.fixApprox(workList);  }}  }
class C{  public ContentletQuery addHost(Host host){  return addHost(host.getIdentifier());}  }
class C{  public OutgoingEmail(String subject,List<String> fromAddresses,List<String> toAddresses,List<String> bccAddresses,List<String> ccAddresses,List<String> replyToAddresses,EmailBody body,List<EmailAttachment> attachments,Map<String,String> headers){  this.subject=subject;  this.sentDate=now();  this.toAddresses=copyOf(toAddresses);  this.ccAddresses=copyOf(ccAddresses);  this.bccAddresses=copyOf(bccAddresses);  this.fromAddresses=copyOf(fromAddresses);  this.replyToAddresses=copyOf(replyToAddresses);  this.body=body;  this.attachments=copyOf(attachments);  this.headers=ImmutableMap.copyOf(headers);}  }
class C{  public CatchOptions useRazzberry(boolean useRazzBerry){  this.useRazzBerry=useRazzBerry;  return this;}  }
class C{  public boolean context_heap(){  return soot.PhaseOptions.getBoolean(options,"context-heap");}  }
class C{  public boolean is2DArea(){  return m_is2DArea;}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((columnName == null) ? 0 : columnName.hashCode());  return result;}  }
class C{  public IObjectInfo<T> addUnlocked(T subject){  return store_impl(subject);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUMMON_REST_MODE(int value0){  return new SM_SYSTEM_MESSAGE(1200010,calculateNameId(value0));}  }
class C{  public synchronized long fileCount(){  return fileCount;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("RegexValidator{");  for (int i=0; i < patterns.length; i++) {    if (i > 0) {      buffer.append(",");    }    buffer.append(patterns[i].pattern());  }  buffer.append("}");  return buffer.toString();}  }
class C{  public CASCGraph(){  super(1,1);  hVertexTypes=new HashMap();}  }
class C{  public ZWaveWakeUpCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  versionMax=MAX_SUPPORTED_VERSION;  wakeUpQueue=new ArrayBlockingQueue<SerialMessage>(MAX_BUFFFER_SIZE,true);  timer=new Timer();}  }
class C{  public static Style grey(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_GREY);  return style;}  }
class C{  public int select(List<LinkedList<Integer>> paths){  if (bigram != null) {    int maxIdx=0;    double maxVal=Double.MIN_VALUE;    for (int j=0; j < paths.size(); j++) {      LinkedList<Integer> path=paths.get(j);      List<String> words=words(path);      words.add(0,"<s>");      words.add("</s>");      double p=0d;      for (int w=1; w < words.size(); w++)       p+=bigram.logConditionalProb(words.get(w - 1),words.get(w));      if (p > maxVal) {        maxVal=p;        maxIdx=j;      }    }    return maxIdx;  }  return 0;}  }
class C{  public Activity runAt(String key,long time){  Activity a=get(key);  if (a != null)   ActivityManager.scheduleAt(a,time);  return a;}  }
class C{  public void write(String fileName) throws IOException {  write(new File(fileName));}  }
class C{  private static String buildMessage(final Locale locale,final Localizable specifier,final Object... parts){  return (specifier == null) ? "" : new MessageFormat(specifier.getLocalizedString(locale),locale).format(parts);}  }
class C{  private void addSupportedCommandClasses(SerialMessage serialMessage,int offset,ZWaveEndpoint endpoint) throws ZWaveSerialMessageException {  for (int i=0; i < serialMessage.getMessagePayload().length - offset - 3; i++) {    int data=serialMessage.getMessagePayloadByte(offset + 3 + i);    if (data == 0xef) {      break;    }    ZWaveCommandClass commandClass=ZWaveCommandClass.getInstance(data,getNode(),getController(),endpoint);    if (commandClass == null) {      continue;    }    logger.debug("NODE {}: Endpoint {}: Adding command class {}.",getNode().getNodeId(),endpoint.getEndpointId(),commandClass.getCommandClass().getLabel());    endpoint.addCommandClass(commandClass);    ZWaveCommandClass parentClass=getNode().getCommandClass(commandClass.getCommandClass());    if (parentClass != null) {      commandClass.setVersion(parentClass.getVersion());    }    commandClass.setInstances(1);  }}  }
class C{  public static boolean isFileExist(String filePath,FileType fileType,boolean performFileCheck) throws IOException {  filePath=filePath.replace("\\","/");switch (fileType) {case HDFS:case VIEWFS:    Path path=new Path(filePath);  FileSystem fs=path.getFileSystem(configuration);if (performFileCheck) {  return fs.exists(path) && fs.isFile(path);} else {  return fs.exists(path);}case LOCAL:default :File defaultFile=new File(filePath);if (performFileCheck) {return defaultFile.exists() && defaultFile.isFile();} else {return defaultFile.exists();}}}  }
class C{  public ResultSet executeQuery(String sql) throws GenericDataSourceException, GenericEntityException {  prepareStatement(sql);  return executeQuery();}  }
class C{  protected void processColorSupportedReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int deviceColors=serialMessage.getMessagePayloadByte(offset + 1) + serialMessage.getMessagePayloadByte(offset + 2) * 256;  for (int i=0; i < 16; ++i) {    if ((deviceColors & (1 << i)) == (1 << i)) {      ZWaveColorType color=ZWaveColorType.getColorType(i);      if (color == null) {        logger.warn("NODE {}: Invalid color {}",getNode().getNodeId(),i);        continue;      }      logger.debug("NODE {}: Color Supported = {}({})",getNode().getNodeId(),color.getLabel(),color.getKey());      if (!supportedColors.contains(color)) {        supportedColors.add(color);        colorMap.put(color,null);      }    }  }  initialiseDone=true;  ZWaveCommandClassValueEvent zEvent=new ZWaveColorValueEvent(getNode().getNodeId(),endpoint,colorMap);  getController().notifyEventListeners(zEvent);}  }
class C{  @ObjectiveCName("init:data:") RpcResult(boolean success,Object data){  this.success=success;  this.data=data;}  }
class C{  public MessagesSearchQuery date(Integer value){  return unsafeParam("date",value);}  }
class C{  @Override public void any(Augmentations augs) throws XNIException {}  }
class C{  public boolean nextPage(){  if (toIndex >= values) {    return false;  }  if (toIndex > 0) {    fromIndex+=pageSize;  }  toIndex=Math.min((fromIndex + pageSize),values);  return true;}  }
class C{  public EulerAngle add(double x,double y,double z){  return new EulerAngle(this.x + x,this.y + y,this.z + z);}  }
class C{  private void clearIndexToFirst(){  for (; ; ) {    Index<K,V> q=head;    for (; ; ) {      Index<K,V> r=q.right;      if (r != null && r.indexesDeletedNode() && !q.unlink(r))       break;      if ((q=q.down) == null) {        if (head.right == null)         tryReduceLevel();        return;      }    }  }}  }
class C{  public Object[] keys(){  return m_map.keySet().toArray();}  }
class C{  public static void dumpTimingToLog(){  mTimingLogger.dumpToLog();}  }
class C{  public static Boolean userIsAllowedToConfigure(String portalPageId,Map<String,Object> context){  Boolean userIsAllowed=false;  if (UtilValidate.isNotEmpty(portalPageId)) {    GenericValue userLogin=(GenericValue)context.get("userLogin");    if (UtilValidate.isNotEmpty(userLogin)) {      String userLoginId=(String)userLogin.get("userLoginId");      Security security=(Security)context.get("security");      Boolean hasPortalAdminPermission=security.hasPermission("PORTALPAGE_ADMIN",userLogin);      try {        Delegator delegator=WidgetWorker.getDelegator(context);        GenericValue portalPage=EntityQuery.use(delegator).from("PortalPage").where("portalPageId",portalPageId).queryOne();        if (UtilValidate.isNotEmpty(portalPage)) {          String ownerUserLoginId=(String)portalPage.get("ownerUserLoginId");          userIsAllowed=(ownerUserLoginId.equals(userLoginId) || hasPortalAdminPermission);        }      } catch (      GenericEntityException e) {        return false;      }    }  }  return userIsAllowed;}  }
class C{  public BorwsableObject(Intent intent){  if (intent.getDataString() == null) {    intentUri=null;  } else {    intentUri=Uri.parse(intent.getDataString());  }  service=CollectionService.getService();}  }
class C{  public ChallengeTask(int taskId,int ownerId,Map<Integer,ChallengeQuest> quests,Timestamp completeTime){  this.taskId=taskId;  this.ownerId=ownerId;  this.quests=quests;  this.completeTime=completeTime;  this.template=DataManager.CHALLENGE_DATA.getTaskByTaskId(taskId);}  }
class C{  private void broadcastToLegionMembers(final Player player){  if (player.isLegionMember()) {    PacketSendUtility.broadcastPacketToLegion(player.getLegion(),new SM_MESSAGE(player,message,type));  }}  }
class C{  public DragControl(boolean repaint){  this.repaint=repaint;}  }
class C{  @Override public boolean accept(File file){  boolean smaller=file.length() < size;  return acceptLarger ? !smaller : smaller;}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  private void editColumnAt(Point p){  int columnIndex=columnHeader.columnAtPoint(p);  if ((columnIndex != -1) && (columnIndex != model.getGeometryFieldIndex())) {    tableColumn=columnHeader.getColumnModel().getColumn(columnIndex);    Rectangle columnRectangle=columnHeader.getHeaderRect(columnIndex);    columnTextField.setText(tableColumn.getHeaderValue().toString());    renamePopup.setPreferredSize(new Dimension(columnRectangle.width,columnRectangle.height - 1));    renamePopup.show(columnHeader,columnRectangle.x,0);    columnTextField.requestFocusInWindow();    columnTextField.selectAll();  }}  }
class C{  public Object invoke(Object proxy,LRMIMethod lrmiMethod,Object[] args) throws Throwable {  ConnectionResource clientPeer=null;  boolean freeConnection=true;  try {    clientPeer=_connPool.getConnection(lrmiMethod);  } catch (  Exception e) {    if (lrmiMethod.isAsync) {      ClassLoader contextClassLoader=Thread.currentThread().getContextClassLoader();      LRMIFuture result=(LRMIFuture)FutureContext.getFutureResult();      if (result == null) {        result=new LRMIFuture(contextClassLoader);      } else {        result.reset(contextClassLoader);      }      FutureContext.setFutureResult(result);      result.setResult(e);      return null;    } else {      throw e;    }  }  try {    freeConnection=!lrmiMethod.isAsync;    return clientPeer.invoke(proxy,lrmiMethod,args,_connPool);  } catch (  ProtocolException ex) {    throw ex.getCause();  }catch (  ApplicationException ex) {    throw ex.getCause();  } finally {    if (clientPeer != null && freeConnection)     _connPool.freeConnection(clientPeer);  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  @Override public RealMatrix solve(final RealMatrix b){  return pseudoInverse.multiply(b);}  }
class C{  private static Permission[] checkPermissions(Permission[] permissions){  if (permissions == null) {    return new Permission[0];  }  permissions=permissions.clone();  for (int i=permissions.length; --i >= 0; ) {    if (permissions[i] == null) {      throw new NullPointerException("permission cannot be null");    }  }  return permissions;}  }
class C{  public WallPostQuery publishDate(Integer value){  return unsafeParam("publish_date",value);}  }
class C{  public boolean checkTrustEquivalence(Object obj){  if (this == obj) {    return true;  } else   if (!(obj instanceof ProxyTrustInvocationHandler)) {    return false;  }  ProxyTrustInvocationHandler oh=(ProxyTrustInvocationHandler)obj;  return (((TrustEquivalence)main).checkTrustEquivalence(oh.main) && ((TrustEquivalence)boot).checkTrustEquivalence(oh.boot));}  }
class C{  public static void resetTimingLogger(String tag,String label){  if (mTimingLogger == null) {    mTimingLogger=createDefaultTimingLogger();  }  mTimingLogger.reset(tag,label);}  }
class C{  public BitmapHttpRequest(String url,RequestCallback callback) throws MalformedURLException {  super(url,callback);}  }
class C{  @Override public Object[] next(){  if (!hasNext()) {    throw new NoSuchElementException();  }  Object[] row=rows.get(counter);  counter++;  return row;}  }
class C{  public RealMatrix computeCorrelationMatrix(final RealMatrix matrix){  int nVars=matrix.getColumnDimension();  RealMatrix outMatrix=new BlockRealMatrix(nVars,nVars);  for (int i=0; i < nVars; i++) {    for (int j=0; j < i; j++) {      double corr=correlation(matrix.getColumn(i),matrix.getColumn(j));      outMatrix.setEntry(i,j,corr);      outMatrix.setEntry(j,i,corr);    }    outMatrix.setEntry(i,i,1d);  }  return outMatrix;}  }
class C{  public char nextClean(char c){  char n=nextClean();  if (n != c) {    throw syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public Writer write(Writer writer) throws JSONException {  try {    boolean b=false;    int len=length();    writer.write('[');    for (int i=0; i < len; i+=1) {      if (b) {        writer.write(',');      }      Object v=this.myArrayList.get(i);      if (v instanceof JSONObject) {        ((JSONObject)v).write(writer);      } else       if (v instanceof JSONArray) {        ((JSONArray)v).write(writer);      } else {        writer.write(JSONObject.valueToString(v));      }      b=true;    }    writer.write(']');    return writer;  } catch (  IOException e) {    throw new JSONException(e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_INTERVAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201070,skilltarget,num0,skillname);}  }
class C{  public boolean acquire(){  int timeout=acquireTimeout;  while (timeout >= 0) {    if (ops.setIfAbsent(lockKey,lockValue)) {      new Thread(new LockExpiredTask()).start();      isHold=true;      return true;    }    try {      timeout-=DEFAULT_ACQUIRE_PAUSE_MILLIS;      Thread.sleep(DEFAULT_ACQUIRE_PAUSE_MILLIS);    } catch (    InterruptedException e) {    }  }  return false;}  }
class C{  public static int countOccurrencesOf(String s,char c){  if (s == null || s.length() == 0)   return 0;  char[] chars=s.toCharArray();  int count=0;  for (  char aChar : chars)   if (aChar == c)   count++;  return count;}  }
class C{  public static Intent createIntent(Context ctx){  return createIntent(ctx,null);}  }
class C{  public boolean contains(S2CellId id){  int pos=Collections.binarySearch(cellIds,id);  if (pos < 0) {    pos=-pos - 1;  }  if (pos < cellIds.size() && cellIds.get(pos).rangeMin().lessOrEquals(id)) {    return true;  }  return pos != 0 && cellIds.get(pos - 1).rangeMax().greaterOrEquals(id);}  }
class C{  public ESTTextfileDoubleDataSource(File file) throws FileNotFoundException {  this(new FileReader(file));}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  ChartViewer viewer=(ChartViewer)getViewer();  ChartColorManager chartColors=viewer.getChartColorManager();  if (viewer.isSeriesTabSelected()) {    int count=viewer.getChartData().getChartSelection().getSelectedSeries().size();    Set<String> done=new HashSet<>();    for (    String series : viewer.getChartData().getChartSelection().getSelectedSeries()) {      final ColorChooser chooser=new ColorChooser(viewer,"Change color for series '" + series + "'",series,null,chartColors,count - done.size() >= 2);      if (chooser.getResult() == null)       return; else {        if (chooser.isApplyToAll()) {          Set<String> toDo=new HashSet<>();          toDo.addAll(viewer.getChartData().getChartSelection().getSelectedSeries());          toDo.removeAll(done);          for (          String label : toDo) {            chartColors.setSampleColor(label,chooser.getResult());          }          viewer.repaint();          break;        } else {          Color color=chartColors.getSampleColor(series);          if (!chooser.getResult().equals(color)) {            chartColors.setSampleColor(series,chooser.getResult());            done.add(series);            viewer.repaint();          }        }      }    }    ((Director)getDir()).getDocument().setDirty(true);    getDir().notifyUpdateViewer(IDirector.TITLE);  } else {    int count=viewer.getChartData().getChartSelection().getSelectedClasses().size();    Set<String> done=new HashSet<>();    for (    String className : viewer.getChartData().getChartSelection().getSelectedClasses()) {      final ColorChooser chooser=new ColorChooser(viewer,"Change color for class '" + className + "'",viewer.getChartData().getDataSetName(),className,chartColors,count - done.size() >= 2);      if (chooser.getResult() == null)       return; else {        if (chooser.isApplyToAll()) {          Set<String> toDo=new HashSet<>();          toDo.addAll(viewer.getChartData().getChartSelection().getSelectedClasses());          toDo.removeAll(done);          for (          String label : toDo) {            chartColors.setClassColor(viewer.getClass2HigherClassMapper().get(label),chooser.getResult());          }          viewer.repaint();          break;        } else {          Color color=chartColors.getClassColor(viewer.getClass2HigherClassMapper().get(className));          if (!chooser.getResult().equals(color)) {            chartColors.setClassColor(viewer.getClass2HigherClassMapper().get(className),chooser.getResult());            done.add(className);            viewer.repaint();          }        }      }    }    ((Director)getDir()).getDocument().setDirty(true);    getDir().notifyUpdateViewer(IDirector.TITLE);  }}  }
class C{  @NotNull public ObjectProperty<GraphicGenerator.Shape> shape(){  return myShape;}  }
class C{  public UsersSearchQuery interests(String value){  return unsafeParam("interests",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCHeal_Instant_HEAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200393,num0,skillname);}  }
class C{  private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){  Mode subMode=Mode.ALPHA;  Mode priorToShiftMode=Mode.ALPHA;  int i=0;  while (i < length) {    int subModeCh=textCompactionData[i];    char ch=0;switch (subMode) {case ALPHA:      if (subModeCh < 26) {        ch=(char)('A' + subModeCh);      } else {        if (subModeCh == 26) {          ch=' ';        } else         if (subModeCh == LL) {          subMode=Mode.LOWER;        } else         if (subModeCh == ML) {          subMode=Mode.MIXED;        } else         if (subModeCh == PS) {          priorToShiftMode=subMode;          subMode=Mode.PUNCT_SHIFT;        } else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {          result.append((char)byteCompactionData[i]);        } else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {          subMode=Mode.ALPHA;        }      }    break;case LOWER:  if (subModeCh < 26) {    ch=(char)('a' + subModeCh);  } else {    if (subModeCh == 26) {      ch=' ';    } else     if (subModeCh == AS) {      priorToShiftMode=subMode;      subMode=Mode.ALPHA_SHIFT;    } else     if (subModeCh == ML) {      subMode=Mode.MIXED;    } else     if (subModeCh == PS) {      priorToShiftMode=subMode;      subMode=Mode.PUNCT_SHIFT;    } else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {      result.append((char)byteCompactionData[i]);    } else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {      subMode=Mode.ALPHA;    }  }break;case MIXED:if (subModeCh < PL) {ch=MIXED_CHARS[subModeCh];} else {if (subModeCh == PL) {  subMode=Mode.PUNCT;} else if (subModeCh == 26) {  ch=' ';} else if (subModeCh == LL) {  subMode=Mode.LOWER;} else if (subModeCh == AL) {  subMode=Mode.ALPHA;} else if (subModeCh == PS) {  priorToShiftMode=subMode;  subMode=Mode.PUNCT_SHIFT;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {  result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {  subMode=Mode.ALPHA;}}break;case PUNCT:if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case ALPHA_SHIFT:subMode=priorToShiftMode;if (subModeCh < 26) {ch=(char)('A' + subModeCh);} else {if (subModeCh == 26) {ch=' ';} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case PUNCT_SHIFT:subMode=priorToShiftMode;if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;}if (ch != 0) {result.append(ch);}i++;}}  }
class C{  public RepositoryLocaleStatistic computeLocaleStatistics(Long repositoryLocaleId){  logger.debug("Compute locale statistic for repositoryLocale id: {}",repositoryLocaleId);  RepositoryLocale repositoryLocale=repositoryLocaleRepository.findOne(repositoryLocaleId);  Query createNativeQuery=entityManager.createNamedQuery("RepositoryLocaleStatistic.computeLocaleStatistics");  createNativeQuery.setParameter(1,repositoryLocaleId);  RepositoryLocaleStatistic repositoryLocaleStatistic=(RepositoryLocaleStatistic)createNativeQuery.getSingleResult();  logger.debug("Replace POJO with a reference object");  repositoryLocaleStatistic.setLocale(repositoryLocale.getLocale());  return repositoryLocaleStatistic;}  }
class C{  public void onTransactionConsolidationFailure(ConsolidationParticipantData participantData){  participantData.commit();}  }
class C{  public UsersGetNearbyQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  private static void checkPolicyPermission(String policy,URL[] urls){  logger.entering(ActivateWrapper.class.getName(),"checkPolicyPermission",new Object[]{policy,urlsToPath(urls)});  Permission perm=new SharedActivationPolicyPermission(policy);  Certificate[] certs=null;  CodeSource cs=null;  ProtectionDomain pd=null;  for (int i=0; i < urls.length; i++) {    cs=new CodeSource(urls[i],certs);    pd=new ProtectionDomain(cs,null,null,null);    logger.log(Level.FINEST,"Checking protection domain: {0}",pd);    if (!pd.implies(perm)) {      SecurityException se=new SecurityException("ProtectionDomain " + pd + " does not have required permission: "+ perm);      logger.throwing(ActivateWrapper.class.getName(),"checkPolicyPermission",se);      throw se;    }  }  logger.exiting(ActivateWrapper.class.getName(),"checkPolicyPermission");}  }
class C{  public PhotosGetQuery photoSizes(Boolean value){  return unsafeParam("photo_sizes",value);}  }
class C{  private void superActivate(){  super.activate();}  }
class C{  @Override public Object clone(){  try {    TinkerZipEntry result=(TinkerZipEntry)super.clone();    result.extra=extra != null ? extra.clone() : null;    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  private static boolean isDup(Entry[] attrs,int index){  Entry set=attrs[index];  for (int i=index; --i >= 0; ) {    if (equal(set,attrs[i]))     return true;  }  return false;}  }
class C{  public static String toNumbers(String address){  StringBuilder buf=new StringBuilder();  for (int i=0; i < address.length(); i++)   buf.append(String.format("%d.",(int)address.charAt(i)));  return buf.toString();}  }
class C{  public static Event createImpression(){  return createEvent();}  }
class C{  public SpaceQueryDetails(){}  }
class C{  public static String loadCartFromShoppingList(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  HttpSession session=request.getSession();  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  String shoppingListId=request.getParameter("shoppingListId");  ShoppingCart cart=null;  try {    Map<String,Object> outMap=dispatcher.runSync("loadCartFromShoppingList",UtilMisc.<String,Object>toMap("shoppingListId",shoppingListId,"userLogin",userLogin));    cart=(ShoppingCart)outMap.get("shoppingCart");  } catch (  GenericServiceException exc) {    request.setAttribute("_ERROR_MESSAGE_",exc.getMessage());    return "error";  }  session.setAttribute("shoppingCart",cart);  session.setAttribute("productStoreId",cart.getProductStoreId());  session.setAttribute("orderMode",cart.getOrderType());  session.setAttribute("orderPartyId",cart.getOrderPartyId());  return "success";}  }
class C{  public static double distance(int[] p1,int[] p2){  double sum=0;  for (int i=0; i < p1.length; i++) {    final double dp=p1[i] - p2[i];    sum+=dp * dp;  }  return Math.sqrt(sum);}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  public HnmDatagram(long setDuration,HntmSpeechFrame frame){  super(setDuration);  this.frame=new HntmSpeechFrame(frame);}  }
class C{  public boolean isFileType(){  return getValueType().isFile();}  }
class C{  public ClusterPolicy createClusterPolicy(String clusterMemberName) throws CreateException {  long time1=System.currentTimeMillis();  if (_clusterPolicies == null) {    _clusterMemberNames=getClusterMemberNames();    if (_clusterMemberNames != null && _clusterMemberNames.length > 0) {      _clusterPolicies=new HashMap<String,ClusterPolicy>();      ClusterPolicy[] tempPolicy=new ClusterPolicy[_clusterMemberNames.length];      for (int i=0; i < _clusterMemberNames.length; i++)       tempPolicy[i]=createClusterPolicyInternal(_clusterMemberNames[i]);      ArrayList<ReplicationPolicy> selectedReplPolicies=new ArrayList<ReplicationPolicy>(_clusterMemberNames.length);      List<String> selectedReplGroupNames=new ArrayList<String>(_clusterMemberNames.length);      for (int i=0; i < tempPolicy.length; i++)       if (tempPolicy[i].m_ReplicationPolicy != null && !selectedReplGroupNames.contains(tempPolicy[i].m_ReplicationPolicy.m_ReplicationGroupName)) {        selectedReplPolicies.add(tempPolicy[i].m_ReplicationPolicy);        selectedReplGroupNames.add(tempPolicy[i].m_ReplicationPolicy.m_ReplicationGroupName);      }      if (selectedReplPolicies.isEmpty())       selectedReplPolicies=null; else       selectedReplPolicies.trimToSize();      for (int i=0; i < _clusterMemberNames.length; i++) {        tempPolicy[i].m_ReplicationGroups=selectedReplPolicies;        _clusterPolicies.put(_clusterMemberNames[i],tempPolicy[i]);      }    }  }  ClusterPolicy result=_clusterPolicies.get(clusterMemberName);  if (result == null)   result=createClusterPolicyInternal(clusterMemberName);  long time2=System.currentTimeMillis();  if (_logger.isLoggable(Level.FINE)) {    _logger.fine("Creation of ClusterPolicy instance for \"" + clusterMemberName + "\" cluster member took "+ (time2 - time1)+ " msec.");  }  return result;}  }
class C{  @Override public Dfp negate(){  Dfp result=newInstance(this);  result.sign=(byte)-result.sign;  return result;}  }
class C{  public static int intersectLineRectangle(Line2D l,Rectangle2D r,Point2D[] pts){  double a1x=l.getX1(), a1y=l.getY1();  double a2x=l.getX2(), a2y=l.getY2();  double mxx=r.getMaxX(), mxy=r.getMaxY();  double mnx=r.getMinX(), mny=r.getMinY();  if (pts[0] == null)   pts[0]=new Point2D.Double();  if (pts[1] == null)   pts[1]=new Point2D.Double();  int i=0;  if (intersectLineLine(mnx,mny,mxx,mny,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  if (intersectLineLine(mxx,mny,mxx,mxy,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  if (i == 2)   return i;  if (intersectLineLine(mxx,mxy,mnx,mxy,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  if (i == 2)   return i;  if (intersectLineLine(mnx,mxy,mnx,mny,a1x,a1y,a2x,a2y,pts[i]) > 0)   i++;  return i;}  }
class C{  private static BitSet splitsFromTreeRec(Node v,PhyloTree tree,Taxa allTaxa,BitSet activeTaxa,NodeArray reticulateNode2Taxa,SplitSystem splits){  BitSet e_taxa=new BitSet();  int taxon=allTaxa.indexOf(tree.getLabel(v));  if (taxon > -1)   e_taxa.set(taxon);  for (Edge f=v.getFirstOutEdge(); f != null; f=v.getNextOutEdge(f)) {    Node w=f.getTarget();    BitSet f_taxa;    if (!tree.isSpecial(f) || reticulateNode2Taxa.get(w) == null)     f_taxa=splitsFromTreeRec(w,tree,allTaxa,activeTaxa,reticulateNode2Taxa,splits); else     f_taxa=(BitSet)reticulateNode2Taxa.get(w);    if (!tree.isSpecial(f)) {      BitSet complement=(BitSet)activeTaxa.clone();      complement.andNot(f_taxa);      Split split=new Split(f_taxa,complement,tree.getWeight(f));      if (!splits.contains(split))       splits.addSplit(split); else       if (v == tree.getRoot() && v.getOutDegree() == 2) {        Split prevSplit=splits.get(split);        prevSplit.setWeight(prevSplit.getWeight() + split.getWeight());      }    } else     reticulateNode2Taxa.set(w,f_taxa);    e_taxa.or(f_taxa);  }  return e_taxa;}  }
class C{  private void rejectDuelRequest(Player requester,Player responder){  log.debug("[Duel] Player " + responder.getName() + " rejected duel request from "+ requester.getName());  PacketSendUtility.sendPacket(requester,new SM_DUEL_REQUEST_CANCEL(1300097,responder.getName()));  PacketSendUtility.sendPacket(responder,SM_SYSTEM_MESSAGE.STR_DUEL_REJECT_DUEL(requester.getName()));}  }
class C{  public AudioGetBroadcastListQuery(VkApiClient client,UserActor actor){  super(client,"audio.getBroadcastList",Utils.buildParametrizedType(List.class,UserBroadcast.class));  accessToken(actor.getAccessToken());}  }
class C{  @deprecated private LanguageMatcherData addDistance(String desired,String supported,int percent){  return addDistance(desired,supported,percent,false,null);}  }
class C{  @Override public void onResponse(GankData response){  getContentText.setText(response.toString());}  }
class C{  public boolean isShortFeature(int index){  index-=numByteFeatures;  return 0 <= index && index < numShortFeatures;}  }
class C{  public Repository createRepoAndAssetAndTextUnits(TestIdWatcher testIdWatcher) throws RepositoryNameAlreadyUsedException {  Repository repository=createRepository(testIdWatcher);  try {    PollableFuture<Asset> assetResult=assetService.addOrUpdateAssetAndProcessIfNeeded(repository.getId(),getTestSourceAssetContent(),"path/to/asset.xliff");    pollableTaskService.waitForPollableTask(assetResult.getPollableTask().getId());  } catch (  PollableTaskException|InterruptedException|ExecutionException e) {    throw new RuntimeException("Could not update asset and process it",e);  }  return repository;}  }
class C{  private boolean crossCheckDiagonal(int startI,int centerJ,int maxCount,int originalStateCountTotal){  int[] stateCount=getCrossCheckStateCount();  int i=0;  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i)) {    stateCount[2]++;    i++;  }  if (startI < i || centerJ < i) {    return false;  }  while (startI >= i && centerJ >= i && !image.get(centerJ - i,startI - i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (startI < i || centerJ < i || stateCount[1] > maxCount) {    return false;  }  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i++;  }  if (stateCount[0] > maxCount) {    return false;  }  int maxI=image.getHeight();  int maxJ=image.getWidth();  i=1;  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i)) {    stateCount[2]++;    i++;  }  if (startI + i >= maxI || centerJ + i >= maxJ) {    return false;  }  while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i,startI + i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {    return false;  }  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return false;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && foundPatternCross(stateCount);}  }
class C{  public static void initialize(){  if (sIsInit) {    return;  }  sIsInit=true;}  }
class C{  Map<Integer,Integer> strippedWhitespaceUpToColumn(String intro){  Map<Integer,Integer> stripped=new TreeMap<>();  boolean countingWhitespace=false;  int col=0;  int count=0;  for (  char c : intro.toCharArray()) {    if (c == '\n' && !countingWhitespace) {      countingWhitespace=true;    } else     if (countingWhitespace) {      if (Character.isWhitespace(c))       count++; else       countingWhitespace=false;    }    stripped.put(col,count);    col++;  }  return stripped;}  }
class C{  public int face(){  return (int)(id >>> POS_BITS);}  }
class C{  public SimpleSimilarity(){}  }
class C{  void ixLock(Object obj,long txNum){  Object anchor=getAnchor(obj);  txWaitMap.put(txNum,anchor);synchronized (anchor) {    Lockers lks=prepareLockers(obj);    if (hasIxLock(lks,txNum))     return;    try {      long timestamp=System.currentTimeMillis();      while (!ixLockable(lks,txNum) && !waitingTooLong(timestamp)) {        avoidDeadlock(lks,txNum,IX_LOCK);        lks.requestSet.add(txNum);        anchor.wait(MAX_TIME);        lks.requestSet.remove(txNum);      }      if (!ixLockable(lks,txNum))       throw new LockAbortException();      lks.ixLockers.add(txNum);      getObjectSet(txNum).add(obj);    } catch (    InterruptedException e) {      throw new LockAbortException();    }  }  txWaitMap.remove(txNum);}  }
class C{  private boolean containsBlackPoint(int a,int b,int fixed,boolean horizontal){  if (horizontal) {    for (int x=a; x <= b; x++) {      if (image.get(x,fixed)) {        return true;      }    }  } else {    for (int y=a; y <= b; y++) {      if (image.get(fixed,y)) {        return true;      }    }  }  return false;}  }
class C{  public static String join(CharSequence delimiter,Iterable tokens){  StringBuilder sb=new StringBuilder();  boolean firstTime=true;  for (  Object token : tokens) {    if (token == null || isEmpty(token.toString())) {      continue;    }    if (firstTime) {      firstTime=false;    } else {      sb.append(delimiter);    }    sb.append(token.toString());  }  if (firstTime) {    return null;  }  return sb.toString();}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static void notNull(String argumentName,Object objectToTest){  if (objectToTest == null) {    throw new IllegalArgumentException(argumentName + " cannot be null");  }}  }
class C{  public FileWriterWithEncoding(String filename,Charset encoding,boolean append) throws IOException {  this(new File(filename),encoding,append);}  }
class C{  public boolean seenTagPrefix(@NotNull String prefix){  if (myTags != null) {    for (    String tag : myTags.keySet()) {      if (tag.startsWith(prefix)) {        return true;      }    }  }  return false;}  }
class C{  public boolean isValid(String domain){  if (domain == null) {    return false;  }  domain=unicodeToASCII(domain);  if (domain.length() > 253) {    return false;  }  String[] groups=domainRegex.match(domain);  if (groups != null && groups.length > 0) {    return isValidTld(groups[0]);  }  return allowLocal && hostnameRegex.isValid(domain);}  }
class C{  public boolean isSkipCommentLines(){  return iterator.isSkipCommentLines();}  }
class C{  @Override public boolean isValueLineVariableLength(){  return mValueLineVariableLength;}  }
class C{  private void accumulateSamRecord(final SAMRecord rec){  final SAMSequenceRecord ref=getReferenceSequence(rec.getReferenceIndex());  final int alignmentStart=rec.getAlignmentStart();  final int alignmentEnd=rec.getAlignmentEnd();  final int alignmentLength=alignmentEnd - alignmentStart;  for (int i=accumulator.size(); i <= alignmentLength; ++i) {    accumulator.add(new LocusInfo(ref,alignmentStart + i));  }  final int minQuality=getQualityScoreCutoff();  final boolean dontCheckQualities=minQuality == 0;  final byte[] baseQualities=dontCheckQualities ? null : rec.getBaseQualities();  for (  final AlignmentBlock alignmentBlock : rec.getAlignmentBlocks()) {    final int readStart=alignmentBlock.getReadStart();    final int refStart=alignmentBlock.getReferenceStart();    final int blockLength=alignmentBlock.getLength();    for (int i=0; i < blockLength; ++i) {      final int readOffset=readStart + i - 1;      final int refOffset=refStart + i - alignmentStart;      if (baseQualities.length == 0 || dontCheckQualities || baseQualities[readOffset] >= minQuality) {        accumulator.get(refOffset).add(rec,readOffset);      }    }  }}  }
class C{  public RInteroperator() throws IOException {  Process p=Runtime.getRuntime().exec("R --help");  try {    p.waitFor();  } catch (  InterruptedException iee) {    return;  }}  }
class C{  @Override public Object evaluate(final Map<Long,Object> pInputParams) throws RuleEvaluationException {  Object result=null;  Iterator<IRuleCondition> i=conditions.iterator();  while (result == null && i.hasNext()) {    result=i.next().evaluate(pInputParams);  }  if (result == null) {    throw new RuleEvaluationException("Evaluation error: none of the rule's conditions are TRUE.");  }  return result;}  }
class C{  public EnumeratedRealDistributionTest(){  testDistribution=new EnumeratedRealDistribution(new double[]{3.0,-1.0,3.0,7.0,-2.0,8.0},new double[]{0.2,0.2,0.3,0.3,0.0,0.0});}  }
class C{  public javax.ws.rs.core.Response buildResponse(PreResponse preResponse,ResponseFormatType responseFormatType,UriInfo uriInfo){  ResponseBuilder rspBuilder=createResponseBuilder(preResponse.getResultSet(),preResponse.getResponseContext(),responseFormatType,uriInfo);  @SuppressWarnings("unchecked") MultivaluedMap<String,Object> headers=(MultivaluedMap<String,Object>)preResponse.getResponseContext().get(HEADERS.getName());  headers.entrySet().stream().forEach(null);  return rspBuilder.build();}  }
class C{  public boolean isDurationDate(){  return isDurationDate;}  }
class C{  public JToggleGroup(int type,ListModel data,ListSelectionModel selection){  setLayout(new BoxLayout(this,m_axis));  m_type=type;  m_data=data;  m_sel=selection;  if (m_type == RADIO) {    m_group=new ButtonGroup();  }  m_lstnr=new Listener();  m_sel.addListSelectionListener(m_lstnr);  if (m_data.getSize() > 0)   initUI();  setFocusable(false);}  }
class C{  public double expectedWeightedValue(){  return this.weightedSum;}  }
class C{  public static void equals(final CommandTagCacheObject commandTag1,final CommandTagCacheObject commandTag2){  assertEquals(commandTag1.getId(),commandTag2.getId());  assertEquals(commandTag1.getName(),commandTag2.getName());  assertEquals(commandTag1.getDescription(),commandTag2.getDescription());  assertEquals(commandTag1.getDataType(),commandTag2.getDataType());  assertEquals(commandTag1.getMode(),commandTag2.getMode());  assertEquals(commandTag1.getEquipmentId(),commandTag2.getEquipmentId());  assertEquals(commandTag1.getHardwareAddress().toConfigXML(),commandTag2.getHardwareAddress().toConfigXML());  assertEquals(commandTag1.getSourceTimeout(),commandTag2.getSourceTimeout());  assertEquals(commandTag1.getSourceRetries(),commandTag2.getSourceRetries());  assertEquals(commandTag1.getExecTimeout(),commandTag2.getExecTimeout());  assertEquals(commandTag1.getClientTimeout(),commandTag2.getClientTimeout());  assertEquals(commandTag1.getAuthorizationDetails(),commandTag2.getAuthorizationDetails());  assertEquals(commandTag1.getMinimum(),commandTag2.getMinimum());  assertEquals(commandTag1.getMaximum(),commandTag2.getMaximum());  assertEquals(commandTag1.getMetadata(),commandTag2.getMetadata());  assertEquals(commandTag1.getProcessId(),commandTag2.getProcessId());}  }
class C{  private void rebalance(Node<K,V> unbalanced,boolean insert){  for (Node<K,V> node=unbalanced; node != null; node=node.parent) {    Node<K,V> left=node.left;    Node<K,V> right=node.right;    int leftHeight=left != null ? left.height : 0;    int rightHeight=right != null ? right.height : 0;    int delta=leftHeight - rightHeight;    if (delta == -2) {      Node<K,V> rightLeft=right.left;      Node<K,V> rightRight=right.right;      int rightRightHeight=rightRight != null ? rightRight.height : 0;      int rightLeftHeight=rightLeft != null ? rightLeft.height : 0;      int rightDelta=rightLeftHeight - rightRightHeight;      if (rightDelta == -1 || (rightDelta == 0 && !insert)) {        rotateLeft(node);      } else {        assert (rightDelta == 1);        rotateRight(right);        rotateLeft(node);      }      if (insert) {        break;      }    } else     if (delta == 2) {      Node<K,V> leftLeft=left.left;      Node<K,V> leftRight=left.right;      int leftRightHeight=leftRight != null ? leftRight.height : 0;      int leftLeftHeight=leftLeft != null ? leftLeft.height : 0;      int leftDelta=leftLeftHeight - leftRightHeight;      if (leftDelta == 1 || (leftDelta == 0 && !insert)) {        rotateRight(node);      } else {        assert (leftDelta == -1);        rotateLeft(left);        rotateRight(node);      }      if (insert) {        break;      }    } else     if (delta == 0) {      node.height=leftHeight + 1;      if (insert) {        break;      }    } else {      assert (delta == -1 || delta == 1);      node.height=Math.max(leftHeight,rightHeight) + 1;      if (!insert) {        break;      }    }  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  private void loadEmbeddedObject(FieldMetaData fmd,OpenJPAStateManager sm,Object fieldValue){  if (fieldValue == null) {    sm.storeObject(fmd.getIndex(),null);  } else {    if (fieldValue != null) {      final OpenJPAStateManager em=ctx.embed(null,null,sm,fmd);      ((StateManager)em).setOwnerInformation((StateManager)sm,fmd);      sm.storeObject(fmd.getIndex(),em.getManagedInstance());      final ISpaceProxy proxy=(ISpaceProxy)getConfiguration().getSpace();      final IEntryPacket entry=proxy.getDirectProxy().getTypeManager().getEntryPacketFromObject(fieldValue,ObjectType.POJO);      loadFields(em,entry,fmd.getDeclaredTypeMetaData().getFields());    }  }}  }
class C{  public final boolean addAll(final PointsToSetInternal other,final PointsToSetInternal exclude){  boolean ret=false;  BitVector typeMask=(pag.getTypeManager()).get(type);  if (other instanceof SortedArraySet) {    SortedArraySet o=(SortedArraySet)other;    Node[] mya=nodes;    Node[] oa=o.nodes;    int osize=o.size;    Node[] newa=new Node[size + osize];    int myi=0;    int oi=0;    int newi=0;    for (; ; ) {      if (myi < size) {        if (oi < osize) {          int myhc=mya[myi].getNumber();          int ohc=oa[oi].getNumber();          if (myhc < ohc) {            newa[newi++]=mya[myi++];          } else           if (myhc > ohc) {            if ((type == null || typeMask == null || typeMask.get(ohc)) && (exclude == null || !exclude.contains(oa[oi]))) {              newa[newi++]=oa[oi];              ret=true;            }            oi++;          } else {            newa[newi++]=mya[myi++];            oi++;          }        } else {          newa[newi++]=mya[myi++];        }      } else {        if (oi < osize) {          int ohc=oa[oi].getNumber();          if ((type == null || typeMask == null || typeMask.get(ohc)) && (exclude == null || !exclude.contains(oa[oi]))) {            newa[newi++]=oa[oi];            ret=true;          }          oi++;        } else {          break;        }      }    }    nodes=newa;    size=newi;    return ret;  }  return super.addAll(other,exclude);}  }
class C{  public LockableFileWriter(File file,String encoding,boolean append,String lockDir) throws IOException {  this(file,Charsets.toCharset(encoding),append,lockDir);}  }
class C{  public FieldVector3D<T> negate(){  return new FieldVector3D<T>(x.negate(),y.negate(),z.negate());}  }
class C{  private void refreshCurrentEventTitles(){  title.setText(currentPhase.getTitle());  timer.setText(TimelineAlgos.getTime(currentPhase.getStartTime()) + " - " + TimelineAlgos.getTime(currentPhase.getEndTime()));}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public static Range of(int lowerBound,int upperBound){  return new Range(lowerBound,upperBound);}  }
class C{  private void ensureCapacity(int size){  if (fData == null) {    fData=new boolean[32];  } else   if (fData.length <= size) {    boolean[] newdata=new boolean[fData.length * 2];    System.arraycopy(fData,0,newdata,0,fData.length);    fData=newdata;  }}  }
class C{  public void stopAndError(String errorMessage){  mBasoStatus=BasoStatus.ERROR;  setFinishedText(errorMessage);  toggleLayout();}  }
class C{  public BooleanColumn(int nrows,int capacity,boolean defaultValue){  super(boolean.class,new Boolean(defaultValue));  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_bits=new BitSet(capacity);  m_bits.set(0,capacity,defaultValue);  m_size=nrows;}  }
class C{  private boolean saveGridImage(BufferedImage image,String formatName,File destinationFile,int dpi) throws IOException {  destinationFile.delete();  for (Iterator<ImageWriter> iw=ImageIO.getImageWritersByFormatName(formatName); iw.hasNext(); ) {    ImageWriter writer=iw.next();    ImageWriteParam writeParam=writer.getDefaultWriteParam();    ImageTypeSpecifier typeSpecifier=ImageTypeSpecifier.createFromBufferedImageType(BufferedImage.TYPE_INT_RGB);    IIOMetadata metadata=writer.getDefaultImageMetadata(typeSpecifier,writeParam);    if (metadata.isReadOnly() || !metadata.isStandardMetadataFormatSupported()) {      continue;    }    setDPI(metadata,dpi);    final ImageOutputStream stream=ImageIO.createImageOutputStream(destinationFile);    try {      writer.setOutput(stream);      writer.write(metadata,new IIOImage(image,null,metadata),writeParam);    }  finally {      stream.close();    }    break;  }  return true;}  }
class C{  public static String buildHostId(List<String> tenantLinks,String hostId){  AssertUtil.assertNotNull(hostId,"hostId");  String group=extractGroup(tenantLinks);  String id=extractHostId(hostId);  if (group == null || group.isEmpty()) {    return id;  } else {    return group + HOST_ID_TENANT_SEPARATOR + id;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Stumble_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200746,skillcaster,skillname);}  }
class C{  private ReadModifiers(){}  }
class C{  public AccountUnregisterDeviceQuery unregisterDevice(UserActor actor){  return new AccountUnregisterDeviceQuery(getClient(),actor);}  }
class C{  public void addPaintListener(PaintListener pl){  if (m_painters == null)   m_painters=new CopyOnWriteArrayList();  m_painters.add(pl);}  }
class C{  public BaseTopicProperty(final String topic){  this.topic=new SimpleStringProperty(topic);}  }
class C{  public void fail(){  currentTest.get().fail();}  }
class C{  private void checkBatchSize(){  if (loader.getBatchSize() > 1) {    LOG.warn("Loading with batch size [" + loader.getBatchSize() + "]. This can cause conflicts on commit.");  }}  }
class C{  public static final String formatVector2(Vector2 v){  return MessageFormat.format(Messages.getString("canvas.vector.format"),v.x,v.y);}  }
class C{  public MarketDeleteCommentQuery deleteComment(UserActor actor,int ownerId,int commentId){  return new MarketDeleteCommentQuery(getClient(),actor,ownerId,commentId);}  }
class C{  public void removeValidationRuleGroup(ValidationRuleGroup validationRuleGroup){  groups.remove(validationRuleGroup);  validationRuleGroup.getMembers().remove(this);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Spin_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200438,skilltarget,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_DISPERSE_TIME(String durationday0){  return new SM_SYSTEM_MESSAGE(1300308,durationday0);}  }
class C{  boolean updateMetadata(@NotNull Document metadata){  try {    VersionMetadata updated=loadMetadata(metadata.getRootElement());    if (updated.dataVersion > myMetadata.dataVersion) {      myMetadata=updated;      File metadataFilePath=getMetadataFilePath();      writeDocument(metadata,metadataFilePath,SystemProperties.getLineSeparator());      LOG.info("Saved component version metadata to: " + metadataFilePath);      return true;    }  } catch (  Throwable e) {    LOG.info("Failed to update component version metadata",e);  }  return false;}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  Log_OC.d(TAG,"Starting command with id " + startId);  if (ACTION_SYNC_FOLDER.equals(intent.getAction())) {    if (!intent.hasExtra(EXTRA_ACCOUNT) || !intent.hasExtra(EXTRA_REMOTE_PATH)) {      Log_OC.e(TAG,"Not enough information provided in intent");      return START_NOT_STICKY;    }    Account account=intent.getParcelableExtra(EXTRA_ACCOUNT);    String remotePath=intent.getStringExtra(EXTRA_REMOTE_PATH);    Pair<Account,String> itemSyncKey=new Pair<Account,String>(account,remotePath);    Pair<Target,RemoteOperation> itemToQueue=newOperation(intent);    if (itemToQueue != null) {      mSyncFolderHandler.add(account,remotePath,(SynchronizeFolderOperation)itemToQueue.second);      Message msg=mSyncFolderHandler.obtainMessage();      msg.arg1=startId;      msg.obj=itemSyncKey;      mSyncFolderHandler.sendMessage(msg);    }  } else {    Message msg=mOperationsHandler.obtainMessage();    msg.arg1=startId;    mOperationsHandler.sendMessage(msg);  }  return START_NOT_STICKY;}  }
class C{  @Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  return;}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set showLabels=" + (!isSelected()) + ";");}  }
class C{  public void createGroupFromWidgets(ArrayList<ConstraintWidget> widgets){  ConstraintWidgetContainer container=new ConstraintWidgetContainer();  container.setCompanionWidget(WidgetCompanion.create(container));  createContainerFromWidgets(widgets,container,createContainerName("group"));}  }
class C{  public void onPost(){  if (module != null) {    Module t=module.floor();    if (t != null) {      Model m=t.getModel(Model.METHOD_POST,uri);      if (m != null) {        m.dispatch(uri,req,resp,method);        return;      }    }  }  String uri=req.getRequestURI();  while (uri.indexOf("//") > -1) {    uri=uri.replaceAll("//","/");  }  Model mo=new DefaultModel();  mo.module=Module.load(0);  mo.copy(this);  mo.dispatch(uri,req,resp,method);}  }
class C{  void loadUrlInCurrentTab(LoadUrlParams params,long timeStamp){  Intent intent=getIntent();  IntentHandler.addReferrerAndHeaders(params,intent,this);  if (params.getReferrer() == null) {    params.setReferrer(CustomTabsConnection.getInstance(getApplication()).getReferrerForSession(mSession));  }  mTabObserver.trackNextPageLoadFromTimestamp(timeStamp);  if (mShouldReplaceCurrentEntry)   params.setShouldReplaceCurrentEntry(true);  mShouldReplaceCurrentEntry=false;  mTab.loadUrl(params);}  }
class C{  public static Zmat rowi(Zmat A,int pvt[]) throws JampackException {  int np=pvt.length;  if (np > A.nrow)   throw new JampackException("Inconsistent array dimensions");  A.dirty=true;  for (int k=np - 1; k >= 0; k--)   for (int j=0; j < A.nc; j++) {    double t=A.re[k][j];    A.re[k][j]=A.re[pvt[k]][j];    A.re[pvt[k]][j]=t;    t=A.im[k][j];    A.im[k][j]=A.im[pvt[k]][j];    A.im[pvt[k]][j]=t;  }  return A;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_FEED_COMMON_REWARD(String value0,String value2){  return new SM_SYSTEM_MESSAGE(1400624,value0,value2);}  }
class C{  public void componentHidden(ComponentEvent ev){}  }
class C{  public synchronized void removeListener(final Long tagId){  listeners.remove(tagId);  eventTimes.remove(tagId);}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  private void fillNonNullFields(final Object baseObject,final Object targetObject,final List<String> exceptions) throws IllegalAccessException, NoSuchFieldException {  List<Field> fields=getNonTransientSimpleFields(baseObject.getClass());  for (  Field field : fields) {    if (!exceptions.contains(field.getName())) {      field.setAccessible(true);      Object value=field.get(baseObject);      if (value != null) {        setSimpleField(targetObject,field.getName(),value);      }    }  }}  }
class C{  public SemiVariance withVarianceDirection(Direction direction){  return new SemiVariance(this.biasCorrected,direction);}  }
class C{  public static Intent createDeepLinkIntent(Context context,VRDeepLinkParam param){  if (param == null || isStringNullOrEmpty(param.mediaFbId)) {    return null;  }  if (IsVideoDeepLink(param)) {    return createDeepLinkIntentForVideoContent(context,param);  }  return createDeepLinkIntentForPhotoContent(context,param);}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  public MahaloPermission(String name){  super(name);}  }
class C{  private String interpretMessage(Message message,boolean displayHex) throws IOException {  byte[] msgData=message.getData();  ByteArrayOutputStream out=new ByteArrayOutputStream();  if (!displayHex) {    return new String(msgData);  } else {    HexDump.dump(msgData,0,out,0);    return new String(out.toByteArray());  }}  }
class C{  private static void deleteRecursive(CarbonFile f) throws CarbonUtilException {  if (f.isDirectory()) {    if (f.listFiles() != null) {      for (      CarbonFile c : f.listFiles()) {        deleteRecursive(c);      }    }  }  if (f.exists() && !f.delete()) {    throw new CarbonUtilException("Error while deleting the folders and files");  }}  }
class C{  private void drawCircle(Canvas canvas,int index,Paint paint,float radius){  if (isIllegalIndex(index)) {    return;  }  int x=getXByIndex(index);  int y=getYByIndex(index);  float centreY=cellHeight + (y - 1) * cellHeight + cellHeight * 0.5f;  float centreX=cellWidth * (x - 1) + cellWidth * 0.5f;  canvas.drawCircle(centreX,centreY,radius,paint);}  }
class C{  public String toString(cp_info constant_pool[]){  return "(" + high + ","+ low+ ") = "+ Long.toString(convert());}  }
class C{  public static void init(String dirName,BufferMgrType bufferType){  if (inited) {    if (logger.isLoggable(Level.WARNING))     logger.warning("discarding duplicated init request");    return;  }  queryPlannerCls=CoreProperties.getLoader().getPropertyAsClass(VanillaDb.class.getName() + ".QUERYPLANNER",HeuristicQueryPlanner.class,QueryPlanner.class);  updatePlannerCls=CoreProperties.getLoader().getPropertyAsClass(VanillaDb.class.getName() + ".UPDATEPLANNER",IndexUpdatePlanner.class,UpdatePlanner.class);  initFileAndLogMgr(dirName);  initTaskMgr();  initTxMgr();  Transaction initTx=txMgr.newTransaction(Connection.TRANSACTION_SERIALIZABLE,false);  boolean isDbNew=fileMgr.isNew();  initCatalogMgr(isDbNew,initTx);  if (isDbNew) {    if (logger.isLoggable(Level.INFO))     logger.info("creating new database");  } else {    if (logger.isLoggable(Level.INFO))     logger.info("recovering existing database");    RecoveryMgr.recover(initTx);    logMgr.removeAndCreateNewLog();  }  initStatMgr(initTx);  initSPFactory();  initTx.commit();  boolean doCheckpointing=CoreProperties.getLoader().getPropertyAsBoolean(VanillaDb.class.getName() + ".DO_CHECKPOINT",true);  if (doCheckpointing)   initCheckpointingTask();  inited=true;}  }
class C{  public boolean supportsRename(){  return true;}  }
class C{  private static String timeApprox(int hour,int min){  int mm;  mm=min % 5;  if ((mm == 0) || (mm == 4)) {    return "exactly";  } else   if (mm == 1) {    return "just after";  } else   if (mm == 2) {    return "a little after";  } else {    return "almost";  }}  }
class C{  public EconomyConcurrentHashMap(Map<? extends K,? extends V> m,IHashEntryHandler<K,V> handler){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL,handler);  putAll(m);}  }
class C{  public static boolean isDarkTheme(Context context,boolean current){  return resolveBoolean(context,R.attr.themeDark,current);}  }
class C{  protected void reset() throws XNIException {  if (fValidationManager != null)   fValidationManager.reset();  int count=fComponents.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fComponents.get(i);    c.reset(this);  }}  }
class C{  public CM_TITLE_SET(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  private void tolset(){  int pos;  double total;  final double eps=this.epsilon;  for (int i=0; i < nvars; i++) {    this.work_tolset[i]=FastMath.sqrt(d[i]);  }  tol[0]=eps * this.work_tolset[0];  for (int col=1; col < nvars; col++) {    pos=col - 1;    total=work_tolset[col];    for (int row=0; row < col; row++) {      total+=FastMath.abs(r[pos]) * work_tolset[row];      pos+=nvars - row - 2;    }    tol[col]=eps * total;  }  tol_set=true;}  }
class C{  public boolean hasFilters(){  return filters != null && !filters.isEmpty();}  }
class C{  public InterpolatingMicrosphere2D(int size,double maxDarkFraction,double darkThreshold,double background){  super(DIMENSION,size,maxDarkFraction,darkThreshold,background);  for (int i=0; i < size; i++) {    final double angle=i * MathUtils.TWO_PI / size;    add(new double[]{FastMath.cos(angle),FastMath.sin(angle)},false);  }}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null) {    return false;  }  if (!getClass().isAssignableFrom(o.getClass())) {    return false;  }  final BaseIdentifiableObject other=(BaseIdentifiableObject)o;  if (getUid() != null ? !getUid().equals(other.getUid()) : other.getUid() != null) {    return false;  }  if (getCode() != null ? !getCode().equals(other.getCode()) : other.getCode() != null) {    return false;  }  if (getName() != null ? !getName().equals(other.getName()) : other.getName() != null) {    return false;  }  return true;}  }
class C{  public static String fromColour(Color colour){  if (colour == null) {    return null;  }  return SLD.toHTMLColor(colour);}  }
class C{  public static void validateUTF8(byte[] utf8) throws MalformedInputException {  validateUTF8(utf8,0,utf8.length);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_WHO_DIALOG_RESULT(int num0){  return new SM_SYSTEM_MESSAGE(1390249,num0);}  }
class C{  public AggregationSet maxEntry(String path){  return add(new MaxEntryAggregator().setPath(path));}  }
class C{  public void zoomIn() throws IOException {  float zoom=(float)(1 / 4.0);  int range=this.to - this.from + 1;  if (range % 2 == 1) {    range--;  }  int midpoint=this.getMidpoint();  int extendBy=(int)Math.rint(range * zoom);  int newFrom=midpoint - extendBy;  int newTo=midpoint + extendBy;  if ((newTo - newFrom + 1) < windowSize) {    int diff=windowSize - (newTo - newFrom + 1);    if (diff % 2 == 0) {      newFrom-=diff / 2;      newTo+=diff / 2;    } else {      newFrom-=diff / 2 + 1;      newTo+=diff / 2;    }    newFrom=(newFrom < this.from) ? this.from : newFrom;    newTo=(newTo > this.to) ? this.to : newTo;  }  this.from=newFrom;  this.to=newTo;  if (this.from > this.to) {    this.to=this.from;  }  this.setRefSeq();}  }
class C{  public static Observable<GoogleApiClient> observable(Context context,Api api){  return GoogleApiClientObservable.create(context.getApplicationContext(),new ApiDefinition(api));}  }
class C{  public static void saveToSdCard(List<Entry> entries,String path){  File sdcard=Environment.getExternalStorageDirectory();  File saved=new File(sdcard,path);  if (!saved.exists()) {    try {      saved.createNewFile();    } catch (    IOException e) {      Log.e(LOG,e.toString());    }  }  BufferedWriter buf=null;  try {    buf=new BufferedWriter(new FileWriter(saved,true));    for (    Entry e : entries) {      buf.append(e.getVal() + "#" + e.getXIndex());      buf.newLine();    }  } catch (  IOException e) {    Log.e(LOG,e.toString());  } finally {    if (buf != null)     try {      buf.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public static CommonConfetti explosion(ViewGroup container,int x,int y,int[] colors){  final CommonConfetti commonConfetti=new CommonConfetti(container);  commonConfetti.configureExplosion(container,x,y,colors);  return commonConfetti;}  }
class C{  public ConfettiSource(int x0,int y0,int x1,int y1){  this.x0=x0;  this.y0=y0;  this.x1=x1;  this.y1=y1;}  }
class C{  public static void createQuerySchema(String schemaFile,String querySchemaName,String dataSchemaNameInput,String selectorNameInput,List<String> elementNames,List<String> filterNames,String filter,boolean append,FileSystem fs,boolean hdfs) throws IOException {  createQuerySchema(schemaFile,querySchemaName,dataSchemaNameInput,selectorNameInput,elementNames,filterNames,filter,append,fs,hdfs,null);}  }
class C{  @Override public int read(char[] chr) throws IOException {  try {    beforeRead(chr != null ? chr.length : 0);    int n=in.read(chr);    afterRead(n);    return n;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (textField != null) {      return textField.isEnabled();    }  }  return false;}  }
class C{  public static double regularizedBeta(double x,double a,double b,double epsilon){  return regularizedBeta(x,a,b,epsilon,Integer.MAX_VALUE);}  }
class C{  private GroupConfig parseGroup(Class<?> localisationClass,Class<?> panelId,XMLGroupConfig xmlGroupObj){  GroupConfig groupConfig=new GroupConfig();  groupConfig.setId(xmlGroupObj.getId());  groupConfig.setLabel(getLocalisedText(localisationClass,xmlGroupObj.getLabel()));  groupConfig.setShowLabel(xmlGroupObj.isShowLabel());  groupConfig.setOptional(xmlGroupObj.isOption());  for (  Object obj : xmlGroupObj.getFieldList()) {    if (obj instanceof XMLFieldConfigData) {      addField(localisationClass,panelId,groupConfig,(XMLFieldConfigData)obj);    } else     if (obj instanceof XMLGroupConfig) {      GroupConfig subGroup=parseGroup(localisationClass,panelId,(XMLGroupConfig)obj);      groupConfig.addGroup(subGroup);    } else     if (obj instanceof XMLMultiOptionGroup) {      MultiOptionGroup subGroup=parseMultiOptionGroup(localisationClass,panelId,(XMLMultiOptionGroup)obj);      groupConfig.addGroup(subGroup);    } else     if (obj instanceof XMLFieldConfigVendorOption) {      XMLFieldConfigVendorOption vendorOption=(XMLFieldConfigVendorOption)obj;      FieldIdEnum id=vendorOption.getId();      String label=null;      boolean valueOnly=true;      FieldConfigCommonData commonData=new FieldConfigCommonData(panelId,id,label,valueOnly);      List<VendorOptionInterface> veList=null;      veList=vendorOptionFactory.getVendorOptionList(vendorOption.getClazz());      if ((veList == null) || veList.isEmpty()) {        ConsoleManager.getInstance().error(this,Localisation.getField(FieldConfigBase.class,"FieldConfigVendorOption.missingVendorOptionClass") + vendorOption.getClazz());      }      FieldConfigVendorOption placeHolder=new FieldConfigVendorOption(commonData,veList);      groupConfig.addField(placeHolder);    }  }  return groupConfig;}  }
class C{  public H264Stream(){  this(CameraInfo.CAMERA_FACING_BACK);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Shield_INTERVAL_TO_B(String skilltarget,int num0){  return new SM_SYSTEM_MESSAGE(1201074,skilltarget,num0);}  }
class C{  void rollback(){  queryExecutor.submit(null);}  }
class C{  protected void removeTrackedServices(){  for (  ServiceTracker<ExtHttpService,ExtHttpService> tracker : trackers) {    tracker.close();  }}  }
class C{  public static void load(){  try {    if (mary2freettsVoices == null) {      Log.i(Mary.LOG,"Loading US English FreeTTS voices...");      Collection maryVoices=marytts.modules.synthesis.Voice.getAvailableVoices(Locale.US);      Iterator it=maryVoices.iterator();      while (it.hasNext()) {        marytts.modules.synthesis.Voice maryVoice=(marytts.modules.synthesis.Voice)it.next();        Log.d(Mary.LOG,"FROM load()");        load(maryVoice);      }      Log.i(Mary.LOG,"voice load done.");    }  } catch (  Throwable t) {    Log.d(Mary.LOG,"load error : " + t);  }}  }
class C{  @Override protected Boolean doInBackground(Boolean... params){  if (params[0]) {    String[] checkedFilePaths=mFileListFragment.getCheckedFilePaths();    long total=0;    for (int i=0; checkedFilePaths != null && i < checkedFilePaths.length; i++) {      String localPath=checkedFilePaths[i];      File localFile=new File(localPath);      total+=localFile.length();    }    return FileStorageUtils.getUsableSpace(mAccountOnCreation.name) >= total;  }  return true;}  }
class C{  @Override public int vote(Authentication authentication,Object object,Collection<ConfigAttribute> attributes){  if (!supports(object.getClass())) {    LOG.debug("ACCESS_ABSTAIN [" + object.toString() + "]: Class not supported.");    return ACCESS_ABSTAIN;  }  ActionConfig target=(ActionConfig)object;  if (alwaysAccessible.contains(target.getPackageName())) {    LOG.debug("ACCESS_GRANTED [" + target.getPackageName() + "] by configuration.");    return ACCESS_GRANTED;  }  String requiredAuthority=attributePrefix + target.getPackageName();  for (  GrantedAuthority grantedAuthority : authentication.getAuthorities()) {    if (grantedAuthority.getAuthority().equals(requiredAuthority)) {      LOG.debug("ACCESS_GRANTED [" + target.getPackageName() + "]");      return ACCESS_GRANTED;    }  }  LOG.debug("ACCESS_DENIED [" + target.getPackageName() + "]");  return ACCESS_DENIED;}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  public static void writeEnum(DataOutput out,Enum<?> enumVal) throws IOException {  Text.writeString(out,enumVal.name());}  }
class C{  public ScrollObject(){  this.toTop=true;}  }
class C{  @Override protected void fillUtterance(Utterance utterance,Element sentence){  fillUtterance(utterance,sentence,true,true,false);}  }
class C{  private void notifyForgottenLocalFiles(){  NotificationCompat.Builder notificationBuilder=createNotificationBuilder();  notificationBuilder.setTicker(i18n(R.string.sync_foreign_files_forgotten_ticker));  Intent explanationIntent=new Intent(getContext(),ErrorsWhileCopyingHandlerActivity.class);  explanationIntent.putExtra(ErrorsWhileCopyingHandlerActivity.EXTRA_ACCOUNT,getAccount());  ArrayList<String> remotePaths=new ArrayList<String>();  ArrayList<String> localPaths=new ArrayList<String>();  remotePaths.addAll(mForgottenLocalFiles.keySet());  localPaths.addAll(mForgottenLocalFiles.values());  explanationIntent.putExtra(ErrorsWhileCopyingHandlerActivity.EXTRA_LOCAL_PATHS,localPaths);  explanationIntent.putExtra(ErrorsWhileCopyingHandlerActivity.EXTRA_REMOTE_PATHS,remotePaths);  explanationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  notificationBuilder.setContentIntent(PendingIntent.getActivity(getContext(),(int)System.currentTimeMillis(),explanationIntent,0)).setContentTitle(i18n(R.string.sync_foreign_files_forgotten_ticker)).setContentText(i18n(R.string.sync_foreign_files_forgotten_content,mForgottenLocalFiles.size(),i18n(R.string.app_name)));  showNotification(R.string.sync_foreign_files_forgotten_ticker,notificationBuilder);}  }
class C{  public static Histogram add(Histogram x,Histogram y){  return new Histogram(Stream.concat(x.stream(),y.stream()));}  }
class C{  public void clear(IValidatable bean){  for (  Binding b : _optComponents.values()) {    b.clear(bean);  }  for (  Binding b : _bindings.values()) {    b.clear(bean);  }  _modified=false;}  }
class C{  public final Vertex locateVertexInGraph(UniqueVertexGraph gGraph,Vertex vToFind){  return gGraph.locateVertex(vToFind);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  private void startPokeFly(){  launchButton.setText(R.string.main_starting);  launchButton.setEnabled(false);  int statusBarHeight=getStatusBarHeight();  Intent intent=Pokefly.createIntent(this,trainerLevel,statusBarHeight,batterySaver);  startService(intent);  if (settings.shouldLaunchPokemonGo()) {    openPokemonGoApp();  }}  }
class C{  static VersionNumber identifyAndroidVersion(@Nonnull final String userAgent){  VersionNumber version=VersionNumber.UNKNOWN;  final List<Pattern> patterns=new ArrayList<Pattern>();  patterns.add(Pattern.compile("Android\\s?((\\d+)((\\.\\d+)+)?(\\-(\\w|\\d)+)?);"));  patterns.add(Pattern.compile("Android\\-((\\d+)((\\.\\d+)+)?(\\-(\\w|\\d)+)?);"));  for (  final Pattern pattern : patterns) {    final Matcher m=pattern.matcher(userAgent);    if (m.find()) {      version=parseFirstVersionNumber(m.group(MAJOR_INDEX));      break;    }  }  return version;}  }
class C{  public boolean removeEdge(Edge e){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  List<ConfigItem> fetchConfigs(Set<String> names){  Map<String,Object> params=Maps.newHashMapWithExpectedSize(1);  params.put("names",Joiners.COMMA.join(names));  return doGet(ClientUris.CONFIG_FETCHES,headers,params,JsonUtil.LIST_CONFIG_ITEM_TYPE);}  }
class C{  public static Node replaceLeafByCart(CART cart,LeafNode leaf){  DecisionNode mother=(DecisionNode)leaf.getMother();  Node newNode=cart.getRootNode();  mother.replaceDaughter(newNode,leaf.getNodeIndex());  newNode.setIsRoot(false);  return newNode;}  }
class C{  public boolean unroll(){  return soot.PhaseOptions.getBoolean(options,"unroll");}  }
class C{  protected StatsGetPostReachQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues,java.util.Date moment){  return filterByDate(datedValues,new java.sql.Timestamp(moment.getTime()),null,null,true);}  }
class C{  protected String encode(Object obj) throws EncodeException {  try {    return mapper.writeValueAsString(obj);  } catch (  Exception e) {    throw new EncodeException("Failed to encode as JSON: " + e.getMessage());  }}  }
class C{  public ShoppingCartItem findCartItem(String productId,Map<String,GenericValue> features,Map<String,Object> attributes,String prodCatalogId,BigDecimal selectedAmount){  for (int i=0; i < this.cartLines.size(); i++) {    ShoppingCartItem cartItem=cartLines.get(i);    if (cartItem.equals(productId,features,attributes,prodCatalogId,selectedAmount)) {      return cartItem;    }  }  return null;}  }
class C{  @Override protected void compactRanges(){  boolean DEBUG=false;  if (this.ranges == null || this.ranges.length <= 2)   return;  if (this.isCompacted())   return;  int base=0;  int target=0;  while (target < this.ranges.length) {    if (base != target) {      this.ranges[base]=this.ranges[target++];      this.ranges[base + 1]=this.ranges[target++];    } else     target+=2;    int baseend=this.ranges[base + 1];    while (target < this.ranges.length) {      if (baseend + 1 < this.ranges[target])       break;      if (baseend + 1 == this.ranges[target]) {        if (DEBUG)         System.err.println("Token#compactRanges(): Compaction: [" + this.ranges[base] + ", "+ this.ranges[base + 1]+ "], ["+ this.ranges[target]+ ", "+ this.ranges[target + 1]+ "] -> ["+ this.ranges[base]+ ", "+ this.ranges[target + 1]+ "]");        this.ranges[base + 1]=this.ranges[target + 1];        baseend=this.ranges[base + 1];        target+=2;      } else       if (baseend >= this.ranges[target + 1]) {        if (DEBUG)         System.err.println("Token#compactRanges(): Compaction: [" + this.ranges[base] + ", "+ this.ranges[base + 1]+ "], ["+ this.ranges[target]+ ", "+ this.ranges[target + 1]+ "] -> ["+ this.ranges[base]+ ", "+ this.ranges[base + 1]+ "]");        target+=2;      } else       if (baseend < this.ranges[target + 1]) {        if (DEBUG)         System.err.println("Token#compactRanges(): Compaction: [" + this.ranges[base] + ", "+ this.ranges[base + 1]+ "], ["+ this.ranges[target]+ ", "+ this.ranges[target + 1]+ "] -> ["+ this.ranges[base]+ ", "+ this.ranges[target + 1]+ "]");        this.ranges[base + 1]=this.ranges[target + 1];        baseend=this.ranges[base + 1];        target+=2;      } else {        throw new RuntimeException("Token#compactRanges(): Internel Error: [" + this.ranges[base] + ","+ this.ranges[base + 1]+ "] ["+ this.ranges[target]+ ","+ this.ranges[target + 1]+ "]");      }    }    base+=2;  }  if (base != this.ranges.length) {    int[] result=new int[base];    System.arraycopy(this.ranges,0,result,0,base);    this.ranges=result;  }  this.setCompacted();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("show gapBetweenBars=");  boolean show=np.getBoolean();  np.matchIgnoreCase(";");  if (getViewer() instanceof ChartViewer) {    ((ChartViewer)getViewer()).setShowGapsBetweenBars(show);  }}  }
class C{  @Override protected MatchingPart toPart(List<MatchingPart> leadingParts,String part){switch (leadingParts.size()) {case 0:    MatchingPart resolvedPart=createEmoPermissionPart(part,PartType.CONTEXT);  checkArgument(resolvedPart instanceof ConstantPart || resolvedPart.impliesAny(),"First part must be a constant or pure wildcard");return resolvedPart;case 1:checkArgument(!MatchingPart.getContext(leadingParts).impliesAny(),"Cannot narrow permission without initial scope");return createEmoPermissionPart(part,PartType.ACTION);case 2:PartType partType;if (MatchingPart.contextImpliedBy(SOR_PART,leadingParts)) {partType=PartType.SOR_TABLE;} else if (MatchingPart.contextImpliedBy(BLOB_PART,leadingParts)) {partType=PartType.BLOB_TABLE;} else {partType=PartType.NAMED_RESOURCE;}return createEmoPermissionPart(part,partType);}throw new IllegalArgumentException("EmoPermission does not support over three parts");}  }
class C{  public DocumentNGramDistroGraph inverseIntersectDistroGraph(DocumentNGramDistroGraph dgOtherGraph){  DocumentNGramDistroGraph dgUnion=(DocumentNGramDistroGraph)clone();  dgUnion.mergeDistroGraph(dgOtherGraph);  DocumentNGramDistroGraph dgIntersection=intersectDistroGraph(dgOtherGraph);  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gUnion=dgUnion.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gIntersection=dgIntersection.getGraphLevelByNGramSize(iCurLvl);    EdgeCachedLocator eclLocator=new EdgeCachedLocator(10);    if (gIntersection == null)     continue;    java.util.Iterator iIter=gIntersection.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gUnion,weCurItem.getVertexA(),weCurItem.getVertexB());      if (eEdge != null)       try {        gUnion.removeEdge(eEdge);        dgUnion.getEdgesToDistros().remove(eEdge);      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }  return dgUnion;}  }
class C{  public String exportResources(VariableSpace space,Map<String,ResourceDefinition> definitions,ResourceNamingInterface resourceNamingInterface,Repository repository) throws KettleException {  try {    if (Const.isEmpty(filenameField)) {      FileObject fileObject=KettleVFS.getFileObject(space.environmentSubstitute(filename),space);      if (fileObject.exists()) {        filename=resourceNamingInterface.nameResource(fileObject,space,true);        return filename;      }    }    return null;  } catch (  Exception e) {    throw new KettleException(e);  }}  }
class C{  public Set<String> joinFields(String fldName){  Set<String> flds=new HashSet<String>();  flds.add(fldName);  Deque<String> queue=new LinkedList<String>();  queue.addLast(fldName);  while (!queue.isEmpty()) {    String fld=queue.removeFirst();    for (    Term t : terms) {      String s=t.oppositeField(fld);      if (s != null && t.operator(fldName) == OP_EQ && !flds.contains(s)) {        flds.add(s);        queue.addLast(s);      }    }  }  flds.remove(fldName);  return flds.size() == 0 ? null : flds;}  }
class C{  protected AbstractWell(final int k,final long seed){  this(k,new int[]{(int)(seed >>> 32),(int)(seed & 0xffffffffl)});}  }
class C{  @Override public void logoutWithoutApi(){  if ((mSelectedMenuItemId == R.id.my_tickets || mSelectedMenuItemId == R.id.drafts)) {    mSelectedMenuItemId=R.id.all_tickets;    mTitleId=R.string.all_tickets;    mCurrentFragment=TicketsFragment.newInstance(false,mOnPageChangeListener);    performScreenChange(mSelectedMenuItemId);    setTitle(mTitleId);  }}  }
class C{  public T next(){  if (enable) {    if (done) {      return null;    }    if (next == null)     hasNext();    if (next != null) {      T result=(T)next;      next=null;      return result;    } else {      return null;    }  } else   return iterator.next();}  }
class C{  public void testQueryByAssigneeExcludeSubtasksOrderedAndPaginated() throws Exception {  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy hh:mm:ss.SSS");  TaskQuery query=taskService.createTaskQuery().taskAssignee("gonzo").orderByTaskCreateTime().asc();  assertEquals(7,query.count());  assertEquals(1,query.listPage(0,1).size());  assertEquals(sdf.parse("01/02/2008 02:02:02.000"),query.listPage(0,1).get(0).getCreateTime());  assertEquals(1,query.listPage(1,1).size());  assertEquals(sdf.parse("05/02/2008 02:02:02.000"),query.listPage(1,1).get(0).getCreateTime());  assertEquals(2,query.listPage(0,2).size());  assertEquals(sdf.parse("01/02/2008 02:02:02.000"),query.listPage(0,2).get(0).getCreateTime());  assertEquals(sdf.parse("05/02/2008 02:02:02.000"),query.listPage(0,2).get(1).getCreateTime());  query=taskService.createTaskQuery().taskAssignee("gonzo").excludeSubtasks().orderByTaskCreateTime().desc();  assertEquals(2,query.count());  assertEquals(1,query.listPage(1,1).size());  assertEquals(sdf.parse("01/02/2008 02:02:02.000"),query.listPage(1,1).get(0).getCreateTime());  assertEquals(1,query.listPage(0,1).size());  assertEquals(sdf.parse("05/02/2008 02:02:02.000"),query.listPage(0,1).get(0).getCreateTime());  query=taskService.createTaskQuery().taskAssignee("kermit").orderByTaskCreateTime().asc();  assertEquals(0,query.count());  assertEquals(0,query.listPage(0,2).size());  assertNull(query.singleResult());  query=taskService.createTaskQuery().taskAssignee("kermit").excludeSubtasks().orderByTaskCreateTime().desc();  assertEquals(0,query.count());  assertEquals(0,query.listPage(0,2).size());  assertNull(query.singleResult());}  }
class C{  public void onNewItemsAdded(int size){  if (size < mPageSize) {    setAllItemsLoaded(true);    hideBottomProgress();  }}  }
class C{  protected SecureSendNotificationQuery message(String value){  return unsafeParam("message",value);}  }
class C{  public static void main(String[] sArgs){  System.err.print("Parsing XML file...");  ACQUAINT2DocumentSet tds=new ACQUAINT2DocumentSet("/home/pckid/Documents/JApplications/JInsect/TAC2008/data/cna_eng/cna_eng_200410");  System.err.println("Done.");  System.err.print("Creating sets.");  tds.createSets();  System.err.println("Done.");  System.err.println("Determining categories...");  System.out.println(utils.printList(tds.getCategories()," | "));  System.err.println("Determining categories...Done.");  System.err.println("File count per category...");  for (  String sCategory : (List<String>)tds.getCategories())   System.out.println(String.format("%s : #%d",sCategory,tds.getFilesFromCategory(sCategory).size()));  System.err.println("File count per category...Done.");  System.out.println("First text per category...");  for (  String sCategory : (List<String>)tds.getCategories()) {    System.out.println("\n===" + sCategory + "===");    System.out.println(tds.loadDocumentTextToString((String)tds.getFilesFromCategory(sCategory).get(0)));    String sDateline=tds.loadDocumentDatelineToString((String)tds.getFilesFromCategory(sCategory).get(0));    System.out.println(sDateline.length() == 0 ? "No dateline..." : "Dateline:\t" + sDateline);  }  System.out.println("File count per category...Done.");  System.err.println("Extracting dates...");  for (  String sDocID : tds.toFilenameSet(ACQUAINT2DocumentSet.FROM_WHOLE_SET)) {    Date d=tds.getDocDate(sDocID);    System.out.println(String.format("%s : %s",sDocID,d != null ? d.toString() : "No date found"));  }  System.err.println("Extracting dates...Done.");}  }
class C{  @Override public void onContentChanged(){  super.onContentChanged();  mList=(TicklableRecyclerView)findViewById(android.R.id.list);  mList.setLayoutManager(new FocusableLinearLayoutManager(this));  if (mList == null) {    throw new RuntimeException("Your content must have a RecyclerView whose id attribute is " + "'android.R.id.list'");  }  if (mFinishedStart) {    setListAdapter(mAdapter);  }  mHandler.post(mRequestFocus);  mFinishedStart=true;}  }
class C{  protected AccountSetNameInMenuQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  private static void convertCorrelationsToDistances(Distances distances){  for (int i=1; i <= distances.getNtax(); i++) {    for (int j=i + 1; j <= distances.getNtax(); j++) {      distances.set(i,j,(1.0 - distances.get(i,j) * distances.get(i,j)));    }  }}  }
class C{  private Singletons(){}  }
class C{  private void createExpressionParameterList(FilterNode node,int noOfExpressions,List<Expression> parameterFilter){  if (noOfExpressions <= node.getChildCount()) {    for (int index=0; index < noOfExpressions; index++) {      ExpressionNode expressionNode=(ExpressionNode)node.getChildAt(index);      Expression expression=addExpression(expressionNode);      parameterFilter.add(expression);    }  }}  }
class C{  public static String escapeString(String str){  return escapeString(str,ESCAPE_CHAR,COMMA);}  }
class C{  public Value index(Value target){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public static void wtf(Throwable throwable){  log(Log.ERROR,0,null,new ThrowableFormatter(),null,null,throwable);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sleep_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200437,skilltarget,skillname);}  }
class C{  public GroupSizeFunction(String group){  super(group);}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  private static boolean overflowInParse(long current,int digit,int radix){  if (current >= 0) {    if (current < maxValueDivs[radix]) {      return false;    }    if (current > maxValueDivs[radix]) {      return true;    }    return (digit > maxValueMods[radix]);  }  return true;}  }
class C{  private static int convertIndex(final int index,final int srcP,final int[][] srcDerivativesIndirection,final int destP,final int destO,final int[][] destSizes) throws MathIllegalArgumentException {  int[] orders=new int[destP];  System.arraycopy(srcDerivativesIndirection[index],0,orders,0,FastMath.min(srcP,destP));  return getPartialDerivativeIndex(destP,destO,destSizes,orders);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_INTERVAL_HEAL_MP_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201281,num0,skillname);}  }
class C{  private void write(char c) throws SAXException {  try {    output.write(c);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public boolean authenticate(String username,String password,boolean isServiceAuth) throws AuthenticatorException {  Debug.logInfo(this.getClass().getName() + " Authenticator authenticate() -- returning false",module);  return false;}  }
class C{  private void syncProgress(SeekBar seekBar){  float value=seekBarProgressToPrefValue(seekBar.getProgress());  if (value != mValue) {    if (callChangeListener(value)) {      setValue(value,false);    } else {      seekBar.setProgress(prefValueToSeekBarProgress(mValue));    }  }}  }
class C{  public void addContents(Collection<ContentElement> contents){  this.contents.addAll(contents);}  }
class C{  public BrentSolver(double absoluteAccuracy){  super(absoluteAccuracy);}  }
class C{  @JsOverlay public static JsPlainObj $jsPlainObj(Object... fieldValues){  return $(new JsPlainObj(),fieldValues);}  }
class C{  private static void addConstantTag(SootField df,Field sf){  Tag tag=null;  EncodedValue ev=sf.getInitialValue();  if (ev instanceof BooleanEncodedValue) {    tag=new IntegerConstantValueTag(((BooleanEncodedValue)ev).getValue() == true ? 1 : 0);  } else   if (ev instanceof ByteEncodedValue) {    tag=new IntegerConstantValueTag(((ByteEncodedValue)ev).getValue());  } else   if (ev instanceof CharEncodedValue) {    tag=new IntegerConstantValueTag(((CharEncodedValue)ev).getValue());  } else   if (ev instanceof DoubleEncodedValue) {    tag=new DoubleConstantValueTag(((DoubleEncodedValue)ev).getValue());  } else   if (ev instanceof FloatEncodedValue) {    tag=new FloatConstantValueTag(((FloatEncodedValue)ev).getValue());  } else   if (ev instanceof IntEncodedValue) {    tag=new IntegerConstantValueTag(((IntEncodedValue)ev).getValue());  } else   if (ev instanceof LongEncodedValue) {    tag=new LongConstantValueTag(((LongEncodedValue)ev).getValue());  } else   if (ev instanceof ShortEncodedValue) {    tag=new IntegerConstantValueTag(((ShortEncodedValue)ev).getValue());  } else   if (ev instanceof StringEncodedValue) {    tag=new StringConstantValueTag(((StringEncodedValue)ev).getValue());  }  if (tag != null)   df.addTag(tag);}  }
class C{  public PagesClearCacheQuery(VkApiClient client,String url){  super(client,"pages.clearCache",OkResponse.class);  url(url);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_GUILD_EXP(int num0){  return new SM_SYSTEM_MESSAGE(1300570,num0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonHoming_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200730,skillcaster,value0,skillname);}  }
class C{  private void removeObsoleteElements(List<String> names,Map<String,View> sharedElements,List<String> elementsToRemove){  if (elementsToRemove.size() > 0) {    names.removeAll(elementsToRemove);    for (    String elementToRemove : elementsToRemove) {      sharedElements.remove(elementToRemove);    }  }}  }
class C{  @Override public void processUpdates(final DataTagValueUpdate dataTagValueUpdate){  try {    activeUpdateThreads.getAndIncrement();    Collection<SourceDataTagValue> values=dataTagValueUpdate.getValues();    if (values != null) {      for (      SourceDataTagValue sourceDataTagValue : values) {        if (sourceDataTagValue.isControlTag()) {          processControl(sourceDataTagValue);        } else {          processDataTag(sourceDataTagValue);        }        sourceDataTagValue.log();      }    }  }  finally {    activeUpdateThreads.getAndDecrement();    if (activeUpdateThreads.get() > 100) {      alarmActive=true;      switchOffCountDown=new AtomicInteger(SWITCH_OFF_COUNTDOWN);      if (warningCount.getAndIncrement() % WARNING_FREQUENCY == 0) {        SMSLOGGER.warn("Over 100 source update threads active.");      }    } else     if (alarmActive && switchOffCountDown.getAndDecrement() == 0) {      alarmActive=false;      SMSLOGGER.warn("Number of active update threads back to normal.");      warningCount=new AtomicInteger(0);    }  }}  }
class C{  void deleteEdgeTo(Schema.EdgeLabel type,Concept toConcept){  GraphTraversal<Vertex,Edge> traversal=mindmapsGraph.getTinkerPopGraph().traversal().V(getBaseIdentifier()).outE(type.getLabel()).as("edge").otherV().hasId(((ConceptImpl)toConcept).getBaseIdentifier()).select("edge");  if (traversal.hasNext())   traversal.next().remove();}  }
class C{  private void populateFunctionComboBox(){  if (functionComboBox != null) {    DefaultComboBoxModel<String> model=new DefaultComboBoxModel<String>();    model.addElement("");    List<String> functionNameList=new ArrayList<String>(functionNameMap.keySet());    java.util.Collections.sort(functionNameList);    for (    String name : functionNameList) {      model.addElement(name);    }    functionComboBox.setModel(model);  }}  }
class C{  public PhotosGetMarketUploadServerQuery mainPhoto(Boolean value){  return unsafeParam("main_photo",value);}  }
class C{  @Override public PolynomialSplineFunction interpolate(double x[],double y[]) throws MathIllegalArgumentException {  MathArrays.checkEqualLength(x,y);  if (x.length < 3) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_OF_POINTS,x.length,3,true);  }  final int n=x.length - 1;  MathArrays.checkOrder(x);  final double h[]=new double[n];  for (int i=0; i < n; i++) {    h[i]=x[i + 1] - x[i];  }  final double mu[]=new double[n];  final double z[]=new double[n + 1];  mu[0]=0d;  z[0]=0d;  double g=0;  for (int i=1; i < n; i++) {    g=2d * (x[i + 1] - x[i - 1]) - h[i - 1] * mu[i - 1];    mu[i]=h[i] / g;    z[i]=(3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1]) + y[i - 1] * h[i]) / (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;  }  final double b[]=new double[n];  final double c[]=new double[n + 1];  final double d[]=new double[n];  z[n]=0d;  c[n]=0d;  for (int j=n - 1; j >= 0; j--) {    c[j]=z[j] - mu[j] * c[j + 1];    b[j]=(y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] + 2d * c[j]) / 3d;    d[j]=(c[j + 1] - c[j]) / (3d * h[j]);  }  final PolynomialFunction polynomials[]=new PolynomialFunction[n];  final double coefficients[]=new double[4];  for (int i=0; i < n; i++) {    coefficients[0]=y[i];    coefficients[1]=b[i];    coefficients[2]=c[i];    coefficients[3]=d[i];    polynomials[i]=new PolynomialFunction(coefficients);  }  return new PolynomialSplineFunction(x,polynomials);}  }
class C{  public TypeQueryExtensionsImpl(){}  }
class C{  public void terminate(){  listeners.clear();  lookupDisc.terminate();  locatorDisc.terminate();  if (dynamicLocatorDisc != null)   dynamicLocatorDisc.terminate();}  }
class C{  private void storeLegion(Legion legion){  storeLegion(legion,false);}  }
class C{  @Override public String next(){  return nextLine();}  }
class C{  protected void analyzePixels(){  int len=pixels.length;  int nPix=len / 3;  indexedPixels=new byte[nPix];  Quant nq=new Quant(pixels,len,sample);  colorTab=nq.process();  for (int i=0; i < colorTab.length; i+=3) {    byte temp=colorTab[i];    colorTab[i]=colorTab[i + 2];    colorTab[i + 2]=temp;    usedEntry[i / 3]=false;  }  int k=0;  for (int i=0; i < nPix; i++) {    int index=nq.map(pixels[k++] & 0xff,pixels[k++] & 0xff,pixels[k++] & 0xff);    usedEntry[index]=true;    indexedPixels[i]=(byte)index;  }  pixels=null;  colorDepth=8;  palSize=7;  if (transparent != null) {    transIndex=findClosest(transparent);  }}  }
class C{  protected ThrowableSet mightThrow(SootMethodRef m){  return ThrowableSet.Manager.v().ALL_THROWABLES;}  }
class C{  private SAXParserImpl newSAXParserImpl() throws ParserConfigurationException, SAXNotRecognizedException, SAXNotSupportedException {  SAXParserImpl saxParserImpl;  try {    saxParserImpl=new SAXParserImpl(this,features);  } catch (  SAXNotSupportedException e) {    throw e;  }catch (  SAXNotRecognizedException e) {    throw e;  }catch (  SAXException se) {    throw new ParserConfigurationException(se.getMessage());  }  return saxParserImpl;}  }
class C{  public GroupsSetCallbackSettingsQuery boardPostEdit(Boolean value){  return unsafeParam("board_post_edit",value);}  }
class C{  public String toString(){  return "VC: Score " + score + " ival "+ ival+ " Pos "+ pos;}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public GroupsGetQueryWithExtended filter(GroupsGetFilter... value){  return unsafeParam("filter",value);}  }
class C{  protected VideoReportCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public static EquipmentCacheObject createTestEquipment(){  EquipmentCacheObject equipmentCacheObject=new EquipmentCacheObject(new Long(100),"Test Equipment","Test desc","Test class name","Test address",new Long(1222),new Long(5000200),10,new Long(1223),new Long(90));  equipmentCacheObject.setStatusDescription("Status description");  equipmentCacheObject.setStatusTime(new Timestamp(System.currentTimeMillis()));  equipmentCacheObject.setSupervisionStatus(SupervisionStatus.DOWN);  return equipmentCacheObject;}  }
class C{  public StatsGetQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public boolean isApplicable(){  return getDoc().getNumberOfReads() > 0;}  }
class C{  public void populate(List<SLDDataInterface> sldDataList){  List<ScaleSLDData> scaleDataList=new ArrayList<ScaleSLDData>();  for (  SLDDataInterface sldData : sldDataList) {    List<ScaleSLDData> scaleSLDDataList=ScalePanelUtils.containsScales(sldData);    if ((scaleSLDDataList != null) && !scaleSLDDataList.isEmpty()) {      scaleDataList.addAll(scaleSLDDataList);    }  }  dataModel.loadData(scaleDataList);}  }
class C{  private static void findSnap(Collection<ConstraintWidget> widgets,ConstraintWidget widget,SnapCandidate candidate,boolean checkHorizontal){  ArrayList<ConstraintAnchor> anchorsSource=widget.getAnchors();  for (  ConstraintWidget w : widgets) {    if (w == widget) {      continue;    }    ArrayList<ConstraintAnchor> anchorsTarget=w.getAnchors();    for (    ConstraintAnchor as : anchorsSource) {      if (checkHorizontal && as.isVerticalAnchor()) {        continue;      } else       if (!checkHorizontal && !as.isVerticalAnchor()) {        continue;      }      for (      ConstraintAnchor at : anchorsTarget) {        snapCheck(as,at,candidate,CONNECTION_SLOPE);      }    }  }}  }
class C{  private void loadLegionInfo(Legion legion){  if (legion == null) {    return;  }  legion.setLegionMembers(DAOManager.getDAO(LegionMemberDAO.class).loadLegionMembers(legion.getLegionId()));  legion.setAnnouncementList(DAOManager.getDAO(LegionDAO.class).loadAnnouncementList(legion.getLegionId()));  legion.setLegionEmblem(DAOManager.getDAO(LegionDAO.class).loadLegionEmblem(legion.getLegionId()));  legion.setLegionWarehouse(DAOManager.getDAO(LegionDAO.class).loadLegionStorage(legion));  if (legionRanking.containsKey(legion.getLegionId())) {    legion.setLegionRank(legionRanking.get(legion.getLegionId()));  }  DAOManager.getDAO(LegionDAO.class).loadLegionHistory(legion);}  }
class C{  public byte[] decryptViaKek(byte[] content){  return cryptoViaKek(content,Cipher.DECRYPT_MODE);}  }
class C{  public DOMInputImpl(String publicId,String systemId,String baseSystemId){  fPublicId=publicId;  fSystemId=systemId;  fBaseSystemId=baseSystemId;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_STIGMA_YOU_CAN_USE_THIS_SKILL_BY_STIGMA_STONE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300401,value0,value1);}  }
class C{  public VisualTable(Visualization vis,String group,Schema schema,Class tupleType){  super(tupleType);  init(vis,group,schema);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public boolean hasAttributesOrFilters(){  return hasAttributes() || hasFilters();}  }
class C{  public static String readFileAsString(File file,String encoding) throws IOException {  ByteBuffer buffer=readFile(file);  if (null == encoding) {    encoding="UTF-8";  }  String converted=new String(buffer.array(),encoding);  return converted;}  }
class C{  public static <E>E just(E v){  return v;}  }
class C{  @VisibleForTesting protected static List<String> extractLogcatFromReader(BufferedReader reader,int maxLines) throws IOException {  return extractLogcatFromReaderInternal(reader,maxLines);}  }
class C{  public LeadsCheckUserQuery country(String value){  return unsafeParam("country",value);}  }
class C{  public int nextIndex(){  try {    return currentIndex() + 1;  } catch (  GenericEntityException e) {    if (!closed) {      try {        this.close();      } catch (      GenericEntityException e1) {        Debug.logError(e1,"Error auto-closing EntityListIterator on error, so info below for more info on original error; close error: " + e1.toString(),module);      }      Debug.logWarning("Warning: auto-closed EntityListIterator because of exception: " + e.toString(),module);    }    throw new GeneralRuntimeException(e.getNonNestedMessage(),e.getNested());  }}  }
class C{  private SysMenu buildMenuFromModule(Module module){  SysMenu sysMenu=new SysMenu();  sysMenu.setId(module.getId());  sysMenu.setCode(module.getCode());  sysMenu.setName(module.getName());  sysMenu.setParent(module.getParent());  sysMenu.setUrl(module.getUrl());  sysMenu.setController(module.getController());  sysMenu.setTemplate(module.getTemplate());  sysMenu.setOrderId(module.getOrderId());  return sysMenu;}  }
class C{  public SingularValueDecomposition(Matrix Arg){  double[][] A=Arg.getArrayCopy();  m=Arg.getRowDimension();  n=Arg.getColumnDimension();  int nu=Math.min(m,n);  s=new double[Math.min(m + 1,n)];  U=new double[m][nu];  V=new double[n][n];  double[] e=new double[n];  double[] work=new double[m];  boolean wantu=true;  boolean wantv=true;  int nct=Math.min(m - 1,n);  int nrt=Math.max(0,Math.min(n - 2,m));  for (int k=0; k < Math.max(nct,nrt); k++) {    if (k < nct) {      s[k]=0;      for (int i=k; i < m; i++) {        s[k]=Maths.hypot(s[k],A[i][k]);      }      if (s[k] != 0.0) {        if (A[k][k] < 0.0) {          s[k]=-s[k];        }        for (int i=k; i < m; i++) {          A[i][k]/=s[k];        }        A[k][k]+=1.0;      }      s[k]=-s[k];    }    for (int j=k + 1; j < n; j++) {      if ((k < nct) & (s[k] != 0.0)) {        double t=0;        for (int i=k; i < m; i++) {          t+=A[i][k] * A[i][j];        }        t=-t / A[k][k];        for (int i=k; i < m; i++) {          A[i][j]+=t * A[i][k];        }      }      e[j]=A[k][j];    }    if (wantu & (k < nct)) {      for (int i=k; i < m; i++) {        U[i][k]=A[i][k];      }    }    if (k < nrt) {      e[k]=0;      for (int i=k + 1; i < n; i++) {        e[k]=Maths.hypot(e[k],e[i]);      }      if (e[k] != 0.0) {        if (e[k + 1] < 0.0) {          e[k]=-e[k];        }        for (int i=k + 1; i < n; i++) {          e[i]/=e[k];        }        e[k + 1]+=1.0;      }      e[k]=-e[k];      if ((k + 1 < m) & (e[k] != 0.0)) {        for (int i=k + 1; i < m; i++) {          work[i]=0.0;        }        for (int j=k + 1; j < n; j++) {          for (int i=k + 1; i < m; i++) {            work[i]+=e[j] * A[i][j];          }        }        for (int j=k + 1; j < n; j++) {          double t=-e[j] / e[k + 1];          for (int i=k + 1; i < m; i++) {            A[i][j]+=t * work[i];          }        }      }      if (wantv) {        for (int i=k + 1; i < n; i++) {          V[i][k]=e[i];        }      }    }  }  int p=Math.min(n,m + 1);  if (nct < n) {    s[nct]=A[nct][nct];  }  if (m < p) {    s[p - 1]=0.0;  }  if (nrt + 1 < p) {    e[nrt]=A[nrt][p - 1];  }  e[p - 1]=0.0;  if (wantu) {    for (int j=nct; j < nu; j++) {      for (int i=0; i < m; i++) {        U[i][j]=0.0;      }      U[j][j]=1.0;    }    for (int k=nct - 1; k >= 0; k--) {      if (s[k] != 0.0) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k; i < m; i++) {            t+=U[i][k] * U[i][j];          }          t=-t / U[k][k];          for (int i=k; i < m; i++) {            U[i][j]+=t * U[i][k];          }        }        for (int i=k; i < m; i++) {          U[i][k]=-U[i][k];        }        U[k][k]=1.0 + U[k][k];        for (int i=0; i < k - 1; i++) {          U[i][k]=0.0;        }      } else {        for (int i=0; i < m; i++) {          U[i][k]=0.0;        }        U[k][k]=1.0;      }    }  }  if (wantv) {    for (int k=n - 1; k >= 0; k--) {      if ((k < nrt) & (e[k] != 0.0)) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k + 1; i < n; i++) {            t+=V[i][k] * V[i][j];          }          t=-t / V[k + 1][k];          for (int i=k + 1; i < n; i++) {            V[i][j]+=t * V[i][k];          }        }      }      for (int i=0; i < n; i++) {        V[i][k]=0.0;      }      V[k][k]=1.0;    }  }  int pp=p - 1;  int iter=0;  double eps=Math.pow(2.0,-52.0);  double tiny=Math.pow(2.0,-966.0);  while (p > 0) {    int k, kase;    for (k=p - 2; k >= -1; k--) {      if (k == -1) {        break;      }      if (Math.abs(e[k]) <= tiny + eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {        e[k]=0.0;        break;      }    }    if (k == p - 2) {      kase=4;    } else {      int ks;      for (ks=p - 1; ks >= k; ks--) {        if (ks == k) {          break;        }        double t=(ks != p ? Math.abs(e[ks]) : 0.) + (ks != k + 1 ? Math.abs(e[ks - 1]) : 0.);        if (Math.abs(s[ks]) <= tiny + eps * t) {          s[ks]=0.0;          break;        }      }      if (ks == k) {        kase=3;      } else       if (ks == p - 1) {        kase=1;      } else {        kase=2;        k=ks;      }    }    k++;switch (kase) {case 1:{        double f=e[p - 2];        e[p - 2]=0.0;        for (int j=p - 2; j >= k; j--) {          double t=Maths.hypot(s[j],f);          double cs=s[j] / t;          double sn=f / t;          s[j]=t;          if (j != k) {            f=-sn * e[j - 1];            e[j - 1]=cs * e[j - 1];          }          if (wantv) {            for (int i=0; i < n; i++) {              t=cs * V[i][j] + sn * V[i][p - 1];              V[i][p - 1]=-sn * V[i][j] + cs * V[i][p - 1];              V[i][j]=t;            }          }        }      }    break;case 2:{    double f=e[k - 1];    e[k - 1]=0.0;    for (int j=k; j < p; j++) {      double t=Maths.hypot(s[j],f);      double cs=s[j] / t;      double sn=f / t;      s[j]=t;      f=-sn * e[j];      e[j]=cs * e[j];      if (wantu) {        for (int i=0; i < m; i++) {          t=cs * U[i][j] + sn * U[i][k - 1];          U[i][k - 1]=-sn * U[i][j] + cs * U[i][k - 1];          U[i][j]=t;        }      }    }  }break;case 3:{double scale=Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]),Math.abs(s[p - 2])),Math.abs(e[p - 2])),Math.abs(s[k])),Math.abs(e[k]));double sp=s[p - 1] / scale;double spm1=s[p - 2] / scale;double epm1=e[p - 2] / scale;double sk=s[k] / scale;double ek=e[k] / scale;double b=((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;double c=(sp * epm1) * (sp * epm1);double shift=0.0;if ((b != 0.0) | (c != 0.0)) {  shift=Math.sqrt(b * b + c);  if (b < 0.0) {    shift=-shift;  }  shift=c / (b + shift);}double f=(sk + sp) * (sk - sp) + shift;double g=sk * ek;for (int j=k; j < p - 1; j++) {  double t=Maths.hypot(f,g);  double cs=f / t;  double sn=g / t;  if (j != k) {    e[j - 1]=t;  }  f=cs * s[j] + sn * e[j];  e[j]=cs * e[j] - sn * s[j];  g=sn * s[j + 1];  s[j + 1]=cs * s[j + 1];  if (wantv) {    for (int i=0; i < n; i++) {      t=cs * V[i][j] + sn * V[i][j + 1];      V[i][j + 1]=-sn * V[i][j] + cs * V[i][j + 1];      V[i][j]=t;    }  }  t=Maths.hypot(f,g);  cs=f / t;  sn=g / t;  s[j]=t;  f=cs * e[j] + sn * s[j + 1];  s[j + 1]=-sn * e[j] + cs * s[j + 1];  g=sn * e[j + 1];  e[j + 1]=cs * e[j + 1];  if (wantu && (j < m - 1)) {    for (int i=0; i < m; i++) {      t=cs * U[i][j] + sn * U[i][j + 1];      U[i][j + 1]=-sn * U[i][j] + cs * U[i][j + 1];      U[i][j]=t;    }  }}e[p - 2]=f;iter=iter + 1;}break;case 4:{if (s[k] <= 0.0) {s[k]=(s[k] < 0.0 ? -s[k] : 0.0);if (wantv) {for (int i=0; i <= pp; i++) {  V[i][k]=-V[i][k];}}}while (k < pp) {if (s[k] >= s[k + 1]) {break;}double t=s[k];s[k]=s[k + 1];s[k + 1]=t;if (wantv && (k < n - 1)) {for (int i=0; i < n; i++) {  t=V[i][k + 1];  V[i][k + 1]=V[i][k];  V[i][k]=t;}}if (wantu && (k < m - 1)) {for (int i=0; i < m; i++) {  t=U[i][k + 1];  U[i][k + 1]=U[i][k];  U[i][k]=t;}}k++;}iter=0;p--;}break;}}}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding)));}  }
class C{  protected void validateRequestDimensions(Set<Dimension> requestDimensions,LogicalTable table) throws BadApiRequestException {  requestDimensions=new HashSet<>(requestDimensions);  requestDimensions.removeAll(table.getDimensions());  if (!requestDimensions.isEmpty()) {    List<String> dimensionNames=requestDimensions.stream().map(null).collect(Collectors.toList());    LOG.debug(DIMENSIONS_NOT_IN_TABLE.logFormat(dimensionNames,table.getName()));    throw new BadApiRequestException(DIMENSIONS_NOT_IN_TABLE.format(dimensionNames,table.getName()));  }}  }
class C{  @ColorInt public int extractPrimaryColorFrom(Context context){  return extractIntAttribute(context,PRIMARY);}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  public static void write(File file,CharSequence data,String encoding,boolean append) throws IOException {  write(file,data,Charsets.toCharset(encoding),append);}  }
class C{  private Evaluator(){}  }
class C{  @Override public void write(byte[] bts) throws IOException {  try {    int len=bts != null ? bts.length : 0;    beforeWrite(len);    out.write(bts);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public void clearMemoryCache(){  checkConfiguration();  configuration.memoryCache.clear();}  }
class C{  private void addAttributesFromOtherModules(Map<TypeElement,ClassToGenerateInfo> modelClassMap){  Set<Entry<TypeElement,ClassToGenerateInfo>> originalEntries=new HashSet<>(modelClassMap.entrySet());  for (  Entry<TypeElement,ClassToGenerateInfo> entry : originalEntries) {    TypeMirror superclassType=entry.getKey().getSuperclass();    while (isEpoxyModel(superclassType)) {      TypeElement superclassElement=(TypeElement)typeUtils.asElement(superclassType);      if (!modelClassMap.keySet().contains(superclassElement)) {        for (        Element element : superclassElement.getEnclosedElements()) {          if (element.getAnnotation(EpoxyAttribute.class) != null) {            try {              processAttribute(element,modelClassMap);            } catch (            EpoxyProcessorException e) {              writeError(e);            }          }        }      }      superclassType=superclassElement.getSuperclass();    }  }}  }
class C{  public static void createQuerySchema(String schemaFile,String querySchemaName,String dataSchemaNameInput,String selectorNameInput,List<String> elementNames,List<String> filterNames,String filter,boolean append,FileSystem fs,boolean hdfs,HashMap<String,String> additionalFields) throws IOException {  logger.info("createQuerySchema: querySchemaName = " + querySchemaName);  String fileName;  File file=null;  OutputStreamWriter osw=null;  if (hdfs) {    Path filePath=new Path(schemaFile);    fs.deleteOnExit(filePath);    fileName=filePath.toString();    osw=new OutputStreamWriter(fs.create(filePath,true));    logger.info("hdfs: filePath = " + fileName);  } else {    file=File.createTempFile(schemaFile,".xml");    file.deleteOnExit();    fileName=file.toString();    logger.info("localFS: file = " + file.toString());  }  if (append) {    String currentSchemas=SystemConfiguration.getProperty("query.schemas","");    if (currentSchemas.equals("") || currentSchemas.equals("none")) {      SystemConfiguration.setProperty("query.schemas",fileName);    } else {      SystemConfiguration.setProperty("query.schemas",SystemConfiguration.getProperty("query.schemas","") + "," + fileName);    }  }  logger.info("query.schemas = " + SystemConfiguration.getProperty("query.schemas"));  try {    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();    DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();    Document doc=dBuilder.newDocument();    Element rootElement=doc.createElement("schema");    doc.appendChild(rootElement);    Element schemaNameElement=doc.createElement("schemaName");    schemaNameElement.appendChild(doc.createTextNode(querySchemaName));    rootElement.appendChild(schemaNameElement);    Element dataSchemaNameElement=doc.createElement("dataSchemaName");    dataSchemaNameElement.appendChild(doc.createTextNode(dataSchemaNameInput));    rootElement.appendChild(dataSchemaNameElement);    Element selectorNameElement=doc.createElement("selectorName");    selectorNameElement.appendChild(doc.createTextNode(selectorNameInput));    rootElement.appendChild(selectorNameElement);    Element elements=doc.createElement("elements");    rootElement.appendChild(elements);    for (    String elementName : elementNames) {      logger.info("elementName = " + elementName);      Element name=doc.createElement("name");      name.appendChild(doc.createTextNode(elementName));      elements.appendChild(name);    }    if (filter != null) {      Element filterElement=doc.createElement("filter");      filterElement.appendChild(doc.createTextNode(filter));      rootElement.appendChild(filterElement);      Element filterNamesElement=doc.createElement("filterNames");      rootElement.appendChild(filterNamesElement);      for (      String filterName : filterNames) {        logger.info("filterName = " + filterName);        Element name=doc.createElement("name");        name.appendChild(doc.createTextNode(filterName));        filterNamesElement.appendChild(name);      }    }    if (additionalFields != null) {      Element additionalElement=doc.createElement("additional");      rootElement.appendChild(additionalElement);      for (      String key : additionalFields.keySet()) {        logger.info("Creating field element with key = " + key + " and value = "+ additionalFields.get(key));        Element fieldElement=doc.createElement("field");        additionalElement.appendChild(fieldElement);        Element keyElement=doc.createElement("key");        keyElement.appendChild(doc.createTextNode(key));        fieldElement.appendChild(keyElement);        Element valueElement=doc.createElement("value");        valueElement.appendChild(doc.createTextNode(additionalFields.get(key)));        fieldElement.appendChild(valueElement);      }    }    TransformerFactory transformerFactory=TransformerFactory.newInstance();    Transformer transformer=transformerFactory.newTransformer();    DOMSource source=new DOMSource(doc);    StreamResult result;    if (hdfs) {      result=new StreamResult(osw);    } else {      result=new StreamResult(file);    }    transformer.transform(source,result);    StreamResult consoleResult=new StreamResult(System.out);    transformer.transform(source,consoleResult);    System.out.println();    if (osw != null) {      osw.close();    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  protected boolean isStressed(String phone){  return phone.endsWith("1");}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  protected boolean isVertical(@NotNull NlComponent component){  String orientation=component.getAttribute(ANDROID_URI,ATTR_ORIENTATION);  return VALUE_VERTICAL.equals(orientation);}  }
class C{  public SiteAdminConfirmationWindow waitToBeDisplayed(){  bobcatWait.withTimeout(Timeouts.BIG).until(ExpectedConditions.visibilityOf(currentScope));  return this;}  }
class C{  public DecodeAnnouncementTask(DatagramPacket datagram){  this.datagram=datagram;}  }
class C{  public MarshalledWrapper(Object obj) throws IOException {  Object service=obj;  if (!AVOID_MARSH_PIVOT && obj instanceof MarshalPivotProvider) {    service=((MarshalPivotProvider)obj).getMarshalPivot();  }  instance=new MarshalledInstance(service);}  }
class C{  public void destroyContent(){  super.destroyOverlayPanelContent();}  }
class C{  public boolean isRunning(){  return running;}  }
class C{  protected boolean sameLanguageAsIncludeParent(){  String parentLanguage=getIncludeParentLanguage();  return parentLanguage != null && parentLanguage.equalsIgnoreCase(fCurrentLanguage);}  }
class C{  public ProperBigFractionFormat(){  this(getDefaultNumberFormat());}  }
class C{  public void register(String key,Remote value) throws RegistryException {  try {    registry.rebind(key,value);  } catch (  Exception e) {    throw new RegistryException("Failed to register with key [" + key + "]",e);  }}  }
class C{  public final ProgressEvent increaseProgress(){  Progress++;  return this;}  }
class C{  public static void show(Context context,CharSequence msg){  show(context,msg,LENGTH_SHORT);}  }
class C{  public void removeIfFirstLastSame(){  if (wktPointList != null) {    if (wktPointList.size() > 1) {      WKTPoint firstPoint=wktPointList.get(0);      WKTPoint lastPoint=wktPointList.get(wktPointList.size() - 1);      if (firstPoint.equals(lastPoint)) {        wktPointList.remove(wktPointList.size() - 1);      }    }  }}  }
class C{  public synchronized void read(BlockId blk){  fileMgr.read(blk,contents);}  }
class C{  static IBlockState applyFacing(IBlockState state,Facing facing){  for (  IProperty prop : (java.util.Set<IProperty>)state.getProperties().keySet()) {    if (prop.getName().equals("facing")) {      if (prop.getValueClass() == EnumFacing.class) {        EnumFacing current=(EnumFacing)state.getValue(prop);        if (!current.getName().equalsIgnoreCase(facing.name())) {          return state.withProperty(prop,EnumFacing.valueOf(facing.name()));        }      } else       if (prop.getValueClass() == EnumOrientation.class) {        EnumOrientation current=(EnumOrientation)state.getValue(prop);        if (!current.getName().equalsIgnoreCase(facing.name())) {          return state.withProperty(prop,EnumOrientation.valueOf(facing.name()));        }      }    }  }  return state;}  }
class C{  @Override public boolean isShowLabel(){  return showLabel;}  }
class C{  private JSONWriter append(String s) throws JSONException {  if (s == null) {    throw new JSONException("Null pointer");  }  if (this.mode == 'o' || this.mode == 'a') {    try {      if (this.comma && this.mode == 'a') {        this.writer.write(',');      }      this.writer.write(s);    } catch (    IOException e) {      throw new JSONException(e);    }    if (this.mode == 'o') {      this.mode='k';    }    this.comma=true;    return this;  }  throw new JSONException("Value out of sequence.");}  }
class C{  public Load(World world){  super(world);}  }
class C{  public static boolean canCreateOgg(){  return AudioSystem.isConversionSupported(getOggAudioFormat(),Voice.AF22050);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  @Override public void printStackTrace(PrintStream ps){  super.printStackTrace(ps);  if (nested != null)   nested.printStackTrace(ps);}  }
class C{  public static Map<String,List<Access>> load(){  Beans<Access> bs=Helper.load(W.create(),0,Integer.MAX_VALUE,Access.class);  List<Access> list=bs.getList();  Map<String,List<Access>> r=new TreeMap<String,List<Access>>();  String group=null;  List<Access> last=null;  for (  Access a : list) {    if (!X.isEmpty(a.name)) {      String name=a.groupName();      if (group == null || !name.equals(group)) {        group=name;        last=new ArrayList<Access>();        r.put(group,last);      }      last.add(a);    }  }  return r;}  }
class C{  public AemList removeItem(int index){  AemListItem item=getItem(index);  return removeItem(item);}  }
class C{  public void putFloat(String key,float value){  checkForNullKey(key);  preferences.edit().putFloat(key,value).apply();}  }
class C{  public void replaceStyledLayer(NamedLayer newNamedLayer){  if (this.sld == null) {    return;  }  StyledLayer[] styledLayerList=this.sld.getStyledLayers();  int indexFound=-1;  int index=0;  for (  StyledLayer styledLayer : styledLayerList) {    if (styledLayer == this.symbolData.getStyledLayer()) {      indexFound=index;      break;    } else {      index++;    }  }  if (indexFound > -1) {    styledLayerList[indexFound]=newNamedLayer;    this.sld.setStyledLayers(styledLayerList);    setStyledLayer(newNamedLayer);  }}  }
class C{  public void addDataElement(String selector,JSONObject jsonData) throws Exception {  List<BigInteger> hitValPartitions=QueryUtils.partitionDataElement(qSchema,jsonData,queryInfo.getEmbedSelector());  int rowIndex=KeyedHash.hash(queryInfo.getHashKey(),queryInfo.getHashBitSize(),selector);  int rowCounter=rowColumnCounters.get(rowIndex);  BigInteger rowQuery=query.getQueryElement(rowIndex);  logger.debug("hitValPartitions.size() = " + hitValPartitions.size() + " rowIndex = "+ rowIndex+ " rowCounter = "+ rowCounter+ " rowQuery = "+ rowQuery.toString()+ " pirWLQuery.getNSquared() = "+ query.getNSquared().toString());  for (int i=0; i < hitValPartitions.size(); ++i) {    if (!columns.containsKey(i + rowCounter)) {      columns.put(i + rowCounter,BigInteger.valueOf(1));    }    BigInteger column=columns.get(i + rowCounter);    logger.debug("Before: columns.get(" + (i + rowCounter) + ") = "+ columns.get(i + rowCounter));    BigInteger exp;    if (query.getQueryInfo().useExpLookupTable() && !query.getQueryInfo().useHDFSExpLookupTable()) {      exp=query.getExp(rowQuery,hitValPartitions.get(i).intValue());    } else {      logger.debug("i = " + i + " hitValPartitions.get(i).intValue() = "+ hitValPartitions.get(i).intValue());      exp=ModPowAbstraction.modPow(rowQuery,hitValPartitions.get(i),query.getNSquared());    }    column=(column.multiply(exp)).mod(query.getNSquared());    columns.put(i + rowCounter,column);    logger.debug("exp = " + exp + " i = "+ i+ " partition = "+ hitValPartitions.get(i)+ " = "+ hitValPartitions.get(i).toString(2)+ " column = "+ column);    logger.debug("After: columns.get(" + (i + rowCounter) + ") = "+ columns.get(i + rowCounter));  }  rowColumnCounters.set(rowIndex,(rowCounter + hitValPartitions.size()));  logger.debug("new rowIndex = " + rowColumnCounters.get(rowIndex));}  }
class C{  static void addSingleUsePayments(HttpServletRequest request,Map<String,Map<String,Object>> selectedPaymentMethods,List<String> singleUsePayments){  if (selectedPaymentMethods != null) {    for (    Map.Entry<String,Map<String,Object>> entry : selectedPaymentMethods.entrySet()) {      Map<String,Object> info=entry.getValue();      if (info != null && Boolean.TRUE.equals(info.get("singleUsePayment"))) {        singleUsePayments.add(entry.getKey());      }    }  }}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigInlineFeature copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigInlineFeature(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  public static List<String> readLines(File file) throws IOException {  return readLines(file,Charset.defaultCharset());}  }
class C{  public DocumentProperties(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  public void createData(){  if (shouldCreateData()) {    createSystemUser();    createDefaultUser();  } else {    logger.debug("Data already present in the database, don't create data");  }}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/task/TaskQueryTest.testProcessDefinition.bpmn20.xml"}) public void testIncludeBinaryVariables() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess",Collections.singletonMap("binaryVariable",(Object)"It is I, le binary".getBytes()));  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  taskService.setVariableLocal(task.getId(),"binaryTaskVariable",(Object)"It is I, le binary".getBytes());  task=taskService.createTaskQuery().taskId(task.getId()).includeProcessVariables().singleResult();  assertNotNull(task);  assertNotNull(task.getProcessVariables());  byte[] bytes=(byte[])task.getProcessVariables().get("binaryVariable");  assertEquals("It is I, le binary",new String(bytes));  task=taskService.createTaskQuery().taskId(task.getId()).includeTaskLocalVariables().singleResult();  assertNotNull(task);  assertNotNull(task.getTaskLocalVariables());  bytes=(byte[])task.getTaskLocalVariables().get("binaryTaskVariable");  assertEquals("It is I, le binary",new String(bytes));}  }
class C{  @Override public void clearDimension(){  Set<DimensionRow> dimensionRows=findAllDimensionRows();  IndexWriterConfig indexWriterConfig=new IndexWriterConfig(LUCENE_ANALYZER).setRAMBufferSizeMB(BUFFER_SIZE);  lock.writeLock().lock();  try {    try (IndexWriter writer=new IndexWriter(luceneDirectory,indexWriterConfig)){      String rowId=dimension.getKey().getName();      dimensionRows.stream().map(null).map(null).map(null).forEach(null);      keyValueStore.remove(DimensionStoreKeyUtils.getColumnKey(dimension.getKey().getName()));      keyValueStore.put(DimensionStoreKeyUtils.getAllValuesKey(),"[]");      keyValueStore.remove(DimensionStoreKeyUtils.getLastUpdatedKey());      writer.deleteAll();      writer.commit();    } catch (    IOException e) {      LOG.error("Failed to wipe Lucene index at directory: {}",luceneDirectory);      throw new RuntimeException(e);    }    reopenIndexSearcher(true);    refreshCardinality();  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public static DynamicSmartStub extractSmartStubFromProxy(Object dynamicProxy){  if (dynamicProxy == null)   throw new IllegalArgumentException("The supplied dynamicProxy can not be null.");  if (dynamicProxy instanceof RemoteStub)   dynamicProxy=((RemoteStub)dynamicProxy).getProxy();  if (ReflectionUtil.isProxyClass(dynamicProxy.getClass())) {    Object proxyObj=ReflectionUtil.getInvocationHandler(dynamicProxy);    if (proxyObj instanceof DynamicSmartStub)     return (DynamicSmartStub)proxyObj;  }  return null;}  }
class C{  public void skip(long n) throws IOException {  seek(getPosition() + n);}  }
class C{  public static String addToCart(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCart cart=getCartObject(request);  ShoppingCartHelper cartHelper=new ShoppingCartHelper(delegator,dispatcher,cart);  String controlDirective=null;  Map<String,Object> result=null;  String productId=null;  String parentProductId=null;  String itemType=null;  String itemDescription=null;  String productCategoryId=null;  String priceStr=null;  BigDecimal price=null;  String quantityStr=null;  BigDecimal quantity=BigDecimal.ZERO;  String reservStartStr=null;  String reservEndStr=null;  Timestamp reservStart=null;  Timestamp reservEnd=null;  String reservLengthStr=null;  BigDecimal reservLength=null;  String reservPersonsStr=null;  BigDecimal reservPersons=null;  String accommodationMapId=null;  String accommodationSpotId=null;  String shipBeforeDateStr=null;  String shipAfterDateStr=null;  Timestamp shipBeforeDate=null;  Timestamp shipAfterDate=null;  String numberOfDay=null;  String catalogId=CatalogWorker.getCurrentCatalogId(request);  Locale locale=UtilHttp.getLocale(request);  Map<String,Object> paramMap=UtilHttp.getCombinedMap(request);  String itemGroupNumber=(String)paramMap.get("itemGroupNumber");  String shoppingListId=(String)paramMap.get("shoppingListId");  String shoppingListItemSeqId=(String)paramMap.get("shoppingListItemSeqId");  if (paramMap.containsKey("ADD_PRODUCT_ID")) {    productId=(String)paramMap.remove("ADD_PRODUCT_ID");  } else   if (paramMap.containsKey("add_product_id")) {    Object object=paramMap.remove("add_product_id");    try {      productId=(String)object;    } catch (    ClassCastException e) {      List<String> productList=UtilGenerics.checkList(object);      productId=productList.get(0);    }  }  if (paramMap.containsKey("PRODUCT_ID")) {    parentProductId=(String)paramMap.remove("PRODUCT_ID");  } else   if (paramMap.containsKey("product_id")) {    parentProductId=(String)paramMap.remove("product_id");  }  Debug.logInfo("adding item product " + productId,module);  Debug.logInfo("adding item parent product " + parentProductId,module);  if (paramMap.containsKey("ADD_CATEGORY_ID")) {    productCategoryId=(String)paramMap.remove("ADD_CATEGORY_ID");  } else   if (paramMap.containsKey("add_category_id")) {    productCategoryId=(String)paramMap.remove("add_category_id");  }  if (productCategoryId != null && productCategoryId.length() == 0) {    productCategoryId=null;  }  if (paramMap.containsKey("ADD_ITEM_TYPE")) {    itemType=(String)paramMap.remove("ADD_ITEM_TYPE");  } else   if (paramMap.containsKey("add_item_type")) {    itemType=(String)paramMap.remove("add_item_type");  }  if (UtilValidate.isEmpty(productId)) {    if (UtilValidate.isEmpty(itemType)) {      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.noProductInfoPassed",locale));      return "success";    }  } else {    try {      String pId=ProductWorker.findProductId(delegator,productId);      if (pId != null) {        productId=pId;      } else {        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(product_resource_error,"productservices.invalid_productId_passed",locale));        return "success";      }    } catch (    Throwable e) {      Debug.logWarning(e,module);    }  }  if (paramMap.containsKey("ADD_ITEM_DESCRIPTION")) {    itemDescription=(String)paramMap.remove("ADD_ITEM_DESCRIPTION");  } else   if (paramMap.containsKey("add_item_description")) {    itemDescription=(String)paramMap.remove("add_item_description");  }  if (itemDescription != null && itemDescription.length() == 0) {    itemDescription=null;  }  ProductConfigWrapper configWrapper=null;  configWrapper=ProductConfigWorker.getProductConfigWrapper(productId,cart.getCurrency(),request);  if (configWrapper != null) {    if (paramMap.containsKey("configId")) {      try {        configWrapper.loadConfig(delegator,(String)paramMap.remove("configId"));      } catch (      Exception e) {        Debug.logWarning(e,"Could not load configuration",module);      }    } else {      ProductConfigWorker.fillProductConfigWrapper(configWrapper,request);    }    if (!configWrapper.isCompleted()) {      request.setAttribute("product_id",productId);      request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.configureProductBeforeAddingToCart",locale));      return "product";    } else {      ProductConfigWorker.storeProductConfigWrapper(configWrapper,delegator);    }  }  if (ProductWorker.isVirtual(delegator,productId)) {    if ("VV_FEATURETREE".equals(ProductWorker.getProductVirtualVariantMethod(delegator,productId))) {      List<String> selectedFeatures=new LinkedList<String>();      Enumeration<String> paramNames=UtilGenerics.cast(request.getParameterNames());      while (paramNames.hasMoreElements()) {        String paramName=paramNames.nextElement();        if (paramName.startsWith("FT")) {          selectedFeatures.add(request.getParameterValues(paramName)[0]);        }      }      if (UtilValidate.isEmpty(selectedFeatures)) {        request.setAttribute("paramMap",paramMap);        request.setAttribute("product_id",productId);        request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.chooseVariationBeforeAddingToCart",locale));        return "product";      }      String variantProductId=ProductWorker.getVariantFromFeatureTree(productId,selectedFeatures,delegator);      if (UtilValidate.isNotEmpty(variantProductId)) {        productId=variantProductId;      } else {        request.setAttribute("paramMap",paramMap);        request.setAttribute("product_id",productId);        request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.incompatibilityVariantFeature",locale));        return "product";      }    } else {      request.setAttribute("paramMap",paramMap);      request.setAttribute("product_id",productId);      request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.chooseVariationBeforeAddingToCart",locale));      return "product";    }  }  if (paramMap.containsKey("PRICE")) {    priceStr=(String)paramMap.remove("PRICE");  } else   if (paramMap.containsKey("price")) {    priceStr=(String)paramMap.remove("price");  }  if (priceStr == null) {    priceStr="0";  }  if ("ASSET_USAGE_OUT_IN".equals(ProductWorker.getProductTypeId(delegator,productId))) {    if (paramMap.containsKey("numberOfDay")) {      numberOfDay=(String)paramMap.remove("numberOfDay");      reservStart=UtilDateTime.addDaysToTimestamp(UtilDateTime.nowTimestamp(),1);      reservEnd=UtilDateTime.addDaysToTimestamp(reservStart,Integer.valueOf(numberOfDay));    }  }  if ("ASSET_USAGE".equals(ProductWorker.getProductTypeId(delegator,productId)) || "ASSET_USAGE_OUT_IN".equals(ProductWorker.getProductTypeId(delegator,productId))) {    if (paramMap.containsKey("reservStart")) {      reservStartStr=(String)paramMap.remove("reservStart");      if (reservStartStr.length() == 10)       reservStartStr+=" 00:00:00.000000000";      if (reservStartStr.length() > 0) {        try {          reservStart=java.sql.Timestamp.valueOf(reservStartStr);        } catch (        Exception e) {          Debug.logWarning(e,"Problems parsing Reservation start string: " + reservStartStr,module);          reservStart=null;          request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.rental.startDate",locale));          return "error";        }      } else       reservStart=null;    }    if (paramMap.containsKey("reservEnd")) {      reservEndStr=(String)paramMap.remove("reservEnd");      if (reservEndStr.length() == 10)       reservEndStr+=" 00:00:00.000000000";      if (reservEndStr.length() > 0) {        try {          reservEnd=java.sql.Timestamp.valueOf(reservEndStr);        } catch (        Exception e) {          Debug.logWarning(e,"Problems parsing Reservation end string: " + reservEndStr,module);          reservEnd=null;          request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.rental.endDate",locale));          return "error";        }      } else       reservEnd=null;    }    if (reservStart != null && reservEnd != null) {      reservLength=new BigDecimal(UtilDateTime.getInterval(reservStart,reservEnd)).divide(new BigDecimal("86400000"),generalRounding);    }    if (reservStart != null && paramMap.containsKey("reservLength")) {      reservLengthStr=(String)paramMap.remove("reservLength");      try {        reservLength=(BigDecimal)ObjectType.simpleTypeConvert(reservLengthStr,"BigDecimal",null,locale);      } catch (      Exception e) {        Debug.logWarning(e,"Problems parsing reservation length string: " + reservLengthStr,module);        reservLength=BigDecimal.ONE;        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderReservationLengthShouldBeAPositiveNumber",locale));        return "error";      }    }    if (reservStart != null && paramMap.containsKey("reservPersons")) {      reservPersonsStr=(String)paramMap.remove("reservPersons");      try {        reservPersons=(BigDecimal)ObjectType.simpleTypeConvert(reservPersonsStr,"BigDecimal",null,locale);      } catch (      Exception e) {        Debug.logWarning(e,"Problems parsing reservation number of persons string: " + reservPersonsStr,module);        reservPersons=BigDecimal.ONE;        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderNumberOfPersonsShouldBeOneOrLarger",locale));        return "error";      }    }    if (UtilValidate.isEmpty(reservStart) && UtilValidate.isEmpty(reservLength) && UtilValidate.isEmpty(reservPersons)) {      request.setAttribute("product_id",productId);      request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.enterBookingInforamtionBeforeAddingToCart",locale));      return "product";    }    if ((paramMap.containsKey("accommodationMapId")) && (paramMap.containsKey("accommodationSpotId"))) {      accommodationMapId=(String)paramMap.remove("accommodationMapId");      accommodationSpotId=(String)paramMap.remove("accommodationSpotId");    }  }  if (paramMap.containsKey("QUANTITY")) {    quantityStr=(String)paramMap.remove("QUANTITY");  } else   if (paramMap.containsKey("quantity")) {    quantityStr=(String)paramMap.remove("quantity");  }  if (UtilValidate.isEmpty(quantityStr)) {    quantityStr="1";  }  try {    price=(BigDecimal)ObjectType.simpleTypeConvert(priceStr,"BigDecimal",null,locale);  } catch (  Exception e) {    Debug.logWarning(e,"Problems parsing price string: " + priceStr,module);    price=null;  }  try {    quantity=(BigDecimal)ObjectType.simpleTypeConvert(quantityStr,"BigDecimal",null,locale);    if (!ProductWorker.isDecimalQuantityOrderAllowed(delegator,productId,cart.getProductStoreId())) {      BigDecimal remainder=quantity.remainder(BigDecimal.ONE);      if (remainder.compareTo(BigDecimal.ZERO) != 0) {        request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.quantityInDecimalNotAllowed",locale));        return "error";      }      quantity=quantity.setScale(0,UtilNumber.getBigDecimalRoundingMode("order.rounding"));    } else {      quantity=quantity.setScale(UtilNumber.getBigDecimalScale("order.decimals"),UtilNumber.getBigDecimalRoundingMode("order.rounding"));    }  } catch (  Exception e) {    Debug.logWarning(e,"Problems parsing quantity string: " + quantityStr,module);    quantity=BigDecimal.ONE;  }  String selectedAmountStr=null;  if (paramMap.containsKey("ADD_AMOUNT")) {    selectedAmountStr=(String)paramMap.remove("ADD_AMOUNT");  } else   if (paramMap.containsKey("add_amount")) {    selectedAmountStr=(String)paramMap.remove("add_amount");  }  BigDecimal amount=null;  if (UtilValidate.isNotEmpty(selectedAmountStr)) {    try {      amount=(BigDecimal)ObjectType.simpleTypeConvert(selectedAmountStr,"BigDecimal",null,locale);    } catch (    Exception e) {      Debug.logWarning(e,"Problem parsing amount string: " + selectedAmountStr,module);      amount=null;    }  } else {    amount=BigDecimal.ZERO;  }  if ((ProductWorker.isAmountRequired(delegator,productId)) && (amount == null || amount.doubleValue() == 0.0)) {    request.setAttribute("product_id",productId);    request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resource_error,"cart.addToCart.enterAmountBeforeAddingToCart",locale));    return "product";  }  shipBeforeDateStr=(String)paramMap.remove("shipBeforeDate");  if (UtilValidate.isNotEmpty(shipBeforeDateStr)) {    if (shipBeforeDateStr.length() == 10)     shipBeforeDateStr+=" 00:00:00.000";    try {      shipBeforeDate=java.sql.Timestamp.valueOf(shipBeforeDateStr);    } catch (    IllegalArgumentException e) {      Debug.logWarning(e,"Bad shipBeforeDate input: " + e.getMessage(),module);      shipBeforeDate=null;    }  }  shipAfterDateStr=(String)paramMap.remove("shipAfterDate");  if (UtilValidate.isNotEmpty(shipAfterDateStr)) {    if (shipAfterDateStr.length() == 10)     shipAfterDateStr+=" 00:00:00.000";    try {      shipAfterDate=java.sql.Timestamp.valueOf(shipAfterDateStr);    } catch (    IllegalArgumentException e) {      Debug.logWarning(e,"Bad shipAfterDate input: " + e.getMessage(),module);      shipAfterDate=null;    }  }  List<String> surveyResponses=null;  if (productId != null) {    String productStoreId=ProductStoreWorker.getProductStoreId(request);    List<GenericValue> productSurvey=ProductStoreWorker.getProductSurveys(delegator,productStoreId,productId,"CART_ADD",parentProductId);    if (UtilValidate.isNotEmpty(productSurvey)) {      GenericValue survey=EntityUtil.getFirst(productSurvey);      String surveyResponseId=(String)request.getAttribute("surveyResponseId");      if (surveyResponseId != null) {        surveyResponses=UtilMisc.toList(surveyResponseId);      } else {        String origParamMapId=UtilHttp.stashParameterMap(request);        Map<String,Object> surveyContext=UtilMisc.<String,Object>toMap("_ORIG_PARAM_MAP_ID_",origParamMapId);        GenericValue userLogin=cart.getUserLogin();        String partyId=null;        if (userLogin != null) {          partyId=userLogin.getString("partyId");        }        String formAction="/additemsurvey";        String nextPage=RequestHandler.getOverrideViewUri(request.getPathInfo());        if (nextPage != null) {          formAction=formAction + "/" + nextPage;        }        ProductStoreSurveyWrapper wrapper=new ProductStoreSurveyWrapper(survey,partyId,surveyContext);        request.setAttribute("surveyWrapper",wrapper);        request.setAttribute("surveyAction",formAction);        return "survey";      }    }  }  if (surveyResponses != null) {    paramMap.put("surveyResponses",surveyResponses);  }  GenericValue productStore=ProductStoreWorker.getProductStore(request);  if (productStore != null) {    String addToCartRemoveIncompat=productStore.getString("addToCartRemoveIncompat");    String addToCartReplaceUpsell=productStore.getString("addToCartReplaceUpsell");    try {      if ("Y".equals(addToCartRemoveIncompat)) {        List<GenericValue> productAssocs=null;        EntityCondition cond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId),EntityOperator.OR,EntityCondition.makeCondition("productIdTo",EntityOperator.EQUALS,productId)),EntityCondition.makeCondition("productAssocTypeId",EntityOperator.EQUALS,"PRODUCT_INCOMPATABLE")),EntityOperator.AND);        productAssocs=EntityQuery.use(delegator).from("ProductAssoc").where(cond).filterByDate().queryList();        List<String> productList=FastList.newInstance();        for (        GenericValue productAssoc : productAssocs) {          if (productId.equals(productAssoc.getString("productId"))) {            productList.add(productAssoc.getString("productIdTo"));            continue;          }          if (productId.equals(productAssoc.getString("productIdTo"))) {            productList.add(productAssoc.getString("productId"));            continue;          }        }        for (        ShoppingCartItem sci : cart) {          if (productList.contains(sci.getProductId())) {            try {              cart.removeCartItem(sci,dispatcher);            } catch (            CartItemModifyException e) {              Debug.logError(e.getMessage(),module);            }          }        }      }      if ("Y".equals(addToCartReplaceUpsell)) {        List<GenericValue> productList=null;        productList=EntityQuery.use(delegator).select("productId").from("ProductAssoc").where("productIdTo",productId,"productAssocTypeId","PRODUCT_UPGRADE").queryList();        if (productList != null) {          for (          ShoppingCartItem sci : cart) {            if (productList.contains(sci.getProductId())) {              try {                cart.removeCartItem(sci,dispatcher);              } catch (              CartItemModifyException e) {                Debug.logError(e.getMessage(),module);              }            }          }        }      }    } catch (    GenericEntityException e) {      Debug.logError(e.getMessage(),module);    }  }  if (ProductWorker.isAlternativePacking(delegator,productId,parentProductId)) {    GenericValue parentProduct=null;    try {      parentProduct=EntityQuery.use(delegator).from("Product").where("productId",parentProductId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,"Error getting parent product",module);    }    BigDecimal piecesIncluded=BigDecimal.ZERO;    if (parentProduct != null) {      piecesIncluded=new BigDecimal(parentProduct.getLong("piecesIncluded"));      quantity=quantity.multiply(piecesIncluded);    }  }  result=cartHelper.addToCart(catalogId,shoppingListId,shoppingListItemSeqId,productId,productCategoryId,itemType,itemDescription,price,amount,quantity,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,shipBeforeDate,shipAfterDate,configWrapper,itemGroupNumber,paramMap,parentProductId);  controlDirective=processResult(result,request);  Integer itemId=(Integer)result.get("itemId");  if (UtilValidate.isNotEmpty(itemId)) {    request.setAttribute("itemId",itemId);  }  try {    GenericValue product=EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne();    if (UtilValidate.isNotEmpty(product) && ProductWorker.shippingApplies(product)) {      for (int shipGroupIndex=0; shipGroupIndex < cart.getShipGroupSize(); shipGroupIndex++) {        String shipContactMechId=cart.getShippingContactMechId(shipGroupIndex);        if (UtilValidate.isNotEmpty(shipContactMechId)) {          cart.setShipmentMethodTypeId(shipGroupIndex,null);        }      }    }  } catch (  GenericEntityException e) {    Debug.logError(e,"Error getting product" + e.getMessage(),module);  }  if (controlDirective.equals(ERROR)) {    return "error";  } else {    if (cart.viewCartOnAdd()) {      return "viewcart";    } else {      return "success";    }  }}  }
class C{  public static UUID levelIndexToId(int levelIndex){  return new UUID(0,levelIndex);}  }
class C{  public static double nextDown(final double a){  return nextAfter(a,Double.NEGATIVE_INFINITY);}  }
class C{  public Future<Long> markEndOfStream(){synchronized (this) {    try {      writeEndOfStreamMarker();    } catch (    IOException e) {      return Future.exception(e);    }    streamEnded=true;  }  return flushAndCommit();}  }
class C{  private void springBack(long time){  if (mScroller.isFinished()) {    int minScroll=(int)getMinScroll(false);    int maxScroll=(int)getMaxScroll(false);    if (mScrollTarget < minScroll || mScrollTarget > maxScroll) {      mScroller.springBack(0,(int)mScrollTarget,0,0,minScroll,maxScroll,time);      setScrollTarget(MathUtils.clamp(mScrollTarget,minScroll,maxScroll),false);      requestUpdate();    }  }}  }
class C{  public static <T extends ExtensionPoint>T newInstance(Class<T> clazz,String pluginId) throws SparklerException {  try {    T instance=clazz.newInstance();    instance.init(JOB_CONTEXT,pluginId);    return instance;  } catch (  InstantiationException|IllegalAccessException e) {    throw new SparklerException("Could not create instance of " + clazz.getName(),e);  }}  }
class C{  public static Long nextLogSegmentSequenceNumber(List<LogSegmentMetadata> segmentListDesc){  int lastAssignedLogSegmentIdx=-1;  Long lastAssignedLogSegmentSeqNo=null;  Long nextLogSegmentSeqNo=null;  for (int i=0; i < segmentListDesc.size(); i++) {    LogSegmentMetadata metadata=segmentListDesc.get(i);    if (LogSegmentMetadata.supportsLogSegmentSequenceNo(metadata.getVersion())) {      lastAssignedLogSegmentSeqNo=metadata.getLogSegmentSequenceNumber();      lastAssignedLogSegmentIdx=i;      break;    }  }  if (null != lastAssignedLogSegmentSeqNo) {    nextLogSegmentSeqNo=lastAssignedLogSegmentSeqNo + lastAssignedLogSegmentIdx + 1;  }  return nextLogSegmentSeqNo;}  }
class C{  public void flip(int x,int y){  int offset=y * rowSize + (x / 32);  bits[offset]^=1 << (x & 0x1f);}  }
class C{  public final ProgressEvent updateProgress(double dNewProgress){  Progress=dNewProgress;  return this;}  }
class C{  @Override protected void processLPC(LpCoeffs coeffs,double[] residual){  if (otherFrame1 == null)   return;  LpCoeffs otherCoeffs=LpcAnalyser.calcLPC(otherFrame1,p);  double[] otherlsf=otherCoeffs.getLSF();  double[] lsf=coeffs.getLSF();  assert lsf.length == otherlsf.length;  if (otherFrame2 != null && relativeWeightOther1 < 1) {    assert 0 <= relativeWeightOther1;    LpCoeffs other2Coeffs=LpcAnalyser.calcLPC(otherFrame2,p);    double[] other2lsf=other2Coeffs.getLSF();    for (int i=0; i < otherlsf.length; i++) {      otherlsf[i]=relativeWeightOther1 * otherlsf[i] + (1 - relativeWeightOther1) * other2lsf[i];    }  }  for (int i=0; i < lsf.length; i++)   lsf[i]=(1 - r) * lsf[i] + r * otherlsf[i];  coeffs.setLSF(lsf);  double gainFactor=Math.sqrt((1 - r) * coeffs.getGain() * coeffs.getGain() + r * otherCoeffs.getGain() * otherCoeffs.getGain()) / coeffs.getGain();  for (int i=0; i < residual.length; i++)   residual[i]*=gainFactor;}  }
class C{  public static void v(String tag,String msg){  if (isDebug) {    Log.v(tag,msg);  }}  }
class C{  public static <T extends Serializable>Task<T> task(Runnable runnable,T result){  return new RunnableTaskAdapter<T>(runnable,result);}  }
class C{  public void onPatchServiceResult(boolean isUpgradePatch){  if (!isRetryEnable) {    TinkerLog.w(TAG,"onPatchServiceResult retry disabled, just return");    return;  }  if (!isUpgradePatch) {    TinkerLog.w(TAG,"onPatchServiceResult is not upgrade patch, just return");    return;  }  if (retryInfoFile.exists()) {    SharePatchFileUtil.safeDeleteFile(retryInfoFile);  }  if (tempPatchFile.exists()) {    SharePatchFileUtil.safeDeleteFile(tempPatchFile);  }}  }
class C{  public Created(ActivationGroupID gid,ActivationID aid,Object proxy){  this.gid=gid;  this.aid=aid;  this.proxy=proxy;}  }
class C{  public void addStrategy(Strategy strategy){switch (strategy) {case OS_DEFAULT:    this.strategies.add(new DesktopProxySearchStrategy());  break;case BROWSER:this.strategies.add(getDefaultBrowserStrategy());break;case FIREFOX:this.strategies.add(new FirefoxProxySearchStrategy());break;case IE:this.strategies.add(new IEProxySearchStrategy());break;case ENV_VAR:this.strategies.add(new EnvProxySearchStrategy());break;case WIN:this.strategies.add(new WinProxySearchStrategy());break;case KDE:this.strategies.add(new KdeProxySearchStrategy());break;case GNOME:this.strategies.add(new GnomeDConfProxySearchStrategy());this.strategies.add(new GnomeProxySearchStrategy());break;case JAVA:this.strategies.add(new JavaProxySearchStrategy());break;default :throw new IllegalArgumentException("Unknown strategy code!");}}  }
class C{  public boolean toggleAlwaysTranslateLanguageState(boolean value){  if (mOptions[NEVER_LANGUAGE] && value) {    return false;  }  return toggleState(ALWAYS_LANGUAGE,value);}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data) throws IOException {  writeByteArrayToFile(file,data,false);}  }
class C{  public QueryAnswers resolve(MatchQuery inputQuery,boolean materialise){  Query query=new ReasonerMatchQuery(inputQuery,graph);  return resolveQuery(query,materialise);}  }
class C{  private String toUrl(String testFile) throws MalformedURLException {  return new File(TestUtil.TEST_DATA_FOLDER + "pac",testFile).toURI().toURL().toString();}  }
class C{  public int removeAllListeners(){  int count=this.listeners.size();  this.listeners.clear();  return count;}  }
class C{  @RequestMapping(value="/race-data/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteRaceData(@PathVariable String id){  log.debug("REST request to delete RaceData : {}",id);  raceDataRepository.delete(UUID.fromString(id));  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("raceData",id.toString())).build();}  }
class C{  private void evaluateParameters(){  myEvaluationState=EvaluationState.EVALUATING;  Collection<Parameter> parameters=getModel().getTemplateHandle().getMetadata().getParameters();  try {    Map<String,Object> additionalValues=Maps.newHashMap();    additionalValues.put(ATTR_PACKAGE_NAME,myPackageName.get());    OptionalProperty<SourceProvider> sourceSet=getModel().getSourceSet();    if (sourceSet.get().isPresent()) {      additionalValues.put(ATTR_SOURCE_PROVIDER_NAME,sourceSet.getValue().getName());    }    Map<String,Object> allValues=Maps.newHashMap(additionalValues);    Map<Parameter,Object> parameterValues=ParameterValueResolver.resolve(parameters,myUserValues,additionalValues,new ParameterDeduplicator());    for (    Parameter parameter : parameters) {      Object value=parameterValues.get(parameter);      if (value == null)       continue;      myParameterRows.get(parameter).setValue(value);      allValues.put(parameter.id,value);    }    for (    Parameter parameter : parameters) {      String enabledStr=Strings.nullToEmpty(parameter.enabled);      if (!enabledStr.isEmpty()) {        boolean enabled=myEvaluator.evaluateBooleanExpression(enabledStr,allValues,true);        myParameterRows.get(parameter).setEnabled(enabled);      }      String visibilityStr=Strings.nullToEmpty(parameter.visibility);      if (!visibilityStr.isEmpty()) {        boolean visible=myEvaluator.evaluateBooleanExpression(visibilityStr,allValues,true);        myParameterRows.get(parameter).setVisible(visible);      }    }    myThumbPath.set(getCurrentThumbnailPath());  } catch (  CircularParameterDependencyException e) {    getLog().error("Circular dependency between parameters in template %1$s",e,getModel().getTemplateHandle().getMetadata().getTitle());  } finally {    myEvaluationState=EvaluationState.NOT_EVALUATING;  }  myInvalidParameterMessage.set(Strings.nullToEmpty(validateAllParameters()));}  }
class C{  private void showContextMenu(MouseEvent event){  if (this.isEnabled()) {    int x=event.getX();    int y=event.getY();    TreePath path=this.tree.getPathForLocation(x,y);    if (path != null) {      DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();      this.tree.setSelectionPath(path);      Object userData=node.getUserObject();      if (userData instanceof World) {        this.popWorld.show(this.tree,x,y);      } else       if (userData instanceof Bounds) {        this.popBounds.show(this.tree,x,y);      } else       if (node == this.bodyFolder) {        this.popBodyFolder.show(this.tree,x,y);      } else       if (node == this.jointFolder) {        this.popJointFolder.show(this.tree,x,y);      } else       if (node == this.rayFolder) {        this.popRayFolder.show(this.tree,x,y);      } else       if (userData instanceof Body) {        this.popBody.show(this.tree,x,y);      } else       if (userData instanceof BodyFixture) {        this.popFixture.show(this.tree,x,y);        Convex convex=((BodyFixture)userData).getShape();        if (convex instanceof Circle) {          ((JMenuItem)this.popFixture.getComponent(0)).setIcon(Icons.EDIT_CIRCLE);          ((JMenuItem)this.popFixture.getComponent(1)).setIcon(Icons.REMOVE_CIRCLE);        } else         if (convex instanceof Rectangle) {          ((JMenuItem)this.popFixture.getComponent(0)).setIcon(Icons.EDIT_RECTANGLE);          ((JMenuItem)this.popFixture.getComponent(1)).setIcon(Icons.REMOVE_RECTANGLE);        } else         if (convex instanceof Polygon) {          ((JMenuItem)this.popFixture.getComponent(0)).setIcon(Icons.EDIT_POLYGON);          ((JMenuItem)this.popFixture.getComponent(1)).setIcon(Icons.REMOVE_POLYGON);        } else         if (convex instanceof Segment) {          ((JMenuItem)this.popFixture.getComponent(0)).setIcon(Icons.EDIT_SEGMENT);          ((JMenuItem)this.popFixture.getComponent(1)).setIcon(Icons.REMOVE_SEGMENT);        }      } else       if (userData instanceof Joint) {        this.popJoint.show(this.tree,x,y);        Joint joint=((Joint)userData);        if (joint instanceof AngleJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_ANGLE_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_ANGLE_JOINT);        } else         if (joint instanceof DistanceJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_DISTANCE_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_DISTANCE_JOINT);        } else         if (joint instanceof FrictionJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_FRICTION_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_FRICTION_JOINT);        } else         if (joint instanceof MotorJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_MOTOR_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_MOTOR_JOINT);        } else         if (joint instanceof PinJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_MOUSE_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_MOUSE_JOINT);        } else         if (joint instanceof PrismaticJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_PRISMATIC_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_PRISMATIC_JOINT);        } else         if (joint instanceof PulleyJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_PULLEY_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_PULLEY_JOINT);        } else         if (joint instanceof RevoluteJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_REVOLUTE_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_REVOLUTE_JOINT);        } else         if (joint instanceof RopeJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_ROPE_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_ROPE_JOINT);        } else         if (joint instanceof WeldJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_WELD_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_WELD_JOINT);        } else         if (joint instanceof WheelJoint) {          ((JMenuItem)this.popJoint.getComponent(0)).setIcon(Icons.EDIT_WHEEL_JOINT);          ((JMenuItem)this.popJoint.getComponent(1)).setIcon(Icons.REMOVE_WHEEL_JOINT);        }      } else       if (userData instanceof Ray) {        this.popRay.show(this.tree,x,y);      }    }  }}  }
class C{  protected static Dfp sinInternal(Dfp a[]){  Dfp c=a[0].add(a[1]);  Dfp y=c;  c=c.multiply(c);  Dfp x=y;  Dfp fact=a[0].getOne();  Dfp py=new Dfp(y);  for (int i=3; i < 90; i+=2) {    x=x.multiply(c);    x=x.negate();    fact=fact.divide((i - 1) * i);    y=y.add(x.multiply(fact));    if (y.equals(py)) {      break;    }    py=new Dfp(y);  }  return y;}  }
class C{  @Override public void writePacketData(PacketBuffer buf) throws IOException {  buf.writeInt(ChannelManager.getID(channel));  channel.write(buf,packet);}  }
class C{  public String loadFile(String sID){  return getDocumentText(sID,true);}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  private static void registerTextBackground(List<ClassLoader> classLoadersList,ConversionData data){  logger.info("Text backgrounds supported:");  Reflections reflections=new Reflections(new ConfigurationBuilder().setScanners(new SubTypesScanner(false),new ResourcesScanner()).setUrls(ClasspathHelper.forClassLoader(classLoadersList.toArray(new ClassLoader[0]))).filterInputsBy(new FilterBuilder().include(FilterBuilder.prefix("com.sldeditor.importdata.esri.textbackground"))));  Set<Class<? extends Object>> allClasses=reflections.getSubTypesOf(Object.class);  for (  Class<? extends Object> claszz : allClasses) {    try {      if (validClass(claszz,EsriTextBackgroundInterface.class)) {        EsriTextBackgroundInterface textBackgroundObj=(EsriTextBackgroundInterface)claszz.newInstance();        logger.info(textBackgroundObj.getBackgroundClass().getName());        data.addTextBackground(textBackgroundObj);      }    } catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }  }}  }
class C{  public void replaceInFile(String oldStr,String newStr) throws IOException {  int next=0;  String line=null;  line=sb.toString();  while ((next=line.indexOf(oldStr,next)) != -1)   line=sb.replace(next,next + oldStr.length(),newStr).toString();}  }
class C{  public static byte[] convertInputStreamToByteArray(InputStream inputStream,int inputStreamLength) throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  int blockSize=DEFAULT_BUFFER_SIZE;  byte[] buffer=new byte[blockSize];  int left=inputStreamLength;  while (left > 0) {    int read=inputStream.read(buffer,0,left > blockSize ? blockSize : left);    if (read == -1)     break;    out.write(buffer,0,read);    left-=read;  }  return out.toByteArray();}  }
class C{  private RxJavaInterop(){  throw new IllegalStateException("No instances!");}  }
class C{  private Literal syntaxError(String msg){  String err="in " + name() + " literal "+ "\""+ getLITERAL()+ "\""+ ": "+ msg;  return new IllegalLiteral(err);}  }
class C{  private Solver(final DecompositionSolver upper,final RealMatrix p){  this.upper=upper;  this.p=p;}  }
class C{  protected void queryDruidDim(List<Dimension> dimension){  SuccessCallback success=buildDruidDimensionsSuccessCallback(dimension.get(0));  for (  DataSource dataSource : dataSources) {    DruidSearchQuery druidSearchQuery=new DruidSearchQuery(dataSource,AllGranularity.INSTANCE,null,INTERVALS,dimension,SEARCH_QUERY_SPEC,null,ROW_LIMIT);    RequestContext requestContext=new RequestContext(null,false);    druidWebService.postDruidQuery(requestContext,success,errorCallback,failureCallback,druidSearchQuery);  }}  }
class C{  protected boolean checkSentence(Element currentRulePart,String sentenceType){  NamedNodeMap attNodes=currentRulePart.getAttributes();  for (int z=0; z < attNodes.getLength(); z++) {    Node el=attNodes.item(z);    String currentAtt=el.getNodeName();    String currentVal=el.getNodeValue();    if (currentAtt.equals("type")) {      if (!currentVal.startsWith("!")) {        if (!sentenceType.equals(currentVal))         return false;      } else {        currentVal=currentVal.substring(1,currentVal.length());        if (sentenceType.equals(currentVal))         return false;      }    }  }  return true;}  }
class C{  public MessagesGetLongPollHistoryQuery pts(Integer value){  return unsafeParam("pts",value);}  }
class C{  @Override public Node interpretToNode(FeatureVector featureVector,int minNumberOfData){  Node currentNode=rootNode;  Node prevNode=null;  while (currentNode.getNumberOfData() > minNumberOfData && !(currentNode instanceof LeafNode)) {    prevNode=currentNode;    currentNode=((DecisionNode)currentNode).getNextNode(featureVector);  }  if (currentNode.getNumberOfData() < minNumberOfData && prevNode != null) {    currentNode=prevNode;  }  assert currentNode.getNumberOfData() >= minNumberOfData || currentNode == rootNode;  return currentNode;}  }
class C{  public void updateSettings() throws RemoteServerException, LoginFailedException {  DownloadSettingsMessageOuterClass.DownloadSettingsMessage msg=DownloadSettingsMessageOuterClass.DownloadSettingsMessage.newBuilder().build();  ServerRequest serverRequest=new ServerRequest(RequestTypeOuterClass.RequestType.DOWNLOAD_SETTINGS,msg);  api.getRequestHandler().sendServerRequests(serverRequest);  DownloadSettingsResponseOuterClass.DownloadSettingsResponse response;  try {    response=DownloadSettingsResponseOuterClass.DownloadSettingsResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException(e);  }  updateSettings(response);}  }
class C{  public Stack(){}  }
class C{  public Map<String,Object> send(Map<String,Object> request) throws HttpClientException {  return send((String)props.get("payment.valuelink.url"),request);}  }
class C{  public static void splashInit(){  splashScreenObj=SplashScreen.getSplashScreen();  if (splashScreenObj != null) {    createTextArea();    splashGraphics=splashScreenObj.createGraphics();    splashGraphics.setFont(font);    splashText(getVersionString());  }}  }
class C{  public void startStyles(){  styleComplete=false;}  }
class C{  @NotNull static String removeCommonPackagePrefix(@NotNull String packagePrefix,@NotNull String packageName){  String relativePackageName=packageName;  if (packageName.equals(packagePrefix)) {    relativePackageName="";  } else   if (packageName.length() > packagePrefix.length() && packageName.startsWith(packagePrefix) && packageName.charAt(packagePrefix.length()) == '.') {    relativePackageName=relativePackageName.substring(packagePrefix.length() + 1);  }  return relativePackageName;}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  private boolean isJarURL(URL url){  String protocol=url.getProtocol();  return "jar".equals(protocol) || "zip".equals(protocol) || "wsjar".equals(protocol)|| "code-source".equals(protocol) && url.getPath().contains("!/");}  }
class C{  public DefaultScrollableDataIterator(SQLQuery sqlQuery,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int from,int size){  super(sqlQuery,sessionFactory,fetchSize,performOrderById,from,size);}  }
class C{  public boolean equals(double other_x,double other_y){  if (this.x == other_x && this.y == other_y) {    return true;  }  return false;}  }
class C{  @Override public void separator(short separator,Augmentations augs) throws XNIException {  if (!fMixed) {    if (fOpStack[fDepth] != XMLContentSpec.CONTENTSPECNODE_SEQ && separator == XMLDTDContentModelHandler.SEPARATOR_CHOICE) {      if (fPrevNodeIndexStack[fDepth] != -1) {        fNodeIndexStack[fDepth]=addContentSpecNode(fOpStack[fDepth],fPrevNodeIndexStack[fDepth],fNodeIndexStack[fDepth]);      }      fPrevNodeIndexStack[fDepth]=fNodeIndexStack[fDepth];      fOpStack[fDepth]=XMLContentSpec.CONTENTSPECNODE_CHOICE;    } else     if (fOpStack[fDepth] != XMLContentSpec.CONTENTSPECNODE_CHOICE && separator == XMLDTDContentModelHandler.SEPARATOR_SEQUENCE) {      if (fPrevNodeIndexStack[fDepth] != -1) {        fNodeIndexStack[fDepth]=addContentSpecNode(fOpStack[fDepth],fPrevNodeIndexStack[fDepth],fNodeIndexStack[fDepth]);      }      fPrevNodeIndexStack[fDepth]=fNodeIndexStack[fDepth];      fOpStack[fDepth]=XMLContentSpec.CONTENTSPECNODE_SEQ;    }  }}  }
class C{  public ChannelEntry newConnection(ReadSelectorThread readHandler,SelectionKey key){  SocketChannel channel=(SocketChannel)key.channel();  WriteSelectorThread writeHandler=_selectorManager.getWriteHandler(key.channel());  Socket socket=channel.socket();  InetSocketAddress socketAddress=(InetSocketAddress)(socket == null ? null : socket.getRemoteSocketAddress());  ChannelEntry channelEntry=new ChannelEntry(writeHandler,readHandler,key,socketAddress,this);  m_Channels.put(channel,channelEntry);  if (socketAddress != null) {    _clientToChannel.put(socketAddress,channelEntry);  }  if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,"Connected new client from [" + channelEntry.getClientEndPointAddress() + "] endpoint.");  return channelEntry;}  }
class C{  public Builder fillRule(String fillRule){  this.fillRule=fillRule;  return this;}  }
class C{  @Override public void onReset(){  if (this.status == AccelListener.RUNNING) {    this.stop();  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public DimensionRow(@NotNull DimensionField key,Map<DimensionField,String> fieldValueMap){  super(fieldValueMap);  this.keyvalue=fieldValueMap.get(key);  if (keyvalue == null) {    throw new IllegalArgumentException("Missing key " + key);  }}  }
class C{  public PhotosMoveQuery move(UserActor actor,int targetAlbumId,int photoId){  return new PhotosMoveQuery(getClient(),actor,targetAlbumId,photoId);}  }
class C{  public AccountSaveProfileInfoQuery saveProfileInfo(UserActor actor){  return new AccountSaveProfileInfoQuery(getClient(),actor);}  }
class C{  public Dimension addPadding(){  Dimension boxSize=null;  if (box != null) {    boxSize=box.getPreferredSize();    int paddingSpace=PANEL_HEIGHT - (int)boxSize.getHeight();    if (paddingSpace > 0) {      padding=Box.createVerticalStrut(paddingSpace);      box.add(padding);    } else {      padding=null;      boxSize=new Dimension((int)box.getPreferredSize().getWidth(),PANEL_HEIGHT);    }  }  return boxSize;}  }
class C{  public CommandTagUpdate(){}  }
class C{  public void childrenStartGroup() throws XNIException {}  }
class C{  public static String formatElementListString(Iterable<String> values,String oneElementMessage,String twoOrThreeElementsMessage,String moreThenThreeElementsMessage){  int size=Iterables.size(values);  if (size <= 1) {    return String.format(oneElementMessage,Iterables.getFirst(values,"<validation error>"));  } else   if (size <= 3) {    return String.format(twoOrThreeElementsMessage,atMostTwo(values,size),Iterables.getLast(values));  } else {    return String.format(moreThenThreeElementsMessage,atMostTwo(values,size),size - 2);  }}  }
class C{  public boolean isApplicable(){  return true;}  }
