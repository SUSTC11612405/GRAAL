class C{  protected double unwrapValue(Object value){  return ((Double)value).doubleValue();}  }
class C{  @SuppressWarnings("unchecked") protected void init(Hashtable<?,?> environment) throws NamingException {  myProps=(Hashtable<Object,Object>)ResourceManager.getInitialEnvironment(environment);  if (myProps.get(Context.INITIAL_CONTEXT_FACTORY) != null) {    getDefaultInitCtx();  }}  }
class C{  public static PrivateKey createNew(){  return createNew(true);}  }
class C{  private boolean isValidAuthorityIPV6Host(String authority){  Matcher matcher=ipv6Authority.matcher(authority);  return matcher.matches();}  }
class C{  public static char[] copy(final char[] array,final int offset,final int length){  ensureOffsetLength(array,offset,length);  final char[] a=length == 0 ? EMPTY_ARRAY : new char[length];  System.arraycopy(array,offset,a,0,length);  return a;}  }
class C{  public synchronized void listNotAccessed(PrintWriter p){  Vector vec=new Vector();  Hashtable all=new Hashtable();  _list(null,false,null,all);  Enumeration e=accessed.keys();  while (e.hasMoreElements())   all.remove(e.nextElement());  e=all.keys();  while (e.hasMoreElements())   vec.addElement(e.nextElement());  Object[] array=new Object[vec.size()];  vec.copyInto(array);  java.util.Collections.sort(vec);  for (int x=0; x < array.length; x++) {    String s=(String)(array[x]);    String v=null;    if (s != null) {      v=(String)(_get(s));      uncheck();    }    if (v == null)     v=UNKNOWN_VALUE;    p.println(s + " = " + v);  }  p.flush();}  }
class C{  public void registerSensorsForNode(SerialNode node){  java.util.Iterator<String> iter=getSystemNameList().iterator();  SerialNode tNode=null;  while (iter.hasNext()) {    String sName=iter.next();    if (sName == null) {      log.error("System name null during register Sensor");    } else {      log.debug("system name is " + sName);      if ((sName.charAt(0) == 'O') && (sName.charAt(1) == 'S')) {        tNode=SerialAddress.getNodeFromSystemName(sName);        if (tNode == node) {          node.registerSensor(getBySystemName(sName),(SerialAddress.getBitFromSystemName(sName) - 1));        }      }    }  }}  }
class C{  public boolean dump_solution(){  return soot.PhaseOptions.getBoolean(options,"dump-solution");}  }
class C{  private void computeVisibilityMapFromDefault(IndicatorViewState oldState){  visibilityMap=new HashMap<String,Boolean>();  for (  String key : defaultVisibilityMap.keySet()) {    visibilityMap.put(key,defaultVisibilityMap.get(key));    if (oldState != null) {      Boolean oldDefaultVisibility=oldState.defaultVisibilityMap.get(key);      Boolean oldVisibility=oldState.visibilityMap.get(key);      if (oldDefaultVisibility != null && oldVisibility != null && !oldVisibility.equals(oldDefaultVisibility)) {        visibilityMap.put(key,oldVisibility);      }    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (m == 0)   m=apacheData.getRowDimension();  if (n == 0)   n=apacheData.getColumnDimension();}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public String dump(){  String[] names=getSourceNames();  double[][] values=getValues();  StringBuilder buffer=new StringBuilder();  buffer.append(format("timestamp",12));  for (  String name : names) {    buffer.append(format(name,20));  }  buffer.append("\n");  for (int i=0; i < timestamps.length; i++) {    buffer.append(format(Long.toString(timestamps[i]),12));    for (int j=0; j < names.length; j++) {      buffer.append(format(Util.formatDouble(values[j][i]),20));    }    buffer.append("\n");  }  return buffer.toString();}  }
class C{  public Label(){}  }
class C{  public void box(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    newInstance(boxed);    if (type.getSize() == 2) {      dupX2();      dupX2();      pop();    } else {      dupX1();      swap();    }    invokeConstructor(boxed,new Method("<init>",Type.VOID_TYPE,new Type[]{type}));  }}  }
class C{  public CCombinedCenterPanel(final ZyGraph graph,final CDebugPerspectiveModel debugPerspective){  super(new BorderLayout());  Preconditions.checkNotNull(graph,"IE01223: Graph argument can not be null");  Preconditions.checkNotNull(debugPerspective,"IE01224: Debug perspective argument can not be null");  add(graph.getViewAsComponent());  m_graphSynchronizer=new CGraphSynchronizer(graph,debugPerspective);}  }
class C{  protected void initialize(){}  }
class C{  @Override public void write(TextWriterStream out,String label,T[] v){  StringBuilder buf=new StringBuilder();  if (label != null) {    buf.append(label).append('=');  }  if (v != null) {    for (    T o : v) {      buf.append(o.toString());    }  }  out.inlinePrintNoQuotes(buf.toString());}  }
class C{  private CGraphPrinter(){}  }
class C{  @Override public String toString(){  return "nextPass after " + new Date(nextTrueTimeMillis);}  }
class C{  public final AssertSubscriber<T> assertNotTerminated(){  if (cdl.getCount() == 0) {    throw new AssertionError("Terminated",null);  }  return this;}  }
class C{  private float featuresProbabilityProduct(Collection<T> features,K category){  float product=1.0f;  for (  T feature : features)   product*=this.featureWeighedAverage(feature,category);  return product;}  }
class C{  protected String stem(String term){  term=term.toLowerCase(locale);  if (!isStemmable(term))   return term;  sb.delete(0,sb.length());  sb.insert(0,term);  substitute(sb);  strip(sb);  optimize(sb);  resubstitute(sb);  removeParticleDenotion(sb);  return sb.toString();}  }
class C{  public void header(){  out.println("/* $Id$ */");  out.println("/***************************************************************************");  out.println(" *                   (C) Copyright 2003-2013 - Stendhal                    *");  out.println(" ***************************************************************************");  out.println(" ***************************************************************************");  out.println(" *                                                                         *");  out.println(" *   This program is free software; you can redistribute it and/or modify  *");  out.println(" *   it under the terms of the GNU General Public License as published by  *");  out.println(" *   the Free Software Foundation; either version 2 of the License, or     *");  out.println(" *   (at your option) any later version.                                   *");  out.println(" *                                                                         *");  out.println(" ***************************************************************************/");  out.println("");  out.println("package games.stendhal.server.maps.quests;");  out.println();  out.println("import static org.junit.Assert.assertEquals;");  out.println("import games.stendhal.server.core.engine.SingletonRepository;");  out.println("import games.stendhal.server.core.engine.StendhalRPZone;");  out.println("import games.stendhal.server.entity.npc.SpeakerNPC;");  out.println("import games.stendhal.server.entity.npc.fsm.Engine;");  out.println("import games.stendhal.server.entity.player.Player;");  out.println();  out.println("import org.junit.Before;");  out.println("import org.junit.BeforeClass;");  out.println("import org.junit.Test;");  out.println();  out.println("import utilities.PlayerTestHelper;");  out.println("import utilities.QuestHelper;");  out.println("import utilities.ZonePlayerAndNPCTestImpl;");  out.println("import static utilities.SpeakerNPCTestHelper.getReply;");  out.println();  out.println("public class TODO_Test extends ZonePlayerAndNPCTestImpl {");  out.println();  out.println("\tprivate Player player = null;");  out.println("\tprivate SpeakerNPC npc = null;");  out.println("\tprivate Engine en = null;");  out.println();  out.println("\tprivate String questSlot;");  out.println("\tprivate static final String ZONE_NAME = \"admin_test\";");  out.println();  out.println("\t@BeforeClass");  out.println("\tpublic static void setUpBeforeClass() throws Exception {");  out.println("\t\tQuestHelper.setUpBeforeClass();");  out.println("\t\tsetupZone(ZONE_NAME);");  out.println("\t}");  out.println();  out.println("\tpublic TODO_Test() {");  out.println("\t\tsuper(ZONE_NAME, TODO_NPC_Name);");  out.println("\t}");  out.println();  out.println("\t@Before");  out.println("\tpublic void setUp() {");  out.println("\t\tfinal StendhalRPZone zone = new StendhalRPZone(ZONE_NAME);");  out.println("\t\tnew TODO_NPC().configureZone(zone, null);");  out.println();  out.println("\t\tAbstractQuest quest = new TODO_Quest();");  out.println("\t\tquest.addToWorld();");  out.println();  out.println("\t\tquestSlot = quest.getSlotName();");  out.println();  out.println("\t\tplayer = PlayerTestHelper.createPlayer(\"bob\");");  out.println("\t}");  out.println();  out.println("\t@Test");  out.println("\tpublic void testQuest() {");  out.println("\t\tnpc = SingletonRepository.getNPCList().get(TODO_NPC_Name);");  out.println("\t\ten = npc.getEngine();");  out.println();}  }
class C{  private final static String[] readQDStrings(String string,int[] pos) throws NamingException {  return readQDescrs(string,pos);}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  private void nodeY(Node r){  Edge e;  double h=r.getTop() + m_yRatio;  for (int noa=0; (e=r.getChild(noa)) != null; noa++) {    if (e.getTarget().getParent(0) == e) {      e.getTarget().setTop(h);      if (!e.getTarget().getVisible()) {      }    }  }}  }
class C{  protected void processStyle12ExamineAndSetupAdjustment(Game game,Style12Message message,GameService service,String entireMessage){  if (LOG.isDebugEnabled()) {    LOG.debug("Processing bsetup/examine/obs examine position move.");  }  if (game.isInState(Game.OBSERVING_EXAMINED_STATE) && message.relation == Style12Message.EXAMINING_GAME_RELATION) {    if (LOG.isDebugEnabled()) {      LOG.debug("Handling observer became examiner transition.");    }    examineGamesWaitingOnMoves.put(game.getId(),message);    connector.sendMessage("moves " + message.gameId,true,ChatType.MOVES);  } else   if (entireMessage.contains("- entering examine mode.") || entireMessage.contains(". Entering examine mode.")) {    if (LOG.isDebugEnabled()) {      LOG.debug("Handling bsetup to examine mode transition.");    }    Game examineGame=IcsUtils.createGame(message,entireMessage);    if (message.relation == Style12Message.EXAMINING_GAME_RELATION && !examineGame.isInState(Game.SETUP_STATE)) {      examineGamesWaitingOnMoves.put(game.getId(),message);      connector.sendMessage("moves " + message.gameId,true,ChatType.MOVES);    }  } else   if (game.isInState(Game.EXAMINING_STATE) && (entireMessage.contains("Entering setup mode.\n") || entireMessage.contains("enters setup mode."))) {    if (LOG.isDebugEnabled()) {      LOG.debug("Handling examined game became setup game transition.");    }    processExaminedGameBecameSetup();  } else   if (entireMessage.contains("entering examine mode.\n") || entireMessage.contains("Entering examine mode.\n")) {    examineGamesWaitingOnMoves.put(game.getId(),message);    connector.sendMessage("moves " + message.gameId,true,ChatType.MOVES);  } else {    IcsUtils.resetGame(game,message);    service.fireGameStateChanged(message.gameId,false);    connector.sendMessage("moves " + message.gameId,true,ChatType.MOVES);  }}  }
class C{  private void dialogChanged(){  String fileName=getFilename();  String set=getSetname();  if ((null == fileName) || (fileName.length() < 1)) {    updateStatus("File name must be specified");    return;  }  if ((null == set) || (set.length() < 1)) {    updateStatus("Set name must be specified");    return;  }  updateStatus(null);}  }
class C{  public boolean equals(GSSNameSpi other) throws GSSException {  if (other == this)   return true;  if (other instanceof Krb5NameElement) {    Krb5NameElement that=(Krb5NameElement)other;    return (this.krb5PrincipalName.getName().equals(that.krb5PrincipalName.getName()));  }  return false;}  }
class C{  public HolderDouble(double value){  this.value=value;}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  @Override public StringBuffer format(Date date,StringBuffer toAppendTo,FieldPosition pos){  pos.beginIndex=pos.endIndex=0;  return format(date,toAppendTo,pos.getFieldDelegate());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:49.769 -0500",hash_original_method="E02036AA0C500209CBC33A804345F86B",hash_generated_method="6527F0BA57A980BF6CB039A1D9CEA605") private boolean isClosed(){  return str.getTaintBoolean();}  }
class C{  @RequestMapping(value="/annuals/count",method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<List<MemberByYearDTO>> count() throws URISyntaxException {  List<MemberByYearDTO> count=annualRepository.countByYearAndMembership();  return new ResponseEntity<>(count,HttpStatus.OK);}  }
class C{  public static boolean isMultigraphNetwork(final Network network){  HashSet hashSet=new HashSet();  for (int i=0; i < network.allNodes.numObjs; i++) {    hashSet.clear();    Bag edgesOut=network.getEdgesOut(network.allNodes.objs[i]);    for (int j=0; j < edgesOut.numObjs; j++) {      final Object toNode=((Edge)(edgesOut.objs[j])).getOtherNode(network.allNodes.objs[i]);      if (hashSet.contains(toNode))       return true;      hashSet.add(toNode);    }  }  return false;}  }
class C{  public static final String encode(byte[] binaryData){  return XMLUtils.ignoreLineBreaks() ? encode(binaryData,Integer.MAX_VALUE) : encode(binaryData,BASE64DEFAULTLENGTH);}  }
class C{  public Object put(Object key,Object value){  key=convertKey(key);  int hashCode=hash(key);  int index=hashIndex(hashCode,data.length);  HashEntry entry=data[index];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(key,entry.key)) {      Object oldValue=entry.getValue();      updateEntry(entry,value);      return oldValue;    }    entry=entry.next;  }  addMapping(index,hashCode,key,value);  return null;}  }
class C{  public BlackVolatilityTermStructure(final Date referenceDate,final Calendar cal,final BusinessDayConvention bdc,final DayCounter dc){  super(referenceDate,cal,bdc,dc);}  }
class C{  public FrenchMinimalStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private static void increment(Map<ResultPoint,Integer> table,ResultPoint key){  Integer value=table.get(key);  table.put(key,value == null ? 1 : value + 1);}  }
class C{  void addToCache(T object){  if (cacheValid == true) {    if (cachedObjects.size() < maxCacheSize) {      URI uri=object.getId();      cachedObjects.put(uri,object);    } else {      cacheValid=false;      cachedObjects.clear();    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int dataSize;  int count;  int modeCount;  double mode;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          data.clear();          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);            }          }          Collections.sort(data);          dataSize=data.size();          z=data.get(0);          mode=z;          modeCount=1;          count=1;          for (a=1; a < dataSize; a++) {            if (data.get(a) == z) {              count++;            } else {              if (count > modeCount) {                mode=z;                modeCount=count;              }              count=1;              z=data.get(a);            }          }          if (count > modeCount) {            mode=z;          }          outputFile.setValue(row,col,mode);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static public String checkExtension(String filename){  if (filename.toLowerCase().endsWith(".gz")) {    filename=filename.substring(0,filename.length() - 3);  }  int dotIndex=filename.lastIndexOf('.');  if (dotIndex != -1) {    return filename.substring(dotIndex + 1).toLowerCase();  }  return null;}  }
class C{  public static String unescapeJavaScript(String str){  return unescapeJava(str);}  }
class C{  public static boolean isCompatible(Class expect,Class type){  if (expect.isArray()) {    expect=expect.getComponentType();  }  return expect.isAssignableFrom(type);}  }
class C{  public ParseResult filter(Content content,ParseResult parseResult,HTMLMetaTags metaTags,DocumentFragment doc){  Parse parse=parseResult.get(content.getUrl());  URL base;  try {    base=new URL(content.getBaseUrl());  } catch (  MalformedURLException e) {    Parse emptyParse=new ParseStatus(e).getEmptyParse(getConf());    parseResult.put(content.getUrl(),new ParseText(emptyParse.getText()),emptyParse.getData());    return parseResult;  }  try {    Walker.walk(doc,base,parse.getData().getParseMeta(),getConf());  } catch (  ParseException e) {    Parse emptyParse=new ParseStatus(e).getEmptyParse(getConf());    parseResult.put(content.getUrl(),new ParseText(emptyParse.getText()),emptyParse.getData());    return parseResult;  }  return parseResult;}  }
class C{  private static boolean startsWith(final CharSequence str,final CharSequence prefix,final boolean ignoreCase){  if (str == null || prefix == null) {    return str == null && prefix == null;  }  if (prefix.length() > str.length()) {    return false;  }  return CharSequenceUtils.regionMatches(str,ignoreCase,0,prefix,0,prefix.length());}  }
class C{  public <T extends Serializable>List<T> dequeueFromBuffer(String topic,Class<T> type,int timeout,int limit){  List<T> result=new ArrayList<T>();  long cutoff=System.currentTimeMillis() + timeout;  BlockingQueue<String> queue=_topics.get(topic).getMessages();  while (System.currentTimeMillis() < cutoff && (limit < 0 || result.size() < limit)) {    if (Thread.currentThread().isInterrupted()) {      break;    }    try {      String message=queue.poll(timeout,TimeUnit.MILLISECONDS);      if (message != null && !message.isEmpty()) {        if (String.class.isAssignableFrom(type)) {          result.add(type.cast(message));        } else {          result.add(_mapper.readValue(message,type));        }        if (result.size() % 1000 == 0) {          _logger.debug("Dequeued {} messages from local buffer.",result.size());        }      }    } catch (    InterruptedException e) {      _logger.warn("Interrupted while waiting for poll() to return a message.");      Thread.currentThread().interrupt();    }catch (    IOException e) {      _logger.warn("Exception while deserializing message to type: " + type + ". Skipping this message.",e);    }  }  return result;}  }
class C{  public void beginAdding(GL10 gl){  checkState(STATE_INITIALIZED,STATE_ADDING);  mLabels.clear();  mU=0;  mV=0;  mLineHeight=0;  Bitmap.Config config=mFullColor ? Bitmap.Config.ARGB_4444 : Bitmap.Config.ALPHA_8;  mBitmap=Bitmap.createBitmap(mStrikeWidth,mStrikeHeight,config);  mCanvas=new Canvas(mBitmap);  mBitmap.eraseColor(0);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.insertData(-5,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public SpinnerTest(){  initialize();}  }
class C{  protected Long encodeRangeShift(final Long val,final Long minValue){  if (minValue == null) {    return val;  }  if (val < minValue) {    throw new RuntimeException("Illegal range shift -- datatype violation.");  }  return Long.MIN_VALUE + (val - minValue);}  }
class C{  private CUndoFunctions(){}  }
class C{  public EventLogControl addControl(String name){  return addControl(name,true,false);}  }
class C{  public boolean hasMarketValue(){  return hasExtension(MarketValue.class);}  }
class C{  public void init(){  file=new JMenu("Browser");  file.setMnemonic('B');  debug=new JMenu("Debug");  debug.setMnemonic('U');  demos=new JMenu("Demos");  demos.setMnemonic('D');  view=new JMenu("View");  view.setMnemonic('V');  help=new JMenu("Help");  help.setMnemonic('H');  view_source=new JMenuItem("Page Source");  view_source.setEnabled(false);  view.add(root.actions.stop);  view.add(root.actions.refresh);  view.add(root.actions.reload);  view.add(new JSeparator());  JMenu text_size=new JMenu("Text Size");  text_size.setMnemonic('T');  text_size.add(root.actions.increase_font);  text_size.add(root.actions.decrease_font);  text_size.add(new JSeparator());  text_size.add(root.actions.reset_font);  view.add(text_size);  go=new JMenu("Go");  go.setMnemonic('G');}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public TouchHandlerOld(GraphicalView view,AbstractChart chart){  graphicalView=view;  zoomR=graphicalView.getZoomRectangle();  if (chart instanceof XYChart) {    mRenderer=((XYChart)chart).getRenderer();  } else {    mRenderer=((RoundChart)chart).getRenderer();  }  if (mRenderer.isPanEnabled()) {    mPan=new Pan(chart);  }}  }
class C{  protected FocusListener createFocusListener(){  return getHandler();}  }
class C{  @CanIgnoreReturnValue public static long copy(ReadableByteChannel from,WritableByteChannel to) throws IOException {  checkNotNull(from);  checkNotNull(to);  if (from instanceof FileChannel) {    FileChannel sourceChannel=(FileChannel)from;    long oldPosition=sourceChannel.position();    long position=oldPosition;    long copied;    do {      copied=sourceChannel.transferTo(position,ZERO_COPY_CHUNK_SIZE,to);      position+=copied;      sourceChannel.position(position);    } while (copied > 0 || position < sourceChannel.size());    return position - oldPosition;  }  ByteBuffer buf=ByteBuffer.wrap(createBuffer());  long total=0;  while (from.read(buf) != -1) {    buf.flip();    while (buf.hasRemaining()) {      total+=to.write(buf);    }    buf.clear();  }  return total;}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  for (  Item item : this)   s.append(item + " ");  return s.toString();}  }
class C{  public static DataDisplayTable listSubglyphFrequency(Font font){  Map<Integer,Integer> subglyphFreq=new HashMap<Integer,Integer>();  String[] header={"Glyph ID","Frequency"};  Align[] displayAlignment={Align.Right,Align.Right};  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));  table.setAlignment(Arrays.asList(displayAlignment));  LocaTable locaTable=FontUtils.getLocaTable(font);  GlyphTable glyfTable=FontUtils.getGlyphTable(font);  for (int i=0; i < locaTable.numGlyphs(); i++) {    Glyph glyph=glyfTable.glyph(locaTable.glyphOffset(i),locaTable.glyphLength(i));    if (glyph.glyphType() == GlyphType.Composite) {      CompositeGlyph cGlyph=(CompositeGlyph)glyph;      for (int j=0; j < cGlyph.numGlyphs(); j++) {        int subglyphId=cGlyph.glyphIndex(j);        int frequency=1;        if (subglyphFreq.containsKey(subglyphId)) {          frequency+=subglyphFreq.get(subglyphId);        }        subglyphFreq.put(subglyphId,frequency);      }    }  }  int numSubglyphs=0;  Set<Integer> sortedKeySet=new TreeSet<Integer>(subglyphFreq.keySet());  for (  Integer key : sortedKeySet) {    String[] data={key.toString(),subglyphFreq.get(key).toString()};    table.add(Arrays.asList(data));  }  return table;}  }
class C{  public String toString(){  StringBuilder strb=new StringBuilder();  boolean _moduleNameSet=this.moduleNameSet();  if (_moduleNameSet) {    String _moduleName=this.getModuleName();    strb.append(_moduleName);  }  boolean _typeNameSet=this.typeNameSet();  if (_typeNameSet) {    int _length=strb.length();    boolean _greaterThan=(_length > 0);    if (_greaterThan) {      strb.append(".");    }    String _typeName=this.getTypeName();    strb.append(_typeName);  }  return strb.toString();}  }
class C{  public BusinessObjectDefinitionEntity createBusinessObjectDefinitionEntity(NamespaceEntity namespaceEntity,String businessObjectDefinitionName,DataProviderEntity dataProviderEntity,String businessObjectDefinitionDescription,List<Attribute> attributes){  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=new BusinessObjectDefinitionEntity();  businessObjectDefinitionEntity.setNamespace(namespaceEntity);  businessObjectDefinitionEntity.setDataProvider(dataProviderEntity);  businessObjectDefinitionEntity.setName(businessObjectDefinitionName);  businessObjectDefinitionEntity.setDescription(businessObjectDefinitionDescription);  if (!CollectionUtils.isEmpty(attributes)) {    List<BusinessObjectDefinitionAttributeEntity> attributeEntities=new ArrayList<>();    businessObjectDefinitionEntity.setAttributes(attributeEntities);    for (    Attribute attribute : attributes) {      BusinessObjectDefinitionAttributeEntity attributeEntity=new BusinessObjectDefinitionAttributeEntity();      attributeEntities.add(attributeEntity);      attributeEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);      attributeEntity.setName(attribute.getName());      attributeEntity.setValue(attribute.getValue());    }  }  return businessObjectDefinitionDao.saveAndRefresh(businessObjectDefinitionEntity);}  }
class C{  public void printShortString(PrintWriter pw){  pw.print('[');  pw.print(left);  pw.print(',');  pw.print(top);  pw.print("][");  pw.print(right);  pw.print(',');  pw.print(bottom);  pw.print(']');}  }
class C{  void parseHeaderItem() throws IOException {  mHeaderItem=new HeaderItem();  seek(0);  byte[] magic=new byte[8];  readBytes(magic);  if (!verifyMagic(magic)) {    System.err.println("Magic number is wrong -- are you sure " + "this is a DEX file?");    throw new DexDataException();  }  seek(8 + 4 + 20+ 4+ 4);  mHeaderItem.endianTag=readInt();  if (mHeaderItem.endianTag == HeaderItem.ENDIAN_CONSTANT) {  } else   if (mHeaderItem.endianTag == HeaderItem.REVERSE_ENDIAN_CONSTANT) {    isBigEndian=true;  } else {    System.err.println("Endian constant has unexpected value " + Integer.toHexString(mHeaderItem.endianTag));    throw new DexDataException();  }  seek(8 + 4 + 20);  mHeaderItem.fileSize=readInt();  mHeaderItem.headerSize=readInt();  readInt();  readInt();  readInt();  readInt();  mHeaderItem.stringIdsSize=readInt();  mHeaderItem.stringIdsOff=readInt();  mHeaderItem.typeIdsSize=readInt();  mHeaderItem.typeIdsOff=readInt();  mHeaderItem.protoIdsSize=readInt();  mHeaderItem.protoIdsOff=readInt();  mHeaderItem.fieldIdsSize=readInt();  mHeaderItem.fieldIdsOff=readInt();  mHeaderItem.methodIdsSize=readInt();  mHeaderItem.methodIdsOff=readInt();  mHeaderItem.classDefsSize=readInt();  mHeaderItem.classDefsOff=readInt();  readInt();  readInt();}  }
class C{  public static void v(String tag,String msg){  v(tag,msg,null);}  }
class C{  public boolean verifyAllocatedAddress(final long addr){  for (int index=0; index < m_allocs.size(); index++) {    final FixedAllocator xfa=m_allocs.get(index);    if (xfa.verifyAllocatedAddress(addr))     return true;  }  return false;}  }
class C{  @Nullable GitLogRecord parseOneRecord(@NotNull String line){  if (line.isEmpty()) {    return null;  }  Matcher matcher=ONE_RECORD.matcher(line);  if (!matcher.matches()) {    throwGFE("ONE_RECORD didn't match",line);  }  String commitInfo=matcher.group(1);  if (commitInfo == null) {    throwGFE("No match for group#1 in",line);  }  final Map<GitLogOption,String> res=parseCommitInfo(commitInfo);  final List<String> paths=new ArrayList<String>(1);  final List<GitLogStatusInfo> statuses=new ArrayList<GitLogStatusInfo>();  if (myNameStatusOption != NameStatus.NONE) {    String pathsAndStatuses=matcher.group(2);    if (pathsAndStatuses == null) {      throwGFE("No match for group#2 in",line);    }    if (myNameStatusOption == NameStatus.NAME) {      Matcher pathsMatcher=NAME_ONLY.matcher(pathsAndStatuses);      while (pathsMatcher.find()) {        String path1=pathsMatcher.group(1);        String path2=pathsMatcher.group(2);        assertNotNull(path1,"path",pathsAndStatuses);        paths.add(path1);        if (path2 != null) {          paths.add(path2);        }      }    } else {      Matcher nameStatusMatcher=NAME_STATUS.matcher(pathsAndStatuses);      while (nameStatusMatcher.find()) {        String status=nameStatusMatcher.group(1);        String path1=nameStatusMatcher.group(2);        String path2=nameStatusMatcher.group(3);        assertNotNull(status,"status",pathsAndStatuses);        assertNotNull(path1,"path1",pathsAndStatuses);        paths.add(path1);        if (path2 != null) {          paths.add(path2);        }        statuses.add(new GitLogStatusInfo(GitChangeType.fromString(status),path1,path2));      }    }  }  return new GitLogRecord(res,paths,statuses,mySupportsRawBody);}  }
class C{  public static <T>T waitForState(Supplier<T> supplier,Predicate<T> predicate,long waitIterationSleepMillis,long waitIterationCount,Runnable cleanup,String timeoutMessage) throws Throwable {  for (int i=0; i < waitIterationCount; i++) {    T t=supplier.get();    if (predicate.test(t)) {      return t;    }    Thread.sleep(waitIterationSleepMillis);  }  if (cleanup != null) {    cleanup.run();  }  logger.warn(timeoutMessage);  throw new TimeoutException(timeoutMessage);}  }
class C{  public ColorTransform(){}  }
class C{  public boolean isQueryRequire(int noRecords){  if (noRecords < 2)   return false;  int max=getMaxQueryRecords();  if (max > 0 && noRecords > max)   return true;  int qu=getConfirmQueryRecords();  return (noRecords > qu);}  }
class C{  private JDiffClassDescription loadClassInfo(XmlPullParser parser,boolean isInterface,String pkg){  String className=parser.getAttributeValue(null,ATTRIBUTE_NAME);  JDiffClassDescription currentClass=new JDiffClassDescription(pkg,className,mResultObserver);  currentClass.setModifier(jdiffModifierToReflectionFormat(className,parser));  currentClass.setType(isInterface ? JDiffClassDescription.JDiffType.INTERFACE : JDiffClassDescription.JDiffType.CLASS);  currentClass.setExtendsClass(parser.getAttributeValue(null,ATTRIBUTE_EXTENDS));  return currentClass;}  }
class C{  protected static int discoverTopSet(int entryIndex,ArrayList<ChartSet> data){  int dataSize=data.size();  int index;  for (index=dataSize - 1; index >= 0; index--) {    if (data.get(index).getEntry(entryIndex).getValue() == 0)     continue;    break;  }  return index;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public BulletConstructor(final Model model,final float mass,final btCollisionShape shape){  create(model,mass,shape);}  }
class C{  public Object convert(Class<?> targetType,Object valueToConvert) throws JavaTypeTranslatorException {  Percent rVal=null;  if (valueToConvert == null) {    throw new JavaTypeTranslatorException("Null passed toObjectToPercent.convert()");  }  if (valueToConvert instanceof String) {    String stringValue=(String)valueToConvert;    rVal=new Percent(stringValue);  } else {    throw new JavaTypeTranslatorException("internal error parsing value");  }  return (rVal);}  }
class C{  @After public void tearDown() throws Exception {  exec.shutdownNow();  verifier.teardown();  setLogLevel(Level.INFO);}  }
class C{  public synchronized void receive(File file,boolean resume){  if (!_received) {    _received=true;    _file=file;    if (_type.equals("SEND") && resume) {      _progress=file.length();      if (_progress == 0) {        doReceive(file,false);      } else {        _bot.sendCTCPCommand(_nick,"DCC RESUME file.ext " + _port + " "+ _progress);        _manager.addAwaitingResume(this);      }    } else {      _progress=file.length();      doReceive(file,resume);    }  }}  }
class C{  protected void notifyDataRemoved(DataChangeEvent... events){  List<DataListener> listeners=new LinkedList<DataListener>(dataListeners);  for (  DataListener dataListener : listeners) {    dataListener.dataRemoved(this,events);  }}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  protected void maybeUpdateLayoutState(){  if (updateLayoutStateNeeded != 0) {    updateLayoutState();    updateLayoutStateNeeded=0;  }}  }
class C{  private String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString();}  }
class C{  public DTLZ3(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementinvalidcharacterexception.class,args);}  }
class C{  private UnicodeBlock(String idName,String... aliases){  this(idName);  for (  String alias : aliases)   map.put(alias,this);}  }
class C{  private CategoryDataset createCategoryDataset2(){  DefaultCategoryDataset result=new DefaultCategoryDataset();  result.addValue(1.0,"R0","C0");  result.addValue(-2.0,"R1","C0");  result.addValue(2.0,"R0","C1");  result.addValue(-1.0,"R1","C1");  return result;}  }
class C{  public static int XToTileX(int x,int tileGridXOffset,int tileWidth){  x-=tileGridXOffset;  if (x < 0) {    x+=1 - tileWidth;  }  return x / tileWidth;}  }
class C{  public void oldVersionStillHot(HotMethodEvent hme){  if (Controller.options.LOGGING_LEVEL >= 2) {    printlnToLogWithTimePrefix("Found a method with an old version still hot " + hme);  }}  }
class C{  private void verifyRegisterDefs(String where){  DefUse.computeDU(this);  for (Register r=regpool.getFirstSymbolicRegister(); r != null; r=r.getNext()) {    if (r.isPhysical())     continue;    if (r.useList != null) {      if (r.defList == null) {        printInstructions();        verror(where,"verifyRegisterDefs: " + r + " has use but no defs");      }    }  }}  }
class C{  public double eval(double params[]){  double p1=params[0];  double p2=params[1];  return (p1 <= p2) ? p1 : p2;}  }
class C{  public DataEvent(String tableName,DataEventType dataEventType,List<Map<String,Object>> oldData,List<Map<String,Object>> data){  this.tableName=tableName;  this.dataEventType=dataEventType;  this.oldData=oldData;  this.data=data;}  }
class C{  public synchronized static CharBuffer formatLocal(CharBuffer cb,long gmtTime,String format){  _localDate.setGMTTime(gmtTime);  return _localDate.format(cb,format);}  }
class C{  public boolean isStripedPhase(){  return this.stripedPhase;}  }
class C{  @Override protected void withBindHolder(UltimateRecyclerviewViewHolder holder,T data,int position){  mItemManger.updateConvertView(holder,position);}  }
class C{  public String syntaxHighlight(String line){  return htmlFilter(line);}  }
class C{  @Override public Date computeFirstFireTime(org.quartz.Calendar calendar){  nextFireTime=getFireTimeAfter(new Date(getStartTime().getTime() - 1000l));  while (nextFireTime != null && calendar != null && !calendar.isTimeIncluded(nextFireTime.getTime())) {    nextFireTime=getFireTimeAfter(nextFireTime);  }  return nextFireTime;}  }
class C{  public void closeDrawer(){}  }
class C{  private int calculateMaxCount(XYDataset dataset){  int max=0;  for (int i=0; i < dataset.getSeriesCount(); ++i) {    int count=dataset.getItemCount(i);    if (count > max) {      max=count;    }  }  return max;}  }
class C{  private void renameFile() throws VcsException, IOException {  FilePath folder=getChildPath(mySandboxRoot,FOLDER_NAME_1);  FilePath file=getChildPath(folder,FILE_NAME_3);  rename(file,FILE_NAME_3);  file=getChildPath(folder,FILE_NAME_3);  assertFile(file,CONTENT_2,false);}  }
class C{  protected int[][] createPointIndex(OMGraphicList list){  int[][] indexData=new int[2][list.size()];  int pos=50;  for (int i=0; i < list.size(); i++) {    int contentLength=0;    contentLength+=2;    OMGraphic graphic=list.getOMGraphicAt(i);    if (graphic instanceof EsriGraphicList) {      EsriGraphicList sublist=(EsriGraphicList)graphic;      contentLength+=(4 * 4);      contentLength+=2;      contentLength+=(sublist.size() * (2 + 4));    } else {      contentLength+=4;      contentLength+=4;    }    indexData[1][i]=contentLength;    indexData[0][i]=pos;    pos+=contentLength + 4;  }  return indexData;}  }
class C{  public Attribute removeAttribute(char attributeType){synchronized (attributes) {    return attributes.remove(attributeType);  }}  }
class C{  public void negate(){  _operator=inverseOperator(_operator);  for (int i=0; i < _operands.length; i++) {    if (_operands[i] instanceof Negatable)     ((Negatable)_operands[i]).negate(); else     _operands[i]=new CompiledNegation(_operands[i]);  }}  }
class C{  public byte[] encode(byte[] pArray){  return encodeBase64(pArray,false);}  }
class C{  public void warn(String msg,Object arg0,Object arg1,Object arg2){  innerLog(Level.WARNING,null,msg,arg0,arg1,arg2,null);}  }
class C{  public void split(int splitAmount,double offset,float splitChance,float splitLength,float splitAngle){  if (!this.isCalculated) {    ArrayList<BoltSegment> oldSegments=this.segments;    this.segments=new ArrayList();    BoltSegment prev=null;    for (    BoltSegment segment : oldSegments) {      prev=segment.prevSegment;      Pos3D subSegment=segment.difference.clone().scale(1.0F / splitAmount);      BoltPoint[] newPoints=new BoltPoint[splitAmount + 1];      Pos3D startPoint=segment.startBolt.point;      newPoints[0]=segment.startBolt;      newPoints[splitAmount]=segment.endBolt;      for (int i=1; i < splitAmount; i++) {        Pos3D offsetVec=segment.difference.getPerpendicular().rotate(this.rand.nextFloat() * 360.0F,segment.difference).scale((this.rand.nextFloat() - 0.5F) * offset);        Pos3D basepoint=startPoint.clone().translate(subSegment.clone().scale(i));        newPoints[i]=new BoltPoint(basepoint,offsetVec);      }      for (int i=0; i < splitAmount; i++) {        BoltSegment next=new BoltSegment(newPoints[i],newPoints[(i + 1)],segment.weight,segment.segmentID * splitAmount + i,segment.splitID);        next.prevSegment=prev;        if (prev != null) {          prev.nextSegment=next;        }        if ((i != 0) && (this.rand.nextFloat() < splitChance)) {          Pos3D splitrot=next.difference.xCrossProduct().rotate(this.rand.nextFloat() * 360.0F,next.difference);          Pos3D diff=next.difference.clone().rotate((this.rand.nextFloat() * 0.66F + 0.33F) * splitAngle,splitrot).scale(splitLength);          this.maxSplitID+=1;          this.splitparents.put(this.maxSplitID,next.splitID);          BoltSegment split=new BoltSegment(newPoints[i],new BoltPoint(newPoints[(i + 1)].basePoint,newPoints[(i + 1)].offSet.clone().translate(diff)),segment.weight / 2.0F,next.segmentID,this.maxSplitID);          split.prevSegment=prev;          this.segments.add(split);        }        prev=next;        this.segments.add(next);      }      if (segment.nextSegment != null) {        segment.nextSegment.prevSegment=prev;      }    }    this.segmentCount*=splitAmount;  }}  }
class C{  private Object _evaluateSingle(Object element){  if (element instanceof List) {    return evaluateSingle((List)element,expr);  } else {    return evaluateSingle((StructuredContent)element,expr);  }}  }
class C{  public void scrollByUnit(int direction){synchronized (slider) {    int delta=1 * ((direction > 0) ? POSITIVE_SCROLL : NEGATIVE_SCROLL);    if (upperThumbSelected) {      int oldValue=((RangeSlider)slider).getUpperValue();      ((RangeSlider)slider).setUpperValue(oldValue + delta);    } else {      int oldValue=slider.getValue();      slider.setValue(oldValue + delta);    }  }}  }
class C{  public void flip(int startIndex,int endIndex){  assert startIndex >= 0 && startIndex < numBits;  assert endIndex >= 0 && endIndex <= numBits;  if (endIndex <= startIndex) {    return;  }  int startWord=startIndex >> 6;  int endWord=(endIndex - 1) >> 6;  long startmask=-1L << startIndex;  long endmask=-1L >>> -endIndex;  if (startWord == endWord) {    bits[startWord]^=(startmask & endmask);    return;  }  bits[startWord]^=startmask;  for (int i=startWord + 1; i < endWord; i++) {    bits[i]=~bits[i];  }  bits[endWord]^=endmask;}  }
class C{  public Boolean isInstanceUuid(){  return instanceUuid;}  }
class C{  public SuggestHelper(String tag,Context context,int[] resId){  TAG=tag;  InputStream[] is=null;  try {    int total=0;    is=new InputStream[resId.length];    for (int i=0; i < resId.length; i++) {      is[i]=context.getResources().openRawResource(resId[i]);      total+=is[i].available();    }    ByteBuffer byteBuffer=ByteBuffer.allocateDirect(total).order(ByteOrder.nativeOrder());    int got=0;    for (int i=0; i < resId.length; i++) {      got+=Channels.newChannel(is[i]).read(byteBuffer);    }    if (got != total) {      Log.w(TAG,"Read " + got + " bytes, expected "+ total);    } else {      mSuggest=new Suggest(context,byteBuffer);      Log.i(TAG,"Created mSuggest " + total + " bytes");    }  } catch (  IOException e) {    Log.w(TAG,"No available memory for binary dictionary");  } finally {    try {      if (is != null) {        for (int i=0; i < is.length; i++) {          is[i].close();        }      }    } catch (    IOException e) {      Log.w(TAG,"Failed to close input stream");    }  }  mSuggest.setAutoTextEnabled(false);  mSuggest.setCorrectionMode(Suggest.CORRECTION_FULL_BIGRAM);}  }
class C{  public static String searchAddToCategory(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  String productCategoryId=request.getParameter("SE_SEARCH_CATEGORY_ID");  String fromDateStr=request.getParameter("fromDate");  Timestamp fromDate=null;  String errMsg=null;  try {    fromDate=Timestamp.valueOf(fromDateStr);  } catch (  RuntimeException e) {    Map<String,String> messageMap=UtilMisc.toMap("errDateFormat",e.toString());    errMsg=UtilProperties.getMessage(resource,"productsearchevents.fromDate_not_formatted_properly",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  try {    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);    try {      EntityListIterator eli=getProductSearchResults(request);      if (eli == null) {        errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      GenericValue searchResultView=null;      int numAdded=0;      while ((searchResultView=eli.next()) != null) {        String productId=searchResultView.getString("mainProductId");        GenericValue pcm=delegator.makeValue("ProductCategoryMember");        pcm.set("productCategoryId",productCategoryId);        pcm.set("productId",productId);        pcm.set("fromDate",fromDate);        pcm.create();        numAdded++;      }      Map<String,String> messageMap=UtilMisc.toMap("numAdded",Integer.toString(numAdded));      errMsg=UtilProperties.getMessage(resource,"productsearchevents.added_x_product_category_members",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_EVENT_MESSAGE_",errMsg);      eli.close();    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());      errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));      Debug.logError(e,errMsg,module);      request.setAttribute("_ERROR_MESSAGE_",errMsg);      TransactionUtil.rollback(beganTransaction,errMsg,e);      return "error";    } finally {      TransactionUtil.commit(beganTransaction);    }  } catch (  GenericTransactionException e) {    Map<String,String> messageMap=UtilMisc.toMap("errSearchResult",e.toString());    errMsg=UtilProperties.getMessage(resource,"productsearchevents.error_getting_search_results",messageMap,UtilHttp.getLocale(request));    Debug.logError(e,errMsg,module);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  public final static TimeLimitingCollector wrapTimeLimitingCollector(final Collector delegate,final Counter counter,long timeoutInMillis){  return new TimeLimitingCollector(delegate,counter,timeoutInMillis);}  }
class C{  public TimeEventItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void addInterfaceNoBidirectionalUpdate(AbstractInterfaceType type){  if (null == realizedInterfaces) {    realizedInterfaces=new TypeSet<AbstractInterfaceType>();  }  realizedInterfaces.addOrUpdate(type);}  }
class C{  public ModelBuilder add(String predicate,Object object){  return add(mapToIRI(predicate),object);}  }
class C{  public JSONArray(Collection<Object> collection){  this.myArrayList=new ArrayList<Object>();  if (collection != null) {    Iterator<Object> iter=collection.iterator();    while (iter.hasNext()) {      this.myArrayList.add(JSONObject.wrap(iter.next()));    }  }}  }
class C{  public MoveRefactoring(MoveProcessor processor){  super(processor);  Assert.isNotNull(processor);  fProcessor=processor;}  }
class C{  public void centerInstances(Instances centers,int[] assignments,double pc) throws Exception {  int[] centList=new int[centers.numInstances()];  for (int i=0; i < centers.numInstances(); i++)   centList[i]=i;  determineAssignments(m_Root,centers,centList,assignments,pc);}  }
class C{  private ImageDescriptor decorateImageDescriptor(ImageDescriptor descriptor,CompletionProposal proposal){  int adornments=0;  int flags=proposal.getFlags();  int kind=proposal.getKind();  boolean deprecated=Flags.isDeprecated(flags);  if (!deprecated) {    CompletionProposal[] requiredProposals=proposal.getRequiredProposals();    if (requiredProposals != null) {      for (int i=0; i < requiredProposals.length; i++) {        CompletionProposal requiredProposal=requiredProposals[i];        if (requiredProposal.getKind() == CompletionProposal.TYPE_REF) {          deprecated|=Flags.isDeprecated(requiredProposal.getFlags());        }      }    }  }  if (deprecated)   adornments|=JavaElementImageDescriptor.DEPRECATED;  if (kind == CompletionProposal.FIELD_REF || kind == CompletionProposal.METHOD_DECLARATION || kind == CompletionProposal.METHOD_NAME_REFERENCE || kind == CompletionProposal.METHOD_REF || kind == CompletionProposal.CONSTRUCTOR_INVOCATION)   if (Flags.isStatic(flags))   adornments|=JavaElementImageDescriptor.STATIC;  if (kind == CompletionProposal.METHOD_DECLARATION || kind == CompletionProposal.METHOD_NAME_REFERENCE || kind == CompletionProposal.METHOD_REF || kind == CompletionProposal.CONSTRUCTOR_INVOCATION)   if (Flags.isSynchronized(flags))   adornments|=JavaElementImageDescriptor.SYNCHRONIZED;  if (kind == CompletionProposal.METHOD_DECLARATION || kind == CompletionProposal.METHOD_NAME_REFERENCE || kind == CompletionProposal.METHOD_REF)   if (Flags.isDefaultMethod(flags))   adornments|=JavaElementImageDescriptor.DEFAULT_METHOD;  if (kind == CompletionProposal.ANNOTATION_ATTRIBUTE_REF)   if (Flags.isAnnnotationDefault(flags))   adornments|=JavaElementImageDescriptor.ANNOTATION_DEFAULT;  if (kind == CompletionProposal.TYPE_REF && Flags.isAbstract(flags) && !Flags.isInterface(flags))   adornments|=JavaElementImageDescriptor.ABSTRACT;  if (kind == CompletionProposal.FIELD_REF) {    if (Flags.isFinal(flags))     adornments|=JavaElementImageDescriptor.FINAL;    if (Flags.isTransient(flags))     adornments|=JavaElementImageDescriptor.TRANSIENT;    if (Flags.isVolatile(flags))     adornments|=JavaElementImageDescriptor.VOLATILE;  }  return new JavaElementImageDescriptor(descriptor,adornments);}  }
class C{  public static Style createLineStyle(){  final Stroke stroke=styleFactory.createStroke(filterFactory.literal(Color.BLUE),filterFactory.literal(1));  final LineSymbolizer sym=styleFactory.createLineSymbolizer(stroke,null);  final Rule rule=styleFactory.createRule();  rule.symbolizers().add(sym);  final FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle(new Rule[]{rule});  final Style style=styleFactory.createStyle();  style.featureTypeStyles().add(fts);  return style;}  }
class C{  public void paint(Graphics2D g2d){  if ((composite != null) && (composite instanceof AlphaComposite)) {    AlphaComposite ac=(AlphaComposite)composite;    if (ac.getAlpha() < 0.001)     return;  }  Rectangle2D bounds=getBounds();  if (bounds == null)   return;  Composite defaultComposite=null;  AffineTransform defaultTransform=null;  RenderingHints defaultHints=null;  Graphics2D baseG2d=null;  if (clip != null) {    baseG2d=g2d;    g2d=(Graphics2D)g2d.create();    if (hints != null)     g2d.addRenderingHints(hints);    if (transform != null)     g2d.transform(transform);    if (composite != null)     g2d.setComposite(composite);    g2d.clip(clip.getClipPath());  } else {    if (hints != null) {      defaultHints=g2d.getRenderingHints();      g2d.addRenderingHints(hints);    }    if (transform != null) {      defaultTransform=g2d.getTransform();      g2d.transform(transform);    }    if (composite != null) {      defaultComposite=g2d.getComposite();      g2d.setComposite(composite);    }  }  Shape curClip=g2d.getClip();  g2d.setRenderingHint(RenderingHintsKeyExt.KEY_AREA_OF_INTEREST,curClip);  boolean paintNeeded=true;  Shape g2dClip=curClip;  if (g2dClip != null) {    Rectangle2D cb=g2dClip.getBounds2D();    if (!bounds.intersects(cb.getX(),cb.getY(),cb.getWidth(),cb.getHeight()))     paintNeeded=false;  }  if (paintNeeded) {    boolean antialiasedClip=false;    if ((clip != null) && clip.getUseAntialiasedClip()) {      antialiasedClip=isAntialiasedClip(g2d.getTransform(),g2d.getRenderingHints(),clip.getClipPath());    }    boolean useOffscreen=isOffscreenBufferNeeded();    useOffscreen|=antialiasedClip;    if (!useOffscreen) {      primitivePaint(g2d);    } else {      Filter filteredImage=null;      if (filter == null) {        filteredImage=getGraphicsNodeRable(true);      } else {        filteredImage=filter;      }      if (mask != null) {        if (mask.getSource() != filteredImage) {          mask.setSource(filteredImage);        }        filteredImage=mask;      }      if (clip != null && antialiasedClip) {        if (clip.getSource() != filteredImage) {          clip.setSource(filteredImage);        }        filteredImage=clip;      }      baseG2d=g2d;      g2d=(Graphics2D)g2d.create();      if (antialiasedClip) {        g2d.setClip(null);      }      Rectangle2D filterBounds=filteredImage.getBounds2D();      g2d.clip(filterBounds);      org.apache.flex.forks.batik.ext.awt.image.GraphicsUtil.drawImage(g2d,filteredImage);      g2d.dispose();      g2d=baseG2d;      baseG2d=null;    }  }  if (baseG2d != null) {    g2d.dispose();  } else {    if (defaultHints != null)     g2d.setRenderingHints(defaultHints);    if (defaultTransform != null)     g2d.setTransform(defaultTransform);    if (defaultComposite != null) {      g2d.setComposite(defaultComposite);    }  }}  }
class C{  private void updateRandomOffsetLocked(){  long now=SystemClock.elapsedRealtime();  if (now < mNextInterval) {    return;  }  if (D)   Log.d(TAG,String.format("old offset: %.0f, %.0f (meters)",mOffsetLongitudeMeters,mOffsetLatitudeMeters));  mNextInterval=now + CHANGE_INTERVAL_MS;  mOffsetLatitudeMeters*=PREVIOUS_WEIGHT;  mOffsetLatitudeMeters+=NEW_WEIGHT * nextOffsetLocked();  mOffsetLongitudeMeters*=PREVIOUS_WEIGHT;  mOffsetLongitudeMeters+=NEW_WEIGHT * nextOffsetLocked();  if (D)   Log.d(TAG,String.format("new offset: %.0f, %.0f (meters)",mOffsetLongitudeMeters,mOffsetLatitudeMeters));}  }
class C{  protected static <T extends ImmutableObject>T cloneEmptyToNull(T t){  return ModelUtils.cloneEmptyToNull(t);}  }
class C{  public static int compare(final byte[] b,final byte[] c){  int result=b.length - c.length;  if (0 != result) {    return result;  }  for (int i=0; i < b.length; i++) {    result=b[i] - c[i];    if (0 != result) {      return result;    }  }  return 0;}  }
class C{  public static ActivityFacilities createNetworkDensityFacilities(Network network,ActivityFacilities measuringPoints,double maximumAllowedDistance){  ActivityFacilitiesFactory aff=new ActivityFacilitiesFactoryImpl();  ActivityFacilities networkDensityFacilities=FacilitiesUtils.createActivityFacilities("network_densities");  for (  ActivityFacility measuringPoint : measuringPoints.getFacilities().values()) {    Coord coord=measuringPoint.getCoord();    Link link=NetworkUtils.getNearestLink(network,coord);    final Coord coord1=coord;    Link r=((Link)link);    double distance=CoordUtils.distancePointLinesegment(r.getFromNode().getCoord(),r.getToNode().getCoord(),coord1);    if (distance <= maximumAllowedDistance) {      ActivityFacility facility=aff.createActivityFacility(measuringPoint.getId(),coord);      networkDensityFacilities.addActivityFacility(facility);    }  }  return networkDensityFacilities;}  }
class C{  protected DoubleMatrix2D like2D(int rows,int columns,int rowZero,int columnZero,int rowStride,int columnStride){  throw new InternalError();}  }
class C{  public void fireStackStatus(UndoEvent undoEvent,UndoEvent redoEvent){  ArrayList<UndoStackTrigger> targets=getTriggers();  if (triggers == null) {    return;  }  for (  UndoStackTrigger target : targets) {    if (logger.isLoggable(Level.FINE)) {      logger.fine("target is: " + target);    }    target.updateUndoStackStatus(undoEvent,redoEvent);  }}  }
class C{  public synchronized int read(byte b[],int off,int len){  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  }  if (pos >= count) {    return -1;  }  int avail=count - pos;  if (len > avail) {    len=avail;  }  if (len <= 0) {    return 0;  }  System.arraycopy(buf,pos,b,off,len);  pos+=len;  return len;}  }
class C{  protected void noRecordSelected(){  m_M_Product_ID=0;  p_detailTaskPane.setCollapsed(true);  return;}  }
class C{  public void addRecord(OMGraphic graphic,ArrayList<Object> record){  OMGraphicList _list=getList();  graphic.putAttribute(SHAPE_DBF_INFO_ATTRIBUTE,record);  if (_list != null) {    _list.add(graphic);  }  if (_model != null) {    _model.addRecord(record);  }}  }
class C{  private void addKeepAliveHeaders(HttpRequest req,AggregatedHttpMessage res){switch (protocol) {case H1:case H1C:    res.headers().set(HttpHeaderNames.CONNECTION,"keep-alive");  break;default :}setContentLength(req,res);}  }
class C{  public static float parseFloat(final int start,final int end,final byte[] stream){  final float d;  int ptr=end;  int intStart=start;  boolean isMinus=false;  for (int j=end - 1; j > start - 1; j--) {    if (stream[j] == 46) {      ptr=j;      break;    }  }  int intChars=ptr;  final int decStart=ptr;  if (stream[start] == 43) {    intChars--;    intStart++;  } else   if (stream[start] == 45) {    intStart++;    isMinus=true;  }  final int intNumbers=intChars - intStart;  final int decNumbers=end - ptr;  if (intNumbers > 4) {    isMinus=false;    final int count=end - start;    final byte[] floatVal=new byte[count];    System.arraycopy(stream,start,floatVal,0,count);    d=Float.parseFloat(new String(floatVal));  } else {    d=convertFloatFromStream(stream,intStart,decStart,intNumbers,decNumbers);  }  if (isMinus) {    return -d;  } else {    return d;  }}  }
class C{  public static boolean isUnitLength(S2Point p){  return Math.abs(p.norm2() - 1) <= 1e-15;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static void main(String[] args){  int[][] matrix=new int[6][6];  for (int i=0; i < matrix.length; i++) {    for (int j=0; j < matrix[i].length; j++) {      matrix[i][j]=(int)(Math.random() * 2);      System.out.print(matrix[i][j] + " ");    }    System.out.println();  }  System.out.println("Every row" + (isAllRowsEven1s(matrix) ? " " : " does not " + "have an even number of 1s"));  System.out.println("Every column" + (isAllColumnsEven1s(matrix) ? " " : " does not " + "have an even number of 1s"));}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 53:{        yybegin(DOCTYPE_MARKUP_STARTED);        yypushback(yylength());      }case 72:    break;case 21:{    yybegin(DOCTYPE_MARKUP);    return XmlTokenType.XML_MARKUP_START;  }case 73:break;case 1:{return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;}case 74:break;case 60:{return XmlTokenType.XML_DOCTYPE_SYSTEM;}case 75:break;case 36:{return XmlTokenType.XML_COMMA;}case 76:break;case 9:{return XmlTokenType.XML_EQ;}case 77:break;case 66:{yybegin(CDATA);return XmlTokenType.XML_CDATA_START;}case 78:break;case 16:{yybegin(ATTRIBUTE_VALUE_START);return XmlTokenType.XML_EQ;}case 79:break;case 61:{return XmlTokenType.XML_CONDITIONAL_IGNORE;}case 80:break;case 26:{return XmlTokenType.XML_SEMI;}case 81:break;case 55:{yybegin(DECL);return XmlTokenType.XML_DECL_START;}case 82:break;case 11:{yybegin(DECL_ATTR_VALUE_DQ);return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;}case 83:break;case 69:{yybegin(DOCTYPE_MARKUP);return XmlTokenType.XML_ELEMENT_DECL_START;}case 84:break;case 14:{return XmlTokenType.XML_NAME;}case 85:break;case 19:{yybegin(TAG_ATTRIBUTES);return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;}case 86:break;case 10:{yybegin(DECL_ATTR_VALUE_SQ);return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;}case 87:break;case 59:{return XmlTokenType.XML_DOCTYPE_PUBLIC;}case 88:break;case 51:{yybegin(COMMENT);return XmlTokenType.XML_COMMENT_START;}case 89:break;case 7:{yybegin(DECL_ATTR);return XmlTokenType.XML_NAME;}case 90:break;case 37:{yybegin(DOCTYPE_MARKUP);return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;}case 91:break;case 65:{return XmlTokenType.XML_ATT_IMPLIED;}case 92:break;case 68:{yybegin(DOCTYPE_MARKUP);return XmlTokenType.XML_ATTLIST_DECL_START;}case 93:break;case 3:{return XmlTokenType.XML_DATA_CHARACTERS;}case 94:break;case 6:{return XmlTokenType.XML_BAD_CHARACTER;}case 95:break;case 15:{yybegin(YYINITIAL);return XmlTokenType.XML_TAG_END;}case 96:break;case 13:{yybegin(TAG_ATTRIBUTES);return isHighlightModeOn ? XmlTokenType.XML_TAG_NAME : XmlTokenType.XML_NAME;}case 97:break;case 48:{yybegin(YYINITIAL);return XmlTokenType.XML_COMMENT_END;}case 98:break;case 31:{return XmlTokenType.XML_LEFT_PAREN;}case 99:break;case 62:{return XmlTokenType.XML_PCDATA;}case 100:break;case 39:{yybegin(TAG_NAME);return XmlTokenType.XML_END_TAG_START;}case 101:break;case 58:{return XmlTokenType.XML_ATT_FIXED;}case 102:break;case 44:{yybegin(DOCTYPE_MARKUP);return XmlTokenType.XML_COMMENT_END;}case 103:break;case 23:{yybegin(DOCTYPE);return XmlTokenType.XML_MARKUP_END;}case 104:break;case 43:{yybegin(DOCTYPE_COMMENT);return XmlTokenType.XML_COMMENT_START;}case 105:break;case 20:{return XmlTokenType.XML_PI_TARGET;}case 106:break;case 63:{return XmlTokenType.XML_CONDITIONAL_INCLUDE;}case 107:break;case 41:{yybegin(YYINITIAL);return XmlTokenType.XML_EMPTY_ELEMENT_END;}case 108:break;case 32:{return XmlTokenType.XML_RIGHT_PAREN;}case 109:break;case 8:{yybegin(YYINITIAL);return XmlTokenType.XML_BAD_CHARACTER;}case 110:break;case 38:{yybegin(PROCESSING_INSTRUCTION);return XmlTokenType.XML_PI_START;}case 111:break;case 64:{yybegin(DOCTYPE_MARKUP);return XmlTokenType.XML_ENTITY_DECL_START;}case 112:break;case 29:{yybegin(DOCTYPE_MARKUP_SQ);return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;}case 113:break;case 54:{return XmlTokenType.XML_CONTENT_EMPTY;}case 114:break;case 33:{return XmlTokenType.XML_PLUS;}case 115:break;case 30:{yybegin(DOCTYPE_MARKUP_DQ);return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;}case 116:break;case 49:{return XmlTokenType.XML_CONTENT_ANY;}case 117:break;case 22:{yybegin(YYINITIAL);return XmlTokenType.XML_DOCTYPE_END;}case 118:break;case 52:{return XmlTokenType.XML_CHAR_ENTITY_REF;}case 119:break;case 70:{return XmlTokenType.XML_ATT_REQUIRED;}case 120:break;case 28:{return XmlTokenType.XML_QUESTION;}case 121:break;case 57:{yybegin(DOCTYPE_EXTERNAL_ID);return XmlTokenType.XML_DOCTYPE_SYSTEM;}case 122:break;case 34:{return XmlTokenType.XML_STAR;}case 123:break;case 40:{yybegin(YYINITIAL);return XmlTokenType.XML_DECL_END;}case 124:break;case 4:{return XmlTokenType.XML_WHITE_SPACE;}case 125:break;case 47:{return XmlTokenType.XML_ENTITY_REF_TOKEN;}case 126:break;case 27:{return XmlTokenType.XML_PERCENT;}case 127:break;case 5:{yybegin(TAG_NAME);return XmlTokenType.XML_START_TAG_START;}case 128:break;case 46:{yybegin(YYINITIAL);return XmlTokenType.XML_CONDITIONAL_SECTION_END;}case 129:break;case 50:{yybegin(YYINITIAL);return XmlTokenType.XML_CDATA_END;}case 130:break;case 56:{yybegin(DOCTYPE_EXTERNAL_ID);return XmlTokenType.XML_DOCTYPE_PUBLIC;}case 131:break;case 12:{yybegin(DECL);return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;}case 132:break;case 25:{return XmlTokenType.XML_AMP;}case 133:break;case 42:{yybegin(YYINITIAL);return XmlTokenType.XML_PI_END;}case 134:break;case 18:{yybegin(ATTRIBUTE_VALUE_DQ);return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;}case 135:break;case 67:{yybegin(DOCTYPE);return XmlTokenType.XML_DOCTYPE_START;}case 136:break;case 17:{yybegin(ATTRIBUTE_VALUE_SQ);return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;}case 137:break;case 71:{yybegin(DOCTYPE_MARKUP);return XmlTokenType.XML_NOTATION_DECL_START;}case 138:break;case 24:{return XmlTokenType.XML_TAG_END;}case 139:break;case 35:{return XmlTokenType.XML_BAR;}case 140:break;case 2:{return XmlTokenType.XML_COMMENT_CHARACTERS;}case 141:break;case 45:{yybegin(CONDITIONAL);return XmlTokenType.XML_CONDITIONAL_SECTION_START;}case 142:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public InterproceduralCallGraphVertex lookupVertex(MethodDescriptor methodDesc){  return methodDescToVertexMap.get(methodDesc);}  }
class C{  public BytesRef(CharSequence text){  this(new byte[UnicodeUtil.MAX_UTF8_BYTES_PER_CHAR * text.length()]);  length=UnicodeUtil.UTF16toUTF8(text,0,text.length(),bytes);}  }
class C{  public void warn(XPathContext xctxt,String msg,Object args[]) throws javax.xml.transform.TransformerException {  String formattedMsg=XSLMessages.createWarning(msg,args);  ErrorListener errHandler=xctxt.getErrorListener();  TransformerException spe=new TransformerException(formattedMsg,(SourceLocator)xctxt.getSAXLocator());  if (null != errHandler)   errHandler.warning(spe); else   System.out.println(formattedMsg);}  }
class C{  private static synchronized void gj_eliminate(double[][] A,int i,int j,int n,int m){  for (int k=0; k < n; k++) {    if ((k != i) && (A[k][j] != 0)) {      for (int q=j + 1; q < m; q++) {        A[k][q]-=A[k][j] * A[i][q];      }      A[k][j]=0;    }  }}  }
class C{  public static void unregisterWorld(int dimId){  AtmosphereHandler handler=dimensionOxygen.remove(dimId);  if (Configuration.enableOxygen && handler != null) {    MinecraftForge.EVENT_BUS.unregister(handler);    FMLCommonHandler.instance().bus().unregister(handler);  }}  }
class C{  public static Clusters convertToClusters(Graph clusterGraph,List<Node> measuredVariables){  List<String> latents=new ArrayList<>();  Clusters clusters=new Clusters();  clusterGraph=GraphUtils.replaceNodes(clusterGraph,measuredVariables);  for (  Node node : clusterGraph.getNodes()) {    if (!measuredVariables.contains(node)) {      latents.add(node.getName());    }  }  Collections.sort(latents);  for (int i=0; i < latents.size(); i++) {    String name=latents.get(i);    clusters.setClusterName(i,name);    Node latent=clusterGraph.getNode(name);    List<Node> measured=clusterGraph.getNodesOutTo(latent,Endpoint.ARROW);    for (    Node _node : measured) {      if (measuredVariables.contains(_node)) {        clusters.addToCluster(i,_node.getName());      }    }  }  return clusters;}  }
class C{  void nextEpisode(){  if (series.hasNextEpisode())   series.moveToNextEpisode();  try {    currentEpisode=new BufferedReader(new FileReader("./scripts/" + series.name + "/Episode "+ series.currentEpisodeNum+ ".txt"));  } catch (  FileNotFoundException e) {    System.out.println("Could not find script file for episode " + series.currentEpisodeNum + ", downloading now");    ScriptScraper.downloadEpisode(series,series.currentEpisodeNum);    try {      currentEpisode=new BufferedReader(new FileReader("./scripts/" + series.name + "/Episode "+ series.currentEpisodeNum+ ".txt"));    } catch (    FileNotFoundException ex) {      e.printStackTrace();    }  }}  }
class C{  public DijkstraDistance(Hypergraph<V,E> g,Function<? super E,? extends Number> nev){  this(g,nev,true);}  }
class C{  public CheckerBoardColorCalibration(java.awt.Frame parent,boolean modal){  super(parent,modal);  initComponents();  ModifiableJOptionPane.reverseOKCancel(ok,cancel);  setLocationByPlatform(true);  colorA.setText(Integer.toHexString(getColorA()));  colorB.setText(Integer.toHexString(getColorB()));  ColorIcon.installWithColorPicker(colorAButton,colorA);  ColorIcon.installWithColorPicker(colorBButton,colorB);}  }
class C{  public static short parseShort(String string) throws NumberFormatException {  return parseShort(string,10);}  }
class C{  public OperationNotPermittedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public DateTime(){  this(GregorianCalendar.getInstance());}  }
class C{  public SerializerRegistry registerAbstract(Class<?> abstractType,int id,Class<? extends TypeSerializer> serializer){  return registerAbstract(abstractType,id,new DefaultTypeSerializerFactory(serializer));}  }
class C{  public double lowerBound(){  return lowerBound;}  }
class C{  public synchronized void catalog(String workerId,WorkerCategory category){  WorkerObservation observation=new WorkerObservation(workerId,category);  WorkerObservation oldObservation=observationsByWorkerId.put(workerId,observation);  if (oldObservation != null) {    workersByCategory.remove(oldObservation.category,workerId);  }  workersByCategory.put(category,workerId);  workersByGraph.put(category.graphId,workerId);}  }
class C{  public static void saveX509Cert(Certificate[] certs,File certFile) throws GeneralSecurityException, IOException {  BufferedWriter writer=new BufferedWriter(new FileWriter(certFile));  for (  Certificate cert : certs) {    String certStr=DatatypeConverter.printBase64Binary(cert.getEncoded()).replaceAll("(.{64})","$1\n");    writer.write(BEGIN_CERT);    writer.newLine();    writer.write(certStr);    writer.newLine();    writer.write(END_CERT);    writer.newLine();  }  writer.close();}  }
class C{  public SemGraph(){  this.graph=new EdgeListGraph();}  }
class C{  public XorPredicate(){}  }
class C{  public AnnotationsAttribute(ConstPool cp,String attrname){  this(cp,attrname,new byte[]{0,0});}  }
class C{  private void increasedSize(int added){  end+=added;}  }
class C{  @Override public void draw(){  background(0);  stereoPosition(cameraPositionX,cameraPositionY,cameraPositionZ,0f,0f,-1f,0f,1f,0f);  if (!vrMode) {    image(photo[photoCounter++],0,0);    if (photoCounter >= NUM_PHOTOS)     photoCounter=0;  }}  }
class C{  public static boolean containsElement(Object obj,Object element){  if (obj == null) {    return false;  }  if (obj instanceof String) {    if (element == null) {      return false;    }    return ((String)obj).contains(element.toString());  }  if (obj instanceof Collection) {    return ((Collection)obj).contains(element);  }  if (obj instanceof Map) {    return ((Map)obj).values().contains(element);  }  if (obj instanceof Iterator) {    Iterator iter=(Iterator)obj;    while (iter.hasNext()) {      Object o=iter.next();      if (equals(o,element)) {        return true;      }    }    return false;  }  if (obj instanceof Enumeration) {    Enumeration enumeration=(Enumeration)obj;    while (enumeration.hasMoreElements()) {      Object o=enumeration.nextElement();      if (equals(o,element)) {        return true;      }    }    return false;  }  if (obj.getClass().isArray() == true) {    int len=Array.getLength(obj);    for (int i=0; i < len; i++) {      Object o=Array.get(obj,i);      if (equals(o,element)) {        return true;      }    }  }  return false;}  }
class C{  public String[] listFiles(String directory) throws IOException {  return Util.getImplementation().listFiles(directory);}  }
class C{  public boolean isEmpty(){  unparcel();  return mMap.isEmpty();}  }
class C{  public int nextClearBit(int index){  int i=index >> 6;  if (i >= wlen)   return -1;  int subIndex=index & 0x3f;  long word=~bits.get(i) >> subIndex;  if (word != 0) {    return (i << 6) + subIndex + Long.numberOfTrailingZeros(word);  }  while (++i < wlen) {    word=~bits.get(i);    if (word != 0) {      return (i << 6) + Long.numberOfTrailingZeros(word);    }  }  return -1;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return NODE;default :return null;}}  }
class C{  public static final Integer extractIplIdentityHostFrimwareRevNum(LocoNetMessage m){  return (m.getElement(8));}  }
class C{  public static JPanel createPanel(int width,int height,int vGap,int hGap,int alignment){  FlowLayout flowLayout1=new FlowLayout();  JPanel controlPanel=new JPanel();  controlPanel.setLayout(flowLayout1);  flowLayout1.setAlignment(alignment);  if (width > 0 && height > 0)   controlPanel.setPreferredSize(new java.awt.Dimension(width,height));  controlPanel.setBackground(JPlagCreator.SYSTEMCOLOR);  controlPanel.setBorder(JPlagCreator.LINE);  flowLayout1.setVgap(vGap);  flowLayout1.setHgap(hGap);  return controlPanel;}  }
class C{  private double gaussianEM(SemGraph semdag,SemIm initialSemIm){  double score, newScore=-Double.MAX_VALUE, bestScore=-Double.MAX_VALUE;  SemPm semPm=new SemPm(semdag);  for (int p=0; p < numObserved; p++) {    for (int q=0; q < numObserved; q++) {      this.bestCyy[p][q]=this.Cyy[p][q];    }    if (this.Cyz != null) {      for (int q=0; q < numLatent; q++) {        this.bestCyz[p][q]=this.Cyz[p][q];      }    }  }  if (this.Czz != null) {    for (int p=0; p < numLatent; p++) {      for (int q=0; q < numLatent; q++) {        this.bestCzz[p][q]=this.Czz[p][q];      }    }  }  semdag.setShowErrorTerms(true);  initializeGaussianEM(semdag);  for (int i=0; i < 3; i++) {    System.out.println("--Trial " + i);    SemIm semIm;    if (i == 0 && initialSemIm != null) {      semIm=initialSemIm;    } else {      semIm=new SemIm(semPm);      semIm.setCovMatrix(this.covarianceMatrix);    }    do {      score=newScore;      gaussianExpectation(semIm);      newScore=gaussianMaximization(semIm);      if (newScore == -Double.MAX_VALUE) {        break;      }    } while (Math.abs(score - newScore) > 1.E-3);    System.out.println(newScore);    if (newScore > bestScore && !Double.isInfinite(newScore)) {      bestScore=newScore;      for (int p=0; p < numObserved; p++) {        for (int q=0; q < numObserved; q++) {          this.bestCyy[p][q]=this.Cyy[p][q];        }        for (int q=0; q < numLatent; q++) {          this.bestCyz[p][q]=this.Cyz[p][q];        }      }      for (int p=0; p < numLatent; p++) {        for (int q=0; q < numLatent; q++) {          this.bestCzz[p][q]=this.Czz[p][q];        }      }    }  }  for (int p=0; p < numObserved; p++) {    for (int q=0; q < numObserved; q++) {      this.Cyy[p][q]=this.bestCyy[p][q];    }    for (int q=0; q < numLatent; q++) {      this.Cyz[p][q]=this.bestCyz[p][q];    }  }  for (int p=0; p < numLatent; p++) {    for (int q=0; q < numLatent; q++) {      this.Czz[p][q]=this.bestCzz[p][q];    }  }  if (Double.isInfinite(bestScore)) {    System.out.println("* * Warning: Heywood case in this step");    return -Double.MAX_VALUE;  }  return bestScore;}  }
class C{  public static float signum(float f){  return (f == 0.0f || Float.isNaN(f)) ? f : copySign(1.0f,f);}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public GeoPosition convertPointToGeoPosition(Point2D pt){  Rectangle bounds=getViewportBounds();  Point2D pt2=new Point2D.Double(pt.getX() + bounds.getX(),pt.getY() + bounds.getY());  GeoPosition pos=getTileFactory().pixelToGeo(pt2,getZoom());  return pos;}  }
class C{  public void testCreate_3args_2(){  System.out.println("create SiteAuditCommand");  String url="";  Set<Parameter> paramSet=null;  boolean isSite=true;  AuditCommand result=this.auditCommandFactory.create(url,paramSet,isSite);  assertTrue(result instanceof SiteAuditCommandImpl);  EasyMock.verify(mockAuditDataService);  EasyMock.verify(mockAudit);}  }
class C{  public void sendForward(final WorkflowAnnotation anno){  if (anno == null) {    throw new IllegalArgumentException("anno must not be null!");  }synchronized (lock) {    int newIndexDraw=annotationsDrawOrder.indexOf(anno) + 1;    int newIndexEvent=annotationsEventOrder.indexOf(anno) - 1;    if (annotationsDrawOrder.remove(anno)) {      if (newIndexDraw >= annotationsDrawOrder.size()) {        annotationsDrawOrder.add(anno);      } else {        annotationsDrawOrder.add(newIndexDraw,anno);      }    }    if (annotationsEventOrder.remove(anno)) {      if (newIndexEvent < 0) {        annotationsEventOrder.add(0,anno);      } else {        annotationsEventOrder.add(newIndexEvent,anno);      }    }  }}  }
class C{  public static void main(String[] args){  System.out.println("Year     Days in year");  for (int year=2000; year <= 2020; year++) {    System.out.println(year + "         " + numberOfDaysInAYear(year));  }}  }
class C{  public static String generateXPath(Node node,boolean ignoreWhitespace){  return generateXPath(node,ignoreWhitespace,false);}  }
class C{  public Set<Tree<L>> subTrees(){  return (Set<Tree<L>>)subTrees(new HashSet<Tree<L>>());}  }
class C{  public final double KBInformation() throws Exception {  return m_delegate.KBInformation();}  }
class C{  public static void checkOldData(SupportBaseView testChildView,EventBean[] expectedValues){  EventBean[] oldData=testChildView.getLastOldData();  EPAssertionUtil.assertEqualsExactOrder(expectedValues,oldData);  testChildView.clearLastOldData();}  }
class C{  public void addUINode(Node node){  log.debug("Adding UI node: " + node);  uiRoot.getChildren().add(node);}  }
class C{  private void markSubroutines(){  BitSet anyvisited=new BitSet();  markSubroutineWalk(mainSubroutine,0,anyvisited);  for (Iterator<Map.Entry<LabelNode,BitSet>> it=subroutineHeads.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<LabelNode,BitSet> entry=it.next();    LabelNode lab=entry.getKey();    BitSet sub=entry.getValue();    int index=instructions.indexOf(lab);    markSubroutineWalk(sub,index,anyvisited);  }}  }
class C{  public static final SortedMap<String,Set<String>> decompressIndex(ByteBuffer ci,final String peerhash){  SortedMap<String,Set<String>> target=Collections.synchronizedSortedMap(new TreeMap<String,Set<String>>());  if (ci.byteAt(0) != '{' || ci.byteAt(ci.length() - 1) != '}')   return target;  ci=ci.trim(1,ci.length() - 2);  String dom, url;  Set<String> peers;  StringBuilder urlsb;  while (ci.length() >= 13 && ci.byteAt(6) == ':') {    assert ci.length() >= 6 : "ci.length() = " + ci.length();    dom=ci.toStringBuilder(0,6,6).toString();    ci.trim(7);    while (!ci.isEmpty() && ci.byteAt(0) != ',') {      assert ci.length() >= 6 : "ci.length() = " + ci.length();      urlsb=ci.toStringBuilder(0,6,12);      urlsb.append(dom);      url=urlsb.toString();      ci.trim(6);      peers=target.get(url);      if (peers == null) {        peers=new HashSet<String>();        target.put(url,peers);      }      peers.add(peerhash);    }    if (ci.byteAt(0) == ',')     ci.trim(1);  }  return target;}  }
class C{  public void put(final T element){  if (this.index == this.buffer.length) {    System.arraycopy(this.buffer,1,this.buffer,0,this.buffer.length - 1);    this.buffer[this.index - 1]=element;  } else {    this.buffer[this.index++]=element;  }}  }
class C{  public int match(Kim kim,int from,int thru){  Node node=this.root;  int best=none;  for (int at=from; at < thru; at+=1) {    node=node.get(kim.get(at));    if (node == null) {      break;    }    if (node.integer != none) {      best=node.integer;    }    from+=1;  }  return best;}  }
class C{  public void addParameterList(NameValuePair param){  if (localParameterList == null) {    localParameterList=new NameValuePair[]{};  }  localParameterListTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameterList);  list.add(param);  this.localParameterList=(NameValuePair[])list.toArray(new NameValuePair[list.size()]);}  }
class C{  public static String separate(String separator,String... blocks){  requireNonNullElements(blocks);  return Stream.of(blocks).collect(joining(separator));}  }
class C{  protected void sequence_Function(ISerializationContext context,Function semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Set<E> keySet(){  return entries.keySet();}  }
class C{  public void login(String username,String password) throws AuthenticationException, DocumentListException {  documentList.login(username,password);}  }
class C{  public CLQueue createDefaultQueue(QueueProperties... queueProperties){  return new CLDevice(platform,deviceIds.getSizeT()).createQueue(this,queueProperties);}  }
class C{  @Override public void write(byte b[]) throws IOException {  for (  OutputStream stream : outs)   stream.write(b);}  }
class C{  public static Calendar ceiling(final Calendar date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar ceiled=(Calendar)date.clone();  modify(ceiled,field,ModifyType.CEILING);  return ceiled;}  }
class C{  protected boolean shouldCenterBeInShape(){  return true;}  }
class C{  public JDBCCategoryDataset(String url,String driverName,String user,String passwd) throws ClassNotFoundException, SQLException {  Class.forName(driverName);  this.connection=DriverManager.getConnection(url,user,passwd);}  }
class C{  public static int[] clone(int[] array){  int[] result=new int[array.length];  System.arraycopy(array,0,result,0,array.length);  return result;}  }
class C{  void writeStateFile(ParcelFileDescriptor stateFile) throws IOException {  FileOutputStream outstream=new FileOutputStream(stateFile.getFileDescriptor());  DataOutputStream out=new DataOutputStream(outstream);  out.writeInt(AGENT_VERSION);  out.writeInt(mFilling);  out.writeBoolean(mAddMayo);  out.writeBoolean(mAddTomato);}  }
class C{  private void revealTheBackground(){  mBackgroundView.setVisibility(View.VISIBLE);  Animator reveal=createRevealAnimator(true);  reveal.start();}  }
class C{  public SerialSignalHead(String systemName,String userName){  super(systemName,userName);  tSystemName=systemName;  int num=SerialAddress.getBitFromSystemName(systemName);  output=(num % 100) - 1;  bank=(num / 100) - 1;}  }
class C{  public int hashCode(){  return Arrays.hashCode(apdu);}  }
class C{  static void checkMethodIdentifier(int version,final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if ((version & 0xFFFF) >= Opcodes.V1_5) {    for (int i=0; i < name.length(); ++i) {      if (".;[/<>".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }    return;  }  if (!Character.isJavaIdentifierStart(name.charAt(0))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a '<init>', '<clinit>' or a valid Java identifier): "+ name);  }  for (int i=1; i < name.length(); ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be '<init>' or '<clinit>' or a valid Java identifier): "+ name);    }  }}  }
class C{  public void shapeMode(int mode){  g.shapeMode(mode);}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public List<Patch> patch_fromText(String textline) throws IllegalArgumentException {  List<Patch> patches=new LinkedList<Patch>();  if (textline.length() == 0) {    return patches;  }  List<String> textList=Arrays.asList(textline.split("\n"));  LinkedList<String> text=new LinkedList<String>(textList);  Patch patch;  Pattern patchHeader=Pattern.compile("^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$");  Matcher m;  char sign;  String line;  while (!text.isEmpty()) {    m=patchHeader.matcher(text.getFirst());    if (!m.matches()) {      throw new IllegalArgumentException("Invalid patch string: " + text.getFirst());    }    patch=new Patch();    patches.add(patch);    patch.start1=Integer.parseInt(m.group(1));    if (m.group(2).length() == 0) {      patch.start1--;      patch.length1=1;    } else     if (m.group(2).equals("0")) {      patch.length1=0;    } else {      patch.start1--;      patch.length1=Integer.parseInt(m.group(2));    }    patch.start2=Integer.parseInt(m.group(3));    if (m.group(4).length() == 0) {      patch.start2--;      patch.length2=1;    } else     if (m.group(4).equals("0")) {      patch.length2=0;    } else {      patch.start2--;      patch.length2=Integer.parseInt(m.group(4));    }    text.removeFirst();    while (!text.isEmpty()) {      try {        sign=text.getFirst().charAt(0);      } catch (      IndexOutOfBoundsException e) {        text.removeFirst();        continue;      }      line=text.getFirst().substring(1);      line=line.replace("+","%2B");      try {        line=URLDecoder.decode(line,"UTF-8");      } catch (      UnsupportedEncodingException e) {        throw new Error("This system does not support UTF-8.",e);      }catch (      IllegalArgumentException e) {        throw new IllegalArgumentException("Illegal escape in patch_fromText: " + line,e);      }      if (sign == '-') {        patch.diffs.add(new Diff(Operation.DELETE,line));      } else       if (sign == '+') {        patch.diffs.add(new Diff(Operation.INSERT,line));      } else       if (sign == ' ') {        patch.diffs.add(new Diff(Operation.EQUAL,line));      } else       if (sign == '@') {        break;      } else {        throw new IllegalArgumentException("Invalid patch mode '" + sign + "' in: "+ line);      }      text.removeFirst();    }  }  return patches;}  }
class C{  private LogRecordWithInputStream nextLogRecord() throws IOException {  return nextLogRecord(reader);}  }
class C{  private Method findFromStringMethod(Class<?> cls,String methodName){  Method m;  try {    m=cls.getMethod(methodName,String.class);  } catch (  NoSuchMethodException ex) {    try {      m=cls.getMethod(methodName,CharSequence.class);    } catch (    NoSuchMethodException ex2) {      throw new IllegalArgumentException("Method not found",ex2);    }  }  if (Modifier.isStatic(m.getModifiers()) == false) {    throw new IllegalArgumentException("Method must be static: " + methodName);  }  return m;}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  protected void addSuperScopePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ExecutionScope_superScope_feature"),getString("_UI_PropertyDescriptor_description","_UI_ExecutionScope_superScope_feature","_UI_ExecutionScope_type"),SexecPackage.Literals.EXECUTION_SCOPE__SUPER_SCOPE,true,false,true,null,null,null));}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public IntList(int capacity){  array=new int[capacity];  end=0;}  }
class C{  protected void sequence_DefaultImportSpecifier(ISerializationContext context,DefaultImportSpecifier semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.NAMED_IMPORT_SPECIFIER__IMPORTED_ELEMENT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.NAMED_IMPORT_SPECIFIER__IMPORTED_ELEMENT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getDefaultImportSpecifierAccess().getImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1(),semanticObject.getImportedElement());  feeder.finish();}  }
class C{  public void createSubUsageScenario01() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.hoursToMillis(100.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO01_PERUNIT_HOUR",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_HOUR_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO01_PERUNIT_HOUR",serviceDetails,basicSetup.getSecondCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.hoursToMillis(150.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO01_PERUNIT_HOUR",subDetails);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.validation.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public Exchange aggregate(Exchange oldExchange,Exchange newExchange){  if (oldExchange == null) {    return newExchange;  }  String oldBody=oldExchange.getIn().getBody(String.class);  String newBody=newExchange.getIn().getBody(String.class);  String body=oldBody + newBody;  oldExchange.getIn().setBody(body);  return oldExchange;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Double keywordsThreshold(){  return keywordsThreshold;}  }
class C{  public static boolean testCircleTriangle(Vector2fc center,float radiusSquared,Vector2fc v0,Vector2fc v1,Vector2fc v2){  return testCircleTriangle(center.x(),center.y(),radiusSquared,v0.x(),v0.y(),v1.x(),v1.y(),v2.x(),v2.y());}  }
class C{  public MRoleTest(String name){  super(name);}  }
class C{  private void checkPaint(Paint paint){  if (paint instanceof Color) {    if (((Color)paint).getAlpha() < 255) {      mHasNonSolidColors=true;    }  } else {    mHasNonSolidColors=true;  }}  }
class C{  public static double lambTsfn(double phi,double sinphi,double e){  sinphi*=e;  return Math.tan((MoreMath.HALF_PI - phi) * 0.5d) * Math.pow((1.d + sinphi) / (1.d - sinphi),0.5d * e);}  }
class C{  private void flushBigram(){  clearAttributes();  char termBuffer[]=termAtt.resizeBuffer(4);  int len1=Character.toChars(buffer[index],termBuffer,0);  int len2=len1 + Character.toChars(buffer[index + 1],termBuffer,len1);  termAtt.setLength(len2);  offsetAtt.setOffset(startOffset[index],endOffset[index + 1]);  typeAtt.setType(DOUBLE_TYPE);  if (outputUnigrams) {    posIncAtt.setPositionIncrement(0);    posLengthAtt.setPositionLength(2);  }  index++;}  }
class C{  public void endRegisterUpdate(){  repaint();}  }
class C{  public Comparable<?> next(){  if (!hasNext()) {    throw new NoSuchElementException();  }  Comparable<?> value=get(col,row);  if (++col >= getColumnCount()) {    col=0;    ++row;  }  return value;}  }
class C{  public static byte[] flattenBitmap(Bitmap bitmap){  int size=bitmap.getWidth() * bitmap.getHeight() * 4;  ByteArrayOutputStream out=new ByteArrayOutputStream(size);  try {    bitmap.compress(Bitmap.CompressFormat.PNG,100,out);    out.flush();    out.close();    return out.toByteArray();  } catch (  IOException e) {    Log.w(TAG,"Could not write bitmap");    return null;  }}  }
class C{  public static CCMenuItem item(Object target,String selector){  return new CCMenuItem(target,selector);}  }
class C{  private void decodeChannelMap(int[][] layoutMap,int layoutMapOffset,int type,int n){  while (n-- != 0) {    int synEle;switch (type) {case AAC_CHANNEL_FRONT:case AAC_CHANNEL_BACK:case AAC_CHANNEL_SIDE:      synEle=br.read1();    break;case AAC_CHANNEL_CC:  br.skip(1);synEle=TYPE_CCE;break;case AAC_CHANNEL_LFE:synEle=TYPE_LFE;break;default :log.error(String.format("decodeChannelMap invalid type %d",type));return;}layoutMap[layoutMapOffset][0]=synEle;layoutMap[layoutMapOffset][1]=br.read(4);layoutMap[layoutMapOffset][2]=type;layoutMapOffset++;}}  }
class C{  public Builder(Im im){  super(im);  type=im.type;}  }
class C{  public void addRow(double[] value,double prob){  addRow(ValueFactory.create(value),prob);}  }
class C{  public NotificationChain basicSetReturnTypeRef(TypeRef newReturnTypeRef,NotificationChain msgs){  TypeRef oldReturnTypeRef=returnTypeRef;  returnTypeRef=newReturnTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FUNCTION_DEFINITION__RETURN_TYPE_REF,oldReturnTypeRef,newReturnTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isreportlinestyle(){  Object oo=get_Value(COLUMNNAME_reportlinestyle);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DERSequence(ASN1EncodableVector v){  super(v);}  }
class C{  public boolean isGlobalProgrammerAvailable(){  return checkGlobalProgrammerAvailable(tc);}  }
class C{  public UserActiveException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public URI peekLastKnownId(){  if (_lastKnownUserIds.isEmpty()) {    return null;  } else {    return URI.create(_lastKnownUserIds.iterator().next());  }}  }
class C{  private static <T>void addPluginIfLoaded(final IPluginRegistry<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> registry,final DefaultListModel<PluginItem<T>> model,final long guid,final List<com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T>> added){  for (  final com.google.security.zynamics.binnavi.api2.plugins.IPlugin<T> plugin : registry) {    if (guid == plugin.getGuid()) {      model.addElement(new PluginItem<T>(plugin));      added.add(plugin);    }  }}  }
class C{  public CSpecialInstruction(final ITypeDescription specialityType,final INaviInstruction instruction){  m_specialityType=specialityType;  m_instruction=instruction;}  }
class C{  private void initializeFocusManager(){  if (mFocusManager != null) {    mFocusManager.removeMessages();  } else {    mMirror=isCameraFrontFacing();    String[] defaultFocusModesStrings=mActivity.getResources().getStringArray(R.array.pref_camera_focusmode_default_array);    ArrayList<CameraCapabilities.FocusMode> defaultFocusModes=new ArrayList<CameraCapabilities.FocusMode>();    CameraCapabilities.Stringifier stringifier=mCameraCapabilities.getStringifier();    for (    String modeString : defaultFocusModesStrings) {      CameraCapabilities.FocusMode mode=stringifier.focusModeFromString(modeString);      if (mode != null) {        defaultFocusModes.add(mode);      }    }    mFocusManager=new FocusOverlayManager(mAppController,defaultFocusModes,mCameraCapabilities,this,mMirror,mActivity.getMainLooper(),mUI.getFocusRing());    mMotionManager=getServices().getMotionManager();    if (mMotionManager != null) {      mMotionManager.addListener(mFocusManager);    }  }  mAppController.addPreviewAreaSizeChangedListener(mFocusManager);}  }
class C{  public void connectionClosed(boolean forced){  try {    tradingdayPanel.setConnected(false);    contractPanel.setConnected(false);    if (forced) {      if (!m_brokerModel.isConnected()) {        doConnect();      }    } else {      this.setBrokerModel(BrokerModel._brokerTest);      this.setBrokerMenu(BrokerModel._brokerTest);      this.setStatusBarMessage("Connected to Broker was closed.",BasePanel.INFORMATION);    }  } catch (  Exception ex) {    this.setErrorMessage("Error finding connection closed.",ex.getMessage(),ex);  }}  }
class C{  public void addLabel(Label label){  addRepeatingExtension(label);}  }
class C{  public boolean isAllowAnyOui(){  return allowAnyOui;}  }
class C{  protected void firePostPaint(Graphics2D g){  if (m_painters != null && m_painters.size() > 0) {    Object[] lstnrs=m_painters.getArray();    for (int i=0; i < lstnrs.length; ++i) {      try {        ((PaintListener)lstnrs[i]).postPaint(this,g);      } catch (      Exception e) {        s_logger.warning("Exception thrown by PaintListener: " + e + "\n"+ StringLib.getStackTrace(e));      }    }  }}  }
class C{  public void removeCmrRepositoryChangeListener(CmrRepositoryChangeListener cmrRepositoryChangeListener){synchronized (cmrRepositoryChangeListeners) {    cmrRepositoryChangeListeners.remove(cmrRepositoryChangeListener);  }}  }
class C{  public void test_rangeQuery_staticPartitions_unbounded_1entry_2partitions_01() throws IOException {  final String name="testIndex";  final IndexMetadata metadata=new IndexMetadata(name,UUID.randomUUID());  fed.registerIndex(metadata,new byte[][]{new byte[]{},new byte[]{5}},new UUID[]{dataService0.getServiceUUID(),dataService1.getServiceUUID()});  final IIndex ndx=fed.getIndex(name,ITx.UNISOLATED);  ndx.insert(new byte[]{1},new byte[]{1});{    final ITupleIterator itr=ndx.rangeIterator(null,null);    assertTrue("hasNext",itr.hasNext());    final ITuple tuple=itr.next();    assertEquals("getKey()",new byte[]{1},tuple.getKey());    assertEquals("getValue()",new byte[]{1},tuple.getValue());    assertFalse("hasNext",itr.hasNext());  }}  }
class C{  public static boolean isGenerated(Class<?> c){  return proxyMap.containsKey(c);}  }
class C{  private void key(byte key[]){  int i;  int koffp[]={0};  int lr[]={0,0};  int plen=P.length, slen=S.length;  for (i=0; i < plen; i++) {    P[i]=P[i] ^ streamtoword(key,koffp);  }  for (i=0; i < plen; i+=2) {    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  public void moveForward(double units){  mTempVec.setAll(WorldParameters.FORWARD_AXIS);  mTempVec.rotateBy(mOrientation).normalize();  mTempVec.multiply(units);  mPosition.add(mTempVec);  if (mLookAtEnabled && mLookAtValid) {    mLookAt.add(mTempVec);    resetToLookAt();  }  markModelMatrixDirty();}  }
class C{  protected void initInfo(){  initInfo(0,"",m_M_Warehouse_ID,m_M_PriceList_ID,true);}  }
class C{  public IdentifiableLanguage(final String language){  this.language=language;  name=null;}  }
class C{  public StandardEntityCollection(){  this.entities=new java.util.ArrayList();}  }
class C{  private void initHandshaker(){switch (connectionState) {case cs_START:case cs_DATA:    break;case cs_HANDSHAKE:case cs_RENEGOTIATE:  return;default :throw new IllegalStateException("Internal error");}if (connectionState == cs_START) {connectionState=cs_HANDSHAKE;} else {connectionState=cs_RENEGOTIATE;}if (roleIsServer) {handshaker=new ServerHandshaker(this,sslContext,enabledProtocols,doClientAuth,protocolVersion,connectionState == cs_HANDSHAKE,secureRenegotiation,clientVerifyData,serverVerifyData);handshaker.setSNIMatchers(sniMatchers);handshaker.setUseCipherSuitesOrder(preferLocalCipherSuites);} else {handshaker=new ClientHandshaker(this,sslContext,enabledProtocols,protocolVersion,connectionState == cs_HANDSHAKE,secureRenegotiation,clientVerifyData,serverVerifyData);handshaker.setSNIServerNames(serverNames);}handshaker.setEnabledCipherSuites(enabledCipherSuites);handshaker.setEnableSessionCreation(enableSessionCreation);}  }
class C{  public int activeCount(){  int count=numThreads;synchronized (this.childrenGroupsLock) {    for (int i=0; i < numGroups; i++) {      count+=this.childrenGroups[i].activeCount();    }  }  return count;}  }
class C{  public void removeEntry(String entryName){  mNamedGestures.remove(entryName);  mClassifier.removeInstances(entryName);  mChanged=true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void step(){  for (  Layout<V,E> layout : layouts.keySet()) {    if (layout instanceof IterativeContext) {      IterativeContext context=(IterativeContext)layout;      if (context.done() == false) {        context.step();      }    }  }  if (delegate instanceof IterativeContext) {    IterativeContext context=(IterativeContext)delegate;    if (context.done() == false) {      context.step();    }  }}  }
class C{  public void destroy(){  log.fine("");}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  public void updateFilterResults(final TransactionBase tx,final VisibilityBindingSet childBindingSet,final FilterMetadata filterMetadata) throws Exception {  checkNotNull(tx);  checkNotNull(childBindingSet);  checkNotNull(filterMetadata);  final String sparql=filterMetadata.getOriginalSparql();  final int indexWithinQuery=filterMetadata.getFilterIndexWithinSparql();  final Optional<Filter> filter=filterFinder.findFilter(sparql,indexWithinQuery);  final ValueExpr condition=filter.get().getCondition();  if (isTrue(condition,childBindingSet)) {    final VariableOrder filterVarOrder=filterMetadata.getVariableOrder();    final MapBindingSet filterBindingSet=new MapBindingSet();    for (    final String bindingName : filterVarOrder) {      if (childBindingSet.hasBinding(bindingName)) {        final Binding binding=childBindingSet.getBinding(bindingName);        filterBindingSet.addBinding(binding);      }    }    final String filterBindingSetIdString=ID_CONVERTER.convert(filterBindingSet,filterVarOrder);    String filterBindingSetValueString="";    filterBindingSetValueString=VALUE_CONVERTER.convert(childBindingSet,filterVarOrder);    final String row=filterMetadata.getNodeId() + NODEID_BS_DELIM + filterBindingSetIdString;    final Column col=FluoQueryColumns.FILTER_BINDING_SET;    final String value=filterBindingSetValueString;    tx.set(row,col,value);  }}  }
class C{  @Override public E readLine() throws IOException {  E line;  try {    line=this.reader.readLine();  } catch (  IOException oldError) {    throw wrapIOException(oldError);  }  ++this.lineNumber;  return line;}  }
class C{  @Override public MovePath clone(){  final MovePath copy=new MovePath(getGame(),getEntity());  copy.steps=new Vector<MoveStep>(steps);  copy.careful=careful;  return copy;}  }
class C{  protected AbstractElement(String name,AbstractDocument owner){  ownerDocument=owner;  if (owner.getStrictErrorChecking() && !DOMUtilities.isValidName(name)) {    throw createDOMException(DOMException.INVALID_CHARACTER_ERR,"xml.name",new Object[]{name});  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void close() throws IOException {  if (_acceptable) {    throw new IOException("You must call the accept() method of the DccChat request before you can use it.");  }  _socket.close();}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  public void testSeekBadNonZeroFirst() throws Exception {  File logDir=prepareLogDir("testSeekGoodNonZeroFirst");  DiskLog log=openLog(logDir,false);  log.setTimeoutMillis(1000);  LogConnection conn=log.connect(true);  assertTrue("Seeking future event that will not exist",conn.seek(9));  writeEventsToLog(log,10,1);  try {    THLEvent e=conn.next();    throw new Exception("Able to seek and read non-existent position in empty log: " + e);  } catch (  LogPositionException e) {    logger.info("Received expected exception");  }  conn.release();  log.release();}  }
class C{  private double calculateTreeProbabilityLogRecursive(Tree tree,NodeRef node){  double prob=0.0;  NodeRef leftChild=tree.getChild(node,0);  NodeRef rightChild=tree.getChild(node,1);  if (tree.isExternal(leftChild) && tree.isExternal(rightChild)) {    return 0.0;  } else   if (!tree.isExternal(leftChild) && !tree.isExternal(rightChild)) {    Clade leftSubclade=getClade(tree,leftChild);    Clade rightSubclade=getClade(tree,rightChild);    double sum=0.0;    if (cladeProbabilities.containsKey(leftSubclade.getBits())) {      sum+=(cladeProbabilities.get(leftSubclade.getBits()).getSampleCount() + EPSILON) / samples;    } else {      sum+=EPSILON / samples;    }    if (cladeProbabilities.containsKey(rightSubclade.getBits())) {      sum+=(cladeProbabilities.get(rightSubclade.getBits()).getSampleCount() + EPSILON) / samples;    } else {      sum+=EPSILON / samples;    }    prob+=Math.log(sum / 2.0);    prob+=calculateTreeProbabilityLogRecursive(tree,leftChild);    prob+=calculateTreeProbabilityLogRecursive(tree,rightChild);    return prob;  } else {    Clade leftSubclade=getClade(tree,leftChild);    Clade rightSubclade=getClade(tree,rightChild);    double sum=0.0;    if (leftSubclade.getSize() > 1) {      if (cladeProbabilities.containsKey(leftSubclade.getBits())) {        sum+=(cladeProbabilities.get(leftSubclade.getBits()).getSampleCount() + EPSILON) / samples;      } else {        sum+=EPSILON / samples;      }    }    if (rightSubclade.getSize() > 1) {      if (cladeProbabilities.containsKey(rightSubclade.getBits())) {        sum+=(cladeProbabilities.get(rightSubclade.getBits()).getSampleCount() + EPSILON) / samples;      } else {        sum+=EPSILON / samples;      }    }    prob+=Math.log(sum);    if (!tree.isExternal(leftChild)) {      prob+=calculateTreeProbabilityLogRecursive(tree,leftChild);    }    if (!tree.isExternal(rightChild)) {      prob+=calculateTreeProbabilityLogRecursive(tree,rightChild);    }    return prob;  }}  }
class C{  private void startTempNodes() throws Exception {  for (int j=0; j < TMP_NODES_CNT; j++) {    Ignite newNode=startGrid(gridCntr++);    info("New node started: " + newNode.name());    alive.add(newNode);    newNode.events().localListen(lsnr,EventType.EVT_NODE_LEFT,EventType.EVT_NODE_FAILED);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MINIMAL_ENTITY\"";  db.execSQL(sql);}  }
class C{  public Sphere(float radius,int segmentsW,int segmentsH,boolean createTextureCoordinates,boolean createVertexColorBuffer,boolean createVBOs){  super();  mRadius=radius;  mSegmentsW=segmentsW;  mSegmentsH=segmentsH;  mCreateTextureCoords=createTextureCoordinates;  mCreateVertexColorBuffer=createVertexColorBuffer;  init(createVBOs);}  }
class C{  public static Map<List<String>,Double> updateAggregateMatrix(Map<List<String>,Double> aggregateMap,File matrix) throws IOException {  List<String> confMatrixLines=FileUtils.readLines(matrix);  StrTokenizer l=StrTokenizer.getCSVInstance(confMatrixLines.get(0));  l.setDelimiterChar(',');  String[] headline=l.getTokenArray();  for (int i=1; i < confMatrixLines.size(); i++) {    for (int j=1; j < headline.length; j++) {      StrTokenizer line=StrTokenizer.getCSVInstance(confMatrixLines.get(i));      String pred=headline[j];      line.setDelimiterChar(',');      String act=line.getTokenArray()[0];      double value=Double.valueOf(line.getTokenArray()[j]);      List<String> key=new ArrayList<String>(Arrays.asList(new String[]{pred,act}));      if (aggregateMap.get(key) != null) {        aggregateMap.put(key,aggregateMap.get(key) + value);      } else {        aggregateMap.put(key,value);      }    }  }  return aggregateMap;}  }
class C{  @Override public Object compute(ArrayList<Map<String,Object>> rows) throws Exception {  if (column.equals("*")) {    return rows.size();  }  long count=0;  for (  Map<String,Object> row : rows) {    if (row.containsKey(column) && (row.get(column) != null)) {      count++;    }  }  return count;}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof com.bbn.openmap.MapBean) {    logger.fine("ProjectionStack found a MapBean.");    setMapBean((MapBean)someObj);  }}  }
class C{  public String write(TimeZone zone){  return zone.getID();}  }
class C{  @Override public final int size(){  return (int)Math.max(tail.get() - head.get(),0);}  }
class C{  public static boolean hasUnManagedVolume(BlockObject blockObject,List<UnManagedVolume> ingestedUnManagedVolumes,DbClient dbClient){  UnManagedVolume umVolume=getUnManagedVolumeForBlockObject(blockObject,dbClient);  if (umVolume != null && !umVolume.getInactive()) {    for (    UnManagedVolume umv : ingestedUnManagedVolumes) {      if (umv.getId().equals(umVolume.getId())) {        _logger.info("Found the unmanaged volume {} in the list of ingested unmanaged volumes",umVolume.getId().toString());        return false;      }    }    return true;  }  return false;}  }
class C{  public void print(String value) throws IOException {  response.getWriter().print(value);}  }
class C{  public Authentication(@Nonnull ClientCredential credential,JsonTray parent){  if (parent != null) {    if (parent.has(credential.toString())) {      this.json=parent.getJSONObject(credential.toString());    } else {      this.json=new JSONObject();      parent.put(credential.toString(),this.json,credential.isPersistent());    }  } else   this.json=new JSONObject();  this.parent=parent;  this.credential=credential;}  }
class C{  private void handleMouseDragged(MouseEvent e){  if (this.liveHandler != null && this.liveHandler.isEnabled()) {    this.liveHandler.handleMouseDragged(this,e);  }  for (  MouseHandlerFX handler : this.auxiliaryMouseHandlers) {    if (handler.isEnabled()) {      handler.handleMouseDragged(this,e);    }  }}  }
class C{  public Color[] parseColorSection(BinaryFile binFile,RpfColortable colortable){  if (locationRecords == null)   return null;  return colortable.parseColorLookUpTable(binFile,getLocations(COLOR_LOCATION_KEY));}  }
class C{  public static ArtifactElement buildReference(String groupId,String artifactId,String version,String packaging,String classifier){  return new ArtifactElement(groupId,artifactId,version,packaging,classifier);}  }
class C{  public boolean isConnected(){  return status == ConnectionStatus.CONNECTED;}  }
class C{  protected boolean[] runBasicTest(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,int classIndex,int missingLevel,boolean predictorMissing,boolean classMissing,int numTrain,int numClasses,ArrayList<String> accepts){  boolean[] result=new boolean[2];  Instances train=null;  Associator associator=null;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,classIndex,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);    }    associator=AbstractAssociator.makeCopies(getAssociator(),1)[0];  } catch (  Exception ex) {    ex.printStackTrace();    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    associator.buildAssociations(train);    println("yes");    result[0]=true;  } catch (  Exception ex) {    boolean acceptable=false;    String msg;    if (ex.getMessage() == null) {      msg="";    } else {      msg=ex.getMessage().toLowerCase();    }    if (msg.indexOf("not in classpath") > -1) {      m_ClasspathProblems=true;    }    for (int i=0; i < accepts.size(); i++) {      if (msg.indexOf(accepts.get(i)) >= 0) {        acceptable=true;      }    }    println("no" + (acceptable ? " (OK error message)" : ""));    result[1]=acceptable;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during building");      println(": " + ex.getMessage() + "\n");      if (!acceptable) {        if (accepts.size() > 0) {          print("Error message doesn't mention ");          for (int i=0; i < accepts.size(); i++) {            if (i != 0) {              print(" or ");            }            print('"' + accepts.get(i) + '"');          }        }        println("here is the dataset:\n");        println("=== Train Dataset ===\n" + train.toString() + "\n");      }    }  }  return result;}  }
class C{  void updateActionPressed(){  if (!validateAction()) {    _editActionFrame.toFront();    return;  }  _actionTableModel.fireTableRowsUpdated(_curActionRowNumber,_curActionRowNumber);  cleanUpAction();  if (editConditionalFrame != null) {    editConditionalFrame.setVisible(true);  }}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public PartitionKeyGroup createPartitionKeyGroup(String partitionKeyGroupName){  PartitionKeyGroupCreateRequest request=createPartitionKeyGroupCreateRequest(partitionKeyGroupName);  return partitionKeyGroupService.createPartitionKeyGroup(request);}  }
class C{  public static void fillRepoLinks(final ChannelInformation channel,final List<MenuEntry> links,final String baseName,final int basePriority,final String prefix,final int priorityOffset,final LinkTarget linkTemplate){  Objects.requireNonNull(linkTemplate,"'linkTemplate' must not be null");  fillRepoLinks(channel,links,baseName,basePriority,prefix,priorityOffset,null);}  }
class C{  public static String stripUpto(String value,char c){  String result=null;  if (value != null) {    int index=value.indexOf(c);    if (index > 0) {      result=value.substring(index + 1);    }  }  return result;}  }
class C{  public int findFirstVisibleItemPosition(){  final View child=findOneVisibleChild(0,layoutManager.getChildCount(),false,true);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  private static void vecswap(byte x[],int a,int b,int n){  for (int i=0; i < n; i++, a++, b++)   swap(x,a,b);}  }
class C{  protected void diagnostics(){  if (log.isLoggable(Level.FINEST)) {    log.finest(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");    log.finest("COLLECTOR DIAGNOSTICS:");    fragmentManager.diagnostics();    log.finest("Correlation (" + correlations.size() + "): "+ correlations);    log.finest("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");  }}  }
class C{  @Override public final void createFont(final PdfObject pdfObject,final String fontID,final boolean renderPage,final ObjectStore objectStore,final Map<String,org.jpedal.fonts.glyph.PdfJavaGlyphs> substitutedFonts) throws Exception {  fontTypes=StandardFonts.TYPE3;  init(fontID,renderPage);  final PdfObject pdfFontDescriptor=pdfObject.getDictionary(PdfDictionary.FontDescriptor);  setBoundsAndMatrix(pdfObject);  setName(pdfObject);  setEncoding(pdfObject,pdfFontDescriptor);  readWidths(pdfObject,false);  readEmbeddedFont(pdfObject,objectStore);  if (renderPage) {    setFont(getBaseFontName(),1);  }}  }
class C{  public boolean isInlined(){  return (this.flags & INLINED) != 0;}  }
class C{  public static Result runCmd(String cmd) throws IOException {  return runCmd(new File(System.getProperty("user.dir")),cmd);}  }
class C{  @Override public void onImageResults(List<Face> faces,Frame image,float timeStamp){  mostRecentFrame=image;  if (faces == null) {    return;  }  performFPSCalculations();  if (faces.size() <= 0) {    drawingView.invalidatePoints();  } else   if (faces.size() == 1) {    metricViewLayout.setVisibility(View.VISIBLE);    for (    MetricDisplay metricDisplay : metricDisplays) {      updateMetricScore(metricDisplay,faces.get(0));    }    if (drawingView.getDrawPointsEnabled() || drawingView.getDrawAppearanceMarkersEnabled() || drawingView.getDrawEmojiMarkersEnabled()) {      drawingView.updatePoints(faces,mirrorPoints);    }  } else {    metricViewLayout.setVisibility(View.GONE);    drawingView.updatePoints(faces,mirrorPoints);  }}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.242 -0400",hash_original_method="9925E1DC093C6BADDE8464868171339B",hash_generated_method="AEE3041B3F1AA0AE8E9154005C96D456") @Override public Writer append(char c){  return this;}  }
class C{  private int parseLength() throws IOException {  int curLen=0;  if (dataPos == dataSize)   return curLen;  int lenByte=data[dataPos++] & 0xff;  if (isIndefinite(lenByte)) {    ndefsList.add(new Integer(dataPos));    unresolved++;    return curLen;  }  if (isLongForm(lenByte)) {    lenByte&=LEN_MASK;    if (lenByte > 4) {      throw new IOException("Too much data");    }    if ((dataSize - dataPos) < (lenByte + 1)) {      throw new IOException("Too little data");    }    for (int i=0; i < lenByte; i++) {      curLen=(curLen << 8) + (data[dataPos++] & 0xff);    }    if (curLen < 0) {      throw new IOException("Invalid length bytes");    }  } else {    curLen=(lenByte & LEN_MASK);  }  return curLen;}  }
class C{  @Override public String testDestination(Location destination,Track track){  return super.testDestination(destination,track);}  }
class C{  public static int tokenizeContent(char[] buf,int off,int end,ContentToken token) throws PartialTokenException, InvalidTokenException, EmptyTokenException, ExtensibleTokenException {  if (off == end)   throw new EmptyTokenException();switch (charType(buf[off])) {case CT_LT:    return scanLt(buf,off + 1,end,token);case CT_AMP:  return scanRef(buf,off + 1,end,token);case CT_CR:off+=1;if (off == end) throw new ExtensibleTokenException(TOK_DATA_NEWLINE);if (charType(buf[off]) == CT_LF) off+=1;token.tokenEnd=off;return TOK_DATA_NEWLINE;case CT_LF:token.tokenEnd=off + 1;return TOK_DATA_NEWLINE;case CT_RSQB:off+=1;if (off == end) throw new ExtensibleTokenException(TOK_DATA_CHARS);if (buf[off] != ']') break;off+=1;if (off == end) throw new ExtensibleTokenException(TOK_DATA_CHARS);if (buf[off] != '>') {off-=1;break;}throw new InvalidTokenException(off);case CT_NONXML:case CT_MALFORM:throw new InvalidTokenException(off);case CT_LEAD2:if (end - off < 2) throw new PartialCharException(off);check2(buf,off);off+=2;break;default :off+=1;break;}token.tokenEnd=extendData(buf,off,end);return TOK_DATA_CHARS;}  }
class C{  public void endCDATA() throws org.xml.sax.SAXException {  m_inCData=false;}  }
class C{  private void sendStageProgressPatch(State current,TaskState.TaskStage stage,TaskState.SubStage substage){  if (current.isSelfProgressionDisabled) {    return;  }  this.sendSelfPatch(buildPatch(stage,substage,null));}  }
class C{  public void appendAssignment(VariableReference receiver,Field field,VariableReference src,Field fieldSrc){  FieldReference dstFieldReference;  if (receiver == null) {    dstFieldReference=new FieldReference(tc,new GenericField(field,field.getDeclaringClass()));  } else {    dstFieldReference=new FieldReference(tc,new GenericField(field,receiver.getType()),receiver);  }  FieldReference srcFieldReference;  if (src == null) {    srcFieldReference=new FieldReference(tc,new GenericField(fieldSrc,fieldSrc.getDeclaringClass()));  } else {    srcFieldReference=new FieldReference(tc,new GenericField(fieldSrc,src.getType()),src);  }  AssignmentStatement stmt=new AssignmentStatement(tc,dstFieldReference,srcFieldReference);  tc.addStatement(stmt);}  }
class C{  public boolean isEmail(){  return is(EMAIL);}  }
class C{  ObjectStreamClass[] genDescs(){  ClassLoader ldr=ProxyClassDesc.class.getClassLoader();  Class[] ifaces=new Class[3];  Class[] a=new Class[]{A1.class,A2.class,A3.class,A4.class,A5.class};  Class[] b=new Class[]{B1.class,B2.class,B3.class,B4.class,B5.class};  Class[] c=new Class[]{C1.class,C2.class,C3.class,C4.class,C5.class};  ObjectStreamClass[] descs=new ObjectStreamClass[a.length * b.length * c.length];  int n=0;  for (int i=0; i < a.length; i++) {    ifaces[0]=a[i];    for (int j=0; j < b.length; j++) {      ifaces[1]=b[j];      for (int k=0; k < c.length; k++) {        ifaces[2]=c[k];        Class proxyClass=Proxy.getProxyClass(ldr,ifaces);        descs[n++]=ObjectStreamClass.lookup(proxyClass);      }    }  }  return descs;}  }
class C{  private static void putOutTheGarbage(long timeout){  collectGarbage(timeout);  collectGarbage(timeout);}  }
class C{  public boolean hasRenderables(){  return this.renderables != null && this.renderables.iterator().hasNext();}  }
class C{  public GroupCategorySet(GroupCategory[] categories){  Assert.isNotNull(categories);  fContent=new ArrayList(categories.length);  for (int i=0; i < categories.length; i++) {    if (!fContent.contains(categories[i]))     fContent.add(categories[i]);  }}  }
class C{  public void verifyIPsecOpAllowable(){  verifyIPsecOpAllowableOverGeo();  drUtil.verifyIPsecOpAllowableWithinDR();}  }
class C{  public boolean canProduceYeast(){  if (fluidSlot.getAmount() < consumption)   return false;  final ItemStack yeastItem=invSlot.get();  if (yeastItem != null) {    if (!canReplicateYeast(yeastItem))     return false;  }  return CoreRegistry.instance().fluidDictionary().hasFluidTags(fluidSlot.getFluid(),BoozeTag.YOUNG);}  }
class C{  private static byte[] convertDSAASN1toXMLDSIG(byte[] binaries){  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  ASN1InputStream is=null;  try {    is=new ASN1InputStream(binaries);    ASN1Sequence seq=(ASN1Sequence)is.readObject();    if (seq.size() != 2) {      throw new IllegalArgumentException("ASN1 Sequence size should be 2 !");    }    ASN1Integer r=(ASN1Integer)seq.getObjectAt(0);    ASN1Integer s=(ASN1Integer)seq.getObjectAt(1);    buffer.write(BigIntegers.asUnsignedByteArray(r.getValue()));    buffer.write(BigIntegers.asUnsignedByteArray(s.getValue()));  } catch (  Exception e) {    throw new DSSException("Unable to convert to xmlDsig : " + e.getMessage(),e);  } finally {    IOUtils.closeQuietly(is);  }  return buffer.toByteArray();}  }
class C{  void initLeafCalc(byte[] seed0){  this.i=0;  this.j=0;  byte[] dummy=new byte[mdsize];  System.arraycopy(seed0,0,dummy,0,seed.length);  this.seed=gmssRandom.nextSeed(dummy);}  }
class C{  SecurityHeaderType createSecurityHeader(){  org.oasis_open.docs.wss._2004._01.oasis_200401_wss_wssecurity_secext_1_0.ObjectFactory wsseObjFactory=new org.oasis_open.docs.wss._2004._01.oasis_200401_wss_wssecurity_secext_1_0.ObjectFactory();  SecurityHeaderType secHeader=wsseObjFactory.createSecurityHeaderType();  secHeader.getAny().add(createTimestamp());  log.debug("Security header successfully created");  return secHeader;}  }
class C{  public FreqDist(Collection<T> collection){  super();  counts=new HashMap<T,Integer>();  count(collection);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String04() throws Exception {  for (  String validValue : getValidValues()) {    TrustManagerFactory trustMF=TrustManagerFactory.getInstance(validValue,getDefaultProviderName());    assertTrue("Not TrustManagerFactory object",trustMF instanceof TrustManagerFactory);    assertEquals("Invalid algorithm",trustMF.getAlgorithm(),validValue);    assertEquals("Invalid provider",trustMF.getProvider(),getDefaultProvider());  }}  }
class C{  public void clearUndo(){  ((DataTableModel)getModel()).clearUndo();}  }
class C{  void disconnect(String invocationContext,String activityToken){  service.traceDebug(TAG,"disconnect()");  disconnected=true;  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.DISCONNECT_ACTION);  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      myClient.disconnect(invocationContext,listener);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError(MqttServiceConstants.DISCONNECT_ACTION,NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }  if (connectOptions != null && connectOptions.isCleanSession()) {    service.messageStore.clearArrivedMessages(clientHandle);  }  releaseWakeLock();}  }
class C{  public FileSMBShare(SMBFileShare smb){  this._name=smb.getName();  this._description=smb.getDescription();  this._permissionType=Enum.valueOf(PermissionType.class,smb.getPermissionType());  this._permission=Enum.valueOf(Permission.class,smb.getPermission());  this._maxUsers=smb.getMaxUsers();  this._nativeId=smb.getNativeId();  this._mountPoint=smb.getMountPoint();  this._path=smb.getPath();  this._isSubDirPath=Boolean.valueOf(smb.isSubdir());}  }
class C{  private void add(Geometry geom){  if (geom instanceof Point) {    add(geom.getCoordinate());  } else   if (geom instanceof GeometryCollection) {    GeometryCollection gc=(GeometryCollection)geom;    for (int i=0; i < gc.getNumGeometries(); i++) {      add(gc.getGeometryN(i));    }  }}  }
class C{  public boolean isFormatSupported(String mimeType){  return entries.containsKey(mimeType);}  }
class C{  public String edgeType(){  return "dir=none";}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String toString(final boolean value){  return value ? "true" : "false";}  }
class C{  @Retained public static EntryEventImpl createEntryEvent(RemoveAllEntryData entry,InternalDistributedMember sender,ClientProxyMembershipID context,DistributedRegion rgn,boolean possibleDuplicate,boolean needsRouting,Object callbackArg,boolean originRemote,boolean skipCallbacks){  final Object key=entry.getKey();  EventID evId=entry.getEventID();  @Retained EntryEventImpl ev=EntryEventImpl.create(rgn,entry.getOp(),key,null,callbackArg,originRemote,sender,!skipCallbacks,evId);  boolean returnedEv=false;  try {    if (context != null) {      ev.context=context;    }    ev.setPossibleDuplicate(possibleDuplicate);    ev.setVersionTag(entry.versionTag);    if (entry.filterRouting != null) {      InternalDistributedMember id=rgn.getMyId();      ev.setLocalFilterInfo(entry.filterRouting.getFilterInfo(id));    }    ev.setTailKey(entry.getTailKey());    returnedEv=true;    return ev;  }  finally {    if (!returnedEv) {      ev.release();    }  }}  }
class C{  private void destruct(@Nullable String spaceName){  String masked=maskNull(spaceName);  Space space=spaces.remove(masked);  if (space != null) {    try {      space.stop();    } catch (    IgniteInterruptedCheckedException e) {      U.error(log,"Interrupted.",e);    }  }}  }
class C{  @Override public void init(ServiceContext sc) throws org.apache.axis2.AxisFault {  final String methodName="init(): ";  log.info(methodName + "Entry ");  try {    log.trace(methodName + "System properties:\n" + System.getProperties());    log.info(methodName + "SOS VASA API Version = " + FaultUtil.getVasaApiVersion());    String path=System.getProperty("vasa.keystore");    log.debug(methodName + "Full path of trustStoreFileName:" + path);    String password=(String)sc.getAxisService().getParameterValue(TRUSTSTOREPASSWORD_PARAM);    if (password != null) {      trustStorePassword=password;      log.debug(methodName + "parameter: " + TRUSTSTOREPASSWORD_PARAM+ " found");    } else {      trustStorePassword=new String("");    }    contextManager=ContextManagerImpl.getInstance();    config=Config.getInstance();    sslUtil=new SSLUtil(path,trustStorePassword,false);    contextManager.init(sslUtil);    contextManager.initializeVasaProviderInfo();    log.debug(methodName + "Service life cycle initiated");    log.info(methodName + "Exit ");  } catch (  Exception e) {    log.debug("Init exception: " + e);  }}  }
class C{  private boolean mouseFurtherThan(final double delta){  if (getMousePositionOnShown() == null) {    return false;  }  return (Math.abs(getMousePositionOnShown().getSceneX() - getCurrentMousePosition().getSceneX()) > delta || Math.abs(getMousePositionOnShown().getSceneY() - getCurrentMousePosition().getSceneY()) > delta);}  }
class C{  public void fillData(int leftResId,String text){  fillData(leftResId,text,false);}  }
class C{  public void incrementProgress(){  incrementProgress(1);}  }
class C{  @Dev public PlayerHasItemWithHimCondition(final String itemName,@Dev(defaultValue="1") final int amount){  this.itemName=checkNotNull(itemName);  this.amount=amount;}  }
class C{  public synchronized void waitAllResponses(){  if (waitingCount > 0) {    isWaiting=true;    try {      startTimer();      super.wait();    } catch (    InterruptedException e) {    }  }}  }
class C{  public boolean restoreInitialCameraPosition(float dx,float dy,boolean zoom,boolean rotation){  float dyx=0;  if (!zoom)   dyx+=POSITION_DEFAULT_Y;  if ((int)mDx < (int)(POSITION_DEFAULT_X - dx))   mDx+=POSITION_MIN_TRANSLATION_DISTANCE; else   if ((int)mDx > (int)(POSITION_DEFAULT_X - dx))   mDx-=POSITION_MIN_TRANSLATION_DISTANCE;  if ((int)mDy < (int)(dyx - dy))   mDy+=POSITION_MIN_TRANSLATION_DISTANCE; else   if ((int)mDy > (int)(dyx - dy))   mDy-=POSITION_MIN_TRANSLATION_DISTANCE;  if (!zoom) {    if ((int)mCameraX < CAMERA_DEFAULT_X)     mCameraX+=CAMERA_MIN_TRANSLATION_DISTANCE; else     if ((int)mCameraX > CAMERA_DEFAULT_X)     mCameraX-=CAMERA_MIN_TRANSLATION_DISTANCE;    if ((int)mCameraY < CAMERA_DEFAULT_Y)     mCameraY+=CAMERA_MIN_TRANSLATION_DISTANCE; else     if ((int)mCameraY > CAMERA_DEFAULT_Y)     mCameraY-=CAMERA_MIN_TRANSLATION_DISTANCE;    if ((int)mCameraZ < CAMERA_DEFAULT_Z)     mCameraZ+=CAMERA_MIN_TRANSLATION_DISTANCE; else     if ((int)mCameraZ > CAMERA_DEFAULT_Z)     mCameraZ-=CAMERA_MIN_TRANSLATION_DISTANCE;  }  if (rotation) {    if ((int)mCurrentSceneAngleX < ANGLE_X) {      if ((int)mCurrentSceneAngleX > (ANGLE_X - 10f))       mSceneAngleX=CAMERA_MIN_ROTATION_DISTANCE; else       mSceneAngleX=CAMERA_MAX_ROTATION_DISTANCE;    } else     if ((int)mCurrentSceneAngleX > ANGLE_X) {      if ((int)mCurrentSceneAngleX < (ANGLE_X + 10f))       mSceneAngleX=-CAMERA_MIN_ROTATION_DISTANCE; else       mSceneAngleX=-CAMERA_MAX_ROTATION_DISTANCE;    }    if ((int)mCurrentSceneAngleY < ANGLE_Y) {      if ((int)mCurrentSceneAngleY > (ANGLE_Y - 10f))       mSceneAngleY=CAMERA_MIN_ROTATION_DISTANCE; else       mSceneAngleY=CAMERA_MAX_ROTATION_DISTANCE;    } else     if ((int)mCurrentSceneAngleY > ANGLE_Y) {      if ((int)mCurrentSceneAngleY < (ANGLE_Y + 10f))       mSceneAngleY=-CAMERA_MIN_ROTATION_DISTANCE; else       mSceneAngleY=-CAMERA_MAX_ROTATION_DISTANCE;    }  }  if (((((int)mCameraZ == CAMERA_DEFAULT_Z) && ((int)mCameraY == CAMERA_DEFAULT_Y) && ((int)mCameraX == CAMERA_DEFAULT_X)) || (zoom)) && (((int)mCurrentSceneAngleX == ANGLE_X) && ((int)mCurrentSceneAngleY == ANGLE_Y) || (!rotation)) && ((int)mDx == (int)(POSITION_DEFAULT_X - dx))&& ((int)mDy == (int)(dyx - dy)))   return true; else {    return false;  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof ClassPathResource) {    ClassPathResource otherRes=(ClassPathResource)obj;    return (this.path.equals(otherRes.path) && ObjectUtils.nullSafeEquals(this.classLoader,otherRes.classLoader) && ObjectUtils.nullSafeEquals(this.clazz,otherRes.clazz));  }  return false;}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,"|");  String nextToken=tokenizer.nextToken();  ver=nextToken.substring(1,nextToken.length() - 1);  try {    numflds=Integer.parseInt(tokenizer.nextToken());  } catch (  Exception e) {  }  for (int i=0; i < numflds; i++) {    FFldDef ffldDef=new FFldDef(tokenizer);    flddefs.put(new Integer(ffldDef.getId()),ffldDef);  }}  }
class C{  public static void initPlatformPrefix(String classToTest,String prefix){  if (!ourPlatformPrefixInitialized) {    ourPlatformPrefixInitialized=true;    boolean isUltimate=true;    try {      PlatformTestCase.class.getClassLoader().loadClass(classToTest);    } catch (    ClassNotFoundException e) {      isUltimate=false;    }    if (!isUltimate) {      setPlatformPrefix(prefix);    }  }}  }
class C{  public void testCopyAutomation(){  AutomationManager manager=AutomationManager.instance();  Assert.assertNotNull("test creation",manager);  Automation automation=manager.newAutomation("TestAutomation");  automation.setComment("test comment for automation");  Assert.assertEquals(1,manager.getSize());  AutomationItem item1=automation.addItem();  item1.setAction(new BuildTrainAction());  item1.setTrain(new Train("trainId","trainName1"));  item1.setMessage("item1 OK message");  item1.setMessageFail("item1 fail message");  item1.setHaltFailureEnabled(false);  AutomationItem item2=automation.addItem();  item2.setAction(new GotoAction());  item2.setGotoAutomationItem(item1);  AutomationItem item3=automation.addItem();  item3.setAction(new MoveTrainAction());  item3.setTrain(new Train("trainId","trainName2"));  item3.setRouteLocation(new RouteLocation("id",new Location("id","testLocationName")));  AutomationItem item4=automation.addItem();  item4.setAction(new ActivateTimetableAction());  TrainSchedule trainSchedule=TrainScheduleManager.instance().newSchedule("train schedule name");  item4.setOther(trainSchedule);  AutomationItem item5=automation.addItem();  item5.setAction(new RunAutomationAction());  Automation automationToRun=manager.newAutomation("TestAutomation2");  item5.setOther(automationToRun);  item5.setMessage("item5 OK message");  item5.setMessageFail("item5 fail message");  item5.setHaltFailureEnabled(false);  Automation copy=manager.copyAutomation(automation,"Copy");  Assert.assertNotNull("test automation creation",copy);  Assert.assertEquals("The number of automations",3,manager.getSize());  Assert.assertEquals("The number of items",5,copy.getSize());  Assert.assertEquals(copy.getComment(),automation.getComment());  AutomationItem copyItem1=copy.getItemBySequenceId(1);  Assert.assertEquals("1st item is build train",copyItem1.getActionName(),item1.getActionName());  Assert.assertNotNull(copyItem1.getTrain());  Assert.assertNull(copyItem1.getGotoAutomationItem());  Assert.assertNull(copyItem1.getTrainSchedule());  Assert.assertNull(copyItem1.getRouteLocation());  Assert.assertEquals(copyItem1.getTrain(),item1.getTrain());  Assert.assertEquals("item1 OK message",copyItem1.getMessage());  Assert.assertEquals("item1 fail message",copyItem1.getMessageFail());  Assert.assertNull(copyItem1.getAutomationToRun());  Assert.assertFalse(copyItem1.isHaltFailureEnabled());  AutomationItem copyItem2=copy.getItemBySequenceId(2);  Assert.assertEquals("2nd item is goto",copyItem2.getActionName(),item2.getActionName());  Assert.assertNull(copyItem2.getTrain());  Assert.assertNotNull(copyItem2.getGotoAutomationItem());  Assert.assertNull(copyItem2.getTrainSchedule());  Assert.assertNull(copyItem2.getRouteLocation());  Assert.assertEquals(copyItem2.getGotoAutomationItem().getActionName(),item2.getGotoAutomationItem().getActionName());  Assert.assertNull(copyItem2.getAutomationToRun());  Assert.assertEquals("",copyItem2.getMessage());  Assert.assertEquals("",copyItem2.getMessageFail());  Assert.assertTrue(copyItem2.isHaltFailureEnabled());  AutomationItem copyItem3=copy.getItemBySequenceId(3);  Assert.assertEquals("3rd item is move train",copyItem3.getActionName(),item3.getActionName());  Assert.assertNotNull(copyItem3.getTrain());  Assert.assertNull(copyItem3.getGotoAutomationItem());  Assert.assertNull(copyItem3.getTrainSchedule());  Assert.assertNotNull(copyItem3.getRouteLocation());  Assert.assertEquals(copyItem3.getTrain(),item3.getTrain());  Assert.assertEquals(copyItem3.getRouteLocation(),item3.getRouteLocation());  Assert.assertNull(copyItem3.getAutomationToRun());  Assert.assertEquals("",copyItem3.getMessage());  Assert.assertEquals("",copyItem3.getMessageFail());  Assert.assertTrue(copyItem3.isHaltFailureEnabled());  AutomationItem copyItem4=copy.getItemBySequenceId(4);  Assert.assertEquals("4th item is activate train schedule",copyItem4.getActionName(),item4.getActionName());  Assert.assertNull(copyItem4.getTrain());  Assert.assertNull(copyItem4.getGotoAutomationItem());  Assert.assertNull(copyItem4.getRouteLocation());  Assert.assertNotNull(copyItem4.getTrainSchedule());  Assert.assertEquals(trainSchedule,copyItem4.getTrainSchedule());  Assert.assertNull(copyItem4.getAutomationToRun());  Assert.assertEquals("",copyItem4.getMessage());  Assert.assertEquals("",copyItem4.getMessageFail());  Assert.assertTrue(copyItem4.isHaltFailureEnabled());  AutomationItem copyItem5=copy.getItemBySequenceId(5);  Assert.assertEquals("5th item is run automation",copyItem5.getActionName(),item5.getActionName());  Assert.assertNull(copyItem5.getTrain());  Assert.assertNull(copyItem5.getGotoAutomationItem());  Assert.assertNull(copyItem5.getRouteLocation());  Assert.assertNull(copyItem5.getTrainSchedule());  Assert.assertNotNull(copyItem5.getAutomationToRun());  Assert.assertEquals(automationToRun,copyItem5.getAutomationToRun());  Assert.assertEquals("item5 OK message",copyItem5.getMessage());  Assert.assertEquals("item5 fail message",copyItem5.getMessageFail());  Assert.assertFalse(copyItem5.isHaltFailureEnabled());}  }
class C{  public NotificationChain basicSetArgs(ActionArguments newArgs,NotificationChain msgs){  ActionArguments oldArgs=args;  args=newArgs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.SDEFINITION__ARGS,oldArgs,newArgs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void createDictionaryCacheForGivenType(CacheType cacheType,String carbonStorePath){  Cache cacheObject=null;  if (cacheType.equals(CacheType.REVERSE_DICTIONARY)) {    cacheObject=new ReverseDictionaryCache<DictionaryColumnUniqueIdentifier,Dictionary>(carbonStorePath,cacheTypeToLRUCacheMap.get(cacheType));  } else   if (cacheType.equals(CacheType.FORWARD_DICTIONARY)) {    cacheObject=new ForwardDictionaryCache<DictionaryColumnUniqueIdentifier,Dictionary>(carbonStorePath,cacheTypeToLRUCacheMap.get(cacheType));  }  cacheTypeToCacheMap.put(cacheType,cacheObject);}  }
class C{  public void testLocalLoadClient() throws Exception {  cacheMode=CacheMode.LOCAL;  factory=new Factory3();  startGrids(2);  Ignite client=startGrid("client-1");  IgniteCache cache=client.cache(CACHE_NAME);  cache.loadCache(null);  assertEquals(10,cache.localSize(CachePeekMode.ALL));  assertEquals(0,grid(0).cache(CACHE_NAME).localSize(CachePeekMode.ALL));  assertEquals(0,grid(1).cache(CACHE_NAME).localSize(CachePeekMode.ALL));  assert loadedFromClient;}  }
class C{  public T caseN4MethodDeclaration(N4MethodDeclaration object){  return null;}  }
class C{  public static void playArtist(final Context context,final long artistId,int position){  final long[] artistList=getSongListForArtist(context,artistId);  if (artistList != null) {    playAll(artistList,position,false);  }}  }
class C{  public static boolean isNumericType(PsiElementFactory factory,PsiType type){  if (isPrimitiveType(type)) {    String s=type.getCanonicalText();    return "byte".equals(s) || "double".equals(s) || "float".equals(s)|| "int".equals(s)|| "long".equals(s)|| "short".equals(s);  } else {    return isTypeOf(factory,type,"java.lang.Number");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void unlink(Node<E> p,Node<E> trail){  p.item=null;  trail.next=p.next;  if (last == p)   last=trail;  if (count.getAndDecrement() == capacity)   notFull.signal();}  }
class C{  public @Test final void testAddUsers(){  Role role=new Role(TEST_ROLE);  User user=new User(TEST_ROLE);  role.addUser(user);  assertThat(role.getUsers()).hasSize(1);  assertThat(role.getUsers()).contains(user);}  }
class C{  public static void enterMethod(int globalMethodId){  final Thread ct=Thread.currentThread();  if (ct == Agent.server || Thread.holdsLock(rl) || Thread.holdsLock(globalLock) || ct.getThreadGroup() == systemThreadGroup || ct == Transformer.transformerThread) {    return;  }  if (!enabled) {    return;  }synchronized (globalLock) {    int sessionIdOfMethod=globalMethodId >> 16;    if (sessionIdOfMethod != sessionId) {      return;    }    int mid=globalMethodId & 0xffff;    ThreadProfiler ti=null;synchronized (rl) {      ti=globalThreadInfos.get(ct);      if (ti == null) {        ti=new ThreadProfiler();        globalThreadInfos.put(ct,ti);      }    }    ti.enter0(globalMethods[mid]);  }}  }
class C{  public String toName(cp_info constant_pool[]){  CONSTANT_Utf8_info ci;  ci=(CONSTANT_Utf8_info)(constant_pool[name_index]);  return ci.convert();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static DispatchService newService(){  return new DispatchServiceImpl();}  }
class C{  public void remove(int amount){  int size=stack.size();  for (int i=size - 1; i > size - 1 - amount; i--) {    popWithMessage(i);  }}  }
class C{  @Override public Iterable<Vertex> vertices(){  try {    final String queryStr=toQueryStr(VERTEX);    return graph.getVertices(queryStr,true);  } catch (  RuntimeException ex) {    throw ex;  }catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  private boolean compareAndIncrementWorkerCount(int expect){  return ctl.compareAndSet(expect,expect + 1);}  }
class C{  public static Scope fromOrdinal(int ordinal){  return VALUES[ordinal];}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:05.839 -0500",hash_original_method="56A64FBC0E40A49398895D90D31F38E3",hash_generated_method="779C3A233A5833DCABF81EFED0688FA6") public static final double nextDouble(double value){  if (value == Double.POSITIVE_INFINITY) {    return value;  }  long bits;  if (value == 0) {    bits=0;  } else {    bits=Double.doubleToLongBits(value);  }  return Double.longBitsToDouble(value < 0 ? bits - 1 : bits + 1);}  }
class C{  public Hours toStandardHours(){  return Hours.hours(FieldUtils.safeMultiply(getValue(),DateTimeConstants.HOURS_PER_WEEK));}  }
class C{  public static void savePng(Bitmap src,String fileName) throws ImageSaveException {  save(src,fileName,Bitmap.CompressFormat.PNG,100);}  }
class C{  @HLEFunction(nid=0xE08BDAC1,version=150) public int sceNetAdhocPtpListen(pspNetMacAddress srcMacAddress,int srcPort,int bufSize,int retryDelay,int retryCount,int queue,int unk1){  checkInitialized();  PtpObject ptpObject=getNetworkAdapter().createPtpObject();  ptpObject.setMacAddress(srcMacAddress);  ptpObject.setPort(srcPort);  ptpObject.setBufSize(bufSize);  ptpObject.setRetryDelay(retryDelay);  ptpObject.setRetryCount(retryCount);  ptpObject.setQueue(queue);  int result=ptpObject.listen();  if (result != 0) {    ptpObject.delete();    return result;  }  ptpObjects.put(ptpObject.getId(),ptpObject);  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetAdhocPtpListen: returning id=0x%X",ptpObject.getId()));  }  return ptpObject.getId();}  }
class C{  @Override public synchronized void onConditionsReceived(Condition[] conditions) throws RemoteException {  mEndTime=parseEndTime(conditions[0].id);  notify();}  }
class C{  public String completeIt(){  log.info("completeIt - " + toString());  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  approveIt();  MJournal[] journals=getJournals(true);  BigDecimal TotalDr=Env.ZERO;  BigDecimal TotalCr=Env.ZERO;  for (int i=0; i < journals.length; i++) {    MJournal journal=journals[i];    if (!journal.isActive()) {      journal.setProcessed(true);      journal.setDocStatus(DOCSTATUS_Voided);      journal.setDocAction(DOCACTION_None);      journal.saveEx();      continue;    }    if (DOCSTATUS_Closed.equals(journal.getDocStatus()) || DOCSTATUS_Voided.equals(journal.getDocStatus()) || DOCSTATUS_Reversed.equals(journal.getDocStatus())|| DOCSTATUS_Completed.equals(journal.getDocStatus()))     ; else {      journal.processIt(DocAction.ACTION_Complete);      journal.saveEx();      if (!DocAction.STATUS_Completed.equals(journal.getDocStatus())) {        m_processMsg=journal.getProcessMsg();        return journal.getDocStatus();      }    }    TotalDr=TotalDr.add(journal.getTotalDr());    TotalCr=TotalCr.add(journal.getTotalCr());  }  setTotalDr(TotalDr);  setTotalCr(TotalCr);  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setDefiniteDocumentNo();  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  public void extract(InputStream warStream) throws IOException {  if (warStream == null)   throw new IllegalArgumentException("No war file found");  File jettyDir=getJettyInstallDir();  if (jettyDir == null) {    throw new IllegalStateException(getString(R.string.jettyNotInstalled));  }  File webappsDir=new File(jettyDir,"webapps");  if (!webappsDir.exists()) {    throw new IllegalStateException(getString(R.string.jettyNotInstalled));  }  File webapp=new File(webappsDir,"console");  JarInputStream jin=new JarInputStream(warStream);  JarEntry entry;  while ((entry=jin.getNextJarEntry()) != null) {    String entryName=entry.getName();    File file=new File(webapp,entryName);    if (entry.isDirectory()) {      if (!file.exists())       file.mkdirs();    } else {      File dir=new File(file.getParent());      if (!dir.exists())       dir.mkdirs();      FileOutputStream fout=null;      try {        fout=new FileOutputStream(file);        IO.copy(jin,fout);      }  finally {        IO.close(fout);      }      if (entry.getTime() >= 0)       file.setLastModified(entry.getTime());    }  }  IO.close(jin);}  }
class C{  public void closeContext(){  try {    if (context != null) {      context.close();    }  } catch (  Throwable t) {    getLog().warn("Failed to close InitialContext used to get a UserTransaction.",t);  }  context=null;}  }
class C{  private void writeUpdatedDeviceToStorage(Device device){  try {    cntDeviceStrored.increment();    DeviceSyncRepresentation storeDevice=new DeviceSyncRepresentation(device);    storeClient.put(storeDevice.getKey(),storeDevice);  } catch (  ObsoleteVersionException e) {  }catch (  SyncException e) {    cntSyncException.increment();    logger.error("Could not write device " + device + " to sync store:",e);  }catch (  Exception e) {    logger.error("Count not write device to sync storage " + e.getMessage());  }}  }
class C{  public ModbusSerialTransaction(ModbusRequest request){  setRequest(request);}  }
class C{  @Override public void doTests(){  println("OptionHandler: " + m_OptionHandler.getClass().getName() + "\n");  if (getDebug()) {    println("--> Info");    print("Default options: ");    println(printOptions(getDefaultOptions()));    print("User options: ");    println(printOptions(getUserOptions()));  }  println("--> Tests");  m_Success=checkListOptions();  if (m_Success) {    m_Success=checkSetOptions();  }  if (m_Success) {    m_Success=checkDefaultOptions();  }  if (m_Success) {    m_Success=checkRemainingOptions();  }  if (m_Success) {    m_Success=checkCanonicalUserOptions();  }  if (m_Success) {    m_Success=checkResettingOptions();  }}  }
class C{  final boolean isShared(){  return nextWaiter == SHARED;}  }
class C{  public boolean createFlexibleVolume(String containingAggrName,String path,String size,String spaceReserve,String permission){  NaElement elem=new NaElement("volume-create");  elem.addNewChild("volume",name);  if (containingAggrName != null && !containingAggrName.isEmpty()) {    elem.addNewChild("containing-aggr-name",containingAggrName);  }  if (size != null && !size.isEmpty()) {    elem.addNewChild("size",size);  }  if (path != null && !path.isEmpty()) {    elem.addNewChild("junction-path",path);  }  if (spaceReserve != null && !spaceReserve.isEmpty()) {    elem.addNewChild("space-reserve",spaceReserve);  }  if (permission != null && !permission.isEmpty()) {    elem.addNewChild("unix-permissions",permission);  }  try {    server.invokeElem(elem);  } catch (  Exception e) {    String msg="Failed to create new volume: " + name;    log.error(msg,e);    throw new NetAppCException(msg,e);  }  return true;}  }
class C{  public Javac(CtClass thisClass){  this(new Bytecode(thisClass.getClassFile2().getConstPool(),0,0),thisClass);}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  public Stream<Result> stream(){  return StreamSupport.stream(Spliterators.spliteratorUnknownSize(iterator(),Spliterator.IMMUTABLE | Spliterator.SIZED),false);}  }
class C{  public Valve(boolean isOpen){  setOpen(isOpen);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:27.305 -0500",hash_original_method="6A912115CBBE4D263FCD27B2696D5371",hash_generated_method="064D786D7C16F2FBA0BDD430C5FF9CA7") public int markRowDeleted(long... ids){  if (ids == null || ids.length == 0) {    throw new IllegalArgumentException("input param 'ids' can't be null");  }  ContentValues values=new ContentValues();  values.put(Downloads.Impl.COLUMN_DELETED,1);  if (ids.length == 1) {    return mResolver.update(ContentUris.withAppendedId(mBaseUri,ids[0]),values,null,null);  }  return mResolver.update(mBaseUri,values,getWhereClauseForIds(ids),getWhereArgsForIds(ids));}  }
class C{  public static void dumpLocks(Connection conn){  Statement stmt=null;  try {    String sql="select pg_class.relname,pg_locks.* from pg_class,pg_locks where pg_class.relfilenode=pg_locks.relation order by 1";    stmt=conn.createStatement();    ResultSet rs=stmt.executeQuery(sql);    int cnt=rs.getMetaData().getColumnCount();    System.out.println();    while (rs.next()) {      for (int i=0; i < cnt; i++) {        Object value=rs.getObject(i + 1);        if (i > 0)         System.out.print(", ");        System.out.print(value != null ? value.toString() : "");      }      System.out.println();    }    System.out.println();  } catch (  Exception e) {  } finally {    try {      if (stmt != null)       stmt.close();    } catch (    Exception e) {    }  }}  }
class C{  public FunctionScoreQueryBuilder boostMode(String boostMode){  this.boostMode=boostMode;  return this;}  }
class C{  protected String defaultFilterString(){  return weka.filters.AllFilter.class.getName();}  }
class C{  public EducationalBackground schools(List<School> mSchools){  schools=mSchools;  return this;}  }
class C{  public static void main(String[] args){  try {    String[] argsCopy=args.clone();    if (Utils.getFlag('h',argsCopy) || Utils.getFlag("help",argsCopy)) {      runAssociator(new FPGrowth(),args);      System.out.println("-disk\n\tProcess data off of disk instead of loading\n\t" + "into main memory. This is a command line only option.");      return;    }    if (!Utils.getFlag("disk",args)) {      runAssociator(new FPGrowth(),args);    } else {      String filename;      filename=Utils.getOption('t',args);      weka.core.converters.ArffLoader loader=null;      if (filename.length() != 0) {        loader=new weka.core.converters.ArffLoader();        loader.setFile(new java.io.File(filename));      } else {        throw new Exception("No training file specified!");      }      FPGrowth fpGrowth=new FPGrowth();      fpGrowth.setOptions(args);      Utils.checkForRemainingOptions(args);      fpGrowth.buildAssociations(loader);      System.out.print(fpGrowth.toString());    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void done() throws IOException {  if (!initialStyles) {    writeInitialStyles();    initialStyles=true;  }  out.writeUBits(6,0);  out.flushBits();  if (bout != null && glyphCount > 0) {    byte[] glyphBytes=bout.toByteArray();    glyphByteArrays.add(glyphBytes);  }  if (glyphCount > 1) {    bout=new ByteArrayOutputStream();    out=new OutStream(bout);    glyphCount--;    fill1Index=1;    lineIndex=0;    outstandingChanges=true;    initialStyles=false;  } else {    if (bout != null) {      finishFont();    }    writer.completeTag();  }}  }
class C{  public synchronized void initializeGeneralTopics(){  yaml=new HelpYamlReader(server);  for (  HelpTopic topic : yaml.getGeneralTopics()) {    addTopic(topic);  }  for (  HelpTopic topic : yaml.getIndexTopics()) {    if (topic.getName().equals("Default")) {      defaultTopic=topic;    } else {      addTopic(topic);    }  }}  }
class C{  public static void validatePrefix(String uri,boolean useStrictValidation) throws ApplicationError {  validate(uri,useStrictValidation ? STRICT_URI_PREFIX : LOOSE_URI_PREFIX);}  }
class C{  public JobPersistenceException(String msg){  super(msg);}  }
class C{  public static void createStatechartModel(Resource resource){  createStatechartModel(resource,DiagramActivator.DIAGRAM_PREFERENCES_HINT);}  }
class C{  public static <V>int distinctList(List<V> sourceList){  if (isEmpty(sourceList)) {    return 0;  }  int sourceCount=sourceList.size();  int sourceListSize=sourceList.size();  for (int i=0; i < sourceListSize; i++) {    for (int j=(i + 1); j < sourceListSize; j++) {      if (sourceList.get(i).equals(sourceList.get(j))) {        sourceList.remove(j);        sourceListSize=sourceList.size();        j--;      }    }  }  return sourceCount - sourceList.size();}  }
class C{  @Override protected final JsonToken parseNumberText(int c) throws IOException, JsonParseException {  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();  int outPtr=0;  boolean negative=(c == INT_MINUS);  if (negative) {    outBuf[outPtr++]='-';    if (_inputPtr >= _inputEnd) {      loadMoreGuaranteed();    }    c=(int)_inputBuffer[_inputPtr++] & 0xFF;  }  int intLen=0;  boolean eof=false;  int_loop:   while (true) {    if (c < INT_0 || c > INT_9) {      break int_loop;    }    ++intLen;    if (intLen == 2) {      if (outBuf[outPtr - 1] == '0') {        reportInvalidNumber("Leading zeroes not allowed");      }    }    if (outPtr >= outBuf.length) {      outBuf=_textBuffer.finishCurrentSegment();      outPtr=0;    }    outBuf[outPtr++]=(char)c;    if (_inputPtr >= _inputEnd && !loadMore()) {      c=CHAR_NULL;      eof=true;      break int_loop;    }    c=(int)_inputBuffer[_inputPtr++] & 0xFF;  }  if (intLen == 0) {    reportInvalidNumber("Missing integer part (next char " + _getCharDesc(c) + ")");  }  int fractLen=0;  if (c == '.') {    outBuf[outPtr++]=(char)c;    fract_loop:     while (true) {      if (_inputPtr >= _inputEnd && !loadMore()) {        eof=true;        break fract_loop;      }      c=(int)_inputBuffer[_inputPtr++] & 0xFF;      if (c < INT_0 || c > INT_9) {        break fract_loop;      }      ++fractLen;      if (outPtr >= outBuf.length) {        outBuf=_textBuffer.finishCurrentSegment();        outPtr=0;      }      outBuf[outPtr++]=(char)c;    }    if (fractLen == 0) {      reportUnexpectedNumberChar(c,"Decimal point not followed by a digit");    }  }  int expLen=0;  if (c == 'e' || c == 'E') {    if (outPtr >= outBuf.length) {      outBuf=_textBuffer.finishCurrentSegment();      outPtr=0;    }    outBuf[outPtr++]=(char)c;    if (_inputPtr >= _inputEnd) {      loadMoreGuaranteed();    }    c=(int)_inputBuffer[_inputPtr++] & 0xFF;    if (c == '-' || c == '+') {      if (outPtr >= outBuf.length) {        outBuf=_textBuffer.finishCurrentSegment();        outPtr=0;      }      outBuf[outPtr++]=(char)c;      if (_inputPtr >= _inputEnd) {        loadMoreGuaranteed();      }      c=(int)_inputBuffer[_inputPtr++] & 0xFF;    }    exp_loop:     while (c <= INT_9 && c >= INT_0) {      ++expLen;      if (outPtr >= outBuf.length) {        outBuf=_textBuffer.finishCurrentSegment();        outPtr=0;      }      outBuf[outPtr++]=(char)c;      if (_inputPtr >= _inputEnd && !loadMore()) {        eof=true;        break exp_loop;      }      c=(int)_inputBuffer[_inputPtr++] & 0xFF;    }    if (expLen == 0) {      reportUnexpectedNumberChar(c,"Exponent indicator not followed by a digit");    }  }  if (!eof) {    --_inputPtr;  }  _textBuffer.setCurrentLength(outPtr);  return reset(negative,intLen,fractLen,expLen);}  }
class C{  public static boolean fileExists(String fName){  boolean result=false;  File file=new File(fName);  if (file != null) {    result=file.exists() && file.isFile();  }  return result;}  }
class C{  protected int engineGetBlockSize(){  return DESConstants.DES_BLOCK_SIZE;}  }
class C{  public MultiSplitLayout(){  this(new Leaf("default"));}  }
class C{  public void testDoConfigureCreatesRequiredElements() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(WebLogicPropertySet.DOMAIN_VERSION),"//weblogic:domain-version",config);}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public static void writeActionsFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Write Actions Instruction not supported in OpenFlow 1.0");    return;  }  OFFlowMod.Builder tmpFmb=OFFactories.getFactory(fmb.getVersion()).buildFlowModify();  OFInstructionWriteActions.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildWriteActions();  ActionUtils.fromString(tmpFmb,inst,log);  ib.setActions(tmpFmb.getActions());  log.debug("Appending WriteActions instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case NEW_NODE_ID:  return isSetNewNodeId();case NODE_STORE:return isSetNodeStore();}throw new IllegalStateException();}  }
class C{  public boolean isStartExist(int s){  return tokenListTable.get(s) != null;}  }
class C{  private static Map.Entry<String,Object> normalize(@Nullable String elementName,Object obj,@Nullable String path,Set<String> ignoredPaths,Map<String,String> nsMap) throws Exception {  if (obj instanceof JSONObject) {    JSONObject jsonObject=(JSONObject)obj;    Map<String,Object> map=new HashMap<>();    String[] names=JSONObject.getNames(jsonObject);    if (names != null) {      ImmutableList.Builder<String> namespacesBuilder=new ImmutableList.Builder<>();      ImmutableList.Builder<String> othersBuilder=new ImmutableList.Builder<>();      for (      String key : names) {        (key.startsWith("xmlns") ? namespacesBuilder : othersBuilder).add(key);      }      HashMap<String,String> newNsMap=new HashMap<>();      newNsMap.putAll(nsMap);      for (      String key : namespacesBuilder.build()) {        List<String> components=Splitter.on(':').splitToList(key);        String ns=(components.size() >= 2) ? components.get(1) : "";        newNsMap.put(ns,jsonObject.get(key).toString());      }      nsMap=ImmutableMap.copyOf(newNsMap);      for (      String key : othersBuilder.build()) {        String simpleKey=Iterables.getLast(Splitter.on(':').split(key));        String newPath=(path == null) ? simpleKey : (path + "." + simpleKey);        String mappedKey;        Object value;        if (ignoredPaths.contains(newPath)) {          mappedKey=null;          value="IGNORED";        } else {          Map.Entry<String,Object> simpleEntry=normalize(key,jsonObject.get(key),newPath,ignoredPaths,nsMap);          mappedKey=simpleEntry.getKey();          value=simpleEntry.getValue();        }        if (mappedKey == null) {          mappedKey=key.equals("content") ? key : mapName(key,nsMap,true);        }        map.put(mappedKey,value);      }    }    elementName=mapName(elementName,nsMap,true);    if (map.size() == 1 && map.containsKey("content")) {      return new AbstractMap.SimpleEntry<>(elementName,normalize(null,jsonObject.get("content"),path,ignoredPaths,nsMap).getValue());    }    return new AbstractMap.SimpleEntry<>(elementName,map.isEmpty() ? "" : map);  }  if (obj instanceof JSONArray) {    Set<Object> set=new HashSet<>();    String mappedKey=null;    for (int i=0; i < ((JSONArray)obj).length(); ++i) {      Map.Entry<String,Object> simpleEntry=normalize(null,((JSONArray)obj).get(i),path,ignoredPaths,nsMap);      if (i == 0) {        mappedKey=simpleEntry.getKey();      }      set.add(simpleEntry.getValue());    }    return new AbstractMap.SimpleEntry<String,Object>(mappedKey,set);  }  if (obj instanceof Number) {    return new AbstractMap.SimpleEntry<String,Object>(null,obj.toString());  }  if (obj instanceof Boolean) {    return new AbstractMap.SimpleEntry<String,Object>(null,((Boolean)obj) ? "1" : "0");  }  if (obj instanceof String) {    if (obj.equals("true")) {      return new AbstractMap.SimpleEntry<String,Object>(null,"1");    }    if (obj.equals("false")) {      return new AbstractMap.SimpleEntry<String,Object>(null,"0");    }    String string=obj.toString();    try {      return new AbstractMap.SimpleEntry<String,Object>(null,ISODateTimeFormat.dateTime().parseDateTime(string).toDateTime(UTC));    } catch (    IllegalArgumentException e) {    }    try {      return new AbstractMap.SimpleEntry<String,Object>(null,ISODateTimeFormat.dateTimeNoMillis().parseDateTime(string).toDateTime(UTC));    } catch (    IllegalArgumentException e) {    }    try {      if (!InternetDomainName.isValid(string)) {        return new AbstractMap.SimpleEntry<String,Object>(null,InetAddresses.forString(string));      }    } catch (    IllegalArgumentException e) {    }    return new AbstractMap.SimpleEntry<String,Object>(null,string);  }  return new AbstractMap.SimpleEntry<>(null,checkNotNull(obj));}  }
class C{  public static Path parsePath(String pathString){  return doPath(pathString);}  }
class C{  public boolean isFloatBufferSupported(){  this.checkCapabilities();  return this.floatBufferSupported;}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  private void clearBuffer(){  for (int i=0; i < BUF_SIZE; i++) {    buf[i]=0;  }}  }
class C{  public void validateCounter(String typeStr,long value){  for (  DebugCounterResource dcInfo : dc.getAllCounterValues()) {    if (dcInfo.getCounterHierarchy().contains("/" + typeStr)) {      assertEquals(Long.valueOf(value),dcInfo.getCounterValue());    }  }}  }
class C{  public static char[] grow(final char[] array,final int length,final int preserve){  if (length > array.length) {    final int newLength=(int)Math.max(Math.min(2L * array.length,MAX_ARRAY_SIZE),length);    final char t[]=new char[newLength];    System.arraycopy(array,0,t,0,preserve);    return t;  }  return array;}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  @Override public String rename(final String oldkey,final String newkey){  checkIsInMultiOrPipeline();  client.rename(oldkey,newkey);  return client.getStatusCodeReply();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.NUM_EXPR___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_11:getAnonymous_numExpr_1_1().clear();return;case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_21:getAnonymous_numExpr_2_1().clear();return;case UmplePackage.NUM_EXPR___ORDINAL_OP_1:getOrdinalOp_1().clear();return;case UmplePackage.NUM_EXPR___NAME_2:setName_2(NAME_2_EDEFAULT);return;case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_31:getAnonymous_numExpr_3_1().clear();return;case UmplePackage.NUM_EXPR___ANONYMOUS_NUM_EXPR_41:getAnonymous_numExpr_4_1().clear();return;}super.eUnset(featureID);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case CURSOR_ID:return isSetCursorId();case CLOSE:return isSetClose();}throw new IllegalStateException();}  }
class C{  public static <V>boolean isEmpty(V[] sourceArray){  return (sourceArray == null || sourceArray.length == 0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:33.710 -0400",hash_original_method="4CFE655B9CD1600D2030A19B2AA7D435",hash_generated_method="F0DCCB0FE5166555B044B4423F7B34E7") public ReflectiveOperationException(){}  }
class C{  public boolean importPvk(){  return jrbPvk.isSelected();}  }
class C{  boolean isEnumerator(JCTree t){  return VARDEF.equals(treeTag(t)) && (((JCVariableDecl)t).mods.flags & ENUM) != 0;}  }
class C{  void checkEndCode(){  if (endCode) {    throw new IllegalStateException("Cannot visit instructions after visitMaxs has been called.");  }}  }
class C{  @NonNull public static Date toFirstSecond(@NonNull Date date){  return DateUtils.truncate(date,Calendar.DATE);}  }
class C{  public Days multipliedBy(int scalar){  return Days.days(FieldUtils.safeMultiply(getValue(),scalar));}  }
class C{  public static Style createPointStyle(){  final Graphic gr=styleFactory.createDefaultGraphic();  final Mark mark=styleFactory.getCircleMark();  mark.setStroke(styleFactory.createStroke(filterFactory.literal(Color.BLUE),filterFactory.literal(1)));  mark.setFill(styleFactory.createFill(filterFactory.literal(Color.CYAN)));  gr.graphicalSymbols().clear();  gr.graphicalSymbols().add(mark);  gr.setSize(filterFactory.literal(5));  final PointSymbolizer sym=styleFactory.createPointSymbolizer(gr,null);  final Rule rule=styleFactory.createRule();  rule.symbolizers().add(sym);  final FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle(new Rule[]{rule});  final Style style=styleFactory.createStyle();  style.featureTypeStyles().add(fts);  return style;}  }
class C{  public synchronized void removeSegment(Segment segment){  segments.remove(segment.index());  segment.close();  segment.delete();  resetCurrentSegment();}  }
class C{  public static boolean intentDataToFile(final Context context,final Uri uri,final File targetFile){  if (context == null || uri == null || uri.toString().length() == 0 || !isWritable(targetFile,true)) {    Log.e(FileUtils.class,"intentDataToFile(): Null parameter or can't make path dirs");    return false;  }  boolean isSucceed=false;  InputStream inputStream=null;  try {    inputStream=context.getContentResolver().openInputStream(uri);    isSucceed=streamToFile(inputStream,targetFile,false);  } catch (  IOException e) {    Log.e("FleUtils.intentDataToFile()",e);  } finally {    if (inputStream != null)     try {      inputStream.close();    } catch (    IOException e) {    }  }  return isSucceed;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public String toString(){  return ("Version: V" + (version + 1));}  }
class C{  @Override public Long zrevrank(final String key,final String member){  checkIsInMultiOrPipeline();  client.zrevrank(key,member);  return client.getIntegerReply();}  }
class C{  public void clearCurrentTopology(){  this.clear();  linksUpdated=true;  dtLinksUpdated=true;  tunnelPortsUpdated=true;  createNewInstance("startup");  lastUpdateTime=new Date();}  }
class C{  public void test_update$BII() throws Exception {  Signature sig=Signature.getInstance("DSA");  byte[] bytes=MESSAGE.getBytes();  try {    sig.update(bytes,0,bytes.length);    fail();  } catch (  SignatureException expected) {  }  sig.initSign(getDsaKeys().getPrivate());  sig.update(bytes,0,bytes.length);  sig.update(bytes,bytes.length - 2,2);  try {    sig.update(bytes,bytes.length - 3,4);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    sig.update(null,0,5);    fail();  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public static <T,U>Multimap<T,U> nullToEmpty(@Nullable Multimap<T,U> potentiallyNull){  return firstNonNull(potentiallyNull,ImmutableMultimap.<T,U>of());}  }
class C{  public BasePermissionCollectionPage(final BasePermissionCollectionResponse response,final IPermissionCollectionRequestBuilder builder){  super(response.value,builder);}  }
class C{  public static Object paintCachedTeXFormula(String f,int style,int type,int size,int inset,Color fgcolor,Graphics2D g) throws ParseException {  return paintCachedTeXFormula(new CachedTeXFormula(f,style,type,size,inset,fgcolor),g);}  }
class C{  @CheckReturnValue public <T>Subject4<A,B,C,T> asWithPrecursor(Function3<A,B,C,T> mapping){  return this.asWithPrecursor(mapping,null);}  }
class C{  private void emitListAdd(Method method,String fieldName,StringBuilder builder){  builder.append("    public void ");  builder.append(getListAdderName(fieldName));  builder.append("(");  builder.append(getTypeArgumentImplName((ParameterizedType)method.getGenericReturnType(),0));  builder.append(" v) {\n      ");  builder.append(getEnsureName(fieldName));  builder.append("();\n      ");  builder.append(fieldName);  builder.append(".add(v);\n");  builder.append("    }\n\n");}  }
class C{  public byte[] generateKey(){  byte[] key=new byte[strength];  random.nextBytes(key);  return key;}  }
class C{  public void displayPendingCallNotification(MXSession session,Room room,String callId){  if (null != callId) {    Notification notification=NotificationUtils.buildCallNotification(getApplicationContext(),room.getName(session.getCredentials().userId),room.getRoomId(),session.getCredentials().userId,callId);    startForeground(PENDING_CALL_ID,notification);    mCallId=callId;  }}  }
class C{  public Font[] loadFonts(InputStream is) throws IOException {  PushbackInputStream pbis=new PushbackInputStream(new BufferedInputStream(is),FontFactory.LOOKAHEAD_SIZE);  if (isCollection(pbis)) {    return loadCollection(pbis);  }  return new Font[]{loadSingleOTF(pbis)};}  }
class C{  public static String pennString2Words(String penn){  return tree2Words(pennString2Tree(penn));}  }
class C{  public void refreshQueue(){  if (isAdded()) {    getLoaderManager().restartLoader(Fragments.QUEUE_FRAGMENT_LOADER_ID,null,this);  }}  }
class C{  public IndexedColors(Color color1,Color... colors){  this.colors=new ArrayList<Color>();  this.colors.add(color1);  this.colors.addAll(Arrays.asList(colors));}  }
class C{  @ApiMethod(httpMethod="PUT") public final Place updatePlace(final Place place,final User user) throws ServiceException {  EndpointUtil.throwIfNotAdmin(user);  ofy().save().entity(place).now();  return place;}  }
class C{  public String descriptor(){  if (descriptor == null) {    descriptor=((CpUtf8)myclass.constant_pool[descriptor_index]).decodeClassName(0);  }  return descriptor;}  }
class C{  public String[] run(String[] cmdStrings){  StringBuffer stdoutBuffer=new StringBuffer();  StringBuffer stderrBuffer=new StringBuffer();  System.out.print(CR + "runCommand method about to execute: ");  for (int iNdx=0; iNdx < cmdStrings.length; iNdx++) {    System.out.print(" ");    System.out.print(cmdStrings[iNdx]);  }  System.out.println(CR);  try {    Process process=Runtime.getRuntime().exec(cmdStrings);    java.io.BufferedInputStream is=new java.io.BufferedInputStream(process.getInputStream());    int isLen=0;    byte[] isBuf=new byte[BUFFERSIZE];    java.io.BufferedInputStream es=new java.io.BufferedInputStream(process.getErrorStream());    int esLen=0;    byte[] esBuf=new byte[BUFFERSIZE];    do {      isLen=is.read(isBuf);      if (isLen > 0) {        stdoutBuffer.append(new String(isBuf,0,isLen));      }      esLen=es.read(esBuf);      if (esLen > 0) {        stderrBuffer.append(new String(esBuf,0,esLen));      }    } while ((isLen > -1) || (esLen > -1));    try {      process.waitFor();      subprocessStatus=process.exitValue();      process=null;    } catch (    java.lang.InterruptedException e) {      System.err.println("InterruptedException: " + e);    }  } catch (  java.io.IOException ex) {    System.err.println("IO error: " + ex);  }  String[] result=new String[]{Integer.toString(subprocessStatus),stdoutBuffer.toString(),stderrBuffer.toString()};  System.out.println(CR + "--- Return code was: " + CR+ result[RETSTAT]);  System.out.println(CR + "--- Return stdout was: " + CR+ result[STDOUT]);  System.out.println(CR + "--- Return stderr was: " + CR+ result[STDERR]);  return result;}  }
class C{  protected void drawLine(Graphics2D g2,State state,PlotOrientation orientation,double x0,double y0,double x1,double y1){  if (orientation == PlotOrientation.VERTICAL) {    state.line.setLine(x0,y0,x1,y1);    g2.draw(state.line);  } else   if (orientation == PlotOrientation.HORIZONTAL) {    state.line.setLine(y0,x0,y1,x1);    g2.draw(state.line);  }}  }
class C{  public static <E>Function<E,E> identity(){  return Function.identity();}  }
class C{  public static Vector2m toVector2m(Vector3 o){  return new Vector2m(o.x,o.z);}  }
class C{  public String url(String path){  return mockWebServer.url(path).toString();}  }
class C{  private void updateFixutreFilterMask(int mask){  Filter filter=bodyFixture.getFilter();  if (filter == Filter.DEFAULT_FILTER) {    CategoryFilter cf=new CategoryFilter(Integer.MAX_VALUE,mask);    bodyFixture.setFilter(cf);  } else {    CategoryFilter cf=new CategoryFilter(((CategoryFilter)filter).getCategory(),mask);    bodyFixture.setFilter(cf);  }}  }
class C{  @Override public void putAll(Map<? extends lucee.runtime.type.Collection.Key,? extends V> m){  for (  Map.Entry<? extends lucee.runtime.type.Collection.Key,? extends V> e : m.entrySet())   put(e.getKey(),e.getValue());}  }
class C{  public static org.opcfoundation.ua.transport.security.KeyPair createHttpsCertificate(String hostName,String applicationUri,int days,org.opcfoundation.ua.transport.security.KeyPair issuerCert) throws IOException, GeneralSecurityException {  if (applicationUri == null)   throw new NullPointerException("applicationUri must not be null");  if (logger.isDebugEnabled())   logger.debug("createApplicationInstanceCertificate: getProviders={}",Arrays.toString(Security.getProviders()));  KeyPair keyPair=generateKeyPair();  X509Certificate cert;  cert=generateCertificate("CN=" + hostName,days,applicationUri,keyPair.getPublic(),keyPair.getPrivate(),issuerCert);  return toKeyPair(cert,keyPair.getPrivate());}  }
class C{  protected static void composeComponents(ArrayList<OptimizationPlanElement> p,String name,Object[] es){  p.add(OptimizationPlanCompositeElement.compose(name,es));}  }
class C{  public Object makeTransformInverse(Object nativeTransform){  try {    return clamp(((AffineTransform)nativeTransform).createInverse());  } catch (  Exception ex) {    return null;  }}  }
class C{  private void min(Page p,K from){  while (true) {    if (p.isLeaf()) {      int x=from == null ? 0 : p.binarySearch(from);      if (x < 0) {        x=-x - 1;      }      pos=new CursorPos(p,x,pos);      break;    }    int x=from == null ? -1 : p.binarySearch(from);    if (x < 0) {      x=-x - 1;    } else {      x++;    }    pos=new CursorPos(p,x + 1,pos);    p=p.getChildPage(x);  }}  }
class C{  public MWFProcess start(ProcessInfo pi){  return start(pi,null);}  }
class C{  public boolean isEmpty(){  return top == null;}  }
class C{  public small addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void reset(){  warnings.clear();  errors.clear();  fatalErrors.clear();}  }
class C{  public static Explanation match(float value,String description,Explanation... details){  return new Explanation(true,value,description,Arrays.asList(details));}  }
class C{  public ByteVector putByteArray(final byte[] b,final int off,final int len){  if (length + len > data.length) {    enlarge(len);  }  if (b != null) {    System.arraycopy(b,off,data,length,len);  }  length+=len;  return this;}  }
class C{  private void wrap(int[] cellXY,BoundSize gapSize){  boolean flowx=lc.isFlowX();  cellXY[0]=flowx ? 0 : cellXY[0] + 1;  cellXY[1]=flowx ? cellXY[1] + 1 : 0;  if (gapSize != null) {    if (wrapGapMap == null) {      wrapGapMap=new HashMap<Integer,BoundSize>(8);    }    wrapGapMap.put(new Integer(cellXY[flowx ? 1 : 0]),gapSize);  }  if (flowx) {    rowIndexes.add(new Integer(cellXY[1]));  } else {    colIndexes.add(new Integer(cellXY[0]));  }}  }
class C{  void resize(int newCapacity){  Entry[] oldTable=getTable();  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry[] newTable=new Entry[newCapacity];  transfer(oldTable,newTable);  table=newTable;  if (size >= threshold / 2) {    threshold=(int)(newCapacity * loadFactor);  } else {    expungeStaleEntries();    transfer(newTable,oldTable);    table=oldTable;  }}  }
class C{  public LagartoDOMBuilder disableDebug(){  config.collectErrors=false;  config.setCalculatePosition(false);  return this;}  }
class C{  private void attribClassBody(Env<AttrContext> env,ClassSymbol c){  JCClassDecl tree=(JCClassDecl)env.tree;  Assert.check(c == tree.sym);  attribStats(tree.typarams,env);  if (!c.isAnonymous()) {    chk.validate(tree.typarams,env);    chk.validate(tree.extending,env);    chk.validate(tree.implementing,env);  }  if ((c.flags() & (ABSTRACT | INTERFACE)) == 0) {    if (!relax)     chk.checkAllDefined(tree.pos(),c);  }  if ((c.flags() & ANNOTATION) != 0) {    if (tree.implementing.nonEmpty())     log.error(tree.implementing.head.pos(),"cant.extend.intf.annotation");    if (tree.typarams.nonEmpty())     log.error(tree.typarams.head.pos(),"intf.annotation.cant.have.type.params");    Attribute.Compound repeatable=c.attribute(syms.repeatableType.tsym);    if (repeatable != null) {      DiagnosticPosition cbPos=getDiagnosticPosition(tree,repeatable.type);      Assert.checkNonNull(cbPos);      chk.validateRepeatable(c,repeatable,cbPos);    }  } else {    chk.checkCompatibleSupertypes(tree.pos(),c.type);    if (allowDefaultMethods) {      chk.checkDefaultMethodClashes(tree.pos(),c.type);    }  }  chk.checkClassBounds(tree.pos(),c.type);  tree.type=c.type;  for (List<JCTypeParameter> l=tree.typarams; l.nonEmpty(); l=l.tail) {    Assert.checkNonNull(env.info.scope.lookup(l.head.name).scope);  }  if (!c.type.allparams().isEmpty() && types.isSubtype(c.type,syms.throwableType))   log.error(tree.extending.pos(),"generic.throwable");  chk.checkImplementations(tree);  checkAutoCloseable(tree.pos(),env,c.type);  for (List<JCTree> l=tree.defs; l.nonEmpty(); l=l.tail) {    attribStat(l.head,env);    if (c.owner.kind != PCK && ((c.flags() & STATIC) == 0 || c.name == names.empty) && (TreeInfo.flags(l.head) & (STATIC | INTERFACE)) != 0) {      Symbol sym=null;      if (l.head.hasTag(VARDEF))       sym=((JCVariableDecl)l.head).sym;      if (sym == null || sym.kind != VAR || ((VarSymbol)sym).getConstValue() == null)       log.error(l.head.pos(),"icls.cant.have.static.decl",c);    }  }  chk.checkCyclicConstructors(tree);  chk.checkNonCyclicElements(tree);  if (env.info.lint.isEnabled(LintCategory.SERIAL) && isSerializable(c) && (c.flags() & Flags.ENUM) == 0 && checkForSerial(c)) {    checkSerialVersionUID(tree,c);  }  if (allowTypeAnnos) {    typeAnnotations.organizeTypeAnnotationsBodies(tree);    validateTypeAnnotations(tree,false);  }}  }
class C{  static void checkCyclicBalancing(RoundRobinLoadBalancingSpi spi,List<ClusterNode> allNodes,List<UUID> orderedNodes,ComputeTaskSession ses1,ComputeTaskSession ses2){  ClusterNode firstNode=spi.getBalancedNode(ses1,allNodes,new GridTestJob());  int startIdx=firstBalancedNodeIndex(firstNode,orderedNodes);  for (int i=0; i < allNodes.size() * 2; i++) {    int actualIdx=(startIdx + i + 1) % allNodes.size();    ClusterNode nextNode=spi.getBalancedNode(i % 2 == 0 ? ses1 : ses2,allNodes,new GridTestJob());    assertEquals("Balancer returns node out of order",nextNode.id(),orderedNodes.get(actualIdx));  }}  }
class C{  public void stopAllRepeating(){  for (  KeyCommandBind kcb : repeatingTasks.keySet()) {    repeatingTasks.get(kcb).cancel();    repeatingTasks.remove(kcb);  }}  }
class C{  public RandomEvictionPolicy(){}  }
class C{  public static Long streamOpCRC32(String stream){  CRC32 crc=requestCRC.get();  try {    crc.update(stream.getBytes());    long result=crc.getValue();    return crc.getValue();  }  finally {    crc.reset();  }}  }
class C{  public void step(SimState state){  double diff=initialConcentration - concentration;  if (diff > 0) {    diff*=.0025;    diff=Math.min(diff,10);    increaseConcentration(diff);  }}  }
class C{  @Override public void changeCursor(Cursor cursor){  super.changeCursor(cursor);  resetMappings();}  }
class C{  private void scoreLex(SampledRule rule){  double lex_f_e=1.0;  for (int i=rule.srcStartInclusive; i < rule.srcEndExclusive; ++i) {    final int srcId=rule.sentencePair.source(i);    double feSum=0.0;    if (rule.sentencePair.isSourceUnaligned(i)) {      int c_f_e=coocTable.getJointCount(srcId,LexCoocTable.NULL_ID);      int c_e=coocTable.getTgtMarginal(LexCoocTable.NULL_ID);      feSum=c_f_e / (double)c_e;    } else {      int[] tgtAlign=rule.sentencePair.f2e(i);      for (      int j : tgtAlign) {        int tgtId=rule.sentencePair.target(j);        int c_f_e=coocTable.getJointCount(srcId,tgtId);        int c_e=coocTable.getTgtMarginal(tgtId);        feSum+=(c_f_e / (double)c_e);      }      feSum/=(double)tgtAlign.length;    }    if (feSum == 0.0)     feSum=MIN_LEX_PROB;    lex_f_e*=feSum;  }  assert lex_f_e >= 0 && lex_f_e <= 1.0;  double lex_e_f=1.0;  for (int i=rule.tgtStartInclusive; i < rule.tgtEndExclusive; ++i) {    final int tgtId=rule.sentencePair.target(i);    double efSum=0.0;    if (rule.sentencePair.isTargetUnaligned(i)) {      int c_e_f=coocTable.getJointCount(LexCoocTable.NULL_ID,tgtId);      int c_f=coocTable.getSrcMarginal(LexCoocTable.NULL_ID);      efSum=c_e_f / (double)c_f;    } else {      int[] srcAlign=rule.sentencePair.e2f(i);      for (      int j : srcAlign) {        final int srcId=rule.sentencePair.source(j);        int c_e_f=coocTable.getJointCount(srcId,tgtId);        int c_f=coocTable.getSrcMarginal(srcId);        efSum+=(c_e_f / (double)c_f);      }      efSum/=(double)srcAlign.length;    }    if (efSum == 0.0)     efSum=MIN_LEX_PROB;    lex_e_f*=efSum;  }  assert lex_e_f >= 0.0 && lex_e_f <= 1.0;  rule.lex_e_f=lex_e_f;  rule.lex_f_e=lex_f_e;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public SlowedProgressBar(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {  m_stylesheetLevel++;  pushSpaceHandling(false);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void executeExport(final DataContext dataContext) throws FileNotFoundException {  PsiDirectory psiDirectory=null;  PsiElement psiElement=CommonDataKeys.PSI_ELEMENT.getData(dataContext);  if (psiElement instanceof PsiDirectory) {    psiDirectory=(PsiDirectory)psiElement;  }  final PsiFile psiFile=CommonDataKeys.PSI_FILE.getData(dataContext);  Project project=CommonDataKeys.PROJECT.getData(dataContext);  String shortFileName=null;  String directoryName=null;  if (psiFile != null || psiDirectory != null) {    if (psiFile != null) {      shortFileName=psiFile.getVirtualFile().getName();      if (psiDirectory == null) {        psiDirectory=psiFile.getContainingDirectory();      }    }    if (psiDirectory != null) {      directoryName=psiDirectory.getVirtualFile().getPresentableUrl();    }  }  Editor editor=CommonDataKeys.EDITOR.getData(dataContext);  boolean isSelectedTextEnabled=false;  if (editor != null && editor.getSelectionModel().hasSelection()) {    isSelectedTextEnabled=true;  }  ExportToHTMLDialog exportToHTMLDialog=new ExportToHTMLDialog(shortFileName,directoryName,isSelectedTextEnabled,project);  ExportToHTMLSettings exportToHTMLSettings=ExportToHTMLSettings.getInstance(project);  if (exportToHTMLSettings.OUTPUT_DIRECTORY == null) {    final VirtualFile baseDir=project.getBaseDir();    if (baseDir != null) {      exportToHTMLSettings.OUTPUT_DIRECTORY=baseDir.getPresentableUrl() + File.separator + "exportToHTML";    } else {      exportToHTMLSettings.OUTPUT_DIRECTORY="";    }  }  exportToHTMLDialog.reset();  if (!exportToHTMLDialog.showAndGet()) {    return;  }  try {    exportToHTMLDialog.apply();  } catch (  ConfigurationException e) {    Messages.showErrorDialog(project,e.getMessage(),CommonBundle.getErrorTitle());  }  PsiDocumentManager.getInstance(project).commitAllDocuments();  final String outputDirectoryName=exportToHTMLSettings.OUTPUT_DIRECTORY;  if (exportToHTMLSettings.getPrintScope() != PrintSettings.PRINT_DIRECTORY) {    if (psiFile == null || psiFile.getText() == null) {      return;    }    final String dirName=constructOutputDirectory(psiFile,outputDirectoryName);    HTMLTextPainter textPainter=new HTMLTextPainter(psiFile,project,dirName,exportToHTMLSettings.PRINT_LINE_NUMBERS);    if (exportToHTMLSettings.getPrintScope() == PrintSettings.PRINT_SELECTED_TEXT && editor != null && editor.getSelectionModel().hasSelection()) {      int firstLine=editor.getDocument().getLineNumber(editor.getSelectionModel().getSelectionStart());      textPainter.setSegment(editor.getSelectionModel().getSelectionStart(),editor.getSelectionModel().getSelectionEnd(),firstLine);    }    textPainter.paint(null,psiFile.getFileType());    if (exportToHTMLSettings.OPEN_IN_BROWSER) {      BrowserUtil.browse(textPainter.getHTMLFileName());    }  } else {    myLastException=null;    ExportRunnable exportRunnable=new ExportRunnable(exportToHTMLSettings,psiDirectory,outputDirectoryName,project);    ProgressManager.getInstance().runProcessWithProgressSynchronously(exportRunnable,CodeEditorBundle.message("export.to.html.title"),true,project);    if (myLastException != null) {      throw myLastException;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.404 -0500",hash_original_method="CD5C82C799E78C74801FDB521CEE7324",hash_generated_method="CD5C82C799E78C74801FDB521CEE7324") Context(){  copyTables();}  }
class C{  public short readShortInt(){  byte[] buff=data;  return (short)(((buff[pos++] & 0xff) << 8) + (buff[pos++] & 0xff));}  }
class C{  @Override public boolean isProcessed(){  return m_mapping != null;}  }
class C{  public StaticFieldRef newStaticFieldRef(SootFieldRef f){  return new StaticFieldRef(f);}  }
class C{  public boolean popBoolean(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Boolean value=(Boolean)wrapper.getValue();  return value.booleanValue();}  }
class C{  public void storePropertiesEditableFromConfigFile(){  storePropertiesEditableFromConfigFile(defaultRetentionCronExpression,defaultPollingRate,defaultWaitTimeBeforeNewSyncWithAWS,defaultMaxWaitTimeToDetachVolume);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static byte[] saveHq(Bitmap src) throws ImageSaveException {  return save(src,Bitmap.CompressFormat.JPEG,JPEG_QUALITY_HQ);}  }
class C{  public long cminflt(){  return Long.parseLong(fields[10]);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 3) {    int studyArea=Integer.parseInt(args[0]);    String root=args[1];    String date=args[2];    String matrix;    String coords;    String departure;    String outputPath;    EmmeStringBuilder esb=new EmmeStringBuilder();switch (studyArea) {case 1:      studyAreaName="Gauteng";    proj=esb.getUTM35S();  break;case 2:studyAreaName="eThekwini";proj=esb.getUTM36S();break;default :break;}log.info("======================================================");log.info(" Creating demand from Emme data for " + studyAreaName);log.info("------------------------------------------------------");matrix=root + studyAreaName + "/"+ date+ "/privdemand.csv";coords=root + studyAreaName + "/"+ date+ "/nodes.csv";departure="07:00:00";outputPath="./Output/";File locationFolder=new File(outputPath);boolean folderCreated=locationFolder.mkdirs();log.info("Output folder created (" + folderCreated + ") at "+ locationFolder.getAbsolutePath());PlansFromEmmeDemand pfed=new PlansFromEmmeDemand(matrix,coords,departure,outputPath,CRS.parseWKT(proj));pfed.processInput();pfed.createPlansXML();} else {throw new RuntimeException("Must have TWO arguments: a) Study area (number); b) Root; c) Date.");}log.info("======================================================");log.info("                   PROCESS COMPLETED");log.info("======================================================");}  }
class C{  public static Object parse(Reader in){  try {    JSONParser parser=new JSONParser();    return parser.parse(in);  } catch (  Exception e) {    return null;  }}  }
class C{  public FloatConstant(ConstantPool pool,int index,float value){  super(pool,index);  _value=value;}  }
class C{  private void createModeShareStackedBarChart(String title,String filePath,BenchmarkDataReader data,String xLabel,String yLabel){  StackedBarChart stackedBarChart=new StackedBarChart(title,xLabel,yLabel,data.getCategories());  double[] modeShareArray=new double[data.getCategories().length];  int modeCount=0;  for (  String mode : data.getModes()) {    int i=0;    for (    Integer key : data.getDataMap().keySet()) {      Integer[] shares=data.getDataMap().get(key);      modeShareArray[i]=shares[modeCount] / data.getTotalTripsMap().get(key) * 100;      i++;    }    stackedBarChart.addSeries(mode,modeShareArray);    modeCount++;  }  AddSecondChart secondAxis=new AddSecondChart(stackedBarChart.getChart(),"Total share of observations [%]",data.getCategories(),0,50);  secondAxis.addChartAndAxis();  secondAxis.addSeries("Total trip share",data.getTotalTripShareArray());  GraphEditor stackedBarChartEdit=new GraphEditor(stackedBarChart,10,0.0,100.0,commonColorScheme);  stackedBarChartEdit.stackedBarRenderer();  stackedBarChart.saveAsPng(filePath,1024,768);}  }
class C{  public String toFormattedString(){  return "Parameters for cudaMemcopy3DPeer:\n    " + createString("\n    ");}  }
class C{  public void testHyperbolicParameters() throws Exception {  SweetSpotSimilarity sim=getSimilarity("text_hyperbolic",SweetSpotSimilarity.class);  for (int i=1; i <= 1000; i++) {    assertTrue("MIN tf: i=" + i + " : s="+ sim.tf(i),3.3F <= sim.tf(i));    assertTrue("MAX tf: i=" + i + " : s="+ sim.tf(i),sim.tf(i) <= 7.7F);  }  assertEquals("MID tf",3.3F + (7.7F - 3.3F) / 2.0F,sim.tf(5),0.00001F);  assertEquals("norm 1",1.00F,sim.computeLengthNorm(1),0.0F);  assertEquals("norm 2",1.00F,sim.computeLengthNorm(2),0.0F);  assertEquals("norm 3",1.00F,sim.computeLengthNorm(3),0.0F);  assertEquals("norm 4",1.00F,sim.computeLengthNorm(4),0.0F);  assertEquals("norm 5",1.00F,sim.computeLengthNorm(5),0.0F);  assertTrue("norm 6 too high: " + sim.computeLengthNorm(6),sim.computeLengthNorm(6) < 1.0F);  assertTrue("norm 7 higher then norm 6",sim.computeLengthNorm(7) < sim.computeLengthNorm(6));  assertTrue("norm 20 not high enough: " + sim.computeLengthNorm(20),0.25F < sim.computeLengthNorm(20));}  }
class C{  private void dryRun_doReturnToNormal(){  if (maxErrors > 0)   maxErrors--;  int parsedTokensOffset=parsedTokens.size() - (lastError_start_sync_size - lastError_sync_size);  int tokenIndex=0;  doNotifyObserversAbout(lastErrorInformation);  lastErrorInformation=null;  for (  LRAction action2 : dryRun_savedActions) {    if (action2 instanceof Shift) {      Shift shift2=(Shift)action2;      if (DEBUG)       System.out.println("DryRunReturn2Normal S: to state " + shift2.getState().getID() + " ("+ parsedTokens.get(parsedTokensOffset + tokenIndex).getSymbol()+ ")");      valueStack.push(parsedTokens.get(parsedTokensOffset + tokenIndex).hasValue() ? parsedTokens.get(parsedTokensOffset + tokenIndex).getValue() : NoValue);      tokenIndex++;    } else     if (action2 instanceof Reduce) {      Reduce reduce=(Reduce)action2;      if (DEBUG)       System.out.println("DryRunReturn2Normal R: " + reduce.getProduction().toString() + " ("+ parsedTokens.get(parsedTokensOffset + tokenIndex).getSymbol()+ ")");      Action reduceAction=reduce.getAction();      Object newValue=NoValue;      if (reduceAction != null) {        newValue=ActionPerformer.perform(reduceAction,valueStack,reduce.getProduction().getRHSSizeWithoutEpsilon() + ((reduce.getProduction().getLHS() instanceof AuxiliaryLHS4SemanticShiftAction) ? ((AuxiliaryLHS4SemanticShiftAction)reduce.getProduction().getLHS()).numPrecedingSymbolsNotEpsilon : 0));      }      for (int i=0; i < reduce.getProduction().getRHSSizeWithoutEpsilon(); i++) {        valueStack.pop();      }      valueStack.push(newValue);    } else {      throw new RuntimeException("Critical internal error in parser driver : Found illegal action while returning to normal mode from dry run!");    }  }  if (!saveTokens) {    parsedTokens=null;    tokenCountStack=null;  }  lastError_stateStack=null;  lastError_tokenCountStack=null;  dryRun_savedActions=null;  lastError_sync_size=0;  lastError_start_sync_size=0;}  }
class C{  synchronized void sendRoleRequest(OFControllerRole role,long xid) throws IOException {  Boolean supportsNxRole=(Boolean)sw.getAttribute(IOFSwitch.SWITCH_SUPPORTS_NX_ROLE);  if ((supportsNxRole != null) && !supportsNxRole) {    setSwitchRole(role,RoleRecvStatus.UNSUPPORTED);  } else {    pendingXid=sendNiciraRoleRequest(role,xid);    pendingRole=role;    this.roleSubmitTimeNs=System.nanoTime();    requestPending=true;  }}  }
class C{  public DViewCertificateFingerprint(JFrame parent,byte[] encodedCertificate,DigestType fingerprintAlg){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  this.encodedCertificate=encodedCertificate;  this.fingerprintAlg=fingerprintAlg;  initComponents();}  }
class C{  private void processArgument(){  final StringBuilder argumentBuilder=new StringBuilder();  while (templateReader.hasNextCharacter()) {    final char argumentCharacter=templateReader.nextCharacter();    if (argumentCharacter == syntax.getArgumentClosing()) {      final String argument=argumentBuilder.toString().trim();      if (Strings.startsWith(argument,syntax.getEquationMarker())) {        final String equation=LmlUtilities.stripMarker(argument);        templateReader.append(newEquation().getResult(equation),equation + " equation");      } else       if (Strings.startsWith(argument,syntax.getConditionMarker())) {        processConditionArgument(argument,argumentBuilder);      } else {        templateReader.append(Nullables.toString(data.getArgument(argument)),argument + " argument");      }      return;    }    argumentBuilder.append(argumentCharacter);  }}  }
class C{  protected boolean hasImmediateOutputFormat(){  return true;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public final E remove(int index){  throw new UnsupportedOperationException();}  }
class C{  public synchronized void removeEntity(int id,int condition){  Entity toRemove=getEntity(id);  if (toRemove == null) {    return;  }  entities.remove(toRemove);  entityIds.remove(new Integer(id));  removeEntityPositionLookup(toRemove);  toRemove.setRemovalCondition(condition);  if ((vOutOfGame != null) && (condition != IEntityRemovalConditions.REMOVE_NEVER_JOINED)) {    vOutOfGame.addElement(toRemove);  }  if (deploymentTable.size() > 0) {    Enumeration<Vector<Entity>> iter=deploymentTable.elements();    while (iter.hasMoreElements()) {      Vector<Entity> vec=iter.nextElement();      for (int i=vec.size() - 1; i >= 0; i--) {        Entity en=vec.elementAt(i);        if (en.getId() == id) {          vec.removeElementAt(i);        }      }    }  }  processGameEvent(new GameEntityRemoveEvent(this,toRemove));}  }
class C{  public OutputFormat(String indent){  this.indent=indent;}  }
class C{  public MAssetDelivery(MAsset asset,HttpServletRequest request,int AD_User_ID){  super(asset.getCtx(),0,asset.get_TrxName());  setAD_Client_ID(asset.getAD_Client_ID());  setAD_Org_ID(asset.getAD_Org_ID());  setA_Asset_ID(asset.getA_Asset_ID());  setLot(asset.getLot());  setSerNo(asset.getSerNo());  setVersionNo(asset.getVersionNo());  setMovementDate(new Timestamp(System.currentTimeMillis()));  setURL(request.getRequestURL().toString());  setReferrer(request.getHeader("Referer"));  setRemote_Addr(request.getRemoteAddr());  setRemote_Host(request.getRemoteHost());  setAD_User_ID(AD_User_ID);  saveEx();}  }
class C{  @Override @Inline public ObjectReference traceObject(TransitiveClosure trace,ObjectReference object){  if (testAndMark(object,markState))   trace.processNode(object);  return object;}  }
class C{  public void onRecentTabsPageClosed(){  if (!mCanDisableSessionInvalidations)   return;  --mNumRecentTabPages;  if (mNumRecentTabPages == 0) {    setSessionInvalidationsEnabled(false,UNREGISTER_FOR_SESSION_SYNC_INVALIDATIONS_DELAY_MS);  }}  }
class C{  @Override public boolean equals(Object o){  return o instanceof Post && this.getId() == (((Post)o).getId());}  }
class C{  public void addDatapoint(final DataPointColored point){  logger.debug("addDatapoint called");  if (point.getDimension() != this.getDimensions() || (projectionMethod == null) || (getUpstairs() == null)) {    return;  }  if (projectionMethod.isIterable()) {    ((IterableProjectionMethod)projectionMethod).setNeedsReInit(true);  }  DataPoint existingPoint=upstairs.addPoint(point,tolerance);  if (existingPoint != null) {    currentPoint=existingPoint;  } else {    currentPoint=point;    DataPoint newPoint;    if (point.getDimension() == 1) {      newPoint=new DataPoint(new double[]{point.get(0),0});    } else {      newPoint=new DataPoint(new double[]{point.get(0),point.get(1)});    }    downstairs.addPoint(newPoint);    projectionMethod.project();    fireDataPointAdded();  }  colorManager.updateDataPointColors(upstairs);}  }
class C{  public TerminalPosition withColumn(int column){  if (column == 0 && this.row == 0) {    return TOP_LEFT_CORNER;  }  return new TerminalPosition(column,this.row);}  }
class C{  public boolean isVertical(){  return isVerticalLine;}  }
class C{  public void writeInt(final int value,final JBBPByteOrder byteOrder) throws IOException {  if (byteOrder == JBBPByteOrder.BIG_ENDIAN) {    this.writeShort(value >>> 16,byteOrder);    this.writeShort(value,byteOrder);  } else {    this.writeShort(value,byteOrder);    this.writeShort(value >>> 16,byteOrder);  }}  }
class C{  public CCheckBox(Icon icon){  super(icon);  init();}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  public Iterator<String> parameterSignatureIterator(){  return new ParameterSignatureIterator();}  }
class C{  void startSegment(int segmentType){  if ((segmentType == SEGMENT_THEAD) && (!hasTHead)) {    rowInsretionPos=0;    hasTHead=true;    curSegmentType=SEGMENT_THEAD;  } else   if ((segmentType == SEGMENT_TFOOT) && (!hasTFoot)) {    rowInsretionPos=-1;    hasTFoot=true;    curSegmentType=SEGMENT_TFOOT;  } else {    rowInsretionPos=bodyInsertionPos;    curSegmentType=SEGMENT_TBODY;  }}  }
class C{  public void computeMi(){  Mi.assign(0.0);  model.taggerFGen.startScanEFeatures();  while (model.taggerFGen.hasNextEFeature()) {    Feature f=model.taggerFGen.nextEFeature();    if (f.ftype == Feature.EDGE_FEATURE1) {      Mi.mtrx[f.yp][f.y]+=model.lambda[f.idx] * f.val;    }  }  for (int i=0; i < Mi.rows; i++) {    for (int j=0; j < Mi.cols; j++) {      Mi.mtrx[i][j]=Math.exp(Mi.mtrx[i][j]);    }  }}  }
class C{  public boolean keepSpawnLoaded(){  return config.getBoolean(Key.PERSIST_SPAWN);}  }
class C{  private static ClassNode createUsableClassNodeFromGenericsType(final GenericsType genericsType){  ClassNode value=genericsType.getType();  if (genericsType.isPlaceholder()) {    value=OBJECT_TYPE;  }  ClassNode lowerBound=genericsType.getLowerBound();  if (lowerBound != null) {    value=lowerBound;  } else {    ClassNode[] upperBounds=genericsType.getUpperBounds();    if (upperBounds != null) {      value=WideningCategories.lowestUpperBound(Arrays.asList(upperBounds));    }  }  return value;}  }
class C{  public CDefaultMemoryExpressionBinding(final TargetProcessThread thread,final Memory memory){  m_thread=thread;  m_memory=memory;}  }
class C{  private void init_key(){  P=(int[])P_orig.clone();  S=(int[])S_orig.clone();}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer seriesRenderer,float yAxisValue,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  paint.setColor(seriesRenderer.getColor());  paint.setStyle(Style.FILL);  float halfDiffX=getHalfDiffX(points,length,seriesNr);  for (int i=0; i < length; i+=2) {    float x=points.get(i);    float y=points.get(i + 1);    if (mType == Type.HEAPED && seriesIndex > 0) {      float lastY=mPreviousSeriesPoints.get(i + 1);      y=y + (lastY - yAxisValue);      points.set(i + 1,y);      drawBar(canvas,x,lastY,x,y,halfDiffX,seriesNr,seriesIndex,paint);    } else {      drawBar(canvas,x,yAxisValue,x,y,halfDiffX,seriesNr,seriesIndex,paint);    }  }  paint.setColor(seriesRenderer.getColor());  mPreviousSeriesPoints=points;}  }
class C{  public MicroPipelineFactory(final String processingNodeId,final ComponentRepository componentRepository){  this.processingNodeId=processingNodeId;  this.componentRepository=componentRepository;}  }
class C{  public static ValidationStatus validationStatus(Set<TestAssertion> assertions,ValidationProfile profile,ProcessedObjects objects){  ValidationStatus status=ValidationStatus.VALID;  for (  TestAssertion assertion : assertions) {    if (assertion.getStatus() == Status.FAILED) {      status=checkCurrentRule(profile,objects,assertion,status);    }  }  return status;}  }
class C{  @Override public void run(){  amIActive=true;  String areaHeader=null;  String slopeHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double powerValue=0;  double z=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      areaHeader=args[i];    } else     if (i == 1) {      slopeHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      powerValue=Double.parseDouble(args[i]);    }  }  if ((areaHeader == null) || (slopeHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (powerValue < 0.1) {      powerValue=0.1;    }    if (powerValue > 20) {      powerValue=20;    }    WhiteboxRaster slopeImage=new WhiteboxRaster(slopeHeader,"r");    int rows=slopeImage.getNumberRows();    int cols=slopeImage.getNumberColumns();    double slopeNoData=slopeImage.getNoDataValue();    WhiteboxRaster areaImage=new WhiteboxRaster(areaHeader,"r");    if (areaImage.getNumberRows() != rows || areaImage.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    double areaNoData=areaImage.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",areaHeader,WhiteboxRaster.DataType.FLOAT,areaNoData);    output.setPreferredPalette("blueyellow.pal");    double[] area;    double[] slope;    for (row=0; row < rows; row++) {      area=areaImage.getRowValues(row);      slope=slopeImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (area[col] != areaNoData && slope[col] != slopeNoData) {          if (slope[col] != 0) {            z=(Math.pow(area[col],powerValue)) * (Math.tan(Math.toRadians(slope[col])));          } else {            z=0;          }          output.setValue(row,col,z);        } else {          output.setValue(row,col,areaNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slopeImage.close();    areaImage.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String sort(String list,String sortType,String sortOrder,String delimiter) throws PageException {  return _sort(toStringArray(listToArray(list,delimiter)),sortType,sortOrder,delimiter);}  }
class C{  public p(String value,String align){  addElement(value);  setAlign(align);}  }
class C{  public RowId deleteRow(RowId rowId) throws IOException {  deleteRow(getDefaultCursor().getRowState(),(RowIdImpl)rowId);  return rowId;}  }
class C{  public Object toObject(){  return null;}  }
class C{  public SigmoidInterpolation(){  this(2f);}  }
class C{  public void mouseDragged(final MouseEvent e){  int thumbMiddle=0;  if (!slider.isEnabled())   return;  currentMouseX=e.getX();  currentMouseY=e.getY();  if (!fIsDragging)   return;  slider.setValueIsAdjusting(true);switch (slider.getOrientation()) {case SwingConstants.VERTICAL:    final int halfThumbHeight=thumbRect.height / 2;  int thumbTop=e.getY() - offset;int trackTop=trackRect.y;int trackBottom=trackRect.y + (trackRect.height - 1);final int vMax=yPositionForValue(slider.getMaximum() - slider.getExtent());if (drawInverted()) {trackBottom=vMax;} else {trackTop=vMax;}thumbTop=Math.max(thumbTop,trackTop - halfThumbHeight);thumbTop=Math.min(thumbTop,trackBottom - halfThumbHeight);setThumbLocation(thumbRect.x,thumbTop);thumbMiddle=thumbTop + halfThumbHeight;slider.setValue(valueForYPosition(thumbMiddle));break;case SwingConstants.HORIZONTAL:final int halfThumbWidth=thumbRect.width / 2;int thumbLeft=e.getX() - offset;int trackLeft=trackRect.x;int trackRight=trackRect.x + (trackRect.width - 1);final int hMax=xPositionForValue(slider.getMaximum() - slider.getExtent());if (drawInverted()) {trackLeft=hMax;} else {trackRight=hMax;}thumbLeft=Math.max(thumbLeft,trackLeft - halfThumbWidth);thumbLeft=Math.min(thumbLeft,trackRight - halfThumbWidth);setThumbLocation(thumbLeft,thumbRect.y);thumbMiddle=thumbLeft + halfThumbWidth;slider.setValue(valueForXPosition(thumbMiddle));break;default :return;}if (slider.getSnapToTicks()) {calculateThumbLocation();setThumbLocation(thumbRect.x,thumbRect.y);}}  }
class C{  public void triggerDiscoveryNew(Map<String,StorageSystemViewObject> storageSystemsCache) throws Exception {  Set<String> sysNativeGuidSet=storageSystemsCache.keySet();  ArrayList<DataCollectionJob> jobs=new ArrayList<DataCollectionJob>();  for (  String sysNativeGuid : sysNativeGuidSet) {    StorageSystem system=null;    try {      List<StorageSystem> systems=CustomQueryUtility.getActiveStorageSystemByNativeGuid(_dbClient,sysNativeGuid);      if (systems.isEmpty()) {        continue;      }      system=systems.get(0);      if (0 == system.getLastDiscoveryRunTime()) {        _logger.info("Triggering discovery of new storage system {}",sysNativeGuid);        String taskId=UUID.randomUUID().toString();        DiscoverTaskCompleter completer=new DiscoverTaskCompleter(system.getClass(),system.getId(),taskId,ControllerServiceImpl.DISCOVERY);        jobs.add(new DataCollectionDiscoverJob(completer,Discovery_Namespaces.ALL.toString()));      }    } catch (    Exception e) {      _logger.error("Triggering Manual Array Discovery Failed {}:",system,e);    }  }  _jobScheduler.scheduleMultipleJobs(jobs,ControllerServiceImpl.Lock.DISCOVER_COLLECTION_LOCK);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:04.124 -0400",hash_original_method="8D1FC85EF8B51F3A01D708D9998B3DDE",hash_generated_method="8B05697A3DD6FB4705EA2C4613CCB703") private void processDigest(byte[] digest,int offset){  int i, j;  int lastWord;  long nBits=messageLength << 3;  engineUpdate((byte)0x80);  i=0;  lastWord=(buffer[BYTES_OFFSET] + 3) >> 2;  if (buffer[BYTES_OFFSET] != 0) {    if (lastWord < 15) {      i=lastWord;    } else {      if (lastWord == 15) {        buffer[15]=0;      }      SHA1Impl.computeHash(buffer);      i=0;    }  }  Arrays.fill(buffer,i,14,0);  buffer[14]=(int)(nBits >>> 32);  buffer[15]=(int)(nBits & 0xFFFFFFFF);  SHA1Impl.computeHash(buffer);  j=offset;  for (i=HASH_OFFSET; i < HASH_OFFSET + 5; i++) {    int k=buffer[i];    digest[j]=(byte)(k >>> 24);    digest[j + 1]=(byte)(k >>> 16);    digest[j + 2]=(byte)(k >>> 8);    digest[j + 3]=(byte)(k);    j+=4;  }  engineReset();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void moveViewToY(float yValue,AxisDependency axis){  float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();  Runnable job=new MoveViewJob(mViewPortHandler,0f,yValue + valsInView / 2f,getTransformer(axis),this);  if (mViewPortHandler.hasChartDimens()) {    post(job);  } else {    mJobs.add(job);  }}  }
class C{  @Override public void initializeSchedule(String url,WebPage page){  page.setFetchTime(System.currentTimeMillis());  page.setFetchInterval(defaultInterval);  page.setRetriesSinceFetch(0);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:      return N4JSPackage.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME___GET_NAME;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___GET_NAME:  return N4JSPackage.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME___GET_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == PropertyAssignment.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_ASSIGNMENT___GET_NAME:return N4JSPackage.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME___GET_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  Prepared parse(String sql){  Prepared p;  try {    p=parse(sql,false);  } catch (  DbException e) {    if (e.getErrorCode() == ErrorCode.SYNTAX_ERROR_1) {      p=parse(sql,true);    } else {      throw e.addSQL(sql);    }  }  p.setPrepareAlways(recompileAlways);  p.setParameterList(parameters);  return p;}  }
class C{  boolean enableCacheEntryListener(CacheEntryListenerConfiguration<K,V> listenerConfiguration){  DispatchMode dispatchMode=listenerConfiguration.isSynchronous() ? DispatchMode.SYNC : DispatchMode.ASYNC_TIMED;  ListenerEntry<K,V> newListener=new ListenerEntry<K,V>(listenerConfiguration,tcache,dispatchMode);  boolean added=listeners.add(newListener);  for (  EventType eventType : EventType.values()) {    if (newListener.isListeningFor(eventType)) {      listenerPresent[eventType.ordinal()]=true;    }  }  return added;}  }
class C{  private static void init(final String packageNameToCutOff){  if (doPackageCutOff=!TextUtils.isEmpty(packageNameToCutOff))   Log.packageNameToCutOff=packageNameToCutOff.lastIndexOf(".") == packageNameToCutOff.length() - 1 ? packageNameToCutOff : packageNameToCutOff + ".";}  }
class C{  @SafeVarargs public final FastAdapterDialog<Item> add(Item... items){  mFastItemAdapter.add(items);  return this;}  }
class C{  public static boolean allMissing(int[] real){  for (int i=0; i < real.length; i++) {    if (real[i] != -1) {      return false;    }  }  return true;}  }
class C{  public int loadInstruction32(int addr){  return loadInstruction32(addr,AccessSource.CODE);}  }
class C{  public Builder field(String fieldName){  this.fieldName=fieldName;  return this;}  }
class C{  private QueryBuilderKraken parseSelect(QueryBuilderKraken query){  boolean distinct=false;  Token token=scanToken();  if (token == Token.DISTINCT)   distinct=true; else   _token=token;  ArrayList<ExprKraken> resultItems=new ArrayList<>();  Token startToken=scanToken();  String startLexeme=_lexeme;  int startOffset=_parseIndex;  while ((token=scanToken()) != null && token != Token.EOF && token != Token.FROM) {  }  if (token != Token.FROM) {    throw error("expected FROM at '{0}'",token);  }  _query=query;  String tableName=parseFrom();  query.setTableName(tableName);  token=scanToken();  Token tailToken=token;  int tailOffset=_parseIndex;  _token=startToken;  _parseIndex=startOffset;  _lexeme=startLexeme;  ExprKraken expr=parseSelectExpr();  resultItems.add(expr);  while ((token=scanToken()) == Token.COMMA) {    expr=parseSelectExpr();    resultItems.add(expr);  }  _token=tailToken;  _parseIndex=tailOffset;  token=scanToken();  ExprKraken whereExpr=null;  if (token == Token.WHERE) {    whereExpr=parseExpr();  } else {    _token=token;  }  ParamExpr[] params=_params.toArray(new ParamExpr[_params.size()]);  query.setWhereExpr(whereExpr);  query.setParams(params);  for (int i=resultItems.size() - 1; i >= 0; i--) {    ExprKraken subExpr=resultItems.get(i);  }  ExprKraken[] resultArray=resultItems.toArray(new ExprKraken[resultItems.size()]);  query.setResults(resultArray);  token=scanToken();  if (token != null && token != Token.EOF && token != Token.LIMIT && token != Token.OFFSET) {    throw error("unexpected token at end '{0}'",token);  }  return query;}  }
class C{  public static void registerSdk(URL sdkUrl,String uniqueName) throws CoreException {  SdkManager<GwtSdk> sdkManager=GWTPreferences.getSdkManager();  SdkSet<GwtSdk> sdks=sdkManager.getSdks();  SdkFactory<GwtSdk> factory=GwtSdk.getFactory();  String sdkLocation=sdkUrl.getPath();  GwtSdk newSdk=factory.newInstance(uniqueName,new Path(sdkLocation));  assert (newSdk.validate().isOK());  sdks.add(newSdk);  sdkManager.setSdks(sdks);}  }
class C{  public boolean hasView(final INaviView view){  Preconditions.checkNotNull(view,"IE00190: View argument can not be null");  Preconditions.checkArgument(view.inSameDatabase(m_provider),"IE00192: View and module are not in the same database");  return (view == m_nativeCallgraphView) || m_customViews.contains(view) || m_nativeFlowgraphs.contains(view);}  }
class C{  private static MatrixIndexes computeResultBlockIndex(MatrixIndexes ixout,long ai,long aj,long rows1,long cols1,long rows2,long cols2,int brlen2,int bclen2,boolean rowwise){  long ci, cj, tempc;  long bci, bcj;  if (rowwise) {    tempc=ai * cols1 + aj;    ci=tempc / cols2;    cj=tempc % cols2;    bci=ci / brlen2 + 1;    bcj=cj / bclen2 + 1;  } else {    tempc=ai + rows1 * aj;    ci=tempc % rows2;    cj=tempc / rows2;    bci=ci / brlen2 + 1;    bcj=cj / bclen2 + 1;  }  ixout.setIndexes(bci,bcj);  return ixout;}  }
class C{  @Override @Interruptible public synchronized CodeArray specializeMethod(RVMType type){  int pattern=getPattern(type);  if (VM.BuildWithBaseBootImageCompiler) {    return null;  }  if (VM.VerifyAssertions)   VM._assert(specializedMethods[pattern] != null);  return specializedMethods[pattern].getEntryCodeArray();}  }
class C{  protected static int determineNumReducers(long[] rlen,long[] clen,int defaultNumRed,long numRedGroups){  int ret=defaultNumRed;  long maxNumRed=InfrastructureAnalyzer.getRemoteParallelReduceTasks();  long blockSize=InfrastructureAnalyzer.getHDFSBlockSize() / (1024 * 1024);  long maxSize=-1;  for (int i=0; i < rlen.length; i++) {    long tmp=MatrixBlock.estimateSizeOnDisk(rlen[i],clen[i],rlen[i] * clen[i]) / (1024 * 1024);    maxSize=Math.max(maxSize,tmp);  }  if (InfrastructureAnalyzer.isYarnEnabled())   maxNumRed=Math.max(maxNumRed,YarnClusterAnalyzer.getNumCores() / 2);  ret=(int)Math.max(ret,Math.min(maxSize / blockSize,maxNumRed));  ret=(int)Math.min(ret,numRedGroups);  ret=Math.max(ret,1);  return ret;}  }
class C{  public SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {  SolrInputDocument doc=new SolrInputDocument();  String attrName="";  for (int i=0; i < parser.getAttributeCount(); i++) {    attrName=parser.getAttributeLocalName(i);    if ("boost".equals(attrName)) {      doc.setDocumentBoost(Float.parseFloat(parser.getAttributeValue(i)));    } else {      log.warn("XML element <doc> has invalid XML attr:" + attrName);    }  }  StringBuilder text=new StringBuilder();  String name=null;  float boost=1.0f;  boolean isNull=false;  String update=null;  Collection<SolrInputDocument> subDocs=null;  Map<String,Map<String,Object>> updateMap=null;  boolean complete=false;  while (!complete) {    int event=parser.next();switch (event) {case XMLStreamConstants.SPACE:case XMLStreamConstants.CDATA:case XMLStreamConstants.CHARACTERS:      text.append(parser.getText());    break;case XMLStreamConstants.END_ELEMENT:  if ("doc".equals(parser.getLocalName())) {    if (subDocs != null && !subDocs.isEmpty()) {      doc.addChildDocuments(subDocs);      subDocs=null;    }    complete=true;    break;  } else   if ("field".equals(parser.getLocalName())) {    Object v=isNull ? null : text.toString();    if (update != null) {      if (updateMap == null)       updateMap=new HashMap<>();      Map<String,Object> extendedValues=updateMap.get(name);      if (extendedValues == null) {        extendedValues=new HashMap<>(1);        updateMap.put(name,extendedValues);      }      Object val=extendedValues.get(update);      if (val == null) {        extendedValues.put(update,v);      } else {        if (val instanceof List) {          List list=(List)val;          list.add(v);        } else {          List<Object> values=new ArrayList<>();          values.add(val);          values.add(v);          extendedValues.put(update,values);        }      }      break;    }    doc.addField(name,v,boost);    boost=1.0f;    name=null;  }break;case XMLStreamConstants.START_ELEMENT:text.setLength(0);String localName=parser.getLocalName();if ("doc".equals(localName)) {if (subDocs == null) subDocs=Lists.newArrayList();subDocs.add(readDoc(parser));} else {if (!"field".equals(localName)) {String msg="XML element <doc> has invalid XML child element: " + localName;log.warn(msg);throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,msg);}boost=1.0f;update=null;isNull=false;String attrVal="";for (int i=0; i < parser.getAttributeCount(); i++) {attrName=parser.getAttributeLocalName(i);attrVal=parser.getAttributeValue(i);if (NAME.equals(attrName)) {name=attrVal;} else if ("boost".equals(attrName)) {boost=Float.parseFloat(attrVal);} else if ("null".equals(attrName)) {isNull=StrUtils.parseBoolean(attrVal);} else if ("update".equals(attrName)) {update=attrVal;} else {log.warn("XML element <field> has invalid XML attr: " + attrName);}}}break;}}if (updateMap != null) {for (Map.Entry<String,Map<String,Object>> entry : updateMap.entrySet()) {name=entry.getKey();Map<String,Object> value=entry.getValue();doc.addField(name,value,1.0f);}}return doc;}  }
class C{  public void open() throws IOException, InterruptedException {  if (query != null) {    ref=executeQueryAndWaitForCompletion();  }  schema=getTable(ref).getSchema();}  }
class C{  protected void sequence_TStructMemberList_ThisTypeRefStructural_TypeRef_TypeRefWithModifiers_TypeRefWithoutModifiers(ISerializationContext context,ThisTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  static final public int parseInt(String what,int otherwise){  try {    int offset=what.indexOf('.');    if (offset == -1) {      return Integer.parseInt(what);    } else {      return Integer.parseInt(what.substring(0,offset));    }  } catch (  NumberFormatException e) {  }  return otherwise;}  }
class C{  public static File downloadUrl(URL url,File file) throws IOException {  assert url != null;  assert file != null;  InputStream in=null;  OutputStream out=null;  try {    URLConnection conn=url.openConnection();    if (conn instanceof HttpsURLConnection) {      HttpsURLConnection https=(HttpsURLConnection)conn;      https.setHostnameVerifier(new DeploymentHostnameVerifier());      SSLContext ctx=SSLContext.getInstance(HTTPS_PROTOCOL);      ctx.init(null,getTrustManagers(),null);      https.setSSLSocketFactory(ctx.getSocketFactory());    }    in=conn.getInputStream();    if (in == null)     throw new IOException("Failed to open connection: " + url.toString());    out=new BufferedOutputStream(new FileOutputStream(file));    copy(in,out);  } catch (  NoSuchAlgorithmException|KeyManagementException e) {    throw new IOException("Failed to open HTTPs connection [url=" + url.toString() + ", msg="+ e+ ']',e);  } finally {    close(in,null);    close(out,null);  }  return file;}  }
class C{  public boolean isRunning(){  return mRunning.get();}  }
class C{  private static long lf_delta0(long x){  return lf_S(x,1) ^ lf_S(x,8) ^ lf_R(x,7);}  }
class C{  public static String toString(Object obj){  final StringBuilder sb=new StringBuilder();  toString(obj,sb);  return sb.toString();}  }
class C{  public void verifyHeader() throws VerificationException {  checkProofOfWork(true);  checkTimestamp();}  }
class C{  boolean isPersisted(int id){  int bit=1 << id;  return (persisted & bit) != 0;}  }
class C{  public void add(Name name,int type,long ttl,String record) throws IOException {  newUpdate(Record.fromString(name,type,dclass,ttl,record,origin));}  }
class C{  protected void optionsDialogPropertyChange(PropertyChangeEvent event){  log.debug("internal options dialog handler");  firePropertyChange(PropertyChangeID.OPTION_CHANGE,event.getOldValue(),event.getNewValue());}  }
class C{  public static String formatRateString(float rate){  return String.format(java.util.Locale.US,"%.2fx",rate);}  }
class C{  public void copyXRotationPoint(MowzieModelRenderer target){  rotationPointX=target.rotationPointX;}  }
class C{  private IabHelper.QueryInventoryFinishedListener iabInventoryListener(){  return null;}  }
class C{  public static int computeLazyFieldSize(final int fieldNumber,final LazyField value){  return computeTagSize(fieldNumber) + computeLazyFieldSizeNoTag(value);}  }
class C{  static TrackerEntry createEntry(String tag,String msg){  TrackerEntry entry=new TrackerEntry(tag,EntryType.LOG_TYPE);  String timestampVal=DateUtils.getCurrentKMLTimestamp();  entry.setTimestamp(timestampVal);  entry.setLogMsg(msg);  return entry;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static void validatePaginas(List paginas){  if (paginas != null) {    for (Iterator iterator=paginas.iterator(); iterator.hasNext(); ) {      PaginaDocumentoRegistroVO paginaRegistro=(PaginaDocumentoRegistroVO)iterator.next();      if (paginaRegistro.getName().length() > maxLengthNamePage) {        StringBuffer sb=new StringBuffer();        sb.append("El nombre de la pagina [").append(paginaRegistro.getName()).append("] no puede ser mayor de ").append(maxLengthNamePage).append(" caracteres.");        logger.error(sb.toString());        throw new RegistroException(sb.toString());      }    }  }}  }
class C{  public SamFilterParamsBuilder excludeMated(final boolean val){  mExcludeMated=val;  return this;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (request.getParameter("CM_Ad_ID") != null) {    try {      String CM_Ad_ID=request.getParameter("CM_Ad_ID");      MAd thisAd=new MAd(ctx,Integer.parseInt(CM_Ad_ID),"webCM");      thisAd.addClick(request);      response.sendRedirect(thisAd.getTargetURL());    } catch (    Exception E) {      response.sendError(500,"Internal Error while processing Ad Redirect...");    }  } else {    response.sendError(500,"Unknown or illegal Ad set, can't handle request...");  }}  }
class C{  public List<LookupResult> lookup(CharSequence key,Set<BytesRef> contexts,int num,boolean allTermsRequired,boolean doHighlight) throws IOException {  return lookup(key,toQuery(contexts),num,allTermsRequired,doHighlight);}  }
class C{  public Matrix4x3d(double m00,double m01,double m02,double m10,double m11,double m12,double m20,double m21,double m22,double m30,double m31,double m32){  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m20=m20;  this.m21=m21;  this.m22=m22;  this.m30=m30;  this.m31=m31;  this.m32=m32;  properties=0;}  }
class C{  @Override void releaseWriteLock(){  this.lock.unlock();}  }
class C{  public int totalSizeWith1ForEmpty(){  int size=0;  for (  ShardIterator shard : iterators) {    int sizeActive=shard.size();    if (sizeActive == 0) {      size+=1;    } else {      size+=sizeActive;    }  }  return size;}  }
class C{  public void testGetKnownFileName() throws Exception {  String pId="-//ORACLE//DTD OC4J Web Application 9.04//EN";  String sId="http://xmlns.oracle.com/ias/dtds/orion-web-9_04.dtd";  XmlEntityResolver resolver=new XmlEntityResolver();  String file=resolver.getDtdFileName(pId,sId);  assertEquals(file,"orion-web-9_04.dtd");}  }
class C{  void listActiveItems() throws Exception {  System.out.println("Half Secure Systems Inc. - list active items");  ResultSet rs=stat.executeQuery("SELECT NAME FROM ITEMS WHERE ACTIVE=1");  while (rs.next()) {    System.out.println("Name: " + rs.getString(1));  }}  }
class C{  @Override public final void remove(){  if (_lastReturned == null) {    throw new IllegalStateException("must invoke next or previous before invoking remove");  }  if (_lastReturned != _next) {    _nextIndex--;  }  _next=(T)_lastReturned.getNext();  TLinkedList.this.remove(_lastReturned);  _lastReturned=null;}  }
class C{  public final void buildClassifier(Instances instances) throws Exception {  m_distribution=new Distribution(instances);  m_numSubsets=1;}  }
class C{  private boolean recentlyAttemptedExchangeWithPeer(Peer peer){  long now=(new Date()).getTime();  long then=getNextExchangeAttemptTime(peer).getTime();  return (now < then);}  }
class C{  public void mutableAdd(Vec x_t,Vec cs,final List<Double> qi){  int origSize=getBasisSize();  if (cs.nnz() == 0)   return;  if (budgetStrategy == KernelPoint.BudgetStrategy.PROJECTION) {    for (    IndexValue iv : cs) {      int k=iv.getIndex();      KernelPoint kp_k=points.get(k);      double c=iv.getValue();      if (kp_k.getBasisSize() == 0) {        kp_k.mutableAdd(c,x_t,qi);        for (int i=0; i < points.size(); i++) {          if (i == k)           continue;          KernelPoint kp_i=points.get(i);          standardMove(kp_i,kp_k);          kp_i.kernelAccel=kp_k.kernelAccel;          kp_i.vecs=kp_k.vecs;          kp_i.alpha=new DoubleList(16);          kp_i.alpha.add(0.0);        }      } else {        kp_k.mutableAdd(c,x_t,qi);        if (origSize != kp_k.getBasisSize()) {          for (int i=0; i < points.size(); i++)           if (i != k) {            KernelPoint kp_i=points.get(i);            standardMove(kp_i,kp_k);            kp_i.alpha.add(0.0);          }        }      }      origSize=getBasisSize();    }  } else   if (budgetStrategy == KernelPoint.BudgetStrategy.MERGE_RBF) {    Iterator<IndexValue> cIter=cs.getNonZeroIterator();    if (getBasisSize() < maxBudget) {      IndexValue firstIndx=cIter.next();      KernelPoint kp_k=points.get(firstIndx.getIndex());      kp_k.mutableAdd(firstIndx.getValue(),x_t,qi);      while (cIter.hasNext()) {        IndexValue iv=cIter.next();        points.get(iv.getIndex()).alpha.add(iv.getValue());      }      addMissingZeros();    } else {      KernelPoint kp_k=points.get(0);      kp_k.vecs.add(x_t);      if (kp_k.kernelAccel != null)       kp_k.kernelAccel.addAll(qi);      for (      IndexValue iv : cs)       points.get(iv.getIndex()).alpha.add(iv.getValue());      addMissingZeros();      int m=0;      double alpha_m=0;      for (      KernelPoint kp : points)       alpha_m+=pow(kp.alpha.getD(m),2);      for (int i=1; i < kp_k.alpha.size(); i++) {        double tmp=0;        for (        KernelPoint kp : points)         tmp+=pow(kp.alpha.getD(i),2);        if (tmp < alpha_m) {          alpha_m=tmp;          m=i;        }      }      double minLoss=Double.POSITIVE_INFINITY;      int n=-1;      double n_h=0;      double tol=1e-3;      double n_k_mz=0;      double n_k_nz=0;      while (n == -1) {        for (int i=0; i < kp_k.alpha.size(); i++) {          if (i == m)           continue;          double a_m=0, a_n=0;          for (          KernelPoint kp : points) {            double a1=kp.alpha.getD(m);            double a2=kp.alpha.getD(i);            double normalize=a1 + a2;            if (normalize < 1e-7)             continue;            a_m+=a1 / normalize;            a_n+=a2 / normalize;          }          if (abs(a_m + a_n) < tol)           break;          double k_mn=this.k.eval(i,m,kp_k.vecs,kp_k.kernelAccel);          double h=getH(k_mn,a_m,a_n);          double k_mz=pow(k_mn,(1 - h) * (1 - h));          double k_nz=pow(k_mn,h * h);          double loss=0;          for (          KernelPoint kp : points) {            double aml=kp.alpha.getD(m);            double anl=kp.alpha.getD(i);            double alpha_z=aml * k_mz + anl * k_nz;            loss+=aml * aml + anl * anl + 2 * k_mn * aml* anl - alpha_z * alpha_z;          }          if (loss < minLoss) {            minLoss=loss;            n=i;            n_h=h;            n_k_mz=k_mz;            n_k_nz=k_nz;          }        }        tol/=10;      }      Vec n_z=kp_k.vecs.get(m).multiply(n_h);      n_z.mutableAdd(1 - n_h,kp_k.vecs.get(n));      final List<Double> nz_qi=this.k.getQueryInfo(n_z);      for (int z=0; z < points.size(); z++) {        KernelPoint kp=points.get(z);        double aml=kp.alpha.getD(m);        double anl=kp.alpha.getD(n);        double alpha_z=aml * n_k_mz + anl * n_k_nz;        kp.finalMergeStep(m,n,n_z,nz_qi,alpha_z,z == 0);      }    }  } else   if (budgetStrategy == KernelPoint.BudgetStrategy.STOP) {    if (getBasisSize() < maxBudget) {      this.points.get(0).vecs.add(x_t);      if (this.points.get(0).kernelAccel != null)       this.points.get(0).kernelAccel.addAll(qi);      for (      IndexValue iv : cs)       this.points.get(iv.getIndex()).alpha.add(iv.getValue());      addMissingZeros();    }  } else   if (budgetStrategy == KernelPoint.BudgetStrategy.RANDOM) {    if (getBasisSize() >= maxBudget) {      int toRemove=new Random().nextInt(getBasisSize());      if (getBasisSize() == maxBudget)       this.points.get(0).removeIndex(toRemove);      for (int i=1; i < this.points.size(); i++)       this.points.get(i).removeIndex(toRemove);    }    this.points.get(0).vecs.add(x_t);    if (this.points.get(0).kernelAccel != null)     this.points.get(0).kernelAccel.addAll(qi);    for (    IndexValue iv : cs)     this.points.get(iv.getIndex()).alpha.add(iv.getValue());    addMissingZeros();  } else   throw new RuntimeException("BUG: Report Me!");}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"USUB8");  translateAll(environment,instruction,"USUB8",instructions);}  }
class C{  public Vector3f mult(float scalar){  return new Vector3f(x * scalar,y * scalar,z * scalar);}  }
class C{  ServerSessionContext clearResults(long sequence){  if (sequence > commandLowWaterMark) {    for (long i=commandLowWaterMark + 1; i <= sequence; i++) {      results.remove(i);      commandLowWaterMark=i;    }  }  return this;}  }
class C{  public boolean displayTopic(String name){  String topic=null;  if (name == null)   topic=DEFAULT + FILE_TYPE; else   topic=name.toLowerCase() + FILE_TYPE;  File helpFile=new File(helpDir,topic);  return display(helpFile);}  }
class C{  public void associateQueen(Queen queen){  queenForeignKeyContainer=FlowManager.getContainerAdapter(Queen.class).toForeignKeyContainer(queen);}  }
class C{  private int maxRegLevel(int ref,int q){  return numberSharedLevels(pf[ref].hilbert,pf[q].hilbert) + 1;}  }
class C{  public DecoFlowers(int[] f){  flowers=f;}  }
class C{  public static boolean searchForKey(PartitionedRegion par,Date key){  boolean foundIt=false;  final int numBucks=par.getTotalNumberOfBuckets();  for (int b=0; b < numBucks; b++) {    if (par.getBucketKeys(b).contains(key)) {      foundIt=true;      LogWriterUtils.getLogWriter().info("Key " + key + " found in bucket "+ b);      break;    }  }  if (!foundIt) {    LogWriterUtils.getLogWriter().severe("Key " + key + " not found in any bucket");  }  return foundIt;}  }
class C{  public static void initiateClientTileEntityEvent(TileEntity te,int event){  try {    if (NetworkManager_initiateClientTileEntityEvent == null)     NetworkManager_initiateClientTileEntityEvent=Class.forName(getPackage() + ".core.network.NetworkManager").getMethod("initiateClientTileEntityEvent",TileEntity.class,Integer.TYPE);    if (instance == null)     instance=getInstance();    NetworkManager_initiateClientTileEntityEvent.invoke(instance,te,event);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void range(IHypercube space,IVisitKDNode visitor){  if (root == null) {    return;  }  root.range(space,visitor);}  }
class C{  public boolean dump_cg(){  return soot.PhaseOptions.getBoolean(options,"dump-cg");}  }
class C{  @Override public byte[] serialize(){  short padding=0;  if (paddingMap.containsKey(this.icmpType))   padding=paddingMap.get(this.icmpType);  int length=4 + padding;  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();    length+=payloadData.length;  }  byte[] data=new byte[length];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.put(this.icmpType);  bb.put(this.icmpCode);  bb.putShort(this.checksum);  for (int i=0; i < padding; i++)   bb.put((byte)0);  if (payloadData != null)   bb.put(payloadData);  if (this.parent != null && this.parent instanceof IPv4)   ((IPv4)this.parent).setProtocol(IpProtocol.ICMP);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    for (int i=0; i < length / 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    if (length % 2 > 0) {      accumulation+=(bb.get() & 0xff) << 8;    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(2,this.checksum);  }  return data;}  }
class C{  public synchronized boolean removeFirst(K obj){  if (head.obj != obj) {    return false;  }  head=head.next;  return true;}  }
class C{  public void run(int timeFrame,long endTimeStamp) throws Exception {  AzJobChecker azJobChecker=new AzJobChecker(prop);  List<AzkabanJobExecRecord> jobExecList=azJobChecker.getRecentFinishedJobFromFlow(timeFrame,endTimeStamp);  azJobChecker.close();  logger.info("Total number of azkaban jobs : {}",jobExecList.size());  ActorSystem actorSystem=ActorSystem.create("LineageExtractor");  int numOfActor=Integer.valueOf(prop.getProperty(Constant.LINEAGE_ACTOR_NUM,"50"));  ActorRef lineageExtractorActor=actorSystem.actorOf(new SmallestMailboxPool(numOfActor).props(Props.create(AzLineageExtractorActor.class)),"lineageExtractorActor");  HadoopJobHistoryNodeExtractor hnne=new HadoopJobHistoryNodeExtractor(prop);  AzDbCommunicator adc=new AzDbCommunicator(prop);  String wherehowsUrl=prop.getProperty(Constant.WH_DB_URL_KEY);  String wherehowsUserName=prop.getProperty(Constant.WH_DB_USERNAME_KEY);  String wherehowsPassWord=prop.getProperty(Constant.WH_DB_PASSWORD_KEY);  String connUrl=wherehowsUrl + "?" + "user="+ wherehowsUserName+ "&password="+ wherehowsPassWord;  Connection conn=DriverManager.getConnection(connUrl);  DatabaseWriter databaseWriter=new DatabaseWriter(connUrl,"stg_job_execution_data_lineage");  AzLogParser.initialize(conn);  PathAnalyzer.initialize(conn);  int timeout=30;  if (prop.containsKey(Constant.LINEAGE_ACTOR_TIMEOUT_KEY))   timeout=Integer.valueOf(prop.getProperty(Constant.LINEAGE_ACTOR_TIMEOUT_KEY));  List<Future<Object>> result=new ArrayList<>();  for (  AzkabanJobExecRecord aje : jobExecList) {    AzExecMessage message=new AzExecMessage(aje,prop);    message.asc=null;    message.hnne=hnne;    message.adc=adc;    message.databaseWriter=databaseWriter;    message.connection=conn;    Timeout t=new Timeout(timeout,TimeUnit.SECONDS);    Future<Object> fut=Patterns.ask(lineageExtractorActor,message,t);    result.add(fut);  }  Future<Iterable<Object>> seq=Futures.sequence(result,actorSystem.dispatcher());  try {    Await.result(seq,Duration.create(timeout + " seconds"));  } catch (  TimeoutException exception) {    exception.printStackTrace();  }  adc.close();  hnne.close();  databaseWriter.close();  logger.info("All job finished lineage collecting!");}  }
class C{  public InvalidKeyException(){  super();}  }
class C{  public static void debug(Object s){  debugPlain(BBC.PREFIX.original() + " " + s);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:56.147 -0500",hash_original_method="F400F1CB4F55C1DB38DB506118AEBF9E",hash_generated_method="399E1A91FCB7925032E7C1A70F4E4379") public int[] startSubnegotiationLocal(){  return null;}  }
class C{  private void reparentChildren(CacheDataPage cacheDataPage) throws IOException {  DataPageMain dpMain=cacheDataPage._main;  DataPageExtra dpExtra=cacheDataPage._extra;  for (  Entry entry : dpExtra._entryView) {    Integer childPageNumber=entry.getSubPageNumber();    DataPageMain childMain=_dataPages.get(childPageNumber);    if (childMain != null) {      childMain.setParentPage(dpMain._pageNumber,dpMain.isChildTailPageNumber(childPageNumber));    }  }}  }
class C{  @Override public int executeUpdate(String sql) throws SQLException {  try {    debugCodeCall("executeUpdate",sql);    return executeUpdateInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public RecycledViewRenderer recycleWith(Context ctx,int layoutResId){  return recycleWith(ctx,LayoutInflater.from(ctx).inflate(layoutResId,null));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.util.HashSet curr=new java.util.HashSet(java.util.Arrays.asList(stack.getUIMgrSafe().getVideoFrame().getPCRestrictions()));  if (evalBool(stack.pop())) {    if (curr.add(getString(stack)))     stack.getUIMgrSafe().getVideoFrame().setPCRestrictions((String[])curr.toArray(Pooler.EMPTY_STRING_ARRAY));  } else   if (curr.remove(getString(stack)))   stack.getUIMgrSafe().getVideoFrame().setPCRestrictions((String[])curr.toArray(Pooler.EMPTY_STRING_ARRAY));  return null;}  }
class C{  @Override protected void dispatchSaveInstanceState(SparseArray<Parcelable> container){  dispatchFreezeSelfOnly(container);}  }
class C{  @Override public void reset() throws IOException {synchronized (lock) {    if (isOpen()) {      pos=markpos != -1 ? markpos : 0;    } else {      throw new IOException("StringReader is closed");    }  }}  }
class C{  void computeNextElement(){  while (true) {    if (currentBits != 0) {      mask=currentBits & -currentBits;      return;    } else     if (++index < bits.length) {      currentBits=bits[index];    } else {      mask=0;      return;    }  }}  }
class C{  @Override public int hashCode(){  return hashcode;}  }
class C{  @Override protected PlotData2D createPlotData(String name) throws Exception {  PlotData2D result;  if (!m_SaveForVisualization) {    return null;  }  result=new PlotData2D(m_PlotInstances);  result.setShapeSize(m_PlotSizes);  result.setShapeType(m_PlotShapes);  result.setPlotName(name + " (" + m_Instances.relationName()+ ")");  return result;}  }
class C{  public static String toString(long l){  if (l < NUMBERS_MIN || l > NUMBERS_MAX) {    return Long.toString(l,10);  }  return NUMBERS[(int)l];}  }
class C{  private String removeHtmlTagsAndSpaces(final String strValue){  String returnValue=null;  if (strValue != null) {    final Reader strReader=new StringReader(strValue);    final MyHtmlParser parser=new MyHtmlParser();    returnValue=parser.parseMyHtml(strReader,true);  }  return returnValue;}  }
class C{  public SIPDate(){  wkday=-1;  day=-1;  month=-1;  year=-1;  hour=-1;  minute=-1;  second=-1;  javaCal=null;}  }
class C{  public final double value(int i){  return data[i];}  }
class C{  @Override public void run(){  amIActive=true;  String sourceHeader=null;  String outputHeader=null;  String backLinkHeader=null;  WhiteboxRaster sourceImage;  WhiteboxRaster output;  WhiteboxRaster backLink;  int cols, rows;  double z, flowDir;  float progress=0;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double lnOf2=0.693147180559945;  double gridRes;  int col, row, a;  int c;  int x, y, i;  boolean flag=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      sourceHeader=args[i];    } else     if (i == 1) {      backLinkHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((sourceHeader == null) || (backLinkHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    sourceImage=new WhiteboxRaster(sourceHeader,"r");    rows=sourceImage.getNumberRows();    cols=sourceImage.getNumberColumns();    double noData=sourceImage.getNoDataValue();    gridRes=(sourceImage.getCellSizeX() + sourceImage.getCellSizeY()) / 2;    backLink=new WhiteboxRaster(backLinkHeader,"r");    if (backLink.getNumberColumns() != cols || backLink.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",sourceHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(sourceImage.getPreferredPalette());    updateProgress("Loop 1 of 2:",0);    double[] data;    for (row=0; row < rows; row++) {      data=sourceImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] > 0) {          output.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (backLink.getValue(row,col) != noData && output.getValue(row,col) == noData) {          x=col;          y=row;          z=noData;          flag=true;          do {            flowDir=backLink.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / lnOf2);              x+=dX[c];              y+=dY[c];              if (output.getValue(y,x) > 0) {                z=output.getValue(y,x);                flag=false;              }            } else {              z=output.getValue(y,x);              flag=false;            }          } while (flag);          x=col;          y=row;          flag=true;          do {            output.setValue(y,x,z);            flowDir=backLink.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / lnOf2);              x+=dX[c];              y+=dY[c];              if (output.getValue(y,x) > 0) {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    sourceImage.close();    backLink.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static public Pose toOpenGLPose(TangoPoseData tangoPose){  Matrix4 start_service_T_device=tangoPoseToMatrix(tangoPose);  Matrix4 opengl_world_T_device=OPENGL_T_TANGO_WORLD.clone().multiply(start_service_T_device);  return matrixToPose(opengl_world_T_device);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  void removeSetting(String name){  connInfoMap.remove(name);}  }
class C{  private String globToRegex(String glob){  if (glob.charAt(0) == '.' || glob.contains("/") || glob.contains("~")) {    throw new IllegalArgumentException("Invalid character in file glob");  }  glob=glob.replace(".","\\.");  glob=glob.replace("*",".+");  glob=glob.replace("?",".{1}+");  return glob;}  }
class C{  private GPNode ptc1(final EvolutionState state,final int current,final GPType type,final int thread,final GPNodeParent parent,final int argposition,final GPFunctionSet set,final PTCFunctionSetForm pset,final double[] nonterminalSelectionProbabilities){  boolean triedTerminals=false;  int t=type.type;  GPNode[] terminals=set.terminals[t];  GPNode[] nonterminals=set.nonterminals[t];  GPNode[] nodes=set.nodes[t];  if (nodes.length == 0)   errorAboutNoNodeWithType(type,state);  if (((current + 1 >= maxDepth) || !(state.random[thread].nextBoolean(nonterminalSelectionProbabilities[t])) || warnAboutNonterminal(nonterminals.length == 0,type,false,state)) && (triedTerminals=true) && terminals.length != 0) {    GPNode n=(GPNode)terminals[RandomChoice.pickFromDistribution(pset.terminalProbabilities(t),state.random[thread].nextDouble())].lightClone();    n.resetNode(state,thread);    n.argposition=(byte)argposition;    n.parent=parent;    return n;  } else {    if (triedTerminals)     warnAboutNoTerminalWithType(type,false,state);    GPNode n=(GPNode)nonterminals[RandomChoice.pickFromDistribution(pset.nonterminalProbabilities(t),state.random[thread].nextDouble())].lightClone();    n.resetNode(state,thread);    n.argposition=(byte)argposition;    n.parent=parent;    GPType[] childtypes=n.constraints(((GPInitializer)state.initializer)).childtypes;    for (int x=0; x < childtypes.length; x++)     n.children[x]=ptc1(state,current + 1,childtypes[x],thread,n,x,set,pset,nonterminalSelectionProbabilities);    return n;  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static int calculateContrastingColor(final int color){  final boolean isLightColor=isLightColor(color);  final int alpha=isLightColor ? OPAQUE_ALPHA : TRANSPARENT_ALPHA;  final int rgbColor=isLightColor ? COLOR_PARTIALLY_BLACK : COLOR_FULLY_WHITE;  return Color.argb(alpha,rgbColor,rgbColor,rgbColor);}  }
class C{  final private void computeNextState(IntGrid2D d,IntGrid2D s,int x,int y){  int cell=s.get(x,y);  if (cell == 0) {    int cNW=s.get(s.stx(x - 1),s.sty(y - 1));    int cN=s.get(s.stx(x),s.sty(y - 1));    int cNE=s.get(s.stx(x + 1),s.sty(y - 1));    int cW=s.get(s.stx(x - 1),s.sty(y));    int cE=s.get(s.stx(x + 1),s.sty(y));    int cSW=s.get(s.stx(x - 1),s.sty(y + 1));    int cS=s.get(s.stx(x),s.sty(y + 1));    int cSE=s.get(s.stx(x + 1),s.sty(y + 1));    int aN=p.replication[cN] + p.rSupport[cN][cNE] + p.rSupport[cN][cNW]+ p.rSupport[cN][cE]+ p.rSupport[cN][cW];    int aS=p.replication[cS] + p.rSupport[cS][cSE] + p.rSupport[cS][cSW]+ p.rSupport[cS][cE]+ p.rSupport[cS][cW];    int aE=p.replication[cE] + p.rSupport[cE][cNE] + p.rSupport[cE][cSE]+ p.rSupport[cE][cN]+ p.rSupport[cE][cS];    int aW=p.replication[cW] + p.rSupport[cW][cNW] + p.rSupport[cW][cSW]+ p.rSupport[cW][cN]+ p.rSupport[cW][cS];    int a=p.aEmpty + aN + aS+ aE+ aW;    float pEmpty=(float)p.aEmpty / (float)a;    float pN=(float)aN / (float)a;    float pS=(float)aS / (float)a;    float pE=(float)aE / (float)a;    float pW=(float)aW / (float)a;    pS+=pN;    pE+=pS;    pW+=pE;    pEmpty+=pW;    float r=p.r.nextFloat();    if (r < pN)     cell=cN; else     if (r < pS)     cell=cS; else     if (r < pE)     cell=cE; else     if (r < pW)     cell=cW;  } else {    if (p.r.nextFloat() < p.decays[cell])     cell=0;  }  d.set(x,y,cell);}  }
class C{  private ASN1Primitive toASN1Object(X509Certificate cert) throws CertificateEncodingException {  try {    return new ASN1InputStream(cert.getEncoded()).readObject();  } catch (  Exception e) {    throw new CertificateEncodingException("Exception while encoding certificate: " + e.toString());  }}  }
class C{  public CFunctionReplacement(final INaviFunction function){  m_function=function;  m_function.addListener(m_listener);}  }
class C{  public static void received(UID id){  DGCAckHandler h=idTable.remove(id);  if (h != null) {    h.release();  }}  }
class C{  public boolean hasCriticalHeap(){  return this.criticalHeapSet;}  }
class C{  public char next(char c) throws JSONException {  char n=next();  if (n != c) {    throw syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'.");  }  return n;}  }
class C{  private void parseList(String list,String prefix){  String[] split2=list.split(",");  for (  String part : split2) {    if (!part.isEmpty()) {      if (prefix.equals("chan:")) {        channels.add(Helper.toChannel(part));      } else       if (prefix.equals("!chan:")) {        notChannels.add(Helper.toChannel(part));      } else       if (prefix.equals("config:")) {        if (part.equals("silent")) {          noSound=true;        } else         if (part.equals("!notify")) {          noNotification=true;        } else         if (part.equals("info")) {          appliesToInfo=true;        }      }    }  }}  }
class C{  public UpdateRequest fields(String... fields){  this.fields=fields;  return this;}  }
class C{  public void cancel(){  this.cancelled=true;}  }
class C{  public Builder cacheOnDisk(boolean cacheOnDisk){  this.cacheOnDisk=cacheOnDisk;  return this;}  }
class C{  protected void save(T model){  getModelClient().save(model);  Assert.assertNotNull("ID was not set",model.getId());  Assert.assertNotNull("CreationTime was not set",model.getCreationTime());  Assert.assertNotNull("Inactive was not set",model.getInactive());}  }
class C{  public boolean isPrepayment(){  Object oo=get_Value(COLUMNNAME_IsPrepayment);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static double min(double a,double b){  return a < b ? a : b;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public AnnotationStyle(){  this(AnnotationColor.YELLOW,AnnotationAlignment.CENTER);}  }
class C{  Node<K,V> findLast(){  Index<K,V> q=head;  for (; ; ) {    Index<K,V> d, r;    if ((r=q.right) != null) {      if (r.indexesDeletedNode()) {        q.unlink(r);        q=head;      } else       q=r;    } else     if ((d=q.down) != null) {      q=d;    } else {      Node<K,V> b=q.node;      Node<K,V> n=b.next;      for (; ; ) {        if (n == null)         return b.isBaseHeader() ? null : b;        Node<K,V> f=n.next;        if (n != b.next)         break;        Object v=n.value;        if (v == null) {          n.helpDelete(b,f);          break;        }        if (v == n || b.value == null)         break;        b=n;        n=f;      }      q=head;    }  }}  }
class C{  public static String removeQueryParameters(Uri uri){  assert (uri.getAuthority() != null);  assert (uri.getPath() != null);  Uri.Builder builder=new Uri.Builder();  builder.scheme(uri.getScheme());  builder.encodedAuthority(uri.getAuthority());  builder.encodedPath(uri.getPath());  return builder.build().toString();}  }
class C{  protected SVGOMLinearGradientElement(){}  }
class C{  public static void deactivate(Remote remote,ActivationID id){  final long deactivateSleepTime=100;  for (int i=0; i < 50; i++) {    try {      if (Activatable.inactive(id) == true) {        mesg("inactive successful");        return;      } else {        mesg("inactive trial failed. Sleeping " + deactivateSleepTime + " milliseconds before next trial");        Thread.sleep(deactivateSleepTime);      }    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();      mesg("Thread interrupted while trying to deactivate activatable. Exiting deactivation");      return;    }catch (    Exception e) {      try {        mesg("Unexpected exception. Have to forcibly unexport the object." + " Exception was :");        e.printStackTrace();        Activatable.unexportObject(remote,true);      } catch (      NoSuchObjectException ex) {      }      return;    }  }  mesg("unable to inactivate after several attempts");  mesg("unexporting object forcibly instead");  try {    Activatable.unexportObject(remote,true);  } catch (  NoSuchObjectException e) {  }}  }
class C{  public static float distanceBetweenPoints(CGPoint point1,CGPoint point2){  return (float)Math.sqrt(((point2.x - point1.x) * (point2.x - point1.x)) + ((point2.y - point1.y) * (point2.y - point1.y)));}  }
class C{  @Override public void close() throws SQLException {  try {    debugCodeCall("close");    closeInternal();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public AutoCloseInputStream(InputStream in){  this.in=in;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().timeJump(getLong(stack));  return null;}  }
class C{  public static <T,K,L extends List<T>>BiConsumer<Partition<T,K,L>,T> processOnInsert(){  return null;}  }
class C{  public Statement createStatement() throws SQLException {  checkConnection();  return new MariaDbStatement(this,ResultSet.TYPE_FORWARD_ONLY);}  }
class C{  public AbstractCompositeListener(){  listeners=new OrderedComposite<T>();}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new MotifEditorPaneUI();}  }
class C{  public Boolean isHotRemoveSupported(){  return hotRemoveSupported;}  }
class C{  private static int type(final ClassWriter cw,final String desc){  String t;  int index=desc.charAt(0) == '(' ? desc.indexOf(')') + 1 : 0;switch (desc.charAt(index)) {case 'V':    return 0;case 'Z':case 'C':case 'B':case 'S':case 'I':  return INTEGER;case 'F':return FLOAT;case 'J':return LONG;case 'D':return DOUBLE;case 'L':t=desc.substring(index + 1,desc.length() - 1);return OBJECT | cw.addType(t);default :int data;int dims=index + 1;while (desc.charAt(dims) == '[') {++dims;}switch (desc.charAt(dims)) {case 'Z':data=BOOLEAN;break;case 'C':data=CHAR;break;case 'B':data=BYTE;break;case 'S':data=SHORT;break;case 'I':data=INTEGER;break;case 'F':data=FLOAT;break;case 'J':data=LONG;break;case 'D':data=DOUBLE;break;default :t=desc.substring(dims + 1,desc.length() - 1);data=OBJECT | cw.addType(t);}return (dims - index) << 28 | data;}}  }
class C{  protected void drawCheckmarks(DrawContext dc,Iterable<NodeLayout> nodes){  Dimension selectedSymbolSize=this.getSelectedSymbolSize();  TreeAttributes attributes=this.getActiveAttributes();  Color color=attributes.getColor();  GL2 gl=dc.getGL().getGL2();  OGLUtil.applyColor(gl,color,1,false);  try {    gl.glEnable(GL.GL_LINE_SMOOTH);    gl.glBegin(GL2.GL_LINES);    for (    NodeLayout layout : nodes) {      int vertAdjust=layout.bounds.height - selectedSymbolSize.height - (this.lineHeight - selectedSymbolSize.height) / 2;      String selected=layout.node.isTreeSelected();      boolean checked=TreeNode.SELECTED.equals(selected);      if (checked) {        int x=layout.drawPoint.x;        int y=layout.drawPoint.y + vertAdjust;        gl.glVertex2f(x + selectedSymbolSize.width * 0.3f - 1,y + selectedSymbolSize.height * 0.6f);        gl.glVertex2f(x + selectedSymbolSize.width * 0.3f - 1,y + selectedSymbolSize.height * 0.2f + 1);        gl.glVertex2f(x + selectedSymbolSize.width * 0.3f - 1,y + selectedSymbolSize.height * 0.2f + 1);        gl.glVertex2f(x + selectedSymbolSize.width * 0.8f - 1,y + selectedSymbolSize.height * 0.8f);      }    }  }  finally {    gl.glEnd();    gl.glDisable(GL.GL_LINE_SMOOTH);  }}  }
class C{  private void triggerPainting(){  if (frame.getState() != Frame.ICONIFIED) {    paintCounter++;    if (frame.isActive() || System.getProperty("stendhal.skip.inactive","false").equals("false") || paintCounter >= 20) {      paintCounter=0;      logger.debug("Draw screen");      minimap.refresh();      containerPanel.repaintChildren();      screen.repaint();    }  }}  }
class C{  @Inline @Entrypoint public static Word wordFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_WORD_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().wordRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return Word.zero();}  }
class C{  public static void d(String tag,String s,Object... args){  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,String.format(s,args));}  }
class C{  public float prod(){  float p=1.0f;  for (int i=0; i < length; i++) {    p*=get(i);  }  return p;}  }
class C{  protected DimensionalNode construct(IMultiPoint value){  if (this.dimension == max) {    return new DimensionalNode(1,value);  } else {    return new DimensionalNode(dimension + 1,value);  }}  }
class C{  public Yytoken yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    boolean zzR=false;    for (zzCurrentPosL=zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {switch (zzBufferL[zzCurrentPosL]) {case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':        yyline++;      zzR=false;    break;case '\r':  yyline++;zzR=true;break;case '\n':if (zzR) zzR=false; else {yyline++;}break;default :zzR=false;}}if (zzR) {boolean zzPeek;if (zzMarkedPosL < zzEndReadL) zzPeek=zzBufferL[zzMarkedPosL] == '\n'; else if (zzAtEOF) zzPeek=false; else {boolean eof=zzRefill();zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;if (eof) zzPeek=false; else zzPeek=zzBufferL[zzMarkedPosL] == '\n';}if (zzPeek) yyline--;}zzAction=-1;zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;zzState=zzLexicalState;zzForAction: {while (true) {if (zzCurrentPosL < zzEndReadL) zzInput=zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {zzInput=YYEOF;break zzForAction;} else {zzCurrentPos=zzCurrentPosL;zzMarkedPos=zzMarkedPosL;boolean eof=zzRefill();zzCurrentPosL=zzCurrentPos;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;zzEndReadL=zzEndRead;if (eof) {zzInput=YYEOF;break zzForAction;} else {zzInput=zzBufferL[zzCurrentPosL++];}}int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];if (zzNext == -1) break zzForAction;zzState=zzNext;int zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;zzMarkedPosL=zzCurrentPosL;if ((zzAttributes & 8) == 8) break zzForAction;}}}zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 9:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [32] { return (new Yytoken(1,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(1,yytext(),yyline,yychar,yychar + 1));}case 33:break;case 12:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [35] { return (new Yytoken(4,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(4,yytext(),yyline,yychar,yychar + 1));}case 34:break;case 23:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [51] { return (new Yytoken(20,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(20,yytext(),yyline,yychar,yychar + 1));}case 35:break;case 15:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [38] { return (new Yytoken(7,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(7,yytext(),yyline,yychar,yychar + 1));}case 36:break;case 3:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [72] { return (new Yytoken(43,yytext(),yyline,yychar,yychar+yylength())); }");{return (new Yytoken(43,yytext(),yyline,yychar,yychar + yylength()));}case 37:break;case 22:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [49] { return (new Yytoken(18,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(18,yytext(),yyline,yychar,yychar + 1));}case 38:break;case 19:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [42] { return (new Yytoken(11,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(11,yytext(),yyline,yychar,yychar + 1));}case 39:break;case 5:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [64] { String str =  yytext().substring(1,yytext().length());" + zzNL + "    Utility.error(Utility.E_UNCLOSEDSTR);"+ zzNL+ "    return (new Yytoken(41,str,yyline,yychar,yychar + str.length())); }");{String str=yytext().substring(1,yytext().length());Utility.error(Utility.E_UNCLOSEDSTR);return (new Yytoken(41,str,yyline,yychar,yychar + str.length()));}case 40:break;case 20:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [45] { return (new Yytoken(14,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(14,yytext(),yyline,yychar,yychar + 1));}case 41:break;case 17:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [40] { return (new Yytoken(9,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(9,yytext(),yyline,yychar,yychar + 1));}case 42:break;case 10:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [33] { return (new Yytoken(2,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(2,yytext(),yyline,yychar,yychar + 1));}case 43:break;case 2:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [84] { System.out.println(\"Illegal character: <\" + yytext() + \">\");" + zzNL + "\tUtility.error(Utility.E_UNMATCHED); }");{System.out.println("Illegal character: <" + yytext() + ">");Utility.error(Utility.E_UNMATCHED);}case 44:break;case 13:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [36] { return (new Yytoken(5,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(5,yytext(),yyline,yychar,yychar + 1));}case 45:break;case 24:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [52] { return (new Yytoken(21,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(21,yytext(),yyline,yychar,yychar + 1));}case 46:break;case 7:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [43] { return (new Yytoken(12,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(12,yytext(),yyline,yychar,yychar + 1));}case 47:break;case 26:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [57] { yybegin(COMMENT); comment_count++; }");{yybegin(COMMENT);comment_count++;}case 48:break;case 32:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [77] { if (--comment_count == 0) yybegin(YYINITIAL); }");{if (--comment_count == 0) yybegin(YYINITIAL);}case 49:break;case 30:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [50] { return (new Yytoken(19,yytext(),yyline,yychar,yychar+2)); }");{return (new Yytoken(19,yytext(),yyline,yychar,yychar + 2));}case 50:break;case 25:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [59] { String str =  yytext().substring(1,yylength()-1);" + zzNL + "    return (new Yytoken(40,str,yyline,yychar,yychar+yylength())); }");{String str=yytext().substring(1,yylength() - 1);return (new Yytoken(40,str,yyline,yychar,yychar + yylength()));}case 51:break;case 8:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [31] { return (new Yytoken(0,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(0,yytext(),yyline,yychar,yychar + 1));}case 52:break;case 29:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [46] { return (new Yytoken(15,yytext(),yyline,yychar,yychar+2)); }");{return (new Yytoken(15,yytext(),yyline,yychar,yychar + 2));}case 53:break;case 11:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [34] { return (new Yytoken(3,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(3,yytext(),yyline,yychar,yychar + 1));}case 54:break;case 14:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [37] { return (new Yytoken(6,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(6,yytext(),yyline,yychar,yychar + 1));}case 55:break;case 31:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [76] { comment_count++; }");{comment_count++;}case 56:break;case 18:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [41] { return (new Yytoken(10,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(10,yytext(),yyline,yychar,yychar + 1));}case 57:break;case 6:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [44] { return (new Yytoken(13,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(13,yytext(),yyline,yychar,yychar + 1));}case 58:break;case 27:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [53] { return (new Yytoken(22,yytext(),yyline,yychar,yychar+2)); }");{return (new Yytoken(22,yytext(),yyline,yychar,yychar + 2));}case 59:break;case 21:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [47] { return (new Yytoken(16,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(16,yytext(),yyline,yychar,yychar + 1));}case 60:break;case 4:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [70] { return (new Yytoken(42,yytext(),yyline,yychar,yychar+yylength())); }");{return (new Yytoken(42,yytext(),yyline,yychar,yychar + yylength()));}case 61:break;case 28:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [48] { return (new Yytoken(17,yytext(),yyline,yychar,yychar+2)); }");{return (new Yytoken(17,yytext(),yyline,yychar,yychar + 2));}case 62:break;case 16:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [39] { return (new Yytoken(8,yytext(),yyline,yychar,yychar+1)); }");{return (new Yytoken(8,yytext(),yyline,yychar,yychar + 1));}case 63:break;case 1:System.out.println("line: " + (yyline + 1) + " "+ "match: --"+ yytext()+ "--");System.out.println("action [78] {  }");{}case 64:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.331 -0500",hash_original_method="DAACDF6D023CC31453619FC0BE061518",hash_generated_method="A7CDC96DCBEB12154D728CCBA831327D") public void drawPicture(Picture picture){  picture.endRecording();  addTaint(picture.getTaint());}  }
class C{  public void writeURIAttribute(String name,Object value,String componentPropertyName) throws IOException {  if (name == null || value == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  writer.write(" ");  writer.write(name);  writer.write("=\"");  String strValue=value.toString();  writer.write(' ');  writer.write(name);  writer.write("=\"" + strValue + "\"");}  }
class C{  public void detect(String url,OnDetectBigUrlFileListener onDetectBigUrlFileListener){  detect(url,onDetectBigUrlFileListener,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.146 -0500",hash_original_method="2FB67C52CD526BE2C970DC0DB75D361F",hash_generated_method="663C48D7C117632B590F4F7A4FB9B8E4") public boolean handleUrl(String url){  if (mLoadInitFromJava == true) {    return false;  }  if (mCallbackProxy.shouldOverrideUrlLoading(url)) {    didFirstLayout();    return true;  } else {    return false;  }}  }
class C{  public double distanceSquaredTo(Point2D that){  double dx=this.x - that.x;  double dy=this.y - that.y;  return dx * dx + dy * dy;}  }
class C{  @Override public void flush() throws IOException {  for (  OutputStream stream : outs)   stream.flush();}  }
class C{  public void handleNotification(Notification notification,Object handback){  Object notifSource=notification.getSource();  if (AdminDistributedSystemJmxImpl.NOTIF_MEMBER_JOINED.equals(notification.getType())) {    ObjectName source=(ObjectName)notifSource;    String[] noArgs={};    try {      ObjectName[] stats=(ObjectName[])mBeanServer.invoke(source,"manageStats",noArgs,noArgs);      if (stats != null) {        for (        ObjectName stat : stats) {          mBeanServer.invoke(stat,"getStatistics",noArgs,noArgs);        }      }      logger.debug("getStatistics call completed with no exceptions.");    } catch (    ReflectionException e) {      logger.info(LocalizedMessage.create(LocalizedStrings.MemberInfoWithStatsMBean_EXCEPTION_WHILE_INITIALIZING_STATISICS_FOR_0,source.toString()),e);    }catch (    MBeanException e) {      logger.info(LocalizedMessage.create(LocalizedStrings.MemberInfoWithStatsMBean_EXCEPTION_WHILE_INITIALIZING_STATISICS_FOR_0,source.toString()),e);    }catch (    InstanceNotFoundException e) {      logger.info(LocalizedMessage.create(LocalizedStrings.MemberInfoWithStatsMBean_EXCEPTION_WHILE_INITIALIZING_STATISICS_FOR_0,source.toString()),e);    }    try {      registerNotificationListener(source);    } catch (    OperationsException e) {      logger.info(LocalizedMessage.create(LocalizedStrings.MemberInfoWithStatsMBean_EXCEPTION_WHILE_REGISTERING_NOTIFICATION_LISTENER_FOR_0,source.toString()),e);    }  }  notification=new Notification(notification.getType(),notifSource,notificationSequenceNumber.addAndGet(1L),notification.getTimeStamp(),notification.getMessage());  sendNotification(notification);}  }
class C{  public static float[] copyOfRange(float[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      float[] copy=new float[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public UncheckedExecutionException(@Nullable String message,@Nullable Throwable cause){  super(message,cause);}  }
class C{  protected void refreshRemoveNode(int id) throws Exception {  int idx;  FolderTokenDocTreeNode node=null;  idx=findIndexById(id);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  node=(FolderTokenDocTreeNode)m_nodes.get(idx);  if (!node.isRemove()) {    throw new IeciTdException(FolderBaseError.EC_NO_REMOVE_NODE,FolderBaseError.EM_NO_REMOVE_NODE);  }  m_nodes.remove(idx);}  }
class C{  public boolean applyOptions() throws IOException {  PlayerSettings.USE_OS_DEFAULT_PLAYER.setValue(CHECK_BOX.isSelected());  PlayerSettings.USE_FW_PLAYER_FOR_CLOUD_VIDEO_PREVIEWS.setValue(VIDEO_PREVIEW_WITH_INTERNAL_PLAYER_CHECK_BOX.isSelected());  return false;}  }
class C{  public SVGBezierFigure(){  this(false);}  }
class C{  public String toString(){  return getCssText();}  }
class C{  @Deprecated public boolean isCacheServer(){  return isCacheVm();}  }
class C{  @AntDoc("A module to copy.") public void addConfiguredModule(Module module){  this.moduleSet.addConfiguredModule(module);}  }
class C{  public RecordedEvent(EventRecord eventRecord){  eventStreamId=eventRecord.getEventStreamId();  eventId=toUUID(eventRecord.getEventId().toByteArray());  eventNumber=eventRecord.getEventNumber();  eventType=eventRecord.getEventType();  data=(eventRecord.hasData()) ? eventRecord.getData().toByteArray() : EMPTY_BYTES;  metadata=(eventRecord.hasMetadata()) ? eventRecord.getMetadata().toByteArray() : EMPTY_BYTES;  isJson=eventRecord.getDataContentType() == 1;  created=eventRecord.hasCreatedEpoch() ? Optional.of(ofEpochMilli(eventRecord.getCreatedEpoch())) : Optional.empty();}  }
class C{  public static String spaceTableGuide(int lgKlo,int lgKhi,int maxLgN){  int cols=lgKhi - lgKlo + 1;  int maxUBbytes=elemCapacity(1 << lgKhi,(1L << maxLgN) - 1L);  int tblColWidth=String.format("%,d",maxUBbytes).length() + 1;  int leftColWidth=16;  String leftColStrFmt="%" + leftColWidth + "s";  String dFmt="%," + tblColWidth + "d";  String fFmt="%" + (tblColWidth - 1) + ".3f%%";  StringBuilder sb=new StringBuilder();  sb.append("Table Guide for Quantiles DoublesSketch Size in Bytes and Approximate Error:").append(LS);  sb.append(String.format(leftColStrFmt,"K => |"));  for (int kpow=lgKlo; kpow <= lgKhi; kpow++) {    int k=1 << kpow;    sb.append(String.format(dFmt,k));  }  sb.append(LS);  sb.append(String.format(leftColStrFmt,"~ Error => |"));  for (int kpow=lgKlo; kpow <= lgKhi; kpow++) {    int k=1 << kpow;    sb.append(String.format(fFmt,100 * getEpsilon(k)));  }  sb.append(LS);  sb.append(String.format(leftColStrFmt,"N |"));  sb.append(" Size in Bytes ->").append(LS);  int numDashes=leftColWidth + tblColWidth * cols;  StringBuilder sb2=new StringBuilder();  for (int i=0; i < numDashes; i++)   sb2.append("-");  sb.append(sb2.toString()).append(LS);  String leftColNumFmt="%," + (leftColWidth - 2) + "d |";  for (int npow=0; npow <= maxLgN; npow++) {    long n=(1L << npow) - 1L;    sb.append(String.format(leftColNumFmt,n));    for (int kpow=lgKlo; kpow <= lgKhi; kpow++) {      int k=1 << kpow;      int ubBytes=elemCapacity(k,n);      sb.append(String.format(dFmt,ubBytes));    }    sb.append(LS);  }  return sb.toString();}  }
class C{  public boolean equals(Object obj){  return obj != null && obj instanceof CtMethod && ((CtMethod)obj).getStringRep().equals(getStringRep());}  }
class C{  private static boolean isLeftOutlier(int index,ArrayList<Double> values){  double currentValue=values.get(index);  double valueToLeft=values.get(index - 1);  return Math.abs(currentValue - valueToLeft) > 20;}  }
class C{  private void updateAllowedHeader(int numAllowed,boolean toggleValue){  ExpandablePreferenceGroup allowedGroup=(ExpandablePreferenceGroup)getPreferenceScreen().findPreference(ALLOWED_GROUP);  if (numAllowed == 0) {    if (allowedGroup != null)     getPreferenceScreen().removePreference(allowedGroup);    return;  }  if (!mGroupByAllowBlock)   return;  int resourceId=toggleValue ? R.string.website_settings_allowed_group_heading : R.string.website_settings_exceptions_group_heading;  allowedGroup.setGroupTitle(resourceId,numAllowed);  TintedDrawable icon=TintedDrawable.constructTintedDrawable(getResources(),mAllowListExpanded ? R.drawable.ic_expand : R.drawable.ic_collapse);  allowedGroup.setExpanded(mAllowListExpanded);  allowedGroup.setIcon(icon);}  }
class C{  public String toString(){  return "Keymap[" + nm + "]"+ bindings;}  }
class C{  @Deprecated public int growthFactor(){  return 16;}  }
class C{  @RequestMapping("/index") public ModelAndView Add(HttpServletRequest request,HttpServletResponse response){  List<Campaign> campaignList=campaignMgr.findAll();  return new ModelAndView("index","campaignList",campaignList);}  }
class C{  @Override public Long sadd(final byte[] key,final byte[]... members){  checkIsInMultiOrPipeline();  client.sadd(key,members);  return client.getIntegerReply();}  }
class C{  private boolean isUserRecordable0(int type){  return binarySearch(inclEvtTypes,type);}  }
class C{  @Override public void initializeViewerColors(ISourceViewer viewer){  super.initializeViewerColors(viewer);}  }
class C{  public final int readInt() throws java.io.IOException {  readFully(scratch,0,4);  return (((scratch[0] & 0xff) << 24) | ((scratch[1] & 0xff) << 16) | ((scratch[2] & 0xff) << 8)| ((scratch[3] & 0xff) << 0));}  }
class C{  @Inject protected OpenProjectPresenter(OpenProjectView view,DtoUnmarshallerFactory dtoUnmarshallerFactory,ProjectServiceClient projectServiceClient,EventBus eventBus,AppContext appContext){  this.view=view;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;  this.projectServiceClient=projectServiceClient;  this.eventBus=eventBus;  this.appContext=appContext;  this.view.setDelegate(this);  updateComponents();}  }
class C{  public static double cramerVonMises(DataSet dataSet,ContinuousVariable variable){  int n=dataSet.getNumRows();  int columnIndex=dataSet.getColumn(variable);  Normal idealDistribution=getNormal(dataSet,variable);  double cvmStatistic=0.0;  for (int i=1; i <= n; i++) {    double summedTerm=(((2 * i) - 1) / (2 * n)) - idealDistribution.cdf(dataSet.getDouble(i - 1,columnIndex));    summedTerm*=summedTerm;    cvmStatistic+=summedTerm;  }  cvmStatistic+=1 / (12 * n);  cvmStatistic/=n;  return cvmStatistic;}  }
class C{  public Observable<Boolean> login(String username,String password){  return Observable.zip(routes.getUserInfo(KEY,username).subscribeOn(Schedulers.newThread()).flatMapIterable(null).first(),getLoginRoute(username,password).subscribeOn(Schedulers.newThread()),null).flatMap(null).doOnNext(null).doOnNext(null).map(null);}  }
class C{  public static int collectionContainsAll(Collection<?> c,Collection<?> c2){  int mismatch=0;  for (  Object o : c2) {    if (!c.contains(o))     mismatch++;  }  return mismatch > 0 ? -mismatch : c2.size() + 1;}  }
class C{  public int start_state(){  return 0;}  }
class C{  public final double dot(Vec4 p){  if (p == null) {    throw new IllegalArgumentException("Point Is Null");  }  return this.n.x * p.x + this.n.y * p.y + this.n.z * p.z + this.n.w * p.w;}  }
class C{  public boolean hasGainPercentage(){  return getGainPercentage() != null;}  }
class C{  public FunctionException(Throwable cause){  super(cause);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  RestMethod(String methodNamePrefix,String httpMethod){  this.methodNamePrefix=methodNamePrefix;  this.httpMethod=httpMethod;}  }
class C{  public static JavaPairRDD<MatrixIndexes,MatrixBlock> mergeByKey(JavaPairRDD<MatrixIndexes,MatrixBlock> in){  return in.combineByKey(new CreateBlockCombinerFunction(),new MergeBlocksFunction(false),new MergeBlocksFunction(false));}  }
class C{  public _BuildReason(){  super();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.855 -0500",hash_original_method="1D42C2C4BD065BE4935C25058CB25A0E",hash_generated_method="1FA0F03FEC4C1822C6D78194D6620044") private char foldCase(char ch){  addTaint(ch);  return getTaintChar();}  }
class C{  @Override public boolean execute(String sql,String[] columnNames) throws SQLException {  try {    debugCode("execute(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public int doStartTag() throws JspException {  Properties ctx=JSPEnv.getCtx((HttpServletRequest)pageContext.getRequest());  int AD_Client_ID=Env.getAD_Client_ID(ctx);  String name="M_Product_Category_ID";  option[] options=getCategories(AD_Client_ID);  select sel=new select(name,options);  sel.setID("ID_" + name);  log.fine("AD_Client_ID=" + AD_Client_ID + ", #="+ options.length);  HtmlCode html=new HtmlCode();  html.addElement(sel);  JspWriter out=pageContext.getOut();  html.output(out);  return (SKIP_BODY);}  }
class C{  void addInheritedTypes(TypeMirror typeMirror,Types typesUtils){  if (!CompilerUtils.typeMirrorInCollection(inheritedTypes,typeMirror,typesUtils)) {    inheritedTypes.add(typeMirror);  }}  }
class C{  @Inline protected final Address uncheckedDequeue(){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(bufferOffset(head).sGE(Offset.fromIntZeroExtend(BYTES_IN_ADDRESS)));  head=head.minus(BYTES_IN_ADDRESS);  return head.loadAddress();}  }
class C{  static public boolean isSystemReady(){  if (!sSystemReady) {    sSystemReady=getDefault().testIsSystemReady();  }  return sSystemReady;}  }
class C{  public void loadProperties(String propertiesPath,boolean silent){  loadPropertiesFile(propertiesPath,silent);  initializeProperties();}  }
class C{  public static String toRealPath(String fileName){  return FilePath.get(fileName).toRealPath().toString();}  }
class C{  private ConcurrentSkipListMap.Node<K,V> loNode(){  if (lo == null)   return m.findFirst(); else   if (loInclusive)   return m.findNear(lo,GT | EQ); else   return m.findNear(lo,GT);}  }
class C{  private Supplier<Pair<Integer,JsonNode>> handleReplaceOp(String path,JsonNode patchVal,PatchRequestScope requestScope){  try {    JsonApiDocument value=requestScope.getMapper().readJsonApiPatchExtValue(patchVal);    PatchVisitor visitor=new PatchVisitor(new PatchRequestScope(path,value,requestScope));    return visitor.visit(Elide.parse(path));  } catch (  IOException e) {    throw new InvalidEntityBodyException("Could not parse patch extension value: " + patchVal);  }}  }
class C{  public School id(String id){  this.id=id;  return this;}  }
class C{  public boolean fitsIn(Size other){  return width <= other.width && height <= other.height;}  }
class C{  @Override protected Money handleTransactionThatIsALateRepaymentOfInstallment(final LoanRepaymentScheduleInstallment currentInstallment,final List<LoanRepaymentScheduleInstallment> installments,final LoanTransaction loanTransaction,final Money transactionAmountUnprocessed,List<LoanTransactionToRepaymentScheduleMapping> transactionMappings){  return handleTransactionThatIsOnTimePaymentOfInstallment(currentInstallment,loanTransaction,transactionAmountUnprocessed,transactionMappings);}  }
class C{  CreateOscInMessageAction(){  super("Create OSC in message");  putValue(Action.LONG_DESCRIPTION,"Create a new OSC in message");}  }
class C{  public double arcLength(boolean closed){  return Imgproc.arcLength(getDoubleData(),closed);}  }
class C{  public void run(long delays){  final Thread[] thread=new Thread[mSequence.length];  long bits=delays;  final long mask=(2L << mSteps) - 1;  for (int i=0; i < thread.length; i++) {    mSequence[i].setId();    mSequence[i].setDelays(bits & mask);    mSequence[i].println("Thread " + (i + 1) + ", "+ Long.toBinaryString(bits & mask));    bits=bits >>> mSteps;    thread[i]=new Thread(mSequence[i],"t" + (i + 1));  }  for (  Thread aThread : thread) {    aThread.start();  }  for (int i=0; i < thread.length; i++) {    try {      thread[i].join();    } catch (    InterruptedException e) {      mSequence[i].println("join() threw " + e);    }  }}  }
class C{  public SQLSyntaxErrorException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public Entry(int hash,String ns,String nm,Node value,Entry next){  this.hash=hash;  this.namespaceURI=ns;  this.name=nm;  this.value=value;  this.next=next;}  }
class C{  @Override public void addListener(final IFunctionListener<IComment> listener){  functionListeners.addListener(listener);}  }
class C{  public void send(Object message,boolean sent) throws RemotingException {  client.send(message,sent);}  }
class C{  public GitRefAlreadyExistsException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  @Override public String toString(){  StringBuilder out=new StringBuilder();  out.append(element);  for (  Selector selector : selectors) {switch (selector.getType()) {case ATTRIBUTE:      AttributeSelector attrSelector=(AttributeSelector)selector;    String attrName=attrSelector.getName();  if (attrName.equals(ID)) {    out.append('#').append(attrSelector.getValue());  } else   if (attrName.equals(CLASS)) {    out.append('.').append(attrSelector.getValue());  } else {    out.append('[').append(attrSelector.getName());    String value=attrSelector.getValue();    if (value != null) {      out.append(attrSelector.getMatch().getSign());      char quote=attrSelector.getQuoteChar();      if (quote != 0) {        out.append(quote);      }      out.append(value);      if (quote != 0) {        out.append(quote);      }    }    out.append(']');  }break;case PSEUDO_CLASS:PseudoClassSelector psc=(PseudoClassSelector)selector;out.append(':').append(psc.getPseudoClass().getPseudoClassName());break;case PSEUDO_FUNCTION:PseudoFunctionSelector pfns=(PseudoFunctionSelector)selector;out.append(':').append(pfns.getPseudoFunction().getPseudoFunctionName()).append('(');out.append(pfns.getExpression()).append(')');break;}}if (nextCssSelector != null) {if (combinator != Combinator.DESCENDANT) {out.append(' ');}out.append(combinator.getSign());if (combinator != Combinator.DESCENDANT) {out.append(' ');}}return out.toString();}  }
class C{  public static boolean isDefaultActAsSpinnerDialog(){  return defaultActAsSpinnerDialog;}  }
class C{  public static boolean islog(){  return debugMode;}  }
class C{  @Nullable @GuardedBy("lock") protected Peer connectTo(PeerAddress address,boolean incrementMaxConnections,int connectTimeoutMillis){  checkState(lock.isHeldByCurrentThread());  VersionMessage ver=getVersionMessage().duplicate();  ver.bestHeight=chain == null ? 0 : chain.getBestChainHeight();  ver.time=Utils.currentTimeSeconds();  Peer peer=createPeer(address,ver);  peer.addConnectedEventListener(Threading.SAME_THREAD,startupListener);  peer.addDisconnectedEventListener(Threading.SAME_THREAD,startupListener);  peer.setMinProtocolVersion(vMinRequiredProtocolVersion);  pendingPeers.add(peer);  try {    log.info("Attempting connection to {}     ({} connected, {} pending, {} max)",address,peers.size(),pendingPeers.size(),maxConnections);    ListenableFuture<SocketAddress> future=channels.openConnection(address.toSocketAddress(),peer);    if (future.isDone())     Uninterruptibles.getUninterruptibly(future);  } catch (  ExecutionException e) {    Throwable cause=Throwables.getRootCause(e);    log.warn("Failed to connect to " + address + ": "+ cause.getMessage());    handlePeerDeath(peer,cause);    return null;  }  peer.setSocketTimeout(connectTimeoutMillis);  if (incrementMaxConnections) {    maxConnections++;  }  return peer;}  }
class C{  private boolean appendFilter(){  if (isFiltering()) {    useFilteredFromEntries(filteredEntries);    return true;  }  return applyFilter();}  }
class C{  protected JavaFileObject genCode(Env<AttrContext> env,JCClassDecl cdef) throws IOException {  try {    if (gen.genClass(env,cdef) && (errorCount() == 0))     return writer.writeClass(cdef.sym);  } catch (  ClassWriter.PoolOverflow ex) {    log.error(cdef.pos(),"limit.pool");  }catch (  ClassWriter.StringOverflow ex) {    log.error(cdef.pos(),"limit.string.overflow",ex.value.substring(0,20));  }catch (  CompletionFailure ex) {    chk.completionError(cdef.pos(),ex);  }  return null;}  }
class C{  public static int bit(final boolean $){  return $ ? 1 : 0;}  }
class C{  public FIXField(int capacity){  tag=0;  value=new FIXValue(capacity);}  }
class C{  public FireworkMetaBuilder start(){  return new FireworkMetaBuilder();}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return LicenseInfoResponse.create(dm,this.getSender());}  }
class C{  public boolean isBipartite(){  return isBipartite;}  }
class C{  public void putCharSequence(String key,CharSequence value){  map.put(key,value);}  }
class C{  public void cancelAllRequests(boolean mayInterruptIfRunning){  for (  List<RequestHandle> requestList : requestMap.values()) {    if (requestList != null) {      for (      RequestHandle requestHandle : requestList) {        requestHandle.cancel(mayInterruptIfRunning);      }    }  }  requestMap.clear();}  }
class C{  public int isInsideImage(final int x,final int y){  int outLine=-1;  final int[][] areas=this.areas.get();  int[] possArea=null;  final int count=areas.length;  if (objectType != null) {    final int[] types=objectType.get();    for (int i=0; i < count; i++) {      if ((areas[i] != null) && (RenderUtils.rectangleContains(areas[i],x,y) && types[i] == DynamicVectorRenderer.IMAGE)) {        if (possArea != null) {          final int area1=possArea[3] * possArea[2];          final int area2=areas[i][3] * areas[i][2];          if (area2 < area1) {            possArea=areas[i];          }          outLine=i;        } else {          possArea=areas[i];          outLine=i;        }      }    }  }  return outLine;}  }
class C{  public ClassCompiler(CompilerEnvirons compilerEnv){  if (compilerEnv == null)   throw new IllegalArgumentException();  this.compilerEnv=compilerEnv;  this.mainMethodClassName=Codegen.DEFAULT_MAIN_METHOD_CLASS;}  }
class C{  public static EncodedImage create(byte[] data,int width,int height,boolean opacity){  if (data == null) {    throw new NullPointerException();  }  EncodedImage e=new EncodedImage(new byte[][]{data});  e.width=width;  e.height=height;  e.opaque=opacity;  e.opaqueChecked=true;  return e;}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus deactivateInstance(String instanceId,ProvisioningSettings settings) throws APPlatformException {  LOGGER.info("deactivateInstance({})",LogAndExceptionConverter.getLogText(instanceId,settings));  try {    PropertyHandler ph=new PropertyHandler(settings);    ph.setState(FlowState.DEACTIVATION_REQUESTED);    InstanceStatus result=new InstanceStatus();    result.setChangedParameters(settings.getParameters());    return result;  } catch (  Exception t) {    throw LogAndExceptionConverter.createAndLogPlatformException(t,Context.DEACTIVATION);  }}  }
class C{  public void insert(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (first == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.last;    first.prev=elem;    elem.next=first;    first=insns.first;  }  cache=null;  insns.removeAll(false);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  NodeList emList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node child;  String childName;  int length;  Node removedChild;  String removedName;  int nodeType;  java.util.List expected=new java.util.ArrayList();  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("acronym");  java.util.List actual=new java.util.ArrayList();  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  emList=((Element)employeeNode).getElementsByTagName("em");  oldChild=emList.item(0);  removedChild=employeeNode.removeChild(oldChild);  removedName=removedChild.getNodeName();  assertEqualsAutoCase("element","removedName","em",removedName);  for (int indexN10098=0; indexN10098 < childList.getLength(); indexN10098++) {    child=(Node)childList.item(indexN10098);    nodeType=(int)child.getNodeType();    childName=child.getNodeName();    if (equals(1,nodeType)) {      actual.add(childName);    } else {      assertEquals("textNodeType",3,nodeType);      assertEquals("textNodeName","#text",childName);    }  }  assertEqualsAutoCase("element","childNames",expected,actual);}  }
class C{  public List<Tradestrategy> findTradestrategyDistinctByDateRange(final ZonedDateTime fromOpen,final ZonedDateTime toOpen){  return m_tradestrategyHome.findTradestrategyDistinctByDateRange(fromOpen,toOpen);}  }
class C{  protected void connected(Connection connection){  policy.setSelectedProxy(connection.getRoute().getProxy());  connected=true;}  }
class C{  public static BigDecimal uptimeNanosToTimestamp(long nanos){  if (TimeUtil.secondsOffset == null) {    calibrateNanosConversion();  } else {    long currentMillis1=System.currentTimeMillis();    long currentNanos=System.nanoTime();    long currentMillis2=System.currentTimeMillis();    BigDecimal currentTimeStamp=DecimalTimeUnit.MILLISECONDS.toSeconds(((double)(currentMillis1 + currentMillis2)) / 2.0);    if (TimeUtil._uptimeNanosToTimestamp(currentNanos).subtract(currentTimeStamp).abs().doubleValue() > TimeUtil.CLOCK_OFFSET_TOLERANCE) {      calibrateNanosConversion();    }  }  return TimeUtil._uptimeNanosToTimestamp(nanos);}  }
class C{  protected TClassifierImpl(){  super();}  }
class C{  public IndexTableSegment(ByteProvider byteProvider,KLVPacket.Header header) throws IOException {  if (!IndexTableSegment.isValidKey(header.getKey())) {    throw new MXFException(String.format("IndexTableSegment key = %s invalid",Arrays.toString(header.getKey())));  }  this.header=header;  if ((this.header.getKey()[5] != 0x53) && (this.header.getKey()[5] != 0x13)) {    throw new MXFException(String.format("Found index table segment with registry designator byte value = 0x%x, only 0x53h or 0x13h are supported presently",this.header.getKey()[5]));  }  long numBytesToRead=this.header.getVSize();  long numBytesRead=0;  IndexEntryArray indexEntryArray=null;  while (numBytesRead < numBytesToRead) {    Integer itemTag=MXFPropertyPopulator.getUnsignedShortAsInt(byteProvider.getBytes(2),KLVPacket.BYTE_ORDER);    numBytesRead+=2;    long itemSize;    if (this.header.getKey()[5] == 0x53) {      itemSize=MXFPropertyPopulator.getUnsignedShortAsInt(byteProvider.getBytes(2),KLVPacket.BYTE_ORDER);      numBytesRead+=2;    } else {      KLVPacket.LengthField lengthField=KLVPacket.getLength(byteProvider);      itemSize=lengthField.value;      numBytesRead+=lengthField.sizeOfLengthField;    }    String itemName=IndexTableSegment.LOCAL_TAG_TO_ITEM_NAME.get(itemTag);    if (itemName != null) {      int expectedLength=MXFPropertyPopulator.getFieldSizeInBytes(this,itemName);      if ((expectedLength > 0) && (itemSize != expectedLength)) {        throw new MXFException(String.format("Actual length from bitstream = %d is different from expected length = %d",itemSize,expectedLength));      }      MXFPropertyPopulator.populateField(byteProvider,this,itemName);      numBytesRead+=itemSize;    } else     if (itemTag == 0x3f09) {      byteProvider.skipBytes(itemSize);      numBytesRead+=itemSize;    } else     if (itemTag == 0x3f0a) {      indexEntryArray=new IndexEntryArray(byteProvider);      numBytesRead+=itemSize;    } else {      throw new MXFException(String.format("Found unexpected IndexTableSegment LocalTag = 0x%x",itemTag));    }  }  this.indexEntryArray=indexEntryArray;}  }
class C{  protected static boolean regexReplace(JTextArea textArea,String toFind,String replaceWith,boolean forward,boolean matchCase,boolean wholeWord) throws PatternSyntaxException {  Caret c=textArea.getCaret();  int start=makeMarkAndDotEqual(textArea,forward);  String findIn=getFindInText(textArea,start,forward);  if (findIn == null)   return false;  RegExReplaceInfo info=getRegExReplaceInfo(toFind,findIn,forward,matchCase,wholeWord,replaceWith);  findIn=null;  if (info != null) {    c.setSelectionVisible(true);    int matchStart=info.getStartIndex();    int matchEnd=info.getEndIndex();    if (forward) {      matchStart+=start;      matchEnd+=start;    }    selectAndPossiblyCenter(textArea,matchStart,matchEnd);    textArea.replaceSelection(info.getReplacement());    return true;  }  return false;}  }
class C{  static int validateInt32(Map<String,Object> map,String key,String errorPrefix) throws IOException {  Object value=map.get(key);  if (value == null) {    throw new IOException(String.format(VALUE_NOT_FOUND_MESSAGE,errorPrefix,key));  }  if (value instanceof BigDecimal) {    BigDecimal bigDecimalValue=(BigDecimal)value;    return bigDecimalValue.intValueExact();  }  if (!(value instanceof Integer)) {    throw new IOException(String.format(VALUE_WRONG_TYPE_MESSAGE,errorPrefix,"integer",key));  }  return (Integer)value;}  }
class C{  public Node(final Deserializer deserializer){  this.identity=deserializer.readObject("identity",null);  this.setEndpoint(deserializer.readObject("endpoint",null));  this.setMetaData(getMetaData(deserializer.readOptionalObject("metaData",null)));  this.ensureValidity();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-11 21:37:26.600 -0400",hash_original_method="3370E980AAB6E4E649622372CE4EAFC0",hash_generated_method="C20F9F452AA11FD3D8AF2A2F51A8CC90") public static String map2OID(String algName){  checkCacheVersion();  String result=alg2OidMap.get(algName.toUpperCase(Locale.US));  if (result != null) {    return result;  }  AlgNameMapperSource s=source;  if (s != null) {    return s.mapNameToOid(algName);  }  return null;}  }
class C{  public ItalianLightStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static List<ErrorLogger.ErrorObject> validateCPL(PayloadRecord cpl) throws IOException {  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  if (cpl.getPayloadAssetType() != PayloadRecord.PayloadAssetType.CompositionPlaylist) {    throw new IMFException(String.format("Payload asset type is %s, expected asset type %s",cpl.getPayloadAssetType(),PayloadRecord.PayloadAssetType.CompositionPlaylist.toString()));  }  try {    ApplicationCompositionFactory.getApplicationComposition(new ByteArrayByteRangeProvider(cpl.getPayload()),imfErrorLogger);  } catch (  IMFException e) {    imfErrorLogger.addAllErrors(e.getErrors());  }  return imfErrorLogger.getErrors();}  }
class C{  public void energizePowerTube(boolean on){  System.out.println("energizes/deenergize the power tube");  System.out.println("power tube " + (on ? "on" : "off"));  setPowerTubeOn(on);}  }
class C{  public LabelNode rangeLabel(final LabelNode l){  return rangeTable.get(l);}  }
class C{  public void addRootDocument(String name,String fileExt,int sortOrder,String pathDocumentFile) throws Exception {  addDocument(name,FolderBaseDefs.CLF_ROOT_ID,fileExt,sortOrder,pathDocumentFile,null);}  }
class C{  public void drawGraph(TranslationInfo ti){  viewPanel.removeAll();  String src=ti.sourceSentence();  Tree tgt=ti.translations().get(dataSetIndex);  String ref=ti.reference();  sourceLabel.setText(src);  referenceLabel.setText(ref);  oneBestLabel.setText(tgt.yield());  DerivationTree tree=new DerivationTree(tgt,src);  if (dv == null) {    dv=new DerivationViewer(tree,viewPanel.getSize(),targetColor,DerivationViewer.AnchorType.ANCHOR_LEFTMOST_LEAF);  } else {    dv.setGraph(tree);  }  viewPanel.add(dv,BorderLayout.CENTER);  dv.revalidate();  repaint();  getContentPane().repaint();}  }
class C{  public void onCreate(Bundle savedInstanceState,Class<OpsType> opsType){  super.onCreate(savedInstanceState);  try {    handleConfiguration(opsType);  } catch (  InstantiationException|IllegalAccessException e) {    Log.d(TAG,"handleConfiguration " + e);    throw new RuntimeException(e);  }}  }
class C{  Object processNCNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    AVT avt=null;    try {      avt=new AVT(handler,uri,name,rawName,value,owner);      if ((avt.isSimple()) && (!XML11Char.isXML11ValidNCName(value))) {        handleError(handler,XSLTErrorResources.INVALID_NCNAME,new Object[]{name,value},null);        return null;      }      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    if (!XML11Char.isXML11ValidNCName(value)) {      handleError(handler,XSLTErrorResources.INVALID_NCNAME,new Object[]{name,value},null);      return null;    }    return value;  }}  }
class C{  public SmsMmsMessage(Context _context,String _fromAddress,String _messageBody,long _timestamp,String _contactId,String _contactLookup,String _contactName,int _unreadCount,long _threadId,int _messageType){  context=_context;  fromAddress=_fromAddress;  messageBody=_messageBody;  timestamp=_timestamp;  contactId=_contactId;  contactLookupKey=_contactLookup;  contactName=_contactName;  unreadCount=_unreadCount;  threadId=_threadId;  messageType=_messageType;}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  public static PlatformUser toPlatformUser(VOUserDetails userDetails) throws ValidationException {  validate(userDetails);  PlatformUser platformUser=new PlatformUser();  copyAttributes(userDetails,platformUser);  return platformUser;}  }
class C{  protected void updateView(View view){  try {    RelativeLayout layout=(RelativeLayout)view;    mStatusText=(TextView)layout.findViewById(R.id.seekBarPrefValue);    mStatusText.setText(String.valueOf(mCurrentValue));    mStatusText.setMinimumWidth(30);    mSeekBar.setProgress(mCurrentValue - mMinValue);    TextView unitsRight=(TextView)layout.findViewById(R.id.seekBarPrefUnitsRight);    unitsRight.setText(mUnitsRight);    TextView unitsLeft=(TextView)layout.findViewById(R.id.seekBarPrefUnitsLeft);    unitsLeft.setText(mUnitsLeft);  } catch (  Exception e) {    Log.e(TAG,"Error updating seek bar preference",e);  }}  }
class C{  protected Type(String name){  this.name=name;}  }
class C{  public DesktopJTable(NumericTable dataModel,DataWorldComponent component){  super(dataModel);  this.component=component;  this.initJTable();}  }
class C{  public CNodeSelectionUpdater(final JTree tree,final CProjectTreeNode<?> parent){  Preconditions.checkNotNull(tree,"IE01221: Tree argument can not be null");  Preconditions.checkNotNull(parent,"IE01292: Parent argument can not be null");  m_tree=tree;  m_parent=parent;}  }
class C{  public static Motor talon(int channel,DoubleToDoubleFunction speedLimiter){  return new HardwareMotor(new Talon(channel),speedLimiter);}  }
class C{  public void initSecurity(Properties securityProps){  if (securityProps == null) {    return;  }  String shiroConfig=securityProps.getProperty(SECURITY_SHIRO_INIT);  String securityManagerConfig=securityProps.getProperty(SECURITY_MANAGER);  String clientAuthenticatorConfig=securityProps.getProperty(SECURITY_CLIENT_AUTHENTICATOR);  String peerAuthenticatorConfig=securityProps.getProperty(SECURITY_PEER_AUTHENTICATOR);  if (!StringUtils.isBlank(shiroConfig)) {    IniSecurityManagerFactory factory=new IniSecurityManagerFactory("classpath:" + shiroConfig);    Section main=factory.getIni().addSection("main");    main.put("geodePermissionResolver","org.apache.geode.internal.security.shiro.GeodePermissionResolver");    if (!main.containsKey("iniRealm.permissionResolver")) {      main.put("iniRealm.permissionResolver","$geodePermissionResolver");    }    org.apache.shiro.mgt.SecurityManager securityManager=factory.getInstance();    SecurityUtils.setSecurityManager(securityManager);    isIntegratedSecurity=true;    isClientAuthenticator=false;    isPeerAuthenticator=false;  } else   if (!StringUtils.isBlank(securityManagerConfig)) {    SecurityManager securityManager=SecurityService.getObjectOfTypeFromClassName(securityManagerConfig,SecurityManager.class);    securityManager.init(securityProps);    this.setSecurityManager(securityManager);  } else {    isIntegratedSecurity=null;    isClientAuthenticator=!StringUtils.isBlank(clientAuthenticatorConfig);    isPeerAuthenticator=!StringUtils.isBlank(peerAuthenticatorConfig);  }  String customPostProcessor=securityProps.getProperty(SECURITY_POST_PROCESSOR);  if (!StringUtils.isBlank(customPostProcessor)) {    postProcessor=SecurityService.getObjectOfTypeFromClassName(customPostProcessor,PostProcessor.class);    postProcessor.init(securityProps);  } else {    postProcessor=null;  }}  }
class C{  public boolean isMaintainSize(){  return this.maintainSize;}  }
class C{  private boolean validateUsernameDuplicate(){  boolean isValid;  String username=mUsernameInput.getText().toString();  User foundUser=mUserDataSource.findOneByName(username);  if (foundUser != null) {    if (getIntent().getAction().equals(Intent.ACTION_EDIT) && foundUser.getId() == mEditingUser.getId()) {      isValid=true;    } else {      mUsernameInput.setError(getString(R.string.taken_username));      mUsernameInputLayout.setErrorEnabled(true);      isValid=false;    }  } else {    mUsernameInputLayout.setErrorEnabled(false);    isValid=true;  }  return isValid;}  }
class C{  public void write(String s) throws IOException {  int n=s.length();  for (int i=0; i < n; i++) {    m_os.write(s.charAt(i));  }}  }
class C{  public Builder noHang(Boolean noHang){  this.noHang=noHang;  return this;}  }
class C{  public void addRegExp(int regExpNum){  if (Options.DEBUG)   Out.debug("Adding nfa for regexp " + regExpNum + " :"+ Out.NL+ regExps.getRegExp(regExpNum));  IntPair nfa=insertNFA(regExps.getRegExp(regExpNum));  Enumeration lexStates=regExps.getStates(regExpNum).elements();  if (!lexStates.hasMoreElements())   lexStates=scanner.states.getInclusiveStates();  while (lexStates.hasMoreElements()) {    int stateNum=((Integer)lexStates.nextElement()).intValue();    if (!regExps.isBOL(regExpNum))     addEpsilonTransition(2 * stateNum,nfa.start);    addEpsilonTransition(2 * stateNum + 1,nfa.start);  }  if (regExps.getLookAhead(regExpNum) != null) {    Action a=regExps.getAction(regExpNum);    if (a.lookAhead() == Action.FINITE_CHOICE) {      insertLookAheadChoices(nfa.end,a,regExps.getLookAhead(regExpNum));      scanner.actions.remove(a);    } else {      RegExp r1=regExps.getRegExp(regExpNum);      RegExp r2=regExps.getLookAhead(regExpNum);      IntPair look=insertNFA(r2);      addEpsilonTransition(nfa.end,look.start);      action[look.end]=a;      isFinal[look.end]=true;      if (a.lookAhead() == Action.GENERAL_LOOK) {        IntPair forward=insertNFA(r1);        IntPair backward=insertNFA(r2.rev(macros));        isFinal[forward.end]=true;        action[forward.end]=new Action(Action.FORWARD_ACTION);        isFinal[backward.end]=true;        action[backward.end]=new Action(Action.BACKWARD_ACTION);        int entry=2 * (regExps.getLookEntry(regExpNum) + numLexStates);        addEpsilonTransition(entry,forward.start);        addEpsilonTransition(entry + 1,backward.start);        a.setEntryState(entry);      }    }  } else {    action[nfa.end]=regExps.getAction(regExpNum);    isFinal[nfa.end]=true;  }}  }
class C{  public FtpServer(int port) throws IOException {  listener=new ServerSocket(port);}  }
class C{  @SuppressWarnings("unchecked") private void refreshExpGroupMetadataList(boolean forceChildrenCountRefresh,boolean syncGroupPositions){  final ArrayList<GroupMetadata> egml=mExpGroupMetadataList;  int egmlSize=egml.size();  int curFlPos=0;  mTotalExpChildrenCount=0;  if (syncGroupPositions) {    boolean positionsChanged=false;    for (int i=egmlSize - 1; i >= 0; i--) {      GroupMetadata curGm=egml.get(i);      int newGPos=findGroupPosition(curGm.gId,curGm.gPos);      if (newGPos != curGm.gPos) {        if (newGPos == AdapterView.INVALID_POSITION) {          egml.remove(i);          egmlSize--;        }        curGm.gPos=newGPos;        if (!positionsChanged)         positionsChanged=true;      }    }    if (positionsChanged) {      Collections.sort(egml);    }  }  int gChildrenCount;  int lastGPos=0;  for (int i=0; i < egmlSize; i++) {    GroupMetadata curGm=egml.get(i);    if ((curGm.lastChildFlPos == GroupMetadata.REFRESH) || forceChildrenCountRefresh) {      gChildrenCount=mExpandableListAdapter.getChildrenCount(curGm.gPos);    } else {      gChildrenCount=curGm.lastChildFlPos - curGm.flPos;    }    mTotalExpChildrenCount+=gChildrenCount;    curFlPos+=(curGm.gPos - lastGPos);    lastGPos=curGm.gPos;    curGm.flPos=curFlPos;    curFlPos+=gChildrenCount;    curGm.lastChildFlPos=curFlPos;  }}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public FeatureStructure copyFs(FeatureStructure aFS){  assert ((CASImpl)aFS.getCAS()).getBaseCAS() == ((CASImpl)mSrcCas).getBaseCAS();  FeatureStructure copy=mFsMap.get(aFS);  if (copy != null) {    return copy;  }  Type srcType=aFS.getType();  if (aFS instanceof SofaFS) {    String sofaId=((SofaFS)aFS).getSofaID();    return getOrCreateView(mDestCas,sofaId).getSofa();  }  if (isDocumentAnnotation(aFS)) {    String viewName=((AnnotationFS)aFS).getView().getViewName();    CAS destView=mDestCas.getView(viewName);    FeatureStructure destDocAnnot=destView.getDocumentAnnotation();    if (destDocAnnot != null) {      copyFeatures(aFS,destDocAnnot);    }    return destDocAnnot;  }  if (aFS.getType().isArray()) {    copy=copyArray(aFS);    mFsMap.put(aFS,copy);    return copy;  }  Type destType;  if (mDestCas.getTypeSystem() == mSrcCas.getTypeSystem()) {    destType=srcType;  } else {    destType=mDestCas.getTypeSystem().getType(srcType.getName());  }  if (destType == null) {    throw new UIMARuntimeException(UIMARuntimeException.TYPE_NOT_FOUND_DURING_CAS_COPY,new Object[]{srcType.getName()});  }  int typeCode=mLowLevelDestCas.ll_getTypeSystem().ll_getCodeForType(destType);  int destFsAddr=mLowLevelDestCas.ll_createFS(typeCode);  FeatureStructure destFs=mDestCas.getLowLevelCAS().ll_getFSForRef(destFsAddr);  mFsMap.put(aFS,destFs);  copyFeatures(aFS,destFs);  return destFs;}  }
class C{  @Override public Object saveState(FacesContext facesContext){  return new Object[]{validatorId};}  }
class C{  public void startShimmerAnimation(){  if (mAnimationStarted) {    return;  }  Animator animator=getShimmerAnimation();  animator.start();  mAnimationStarted=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:00.369 -0500",hash_original_method="DA183CDCD6EA3DA10063DE059735FFD7",hash_generated_method="6DCA783BA407745EB0BBBC301C29F896") public boolean pageScroll(int direction){  boolean right=direction == View.FOCUS_RIGHT;  int width=getWidth();  mTempRect.addTaint(direction + width + getScrollX());  if (right) {    int count=getChildCount();    if (count > 0) {      View view=getChildAt(0);      mTempRect.addTaint(view.getRight());    }  }  return scrollAndFocus(direction,mTempRect.left,mTempRect.right);}  }
class C{  public static String toString(int[] arr){  if (arr == null) {    return "";  }  StringBuffer sb=new StringBuffer();  for (  int anArr : arr) {    sb.append((char)anArr);  }  return sb.toString();}  }
class C{  public boolean approveIt(){  log.info(toString());  setIsApproved(true);  return true;}  }
class C{  public Payment createPaymentPrototype(final String operation,final Map privateCallBackParameters){  final Payment payment=new PaymentImpl();  final Map<String,String> params=HttpParamsUtils.createSingleValueMap(privateCallBackParameters);  payment.setTransactionReferenceId(params.get("x_trans_id"));  payment.setTransactionAuthorizationCode(params.get("x_auth_code"));  final CallbackResult res=getExternalCallbackResult(params);  payment.setPaymentProcessorResult(res.getStatus());  payment.setPaymentProcessorBatchSettlement(res.isSettled());  payment.setTransactionOperationResultCode(params.get("x_response_code"));  payment.setTransactionOperationResultMessage(params.get("x_response_reason_code") + " " + params.get("x_response_reason_text"));  payment.setCardNumber(params.get("x_account_number"));  payment.setShopperIpAddress(params.get(PaymentMiscParam.CLIENT_IP));  return payment;}  }
class C{  public SQLTransactionRollbackException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public boolean isArmed(){  return this.armed;}  }
class C{  public void updateRefreshTimer(){  lastRefresh=System.currentTimeMillis();}  }
class C{  public static String buildHREF(String url,String tag){  return "<A HREF=\"" + url + "\">"+ tag+ "</A>";}  }
class C{  public TLongDoubleHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public void removeVetoableChangeListener(VetoableChangeListener listener){  if (m_changeSupport != null && listener != null)   m_changeSupport.removeVetoableChangeListener(listener);}  }
class C{  public Pipeline(){}  }
class C{  public TMember findMember(ContainerType<?> type,String name,boolean writable,boolean staticAccess){  return findMember(type,name,writable,staticAccess,true,true);}  }
class C{  public Nand(){  super("nand",2);}  }
class C{  public static boolean isValid(final String test){  boolean result=!test.contains("&") && !test.contains("<") && !test.contains(">")&& !test.contains("\"")&& !test.contains("'");  result=result && PURE_ASCII_STRING.matcher(test).matches();  result=result && (test.replaceAll("[^a-zA-Z0-9-+.!_\\s]","").length() == test.length());  return result;}  }
class C{  private void populateDistSetTypeNameCombo(){  distsetTypeNameComboBox.setContainerDataSource(getDistSetTypeLazyQueryContainer());  distsetTypeNameComboBox.setItemCaptionPropertyId(SPUILabelDefinitions.VAR_NAME);  distsetTypeNameComboBox.setValue(getDefaultDistributionSetType().getName());}  }
class C{  public DriverTask splitVolumeMirror(List<VolumeMirror> mirrors){  LOG.info("Splitting volume mirror");  DellSCDriverTask task=new DellSCDriverTask("splitVolumeMirror");  StringBuilder errBuffer=new StringBuilder();  int mirrorSplit=0;  for (  VolumeMirror mirror : mirrors) {    try {      StorageCenterAPI api=connectionManager.getConnection(mirror.getStorageSystemId());      api.deleteMirror(mirror.getNativeId());      task.setStatus(TaskStatus.READY);      mirrorSplit++;    } catch (    StorageCenterAPIException|DellSCDriverException dex) {      String error=String.format("Error splitting volume mirror %s: %s",mirror.getDisplayName(),dex);      LOG.error(error);      errBuffer.append(String.format("%s%n",error));    }  }  task.setMessage(errBuffer.toString());  if (mirrorSplit == mirrors.size()) {    task.setStatus(TaskStatus.READY);  } else   if (mirrorSplit == 0) {    task.setStatus(TaskStatus.FAILED);  } else {    task.setStatus(TaskStatus.PARTIALLY_FAILED);  }  return task;}  }
class C{  private Workflow.Method createMetaVolumeMethod(URI systemURI,URI poolURI,URI volumeURI,VirtualPoolCapabilityValuesWrapper capabilities){  return new Workflow.Method("createMetaVolume",systemURI,poolURI,volumeURI,capabilities);}  }
class C{  public static boolean isTargetInstanceProxy(Object obj){  return TARGET_INSTANCE.isAssignableFrom(obj.getClass());}  }
class C{  public boolean onActivityResult(int requestCode,int resultCode,Intent intent){  CordovaPlugin callback=activityResultCallback;  if (callback == null && initCallbackService != null) {    savedResult=new ActivityResultHolder(requestCode,resultCode,intent);    if (pluginManager != null) {      callback=pluginManager.getPlugin(initCallbackService);    }  }  activityResultCallback=null;  if (callback != null) {    Log.d(TAG,"Sending activity result to plugin");    initCallbackService=null;    savedResult=null;    callback.onActivityResult(requestCode,resultCode,intent);    return true;  }  Log.w(TAG,"Got an activity result, but no plugin was registered to receive it" + (savedResult != null ? " yet!" : "."));  return false;}  }
class C{  private void chaseTrackEvents(int trackNum,long startTick,long endTick,boolean doReindex,byte[][] tempArray){  if (startTick > endTick) {    startTick=0;  }  byte[] progs=new byte[16];  for (int ch=0; ch < 16; ch++) {    progs[ch]=-1;    for (int co=0; co < 128; co++) {      tempArray[co][ch]=-1;    }  }  Track track=tracks[trackNum];  int size=track.size();  try {    for (int i=0; i < size; i++) {      MidiEvent event=track.get(i);      if (event.getTick() >= endTick) {        if (doReindex && (trackNum < trackReadPos.length)) {          trackReadPos[trackNum]=(i > 0) ? (i - 1) : 0;          if (DEBUG_PUMP)           Printer.println("  chaseEvents: setting trackReadPos[" + trackNum + "] = "+ trackReadPos[trackNum]);        }        break;      }      MidiMessage msg=event.getMessage();      int status=msg.getStatus();      int len=msg.getLength();      if (len == 3 && ((status & 0xF0) == ShortMessage.CONTROL_CHANGE)) {        if (msg instanceof ShortMessage) {          ShortMessage smsg=(ShortMessage)msg;          tempArray[smsg.getData1() & 0x7F][status & 0x0F]=(byte)smsg.getData2();        } else {          byte[] data=msg.getMessage();          tempArray[data[1] & 0x7F][status & 0x0F]=data[2];        }      }      if (len == 2 && ((status & 0xF0) == ShortMessage.PROGRAM_CHANGE)) {        if (msg instanceof ShortMessage) {          ShortMessage smsg=(ShortMessage)msg;          progs[status & 0x0F]=(byte)smsg.getData1();        } else {          byte[] data=msg.getMessage();          progs[status & 0x0F]=data[1];        }      }    }  } catch (  ArrayIndexOutOfBoundsException aioobe) {  }  int numControllersSent=0;  for (int ch=0; ch < 16; ch++) {    for (int co=0; co < 128; co++) {      byte controllerValue=tempArray[co][ch];      if (controllerValue >= 0) {        int packedMsg=(ShortMessage.CONTROL_CHANGE | ch) | (co << 8) | (controllerValue << 16);        getTransmitterList().sendMessage(packedMsg,-1);        numControllersSent++;      }    }    if (progs[ch] >= 0) {      getTransmitterList().sendMessage((ShortMessage.PROGRAM_CHANGE | ch) | (progs[ch] << 8),-1);    }    if (progs[ch] >= 0 || startTick == 0 || endTick == 0) {      getTransmitterList().sendMessage((ShortMessage.PITCH_BEND | ch) | (0x40 << 16),-1);      getTransmitterList().sendMessage((ShortMessage.CONTROL_CHANGE | ch) | (64 << 8),-1);    }  }  if (DEBUG_PUMP)   Printer.println("  chaseTrackEvents track " + trackNum + ": sent "+ numControllersSent+ " controllers.");}  }
class C{  public ResourceLabel(String i18nKey,Object... i18nArgs){  super((i18nArgs == null) || (i18nArgs.length == 0) ? getMessage(i18nKey + ".label") : MessageFormat.format(getMessage(i18nKey + ".label"),i18nArgs));  setToolTipText(getMessageOrNull(i18nKey + ".tip"));  String mne=getMessageOrNull(i18nKey + ".mne");  String icon=getMessageOrNull(i18nKey + ".icon");  if (icon != null) {    ImageIcon iicon=SwingTools.createIcon(icon);    setIcon(iicon);  }  if (mne != null) {    setDisplayedMnemonic(mne.charAt(0));  }}  }
class C{  public static void complete(Service service,TaskService.State taskServiceState,Operation.CompletionHandler handler){  Date now=DateTime.now().toDate();  TaskService.State.Step lastStep=taskServiceState.steps.get(taskServiceState.steps.size() - 1);  lastStep.state=TaskService.State.StepState.COMPLETED;  lastStep.endTime=now;  taskServiceState.state=TaskService.State.TaskState.COMPLETED;  taskServiceState.endTime=now;  ServiceHostUtils.getCloudStoreHelper(service.getHost()).createPatch(taskServiceState.documentSelfLink).setBody(taskServiceState).setCompletion(handler).sendWith(service);}  }
class C{  public AbstractByteList elements(byte[] elements){  this.elements=elements;  this.size=elements.length;  return this;}  }
class C{  protected SVGException createSVGException(short type,String key,Object[] args){  return ((SVGOMElement)element).createSVGException(type,key,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.543 -0500",hash_original_method="B6F0D388FBB618146ABF158DEC8410C2",hash_generated_method="8EC19A50623036B687B4171603518257") public WorkSource(WorkSource orig){  if (orig == null) {    mNum=0;    return;  }  mNum=orig.mNum;  if (orig.mUids != null) {    mUids=orig.mUids.clone();  } else {    mUids=null;  }}  }
class C{  public TaskProgress clone(){  TaskProgress clone=new TaskProgress(this);  return clone;}  }
class C{  public void run(){  try {    if (sLogger.isActivated()) {      sLogger.debug("Processor processing is started");    }    while (!interrupted) {      Buffer inBuffer=inputStream.read();      if (inBuffer == null) {        interrupted=true;        if (sLogger.isActivated()) {          sLogger.debug("Processing terminated: null data received");        }        break;      }      int result=codecChain.process(inBuffer);      if ((result != Codec.BUFFER_PROCESSED_OK) && (result != Codec.OUTPUT_BUFFER_NOT_FILLED)) {        interrupted=true;        if (sLogger.isActivated()) {          sLogger.error("Codec chain processing error: " + result);        }        break;      }    }  } catch (  NetworkException e) {    interrupted=true;    if (sLogger.isActivated()) {      sLogger.debug(e.getMessage());    }  }catch (  RuntimeException e) {    interrupted=true;    sLogger.error("Unable to process codec chain!",e);  }}  }
class C{  public void addFrame(byte[] data,long timestamp,VideoOrientation videoOrientation){  if (fifo != null) {    VideoSample sample=new VideoSample(data,timestamp,videoOrientation);    fifo.addObject(sample);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void clearRequest(){  lock.lock();  requestFlag=false;  lock.unlock();}  }
class C{  protected void retryDelay(int attemptCount) throws InterruptedException {  Thread.sleep((attemptCount + 1) * retryDelay);}  }
class C{  protected boolean mustApplyColor(String symbolId){  return !SymbologyConstants.OPERATIONAL_CONDITION_ALTERNATE_ALL.contains(symbolId.toUpperCase());}  }
class C{  private void checkMembers(@NotNull final String... memberNames){  for (  final String memberName : memberNames) {    Iterables.find(myMemberInfos,new NamePredicate(memberName)).setChecked(true);  }  mySut.memberInfoChanged(myMemberInfos);}  }
class C{  public void shutdown(){  shutdown(true);}  }
class C{  public samp addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  private int widthCheck(int widthTrak){  if (widthTrak > paddedWidth - 2) {    System.out.println();    widthTrak=0;  } else   widthTrak++;  return widthTrak;}  }
class C{  @Override public int indexOf(Object object){  return indexOf(object,0);}  }
class C{  private void generateConverterMethodCode(BufferedWriter out,String voName,String version,HashMap<String,List<VOPropertyDescription>> propertiesInfo,String packageNameTarget,String packageNameSource) throws IOException {  out.write("/**\n");  out.write(" * Convert source version VO to target version VO.\n");  out.write(" * \n");  out.write("* @param oldVO VO to convert.\n");  out.write("* @return VO of target version.\n");  out.write("*/\n");  out.write("public static " + packageNameTarget + "."+ voName+ " convertTo"+ version+ "("+ packageNameSource+ "."+ voName+ " oldVO) {\n");  out.write("if (oldVO == null) {return null;}\n");  out.write(packageNameTarget + "." + voName+ " newVO = new "+ packageNameTarget+ "."+ voName+ "();\n");  List<VOPropertyDescription> voPropertiesList=propertiesInfo.get(voName);  for (  VOPropertyDescription element : voPropertiesList) {    String prop=element.getName();    String propUpper=upperFirstLetter(prop);    String typeParameterWithoutPackage=element.getTypeParameterWithoutPackage();    if (element.getType().equals("java.util.List") && !typeParameterWithoutPackage.equals("String")) {      String propTypeParam=element.getTypeParameterWithoutPackage();      out.write("newVO.set" + propUpper + "(convertTo"+ version+ propTypeParam+ "(oldVO.get"+ propUpper+ "()));\n");    } else     if (element.isEnumType()) {      out.write("newVO.set" + propUpper + "(EnumConverter.convert(oldVO.get"+ propUpper+ "(), ");      String type=element.getTypeParameter();      if (packageNameTarget.endsWith(OLD_SUFFIX)) {        out.write(type.replace(typeParameterWithoutPackage,OLD_SUFFIX + '.' + typeParameterWithoutPackage));      } else {        out.write(type);      }      out.write(".class));\n");    } else {      if (typeParameterWithoutPackage.contains("VO")) {        out.write("newVO.set" + propUpper + "(convertTo"+ version+ "(oldVO.get"+ propUpper+ "()));\n");      } else       if (element.getType().equals("boolean")) {        out.write("newVO.set" + propUpper + "(oldVO.is"+ propUpper+ "());\n");      } else {        out.write("newVO.set" + propUpper + "(oldVO.get"+ propUpper+ "());\n");      }    }  }  out.write("return newVO;\n");  out.write("}\n");}  }
class C{  private Object readResolve(){  fireUpdates=true;  networkListeners=new ArrayList<NetworkListener>();  neuronListeners=new ArrayList<NeuronListener>();  synapseListeners=new ArrayList<SynapseListener>();  textListeners=new ArrayList<TextListener>();  groupListeners=new ArrayList<GroupListener>();  updateManager.postUnmarshallingInit();  for (  Neuron neuron : this.getFlatNeuronList()) {    neuron.postUnmarshallingInit();  }  for (  SynapseGroup group : this.getSynapseGroups()) {    group.postUnmarshallingInit();  }  for (  Synapse synapse : this.getSynapseList()) {    synapse.postUnmarshallingInit();  }  updateCompleted=new AtomicBoolean(false);  return this;}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  ElementHandler parent=this.handler;  try {    this.handler=getElementHandler(qName).newInstance();    this.handler.setOwner(this);    this.handler.setParent(parent);  } catch (  Exception exception) {    throw new SAXException(exception);  }  for (int i=0; i < attributes.getLength(); i++)   try {    String name=attributes.getQName(i);    String value=attributes.getValue(i);    this.handler.addAttribute(name,value);  } catch (  RuntimeException exception) {    handleException(exception);  }  this.handler.startElement();}  }
class C{  public void testDivideRoundHalfUpPos1(){  String a="92948782094488478231212478987482988798104576347813847567949855464535634534563456";  int aScale=-24;  String b="74723342238476237823754692930187879183479";  int bScale=13;  String c="1.2439055763572051712242335979928354832010167729111113605E+76";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  private void releaseDestroyWriteLock(){  this.destroyLock.writeLock().unlock();}  }
class C{  public void testTermWithoutWildcard() throws IOException {  Directory indexStore=getIndexStore("field",new String[]{"nowildcard","nowildcardx"});  IndexReader reader=DirectoryReader.open(indexStore);  IndexSearcher searcher=newSearcher(reader);  MultiTermQuery wq=new WildcardQuery(new Term("field","nowildcard"));  assertMatches(searcher,wq,1);  wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);  Query q=searcher.rewrite(wq);  assertTrue(q instanceof TermQuery);  wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);  q=searcher.rewrite(wq);  assertTrue(q instanceof MultiTermQueryConstantScoreWrapper);  wq.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);  q=searcher.rewrite(wq);  assertTrue(q instanceof ConstantScoreQuery);  reader.close();  indexStore.close();}  }
class C{  public static long[] toLongArray(Short[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].longValue();  }  return result;}  }
class C{  public void addParam(String name,String value,int type){  params.add(new NameValuePair(type,name,value,params.size()));}  }
class C{  public static StartExecParams create(@NotNull String execId){  return new StartExecParams().withExecId(execId);}  }
class C{  private double calculateLog(double value){  return Math.log(value) / this.baseLog;}  }
class C{  private Instruction _callHelper(MethodReference meth,MethodOperand methOp){  int numHiddenParams=methOp.isStatic() ? 0 : 1;  TypeReference[] params=meth.getParameterTypes();  Instruction s=Call.create(CALL,null,null,null,null,params.length + numHiddenParams);  if (gc.getOptions().H2L_NO_CALLEE_EXCEPTIONS) {    s.markAsNonPEI();  }  for (int i=params.length - 1; i >= 0; i--) {    try {      Call.setParam(s,i + numHiddenParams,pop(params[i]));    } catch (    OptimizingCompilerException.IllegalUpcast e) {      throw new Error("Illegal upcast creating call to " + meth + " from "+ gc.getMethod()+ " argument "+ i,e);    }  }  if (numHiddenParams != 0) {    Operand ref=pop();    Call.setParam(s,0,ref);  }  Call.setMethod(s,methOp);  setSourcePosition(s);  TypeReference rtype=meth.getReturnType();  if (rtype.isVoidType()) {    return s;  } else {    RegisterOperand t=gc.getTemps().makeTemp(rtype);    Call.setResult(s,t);    Simplifier.DefUseEffect simp=Simplifier.simplify(true,gc.getTemps(),gc.getOptions(),s);    if ((simp == Simplifier.DefUseEffect.MOVE_FOLDED) || (simp == Simplifier.DefUseEffect.MOVE_REDUCED)) {      gc.getTemps().release(t);      push(Move.getClearVal(s),rtype);      return null;    } else {      push(t.copyD2U(),rtype);      return s;    }  }}  }
class C{  @Override public void resetOptions(){  super.resetOptions();  setFileExtension(".arff");}  }
class C{  private int mergeTwoWordExpressions(){  int changes=0;  boolean changed;  do {    changed=false;    final Iterator<Expression> it=expressions.iterator();    boolean prevConditional=false;    boolean precedingVerb=false;    if (it.hasNext()) {      Expression next=it.next();      while (it.hasNext()) {        final Expression curr=next;        next=it.next();        if (curr.getBreakFlag()) {          continue;        }        if (context.isForMatching()) {          if (curr.getNormalized().contains(Expression.JOKER) || next.getNormalized().contains(Expression.JOKER)) {            continue;          }        }        final ExpressionType curType=curr.getType();        final ExpressionType nextType=next.getType();        if ((curType != null) && curType.isConditional()) {          prevConditional=true;        }        if ((curType != null) && (nextType != null)) {          if (isCompoundNoun(curType,nextType,precedingVerb)) {            if (Grammar.mergeCompoundNoun(curr,next) == curr) {              expressions.remove(next);            } else {              expressions.remove(curr);            }            changed=true;            break;          } else           if (curType.isNumeral() && (nextType.isObject() || nextType.isSubject())) {            next.mergeLeft(curr,false);            expressions.remove(curr);            changed=true;            break;          } else           if (curType.isVerb() && nextType.isVerb()) {            if (curr.getNormalized().equals("do")) {              next.mergeSimple(curr);              expressions.remove(curr);              changed=true;              break;            } else             if (prevConditional) {              next.mergeLeft(curr,false);              expressions.remove(curr);              changed=true;              break;            }          } else           if (curType.getMainType().equals(nextType.getMainType())) {            curr.mergeRight(next,true);            expressions.remove(next);            changed=true;            break;          } else           if (curType.isQuestion() && (nextType.isVerb() || nextType.isAdjective())) {            next.mergeLeft(curr,false);            expressions.remove(curr);            changed=true;            break;          }        }        if (context.getIgnoreIgnorable()) {          if ((curType != null) && isIgnorable(curr)) {            next.mergeLeft(curr,false);            expressions.remove(curr);            changed=true;            break;          }        }        if (curr.getBreakFlag()) {          precedingVerb=false;        } else         if (curType != null) {          if (curType.isVerb()) {            precedingVerb=true;          } else           if (curType.isSubject()) {            precedingVerb=false;          }        }      }    }    if (changed) {      ++changes;    }  } while (changed);  return changes;}  }
class C{  public void add(XMLX509Certificate xmlX509Certificate){  this.constructionElement.appendChild(xmlX509Certificate.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  public boolean isSetDpid(){  return EncodingUtils.testBit(__isset_bitfield,__DPID_ISSET_ID);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(BlobTest.class);}  }
class C{  public ReachableExcludesImpl(File excludesFile){  this.excludesFile=excludesFile;  readFile();}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public static SubjectKeyIdentifier decode(byte[] encoding) throws IOException {  SubjectKeyIdentifier res=new SubjectKeyIdentifier((byte[])ASN1OctetString.getInstance().decode(encoding));  res.encoding=encoding;  return res;}  }
class C{  public static void storeGeofenceEnabled(Context context,boolean enable){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  SharedPreferences.Editor editor=prefs.edit();  editor.putBoolean(PREFERENCES_GEOFENCE_ENABLED,enable);  editor.apply();}  }
class C{  static public String formatUInt8Char(byte b){  String ch=new String(new byte[]{b});  ch=ch.replaceAll("\\p{C}"," ");  return formatUInt8(b) + ":" + ch;}  }
class C{  public void write(int rowStart,int colStart,int rowEnd,int colEnd){  if (page == null) {    newpage();  }  int xStart=x0 + (colStart - 1) * charwidth + charwidth / 2;  int xEnd=x0 + (colEnd - 1) * charwidth + charwidth / 2;  int yStart=y0 + rowStart * lineheight + (lineheight - lineascent) / 2;  int yEnd=y0 + rowEnd * lineheight + (lineheight - lineascent) / 2;  if (page != null && pagenum >= prFirst) {    page.drawLine(xStart,yStart,xEnd,yEnd);  }}  }
class C{  public NumericLiteral(double x){  m_number=new Double(x);  m_type=double.class;}  }
class C{  public Object visit(ASTAndNode node,Object data){  return showNode(node,data);}  }
class C{  public List<RoleAssignmentEntry> updateRoleAssignments(URI id,RoleAssignmentChanges roleChanges){  RoleAssignments response=client.put(RoleAssignments.class,roleChanges,getRoleAssignmentsUrl(),id);  return ResourceUtils.defaultList(response.getAssignments());}  }
class C{  public double computeLocalFromPreviousObservations(int next,int past){  double logTerm=((double)jointCount[next][past]) / ((double)nextCount[next] * (double)prevCount[past]);  logTerm*=(double)observations;  return Math.log(logTerm) / log_base;}  }
class C{  public RAMJobStore(){}  }
class C{  public void addNamespace(XmlNamespace ns){  if (!nsDecls.contains(ns)) {    nsDecls.add(ns);  }}  }
class C{  @Override public boolean isCellEditable(int row,int column){  return true;}  }
class C{  public RaceControlPanel(){  add(goButton);  add(stopButton);}  }
class C{  @Override public void stopAnyPlayback(){  if (SHOW_LOGS)   Logger.v(TAG,">> stopAnyPlayback, mCurrentPlayerState " + mCurrentPlayerState);  mPlayerHandler.pauseQueueProcessing(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"stopAnyPlayback, mCurrentPlayerState " + mCurrentPlayerState);  mPlayerHandler.clearAllPendingMessages(TAG);  stopResetReleaseClearCurrentPlayer();  mPlayerHandler.resumeQueueProcessing(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"<< stopAnyPlayback, mCurrentPlayerState " + mCurrentPlayerState);}  }
class C{  public static SnapshotShardFailure readSnapshotShardFailure(StreamInput in) throws IOException {  SnapshotShardFailure exp=new SnapshotShardFailure();  exp.readFrom(in);  return exp;}  }
class C{  public static void clearCache(){  colorMap.clear();}  }
class C{  public String dnSearch(Properties ldapProps,String baseDN,String filter) throws NamingException {  String foundDN=null;  NamingEnumeration<SearchResult> namingEnum=null;  final DirContext ctx=new InitialDirContext(ldapProps);  SearchControls ctls=new SearchControls();  ctls.setReturningAttributes(new String[]{"dn"});  ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);  ctls.setCountLimit(1);  try {    namingEnum=ctx.search(baseDN,filter,ctls);    if (hasMoreEnum(namingEnum)) {      SearchResult res=namingEnum.next();      StringBuffer sb=new StringBuffer();      CompositeName compDN=new CompositeName(res.getName());      if (!compDN.isEmpty()) {        String ldapDN=compDN.get(0);        sb.append(ldapDN);        if (res.isRelative()) {          sb.append(",");          sb.append(baseDN);        }        foundDN=sb.toString();      }    }  }  finally {    if (namingEnum != null) {      try {        namingEnum.close();      } catch (      Exception ex) {        logger.logError(Log4jLogger.SYSTEM_LOG,ex,LogMessageIdentifier.ERROR_CLOSE_NAMING_ENUMURATION_FAILED);      }    }    try {      ctx.close();    } catch (    Exception ex) {      logger.logError(Log4jLogger.SYSTEM_LOG,ex,LogMessageIdentifier.ERROR_CLOSE_DIRECTORY_CONTEXT_FAILED);    }  }  return foundDN;}  }
class C{  @Override protected final long available(){  return Memory.available();}  }
class C{  public static void dismiss(Context context){  try {    if (context instanceof Activity) {      if (((Activity)context).isFinishing()) {        loadDialog=null;        return;      }    }    if (loadDialog != null && loadDialog.isShowing()) {      Context loadContext=loadDialog.getContext();      if (loadContext != null && loadContext instanceof Activity) {        if (((Activity)loadContext).isFinishing()) {          loadDialog=null;          return;        }      }      loadDialog.dismiss();      loadDialog=null;    }  } catch (  Exception e) {    e.printStackTrace();    loadDialog=null;  }}  }
class C{  public static WildcardQueryBuilder wildcardQuery(String name,String query){  return new WildcardQueryBuilder(name,query);}  }
class C{  @SuppressWarnings("rawtypes") public static Object select(Object[] ar,int k,int left,int right,Comparator comparator){  do {    int idx=selectPivotIndex(ar,left,right,comparator);    int pivotIndex=partition(ar,left,right,idx,comparator);    if (left + k - 1 == pivotIndex) {      return ar[pivotIndex];    }    if (left + k - 1 < pivotIndex) {      right=pivotIndex - 1;    } else {      k-=(pivotIndex - left + 1);      left=pivotIndex + 1;    }  } while (true);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double dist;  double gridRes;  double diagGridRes;  double maxSlope;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    diagGridRes=gridRes * Math.sqrt(2);    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    Random generator=new Random(987654);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          dist=diagGridRes;          maxSlope=-99999999;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData) {switch (i) {case 1:                slope=z - z2;              break;case 3:            slope=z - z2;          break;case 5:        slope=z - z2;      break;case 7:    slope=z - z2;  break;default :slope=1 / (2 - generator.nextDouble()) * (z - z2);}if (slope > maxSlope) {maxSlope=slope;flowDir=1 << i;}}if (dist == gridRes) {dist=diagGridRes;} else {dist=gridRes;}}if (maxSlope > 0) {output.setValue(row,col,flowDir);} else {output.setValue(row,col,0);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");output.addMetadataEntry("Created on " + new Date());DEM.close();output.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void verify(PublicKey publicKey,int responseCode,String signedData,String signature){  String userId=null;  ResponseData data=null;  if (responseCode == LICENSED || responseCode == NOT_LICENSED || responseCode == LICENSED_OLD_KEY) {    try {      Signature sig=Signature.getInstance(SIGNATURE_ALGORITHM);      sig.initVerify(publicKey);      sig.update(signedData.getBytes());      if (!sig.verify(Base64.decode(signature))) {        Log.e(TAG,"Signature verification failed.");        handleInvalidResponse();        return;      }    } catch (    Base64DecoderException e) {      Log.e(TAG,"Could not Base64-decode signature.");      handleInvalidResponse();      return;    }catch (    Exception e) {      throw new RuntimeException(e);    }    try {      data=ResponseData.parse(signedData);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Could not parse response.");      handleInvalidResponse();      return;    }    if (data.responseCode != responseCode) {      Log.e(TAG,"Response codes don't match.");      handleInvalidResponse();      return;    }    if (data.nonce != mNonce) {      Log.e(TAG,"Nonce doesn't match.");      handleInvalidResponse();      return;    }    if (!data.packageName.equals(mPackageName)) {      Log.e(TAG,"Package name doesn't match.");      handleInvalidResponse();      return;    }    if (!data.versionCode.equals(mVersionCode)) {      Log.e(TAG,"Version codes don't match.");      handleInvalidResponse();      return;    }    userId=data.userId;    if (TextUtils.isEmpty(userId)) {      Log.e(TAG,"User identifier is empty.");      handleInvalidResponse();      return;    }  }switch (RANDOM ^ ~responseCode) {case RANDOM ^ ~LICENSED:case RANDOM ^ ~LICENSED_OLD_KEY:    int limiterResponse=mDeviceLimiter.isDeviceAllowed(userId);  handleResponse(limiterResponse,data);break;case RANDOM ^ ~NOT_LICENSED:handleResponse(Policy.NOT_LICENSED,data);break;case RANDOM ^ ~ERROR_CONTACTING_SERVER:Log.w(TAG,"Error contacting licensing server.");handleResponse(Policy.RETRY,data);break;case RANDOM ^ ~ERROR_SERVER_FAILURE:Log.w(TAG,"An error has occurred on the licensing server.");handleResponse(Policy.RETRY,data);break;case RANDOM ^ ~ERROR_OVER_QUOTA:Log.w(TAG,"Licensing server is refusing to talk to this device, over quota.");handleResponse(Policy.RETRY,data);break;case RANDOM ^ ~ERROR_INVALID_PACKAGE_NAME:handleApplicationError(LicenseCheckerCallback.ERROR_INVALID_PACKAGE_NAME);break;case RANDOM ^ ~ERROR_NON_MATCHING_UID:handleApplicationError(LicenseCheckerCallback.ERROR_NON_MATCHING_UID);break;case RANDOM ^ ~ERROR_NOT_MARKET_MANAGED:handleApplicationError(LicenseCheckerCallback.ERROR_NOT_MARKET_MANAGED);break;default :Log.e(TAG,"Unknown response code for license check.");handleInvalidResponse();}}  }
class C{  public void nodeChanged(TreeNode node){  if (listenerList != null && node != null) {    TreeNode parent=node.getParent();    if (parent != null) {      int anIndex=parent.getIndex(node);      if (anIndex != -1) {        int[] cIndexs=new int[1];        cIndexs[0]=anIndex;        nodesChanged(parent,cIndexs);      }    } else     if (node == getRoot()) {      nodesChanged(node,null);    }  }}  }
class C{  DeleteNextWordAction(){  super(deleteNextWordAction);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:20.718 -0500",hash_original_method="8C80F4924B4B7C7CE3A9E179D5335CDB",hash_generated_method="D757BE4E0A61F0F646B8230728FC3E74") private static boolean isFinalSigma(char[] value,int offset,int count,int index){  if (index <= offset) {    return false;  }  char previous=value[index - 1];  if (!(Character.isLowerCase(previous) || Character.isUpperCase(previous) || Character.isTitleCase(previous))) {    return false;  }  if (index + 1 >= offset + count) {    return true;  }  char next=value[index + 1];  if (Character.isLowerCase(next) || Character.isUpperCase(next) || Character.isTitleCase(next)) {    return false;  }  return true;}  }
class C{  public <T extends ManagedObject>T lookupManagedObject(ManagedObjectReference mor){  checkConnected();  T object=(T)MorUtil.createExactManagedObject(service.getServerConnection(),mor);  return object;}  }
class C{  static ValueObject create(Object value){  return (value != null) ? new ValueObjectImpl(value) : NULL;}  }
class C{  String description(){  return Ascii.toLowerCase(this.name().replace('_',' '));}  }
class C{  private void labelIsolatedLine(Edge e,int targetIndex){  int loc=ptLocator.locate(e.getCoordinate(),op.getArgGeometry(targetIndex));  e.getLabel().setLocation(targetIndex,loc);}  }
class C{  boolean addToBuffer(char c) throws IOException {  int len=sb.length();  if (len == 0 && c != CHAR_LT)   return false;  sb.append(c);  if (++len >= minTagLen) {    boolean isClosingTag=(len >= 2 && sb.charAt(1) == CHAR_SL);    String substr;    if (isClosingTag)     substr=sb.substring(2); else     substr=sb.substring(1);    for (int i=0; i < EXCLUDE_TAGS.length; i++) {      if (substr.equalsIgnoreCase(EXCLUDE_TAGS[i])) {        if (isClosingTag) {          depthDec(i);          printBuffer();          lastChar=0;        } else {          depthInc(i);        }      }    }  }  return true;}  }
class C{  public int minIndex(){  if (isEmpty())   throw new NoSuchElementException("Priority queue is empty");  return min.index;}  }
class C{  public static void main(String[] a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.FLOAT_LITERAL__VALUE:    setValue((Float)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public String toString(){  long diff=diff();  long millis=diff % 1000;  long secs=(diff / 1000) % 60;  long mins=(diff / (1000 * 60)) % 60;  long hs=(diff / (1000 * 3600)) % 24;  long days=diff / (1000 * 3600 * 24);  if (days > 0)   return days + "d " + hs+ "h "+ mins+ "m "+ secs+ "s "+ millis+ "ms";  if (hs > 0)   return hs + "h " + mins+ "m "+ secs+ "s "+ millis+ "ms";  if (mins > 0)   return mins + "m " + secs+ "s "+ millis+ "ms";  if (secs > 0)   return secs + "s " + millis+ "ms";  return millis + "ms";}  }
class C{  public static void main(final String[] args){  try {    if (args.length > 0) {      int i=0;      String username=null;      String password=null;      String character=null;      String host=null;      String port=null;      while (i != args.length) {        if (args[i].equals("-u")) {          username=args[i + 1];        } else         if (args[i].equals("-p")) {          password=args[i + 1];        } else         if (args[i].equals("-c")) {          character=args[i + 1];        } else         if (args[i].equals("-h")) {          host=args[i + 1];        } else         if (args[i].equals("-P")) {          port=args[i + 1];        }        i++;      }      if ((username != null) && (password != null) && (character != null)&& (host != null)&& (port != null)) {        final Ask shouter=new Ask(host,username,password,character,port);        shouter.script();        return;      }    }    System.out.println("Stendhal textClient");    System.out.println();    System.out.println("  games.stendhal.bot.support.Ask -u username -p pass -h host -P port -c character");    System.out.println();    System.out.println("Required parameters");    StandardClientFramework.printConnectionParameters();  } catch (  final Exception e) {    e.printStackTrace(System.err);    System.exit(1);  }}  }
class C{  public boolean includesLower(){  return includeLower;}  }
class C{  public static double[] softMax(double[] vec){  double expSum=exp_sum(vec);  double[] retSm=new double[vec.length];  for (int i=0, n=vec.length; i < n; i++) {    retSm[i]=Math.exp(vec[i]) / expSum;  }  return retSm;}  }
class C{  public static cuDoubleComplex cuConj(cuDoubleComplex x){  return cuCmplx(cuCreal(x),-cuCimag(x));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattribute04.class,args);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public static void runProverForEntireModule(boolean checkStatus,boolean isaprove){  boolean proceed=UIHelper.promptUserForDirtyModules();  if (!proceed) {    return;  }  String[] options=null;  if (isaprove) {    options=new String[]{ITLAPMOptions.ISAPROVE};  }  TLAEditor editor=EditorUtil.getTLAEditorWithFocus();  Assert.isNotNull(editor,"User attempted to run prover without a tla editor in focus. This is a bug.");  ProverJob proverJob=new ProverJob(((FileEditorInput)editor.getEditorInput()).getFile(),-1,checkStatus,options,true);  proverJob.setUser(true);  proverJob.schedule();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:29.472 -0500",hash_original_method="C35C42F07E6BEE21A855B7E6408FB8DD",hash_generated_method="E186142D5A2A10E55B23D27838DD1C2D") public static Byte valueOf(String string) throws NumberFormatException {  return new Byte(string.getTaintByte());}  }
class C{  public void add(OscMessage theOscMessage){  messages.add(new OscMessage(theOscMessage));  _myMessageSize=messages.size();}  }
class C{  protected double LLToWorldReturningLon(double lat,double lon,Point2D lp){  double phi_deg=lat;  double phi=ProjMath.degToRad(phi_deg);  double lamba_deg=lon;  double lamba=ProjMath.degToRad(lamba_deg);  double dlamda=lamba - lamdaf;  if (dlamda > Math.PI) {    dlamda-=MoreMath.TWO_PI_D;  } else   if (dlamda < -Math.PI) {    dlamda+=MoreMath.TWO_PI_D;  }  double e=ellps.ecc;  double r=0.0d;  if (!MoreMath.approximately_equal(Math.abs(phi),MoreMath.HALF_PI,EPS10)) {    double t=lambTsfn(phi,Math.sin(phi),e);    r=ellps.radius * F * Math.pow(t,n);  }  double theta=n * dlamda;  double easting=falseEasting + r * Math.sin(theta - alpha);  double northing=falseNorthing + rf - r * Math.cos(theta - alpha);  lp.setLocation(easting,northing);  return dlamda;}  }
class C{  public static byte[] encodeString(String value){  return value.getBytes(Charsets.UTF_8);}  }
class C{  protected void doDefaultArrangement(Graph resultGraph){  Graph sourceGraph=getAlgorithmRunner().getSourceGraph();  boolean arrangedAll=GraphUtils.arrangeBySourceGraph(resultGraph,sourceGraph);  if (!arrangedAll) {    GraphUtils.circleLayout(resultGraph,200,200,150);  }}  }
class C{  public BindException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public void writeIntUTF8(String value) throws IOException {  writeUTF8(_bb,value);  writeInt(_bb.size());  _os.write(_bb.getBuffer(),0,_bb.size());}  }
class C{  public Message nextMessage(long timeout){  return (Message)messageCollector.nextResult(timeout);}  }
class C{  private void prepareSergeant(){  final SpeakerNPC james=npcs.get("Sergeant James");  james.addHelp("Think I need a little help myself. My #group got killed and #one of my men ran away. Too bad he had the #map.");  james.addQuest("Find my fugitive soldier and bring him to me ... or at least the #map he's carrying.");  james.addReply("group","We were five, three of us died. You probably passed their corpses.");  james.addReply(Arrays.asList("one","henry"),"Yes, my youngest soldier. He ran away.");  james.addReply("map","The #treasure map that leads into the heart of the #dwarven #kingdom.");  james.addReply("treasure","A big treasure is rumored to be somewhere in this dungeon.");  james.addReply(Arrays.asList("dwarf","dwarves","dwarven","dwarven kingdom"),"They are strong enemies! We're in their #kingdom.");  james.addReply(Arrays.asList("peter","tom","charles"),"He was a good soldier and fought bravely.");  james.addReply(Arrays.asList("kingdom","kanmararn"),"Kanmararn, the legendary kingdom of the #dwarves.");  james.addReply("dreamscape","There's a man east of town. He knows the way.");  final List<ChatAction> actions=new LinkedList<ChatAction>();  actions.add(new IncreaseXPAction(5000));  actions.add(new DropInfostringItemAction("map","Henry"));  actions.add(new SetQuestAndModifyKarmaAction(QUEST_SLOT,"done",15.0));  actions.add(new EquipItemAction("mainio boots",1,true));  james.add(ConversationStates.ATTENDING,Arrays.asList("map","henry"),new AndCondition(new QuestInStateCondition(QUEST_SLOT,"map"),new PlayerHasInfostringItemWithHimCondition("map","henry")),ConversationStates.ATTENDING,"The map! Wonderful! Thank you. And here is your reward. I got these boots while on the #dreamscape.",new MultipleActions(actions));  james.add(ConversationStates.ATTENDING,Arrays.asList("map","henry"),new AndCondition(new QuestInStateCondition(QUEST_SLOT,"map"),new NotCondition(new PlayerHasInfostringItemWithHimCondition("map","henry"))),ConversationStates.ATTENDING,"Well, where is the map?",null);  james.add(ConversationStates.ATTENDING,ConversationPhrases.QUEST_MESSAGES,new QuestCompletedCondition(QUEST_SLOT),ConversationStates.ATTENDING,"Thanks again for bringing me the map!",null);  james.add(ConversationStates.ATTENDING,ConversationPhrases.HELP_MESSAGES,new QuestCompletedCondition(QUEST_SLOT),ConversationStates.ATTENDING,"Thanks again for bringing me the map!",null);  james.add(ConversationStates.ATTENDING,Arrays.asList("map","henry","group","one"),new QuestCompletedCondition(QUEST_SLOT),ConversationStates.ATTENDING,"Thanks again for bringing me the map!",null);}  }
class C{  public UF1(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  public int containedParsersCount(){  return _parsers.length;}  }
class C{  public static String concat(Iterable<String> c,@Nullable String delim){  A.notNull(c,"c");  return reduce(c,concatReducer(delim));}  }
class C{  public CCopyRegisterValueAction(final String value){  super(String.format("Copy value %s to the clipboard",value));  this.value=Preconditions.checkNotNull(value,"IE01482: Value argument can not be null");}  }
class C{  @Bean public LocalContainerEntityManagerFactoryBean entityManagerFactory(){  LocalContainerEntityManagerFactoryBean entityManagerFactory=new LocalContainerEntityManagerFactoryBean();  entityManagerFactory.setDataSource(getHerdDataSource());  entityManagerFactory.setPackagesToScan(MODEL_PACKAGES_TO_SCAN);  entityManagerFactory.setJpaVendorAdapter(getHibernateJpaVendorAdapter());  entityManagerFactory.setJpaProperties(jpaProperties());  return entityManagerFactory;}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  CSSElement(CSSElement selector){  setTagId(selector.getTagId());  setTagName(selector.getTagName());  selector.copyAttributesTo(this);  descendantSelector=selector.descendantSelector;  attributeSelections=selector.attributeSelections;  for (int i=0; i < getNumChildren(); i++) {    addChild(new CSSElement(selector.getCSSChildAt(i)));  }}  }
class C{  boolean isSocketScheme(String scheme){  for (  String p : URIHelper.SOCKET_SCHEMES) {    if (p.equals(scheme)) {      return true;    }  }  return false;}  }
class C{  protected void findIntersectionBounds(final PlanetModel planetModel,final Bounds boundsInfo,final Plane q,final Membership... bounds){  final double lineVectorX=y * q.z - z * q.y;  final double lineVectorY=z * q.x - x * q.z;  final double lineVectorZ=x * q.y - y * q.x;  if (Math.abs(lineVectorX) < MINIMUM_RESOLUTION && Math.abs(lineVectorY) < MINIMUM_RESOLUTION && Math.abs(lineVectorZ) < MINIMUM_RESOLUTION) {    return;  }  final double denomYZ=this.y * q.z - this.z * q.y;  final double denomXZ=this.x * q.z - this.z * q.x;  final double denomXY=this.x * q.y - this.y * q.x;  if (Math.abs(denomYZ) >= Math.abs(denomXZ) && Math.abs(denomYZ) >= Math.abs(denomXY)) {    if (Math.abs(denomYZ) < MINIMUM_RESOLUTION_SQUARED) {      return;    }    final double denom=1.0 / denomYZ;    recordLineBounds(planetModel,boundsInfo,lineVectorX,lineVectorY,lineVectorZ,0.0,(-(this.D + MINIMUM_RESOLUTION) * q.z - this.z * -(q.D + MINIMUM_RESOLUTION)) * denom,(this.y * -(q.D + MINIMUM_RESOLUTION) + (this.D + MINIMUM_RESOLUTION) * q.y) * denom,bounds);    recordLineBounds(planetModel,boundsInfo,lineVectorX,lineVectorY,lineVectorZ,0.0,(-(this.D - MINIMUM_RESOLUTION) * q.z - this.z * -(q.D + MINIMUM_RESOLUTION)) * denom,(this.y * -(q.D + MINIMUM_RESOLUTION) + (this.D - MINIMUM_RESOLUTION) * q.y) * denom,bounds);    recordLineBounds(planetModel,boundsInfo,lineVectorX,lineVectorY,lineVectorZ,0.0,(-(this.D + MINIMUM_RESOLUTION) * q.z - this.z * -(q.D - MINIMUM_RESOLUTION)) * denom,(this.y * -(q.D - MINIMUM_RESOLUTION) + (this.D + MINIMUM_RESOLUTION) * q.y) * denom,bounds);    recordLineBounds(planetModel,boundsInfo,lineVectorX,lineVectorY,lineVectorZ,0.0,(-(this.D - MINIMUM_RESOLUTION) * q.z - this.z * -(q.D - MINIMUM_RESOLUTION)) * denom,(this.y * -(q.D - MINIMUM_RESOLUTION) + (this.D - MINIMUM_RESOLUTION) * q.y) * denom,bounds);  } else   if (Math.abs(denomXZ) >= Math.abs(denomXY) && Math.abs(denomXZ) >= Math.abs(denomYZ)) {    if (Math.abs(denomXZ) < MINIMUM_RESOLUTION_SQUARED) {      return;    }    final double denom=1.0 / denomXZ;    recordLineBounds(planetModel,boundsInfo,lineVectorX,lineVectorY,lineVectorZ,(-(this.D + MINIMUM_RESOLUTION) * q.z - this.z * -(q.D + MINIMUM_RESOLUTION)) * denom,0.0,(this.x * -(q.D + MINIMUM_RESOLUTION) + (this.D + MINIMUM_RESOLUTION) * q.x) * denom,bounds);    recordLineBounds(planetModel,boundsInfo,lineVectorX,lineVectorY,lineVectorZ,(-(this.D - MINIMUM_RESOLUTION) * q.z - this.z * -(q.D + MINIMUM_RESOLUTION)) * denom,0.0,(this.x * -(q.D + MINIMUM_RESOLUTION) + (this.D - MINIMUM_RESOLUTION) * q.x) * denom,bounds);    recordLineBounds(planetModel,boundsInfo,lineVectorX,lineVectorY,lineVectorZ,(-(this.D + MINIMUM_RESOLUTION) * q.z - this.z * -(q.D - MINIMUM_RESOLUTION)) * denom,0.0,(this.x * -(q.D - MINIMUM_RESOLUTION) + (this.D + MINIMUM_RESOLUTION) * q.x) * denom,bounds);    recordLineBounds(planetModel,boundsInfo,lineVectorX,lineVectorY,lineVectorZ,(-(this.D - MINIMUM_RESOLUTION) * q.z - this.z * -(q.D - MINIMUM_RESOLUTION)) * denom,0.0,(this.x * -(q.D - MINIMUM_RESOLUTION) + (this.D - MINIMUM_RESOLUTION) * q.x) * denom,bounds);  } else {    if (Math.abs(denomXY) < MINIMUM_RESOLUTION_SQUARED) {      return;    }    final double denom=1.0 / denomXY;    recordLineBounds(planetModel,boundsInfo,lineVectorX,lineVectorY,lineVectorZ,(-(this.D + MINIMUM_RESOLUTION) * q.y - this.y * -(q.D + MINIMUM_RESOLUTION)) * denom,(this.x * -(q.D + MINIMUM_RESOLUTION) + (this.D + MINIMUM_RESOLUTION) * q.x) * denom,0.0,bounds);    recordLineBounds(planetModel,boundsInfo,lineVectorX,lineVectorY,lineVectorZ,(-(this.D - MINIMUM_RESOLUTION) * q.y - this.y * -(q.D + MINIMUM_RESOLUTION)) * denom,(this.x * -(q.D + MINIMUM_RESOLUTION) + (this.D - MINIMUM_RESOLUTION) * q.x) * denom,0.0,bounds);    recordLineBounds(planetModel,boundsInfo,lineVectorX,lineVectorY,lineVectorZ,(-(this.D + MINIMUM_RESOLUTION) * q.y - this.y * -(q.D - MINIMUM_RESOLUTION)) * denom,(this.x * -(q.D - MINIMUM_RESOLUTION) + (this.D + MINIMUM_RESOLUTION) * q.x) * denom,0.0,bounds);    recordLineBounds(planetModel,boundsInfo,lineVectorX,lineVectorY,lineVectorZ,(-(this.D - MINIMUM_RESOLUTION) * q.y - this.y * -(q.D - MINIMUM_RESOLUTION)) * denom,(this.x * -(q.D - MINIMUM_RESOLUTION) + (this.D - MINIMUM_RESOLUTION) * q.x) * denom,0.0,bounds);  }}  }
class C{  protected int defaultNumClasses(){  return 2;}  }
class C{  public static VOCatalogEntry toVOCatalogEntry(CatalogEntry catalogEntry,LocalizerFacade facade){  return toVOCatalogEntry(catalogEntry,facade,PerformanceHint.ALL_FIELDS);}  }
class C{  private void print(String amt){  try {    System.out.println(amt + " = " + getAmtInWords(amt));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public SourceBuilder<T> repeatAll(int times){  builder.repeatAll(times);  return this;}  }
class C{  private static void SkipBytes() throws Throwable {  byte[] buf=new byte[512];  int numReadable=0;  reset();  check(dis.available() == 1);  for (; ; ) {    int count=dis.read(buf,0,buf.length);    if (count < 0) {      break;    } else {      numReadable+=count;    }  }  check(dis.available() == 0);  reset();  int numNotSkipped=0;  int numSkipBytes=2053;  check(dis.skip(numSkipBytes) == numSkipBytes);  for (int i=0; ; i++) {    int count=dis.read(buf,0,buf.length);    if (count < 0) {      break;    } else {      numNotSkipped+=count;    }  }  check(numNotSkipped + numSkipBytes == numReadable);  reset();  numNotSkipped=0;  numSkipBytes=8887;  for (int i=0; ; i++) {    if (i == 13) {      check(dis.skip(numSkipBytes) == numSkipBytes);    } else {      int count=dis.read(buf,0,buf.length);      if (count < 0) {        break;      } else {        numNotSkipped+=count;      }    }  }  check(numNotSkipped + numSkipBytes == numReadable);  reset();  numNotSkipped=0;  numSkipBytes=6449;  for (int i=0; ; i++) {    if (numNotSkipped + numSkipBytes > numReadable) {      numSkipBytes=numReadable - numNotSkipped;      check(dis.skip(numSkipBytes) == numSkipBytes);      check(dis.read(buf,0,buf.length) == -1);      check(dis.available() == 0);    } else {      int count=dis.read(buf,0,buf.length);      if (count < 0) {        break;      } else {        numNotSkipped+=count;      }    }  }  check(numNotSkipped + numSkipBytes == numReadable);}  }
class C{  private ContentManifest downloadContentManifest(final String contentUrl){  final String url=URLUtility.construct(contentUrl,PluginFilesStructure.MANIFEST_FILE_NAME);  final ContentManifestDownloader downloader=new ContentManifestDownloader(url,requestHeaders);  final DownloadResult<ContentManifest> downloadResult=downloader.download();  if (downloadResult.error != null) {    Log.d("CHCP","Failed to download content manifest");    return null;  }  return downloadResult.value;}  }
class C{  public void appendProperty(String property,Properties src){  appendProperty(property,src.getProperty(property,""));}  }
class C{  public static int compareBytes(byte[] buffer1,int offset1,int length1,byte[] buffer2,int offset2,int length2){  int idx1=offset1;  int idx2=offset2;  int mlen=(length1 > length2) ? length2 : length1;  int diff;  if ((buffer1 == null) || (buffer2 == null)) {    if (buffer1 != null)     return (1);    if (buffer2 != null)     return (-1);    return (0);  }  while (mlen > 0) {    diff=(int)(buffer1[idx1++]) - (int)(buffer2[idx2++]);    if (diff != 0)     return (diff);    --mlen;  }  diff=length1 - length2;  return (diff);}  }
class C{  public <T>boolean hasValidSortingRules(final Class<T> entityClass,final EntityDictionary dictionary) throws InvalidValueException {  final List<String> entities=dictionary.getAttributes(entityClass);  sortRules.keySet().stream().forEachOrdered(null);  return true;}  }
class C{  @Override public int hashCode(){  int result=19;  result=37 * result + this.unitType.hashCode();  result=37 * result + this.count;  result=37 * result + this.formatter.hashCode();  return result;}  }
class C{  public boolean isPerfect(){  return cardinality * 2 == V;}  }
class C{  protected boolean isContainedBy(final AnnotatedTypeMirror inside,final AnnotatedTypeMirror outside,VisitHistory visited,boolean canBeCovariant){  if (canBeCovariant && isSubtype(inside,outside,visited)) {    return true;  }  if (outside.getKind() == TypeKind.WILDCARD) {    final AnnotatedWildcardType outsideWc=(AnnotatedWildcardType)outside;    AnnotatedTypeMirror outsideWcUB=outsideWc.getExtendsBound();    if (inside.getKind() == TypeKind.WILDCARD) {      outsideWcUB=checker.getTypeFactory().widenToUpperBound(outsideWcUB,(AnnotatedWildcardType)inside);    }    boolean aboveSuperBound=checkAndSubtype(outsideWc.getSuperBound(),inside,visited);    boolean belowExtendsBound=checkAndSubtype(inside,outsideWcUB,visited);    return belowExtendsBound && aboveSuperBound;  } else {    return areEqualInHierarchy(inside,outside,currentTop);  }}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuilder sb=new StringBuilder();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public RegisterOperand(Register reg,TypeReference typ){  setRegister(reg);  setType(typ);}  }
class C{  public LingamRunner(GraphSource graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params,null);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:57.963 -0500",hash_original_method="F31322C7E374D5C2D1894571A8E044A8",hash_generated_method="F46F4C7939B3E8BCCBAAAF6C2BF2C47B") public int read(byte buffer[],int offset,int length) throws IOException {  int ch, off;  if (length < 1)   return 0;synchronized (__queue) {    if (length > __bytesAvailable)     length=__bytesAvailable;  }  if ((ch=read()) == -1)   return -1;  off=offset;  do {    buffer[offset++]=(byte)ch;  } while (--length > 0 && (ch=read()) != -1);  return (offset - off);}  }
class C{  private final void incOps() throws WarpScriptException {  this.currentops++;  if (this.currentops > this.maxops) {    Sensision.update(SensisionConstants.SENSISION_CLASS_EINSTEIN_OPSCOUNT_EXCEEDED,Sensision.EMPTY_LABELS,1);    throw new WarpScriptException("Operation count (" + this.currentops + ") exceeded maximum of "+ this.maxops);  }}  }
class C{  public RSSFeed(Set<URL> links,String source){  this(Integer.MAX_VALUE);  String u;  RSSMessage message;  for (  URL uri : links) {    u=uri.toExternalForm();    message=new RSSMessage(u,"",u);    message.setAuthor(source);    this.addMessage(message);  }}  }
class C{  private static boolean isSpecialDomain(final String domain){  final String ucDomain=domain.toUpperCase(Locale.ENGLISH);  return ucDomain.endsWith(".COM") || ucDomain.endsWith(".EDU") || ucDomain.endsWith(".NET")|| ucDomain.endsWith(".GOV")|| ucDomain.endsWith(".MIL")|| ucDomain.endsWith(".ORG")|| ucDomain.endsWith(".INT");}  }
class C{  public void writeField(String name,int value) throws java.io.IOException {  writeField(name,Integer.toString(value));}  }
class C{  @Override public void run(){  threads.fromNewToRunning(Thread.currentThread());  r.run();  threads.removeRunning(Thread.currentThread());  if (!hasActiveNonDaemonThreads())   completer.accept(ThreadFactoryTracker.this,null);}  }
class C{  public void columnRemoved(TableColumnModelEvent e){  resizeAndRepaint();}  }
class C{  public void populatePcj(final Connector accumuloConn,final String pcjTableName,final RepositoryConnection ryaConn) throws PCJStorageException {  checkNotNull(accumuloConn);  checkNotNull(pcjTableName);  checkNotNull(ryaConn);  try {    final PcjMetadata pcjMetadata=getPcjMetadata(accumuloConn,pcjTableName);    final String sparql=pcjMetadata.getSparql();    final TupleQuery query=ryaConn.prepareTupleQuery(QueryLanguage.SPARQL,sparql);    final TupleQueryResult results=query.evaluate();    final Set<VisibilityBindingSet> batch=new HashSet<>(1000);    while (results.hasNext()) {      batch.add(new VisibilityBindingSet(results.next()));      if (batch.size() == 1000) {        addResults(accumuloConn,pcjTableName,batch);        batch.clear();      }    }    if (!batch.isEmpty()) {      addResults(accumuloConn,pcjTableName,batch);    }  } catch (  RepositoryException|MalformedQueryException|QueryEvaluationException e) {    throw new PCJStorageException("Could not populate a PCJ table with Rya results for the table named: " + pcjTableName,e);  }}  }
class C{  public void putStopTime(Integer stopSequencePosition,StopTime stopTime){  stopTimes.put(stopSequencePosition,stopTime);}  }
class C{  public void clear(){  begin=buffer.length - 1;  end=-1;}  }
class C{  private InputStream downloadUrl(String myurl) throws IOException {  InputStream is=null;  try {    URL url=new URL(myurl);    HttpURLConnection conn=(HttpURLConnection)url.openConnection();    conn.setReadTimeout(28000);    conn.setConnectTimeout(30000);    conn.setRequestMethod("GET");    conn.setDoInput(true);    conn.connect();    is=conn.getInputStream();    return is;  }  finally {    if (is != null) {      is.close();    }  }}  }
class C{  @TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){  if (Utils.hasGingerbread()) {    return Environment.isExternalStorageRemovable();  }  return true;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MInvoice[").append(get_ID()).append("-").append(getDocumentNo()).append(",GrandTotal=").append(getGrandTotal());  if (m_lines != null)   sb.append(" (#").append(m_lines.length).append(")");  sb.append("]");  return sb.toString();}  }
class C{  public MyIdleHandler(UdpWorker udpWorker){  super();  this.udpWorker=udpWorker;}  }
class C{  private void insertBucket(KBucket bucket){  bucket.entriesStream().filter(filter).forEach(null);}  }
class C{  public static RouteInfo selectBestRoute(Collection<RouteInfo> routes,InetAddress dest){  if ((routes == null) || (dest == null))   return null;  RouteInfo bestRoute=null;  for (  RouteInfo route : routes) {    if (NetworkUtils.addressTypeMatches(route.mDestination.getAddress(),dest)) {      if ((bestRoute != null) && (bestRoute.mDestination.getNetworkPrefixLength() >= route.mDestination.getNetworkPrefixLength())) {        continue;      }      if (route.matches(dest))       bestRoute=route;    }  }  return bestRoute;}  }
class C{  public int optInt(int index,int defaultValue){  try {    return getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public static void rotateM(double[] rm,int rmOffset,double[] m,int mOffset,double a,double x,double y,double z){synchronized (sTemp) {    setRotateM(sTemp,0,a,x,y,z);    multiplyMM(rm,rmOffset,m,mOffset,sTemp,0);  }}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  private boolean isEffectivelyContravariant(TypeParameter tp,Declaration invoked,boolean[] specifiedArguments){  if (tp.isCovariant()) {    return false;  } else   if (tp.isContravariant()) {    return true;  } else {    Type fullType=invoked.getReference().getFullType();    Type returnType=unit.getCallableReturnType(fullType);    if (returnType != null) {      boolean occursInvariantly=returnType.occursInvariantly(tp);      boolean occursCovariantly=returnType.occursCovariantly(tp);      boolean occursContravariantly=returnType.occursContravariantly(tp);      if (occursCovariantly && !occursContravariantly && !occursInvariantly) {        return false;      } else       if (!occursCovariantly && occursContravariantly && !occursInvariantly) {        return true;      }    }    if (invoked instanceof Functional) {      Functional fun=(Functional)invoked;      List<ParameterList> paramLists=fun.getParameterLists();      boolean occursContravariantly=false;      boolean occursCovariantly=false;      boolean occursInvariantly=false;      if (!paramLists.isEmpty()) {        List<Parameter> params=paramLists.get(0).getParameters();        for (int i=0, size=params.size(); i < size; i++) {          if (specifiedArguments == null || specifiedArguments[i]) {            Parameter p=params.get(i);            FunctionOrValue model=p.getModel();            if (model != null) {              Type pt=model.getTypedReference().getFullType();              if (pt != null) {                occursContravariantly=occursContravariantly || pt.occursContravariantly(tp);                occursCovariantly=occursCovariantly || pt.occursCovariantly(tp);                occursInvariantly=occursInvariantly || pt.occursInvariantly(tp);              }            }          }        }      }      return occursContravariantly && !occursCovariantly && !occursInvariantly;    }    return false;  }}  }
class C{  public void addFooterView(View v){  addFooterView(v,null,true);}  }
class C{  private void initComponents(){  minimumValue=new JTextField();  maximumValue=new JTextField();}  }
class C{  @Override public void writeToParcel(Parcel out,int flags){  out.writeParcelable(mKmlRoot,flags);  out.writeInt(mStyles.size());  for (  String key : mStyles.keySet()) {    out.writeString(key);    out.writeParcelable(mStyles.get(key),flags);  }  out.writeInt(mMaxStyleId);  if (mLocalFile != null)   out.writeString(mLocalFile.getAbsolutePath()); else   out.writeString("");}  }
class C{  @Override public Object deserializeWithType(JsonParser jp,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException, JsonProcessingException {  return typeDeserializer.deserializeTypedFromAny(jp,ctxt);}  }
class C{  public void assertProjectSettingsEnabled(boolean enabled){  Assert.assertEquals(enabled,getDetectorTab().isEnabled());  Assert.assertEquals(enabled,getReportTab().isEnabled());  Assert.assertEquals(enabled,getFilterTab().isEnabled());  Assert.assertEquals(enabled,getEffortViewer().getCombo().isEnabled());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void resetView(){  setDefaultMode();  index=0;  jLabel4.setText("1");  commandList.setSelectedIndex(0);  durationSpinner.setValue(0);  frequencySpinner.setValue(0);  delaySpinner.setValue(0);}  }
class C{  public boolean isDepreciated(){  Object oo=get_Value(COLUMNNAME_IsDepreciated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public AbstractLaunch(SantaContext context,LauncherDataChangedCallback adapter,int contentDescriptionId,int cardDrawable){  initialise(context,adapter,contentDescriptionId,cardDrawable);}  }
class C{  public boolean isUseL1(){  return useL1;}  }
class C{  @Override public boolean batchFinished(){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  Instances toFilter=getInputFormat();  int cutOff=(int)Math.round(toFilter.numInstances() * m_Percentage / 100);  if (m_Inverse) {    for (int i=0; i < cutOff; i++) {      push(toFilter.instance(i));    }  } else {    for (int i=cutOff; i < toFilter.numInstances(); i++) {      push(toFilter.instance(i));    }  }  flushInput();  m_NewBatch=true;  m_FirstBatchDone=true;  return (numPendingOutput() != 0);}  }
class C{  public void putNum(final String key,final String value){  this.put(key,value == null ? "" : Formatter.number(value));}  }
class C{  public final void initActor(String path,ActorContext context,Mailbox mailbox){  this.path=path;  this.context=context;  this.mailbox=mailbox;}  }
class C{  public byte[] urlEncodedBytes(){  byte[] bytes=null;  try {    bytes=this.urlEncode().getBytes(RequestHandler.UTF8);  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }  return bytes;}  }
class C{  public IndexCreationResult waitForResult() throws CacheException, ForceReattemptException {  try {    waitForCacheException();  } catch (  RuntimeException re) {    if (re instanceof PartitionedRegionException) {      if (re.getCause() instanceof RegionNotFoundException) {      } else {        throw re;      }    } else {      throw re;    }  }  return new IndexCreationResult(this.indexBucketsMap,this.numTotalBuckets);}  }
class C{  public symbol_part lhs(){  return _lhs;}  }
class C{  private void cleanupAfterRestoredFromTray(){  if (client.settings.getBoolean("useCustomNotifications")) {    trayIcon.setIconVisible(false);  }}  }
class C{  @SuppressWarnings("rawtypes") public InlineTasks(final IVariable var,final IConstant<IV> val,final List<IQueryNode> nodes){  this.var=var;  this.nodes=nodes;  this.val=val;}  }
class C{  public boolean isMessageTransferred(){  return getRemainingByteCount() == 0;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static IndexMetadata read(final IRawStore store,final long addr){  final IndexMetadata metadata=(IndexMetadata)SerializerUtil.deserialize(store.read(addr));  metadata.addrMetadata=addr;  return metadata;}  }
class C{  public List<Event<?>> events(){  return events;}  }
class C{  public Array(){  this(true,16);}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final long value){  buffer.append(value);}  }
class C{  private ResultPoint correctTopRight(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimension){  float corr=distance(bottomLeft,bottomRight) / (float)dimension;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimension;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(transitionsBetween(topLeft,c1).getTransitions() - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(transitionsBetween(topLeft,c2).getTransitions() - transitionsBetween(bottomRight,c2).getTransitions());  return l1 <= l2 ? c1 : c2;}  }
class C{  public Vector(int capacity){  this(capacity,0);}  }
class C{  public UpdateRequest upsert(XContentBuilder source){  safeUpsertRequest().source(source);  return this;}  }
class C{  private AvailablePortFinder(){}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  private BinaryResource commitResource(final String resourceId,final CacheKey key,final BinaryResource temporary) throws IOException {synchronized (mLock) {    BinaryResource resource=mStorageSupplier.get().commit(resourceId,temporary,key);    mCacheStats.increment(resource.size(),1);    return resource;  }}  }
class C{  public boolean hasSegments(){  return hasRepeatingExtension(Segment.class);}  }
class C{  protected Node newNode(){  return new SVGOMFontFaceElement();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.862 -0500",hash_original_method="2848E9F20BA335B73212BD50EFFC0121",hash_generated_method="EB703C257650D4356FE3191AE79E3A16") public TestRunner(ResultPrinter printer){  fPrinter=printer;}  }
class C{  @Override protected int makePressColor(){  return Color.parseColor("#88DDDDDD");}  }
class C{  public static int[] change1To0InArray(int a[]){  a[a[1]]=a[a[0]];  return a;}  }
class C{  public static boolean sameClass(Class c,Object o){  if (o == null)   return false;  return o.getClass() == c;}  }
class C{  final public MutableString delete(final char[] c){  final int n=c.length;  if (n == 0)   return this;  final char[] a=array;  final int length=length();  int i=length, k, bloomFilter=0;  k=n;  while (k-- != 0)   bloomFilter|=1 << (c[k] & 0x1F);  int l=0;  for (i=0; i < length; i++) {    if ((bloomFilter & (1 << (a[i] & 0x1F))) != 0) {      k=n;      while (k-- != 0)       if (a[i] == c[k])       break;      if (k >= 0)       continue;    }    a[l++]=a[i];  }  if (l != length) {    if (hashLength < 0) {      hashLength=-1;      array=CharArrays.trim(array,l);    } else     hashLength=l;  }  return this;}  }
class C{  private void loadChatFromComment(String taggedUserId,String chatName,String tags,String image,String userId,String userName,String category){  final String chatId=Utils.generateChatId(taggedUserId,AppConstants.UserInfo.INSTANCE.getId());  loadChat(taggedUserId,chatId,chatName,tags,image);}  }
class C{  public TickGenerator(String[] users,Properties producerConfig){  this.users=users;  producer=new KafkaProducer<String,String>(producerConfig);}  }
class C{  public final void uninstall(){  mH.obtainMessage(MSG_UNINSTALL).sendToTarget();}  }
class C{  public static LibraryFragment newInstance(){  LibraryFragment fragment=new LibraryFragment();  return fragment;}  }
class C{  public String toleranceParameterTipText(){  return "The tolerance parameter (shouldn't be changed).";}  }
class C{  protected JFlexMojo newMojo(String testCase) throws Exception {  File unitBasedir=new File(getBasedir(),"src/test/resources/unit");  File testPom=new File(unitBasedir,testCase + "/plugin-config.xml");  JFlexMojo mojo=new JFlexMojo();  configureMojo(mojo,"jflex-maven-plugin",testPom);  if (getVariableValueFromObject(mojo,"project") == null) {    setVariableValueToObject(mojo,"project",new MavenProjectStub());  }  return mojo;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  protected void write(DataOutputStream stream) throws Exception {  stream.writeLong(value);}  }
class C{  @Override public void onAlarm(Alarm alarm){  if (mCurrentScrollDir == DragController.SCROLL_LEFT) {    mContent.scrollLeft();    mScrollHintDir=DragController.SCROLL_NONE;  } else   if (mCurrentScrollDir == DragController.SCROLL_RIGHT) {    mContent.scrollRight();    mScrollHintDir=DragController.SCROLL_NONE;  } else {    return;  }  mCurrentScrollDir=DragController.SCROLL_NONE;  mScrollPauseAlarm.setOnAlarmListener(new OnScrollFinishedListener(mDragObject));  mScrollPauseAlarm.setAlarm(DragController.RESCROLL_DELAY);}  }
class C{  public static String u2(int v){  char[] result=new char[4];  for (int i=0; i < 4; i++) {    result[3 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  protected void waitForReceiverNotifications(int targetNumber) throws TimeoutException {  int count=mReceiver.numDownloadsCompleted();  int currentWaitTime=0;  while (count < targetNumber) {    Log.i(LOG_TAG,"Waiting for notification of downloads...");    currentWaitTime=timeoutWait(currentWaitTime,WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME,"Timed out waiting for download notifications!" + " Received " + count + "notifications.");    count=mReceiver.numDownloadsCompleted();  }}  }
class C{  public void testGetDataLength() throws Exception {  char expectedReturn=8;  addressAttribute.setAddress(new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS,MsgFixture.ADDRESS_ATTRIBUTE_PORT,Transport.UDP));  char actualReturn=addressAttribute.getDataLength();  assertEquals("Datalength is not propoerly calculated",expectedReturn,actualReturn);  expectedReturn=20;  addressAttribute.setAddress(new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS_V6,MsgFixture.ADDRESS_ATTRIBUTE_PORT,Transport.UDP));  actualReturn=addressAttribute.getDataLength();  assertEquals("Datalength is not propoerly calculated",expectedReturn,actualReturn);}  }
class C{  public JButton(Icon icon){  this(null,icon);}  }
class C{  @Override protected Void doInBackground(final PlaceInfo... params){  CheckIn checkin=new CheckIn();  checkin.setPlaceId("StoreOfy");  try {    shoppingAssistantAPI.checkins().insertCheckIn(checkin).execute();  } catch (  IOException e) {    String message=e.getMessage();    if (message == null) {      message=e.toString();    }    LOG.warning("Exception when checking in =" + message);  }  return null;}  }
class C{  public static Method findSuperClassMethod(Class clazz,String name,String desc){  Method m=findSuperMethod2(clazz.getSuperclass(),name,desc);  if (m == null)   m=searchInterfaces(clazz,name,desc);  if (m == null)   error(clazz,name,desc);  return m;}  }
class C{  private void validateReferenceUri(Reference reference) throws XMLSignatureException {  assert reference != null;  if (!org.jcp.xml.dsig.internal.dom.Utils.sameDocumentURI(reference.getURI())) {    throw new XMLSignatureException(String.format("Invalid reference '%s'. Only a same-document references are aupported.",reference.getURI()));  }}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static void addEnrichmentChamberRecipe(ItemStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addEnrichmentChamberRecipe",ItemStack.class,ItemStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public void testJarVerificationEmptyEntry() throws IOException {  Support_Resources.copyFile(resources,null,emptyEntryJar);  File f=new File(resources,emptyEntryJar);  JarFile jarFile=new JarFile(f);  ZipEntry zipEntry=jarFile.getJarEntry(emptyEntry1);  int res=jarFile.getInputStream(zipEntry).read(new byte[100],0,100);  assertEquals("Wrong length of empty jar entry",-1,res);  zipEntry=jarFile.getJarEntry(emptyEntry2);  res=jarFile.getInputStream(zipEntry).read(new byte[100],0,100);  assertEquals("Wrong length of empty jar entry",-1,res);  zipEntry=jarFile.getJarEntry(emptyEntry3);  res=jarFile.getInputStream(zipEntry).read();  assertEquals("Wrong length of empty jar entry",-1,res);}  }
class C{  public static BufferedImage renderToImage(File inFile,String path,int width) throws IOException {  return renderToImage(inFile.toURI().toURL().toExternalForm(),path,width);}  }
class C{  @Override public void onCreate(){  super.onCreate();  initGraph();  injectApplication();}  }
class C{  public void rollbackMethodNull(String stepId) throws WorkflowException {  WorkflowStepCompleter.stepSucceded(stepId);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.249 -0400",hash_original_method="58C3F19A1FFEE19F2AC6D03793C0E59C",hash_generated_method="CE915835F21DC41ECBD20F7163348532") final boolean casRight(Index<K,V> cmp,Index<K,V> val){  return UNSAFE.compareAndSwapObject(this,rightOffset,cmp,val);}  }
class C{  public Queue(){  this(new LinkedBlockingQueue<>());}  }
class C{  @Override public void input(Object input,Network network) throws Exception {  if (!isEnabled()) {    return;  }  Message message=(Message)input;  String fromUser=getFrom(message);  if (fromUser == null) {    fromUser=DEFAULT_SPEAKER;  }  String subject=message.getSubject();  if (subject == null) {    subject="";  }  subject=subject.trim();  if (fromUser.equals(getEmailAddress())) {    log("Ignoring email",Bot.FINE,subject,fromUser);    return;  }  if (fromUser.toLowerCase().indexOf("daemon") != -1) {    log("Ignoring daemon email",Bot.FINE,subject,fromUser);    return;  }  if (fromUser.toLowerCase().indexOf("twitter.com") != -1) {    log("Ignoring twitter email",Bot.FINE,subject,fromUser);    return;  }  if (fromUser.toLowerCase().indexOf("facebook.com") != -1) {    log("Ignoring facebook email",Bot.FINE,subject,fromUser);    return;  }  if (fromUser.toLowerCase().indexOf("google.com") != -1) {    log("Ignoring google email",Bot.FINE,subject,fromUser);    return;  }  if ((fromUser.toLowerCase().indexOf("noreply") != -1) || (fromUser.toLowerCase().indexOf("donotreply") != -1)) {    log("Ignoring noreply email",Bot.FINE,subject,fromUser);    return;  }  if (subject.toLowerCase().indexOf("noreply") != -1) {    log("Ignoring noreply email",Bot.FINE,subject,fromUser);    return;  }  this.emailsProcessed++;  log("Processing email",Level.INFO,subject,fromUser);  String toUser=getRecipient(message);  if (toUser == null) {    toUser=DEFAULT_SPEAKER;  }  Object content=message.getContent();  String text="";  if (content instanceof MimeMultipart) {    MimeMultipart parts=(MimeMultipart)content;    for (int index=0; index < parts.getCount(); index++) {      BodyPart body=parts.getBodyPart(index);      if (body.getContentType().toLowerCase().indexOf("text/plain") != -1) {        text=(String)body.getContent();        break;      }    }    if ((text == null) && (parts.getCount() > 0)) {      text=(String)parts.getBodyPart(0).getContent();      text=Utils.stripTags(text);    }  } else   if (content instanceof String) {    text=(String)content;    if (message.getContentType().toLowerCase().contains("html")) {      text=Utils.stripTags(text);    }  }  text=text.trim();  log("Processing email body",Level.INFO,subject,fromUser,text);  TextStream stream=new TextStream(text);  StringWriter writer=new StringWriter();  while (!stream.atEnd()) {    String nextLine=stream.nextLine();    if ((nextLine.length() > 0) && (nextLine.charAt(0) == '-')) {      if (nextLine.indexOf("---") != -1) {        break;      }    }    if ((nextLine.indexOf("@") != -1) && (nextLine.indexOf("wrote") != -1) && (nextLine.length() > 10)&& (nextLine.substring(0,2).equalsIgnoreCase("on"))) {      break;    }    if ((nextLine.length() > 0) && (nextLine.charAt(0) == '>')) {    } else {      writer.write(nextLine);    }  }  text=writer.toString();  if (text.length() == 0) {    text=subject;  }  log("Processing email content",Level.INFO,subject,fromUser,text);  inputSentence(text.trim(),subject,fromUser,toUser,message,network);}  }
class C{  public ChannelGrouperMediaFileNode(BasicMediaSource inSource,BasicMediaNode inParent,String inGroupLabel,java.util.Vector inDescendants){  super(inSource,inParent,inGroupLabel,DATATYPE_VIRTUAL,null,inDescendants);}  }
class C{  public static boolean isShoggothFood(EntityLivingBase entity){  return shoggothFood.contains(entity.getClass()) ? true : shoggothFood.contains(entity.getClass().getSuperclass()) ? true : shoggothFood.contains(entity.getClass().getSuperclass().getSuperclass()) ? true : false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.871 -0400",hash_original_method="15C7E5CD881CE32D9F06A99D4D026E34",hash_generated_method="9BBAC45502CCD82775DB6C6E87E290BA") private Compiler(){}  }
class C{  private void progress(int startingPosition){  if (index <= startingPosition)   throw error("Failure to make progress!");}  }
class C{  @Override public void dragGestureRecognized(DragGestureEvent dge){  JComponent c=(JComponent)dge.getComponent();  DefaultDrawingViewTransferHandler th=(DefaultDrawingViewTransferHandler)c.getTransferHandler();  Transferable t=transferable;  if (t != null) {    scrolls=c.getAutoscrolls();    c.setAutoscrolls(false);    try {      Icon icon=th.getVisualRepresentation(t);      Image dragImage;      if (icon instanceof ImageIcon) {        dragImage=((ImageIcon)icon).getImage();      } else {        dragImage=new BufferedImage(icon.getIconWidth(),icon.getIconHeight(),BufferedImage.TYPE_INT_ARGB);        Graphics g=((BufferedImage)dragImage).createGraphics();        icon.paintIcon(c,g,0,0);        g.dispose();      }      dge.startDrag(null,dragImage,imageOffset,t,this);      return;    } catch (    RuntimeException re) {      c.setAutoscrolls(scrolls);    }  }  th.exportDone(c,t,NONE);}  }
class C{  public static String createGuestShoppingListCookies(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  HttpSession session=request.getSession(true);  ShoppingCart cart=(ShoppingCart)session.getAttribute("shoppingCart");  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  Properties systemProps=System.getProperties();  String guestShoppingUserName="GuestShoppingListId_" + systemProps.getProperty("user.name").replace(" ","_");  String productStoreId=ProductStoreWorker.getProductStoreId(request);  int cookieAge=(60 * 60 * 24* 30);  String autoSaveListId=null;  Cookie[] cookies=request.getCookies();  if (UtilValidate.isNotEmpty(userLogin)) {    String partyId=userLogin.getString("partyId");    if (UtilValidate.isEmpty(partyId)) {      return "success";    }  }  if (cookies != null) {    for (    Cookie cookie : cookies) {      if (cookie.getName().equals(guestShoppingUserName)) {        autoSaveListId=cookie.getValue();        break;      }    }  }  if (ProductStoreWorker.autoSaveCart(delegator,productStoreId)) {    if (UtilValidate.isEmpty(autoSaveListId)) {      try {        Map<String,Object> listFields=UtilMisc.<String,Object>toMap("userLogin",userLogin,"productStoreId",productStoreId,"shoppingListTypeId","SLT_SPEC_PURP","listName",PERSISTANT_LIST_NAME);        Map<String,Object> newListResult=dispatcher.runSync("createShoppingList",listFields);        if (newListResult != null) {          autoSaveListId=(String)newListResult.get("shoppingListId");        }      } catch (      GeneralException e) {        Debug.logError(e,module);      }      Cookie guestShoppingListCookie=new Cookie(guestShoppingUserName,autoSaveListId);      guestShoppingListCookie.setMaxAge(cookieAge);      guestShoppingListCookie.setPath("/");      response.addCookie(guestShoppingListCookie);    }  }  if (UtilValidate.isNotEmpty(autoSaveListId)) {    if (UtilValidate.isNotEmpty(cart)) {      cart.setAutoSaveListId(autoSaveListId);    } else {      cart=ShoppingCartEvents.getCartObject(request);      cart.setAutoSaveListId(autoSaveListId);    }  }  return "success";}  }
class C{  public FileIcon(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  public AccessTokensBuilder socketTimeout(final int socketTimeout){  checkLock();  this.httpConfig.setSocketTimeout(socketTimeout);  return this;}  }
class C{  public XML(boolean atRuntime,String xmlPath) throws MalformedURLException, IOException {  if (!isNull(xmlPath)) {    xmlJmapper=atRuntime ? readAtRuntime(xmlPath) : readAtDevelopmentTime(xmlPath);    if (isPath(xmlPath))     this.xmlPath=atRuntime ? xmlPath : fullPathOf(xmlPath); else     this.xmlPath="";  }  if (isNull(xmlJmapper))   xmlJmapper=new XmlJmapper();  if (isNull(xmlJmapper.classes))   xmlJmapper.classes=new ArrayList<XmlClass>();}  }
class C{  public PEPPubSub(PEPItem item){  super();  this.item=item;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.DEBUG___DEBUG_1:    setDebug_1((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static String URIforPortablePath(String path){  if (path.startsWith(FileUtil.PREFERENCES)) {    return path.replaceFirst(FileUtil.PREFERENCES,"/prefs/");  } else   if (path.startsWith(FileUtil.PROGRAM)) {    return path.replaceFirst(FileUtil.PROGRAM,"/dist/");  } else {    return null;  }}  }
class C{  private static OFActionSetNwSrc decode_set_src_ip(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+))").matcher(actionToDecode);  if (n.matches()) {    IPv4Address ipaddr=IPv4Address.of(get_ip_addr(n,actionToDecode,log));    OFActionSetNwSrc.Builder ab=OFFactories.getFactory(version).actions().buildSetNwSrc();    ab.setNwAddr(ipaddr);    log.debug("action {}",ab.build());    return ab.build();  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }}  }
class C{  public synchronized Iterator rrs(){  return iterator(true,true);}  }
class C{  @Override public boolean dataDefinitionCausesTransactionCommit(){  debugCodeCall("dataDefinitionCausesTransactionCommit");  return true;}  }
class C{  public void writeIdToBuffer(int index,long id){  this.ngramBuffer.putLong((index + 1) * LONG_SIZE_IN_BYTES,id);}  }
class C{  private final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEOFDone=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  zzFinalHighSurrogate=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;  if (zzBuffer.length > ZZ_BUFFERSIZE)   zzBuffer=new char[ZZ_BUFFERSIZE];}  }
class C{  public static Optional<IRegion> findCellRegion(final IDocument document,final boolean isTsv,final int offset) throws BadLocationException {  final String prev=offset > 0 ? document.get(offset - 1,1) : "";  final String next=offset < document.getLength() ? document.get(offset,1) : "";  if (isInsideSeparator(prev,next,isTsv)) {    return Optional.absent();  }  final int beginOffset=offset - calculateCellRegionBegin(document,isTsv,offset);  final int endOffset=offset + calculateCellRegionEnd(document,isTsv,offset);  return Optional.<IRegion>of(new Region(beginOffset,endOffset - beginOffset));}  }
class C{  public boolean isAntialiasing(){  return mAntialiasing;}  }
class C{  public static void deleteBookmarks(final BackEndDebuggerProvider provider,final int[] rows){  Preconditions.checkNotNull(provider,"IE01329: Provider argument can not be null");  Preconditions.checkNotNull(rows,"IE01330: Rows argument can not be null");  final ArrayList<Pair<BookmarkManager,CBookmark>> bookmarks=new ArrayList<Pair<BookmarkManager,CBookmark>>();  for (  final int row : rows) {    final Triple<IDebugger,BookmarkManager,Integer> bookmarkTriple=CBookmarkTableHelpers.findBookmark(provider,row);    final BookmarkManager manager=bookmarkTriple.second();    final int index=bookmarkTriple.third();    bookmarks.add(Pair.make(manager,manager.getBookmark(index)));  }  for (  final Pair<BookmarkManager,CBookmark> p : bookmarks) {    p.first().removeBookmark(p.second());  }}  }
class C{  public ResourceAccessException(String uri,String message){  this(uri,message,null);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public static File byteArrayToFile(final byte[] content,final File file) throws IOException {  if (content == null) {    throw new NullPointerException("null array of bytes given");  }  if (file == null) {    throw new NullPointerException("null file given");  }  try (FileOutputStream out=new FileOutputStream(file)){    out.write(content);  }   return file;}  }
class C{  public static void superposeWithAngle(ComplexVector vec1,ComplexVector vec2){  int dim=vec1.getDimension();  assert (dim == vec2.getDimension());  assert (vec1.getOpMode() == ComplexVector.Mode.CARTESIAN || vec1.getOpMode() == ComplexVector.Mode.HERMITIAN);  assert (vec2.getOpMode() == ComplexVector.Mode.POLAR_DENSE);  short c[]=vec2.getPhaseAngles();  float[] coordinates=vec1.getCoordinates();  for (int i=0, j=0; i < dim; i++, j+=2) {    coordinates[j]+=CircleLookupTable.getRealEntry(c[i]);    coordinates[j + 1]+=CircleLookupTable.getImagEntry(c[i]);  }}  }
class C{  public AlphaBetaDebugNode copy(){  AlphaBetaDebugNode n=new AlphaBetaDebugNode(alpha,beta);  n.value=value;  n._ctr=_ctr;  return n;}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  @Override public void onPageScrollStateChanged(int state){}  }
class C{  public void test_stressReallocationWithRead(){  Journal store=(Journal)getStore();  try {    final int tcount=1000;    final RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bufferStrategy.getStore();    long numAllocs=rw.getTotalAllocations();    long startAllocations=rw.getTotalAllocationsSize();    reallocBatchWithRead(store,1,50,250,tcount,false,false);    reallocBatchWithRead(store,1,50,250,tcount,false,false);    reallocBatchWithRead(store,1,50,250,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,800,1500,tcount,false,false);    reallocBatchWithRead(store,1,50,250,tcount,false,false);    reallocBatchWithRead(store,1,50,250,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,250,500,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,800,1256,tcount,false,false);    reallocBatchWithRead(store,1,50,250,tcount,false,false);    reallocBatchWithRead(store,1,50,250,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,5000,10000,tcount,false,false);    reallocBatchWithRead(store,1,500,1000,tcount,false,false);    reallocBatchWithRead(store,1,1000,2000,tcount,false,false);    reallocBatchWithRead(store,1,500,1000,tcount,false,false);    store.commit();    showStore(store);    store.close();    store=(Journal)getStore();    showStore(store);  }  finally {    store.destroy();  }}  }
class C{  public int lazyMethodInvokerTrampolineIndex(){  return length() - lazyMethodInvokerTrampolineWords();}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        addToken(Token.IDENTIFIER);      }case 58:    break;case 25:{    yybegin(INTAG_SCRIPT);    addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);  }case 59:break;case 54:{addToken(Token.LITERAL_BOOLEAN);}case 60:break;case 44:{addToken(Token.ERROR_CHAR);}case 61:break;case 41:{addToken(Token.ERROR_NUMBER_FORMAT);}case 62:break;case 23:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE_SCRIPT);}case 63:break;case 34:{int count=yylength();addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);zzMarkedPos-=(count - 1);yybegin(INTAG_CHECK_TAG_NAME);}case 64:break;case 14:{yybegin(YYINITIAL);addToken(Token.MARKUP_TAG_DELIMITER);}case 65:break;case 9:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 66:break;case 45:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 67:break;case 33:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JS_MLC);return firstToken;}case 68:break;case 55:{addToken(Token.FUNCTION);}case 69:break;case 39:{addToken(Token.COMMENT_EOL);addEndToken(INTERNAL_IN_JS);return firstToken;}case 70:break;case 28:{addEndToken(INTERNAL_IN_JS);return firstToken;}case 71:break;case 35:{start=zzMarkedPos - 2;yybegin(DTD);}case 72:break;case 57:{yybegin(YYINITIAL);addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - 7,zzMarkedPos - 2,Token.MARKUP_TAG_NAME);addToken(zzMarkedPos - 1,zzMarkedPos - 1,Token.MARKUP_TAG_DELIMITER);}case 73:break;case 30:{addToken(Token.ERROR_CHAR);addEndToken(INTERNAL_IN_JS);return firstToken;}case 74:break;case 18:{yypushback(1);yybegin(INTAG);}case 75:break;case 27:{addToken(Token.ERROR_IDENTIFIER);}case 76:break;case 40:{start=zzMarkedPos - 2;yybegin(JS_MLC);}case 77:break;case 21:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 78:break;case 4:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(INTAG);}case 79:break;case 10:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.VARIABLE);}case 80:break;case 47:{yybegin(JAVASCRIPT);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 81:break;case 37:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.PREPROCESSOR);}case 82:break;case 50:{addToken(Token.LITERAL_CHAR);}case 83:break;case 36:{start=zzMarkedPos - 2;yybegin(PI);}case 84:break;case 16:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE);}case 85:break;case 43:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 86:break;case 17:{yypushback(yylength());yybegin(INTAG);}case 87:break;case 24:{start=zzMarkedPos - 1;yybegin(INATTR_DOUBLE_SCRIPT);}case 88:break;case 5:{addToken(Token.WHITESPACE);}case 89:break;case 6:{addToken(Token.DATA_TYPE);}case 90:break;case 19:{addToken(Token.MARKUP_TAG_NAME);}case 91:break;case 29:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 92:break;case 15:{start=zzMarkedPos - 1;yybegin(INATTR_SINGLE);}case 93:break;case 11:{addToken(Token.MARKUP_TAG_ATTRIBUTE);}case 94:break;case 20:{yybegin(INTAG);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 95:break;case 26:{yybegin(INTAG_SCRIPT);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 96:break;case 51:{start=zzMarkedPos - 4;yybegin(COMMENT);}case 97:break;case 46:{addToken(Token.RESERVED_WORD);}case 98:break;case 56:{addToken(zzStartRead,zzStartRead,Token.MARKUP_TAG_DELIMITER);addToken(zzMarkedPos - 6,zzMarkedPos - 1,Token.MARKUP_TAG_NAME);start=zzMarkedPos;yybegin(INTAG_SCRIPT);}case 99:break;case 49:{yybegin(YYINITIAL);addToken(start,zzStartRead + 2,Token.COMMENT_MULTILINE);}case 100:break;case 48:{int count=yylength();addToken(zzStartRead,zzStartRead + 1,Token.MARKUP_TAG_DELIMITER);zzMarkedPos-=(count - 2);yybegin(INTAG_CHECK_TAG_NAME);}case 101:break;case 32:{addToken(Token.SEPARATOR);}case 102:break;case 31:{addToken(Token.ERROR_STRING_DOUBLE);addEndToken(INTERNAL_IN_JS);return firstToken;}case 103:break;case 3:{addNullToken();return firstToken;}case 104:break;case 22:{yybegin(JAVASCRIPT);addToken(Token.MARKUP_TAG_DELIMITER);}case 105:break;case 38:{addToken(Token.MARKUP_TAG_DELIMITER);yybegin(YYINITIAL);}case 106:break;case 7:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 107:break;case 12:{addToken(Token.OPERATOR);}case 108:break;case 42:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 109:break;case 13:{addToken(Token.MARKUP_TAG_DELIMITER);}case 110:break;case 52:{addToken(Token.COMMENT_MULTILINE);}case 111:break;case 8:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 112:break;case 53:{addToken(Token.ERROR_STRING_DOUBLE);}case 113:break;case 1:{}case 114:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case INTAG_CHECK_TAG_NAME:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 567:break;case JS_MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addEndToken(INTERNAL_IN_JS_MLC);return firstToken;}case 568:break;case INTAG_SCRIPT:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG_SCRIPT);return firstToken;}case 569:break;case INATTR_DOUBLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_DOUBLE_QUOTE_SCRIPT);return firstToken;}case 570:break;case INATTR_SINGLE_SCRIPT:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);addEndToken(INTERNAL_ATTR_SINGLE_QUOTE_SCRIPT);return firstToken;}case 571:break;case DTD:{addToken(start,zzStartRead - 1,Token.VARIABLE);return firstToken;}case 572:break;case INATTR_SINGLE:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 573:break;case INATTR_DOUBLE:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 574:break;case YYINITIAL:{addNullToken();return firstToken;}case 575:break;case INTAG:{addToken(zzMarkedPos,zzMarkedPos,INTERNAL_INTAG);return firstToken;}case 576:break;case COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 577:break;case JAVASCRIPT:{addEndToken(INTERNAL_IN_JS);return firstToken;}case 578:break;case PI:{addToken(start,zzStartRead - 1,Token.PREPROCESSOR);return firstToken;}case 579:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  private ColorUtil(){}  }
class C{  public void testIdWithTwoSlashes(){  String jndiName="jdbc/app1/DataSource";  String propertyString=DatasourcePropertySet.JNDI_LOCATION + "=" + jndiName;  DataSource ds=dataSourceConverter.fromPropertyString(propertyString);  assertEquals("DataSource",ds.getId());}  }
class C{  public ChildNodes(Class<? extends T> elementClass){  assert elementClass.getTypeParameters().length == 0;  this.elementClass=elementClass;}  }
class C{  public JsonArrayRequest(int method,String url,String requestBody,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,requestBody,listener,errorListener);}  }
class C{  public static void cutSchedule(TransitSchedule schedule,Set<Id<TransitStopFacility>> stopsInArea){  log.info("Cutting schedule...");  log.info("   area contains " + stopsInArea.size() + " stops.");  int routesRemoved=0;  Set<TransitLine> linesToRemove=new HashSet<>();  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : new HashSet<>(transitLine.getRoutes().values())) {      boolean toKeep=false;      for (      TransitRouteStop stop : transitRoute.getStops()) {        if (stopsInArea.contains(stop.getStopFacility().getId())) {          toKeep=true;        }      }      if (!toKeep) {        transitLine.removeRoute(transitRoute);        routesRemoved++;      }    }    if (transitLine.getRoutes().isEmpty()) {      linesToRemove.add(transitLine);    }  }  log.info("   routes removed: " + routesRemoved);  for (  TransitLine lineToRemove : linesToRemove) {    schedule.removeTransitLine(lineToRemove);  }  log.info("   lines removed: " + linesToRemove.size());  removeNotUsedStopFacilities(schedule);}  }
