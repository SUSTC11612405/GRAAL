class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_STRICTNESS_1__STRICTNESS_LEVEL_1:    setStrictnessLevel_1((String)newValue);  return;case UmplePackage.ANONYMOUS_STRICTNESS_1__MESSAGE_1:setMessage_1((String)newValue);return;case UmplePackage.ANONYMOUS_STRICTNESS_1__MESSAGE_NUMBER_1:setMessageNumber_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void saveSelection(IMiniTable miniTable){  log.info("");  ArrayList<Integer> results=new ArrayList<Integer>();  setSelection(null);  int rows=miniTable.getRowCount();  for (int i=0; i < rows; i++) {    IDColumn id=(IDColumn)miniTable.getValueAt(i,0);    if (id != null && id.isSelected())     results.add(id.getRecord_ID());  }  if (results.size() == 0)   return;  log.config("Selected #" + results.size());  setSelection(results);}  }
class C{  public VcfFormatIntegerAnnotator(AbstractDerivedFormatAnnotation annotation){  assert annotation != null && annotation.getType().getClassType() == Integer.class;  mAnnotation=annotation;}  }
class C{  AnalyzerResults(){  super();  algorithmResults=new ArrayList<AlgorithmResult>();}  }
class C{  public WebResourceStatistics computeMark(WebResourceStatistics wrStatistics){  float passed=wrStatistics.getNbOfPassed();  if (passed == -1) {    wrStatistics.setRawMark(Float.valueOf(-1));    return wrStatistics;  }  float failed=wrStatistics.getNbOfFailed();  float needMoreInfo=wrStatistics.getNbOfNmi();  if (failed == 0 && passed == 0) {    wrStatistics.setMark(Float.valueOf(0));    return wrStatistics;  }  float ratioNMI=needMoreInfo / (passed + failed + needMoreInfo);  float result=((1 - ratioNMI) * passed / (passed + failed) + ratioNMI * needMoreInfo / (passed + failed + needMoreInfo)) * 100f;  wrStatistics.setMark(result);  return wrStatistics;}  }
class C{  public Waypoint addWaypoint(WaypointState state){  int index=(int)state.id;  Waypoint currentWaypoint=new Waypoint(state);  currentWaypoint.showAsSphere(polyIsEnabled);  index=pointSet.addPoint(currentWaypoint,index);  state.id=index;  currentWaypoint.addMotionListener(this);  if (index < (pointSet.getNumberOfChildren() - 1)) {    renumberWaypoints(index);  }  updateLabels(currentWaypoint);  enableLine(lineIsEnabled);  enablePolygon(polyIsEnabled);  updateGeometricState(0);  newPoints++;  return (currentWaypoint);}  }
class C{  public Rational multiply(Rational secondRational){  long n=r[0] * secondRational.getNumerator();  long d=r[1] * secondRational.getDenominator();  return new Rational(n,d);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.930 -0500",hash_original_method="A8F7BAC49E734C18D4B72E93D6F191D5",hash_generated_method="1DDA233E94630EFD323339E9EE81BFF5") public boolean connectHeadsetInternal(BluetoothDevice device){  if (DBG)   log("connectHeadsetInternal");  if (mService != null && isEnabled()) {    try {      return mService.connectHeadsetInternal(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  public void render(Graphics g){  if (!correctFill) {    super.render(g);  } else {    Shape s=getShape();    if (!isRenderable(s)) {      return;    }    if (shouldRenderFill()) {      setGraphicsForFill(g);      fill(g,s);      if (textureMask != null && textureMask != fillPaint) {        setGraphicsColor(g,textureMask);        fill(g,s);      }    }    if (shouldRenderEdge()) {      setGraphicsForEdge(g);      ((Graphics2D)g).draw(polarShapeLine);    }  }}  }
class C{  public JPasswordField(String text){  this(null,text,0);}  }
class C{  private void parseArgs(){  @SuppressWarnings("unused") String command=null;  @SuppressWarnings("unused") String outFile=null;  @SuppressWarnings("unused") String renameDefinitions=null;  String curArg=null;  while (argvIterator.hasNext()) {    curArg=argvIterator.next();    if ("-check".equals(curArg)) {      if (argvIterator.hasNext()) {        String m=argvIterator.next();        if (m.equalsIgnoreCase("direct"))         checkDirect=true; else         if (m.equalsIgnoreCase("replicated"))         checkDirect=false; else         fatal("Unrecognised check (use direct or replicated instead): " + m,null);        println(String.format("Check: " + m));      }    } else     if ("-method".equals(curArg)) {      if (argvIterator.hasNext()) {        String m=argvIterator.next();        if (m.equalsIgnoreCase("pk"))         methodPk=true; else         if (m.equalsIgnoreCase("limit"))         methodPk=false; else         fatal("Unrecognised method (use pk or limit instead): " + m,null);      }    } else     if ("-rmiHost".equals(curArg)) {      if (argvIterator.hasNext())       rmiHostMaster=argvIterator.next();    } else     if ("-rmiPort".equals(curArg)) {      if (argvIterator.hasNext())       rmiPortMaster=argvIterator.next();    } else     if ("-service".equals(curArg)) {      if (argvIterator.hasNext()) {        service=argvIterator.next();      }    } else     if ("-db".equals(curArg)) {      if (argvIterator.hasNext())       schema=argvIterator.next();    } else     if ("-tables".equals(curArg)) {      if (argvIterator.hasNext())       tables=argvIterator.next();    } else     if ("-timeout".equals(curArg)) {      if (argvIterator.hasNext())       checkTimeout=Integer.parseInt(argvIterator.next());    } else     if ("-chunk".equals(curArg)) {      if (argvIterator.hasNext()) {        String val=argvIterator.next();        if ("single".equalsIgnoreCase(val))         chunkSize=-1; else {          chunkSize=Integer.parseInt(val);          if (!((chunkSize & -chunkSize) == chunkSize)) {            int x=findClosestChunk(chunkSize);            fatal("-chunk must specify a value of power of two (eg. 1024, 2048, ...), try " + x,null);          }        }      }    } else     if ("-chunk-pause".equals(curArg)) {      if (argvIterator.hasNext()) {        String val=argvIterator.next();        chunkPause=Integer.parseInt(val);      }    } else     if ("-granularity".equals(curArg)) {      if (argvIterator.hasNext())       granularity=Integer.parseInt(argvIterator.next());    } else     if ("-from".equals(curArg)) {      if (argvIterator.hasNext())       rowFrom=Integer.parseInt(argvIterator.next());      if (rowFrom < 0)       fatal("-from option requires a non-negative number",null);    } else     if ("-till".equals(curArg)) {      if (argvIterator.hasNext())       rowTill=Integer.parseInt(argvIterator.next());      if (rowTill < 0)       fatal("-till option requires a non-negative number",null);    } else     if ("-verbose".equals(curArg)) {      verbose=true;    } else     if ("-values".equals(curArg)) {      printValues=true;    } else     if ("-conf1".equals(curArg)) {      if (argvIterator.hasNext())       configFileMaster=argvIterator.next();    } else     if ("-user".equals(curArg)) {      if (argvIterator.hasNext())       jdbcUserMaster=argvIterator.next();    } else     if ("-pass".equals(curArg)) {      if (argvIterator.hasNext())       jdbcPassMaster=argvIterator.next();    } else     if ("-url1".equals(curArg)) {      if (argvIterator.hasNext())       jdbcUrlMaster=argvIterator.next();    } else     if ("-url2".equals(curArg)) {      if (argvIterator.hasNext()) {        jdbcUrlSlave=new String[1];        jdbcUrlSlave[0]=argvIterator.next();      }    } else     if ("-out".equals(curArg)) {      if (argvIterator.hasNext())       outFile=argvIterator.next();    } else     if ("-rename".equals(curArg)) {      if (argvIterator.hasNext())       renameDefinitions=argvIterator.next();    } else     if ("-help".equals(curArg)) {      printHelp();      succeed();    } else     if (curArg.startsWith("-")) {      println("Unrecognized option: " + curArg);      printHelp();      fail();    } else     command=curArg;  }  if (schema == null)   fatal("Database is not provided! Use: -db",null);}  }
class C{  public static PluginInterface instance(final String startPath,final IDatabaseManager manager,final com.google.security.zynamics.binnavi.Plugins.PluginRegistry registry){  if (instance != null) {    throw new IllegalStateException("Error: Plugin interface can not be instantiated more than once");  }  instance=new PluginInterface(startPath,manager,registry);  return instance;}  }
class C{  protected SurfaceData initAcceleratedSurface(){  SurfaceData sData;  Component comp=vImg.getComponent();  X11ComponentPeer peer=(comp != null) ? (X11ComponentPeer)comp.getPeer() : null;  try {    boolean createVSynced=false;    boolean forceback=false;    if (context instanceof Boolean) {      forceback=((Boolean)context).booleanValue();      if (forceback && peer instanceof BackBufferCapsProvider) {        BackBufferCapsProvider provider=(BackBufferCapsProvider)peer;        BufferCapabilities caps=provider.getBackBufferCaps();        if (caps instanceof ExtendedBufferCapabilities) {          ExtendedBufferCapabilities ebc=(ExtendedBufferCapabilities)caps;          if (ebc.getVSync() == VSYNC_ON && ebc.getFlipContents() == COPIED) {            createVSynced=true;            forceback=false;          }        }      }    }    if (forceback) {      sData=GLXSurfaceData.createData(peer,vImg,FLIP_BACKBUFFER);    } else {      GLXGraphicsConfig gc=(GLXGraphicsConfig)vImg.getGraphicsConfig();      ColorModel cm=gc.getColorModel(vImg.getTransparency());      int type=vImg.getForcedAccelSurfaceType();      if (type == OGLSurfaceData.UNDEFINED) {        type=gc.isCapPresent(CAPS_EXT_FBOBJECT) ? OGLSurfaceData.FBOBJECT : OGLSurfaceData.PBUFFER;      }      if (createVSynced) {        sData=GLXSurfaceData.createData(peer,vImg,type);      } else {        sData=GLXSurfaceData.createData(gc,vImg.getWidth(),vImg.getHeight(),cm,vImg,type);      }    }  } catch (  NullPointerException ex) {    sData=null;  }catch (  OutOfMemoryError er) {    sData=null;  }  return sData;}  }
class C{  protected void fireFigureRemoved(){  if (listenerList.getListenerCount() > 0) {    FigureEvent event=null;    Object[] listeners=listenerList.getListenerList();    for (int i=listeners.length - 2; i >= 0; i-=2) {      if (listeners[i] == FigureListener.class) {        if (event == null) {          event=new FigureEvent(this,getBounds());        }        ((FigureListener)listeners[i + 1]).figureRemoved(event);      }    }  }}  }
class C{  public void startGiiQueueing(){  this.giiLock.writeLock().lock();  this.giiCount++;  if (logger.isDebugEnabled()) {    logger.debug("{}: startGiiQueueing count is now {}",this.region.getName(),this.giiCount);  }  this.giiLock.writeLock().unlock();}  }
class C{  public DateMidnight plus(ReadableDuration duration){  return withDurationAdded(duration,1);}  }
class C{  protected void isTextWellFormed(Text node){  Character invalidChar=isWFXMLChar(node.getData());  if (invalidChar != null) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_TEXT,new Object[]{Integer.toHexString(Character.getNumericValue(invalidChar.charValue()))});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));    }  }}  }
class C{  public HttpMultipart(final String subType,final Charset charset,final String boundary,HttpMultipartMode mode){  super();  if (subType == null) {    throw new IllegalArgumentException("Multipart subtype may not be null");  }  if (boundary == null) {    throw new IllegalArgumentException("Multipart boundary may not be null");  }  this.subType=subType;  this.charset=charset != null ? charset : MIME.DEFAULT_CHARSET;  this.boundary=boundary;  this.parts=new ArrayList<FormBodyPart>();  this.mode=mode;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public StylesheetPIHandler(String baseID,String media,String title,String charset){  m_baseID=baseID;  m_media=media;  m_title=title;  m_charset=charset;}  }
class C{  private static void clearAndRemoveSet() throws IgniteException {  System.out.println("Set size before clearing: " + set.size());  set.clear();  System.out.println("Set size after clearing: " + set.size());  set.close();  System.out.println("Set was removed: " + set.removed());  try {    set.contains("1");  } catch (  IllegalStateException expected) {    System.out.println("Expected exception - " + expected.getMessage());  }}  }
class C{  public RE union(RE y) throws InterruptedException {  return mkUnion(this,y);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double numDownslopeNeighbours;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          numDownslopeNeighbours=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData && z2 < z) {              numDownslopeNeighbours++;            }          }          output.setValue(row,col,numDownslopeNeighbours);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ObjectFactory(){}  }
class C{  private void checkStarted() throws StunException {  if (!started)   throw new StunException(StunException.ILLEGAL_STATE,"The Discoverer must be started before " + "launching the discovery process!");}  }
class C{  private static boolean isWindowsAbsolutePath(String systemId){  if (!isAbsolutePath(systemId))   return false;  if (systemId.length() > 2 && systemId.charAt(1) == ':' && Character.isLetter(systemId.charAt(0)) && (systemId.charAt(2) == '\\' || systemId.charAt(2) == '/'))   return true; else   return false;}  }
class C{  public static void logPacketToPcap(DatagramPacket p,boolean isSent,InetAddress interfaceAddress,int interfacePort){  if (interfaceAddress != null && isPacketLoggerEnabled()) {    InetAddress[] addr={interfaceAddress,p.getAddress()};    int[] port={interfacePort,p.getPort()};    int fromIndex=isSent ? 0 : 1;    int toIndex=isSent ? 1 : 0;    getPacketLogger().logPacket(addr[fromIndex].getAddress(),port[fromIndex],addr[toIndex].getAddress(),port[toIndex],p.getData(),isSent);  }}  }
class C{  public StatementBuilder append(String s){  builder.append(s);  return this;}  }
class C{  public static void serializeGroupReply(List<OFGroupStatsReply> groupReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFGroupStatsReply groupReply=groupReplies.get(0);  jGen.writeStringField("version",groupReply.getVersion().toString());  jGen.writeFieldName("group");  jGen.writeStartArray();  for (  OFGroupStatsEntry entry : groupReply.getEntries()) {    jGen.writeStartObject();    jGen.writeStringField("groupNumber",entry.getGroup().toString());    jGen.writeNumberField("refCount",entry.getRefCount());    jGen.writeNumberField("packetCount",entry.getPacketCount().getValue());    jGen.writeNumberField("byteCount",entry.getByteCount().getValue());    jGen.writeFieldName("bucketCounters");    jGen.writeStartArray();    for (    OFBucketCounter bCounter : entry.getBucketStats()) {      jGen.writeStartObject();      jGen.writeNumberField("packetCount",bCounter.getPacketCount().getValue());      jGen.writeNumberField("byteCount",bCounter.getByteCount().getValue());      jGen.writeEndObject();    }    jGen.writeEndArray();    if (OFVersion.OF_13 == entry.getVersion()) {      jGen.writeNumberField("durationSec",entry.getDurationSec());      jGen.writeNumberField("durationNsec",entry.getDurationNsec());    }    jGen.writeEndObject();  }  jGen.writeEndArray();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override protected void autoAdjustRange(){  Plot plot=getPlot();  if (plot == null) {    return;  }  if (plot instanceof ValueAxisPlot) {    double upper=this.symbols.size() - 1;    double lower=0;    double range=upper - lower;    double minRange=getAutoRangeMinimumSize();    if (range < minRange) {      upper=(upper + lower + minRange) / 2;      lower=(upper + lower - minRange) / 2;    }    double upperMargin=0.5;    double lowerMargin=0.5;    if (getAutoRangeIncludesZero()) {      if (getAutoRangeStickyZero()) {        if (upper <= 0.0) {          upper=0.0;        } else {          upper=upper + upperMargin;        }        if (lower >= 0.0) {          lower=0.0;        } else {          lower=lower - lowerMargin;        }      } else {        upper=Math.max(0.0,upper + upperMargin);        lower=Math.min(0.0,lower - lowerMargin);      }    } else {      if (getAutoRangeStickyZero()) {        if (upper <= 0.0) {          upper=Math.min(0.0,upper + upperMargin);        } else {          upper=upper + upperMargin * range;        }        if (lower >= 0.0) {          lower=Math.max(0.0,lower - lowerMargin);        } else {          lower=lower - lowerMargin;        }      } else {        upper=upper + upperMargin;        lower=lower - lowerMargin;      }    }    setRange(new Range(lower,upper),false,false);  }}  }
class C{  static BidirectionalFrame frameFromOrdinal(final int value){  return values()[value];}  }
class C{  public Instances stringFreeStructure(){  ArrayList<Attribute> newAtts=new ArrayList<Attribute>();  for (  Attribute att : m_Attributes) {    if (att.type() == Attribute.STRING) {      newAtts.add(new Attribute(att.name(),(List<String>)null,att.index()));    } else     if (att.type() == Attribute.RELATIONAL) {      newAtts.add(new Attribute(att.name(),new Instances(att.relation(),0),att.index()));    }  }  if (newAtts.size() == 0) {    return new Instances(this,0);  }  ArrayList<Attribute> atts=Utils.cast(m_Attributes.clone());  for (  Attribute att : newAtts) {    atts.set(att.index(),att);  }  Instances result=new Instances(this,0);  result.m_Attributes=atts;  return result;}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.180 -0500",hash_original_method="E4F57F923C13DCFDFB2A278667BC010D",hash_generated_method="5D0A27352F38E3C125CF335CBDA1294C") public StringBuilder(int capacity){  super(capacity);}  }
class C{  public boolean isSynthetic(){  return (getModifiers() & ClassFileConstants.AccSynthetic) != 0;}  }
class C{  private static int nextIDByYear(Connection conn,int AD_Sequence_ID,int incrementNo,String calendarYear){  if (conn == null || AD_Sequence_ID == 0)   return -3;  int retValue=-1;  String sqlUpdate="{call nextIDByYear(?,?,?,?)}";  CallableStatement cstmt=null;  try {    cstmt=conn.prepareCall(sqlUpdate,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);    cstmt.setInt(1,AD_Sequence_ID);    cstmt.setInt(2,incrementNo);    cstmt.setString(3,calendarYear);    cstmt.registerOutParameter(4,Types.INTEGER);    if (DB.getDatabase().isQueryTimeoutSupported()) {      cstmt.setQueryTimeout(QUERY_TIME_OUT);    }    cstmt.execute();    retValue=cstmt.getInt(4);  } catch (  Exception e) {    s_log.log(Level.SEVERE,e.toString());  } finally {    DB.close(cstmt);  }  return retValue;}  }
class C{  protected LessOp_Impl(){  super();}  }
class C{  public List<String[]> tokenSequences(JCas aJCas) throws FeaturePathException {  return psg.tokenSequences(aJCas).stream().map(null).collect(Collectors.toList());}  }
class C{  public static void doneTiming(){  long end=System.currentTimeMillis();  long diff=end - timingStart;  if (end - timingStart > 0)   pt(timingCause + " took " + diff / 1000.0 + "s");  timingStart=-1;}  }
class C{  void storeComment(NamedBean t,Element elem){  if (t.getComment() != null) {    Element c=new Element("comment");    c.addContent(t.getComment());    elem.addContent(c);  }}  }
class C{  public void narrow() throws OperatorFailedException {  NodeRef i=null, iP=null, j=null, jP=null;  int tries=0;  while (tries < MAX_TRIES) {    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    while (tree.getRoot() == i || tree.getParent(i) == tree.getRoot()) {      i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    }    iP=tree.getParent(i);    jP=tree.getParent(iP);    j=tree.getChild(jP,0);    if (j == iP) {      j=tree.getChild(jP,1);    }    if ((tree.getNodeHeight(j) < tree.getNodeHeight(iP)) && (tree.getNodeHeight(i) < tree.getNodeHeight(jP))) {      break;    }    tries+=1;  }  if (tries < MAX_TRIES) {    eupdate(i,j,iP,jP);    tree.pushTreeChangedEvent(iP);    tree.pushTreeChangedEvent(jP);  } else   throw new OperatorFailedException("Couldn't find valid narrow move on this tree!!");}  }
class C{  public void addMessageListener(MessageListener listener){  m_notifier.add(listener);}  }
class C{  @Override public void handleMouseInput(){  super.handleMouseInput();  int i=Mouse.getEventDWheel();  if (i != 0 && needsScrollBars()) {    final int j=tileEntity.filters.size() - 4;    if (i > 0) {      i=1;    }    if (i < 0) {      i=-1;    }    scroll=(float)(scroll - (double)i / (double)j);    if (scroll < 0.0F) {      scroll=0.0F;    }    if (scroll > 1.0F) {      scroll=1.0F;    }  }}  }
class C{  @Override public String toString(){  return "CUcontext[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  public void open(String stream,String quality){  if (stream != null) {    String url="twitch.tv/" + stream;    if (!Helper.validateChannel(stream)) {      url=stream;    }    Item existingItem=getExisitingItem(url,quality);    if (existingItem != null) {      existingItem.start();      tabs.setSelectedComponent(existingItem);    } else {      Item newItem=new Item(url,quality,stream);      tabs.add(StringUtil.shortenTo(stream,-20),newItem);      tabs.setSelectedComponent(newItem);      tabs.setToolTipTextAt(tabs.getSelectedIndex(),stream);      newItem.start();      pack();    }  }  loadSettings();  if (stream == null || quality == null || openDialog.isSelected()) {    setLocationRelativeTo(parent);    setVisible(true);  }}  }
class C{  public void configure(){  XNetTrafficController packets=new LIUSBXNetPacketizer(new LenzCommandStation());  packets.connectPort(this);  this.getSystemConnectionMemo().setXNetTrafficController(packets);  new XNetInitializationManager(this.getSystemConnectionMemo());}  }
class C{  @Override public IConnection createFromRequest(final IHttpRequest request) throws IOException {  return new UrlConnection(request);}  }
class C{  public Iterator<Long> keys(){  return timings.keySet().iterator();}  }
class C{  public Vector3f scaleAdd(float scalar,Vector3f mult,Vector3f add){  this.x=mult.x * scalar + add.x;  this.y=mult.y * scalar + add.y;  this.z=mult.z * scalar + add.z;  return this;}  }
class C{  synchronized void start(GridStartContext startCtx) throws IgniteCheckedException {  if (startGuard.compareAndSet(false,true)) {    try {      starterThread=Thread.currentThread();      start0(startCtx);    } catch (    Exception e) {      if (log != null)       stopExecutors(log);      throw e;    } finally {      startLatch.countDown();    }  } else   U.awaitQuiet(startLatch);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.567 -0400",hash_original_method="E1AE690439B99186744061A6E3E661B4",hash_generated_method="27A02049D54ADEE5D264F1C3D97D47CE") public CookieManager(CookieStore store,CookiePolicy cookiePolicy){  this.store=store == null ? new CookieStoreImpl() : store;  policy=cookiePolicy == null ? CookiePolicy.ACCEPT_ORIGINAL_SERVER : cookiePolicy;}  }
class C{  public synchronized void write(byte b[],int off,int len) throws IOException {  if (len >= buf.length) {    flushBuffer();    out.write(b,off,len);    return;  }  if (len > buf.length - count) {    flushBuffer();  }  System.arraycopy(b,off,buf,count,len);  count+=len;}  }
class C{  public Builder preProcessor(BitmapProcessor preProcessor){  this.preProcessor=preProcessor;  return this;}  }
class C{  public Knapsack(InputStream inputStream) throws IOException {  this(new InputStreamReader(inputStream));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_DECLS_OR_BINDINGS:    return getVarDeclsOrBindings();case N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_STMT_KEYWORD:  return getVarStmtKeyword();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public BasicLancopeParserTest(String name){  super(name);}  }
class C{  public static boolean isServiceRunning(Class<? extends Service> service,Context context){  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  for (  ActivityManager.RunningServiceInfo runningServiceInfo : manager.getRunningServices(Integer.MAX_VALUE)) {    if (service.getName().equals(runningServiceInfo.service.getClassName())) {      return true;    }  }  return false;}  }
class C{  private void unselectAllOtherLists(RemoteRepository source){  if (source == null) {    for (    JList<Configurable> list : remoteConfigLists.values()) {      clearSelection(list);    }  } else {    clearSelection(localConfigList);    for (    String key : remoteConfigLists.keySet()) {      if (!source.getName().equals(key)) {        JList<Configurable> list=remoteConfigLists.get(key);        clearSelection(list);      }    }  }}  }
class C{  public static XMPPConnection tryToCreateAccount(String username,String host,String password) throws Exception {  username=needsDomainPart(username,host);  XMPPTCPConnection connection=createConnection(host);  connection.connect();  AccountManager accManager=AccountManager.getInstance(connection);  if (!accManager.supportsAccountCreation()) {    throw new Exception("Server does not support account creation");  }  accManager.createAccount(username,password);  return connection;}  }
class C{  public boolean isAddressedModePossible(){  if (mode == SprogMode.OPS) {    return true;  } else {    return false;  }}  }
class C{  public static void main(String[] args) throws FormatException {  Debug.init();  if (args.length == 0) {    Debug.output("Usage: java com.bbn.openmap.layer.vpf.GenerateVPFProperties <path to vpf database directory> <path to vpf database directory> ...");    System.exit(0);  }  for (int argsi=0; argsi < args.length; argsi++) {    rootpath=args[argsi];    LibrarySelectionTable lst=new LibrarySelectionTable(rootpath);    if (Debug.debugging("vpf")) {      Debug.output("Path to database: " + rootpath);      Debug.output("Database Name: " + lst.getDatabaseName());    }    println("### Generated openmap.properties for");    println("# VPF Data at: " + rootpath);    println("# Description: " + lst.getDatabaseDescription());    List<String> libraries=lst.getLibraryNames();    if (Debug.debugging("vpf")) {      print("Database Libraries: ");      for (      String libraryName : libraries) {        print(libraryName," ");      }      println();      println();    }    for (    String libraryName : libraries) {      String prefix=lst.getDatabaseName() + "_" + libraryName;      println("# Library: " + prefix);      printLibrary(prefix,lst.getCAT(libraryName));      println();    }  }}  }
class C{  private void showError(final LoadResult<T> plugins,final IPlugin<T> plugin,final PluginStatus pluginStatus){  String message="";  String description="";switch (pluginStatus) {case DuplicateGuid:    message="E00009: " + "Detected a GUID collision between two plugins";  description=CUtilityFunctions.createDescription(String.format("BinNavi could not load the plugins '%s' and '%s' because they " + "share the same GUID.",plugin.getName(),getPluginWithGuid(plugins.getLoadedPlugins(),plugin.getGuid()).getName()),new String[]{"Plugin GUIDs have to be unique but two plugins share the same " + "GUID."},new String[]{"Neither of the two plugins is loaded until the plugin authors " + "resolve their GUID collision."});break;case InvalidGuid:message="E00010: " + "Detected a plugin with an invalid GUID";description=CUtilityFunctions.createDescription(String.format("The plugin '%s' has the invalid GUID %d.",plugin.getName(),plugin.getGuid()),new String[]{"Certain values are not valid for plugin GUIDs. The specified " + "plugin uses such an invalid GUID."},new String[]{"The plugin is not loaded until the plugin author changes " + "the GUID of this plugin."});break;case InvalidName:message="E00011: " + "Detected a plugin with an invalid name";description=CUtilityFunctions.createDescription(String.format("The plugin with GUID %d has the invalid name '%s'.",plugin.getGuid(),plugin.getName()),new String[]{"Certain values are not valid for plugin names. The specified " + "plugin uses such an invalid name."},new String[]{"The plugin is not loaded until the plugin author changes the " + "name of this plugin."});break;case InvalidNameGuid:message="E00103: " + "Detected a plugin with an invalid name and an invalid GUID";description=CUtilityFunctions.createDescription(String.format("The plugin with GUID %d has the invalid name '%s'.",plugin.getGuid(),plugin.getName()),new String[]{"Certain values are not valid for plugin names and plugin GUIDs. " + "The specified plugin uses such an invalid name and an invalid GUID."},new String[]{"The plugin is not loaded until the plugin author changes the " + "name and the GUID of this plugin."});break;default :throw new IllegalStateException("IE00001: Encountered an invalid plugin status");}NaviErrorDialog.show(parent,message,description);}  }
class C{  public static Map<String,Object> watchEntity(DispatchContext dctx,Map<String,? extends Object> context){  GenericValue newValue=(GenericValue)context.get("newValue");  String fieldName=(String)context.get("fieldName");  if (newValue == null) {    return ServiceUtil.returnSuccess();  }  GenericValue currentValue=null;  try {    currentValue=dctx.getDelegator().findOne(newValue.getEntityName(),newValue.getPrimaryKey(),false);  } catch (  GenericEntityException e) {    String errMsg="Error finding currentValue for primary key [" + newValue.getPrimaryKey() + "]: "+ e.toString();    Debug.logError(e,errMsg,module);  }  if (currentValue != null) {    if (UtilValidate.isNotEmpty(fieldName)) {      Object currentFieldValue=currentValue.get(fieldName);      Object newFieldValue=newValue.get(fieldName);      boolean changed=false;      if (currentFieldValue != null) {        if (!currentFieldValue.equals(newFieldValue)) {          changed=true;        }      } else {        if (newFieldValue != null) {          changed=true;        }      }      if (changed) {        String errMsg="Watching entity [" + currentValue.getEntityName() + "] field ["+ fieldName+ "] value changed from ["+ currentFieldValue+ "] to ["+ newFieldValue+ "] for pk ["+ newValue.getPrimaryKey()+ "]";        Debug.logInfo(new Exception(errMsg),errMsg,module);      }    } else {      if (!currentValue.equals(newValue)) {        String errMsg="Watching entity [" + currentValue.getEntityName() + "] values changed from ["+ currentValue+ "] to ["+ newValue+ "] for pk ["+ newValue.getPrimaryKey()+ "]";        Debug.logInfo(new Exception(errMsg),errMsg,module);      }    }  } else {    if (UtilValidate.isNotEmpty(fieldName)) {      Object newFieldValue=newValue.get(fieldName);      String errMsg="Watching entity [" + newValue.getEntityName() + "] field ["+ fieldName+ "] value changed from [null] to ["+ newFieldValue+ "] for pk ["+ newValue.getPrimaryKey()+ "]";      Debug.logInfo(new Exception(errMsg),errMsg,module);    } else {      String errMsg="Watching entity [" + newValue.getEntityName() + "] values changed from [null] to ["+ newValue+ "] for pk ["+ newValue.getPrimaryKey()+ "]";      Debug.logInfo(new Exception(errMsg),errMsg,module);    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public void save() throws IOException {  saveImpl(loc);  setDirty(false);  syncLastSaveOrLoadTimeToActualFile();}  }
class C{  private void loadU10(Repository repo) throws Exception {  RepositoryConnection cxn=repo.getConnection();  cxn.setAutoCommit(false);  try {    long stmtsBefore=((BigdataSailRepository)repo).getDatabase().getStatementCount();    log.info("statements before: " + stmtsBefore);    long start=System.currentTimeMillis();{      InputStream is=Concurrency.class.getResourceAsStream("univ-bench.owl");      Reader reader=new InputStreamReader(new BufferedInputStream(is));      cxn.add(reader,LUBM.NS,RDFFormat.RDFXML);      cxn.commit();    }{      InputStream is=Concurrency.class.getResourceAsStream("U10.zip");      ZipInputStream zis=new ZipInputStream(new BufferedInputStream(is));      ZipEntry ze=null;      while ((ze=zis.getNextEntry()) != null) {        if (ze.isDirectory()) {          continue;        }        String name=ze.getName();        log.info(name);        ByteArrayOutputStream baos=new ByteArrayOutputStream();        byte[] bytes=new byte[4096];        int count;        while ((count=zis.read(bytes,0,4096)) != -1) {          baos.write(bytes,0,count);        }        baos.close();        Reader reader=new InputStreamReader(new ByteArrayInputStream(baos.toByteArray()));        cxn.add(reader,LUBM.NS,RDFFormat.RDFXML);        cxn.commit();      }      zis.close();    }    long elapsed=System.currentTimeMillis() - start;    long stmtsAfter=((BigdataSailRepository)repo).getDatabase().getStatementCount();    long stmtsAdded=stmtsAfter - stmtsBefore;    int throughput=(int)((double)stmtsAdded / (double)elapsed * 1000d);    log.info("statements after: " + stmtsAfter);    log.info("loaded: " + stmtsAdded + " in "+ elapsed+ " millis: "+ throughput+ " stmts/sec");  } catch (  Exception ex) {    cxn.rollback();    throw ex;  } finally {    cxn.close();  }}  }
class C{  protected JMenuItem createItem(final String label,final Icon icon){  return new RedirectingMenuItem(label,icon);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRANSITION___GUARD_1:    return getGuard_1();case UmplePackage.TRANSITION___EVENT_DEFINITION_1:  return getEventDefinition_1();case UmplePackage.TRANSITION___ACTION_1:return getAction_1();case UmplePackage.TRANSITION___STATE_NAME_1:return getStateName_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean containsKey(Object key){  return map.containsKey(key);}  }
class C{  public static List<Project> filterUniqueSnapshots(List<Project> projects){  Set<String> nameAndDateSet=new HashSet<>();  int newCount=0;  int oldCount=0;  List<Project> result=new ArrayList<>();  for (  Project p : projects) {    String key=p.getPrimaryLanguage() + ":" + p.getName()+ ":"+ p.getOrganizationName()+ ":"+ p.getSnapshotDate().getTime();    if (!nameAndDateSet.contains(key)) {      newCount++;      result.add(p);      nameAndDateSet.add(key);    } else {      oldCount++;    }  }  return result;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:10.993 -0500",hash_original_method="4E1EBB3BBAC8D401DF269C3E01907C25",hash_generated_method="3F41CB72EDBFBA4B8071CFDBE53B872B") public NNTPConnectionClosedException(){  super();}  }
class C{  public void testBug15854() throws Exception {  if (versionMeetsMinimum(5,0)) {    createTable("testBug15854","(field1 BIT)");    try {      this.rs=this.conn.getMetaData().getColumns(this.conn.getCatalog(),null,"testBug15854","field1");      assertTrue(this.rs.next());      assertEquals(Types.BIT,this.rs.getInt("DATA_TYPE"));    }  finally {      if (this.rs != null) {        ResultSet toClose=this.rs;        this.rs=null;        toClose.close();      }    }  }}  }
class C{  public boolean canCorrectHardwareClock(){  return false;}  }
class C{  @Override public boolean supportsSubqueriesInIns(){  debugCodeCall("supportsSubqueriesInIns");  return true;}  }
class C{  @Override protected boolean hasFab(){  return false;}  }
class C{  public static void doCastToPrimitive(MethodVisitor mv,ClassNode sourceType,ClassNode targetType){  mv.visitMethodInsn(INVOKEVIRTUAL,BytecodeHelper.getClassInternalName(sourceType),targetType.getName() + "Value","()" + BytecodeHelper.getTypeDescription(targetType),false);}  }
class C{  private static void cleanDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDeleteOnExit(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public static void assertContentsInOrder(Iterable<?> actual,Object... expected){  assertContentsInOrder((String)null,actual,expected);}  }
class C{  public NodeSetDTM(NodeList nodeList,XPathContext xctxt){  super();  m_manager=xctxt.getDTMManager();  int n=nodeList.getLength();  for (int i=0; i < n; i++) {    Node node=nodeList.item(i);    int handle=xctxt.getDTMHandleFromNode(node);    addNode(handle);  }}  }
class C{  public Instances(Instances source,int first,int toCopy){  this(source,toCopy);  if ((first < 0) || ((first + toCopy) > source.numInstances())) {    throw new IllegalArgumentException("Parameters first and/or toCopy out " + "of range");  }  source.copyInstances(first,this,toCopy);}  }
class C{  @Override public Long zremrangeByScore(final String key,final double start,final double end){  checkIsInMultiOrPipeline();  client.zremrangeByScore(key,start,end);  return client.getIntegerReply();}  }
class C{  public int flags(){  return theType.flags();}  }
class C{  public boolean isSetTransactionId(){  return EncodingUtils.testBit(__isset_bitfield,__TRANSACTIONID_ISSET_ID);}  }
class C{  final TypeDeclaration internalGetTypeDeclaration(){  supportedOnlyIn2();  return (TypeDeclaration)getDeclaration();}  }
class C{  public void createStorageView(URI vplexURI,URI exportURI,URI exportMaskURI,Map<URI,Integer> blockObjectMap,List<URI> initiators,List<URI> targets,String stepId) throws ControllerException {  String lockName=null;  boolean lockAcquired=false;  try {    StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);    ExportGroup exportGroup=getDataObject(ExportGroup.class,exportURI,_dbClient);    ExportMask exportMask=getDataObject(ExportMask.class,exportMaskURI,_dbClient);    WorkflowStepCompleter.stepExecuting(stepId);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);    List<PortInfo> targetPortInfos=new ArrayList<PortInfo>();    for (    URI target : targets) {      StoragePort port=getDataObject(StoragePort.class,target,_dbClient);      PortInfo pi=new PortInfo(port.getPortNetworkId().toUpperCase().replaceAll(":",""),null,port.getPortName(),null);      targetPortInfos.add(pi);      if (lockName == null) {        String clusterId=ConnectivityUtil.getVplexClusterOfPort(port);        lockName=_vplexApiLockManager.getLockName(vplexURI,clusterId);      }    }    List<PortInfo> initiatorPortInfos=new ArrayList<PortInfo>();    for (    URI init : initiators) {      Initiator initiator=getDataObject(Initiator.class,init,_dbClient);      PortInfo pi=new PortInfo(initiator.getInitiatorPort().toUpperCase().replaceAll(":",""),initiator.getInitiatorNode().toUpperCase().replaceAll(":",""),initiator.getLabel(),getVPlexInitiatorType(initiator));      initiatorPortInfos.add(pi);    }    List<BlockObject> blockObjects=new ArrayList<BlockObject>();    Map<String,Integer> boMap=new HashMap<String,Integer>();    for (    URI vol : blockObjectMap.keySet()) {      Integer lun=blockObjectMap.get(vol);      if (lun == null) {        lun=ExportGroup.LUN_UNASSIGNED;      }      BlockObject bo=Volume.fetchExportMaskBlockObject(_dbClient,vol);      blockObjects.add(bo);      boMap.put(bo.getDeviceLabel(),lun);    }    lockAcquired=_vplexApiLockManager.acquireLock(lockName,LockTimeoutValue.get(LockType.VPLEX_API_LIB));    if (!lockAcquired) {      throw VPlexApiException.exceptions.couldNotObtainConcurrencyLock(vplex.getLabel());    }    VPlexStorageViewInfo svInfo=client.createStorageView(exportMask.getMaskName(),targetPortInfos,initiatorPortInfos,boMap);    Map<URI,Integer> updatedBlockObjectMap=new HashMap<URI,Integer>();    for (    BlockObject bo : blockObjects) {      String deviceLabel=bo.getDeviceLabel();      bo.setWWN(svInfo.getWWNForStorageViewVolume(deviceLabel));      _dbClient.updateObject(bo);      updatedBlockObjectMap.put(bo.getId(),svInfo.getHLUForStorageViewVolume(deviceLabel));    }    _log.info("Updating volume/lun map in export mask {}",exportMask.getId());    _log.info("updatedBlockObjectMap: " + updatedBlockObjectMap.toString());    exportMask.addVolumes(updatedBlockObjectMap);    exportMask.addToUserCreatedVolumes(blockObjects);    exportMask.setNativeId(svInfo.getPath());    _dbClient.updateObject(exportMask);    _dbClient.updateObject(exportGroup);    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception creating VPlex Storage View: " + vae.getMessage(),vae);    if ((null != vae.getMessage()) && vae.getMessage().toUpperCase().contains(VPlexApiConstants.DUPLICATE_STORAGE_VIEW_ERROR_FRAGMENT.toUpperCase())) {      _log.error("storage view creation failure is due to duplicate storage view name");      ExportMask exportMask=_dbClient.queryObject(ExportMask.class,exportMaskURI);      if (null != exportMask) {        _log.error("marking ExportMask inactive so that rollback will " + "not delete the existing storage view on the VPLEX");        _dbClient.markForDeletion(exportMask);      }    }    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception creating VPlex Storage View: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.CREATE_STORAGE_VIEW.getName();    ServiceError serviceError=VPlexApiException.errors.createStorageViewFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  } finally {    if (lockAcquired) {      _vplexApiLockManager.releaseLock(lockName);    }  }}  }
class C{  private static void printHelp(){  System.out.println("Help for the MetricSpaces class\n" + "===============================\n" + "\n"+ "Run the main method to create a compatible file to be used \n"+ "for indexing and hashing. This text is shown with the \n"+ "-h option.\n"+ "\n"+ "$> MetricSpaces -i <input-file> -p <parameters>\n"+ "\n"+ "<input-file> ... gives the image data set to sample from, \n"+ "                 one per line, lines starting with # are \n"+ "\t\t\t\t ignored.\n"+ "<parameters> ... number of reference points and length of \n"+ "\t\t\t\t the posting list, eg. \"-p 1000,50\"\n"+ "\t\t\t\t \n"+ "\n"+ "Example usage:\n"+ "--------------\n"+ "\n"+ "$> MetricSpaces -i mylist.txt -p 500,25");}  }
class C{  public void addCircle(int x1,int y1,int w,int h,LinkProperties properties) throws IOException {  LinkCircle.write(x1,y1,w,h,properties,link.dos);}  }
class C{  public SocketConnection createSimpleSecureSocketClientConnection(String fingerprint){  return new AndroidSecureSocketConnection(fingerprint,mRcsSettings);}  }
class C{  @Override protected void addComboListenerAndLabel(final GUICombo combo){  ((ComboBoxBase<String>)combo).setOnAction((EventHandler<ActionEvent>)currentCommandListener.getCommandListener());}  }
class C{  public boolean isExpanded(TreePath path){  if (path == null)   return false;  Object value;  do {    value=expandedState.get(path);    if (value == null || !((Boolean)value).booleanValue())     return false;  } while ((path=path.getParentPath()) != null);  return true;}  }
class C{  public void testArabicSort(){  assertQ("Collated Sort: ",req("fl","id","q","sort_ar:[\u0698 TO \u0633\u0633]","sort","sort_ar asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=12]","//result/doc[2]/int[@name='id'][.=1]");}  }
class C{  public List<VPlexMigrationInfo> commitMigrations(String virtualVolumeName,List<String> migrationNames,boolean cleanup,boolean remove,boolean rename) throws VPlexApiException {  s_logger.info("Request to commit migrations on VPlex at {}",_baseURI);  return _migrationMgr.commitMigrations(virtualVolumeName,migrationNames,cleanup,remove,rename);}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public void removeOnScrollListener(final OnScrollListener listener){  throwIfNotOnMainThread();  compositeScrollListener.removeOnScrollListener(listener);}  }
class C{  public CProximityNodeMenu(final JFrame parent,final ZyGraph graph,final ZyProximityNode<INaviViewNode> node){  Preconditions.checkNotNull(parent,"IE02150: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE00972: Graph argument can't be null");  Preconditions.checkNotNull(node,"IE00973: Node argument can't be null");  add(CActionProxy.proxy(new CUnhideNodesAction(parent,graph,node)));  addSeparator();  final JMenuItem unhideParentItem=new JMenuItem(CActionProxy.proxy(new CUnhideParentsAction(parent,graph,node)));  unhideParentItem.setEnabled(!node.isIncoming());  add(unhideParentItem);  final JMenuItem unhideChildrenItem=new JMenuItem(CActionProxy.proxy(new CUnhideChildrenAction(parent,graph,node)));  unhideChildrenItem.setEnabled(node.isIncoming());  add(unhideChildrenItem);  addSeparator();  add(CActionProxy.proxy(new CUnhideAndSelectAction(graph,node)));  add(CActionProxy.proxy(new CUnhideAndAddToSelectionAction(graph,node)));}  }
class C{  public static void splitTrapsAgainst(Body b,Unit rangeStart,Unit rangeEnd){  Chain traps=b.getTraps(), units=b.getUnits();  Iterator trapsIt=traps.snapshotIterator();  while (trapsIt.hasNext()) {    Trap t=(Trap)trapsIt.next();    Iterator unitIt=units.iterator(t.getBeginUnit(),t.getEndUnit());    boolean insideRange=false;    while (unitIt.hasNext()) {      Unit u=(Unit)unitIt.next();      if (u.equals(rangeStart))       insideRange=true;      if (!unitIt.hasNext()) {        if (insideRange) {          Trap newTrap=(Trap)t.clone();          t.setBeginUnit(rangeStart);          newTrap.setEndUnit(rangeStart);          traps.insertAfter(newTrap,t);        } else         break;      }      if (u.equals(rangeEnd)) {        if (!insideRange)         throw new RuntimeException("inversed range?");        Trap firstTrap=(Trap)t.clone();        Trap secondTrap=(Trap)t.clone();        firstTrap.setEndUnit(rangeStart);        secondTrap.setBeginUnit(rangeStart);        secondTrap.setEndUnit(rangeEnd);        t.setBeginUnit(rangeEnd);        traps.insertAfter(firstTrap,t);        traps.insertAfter(secondTrap,t);      }    }  }}  }
class C{  public boolean isValidForPhotoCaptureEvent(){  return (mMode != null);}  }
class C{  public static void updateDouble(VisualItem item,String field,double val){  item.setDouble(getStartField(field),item.getDouble(field));  item.setDouble(field,val);  item.setDouble(getEndField(field),val);}  }
class C{  public void reset(){  resetMappings();  notifyDataSetChanged();}  }
class C{  private static String toHex(byte[] array){  BigInteger bi=new BigInteger(1,array);  String hex=bi.toString(16);  int paddingLength=(array.length * 2) - hex.length();  if (paddingLength > 0) {    return String.format("%0" + paddingLength + "d",Integer.valueOf(0)) + hex;  }  return hex;}  }
class C{  public StateViewer(StateMonitorTab tab){  super(new StaticLayout<String,Integer>(new DelegateForest<String,Integer>()));  this.tab=tab;  final ScalingControl scaler=new CrossoverScalingControl();  scaler.scale(this,0.7f,getCenter());  setBackground(Color.white);  getRenderContext().setVertexLabelTransformer(new ToStringLabeller<String>());  getRenderContext().setVertexShapeTransformer(new CustomVertexShapeRenderer());  getRenderContext().setVertexFillPaintTransformer(new CustomVertexColourRenderer());  getRenderContext().setVertexLabelRenderer(new CustomVertexLabelRenderer());  getRenderer().getVertexLabelRenderer().setPosition(Position.S);  setVertexToolTipTransformer(new CustomToolTipTransformer());  ToolTipManager.sharedInstance().setDismissDelay(1000000000);  DefaultModalGraphMouse<String,Integer> graphMouse=new DefaultModalGraphMouse<String,Integer>();  graphMouse.setMode(Mode.PICKING);  graphMouse.add(new PopupHandler(this));  setGraphMouse(graphMouse);  shownDistribs=new HashMap<String,DistributionViewer>();}  }
class C{  protected void convertUnicode(){  if (ch == '\\' && unicodeConversionBp != bp) {    bp++;    ch=buf[bp];    if (ch == 'u') {      do {        bp++;        ch=buf[bp];      } while (ch == 'u');      int limit=bp + 3;      if (limit < buflen) {        int d=digit(bp,16);        int code=d;        while (bp < limit && d >= 0) {          bp++;          ch=buf[bp];          d=digit(bp,16);          code=(code << 4) + d;        }        if (d >= 0) {          ch=(char)code;          unicodeConversionBp=bp;          return;        }      }      log.error(bp,"illegal.unicode.esc");    } else {      bp--;      ch='\\';    }  }}  }
class C{  public void onReceive(Object message) throws Exception {  if (TaskAndEvents.class.isAssignableFrom(message.getClass())) {    TaskAndEvents taskAndEvent=(TaskAndEvents)message;    final Props supervisorProps=AkkaTaskSupervisor.getTaskSupervisorProps(taskAndEvent.getTaskIdentifier(),taskAndEvent.getRetryCount());    String supName=taskAndEvent.getTaskName() + "-Supervisor-" + INSTANCE_COUNTER.incrementAndGet();    ActorRef sup=getContext().actorOf(supervisorProps,supName);    sup.tell(taskAndEvent,getSelf());  } else   if (Event.class.isAssignableFrom(message.getClass())) {    Event returnedEvent=(Event)message;    getContext().stop(getSender());    fluxRuntimeConnector.submitEvent(new EventData(returnedEvent.getName(),returnedEvent.getType(),returnedEvent.getEventData(),returnedEvent.getEventSource()),returnedEvent.getStateMachineInstanceId());  } else {    logger.error("Task received a message that it cannot process. Only com.flipkart.flux.impl.message.TaskAndEvents is supported. Message type received is : {}",message.getClass().getName());    unhandled(message);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public void shutdown(){  coreContainer.shutdown();}  }
class C{  public WMSException(String message){  this(message,null);}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public Long rpush(final String key,final String... strings){  checkIsInMulti();  client.rpush(key,strings);  return client.getIntegerReply();}  }
class C{  protected static Map<String,Collection<UUID>> groupByHost(Collection<ClusterNode> top){  Map<String,Collection<UUID>> grouped=U.newHashMap(top.size());  for (  ClusterNode node : top) {    for (    String host : node.hostNames()) {      Collection<UUID> nodeIds=grouped.get(host);      if (nodeIds == null) {        nodeIds=new ArrayList<>(2);        grouped.put(host,nodeIds);      }      nodeIds.add(node.id());    }  }  return grouped;}  }
class C{  private StorageTier checkStorageTierExistsInDB(String tierNativeGuid){  StorageTier tier=null;  URIQueryResultList tierQueryResult=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageTierByIdConstraint(tierNativeGuid),tierQueryResult);  if (tierQueryResult.iterator().hasNext()) {    tier=_dbClient.queryObject(StorageTier.class,tierQueryResult.iterator().next());  }  return tier;}  }
class C{  private byte[][] readArray(byte[] d,String key,String end){  int i=findSlashName(d,key);  if (i < 0) {    return new byte[0][];  }  PSParser psp=new PSParser(d,i);  String type=psp.readThing();  double val;  type=psp.readThing();  if (type.equals("StandardEncoding")) {    byte[] stdenc[]=new byte[FontSupport.standardEncoding.length][];    for (i=0; i < stdenc.length; i++) {      stdenc[i]=FontSupport.getName(FontSupport.standardEncoding[i]).getBytes();    }    return stdenc;  }  int len=Integer.parseInt(type);  byte[] out[]=new byte[len][];  byte[] line;  while (true) {    String s=psp.readThing();    if (s.equals("dup")) {      String thing=psp.readThing();      int id=0;      try {        id=Integer.parseInt(thing);      } catch (      Exception e) {        break;      }      String elt=psp.readThing();      line=elt.getBytes();      if (Character.isDigit(elt.charAt(0))) {        int hold=Integer.parseInt(elt);        String special=psp.readThing();        if (special.equals("-|") || special.equals("RD")) {          psp.setLoc(psp.getLoc() + 1);          line=psp.getNEncodedBytes(hold,password,lenIV);        }      }      out[id]=line;    } else     if (s.equals(end)) {      break;    }  }  return out;}  }
class C{  private void validateAddParams(T source,String sourceID,T target,Position p){  if (source == null || sourceID == null || sourceID.length() < 1 || target == null || p == null) {    String message=null;    if (source == null) {      message="Attempt to add a null source object";    } else     if (sourceID == null) {      message="Attempt to assign an invalid id to added source " + source + ",  sourceID = "+ sourceID;    } else     if (target == null) {      message="Attempt to add a source object to an invalid target";    } else     if (p == null) {      message="Attempt to add a source object to an invalid target location p = " + p;    }    throw new IllegalArgumentException(message);  }}  }
class C{  protected String extractPackageName(final Class<?> root){  return root.getName().substring(0,root.getName().length() - root.getSimpleName().length() - 1);}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public void add(float summand){  this.points[0]+=summand;  this.points[1]+=summand;  this.points[2]+=summand;}  }
class C{  public Object callRefreshSystem(StorageSystem storage) throws WBEMException {  Object result=null;  String lockKey=String.format("callRefreshSystem-%s",storage.getId().toString());  try {    if (_locker.acquireLock(lockKey,MAX_REFRESH_LOCK_WAIT_TIME)) {      CIMObjectPath seSystemRegistrationSvc=getRegistrationService(storage);      UnsignedInteger32[] syncType=new UnsignedInteger32[]{new UnsignedInteger32(REPLICATION_DATA_SYNC_TYPE),new UnsignedInteger32(DEVICES_SYNC_TYPE),new UnsignedInteger32(MASKING_SYNC_TYPE)};      CIMObjectPath[] systems=new CIMObjectPath[]{_cimPath.getStorageSystem(storage)};      CIMArgument[] refreshArgs=new CIMArgument[]{_cimArgument.uint32Array(CP_SYNC_TYPE,syncType),_cimArgument.referenceArray(CP_SYSTEMS,systems)};      CIMArgument[] outArgs=new CIMArgument[5];      result=invokeMethod(storage,seSystemRegistrationSvc,EMC_REFRESH_SYSTEM,refreshArgs,outArgs);      long currentMillis=Calendar.getInstance().getTimeInMillis();      storage.setLastRefresh(currentMillis);      _dbClient.updateObject(storage);      _log.info(String.format("Did EMCRefresh against StorageSystem %s. " + "Last refresh set to %d",storage.getNativeGuid(),currentMillis));    }  }  finally {    _locker.releaseLock(lockKey);  }  return result;}  }
class C{  public void removed(java.awt.Container cont){}  }
class C{  public boolean hasStatement(final Resource s,final URI p,final Value o,final boolean includeInferred,final Resource... c) throws Exception {  if (c == null) {    throw new IllegalArgumentException();  }  final UUID uuid=UUID.randomUUID();  final ConnectOptions opts=mgr.newQueryConnectOptions(sparqlEndpointURL,uuid,tx);  opts.addRequestParam("HASSTMT");  opts.addRequestParam(RemoteRepositoryDecls.INCLUDE_INFERRED,Boolean.toString(includeInferred));  if (s != null) {    opts.addRequestParam("s",EncodeDecodeValue.encodeValue(s));  }  if (p != null) {    opts.addRequestParam("p",EncodeDecodeValue.encodeValue(p));  }  if (o != null) {    opts.addRequestParam("o",EncodeDecodeValue.encodeValue(o));  }  opts.addRequestParam("c",EncodeDecodeValue.encodeContexts(c));  JettyResponseListener resp=null;  try {    opts.setAcceptHeader(ConnectOptions.MIME_APPLICATION_XML);    checkResponseCode(resp=doConnect(opts));    final BooleanResult result=RemoteRepositoryManager.booleanResults(resp);    return result.result;  }  finally {    if (resp != null)     resp.abort();  }}  }
class C{  public static ScaleAndIndex median(){  return scale(2).index(1);}  }
class C{  public GithubUrl parse(String url){  Matcher matcher=GITHUB_PATTERN.matcher(url);  if (!matcher.matches()) {    throw new IllegalArgumentException(String.format("The given github url %s is not a valid URL github url. It should start with https://github.com/<user>/<repo>",url));  }  return new GithubUrl().username(matcher.group("repoUser")).repository(matcher.group("repoName")).branch(matcher.group("branchName")).subfolder(matcher.group("subFolder"));}  }
class C{  @Override public long singlePhaseCommit(final long tx) throws ExecutionException, InterruptedException, IOException {  setupLoggingContext();  try {    if (TimestampUtility.isReadOnly(tx)) {      throw new IllegalArgumentException();    }    final Tx localState=(Tx)getLocalTransactionManager().getTx(tx);    if (localState == null) {      throw new IllegalStateException();    }    final ManagedJournal journal=getResourceManager().getLiveJournal();{      localState.lock.lock();      try {        if (localState.isEmptyWriteSet()) {          localState.setRunState(RunState.Committed);          ((DataServiceTransactionManager)journal.getLocalTransactionManager()).deactivateTx(localState);          return 0L;        }      }  finally {        localState.lock.unlock();      }    }    final IConcurrencyManager concurrencyManager=getConcurrencyManager();    final AbstractTask<Void> task=new SinglePhaseCommit(concurrencyManager,journal.getLocalTransactionManager(),localState);    try {      concurrencyManager.submit(task).get();      localState.lock.lock();      try {        localState.setRunState(RunState.Committed);        ((DataServiceTransactionManager)journal.getLocalTransactionManager()).deactivateTx(localState);      }  finally {        localState.lock.unlock();      }    } catch (    Throwable t) {      localState.lock.lock();      try {        localState.setRunState(RunState.Aborted);        ((DataServiceTransactionManager)journal.getLocalTransactionManager()).deactivateTx(localState);        throw new RuntimeException(t);      }  finally {        localState.lock.unlock();      }    }    return task.getCommitTime();  }  finally {    clearLoggingContext();  }}  }
class C{  public static TargetAttribute targetAttribute(String name){  return new TargetAttribute(name);}  }
class C{  public static boolean belowOrEqual(long a,long b){  return Long.compareUnsigned(a,b) <= 0;}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  @Override public Object invoke(final Object proxy,final Method method,final Object[] args) throws Throwable {  try {    return method.invoke(delegate(),args);  } catch (  IllegalArgumentException e) {    WXLogUtils.e("",e);    return null;  }catch (  IllegalAccessException e) {    WXLogUtils.e("",e);    return null;  }catch (  InvocationTargetException e) {    throw e.getTargetException();  }}  }
class C{  public ViewGraph(final List<ViewNode> nodes,final List<ViewEdge> edges){  super(nodes,edges);  for (  final Object block : nodes) {    if (!(block instanceof ViewNode)) {      throw new IllegalArgumentException("Error: Node list contains objects that are not ViewNode objects");    }  }  for (  final Object block : edges) {    if (!(block instanceof ViewEdge)) {      throw new IllegalArgumentException("Error: Edge list contains objects that are not ViewEdge objects");    }  }}  }
class C{  protected RefactoringStatus aboutToPerformRefactoring(final Refactoring refactoring,final RefactoringDescriptor descriptor,final IProgressMonitor monitor){  Assert.isNotNull(refactoring);  Assert.isNotNull(descriptor);  return new RefactoringStatus();}  }
class C{  public void testReadAllLinesOnProcFS() throws IOException {  if (System.getProperty("os.name").equals("Linux")) {    Path statFile=Paths.get("/proc/self/stat");    List<String> lines=Files.readAllLines(statFile);    assertTrue(lines.size() > 0,"Files.readAllLines('" + statFile + "') failed to read");  }}  }
class C{  public final Message obtainMessage(){  return Message.obtain(mSmHandler);}  }
class C{  List<VPlexMigrationInfo> findMigrations(List<String> migrationNames) throws VPlexApiException {  List<VPlexMigrationInfo> migrationInfoList=new ArrayList<VPlexMigrationInfo>();  for (  String migrationName : migrationNames) {    try {      VPlexMigrationInfo migrationInfo=findMigration(migrationName,VPlexApiConstants.URI_DEVICE_MIGRATIONS);      migrationInfo.setIsDeviceMigration(true);      migrationInfoList.add(migrationInfo);    } catch (    VPlexApiException vae) {      s_logger.info("Migration {} not found with device migrations");      VPlexMigrationInfo migrationInfo=findMigration(migrationName,VPlexApiConstants.URI_EXTENT_MIGRATIONS);      migrationInfo.setIsDeviceMigration(false);      migrationInfoList.add(migrationInfo);    }  }  return migrationInfoList;}  }
class C{  public void changeTargetClassPath(String[] elements) throws IllegalArgumentException {  String cp=getClassPath(elements);  Properties.CP=cp;  targetClassPath=cp;}  }
class C{  public static String replacePathParams(String path,Map<Integer,String> pathParams,Object[] args){  String paramEncoded=null;  for (  Map.Entry<Integer,String> pathParam : pathParams.entrySet()) {    Object paramVal=args[pathParam.getKey()];    try {      paramEncoded=URLEncoder.encode((String)paramVal,"UTF-8");    } catch (    UnsupportedEncodingException e) {      LOGGER.error("Can not encode given path param => " + paramVal);      e.printStackTrace();    }    LOGGER.debug("Replacing path " + path + " with "+ pathParam.getValue());    path=path.replaceAll("\\{(" + pathParam.getValue() + ")\\}",paramEncoded);  }  return path;}  }
class C{  private boolean isVisible(Set<String> tagSet){  boolean visible=getVisibleTags().contains(TAG_ALL);  if (tagSet != null) {    for (    String tag : getVisibleTags()) {      if (tagSet.contains(tag)) {        visible=true;        break;      }    }  }  return visible;}  }
class C{  public boolean containsHeader(String name){  for (int i=0; i < headers.size(); i++) {    Header header=(Header)headers.get(i);    if (header.getName().equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  public PlotChangeEvent(Plot plot){  super(plot);  this.plot=plot;}  }
class C{  public VecBufferSequence(VecBuffer buffer,int capacity){  super(capacity);  if (buffer == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.buffer=buffer;}  }
class C{  public static String replaceOnce(String text,String repl,String with){  return replace(text,repl,with,1);}  }
class C{  @Ignore public void testQueueLarge() throws Exception {  for (int j=0; j < 100; j++) {    cleanup();    setUp();    for (int i=0; i < numOfConcurrentJobs - 1; i++) {      JobSpec aJob=TestAgent.getTestJob("Foucault " + i,dao);      aJob.setShouldRerun(true);      long id=dao.createJob(aJob);      PlannedJob pj=new PlannedJob(dao.getJob(id),Utils.getCurrentTime());      CallableJob cj=new SleepyCallableQuery(pj,dao,reporting,"example.com",null,null,null,drivers.get(0),1,10000);      consumer.submitJob(cj);    }    for (int i=0; i < numOfConcurrentJobs + 1; i++) {      JobSpec aJob=TestAgent.getTestJob("Foucault " + (numOfConcurrentJobs),dao);      aJob.setType(JobType.Script);      aJob.setCode("sleep 1; echo \"done\";");      long id=dao.createJob(aJob);      PlannedJob pj=new PlannedJob(dao.getJob(id),Utils.getCurrentTime());      dao.addToQueue(pj);    }    assertEquals(numOfConcurrentJobs + 1,dao.getQueue(null).size());    assertEquals(0,consumer.getFinishedJobs(limit).size());    assertEquals(0,consumer.getSuccesfulQueries(limit).size());    assertEquals(0,consumer.getFailedQueries(limit).size());    TestAgent.runRunnable(consumer);    doSleep();    TestAgent.runRunnable(consumer);    assertEquals(numOfConcurrentJobs + 1,dao.getQueue(null).size());    assertEquals(consumer.getFinishedJobs(limit).toString(),0,consumer.getFinishedJobs(limit).size());    assertEquals(0,consumer.getSuccesfulQueries(limit).size());    assertEquals(0,consumer.getFailedQueries(limit).size());  }}  }
class C{  @Override protected void onRemoveModerated(String target,String sourceNick,String sourceLogin,String sourceHostname){  Message message=new Message(service.getString(R.string.message_remove_moderated,sourceNick));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  @Override public final void update(Address sfp,int whereFrom){  if (DEBUG) {    VM.sysWrite("EdgeListener.update(",sfp,",",whereFrom);    VM.sysWriteln("): enter ",samplesTaken);  }  Synchronization.fetchAndAdd(this,AosEntrypoints.edgeListenerUpdateCalledField.getOffset(),1);  if (whereFrom == RVMThread.BACKEDGE)   return;  int calleeCMID=0;  int callerCMID=0;  Address returnAddress=Address.zero();  if (sfp.loadAddress().EQ(StackFrameLayout.getStackFrameSentinelFP())) {    if (DEBUG)     VM.sysWrite(" Walking off end of stack!\n");    return;  }  calleeCMID=Magic.getCompiledMethodID(sfp);  if (calleeCMID == StackFrameLayout.getInvisibleMethodID()) {    if (DEBUG) {      VM.sysWrite(" INVISIBLE_METHOD_ID  (assembler code) ");      VM.sysWrite(calleeCMID);      VM.sysWrite("\n");    }    return;  }  returnAddress=Magic.getReturnAddress(sfp);  sfp=Magic.getCallerFramePointer(sfp);  if (sfp.loadAddress().EQ(StackFrameLayout.getStackFrameSentinelFP())) {    if (DEBUG)     VM.sysWrite(" Walking off end of stack\n");    return;  }  callerCMID=Magic.getCompiledMethodID(sfp);  if (callerCMID == StackFrameLayout.getInvisibleMethodID()) {    if (DEBUG) {      VM.sysWrite(" INVISIBLE_METHOD_ID  (assembler code) ");      VM.sysWrite(callerCMID);      VM.sysWrite("\n");    }    return;  }  CompiledMethod callerCM=CompiledMethods.getCompiledMethod(callerCMID);  if (callerCM.getCompilerType() == CompiledMethod.TRAP) {    if (DEBUG) {      VM.sysWriteln(" HARDWARE TRAP FRAME ");    }    return;  }  Offset callSite=callerCM.getInstructionOffset(returnAddress);  if (DEBUG) {    VM.sysWrite("  <");    VM.sysWrite(calleeCMID);    VM.sysWrite(",");    VM.sysWrite(callerCMID);    VM.sysWrite(",");    VM.sysWrite(returnAddress);    VM.sysWrite(">\n");  }  int sampleNumber=Synchronization.fetchAndAdd(this,AosEntrypoints.edgeListenerSamplesTakenField.getOffset(),1);  int idx=3 * sampleNumber;  if (idx < buffer.length) {    buffer[idx + 1]=callerCMID;    buffer[idx + 2]=callSite.toInt();    Magic.sync();    buffer[idx + 0]=calleeCMID;    if (sampleNumber + 1 == desiredSamples) {      activateOrganizer();    }  }}  }
class C{  protected Anonymous_beforeCode_1_Impl(){  super();}  }
class C{  public AppConfiguration(final String applicationId,final String longName){  this(applicationId);  setLongName(longName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.810 -0500",hash_original_method="5F9CEBE3D4D005B8F7D968A4703E6CB7",hash_generated_method="FC0E2F7D719C81ACB77FB17655FB5789") public void queueThread(WaitingThread wt){  if (wt == null) {    throw new IllegalArgumentException("Waiting thread must not be null.");  }  this.waitingThreads.add(wt);}  }
class C{  public CreateIndexRequest alias(Alias alias){  this.aliases.add(alias);  return this;}  }
class C{  public void deleteOneToOneFileTransfers() throws RemoteException {  mImService.tryToDeleteOneToOneFileTransfers();}  }
class C{  public <T extends Solution>boolean addAll(T[] solutions){  return addAll(Arrays.asList(solutions));}  }
class C{  public static int listFindIgnoreEmpty(String list,String value,char delimiter){  if (list == null)   return -1;  int len=list.length();  if (len == 0)   return -1;  int last=0;  int count=0;  for (int i=0; i < len; i++) {    if (list.charAt(i) == delimiter) {      if (last < i) {        if (list.substring(last,i).equals(value))         return count;        count++;      }      last=i + 1;    }  }  if (last < len) {    if (list.substring(last).equals(value))     return count;  }  return -1;}  }
class C{  public static String updateWorkspace(final ServerContext context,final Workspace oldWorkspace,final Workspace newWorkspace){  if (WorkspaceHelper.areMappingsDifferent(oldWorkspace,newWorkspace)) {    for (    final Workspace.Mapping m : WorkspaceHelper.getMappingsToRemove(oldWorkspace,newWorkspace)) {      final UpdateWorkspaceMappingCommand command=new UpdateWorkspaceMappingCommand(context,oldWorkspace.getName(),m,true);      command.runSynchronously();    }    for (    final Workspace.Mapping m : WorkspaceHelper.getMappingsToChange(oldWorkspace,newWorkspace)) {      final UpdateWorkspaceMappingCommand command=new UpdateWorkspaceMappingCommand(context,oldWorkspace.getName(),m,false);      command.runSynchronously();    }  }  final UpdateWorkspaceCommand updateWorkspaceCommand=new UpdateWorkspaceCommand(context,oldWorkspace.getName(),newWorkspace.getName(),newWorkspace.getComment(),null,null);  return updateWorkspaceCommand.runSynchronously();}  }
class C{  public static OMBitmap read(DataInputStream dis) throws IOException {  return read(dis,null);}  }
class C{  private void save(){  if (!m_success)   return;  bSave.setEnabled(false);  bTest.setEnabled(false);  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  if (!m_data.save())   return;  JOptionPane.showConfirmDialog(this,res.getString("EnvironmentSaved"),res.getString("AdempiereServerSetup"),JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE);  try {    CLogger.get().info("Starting Ant ... ");    System.setProperty("ant.home",".");    String[] args=new String[]{"setup"};    Main antMain=new Main();    antMain.startAnt(args,null,null);  } catch (  Exception e) {    CLogger.get().log(Level.SEVERE,"ant",e);  }  ((Frame)SwingUtilities.getWindowAncestor(this)).dispose();  System.exit(0);}  }
class C{  private void paintBackground(Graphics2D g,JComponent c,int width,int height,ButtonColors colors){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);  g.setColor(colors.top);  g.drawLine(0,0,width - 2,0);  g.setColor(colors.left);  g.drawLine(0,1,0,height - 3);  g.setColor(colors.edge);  g.drawLine(width - 1,0,width - 1,height - 2);  g.drawLine(0,height - 2,width - 2,height - 2);  g.setColor(colors.shadow);  g.drawLine(0,height - 1,width - 1,height - 1);  g.setColor(colors.interior);  g.fillRect(1,1,width - 1,height - 2);}  }
class C{  @Override public Long scard(final String key){  checkIsInMultiOrPipeline();  client.scard(key);  return client.getIntegerReply();}  }
class C{  public static LatLonPoint UTMtoLL(Ellipsoid ellip,double UTMNorthing,double UTMEasting,String UTMZone,LatLonPoint llpoint){  if (UTMZone == null || UTMZone.length() == 0) {    return null;  }  int ZoneNumber=1;  char ZoneLetter='N';  int ln=UTMZone.length() - 1;  if (ln > 0) {    ZoneLetter=UTMZone.charAt(ln);    if (!Character.isLetter(ZoneLetter)) {      ZoneLetter='N';      ln++;    }  }  try {    ZoneNumber=Integer.parseInt(UTMZone.substring(0,ln));  } catch (  NumberFormatException nfe) {    return null;  }  return UTMtoLL(ellip,UTMNorthing,UTMEasting,ZoneNumber,ZoneLetter,llpoint);}  }
class C{  public MRegion(Properties ctx,int C_Region_ID,String trxName){  super(ctx,C_Region_ID,trxName);  if (C_Region_ID == 0) {  }}  }
class C{  public URL find(String classname){  return source.find(classname);}  }
class C{  void registerDownloadFileChangeListener(OnDownloadFileChangeListener onDownloadFileChangeListener,DownloadFileChangeConfiguration downloadFileChangeConfiguration){  mDownloadFileCacher.registerDownloadFileChangeListener(onDownloadFileChangeListener,downloadFileChangeConfiguration);}  }
class C{  public static char[] toCharArray(Boolean[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? (char)1 : (char)0;  }  return result;}  }
class C{  public EventStoreBuilder heartbeatTimeout(Duration duration){  settingsBuilder.heartbeatTimeout(duration);  return this;}  }
class C{  public T caseDelegatingSetterDeclaration(DelegatingSetterDeclaration object){  return null;}  }
class C{  public final void conjugate(){  this.x=-this.x;  this.y=-this.y;  this.z=-this.z;}  }
class C{  public void testGetMaxSize(){  assertEquals(12,ParallaxRfidProtocol.getMaxSize());}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Events API example started.");    localListen();    remoteListen();    Thread.sleep(1000);  } }  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  private void positionAtCentralDirectory() throws IOException {  boolean found=false;  long off=archive.length() - MIN_EOCD_SIZE;  if (off >= 0) {    archive.seek(off);    byte[] sig=JBZipOutputStream.EOCD_SIG;    int curr=archive.read();    while (curr != -1) {      if (curr == sig[POS_0]) {        curr=archive.read();        if (curr == sig[POS_1]) {          curr=archive.read();          if (curr == sig[POS_2]) {            curr=archive.read();            if (curr == sig[POS_3]) {              found=true;              break;            }          }        }      }      archive.seek(--off);      curr=archive.read();    }  }  if (!found) {    throw new ZipException("archive is not a ZIP archive");  }  archive.seek(off + CFD_LOCATOR_OFFSET);  byte[] cfdOffset=new byte[WORD];  archive.readFully(cfdOffset);  currentcfdfoffset=ZipLong.getValue(cfdOffset);  archive.seek(currentcfdfoffset);}  }
class C{  public OverpassFilterQuery tag(String name,String value){  builder.equals(name,value);  return this;}  }
class C{  public String toJSONString(){  return new Gson().toJson(this);}  }
class C{  private void takeSnapshot(boolean auto){  String xml="";synchronized (Simulation.LOCK) {    xml=XmlGenerator.toXml(this.simulation);  }  Date date=new Date();  String key;  if (auto) {    key=MessageFormat.format(Messages.getString("menu.snapshot.auto"),date);  } else {    key=MessageFormat.format(Messages.getString("menu.snapshot.manual"),date);  }  this.snapshots.put(key,xml);  JMenuItem mnuShot=new JMenuItem(key);  mnuShot.setActionCommand("snapshotRestore");  mnuShot.addActionListener(this);  mnuShot.setIcon(Icons.SNAPSHOT);  this.mnuSnapshot.add(mnuShot);}  }
class C{  @Override public boolean validate(@Nullable ClientAppUser clientAppUser){  return Optional.ofNullable(clientAppUser).filter(null).filter(null).filter(null).isPresent();}  }
class C{  public void remove(Tradingday tradingday){synchronized (this.tradingdays) {    for (ListIterator<Tradingday> itemIter=this.tradingdays.listIterator(); itemIter.hasNext(); ) {      Tradingday item=itemIter.next();      if (item.equals(tradingday)) {        itemIter.remove();        break;      }    }  }}  }
class C{  public void executeQuery(Connection con,String query) throws SQLException {  Statement statement=null;  ResultSet resultSet=null;  try {    statement=con.createStatement();    resultSet=statement.executeQuery(query);    ResultSetMetaData metaData=resultSet.getMetaData();    int columnCount=metaData.getColumnCount();    if (columnCount != 2) {      throw new SQLException("Invalid sql generated.  PieDataSet requires 2 columns only");    }    int columnType=metaData.getColumnType(2);    double value;    while (resultSet.next()) {      Comparable key=resultSet.getString(1);switch (columnType) {case Types.NUMERIC:case Types.REAL:case Types.INTEGER:case Types.DOUBLE:case Types.FLOAT:case Types.DECIMAL:case Types.BIGINT:        value=resultSet.getDouble(2);      setValue(key,value);    break;case Types.DATE:case Types.TIME:case Types.TIMESTAMP:  Timestamp date=resultSet.getTimestamp(2);value=date.getTime();setValue(key,value);break;default :System.err.println("JDBCPieDataset - unknown data type");break;}}fireDatasetChanged();}  finally {if (resultSet != null) {try {resultSet.close();} catch (Exception e) {System.err.println("JDBCPieDataset: swallowing exception.");}}if (statement != null) {try {statement.close();} catch (Exception e) {System.err.println("JDBCPieDataset: swallowing exception.");}}}}  }
class C{  public List<ErrorLogger.ErrorObject> build() throws IOException, ParserConfigurationException {  org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType cplRoot=IMFCPLObjectFieldsFactory.constructCompositionPlaylistType_2013();  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  cplRoot.setId(UUIDHelper.fromUUID(this.uuid));  cplRoot.setAnnotation(this.annotationText);  cplRoot.setIssueDate(IMFUtils.createXMLGregorianCalendar());  cplRoot.setIssuer(this.issuer);  cplRoot.setCreator(this.creator);  cplRoot.setContentOriginator(null);  cplRoot.setContentTitle(buildCPLUserTextType_2013("Not Included","en"));  cplRoot.setContentKind(null);  org.smpte_ra.schemas.st2067_2_2013.ContentVersionType contentVersionType=buildContentVersionType(IMFUUIDGenerator.getInstance().getUrnUUID(),buildCPLUserTextType_2013("Photon CompositionPlaylistBuilder","en"));  List<org.smpte_ra.schemas.st2067_2_2013.ContentVersionType> contentVersionTypeList=new ArrayList<>();  contentVersionTypeList.add(contentVersionType);  cplRoot.setContentVersionList(buildContentVersionList(contentVersionTypeList));  cplRoot.setLocaleList(null);  cplRoot.setCompositionTimecode(null);  cplRoot.setExtensionProperties(null);  cplRoot.getEditRate().addAll(this.compositionEditRate);  cplRoot.setTotalRunningTime(LocalTime.MIN.plusSeconds(totalRunningTime).toString());  List<org.smpte_ra.schemas.st2067_2_2013.EssenceDescriptorBaseType> essenceDescriptorList=new ArrayList<>();  List<CompositionPlaylistBuilder_2013.SequenceTypeTuple> sequenceTypeTuples=new ArrayList<>();  for (  Composition.VirtualTrack virtualTrack : virtualTracks) {    essenceDescriptorList.addAll(buildEDLForVirtualTrack(virtualTrack));    List<org.smpte_ra.schemas.st2067_2_2013.BaseResourceType> trackResourceList=buildTrackResourceList(virtualTrack);    UUID sequenceId=IMFUUIDGenerator.getInstance().generateUUID();    UUID trackId=IMFUUIDGenerator.getInstance().generateUUID();    SequenceTypeTuple sequenceTypeTuple=buildSequenceTypeTuple(sequenceId,trackId,buildResourceList(trackResourceList),virtualTrack.getSequenceTypeEnum());    sequenceTypeTuples.add(sequenceTypeTuple);  }  org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType.EssenceDescriptorList essenceDescriptorListType=buildEssenceDescriptorList(essenceDescriptorList);  cplRoot.setEssenceDescriptorList(essenceDescriptorListType);  UUID segmentId=IMFUUIDGenerator.getInstance().generateUUID();  org.smpte_ra.schemas.st2067_2_2013.SegmentType segmentType=buildSegment(segmentId,buildCPLUserTextType_2013("Segment-1","en"));  populateSequenceListForSegment(sequenceTypeTuples,segmentType);  cplRoot.setSegmentList(buildSegmentList(new ArrayList<org.smpte_ra.schemas.st2067_2_2013.SegmentType>(){{      add(segmentType);    }  }));  cplRoot.setSigner(null);  cplRoot.setSignature(null);  try {    String nodeString="<ApplicationIdentification xmlns=\"http://www.smpte-ra.org/schemas/2067-2/2013\">" + this.applicationId + "</ApplicationIdentification>";    Element element=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new ByteArrayInputStream(nodeString.getBytes("UTF-8"))).getDocumentElement();    org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType.ExtensionProperties extensionProperties=new org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType.ExtensionProperties();    extensionProperties.getAny().add(element);    cplRoot.setExtensionProperties(extensionProperties);  } catch (  SAXException ex) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_CPL_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,"Failed to create DOM node for ApplicationIdentification");  }  File outputFile=new File(this.workingDirectory + File.separator + this.cplFileName);  List errors=serializeCPLToXML(cplRoot,outputFile);  imfErrorLogger.addAllErrors(errors);  return imfErrorLogger.getErrors();}  }
class C{  public void read(DataInput dis) throws IOException {  Debug.message("link","LinkBoundingPoly: read()");  int polyLength=dis.readInt();  points=new float[polyLength];  float x, y;  for (int i=0; i < points.length; i+=2) {    y=dis.readFloat();    x=dis.readFloat();    if (i == 0) {      minX=x;      minY=y;      maxX=x;      maxY=y;    }    points[i]=y;    points[i + 1]=x;    if (x < minX)     minX=x;    if (x > maxX)     maxX=x;    if (y < minY)     minY=y;    if (y > maxY)     maxY=y;  }}  }
class C{  @NamespacePermission(fields="#request.businessObjectDataSearchFilters[0].BusinessObjectDataSearchKeys[0].namespace",permissions=NamespacePermissionEnum.READ) @Override public BusinessObjectDataSearchResult searchBusinessObjectData(BusinessObjectDataSearchRequest request){  businessObjectDataSearchHelper.validateBusinesObjectDataSearchRequest(request);  List<BusinessObjectData> businessObjectDataList=businessObjectDataDao.searchBusinessObjectData(request.getBusinessObjectDataSearchFilters());  BusinessObjectDataSearchResult result=new BusinessObjectDataSearchResult();  result.setBusinessObjectDataElements(businessObjectDataList);  return result;}  }
class C{  private final void _writeStringSegments(char[] cbuf,int offset,int totalLen) throws IOException, JsonGenerationException {  do {    int len=Math.min(_outputMaxContiguous,totalLen);    if ((_outputTail + len) > _outputEnd) {      _flushBuffer();    }    _writeStringSegment(cbuf,offset,len);    offset+=len;    totalLen-=len;  } while (totalLen > 0);}  }
class C{  public void append(int key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public WindowBuilder i18n(final I18N i18n){  this.i18n=i18n;  return this;}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  public MetroStation(){  super();}  }
class C{  protected void init() throws IOException {  if (appDataIS != null) {    return;  }  initTransportLayer();  appDataIS=new SSLSocketInputStream(this);  appDataOS=new SSLSocketOutputStream(this);}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  protected static List validateFolder(String sessionID,User user,Integer bookId,int fdrid,List atts,Map documents,String entidad,boolean isConsolidacion) throws ValidationException, SecurityException, AttributesException, BookException, SessionException {  validateDocuments(documents);  Map ctrlIds=new HashMap();  if ((atts != null) && (!atts.isEmpty())) {    for (Iterator it=atts.iterator(); it.hasNext(); ) {      FlushFdrField flushFdrField=(FlushFdrField)it.next();      ctrlIds.put(new Integer(flushFdrField.getFldid()),new Integer(flushFdrField.getCtrlid()));    }  }  AxSf axsfQ=BookSession.getFormFormat(sessionID,bookId,entidad);  Idocarchdet idocarchdet=BookSession.getIdocarchdetFld(sessionID,bookId);  FieldFormat fieldFormat=new FieldFormat(idocarchdet.getDetval());  Map idsToValidate=new HashMap();  List preResult=new ArrayList();  SimpleDateFormat longFormatter=new SimpleDateFormat(RBUtil.getInstance(user.getLocale()).getProperty(ieci.tecdoc.sgm.registropresencial.utils.Keys.I18N_DATE_LONGFORMAT));  longFormatter.setLenient(false);  SimpleDateFormat shortFormatter=new SimpleDateFormat(RBUtil.getInstance(user.getLocale()).getProperty(ieci.tecdoc.sgm.registropresencial.utils.Keys.I18N_DATE_SHORTFORMAT));  shortFormatter.setLenient(false);  boolean dateError=fdrid != -1;  validateFolder(sessionID,bookId,atts,axsfQ,fdrid,shortFormatter,longFormatter,preResult,idsToValidate,user.getLocale(),fieldFormat,entidad,dateError,isConsolidacion);  if (!idsToValidate.isEmpty()) {    preResult.addAll(AttributesSession.validateFixedValues(sessionID,bookId,idsToValidate,true,entidad));  }  return getResultValidateFolder(preResult,fieldFormat);}  }
class C{  public PutRequestMessage(PutRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetVersionedValue()) {    this.versionedValue=new VersionedValue(other.versionedValue);  }  if (other.isSetValue()) {    this.value=org.apache.thrift.TBaseHelper.copyBinary(other.value);    ;  }}  }
class C{  public FBMaintenanceManager(String gdsType){  super(gdsType);}  }
class C{  @Deprecated public static void liftingFromBottom(View view,float baseRotation,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void serialize(Output out,Field field,Method getter,Object object,Object value){  if (value instanceof IExternalizable) {    out.writeObject(value,this);  } else   if (value instanceof ByteArray) {    out.writeByteArray((ByteArray)value);  } else {    if (writeBasic(out,value)) {    } else     if (!writeComplex(out,value)) {      log.trace("Unable to serialize: {}",value);    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void testMultipleWildcards() throws Exception {  Collection<File> res=parse(merge(wildcard(DIR_1),wildcard(DIR_2),wildcard(MISSING_DIR)));  assert res.size() == 4;  assert res.contains(FILE_1_1);  assert res.contains(FILE_1_2);  assert res.contains(FILE_2_1);  assert res.contains(FILE_2_2);}  }
class C{  public boolean contains(final IResource resource){  return operationMap.containsKey(resource);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected GeneratorEntryImpl(){  super();}  }
class C{  public boolean isWebFilled(){  return this.webFilled;}  }
class C{  public boolean isForever(){  return isForever;}  }
class C{  private int damage(int maxDamage){  if (maxDamage > 0) {    return Rand.rand(maxDamage);  }  return 0;}  }
class C{  public void addListener(final SelectionListener listener1){  this.listener=listener1;}  }
class C{  public List<Integer> emit(Collection<Tuple> anchors,List<Object> tuple){  return emit(Utils.DEFAULT_STREAM_ID,anchors,tuple);}  }
class C{  public static String stacktraceToString(Exception e){  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  e.printStackTrace(pw);  return sw.toString();}  }
class C{  @Override public AnnotationMirror division(AnnotatedTypeMirror lht,AnnotatedTypeMirror rht){  if (havePairOfUnits(lht,m,rht,s)) {    return mPERs;  } else   if (havePairOfUnits(lht,km,rht,h)) {    return kmPERh;  } else   if (havePairOfUnits(lht,m2,rht,m)) {    return m;  } else   if (havePairOfUnits(lht,km2,rht,km)) {    return km;  } else   if (havePairOfUnits(lht,mm2,rht,mm)) {    return mm;  } else   if (havePairOfUnits(lht,m,rht,mPERs)) {    return s;  } else   if (havePairOfUnits(lht,km,rht,kmPERh)) {    return h;  } else   if (havePairOfUnits(lht,mPERs,rht,s)) {    return mPERs2;  } else   if (havePairOfUnits(lht,mPERs,rht,mPERs2)) {    return s;  } else {    return null;  }}  }
class C{  public static String normalizeParameters(String requestUrl,Map<String,String> requestParameters){  TreeMap<String,String> alphaParams=new TreeMap<String,String>(requestParameters);  if (requestUrl.indexOf('?') > 0) {    Map<String,String> queryParameters=parseQuerystring(requestUrl.substring(requestUrl.indexOf('?') + 1));    alphaParams.putAll(queryParameters);  }  StringBuilder paramString=new StringBuilder();  for (  Map.Entry<String,String> e : alphaParams.entrySet()) {    if (e.getValue().length() == 0) {      continue;    }    if (paramString.length() > 0) {      paramString.append("&");    }    paramString.append(encode(e.getKey())).append("=").append(encode(e.getValue()));  }  return paramString.toString();}  }
class C{  protected static long[] known_N_compute_B_and_K_quick(long N,double epsilon){  final int maxBuffers=50;  final int maxHeight=50;  final double N_double=(double)N;  final double c=N_double * epsilon * 2.0;  int[] heightMaximums=new int[maxBuffers - 1];  for (int b=2; b <= maxBuffers; b++) {    int h=3;    while (h <= maxHeight && (h - 2) * (Arithmetic.binomial(b + h - 2,h - 1)) - (Arithmetic.binomial(b + h - 3,h - 3)) + (Arithmetic.binomial(b + h - 3,h - 2)) - c > 0.0) {      h++;    }    while (h <= maxHeight && (h - 2) * (Arithmetic.binomial(b + h - 2,h - 1)) - (Arithmetic.binomial(b + h - 3,h - 3)) + (Arithmetic.binomial(b + h - 3,h - 2)) - c <= 0.0) {      h++;    }    h--;    int hMax;    if (h >= maxHeight && (h - 2) * (Arithmetic.binomial(b + h - 2,h - 1)) - (Arithmetic.binomial(b + h - 3,h - 3)) + (Arithmetic.binomial(b + h - 3,h - 2)) - c > 0.0) {      hMax=Integer.MIN_VALUE;    } else {      hMax=h;    }    heightMaximums[b - 2]=hMax;  }  long[] kMinimums=new long[maxBuffers - 1];  for (int b=2; b <= maxBuffers; b++) {    int h=heightMaximums[b - 2];    long kMin=Long.MAX_VALUE;    if (h > Integer.MIN_VALUE) {      double value=(Arithmetic.binomial(b + h - 2,h - 1));      long tmpK=(long)(Math.ceil(N_double / value));      if (tmpK <= Long.MAX_VALUE) {        kMin=tmpK;      }    }    kMinimums[b - 2]=kMin;  }  long multMin=Long.MAX_VALUE;  int minB=-1;  for (int b=2; b <= maxBuffers; b++) {    if (kMinimums[b - 2] < Long.MAX_VALUE) {      long mult=((long)b) * ((long)kMinimums[b - 2]);      if (mult < multMin) {        multMin=mult;        minB=b;      }    }  }  long b, k;  if (minB != -1) {    b=minB;    k=kMinimums[minB - 2];  } else {    b=1;    k=N;  }  long[] result=new long[2];  result[0]=b;  result[1]=k;  return result;}  }
class C{  private static IgniteRemoteStartSpecification processDefaults(@Nullable Map<String,Object> dflts) throws IgniteCheckedException {  int port=DFLT_PORT;  String uname=System.getProperty("user.name");  String passwd=null;  File key=null;  int nodes=DFLT_NODES;  String igniteHome=null;  String cfg=DFLT_CFG;  String script=null;  IgniteLogger log=null;  if (dflts != null) {    if (dflts.get(PORT) != null)     port=(Integer)dflts.get(PORT);    if (dflts.get(UNAME) != null)     uname=(String)dflts.get(UNAME);    if (dflts.get(PASSWD) != null)     passwd=(String)dflts.get(PASSWD);    if (dflts.get(KEY) != null)     key=(File)dflts.get(KEY);    if (dflts.get(NODES) != null)     nodes=(Integer)dflts.get(NODES);    if (dflts.get(IGNITE_HOME) != null)     igniteHome=(String)dflts.get(IGNITE_HOME);    if (dflts.get(CFG) != null)     cfg=(String)dflts.get(CFG);    if (dflts.get(SCRIPT) != null)     script=(String)dflts.get(SCRIPT);    if (dflts.get(LOGGER) != null)     log=(IgniteLogger)dflts.get(LOGGER);  }  if (port <= 0)   throw new IgniteCheckedException("Invalid port number: " + port);  if (nodes <= 0)   throw new IgniteCheckedException("Invalid number of nodes: " + nodes);  return new IgniteRemoteStartSpecification(null,port,uname,passwd,key,nodes,igniteHome,cfg,script,log);}  }
class C{  public static String addOrderTerm(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  Locale locale=UtilHttp.getLocale(request);  String termTypeId=request.getParameter("termTypeId");  String termValueStr=request.getParameter("termValue");  String termDaysStr=request.getParameter("termDays");  String textValue=request.getParameter("textValue");  GenericValue termType=null;  Delegator delegator=(Delegator)request.getAttribute("delegator");  BigDecimal termValue=null;  Long termDays=null;  if (UtilValidate.isEmpty(termTypeId)) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderOrderTermTypeIsRequired",locale));    return "error";  }  try {    termType=EntityQuery.use(delegator).from("TermType").where("termTypeId",termTypeId).queryOne();  } catch (  GenericEntityException gee) {    request.setAttribute("_ERROR_MESSAGE_",gee.getMessage());    return "error";  }  if (("FIN_PAYMENT_TERM".equals(termTypeId) && UtilValidate.isEmpty(termDaysStr)) || (UtilValidate.isNotEmpty(termType) && "FIN_PAYMENT_TERM".equals(termType.get("parentTypeId")) && UtilValidate.isEmpty(termDaysStr))) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderOrderTermDaysIsRequired",locale));    return "error";  }  if (UtilValidate.isNotEmpty(termValueStr)) {    try {      termValue=new BigDecimal(termValueStr);    } catch (    NumberFormatException e) {      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderOrderTermValueError",UtilMisc.toMap("orderTermValue",termValueStr),locale));      return "error";    }  }  if (UtilValidate.isNotEmpty(termDaysStr)) {    try {      termDays=Long.valueOf(termDaysStr);    } catch (    NumberFormatException e) {      request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderOrderTermDaysError",UtilMisc.toMap("orderTermDays",termDaysStr),locale));      return "error";    }  }  removeOrderTerm(request,response);  cart.addOrderTerm(termTypeId,termValue,termDays,textValue);  return "success";}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  protected void performTest(double numSel,int numOut){  m_Filter=getFilter(numSel);  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  assertEquals(numOut,result.numAttributes());  assertEquals(icopy.numInstances(),m_Instances.numInstances());}  }
class C{  public NotificationChain basicSetDeclaredTypeRef(TypeRef newDeclaredTypeRef,NotificationChain msgs){  TypeRef oldDeclaredTypeRef=declaredTypeRef;  declaredTypeRef=newDeclaredTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_METHOD_DECLARATION__DECLARED_TYPE_REF,oldDeclaredTypeRef,newDeclaredTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override protected boolean afterSave(boolean newRecord,boolean success){  MInOutLine inout_line=(MInOutLine)getM_InOutLine();  for (  MTransaction trx : MTransaction.getByInOutLine(inout_line)) {    if (!inout_line.getM_Product().getProductType().equals(MProduct.PRODUCTTYPE_Item) || trx == null)     continue;    CostEngineFactory.getCostEngine(getAD_Client_ID()).createCostDetail(trx,this);  }  if (success && getC_OrderLine_ID() != 0) {    MOrderLine orderLine=getOrderLine();    if (m_isInOutLineChange && (newRecord || getM_InOutLine_ID() != get_ValueOldAsInt("M_InOutLine_ID"))) {      if (getM_InOutLine_ID() != 0)       orderLine.setQtyDelivered(orderLine.getQtyDelivered().add(getQty())); else       orderLine.setQtyDelivered(orderLine.getQtyDelivered().subtract(getQty()));      orderLine.setDateDelivered(getDateTrx());    }    if (m_isInvoiceLineChange && (newRecord || getC_InvoiceLine_ID() != get_ValueOldAsInt("C_InvoiceLine_ID"))) {      if (getC_InvoiceLine_ID() != 0)       orderLine.setQtyInvoiced(orderLine.getQtyInvoiced().add(getQty())); else       orderLine.setQtyInvoiced(orderLine.getQtyInvoiced().subtract(getQty()));      orderLine.setDateInvoiced(getDateTrx());    }    if (orderLine.getM_AttributeSetInstance_ID() == 0 && getM_InOutLine_ID() != 0) {      MInOutLine iol=new MInOutLine(getCtx(),getM_InOutLine_ID(),get_TrxName());      if (iol.getMovementQty().compareTo(orderLine.getQtyOrdered()) == 0)       orderLine.setM_AttributeSetInstance_ID(iol.getM_AttributeSetInstance_ID());    }    return orderLine.save();  }  return success;}  }
class C{  public void writeAll(java.sql.ResultSet rs,boolean includeColumnNames) throws SQLException, IOException {  writeAll(rs,includeColumnNames,false);}  }
class C{  public boolean isReadOnly() throws SQLException {  checkClosed();  try {    return this.mc.isReadOnly();  } catch (  SQLException sqlException) {    checkAndFireConnectionError(sqlException);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.145 -0400",hash_original_method="3C114D17B8A0C9BC3B6D5FF6C974EAF8",hash_generated_method="5DAF0282757C5C772F183DB480FB101A") public static void touch(File file) throws IOException {  if (!file.exists()) {    OutputStream out=openOutputStream(file);    IOUtils.closeQuietly(out);  }  boolean success=file.setLastModified(System.currentTimeMillis());  if (!success) {    throw new IOException("Unable to set the last modification time for " + file);  }}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  public final T allocate(){  AtomicInteger topRef=_top;  while (true) {    final int top=topRef.get();    if (top <= 0) {      return null;    } else     if (topRef.compareAndSet(top,top - 1)) {      T value=_freeStack.getAndSet(top - 1,null);      if (value != null) {        return value;      }    }  }}  }
class C{  public TermsLookupQueryBuilder lookupPath(String lookupPath){  this.lookupPath=lookupPath;  return this;}  }
class C{  public void pushEnclosingBinaryExpression(BinaryExpression binaryExpression){  enclosingBinaryExpressions.addFirst(binaryExpression);}  }
class C{  public void startPacket(int seqNo,boolean checkPacketLength) throws IOException {  if (closed) {    throw new IOException("Stream has already closed");  }  this.seqNo=seqNo;  this.compressSeqNo=seqNo;  this.checkPacketLength=checkPacketLength;  buffer.clear();  buffer.position(4);}  }
class C{  public Builder maskStrings(String fullyQualifiedColumnNames,int numberOfChars,char maskChar){  return maskStrings(fullyQualifiedColumnNames,Strings.createString(maskChar,numberOfChars));}  }
class C{  public CActionSplitAfter(final INaviView view,final INaviCodeNode node,final INaviInstruction instruction){  super("Split node after instruction");  m_view=view;  m_node=node;  m_instruction=instruction;}  }
class C{  @Override void recordAccess(HashMapPro<K,V> m){  LinkedHashMapPro<K,V> lm=(LinkedHashMapPro<K,V>)m;  if (lm.accessOrder) {    lm.modCount++;    remove();    addBefore(lm.header);  }}  }
class C{  @Override protected Bitmap decodeByteArrayAsPurgeable(CloseableReference<PooledByteBuffer> bytesRef,BitmapFactory.Options options){  return decodeFileDescriptorAsPurgeable(bytesRef,bytesRef.get().size(),null,options);}  }
class C{  public void writeBytes(byte[] ba){  try {    if (ba == null) {      dos.writeInt(-1);      return;    }    int n=ba.length;    dos.writeInt(n);    for (int i=0; i < n; ++i)     dos.writeByte(ba[i]);  } catch (  Exception e) {    handleException(e);  }}  }
class C{  public static String generateCustomRecipeName(@NotNull Set<RecipeWidget> recipeWidgets){  int counter=1;  String name=CUSTOM_RECIPE_NAME + '-' + String.valueOf(counter);  List<Object> recipes=Arrays.asList(recipeWidgets.toArray());  int recipeCounter=0;  while (recipeCounter < recipes.size()) {    if (((RecipeWidget)recipes.get(recipeCounter)).getDescriptor().getName().equals(name)) {      counter++;      name=CUSTOM_RECIPE_NAME + '-' + String.valueOf(counter);      recipeCounter=0;    } else {      recipeCounter++;    }  }  return name;}  }
class C{  public static byte[][] convert(final Resource... resources) throws IOException {  if (resources != null) {    final List<byte[]> fileData=new ArrayList<byte[]>(resources.length * 2);    for (    final Resource resource : resources) {      if (StringUtils.isBlank(resource.getFilename())) {        throw new IllegalArgumentException(String.format("The filename of Resource (%1$s) must be specified!",resource.getDescription()));      }      fileData.add(resource.getFilename().getBytes());      fileData.add(IOUtils.toByteArray(resource.getInputStream()));    }    return fileData.toArray(new byte[fileData.size()][]);  }  return new byte[0][];}  }
class C{  private static void sliceHandling(final Context context,final JSONObject payload,final String url){  try {    Log.i("Slicer","Slice done received for " + payload.getString("stl"));    if (DatabaseController.getPreference(DatabaseController.TAG_SLICING,"Last") != null)     if (DatabaseController.getPreference(DatabaseController.TAG_SLICING,"Last").equals(payload.getString("stl"))) {      Log.i("Slicer","Changed PREFERENCE [Last]: " + payload.getString("gcode"));      DatabaseController.handlePreference(DatabaseController.TAG_SLICING,"Last",payload.getString("gcode"),true);      ViewerMainFragment.showProgressBar(StateUtils.SLICER_DOWNLOAD,0);      OctoprintSlicing.getMetadata(url,payload.getString("gcode"));      OctoprintFiles.downloadFile(context,url + HttpUtils.URL_DOWNLOAD_FILES,LibraryController.getParentFolder() + "/temp/",payload.getString("gcode"));      OctoprintFiles.deleteFile(context,url,payload.getString("stl"),"/local/");    } else {      Log.i("Slicer","Slicing NOPE for me!");    }  } catch (  JSONException e) {    e.printStackTrace();  }}  }
class C{  static boolean isEmpty(CharSequence str){  return str == null || str.length() == 0;}  }
class C{  public ResponseOnSingeRequest genErrorResponse(Exception t){  ResponseOnSingeRequest sshResponse=new ResponseOnSingeRequest();  String displayError=PcErrorMsgUtils.replaceErrorMsg(t.toString());  sshResponse.setStackTrace(PcStringUtils.printStackTrace(t));  sshResponse.setErrorMessage(displayError);  sshResponse.setFailObtainResponse(true);  logger.error("error in exec SSH. \nIf exection is JSchException: " + "Auth cancel and using public key. " + "\nMake sure 1. private key full path is right (try sshMeta.getPrivKeyAbsPath()). "+ "\n2. the user name and key matches  "+ t);  return sshResponse;}  }
class C{  public void suppress(){  this.suppress=true;}  }
class C{  public synchronized void run(){  running=true;  try {    while (running) {      Socket s=ss.accept();      acceptedConnections++;      if (acceptedConnections >= acceptLimit) {        running=false;      }      Worker w=null;synchronized (threads) {        if (threads.isEmpty()) {          Worker ws=new Worker();          ws.setSocket(s);          activeThreads.addElement(ws);          (new Thread(ws,"additional worker")).start();        } else {          w=(Worker)threads.elementAt(0);          threads.removeElementAt(0);          w.setSocket(s);        }      }    }  } catch (  SocketException e) {    log("SocketException in AcceptThread: probably closed during accept");    running=false;  }catch (  IOException e) {    log("IOException in AcceptThread");    e.printStackTrace();    running=false;  }  log("AcceptThread terminated" + this);}  }
class C{  public void deleteSelectedFeatures(){  Collections.sort(selectedFeatureNumbers);  for (int i=selectedFeatureNumbers.size() - 1; i >= 0; i--) {    shapefile.deleteRecord(selectedFeatureNumbers.get(i));  }  clearSelectedFeatures();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:53.106 -0500",hash_original_method="9C0AAF91E5C10F0884CC4B99F07D9A3D",hash_generated_method="EF1D778E7B4E29BECA56E28251938EAF") public boolean equals(Object obj){  if (obj == null)   return false;  if (!this.getClass().equals(obj.getClass())) {    return false;  }  Host otherHost=(Host)obj;  return otherHost.hostname.equals(hostname);}  }
class C{  public static <T>T unmarshalHeader(Class<?> clazz,SOAPHeader soapHeader) throws Exception {  return unmarshalHeader(clazz,soapHeader,true);}  }
class C{  public ShareRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  private void checkIdle(Collection<CollisionJobContext> waitJobs,Collection<CollisionJobContext> activeJobs){  int max=waitJobsThreshold + activeJobsThreshold;  if (max < 0)   max=Integer.MAX_VALUE;  int jobsToSteal=max - (waitJobs.size() + activeJobs.size());  if (log.isDebugEnabled())   log.debug("Total number of jobs to be stolen: " + jobsToSteal);  if (jobsToSteal > 0) {    int jobsLeft=jobsToSteal;    ClusterNode next;    int nodeCnt=getSpiContext().remoteNodes().size();    int idx=0;    while (jobsLeft > 0 && idx++ < nodeCnt && (next=nodeQueue.poll()) != null) {      if (getSpiContext().node(next.id()) == null)       continue;      if (!F.isEmpty(stealAttrs) && (next.attributes() == null || !U.containsAll(next.attributes(),stealAttrs))) {        if (log.isDebugEnabled())         log.debug("Skip node as it does not have all attributes: " + next.id());        continue;      }      int delta=0;      try {        MessageInfo msgInfo=sndMsgMap.get(next.id());        if (msgInfo == null) {          if (log.isDebugEnabled())           log.debug("Failed to find message info for node: " + next.id());          continue;        }        Integer waitThreshold=next.attribute(createSpiAttributeName(WAIT_JOBS_THRESHOLD_NODE_ATTR));        if (waitThreshold == null) {          U.error(log,"Remote node is not configured with GridJobStealingCollisionSpi and " + "jobs will not be stolen from it (you must stop it and update its configuration to use " + "GridJobStealingCollisionSpi): "+ next);          continue;        }        delta=next.metrics().getCurrentWaitingJobs() - waitThreshold;        if (log.isDebugEnabled())         log.debug("Maximum number of jobs to steal from node [jobsToSteal=" + delta + ", node="+ next.id()+ ']');        if (delta <= 0)         continue;synchronized (msgInfo) {          if (!msgInfo.expired() && msgInfo.jobsToSteal() > 0) {            jobsLeft-=msgInfo.jobsToSteal();            continue;          }          if (jobsLeft < delta)           delta=jobsLeft;          jobsLeft-=delta;          msgInfo.reset(delta);        }        getSpiContext().send(next,new JobStealingRequest(delta),JOB_STEALING_COMM_TOPIC);      } catch (      IgniteSpiException e) {        U.error(log,"Failed to send job stealing message to node: " + next,e);        jobsLeft+=delta;      } finally {        if (getSpiContext().node(next.id()) != null)         nodeQueue.offer(next);      }    }  }}  }
class C{  void attribAnnotationTypes(List<JCAnnotation> annotations,Env<AttrContext> env){  for (List<JCAnnotation> al=annotations; al.nonEmpty(); al=al.tail) {    JCAnnotation a=al.head;    attribType(a.annotationType,env);  }}  }
class C{  public boolean isCurrentVariableCharacter(){  if (!isValidIndex())   return false;  return isCurrentLetter() || isCurrentNumber() || isCurrent('$')|| isCurrent('_');}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:43.323 -0500",hash_original_method="F1ABEC9272D67A731F25021CAE965675",hash_generated_method="8DD502AAB7BE6B0225AD791FFB9A887C") public TestGrouping addPackagesRecursive(String... packageNames){  for (  String packageName : packageNames) {    List<Class<? extends TestCase>> addedClasses=testCaseClassesInPackage(packageName);    if (addedClasses.isEmpty()) {      Log.w(LOG_TAG,"Invalid Package: '" + packageName + "' could not be found or has no tests");    }    testCaseClasses.addAll(addedClasses);    if (firstIncludedPackage == null) {      firstIncludedPackage=packageName;    }  }  return this;}  }
class C{  public boolean isMember(int x){  Assert.check(currentState != BitsState.UNKNOWN);  return 0 <= x && x < (bits.length << wordshift) && (bits[x >>> wordshift] & (1 << (x & wordmask))) != 0;}  }
class C{  private void acquireDestroyWriteLock(long millis){  for (; ; ) {    boolean interrupted=Thread.interrupted();    try {      this.dm.getCancelCriterion().checkCancelInProgress(null);      boolean acquired=this.destroyLock.writeLock().tryLock(millis);      if (acquired) {        return;      }    } catch (    InterruptedException e) {      interrupted=true;    } finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }}  }
class C{  public void endMethod(){  if ((access & Opcodes.ACC_ABSTRACT) == 0) {    mv.visitMaxs(0,0);  }  mv.visitEnd();}  }
class C{  public DistributedLogClientBuilder streamNameRegex(String nameRegex){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setStreamNameRegex(nameRegex);  return newBuilder;}  }
class C{  public SIPHeader parse() throws ParseException {  AcceptEncodingList acceptEncodingList=new AcceptEncodingList();  if (debug)   dbg_enter("AcceptEncodingParser.parse");  try {    headerName(TokenTypes.ACCEPT_ENCODING);    if (lexer.lookAhead(0) == '\n') {      AcceptEncoding acceptEncoding=new AcceptEncoding();      acceptEncodingList.add(acceptEncoding);    } else {      while (lexer.lookAhead(0) != '\n') {        AcceptEncoding acceptEncoding=new AcceptEncoding();        if (lexer.lookAhead(0) != ';') {          lexer.match(TokenTypes.ID);          Token value=lexer.getNextToken();          acceptEncoding.setEncoding(value.getTokenValue());        }        while (lexer.lookAhead(0) == ';') {          this.lexer.match(';');          this.lexer.SPorHT();          this.lexer.match('q');          this.lexer.SPorHT();          this.lexer.match('=');          this.lexer.SPorHT();          lexer.match(TokenTypes.ID);          Token value=lexer.getNextToken();          try {            float qv=Float.parseFloat(value.getTokenValue());            acceptEncoding.setQValue(qv);          } catch (          NumberFormatException ex) {            throw createParseException(ex.getMessage());          }catch (          InvalidArgumentException ex) {            throw createParseException(ex.getMessage());          }          this.lexer.SPorHT();        }        acceptEncodingList.add(acceptEncoding);        if (lexer.lookAhead(0) == ',') {          this.lexer.match(',');          this.lexer.SPorHT();        }      }    }    return acceptEncodingList;  }  finally {    if (debug)     dbg_leave("AcceptEncodingParser.parse");  }}  }
class C{  private void writeJournal(ParcelFileDescriptor newState,Journal journal){  FileOutputStream outStream=null;  try {    outStream=new FileOutputStream(newState.getFileDescriptor());    final byte[] journalBytes=writeCheckedBytes(journal);    outStream.write(journalBytes);    outStream.close();    if (VERBOSE)     Log.v(TAG,"wrote " + journalBytes.length + " bytes of journal");  } catch (  IOException e) {    Log.w(TAG,"failed to write backup journal",e);  }}  }
class C{  public boolean forEachEntry(TIntLongProcedure procedure){  byte[] states=_states;  int[] keys=_set;  long[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TStructMember.class) {switch (baseFeatureID) {case TypesPackage.TSTRUCT_MEMBER__DEFINED_MEMBER:      return TypesPackage.TSTRUCT_METHOD__DEFINED_MEMBER;default :    return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public DialogueSystem(Domain domain){  this();  changeDomain(domain);}  }
class C{  public AxisState(){  this(0.0);}  }
class C{  private static boolean isInCenterTargetZone(float x,float y,float left,float top,float right,float bottom){  if (x > left && x < right && y > top && y < bottom) {    return true;  }  return false;}  }
class C{  private String mapValueClassesToFieldType(List<SolrInputField> fields){  NEXT_TYPE_MAPPING:   for (  TypeMapping typeMapping : typeMappings) {    for (    SolrInputField field : fields) {      NEXT_FIELD_VALUE:       for (      Object fieldValue : field.getValues()) {        for (        Class<?> valueClass : typeMapping.valueClasses) {          if (valueClass.isInstance(fieldValue)) {            continue NEXT_FIELD_VALUE;          }        }        continue NEXT_TYPE_MAPPING;      }    }    return typeMapping.fieldTypeName;  }  return defaultFieldType;}  }
class C{  public void verify(PublicKey key,String sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {}  }
class C{  public PrefixTagger(MaxentTagger maxentTagger){  super(maxentTagger);  this.leftWindow=leftWindow();  this.rightWindow=rightWindow();  this.offset=leftWindow();}  }
class C{  public static StringBuilder prefix(StringBuilder query){  return query.append("PREFIX skos: <").append(NAMESPACE).append(">\n");}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.DERIVED_ATTRIBUTE___MODIFIER_1:    setModifier_1(MODIFIER_1_EDEFAULT);  return;case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_11:getAnonymous_derivedAttribute_1_1().clear();return;case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_21:getAnonymous_derivedAttribute_2_1().clear();return;case UmplePackage.DERIVED_ATTRIBUTE___CODE_1:setCode_1(CODE_1_EDEFAULT);return;case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_31:getAnonymous_derivedAttribute_3_1().clear();return;}super.eUnset(featureID);}  }
class C{  public SearchCommand(final int packetId,final IAddress start,final IAddress size,final byte[] data){  super(DebugCommandType.CMD_SEARCH,packetId);  Preconditions.checkNotNull(start,"IE01023: Start argument can not be null");  Preconditions.checkNotNull(size,"IE01024: Size argument can not be null");  Preconditions.checkNotNull(data,"IE01025: Data argument can not be null");  addArgument(new DebugMessageAddressArgument(start));  addArgument(new DebugMessageAddressArgument(size));  addArgument(new DebugMessageRawArgument(data));}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.973 -0500",hash_original_method="7531D5F82588F4D92692F66CB681201F",hash_generated_method="F542C941445B636958D108896311DE9A") public void close() throws IOException {synchronized (lock) {    if (__output == null)     return;    if (__state == __LAST_WAS_CR_STATE)     __output.write('\n'); else     if (__state != __LAST_WAS_NL_STATE)     __output.write("\r\n");    __output.write(".\r\n");    __output.flush();    __output=null;  }}  }
class C{  public boolean isHornClause(){  return !isEmpty() && cachedPositiveSymbols.size() <= 1;}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  public <S>T manyToOne(final S source,final NullPointerControl nullPointerControl,final MappingType mtSource){  try {    return this.<T,S>getJMapper(relationalManyToOneMapper,source).getDestination(source,nullPointerControl,mtSource);  } catch (  Exception e) {    return logAndReturnNull(e);  }}  }
class C{  public static void sleep(Object self,long milliseconds,Closure onInterrupt){  sleepImpl(milliseconds,onInterrupt);}  }
class C{  public static Printer create(Printer printer,String prefix){  if (prefix == null || prefix.equals("")) {    return printer;  }  return new PrefixPrinter(printer,prefix);}  }
class C{  private void updateDSActionCount(){  int count=manageDistUIState.getSelectedDeleteDistSetTypes().size() + manageDistUIState.getSelectedDeleteSWModuleTypes().size() + manageDistUIState.getDeleteSofwareModulesList().size()+ manageDistUIState.getDeletedDistributionList().size();  for (  final Entry<DistributionSetIdName,HashSet<SoftwareModuleIdName>> mapEntry : manageDistUIState.getAssignedList().entrySet()) {    count+=manageDistUIState.getAssignedList().get(mapEntry.getKey()).size();  }  updateActionsCount(count);}  }
class C{  @Override public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){  RectangleConstraint contentConstraint=toContentConstraint(constraint);  Size2D contentSize=this.container.arrange(g2,contentConstraint);  return new Size2D(calculateTotalWidth(contentSize.getWidth()),calculateTotalHeight(contentSize.getHeight()));}  }
class C{  @Ignore("TODO: test is disabled") @Test public void testReplicatedSerialPropagationHA_ReceiverAffinity() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3,vm6,vm7);  createReceiverInVMs(vm2,vm3,vm6,vm7);  LogWriterUtils.getLogWriter().info("Started receivers on remote site");  WANTestBase.createCacheInVMs(lnPort,vm4,vm5);  vm4.invoke(null);  vm5.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5);  LogWriterUtils.getLogWriter().info("Started senders on local site");  vm4.invoke(createReplicatedRegionRunnable());  vm5.invoke(createReplicatedRegionRunnable());  AsyncInvocation inv1=vm5.invokeAsync(null);  LogWriterUtils.getLogWriter().info("Started async puts on local site");  Wait.pause(1000);  Map oldConnectionInfo=(Map)vm4.invoke(null);  assertNotNull(oldConnectionInfo);  String oldServerHost=(String)oldConnectionInfo.get("serverHost");  int oldServerPort=(Integer)oldConnectionInfo.get("serverPort");  LogWriterUtils.getLogWriter().info("Got sender to receiver connection information");  AsyncInvocation inv2=vm4.invokeAsync(null);  inv2.join();  LogWriterUtils.getLogWriter().info("Killed primary sender on local site");  Wait.pause(5000);  Map newConnectionInfo=(Map)vm5.invoke(null);  assertNotNull(newConnectionInfo);  String newServerHost=(String)newConnectionInfo.get("serverHost");  int newServerPort=(Integer)newConnectionInfo.get("serverPort");  LogWriterUtils.getLogWriter().info("Got new sender to receiver connection information");  assertEquals(oldServerHost,newServerHost);  assertEquals(oldServerPort,newServerPort);  LogWriterUtils.getLogWriter().info("Matched the new connection info with old connection info. Receiver affinity verified.");  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  public ExtendedGeneralPath(int rule){  path=new GeneralPath(rule);}  }
class C{  private static void handleSpillSlot(TraceInterval interval){  assert interval.location() != null && (interval.canMaterialize() || isStackSlotValue(interval.location())) : "interval not assigned to a stack slot " + interval;}  }
class C{  public int lastIndexOfAnyOf(final CharSet s){  return lastIndexOfAnyOf(s,length());}  }
class C{  @MediumTest public void testSearchManagerInterfaceAvailable(){  assertNotNull(getSearchManagerService());}  }
class C{  boolean isAvailable(){  return allowed && keyExchange.isAvailable() && cipher.isAvailable();}  }
class C{  public FilterQuery(final int count,final long[] follow,final String[] track,final double[][] locations){  this.count=count;  this.follow=follow;  this.track=track;  this.locations=locations;}  }
class C{  public static long elapsedMSec(long startMsecTime){  return (System.currentTimeMillis() - startMsecTime);}  }
class C{  public boolean isCanalyzing(){  int[] lastValues=new int[2];  for (int jump=1; jump < lookupTable.length; jump*=2) {    lastValues[0]=-1;    lastValues[1]=-1;    for (int row=0; row < lookupTable.length; row++) {      int value=lookupTable[row] ? 1 : 0;      int parentValue=(row / jump) % 2 == 0 ? 1 : 0;      if (-2 == lastValues[parentValue]) {      } else       if (value == lastValues[parentValue]) {      } else       if (-1 == lastValues[parentValue]) {        lastValues[parentValue]=value;      } else {        lastValues[parentValue]=-2;      }    }    if ((lastValues[0] != -2) || (lastValues[1] != -2)) {      return true;    }  }  return false;}  }
class C{  private boolean isShellQuote(Object input){  if (input == null) {    return false;  }  if (input instanceof Map<?,?>) {    return CWLBeanHelper.getValue(SHELL_QUOTE_KEY,input) != null;  }  return false;}  }
class C{  @Override public void close() throws IOException {  try {    serialPort.getInputStream().close();  } catch (  NullPointerException e) {  }  try {    serialPort.getOutputStream().close();  } catch (  NullPointerException e) {  }  try {    serialPort.close();  } catch (  NullPointerException e) {  }}  }
class C{  private void free(RemoteCall call,boolean reuse) throws RemoteException {  Connection conn=((StreamRemoteCall)call).getConnection();  ref.getChannel().free(conn,reuse);}  }
class C{  public PiePlotState initialise(Graphics2D g2,Rectangle2D plotArea,PiePlot plot,Integer index,PlotRenderingInfo info){  PiePlotState state=new PiePlotState(info);  state.setPassesRequired(2);  if (this.dataset != null) {    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));  }  state.setLatestAngle(plot.getStartAngle());  return state;}  }
class C{  public void onAudioDataWritten(){  if (mPlaybackStartTime == -1) {    mPlaybackStartTime=SystemClock.elapsedRealtime();  }}  }
class C{  void touch(boolean openReadOnly) throws IOException {  if (isReadOnly || openReadOnly) {    throw new IOException("Read only");  }  lastModified=System.currentTimeMillis();}  }
class C{  public boolean isSetMessage(){  return this.message != null;}  }
class C{  @Deprecated public static <E>Iterable<E> unmodifiableIterable(ImmutableCollection<E> iterable){  return checkNotNull(iterable);}  }
class C{  private void importImage(ComputeImageServer imageServer,ComputeImage ci,ImageServerDialog imageserverDialog){  log.info("Importing image {} on to {} imageServer",ci.getLabel(),imageServer.getLabel());  String deCrpytedURL=decryptImageURLPassword(ci.getImageUrl());  deCrpytedURL=sanitizeUrl(deCrpytedURL);  String ts=String.valueOf(System.currentTimeMillis());  String[] tokens=ci.getImageUrl().split("/");  String imageName=tokens[tokens.length - 1];  String imagePath=TMP + "/" + imageName;  String tempDir=TMP + "/os" + ts+ "/";  imageserverDialog.init();  log.info("connected to image server {}",imageServer.getLabel());  log.info("cd to {}",TMP);  imageserverDialog.cd(TMP);  log.info("download image");  boolean res=imageserverDialog.wget("'" + deCrpytedURL + "'",imageName,imageServer.getImageImportTimeoutMs());  if (res) {    log.info("downloaded image successfully on to {}  imageServer",imageServer.getLabel());  } else {    throw ImageServerControllerException.exceptions.fileDownloadFailed(maskImageURLPassword(ci.getImageUrl()));  }  log.info("create temp dir {}",tempDir);  imageserverDialog.mkdir(tempDir);  log.info("mount image onto temp dir of {}",imageServer.getLabel());  imageserverDialog.mount(imageName,tempDir);  log.info("Analyze metadata");  ComputeImage osMetadata=getOsMetadata(imageserverDialog,imagePath,tempDir);  isSupportedImage(osMetadata);  List<URI> ids=dbClient.queryByType(ComputeImage.class,true);  Iterator<ComputeImage> iter=dbClient.queryIterativeObjects(ComputeImage.class,ids);  while (iter.hasNext()) {    ComputeImage existingImage=iter.next();    if (osMetadata.fullName().equals(existingImage.getImageName()) && imageServer.getComputeImages() != null && imageServer.getComputeImages().contains(existingImage.getId().toString())) {      log.error("This image is already imported, id: {}",existingImage.getId());      cleanupTemp(imageserverDialog,tempDir,imagePath);      throw ImageServerControllerException.exceptions.duplicateImage(osMetadata.fullName());    }  }  log.info("Compute image '" + osMetadata.fullName() + "' will be loaded.");  String targetDir=imageServer.getTftpBootDir() + imageServer.getImageDir() + osMetadata.fullName();  imageserverDialog.rm(targetDir);  log.info("Saving image into target directory " + targetDir);  imageserverDialog.cpDir(tempDir,targetDir);  log.info("Saved");  log.info("Change target directory permissions to 755");  imageserverDialog.chmodDir("755",targetDir);  ci.setOsName(osMetadata.getOsName());  ci.setOsVersion(osMetadata.getOsVersion());  ci.setOsUpdate(osMetadata.getOsUpdate());  ci.setOsBuild(osMetadata.getOsBuild());  ci.setOsArchitecture(osMetadata.getOsArchitecture());  ci.setCustomName(osMetadata.getCustomName());  ci.setPathToDirectory(imageServer.getImageDir() + osMetadata.fullName() + "/");  ci.setImageName(osMetadata.fullName());  ci.setImageType(osMetadata.getImageType());  ci.setComputeImageStatus(ComputeImageStatus.AVAILABLE.toString());  dbClient.updateObject(ci);  String ciURIString=ci.getId().toString();  if (imageServer.getComputeImages() == null) {    imageServer.setComputeImages(new StringSet());  }  imageServer.getComputeImages().add(ciURIString);  if (imageServer.getFailedComputeImages() != null && imageServer.getFailedComputeImages().contains(ciURIString)) {    imageServer.getFailedComputeImages().remove(ciURIString);  }  log.info("Successfully imported image {} on to {} imageServer",ci.getLabel(),imageServer.getLabel());  dbClient.updateObject(imageServer);  cleanupTemp(imageserverDialog,tempDir,imagePath);}  }
class C{  protected int hleRtcTickAdd32(TPointer64 dstPtr,TPointer64 srcPtr,int value,long multiplier){  log.debug("hleRtcTickAdd32 " + multiplier + " * "+ value);  long src=srcPtr.getValue();  dstPtr.setValue(src + multiplier * value);  return 0;}  }
class C{  private String calcPartName(){  if (null != baseName && !baseName.isEmpty()) {    return baseName;  }  String graphName=viewInfo.getGraphModelLocation().getName();  return NewEditorHelper.newEditorLabel(graphName + " - New View");}  }
class C{  public static void postJson(String url,String param,TextHttpResponseHandler textHttpResponseHandler){  try {    asyncHttpClient.post(context,url,new StringEntity(param),"application/json; charset=UTF-8",textHttpResponseHandler);  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }}  }
class C{  public void sequentialDone(){  if (error) {    callback.onError(errorCode,errorMessage);    errorMessage=null;  } else {    if (callback != null) {      callback.done();    }    if (buffer != null && reuseBuffers) {      buffersControl.bufferDone(buffer);    }    callbackPool.put(AIOSequentialCallback.this);  }}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  boolean isAggressive(){synchronized (BucketAdvisor.this) {    return this.aggressive;  }}  }
class C{  @SuppressWarnings({"raw","unchecked"}) public static <T>LePredicate<T> le(Property<T> property,Variable variable){  return new LePredicate(property(property),variable);}  }
class C{  public NamedStyle(Style parent){  this(null,parent);}  }
class C{  public void possiblyInvalidate(int modifiedPageNumber,ByteBuffer modifiedBuffer){  if (modifiedBuffer == _buffer.getExistingBuffer()) {    return;  }  if (modifiedPageNumber == _pageNumber) {    _pageNumber=PageChannel.INVALID_PAGE_NUMBER;  }}  }
class C{  public SaaSApplicationException(String message,ApplicationExceptionBean bean){  super(message);  this.bean=bean;}  }
class C{  public IMultiPoint nearest(IMultiPoint x){  final double[] xraw=x.raw();  BruteForceThread[] threads=new BruteForceThread[numThreads];  int size=points.length / numThreads;  int offset=0;  for (int t=0; t < threads.length - 1; t++) {    threads[t]=new BruteForceThread(points,xraw,offset,size);    threads[t].start();    offset+=size;  }  threads[threads.length - 1]=new BruteForceThread(points,xraw,offset,points.length - offset);  threads[threads.length - 1].start();  double minValue=Double.MAX_VALUE;  int bestIndex=-1;  for (int t=0; t < threads.length; t++) {    try {      threads[t].join();    } catch (    InterruptedException e) {      System.err.println("Multi Thread Brute Force interrupted. Unexpected results may occur.");    }    if (threads[t].best < minValue) {      minValue=threads[t].best;      bestIndex=threads[t].bestIndex;    }  }  return results[bestIndex];}  }
class C{  public Iterator<String> list() throws UsersRepositoryException {  final Collection<String> userNames=new ArrayList<String>();  try {    final Session session=login();    try {      final Node rootNode=session.getRootNode();      try {        final Node baseNode=rootNode.getNode(USERS_PATH);        final NodeIterator it=baseNode.getNodes();        while (it.hasNext()) {          final Node node=it.nextNode();          try {            final String userName=node.getProperty(USERNAME_PROPERTY).getString();            userNames.add(userName);          } catch (          PathNotFoundException e) {            getLogger().info("Node missing user name. Ignoring.");          }        }      } catch (      PathNotFoundException e) {        getLogger().info("Path not found. Forgotten to setup the repository?");      }    }  finally {      session.logout();    }  } catch (  RepositoryException e) {    if (getLogger().isInfoEnabled()) {      getLogger().info("Failed to list users",e);    }    throw new UsersRepositoryException("Failed to list users",e);  }  return userNames.iterator();}  }
class C{  static ScheduledExecutorService scheduled(){synchronized (SCHEDULED_EXECUTOR_LOCK) {    if (scheduledExecutor == null) {      scheduledExecutor=java.util.concurrent.Executors.newScheduledThreadPool(1);    }  }  return scheduledExecutor;}  }
class C{  public static int divide(int dividend,int divisor){  return (int)(toLong(dividend) / toLong(divisor));}  }
class C{  private static void usage(){  int consoleWidth=ConsoleUtil.getConsoleWidth();  if (consoleWidth <= 0) {    consoleWidth=80;  }  System.out.println("java -cp baksmali.jar org.jf.dexlib2.analysis.DumpVtables -d path/to/framework/jar/files <dex-file>");}  }
class C{  public static byte[] toByteArray(Character[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=((byte)array[i].charValue());  }  return result;}  }
class C{  @Interruptible public static void initForTool(){  initForTool(System.getProperty("java.class.path"));}  }
class C{  public Scanner(Environment env,InputStream in) throws IOException {  this.env=env;  useInputStream(in);}  }
class C{  public BRTest(String name){  super(name);}  }
class C{  @Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position,List payloads){  mFastAdapter.onBindViewHolder(holder,position,payloads);}  }
class C{  public static byte[] bitmapToByte(Bitmap b){  if (b == null) {    return null;  }  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  public GlassfishDeploymentPlanTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public CronExpression(String cronExpression) throws ParseException {  if (cronExpression == null) {    throw new IllegalArgumentException("cronExpression cannot be null");  }  this.cronExpression=cronExpression.toUpperCase(Locale.US);  buildExpression(this.cronExpression);}  }
class C{  protected Set<String> readFileToSet(BufferedReader aReader) throws IOException {  Set<String> words=new HashSet<String>();  String line;  while ((line=aReader.readLine()) != null) {    words.add(line.toLowerCase());  }  return words;}  }
class C{  public static void fill(long[] array,int start,int end,long value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public static void register(ISearchExecutor searchExecutor,SearchControl searchControl){  if (!hasSearchControlOpened(searchExecutor)) {    openedSearchControlMap.put(searchExecutor,searchControl);  }}  }
class C{  public void highlightRoute(String src,String dst){  Iterator i=rows.iterator();  while (i.hasNext()) {    Map temp=(Map)i.next();    if (temp.get("Address").equals(dst) && temp.get("Pivot").equals(src)) {      temp.put("Active",Boolean.TRUE);    }  }}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 2:    throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath("/server/tests/etags");  RestAssured.requestSpecification.baseUri("http://localhost:" + MAIN_PORT + ROOT);}  }
class C{  public CBookmark(final IAddress address,final String description){  m_address=Preconditions.checkNotNull(address,"IE00333: Bookmark addresses can't be null");  m_description=Preconditions.checkNotNull(description,"IE00334: Bookmark descriptions can't be null");}  }
class C{  final boolean moveTaskToBackLocked(int task,ActivityRecord reason){  Slog.i(TAG,"moveTaskToBack: " + task);  if (mMainStack && mService.mController != null) {    ActivityRecord next=topRunningActivityLocked(null,task);    if (next == null) {      next=topRunningActivityLocked(null,0);    }    if (next != null) {      boolean moveOK=true;      try {        moveOK=mService.mController.activityResuming(next.packageName);      } catch (      RemoteException e) {        mService.mController=null;      }      if (!moveOK) {        return false;      }    }  }  ArrayList<IBinder> moved=new ArrayList<IBinder>();  if (DEBUG_TRANSITION)   Slog.v(TAG,"Prepare to back transition: task=" + task);  final int N=mHistory.size();  int bottom=0;  int pos=0;  while (pos < N) {    ActivityRecord r=mHistory.get(pos);    if (localLOGV)     Slog.v(TAG,"At " + pos + " ckp "+ r.task+ ": "+ r);    if (r.task.taskId == task) {      if (localLOGV)       Slog.v(TAG,"Removing and adding at " + (N - 1));      if (DEBUG_ADD_REMOVE) {        RuntimeException here=new RuntimeException("here");        here.fillInStackTrace();        Slog.i(TAG,"Removing and adding activity " + r + " to stack at "+ bottom,here);      }      mHistory.remove(pos);      mHistory.add(bottom,r);      moved.add(r.appToken);      bottom++;    }    pos++;  }  if (reason != null && (reason.intent.getFlags() & Intent.FLAG_ACTIVITY_NO_ANIMATION) != 0) {    mService.mWindowManager.prepareAppTransition(AppTransition.TRANSIT_NONE,false);    ActivityRecord r=topRunningActivityLocked(null);    if (r != null) {      mNoAnimActivities.add(r);    }  } else {    mService.mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);  }  mService.mWindowManager.moveAppTokensToBottom(moved);  if (VALIDATE_TOKENS) {    validateAppTokensLocked();  }  finishTaskMoveLocked(task);  return true;}  }
class C{  synchronized boolean ensureDatabase(){  if (mDb != null && mDb.isOpen()) {    return true;  }  SQLiteException lastSQLiteException=null;  for (int tries=0; tries < 2; tries++) {    try {      if (tries > 0) {        deleteDatabase();      }      mDb=getWritableDatabase();      break;    } catch (    SQLiteException e) {      lastSQLiteException=e;    }    try {      Thread.sleep(SLEEP_TIME_MS);    } catch (    InterruptedException ie) {      Thread.currentThread().interrupt();    }  }  if (mDb == null) {    throw lastSQLiteException;  }  mDb.setMaximumSize(mMaximumDatabaseSize);  return true;}  }
class C{  public static Position interpolate(double amount,Position value1,Position value2){  if (value1 == null || value2 == null) {    String message=Logging.getMessage("nullValue.PositionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (amount < 0)   return value1; else   if (amount > 1)   return value2;  LatLon latLon=LatLon.interpolate(amount,value1,value2);  double elevation=WWMath.mix(amount,value1.getElevation(),value2.getElevation());  return new Position(latLon,elevation);}  }
class C{  public void close2(){}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  private static void checkPlanReducers(HadoopMapReducePlan plan,Collection<ClusterNode> nodes,int expReducers,boolean expectUniformity){  assertEquals(expReducers,plan.reducers());  if (expectUniformity)   assertEquals(allIds(nodes),plan.reducerNodeIds());  int sum=0;  int lenSum=0;  for (  UUID uuid : plan.reducerNodeIds()) {    int[] rr=plan.reducers(uuid);    assert rr != null;    lenSum+=rr.length;    for (    int i : rr)     sum+=i;  }  assertEquals(expReducers,lenSum);  assertEquals((lenSum * (lenSum - 1) / 2),sum);}  }
class C{  public SolrServer createNewSolrServer(){  if (jetty != null) {    try {      String url=jetty.getBaseUrl().toString() + "/" + "collection1";      HttpSolrServer s=new HttpSolrServer(url);      s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);      s.setDefaultMaxConnectionsPerHost(100);      s.setMaxTotalConnections(100);      return s;    } catch (    Exception ex) {      throw new RuntimeException(ex);    }  } else {    return new EmbeddedSolrServer(h.getCoreContainer(),"");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object obj=stack.pop();  Show s=getShowObj(obj);  if (Sage.EMBEDDED && s != null && (s.getMediaMask() & DBObject.MEDIA_MASK_PICTURE) != 0) {    String desc=s.getDesc();    if (desc.length() > 0)     return desc;synchronized (this) {      if (s == lastShowUsed)       return lastDesc;    }    Airing[] airList=Wizard.getInstance().getAirings(s,0);    if (airList.length == 1) {      MediaFile mf=Wizard.getInstance().getFileForAiring(airList[0]);      if (mf != null) {        if (sage.media.format.MediaFormat.JPEG.equals(mf.getContainerFormat())) {          try {            sage.media.format.ReadMetadata exifParser=new sage.media.format.ReadMetadata(mf.getFile(0));synchronized (this) {              lastShowUsed=s;              lastDesc=exifParser.toString();              return lastDesc;            }          } catch (          Exception e) {          }        }      }    }  }  if (s != null)   return s.getDesc();  SeriesInfo si=getSeriesInfoObj(obj);  return (si == null) ? "" : si.getDescription();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.471 -0400",hash_original_method="2019F6006EC0A353E6A211B1629AD93C",hash_generated_method="8D865895679905044613188400A70A29") private String cleanInput(String input){  if (input == null) {    return null;  }  input=input.trim();  if (input.length() == 0) {    return null;  }  return input.toUpperCase();}  }
class C{  @Override protected void collectDisappearingPotential(V v){  if (graph.outDegree(v) == 0) {    if (isDisconnectedGraphOK())     disappearing_potential+=getCurrentValue(v); else     throw new IllegalArgumentException("Outdegree of " + v + " must be > 0");  }}  }
class C{  public static String chompLast(String str){  return chompLast(str,"\n");}  }
class C{  public static void checkHttpHeaderError(final boolean forceCloseSocket,final List<ISpeedTestListener> listenerList,final HttpStates httpHeaderState){  if (httpHeaderState != HttpStates.HTTP_FRAME_OK) {    if (!forceCloseSocket) {      for (int i=0; i < listenerList.size(); i++) {        listenerList.get(i).onDownloadError(SpeedTestError.INVALID_HTTP_RESPONSE,SpeedTestConst.PARSING_ERROR + "http headers");      }    } else {      for (int i=0; i < listenerList.size(); i++) {        listenerList.get(i).onInterruption();      }    }  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="SBSC_USE_STRINGBUFFER_CONCATENATION") protected void forwardToPort(AbstractMRMessage m,AbstractMRListener reply){  if (log.isDebugEnabled()) {    log.debug("forwardToPort message: [" + m + "]");  }  mLastSender=reply;  Runnable r=new XmtNotifier(m,mLastSender,this);  javax.swing.SwingUtilities.invokeLater(r);  byte msg[]=new byte[lengthOfByteStream(m)];  int offset=addHeaderToOutput(msg,m);  int len=m.getNumDataElements();  for (int i=0; i < len; i++) {    msg[i + offset]=(byte)m.getElement(i);  }  addTrailerToOutput(msg,len + offset,m);  try {    if (ostream != null) {      if (log.isDebugEnabled()) {        String f="write message: ";        for (int i=0; i < msg.length; i++) {          f=f + Integer.toHexString(0xFF & msg[i]) + " ";        }        log.debug(f);      }      while (m.getRetries() >= 0) {        if (portReadyToSend(controller)) {          for (int i=0; i < len; i++) {            ostream.write(msg[i]);            try {synchronized (xmtRunnable) {                xmtRunnable.wait(10);              }            } catch (            InterruptedException e) {              Thread.currentThread().interrupt();              log.error("char send wait interupted");            }          }          break;        } else         if (m.getRetries() >= 0) {          if (log.isDebugEnabled()) {            log.debug("Retry message: " + m.toString() + " attempts remaining: "+ m.getRetries());          }          m.setRetries(m.getRetries() - 1);          try {synchronized (xmtRunnable) {              xmtRunnable.wait(m.getTimeout());            }          } catch (          InterruptedException e) {            log.error("retry wait interupted");          }        } else {          log.warn("sendMessage: port not ready for data sending: " + java.util.Arrays.toString(msg));        }      }    } else {      log.warn("sendMessage: no connection established");    }  } catch (  Exception e) {    log.warn("sendMessage: Exception: " + e.toString());  }}  }
class C{  public void endEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  protected List<Position> asPositionList(LatLon... locations){  List<Position> positions=new ArrayList<Position>(locations.length);  for (  LatLon loc : locations) {    positions.add(new Position(loc,0));  }  return positions;}  }
class C{  public static boolean hasSpecificUnitIgnoringPrefix(final AnnotatedTypeMirror annoType,final AnnotationMirror unitsAnnotation){  if (annoType == null || unitsAnnotation == null) {    return false;  }  return AnnotationUtils.containsSameIgnoringValues(annoType.getAnnotations(),unitsAnnotation);}  }
class C{  public static String readXmlAsStringFromFile(String xmlFilePath) throws IOException, SAXException, ParserConfigurationException, TransformerFactoryConfigurationError, TransformerException {  File file=new File(xmlFilePath);  if (file.length() == 0) {    return "";  }  Document doc=getDocumentBuilder().parse(file);  return elementToString(doc);}  }
class C{  public boolean isAccountUpdatesRunning(String accountNumber){  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void addDefine(MatchRecognizeDefineItem define){  this.defines.add(define);}  }
class C{  private String processLineOfWikiCode(final String hostport,String line){  line=processMetadata(line);  if ((!this.replacedHtmlAlready || this.preformattedSpanning) && line.indexOf(WIKI_CLOSE_PRE_ESCAPED) < 0) {    line=CharacterCoding.unicode2html(line,true);    this.replacedHtmlAlready=true;  }  if ((line.indexOf(WIKI_OPEN_PRE_ESCAPED) >= 0) || (line.indexOf(WIKI_CLOSE_PRE_ESCAPED) >= 0) || this.preformattedSpanning) {    line=processPreformattedText(hostport,line);  } else {    line=processTable(line);    if (!line.isEmpty() && line.charAt(0) == WIKI_FORMATTED) {      line="<tt>" + line.substring(1) + "</tt>";    }    if (line.startsWith(WIKI_HR_LINE)) {      line="<hr />" + line.substring(LEN_WIKI_HR_LINE);    }    if (!line.isEmpty() && line.charAt(0) == WIKI_INDENTION) {      final StringBuilder head=new StringBuilder();      final StringBuilder tail=new StringBuilder();      while (!line.isEmpty() && line.charAt(0) == WIKI_INDENTION) {        head.append(HTML_OPEN_BLOCKQUOTE);        tail.append(HTML_CLOSE_BLOCKQUOTE);        line=line.substring(1);      }      line=head + line + tail;    }    line=tagReplace(line,Tags.HEADLINE_6);    line=tagReplace(line,Tags.HEADLINE_5);    line=tagReplace(line,Tags.HEADLINE_4);    line=tagReplace(line,Tags.HEADLINE_3);    line=tagReplace(line,Tags.HEADLINE_2);    line=tagReplace(line,Tags.HEADLINE_1);    line=tagReplace(line,Tags.EMPHASIZE_3);    line=tagReplace(line,Tags.EMPHASIZE_2);    line=tagReplace(line,Tags.EMPHASIZE_1);    line=tagReplace(line,Tags.STRIKE);    line=tagReplace(line,Tags.UNDERLINE);    line=processUnorderedList(line);    line=processOrderedList(line);    line=processDefinitionList(line);    line=processLinksAndImages(hostport,line);  }  if (!this.processingPreformattedText) {    this.replacedHtmlAlready=false;  }  if (!(line.endsWith(HTML_CLOSE_LIST_ELEMENT) || this.processingDefList || this.escape|| this.processingPreformattedText|| this.processingTable|| this.processingCell)) {    line+="<br />";  }  return line;}  }
class C{  @Override public void panRangeAxes(double panRange,PlotRenderingInfo info,Point2D source){  XYPlot subplot=findSubplot(info,source);  if (subplot == null) {    return;  }  if (!subplot.isRangePannable()) {    return;  }  PlotRenderingInfo subplotInfo=info.getSubplotInfo(info.getSubplotIndex(source));  if (subplotInfo == null) {    return;  }  for (int i=0; i < subplot.getRangeAxisCount(); i++) {    ValueAxis rangeAxis=subplot.getRangeAxis(i);    if (rangeAxis != null) {      rangeAxis.pan(panRange);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:22.761 -0500",hash_original_method="0B74804F51F2B061D3EF3D31C957BAFB",hash_generated_method="0B74804F51F2B061D3EF3D31C957BAFB") Node<E> first(){  restartFromHead:   for (; ; ) {    for (Node<E> h=head, p=h, q; ; ) {      boolean hasItem=(p.item != null);      if (hasItem || (q=p.next) == null) {        updateHead(h,p);        return hasItem ? p : null;      } else       if (p == q)       continue restartFromHead; else       p=q;    }  }}  }
class C{  public CompileClassPathImpl(Project proj){  super(proj);}  }
class C{  public static Row readRow(RowFactory rowFactory,DataReader in,Data data) throws IOException {  long key=in.readVarLong();  int len=in.readVarInt();  data.reset();  data.checkCapacity(len);  in.readFully(data.getBytes(),len);  int columnCount=data.readVarInt();  Value[] values=new Value[columnCount];  for (int i=0; i < columnCount; i++) {    values[i]=data.readValue();  }  Row row=rowFactory.createRow(values,Row.MEMORY_CALCULATE);  row.setKey(key);  return row;}  }
class C{  public synchronized ConcurrentMap<K,V> buildConcurrentHashMap(int concurencyLevel){  checkMemoryManager();  return new OffHeapConcurrentHashMap<K,V>(memoryManager,hashCapacity,keySerializer,valueSerializer,concurencyLevel);}  }
class C{  public void unbind(){  Gdx.gl20.glBindBuffer(GL20.GL_ELEMENT_ARRAY_BUFFER,0);  isBound=false;}  }
class C{  public void closeStorage(StorageData storageData) throws BusinessException, IOException, SerializationException {  StorageData local=getLocalStorageDataObject(storageData);synchronized (local) {    if ((storageRecorder.isRecordingOn() || storageRecorder.isRecordingScheduled()) && Objects.equals(local,recorderStorageData)) {      throw new BusinessException("Close the storage " + local + ".",StorageErrorCodeEnum.STORAGE_CAN_NOT_BE_CLOSED);    } else     if (isStorageClosed(local)) {      throw new BusinessException("Close the storage " + local + ".",StorageErrorCodeEnum.STORAGE_ALREADY_CLOSED);    }    StorageWriter writer=openedStoragesMap.get(local);    if (writer != null) {      writer.closeStorageWriter();    }    openedStoragesMap.remove(local);    local.setDiskSize(getDiskSizeForStorage(local));    local.markClosed();    writeStorageDataToDisk(local);  }}  }
class C{  public void register(VCardPropertyScribe<? extends VCardProperty> scribe){  extendedByName.put(scribe.getPropertyName().toUpperCase(),scribe);  extendedByClass.put(scribe.getPropertyClass(),scribe);  extendedByQName.put(scribe.getQName(),scribe);}  }
class C{  @Override public int hashCode(){  int result=193;  long temp=Double.doubleToLongBits(this.base);  result=37 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.smallestValue);  result=37 * result + (int)(temp ^ (temp >>> 32));  if (this.numberFormatOverride != null) {    result=37 * result + this.numberFormatOverride.hashCode();  }  result=37 * result + this.tickUnit.hashCode();  return result;}  }
class C{  public static void main(String[] arg) throws Exception {  SimpleCommandLineParser parser=new SimpleCommandLineParser(arg);  String username=parser.getValue("username");  String password=parser.getValue("password");  String domain=parser.getValue("domain");  String destinationUser=parser.getValue("destination_user");  boolean help=parser.containsKey("help");  if (help || (username == null) || (password == null)|| (domain == null)) {    usage();    System.exit(1);  }  new AppsForYourDomainGmailFilterClient(username,password,domain,destinationUser);}  }
class C{  public void init(Properties props){  setProperties(null,props);}  }
class C{  public void test_search03(){  int nkeys=3;  int maxKeys=3;  byte[][] keys=new byte[][]{new byte[]{2,3,5},new byte[]{4,5,6},new byte[]{5,4,9}};  doSearchTest03(new MutableKeyBuffer(nkeys,keys));}  }
class C{  protected void handleEnvAddButtonSelected(){  MultipleInputDialog dialog=new MultipleInputDialog(getShell(),LaunchConfigurationsMessages.EnvironmentTab_22);  dialog.addTextField(NAME_LABEL,null,false);  dialog.addVariablesField(VALUE_LABEL,null,true);  if (dialog.open() != Window.OK) {    return;  }  String name=dialog.getStringValue(NAME_LABEL);  String value=dialog.getStringValue(VALUE_LABEL);  if (name != null && value != null && name.length() > 0 && value.length() > 0) {    addVariable(new EnvironmentVariable(name.trim(),value.trim()));  }}  }
class C{  public void index() throws IOException {  IndexWriter writer=new IndexWriter(indexDir,new IndexWriterConfig(new WhitespaceAnalyzer()).setOpenMode(OpenMode.CREATE));  Document doc=new Document();  doc.add(new DoublePoint("latitude",40.759011));  doc.add(new NumericDocValuesField("latitude",Double.doubleToRawLongBits(40.759011)));  doc.add(new DoublePoint("longitude",-73.9844722));  doc.add(new NumericDocValuesField("longitude",Double.doubleToRawLongBits(-73.9844722)));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("latitude",40.718266));  doc.add(new NumericDocValuesField("latitude",Double.doubleToRawLongBits(40.718266)));  doc.add(new DoublePoint("longitude",-74.007819));  doc.add(new NumericDocValuesField("longitude",Double.doubleToRawLongBits(-74.007819)));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("latitude",40.7051157));  doc.add(new NumericDocValuesField("latitude",Double.doubleToRawLongBits(40.7051157)));  doc.add(new DoublePoint("longitude",-74.0088305));  doc.add(new NumericDocValuesField("longitude",Double.doubleToRawLongBits(-74.0088305)));  writer.addDocument(doc);  searcher=new IndexSearcher(DirectoryReader.open(writer));  writer.close();}  }
class C{  public static void openError(Shell parent,String title,String message){  open(ERROR,parent,title,message,SWT.NONE);}  }
class C{  private BiosCommandResult executeInSession(NetworkSystem networkSystem,List<ZoneWwnAlias> aliases,String fabricId,String fabricWwn,String methodName,String methodLogName) throws NetworkDeviceControllerException {  Map<String,String> aliasUpdateResults=new HashMap<String,String>();  if (aliases.isEmpty()) {    throw DeviceControllerException.exceptions.entityNullOrEmpty("aliases");  }  WBEMClient client=getNetworkDeviceClient(networkSystem);  CIMInstance zoneServiceIns=null;  try {    if (fabricWwn == null) {      fabricWwn=_smisHelper.getFabricWwn(client,fabricId);    } else {      validateFabric(networkSystem,fabricWwn,fabricId);    }    _log.info("{} started.",methodLogName);    _log.info("Attempting to start a zoning session");    zoneServiceIns=_smisHelper.startSession(client,fabricId,fabricWwn);    if (zoneServiceIns == null) {      _log.info("Failed to start a zoning session.");      throw NetworkDeviceControllerException.exceptions.startZoningSessionFailed();    }    Method method=getClass().getMethod(methodName,new Class[]{WBEMClient.class,CIMInstance.class,String.class,String.class,ZoneWwnAlias.class});    for (    ZoneWwnAlias alias : aliases) {      try {        if ((Boolean)method.invoke(this,client,zoneServiceIns,fabricId,fabricWwn,alias)) {          aliasUpdateResults.put(alias.getName(),SUCCESS);        } else {          aliasUpdateResults.put(alias.getName(),NO_CHANGE);        }      } catch (      Exception ex) {        aliasUpdateResults.put(alias.getName(),ERROR + " : " + ex.getMessage());        _log.info("Exception was encountered but will try the rest of the batch. Error message: ",ex);      }    }    _log.info("Attempting to close zoning session.");    if (!hasResult(aliasUpdateResults,SUCCESS)) {      _log.info("{} was not successful for any entity. Closing the session with no commit",methodLogName);      if (!_smisHelper.endSession(client,zoneServiceIns,false)) {        _log.info("Failed to terminate zoning session. Ignoring as session may have expired.");      }    } else {      if (!_smisHelper.endSession(client,zoneServiceIns,true)) {        throw NetworkDeviceControllerException.exceptions.zoneSessionCommitFailed(fabricId);      }    }    _log.info("{} completed successfully.",methodLogName);  } catch (  Exception e1) {    try {      if (zoneServiceIns != null) {        _log.info("Attempting to terminate zoning session.");        _smisHelper.endSession(client,zoneServiceIns,false);      }    } catch (    WBEMException e) {      _log.error("Failed to terminate zoning session." + e.getLocalizedMessage(),e);    }    _log.error("Failed to " + methodLogName + ": "+ e1.getLocalizedMessage(),e1);    throw NetworkDeviceControllerException.exceptions.operationFailed(methodLogName,e1);  }  _log.info(methodLogName + " results: " + toMessage(aliasUpdateResults));  return getBiosCommandResult(aliasUpdateResults);}  }
class C{  public final boolean hasField(FieldDef<T,?> field){  FieldDef<T,?> f=fields.get(field.getName());  if (f == null) {    return false;  }  checkSame(f,field);  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void addHandshakeCompletedListener(HandshakeCompletedListener listener){  if (listener == null) {    throw new IllegalArgumentException("Provided listener is null");  }  if (listeners == null) {    listeners=new ArrayList<HandshakeCompletedListener>();  }  listeners.add(listener);}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T>T[] remove(T[] buffer,int offset,int length,Class<T> componentType){  int len2=buffer.length - length;  T[] temp=(T[])Array.newInstance(componentType,len2);  System.arraycopy(buffer,0,temp,0,offset);  System.arraycopy(buffer,offset + length,temp,offset,len2 - offset);  return temp;}  }
class C{  public int remaining(){  int rem=_buf.remaining();  return rem;}  }
class C{  public static void start(GridField mField){  int WindowNo=mField.getWindowNo();  Frame frame=Env.getWindow(WindowNo);  new FieldRecordInfo(frame,mField.getColumnName(),mField.getGridTab().getAD_Table_ID(),mField.getAD_Column_ID(),mField.getGridTab().getRecord_ID());}  }
class C{  public void updatePaths(){  if ((block != null) && (panels.size() > 0)) {    LayoutEditor panel=panels.get(0);    ArrayList<LayoutConnectivity> c=panel.auxTools.getConnectivityList(_instance);    if (panels.size() > 1) {      for (int i=1; i < panels.size(); i++) {        if (c.size() < panels.get(i).auxTools.getConnectivityList(_instance).size()) {          panel=panels.get(i);          c=panel.auxTools.getConnectivityList(_instance);        }      }      PositionablePoint point=panel.getFinder().findPositionableLinkPoint(this);      if (point != null && point.getLinkedEditor() != null && panels.contains(point.getLinkedEditor())) {        c=panel.auxTools.getConnectivityList(_instance);        c.addAll(point.getLinkedEditor().auxTools.getConnectivityList(_instance));      } else {        for (int j=0; j < panels.size(); j++) {          LayoutEditor tPanel=panels.get(j);          if ((tPanel != panel) && InstanceManager.getDefault(jmri.jmrit.display.layoutEditor.LayoutBlockManager.class).warn() && (!compareConnectivity(c,tPanel.auxTools.getConnectivityList(_instance)))) {            int response=JOptionPane.showOptionDialog(null,java.text.MessageFormat.format(rb.getString("Warn1"),new Object[]{blockName,tPanel.getLayoutName(),panel.getLayoutName()}),Bundle.getMessage("WarningTitle"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,new Object[]{Bundle.getMessage("ButtonOK"),rb.getString("ButtonOKPlus")},Bundle.getMessage("ButtonOK"));            if (response != 0) {              InstanceManager.getDefault(jmri.jmrit.display.layoutEditor.LayoutBlockManager.class).turnOffWarning();            }          }        }      }    }    updateBlockPaths(c,panel);  }}  }
class C{  public byte[] encode(){  char type=getAttributeType();  byte binValue[]=new byte[HEADER_LENGTH + attributeValue.length];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  System.arraycopy(attributeValue,0,binValue,HEADER_LENGTH,attributeValue.length);  return binValue;}  }
class C{  public boolean wasDoubleClicked(int code){  MouseButton mb=this.buttons.get(code);  if (mb == null) {    return false;  }  return mb.wasDoubleClicked();}  }
class C{  public String discreteValue(Object example){  return computePrediction(example);}  }
class C{  public static final int previousMonthLength(int year,int month){  return (month > 0) ? monthLength(year,month - 1) : 31;}  }
class C{  public final Iterator<String> actionsIterator(){  return mActions != null ? mActions.iterator() : null;}  }
class C{  private void analyze(InputStream is) throws IOException {  int c1=is.read();  int c2=is.read();  int c3=is.read();  _mime=null;  _width=_height=-1;  if (c1 == 'G' && c2 == 'I' && c3 == 'F') {    is.skip(3);    _width=readInt(is,2,false);    _height=readInt(is,2,false);    _mime="image/gif";  } else   if (c1 == 0xFF && c2 == 0xD8) {    while (c3 == 255) {      int marker=is.read();      int len=readInt(is,2,true);      if (marker == 192 || marker == 193 || marker == 194) {        is.skip(1);        _height=readInt(is,2,true);        _width=readInt(is,2,true);        _mime="image/jpeg";        break;      }      is.skip(len - 2);      c3=is.read();    }  } else   if (c1 == 137 && c2 == 80 && c3 == 78) {    is.skip(15);    _width=readInt(is,2,true);    is.skip(2);    _height=readInt(is,2,true);    _mime="image/png";  } else   if (c1 == 66 && c2 == 77) {    is.skip(15);    _width=readInt(is,2,false);    is.skip(2);    _height=readInt(is,2,false);    _mime="image/bmp";  } else {    int c4=is.read();    if ((c1 == 'M' && c2 == 'M' && c3 == 0 && c4 == 42) || (c1 == 'I' && c2 == 'I' && c3 == 42 && c4 == 0)) {      boolean bigEndian=c1 == 'M';      int ifd=0;      int entries;      ifd=readInt(is,4,bigEndian);      is.skip(ifd - 8);      entries=readInt(is,2,bigEndian);      for (int i=1; i <= entries; i++) {        int tag=readInt(is,2,bigEndian);        int fieldType=readInt(is,2,bigEndian);        long count=readInt(is,4,bigEndian);        int valOffset;        if ((fieldType == 3 || fieldType == 8)) {          valOffset=readInt(is,2,bigEndian);          is.skip(2);        } else {          valOffset=readInt(is,4,bigEndian);        }        if (tag == 256) {          _width=valOffset;        } else         if (tag == 257) {          _height=valOffset;        }        if (_width != -1 && _height != -1) {          _mime="image/tiff";          break;        }      }    }  }}  }
class C{  public void closeImmediately(){  if (store.isClosed()) {    return;  }  store.closeImmediately();}  }
class C{  private boolean checkInterrupted(){  if (isInterrupted()) {    log.config("interrupted");    if (m_child != null)     m_child.destroy();    m_child=null;    if (m_outReader != null && m_outReader.isAlive())     m_outReader.interrupt();    m_outReader=null;    if (m_errReader != null && m_errReader.isAlive())     m_errReader.interrupt();    m_errReader=null;    if (m_inStream != null)     try {      m_inStream.close();    } catch (    Exception e) {    }    m_inStream=null;    if (m_outStream != null)     try {      m_outStream.close();    } catch (    Exception e) {    }    m_outStream=null;    if (m_errStream != null)     try {      m_errStream.close();    } catch (    Exception e) {    }    m_errStream=null;    return true;  }  return false;}  }
class C{  private void processAxisFault(AxisFault fault){  Element runtimeException=fault.lookupFaultDetail(Constants.QNAME_FAULTDETAIL_RUNTIMEEXCEPTION);  if (runtimeException != null) {    exceptionLog.info(Messages.getMessage("axisFault00"),fault);    fault.removeFaultDetail(Constants.QNAME_FAULTDETAIL_RUNTIMEEXCEPTION);  } else   if (exceptionLog.isDebugEnabled()) {    exceptionLog.debug(Messages.getMessage("axisFault00"),fault);  }  fault.removeFaultDetail(Constants.QNAME_FAULTDETAIL_STACKTRACE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.372 -0500",hash_original_method="03A0EAC86168733AADB73171D9F2D86A",hash_generated_method="34EC2AB946B822D68C293CFBE8B33CF4") public void removePort(){  if (hostPort != null)   hostPort.removePort();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private String renderTypeName(Generator gen,Type model){  final StringBuilder name=new StringBuilder();  name.append(model.getTypeName());  if (model instanceof ParameterizedType) {    final ParameterizedType hasTypes=(ParameterizedType)model;    name.append(Stream.of(hasTypes.getActualTypeArguments()).map(null).map(null).collect(joinIfNotEmpty(", ","<",">")));  }  return name.toString();}  }
class C{  @Override public void onTokenRefresh(){  Log.d(LOG_TAG,"onTokenRefresh");  Matrix.getInstance(this).getSharedGCMRegistrationManager().resetGCMRegistration();}  }
class C{  private void appendRtfString(StringBuilder result,String value){  for (int i=0; i < value.length(); i++) {    int codePoint=value.codePointAt(i);    if (codePoint == 10) {      result.append("\\par\n");    } else     if (codePoint > 127) {      result.append("\\u" + codePoint + "?");    } else {      result.append(value.substring(i,i + 1));    }  }}  }
class C{  private boolean isCharacterQuoteCharacter(char c){  return c == quotechar;}  }
class C{  @Override public boolean rowDeleted() throws SQLException {  try {    debugCodeCall("rowDeleted");    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private boolean jumpToPage(int position,boolean smooth){  if (mShowWelcomePage && !didAcceptTermsOfService()) {    return position == 0;  }  if (position >= mPagerAdapter.getCount()) {    completeFirstRunExperience();    return false;  }  mPager.setCurrentItem(position,smooth);  return true;}  }
class C{  public void checkOrganization(Organization organization) throws BadRequestException {  if (organization == null) {    throw new BadRequestException("Organization required");  }  if (isNullOrEmpty(organization.getName())) {    throw new BadRequestException("Organization name required");  }  if (!accountValidator.isValidName(organization.getName())) {    throw new BadRequestException("Organization name must contain only letters and digits");  }}  }
class C{  public FloatLiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public void postApply(List<URI> initiatorsForResource,Map<URI,Map<URI,Integer>> initiatorsToVolumes) throws Exception {  String token=context.token;  ExportGroup exportGroup=context.exportGroup;  Set<URI> initiatorsForNewExport=context.initiatorsForNewExport;  List<URI> initiatorURIsCopy=context.initiatorURIsCopy;  if (!initiatorsToVolumes.isEmpty()) {    List<URI> leftoverInitiatorsForNewExport=new ArrayList<URI>();    for (    URI initiatorId : initiatorsToVolumes.keySet()) {      Initiator initiator=_dbClient.queryObject(Initiator.class,initiatorId);      if (initiator != null) {        leftoverInitiatorsForNewExport.add(initiator.getId());        initiatorsForNewExport.remove(initiator.getId());      }    }    Map<String,List<URI>> computeResourceToInitiators=mapInitiatorsToComputeResource(exportGroup,leftoverInitiatorsForNewExport);    for (    Entry<String,List<URI>> resourceEntry : computeResourceToInitiators.entrySet()) {      String computeKey=resourceEntry.getKey();      List<URI> computeInitiatorURIs=resourceEntry.getValue();      Initiator initiator=_dbClient.queryObject(Initiator.class,computeInitiatorURIs.get(0));      _log.info(String.format("Residual mask needed: New export masks for %s",computeKey));      GenExportMaskCreateWorkflowResult result=generateExportMaskCreateWorkflow(context.workflow,context.previousStep,context.storage,exportGroup,computeInitiatorURIs,initiatorsToVolumes.get(initiator.getId()),token);      context.flowCreated=true;      context.previousStep=result.getStepId();      if (context.zoningStepNeeded) {        String zoningStep=context.workflow.createStepId();        List<URI> masks=new ArrayList<URI>();        masks.add(result.getMaskURI());        context.previousStep=generateZoningCreateWorkflow(context.workflow,context.previousStep,exportGroup,masks,context.volumeMap,zoningStep);      }    }  }  for (  URI initiatorId : initiatorsForResource) {    if (initiatorsToVolumes.get(initiatorId) == null) {      if (initiatorURIsCopy.remove(initiatorId)) {        _log.info("Determined that we do not need to create a new mask for initiator [1]: " + initiatorId);      }      if (initiatorsForNewExport.remove(initiatorId)) {        _log.info("Determined that we do not need to create a new mask for initiator [2]: " + initiatorId);      }    }  }}  }
class C{  private int readHexDigit() throws IOException {  int a;  while (isWhiteSpace(a=buf.get())) {  }switch (a) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':    a-='0';  break;case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':a-='a' - 10;break;case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':a-='A' - 10;break;default :a=-1;break;}return a;}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public static void main(String[] args) throws IOException, GeneralSecurityException {  if (args.length != 2) {    System.err.println("Usage:");    System.err.printf("\tjava %s inputImagePath outputImagePath\n",FaceDetectApp.class.getCanonicalName());    System.exit(1);  }  Path inputPath=Paths.get(args[0]);  Path outputPath=Paths.get(args[1]);  if (!outputPath.toString().toLowerCase().endsWith(".jpg")) {    System.err.println("outputImagePath must have the file extension 'jpg'.");    System.exit(1);  }  FaceDetectApp app=new FaceDetectApp(getVisionService());  List<FaceAnnotation> faces=app.detectFaces(inputPath,MAX_RESULTS);  System.out.printf("Found %d face%s\n",faces.size(),faces.size() == 1 ? "" : "s");  System.out.printf("Writing to file %s\n",outputPath);  app.writeWithFaces(inputPath,outputPath,faces);}  }
class C{  public static Matrix fromAxes(Vec4[] axes){  if (axes == null) {    String msg=Logging.getMessage("nullValue.AxesIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (axes.length < 3) {    String msg=Logging.getMessage("generic.ArrayInvalidLength",axes.length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (axes[0] == null || axes[1] == null || axes[2] == null) {    String msg=Logging.getMessage("nullValue.AxesIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  Vec4 s=axes[0].normalize3();  Vec4 f=s.cross3(axes[1]).normalize3();  Vec4 u=f.cross3(s).normalize3();  return new Matrix(s.x,u.x,f.x,0.0,s.y,u.y,f.y,0.0,s.z,u.z,f.z,0.0,0.0,0.0,0.0,1.0,true);}  }
class C{  private BinaryMemoryAllocator(){}  }
class C{  public static void d(Object... msg){  if (LuaViewConfig.isDebug()) {    Log.d(DEFAULT_PREFIX,getMsg(msg));  }}  }
class C{  void expire(long now){  for (  PeersSeeds dbl : items.values()) {    dbl.expire();  }  items.entrySet().removeIf(null);}  }
class C{  private static int commonPrefixLength(final CharSequence first,final CharSequence second){  final int result=getCommonPrefix(first.toString(),second.toString()).length();  return result > 4 ? 4 : result;}  }
class C{  @Override public void removeAppOffer(Offer offer){  dataAdapter.removeAppOffer(offer);}  }
class C{  public void purgeQueue(PurgeQueueRequest purgeQueueRequest) throws AmazonServiceException, AmazonClientException {  amazonSqsToBeExtended.purgeQueue(purgeQueueRequest);}  }
class C{  public void addPath(Id<TtPath> pathId,List<Id<DgStreet>> path,double flowValue){  this.totalFlow+=flowValue;  if (!this.paths.containsKey(pathId)) {    this.paths.put(pathId,new TtPath(pathId,path,0.0));  }  this.paths.get(pathId).increaseFlow(flowValue);}  }
class C{  public Maybe<Zipper<A>> maybeReplaceBefore(A a){  return Maybe.JustWhenTrue(!isStart(),null);}  }
class C{  public ExpirationAttributes(int expirationTime,ExpirationAction expirationAction){  this.timeout=expirationTime;  this.action=expirationAction;}  }
class C{  public void incrementChangeCount(){  changeCount++;  if (SysProperties.CHECK && changeCount < 0) {    throw DbException.throwInternalError("changeCount has wrapped");  }}  }
class C{  protected void createChildResources(IContainer parentHandle,IProgressMonitor monitor,int ticks) throws CoreException {  if (members != null && members.length > 0) {    for (int i=0; i < members.length; i++) {      members[i].parent=parentHandle;      members[i].createResource(new SubProgressMonitor(monitor,ticks / members.length));    }  }}  }
class C{  public boolean isVibrateHighlightEnabled(){  return preferences.getBoolean(resources.getString(R.string.key_vibrate_highlight),Boolean.parseBoolean(resources.getString(R.string.default_vibrate_highlight)));}  }
class C{  private static boolean matches(Type from,Type to,Map<String,Type> typeMap){  return to.equals(from) || (from instanceof TypeVariable && to.equals(typeMap.get(((TypeVariable<?>)from).getName())));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  int childLength;  java.util.List result=new java.util.ArrayList();  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(30,5);  childData=child.getData();  assertEquals("data","1230 North Ave. Dallas, Texas ",childData);  childLength=(int)child.getLength();  assertEquals("length",30,childLength);}  }
class C{  @Override public void executeAction(Agent agent,Action action){  if (action == EightPuzzleBoard.UP)   board.moveGapUp(); else   if (action == EightPuzzleBoard.DOWN)   board.moveGapDown(); else   if (action == EightPuzzleBoard.LEFT)   board.moveGapLeft(); else   if (action == EightPuzzleBoard.RIGHT)   board.moveGapRight();  if (agent == null)   updateEnvironmentViewsAgentActed(agent,action);}  }
class C{  public static boolean equals(int[] array1,int[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public void init(int index,String text){  mIndex=index;  mTextView.setText(text);}  }
class C{  @Override public int compare(MovePath mp1,MovePath mp2){  if (!(mp1.getEntity() instanceof Aero)) {    throw new IllegalArgumentException("wanted aero got:" + mp1.getClass().toString());  }  int dHT=mp1.getHexesMoved() - mp2.getHexesMoved();  if (dHT != 0) {    return dHT;  }  int dMP=mp1.getMpUsed() - mp2.getMpUsed();  if (dMP != 0) {    return dMP;  }  MoveStep lms1=mp1.getLastStep(), lms2=mp2.getLastStep();  int hs1=lms1 == null ? 0 : lms1.getNStraight();  int hs2=lms2 == null ? 0 : lms2.getNStraight();  int dHS=hs1 - hs2;  return -dHS;}  }
class C{  private JFreeChart createChart(final CategoryDataset dataset){  final JFreeChart chart=ChartFactory.createStackedBarChart("Stacked Bar Chart Demo 4","Category","Value",dataset,PlotOrientation.VERTICAL,true,true,false);  BarRenderer.setDefaultBarPainter(new StandardBarPainter());  GroupedStackedBarRenderer renderer=new GroupedStackedBarRenderer();  KeyToGroupMap map=new KeyToGroupMap("G1");  map.mapKeyToGroup("Product 1 (US)","G1");  map.mapKeyToGroup("Product 1 (Europe)","G1");  map.mapKeyToGroup("Product 1 (Asia)","G1");  map.mapKeyToGroup("Product 1 (Middle East)","G1");  map.mapKeyToGroup("Product 2 (US)","G2");  map.mapKeyToGroup("Product 2 (Europe)","G2");  map.mapKeyToGroup("Product 2 (Asia)","G2");  map.mapKeyToGroup("Product 2 (Middle East)","G2");  map.mapKeyToGroup("Product 3 (US)","G3");  map.mapKeyToGroup("Product 3 (Europe)","G3");  map.mapKeyToGroup("Product 3 (Asia)","G3");  map.mapKeyToGroup("Product 3 (Middle East)","G3");  renderer.setSeriesToGroupMap(map);  renderer.setItemMargin(0.0);  Paint p1=new GradientPaint(0.0f,0.0f,new Color(0x22,0x22,0xFF),0.0f,0.0f,new Color(0x88,0x88,0xFF));  renderer.setSeriesPaint(0,p1);  renderer.setSeriesPaint(4,p1);  renderer.setSeriesPaint(8,p1);  Paint p2=new GradientPaint(0.0f,0.0f,new Color(0x22,0xFF,0x22),0.0f,0.0f,new Color(0x88,0xFF,0x88));  renderer.setSeriesPaint(1,p2);  renderer.setSeriesPaint(5,p2);  renderer.setSeriesPaint(9,p2);  Paint p3=new GradientPaint(0.0f,0.0f,new Color(0xFF,0x22,0x22),0.0f,0.0f,new Color(0xFF,0x88,0x88));  renderer.setSeriesPaint(2,p3);  renderer.setSeriesPaint(6,p3);  renderer.setSeriesPaint(10,p3);  Paint p4=new GradientPaint(0.0f,0.0f,new Color(0xFF,0xFF,0x22),0.0f,0.0f,new Color(0xFF,0xFF,0x88));  renderer.setSeriesPaint(3,p4);  renderer.setSeriesPaint(7,p4);  renderer.setSeriesPaint(11,p4);  renderer.setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.HORIZONTAL));  SubCategoryAxis domainAxis=new SubCategoryAxis("Product / Month");  domainAxis.setCategoryMargin(0.05);  domainAxis.addSubCategory("Product 1");  domainAxis.addSubCategory("Product 2");  domainAxis.addSubCategory("Product 3");  CategoryPlot plot=(CategoryPlot)chart.getPlot();  plot.setDomainAxis(domainAxis);  plot.setRenderer(renderer);  plot.setFixedLegendItems(createLegendItems());  return chart;}  }
class C{  public static void deleteGlobalEdgeComment(final AbstractSQLProvider provider,final INaviEdge edge,final Integer commentId,final Integer userId) throws CouldntDeleteException {  Preconditions.checkNotNull(provider,"IE00505: provider argument can not be null");  Preconditions.checkNotNull(edge,"IE00506: codeNode argument can not be null");  Preconditions.checkNotNull(commentId,"IE00507: comment argument can not be null");  Preconditions.checkNotNull(userId,"IE00508: userId argument can not be null");  final String function=" { ? = call delete_global_edge_comment(?, ?, ?, ?, ?, ?) } ";  try {    final CallableStatement deleteCommentFunction=provider.getConnection().getConnection().prepareCall(function);    try {      deleteCommentFunction.registerOutParameter(1,Types.INTEGER);      deleteCommentFunction.setInt(2,getModuleId(edge.getSource()));      deleteCommentFunction.setInt(3,getModuleId(edge.getTarget()));      deleteCommentFunction.setObject(4,((INaviCodeNode)edge.getSource()).getAddress().toBigInteger(),Types.BIGINT);      deleteCommentFunction.setObject(5,((INaviCodeNode)edge.getTarget()).getAddress().toBigInteger(),Types.BIGINT);      deleteCommentFunction.setInt(6,commentId);      deleteCommentFunction.setInt(7,userId);      deleteCommentFunction.execute();      deleteCommentFunction.getInt(1);      if (deleteCommentFunction.wasNull()) {        throw new IllegalArgumentException("Error: the comment id returned from the database was null");      }    }  finally {      deleteCommentFunction.close();    }  } catch (  SQLException|MaybeNullException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  private Class primitiveType(char type){switch (type) {case 'B':    return byte.class;case 'C':  return char.class;case 'D':return double.class;case 'F':return float.class;case 'I':return int.class;case 'J':return long.class;case 'S':return short.class;case 'Z':return boolean.class;default :return null;}}  }
class C{  public static void close(OutputStream out){  try {    if (out != null) {      out.close();    }  } catch (  IOException ioE) {  }}  }
class C{  public DigestException(){  super();}  }
class C{  @Override protected void doAction(){  saveKeyStoreAs(kseFrame.getActiveKeyStoreHistory());}  }
class C{  public static void handleHeaderView(DrawerBuilder drawer){  if (drawer.mAccountHeader != null) {    if (drawer.mAccountHeaderSticky) {      drawer.mStickyHeaderView=drawer.mAccountHeader.getView();    } else {      drawer.mHeaderView=drawer.mAccountHeader.getView();      drawer.mHeaderDivider=drawer.mAccountHeader.mAccountHeaderBuilder.mDividerBelowHeader;      drawer.mHeaderPadding=drawer.mAccountHeader.mAccountHeaderBuilder.mPaddingBelowHeader;    }  }  if (drawer.mStickyHeaderView != null) {    RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);    layoutParams.addRule(RelativeLayout.ALIGN_PARENT_TOP,1);    drawer.mStickyHeaderView.setId(R.id.material_drawer_sticky_header);    drawer.mSliderLayout.addView(drawer.mStickyHeaderView,0,layoutParams);    RelativeLayout.LayoutParams layoutParamsListView=(RelativeLayout.LayoutParams)drawer.mRecyclerView.getLayoutParams();    layoutParamsListView.addRule(RelativeLayout.BELOW,R.id.material_drawer_sticky_header);    drawer.mRecyclerView.setLayoutParams(layoutParamsListView);    drawer.mStickyHeaderView.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(drawer.mActivity,R.attr.material_drawer_background,R.color.material_drawer_background));    if (Build.VERSION.SDK_INT >= 21) {      drawer.mStickyHeaderView.setElevation(UIUtils.convertDpToPixel(4,drawer.mActivity));    } else {      View view=new View(drawer.mActivity);      view.setBackgroundResource(R.drawable.material_drawer_shadow_bottom);      drawer.mSliderLayout.addView(view,RelativeLayout.LayoutParams.MATCH_PARENT,(int)UIUtils.convertDpToPixel(4,drawer.mActivity));      RelativeLayout.LayoutParams lps=(RelativeLayout.LayoutParams)view.getLayoutParams();      lps.addRule(RelativeLayout.BELOW,R.id.material_drawer_sticky_header);      view.setLayoutParams(lps);    }    drawer.mRecyclerView.setPadding(0,0,0,0);  }  if (drawer.mHeaderView != null) {    if (drawer.mRecyclerView == null) {      throw new RuntimeException("can't use a headerView without a recyclerView");    }    if (drawer.mHeaderPadding) {      drawer.getAdapter().addHeaderDrawerItems(new ContainerDrawerItem().withView(drawer.mHeaderView).withDivider(drawer.mHeaderDivider).withViewPosition(ContainerDrawerItem.Position.TOP));    } else {      drawer.getAdapter().addHeaderDrawerItems(new ContainerDrawerItem().withView(drawer.mHeaderView).withDivider(drawer.mHeaderDivider).withViewPosition(ContainerDrawerItem.Position.NONE));    }    drawer.mRecyclerView.setPadding(drawer.mRecyclerView.getPaddingLeft(),0,drawer.mRecyclerView.getPaddingRight(),drawer.mRecyclerView.getPaddingBottom());  }}  }
class C{  public static char toChar(byte[] bytes,int index){  return (char)((bytes[index + 1] << 8) | (bytes[index] & 0xff));}  }
class C{  @Override public String toString(){  return "WriteHallOfFamePointsCommand [playername=" + playername + ", fametype="+ fametype+ ", points="+ points+ ", add="+ add+ "]";}  }
class C{  private void doDelete(HttpServletRequest request,String distPrefId){  Transaction tx=null;  sessionContext.checkPermission(distPrefId,"DistributionPref",Right.ExaminationDistributionPreferenceDelete);  try {    DistributionPrefDAO dpDao=new DistributionPrefDAO();    org.hibernate.Session hibSession=dpDao.getSession();    tx=hibSession.getTransaction();    if (tx == null || !tx.isActive())     tx=hibSession.beginTransaction();    HashSet relatedExams=new HashSet();    DistributionPref dp=dpDao.get(new Long(distPrefId));    PreferenceGroup owner=(PreferenceGroup)dp.getOwner();    owner.getPreferences().remove(dp);    for (Iterator i=dp.getDistributionObjects().iterator(); i.hasNext(); ) {      DistributionObject dObj=(DistributionObject)i.next();      PreferenceGroup pg=dObj.getPrefGroup();      relatedExams.add(pg);      pg.getDistributionObjects().remove(dObj);      hibSession.saveOrUpdate(pg);    }    hibSession.delete(dp);    hibSession.saveOrUpdate(owner);    for (Iterator i=relatedExams.iterator(); i.hasNext(); ) {      Exam exam=(Exam)i.next();      ChangeLog.addChange(hibSession,sessionContext,exam,ChangeLog.Source.DIST_PREF_EDIT,ChangeLog.Operation.DELETE,exam.firstSubjectArea(),exam.firstDepartment());    }    if (tx != null && tx.isActive())     tx.commit();    hibSession.flush();    hibSession.refresh(owner);  } catch (  Exception e) {    Debug.error(e);    if (tx != null && tx.isActive())     tx.rollback();  }}  }
class C{  void startEventTracker(){  List<EventTrackingService> services=getEnabledServicesForType(EventTrackingService.class);  if (services != null && !services.isEmpty()) {    if (eventTracker == null) {      eventTracker=new EventTracker(context,services,foamApiKeys.wifiOnly());    }    if (!eventTracker.isRunning()) {      eventTracker.start();    }  }}  }
class C{  private CaseInsensitiveChar(String s){  this(s.charAt(0));}  }
class C{  @Override public void onUpdate(){  this.prevPosX=this.posX;  this.prevPosY=this.posY;  this.prevPosZ=this.posZ;  if (this.particleAge++ >= this.particleMaxAge) {    this.setDead();    return;  }}  }
class C{  protected void classSelected(String className){  try {    if ((m_Object != null) && m_Object.getClass().getName().equals(className)) {      return;    }    setValue(Class.forName(className).newInstance());    if (m_EditorComponent != null) {      m_EditorComponent.updateChildPropertySheet();    }  } catch (  Exception ex) {    JOptionPane.showMessageDialog(null,"Could not create an example of\n" + className + "\n"+ "from the current classpath","Class load failed",JOptionPane.ERROR_MESSAGE);    ex.printStackTrace();    try {      if (m_Backup != null) {        setValue(m_Backup);      } else {        setDefaultValue();      }    } catch (    Exception e) {      Logger.log(weka.core.logging.Logger.Level.WARNING,ex.getMessage());      ex.printStackTrace();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.367 -0500",hash_original_method="ABF18B5E6666C8F5D8A2BB5F41F5792B",hash_generated_method="1495D91B7F701DFBD52DE5E640C10B6D") public void close() throws IOException {synchronized (LocalSocketImpl.this) {    if (fd == null)     return;    close_native(fd);    fd=null;  }}  }
class C{  public static Literal scoreToLiteral(float score){  return valueFactory.createLiteral(score);}  }
class C{  public boolean hasData(final long start,final int length){  return m_memory.hasData(start,length);}  }
class C{  public ReadResponse clone(){  ReadResponse result=new ReadResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.Results=Results == null ? null : Results.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public boolean isAllIp(){  return allIp;}  }
class C{  public static void closeThisThingOrMaybeDont(@Nullable Closeable closeable){  if (closeable == null) {    log.d("Can't close closable, arg was null.");    return;  }  try {    closeable.close();  } catch (  IOException e) {    log.d("Couldn't close closable, but that's apparently OK.  Error was: " + e.getMessage());  }}  }
class C{  public ColladaNewParam(String ns){  super(ns);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.367 -0500",hash_original_method="4C95AA981C09EEAD5B31E73DC1384B23",hash_generated_method="0CBD12A7C2D2B9FCF5B8F24492EE6FAE") protected void reInit(){  if (stackLogger.isLoggingEnabled())   stackLogger.logDebug("Re-initializing !");  messageProcessors=new ArrayList<MessageProcessor>();  this.ioHandler=new IOHandler(this);  pendingTransactions=new ConcurrentHashMap<String,SIPServerTransaction>();  clientTransactionTable=new ConcurrentHashMap<String,SIPClientTransaction>();  serverTransactionTable=new ConcurrentHashMap<String,SIPServerTransaction>();  retransmissionAlertTransactions=new ConcurrentHashMap<String,SIPServerTransaction>();  mergeTable=new ConcurrentHashMap<String,SIPServerTransaction>();  this.dialogTable=new ConcurrentHashMap<String,SIPDialog>();  this.earlyDialogTable=new ConcurrentHashMap<String,SIPDialog>();  this.terminatedServerTransactionsPendingAck=new ConcurrentHashMap<String,SIPServerTransaction>();  this.forkedClientTransactionTable=new ConcurrentHashMap<String,SIPClientTransaction>();  this.timer=new Timer();  this.activeClientTransactionCount=new AtomicInteger(0);}  }
class C{  public int ff_alloc_picture(AVFrame pic,int shared){  int big_mb_num=this.mb_stride * (this.mb_height + 1) + 1;  int mb_array_size=this.mb_stride * this.mb_height;  int b4_array_size=this.b4_stride * this.mb_height * 4;  int i;  if (shared != 0) {    pic.type=FF_BUFFER_TYPE_SHARED;  } else {    if (alloc_frame_buffer(pic) < 0) {      return -1;    }    this.linesize=pic.linesize[0];    this.uvlinesize=pic.linesize[1];  }  if (pic.qscale_table == null) {    pic.mbskip_table=new int[mb_array_size + 2];    pic.qscale_table=new int[mb_array_size];    pic.mb_type_base=new long[(big_mb_num + this.mb_stride)];    pic.mb_type_offset=2 * this.mb_stride + 1;    if (this.out_format == FMT_H264) {      for (i=0; i < 2; i++) {        pic.motion_val_base[i]=new int[(b4_array_size + 4)][2];        pic.motion_val_offset[i]=4;        pic.ref_index[i]=new int[4 * mb_array_size];      }      pic.motion_subsample_log2=2;    }    pic.qstride=this.mb_stride;    pic.pan_scan=new AVPanScan();  }  for (int k=1; k < PREV_PICT_TYPES_BUFFER_SIZE; k++)   this.prev_pict_types[k]=this.prev_pict_types[k - 1];  this.prev_pict_types[0]=(this.dropable != 0) ? H264Context.FF_B_TYPE : this.pict_type;  if (pic.age < PREV_PICT_TYPES_BUFFER_SIZE && this.prev_pict_types[pic.age] == H264Context.FF_B_TYPE)   pic.age=Integer.MAX_VALUE;  return 0;}  }
class C{  public void reset(){  fCallHierarchy=null;  updateView();}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + n+ ","+ p+ ")";}  }
class C{  @Override public void configure(ClientDetailsServiceConfigurer clients) throws Exception {  clients.jdbc(dataSource).passwordEncoder(passwordEncoder).withClient("client").authorizedGrantTypes("authorization_code","client_credentials","refresh_token","password","implicit").authorities("ROLE_CLIENT").resourceIds("apis").scopes("read").secret("secret").accessTokenValiditySeconds(300);}  }
class C{  public boolean registerDisconnected(long platformIdent){  AgentStatusData agentStatusData=agentStatusDataMap.get(platformIdent);  if (null != agentStatusData) {    agentStatusData.setAgentConnection(AgentConnection.DISCONNECTED);    return true;  } else {    return false;  }}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  private static ArrayList<Seed> selectVerticalDHTPositions(final SeedDB seedDB,final byte[] wordhash,final int minage,final int redundancy,int verticalPosition){  ArrayList<Seed> seeds=new ArrayList<Seed>(redundancy);  final long dhtVerticalTarget=seedDB.scheme.verticalDHTPosition(wordhash,verticalPosition);  final byte[] verticalhash=Distribution.positionToHash(dhtVerticalTarget);  final Iterator<Seed> dhtEnum=getAcceptRemoteIndexSeeds(seedDB,verticalhash,redundancy,false);  int c=Math.min(seedDB.sizeConnected(),redundancy);  int cc=20;  while (dhtEnum.hasNext() && c > 0 && cc-- > 0) {    Seed seed=dhtEnum.next();    if (seed == null || seed.hash == null)     continue;    if (!seed.getFlagAcceptRemoteIndex())     continue;    if (seed.getAge() < minage)     continue;    if (RemoteSearch.log.isInfo())     RemoteSearch.log.info("selectPeers/DHTorder: " + seed.hash + ":"+ seed.getName()+ "/ score "+ c);    seeds.add(seed);    c--;  }  return seeds;}  }
class C{  public WikibasePoint northEast(){  return ne;}  }
class C{  Entry createSimpleEntry(User user,String note,Long createTime,String relatedId,TreeRelType relationship,boolean insertAboveParentsChildren,boolean insertAsFirstChild,boolean isPublic,boolean isAdmin,String type,Errors errors,Entry source){  return createEntry(user,null,type != null ? type : Constants.note,null,null,note,createTime,createTime,relatedId,relationship,insertAboveParentsChildren,insertAsFirstChild,false,false,false,isAdmin,errors);}  }
class C{  protected AnimatableBooleanValue(AnimationTarget target){  super(target);}  }
class C{  private List<String> slurmCommand(String slurmScript,String heronExec,long containers,String partition){  String nTasks=String.format("--ntasks=%d",containers);  List<String> slurmCmd;  if (partition != null) {    slurmCmd=new ArrayList<>(Arrays.asList("sbatch","-N",Long.toString(containers),nTasks,"-p",partition,slurmScript,heronExec));  } else {    slurmCmd=new ArrayList<>(Arrays.asList("sbatch","-N",Long.toString(containers),nTasks,slurmScript,heronExec));  }  return slurmCmd;}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    throw new SecurityException("Failed to seed OpenSSL PRNG",e);  }}  }
class C{  public Object removeMultiKey(Object key1,Object key2,Object key3,Object key4,Object key5){  int hashCode=hash(key1,key2,key3,key4,key5);  int index=map.hashIndex(hashCode,map.data.length);  AbstractHashedMap.HashEntry entry=map.data[index];  AbstractHashedMap.HashEntry previous=null;  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(entry,key1,key2,key3,key4,key5)) {      Object oldValue=entry.getValue();      map.removeMapping(entry,index,previous);      return oldValue;    }    previous=entry;    entry=entry.next;  }  return null;}  }
class C{  public Path scriptsFile(){  return scriptsFile;}  }
class C{  private void releasePort(){  if (mTemporaryConnection != null) {    try {      mTemporaryConnection.close();    } catch (    IOException e) {      mTemporaryConnection=null;    }  }}  }
class C{  public void testQuietlyInvoke(){  testQuietlyInvoke(mainPool());}  }
class C{  public ParameterAnnotationsAttribute(ConstPool cp,String attrname){  this(cp,attrname,new byte[]{0});}  }
class C{  private void fetch(boolean failOnEof) throws ParseException {  if (null != current) {    return;  }  List<Token<T>> filtered=null;  Token<T> t=null;  if (!eof) {    while (tstream.hasNext()) {      t=tstream.next();      if (tokenFilter.accept(t)) {        break;      }      if (null == filtered) {        filtered=new ArrayList<Token<T>>();      }      filtered.add(t);      t=null;    }  }  if (null == t) {    eof=true;    if (failOnEof) {      throw new ParseException(new Message(MessageType.END_OF_FILE,(null != inputRange ? this.inputRange : this.file)));    }    return;  }  TokenList<T> tl=new TokenList<T>();  tl.t=t;  tl.filteredTokens=null != filtered ? Collections.<Token<T>>unmodifiableList(filtered) : Collections.<Token<T>>emptyList();  current=tl;  if (null != prev) {    prev.next=tl;  }}  }
class C{  public boolean isAlt(){  return this.alt;}  }
class C{  public static int[] join(int[]... arrays){  if (arrays.length == 0) {    return EMPTY_INTS;  }  if (arrays.length == 1) {    return arrays[0];  }  if (arrays.length == 2) {    return join(arrays[0],arrays[1]);  }  int[] notNull=null;  int finalSize=0;  int nullArrays=0;  IntArrayList list=new IntArrayList(arrays.length * 10);  for (  int[] array : arrays) {    if ((array == null) || (array.length == 0)) {      nullArrays++;    } else {      notNull=array;      finalSize+=array.length;      list.addElements(list.size(),array);    }  }  if (nullArrays == arrays.length) {    return EMPTY_INTS;  }  if (nullArrays == (arrays.length - 1)) {    return notNull;  }  return list.toArray(new int[list.size()]);}  }
class C{  public HttpMon start(Object request,Object response){  return getMon(request,response).start();}  }
class C{  protected ActiveInfoStorageCalculatorViaMutualInfo(Class<MutualInfoCalculatorMultiVariate> miCalcClass) throws InstantiationException, IllegalAccessException {  MutualInfoCalculatorMultiVariate miCalc=miCalcClass.newInstance();  construct(miCalc);}  }
class C{  public boolean visitFunction(ExpressionOwner owner,Function func){  if ((func instanceof FuncPosition) || (func instanceof FuncLast))   m_hasPositionalPred=true;  return true;}  }
class C{  public EchoClientHandler(){}  }
class C{  static public boolean isSameHour(Timestamp one,Timestamp two){  GregorianCalendar calOne=new GregorianCalendar();  if (one != null)   calOne.setTimeInMillis(one.getTime());  GregorianCalendar calTwo=new GregorianCalendar();  if (two != null)   calTwo.setTimeInMillis(two.getTime());  if (calOne.get(Calendar.YEAR) == calTwo.get(Calendar.YEAR) && calOne.get(Calendar.MONTH) == calTwo.get(Calendar.MONTH) && calOne.get(Calendar.DAY_OF_MONTH) == calTwo.get(Calendar.DAY_OF_MONTH) && calOne.get(Calendar.HOUR_OF_DAY) == calTwo.get(Calendar.HOUR_OF_DAY))   return true;  return false;}  }
class C{  public static Type toType(String type) throws TransformerException {  if (type == null)   return OBJECT;  type=type.trim();  String lcType=StringUtil.toLowerCase(type);  char first=lcType.charAt(0);switch (first) {case 'a':    if ("any".equals(lcType))     return OBJECT;  if ("array".equals(lcType))   return ARRAY;break;case 'b':if ("base64".equals(lcType)) return STRING;if ("binary".equals(lcType)) return BYTE_VALUE_ARRAY;if ("bool".equals(lcType) || "boolean".equals(type)) return BOOLEAN_VALUE;if ("boolean".equals(lcType)) return BOOLEAN;if ("byte".equals(type)) return BYTE_VALUE;if ("byte".equals(lcType)) return BYTE;break;case 'c':if ("char".equals(lcType)) return CHAR;if ("character".equals(lcType)) return CHARACTER;if ("collection".equals(lcType)) return BYTE_VALUE_ARRAY;if ("component".equals(lcType)) return COMPONENT;if ("class".equals(lcType)) return COMPONENT;break;case 'd':if ("date".equals(lcType) || "datetime".equals(lcType)) return DATE_TIME;if ("decimal".equals(lcType)) return STRING;if ("double".equals(type)) return DOUBLE_VALUE;if ("double".equals(lcType)) return DOUBLE;break;case 'e':break;case 'f':if ("file".equals(lcType)) return FILE;if ("float".equals(type)) return FLOAT_VALUE;if ("float".equals(lcType)) return FLOAT;if ("function".equals(lcType)) return UDF;break;case 'i':if ("int".equals(lcType)) return INT_VALUE; else if ("integer".equals(lcType)) return INTEGER; else if ("image".equals(lcType)) return IMAGE;break;case 'j':if ("java.lang.boolean".equals(lcType)) return BOOLEAN;if ("java.lang.byte".equals(lcType)) return BYTE;if ("java.lang.character".equals(lcType)) return CHARACTER;if ("java.lang.short".equals(lcType)) return SHORT;if ("java.lang.integer".equals(lcType)) return INTEGER;if ("java.lang.long".equals(lcType)) return LONG;if ("java.lang.float".equals(lcType)) return FLOAT;if ("java.lang.double".equals(lcType)) return DOUBLE;if ("java.io.file".equals(lcType)) return FILE;if ("java.lang.string".equals(lcType)) return STRING;if ("java.lang.string[]".equals(lcType)) return STRING_ARRAY;if ("java.util.date".equals(lcType)) return DATE;if ("java.lang.object".equals(lcType)) return OBJECT;break;case 'l':if ("long".equals(type)) return LONG_VALUE;if ("long".equals(lcType)) return LONG;if ("locale".equals(lcType)) return LOCALE;break;case 'n':if ("node".equals(lcType)) return NODE;if ("number".equals(lcType)) return DOUBLE_VALUE;if ("numeric".equals(lcType)) return DOUBLE_VALUE;break;case 'o':if ("object".equals(lcType)) return OBJECT;break;case 'q':if ("query".equals(lcType)) return QUERY;if ("querycolumn".equals(lcType)) return QUERY_COLUMN;break;case 's':if ("string".equals(lcType)) return STRING;if ("struct".equals(lcType)) return STRUCT;if ("short".equals(type)) return SHORT_VALUE;if ("short".equals(lcType)) return SHORT;break;case 't':if ("timezone".equals(lcType)) return TIMEZONE;if ("timespan".equals(lcType)) return TIMESPAN;break;case 'u':if ("udf".equals(lcType)) return UDF;break;case 'v':if ("void".equals(lcType)) return VOID;if ("variablestring".equals(lcType)) return STRING;if ("variable_string".equals(lcType)) return STRING;break;case 'x':if ("xml".equals(lcType)) return NODE;break;case '[':if ("[Ljava.lang.String;".equals(lcType)) return STRING_ARRAY;break;}try {return Type.getType(ClassUtil.loadClass(type));} catch (ClassException e) {throw new TransformerException(e,null);}}  }
class C{  public boolean isEmpty(){  return indexedEvents.isEmpty();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.742 -0500",hash_original_method="26440EC338F5668042D20BF591B8B96C",hash_generated_method="2111DDCBAFE3A72FEA0F6335CF132654") public final synchronized boolean enqueueInternal(){  if (queue != null && queueNext == null) {    queue.enqueue(this);    queue=null;    return true;  }  return false;}  }
class C{  public int writeShort(int index,int s){  return this.writeUShort(index,s);}  }
class C{  public static double variance(double[] vector){  double sum=0, sumSquared=0;  if (vector.length <= 1) {    return 0;  }  for (  double element : vector) {    sum+=element;    sumSquared+=(element * element);  }  double result=(sumSquared - (sum * sum / vector.length)) / (vector.length - 1);  if (result < 0) {    return 0;  } else {    return result;  }}  }
class C{  public void initialize(){  registerGlobalErrorCallback();}  }
class C{  public static void traceThrowable(Throwable e){  PrintWriter writer=DriverManager.getLogWriter();  if (writer != null) {    e.printStackTrace(writer);  }}  }
class C{  protected void attachManagedResource(ManagedResource res,String path,Router router){  router.attach(path,res.getServerResourceClass());  log.info("Attached managed resource at path: {}",path);  if (ManagedResource.ChildResourceSupport.class.isAssignableFrom(res.getClass())) {    router.attach(path + "/{child}",res.getServerResourceClass());  }}  }
class C{  @Override public void collectStatisticsInformation(AccessProfile accessProfile) throws BaseCollectionException {  initializeContext(accessProfile);  _statsCollector.collect(accessProfile,_keyMap);  dumpStatRecords();  injectStats();}  }
class C{  public Workflow.Method zoneExportMasksCreateMethod(URI exportGroupURI,List<URI> exportMaskURIs,Collection<URI> volumeURIs){  return new Workflow.Method("zoneExportMasksCreate",exportGroupURI,exportMaskURIs,volumeURIs);}  }
class C{  public BaseDateTime(DateTimeZone zone){  this(DateTimeUtils.currentTimeMillis(),ISOChronology.getInstance(zone));}  }
class C{  public static void testPrim2Ref(){  for (  Wrapper from : Wrapper.values()) {    for (    Wrapper to : Wrapper.values()) {      if (from == Wrapper.VOID || from == Wrapper.OBJECT || to == Wrapper.VOID || to == Wrapper.OBJECT) {        continue;      }      Object value=RANDOM_VALUES.get(from);      for (      TestConversionMode mode : TestConversionMode.values()) {        if (from == to) {          testConversion(mode,from.primitiveType(),to.wrapperType(),value,value,false,null);        } else {          testConversion(mode,from.primitiveType(),to.wrapperType(),value,null,true,ClassCastException.class);        }        if (from != Wrapper.BOOLEAN && from != Wrapper.CHAR) {          testConversion(mode,from.primitiveType(),Number.class,value,value,false,null);        } else {          testConversion(mode,from.primitiveType(),Number.class,value,null,true,ClassCastException.class);        }        testConversion(mode,from.primitiveType(),Object.class,value,value,false,null);      }    }  }}  }
class C{  protected void drawAxes(DrawingContext context){  for (  Drawable d : axisDrawables.values()) {    if (d != null) {      d.draw(context);    }  }}  }
class C{  public void addNavigationCase(NavigationCase navigationCase){  String fromViewId=navigationCase.getFromViewId();  Set<NavigationCase> caseSet=navigationMap.get(fromViewId);  if (caseSet == null) {    caseSet=new LinkedHashSet<>();    caseSet.add(navigationCase);    navigationMap.put(fromViewId,caseSet);  } else {    caseSet.add(navigationCase);  }}  }
class C{  @POST @Path("/validate-password-change") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response validateUserPasswordForChange(@Context HttpServletRequest httpRequest,PasswordChangeParam passwordParam){  String clientIP=_invLoginManager.getClientIP(httpRequest);  isClientIPBlocked(clientIP);  Response response=_passwordUtils.changePassword(passwordParam,true);  return response;}  }
class C{  public void applyPattern(String pattern){  this.pattern=pattern;  if (patternTokens != null) {    patternTokens.clear();    patternTokens=null;  }}  }
class C{  public void checkAndInitVolume(String volumeId){  ScVolume volume=getVolume(volumeId);  if (volume == null) {    return;  }  if (volume.active && volume.replayAllowed) {    return;  }  ScServer[] servers=getServerDefinitions(volume.scSerialNumber);  for (  ScServer server : servers) {    if (!"down".equalsIgnoreCase(server.status)) {      try {        ScMappingProfile mapping=createVolumeMappingProfile(volume.instanceId,server.instanceId,-1,new String[0],-1,null);        deleteMappingProfile(mapping.instanceId);        break;      } catch (      StorageCenterAPIException e) {        LOG.debug("Failed to activate volume to server {}.",server.instanceId);      }    }  }}  }
class C{  private BigDecimal pow(double base,int expornent){  BigDecimal value;  if (expornent > 0) {    value=new BigDecimal(new Double(base).toString()).pow(expornent);  } else {    value=BigDecimal.ONE.divide(new BigDecimal(new Double(base).toString()).pow(-expornent));  }  return value;}  }
class C{  public void generateRandomNetworkStructure(int nNodes,int nArcs) throws Exception {  if (nArcs < nNodes - 1) {    throw new Exception("Number of arcs should be at least (nNodes - 1) = " + (nNodes - 1) + " instead of "+ nArcs);  }  if (nArcs > nNodes * (nNodes - 1) / 2) {    throw new Exception("Number of arcs should be at most nNodes * (nNodes - 1) / 2 = " + (nNodes * (nNodes - 1) / 2) + " instead of "+ nArcs);  }  if (nArcs == 0) {    return;  }  generateTree(nNodes);  for (int iArc=nNodes - 1; iArc < nArcs; iArc++) {    boolean bDone=false;    while (!bDone) {      int nNode1=random.nextInt(nNodes);      int nNode2=random.nextInt(nNodes);      if (nNode1 == nNode2) {        nNode2=(nNode1 + 1) % nNodes;      }      if (nNode2 < nNode1) {        int h=nNode1;        nNode1=nNode2;        nNode2=h;      }      if (!m_ParentSets[nNode2].contains(nNode1)) {        m_ParentSets[nNode2].addParent(nNode1,m_Instances);        bDone=true;      }    }  }}  }
class C{  public Reference(String className,String factory,String factoryLocation){  this(className);  classFactory=factory;  classFactoryLocation=factoryLocation;}  }
class C{  public static AC parseColumnConstraints(String s){  return parseAxisConstraint(s,true);}  }
class C{  private synchronized boolean applyCacheLimit(long extra,long owner){  long limit=maxCacheSize - extra;  if (limit < 0) {    limit=0;  }  long cacheSize=cacheSizeBytes();  while (cacheSize > limit && !list.isEmpty()) {    CacheElement ce=list.getLast();    if (ce.owner == owner && owner != 0) {      Log.d("LRUMapTileCache","cache too small, failing");      return false;    }    Bitmap b=remove(ce.key);    if (b != null && !b.isRecycled() && ce.recycleable) {      cacheSize-=b.getRowBytes() * b.getHeight();      b.recycle();    }  }  return true;}  }
class C{  public static String ptb2Text(String ptbText){  StringBuffer sb=new StringBuffer(ptbText.length());  PTB2TextLexer lexer=new PTB2TextLexer(new StringReader(ptbText));  String token;  try {    while ((token=lexer.next()) != null)     sb.append(token);  } catch (  IOException e) {    e.printStackTrace();  }  return (sb.toString());}  }
class C{  public void count(String form,String tag){  TreeMap<String,Integer> counts=table.get(form);  if (counts == null) {    counts=new TreeMap<String,Integer>();    table.put(form,counts);  }  String l=tag;  Integer count=counts.get(l);  if (count == null)   count=0;  counts.put(l,count + 1);}  }
class C{  public static double compareWithProjection(Vector testVector,ArrayList<Vector> vectors){  float score=0;  for (int i=0; i < vectors.size(); ++i) {    score+=testVector.measureOverlap(vectors.get(i));  }  return (float)(score);}  }
class C{  public SerialNode(int address,int type){  setNodeAddress(address);  setNodeType(type);  for (int i=0; i < MAXSENSORS + 1; i++) {    sensorArray[i]=null;    sensorLastSetting[i]=Sensor.UNKNOWN;    sensorTempSetting[i]=Sensor.UNKNOWN;  }  for (int i=0; i < 256; i++) {    outputArray[i]=0;    outputByteChanged[i]=false;  }  setMustSend();  hasActiveSensors=false;  SerialTrafficController.instance().registerNode(this);}  }
class C{  final DialogOption showYesNoCancelMessage(String message,IntSetting defValue){  DialogOption ret=DialogOption.parseInt(defValue.getValue());  if (ret == DialogOption.YES || ret == DialogOption.NO)   return ret;  int option;  try {    option=JOptionPane.showConfirmDialog(getParentComponent(),alwaysUseThisAnswerLabel(message,defValue),I18n.tr("Message"),JOptionPane.YES_NO_CANCEL_OPTION);  } catch (  ArrayIndexOutOfBoundsException aioobe) {    option=JOptionPane.CANCEL_OPTION;  }catch (  InternalError ie) {    option=JOptionPane.CANCEL_OPTION;  }  if (option == JOptionPane.YES_OPTION)   ret=DialogOption.YES; else   if (option == JOptionPane.NO_OPTION)   ret=DialogOption.NO; else   ret=DialogOption.CANCEL;  if (defValue.getValue() == REMEMBER_ANSWER && ret != DialogOption.CANCEL)   defValue.setValue(ret.toInt()); else   defValue.setValue(FORGET_ANSWER);  return ret;}  }
class C{  public static String cutToIndexOf(String string,char c){  int i=string.indexOf(c);  if (i != -1) {    string=string.substring(0,i);  }  return string;}  }
class C{  private static final String[] split(String path,String pat){  ArrayList<String> comps=new ArrayList<String>();  int pos=path.indexOf(pat);  int start=0;  while (pos >= 0) {    if (pos > start) {      String comp=path.substring(start,pos);      comps.add(comp);    }    start=pos + pat.length();    pos=path.indexOf(pat,start);  }  if (start < path.length()) {    comps.add(path.substring(start));  }  String[] result=new String[comps.size()];  for (int i=0; i < comps.size(); i++) {    result[i]=comps.get(i);  }  return result;}  }
class C{  public boolean checkLunExists(String lunId){  _url=URL_LUNS;  String filter=null;  if (_client.isUnity()) {    filter=VNXeConstants.ID_FILTER + "\"" + lunId+ "\"";  } else {    filter=VNXeConstants.ID_FILTER + lunId;  }  setFilter(filter);  boolean found=false;  List<VNXeLun> luns=getDataForObjects(VNXeLun.class);  if (luns != null && !luns.isEmpty()) {    found=true;  }  return found;}  }
class C{  public boolean savedPatternExists(){  return sHaveNonZeroPatternFile.get();}  }
class C{  AppletViewerPanel(URL documentURL,Hashtable atts){  this.documentURL=documentURL;  this.atts=atts;  String att=getParameter("codebase");  if (att != null) {    if (!att.endsWith("/")) {      att+="/";    }    try {      baseURL=new URL(documentURL,att);    } catch (    MalformedURLException e) {    }  }  if (baseURL == null) {    String file=documentURL.getFile();    int i=file.lastIndexOf('/');    if (i >= 0 && i < file.length() - 1) {      try {        baseURL=new URL(documentURL,file.substring(0,i + 1));      } catch (      MalformedURLException e) {      }    }  }  if (baseURL == null)   baseURL=documentURL;}  }
class C{  protected ASN1TypeCollection(int tagNumber,ASN1Type[] type){  super(tagNumber);  this.type=type;  this.OPTIONAL=new boolean[type.length];  this.DEFAULT=new Object[type.length];}  }
class C{  public static int indexOfThatIgnoresCase(List<String> list,String s){  for (int i=0; i < list.size(); i++) {    if (s.equalsIgnoreCase(list.get(i))) {      return i;    }  }  return -1;}  }
class C{  private CoderResult(int type,int length){  this.type=type;  this.length=length;}  }
class C{  public void run(Integer... expectedCodes){  for (  VCardVersion version : versions) {    List<Warning> warnings=property.validate(version,vcard);    boolean passed=checkCodes(warnings,expectedCodes);    if (!passed) {      fail("For version " + version + ", expected codes were "+ Arrays.toString(expectedCodes)+ " but were actually:\n"+ warnings);    }  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (derivedFeatureID) {case RegularExpressionPackage.IDENTITY_ESCAPE_SEQUENCE__CHARACTER:    return RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static void handlePreference(String where,String key,String value,boolean add){  SharedPreferences prefs=mContext.getSharedPreferences(where,Context.MODE_PRIVATE);  Editor editor=prefs.edit();  if (!add) {    Log.i("OUT","Removing " + key);    editor.remove(key);  } else {    Log.i("OUT","Putting favorite " + key);    editor.putString(key,value);  }  editor.commit();}  }
class C{  public void resetState(){  rwLock.readLock().lock();  ServiceInstance<ModelEndpoint> ep=null;  try {    for (    Map.Entry<String,ServiceInstance<ModelEndpoint>> kv : containerToEndpoint.entrySet()) {      ep=kv.getValue();      serviceDiscovery.unregisterService(ep);    }  } catch (  Exception e) {    LOG.error("Unable to unregister endpoint " + ep.getPayload(),e);  } finally {    rwLock.readLock().unlock();  }}  }
class C{  public float max(int dim){  return minMax[dim + dim + 1];}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  float x=event.getX();  float y=event.getY();  float normalizedX=(event.getX() / (float)mRenderer.getWidthScreen()) * 2 - 1;  float normalizedY=-((event.getY() / (float)mRenderer.getHeightScreen()) * 2 - 1);switch (event.getAction() & MotionEvent.ACTION_MASK) {case MotionEvent.ACTION_POINTER_DOWN:    if (mMovementMode != TRANSLATION_MODE)     if (event.getPointerCount() >= 2) {      mMovementMode=TRANSLATION_MODE;      pinchStartDistance=getPinchDistance(event);      pinchStartY=mRenderer.getCameraPosY();      pinchStartZ=mRenderer.getCameraPosZ();      if (mObjectPressed != -1) {        pinchStartFactorX=mDataList.get(mObjectPressed).getLastScaleFactorX();        pinchStartFactorY=mDataList.get(mObjectPressed).getLastScaleFactorY();        pinchStartFactorZ=mDataList.get(mObjectPressed).getLastScaleFactorZ();      }      if (pinchStartDistance > 0f) {        getPinchCenterPoint(event,pinchStartPoint);        mPreviousX=pinchStartPoint.x;        mPreviousY=pinchStartPoint.y;        touchMode=TOUCH_ZOOM;      }    }  break;case MotionEvent.ACTION_DOWN:mPreviousX=event.getX();mPreviousY=event.getY();mPreviousDragX=mPreviousX;mPreviousDragY=mPreviousY;if (mMode != ViewerMainFragment.PRINT_PREVIEW) {if (touchMode == TOUCH_NONE && event.getPointerCount() == 1) {int objPressed=mRenderer.objectPressed(normalizedX,normalizedY);if (objPressed != -1 && isStl()) {mEdition=true;mObjectPressed=objPressed;ViewerMainFragment.showActionModePopUpWindow();ViewerMainFragment.displayModelSize(mObjectPressed);Geometry.Point p=mDataList.get(mObjectPressed).getLastCenter();while (!mRenderer.restoreInitialCameraPosition(p.x,p.y,true,false)) {requestRender();};} else {ViewerMainFragment.hideActionModePopUpWindow();ViewerMainFragment.hideCurrentActionPopUpWindow();}}if (mDoubleTapFirstTouch && (System.currentTimeMillis() - mDoubleTapCurrentTime) <= DOUBLE_TAP_MAX_TIME) {mDoubleTapFirstTouch=false;while (!mRenderer.restoreInitialCameraPosition(0,0,false,true)) {requestRender();};} else {mDoubleTapFirstTouch=true;mDoubleTapCurrentTime=System.currentTimeMillis();}}touchMode=TOUCH_DRAG;break;case MotionEvent.ACTION_MOVE:if (touchMode == TOUCH_ZOOM && pinchStartDistance > 0f) {pinchScale=getPinchDistance(event) / pinchStartDistance;PointF pt=new PointF();getPinchCenterPoint(event,pt);mPreviousX=pt.x;mPreviousY=pt.y;if (mEdition && mEditionMode == SCALED_EDITION_MODE) {float fx=pinchStartFactorX * pinchScale;float fy=pinchStartFactorY * pinchScale;float fz=pinchStartFactorZ * pinchScale;Log.i("Scale","Scale touch @" + fx + ";"+ fy+ ";"+ fz);mRenderer.scaleObject(fx,fy,fz,false);ViewerMainFragment.displayModelSize(mObjectPressed);} else {if ((mRenderer.getCameraPosY() < MIN_ZOOM) && (pinchScale < 1.0)) {} else if ((mRenderer.getCameraPosY() > MAX_ZOOM) && (pinchScale > 1.0)) {} else {mRenderer.setCameraPosY(pinchStartY / pinchScale);mRenderer.setCameraPosZ(pinchStartZ / pinchScale);}requestRender();}}if (touchMode != TOUCH_NONE) if (pinchScale < 1.5f) {float dx=x - mPreviousDragX;float dy=y - mPreviousDragY;mPreviousDragX=x;mPreviousDragY=y;if (mEdition && mEditionMode == MOVE_EDITION_MODE) {mRenderer.dragObject(normalizedX,normalizedY);} else if (!mEdition) dragAccordingToMode(dx,dy);}requestRender();break;case MotionEvent.ACTION_UP:mMovementMode=ROTATION_MODE;case MotionEvent.ACTION_POINTER_UP:if (touchMode == TOUCH_ZOOM) {pinchScale=1.0f;pinchStartPoint.x=0.0f;pinchStartPoint.y=0.0f;}if (mEdition) {mRenderer.changeTouchedState();Log.i("Slicer","Callback from surface");ViewerMainFragment.slicingCallback();}touchMode=TOUCH_NONE;requestRender();break;}return true;}  }
class C{  public Boolean isIsInherited(){  return isInherited;}  }
class C{  public FilterParamIndexBooleanExpr(ReadWriteLock readWriteLock){  super(FilterOperator.BOOLEAN_EXPRESSION);  evaluatorsMap=new LinkedHashMap<ExprNodeAdapterBase,EventEvaluator>();  constantsMapRWLock=readWriteLock;}  }
class C{  public DockerMachineSource(String repository){  super();  this.repository=repository;  setType(DOCKER_IMAGE_TYPE);}  }
class C{  @Deprecated public Set<Map.Entry<Long,V>> entrySet(){  HashSet<Map.Entry<Long,V>> set=new HashSet<Map.Entry<Long,V>>();  for (  long key : keySet()) {    set.add(new Entry(key,get(key)));  }  return set;}  }
class C{  public void bufferSkip(int doc,int numDocs,long posFP,long payFP,int posBufferUpto,int payloadByteUpto) throws IOException {  initSkip();  this.curDoc=doc;  this.curDocPointer=docOut.getFilePointer();  this.curPosPointer=posFP;  this.curPayPointer=payFP;  this.curPosBufferUpto=posBufferUpto;  this.curPayloadByteUpto=payloadByteUpto;  bufferSkip(numDocs);}  }
class C{  public boolean reportDeprecated(Environment env){  return (isDeprecated() || (outerClass != null && outerClass.reportDeprecated(env)));}  }
class C{  public static boolean canBeRandomized(Class clazz){  return ClassUtils.isPrimitiveOrWrapper(clazz) || clazz.equals(String.class) || clazz.equals(IDiscordClient.class);}  }
class C{  private void checkWrittenXmlStream(Object data,String contextURL,String expectedEntityPath,boolean isWriteOperation) throws ODataRenderException, IOException, TransformerException {  checkWrittenXmlStream(data,null,contextURL,expectedEntityPath,isWriteOperation);}  }
class C{  public void addPrimer(String moduleFilename,String extendedModuleName){  tlaBuffer.append(ResourceHelper.getExtendingModuleContent(moduleFilename,extendedModuleName));}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String qualifiedName;  java.util.List qualifiedNames=new java.util.ArrayList();  qualifiedNames.add("/");  qualifiedNames.add("//");  qualifiedNames.add("\\");  qualifiedNames.add(";");  qualifiedNames.add("&");  qualifiedNames.add("*");  qualifiedNames.add("]]");  qualifiedNames.add(">");  qualifiedNames.add("<");  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test/L2","dom:elem");  for (int indexN10058=0; indexN10058 < qualifiedNames.size(); indexN10058++) {    qualifiedName=(String)qualifiedNames.get(indexN10058);{      boolean success=false;      try {        element.setAttributeNS("http://www.w3.org/DOM/Test/L2",qualifiedName,"test");      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("elementsetattributens04",success);    }  }}  }
class C{  public static double betaIncReg(double x,double a,double b){  if (a <= 0 || b <= 0)   throw new ArithmeticException("a and b must be > 0, not" + a + ", and "+ b);  if (x == 0 || x == 1)   return x; else   if (x < 0 || x > 1)   throw new ArithmeticException("x must be in the range [0,1], not " + x);  if (x > (a + 1) / (a + b + 2) || (1 - x) < (b + 1) / (a + b + 2))   return 1 - betaIncReg(1 - x,b,a);  double numer=a * log(x) + b * log(1 - x) - (log(a) + lnBeta(a,b));  return exp(numer) / regIncBeta.lentz(x,a,b);}  }
class C{  public void stop(){  for (  Sensor sensor : sensorList) {    sensorManager.unregisterListener(this,sensor);  }}  }
class C{  private void runRegression(){  runner.execute();  Graph graph=runner.getOutGraph();  GraphUtils.circleLayout(graph,200,200,150);  GraphUtils.fruchtermanReingoldLayout(graph);  workbench.setGraph(graph);  RegressionResult report=runner.getResult();  reportText.setText(report.toString());  textWithTable.removeAll();  textWithTable.setLayout(new BorderLayout());  textWithTable.add(TextWithTable.component(report.getPreamble(),report.getResultsTable()));  textWithTable.revalidate();  textWithTable.repaint();}  }
class C{  public static Map<Id<Cordon>,Cordon> openShapefile(String shapefile,Network network){  Map<Id<Cordon>,Cordon> result=Cordon.openShapefile(shapefile);  for (  Cordon c : result.values()) {    c.loadLinksFromNetwork(network);  }  return result;}  }
class C{  public Constraints(Anchor anchor,String relativeId){  myAnchor=anchor;  this.relativeId=relativeId;}  }
class C{  @SuppressWarnings({"rawtypes"}) public synchronized List search(CriteriaQuery criteria,int page,int max){  return new ArrayList<Vertex>();}  }
class C{  protected static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public EventEntry addTime(When time){  super.addElement(When.KEY,time);  return this;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 > z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 > constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 > constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static void saveToDisk(VCard vcard,String filename,String path,Context context){  if (vcard == null || TextUtils.isEmpty(filename) || context == null) {    return;  }  File peerProfilesFile=new File(path);  if (!peerProfilesFile.exists()) {    peerProfilesFile.mkdirs();  }  File file=new File(path + File.separator + filename);  try {    VCardWriter writer=new VCardWriter(file,VCardVersion.V2_1);    writer.getRawWriter().getFoldedLineWriter().setLineLength(null);    writer.getRawWriter().getFoldedLineWriter().setNewline("\n");    writer.write(vcard);    writer.close();  } catch (  Exception e) {    Log.e(TAG,"Error while saving VCard to disk",e);  }}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.err.println("Usage: java javassist.tools.framedump <fully-qualified class name>");    return;  }  ClassPool pool=ClassPool.getDefault();  CtClass clazz=pool.get(args[0]);  System.out.println("Frame Dump of " + clazz.getName() + ":");  FramePrinter.print(clazz,System.out);}  }
class C{  @Override public boolean equals(Object other){  return (other instanceof ObjectValue && value.equals(((ObjectValue)other).value));}  }
class C{  public final static boolean isJavaLikeFileName(String name){  if (name == null)   return false;  return indexOfJavaLikeExtension(name) != -1;}  }
class C{  private String createString(String f){  StringBuilder sb=new StringBuilder();  sb.append("addressMode=" + "(" + CUaddress_mode.stringFor(addressMode[0]) + ","+ CUaddress_mode.stringFor(addressMode[1])+ ","+ CUaddress_mode.stringFor(addressMode[2])+ ")"+ f);  sb.append("filterMode=" + CUfilter_mode.stringFor(filterMode) + f);  String flagsString="";  if ((flags & JCudaDriver.CU_TRSF_READ_AS_INTEGER) != 0) {    flagsString+="CU_TRSF_READ_AS_INTEGER";  }  if ((flags & JCudaDriver.CU_TRSF_NORMALIZED_COORDINATES) != 0) {    flagsString+="CU_TRSF_NORMALIZED_COORDINATES";  }  sb.append("flags=" + flags + "("+ flagsString+ ")");  sb.append("maxAnisotropy=" + maxAnisotropy);  sb.append("mipmapFilterMode=" + CUfilter_mode.stringFor(mipmapFilterMode) + f);  sb.append("mipmapLevelBias=" + mipmapLevelBias + f);  sb.append("minMipmapLevelClamp=" + minMipmapLevelClamp + f);  sb.append("maxMipmapLevelClamp=" + maxMipmapLevelClamp + f);  sb.append("borderColor=" + Arrays.toString(borderColor) + f);  return sb.toString();}  }
class C{  public boolean removeSpring(VerletSpring3D s){  return springs.remove(s);}  }
class C{  public boolean isAlwaysStore(){  return alwaysStore;}  }
class C{  @Override public void close() throws IOException {  nioFile.close();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  MetadataImpl(Schema schema,Transform transform,ElementKey<?,?> parent,MetadataKey<D> key,MetadataContext context){  this.schema=Preconditions.checkNotNull(schema,"schema");  this.key=Preconditions.checkNotNull(key,"key");  this.parent=parent;  this.context=context;  transform=AttributeTransform.mergeSource(schema,transform,context);  this.name=firstNonNull(transform.getName(),key.getId());  this.isRequired=firstNonNull(transform.getRequired(),false);  Path path=transform.getPath();  if (transform.isMoved()) {    this.isVisible=false;  } else   if (path != null) {    this.isVisible=isVisible(path,schema,parent,context);  } else {    this.isVisible=firstNonNull(transform.getVisible(),true);  }  this.virtualValue=transform.getVirtualValue();}  }
class C{  public DrawerBuilder withDrawerWidthDp(int drawerWidthDp){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  this.mDrawerWidth=Utils.convertDpToPx(mActivity,drawerWidthDp);  return this;}  }
class C{  @Override public String[] indices(){  return indices;}  }
class C{  protected <V>V awaitResult(ListenableFuture<V> future,int time,TimeUnit unit){  try {    return future.get(time,unit);  } catch (  ExecutionException e) {    LOG.log(Level.WARNING,"Exception processing future: " + e.getMessage());    future.cancel(true);    return null;  }catch (  InterruptedException|TimeoutException e) {    LOG.log(Level.SEVERE,"Exception processing future ",e);    future.cancel(true);    return null;  }}  }
class C{  @RequestMapping(value="/SAML2/SSO",method=RequestMethod.GET,params=Shared.PASSWORD_ENTRY) public String ssoDefaultTenantPasswordEntry(Locale locale,Model model,HttpServletRequest request,HttpServletResponse response) throws IOException {  logger.info("Welcome to SP-initiated AuthnRequest handler, PASSWORD entry form! " + "The client locale is " + locale.toString() + ", DEFAULT tenant");  return ssoPasswordEntry(locale,Shared.getDefaultTenant(),model,request,response);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private void handleLoggerUnavailable(IMessageInstance mi) throws AdeFlowException, AdeException {  if (LinuxSyslogLineParser.isSyslogNgRestarted(mi)) {    incomingSeparator(new FileSeperator(mi.getSourceId(),"syslog-ng starting"));    MessageRateStats.getMessageRateStatsForSource(mi.getSourceId()).markLoggerStarting(mi.getDateTime().getTime());  }}  }
class C{  private void initializeLiveAttributes(){  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);}  }
class C{  public void addLstore(int n){  if (n < 4)   addOpcode(63 + n); else   if (n < 0x100) {    addOpcode(LSTORE);    add(n);  } else {    addOpcode(WIDE);    addOpcode(LSTORE);    addIndex(n);  }}  }
class C{  @Override protected ItemHandlerLoot createInventory(){  return new ItemHandlerLoot(INVENTORY_SIZE,DEFAULT_NAME,this);}  }
class C{  public FillOutsideLine(Type type){  this.mType=type;}  }
class C{  public AccountHeaderBuilder withOnlyMainProfileImageVisible(boolean onlyMainProfileImageVisible){  this.mOnlyMainProfileImageVisible=onlyMainProfileImageVisible;  return this;}  }
class C{  public DateTimeFormatterBuilder appendLiteral(String text){  if (text == null) {    throw new IllegalArgumentException("Literal must not be null");  }switch (text.length()) {case 0:    return this;case 1:  return append0(new CharacterLiteral(text.charAt(0)));default :return append0(new StringLiteral(text));}}  }
class C{  private void blindlyWriteToRelayLog(MySQLPacket packet,boolean extended) throws IOException {  byte[] bytes=packet.getByteBuffer();  int header;  if (extended)   header=4; else   header=5;  int writeLength=bytes.length - header;  if (logger.isDebugEnabled()) {    logger.debug("Writing packet to binlog: bytesLength=" + bytes.length + " writeLength="+ writeLength);  }  relayOutput.write(bytes,header,writeLength);  relayOutput.flush();  relayBytes+=writeLength;  logPosition.setPosition(relayLog,relayBytes);}  }
class C{  private double[] adjustedStackValues(double[] stack1,double[] stack2){  double[] result=new double[2];  if (stack1[0] == 0.0 || stack2[0] == 0.0) {    result[0]=0.0;  } else {    result[0]=(stack1[0] + stack2[0]) / 2.0;  }  if (stack1[1] == 0.0 || stack2[1] == 0.0) {    result[1]=0.0;  } else {    result[1]=(stack1[1] + stack2[1]) / 2.0;  }  return result;}  }
class C{  public void addNetworkEventListener(final IMXNetworkEventListener networkEventListener){  if ((null != getDefaultSession()) && (null != networkEventListener)) {    getDefaultSession().getNetworkConnectivityReceiver().addEventListener(networkEventListener);  }}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public static void checkState(boolean expression){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) {    throw new IllegalStateException();  }}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  public FormatsValidate(Formats fmt){  this(fmt,new FormatsConstrain[0]);}  }
class C{  public final boolean resolveUnboxing(){  return this.ast.getBindingResolver().resolveUnboxing(this);}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  @Override public double prevCumulativeQuantity(final Long woActivityId,Long mbHeaderId){  if (mbHeaderId == null)   mbHeaderId=-1l;  final Object[] params=new Object[]{mbHeaderId,mbHeaderId,WorksConstants.CANCELLED_STATUS,woActivityId};  final Double pQuant=(Double)genericService.findByNamedQuery("prevCumulativeQuantity",params);  if (pQuant == null)   return 0.0d; else   return pQuant.doubleValue();}  }
class C{  public static QueryAssociatedProcessorsForArray parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryAssociatedProcessorsForArray object=new QueryAssociatedProcessorsForArray();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryAssociatedProcessorsForArray".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryAssociatedProcessorsForArray)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","arrayUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","arrayUniqueId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.setArrayUniqueId((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  private void updateComponent(PsiClass selectedClass){  String androidPackage;  String fullComponentName;  if (selectedClass != null) {    androidPackage=getAndroidPackage(selectedClass);    fullComponentName=selectedClass.getQualifiedName();    if (androidPackage != null && !androidPackage.equals("") && fullComponentName != null) {      int packageIndex=fullComponentName.indexOf(androidPackage);      if (packageIndex != -1) {        StringBuilder builder=new StringBuilder(fullComponentName);        fullComponentName=builder.insert(packageIndex + androidPackage.length(),"/").toString();      }      userTextField.setText(androidPackage);    }    componentTextField.setText(fullComponentName);  }}  }
class C{  public GphotoEntry(){  super();  this.delegate=new GphotoDataImpl(this);}  }
class C{  public X509CertImpl(byte[] encoding) throws IOException {  this((Certificate)Certificate.ASN1.decode(encoding));}  }
class C{  public void refresh(){  this.changeCursor(new MatrixCursor(this.getCursor().getColumnNames()));  this.notifyDataSetChanged();  (new AsyncCursorAdapterUpdater()).execute(cursorGenerator,this);}  }
class C{  private void deleteComments(SpanManager sm){  int start=0;  while ((start=sm.indexOf("<!--",start)) != -1) {    int end=sm.indexOf("-->",start + 4) + 3;    if (end == -1 + 3) {      end=sm.length();    }    try {      if (lineSeparator.equals(sm.substring(start - lineSeparator.length(),start)) && lineSeparator.equals(sm.substring(end,end + lineSeparator.length()))) {        end+=lineSeparator.length();      }    } catch (    IndexOutOfBoundsException e) {    }    sm.delete(start,end);  }}  }
class C{  protected Angle computeRotation(Vec4 screenPoint,Vec4 orientationScreenPoint){  double deltaX=screenPoint.x - orientationScreenPoint.x;  double deltaY=screenPoint.y - orientationScreenPoint.y;  if (deltaX != 0) {    double angle=Math.atan(deltaY / deltaX);    return Angle.fromRadians(angle);  } else {    return Angle.POS90;  }}  }
class C{  public static void handleTrustStorageUpdate(){  try {    X509TrustManager x509TrustManager=SSLParametersImpl.getDefaultTrustManager();    if (x509TrustManager instanceof TrustManagerImpl) {      TrustManagerImpl trustManager=(TrustManagerImpl)x509TrustManager;      trustManager.handleTrustStorageUpdate();    }  } catch (  KeyManagementException ignored) {  }}  }
class C{  final void forgetContents(){  UNSAFE.putObject(this,itemOffset,this);  UNSAFE.putObject(this,waiterOffset,null);}  }
class C{  private RequestBuilder(HTTPMethod method,String url){  this.method=method;  if (url == null) {    throw new IllegalArgumentException("url cannot be null");  }  httpUrl=HttpUrl.parse(url);  if (httpUrl == null) {    httpUrl=HttpUrl.parse(RequestUtils.DEFAULT_ENDPOINT + url);  }}  }
class C{  public static GoogleCredentials fromStream(InputStream credentialsStream) throws IOException {  return fromStream(credentialsStream,OAuth2Utils.HTTP_TRANSPORT_FACTORY);}  }
class C{  public final CertPathBuilderResult build(CertPathParameters params) throws CertPathBuilderException, InvalidAlgorithmParameterException {  return builderSpi.engineBuild(params);}  }
class C{  public NemRequestResult(final Deserializer deserializer){  this.type=deserializer.readInt("type");  this.code=deserializer.readInt("code");  this.message=deserializer.readString("message");}  }
class C{  public void hatch(ByteBuffer buf){synchronized (queue) {    queue.hatch(buf);  }}  }
class C{  static <T>void validateTenantConfigurationDataType(final TenantConfigurationKey configurationKey,final Class<T> propertyType){  if (!configurationKey.getDataType().isAssignableFrom(propertyType)) {    throw new TenantConfigurationValidatorException(String.format("Cannot parse the database value of type %s into the type %s.",configurationKey.getDataType(),propertyType));  }}  }
class C{  public void add(int id,String name,int parentId,int parentDocId,int fileId,String fileExt,int sortOrder,int annId) throws Exception {  FolderTokenDocument doc;  doc=new FolderTokenDocument(id,name,parentId,parentDocId,fileId,fileExt,sortOrder,annId);  super.add(doc);}  }
class C{  private void drawSecondAnimation(Canvas canvas){  if (arcO == limite)   arcD+=6;  if (arcD >= 290 || arcO > limite) {    arcO+=6;    arcD-=6;  }  if (arcO > limite + 290) {    limite=arcO;    arcO=limite;    arcD=1;  }  rotateAngle+=4;  canvas.rotate(rotateAngle,getWidth() / 2,getHeight() / 2);  Bitmap bitmap=Bitmap.createBitmap(canvas.getWidth(),canvas.getHeight(),Bitmap.Config.ARGB_8888);  Canvas temp=new Canvas(bitmap);  Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setColor(backgroundColor);  temp.drawArc(new RectF(0,0,getWidth(),getHeight()),arcO,arcD,true,paint);  Paint transparentPaint=new Paint();  transparentPaint.setAntiAlias(true);  transparentPaint.setColor(getResources().getColor(android.R.color.transparent));  transparentPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));  temp.drawCircle(getWidth() / 2,getHeight() / 2,(getWidth() / 2) - Utils.dpToPx(4,getResources()),transparentPaint);  canvas.drawBitmap(bitmap,0,0,new Paint());}  }
class C{  public void xMinYMin() throws ParseException {  align=SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMIN;}  }
class C{  public Synapse(Neuron source,Neuron target,SynapseUpdateRule learningRule){  this(source.getNetwork(),source,target,learningRule);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private PerfMetricId findMetricId(String group,String name,PerfStatsType type,PerformanceManagerUnit unit,PerfSummaryType rollupType){  PerfMetricId res=new PerfMetricId();  PerfCounterInfo counter=this.perfCounterLookup.getCounter(name,group,type,rollupType,unit);  if (counter == null) {    String msg=String.format("Cannot find metric for %s/%s/%s/%s/%s",group,name,type,rollupType.value(),unit.value());    logger.warning(msg);    throw new IllegalArgumentException(msg);  }  res.setCounterId(counter.getKey());  res.setInstance("");  return res;}  }
class C{  private CharacterMatch checkMatchingCharacter(char curr){  if ((curr == '\"' && _options.hasFlag(UrlDetectorOptions.QUOTE_MATCH)) || (curr == '\'' && _options.hasFlag(UrlDetectorOptions.SINGLE_QUOTE_MATCH))) {    boolean quoteStart;    if (curr == '\"') {      quoteStart=_quoteStart;      _quoteStart=true;    } else {      quoteStart=_singleQuoteStart;      _singleQuoteStart=true;    }    Integer currVal=getCharacterCount(curr) + 1;    _characterMatch.put(curr,currVal);    return quoteStart || currVal % 2 == 0 ? CharacterMatch.CharacterMatchStop : CharacterMatch.CharacterMatchStart;  } else   if (_options.hasFlag(UrlDetectorOptions.BRACKET_MATCH) && (curr == '[' || curr == '{' || curr == '(')) {    _characterMatch.put(curr,getCharacterCount(curr) + 1);    return CharacterMatch.CharacterMatchStart;  } else   if (_options.hasFlag(UrlDetectorOptions.XML) && (curr == '<')) {    _characterMatch.put(curr,getCharacterCount(curr) + 1);    return CharacterMatch.CharacterMatchStart;  } else   if ((_options.hasFlag(UrlDetectorOptions.BRACKET_MATCH) && (curr == ']' || curr == '}' || curr == ')')) || (_options.hasFlag(UrlDetectorOptions.XML) && (curr == '>'))) {    Integer currVal=getCharacterCount(curr) + 1;    _characterMatch.put(curr,currVal);    char match='\0';switch (curr) {case ']':      match='[';    break;case '}':  match='{';break;case ')':match='(';break;case '>':match='<';break;default :break;}return getCharacterCount(match) > currVal ? CharacterMatch.CharacterMatchStop : CharacterMatch.CharacterMatchStart;}return CharacterMatch.CharacterNotMatched;}  }
class C{  public Builder(final InputStream input_stream,TrafficDirection direction) throws IllegalArgumentException {  if (input_stream == null) {    throw new IllegalArgumentException("Null input stream.");  }  this.wrappedStream=input_stream;  if (direction == null) {    throw new IllegalArgumentException("Null traffic direction.");  }  this.direction=direction;}  }
class C{  public static String ordered(final int n){switch (n) {case 1:    return "first";case 2:  return "second";case 3:return "third";case 4:return "fourth";case 5:return "fifth";case 6:return "sixth";case 7:return "seventh";case 8:return "eighth";case 9:return "ninth";case 10:return "tenth";default :if (n > 0) {return n + ordinalSuffix(n);}logger.error("Grammar.ordered not implemented for: " + n);return Integer.toString(n);}}  }
class C{  @Override public boolean hasDispatchFunction(){  return false;}  }
class C{  @Override public int compareTo(final Record r){  return getPoints() - r.getPoints();}  }
class C{  public void add(float[] vals,int offset,int length){  ensureCapacity(_pos + length);  System.arraycopy(vals,offset,_data,_pos,length);  _pos+=length;}  }
class C{  public void addBatch() throws SQLException {  checkValidity();  boolean allParamsSet=true;  for (  boolean anIsParamSet : isParamSet) {    allParamsSet&=anIsParamSet;  }  if (!allParamsSet)   throw new FBSQLException("Not all parameters set.");  final RowValue batchedValues=fieldValues.deepCopy();  for (int i=0; i < batchedValues.getCount(); i++) {    FBField field=getField(i + 1);    if (field instanceof FBFlushableField)     batchedValues.getFieldValue(i).setCachedObject(((FBFlushableField)field).getCachedObject());  }  batchList.add(batchedValues);}  }
class C{  public Chronology withZone(DateTimeZone zone){  if (zone == null) {    zone=DateTimeZone.getDefault();  }  if (zone == getZone()) {    return this;  }  return getInstance(zone);}  }
class C{  @After public void unregisterIdlingResource(){  Espresso.unregisterIdlingResources(MyApplication.getInstance().getCountingIdlingResource());}  }
class C{  public boolean isSuper(){  return myBound != null && !myIsExtending;}  }
class C{  @Override public String basePath(){  return "/wm/statistics";}  }
class C{  public Enumeration<Permission> elements(){  return permissions.elements();}  }
class C{  public void insert(final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  if (first == null) {    first=insns.first;    last=insns.last;  } else {    AbstractInsnNode elem=insns.last;    first.prev=elem;    elem.next=first;    first=insns.first;  }  cache=null;  insns.removeAll(false);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:40.750 -0500",hash_original_method="F5911F61390A242F23F5676C44FA4C61",hash_generated_method="05E6D4AB511F57E4A865290B84F04FA0") public ProgressBar(Context context){  this(context,null);}  }
class C{  @SuppressWarnings("unchecked") public Intervals(Map<T,Double> table){  intervals=new Interval[table.size()];  int i=0;  double total=0.0f;  for (  T a : table.keySet()) {    double prob=table.get(a);    if (prob == Double.NaN) {      throw new RuntimeException("probability is NaN: " + table);    }    intervals[i++]=new Interval<T>(a,total,total + prob);    total+=prob;  }  if (total < 0.0001) {    throw new RuntimeException("total prob is null: " + table);  }  totalProb=total;}  }
class C{  public static void writeTransitSchedule(TransitSchedule schedule,String fileName){  log.info("Writing transit schedule to file " + fileName);  new TransitScheduleWriter(schedule).writeFile(fileName);  log.info("done.");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + String.valueOf(progress)+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static PollTcpManager createJni(){  try {    return (PollTcpManager)SelectManagerJni.create();  } catch (  Throwable e) {    log.finer(e.toString());  }  return null;}  }
class C{  public void testUnivariateTEforRandomDataFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  double[] col0=MatrixUtils.selectColumn(data,0);  double[] col1=MatrixUtils.selectColumn(data,1);  double[] col2=MatrixUtils.selectColumn(data,2);  col0=MatrixUtils.normaliseIntoNewArray(col0);  col1=MatrixUtils.normaliseIntoNewArray(col1);  col2=MatrixUtils.normaliseIntoNewArray(col2);  int kNNs=4;  double expectedFromTRENTOOL0to1=-0.0096556;  double expectedFromTRENTOOL1to2=0.0175389;  double expectedFromTRENTOOL1to0=0.0026367;  double expectedFromTRENTOOL0to2=-0.00012474;  double expectedFromTRENTOOL2to0=-5.4437e-03;  TransferEntropyCalculatorKraskov teCalc=new TransferEntropyCalculatorKraskov();  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_K,Integer.toString(kNNs));  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_NORMALISE,"false");  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_ADD_NOISE,"0");  System.out.printf("Kraskov TE comparison 2 to TRENTOOL - univariate random data 1 (col 0->1)");  teCalc.initialise(1);  teCalc.setObservations(col0,col1);  double result=teCalc.computeAverageLocalOfObservations();  System.out.printf(" %.5f\n",result);  assertEquals(expectedFromTRENTOOL0to1,result,0.000001);  System.out.printf("  (col 1->2):");  teCalc.initialise(1);  teCalc.setObservations(col1,col2);  result=teCalc.computeAverageLocalOfObservations();  System.out.printf(" %.5f\n",result);  assertEquals(expectedFromTRENTOOL1to2,result,0.000001);  System.out.printf("  (col 1->0):");  teCalc.initialise(1);  teCalc.setObservations(col1,col0);  result=teCalc.computeAverageLocalOfObservations();  System.out.printf(" %.5f\n",result);  assertEquals(expectedFromTRENTOOL1to0,result,0.000001);  System.out.printf("  (col 0->2):");  teCalc.initialise(1);  teCalc.setObservations(col0,col2);  result=teCalc.computeAverageLocalOfObservations();  System.out.printf(" %.5f\n",result);  assertEquals(expectedFromTRENTOOL0to2,result,0.000001);  System.out.printf("  (col 2->0):");  teCalc.initialise(1);  teCalc.setObservations(col2,col0);  result=teCalc.computeAverageLocalOfObservations();  System.out.printf(" %.5f\n",result);  assertEquals(expectedFromTRENTOOL2to0,result,0.000001);}  }
class C{  private RocSlope(InputStream in,PrintStream out) throws IOException {  out.println("#Version " + Environment.getVersion() + ", ROC-slope output 1.1");  if (CommandLine.getCommandLine() != null) {    out.println("#CL " + CommandLine.getCommandLine());  }  out.println("#posterior\tslope\tlog-slope");  try (BufferedReader r=new BufferedReader(new InputStreamReader(in))){    String s;    final ArrayList<Container> stack=new ArrayList<>();    stack.add(new Container(Double.POSITIVE_INFINITY,Double.POSITIVE_INFINITY,0,0,0,0));    while ((s=r.readLine()) != null) {      if (s.startsWith("#")) {        continue;      }      final String[] split=s.split("\t");      assert split.length >= 3;      final double pos;      try {        pos=Double.parseDouble(split[0]);      } catch (      NumberFormatException e) {        continue;      }      final int y=(int)Double.parseDouble(split[1]);      final int x=(int)Double.parseDouble(split[2]);      final int size=stack.size();      if (size == 0) {        stack.add(new Container(pos,pos,0,0,x,y));      } else {        final Container top=stack.get(size - 1);        final double p0=top.mLastPosterior;        final double posterior=Double.isInfinite(p0) ? pos : top.mLastPosterior;        stack.add(new Container(posterior,pos,top.endX(),top.endY(),x - top.endX(),y - top.endY()));      }      while (true) {        if (stack.size() <= 2) {          break;        }        final int size1=stack.size() - 1;        final Container top1=stack.get(size1);        final Container top2=stack.get(size1 - 1);        if (top1.slope() >= top2.slope()) {          final Container c=new Container(top2.mFirstPosterior,top1.mLastPosterior,top2.mStartx,top2.mStarty,top1.mDeltax + top2.mDeltax,top1.mDeltay + top2.mDeltay);          stack.remove(size1);          stack.remove(size1 - 1);          stack.add(c);        } else {          break;        }      }    }    for (int i=1; i < stack.size(); i++) {      final Container c1=stack.get(i);      final double slope=c1.slope();      final double posterior=c1.mFirstPosterior;      if (slope == 0.0 || Double.isInfinite(slope)) {        continue;      }      final double logSlope=ALT_SLOPE ? (10 * Math.log10(1 + slope)) : Math.log10(slope);      out.println(Utils.realFormat(posterior,2) + "\t" + Utils.realFormat(slope,2)+ "\t"+ Utils.realFormat(logSlope,3));      final double lastPosterior=c1.mLastPosterior;      if (lastPosterior < posterior) {        out.println(Utils.realFormat(lastPosterior,2) + "\t" + Utils.realFormat(slope,2)+ "\t"+ Utils.realFormat(logSlope,3));      }    }  } }  }
class C{  public void add(int index,Object element){  content.beforeInsert(index,value(element));  modCount++;}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  protected ASN1Primitive buildObject(int tag,int tagNo,int length) throws IOException {  boolean isConstructed=(tag & CONSTRUCTED) != 0;  DefiniteLengthInputStream defIn=new DefiniteLengthInputStream(this,length);  if ((tag & APPLICATION) != 0) {    return new DERApplicationSpecific(isConstructed,tagNo,defIn.toByteArray());  }  if ((tag & TAGGED) != 0) {    return new ASN1StreamParser(defIn).readTaggedObject(isConstructed,tagNo);  }  if (isConstructed) {switch (tagNo) {case OCTET_STRING:      ASN1EncodableVector v=buildDEREncodableVector(defIn);    ASN1OctetString[] strings=new ASN1OctetString[v.size()];  for (int i=0; i != strings.length; i++) {    strings[i]=(ASN1OctetString)v.get(i);  }return new BEROctetString(strings);case SEQUENCE:if (lazyEvaluate) {return new LazyEncodedSequence(defIn.toByteArray());} else {return DERFactory.createSequence(buildDEREncodableVector(defIn));}case SET:return DERFactory.createSet(buildDEREncodableVector(defIn));case EXTERNAL:return new DERExternal(buildDEREncodableVector(defIn));default :throw new IOException("unknown tag " + tagNo + " encountered");}}return createPrimitiveDERObject(tagNo,defIn,tmpBuffers);}  }
class C{  private void addAnimationPolyfill(){  ScriptHelper.evalNoResult("(function(){for(var n=0,e=['ms','moz','webkit','o'],i=0;i<e.length&&!window.requestAnimationFrame;++i)window.requestAnimationFrame=window[e[i]+'RequestAnimationFrame'],window.cancelAnimationFrame=window[e[i]+'CancelAnimationFrame']||window[e[i]+'CancelRequestAnimationFrame'];window.requestAnimationFrame||(window.requestAnimationFrame=function(e,i){var a=(new Date).getTime(),o=Math.max(0,16-(a-n)),t=window.setTimeout(function(){e(a+o)},o);return n=a+o,t},window.cancelAnimationFrame=function(n){clearTimeout(n)})})();",this);}  }
class C{  @Nullable private GridDhtAtomicUpdateFuture createDhtFuture(GridCacheVersion writeVer,GridNearAtomicUpdateRequest updateReq,GridNearAtomicUpdateResponse updateRes,CI2<GridNearAtomicUpdateRequest,GridNearAtomicUpdateResponse> completionCb,boolean force){  if (!force) {    if (updateReq.fastMap())     return null;    AffinityTopologyVersion topVer=updateReq.topologyVersion();    Collection<ClusterNode> nodes=ctx.kernalContext().discovery().cacheAffinityNodes(name(),topVer);    assert !nodes.isEmpty() : "Failed to find affinity nodes [name=" + name() + ", topVer="+ topVer+ ctx.kernalContext().discovery().discoCache(topVer)+ ']';    if (nodes.size() == 1) {      if (log.isDebugEnabled())       log.debug("Partitioned cache topology has only one node, will not create DHT atomic update future " + "[topVer=" + topVer + ", updateReq="+ updateReq+ ']');      return null;    }  }  return new GridDhtAtomicUpdateFuture(ctx,completionCb,writeVer,updateReq,updateRes);}  }
class C{  protected int writeObject(STWriter out,InstanceScope scope,Object o,String[] options){  int n=0;  if (o == null) {    if (options != null && options[Option.NULL.ordinal()] != null) {      o=options[Option.NULL.ordinal()];    } else     return 0;  }  if (o instanceof ST) {    scope=new InstanceScope(scope,(ST)o);    if (options != null && options[Option.WRAP.ordinal()] != null) {      try {        out.writeWrap(options[Option.WRAP.ordinal()]);      } catch (      IOException ioe) {        errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe);      }    }    n=exec(out,scope);  } else {    o=convertAnythingIteratableToIterator(scope,o);    try {      if (o instanceof Iterator)       n=writeIterator(out,scope,o,options); else       n=writePOJO(out,scope,o,options);    } catch (    IOException ioe) {      errMgr.IOError(scope.st,ErrorType.WRITE_IO_ERROR,ioe,o);    }  }  return n;}  }
class C{  protected void successfulAuthentication(Authentication authResult){  LOGGER.debug("Authentication success: " + authResult);  SecurityContextHolder.getContext().setAuthentication(authResult);}  }
class C{  public static String relativePath(final File root,File path){  String rc=FileUtil.getRelativePath(root,path);  if (rc == null) {    throw new IllegalArgumentException("The file " + path + " cannot be made relative to "+ root);  }  return rc.replace(File.separatorChar,'/');}  }
class C{  @Override public Query rewrite(IndexReader reader){  return new GeoPointInPolygonQueryImpl(field,this,this.minLat,this.maxLat,this.minLon,this.maxLon);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:23.274 -0400",hash_original_method="3492963B9799FA768D7650AC10A0F976",hash_generated_method="05FA181A353EB1D2A8C6F63EB83AD424") public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  public static void main(String[] args){  int T=1000;  for (int n=2; n <= 30; n+=1) {    int totalsA=0;    int statesA=0;    int failedA=0;    for (int t=0; t < T; t++) {      INode start=randomize(n);      AStarSearch as=new AStarSearch(new GoodEvaluator());      Solution asol=as.search(start,goal);      if (!asol.succeeded()) {        failedA++;      }      totalsA+=asol.numMoves();      statesA+=as.numClosed + as.numOpen;    }    float avgA=totalsA;    avgA/=(T - failedA);    System.out.print(n + "," + statesA+ ",");    System.out.print(avgA);    if (failedA != 0) {      System.out.print("(" + failedA + ")");    }    System.out.println();  }}  }
class C{  public static File createTempDir(String prefix,boolean cleanup) throws IOException {  Path tmpDir=Files.createTempDirectory(prefix);  addCleanupHook(tmpDir);  return tmpDir.toFile();}  }
class C{  public RegisterResponseMessage(RegisterResponseMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  private void parse(){  if (apdu.length < 4) {    throw new IllegalArgumentException("apdu must be at least 4 bytes long");  }  if (apdu.length == 4) {    return;  }  int l1=apdu[4] & 0xff;  if (apdu.length == 5) {    this.ne=(l1 == 0) ? 256 : l1;    return;  }  if (l1 != 0) {    if (apdu.length == 4 + 1 + l1) {      this.nc=l1;      this.dataOffset=5;      return;    } else     if (apdu.length == 4 + 2 + l1) {      this.nc=l1;      this.dataOffset=5;      int l2=apdu[apdu.length - 1] & 0xff;      this.ne=(l2 == 0) ? 256 : l2;      return;    } else {      throw new IllegalArgumentException("Invalid APDU: length=" + apdu.length + ", b1="+ l1);    }  }  if (apdu.length < 7) {    throw new IllegalArgumentException("Invalid APDU: length=" + apdu.length + ", b1="+ l1);  }  int l2=((apdu[5] & 0xff) << 8) | (apdu[6] & 0xff);  if (apdu.length == 7) {    this.ne=(l2 == 0) ? 65536 : l2;    return;  }  if (l2 == 0) {    throw new IllegalArgumentException("Invalid APDU: length=" + apdu.length + ", b1="+ l1+ ", b2||b3="+ l2);  }  if (apdu.length == 4 + 3 + l2) {    this.nc=l2;    this.dataOffset=7;    return;  } else   if (apdu.length == 4 + 5 + l2) {    this.nc=l2;    this.dataOffset=7;    int leOfs=apdu.length - 2;    int l3=((apdu[leOfs] & 0xff) << 8) | (apdu[leOfs + 1] & 0xff);    this.ne=(l3 == 0) ? 65536 : l3;  } else {    throw new IllegalArgumentException("Invalid APDU: length=" + apdu.length + ", b1="+ l1+ ", b2||b3="+ l2);  }}  }
class C{  private void validateDelta(EntryEventImpl event){  if (event.getDeltaBytes() != null && !event.getRegion().getAttributes().getCloningEnabled()) {    throw new UnsupportedOperationInTransactionException(LocalizedStrings.TXState_DELTA_WITHOUT_CLONING_CANNOT_BE_USED_IN_TX.toLocalizedString());  }}  }
class C{  @Override public void release(){  this.type=null;}  }
class C{  public static int mapErrorStatus(int errorStatus,int protocolVersion,int reqPduType){  return SnmpSubRequestHandler.mapErrorStatus(errorStatus,protocolVersion,reqPduType);}  }
class C{  public boolean isHaveGravity(){  SensorManager manager=(SensorManager)context.getSystemService(Context.SENSOR_SERVICE);  if (manager == null) {    return false;  }  return true;}  }
class C{  private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  public static boolean compareAttributes(List<Attribute> oldAttributes,List<Attribute> newAttributes){  Iterator<Attribute> oldIter=oldAttributes.iterator();  while (oldIter.hasNext()) {    Attribute oldAttr=oldIter.next();    Iterator<Attribute> newIter=newAttributes.iterator();    while (newIter.hasNext()) {      Attribute newAttr=newIter.next();      if (newAttr.getName().equals(oldAttr.getName())) {        oldIter.remove();        newIter.remove();        break;      }    }  }  return oldAttributes.isEmpty() && newAttributes.isEmpty();}  }
class C{  public static void writeTrips(TripEventHandler tripHandler,String outputFile){  TripWriter.writeTrips(tripHandler.getTrips(),outputFile);}  }
class C{  public boolean intersectsInterior(Sector that){  if (that == null)   return false;  if (that.maxLongitude.degrees <= this.minLongitude.degrees)   return false;  if (that.minLongitude.degrees >= this.maxLongitude.degrees)   return false;  if (that.maxLatitude.degrees <= this.minLatitude.degrees)   return false;  if (that.minLatitude.degrees >= this.maxLatitude.degrees)   return false;  return true;}  }
class C{  public void RevokeCertificate(X509Certificate certificate) throws Exception {  VMCAAdapter.RevokeCertificate(ServerName,getEncodedStringFromCertificate(certificate));}  }
class C{  protected void emit_ImportSpecifiersExceptDefault_CommaKeyword_1_1_2_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  private RemoteFileSystem(final RemoteDirectory directory,final List<RemoteDrive> drives,final List<RemoteDirectory> directories,final List<RemoteFile> files){  this.directory=directory;  this.drives=new ArrayList<>(drives);  this.directories=new ArrayList<>(directories);  this.files=new ArrayList<>(files);}  }
class C{  public ActionEvent(@NotNull Presentation presentation,@NotNull ActionManager actionManager,@NotNull PerspectiveManager perspectiveManager){  this(presentation,actionManager,perspectiveManager,null);}  }
class C{  public Explanation idfExplain(CollectionStatistics collectionStats,TermStatistics termStats[]){  final long docCount=collectionStats.docCount() == -1 ? collectionStats.maxDoc() : collectionStats.docCount();  float idf=0.0f;  List<Explanation> details=new ArrayList<>();  for (  final TermStatistics stat : termStats) {    final long df=stat.docFreq();    final float termIdf=idf(df,docCount);    details.add(Explanation.match(termIdf,"idf(docFreq=" + df + ", docCount="+ docCount+ ")"));    idf+=termIdf;  }  return Explanation.match(idf,"idf(), sum of:",details);}  }
class C{  private SpeechletResponse handleFirstEventRequest(Intent intent,Session session){  Calendar calendar=getCalendar(intent);  String month=MONTH_NAMES[calendar.get(Calendar.MONTH)];  String date=Integer.toString(calendar.get(Calendar.DATE));  String speechPrefixContent="<p>For " + month + " "+ date+ "</p> ";  String cardPrefixContent="For " + month + " "+ date+ ", ";  String cardTitle="Events on " + month + " "+ date;  ArrayList<String> events=getJsonEventsFromWikipedia(month,date);  String speechOutput="";  if (events.isEmpty()) {    speechOutput="There is a problem connecting to Wikipedia at this time." + " Please try again later.";    SsmlOutputSpeech outputSpeech=new SsmlOutputSpeech();    outputSpeech.setSsml("<speak>" + speechOutput + "</speak>");    return SpeechletResponse.newTellResponse(outputSpeech);  } else {    StringBuilder speechOutputBuilder=new StringBuilder();    speechOutputBuilder.append(speechPrefixContent);    StringBuilder cardOutputBuilder=new StringBuilder();    cardOutputBuilder.append(cardPrefixContent);    for (int i=0; i < PAGINATION_SIZE; i++) {      speechOutputBuilder.append("<p>");      speechOutputBuilder.append(events.get(i));      speechOutputBuilder.append("</p> ");      cardOutputBuilder.append(events.get(i));      cardOutputBuilder.append("\n");    }    speechOutputBuilder.append(" Wanna go deeper in history?");    cardOutputBuilder.append(" Wanna go deeper in history?");    speechOutput=speechOutputBuilder.toString();    String repromptText="With History Buff, you can get historical events for any day of the year." + " For example, you could say today, or August thirtieth." + " Now, which day do you want?";    SimpleCard card=new SimpleCard();    card.setTitle(cardTitle);    card.setContent(cardOutputBuilder.toString());    session.setAttribute(SESSION_INDEX,PAGINATION_SIZE);    session.setAttribute(SESSION_TEXT,events);    SpeechletResponse response=newAskResponse("<speak>" + speechOutput + "</speak>",true,repromptText,false);    response.setCard(card);    return response;  }}  }
class C{  public Classification(String classification){  super(classification);}  }
class C{  public void bind(LocalSocketAddress bindpoint) throws IOException {  implCreateIfNeeded();synchronized (this) {    if (isBound) {      throw new IOException("already bound");    }    localAddress=bindpoint;    impl.bind(localAddress);    isBound=true;  }}  }
class C{  public void drawLine(int x1,int y1,int x2,int y2){  addStrokeShape(new Line2D.Float(x1,y1,x2,y2));  mPrintMetrics.draw(this);}  }
class C{  public static boolean isEnabled(final @IntegerRes int flagResId){  return isEnabled(getAppContext(),flagResId);}  }
class C{  public JacobiTransformation(SymmetricMatrix m){  int n=m.rows();  rows=new double[n][n];  for (int i=0; i < n; i++) {    for (int j=0; j < n; j++)     rows[i][j]=m.components[i][j];  }}  }
class C{  public float readFloat() throws SQLException {  Float attrib=(Float)getNextAttribute();  return (attrib == null) ? 0 : attrib.floatValue();}  }
class C{  public SVGPath smoothCubicTo(double c2x,double c2y,double x,double y){  append(PATH_SMOOTH_CUBIC_TO,c2x,c2y,x,y);  return this;}  }
class C{  private boolean do_IntZeroCheck(Operand div){  if (div instanceof IntConstantOperand) {    if (((IntConstantOperand)div).value == 0) {      endOfBasicBlock=true;      rectifyStateWithArithmeticExceptionHandler();      appendInstruction(Trap.create(TRAP,gc.getTemps().makeTempValidation(),TrapCodeOperand.DivByZero()));      return true;    } else {      if (DBG_CF) {        db("skipped gen of int_zero_check of " + div.asIntConstant().value);      }      setCurrentGuard(new TrueGuardOperand());      return false;    }  }  RegisterOperand guard=gc.getTemps().makeTempValidation();  appendInstruction(ZeroCheck.create(INT_ZERO_CHECK,guard,div.copy()));  setCurrentGuard(guard);  rectifyStateWithArithmeticExceptionHandler();  return false;}  }
class C{  public void removeAllListeners(){}  }
class C{  private Path generateFilledPath(List<Entry> entries,float fillMin,int from,int to){  float phaseX=mAnimator.getPhaseX();  float phaseY=mAnimator.getPhaseY();  Path filled=new Path();  filled.moveTo(entries.get(from).getXIndex(),fillMin);  filled.lineTo(entries.get(from).getXIndex(),entries.get(from).getVal() * phaseY);  for (int x=from + 1, count=(int)Math.ceil((to - from) * phaseX + from); x < count; x++) {    Entry e=entries.get(x);    filled.lineTo(e.getXIndex(),e.getVal() * phaseY);  }  filled.lineTo(entries.get(Math.max(Math.min((int)Math.ceil((to - from) * phaseX + from) - 1,entries.size() - 1),0)).getXIndex(),fillMin);  filled.close();  return filled;}  }
class C{  private String parentPkColumns(final String index,final String type){  IndexService indexService=indexService(index);  if (indexService != null) {    DocumentMapper docMapper=indexService.mapperService().documentMapper(type);    if (docMapper != null) {      ParentFieldMapper parentMapper=docMapper.parentFieldMapper();      if (parentMapper.active()) {        if (parentMapper.pkColumns() == null) {          return "\"_parent\"";        } else {          return parentMapper.pkColumns();        }      }    }  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void rollbackCastlingMove(Move move){  FischerRandomUtils.rollbackCastlingMove(this,move,initialKingFile,initialShortRookFile,initialLongRookFile);}  }
class C{  private void loadDictionaryData(DictionaryInfo dictionaryInfo,DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier,long dictionaryChunkStartOffset,long dictionaryChunkEndOffset,boolean loadSortIndex) throws IOException {  DictionaryCacheLoader dictionaryCacheLoader=new DictionaryCacheLoaderImpl(dictionaryColumnUniqueIdentifier.getCarbonTableIdentifier(),carbonStorePath);  dictionaryCacheLoader.load(dictionaryInfo,dictionaryColumnUniqueIdentifier.getColumnIdentifier(),dictionaryChunkStartOffset,dictionaryChunkEndOffset,loadSortIndex);}  }
class C{  public void componentMoved(final ComponentEvent e){}  }
class C{  @Override public DriverTask deleteVolume(StorageVolume volume){  LOG.info("Deleting volume {}",volume.getNativeId());  return provisioningHelper.deleteVolume(volume);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected Container createMessageArea(){  JPanel top=new JPanel();  Border topBorder=(Border)DefaultLookup.get(optionPane,this,"OptionPane.messageAreaBorder");  if (topBorder != null) {    top.setBorder(topBorder);  }  top.setLayout(new BorderLayout());  Container body=new JPanel(new GridBagLayout());  Container realBody=new JPanel(new BorderLayout());  body.setName("OptionPane.body");  realBody.setName("OptionPane.realBody");  if (getIcon() != null) {    JPanel sep=new JPanel();    sep.setName("OptionPane.separator");    sep.setPreferredSize(new Dimension(15,1));    realBody.add(sep,BorderLayout.BEFORE_LINE_BEGINS);  }  realBody.add(body,BorderLayout.CENTER);  GridBagConstraints cons=new GridBagConstraints();  cons.gridx=cons.gridy=0;  cons.gridwidth=GridBagConstraints.REMAINDER;  cons.gridheight=1;  cons.anchor=DefaultLookup.getInt(optionPane,this,"OptionPane.messageAnchor",GridBagConstraints.CENTER);  cons.insets=new Insets(0,0,3,0);  addMessageComponents(body,cons,getMessage(),getMaxCharactersPerLineCount(),false);  top.add(realBody,BorderLayout.CENTER);  addIcon(top);  return top;}  }
class C{  private void doAcquireSharedInterruptibly(long arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public String rpoplpush(final String srckey,final String dstkey){  checkIsInMulti();  client.rpoplpush(srckey,dstkey);  return client.getBulkReply();}  }
class C{  public String execute(){  String cmd=Msg.parseTranslation(Env.getCtx(),getOS_Command()).trim();  if (cmd == null || cmd.equals(""))   return "Cannot execute '" + getOS_Command() + "'";  if (isServerProcess())   return executeRemote(cmd);  return executeLocal(cmd);}  }
class C{  public ParsedOperation parseOperation(final String operation,final String baseURI) throws MalformedQueryException {  final String strippedOperation=QueryParserUtil.removeSPARQLQueryProlog(operation).toUpperCase();  final ParsedOperation parsedOperation;  if (strippedOperation.startsWith("SELECT") || strippedOperation.startsWith("CONSTRUCT") || strippedOperation.startsWith("DESCRIBE")|| strippedOperation.startsWith("ASK")) {    parsedOperation=parseQuery(operation,baseURI);  } else {    parsedOperation=parseUpdate(operation,baseURI);  }  return parsedOperation;}  }
class C{  public static GenLayer[] initializeAllBiomeGenerators(long seed,WorldType type,DimensionProperties properties){  boolean flag=false;  boolean hasRivers=properties.hasRivers();  GenLayerIsland genlayerisland=new GenLayerIsland(1L);  GenLayerFuzzyZoom genlayerfuzzyzoom=new GenLayerFuzzyZoom(2000L,genlayerisland);  GenLayerAddIsland genlayeraddisland=new GenLayerAddIsland(1L,genlayerfuzzyzoom);  GenLayerZoom genlayerzoom=new GenLayerZoom(2001L,genlayeraddisland);  genlayeraddisland=new GenLayerAddIsland(2L,genlayerzoom);  genlayeraddisland=new GenLayerAddIsland(50L,genlayeraddisland);  genlayeraddisland=new GenLayerAddIsland(70L,genlayeraddisland);  GenLayerRemoveTooMuchOcean genlayerremovetoomuchocean=new GenLayerRemoveTooMuchOcean(2L,genlayeraddisland);  GenLayerAddSnow genlayeraddsnow=new GenLayerAddSnow(2L,genlayerremovetoomuchocean);  genlayeraddisland=new GenLayerAddIsland(3L,genlayeraddsnow);  GenLayerEdge genlayeredge=new GenLayerEdge(2L,genlayeraddisland,GenLayerEdge.Mode.COOL_WARM);  genlayeredge=new GenLayerEdge(2L,genlayeredge,GenLayerEdge.Mode.HEAT_ICE);  genlayeredge=new GenLayerEdge(3L,genlayeredge,GenLayerEdge.Mode.SPECIAL);  genlayerzoom=new GenLayerZoom(2002L,genlayeredge);  genlayerzoom=new GenLayerZoom(2003L,genlayerzoom);  genlayeraddisland=new GenLayerAddIsland(4L,genlayerzoom);  GenLayerAddMushroomIsland genlayeraddmushroomisland=new GenLayerAddMushroomIsland(5L,genlayeraddisland);  GenLayerDeepOcean genlayerdeepocean=new GenLayerDeepOcean(4L,genlayeraddmushroomisland);  GenLayer genlayer2=GenLayerZoom.magnify(1000L,genlayerdeepocean,0);  byte b0=4;  if (type == WorldType.LARGE_BIOMES) {    b0=6;  }  if (flag) {    b0=4;  }  b0=GenLayer.getModdedBiomeSize(type,b0);  GenLayer genlayer=GenLayerZoom.magnify(1000L,genlayer2,0);  Object object=type.getBiomeLayer(seed,genlayer2);  GenLayer genlayer1;  if (hasRivers) {    GenLayerRiverInit genlayerriverinit=new GenLayerRiverInit(100L,genlayer);    genlayer1=GenLayerZoom.magnify(1000L,genlayerriverinit,2);    genlayer=GenLayerZoom.magnify(1000L,genlayerriverinit,2);  } else   genlayer1=genlayer;  GenLayerHillsExtended genlayerhills=new GenLayerHillsExtended(1000L,(GenLayer)object,genlayer1);  genlayer=GenLayerZoom.magnify(1000L,genlayer,b0);  GenLayerSmooth genlayersmooth;  if (hasRivers) {    GenLayerRiver genlayerriver=new GenLayerRiver(1L,genlayer);    genlayersmooth=new GenLayerSmooth(1000L,genlayerriver);  } else   genlayersmooth=new GenLayerSmooth(1000L,genlayer);  object=new GenLayerRareBiome(1001L,genlayerhills);  for (int j=0; j < b0; ++j) {    object=new GenLayerZoom((long)(1000 + j),(GenLayer)object);    if (j == 0) {      object=new GenLayerAddIsland(3L,(GenLayer)object);    }    if (j == 1) {      object=new zmaster587.advancedRocketry.world.gen.GenLayerShoreExtended(1000L,(GenLayer)object);    }  }  GenLayerSmooth genlayersmooth1=new GenLayerSmooth(1000L,(GenLayer)object);  GenLayerVoronoiExtended genlayervoronoizoom;  if (hasRivers) {    GenLayerRiverMix genlayerrivermix=new GenLayerRiverMix(100L,genlayersmooth1,genlayersmooth);    genlayervoronoizoom=new GenLayerVoronoiExtended(10L,genlayerrivermix);    genlayerrivermix.initWorldGenSeed(seed);    genlayer=genlayerrivermix;  } else   genlayer=genlayervoronoizoom=new GenLayerVoronoiExtended(10L,genlayersmooth1);  genlayervoronoizoom.initWorldGenSeed(seed);  return new GenLayer[]{genlayer,genlayervoronoizoom,genlayer};}  }
class C{  public static void zipFiles(File zip,File... files) throws IOException {  try (BufferedOutputStream bufferedOut=new BufferedOutputStream(new FileOutputStream(zip))){    zipFiles(bufferedOut,files);  } }  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void findCoveredLineEdges(){  for (Iterator nodeit=op.getGraph().getNodes().iterator(); nodeit.hasNext(); ) {    Node node=(Node)nodeit.next();    ((DirectedEdgeStar)node.getEdges()).findCoveredLineEdges();  }  for (Iterator it=op.getGraph().getEdgeEnds().iterator(); it.hasNext(); ) {    DirectedEdge de=(DirectedEdge)it.next();    Edge e=de.getEdge();    if (de.isLineEdge() && !e.isCoveredSet()) {      boolean isCovered=op.isCoveredByA(de.getCoordinate());      e.setCovered(isCovered);    }  }}  }
class C{  @Override public void unSubscribeTopic(String topicName){  if (getToken() != null)   new TopicTask(mContext,getToken(),topicName,false).execute();}  }
class C{  public String dontNormalizeTipText(){  return "Turn normalization off";}  }
class C{  private static void addParameter(StringBuffer url,String name,String value){  name=CharEscapers.uriEscaper().escape(name);  value=CharEscapers.uriEscaper().escape(value);  if (url.indexOf("?") == -1) {    url.append('?');  } else {switch (url.charAt(url.length() - 1)) {case '?':case '&':      break;default :    url.append('&');}}url.append(name).append('=').append(value);}  }
class C{  public SmapStratum(String stratumName){  this.stratumName=stratumName;  fileNameList=new ArrayList<String>();  filePathList=new ArrayList<String>();  lineData=new ArrayList<LineInfo>();  lastFileID=0;}  }
class C{  static void checkDoublesSerVer(int serVer){  int max=DoublesSketch.DOUBLES_SER_VER;  int min=DoublesSketch.MIN_DOUBLES_SER_VER;  if ((serVer > max) || (serVer < min)) {    throw new SketchesArgumentException("Possible corruption: Unsupported Serialization Version: " + serVer);  }}  }
class C{  public static void dismiss(Context context,int id){  ((android.app.NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE)).cancel(id);}  }
class C{  public ParkingAgentsTracker(Scenario scenario,double distance){  this.scenario=scenario;  this.distance=distance;  this.carLegAgents=new HashSet<Id>();  this.linkEnteredAgents=new HashSet<Id>();  this.selectedParkingsMap=new HashMap<Id,Id>();  this.lastTimeStepsLinkEnteredAgents=new TreeSet<Id>();  this.searchingAgents=new HashSet<Id>();  this.nextActivityFacilityMap=new HashMap<Id,ActivityFacility>();  this.agents=new HashMap<Id,PersonDriverAgentImpl>();}  }
class C{  public DrmInfoRequest(int infoType,String mimeType){  mInfoType=infoType;  mMimeType=mimeType;  if (!isValid()) {    final String msg="infoType: " + infoType + ","+ "mimeType: "+ mimeType;    throw new IllegalArgumentException(msg);  }}  }
class C{  public void deleteUnusedNodes(){  if (ivs != null) {    for (    InductionVariable iv : ivs.values()) {      iv.deleteUnusedNodes();    }  }}  }
class C{  private static void ByteReadArrayWrite() throws Throwable {  byte[] buf=new byte[8192];  int off=0;  reset();  int datum=dis.read();  while (datum != -1) {    if (off == 8192) {      ios.write(buf,0,off);      off=0;    }    buf[off++]=(byte)(datum & 0xff);    datum=dis.read();  }  if (off > 0) {    ios.write(buf,0,off);  }  ios.close();  check(Arrays.equals(data,baos.toByteArray()));}  }
class C{  public static boolean isReservedGridIoPolicy(byte key){  return key >= 0 && key <= 31;}  }
class C{  public boolean isFalsePositive(int priority){  return priority > Priorities.EXP_PRIORITY;}  }
class C{  @Override public Iterator<AttributeRole> allAttributeRoles(){  return this.delegate.allAttributeRoles();}  }
class C{  public boolean isPolyfilled(){  final ContainerType<?> containingType=this.getContainingType();  if ((containingType == null)) {    return false;  }  return (containingType.isPolyfill() || containingType.isStaticPolyfill());}  }
class C{  public final void buildSignedDirectory() throws Exception {  try (ByteArrayOutputStream mimeContent=new ByteArrayOutputStream()){    build(mimeContent);    log.debug("Generated directory content:\n{}\n",mimeContent.toString());    byte[] contentBytes=mimeContent.toByteArray();    mimeContent.reset();    sign(contentBytes,mimeContent);    Files.write(tempConfPath,mimeContent.toByteArray());    log.debug("Written signed directory to '{}'",tempConfPath);  } }  }
class C{  @Deprecated public void listSharedNotebooks(OnClientCallback<List<SharedNotebook>> callback){  AsyncReflector.execute(mClient,callback,"listSharedNotebooks",mAuthenticationToken);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:00.269 -0500",hash_original_method="32AC306673DA52F864FB7CE370FDF901",hash_generated_method="175458E7CDA47AE2731389BF733FFE33") public AccessibilityServiceInfo(){}  }
class C{  public String resolveMacros(String parameterKey,String parameterValue) throws UndefinedMacroError {  int startIndex=parameterValue.indexOf(Operator.MACRO_STRING_START);  if (startIndex == -1) {    return parameterValue;  }  StringBuffer result=new StringBuffer();  while (startIndex >= 0) {    result.append(parameterValue.substring(0,startIndex));    int endIndex=parameterValue.indexOf(Operator.MACRO_STRING_END,startIndex + 2);    if (endIndex == -1) {      return parameterValue;    }    String macroString=parameterValue.substring(startIndex + 2,endIndex);    if (STRING_EXPANSION_MACRO_KEYS.contains(macroString) || LEGACY_STRING_EXPANSION_MACRO_KEYS.contains(macroString.length() > 1 ? macroString.substring(0,2) : macroString)) {      result.append(Operator.MACRO_STRING_START + macroString + Operator.MACRO_STRING_END);    } else {      String macroValue=this.getMacro(macroString);      if (macroValue != null) {        result.append(macroValue);      } else {        if (this.process.getRootOperator().getCompatibilityLevel().isAtLeast(THROW_ERROR_ON_UNDEFINED_MACRO)) {          throw new UndefinedMacroError(parameterKey,macroString);        } else {          result.append(Operator.MACRO_STRING_START + macroString + Operator.MACRO_STRING_END);        }      }    }    parameterValue=parameterValue.substring(endIndex + 1);    startIndex=parameterValue.indexOf(Operator.MACRO_STRING_START);  }  result.append(parameterValue);  return result.toString();}  }
class C{  public static void shuffle(double[] a,int lo,int hi){  if (lo < 0 || lo > hi || hi >= a.length) {    throw new IndexOutOfBoundsException("Illegal subarray range");  }  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    double temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  private Track PromptToStagingDialog(){  List<Track> tracksIn=_terminateLocation.getTrackByNameList(null);  List<Track> validTracks=new ArrayList<Track>();  for (  Track track : tracksIn) {    if (checkTerminateStagingTrack(track)) {      validTracks.add(track);    }  }  if (validTracks.size() > 1) {    Object[] tracks=new Object[validTracks.size()];    for (int i=0; i < validTracks.size(); i++) {      tracks[i]=validTracks.get(i);    }    Track selected=(Track)JOptionPane.showInputDialog(null,MessageFormat.format(Bundle.getMessage("TrainTerminatingStaging"),new Object[]{_train.getName(),_terminateLocation.getName()}),Bundle.getMessage("SelectArrivalTrack"),JOptionPane.QUESTION_MESSAGE,null,tracks,null);    if (selected != null) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildUserSelectedArrival"),new Object[]{selected.getName(),selected.getLocation().getName()}));    }    return selected;  } else   if (validTracks.size() == 1) {    return validTracks.get(0);  }  return null;}  }
class C{  public Problem(){  super();}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  public static LanguageModel<IString> makeLM(String filePath) throws IOException {  if (filePath == null)   return null;  return LanguageModelFactory.load(filePath);}  }
class C{  public void clearCache(){synchronized (mDiskCacheLock) {    mDiskCacheStarting=true;    mDiskCacheReady=false;    if (mDiskLruCache != null && !mDiskLruCache.isClosed()) {      try {        mDiskLruCache.delete();        if (DEBUG) {          Log.d(TAG,"Disk cache cleared");        }      } catch (      IOException e) {        e.printStackTrace();        Log.e(TAG,"clearCache - " + e);      }      mDiskLruCache=null;      initDiskCache();    }  }}  }
class C{  @Override public void draw(final CountDownLatch latch){  if (!initialized) {    return;  }  if (isShowing()) {    canvasRenderer.draw();  }  if (latch != null) {    latch.countDown();  }}  }
class C{  public List<Map<String,?>> parse(Map<String,?> info,List<List<Object>> rows){  @SuppressWarnings("unchecked") List<String> fieldNames=(List<String>)info.get("names");  Map<String,Integer> fieldNameIndexes=new HashMap<String,Integer>();  for (int i=0; i < fieldNames.size(); ++i) {    fieldNameIndexes.put(fieldNames.get(i),i);  }  List<Map<String,?>> result=new ArrayList<Map<String,?>>(rows.size());  for (  List<Object> r : rows) {    Map<String,Object> resultRow=new HashMap<String,Object>();    for (    Map.Entry<String,Integer> f : fieldNameIndexes.entrySet()) {      resultRow.put(f.getKey(),r.get(f.getValue()));    }    result.add(resultRow);  }  return result;}  }
class C{  synchronized static public void start(String name){  if (mFinalPrefix.get() != null) {    name=mFinalPrefix.get() + name;  }  final Pair<Long,String> key=new Pair<Long,String>(Thread.currentThread().getId(),name);  final Long old=mInstance.mThreadMeasures.put(key,System.currentTimeMillis());  if (old != null) {    mInstance.mDuplicateStarts.add(name);  }  getOrAddMeasure(name).open();}  }
class C{  public TObjectDoubleHashMap(TObjectHashingStrategy<K> strategy){  super(strategy);}  }
class C{  public void commitResize(){  resizeWidgetIfNeeded(true);  requestLayout();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.068 -0500",hash_original_method="14AE6538EB86DCD6EBFC0019A87B65D0",hash_generated_method="E422BC2875F034EC395ED434A5EE1290") private WrapperInit(){}  }
class C{  public List depthFirst(){  return depthFirst(true);}  }
class C{  public void remove(int index){  int keyLength=keys.length;  int keyIndex=index >= keyLength ? index - 1 : index;  Object old=keys[keyIndex];  addMemory(-map.getKeyType().getMemory(old));  Object[] newKeys=new Object[keyLength - 1];  DataUtils.copyExcept(keys,newKeys,keyLength,keyIndex);  keys=newKeys;  if (values != null) {    old=values[index];    addMemory(-map.getValueType().getMemory(old));    Object[] newValues=new Object[keyLength - 1];    DataUtils.copyExcept(values,newValues,keyLength,index);    values=newValues;    totalCount--;  }  if (children != null) {    addMemory(-DataUtils.PAGE_MEMORY_CHILD);    long countOffset=children[index].count;    int childCount=children.length;    PageReference[] newChildren=new PageReference[childCount - 1];    DataUtils.copyExcept(children,newChildren,childCount,index);    children=newChildren;    totalCount-=countOffset;  }}  }
class C{  public static <Req,Res>void loadTestThroughput(final IntervalGenerator intervalGen,final int warmupRequests,final ReceivePort<Req> requests,final RequestExecutor<Req,Res> executor,final SendPort<TimingEvent<Res>> eventChannel,final FiberScheduler fiberScheduler) throws InterruptedException, SuspendExecution {  loadTestThroughput(intervalGen,warmupRequests,requests,executor,eventChannel,fiberScheduler,null);}  }
class C{  private EndIsland tryCreateEndIsland(int chunkX,int chunkY){  if (chunkX == 0 && chunkY == 0) {    return createMainEndIsland(chunkX,chunkY);  } else   if (chunkX * chunkX + chunkY * chunkY > 4096) {    return tryCreateEndIslandInOuterLands(chunkX,chunkY);  } else {    return null;  }}  }
class C{  public String canonicalCase(final String s){  if (!ignoreCase)   return s;  return s.toUpperCase(Locale.US).toLowerCase(Locale.US);}  }
class C{  public synchronized void start(){  if (isActive()) {    MONITOR_LOGGER.logp(Level.FINER,StringMonitor.class.getName(),"start","the monitor is already active");    return;  }  for (  ObservedObject o : observedObjects) {    final StringMonitorObservedObject smo=(StringMonitorObservedObject)o;    smo.setStatus(MATCHING_OR_DIFFERING);  }  doStart();}  }
class C{  public void addResultListener(ResultListener listener){  listenerList.add(listener);}  }
class C{  public boolean implies(ProtectionDomain domain,Permission permission){  PermissionCollection pc;  if (pdMapping == null) {    initPolicy(this);  }synchronized (pdMapping) {    pc=pdMapping.get(domain.key);  }  if (pc != null) {    return pc.implies(permission);  }  pc=getPermissions(domain);  if (pc == null) {    return false;  }synchronized (pdMapping) {    pdMapping.put(domain.key,pc);  }  return pc.implies(permission);}  }
class C{  @SuppressWarnings("unchecked") public void createAndShowGui(Component component){  setTitle(s_logger.localizeMessage("guiAboutTitle"));  ArrayList<Image> images=new ArrayList<Image>();  images.add(getImage("AD16.png"));  images.add(getImage("AD32.png"));  setIconImages(images);  Container pane=getContentPane();  Locale locale=Locale.getDefault();  pane.setComponentOrientation(ComponentOrientation.getOrientation(locale));  pane.setLayout(new GridBagLayout());  m_rowCounter=0;  JLabel logo=new JLabel(new ImageIcon(getImage("ADempiere.png")));  JLabel label=new JLabel(s_logger.localizeMessage("guiAboutHeading"));  label.setFont(new Font("Dialog",Font.BOLD,14));  pane.add(label,getHeadingConstraints());  try {    Class ademp=Class.forName("org.compiere.Adempiere",false,this.getClass().getClassLoader());    logo.setIcon(new ImageIcon(getImage("AD10030.png")));    Field subtitle=ademp.getField("SUB_TITLE");    logo.setText(subtitle.get(null).toString());    logo.setHorizontalTextPosition(SwingConstants.CENTER);    logo.setVerticalTextPosition(SwingConstants.BOTTOM);    logo.setFont(new Font("Serif",Font.ITALIC,10));    logo.setForeground(Color.BLUE);    Field mainVersion=ademp.getField("MAIN_VERSION");    Field dateVersion=ademp.getField("DATE_VERSION");    String versionString=new StringBuffer(mainVersion.get(null).toString()).append(" @ ").append(dateVersion.get(null).toString()).toString();    label=new JLabel(versionString);    pane.add(label,getVersionConstraints());    Field copyright=ademp.getField("COPYRIGHT");    label=new JLabel(copyright.get(null).toString());    pane.add(label,getAdempCprConstraints());    Field url=ademp.getField("URL");    label=new JLabel(url.get(null).toString());    label.setForeground(Color.BLUE);    pane.add(label,getUrlConstraints());  } catch (  Exception e) {  }  pane.add(logo,getLogoConstraints());  label=new JLabel(s_logger.localizeMessage("guiWindowTitle"));  label.setFont(new Font("DIALOG",Font.BOLD,18));  label.setForeground(Color.RED);  pane.add(label,getTitleConstraints());  label=new JLabel(s_logger.localizeMessage("guiWindowDescription"));  label.setFont(new Font("Dialog",Font.ITALIC,12));  pane.add(label,getDescrConstraints());  JTextArea text=new JTextArea(s_logger.localizeMessage("copyright"));  text.setFont(new Font("Dialog",Font.PLAIN,10));  text.setBackground(label.getBackground());  pane.add(text,getCopyrConstraints());  m_buttonClose=new JButton(s_logger.localizeMessage("guiButtonClose"));  m_buttonClose.setMnemonic(new Integer(s_logger.localizeMessage("guiButtonCloseMnemonic")));  m_buttonClose.setIcon(new ImageIcon(getImage("Cancel16.png")));  m_buttonClose.addActionListener(this);  pane.add(m_buttonClose,getCloseConstraints());  pack();  validate();  m_buttonClose.requestFocusInWindow();  setLocationRelativeTo(component);  setVisible(true);}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null) {    for (Entry e=header.after; e != header; e=e.after)     if (e.value == null)     return true;  } else {    for (Entry e=header.after; e != header; e=e.after)     if (value.equals(e.value))     return true;  }  return false;}  }
class C{  public void stop(){  run=false;}  }
class C{  private void initTrees(ActivityFacilities facilities,DestinationChoiceConfigGroup config){  log.info("Doing location choice for activities: " + defineFlexibleActivities.getFlexibleTypes().toString());  TreesBuilder treesBuilder=new TreesBuilder(defineFlexibleActivities.getFlexibleTypes(),this.scenario.getNetwork(),config);  treesBuilder.setActTypeConverter(actTypeConverter);  treesBuilder.createTrees(facilities);  this.facilitiesOfType=treesBuilder.getFacilitiesOfType();  this.quadTreesOfType=treesBuilder.getQuadTreesOfType();}  }
class C{  public boolean updateStoragePoolObjectFromVMAXStoragePoolIndication(){  return retriveAndProcessIndicationAttributeValues(CIMConstants.STORAGE_POOL_INDICATION_FREE_CAPACITY,CIMConstants.STORAGE_POOL_INDICATION_POOL_NAME,CIMConstants.STORAGE_POOL_INDICATION_TOTAL_CAPACITY,CIMConstants.STORAGE_POOL_INDICATION_SUBSCRIBED_CAPACITY);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endPrefixMapping: " + prefix);  if (m_contentHandler != null) {    m_contentHandler.endPrefixMapping(prefix);  }}  }
class C{  public boolean SendBinaryMessage(String text,String SMSC){  String SMSCPhoneNumber;  String dstPhoneNumber;  String dstSipUri=super.getToUri();  if ((SMSCPhoneNumber=NgnUriUtils.getValidPhoneNumber(SMSC)) != null && (dstPhoneNumber=NgnUriUtils.getValidPhoneNumber(dstSipUri)) != null) {    super.setToUri(SMSC);    super.addHeader("Content-Type",NgnContentType.SMS_3GPP);    super.addHeader("Content-Transfer-Encoding","binary");    super.addCaps("+g.3gpp.smsip");    RPMessage rpMessage;    rpMessage=SMSEncoder.encodeSubmit(++NgnMessagingSession.SMS_MR,SMSCPhoneNumber,dstPhoneNumber,text);    long rpMessageLen=rpMessage.getPayloadLength();    ByteBuffer payload=ByteBuffer.allocateDirect((int)rpMessageLen);    long payloadLength=rpMessage.getPayload(payload,(long)payload.capacity());    boolean ret=mSession.send(payload,payloadLength);    rpMessage.delete();    if (NgnMessagingSession.SMS_MR >= 255) {      NgnMessagingSession.SMS_MR=0;    }    return ret;  } else {    Log.e(TAG,String.format("SMSC=%s or RemoteUri=%s is invalid",SMSC,dstSipUri));    return sendTextMessage(text);  }}  }
class C{  public boolean isOpenedToLeft(){  return openedToLeft;}  }
class C{  public EstimatorTimeSource(int updateIntervalMillis){  this(new SystemTimeSource(),updateIntervalMillis,new TriavaNullLogger());}  }
class C{  public boolean hasAvailableAddresses(){  if (isPoolFull() || getPoolAvailability() == 0)   return false; else   return true;}  }
class C{  public void addAttribute(@NonNls final String name,final boolean value){  addAttributeImpl(name,Boolean.toString(value));}  }
class C{  public CannotProceedException(){  super();}  }
class C{  public static int matchOne(String src,String[] patterns){  for (int i=0; i < patterns.length; i++) {    if (match(src,patterns[i]) == true) {      return i;    }  }  return -1;}  }
class C{  public void messages(@Nullable Collection<TcpDiscoveryAbstractMessage> msgs,@Nullable IgniteUuid discardMsgId,@Nullable IgniteUuid discardCustomMsgId){  this.msgs=msgs;  this.discardMsgId=discardMsgId;  this.discardCustomMsgId=discardCustomMsgId;}  }
class C{  public FastStringBuffer clear(){  this.count=0;  return this;}  }
class C{  public ImmutableObjectSet(final ObjectSet<? extends Type> set){  super(set);  this.size=super.size;}  }
class C{  public static DagWrapper serializableInstance(){  return new DagWrapper(Dag.serializableInstance());}  }
class C{  public InferTypeArgumentsDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.INFER_TYPE_ARGUMENTS,project,description,comment,arguments,flags);}  }
class C{  protected MouseAdapter createMouseListener(){  if (mouseListener == null) {    mouseListener=new MouseButtonListener();  }  return mouseListener;}  }
class C{  private void initCameraSettings(){  android.hardware.Camera.CameraInfo info=new android.hardware.Camera.CameraInfo();  android.hardware.Camera.getCameraInfo(mCameraId,info);  int rotation=this.getWindowManager().getDefaultDisplay().getRotation();  int degrees=0;switch (rotation) {case Surface.ROTATION_0:    degrees=0;  break;case Surface.ROTATION_90:degrees=90;break;case Surface.ROTATION_180:degrees=180;break;case Surface.ROTATION_270:degrees=270;break;}int previewRotation;int imageRotation;if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {imageRotation=previewRotation=(info.orientation + degrees) % 360;previewRotation=(360 - previewRotation) % 360;} else {imageRotation=previewRotation=(info.orientation - degrees + 360) % 360;}mCameraOrientation=previewRotation;mCamera.setDisplayOrientation(previewRotation);Camera.Parameters params=mCamera.getParameters();params.setRotation(imageRotation);List<Camera.Size> supportedSizes=params.getSupportedPictureSizes();if (supportedSizes.size() > 0) {Camera.Size maxSizePicture=supportedSizes.get(0);long mult=maxSizePicture.width * maxSizePicture.height;for (int i=1; i < supportedSizes.size(); i++) {Camera.Size curSizePicture=supportedSizes.get(i);long curMult=curSizePicture.width * curSizePicture.height;if (curMult > mult) {mult=curMult;maxSizePicture=curSizePicture;}}params.setPictureSize(maxSizePicture.width,maxSizePicture.height);}try {mCamera.setParameters(params);} catch (Exception e) {Log.e(LOG_TAG,"## initCameraSettings(): set size fails EXCEPTION Msg=" + e.getMessage());}List<Camera.Size> supportedPreviewSizes=params.getSupportedPreviewSizes();if (supportedPreviewSizes.size() > 0) {Camera.Size picturesSize=params.getPictureSize();int cameraAR=picturesSize.width * 100 / picturesSize.height;Camera.Size bestPreviewSize=null;int resolution=0;for (Camera.Size previewSize : supportedPreviewSizes) {int previewAR=previewSize.width * 100 / previewSize.height;if (previewAR == cameraAR) {int mult=previewSize.height * previewSize.width;if (mult > resolution) {bestPreviewSize=previewSize;resolution=mult;}}}if (null != bestPreviewSize) {params.setPreviewSize(bestPreviewSize.width,bestPreviewSize.height);try {mCamera.setParameters(params);} catch (Exception e) {Log.e(LOG_TAG,"## initCameraSettings(): set preview size fails EXCEPTION Msg=" + e.getMessage());}}}try {params.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);mCamera.setParameters(params);} catch (Exception e) {Log.e(LOG_TAG,"## initCameraSettings(): set auto focus fails EXCEPTION Msg=" + e.getMessage());}try {params.setPictureFormat(ImageFormat.JPEG);params.setJpegQuality(JPEG_QUALITY_MAX);mCamera.setParameters(params);} catch (Exception e) {Log.e(LOG_TAG,"## initCameraSettings(): set jpeg quality fails EXCEPTION Msg=" + e.getMessage());}}  }
class C{  ArrayList<Tile> spontaneousGrowth(double dispersion_value){  ArrayList<Tile> urbanized=new ArrayList<Tile>();  for (int i=0; i < dispersion_value; i++) {    int x=random.nextInt(grid_width), y=random.nextInt(grid_height);    while (landscape.get(x,y) == null) {      x=random.nextInt(grid_width);      y=random.nextInt(grid_height);    }    Tile t=(Tile)landscape.get(x,y);    if (t.urbanized) {      continue;    } else     if (t.excluded) {      continue;    } else {      Tile newlyUrbanized=(Tile)landscape.get(x,y);      boolean successful=urbanizeTile(newlyUrbanized);      if (successful) {        urbanized.add(newlyUrbanized);      }    }  }  return urbanized;}  }
class C{  public void createAccount(String username,String password) throws XMPPException {  if (!supportsAccountCreation()) {    throw new XMPPException("Server does not support account creation.");  }  Map<String,String> attributes=new HashMap<String,String>();  for (  String attributeName : getAccountAttributes()) {    attributes.put(attributeName,"");  }  createAccount(username,password,attributes);}  }
class C{  public void remove(Product product){  try {    solrDao.remove(product.getId());  } catch (  IOException|SolrServerException ex) {    LOGGER.error("Cannot remove product " + product.getIdentifier() + "from index",ex);  }}  }
class C{  public boolean isLastPointGood(){  return this.lastPointGood;}  }
class C{  public void reset(){  parser.reset();}  }
class C{  public void testDoubleValueZero(){  String a="0";  double result=0.0;  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public String main_class(){  return manifest.package_name + "." + name;}  }
class C{  public static Response createConnectResponse(int connectionIdValue) throws IllegalArgumentException {  Response connectSuccessResponse=new Response();  connectSuccessResponse.setMessageType(Message.CONNECT_RESPONSE);  ConnectionIdAttribute connectionIdAttribute=AttributeFactory.createConnectionIdAttribute(connectionIdValue);  connectSuccessResponse.putAttribute(connectionIdAttribute);  return connectSuccessResponse;}  }
class C{  private void extendColourMap(int highest){  for (int i=m_colorList.size(); i < highest; i++) {    Color pc=m_DefaultColors[i % 10];    int ija=i / 10;    ija*=2;    for (int j=0; j < ija; j++) {      pc=pc.brighter();    }    m_colorList.add(pc);  }}  }
class C{  public static void scrollTo(TextView widget,Layout layout,int x,int y){  final int horizontalPadding=widget.getTotalPaddingLeft() + widget.getTotalPaddingRight();  final int availableWidth=widget.getWidth() - horizontalPadding;  final int top=layout.getLineForVertical(y);  Alignment a=layout.getParagraphAlignment(top);  boolean ltr=layout.getParagraphDirection(top) > 0;  int left, right;  if (widget.getHorizontallyScrolling()) {    final int verticalPadding=widget.getTotalPaddingTop() + widget.getTotalPaddingBottom();    final int bottom=layout.getLineForVertical(y + widget.getHeight() - verticalPadding);    left=Integer.MAX_VALUE;    right=0;    for (int i=top; i <= bottom; i++) {      left=(int)Math.min(left,layout.getLineLeft(i));      right=(int)Math.max(right,layout.getLineRight(i));    }  } else {    left=0;    right=availableWidth;  }  final int actualWidth=right - left;  if (actualWidth < availableWidth) {    if (a == Alignment.ALIGN_CENTER) {      x=left - ((availableWidth - actualWidth) / 2);    } else     if ((ltr && (a == Alignment.ALIGN_OPPOSITE)) || (!ltr && (a == Alignment.ALIGN_NORMAL)) || (a == Alignment.ALIGN_RIGHT)) {      x=left - (availableWidth - actualWidth);    } else {      x=left;    }  } else {    x=Math.min(x,right - availableWidth);    x=Math.max(x,left);  }  widget.scrollTo(x,y);}  }
class C{  public synchronized void freeInstance(DTMIterator obj){  m_freeStack.add(obj);}  }
class C{  public double minLongitude(){  return minLongitude;}  }
class C{  public static CptInvariantUpdaterWrapper serializableInstance(){  return new CptInvariantUpdaterWrapper(BayesImWrapper.serializableInstance(),new Parameters());}  }
class C{  @SuppressLint("DrawAllocation") @Override protected void onDraw(Canvas canvas){  if (hourlyList == null) {    return;  }  float drawSpaceWidth=getMeasuredWidth();  float drawSpaceHeight=getMeasuredHeight() - MARGIN_BOTTOM - MARGIN_TOP;  int highestTemp=hourlyList.get(0).temp;  int lowestTemp=hourlyList.get(0).temp;  for (int i=0; i < hourlyList.size(); i++) {    if (hourlyList.get(i).temp > highestTemp) {      highestTemp=hourlyList.get(i).temp;    }    if (hourlyList.get(i).temp < lowestTemp) {      lowestTemp=hourlyList.get(i).temp;    }  }  if (highestTemp == lowestTemp) {    highestTemp+=7;    lowestTemp-=7;  }  int[] timeLineCoordinates=new int[hourlyList.size()];  for (int i=0; i < timeLineCoordinates.length; i++) {    timeLineCoordinates[i]=(int)(drawSpaceWidth / (timeLineCoordinates.length * 2.0) * (2 * i + 1));  }  Point[] tempPoints=new Point[hourlyList.size()];  for (int i=0; i < tempPoints.length; i++) {    tempPoints[i]=new Point(timeLineCoordinates[i],(int)(drawSpaceHeight / (highestTemp - lowestTemp) * (highestTemp - hourlyList.get(i).temp) + MARGIN_TOP));  }  Point[] popPoints=new Point[hourlyList.size()];  for (int i=0; i < popPoints.length; i++) {    popPoints[i]=new Point(timeLineCoordinates[i],(int)(drawSpaceHeight / 100.0 * (100 - hourlyList.get(i).pop) + MARGIN_TOP));  }  this.drawTimeLine(canvas,timeLineCoordinates);  this.drawPopLine(canvas,popPoints);  this.drawTemp(canvas,tempPoints);}  }
class C{  public void flush() throws IOException {  mSocket.flush();}  }
class C{  static void resetPeakThreadCount(){  JMXSupport.resetPeakThreadCount();}  }
class C{  public Turning(RotatingEntity parent,String label,double direction){  super(parent,label);  this.direction=direction;}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      if (bos != null)       bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public void clearAll(){  if (items != null) {    items.clear();  }  if (emptyItems != null) {    emptyItems.clear();  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.AFTER_CODE___ANONYMOUS_AFTER_CODE_11:    return ((InternalEList<?>)getAnonymous_afterCode_1_1()).basicRemove(otherEnd,msgs);case UmplePackage.AFTER_CODE___ANONYMOUS_AFTER_CODE_21:  return ((InternalEList<?>)getAnonymous_afterCode_2_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  public String[] parseLine(String nextLine) throws IOException {  return parseLine(nextLine,false);}  }
class C{  @Override protected void calculateBarWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){  CategoryAxis xAxis=plot.getDomainAxisForDataset(rendererIndex);  CategoryDataset data=plot.getDataset(rendererIndex);  if (data != null) {    PlotOrientation orientation=plot.getOrientation();    double space=0.0;    if (orientation == PlotOrientation.HORIZONTAL) {      space=dataArea.getHeight();    } else     if (orientation == PlotOrientation.VERTICAL) {      space=dataArea.getWidth();    }    double maxWidth=space * getMaximumBarWidth();    int groups=this.seriesToGroupMap.getGroupCount();    int categories=data.getColumnCount();    int columns=groups * categories;    double categoryMargin=0.0;    double itemMargin=0.0;    if (categories > 1) {      categoryMargin=xAxis.getCategoryMargin();    }    if (groups > 1) {      itemMargin=getItemMargin();    }    double used=space * (1 - xAxis.getLowerMargin() - xAxis.getUpperMargin()- categoryMargin- itemMargin);    if (columns > 0) {      state.setBarWidth(Math.min(used / columns,maxWidth));    } else {      state.setBarWidth(Math.min(used,maxWidth));    }  }}  }
class C{  public static CharSequence[] split(CharSequence line,int delimiter){  CharSequence[] tokens0=split(line,delimiter,N);  if (tokens0.length < N) {    return tokens0;  } else {    CharSequence[] tokens1=split(tokens0[N - 1],delimiter);    CharSequence[] tokens2=new CharSequence[tokens0.length + tokens1.length - 1];    System.arraycopy(tokens0,0,tokens2,0,tokens0.length - 1);    System.arraycopy(tokens1,0,tokens2,tokens0.length - 1,tokens1.length);    return tokens2;  }}  }
class C{  public final void sendTo(ByteBufferWriter out){  finishWriting();  if (this.chunks != null) {    for (    ByteBuffer bb : this.chunks) {      basicSendTo(out,bb);    }  }  basicSendTo(out,this.buffer);}  }
class C{  protected MapMetaBuilder(){  this.meta=Diorite.getCore().getItemFactory().construct(MapMeta.class);}  }
class C{  public void start(){  if (isStarted) {    log.info("Coordinator stream producer already started");    return;  }  log.info("Starting coordinator stream producer.");  systemProducer.start();  isStarted=true;}  }
class C{  public static boolean propertyInherits(CSSName cssName){  return cssName.propertyInherits;}  }
class C{  public void trace() throws IOException {  writeCode(TRACE);}  }
class C{  public DoubleMatrix1D viewRow(int row){  checkRow(row);  int viewSize=this.columns;  int viewZero=columnZero;  int viewStride=this.columnStride;  int[] viewOffsets=this.columnOffsets;  int viewOffset=this.offset + _rowOffset(_rowRank(row));  return new SelectedDenseDoubleMatrix1D(viewSize,this.elements,viewZero,viewStride,viewOffsets,viewOffset);}  }
class C{  protected void makeContourLine(DrawContext dc){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.getRenderables().clear();  double ve=dc.getVerticalExaggeration();  Intersection[] interArray=dc.getSurfaceGeometry().intersect(this.getElevation() * ve,this.getSector());  if (interArray != null) {    ArrayList<Intersection> inter=new ArrayList<Intersection>(Arrays.asList(interArray));    if (isViewClippingEnabled())     inter=filterIntersectionsOnViewFrustum(dc,inter);    inter=filterIntersections(dc,inter);    makePolylinesConnected(dc,inter,this.maxConnectingDistance);  }}  }
class C{  public SocketAddress obtainLocalAddress(InetAddress dst,int dstPort,InetAddress localAddress,int localPort) throws IOException {  return this.ioHandler.obtainLocalAddress(dst,dstPort,localAddress,localPort);}  }
class C{  public IssueMatcher code(String expectedCode){  return code().equals(expectedCode);}  }
class C{  public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_caseorder_avt)   m_caseorder_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_dataType_avt)   m_dataType_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_lang_avt)   m_lang_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_order_avt)   m_order_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_selectExpression)   m_selectExpression.fixupVariables(vnames,cstate.getGlobalsSize());}  }
class C{  public static Appendable format(boolean b,Appendable a) throws IOException {  if (a == null)   throw new IllegalArgumentException("Appendable Cannot Be Null");  return b ? a.append("true") : a.append("false");}  }
class C{  void removeInitiatorsFromStorageView(String viewName,String clusterName,List<PortInfo> initiatorPortInfo) throws VPlexApiException {  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexStorageViewInfo storageViewInfo=discoveryMgr.findStorageViewOnCluster(viewName,clusterName,false);  if (storageViewInfo == null) {    throw VPlexApiException.exceptions.couldNotFindStorageView(viewName);  }  List<VPlexInitiatorInfo> initiatorInfoList=findInitiatorsOnCluster(storageViewInfo.getClusterId(),initiatorPortInfo,null);  if (initiatorInfoList.size() != initiatorPortInfo.size()) {    StringBuffer notFoundInitiators=new StringBuffer();    for (    PortInfo portInfo : initiatorPortInfo) {      if (notFoundInitiators.length() == 0) {        notFoundInitiators.append(portInfo.getPortWWN());      } else {        notFoundInitiators.append(" ,").append(portInfo.getPortWWN());      }    }    throw VPlexApiException.exceptions.couldNotFindInitiators(notFoundInitiators.toString());  }  removeStorageViewInitiators(storageViewInfo,initiatorInfoList);}  }
class C{  public T caseAnonymous_traceOptions_1_(Anonymous_traceOptions_1_ object){  return null;}  }
class C{  private void createChildren(){  for (  final ITreeNode<CTag> child : m_tagNode.getChildren()) {    add(new CTagTreeNode(child));  }}  }
class C{  public CTrackingResultsTable(final CTrackingResultContainer container){  m_container=Preconditions.checkNotNull(container,"IE01691: Container argument can not be null");  m_model=new CTrackingResultsTableModel(container);  setModel(m_model);  m_sorter=new TableRowSorter<TableModel>(m_model);  setRowSorter(m_sorter);  m_sorter.setComparator(ADDRESS_COLUMN,new LexicalComparator());  getColumnModel().getColumn(STATUS_COLUMN).setCellRenderer(new CStatusColumnRenderer());  getColumnModel().getColumn(INSTRUCTION_COLUMN).setCellRenderer(new CMonospaceRenderer());  final InternalSelectionListener listener=new InternalSelectionListener();  getSelectionModel().addListSelectionListener(listener);  addMouseListener(listener);}  }
class C{  public byte[] allocReadIOBuffer(){  if (_readIOBuffer != null) {    throw new IllegalStateException("Trying to call allocReadIOBuffer() second time");  }  _readIOBuffer=_bufferRecycler.allocByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER);  return _readIOBuffer;}  }
class C{  public HttpResponse echo(Object msg){  HttpResponse response;  if (msg instanceof HttpRequest) {    HttpRequest request=(HttpRequest)msg;    if (request instanceof FullHttpRequest) {      response=new DefaultFullHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK,((FullHttpRequest)msg).content());      response.headers().set("Request-Type","Full");    } else     if (request instanceof StreamedHttpRequest) {      response=new DefaultStreamedHttpResponse(request.getProtocolVersion(),HttpResponseStatus.OK,((StreamedHttpRequest)msg));      response.headers().set("Request-Type","Streamed");    } else {      throw new IllegalArgumentException("Unsupported HTTP request: " + request);    }    if (HttpUtil.isTransferEncodingChunked(request)) {      HttpUtil.setTransferEncodingChunked(response,true);    } else     if (HttpUtil.isContentLengthSet(request)) {      long contentLength=HttpUtil.getContentLength(request);      response.headers().set("Request-Content-Length",contentLength);      HttpUtil.setContentLength(response,contentLength);    } else {      HttpUtil.setContentLength(response,0);    }    response.headers().set("Request-Uri",request.uri());  } else {    throw new IllegalArgumentException("Unsupported message: " + msg);  }  return response;}  }
class C{  public boolean occurSymbol(Object name){  return table.containsKey(name);}  }
class C{  public void removeListener(Listener listener){  queue.remove(listener);  long casFrequency;  while ((casFrequency=currentScheduledFrequency.get()) > 0 && queue.isEmpty()) {    if (currentScheduledFrequency.compareAndSet(casFrequency,-1)) {      break;    }  }}  }
class C{  public void stopAccounts(List<String> matrixIds){  for (  String matrixId : matrixIds) {    if (mMatrixIds.indexOf(matrixId) >= 0) {      MXSession session=Matrix.getInstance(getApplicationContext()).getSession(matrixId);      if (null != session) {        session.stopEventStream();        session.getDataHandler().removeListener(mEventsListener);        session.getDataHandler().getCallsManager().removeListener(mCallsManagerListener);        mSessions.remove(session);        mMatrixIds.remove(matrixId);      }    }  }}  }
class C{  public long createUniqueId(int providerId) throws RcsServiceNotAvailableException, RcsGenericException {  if (mService == null) {    throw new RcsServiceNotAvailableException();  }  try {    return mService.createUniqueId(providerId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void testSubscribe4(){  TestSubscriber s=new TestSubscriber();  SubmissionPublisher<Integer> p=basicPublisher();  p.subscribe(s);  assertTrue(p.hasSubscribers());  assertEquals(1,p.getNumberOfSubscribers());  assertTrue(p.getSubscribers().contains(s));  assertTrue(p.isSubscribed(s));  s.awaitSubscribe();  assertNotNull(s.sn);  assertEquals(0,s.nexts);  assertEquals(0,s.errors);  assertEquals(0,s.completes);  p.subscribe(s);  s.awaitError();  assertEquals(0,s.nexts);  assertEquals(1,s.errors);  assertFalse(p.isSubscribed(s));}  }
class C{  public static <K,V,V2,R extends Map<K,V2>>R collectValues(Map<K,V> map,Function2<? super K,? super V,? extends V2> function,R target){  MapIterate.forEachKeyValue(map,null);  return target;}  }
class C{  public VNXeCommandJob deleteLunGroupSnap(String snapId) throws VNXeException {  _url=URL_INSTANCE + snapId;  setQueryParameters(null);  if (getDataForOneObject(VNXeLunGroupSnap.class) != null) {    return deleteRequestAsync(null);  } else {    throw VNXeException.exceptions.vnxeCommandFailed(String.format("No lun group snap %s found",snapId));  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe number of attributes to randomly select.\n" + "\tIf < 1 then percentage, >= 1 absolute number.\n" + "\t(default: 0.5)","N",1,"-N <double>"));  result.addElement(new Option("\tInvert selection - i.e. randomly remove rather than select.","V",0,"-V"));  result.addElement(new Option("\tThe seed value.\n" + "\t(default: 1)","S",1,"-S <int>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public void applyData(int id,int type,String propertyName,boolean checkStrictly,boolean cacheData,Object... datas){  checkDatasExist(datas);  mDataResolver.setCurrentBindingView(mViewHelper.getView(id));  final PropertyBindInfo bindInfo=getBindInfo(id,propertyName);  final Array<VariableInfo> mTmpVariables=getAllVariables(datas);  applyDataInternal(id,bindInfo,mTmpVariables,checkStrictly);  if (cacheData)   addToVariableInfoCache(id,mTmpVariables,bindInfo);  mTmpVariables.clear();  mDataResolver.clearObjects();}  }
class C{  public void removeObserver(AppMenuObserver observer){  mObservers.remove(observer);}  }
class C{  public void deleteComment(final IComment comment) throws CouldntDeleteException {  try {    m_node.deleteLocalFunctionComment(comment);  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntDeleteException exception) {    throw new CouldntDeleteException(exception);  }  for (  final IFunctionNodeListener listener : m_listeners) {    try {      listener.deletedComment(this,comment);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  protected void onExtensionDataChanged(ComponentName extension){}  }
class C{  public synchronized boolean leave(long maxWait,TimeUnit unit) throws Exception {  long startMs=System.currentTimeMillis();  boolean hasMaxWait=(unit != null);  long maxWaitMs=hasMaxWait ? TimeUnit.MILLISECONDS.convert(maxWait,unit) : Long.MAX_VALUE;  return internalLeave(startMs,hasMaxWait,maxWaitMs);}  }
class C{  public InputsCSVWriter(String path,String separator){  log.info("Initializing  ...");  this.separator=separator;  try {    writer=IOUtils.getBufferedWriter(path);  } catch (  Exception ee) {    ee.printStackTrace();    throw new RuntimeException("writer could not be instantiated");  }  log.info("... done!");}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof TinyPuzzle) {    TinyPuzzle tp=(TinyPuzzle)o;    return tp.s[0] == s[0] && tp.s[1] == s[1];  }  return false;}  }
class C{  public OFOpenFlowVendorData(int dataType){  this.dataType=dataType;}  }
class C{  public final void normalize(Matrix3d m1){  double[] tmp=new double[9];  double[] tmp_rot=new double[9];  double[] tmp_scale=new double[3];  tmp[0]=m1.m00;  tmp[1]=m1.m01;  tmp[2]=m1.m02;  tmp[3]=m1.m10;  tmp[4]=m1.m11;  tmp[5]=m1.m12;  tmp[6]=m1.m20;  tmp[7]=m1.m21;  tmp[8]=m1.m22;  compute_svd(tmp,tmp_scale,tmp_rot);  this.m00=tmp_rot[0];  this.m01=tmp_rot[1];  this.m02=tmp_rot[2];  this.m10=tmp_rot[3];  this.m11=tmp_rot[4];  this.m12=tmp_rot[5];  this.m20=tmp_rot[6];  this.m21=tmp_rot[7];  this.m22=tmp_rot[8];}  }
class C{  public boolean mouseClicked(MouseEvent e){  return false;}  }
class C{  public Bundler putParcelableArrayList(String key,ArrayList<? extends Parcelable> value){  bundle.putParcelableArrayList(key,value);  return this;}  }
class C{  public void stop(){  http.stop();}  }
class C{  public DefaultEdge(final NodeType source,final NodeType target){  m_source=Preconditions.checkNotNull(source,"Error: Source argument can not be null");  m_target=Preconditions.checkNotNull(target,"Error: Target argument can not be null");}  }
class C{  public Boolean isNonAggregateControl(){  return nonAggregateControl;}  }
class C{  public char[] toCharArray(){  if (size == 0) {    return ArrayUtils.EMPTY_CHAR_ARRAY;  }  char chars[]=new char[size];  System.arraycopy(buffer,0,chars,0,size);  return chars;}  }
class C{  public static void recycleNodes(AccessibilityNodeInfoCompat... nodes){  if (nodes == null) {    return;  }  for (  AccessibilityNodeInfoCompat node : nodes) {    if (node != null) {      node.recycle();    }  }}  }
class C{  public Statement using(Object... columns){  statement.append(" USING (");  appendClauses(columns);  statement.append(')');  return this;}  }
class C{  public boolean isSelectTrigger(){  return (typeMask & Trigger.SELECT) != 0;}  }
class C{  public Alignment parseCharactersBlock(TaxonList taxonList) throws ImportException, IOException {  return readCharactersBlock(taxonList);}  }
class C{  static List<IRuntimeClasspathEntry> computeClasspath(IJavaProject javaProject) throws CoreException {  IRuntimeClasspathEntry[] unresolvedRuntimeClasspath=JavaRuntime.computeUnresolvedRuntimeClasspath(javaProject);  List<IRuntimeClasspathEntry> resolvedRuntimeClasspath=new ArrayList<IRuntimeClasspathEntry>();  for (  IRuntimeClasspathEntry unresolvedClasspathEntry : unresolvedRuntimeClasspath) {    if (JavaRuntime.isVMInstallReference(unresolvedClasspathEntry)) {      continue;    }    resolvedRuntimeClasspath.addAll(Arrays.asList(JavaRuntime.resolveRuntimeClasspathEntry(unresolvedClasspathEntry,javaProject)));  }  try {    resolvedRuntimeClasspath.addAll(0,GWTProjectUtilities.getGWTSourceFolderPathsFromProjectAndDependencies(javaProject,false));  } catch (  SdkException e) {    throw new CoreException(new Status(IStatus.ERROR,GWTPlugin.PLUGIN_ID,e.getLocalizedMessage(),e));  }  GwtSdk gwtRuntime=GwtSdk.findSdkFor(javaProject);  if (gwtRuntime == null) {    GWTPluginLog.logWarning("Unable to find GWT runtime for project " + javaProject.getElementName() + ", will try to continue GWT compilation..");    return resolvedRuntimeClasspath;  }  IStatus validationStatus=gwtRuntime.validate();  if (!validationStatus.isOK()) {    GWTPluginLog.logWarning("GWT runtime for project " + javaProject.getElementName() + " is not valid: "+ validationStatus.getMessage()+ ". Will attempt to proceed with GWT compilation anyway.");    return resolvedRuntimeClasspath;  }  try {    File gwtDevJar=gwtRuntime.getDevJar();    resolvedRuntimeClasspath.add(JavaRuntime.newArchiveRuntimeClasspathEntry(Path.fromOSString(gwtDevJar.getAbsolutePath())));  } catch (  SdkException e) {    GWTPluginLog.logWarning(e,"Unable to add gwt-dev.jar to the compiler's classpath; will attempt GWT compilation anyway.");  }  return resolvedRuntimeClasspath;}  }
class C{  public final boolean isLayered(){  return layered;}  }
class C{  public static short[] nullToEmpty(short[] array){  if (array == null || array.length == 0) {    return EMPTY_SHORT_ARRAY;  }  return array;}  }
class C{  public void rollbackTo(Savepoint savepoint,boolean trimToSize){  int index=savepoint == null ? 0 : savepoint.logIndex;  while (undoLog.size() > index) {    UndoLogRecord entry=undoLog.getLast();    entry.undo(this);    undoLog.removeLast(trimToSize);  }  if (transaction != null) {    long savepointId=savepoint == null ? 0 : savepoint.transactionSavepoint;    HashMap<String,MVTable> tableMap=database.getMvStore().getTables();    Iterator<Change> it=transaction.getChanges(savepointId);    while (it.hasNext()) {      Change c=it.next();      MVTable t=tableMap.get(c.mapName);      if (t != null) {        long key=((ValueLong)c.key).getLong();        ValueArray value=(ValueArray)c.value;        short op;        Row row;        if (value == null) {          op=UndoLogRecord.INSERT;          row=t.getRow(this,key);        } else {          op=UndoLogRecord.DELETE;          row=createRow(value.getList(),Row.MEMORY_CALCULATE);        }        row.setKey(key);        UndoLogRecord log=new UndoLogRecord(t,op,row);        log.undo(this);      }    }  }  if (savepoints != null) {    String[] names=new String[savepoints.size()];    savepoints.keySet().toArray(names);    for (    String name : names) {      Savepoint sp=savepoints.get(name);      int savepointIndex=sp.logIndex;      if (savepointIndex > index) {        savepoints.remove(name);      }    }  }}  }
class C{  public static Optional<PlayerProfile> lookup(UUID id){  if (Bukkit.getPlayer(id) != null) {    return Optional.of(fromPlayer(Bukkit.getPlayer(id)));  }  return lookupProperties(id);}  }
class C{  public static long abs(long a){  return 0l;}  }
class C{  public final void testRemoveAllHelperTextsFromArray(){  CharSequence helperText1="helperText1";  CharSequence helperText2="helperText2";  CharSequence helperText3="helperText3";  CharSequence[] helperTexts=new CharSequence[2];  helperTexts[0]=helperText1;  helperTexts[1]=helperText2;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTexts(helperTexts);  passwordEditText.addHelperText(helperText3);  passwordEditText.removeAllHelperTexts(helperTexts);  passwordEditText.removeAllHelperTexts(helperTexts);  assertEquals(1,passwordEditText.getHelperTexts().size());  assertEquals(helperText3,passwordEditText.getHelperTexts().iterator().next());}  }
class C{  public static Chset not(Chset subject){  return difference(ANYCHAR,subject);}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,String[] columnNames) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("prepareStatement(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    }    return prepareStatement(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void addSelections(Set<Entity> items){  for (  Entity item : items) {    setSelection(item,false);  }}  }
class C{  public NSGAII(Problem problem,NondominatedSortingPopulation population,EpsilonBoxDominanceArchive archive,Selection selection,Variation variation,Initialization initialization){  super(problem,population,archive,initialization);  this.selection=selection;  this.variation=variation;}  }
class C{  @Override protected void extendSignatureTag() throws DSSException {  super.extendSignatureTag();  final SignatureLevel signatureLevel=params.getSignatureLevel();  if (!xadesSignature.hasXProfile() || SignatureLevel.XAdES_X.equals(signatureLevel) || SignatureLevel.XAdES_XL.equals(signatureLevel)) {    if (SignatureLevel.XAdES_XL.equals(params.getSignatureLevel())) {      final NodeList toRemoveList=xadesSignature.getSigAndRefsTimeStamp();      for (int index=0; index < toRemoveList.getLength(); index++) {        final Node item=toRemoveList.item(index);        unsignedSignaturePropertiesDom.removeChild(item);      }    }    final TimestampParameters signatureTimestampParameters=params.getSignatureTimestampParameters();    final String canonicalizationMethod=signatureTimestampParameters.getCanonicalizationMethod();    final byte[] timestampX1Data=xadesSignature.getTimestampX1Data(null,canonicalizationMethod);    final DigestAlgorithm timestampDigestAlgorithm=signatureTimestampParameters.getDigestAlgorithm();    final byte[] digestValue=DSSUtils.digest(timestampDigestAlgorithm,timestampX1Data);    createXAdESTimeStampType(TimestampType.VALIDATION_DATA_TIMESTAMP,canonicalizationMethod,digestValue);  }}  }
class C{  public static boolean isAllEmpty(String... strings){  for (  String string : strings) {    if (isEmpty(string) == false) {      return false;    }  }  return true;}  }
class C{  public void testFailingCommand() throws Exception {  ProcessHelper processHelper=new ProcessHelper();  processHelper.setCmdPrefix("bad");  processHelper.configure();  try {    processHelper.exec("Running a command with a bad prefix","echo");    throw new Exception("Command runs with bad prefix!");  } catch (  BackupException e) {  }  processHelper.setCmdPrefix("bash -c");  processHelper.configure();  try {    processHelper.exec("Running a command with a bad base command","bad");    throw new Exception("Command runs with bad prefix!");  } catch (  BackupException e) {  }}  }
class C{  public GatewayItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @SneakyThrows private static byte[] certBytes(final X509Certificate cert){  return cert.getEncoded();}  }
class C{  public void invalidateAll(boolean sendInCluster){  queryCache.invalidateAll();  if (sendInCluster) {    clusterManager.send(new InvalidateQueryCacheMsg(true));  }}  }
class C{  protected S buildPatch(TaskState.TaskStage stage,E subStage) throws Throwable {  return buildPatch(stage,subStage,null);}  }
class C{  protected static void compareDescriptions(List<VOLocalizedText> expected,VOServiceLocalization localization,String localeToIgnore){  Map<String,String> localeToDesc=new HashMap<String,String>();  for (  VOLocalizedText txt : localization.getDescriptions()) {    localeToDesc.put(txt.getLocale(),txt.getText());  }  for (  VOLocalizedText txt : expected) {    String locale=txt.getLocale();    if (!localeToIgnore.equals(locale)) {      String text=localeToDesc.get(locale);      assertNotNull(text);      assertEquals(txt.getText(),text);    }  }}  }
class C{  public boolean increment(float key){  return adjustValue(key,1);}  }
class C{  private static Angle parseDMSString(String dmsString){  dmsString=dmsString.replaceAll("[D|d|\u00B0|'|\u2019|\"|\u201d]"," ");  dmsString=dmsString.replaceAll("\\s+"," ");  dmsString=dmsString.trim();  int sign=1;  char suffix=dmsString.toUpperCase().charAt(dmsString.length() - 1);  if (!Character.isDigit(suffix)) {    sign=(suffix == 'N' || suffix == 'E') ? 1 : -1;    dmsString=dmsString.substring(0,dmsString.length() - 1);    dmsString=dmsString.trim();  }  char prefix=dmsString.charAt(0);  if (!Character.isDigit(prefix)) {    sign*=(prefix == '-') ? -1 : 1;    dmsString=dmsString.substring(1,dmsString.length());  }  String[] DMS=dmsString.split(" ");  double d=Integer.parseInt(DMS[0]);  double m=DMS.length > 1 ? Integer.parseInt(DMS[1]) : 0;  double s=DMS.length > 2 ? Integer.parseInt(DMS[2]) : 0;  if (m >= 0 && m <= 60 && s >= 0 && s <= 60)   return Angle.fromDegrees(d * sign + m / 60 * sign + s / 3600 * sign);  return null;}  }
class C{  protected boolean isValid(){  return isValid;}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){}  }
class C{  public void writeFormatted(Geometry geometry,Writer writer) throws IOException {  writeFormatted(geometry,true,writer);}  }
class C{  public void uninstallApplication(String code,String data){  String packageName;  try {    JSONObject appData=new JSONObject(data);    packageName=(String)appData.get(resources.getString(R.string.intent_extra_identity));    resultBuilder.build(code);    appList.uninstallApplication(packageName);  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON format." + e);  }}  }
class C{  public static int convertSVGInteger(String s){  return Integer.parseInt(s);}  }
class C{  public IP(long ip){  checkArgument(ip <= 0xffffffffL && ip >= 0,"Invalid IP");  value=ip;  a=(int)(ip >>> 24);  b=(int)((ip & 0x00ffffff) >>> 16);  c=(int)((ip & 0x0000ffff) >>> 8);  d=(int)(ip & 0x000000ff);}  }
class C{  @DSComment("Data serialization/deserialization") @DSSafe(DSCat.SERIALIZATION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.478 -0500",hash_original_method="49EBB52F87B2F24E715C34795BBE3213",hash_generated_method="E35F92A22E889420C4D9EB6CCD82A333") public Intent putExtra(String name,Parcelable value){  mExtras.put(name,value);  return this;}  }
class C{  protected Node newNode(){  return new SVGOMFlowLineElement();}  }
class C{  public Instrumenter attachPopulationSizeCollector(){  includePopulationSize=true;  return this;}  }
class C{  public CustomGraphQueryInferencer(NotifyingSail baseSail,QueryLanguage language,String queryText,String matcherText) throws MalformedQueryException, UnsupportedQueryLanguageException, SailException {  super(baseSail);  setFields(language,queryText,matcherText);}  }
class C{  static void checkResult(String message,long x,long y,long result,BigInteger expected){  BigInteger resultBig=BigInteger.valueOf(result);  if (!inLongRange(expected)) {    fail("FAIL: " + message + "("+ x+ ", "+ y+ ") = "+ result+ "; expected an arithmetic exception: ");  } else   if (!resultBig.equals(expected)) {    fail("FAIL: " + message + "("+ x+ ", "+ y+ ") = "+ result+ "; expected "+ expected);  }}  }
class C{  private FileUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public JarResources(final String jarFileName){  this.jarFileName=jarFileName;  init();}  }
class C{  @Override public void release(){  this.suppressed=false;  this.binding=null;  this.rendered=null;  super.release();}  }
class C{  private void labelIndicatorMouseEntered(MouseEvent e){  if (settings == null) {    return;  }  JLabel label=((JLabel)e.getSource());  if (label == labelSetDateToToday) {    DateVetoPolicy vetoPolicy=settings.getVetoPolicy();    boolean todayIsVetoed=InternalUtilities.isDateVetoed(vetoPolicy,LocalDate.now());    if (todayIsVetoed) {      return;    }  }  if ((label == labelMonth) && (settings.getEnableMonthMenu() == false)) {    return;  }  if ((label == labelYear) && (settings.getEnableYearMenu() == false)) {    return;  }  label.setBackground(new Color(184,207,229));  label.setBorder(new CompoundBorder(new LineBorder(Color.GRAY),labelIndicatorEmptyBorder));}  }
class C{  public void parse(InputSource input) throws IOException, SAXException {  if (parsing) {    throw new SAXException("Parser is already in use");  }  setupParser();  parsing=true;  try {    parser.parse(input);  }  finally {    parsing=false;  }  parsing=false;}  }
class C{  public boolean contains(final int revisionIndex){  return this.storage.containsKey(revisionIndex);}  }
class C{  public DataFile createDataFile(){  DataFile dataFile=new DataFile();  dataFileList.add(dataFile);  return dataFile;}  }
class C{  public SailBaseIteration(CloseableIteration<? extends T,? extends E> iter,AbstractSailConnection connection){  super(iter);  this.connection=connection;}  }
class C{  private String toResourceNameOnClasspath(String classPathRootOnDisk,File file) throws IOException {  String fileName=file.getAbsolutePath().replace("\\","/");  return fileName.substring(classPathRootOnDisk.length());}  }
class C{  private Referenceable registerDatabase(String databaseName) throws Exception {  Referenceable dbRef=getDatabaseReference(clusterName,databaseName);  Database db=hiveClient.getDatabase(databaseName);  if (db != null) {    if (dbRef == null) {      dbRef=createDBInstance(db);      dbRef=registerInstance(dbRef);    } else {      LOG.info("Database {} is already registered with id {}. Updating it.",databaseName,dbRef.getId().id);      dbRef=createOrUpdateDBInstance(db,dbRef);      updateInstance(dbRef);    }  }  return dbRef;}  }
class C{  private void updateNetworkWeights(double l,double m){  for (int noc=0; noc < m_numClasses; noc++) {    m_outputs[noc].updateWeights(l,m);  }}  }
class C{  public void putTemplate(String name,String templateSource,long lastModified){  templates.put(name,new StringTemplateSource(name,templateSource,lastModified));}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public InstanceQuery() throws Exception {  super();}  }
class C{  @Override public RecordReader<LongWritable,WARCWritable> createRecordReader(InputSplit split,TaskAttemptContext context) throws IOException, InterruptedException {  return new WARCReader();}  }
class C{  public static void revokeToken(String token,PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException {  revokeToken(DEFAULT_PROTOCOL,DEFAULT_DOMAIN,token,key);}  }
class C{  private String cassandraTable(){  return controller.getPersistenceSettings().getTable() != null ? controller.getPersistenceSettings().getTable() : storeSes.cacheName().trim().toLowerCase();}  }
class C{  public VideoItem queryContentUri(Uri uri){  List<VideoItem> videos=queryAll(uri,FilmstripItemBase.QUERY_ALL_MEDIA_ID);  if (videos.isEmpty()) {    return null;  }  return videos.get(0);}  }
class C{  public LabelPointRenderer(){  column=1;  format=NumberFormat.getInstance();  font=Font.decode(null);  alignmentX=0.5;  alignmentY=0.5;}  }
class C{  @Deprecated public MediaFile(File f,MediaFileType type){  this(f.toPath(),type);}  }
class C{  @Override public int length(){  return size;}  }
class C{  public static void initializeCurve(){  if (xp != null && px != null)   return;  xp=new float[PrecisionSteps + 1];  px=new float[PrecisionSteps + 1];  float[] fx=new float[PrecisionSteps + 1];  float step=1f / PrecisionSteps;  float x=0;  for (int xStep=0; xStep <= PrecisionSteps; xStep++) {    fx[xStep]=logFunc(x);    x+=step;  }  float pLength=0;  float[] dx=new float[PrecisionSteps + 1];  dx[0]=0;  for (int xStep=1; xStep < PrecisionSteps; xStep++) {    dx[xStep]=(float)Math.sqrt(Math.pow(fx[xStep] - fx[xStep - 1],2) + Math.pow(step,2));    pLength+=dx[xStep];  }  float p=0;  px[0]=0f;  px[PrecisionSteps]=1f;  for (int xStep=1; xStep <= PrecisionSteps; xStep++) {    p+=Math.abs(dx[xStep] / pLength);    px[xStep]=p;  }  int xStep=0;  p=0;  xp[0]=0f;  xp[PrecisionSteps]=1f;  for (int pStep=0; pStep < PrecisionSteps; pStep++) {    while (xStep < PrecisionSteps) {      if (px[xStep] > p)       break;      xStep++;    }    if (xStep == 0) {      xp[pStep]=0;    } else {      float fraction=(p - px[xStep - 1]) / (px[xStep] - px[xStep - 1]);      x=(xStep - 1 + fraction) * step;      xp[pStep]=x;    }    p+=step;  }}  }
class C{  public void deleteContact(String username){  DemoDBManager.getInstance().deleteContact(username);}  }
class C{  public void onItemSelected(AdapterView<?> arg0,View arg1,int arg2,long arg3){  int sel=arg2;  int i=0, j=0;  m_selectedDev=-1;  for (  InputDevice idev : events.m_Devs) {    if (idev.getOpen()) {      if (i == sel) {        m_selectedDev=j;        break;      } else       i++;    }    j++;  }  if (m_selectedDev != -1) {    String name=events.m_Devs.get(m_selectedDev).getName();    Log.d(LT,"spinner selected:" + sel + " Name:"+ name);    Toast.makeText(this,"New device selected:" + name,Toast.LENGTH_SHORT).show();  } else   Toast.makeText(this,"Invalid device selection!",Toast.LENGTH_SHORT).show();}  }
class C{  private static final void parseCmdLine(String[] args){  int i=0;  String arg;  while (i < args.length && args[i].startsWith("-")) {    arg=args[i++];    if (arg.equals("-v")) {      if (i < args.length) {        vertices=Integer.parseInt(args[i++]);      } else       throw new RuntimeException("-v requires the number of vertices");    } else     if (arg.equals("-p")) {      printResult=true;    } else     if (arg.equals("-m")) {      printMsgs=true;    } else     if (arg.equals("-h")) {      usage();    }  }  if (vertices == 0)   usage();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.244 -0400",hash_original_method="193FE4558996330A10B670A31489B53D",hash_generated_method="DDE7348136F2CFFC73C4692EC1789378") void helpDelete(Node<K,V> b,Node<K,V> f){  if (f == next && this == b.next) {    if (f == null || f.value != f)     appendMarker(f); else     b.casNext(this,f.next);  }}  }
class C{  public void undoAll(){  undo();  setGroup(lastSavedValues.getGroup());  getConnections().clear();  getConnections().addAll(lastSavedValues.getConnections());  getSubgroups().clear();  getSubgroups().addAll(lastSavedValues.getSubgroups());  groupingModified=false;}  }
class C{  public static int sp2px(Context context,float spValue){  final float fontScale=context.getResources().getDisplayMetrics().scaledDensity;  return (int)(spValue * fontScale + 0.5f);}  }
class C{  private Pattern(String regex,int flags) throws PatternSyntaxException {  internalCompile(regex,flags);}  }
class C{  public void expandRootChildNodes(){  TreeNode root=(TreeNode)getTreeAlert().getModel().getRoot();  if (root == null) {    return;  }  TreePath basePath=new TreePath(root);  for (int i=0; i < root.getChildCount(); ++i) {    getTreeAlert().expandPath(basePath.pathByAddingChild(root.getChildAt(i)));  }}  }
class C{  private void evaluatePopup(MouseEvent e){  if (e.isPopupTrigger()) {    createOperatorPopupMenu().show(this,e.getX(),e.getY());    e.consume();  }}  }
class C{  static void checkUnsignedShort(final int value,final String msg){  if (value < 0 || value > 65535) {    throw new IllegalArgumentException(msg + " (must be an unsigned short): " + value);  }}  }
class C{  public IfElse(){  this(Object.class);}  }
class C{  public static void bootstrap(boolean testData) throws Exception {  if (lastData == null || testData != lastData) {    IdmDataCreator.setForceCleanup(true);  }  if (testData) {    loadData();  } else {    IdmDataCreator.loadData();  }  String idmHost=getIdmHostName();  CasIdmClient idmClient=new CasIdmClient(idmHost);  IdmDataCreator.createData(idmClient);  lastData=testData;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (newRecord && getParent().isComplete()) {    log.saveError("ParentComplete",Msg.translate(getCtx(),"M_InventoryLine"));    return false;  }  if (newRecord && m_isManualEntry) {    if (getM_AttributeSetInstance_ID() == 0) {      MProduct product=MProduct.get(getCtx(),getM_Product_ID());      if (product != null && product.isASIMandatory(isSOTrx(),getAD_Org_ID())) {        log.saveError("FillMandatory",Msg.getElement(getCtx(),COLUMNNAME_M_AttributeSetInstance_ID));        return false;      }    }  }  if (getLine() == 0) {    String sql="SELECT COALESCE(MAX(Line),0)+10 AS DefaultValue FROM M_InventoryLine WHERE M_Inventory_ID=?";    int ii=DB.getSQLValue(get_TrxName(),sql,getM_Inventory_ID());    setLine(ii);  }  if (newRecord || is_ValueChanged("QtyCount"))   setQtyCount(getQtyCount());  if (newRecord || is_ValueChanged("QtyInternalUse"))   setQtyInternalUse(getQtyInternalUse());  if (getQtyInternalUse().signum() != 0) {    if (!INVENTORYTYPE_ChargeAccount.equals(getInventoryType()))     setInventoryType(INVENTORYTYPE_ChargeAccount);    if (getC_Charge_ID() == 0) {      log.saveError("InternalUseNeedsCharge","");      return false;    }  } else   if (INVENTORYTYPE_ChargeAccount.equals(getInventoryType())) {    if (getC_Charge_ID() == 0) {      log.saveError("FillMandatory",Msg.getElement(getCtx(),"C_Charge_ID"));      return false;    }  } else   if (getC_Charge_ID() != 0)   setC_Charge_ID(0);  if (getC_Charge_ID() == 0)   setAD_Org_ID(getParent().getAD_Org_ID());  return true;}  }
class C{  protected int engineDoFinal(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException {  return core.doFinal(input,inputOffset,inputLen,output,outputOffset);}  }
class C{  public Vset clearVar(int varNumber){  if (x == fullX) {    return this;  }  long bit=(1L << varNumber);  if (varNumber >= VBITS) {    int i=(varNumber / VBITS - 1) * 2;    if (i >= x.length) {      return this;    }    x[i]&=~bit;    if (i + 1 < x.length) {      x[i + 1]&=~bit;    }  } else {    vset&=~bit;    uset&=~bit;  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:34.200 -0500",hash_original_method="EF06F871596109554BFA30CB482E733E",hash_generated_method="833CC0C79D6688AE2596AC3F7A274F9C") public static boolean hasProfile(int cameraId,int quality){  return native_has_camcorder_profile(cameraId,quality);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildTomi(zone);}  }
class C{  public static String trimTrailingWhitespace(String str){  if (!hasLength(str)) {    return str;  }  StringBuilder sb=new StringBuilder(str);  while (sb.length() > 0 && Character.isWhitespace(sb.charAt(sb.length() - 1))) {    sb.deleteCharAt(sb.length() - 1);  }  return sb.toString();}  }
class C{  public static Feature find(String value){  return enums.find(value);}  }
class C{  public CMemoryViewer(final JFrame parent,final CDebugPerspectiveModel debugPerspectiveModel){  super(new BorderLayout());  Preconditions.checkNotNull(parent,"IE01404: Parent argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE01405: Debugger argument can not be null");  m_hexView.setData(m_dataProvider);  m_hexView.setMenuCreator(new CMemoryMenu(parent,debugPerspectiveModel,this));  m_hexView.setVisible(true);  add(m_hexView);  m_synchronizer=new CMemoryViewerSynchronizer(m_hexView,m_dataProvider,debugPerspectiveModel);}  }
class C{  public TestRuntimeClassPathImpl(Project proj){  super(proj);}  }
class C{  private static void boundedTreeAdd(TreeSet<Lookup.LookupResult> results,Lookup.LookupResult result,int num){  if (results.size() >= num) {    if (results.first().value < result.value) {      results.pollFirst();    } else {      return;    }  }  results.add(result);}  }
class C{  @Override public void render(){  Gdx.gl.glClearColor(0,0,0,1);  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);  viewport.apply();  renderer.setProjectionMatrix(camera.combined);  renderer.begin(ShapeType.Filled);  renderer.setColor(Color.GREEN);  renderer.rect(-10,-10,WORLD_WIDTH + 20,WORLD_HEIGHT + 20);  renderWorld();  renderer.end();}  }
class C{  public void test_reallocate(){  final Journal store=(Journal)getStore();  try {    final byte[] buf=new byte[1024];    r.nextBytes(buf);    final ByteBuffer bb=ByteBuffer.wrap(buf);    final RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final RWStore rw=bs.getStore();    long faddr1=bs.write(bb);    bb.position(0);    long faddr2=bs.write(bb);    bb.position(0);    ByteBuffer inbb1=bs.read(faddr1);    ByteBuffer inbb2=bs.read(faddr2);    assertEquals(bb,inbb1);    assertEquals(bb,inbb2);    store.commit();    inbb1=bs.read(faddr1);    inbb2=bs.read(faddr2);    assertEquals(bb,inbb1);    assertEquals(bb,inbb2);    rw.reset();    inbb1=bs.read(faddr1);    inbb2=bs.read(faddr2);    assertEquals(bb,inbb1);    assertEquals(bb,inbb2);    inbb1=bs.read(faddr1);    inbb2=bs.read(faddr2);    assertEquals(bb,inbb1);    assertEquals(bb,inbb2);  }  finally {    store.destroy();  }}  }
class C{  public int searchUShort(int startIndex,int startOffset,int length,int key){  int location=0;  int bottom=0;  int top=length;  while (top != bottom) {    location=(top + bottom) / 2;    int locationStart=this.readUShort(startIndex + location * startOffset);    if (key < locationStart) {      top=location;    } else     if (key > locationStart) {      bottom=location + 1;    } else {      return location;    }  }  return -1;}  }
class C{  public ICUNormalizer2CharFilter(Reader in){  this(in,Normalizer2.getInstance(null,"nfkc_cf",Normalizer2.Mode.COMPOSE));}  }
class C{  public static Map<String,Object> updateDataResourceAndText(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> thisResult=updateDataResourceMethod(dctx,context);  if (thisResult.get(ModelService.RESPONSE_MESSAGE) != null) {    return ServiceUtil.returnError((String)thisResult.get(ModelService.ERROR_MESSAGE));  }  String dataResourceTypeId=(String)context.get("dataResourceTypeId");  if (dataResourceTypeId != null && dataResourceTypeId.equals("ELECTRONIC_TEXT")) {    thisResult=updateElectronicText(dctx,context);    if (thisResult.get(ModelService.RESPONSE_MESSAGE) != null) {      return ServiceUtil.returnError((String)thisResult.get(ModelService.ERROR_MESSAGE));    }  }  return ServiceUtil.returnSuccess();}  }
class C{  @Override public String toString(){  return rawString;}  }
class C{  public WPaySelect(){  try {    zkInit();    dynInit();    m_loadedOK=true;    if (checkAutoQuery.isSelected()) {      setFieldOldValues();      loadTableInfo();    }  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  private static int pack8(byte[] in,int ioffset,int ilength,byte[] out,int ooffset){  byte[] pack=pack(in,ioffset,ilength,7,8);  int firstNonZero=pack.length - 1;  for (int i=pack.length - 2; i >= 0; i--) {    if (pack[i] != 0) {      firstNonZero=i;    }  }  System.arraycopy(pack,firstNonZero,out,ooffset,pack.length - firstNonZero);  return pack.length - firstNonZero;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("Post from " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  doGet(request,response);}  }
class C{  public static BaselineOffset newInstance(BaselineOffsetAsEnum baselineOffsetAsEnum){  BaselineOffset baselineOffset=new BaselineOffset();  baselineOffset.baselineOffsetAsEnum=baselineOffsetAsEnum;  return baselineOffset;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.900 -0500",hash_original_method="C3ACE95402618EF7B8AAEF2B97B3E8C3",hash_generated_method="EE677DA5C5FB5E5D66B5C1AA51C4AA62") void _setWont(int option){  _options[option]&=~_WILL_MASK;  if (optionHandlers[option] != null) {    optionHandlers[option].setWill(false);  }}  }
class C{  public SmbFile(String url,NtlmPasswordAuthentication auth,int shareAccess) throws MalformedURLException {  this(new URL(null,url,Handler.SMB_HANDLER),auth);  if ((shareAccess & ~(FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE)) != 0) {    throw new RuntimeException("Illegal shareAccess parameter");  }  this.shareAccess=shareAccess;}  }
class C{  public static boolean deleteRecursive(File fileOrDirectory,boolean followLinks){  if (fileOrDirectory.isDirectory()) {    if (!followLinks && java.nio.file.Files.isSymbolicLink(fileOrDirectory.toPath())) {      return !fileOrDirectory.exists() || fileOrDirectory.delete();    }    File[] list=fileOrDirectory.listFiles();    if (list == null) {      return false;    }    for (    File f : list) {      if (!deleteRecursive(f,followLinks)) {        return false;      }    }  }  if (!fileOrDirectory.delete()) {    if (fileOrDirectory.exists()) {      return false;    }  }  return true;}  }
class C{  @Override public void initialize(TransformContext context) throws Exception {  super.initialize(context);  try {    outSchema=Schema.parseJson(config.schema);    type=outSchema.getFields().get(0).getSchema().getType();  } catch (  IOException e) {    throw new IllegalArgumentException("Output Schema specified is not a valid JSON. Please check the Schema JSON");  }}  }
class C{  private void controllerInitDone(){  for (Enumeration<Organizer> e=Controller.organizers.elements(); e.hasMoreElements(); ) {    Organizer o=e.nextElement();    o.start();  }  try {    sentinel.open();  } catch (  Exception e) {    e.printStackTrace();    VM.sysFail("Failed to start up controller subsystem");  }}  }
class C{  public void writeUShort(int us) throws IOException {  this.write((byte)((us >> 8) & 0xff));  this.write((byte)(us & 0xff));}  }
class C{  public boolean isScrollable(){  return getBooleanProperty(PROPERTY_SCROLLABLE);}  }
class C{  public static BufferedImage decodeToImage(String imageString){  BufferedImage image=null;  try {    ByteArrayInputStream bis=new ByteArrayInputStream(DatatypeConverter.parseBase64Binary(imageString));    image=ImageIO.read(bis);    bis.close();  } catch (  Exception e) {    e.printStackTrace();  }  return image;}  }
class C{  private Region<String,String> createRegion(String name,DataPolicy dataPolicy,Compressor compressor,String diskStoreName){  getCache().createDiskStoreFactory().create(diskStoreName);  return getCache().<String,String>createRegionFactory().setDataPolicy(dataPolicy).setDiskStoreName(diskStoreName).setCloningEnabled(true).setCompressor(compressor).create(name);}  }
class C{  @Override public String containedTypeName(int index){  if (index == 0)   return "E";  return null;}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  public void customizeHeader(){  final JTableHeader header=getTableHeader();  final Font headerFont=header.getFont();  getTableHeader().setFont(new Font(headerFont.getFontName(),Font.BOLD,headerFont.getSize()));}  }
class C{  public void writeMessageNoTag(final MessageLite value) throws IOException {  writeRawVarint32(value.getSerializedSize());  value.writeTo(this);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAbstract_();}  }
class C{  public Base64(final boolean urlSafe){  this(MIME_CHUNK_SIZE,CHUNK_SEPARATOR,urlSafe);}  }
class C{  public ProcessDialog(GraphicsConfiguration gc,int AD_Process_ID,boolean isSOTrx){  super(gc);  log.info("Process=" + AD_Process_ID + "; SOTrx="+ isSOTrx);  enableEvents(AWTEvent.WINDOW_EVENT_MASK);  m_AD_Process_ID=AD_Process_ID;  m_WindowNo=Env.createWindowNo(this);  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx",isSOTrx ? "Y" : "N");  try {    jbInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }}  }
class C{  private void writeFeature(int i,JsonGenerator jgen,Boolean forcePoints) throws IOException {  ObjectMapper geomSerializer=new ObjectMapper();  jgen.writeStartObject();{    jgen.writeStringField("id",ids[i]);    jgen.writeStringField("type","Feature");    jgen.writeFieldName("geometry");{      if (!forcePoints && polygons != null && polygons.length >= i && polygons[i] != null) {        org.geojson.Polygon p=new org.geojson.Polygon();        List<LngLatAlt> shell=new ArrayList<LngLatAlt>();        for (        Coordinate c : polygons[i].getExteriorRing().getCoordinates()) {          shell.add(new LngLatAlt(c.x,c.y));        }        p.add(shell);        geomSerializer.writeValue(jgen,p);      } else {        org.geojson.Point p=new org.geojson.Point(lons[i],lats[i]);        geomSerializer.writeValue(jgen,p);      }    }    jgen.writeObjectFieldStart("properties");{      writeStructured(i,jgen);    }    jgen.writeEndObject();  }  jgen.writeEndObject();}  }
class C{  private void initGUI(){  JPanel outerPanel=new JPanel();  outerPanel.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=1;  gbc.fill=GridBagConstraints.BOTH;  outerPanel.add(createStep1Panel(),gbc);  if (oAuth.isOAuth2()) {    gbc.gridy+=1;    outerPanel.add(createStep2Panel(),gbc);  }  statusLabel=new JLabel();  statusLabel.setMinimumSize(new Dimension(400,25));  statusLabel.setPreferredSize(new Dimension(400,25));  statusLabel.setHorizontalAlignment(JLabel.RIGHT);  gbc.gridy+=1;  gbc.insets=new Insets(5,5,5,5);  outerPanel.add(statusLabel,gbc);  gbc.gridy+=1;  Component btPanel=createButtons();  outerPanel.add(btPanel,gbc);  add(outerPanel);  layoutDefault(outerPanel,confirmButton,cancelButton);  if (oAuth.isOAuth2()) {    setPreferredSize(new Dimension(375,430));  } else {    setPreferredSize(new Dimension(375,320));  }  setResizable(false);  setModal(true);  pack();  setLocationRelativeTo(ApplicationFrame.getApplicationFrame());}  }
class C{  public boolean isAnimation(){  return animated;}  }
class C{  public ToHitData toHit(IGame game){  return toHit(game,false);}  }
class C{  public static BufferedInputStream createFileInputStream(File file,boolean async) throws IOException {  final InputStream inStream;  if (async) {    inStream=new AsynchInputStream(new FileInputStream(file));  } else {    inStream=new FileInputStream(file);  }  return new BufferedInputStream(inStream,BUFFERED_STREAM_SIZE);}  }
class C{  @Override public void onReceive(Context context,Intent pong){  Integer count=pong.getIntExtra(COUNT,0);  Log.d(TAG,"onReceive() called with count of " + count);  int notificationId=pong.getIntExtra(NOTIFICATION_ID,1);  final PendingResult result=goAsync();  sAsyncHandler.post(null);}  }
class C{  private BytesAndBits basicGet(DiskRegionView dr,long offsetInOplog,boolean bitOnly,int valueLength,byte userBits){  BytesAndBits bb=null;  if (EntryBits.isAnyInvalid(userBits) || EntryBits.isTombstone(userBits) || bitOnly|| valueLength == 0) {    if (EntryBits.isInvalid(userBits)) {      bb=new BytesAndBits(DiskEntry.INVALID_BYTES,userBits);    } else     if (EntryBits.isTombstone(userBits)) {      bb=new BytesAndBits(DiskEntry.TOMBSTONE_BYTES,userBits);    } else {      bb=new BytesAndBits(DiskEntry.LOCAL_INVALID_BYTES,userBits);    }  } else {    if (offsetInOplog == -1)     return null;    try {      for (; ; ) {        dr.getCancelCriterion().checkCancelInProgress(null);        boolean interrupted=Thread.interrupted();        try {          bb=attemptGet(dr,offsetInOplog,valueLength,userBits);          break;        } catch (        InterruptedIOException e) {        } finally {          if (interrupted) {            Thread.currentThread().interrupt();          }        }      }    } catch (    IOException ex) {      throw new DiskAccessException(LocalizedStrings.Oplog_FAILED_READING_FROM_0_OPLOGID_1_OFFSET_BEING_READ_2_CURRENT_OPLOG_SIZE_3_ACTUAL_FILE_SIZE_4_IS_ASYNCH_MODE_5_IS_ASYNCH_WRITER_ALIVE_6.toLocalizedString(new Object[]{this.diskFile.getPath(),Long.valueOf(this.oplogId),Long.valueOf(offsetInOplog),Long.valueOf(this.crf.currSize),Long.valueOf(this.crf.bytesFlushed),Boolean.valueOf(!dr.isSync()),Boolean.valueOf(false)}),ex,dr.getName());    }catch (    IllegalStateException ex) {      checkClosed();      throw ex;    }  }  return bb;}  }
class C{  public void move(int position,long duration,@Nullable TimeInterpolator interpolator){  if (isAnimating || 0 > position || layoutSize < position)   return;  if (duration <= 0) {    isExpanded=position > closePosition;    setLayoutSize(position);    requestLayout();    notifyListeners();    return;  }  createExpandAnimator(getCurrentPosition(),position,duration,interpolator == null ? this.interpolator : interpolator).start();}  }
class C{  public void trace(String msg){}  }
class C{  public static <T extends Date>T lastOfYear(T ts){  checkNotNull(ts);  T cloned=(T)ts.clone();  cloned.setTime(new DateTime(ts.getTime()).withTime(0,0,0,0).withDayOfYear(1).minusSeconds(1).plusYears(1).getMillis());  return cloned;}  }
class C{  @Override public void addAttribute(String name,int value){  current.setAttribute(name,Integer.toString(value));}  }
class C{  public void deselectDoNotFireEvent(final int index){  deselect(index,false);}  }
class C{  public void removeAdditionalPartyRole(String partyId,String roleTypeId){  List<String> parties=additionalPartyRole.get(roleTypeId);  if (parties != null) {    Iterator<String> it=parties.iterator();    while (it.hasNext()) {      if ((it.next()).equals(partyId)) {        it.remove();        if (parties.isEmpty()) {          additionalPartyRole.remove(roleTypeId);        }        return;      }    }  }}  }
class C{  @Override public Object clone(){  RuleBasedBreakIterator result=(RuleBasedBreakIterator)super.clone();  if (text != null) {    result.text=(CharacterIterator)text.clone();  }  return result;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @SuppressWarnings({"varargs","unchecked"}) public static <A>List<A> of(A x1,A x2,A x3,A... rest){  return new List<A>(x1,new List<A>(x2,new List<A>(x3,from(rest))));}  }
class C{  protected int diff_commonOverlap(String text1,String text2){  int text1_length=text1.length();  int text2_length=text2.length();  if (text1_length == 0 || text2_length == 0) {    return 0;  }  if (text1_length > text2_length) {    text1=text1.substring(text1_length - text2_length);  } else   if (text1_length < text2_length) {    text2=text2.substring(0,text1_length);  }  int text_length=Math.min(text1_length,text2_length);  if (text1.equals(text2)) {    return text_length;  }  int best=0;  int length=1;  while (true) {    String pattern=text1.substring(text_length - length);    int found=text2.indexOf(pattern);    if (found == -1) {      return best;    }    length+=found;    if (found == 0 || text1.substring(text_length - length).equals(text2.substring(0,length))) {      best=length;      length++;    }  }}  }
class C{  public EmptyStatement createEmptyStatement(){  EmptyStatementImpl emptyStatement=new EmptyStatementImpl();  return emptyStatement;}  }
class C{  public QuotaBytesUsed(){  super(KEY);}  }
class C{  protected void addObservationsAfterParamsDetermined(double[] observations) throws Exception {  if (observations.length - (k - 1) * tau - 1 <= 0) {    return;  }  double[][] currentDestPastVectors=MatrixUtils.makeDelayEmbeddingVector(observations,k,tau,(k - 1) * tau,observations.length - (k - 1) * tau - 1);  double[][] currentDestNextVectors=MatrixUtils.makeDelayEmbeddingVector(observations,1,(k - 1) * tau + 1,observations.length - (k - 1) * tau - 1);  miCalc.addObservations(currentDestPastVectors,currentDestNextVectors);}  }
class C{  public void putBooleanArray(String key,boolean[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public static Point2D.Double angleToPoint(Rectangle2D.Double r,double angle){  double si=sin(angle);  double co=cos(angle);  double e=0.0001;  double x=0, y=0;  if (abs(si) > e) {    x=(1.0 + co / abs(si)) / 2.0 * r.width;    x=range(0,r.width,x);  } else   if (co >= 0.0) {    x=r.width;  }  if (abs(co) > e) {    y=(1.0 + si / abs(co)) / 2.0 * r.height;    y=range(0,r.height,y);  } else   if (si >= 0.0) {    y=r.height;  }  return new Point2D.Double(r.x + x,r.y + y);}  }
class C{  public static void logFinish(@Nullable IgniteLogger log,Class<?> clazz,long start){  final long end=U.currentTimeMillis();  log0(log,end,String.format("[%s]: FINISHED, duration: %s",clazz.getSimpleName(),formatDuration(end - start)));}  }
class C{  public void afterPropertiesSet() throws Exception {  configureLogging();  Logger logger=Logger.getLogger(this.getClass().getName());  logger.info("Setup afterPropertiesSet.");  logger.info("Loading JDBC Drivers");  if (this.jdbcDriver != null) {    DriverManager.setLoginTimeout(60);    logger.info("Set JDBC DriverManager loginTimeout as 60 seconds");    for (    Map.Entry<String,String> e : jdbcDriver.entrySet()) {      logger.info("Loading " + e.getKey() + ": "+ e.getValue());      try {        Class.forName(e.getValue());        logger.info("Loaded " + e.getKey() + ": "+ e.getValue());      } catch (      Throwable ex) {        logger.info("Failed to Load " + e.getKey() + ": "+ e.getValue());      }    }  }  alertRootPath=new File(new File(this.fileReposirtoryPath),"alerts");  alertRootPath.mkdirs();  this.sqlManager.setSqlPath(sqlPath);  this.sqlManager.init();  this.metricsDef.init();  logger.info("Refreshing metrics list ...");  refreshMetricsList();  logger.info("Retrieved metrics list: " + this.metricsList.size());  this.metaDb.setDbkey(this.configRepKey);  this.metaDb.init();  this.dbInfoManager.setMetaDb(metaDb);  this.userManager.setMetaDb(metaDb);  this.auth.setContext(this);  this.queryEngine.setSqlManager(this.sqlManager);  this.queryEngine.setFrameworkContext(this);  this.statDefManager.init();  logger.info("Initialize AutoScanner ...");  this.myperfConfig.init(this);  this.snmpSettings.init(this);  if (this.myperfConfig.isConfigured()) {    this.initMetricsDB();    this.alertSettings.setContext(this);    if (this.metricDb != null) {      this.dbInfoManager.init(this.metricDb);      this.metricsDef.getUdmManager().loadSubscriptions(this);      this.metricDb.loadAlertSetting(this.alertSettings);    }  }  this.instanceStatesManager.init(this);  this.hipchat.init(this);  autoScanner=new AutoScanner(this);  autoScanner.init();  if (autoScanner.isInitialized()) {    logger.info("Starting AutoScanner ...");    autoScanner.start();  }  logger.info("Done setup afterPropertiesSet.");}  }
class C{  public static <O>Query<O> none(Class<O> objectType){  return new None<O>(objectType);}  }
class C{  public boolean isManaged(){  PrefServiceBridge prefs=PrefServiceBridge.getInstance();  if (showCameraSites())   return !prefs.isCameraUserModifiable();  if (showCookiesSites())   return prefs.isAcceptCookiesManaged();  if (showFullscreenSites())   return prefs.isFullscreenManaged();  if (showGeolocationSites()) {    return !prefs.isAllowLocationUserModifiable();  }  if (showJavaScriptSites())   return prefs.javaScriptManaged();  if (showMicrophoneSites())   return !prefs.isMicUserModifiable();  if (showPopupSites())   return prefs.isPopupsManaged();  return false;}  }
class C{  public boolean finish(File indexFile) throws FSWriteError {  return finish(Descriptor.CURRENT,indexFile);}  }
class C{  private float toFloat(byte[] data){  if (data == null || data.length != 4)   return 0;  return Float.intBitsToFloat(convertBinaryFloatToInt(data));}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatusUsers createUsers(String instanceId,ProvisioningSettings settings,List<ServiceUser> users) throws APPlatformException {  return null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent e){  updateRunningButton();  updateRate();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:30.987 -0500",hash_original_method="D6292ED26CFFFD47381D5C093FDBF969",hash_generated_method="8C5FE46F3BF7A6E186EC1C93630D29A1") private void sendCallOrTransactionDoesNotExistResponse(SIPRequest sipRequest,SIPServerTransaction transaction){  SIPResponse sipResponse=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);  ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();  if (serverHeader != null) {    sipResponse.setHeader(serverHeader);  }  try {    if (sipRequest.getMethod().equals(Request.INVITE)) {      sipStack.addTransactionPendingAck(transaction);    }    transaction.sendResponse(sipResponse);    transaction.releaseSem();  } catch (  Exception ex) {    sipStack.getStackLogger().logError("Problem sending error response",ex);    transaction.releaseSem();    sipStack.removeTransaction(transaction);  }}  }
class C{  private static void quickSort1(byte x[],int off,int len,ByteComparator comp){  if (len < SMALL) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && comp.compare(x[j - 1],x[j]) > 0; j--)     swap(x,j,j - 1);    return;  }  int m=off + len / 2;  if (len > SMALL) {    int l=off;    int n=off + len - 1;    if (len > MEDIUM) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s,comp);      m=med3(x,m - s,m,m + s,comp);      n=med3(x,n - 2 * s,n - s,n,comp);    }    m=med3(x,l,m,n,comp);  }  byte v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    int comparison;    while (b <= c && (comparison=comp.compare(x[b],v)) <= 0) {      if (comparison == 0)       swap(x,a++,b);      b++;    }    while (c >= b && (comparison=comp.compare(x[c],v)) >= 0) {      if (comparison == 0)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   quickSort1(x,off,s,comp);  if ((s=d - c) > 1)   quickSort1(x,n - s,s,comp);}  }
class C{  public DoubleMatrix2D like2D(int rows,int columns){  return new DenseDoubleMatrix2D(rows,columns);}  }
class C{  private void showOperatorAnalysis(PrintStream out){  out.println();  out.println("Operator analysis");  out.println(formatter.formatToFieldWidth("Operator",50) + formatter.formatToFieldWidth("Tuning",9) + formatter.formatToFieldWidth("Count",11)+ formatter.formatToFieldWidth("Time",9)+ formatter.formatToFieldWidth("Time/Op",9)+ formatter.formatToFieldWidth("Pr(accept)",11)+ (options.useCoercion() ? "" : " Performance suggestion"));  for (int i=0; i < schedule.getOperatorCount(); i++) {    final MCMCOperator op=schedule.getOperator(i);    if (op instanceof JointOperator) {      JointOperator jointOp=(JointOperator)op;      for (int k=0; k < jointOp.getNumberOfSubOperators(); k++) {        out.println(formattedOperatorName(jointOp.getSubOperatorName(k)) + formattedParameterString(jointOp.getSubOperator(k)) + formattedCountString(op)+ formattedTimeString(op)+ formattedTimePerOpString(op)+ formattedProbString(jointOp)+ (options.useCoercion() ? "" : formattedDiagnostics(jointOp,MCMCOperator.Utils.getAcceptanceProbability(jointOp))));      }    } else {      out.println(formattedOperatorName(op.getOperatorName()) + formattedParameterString(op) + formattedCountString(op)+ formattedTimeString(op)+ formattedTimePerOpString(op)+ formattedProbString(op)+ (options.useCoercion() ? "" : formattedDiagnostics(op,MCMCOperator.Utils.getAcceptanceProbability(op))));    }  }  out.println();}  }
class C{  public NotificationChain basicSetBogusTypeRef(TypeRef newBogusTypeRef,NotificationChain msgs){  TypeRef oldBogusTypeRef=bogusTypeRef;  bogusTypeRef=newBogusTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.FORMAL_PARAMETER__BOGUS_TYPE_REF,oldBogusTypeRef,newBogusTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Body createBody(BodyDef def){  org.jbox2d.dynamics.BodyDef bd=new org.jbox2d.dynamics.BodyDef();  bd.active=def.active;  bd.allowSleep=def.allowSleep;  bd.angle=def.angle;  bd.angularDamping=def.angularDamping;  bd.angularVelocity=def.angularVelocity;  bd.awake=def.awake;  bd.bullet=def.bullet;  bd.fixedRotation=def.fixedRotation;  bd.gravityScale=def.gravityScale;  bd.linearDamping=def.linearDamping;  bd.linearVelocity.set(def.linearVelocity.x,def.linearVelocity.y);  bd.position.set(def.position.x,def.position.y);  if (def.type == BodyType.DynamicBody)   bd.type=org.jbox2d.dynamics.BodyType.DYNAMIC;  if (def.type == BodyType.StaticBody)   bd.type=org.jbox2d.dynamics.BodyType.STATIC;  if (def.type == BodyType.KinematicBody)   bd.type=org.jbox2d.dynamics.BodyType.KINEMATIC;  org.jbox2d.dynamics.Body b=world.createBody(bd);  Body body=new Body(this,b);  bodies.put(b,body);  return body;}  }
class C{  public JavaFXSummary(final Stage stage,final PdfObject sig){  this.frame=stage;  this.sigObject=sig;  initComponents();}  }
class C{  public boolean allowMultipleAdditions(String systemName){  return true;}  }
class C{  public static void closeEL(OutputStream os){  try {    if (os != null)     os.close();  } catch (  Throwable e) {  }}  }
class C{  private PhrasePositions lesser(PhrasePositions pp,PhrasePositions pp2){  if (pp.position < pp2.position || (pp.position == pp2.position && pp.offset < pp2.offset)) {    return pp;  }  return pp2;}  }
class C{  public static int toInt(byte a,byte b,byte c,byte d){  return (d << (BYTE_SIZE * 3)) | ((c & BYTE_MASK) << (BYTE_SIZE * 2)) | ((b & BYTE_MASK) << BYTE_SIZE)| (a & BYTE_MASK);}  }
class C{  protected void checkNotExist(IgfsSecondaryFileSystemTestAdapter uni,IgfsPath... paths) throws Exception {  IgfsEx ex=uni.igfs();  for (  IgfsPath path : paths) {    if (ex != null)     assert !ex.exists(path) : "Path exists [igfs=" + ex.name() + ", path="+ path+ ']';    assert !uni.exists(path.toString()) : "Path exists [igfs=" + uni.name() + ", path="+ path+ ']';  }}  }
class C{  public static boolean contains(double[] array,double valueToFind){  return indexOf(array,valueToFind) != INDEX_NOT_FOUND;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double minVal;  double maxVal;  double centreValue;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSizeX=Integer.parseInt(args[2]);  filterSizeY=Integer.parseInt(args[3]);  filterRounded=Boolean.parseBoolean(args[4]);  reflectAtBorders=Boolean.parseBoolean(args[5]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    double largeVal=Double.MAX_VALUE;    double smallVal=Double.MIN_VALUE;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          minVal=largeVal;          maxVal=smallVal;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              if (x != col && y != row) {                if (z < minVal) {                  minVal=z;                }                if (z > maxVal) {                  maxVal=z;                }              }            }          }          if (centreValue > maxVal) {            outputFile.setValue(row,col,maxVal);          } else           if (centreValue < minVal) {            outputFile.setValue(row,col,minVal);          } else {            outputFile.setValue(row,col,centreValue);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public RemoteInterpreter(Properties property,String noteId,String className,String host,int port,int connectTimeout,int maxPoolSize,RemoteInterpreterProcessListener remoteInterpreterProcessListener,ApplicationEventListener appListener){  super(property);  this.noteId=noteId;  this.className=className;  initialized=false;  this.host=host;  this.port=port;  this.connectTimeout=connectTimeout;  this.maxPoolSize=maxPoolSize;  this.remoteInterpreterProcessListener=remoteInterpreterProcessListener;  this.applicationEventListener=appListener;}  }
class C{  public SafeCloseDatagramSocket(int port) throws SocketException {  super(port);}  }
class C{  public void text(char c,float x,float y,float z){  if (z != 0)   translate(0,0,z);  text(c,x,y);  if (z != 0)   translate(0,0,-z);}  }
class C{  private void sendInputStringToProcess(Process process){  if (inputString != null) {    try (PrintStream ps=new PrintStream(process.getOutputStream())){      ps.print(inputString);      ps.print('\n');    }   }}  }
class C{  public Matrix3d rotateXYZ(double angleX,double angleY,double angleZ){  return rotateXYZ(angleX,angleY,angleZ,this);}  }
class C{  protected String compute(String text,double index,double length){  if (Double.isNaN(index)) {    index=0;  }  if (Double.isNaN(length)) {    length=0;  }  if (text == null) {    return null;  } else   if (index < 0 || length < 0) {    throw new FunctionInputException("expression_parser.function_non_negative",getFunctionName());  } else   if (index + length > text.length()) {    throw new FunctionInputException("expression_parser.parameter_value_too_big","start","length",getFunctionName(),text);  }  return text.substring((int)index,(int)index + (int)length);}  }
class C{  @Override public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  List<XmlWriter.Attribute> attributes=new ArrayList<XmlWriter.Attribute>(4);  if (code > 0) {    attributes.add(new XmlWriter.Attribute("code",Integer.toString(code)));  }  if (reason != null) {    attributes.add(new XmlWriter.Attribute("reason",reason));  }  if (contentType != null) {    contentType.getAttributes().remove(ContentType.ATTR_CHARSET);    attributes.add(new XmlWriter.Attribute("content-type",contentType.toString()));  }  generateStartElement(w,Namespaces.batchNs,"status",attributes,null);  generateExtensions(w,extProfile);  if (content != null) {    w.characters(content);  }  w.endElement(Namespaces.batchNs,"status");}  }
class C{  public PLLookAtAndFovAnimatedData(Object sender,PLCamera camera,float pitch,float yaw,float fov,int defaultMaxStep){  super(sender,camera,pitch,yaw,defaultMaxStep);  currentFov=camera.getFov();  maxFov=PLMath.normalizeFov(fov,camera.getFovRange());  fovStep=(maxFov - currentFov) / maxStep;}  }
class C{  public PdxFieldTypeMismatchException(String message){  super(message);}  }
class C{  public AbstractStateMachine(Collection<State<S,E>> states,Collection<Transition<S,E>> transitions,State<S,E> initialState,ExtendedState extendedState){  this(states,transitions,initialState,null,null,extendedState,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void deleteConnection(Connection connection){  SQLiteDatabase db=getWritableDatabase();  db.delete(TABLE_CONNECTIONS,_ID + "=?",new String[]{String.valueOf(connection.persistenceId())});  db.close();}  }
class C{  protected void extractDefaultProfile(final String profilePath) throws IOException {synchronized (lockProfile) {    try {      if (!isProfileCreated) {        System.out.println("start create profile");        FileUtility.deleteDirectory(profilePath);        FileUtility.extractJar(profilePath,FireFoxProfileMarker.class);      }    } catch (    Exception ex) {      ex.printStackTrace();    }  }  isProfileCreated=true;}  }
class C{  @CalledByNative private static InfoBar show(int enumeratedIconId,String messageText,int inlineLinkRangeStart,int inlineLinkRangeEnd,String buttonLabel){  return new GeneratedPasswordSavedInfoBar(ResourceId.mapToDrawableId(enumeratedIconId),messageText,inlineLinkRangeStart,inlineLinkRangeEnd,buttonLabel);}  }
class C{  public boolean checkOr(String... flags){  if (flags.length < 2) {    throw new IllegalArgumentException("checkOr requires at least two parameters");  }  final StringBuilder sb=new StringBuilder();  for (  final String flag : flags) {    final Flag aFlag=getFlag(flag);    if ((aFlag != null) && aFlag.isSet()) {      return true;    }    if (sb.length() > 0) {      sb.append(" or ");    }    sb.append(LONG_FLAG_PREFIX).append(flag);  }  setParseMessage("At least one " + sb.toString() + " must be set");  return false;}  }
class C{  public final double oldEnt(Distribution bags){  double returnValue=0;  int j;  for (j=0; j < bags.numClasses(); j++)   returnValue=returnValue + lnFunc(bags.perClass(j));  return (lnFunc(bags.total()) - returnValue) / ContingencyTables.log2;}  }
class C{  public boolean checksumValid(){  return checksumValid;}  }
class C{  protected void processCommand(ActionEvent ev,Command cmd){}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int i, j, k;  int featureNum, numFeatures;  int filterSize, halfFilterSize;  double[][] geometry;  int numPoints, numParts, part, startingPointInPart, endingPointInPart;  int numPointsInFilter;  ShapeType shapeType;  ShapeFileRecord outputRecord;  double sumX, sumY;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  filterSize=Integer.parseInt(args[2]);  if (filterSize < 3) {    filterSize=3;  }  if (filterSize % 2 == 0) {    showFeedback("The filter size must be an odd number. The specified value " + "has been incremented by one.");    filterSize++;  }  halfFilterSize=(int)Math.floor(filterSize / 2.0);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYLINE && shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polyline or polygon base shape type.");      return;    }    ShapeFile output=new ShapeFile(outputFile,shapeType);    FileUtilities.copyFile(new File(input.getDatabaseFile()),new File(output.getDatabaseFile()));    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    featureNum=0;    for (    ShapeFileRecord record : input.records) {      featureNum++;      PointsList points=new PointsList();      geometry=getXYFromShapefileRecord(record);      numPoints=geometry.length;      numParts=partData.length;      for (part=0; part < numParts; part++) {        startingPointInPart=partData[part];        if (part < numParts - 1) {          endingPointInPart=partData[part + 1];        } else {          endingPointInPart=numPoints;        }        if (geometry[startingPointInPart][0] == geometry[endingPointInPart - 1][0] && geometry[startingPointInPart][1] == geometry[endingPointInPart - 1][1]) {          for (i=startingPointInPart; i < endingPointInPart; i++) {            numPointsInFilter=0;            sumX=0;            sumY=0;            for (j=i - halfFilterSize; j <= i + halfFilterSize; j++) {              k=j;              if (k < startingPointInPart) {                k=endingPointInPart + k - 1;              }              if (k >= endingPointInPart) {                k=startingPointInPart + (k - endingPointInPart) + 1;              }              if (k >= startingPointInPart && k < endingPointInPart) {                numPointsInFilter++;                sumX+=geometry[k][0];                sumY+=geometry[k][1];              }            }            x=sumX / numPointsInFilter;            y=sumY / numPointsInFilter;            points.addPoint(x,y);          }        } else {          for (i=startingPointInPart; i < endingPointInPart; i++) {            numPointsInFilter=0;            sumX=0;            sumY=0;            for (j=i - halfFilterSize; j <= i + halfFilterSize; j++) {              if (j >= startingPointInPart && j < endingPointInPart) {                numPointsInFilter++;                sumX+=geometry[j][0];                sumY+=geometry[j][1];              }            }            x=sumX / numPointsInFilter;            y=sumY / numPointsInFilter;            points.addPoint(x,y);          }        }      }switch (shapeType) {case POLYLINE:        PolyLine line=new PolyLine(partData,points.getPointsArray());      output.addRecord(line);    break;case POLYLINEZ:  PolyLineZ polyLineZ=(PolyLineZ)(record.getGeometry());PolyLineZ linez=new PolyLineZ(partData,points.getPointsArray(),polyLineZ.getzArray(),polyLineZ.getmArray());output.addRecord(linez);break;case POLYLINEM:PolyLineM polyLineM=(PolyLineM)(record.getGeometry());PolyLineM linem=new PolyLineM(partData,points.getPointsArray(),polyLineM.getmArray());output.addRecord(linem);break;case POLYGON:Polygon poly=new Polygon(partData,points.getPointsArray());output.addRecord(poly);break;case POLYGONZ:PolygonZ polygonZ=(PolygonZ)(record.getGeometry());PolygonZ polyz=new PolygonZ(partData,points.getPointsArray(),polygonZ.getzArray(),polygonZ.getmArray());output.addRecord(polyz);break;case POLYGONM:PolygonM polygonM=(PolygonM)(record.getGeometry());PolygonM polym=new PolygonM(partData,points.getPointsArray(),polygonM.getmArray());output.addRecord(polym);break;}if (cancelOp) {cancelOperation();return;}progress=(int)(featureNum * 100.0 / numFeatures);updateProgress(progress);}output.write();returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static boolean isForServiceNamespace(Service s,Operation op){  return s.hasOption(ServiceOption.URI_NAMESPACE_OWNER) && !op.getUri().getPath().equals(s.getSelfLink());}  }
class C{  @Override public void processConnect(WebSocketChannel channel,WSURI location,String[] protocols){  nextHandler.processConnect(channel,location,protocols);}  }
class C{  public static Gas register(Gas gas){  if (gas == null) {    return null;  }  registeredGasses.add(gas);  return getGas(gas.getName());}  }
class C{  public static int overflowDistance(int op1,int op2,int opcode){switch (opcode) {case Opcodes.IADD:    int result=overflowDistanceAdd(op1,op2);  logger.debug("O: " + op1 + " + "+ op2+ " = "+ (op1 + op2)+ " -> "+ result);return result;case Opcodes.ISUB:return overflowDistanceSub(op1,op2);case Opcodes.IMUL:return overflowDistanceMul(op1,op2);case Opcodes.IDIV:return overflowDistanceDiv(op1,op2);}return Integer.MAX_VALUE;}  }
class C{  public ReplicatorConfig(ZkBridgeData bridgeData,Collection<String> collectionNames,SourceDestCollectionMapper mapper,ZkClient sourceZKClient,boolean skipReplicationFailures){  this.bridgeData=bridgeData;  this.collectionNames=collectionNames;  this.mapper=mapper;  this.sourceZKClient=sourceZKClient;  this.skipReplicationFailures=skipReplicationFailures;}  }
class C{  public static BitmapSampled decodeSampledBitmap(Context context,Uri uri,int reqWidth,int reqHeight){  try {    ContentResolver resolver=context.getContentResolver();    BitmapFactory.Options options=decodeImageForOption(resolver,uri);    options.inSampleSize=Math.max(calculateInSampleSizeByReqestedSize(options.outWidth,options.outHeight,reqWidth,reqHeight),calculateInSampleSizeByMaxTextureSize(options.outWidth,options.outHeight));    Bitmap bitmap=decodeImage(resolver,uri,options);    return new BitmapSampled(bitmap,options.inSampleSize);  } catch (  Exception e) {    throw new RuntimeException("Failed to load sampled bitmap: " + uri + "\r\n"+ e.getMessage(),e);  }}  }
class C{  public Matcher reset(CharSequence input){  matcher.reset(input);  return this;}  }
class C{  public Variable[] findLocalVariables(String clazz){  List<Variable> matches=new ArrayList<Variable>();  for (ListIterator<Variable> iterator=fLocalVariables.listIterator(fLocalVariables.size()); iterator.hasPrevious(); ) {    Variable localVariable=iterator.previous();    if (localVariable.isSubtypeOf(clazz))     matches.add(localVariable);  }  return matches.toArray(new Variable[matches.size()]);}  }
class C{  public void markChanges(AcelaReply l){  int firstByteNum=startingSensorAddress / 8;  int firstBitAt=startingSensorAddress % 8;  log.debug("Sensor Parsing for module type: " + moduleNames[nodeType]);  log.debug("Sensor Parsing has startingSensorAddress: " + startingSensorAddress);  log.debug("Sensor Parsing has firstByteNum: " + firstByteNum);  log.debug("Sensor Parsing has firstBitAt: " + firstBitAt);  int rawvalue=l.getElement(firstByteNum);  log.debug("Sensor Parsing has first rawvalue: " + Integer.toHexString(rawvalue));  int usingByteNum=0;  try {    for (int i=0; i < sensorbitsPerCard; i++) {      if (sensorArray[i] == null) {        log.debug("Sensor Parsing for Sensor: " + startingSensorAddress + " + "+ i+ " was skipped");        continue;      }      log.debug("Sensor Parsing for Sensor: " + startingSensorAddress + " + "+ i);      int relvalue=rawvalue;      int tempi=i;      if (usingByteNum == 0) {        if (firstBitAt == 4) {          for (int j=0; j < firstBitAt; j++) {            relvalue=relvalue >> 1;          }          log.debug("Sensor Parsing for Sensor: " + startingSensorAddress + " + "+ i+ " shifted by 4: "+ Integer.toHexString(relvalue));        }      }      if (firstBitAt == 4) {        if (i >= 12) {          usingByteNum=2;          rawvalue=l.getElement(usingByteNum + firstByteNum);          log.debug("Sensor Parsing (1stat4) has third rawvalue: " + Integer.toHexString(rawvalue));          relvalue=rawvalue;          tempi=i - 12;        } else {          if (i >= 4) {            usingByteNum=1;            rawvalue=l.getElement(usingByteNum + firstByteNum);            log.debug("Sensor Parsing (1stat4) has second rawvalue: " + Integer.toHexString(rawvalue));            relvalue=rawvalue;            tempi=i - 4;          }        }      } else {        if (i >= 8) {          usingByteNum=1;          rawvalue=l.getElement(usingByteNum + firstByteNum);          log.debug("Sensor Parsing has second rawvalue: " + Integer.toHexString(rawvalue));          relvalue=rawvalue;          tempi=i - 8;        }      }      log.debug("Sensor Parsing for Sensor: " + startingSensorAddress + " + "+ i+ " has tempi: "+ tempi);      for (int j=0; j < tempi; j++) {        relvalue=relvalue >> 1;      }      log.debug("Sensor Parsing for Sensor: " + startingSensorAddress + " + "+ i+ " has relvalue: "+ Integer.toHexString(relvalue));      boolean nooldstate=false;      byte oldstate=0x00;      if (sensorLastSetting[i] == Sensor.ACTIVE) {        oldstate=0x01;      } else {        if (sensorLastSetting[i] == Sensor.INACTIVE) {          oldstate=0x00;        } else {          nooldstate=true;        }      }      int newerstate=relvalue & 0x01;      byte newstate=(byte)(newerstate);      if ((nooldstate) || (oldstate != newstate)) {        if (nooldstate) {          log.debug("Sensor Parsing for Sensor: " + startingSensorAddress + " + "+ i+ "  had no old state.");        }        if (newstate == 0x00) {          sensorLastSetting[i]=Sensor.INACTIVE;          sensorArray[i].setKnownState(sensorLastSetting[i]);        } else {          sensorLastSetting[i]=Sensor.ACTIVE;          sensorArray[i].setKnownState(sensorLastSetting[i]);        }        log.debug("Sensor Parsing for Sensor: " + startingSensorAddress + " + "+ i+ " changed state: "+ sensorLastSetting[i]+ " rawvalue: "+ Integer.toHexString(rawvalue));      } else {        log.debug("Sensor Parsing for Sensor: " + startingSensorAddress + " + "+ i+ " did NOT change state: "+ sensorLastSetting[i]+ " rawvalue: "+ Integer.toHexString(rawvalue));      }    }  } catch (  JmriException e) {    log.error("exception in markChanges: " + e);  }}  }
class C{  private void userJoinedWorld(@NonNull Player user,@NonNull World world,WorldData worldData){  final UUID uuid=user.getUniqueId();  UserData data=loadedUserData.get(uuid);  if (data == null || !Objects.equals(WorldDimension.getBaseWorld(data.getOwner()),world)) {    WorldDimension.getPlayersAllDimensions(world).forEach(null);  }  data=UserData.load(core,world,uuid);  loadedUserData.put(uuid,data);  boolean isOwner=user.getUniqueId().equals(WorldDimension.getUUIDOfWorld(world));  if (isOwner && worldData != null) {    worldData.getTrustedUsers().remove(user.getUniqueId());  }  if (worldData != null && !isOwner) {    if (worldData.getBannedUsers().containsKey(uuid)) {      PunishEntry banEntry=worldData.getBannedUsers().get(uuid);      if (banEntry != null && banEntry.isBanned()) {        List<String> messages=new ArrayList<>();        messages.add(ChatColor.RED + "You are banned from this server.");        messages.add(ChatColor.RED + "Reason:");        messages.addAll(Arrays.asList(banEntry.getReason().split("\n")).stream().map(null).collect(Collectors.toList()));        if (banEntry.getTime() > 0)         messages.add(ChatColor.RED + "You will be unbanned in " + MinecraftlyUtil.getTimeString(banEntry.getRemainingBanTime())+ ".");        messages.stream().forEach(null);        core.sendToServer(user.getUniqueId(),user.getUniqueId(),false,false);        return;      }    }    if (worldData.isWhiteListed() && !worldData.getWhiteListedUsers().contains(uuid)) {      user.sendMessage(ChatColor.RED + "You're not white listed on this server, sorry.");      user.kickPlayer("$$$" + ChatColor.RED + "You're not white listed on this server, sorry.");      return;    }    if (worldData.getTrustedUsers().contains(uuid)) {      user.setGameMode(GameMode.SURVIVAL);    } else {      user.setGameMode(GameMode.ADVENTURE);    }  } else   if (isOwner) {    user.setGameMode(GameMode.SURVIVAL);  }  user.setBedSpawnLocation(data.getBedLocation());  Location lastLocation=data.getLastLocation() != null ? data.getLastLocation() : world.getSpawnLocation();  user.teleport(lastLocation,PlayerTeleportEvent.TeleportCause.PLUGIN);}  }
class C{  public LRUAlgorithm createEvictionController(Region region,boolean isOffHeap){  if (this.algorithm == EvictionAlgorithm.LRU_ENTRY) {    this.evictionController=new LRUCapacityController(this.maximum,this.action,region);  } else   if (this.algorithm == EvictionAlgorithm.LRU_HEAP) {    this.evictionController=new HeapLRUCapacityController(this.sizer,this.action,region);  } else   if (this.algorithm == EvictionAlgorithm.LRU_MEMORY) {    this.evictionController=new MemLRUCapacityController(this.maximum,this.sizer,this.action,region,isOffHeap);  } else   if (this.algorithm == EvictionAlgorithm.LIFO_ENTRY) {    this.evictionController=new LRUCapacityController(this.maximum,this.action,region);  } else   if (this.algorithm == EvictionAlgorithm.LIFO_MEMORY) {    this.evictionController=new MemLRUCapacityController(this.maximum,this.sizer,this.action,region,isOffHeap);  } else {    this.evictionController=null;  }  return this.evictionController;}  }
class C{  void selectType(Environment env,Context ctx,int tm){  if ((tm & TM_DOUBLE) != 0) {    type=Type.tDouble;  } else   if ((tm & TM_FLOAT) != 0) {    type=Type.tFloat;  } else   if ((tm & TM_LONG) != 0) {    type=Type.tLong;  } else {    type=Type.tInt;  }  left=convert(env,ctx,type,left);  right=convert(env,ctx,type,right);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.216 -0500",hash_original_method="2CBB805BB0A161F5128CD7B1280D9949",hash_generated_method="27092FC110AA8FE32A5A4C706D52F461") public CopyStreamAdapter(){  internalListeners=new ListenerList();}  }
class C{  public boolean dismissPopupMenus(){  boolean result=hideOverflowMenu();  result|=hideSubMenus();  return result;}  }
class C{  public static boolean reachableByPing(InetAddress addr,int reachTimeout){  try {    if (addr.isReachable(reachTimeout))     return true;    String cmd=String.format("ping -%s 1 %s",U.isWindows() ? "n" : "c",addr.getHostAddress());    Process myProc=Runtime.getRuntime().exec(cmd);    myProc.waitFor();    return myProc.exitValue() == 0;  } catch (  IOException ignore) {    return false;  }catch (  InterruptedException ignored) {    Thread.currentThread().interrupt();    return false;  }}  }
class C{  private void clearNotificationInternal(){  Log.v(TAG,ACTION_CLEAR_NOTIFICATION);  NotificationManagerCompat.from(this).cancel(Constants.MOBILE_NOTIFICATION_ID);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private DBFactory newDBFactory(){  try {    return newJniDBFactory();  } catch (  Exception ex) {    try {      return newJavaDBFactory();    } catch (    Exception ex2) {      throw new RuntimeException("Unable to create a LevelDB DBFactory instance. " + "Tried JNI and pure Java. " + "The stacktrace is the pure Java attempt.",ex2);    }  }}  }
class C{  protected Object createElementInfo(){  return new JavaProjectElementInfo();}  }
class C{  public final void testSetPasswordVerificationPrefixWithResourceIdParameter(){  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.setPasswordVerificationPrefix(android.R.string.cancel);  assertEquals(getContext().getString(android.R.string.cancel),passwordEditText.getPasswordVerificationPrefix());}  }
class C{  public void addPEPListener(PEPListener pepListener){synchronized (pepListeners) {    if (!pepListeners.contains(pepListener)) {      pepListeners.add(pepListener);    }  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  return (RollingCandle)super.clone();}  }
class C{  public void removeFieldValues(int fldId) throws Exception {  m_flds.removeFieldValues(fldId);}  }
class C{  RegistrarEmitter emitRegistrarContacts(String contactLabel,Iterable<RegistrarContact> contacts,AdminOrTech type){  for (  RegistrarContact contact : contacts) {    if ((type == AdminOrTech.ADMIN && contact.getVisibleInWhoisAsAdmin()) || (type == AdminOrTech.TECH && contact.getVisibleInWhoisAsTech())) {      emitField(contactLabel + " Contact",contact.getName()).emitPhonesAndEmail(contact.getPhoneNumber(),contact.getFaxNumber(),contact.getEmailAddress());    }  }  return this;}  }
class C{  public boolean isImportant(String name){  int idx=cssEngine.getPropertyIndex(name);  for (int i=0; i < declaration.size(); i++) {    if (idx == declaration.getIndex(i)) {      return declaration.getPriority(i);    }  }  return false;}  }
class C{  public static CpcRunner serializableInstance(){  return new CpcRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public TcpServer() throws IOException {  NioSocketAcceptor acceptor=new NioSocketAcceptor();  acceptor.setHandler(this);  acceptor.bind(new InetSocketAddress(PORT));  System.out.println("Server started...");}  }
class C{  public ConvolveFilter(Kernel kernel){  this.kernel=kernel;}  }
class C{  public static DataModelList serializableInstance(){  return new DataModelList();}  }
class C{  @Override public String validate(Player player,RPAction action,ActionData data){  String playerName=action.get(targetAttribute);  Player targetPlayer=SingletonRepository.getRuleProcessor().getPlayer(playerName);  String awayMessage=targetPlayer.getAwayMessage();  if (awayMessage != null) {    String error=targetPlayer.getName() + " is away. " + awayMessage;    if (tellAboutPostman) {      error=error + " Please use postman to send a message to " + playerName;    }    return error;  }  return null;}  }
class C{  private SuperList<Integer> generateTestList(){  List<List<Integer>> lists=new ArrayList<>();  for (int listId=0; listId < PARENT_COUNT; listId++) {    List<Integer> list=new ArrayList<>();    for (int num=0; num < ELEMENTS_PER_PARENT; num++) {      list.add(listId * ELEMENTS_PER_PARENT + num);    }    lists.add(list);  }  return new SuperList<>(lists);}  }
class C{  public static void copyFileToDirectory(File srcFile,File destDir,boolean preserveFileDate) throws IOException, IllegalArgumentException {  if (srcFile == null) {    throw new IllegalArgumentException("Source is null");  }  if (!srcFile.exists()) {    throw new FileNotFoundException("Source '" + srcFile + "' does not exist");  }  if (srcFile.isDirectory()) {    throw new IOException("Source '" + srcFile + "' is a directory");  }  if (destDir == null) {    throw new IllegalArgumentException("Destination is null");  }  if (!destDir.exists()) {    if (!destDir.mkdir()) {      throw new IOException("Destination '" + destDir + "' directory cannot be created");    }  } else {    if (!destDir.isDirectory()) {      throw new IllegalArgumentException("Destination '" + destDir + "' is not a directory");    }  }  File destFile=new File(destDir,srcFile.getName());  if (destFile.exists() && !destFile.canWrite()) {    throw new IOException("Destination '" + destFile + "' file exists but is read-only");  }  FileInputStream input=new FileInputStream(srcFile);  FileOutputStream output=null;  try {    output=new FileOutputStream(destFile);    byte[] buffer=new byte[1024];    int length;    while ((length=input.read(buffer)) > 0) {      output.write(buffer,0,length);    }  }  finally {    CloseableUtils.tryToClose(input);    CloseableUtils.tryToClose(output);  }  if (srcFile.length() != destFile.length()) {    throw new IOException("Failed to copy from '" + srcFile + "' to '"+ destFile+ "'");  }  if (preserveFileDate)   destFile.setLastModified(srcFile.lastModified());}  }
class C{  public static Collection<String> logFiles(){  Collection<String> res=new ArrayList<>(fileAppenders.size());  for (  FileAppender a : fileAppenders)   res.add(a.getFile());  return res;}  }
class C{  public void release(){  if (mEGLDisplay != EGL14.EGL_NO_DISPLAY) {    EGL14.eglMakeCurrent(mEGLDisplay,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_CONTEXT);    EGL14.eglDestroyContext(mEGLDisplay,mEGLContext);    EGL14.eglReleaseThread();    EGL14.eglTerminate(mEGLDisplay);  }  mEGLDisplay=EGL14.EGL_NO_DISPLAY;  mEGLContext=EGL14.EGL_NO_CONTEXT;  mEGLConfig=null;}  }
class C{  public double timeToHit(Particle that){  if (this == that)   return INFINITY;  double dx=that.rx - this.rx;  double dy=that.ry - this.ry;  double dvx=that.vx - this.vx;  double dvy=that.vy - this.vy;  double dvdr=dx * dvx + dy * dvy;  if (dvdr > 0)   return INFINITY;  double dvdv=dvx * dvx + dvy * dvy;  double drdr=dx * dx + dy * dy;  double sigma=this.radius + that.radius;  double d=(dvdr * dvdr) - dvdv * (drdr - sigma * sigma);  if (d < 0)   return INFINITY;  return -(dvdr + Math.sqrt(d)) / dvdv;}  }
class C{  public boolean indexIsInFieldList(){  return true;}  }
class C{  public BMPWriter(JComponent c,File f){  super(c,f);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.414 -0500",hash_original_method="AF6CB8DBEC021FC7528B8ED3F8431D0F",hash_generated_method="3F30D4B06EC9993AD7D54869C3336761") public void append(byte[] src){  append(src,0,src.length);}  }
class C{  public Iterator<String> keys(){  return this.keySet().iterator();}  }
class C{  @Override public Iterator<String> iterator(){  return this.args.iterator();}  }
class C{  public boolean hasType(){  return getType() != null;}  }
class C{  public static void fill(float[] array,int start,int end,float value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  static <T0,T1,T2,T3>Tuple4OfNullables<T0,T1,T2,T3> ofNullables(T0 e0,T1 e1,T2 e2,T3 e3){  return new Tuple4OfNullablesImpl<>(e0,e1,e2,e3);}  }
class C{  private Set<Node> orientUnshieldedTriples(Graph graph,IndependenceTest test,int depth,IKnowledge knowledge){  TetradLogger.getInstance().log("info","Starting Collider Orientation:");  List<Node> nodes=graph.getNodes();  Set<Node> colliderNodes=new HashSet<Node>();  SepsetProducer sepsetProducer=new SepsetsMinScore(graph,test,-1);  for (  Node y : nodes) {    orientCollidersAboutNode(graph,test,depth,knowledge,colliderNodes,y,sepsetProducer);  }  TetradLogger.getInstance().log("info","Finishing Collider Orientation.");  return colliderNodes;}  }
class C{  private static int stringToHash(String s){  int len=s.length();  int hash2=0;  int hash=len;  hash<<=5;  hash+=s.charAt(0) - 0x60;  int j=len;  for (int i=0; i < 4 && j > 0; i++) {    j--;    hash<<=5;    hash+=s.charAt(j) - 0x60;    hash2<<=6;    hash2+=s.charAt(i) - 0x5F;  }  return hash ^ hash2;}  }
class C{  public boolean isFinally(){  return etable.catchType(index) == 0;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (character: ");  result.append(character);  result.append(", sequence: ");  result.append(sequence);  result.append(')');  return result.toString();}  }
class C{  public static String javaEncode(String s){  int length=s.length();  StringBuilder buff=new StringBuilder(length);  for (int i=0; i < length; i++) {    char c=s.charAt(i);switch (c) {case '\t':      buff.append("\\t");    break;case '\n':  buff.append("\\n");break;case '\f':buff.append("\\f");break;case '\r':buff.append("\\r");break;case '"':buff.append("\\\"");break;case '\\':buff.append("\\\\");break;default :int ch=c & 0xffff;if (ch >= ' ' && (ch < 0x80)) {buff.append(c);} else {buff.append("\\u");String hex=Integer.toHexString(ch);for (int len=hex.length(); len < 4; len++) {buff.append('0');}buff.append(hex);}}}return buff.toString();}  }
class C{  public static JsonParserSequence createFlattened(JsonParser first,JsonParser second){  if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) {    return new JsonParserSequence(new JsonParser[]{first,second});  }  ArrayList<JsonParser> p=new ArrayList<JsonParser>();  if (first instanceof JsonParserSequence) {    ((JsonParserSequence)first).addFlattenedActiveParsers(p);  } else {    p.add(first);  }  if (second instanceof JsonParserSequence) {    ((JsonParserSequence)second).addFlattenedActiveParsers(p);  } else {    p.add(second);  }  return new JsonParserSequence(p.toArray(new JsonParser[p.size()]));}  }
class C{  protected RrdRandomAccessFileBackend(String path,boolean readOnly) throws IOException {  super(path,readOnly);  this.rafile=new RandomAccessFile(path,readOnly ? "r" : "rw");}  }
class C{  public WARArchiveImpl(Archive<?> delegate){  super(WARArchive.class,delegate);  setDefaultContextRoot();}  }
class C{  public static boolean cleanDir(String directory) throws IOException {  String[] files=ls(directory);  boolean clean=true;  if (files != null) {    for (    String f : files) {      String filename=directory + File.separator + f;      File file=new File(filename);      if (file.isDirectory())       clean=cleanDir(filename) && file.delete(); else       clean=file.delete();    }  }  return clean;}  }
class C{  public static double[] powerCurve(double lower,double mid,double upper){  final double[] curve=new double[3];  curve[0]=((lower * upper) - (mid * mid)) / (lower - (2 * mid) + upper);  curve[1]=Math.pow((mid - lower),2) / (lower - (2 * mid) + upper);  curve[2]=2 * Math.log((upper - mid) / (mid - lower));  return curve;}  }
class C{  public boolean isSelfService(){  Object oo=get_Value(COLUMNNAME_IsSelfService);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public CommandAPDU(byte[] apdu,int apduOffset,int apduLength){  checkArrayBounds(apdu,apduOffset,apduLength);  this.apdu=new byte[apduLength];  System.arraycopy(apdu,apduOffset,this.apdu,0,apduLength);  parse();}  }
class C{  public static boolean hasSettingsLoadSaveFailures(){  return SettingsFactory.hasLoadSaveFailure();}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public void removeUpdate(DocumentEvent e,Shape a,ViewFactory f){  super.removeUpdate(e,a,f);}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  @SuppressWarnings("static-method") protected boolean introducesScope(AncestorChain<?> ac){  ParseTreeNode node=ac.node;  return node instanceof FunctionConstructor || node instanceof CatchStmt || node instanceof WithStmt;}  }
class C{  public static String capitalizeFirstLetter(String str){  if (isEmpty(str)) {    return str;  }  char c=str.charAt(0);  return (!Character.isLetter(c) || Character.isUpperCase(c)) ? str : new StringBuilder(str.length()).append(Character.toUpperCase(c)).append(str.substring(1)).toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CacheInfo(final String cacheName){  this.name=cacheName;}  }
class C{  @Override protected void onPause(){  super.onPause();  moveSpring().removeAllListeners();}  }
class C{  public static String buildScope(String[] scopes){  StringBuilder builder=new StringBuilder();  for (int i=0; i < scopes.length; i++) {    builder.append(scopes[i]);    if (i < scopes.length - 1) {      builder.append(',');    }  }  return builder.toString();}  }
class C{  public static void write(File file,CharSequence data,Charset encoding,boolean append) throws IOException {  String str=data == null ? null : data.toString();  writeStringToFile(file,str,encoding,append);}  }
class C{  public ElementoTabla findElementoTablaById(String idTabla){  ElementoTabla tabla=null;  if (StringUtils.isNotBlank(idTabla)) {    Area area;    for (int i=0; (tabla == null) && (i < areas.size()); i++) {      area=(Area)areas.get(i);      for (int j=0; (tabla == null) && (j < area.getTotalElementos()); j++) {        Elemento elemento=(Elemento)area.getElemento(j);switch (elemento.getTipo()) {case TiposElemento.TIPO_ELEMENTO_AREA:case TiposElemento.TIPO_ELEMENTO_CABECERA:case TiposElemento.TIPO_ELEMENTO_TABLA_TEXTUAL:          tabla=findElementoTablaById(idTabla,(ContenedorElementos)elemento);        break;case TiposElemento.TIPO_ELEMENTO_TABLA:      if ((((ElementoTabla)elemento).getEdicion() != null) && idTabla.equals(((ElementoTabla)elemento).getEdicion().getId()))       tabla=(ElementoTabla)elemento;    break;}}}}return tabla;}  }
class C{  public int maxEntries(){  return maxEntries;}  }
class C{  public void returnLeaves(ArrayList<RuleNode>[] v){  if (m_isLeaf) {    v[0].add(this);  } else {    if (m_left != null) {      m_left.returnLeaves(v);    }    if (m_right != null) {      m_right.returnLeaves(v);    }  }}  }
class C{  static RouteBuilder options(String path){  return builder().options(path);}  }
class C{  public void testBug40279() throws Exception {  if (!versionMeetsMinimum(5,6,4)) {    return;  }  createTable("testBug40279","(f1 int, f2 timestamp(6))");  Timestamp ts=new Timestamp(1300791248001L);  Connection ps_conn_legacy=null;  Connection ps_conn_nolegacy=null;  Connection ssps_conn_legacy=null;  Connection ssps_conn_nolegacy=null;  try {    Properties props=new Properties();    props.setProperty("serverTimezone","UTC");    props.setProperty("useLegacyDatetimeCode","true");    props.setProperty("useServerPrepStmts","false");    ps_conn_legacy=getConnectionWithProps(props);    props.setProperty("useLegacyDatetimeCode","false");    ps_conn_nolegacy=getConnectionWithProps(props);    props.setProperty("useLegacyDatetimeCode","true");    props.setProperty("useServerPrepStmts","true");    ssps_conn_legacy=getConnectionWithProps(props);    props.setProperty("useLegacyDatetimeCode","false");    ssps_conn_nolegacy=getConnectionWithProps(props);    this.pstmt=ps_conn_legacy.prepareStatement("INSERT INTO testBug40279(f1, f2) VALUES (?, ?)");    this.pstmt.setInt(1,1);    this.pstmt.setTimestamp(2,ts);    this.pstmt.execute();    this.pstmt.close();    this.pstmt=ps_conn_nolegacy.prepareStatement("INSERT INTO testBug40279(f1, f2) VALUES (?, ?)");    this.pstmt.setInt(1,2);    this.pstmt.setTimestamp(2,ts);    this.pstmt.execute();    this.pstmt.close();    this.pstmt=ssps_conn_legacy.prepareStatement("INSERT INTO testBug40279(f1, f2) VALUES (?, ?)");    this.pstmt.setInt(1,3);    this.pstmt.setTimestamp(2,ts);    this.pstmt.execute();    this.pstmt.close();    this.pstmt=ssps_conn_nolegacy.prepareStatement("INSERT INTO testBug40279(f1, f2) VALUES (?, ?)");    this.pstmt.setInt(1,4);    this.pstmt.setTimestamp(2,ts);    this.pstmt.execute();    this.pstmt.close();    this.rs=this.stmt.executeQuery("SELECT f2 FROM testBug40279");    while (this.rs.next()) {      assertEquals(ts.getNanos(),this.rs.getTimestamp("f2").getNanos());    }  }  finally {    if (ps_conn_legacy != null) {      ps_conn_legacy.close();    }    if (ps_conn_nolegacy != null) {      ps_conn_nolegacy.close();    }    if (ssps_conn_legacy != null) {      ssps_conn_legacy.close();    }    if (ssps_conn_nolegacy != null) {      ssps_conn_nolegacy.close();    }  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  @Override public void pluginInitialize(){  this.initTelephonyReceiver();}  }
class C{  public ProfileVisit reason(Reason reason){  this.reason=reason;  return this;}  }
