class C{  private float calculateTranslationWidthAfterFieldRot(Rectangle bBox,double pageRotation,double relFieldRotation){  if (relFieldRotation == 0) {    return 0.0f;  }  if (pageRotation == 0 && (relFieldRotation == Math.PI || relFieldRotation == 3 * Math.PI / 2)) {    return bBox.getWidth();  }  if (pageRotation == -Math.PI / 2) {    if (relFieldRotation == -Math.PI / 2 || relFieldRotation == Math.PI) {      return bBox.getHeight();    }  }  if (pageRotation == -Math.PI) {    if (relFieldRotation == -1 * Math.PI) {      return bBox.getWidth();    }    if (relFieldRotation == -1 * Math.PI / 2) {      return bBox.getHeight();    }    if (relFieldRotation == Math.PI / 2) {      return -1 * (bBox.getHeight() - bBox.getWidth());    }  }  if (pageRotation == -3 * Math.PI / 2) {    if (relFieldRotation == -3 * Math.PI / 2) {      return -1 * (bBox.getWidth() - bBox.getHeight());    }    if (relFieldRotation == -Math.PI) {      return bBox.getHeight();    }    if (relFieldRotation == -Math.PI / 2) {      return bBox.getWidth();    }  }  return 0.0f;}  }
class C{  public void warning(SAXParseException exception) throws SAXException {  PrintWriter pw=getErrorWriter();  printLocation(pw,exception);  pw.println("Parser warning: " + exception.getMessage());}  }
class C{  @Override public AvroGenerator createGenerator(OutputStream out,JsonEncoding enc) throws IOException {  return createGenerator(out);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    if (serverTransaction == null) {      System.out.println("null server transaction -- ignoring the ACK!");      return;    }    Dialog dialog=serverTransaction.getDialog();    System.out.println("Dialog Created = " + dialog.getDialogId() + " Dialog State = "+ dialog.getState());    System.out.println("Waiting for INFO");  } catch (  Exception ex) {    ex.printStackTrace();    DialogTerminationOn50XTest.fail("Shootme: Failed on process ACK",ex);  }}  }
class C{  public void sum(Polynomial25519 other){  for (int i=0; i < 10; i++) {    c[i]+=other.c[i];  }}  }
class C{  public int next(){  int node=_currentNode;  if (DTM.NULL != node)   _currentNode=getNextNamespaceNode(_startNode,node,false);  return returnNode(node);}  }
class C{  public void logFatalError(String message){  Logger logger=this.getLogger();  String newMsg=this.enhanceMessage(message);  countLines(newMsg);  logger.fatal(newMsg);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AssertionIDRefElement createAssertionIDRefElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionIDRefElementImpl();}  }
class C{  public void testInsert1() throws SQLException {  DatabaseCreator.fillParentTable(conn);  DatabaseCreator.fillFKStrictTable(conn);  DatabaseCreator.fillFKCascadeTable(conn);  statement.execute("INSERT INTO " + DatabaseCreator.FKSTRICT_TABLE + " VALUES(4, 1, 'testInsert')");  statement.execute("INSERT INTO " + DatabaseCreator.FKCASCADE_TABLE + " VALUES(4, 1, 'testInsert')");}  }
class C{  public MediaFieldParser(String mediaField){  lexer=new Lexer("charLexer",mediaField);}  }
class C{  private void replace(MethodNode method){  for (  AbstractInsnNode ain : method.instructions.toArray()) {    if (multiZKM && ain.getOpcode() == Opcodes.AALOAD) {      AbstractInsnNode iin=ain.getPrevious();      int prevOp=iin.getOpcode();      if ((prevOp >= Opcodes.ICONST_0 && prevOp <= Opcodes.ICONST_5) || prevOp == Opcodes.BIPUSH)       if (ain.getPrevious().getPrevious() instanceof FieldInsnNode) {        FieldInsnNode fin=(FieldInsnNode)ain.getPrevious().getPrevious();        if (fin.name.equals(zkmFieldName) && fin.desc.equals("[Ljava/lang/String;")) {          String value=strings.get(OpUtils.getIntValue(iin));          if (value != null && !value.equals("null")) {            method.instructions.set(fin,new LdcInsnNode(value));            method.instructions.remove(iin);            method.instructions.remove(ain);          }        }      }    } else     if (!multiZKM) {      if (ain.getOpcode() == Opcodes.GETSTATIC) {        FieldInsnNode fin=(FieldInsnNode)ain;        System.out.println(fin.name + ":" + fin.desc);        if (fin.name.equals(zkmFieldName) && fin.desc.equals("Ljava/lang/String;")) {          method.instructions.set(fin,new LdcInsnNode(strings.get(0)));        }      }    }  }}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(){  return getHandler();}  }
class C{  private void addDITStructureRuleToSchemaFile(String schemaFile,DITStructureRule ditStructureRule,Set<ByteString> values,Set<DITStructureRule> addedDSRs,int depth) throws DirectoryException {  if (depth > 20) {    LocalizableMessage message=ERR_SCHEMA_MODIFY_CIRCULAR_REFERENCE_DSR.get(ditStructureRule.getNameOrRuleID());    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);  }  if (addedDSRs.contains(ditStructureRule)) {    return;  }  for (  DITStructureRule dsr : ditStructureRule.getSuperiorRules()) {    if (schemaFile.equals(getElementSchemaFile(dsr)) && !addedDSRs.contains(dsr)) {      addDITStructureRuleToSchemaFile(schemaFile,dsr,values,addedDSRs,depth + 1);    }  }  values.add(ByteString.valueOfUtf8(ditStructureRule.toString()));  addedDSRs.add(ditStructureRule);}  }
class C{  public ShapeTileOctagon(PlaPointInt a_point){  int tmp_1=a_point.v_x - a_point.v_y;  int tmp_2=a_point.v_x + a_point.v_y;  oct_lx=a_point.v_x;  oct_ly=a_point.v_y;  oct_rx=a_point.v_x;  ;  oct_uy=a_point.v_y;  oct_ulx=tmp_1;  oct_lrx=tmp_1;  oct_llx=tmp_2;  oct_urx=tmp_2;}  }
class C{  public MimeType(String primary,String sub) throws MimeTypeParseException {  this(primary,sub,new MimeTypeParameterList());}  }
class C{  public static int main(String[] args,boolean initializeServer,OutputStream outStream,OutputStream errStream){  final UpgradeCli app=new UpgradeCli(System.in,outStream,errStream);  return app.run(args,initializeServer);}  }
class C{  public static UnbindRequest unmodifiableUnbindRequest(final UnbindRequest request){  if (request instanceof UnmodifiableUnbindRequestImpl) {    return request;  }  return new UnmodifiableUnbindRequestImpl(request);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  Element element;  NodeList childList;  Node appendedChild;  doc=(Document)load("staffNS",true);  docElem=doc.getDocumentElement();  element=doc.createElementNS("test","employeeId");  appendedChild=docElem.appendChild(element);  childList=doc.getElementsByTagNameNS("*","employeeId");  assertSize("documentgetelementsbytagnameNS02",6,childList);}  }
class C{  public final void testEqualsObject04(){  CertPath cp1=new MyCertPath(testEncoding);  assertFalse(cp1.equals("MyEncoding"));}  }
class C{  public static boolean isFileNewer(File file,long timeMillis){  if (file == null) {    throw new IllegalArgumentException("No specified file");  }  if (!file.exists()) {    return false;  }  return file.lastModified() > timeMillis;}  }
class C{  public static int[][] createSparseMatrix(CellLayout iconLayout,int pivotX,int pivotY){  ViewGroup iconParent=iconLayout.getShortcutsAndWidgets();  int[][] matrix=createFullMatrix(iconLayout.getCountX() + 1,iconLayout.getCountY());  for (int i=0; i < iconParent.getChildCount(); i++) {    int cx=((CellLayout.LayoutParams)iconParent.getChildAt(i).getLayoutParams()).cellX;    int cy=((CellLayout.LayoutParams)iconParent.getChildAt(i).getLayoutParams()).cellY;    if (pivotX < 0) {      matrix[cx - pivotX][cy]=i;    } else {      matrix[cx][cy]=i;    }  }  if (pivotX < 0) {    matrix[0][pivotY]=PIVOT;  } else {    matrix[pivotX][pivotY]=PIVOT;  }  if (DEBUG) {    printMatrix(matrix);  }  return matrix;}  }
class C{  public void close() throws java.io.IOException {  flushBuffer();  m_os.close();}  }
class C{  public SmallSet(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference entRef;  boolean success;  doc=(Document)load("staffNS",false);  entRef=doc.createEntityReference("ent1");  assertNotNull("createdEntRefNotNull",entRef);  success=entRef.isSupported("XML CORE","");  assertFalse("nodeissupported04",success);}  }
class C{  public boolean equals(Object o){  if (o instanceof LDAPGroups) {    LDAPGroups g=(LDAPGroups)o;    if ((selectedGroupDNs != null) && (g.selectedGroupDNs != null) && (selectedGroupDNs.equals(g.selectedGroupDNs))) {      return true;    }  }  return false;}  }
class C{  public void handleTblRestSTSInstancesButtonAddRequest(RequestInvocationEvent event){  RestSTSAddViewBean vb=(RestSTSAddViewBean)getViewBean(RestSTSAddViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public boolean isReal(){  return type == REAL;}  }
class C{  public static String read(Reader aReader){  StringBuffer sb=new StringBuffer();  try {    BufferedReader bReader=new BufferedReader(aReader);    char[] data=new char[2048];    int count=0;    while ((count=bReader.read(data)) != -1) {      sb.append(data,0,count);    }    bReader.close();    aReader.close();  } catch (  IOException e) {  }  return sb.toString();}  }
class C{  public void testDivisionKnuthIsNormalized(){  byte aBytes[]={-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5};  byte bBytes[]={-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=-1;  int bSign=-1;  byte rBytes[]={0,-9,-8,-7,-6,-5,-4,-3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  Document newDoc;  String namespaceURI="http://www.w3.org/DOMTest/level2";  DocumentType docType=null;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      newDoc=domImpl.createDocument(namespaceURI,":",docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("domimplementationcreatedocument07",success);  }}  }
class C{  public void deleteEntityConfig(String realm,String federationId) throws WSFederationMetaException {  if (federationId == null) {    return;  }  if (realm == null) {    realm="/";  }  String[] objs={federationId,realm};  try {    Map oldAttrs=configInst.getConfiguration(realm,federationId);    Set oldValues=(Set)oldAttrs.get(ATTR_ENTITY_CONFIG);    if (oldValues == null || oldValues.isEmpty()) {      LogUtil.error(Level.INFO,LogUtil.NO_ENTITY_DESCRIPTOR_DELETE_ENTITY_CONFIG,objs,null);      throw new WSFederationMetaException("entity_config_not_exist",objs);    }    IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,federationId);    if (idpconfig != null) {      removeFromCircleOfTrust(idpconfig,realm,federationId);    }    SPSSOConfigElement spconfig=getSPSSOConfig(realm,federationId);    if (spconfig != null) {      removeFromCircleOfTrust(spconfig,realm,federationId);    }    Set attr=new HashSet();    attr.add(ATTR_ENTITY_CONFIG);    configInst.deleteConfiguration(realm,federationId,attr);    LogUtil.access(Level.INFO,LogUtil.ENTITY_CONFIG_DELETED,objs,null);    WSFederationMetaCache.putEntityConfig(realm,federationId,null);  } catch (  ConfigurationException e) {    debug.error("WSFederationMetaManager.deleteEntityConfig:",e);    String[] data={e.getMessage(),federationId,realm};    LogUtil.error(Level.INFO,LogUtil.CONFIG_ERROR_DELETE_ENTITY_CONFIG,data,null);    throw new WSFederationMetaException(e);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.ProxyTransitedStatementElement createProxyTransitedStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.ProxyTransitedStatementElementImpl();}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  public static MatchingResourcePath match(ResourcePath path){  return new MatchingResourcePath(path);}  }
class C{  private void analyzeResultingTlsContextAndWriteFile(TlsContext tlsContext,String folder,String fieldName,String workflowName,long phase) throws JAXBException, IOException {  if (TlsContextAnalyzer.containsFullWorkflowWithMissingMessage(tlsContext) || TlsContextAnalyzer.containsServerFinishedWithModifiedHandshake(tlsContext) || TlsContextAnalyzer.containsFullWorkflowWithModifiedMessage(tlsContext)) {    String fileNameBasic=createFileName(folder,phase,tlsContext,fieldName);    FileOutputStream fos=new FileOutputStream(fileNameBasic + workflowName + ".xml");    WorkflowTraceSerializer.write(fos,tlsContext.getWorkflowTrace());  }}  }
class C{  public boolean accept(String filePath,String fileName,String firstLine){  return acceptFile(filePath,fileName) || acceptIdentical(filePath,fileName) || acceptFirstLine(firstLine);}  }
class C{  public void readByteArray(byte[] arr,int offset) throws InvalidDataTypeException {  logger.finer("Reading MultipleTextEncodedStringNullTerminated from array from offset:" + offset);  while (true) {    try {      TextEncodedStringNullTerminated next=new TextEncodedStringNullTerminated(identifier,frameBody);      next.readByteArray(arr,offset);      if (next.getSize() == 0) {        break;      } else {        ((Values)value).add((String)next.getValue());        size+=next.getSize();        offset+=next.getSize();      }    } catch (    InvalidDataTypeException idte) {      break;    }    if (size == 0) {      logger.warning("No null terminated Strings found");      throw new InvalidDataTypeException("No null terminated Strings found");    }  }  logger.finer("Read  MultipleTextEncodedStringNullTerminated:" + value + " size:"+ size);}  }
class C{  public boolean equals(Object o){  if (o instanceof ServiceConfigManager) {    ServiceConfigManagerImpl oscm=(ServiceConfigManagerImpl)o;    if (serviceName.equals(oscm.serviceName) && version.equals(oscm.version)) {      return (true);    }  }  return (false);}  }
class C{  public PdfResources(){  this(new PdfDictionary());}  }
class C{  public XACMLAuthzDecisionStatementImpl(org.w3c.dom.Element element) throws XACMLException {  processElement(element);  makeImmutable();}  }
class C{  @Inject public SessionResourceUtil(final SSOTokenManager ssoTokenManager,final SessionQueryManager sessionQueryManager,final WebtopNamingQuery webtopNamingQuery){  this.ssoTokenManager=ssoTokenManager;  this.queryManager=sessionQueryManager;  this.webtopNamingQuery=webtopNamingQuery;}  }
class C{  @Override final protected int next(int numBits){  Utils.checkArgument(numBits >= 0 && numBits <= 32);  int numBytes=(numBits + 7) / 8;  byte b[]=new byte[numBytes];  int next=0;  nextBytes(b);  for (int i=0; i < numBytes; i++) {    next=(next << 8) + (b[i] & 0xFF);  }  return next >>> (numBytes * 8 - numBits);}  }
class C{  public boolean equals(Object obj){  if (obj == this)   return true;  return (obj instanceof TransactionState) && ((TransactionState)obj).m_transactionState == m_transactionState;}  }
class C{  public HeaderGroup copy(){  HeaderGroup clone=new HeaderGroup();  clone.headers.addAll(this.headers);  return clone;}  }
class C{  public boolean isOwnerReadable(){  return is(encodedPermission,OWNER_READABLE);}  }
class C{  public IllegalFormatPrecisionException(int p){  this.p=p;}  }
class C{  public Observable<Response<T,List<String>>> usingGallery(){  return applicationComponent.gallery().pickImages();}  }
class C{  @Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(Foo foo){  return fooPersistence.remove(foo);}  }
class C{  public void startDrag(DragGestureEvent trigger,Cursor dragCursor,Image dragImage,Point dragOffset,Transferable transferable,DragSourceListener dsl) throws InvalidDnDOperationException {  startDrag(trigger,dragCursor,dragImage,dragOffset,transferable,dsl,null);}  }
class C{  public Object clone(){  try {    ZipEntry e=(ZipEntry)super.clone();    e.extra=(extra == null) ? null : extra.clone();    return e;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public RoleList(){  super();}  }
class C{  @Override public void flush(){  writerLock.readLock().lock();  try {    if (writer == null)     return;    writer.flush();  } catch (  Exception e) {    reportError(null,e,ErrorManager.FLUSH_FAILURE);  } finally {    writerLock.readLock().unlock();  }}  }
class C{  public void paintViewportBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public Set searchFilteredRoles(String wildcard,int level) throws AMException, SSOException {  return searchFilteredRoles(wildcard,null,level);}  }
class C{  public boolean equals(Object obj){  return (obj != null && obj instanceof MimeType && getStringValue().equals(((MimeType)obj).getStringValue()));}  }
class C{  public boolean isSecure(){  return false;}  }
class C{  public boolean isMethod(){  return testAllFlags(IS_METHOD);}  }
class C{  public static void cacheResult(Foo foo){  getPersistence().cacheResult(foo);}  }
class C{  public void addTab(String title,Icon icon,Component component){  insertTab(title,icon,component,null,pages.size());}  }
class C{  protected boolean isOpenShiftMode(){  MavenProject project=getProject();  if (project != null) {    Properties properties=project.getProperties();    if (properties != null) {      return PlatformMode.isOpenShiftMode(properties);    }  }  return false;}  }
class C{  public DeleteRequestProtocolOp(ByteString dn){  this.dn=dn;}  }
class C{  public void serviceRequestQueue() throws CLIException {  if (isVerbose()) {    outputWriter.printlnMessage(rbMessages.getString("verbose-processing-request"));  }  try {    while (!requestQueue.isEmpty()) {      CLIRequest req=(CLIRequest)requestQueue.remove(0);      try {        req.process(this);        if (statusOS != null) {          String status=formatStatus(req.getOptions(),0);          statusOS.write(status.getBytes());        }      } catch (      CLIException e) {        if (isVerbose()) {          e.printStackTrace(System.out);        }        if (statusOS != null) {          String status=formatStatus(req.getOptions(),e.getExitCode());          statusOS.write(status.getBytes());        }        if (bContinue) {          outputWriter.printlnError(e.getMessage());        } else {          throw e;        }      }    }  } catch (  IOException e) {    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  } finally {    if (statusOS != null) {      try {        statusOS.close();      } catch (      IOException ex) {      }      statusOS=null;    }  }}  }
class C{  @Override public int read() throws IOException {  if (eof) {    throw new IOException("Read after end of file");  }  if (position == size) {    return doEndOfFile();  }  position++;  return processChar();}  }
class C{  public ReadOnlyFileException(){}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: " + this.myPort + " got an Invite sending Trying");    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      logger.info("null server tx -- getting a new one");      st=sipProvider.getNewServerTransaction(request);    }    logger.info("getNewServerTransaction : " + st);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ";transport="+ transport+ ">");    Response ringingResponse=messageFactory.createResponse(Response.RINGING,request);    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ringingResponse.setHeader(contactHeader);    ToHeader toHeader=(ToHeader)ringingResponse.getHeader(ToHeader.NAME);    String toTag="shootme-" + myPort + "-"+ new Integer(new Random().nextInt()).toString();    toHeader.setTag(toTag);    if (sendRinging) {      Thread.sleep(this.ringingDelay / 2);      System.out.println("Response = " + ringingResponse);      st.sendResponse(ringingResponse);    }    Dialog dialog=st.getDialog();    dialog.setApplicationData(st);    this.inviteSeen=true;    if (okDelay > 0) {      timer.schedule(new MyTimerTask(requestEvent,st,toTag),this.okDelay);    }  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterRead(final Context context,final ReadRequest request,final RequestHandler next){  return applicationTransformer.transform(next.handleRead(context,request),context);}  }
class C{  public static boolean[] parseTaskTabField(String tabField,int minValue,int maxValue) throws IllegalArgumentException {  boolean[] valueList=new boolean[maxValue + 1];  Matcher m=wildcardPattern.matcher(tabField);  if (m.matches() && m.groupCount() == 1) {    String stepString=m.group(1);    int increment=isValueAbsent(stepString) ? 1 : Integer.parseInt(stepString);    for (int i=minValue; i <= maxValue; i+=increment) {      valueList[i]=true;    }    return valueList;  }  for (  String listVal : tabField.split(",")) {    m=exactPattern.matcher(listVal);    if (m.matches() && m.groupCount() == 1) {      String exactValue=m.group(1);      if (isValueAbsent(exactValue)) {        throw new IllegalArgumentException();      }      int value=Integer.parseInt(exactValue);      if (value < minValue || value > maxValue) {        throw new IllegalArgumentException();      }      valueList[value]=true;      continue;    }    m=rangePattern.matcher(listVal);    if (m.matches() && m.groupCount() == 3) {      String startString=m.group(1);      String endString=m.group(2);      String stepString=m.group(3);      int increment=isValueAbsent(stepString) ? 1 : Integer.parseInt(stepString);      if (isValueAbsent(startString) || isValueAbsent(endString)) {        throw new IllegalArgumentException();      }      int startValue=Integer.parseInt(startString);      int endValue=Integer.parseInt(endString);      if (startValue > endValue || startValue < minValue || endValue > maxValue) {        throw new IllegalArgumentException();      }      for (int i=startValue; i <= endValue; i+=increment) {        valueList[i]=true;      }      continue;    }    throw new IllegalArgumentException();  }  return valueList;}  }
class C{  static Subscription registerForNotifyChangesToNode(String dn,SMSEventListener eventListener){  initialize();  return addNotificationObject(nodeChanges,DN.valueOf(dn),eventListener);}  }
class C{  protected boolean isLocalServerId(String serverId){  return (serverId != null && serverId.equalsIgnoreCase(localServerId));}  }
class C{  public void testUpdate8() throws SQLException {  statement.executeUpdate("UPDATE " + DatabaseCreator.SIMPLE_TABLE3 + " SET speed = (SELECT MAX(speed) FROM "+ DatabaseCreator.SIMPLE_TABLE1+ ") WHERE id = (SELECT id FROM "+ DatabaseCreator.SIMPLE_TABLE1+ " WHERE speed = (SELECT MAX(speed) FROM "+ DatabaseCreator.SIMPLE_TABLE1+ "))");  ResultSet r=statement.executeQuery("SELECT id FROM " + DatabaseCreator.SIMPLE_TABLE3 + " WHERE speed = (SELECT MAX(speed) FROM "+ DatabaseCreator.SIMPLE_TABLE1+ ");");  r.next();  assertEquals("Incorrect id updated",1,r.getInt(1));  r.close();}  }
class C{  public Observable<Void> deleteProductObservable(String productId){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  deleteProduct(productId,resultHandler.toHandler());  return resultHandler;}  }
class C{  private void validateOpenidResponseTypes(ClientRegistration clientRegistration,Set<String> requestedResponseTypes) throws UnsupportedResponseTypeException {  if (requestedResponseTypes.contains(TOKEN) && !requestedResponseTypes.contains(CODE) && !requestedResponseTypes.contains(ID_TOKEN)) {    logger.debug("Response type is not supported. OpenId Connect client does not support scope=\"token\".");    throw new UnsupportedResponseTypeException("Response type is not supported.",Utils.getRequiredUrlLocation(requestedResponseTypes,clientRegistration));  }}  }
class C{  @Override public int compareTo(RuleNet p_other){  if (p_other == null)   return 1;  return name.compareToIgnoreCase(p_other.name);}  }
class C{  private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  @Override public Foo create(long fooId){  Foo foo=new FooImpl();  foo.setNew(true);  foo.setPrimaryKey(fooId);  String uuid=PortalUUIDUtil.generate();  foo.setUuid(uuid);  foo.setCompanyId(companyProvider.getCompanyId());  return foo;}  }
class C{  private static HashSet<X500Principal> parseIssuerNames(Collection<Object> names) throws IOException {  HashSet<X500Principal> x500Principals=new HashSet<X500Principal>();  for (Iterator<Object> t=names.iterator(); t.hasNext(); ) {    Object nameObject=t.next();    if (nameObject instanceof String) {      x500Principals.add(new X500Name((String)nameObject).asX500Principal());    } else {      try {        x500Principals.add(new X500Principal((byte[])nameObject));      } catch (      IllegalArgumentException e) {        throw (IOException)new IOException("Invalid name").initCause(e);      }    }  }  return x500Principals;}  }
class C{  protected void installNextButtonListeners(Component c){  installButtonListeners(c,nextButtonHandler);}  }
class C{  public static String hash(String string){  try {    MessageDigest sha1=MessageDigest.getInstance("SHA-1");    sha1.update(string.getBytes("UTF-8"));    return Base64.encode(sha1.digest());  } catch (  Exception ex) {    Debug debug=Debug.getInstance("amSDK");    if (debug.warningEnabled()) {      debug.warning("Hash.hash:",ex);    }    return null;  }}  }
class C{  public void drawLine(SynthContext context,Object paintKey,Graphics g,int x1,int y1,int x2,int y2,Object styleKey){  if ("dashed".equals(styleKey)) {    if (x1 == x2) {      y1+=(y1 % 2);      for (int y=y1; y <= y2; y+=2) {        g.drawLine(x1,y,x2,y);      }    } else     if (y1 == y2) {      x1+=(x1 % 2);      for (int x=x1; x <= x2; x+=2) {        g.drawLine(x,y1,x,y2);      }    }  } else {    drawLine(context,paintKey,g,x1,y1,x2,y2);  }}  }
class C{  public void testGenericMethods(){  assertLenghtZero(clazz.getTypeParameters());}  }
class C{  public static CMSSignedData replaceCertificatesAndCRLs(CMSSignedData signedData,CertStore certsAndCrls) throws CMSException {  CMSSignedData cms=new CMSSignedData(signedData);  ASN1Set certs=null;  ASN1Set crls=null;  try {    ASN1Set set=CMSUtils.createBerSetFromList(CMSUtils.getCertificatesFromStore(certsAndCrls));    if (set.size() != 0) {      certs=set;    }  } catch (  CertStoreException e) {    throw new CMSException("error getting certs from certStore",e);  }  try {    ASN1Set set=CMSUtils.createBerSetFromList(CMSUtils.getCRLsFromStore(certsAndCrls));    if (set.size() != 0) {      crls=set;    }  } catch (  CertStoreException e) {    throw new CMSException("error getting crls from certStore",e);  }  cms.signedData=new SignedData(signedData.signedData.getDigestAlgorithms(),signedData.signedData.getEncapContentInfo(),certs,crls,signedData.signedData.getSignerInfos());  cms.contentInfo=new ContentInfo(cms.contentInfo.getContentType(),cms.signedData);  return cms;}  }
class C{  public BoundedInputStream(InputStream in,long size){  this.max=size;  this.in=in;}  }
class C{  @Override @Deprecated public String encodeUrl(String url){  return (encodeURL(url));}  }
class C{  public OverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY,boolean flywheel){  this(context,interpolator,flywheel);}  }
class C{  @Override public String toString(){  return getName();}  }
class C{  public static ImageTypeSpecifier createInterleaved(ColorSpace colorSpace,int[] bandOffsets,int dataType,boolean hasAlpha,boolean isAlphaPremultiplied){  return new ImageTypeSpecifier.Interleaved(colorSpace,bandOffsets,dataType,hasAlpha,isAlphaPremultiplied);}  }
class C{  public TestPasswordValidator(){  super();}  }
class C{  public final boolean isDeviceRooted(){  String su="su";  String[] locations={"/sbin/","/system/bin/","/system/xbin/","/system/sd/xbin/","/system/bin/failsafe/","/data/local/xbin/","/data/local/bin/","/data/local/"};  for (  String location : locations) {    if (new File(location + su).exists()) {      return true;    }  }  return false;}  }
class C{  public static Name upperUnderscore(String... pieces){  List<NamePiece> namePieces=new ArrayList<>();  for (  String piece : pieces) {    validateUpperUnderscore(piece);    namePieces.add(new NamePiece(piece,CaseFormat.UPPER_UNDERSCORE));  }  return new Name(namePieces);}  }
class C{  public boolean isBefore(MonthDay other){  return compareTo(other) < 0;}  }
class C{  private void runNext(){  WorkerThread t=null;  HeadTaskRunnable task=null;synchronized (this) {    if (shutdownThePool) {      return;    } else {      while (busyThreadCount == poolSize) {        try {          wait();          if (shutdownThePool) {            return;          }        } catch (        Exception ex) {          if (debug != null) {            debug.error("TimerPool:runNext() " + name,ex);          }        }      }      if (nextRun != null) {        long now=currentTimeMillis();        if (nextRun.getTime() <= now) {          if ((task=(HeadTaskRunnable)taskList.remove(nextRun)) != null) {            t=getAvailableThread();          }        }        try {          nextRun=(Date)taskList.firstKey();          long delay=nextRun.getTime() - now;          scheduler.setDelay((delay >= 0 ? delay : 0));        } catch (        NoSuchElementException ex) {          nextRun=null;          scheduler.setDelay(-1);        }      }    }  }  if ((t != null) && (task != null)) {    t.runTask(task);  }}  }
class C{  public synchronized boolean addAll(Collection<? extends E> c){  modCount++;  Object[] a=c.toArray();  int numNew=a.length;  ensureCapacityHelper(elementCount + numNew);  System.arraycopy(a,0,elementData,elementCount,numNew);  elementCount+=numNew;  return numNew != 0;}  }
class C{  @Override public void stop() throws LifecycleException {  state=LifecycleState.STOPPING_PREP;  clearReferences();  state=LifecycleState.STOPPING;  resourceEntries.clear();  jarModificationTimes.clear();  resources=null;  permissionList.clear();  loaderPC.clear();  state=LifecycleState.STOPPED;}  }
class C{  public Promise<List<List<ResourceResponse>>,ResourceException> update(Context context,PolicyResourceDelegate policyResourceDelegate){  checkState();  List<Promise<List<ResourceResponse>,ResourceException>> promises=new ArrayList<>();  Set<JsonValue> createdPolicies=new HashSet<>();  Set<JsonValue> updatedPolicies=new HashSet<>();  for (  String user : invalidUsers) {    Set<String> accessibleRights=rights.get(user);    PolicyScopes policies=policyRights.get(user);    Set<String> newRights=new HashSet<>(accessibleRights);    newRights.removeAll(policies.activeScopePolicies.keySet());    Set<String> newlyAccessibleRights=new HashSet<>(accessibleRights);    newlyAccessibleRights.retainAll(policies.inactiveScopePolicies.keySet());    Set<String> lostRights=new HashSet<>(policies.activeScopePolicies.keySet());    lostRights.removeAll(accessibleRights);    try {      for (      String scope : Sets.union(newRights,newlyAccessibleRights)) {        moveScope(policies.inactiveScopePolicies.get(scope),policies.activeOwnedPolicies,context,policyResourceDelegate,newRights,createdPolicies,updatedPolicies,scope,true,promises,user);      }      for (      String scope : lostRights) {        moveScope(policies.activeScopePolicies.get(scope),policies.inactiveOwnedPolicies,context,policyResourceDelegate,lostRights,createdPolicies,updatedPolicies,scope,false,promises,user);      }    } catch (    BadRequestException e) {      return e.asPromise();    }  }  if (!createdPolicies.isEmpty()) {    promises.add(policyResourceDelegate.createPolicies(context,createdPolicies));  }  if (!updatedPolicies.isEmpty()) {    promises.add(policyResourceDelegate.updatePolicies(context,updatedPolicies));  }  return Promises.when(promises);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  NamedNodeMap notations;  Entity entity;  Notation notation;  Node newNode;  String nullNS=null;  doc=(Document)load("staffNS",true);  docType=doc.getDoctype();  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  entity=(Entity)entities.getNamedItem("ent1");  notation=(Notation)notations.getNamedItem("notation1");{    boolean success=false;    try {      newNode=entities.setNamedItemNS(entity);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR_entities",success);  }{    boolean success=false;    try {      newNode=notations.setNamedItemNS(notation);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR_notations",success);  }}  }
class C{  static boolean isActivelySelecting(Spannable buffer){  DragState[] ds;  ds=buffer.getSpans(0,buffer.length(),DragState.class);  return ds.length > 0 && ds[0].mIsActivelySelecting;}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  MetalToolBarUI.register(c);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapremovenameditem.class,args);}  }
class C{  public Time(Date date){  SimpleTimeZone tz=new SimpleTimeZone(0,"Z");  SimpleDateFormat dateF=new SimpleDateFormat("yyyyMMddHHmmss");  dateF.setTimeZone(tz);  String d=dateF.format(date) + "Z";  int year=Integer.parseInt(d.substring(0,4));  if (year < 1950 || year > 2049) {    time=new DERGeneralizedTime(d);  } else {    time=new DERUTCTime(d.substring(2));  }}  }
class C{  private byte[] convertToVorbisCommentPacket(OggPageHeader startVorbisCommentPage,RandomAccessFile raf) throws IOException, CannotReadException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  byte[] b=new byte[startVorbisCommentPage.getPacketList().get(0).getLength() - (VorbisHeader.FIELD_PACKET_TYPE_LENGTH + VorbisHeader.FIELD_CAPTURE_PATTERN_LENGTH)];  raf.read(b);  baos.write(b);  if (startVorbisCommentPage.getPacketList().size() > 1) {    logger.config("Comments finish on 2nd Page because there is another packet on this page");    return baos.toByteArray();  }  if (!startVorbisCommentPage.isLastPacketIncomplete()) {    logger.config("Comments finish on 2nd Page because this packet is complete");    return baos.toByteArray();  }  while (true) {    logger.config("Reading next page");    OggPageHeader nextPageHeader=OggPageHeader.read(raf);    b=new byte[nextPageHeader.getPacketList().get(0).getLength()];    raf.read(b);    baos.write(b);    if (nextPageHeader.getPacketList().size() > 1) {      logger.config("Comments finish on Page because there is another packet on this page");      return baos.toByteArray();    }    if (!nextPageHeader.isLastPacketIncomplete()) {      logger.config("Comments finish on Page because this packet is complete");      return baos.toByteArray();    }  }}  }
class C{  public static boolean wasPerformed(Context context,ReconAction action){  try {    PendingActionContext pendingActionContext=getPendingActionContext(context,action);    if (pendingActionContext.getPendingAction().equals(action.toString())) {      return !pendingActionContext.isPending();    }  } catch (  IllegalArgumentException e) {    logger.debug("No PendingActionContext found");  }  return false;}  }
class C{  public int compareTo(CollationKey target){  int result=key.compareTo(((RuleBasedCollationKey)(target)).key);  if (result <= Collator.LESS)   return Collator.LESS; else   if (result >= Collator.GREATER)   return Collator.GREATER;  return Collator.EQUAL;}  }
class C{  public void createHTMLReports(String templateDir,String outputDir) throws IOException {  String templateHTML=ReportGenerator.getFileContent(templateDir + "/suite.html");  String dirName=outputDir + "/" + name;  File dir=new File(dirName);  dir.mkdir();  StringBuffer buff=new StringBuffer();  for (  Test t : tests) {    buff.append(t.toHTML());  }  templateHTML=templateHTML.replaceAll("@Test@",buff.toString());  templateHTML=templateHTML.replaceAll("@SuiteName@",name);  ReportGenerator.writeToFile(templateHTML,dirName + "/index.html");}  }
class C{  public boolean isEditable(){  return this.editable && isVisible();}  }
class C{  public void postRegister(Boolean registrationDone){}  }
class C{  public boolean startsWith(XMLString prefix){  return startsWith(prefix,0);}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  public void show_ratsnest(){  if (ratsnest != null) {    ratsnest.show();  }}  }
class C{  public AWTError(String msg){  super(msg);}  }
class C{  public static Byte[] convertDate(String date){  StringTokenizer st=new StringTokenizer(date);  String sdate=st.nextToken();  String stime=st.nextToken();  st=new StringTokenizer(sdate,"-");  String year=st.nextToken();  int iyear=0;  try {    iyear=Integer.parseInt(year);  } catch (  NumberFormatException ex) {    debug.error("MonitoringUtil.convertDate year = " + year + " not parsable");  }  byte yrlow=(byte)(iyear & 0xff);  byte yrhigh=(byte)(((iyear & 0xff00) >> 8) & 0xff);  String month=st.nextToken();  String day=st.nextToken();  st=new StringTokenizer(stime,":");  String hour=st.nextToken();  String min=st.nextToken();  String sec=st.nextToken();  Byte bz=Byte.valueOf((byte)0);  Byte byrhi=bz;  Byte byrlo=bz;  Byte bmo=bz;  Byte bdy=bz;  Byte bhr=bz;  Byte bmn=bz;  Byte bsc=bz;  try {    byrhi=new Byte(yrhigh);    byrlo=new Byte(yrlow);    bmo=new Byte(month);    bdy=new Byte(day);    bhr=new Byte(hour);    bmn=new Byte(min);    bsc=new Byte(sec);  } catch (  NumberFormatException ex) {    debug.error("MonitoringUtil error converting start date/time" + ", date = " + sdate + ", time = "+ stime);  }  Byte[] ret=new Byte[8];  ret[0]=byrhi;  ret[1]=byrlo;  ret[2]=bmo;  ret[3]=bdy;  ret[4]=bhr;  ret[5]=bmn;  ret[6]=bsc;  ret[7]=bz;  return ret;}  }
class C{  public int maxAgeSeconds(){  return maxAgeSeconds;}  }
class C{  public static String collapseWhitespace(final String value){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return value.trim().replaceAll("\\s\\s+"," ");}  }
class C{  public String toString(){  return (toXML());}  }
class C{  public UserDevicesDao(AuthenticatorDeviceServiceFactory serviceFactory){  this.serviceFactory=serviceFactory;}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.QueryResponseType createQueryResponseType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.QueryResponseTypeImpl();}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  if (attribute != null)   request.setAttribute(attribute,this);  long startTime=System.currentTimeMillis();  chain.doFilter(request,response);  long stopTime=System.currentTimeMillis();  filterConfig.getServletContext().log(this.toString() + ": " + (stopTime - startTime)+ " milliseconds");}  }
class C{  public InstantiationError(String s){  super(s);}  }
class C{  private void publishUpdateMessages(String testName,ReplicaId replicaId,boolean checkLastCookie,ReplicationMsg... messages) throws Exception {  ReplicationBroker broker=enableReplication(replicaId);  String cookie="";  for (  ReplicationMsg msg : messages) {    if (msg instanceof UpdateMsg) {      final UpdateMsg updateMsg=(UpdateMsg)msg;      assertThat(updateMsg.getCSN().getServerId()).isEqualTo(replicaId.getServerId());      debugInfo(testName," publishes " + updateMsg.getCSN());    }    broker.publish(msg);    if (checkLastCookie) {      cookie=assertLastCookieDifferentThanLastValue(cookie);    }  }}  }
class C{  @Override public void removeChannelListener(ChannelListener channelListener){  channelListeners.remove(channelListener);}  }
class C{  @SuppressWarnings("unchecked") private Segment<K,V> segmentForHash(int h){  long u=(((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;  return (Segment<K,V>)UNSAFE.getObjectVolatile(segments,u);}  }
class C{  public void insert_string(String value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_string",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_string(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private DsnLogicalPartMapping read_logical_part_mapping(JflexScanner p_scanner){  try {    Object next_token=p_scanner.next_token();    if (!(next_token instanceof String)) {      System.out.println("PartLibrary.read_logical_part_mapping: string expected");      return null;    }    String name=(String)next_token;    next_token=p_scanner.next_token();    if (next_token != DsnKeyword.OPEN_BRACKET) {      System.out.println("PartLibrary.read_logical_part_mapping: open bracket expected");      return null;    }    next_token=p_scanner.next_token();    if (next_token != DsnKeyword.COMPONENT_SCOPE) {      System.out.println("PartLibrary.read_logical_part_mapping: Keyword.COMPONENT_SCOPE expected");      return null;    }    java.util.SortedSet<String> result=new java.util.TreeSet<String>();    for (; ; ) {      p_scanner.yybegin(DsnFileScanner.NAME);      next_token=p_scanner.next_token();      if (next_token == DsnKeyword.CLOSED_BRACKET) {        break;      }      if (!(next_token instanceof String)) {        System.out.println("PartLibrary.read_logical_part_mapping: string expected");        return null;      }      result.add((String)next_token);    }    next_token=p_scanner.next_token();    if (next_token != DsnKeyword.CLOSED_BRACKET) {      System.out.println("PartLibrary.read_logical_part_mapping: closing bracket expected");      return null;    }    return new DsnLogicalPartMapping(name,result);  } catch (  java.io.IOException e) {    System.out.println("PartLibrary.read_logical_part_mapping: IO error scanning file");    return null;  }}  }
class C{  public Iterator<E> iterator(){  return new Itr(toArray());}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  public boolean seek(int index){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("seek",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    return $self.seek(index);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public PlaLineInt plaline_last_prev(){  return plaline(plaline_len(-2));}  }
class C{  protected IOException copyRange(InputStream istream,ServletOutputStream ostream){  IOException exception=null;  byte buffer[]=new byte[input];  int len=buffer.length;  while (true) {    try {      len=istream.read(buffer);      if (len == -1)       break;      ostream.write(buffer,0,len);    } catch (    IOException e) {      exception=e;      len=-1;      break;    }  }  return exception;}  }
class C{  public ItemStack(final Material type){  this(type,1);}  }
class C{  public final boolean insert_via(BrdViaInfo p_via_info,PlaPointInt p_location,NetNosList p_net_no_arr,int p_trace_clearance_class_no,int[] p_trace_pen_halfwidth_arr,int p_max_recursion_depth,int p_max_via_recursion_depth,int p_pull_tight_accuracy,int p_pull_tight_time_limit){  shove_fail_clear();  changed_area_clear();  boolean r_ok=shove_via_algo.shove_via_insert(p_via_info,p_location,p_net_no_arr,p_trace_clearance_class_no,p_trace_pen_halfwidth_arr,p_max_recursion_depth,p_max_via_recursion_depth);  if (!r_ok)   return false;  NetNosList opt_net_no_arr=p_max_recursion_depth <= 0 ? p_net_no_arr : NetNosList.EMPTY;  TimeLimitStoppable t_limit=new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP);  changed_area_optimize(opt_net_no_arr,p_pull_tight_accuracy,null,t_limit,null);  return true;}  }
class C{  public BlockIterator(World world,Vector start,Vector direction,double yOffset,int maxDistance){  this.world=world;  this.maxDistance=maxDistance;  Vector startClone=start.clone();  startClone.setY(startClone.getY() + yOffset);  currentDistance=0;  double mainDirection=0;  double secondDirection=0;  double thirdDirection=0;  double mainPosition=0;  double secondPosition=0;  double thirdPosition=0;  Block startBlock=this.world.getBlockAt(floor(startClone.getX()),floor(startClone.getY()),floor(startClone.getZ()));  if (getXLength(direction) > mainDirection) {    mainFace=getXFace(direction);    mainDirection=getXLength(direction);    mainPosition=getXPosition(direction,startClone,startBlock);    secondFace=getYFace(direction);    secondDirection=getYLength(direction);    secondPosition=getYPosition(direction,startClone,startBlock);    thirdFace=getZFace(direction);    thirdDirection=getZLength(direction);    thirdPosition=getZPosition(direction,startClone,startBlock);  }  if (getYLength(direction) > mainDirection) {    mainFace=getYFace(direction);    mainDirection=getYLength(direction);    mainPosition=getYPosition(direction,startClone,startBlock);    secondFace=getZFace(direction);    secondDirection=getZLength(direction);    secondPosition=getZPosition(direction,startClone,startBlock);    thirdFace=getXFace(direction);    thirdDirection=getXLength(direction);    thirdPosition=getXPosition(direction,startClone,startBlock);  }  if (getZLength(direction) > mainDirection) {    mainFace=getZFace(direction);    mainDirection=getZLength(direction);    mainPosition=getZPosition(direction,startClone,startBlock);    secondFace=getXFace(direction);    secondDirection=getXLength(direction);    secondPosition=getXPosition(direction,startClone,startBlock);    thirdFace=getYFace(direction);    thirdDirection=getYLength(direction);    thirdPosition=getYPosition(direction,startClone,startBlock);  }  double d=mainPosition / mainDirection;  double secondd=secondPosition - secondDirection * d;  double thirdd=thirdPosition - thirdDirection * d;  secondError=floor(secondd * gridSize);  secondStep=round(secondDirection / mainDirection * gridSize);  thirdError=floor(thirdd * gridSize);  thirdStep=round(thirdDirection / mainDirection * gridSize);  if (secondError + secondStep <= 0) {    secondError=-secondStep + 1;  }  if (thirdError + thirdStep <= 0) {    thirdError=-thirdStep + 1;  }  Block lastBlock;  lastBlock=startBlock.getRelative(mainFace.getOppositeFace());  if (secondError < 0) {    secondError+=gridSize;    lastBlock=lastBlock.getRelative(secondFace.getOppositeFace());  }  if (thirdError < 0) {    thirdError+=gridSize;    lastBlock=lastBlock.getRelative(thirdFace.getOppositeFace());  }  secondError-=gridSize;  thirdError-=gridSize;  blockQueue[0]=lastBlock;  currentBlock=-1;  scan();  boolean startBlockFound=false;  for (int cnt=currentBlock; cnt >= 0; cnt--) {    if (blockEquals(blockQueue[cnt],startBlock)) {      currentBlock=cnt;      startBlockFound=true;      break;    }  }  if (!startBlockFound) {    throw new IllegalStateException("Start block missed in BlockIterator");  }  maxDistanceInt=round(maxDistance / (Math.sqrt(mainDirection * mainDirection + secondDirection * secondDirection + thirdDirection * thirdDirection) / mainDirection));}  }
class C{  private String modifyAddress(String entry,AddressElement ae){  StringBuffer sb=new StringBuffer(100);  StringTokenizer st=new StringTokenizer(entry,"|");  while (st.hasMoreTokens()) {    String token=st.nextToken();    if (token.startsWith("PostalAddress")) {      if (ae == null) {        continue;      }      DSTString postalAddress=ae.getPostalAddress();      if (postalAddress != null) {        sb.append("PostalAddress").append("=").append(postalAddress.getValue()).append("|");      } else {        sb.append(token).append("|");      }    } else     if (token.startsWith("PostalCode")) {      if (ae == null) {        continue;      }      DSTString postalCode=ae.getPostalCode();      if (postalCode != null) {        sb.append("PostalCode").append("=").append(postalCode.getValue()).append("|");      } else {        sb.append(token).append("|");      }    } else     if (token.startsWith("L")) {      if (ae == null) {        continue;      }      DSTString city=ae.getL();      if (city != null) {        sb.append("L").append("=").append(city.getValue()).append("|");      } else {        sb.append(token).append("|");      }    } else     if (token.startsWith("St")) {      if (ae == null) {        continue;      }      DSTString state=ae.getSt();      if (state != null) {        sb.append("St").append("=").append(state.getValue()).append("|");      } else {        sb.append(token).append("|");      }    } else     if (token.startsWith("C")) {      if (ae == null) {        continue;      }      DSTString country=ae.getC();      if (country != null) {        sb.append("C").append("=").append(country.getValue()).append("|");      } else {        sb.append(token).append("|");      }    } else {      sb.append(token).append("|");    }  }  return sb.toString();}  }
class C{  public AuditEvent auditAccessOutcome(){  if (response.hasSuccessStatusCode()) {    return auditAccessSuccess();  } else {    return auditAccessFailure();  }}  }
class C{  public static synchronized PasswordAuthentication requestPasswordAuthentication(String rHost,InetAddress rAddr,int rPort,String rProtocol,String rPrompt,String rScheme){  if (thisAuthenticator == null) {    return null;  }  thisAuthenticator.host=rHost;  thisAuthenticator.addr=rAddr;  thisAuthenticator.port=rPort;  thisAuthenticator.protocol=rProtocol;  thisAuthenticator.prompt=rPrompt;  thisAuthenticator.scheme=rScheme;  thisAuthenticator.rt=RequestorType.SERVER;  return thisAuthenticator.getPasswordAuthentication();}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending RINGING");    Response response=ProtocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=ProtocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=ProtocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Created a new server transaction for " + request.getMethod() + " serverTransaction = "+ st);    }    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=ProtocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    this.inviteTid=st;    this.inviteRequest=request;    new Timer().schedule(new MyTimerTask(this),300);  } catch (  Exception ex) {    logger.error(ex);    fail(unexpectedException);  }}  }
class C{  public void removeCOSAttribute(String attrName){  modify(new Attr(ICOSDefinition.COSATTRIBUTE,attrName),ModificationType.DELETE);}  }
class C{  protected ConnAdapter(PoolEntry entry,HttpRoute route){  super(SingleClientConnManager.this,entry);  markReusable();  entry.route=route;}  }
class C{  public WebRuleSet(boolean fragment){  this("",fragment);}  }
class C{  @Override public ShapeTileSimplex intersection(ShapeTileSimplex p_other){  if (is_empty() || p_other.is_empty())   return EMPTY;  ArrayList<PlaLineInt> new_arr=new ArrayList<PlaLineInt>(lines_size() + p_other.lines_size());  new_arr.addAll(lines_list);  new_arr.addAll(p_other.lines_list);  ShapeTileSimplex result=new ShapeTileSimplex(new_arr);  return result.remove_redundant_lines();}  }
class C{  protected CompositeName(Enumeration<String> comps){  impl=new NameImpl(null,comps);}  }
class C{  public void preSingleSignOnRequest(String hostedEntityID,String idpEntityID,String realm,HttpServletRequest request,HttpServletResponse response,AuthnRequest authnRequest) throws SAML2Exception {  return;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event){  backTrail();  forwardToRealmView(event);}  }
class C{  protected void checkIsoConformance(){}  }
class C{  public AttributeSchemaComparator(Collator collator){  this.collator=collator;}  }
class C{  private void doModDN(String dn,String newRDN,String newSuperior) throws Exception {  ModifyDNRequest modifyDNRequest=Requests.newModifyDNRequest(dn,newRDN);  if (newSuperior != null) {    modifyDNRequest.setDeleteOldRDN(true).setNewSuperior(newSuperior);  }  ModifyDNOperation modDNop=getRootConnection().processModifyDN(modifyDNRequest);  assertEquals(modDNop.getResultCode(),ResultCode.SUCCESS);}  }
class C{  public int hashCode(){  return (schemaType.hashCode());}  }
class C{  public void importStyleSheet(URL url){  try {    InputStream is;    is=url.openStream();    Reader r=new BufferedReader(new InputStreamReader(is));    CssParser parser=new CssParser();    parser.parse(url,r,false,true);    r.close();    is.close();  } catch (  Throwable e) {  }}  }
class C{  public File makeDirty() throws IOException {  File f=File.createTempFile("dirty",".tmp",repositoryLocation.getParentFile());  FileWriter fw=new FileWriter(f);  fw.write("" + System.currentTimeMillis());  fw.flush();  fw.close();  return f;}  }
class C{  public IccBased(InputStream iccStream){  this(new PdfCieBasedCs.IccBased(iccStream),null);  colorValue=new float[getNumberOfComponents()];  for (int i=0; i < getNumberOfComponents(); i++)   colorValue[i]=0f;}  }
class C{  public DebugImpl(String debugName,DebugFileProvider debugFileProvider){  this.debugName=debugName;  if (SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_LEVEL) != null) {    setDebug(SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_LEVEL));  } else {    setDebug(DebugLevel.ON);  }  this.debugFileProvider=debugFileProvider;  stdoutDebugFile=debugFileProvider.getStdOutDebugFile();  String mf=SystemPropertiesManager.get(DebugConstants.CONFIG_DEBUG_MERGEALL);  mergeAllMode="on".equals(mf);}  }
class C{  private void appendHTMLStack(ProfileStack stack,StringBuilder html,String highlightClassAndMethod){  int numFrames=stack.getNumFrames();  for (int i=numFrames - 1; i >= 0; i--) {    html.append("<BR>     ");    String className=stack.getClassName(i);    String methodName=stack.getMethodName(i);    int lineNumber=stack.getLineNumber(i);    String safeMethod=methodName.equals("<init>") ? "&lt;init&gt;" : methodName;    String classAndMethod=className + "." + methodName;    if (classAndMethod.equals(highlightClassAndMethod)) {      html.append("<B>");      html.append(className);      html.append(".");      html.append(safeMethod);      html.append(":");      if (lineNumber == ProfileStack.LINE_NUMBER_NATIVE) {        html.append("&lt;native&gt;");      } else       if (lineNumber == ProfileStack.LINE_NUMBER_UNKNOWN) {        html.append("&lt;unknown&gt;");      } else {        html.append(lineNumber);      }      html.append("</B>");    } else {      html.append(className);      html.append(".");      html.append(safeMethod);      html.append(":");      if (lineNumber == ProfileStack.LINE_NUMBER_NATIVE) {        html.append("&lt;native&gt;");      } else       if (lineNumber == ProfileStack.LINE_NUMBER_UNKNOWN) {        html.append("&lt;unknown&gt;");      } else {        html.append(lineNumber);      }    }  }}  }
class C{  public static void updateMotto(Class c,int remoteViewsId,Context context,int bitmapWidth,int bitmapHeight){  RemoteViews remoteViews=new RemoteViews(context.getPackageName(),remoteViewsId);  remoteViews.setImageViewBitmap(R.id.motto,Util.getMottoBitmap(context,SettingsManager.getBaseColor(),bitmapWidth,bitmapHeight));  AppWidgetManager.getInstance(context).updateAppWidget(new ComponentName(context,c),remoteViews);}  }
class C{  public void fireIndexedPropertyChange(String propertyName,int index,boolean oldValue,boolean newValue){  if (oldValue != newValue) {    fireIndexedPropertyChange(propertyName,index,Boolean.valueOf(oldValue),Boolean.valueOf(newValue));  }}  }
class C{  public TransformerHandler newTransformerHandler(Source src) throws TransformerConfigurationException {  Templates templates=newTemplates(src);  if (templates == null)   return null;  return newTransformerHandler(templates);}  }
class C{  private boolean rehash(){  if (tombstones + size < maximumLoad) {    return false;  }  int capacity=table.length >> 1;  int newCapacity=capacity;  if (size > (capacity >> 1)) {    newCapacity=capacity * 2;  }  Object[] oldTable=this.table;  initializeTable(newCapacity);  this.tombstones=0;  if (size == 0) {    return true;  }  for (int i=oldTable.length - 2; i >= 0; i-=2) {    Object k=oldTable[i];    if (k == null || k == TOMBSTONE) {      continue;    }    @SuppressWarnings("unchecked") Reference<ThreadLocal<?>> reference=(Reference<ThreadLocal<?>>)k;    ThreadLocal<?> key=reference.get();    if (key != null) {      add(key,oldTable[i + 1]);    } else {      size--;    }  }  return true;}  }
class C{  public DefaultHighlighter(){  drawsLayeredHighlights=true;}  }
class C{  @Issue("JENKINS-29922") @Test public void dollar_class_must_die2() throws Exception {  WorkflowJob p=r.jenkins.createProject(WorkflowJob.class,"die2");  p.setDefinition(new CpsFlowDefinition("california ocean:'pacific', mountain:'sierra', moderate:true"));  r.assertLogContains("Introducing california\nCalifornia from pacific to sierra",r.assertBuildStatusSuccess(p.scheduleBuild2(0)));}  }
class C{  public void testThrowException() throws Exception {  try {    CoderResult.OVERFLOW.throwException();    fail("Should throw BufferOverflowException");  } catch (  BufferOverflowException ex) {  }  try {    CoderResult.UNDERFLOW.throwException();    fail("Should throw BufferOverflowException");  } catch (  BufferUnderflowException ex) {  }  try {    CoderResult.malformedForLength(1).throwException();    fail("Should throw MalformedInputException");  } catch (  MalformedInputException ex) {    assertEquals(ex.getInputLength(),1);  }  try {    CoderResult.unmappableForLength(1).throwException();    fail("Should throw UnmappableCharacterException");  } catch (  UnmappableCharacterException ex) {    assertEquals(ex.getInputLength(),1);  }}  }
class C{  public Callback[] handleJsonCallbacks(final Callback[] originalCallbacks,final JsonValue jsonCallbacks) throws RestAuthException {  if (originalCallbacks.length != jsonCallbacks.size()) {    logger.error("Incorrect number of callbacks found in JSON response");    throw new RestAuthException(ResourceException.BAD_REQUEST,"Incorrect number of callbacks found in JSON response");  }  for (int i=0; i < originalCallbacks.length; i++) {    final Callback originalCallback=originalCallbacks[i];    final RestAuthCallbackHandler restAuthCallbackHandler=restAuthCallbackHandlerFactory.getRestAuthCallbackHandler(originalCallback.getClass());    final JsonValue jsonCallback=jsonCallbacks.get(i);    if (!restAuthCallbackHandler.getCallbackClassName().equals(jsonCallback.get("type").asString())) {      logger.error("Required callback not found in JSON response");      throw new RestAuthException(ResourceException.BAD_REQUEST,"Required callback not found in JSON response");    }    restAuthCallbackHandler.convertFromJson(originalCallback,jsonCallback);  }  return originalCallbacks;}  }
class C{  public boolean validate(){  if (complete_expansion_rooms == null)   return true;  for (  ExpandRoomFreespaceComplete curr_room : complete_expansion_rooms) {    if (!curr_room.validate(this))     return false;  }  return true;}  }
class C{  public String replaceTokensWithValues(String queryString,Map<String,Object> params) throws BadRequestException {  java.util.regex.Matcher matcher=tokenPattern.matcher(queryString);  StringBuffer buffer=new StringBuffer();  while (matcher.find()) {    String tokenKey=matcher.group(1);    if (!params.containsKey(tokenKey)) {      throw new BadRequestException("Missing entry in params passed to query for token " + tokenKey);    } else {      Object replacement=params.get(tokenKey);      if (replacement instanceof List) {        StringBuffer commaSeparated=new StringBuffer();        boolean first=true;        for (        Object entry : ((List)replacement)) {          if (!first) {            commaSeparated.append(",");          } else {            first=false;          }          commaSeparated.append(entry.toString());        }        replacement=commaSeparated.toString();      }      if (replacement == null) {        replacement="";      }      matcher.appendReplacement(buffer,"");      buffer.append(replacement);    }  }  matcher.appendTail(buffer);  return buffer.toString();}  }
class C{  public int hash(char[] buffer,int offset,int length){  int code=0;  for (int i=0; i < length; i++) {    code=code * 37 + buffer[offset + i];  }  return code & 0x7FFFFFF;}  }
class C{  public void removeHeader(String name){  for (int i=0; i < count; i++) {    if (headers[i].getName().equalsIgnoreCase(name)) {      removeHeader(i--);    }  }}  }
class C{  public void pushSAXLocator(SourceLocator location){  m_saxLocations.push(location);}  }
class C{  public void testPosPosSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-2,-3,-4,-4,-1,-66,95,47,123,59,-13,39,30,-97};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptionMethodType.KeySize createEncryptionMethodTypeKeySize() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptionMethodTypeImpl.KeySizeImpl();}  }
class C{  public Node appendChild(Node newChild){  if (newChild == null) {    throw new IllegalArgumentException("newChild == null!");  }  checkNode(newChild);  return insertBefore(newChild,null);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LegalIdentityElement createLegalIdentityElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LegalIdentityElementImpl();}  }
class C{  public void fatalError(SAXParseException e) throws SAXException {  throw e;}  }
class C{  public static Map<String,Object> params(String key1,Object value1,String key2,Object value2,String key3,Object value3,String key4,Object value4,String key5,Object value5){  return map(key1,value1,key2,value2,key3,value3,key4,value4,key5,value5);}  }
class C{  public ECPRelayStateImpl(String xmlString) throws SAML2Exception {  Document xmlDocument=XMLUtils.toDOMDocument(xmlString,SAML2SDKUtils.debug);  if (xmlDocument == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorObtainingElement"));  }  parseElement(xmlDocument.getDocumentElement());}  }
class C{  public ComponentColorModel(ColorSpace colorSpace,int[] bits,boolean hasAlpha,boolean isAlphaPremultiplied,int transparency,int transferType){  super(bitsHelper(transferType,colorSpace,hasAlpha),bitsArrayHelper(bits,transferType,colorSpace,hasAlpha),colorSpace,hasAlpha,isAlphaPremultiplied,transparency,transferType);switch (transferType) {case DataBuffer.TYPE_BYTE:case DataBuffer.TYPE_USHORT:case DataBuffer.TYPE_INT:    signed=false;  needScaleInit=true;break;case DataBuffer.TYPE_SHORT:signed=true;needScaleInit=true;break;case DataBuffer.TYPE_FLOAT:case DataBuffer.TYPE_DOUBLE:signed=true;needScaleInit=false;noUnnorm=true;nonStdScale=false;break;default :throw new IllegalArgumentException("This constructor is not " + "compatible with transferType " + transferType);}setupLUTs();}  }
class C{  public void insert_typecode(org.omg.CORBA.TypeCode value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_typecode",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    $self.insert_typecode(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  @Override public void removeAlias(String alias){  alias=alias.toLowerCase(Locale.ENGLISH);synchronized (aliasesLock) {    int n=-1;    for (int i=0; i < aliases.length; i++) {      if (aliases[i].equals(alias)) {        n=i;        break;      }    }    if (n < 0)     return;    int j=0;    String results[]=new String[aliases.length - 1];    for (int i=0; i < aliases.length; i++) {      if (i != n)       results[j++]=aliases[i];    }    aliases=results;  }  fireContainerEvent(REMOVE_ALIAS_EVENT,alias);}  }
class C{  public Builder removeAttribute(String attributeOID){  this.attributeOIDs.remove(attributeOID);  return this;}  }
class C{  public PhantomReference(T referent,ReferenceQueue<? super T> q){  super(referent,q);}  }
class C{  public void requestAccountExpirationTime(){  operations.add(PasswordPolicyStateOperationType.GET_ACCOUNT_EXPIRATION_TIME);}  }
class C{  public static void registerListeners(){  DirectoryServer.registerBackupTaskListener(instance);  DirectoryServer.registerRestoreTaskListener(instance);  DirectoryServer.registerExportTaskListener(instance);  DirectoryServer.registerImportTaskListener(instance);}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  final boolean tryMatchData(){  Object x=item;  if (x != null && x != this && casItem(x,null)) {    LockSupport.unpark(waiter);    return true;  }  return false;}  }
class C{  public boolean isExplicitPolicyRequired(){  return explicitPolicyRequired;}  }
class C{  public boolean isSkipRepoUpdatePreview(){  return skipRepoUpdatePreview;}  }
class C{  protected void resetLayoutManager(){  if (orientation == JSplitPane.HORIZONTAL_SPLIT) {    layoutManager=new BasicHorizontalLayoutManager(0);  } else {    layoutManager=new BasicHorizontalLayoutManager(1);  }  splitPane.setLayout(layoutManager);  layoutManager.updateComponents();  splitPane.revalidate();  splitPane.repaint();}  }
class C{  public boolean supportsCustomEditor(){  return false;}  }
class C{  static void testAccess2(ClassLoader loader){  Class altClass;  try {    altClass=loader.loadClass("Inaccessible2");    System.err.println("ERROR: Inaccessible2 was accessible");  } catch (  ClassNotFoundException cnfe) {    Throwable cause=cnfe.getCause();    if (cause instanceof IllegalAccessError) {      System.out.println("Got expected CNFE/IAE #2");    } else {      System.err.println("Got unexpected CNFE/IAE #2");      cnfe.printStackTrace();    }  }}  }
class C{  static void printStats(Stats policyStats){  policyStats.record("PolicyCache: Number of policies in cache: " + policyCache.policies.size());  policyStats.record("PolicyCache: Number of policyManagers in cache:" + policyCache.policyManagers.size());  policyStats.record("PolicyCache: Number of service names in " + " policyListeners cache: " + policyCache.policyListenersMap.size());}  }
class C{  public boolean isNullSeperateMultipleValues(){  return isNullSeperateMultipleValues;}  }
class C{  public NSNumber(byte[] bytes,int type){  this(bytes,0,bytes.length,type);}  }
class C{  public void update(boolean bForce){  SSOToken adminToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  try {    String xml=ServerConfiguration.getServerConfigXML(adminToken,SystemProperties.getServerInstanceName());    if ((xml != null) && (xml.trim().length() > 0)) {      if (bForce) {        currentXML=null;      }      if ((currentXML == null) || !currentXML.equals(xml)) {        BootstrapCreator.updateBootstrap();        currentXML=xml;      }    }  } catch (  ConfigurationException e) {    debug.error("ServerConfigXMLObserver.notifyChanges",e);  }catch (  SMSException e) {    debug.error("ServerConfigXMLObserver.notifyChanges",e);  }catch (  SSOException e) {    debug.error("ServerConfigXMLObserver.notifyChanges",e);  }}  }
class C{  public DTMNodeProxy(DTM dtm,int node){  this.dtm=dtm;  this.node=node;}  }
class C{  protected JaspiAuthModuleWrapper(T serverAuthModule){  this.serverAuthModule=serverAuthModule;}  }
class C{  RSInfo toRSInfo(){  return rsInfo;}  }
class C{  public boolean is_mirror_left_right(){  return mirror_left_right;}  }
class C{  protected AbstractConfigListenerAdaptor(){}  }
class C{  public void testTryingProceedingCompletedTerminatedScenario(){  try {    Request register=createTiRegisterRequest();    ClientTransaction tran=null;    try {      eventCollector.collectRequestEvent(riSipProvider);      tran=tiSipProvider.getNewClientTransaction(register);      tran.sendRequest();    } catch (    SipException ex) {      throw new TiUnexpectedError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    waitForMessage();    RequestEvent registerReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (registerReceivedEvent == null || registerReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The REGISTER request was not received by the RI!");    assertEquals(TransactionState.TRYING,tran.getState());    try {      eventCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    if (tran.getRetransmitTimer() > MESSAGES_ARRIVE_FOR)     sleep((long)tran.getRetransmitTimer() - MESSAGES_ARRIVE_FOR);    waitForMessage();    registerReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNotNull("The REGISTER request was not retransmitted!",registerReceivedEvent);    assertNotNull("The REGISTER request was not retransmitted!",registerReceivedEvent.getRequest());    assertEquals(Request.REGISTER,registerReceivedEvent.getRequest().getMethod());    assertEquals(TransactionState.TRYING,tran.getState());    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    try {      Response res=riMessageFactory.createResponse(Response.TRYING,registerReceivedEvent.getRequest());      addStatus(registerReceivedEvent.getRequest(),res);      riSipProvider.sendResponse(res);    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a trying response back to the TI",ex);    }    waitForMessage();    ResponseEvent responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The Tested Implementation did not pass a 1xx response to the TU!",responseEvent);    assertNotNull("The Tested Implementation did not pass a 1xx response to the TU!",responseEvent.getResponse());    assertTrue("A response different from TRYING was passed to the TU!",responseEvent.getResponse().getStatusCode() == Response.TRYING);    assertSame("The TRYING response was not associated with the right transaction",tran,responseEvent.getClientTransaction());    assertEquals("The ClientTransaction did not pass in the PROCEEDING state after " + "receiving 1xx provisional response",tran.getState(),TransactionState.PROCEEDING);    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    SipEventCollector ackCollector=new SipEventCollector();    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    Response ok=null;    try {      ok=riMessageFactory.createResponse(Response.OK,registerReceivedEvent.getRequest());      addStatus(registerReceivedEvent.getRequest(),ok);      riSipProvider.sendResponse((Response)ok.clone());    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a OK response back to the TI",ex);    }    waitForMessage();    responseEvent=eventCollector.extractCollectedResponseEvent();    assertNotNull("The Tested Implementation did not pass a 200-699 response to the TU!",responseEvent);    assertNotNull("The Tested Implementation did not pass a 200-699 response to the TU!",responseEvent.getResponse());    assertSame("The OK response was not associated with the right transaction",tran,responseEvent.getClientTransaction());    assertSame("A response different from OK was passed to the TU",tran,responseEvent.getClientTransaction());    assertEquals("The ClientTransaction did not pass in the COMPLETED state after " + "receiving 200-699 final response",tran.getState(),TransactionState.COMPLETED);    RequestEvent ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    assertNull("The TI sent an ACK request in a non INVITE transaction",ackReceivedEvent);    try {      eventCollector.collectResponseEvent(tiSipProvider);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with TI",ex);    }    try {      ackCollector.collectRequestEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to regiest a SipListener with an RI SipProvider",ex);    }    try {      riSipProvider.sendResponse((Response)ok.clone());    } catch (    Throwable ex) {      throw new TckInternalError("The TCK could not send a OK response back to the TI",ex);    }    waitForMessage();    responseEvent=eventCollector.extractCollectedResponseEvent();    assertNull("The Tested Implementation passed a retransmitted 200-699 response " + "to the TU.",responseEvent);    assertTrue("The ClientTransaction did not stay long enough in the COMPLETED " + "state.",tran.getState().equals(TransactionState.COMPLETED) || tran.getState().equals(TransactionState.TERMINATED));    ackReceivedEvent=ackCollector.extractCollectedRequestEvent();    assertNull("The TI replied with an ACK to a nonINVITE request",ackReceivedEvent);  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataType.X509CRL createX509DataTypeX509CRL() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataTypeImpl.X509CRLImpl();}  }
class C{  private final void encrypt(int block[],int edflag){  SubCrypt _c=_crypt;  for (int j=0; j < 64; j++) {    int a=IP[j] - 1;    int b=block[a];    if (j <= 31) {      _c._L[j]=b;    } else {      _c._R[j - 32]=b;    }  }  for (int ii=0; ii < 16; ii++) {    int i;    if (edflag != 0) {      i=15 - ii;    } else {      i=ii;    }    System.arraycopy(_c._R,0,_c._tempL,0,32);    for (int j=0; j < 48; j++) {      _c._preS[j]=_c._R[_c._E[j] - 1] ^ _c._KS[i][j];    }    for (int j=0; j < 8; j++) {      int t=6 * j;      int k=S[j][(_c._preS[t + 0] << 5) + (_c._preS[t + 1] << 3) + (_c._preS[t + 2] << 2)+ (_c._preS[t + 3] << 1)+ (_c._preS[t + 4] << 0)+ (_c._preS[t + 5] << 4)];      t=4 * j;      _c._f[t + 0]=(k >> 3) & 01;      _c._f[t + 1]=(k >> 2) & 01;      _c._f[t + 2]=(k >> 1) & 01;      _c._f[t + 3]=(k >> 0) & 01;    }    for (int j=0; j < 32; j++) {      _c._R[j]=_c._L[j] ^ _c._f[P[j] - 1];    }    System.arraycopy(_c._tempL,0,_c._L,0,32);  }  for (int j=0; j < 32; j++) {    int t=_c._L[j];    _c._L[j]=_c._R[j];    _c._R[j]=t;  }  for (int j=0; j < 64; j++) {    int iv=FP[j] - 1;    int a=(iv <= 31) ? _c._L[iv] : _c._R[iv - 32];    block[j]=a;  }}  }
class C{  public String toStringImpl(){  return str;}  }
class C{  public void close() throws IOException {  if (!closed) {    super.close();    closed=true;  }}  }
class C{  private void testGetProviders(Locale locale){  Locale defaultLocale=Locale.getDefault();  Locale.setDefault(locale);  Provider p=new MyProvider();  try {    Security.addProvider(p);    String filter="MyService.MyAlgorithm";    assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));    filter="MyService.MyAlgorithm KeySize:512";    assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));    filter="MyService.MyAlgorithm KeySize:1025";    assertNull(filter,Security.getProviders(filter));    filter="MyService.MyAlgorithm imPLementedIn:softWARE";    assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));    filter="MyService.MyAlgorithm ATTribute:attributeVALUE";    assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));    filter="MyService.MyAlgorithm \u0130mPLemented\u0131n:softWARE";    assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));    filter="MyService.NoKeySize KeySize:512";    assertNull(filter,Security.getProviders(filter));    filter="MyService.NoImplementedIn ImplementedIn:Software";    assertNull(filter,Security.getProviders(filter));    filter="ABCService.NoAttribute Attribute:ABC";    assertNull(filter,Security.getProviders(filter));  }  finally {    Security.removeProvider(p.getName());    Locale.setDefault(defaultLocale);  }}  }
class C{  public static boolean unexportObject(Remote obj,boolean force) throws NoSuchObjectException {  return sun.rmi.transport.ObjectTable.unexportObject(obj,force);}  }
class C{  public void clear(){  if (data != null) {    for (int i=0; i < (length * 5); i++)     data[i]=null;  }  length=0;}  }
class C{  public void actionPerformed(ActionEvent ae){  if (scrollBar == null || !scrollBar.getValueIsAdjusting()) {    if (timer != null)     timer.stop();    updateSize();    timer=null;    scrollBar=null;  }}  }
class C{  public void testProceedingCompletedConfirmedScenario(){  try {    Request invite=createRiInviteRequest(null,null,null);    SipEventCollector responseCollector=new SipEventCollector();    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(invite);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (inviteReceivedEvent == null || inviteReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The initial invite request was not received by the TI!");    ServerTransaction tran=null;    try {      tran=tiSipProvider.getNewServerTransaction(inviteReceivedEvent.getRequest());    } catch (    Exception ex) {      ex.printStackTrace();      fail(ex.getClass().getName() + "was thrown while trying to " + "create the server transaction");    }    assertNotNull("tiSipProvider.getNewServerTransaction() returned null",tran);    waitForMessage();    assertEquals(TransactionState.PROCEEDING,tran.getState());    ResponseEvent responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No TRYING response has been sent by the TI upon reception " + "of an INVITE request",responseEvent);    assertTrue("A response different from 100 was sent by the TI upon " + "reception of INVITE",Response.TRYING == responseEvent.getResponse().getStatusCode());    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(invite);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNull("Retransmitted INVITEs should not be passed to the TU",inviteReceivedEvent);    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No TRYING response has been sent by the TI upon reception " + "of an INVITE request",responseEvent);    assertTrue("A response different from 100 was sent by the TI upon " + "reception of INVITE",Response.TRYING == responseEvent.getResponse().getStatusCode());    Response ringing=null;    try {      ringing=tiMessageFactory.createResponse(Response.RINGING,tran.getRequest());      ((ToHeader)ringing.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));      addStatus(tran.getRequest(),ringing);      ringing.setHeader(createTiContact());    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a ringing " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(ringing);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a RINGING response");    }    assertEquals("The Transaction did not remain PROCEEDING after transmitting a RINGING response",TransactionState.PROCEEDING,tran.getState());    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The RINGING response was not received by the RI",responseEvent);    assertTrue("A response different from RINGING was sent by the TI",Response.RINGING == responseEvent.getResponse().getStatusCode());    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(invite);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNull("Retransmitted INVITEs should not be passed to the TU",inviteReceivedEvent);    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No RINGING response has been sent by the TI upon reception " + "of an INVITE request",responseEvent);    assertTrue("A response different from RINGING was sent by the TI upon " + "reception of a retransmitted invite INVITE",Response.RINGING == responseEvent.getResponse().getStatusCode());    assertEquals("The server transaction left the PROCEEDING state.",TransactionState.PROCEEDING,tran.getState());    Response busy=null;    try {      busy=tiMessageFactory.createResponse(Response.BUSY_HERE,tran.getRequest());      addStatus(tran.getRequest(),busy);    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a busy_here " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(busy);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a BUSY_HERE response");    }    assertEquals("The Transaction did not remain COMPLETED after transmitting a BUSY_HERE response",TransactionState.COMPLETED,tran.getState());    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The BUSY_HERE response was not received by the RI",responseEvent);    assertTrue("A response different from BUSY_HERE was sent by the TI",Response.BUSY_HERE == responseEvent.getResponse().getStatusCode());    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(invite);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    assertNull("Retransmitted INVITEs should not be passed to the TU",inviteReceivedEvent);    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No BUSY_HERE response has been sent by the TI upon reception " + "of a retransmitted INVITE request",responseEvent);    assertTrue("A response different from BUSY_HERE was sent by the TI upon " + "reception of a retransmitted invite INVITE",Response.BUSY_HERE == responseEvent.getResponse().getStatusCode());    assertEquals("The server transaction left the COMPLETED state.",TransactionState.COMPLETED,tran.getState());    Request ack=(Request)invite.clone();    try {      eventCollector.collectRequestEvent(tiSipProvider);      ack.setMethod(Request.ACK);      String toTag=((ToHeader)responseEvent.getResponse().getHeader("to")).getTag();      if (toTag != null) {        ((ToHeader)ack.getHeader("to")).setTag(toTag);      }      riSipProvider.sendRequest(ack);    } catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with the TI provider",ex);    }catch (    Exception ex) {      throw new TckInternalError("Failed to create an ack request",ex);    }    waitForMessage();    RequestEvent ackEvent=eventCollector.extractCollectedRequestEvent();    assertNull("ACKs in ServerInviteTransactions shouldn't be passed to the TU.",ackEvent);    assertEquals("The ServerTransaction did not pas into the confirmed state" + "after receiving an ACK.",TransactionState.CONFIRMED,tran.getState());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  public LockInfo(String className,int identityHashCode){  if (className == null) {    throw new NullPointerException("Parameter className cannot be null");  }  this.className=className;  this.identityHashCode=identityHashCode;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    target.cut();  }}  }
class C{  public void paintSeparatorBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintSeparatorBorder(context,g,x,y,w,h);}  }
class C{  public static String breakHtmlString(CharSequence cs,int maxll){  if (cs == null) {    return null;  }  String d=cs.toString();  int len=d.length();  if (len <= 0 || len <= maxll) {    return d;  }  for (  String tag : Constants.BREAKING_TAGS) {    int p=d.lastIndexOf(tag,maxll);    if (p > 0 && p < len) {      return d.substring(0,p + tag.length()) + breakHtmlString(d.substring(p + tag.length()),maxll);    }  }  int p=d.lastIndexOf(' ',maxll);  if (p <= 0) {    p=d.indexOf(' ',maxll);  }  if (0 < p && p < len) {    return d.substring(0,p) + Constants.HTML_LINE_BREAK + breakHtmlString(d.substring(p + 1),maxll);  }  return d;}  }
class C{  public String productReleaseDate(){  return properties.getProperty("product.release.date");}  }
class C{  private static Map constructModulesList(Set classes,Set globalAuth){  if (debug.messageEnabled()) {    debug.message("constructModulesList : classes : " + classes);  }  Iterator iter=classes.iterator();  HashMap modules=new HashMap();  while (iter.hasNext()) {    String name=(String)iter.next();    if (name.equals(APPLICATION_CLASS_NAME)) {      continue;    }    if (debug.messageEnabled()) {      debug.message("getAllAuthModules. process " + name);    }    int dot=name.lastIndexOf('.');    if (dot > -1) {      String tmp=name.substring(dot + 1,name.length());      modules.put(tmp,name);    } else {      if ((globalAuth != null) && (!globalAuth.isEmpty())) {        String className=getAuthenticatorClassName(name,globalAuth);        if (debug.messageEnabled()) {          debug.message("className : " + className);        }        modules.put(name,className);      } else {        modules.put(name,name);      }    }  }  return modules;}  }
class C{  public void testConstrDoubleMathContext(){  double a=732546982374982347892379283571094797.287346782359284756;  int precision=21;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="732546982374982285074";  int resScale=-15;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());  BigDecimal bd;  mc=new MathContext(9,RoundingMode.UP);  bd=new BigDecimal(123456789.125,mc);  assertEquals("incorrect value","123456790",bd.toString());  bd=new BigDecimal(-123456789.125,mc);  assertEquals("incorrect value","-123456790",bd.toString());  mc=new MathContext(8,RoundingMode.DOWN);  bd=new BigDecimal(123456789.125,mc);  assertEquals("incorrect value","1.2345678E+8",bd.toString());  bd=new BigDecimal(-123456789.125,mc);  assertEquals("incorrect value","-1.2345678E+8",bd.toString());  mc=new MathContext(10,RoundingMode.CEILING);  bd=new BigDecimal(123456789.125,mc);  assertEquals("incorrect value","123456789.2",bd.toString());  bd=new BigDecimal(-123456789.125,mc);  assertEquals("incorrect value","-123456789.1",bd.toString());  mc=new MathContext(8,RoundingMode.FLOOR);  bd=new BigDecimal(123456789.125,mc);  assertEquals("incorrect value","1.2345678E+8",bd.toString());  bd=new BigDecimal(-123456789.125,mc);  assertEquals("incorrect value","-1.2345679E+8",bd.toString());  mc=new MathContext(11,RoundingMode.HALF_EVEN);  bd=new BigDecimal("123456789.125",mc);  assertEquals("incorrect value","123456789.12",bd.toString());  bd=new BigDecimal(-123456789.135,mc);  assertEquals("incorrect value","-123456789.14",bd.toString());  mc=new MathContext(11,RoundingMode.HALF_UP);  bd=new BigDecimal("123456789.125",mc);  assertEquals("incorrect value","123456789.13",bd.toString());  mc=new MathContext(11,RoundingMode.HALF_DOWN);  bd=new BigDecimal("123456789.125",mc);  assertEquals("incorrect value","123456789.12",bd.toString());  mc=new MathContext(8,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(123456789.125,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(-123456789.125,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }}  }
class C{  public void testLongValueNeg(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  long result=-1246043477766677607L;  assertTrue("incorrect value",aNumber.longValue() == result);}  }
class C{  private static void removeSameAttributesTypeIfPresent(AccessibilityProperties properties,PdfName attributesType){  List<PdfDictionary> attributesList=properties.getAttributesList();  int i;  for (i=0; i < attributesList.size(); i++) {    PdfDictionary attr=attributesList.get(i);    if (attributesType.equals(attr.get(PdfName.O))) {      break;    }  }  if (i < attributesList.size()) {    attributesList.remove(i);  }}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer result=new StringBuffer(1000);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.assertionDeclareStr;  }  result.append("<").append(prefix).append("Action ").append(uri).append(" Namespace=\"").append(_namespace).append("\">");  result.append(_action);  result.append("</").append(prefix).append("Action>\n");  return ((String)result.toString());}  }
class C{  private <T>Handler<AsyncResult<SQLConnection>> connHandler(Handler<AsyncResult<T>> h1,Handler<SQLConnection> h2){  return null;}  }
class C{  public static <V>int addDistinctList(List<V> sourceList,List<V> entryList){  if (sourceList == null || isEmpty(entryList)) {    return 0;  }  int sourceCount=sourceList.size();  for (  V entry : entryList) {    if (!sourceList.contains(entry)) {      sourceList.add(entry);    }  }  return sourceList.size() - sourceCount;}  }
class C{  public boolean canCreateBean(String beanName){  return false;}  }
class C{  public String displayStructureAsXML(){  return "";}  }
class C{  public Entity(String name,int type,char data[]){  this.name=name;  this.type=type;  this.data=data;}  }
class C{  public com.sun.identity.wsfederation.jaxb.entityconfig.BaseConfigType createBaseConfigType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.entityconfig.impl.BaseConfigTypeImpl();}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.getCamera().stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  @Indexable(type=IndexableType.REINDEX) @Override public Foo updateFoo(Foo foo){  return fooPersistence.update(foo);}  }
class C{  public ServerEditGeneralViewBean(){  super("ServerEditGeneral",DEFAULT_DISPLAY_URL);}  }
class C{  public static void enableLogs(){  sLogsEnabled=true;}  }
class C{  public SCConfigModelImpl(HttpServletRequest req,Map map){  super(req,map);  getServiceNames();  getL10NServiceNames();  sortServiceNames();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wspolicy.PolicyAttachmentType createPolicyAttachmentType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wspolicy.impl.PolicyAttachmentTypeImpl();}  }
class C{  public int nextNode(){  if ((m_next) < this.size()) {    int next=this.elementAt(m_next);    m_next++;    return next;  } else   return DTM.NULL;}  }
class C{  public boolean is_active_routing_layer(int p_layer_no){  if (p_layer_no < 0 || p_layer_no >= active_routing_layer_arr.length) {    return false;  }  return active_routing_layer_arr[p_layer_no];}  }
class C{  public Observable<Product> retrieveProductObservable(String productId){  io.vertx.rx.java.ObservableFuture<Product> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  retrieveProduct(productId,resultHandler.toHandler());  return resultHandler;}  }
class C{  public char[] lookup(byte[] code,int offset,int length){  char[] result=null;  int key;  if (length == 1) {    key=code[offset] & 0xff;    result=byteMappings.get(key);  } else   if (length == 2) {    int intKey=code[offset] & 0xff;    intKey<<=8;    intKey+=code[offset + 1] & 0xff;    key=intKey;    result=byteMappings.get(key);  }  return result;}  }
class C{  public Marshaller createMarshaller() throws JAXBException {  return new MarshallerImpl(this);}  }
class C{  public void processInDialogRequest(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  System.out.println("local party = " + dialog.getLocalParty());  try {    System.out.println("b2bua:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());    Dialog otherLeg=(Dialog)dialog.getApplicationData();    Request otherBye=otherLeg.createRequest(request.getMethod());    ClientTransaction clientTransaction=sipProvider.getNewClientTransaction(otherBye);    clientTransaction.setApplicationData(serverTransactionId);    serverTransactionId.setApplicationData(clientTransaction);    otherLeg.sendRequest(clientTransaction);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void validateRelationshipField(Context context,JsonValue oldValue,JsonValue newValue) throws ResourceException {  if (oldValue.isNull() && newValue.isNull()) {    logger.debug("not validating relationship as old and new values are both null.");  } else   if (oldValue.isNull() || !oldValue.getObject().equals(newValue.getObject())) {    relationshipValidator.validateRelationship(newValue,context);  }}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof PackedColorModel)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  PackedColorModel cm=(PackedColorModel)obj;  int numC=cm.getNumComponents();  if (numC != numComponents) {    return false;  }  for (int i=0; i < numC; i++) {    if (maskArray[i] != cm.getMask(i)) {      return false;    }  }  return true;}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb11.StatusType createStatusType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb11.impl.StatusTypeImpl();}  }
class C{  public static void logConnect(ClientConnection clientConnection){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logConnect(clientConnection);  }}  }
class C{  @Override public final void run(){  setProcessingStartTime();  getPluginConfigManager().invokePreParseUnbindPlugins(this);  logUnbind(this);  getClientConnection().disconnect(DisconnectReason.UNBIND,false,null);  getPluginConfigManager().invokePostOperationUnbindPlugins(this);  setProcessingStopTime();}  }
class C{  public static Bitmap resizeImageByWidth(Bitmap image){  if (image == null) {    throw new NullPointerException("Bitmap not set!");  }  int newHeight=(image.getHeight() * getMaxSizeInPixel()) / image.getWidth();  return Bitmap.createScaledBitmap(image,getMaxSizeInPixel(),newHeight,true);}  }
class C{  public PlaPoint start_point(){  return start_point;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  logger.info("shootme: local party = " + dialog.getLocalParty());  try {    logger.info("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    logger.info("shootme: Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    logger.error("UNexpected exception",ex);    fail("UNexpected exception");  }}  }
class C{  public final int length(){  return array.length;}  }
class C{  protected int engineGetDigestLength(){  return DIGEST_LENGTH;}  }
class C{  public void write(ASN1Writer stream) throws IOException {  stream.writeStartSequence();  stream.writeInteger(messageID);  protocolOp.write(stream);  if (controls != null && !controls.isEmpty()) {    stream.writeStartSequence(TYPE_CONTROL_SEQUENCE);    for (    Control control : controls) {      control.write(stream);    }    stream.writeEndSequence();  }  stream.writeEndSequence();}  }
class C{  private boolean lockBackend(Backend<?> backend){  try {    String lockFile=LockFileManager.getBackendLockFileName(backend);    StringBuilder failureReason=new StringBuilder();    if (!LockFileManager.acquireExclusiveLock(lockFile,failureReason)) {      logger.error(ERR_RESTOREDB_CANNOT_LOCK_BACKEND,backend.getBackendID(),failureReason);      return false;    }  } catch (  Exception e) {    logger.error(ERR_RESTOREDB_CANNOT_LOCK_BACKEND,backend.getBackendID(),getExceptionMessage(e));    return false;  }  return true;}  }
class C{  public SAML2ConfigBuilder encryptAttributes(boolean encryptAttributes){  this.encryptAttributes=encryptAttributes;  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badString;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badString=child.substringData(40,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public boolean isRequired() throws AMException, SSOException {  if (!isInitalized()) {    initialize();  }  Map attrMap=getAdminServiceGlobalSchema().getAttributeDefaults();  Set values=(Set)attrMap.get(DCT_ENABLED_ATTR);  boolean required=false;  if (values == null || values.isEmpty()) {    required=false;  } else {    String val=(String)values.iterator().next();    required=(val.equalsIgnoreCase("true"));  }  return required;}  }
class C{  public static void printStackTrace(){  logger.debug(Arrays.toString(Thread.currentThread().getStackTrace()).replaceAll(",","\\\n"));}  }
class C{  private ColorsUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.IndexedEndpointType createIndexedEndpointType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.IndexedEndpointTypeImpl();}  }
class C{  public void put(String name,String supported,String key,String value,String level,boolean isDefault){  SAMLv2AuthContext c=new SAMLv2AuthContext();  c.name=name;  c.supported=supported;  c.key=key;  c.value=value;  c.level=level;  c.isDefault=isDefault;  collections.put(name,c);}  }
class C{  public PdfPage copyTo(PdfDocument toDocument,IPdfPageExtraCopier copier){  PdfDictionary dictionary=getPdfObject().copyTo(toDocument,excludedKeys,true);  PdfPage page=new PdfPage(dictionary);  copyInheritedProperties(page,toDocument);  for (  PdfAnnotation annot : getAnnotations()) {    if (annot.getSubtype().equals(PdfName.Link)) {      getDocument().storeLinkAnnotation(page,(PdfLinkAnnotation)annot);    } else     if (annot.getSubtype().equals(PdfName.Widget)) {      page.addAnnotation(-1,PdfAnnotation.makeAnnotation(annot.getPdfObject().copyTo(toDocument,false)),false);    } else {      page.addAnnotation(-1,PdfAnnotation.makeAnnotation(annot.getPdfObject().copyTo(toDocument,true)),false);    }  }  if (toDocument.isTagged()) {    page.structParents=(int)toDocument.getNextStructParentIndex();    page.getPdfObject().put(PdfName.StructParents,new PdfNumber(page.structParents));  }  if (copier != null) {    copier.copy(this,page);  } else {    if (!toDocument.getWriter().isUserWarnedAboutAcroFormCopying && getDocument().getCatalog().getPdfObject().containsKey(PdfName.AcroForm)) {      Logger logger=LoggerFactory.getLogger(PdfPage.class);      logger.warn(LogMessageConstant.SOURCE_DOCUMENT_HAS_ACROFORM_DICTIONARY);      toDocument.getWriter().isUserWarnedAboutAcroFormCopying=true;    }  }  return page;}  }
class C{  public static int csnsUTF8(int nbFields){  return CSN.STRING_ENCODING_LENGTH * nbFields + 1;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeissupported01.class,args);}  }
class C{  public void append_to(PlaLineIntAlist dest,int src_pos){  int poly_len=size();  for (int index=src_pos; index < poly_len; index++)   dest.add(get(index));}  }
class C{  public ClientAbortException(String message){  super(message);}  }
class C{  public void insert_ushort(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ushort",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_ushort(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public SystemProperties(){}  }
class C{  @Override public String toString(){  return vals[I11] + "\t" + vals[I12]+ "\t"+ vals[I13]+ "\n"+ vals[I21]+ "\t"+ vals[I22]+ "\t"+ vals[I13]+ "\n"+ vals[I31]+ "\t"+ vals[I32]+ "\t"+ vals[I33];}  }
class C{  public void addEventListener(SIPDialogEventListener newListener){  eventListeners.add(newListener);}  }
class C{  public void abort() throws IOException {synchronized (DiskLruCache.this) {    completeEdit(this,false);  }}  }
class C{  public TriggerWrapper unblock(){  return reState(Trigger.STATE_BLOCKED);}  }
class C{  public static <E>Set<E> synchronizedSet(Set<E> set){  if (set == null) {    throw new NullPointerException("set == null");  }  return new SynchronizedSet<E>(set);}  }
class C{  public StringNullTerminated(String identifier,AbstractTagFrameBody frameBody){  super(identifier,frameBody);}  }
class C{  public JAXBResult(Unmarshaller _unmarshaller) throws JAXBException {  if (_unmarshaller == null)   throw new JAXBException(Messages.format(Messages.RESULT_NULL_UNMARSHALLER));  this.unmarshallerHandler=_unmarshaller.getUnmarshallerHandler();  super.setHandler(unmarshallerHandler);}  }
class C{  public void removeAttributeValues(String attrName,Set values) throws SSOException, SMSException {  validateServiceInstance();  SMSEntry e=instance.getSMSEntry();  SMSUtils.removeAttributeValues(e,attrName,values,Collections.EMPTY_SET);  e.save(token);  instance.refresh(e);}  }
class C{  public static String convertTime(int time){  time/=1000;  int minute=time / 60;  int second=time % 60;  minute%=60;  return String.format("%02d:%02d",minute,second);}  }
class C{  public boolean hasUserAttributeSchema(String serviceName){  return hasAttributeSchema(serviceName,SchemaType.USER);}  }
class C{  protected FSLogoutStatus processSingleLogoutRequest(FSLogoutNotification reqLogout,FSSessionPartner currentSessionProvider,String userID,String sourceEntityId,String sessionIndex,boolean isWMLAgent,String isSourceIDP){  FSUtils.debug.message("Entered FSSingleLogoutHandler::processSingleLogoutRequest - SOAP");  if (currentSessionProvider != null) {    isCurrentProviderIDPRole=currentSessionProvider.getIsRoleIDP();    remoteEntityId=currentSessionProvider.getPartner();    setRemoteDescriptor(getRemoteDescriptor(remoteEntityId));  }  this.requestLogout=reqLogout;  this.userID=userID;  this.sessionIndex=sessionIndex;  this.isWMLAgent=isWMLAgent;  if (reqLogout != null) {    FSUtils.debug.message("FSLogoutNotification formed really well");    if (currentSessionProvider == null) {      FSUtils.debug.message("currentSessionProvider is null. destroy and return");      Vector sessionObjList=FSLogoutUtil.getSessionObjectList(userID,metaAlias,sessionIndex);      if ((sessionObjList != null) && !sessionObjList.isEmpty()) {        String sessid=((FSSession)sessionObjList.get(0)).getSessionID();        try {          ssoToken=SessionManager.getProvider().getSession(sessid);        } catch (        SessionException ex) {        }      }      FSLogoutStatus proxyStatus=handleIDPProxyLogout(sourceEntityId);      if (proxyStatus != null && !proxyStatus.getStatus().equalsIgnoreCase(IFSConstants.SAML_SUCCESS)) {        logoutStatus=false;      }      FSLogoutUtil.destroyPrincipalSession(userID,metaAlias,reqLogout.getSessionIndex(),request,response);      int retStatus=handleMultiProtocolLogout(true,null,sourceEntityId);      if ((retStatus == SingleLogoutManager.LOGOUT_FAILED_STATUS) || (retStatus == SingleLogoutManager.LOGOUT_PARTIAL_STATUS)) {        return new FSLogoutStatus(IFSConstants.LOGOUT_FAILURE);      } else {        return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);      }    } else {      Vector sessionObjList=FSLogoutUtil.getSessionObjectList(userID,metaAlias,sessionIndex);      if ((sessionObjList != null) && !sessionObjList.isEmpty()) {        String sessid=((FSSession)sessionObjList.get(0)).getSessionID();        try {          ssoToken=SessionManager.getProvider().getSession(sessid);        } catch (        SessionException ex) {        }      }      FSLogoutStatus proxyStatus=handleIDPProxyLogout(sourceEntityId);      String currentEntityId=currentSessionProvider.getPartner();      isCurrentProviderIDPRole=currentSessionProvider.getIsRoleIDP();      if (!supportSOAPProfile(remoteDescriptor)) {        return new FSLogoutStatus(IFSConstants.SAML_UNSUPPORTED);      }      FSSessionManager sessionManager=FSSessionManager.getInstance(metaAlias);      FSSession session=sessionManager.getSession(sessionManager.getSessionList(userID),sessionIndex);      FSUtils.debug.message("FSSLOHandler, process logout case 4");      FSLogoutUtil.cleanSessionMapPartnerList(userID,currentEntityId,metaAlias,session);      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Communicate with provider " + currentEntityId + " using soap profile.");      }      FSUtils.debug.message("In SOAP profile");      FSLogoutStatus bLogoutStatus=doIDPSoapProfile(currentEntityId);      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Logout completed first round " + "with status : " + bLogoutStatus);      }      if (bLogoutStatus.getStatus().equalsIgnoreCase(IFSConstants.SAML_SUCCESS) && (proxyStatus != null) && !proxyStatus.getStatus().equalsIgnoreCase(IFSConstants.SAML_SUCCESS)) {        bLogoutStatus=proxyStatus;      }      return bLogoutStatus;    }  } else {    String[] data={userID};    LogUtil.error(Level.INFO,LogUtil.LOGOUT_FAILED_REQUEST_IMPROPER,data);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Request not proper " + "Cannot proceed federation termination");    }    return new FSLogoutStatus(IFSConstants.SAML_REQUESTER);  }}  }
class C{  private String replaceEntityRef(String data,String ref,char ch){  int idx=0;  StringBuilder buffer=new StringBuilder(data.length());  while ((idx=data.indexOf(ref)) != -1) {    buffer.append(data.substring(0,idx));    buffer.append(ch);    data=data.substring(idx + ref.length());  }  if ((data != null) && (data.length() > 0)) {    buffer.append(data);  }  return buffer.toString();}  }
class C{  static String removeControlChars(String value){  StringBuilder buffer=new StringBuilder(value);  for (int i=0; i < buffer.length(); i++) {    if (isControlChar(buffer.charAt(i))) {      buffer.setCharAt(i,' ');    }  }  return buffer.toString();}  }
class C{  protected void open(PdfVersion newPdfVersion){  try {    if (reader != null) {      reader.pdfDocument=this;      reader.readPdf();      Counter counter=getCounter();      if (counter != null) {        counter.onDocumentRead(reader.getFileLength());      }      pdfVersion=reader.headerPdfVersion;      trailer=new PdfDictionary(reader.trailer);      catalog=new PdfCatalog((PdfDictionary)trailer.get(PdfName.Root,true));      if (catalog.getPdfObject().containsKey(PdfName.Version)) {        PdfVersion catalogVersion=PdfVersion.fromPdfName(catalog.getPdfObject().getAsName(PdfName.Version));        if (catalogVersion.compareTo(pdfVersion) > 0) {          pdfVersion=catalogVersion;        }      }      if (catalog.getPdfObject().containsKey(PdfName.Metadata) && null != catalog.getPdfObject().get(PdfName.Metadata)) {        xmpMetadata=catalog.getPdfObject().getAsStream(PdfName.Metadata).getBytes();        try {          reader.pdfAConformanceLevel=PdfAConformanceLevel.getConformanceLevel(XMPMetaFactory.parseFromBuffer(xmpMetadata));        } catch (        XMPException ignored) {        }      }      PdfObject infoDict=trailer.get(PdfName.Info,true);      info=new PdfDocumentInfo(infoDict instanceof PdfDictionary ? (PdfDictionary)infoDict : new PdfDictionary(),this);      PdfDictionary str=catalog.getPdfObject().getAsDictionary(PdfName.StructTreeRoot);      if (str != null) {        tryInitTagStructure(str);      }      if (properties.appendMode && (reader.hasRebuiltXref() || reader.hasFixedXref()))       throw new PdfException(PdfException.AppendModeRequiresADocumentWithoutErrorsEvenIfRecoveryWasPossible);    }    if (writer != null) {      if (reader != null && reader.hasXrefStm() && writer.properties.isFullCompression == null) {        writer.properties.isFullCompression=true;      }      if (reader != null && !reader.isOpenedWithFullPermission()) {        throw new BadPasswordException(BadPasswordException.PdfReaderNotOpenedWithOwnerPassword);      }      if (reader != null && properties.preserveEncryption) {        writer.crypto=reader.decrypt;      }      writer.document=this;      if (reader == null) {        catalog=new PdfCatalog(this);        info=new PdfDocumentInfo(this).addCreationDate();        info.addModDate();        info.getPdfObject().put(PdfName.Producer,new PdfString(Version.getInstance().getVersion()));      } else {        info.addModDate();        String producer=null;        if (info.getPdfObject().containsKey(PdfName.Producer)) {          producer=info.getPdfObject().getAsString(PdfName.Producer).toUnicodeString();        }        Version version=Version.getInstance();        if (producer == null || !version.getVersion().contains(version.getProduct())) {          producer=version.getVersion();        } else {          int idx=producer.indexOf("; modified using");          StringBuilder buf;          if (idx == -1) {            buf=new StringBuilder(producer);          } else {            buf=new StringBuilder(producer.substring(0,idx));          }          buf.append("; modified using ");          buf.append(version.getVersion());          producer=buf.toString();        }        info.getPdfObject().put(PdfName.Producer,new PdfString(producer));      }      trailer=new PdfDictionary();      trailer.put(PdfName.Root,catalog.getPdfObject().getIndirectReference());      trailer.put(PdfName.Info,info.getPdfObject().getIndirectReference());    }    if (properties.appendMode) {      assert reader != null;      RandomAccessFileOrArray file=reader.tokens.getSafeFile();      int n;      byte[] buffer=new byte[8192];      while ((n=file.read(buffer)) > 0) {        writer.write(buffer,0,n);      }      file.close();      writer.write((byte)'\n');      writer.properties.isFullCompression=reader.hasXrefStm();      writer.crypto=reader.decrypt;      if (newPdfVersion != null) {        if (pdfVersion.compareTo(PdfVersion.PDF_1_4) >= 0) {          if (newPdfVersion.compareTo(reader.headerPdfVersion) > 0) {            catalog.put(PdfName.Version,newPdfVersion.toPdfName());            catalog.setModified();            pdfVersion=newPdfVersion;          }        } else {        }      }    } else     if (writer != null) {      if (newPdfVersion != null) {        pdfVersion=newPdfVersion;      }      writer.writeHeader();    }  } catch (  IOException e) {    throw new PdfException(PdfException.CannotOpenDocument,e,this);  }}  }
class C{  @Override public void bind() throws Exception {  if (getExecutor() == null) {    createExecutor();  }  if (getExecutor() instanceof ExecutorService) {    threadGroup=AsynchronousChannelGroup.withThreadPool((ExecutorService)getExecutor());  }  if (!internalExecutor) {    log.warn(sm.getString("endpoint.nio2.exclusiveExecutor"));  }  serverSock=AsynchronousServerSocketChannel.open(threadGroup);  socketProperties.setProperties(serverSock);  InetSocketAddress addr=(getAddress() != null ? new InetSocketAddress(getAddress(),getPort()) : new InetSocketAddress(getPort()));  serverSock.bind(addr,getBacklog());  if (acceptorThreadCount != 1) {    acceptorThreadCount=1;  }  initialiseSsl();}  }
class C{  private void saveLogFile(License license,Properties props){  File logFile=getLogFile(license);  logger.fine("Writing log: " + props);  try {    final OutputStream out=new FileOutputStream(logFile);    try {      props.store(out,String.format(LOG_HEADER,newDate()));    }  finally {      out.close();    }  } catch (  IOException ex) {    logger.log(Level.SEVERE,"Unable to store license log file: " + logFile.getAbsolutePath(),ex);  }}  }
class C{  private MetadataBlockDataPicture createMetadataBlockDataPicture(Artwork artwork) throws FieldDataInvalidException {  if (artwork.isLinked()) {    return new MetadataBlockDataPicture(Utils.getDefaultBytes(artwork.getImageUrl(),TextEncoding.CHARSET_ISO_8859_1),artwork.getPictureType(),MetadataBlockDataPicture.IMAGE_IS_URL,"",0,0,0,0);  } else {    if (!artwork.setImageFromData()) {      throw new FieldDataInvalidException("Unable to create MetadataBlockDataPicture from buffered");    }    return new MetadataBlockDataPicture(artwork.getBinaryData(),artwork.getPictureType(),artwork.getMimeType(),artwork.getDescription(),artwork.getWidth(),artwork.getHeight(),0,0);  }}  }
class C{  protected JasperException handleJspException(Exception ex){  try {    Throwable realException=ex;    if (ex instanceof ServletException) {      realException=((ServletException)ex).getRootCause();    }    StackTraceElement[] frames=realException.getStackTrace();    StackTraceElement jspFrame=null;    for (int i=0; i < frames.length; ++i) {      if (frames[i].getClassName().equals(this.getServlet().getClass().getName())) {        jspFrame=frames[i];        break;      }    }    if (jspFrame == null || this.ctxt.getCompiler().getPageNodes() == null) {      return new JasperException(ex);    }    int javaLineNumber=jspFrame.getLineNumber();    JavacErrorDetail detail=ErrorDispatcher.createJavacError(jspFrame.getMethodName(),this.ctxt.getCompiler().getPageNodes(),null,javaLineNumber,ctxt);    int jspLineNumber=detail.getJspBeginLineNumber();    if (jspLineNumber < 1) {      throw new JasperException(ex);    }    if (options.getDisplaySourceFragment()) {      return new JasperException(Localizer.getMessage("jsp.exception",detail.getJspFileName(),"" + jspLineNumber) + System.lineSeparator() + System.lineSeparator()+ detail.getJspExtract()+ System.lineSeparator()+ System.lineSeparator()+ "Stacktrace:",ex);    }    return new JasperException(Localizer.getMessage("jsp.exception",detail.getJspFileName(),"" + jspLineNumber),ex);  } catch (  Exception je) {    if (ex instanceof JasperException) {      return (JasperException)ex;    }    return new JasperException(ex);  }}  }
class C{  public static Date parseyyyyMMddDate(String d){  try {    return new SimpleDateFormat("yyyy-MM-dd").parse(d);  } catch (  Exception e) {  }  return null;}  }
class C{  private static void debugPrintln(String msg){  if (debug) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public Object clone(){  try {    StringCharacterIterator other=(StringCharacterIterator)super.clone();    return other;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public String replaceSomeTokens(String queryString,Map<String,String> replacements){  Matcher matcher=tokenPattern.matcher(queryString);  StringBuffer buf=new StringBuffer();  while (matcher.find()) {    String origToken=matcher.group(1);    if (origToken != null) {      String replacement=replacements.get(origToken);      if (replacement == null) {        replacement="${" + origToken + "}";      }      matcher.appendReplacement(buf,"");      buf.append(replacement);    }  }  matcher.appendTail(buf);  return buf.toString();}  }
class C{  public boolean equals(Subject subject){  boolean nidEqual=false;  boolean scEqual=false;  if (subject != null) {    NameIdentifier nid=subject.getNameIdentifier();    if (_nameIdentifier != null) {      nidEqual=_nameIdentifier.equals(nid);    } else     if (nid == null) {      nidEqual=true;    }    SubjectConfirmation sc=subject.getSubjectConfirmation();    if (_subjectConfirmation != null) {      scEqual=_subjectConfirmation.equals(sc);    } else     if (sc == null) {      scEqual=true;    }    if (!(nidEqual) || !(scEqual)) {      return false;    }    return true;  }  return false;}  }
class C{  public void mouseMoved(MouseEvent e){}  }
class C{  private static void transToRequiredType(Object[] args,Class<?>[] params) throws Throwable {  for (int i=0; i < params.length; ++i) {    Class<?> c=params[i];    if (c.isPrimitive())     continue;    Object o=args[i];    if (o == null || c.isInstance(o))     continue;    args[i]=LtRuntime.cast(o,c);  }}  }
class C{  public PrintStream(OutputStream out,boolean autoFlush,String encoding) throws UnsupportedEncodingException {  this(autoFlush,requireNonNull(out,"Null output stream"),toCharset(encoding));}  }
class C{  public boolean hasValue(AttributeType attributeType,ByteString value){  for (  Attribute a : getAllAttributes(attributeType)) {    if (!a.getAttributeDescription().hasOptions() && a.contains(value)) {      return true;    }  }  return false;}  }
class C{  public AdministratorAction(Type type,AbstractManagedObjectDefinition<?,?> d,String propertyName){  this.type=type;  this.definition=d;  this.propertyName=propertyName;}  }
class C{  public DJLDAPv3PersistentSearch(Map<String,Set<String>> configMap,ConnectionFactory factory){  super(CollectionHelper.getIntMapAttr(configMap,LDAP_RETRY_INTERVAL,3000,DEBUG),DN.valueOf(CollectionHelper.getMapAttr(configMap,LDAP_PERSISTENT_SEARCH_BASE_DN)),LDAPUtils.parseFilter(CollectionHelper.getMapAttr(configMap,LDAP_PERSISTENT_SEARCH_FILTER),Filter.objectClassPresent()),LDAPUtils.getSearchScope(CollectionHelper.getMapAttr(configMap,LDAP_PERSISTENT_SEARCH_SCOPE),SearchScope.WHOLE_SUBTREE),factory,CollectionHelper.getMapAttr(configMap,LDAP_USER_SEARCH_ATTR));  usersSearchAttributeName=CollectionHelper.getMapAttr(configMap,LDAP_USER_SEARCH_ATTR);}  }
class C{  public LogfileScope start_read_scope(){  Object curr_ob=next_token();  if (curr_ob == null) {    return null;  }  if (!(curr_ob instanceof String)) {    System.out.println("Logfile.start_read_scope: String expected");    pending_token=curr_ob;    return null;  }  LogfileScope result=LogfileScope.get_scope((String)curr_ob);  return result;}  }
class C{  public static String parseAttValue(String s){  if ((s == null) || (s.isEmpty())) {    return s;  }  char dquote='\"';  char quote='\'';  int i;  StringBuilder sb=new StringBuilder(s);  while ((i=s.indexOf(quote)) != -1) {    sb.replace(i,i + 1,"&apos;");    s=sb.toString();  }  while ((i=s.indexOf(dquote)) != -1) {    sb.replace(i,i + 1,"&quot;");    s=sb.toString();  }  return (s);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb11.GenerateBearerTokenElement createGenerateBearerTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb11.impl.GenerateBearerTokenElementImpl();}  }
class C{  protected CertificateFactory(CertificateFactorySpi certFacSpi,Provider provider,String type){  this.certFacSpi=certFacSpi;  this.provider=provider;  this.type=type;}  }
class C{  @Override public long skip(long count) throws IOException {synchronized (lock) {    if (isOpen()) {      if (count <= 0) {        return 0;      }      long skipped=0;      if (count < this.count - pos) {        pos=pos + (int)count;        skipped=count;      } else {        skipped=this.count - pos;        pos=this.count;      }      return skipped;    }    throw new IOException("StringReader is closed");  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  Node newNode;  String newValue;  NamedNodeMap nodeMap;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    nodeMap=docType.getNotations();    assertNotNull("notationsNotNull",nodeMap);    newNode=nodeMap.getNamedItem("notation1");    assertNotNull("notationNotNull",newNode);    newValue=newNode.getNodeValue();    assertNull("initiallyNull",newValue);    newNode.setNodeValue("This should have no effect");    newValue=newNode.getNodeValue();    assertNull("nullAfterAttemptedChange",newValue);  }}  }
class C{  private Log discoverLogImplementation(String logCategory) throws LogConfigurationException {  if (isDiagnosticsEnabled()) {    logDiagnostic("Discovering a Log implementation...");  }  initConfiguration();  Log result=null;  String specifiedLogClassName=findUserSpecifiedLogClassName();  if (specifiedLogClassName != null) {    if (isDiagnosticsEnabled()) {      logDiagnostic("Attempting to load user-specified log class '" + specifiedLogClassName + "'...");    }    result=createLogFromClass(specifiedLogClassName,logCategory,true);    if (result == null) {      StringBuffer messageBuffer=new StringBuffer("User-specified log class '");      messageBuffer.append(specifiedLogClassName);      messageBuffer.append("' cannot be found or is not useable.");      if (specifiedLogClassName != null) {        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_LOG4J_LOGGER);        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_JDK14_LOGGER);        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_LUMBERJACK_LOGGER);        informUponSimilarName(messageBuffer,specifiedLogClassName,LOGGING_IMPL_SIMPLE_LOGGER);      }      throw new LogConfigurationException(messageBuffer.toString());    }    return result;  }  if (isDiagnosticsEnabled()) {    logDiagnostic("No user-specified Log implementation; performing discovery" + " using the standard supported logging implementations...");  }  for (int i=0; (i < classesToDiscover.length) && (result == null); ++i) {    result=createLogFromClass(classesToDiscover[i],logCategory,true);  }  if (result == null) {    throw new LogConfigurationException("No suitable Log implementation");  }  return result;}  }
class C{  public final ShapeTile[] calculate_tree_shapes(BrdTraceJoin p_join){  ShapeTile[] result=new ShapeTile[1];  result[0]=p_join.get_shape();  return result;}  }
class C{  public XACMLException(String message){  super(message);}  }
class C{  public void addChangeListener(ChangeListener l){  listenerList.add(ChangeListener.class,l);}  }
class C{  public void addQuery(QueryElement qryElement){  if (qryElement == null) {    return;  }  if (this.queries == null) {    this.queries=new ArrayList();  }  this.queries.add(qryElement);}  }
class C{  public boolean validate(String value,String rule){  return validate(value);}  }
class C{  public static void flow(Reader reader,Writer writer) throws IOException {  char[] buf=new char[DEFAULT_BUFFER_SIZE];  flow(reader,writer,buf);}  }
class C{  public void load(){  try {    if (fileChannel == null) {      fileChannel=FileChannel.open(path,StandardOpenOption.READ);    }    fileChannel.position(0L);    buffer.clear();    tmp.clear();    while (fileChannel.read(tmp) > 0) {      tmp.flip();      if (tmp.remaining() > buffer.capacity() - buffer.position()) {        final ByteBuffer next=ByteBuffer.allocateDirect(Math.max(buffer.capacity() * 2,tmp.remaining()));        buffer.flip();        next.put(buffer);        buffer=next;      }      buffer.put(tmp);      tmp.clear();    }    buffer.flip();  } catch (  final IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  private boolean parseAttribute(AttributesImpl attrs) throws JasperException {  String qName=parseName();  if (qName == null)   return false;  boolean ignoreEL=pageInfo.isELIgnored();  String localName=qName;  String uri="";  int index=qName.indexOf(':');  if (index != -1) {    String prefix=qName.substring(0,index);    uri=pageInfo.getURI(prefix);    if (uri == null) {      err.jspError(reader.mark(),"jsp.error.attribute.invalidPrefix",prefix);    }    localName=qName.substring(index + 1);  }  reader.skipSpaces();  if (!reader.matches("="))   err.jspError(reader.mark(),"jsp.error.attribute.noequal");  reader.skipSpaces();  char quote=(char)reader.nextChar();  if (quote != '\'' && quote != '"')   err.jspError(reader.mark(),"jsp.error.attribute.noquote");  String watchString="";  if (reader.matches("<%=")) {    watchString="%>";    ignoreEL=true;  }  watchString=watchString + quote;  String attrValue=parseAttributeValue(qName,watchString,ignoreEL);  attrs.addAttribute(uri,localName,qName,"CDATA",attrValue);  return true;}  }
class C{  public static boolean destroyDatabase(WaspDb db){  try {    String directory=db.getPath() + "/" + Utils.md5(db.getName())+ "/";    if (new File(directory).exists()) {      try {        Utils.deleteRecursive(new File(directory));        return true;      } catch (      Exception e) {        return false;      }    } else {      return true;    }  } catch (  Exception e) {    e.printStackTrace();    return false;  }}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  boolean alwaysOnTop(){  if (SwingUtilities.getAncestorOfClass(JInternalFrame.class,this) != null) {    return false;  }  return true;}  }
class C{  public InvalidKeyException(){  super();}  }
class C{  private static void sort(short[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        short ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        short a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      short last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    short t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    short t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    short t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    short t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    short pivot1=a[e2];    short pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      short ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        short ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=pivot1;            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    short pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      short ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=pivot;        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  private void closeClicked(){  application.closeClicked(getCurrentStep(),this);}  }
class C{  TemplateLine(final AttributeType attributeType,final int lineNumber,final List<TemplateTag> tags,final boolean isURL,final boolean isBase64){  this.attributeType=attributeType;  this.lineNumber=lineNumber;  this.tags=tags;  this.isURL=isURL;  this.isBase64=isBase64;}  }
class C{  public static DN deregisterAlternateRootBindDN(DN alternateRootBindDN){  return directoryServer.alternateRootBindDNs.remove(alternateRootBindDN);}  }
class C{  public PluginResult.PreOperation invokePreOperationModifyPlugins(PreOperationModifyOperation modifyOperation) throws CanceledOperationException {  PluginResult.PreOperation result=null;  for (int i=0; i < preOperationModifyPlugins.length; i++) {    DirectoryServerPlugin p=preOperationModifyPlugins[i];    if (isInternalOperation(modifyOperation,p)) {      continue;    }    try {      result=p.doPreOperation(modifyOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreOperationException(e,i,preOperationModifyPlugins,modifyOperation,p);    }    if (result == null) {      return handlePreOperationResult(modifyOperation,i,preOperationModifyPlugins,p);    } else     if (!result.continuePluginProcessing()) {      registerSkippedPreOperationPlugins(i,preOperationModifyPlugins,modifyOperation);      return result;    }  }  if (result == null) {    result=PluginResult.PreOperation.continueOperationProcessing();  }  return result;}  }
class C{  public SessionPropertyEditViewBean(){  super("SessionPropertyEdit");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public DefaultBoundedRangeModel(){}  }
class C{  protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  try {    SSOTokenManager mgr=SSOTokenManager.getInstance();    SSOToken ssoToken=mgr.createSSOToken(request);    if (mgr.isValidToken(ssoToken)) {      if (ssoToken.getProperty(Constants.UNIVERSAL_IDENTIFIER) != null) {        debug.message("UNIV ID in ssoToken:" + ssoToken.getProperty(Constants.UNIVERSAL_IDENTIFIER));      } else {        debug.message("univ id is null");        if (debug.messageEnabled()) {          debug.message("principal:" + ssoToken.getPrincipal().getName());        }      }      String resource=request.getParameter("resource");      PolicyEvaluator pe=new PolicyEvaluator(WEB_AGENT_SERVICE);      Set actions=new HashSet();      actions.add("GET");      PolicyDecision pd=pe.getPolicyDecision(ssoToken,resource,actions,null);      boolean allowed=pe.isAllowed(ssoToken,resource,"GET",null);      StringBuffer message=new StringBuffer("<pre>");      message.append("isAllowed() for ").append(resource).append(" action:GET is:   ");      message=message.append(allowed);      message.append(NEWLINE);      message.append(NEWLINE);      message.append("getPolicyDecision() for ").append(resource).append(" action:GET is:");      message.append(NEWLINE);      message.append(XMLUtils.escapeSpecialCharacters(pd.toXML()));      message.append("</pre>");      sendResponse(response,message.toString());    }  } catch (  Exception ire) {    debug.error("processRequest::exception:",ire);    String requestUrl=request.getRequestURL().toString();    String redirectUrl=serverUrl + "?goto=" + requestUrl;    response.sendRedirect(redirectUrl);    return;  }}  }
class C{  protected PrinterState(int value){  super(value);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e.getPropertyName().equals("defaultButton")) {    JRootPane rootpane=(JRootPane)e.getSource();    updateDefaultButtonBindings(rootpane);    if (rootpane.getClientProperty("temporaryDefaultButton") == null) {      rootpane.putClientProperty("initialDefaultButton",e.getNewValue());    }  }}  }
class C{  private ThreadState(boolean shutdownInitiated){  this.shutdownInitiated=shutdownInitiated;}  }
class C{  private void createSunServiceIdFiles(SMSFlatFileTreeNode node,Set sunserviceids) throws SMSException {  if ((sunserviceids != null) && !sunserviceids.isEmpty()) {    createLookupFiles(node,SMSEntry.ATTR_SERVICE_ID,sunserviceids);  }}  }
class C{  private String readAttributeName(boolean returnLowerCase){  skipWhitespace();  int c=find(ATTRIBUTE_NAME_TERMINATORS);  String forSubstring=returnLowerCase ? inputLowerCase : input;  String result=pos < c ? forSubstring.substring(pos,c) : null;  pos=c;  return result;}  }
class C{  protected boolean checkIfLookaheadContextMatch(GlyphLine line,ContextualSubstRule rule,int startIdx){  int j;  OpenTableLookup.GlyphIndexer gidx=new OpenTableLookup.GlyphIndexer();  gidx.line=line;  gidx.idx=startIdx;  for (j=0; j < rule.getLookaheadContextLength(); ++j) {    gidx.nextGlyph(openReader,lookupFlag);    if (gidx.glyph == null || !rule.isGlyphMatchesLookahead(gidx.glyph.getCode(),j)) {      break;    }  }  return j == rule.getLookaheadContextLength();}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public ByteBufferOutputStream append_i(int b){  int newcount=count + 1;  if (newcount > buf.length) {    byte[] newbuf=new byte[Math.max(buf.length << 1,newcount)];    System.arraycopy(buf,0,newbuf,0,count);    buf=newbuf;  }  buf[count]=(byte)b;  count=newcount;  return this;}  }
class C{  public ActionButton(Action action){  super();  this.action=action;  setText(action.getName().toString());  setIconTextGap(0);  setHorizontalTextPosition(SwingConstants.TRAILING);  setHorizontalAlignment(SwingConstants.LEADING);  setOpaque(true);  setBorder(buttonBorder);  setFont(actionFont);  setFocusPainted(true);  setContentAreaFilled(false);  setToolTipText(action.getName().toString());  setRolloverEnabled(false);  Dimension d1=getPreferredSize();  setBorder(focusBorder);  Dimension d2=getPreferredSize();  setPreferredSize(new Dimension(Math.max(d1.width,d2.width),Math.max(d1.height,d2.height)));  setBorder(buttonBorder);}  }
class C{  final int compareMagnitude(BigInteger val){  int[] m1=mag;  int len1=m1.length;  int[] m2=val.mag;  int len2=m2.length;  if (len1 < len2)   return -1;  if (len1 > len2)   return 1;  for (int i=0; i < len1; i++) {    int a=m1[i];    int b=m2[i];    if (a != b)     return ((a & LONG_MASK) < (b & LONG_MASK)) ? -1 : 1;  }  return 0;}  }
class C{  public String createAjpConnector(String parent,String address,int port) throws Exception {  return createConnector(parent,address,port,true,false);}  }
class C{  public final CertPathBuilderResult build(CertPathParameters params) throws CertPathBuilderException, InvalidAlgorithmParameterException {  return spiImpl.engineBuild(params);}  }
class C{  ICC_ProfileRGB(ProfileDeferralInfo pdi){  super(pdi);}  }
class C{  public void replicaOffline(DN baseDN,CSN offlineCSN){  if (!predicate.isECLEnabledDomain(baseDN)) {    return;  }  replicasOffline.update(baseDN,offlineCSN);  final CSN oldestCSNBefore=getOldestLastAliveCSN();  lastAliveCSNs.update(baseDN,offlineCSN);  tryNotify(oldestCSNBefore);}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  core.init(forEncryption,param);  if (param instanceof ParametersWithRandom) {    ParametersWithRandom rParam=(ParametersWithRandom)param;    key=(RSAKeyParameters)rParam.getParameters();    random=rParam.getRandom();  } else {    key=(RSAKeyParameters)param;    random=new SecureRandom();  }}  }
class C{  public InvalidAttributeIdentifierException(String explanation){  super(explanation);}  }
class C{  protected void rehash(){  int oldCapacity=table.length;  Entry oldMap[]=table;  int newCapacity=oldCapacity * 2 + 1;  Entry newMap[]=new Entry[newCapacity];  modCount++;  threshold=(int)(newCapacity * loadFactor);  table=newMap;  for (int i=oldCapacity; i-- > 0; ) {    for (Entry old=oldMap[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=(e.hash & 0x7FFFFFFF) % newCapacity;      e.next=newMap[index];      newMap[index]=e;    }  }}  }
class C{  void pushElemTemplateElement(ElemTemplateElement elem){  if (elem.getUid() == -1)   elem.setUid(nextUid());  m_elems.push(elem);}  }
class C{  protected final void flushBuffer() throws IOException {  if (bufferSize == 0)   return;  flushed=true;  ensureOpen();  if (nextChar == 0)   return;  initOut();  out.write(cb,0,nextChar);  nextChar=0;}  }
class C{  public Object newInstance(Class javaContentInterface) throws JAXBException {  if (javaContentInterface == null) {    throw new JAXBException(Messages.format(Messages.CI_NOT_NULL));  }  try {    Class c=gi.getDefaultImplementation(javaContentInterface);    if (c == null)     throw new JAXBException(Messages.format(Messages.MISSING_INTERFACE,javaContentInterface));    return c.newInstance();  } catch (  Exception e) {    throw new JAXBException(e);  }}  }
class C{  @Override public long dynamicQueryCount(DynamicQuery dynamicQuery,Projection projection){  return fooPersistence.countWithDynamicQuery(dynamicQuery,projection);}  }
class C{  public ContextMatchStepPattern(int axis,int paxis){  super(DTMFilter.SHOW_ALL,axis,paxis);}  }
class C{  public void add(int index,T item){synchronized (lock) {    items.add(index,identifiedItemFactory.create(item));  }  itemPositionChangeChecked=new SparseBooleanArray(this.items.size());  notifyDataSetChanged();}  }
class C{  final boolean link(Index<K,V> succ,Index<K,V> newSucc){  Node<K,V> n=node;  newSucc.right=succ;  return n.value != null && casRight(succ,newSucc);}  }
class C{  public void removeMenuKeyListener(MenuKeyListener l){  listenerList.remove(MenuKeyListener.class,l);}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  private static void merge(ObjectNode tree,ObjectNode overrideTree){  Iterator<String> fieldNames=overrideTree.fieldNames();  while (fieldNames.hasNext()) {    String fieldName=fieldNames.next();    JsonNode primaryValue=tree.get(fieldName);    JsonNode backupValue=overrideTree.get(fieldName);    if (primaryValue == null) {      if (backupValue != null) {        tree.set(fieldName,backupValue);      }    } else     if (backupValue.isNull()) {      tree.remove(fieldName);    } else     if (primaryValue.isObject() && backupValue.isObject()) {      merge((ObjectNode)primaryValue,(ObjectNode)backupValue.deepCopy());    } else {      tree.set(fieldName,overrideTree.get(fieldName));    }  }}  }
class C{  public static String normalizeDN(String dn){  return normalizeDN(LDAPUtils.newDN(dn));}  }
class C{  public boolean equals(Object object){  if (object == this)   return true;  if (object instanceof QName) {    QName qname=(QName)object;    String thisnamespace=getNamespaceURI();    String thatnamespace=qname.getNamespaceURI();    return getLocalName().equals(qname.getLocalName()) && (((null != thisnamespace) && (null != thatnamespace)) ? thisnamespace.equals(thatnamespace) : ((null == thisnamespace) && (null == thatnamespace)));  } else   return false;}  }
class C{  public Holder(GeneralNames entityName){  this(entityName,V2_CERTIFICATE_HOLDER);}  }
class C{  public boolean includeObjectClasses(){  return includeObjectClasses;}  }
class C{  @Override public int countByUUID_G(String uuid,long groupId){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID_G;  Object[] finderArgs=new Object[]{uuid,groupId};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(3);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_G_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_G_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_G_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(groupId);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public void removeSelectionPaths(TreePath[] paths){  this.getSelectionModel().removeSelectionPaths(paths);}  }
class C{  private boolean parseFunction(){  if (!(curToken instanceof Id) || isELReserved(curToken.toTrimmedString()) || prevToken instanceof Char && prevToken.toChar() == '.') {    return false;  }  String s1=null;  String s2=curToken.toTrimmedString();  int start=index - curToken.toString().length();  Token original=curToken;  if (hasNext()) {    int mark=getIndex() - whiteSpace.length();    curToken=nextToken();    if (curToken.toChar() == ':') {      if (hasNext()) {        Token t2=nextToken();        if (t2 instanceof Id) {          s1=s2;          s2=t2.toTrimmedString();          if (hasNext()) {            curToken=nextToken();          }        }      }    }    if (curToken.toChar() == '(') {      ELexpr.add(new ELNode.Function(s1,s2,expression.substring(start,index - 1)));      return true;    }    curToken=original;    setIndex(mark);  }  return false;}  }
class C{  public void addService(ContextService service){  if (entries.contains(service.getName())) {    return;  } else {    entries.add(service.getName());  }synchronized (services) {    service.setNamingResources(this);    services.put(service.getName(),service);  }  support.firePropertyChange("service",null,service);}  }
class C{  private int rebuildIndex(final Backend<?> backend,final RebuildConfig rebuildConfig){  try {    final String lockFile=LockFileManager.getBackendLockFileName(backend);    final StringBuilder failureReason=new StringBuilder();    if (!LockFileManager.acquireExclusiveLock(lockFile,failureReason)) {      logger.error(ERR_REBUILDINDEX_CANNOT_EXCLUSIVE_LOCK_BACKEND,backend.getBackendID(),failureReason);      return 1;    }  } catch (  Exception e) {    logger.error(ERR_REBUILDINDEX_CANNOT_EXCLUSIVE_LOCK_BACKEND,backend.getBackendID(),getExceptionMessage(e));    return 1;  }  int returnCode=0;  try {    backend.rebuildBackend(rebuildConfig,DirectoryServer.getInstance().getServerContext());  } catch (  InitializationException e) {    logger.error(ERR_REBUILDINDEX_ERROR_DURING_REBUILD,e.getMessage());    returnCode=1;  }catch (  Exception e) {    logger.error(ERR_REBUILDINDEX_ERROR_DURING_REBUILD,getExceptionMessage(e));    returnCode=1;  } finally {    try {      final String lockFile=LockFileManager.getBackendLockFileName(backend);      final StringBuilder failureReason=new StringBuilder();      if (!LockFileManager.releaseLock(lockFile,failureReason)) {        logger.warn(WARN_REBUILDINDEX_CANNOT_UNLOCK_BACKEND,backend.getBackendID(),failureReason);      }    } catch (    Exception e) {      logger.error(WARN_REBUILDINDEX_CANNOT_UNLOCK_BACKEND,backend.getBackendID(),getExceptionMessage(e));    }  }  return returnCode;}  }
class C{  public static List<String> readLines(File file) throws IOException {  return readLines(file,Charset.defaultCharset());}  }
class C{  protected int read(byte[] buffer,int offset,int length) throws IOException {  return mTiffStream.read(buffer,offset,length);}  }
class C{  public GroupMBean() throws MBeanException, RuntimeOperationsException {  super();}  }
class C{  AVT processAVT(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    AVT avt=new AVT(handler,uri,name,rawName,value,owner);    return avt;  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public SignatureVisitor visitClassBound(){  return this;}  }
class C{  public static char[] unfold(String s) throws GeneralSecurityException {  char[] passwordCopy=null;  if (null != s) {    if (s.startsWith(__CRYPT)) {      passwordCopy=decrypt(s).toCharArray();    } else     if (s.startsWith(__OBFUSCATE)) {      passwordCopy=deobfuscate(s).toCharArray();    } else     if (s.equalsIgnoreCase(__CONSOLE)) {      char[] passwordArray=System.console().readPassword("Please enter the password: ");      passwordCopy=Arrays.copyOf(passwordArray,passwordArray.length);      Arrays.fill(passwordArray,' ');    } else {      passwordCopy=s.toCharArray();    }  }  return passwordCopy;}  }
class C{  public BasicConstraints(byte[] encoding) throws IOException {  super(encoding);  Object[] values=(Object[])ASN1.decode(encoding);  ca=(Boolean)values[0];  if (values[1] != null) {    pathLenConstraint=new BigInteger((byte[])values[1]).intValue();  }}  }
class C{  protected void engineSetPadding(String padding) throws NoSuchPaddingException {  if (!padding.equalsIgnoreCase("NoPadding")) {    throw new NoSuchPaddingException("Padding " + padding + " unknown.");  }}  }
class C{  private static Method createMethodAndCacheIt(Method[] methodsCache,Class<?> targetType,String methodName,Class<?>[] parameterTypes) throws Exception {  if (methodsCache == null) {    methodsCache=new Method[4];  }  Method method=targetType.getMethod(methodName,parameterTypes);  if (methodName.equals(INIT_METHOD)) {    methodsCache[INIT]=method;  } else   if (methodName.equals(DESTROY_METHOD)) {    methodsCache[DESTROY]=method;  } else   if (methodName.equals(SERVICE_METHOD)) {    methodsCache[SERVICE]=method;  } else   if (methodName.equals(DOFILTER_METHOD)) {    methodsCache[DOFILTER]=method;  } else   if (methodName.equals(EVENT_METHOD)) {    methodsCache[EVENT]=method;  } else   if (methodName.equals(DOFILTEREVENT_METHOD)) {    methodsCache[DOFILTEREVENT]=method;  }  classCache.put(targetType,methodsCache);  return method;}  }
class C{  public StatusDetail createStatusDetail() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS_DETAIL);  if (obj == null) {    return new StatusDetailImpl();  } else {    return (StatusDetail)obj;  }}  }
class C{  public void removeSession(String userID,FSSession session){  FSUtils.debug.message("FSSessionManager.removeSession: Called");  List sessions=getSessionList(userID);  if (sessions != null) {synchronized (sessions) {      Iterator i=sessions.iterator();      while (i.hasNext()) {        FSSession oldsession=(FSSession)i.next();        if (oldsession.equals(session)) {          sessions.remove(oldsession);          break;        }      }    }    if (sessions.isEmpty()) {      removeSessionList(userID);    }  }}  }
class C{  protected Object readResolve() throws InvalidObjectException {  if (this.getClass() != MessageFormat.Field.class) {    throw new InvalidObjectException("subclass didn't correctly implement readResolve");  }  return ARGUMENT;}  }
class C{  public void handleException(ParseException ex,SIPMessage sipMessage,Class hdrClass,String header,String message) throws ParseException {  if (getSIPStack().isLoggingEnabled())   this.logger.logException(ex);  if ((hdrClass != null) && (hdrClass.equals(From.class) || hdrClass.equals(To.class) || hdrClass.equals(CSeq.class)|| hdrClass.equals(Via.class)|| hdrClass.equals(CallID.class)|| hdrClass.equals(RequestLine.class)|| hdrClass.equals(StatusLine.class))) {    logger.logError("BAD MESSAGE!");    logger.logError(message);    throw ex;  } else {    sipMessage.addUnparsed(header);  }}  }
class C{  private void doPostModifyDN(PluginOperation modifyDNOperation,Entry oldEntry,Entry newEntry){  if (hasGroupMembershipUpdateControl(modifyDNOperation)) {    return;  }  lock.writeLock().lock();  try {    Set<Group<?>> groupSet=new HashSet<>();    final DN oldDN=oldEntry.getName();    final DN newDN=newEntry.getName();    groupInstances.removeSubtree(oldDN,groupSet);    for (    Group<?> group : groupSet) {      final DN groupDN=group.getGroupDN();      final DN renamedGroupDN=groupDN.rename(oldDN,newDN);      group.setGroupDN(renamedGroupDN);      groupInstances.put(renamedGroupDN,group);    }    if (!groupSet.isEmpty()) {      refreshToken++;    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public LogRecord(Level level,String msg){  level.getClass();  this.level=level;  message=msg;  sequenceNumber=globalSequenceNumber.getAndIncrement();  threadID=defaultThreadID();  millis=System.currentTimeMillis();  needToInferCaller=true;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  parseName();  parseActions();}  }
class C{  private static Group<?> loadGroup(String className,GroupImplementationCfg configuration,boolean initialize) throws InitializationException {  try {    GroupImplementationCfgDefn definition=GroupImplementationCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    Class<? extends Group> groupClass=propertyDefinition.loadClass(className,Group.class);    Group group=groupClass.newInstance();    if (initialize) {      group.initializeGroupImplementation(configuration);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!group.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String reason=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_GROUP_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),reason));      }    }    return group;  } catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_GROUP_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  public boolean isAscending(){  return (!reverseOrder);}  }
class C{  public void handleTblServerButtonCloneRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(TBL_SERVERS);  table.restoreStateData();  Integer[] selected=tblServerModel.getSelectedRows();  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);  List list=(List)szCache.getSerializedObj();  String serverName=(String)list.get(selected[0].intValue());  ServerCloneViewBean vb=(ServerCloneViewBean)getViewBean(ServerCloneViewBean.class);  unlockPageTrail();  setPageSessionAttribute(ServerCloneViewBean.PG_ATTR_SERVER_NAME,serverName);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public boolean addAll(Collection<ByteString> values){  boolean wasModified=false;  for (  ByteString v : values) {    wasModified|=add(v);  }  return wasModified;}  }
class C{  @Override public String encodeRedirectURL(String url){  return this._getHttpServletResponse().encodeRedirectURL(url);}  }
class C{  public ZipException(String s){  super(s);}  }
class C{  public static JTextField createMediumTextField(){  JTextField tf=createTextField();  tf.setColumns(20);  return tf;}  }
class C{  public XRTreeFrag(Expression expr){  super(expr);}  }
class C{  public X509CertImpl(InputStream in) throws CertificateException {  try {    this.certificate=(Certificate)Certificate.ASN1.decode(in);    this.tbsCert=certificate.getTbsCertificate();    this.extensions=tbsCert.getExtensions();  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  public static Position[] simplify(Position[] points,double tolerance,boolean highestQuality){  if (points.length <= 2) {    return points;  }  double sqTolerance=tolerance * tolerance;  points=highestQuality ? points : simplifyRadialDist(points,sqTolerance);  points=simplifyDouglasPeucker(points,sqTolerance);  return points;}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public boolean hasNext(){  if (getReturnProperty() != null) {    return true;  } else   if (skipSiblings) {    return false;  } else   if (childrenIterator.hasNext()) {    XMPNode child=(XMPNode)childrenIterator.next();    index++;    String path=null;    if (child.getOptions().isSchemaNode()) {      setBaseNS(child.getName());    } else     if (child.getParent() != null) {      path=accumulatePath(child,parentPath,index);    }    if (!getOptions().isJustLeafnodes() || !child.hasChildren()) {      setReturnProperty(createPropertyInfo(child,getBaseNS(),path));      return true;    } else {      return hasNext();    }  } else {    return false;  }}  }
class C{  public void init(Map<String,Set<String>> parameters){}  }
class C{  public static void removeByUuid(java.lang.String uuid){  getPersistence().removeByUuid(uuid);}  }
class C{  public CoreAttributesViewBean(){  super("CoreAttributes",DEFAULT_DISPLAY_URL,AMAdminConstants.CORE_AUTH_SERVICE);}  }
class C{  private static String toPunycode(String domainName){  if (UrlUtils.isASCII(domainName)) {    return domainName;  }  return UrlUtils.toPunycode(domainName);}  }
class C{  public void paintPopupMenuBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  public TagTreePointer removeAnnotationTag(PdfAnnotation annotation){  PdfStructElem structElem=null;  PdfDictionary annotDic=annotation.getPdfObject();  PdfNumber structParentIndex=(PdfNumber)annotDic.get(PdfName.StructParent);  if (structParentIndex != null) {    PdfObjRef objRef=document.getStructTreeRoot().findObjRefByStructParentIndex(annotDic.getAsDictionary(PdfName.P),structParentIndex.intValue());    if (objRef != null) {      PdfStructElem parent=(PdfStructElem)objRef.getParent();      parent.removeKid(objRef);      structElem=parent;    }  }  annotDic.remove(PdfName.StructParent);  if (structElem != null) {    return new TagTreePointer(document).setCurrentStructElem(structElem);  }  return null;}  }
class C{  private SimpleFuzzerConfig parseSimpleFuzzerConfig(StartupCommand command){  JCommander jc=new JCommander();  SimpleFuzzerConfig simpleConfig=new SimpleFuzzerConfig();  jc.addCommand(SimpleFuzzerConfig.ATTACK_COMMAND,simpleConfig);  jc.parse(command.getFuzzerCommand().split(" "));  return simpleConfig;}  }
class C{  protected StringBuilder encodeBody(StringBuilder buffer){  if (scheme != null)   buffer.append(scheme).append(' ');  return parameters.encode(buffer);}  }
class C{  void initialize(){  UIManager.addPropertyChangeListener(defaultsListener);  UIManager.getDefaults().addPropertyChangeListener(colorTree);}  }
class C{  public MemoryImageSource(int w,int h,int pix[],int off,int scan,Hashtable<?,?> props){  initialize(w,h,ColorModel.getRGBdefault(),(Object)pix,off,scan,props);}  }
class C{  DOMStringListImpl(Vector params){  fStrings=params;}  }
class C{  private static boolean containsKeyStorePathErrorMessage(Collection<LocalizableMessage> msgs){  for (  final LocalizableMessage msg : msgs) {    if (StaticUtils.hasDescriptor(msg,INFO_KEYSTORE_PATH_DOES_NOT_EXIST) || StaticUtils.hasDescriptor(msg,INFO_KEYSTORE_PATH_NOT_A_FILE) || StaticUtils.hasDescriptor(msg,INFO_JKS_KEYSTORE_DOES_NOT_EXIST)|| StaticUtils.hasDescriptor(msg,INFO_JCEKS_KEYSTORE_DOES_NOT_EXIST)|| StaticUtils.hasDescriptor(msg,INFO_PKCS12_KEYSTORE_DOES_NOT_EXIST)|| StaticUtils.hasDescriptor(msg,INFO_PKCS11_KEYSTORE_DOES_NOT_EXIST)|| StaticUtils.hasDescriptor(msg,INFO_ERROR_ACCESSING_JKS_KEYSTORE)|| StaticUtils.hasDescriptor(msg,INFO_ERROR_ACCESSING_JCEKS_KEYSTORE)|| StaticUtils.hasDescriptor(msg,INFO_ERROR_ACCESSING_PKCS12_KEYSTORE)|| StaticUtils.hasDescriptor(msg,INFO_ERROR_ACCESSING_PKCS11_KEYSTORE)) {      return true;    }  }  return false;}  }
class C{  public static int readUInt8(ByteBuffer b){  return read(b);}  }
class C{  public static Object convertStringToJAXB(String str) throws JAXBException {  Unmarshaller u=jaxbContext.createUnmarshaller();  return u.unmarshal(XMLUtils.createSAXSource(new InputSource(new StringReader(str))));}  }
class C{  public void printAttributes(PrintWriter writer,int indent,Object bean,StoreDescription desc) throws Exception {  printAttributes(writer,indent,true,bean,desc);}  }
class C{  public boolean isSignatureValid(ContentVerifierProvider verifierProvider) throws CertException {  AttributeCertificateInfo acinfo=attrCert.getAcinfo();  if (!CertUtils.isAlgIdEqual(acinfo.getSignature(),attrCert.getSignatureAlgorithm())) {    throw new CertException("signature invalid - algorithm identifier mismatch");  }  ContentVerifier verifier;  try {    verifier=verifierProvider.get((acinfo.getSignature()));    OutputStream sOut=verifier.getOutputStream();    DEROutputStream dOut=new DEROutputStream(sOut);    dOut.writeObject(acinfo);    sOut.close();  } catch (  Exception e) {    throw new CertException("unable to process signature: " + e.getMessage(),e);  }  return verifier.verify(attrCert.getSignatureValue().getBytes());}  }
class C{  private boolean checkPermission(String action,String urlLastSegment,String realm,SSOToken token) throws EntitlementException {  boolean result;  try {    final Set<String> actions=new HashSet<String>(Arrays.asList(action));    final DelegationPermissionFactory permissionFactory=new DelegationPermissionFactory();    final DelegationPermission permissionRequest=permissionFactory.newInstance(realm,REST,VERSION,urlLastSegment,action,actions,Collections.<String,String>emptyMap());    result=checkPermission(permissionRequest,token,urlLastSegment);  } catch (  SSOException e) {    debug.warning("XacmlService permission evaluation failed",e);    throw new EntitlementException(INTERNAL_ERROR,e);  }catch (  DelegationException e) {    debug.warning("XacmlService permission evaluation failed",e);    throw new EntitlementException(INTERNAL_ERROR,e);  }  return result;}  }
class C{  public String[] findErrorPages() throws MBeanException {  Context context;  try {    context=(Context)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  ErrorPage[] pages=context.findErrorPages();  String[] stringPages=new String[pages.length];  for (int counter=0; counter < pages.length; counter++) {    stringPages[counter]=pages[counter].toString();  }  return stringPages;}  }
class C{  public void test_ConstructorLAttributedCharacterIteratorII$Ljava_text_AttributedCharacterIterator$Attribute(){  try {    new AttributedString(new testAttributedCharacterIterator(),0,0,null);  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }  try {    new AttributedString(new testAttributedCharacterIterator(),-1,0,null);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException e) {  }  try {    new AttributedString(new testAttributedCharacterIterator(),0,-1,null);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException e) {  }  try {    AttributedCharacterIterator.Attribute[] attributes=new AttributedCharacterIterator.Attribute[1];    attributes[0]=new TestAttributedCharacterIteratorAttribute("test");    new AttributedString(new testAttributedCharacterIterator(),0,0,attributes);  } catch (  IllegalArgumentException e) {    fail("Unexpected expected " + e.toString());  }}  }
class C{  @Deprecated public static FontProgram createFont(String name,byte[] fontProgram,boolean cached) throws java.io.IOException {  String baseName=FontProgram.getBaseName(name);  boolean isBuiltinFonts14=FontConstants.BUILTIN_FONTS_14.contains(name);  boolean isCidFont=!isBuiltinFonts14 && FontCache.isPredefinedCidFont(baseName);  FontProgram fontFound;  String fontKey=null;  if (cached) {    if (name != null) {      fontKey=name;    } else {      fontKey=Integer.toString(ArrayUtil.hashCode(fontProgram));    }    fontFound=FontCache.getFont(fontKey);    if (fontFound != null) {      return fontFound;    }  }  FontProgram fontBuilt=null;  if (name == null) {    if (fontProgram != null) {      try {        fontBuilt=new TrueTypeFont(fontProgram);      } catch (      Exception ignored) {      }      if (fontBuilt == null) {        try {          fontBuilt=new Type1Font(null,null,fontProgram,null);        } catch (        Exception ignored) {        }      }    }  } else {    if (isBuiltinFonts14 || name.toLowerCase().endsWith(".afm") || name.toLowerCase().endsWith(".pfm")) {      fontBuilt=new Type1Font(name,null,null,null);    } else     if (baseName.toLowerCase().endsWith(".ttf") || baseName.toLowerCase().endsWith(".otf") || baseName.toLowerCase().indexOf(".ttc,") > 0) {      if (fontProgram != null) {        fontBuilt=new TrueTypeFont(fontProgram);      } else       if (baseName.toLowerCase().indexOf(".ttc,") > 0) {        String[] parts=baseName.split(".ttc,");        try {          fontBuilt=new TrueTypeFont(parts[0] + ".ttc",Integer.parseInt(parts[1]));        } catch (        NumberFormatException nfe) {          throw new IOException(nfe.getMessage(),nfe);        }      } else {        fontBuilt=new TrueTypeFont(name);      }    } else     if (isCidFont) {      fontBuilt=new CidFont(name,FontCache.getCompatibleCmaps(baseName));    }  }  if (fontBuilt == null) {    if (name != null) {      throw new IOException(IOException.TypeOfFont1IsNotRecognized).setMessageParams(name);    } else {      throw new IOException(IOException.TypeOfFontIsNotRecognized);    }  }  return cached ? FontCache.saveFont(fontBuilt,fontKey) : fontBuilt;}  }
class C{  public static Matrix4 matrixFromPointNormalUp(double[] point,double[] normal,Vector3 up){  Vector3 zAxis=new Vector3(normal);  zAxis.normalize();  Vector3 xAxis=new Vector3();  xAxis.crossAndSet(up,zAxis);  xAxis.normalize();  Vector3 yAxis=new Vector3();  yAxis.crossAndSet(xAxis,zAxis);  yAxis.normalize();  double[] rot=new double[16];  rot[Matrix4.M00]=xAxis.x;  rot[Matrix4.M10]=xAxis.y;  rot[Matrix4.M20]=xAxis.z;  rot[Matrix4.M01]=yAxis.x;  rot[Matrix4.M11]=yAxis.y;  rot[Matrix4.M21]=yAxis.z;  rot[Matrix4.M02]=zAxis.x;  rot[Matrix4.M12]=zAxis.y;  rot[Matrix4.M22]=zAxis.z;  rot[Matrix4.M33]=1;  Matrix4 m=new Matrix4(rot);  m.setTranslation(point[0],point[1],point[2]);  return m;}  }
class C{  public static boolean compareCaseInsensitiveMapOfSetOfStrings(Map<String,Set<String>> valA,Map<String,Set<String>> valB){  if (valA == valB) {    return true;  }  if ((valA == null) || (valB == null)) {    return false;  }  if (valA.size() != valB.size()) {    return false;  }  if (valA.size() == 0) {    return true;  }  for (  Map.Entry<String,Set<String>> valAEntry : valA.entrySet()) {    Set<String> valBValues=valB.get(valAEntry.getKey());    Set<String> valAValues=valAEntry.getValue();    if (valBValues == null) {      if (valAValues != null) {        return false;      }      continue;    }    if (valAValues.size() != valBValues.size()) {      return false;    }    if (valAValues.size() == 0) {      continue;    }    for (    String valAValueString : valAValues) {      if (valAValueString == null) {        boolean bFoundNull=false;        for (        String nullTestInValBString : valBValues) {          bFoundNull=nullTestInValBString == null;          if (bFoundNull) {            break;          }        }        if (!bFoundNull) {          return false;        }        continue;      }      boolean bFound=false;      for (      String valBValueString : valBValues) {        bFound=StringUtils.compareCaseInsensitiveString(valAValueString,valBValueString);        if (bFound) {          break;        }      }      if (!bFound) {        return false;      }    }  }  return true;}  }
class C{  private T wildcardResponseCombiner(T... matches){  boolean wildcard=false;  for (  T match : matches) {    if (wildcardMatch.equals(match)) {      wildcard=true;    } else     if (!exactMatch.equals(match)) {      return match;    }  }  if (wildcard) {    return wildcardMatch;  } else {    return exactMatch;  }}  }
class C{  public boolean entryExists(SSOToken token,String objName){  boolean exists=false;  if (objName == null || objName.length() == 0) {    throw new IllegalArgumentException("SMSFlatFileObject.entryExists: " + "One or more arguments is null or empty.");  }  mRWLock.readRequest();  try {    String filepath=mNameMap.getProperty(objName.toLowerCase());    if (filepath != null) {      exists=true;    }  }  finally {    mRWLock.readDone();  }  return exists;}  }
class C{  public StringBuilder(int capacity){  super(capacity);}  }
class C{  public CopyOnWriteArraySet(Collection<? extends E> c){  al=new CopyOnWriteArrayList<E>();  al.addAllAbsent(c);}  }
class C{  @SuppressWarnings("PointlessArithmeticExpression") public void computePointsWithinXRange(List<DataSet> dataSets){  pointsCountWithinXRange=0;  for (  DataSet dataSet : dataSets) {    List<DataPoint> points=dataSet.getPoints();    int size=points.size();    for (int i=0; i < size; i++) {      DataPoint p=points.get(i);      if (p.x > viewportRect.left && p.x < viewportRect.right) {        int length=xRangePoints.length;        if (length < pointsCountWithinXRange * 2 + 2) {          xRangePoints=new float[Math.round(length * 3 / 2)];        }        xRangePoints[pointsCountWithinXRange * 2 + 0]=p.x;        xRangePoints[pointsCountWithinXRange * 2 + 1]=p.y;        pointsCountWithinXRange++;      }    }  }}  }
class C{  @Override public boolean isOpaque(){  Color back=getBackground();  Component p=getParent();  if (p != null) {    p=p.getParent();  }  boolean colorMatch=(back != null) && (p != null) && back.equals(p.getBackground())&& p.isOpaque();  return !colorMatch && super.isOpaque();}  }
class C{  public static <K,V>KeyedPooledObjectFactory<K,V> synchronizedKeyedPooledFactory(final KeyedPooledObjectFactory<K,V> keyedFactory){  return new SynchronizedKeyedPooledObjectFactory<>(keyedFactory);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element root;  NodeList elementList;  Node firstChild;  NodeList textList;  CharacterData textNode;  String data;  doc=(Document)load("staff",false);  root=doc.getDocumentElement();  root.normalize();  elementList=root.getElementsByTagName("name");  firstChild=elementList.item(2);  textList=firstChild.getChildNodes();  textNode=(CharacterData)textList.item(0);  data=textNode.getData();  assertEquals("data","Roger\n Jones",data);}  }
class C{  protected final void charactersFlush(){  if (m_textPendingStart >= 0) {    int length=m_chars.size() - m_textPendingStart;    boolean doStrip=false;    if (getShouldStripWhitespace()) {      doStrip=m_chars.isWhitespace(m_textPendingStart,length);    }    if (doStrip) {      m_chars.setLength(m_textPendingStart);    } else {      if (length > 0) {        if (length <= TEXT_LENGTH_MAX && m_textPendingStart <= TEXT_OFFSET_MAX) {          m_previous=addNode(m_coalescedTextType,DTM.TEXT_NODE,m_parents.peek(),m_previous,length + (m_textPendingStart << TEXT_LENGTH_BITS),false);        } else {          int dataIndex=m_data.size();          m_previous=addNode(m_coalescedTextType,DTM.TEXT_NODE,m_parents.peek(),m_previous,-dataIndex,false);          m_data.addElement(m_textPendingStart);          m_data.addElement(length);        }      }    }    m_textPendingStart=-1;    m_textType=m_coalescedTextType=DTM.TEXT_NODE;  }}  }
class C{  public CertificateRequest(byte[] certificate_types,X509Certificate[] accepted){  if (accepted == null) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"CertificateRequest: array of certificate authority certificates is null");  }  this.certificate_types=certificate_types;  int totalPrincipalsLength=0;  certificate_authorities=new X500Principal[accepted.length];  encoded_principals=new byte[accepted.length][];  for (int i=0; i < accepted.length; i++) {    certificate_authorities[i]=accepted[i].getIssuerX500Principal();    encoded_principals[i]=certificate_authorities[i].getEncoded();    totalPrincipalsLength+=encoded_principals[i].length + 2;  }  length=3 + certificate_types.length + totalPrincipalsLength;}  }
class C{  public void changedUpdate(DocumentEvent changes,Shape a,ViewFactory f){  setPropertiesFromAttributes();  layoutChanged(X_AXIS);  layoutChanged(Y_AXIS);  super.changedUpdate(changes,a,f);}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  public InvalidAttributeNameException(){  super();}  }
class C{  public static IssuingDistributionPoint decode(byte[] encoding) throws IOException {  IssuingDistributionPoint idp=(IssuingDistributionPoint)ASN1.decode(encoding);  idp.encoding=encoding;  return idp;}  }
class C{  private boolean validateProperties() throws PolicyException {  if ((properties == null) || (properties.keySet() == null)) {    throw new PolicyException(ResBundleUtils.rbName,"properties_not_initialized",null,null);  }  Set keySet=properties.keySet();  if (!keySet.contains(START_TIME) && !keySet.contains(START_DAY) && !keySet.contains(START_DATE)&& !keySet.contains(DAYS_OF_WEEK)) {    String[] args={START_DATE + "," + START_TIME+ ","+ START_DAY};    throw new PolicyException(ResBundleUtils.rbName,"at_least_one_of_the_properties_should_be_defined",args,null);  }  Iterator keys=keySet.iterator();  while (keys.hasNext()) {    String key=(String)keys.next();    if (!START_TIME.equals(key) && !START_DAY.equals(key) && !START_DATE.equals(key)&& !END_TIME.equals(key)&& !END_DAY.equals(key)&& !END_DATE.equals(key)&& !DAYS_OF_WEEK.equals(key)&& !ENFORCEMENT_TIME_ZONE.equals(key)) {      String args[]={key};      throw new PolicyException(ResBundleUtils.rbName,"attempt_to_set_invalid_property",args,null);    }  }  Set enforcementTimeZoneSet=(Set)properties.get(ENFORCEMENT_TIME_ZONE);  if ((enforcementTimeZoneSet != null) && (!enforcementTimeZoneSet.isEmpty())) {    String enforcementTimeZoneString=(String)enforcementTimeZoneSet.iterator().next();    enforcementTimeZone=TimeZone.getTimeZone(enforcementTimeZoneString);  }  Set startTimeSet=(Set)properties.get(START_TIME);  Set endTimeSet=(Set)properties.get(END_TIME);  if ((startTimeSet != null) && (endTimeSet == null)) {    String[] args={START_TIME,END_TIME};    throw new PolicyException(ResBundleUtils.rbName,"pair_property_not_defined",args,null);  }  if ((startTimeSet == null) && (endTimeSet != null)) {    String[] args={END_TIME,START_TIME};    throw new PolicyException(ResBundleUtils.rbName,"pair_property_not_defined",args,null);  }  if (startTimeSet != null) {    validateTimes(startTimeSet,endTimeSet);  }  Set startDaySet=(Set)properties.get(START_DAY);  Set endDaySet=(Set)properties.get(END_DAY);  if ((startDaySet != null) && (endDaySet == null)) {    String[] args={START_DAY,END_DAY};    throw new PolicyException(ResBundleUtils.rbName,"pair_property_not_defined",args,null);  }  if ((startDaySet == null) && (endDaySet != null)) {    String[] args={END_DAY,START_DAY};    throw new PolicyException(ResBundleUtils.rbName,"pair_property_not_defined",args,null);  }  if (startDaySet != null) {    validateDays(startDaySet,endDaySet);  }  Set startDateSet=(Set)properties.get(START_DATE);  Set endDateSet=(Set)properties.get(END_DATE);  if ((startDateSet != null) && (endDateSet == null)) {    String[] args={START_DATE,END_DATE};    throw new PolicyException(ResBundleUtils.rbName,"pair_property_not_defined",args,null);  }  if ((startDateSet == null) && (endDateSet != null)) {    String[] args={END_DATE,START_DATE};    throw new PolicyException(ResBundleUtils.rbName,"pair_property_not_defined",args,null);  }  if (startDateSet != null) {    validateDates(startDateSet,endDateSet);  }  return true;}  }
class C{  public TableColumn(int modelIndex,int width){  this(modelIndex,width,null,null);}  }
class C{  private void initDefaultFilterRules(String fileName){  log.info("Initializing filter rules file {}",fileName);  InputStream inputStream=null;  OutputStream outputStream=null;  try {    int id=context.getResources().getIdentifier(fileName,"raw",context.getPackageName());    context.deleteFile(fileName);    outputStream=context.openFileOutput(fileName,Context.MODE_PRIVATE);    if (id > 0) {      log.info("Found default filter rules. Writing to the file.");      inputStream=context.getResources().openRawResource(id);      IOUtils.copy(inputStream,outputStream);    }    log.info("Default filter has been initialized");  } catch (  Exception ex) {    log.error("Cannot init default filter:\r\n{}",ex);    throw new RuntimeException("Cannot init default filter",ex);  } finally {    IOUtils.closeQuietly(inputStream);    IOUtils.closeQuietly(outputStream);  }}  }
class C{  public ArgumentException(final LocalizableMessage message,final Throwable cause){  super(String.valueOf(message),cause);  this.message=message;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  @Override public long skip(long n) throws IOException {  throw exception;}  }
class C{  static void signAndEncryptResponseComponents(String realm,String spEntityID,String idpEntityID,Response res,boolean signAssertion) throws SAML2Exception {  String classMethod="IDPSSOUtil.signAndEncryptResponseComponents: ";  boolean toEncryptAssertion=false;  boolean toEncryptNameID=false;  boolean toEncryptAttribute=false;  if (res == null) {    return;  }  List assertions=res.getAssertion();  if ((assertions == null) || (assertions.size() == 0)) {    return;  }  Assertion assertion=(Assertion)assertions.get(0);  String wantAssertionEncrypted=SAML2Utils.getAttributeValueFromSSOConfig(realm,spEntityID,SAML2Constants.SP_ROLE,SAML2Constants.WANT_ASSERTION_ENCRYPTED);  toEncryptAssertion=(wantAssertionEncrypted != null) && (wantAssertionEncrypted.equals(SAML2Constants.TRUE));  if (!toEncryptAssertion) {    String wantNameIDEncrypted=SAML2Utils.getAttributeValueFromSSOConfig(realm,spEntityID,SAML2Constants.SP_ROLE,SAML2Constants.WANT_NAMEID_ENCRYPTED);    toEncryptNameID=(wantNameIDEncrypted != null) && (wantNameIDEncrypted.equals(SAML2Constants.TRUE));    String wantAttributeEncrypted=SAML2Utils.getAttributeValueFromSSOConfig(realm,spEntityID,SAML2Constants.SP_ROLE,SAML2Constants.WANT_ATTRIBUTE_ENCRYPTED);    toEncryptAttribute=(wantAttributeEncrypted != null) && (wantAttributeEncrypted.equals(SAML2Constants.TRUE));  }  if ((!toEncryptAssertion) && (!toEncryptNameID) && (!toEncryptAttribute)) {    if (signAssertion) {      signAssertion(realm,idpEntityID,assertion);      List assertionList=new ArrayList();      assertionList.add(assertion);      res.setAssertion(assertionList);    }    return;  }  SPSSODescriptorElement spSSODescriptorElement=getSPSSODescriptor(realm,spEntityID,classMethod);  EncInfo encInfo=KeyUtil.getEncInfo(spSSODescriptorElement,spEntityID,SAML2Constants.SP_ROLE);  if (encInfo == null) {    SAML2Utils.debug.error(classMethod + "failed to get service provider encryption key info.");    throw new SAML2Exception(SAML2Utils.bundle.getString("UnableToFindEncryptKeyInfo"));  }  if (toEncryptAssertion) {    if (signAssertion) {      signAssertion(realm,idpEntityID,assertion);    }    EncryptedAssertion encryptedAssertion=assertion.encrypt(encInfo.getWrappingKey(),encInfo.getDataEncAlgorithm(),encInfo.getDataEncStrength(),spEntityID);    if (encryptedAssertion == null) {      SAML2Utils.debug.error(classMethod + "failed to encrypt the assertion.");      throw new SAML2Exception(SAML2Utils.bundle.getString("FailedToEncryptAssertion"));    }    List assertionList=new ArrayList();    assertionList.add(encryptedAssertion);    res.setEncryptedAssertion(assertionList);    res.setAssertion(new ArrayList());    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message(classMethod + "Assertion encrypted.");    }  } else {    if (toEncryptNameID) {      Subject subject=assertion.getSubject();      if (subject == null) {        return;      }      NameID nameID=subject.getNameID();      if (nameID == null) {        return;      }      EncryptedID encryptedNameID=nameID.encrypt(encInfo.getWrappingKey(),encInfo.getDataEncAlgorithm(),encInfo.getDataEncStrength(),spEntityID);      if (encryptedNameID == null) {        SAML2Utils.debug.error(classMethod + "failed to encrypt the NameID.");        throw new SAML2Exception(SAML2Utils.bundle.getString("FailedToEncryptNameID"));      }      subject.setEncryptedID(encryptedNameID);      subject.setNameID(null);      assertion.setSubject(subject);      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message(classMethod + "NameID encrypted.");      }    }    if (toEncryptAttribute) {      List attributeStatements=assertion.getAttributeStatements();      if ((attributeStatements != null) && (attributeStatements.size() > 0)) {        int asSize=attributeStatements.size();        List stmts=new ArrayList();        for (int i=0; i < asSize; i++) {          AttributeStatement attributeStatement=(AttributeStatement)attributeStatements.get(i);          List attributes=attributeStatement.getAttribute();          if ((attributes == null) || (attributes.size() == 0)) {            continue;          }          int aSize=attributes.size();          List eaList=new ArrayList();          for (int j=0; j < aSize; j++) {            Attribute attribute=(Attribute)attributes.get(j);            EncryptedAttribute encryptedAttribute=attribute.encrypt(encInfo.getWrappingKey(),encInfo.getDataEncAlgorithm(),encInfo.getDataEncStrength(),spEntityID);            if (encryptedAttribute == null) {              SAML2Utils.debug.error(classMethod + "failed to encrypt the Attribute.");              throw new SAML2Exception(SAML2Utils.bundle.getString("FailedToEncryptAttribute"));            }            eaList.add(encryptedAttribute);          }          attributeStatement.setEncryptedAttribute(eaList);          attributeStatement.setAttribute(new ArrayList());          stmts.add(attributeStatement);        }        assertion.setAttributeStatements(stmts);        if (SAML2Utils.debug.messageEnabled()) {          SAML2Utils.debug.message(classMethod + "Attribute encrypted.");        }      }    }    if (signAssertion) {      signAssertion(realm,idpEntityID,assertion);    }    List assertionList=new ArrayList();    assertionList.add(assertion);    res.setAssertion(assertionList);  }}  }
class C{  public DividerItemDecoration(Context context,int resId){  mDivider=ContextCompat.getDrawable(context,resId);}  }
class C{  private int dowait(boolean timed,long nanos) throws InterruptedException, BrokenBarrierException, TimeoutException {  final ReentrantLock lock=this.lock;  lock.lock();  try {    final Generation g=generation;    if (g.broken)     throw new BrokenBarrierException();    if (Thread.interrupted()) {      breakBarrier();      throw new InterruptedException();    }    int index=--count;    if (index == 0) {      boolean ranAction=false;      try {        final Runnable command=barrierCommand;        if (command != null)         command.run();        ranAction=true;        nextGeneration();        return 0;      }  finally {        if (!ranAction)         breakBarrier();      }    }    for (; ; ) {      try {        if (!timed)         trip.await(); else         if (nanos > 0L)         nanos=trip.awaitNanos(nanos);      } catch (      InterruptedException ie) {        if (g == generation && !g.broken) {          breakBarrier();          throw ie;        } else {          Thread.currentThread().interrupt();        }      }      if (g.broken)       throw new BrokenBarrierException();      if (g != generation)       return index;      if (timed && nanos <= 0L) {        breakBarrier();        throw new TimeoutException();      }    }  }  finally {    lock.unlock();  }}  }
class C{  public Mp4DiscNoField(int discNo){  super(Mp4FieldKey.DISCNUMBER.getFieldName(),String.valueOf(discNo));  numbers=new ArrayList<Short>();  numbers.add(new Short("0"));  numbers.add((short)discNo);  numbers.add(new Short("0"));}  }
class C{  @Override public <T>AbsTask<T> start(AbsTask<T> task){  TaskProxy<T> proxy=null;  if (task instanceof TaskProxy) {    proxy=(TaskProxy<T>)task;  } else {    proxy=new TaskProxy<T>(task);  }  try {    proxy.doBackground();  } catch (  Throwable ex) {    LogUtil.e(ex.getMessage(),ex);  }  return proxy;}  }
class C{  static String findEntryUUID(DN dn){  if (dn == null) {    return null;  }  final SearchRequest request=newSearchRequest(dn,SearchScope.BASE_OBJECT).addAttribute(ENTRYUUID_ATTRIBUTE_NAME);  final InternalSearchOperation search=getRootConnection().processSearch(request);  final SearchResultEntry resultEntry=getFirstResult(search);  if (resultEntry != null) {    return getEntryUUID(resultEntry);  }  return null;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof NumberOfInterveningJobs);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    serverTransaction=sipProvider.getNewServerTransaction(request);    dialog=(DialogExt)sipProvider.getNewDialog(serverTransaction);    dialog.disableSequenceNumberValidation();  } catch (  Exception e) {    e.printStackTrace();    return;  }  try {    Response okResponse=messageFactory.createResponse(Response.OK,request);    FromHeader from=(FromHeader)okResponse.getHeader(FromHeader.NAME);    from.removeParameter("tag");    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    FromHeader fromHeader=(FromHeader)okResponse.getHeader(FromHeader.NAME);    fromHeader.setTag("12345");    okResponse.addHeader(contactHeader);    serverTransaction.sendResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public static void addDefaultProfile(SpringApplication app){  Map<String,Object> defProperties=new HashMap<>();  defProperties.put(SPRING_PROFILE_DEFAULT,Constants.SPRING_PROFILE_DEVELOPMENT);  app.setDefaultProperties(defProperties);}  }
class C{  public void addAttribute(String attrName,Set values) throws SMSException, SSOException {  validatePluginConfig();  Map attributes=getAttributes();  Set newVals=values;  Set oldVals=(Set)attributes.get(attrName);  if (oldVals != null) {    newVals=new HashSet();    newVals.addAll(oldVals);    newVals.addAll(values);  }  ps.validateAttrValues(token,attrName,newVals,true,pc.getOrganizationName());  SMSEntry e=pc.getSMSEntry();  SMSUtils.addAttribute(e,attrName,values,ps.getSearchableAttributeNames());  saveSMSEntry(e);}  }
class C{  public static long reverse(long v){  v=((v >>> 1) & 0x5555555555555555L) | ((v & 0x5555555555555555L) << 1);  v=((v >>> 2) & 0x3333333333333333L) | ((v & 0x3333333333333333L) << 2);  v=((v >>> 4) & 0x0F0F0F0F0F0F0F0FL) | ((v & 0x0F0F0F0F0F0F0F0FL) << 4);  v=((v >>> 8) & 0x00FF00FF00FF00FFL) | ((v & 0x00FF00FF00FF00FFL) << 8);  v=((v >>> 16) & 0x0000FFFF0000FFFFL) | ((v & 0x0000FFFF0000FFFFL) << 16);  return ((v >>> 32)) | ((v) << 32);}  }
class C{  public void stepInto(){  if (!isRunning())   return;  Line previousLine=currentLine;  do {    setCurrentEventID(trace.getNextEventIDInThread(currentEventID));  } while (isRunning() && currentLine != null && currentLine == previousLine && trace.getKind(currentEventID) != EventKind.START_METHOD);}  }
class C{  protected Map<String,Set<String>> processFileAttributes(Map<String,Set<String>> attrs) throws CLIException {  Map<String,Set<String>> result=attrs;  if (attrs != null) {    result=new LinkedHashMap<>(attrs.size());    for (    Map.Entry<String,Set<String>> attr : attrs.entrySet()) {      String key=attr.getKey();      Set<String> values=attr.getValue();      if (key != null && key.endsWith(FILE_REFERENCE_SUFFIX) && !FILE_REFERENCE_SUFFIX_EXEMPT.contains(key)) {        key=key.substring(0,key.length() - FILE_REFERENCE_SUFFIX.length());        if (attrs.containsKey(key)) {          throw new CLIException("Cannot specify both normal and " + FILE_REFERENCE_SUFFIX + " attribute: "+ key,ExitCodes.DUPLICATED_OPTION);        }        if (values != null) {          Set<String> newValues=new LinkedHashSet<String>(values.size());          for (          String value : values) {            newValues.add(CLIUtil.getFileContent(getCommandManager(),value));          }          values=newValues;        }      }      result.put(key,values);    }  }  return result;}  }
class C{  public static boolean atleast(String name,int majorVersion,int minorVersion){  return osName.equalsIgnoreCase(name) && (osMajorVersion >= majorVersion) && (osMinorVersion >= minorVersion);}  }
class C{  @Override public void onLoaderReset(Loader<Cursor> loader){  mAdapter.swapCursor(null);}  }
class C{  public static MatteBorder createMatteBorder(int top,int left,int bottom,int right,Color color){  return new MatteBorder(top,left,bottom,right,color);}  }
class C{  public ScriptException(String message,String fileName,int lineNumber){  super(message);  this.fileName=fileName;  this.lineNumber=lineNumber;  this.columnNumber=-1;}  }
class C{  public static Keymap addKeymap(String nm,Keymap parent){  Keymap map=new DefaultKeymap(nm,parent);  if (nm != null) {    getKeymapTable().put(nm,map);  }  return map;}  }
class C{  protected void removeRegistrationMapInfo(String registrationId){  FSUtils.debug.message("Entered FSRegistrationManager::removeRegistrationMapInfo");  if (registrationRequestMap.containsKey(registrationId)) {    registrationRequestMap.remove(registrationId);  }}  }
class C{  protected PdfString(byte[] content,boolean hexWriting){  super(content);  this.hexWriting=hexWriting;}  }
class C{  public void initTransaction() throws SQLException {  this.currentConection.setAutoCommit(false);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  backTrail();  AuthPropertiesViewBean vb=(AuthPropertiesViewBean)getViewBean(AuthPropertiesViewBean.class);  removePageSessionAttribute(ENTRY_LIST);  removePageSessionAttribute(ReorderAuthChainsViewBean.PG_SESSION_TRACKING);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  private Object invokeMethod(ApplicationContext appContext,final String methodName,Object[] params) throws Throwable {  try {    Method method=objectCache.get(methodName);    if (method == null) {      method=appContext.getClass().getMethod(methodName,classCache.get(methodName));      objectCache.put(methodName,method);    }    return executeMethod(method,appContext,params);  } catch (  Exception ex) {    handleException(ex);    return null;  } finally {    params=null;  }}  }
class C{  DefaultIndex(TreeName name,State state,int indexEntryLimit,EntryContainer entryContainer,CryptoSuite cryptoSuite) throws StorageRuntimeException {  super(name);  this.indexEntryLimit=indexEntryLimit;  this.state=state;  this.entryContainer=entryContainer;  this.cryptoSuite=cryptoSuite;}  }
class C{  public void testNextCleanHashComments() throws JSONException {  JSONTokener tokener=new JSONTokener("A # B */ /* C */ \nD #");  assertEquals('A',tokener.nextClean());  assertEquals('D',tokener.nextClean());  assertEquals('\0',tokener.nextClean());}  }
class C{  public BindOperation processSimpleBind(ByteString rawBindDN,ByteString password,List<Control> controls){  BindOperationBasis bindOperation=new BindOperationBasis(this,nextOperationID(),nextMessageID(),controls,PROTOCOL_VERSION,rawBindDN,password);  bindOperation.setInternalOperation(true);  bindOperation.run();  return bindOperation;}  }
class C{  public IvParameterSpec(byte[] iv,int offset,int byteCount){  if ((iv == null) || (iv.length - offset < byteCount)) {    throw new IllegalArgumentException();  }  Arrays.checkOffsetAndCount(iv.length,offset,byteCount);  this.iv=new byte[byteCount];  System.arraycopy(iv,offset,this.iv,0,byteCount);}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.InquiryElementType createInquiryElementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.InquiryElementTypeImpl();}  }
class C{  @SuppressWarnings("unchecked") public void writeBinaryStream(java.io.InputStream x) throws SQLException {  BufferedReader bufReader=new BufferedReader(new InputStreamReader(x));  try {    int i;    while ((i=bufReader.read()) != -1) {      char ch=(char)i;      StringBuffer strBuf=new StringBuffer();      strBuf.append(ch);      String str=new String(strBuf);      String strLine=bufReader.readLine();      writeString(str.concat(strLine));    }  } catch (  IOException ioe) {    throw new SQLException(ioe.getMessage());  }}  }
class C{  public X509CRLImpl(byte[] encoding) throws IOException {  this((CertificateList)CertificateList.ASN1.decode(encoding));}  }
class C{  public boolean isAppCommitted(){  return (this.appCommitted || isCommitted() || isSuspended()|| ((getContentLength() > 0) && (getContentWritten() >= getContentLength())));}  }
class C{  public void paintButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void build() throws IOException {  List<Arch> archs=this.config.getArchs();  if (archs.isEmpty()) {    archs=config.getTarget().getDefaultArchs();  }  if (archs.isEmpty()) {    throw new IllegalArgumentException("No archs specified in config");  }  if (archs.size() == 1 && this.config.getArch().equals(archs.get(0))) {    compile();  } else {    Map<Arch,File> slices=new TreeMap<>();    for (    Arch arch : archs) {      this.config.getLogger().info("Building %s slice",arch);      Config sliceConfig=this.config.builder().arch(arch).tmpDir(new File(this.config.getTmpDir(),arch.toString())).build();      new AppCompiler(sliceConfig).compile();      slices.put(arch,new File(sliceConfig.getTmpDir(),sliceConfig.getExecutableName()));      for (      Path path : sliceConfig.getResourcesPaths()) {        if (!this.config.getResourcesPaths().contains(path)) {          this.config.addResourcesPath(path);        }      }    }    this.config.getTarget().buildFat(slices);  }}  }
class C{  public GapContent(){  this(10);}  }
class C{  public static GenericIntermediateResponse newGenericIntermediateResponse(){  return new GenericIntermediateResponseImpl();}  }
class C{  public AMPostCallBackException(String msg,String errorCode,Object[] args,UMSException ue){  super(msg,errorCode,args,ue);}  }
class C{  protected void handleIOException(IOException e) throws IOException {  throw e;}  }
class C{  public java.lang.String signXML(java.lang.String XML,java.lang.String certAlias,java.lang.String algorithm) throws XMLSignatureException {  return sp.signXML(XML,certAlias,algorithm);}  }
class C{  @Override public void flushBuffer() throws IOException {  this.response.flushBuffer();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.WTLSType createWTLSType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.WTLSTypeImpl();}  }
class C{  public void deactivate() throws AMException, SSOException {  setStringAttribute(statusAN,"inactive");  store();}  }
class C{  public static void main(String[] args){  int exitCode=mainSearch(args,true,System.out,System.err);  if (exitCode != 0) {    System.exit(filterExitCode(exitCode));  }}  }
class C{  private void readObject(java.io.ObjectInputStream ois) throws IOException, ClassNotFoundException {  CertificateFactory cf;  Hashtable<String,CertificateFactory> cfs=null;  ois.defaultReadObject();  if (type == null)   throw new NullPointerException("type can't be null");  int size=ois.readInt();  if (size > 0) {    cfs=new Hashtable<String,CertificateFactory>(3);    this.certs=new java.security.cert.Certificate[size];  }  for (int i=0; i < size; i++) {    String certType=ois.readUTF();    if (cfs.containsKey(certType)) {      cf=cfs.get(certType);    } else {      try {        cf=CertificateFactory.getInstance(certType);      } catch (      CertificateException ce) {        throw new ClassNotFoundException("Certificate factory for " + certType + " not found");      }      cfs.put(certType,cf);    }    byte[] encoded=null;    try {      encoded=new byte[ois.readInt()];    } catch (    OutOfMemoryError oome) {      throw new IOException("Certificate too big");    }    ois.readFully(encoded);    ByteArrayInputStream bais=new ByteArrayInputStream(encoded);    try {      this.certs[i]=cf.generateCertificate(bais);    } catch (    CertificateException ce) {      throw new IOException(ce.getMessage());    }    bais.close();  }}  }
class C{  @Override public void removeParameter(String name){  parameters.remove(name);  fireContainerEvent("removeParameter",name);}  }
class C{  public void updateUI(){  super.updateUI();  setForeground(null);  setBackground(null);}  }
class C{  public SupportedHeader createSupportedHeader(String optionTag) throws ParseException {  if (optionTag == null)   throw new NullPointerException("null optionTag arg");  Supported supported=new Supported();  supported.setOptionTag(optionTag);  return supported;}  }
class C{  protected void removeDomain(SSOToken token,String orgDN) throws AMException {  try {    PersistentObject po=UMSObject.getObject(token,new Guid(orgDN));    if (!(po instanceof com.iplanet.ums.Organization)) {      if (debug.messageEnabled()) {        debug.message("DCTree.removeDomain-> " + orgDN + " is not an organization");      }      return;    }    String domainName=getCanonicalDomain(token,orgDN);    if (debug.messageEnabled()) {      debug.message("DCTree.removeDomain-> " + "Obtained canon domain " + domainName);    }    if ((domainName != null) && (domainName.length() > 0)) {      DomainComponentTree dcTree=new DomainComponentTree(token,new Guid(DCTREE_START_DN));      if (debug.messageEnabled()) {        debug.message("DCTree.removeDomain: removing domain: " + domainName);      }      dcTree.removeDomain(domainName);    } else {      if (debug.warningEnabled()) {        debug.warning("DCTree.removeDomain(): " + " unable to get domain for " + orgDN);      }    }  } catch (  UMSException ue) {    if (debug.warningEnabled()) {      debug.warning("DCTree.removeDomain(): ",ue);    }  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.AttributedString createAttributedString() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.AttributedStringImpl();}  }
class C{  protected void fireCDATAEvent(char[] chars,int start,int length) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_CDATA,chars,start,length);  }}  }
class C{  private void reloadIfNeeded() throws DirectoryException {  if (DirectoryServer.getGroupManager().hasInstancesChanged(nestedGroupRefreshToken)) {    lock.writeLock().lock();    try {      Group<?> thisGroup=DirectoryServer.getGroupManager().getGroupInstance(groupEntryDN);      if (thisGroup == null) {        throw new DirectoryException(ResultCode.NO_SUCH_ATTRIBUTE,ERR_STATICGROUP_GROUP_INSTANCE_INVALID.get(groupEntryDN));      } else       if (thisGroup != this) {        LinkedHashSet<CompactDn> newMemberDNs=new LinkedHashSet<>();        MemberList memberList=thisGroup.getMembers();        while (memberList.hasMoreMembers()) {          try {            newMemberDNs.add(new CompactDn(memberList.nextMemberDN()));          } catch (          MembershipException ex) {          }        }        memberDNs=newMemberDNs;      }      nestedGroups.clear();      for (      CompactDn compactDn : memberDNs) {        DN dn=compactDn.toDn(serverContext);        Group<?> group=DirectoryServer.getGroupManager().getGroupInstance(dn);        if (group != null) {          nestedGroups.add(group.getGroupDN());        }      }      nestedGroupRefreshToken=DirectoryServer.getGroupManager().refreshToken();    }  finally {      lock.writeLock().unlock();    }  }}  }
class C{  void initFromCameraParameters(OpenCamera camera){  Camera.Parameters parameters=camera.getCamera().getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  int displayRotation=display.getRotation();  int cwRotationFromNaturalToDisplay;switch (displayRotation) {case Surface.ROTATION_0:    cwRotationFromNaturalToDisplay=0;  break;case Surface.ROTATION_90:cwRotationFromNaturalToDisplay=90;break;case Surface.ROTATION_180:cwRotationFromNaturalToDisplay=180;break;case Surface.ROTATION_270:cwRotationFromNaturalToDisplay=270;break;default :if (displayRotation % 90 == 0) {cwRotationFromNaturalToDisplay=(360 + displayRotation) % 360;} else {throw new IllegalArgumentException("Bad rotation: " + displayRotation);}}Log.i(TAG,"Display at: " + cwRotationFromNaturalToDisplay);int cwRotationFromNaturalToCamera=camera.getOrientation();Log.i(TAG,"Camera at: " + cwRotationFromNaturalToCamera);if (camera.getFacing() == CameraFacing.FRONT) {cwRotationFromNaturalToCamera=(360 - cwRotationFromNaturalToCamera) % 360;Log.i(TAG,"Front camera overriden to: " + cwRotationFromNaturalToCamera);}cwRotationFromDisplayToCamera=(360 + cwRotationFromNaturalToCamera - cwRotationFromNaturalToDisplay) % 360;Log.i(TAG,"Final display orientation: " + cwRotationFromDisplayToCamera);if (camera.getFacing() == CameraFacing.FRONT) {Log.i(TAG,"Compensating rotation for front camera");cwNeededRotation=(360 - cwRotationFromDisplayToCamera) % 360;} else {cwNeededRotation=cwRotationFromDisplayToCamera;}Log.i(TAG,"Clockwise rotation from display to camera: " + cwNeededRotation);Point theScreenResolution=new Point();display.getSize(theScreenResolution);screenResolution=theScreenResolution;Log.i(TAG,"Screen resolution in current orientation: " + screenResolution);cameraResolution=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);Log.i(TAG,"Camera resolution: " + cameraResolution);bestPreviewSize=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);Log.i(TAG,"Best available preview size: " + bestPreviewSize);boolean isScreenPortrait=screenResolution.x < screenResolution.y;boolean isPreviewSizePortrait=bestPreviewSize.x < bestPreviewSize.y;if (isScreenPortrait == isPreviewSizePortrait) {previewSizeOnScreen=bestPreviewSize;} else {previewSizeOnScreen=new Point(bestPreviewSize.y,bestPreviewSize.x);}Log.i(TAG,"Preview size on screen: " + previewSizeOnScreen);}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  private T compareBeforeBreakpoint(String resource,String target,String breakPoint){  int firstResourceBreakPoint=resource.indexOf(breakPoint);  int firstTargetBreakPoint=target.indexOf(breakPoint);  if (firstResourceBreakPoint == -1 || firstTargetBreakPoint == -1) {    return super.compare(resource,target,true);  }  String resourceSub=resource.substring(0,firstResourceBreakPoint);  String targetSub=target.substring(0,firstTargetBreakPoint);  if (targetSub.endsWith(wildcard)) {    return super.compare(resourceSub,targetSub,true);  } else {    return compareSplit(resourceSub,targetSub,breakPoint);  }}  }
class C{  public Cursor fetch(Long eventID){  if (eventID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_EVENTID + "=" + eventID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  @Override public Rectangle placeBarcode(PdfCanvas canvas,Color barColor,Color textColor){  String fullCode=code;  float fontX=0;  if (font != null) {    if (generateChecksum && checksumText)     fullCode+=getChecksum(fullCode);    fontX=font.getWidth(fullCode=altText != null ? altText : fullCode,size);  }  String bCode=keepNumbers(code);  if (generateChecksum)   bCode+=getChecksum(bCode);  int len=bCode.length();  float fullWidth=len * (3 * x + 2 * x * n) + (6 + n) * x;  float barStartX=0;  float textStartX=0;switch (textAlignment) {case ALIGN_LEFT:    break;case ALIGN_RIGHT:  if (fontX > fullWidth) {    barStartX=fontX - fullWidth;  } else {    textStartX=fullWidth - fontX;  }break;default :if (fontX > fullWidth) {barStartX=(fontX - fullWidth) / 2;} else {textStartX=(fullWidth - fontX) / 2;}break;}float barStartY=0;float textStartY=0;if (font != null) {if (baseline <= 0) {textStartY=barHeight - baseline;} else {textStartY=-getDescender();barStartY=textStartY + baseline;}}byte[] bars=getBarsInter25(bCode);boolean print=true;if (barColor != null) canvas.setFillColor(barColor);for (int k=0; k < bars.length; ++k) {float w=(bars[k] == 0 ? x : x * n);if (print) {canvas.rectangle(barStartX,barStartY,w - inkSpreading,barHeight);}print=!print;barStartX+=w;}canvas.fill();if (font != null) {if (textColor != null) {canvas.setFillColor(textColor);}canvas.beginText();canvas.setFontAndSize(font,size);canvas.setTextMatrix(textStartX,textStartY);canvas.showText(fullCode);canvas.endText();}return getBarcodeSize();}  }
class C{  boolean isLiteral(Map attributes){  return ((attributes == null) || attributes.size() == 0);}  }
class C{  @SuppressWarnings("unused") public static double parseDouble(byte[] bytes){  return parseDouble(bytes,0,bytes.length);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode09.class,args);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  realm=getStringOptionValue(FedCLIConstants.ARGUMENT_REALM,"/");  entityID=getStringOptionValue(FedCLIConstants.ARGUMENT_ENTITY_ID);  spSigningAliases=rc.getOption(FedCLIConstants.ARGUMENT_SP_S_CERT_ALIAS);  idpSigningAliases=rc.getOption(FedCLIConstants.ARGUMENT_IDP_S_CERT_ALIAS);  spEncryptionAliases=rc.getOption(FedCLIConstants.ARGUMENT_SP_E_CERT_ALIAS);  idpEncryptionAliases=rc.getOption(FedCLIConstants.ARGUMENT_IDP_E_CERT_ALIAS);  validateOptions();  String webURL=getCommandManager().getWebEnabledURL();  isWebBase=(webURL != null) && (webURL.trim().length() > 0);  String spec=FederationManager.getIDFFSubCommandSpecification(rc);  String[] params={realm,entityID,Objects.toString(spSigningAliases),Objects.toString(idpSigningAliases),Objects.toString(spEncryptionAliases),Objects.toString(idpEncryptionAliases),spec};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UPDATE_ENTITY_KEYINFO",params);  try {    if (spec.equals(FederationManager.DEFAULT_SPECIFICATION)) {      handleSAML2Request(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_UPDATE_ENTITY_KEYINFO",params);    } else     if (spec.equals(FedCLIConstants.IDFF_SPECIFICATION)) {      handleIDFFRequest(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_UPDATE_ENTITY_KEYINFO",params);    } else     if (spec.equals(FedCLIConstants.WSFED_SPECIFICATION)) {      handleWSFedRequest(rc);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_UPDATE_ENTITY_KEYINFO",params);    } else {      throw new CLIException(getResourceString("unsupported-specification"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }  } catch (  CLIException e) {    String[] args={realm,entityID,Objects.toString(spSigningAliases),Objects.toString(idpSigningAliases),Objects.toString(spEncryptionAliases),Objects.toString(idpEncryptionAliases),spec,e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_UPDATE_ENTITY_KEYINFO",args);    throw e;  }}  }
class C{  @SuppressWarnings("unchecked") final E itemAt(int i){  return (E)items[i];}  }
class C{  public StoreFileMover(String basename,String filename,String encoding){  setBasename(basename);  setEncoding(encoding);  setFilename(filename);  init();}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public static long decodeResponseValue(ByteString responseValue) throws DecodeException {  ASN1Reader reader=ASN1.getReader(responseValue);  try {    return reader.readInteger();  } catch (  Exception e) {    return 0;  }}  }
class C{  private SchemaFactory loadFromServicesFile(String schemaLanguage,String resourceName,InputStream in){  if (debug)   debugPrintln("Reading " + resourceName);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(in,"UTF-8"),DEFAULT_LINE_LENGTH);  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(in),DEFAULT_LINE_LENGTH);  }  String factoryClassName=null;  SchemaFactory resultFactory=null;  while (true) {    try {      factoryClassName=rd.readLine();    } catch (    IOException x) {      break;    }    if (factoryClassName != null) {      int hashIndex=factoryClassName.indexOf('#');      if (hashIndex != -1) {        factoryClassName=factoryClassName.substring(0,hashIndex);      }      factoryClassName=factoryClassName.trim();      if (factoryClassName.length() == 0) {        continue;      }      try {        SchemaFactory foundFactory=(SchemaFactory)createInstance(factoryClassName);        if (foundFactory.isSchemaLanguageSupported(schemaLanguage)) {          resultFactory=foundFactory;          break;        }      } catch (      Exception ignored) {      }    } else {      break;    }  }  IoUtils.closeQuietly(rd);  return resultFactory;}  }
class C{  private String randomHash(final String folder) throws Exception {  try {    MessageDigest algorithm=MessageDigest.getInstance("MD5");    algorithm.reset();    try {      algorithm.update(folder.getBytes("UTF8"));    } catch (    UnsupportedEncodingException e) {      if (configuration.isDebugMode()) {        throw e;      }      algorithm.update(folder.getBytes());    }    byte[] messageDigest=algorithm.digest();    StringBuffer hexString=new StringBuffer();    for (int i=0; i < messageDigest.length; i++) {      hexString.append(Integer.toHexString(HASH & messageDigest[i]));    }    return hexString.toString();  } catch (  NoSuchAlgorithmException e) {    if (configuration.isDebugMode()) {      throw e;    }    return "";  }}  }
class C{  void heapify(){  for (int i=size / 2; i >= 1; i--)   fixDown(i);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node element;  Element ownerElement;  Element parentElement;  NodeList elementList;  String ownerElementName;  Attr attr;  Node removedChild;  NamedNodeMap nodeMap;  String nullNS=null;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=elementList.item(1);  parentElement=(Element)element.getParentNode();  nodeMap=element.getAttributes();  removedChild=parentElement.removeChild(element);  attr=(Attr)nodeMap.getNamedItemNS(nullNS,"street");  ownerElement=attr.getOwnerElement();  ownerElementName=ownerElement.getNodeName();  assertEquals("attrgetownerelement05","address",ownerElementName);}  }
class C{  public PdfFormXObject createFormXObject(Color foreground,float moduleWidth,float moduleHeight,PdfDocument document){  PdfFormXObject xObject=new PdfFormXObject((Rectangle)null);  Rectangle rect=placeBarcode(new PdfCanvas(xObject,document),foreground,moduleWidth,moduleHeight);  xObject.setBBox(new PdfArray(rect));  return xObject;}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    Log.d(TAG,"Memory cache cleared");  }}  }
class C{  byte[] readFromSecretStore(String filename,String dataType,AMPassword password) throws Exception {  byte[] cryptoData=null;  File file=new File(filename);  FileInputStream fis=new FileInputStream(file);  KeyStore store=KeyStore.getInstance("jceks");  store.load(fis,password.getChars());  fis.close();  KeyStore.ProtectionParameter params=new KeyStore.PasswordProtection(password.getChars());  KeyStore.SecretKeyEntry keyentry=(KeyStore.SecretKeyEntry)store.getEntry(dataType,params);  if (keyentry != null) {    SecretKey sdata=keyentry.getSecretKey();    cryptoData=(byte[])sdata.getEncoded();  }  return cryptoData;}  }
class C{  public final int size(){  return m_firstFree;}  }
class C{  public void _testHasAttributeNS1() throws Throwable {  Document doc;  Element element;  boolean state;  NodeList elementList;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagNameNS("*","employee");  element=(Element)elementList.item(0);  state=element.hasAttributeNS("http://www.w3.org/2000/xmlns/","xmlns");  assertTrue("elementhasattributens01",state);}  }
class C{  public void paintScrollBarTrackBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  public Location toLocation(World world){  return new Location(world,x,y,z);}  }
class C{  @Override public List<Foo> findByUuid_C(String uuid,long companyId){  return findByUuid_C(uuid,companyId,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public NewEncryptedID createNewEncryptedID(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NEW_ENCRYPTEDID,value);  if (obj == null) {    return new NewEncryptedIDImpl(value);  } else {    return (NewEncryptedID)obj;  }}  }
class C{  public AssertionIDRef createAssertionIDRef(Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION_ID_REF,elem);  if (obj == null) {    return new AssertionIDRefImpl(elem);  } else {    return (AssertionIDRef)obj;  }}  }
class C{  public PdfCanvas eoFill(){  document.checkIsoConformance(currentGs,IsoKey.DRAWMODE_FILL,resources);  contentStream.getOutputStream().writeBytes(fStar);  return this;}  }
class C{  public boolean activateSession(Subject subject) throws AuthException {  try {    if (DEBUG.messageEnabled()) {      DEBUG.message("activateSession - Token is : " + token);      DEBUG.message("activateSession - userDN is : " + userDN);    }    if (indexType != null || indexName != null) {      setSuccessLoginURL(indexType,indexName);    } else {      setSuccessLoginURL(AuthContext.IndexType.SERVICE,getAuthConfigName(indexType,indexName));    }    InternalSession internalSession=getReferencedSession();    final boolean isSessionActivated=getSessionActivator().activateSession(this,AuthD.getSessionService(),internalSession,subject);    if (isSessionActivated) {      this.activatedSessionTrackingId=internalSession.getProperty(Constants.AM_CTX_ID);    }    if (sessionUpgrade && !forceAuth && isSessionActivated&& oldStatelessSession == null) {      invokeSessionUpgradeHandlers();    }    return isSessionActivated;  } catch (  AuthException ae) {    DEBUG.error("Error setting session properties: ",ae);    throw ae;  }catch (  Exception e) {    DEBUG.error("Error activating session: ",e);    throw new AuthException("sessionActivationFailed",null);  }}  }
class C{  @SuppressWarnings("unchecked") public static <A>ImmutableList<A> empty(){  return (ImmutableList<A>)EMPTY_LIST;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, java.io.NotActiveException, ClassNotFoundException {  thisX500Name=new X500Name((byte[])s.readObject());}  }
class C{  public synchronized void removeItemListener(ItemListener l){  if (l == null) {    return;  }  itemListener=AWTEventMulticaster.remove(itemListener,l);}  }
class C{  public JasperException(Throwable exception){  super(exception);}  }
class C{  public RuntimeOperationsException(java.lang.RuntimeException e){  super();  runtimeException=e;}  }
class C{  public void paintTableBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setNamedItemNS04.class,args);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  private void previousClicked(){  WizardStep cStep=getCurrentStep();  application.previousClicked(cStep,this);  setCurrentStep(application.getPreviousWizardStep(cStep));}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  PWResetSuccessModel model=(PWResetSuccessModel)getModel();  setDisplayFieldValue(CC_TITLE,model.getTitleString());  setDisplayFieldValue(RESET_MESSAGE,resetMsg);}  }
class C{  private int computeWeek(int offset,int day){  return ((7 + offset + (day - 1)) / 7);}  }
class C{  @Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException {  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message(DEBUG_SUCCESS_MSG + ClientUtils.getClientIPAddress(request));  }  FSUtils.checkHTTPRequestLength(request);  super.doPost(request,response);}  }
class C{  public static boolean isAlreadyApproved(){  return new File(getInstanceLegalDirectory(),ACCEPTED_LICENSE_FILE_NAME).exists();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  NodeList emList;  Node employeeNode;  NodeList childList;  Node oldChild;  Node child;  String childName;  int length;  Node removedChild;  String removedName;  int nodeType;  java.util.List expected=new java.util.ArrayList();  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("acronym");  java.util.List actual=new java.util.ArrayList();  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  emList=((Element)employeeNode).getElementsByTagName("em");  oldChild=emList.item(0);  removedChild=employeeNode.removeChild(oldChild);  removedName=removedChild.getNodeName();  assertEqualsAutoCase("element","removedName","em",removedName);  for (int indexN10098=0; indexN10098 < childList.getLength(); indexN10098++) {    child=(Node)childList.item(indexN10098);    nodeType=(int)child.getNodeType();    childName=child.getNodeName();    if (equals(1,nodeType)) {      actual.add(childName);    } else {      assertEquals("textNodeType",3,nodeType);      assertEquals("textNodeName","#text",childName);    }  }  assertEqualsAutoCase("element","childNames",expected,actual);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.FederationTerminationNotificationElement createFederationTerminationNotificationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.FederationTerminationNotificationElementImpl();}  }
class C{  public boolean isLeadingEdge(){  return isLeadingEdge;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RequestPseudonymElement createRequestPseudonymElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RequestPseudonymElementImpl();}  }
class C{  protected void destroyMBeans(){  if (log.isDebugEnabled()) {    log.debug("Destroying MBeans for Global JNDI Resources");  }}  }
class C{  public AMRecord(String svc,String op,String pKey,long eDate,String secKey,int st,String ax,String stringBlob){  this.setService(svc);  this.setOperation(op);  this.setPrimaryKey(pKey);  this.setExpDate(eDate);  this.setSecondaryKey(secKey);  this.setState(st);  this.setAuxData(ax);  this.setData(stringBlob);}  }
class C{  static MethodHandle makePairwiseConvert(MethodHandle target,MethodType srcType,boolean strict,boolean monobox){  MethodType dstType=target.type();  if (srcType == dstType)   return target;  return makePairwiseConvertByEditor(target,srcType,strict,monobox);}  }
class C{  public void mouseWheelMoved(MouseWheelEvent e){  ((MouseWheelListener)a).mouseWheelMoved(e);  ((MouseWheelListener)b).mouseWheelMoved(e);}  }
class C{  public void addEditor(){  removeEditor();  editor=comboBox.getEditor().getEditorComponent();  if (editor != null) {    configureEditor();    comboBox.add(editor);    if (comboBox.isFocusOwner()) {      editor.requestFocusInWindow();    }  }}  }
class C{  public ByteBufferOutputStream append(char c){  return append_i(c);}  }
class C{  private void publishUpdateMessagesInOTest(String testName,boolean checkLastCookie,UpdateMsg... messages) throws Exception {  publishUpdateMessages(testName,server1,checkLastCookie,messages);}  }
class C{  @Override public void addWelcomeFile(String name){synchronized (welcomeFilesLock) {    if (replaceWelcomeFiles) {      fireContainerEvent(CLEAR_WELCOME_FILES_EVENT,null);      welcomeFiles=new String[0];      setReplaceWelcomeFiles(false);    }    String results[]=new String[welcomeFiles.length + 1];    for (int i=0; i < welcomeFiles.length; i++)     results[i]=welcomeFiles[i];    results[welcomeFiles.length]=name;    welcomeFiles=results;  }  if (this.getState().equals(LifecycleState.STARTED))   fireContainerEvent(ADD_WELCOME_FILE_EVENT,name);}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  public PartialResultException(String explanation){  super(explanation);}  }
class C{  protected GenericObject next(ListIterator iterator){  try {    return (GenericObject)iterator.next();  } catch (  NoSuchElementException ex) {    return null;  }}  }
class C{  private int read() throws IOException {  if (reader != null)   return reader.read(); else   if (input != null)   return input.read(); else   throw new IllegalStateException();}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  int nr=in.read(b,off,len);  if (nr > 0)   monitor.setProgress(nread+=nr);  if (monitor.isCanceled()) {    InterruptedIOException exc=new InterruptedIOException("progress");    exc.bytesTransferred=nread;    throw exc;  }  return nr;}  }
class C{  public GenericKeyedObjectPool(final KeyedPooledObjectFactory<K,T> factory,final GenericKeyedObjectPoolConfig config){  super(config,ONAME_BASE,config.getJmxNamePrefix());  if (factory == null) {    jmxUnregister();    throw new IllegalArgumentException("factory may not be null");  }  this.factory=factory;  this.fairness=config.getFairness();  setConfig(config);  startEvictor(getTimeBetweenEvictionRunsMillis());}  }
class C{  public static void notifyExportEnded(Backend<?> backend,LDIFExportConfig config,boolean successful){  for (  ExportTaskListener listener : directoryServer.exportTaskListeners) {    try {      listener.processExportEnd(backend,config,successful);    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public XMLElement newElement(String name,String value) throws Exception {  return newElement(name,value,null);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size);  Object[] tab=table;  for (int i=0; i < tab.length; i+=2) {    Object key=tab[i];    if (key != null) {      s.writeObject(unmaskNull(key));      s.writeObject(tab[i + 1]);    }  }}  }
class C{  public NoInitialContextException(String explanation){  super(explanation);}  }
class C{  public StatusMessage createStatusMessage(Element elem) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS_MESSAGE,elem);  if (object == null) {    return new StatusMessageImpl(elem);  } else {    return (StatusMessage)object;  }}  }
class C{  public final int readInt() throws IOException {  readFully(scratch,0,SizeOf.INT);  return Memory.peekInt(scratch,0,ByteOrder.BIG_ENDIAN);}  }
class C{  public SIPRequest createCancelRequest() throws SipException {  if (!this.getMethod().equals(Request.INVITE))   throw new SipException("Attempt to create CANCEL for " + this.getMethod());  SIPRequest cancel=new SIPRequest();  cancel.setRequestLine((RequestLine)this.requestLine.clone());  cancel.setMethod(Request.CANCEL);  cancel.setHeader((Header)this.callIdHeader.clone());  cancel.setHeader((Header)this.toHeader.clone());  cancel.setHeader((Header)cSeqHeader.clone());  try {    cancel.getCSeq().setMethod(Request.CANCEL);  } catch (  ParseException e) {    e.printStackTrace();  }  cancel.setHeader((Header)this.fromHeader.clone());  cancel.addFirst((Header)this.getTopmostVia().clone());  cancel.setHeader((Header)this.maxForwardsHeader.clone());  if (this.getRouteHeaders() != null) {    cancel.setHeader((SIPHeaderList<?>)this.getRouteHeaders().clone());  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    cancel.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return cancel;}  }
class C{  public static int growSize(int currentSize){  return currentSize <= 4 ? 8 : currentSize * 2;}  }
class C{  public static String stringToBase64(String succinctID){  String encodedID=null;  try {    encodedID=Base64.encode(SAMLUtils.stringToByteArray(succinctID)).trim();  } catch (  Exception e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSUtils:stringToBase64: exception encode input:",e);    }  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("base 64 source id is :" + encodedID);  }  return encodedID;}  }
class C{  public boolean addArgument(final Argument arg){  if (arg != null) {    final Character newShort=arg.getShortIdentifier();    final String newLong=arg.getLongIdentifier();    for (final Iterator<Argument> it=this.args.iterator(); it.hasNext(); ) {      final Argument a=it.next();      if ((newShort != null && newShort.equals(a.getShortIdentifier())) || (newLong != null && newLong.equals(a.getLongIdentifier()))) {        it.remove();        break;      }    }    return this.args.add(arg);  }  return false;}  }
class C{  public int hashCode(){  return super.hashCode();}  }
class C{  public boolean is_StateSelectedItem(){  if (interactive_state == null)   return false;  return interactive_state instanceof StateSelectedItem;}  }
class C{  @SuppressWarnings("unchecked") public void writeNClob(NClob x) throws SQLException {  attribs.add(x);}  }
class C{  private TypeSpec.Builder generateTypeBuilder(){  String clzName=parser.getClzName();  clzName=clzName + SUFFIX;  return TypeSpec.classBuilder(clzName).addJavadoc("This class is generated by annotation @Params").addModifiers(Modifier.PUBLIC);}  }
class C{  public void testGenerateCRLs2() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCRL((InputStream)null);    fail("CRLException was not thrown");  } catch (  CRLException e) {  }}  }
class C{  private void recycleTopInvisibleViews(RecyclerView.Recycler recycler){  final int childCount=getChildCount();  for (int i=0; i <= childCount; i++) {    View child=getChildAt(i);    if (getDecoratedEnd(child) > topBorder) {      recycleChildren(recycler,0,i - 1);      firstAttachedItemPosition+=i;      updateSpanTopParameters();      return;    }    int heightNum=itemLayoutHeightCache.get(firstAttachedItemPosition + i);    for (int j=0; j < itemLayoutWidthCache.get(firstAttachedItemPosition + i); j++) {      int spanIndex=itemOccupiedStartSpan.get(firstAttachedItemPosition + i) + j;      spanTop[spanIndex]+=heightNum * sizePerSpan;    }  }}  }
class C{  public boolean removeLDIFFiles(){  return removeLDIFFilesArg.isPresent();}  }
class C{  private void createEntry(AddRequest request) throws ADSContextException {  try {    throwIfNotSuccess(getConnection().getConnection().add(request));  } catch (  LdapException e) {    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,e);  }}  }
class C{  public ShapeTileBox bounding_box(){  PlaPointInt lower_left=new PlaPointInt(Math.floor(v_x),Math.floor(v_y));  PlaPointInt upper_right=new PlaPointInt(Math.ceil(v_x),Math.ceil(v_y));  return new ShapeTileBox(lower_left,upper_right);}  }
class C{  public XObject eval(Node contextNode,String str,Node namespaceNode) throws TransformerException {  PrefixResolverDefault prefixResolver=new PrefixResolverDefault((namespaceNode.getNodeType() == Node.DOCUMENT_NODE) ? ((Document)namespaceNode).getDocumentElement() : namespaceNode);  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);}  }
class C{  MutableBigInteger hybridGCD(MutableBigInteger b){  MutableBigInteger a=this;  MutableBigInteger q=new MutableBigInteger();  while (b.intLen != 0) {    if (Math.abs(a.intLen - b.intLen) < 2)     return a.binaryGCD(b);    MutableBigInteger r=a.divide(b,q);    a=b;    b=r;  }  return a;}  }
class C{  public boolean isIndeterminate(){  return isIndeterminate;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  inviteReceived=true;  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.TRYING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    Response okResponse=messageFactory.createResponse(PRACK_CODE,request);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    this.toTag="4321";    toHeader.setTag(toTag);    this.inviteTid=st;    this.inviteRequest=request;    logger.info("sending reliable provisional response.");    RequireHeader requireHeader=headerFactory.createRequireHeader("100rel");    okResponse.addHeader(requireHeader);    dialog.sendReliableProvisionalResponse(okResponse);  } catch (  Exception ex) {    ex.printStackTrace();    TestHarness.fail(ex.getMessage());  }}  }
class C{  public static String toString(URI uri,Charset encoding) throws IOException {  return toString(uri.toURL(),Charsets.toCharset(encoding));}  }
class C{  public JsonValue delete(String location,String resourceId,Context context) throws ResourceException {  Reject.ifTrue(StringUtils.isEmpty(location),"The endpoint destination may not be null or empty.");  Reject.ifTrue(StringUtils.isEmpty(resourceId),"The resourceId to delete may not be null or empty.");  final Router rootRouter=router.get();  final DeleteRequest deleteRequest=Requests.newDeleteRequest(location,resourceId);  return rootRouter.handleDelete(context,deleteRequest).getOrThrowUninterruptibly().getContent();}  }
class C{  public Object peek(int n){  try {    return (stack.peek(n));  } catch (  EmptyStackException e) {    log.warn("Empty stack (returning null)");    return (null);  }}  }
class C{  protected void deployDirectory(ContextName cn,File dir){  long startTime=0;  if (log.isInfoEnabled()) {    startTime=System.currentTimeMillis();    log.info(sm.getString("hostConfig.deployDir",dir.getAbsolutePath()));  }  Context context=null;  File xml=new File(dir,Constants.ApplicationContextXml);  File xmlCopy=new File(host.getConfigBaseFile(),cn.getBaseName() + ".xml");  DeployedApplication deployedApp;  boolean copyThisXml=copyXML;  try {    if (deployXML && xml.exists()) {synchronized (digesterLock) {        try {          context=(Context)digester.parse(xml);        } catch (        Exception e) {          log.error(sm.getString("hostConfig.deployDescriptor.error",xml),e);          context=new FailedContext();        } finally {          digester.reset();          if (context == null) {            context=new FailedContext();          }        }      }      if (copyThisXml == false && context instanceof StandardContext) {        copyThisXml=((StandardContext)context).getCopyXML();      }      if (copyThisXml) {        Files.copy(xml.toPath(),xmlCopy.toPath());        context.setConfigFile(xmlCopy.toURI().toURL());      } else {        context.setConfigFile(xml.toURI().toURL());      }    } else     if (!deployXML && xml.exists()) {      log.error(sm.getString("hostConfig.deployDescriptor.blocked",cn.getPath(),xml,xmlCopy));      context=new FailedContext();    } else {      context=(Context)Class.forName(contextClass).newInstance();    }    Class<?> clazz=Class.forName(host.getConfigClass());    LifecycleListener listener=(LifecycleListener)clazz.newInstance();    context.addLifecycleListener(listener);    context.setName(cn.getName());    context.setPath(cn.getPath());    context.setWebappVersion(cn.getVersion());    context.setDocBase(cn.getBaseName());    host.addChild(context);  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log.error(sm.getString("hostConfig.deployDir.error",dir.getAbsolutePath()),t);  } finally {    deployedApp=new DeployedApplication(cn.getName(),xml.exists() && deployXML && copyThisXml);    deployedApp.redeployResources.put(dir.getAbsolutePath() + ".war",Long.valueOf(0));    deployedApp.redeployResources.put(dir.getAbsolutePath(),Long.valueOf(dir.lastModified()));    if (deployXML && xml.exists()) {      if (copyThisXml) {        deployedApp.redeployResources.put(xmlCopy.getAbsolutePath(),Long.valueOf(xmlCopy.lastModified()));      } else {        deployedApp.redeployResources.put(xml.getAbsolutePath(),Long.valueOf(xml.lastModified()));        deployedApp.redeployResources.put(xmlCopy.getAbsolutePath(),Long.valueOf(0));      }    } else {      deployedApp.redeployResources.put(xmlCopy.getAbsolutePath(),Long.valueOf(0));      if (!xml.exists()) {        deployedApp.redeployResources.put(xml.getAbsolutePath(),Long.valueOf(0));      }    }    addWatchedResources(deployedApp,dir.getAbsolutePath(),context);    addGlobalRedeployResources(deployedApp);  }  deployed.put(cn.getName(),deployedApp);  if (log.isInfoEnabled()) {    log.info(sm.getString("hostConfig.deployDir.finished",dir.getAbsolutePath(),Long.valueOf(System.currentTimeMillis() - startTime)));  }}  }
class C{  public boolean isHandshakeOk(){  return handshakeOk;}  }
class C{  public final void testToString() throws IOException {  byte[] encoding=getDerEncoding();  PolicyQualifierInfo i=new PolicyQualifierInfo(encoding);  assertNotNull(i.toString());}  }
class C{  public Mp4StcoBox(Mp4BoxHeader header,ByteBuffer originalDataBuffer,int adjustment){  this.header=header;  this.dataBuffer=originalDataBuffer.slice();  dataBuffer.position(dataBuffer.position() + VERSION_FLAG_LENGTH + OTHER_FLAG_LENGTH);  this.noOfOffSets=Utils.getIntBE(dataBuffer,dataBuffer.position(),(dataBuffer.position() + NO_OF_OFFSETS_LENGTH - 1));  dataBuffer.position(dataBuffer.position() + NO_OF_OFFSETS_LENGTH);  for (int i=0; i < noOfOffSets; i++) {    int offset=Utils.getIntBE(dataBuffer,dataBuffer.position(),(dataBuffer.position() + NO_OF_OFFSETS_LENGTH - 1));    offset=offset + adjustment;    dataBuffer.put(Utils.getSizeBEInt32(offset));  }}  }
class C{  public XObject execute(XPathContext xctxt,int context,DTM dtm,int expType) throws javax.xml.transform.TransformerException {  DTMIterator nl=m_functionExpr.asIterator(xctxt,context);  XNumber score=SCORE_NONE;  if (null != nl) {    int n;    while (DTM.NULL != (n=nl.nextNode())) {      score=(n == context) ? SCORE_OTHER : SCORE_NONE;      if (score == SCORE_OTHER) {        context=n;        break;      }    }    nl.detach();  }  return score;}  }
class C{  public static ArgumentException unknownProperty(AbstractManagedObjectDefinition<?,?> d,String name){  LocalizableMessage message=ERR_DSCFG_ERROR_PROPERTY_UNRECOGNIZED.get(name,d.getUserFriendlyPluralName());  return new ArgumentException(message);}  }
class C{  public int process(Callback[] callbacks,int state) throws AuthLoginException {  debug.message("MSISDN : in process ..");  if (errorMsgKey != null) {    debug.message("Error initalizing config");    throw new AuthLoginException(amAuthMSISDN,errorMsgKey,null);  }  HttpServletRequest req=getHttpServletRequest();  String gateway=null;  String msisdnNumber=null;  if (req != null) {    gateway=ClientUtils.getClientIPAddress(req);    msisdnNumber=getMSISDNNumberFromRequest(req);  } else {    debug.message("Null request calling sendCallback");    Map map=sendCallback();    if (map != null) {      msisdnNumber=(String)map.get("msisdnNumber");      gateway=(String)map.get("gateway");    }  }  if (isValidGateway(gateway) && (msisdnNumber != null)) {    MSISDNValidation msisdnValidation=new MSISDNValidation(options,debug,bundle,locale);    userTokenId=msisdnValidation.getUserId(msisdnNumber);    storeUsernamePasswd(userTokenId,null);  } else {    debug.error("Gateway is invalid OR msisdn number is null");    throw new AuthLoginException(amAuthMSISDN,"MSISDNValidateEx",null);  }  return ISAuthConstants.LOGIN_SUCCEED;}  }
class C{  private void parse_modifier() throws SyntaxException {  Element elem=(Element)current;  String modifier=elem.getContent();  if (modifierIsCompatible(modifier,modifiers)) {    modifiers.add(new Modifier(getModifierFromString(modifier),current.getLineCol()));  } else {    err.UnexpectedTokenException("valid modifier",modifier,elem.getLineCol());    err.debug("ignore this modifier");  }}  }
class C{  public AddOperationWrapper(AddOperation add){  super(add);}  }
class C{  private void writeObject(java.io.ObjectOutputStream out) throws IOException {  if (guard != null) {    guard.checkGuard(object);  }  out.defaultWriteObject();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrsetvaluenomodificationallowederr.class,args);}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  @Read(operationDescription=@Operation(description=KBA_RESOURCE + READ_DESCRIPTION,errors={@ApiError(code=INTERNAL_ERROR,description=KBA_RESOURCE + READ + ERROR_500_DESCRIPTION)})) public Promise<ResourceResponse,ResourceException> readInstance(Context context,ReadRequest readRequest){  String realm=RealmContext.getRealm(context).asPath();  JsonValue kbaJson=configHandler.getConfig(realm,KbaBuilder.class);  ResourceResponse response=Responses.newResourceResponse("1","1.0",kbaJson);  return Promises.newResultPromise(response);}  }
class C{  public void testGetVersion(){  if (this.cert == null) {    return;  }  assertEquals("The version is not correct.",tbt_cert.getVersion(),2);}  }
class C{  public static void remove(Object cachedObject){  classCache.remove(cachedObject);}  }
class C{  private ConstraintResult verifyActions(Set<String> actions,ResourceType resourceType){  Set<String> acceptableActions=resourceType.getActions().keySet();  for (  String action : actions) {    if (!acceptableActions.contains(action)) {      return ConstraintResults.newFailure("actionValues",action);    }  }  return ConstraintResults.newSuccess();}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public Dispatch<Object> createDispatch(QName portName,JAXBContext context,Mode mode){  return delegate.createDispatch(portName,context,mode);}  }
class C{  public static Date parseDateTime(String dt){  try {    return new SimpleDateFormat(DATETIME_FORMAT).parse(dt);  } catch (  Exception e) {  }  return null;}  }
class C{  private static void notifyDeveloperError(String message){  Logger.log(LoggingBehavior.DEVELOPER_ERRORS,"AppEvents",message);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Node retval;  Node firstChild;  Node otherChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  firstChild=titleAttr.getFirstChild();  assertNotNull("attrChildNotNull",firstChild);  titleAttr.setValue("Tomorrow");  firstChild.setNodeValue("impl reused node");  value=titleAttr.getValue();  assertEquals("attrValue","Tomorrow",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Tomorrow",value);  firstChild=titleAttr.getLastChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","Tomorrow",value);  otherChild=firstChild.getNextSibling();  assertNull("nextSiblingIsNull",otherChild);}  }
class C{  @Override public String[] findInitParameters(){  parametersLock.readLock().lock();  try {    String results[]=new String[parameters.size()];    return parameters.keySet().toArray(results);  }  finally {    parametersLock.readLock().unlock();  }}  }
class C{  @Inject public AuthorizeResource(OAuth2RequestFactory requestFactory,AuthorizationService authorizationService,ExceptionHandler exceptionHandler,OAuth2Representation representation,Set<AuthorizeRequestHook> hooks,XUIState xuiState,@Named("OAuth2Router") Router router,BaseURLProviderFactory baseURLProviderFactory,RedirectUriResolver redirectUriResolver,ResourceOwnerSessionValidator resourceOwnerSessionValidator){  super(router,baseURLProviderFactory,xuiState,resourceOwnerSessionValidator);  this.requestFactory=requestFactory;  this.authorizationService=authorizationService;  this.exceptionHandler=exceptionHandler;  this.representation=representation;  this.hooks=hooks;  this.redirectUriResolver=redirectUriResolver;}  }
class C{  public boolean isRoot(){  return isRoot;}  }
class C{  public void test_setFormatILjava_text_Format(){  try {    MessageFormat f1=(MessageFormat)format1.clone();    f1.setFormat(0,DateFormat.getTimeInstance());    f1.setFormat(1,DateFormat.getTimeInstance());    f1.setFormat(2,NumberFormat.getInstance());    f1.setFormat(3,new ChoiceFormat("0#off|1#on"));    f1.setFormat(4,new ChoiceFormat("1#few|2#ok|3#a lot"));    f1.setFormat(5,DateFormat.getTimeInstance());    Format[] formats=f1.getFormats();    formats=f1.getFormats();    Format[] correctFormats=new Format[]{DateFormat.getTimeInstance(),DateFormat.getTimeInstance(),NumberFormat.getInstance(),new ChoiceFormat("0#off|1#on"),new ChoiceFormat("1#few|2#ok|3#a lot"),DateFormat.getTimeInstance()};    assertEquals("Test1A:Returned wrong number of formats:",correctFormats.length,formats.length);    for (int i=0; i < correctFormats.length; i++) {      assertEquals("Test1B:wrong format for pattern index " + i + ":",correctFormats[i],formats[i]);    }    try {      f1.setFormat(-1,DateFormat.getDateInstance());      fail("Expected ArrayIndexOutOfBoundsException was not thrown");      f1.setFormat(f1.getFormats().length,DateFormat.getDateInstance());      fail("Expected ArrayIndexOutOfBoundsException was not thrown");    } catch (    ArrayIndexOutOfBoundsException e) {    }  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String localName;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  addrAttr=testAddr.getAttributeNode("emp:domestic");  localName=addrAttr.getLocalName();  assertEquals("localName","domestic",localName);}  }
class C{  protected SipStackImpl(){  super();  NistSipMessageFactoryImpl msgFactory=new NistSipMessageFactoryImpl(this);  super.setMessageFactory(msgFactory);  this.eventScanner=new EventScanner(this);  this.listeningPoints=new Hashtable<String,ListeningPointImpl>();  this.sipProviders=Collections.synchronizedList(new LinkedList<SipProviderImpl>());}  }
class C{  public void paint(Graphics g,Shape a){  if (a == null) {    return;  }  Rectangle r;  if (a instanceof Rectangle) {    r=(Rectangle)a;  } else {    r=a.getBounds();  }  painter.paint(g,r.x,r.y,r.width,r.height,this);  super.paint(g,a);}  }
class C{  public void replace(int index,int length,View[] elems){  super.replace(index,length,elems);  int nInserted=(elems != null) ? elems.length : 0;  majorOffsets=updateLayoutArray(majorOffsets,index,nInserted);  majorSpans=updateLayoutArray(majorSpans,index,nInserted);  majorReqValid=false;  majorAllocValid=false;  minorOffsets=updateLayoutArray(minorOffsets,index,nInserted);  minorSpans=updateLayoutArray(minorSpans,index,nInserted);  minorReqValid=false;  minorAllocValid=false;}  }
class C{  public DiffOptions attributes(final AttributeFilter attributeFilter){  Reject.ifNull(attributeFilter);  this.attributeFilter=attributeFilter;  return this;}  }
class C{  public DTMAxisIterator includeSelf(){  _includeSelf=true;  return this;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  OpenCamera theCamera=camera;  if (theCamera == null) {    theCamera=OpenCameraInterface.open(requestedCameraId);    if (theCamera == null) {      throw new IOException("Camera.open() failed to return object from driver");    }    camera=theCamera;  }  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera cameraObject=theCamera.getCamera();  Camera.Parameters parameters=cameraObject.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=cameraObject.getParameters();      parameters.unflatten(parametersFlattened);      try {        cameraObject.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }  cameraObject.setPreviewDisplay(holder);}  }
class C{  private boolean removeMapping(Object key,Object value){  if (key == null) {    HashMapEntry<K,V> e=entryForNullKey;    if (e == null || !Objects.equal(value,e.value)) {      return false;    }    entryForNullKey=null;    modCount++;    size--;    postRemove(e);    return true;  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      if (!Objects.equal(value,e.value)) {        return false;      }      if (prev == null) {        tab[index]=e.next;      } else {        prev.next=e.next;      }      modCount++;      size--;      postRemove(e);      return true;    }  }  return false;}  }
class C{  public OutputStream bindStream(OutputStream output){  OutputStream stream=m_streams.get();  m_streams.set(output);  return stream;}  }
class C{  public java.io.Serializable read_value(){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  public synchronized boolean isDestroyed(){  return isDestroyed;}  }
class C{  @NonNull public static Interpolator clip(Interpolator interpolator,float start,float end){  return new ClipInterpolator(interpolator,start,end);}  }
class C{  public boolean hasRaster(){synchronized (this) {    return (raster != null);  }}  }
class C{  public ZipError(String s){  super(s);}  }
class C{  public void menuKeyTyped(MenuKeyEvent e){  if (!crossMenuMnemonic && BasicPopupMenuUI.getLastPopup() != null) {    return;  }  if (BasicPopupMenuUI.getPopups().size() != 0) {    return;  }  char key=Character.toLowerCase((char)menuItem.getMnemonic());  MenuElement path[]=e.getPath();  if (key == Character.toLowerCase(e.getKeyChar())) {    JPopupMenu popupMenu=((JMenu)menuItem).getPopupMenu();    ArrayList newList=new ArrayList(Arrays.asList(path));    newList.add(popupMenu);    MenuElement subs[]=popupMenu.getSubElements();    MenuElement sub=BasicPopupMenuUI.findEnabledChild(subs,-1,true);    if (sub != null) {      newList.add(sub);    }    MenuSelectionManager manager=e.getMenuSelectionManager();    MenuElement newPath[]=new MenuElement[0];    ;    newPath=(MenuElement[])newList.toArray(newPath);    manager.setSelectedPath(newPath);    e.consume();  }}  }
class C{  public int next(){  if (_startNode == _currentNode)   return NULL;  final int node=_startNode;  int expType=_exptype2(makeNodeIdentity(node));  _currentNode=node;  if (_nodeType >= DTM.NTYPES) {    if (_nodeType == expType) {      return returnNode(node);    }  } else {    if (expType < DTM.NTYPES) {      if (expType == _nodeType) {        return returnNode(node);      }    } else {      if (m_extendedTypes[expType].getNodeType() == _nodeType) {        return returnNode(node);      }    }  }  return NULL;}  }
class C{  public static byte[] bigIntegerToByteArray(BigInteger value,int blockSize,boolean removeSignByte){  byte[] array=value.toByteArray();  int remainder=array.length % blockSize;  byte[] result=array;  byte[] tmp;  if (removeSignByte && result[0] == 0x0) {    tmp=new byte[result.length - 1];    System.arraycopy(result,1,tmp,0,tmp.length);    result=tmp;    remainder=tmp.length % blockSize;  }  if (remainder > 0) {    tmp=new byte[result.length + blockSize - remainder];    System.arraycopy(result,0,tmp,blockSize - remainder,result.length);    result=tmp;  }  return result;}  }
class C{  public void testUnsupportedCallbackException01(){  Callback c=null;  UnsupportedCallbackException ucE=new UnsupportedCallbackException(c);  assertNull("getMessage() must return null.",ucE.getMessage());  assertNull("getCallback() must return null",ucE.getCallback());}  }
class C{  private void updateServiceCache(String group,ConcurrentHashMap<String,List<URL>> groupUrls,boolean needNotify){  if (groupUrls != null && !groupUrls.isEmpty()) {    ConcurrentHashMap<String,List<URL>> groupMap=serviceCache.get(group);    if (groupMap == null) {      serviceCache.put(group,groupUrls);    }    for (    Map.Entry<String,List<URL>> entry : groupUrls.entrySet()) {      boolean change=true;      if (groupMap != null) {        List<URL> oldUrls=groupMap.get(entry.getKey());        List<URL> newUrls=entry.getValue();        if (newUrls == null || newUrls.isEmpty() || ConsulUtils.isSame(entry.getValue(),oldUrls)) {          change=false;        } else {          groupMap.put(entry.getKey(),newUrls);        }      }      if (change && needNotify) {        notifyExecutor.execute(new NotifyService(entry.getKey(),entry.getValue()));        LoggerUtil.info("motan service notify-service: " + entry.getKey());        StringBuilder sb=new StringBuilder();        for (        URL url : entry.getValue()) {          sb.append(url.getUri()).append(";");        }        LoggerUtil.info("consul notify urls:" + sb.toString());      }    }  }}  }
class C{  public synchronized E remove(int index){  modCount++;  if (index >= elementCount)   throw new ArrayIndexOutOfBoundsException(index);  E oldValue=elementData(index);  int numMoved=elementCount - index - 1;  if (numMoved > 0)   System.arraycopy(elementData,index + 1,elementData,index,numMoved);  elementData[--elementCount]=null;  return oldValue;}  }
class C{  public static boolean isSolaris(){  return matchApprox(SUNOS);}  }
class C{  public static RequestSecurityTokenResponse parseXML(InputStream is) throws WSFederationException {  Document doc=XMLUtils.toDOMDocument(is,debug);  Element root=doc.getDocumentElement();  return new RequestSecurityTokenResponse(root);}  }
class C{  private Element toElement(final Document document){  return document.createElement(this.name);}  }
class C{  private static boolean isOverriddenInClass(Method parentM,Class<?> sub){  Set<Method> methods=overriddenMethods.get(parentM);  if (methods == null)   return false;  for (  Method m : methods) {    if (m.getDeclaringClass().equals(sub))     return true;    if (isOverriddenInClass(m,sub))     return true;  }  return false;}  }
class C{  public ProxyStateAttribute(String state){  super(OctetUtils.toOctets(AttributeType.PROXY_STATE,state));  this.state=new String(super.getOctets(),2,super.getOctets().length - 2);}  }
class C{  private synchronized void bytesRead(final long amountRead){  if (amountRead >= 0) {    this.readCount+=amountRead;  }}  }
class C{  public TemplatesHandler newTemplatesHandler() throws TransformerConfigurationException {  return new StylesheetHandler(this);}  }
class C{  public Mushroom(Material shroom,MushroomBlockTexture texture){  this(shroom,texture.getData());}  }
class C{  protected RandomAccessFile checkFilePermissions(File file,boolean readOnly) throws ReadOnlyFileException, FileNotFoundException {  RandomAccessFile newFile;  checkFileExists(file);  if (readOnly) {    newFile=new RandomAccessFile(file,"r");  } else {    if (!file.canWrite()) {      logger.severe("Unable to write:" + file.getPath());      throw new ReadOnlyFileException(ErrorMessage.NO_PERMISSIONS_TO_WRITE_TO_FILE.getMsg(file.getPath()));    }    newFile=new RandomAccessFile(file,"rw");  }  return newFile;}  }
class C{  public Set createSubPeopleContainers(Map peopleContainersMap) throws AMException, SSOException {  Iterator iter=peopleContainersMap.keySet().iterator();  Set peopleContainers=new HashSet();  while (iter.hasNext()) {    String peopleContainerName=(String)iter.next();    StringBuffer peopleContainerDNSB=new StringBuffer();    peopleContainerDNSB.append(AMNamingAttrManager.getNamingAttr(PEOPLE_CONTAINER)).append("=").append(peopleContainerName).append(",").append(super.entryDN);    Map attributes=(Map)peopleContainersMap.get(peopleContainerName);    AMPeopleContainerImpl peopleContainerImpl=new AMPeopleContainerImpl(super.token,peopleContainerDNSB.toString());    peopleContainerImpl.setAttributes(attributes);    peopleContainerImpl.create();    peopleContainers.add(peopleContainerImpl);  }  return peopleContainers;}  }
class C{  private void buildPutStatic(MethodVisitor methodVisitor,CodeInfo info,Ins.PutStatic putStatic){  buildValueAccess(methodVisitor,info,putStatic.value(),true);  methodVisitor.visitFieldInsn(Opcodes.PUTSTATIC,typeToInternalName(putStatic.field().declaringType()),putStatic.field().name(),typeToDesc(putStatic.field().type()));  info.pop(1);}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  if (getClass() != other.getClass()) {    return false;  }  HostPort that=(HostPort)other;  return port == that.port && host.equals(that.host);}  }
class C{  public LDAPAttribute(String attributeType,ArrayList<ByteString> values){  this.attributeType=attributeType;  if (values == null) {    this.values=new ArrayList<>(0);  } else {    this.values=values;  }}  }
class C{  public ApplicationResponse(ServletResponse response,boolean included){  super(response);  setIncluded(included);}  }
class C{  public CountingInputStream(final InputStream stream){  super(stream);  this.markPos=0;  this.readCount=0;}  }
class C{  public static int randomNumber(){  return randomNumber(0,Integer.MAX_VALUE);}  }
class C{  public boolean equals(String obj2){  return m_str.equals(obj2);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr attribute1;  Attr attribute2;  String name;  String nodeName;  String nodeValue;  String prefix;  String namespaceURI;  doc=(Document)load("staffNS",false);  attribute1=doc.createAttributeNS("http://www.w3.org/XML/1998/namespace","xml:xml");  name=attribute1.getName();  nodeName=attribute1.getNodeName();  nodeValue=attribute1.getNodeValue();  prefix=attribute1.getPrefix();  namespaceURI=attribute1.getNamespaceURI();  assertEquals("documentcreateattributeNS02_att1_name","xml:xml",name);  assertEquals("documentcreateattributeNS02_att1_nodeName","xml:xml",nodeName);  assertEquals("documentcreateattributeNS02_att1_nodeValue","",nodeValue);  assertEquals("documentcreateattributeNS02_att1_prefix","xml",prefix);  assertEquals("documentcreateattributeNS02_att1_namespaceURI","http://www.w3.org/XML/1998/namespace",namespaceURI);  attribute2=doc.createAttributeNS("http://www.w3.org/2000/xmlns/","xmlns");  name=attribute2.getName();  nodeName=attribute2.getNodeName();  nodeValue=attribute2.getNodeValue();  prefix=attribute2.getPrefix();  namespaceURI=attribute2.getNamespaceURI();  assertEquals("documentcreateattributeNS02_att2_name","xmlns",name);  assertEquals("documentcreateattributeNS02_att2_nodeName","xmlns",nodeName);  assertEquals("documentcreateattributeNS02_att2_nodeValue","",nodeValue);  assertEquals("documentcreateattributeNS02_att2_namespaceURI","http://www.w3.org/2000/xmlns/",namespaceURI);}  }
class C{  public static void writeSwappedInteger(OutputStream output,int value) throws IOException {  output.write((byte)((value >> 0) & 0xff));  output.write((byte)((value >> 8) & 0xff));  output.write((byte)((value >> 16) & 0xff));  output.write((byte)((value >> 24) & 0xff));}  }
class C{  public VerificationException(Certificate cert,String message){  super(MessageFormat.format("Certificate {0} failed: {1}",cert == null ? "Unknown" : ((X509Certificate)cert).getSubjectDN().getName(),message));}  }
class C{  public V put(K key,V value){  typeCheck(key);  int index=key.ordinal();  Object oldValue=vals[index];  vals[index]=maskNull(value);  if (oldValue == null)   size++;  return unmaskNull(oldValue);}  }
class C{  public static String forceFrameID23To22(String identifier){  return ID3Frames.forcev23Tov22.get(identifier);}  }
class C{  public static void clearDnsCache(){  addressCache.clear();}  }
class C{  public boolean isEmpty(){  return (m_index == -1);}  }
class C{  private SecureRandom createSecureRandom(){  SecureRandom result=null;  long t1=System.currentTimeMillis();  if (secureRandomClass != null) {    try {      Class<?> clazz=Class.forName(secureRandomClass);      result=(SecureRandom)clazz.newInstance();    } catch (    Exception e) {      log.error(sm.getString("sessionIdGeneratorBase.random",secureRandomClass),e);    }  }  if (result == null) {    try {      if (secureRandomProvider != null && secureRandomProvider.length() > 0) {        result=SecureRandom.getInstance(secureRandomAlgorithm,secureRandomProvider);      } else       if (secureRandomAlgorithm != null && secureRandomAlgorithm.length() > 0) {        result=SecureRandom.getInstance(secureRandomAlgorithm);      }    } catch (    NoSuchAlgorithmException e) {      log.error(sm.getString("sessionIdGeneratorBase.randomAlgorithm",secureRandomAlgorithm),e);    }catch (    NoSuchProviderException e) {      log.error(sm.getString("sessionIdGeneratorBase.randomProvider",secureRandomProvider),e);    }  }  if (result == null) {    try {      result=SecureRandom.getInstance("SHA1PRNG");    } catch (    NoSuchAlgorithmException e) {      log.error(sm.getString("sessionIdGeneratorBase.randomAlgorithm",secureRandomAlgorithm),e);    }  }  if (result == null) {    result=new SecureRandom();  }  result.nextInt();  long t2=System.currentTimeMillis();  if ((t2 - t1) > 100)   log.info(sm.getString("sessionIdGeneratorBase.createRandom",result.getAlgorithm(),Long.valueOf(t2 - t1)));  return result;}  }
class C{  protected void tearDown(){  TestField.pubfield1=0;  TestField.privfield1=123;  TestField.intSField=Integer.MAX_VALUE;  TestField.shortSField=Short.MAX_VALUE;  TestField.booleanSField=true;  TestField.byteSField=Byte.MAX_VALUE;  TestField.longSField=Long.MAX_VALUE;  TestField.doubleSField=Double.MAX_VALUE;  TestField.floatSField=Float.MAX_VALUE;  TestField.charSField='T';  TestField.prsttrvol=99;}  }
class C{  public void relayoutToCompress(){  int childCount=this.getChildCount();  if (0 == childCount) {    return;  }  int count=0;  for (int i=0; i < childCount; i++) {    View v=getChildAt(i);    if (v instanceof BlankView) {      continue;    }    count++;  }  View[] childs=new View[count];  int[] spaces=new int[count];  int n=0;  for (int i=0; i < childCount; i++) {    View v=getChildAt(i);    if (v instanceof BlankView) {      continue;    }    childs[n]=v;    LayoutParams childLp=v.getLayoutParams();    int childWidth=v.getMeasuredWidth();    if (childLp instanceof MarginLayoutParams) {      MarginLayoutParams mlp=(MarginLayoutParams)childLp;      spaces[n]=mlp.leftMargin + childWidth + mlp.rightMargin;    } else {      spaces[n]=childWidth;    }    n++;  }  int[] compressSpaces=new int[count];  for (int i=0; i < count; i++) {    compressSpaces[i]=spaces[i] > usefulWidth ? usefulWidth : spaces[i];  }  sortToCompress(childs,compressSpaces);  this.removeAllViews();  for (  View v : childList) {    this.addView(v);  }  childList.clear();}  }
class C{  public boolean isInt(STypeDef requiredType,NumberLiteral literal,LineCol lineCol) throws SyntaxException {  return (requiredType == null || requiredType instanceof IntTypeDef || (requiredType instanceof SClassDef && requiredType.isAssignableFrom(getTypeWithName("java.lang.Integer",lineCol)))) && !literal.literal().contains(".");}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  transformer.getXPathContext().getVarStack().setLocalVariable(m_index,m_lazyVar);}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  toString(buffer);  return buffer.toString();}  }
class C{  public static PropertyMapper constant(final Object value){  return new JsonConstantPropertyMapper(value);}  }
class C{  private PdfIndirectReference tryToFindPreviouslyCopiedEqualObject(PdfObject object){  SerializedPdfObject objectKey;  if (object.isStream() || object.isDictionary()) {    objectKey=new SerializedPdfObject(object,objectRefToSerializedContent);    PdfIndirectReference objectRef=serializedContentToObjectRef.get(objectKey);    if (objectRef != null) {      return objectRef;    }    serializedContentToObjectRef.put(objectKey,object.getIndirectReference());  }  return null;}  }
class C{  public void update(Graphics g,JComponent c){  if (g == null) {    throw new NullPointerException("graphics must be non-null");  }  if (c.isOpaque() && (c.getBackground() instanceof UIResource) && ((JToolBar)c).getOrientation() == JToolBar.HORIZONTAL && UIManager.get("MenuBar.gradient") != null) {    JRootPane rp=SwingUtilities.getRootPane(c);    JMenuBar mb=(JMenuBar)findRegisteredComponentOfType(c,JMenuBar.class);    if (mb != null && mb.isOpaque() && (mb.getBackground() instanceof UIResource)) {      Point point=new Point(0,0);      point=SwingUtilities.convertPoint(c,point,rp);      int x=point.x;      int y=point.y;      point.x=point.y=0;      point=SwingUtilities.convertPoint(mb,point,rp);      if (point.x == x && y == point.y + mb.getHeight() && mb.getWidth() == c.getWidth() && MetalUtils.drawGradient(c,g,"MenuBar.gradient",0,-mb.getHeight(),c.getWidth(),c.getHeight() + mb.getHeight(),true)) {        setLastMenuBar(mb);        paint(g,c);        return;      }    }    if (MetalUtils.drawGradient(c,g,"MenuBar.gradient",0,0,c.getWidth(),c.getHeight(),true)) {      setLastMenuBar(null);      paint(g,c);      return;    }  }  setLastMenuBar(null);  super.update(g,c);}  }
class C{  public void skip(){  pos++;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS06.class,args);}  }
class C{  public static UIFormLayout createFormLayout(){  return (UIFormLayout)JSFComponentFactory.createComponent(UIFormLayout.JK_LAYOUT_FORM_LAYOUT);}  }
class C{  public void removeCOSAssignment(PersistentObject pObject,ICOSDefinition cosDef,COSTemplate cosTemplate) throws UMSException {  if (pObject == null || cosDef == null) {    String msg=i18n.getString(IUMSConstants.COS_DEF_OR_TARGET_OBJECT_NULL);    throw new UMSException(msg);  }  if (pObject.getGuid() == null) {    String msg=i18n.getString(IUMSConstants.COS_TARGET_OBJECT_NOT_PERSISTENT);    throw new UMSException(msg);  }  if (!(cosDef instanceof DirectCOSDefinition)) {    String msg=i18n.getString(IUMSConstants.INVALID_COSDEFINITION);    throw new UMSException(msg);  }  if (cosDef instanceof DirectCOSDefinition) {    removeDirectCOSAssignment(pObject,(DirectCOSDefinition)cosDef,cosTemplate,_schemaManager);  }}  }
class C{  public void checkAbandoned(){  try {    if (busy.size() == 0)     return;    Iterator<PooledConnection> locked=busy.iterator();    int sto=getPoolProperties().getSuspectTimeout();    while (locked.hasNext()) {      PooledConnection con=locked.next();      boolean setToNull=false;      try {        con.lock();        if (idle.contains(con) || con.isReleased())         continue;        long time=con.getTimestamp();        long now=System.currentTimeMillis();        if (shouldAbandon() && (now - time) > con.getAbandonTimeout()) {          busy.remove(con);          abandon(con);          setToNull=true;        } else         if (sto > 0 && (now - time) > (sto * 1000L)) {          suspect(con);        } else {        }      }  finally {        con.unlock();        if (setToNull)         con=null;      }    }  } catch (  ConcurrentModificationException e) {    log.debug("checkAbandoned failed.",e);  }catch (  Exception e) {    log.warn("checkAbandoned failed, it will be retried.",e);  }}  }
class C{  @NonNull public final Agera compose(@NonNull Function<? super Agera,? extends Agera> composer){  return as(composer);}  }
class C{  public void paintMenuBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public void reset(){  if (!included || getResponse().isCommitted())   getResponse().reset();}  }
class C{  private void removeSingleEntry(SSOToken token,String entryDN,int objectType,boolean softDelete) throws AMException, SSOException {  Map attributes=null;  EmailNotificationHelper mailer=null;  String eDN=entryDN;  if (objectType == AMObject.USER) {    eDN=DN.valueOf(entryDN).parent().toString();  }  String orgDN=getOrganizationDN(internalToken,eDN);  try {    if (objectType == AMObject.USER) {      mailer=new EmailNotificationHelper(entryDN);      mailer.setUserDeleteNotificationList();    }    if ((getUserPostPlugin() != null) || (mailer != null && mailer.isPresentUserDeleteNotificationList())) {      attributes=getAttributes(token,entryDN,objectType);    }    processPreDeleteCallBacks(token,entryDN,attributes,orgDN,objectType,softDelete);    if (dcTreeImpl.isRequired()) {      String rfcDN=LDAPUtils.formatToRFC(entryDN);      dcTreeImpl.removeDomain(internalToken,rfcDN);    }    Guid guid=new Guid(entryDN);    UMSObject.removeObject(token,guid);  } catch (  AccessRightsException e) {    debug.error("DirectoryServicesImpl.removeEntry() Insufficient " + "access rights to remove entry: " + entryDN,e);    throw new AMException(token,"460");  }catch (  EntryNotFoundException e) {    String entry=getEntryName(e);    debug.error("DirectoryServicesImpl.removeEntry() Entry not found: " + entry,e);    String msgid=getEntryNotFoundMsgID(objectType);    Object args[]={entry};    String locale=CommonUtils.getUserLocale(token);    throw new AMException(AMSDKBundle.getString(msgid,args,locale),msgid,args);  }catch (  UMSException e) {    debug.error("DirectoryServicesImpl.removeEntry() Unable to remove: " + " Internal error occurred: ",e);    throw new AMException(token,"325",e);  }  processPostDeleteCallBacks(token,entryDN,attributes,orgDN,objectType,softDelete);  if (objectType == AMObject.USER) {    AMUserEntryProcessed postPlugin=getUserPostPlugin();    if (postPlugin != null) {      postPlugin.processUserDelete(token,entryDN,attributes);    }    if (mailer != null && mailer.isPresentUserDeleteNotificationList()) {      mailer.sendUserDeleteNotification(attributes);    }  }}  }
class C{  private void buildMonitorExit(MethodVisitor methodVisitor,CodeInfo info,Ins.MonitorExit monitorExit){  methodVisitor.visitVarInsn(Opcodes.ALOAD,monitorExit.enterInstruction().storeIndex());  info.push(CodeInfo.Size._1);  methodVisitor.visitInsn(Opcodes.MONITOREXIT);  info.pop(1);}  }
class C{  public boolean validate(String value){  char aChar;  StringBuilder buf=new StringBuilder(value);  for (int aIndex=0; aIndex < buf.length(); aIndex++) {    aChar=buf.charAt(aIndex);    if (!Character.isSpaceChar(aChar)) {      if (!Character.isLetter(aChar)) {        return false;      }    }  }  return true;}  }
class C{  public String paramString(){  String typeStr;switch (id) {case FOCUS_GAINED:    typeStr="FOCUS_GAINED";  break;case FOCUS_LOST:typeStr="FOCUS_LOST";break;default :typeStr="unknown type";}return typeStr + (temporary ? ",temporary" : ",permanent") + ",opposite="+ getOppositeComponent();}  }
class C{  SimpleTimeCondition(Debug debug,TimeService timeService){  this.debug=debug;  this.timeService=timeService;  dateFormat=new SimpleDateFormat(DATE_FORMAT);  dateFormat.setLenient(false);  dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));}  }
class C{  public static boolean isUnderline(AttributeSet a){  Boolean underline=(Boolean)a.getAttribute(Underline);  if (underline != null) {    return underline.booleanValue();  }  return false;}  }
class C{  private boolean isFreshnessLifetimeHeuristic(){  return maxAgeSeconds == -1 && expires == null;}  }
class C{  @DataProvider private Object[][] algorithms(){  return new Object[][]{{"AES/CBC/NoPadding"},{"AES/CBC/PKCS5Padding"},{"AES/ECB/NoPadding"},{"AES/ECB/PKCS5Padding"},{"DES/CBC/NoPadding"},{"DES/CBC/PKCS5Padding"},{"DES/ECB/NoPadding"},{"DES/ECB/PKCS5Padding"},{"DESede/CBC/NoPadding"},{"DESede/CBC/PKCS5Padding"},{"DESede/ECB/NoPadding"},{"DESede/ECB/PKCS5Padding"},{"RSA/ECB/PKCS1Padding"},{"RSA/ECB/OAEPWithSHA-1AndMGF1Padding"},{"RSA/ECB/OAEPWithSHA-256AndMGF1Padding"}};}  }
class C{  @Deactivate void deactivate(ComponentContext compContext){  logger.debug("Deactivating Service {}",compContext);  logger.info("Repository stopped.");}  }
class C{  @Override public void addIntHeader(String name,int value){  if (name == null || name.length() == 0) {    return;  }  if (isCommitted()) {    return;  }  if (included) {    return;  }  addHeader(name,"" + value);}  }
class C{  public MalformedURIException(String p_msg){  super(p_msg);}  }
class C{  private void deleteBaseDNs(Set<BaseDNDescriptor> baseDNs) throws OpenDsException, ConfigException {  BackendDescriptor backend=baseDNs.iterator().next().getBackend();  SortedSet<DN> oldBaseDNs=new TreeSet<>();  for (  BaseDNDescriptor baseDN : backend.getBaseDns()) {    oldBaseDNs.add(baseDN.getDn());  }  LinkedList<DN> newBaseDNs=new LinkedList<>(oldBaseDNs);  ArrayList<DN> dnsToRemove=new ArrayList<>();  for (  BaseDNDescriptor baseDN : baseDNs) {    dnsToRemove.add(baseDN.getDn());  }  newBaseDNs.removeAll(dnsToRemove);  String backendName=backend.getBackendID();  DN dn=DN.valueOf("ds-cfg-backend-id=" + backendName + ",cn=Backends,cn=config");  updateConfigEntryWithAttribute(dn,ATTR_BACKEND_BASE_DN,newBaseDNs);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public PlaDelTriTriangle[] split_at_inner_point(PlaDelTriCorner p_corner){  PlaDelTriTriangle[] new_triangles=new PlaDelTriTriangle[3];  PlaDelTriEdge[] new_edges=new PlaDelTriEdge[3];  for (int index=0; index < 3; ++index) {    new_edges[index]=new PlaDelTriEdge(id_generator,get_corner(index),p_corner);  }  PlaDelTriEdge[] curr_edge_lines=new PlaDelTriEdge[3];  curr_edge_lines[0]=edge_lines[0];  curr_edge_lines[1]=new PlaDelTriEdge(id_generator,get_corner(1),p_corner);  curr_edge_lines[2]=new PlaDelTriEdge(id_generator,p_corner,get_corner(0));  new_triangles[0]=new PlaDelTriTriangle(id_generator,curr_edge_lines,this);  curr_edge_lines=new PlaDelTriEdge[3];  curr_edge_lines[0]=edge_lines[1];  curr_edge_lines[1]=new PlaDelTriEdge(id_generator,get_corner(2),p_corner);  curr_edge_lines[2]=new_triangles[0].edge_lines[1];  new_triangles[1]=new PlaDelTriTriangle(id_generator,curr_edge_lines,this);  curr_edge_lines=new PlaDelTriEdge[3];  curr_edge_lines[0]=edge_lines[2];  curr_edge_lines[1]=new_triangles[0].edge_lines[2];  curr_edge_lines[2]=new_triangles[1].edge_lines[1];  new_triangles[2]=new PlaDelTriTriangle(id_generator,curr_edge_lines,this);  for (int index=0; index < 3; ++index) {    PlaDelTriEdge curr_edge=new_triangles[index].edge_lines[0];    if (curr_edge.left_triangle == this) {      curr_edge.set_left_triangle(new_triangles[index]);    } else {      curr_edge.set_right_triangle(new_triangles[index]);    }  }  PlaDelTriEdge curr_edge=new_triangles[0].edge_lines[1];  curr_edge.set_left_triangle(new_triangles[0]);  curr_edge.set_right_triangle(new_triangles[1]);  curr_edge=new_triangles[1].edge_lines[1];  curr_edge.set_left_triangle(new_triangles[1]);  curr_edge.set_right_triangle(new_triangles[2]);  curr_edge=new_triangles[2].edge_lines[1];  curr_edge.set_left_triangle(new_triangles[0]);  curr_edge.set_right_triangle(new_triangles[2]);  return new_triangles;}  }
class C{  private static byte[] addPrefix(byte type[],byte iv[],byte share[]){  byte data[]=new byte[share.length + 11];  data[0]=VERSION;  data[1]=type[0];  data[2]=type[1];  for (int i=0; i < 8; i++) {    data[3 + i]=iv[i];  }  for (int i=0; i < share.length; i++) {    data[11 + i]=share[i];  }  return data;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.OrganizationURLElement createOrganizationURLElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.OrganizationURLElementImpl();}  }
class C{  DateTimePrintContext(TemporalAccessor temporal,DateTimeFormatter formatter){  super();  this.temporal=adjust(temporal,formatter);  this.formatter=formatter;}  }
class C{  @Override public Principal authenticate(String username,String credentials){  if (username == null || credentials == null) {    if (log.isDebugEnabled())     log.debug(sm.getString("memoryRealm.authenticateFailure",username));    return null;  }  GenericPrincipal principal=principals.get(username);  if (principal == null || principal.getPassword() == null) {    getCredentialHandler().mutate(credentials);    if (log.isDebugEnabled())     log.debug(sm.getString("memoryRealm.authenticateFailure",username));    return null;  }  boolean validated=getCredentialHandler().matches(credentials,principal.getPassword());  if (validated) {    if (log.isDebugEnabled())     log.debug(sm.getString("memoryRealm.authenticateSuccess",username));    return principal;  } else {    if (log.isDebugEnabled())     log.debug(sm.getString("memoryRealm.authenticateFailure",username));    return null;  }}  }
class C{  @Get public Response handle(@Contextual Context context,@Contextual Request request){  if (!ApiDescriptorFilter.State.INSTANCE.isEnabled()) {    return new Response(Status.NOT_IMPLEMENTED);  }  Response response=new Response(Status.OK);  File input;  try {    if ("asciidoc".equals(request.getForm().getFirst("format"))) {      response.getHeaders().add(TEXT_CONTENT_TYPE);      input=getAsciiDoc(context);    } else {      response.getHeaders().add(HTML_CONTENT_TYPE);      input=getDocs(context);    }  } catch (  IOException|RuntimeException e) {    debug.warning("ApiDocsService#handle :: Could not generate API docs",e);    return new Response(Status.INTERNAL_SERVER_ERROR).setCause(e);  }  try {    response.setEntity(new FileBranchingStream(input));  } catch (  IOException e) {    debug.error("ApiDocsService#handle :: Could not read API docs",e);    return new Response(Status.INTERNAL_SERVER_ERROR).setCause(e);  }  return response;}  }
class C{  private Object readResolve(){  return (list instanceof RandomAccess ? new UnmodifiableRandomAccessList<>(list) : this);}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.deleteFoo(foo);}  }
class C{  public void test_unwrap_ByteBuffer_ByteBuffer_01() throws InterruptedException, IOException {  prepareEngines();  doHandshake();  ByteBuffer bbs=ByteBuffer.allocate(100);  ByteBuffer bbd=ByteBuffer.allocate(100);  try {    SSLEngineResult unwrap=clientEngine.engine.unwrap(bbs,bbd);    fail("SSLException wasn't thrown");  } catch (  SSLException ex) {  }}  }
class C{  private void replaceTop(Scope topOfStack){  stack.set(stack.size() - 1,topOfStack);}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle alloc=(Rectangle)a;  int y=alloc.y + metrics.getAscent();  int x=alloc.x;  JTextComponent host=(JTextComponent)getContainer();  Highlighter h=host.getHighlighter();  LayeredHighlighter dh=(h instanceof LayeredHighlighter) ? (LayeredHighlighter)h : null;  int start=getStartOffset();  int end=getEndOffset();  int p0=start;  int[] lineEnds=getLineEnds();  for (int i=0; i < lineCount; i++) {    int p1=(lineEnds == null) ? end : start + lineEnds[i];    if (dh != null) {      int hOffset=(p1 == end) ? (p1 - 1) : p1;      dh.paintLayeredHighlights(g,p0,hOffset,a,host,this);    }    drawLine(p0,p1,g,x,y);    p0=p1;    y+=metrics.getHeight();  }}  }
class C{  @Override public void reset() throws IOException {  in.reset();  lineNumber=markedLineNumber;  lastChar=markedLastChar;}  }
class C{  @Override public JsonElement serialize(Position src,Type typeOfSrc,JsonSerializationContext context){  JsonArray rawCoordinates=new JsonArray();  rawCoordinates.add(new JsonPrimitive(src.getLongitude()));  rawCoordinates.add(new JsonPrimitive(src.getLatitude()));  if (src.hasAltitude()) {    rawCoordinates.add(new JsonPrimitive(src.getAltitude()));  }  return rawCoordinates;}  }
class C{  public AttributeBuilder(AttributeType attributeType,String name){  Reject.ifNull(attributeType,name);  this.attributeDescription=AttributeDescription.create(name,attributeType);}  }
class C{  public void write() throws IOException, BadLocationException {  styleNameMapping=new Hashtable<String,String>();  writeStartTag("<html>");  writeHeader();  writeBody();  writeEndTag("</html>");}  }
class C{  public boolean dispatchEvent(AWTEvent e){  if (focusLog.isLoggable(PlatformLogger.Level.FINE) && (e instanceof WindowEvent || e instanceof FocusEvent)) {    focusLog.fine("" + e);  }switch (e.getID()) {case WindowEvent.WINDOW_GAINED_FOCUS:{      if (repostIfFollowsKeyEvents((WindowEvent)e)) {        break;      }      WindowEvent we=(WindowEvent)e;      Window oldFocusedWindow=getGlobalFocusedWindow();      Window newFocusedWindow=we.getWindow();      if (newFocusedWindow == oldFocusedWindow) {        break;      }      if (!(newFocusedWindow.isFocusableWindow() && newFocusedWindow.isVisible() && newFocusedWindow.isDisplayable())) {        restoreFocus(we);        break;      }      if (oldFocusedWindow != null) {        boolean isEventDispatched=sendMessage(oldFocusedWindow,new WindowEvent(oldFocusedWindow,WindowEvent.WINDOW_LOST_FOCUS,newFocusedWindow));        if (!isEventDispatched) {          setGlobalFocusOwner(null);          setGlobalFocusedWindow(null);        }      }      Window newActiveWindow=getOwningFrameDialog(newFocusedWindow);      Window currentActiveWindow=getGlobalActiveWindow();      if (newActiveWindow != currentActiveWindow) {        sendMessage(newActiveWindow,new WindowEvent(newActiveWindow,WindowEvent.WINDOW_ACTIVATED,currentActiveWindow));        if (newActiveWindow != getGlobalActiveWindow()) {          restoreFocus(we);          break;        }      }      setGlobalFocusedWindow(newFocusedWindow);      if (newFocusedWindow != getGlobalFocusedWindow()) {        restoreFocus(we);        break;      }      if (inSendMessage == 0) {        Component toFocus=KeyboardFocusManager.getMostRecentFocusOwner(newFocusedWindow);        if ((toFocus == null) && newFocusedWindow.isFocusableWindow()) {          toFocus=newFocusedWindow.getFocusTraversalPolicy().getInitialComponent(newFocusedWindow);        }        Component tempLost=null;synchronized (KeyboardFocusManager.class) {          tempLost=newFocusedWindow.setTemporaryLostComponent(null);        }        if (focusLog.isLoggable(PlatformLogger.Level.FINER)) {          focusLog.finer("tempLost {0}, toFocus {1}",tempLost,toFocus);        }        if (tempLost != null) {          tempLost.requestFocusInWindow(CausedFocusEvent.Cause.ACTIVATION);        }        if (toFocus != null && toFocus != tempLost) {          toFocus.requestFocusInWindow(CausedFocusEvent.Cause.ACTIVATION);        }      }      Window realOppositeWindow=this.realOppositeWindowWR.get();      if (realOppositeWindow != we.getOppositeWindow()) {        we=new WindowEvent(newFocusedWindow,WindowEvent.WINDOW_GAINED_FOCUS,realOppositeWindow);      }      return typeAheadAssertions(newFocusedWindow,we);    }case WindowEvent.WINDOW_ACTIVATED:{    WindowEvent we=(WindowEvent)e;    Window oldActiveWindow=getGlobalActiveWindow();    Window newActiveWindow=we.getWindow();    if (oldActiveWindow == newActiveWindow) {      break;    }    if (oldActiveWindow != null) {      boolean isEventDispatched=sendMessage(oldActiveWindow,new WindowEvent(oldActiveWindow,WindowEvent.WINDOW_DEACTIVATED,newActiveWindow));      if (!isEventDispatched) {        setGlobalActiveWindow(null);      }      if (getGlobalActiveWindow() != null) {        break;      }    }    setGlobalActiveWindow(newActiveWindow);    if (newActiveWindow != getGlobalActiveWindow()) {      break;    }    return typeAheadAssertions(newActiveWindow,we);  }case FocusEvent.FOCUS_GAINED:{  FocusEvent fe=(FocusEvent)e;  CausedFocusEvent.Cause cause=(fe instanceof CausedFocusEvent) ? ((CausedFocusEvent)fe).getCause() : CausedFocusEvent.Cause.UNKNOWN;  Component oldFocusOwner=getGlobalFocusOwner();  Component newFocusOwner=fe.getComponent();  if (oldFocusOwner == newFocusOwner) {    if (focusLog.isLoggable(PlatformLogger.Level.FINE)) {      focusLog.fine("Skipping {0} because focus owner is the same",e);    }    dequeueKeyEvents(-1,newFocusOwner);    break;  }  if (oldFocusOwner != null) {    boolean isEventDispatched=sendMessage(oldFocusOwner,new CausedFocusEvent(oldFocusOwner,FocusEvent.FOCUS_LOST,fe.isTemporary(),newFocusOwner,cause));    if (!isEventDispatched) {      setGlobalFocusOwner(null);      if (!fe.isTemporary()) {        setGlobalPermanentFocusOwner(null);      }    }  }  final Window newFocusedWindow=SunToolkit.getContainingWindow(newFocusOwner);  final Window currentFocusedWindow=getGlobalFocusedWindow();  if (newFocusedWindow != null && newFocusedWindow != currentFocusedWindow) {    sendMessage(newFocusedWindow,new WindowEvent(newFocusedWindow,WindowEvent.WINDOW_GAINED_FOCUS,currentFocusedWindow));    if (newFocusedWindow != getGlobalFocusedWindow()) {      dequeueKeyEvents(-1,newFocusOwner);      break;    }  }  if (!(newFocusOwner.isFocusable() && newFocusOwner.isShowing() && (newFocusOwner.isEnabled() || cause.equals(CausedFocusEvent.Cause.UNKNOWN)))) {    dequeueKeyEvents(-1,newFocusOwner);    if (KeyboardFocusManager.isAutoFocusTransferEnabled()) {      if (newFocusedWindow == null) {        restoreFocus(fe,currentFocusedWindow);      } else {        restoreFocus(fe,newFocusedWindow);      }      setMostRecentFocusOwner(newFocusedWindow,null);    }    break;  }  setGlobalFocusOwner(newFocusOwner);  if (newFocusOwner != getGlobalFocusOwner()) {    dequeueKeyEvents(-1,newFocusOwner);    if (KeyboardFocusManager.isAutoFocusTransferEnabled()) {      restoreFocus(fe,(Window)newFocusedWindow);    }    break;  }  if (!fe.isTemporary()) {    setGlobalPermanentFocusOwner(newFocusOwner);    if (newFocusOwner != getGlobalPermanentFocusOwner()) {      dequeueKeyEvents(-1,newFocusOwner);      if (KeyboardFocusManager.isAutoFocusTransferEnabled()) {        restoreFocus(fe,(Window)newFocusedWindow);      }      break;    }  }  setNativeFocusOwner(getHeavyweight(newFocusOwner));  Component realOppositeComponent=this.realOppositeComponentWR.get();  if (realOppositeComponent != null && realOppositeComponent != fe.getOppositeComponent()) {    fe=new CausedFocusEvent(newFocusOwner,FocusEvent.FOCUS_GAINED,fe.isTemporary(),realOppositeComponent,cause);    ((AWTEvent)fe).isPosted=true;  }  return typeAheadAssertions(newFocusOwner,fe);}case FocusEvent.FOCUS_LOST:{FocusEvent fe=(FocusEvent)e;Component currentFocusOwner=getGlobalFocusOwner();if (currentFocusOwner == null) {  if (focusLog.isLoggable(PlatformLogger.Level.FINE))   focusLog.fine("Skipping {0} because focus owner is null",e);  break;}if (currentFocusOwner == fe.getOppositeComponent()) {  if (focusLog.isLoggable(PlatformLogger.Level.FINE))   focusLog.fine("Skipping {0} because current focus owner is equal to opposite",e);  break;}setGlobalFocusOwner(null);if (getGlobalFocusOwner() != null) {  restoreFocus(currentFocusOwner,true);  break;}if (!fe.isTemporary()) {  setGlobalPermanentFocusOwner(null);  if (getGlobalPermanentFocusOwner() != null) {    restoreFocus(currentFocusOwner,true);    break;  }} else {  Window owningWindow=currentFocusOwner.getContainingWindow();  if (owningWindow != null) {    owningWindow.setTemporaryLostComponent(currentFocusOwner);  }}setNativeFocusOwner(null);fe.setSource(currentFocusOwner);realOppositeComponentWR=(fe.getOppositeComponent() != null) ? new WeakReference<Component>(currentFocusOwner) : NULL_COMPONENT_WR;return typeAheadAssertions(currentFocusOwner,fe);}case WindowEvent.WINDOW_DEACTIVATED:{WindowEvent we=(WindowEvent)e;Window currentActiveWindow=getGlobalActiveWindow();if (currentActiveWindow == null) {break;}if (currentActiveWindow != e.getSource()) {break;}setGlobalActiveWindow(null);if (getGlobalActiveWindow() != null) {break;}we.setSource(currentActiveWindow);return typeAheadAssertions(currentActiveWindow,we);}case WindowEvent.WINDOW_LOST_FOCUS:{if (repostIfFollowsKeyEvents((WindowEvent)e)) {break;}WindowEvent we=(WindowEvent)e;Window currentFocusedWindow=getGlobalFocusedWindow();Window losingFocusWindow=we.getWindow();Window activeWindow=getGlobalActiveWindow();Window oppositeWindow=we.getOppositeWindow();if (focusLog.isLoggable(PlatformLogger.Level.FINE)) focusLog.fine("Active {0}, Current focused {1}, losing focus {2} opposite {3}",activeWindow,currentFocusedWindow,losingFocusWindow,oppositeWindow);if (currentFocusedWindow == null) {break;}if (inSendMessage == 0 && losingFocusWindow == activeWindow && oppositeWindow == currentFocusedWindow) {break;}Component currentFocusOwner=getGlobalFocusOwner();if (currentFocusOwner != null) {Component oppositeComp=null;if (oppositeWindow != null) {oppositeComp=oppositeWindow.getTemporaryLostComponent();if (oppositeComp == null) {  oppositeComp=oppositeWindow.getMostRecentFocusOwner();}}if (oppositeComp == null) {oppositeComp=oppositeWindow;}sendMessage(currentFocusOwner,new CausedFocusEvent(currentFocusOwner,FocusEvent.FOCUS_LOST,true,oppositeComp,CausedFocusEvent.Cause.ACTIVATION));}setGlobalFocusedWindow(null);if (getGlobalFocusedWindow() != null) {restoreFocus(currentFocusedWindow,null,true);break;}we.setSource(currentFocusedWindow);realOppositeWindowWR=(oppositeWindow != null) ? new WeakReference<Window>(currentFocusedWindow) : NULL_WINDOW_WR;typeAheadAssertions(currentFocusedWindow,we);if (oppositeWindow == null) {sendMessage(activeWindow,new WindowEvent(activeWindow,WindowEvent.WINDOW_DEACTIVATED,null));if (getGlobalActiveWindow() != null) {restoreFocus(currentFocusedWindow,null,true);}}break;}case KeyEvent.KEY_TYPED:case KeyEvent.KEY_PRESSED:case KeyEvent.KEY_RELEASED:return typeAheadAssertions(null,e);default :return false;}return true;}  }
class C{  public static String buildDynamicKey(final Object[] paramNames,final Object[] paramValues){  return Arrays.toString(paramNames).concat(Arrays.toString(paramValues));}  }
class C{  public boolean matchesEntry(Entry entry) throws DirectoryException {  ConditionResult result=matchesEntryInternal(this,entry,0);switch (result) {case TRUE:    return true;case FALSE:case UNDEFINED:  return false;default :logger.error(ERR_SEARCH_FILTER_INVALID_RESULT_TYPE,entry.getName(),this,result);return false;}}  }
class C{  public void testIntValuePositive1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3};  int resInt=1496144643;  int aNumber=new BigInteger(aBytes).intValue();  assertTrue(aNumber == resInt);}  }
class C{  public void addCellEditorListener(CellEditorListener l){  realEditor.addCellEditorListener(l);}  }
class C{  public void destroy(){}  }
class C{  public void validatePassword(String password,Map envParams) throws AMException {  validatePassword(password);}  }
class C{  public void switchStates(){  if (sMario.getJumpTrail().getOpacity() > 0) {    sMario.getJumpTrail().setOpacity(0);    sMario.getJumpEffect().setOpacity(0);    opacity=1;  }  if (opacity > 0) {    float decFactor=(float)(yPos / (opacity * jumpTrailHeightDelta));    sMario.getPowerEffect(MARIO_STATE).setFitHeight(sMario.getPowerEffect(MARIO_STATE).getFitHeight() + decFactor);    sMario.getPowerEffect(MARIO_STATE).setOpacity(opacity);    sMario.getPowerEffect(MARIO_STATE).setTranslateY(sMario.getPowerEffect(MARIO_STATE).getTranslateY() - decFactor);    if (MARIO_STATE > 1 && playerStates.size() > 12 && opacity < 0.5)     removeStates(6);    opacity-=0.016;    if (enableAura)     aura.update(xPos,yPos);  } else   if (enableAura) {    sMario.removePowerupEffect();    midStateChange=false;    MARIO_STATE++;    return;  }  if (MARIO_STATE > 0) {    if (MARIO_STATE >= 1 && !enableAura) {      spriteFrame.setImage(playerStates.get(0));      setAura();      sMario.addPowerupEffect(xPos - jumpEffectXTH,(float)(191.02 * REL_HEIGHT),MARIO_STATE);    }    return;  }  if (stateFrame++ == 0) {    jumpEffectYTH+=MARIO_SCALE_DIFF;    jumpTrailYTH+=MARIO_SCALE_DIFF;    yPos-=(MARIO_SCALE_DIFF * 1.25);    spriteFrame.setTranslateY(yPos);    sMario.addPowerupEffect(xPos - jumpEffectXTH,(float)(191.02 * REL_HEIGHT),MARIO_STATE);  } else   if (stateFrame == 6)   super.getSpriteFrame().setImage(super.getPlayerStates().get(12)); else   if (stateFrame == 16)   super.getSpriteFrame().setImage(super.getPlayerStates().get(0)); else   if (stateFrame == 28)   super.getSpriteFrame().setImage(super.getPlayerStates().get(12)); else   if (stateFrame == 38)   super.getSpriteFrame().setImage(super.getPlayerStates().get(0)); else   if (stateFrame == 50)   super.getSpriteFrame().setImage(super.getPlayerStates().get(12)); else   if (stateFrame == 62) {    super.getSpriteFrame().setImage(super.getPlayerStates().get(6));    stateFrame=0;    this.updateSVGArrContent(SVGData_b);    midStateChange=false;    isIdle=false;    sMario.removePowerupEffect();    removeStates(6);    playerStates.remove(6);    MARIO_STATE++;  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {}  }
class C{  public void addLayoutComponent(String name,Component comp){  invalidateLayout(comp.getParent());}  }
class C{  public int value(){  return _value;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureMethodType createSignatureMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureMethodTypeImpl();}  }
class C{  @Override public Object postProcessBeforeInitialization(Object bean,String beanName) throws BeansException {  if (!isMatchPackage(bean)) {    return bean;  }  Class<?> clazz=bean.getClass();  if (isProxyBean(bean)) {    clazz=AopUtils.getTargetClass(bean);  }  Method[] methods=clazz.getMethods();  for (  Method method : methods) {    String name=method.getName();    if (name.length() > 3 && name.startsWith("set") && method.getParameterTypes().length == 1 && Modifier.isPublic(method.getModifiers()) && !Modifier.isStatic(method.getModifiers())) {      try {        MotanReferer reference=method.getAnnotation(MotanReferer.class);        if (reference != null) {          Object value=refer(reference,method.getParameterTypes()[0]);          if (value != null) {            method.invoke(bean,new Object[]{value});          }        }      } catch (      Exception e) {        throw new BeanInitializationException("Failed to init remote service reference at method " + name + " in class "+ bean.getClass().getName(),e);      }    }  }  Field[] fields=clazz.getDeclaredFields();  for (  Field field : fields) {    try {      if (!field.isAccessible()) {        field.setAccessible(true);      }      MotanReferer reference=field.getAnnotation(MotanReferer.class);      if (reference != null) {        Object value=refer(reference,field.getType());        if (value != null) {          field.set(bean,value);        }      }    } catch (    Exception e) {      throw new BeanInitializationException("Failed to init remote service reference at filed " + field.getName() + " in class "+ bean.getClass().getName(),e);    }  }  return bean;}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true);  unchecked(null);}  }
class C{  Matcher(Pattern parent,CharSequence text){  this.parentPattern=parent;  this.text=text;  int parentGroupCount=Math.max(parent.capturingGroupCount,10);  groups=new int[parentGroupCount * 2];  locals=new int[parent.localCount];  reset();}  }
class C{  protected Component createComponent(){  AttributeSet attr=getElement().getAttributes();  Component comp=StyleConstants.getComponent(attr);  return comp;}  }
class C{  public static ServerSocket bindFreePort() throws IOException {  for (int port=10000; port < 32768; port++) {    try {      return bindPort(port);    } catch (    BindException e) {    }  }  throw new BindException("Unable to bind to a free port");}  }
class C{  public static Class<?> toClass(String type,ClassLoader loader) throws ClassNotFoundException {  Class<?> c=null;  int i0=type.indexOf('[');  int dims=0;  if (i0 > 0) {    for (int i=0; i < type.length(); i++) {      if (type.charAt(i) == '[') {        dims++;      }    }    type=type.substring(0,i0);  }  if ("boolean".equals(type)) {    c=boolean.class;  } else   if ("char".equals(type)) {    c=char.class;  } else   if ("byte".equals(type)) {    c=byte.class;  } else   if ("short".equals(type)) {    c=short.class;  } else   if ("int".equals(type)) {    c=int.class;  } else   if ("long".equals(type)) {    c=long.class;  } else   if ("float".equals(type)) {    c=float.class;  } else   if ("double".equals(type)) {    c=double.class;  } else   if ("void".equals(type)) {    c=void.class;  } else   if (type.indexOf('[') < 0) {    c=loader.loadClass(type);  }  if (dims == 0) {    return c;  }  if (dims == 1) {    return java.lang.reflect.Array.newInstance(c,1).getClass();  }  return java.lang.reflect.Array.newInstance(c,new int[dims]).getClass();}  }
class C{  public String toString(){  return Integer.toString(get());}  }
class C{  public Polyline reverse(){  int alist_len=plaline_len();  PlaLineIntAlist new_list=new PlaLineIntAlist(alist_len);  int index_down=alist_len - 1;  for (int index=0; index < alist_len; ++index) {    new_list.add(plaline(index_down--).opposite());  }  return new Polyline(new_list);}  }
class C{  public DebugGraphics(Graphics graphics,JComponent component){  this(graphics);  setDebugOptions(component.shouldDebugGraphics());}  }
class C{  protected NameValue nameValue() throws ParseException {  if (debug)   dbg_enter("nameValue");  try {    lexer.match(LexerCore.ID);    Token name=lexer.getNextToken();    lexer.SPorHT();    try {      boolean quoted=false;      char la=lexer.lookAhead(0);      if (la == '=') {        lexer.consume(1);        lexer.SPorHT();        String str=null;        if (name.getTokenValue().compareToIgnoreCase(Via.RECEIVED) == 0) {          str=lexer.byteStringNoSemicolon();        } else {          if (lexer.lookAhead(0) == '\"') {            str=lexer.quotedString();            quoted=true;          } else {            lexer.match(LexerCore.ID);            Token value=lexer.getNextToken();            str=value.getTokenValue();          }        }        NameValue nv=new NameValue(name.getTokenValue().toLowerCase(),str);        if (quoted)         nv.setQuotedValue();        return nv;      } else {        return new NameValue(name.getTokenValue().toLowerCase(),null);      }    } catch (    ParseException ex) {      return new NameValue(name.getTokenValue(),null);    }  }  finally {    if (debug)     dbg_leave("nameValue");  }}  }
class C{  public ServicesViewBean(){  super("Services");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createTableModel();  createPageTitleModel();  registerChildren();}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  private static Object invokePrimitive(Object o,String op) throws Throwable {switch (op) {case "not":    o=prepareNumber(o);  if (o == null)   break;if (o instanceof Integer) return ~((Number)o).intValue();if (o instanceof Long) return ~((Number)o).longValue();break;case "negate":o=prepareNumber(o);if (o == null) break;if (o instanceof Integer) return -((Number)o).intValue();if (o instanceof Float) return -((Number)o).floatValue();if (o instanceof Long) return -((Number)o).longValue();if (o instanceof Double) return -((Number)o).doubleValue();break;case "logicNot":return !LtRuntime.castToBool(o);default :throw new LtRuntimeException("unknown one variable operation method " + op);}throw new LtRuntimeException("cannot invoke " + o + "."+ op);}  }
class C{  public boolean check(BrdAbit p_drill_item,PlaVectorInt p_vector,int p_max_recursion_depth,int p_max_via_recursion_depth,Collection<BrdItem> p_ignore_items,TimeLimit p_time_limit){  if (is_stop_requested(p_time_limit))   return false;  if (p_drill_item.is_shove_fixed())   return false;  Collection<BrdItem> contact_list=p_drill_item.get_normal_contacts();  for (  BrdItem curr_contact : contact_list) {    if (!(curr_contact instanceof BrdTracep || curr_contact instanceof BrdAreaConduction)) {      return false;    }  }  Collection<BrdItem> ignore_items=p_ignore_items == null ? new LinkedList<BrdItem>() : p_ignore_items;  ignore_items.add(p_drill_item);  boolean attach_allowed=false;  if (p_drill_item instanceof BrdAbitVia) {    attach_allowed=((BrdAbitVia)p_drill_item).attach_allowed;  }  AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();  for (int curr_layer=p_drill_item.first_layer(); curr_layer <= p_drill_item.last_layer(); ++curr_layer) {    int curr_ind=curr_layer - p_drill_item.first_layer();    ShapeTile curr_shape=p_drill_item.get_tree_shape(search_tree,curr_ind);    if (curr_shape == null)     continue;    ShapeConvex new_shape=(ShapeConvex)curr_shape.translate_by(p_vector);    ShapeTile curr_tile_shape;    curr_tile_shape=new_shape.bounding_octagon();    BrdFromSide from_side=new BrdFromSide(p_drill_item.center_get(),curr_tile_shape);    if (r_board.shove_pad_algo.check_forced_pad(curr_tile_shape,from_side,curr_layer,p_drill_item.net_nos,p_drill_item.clearance_idx(),attach_allowed,ignore_items,p_max_recursion_depth,p_max_via_recursion_depth,true,p_time_limit) == ShoveDrillResult.NOT_DRILLABLE) {      return false;    }  }  return true;}  }
class C{  public FrameBodyWORS(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public PlaSegmentFloat opposite(){  return new PlaSegmentFloat(point_b,point_a);}  }
class C{  public void createEntry(SSOToken token,String entryName,int objectType,String parentDN,Map attributes) throws AMEntryExistsException, AMException, SSOException {  try {    String tokenID=token.getTokenID().toString();    Object[] objs={tokenID,entryName,new Integer(objectType),parentDN,attributes};    client.send(client.encodeMessage("createEntry",objs),sessionCookies.getLBCookie(tokenID),null);  } catch (  AMRemoteException amrex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.createEntry: entryName=" + entryName + ";  AMRemoteException caught exception=",amrex);    }    throw convertException(amrex);  }catch (  SSOException ssoe) {    throw ssoe;  }catch (  RemoteException rex) {    getDebug().error("RemoteServicesImpl.createEntry: caught " + "exception=",rex);    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }catch (  Exception ex) {    if (getDebug().messageEnabled()) {      getDebug().message("RemoteServicesImpl.createEntry: entryName=" + entryName + ";  caught exception=",ex);    }    throw new AMException(AMSDKBundle.getString("1000"),"1000");  }}  }
class C{  public Result delete(DeleteRequest request) throws LdapException {  addTransactionIdControl(request);  return connection.delete(request);}  }
class C{  public static int dpToPx(int dp){  float density=Resources.getSystem().getDisplayMetrics().density;  return Math.round(dp * density);}  }
class C{  public ByteArrayBuilder appendDN(DN dn){  appendString(dn.toString());  return this;}  }
class C{  public static String[][] read(Set fileNames,LogQuery logQuery,Object userCrdential) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, Exception {  LogReader lr=new LogReader();  lr.readConfiguration();  if (fileNames == null) {    throw new IllegalArgumentException("filenames can't be null");  }  if (fileNames.isEmpty()) {    throw new IllegalArgumentException("filenames can't be empty");  } else {    for (Iterator it=fileNames.iterator(); it.hasNext(); ) {      String ss=(String)it.next();      if (ss != null) {        ss=ss.trim();      }      if ((ss == null) || (ss.length() == 0)) {        throw new IllegalArgumentException("filename cannot be null");      }    }  }  if (maxReordToReturn <= 0) {    maxReordToReturn=1;  }  if (logQuery != null) {    if (logQuery.getNumRecordsWanted() < LogQuery.ALL_RECORDS) {      logQuery.setMaxRecord(maxReordToReturn);    } else     if ((logQuery.getNumRecordsWanted() == LogQuery.MOST_RECENT_MAX_RECORDS) && (logTypeIsFile)) {      logQuery.setMaxRecord(maxReordToReturn);    }  } else {    logQuery=new LogQuery(maxReordToReturn);  }  String tmpF=getAllFilenames(fileNames);  setLoggerName(tmpF);  if (lr.isAllowed(userCrdential) != true) {    throw new AMLogException(tmpF + ":" + AMLogException.LOG_RD_AUTH_FAILED);  }  if (logTypeIsFile) {    Set fullFileNames=new HashSet();    for (Iterator it=fileNames.iterator(); it.hasNext(); ) {      String ss=(String)it.next();      ss=logPathName + ss;      fullFileNames.add(ss);    }    queryResult=currentHandler.logRecRead(fullFileNames,logQuery,true);  } else {    queryResult=currentDBHandler.logRecRead(fileNames,logQuery,manager,true);  }  return queryResult;}  }
class C{  public Document createDefaultDocument(){  return new DefaultStyledDocument();}  }
class C{  public Set searchSubOrgNames(String tokenID,String dn,String filter,int numOfEntries,boolean sortResults,boolean ascendingOrder,boolean recursive) throws SMSException, SSOException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::searchSubOrgNames dn: " + dn);  }  CachedSubEntries ce=CachedSubEntries.getInstance(getToken(tokenID),dn);  return (ce.searchSubOrgNames(getToken(tokenID),filter,recursive));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  int length;  java.util.List expectedWhitespace=new java.util.ArrayList();  expectedWhitespace.add("#text");  expectedWhitespace.add("employeeId");  expectedWhitespace.add("#text");  expectedWhitespace.add("name");  expectedWhitespace.add("#text");  expectedWhitespace.add("position");  expectedWhitespace.add("#text");  expectedWhitespace.add("salary");  expectedWhitespace.add("#text");  expectedWhitespace.add("gender");  expectedWhitespace.add("#text");  expectedWhitespace.add("address");  expectedWhitespace.add("#text");  java.util.List expectedNoWhitespace=new java.util.ArrayList();  expectedNoWhitespace.add("employeeId");  expectedNoWhitespace.add("name");  expectedNoWhitespace.add("position");  expectedNoWhitespace.add("salary");  expectedNoWhitespace.add("gender");  expectedNoWhitespace.add("address");  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  length=(int)employeeList.getLength();  for (int indexN100A4=0; indexN100A4 < employeeList.getLength(); indexN100A4++) {    child=(Node)employeeList.item(indexN100A4);    childName=child.getNodeName();    result.add(childName);  }  if (equals(6,length)) {    assertEquals("nowhitespace",expectedNoWhitespace,result);  } else {    assertEquals("whitespace",expectedWhitespace,result);  }}  }
class C{  public RenderedImage createScaledRendering(int w,int h,RenderingHints hints){  double sx=(double)w / getWidth();  double sy=(double)h / getHeight();  if (Math.abs(sx / sy - 1.0) < 0.01) {    sx=sy;  }  AffineTransform usr2dev=AffineTransform.getScaleInstance(sx,sy);  RenderContext newRC=new RenderContext(usr2dev,hints);  return createRendering(newRC);}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(nonGitDirectory);  } catch (  Exception ignore) {    System.err.println("cannot remove " + nonGitDirectory);  }}  }
class C{  void read() throws SSOException, SMSException {  read(ssoToken);}  }
class C{  boolean supportsMultipleConfigurations(){  return (inheritance != null) && inheritance.equalsIgnoreCase("multiple");}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttribute;  NodeList addressElementList;  Element testAddress;  Element newElement;  Attr attrAddress;  Node appendedChild;  Attr setAttr1;  Attr setAttr2;  doc=(Document)load("hc_staff",true);  addressElementList=doc.getElementsByTagName("body");  testAddress=(Element)addressElementList.item(0);  newElement=doc.createElement("p");  appendedChild=testAddress.appendChild(newElement);  newAttribute=doc.createAttribute("title");  setAttr1=newElement.setAttributeNode(newAttribute);{    boolean success=false;    try {      setAttr2=testAddress.setAttributeNode(newAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  public int read(char cbuf[],int off,int len) throws IOException {  return in.read(cbuf,off,len);}  }
class C{  private static void verifyFilterComponents(SearchFilter filter,AttributeType type) throws AciException {switch (filter.getFilterType()) {case AND:case OR:{      for (      SearchFilter f : filter.getFilterComponents()) {        verifyFilterComponents(f,type);      }      break;    }case NOT:{    SearchFilter f=filter.getNotComponent();    verifyFilterComponents(f,type);    break;  }default :{  AttributeType attrType=filter.getAttributeType();  if (!attrType.equals(type)) {    throw new AciException(WARN_ACI_SYNTAX_INVALID_TARGATTRFILTERS_FILTER_LISTS_ATTR_FILTER.get(filter));  }}}}  }
class C{  protected void continueDrag(MouseEvent e){  dragDividerTo(positionForMouseEvent(e));}  }
class C{  protected void checkStream() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  public void testLoginException02(){  LoginException lE;  for (int i=0; i < msgs.length; i++) {    lE=new LoginException(msgs[i]);    assertEquals("getMessage() must return: ".concat(msgs[i]),lE.getMessage(),msgs[i]);    assertNull("getCause() must return null",lE.getCause());  }}  }
class C{  public JScrollPane(Component view){  this(view,VERTICAL_SCROLLBAR_AS_NEEDED,HORIZONTAL_SCROLLBAR_AS_NEEDED);}  }
class C{  private static Map<String,File> newAccessOrder(){  return new LinkedHashMap<String,File>(MAX_SIZE,0.75f,true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemreturnvalue.class,args);}  }
class C{  @Override public void onSupportActionModeStarted(@NonNull final ActionMode mode){  delegate.onSupportActionModeStarted(mode);}  }
class C{  protected void skipRemainingTagsInCurrentIfd() throws IOException, ExifInvalidFormatException {  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  int offset=mTiffStream.getReadByteCount();  if (offset > endOfTags) {    return;  }  if (mNeedToParseOffsetsInCurrentIfd) {    while (offset < endOfTags) {      mTag=readTag();      offset+=TAG_SIZE;      if (mTag == null) {        continue;      }      checkOffsetOrImageTag(mTag);    }  } else {    skipTo(endOfTags);  }  long ifdOffset=readUnsignedLong();  if (mIfdType == IfdId.TYPE_IFD_0 && (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested())) {    if (ifdOffset > 0) {      registerIfd(IfdId.TYPE_IFD_1,ifdOffset);    }  }}  }
class C{  void removeOutlines(PdfPage page){  if (getDocument().getWriter() == null) {    return;  }  if (hasOutlines()) {    getOutlines(false);    if (pagesWithOutlines.size() > 0) {      if (pagesWithOutlines.get(page.getPdfObject()) != null) {        for (        PdfOutline outline : pagesWithOutlines.get(page.getPdfObject())) {          outline.removeOutline();        }      }    }  }}  }
class C{  public synchronized void shutdown(){  for (  ClassLoaderLogInfo clLogInfo : classLoaderLoggers.values()) {    resetLoggers(clLogInfo);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.SupportingTokensElement createSupportingTokensElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.SupportingTokensElementImpl();}  }
class C{  public BindOperation processSASLBind(DN bindDN,String saslMechanism,ByteString saslCredentials){  return processSASLBind(bindDN,saslMechanism,saslCredentials,null);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.StatusType createStatusType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.StatusTypeImpl();}  }
class C{  public SQLClientInfoException(String reason,String sqlState,int vendorCode,Map<String,ClientInfoStatus> failedProperties){  super(reason,sqlState,vendorCode);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  public void addMembers(Guid[] guids) throws UMSException {  if (guids == null) {    String msg=i18n.getString(IUMSConstants.BAD_GUID);    throw new IllegalArgumentException(msg);  }  if (guids == null) {    throw new IllegalArgumentException(i18n.getString(IUMSConstants.NULL_GUIDS));  }  for (int i=0; i < guids.length; i++) {    addMember(guids[i]);  }}  }
class C{  @SuppressWarnings("deprecation") private static void addSupportForGlobalEventAttributes(SQLiteDatabase db){  RegisteredEventAttributeDbAdapter eventAttributeDbAdapter=new RegisteredEventAttributeDbAdapter(db);  DataTypeDbAdapter dataTypeDbAdapter=new DataTypeDbAdapter(db);  Cursor cursor=dataTypeDbAdapter.fetchAll(OmniDate.DB_NAME,OmniDate.class.getName());  cursor.moveToFirst();  long dataTypeIdDate=CursorHelper.getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID);  long dateAttributeID=eventAttributeDbAdapter.insertGeneralAttribute(Event.ATTRIBUTE_TIME,dataTypeIdDate);  cursor=dataTypeDbAdapter.fetchAll(OmniArea.DB_NAME,OmniArea.class.getName());  cursor.moveToFirst();  long dataTypeIdArea=CursorHelper.getLongFromCursor(cursor,DataTypeDbAdapter.KEY_DATATYPEID);  long areaAttributeID=eventAttributeDbAdapter.insertGeneralAttribute(Event.ATTRIBUTE_LOCATION,dataTypeIdArea);  cursor.close();  RuleFilterDbAdapter ruleFilterDbAdapter=new RuleFilterDbAdapter(db);  RuleActionParameterDbAdapter ruleActionParamDbAdapter=new RuleActionParameterDbAdapter(db);  generalizeAttribute(SMSReceivedEvent.ATTRIB_MESSAGE_TIME,Event.ATTRIBUTE_TIME,dateAttributeID,eventAttributeDbAdapter,ruleFilterDbAdapter,ruleActionParamDbAdapter);  generalizeAttribute(PhoneCallEvent.ATTRIBUTE_TIMESTAMP,Event.ATTRIBUTE_TIME,dateAttributeID,eventAttributeDbAdapter,ruleFilterDbAdapter,ruleActionParamDbAdapter);  generalizeAttribute(LocationChangedEvent.ATTRIBUTE_CURRENT_LOCATION,Event.ATTRIBUTE_LOCATION,areaAttributeID,eventAttributeDbAdapter,ruleFilterDbAdapter,ruleActionParamDbAdapter);  generalizeAttribute(TimeTickEvent.ATTRIBUTE_CURRENT_TIME,Event.ATTRIBUTE_TIME,dateAttributeID,eventAttributeDbAdapter,ruleFilterDbAdapter,ruleActionParamDbAdapter);}  }
class C{  public void updateStandardAttribute(AttributeType attr,Schema schema){  standardAttributePanel.update(attr,schema);  schemaElementPanel=standardAttributePanel;  ((CardLayout)mainPanel.getLayout()).show(mainPanel,standardAttributePanel.getTitle().toString());}  }
class C{  public AttributeSet removeAttributes(AttributeSet old,Enumeration<?> names){  return super.removeAttributes(old,names);}  }
class C{  private void enableMapper() throws Exception {  String externalDN="cn=EXTERNAL,cn=SASL Mechanisms,cn=config";  String mapperDN="cn=Subject Attribute to User Attribute," + "cn=Certificate Mappers,cn=config";  assertModifyReplaceIsSuccess(externalDN,"ds-cfg-certificate-mapper",mapperDN);}  }
class C{  protected void tearDown(){  objArray=null;  myobjArray=null;  ll=null;  myll=null;  reversedLinkedList=null;  myReversedLinkedList=null;  s=null;  mys=null;  hm=null;}  }
class C{  public void paintSeparatorForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  private void breakBarrier(){  generation.broken=true;  count=parties;  trip.signalAll();}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  acks++;  if (acks == 5) {    try {      System.out.println("shootme: got an ACK! ");      System.out.println("Dialog State = " + dialog.getState());      SipProvider provider=(SipProvider)requestEvent.getSource();      Request messageRequest=dialog.createRequest(Request.MESSAGE);      CSeqHeader cseq=(CSeqHeader)messageRequest.getHeader(CSeqHeader.NAME);      ClientTransaction ct=provider.getNewClientTransaction(messageRequest);      cseq.setSeqNumber(1);      ct.sendRequest();    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  public void toBytes(){  if (!byteC.isNull()) {    type=T_BYTES;    return;  }  toString();  type=T_BYTES;  Charset charset=byteC.getCharset();  ByteBuffer result=charset.encode(strValue);  byteC.setBytes(result.array(),result.arrayOffset(),result.limit());}  }
class C{  private void readAttributeListDeclaration() throws IOException, XmlPullParserException {  read(START_ATTLIST);  skip();  String elementName=readName();  while (true) {    skip();    int c=peekCharacter();    if (c == '>') {      position++;      return;    }    String attributeName=readName();    skip();    if (position + 1 >= limit && !fillBuffer(2)) {      throw new XmlPullParserException("Malformed attribute list",this,null);    }    if (buffer[position] == NOTATION[0] && buffer[position + 1] == NOTATION[1]) {      read(NOTATION);      skip();    }    c=peekCharacter();    if (c == '(') {      position++;      while (true) {        skip();        readName();        skip();        c=peekCharacter();        if (c == ')') {          position++;          break;        } else         if (c == '|') {          position++;        } else {          throw new XmlPullParserException("Malformed attribute type",this,null);        }      }    } else {      readName();    }    skip();    c=peekCharacter();    if (c == '#') {      position++;      c=peekCharacter();      if (c == 'R') {        read(REQUIRED);      } else       if (c == 'I') {        read(IMPLIED);      } else       if (c == 'F') {        read(FIXED);      } else {        throw new XmlPullParserException("Malformed attribute type",this,null);      }      skip();      c=peekCharacter();    }    if (c == '"' || c == '\'') {      position++;      String value=readValue((char)c,true,true,ValueContext.ATTRIBUTE);      if (peekCharacter() == c) {        position++;      }      defineAttributeDefault(elementName,attributeName,value);    }  }}  }
class C{  public final void println(final LocalizableMessage msg){  if (!isQuiet()) {    out.println(wrap(msg));  }}  }
class C{  protected String paramString(){  String tipTextString=(tipText != null ? tipText : "");  return super.paramString() + ",tipText=" + tipTextString;}  }
class C{  public final boolean removeElement(Object s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s) {      if ((i + 1) < m_firstFree)       System.arraycopy(m_map,i + 1,m_map,i - 1,m_firstFree - i); else       m_map[i]=null;      m_firstFree--;      return true;    }  }  return false;}  }
class C{  public MoveNextLineAndShowTextWithSpacingOperator(SetTextWordSpacingOperator setTextWordSpacing,SetTextCharacterSpacingOperator setTextCharacterSpacing,MoveNextLineAndShowTextOperator moveNextLineAndShowText){  this.setTextWordSpacing=setTextWordSpacing;  this.setTextCharacterSpacing=setTextCharacterSpacing;  this.moveNextLineAndShowText=moveNextLineAndShowText;}  }
class C{  public boolean canCreateInternalClients(){  boolean allow=false;  Set vals=getServiceAttribute(ENABLE_CLIENT_CREATION_ATTR);  if (vals != null) {    Iterator iter=vals.iterator();    Boolean perms=Boolean.valueOf((String)iter.next());    allow=perms.booleanValue();  }  return allow;}  }
class C{  public final HashCode append(long value){  hashCode=combine(hashCode,value);  return this;}  }
class C{  public static PdfAction createHide(String text,boolean hidden){  return new PdfAction().put(PdfName.S,PdfName.Hide).put(PdfName.T,new PdfString(text)).put(PdfName.H,new PdfBoolean(hidden));}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.SingleSignOutSubscriptionEndpointElement createSingleSignOutSubscriptionEndpointElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.SingleSignOutSubscriptionEndpointElementImpl();}  }
class C{  public RESTEndpointBuilder addModuleParameters(){  parameters.put(AUTH_INDEX_TYPE_NAME,AUTH_INDEX_TYPE_VALUE);  parameters.put(AUTH_INDEX_VALUE_NAME,AUTH_INDEX_VALUE_VALUE);  return this;}  }
class C{  public static SearchFilter createNOTFilter(SearchFilter notComponent){  return new SearchFilter(FilterType.NOT,null,notComponent,null,null,null,null,null,null,false);}  }
class C{  public static <C extends ConfigurationClient,S extends Configuration>Builder<C,S> createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder<>(d,propertyName);}  }
class C{  public void removeSpan(Object what){  if (mIndexOfSpan == null)   return;  Integer i=mIndexOfSpan.remove(what);  if (i != null) {    removeSpan(i.intValue());  }}  }
class C{  static String generateErrorCorrection(CharSequence dataCodewords,int errorCorrectionLevel){  int k=getErrorCorrectionCodewordCount(errorCorrectionLevel);  char[] e=new char[k];  int sld=dataCodewords.length();  for (int i=0; i < sld; i++) {    int t1=(dataCodewords.charAt(i) + e[e.length - 1]) % 929;    int t2;    int t3;    for (int j=k - 1; j >= 1; j--) {      t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][j]) % 929;      t3=929 - t2;      e[j]=(char)((e[j - 1] + t3) % 929);    }    t2=(t1 * EC_COEFFICIENTS[errorCorrectionLevel][0]) % 929;    t3=929 - t2;    e[0]=(char)(t3 % 929);  }  StringBuilder sb=new StringBuilder(k);  for (int j=k - 1; j >= 0; j--) {    if (e[j] != 0) {      e[j]=(char)(929 - e[j]);    }    sb.append(e[j]);  }  return sb.toString();}  }
class C{  public String waitForConfigChange() throws InterruptedException {  logger.message("Entering ConfigChangeListener.waitForConfigChange()");  String msg=null;  try {    msg=configChangedQueue.take();  } catch (  final InterruptedException e) {    logger.warning("Thread waiting for config change has been interrupted.");    throw e;  }  logger.message("Exiting ConfigChangeListener.waitForConfigChange, returning " + msg);  return msg;}  }
class C{  protected void tearDown(){}  }
class C{  private String s(Integer val){  return String.valueOf(val);}  }
class C{  synchronized void commitAndPushCommittedChanges(CSN csn,LDAPUpdateMsg msg){  commit(csn,msg);  pushCommittedChanges();}  }
class C{  public FactoryConfigurationError(){  this.exception=null;}  }
class C{  public synchronized boolean isSubsetOfSet(NSSet otherSet){  for (  NSObject o : set) {    if (!otherSet.containsObject(o))     return false;  }  return true;}  }
class C{  public StatusCode(Element statusCode) throws SAMLException {  if (statusCode == null) {    SAMLUtils.debug.message("StatusCode: null input.");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));  }  String tagName=statusCode.getLocalName();  if (!tagName.equals("StatusCode")) {    SAMLUtils.debug.message("StatusCode: Wrong input: " + tagName);    throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));  }  value=statusCode.getAttribute("Value");  if ((value == null) || (value.length() == 0)) {    SAMLUtils.debug.message("StatusCode: empty attribute Value.");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("missingAttribute"));  }  List subCodenl=XMLUtils.getElementsByTagNameNS1((Element)statusCode,SAMLConstants.PROTOCOL_NAMESPACE_URI,"StatusCode");  int length=subCodenl.size();  if (length == 1) {    subStatusCode=new StatusCode((Element)subCodenl.get(0));  } else   if (length != 0) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("StatusCode: Included more than one" + " <StatusCode> in element " + tagName);    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("moreElement"));  }}  }
class C{  public AsfTagTextField createCopyrightField(final String content){  return new AsfTagTextField(AsfFieldKey.COPYRIGHT,content);}  }
class C{  public ActivationException(){  initCause(null);}  }
class C{  public ServletFilterRegistratorSvc(JsonValue config){  this.config=config;}  }
class C{  public static void initLogFileHandler(File file) throws IOException {  if (!isInitialized()) {    logFile=file;    fileHandler=new FileHandler(logFile.getCanonicalPath());    fileHandler.setFormatter(JDKLogging.getFormatter());    boolean initialLogDone=false;    for (    String root : JDKLogging.getOpendDJLoggingRoots()) {      Logger logger=Logger.getLogger(root);      if (disableLoggingToConsole()) {        logger.setUseParentHandlers(false);      }      logger.addHandler(fileHandler);      if (!initialLogDone) {        logger.info(getInitialLogRecord());        initialLogDone=true;      }    }  }}  }
class C{  public void extend_selection_to_whole_connections(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  set_interactive_state(((StateSelectedItem)interactive_state).extent_to_whole_connections());}  }
class C{  public void signXML(String certAlias) throws SAMLException {  FSUtils.debug.message("FSNameRegistrationRequest.signXML: Called");  if (signed) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationRequest.signXML: " + "the assertion is already signed.");    }    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"alreadySigned",null);  }  if (certAlias == null || certAlias.length() == 0) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"cannotFindCertAlias",null);  }  try {    XMLSignatureManager manager=XMLSignatureManager.getInstance();    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,null,IFSConstants.ID,this.id,false);    } else     if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      signatureString=manager.signXML(this.toXMLString(true,true),certAlias,null,IFSConstants.REQUEST_ID,this.getRequestID(),false);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("invalid minor version.");      }    }    signature=XMLUtils.toDOMDocument(signatureString,FSUtils.debug).getDocumentElement();    signed=true;    xmlString=this.toXMLString(true,true);  } catch (  Exception e) {    throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"signFailed",null);  }}  }
class C{  public static <K,V>Map<V,K> invertMap(final Map<K,V> map){  Reject.ifNull(map);  final Map<V,K> newMap=new HashMap<V,K>(map.size());  for (  Map.Entry<K,V> entry : map.entrySet()) {    newMap.put(entry.getValue(),entry.getKey());  }  return newMap;}  }
class C{  protected void doMkcol(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  if (readOnly) {    resp.sendError(WebdavStatus.SC_FORBIDDEN);    return;  }  if (isLocked(req)) {    resp.sendError(WebdavStatus.SC_LOCKED);    return;  }  String path=getRelativePath(req);  WebResource resource=resources.getResource(path);  if (resource.exists()) {    StringBuilder methodsAllowed=determineMethodsAllowed(req);    resp.addHeader("Allow",methodsAllowed.toString());    resp.sendError(WebdavStatus.SC_METHOD_NOT_ALLOWED);    return;  }  if (req.getContentLengthLong() > 0) {    DocumentBuilder documentBuilder=getDocumentBuilder();    try {      documentBuilder.parse(new InputSource(req.getInputStream()));      resp.sendError(WebdavStatus.SC_NOT_IMPLEMENTED);      return;    } catch (    SAXException saxe) {      resp.sendError(WebdavStatus.SC_UNSUPPORTED_MEDIA_TYPE);      return;    }  }  if (resources.mkdir(path)) {    resp.setStatus(WebdavStatus.SC_CREATED);    lockNullResources.remove(path);  } else {    resp.sendError(WebdavStatus.SC_CONFLICT,WebdavStatus.getStatusText(WebdavStatus.SC_CONFLICT));  }}  }
class C{  @Override public synchronized void close() throws IOException {  if (keyDeserializer != null) {    keyDeserializer.close();  }  if (valDeserializer != null) {    valDeserializer.close();  }  in.close();}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(){  return getHandler();}  }
class C{  public static void clearInstanceAfterTests(){  instance=null;}  }
class C{  public char last(){  pos=offset + count;  if (count != 0) {    pos-=1;    return array[pos];  }  return DONE;}  }
class C{  private void open(File fileName,boolean append) throws IOException {  int len=0;  len=(int)fileName.length();  FileOutputStream fout=new FileOutputStream(fileName.toString(),true);  BufferedOutputStream bout=new BufferedOutputStream(fout);  meteredStream=new MeteredStream(bout,len);  setOutputStream(meteredStream);  checkForHeaderWritten(fileName.toString());}  }
class C{  public void update(ByteBuffer headerData){  byte[] b=new byte[HEADER_LENGTH];  headerData.get(b);  dataBuffer=ByteBuffer.wrap(b);  this.length=Utils.getIntBE(b,OFFSET_POS,OFFSET_LENGTH - 1);  this.id=Utils.getString(b,IDENTIFIER_POS,IDENTIFIER_LENGTH,"ISO-8859-1");  logger.finest("Mp4BoxHeader id:" + id + ":length:"+ length);  if (id.equals("\0\0\0\0")) {    throw new NullBoxIdException(ErrorMessage.MP4_UNABLE_TO_FIND_NEXT_ATOM_BECAUSE_IDENTIFIER_IS_INVALID.getMsg(id));  }  if (length < HEADER_LENGTH) {    throw new InvalidBoxHeaderException(ErrorMessage.MP4_UNABLE_TO_FIND_NEXT_ATOM_BECAUSE_IDENTIFIER_IS_INVALID.getMsg(id,length));  }}  }
class C{  private String formGotoUrl(HttpServletRequest request){  StringBuilder redirectURL=new StringBuilder(2048);  String host=request.getHeader("Host");  if (host == null) {    getDebug().message("ConsoleServletBase.formGotoURL Host header is null.");    host=getConsoleHost();  }  String loginURL=SystemProperties.get(Constants.LOGIN_URL);  if ((loginURL != null) && (loginURL.trim().length() > 0)) {    redirectURL.append(loginURL);  } else {    if (isConsoleRemote()) {      redirectURL.append(getServerURL()).append(getServerURI()).append(AMAdminConstants.URL_LOGIN);    } else {      String protocol=RequestUtils.getRedirectProtocol(request.getScheme(),host);      redirectURL.append(protocol).append("://").append(host).append(getServerURI()).append(AMAdminConstants.URL_LOGIN);    }  }  redirectURL.append(LOGIN_PARAM);  if (isConsoleRemote()) {    redirectURL.append(getConsoleURL());  } else {    String protocol=RequestUtils.getRedirectProtocol(request.getScheme(),host);    redirectURL.append(protocol).append("://").append(host);  }  redirectURL.append(getConsoleURI()).append(URL_ADMIN_FRAME);  String amconsoleRedirect=request.getParameter(PARAM_REDIRECT);  if ((amconsoleRedirect != null) && amconsoleRedirect.equals("1")) {    String queryParam=getQueryParameters(request);    redirectURL.append(queryParam);  }  return redirectURL.toString();}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case MENU_SETTINGS:    startActivity(new Intent(this,ActivitySettings.class));  return true;case MENU_ADD_RULE:Intent intent=new Intent(this,ActivityChooseRootEvent.class);startActivityForResult(intent,REQUEST_ACTIVITY_CREATE_RULE);return true;case MENU_ENABLE_ALL:ruleListAdapter.setRulesEnabled(true);return true;case MENU_DISABLE_ALL:ruleListAdapter.setRulesEnabled(false);return true;case MENU_HELP:help();return true;}return super.onOptionsItemSelected(item);}  }
class C{  public JKSecurityException(){  super();}  }
class C{  public static void deleteDirectory(File dir) throws IOException {  if (dir == null || !dir.exists()) {    return;  }  if (dir.isDirectory()) {    for (    String child : dir.list()) {      deleteDirectory(new File(dir,child));    }  }  dir.delete();}  }
class C{  public ScheduledThreadPoolExecutor(int corePoolSize,RejectedExecutionHandler handler){  super(corePoolSize,Integer.MAX_VALUE,0,NANOSECONDS,new DelayedWorkQueue(),handler);}  }
class C{  public PaddingException(Throwable ex){  super(ex);}  }
class C{  public static void removeNamedConfig(String configName,String orgName,SSOToken token) throws SMSException, SSOException, AMConfigurationException {  if (debug.messageEnabled()) {    debug.message("removeNamedConfig name=" + configName + ",org="+ orgName);  }  if (configName == null) {    throw new AMConfigurationException(bundleName,"null-name");  }  ServiceConfigManager scm=new ServiceConfigManager(SERVICE_NAME,token);  ServiceConfig oConfig=scm.getOrganizationConfig(orgName,null);  if (oConfig == null) {    throw new AMConfigurationException(bundleName,"service-not-registered");  }  ServiceConfig namedConfig=oConfig.getSubConfig(NAMED_CONFIGURATION);  if (namedConfig == null) {    throw new AMConfigurationException(bundleName,"named-config-not-defined");  }  ServiceConfig pConfig=namedConfig.getSubConfig(configName);  if (pConfig == null) {    throw new AMConfigurationException(bundleName,"config-not-exists");  }  namedConfig.removeSubConfig(configName);}  }
class C{  protected PropertyChangeListener createActionChangeListener(JMenuItem b){  return b.createActionPropertyChangeListener0(b.getAction());}  }
class C{  public void objectRenamed(AMEvent event){  if (event == null) {    debug.error("AMConfiguration.objectChanged, event null");    return;  }  if (debug.messageEnabled()) {    debug.message("objectRenamed, type=" + event.getEventType() + ", sDN="+ event.getSourceDN()+ ", sType="+ event.getSourceType());  }  processSDKNotification();}  }
class C{  public StateInteractive process_logfile_point(PlaPointFloat p_point){  return this;}  }
class C{  public void addFragment(BaseIntroFragment fragment,int backgroundColor){  mBackgroundColors.put(mFragments.size(),backgroundColor);  mFragments.add(fragment);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String employeeNamespace;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("employee");  testEmployee=elementList.item(1);  employeeNamespace=testEmployee.getNamespaceURI();  assertNull("throw_Null",employeeNamespace);}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  populateValues=true;  forwardTo();}  }
class C{  public static List<Foo> findByField2(boolean field2){  return getPersistence().findByField2(field2);}  }
class C{  public void postDeregister(){}  }
class C{  public void email(String realm,String to,String subject,String message) throws MessagingException {  Reject.ifNull(realm,to,subject,message);  String emailAddress=resolveEmailAddress(to,realm);  if (emailAddress == null) {    throw new MessagingException("User, " + to + ", realm, "+ realm+ ", does not have an email address specified");  }  getMailServer(realm).sendHtmlEmail(emailAddress,subject,message);}  }
class C{  protected void uninstallListeners(){  spinner.removePropertyChangeListener(propertyChangeListener);  spinner.removeChangeListener(handler);  JComponent editor=spinner.getEditor();  removeEditorBorderListener(editor);  if (editor instanceof JSpinner.DefaultEditor) {    JTextField tf=((JSpinner.DefaultEditor)editor).getTextField();    if (tf != null) {      tf.removeFocusListener(nextButtonHandler);      tf.removeFocusListener(previousButtonHandler);    }  }  propertyChangeListener=null;  handler=null;}  }
class C{  private void iconify(){  Frame frame=getFrame();  if (frame != null) {    frame.setExtendedState(state | Frame.ICONIFIED);  }}  }
class C{  public final void testGetPrimeExponentP(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getPrimeExponentP()));}  }
class C{  synchronized void recursiveSync(int iter){  if (iter < 40) {    recursiveSync(iter + 1);  } else {    System.out.println("recursiveSync ok");  }}  }
class C{  public UnrecoverableKeyException(String msg){  super(msg);}  }
class C{  SubMap(ConcurrentSkipListMap<K,V> map,K fromKey,boolean fromInclusive,K toKey,boolean toInclusive,boolean isDescending){  if (fromKey != null && toKey != null && map.compare(fromKey,toKey) > 0)   throw new IllegalArgumentException("inconsistent range");  this.m=map;  this.lo=fromKey;  this.hi=toKey;  this.loInclusive=fromInclusive;  this.hiInclusive=toInclusive;  this.isDescending=isDescending;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.TokenIssuerEndpointElement createTokenIssuerEndpointElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.TokenIssuerEndpointElementImpl();}  }
class C{  private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  public URIReferenceException(String message){  super(message);}  }
class C{  public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintProgressBarBorder(context,g,x,y,w,h);}  }
class C{  @Get public Representation endSession() throws OAuth2RestletException {  final OAuth2Request request=requestFactory.create(getRequest());  final String idToken=request.getParameter(OAuth2Constants.Params.END_SESSION_ID_TOKEN_HINT);  final String redirectUri=request.getParameter(OAuth2Constants.Params.POST_LOGOUT_REDIRECT_URI);  try {    openIDConnectEndSession.endSession(request,idToken);    if (StringUtils.isNotEmpty(redirectUri)) {      return handleRedirect(request,idToken,redirectUri);    }  } catch (  OAuth2Exception e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),null);  }  return null;}  }
class C{  public LinkedHashMapEntry(){  this(DN.rootDN());}  }
class C{  public ContactHeader createTiContact() throws Exception {  try {    ContactHeader contact=tiHeaderFactory.createContactHeader();    String ip=tiSipProvider.getSipStack().getIPAddress();    if (ip == null) {      ListeningPoint lp=(ListeningPoint)tiSipProvider.getSipStack().getListeningPoints().next();      ip=lp.getIPAddress();    }    SipURI srcSipURI=tiAddressFactory.createSipURI(null,ip);    srcSipURI.setPort(tiSipProvider.getListeningPoint("udp").getPort());    srcSipURI.setTransportParam("udp");    Address address=tiAddressFactory.createAddress(srcSipURI);    address.setDisplayName("TI Contact");    contact.setAddress(address);    return contact;  } catch (  Exception ex) {    ex.printStackTrace();    assertTrue(false);    throw ex;  }}  }
class C{  public static void loadAgentToCurrent(String agentPath){  String vmName=ManagementFactory.getRuntimeMXBean().getName();  String pid=vmName.substring(0,vmName.indexOf('@'));  loadAgent(agentPath,pid);}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public AccessDeniedException(String file,String other,String reason){  super(file,other,reason);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI=null;  String qualifiedName="k:local";  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  Document aNewDoc;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      aNewDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  private void clearReferencesRmiTargets(){  try {    Class<?> objectTargetClass=Class.forName("sun.rmi.transport.Target");    Field cclField=objectTargetClass.getDeclaredField("ccl");    cclField.setAccessible(true);    Field stubField=objectTargetClass.getDeclaredField("stub");    stubField.setAccessible(true);    Class<?> objectTableClass=Class.forName("sun.rmi.transport.ObjectTable");    Field objTableField=objectTableClass.getDeclaredField("objTable");    objTableField.setAccessible(true);    Object objTable=objTableField.get(null);    if (objTable == null) {      return;    }    if (objTable instanceof Map<?,?>) {      Iterator<?> iter=((Map<?,?>)objTable).values().iterator();      while (iter.hasNext()) {        Object obj=iter.next();        Object cclObject=cclField.get(obj);        if (this == cclObject) {          iter.remove();          Object stubObject=stubField.get(obj);          log.error(sm.getString("webappClassLoader.clearRmi",stubObject.getClass().getName(),stubObject));        }      }    }    Field implTableField=objectTableClass.getDeclaredField("implTable");    implTableField.setAccessible(true);    Object implTable=implTableField.get(null);    if (implTable == null) {      return;    }    if (implTable instanceof Map<?,?>) {      Iterator<?> iter=((Map<?,?>)implTable).values().iterator();      while (iter.hasNext()) {        Object obj=iter.next();        Object cclObject=cclField.get(obj);        if (this == cclObject) {          iter.remove();        }      }    }  } catch (  ClassNotFoundException e) {    log.info(sm.getString("webappClassLoader.clearRmiInfo",getContextName()),e);  }catch (  SecurityException|NoSuchFieldException|IllegalArgumentException|IllegalAccessException e) {    log.warn(sm.getString("webappClassLoader.clearRmiFail",getContextName()),e);  }catch (  Exception e) {    JreCompat jreCompat=JreCompat.getInstance();    if (jreCompat.isInstanceOfInaccessibleObjectException(e)) {      log.warn(sm.getString("webappClassLoader.addExports"));    } else {      throw e;    }  }}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  String name=getStringOptionValue(PARAM_NAME);  String[] params={realm,name};  String description=getStringOptionValue(PARAM_DESCRIPTION);  boolean hasDescription=(description != null) && description.trim().length() > 0;  String actions=getStringOptionValue(PARAM_ACTIONS);  ApplicationPrivilege.PossibleAction action=(actions != null) ? getActions() : null;  if (!hasDescription && (action == null)) {    throw new CLIException(getResourceString("update-application-privilege-invalid"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  Subject userSubject=SubjectUtils.createSubject(getAdminSSOToken());  ApplicationPrivilegeManager apm=ApplicationPrivilegeManager.getInstance(realm,userSubject);  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UPDATE_APPLICATION_PRIVILEGE",params);  try {    ApplicationPrivilege appPrivilege=apm.getPrivilege(name);    if (hasDescription) {      appPrivilege.setDescription(description);    }    if (action != null) {      appPrivilege.setActionValues(action);    }    apm.replacePrivilege(appPrivilege);    Object[] msgParam={name};    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("update-application-privilege-succeeded"),msgParam));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_UPDATE_APPLICATION_PRIVILEGE",params);  } catch (  EntitlementException ex) {    String[] paramExs={realm,name,ex.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_UPDATE_APPLICATION_PRIVILEGE",paramExs);    throw new CLIException(ex,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void addChildElementAt(XMLElement child,int index) throws Exception {  addChildElementAt(child,index,false);}  }
class C{  public void stopAutoBlurUpdate(){  blurController.stopAutoBlurUpdate();}  }
class C{  public IOException ioException(){  return lastException;}  }
class C{  public String toString(){  return value;}  }
class C{  boolean casValue(Object cmp,Object val){  return UNSAFE.compareAndSwapObject(this,valueOffset,cmp,val);}  }
class C{  public void testDomainMatchesOnLocalAddresses(){  assertFalse(HttpCookie.domainMatches("localhost","localhost"));  assertFalse(HttpCookie.domainMatches("b","b"));}  }
class C{  public Entry(DN dn,Map<ObjectClass,String> objectClasses,Map<AttributeType,List<Attribute>> userAttributes,Map<AttributeType,List<Attribute>> operationalAttributes){  setDN(dn);  this.objectClasses=newMapIfNull(objectClasses);  this.userAttributes=newMapIfNull(userAttributes);  this.operationalAttributes=newMapIfNull(operationalAttributes);}  }
class C{  public int count(){  return dict.size();}  }
class C{  public static XMPDateTime convertToUTCTime(XMPDateTime dateTime){  long timeInMillis=dateTime.getCalendar().getTimeInMillis();  GregorianCalendar cal=new GregorianCalendar(UTC);  cal.setGregorianChange(new Date(Long.MIN_VALUE));  cal.setTimeInMillis(timeInMillis);  return new XMPDateTimeImpl(cal);}  }
class C{  public static synchronized PasswordAuthentication requestPasswordAuthentication(InetAddress rAddr,int rPort,String rProtocol,String rPrompt,String rScheme){  if (thisAuthenticator == null) {    return null;  }  thisAuthenticator.addr=rAddr;  thisAuthenticator.port=rPort;  thisAuthenticator.protocol=rProtocol;  thisAuthenticator.prompt=rPrompt;  thisAuthenticator.scheme=rScheme;  thisAuthenticator.rt=RequestorType.SERVER;  return thisAuthenticator.getPasswordAuthentication();}  }
class C{  public static void main(final String[] args) throws EmailException, IOException {  final MailInfo info=new MailInfo();  final Attachment attachment=new Attachment();  attachment.setData(new FileInputStream("c:/app1-base-jo.sql"));  attachment.setMimeType("text/html");  attachment.setDescription("Test Attachment");  attachment.setName("app1-base-jo.sql");  info.setHost("mail.hotpop.com");  info.setTo("jamilshreet@yahoo.com");  info.setFrom("jamil.shreet@gmail.com");  info.setSubject("Test for Commons");  info.setMsg("Hi Jamil how are you this is a test for attachment file");  info.addAttachment(attachment);  send(info);  System.out.println("Done");}  }
class C{  private NSObject doParse(byte[] data) throws PropertyListFormatException, UnsupportedEncodingException {  bytes=data;  String magic=new String(copyOfRange(bytes,0,8));  if (!magic.startsWith("bplist")) {    throw new IllegalArgumentException("The given data is no binary property list. Wrong magic bytes: " + magic);  }  majorVersion=magic.charAt(6) - 0x30;  minorVersion=magic.charAt(7) - 0x30;  if (majorVersion > 0) {    throw new IllegalArgumentException("Unsupported binary property list format: v" + majorVersion + "."+ minorVersion+ ". "+ "Version 1.0 and later are not yet supported.");  }  byte[] trailer=copyOfRange(bytes,bytes.length - 32,bytes.length);  int offsetSize=(int)parseUnsignedInt(trailer,6,7);  objectRefSize=(int)parseUnsignedInt(trailer,7,8);  int numObjects=(int)parseUnsignedInt(trailer,8,16);  int topObject=(int)parseUnsignedInt(trailer,16,24);  int offsetTableOffset=(int)parseUnsignedInt(trailer,24,32);  offsetTable=new int[numObjects];  for (int i=0; i < numObjects; i++) {    offsetTable[i]=(int)parseUnsignedInt(bytes,offsetTableOffset + i * offsetSize,offsetTableOffset + (i + 1) * offsetSize);  }  return parseObject(topObject);}  }
class C{  private void sendAttemptEmail(AMIdentity user){  Set<String> set=Collections.EMPTY_SET;  Set<String> localeSet=null;  try {    set=user.getAttribute(getMailAttribute(user.getRealm()));    localeSet=user.getAttribute(USER_LOCALE_ATTR);  } catch (  SSOException e) {    debug.error("PWResetQuestionModelImpl.sendAttemptEmail",e);  }catch (  IdRepoException e) {    debug.error("PWResetQuestionModelImpl.sendAttemptEmail",e);  }  Locale userLocale=null;  if (localeSet != null && !localeSet.isEmpty()) {    String localeStr=localeSet.iterator().next();    userLocale=(localeStr != null) ? com.sun.identity.shared.locale.Locale.getLocale(localeStr) : null;  }  if (userLocale == null) {    userLocale=localeContext.getLocale();  }  ResourceBundle rb=PWResetResBundleCacher.getBundle(DEFAULT_RB,userLocale);  if (set != null && !set.isEmpty()) {    String to[]={set.iterator().next()};    String msg=rb.getString("attemptEmail.message");    String subject=rb.getString("attemptSubject.message");    String from=rb.getString("fromAddress.label");    String charset=g11nSettings.getDefaultCharsetForLocale(userLocale);    sendEmailToUser(from,to,subject,msg,charset);  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String authScheme=null;  String authLevel=null;  String gotoUrl=null;  ActionDecision ad=null;  Map advices=null;  String orgName=null;  try {    RequestUtils.checkContentLength(request);  } catch (  L10NMessageImpl e) {    ISLocaleContext localeContext=new ISLocaleContext();    localeContext.setLocale(request);    java.util.Locale locale=localeContext.getLocale();    if (debug.messageEnabled()) {      debug.message("GatewayServlet: " + e.getL10NMessage(locale));    }    throw new ServletException(e.getL10NMessage(locale));  }  StringBuilder forwardUrl=new StringBuilder(200);  forwardUrl.append(LOGIN_URL);  String queryString=request.getQueryString();  Enumeration paramNames=request.getParameterNames();  while ((queryString != null) && paramNames.hasMoreElements()) {    String key=(String)paramNames.nextElement();    if (key.equalsIgnoreCase(GOTO_URL)) {      gotoUrl=request.getParameter(key);    } else     if (key.equalsIgnoreCase(AUTH_SCHEME)) {      authScheme=request.getParameter(key);    } else     if (key.equalsIgnoreCase(AUTH_LEVEL)) {      authLevel=request.getParameter(key);    }  }  if (debug.messageEnabled()) {    debug.message("GatewayServlet: queryString : " + queryString);    debug.message("GatewayServlet: gotoUrl : " + gotoUrl);  }  if (gotoUrl != null) {    ad=getActionDecision(gotoUrl);    if (ad != null) {      advices=ad.getAdvices();      orgName=getOrgNameFromAdvice(advices);    }  }  AuthServiceConfigInfo info=null;  if ((gotoUrl != null) && ((authScheme == null) && (authLevel == null))) {    if (debug.messageEnabled()) {      debug.message("GatewayServlet: gotoUrl : " + gotoUrl);    }    forwardUrl.append('?').append(queryString);    String advice=getPolicyAdvice(ad);    info=getGWServletUtilsFromMap(advices);    if (advice != null) {      StringBuffer adv=new StringBuffer();      int index1=advice.indexOf("=");      if (index1 != -1) {        adv=adv.append(advice.substring(0,index1 + 1));        int index2=advice.indexOf(":");        if (index2 != -1) {          orgName=advice.substring(index1 + 1,index2);          adv=adv.append(advice.substring(index2 + 1));          advice=adv.toString();        }      }    }    if (debug.messageEnabled()) {      debug.message("GatewayServlet: advice from getPolicyAdvice(): " + advice);    }    if (advice != null && advice.length() > 0) {      forwardUrl.append('&').append(advice);    }  } else   if ((authScheme != null) || (authLevel != null)) {    forwardUrl.append('?').append(queryString);    if (authScheme != null) {      info=getGWServletUtilsByScheme(orgName,authScheme);    } else     if (authLevel != null) {      info=getGWServletUtilsByLevel(orgName,authLevel);    }  }  String fUrl=forwardUrl.toString();  if (debug.messageEnabled()) {    debug.message("GatewayServlet >>> Need to change URL !");    debug.message("OLD URL : " + fUrl);  }  if ((info != null) && (info.getPortNumber() != null)) {    fUrl=CERT_PROTOCOL + request.getServerName() + ":"+ info.getPortNumber()+ SystemProperties.get(AuthXMLTags.SERVER_DEPLOY_URI)+ fUrl;    if ((orgName != null) && (fUrl.indexOf("org=") == -1)) {      fUrl=fUrl + "&" + ORG_NAME+ "="+ DNtoName(orgName);    }    response.sendRedirect(fUrl);  } else {    if ((orgName != null) && (fUrl.indexOf("org=") == -1)) {      fUrl=fUrl + "&" + ORG_NAME+ "="+ DNtoName(orgName);    }    RequestDispatcher dispatcher=config.getServletContext().getRequestDispatcher(fUrl);    dispatcher.forward(request,response);  }  if (debug.messageEnabled()) {    debug.message("New URL : " + fUrl);  }}  }
class C{  public void finish() throws IOException {  if (!def.finished()) {    def.finish();    while (!def.finished()) {      deflate();    }  }}  }
class C{  @Override public void post(Runnable runnable){  handler.post(runnable);}  }
class C{  public void windowOpened(WindowEvent e){  ((WindowListener)a).windowOpened(e);  ((WindowListener)b).windowOpened(e);}  }
class C{  @SuppressWarnings("unchecked") public void writeDate(java.sql.Date x) throws SQLException {  attribs.add(x);}  }
class C{  public static boolean isSupported(){  return new File(CONTROL_PATH).exists();}  }
class C{  public static void registerRestoreTaskListener(RestoreTaskListener listener){  directoryServer.restoreTaskListeners.addIfAbsent(listener);}  }
class C{  static Set requiredServices(){  return (requiredServices);}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else       if (object != null) {        results.put(key,object.toString());      } else {        results.put(key,"null");      }    }  }  return results;}  }
class C{  public ConditionEditViewBean(){  super("ConditionEdit",DEFAULT_DISPLAY_URL);}  }
class C{  public boolean controlConcurrency(Request request,Response response){  return true;}  }
class C{  Object parameterConstraint(int n){  return parameter(n).constraint;}  }
class C{  public FrameBodyXSOT(){}  }
class C{  public static void updatePreferredSize(JEditorPane pane,int nCols,String plainText,Font font,boolean applyBackground){  String wrappedText=wrapText(plainText,nCols);  wrappedText=wrappedText.replaceAll(ServerConstants.EOL,"<br>");  if (applyBackground) {    wrappedText=UIFactory.applyErrorBackgroundToHtml(Utilities.applyFont(wrappedText,font));  }  JEditorPane pane2=makeHtmlPane(wrappedText,font);  pane.setPreferredSize(pane2.getPreferredSize());  JFrame frame=getFrame(pane);  if (frame != null && frame.isVisible()) {    frame.getRootPane().revalidate();    frame.getRootPane().repaint();  }}  }
class C{  public void testConstrDoubleMinus01(){  double a=-1.E-1;  int aScale=55;  BigInteger bA=new BigInteger("-1000000000000000055511151231257827021181583404541015625");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  private URLValidator(){}  }
class C{  public PartOfSetValue(String value){  this.rawText=value;  initFromValue(value);}  }
class C{  @Override public void close(){  StaticUtils.close(asn1Reader);  StaticUtils.close(socket);}  }
class C{  private void interruptIdleWorkers(boolean onlyOne){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers) {      Thread t=w.thread;      if (!t.isInterrupted() && w.tryLock()) {        try {          t.interrupt();        } catch (        SecurityException ignore) {        } finally {          w.unlock();        }      }      if (onlyOne)       break;    }  }  finally {    mainLock.unlock();  }}  }
class C{  @Override public ShapeTile[] split_to_convex(){  if (precalculated_convex_pieces != null)   return precalculated_convex_pieces;  random_generator.setSeed(seed);  Collection<ShapePolygon> convex_pieces=split_to_convex_recu();  if (convex_pieces == null) {    return null;  }  precalculated_convex_pieces=new ShapeTile[convex_pieces.size()];  Iterator<ShapePolygon> it=convex_pieces.iterator();  for (int i=0; i < precalculated_convex_pieces.length; ++i) {    ShapePolygon curr_piece=it.next();    precalculated_convex_pieces[i]=ShapeTile.get_instance(curr_piece.corners);  }  return precalculated_convex_pieces;}  }
class C{  public void updateRenderCameraPose(TangoPoseData devicePose,DeviceExtrinsics extrinsics){  Pose cameraPose=ScenePoseCalculator.toOpenGlCameraPose(devicePose,extrinsics);  getCurrentCamera().setRotation(cameraPose.getOrientation());  getCurrentCamera().setPosition(cameraPose.getPosition());  floorPlan.setTrajectoryPosition(cameraPose.getPosition());}  }
class C{  public String versionQualifier(){  return properties.getProperty("version.qualifier");}  }
class C{  public static String mangleNativeMethod(String owner,String name,String desc){  StringBuilder sb=new StringBuilder();  sb.append("Java_");  sb.append(mangleNativeString(owner));  sb.append("_");  sb.append(mangleNativeString(name));  if (desc != null) {    sb.append("__");    sb.append(mangleNativeString(desc.substring(1,desc.lastIndexOf(')'))));  }  return sb.toString();}  }
class C{  public double noise(double x,double y,double z,double frequency,double amplitude){  return noise(x,y,z,frequency,amplitude,false);}  }
class C{  public void error(String msg){  print("[ERROR] " + msg,out.err);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  if (isSigned && signedXMLString != null) {    return signedXMLString;  }  Set namespaces=new HashSet();  StringBuffer attrs=new StringBuffer();  StringBuffer childElements=new StringBuffer();  getXMLString(namespaces,attrs,childElements,includeNSPrefix,declareNS);  StringBuffer xmlString=new StringBuffer(1000);  xmlString.append(SAML2Constants.START_TAG);  if (includeNSPrefix) {    xmlString.append(SAML2Constants.PROTOCOL_PREFIX);  }  xmlString.append(elementName);  if (!namespaces.isEmpty()) {    for (Iterator iter=namespaces.iterator(); iter.hasNext(); ) {      xmlString.append(SAML2Constants.SPACE).append((String)iter.next());    }  }  xmlString.append(attrs).append(SAML2Constants.END_TAG).append(SAML2Constants.NEWLINE).append(childElements).append(SAML2Constants.START_TAG).append("/");  if (includeNSPrefix) {    xmlString.append(SAML2Constants.PROTOCOL_PREFIX);  }  xmlString.append(elementName).append(SAML2Constants.END_TAG);  return xmlString.toString();}  }
class C{  public static String generateTOTP256(byte[] key,String time,String returnDigits){  return generateTOTP(key,time,returnDigits,"HmacSHA256");}  }
class C{  public boolean mustCheckUnsavedChanges(){  return schemaElementPanel != null && schemaElementPanel.mustCheckUnsavedChanges();}  }
class C{  public final boolean containsIgnoreCase(String s){  if (null == s)   return false;  for (int i=0; i < m_firstFree; i++) {    if (m_map[i].equalsIgnoreCase(s))     return true;  }  return false;}  }
class C{  public void testDivideRoundHalfUpNeg2(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=15;  String c="-1E+5";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_UP);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public final void remove() throws UnsupportedOperationException {  throw new UnsupportedOperationException("Removing tokens is not supported.");}  }
class C{  public boolean validate(){  boolean result=true;  if (is_leaf()) {    PlaDelTriEdge prev_edge=edge_lines[2];    for (int i=0; i < 3; ++i) {      PlaDelTriEdge curr_edge=edge_lines[i];      if (!curr_edge.validate()) {        result=false;      }      PlaDelTriCorner prev_end_corner;      if (prev_edge.left_triangle == this) {        prev_end_corner=prev_edge.end_corner;      } else {        prev_end_corner=prev_edge.start_corner;      }      PlaDelTriCorner curr_start_corner;      if (curr_edge.left_triangle == this) {        curr_start_corner=curr_edge.start_corner;      } else       if (curr_edge.right_triangle == this) {        curr_start_corner=curr_edge.end_corner;      } else {        System.out.println("Triangle.validate: edge inconsistent");        return false;      }      if (curr_start_corner != prev_end_corner) {        System.out.println("Triangle.validate: corner inconsistent");        result=false;      }      prev_edge=curr_edge;    }  } else {    for (    PlaDelTriTriangle curr_child : children) {      if (curr_child.first_parent == this) {        curr_child.validate();      }    }  }  return result;}  }
class C{  public RadiusRequestListener(final RadiusServiceConfig config,final ExecutorService executorService,final EventBus eventBus,final AccessRequestHandlerFactory accessRequestHandlerFactory) throws RadiusLifecycleException {  LOG.warning("RADIUS service enabled. Starting Listener.");  this.config=config;  this.executorService=executorService;  this.eventBus=eventBus;  this.accessRequestHandlerFactory=accessRequestHandlerFactory;  try {    this.channel=DatagramChannel.open();    this.channel.setOption(StandardSocketOptions.SO_REUSEADDR,true);  } catch (  final IOException e) {    this.startedSuccessfully=false;    throw new RadiusLifecycleException("RADIUS listener unable to open datagram channel.",e);  }  try {    final int radiusPort=config.getPort();    LOG.message("Starting RADIUS listener on port " + Integer.toString(radiusPort));    this.channel.socket().bind(new InetSocketAddress(radiusPort));  } catch (  final SocketException e) {    this.startedSuccessfully=false;    throw new RadiusLifecycleException("RADIUS listener unable to bind to port " + config.getPort(),e);  }  try {    MessageDigest.getInstance("MD5");  } catch (  NoSuchAlgorithmException e) {    throw new RadiusLifecycleException("RADIUS listener unable to start due to missing required MD5 " + "MessageDigest type.",e);  }  if (Charset.isSupported("UTF-8")) {    try {      Charset.forName("UTF-8");    } catch (    UnsupportedCharsetException e) {      throw new RadiusLifecycleException("RADIUS listener unable to start due to missing required UTF-8 " + "Charset.",e);    }  }  listenerThread=new Thread(this);  listenerThread.setName(MessageFormat.format(RadiusServerConstants.LISTENER_THREAD_NAME,config.getPort()));  listenerThread.setDaemon(true);  listenerThread.start();  this.startedSuccessfully=true;}  }
class C{  private Map addFormats(String realm){  Set values=null;  Map map=null;  try {    AMIdentityRepository repo=new AMIdentityRepository(adminSSOToken,realm);    AMIdentity realmIdentity=repo.getRealmIdentity();    Set servicesFromIdRepo=realmIdentity.getAssignedServices();    if (servicesFromIdRepo.contains(G11N_SERVICE_NAME)) {      map=realmIdentity.getServiceAttributes(G11N_SERVICE_NAME);    } else {      OrganizationConfigManager orgCfgMgr=new OrganizationConfigManager(adminSSOToken,realm);      map=orgCfgMgr.getServiceAttributes(G11N_SERVICE_NAME);    }  } catch (  SSOException e) {    debug.warning("AMCommonNameGenerator.addFormats",e);  }catch (  SMSException e) {    debug.warning("AMCommonNameGenerator.addFormats",e);  }catch (  IdRepoException e) {    debug.warning("AMCommonNameGenerator.addFormats",e);  }  if ((map != null) && !map.isEmpty()) {    values=(Set)map.get(G11N_SERIVCE_COMMON_NAME_FORMAT);  }  if ((values == null) || values.isEmpty()) {    if (serviceSchemaManager != null) {      try {        values=AMAdminUtils.getAttribute(serviceSchemaManager,SchemaType.ORGANIZATION,G11N_SERIVCE_COMMON_NAME_FORMAT);      } catch (      SMSException e) {        debug.error("AMCommonNameGenerator.addFormats",e);      }    } else {      debug.error("AMCommonNameGenerator.addFormats: " + "formats are not added because Console cannot get " + "an instance of service schema manager.");    }  }  Map mapFormats=getFormatMap(values);synchronized (mapRealmToFormat) {    mapRealmToFormat.put(realm,mapFormats);  }  return mapFormats;}  }
class C{  private boolean hasMarker(Component comp){  for (Iterator<TypeAheadMarker> iter=typeAheadMarkers.iterator(); iter.hasNext(); ) {    if (iter.next().untilFocused == comp) {      return true;    }  }  return false;}  }
class C{  public LDIFException(LocalizableMessage message){  super(message);  lineNumber=-1;  canContinueReading=true;}  }
class C{  public void stop(){  throttlingStrategy.stop();}  }
class C{  public void unbind(org.omg.CosNaming.NameComponent[] n) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("unbind",true);    org.omg.CosNaming.NameHelper.write($out,n);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    unbind(n);  } finally {    _releaseReply($in);  }}  }
class C{  public void testGetDefaultSSLSocketFactory() throws Exception {  setUpStoreProperties();  SSLSocketFactory defaultSSLSF=HttpsURLConnection.getDefaultSSLSocketFactory();  ServerSocket ss=new ServerSocket(0);  Socket s=defaultSSLSF.createSocket("localhost",ss.getLocalPort());  ss.accept();  s.close();  ss.close();}  }
class C{  public void insert_longlong(long value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_longlong",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_longlong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public UserNameAttribute(byte[] octets){  super(octets);  this.username=new String(octets,2,octets.length - 2);}  }
class C{  public static boolean isXML11InternalEntityContent(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT_INTERNAL) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  private void logAccess(String resource,String operation,Context context){  try {    SSOToken token=SSOTokenContext.getSsoToken(context);    restLog.auditAccessMessage(resource,operation,token);    if (token == null) {      debug.message("CrestLoggingFilter :: no token from context, logging user as 'null'");    }  } catch (  SSOException e) {    if (debug.warningEnabled()) {      debug.warning("CrestLoggingFilter :: " + "Error retrieving SSO Token from provided context, forced to log user as 'null'.",e);    }    restLog.auditAccessMessage(resource,operation,null);  }  restLog.debugOperationAttemptAsPrincipal(resource,operation,context,null,debug);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.SignaturePropertiesElement createSignaturePropertiesElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.SignaturePropertiesElementImpl();}  }
class C{  ResourceIndexEntry findClosestMatch(ServiceType resourceType,String resourceName){  ResourceIndexEntry resourceIndexEntry=null;  ResourceMatch rm=resourceType.compare(resourceName,this.resourceName,false);  if (rm.equals(ResourceMatch.EXACT_MATCH) || rm.equals(ResourceMatch.SUB_RESOURCE_MATCH)) {    resourceIndexEntry=this;  } else   if (rm.equals(ResourceMatch.SUPER_RESOURCE_MATCH)) {    Iterator iter=childEntries.iterator();    boolean processed=false;    while ((!processed) && (iter.hasNext())) {      ResourceIndexEntry rie=(ResourceIndexEntry)iter.next();      resourceIndexEntry=rie.findClosestMatch(resourceType,resourceName);      if (resourceIndexEntry != null) {        processed=true;      }    }    if (resourceIndexEntry == null) {      resourceIndexEntry=this;    }  }  return resourceIndexEntry;}  }
class C{  public void updateRequestMonitoringData(String httpMethod,long time) throws NullPointerException {  AtomicLong nb=this.requestMethodsTotalTime.get(httpMethod.toLowerCase());  if (nb != null) {    nb.addAndGet(time);  }}  }
class C{  private void searchForCustomFilter(BasicNode node,ConnectionWithControls conn) throws IOException {  SearchRequest request=newSearchRequest(node.getDN(),WHOLE_SUBTREE,controller.getFilter(),NO_ATTRIBUTES).setSizeLimit(1);  try (ConnectionEntryReader s=conn.search(request)){    if (!s.hasNext()) {      throw newLdapException(NO_SUCH_OBJECT,"Entry " + node.getDN() + " does not verify filter "+ controller.getFilter());    }    while (s.hasNext()) {      s.readEntry();    }  } catch (  LdapException e) {    if (e.getResult().getResultCode() == ResultCode.SIZE_LIMIT_EXCEEDED) {    } else {      throw e;    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_domimplementationfeaturexml.class,args);}  }
class C{  private void stopAutoStopRecording(){  if (currentRecord.getRecordProperties().isAutoStopEnabled()) {    if (currentRecord.getRecordProperties().isAutoStopTimeEnabled()) {      currentScheduledAutoStopTime.cancel(false);    }    if (currentRecord.getRecordProperties().isAutoStopFileSizeEnabled()) {      currentScheduledAutoStopFileSize.cancel(false);    }  }}  }
class C{  protected Call extractWithIdentifier(@NonNull String identifier,@Nullable String referrer) throws IOException {  String url=String.format(VIMEO_CONFIG_URL,identifier);  if (referrer == null) {    referrer=String.format(VIMEO_URL,identifier);  }  OkHttpClient client=new OkHttpClient();  Request request=new Request.Builder().url(url).header("Content-Type","application/json").header("Referrer",referrer).build();  return client.newCall(request);}  }
class C{  public boolean isLdaps(){  return getConnectionType() == LDAPS;}  }
class C{  public void reset(){}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s6_matching_and_non_matching_versions_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public boolean hasBinaryAttributes(){  return true;}  }
class C{  public NodeSet(NodeSet nodelist){  this(32);  addNodes((NodeIterator)nodelist);}  }
class C{  public EtchedBorder(){  this(LOWERED);}  }
class C{  protected SOAPMessage signResponse(SOAPMessage msg,String idAttrName,String id,BaseConfigType hostedConfig) throws SAMLException, FSMsgException {  FSUtils.debug.message("FSSOAPReceiver::Entered signResponse::");  String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);  if (certAlias == null || certAlias.length() == 0) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSOAPReceiver.signResponse:" + " couldn't obtain this site's cert alias.");    }    throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT_ALIAS));  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("signResponse::Provider's certAlias is found: " + certAlias);  }  XMLSignatureManager manager=XMLSignatureManager.getInstance();  Document doc=(Document)FSServiceUtils.createSOAPDOM(msg);  String xpath="//*[local-name()=\'ProviderID\']";  manager.signXML(doc,certAlias,SystemConfigurationUtil.getProperty(SAMLConstants.XMLSIG_ALGORITHM),idAttrName,id,false,xpath);  return FSServiceUtils.convertDOMToSOAP(doc);}  }
class C{  protected SearchResults(Connection connection,ConnectionEntryReader ldapSearchResult,Connection conn,DataLayer dataLayer){  this.connection=connection;  m_ldapSearchResults=ldapSearchResult;  m_conn=conn;  m_dataLayer=dataLayer;  if (debug.messageEnabled()) {    debug.message("Constructing SearchResults: " + this + " with connection : "+ conn);  }}  }
class C{  public final int readUnsignedByte() throws IOException {  int temp=this.read();  if (temp < 0) {    throw new EOFException();  }  return temp;}  }
class C{  public JKNotAllowedOperationException(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  private void copyPlugins(final List<PluginInfo> plugins2){  for (  PluginInfo pluginInfo : this.plugins) {    plugins2.add(new PluginInfo(pluginInfo));  }}  }
class C{  public byte[] decode(byte[] bytes) throws DecoderException {  return decodeQuotedPrintable(bytes);}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (off < 0 || len < 0 || off > b.length - len) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  if (entry == null) {    return -1;  }switch (entry.method) {case DEFLATED:    len=super.read(b,off,len);  if (len == -1) {    readEnd(entry);    entryEOF=true;    entry=null;  } else {    crc.update(b,off,len);  }return len;case STORED:if (remaining <= 0) {entryEOF=true;entry=null;return -1;}if (len > remaining) {len=(int)remaining;}len=in.read(b,off,len);if (len == -1) {throw new ZipException("unexpected EOF");}crc.update(b,off,len);remaining-=len;if (remaining == 0 && entry.crc != crc.getValue()) {throw new ZipException("invalid entry CRC (expected 0x" + Long.toHexString(entry.crc) + " but got 0x"+ Long.toHexString(crc.getValue())+ ")");}return len;default :throw new ZipException("invalid compression method");}}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedatanomodificationallowederr.class,args);}  }
class C{  public com.sun.identity.federation.jaxb.entityconfig.IDPDescriptorConfigElement createIDPDescriptorConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.federation.jaxb.entityconfig.impl.IDPDescriptorConfigElementImpl();}  }
class C{  private MSVValidator(DefaultJAXBContextImpl _jaxbCtx,ValidationContext _ctxt,ValidatableObject vo){  jaxbContext=_jaxbCtx;  acceptor=vo.createRawValidator().createAcceptor();  context=_ctxt;  target=vo;}  }
class C{  public boolean isFullSpan(){  return this.fullSpan;}  }
class C{  BrdFromSide(Polyline p_polyline,int p_no,ShapeTile p_shape){  int fromside_no=-1;  PlaPointFloat intersection=null;  boolean border_intersection_found=false;  for (int curr_no=p_no; curr_no > 0; --curr_no) {    PlaSegmentInt curr_seg=p_polyline.segment_get(curr_no);    if (curr_seg == null)     continue;    int[] intersections=curr_seg.border_intersections(p_shape);    if (intersections.length == 0)     continue;    fromside_no=intersections[0];    intersection=curr_seg.get_line().intersection_approx(p_shape.border_line(fromside_no));    if (intersection.is_NaN())     continue;    border_intersection_found=true;    break;  }  if (!border_intersection_found) {    PlaPointFloat from_point=p_polyline.corner_approx(0);    PlaLineInt check_line=p_polyline.plaline(1);    double min_dist=Double.MAX_VALUE;    int edge_count=p_shape.border_line_count();    for (int index=0; index < edge_count; ++index) {      PlaLineInt curr_line=p_shape.border_line(index);      PlaPointFloat curr_intersection=check_line.intersection_approx(curr_line);      if (curr_intersection.is_NaN())       continue;      double curr_dist=Math.abs(curr_intersection.distance(from_point));      if (curr_dist < min_dist) {        fromside_no=index;        intersection=curr_intersection;        min_dist=curr_dist;      }    }  }  side_no=fromside_no;  border_intersection=intersection;}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createMessage(XSLTErrorResources.ER_TWO_OR_THREE,null));}  }
class C{  private void sendFile() throws IOException {  int reply;  write("STOR " + url.getFile().substring(url.getFile().lastIndexOf('/') + 1,url.getFile().length()) + "\r\n");  reply=getReply();  if (!(reply == FTP_OPENDATA || reply == FTP_OK || reply == FTP_DATAOPEN)) {    throw new IOException("Unable to store file");  }}  }
class C{  public void afterPropertiesSet(){}  }
class C{  public void testSetAttributeNodeNS1() throws Throwable {  Document doc;  Element element;  Attr attribute1;  Attr attribute2;  Attr attrNode;  String attrName;  String attrNS;  NamedNodeMap attributes;  int length;  doc=(Document)load("staff",builder);  element=doc.createElementNS("http://www.w3.org/DOM/Test/Level2","new:element");  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/Test/att1","p1:att");  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/Test/att1","p2:att");  attribute2.setValue("value2");  element.setAttributeNodeNS(attribute1);  element.setAttributeNodeNS(attribute2);  attrNode=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/att1","att");  attrName=attrNode.getNodeName();  attrNS=attrNode.getNamespaceURI();  assertEquals("elementsetattributenodens01_attrName","p2:att",attrName);  assertEquals("elementsetattributenodens01_attrNS","http://www.w3.org/DOM/Test/att1",attrNS);  attributes=element.getAttributes();  length=(int)attributes.getLength();  assertEquals("length",1,length);}  }
class C{  @Override public void onFragmentInteraction(View callView,String newMeetingURI){  try {    if (newMeetingURI.contentEquals(getString(R.string.callFragmentInflated))) {      return;    }    if (newMeetingURI.contentEquals(getString(R.string.leaveCall))) {      getSupportFragmentManager().popBackStack(VIDEO_FRAGMENT_STACK_STATE,FragmentManager.POP_BACK_STACK_INCLUSIVE);      finish();    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static synchronized void registerSupportedLDAPVersion(int supportedLDAPVersion,ConnectionHandler<?> connectionHandler){  List<ConnectionHandler<?>> handlers=directoryServer.supportedLDAPVersions.get(supportedLDAPVersion);  if (handlers == null) {    handlers=new LinkedList<>();    handlers.add(connectionHandler);    directoryServer.supportedLDAPVersions.put(supportedLDAPVersion,handlers);  } else   if (!handlers.contains(connectionHandler)) {    handlers.add(connectionHandler);  }}  }
class C{  public boolean isLightWeightPopupEnabled(){  return lightWeightPopup;}  }
class C{  private static Date parseDate(String when) throws ParseException {  if (!DATE_TIME.matcher(when).matches()) {    throw new ParseException(when,0);  }  if (when.length() == 8) {    return buildDateFormat().parse(when);  } else {    Date date;    if (when.length() == 16 && when.charAt(15) == 'Z') {      date=buildDateTimeFormat().parse(when.substring(0,15));      Calendar calendar=new GregorianCalendar();      long milliseconds=date.getTime();      milliseconds+=calendar.get(Calendar.ZONE_OFFSET);      calendar.setTime(new Date(milliseconds));      milliseconds+=calendar.get(Calendar.DST_OFFSET);      date=new Date(milliseconds);    } else {      date=buildDateTimeFormat().parse(when);    }    return date;  }}  }
class C{  Promise<ActionResponse,ResourceException> validateGoto(final Context context,final ActionRequest request){  final JsonValue jVal=request.getContent();  JsonValue result=new JsonValue(new LinkedHashMap<String,Object>(1));  try {    SSOTokenManager mgr=SSOTokenManager.getInstance();    SSOToken ssoToken=mgr.createSSOToken(getCookieFromServerContext(context));    String gotoURL=URL_VALIDATOR.getRedirectUrl(ssoToken.getProperty(ISAuthConstants.ORGANIZATION),URL_VALIDATOR.getValueFromJson(jVal,RedirectUrlValidator.GOTO),ssoToken.getProperty("successURL"));    result.put("successURL",gotoURL);    return newResultPromise(newActionResponse(result));  } catch (  SSOException ssoe) {    if (debug.errorEnabled()) {      debug.error("IdentityResource.validateGoto() :: Invalid SSOToken.",ssoe);    }    return new ForbiddenException(ssoe.getMessage(),ssoe).asPromise();  }}  }
class C{  public StatefulRefreshToken(String id,String resourceOwnerId,String clientId,String redirectUri,Set<String> scope,long expiryTime,String tokenType,String tokenName,String grantType,String realm,String authModules,String acr,String auditId,String authGrantId){  this(id,resourceOwnerId,clientId,redirectUri,scope,expiryTime,tokenType,tokenName,grantType,realm,authModules,acr,auditId,authGrantId,TimeUnit.MILLISECONDS.toSeconds(currentTimeMillis()));}  }
class C{  public ResponseIncludeWrapper(ServletContext context,HttpServletRequest request,HttpServletResponse response,ServletOutputStream captureServletOutputStream){  super(response);  this.context=context;  this.request=request;  this.captureServletOutputStream=captureServletOutputStream;}  }
class C{  public void mouseEntered(MouseEvent event){  initiateToolTip(event);}  }
class C{  public void paintArrowButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void paint(Graphics g,Shape allocation){  Rectangle a=allocation.getBounds();  setSize(a.width,a.height);  if (captionIndex != -1) {    short top=(short)painter.getInset(TOP,this);    short bottom=(short)painter.getInset(BOTTOM,this);    if (top != getTopInset()) {      int h=getTopInset() - top;      a.y+=h;      a.height-=h;    } else {      a.height-=getBottomInset() - bottom;    }  }  painter.paint(g,a.x,a.y,a.width,a.height,this);  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    v.paint(g,getChildAllocation(i,allocation));  }}  }
class C{  private void signalNotEmpty(){  final ReentrantLock takeLock=this.takeLock;  takeLock.lock();  try {    notEmpty.signal();  }  finally {    takeLock.unlock();  }}  }
class C{  private BufferedReader newFileReader(final File file) throws UnsupportedEncodingException, FileNotFoundException {  return new BufferedReader(new InputStreamReader(new FileInputStream(file),UTF8_ENCODING));}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public static int lastIndexOf(final String value,final String needle,boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return lastIndexOf(value,needle,value.length(),caseSensitive);}  }
class C{  public void replaceTemplate(ElemTemplate v,int i) throws TransformerException {  if (null == m_templates)   throw new ArrayIndexOutOfBoundsException();  replaceChild(v,(ElemTemplateElement)m_templates.elementAt(i));  m_templates.setElementAt(v,i);  v.setStylesheet(this);}  }
class C{  public void testExpandingEntityReferencesOffDoesNotImpactPredefinedEntities() throws Exception {  String xml="<foo>abc&amp;def</foo>";  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setExpandEntityReferences(false);  document=factory.newDocumentBuilder().parse(new InputSource(new StringReader(xml)));  Element documentElement=document.getDocumentElement();  Text text=(Text)documentElement.getFirstChild();  assertEquals("abc&def",text.getTextContent());  assertNull(text.getNextSibling());}  }
class C{  @Override public boolean isLeapYear(long prolepticYear){  return IsoChronology.INSTANCE.isLeapYear(prolepticYear);}  }
class C{  protected Entity defEntity(String name,int type,String str){  int len=str.length();  char data[]=new char[len];  str.getChars(0,len,data,0);  return defineEntity(name,type,data);}  }
class C{  public void paintProgressBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public Duration dividedBy(long divisor){  if (divisor == 0) {    throw new ArithmeticException("Cannot divide by zero");  }  if (divisor == 1) {    return this;  }  return create(toSeconds().divide(BigDecimal.valueOf(divisor),RoundingMode.DOWN));}  }
class C{  @Override protected boolean isDynamicalOrIgnoredProfile(String realm){  return SAML2PluginsUtils.isDynamicalOrIgnoredProfile(realm);}  }
class C{  public FSAuthnRequestEnvelope(FSAuthnRequest authnRequest,String providerID,String providerName,String assertionConsumerServiceURL,FSIDPList idpList,boolean isPassive){  this.authnRequest=authnRequest;  this.providerID=providerID;  this.providerName=providerName;  this.assertionConsumerServiceURL=assertionConsumerServiceURL;  this.idpList=idpList;  this.isPassive=isPassive;}  }
class C{  public void parseForMethod(GenericDeclaration genericDecl,SignatureTag signature,SootClassType[] rawExceptionTypes){  setInput(genericDecl,signature);  if (!eof) {    parseMethodTypeSignature(rawExceptionTypes);  } else {    if (genericDecl instanceof SootMethodType) {      SootMethodType m=(SootMethodType)genericDecl;      this.formalTypeParameters=ListOfVariables.EMPTY;      this.parameterTypes=new ListOfTypes(m.getParameterTypes());      this.exceptionTypes=new ListOfTypes(m.getExceptionTypes());      this.returnType=m.getReturnType();    } else {      this.formalTypeParameters=ListOfVariables.EMPTY;      this.parameterTypes=ListOfTypes.EMPTY;      this.exceptionTypes=ListOfTypes.EMPTY;      this.returnType=new SootTypeType(VoidType.v());    }  }}  }
class C{  public void retrieveStore(String sellerId,Handler<AsyncResult<Store>> resultHandler){  delegate.retrieveStore(sellerId,resultHandler);}  }
class C{  public final void testGetMidTermsOfReductionPolynomial02(){  assertNull(new ECFieldF2m(2000).getMidTermsOfReductionPolynomial());}  }
class C{  public Collection<ExpandRoomFreespaceComplete> complete_expansion_room(ExpandRoomFreespaceIncomplete p_room){  try {    Collection<ExpandRoomFreespaceComplete> result=new LinkedList<ExpandRoomFreespaceComplete>();    ShapeTile from_door_shape=null;    AwtreeObject ignore_object=null;    Collection<ExpandDoor> room_doors=p_room.get_doors();    for (    ExpandDoor curr_door : room_doors) {      ExpandRoom other_room=curr_door.other_room(p_room);      if (other_room instanceof ExpandRoomFreespaceComplete && curr_door.dimension.is_area()) {        from_door_shape=curr_door.get_shape();        ignore_object=(ExpandRoomFreespaceComplete)other_room;        break;      }    }    Collection<ExpandRoomFreespaceIncomplete> completed_shapes=art_search_tree.complete_shape(p_room,route_net_no,ignore_object,from_door_shape);    remove_incomplete_expansion_room(p_room);    Iterator<ExpandRoomFreespaceIncomplete> it=completed_shapes.iterator();    boolean is_first_completed_room=true;    while (it.hasNext()) {      ExpandRoomFreespaceIncomplete curr_incomplete_room=it.next();      if (curr_incomplete_room.get_shape().dimension() != PlaDimension.AREA)       continue;      if (is_first_completed_room) {        is_first_completed_room=false;        ExpandRoomFreespaceComplete completed_room=add_complete_room(curr_incomplete_room);        if (completed_room != null) {          result.add(completed_room);        }      } else {        Collection<ExpandRoomFreespaceIncomplete> curr_completed_shapes=art_search_tree.complete_shape(curr_incomplete_room,route_net_no,ignore_object,from_door_shape);        Iterator<ExpandRoomFreespaceIncomplete> it2=curr_completed_shapes.iterator();        while (it2.hasNext()) {          ExpandRoomFreespaceIncomplete tmp_room=it2.next();          ExpandRoomFreespaceComplete completed_room=add_complete_room(tmp_room);          if (completed_room != null) {            result.add(completed_room);          }        }      }    }    return result;  } catch (  Exception e) {    System.out.print("AutorouteEngine.complete_expansion_room: ");    System.out.println(e);    return new LinkedList<ExpandRoomFreespaceComplete>();  }}  }
class C{  static DynamicMBean createMBean(Role role) throws Exception {  String mname=createManagedName(role);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    Exception e=new Exception("ManagedBean is not found with " + mname);    throw new MBeanException(e);  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  DynamicMBean mbean=managed.createMBean(role);  ObjectName oname=createObjectName(domain,role);  if (mserver.isRegistered(oname)) {    mserver.unregisterMBean(oname);  }  mserver.registerMBean(mbean,oname);  return (mbean);}  }
class C{  public AuthConfigViewBean(){  super("AuthConfig");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  void unbox(String sname,Wrapper wt){  visitMethodInsn(Opcodes.INVOKEVIRTUAL,sname,unboxMethod(wt),unboxingDescriptor(wt),false);}  }
class C{  @Override public void invoke(Request request,Response response) throws IOException, ServletException {  getNext().invoke(request,response);  if (response.isCommitted()) {    if (response.setErrorReported()) {      try {        response.flushBuffer();      } catch (      Throwable t) {        ExceptionUtils.handleThrowable(t);      }      response.getCoyoteResponse().action(ActionCode.CLOSE_NOW,null);    }    return;  }  Throwable throwable=(Throwable)request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);  if (request.isAsync() && !request.isAsyncCompleting()) {    return;  }  if (throwable != null && !response.isError()) {    response.reset();    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  }  response.setSuspended(false);  try {    report(request,response,throwable);  } catch (  Throwable tt) {    ExceptionUtils.handleThrowable(tt);  }}  }
class C{  @DataProvider(name="importexport") public Object[][] createData() throws Exception {  return new Object[][]{{TestCaseUtils.makeEntry("dn: ds-task-id=" + UUID.randomUUID() + ",cn=Scheduled Tasks,cn=Tasks","objectclass: top","objectclass: ds-task","objectclass: ds-task-import","ds-task-class-name: org.opends.server.tasks.ImportTask","ds-task-import-backend-id: userRoot","ds-task-import-ldif-file: " + ldifFile.getPath(),"ds-task-import-reject-file: " + rejectFile.getPath(),"ds-task-import-overwrite-rejects: TRUE","ds-task-import-exclude-attribute: description","ds-task-import-exclude-filter: (st=CA)","ds-task-import-exclude-branch: o=exclude,dc=example,dc=com"),TaskState.COMPLETED_SUCCESSFULLY},{TestCaseUtils.makeEntry("dn: ds-task-id=" + UUID.randomUUID() + ",cn=Scheduled Tasks,cn=Tasks","objectclass: top","objectclass: ds-task","objectclass: ds-task-import","ds-task-class-name: org.opends.server.tasks.ImportTask","ds-task-import-include-branch: dc=example,dc=com","ds-task-import-ldif-file: " + ldifFile.getPath(),"ds-task-import-reject-file: " + rejectFile.getPath(),"ds-task-import-overwrite-rejects: TRUE","ds-task-import-exclude-attribute: description","ds-task-import-exclude-filter: (st=CA)","ds-task-import-exclude-branch: o=exclude,dc=example,dc=com"),TaskState.COMPLETED_SUCCESSFULLY},{TestCaseUtils.makeEntry("dn: ds-task-id=" + UUID.randomUUID() + ",cn=Scheduled Tasks,cn=Tasks","objectclass: top","objectclass: ds-task","objectclass: ds-task-import","ds-task-class-name: org.opends.server.tasks.ImportTask","ds-task-import-backend-id: userRoot","ds-task-import-ldif-file: " + ldifFile.getPath(),"ds-task-import-is-compressed: FALSE","ds-task-import-is-encrypted: FALSE","ds-task-import-reject-file: " + rejectFile.getPath(),"ds-task-import-overwrite-rejects: FALSE","ds-task-import-skip-schema-validation: TRUE","ds-task-import-include-branch: dc=example,dc=com","ds-task-import-exclude-branch: o=exclude,dc=example,dc=com","ds-task-import-include-attribute: cn","ds-task-import-include-attribute: sn","ds-task-import-include-attribute: uid","ds-task-import-include-filter: (objectclass=*)"),TaskState.COMPLETED_SUCCESSFULLY},{TestCaseUtils.makeEntry("dn: ds-task-id=" + UUID.randomUUID() + ",cn=Scheduled Tasks,cn=Tasks","objectclass: top","objectclass: ds-task","objectclass: ds-task-import","ds-task-class-name: org.opends.server.tasks.ImportTask","ds-task-import-include-branch: ou=people,dc=example,dc=com","ds-task-import-ldif-file: " + ldifFile.getPath(),"ds-task-import-reject-file: " + rejectFile.getPath(),"ds-task-import-overwrite-rejects: TRUE","ds-task-import-exclude-attribute: description","ds-task-import-exclude-filter: (st=CA)","ds-task-import-exclude-branch: o=exclude,dc=example,dc=com"),TaskState.COMPLETED_SUCCESSFULLY},{TestCaseUtils.makeEntry("dn: ds-task-id=" + UUID.randomUUID() + ",cn=Scheduled Tasks,cn=Tasks","objectclass: top","objectclass: ds-task","objectclass: ds-task-import","ds-task-class-name: org.opends.server.tasks.ImportTask","ds-task-import-backend-id: userRoot","ds-task-import-ldif-file: " + ldifFile.getPath(),"ds-task-import-reject-file: " + ldifFile.getParent(),"ds-task-import-overwrite-rejects: TRUE"),TaskState.STOPPED_BY_ERROR}};}  }
class C{  public void addFileAttachment(String description,String file,String fileDisplay,PdfName mimeType,PdfName afRelationshipValue) throws IOException {  addFileAttachment(description,PdfFileSpec.createEmbeddedFileSpec(this,file,description,fileDisplay,mimeType,afRelationshipValue,true));}  }
class C{  public void columnAdded(TableColumnModelEvent e){  resizeAndRepaint();}  }
class C{  public static boolean isValidType(short type){  return type == TYPE_UNSIGNED_BYTE || type == TYPE_ASCII || type == TYPE_UNSIGNED_SHORT || type == TYPE_UNSIGNED_LONG || type == TYPE_UNSIGNED_RATIONAL || type == TYPE_UNDEFINED || type == TYPE_LONG || type == TYPE_RATIONAL;}  }
class C{  static Class<?> comparableClassFor(Object x){  if (x instanceof Comparable) {    Class<?> c;    Type[] ts, as;    Type t;    ParameterizedType p;    if ((c=x.getClass()) == String.class)     return c;    if ((ts=c.getGenericInterfaces()) != null) {      for (int i=0; i < ts.length; ++i) {        if (((t=ts[i]) instanceof ParameterizedType) && ((p=(ParameterizedType)t).getRawType() == Comparable.class) && (as=p.getActualTypeArguments()) != null && as.length == 1 && as[0] == c)         return c;      }    }  }  return null;}  }
class C{  @SuppressWarnings("unchecked") public MultiLockFairBlockingQueue(){  items=new LinkedList[LOCK_COUNT];  waiters=new LinkedList[LOCK_COUNT];  for (int i=0; i < LOCK_COUNT; i++) {    items[i]=new LinkedList<>();    waiters[i]=new LinkedList<>();    locks[i]=new ReentrantLock(false);  }}  }
class C{  public static Event35Id.Builder newBuilder(){  return new Event35Id.Builder();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapinuseattributeerr.class,args);}  }
class C{  private DirectoryServer(){  this(new DirectoryEnvironmentConfig());}  }
class C{  public static boolean supportLocalProperties(String agentType){  return localAgentProperties.containsKey(agentType);}  }
class C{  public static void renameFile(File fileToRename,File target) throws IOException {  if (fileToRename != null && target != null) {synchronized (target) {      if (target.exists() && !target.delete()) {        LocalizableMessage message=ERR_RENAMEFILE_CANNOT_DELETE_TARGET.get(target.getPath());        throw new IOException(message.toString());      }    }    if (!fileToRename.renameTo(target)) {      LocalizableMessage message=ERR_RENAMEFILE_CANNOT_RENAME.get(fileToRename.getPath(),target.getPath());      throw new IOException(message.toString());    }  }}  }
class C{  @Override public int hashCode(){  int yearValue=year;  int monthValue=month;  int dayValue=day;  return (yearValue & 0xFFFFF800) ^ ((yearValue << 11) + (monthValue << 6) + (dayValue));}  }
class C{  private static String byteArrayToHexString(byte[] byteArray){  int readBytes=byteArray.length;  StringBuilder hexData=new StringBuilder();  int onebyte;  for (int i=0; i < readBytes; i++) {    onebyte=((0x000000ff & byteArray[i]) | 0xffffff00);    hexData.append(Integer.toHexString(onebyte).substring(6));  }  return hexData.toString();}  }
class C{  public float convertToMb(long valInBytes){  return (float)valInBytes / (BYTEFACTOR * BYTEFACTOR);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  if (!m_doneEval) {    this.m_transformer.getMsgMgr().error(xctxt.getSAXLocator(),XSLTErrorResources.ER_REFERENCING_ITSELF,new Object[]{((ElemVariable)this.object()).getName().getLocalName()});  }  VariableStack vars=xctxt.getVarStack();  int currentFrame=vars.getStackFrame();  ElemVariable velem=(ElemVariable)m_obj;  try {    m_doneEval=false;    if (-1 != velem.m_frameSize)     vars.link(velem.m_frameSize);    XObject var=velem.getValue(m_transformer,m_context);    m_doneEval=true;    return var;  }  finally {    if (-1 != velem.m_frameSize)     vars.unlink(currentFrame);  }}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  public static void initImageLoader(Context context){  ImageLoaderConfiguration.Builder config=new ImageLoaderConfiguration.Builder(context);  config.threadPriority(Thread.NORM_PRIORITY - 2);  config.denyCacheImageMultipleSizesInMemory();  config.diskCacheFileNameGenerator(new Md5FileNameGenerator());  config.diskCacheSize(50 * 1024 * 1024);  config.tasksProcessingOrder(QueueProcessingType.LIFO);  config.writeDebugLogs();  ImageLoader.getInstance().init(config.build());}  }
class C{  public static ComponentUI createUI(JComponent b){  return new SynthCheckBoxUI();}  }
class C{  private Map<ServerGroupProperty,Object> makePropertiesFromServerGroupAttrs(SearchResultEntry entry) throws ADSContextException {  Map<ServerGroupProperty,Object> result=new HashMap<>();  for (  ServerGroupProperty prop : ServerGroupProperty.values()) {    Attribute attr=entry.getAttribute(prop.getAttributeName());    if (attr == null) {      continue;    }    Object value;    if (attr.size() >= 1 && MULTIVALUED_SERVER_GROUP_PROPERTIES.contains(prop)) {      Set<String> set=new HashSet<>();      toStrings(set,attr);      value=set;    } else {      value=attr.firstValueAsString();    }    result.put(prop,value);  }  return result;}  }
class C{  public PagePropertiesCallback(String name,String header,String image,int timeOut,String templateName,boolean error,String page_state){  this.image=image;  if (timeOut != 0) {    this.timeOut=timeOut;  }  this.templateName=templateName;  this.moduleName=name;  this.header=header;  headerTemplate=header;  this.error=error;  this.page_state=page_state;}  }
class C{  void nestedMayThrow(boolean doThrow){synchronized (this) {synchronized (Main.class) {synchronized (new Object()) {synchronized (Class.class) {          if (doThrow) {            throw new MyException();          }        }      }    }  }}  }
class C{  private static String escapeBackslashes(final String value){  return value.replace("\\","\\\\");}  }
class C{  protected void checkState(boolean openForWrite) throws IllegalArgumentException {  if (this.openForWrite != openForWrite) {    cleanup();    if (openForWrite)     throw new IllegalArgumentException("Can't write message, this factory is reading."); else     throw new IllegalArgumentException("Can't read message, this factory is writing.");  }  if (this.closed) {    cleanup();    throw new IllegalArgumentException("Factory has been closed.");  }}  }
class C{  private synchronized boolean register(String label,Command command,boolean isAlias,String fallbackPrefix){  knownCommands.put(fallbackPrefix + ":" + label,command);  if ((command instanceof VanillaCommand || isAlias) && knownCommands.containsKey(label)) {    return false;  }  boolean registered=true;  Command conflict=knownCommands.get(label);  if (conflict != null && conflict.getLabel().equals(label)) {    return false;  }  if (!isAlias) {    command.setLabel(label);  }  knownCommands.put(label,command);  return registered;}  }
class C{  public String generateBranchId(){  long num=rand.nextLong() + Utils.counter++ + System.currentTimeMillis()+ System.nanoTime();  int hash=(int)Math.abs(num % digesterPoolsSize);  MessageDigest digester=digesterPool[hash];synchronized (digester) {    byte bid[]=digester.digest(Long.toString(num).getBytes());    return SIPConstants.BRANCH_MAGIC_COOKIE + "-" + this.signature+ "-"+ Utils.toHexString(bid);  }}  }
class C{  public InvalidKeyException(){  super();}  }
class C{  public void seek(long pos) throws IOException {  checkClosed();  if (pos < flushedPos) {    throw new IndexOutOfBoundsException();  }  cache.seek(pos);  this.streamPos=cache.getFilePointer();  maxStreamPos=Math.max(maxStreamPos,streamPos);  this.bitOffset=0;}  }
class C{  private void logToWriter(BufferedWriter writer,List<StringBuilder> lines,LocalizableMessage message){  if (writer != null) {    try {      writer.write("# ");      writer.write(String.valueOf(message));      writer.newLine();      for (      StringBuilder sb : lines) {        writer.write(sb.toString());        writer.newLine();      }      writer.newLine();    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  private EntryIDSet evaluateExtensibleFilter(SearchFilter extensibleFilter){  if (extensibleFilter.getDNAttributes()) {    return IndexQueryFactoryImpl.createNullIndexQuery().evaluate(null,null);  }  AttributeIndex attributeIndex=entryContainer.getAttributeIndex(extensibleFilter.getAttributeType());  if (attributeIndex != null) {    final IndexQueryFactoryImpl indexQueryFactory=new IndexQueryFactoryImpl(txn,attributeIndex);    return attributeIndex.evaluateExtensibleFilter(indexQueryFactory,extensibleFilter,buffer,monitor);  }  return IndexQueryFactoryImpl.createNullIndexQuery().evaluate(null,null);}  }
class C{  @Override public Rectangle placeBarcode(PdfCanvas canvas,Color barColor,Color textColor){  String fullCode;  if (codeType == CODE128_RAW) {    int idx=code.indexOf('\uffff');    if (idx < 0) {      fullCode="";    } else {      fullCode=code.substring(idx + 1);    }  } else   if (codeType == CODE128_UCC) {    fullCode=getHumanReadableUCCEAN(code);  } else {    fullCode=removeFNC1(code);  }  float fontX=0;  if (font != null) {    fontX=font.getWidth(fullCode=altText != null ? altText : fullCode,size);  }  String bCode;  if (codeType == CODE128_RAW) {    int idx=code.indexOf('\uffff');    if (idx >= 0)     bCode=code.substring(0,idx); else     bCode=code;  } else {    bCode=getRawText(code,codeType == CODE128_UCC,codeSet);  }  int len=bCode.length();  float fullWidth=(len + 2) * 11 * x + 2 * x;  float barStartX=0;  float textStartX=0;switch (textAlignment) {case ALIGN_LEFT:    break;case ALIGN_RIGHT:  if (fontX > fullWidth) {    barStartX=fontX - fullWidth;  } else {    textStartX=fullWidth - fontX;  }break;default :if (fontX > fullWidth) {barStartX=(fontX - fullWidth) / 2;} else {textStartX=(fullWidth - fontX) / 2;}break;}float barStartY=0;float textStartY=0;if (font != null) {if (baseline <= 0) textStartY=barHeight - baseline; else {textStartY=-getDescender();barStartY=textStartY + baseline;}}byte[] bars=getBarsCode128Raw(bCode);boolean print=true;if (barColor != null) {canvas.setFillColor(barColor);}for (int k=0; k < bars.length; ++k) {float w=bars[k] * x;if (print) {canvas.rectangle(barStartX,barStartY,w - inkSpreading,barHeight);}print=!print;barStartX+=w;}canvas.fill();if (font != null) {if (textColor != null) {canvas.setFillColor(textColor);}canvas.beginText();canvas.setFontAndSize(font,size);canvas.setTextMatrix(textStartX,textStartY);canvas.showText(fullCode);canvas.endText();}return getBarcodeSize();}  }
class C{  public Collection engineGenerateCRLs(InputStream inStream) throws CRLException {  throw new UnsupportedOperationException("not yet.");}  }
class C{  public Socket createSocket(InetAddress host,int portNumber) throws SSLConnectionException, IOException {  if (sslSocketFactory == null) {    throw new SSLConnectionException(ERR_TOOLS_SSL_CONNECTION_NOT_INITIALIZED.get());  }  return socketWithEnabledProtocols(sslSocketFactory.createSocket(host,portNumber));}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> filterCreate(Context context,CreateRequest request,RequestHandler next){  final String resource=ServerContextUtils.getResourceId(request,context);  final String action=ServerContextUtils.getCreateString(request);  logAccess(resource,action,context);  return next.handleCreate(context,request);}  }
class C{  public NSNumber(boolean b){  boolValue=b;  doubleValue=longValue=b ? 1 : 0;  type=BOOLEAN;}  }
class C{  public Set<T> query(QueryFilter<String> query) throws ServerException {  SyncResultHandler<Collection<Token>> handler=new SyncResultHandler<Collection<Token>>();  try {    Task task=taskFactory.query(adapter.toTokenQuery(query),handler);    taskExecutor.execute(null,task);    return convertResults(handler.getResults());  } catch (  ServerException e) {    throw e;  }catch (  DataLayerException e) {    if (debug.warningEnabled()) {      debug.warning("Unable to read objects corresponding to query: " + query,e);    }    throw new ServerException("Could not query tokens from data store: " + e.getMessage());  }}  }
class C{  protected final Hop createHop(SipURI sipUri,Request request){  String transport=sipUri.isSecure() ? SIPConstants.TLS : sipUri.getTransportParam();  if (transport == null) {    ViaHeader via=(ViaHeader)request.getHeader(ViaHeader.NAME);    if (via != null) {      transport=via.getTransport();    }    if (transport == null) {      transport=ListeningPoint.UDP;    }  }  int port;  if (sipUri.getPort() != -1) {    port=sipUri.getPort();  } else {    if (transport.equalsIgnoreCase(SIPConstants.TLS))     port=5061; else     port=5060;  }  String host=sipUri.getMAddrParam() != null ? sipUri.getMAddrParam() : sipUri.getHost();  AddressResolver addressResolver=this.sipStack.getAddressResolver();  return addressResolver.resolveAddress(new HopImpl(host,port,transport));}  }
class C{  ConstantClass(final DataInput file) throws IOException {  super(Const.CONSTANT_Class);  this.name_index=file.readUnsignedShort();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textparseintolistofelements.class,args);}  }
class C{  public QCharset(String name,float q){  if (name == null) {    throw new IllegalArgumentException("QCharset::charset name can't be" + "NULL");  }  this.name=name;  qFactor=q;}  }
class C{  public int scanChar() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position++];  boolean external=false;  if (c == '\n' || (c == '\r' && (external=fCurrentEntity.isExternal()))) {    if (fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=(char)c;      load(1,false);    }    if (c == '\r' && external) {      if (fCurrentEntity.ch[fCurrentEntity.position++] != '\n') {        fCurrentEntity.position--;      }      c='\n';    }  }  return c;}  }
class C{  public static Integer valueOf(String string) throws NumberFormatException {  return valueOf(parseInt(string));}  }
class C{  private void runDetectChildrenManually() throws SearchAbandonException {  BasicNode parentNode=getNode();  ConnectionWithControls conn=null;  try {    conn=controller.findConnectionForDisplayedEntry(parentNode);    SearchRequest request=newSearchRequest(controller.findBaseDNForChildEntries(parentNode),useCustomFilter() ? WHOLE_SUBTREE : BASE_OBJECT,controller.getChildSearchFilter(),NO_ATTRIBUTES).setSizeLimit(1);    try (ConnectionEntryReader searchResults=conn.search(request)){      throwAbandonIfNeeded(null);      isLeafNode=!searchResults.hasNext();    }   } catch (  LdapException e) {    if (e.getResult().getResultCode().equals(ResultCode.SIZE_LIMIT_EXCEEDED)) {    } else {      throwAbandonIfNeeded(e);    }  } finally {    if (conn != null) {      controller.releaseLDAPConnection(conn);    }  }}  }
class C{  public CountersTable(){}  }
class C{  public boolean remove(AccessibleRelation relation){  if (relations == null) {    return false;  } else {    return relations.removeElement(relation);  }}  }
class C{  public void removeAll(){  Component[] children=getComponents();  Hashtable<Component,Integer> cToL=getComponentToLayer();  for (int counter=children.length - 1; counter >= 0; counter--) {    Component c=children[counter];    if (c != null && !(c instanceof JComponent)) {      cToL.remove(c);    }  }  super.removeAll();}  }
class C{  public static void copy(Reader input,OutputStream output) throws IOException {  OutputStreamWriter out=new OutputStreamWriter(output);  copy(input,out);  out.flush();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementretrievetagname.class,args);}  }
class C{  public final boolean isReverse(){  return true;}  }
class C{  public XMLEncoder(OutputStream out){  this(out,"UTF-8",true,0);}  }
class C{  public void expandNode(BasicNode node){  automaticallyExpandedNode=true;  TreePath tp=new TreePath(treeModel.getPathToRoot(node));  tree.expandPath(tp);  tree.fireTreeExpanded(tp);  automaticallyExpandedNode=false;}  }
class C{  @NonNull public static Interpolator path(Path path){  return PathInterpolatorCompat.create(path);}  }
class C{  public final SecretKey generateKey(){  return spiImpl.engineGenerateKey();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrgetownerelement01.class,args);}  }
class C{  public void addIdentity(Identity identity) throws KeyManagementException {}  }
class C{  public void load(){  InputStream is=null;  registryResource=null;  try {    String configUrl=getConfigUrl();    if (configUrl != null) {      is=(new URL(configUrl)).openStream();      if (log.isInfoEnabled())       log.info("Find registry server-registry.xml from system property at url " + configUrl);      registryResource=new URL(configUrl);    }  } catch (  Throwable t) {  }  if (is == null) {    try {      File home=new File(getCatalinaBase());      File conf=new File(home,"conf");      File reg=new File(conf,"server-registry.xml");      is=new FileInputStream(reg);      if (log.isInfoEnabled())       log.info("Find registry server-registry.xml at file " + reg.getCanonicalPath());      registryResource=reg.toURI().toURL();    } catch (    Throwable t) {    }  }  if (is == null) {    try {      is=StoreLoader.class.getResourceAsStream("/org/apache/catalina/storeconfig/server-registry.xml");      if (log.isDebugEnabled())       log.debug("Find registry server-registry.xml at classpath resource");      registryResource=StoreLoader.class.getResource("/org/apache/catalina/storeconfig/server-registry.xml");    } catch (    Throwable t) {    }  }  if (is != null) {    try {synchronized (digester) {        registry=(StoreRegistry)digester.parse(is);      }    } catch (    Throwable t) {      log.error(t);    } finally {      try {        is.close();      } catch (      IOException e) {      }    }  }  if (is == null) {    log.error("Failed to load server-registry.xml");  }}  }
class C{  int subtract(MutableBigInteger b){  MutableBigInteger a=this;  int[] result=value;  int sign=a.compare(b);  if (sign == 0) {    reset();    return 0;  }  if (sign < 0) {    MutableBigInteger tmp=a;    a=b;    b=tmp;  }  int resultLen=a.intLen;  if (result.length < resultLen)   result=new int[resultLen];  long diff=0;  int x=a.intLen;  int y=b.intLen;  int rstart=result.length - 1;  while (y > 0) {    x--;    y--;    diff=(a.value[x + a.offset] & LONG_MASK) - (b.value[y + b.offset] & LONG_MASK) - ((int)-(diff >> 32));    result[rstart--]=(int)diff;  }  while (x > 0) {    x--;    diff=(a.value[x + a.offset] & LONG_MASK) - ((int)-(diff >> 32));    result[rstart--]=(int)diff;  }  value=result;  intLen=resultLen;  offset=value.length - resultLen;  normalize();  return sign;}  }
class C{  private static HashSet<Object> cloneAndCheckIssuerNames(Collection<?> names) throws IOException {  HashSet<Object> namesCopy=new HashSet<Object>();  Iterator<?> i=names.iterator();  while (i.hasNext()) {    Object nameObject=i.next();    if (!(nameObject instanceof byte[]) && !(nameObject instanceof String))     throw new IOException("name not byte array or String");    if (nameObject instanceof byte[])     namesCopy.add(((byte[])nameObject).clone()); else     namesCopy.add(nameObject);  }  return (namesCopy);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childNodes;  ProcessingInstruction piNode;  String target;  doc=(Document)load("staff",false);  childNodes=doc.getChildNodes();  piNode=(ProcessingInstruction)childNodes.item(0);  target=piNode.getTarget();  assertEquals("processinginstructionGetTargetAssert","TEST-STYLE",target);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setNamedItemNS02.class,args);}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_String(){  Locale x=new Locale("xx","CV","ZZ");  assertTrue("Failed to create Locale",x.getLanguage().equals("xx") && (x.getCountry().equals("CV") && x.getVariant().equals("ZZ")));  try {    new Locale(null,"CV","ZZ");    fail("expected NullPointerException with 1st parameter == null");  } catch (  NullPointerException e) {  }  try {    new Locale("xx",null,"ZZ");    fail("expected NullPointerException with 2nd parameter == null");  } catch (  NullPointerException e) {  }  try {    new Locale("xx","CV",null);    fail("expected NullPointerException with 3rd parameter == null");  } catch (  NullPointerException e) {  }}  }
class C{  public InvalidSessionIdException(SessionID sessionId){  this(sessionId != null ? sessionId.toString() : "");}  }
class C{  public JobAttributes(){  setCopiesToDefault();  setDefaultSelection(DefaultSelectionType.ALL);  setDestination(DestinationType.PRINTER);  setDialog(DialogType.NATIVE);  setMaxPage(Integer.MAX_VALUE);  setMinPage(1);  setMultipleDocumentHandlingToDefault();  setSidesToDefault();}  }
class C{  public ValidationResult isHostValid(String host,Map props,IStateAccess state){  ValidationResultStatus validRes=ValidationResultStatus.STATUS_FAILED;  LocalizedMessage returnMessage=null;  boolean cont=false;  if ((host != null) && (host.length() > 0)) {    try {      int intHost=Integer.parseInt(host);      double dobHost=Double.parseDouble(host);    } catch (    NumberFormatException exc) {      cont=true;    }catch (    Exception ex) {      cont=true;    }    try {      if (cont) {        String tempHost=InetAddress.getByName(host).getHostName();        if (tempHost != null) {          returnMessage=LocalizedMessage.get(LOC_VA_MSG_VAL_HOST,new Object[]{host});          validRes=ValidationResultStatus.STATUS_SUCCESS;        }      }    } catch (    Exception ex) {      Debug.log("NetworkVaidator.isHostValid(..) threw exception :",ex);    }  }  if (validRes.getIntValue() == ValidationResultStatus.INT_STATUS_FAILED) {    returnMessage=LocalizedMessage.get(LOC_VA_WRN_IN_VAL_HOST,new Object[]{host});  }  Debug.log("NetworkValidator : Is Host : " + host + " valid ? "+ validRes.isSuccessful());  return new ValidationResult(validRes,null,returnMessage);}  }
class C{  public void testSkip() throws IOException {  byte[] data=new byte[1024 * 1024];  byte[] gzipped=GZIPOutputStreamTest.gzip(data);  GZIPInputStream in=new GZIPInputStream(new ByteArrayInputStream(gzipped));  long totalSkipped=0;  long count;  do {    count=in.skip(Long.MAX_VALUE);    totalSkipped+=count;  } while (count > 0);  assertEquals(data.length,totalSkipped);  in.close();}  }
class C{  public Map queryData(Object credential,String resourceID,List dstQueryItems,Map interactedData,Document request) throws IDPPException {  IDPPUtils.debug.message("PersonalProfile: query init");  if (credential == null || resourceID == null || dstQueryItems == null || request == null) {    IDPPUtils.debug.error("PersonalProfile:queryData: null input");    throw new IDPPException(IDPPUtils.bundle.getString("nullInputParams"));  }  boolean sessionValid=false;  try {    sessionValid=SessionManager.getProvider().isValid(credential);  } catch (  SessionException se) {    IDPPUtils.debug.error("PersonalProfile:queryData:Invalid WSC" + "credentials",se);  }  if (!sessionValid) {    throw new IDPPException(IDPPUtils.bundle.getString("invalidWSCCredentials"));  }  String userDN=getUserDN(resourceID);  if (userDN == null) {    if (IDPPUtils.debug.messageEnabled()) {      IDPPUtils.debug.message("PersonalProfile: queryData:userDN" + "is null for a given resourceID.");    }    throw new IDPPException(IDPPUtils.bundle.getString("noResourceID"));  }  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PersonalProfile:queryData: userDN=" + userDN);  }  Map userMap=null;  try {    userMap=getUserData(userDN,dstQueryItems);  } catch (  IDPPException ie) {    IDPPUtils.debug.error("PersonalProfile:queryData:Error while" + "retrieving user data.",ie);    throw new IDPPException(ie);  }  if (userMap == null || userMap.isEmpty()) {    if (IDPPUtils.debug.messageEnabled()) {      IDPPUtils.debug.message("PersonalProfile:queryData:no data:" + "for the requested pp attributes.");    }    throw new IDPPException(IDPPUtils.bundle.getString("noData"));  }  if (interactedData != null && !interactedData.isEmpty()) {    if (IDPPUtils.debug.messageEnabled()) {      IDPPUtils.debug.message("PersonalProfile.queryData(): " + " Contents of Interaction Map " + interactedData.toString());    }    userMap=updateUserDataMap(userMap,interactedData);  }  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PersonalProfile:queryData:requested Data " + userMap);  }  Map results=new HashMap();  Iterator iter=dstQueryItems.iterator();  while (iter.hasNext()) {    DSTQueryItem item=(DSTQueryItem)iter.next();    List queryResults=new ArrayList();    String queryExpression=item.getSelect();    String ppContainer=getContainerFromSelect(queryExpression);    if (IDPPUtils.debug.messageEnabled()) {      IDPPUtils.debug.message("PersonalProfile:queryData: Container" + "processing:" + ppContainer);    }    if (ppContainer == null) {      continue;    }    IDPPContainer container=getIDPPContainer(ppContainer,userDN);    if (container == null) {      continue;    }    Document xmlContainer=null;    try {      xmlContainer=container.toXMLDocument(userMap);    } catch (    IDPPException ie) {      IDPPUtils.debug.error("PersonalProfile:queryData:Error while" + "converting container to an XML document.",ie);      throw new IDPPException(ie);    }    if (IDPPUtils.debug.messageEnabled()) {      IDPPUtils.debug.message("PersonalProfile:queryData: Container" + "xml doc:" + XMLUtils.print(xmlContainer.getDocumentElement()));    }    Element element=request.getDocumentElement();    element.setAttribute(IDPPConstants.XML_NS + serviceManager.getPPExtensionPrefix(),IDPPConstants.PP_EXT_XML_NS);    queryExpression=replacePrefix(queryExpression);    if (IDPPUtils.debug.messageEnabled()) {      IDPPUtils.debug.message("PersonalProfile:queryData: query" + "expression before applying Xpath:" + queryExpression);    }    NodeList result=null;    try {      result=(NodeList)XPathAPI.selectNodeList(xmlContainer,queryExpression,element);    } catch (    Exception ex) {      IDPPUtils.debug.error("PersonalProfile.queryData:Invalid " + "expression.",ex);      continue;    }    if ((result == null) || (result.getLength() == 0)) {      IDPPUtils.debug.message("PersonalProfile.queryData:null result");      continue;    }    for (int i=0; i < result.getLength(); i++) {      Node n=result.item(i);      try {        queryResults.add(IDPPUtils.getUnmarshaller().unmarshal(n));      } catch (      JAXBException je) {        IDPPUtils.debug.error("PersonalProfile:queryData:JAXB" + "Error while unmarshalling the results.",je);        continue;      }    }    results.put(item,queryResults);  }  return results;}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public PdfIndirectReference createNextIndirectReference(){  checkClosingStatus();  return xref.createNextIndirectReference(this);}  }
class C{  public void removeFromTag(){  parameters.delete(ParameterNames.FROM_TAG);}  }
class C{  public void destroy(){}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitLiteralResultElement(this);}  }
class C{  public void paintToolBarContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public boolean isMimeTypeEqual(String mimeType){  if (mimeType == null) {    throw new NullPointerException("mimeType");  }  if (this.mimeType == null) {    return false;  }  try {    return this.mimeType.match(new MimeType(mimeType));  } catch (  MimeTypeParseException mtpe) {    return false;  }}  }
class C{  private void connect(HostPort remoteServerAddress,DN baseDN){  boolean sslEncryption=replSessionSecurity.isSslEncryption();  if (logger.isTraceEnabled()) {    logger.trace("RS " + getMonitorInstanceName() + " connects to "+ remoteServerAddress);  }  Socket socket=new Socket();  Session session=null;  try {    socket.setTcpNoDelay(true);    if (config.getSourceAddress() != null) {      InetSocketAddress local=new InetSocketAddress(config.getSourceAddress(),0);      socket.bind(local);    }    int timeoutMS=MultimasterReplication.getConnectionTimeoutMS();    socket.connect(remoteServerAddress.toInetSocketAddress(),timeoutMS);    session=replSessionSecurity.createClientSession(socket,timeoutMS);    ReplicationServerHandler rsHandler=new ReplicationServerHandler(session,config.getQueueSize(),this,config.getWindowSize());    rsHandler.connect(baseDN,sslEncryption);  } catch (  Exception e) {    logger.traceException(e);    close(session);    close(socket);  }}  }
class C{  public String toXML(){  return toXML(true);}  }
class C{  public static boolean binaryDataIsPdfFormat(byte[] data){  if (data.length < 4) {    return false;  }  return (0x25 == (data[0] & 0xff)) && (0x50 == (data[1] & 0xff)) && (0x44 == (data[2] & 0xff))&& (0x46 == (data[3] & 0xff));}  }
