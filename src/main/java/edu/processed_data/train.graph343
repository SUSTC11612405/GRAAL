class C{  protected void init(Container contentPane){  FileInputStream propFile=null;  Properties props=new Properties();  try {    UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");  } catch (  Exception ex) {  }  try {    propFile=new FileInputStream(PROP_FILE);    props.load(propFile);  } catch (  Exception fe) {    propFile=null;  }  setTitleText("");  connPanel.setLayout(new GridLayout(2,1));  connPanel.setBorder(new EtchedBorder());  mqttComp=new JPanel(new BorderLayout());  historyComp=new MQTTHist(getJFrame(),optionsComp);  mqttComp.add(connPanel,BorderLayout.NORTH);  JSplitPane pubsub=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,subPanel,pubPanel);  pubsub.setOneTouchExpandable(true);  pubsub.setDividerSize(10);  pubsub.setResizeWeight(0.5);  mqttComp.add(pubsub,BorderLayout.CENTER);  ipAddress=new JComboBox();  ipAddress.setPreferredSize(new Dimension(125,20));  ipAddress.setEditable(true);  getProperties(props,ipAddress,"IPAddressList",DEFAULT_IP_ADDRESS);  port=new JComboBox();  port.setPreferredSize(new Dimension(65,20));  port.setEditable(true);  getProperties(props,port,"IPPortList",DEFAULT_PORT_NUMBER);  optionsComp=new ConnOpts(this,props);  led=new LED();  led.setRed();  new Thread(led).start();  connect=new JButton("Connect");  disconnect=new JButton("Disconnect");  disconnect.setEnabled(false);  JButton history=new JButton("History");  connect.addActionListener(this);  disconnect.addActionListener(this);  history.addActionListener(this);  JPanel text=new JPanel();  text.add(new JLabel("Broker TCP/IP address: "));  text.add(ipAddress);  text.add(port);  JPanel buttons=new JPanel();  buttons.setLayout(new BoxLayout(buttons,BoxLayout.X_AXIS));  buttons.add(new JSeparator(SwingConstants.VERTICAL));  buttons.add(led);  buttons.add(connect);  buttons.add(new JLabel("  "));  buttons.add(disconnect);  buttons.add(new JSeparator(SwingConstants.VERTICAL));  buttons.add(history);  buttons.add(new JSeparator(SwingConstants.VERTICAL));  connPanel.add(text);  connPanel.add(buttons);  pubPanelContr=new PubPanel(pubPanel,this);  subPanelContr=new SubPanel(subPanel,this);  if (propFile != null) {    try {      propFile.close();    } catch (    Exception e) {    }  }  JTabbedPane tabbedGui=new JTabbedPane();  tabbedGui.addTab("MQTT",mqttComp);  tabbedGui.addTab("Options",optionsComp);  contentPane.add(tabbedGui);}  }
class C{  public int size(){  return this.values;}  }
class C{  public Builder maxAlternatives(Integer maxAlternatives){  this.maxAlternatives=maxAlternatives;  return this;}  }
class C{  public void unregisterCommand(Command command){  while (commandMap.values().remove(command))   ;  commandsByPlugin.values().remove(command);}  }
class C{  public static ValueDate parse(String s){  try {    return fromDateValue(DateTimeUtils.parseDateValue(s,0,s.length()));  } catch (  Exception e) {    throw DbException.get(ErrorCode.INVALID_DATETIME_CONSTANT_2,e,"DATE",s);  }}  }
class C{  public double[] RGBtoIHS(double r,double g,double b){  double[] ret=new double[3];  double i, h, s;  double minRGB=b;  i=r + g + b;  if (g < minRGB) {    minRGB=g;  }  if (r < minRGB) {    minRGB=r;  }  if (i == 3) {    h=0;  } else   if (b == minRGB) {    h=(g - b) / (i - 3 * b);  } else   if (r == minRGB) {    h=(b - r) / (i - 3 * r) + 1;  } else {    h=(r - g) / (i - 3 * g) + 2;  }  if (h <= 1) {    s=(i - 3 * b) / i;  } else   if (h <= 2) {    s=(i - 3 * r) / i;  } else {    s=(i - 3 * g) / i;  }  ret[0]=i;  ret[1]=h;  ret[2]=s;  return ret;}  }
class C{  public TradeOrder clone(){  try {    TradeOrder order=(TradeOrder)super.clone();    List<TradeOrderfill> tradeOrderfills=new ArrayList<TradeOrderfill>(0);    order.setTradeOrderfills(tradeOrderfills);    return order;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public static MyFragment newInstance(int index){  MyFragment f=new MyFragment();  Bundle args=new Bundle();  args.putInt("index",index);  f.setArguments(args);  return f;}  }
class C{  public MenuList(){  menuList=new ArrayList<JMenu>();}  }
class C{  protected boolean updateImageForProjection(Projection proj){  boolean projUnchanged=proj.equals(lastProjection);  boolean ret=bitmap != null && projUnchanged && !getNeedToRegenerate();  if (!projUnchanged) {    lastProjection=proj.makeClone();  }  evaluateRotationAngle(proj);  return !ret;}  }
class C{  public FieldBinding[] availableFields(){  return fields();}  }
class C{  public int executeQuery(String jpql){  return 0;}  }
class C{  public static RegionAttributes createRegionAttrsForPR(int red,int localMaxMem,long recoveryDelay,EvictionAttributes evictionAttrs,PartitionResolver resolver){  AttributesFactory attr=new AttributesFactory();  attr.setDataPolicy(DataPolicy.PARTITION);  PartitionAttributesFactory paf=new PartitionAttributesFactory();  paf.setRedundantCopies(red).setLocalMaxMemory(localMaxMem).setRecoveryDelay(recoveryDelay);  if (resolver != null) {    paf.setPartitionResolver(resolver);  }  PartitionAttributes<?,?> prAttr=paf.create();  attr.setPartitionAttributes(prAttr);  attr.setEvictionAttributes(evictionAttrs);  return attr.create();}  }
class C{  public static int determineDatalinkTypeCode() throws UnsupportedOperationException {  try {    return Types.class.getField(TypeMap.DATALINK).getInt(null);  } catch (  Exception ex) {    throw new UnsupportedOperationException("The jdbc type DATALINK is not supported");  }}  }
class C{  @Override public void close(){synchronized (this.lock) {    if (isPreview) {      pageImages.addElement(previewImage);      pagenum=1;      displayPage();    }    if (page != null) {      page.dispose();    }    if (job != null) {      job.end();    }  }}  }
class C{  @Override protected void onSetChannelBan(String target,String sourceNick,String sourceLogin,String sourceHostname,String hostmask){  Message message=new Message(service.getString(R.string.message_set_ban,sourceNick,hostmask));  message.setColor(Message.COLOR_BLUE);  server.getConversation(target).addMessage(message);  service.sendBroadcast(Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),target));}  }
class C{  public String calculateResponse(String user,String password,String method,String uri,String nc,String body){  String a1=new StringBuilder(user).append(COLON).append(mRealm).append(COLON).append(password).toString();  StringBuilder a2=new StringBuilder(method).append(COLON).append(uri);  if (mQop != null) {    if (!mQop.startsWith("auth")) {      throw new IllegalArgumentException("Invalid qop: ".concat(mQop));    }    if (mQop.equals("auth-int")) {      a2.append(COLON).append(H(body));    }    return H(new StringBuilder(H(a1)).append(COLON).append(mNonce).append(COLON).append(nc).append(COLON).append(mCnonce).append(COLON).append(mQop).append(COLON).append(H(a2.toString())).toString());  }  return H(new StringBuilder(H(a1)).append(COLON).append(mNonce).append(COLON).append(H(a2.toString())).toString());}  }
class C{  public boolean addOMGraphic(OMGraphic g){  return add(g);}  }
class C{  public synchronized void addYTextLabel(double y,String text,int scale){  mYTextLabels.get(scale).put(y,text);}  }
class C{  public void readVersion(final int[] columnsIndices,final BufferedReader reader) throws IOException {  String line=reader.readLine();  if (line == null)   throw new RuntimeException("Language definition cannot be found.");  final String[] parts=line.split(";");  if (parts[columnsIndices[0]].equals("ENG"))   language=0; else   if (parts[columnsIndices[0]].equals("DEU"))   language=1; else   throw new RuntimeException("Unknown language: " + parts[columnsIndices[0]]);  reader.readLine();}  }
class C{  public static AliasMetaData newAliasMetaData(AliasMetaData aliasMetaData,String newAlias){  return new AliasMetaData(aliasMetaData,newAlias);}  }
class C{  protected final void writeBorder(final XmlWriter writer){  writer.startElement(UIFormXmlConstants.ELEMENT_BORDER);  try {    writer.addAttribute(UIFormXmlConstants.ATTRIBUTE_TYPE,getBorderType().getId());    if (getBorderTitle() != null) {      final StringDescriptor descriptor=getBorderTitle();      writer.writeStringDescriptor(descriptor,UIFormXmlConstants.ATTRIBUTE_TITLE,UIFormXmlConstants.ATTRIBUTE_TITLE_RESOURCE_BUNDLE,UIFormXmlConstants.ATTRIBUTE_TITLE_KEY);    }    if (myBorderTitleJustification != 0) {      writer.addAttribute(UIFormXmlConstants.ATTRIBUTE_TITLE_JUSTIFICATION,myBorderTitleJustification);    }    if (myBorderTitlePosition != 0) {      writer.addAttribute(UIFormXmlConstants.ATTRIBUTE_TITLE_POSITION,myBorderTitlePosition);    }    if (myBorderTitleFont != null) {      writer.startElement(UIFormXmlConstants.ELEMENT_FONT);      writer.writeFontDescriptor(myBorderTitleFont);      writer.endElement();    }    if (myBorderTitleColor != null) {      writer.startElement(UIFormXmlConstants.ELEMENT_TITLE_COLOR);      writer.writeColorDescriptor(myBorderTitleColor);      writer.endElement();    }    if (myBorderSize != null) {      writer.startElement(UIFormXmlConstants.ELEMENT_SIZE);      writer.writeInsets(myBorderSize);      writer.endElement();    }    if (myBorderColor != null) {      writer.startElement(UIFormXmlConstants.ELEMENT_COLOR);      writer.writeColorDescriptor(myBorderColor);      writer.endElement();    }  }  finally {    writer.endElement();  }}  }
class C{  private static OutputStream wrapOutputStream(final OutputStream stream){  String os=System.getProperty("os.name");  if (os.startsWith("Windows")) {    try {      return new WindowsAnsiOutputStream(stream);    } catch (    Throwable ignore) {    }    return new AnsiOutputStream(stream);  }  return stream;}  }
class C{  public long handle(){  return this.h;}  }
class C{  public int compareTo(Long object){  return compare(value,object.value);}  }
class C{  public static boolean isEquals(String actual,String expected){  return ObjectUtils.isEquals(actual,expected);}  }
class C{  public static String toSummaryString(Instances i,Multiset<CFD> CFDs){  StringBuilder summary=new StringBuilder();  summary.append("Num CFDs: " + CFDs.size() + "\n\n");  int counter=1;  for (  CFD currentCFD : CFDs) {    StringBuilder cfd=new StringBuilder();    cfd.append(Utils.padLeft("" + (counter++),4) + "   ");    for (    SimpleImmutableEntry<Integer,String> singleLHS : currentCFD.getPremise()) {      cfd.append(i.attribute(singleLHS.getKey()).name());      cfd.append("=");      cfd.append(singleLHS.getValue());      cfd.append(",");    }    cfd.deleteCharAt(cfd.length() - 1);    cfd.append(" -> ");    SimpleImmutableEntry<Integer,String> rhsValue=currentCFD.getRHS();    cfd.append(i.attribute(rhsValue.getKey()).name() + "=" + rhsValue.getValue());    summary.append(cfd.toString() + "\n");  }  return summary.toString();}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  addSounds(SoundLayer.CREATURE_NOISE.groupName,"eat","eat-1");  if (object.has("weight")) {    weight=object.getInt("weight");  } else {    weight=0;  }}  }
class C{  public double nextGaussian(){  if (mHaveNextNextGaussian) {    mHaveNextNextGaussian=false;    return mNextNextGaussian;  } else {    double v1, v2, s;    do {      v1=2 * nextDouble() - 1;      v2=2 * nextDouble() - 1;      s=v1 * v1 + v2 * v2;    } while (s >= 1 || s == 0);    final double multiplier=StrictMath.sqrt(-2 * StrictMath.log(s) / s);    mNextNextGaussian=v2 * multiplier;    mHaveNextNextGaussian=true;    return v1 * multiplier;  }}  }
class C{  @Deprecated public AdBlockerAdviseDialog(Context context,String title,String text,boolean onlyOnce){  this.libraryPreferences=new LibraryPreferences(context);  this.context=context;  this.title=title;  this.text=text;  this.onlyOnce=onlyOnce;}  }
class C{  @Override public void actionPerformed(ActionEvent event){  String command=event.getActionCommand();  if (command.equals("BackgroundPaint")) {    attemptBackgroundPaintSelection();  } else   if (command.equals("OutlineStroke")) {    attemptOutlineStrokeSelection();  } else   if (command.equals("OutlinePaint")) {    attemptOutlinePaintSelection();  } else   if (command.equals("Orientation")) {    attemptOrientationSelection();  } else   if (command.equals("DrawLines")) {    attemptDrawLinesSelection();  } else   if (command.equals("DrawShapes")) {    attemptDrawShapesSelection();  }}  }
class C{  public static void dArraySet(double[] a,int i,double v){  try {    a[i]=v;  } catch (  Throwable t) {    a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)]=v;  }}  }
class C{  private JMenu createHelpMenu(){  JMenuItem menuItem;  JMenu menu;  menu=new JMenu(ResourceManager.translate("help.menu"));  menu.setMnemonic(KeyStroke.getKeyStroke(ResourceManager.translate("help.menu.mnem")).getKeyCode());  menu.getAccessibleContext().setAccessibleDescription(ResourceManager.translate("help.menu.description"));  menuItem=new JMenuItem("Release Notes",null);  menuItem.getAccessibleContext().setAccessibleDescription("Release Notes");  menuItem.addActionListener(listener);  menu.add(menuItem);  menuItem=new JMenuItem("License",null);  menuItem.getAccessibleContext().setAccessibleDescription("TDA Distribution License");  menuItem.addActionListener(listener);  menu.add(menuItem);  menu.addSeparator();  menuItem=new JMenuItem("About TDA",KeyEvent.VK_A);  menuItem.setIcon(TDA.createImageIcon("About.png"));  menuItem.getAccessibleContext().setAccessibleDescription("About Thread Dump Analyzer");  menuItem.addActionListener(listener);  menu.add(menuItem);  return (menu);}  }
class C{  public void addInputMethodListener(InputMethodListener l){  m_textArea.addInputMethodListener(l);}  }
class C{  @SuppressWarnings("unchecked") public CutService(CnATreeElement group,List<CnATreeElement> elementList){  progressObserver=new DummyProgressObserver();  this.selectedGroup=group;  this.elements=elementList;}  }
class C{  protected static void execute(int nThreads,Preprocessor preProcessor,CRFPostprocessor postProcessor){  try {    PrintWriter pwOut=new PrintWriter(System.out,true);    if (postProcessor.flags.testFile != null) {      postProcessor.evaluate(preProcessor,pwOut);    } else {      BufferedReader reader=postProcessor.flags.textFile == null ? new BufferedReader(new InputStreamReader(System.in)) : new BufferedReader(new InputStreamReader(new FileInputStream(postProcessor.flags.textFile),postProcessor.flags.inputEncoding));      double charsPerSec=CRFPostprocessor.decode(postProcessor,reader,pwOut,nThreads);      reader.close();      System.err.printf("Done! Processed input text at %.2f input characters/second%n",charsPerSec);    }  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }catch (  FileNotFoundException e) {    System.err.printf("%s: Could not open %s%n",CRFPostprocessor.class.getName(),postProcessor.flags.textFile);  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected void inorder(TreeNode<E> root){  if (root == null)   return;  Stack<TreeNode<E>> stack=new Stack<>();  TreeNode<E> current=root;  while (!stack.empty() || current != null) {    if (current != null) {      stack.push(current);      current=current.left;    } else {      TreeNode<E> node=stack.pop();      System.out.print(node.element + " ");      current=node.right;    }  }}  }
class C{  protected AttributeList defAttributeList(String name,int type,int modifier,String value,String values,AttributeList atts){  Vector<String> vals=null;  if (values != null) {    vals=new Vector<String>();    for (StringTokenizer s=new StringTokenizer(values,"|"); s.hasMoreTokens(); ) {      String str=s.nextToken();      if (str.length() > 0) {        vals.addElement(str);      }    }  }  return new AttributeList(name,type,modifier,value,vals,atts);}  }
class C{  public static void loadEmergencyClasses(){}  }
class C{  public static GeohashCellQuery.Builder geoHashCellQuery(String name){  return new GeohashCellQuery.Builder(name);}  }
class C{  private static Paint darkerRadialGradientPaint(RadialGradientPaint paint){  final Color[] paintColors=paint.getColors();  for (int i=0; i < paintColors.length; i++) {    paintColors[i]=darker(paintColors[i]);  }  return new RadialGradientPaint(paint.getCenterPoint(),paint.getRadius(),paint.getFocusPoint(),paint.getFractions(),paintColors,paint.getCycleMethod(),paint.getColorSpace(),paint.getTransform());}  }
class C{  public Builder addMember(MemberRef member){  members.add(member);  return this;}  }
class C{  public void registerComponent(JComponent component){  component.removeMouseListener(this);  component.addMouseListener(this);  component.removeMouseMotionListener(moveBeforeEnterListener);  component.addMouseMotionListener(moveBeforeEnterListener);  component.removeKeyListener(accessibilityKeyListener);  component.addKeyListener(accessibilityKeyListener);}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  @Deprecated public DateTimeParserBucket(long instantLocal,Chronology chrono,Locale locale,Integer pivotYear){  this(instantLocal,chrono,locale,pivotYear,2000);}  }
class C{  public Vector3 scale(float scale){  return Vector3.scale(this,scale);}  }
class C{  @Override public void removeIndexes(final IScope scope,final IContainer<?,?> index){  final IList<Integer> l=(IList<Integer>)index.listValue(scope,Types.INT,false);  Collections.sort(l,Collections.reverseOrder());  for (  final Integer i : l) {    remove(i.intValue());  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (terms == null) {    throw new NullPointerException();  }}  }
class C{  protected final RectF rect(){  return mRect;}  }
class C{  public MapAnalyzer(XML aXml){  xml=aXml;}  }
class C{  public JavaStringStatusContext(String source,ISourceRange range){  Assert.isNotNull(source);  fSource=source;  fSourceRange=range;}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public void addSeed(URI uri){  String host=null;  try {    host=uri.getHost();    defaultFetchFilter.addScopeRegex(host);  } catch (  URIException e) {    log.error("There was an error while adding seed value: " + uri,e);    return;  }  this.seedList.add(uri);  if (getSpiderParam().isParseRobotsTxt()) {    try {      URI robotsUri;      if (uri.getPort() == 80 || uri.getPort() == 443) {        robotsUri=new URI(uri.getScheme() + "://" + host+ "/robots.txt",true);      } else {        robotsUri=new URI(uri.getScheme() + "://" + host+ ":"+ uri.getPort()+ "/robots.txt",true);      }      this.seedList.add(robotsUri);    } catch (    Exception e) {      log.warn("Error while creating URI for robots.txt file for site " + uri,e);    }  }  if (getSpiderParam().isParseSitemapXml()) {    try {      URI sitemapUri;      if (uri.getPort() == 80 || uri.getPort() == 443) {        sitemapUri=new URI(uri.getScheme() + "://" + host+ "/sitemap.xml",true);      } else {        sitemapUri=new URI(uri.getScheme() + "://" + host+ ":"+ uri.getPort()+ "/sitemap.xml",true);      }      this.seedList.add(sitemapUri);    } catch (    Exception e) {      log.warn("Error while creating URI for sitemap.xml file for site " + uri,e);    }  }  if (getSpiderParam().isParseSVNEntries()) {    try {      URI svnEntriesURI1, svnEntriesURI2;      String fullpath=uri.getPath();      String name=uri.getName();      if (fullpath == null)       fullpath="";      if (name == null)       name="";      String pathminusfilename=fullpath.substring(0,fullpath.lastIndexOf(name));      if (pathminusfilename.equals(""))       pathminusfilename="/";      Matcher matcherSvnUrl=svnUrlPattern.matcher(pathminusfilename);      if (!matcherSvnUrl.find()) {        if (uri.getPort() == 80 || uri.getPort() == 443) {          svnEntriesURI1=new URI(uri.getScheme() + "://" + host+ pathminusfilename+ ".svn/entries",true);          svnEntriesURI2=new URI(uri.getScheme() + "://" + host+ pathminusfilename+ ".svn/wc.db",true);        } else {          svnEntriesURI1=new URI(uri.getScheme() + "://" + host+ ":"+ uri.getPort()+ pathminusfilename+ ".svn/entries",true);          svnEntriesURI2=new URI(uri.getScheme() + "://" + host+ ":"+ uri.getPort()+ pathminusfilename+ ".svn/wc.db",true);        }        this.seedList.add(svnEntriesURI1);        this.seedList.add(svnEntriesURI2);      }    } catch (    Exception e) {      log.warn("Error while creating a seed URI for the SVN files for site " + uri,e);    }  }  if (getSpiderParam().isParseGit()) {    try {      URI gitEntriesURI;      String fullpath=uri.getPath();      String name=uri.getName();      if (fullpath == null)       fullpath="";      if (name == null)       name="";      String pathminusfilename=fullpath.substring(0,fullpath.lastIndexOf(name));      if (pathminusfilename.equals(""))       pathminusfilename="/";      Matcher matcherGitUrl=gitUrlPattern.matcher(pathminusfilename);      if (!matcherGitUrl.find()) {        if (uri.getPort() == 80 || uri.getPort() == 443) {          gitEntriesURI=new URI(uri.getScheme() + "://" + host+ pathminusfilename+ ".git/index",true);        } else {          gitEntriesURI=new URI(uri.getScheme() + "://" + host+ ":"+ uri.getPort()+ pathminusfilename+ ".git/index",true);        }        this.seedList.add(gitEntriesURI);      }    } catch (    Exception e) {      log.warn("Error while creating a seed URI for the Git files for site " + uri,e);    }  }}  }
class C{  protected void selectContent(AttributeSet attr) throws IOException {  Object model=attr.getAttribute(StyleConstants.ModelAttribute);  incrIndent();  if (model instanceof OptionListModel) {    OptionListModel<Option> listModel=(OptionListModel<Option>)model;    int size=listModel.getSize();    for (int i=0; i < size; i++) {      Option option=listModel.getElementAt(i);      writeOption(option);    }  } else   if (model instanceof OptionComboBoxModel) {    OptionComboBoxModel<Option> comboBoxModel=(OptionComboBoxModel<Option>)model;    int size=comboBoxModel.getSize();    for (int i=0; i < size; i++) {      Option option=comboBoxModel.getElementAt(i);      writeOption(option);    }  }  decrIndent();}  }
class C{  private static synchronized void initTrueRandom(long adjustedTimestamp){  _rand_m=971;  _rand_ia=11113;  _rand_ib=104322;  _rand_irand=4181;  int seed=(int)(adjustedTimestamp >>> 48) ^ (int)(adjustedTimestamp >>> 32) ^ (int)(adjustedTimestamp >>> 16)^ (int)(adjustedTimestamp & 0x000000000000FFFF);  _rand_irand=_rand_irand + seed + _osProcessId;}  }
class C{  public static int listFind(String list,String value,String delimiter){  Array arr=listToArrayTrim(list,delimiter);  int len=arr.size();  for (int i=1; i <= len; i++) {    if (arr.get(i,"").equals(value))     return i - 1;  }  return -1;}  }
class C{  public void fillAttributeSet(Set attrSet){  ((ExtendedCondition)getFirstCondition()).fillAttributeSet(attrSet);  ((ExtendedCondition)getSecondCondition()).fillAttributeSet(attrSet);}  }
class C{  public base removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:04.816 -0500",hash_original_method="81573CDE574A4A011582FBBAB6C3BF9A",hash_generated_method="DDC5F638976233F286292B031A334A35") protected SSLContextImpl(DefaultSSLContextImpl dummy) throws GeneralSecurityException, IOException {synchronized (DefaultSSLContextImpl.class) {    if (DEFAULT_SSL_CONTEXT_IMPL == null) {      clientSessionContext=new ClientSessionContext();      serverSessionContext=new ServerSessionContext();      DEFAULT_SSL_CONTEXT_IMPL=(DefaultSSLContextImpl)this;    } else {      clientSessionContext=DEFAULT_SSL_CONTEXT_IMPL.engineGetClientSessionContext();      serverSessionContext=DEFAULT_SSL_CONTEXT_IMPL.engineGetServerSessionContext();    }    sslParameters=new SSLParametersImpl(DEFAULT_SSL_CONTEXT_IMPL.getKeyManagers(),DEFAULT_SSL_CONTEXT_IMPL.getTrustManagers(),null,clientSessionContext,serverSessionContext);  }}  }
class C{  public void mouseEntered(MouseEvent e){  if (e.getSource() == BasicSplitPaneDivider.this) {    setMouseOver(true);  }}  }
class C{  public void addLayoutComponent(String name,Component comp){}  }
class C{  public DateTimeStamp(Date date){  super(date);}  }
class C{  public DTMDOMException(short code,String message){  super(code,message);}  }
class C{  public @CheckForNull Block createNewBlock(@Nonnull String systemName,@CheckForNull String userName) throws IllegalArgumentException {  Block r;  if (userName != null && !userName.equals("")) {    r=getByUserName(userName);    if (r != null) {      return null;    }  }  r=getBySystemName(systemName);  if (r != null) {    return null;  }  String sName=systemName.toUpperCase();  r=new Block(sName,userName);  register(r);  if (systemName.startsWith("IB:AUTO:")) {    try {      int autoNumber=Integer.parseInt(systemName.substring(8));      if (autoNumber > lastAutoBlockRef) {        lastAutoBlockRef=autoNumber;      }    } catch (    NumberFormatException e) {      log.warn("Auto generated SystemName " + systemName + " is not in the correct format");    }  }  try {    r.setBlockSpeed("Global");  } catch (  jmri.JmriException ex) {    log.error(ex.toString());  }  return r;}  }
class C{  public static boolean isImage(String name){  if (TextUtils.isEmpty(name))   return false;  name=name.toLowerCase(US);  for (  String extension : IMAGE_EXTENSIONS)   if (name.endsWith(extension))   return true;  return false;}  }
class C{  public static double toRadians(double degrees){  return degrees * (PI / 180.0);}  }
class C{  public static String readREADME(Project project){  Repository repository;  ObjectLoader loader=null;  repository=getRepository(project);  try {    loader=repository.open(getFirstFoundREADMEfileObjectId(repository));  } catch (  IOException e) {    e.printStackTrace();    play.Logger.error(e.getMessage());  }  if (loader == null) {    return null;  }  return new String(loader.getCachedBytes(),utils.Config.getCharset());}  }
class C{  public boolean existsInducingPath(Node node1,Node node2){  return node1 == node2 || GraphUtils.existsDirectedPathFromToBreathFirst(node2,node1,this);}  }
class C{  public int span(){  if (isInference()) {    int d=derivation.span() + 1;    if (derivation.hasSourceNode(getSubject())) {      d--;    }    if (derivation.hasSourceNode(getObject())) {      d--;    }    return d;  } else {    return 1;  }}  }
class C{  private static float[] normalize(float[] coefficients){  float accumulator=0;  for (int x=0; x < coefficients.length; x++) {    accumulator+=Math.abs(coefficients[x]);  }  for (int x=0; x < coefficients.length; x++) {    coefficients[x]=coefficients[x] / accumulator;  }  return coefficients;}  }
class C{  public boolean containsExtraValueKey(String key){  return getExtraValueHashMap().containsKey(key);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:27.745 -0500",hash_original_method="4EDD82B1AA77527A58B2DDD935211532",hash_generated_method="2A8E845FAB75D5F75E0F9358D232401F") public int capacity(){  return this.getTaintInt();}  }
class C{  public Builder withLeader(int leader){  request.leader=leader;  return this;}  }
class C{  @Override public void onClick(View view){  int limit=Integer.parseInt(monthlyDataUsage.getText().toString());  prevLimit=currentCycle.getLimit();  if (view.equals(upArrow) && limit < MAX_AMOUNT) {    limit=limit + STEP_AMOUNT;    if (limit == prevLimit)     confirmUpdate.setTextColor(resources.getColor(R.color.light_gray)); else     confirmUpdate.setTextColor(resources.getColor(R.color.light_indigo));  } else   if (view.equals(downArrow) && limit > currentCycle.getUsed() && limit > PlanConstants.MIN_UNIT) {    limit=limit - STEP_AMOUNT;    if (limit == prevLimit)     confirmUpdate.setTextColor(resources.getColor(R.color.light_gray)); else     confirmUpdate.setTextColor(resources.getColor(R.color.light_indigo));  } else   if (view.equals(confirmUpdate) && limit != prevLimit) {    updateLimit(limit);    int addedCost=(limit - prevLimit) / STEP_AMOUNT * DOLLARS_PER_STEP;    updateBasePlan(addedCost);    createSnackBar(addedCost);  }  monthlyDataUsage.setText(limit + "");}  }
class C{  private boolean isFormElementWithContent(AttributeSet attr){  return matchNameAttribute(attr,HTML.Tag.TEXTAREA) || matchNameAttribute(attr,HTML.Tag.SELECT);}  }
class C{  private void ensureAvailable(int index){  if (data.get(index) != null) {    return;  }  Object result;  int start=index;  int count;  if (mode.equals(MODE_ONDEMAND)) {    count=1;  } else   if (mode.equals(MODE_FETCHALL)) {    count=totalCount - cursor;  } else   if (mode.equals(MODE_PAGE)) {    count=1;    for (int i=1; i < pageSize; i++) {      if (this.data.get(start + i) == null) {        count+=1;      }    }  } else {    count=1;  }  result=null;  if (!(result instanceof RecordSetPage)) {    throw new RuntimeException("expected RecordSetPage but got " + result);  }  RecordSetPage page=(RecordSetPage)result;  if (page.getCursor() != start + 1) {    throw new RuntimeException("expected offset " + (start + 1) + " but got "+ page.getCursor());  }  List<List<Object>> data=page.getData();  if (data.size() != count) {    throw new RuntimeException("expected " + count + " results but got "+ data.size());  }  for (int i=0; i < count; i++) {    this.data.add(start + i,data.get(i));  }}  }
class C{  public void slowmodeOff(String channel){  if (onChannel(channel,true)) {    sendMessage(channel,".slowoff","Trying to turn off slowmode..");  }}  }
class C{  private RegistryServices buildServiceTypeParams(Resource resource){  RegistryServices rs=new RegistryServices();  rs.serviceTypes=SERVICE_TYPE_EML;  rs.serviceURLs=cfg.getResourceEmlUrl(resource.getShortname());  if (resource.hasPublishedData() && resource.getCoreTypeTerm() != null) {    if (DwcTerm.Occurrence == resource.getCoreTypeTerm()) {      log.debug("Registering EML & DwC-A Occurrence Service");      rs.serviceURLs+="|" + cfg.getResourceArchiveUrl(resource.getShortname());      rs.serviceTypes+="|" + SERVICE_TYPE_OCCURRENCE;    } else     if (DwcTerm.Taxon == resource.getCoreTypeTerm()) {      log.debug("Registering EML & DwC-A Checklist Service");      rs.serviceURLs+="|" + cfg.getResourceArchiveUrl(resource.getShortname());      rs.serviceTypes+="|" + SERVICE_TYPE_CHECKLIST;    } else     if (DwcTerm.Event == resource.getCoreTypeTerm()) {      log.debug("Registering EML & DwC-A Sampling Event Service");      rs.serviceURLs+="|" + cfg.getResourceArchiveUrl(resource.getShortname());      rs.serviceTypes+="|" + SERVICE_TYPE_SAMPLING_EVENT;    } else {      log.warn("Unknown core resource type " + resource.getCoreTypeTerm());      log.debug("Registering EML service only");    }  } else {    log.debug("Resource has no published data, therefore only the EML Service will be registered");  }  return rs;}  }
class C{  private Operation buildChildQueryOperation(TaskState.TaskStage... stages){  QueryTask.QuerySpecification spec=QueryTaskUtils.buildChildServiceTaskStatusQuerySpec(this.getSelfLink(),ImageHostToHostCopyService.State.class,stages);  QueryTask task=QueryTask.create(spec).setDirect(true);  return Operation.createPost(UriUtils.buildUri(getHost(),ServiceUriPaths.CORE_QUERY_TASKS)).setBody(task);}  }
class C{  private SequenceFileIterable readResults(Path outputPath,Configuration config,FileSystem fs) throws IOException {  List<Path> files=new ArrayList<>();  for (RemoteIterator<LocatedFileStatus> it=fs.listFiles(outputPath,false); it.hasNext(); ) {    Path p=it.next().getPath();    if (p.getName().equals("_SUCCESS")) {      fs.delete(p,false);      continue;    }    files.add(p);  }  if (LOG.isDebugEnabled()) {    LOG.debug(outputPath);  }  return new SequenceFileIterable(files,config);}  }
class C{  public StringConstant addString(String name){  StringConstant entry=getString(name);  if (entry != null) {    return entry;  }  Utf8Constant utf8=addUTF8(name);  entry=new StringConstant(this,_entries.size(),utf8.getIndex());  addConstant(entry);  return entry;}  }
class C{  public void cleanMovieSet(){  MovieList movieList=MovieList.getInstance();  boolean dirty=false;  for (  Movie movie : new ArrayList<>(movies)) {    if (!movieList.getMovies().contains(movie)) {      movies.remove(movie);      movieIds.remove(movie.getDbId());      dirty=true;    }  }  if (dirty) {    saveToDb();  }}  }
class C{  @Override public String toString(){  return String.format("%s - %08X",getName(),getValue());}  }
class C{  private byte[] assembleReceiverReportPacket(){  final int FIXED_HEADER_SIZE=4;  byte V_P_RC=(byte)((RtcpPacket.VERSION << 6) | (RtcpPacket.PADDING << 5) | (0x00));  byte ss[]=RtcpPacketUtils.longToBytes(rtcpSession.SSRC,4);  byte PT[]=RtcpPacketUtils.longToBytes((long)RtcpPacket.RTCP_RR,1);  byte receptionReportBlocks[]=new byte[0];  receptionReportBlocks=RtcpPacketUtils.append(receptionReportBlocks,assembleRTCPReceptionReport());  byte receptionReports=(byte)(receptionReportBlocks.length / 24);  V_P_RC=(byte)(V_P_RC | (byte)(receptionReports & 0x1F));  byte length[]=RtcpPacketUtils.longToBytes((FIXED_HEADER_SIZE + ss.length + receptionReportBlocks.length) / 4 - 1,2);  byte RRPacket[]=new byte[1];  RRPacket[0]=V_P_RC;  RRPacket=RtcpPacketUtils.append(RRPacket,PT);  RRPacket=RtcpPacketUtils.append(RRPacket,length);  RRPacket=RtcpPacketUtils.append(RRPacket,ss);  RRPacket=RtcpPacketUtils.append(RRPacket,receptionReportBlocks);  return RRPacket;}  }
class C{  static String encodeHighLevel(String msg,Compaction compaction,Charset encoding) throws WriterException {  StringBuilder sb=new StringBuilder(msg.length());  if (encoding != null && !DEFAULT_ENCODING_NAMES.contains(encoding.name())) {    CharacterSetECI eci=CharacterSetECI.getCharacterSetECIByName(encoding.name());    if (eci != null) {      encodingECI(eci.getValue(),sb);    }  }  int len=msg.length();  int p=0;  int textSubMode=SUBMODE_ALPHA;  byte[] bytes=null;  if (compaction == Compaction.TEXT) {    encodeText(msg,p,len,sb,textSubMode);  } else   if (compaction == Compaction.BYTE) {    bytes=toBytes(msg,encoding);    encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);  } else   if (compaction == Compaction.NUMERIC) {    sb.append((char)LATCH_TO_NUMERIC);    encodeNumeric(msg,p,len,sb);  } else {    int encodingMode=TEXT_COMPACTION;    while (p < len) {      int n=determineConsecutiveDigitCount(msg,p);      if (n >= 13) {        sb.append((char)LATCH_TO_NUMERIC);        encodingMode=NUMERIC_COMPACTION;        textSubMode=SUBMODE_ALPHA;        encodeNumeric(msg,p,n,sb);        p+=n;      } else {        int t=determineConsecutiveTextCount(msg,p);        if (t >= 5 || n == len) {          if (encodingMode != TEXT_COMPACTION) {            sb.append((char)LATCH_TO_TEXT);            encodingMode=TEXT_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          textSubMode=encodeText(msg,p,t,sb,textSubMode);          p+=t;        } else {          if (bytes == null) {            bytes=toBytes(msg,encoding);          }          int b=determineConsecutiveBinaryCount(msg,bytes,p);          if (b == 0) {            b=1;          }          if (b == 1 && encodingMode == TEXT_COMPACTION) {            encodeBinary(bytes,p,1,TEXT_COMPACTION,sb);          } else {            encodeBinary(bytes,p,b,encodingMode,sb);            encodingMode=BYTE_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          p+=b;        }      }    }  }  return sb.toString();}  }
class C{  public Transformer newTransformer() throws TransformerConfigurationException {  return new TransformerIdentityImpl(m_isSecureProcessing);}  }
class C{  public <ResultT>Set<ResultT> toSet(Converter<ResultT> converter){  try {    if (isEmpty(cursor)) {      return Collections.emptySet();    }    return populate(converter,new HashSet<ResultT>(cursor.getCount()));  }  finally {    close();  }}  }
class C{  public void loadDataset(URL url,IRI context,ParserConfig config) throws RepositoryException {  try {    Long since=lastModified.get(url);    URLConnection urlCon=url.openConnection();    if (since != null) {      urlCon.setIfModifiedSince(since);    }    if (since == null || since < urlCon.getLastModified()) {      load(url,urlCon,context,config);    }  } catch (  RDFParseException e) {    throw new RepositoryException(e);  }catch (  IOException e) {    throw new RepositoryException(e);  }}  }
class C{  private void refreshCategories(){  categorySelectionBean.resetCategoriesForMarketplace();  services=new LinkedList<Service>();  getServicePagingBean().setResultSize(0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static double[] calc(double[] llpoints,double precision,boolean geometryClosed,int steps){  if (geometryClosed) {    return new NatCubicSpline.CLOSED().withSteps(steps).calc(llpoints,precision);  }  return new NatCubicSpline().withSteps(steps).calc(llpoints,precision);}  }
class C{  public void environmentStart(EnvironmentClassLoader loader){}  }
class C{  public PropertyDescriptor(String propertyName,Class<?> beanClass) throws IntrospectionException {  this(propertyName,beanClass,Introspector.IS_PREFIX + NameGenerator.capitalize(propertyName),Introspector.SET_PREFIX + NameGenerator.capitalize(propertyName));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public PrecisionInsets transpose(){  double temp=top;  top=left;  left=temp;  temp=right;  right=bottom;  bottom=temp;  return this;}  }
class C{  private int peek(){  if (stackSize == 0) {    throw new IllegalStateException("JsonWriter is closed.");  }  return stack[stackSize - 1];}  }
class C{  private static void printToFile(Document doc,final String OUTPUT_PATH){  try {    OutputFormat format=new OutputFormat(doc);    format.setIndenting(true);    XMLSerializer serializer=new XMLSerializer(new FileOutputStream(new File(OUTPUT_PATH)),format);    serializer.serialize(doc);  } catch (  IOException e) {    System.err.println("ERR Could not write signalSystemsConfig file.\n" + e);  }}  }
class C{  public static void printUsage(){  System.out.println("Usage: " + "java org.apache.james.security.DigestUtil" + " [-alg algorithm]"+ " [-file] filename|string");}  }
class C{  public void removeTable(String tagString){  tables.remove(tagString);}  }
class C{  public XYDrawableAnnotation(double x,double y,double width,double height,Drawable drawable){  this(x,y,width,height,1.0,drawable);}  }
class C{  public TopParams withPsArgs(String... psArgs){  if (psArgs.length > 0) {    this.psArgs=psArgs;  }  return this;}  }
class C{  public static Bitmap convertViewToBitmap(View view,int width,int height){  view.measure(View.MeasureSpec.makeMeasureSpec(width,(width == UNSPECIFIED) ? View.MeasureSpec.UNSPECIFIED : View.MeasureSpec.EXACTLY),View.MeasureSpec.makeMeasureSpec(height,(height == UNSPECIFIED) ? View.MeasureSpec.UNSPECIFIED : View.MeasureSpec.EXACTLY));  view.layout(0,0,view.getMeasuredWidth(),view.getMeasuredHeight());  Bitmap bitmap=Bitmap.createBitmap(view.getMeasuredWidth(),view.getMeasuredHeight(),Bitmap.Config.ARGB_8888);  view.draw(new Canvas(bitmap));  return bitmap;}  }
class C{  protected static void assureResultsDirectoryExists(String resultsDirectory){  File dir=new File(resultsDirectory);  if (!dir.exists()) {    RuntimeSingleton.info("Template results directory does not exist");    if (dir.mkdirs()) {      RuntimeSingleton.info("Created template results directory");    } else {      String errMsg="Unable to create template results directory";      RuntimeSingleton.warn(errMsg);      fail(errMsg);    }  }}  }
class C{  public boolean hasGmlEnvelope(){  return hasExtension(GmlEnvelope.class);}  }
class C{  public void actionPerformed(ActionEvent e){  File file=EditorUtils.getSaveFile("image","png",getComp(),false,actionName);  Dimension size=getComp().getSize();  BufferedImage image=new BufferedImage(size.width,size.height,BufferedImage.TYPE_BYTE_INDEXED);  Graphics graphics=image.getGraphics();  getComp().paint(graphics);  try {    ImageIO.write(image,"png",file);  } catch (  IOException e1) {    throw new RuntimeException(e1);  }}  }
class C{  public boolean isFitLegend(){  return mFitLegend;}  }
class C{  public void apply(float oldX,float oldY,float newX,float newY){  boolean notLimitedUp=true;  boolean notLimitedBottom=true;  boolean notLimitedLeft=true;  boolean notLimitedRight=true;  if (mChart instanceof XYChart) {    int scales=mRenderer.getScalesCount();    double[] limits=mRenderer.getPanLimits();    boolean limited=limits != null && limits.length == 4;    XYChart chart=(XYChart)mChart;    for (int i=0; i < scales; i++) {      double[] range=getRange(i);      double[] calcRange=chart.getCalcRange(i);      if (limitsReachedX && limitsReachedY && (range[0] == range[1] && calcRange[0] == calcRange[1] || range[2] == range[3] && calcRange[2] == calcRange[3])) {        return;      }      checkRange(range,i);      double[] realPoint=chart.toRealPoint(oldX,oldY,i);      double[] realPoint2=chart.toRealPoint(newX,newY,i);      double deltaX=realPoint[0] - realPoint2[0];      double deltaY=realPoint[1] - realPoint2[1];      double ratio=getAxisRatio(range);      if (chart.isVertical(mRenderer)) {        double newDeltaX=-deltaY * ratio;        double newDeltaY=deltaX / ratio;        deltaX=newDeltaX;        deltaY=newDeltaY;      }      if (mRenderer.isPanXEnabled()) {        if (limits != null) {          if (notLimitedLeft) {            notLimitedLeft=limits[0] <= range[0] + deltaX;          }          if (notLimitedRight) {            notLimitedRight=limits[1] >= range[1] + deltaX;          }        }        if (!limited || (notLimitedLeft && notLimitedRight)) {          setXRange(range[0] + deltaX,range[1] + deltaX,i);          limitsReachedX=false;        } else {          limitsReachedX=true;        }      }      if (mRenderer.isPanYEnabled()) {        if (limits != null) {          if (notLimitedBottom) {            notLimitedBottom=limits[2] <= range[2] + deltaY;          }          if (notLimitedUp) {            notLimitedUp=limits[3] >= range[3] + deltaY;          }        }        if (!limited || (notLimitedBottom && notLimitedUp)) {          setYRange(range[2] + deltaY,range[3] + deltaY,i);          limitsReachedY=false;        } else {          limitsReachedY=true;        }      }    }  } else {    RoundChart chart=(RoundChart)mChart;    chart.setCenterX(chart.getCenterX() + (int)(newX - oldX));    chart.setCenterY(chart.getCenterY() + (int)(newY - oldY));  }  notifyPanListeners();}  }
class C{  public void timingEvent(float fraction){  current.x=(int)(start.x + (end.x - start.x) * fraction);  current.y=(int)(start.y + (end.y - start.y) * fraction);  track.setCarPosition(current);}  }
class C{  public DevicePrinterPrinter(Component parent,String printername,int imageable_x,int imageable_y,int imageable_width,int imageable_height,String mediasizename){  this.parent=parent;  m_sName="Printer";  m_ticketcurrent=null;  printservice=ReportUtils.getPrintService(printername);  this.imageable_x=imageable_x;  this.imageable_y=imageable_y;  this.imageable_width=imageable_width;  this.imageable_height=imageable_height;  this.media=getMedia(mediasizename);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_ACTION_2__MORE_CODE_1:    return getMoreCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void initAxesRange(int scales){  mYTitle=new String[scales];  yLabelsAlign=new Align[scales];  yAxisAlign=new Align[scales];  mYLabelsColor=new int[scales];  mMinX=new double[scales];  mMaxX=new double[scales];  mMinY=new double[scales];  mMaxY=new double[scales];  for (int i=0; i < scales; i++) {    mYLabelsColor[i]=TEXT_COLOR;    initAxesRangeForScale(i);  }}  }
class C{  public br(String clear_type){  setClear(clear_type);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public EntityQuery where(Object... fields){  this.whereEntityCondition=EntityCondition.makeCondition(UtilMisc.toMap(fields));  return this;}  }
class C{  private boolean ensureTempPath(final String path){  final File folder=new File(path);  boolean folderAccessible=false;  if (folder.exists() && folder.canWrite()) {    folderAccessible=true;  }  if (!folder.exists()) {    folderAccessible=folder.mkdirs();  }  return folderAccessible;}  }
class C{  public FindTvShowTask(Path showDir,Path datasource){  this.showDir=showDir;  this.datasource=datasource;}  }
class C{  @Override public Void sum(final IGASState<PATHS.VS,PATHS.ES,Void> state,final Void left,final Void right){  throw new UnsupportedOperationException();}  }
class C{  public final int hashCode(){  return namespaceURI.hashCode() ^ localPart.hashCode();}  }
class C{  private static long parseMvhd(ParsableByteArray mvhd){  mvhd.setPosition(Atom.HEADER_SIZE);  int fullAtom=mvhd.readInt();  int version=Atom.parseFullAtomVersion(fullAtom);  mvhd.skipBytes(version == 0 ? 8 : 16);  return mvhd.readUnsignedInt();}  }
class C{  public ResultMatrixHTML(int cols,int rows){  super(cols,rows);}  }
class C{  public static Data manufactureData(Header hdr) throws FitsException {  return new AsciiTable(hdr);}  }
class C{  public int checkAPILength(String url,String username,String password,String object){  try {    HTTPController api=new HTTPController(username,password);    SAXBuilder sb=new SAXBuilder();    String result=api.doGet(url + "/JSSResource/" + object);    Document doc=sb.build(new ByteArrayInputStream(result.getBytes("UTF-8")));    List<Element> returned=doc.getRootElement().getChildren();    return returned.size() - 1;  } catch (  Exception e) {    System.out.println("Error making API Call: " + e);    e.printStackTrace();    return 0;  }}  }
class C{  public final void reset(){  reset(0);}  }
class C{  private void findLogIntervals(int nc){  double zMin=Double.MAX_VALUE;  double zMax=-zMin;  int ni=funcArray.length;  for (int i=0; i < ni; ++i) {    int nj=funcArray[i].length;    for (int j=0; j < nj; ++j) {      double zVal=funcArray[i][j];      zMin=Math.min(zMin,zVal);      zMax=Math.max(zMax,zVal);    }  }  if (zMin < 0)   throw new IllegalArgumentException(kNegLogDataMsg);  cAttr=new ContourAttrib[nc];  double temp=Math.log(zMin);  double delta=(Math.log(zMax) - temp) / (nc + 1);  for (int i=0; i < nc; i++)   cAttr[i]=new ContourAttrib(Math.exp(temp + (i + 1) * delta));}  }
class C{  protected int[] mergePeriodInto(int[] values,ReadablePeriod period){  for (int i=0, isize=period.size(); i < isize; i++) {    DurationFieldType type=period.getFieldType(i);    int value=period.getValue(i);    checkAndUpdate(type,values,value);  }  return values;}  }
class C{  private void initializeJSoupDocument(){  if (jsoupDocInitialised) {    return;  }  String html=ssp.getDOM();  Date beginDate=null;  if (LOGGER.isDebugEnabled()) {    beginDate=new Date();    LOGGER.debug("Iinitialising Jsoup Document for " + ssp.getURI());  }  jsoupDocument=Jsoup.parse(html,ssp.getURI());  if (LOGGER.isDebugEnabled()) {    Date endDate=new Date();    LOGGER.debug("initialisation of Jsoup Document for " + ssp.getURI() + "took "+ (endDate.getTime() - beginDate.getTime())+ "ms");  }  processRemarkService.initializeService(jsoupDocument,ssp.getDOM());  jsoupDocInitialised=true;}  }
class C{  public boolean isInterleaveOptimal(String s1,String s2,String s3){  if (s1 == null || s2 == null || s3 == null) {    return false;  }  int a=s1.length();  int b=s2.length();  if (s3.length() != a + b) {    return false;  }  boolean[] dp=new boolean[b + 1];  dp[0]=true;  for (int j=0; j < b; j++) {    if (dp[j] && s2.charAt(j) == s3.charAt(j)) {      dp[j + 1]=true;    }  }  for (int i=0; i < a; i++) {    if (dp[0] && s1.charAt(i) == s3.charAt(i)) {      dp[0]=true;    } else {      dp[0]=false;    }    for (int j=0; j < b; j++) {      if (dp[j + 1] && (s1.charAt(i) == s3.charAt(i + j + 1)) || (dp[j] && s2.charAt(j) == s3.charAt(i + j + 1))) {        dp[j + 1]=true;      } else {        dp[j + 1]=false;      }    }  }  return dp[b];}  }
class C{  private void loadHelper(IR ir,AvExCache cache,Instruction inst){  LocationOperand loc=LocationCarrier.getLocation(inst);  if (loc.mayBeVolatile())   return;  AvailableExpression ae=cache.find(inst);  if (ae != null) {    RegisterOperand dest=ResultCarrier.getClearResult(inst);    if (ae.tmp == null) {      RegisterOperand newRes=ir.regpool.makeTemp(dest.getType());      ae.tmp=newRes.getRegister();      if (ae.isLoad()) {        RegisterOperand res=ResultCarrier.getClearResult(ae.inst);        ResultCarrier.setResult(ae.inst,newRes);        ae.inst.insertAfter(Move.create(getMoveOp(res),res,newRes.copyD2U()));      } else {        Operand value;        if (PutStatic.conforms(ae.inst)) {          value=PutStatic.getValue(ae.inst);        } else {          value=PutField.getValue(ae.inst);        }        ae.inst.insertBefore(Move.create(getMoveOp(newRes),newRes,value.copy()));      }      Move.mutate(inst,getMoveOp(dest),dest,newRes.copyD2U());    } else {      RegisterOperand newRes=new RegisterOperand(ae.tmp,dest.getType());      Move.mutate(inst,getMoveOp(dest),dest,newRes);    }  } else {    cache.insert(inst);  }}  }
class C{  public TransactionTimeoutException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:11.418 -0500",hash_original_method="18F927F44CECC98A241CC5D3FE86DBCB",hash_generated_method="491F9C3BA65461F7B2C006E8F1F82AB8") protected void shutdown(){  alert[0]=0;  alert[1]=0;  recordProtocol=null;}  }
class C{  public final void mulTransposeRight(Matrix3d m1,Matrix3d m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m01 * m2.m01 + m1.m02 * m2.m02;    this.m01=m1.m00 * m2.m10 + m1.m01 * m2.m11 + m1.m02 * m2.m12;    this.m02=m1.m00 * m2.m20 + m1.m01 * m2.m21 + m1.m02 * m2.m22;    this.m10=m1.m10 * m2.m00 + m1.m11 * m2.m01 + m1.m12 * m2.m02;    this.m11=m1.m10 * m2.m10 + m1.m11 * m2.m11 + m1.m12 * m2.m12;    this.m12=m1.m10 * m2.m20 + m1.m11 * m2.m21 + m1.m12 * m2.m22;    this.m20=m1.m20 * m2.m00 + m1.m21 * m2.m01 + m1.m22 * m2.m02;    this.m21=m1.m20 * m2.m10 + m1.m21 * m2.m11 + m1.m22 * m2.m12;    this.m22=m1.m20 * m2.m20 + m1.m21 * m2.m21 + m1.m22 * m2.m22;  } else {    double m00, m01, m02, m10, m11, m12, m20, m21, m22;    m00=m1.m00 * m2.m00 + m1.m01 * m2.m01 + m1.m02 * m2.m02;    m01=m1.m00 * m2.m10 + m1.m01 * m2.m11 + m1.m02 * m2.m12;    m02=m1.m00 * m2.m20 + m1.m01 * m2.m21 + m1.m02 * m2.m22;    m10=m1.m10 * m2.m00 + m1.m11 * m2.m01 + m1.m12 * m2.m02;    m11=m1.m10 * m2.m10 + m1.m11 * m2.m11 + m1.m12 * m2.m12;    m12=m1.m10 * m2.m20 + m1.m11 * m2.m21 + m1.m12 * m2.m22;    m20=m1.m20 * m2.m00 + m1.m21 * m2.m01 + m1.m22 * m2.m02;    m21=m1.m20 * m2.m10 + m1.m21 * m2.m11 + m1.m22 * m2.m12;    m22=m1.m20 * m2.m20 + m1.m21 * m2.m21 + m1.m22 * m2.m22;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m20=m20;    this.m21=m21;    this.m22=m22;  }}  }
class C{  @Deprecated public HttpConnection(String proxyHost,int proxyPort,String host,String virtualHost,int port,Protocol protocol){  this(proxyHost,proxyPort,host,port,protocol);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("Trx[");  sb.append(getTrxName()).append(",Active=").append(isActive()).append("]");  return sb.toString();}  }
class C{  private void populateVPLEXAccessProfile(AccessProfile accessProfile,DataObject vplexDataObject,String nameSpace){  if (vplexDataObject instanceof StorageProvider) {    StorageProvider vplexProvider=(StorageProvider)vplexDataObject;    accessProfile.setSystemId(vplexProvider.getId());    accessProfile.setSystemClazz(vplexProvider.getClass());    accessProfile.setIpAddress(vplexProvider.getIPAddress());    accessProfile.setUserName(vplexProvider.getUserName());    accessProfile.setPassword(vplexProvider.getPassword());    accessProfile.setSystemType(StorageProvider.InterfaceType.vplex.name());    accessProfile.setPortNumber(vplexProvider.getPortNumber());  } else {    StorageSystem vplexSystem=(StorageSystem)vplexDataObject;    StorageProvider activeProvider=null;    URI activeProviderURI=vplexSystem.getActiveProviderURI();    if (!NullColumnValueGetter.isNullURI(activeProviderURI)) {      activeProvider=_dbClient.queryObject(StorageProvider.class,activeProviderURI);    }    if (activeProvider == null) {      vplexSystem.setLastDiscoveryStatusMessage("Discovery failed because we could not find an active management server");      _dbClient.persistObject(vplexSystem);      throw DeviceControllerException.exceptions.cannotFindActiveProviderForStorageSystem();    }    accessProfile.setSystemId(vplexSystem.getId());    accessProfile.setSystemClazz(vplexSystem.getClass());    accessProfile.setSystemType(vplexSystem.getSystemType());    accessProfile.setserialID(vplexSystem.getSerialNumber());    accessProfile.setIpAddress(activeProvider.getIPAddress());    accessProfile.setUserName(activeProvider.getUserName());    accessProfile.setPassword(activeProvider.getPassword());    accessProfile.setPortNumber(activeProvider.getPortNumber());    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  }}  }
class C{  public long writeStream(InputStream source) throws IOException {  if (source == null) {    return 0;  }  int len;  int length=_writeBuffer.length;  long outputLength=0;  if (length <= _writeLength) {    int tmplen=_writeLength;    _writeLength=0;    _source.write(_writeBuffer,0,tmplen,false);    _position+=tmplen;    _isFlushRequired=true;    outputLength+=tmplen;  }  while ((len=source.read(_writeBuffer,_writeLength,length - _writeLength)) >= 0) {    _writeLength+=len;    outputLength+=len;    if (length <= _writeLength) {      int tmplen=_writeLength;      _writeLength=0;      _source.write(_writeBuffer,0,tmplen,false);      _position+=tmplen;      _isFlushRequired=true;    }  }  if (_isFlushOnNewline || _implicitFlush)   flush();  return outputLength;}  }
class C{  public TopHitsBuilder addHighlightedField(String name){  highlightBuilder().field(name);  return this;}  }
class C{  public void add(ResourceCollection rc){  jarResources.add(rc);}  }
class C{  public void readData(int startingRecordIndex,int numRecordsToRead) throws IOException, FormatException {  if (startingRecordIndex < 0) {    startingRecordIndex=0;  }  if (numRecordsToRead < 0 || numRecordsToRead > _rowCount - startingRecordIndex) {    numRecordsToRead=_rowCount - startingRecordIndex;  }  _records=new ArrayList<List<Object>>(numRecordsToRead);  for (int r=startingRecordIndex; r <= numRecordsToRead - 1; r++) {    List<Object> record=getRecordData(r);    _records.add(record);  }}  }
class C{  public ColumnArg(String tableName,String columnName){  this.tableName=tableName;  this.columnName=columnName;}  }
class C{  private boolean escapeOneCodepoint(int pos,int limit,int codepoint,int nextCodepoint) throws IOException {  if (codepoint < minNonPrecomputed) {    String esc=precomputedEscapes.getEscape(codepoint);    if (esc != null) {      out.append(chars,pos,limit).append(esc);      return true;    }  } else   if (otherEscapes.contains(codepoint)) {    out.append(chars,pos,limit);    encoder.encode(codepoint,nextCodepoint,out);    return true;  }  return false;}  }
class C{  private void verPrestamo(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  setReturnActionFordward(request,mappings.findForward("ver_prestamo"));}  }
class C{  public final CC shrinkPrioX(int p){  hor.setShrinkPriority(p);  return this;}  }
class C{  public RequestHandle post(Context context,String url,Header[] headers,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  HttpEntityEnclosingRequestBase request=addEntityToRequestBase(new HttpPost(URI.create(url).normalize()),entity);  if (headers != null)   request.setHeaders(headers);  return sendRequest(httpClient,httpContext,request,contentType,responseHandler,context);}  }
class C{  public GammaDistributionModel(Variable<Double> shape){  this(GammaParameterizationType.OneParameter,shape,null,0.0);}  }
class C{  @Override public void writeToNBT(NBTTagCompound nbt){  super.writeToNBT(nbt);  nbt.setInteger("tier",this.tier);}  }
class C{  public String doIt() throws Exception {  if (m_system == null || !m_system.isValid())   return ("SystemNotSetupForReplication");  log.info("doIt - Record_ID=" + getRecord_ID() + ", test="+ m_test);  connectRemote();  setupRemote();  mergeData();  sendUpdates();  log.info("doIt - Replicated=" + m_replicated + " - "+ m_replicationStart);  m_replicationRun.setIsReplicated(m_replicated);  double sec=(System.currentTimeMillis() - m_start);  sec/=1000;  m_replicationRun.setDescription(sec + " s");  m_replicationRun.saveEx();  if (m_replicated) {    m_replication.setDateLastRun(m_replicationStart);    m_replication.saveEx();  }  exit();  return m_replicated ? "Replicated" : "Replication Error";}  }
class C{  public Picker startCamera(boolean mStartWithCamera){  mSelectionSpec.startWithCamera(mStartWithCamera);  return this;}  }
class C{  @Override public int readTimeout(byte[] buf,int offset,int length,long timeout) throws IOException {  return read(buf,offset,length);}  }
class C{  private void emitEnsureCollection(Method method,String fieldName,StringBuilder builder){  builder.append("    protected void ");  builder.append(getEnsureName(fieldName));  builder.append("() {\n");  builder.append("      if (");  builder.append(fieldName);  builder.append(" == null) {\n        ");  builder.append(fieldName);  builder.append(" = new ");  builder.append(getImplName(method.getGenericReturnType(),true));  builder.append("();\n");  builder.append("      }\n");  builder.append("    }\n");}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.PATTERN_CHARACTER__VALUE:    setValue((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected void finishFont() throws IOException {  this.out=writer.getOutStream();  int glyphCount=glyphByteArrays.size();  boolean is32=(flags & FONT2_32OFFSETS) != 0;  int offset=is32 ? ((glyphCount + 1) * 4) : ((glyphCount + 1) * 2);  for (int i=0; i <= glyphCount; i++) {    if (is32) {      this.out.writeUI32(offset);    } else {      this.out.writeUI16(offset);    }    if (i < glyphCount) {      offset+=((byte[])glyphByteArrays.get(i)).length;    }  }  for (int i=0; i < glyphCount; i++) {    this.out.write((byte[])glyphByteArrays.get(i));  }  boolean isWide=(flags & FONT2_WIDECHARS) != 0 || glyphCount > 256;  for (int i=0; i < glyphCount; i++) {    if (isWide) {      this.out.writeUI16(codes[i]);    } else {      this.out.writeUI8(codes[i]);    }  }  if ((flags & FONT2_HAS_LAYOUT) != 0) {    this.out.writeSI16((short)ascent);    this.out.writeSI16((short)descent);    this.out.writeSI16((short)leading);    for (int i=0; i < glyphCount; i++) {      this.out.writeSI16((short)advances[i]);    }    for (int i=0; i < glyphCount; i++) {      bounds[i].write(this.out);    }    int kerningCount=(kernCodes1 != null) ? kernCodes1.length : 0;    this.out.writeUI16(kerningCount);    for (int i=0; i < kerningCount; i++) {      if (isWide) {        this.out.writeUI16(kernCodes1[i]);        this.out.writeUI16(kernCodes2[i]);        this.out.writeSI16((short)kernAdjustments[i]);      } else {        this.out.writeUI8(kernCodes1[i]);        this.out.writeUI8(kernCodes2[i]);        this.out.writeSI16((short)kernAdjustments[i]);      }    }  }}  }
class C{  public boolean checkPermission(Principal principal,Permission permission){  Enumeration<Permission> permSet=getPermissions(principal);  while (permSet.hasMoreElements()) {    Permission p=permSet.nextElement();    if (p.equals(permission))     return true;  }  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ANNOTATION_LIST;}  }
class C{  private static void createMongoClientForTests() throws MongoException {  try {    MongodForTestsFactory testsFactory=MongodForTestsFactory.with(Version.Main.PRODUCTION);    mongoClient=testsFactory.newMongo();  } catch (  IOException e) {    throw new MongoException(MSG_INTRO + "creating a factory for a test/mock MongoDB instance.",e);  }}  }
class C{  protected boolean evaluate(final long dynamicValue){switch (m_relation) {case EQUAL_TO:    return dynamicValue == m_value;case GREATER_EQUAL_THAN:  return dynamicValue >= m_value;case GREATER_THAN:return dynamicValue > m_value;case LESS_EQUAL_TO:return dynamicValue <= m_value;case LESS_THAN:return dynamicValue < m_value;case NOT_EQUAL_TO:return dynamicValue != m_value;default :throw new IllegalStateException("IE01144: Unknown predicate");}}  }
class C{  @RequestMapping(value="/SAML2/SLO/{tenant:.*}",method=RequestMethod.GET) public void slo(Locale locale,@PathVariable(value="tenant") String tenant,Model model,HttpServletRequest request,HttpServletResponse response) throws IOException {  logger.info("Welcome to Single Logout request/response handler! " + "The client locale is " + locale.toString() + ", tenant is "+ tenant);  LogoutState logoutState=new LogoutState(request,response,sessionManager,locale,messageSource);  try {    try {      logoutState.parseRequestForTenant(tenant,processor);    } catch (    IllegalStateException e) {    }    if (logoutState.getValidationResult().isValid()) {      logoutState.process(tenant,processor);    }    String redirectUrl=null;    boolean externalAuthenticated=false;    if (logoutState.getValidationResult().isValid()) {      externalAuthenticated=logoutState.checkIsExternalAuthenticated();    }    if (logoutState.needLogoutRequest() && !externalAuthenticated) {      SamlServiceImpl.sendSLORequestsToOtherParticipants(tenant,logoutState);    }    if (logoutState.needLogoutResponse() && !externalAuthenticated) {      redirectUrl=SamlServiceImpl.buildResponseUrl(tenant,logoutState);      if (redirectUrl != null) {        response.sendRedirect(redirectUrl);      } else {        if (!logoutState.getValidationResult().isValid()) {          SamlServiceImpl.sendLogoutError(locale,response,logoutState,messageSource);        } else {          logger.warn("SLO end point for initiating service provider does not exist, no logout response is sent.");        }      }    } else     if (!logoutState.getValidationResult().isValid()) {      SamlServiceImpl.sendLogoutError(locale,response,logoutState,messageSource);    }  } catch (  Exception e) {    logger.error("Exception in sending out single log out messages " + "to service providers." + e.getMessage(),e);  }  model.addAttribute("tenant",tenant);}  }
class C{  private static int parseId3Header(ParsableByteArray id3Buffer) throws ParserException {  int id1=id3Buffer.readUnsignedByte();  int id2=id3Buffer.readUnsignedByte();  int id3=id3Buffer.readUnsignedByte();  if (id1 != 'I' || id2 != 'D' || id3 != '3') {    throw new ParserException(String.format("Unexpected ID3 file identifier, expected \"ID3\", actual \"%c%c%c\".",id1,id2,id3));  }  id3Buffer.skip(2);  int flags=id3Buffer.readUnsignedByte();  int id3Size=id3Buffer.readSynchSafeInt();  if ((flags & 0x2) != 0) {    int extendedHeaderSize=id3Buffer.readSynchSafeInt();    if (extendedHeaderSize > 4) {      id3Buffer.skip(extendedHeaderSize - 4);    }    id3Size-=extendedHeaderSize;  }  if ((flags & 0x8) != 0) {    id3Size-=10;  }  return id3Size;}  }
class C{  private void createRenderables(){  this.gridElements=new ArrayList<GridElement>();  double step=sector.getDeltaLatDegrees() / this.divisions;  double lon=sector.getMinLongitude().degrees + (this.level == 0 ? 0 : step);  while (lon < sector.getMaxLongitude().degrees - step / 2) {    Angle longitude=Angle.fromDegrees(lon);    ArrayList<Position> positions=new ArrayList<Position>(2);    positions.add(new Position(this.sector.getMinLatitude(),longitude,0));    positions.add(new Position(this.sector.getMaxLatitude(),longitude,0));    Object line=createLineRenderable(positions,AVKey.LINEAR);    Sector sector=Sector.fromDegrees(this.sector.getMinLatitude().degrees,this.sector.getMaxLatitude().degrees,lon,lon);    String lineType=lon == this.sector.getMinLongitude().degrees ? GridElement.TYPE_LINE_WEST : GridElement.TYPE_LINE;    GridElement ge=new GridElement(sector,line,lineType);    ge.value=lon;    this.gridElements.add(ge);    lon+=step;  }  double lat=this.sector.getMinLatitude().degrees + (this.level == 0 ? 0 : step);  while (lat < this.sector.getMaxLatitude().degrees - step / 2) {    Angle latitude=Angle.fromDegrees(lat);    ArrayList<Position> positions=new ArrayList<Position>(2);    positions.add(new Position(latitude,this.sector.getMinLongitude(),0));    positions.add(new Position(latitude,this.sector.getMaxLongitude(),0));    Object line=createLineRenderable(positions,AVKey.LINEAR);    Sector sector=Sector.fromDegrees(lat,lat,this.sector.getMinLongitude().degrees,this.sector.getMaxLongitude().degrees);    String lineType=lat == this.sector.getMinLatitude().degrees ? GridElement.TYPE_LINE_SOUTH : GridElement.TYPE_LINE;    GridElement ge=new GridElement(sector,line,lineType);    ge.value=lat;    this.gridElements.add(ge);    lat+=step;  }  if (this.sector.getMaxLatitude().equals(Angle.POS90)) {    ArrayList<Position> positions=new ArrayList<Position>(2);    positions.add(new Position(Angle.POS90,this.sector.getMinLongitude(),0));    positions.add(new Position(Angle.POS90,this.sector.getMaxLongitude(),0));    Object line=createLineRenderable(positions,AVKey.LINEAR);    Sector sector=Sector.fromDegrees(90,90,this.sector.getMinLongitude().degrees,this.sector.getMaxLongitude().degrees);    GridElement ge=new GridElement(sector,line,GridElement.TYPE_LINE_NORTH);    ge.value=90;    this.gridElements.add(ge);  }  double resolution=this.sector.getDeltaLatDegrees() / this.divisions;  if (this.level == 0) {    Sector[] sectors=this.sector.subdivide(20);    for (int j=0; j < 20; j++) {      for (int i=0; i < 20; i++) {        Sector sector=sectors[j * 20 + i];        String label=makeLabel(sector,GRATICULE_GARS_LEVEL_1);        addLabel(label,sectors[j * 20 + i],resolution);      }    }  } else   if (this.level == 1) {    String label=makeLabel(this.sector,GRATICULE_GARS_LEVEL_1);    Sector[] sectors=this.sector.subdivide();    addLabel(label + "3",sectors[0],resolution);    addLabel(label + "4",sectors[1],resolution);    addLabel(label + "1",sectors[2],resolution);    addLabel(label + "2",sectors[3],resolution);  } else   if (this.level == 2) {    String label=makeLabel(this.sector,GRATICULE_GARS_LEVEL_1);    label+=makeLabel(this.sector,GRATICULE_GARS_LEVEL_2);    resolution=0.26;    Sector[] sectors=this.sector.subdivide(3);    addLabel(label + "7",sectors[0],resolution);    addLabel(label + "8",sectors[1],resolution);    addLabel(label + "9",sectors[2],resolution);    addLabel(label + "4",sectors[3],resolution);    addLabel(label + "5",sectors[4],resolution);    addLabel(label + "6",sectors[5],resolution);    addLabel(label + "1",sectors[6],resolution);    addLabel(label + "2",sectors[7],resolution);    addLabel(label + "3",sectors[8],resolution);  }}  }
class C{  public void testReceive_BlockNoServerCloseReadonly() throws Exception {  assertTrue(this.channel1.isBlocking());  receiveNoServerChannelCloseReadonly();}  }
class C{  public boolean hasTarget(){  return getTarget() != null;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case ERROR:  return isSetError();case TYPE:return isSetType();}throw new IllegalStateException();}  }
class C{  public static Quantity readFrom(final Deserializer deserializer,final String label){  return new Quantity(deserializer.readLong(label));}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  sizeCtl=-1;  s.defaultReadObject();  long size=0L;  Node<V> p=null;  for (; ; ) {    @SuppressWarnings("unchecked") V k=(V)s.readObject();    if (k != null) {      p=new Node<V>(spread(k.hashCode()),k,p);      ++size;    } else     break;  }  if (size == 0L)   sizeCtl=0; else {    int n;    if (size >= (long)(MAXIMUM_CAPACITY >>> 1))     n=MAXIMUM_CAPACITY; else {      int sz=(int)size;      n=tableSizeFor(sz + (sz >>> 1) + 1);    }    @SuppressWarnings("unchecked") Node<V>[] tab=(Node<V>[])new Node<?>[n];    int mask=n - 1;    long added=0L;    while (p != null) {      boolean insertAtFront;      Node<V> next=p.next, first;      int h=p.hash, j=h & mask;      if ((first=tabAt(tab,j)) == null)       insertAtFront=true; else {        V k=p.key;        if (first.hash < 0) {          TreeBin<V> t=(TreeBin<V>)first;          if (t.putTreeVal(h,k) == null)           ++added;          insertAtFront=false;        } else {          int binCount=0;          insertAtFront=true;          Node<V> q;          V qk;          for (q=first; q != null; q=q.next) {            if (q.hash == h && ((qk=q.key) == k || (qk != null && k.equals(qk)))) {              insertAtFront=false;              break;            }            ++binCount;          }          if (insertAtFront && binCount >= TREEIFY_THRESHOLD) {            insertAtFront=false;            ++added;            p.next=first;            TreeNode<V> hd=null, tl=null;            for (q=p; q != null; q=q.next) {              TreeNode<V> t=new TreeNode<V>(q.hash,q.key,null,null);              if ((t.prev=tl) == null)               hd=t; else               tl.next=t;              tl=t;            }            setTabAt(tab,j,new TreeBin<V>(hd));          }        }      }      if (insertAtFront) {        ++added;        p.next=first;        setTabAt(tab,j,p);      }      p=next;    }    table=tab;    sizeCtl=n - (n >>> 2);    baseCount=added;  }}  }
class C{  private void parseTag() throws IOException {  if (dataPos == dataSize)   return;  if (isEOC(data[dataPos]) && (data[dataPos + 1] == 0)) {    int numOfEncapsulatedLenBytes=0;    Object elem=null;    int index;    for (index=ndefsList.size() - 1; index >= 0; index--) {      elem=ndefsList.get(index);      if (elem instanceof Integer) {        break;      } else {        numOfEncapsulatedLenBytes+=((byte[])elem).length - 3;      }    }    if (index < 0) {      throw new IOException("EOC does not have matching " + "indefinite-length tag");    }    int sectionLen=dataPos - ((Integer)elem).intValue() + numOfEncapsulatedLenBytes;    byte[] sectionLenBytes=getLengthBytes(sectionLen);    ndefsList.set(index,sectionLenBytes);    unresolved--;    numOfTotalLenBytes+=(sectionLenBytes.length - 3);  }  dataPos++;}  }
class C{  public static <O>Query<O> all(Class<O> objectType){  return new All<O>(objectType);}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum != 1)   reportWrongNumberArgs();}  }
class C{  private void checkFailureAndRecover(Throwable e){  if (!(e instanceof AlreadyClosedException)) {    if (this.writer != null && !getHost().isStopping()) {      logSevere(e);    }    return;  }  this.adjustStat(STAT_NAME_WRITER_ALREADY_CLOSED_EXCEPTION_COUNT,1);  reOpenWriterSynchronously();}  }
class C{  @Override public final Date toDate(String source,String s){  DateTime dt=null;  for (  DateTimeFormatter fmt : dt_formatters) {    try {      dt=fmt.parseDateTime(s);      dt=dt.withZoneRetainFields(INPUT_TIME_ZONE);      dt=dt.withZone(OUTPUT_TIME_ZONE);      dt=dt.withYear(curYear);      if (s_linuxAdeExtProperties.isYearDefined()) {        yearSetter=LinuxSyslogYearSetter.getYearSetter(source);        final int yearToUse=yearSetter.getDesiredYear(dt);        dt=dt.withYear(yearToUse);      } else       if (dt.isAfter(END_OF_TODAY)) {        dt=dt.withYear(curYear - 1);      } else {        dt=dt.withYear(curYear);      }      return dt.toDate();    } catch (    IllegalArgumentException e) {      if (dt != null) {        s_logger.error("Invalid argument encountered.",e);      }    }  }  throw new IllegalArgumentException("Failed to parse date " + s);}  }
class C{  protected void writeAttribute(String name,String value) throws IOException {  writeAttribute(null,name,value);}  }
class C{  protected String buildLabel(Cursor c,LinkedHashMap<String,String> selectColumnMap,List<String> columnsToExcludeFromLabels){  StringBuilder sb=new StringBuilder();  for (int columnIndex=1; columnIndex < c.getColumnCount(); columnIndex++) {    String columnName=c.getColumnName(columnIndex);    if (columnsToExcludeFromLabels.contains(columnName)) {      continue;    }    String value=c.getString(columnIndex);    if (columnIndex == 1) {      sb.append(value);      continue;    }    if (c.getColumnCount() - columnsToExcludeFromLabels.size() == 2) {      break;    }    if (columnIndex > 1) {      sb.append(" ");    }    sb.append("(");    sb.append(selectColumnMap.get(columnName));    sb.append(": ");    sb.append(value);    sb.append(")");  }  return sb.toString();}  }
class C{  public static JSONArray array(String... strings){  if (strings == null) {    throw new NullPointerException("values is null");  }  JSONArray array=new JSONArray();  for (  String value : strings) {    array.add(value);  }  return array;}  }
class C{  public LiveChannelListing listLiveChannels(ListLiveChannelsRequest listLiveChannelRequest) throws OSSException, ClientException {  assertParameterNotNull(listLiveChannelRequest,"listObjectsRequest");  String bucketName=listLiveChannelRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> parameters=new LinkedHashMap<String,String>();  parameters.put(RequestParameters.SUBRESOURCE_LIVE,null);  populateListLiveChannelsRequestParameters(listLiveChannelRequest,parameters);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.GET).setBucket(bucketName).setParameters(parameters).setOriginalRequest(listLiveChannelRequest).build();  return doOperation(request,listLiveChannelsReponseParser,bucketName,null,true);}  }
class C{  private void splitPush(Glyph glyph) throws IOException {  int instrSize=glyph.instructionSize();  ReadableFontData data=glyph.instructions();  int i=0;  List<Integer> result=new ArrayList<Integer>();  while (i + 1 < instrSize) {    int ix=i;    int instr=data.readUByte(ix++);    int n=0;    int size=0;    if (instr == 0x40 || instr == 0x41) {      n=data.readUByte(ix++);      size=(instr & 1) + 1;    } else     if (instr >= 0xB0 && instr < 0xC0) {      n=1 + (instr & 7);      size=((instr & 8) >> 3) + 1;    } else {      break;    }    if (i + size * n > instrSize) {      break;    }    for (int j=0; j < n; j++) {      if (size == 1) {        result.add(data.readUByte(ix));      } else {        result.add(data.readShort(ix));      }      ix+=size;    }    i=ix;  }  int pushCount=result.size();  int codeSize=instrSize - i;  write255UShort(glyfStream,pushCount);  write255UShort(glyfStream,codeSize);  encodePushSequence(pushStream,result);  if (codeSize > 0) {    data.slice(i).copyTo(codeStream);  }}  }
class C{  public static String randomUnicodeString(Random r,int maxLength){  final int end=nextInt(r,0,maxLength);  if (end == 0) {    return "";  }  final char[] buffer=new char[end];  randomFixedLengthUnicodeString(r,buffer,0,buffer.length);  return new String(buffer,0,end);}  }
class C{  public static void printHeader(StringBuilder stringBuilder,THLEvent thlEvent,int format){  if (format == 1) {    stringBuilder.append("{\n");    stringBuilder.append("\"seqno\": ");    stringBuilder.append(thlEvent.getSeqno());    stringBuilder.append(",\n");    stringBuilder.append("\"epoch\": ");    stringBuilder.append(thlEvent.getEpochNumber());    stringBuilder.append(",\n");    stringBuilder.append("\"frag\": ");    stringBuilder.append(thlEvent.getFragno());    stringBuilder.append(",\n");    stringBuilder.append("\"lastFrag\": ");    stringBuilder.append(thlEvent.getLastFrag());    stringBuilder.append(",\n");    stringBuilder.append("\"time\": \"");    stringBuilder.append(thlEvent.getSourceTstamp());    stringBuilder.append("\",\n");    stringBuilder.append("\"eventId\": \"");    stringBuilder.append(thlEvent.getEventId());    stringBuilder.append("\",\n");    stringBuilder.append("\"sourceId\": \"");    stringBuilder.append(thlEvent.getSourceId());    stringBuilder.append("\",\n");    stringBuilder.append("\"comments\": \"");    if (thlEvent.getComment() != null && thlEvent.getComment().length() > 0)     stringBuilder.append(thlEvent.getComment());    stringBuilder.append("\"\n");    stringBuilder.append("}");  } else   if (format == 2) {    stringBuilder.append(thlEvent.getSeqno());    stringBuilder.append("\t");    stringBuilder.append(thlEvent.getEpochNumber());    stringBuilder.append("\t");    stringBuilder.append(thlEvent.getFragno());    stringBuilder.append("\t");    stringBuilder.append(thlEvent.getLastFrag());    stringBuilder.append("\t");    stringBuilder.append(thlEvent.getSourceTstamp());    stringBuilder.append("\t");    stringBuilder.append(thlEvent.getEventId());    stringBuilder.append("\t");    stringBuilder.append(thlEvent.getSourceId());    stringBuilder.append("\t");    if (thlEvent.getComment() != null && thlEvent.getComment().length() > 0)     stringBuilder.append(thlEvent.getComment());    stringBuilder.append("\t\n");  } else {    println(stringBuilder,"SEQ# = " + thlEvent.getSeqno() + " / FRAG# = "+ thlEvent.getFragno()+ (thlEvent.getLastFrag() ? (" (last frag)") : ""));    println(stringBuilder,"- TIME = " + thlEvent.getSourceTstamp());    println(stringBuilder,"- EPOCH# = " + thlEvent.getEpochNumber());    println(stringBuilder,"- EVENTID = " + thlEvent.getEventId());    println(stringBuilder,"- SOURCEID = " + thlEvent.getSourceId());    if (thlEvent.getComment() != null && thlEvent.getComment().length() > 0)     println(stringBuilder,"- COMMENTS = " + thlEvent.getComment());  }}  }
class C{  public ScriptGenerator addResource(final Class base,@NonNls String resource){  addPath(getJarForResource(base,resource));  return this;}  }
class C{  public boolean hasProject(){  return hasExtension(Project.class);}  }
class C{  public ComponentBuilder bold(Boolean bold){  this.current.setBold(bold);  return this;}  }
class C{  public void registerBlockingService(BlockingService service){  blockingServiceMap.put(service.getDescriptorForType().getFullName(),service);}  }
class C{  public static TetradVector means(double[][] data){  TetradVector means=new TetradVector(data.length);  int rows=data[0].length;  for (int j=0; j < means.size(); j++) {    double sum=0.0;    int count=0;    for (int i=0; i < rows; i++) {      if (Double.isNaN(data[j][i])) {        continue;      }      sum+=data[j][i];      count++;    }    double mean=sum / count;    means.set(j,mean);  }  return means;}  }
class C{  public NgnRegistrationSession(NgnSipStack sipStack){  super(sipStack);  mSession=new RegistrationSession(sipStack);  super.init();  super.setSigCompId(sipStack.getSigCompId());  mSession.setExpires(NgnEngine.getInstance().getConfigurationService().getInt(NgnConfigurationEntry.NETWORK_REGISTRATION_TIMEOUT,NgnConfigurationEntry.DEFAULT_NETWORK_REGISTRATION_TIMEOUT));  super.addCaps("+g.3gpp.smsip");  super.addCaps("+g.oma.sip-im.large-message");  super.addCaps("audio");  super.addCaps("+g.3gpp.icsi-ref","\"urn%3Aurn-7%3A3gpp-service.ims.icsi.mmtel\"");  super.addCaps("+g.3gpp.icsi-ref","\"urn%3Aurn-7%3A3gpp-application.ims.iari.gsma-vs\"");  super.addCaps("+g.3gpp.cs-voice");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void saveToGeode(String regionPath){  rddf.saveToGeode(regionPath,rddf.defaultConnectionConf(),emptyStrStrMap());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.BITWISE_AND_EXPRESSION__LEFT_OPERAND:    return leftOperand != null;case ExpressionsPackage.BITWISE_AND_EXPRESSION__RIGHT_OPERAND:  return rightOperand != null;}return super.eIsSet(featureID);}  }
class C{  private CPanelFinder(){}  }
class C{  @Override public double evaluate(){  return (super.evaluate() - 1) / cutoff + 1;}  }
class C{  private void addSpatialCoverage(Document doc,Eml eml) throws DocumentException {  if (exists(eml.getGeospatialCoverages()) && !eml.getGeospatialCoverages().isEmpty()) {    Paragraph p=new Paragraph();    p.setAlignment(Element.ALIGN_JUSTIFIED);    p.setFont(font);    boolean firstCoverage=true;    for (    GeospatialCoverage coverage : eml.getGeospatialCoverages()) {      if (firstCoverage) {        firstCoverage=false;      } else {        p.add(Chunk.NEWLINE);      }      if (exists(coverage.getDescription())) {        p.add(new Phrase(getText("rtf.spatialCoverage"),fontTitle));        p.add(Chunk.NEWLINE);        p.add(Chunk.NEWLINE);        p.add(new Phrase(getText("rtf.spatialCoverage.general") + ": ",fontTitle));        p.add(coverage.getDescription().replace("\r\n","\n"));        p.add(Chunk.NEWLINE);      }      p.add(new Phrase(getText("rtf.spatialCoverage.coordinates") + ": ",fontTitle));      BBox coordinates=coverage.getBoundingCoordinates();      p.add(CoordinateUtils.decToDms(coordinates.getMin().getLatitude(),CoordinateUtils.LATITUDE));      p.add(" " + getText("rtf.spatialCoverage.and") + " ");      p.add(CoordinateUtils.decToDms(coordinates.getMax().getLatitude(),CoordinateUtils.LATITUDE));      p.add(" " + getText("rtf.spatialCoverage.latitude") + "; ");      p.add(CoordinateUtils.decToDms(coordinates.getMin().getLongitude(),CoordinateUtils.LONGITUDE));      p.add(" " + getText("rtf.spatialCoverage.and") + " ");      p.add(CoordinateUtils.decToDms(coordinates.getMax().getLongitude(),CoordinateUtils.LONGITUDE));      p.add(" " + getText("rtf.spatialCoverage.longitude") + " ");      p.add(Chunk.NEWLINE);    }    doc.add(p);    p.clear();  }}  }
class C{  private Method reflectGetDefaultReplication(FileSystem fileSystem){  Method m=null;  if (fileSystem != null) {    Class<?> fsClass=fileSystem.getClass();    try {      m=fsClass.getMethod("getDefaultReplication",new Class<?>[]{Path.class});    } catch (    NoSuchMethodException e) {      LOGGER.debug("FileSystem implementation doesn't support" + " getDefaultReplication(Path); -- HADOOP-8014 not available; " + "className = " + fsClass.getName() + "; err = "+ e);    }catch (    SecurityException e) {      LOGGER.debug("No access to getDefaultReplication(Path) on " + "FileSystem implementation -- HADOOP-8014 not available; " + "className = " + fsClass.getName() + "; err = "+ e);    }  }  if (m != null) {    LOGGER.debug("Using FileSystem.getDefaultReplication(Path) from " + "HADOOP-8014");  }  return m;}  }
class C{  public void testPartitionedOversize() throws Exception {  cacheMode=PARTITIONED;  nearEnabled=true;  checkOversize();}  }
class C{  public static void main(String[] args){  Klist klist=new Klist();  if ((args == null) || (args.length == 0)) {    klist.action='c';  } else {    klist.processArgs(args);  }switch (klist.action) {case 'c':    if (klist.name == null) {      klist.target=CredentialsCache.getInstance();      klist.name=CredentialsCache.cacheName();    } else     klist.target=CredentialsCache.getInstance(klist.name);  if (klist.target != null) {    klist.displayCache();  } else {    klist.displayMessage("Credentials cache");    System.exit(-1);  }break;case 'k':KeyTab ktab=KeyTab.getInstance(klist.name);if (ktab.isMissing()) {System.out.println("KeyTab " + klist.name + " not found.");System.exit(-1);} else if (!ktab.isValid()) {System.out.println("KeyTab " + klist.name + " format not supported.");System.exit(-1);}klist.target=ktab;klist.name=ktab.tabName();klist.displayTab();break;default :if (klist.name != null) {klist.printHelp();System.exit(-1);} else {klist.target=CredentialsCache.getInstance();klist.name=CredentialsCache.cacheName();if (klist.target != null) {klist.displayCache();} else {klist.displayMessage("Credentials cache");System.exit(-1);}}}}  }
class C{  private void traceAction(Bundle data){  if (traceCallback != null) {    String severity=data.getString(MqttServiceConstants.CALLBACK_TRACE_SEVERITY);    String message=data.getString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE);    String tag=data.getString(MqttServiceConstants.CALLBACK_TRACE_TAG);    if (MqttServiceConstants.TRACE_DEBUG.equals(severity))     traceCallback.traceDebug(tag,message); else     if (MqttServiceConstants.TRACE_ERROR.equals(severity))     traceCallback.traceError(tag,message); else {      Exception e=(Exception)data.getSerializable(MqttServiceConstants.CALLBACK_EXCEPTION);      traceCallback.traceException(tag,message,e);    }  }}  }
class C{  public static void AddFilesToFolderInZip(File systemFolder,ZipFile zipFile){  ArrayList<File> list0=FilesUtils.listAllFiles(new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_APP));  ArrayList<File> list1=FilesUtils.listAllFiles(new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_PRIV_APP));  ArrayList<File> list2=FilesUtils.listAllFiles(new File(systemFolder.getAbsolutePath() + File.separator + S.SYSTEM_FRAMEWORK));  ArrayList<File> list=new ArrayList<File>();  for (  File f : list0)   list.add(f);  for (  File f : list1)   list.add(f);  for (  File f : list2)   list.add(f);  for (  File f : list)   Zip.AddFileToFolderInZip(systemFolder,f,zipFile);}  }
class C{  @Initiate(priority=AutumnActionPriority.TOP_PRIORITY) public void initiateSkin(final SkinService skinService){  VisUI.load(VisUI.SkinScale.X2);  skinService.addSkin("default",VisUI.getSkin());  InterfaceService.DEFAULT_VIEW_RESIZER=new StandardViewResizer();}  }
class C{  public ICUTokenizer(AttributeFactory factory,ICUTokenizerConfig config){  super(factory);  this.config=config;  breaker=new CompositeBreakIterator(config);}  }
class C{  public void testGenerateMergedFileConflict() throws Exception {  File mergedCodebaseLocation=new File("merged_codebase_7");  expect(fileSystem.getTemporaryDirectory("merged_codebase_")).andReturn(mergedCodebaseLocation);  File origFile=new File("orig/foo");  expect(orig.getFile("foo")).andReturn(origFile);  expect(fileSystem.exists(origFile)).andReturn(true);  File destFile=new File("dest/foo");  expect(dest.getFile("foo")).andReturn(destFile);  expect(fileSystem.exists(destFile)).andReturn(true);  File modFile=new File("mod/foo");  expect(mod.getFile("foo")).andReturn(modFile);  expect(fileSystem.exists(modFile)).andReturn(true);  File mergedFile=new File("merged_codebase_7/foo");  fileSystem.makeDirsForFile(mergedFile);  fileSystem.copyFile(destFile,mergedFile);  List<String> mergeArgs=ImmutableList.of(mergedFile.getAbsolutePath(),origFile.getAbsolutePath(),modFile.getAbsolutePath());  expect(cmd.runCommand("merge",mergeArgs,mergedCodebaseLocation.getAbsolutePath())).andThrow(new CommandRunner.CommandException("merge",mergeArgs,"","",1));  control.replay();  CodebaseMerger merger=new CodebaseMerger(ui,fileSystem,cmd,null,orig,mod,dest);  merger.generateMergedFile("foo");  control.verify();  assertThat(merger.getMergedFiles()).isEmpty();  assertThat(merger.getFailedToMergeFiles()).contains(mergedFile.getAbsolutePath());}  }
class C{  public void paintPasswordFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private final void sendSplitPackets(Buffer packet,int packetLen) throws SQLException {  try {    Buffer packetToSend=(this.splitBufRef == null) ? null : this.splitBufRef.get();    Buffer toCompress=(!this.useCompression || this.compressBufRef == null) ? null : this.compressBufRef.get();    if (packetToSend == null) {      packetToSend=new Buffer((this.maxThreeBytes + HEADER_LENGTH));      this.splitBufRef=new SoftReference<Buffer>(packetToSend);    }    if (this.useCompression) {      int cbuflen=packetLen + ((packetLen / this.maxThreeBytes) + 1) * HEADER_LENGTH;      if (toCompress == null) {        toCompress=new Buffer(cbuflen);        this.compressBufRef=new SoftReference<Buffer>(toCompress);      } else       if (toCompress.getBufLength() < cbuflen) {        toCompress.setPosition(toCompress.getBufLength());        toCompress.ensureCapacity(cbuflen - toCompress.getBufLength());      }    }    int len=packetLen - HEADER_LENGTH;    int splitSize=this.maxThreeBytes;    int originalPacketPos=HEADER_LENGTH;    byte[] origPacketBytes=packet.getByteBuffer();    int toCompressPosition=0;    while (len >= 0) {      this.packetSequence++;      if (len < splitSize) {        splitSize=len;      }      packetToSend.setPosition(0);      packetToSend.writeLongInt(splitSize);      packetToSend.writeByte(this.packetSequence);      if (len > 0) {        System.arraycopy(origPacketBytes,originalPacketPos,packetToSend.getByteBuffer(),HEADER_LENGTH,splitSize);      }      if (this.useCompression) {        System.arraycopy(packetToSend.getByteBuffer(),0,toCompress.getByteBuffer(),toCompressPosition,HEADER_LENGTH + splitSize);        toCompressPosition+=HEADER_LENGTH + splitSize;      } else {        this.mysqlOutput.write(packetToSend.getByteBuffer(),0,HEADER_LENGTH + splitSize);        this.mysqlOutput.flush();      }      originalPacketPos+=splitSize;      len-=this.maxThreeBytes;    }    if (this.useCompression) {      len=toCompressPosition;      toCompressPosition=0;      splitSize=this.maxThreeBytes - COMP_HEADER_LENGTH;      while (len >= 0) {        this.compressedPacketSequence++;        if (len < splitSize) {          splitSize=len;        }        Buffer compressedPacketToSend=compressPacket(toCompress,toCompressPosition,splitSize);        packetLen=compressedPacketToSend.getPosition();        this.mysqlOutput.write(compressedPacketToSend.getByteBuffer(),0,packetLen);        this.mysqlOutput.flush();        toCompressPosition+=splitSize;        len-=(this.maxThreeBytes - COMP_HEADER_LENGTH);      }    }  } catch (  IOException ioEx) {    throw SQLError.createCommunicationsException(this.connection,this.lastPacketSentTimeMs,this.lastPacketReceivedTimeMs,ioEx,getExceptionInterceptor());  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.759 -0500",hash_original_method="9550C69BAA91C5298BA75D226127D5FF",hash_generated_method="D1146B99C52208B28E4F9EC1242180A7") public int size(){  return mSize;}  }
class C{  public AlertDialog makeMulActionDialog(Fragment fragment,View customView,String ok,DialogInterface.OnClickListener okListener,String negative,DialogInterface.OnClickListener negativeListener,String neutral,DialogInterface.OnClickListener neutralListener){  String dialogTitle=fragment.getArguments().getString(EXTRA_DIALOG_TITLE);  String htmlFileName=fragment.getArguments().getString(EXTRA_HTML_FILE_NAME);  int accentColor=fragment.getArguments().getInt(EXTRA_ACCENT_COLOR);  final WebView webView=(WebView)customView.findViewById(R.id.webview);  setWebView(webView);  loadData(webView,htmlFileName,accentColor);  AlertDialog dialog=new AlertDialog.Builder(mContext).setTitle(dialogTitle).setView(customView).setPositiveButton(ok,okListener).setNegativeButton(negative,negativeListener).setNeutralButton(neutral,neutralListener).show();  return dialog;}  }
class C{  public AppFrame(){  this.initSessionState();}  }
class C{  public void onDownloadFailed(DownloadInfo downloadInfo,int reason,String notifyURI){  String status=DOWNLOAD_STATUS_DEVICE_ABORTED;switch (reason) {case DownloadManager.ERROR_CANNOT_RESUME:    status=DOWNLOAD_STATUS_LOSS_OF_SERVICE;  break;case DownloadManager.ERROR_HTTP_DATA_ERROR:case DownloadManager.ERROR_TOO_MANY_REDIRECTS:case DownloadManager.ERROR_UNHANDLED_HTTP_CODE:status=DOWNLOAD_STATUS_LOADER_ERROR;break;case DownloadManager.ERROR_INSUFFICIENT_SPACE:status=DOWNLOAD_STATUS_INSUFFICIENT_MEMORY;break;default :break;}long downloadId=downloadInfo.getDownloadId();OMAInfo omaInfo=mPendingOMADownloads.get(downloadId);if (omaInfo == null) {omaInfo=new OMAInfo();omaInfo.addAttributeValue(OMA_INSTALL_NOTIFY_URI,notifyURI);sendInstallNotificationAndNextStep(omaInfo,downloadInfo,status);return;}showDownloadWarningDialog(R.string.oma_download_failed,omaInfo,downloadInfo,status);mPendingOMADownloads.remove(downloadId);}  }
class C{  public ReactiveSquidDatabase(){  super();  registerDataChangedNotifier(new PublishingDataChangedNotifier());}  }
class C{  private String multiLineCommentFilter(String line){  if (line == null || line.equals("")) {    return "";  }  StringBuffer buf=new StringBuffer();  int index;  if (inMultiLineComment && (index=line.indexOf("*/")) > -1 && !isInsideString(line,index)) {    inMultiLineComment=false;    buf.append(line.substring(0,index));    buf.append("*/").append(commentEnd);    if (line.length() > index + 2) {      buf.append(inlineCommentFilter(line.substring(index + 2)));    }    return buf.toString();  } else   if (inMultiLineComment) {    return line;  } else   if ((index=line.indexOf("/*")) > -1 && !isInsideString(line,index)) {    inMultiLineComment=true;    buf.append(inlineCommentFilter(line.substring(0,index)));    buf.append(commentStart).append("/*");    buf.append(multiLineCommentFilter(line.substring(index + 2)));    return buf.toString();  } else {    return inlineCommentFilter(line);  }}  }
class C{  protected long randomId(){  return idGenerator.nextId();}  }
class C{  public void startAnimationToWidgets(final Workspace.State fromWorkspaceState,final boolean animated){  final WidgetsContainerView toView=mLauncher.getWidgetsView();  final View buttonView=mLauncher.getWidgetsButton();  mCurrentAnimation=startAnimationToOverlay(fromWorkspaceState,Workspace.State.OVERVIEW_HIDDEN,buttonView,toView,animated,new PrivateTransitionCallbacks(FINAL_REVEAL_ALPHA_FOR_WIDGETS));}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public int encodeBase64Chunk(int b24,char[] buffer,int ptr){  buffer[ptr++]=_base64ToAsciiC[(b24 >> 18) & 0x3F];  buffer[ptr++]=_base64ToAsciiC[(b24 >> 12) & 0x3F];  buffer[ptr++]=_base64ToAsciiC[(b24 >> 6) & 0x3F];  buffer[ptr++]=_base64ToAsciiC[b24 & 0x3F];  return ptr;}  }
class C{  public static void mergeRegisters(IR ir,Register reg1,Register reg2){  RegisterOperand lastOperand;  if (reg1 == reg2) {    return;  }  if (DEBUG) {    VM.sysWrite("Merging " + reg2 + " into "+ reg1+ "\n");    printDefs(reg2);    printUses(reg2);    printDefs(reg1);    printUses(reg1);  }  lastOperand=null;  for (RegisterOperand def=reg2.defList; def != null; lastOperand=def, def=def.getNext()) {    def.setRegister(reg1);    lastOperand=def;  }  if (lastOperand != null) {    lastOperand.setNext(reg1.defList);    reg1.defList=reg2.defList;  }  lastOperand=null;  for (RegisterOperand use=reg2.useList; use != null; use=use.getNext()) {    use.setRegister(reg1);    lastOperand=use;  }  if (lastOperand != null) {    lastOperand.setNext(reg1.useList);    reg1.useList=reg2.useList;  }  ir.regpool.removeRegister(reg2);  if (DEBUG) {    VM.sysWrite("Merge complete\n");    printDefs(reg1);    printUses(reg1);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();}throw new IllegalStateException();}  }
class C{  protected boolean[] datasetIntegrity(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing){  print("kernel doesn't alter original datasets");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=getNumInstances(), numClasses=2, missingLevel=20;  boolean[] result=new boolean[2];  Instances train=null;  Kernel kernel=null;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);    }    kernel=Kernel.makeCopies(getKernel(),1)[0];  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    Instances trainCopy=new Instances(train);    kernel.buildKernel(trainCopy);    compareDatasets(train,trainCopy);    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during building");      println(": " + ex.getMessage() + "\n");      println("Here is the dataset:\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");    }  }  return result;}  }
class C{  public void parse(final String osmFilename) throws SAXException, ParserConfigurationException, IOException {  parse(osmFilename,null);}  }
class C{  @Override public Iterator<Map.Entry<String,DocumentAnalysis>> iterator(){  return documentAnalysisByKey.entrySet().iterator();}  }
class C{  public void testBug68562() throws Exception {  testBug68562BatchWithSize(1);  testBug68562BatchWithSize(3);}  }
class C{  public LinearScale inverse(){  return new LinearScale(mRangeA,mRangeB,mDomainA,mDomainB);}  }
class C{  public void buildReport(VOReportResult result,PlatformUser user,String defaultLocale) throws ParserConfigurationException {  result.setServerTimeZone(DateConverter.getCurrentTimeZoneAsUTCString());  Organization organization=user.getOrganization();  String organizationId=organization.getOrganizationId();  List<CustomerEventData> dataList=new ArrayList<CustomerEventData>();  if (user.isUnitAdmin() && !user.isOrganizationAdmin()) {    List<Long> unitKeys=unitDao.retrieveUnitKeysForUnitAdmin(user.getKey());    dataList=eventDao.retrieveCustomerEventData(organizationId,unitKeys);  } else {    dataList=eventDao.retrieveCustomerEventData(organizationId);  }  updateEventDescriptionsUsingUserLocale(organizationId,user.getLocale(),dataList);  updateEventDescriptionsUsingDefaultLocale(organizationId,defaultLocale,dataList);  convertEventDataToXmlResult(result.getData(),dataList);}  }
class C{  void afterTopLevelExec(){}  }
class C{  public static boolean resolve(Context context){  boolean enable=resolveEnable(context);  if (!enable) {    AlertDialog alertDialog=createDialog(context);    alertDialog.show();    alertDialog.getButton(DialogInterface.BUTTON_POSITIVE).setTextColor(ContextCompat.getColor(context,R.color.colorAccent));  }  return enable;}  }
class C{  @LargeTest public void testMediaImageItemTransitions() throws Exception {  final String imageItemFileName=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final int imageItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaImageItem1",imageItemFileName,5000,imageItemRenderingMode);  mVideoEditor.addMediaItem(mediaImageItem1);  assertNull("Begin Transition",mediaImageItem1.getBeginTransition());  assertNull("End Transition",mediaImageItem1.getEndTransition());  TransitionFadeBlack transition1=mVideoEditorHelper.createTFadeBlack("transition1",mediaImageItem1,null,0,Transition.BEHAVIOR_SPEED_UP);  mVideoEditor.addTransition(transition1);  assertEquals("Begin transition",transition1,mediaImageItem1.getEndTransition());  assertNotNull("End Transition",mediaImageItem1.getEndTransition());  assertTrue(mediaImageItem1.getEndTransition().getId().equals(transition1.getId()));  assertTrue(mediaImageItem1.getEndTransition().getDuration() == transition1.getDuration() ? true : false);  assertTrue(mediaImageItem1.getEndTransition().getBehavior() == transition1.getBehavior() ? true : false);  TransitionFadeBlack transition2=mVideoEditorHelper.createTFadeBlack("transition2",null,mediaImageItem1,0,Transition.BEHAVIOR_SPEED_UP);  mVideoEditor.addTransition(transition2);  assertNotNull("Begin transition",mediaImageItem1.getBeginTransition());  assertEquals("End Transition",transition2,mediaImageItem1.getBeginTransition());  assertTrue(mediaImageItem1.getBeginTransition().getId().equals(transition2.getId()));  assertTrue(mediaImageItem1.getBeginTransition().getDuration() == transition2.getDuration() ? true : false);  assertTrue(mediaImageItem1.getBeginTransition().getBehavior() == transition2.getBehavior() ? true : false);}  }
class C{  public static void main(String[] args){  try {    if (args.length < 2) {      System.out.println("Arguments not valid : {model, folder}.");    } else {      URI modelURI=URI.createFileURI(args[0]);      File folder=new File(args[1]);      List<String> arguments=new ArrayList<String>();      GenerateRoutes generator=new GenerateRoutes(modelURI,folder,arguments);      for (int i=2; i < args.length; i++) {        generator.addPropertiesFile(args[i]);      }      generator.doGenerate(new BasicMonitor());    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private void checkLevels(Unit[] units){  for (int i=0; i < units.length; i++) {    Unit unit=units[i];    int maxLevel=logic.getMaxLevel(unit.getId());    if (unit.getLvl() > maxLevel) {      log.warn("Level {} out of range for {}",unit.getLvl() + 1,logic.getSubTypeName(unit.getId()));      units[i]=new Unit(unit.getId(),unit.getCnt(),maxLevel);    }  }}  }
class C{  @Override public Long zcard(final String key){  checkIsInMultiOrPipeline();  client.zcard(key);  return client.getIntegerReply();}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public String shrinkageTipText(){  return "Shrinkage rate. Smaller values help prevent overfitting and " + "have a smoothing effect (but increase learning time). " + "Default = 1.0, ie. no shrinkage.";}  }
class C{  public void deleteFanOut(){  List<Synapse> fanOutList=getFanOutList();  fanOut.clear();  for (  Synapse s : fanOutList) {    parent.removeSynapse(s);  }}  }
class C{  private void addGroup(Group group){  if (objectNodeMap.get(group) != null) {    return;  }  if (group instanceof NeuronGroup) {    NeuronGroup ng=(NeuronGroup)group;    addNeuronGroup(ng);    if (ng.isTopLevelGroup()) {      whereToAdd.setLocation(whereToAdd.getX() + DEFAULT_SPACING,whereToAdd.getY() + DEFAULT_SPACING);    }  } else   if (group instanceof SynapseGroup) {    addSynapseGroup((SynapseGroup)group);  } else   if (group instanceof Subnetwork) {    addSubnetwork((Subnetwork)group);    whereToAdd.setLocation(whereToAdd.getX() + DEFAULT_SPACING,whereToAdd.getY() + DEFAULT_SPACING);  }  clearSelection();}  }
class C{  protected void onBeforeProcess(){}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case TypesPackage.NULL_MODIFIER:    return createNullModifierFromString(eDataType,initialValue);case TypesPackage.UNDEF_MODIFIER:  return createUndefModifierFromString(eDataType,initialValue);case TypesPackage.TYPING_STRATEGY:return createTypingStrategyFromString(eDataType,initialValue);case TypesPackage.TYPE_ACCESS_MODIFIER:return createTypeAccessModifierFromString(eDataType,initialValue);case TypesPackage.MEMBER_ACCESS_MODIFIER:return createMemberAccessModifierFromString(eDataType,initialValue);case TypesPackage.MEMBER_TYPE:return createMemberTypeFromString(eDataType,initialValue);case TypesPackage.ITERABLE_OF_TCLASSIFIER:return createIterableOfTClassifierFromString(eDataType,initialValue);case TypesPackage.VARIANCE:return createVarianceFromString(eDataType,initialValue);case TypesPackage.NAME_AND_ACCESS:return createNameAndAccessFromString(eDataType,initialValue);case TypesPackage.MEMBER_LIST:return createMemberListFromString(eDataType,initialValue);case TypesPackage.TCLASSIFIER_ITERABLE:return createTClassifierIterableFromString(eDataType,initialValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public boolean isNullCascaded(int i){  return (masks[i] & NULL_CASCADED_MASK) != 0;}  }
class C{  public synchronized void suspend(){  if (updateRunnableQueue.getQueueState() == RunnableQueue.RUNNING) {    updateRunnableQueue.suspendExecution(false);  }  suspendCalled=true;}  }
class C{  private Rule(final String uri,final List<String> methods,final T target){  this.path=uri;  this.target=target;  this.methods=processMethods(methods);  final Route route=Route.of("HEAD",uri);  final Set<String> duplicateNames=duplicates(route.captureNames());  if (!duplicateNames.isEmpty()) {    throw new IllegalArgumentException("duplicate extraction names: " + Joiner.on(',').join(duplicateNames));  }  this.extractionCount=route.captureNames().size();}  }
class C{  private void handleComputeQueryCompletion(Operation operation,Throwable failure,AzureStatsDataHolder statsData){  if (failure != null) {    logSevere(failure.getMessage());    sendFailurePatch(statsData,failure);    return;  }  QueryTask queryResult=operation.getBody(QueryTask.class);  if (queryResult == null || queryResult.results == null) {    sendFailurePatch(statsData,new RuntimeException(String.format("Unexpected query result for '%s'",operation.getUri())));    return;  }  int computeCount=Math.toIntExact(queryResult.results.documentCount);  if (computeCount <= 0) {    SingleResourceStatsCollectionTaskState response=new SingleResourceStatsCollectionTaskState();    response.taskStage=(SingleResourceTaskCollectionStage)statsData.statsRequest.nextStage;    response.statsList=new ArrayList<>();    response.statsAdapterReference=UriUtils.buildUri(getHost(),SELF_LINK);    this.sendRequest(Operation.createPatch(statsData.statsRequest.taskReference).setBody(response));    return;  }  List<Operation> statOperations=new ArrayList<>(computeCount);  for (  String computeLink : queryResult.results.documentLinks) {    Operation statsOp=getStatsQueryTaskOperation(statsData,computeLink);    statOperations.add(statsOp);  }  OperationJoin.create(statOperations).setCompletion(null).sendWith(this);}  }
class C{  @SuppressWarnings("UnusedParameters") public void handleJGroupsIOException(IOException e,Address dest){  if (services.getManager().shutdownInProgress()) {    return;  }  if (addressesWithIoExceptionsProcessed.contains(dest)) {    return;  }  addressesWithIoExceptionsProcessed.add(dest);  NetView v=this.view;  JGAddress jgMbr=(JGAddress)dest;  if (jgMbr != null && v != null) {    List<InternalDistributedMember> members=v.getMembers();    InternalDistributedMember recipient=null;    for (    InternalDistributedMember mbr : members) {      GMSMember gmsMbr=((GMSMember)mbr.getNetMember());      if (jgMbr.getUUIDLsbs() == gmsMbr.getUuidLSBs() && jgMbr.getUUIDMsbs() == gmsMbr.getUuidMSBs() && jgMbr.getVmViewId() == gmsMbr.getVmViewId()) {        recipient=mbr;        break;      }    }    if (recipient != null) {      services.getHealthMonitor().suspect(recipient,"Unable to send messages to this member via JGroups");    }  }}  }
class C{  @NonNull private String replaceFirstOne(@NonNull String content,@NonNull String target,@NonNull String replacement){  if (target == null) {    throw new NullPointerException("target == null");  }  if (replacement == null) {    throw new NullPointerException("replacement == null");  }  int matchStart=content.indexOf(target,0);  if (matchStart == -1) {    return content;  }  int targetLength=target.length();  if (targetLength == 0) {    int resultLength=content.length() + (content.length() + 1) * replacement.length();    StringBuilder result=new StringBuilder(resultLength);    result.append(replacement);    for (int i=0; i != content.length(); ++i) {      result.append(content.charAt(i));      result.append(replacement);    }    return result.toString();  }  StringBuilder result=new StringBuilder(content.length());  for (int i=0; i < matchStart; ++i) {    result.append(content.charAt(i));  }  result.append(replacement);  int over=matchStart + targetLength;  for (int i=over; i < content.length(); ++i) {    result.append(content.charAt(i));  }  return result.toString();}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"COMPLETION\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"STAGE\" INTEGER,"+ "\"LAST_COMPLETED\" INTEGER,"+ "\"USER_ID\" INTEGER NOT NULL ,"+ "\"CHALLENGE_ID\" INTEGER NOT NULL );");}  }
class C{  @Override public ImmutableSet<V> removeAll(Object key){  throw new UnsupportedOperationException();}  }
class C{  private static void writeSet2(final BTree btree){  log.info("");  for (int i=0; i < 1000; i++) {    btree.insert(i,i * 2);  }}  }
class C{  private void disableEntry(ClockableEntry entryToDisable){  entryToDisable.enabled=false;  if (entryToDisable.clockable instanceof Emulator) {    setLinkedEntriesEnabled(entryToDisable.clockable.getChip(),false);    if (syncPlay) {      for (      ClockableEntry candidateEntry : entries) {        if (candidateEntry.enabled && candidateEntry.clockable instanceof Emulator) {          if (candidateEntry.clockableCallbackHandlerChip >= 0) {            clockableCallbackHandlers[candidateEntry.clockableCallbackHandlerChip].onNormalExit("Sync stop due to " + entryToDisable.clockable.getClass().getSimpleName());          }          candidateEntry.enabled=false;          setLinkedEntriesEnabled(candidateEntry.clockable.getChip(),false);        }      }    }  }}  }
class C{  public void startExtension(Map<String,String> attributes) throws IOException {  startChangesIfNecessary();  ResponseWriter writer=getWrapped();  writer.startElement("extension",null);  if (attributes != null && !attributes.isEmpty()) {    for (    Map.Entry<String,String> entry : attributes.entrySet()) {      writer.writeAttribute(entry.getKey(),entry.getValue(),null);    }  }}  }
class C{  public String toStringDeep(){  return TreeQuery.toString(treeDef(),this,null);}  }
class C{  public DelayedPlayerTextSender(final Player player,final String message,final int seconds){  this(player,message,getServerNotificationType(player.getClientVersion()),seconds);}  }
class C{  public static void stop(JComponent c){  sharedInstance._stop(c);}  }
class C{  protected static MultiPolygon multipolygon(GeometryFactory factory,Coordinate[][][] polygons){  Polygon[] polygonSet=new Polygon[polygons.length];  for (int i=0; i < polygonSet.length; i++) {    polygonSet[i]=polygon(factory,polygons[i]);  }  return factory.createMultiPolygon(polygonSet);}  }
class C{  public void checkSanity(){  logger.debug("checking sanity of " + toString());}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  public static void collectFiles(File start,final List<String> file){  if (start.isDirectory()) {    File[] files=start.listFiles();    for (int i=0; i < files.length; i++) {      File f=files[i];      if (f.isDirectory()) {        collectFiles(f,file);      } else       if (f.getName().endsWith(".java")) {        file.add(f.getAbsolutePath());      }    }  }}  }
class C{  @Override public void close() throws IOException {  httpClient.finish();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.854 -0500",hash_original_method="5DE5F2E6648159BA44979C01CBE407AE",hash_generated_method="06A231199A8AAF9997FDC9D5141CEB18") public boolean logout() throws IOException {  return NNTPReply.isPositiveCompletion(quit());}  }
class C{  public static Ingredient fromCursor(Cursor cursor){  Ingredient ingredient=new Ingredient();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeIngredientTable.AMOUNT_COLUMN)) {      ingredient.setAmount(cursor.getString(c));    } else     if (columnName.equals(RecipeIngredientTable.DESCRIPTION_COLUMN)) {      ingredient.setDescription(cursor.getString(c));    }  }  return ingredient;}  }
class C{  protected static void writeHeader(XMLWriter writer){  XmlWriterUtil.writeCommentLineBreak(writer);  XmlWriterUtil.writeComment(writer," ");  DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss");  XmlWriterUtil.writeComment(writer,"Generated on " + dateFormat.format(new Date(System.currentTimeMillis())));  XmlWriterUtil.writeComment(writer," ");  XmlWriterUtil.writeCommentLineBreak(writer);  XmlWriterUtil.writeLineBreak(writer);}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  protected ARPALMState scoreNgram(Sequence<IString> sequence){  int[] ngramInts=Sequences.toIntArray(sequence);  int index;  index=tables[ngramInts.length - 1].getIndex(ngramInts);  if (index >= 0) {    double p=probs[ngramInts.length - 1][index];    if (verbose)     System.err.printf("EM: scoreR: seq: %s logp: %f%n",sequence.toString(),p);    return new ARPALMState(p,sequence.subsequence(1,sequence.size()));  }  if (ngramInts.length == 1) {    index=tables[0].getIndex(UNK_QUERY);    double p=index >= 0 ? probs[0][index] : UNKNOWN_WORD_SCORE;    return new ARPALMState(p,Sequences.emptySequence());  }  Sequence<IString> prefix=sequence.subsequence(0,ngramInts.length - 1);  int[] prefixInts=Sequences.toIntArray(prefix);  index=tables[prefixInts.length - 1].getIndex(prefixInts);  double bow=0;  if (index >= 0) {    bow=bows[prefixInts.length - 1][index];  }  if (Double.isNaN(bow)) {    bow=0.0;  }  ARPALMState state=scoreNgram(sequence.subsequence(1,ngramInts.length));  double p=bow + state.getScore();  if (verbose) {    System.err.printf("scoreR: seq: %s logp: %f [%f] bow: %f\n",sequence.toString(),p,p / Math.log(10),bow);  }  return new ARPALMState(p,state);}  }
class C{  String popImportURL(){  return (String)m_importStack.pop();}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  protected final void unexpectedEndOfInput(){  if (cacheRequest != null) {    cacheRequest.abort();  }  httpEngine.release(true);}  }
class C{  public static List<IMethodBinding> findOverriddenMethods(IMethodBinding overriding,boolean testVisibility,boolean firstOnly){  List<IMethodBinding> methodList=new ArrayList<IMethodBinding>();  int modifiers=overriding.getModifiers();  if (Modifier.isPrivate(modifiers) || Modifier.isStatic(modifiers) || overriding.isConstructor()) {    return methodList;  }  ITypeBinding type=overriding.getDeclaringClass();  if (type.getSuperclass() != null) {    IMethodBinding res=findOverriddenMethodInHierarchy(type.getSuperclass(),overriding);    if (res != null && !Modifier.isPrivate(res.getModifiers())) {      if (!testVisibility || isVisibleInHierarchy(res,overriding.getDeclaringClass().getPackage())) {        methodList.add(res);        if (firstOnly) {          return methodList;        }      }    }  }  ITypeBinding[] interfaces=type.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    IMethodBinding res=findOverriddenMethodInHierarchy(interfaces[i],overriding);    if (res != null) {      methodList.add(res);      if (firstOnly) {        return methodList;      }    }  }  return methodList;}  }
class C{  public void testNullCallBack() throws RpcException {  rpcForwarder.registerService(new FakeServiceImpl(REQUEST).withResponse(null));  SocketRpcProtos.Response rpcResponse=rpcForwarder.doBlockingRpc(RPC_REQUEST);  assertTrue(rpcResponse.getCallback());  assertFalse(rpcResponse.hasResponseProto());  Callback<SocketRpcProtos.Response> rpcCallback=new Callback<SocketRpcProtos.Response>();  rpcForwarder.doRpc(RPC_REQUEST,rpcCallback);  assertTrue(rpcCallback.isInvoked());  rpcResponse=rpcCallback.getResponse();  assertTrue(rpcResponse.getCallback());  assertFalse(rpcResponse.hasResponseProto());  rpcForwarder.registerBlockingService(new FakeServiceImpl(REQUEST).withResponse(null).toBlockingService());  rpcResponse=rpcForwarder.doBlockingRpc(RPC_REQUEST);  assertTrue(rpcResponse.getCallback());  assertFalse(rpcResponse.hasResponseProto());  rpcCallback=new Callback<SocketRpcProtos.Response>();  rpcForwarder.doRpc(RPC_REQUEST,rpcCallback);  assertTrue(rpcCallback.isInvoked());  rpcResponse=rpcCallback.getResponse();  assertTrue(rpcResponse.getCallback());  assertFalse(rpcResponse.hasResponseProto());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  return si == null ? "" : si.getHistory();}  }
class C{  private void readHeader() throws OpenStegoException {  boolean[][][][] oldBitRead=null;  this.dataHeader=new LSBDataHeader(this,this.config);  this.channelBitsUsed=this.dataHeader.getChannelBitsUsed();  if (this.channelBitsUsed > 1) {    oldBitRead=this.bitRead;    this.bitRead=new boolean[this.imgWidth][this.imgHeight][3][this.channelBitsUsed];    for (int i=0; i < this.imgWidth; i++) {      for (int j=0; j < this.imgHeight; j++) {        this.bitRead[i][j][0][0]=oldBitRead[i][j][0][0];        this.bitRead[i][j][1][0]=oldBitRead[i][j][1][0];        this.bitRead[i][j][2][0]=oldBitRead[i][j][2][0];        for (int k=1; k < this.channelBitsUsed; k++) {          this.bitRead[i][j][0][k]=false;          this.bitRead[i][j][1][k]=false;          this.bitRead[i][j][2][k]=false;        }      }    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.SCOPE__DECLARATIONS:    getDeclarations().clear();  getDeclarations().addAll((Collection<? extends Declaration>)newValue);return;case SGraphPackage.SCOPE__REACTIONS:getReactions().clear();getReactions().addAll((Collection<? extends Reaction>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void register(Label label) throws Exception {  if (label.isAttribute()) {    register(label,attributes);  } else   if (label.isText()) {    register(label,texts);  } else {    register(label,elements);  }}  }
class C{  @Override public void stop(){  if (isRunning) {    discoveryController.stop();    isRunning=false;  }  for (  ServiceDescription serviceDescription : foundServices.values()) {    notifyListenersThatServiceLost(serviceDescription);  }  foundServices.clear();}  }
class C{  @Override public void onActivityStarted(Activity activity){}  }
class C{  void addLine(final EventLine line){  this.addLine(line.getHeader(),line.getText(),line.getType());}  }
class C{  public static String buildXmlFromRuleset(Ruleset tree){  XStream xstream=new XStream();  xstream.setClassLoader(DelphiRulesUtils.class.getClassLoader());  xstream.processAnnotations(Ruleset.class);  xstream.processAnnotations(DelphiRule.class);  xstream.processAnnotations(Property.class);  return addHeaderToXml(xstream.toXML(tree));}  }
class C{  public static long nextPowerOfTwo(long x){  if (x == 0)   return 1;  x--;  x|=x >> 1;  x|=x >> 2;  x|=x >> 4;  x|=x >> 8;  x|=x >> 16;  return (x | x >> 32) + 1;}  }
class C{  public void groupDescendantsIterator(Session session,MemoryStoreData storeData){  assert storeData.storageDescription.getObject() instanceof Group : storeData.storageDescription;  MemoryTransaction txn=getTransaction(session);  packKey(storeData);  byte[] begin=join(storeData.rawKey,BYTES_00);  byte[] end=join(storeData.rawKey,BYTES_FF);  storeData.iterator=txn.getRange(begin,end);}  }
class C{  public FacesMessage(Severity severity,String summary,String detail){  super();  setSeverity(severity);  setSummary(summary);  setDetail(detail);}  }
class C{  private FunctionSource functionSource(DebuggableScript fnOrScript){  return functionToSource.get(fnOrScript);}  }
class C{  public TreeModelEvent(Object source,Object[] path,int[] childIndices,Object[] children){  this(source,(path == null) ? null : new TreePath(path),childIndices,children);}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (e.getValueIsAdjusting())   return;  panel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  cmd_searchTo();  panel.setCursor(Cursor.getDefaultCursor());}  }
class C{  private void tryScrollBackToTopAfterComplete(){  tryScrollBackToTop();}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  public static boolean viaEquals(final X500Principal p1,final X500Principal p2){  return p1.equals(p2);}  }
class C{  private long waitFor(double permits,long t) throws InterruptedException {  long begin=t;  while (permits > 0 && !Thread.currentThread().isInterrupted()) {    writeRate.lock();    try {      double currentRate=this.permitsPerSecond;      if (currentRate == Double.MAX_VALUE)       return System.nanoTime() - begin;      double nanosPerPermit=1000000000.0 / currentRate;      long done=t + ((long)(permits * nanosPerPermit));      long now=System.nanoTime();      if (done <= now) {        return now - begin;      }      rateChanged.awaitNanos(done - now);      now=System.nanoTime();      double permitsElapsed=((now - t) / 1000000000.0) * currentRate;      permits-=permitsElapsed;      t=now;    }  finally {      writeRate.unlock();    }  }  return t - begin;}  }
class C{  public void playSequentially(Animator... items){  if (items != null) {    mNeedsSort=true;    if (items.length == 1) {      play(items[0]);    } else {      for (int i=0; i < items.length - 1; ++i) {        play(items[i]).before(items[i + 1]);      }    }  }}  }
class C{  public void println(){  newline();}  }
class C{  private String convertLongToDottedIp(Long ip){  if (ip == null) {    return null;  }  return IpHelper.longToIp(ip).getHostAddress();}  }
class C{  public static Range parse(String[] args,int start){  if (args.length < start + 3) {    throw new IllegalArgumentException("Too few elements in array");  }  return new Range(parseInt(args[start]),parseInt(args[start + 1]),parseInt(args[start + 2]));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (index_1: ");  result.append(index_1);  result.append(')');  return result.toString();}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  } else   if (obj instanceof ActivationGroupID) {    ActivationGroupID id=(ActivationGroupID)obj;    return (uid.equals(id.uid) && system.equals(id.system));  } else {    return false;  }}  }
class C{  @Override public Map<double[],Double> discretise(int nbBuckets){  Map<double[],Double> values=new HashMap<double[],Double>(nbBuckets);  double step=(maximum - minimum) / nbBuckets;  for (int i=0; i < nbBuckets; i++) {    double value=minimum + i * step + step / 2.0f;    values.put(new double[]{value},1.0 / nbBuckets);  }  return values;}  }
class C{  private void combo(String... itens){  Combo.popular(cbTipoRelatorio,itens);}  }
class C{  private Object currentValue() throws JsonParserException {  if (token.isValue)   return value;  throw createParseException(null,"Expected JSON value, got " + token,true);}  }
class C{  public static <T>Procedure<T> cast(Procedure<T> procedure){  return procedure;}  }
class C{  protected double multiply(double[][] mat,double[] in,double[] out){  double l=0.;  for (int d1=0; d1 < in.length; d1++) {    final double[] row=mat[d1];    double t=0.;    for (int d2=0; d2 < in.length; d2++) {      t+=row[d2] * in[d2];    }    out[d1]=t;    l+=t * t;  }  return l > 0 ? Math.sqrt(l) : 0.;}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  public boolean isSampled(){  return sampled != null;}  }
class C{  private boolean loadCachedSources(Map<String,Source> sources){  boolean relink=false;  for (  Map.Entry<String,Source> entry : sources.entrySet()) {    String className=entry.getKey();    Source source=entry.getValue();    Source cachedSource=applicationCache.getSource(className);    if ((cachedSource != null) && !cachedSource.isUpdated()) {      CompilationUnit compilationUnit=source.getCompilationUnit();      VirtualFile pathRoot=source.getPathRoot();      CompilationUnit cachedCompilationUnit=cachedSource.getCompilationUnit();      VirtualFile cachedSourcePathRoot=cachedSource.getPathRoot();      if ((((pathRoot == null) && (cachedSourcePathRoot == null)) || ((pathRoot != null) && pathRoot.equals(cachedSource.getPathRoot()))) && (compilationUnit != null) && !compilationUnit.hasTypeInfo&& (cachedCompilationUnit != null)&& cachedCompilationUnit.hasTypeInfo) {        Source.copyCompilationUnit(cachedCompilationUnit,compilationUnit,true);        source.setFileTime(cachedSource.getFileTime());        source.reused();        relink=true;      }    }  }  return relink;}  }
class C{  public void testLongMissingFacet() throws Exception {  checkSortMissingFacet("longdv","-1","4");}  }
class C{  public boolean handleTouchEvent(MotionEvent event){  if (event != null) {    float x=event.getX();    float y=event.getY();    if (event.getAction() == MotionEvent.ACTION_MOVE) {      float deltaX=(x - mPreviousX) / sDensity / sDamping;      float deltaY=(y - mPreviousY) / sDensity / sDamping;      mDeltaX-=deltaX;      mDeltaY-=deltaY;    }    mPreviousX=x;    mPreviousY=y;    return true;  } else {    return false;  }}  }
class C{  protected boolean assertTotalOrder(final int fromIndex,final int toIndex,final byte[][] a){  for (int i=fromIndex; i < toIndex; i++) {    if (i > fromIndex) {      final int ret=BytesUtil.compareBytes(a[i - 1],a[i]);      assert ret < 0 : "unsigned byte[]s are out of order at index=" + i + ", ret="+ ret+ "\na["+ (i - 1)+ "]="+ BytesUtil.toString(a[i - 1])+ "\na["+ (i)+ "]="+ BytesUtil.toString(a[i]);    }  }  return true;}  }
class C{  private static int findSeparator(String s){  int result=s.indexOf('-');  if (result == -1) {    result=s.indexOf(',');  }  if (result == -1) {    result=s.indexOf(' ');  }  if (result == -1) {    result=s.indexOf('.');  }  return result;}  }
class C{  private void computeTabClippingVisibilityHelper(){  final boolean portrait=mCurrentMode == Orientation.PORTRAIT;  float clipOffset;  if (portrait) {    clipOffset=mLayout.getHeight() + StackTab.sStackedTabVisibleSize;  } else   if (!LocalizationUtils.isLayoutRtl()) {    clipOffset=mLayout.getWidth() + StackTab.sStackedTabVisibleSize;  } else {    clipOffset=-StackTab.sStackedTabVisibleSize;  }  for (int i=mStackTabs.length - 1; i >= 0; i--) {    LayoutTab layoutTab=mStackTabs[i].getLayoutTab();    layoutTab.setVisible(true);    if (mStackTabs[i].isDying() || mStackTabs[i].getXInStackOffset() != 0.0f || layoutTab.getAlpha() < 1.0f) {      layoutTab.setClipOffset(0.0f,0.0f);      layoutTab.setClipSize(Float.MAX_VALUE,Float.MAX_VALUE);      continue;    }    float tabOffset, tabSize, tabClippedSize, borderAdjustmentSize, insetBorderPadding;    if (portrait) {      tabOffset=layoutTab.getY();      tabSize=layoutTab.getScaledContentHeight();      tabClippedSize=Math.min(tabSize,clipOffset - tabOffset);      borderAdjustmentSize=mBorderTransparentTop;      insetBorderPadding=mBorderTopPadding;    } else     if (!LocalizationUtils.isLayoutRtl()) {      tabOffset=layoutTab.getX();      tabSize=layoutTab.getScaledContentWidth();      tabClippedSize=Math.min(tabSize,clipOffset - tabOffset);      borderAdjustmentSize=mBorderTransparentSide;      insetBorderPadding=0;    } else {      tabOffset=layoutTab.getX() + layoutTab.getScaledContentWidth();      tabSize=layoutTab.getScaledContentWidth();      tabClippedSize=Math.min(tabSize,tabOffset - clipOffset);      borderAdjustmentSize=-mBorderTransparentSide;      insetBorderPadding=0;    }    float absBorderAdjustmentSize=Math.abs(borderAdjustmentSize);    if (tabClippedSize <= absBorderAdjustmentSize) {      layoutTab.setVisible(false);      layoutTab.setDrawDecoration(true);    } else {      float fade=MathUtils.clamp(((tabClippedSize - absBorderAdjustmentSize) / StackTab.sStackedTabVisibleSize),0,1);      layoutTab.setDecorationAlpha(fade);      float clipScale=1.0f;      if (layoutTab.getTiltX() > 0 || ((!portrait && LocalizationUtils.isLayoutRtl()) ? layoutTab.getTiltY() < 0 : layoutTab.getTiltY() > 0)) {        final float tilt=Math.max(layoutTab.getTiltX(),Math.abs(layoutTab.getTiltY()));        clipScale+=(tilt / mMaxOverScrollAngle) * 0.60f;      }      float scaledTabClippedSize=Math.min(tabClippedSize * clipScale,tabSize);      layoutTab.setClipOffset((!portrait && LocalizationUtils.isLayoutRtl()) ? (tabSize - scaledTabClippedSize) : 0,0);      layoutTab.setClipSize(portrait ? Float.MAX_VALUE : scaledTabClippedSize,portrait ? scaledTabClippedSize : Float.MAX_VALUE);    }    if (i > 0) {      LayoutTab nextLayoutTab=mStackTabs[i - 1].getLayoutTab();      if (nextLayoutTab.getScale() <= layoutTab.getScale()) {        clipOffset=tabOffset;      } else {        clipOffset=tabOffset + tabClippedSize * layoutTab.getScale();      }      clipOffset+=borderAdjustmentSize;      if (layoutTab.getBorderAlpha() < 1.f && layoutTab.getToolbarAlpha() < 1.f) {        clipOffset+=insetBorderPadding;      }    }  }}  }
class C{  @Override public User save(User user){  return this.saveUser(user);}  }
class C{  public List<Entry> filter(List<Entry> points){  return filter(points,mTolerance);}  }
class C{  public boolean put(K key,V value,long ttlMs,EntryExpiryCallback<V> callback){  if (key != null && value != null && ttlMs > 0) {    entries.put(key,new CacheEntryWithExpiryCallback<>(value,ttlMs,callback));    return true;  }  return false;}  }
class C{  public SwaggerAssert satisfiesContract(Swagger expected){  SchemaObjectResolver schemaObjectResolver=new SchemaObjectResolver(expected,actual);  consumerDrivenValidator.validateSwagger(expected,schemaObjectResolver);  return myself;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (o instanceof Pair) {    Pair p=(Pair)o;    return p.row == row && p.diagonal == diagonal;  }  return false;}  }
class C{  public JsonBuffer(){  this(new StringWriter());}  }
class C{  public void addAttributePanelListener(AttributePanelListener a){  m_Listeners.add(a);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean isClient(){  return s_client;}  }
class C{  protected boolean parsePathExpression(PsiBuilder builder){  final PsiBuilder.Marker marker=builder.mark();  if (!parseLocationPath(builder,false) && !parseAbsoluteLocationPath(builder)) {    final PsiBuilder.Marker m2=builder.mark();    if (!parseFilterExpression(builder)) {      m2.drop();      marker.drop();      return false;    }    if (XPathTokenTypes.PATH_OPS.contains(builder.getTokenType())) {      makeToken(builder);      if (!parseLocationPath(builder,false,m2)) {        builder.error("location path expected");      }      marker.done(XPathElementTypes.LOCATION_PATH);    } else {      m2.drop();      marker.drop();    }  } else {    marker.done(XPathElementTypes.LOCATION_PATH);  }  return true;}  }
class C{  public static boolean isInitialSetupComplete(){  if (isComplete) {    return true;  }  isComplete=SetupUtils.isSetupComplete();  return isComplete;}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException rse) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,"|");  String nextToken=tokenizer.nextToken();  ver=nextToken.substring(1,nextToken.length() - 1);  fdrvldmacroid=Integer.parseInt(tokenizer.nextToken());  numreqflds=Integer.parseInt(tokenizer.nextToken());  if (numreqflds > 0) {    nextToken=tokenizer.nextToken();    StringTokenizer tokenizer2=new StringTokenizer(nextToken,",");    while (tokenizer2.hasMoreTokens()) {      reqfldid.add(new Integer(tokenizer2.nextToken()));    }  }  numfldvlds=Integer.parseInt(tokenizer.nextToken());  for (int i=0; i < numfldvlds; i++) {    fldvlddefs.put(new Integer(i),new VFldVldDef(tokenizer));  }}  }
class C{  public HeapVariable(T type,int number,IR ir){  this.type=type;  this.number=number;  definedIn=new BitVector(ir.getMaxBasicBlockNumber() + 1);}  }
class C{  public boolean hasPickerInfo(){  return (mPickerInfo != null);}  }
class C{  public synchronized String format(LogRecord record){  StringBuffer sb=new StringBuffer();  Calendar cal=Calendar.getInstance();  int hour=cal.get(Calendar.HOUR_OF_DAY);  int minutes=cal.get(Calendar.MINUTE);  int seconds=cal.get(Calendar.SECOND);  int millis=cal.get(Calendar.MILLISECOND);  sb.append(twoDigFmt.format(hour)).append(':');  sb.append(twoDigFmt.format(minutes)).append(':');  sb.append(twoDigFmt.format(seconds)).append('.');  sb.append(threeDigFmt.format(millis)).append(' ');  sb.append(record.getLevel().getLocalizedName());  sb.append(": ");  int lineNumber=inferCaller(record);  String loggerName=record.getLoggerName();  if (loggerName == null)   loggerName=record.getSourceClassName();  if (loggerName.startsWith("net.java.sip.communicator.")) {    sb.append(loggerName.substring("net.java.sip.communicator.".length()));  } else   sb.append(record.getLoggerName());  if (record.getSourceMethodName() != null) {    sb.append(".");    sb.append(record.getSourceMethodName());    if (lineNumber != -1)     sb.append("().").append(Integer.toString(lineNumber)); else     sb.append("()");  }  sb.append(" ");  sb.append(record.getMessage());  sb.append(lineSeparator);  if (record.getThrown() != null) {    try {      StringWriter sw=new StringWriter();      PrintWriter pw=new PrintWriter(sw);      record.getThrown().printStackTrace(pw);      pw.close();      sb.append(sw.toString());    } catch (    Exception ex) {    }  }  return sb.toString();}  }
class C{  public void afterLayout(StructDescription desc,List<StructFieldDescription> aggregatedFields){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.599 -0400",hash_original_method="F159246393BC6BD0D887FFAE2708CE6F",hash_generated_method="8F62B2E5E762EB87C0EF7226A31B324A") public PathFileComparator(IOCase caseSensitivity){  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.GATEWAY;}  }
class C{  private void clearListenerInViewGroup(ViewGroup viewGroup){  if (null == viewGroup) {    return;  }  int count=viewGroup.getChildCount();  for (int n=0; n < count; ++n) {    View childView=viewGroup.getChildAt(n);    if (childView instanceof Switch) {      final Switch switchView=(Switch)childView;      switchView.setOnCheckedChangeListener(null);      return;    } else     if (childView instanceof ViewGroup) {      ViewGroup childGroup=(ViewGroup)childView;      clearListenerInViewGroup(childGroup);    }  }}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,false);}  }
class C{  public double scaleValue(double value){  if (!isCalibrated)   calibrate();  double f=(transform(value) - transform(minAxis)) / (transform(maxAxis) - transform(minAxis));  return f;}  }
class C{  public boolean calledReflection(){  int executedStatements=getExecutedStatements();  for (int numStatement=0; numStatement < executedStatements; numStatement++) {    Statement s=test.getStatement(numStatement);    if (s.isReflectionStatement())     return true;  }  return false;}  }
class C{  protected void addRequestTags(HttpRequest request){  this.keysInjector.addRequestTags(request.getURI().toString(),request.getURI().getHost(),request.getURI().getPath(),request.getMethod().name(),request.getHeaders());}  }
class C{  protected String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  @CanIgnoreReturnValue public Builder<K,V> put(Range<K> range,V value){  checkNotNull(range);  checkNotNull(value);  checkArgument(!range.isEmpty(),"Range must not be empty, but was %s",range);  if (!keyRanges.complement().encloses(range)) {    for (    Entry<Range<K>,V> entry : rangeMap.asMapOfRanges().entrySet()) {      Range<K> key=entry.getKey();      if (key.isConnected(range) && !key.intersection(range).isEmpty()) {        throw new IllegalArgumentException("Overlapping ranges: range " + range + " overlaps with entry "+ entry);      }    }  }  keyRanges.add(range);  rangeMap.put(range,value);  return this;}  }
class C{  public ColorBackground(Rectangle bounds){  createColorBackground(bounds);  fillColorBackground();}  }
class C{  public Jdk14Logger(String name){  this.name=name;  logger=getLogger();}  }
class C{  @Override public synchronized void commit() throws SQLException {  try {    debugCodeCall("commit");    checkClosedForWrite();    try {      commit=prepareCommand("COMMIT",commit);      commit.executeUpdate();    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Deprecated static public DCCppLightManager instance(){  return null;}  }
class C{  public void propertyChange(PropertyChangeEvent e){  if (e.getSource() == getEditor() && e.getPropertyName().equals("document")) {    Document oldDoc=(Document)e.getOldValue();    Document newDoc=(Document)e.getNewValue();    oldDoc.removeDocumentListener(this);    newDoc.addDocumentListener(this);    treeModel=new ElementTreeModel(newDoc);    tree.setModel(treeModel);  }}  }
class C{  private int[] executeInternalBatch(MultiExecutionResult internalExecutionResult,int size) throws QueryException {  if (options.rewriteBatchedStatements) {    if (prepareResult.isQueryMultiValuesRewritable()) {      protocol.executeBatchRewrite(protocol.isMasterConnection(),internalExecutionResult,prepareResult,parameterList,resultSetScrollType,true);      return internalExecutionResult.updateResultsForRewrite(size,false);    } else     if (prepareResult.isQueryMultipleRewritable()) {      protocol.executeBatchRewrite(protocol.isMasterConnection(),internalExecutionResult,prepareResult,parameterList,resultSetScrollType,false);      return internalExecutionResult.updateResultsMultiple(size,false);    }  }  if (options.useBatchMultiSend) {    protocol.executeBatchMulti(protocol.isMasterConnection(),internalExecutionResult,prepareResult,parameterList,resultSetScrollType);  } else {    QueryException exception=null;    for (int batchQueriesCount=0; batchQueriesCount < size; batchQueriesCount++) {      try {        protocol.executeQuery(protocol.isMasterConnection(),internalExecutionResult,prepareResult,parameterList.get(batchQueriesCount),resultSetScrollType);      } catch (      QueryException e) {        if (options.continueBatchOnError) {          exception=e;        } else {          throw e;        }      }    }    if (exception != null)     throw exception;  }  return internalExecutionResult.getAffectedRows();}  }
class C{  @SuppressWarnings("unused") protected final boolean cancelOperation(@NonNull final String tag){  return mHelper.cancelOperation(tag,true);}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  protected double[][] meansWithTreshhold(List<? extends ModifiableDoubleDBIDList> clusters,double[][] means,Relation<V> database,Double tresh){  double[][] newMeans=new double[k][];  for (int i=0; i < k; i++) {    DoubleDBIDList list=clusters.get(i);    double[] raw=null;    int count=0;    for (DoubleDBIDListIter iter=list.iter(); iter.valid(); iter.advance()) {      if (iter.doubleValue() >= tresh) {        continue;      }      NumberVector vec=database.get(iter);      if (raw == null) {        raw=vec.toArray();      }      for (int j=0; j < raw.length; j++) {        raw[j]+=vec.doubleValue(j);      }      count++;    }    newMeans[i]=(raw != null) ? VMath.timesEquals(raw,1.0 / count) : means[i];  }  return newMeans;}  }
class C{  public static void fillEquivalentNav(EventType[] typesPerStream,QueryGraph queryGraph){  boolean addedEquivalency;  do {    addedEquivalency=false;    for (int lookupStream=0; lookupStream < queryGraph.numStreams; lookupStream++) {      for (int indexedStream=0; indexedStream < queryGraph.numStreams; indexedStream++) {        if (lookupStream == indexedStream) {          continue;        }        boolean added=fillEquivalentNav(typesPerStream,queryGraph,lookupStream,indexedStream);        if (added) {          addedEquivalency=true;        }      }    }  } while (addedEquivalency);}  }
class C{  private void installDefaults(){  setFont(UIManager.getFont("InternalFrame.titleFont",getLocale()));}  }
class C{  public void cleanUp(){  if (DEBUG)   Log.d(TAG,"cleanUp()");  if (mService != null) {    try {      mService.unregisterCallback(mFaceUnlockCallback);    } catch (    RemoteException e) {    }    stopUi();    mService=null;  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == VariableEnvironmentElement.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:      return N4JSPackage.BLOCK___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS;default :    return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static String toString(double[] array){  StringBuffer buf=new StringBuffer();  buf.append("[");  int maxIndex=array.length - 1;  for (int i=0; i <= maxIndex; i++) {    buf.append(array[i]);    if (i < maxIndex)     buf.append(", ");  }  buf.append("]");  return buf.toString();}  }
class C{  protected void handleSetters(Object o){  for (  Property p : properties.values())   p.assignTo(o);}  }
class C{  public static double[] normalize(double[] data){  double[] norm=new double[data.length];  double total_sum=0.0;  for (int i=0; i < data.length; ++i) {    total_sum+=data[i];  }  for (int i=0; i < data.length; ++i) {    norm[i]=data[i] / total_sum;  }  return norm;}  }
class C{  public NotificationChain basicSetOperand(Expression newOperand,NotificationChain msgs){  Expression oldOperand=operand;  operand=newOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.NUMERICAL_UNARY_EXPRESSION__OPERAND,oldOperand,newOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void testDeadlocksDeleteMkdirsRename() throws Exception {  checkDeadlocksRepeat(5,2,2,2,RENAME_CNT,DELETE_CNT,0,MKDIRS_CNT,0);}  }
class C{  public static boolean simpleCCW(S2Point a,S2Point b,S2Point c){  return S2Point.crossProd(c,a).dotProd(b) > 0;}  }
class C{  private JSONObject readObject() throws JSONException {  JSONObject result=new JSONObject();  int first=nextCleanInternal();  if (first == '}') {    return result;  } else   if (first != -1) {    pos--;  }  while (true) {    Object name=nextValue();    if (!(name instanceof String)) {      if (name == null) {        throw syntaxError("Names cannot be null");      } else {        throw syntaxError("Names must be strings, but " + name + " is of type "+ name.getClass().getName());      }    }    int separator=nextCleanInternal();    if (separator != ':' && separator != '=') {      throw syntaxError("Expected ':' after " + name);    }    if (pos < in.length() && in.charAt(pos) == '>') {      pos++;    }    result.put((String)name,nextValue());switch (nextCleanInternal()) {case '}':      return result;case ';':case ',':    continue;default :  throw syntaxError("Unterminated object");}}}  }
class C{  public String toString(){  return buffer.toString();}  }
class C{  private void sendReadReceipt(){  if (null != mRoom) {    mRoom.sendReadReceipt(mLatestDisplayedEvent,null);    refreshNotificationsArea();  }}  }
class C{  public boolean isSunday(){  return sunday;}  }
class C{  private boolean upgradeLegacyShortcut(String target){  String shortcut=target + Constants.ABOUT_TITLE + ".desktop";  if (fileExists(shortcut)) {    if (ShellUtilities.execute(new String[]{"rm",shortcut})) {      return createShortcut(target);    }  }  return false;}  }
class C{  private Figure readImageElement(IXMLElement elem) throws IOException {  HashMap<AttributeKey,Object> a=new HashMap<AttributeKey,Object>();  readCoreAttributes(elem,a);  readTransformAttribute(elem,a);  readOpacityAttribute(elem,a);  double x=toNumber(elem,readAttribute(elem,"x","0"));  double y=toNumber(elem,readAttribute(elem,"y","0"));  double w=toWidth(elem,readAttribute(elem,"width","0"));  double h=toHeight(elem,readAttribute(elem,"height","0"));  String href=readAttribute(elem,"xlink:href",null);  if (href == null) {    href=readAttribute(elem,"href",null);  }  byte[] imageData=null;  if (href != null) {    if (href.startsWith("data:")) {      int semicolonPos=href.indexOf(';');      if (semicolonPos != -1) {        if (href.indexOf(";base64,") == semicolonPos) {          imageData=Base64.decode(href.substring(semicolonPos + 8));        } else {          throw new IOException("Unsupported encoding in data href in image element:" + href);        }      } else {        throw new IOException("Unsupported data href in image element:" + href);      }    } else {      URL imageUrl=new URL(url,href);      if (imageUrl.getFile().endsWith("svg")) {        SVGInputFormat svgImage=new SVGInputFormat(factory);        Drawing svgDrawing=new DefaultDrawing();        svgImage.read(imageUrl,svgDrawing,true);        CompositeFigure svgImageGroup=factory.createG(a);        for (        Figure f : svgDrawing.getChildren()) {          svgImageGroup.add(f);        }        svgImageGroup.setBounds(new Point2D.Double(x,y),new Point2D.Double(x + w,y + h));        return svgImageGroup;      }      ByteArrayOutputStream bout=new ByteArrayOutputStream();      byte[] buf=new byte[512];      int len=0;      try {        InputStream in=imageUrl.openStream();        try {          while ((len=in.read(buf)) > 0) {            bout.write(buf,0,len);          }          imageData=bout.toByteArray();        }  finally {          in.close();        }      } catch (      FileNotFoundException e) {      }    }  }  BufferedImage bufferedImage=null;  if (imageData != null) {    try {      bufferedImage=ImageIO.read(new ByteArrayInputStream(imageData));    } catch (    IIOException e) {      System.err.println("SVGInputFormat warning: skipped unsupported image format.");      e.printStackTrace();    }  }  if (bufferedImage == null) {    imageData=null;  }  Figure figure=factory.createImage(x,y,w,h,imageData,bufferedImage,a);  elementObjects.put(elem,figure);  return figure;}  }
class C{  private long determineServiceKey(long triggerProcessKey) throws Exception {  ResourceHolder holder=getTriggerProcessParameters(triggerProcessKey);  ResultSet triggerProcessParameters=holder.getRs();  while (triggerProcessParameters.next()) {    String parameterName=triggerProcessParameters.getString("name");    if (TriggerProcessParameterName.PRODUCT.name().equals(parameterName)) {      VOService service=getObjectFromXML(triggerProcessParameters,VOService.class);      holder.close();      return service.getKey();    }  }  throw new Exception("Migration failed, no product entry found for trigger process!");}  }
class C{  @Override public void addPickData(final PickData data){  if (data.getIntersectionRecord() == null) {    return;  }  super.addPickData(data);}  }
class C{  private static void showQueryContextHint(Editor editor,String hintText){  final HintManagerImpl hintManager=HintManagerImpl.getInstanceImpl();  final JComponent label=HintUtil.createInformationLabel(hintText);  final LightweightHint lightweightHint=new LightweightHint(label);  final Point hintPosition=hintManager.getHintPosition(lightweightHint,editor,HintManager.UNDER);  hintManager.showEditorHint(lightweightHint,editor,hintPosition,0,2000,false,HintManager.UNDER);}  }
class C{  public static String base64encode(byte[] code){  if (null == code)   return null;  if (0 == code.length)   return new String();  int len=code.length;  int rem=len % 3;  byte[] dst=new byte[4 + (((len - 1) / 3) << 2) + (len / 57)];  int column=0;  int spos=0;  int dpos=0;  len-=2;  while (spos < len) {    byte b0=code[spos];    byte b1=code[spos + 1];    byte b2=code[spos + 2];    dst[dpos++]=_base64en[0x3f & (b0 >>> 2)];    dst[dpos++]=_base64en[(0x30 & (b0 << 4)) + (0x0f & (b1 >>> 4))];    dst[dpos++]=_base64en[(0x3c & (b1 << 2)) + (0x03 & (b2 >>> 6))];    dst[dpos++]=_base64en[0x3f & b2];    spos+=3;    column+=3;    if (57 == column) {      dst[dpos++]=10;      column=0;    }  }  if (0 != rem) {    byte b0=code[spos];    dst[dpos++]=_base64en[0x3f & (b0 >>> 2)];    if (1 == rem) {      dst[dpos++]=_base64en[0x30 & (b0 << 4)];      dst[dpos++]=61;    } else {      byte b1=code[spos + 1];      dst[dpos++]=_base64en[(0x30 & (b0 << 4)) + (0x0f & (b1 >>> 4))];      dst[dpos++]=_base64en[0x3c & (b1 << 2)];    }    dst[dpos++]=61;  }  return new String(dst);}  }
class C{  public VNXeCommandJob restoreLunSnap(String snapId,VNXeSnapRestoreParam restoreParam) throws VNXeException {  StringBuilder urlBuilder=new StringBuilder(URL_INSTANCE);  urlBuilder.append(snapId);  urlBuilder.append(URL_RESTORE);  _url=urlBuilder.toString();  return postRequestAsync(restoreParam);}  }
class C{  public void testTwoStepSkipReduceSqlQuery(){  IgniteCache<Integer,Value> cache=grid(0).cache(null);  List<Cache.Entry<Integer,Value>> all=cache.query(new SqlQuery<Integer,Value>(Value.class,"select * from Value").setPageSize(3)).getAll();  assertEquals(KEYS,all.size());  for (  Cache.Entry<Integer,Value> entry : all)   entry.getValue().str="after";  check(cache);}  }
class C{  private XYPlot initializePlot(){  jmxChart=new YIntervalSeriesImproved("jmx value");  YIntervalSeriesCollection yintervalseriescollection=new YIntervalSeriesCollection();  yintervalseriescollection.addSeries(jmxChart);  DeviationRenderer renderer=new DeviationRenderer(true,false);  renderer.setBaseShapesVisible(true);  renderer.setSeriesStroke(0,new BasicStroke(3.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));  renderer.setSeriesFillPaint(0,new Color(255,200,200));  renderer.setSeriesOutlineStroke(0,new BasicStroke(2.0f));  renderer.setSeriesShape(0,new Ellipse2D.Double(-2.5,-2.5,5.0,5.0));  renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,DateFormat.getDateTimeInstance(),NumberFormat.getNumberInstance()));  NumberAxis rangeAxis=plotDataSolver.getAxis();  subplot=new XYPlot(yintervalseriescollection,null,rangeAxis,renderer);  subplot.setAxisOffset(new RectangleInsets(5.0,5.0,5.0,5.0));  subplot.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);  subplot.setRangeCrosshairVisible(true);  return subplot;}  }
class C{  public OneToOneChatMessageDeleteTask(ChatServiceImpl chatService,InstantMessagingService imService,LocalContentResolver contentResolver){  super(contentResolver,MessageData.CONTENT_URI,MessageData.KEY_MESSAGE_ID,MessageData.KEY_CONTACT,SELECTION_ONETOONE_CHATMESSAGES);  mChatService=chatService;  mImService=imService;  setAllAtOnce(true);}  }
class C{  protected void handleError(int ln,String msg){}  }
class C{  public double logPdf(double x){  return logPdf(x,v,alpha,beta,coefficients);}  }
class C{  @action(name=ISpecies.initActionName) public Object _init_(final IScope scope){  return super.init(scope);}  }
class C{  public static DefaultTableModel clearDefaultTable(JTable table){  DefaultTableModel model=(DefaultTableModel)table.getModel();  while (model.getRowCount() > 0)   model.removeRow(0);  return model;}  }
class C{  public static String testConnection(DBInstanceInfo dbinfo,String username,String password,boolean testRWPermission){  String url=dbinfo.getConnectionString();  Connection conn=null;  Statement stmt=null;  ResultSet rs=null;  try {    logger.info("Test connection to (" + dbinfo + "): "+ url);    DriverManager.setLoginTimeout(60);    conn=DriverManager.getConnection(url,username,password);    if (conn != null) {      dbinfo.setConnectionVerified(true);      logger.info("Connection test succeeded to (" + dbinfo + ")");      if (testRWPermission) {        stmt=conn.createStatement();        stmt.execute("create table mtr_test (id int auto_increment, v varchar(30), primary key(id))");        stmt.execute("insert into mtr_test (v) values('123')");        rs=stmt.executeQuery("select v from mtr_test");        String testData=null;        if (rs != null && rs.next())         testData=rs.getString(1);        if (!"123".equals(testData))         return "Failed insert/select test. Expect 123, got " + testData + ".";        rs.close();        rs=null;        stmt.execute("delete from mtr_test where v='123'");        stmt.execute("drop table mtr_test");      }      return null;    } else {      logger.log(Level.SEVERE,"Connection test failed: reason null.");      return "Connection test failed: reason null.";    }  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Exception",ex);    return "Connection test to " + url + " failed: "+ ex.getMessage();  } finally {    DBUtils.close(rs);    DBUtils.close(stmt);    DBUtils.close(conn);  }}  }
class C{  public void finish() throws Exception {}  }
class C{  private int findInCache(SnmpTableHandler handler,String poolName){  if (!(handler instanceof SnmpCachedData)) {    if (handler != null) {      final String err="Bad class for JvmMemPoolTable datas: " + handler.getClass().getName();      log.error("getJvmMemPoolEntry",err);    }    return -1;  }  final SnmpCachedData data=(SnmpCachedData)handler;  final int len=data.datas.length;  for (int i=0; i < data.datas.length; i++) {    final MemoryPoolMXBean pool=(MemoryPoolMXBean)data.datas[i];    if (poolName.equals(pool.getName()))     return i;  }  return -1;}  }
class C{  public static CMenuItem addMenu(ActionListener l,JPopupMenu popupMenu){  CMenuItem mi=new CMenuItem(Msg.getMsg(Env.getCtx(),NAME),s_icon);  mi.setActionCommand(NAME);  mi.addActionListener(l);  popupMenu.add(mi);  return mi;}  }
class C{  public void testFloatSortMissingLast() throws Exception {  checkSortMissingLast("floatdv_missinglast","-1.3","4.2");}  }
class C{  CommandInterface prepareCommand(String sql,int fetchSize){  return session.prepareCommand(sql,fetchSize);}  }
class C{  protected BusinessObjectDataAvailabilityCollectionResponse checkBusinessObjectDataAvailabilityCollectionImpl(BusinessObjectDataAvailabilityCollectionRequest businessObjectDataAvailabilityCollectionRequest){  validateBusinessObjectDataAvailabilityCollectionRequest(businessObjectDataAvailabilityCollectionRequest);  BusinessObjectDataAvailabilityCollectionResponse businessObjectDataAvailabilityCollectionResponse=new BusinessObjectDataAvailabilityCollectionResponse();  List<BusinessObjectDataAvailability> businessObjectDataAvailabilityResponses=new ArrayList<>();  businessObjectDataAvailabilityCollectionResponse.setBusinessObjectDataAvailabilityResponses(businessObjectDataAvailabilityResponses);  boolean isAllDataAvailable=true;  boolean isAllDataNotAvailable=true;  for (  BusinessObjectDataAvailabilityRequest request : businessObjectDataAvailabilityCollectionRequest.getBusinessObjectDataAvailabilityRequests()) {    BusinessObjectDataAvailability businessObjectDataAvailability=checkBusinessObjectDataAvailabilityImpl(request,true);    businessObjectDataAvailabilityResponses.add(businessObjectDataAvailability);    isAllDataAvailable=isAllDataAvailable && businessObjectDataAvailability.getNotAvailableStatuses().isEmpty();    isAllDataNotAvailable=isAllDataNotAvailable && businessObjectDataAvailability.getAvailableStatuses().isEmpty();  }  businessObjectDataAvailabilityCollectionResponse.setIsAllDataAvailable(isAllDataAvailable);  businessObjectDataAvailabilityCollectionResponse.setIsAllDataNotAvailable(isAllDataNotAvailable);  return businessObjectDataAvailabilityCollectionResponse;}  }
class C{  public int execute(String sql,CreateView create,String index) throws SQLException {  String alias=create.getName().toString();  alias=Heading.findOriginal(sql,alias,"\\s+view\\s+","\\s+as\\s+");  QueryBody queryBody=create.getQuery().getQueryBody();  if (!(queryBody instanceof QuerySpecification))   throw new SQLException("Statement does not contain expected query specifiction");  QuerySpecification querySpec=(QuerySpecification)queryBody;  if (!querySpec.getFrom().isPresent())   throw new SQLException("Add atleast one INDEX to the query to create the view from");  QueryState state=new BasicQueryState(sql,new Heading(),props);  List<QuerySource> relations=new RelationParser().process(querySpec.getFrom().get(),null);  String[] indices=new String[relations.size()];  for (int i=0; i < relations.size(); i++)   indices[i]=relations.get(i).getSource();  new SelectParser().process(querySpec.getSelect(),state);  IndicesAliasesResponse response;  if (querySpec.getWhere().isPresent()) {    QueryBuilder query=new WhereParser().process(querySpec.getWhere().get(),state).getQuery();    response=client.admin().indices().prepareAliases().addAlias(indices,alias,query).execute().actionGet();  } else {    response=client.admin().indices().prepareAliases().addAlias(indices,alias).execute().actionGet();  }  if (!response.isAcknowledged())   throw new SQLException("Elasticsearch failed to create the specified alias");  this.statement.getConnection().getTypeMap();  return 0;}  }
class C{  protected Map<Cell,byte[]> transformGetsForTesting(Map<Cell,byte[]> map){  return map;}  }
class C{  @Override public void rejectedExecution(Runnable task,ThreadPoolExecutor executor){  BlockingQueue<Runnable> workQueue=executor.getQueue();  boolean taskSent=false;  while (!taskSent) {    if (executor.isShutdown()) {      throw new RejectedExecutionException("ThreadPoolExecutor has shutdown while attempting to offer a new task.");    }    try {      if (blockingTimeCallback != null) {        if (workQueue.offer(task,maxBlockingTime,maxBlockingTimeUnit)) {          taskSent=true;        } else {          Boolean result;          try {            result=blockingTimeCallback.call();          } catch (          Exception e) {            throw new RejectedExecutionException(e);          }          if (!result) {            throw new RejectedExecutionException("User decided to stop waiting for task insertion");          }        }      } else {        workQueue.put(task);        taskSent=true;      }    } catch (    InterruptedException e) {    }  }}  }
class C{  public void suspendedError(ServiceCoded sc){  if (sc != null) {    setServiceCode(sc.getServiceCode().getCode());    setMessage(sc.getMessage());  }  updateStatus(Status.suspended_error.name());  if (sc instanceof Exception) {    _log.info("Setting operation to suspended with error due to an exception {}",ExceptionUtils.getExceptionMessage((Exception)sc));    _log.info("Caused by: {} ",(Exception)sc);  }}  }
class C{  public void surfaceChanged(){  setPauseTime(1.5f);  mPrevFrameWhenNsec=0;  mIsAnimating=true;}  }
class C{  public void reduceDL(double expFPRate,boolean checkErr){  boolean needUpdate=false;  double[] rulesetStat=new double[6];  for (int j=0; j < m_SimpleStats.size(); j++) {    rulesetStat[0]+=m_SimpleStats.get(j)[0];    rulesetStat[2]+=m_SimpleStats.get(j)[2];    rulesetStat[4]+=m_SimpleStats.get(j)[4];    if (j == m_SimpleStats.size() - 1) {      rulesetStat[1]=m_SimpleStats.get(j)[1];      rulesetStat[3]=m_SimpleStats.get(j)[3];      rulesetStat[5]=m_SimpleStats.get(j)[5];    }  }  for (int k=m_SimpleStats.size() - 1; k >= 0; k--) {    double[] ruleStat=m_SimpleStats.get(k);    double ifDeleted=potential(k,expFPRate,rulesetStat,ruleStat,checkErr);    if (!Double.isNaN(ifDeleted)) {      if (k == (m_SimpleStats.size() - 1)) {        removeLast();      } else {        m_Ruleset.remove(k);        needUpdate=true;      }    }  }  if (needUpdate) {    m_Filtered=null;    m_SimpleStats=null;    countData();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS:    return astStructuralMembers != null && !astStructuralMembers.isEmpty();case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__STRUCTURAL_TYPE:  return structuralType != null;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS:return genStructuralMembers != null && !genStructuralMembers.isEmpty();case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS:return postponedSubstitutions != null && !postponedSubstitutions.isEmpty();case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__DEFINED_TYPING_STRATEGY:return definedTypingStrategy != DEFINED_TYPING_STRATEGY_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @Override public void onReceive(Context context,Intent intent){  if (!intent.getAction().equals(Broadcast.SERVER_RECONNECT + server.getId())) {    return;  }  service.connect(server);}  }
class C{  public Matrix4x4 multiply(Matrix4x4 mat){  return new Matrix4x4(this).multiplySelf(mat);}  }
class C{  public void init() throws ServletException {}  }
class C{  public void shutdownOutput() throws IOException {  if (isClosed())   throw new SocketException("Socket is closed");  if (!isConnected())   throw new SocketException("Socket is not connected");  if (isOutputShutdown())   throw new SocketException("Socket output is already shutdown");  getImpl().shutdownOutput();  shutOut=true;}  }
class C{  public TermCriteria(){  this(0,0,0.0);}  }
class C{  public VEPair(V v,E e){  if (v == null || e == null)   throw new IllegalArgumentException("elements must be non-null");  this.v=v;  this.e=e;}  }
class C{  public String toCumulativeMarginDistributionString() throws Exception {  return m_delegate.toCumulativeMarginDistributionString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.159 -0500",hash_original_method="09284C64390035CEB1B433477B1727B8",hash_generated_method="29439BBC7FF3EEC432E9D8F6CACF936F") public int body() throws IOException {  return sendCommand(NNTPCommand.BODY);}  }
class C{  public static void addCrusherRecipe(ItemStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addCrusherRecipe",ItemStack.class,ItemStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public CCShatteredTiles3D(int range,boolean sz,ccGridSize gridSize,float d){  super(gridSize,d);  once=false;  randrange=range;  shatterZ=sz;}  }
class C{  public void remove(int volId) throws Exception {  for (int i=0; i < _list.size(); i++) {    VolumeImpl volume=getImpl(i);    if (volume.getId() == volId)     _list.remove(i);  }}  }
class C{  public WbXmlAttributeValueDef locateAttributeValue(String value){  WbXmlAttributeValueDef attrVal=new WbXmlAttributeValueDef(value,(byte)0x0,(byte)0x0);  WbXmlAttributeValueDef res=this.attrValuesByValue.ceiling(attrVal);  if (res != null && res.getValue().equals(value)) {    return res;  } else {    return null;  }}  }
class C{  public EmergingEpidemicModel(Parameter growthRateParameter,Parameter generationTimeParameter,Parameter generationShapeParameter,Parameter offspringDispersionParameter,TreeModel treeModel,Type units){  this(EmergingEpidemicModelParser.EMERGING_EPIDEMIC_MODEL,growthRateParameter,generationTimeParameter,generationShapeParameter,offspringDispersionParameter,treeModel,units);}  }
class C{  public void kill(){  killed=true;  if (input != null && input instanceof BufferedInputStream) {    ((BufferedInputStream)input).stop();  }  NetworkManager.getInstance().kill9(this);}  }
class C{  public static Timestamp toTimestamp(Date d){  return new Timestamp(d.getTime());}  }
class C{  public static byte BitsNeeded(int n){  byte ret=1;  if (n-- == 0)   return 0;  while ((n>>=1) != 0)   ret++;  return ret;}  }
class C{  public void deleteRSAInstanceInfo(String tenantName,String siteID) throws Exception {  getService().deleteRSAInstanceInfo(tenantName,siteID,this.getServiceContext());}  }
class C{  void updateVisualPosition(){  VerticalInfo oldInfo=myCaretInfo;  LogicalPosition visUnawarePos=new LogicalPosition(myLogicalCaret.line,myLogicalCaret.column);  setCurrentLogicalCaret(visUnawarePos);  myVisibleCaret=myEditor.logicalToVisualPosition(myLogicalCaret);  updateVisualLineInfo();  myEditor.updateCaretCursor();  requestRepaint(oldInfo);}  }
class C{  static void validate(){  String sql="SELECT AD_Table_ID, TableName FROM AD_Table WHERE IsView='N' ORDER BY TableName";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      validate(rs.getInt(1),rs.getString(2));    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  getDocument().removeUndoableEditListener(undoManager);  s.defaultWriteObject();  getDocument().addUndoableEditListener(undoManager);}  }
class C{  public void testStringValSorted() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new SortedDocValuesField("value",new BytesRef("foo")));  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new SortedDocValuesField("value",new BytesRef("bar")));  doc.add(newStringField("value","bar",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.STRING_VAL));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  assertEquals("bar",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("foo",searcher.doc(td.scoreDocs[1].doc).get("value"));  ir.close();  dir.close();}  }
class C{  @Deprecated public LinkedNotebook createNotebook(Notebook notebook) throws TException, EDAMUserException, EDAMSystemException, EDAMNotFoundException {  Notebook originalNotebook=getAsyncClient().getClient().createNotebook(getAuthenticationToken(),notebook);  SharedNotebook sharedNotebook=originalNotebook.getSharedNotebooks().get(0);  LinkedNotebook linkedNotebook=new LinkedNotebook();  linkedNotebook.setShareKey(sharedNotebook.getShareKey());  linkedNotebook.setShareName(originalNotebook.getName());  linkedNotebook.setUsername(mClientFactory.getBusinessAuthResult().getUser().getUsername());  linkedNotebook.setShardId(mClientFactory.getBusinessAuthResult().getUser().getShardId());  return getAsyncPersonalClient().getClient().createLinkedNotebook(getAsyncPersonalClient().getAuthenticationToken(),linkedNotebook);}  }
class C{  public synchronized void add(Job job){  boolean canRunImmediately=dagManager.addJob(job);  if (canRunImmediately) {    LOG.debug("Job " + job + " is ready to run.");    jobsToRun.add(job);  }  incrementSubmittedJobCount();}  }
class C{  private List<Trip> filterTrips(List<Trip> originalDemand){  List<Trip> modeFilteredTrips=new ArrayList<>();  for (  String mode : modes) {    for (    Trip trip : originalDemand) {      if (mode.equals(trip.mode)) {        modeFilteredTrips.add(trip);      }    }  }  List<Id> agents=getAllAgents(modeFilteredTrips);  log.info("Sample demand...");  long shareToRemove=Math.round(agents.size() * (1 - shareOfOriginalAgentsServedByAV));  for (int i=0; i < shareToRemove; i++) {    agents.remove(random.nextInt(agents.size()));  }  Set<Id> sampledAgents=new HashSet<>();  sampledAgents.addAll(agents);  List<Trip> filteredTrips=new ArrayList<>();  for (  Trip trip : modeFilteredTrips) {    if (sampledAgents.contains(trip.agentId)) {      filteredTrips.add(trip);    }  }  log.info("Sample demand... done.");  return filteredTrips;}  }
class C{  public String generateSourceCode(File inFile,BiConsumer<String,String> callback){  Fingerprint fingerprint;  String name=null;  try {    JAXBContext jcx=getContext();    fingerprint=(Fingerprint)jcx.createUnmarshaller().unmarshal(inFile);    name=fingerprint.getHeader().getName();    putFingerprint(name,fingerprint);    generateSourceCode(name);    Template t=getClassTemplateByName(name);    callback.accept(Template.asJavaIdentifier(name),t.render());    name=Template.asJavaIdentifier(name);  } catch (  JAXBException e) {    e.printStackTrace();  }  return name;}  }
class C{  protected void deleteDevice(Device device){  ArrayList<Entity> emptyToKeep=new ArrayList<Entity>();  for (  Entity entity : device.getEntities()) {    this.removeEntity(entity,device.getEntityClass(),device.getDeviceKey(),emptyToKeep);  }  if (!deviceMap.remove(device.getDeviceKey(),device)) {    if (logger.isDebugEnabled())     logger.debug("device map does not have this device -" + device.toString());  }}  }
class C{  public Component createComponent(){  AttributeSet attr=getElement().getAttributes();  JPanel panel=new JPanel(new BorderLayout());  panel.setBackground(null);  String prompt=(String)attr.getAttribute(HTML.Attribute.PROMPT);  if (prompt == null) {    prompt=UIManager.getString("IsindexView.prompt");  }  JLabel label=new JLabel(prompt);  textField=new JTextField();  textField.addActionListener(this);  panel.add(label,BorderLayout.WEST);  panel.add(textField,BorderLayout.CENTER);  panel.setAlignmentY(1.0f);  panel.setOpaque(false);  return panel;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Override public void endWindow(){  if (!map.isEmpty()) {    for (    Map.Entry<K,HighLow<V>> e : map.entrySet()) {      mergedport.emit(new KeyValPair(e.getKey(),new HighLow(e.getValue().getHigh(),e.getValue().getLow())));    }    map.clear();  }}  }
class C{  protected Query createRangeQuery(final String field,final String low,final String high){  return new TermRangeQuery(field,low,high,true,false);}  }
class C{  public int elementAt(int i){  runTo(i);  return super.elementAt(i);}  }
class C{  public boolean isFatalError(){  return _fatalError != null && _fatalError.equalsIgnoreCase("true");}  }
class C{  private RedirectStream(InputStream inputStream,OutputStream outputStream){  super();  this.inputStream=inputStream;  this.outputStream=outputStream;}  }
class C{  public static boolean isChild(FileObject parent,FileObject child){  if (parent == null || !parent.isFolder() || child == null) {    return false;  }  String childPath=child.getPath();  return isChild(parent,childPath);}  }
class C{  @Override public String toString(){  return objectID + "(" + predecessorID+ ","+ reachability+ ")";}  }
class C{  protected void testSimpleSort(final String fieldname,final Comparable negative,final Comparable positive){  clearIndex();  int numDocsExpected=1;  for (int i=1; i < 4; i++) {    if (random().nextBoolean()) {      assertU(adoc(sdoc("id",i)));      numDocsExpected++;    }  }  assertU(adoc(sdoc("id","0",fieldname,negative,fieldname,positive)));  for (int i=1; i < 4; i++) {    if (random().nextBoolean()) {      assertU(adoc(sdoc("id",-i)));      numDocsExpected++;    }  }  assertU(commit());  assertDocWithValsIsFirst(numDocsExpected,"def(field(" + fieldname + ",min),0) asc");  assertDocWithValsIsLast(numDocsExpected,"def(field(" + fieldname + ",min),0) desc");  assertDocWithValsIsFirst(numDocsExpected,"def(field(" + fieldname + ",max),0) desc");  assertDocWithValsIsLast(numDocsExpected,"def(field(" + fieldname + ",max),0) asc");  assertDocWithValsIsFirst(numDocsExpected,"sum(32,field(" + fieldname + ",max)) desc");  assertDocWithValsIsLast(numDocsExpected,"sum(32,field(" + fieldname + ",max)) asc");  assertDocWithValsIsFirst(numDocsExpected,"sum(32,field(" + fieldname + ",min)) asc");  assertDocWithValsIsLast(numDocsExpected,"sum(32,field(" + fieldname + ",min)) desc");}  }
class C{  @Deprecated public void exit(int code){  System.exit(code);}  }
class C{  public GenericObjectEditorDialog(Dialog owner){  super(owner);}  }
class C{  public static void write(OutputStream stream,Object o) throws Exception {  ObjectOutputStream oos;  if (!(stream instanceof BufferedOutputStream)) {    stream=new BufferedOutputStream(stream);  }  oos=new ObjectOutputStream(stream);  oos.writeObject(o);  oos.flush();  oos.close();}  }
class C{  @Override public void characters(char[] text,int start,int len) throws SAXException {  if (curHandler != null) {    if (unrecognizedElements == 0) {      if (curHandler.buffer == null) {        curHandler.buffer=new StringBuilder();      }      curHandler.buffer.append(text,start,len);    }    if (curHandler.innerXml != null && (curHandler.mixedContent || unrecognizedElements > 0)) {      if (curHandler.fullTextIndex) {        curHandler.fullTextIndexWriter.write(text,start,len);        curHandler.fullTextIndexWriter.write("\n");      }      try {        curHandler.innerXml.characters(new String(text,start,len));      } catch (      IOException e) {        throw new SAXException(e);      }    }  }}  }
class C{  public String loadString(String ref){  return loadString(null,ref);}  }
class C{  public RequestHandle put(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  public static SecretKeys generateKeyFromPassword(String password,byte[] salt) throws GeneralSecurityException {  fixPrng();  KeySpec keySpec=new PBEKeySpec(password.toCharArray(),salt,PBE_ITERATION_COUNT,AES_KEY_LENGTH_BITS + HMAC_KEY_LENGTH_BITS);  SecretKeyFactory keyFactory=SecretKeyFactory.getInstance(PBE_ALGORITHM);  byte[] keyBytes=keyFactory.generateSecret(keySpec).getEncoded();  byte[] confidentialityKeyBytes=copyOfRange(keyBytes,0,AES_KEY_LENGTH_BITS / 8);  byte[] integrityKeyBytes=copyOfRange(keyBytes,AES_KEY_LENGTH_BITS / 8,AES_KEY_LENGTH_BITS / 8 + HMAC_KEY_LENGTH_BITS / 8);  SecretKeySpec confidentialityKey=new SecretKeySpec();  confidentialityKey.generate(confidentialityKeyBytes,CIPHER);  SecretKeySpec integrityKey=new SecretKeySpec();  integrityKey.generate(integrityKeyBytes,HMAC_ALGORITHM);  SecretKeys secretKeys=new SecretKeys();  secretKeys.setConfidentialityKey(confidentialityKey);  secretKeys.setIntegrityKey(integrityKey);  return secretKeys;}  }
class C{  private ClassVertex resolveClassVertex(ClassDescriptor classDescriptor) throws ClassNotFoundException {  ClassVertex typeVertex=optionallyResolveClassVertex(classDescriptor);  if (!typeVertex.isResolved()) {    ClassDescriptor.throwClassNotFoundException(classDescriptor);  }  assert typeVertex.isResolved();  return typeVertex;}  }
class C{  @Override public void onPageSelected(int position){}  }
class C{  public Source<Integer> upTo(final int endExclusive){  return between(startInclusive,endExclusive - 1);}  }
class C{  public th addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void startDrag(DragGestureEvent trigger,Cursor dragCursor,Image dragImage,Point imageOffset,Transferable transferable,DragSourceListener dsl,FlavorMap flavorMap) throws InvalidDnDOperationException {  SunDragSourceContextPeer.setDragDropInProgress(true);  try {    if (flavorMap != null)     this.flavorMap=flavorMap;    DragSourceContextPeer dscp=Toolkit.getDefaultToolkit().createDragSourceContextPeer(trigger);    DragSourceContext dsc=createDragSourceContext(dscp,trigger,dragCursor,dragImage,imageOffset,transferable,dsl);    if (dsc == null) {      throw new InvalidDnDOperationException();    }    dscp.startDrag(dsc,dsc.getCursor(),dragImage,imageOffset);  } catch (  RuntimeException e) {    SunDragSourceContextPeer.setDragDropInProgress(false);    throw e;  }}  }
class C{  private void addSpan(CacheSpan span){  TreeSet<CacheSpan> spansForKey=cachedSpans.get(span.key);  if (spansForKey == null) {    spansForKey=new TreeSet<>();    cachedSpans.put(span.key,spansForKey);  }  spansForKey.add(span);  totalSpace+=span.length;  notifySpanAdded(span);}  }
class C{  public void addHours(int hours){  super.addField(DurationFieldType.hours(),hours);}  }
class C{  public void addLocationItem(String prefix,Properties props){  prefix=PropUtils.getScopedPropertyPrefix(prefix);  String locationName=props.getProperty(prefix + NameProperty);  String latString=props.getProperty(prefix + LatProperty);  String lonString=props.getProperty(prefix + LonProperty);  String scaleString=props.getProperty(prefix + ScaleProperty);  String projID=props.getProperty(prefix + ProjectionTypeProperty);  if (Debug.debugging("goto")) {    Debug.output("GoToMenu: adding view - " + locationName + ", "+ latString+ ", "+ lonString+ ", "+ scaleString+ ", "+ projID);  }  try {    float lat=new Float(latString).floatValue();    float lon=new Float(lonString).floatValue();    float scale=new Float(scaleString).floatValue();    GoToButton gtb=new GoToButton(locationName,lat,lon,scale,projID);    ensureCustomViews().add(gtb);    add(gtb);  } catch (  NumberFormatException nfe) {    return;  }}  }
class C{  private void endTask(){synchronized (lock) {    int numRunning=--runningTasks;    if (numRunning == 0) {      lock.notifyAll();    }  }}  }
class C{  protected static void initializeImageRegistry(){  imageRegistry=TypeScriptUIPlugin.getDefault().getImageRegistry();  imageDescriptors=new HashMap<String,ImageDescriptor>();  registerImage(IMG_LOGO,URL_OBJ + IMG_LOGO + ".png");  registerImage(IMG_TYPESCRIPT_RESOURCES,URL_OBJ + IMG_TYPESCRIPT_RESOURCES + ".gif");  registerImage(IMG_TS,URL_OBJ + IMG_TS + ".png");  registerImage(IMG_JSX,URL_OBJ + IMG_JSX + ".png");  registerImage(IMG_GLOB_PATTERN,URL_OBJ + IMG_GLOB_PATTERN + ".gif");  registerImage(IMG_BUILD,URL_OBJ + IMG_BUILD + ".gif");  registerImage(IMG_STOP_ENABLED,URL_ELCL + "launch_stop.gif");  registerImage(IMG_STOP_DISABLED,URL_DLCL + "launch_stop.gif");  registerImage(IMG_COLLAPSE_ALL_ENABLED,URL_ELCL + "collapseall.gif");  registerImage(IMG_COLLAPSE_ALL_DISABLED,URL_DLCL + "collapseall.gif");  registerImage(IMG_SYNCED_ENABLED,URL_ELCL + "synced.gif");  registerImage(IMG_SYNCED_DISABLED,URL_DLCL + "synced.gif");  registerImage(IMG_VIEW_MENU_ENABLED,URL_ELCL + "view_menu.png");  registerImage(IMG_VIEW_MENU_DISABLED,URL_DLCL + "view_menu.png");  registerImage(DESC_OVR_LIBRARY,URL_OVR + "library_ovr.gif");}  }
class C{  public boolean match(MethodInvocation node,Object other){  if (!(other instanceof MethodInvocation)) {    return false;  }  MethodInvocation o=(MethodInvocation)other;  if (node.getAST().apiLevel >= AST.JLS3) {    if (!safeSubtreeListMatch(node.typeArguments(),o.typeArguments())) {      return false;    }  }  return (safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeMatch(node.getName(),o.getName()) && safeSubtreeListMatch(node.arguments(),o.arguments()));}  }
class C{  public AttachPermission(String name,String actions){  super(name);  if (!name.equals("attachVirtualMachine") && !name.equals("createAttachProvider")) {    throw new IllegalArgumentException("name: " + name);  }  if (actions != null && actions.length() > 0) {    throw new IllegalArgumentException("actions: " + actions);  }}  }
class C{  public static void unRegisterClientApp(Context context) throws AppCatalogException {  String serverIP=Preference.getString(context,Constants.PreferenceFlag.IP);  if (serverIP != null && !serverIP.isEmpty()) {    String applicationName=Preference.getString(context,Constants.CLIENT_NAME);    String consumerKey=Preference.getString(context,Constants.CLIENT_ID);    String userId=Preference.getString(context,Constants.USERNAME);    if (applicationName != null && !applicationName.isEmpty() && consumerKey != null && !consumerKey.isEmpty() && userId != null && !userId.isEmpty()) {      UnregisterProfile profile=new UnregisterProfile();      profile.setApplicationName(applicationName);      profile.setConsumerKey(consumerKey);      profile.setUserId(userId);      ServerConfig utils=new ServerConfig();      utils.setServerIP(serverIP);      DynamicClientManager dynamicClientManager=new DynamicClientManager();      boolean isUnregistered=dynamicClientManager.unregisterClient(profile,utils,context);      if (!isUnregistered) {        Log.e(TAG,"Error occurred while removing the OAuth client app");      }    } else {      Log.e(TAG,"Client credential is not available");    }  } else {    Log.e(TAG,"There is no valid IP to contact the server");  }}  }
class C{  private void takePicture(){  lockFocus();}  }
class C{  protected void doNewState(int oldState,int newState){  if (newState == ON) {    OutputBits.instance().setOutputBit(mBit,false);  } else   if (newState == OFF) {    OutputBits.instance().setOutputBit(mBit,true);  } else {    log.warn("illegal state requested for Light: " + getSystemName());  }}  }
class C{  boolean isDisposed(){  return disposed || isTimedOut();}  }
class C{  public static MobileDoc createPage(Properties ctx,HttpServletRequest request,int AD_Record_ID,int AD_Table_ID){  MobileDoc doc=null;  String TableName=null;  int AD_Window_ID=0;  int PO_Window_ID=0;  String sql="SELECT TableName, AD_Window_ID, PO_Window_ID FROM AD_Table WHERE AD_Table_ID=?";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      TableName=rs.getString(1);      AD_Window_ID=rs.getInt(2);      PO_Window_ID=rs.getInt(3);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (TableName == null || AD_Window_ID == 0) {    doc=MobileDoc.createPopup("No Context");    return doc;  }  boolean isSOTrx=true;  if (PO_Window_ID != 0) {    String whereClause=TableName + "_ID=" + AD_Record_ID;    isSOTrx=DB.isSOTrx(TableName,whereClause);    if (!isSOTrx)     AD_Window_ID=PO_Window_ID;  }  WWindowStatus ws=WWindowStatus.get(request);  HttpSession sess=request.getSession();  MobileSessionCtx wsc=MobileSessionCtx.get(request);  if (ws != null) {    int WindowNo=ws.mWindow.getWindowNo();    log.fine("Disposing - WindowNo=" + WindowNo + ", ID="+ ws.mWindow.getAD_Window_ID());    ws.mWindow.dispose();    Env.clearWinContext(wsc.ctx,WindowNo);  }  GridWindowVO mWindowVO=GridWindowVO.create(ctx,s_WindowNo++,AD_Window_ID,0);  if (mWindowVO == null) {    String msg=Msg.translate(ctx,"AD_Window_ID") + " " + Msg.getMsg(ctx,"NotFound")+ ", ID="+ AD_Window_ID+ "/"+ 0;    doc=MobileDoc.createPopup(msg);    return doc;  }  ws=new WWindowStatus(mWindowVO);  sess.setAttribute(WWindowStatus.NAME,ws);  ws.mWindow.initTab(ws.curTab.getTabNo());  ws.curTab.setQuery(MQuery.getEqualQuery(TableName + "_ID",AD_Record_ID));  ws.curTab.query(false);  return doc;}  }
class C{  public void rollbackNothingMethod(String stepId){  WorkflowStepCompleter.stepSucceded(stepId);}  }
class C{  public static Map<String,Object> testService(DispatchContext dctx,Map<String,?> context){  Map<String,Object> response=ServiceUtil.returnSuccess();  if (context.size() > 0) {    for (    Map.Entry<String,?> entry : context.entrySet()) {      Object cKey=entry.getKey();      Object value=entry.getValue();      System.out.println("---- SVC-CONTEXT: " + cKey + " => "+ value);    }  }  if (!context.containsKey("message")) {    response.put("resp","no message found");  } else {    System.out.println("-----SERVICE TEST----- : " + (String)context.get("message"));    response.put("resp","service done");  }  System.out.println("----- SVC: " + dctx.getName() + " -----");  return response;}  }
class C{  static void checkInternalName(final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (name.charAt(0) == '[') {    checkDesc(name,false);  } else {    checkInternalName(name,0,-1,msg);  }}  }
class C{  public static Map<String,Object> returnErrorService(DispatchContext dctx,Map<String,?> context){  Locale locale=(Locale)context.get("locale");  return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonServiceReturnError",locale));}  }
class C{  public KMZDocumentBuilder(OutputStream stream) throws XMLStreamException, IOException {  if (stream == null) {    String message=Logging.getMessage("nullValue.OutputStreamIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.zipStream=new ZipOutputStream(stream);  this.startDocument();}  }
class C{  default Eval<T> toEvalNow(){  return Eval.now(get());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getOverscanOffsetX());}  }
class C{  public long toLong(){  return 0L;}  }
class C{  @Override public void search(BayesNet bayesNet,Instances instances) throws Exception {  int nOrder[]=new int[instances.numAttributes()];  nOrder[0]=instances.classIndex();  int nAttribute=0;  for (int iOrder=1; iOrder < instances.numAttributes(); iOrder++) {    if (nAttribute == instances.classIndex()) {      nAttribute++;    }    nOrder[iOrder]=nAttribute++;  }  if (m_bRandomOrder) {    Random random=new Random();    int iClass;    if (getInitAsNaiveBayes()) {      iClass=0;    } else {      iClass=-1;    }    for (int iOrder=0; iOrder < instances.numAttributes(); iOrder++) {      int iOrder2=Math.abs(random.nextInt()) % instances.numAttributes();      if (iOrder != iClass && iOrder2 != iClass) {        int nTmp=nOrder[iOrder];        nOrder[iOrder]=nOrder[iOrder2];        nOrder[iOrder2]=nTmp;      }    }  }  double[] fBaseScores=new double[instances.numAttributes()];  for (int iOrder=0; iOrder < instances.numAttributes(); iOrder++) {    int iAttribute=nOrder[iOrder];    fBaseScores[iAttribute]=calcNodeScore(iAttribute);  }  for (int iOrder=1; iOrder < instances.numAttributes(); iOrder++) {    int iAttribute=nOrder[iOrder];    double fBestScore=fBaseScores[iAttribute];    boolean bProgress=(bayesNet.getParentSet(iAttribute).getNrOfParents() < getMaxNrOfParents());    while (bProgress) {      int nBestAttribute=-1;      for (int iOrder2=0; iOrder2 < iOrder; iOrder2++) {        int iAttribute2=nOrder[iOrder2];        double fScore=calcScoreWithExtraParent(iAttribute,iAttribute2);        if (fScore > fBestScore) {          fBestScore=fScore;          nBestAttribute=iAttribute2;        }      }      if (nBestAttribute != -1) {        bayesNet.getParentSet(iAttribute).addParent(nBestAttribute,instances);        fBaseScores[iAttribute]=fBestScore;        bProgress=(bayesNet.getParentSet(iAttribute).getNrOfParents() < getMaxNrOfParents());      } else {        bProgress=false;      }    }  }}  }
class C{  public WarAndDeployerCapabilityContainerTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.912 -0500",hash_original_method="AA6367B478F9A852148448AFECAB6EF6",hash_generated_method="5B76E0C94B2CE0EDF22378E833924B15") @Deprecated public static void resetGlobalExternalFreedCount(){}  }
class C{  private void validateJdbcExecutionRequest(JdbcExecutionRequest jdbcExecutionRequest){  Assert.notNull(jdbcExecutionRequest,"JDBC execution request is required");  validateJdbcConnection(jdbcExecutionRequest.getConnection());  validateJdbcStatements(jdbcExecutionRequest.getStatements());  validateS3PropertiesLocation(jdbcExecutionRequest.getS3PropertiesLocation());}  }
class C{  public NTRUSigner(NTRUSigningParameters params){  this.params=params;}  }
class C{  public void shutDown(){  if (!pool.isShutdown()) {    pool.shutdown();    try {      if (!pool.awaitTermination(60,TimeUnit.SECONDS))       pool.shutdownNow();      if (!pool.awaitTermination(60,TimeUnit.SECONDS))       System.err.println("Pool did not terminate");    } catch (    InterruptedException ie) {      pool.shutdownNow();      Thread.currentThread().interrupt();    }  } else {    NotesLog.e("had shut down");  }}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  State currentState=applyPatch(startState,patchState);  validateState(currentState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(currentState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping patch handling (disabled)");    } else     if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {      processGetContainerService(currentState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public void loadAvailablePlugins(File pluginDir){  Logger logger=Logger.getLogger(getClass());  removeAllPlugins();  logger.info("(Re-)laoding available Plugins");  LOG.info("Searching for Plugins in Directory: " + pluginDir.getAbsolutePath());  loadAvailableJars(pluginDir);  ServiceLoader<AbstractPlugin> loader=ServiceLoader.load(AbstractPlugin.class);  int anz=0;  int suc=0;  Iterator<AbstractPlugin> it=loader.iterator();  while (it.hasNext()) {    ++anz;    Object o=null;    try {      o=it.next();    } catch (    ServiceConfigurationError sce) {      LOG.error(sce.getMessage());      continue;    }    AbstractPlugin plugin=(AbstractPlugin)o;    try {      plugin.initializePlugin();    } catch (    UnsupportedOperationException e) {      logger.warn("Could not load Plugin '" + plugin.getClass().getName() + "' / "+ e.getMessage());      continue;    }    addPlugin(plugin);    logger.trace("Loaded Plugin '" + plugin.getName() + "'");    ++suc;  }  String loaded=String.format("Successfuly loaded %d of %d plugins",suc,anz);  if (suc < anz) {    LOG.warn(loaded);  } else {    LOG.info(loaded);  }  notifyContainerChanged();}  }
class C{  @SuppressLint("NewApi") public View onCreateView(View parent,String name,Context context,AttributeSet attrs){  if (Build.VERSION.SDK_INT >= 11)   return super.onCreateView(parent,name,context,attrs);  return null;}  }
class C{  @Override public void reveal(Path path){  noCatch(null);}  }
class C{  public boolean betterThan(Individual first,Individual second,int subpopulation,EvolutionState state,int thread){  return first.fitness.betterThan(second.fitness);}  }
class C{  void error(String msg,Object[] args) throws TransformerException {  String fmsg=XSLMessages.createXPATHMessage(msg,args);  ErrorListener ehandler=this.getErrorListener();  TransformerException te=new TransformerException(fmsg,m_sourceLocator);  if (null != ehandler) {    ehandler.fatalError(te);  } else {    throw te;  }}  }
class C{  public void execute(IServerPushCallback callback){  boolean inUIThread=Executions.getCurrent() != null;  boolean desktopActivated=false;  try {    if (!inUIThread) {      if (Executions.activate(desktop,10 * 60 * 1000)) {        desktopActivated=true;      } else {        throw new DesktopUnavailableException("Timeout activating desktop.");      }    }    callback.updateUI();  } catch (  DesktopUnavailableException de) {    throw de;  }catch (  Exception e) {    throw new AdempiereException("Failed to update client in server push worker thread.",e);  } finally {    if (!inUIThread && desktopActivated) {      Executions.deactivate(desktop);    }  }}  }
class C{  public Matrix4 rotate(float axisX,float axisY,float axisZ,float degrees){  if (degrees == 0)   return this;  quat.setFromAxis(axisX,axisY,axisZ,degrees);  return rotate(quat);}  }
class C{  public void removeComment(InstagramAPIResponseCallback<IGPostResponse> callback,String commentId,String mediaId){  Call<IGAPIResponse> call=instagramAPIService.removeComment(commentId,mediaId,getSession().getAccessToken());  call.enqueue(new InstagramAPIResponseManager<>(callback,new TypeToken<IGPostResponse>(){  }.getType()));}  }
class C{  public TBase<TBase<?,?>,TFieldIdEnum> newArgs(){  if (isAsync()) {    return asyncFunc().getEmptyArgsInstance();  } else {    return syncFunc().getEmptyArgsInstance();  }}  }
class C{  @Override public Set<java.util.Map.Entry<String,String>> entrySet(){  Set<java.util.Map.Entry<String,String>> result=new LinkedHashSet<Map.Entry<String,String>>();  for (  Namespace nextNamespace : namespaces) {    AbstractMap.SimpleImmutableEntry<String,String> nextEntry=new SimpleImmutableEntry<String,String>(nextNamespace.getPrefix(),nextNamespace.getName());    result.add(nextEntry);  }  return Collections.unmodifiableSet(result);}  }
class C{  public void testEquality(){  m_Filter=getFilter("A");  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());  boolean equal=true;  for (int i=0; i < result.numInstances(); i++) {    if (m_Instances.instance(i) instanceof SparseInstance)     continue;    if (!Utils.eq(m_Instances.instance(i).value(m_AttIndex),result.instance(i).value(m_AttIndex))) {      equal=false;      break;    }  }  if (!equal)   fail("Filter modifies attribute values)!");}  }
class C{  public RoundBorder rectangle(boolean rectangle){  this.rectangle=rectangle;  return this;}  }
class C{  public boolean processIt(String processAction){  m_processMsg=null;  DocumentEngine engine=new DocumentEngine(this,getDocStatus());  return engine.processIt(processAction,getDocAction());}  }
class C{  @Override public String toString(){  StringBuffer buf=new StringBuffer();switch (type) {case HOMING:    buf.append("Homing");  break;case ECM:buf.append("ECM");break;case HAYWIRE:buf.append("Haywire");break;case NEMESIS:buf.append("Nemesis");break;}buf.append(" iNarc pod from Team #").append(team);return buf.toString();}  }
class C{  public MuxServer(InputStream is,OutputStream os,boolean isClient){  init(is,os,isClient);}  }
class C{  protected boolean loadPropertiesFromResource(Properties props,String resourceName){  InputStream propsIn=getClass().getResourceAsStream(resourceName);  if (propsIn == null) {    if (Debug.debugging("imagemaster")) {      Debug.error("Unable to locate resources: " + resourceName);    }    return false;  } else {    try {      props.load(propsIn);      return true;    } catch (    java.io.IOException e) {      Debug.error("ImageMaster: Caught IOException loading resources: " + resourceName);      return false;    }  }}  }
class C{  @Override @Entrypoint public void run(){  launched=true;  if (dbg)   VM.sysWriteln("MainThread.run() starting ");  ClassLoader cl=RVMClassLoader.getApplicationClassLoader();  setContextClassLoader(cl);  runAgents(cl);  if (dbg)   VM.sysWrite("[MainThread.run() loading class to run... ");  RVMClass cls=null;  try {    Atom mainAtom=Atom.findOrCreateUnicodeAtom(args[0]);    TypeReference mainClass=TypeReference.findOrCreate(cl,mainAtom.descriptorFromClassName());    cls=mainClass.resolve().asClass();    cls.resolve();    cls.instantiate();    cls.initialize();  } catch (  NoClassDefFoundError e) {    if (dbg)     VM.sysWrite("failed.]");    VM.sysWrite(e + "\n");    return;  }  if (dbg)   VM.sysWriteln("loaded.]");  mainMethod=cls.findMainMethod();  if (mainMethod == null) {    VM.sysWrite(cls + " doesn't have a \"public static void main(String[])\" method to execute\n");    return;  }  if (dbg)   VM.sysWrite("[MainThread.run() making arg list... ");  String[] mainArgs=new String[args.length - 1];  for (int i=0, n=mainArgs.length; i < n; ++i) {    mainArgs[i]=args[i + 1];  }  if (dbg)   VM.sysWriteln("made.]");  if (dbg)   VM.sysWrite("[MainThread.run() compiling main(String[])... ");  mainMethod.compile();  if (dbg)   VM.sysWriteln("compiled.]");  Callbacks.notifyStartup();  if (dbg)   VM.sysWriteln("[MainThread.run() invoking \"main\" method... ");  Reflection.invoke(mainMethod,null,null,new Object[]{mainArgs},true);  if (dbg)   VM.sysWriteln("  MainThread.run(): \"main\" method completed.]");}  }
class C{  private void newline(){  print(System.lineSeparator());}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.TCLASS__SUPER_CLASS_REF:    return basicSetSuperClassRef(null,msgs);case TypesPackage.TCLASS__IMPLEMENTED_INTERFACE_REFS:  return ((InternalEList<?>)getImplementedInterfaceRefs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void addAll(IVector v){  expandFor(size + v.size - 1,0);  System.arraycopy(v.vector,0,vector,size - v.size,v.size);}  }
class C{  public Jimenez(){  super(2,2,4);}  }
class C{  public String generateFileCount(){  int filesCount=0;  int foldersCount=0;  for (  OCFile f : mFiles) {    if (f.isFolder()) {      foldersCount++;    } else {      filesCount++;    }  }  StringBuilder nResourcesString=new StringBuilder();  if (foldersCount > 0) {    nResourcesString.append(foldersCount).append(" ").append(mContext.getResources().getQuantityString(R.plurals.folder_resources,foldersCount,foldersCount));  }  if (filesCount > 0 && foldersCount > 0) {    nResourcesString.append(", ");  }  if (filesCount > 0) {    nResourcesString.append(filesCount).append(" ").append(mContext.getResources().getQuantityString(R.plurals.file_resources,filesCount,filesCount));  }  return nResourcesString.toString();}  }
class C{  public static boolean goToUpdatePage(Context context){  final Uri playStoreUri=Uri.parse("market://details?id=" + context.getPackageName());  FreshAirLog.i("Attempting to open Play Store update page at URI: " + playStoreUri.toString());  final Intent playStoreIntent=new Intent(Intent.ACTION_VIEW,playStoreUri);  final PackageManager packageManager=context.getPackageManager();  for (  ResolveInfo resolveInfo : packageManager.queryIntentActivities(playStoreIntent,0)) {    final ActivityInfo resolveActivity=resolveInfo.activityInfo;    final String resolvePackageName=resolveActivity.packageName;    if (resolvePackageName.equals("com.android.vending")) {      FreshAirLog.i("Opening Play Store update page...");      playStoreIntent.setComponent(new ComponentName(resolvePackageName,resolveActivity.name));      context.startActivity(playStoreIntent);      return true;    }  }  FreshAirLog.e("Failed to find the Play Store as a candidate for the resolution of update URI: " + playStoreUri.toString());  return false;}  }
class C{  public final <T extends Event>void removeEventHandler(EventType<T> eventType,EventHandler<? super T> eventHandler){  eventHandlers.removeEventHandler(eventType,eventHandler);}  }
class C{  private static void computeSupport(float[] plane,float[][] points,float mindist){  supportingPoints=new LinkedList<>();  for (  float[] point : points) {    float distanceToPlane=point[0] * plane[0] + point[1] * plane[1] + point[2] * plane[2] - plane[3];    if (FastMath.abs(distanceToPlane) <= mindist) {      supportingPoints.addLast(point);    }  }}  }
class C{  public void java_net_InetAddressImpl_getLocalHostName(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  @SuppressWarnings("unchecked") private void fetchNext(){  while (pos != null) {    if (pos.index < pos.page.getKeyCount()) {      int index=pos.index++;      current=(K)pos.page.getKey(index);      currentValue=(V)pos.page.getValue(index);      return;    }    pos=pos.parent;    if (pos == null) {      break;    }    if (pos.index < map.getChildPageCount(pos.page)) {      min(pos.page.getChildPage(pos.index++),null);    }  }  current=null;}  }
class C{  public Vector2i mul(Vector2i v,Vector2i dest){  dest.x=x * v.x;  dest.y=y * v.y;  return dest;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getLessonEntityDao() : null;}  }
class C{  public long[] assignCanopies(Instance inst) throws Exception {  if (m_missingValuesReplacer != null) {    m_missingValuesReplacer.input(inst);    inst=m_missingValuesReplacer.output();  }  int numLongs=m_canopies.size() / 64 + 1;  long[] assigned=new long[numLongs];  double minDist=Double.MAX_VALUE;  double bitsSet=0;  int index=-1;  for (int i=0; i < m_canopies.numInstances(); i++) {    double dist=m_distanceFunction.distance(inst,m_canopies.instance(i));    if (dist < minDist) {      minDist=dist;      index=i;    }    if (dist < m_t1) {      updateCanopyAssignment(assigned,i);      bitsSet++;    }  }  if (bitsSet == 0) {    updateCanopyAssignment(assigned,index);  }  return assigned;}  }
class C{  public void print(PrintStream out) throws IOException, SignatureException {  if (encoded == null)   throw new SignatureException("Cert request was not signed");  byte[] CRLF=new byte[]{'\r','\n'};  out.println("-----BEGIN NEW CERTIFICATE REQUEST-----");  out.println(Base64.getMimeEncoder(64,CRLF).encodeToString(encoded));  out.println("-----END NEW CERTIFICATE REQUEST-----");}  }
class C{  public void init(boolean encrypting,CipherParameters params){  if (params instanceof KeyParameter) {    _encrypting=encrypting;    _workingKey=((KeyParameter)params).getKey();    setKey(_workingKey);    return;  }  throw new IllegalArgumentException("Invalid parameter passed to " + getAlgorithmName() + " init - "+ params.getClass().getName());}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  int docContext=dtm.getDocumentRoot(context);  XObject arg=(XObject)this.getArg0().execute(xctxt);  String base="";  Expression arg1Expr=this.getArg1();  if (null != arg1Expr) {    XObject arg2=arg1Expr.execute(xctxt);    if (XObject.CLASS_NODESET == arg2.getType()) {      int baseNode=arg2.iter().nextNode();      if (baseNode == DTM.NULL) {        warn(xctxt,XSLTErrorResources.WG_EMPTY_SECOND_ARG,null);        XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());        return nodes;      } else {        DTM baseDTM=xctxt.getDTM(baseNode);        base=baseDTM.getDocumentBaseURI();      }    } else {      arg2.iter();    }  } else {    assertion(null != xctxt.getNamespaceContext(),"Namespace context can not be null!");    base=xctxt.getNamespaceContext().getBaseIdentifier();  }  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());  NodeSetDTM mnl=nodes.mutableNodeset();  DTMIterator iterator=(XObject.CLASS_NODESET == arg.getType()) ? arg.iter() : null;  int pos=DTM.NULL;  while ((null == iterator) || (DTM.NULL != (pos=iterator.nextNode()))) {    XMLString ref=(null != iterator) ? xctxt.getDTM(pos).getStringValue(pos) : arg.xstr();    if (null == arg1Expr && DTM.NULL != pos) {      DTM baseDTM=xctxt.getDTM(pos);      base=baseDTM.getDocumentBaseURI();    }    if (null == ref)     continue;    if (DTM.NULL == docContext) {      error(xctxt,XSLTErrorResources.ER_NO_CONTEXT_OWNERDOC,null);    }    int indexOfColon=ref.indexOf(':');    int indexOfSlash=ref.indexOf('/');    if ((indexOfColon != -1) && (indexOfSlash != -1) && (indexOfColon < indexOfSlash)) {      base=null;    }    int newDoc=getDoc(xctxt,context,ref.toString(),base);    if (DTM.NULL != newDoc) {      if (!mnl.contains(newDoc)) {        mnl.addElement(newDoc);      }    }    if (null == iterator || newDoc == DTM.NULL)     break;  }  return nodes;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static void sink(Comparable[] pq,int k,int n){  while (2 * k <= n) {    int j=2 * k;    if (j < n && less(pq,j,j + 1))     j++;    if (!less(pq,k,j))     break;    exch(pq,k,j);    k=j;  }}  }
class C{  public void clear(int capacity){  _data=new float[capacity];  _pos=0;}  }
class C{  public PersistentHttpRequestRetryHandler(int retryCount,int retryDelayMs,int timeOutMs,boolean requestSentRetryEnabled){  this.retryCount=retryCount;  this.retryDelayMs=retryDelayMs;  this.timeOutMs=timeOutMs;  this.requestSentRetryEnabled=requestSentRetryEnabled;}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  private int percolateUp(int cur,T o){  int i=cur;  while ((i > TOP) && (comp.compare(heap.elementAt(parent(i)),o) > 0)) {    T parentElt=heap.elementAt(parent(i));    heap.setElementAt(parentElt,i);    object_indices.put(parentElt,new Integer(i));    i=parent(i);  }  object_indices.put(o,new Integer(i));  heap.setElementAt(o,i);  return i;}  }
class C{  public IndTestCramerT(CorrelationMatrix covMatrix,double alpha){  this.covMatrix=covMatrix;  this.variables=Collections.unmodifiableList(covMatrix.getVariables());  setAlpha(alpha);}  }
class C{  void addSubqueryTable(String alias,Table t){  tables.put(alias,t);}  }
class C{  public AbMenuItem(){  super();}  }
class C{  public void testParseProperty(){  String toBeParsed="com.ibm.ssl.rootCertValidDays:1234|" + "   com.ibm.websphere.security.krb.canonical_host:false";  List<List<String>> parsedProperty=ComplexPropertyUtils.parseProperty(toBeParsed);  assertEquals(2,parsedProperty.size());  assertEquals(2,parsedProperty.get(0).size());  assertEquals(2,parsedProperty.get(1).size());  assertEquals("com.ibm.ssl.rootCertValidDays",parsedProperty.get(0).get(0));  assertEquals("1234",parsedProperty.get(0).get(1));  assertEquals("com.ibm.websphere.security.krb.canonical_host",parsedProperty.get(1).get(0));  assertEquals("false",parsedProperty.get(1).get(1));}  }
class C{  protected void paintRectangle(Graphics g,Point pt1,Point pt2){  if (pt1 != null && pt2 != null) {    int width=Math.abs(pt2.x - pt1.x);    int height=Math.abs(pt2.y - pt1.y);    if (width == 0)     width++;    if (height == 0)     height++;    Rectangle2D rect1=new Rectangle2D.Double(pt1.x - width,pt1.y - height,width * 2,height * 2);    Rectangle2D rect2=new Rectangle2D.Double(pt1.x - 1,pt1.y - 1,3,3);    if (theMap != null) {      rectAttributes.render((Graphics2D)g,theMap.getNonRotatedShape(rect1));      rectAttributes.render((Graphics2D)g,theMap.getNonRotatedShape(rect2));    }  }}  }
class C{  @Override protected void putAttributes(AttributeGenerator generator){  generator.put(METHODTYPE,methodType.toString().toLowerCase());  generator.put(INUSE,inUse);  generator.put(FILECONTENT,fileContent);  generator.setContent(value);}  }
class C{  public void resetDebugger(){  DeleteAllBreakpoints();  RefreshDebugger(true);}  }
class C{  public int indexOf(Node elem,int index){  runTo(-1);  if (null == m_map)   return -1;  for (int i=index; i < m_firstFree; i++) {    Node node=m_map[i];    if ((null != node) && node.equals(elem))     return i;  }  return -1;}  }
class C{  protected View createRow(){  return new Row(getElement());}  }
class C{  protected int doOpcode(int pos,byte[] code) throws BadBytecode {  try {    int op=code[pos] & 0xff;    if (op < 96)     if (op < 54)     return doOpcode0_53(pos,code,op); else     return doOpcode54_95(pos,code,op); else     if (op < 148)     return doOpcode96_147(pos,code,op); else     return doOpcode148_201(pos,code,op);  } catch (  ArrayIndexOutOfBoundsException e) {    throw new BadBytecode("inconsistent stack height " + e.getMessage(),e);  }}  }
class C{  public boolean isSelected(){  for (  JRadioButton button : buttonMap.values()) {    if (button.isSelected()) {      return true;    }  }  return false;}  }
class C{  public void clear(){  count=0;  indices=new HashMap<String,Integer>();}  }
class C{  public static void decrementOutput(ISideConfiguration config,TransmissionType type,int side){  int max=config.getConfig().getOutputs(type).size() - 1;  int current=config.getConfig().getOutputs(type).indexOf(config.getConfig().getOutputs(type).get(config.getConfig().getConfig(type)[side]));  if (current > 0) {    config.getConfig().getConfig(type)[side]=(byte)(current - 1);  } else   if (current == 0) {    config.getConfig().getConfig(type)[side]=(byte)max;  }  TileEntity tile=(TileEntity)config;  Coord4D coord=Coord4D.get(tile).getFromSide(ForgeDirection.getOrientation(MekanismUtils.getBaseOrientation(side,config.getOrientation())));  tile.markDirty();}  }
class C{  private void handleCommand(Intent intent){  if (ACTION_FOREGROUND.equals(intent.getAction())) {    if (foreground) {      return;    }    foreground=true;    Intent disconnect=new Intent("disconnect_all");    PendingIntent pendingIntentDisconnect=PendingIntent.getBroadcast(this,0,disconnect,PendingIntent.FLAG_CANCEL_CURRENT);    NotificationCompat.Builder builder=new NotificationCompat.Builder(this);    builder.setContentText(getText(R.string.notification_running));    builder.setSmallIcon(R.drawable.ic_stat_hermes2);    builder.setWhen(System.currentTimeMillis());    builder.addAction(R.drawable.ic_action_ic_close_24px,"DISCONNECT ALL",pendingIntentDisconnect);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {      builder.setColor(Color.parseColor("#0097A7"));    }    Intent notifyIntent=new Intent(this,MainActivity.class);    notifyIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    PendingIntent contentIntent=PendingIntent.getActivity(this,0,notifyIntent,0);    builder.setContentIntent(contentIntent).setWhen(System.currentTimeMillis()).setContentTitle(getText(R.string.app_name)).setContentText(getText(R.string.notification_not_connected));    Notification notification=builder.build();    startForegroundCompat(FOREGROUND_NOTIFICATION,notification);  } else   if (ACTION_BACKGROUND.equals(intent.getAction()) && !foreground) {    stopForegroundCompat(FOREGROUND_NOTIFICATION);  } else   if (ACTION_ACK_NEW_MENTIONS.equals(intent.getAction())) {    ackNewMentions(intent.getIntExtra(EXTRA_ACK_SERVERID,-1),intent.getStringExtra(EXTRA_ACK_CONVTITLE));  }}  }
class C{  private Set<LockRefreshToken> refreshExternalAndCommitLocks(@Nullable LockRefreshToken commitLocksToken){  ImmutableSet<LockRefreshToken> toRefresh;  if (commitLocksToken == null) {    toRefresh=externalLocksTokens;  } else {    toRefresh=ImmutableSet.<LockRefreshToken>builder().addAll(externalLocksTokens).add(commitLocksToken).build();  }  if (toRefresh.isEmpty()) {    return ImmutableSet.of();  }  return Sets.difference(toRefresh,lockService.refreshLockRefreshTokens(toRefresh)).immutableCopy();}  }
class C{  DirectiveList(byte[] directives){  m_curPos=0;  m_state=STATE_LOOKING_FOR_FIRST_DIRECTIVE;  m_directiveList=new ArrayList(10);  m_scanStart=0;  m_errorPos=-1;  try {    m_directives=new String(directives,"UTF-8");  } catch (  UnsupportedEncodingException e) {    m_state=STATE_NO_UTF8_SUPPORT;  }}  }
class C{  protected boolean[] datasetIntegrity(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing){  print("classifier doesn't alter original datasets");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=20;  boolean[] result=new boolean[2];  Instances train=null;  Instances test=null;  Classifier classifier=null;  Evaluation evaluation=null;  boolean built=false;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    test=makeTestDataset(24,numTest,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);      addMissing(test,Math.min(missingLevel,50),predictorMissing,classMissing);    }    classifier=AbstractClassifier.makeCopies(getClassifier(),1)[0];    evaluation=new Evaluation(train);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    Instances trainCopy=new Instances(train);    Instances testCopy=new Instances(test);    classifier.buildClassifier(trainCopy);    compareDatasets(train,trainCopy);    built=true;    testWRTZeroR(classifier,evaluation,trainCopy,testCopy);    compareDatasets(test,testCopy);    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during");      if (built) {        print(" testing");      } else {        print(" training");      }      println(": " + ex.getMessage() + "\n");      println("Here are the datasets:\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");      println("=== Test Dataset ===\n" + test.toString() + "\n\n");    }  }  return result;}  }
class C{  public InjectedInitialization(Problem problem,int populationSize,List<Solution> injectedSolutions){  super(problem,populationSize);  this.injectedSolutions=new ArrayList<Solution>(injectedSolutions);}  }
class C{  public QueryAutoStopWordAnalyzer(Analyzer delegate,IndexReader indexReader,int maxDocFreq) throws IOException {  this(delegate,indexReader,MultiFields.getIndexedFields(indexReader),maxDocFreq);}  }
class C{  public void onFailure(DiscoveryNode node,Throwable t){  boolean found=pendingNodes.remove(node);  assert found : "node [" + node + "] already responded or failed";  latch.countDown();}  }
class C{  public boolean isSingleCookieRequestHeader(){  return this.singleCookieRequestHeader;}  }
class C{  public boolean isFillPath(){  return this.fillPath;}  }
class C{  private void markAsAsked(String permission){  sharedPreferences.edit().putBoolean(permission,false).apply();}  }
class C{  static <T>Class<T> create(RVMType type){  Class<T> c=new Class<T>(type);  return c;}  }
class C{  @Override protected void paintText(Graphics tempG,int tabPlacement,Font font,FontMetrics metrics,int tabIndex,String title,Rectangle textRect,boolean isSelected){  Graphics2D g=(Graphics2D)tempG;  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  if (isSelected && tabPlacement == TOP) {    g.setColor(Color.BLACK);  } else {    g.setColor(Color.BLACK);  }  g.drawString(title,textRect.x,textRect.y + metrics.getAscent());}  }
class C{  public void solve(double[] bb) throws Exception {  weka.core.matrix.Matrix x=m_Matrix.solve(new weka.core.matrix.Matrix(bb,bb.length));  int nr=x.getRowDimension();  for (int i=0; i < nr; i++) {    bb[i]=x.get(i,0);  }}  }
class C{  public byte[] execute(int mode,byte[] AAD,byte[] inputText,AlgorithmParameters params) throws Exception {  Cipher cipher=createCipher(mode,params);  List<byte[]> outputTexts=new ArrayList<>();  cipher.updateAAD(AAD);  byte[] output=cipher.doFinal(inputText);  combination_1(outputTexts,mode,AAD,inputText,params);  combination_2(outputTexts,mode,AAD,inputText,params);  combination_3(outputTexts,mode,AAD,inputText,params);  combination_4(outputTexts,mode,AAD,inputText,params);  combination_5(outputTexts,mode,AAD,inputText,params);  combination_6(outputTexts,mode,AAD,inputText,params);  combination_7(outputTexts,mode,AAD,inputText,params);  combination_8(outputTexts,mode,AAD,inputText,params);  combination_9(outputTexts,mode,AAD,inputText,params);  combination_10(outputTexts,mode,AAD,inputText,params);  combination_11(outputTexts,mode,AAD,inputText,params);  combination_12(outputTexts,mode,AAD,inputText,params);  combination_13(outputTexts,mode,AAD,inputText,params);  combination_14(outputTexts,mode,AAD,inputText,params);  combination_15(outputTexts,mode,AAD,inputText,params);  combination_16(outputTexts,mode,AAD,inputText,params);  for (int k=0; k < outputTexts.size(); k++) {    if (!Arrays.equals(output,outputTexts.get(k))) {      throw new RuntimeException("Combination #" + k + " failed");    }  }  return output;}  }
class C{  public String toString(){  return "SearchPanel=" + getSource() + ", "+ m_Parameters;}  }
class C{  private void subscribeTopics(String token) throws IOException {  GcmPubSub pubSub=GcmPubSub.getInstance(this);  for (  String topic : TOPICS) {    pubSub.subscribe(token,"/topics/" + topic,null);  }}  }
class C{  public void configure(){  TamsTrafficController tc=new TamsTrafficController();  this.getSystemConnectionMemo().setTamsTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  tc.connectPort(this);  this.getSystemConnectionMemo().configureManagers();}  }
class C{  private boolean isCopyOnItself(String src,String dest){  return dest.equals(src) || dest.startsWith(src + File.separator);}  }
class C{  public void checkJvmMemPoolThreshold(Long x) throws SnmpStatusException {  if (!pool.isUsageThresholdSupported())   throw new SnmpStatusException(SnmpDefinitions.snmpRspInconsistentValue);  final long val=x.longValue();  if (val < 0)   throw new SnmpStatusException(SnmpDefinitions.snmpRspWrongValue);}  }
class C{  public LoadMetadataDetails[] readLoadMetadata(String cubeFolderPath){  Gson gsonObjectToRead=new Gson();  DataInputStream dataInputStream=null;  BufferedReader buffReader=null;  InputStreamReader inStream=null;  String metadataFileName=cubeFolderPath + CarbonCommonConstants.FILE_SEPARATOR + CarbonCommonConstants.LOADMETADATA_FILENAME;  LoadMetadataDetails[] listOfLoadFolderDetailsArray;  AtomicFileOperations fileOperation=new AtomicFileOperationsImpl(metadataFileName,FileFactory.getFileType(metadataFileName));  try {    if (!FileFactory.isFileExist(metadataFileName,FileFactory.getFileType(metadataFileName))) {      return new LoadMetadataDetails[0];    }    dataInputStream=fileOperation.openForRead();    inStream=new InputStreamReader(dataInputStream,CarbonCommonConstants.CARBON_DEFAULT_STREAM_ENCODEFORMAT);    buffReader=new BufferedReader(inStream);    listOfLoadFolderDetailsArray=gsonObjectToRead.fromJson(buffReader,LoadMetadataDetails[].class);  } catch (  IOException e) {    return new LoadMetadataDetails[0];  } finally {    closeStreams(buffReader,inStream,dataInputStream);  }  return listOfLoadFolderDetailsArray;}  }
class C{  protected void writeFlot(final Writer w,final IEventReportingService eventReportingService) throws IOException {  writeResource(w,"flot-start.txt");  writeEvents(w,eventReportingService);  writeResource(w,"flot-end.txt");}  }
class C{  void popNamespaceSupport(){  m_nsSupportStack.pop();}  }
class C{  protected boolean isBetterOrEqual(Chromosome chromosome1,Chromosome chromosome2){  if (maximize) {    return chromosome1.compareTo(chromosome2) >= 0;  } else {    return chromosome1.compareTo(chromosome2) <= 0;  }}  }
class C{  @Override protected void doInitContents(){  List<GefaehrdungsUmsetzung> arrListGefaehrdungsUmsetzungen=getRiskAnalysisWizard().getNotOKGefaehrdungsUmsetzungen();  IGefaehrdungsBaumElement baum=new GefaehrdungsBaumRoot(arrListGefaehrdungsUmsetzungen);  viewerScenario.setLabelProvider(new GefaehrdungTreeViewerLabelProvider());  viewerScenario.setContentProvider(new GefaehrdungTreeViewerContentProvider());  viewerScenario.setInput(baum);  viewerScenario.expandAll();  ArrayList<MassnahmenUmsetzung> arrListMassnahmenUmsetzungen=(ArrayList<MassnahmenUmsetzung>)getRiskAnalysisWizard().getAllMassnahmenUmsetzungen();  viewer.setLabelProvider(new MassnahmeTableViewerLabelProvider());  viewer.setContentProvider(new ArrayContentProvider());  viewer.setInput(arrListMassnahmenUmsetzungen);  viewer.setSorter(new MassnahmenSorter());  packAllMassnahmeColumns();  getRiskAnalysisWizard().setCanFinish(true);}  }
class C{  public boolean removeLabel(final String label){  if (!labels.contains(label))   return false;  labels.remove(label);  return true;}  }
class C{  public void succeed(){  future.set(tx);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN}) @Path("") public ExecutionWindowRestRep createExecutionWindow(ExecutionWindowCreateParam createParam){  StorageOSUser user=getUserFromContext();  verifyAuthorizedInTenantOrg(createParam.getTenant(),user);  validateParam(createParam,null,user.getTenantId());  ExecutionWindow executionWindow=createNewObject(createParam);  executionWindowManager.createExecutionWindow(executionWindow);  auditOpSuccess(OperationTypeEnum.CREATE_EXECUTION_WINDOW,executionWindow.auditParameters());  return map(executionWindow);}  }
class C{  public void testMultitouchEvents() throws InterruptedException {  generateRecordedPinchTouchEvents();  waitForBridgeAndUIIdle();  List<String> calls=mRecordingModule.getCalls();  int moveWithBothPointersEventIndex=-1;  int startEventIndex=-1;  int startExtraPointerEventIndex=-1;  int endEventIndex=-1;  int endExtraPointerEventIndex=-1;  for (int i=0; i < calls.size(); i++) {    String call=calls.get(i);    if (call.equals("start;ExtraPointer")) {      assertEquals(-1,startExtraPointerEventIndex);      startExtraPointerEventIndex=i;    } else     if (call.equals("end;ExtraPointer")) {      assertEquals(-1,endExtraPointerEventIndex);      endExtraPointerEventIndex=i;    } else     if (call.equals("start;1")) {      assertEquals(-1,startEventIndex);      startEventIndex=i;    } else     if (call.equals("end;0")) {      assertEquals(-1,endEventIndex);      endEventIndex=i;    } else     if (call.equals("move;2")) {      moveWithBothPointersEventIndex=i;    }  }  assertEquals(0,startEventIndex);  assertTrue(-1 != startExtraPointerEventIndex);  assertTrue(-1 != moveWithBothPointersEventIndex);  assertTrue(-1 != endExtraPointerEventIndex);  assertTrue(startExtraPointerEventIndex < moveWithBothPointersEventIndex);  assertTrue(endExtraPointerEventIndex > moveWithBothPointersEventIndex);  assertEquals(calls.size() - 1,endEventIndex);}  }
class C{  public static String toUnixNewline(String input){  return input.replace("\r\n","\n");}  }
class C{  public static synchronized BufferedImage loadBufferedImage(String path,int imageType){  File file=new File(path);  BufferedImage image=null;  try {    URL url=file.toURI().toURL();    image=loadBufferedImage(url,imageType);  } catch (  MalformedURLException e) {    log.severe("Path: " + path + " - "+ e.getMessage());  }  return image;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (baseFeatureID) {case RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER:    return RegularExpressionPackage.HEX_ESCAPE_SEQUENCE__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {  SCHEMES.get(oprot.getScheme()).getScheme().write(oprot,this);}  }
class C{  public void onCancelBrokerData(Tradestrategy tradestrategy){  if (m_historyDataRequests.containsKey(tradestrategy.getId())) {    if (m_client.isConnected())     m_client.cancelHistoricalData(tradestrategy.getId());synchronized (m_historyDataRequests) {      m_historyDataRequests.remove(tradestrategy.getId());      m_historyDataRequests.notify();    }  }}  }
class C{  public void push(final Type value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {switch (value.getSort()) {case Type.BOOLEAN:      mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Boolean","TYPE",CLDESC);    break;case Type.CHAR:  mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Character","TYPE",CLDESC);break;case Type.BYTE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Byte","TYPE",CLDESC);break;case Type.SHORT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Short","TYPE",CLDESC);break;case Type.INT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Integer","TYPE",CLDESC);break;case Type.FLOAT:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Float","TYPE",CLDESC);break;case Type.LONG:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Long","TYPE",CLDESC);break;case Type.DOUBLE:mv.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Double","TYPE",CLDESC);break;default :mv.visitLdcInsn(value);}}}  }
class C{  public void parse(){  try {    if (cancelled)     return;    while (true) {      if (marble.isEmpty()) {synchronized (parseLatch) {          if (parseLatch.getCount() == 0)           parseLatch=new CountDownLatch(1);          parseLatch.await();        }        parseLatch=new CountDownLatch(1);      }      char c=marble.poll();switch (c) {case '|':        s.onComplete();      System.out.println("on complete sent");    break;case '#':  s.onError(new Throwable());break;default :if (numSent >= numRequested) {synchronized (sendLatch) {  if (sendLatch.getCount() == 0)   sendLatch=new CountDownLatch(1);  sendLatch.await();}sendLatch=new CountDownLatch(1);}if (argMap != null) {Map<String,String> tempMap=argMap.get(c + "");if (tempMap == null) {s.onNext(new PayloadImpl(c + "",c + ""));break;}List<String> key=new ArrayList<>(tempMap.keySet());List<String> value=new ArrayList<>(tempMap.values());s.onNext(new PayloadImpl(key.get(0),value.get(0)));ConsoleUtils.info("DATA SENT " + key.get(0) + ", "+ value.get(0));} else {this.s.onNext(new PayloadImpl(c + "",c + ""));ConsoleUtils.info("DATA SENT " + c + ", "+ c);}numSent++;break;}}} catch (InterruptedException e) {ConsoleUtils.error("interrupted");}}  }
class C{  static String validateDomainNameWithIdnTables(InternetDomainName domainName) throws InvalidIdnDomainLabelException {  Optional<String> idnTableName=findValidIdnTableForTld(domainName.parts().get(0),domainName.parent().toString());  if (!idnTableName.isPresent()) {    throw new InvalidIdnDomainLabelException();  }  return idnTableName.get();}  }
class C{  public int hashCode(){  return hash;}  }
class C{  protected void scrollToCurrentTrack(){  ContentState currentPlayState=playerController.getPlayingState();  if (currentPlayState != null && currentPlayState.isCurrentObject(mPlaylist.uri)) {    TrackSimple currentTrack=currentPlayState.getCurrentTrack();    int playingTrackPosition=0;    for (    TrackSimple track : mPlaylistTracks) {      if (currentTrack != null && track.id.equals(currentTrack.id)) {        playingTrackPosition=mPlaylistTracks.indexOf(track);        break;      }    }    setSelectedPosition(playingTrackPosition);  }}  }
class C{  public void putBooleanArray(String key,boolean[] value){  map.put(key,value);}  }
class C{  public synchronized Map<String,Map<String,TungstenProperties>> loadClusterConfiguration(ResourceType resourceType) throws ConfigurationException {  if (getClusterHome() == null) {    throw new ConfigurationException("No cluster.home found from which to configure cluster resources.");  }  Map<String,Map<String,TungstenProperties>> clusterConfigurations=new HashMap<String,Map<String,TungstenProperties>>();  File cluster=getDir(getClusterConfigRootDirName(getClusterHome()));  for (  File foundFile : cluster.listFiles()) {    if (foundFile.isDirectory()) {      Map<String,TungstenProperties> clusterConfig=loadConfiguration(foundFile.getName(),resourceType);      clusterConfigurations.put(foundFile.getName(),clusterConfig);    }  }  return clusterConfigurations;}  }
class C{  public void uninstallUI(JComponent c){  super.uninstallUI(c);  searchField.removePropertyChangeListener(getHandler());  searchField.getDocument().removeDocumentListener(getHandler());  popupButton().removeActionListener(getHandler());  searchField.setLayout(null);  searchField.removeAll();  searchField=null;}  }
class C{  public static boolean renameFile(String filePath,String oldFilename,String newFilename){  if ((filePath == null) || filePath.isEmpty() || (oldFilename == null)|| oldFilename.isEmpty()|| (newFilename == null)|| newFilename.isEmpty()) {    return false;  }  File oldFile=new File(filePath + File.separator + oldFilename);  File newFile=new File(filePath + File.separator + newFilename);  boolean isSuccessfulRename;  try {    isSuccessfulRename=oldFile.renameTo(newFile);  } catch (  Exception e) {    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    isSuccessfulRename=false;  }  return isSuccessfulRename;}  }
class C{  protected void exportBoundaryAsLinearRing(XMLStreamWriter xmlWriter,Iterable<? extends LatLon> boundary) throws XMLStreamException {  xmlWriter.writeStartElement("LinearRing");  xmlWriter.writeStartElement("coordinates");  for (  LatLon location : boundary) {    if (location instanceof Position) {      xmlWriter.writeCharacters(String.format(Locale.US,"%f,%f,%f ",location.getLongitude().getDegrees(),location.getLatitude().getDegrees(),((Position)location).getAltitude()));    } else {      xmlWriter.writeCharacters(String.format(Locale.US,"%f,%f ",location.getLongitude().getDegrees(),location.getLatitude().getDegrees()));    }  }  xmlWriter.writeEndElement();  xmlWriter.writeEndElement();}  }
class C{  public void println(String str){synchronized (ToolPrintStream.class) {    String thisMessage=ToolIO.nextMessage + str;    ToolIO.nextMessage="";    if (ToolIO.messages.length == ToolIO.length) {      String[] newMessages=new String[2 * ToolIO.messages.length];      System.arraycopy(ToolIO.messages,0,newMessages,0,ToolIO.messages.length);      ToolIO.messages=newMessages;    }    ToolIO.messages[ToolIO.length]=thisMessage;    ToolIO.length++;    ToolPrintStream.class.notifyAll();  }}  }
class C{  public static LinkageTripletTable allocate(int size){  if (VM.VerifyAssertions && VM.runningVM)   VM._assert(VM.NOT_REACHED);  return new LinkageTripletTable(size);}  }
class C{  protected void initialize(){  super.initialize();  m_LogFile=getLogFile();  try {    if ((m_LogFile != null) && m_LogFile.exists())     m_LogFile.delete();  } catch (  Exception e) {    e.printStackTrace();  }  m_LineFeed=System.getProperty("line.separator");}  }
class C{  public void test_deleteFromSolutions_02() throws Exception {  if (!isSolutionSetUpdateEnabled()) {    return;  }  loadDataset(packagePath + "dataset-01.trig");{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("INSERT INTO %namedSet1\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE {\n");    sb.append("  ?x rdf:type foaf:Person .\n");    sb.append("  ?x rdfs:label ?name .\n");    sb.append("}\n");    con.prepareUpdate(QueryLanguage.SPARQL,sb.toString()).execute();  }{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("DELETE FROM %namedSet1\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE { \n");    sb.append("  ?x rdfs:label ?name .\n");    sb.append("  FILTER (?x = <http://www.bigdata.com/Mike> ) .\n");    sb.append("}\n");    con.prepareUpdate(QueryLanguage.SPARQL,sb.toString()).execute();  }{    final StringBuilder sb=new StringBuilder();    sb.append("PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n");    sb.append("PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n");    sb.append("PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n");    sb.append("SELECT ?x ?name\n");    sb.append("WHERE {\n");    sb.append("  INCLUDE %namedSet1 .\n");    sb.append("}\n");    final TupleQueryResult ret=con.prepareTupleQuery(QueryLanguage.SPARQL,sb.toString()).evaluate();    final TupleQueryResult expected=readExpectedTupleQueryResult(packagePath + "test_deleteFromSolutions_02.srx");    compareTupleQueryResults(ret,expected);  }}  }
class C{  @Transactional(readOnly=true) public T read(PK id){  String queryString=String.format("select o from %s o where o.id = :id",unqualifiedModelClassName);  Query query=this.entityManager.createQuery(queryString);  query.setParameter("id",id);  @SuppressWarnings("unchecked") List<T> results=query.getResultList();  if (results.size() == 0) {    return null;  } else   return results.get(0);}  }
class C{  @SuppressLint("Override") public static String formatNumber(String phoneNumber,String defaultCountryIso){  if (phoneNumber.startsWith("#") || phoneNumber.startsWith("*")) {    return phoneNumber;  }  PhoneNumberUtil util=PhoneNumberUtil.getInstance();  String result=null;  try {    Phonenumber.PhoneNumber pn=util.parseAndKeepRawInput(phoneNumber,defaultCountryIso);    result=util.formatInOriginalFormat(pn,defaultCountryIso);  } catch (  NumberParseException e) {  }  return result;}  }
class C{  public void write(ObjectOutput out) throws IOException {  if (csf == null) {    out.writeByte(FORMAT_HOST_PORT);    out.writeUTF(host);    out.writeInt(port);  } else {    out.writeByte(FORMAT_HOST_PORT_FACTORY);    out.writeUTF(host);    out.writeInt(port);    out.writeObject(csf);  }}  }
class C{  @Override public void showSuggestions(List<String> suggestions){  if (suggestions.size() > 0) {    ArrayAdapter<String> suggestionsAdapter=new ArrayAdapter<>(this,android.R.layout.simple_dropdown_item_1line,suggestions);    searchEditText.setAdapter(suggestionsAdapter);    searchEditText.showDropDown();  } else {    searchEditText.dismissDropDown();  }}  }
class C{  @Override public void run(){  amIActive=true;  String pointerHeader, loadingHeader, efficiencyHeader, absorptionHeader, outputHeader;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double numInNeighbours;  boolean flag=false;  double gridRes;  double flowDir=0;  double efficiencyMultiplier=1d;  double eff, absorp;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  pointerHeader=args[0];  loadingHeader=args[1];  efficiencyHeader=args[2];  absorptionHeader=args[3];  outputHeader=args[4];  if (pointerHeader.isEmpty() || outputHeader.isEmpty() || loadingHeader.isEmpty()|| efficiencyHeader.isEmpty()|| absorptionHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    gridRes=pntr.getCellSizeX();    WhiteboxRaster loading=new WhiteboxRaster(loadingHeader,"r");    if (loading.getNumberRows() != rows || loading.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataLoading=loading.getNoDataValue();    WhiteboxRaster efficiency=new WhiteboxRaster(efficiencyHeader,"r");    if (efficiency.getNumberRows() != rows || efficiency.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataEfficiency=efficiency.getNoDataValue();    if (efficiency.getMaximumValue() > 1) {      efficiencyMultiplier=0.01;    }    WhiteboxRaster absorption=new WhiteboxRaster(absorptionHeader,"r");    if (absorption.getNumberRows() != rows || absorption.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataAbsorption=absorption.getNoDataValue();    double outputNoData=-32768.0;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    WhiteboxRaster tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,outputNoData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData && loading.getValue(row,col) != noDataLoading && efficiency.getValue(row,col) != noDataEfficiency && absorption.getValue(row,col) != noDataAbsorption) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i] && loading.getValue(row + dY[i],col + dX[i]) != noDataLoading && efficiency.getValue(row + dY[i],col + dX[i]) != noDataEfficiency && absorption.getValue(row + dY[i],col + dX[i]) != noDataAbsorption) {              z++;            }          }          tmpGrid.setValue(row,col,z);          output.setValue(row,col,loading.getValue(row,col));        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    loading.close();    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          tmpGrid.setValue(row,col,-1);          x=col;          y=row;          do {            z=output.getValue(y,x);            eff=efficiency.getValue(y,x) * efficiencyMultiplier;            absorp=absorption.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              i=(int)(Math.log(flowDir) / LnOf2);              x+=dX[i];              y+=dY[i];              z2=output.getValue(y,x);              z=((z - absorp) * eff);              if (z < 0) {                z=0;              }              output.setValue(y,x,z2 + z);              numInNeighbours=tmpGrid.getValue(y,x) - 1;              tmpGrid.setValue(y,x,numInNeighbours);              if (numInNeighbours == 0) {                tmpGrid.setValue(y,x,-1);                flag=true;              } else {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    efficiency.close();    absorption.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static final boolean isDebug(){  return mIsdebug;}  }
class C{  private int indexOfSearchQuery(String displayName){  if (!TextUtils.isEmpty(mSearchTerm)) {    return displayName.toLowerCase(Locale.getDefault()).indexOf(mSearchTerm.toLowerCase(Locale.getDefault()));  }  return -1;}  }
class C{  public void write(SWFTagTypes tagwriter) throws IOException {  definedSymbols.clear();  maxId=1;  tagwriter.header(version,-1,width * SWFConstants.TWIPS,height * SWFConstants.TWIPS,frameRate,-1);  if (backColor == null) {    backColor=new Color(255,255,255);  }  tagwriter.tagSetBackgroundColor(backColor);  if (isProtected) {    tagwriter.tagProtect(null);  }  if (importLibraries != null && !importLibraries.isEmpty()) {    for (Iterator keys=importLibraries.keySet().iterator(); keys.hasNext(); ) {      String libName=(String)keys.next();      List imports=(List)importLibraries.get(libName);      String[] names=new String[imports.size()];      int[] ids=new int[imports.size()];      int i=0;      for (Iterator it=imports.iterator(); it.hasNext(); ) {        ImportedSymbol imp=(ImportedSymbol)it.next();        names[i]=imp.getName();        ids[i]=imp.define(this,tagwriter,tagwriter);        i++;      }      tagwriter.tagImport(libName,names,ids);    }  }  if (exportedSymbols != null && !exportedSymbols.isEmpty()) {    String[] names=new String[exportedSymbols.size()];    int[] ids=new int[exportedSymbols.size()];    int i=0;    for (Iterator it=exportedSymbols.iterator(); it.hasNext(); ) {      ExportedSymbol exp=(ExportedSymbol)it.next();      names[i]=exp.getExportName();      ids[i]=exp.getSymbol().define(this,tagwriter,tagwriter);      i++;    }    tagwriter.tagExport(names,ids);  }  int lastFrame=0;  for (Iterator iter=frames.values().iterator(); iter.hasNext(); ) {    Frame frame=(Frame)iter.next();    int number=frame.getFrameNumber();    while (number > lastFrame + 1) {      tagwriter.tagShowFrame();      lastFrame++;    }    frame.write(this,tagwriter,tagwriter);    lastFrame=number;  }  tagwriter.tagEnd();}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  protected void consumeMessage(Message message,List<Message> messageList){  if (verbose) {    System.out.println("Received message: " + message);  }  messageList.add(message);  if (messageList.size() >= data.length) {synchronized (lock) {      lock.notifyAll();    }  }}  }
class C{  public Double2D(final java.awt.geom.Point2D p){  x=p.getX();  y=p.getY();}  }
class C{  public UnexpectedResultException(Object result){  CompilerDirectives.transferToInterpreterAndInvalidate();  this.result=result;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)newValue);  return;case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__OPERATOR:setOperator((RelationalOperator)newValue);return;case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static double sampleKurtosisStandardError(int size){  int n=size;  return Math.sqrt(24.0 * n * (n - 1)* (n - 1) / ((n - 3) * (n - 2) * (n + 3)* (n + 5)));}  }
class C{  public void note(Element e,String msg){  messager.printMessage(Diagnostic.Kind.NOTE,msg,e);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  private void doAddOrUpdate(HttpServletRequest request,ExamDistributionPrefsForm frm) throws Exception {  String distPrefId=frm.getDistPrefId();  if (distPrefId != null && !distPrefId.isEmpty()) {    sessionContext.checkPermission(distPrefId,"DistributionPref",Right.ExaminationDistributionPreferenceEdit);  } else {    sessionContext.checkPermission(Right.ExaminationDistributionPreferenceAdd);  }  DistributionPref dp=null;  DistributionPrefDAO dpDao=new DistributionPrefDAO();  Transaction tx=null;  org.hibernate.Session hibSession=dpDao.getSession();  HashSet relatedExams=new HashSet();  try {    tx=hibSession.beginTransaction();    if (distPrefId != null && !distPrefId.isEmpty()) {      dp=dpDao.get(Long.valueOf(distPrefId),hibSession);      Set s=dp.getDistributionObjects();      for (Iterator i=s.iterator(); i.hasNext(); ) {        DistributionObject dObj=(DistributionObject)i.next();        PreferenceGroup pg=dObj.getPrefGroup();        relatedExams.add(pg);        pg.getDistributionObjects().remove(dObj);        hibSession.saveOrUpdate(pg);      }      s.clear();      dp.setDistributionObjects(s);    } else     dp=new DistributionPref();    dp.setDistributionType(new DistributionTypeDAO().get(new Long(frm.getDistType()),hibSession));    dp.setGrouping(-1);    dp.setPrefLevel(PreferenceLevel.getPreferenceLevel(Integer.parseInt(frm.getPrefLevel())));    dp.setOwner(SessionDAO.getInstance().get(sessionContext.getUser().getCurrentAcademicSessionId()));    HashSet addedExams=new HashSet();    int idx=0;    for (Iterator i=frm.getExam().iterator(); i.hasNext(); ) {      Object o=i.next();      Long examId=(o instanceof Long ? (Long)o : Long.valueOf(o.toString()));      if (examId < 0)       continue;      Exam exam=new ExamDAO().get(examId,hibSession);      if (exam == null)       continue;      if (!addedExams.add(exam))       continue;      relatedExams.add(exam);      DistributionObject dObj=new DistributionObject();      dObj.setPrefGroup(exam);      dObj.setDistributionPref(dp);      dObj.setSequenceNumber(new Integer(++idx));      exam.getDistributionObjects().add(dObj);      dp.addTodistributionObjects(dObj);    }    hibSession.saveOrUpdate(dp);    for (Iterator i=relatedExams.iterator(); i.hasNext(); ) {      Exam exam=(Exam)i.next();      ChangeLog.addChange(hibSession,sessionContext,exam,ChangeLog.Source.DIST_PREF_EDIT,(distPrefId != null && distPrefId.trim().length() > 0 ? ChangeLog.Operation.UPDATE : ChangeLog.Operation.CREATE),exam.firstSubjectArea(),exam.firstDepartment());    }    tx.commit();    hibSession.flush();    hibSession.refresh(dp.getOwner());    frm.setDistPrefId(dp.getUniqueId().toString());  } catch (  Exception e) {    if (tx != null)     tx.rollback();    hibSession.clear();    throw e;  }}  }
class C{  public void render(final Spatial toDrawB,final int clear){  try {    if (offscreenDrawable == null) {      initPbuffer();    }    context.makeCurrent();    ContextManager.switchContext(context);    if (clear != 0) {      final GL gl=GLContext.getCurrentGL();      gl.glDisable(GL.GL_SCISSOR_TEST);      renderer.clearBuffers(clear);    }    camera.update();    camera.apply(renderer);    doDraw(toDrawB);    renderer.flushFrame(false);    saveRGBABuffer();  } catch (  final Exception e) {    e.printStackTrace();  }}  }
class C{  public void rewind(){  cList.rewind();}  }
class C{  public Map<String,Object> prepare(final Precorrelation<HttpRequest> precorrelation) throws IOException {  final String correlationId=precorrelation.getId();  final HttpRequest request=precorrelation.getRequest();  final Map<String,Object> content=new LinkedHashMap<>();  content.put("origin",translate(request.getOrigin()));  content.put("type","request");  content.put("correlation",correlationId);  content.put("protocol",request.getProtocolVersion());  content.put("remote",request.getRemote());  content.put("method",request.getMethod());  content.put("uri",request.getRequestUri());  addUnless(content,"headers",request.getHeaders(),null);  addBody(request,content);  return content;}  }
class C{  private void checkDestination(Destination destination) throws InvalidDestinationException {  if (destination != null && !(destination instanceof ActiveMQDestination)) {    throw new InvalidDestinationException("Foreign destination:" + destination);  }  if (destination != null && defaultDestination != null) {    throw new UnsupportedOperationException("Cannot specify destination if producer has a default destination");  }  if (destination == null) {    throw ActiveMQJMSClientBundle.BUNDLE.nullTopic();  }}  }
class C{  @SuppressWarnings("deprecation") public String toString(){  int year=super.getYear() + 1900;  int month=super.getMonth() + 1;  int day=super.getDate();  int hour=super.getHours();  int minute=super.getMinutes();  int second=super.getSeconds();  String yearString;  String monthString;  String dayString;  String hourString;  String minuteString;  String secondString;  String nanosString;  String zeros="000000000";  String yearZeros="0000";  StringBuffer timestampBuf;  if (year < 1000) {    yearString="" + year;    yearString=yearZeros.substring(0,(4 - yearString.length())) + yearString;  } else {    yearString="" + year;  }  if (month < 10) {    monthString="0" + month;  } else {    monthString=Integer.toString(month);  }  if (day < 10) {    dayString="0" + day;  } else {    dayString=Integer.toString(day);  }  if (hour < 10) {    hourString="0" + hour;  } else {    hourString=Integer.toString(hour);  }  if (minute < 10) {    minuteString="0" + minute;  } else {    minuteString=Integer.toString(minute);  }  if (second < 10) {    secondString="0" + second;  } else {    secondString=Integer.toString(second);  }  if (nanos == 0) {    nanosString="0";  } else {    nanosString=Integer.toString(nanos);    nanosString=zeros.substring(0,(9 - nanosString.length())) + nanosString;    char[] nanosChar=new char[nanosString.length()];    nanosString.getChars(0,nanosString.length(),nanosChar,0);    int truncIndex=8;    while (nanosChar[truncIndex] == '0') {      truncIndex--;    }    nanosString=new String(nanosChar,0,truncIndex + 1);  }  timestampBuf=new StringBuffer(20 + nanosString.length());  timestampBuf.append(yearString);  timestampBuf.append("-");  timestampBuf.append(monthString);  timestampBuf.append("-");  timestampBuf.append(dayString);  timestampBuf.append(" ");  timestampBuf.append(hourString);  timestampBuf.append(":");  timestampBuf.append(minuteString);  timestampBuf.append(":");  timestampBuf.append(secondString);  timestampBuf.append(".");  timestampBuf.append(nanosString);  return (timestampBuf.toString());}  }
class C{  public static void main(String[] args){  System.out.printf("TFile Dumper (TFile %s, BCFile %s)\n",DTFile.API_VERSION.toString(),DTBCFile.API_VERSION.toString());  if (args.length == 0) {    System.out.println("Usage: java ... com.datatorrent.contrib.hdht.tfile.withcache.TFile tfile-path [tfile-path ...]");    System.exit(0);  }  Configuration conf=new Configuration();  for (  String file : args) {    System.out.println("===" + file + "===");    try {      TFileDumper.dumpInfo(file,System.out,conf);    } catch (    IOException e) {      e.printStackTrace(System.err);    }  }}  }
class C{  public String toString(){  return _prefix != null ? (_prefix + ":" + _localName) : (_namespaceURI != null ? ("{" + _namespaceURI + "}"+ _localName) : _localName);}  }
class C{  protected void sequence_RegularExpressionBody(ISerializationContext context,RegularExpressionBody semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,RegularExpressionPackage.Literals.REGULAR_EXPRESSION_BODY__PATTERN) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,RegularExpressionPackage.Literals.REGULAR_EXPRESSION_BODY__PATTERN));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getRegularExpressionBodyAccess().getPatternDisjunctionParserRuleCall_0(),semanticObject.getPattern());  feeder.finish();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] parameters=getParameter();  for (  ProcessInfoParameter para : parameters) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("IsImportOnlyNoErrors"))     m_IsImportOnlyNoErrors="Y".equals(para.getParameter()); else     if (name.equals("DeleteOldImported"))     m_DeleteOldImported="Y".equals(para.getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public static int showOptionDialog(Component parentComponent,Object message,String title,int optionType,int messageType,Icon icon,Object[] options,Object initialValue) throws HeadlessException {  JOptionPane pane=new JOptionPane(message,messageType,optionType,icon,options,initialValue);  pane.setInitialValue(initialValue);  pane.setComponentOrientation(((parentComponent == null) ? getRootFrame() : parentComponent).getComponentOrientation());  int style=styleFromMessageType(messageType);  JDialog dialog=pane.createDialog(parentComponent,title,style);  pane.selectInitialValue();  dialog.show();  dialog.dispose();  Object selectedValue=pane.getValue();  if (selectedValue == null)   return CLOSED_OPTION;  if (options == null) {    if (selectedValue instanceof Integer)     return ((Integer)selectedValue).intValue();    return CLOSED_OPTION;  }  for (int counter=0, maxCounter=options.length; counter < maxCounter; counter++) {    if (options[counter].equals(selectedValue))     return counter;  }  return CLOSED_OPTION;}  }
class C{  public EsriGraphicList(){  super();}  }
class C{  private int nextTlsMode(){  if (nextTlsMode == TLS_MODE_MODERN) {    nextTlsMode=TLS_MODE_COMPATIBLE;    return TLS_MODE_MODERN;  } else   if (nextTlsMode == TLS_MODE_COMPATIBLE) {    nextTlsMode=TLS_MODE_NULL;    return TLS_MODE_COMPATIBLE;  } else {    throw new AssertionError();  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe Exponent to use.\n" + "\t(default: 1.0)","E",1,"-E <num>"));  result.addElement(new Option("\tUse lower-order terms.\n" + "\t(default: no)","L",0,"-L"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public RBM(String options[]) throws Exception {  this.setOptions(options);}  }
class C{  private static void treks(Graph graph,Node node1,Node node2,LinkedList<Node> path,List<List<Node>> paths){  path.addLast(node1);  for (  Edge edge : graph.getEdges(node1)) {    Node next=Edges.traverse(node1,edge);    if (next == null) {      continue;    }    if (path.size() > 1) {      Node node0=path.get(path.size() - 2);      if (next == node0) {        continue;      }      if (graph.isDefCollider(node0,node1,next)) {        continue;      }    }    if (next == node2) {      LinkedList<Node> _path=new LinkedList<>(path);      _path.add(next);      paths.add(_path);      continue;    }    if (path.contains(next)) {      continue;    }    treks(graph,next,node2,path,paths);  }  path.removeLast();}  }
class C{  @Override public boolean dispatchTouchEvent(MotionEvent event){switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    x1=event.getX();  y1=event.getY();break;case MotionEvent.ACTION_MOVE:x2=event.getX();y2=event.getY();if (isScrollingHorizontal(x1,y1,x2,y2)) {return super.dispatchTouchEvent(event);}break;}switch (getCurrentItem()) {case 0:if (mDatePicker != null) mDatePicker.dispatchTouchEvent(event);break;case 1:if (mTimePicker != null) mTimePicker.dispatchTouchEvent(event);break;}return super.onTouchEvent(event);}  }
class C{  Location end(){  return end;}  }
class C{  public final void testIriWithContextParameter(){  assertNotNull(Validators.iri(getContext()));}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  AppLog.v(this,"onCreateOptionsMenu()");  menu.clear();  toolbarBottom.getMenu().clear();  toolbarBottom.setVisibility(View.VISIBLE);  CustomFragment top=getTopFragment();  if (top != null) {    if (top.getFragmentTag().equals(PodSelectionFragment.TAG)) {      toolbarBottom.setVisibility(View.GONE);    } else {      getMenuInflater().inflate(appSettings.isExtendedNotificationsActivated() ? R.menu.main__menu_top__notifications_dropdown : R.menu.main__menu_top,menu);      getMenuInflater().inflate(R.menu.main__menu_bottom,toolbarBottom.getMenu());      top.onCreateBottomOptionsMenu(toolbarBottom.getMenu(),getMenuInflater());    }  }  return true;}  }
class C{  public OptionSet(OptionSet origin){  if (origin == null)   throw new NullPointerException();  if_match_list=copyList(origin.if_match_list);  uri_host=origin.uri_host;  etag_list=copyList(origin.etag_list);  if_none_match=origin.if_none_match;  uri_port=origin.uri_port;  location_path_list=copyList(origin.location_path_list);  uri_path_list=copyList(origin.uri_path_list);  content_format=origin.content_format;  max_age=origin.max_age;  uri_query_list=copyList(origin.uri_query_list);  accept=origin.accept;  location_query_list=copyList(origin.location_query_list);  proxy_uri=origin.proxy_uri;  proxy_scheme=origin.proxy_scheme;  if (origin.block1 != null)   block1=new BlockOption(origin.block1);  if (origin.block2 != null)   block2=new BlockOption(origin.block2);  observe=origin.observe;  others=copyList(origin.others);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.STATE_SWITCH__CASES:    getCases().clear();  return;case SexecPackage.STATE_SWITCH__STATE_CONFIGURATION_IDX:setStateConfigurationIdx(STATE_CONFIGURATION_IDX_EDEFAULT);return;case SexecPackage.STATE_SWITCH__HISTORY_REGION:setHistoryRegion((ExecutionRegion)null);return;}super.eUnset(featureID);}  }
class C{  protected boolean skipFile(@SuppressWarnings("unused") @NotNull Path path,@NotNull Long modificationTime,Long lastModificationTime) throws IOException {  return (!(lastModificationTime == null || modificationTime > lastModificationTime));}  }
class C{  public void start(){  calculatePositionArray();  setPreferredSize(calculatePreferredSize());  offset=getWidth();  timer=new Timer(interval,this);  timer.start();}  }
class C{  public Intent putExtra(String name,float value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putFloat(name,value);  return this;}  }
class C{  @VisibleForTesting public DistributedLogClientBuilder routingService(RoutingService routingService){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._routingServiceBuilder=RoutingUtils.buildRoutingService(routingService);  newBuilder._enableRegionStats=false;  return newBuilder;}  }
class C{  public static double[] insert(double[] dest,double src,int offset){  double[] temp=new double[dest.length + 1];  System.arraycopy(dest,0,temp,0,offset);  temp[offset]=src;  System.arraycopy(dest,offset,temp,offset + 1,dest.length - offset);  return temp;}  }
class C{  private void internalSetFiled(MethodVisitor mv,Accessor acc){  mv.visitVarInsn(ALOAD,1);  mv.visitTypeInsn(CHECKCAST,classNameInternal);  mv.visitVarInsn(ALOAD,3);  Type fieldType=Type.getType(acc.getType());  Class<?> type=acc.getType();  String destClsName=Type.getInternalName(type);  Method conMtd=convMtds.get(type);  if (conMtd != null) {    String clsSig=Type.getInternalName(conMtd.getDeclaringClass());    String mtdName=conMtd.getName();    String mtdSig=Type.getMethodDescriptor(conMtd);    mv.visitMethodInsn(INVOKESTATIC,clsSig,mtdName,mtdSig);  } else   if (acc.isEnum()) {    Label isNull=new Label();    mv.visitJumpInsn(IFNULL,isNull);    mv.visitVarInsn(ALOAD,3);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Object","toString","()Ljava/lang/String;");    mv.visitMethodInsn(INVOKESTATIC,destClsName,"valueOf","(Ljava/lang/String;)L" + destClsName + ";");    mv.visitVarInsn(ASTORE,3);    mv.visitLabel(isNull);    mv.visitFrame(Opcodes.F_SAME,0,null,0,null);    mv.visitVarInsn(ALOAD,1);    mv.visitTypeInsn(CHECKCAST,this.classNameInternal);    mv.visitVarInsn(ALOAD,3);    mv.visitTypeInsn(CHECKCAST,destClsName);  } else   if (type.equals(String.class)) {    Label isNull=new Label();    mv.visitJumpInsn(IFNULL,isNull);    mv.visitVarInsn(ALOAD,3);    mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Object","toString","()Ljava/lang/String;");    mv.visitVarInsn(ASTORE,3);    mv.visitLabel(isNull);    mv.visitFrame(Opcodes.F_SAME,0,null,0,null);    mv.visitVarInsn(ALOAD,1);    mv.visitTypeInsn(CHECKCAST,this.classNameInternal);    mv.visitVarInsn(ALOAD,3);    mv.visitTypeInsn(CHECKCAST,destClsName);  } else {    mv.visitTypeInsn(CHECKCAST,destClsName);  }  if (acc.isPublic()) {    mv.visitFieldInsn(PUTFIELD,classNameInternal,acc.getName(),fieldType.getDescriptor());  } else {    String sig=Type.getMethodDescriptor(acc.setter);    mv.visitMethodInsn(INVOKEVIRTUAL,classNameInternal,acc.setter.getName(),sig);  }  mv.visitInsn(RETURN);}  }
class C{  public void addCount(Integer count){  this.count+=count;  if (superItem != null) {    superItem.addCount(count);  }}  }
class C{  public void store(float value,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public Vector(int x,int y,int z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  private void fetchByTitle(Title pTitle,boolean useExactTitle) throws WikiApiException {  String searchString=pTitle.getPlainTitle();  if (!useExactTitle) {    searchString=pTitle.getWikiStyleTitle();  }  Session session;  session=this.wiki.__getHibernateSession();  session.beginTransaction();  Integer pageId=(Integer)session.createNativeQuery("select pml.pageID from PageMapLine as pml where pml.name = :pagetitle LIMIT 1").setParameter("pagetitle",searchString,StringType.INSTANCE).uniqueResult();  session.getTransaction().commit();  if (pageId == null) {    throw new WikiPageNotFoundException("No page with name " + searchString + " was found.");  }  fetchByPageId(pageId);  if (!this.isRedirect && searchString != null && !searchString.equals(getTitle().getRawTitleText())) {    if (this.isRedirect) {      throw new WikiPageNotFoundException("No discussion page with name " + searchString + " could be retrieved. This is most likely due to multiple writing variants of the same page in the database");    } else {      this.isRedirect=true;      if (searchString.startsWith(DISCUSSION_PREFIX) && !getTitle().getRawTitleText().startsWith(DISCUSSION_PREFIX)) {        try {          fetchByTitle(new Title(DISCUSSION_PREFIX + getTitle().getRawTitleText()),useExactTitle);        } catch (        WikiPageNotFoundException e) {          throw new WikiPageNotFoundException("No page with name " + DISCUSSION_PREFIX + getTitle().getRawTitleText()+ " was found.");        }      }    }  }}  }
class C{  public static void assumeDisplayPresent(){  try {    assumeFalse(GraphicsEnvironment.getLocalGraphicsEnvironment().isHeadlessInstance());    String display=System.getenv("DISPLAY");    assumeThat(display,is(notNullValue()));    assumeTrue(display.length() > 0);  } catch (  UnsatisfiedLinkError e) {    assumeNoException("Grahics system is missing?",e);  }}  }
class C{  @Override public void mouseClicked(int xPos,int yPos,int par3){  int x=(width - xSize) / 2, y=(height - ySize) / 2;  if (!xbox.isFocused() && yPos < y + 40 && yPos > y + 31 && xPos < x + 163 && xPos > x + 113) {    xbox.setFocused(true);    ybox.setFocused(false);  }  if (!ybox.isFocused() && yPos < y + 50 && yPos > y + 41 && xPos < x + 163 && xPos > x + 113) {    ybox.setFocused(true);    xbox.setFocused(false);  }  super.mouseClicked(xPos,yPos,par3);}  }
class C{  protected boolean updateAttachmentPoint(DatapathId sw,OFPort port,Date lastSeen){  ITopologyService topology=deviceManager.topology;  List<AttachmentPoint> oldAPList;  List<AttachmentPoint> apList;  boolean oldAPFlag=false;  if (!deviceManager.isValidAttachmentPoint(sw,port))   return false;  AttachmentPoint newAP=new AttachmentPoint(sw,port,lastSeen);  apList=new ArrayList<AttachmentPoint>();  if (attachmentPoints != null)   apList.addAll(attachmentPoints);  oldAPList=new ArrayList<AttachmentPoint>();  if (oldAPs != null)   oldAPList.addAll(oldAPs);  if (oldAPList.contains(newAP)) {    int index=oldAPList.indexOf(newAP);    newAP=oldAPList.remove(index);    newAP.setLastSeen(lastSeen);    this.oldAPs=oldAPList;    oldAPFlag=true;  }  Map<DatapathId,AttachmentPoint> apMap=getAPMap(apList);  if (apMap == null || apMap.isEmpty()) {    apList.add(newAP);    attachmentPoints=apList;    return true;  }  DatapathId id=topology.getL2DomainId(sw);  AttachmentPoint oldAP=apMap.get(id);  if (oldAP == null) {    apList=new ArrayList<AttachmentPoint>();    apList.addAll(apMap.values());    apList.add(newAP);    this.attachmentPoints=apList;    return true;  }  if (oldAP.equals(newAP)) {    if (newAP.lastSeen.after(oldAP.lastSeen)) {      oldAP.setLastSeen(newAP.lastSeen);    }    this.attachmentPoints=new ArrayList<AttachmentPoint>(apMap.values());    return false;  }  int x=deviceManager.apComparator.compare(oldAP,newAP);  if (x < 0) {    apMap.put(id,newAP);    this.attachmentPoints=new ArrayList<AttachmentPoint>(apMap.values());    oldAPList=new ArrayList<AttachmentPoint>();    if (oldAPs != null)     oldAPList.addAll(oldAPs);    oldAPList.add(oldAP);    this.oldAPs=oldAPList;    if (!topology.isInSameBroadcastDomain(oldAP.getSw(),oldAP.getPort(),newAP.getSw(),newAP.getPort()))     return true;  } else   if (oldAPFlag) {    oldAPList=new ArrayList<AttachmentPoint>();    if (oldAPs != null)     oldAPList.addAll(oldAPs);    oldAPList.add(newAP);    this.oldAPs=oldAPList;  }  return false;}  }
class C{  private void launchAnimVectorList(){  if (!animatedVectorFirstLaunched) {    if (animatedVectorList.getLevel() < animatedVectorListMaxLevel) {      animatedVectorList.setLevel(animatedVectorList.getLevel() + 1);      currentAnimatedVectorFromList=(AnimatedVectorDrawable)animatedVectorList.getCurrent();    } else {      animatedVectorList.setLevel(0);      currentAnimatedVectorFromList=(AnimatedVectorDrawable)animatedVectorList.getCurrent();    }  } else {    animatedVectorFirstLaunched=false;  }  currentAnimatedVectorFromList.start();  uiHandler.postDelayed(uiRunnable,300 + 3000);}  }
class C{  @Inject QueueBasedDistributedSchedulingService(AlertService alertService,GlobalInterlockService globalInterlockService,UserService userService,ServiceManagementService serviceManagementRecordService,AuditService auditService,SystemConfiguration config,MQService mqService){  super(config);  requireArgument(alertService != null,"Alert service cannot be null.");  requireArgument(globalInterlockService != null,"Global interlock service cannot be null.");  requireArgument(userService != null,"User service cannot be null.");  requireArgument(serviceManagementRecordService != null,"Service management record service cannot be null.");  requireArgument(auditService != null,"Audit service cannot be null.");  requireArgument(config != null,"System configuration cannot be null.");  _alertService=alertService;  _globalInterlockService=globalInterlockService;  _userService=userService;  _serviceManagementRecordService=serviceManagementRecordService;  _auditService=auditService;  _configuration=config;  _mqService=mqService;}  }
class C{  public void flush() throws IOException {  if (printWriter != null) {    printWriter.flush();  }  if (gzipOutputStream != null) {    gzipOutputStream.flush();  }}  }
class C{  public DrawerBuilder withTranslucentStatusBarProgrammatically(boolean translucentStatusBarProgrammatically){  this.mTranslucentStatusBarProgrammatically=translucentStatusBarProgrammatically;  if (translucentStatusBarProgrammatically) {    this.mTranslucentStatusBar=true;  }  return this;}  }
class C{  public static float[] nullToEmpty(float[] array){  if (array == null || array.length == 0) {    return EMPTY_FLOAT_ARRAY;  }  return array;}  }
class C{  public static void downloadAsync(ImageRequest request){  if (request == null) {    return;  }  RequestKey key=new RequestKey(request.getImageUri(),request.getCallerTag());synchronized (pendingRequests) {    DownloaderContext downloaderContext=pendingRequests.get(key);    if (downloaderContext != null) {      downloaderContext.request=request;      downloaderContext.isCancelled=false;      downloaderContext.workItem.moveToFront();    } else {      enqueueCacheRead(request,key,request.isCachedRedirectAllowed());    }  }}  }
class C{  public AdvancingFrontNode locatePoint(final TriangulationPoint point){  final double px=point.getX();  AdvancingFrontNode node=findSearchNode(px);  final double nx=node.point.getX();  if (px == nx) {    if (point != node.point) {      if (point == node.prev.point) {        node=node.prev;      } else       if (point == node.next.point) {        node=node.next;      } else {        throw new RuntimeException("Failed to find Node for given afront point");      }    }  } else   if (px < nx) {    while ((node=node.prev) != null) {      if (point == node.point) {        break;      }    }  } else {    while ((node=node.next) != null) {      if (point == node.point) {        break;      }    }  }  search=node;  return node;}  }
class C{  public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  void resetChannel(){  reset(channel);  expect(channel.getPipeline()).andReturn(pipeline).anyTimes();  expect(channel.getRemoteAddress()).andReturn(null).anyTimes();}  }
class C{  public static void printf(Object self,String format,Object[] values){  if (self instanceof PrintStream)   ((PrintStream)self).printf(format,values); else   System.out.printf(format,values);}  }
class C{  public void autoFix(int width,int height){  this.inRoundOval.set(this.mPaintWidth / 2 + this.mSidePaintInterval + mDotRadius,this.mPaintWidth / 2 + this.mSidePaintInterval + mDotRadius,width - mDotRadius - this.mPaintWidth / 2 - this.mSidePaintInterval,height - this.mPaintWidth / 2 - this.mSidePaintInterval - mDotRadius);  int left=DotCircleProgress.this.getPaddingLeft();  int right=DotCircleProgress.this.getPaddingRight();  int top=DotCircleProgress.this.getPaddingTop();  int bottom=DotCircleProgress.this.getPaddingBottom();  mCircleRadius=width / 2 - mDotRadius;  this.mRoundOval.set(left + this.mPaintWidth / 2 + mDotRadius,mDotRadius + top + this.mPaintWidth / 2,width - mDotRadius - right- this.mPaintWidth / 2,height - bottom - this.mPaintWidth / 2 - mDotRadius);}  }
class C{  public MoreLikeThisQueryBuilder stopWords(String... stopWords){  this.stopWords=stopWords;  return this;}  }
class C{  @Override public void serviceAdded(ServiceEvent event){synchronized (this) {    ServiceInfo info=event.getInfo();    if ((info != null) && (info.hasData())) {      _infos.put(event.getName(),info);    } else {      String subtype=(info != null ? info.getSubtype() : "");      info=((JmDNSImpl)event.getDNS()).resolveServiceInfo(event.getType(),event.getName(),subtype,true);      if (info != null) {        _infos.put(event.getName(),info);      } else {        _events.put(event.getName(),event);      }    }  }}  }
class C{  public WroModel addGroup(final Group group){  notNull(group);  groups.add(group);  return this;}  }
class C{  public static <K,V>SortedMap<K,V> sort(SortedMap<K,V> self){  return self;}  }
class C{  public void activeOnly(boolean activeOnly){  this.activeOnly=activeOnly;}  }
class C{  protected void updateVisualsForTabModel(boolean isIncognito){}  }
class C{  public static double fixedPointToDouble(int fixedPoint){  return fixedPoint / 32d;}  }
class C{  public void ruleR0(Graph graph){  graph.reorientAllWith(Endpoint.CIRCLE);  fciOrientbk(knowledge,graph,graph.getNodes());  addColliders(graph,sepsets,knowledge);}  }
class C{  @Override public GSSCredentialSpi impersonate(GSSNameSpi name) throws GSSException {  Credentials cred=screds.getInitCred();  if (cred != null) {    return Krb5InitCredential.getInstance(this.name,cred).impersonate(name);  } else {    throw new GSSException(GSSException.FAILURE,-1,"Only an initiate credentials can impersonate");  }}  }
class C{  public SnmpAdaptorServer(InetAddressAcl acl,int port){  this(false,acl,port,null);}  }
class C{  final public String cpuInfo(){  return m_cpuInfo;}  }
class C{  public boolean isEmpty(){  return n == 0;}  }
class C{  public void testBitLengthNegative3(){  byte aBytes[]={1,0,0,0,0,0,0,0,0,0,0};  int aSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertEquals(80,aNumber.bitLength());}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,int duration){  mMode=SCROLL_MODE;  mScrollerX.startScroll(startX,dx,duration);  mScrollerY.startScroll(startY,dy,duration);}  }
class C{  public ThreadCreatedSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public DNetscapeBaseUrl(JDialog parent){  super(parent);  setTitle(res.getString("DNetscapeBaseUrl.Title"));  initComponents();}  }
class C{  public void beginArray() throws IOException {  expect(JsonToken.BEGIN_ARRAY);}  }
class C{  protected void releaseIfLockedBy(InternalDistributedMember owner,int lockId){  final RemoteThread rThread=getRemoteThread();  boolean released=false;  try {    released=releaseLock(owner,lockId);  } catch (  IllegalStateException e) {    this.dlock.checkDestroyed();    this.grantor.checkDestroyed();    return;  }  if (released) {    if (logger.isTraceEnabled(LogMarker.DLS)) {synchronized (this) {        logger.trace(LogMarker.DLS,"[DLockGrantToken.releaseIfLockedBy] pending requests: {}",(this.pendingRequests == null ? "none" : "" + this.pendingRequests.size()));      }    }    Assert.assertTrue(rThread != null);    this.grantor.postReleaseLock(rThread,getName());  }}  }
class C{  public static double[] calc(double[] llpoints,double precision,boolean geometryClosed){  return calc(llpoints,precision,geometryClosed,12);}  }
class C{  public p(String align){  setAlign(align);}  }
class C{  public static void compute_nullability() throws internal_error {  boolean change=true;  non_terminal nt;  Enumeration e;  production prod;  while (change) {    change=false;    for (e=all(); e.hasMoreElements(); ) {      nt=(non_terminal)e.nextElement();      if (!nt.nullable()) {        if (nt.looks_nullable()) {          nt._nullable=true;          change=true;        }      }    }  }  for (e=production.all(); e.hasMoreElements(); ) {    prod=(production)e.nextElement();    prod.set_nullable(prod.check_nullable());  }}  }
class C{  @Ignore public int $getFirst$(){  return 0;}  }
class C{  protected TypeRefImpl(){  super();}  }
class C{  private void updatePrimaryKeyMaxSurrogateMap(){  Map<String,Boolean> primaryKeyMap=columnsInfo.getPrimaryKeyMap();  for (  Entry<String,Boolean> entry : primaryKeyMap.entrySet()) {    if (!primaryKeyMap.get(entry.getKey())) {      int repeatedPrimaryFromLevels=getRepeatedPrimaryFromLevels(dimInsertFileNames,entry.getKey());      if (null == primaryKeysMaxSurroagetMap) {        primaryKeysMaxSurroagetMap=new HashMap<String,Integer>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);      }      primaryKeysMaxSurroagetMap.put(entry.getKey(),max[repeatedPrimaryFromLevels]);    }  }}  }
class C{  protected void clearOutEvents(){}  }
class C{  public static final ImapEncoder createDefaultEncoder(Localizer localizer,boolean neverAddBodyStructureExtensions){  final EndImapEncoder endImapEncoder=new EndImapEncoder();  final AnnotationResponseEncoder annotationResponseEncoder=new AnnotationResponseEncoder(endImapEncoder);  final MyRightsResponseEncoder myRightsResponseEncoder=new MyRightsResponseEncoder(annotationResponseEncoder);  final ListRightsResponseEncoder listRightsResponseEncoder=new ListRightsResponseEncoder(myRightsResponseEncoder);  final ACLResponseEncoder aclResponseEncoder=new ACLResponseEncoder(listRightsResponseEncoder);  final NamespaceResponseEncoder namespaceEncoder=new NamespaceResponseEncoder(aclResponseEncoder);  final StatusResponseEncoder statusResponseEncoder=new StatusResponseEncoder(namespaceEncoder,localizer);  final RecentResponseEncoder recentResponseEncoder=new RecentResponseEncoder(statusResponseEncoder);  final FetchResponseEncoder fetchResponseEncoder=new FetchResponseEncoder(recentResponseEncoder,neverAddBodyStructureExtensions);  final ExpungeResponseEncoder expungeResponseEncoder=new ExpungeResponseEncoder(fetchResponseEncoder);  final ExistsResponseEncoder existsResponseEncoder=new ExistsResponseEncoder(expungeResponseEncoder);  final MailboxStatusResponseEncoder statusCommandResponseEncoder=new MailboxStatusResponseEncoder(existsResponseEncoder);  final SearchResponseEncoder searchResponseEncoder=new SearchResponseEncoder(statusCommandResponseEncoder);  final LSubResponseEncoder lsubResponseEncoder=new LSubResponseEncoder(searchResponseEncoder);  final ListResponseEncoder listResponseEncoder=new ListResponseEncoder(lsubResponseEncoder);  final XListResponseEncoder xListResponseEncoder=new XListResponseEncoder(listResponseEncoder);  final FlagsResponseEncoder flagsResponseEncoder=new FlagsResponseEncoder(xListResponseEncoder);  final CapabilityResponseEncoder capabilityResponseEncoder=new CapabilityResponseEncoder(flagsResponseEncoder);  final EnableResponseEncoder enableResponseEncoder=new EnableResponseEncoder(capabilityResponseEncoder);  final ContinuationResponseEncoder continuationResponseEncoder=new ContinuationResponseEncoder(enableResponseEncoder,localizer);  final AuthenticateResponseEncoder authResponseEncoder=new AuthenticateResponseEncoder(continuationResponseEncoder);  final ESearchResponseEncoder esearchResponseEncoder=new ESearchResponseEncoder(authResponseEncoder);  final VanishedResponseEncoder vanishedResponseEncoder=new VanishedResponseEncoder(esearchResponseEncoder);  final QuotaResponseEncoder quotaResponseEncoder=new QuotaResponseEncoder(vanishedResponseEncoder);  final QuotaRootResponseEncoder quotaRootResponseEncoder=new QuotaRootResponseEncoder(quotaResponseEncoder);  return quotaRootResponseEncoder;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  AnnotationsAttribute.Copier copier=new AnnotationsAttribute.Copier(info,constPool,newCp,classnames);  try {    copier.memberValue(0);    return new AnnotationDefaultAttribute(newCp,copier.close());  } catch (  Exception e) {    throw new RuntimeException(e.toString());  }}  }
class C{  @Override public Range findDomainBounds(XYDataset dataset){  return findDomainBounds(dataset,true);}  }
class C{  public PhoneDirectory(int maxNumbers){  set=new LinkedHashSet<>();  for (int i=0; i < maxNumbers; i++) {    set.add(i);  }}  }
class C{  private void evaluteAveragesAndAddToTimeSeries(MetricTimeSeries timeSeries,double[] values,long[] times,int startIdx,int end){  if (startIdx == end) {    timeSeries.add(times[startIdx],values[startIdx]);  }  double valueSum=0;  long timeSum=0;  for (int i=startIdx; i < end; i++) {    valueSum+=values[i];    timeSum+=times[i];  }  int amount=end - startIdx;  timeSeries.add(timeSum / amount,valueSum / amount);}  }
class C{  private void publishEnd(Resource resource,BaseAction action,BigDecimal version) throws PublicationException, InvalidConfigException {  if (action == null) {    action=new BaseAction(textProvider,cfg,registrationManager);  }  updateRegistration(resource,action);  resource.setLastPublished(new Date());  updateNextPublishedDate(resource);  executeDoiWorkflow(resource,version,resource.getReplacedEmlVersion(),action);  addOrUpdateVersionHistory(resource,version,true,action);  save(resource);  if (!cfg.isArchivalMode() && version.compareTo(resource.getReplacedEmlVersion()) != 0) {    removeArchiveVersion(resource.getShortname(),resource.getReplacedEmlVersion());  }  String msg=action.getText("publishing.success",new String[]{String.valueOf(resource.getEmlVersion()),resource.getShortname()});  action.addActionMessage(msg);  log.info(msg);}  }
class C{  public void testDiffWithHeaderLineInText(){  List<String> original=new ArrayList<String>();  List<String> revised=new ArrayList<String>();  original.add("test line1");  original.add("test line2");  original.add("test line 4");  original.add("test line 5");  revised.add("test line1");  revised.add("test line2");  revised.add("@@ -2,6 +2,7 @@");  revised.add("test line 4");  revised.add("test line 5");  Patch<String> patch=DiffUtils.diff(original,revised);  List<String> udiff=DiffUtils.generateUnifiedDiff("original","revised",original,patch,10);  DiffUtils.parseUnifiedDiff(udiff);}  }
class C{  @Override public void stop(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemthatexists.class,args);}  }
class C{  public void morphFromSheet(int endX,int endY,Side side,int arcDegrees,float scaleFactor,long duration,AnimationListener listener){  fab.setVisibility(View.VISIBLE);  morph(endX,endY,side,arcDegrees,scaleFactor,duration,listener);}  }
class C{  public static <T1,T2>ObjectIntProcedure<T1> bind(ObjectIntProcedure<? super T2> delegate,Function<? super T1,T2> function){  return new BindObjectIntProcedure<>(delegate,function);}  }
class C{  public TimestampToken generateXAdESContentTimestampAsTimestampToken(final DSSDocument toSignDocument,final XAdESSignatureParameters externalParameters,final TimestampType timestampType){  if (externalParameters == null) {    throw new NullPointerException();  }  final XAdESSignatureParameters signatureParameters=setSignatureParameters(externalParameters);  final XAdESLevelBaselineB levelBaselineB=new XAdESLevelBaselineB(commonCertificateVerifier);  byte[] signatureValueBytes=Base64.decodeBase64(fakeSignatureValue);  final DSSDocument fullSignature=levelBaselineB.signDocument(toSignDocument,signatureParameters,signatureValueBytes);  final List<Reference> references=getReferencesFromValidatedSignature(toSignDocument,fullSignature);  byte[] concatenatedReferences=concatenateReferencesAsByteArray(references);switch (timestampType) {case ALL_DATA_OBJECTS_TIMESTAMP:case INDIVIDUAL_DATA_OBJECTS_TIMESTAMP:    return generateTimestampToken(timestampType,externalParameters,concatenatedReferences);default :  throw new DSSException("Incompatible timestamp type");}}  }
class C{  public void add(int index,ExceptionTable table,int offset){  int len=table.size();  while (--len >= 0) {    ExceptionTableEntry e=(ExceptionTableEntry)table.entries.get(len);    add(index,e.startPc + offset,e.endPc + offset,e.handlerPc + offset,e.catchType);  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public org.eclipse.vorto.core.api.model.datatype.Enum basicGetModel(){  return model;}  }
class C{  void handleAction(int x,int y,Action a){  Position p=targetPosition(x,y,a);  int tx=p.x();  int ty=p.y();  if (a.type == Action.ActionType.MOVE) {    doMove(x,y,tx,ty);  }  if (a.type == Action.ActionType.REPLICATE) {    doReplicate(x,y,tx,ty);  }  if (a.type == Action.ActionType.DIE) {    doDie(x,y);  }  if (a.type == Action.ActionType.ATTACK) {    doAttack(x,y,tx,ty);  }  if (a.type == Action.ActionType.STAY) {    doStay(x,y);  }}  }
class C{  public Object scan(){  return scanner.nextRows().addCallback(this);}  }
class C{  public boolean isDescription(){  return this.tagValue == NO_TAG_VALUE;}  }
class C{  protected Anonymous_recordEntity_2_Impl(){  super();}  }
class C{  public int length(){  return this.map.size();}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  LOG.info("Tool: " + BuildInvertedIndex.class.getSimpleName());  LOG.info(" - input path: " + args.input);  LOG.info(" - output path: " + args.output);  Job job=Job.getInstance(getConf());  job.setJobName(BuildInvertedIndex.class.getSimpleName());  job.setJarByClass(BuildInvertedIndex.class);  job.setNumReduceTasks(1);  FileInputFormat.setInputPaths(job,new Path(args.input));  FileOutputFormat.setOutputPath(job,new Path(args.output));  job.setMapOutputKeyClass(Text.class);  job.setMapOutputValueClass(PairOfInts.class);  job.setOutputKeyClass(Text.class);  job.setOutputValueClass(PairOfWritables.class);  job.setOutputFormatClass(MapFileOutputFormat.class);  job.setMapperClass(MyMapper.class);  job.setReducerClass(MyReducer.class);  Path outputDir=new Path(args.output);  FileSystem.get(getConf()).delete(outputDir,true);  long startTime=System.currentTimeMillis();  job.waitForCompletion(true);  System.out.println("Job Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");  return 0;}  }
class C{  protected void calculate(Matrix a,Matrix y,double ridge){  if (y.getColumnDimension() > 1)   throw new IllegalArgumentException("Only one dependent variable allowed");  int nc=a.getColumnDimension();  m_Coefficients=new double[nc];  Matrix solution;  Matrix ss=aTa(a);  Matrix bb=aTy(a,y);  boolean success=true;  do {    Matrix ssWithRidge=ss.copy();    for (int i=0; i < nc; i++)     ssWithRidge.set(i,i,ssWithRidge.get(i,i) + ridge);    try {      solution=ssWithRidge.solve(bb);      for (int i=0; i < nc; i++)       m_Coefficients[i]=solution.get(i,0);      success=true;    } catch (    Exception ex) {      ridge*=10;      success=false;    }  } while (!success);}  }
class C{  public PasteKnowledgeAction(KnowledgeEditable knowledgeEditable){  super("Paste Knowledge");  if (knowledgeEditable == null) {    throw new NullPointerException();  }  this.knowledgeEditable=knowledgeEditable;}  }
class C{  public void testGetDeployDir(){  String expected=this.fileHandler.append(CONFIGURATION_HOME,"deploy");  assertEquals(expected,this.container.getDeployDir(this.container.getConfiguration().getPropertyValue(JBossPropertySet.CONFIGURATION)));}  }
class C{  public void addFrequency(Frequency frequency){  frequencies.add(frequency);}  }
class C{  public final CC grow(float... widthHeight){switch (widthHeight.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + widthHeight.length);case 2:  growY(new Float(widthHeight[1]));case 1:growX(new Float(widthHeight[0]));}return this;}  }
class C{  private boolean overlayPermRequest(Context context){  boolean permNeeded=false;  if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    if (!Settings.canDrawOverlays(context)) {      Intent intent=new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,Uri.parse("package:" + context.getPackageName()));      intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);      context.startActivity(intent);      permNeeded=true;    }  }  return permNeeded;}  }
class C{  protected boolean filter(List<Node> currentResults,Node node,CssSelector cssSelector,int index){  return cssSelector.accept(currentResults,node,index);}  }
class C{  protected void removeDeployableFromDomain(Deployable deployable,Element domain){  List<Element> results=selectAppDeployments(deployable,domain);  for (  Element element : results) {    domain.removeChild(element);  }}  }
class C{  public boolean aborted(){  return this.aborted;}  }
class C{  public static List<String> expandWildcards(File dir,List<String> modules,Backend forBackend){  List<File> dirs=new ArrayList<File>();  dirs.add(dir);  return expandWildcards(dirs,modules,forBackend);}  }
class C{  @Override public void clear(){  E o;  do {    o=poll();  } while (null != o);}  }
class C{  public ComputeSystemRestRep deregister(URI id){  return client.post(ComputeSystemRestRep.class,getIdUrl() + "/deregister",id);}  }
class C{  final public MutableString append(final float f){  return append(String.valueOf(f));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.PROPERTY__PRESENCE:    return presence != null;case DatatypePackage.PROPERTY__MULTIPLICITY:  return multiplicity != MULTIPLICITY_EDEFAULT;case DatatypePackage.PROPERTY__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case DatatypePackage.PROPERTY__DESCRIPTION:return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);case DatatypePackage.PROPERTY__CONSTRAINT_RULE:return constraintRule != null;case DatatypePackage.PROPERTY__TYPE:return type != null;case DatatypePackage.PROPERTY__PROPERTY_ATTRIBUTES:return propertyAttributes != null && !propertyAttributes.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static AsymmetricKeyParameter createKey(byte[] keyInfoData) throws IOException {  return createKey(SubjectPublicKeyInfo.getInstance(ASN1Primitive.fromByteArray(keyInfoData)));}  }
class C{  public void testGetOutputBooksDistribuidor2(){  ISWebServiceBooksSoap client=(ISWebServiceBooksSoap)this.applicationContext.getBean("clientWebServiceBooks");  Security security=new Security();  UsernameTokenClass value=new UsernameTokenClass();  value.setUsername("distribuidor2");  value.setPassword("distribuidor2");  value.setOfficeCode("003");  security.setUsernameToken(value);  ArrayOfWSBook result=client.wsGetOutputBooks(security);  assertNotNull(result);  assertEquals(1,result.getWSBook().size());  WSBook wsBook=(WSBook)CollectionUtils.find(result.getWSBook(),new BeanPropertyValueEqualsPredicate("id",6));  assertEquals(6,wsBook.getId());  assertEquals("Libro de salida auxiliar",wsBook.getName());  assertEquals(2,wsBook.getType());  assertTrue(wsBook.isCanCreate());  assertTrue(wsBook.isCanModify());  assertFalse(wsBook.isReadOnly());}  }
class C{  public static void subscribeToDiskCacheReports(Callback callback){  subscribe(Type.DISKCACHE,callback);}  }
class C{  private T[] ensureCapacity(int minCapacity){  if (tmpLen < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),newSize);    tmp=newArray;    tmpLen=newSize;    tmpBase=0;  }  return tmp;}  }
class C{  public Result invokeValidatedOverlayOp(int opCode,Geometry g0,Object[] args) throws Exception {  Geometry result=null;  Geometry g1=(Geometry)args[0];  result=invokeGeometryOverlayMethod(opCode,g0,g1);  validate(opCode,g0,g1,result);  areaValidate(g0,g1);  if (returnEmptyGC) {    result=result.getFactory().createGeometryCollection(null);  }  return new GeometryResult(result);}  }
class C{  public static TimeOfDay fromDateFields(Date date){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  return new TimeOfDay(date.getHours(),date.getMinutes(),date.getSeconds(),(((int)(date.getTime() % 1000)) + 1000) % 1000);}  }
class C{  public final void removeCallbacks(Runnable r){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable);  }}  }
class C{  @Metered(name="auth.sso.service_refresh_token") @Path("refresh") @GET public Response refresh(@QueryParam("redirect_url") String redirectUrl,@CookieParam("token-access-key") Cookie tokenAccessCookie,@Context UriInfo uriInfo) throws UnsupportedEncodingException {  Response.ResponseBuilder builder;  boolean isSecure=uriInfo.getRequestUri().getScheme().equals("https");  try {    if (tokenAccessCookie != null) {      AccessTicket accessTicket=ticketManager.getAccessTicket(tokenAccessCookie.getValue());      if (accessTicket != null) {        UriBuilder destination=UriBuilder.fromUri(redirectUrl);        destination.replaceQueryParam("cookiePresent",true);        builder=Response.temporaryRedirect(destination.build());        cookieBuilder.setCookies(builder,tokenAccessCookie.getValue(),isSecure);        return builder.build();      }    }    builder=Response.temporaryRedirect(new URI(loginPage + "?redirect_url=" + encode(redirectUrl,"UTF-8")));  } catch (  IOException|URISyntaxException e) {    LOG.error(e.getLocalizedMessage(),e);    builder=Response.serverError();  }  return builder.build();}  }
class C{  public void test() throws Exception {  Similarity sim=getSimilarity("text");  assertEquals(DFRSimilarity.class,sim.getClass());  DFRSimilarity dfr=(DFRSimilarity)sim;  assertEquals(BasicModelIF.class,dfr.getBasicModel().getClass());  assertEquals(AfterEffectB.class,dfr.getAfterEffect().getClass());  assertEquals(NormalizationH2.class,dfr.getNormalization().getClass());}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (type_1: ");  result.append(type_1);  result.append(')');  return result.toString();}  }
class C{  public StateSymbolKey(LRParserState state,Symbol symbol){  this.state=state;  this.symbol=symbol;  int stateNo=state.getID();  int symbolNo=0;  if (Enum.class.isInstance(symbol)) {    symbolNo=((Enum<?>)symbol).ordinal();  }  hashCode=symbolNo * 1000000 + stateNo;}  }
class C{  public SelectAllAction(final VisionWorld world){  super("Select All");  if (world == null) {    throw new IllegalArgumentException("Desktop component must not be null");  }  this.world=world;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static Typeface robotoThin(Context context){  return FontSourceProcessor.process(R.raw.roboto_thin,context);}  }
class C{  private void processDataLinks(List<Draft2DataLink> dataLinks,ApplicationPort port,Draft2Job job,boolean strip){  for (  Draft2DataLink dataLink : dataLinks) {    String source=dataLink.getSource();    String destination=dataLink.getDestination();    String scatter=null;    if (job.getId().contains(Draft2SchemaHelper.PORT_ID_SEPARATOR)) {      String remaining=job.getId().substring(job.getId().lastIndexOf(".") + 1);      String mod=job.getId().substring(0,job.getId().lastIndexOf("."));      if (mod.contains(".")) {        mod=mod.substring(mod.lastIndexOf(".") + 1);      }      if (strip) {        mod=remaining;      } else {        mod=mod + remaining;      }      scatter=Draft2SchemaHelper.ID_START + mod + Draft2SchemaHelper.PORT_ID_SEPARATOR+ Draft2SchemaHelper.normalizeId(port.getId());    } else {      scatter=port.getId();    }    if ((source.equals(scatter) || destination.equals(scatter)) && (dataLink.getScattered() == null || !dataLink.getScattered())) {      dataLink.setScattered(port.getScatter());    }  }}  }
class C{  @Override public void write(byte b[],int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  int newcount=count + len;  if (newcount > buf.length) {    buf=Utils.copyOf(buf,Math.max(buf.length << 1,newcount));  }  System.arraycopy(b,off,buf,count,len);  count=newcount;}  }
class C{  @Override public DeserializationConfig without(DeserializationConfig.Feature... features){  int flags=_featureFlags;  for (  Feature f : features) {    flags&=~f.getMask();  }  return new DeserializationConfig(this,flags);}  }
class C{  @Override public ProjectObject copy(){  return new ProjectObject(this);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof Video) {    Video other=(Video)obj;    return Objects.equal(name,other.name) && Objects.equal(url,other.url) && duration == other.duration;  } else {    return false;  }}  }
class C{  public StopFilter(TokenStream in,CharArraySet stopWords){  super(in);  this.stopWords=stopWords;}  }
class C{  private boolean removeMapping(Object rowKey,Object columnKey,Object value){  if (containsMapping(rowKey,columnKey,value)) {    remove(rowKey,columnKey);    return true;  }  return false;}  }
class C{  public boolean hasBinary(){  return fieldSetFlags()[8];}  }
class C{  @Override public Session createSession(PrincipalId principal,AuthnMethod authMethod,String externalIDPSessionId,String idpEntId) throws SamlServiceException {  Validate.notNull(principal,"user principalId");  Calendar calendar=new GregorianCalendar();  calendar.add(Calendar.MINUTE,Shared.SESSION_LIFETIME_MINUTES);  Date sessionEndTime=calendar.getTime();  try {    Session currentSession=new Session(principal,sessionEndTime,authMethod);    if (externalIDPSessionId != null) {      Validate.notEmpty(idpEntId,"Need idpEntId for creating external authenticated session");      currentSession.setUsingExtIDP(true);      currentSession.setExtIDPToUsed(new IDPConfig(idpEntId));      currentSession.setExtIDPSessionID(externalIDPSessionId);    }    add(currentSession);    return currentSession;  } catch (  NoSuchAlgorithmException e) {    throw new SamlServiceException(e);  }}  }
class C{  public void testCallStmtExecuteLargeBatch() throws Exception {  createTable("testExecuteLargeBatch","(id BIGINT AUTO_INCREMENT PRIMARY KEY, n INT)");  createProcedure("testExecuteLargeBatchProc","(IN n INT) BEGIN INSERT INTO testExecuteLargeBatch (n) VALUES (n); END");  CallableStatement testCstmt=this.conn.prepareCall("{CALL testExecuteLargeBatchProc(?)}");  testCstmt.setInt(1,1);  testCstmt.addBatch();  testCstmt.setInt(1,2);  testCstmt.addBatch();  testCstmt.setInt(1,3);  testCstmt.addBatch();  testCstmt.setInt(1,4);  testCstmt.addBatch();  testCstmt.addBatch("{CALL testExecuteLargeBatchProc(5)}");  testCstmt.addBatch("{CALL testExecuteLargeBatchProc(6)}");  testCstmt.addBatch("{CALL testExecuteLargeBatchProc(7)}");  testCstmt.setInt(1,8);  testCstmt.addBatch();  testCstmt.addBatch("{CALL testExecuteLargeBatchProc(9)}");  testCstmt.addBatch("{CALL testExecuteLargeBatchProc(10)}");  long[] counts=testCstmt.executeLargeBatch();  assertEquals(10,counts.length);  assertEquals(1,counts[0]);  assertEquals(1,counts[1]);  assertEquals(1,counts[2]);  assertEquals(1,counts[3]);  assertEquals(1,counts[4]);  assertEquals(1,counts[5]);  assertEquals(1,counts[6]);  assertEquals(1,counts[7]);  assertEquals(1,counts[8]);  assertEquals(1,counts[9]);  this.rs=testCstmt.getGeneratedKeys();  ResultSetMetaData rsmd=this.rs.getMetaData();  assertEquals(1,rsmd.getColumnCount());  assertEquals(JDBCType.BIGINT.getVendorTypeNumber().intValue(),rsmd.getColumnType(1));  assertEquals(20,rsmd.getColumnDisplaySize(1));  this.rs.close();  testCstmt.close();  createTable("testExecuteLargeBatch","(id BIGINT AUTO_INCREMENT PRIMARY KEY, n INT)");  testCstmt=this.conn.prepareCall("{call testExecuteLargeBatchProc(?)}");  testCstmt.setInt(1,1);  testCstmt.addBatch();  testCstmt.setInt(1,2);  testCstmt.addBatch();  testCstmt.setInt(1,3);  testCstmt.addBatch();  testCstmt.setInt(1,4);  testCstmt.addBatch();  testCstmt.addBatch("{call testExecuteLargeBatchProc(5)}");  testCstmt.addBatch("{call testExecuteLargeBatchProc('six')}");  testCstmt.addBatch("{call testExecuteLargeBatchProc(7)}");  testCstmt.setString(1,"eight");  testCstmt.addBatch();  testCstmt.addBatch("{CALL testExecuteLargeBatchProc(9)}");  testCstmt.addBatch("{CALL testExecuteLargeBatchProc(10)}");  try {    testCstmt.executeLargeBatch();    fail("BatchUpdateException expected");  } catch (  BatchUpdateException e) {    assertEquals("Incorrect integer value: 'eight' for column 'n' at row 1",e.getMessage());    counts=e.getLargeUpdateCounts();    assertEquals(10,counts.length);    assertEquals(1,counts[0]);    assertEquals(1,counts[1]);    assertEquals(1,counts[2]);    assertEquals(1,counts[3]);    assertEquals(1,counts[4]);    assertEquals(Statement.EXECUTE_FAILED,counts[5]);    assertEquals(1,counts[6]);    assertEquals(Statement.EXECUTE_FAILED,counts[7]);    assertEquals(1,counts[8]);    assertEquals(1,counts[9]);  }catch (  Exception e) {    fail("BatchUpdateException expected");  }  testCstmt.close();}  }
class C{  public static InputStream openLogFileAsInputStream(File file) throws AdeUsageException {  final String fileName=file.getPath();  try {    if (file.getName().endsWith(ZIP)) {      return new BufferedInputStream(new GZIPInputStream(new FileInputStream(fileName)));    } else {      return new BufferedInputStream(new FileInputStream(fileName));    }  } catch (  IOException e) {    throw new AdeUsageException("Failed opening file " + fileName + ": ",e);  }}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  private static <T,ID>void addDropTableStatements(DatabaseType databaseType,TableInfo<T,ID> tableInfo,List<String> statements){  List<String> statementsBefore=new ArrayList<String>();  List<String> statementsAfter=new ArrayList<String>();  for (  FieldType fieldType : tableInfo.getFieldTypes()) {    databaseType.dropColumnArg(fieldType,statementsBefore,statementsAfter);  }  StringBuilder sb=new StringBuilder(64);  sb.append("DROP TABLE ");  databaseType.appendEscapedEntityName(sb,tableInfo.getTableName());  sb.append(' ');  statements.addAll(statementsBefore);  statements.add(sb.toString());  statements.addAll(statementsAfter);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.861 -0500",hash_original_method="795A4A88B7E0FFCBF277CCA1899F11E6",hash_generated_method="8360D316DEAF76F39E9753EEA432BC5B") private ProviderStatus(){}  }
class C{  public static boolean tryCancelQuery(final QueryEngine queryEngine,final UUID queryId){  final IRunningQuery q;  try {    q=queryEngine.getRunningQuery(queryId);  } catch (  RuntimeException ex) {    return false;  }  if (q != null && q.cancel(true)) {    if (log.isInfoEnabled())     log.info("Cancelled query: " + queryId);    return true;  }  return false;}  }
class C{  private static void sumAggWithFn(double[] a,double[] c,int[] aix,int ai,final int len,final int n,KahanObject kbuff,KahanFunction kfunc){  for (int i=ai; i < ai + len; i++) {    kbuff._sum=c[aix[i]];    kbuff._correction=c[aix[i] + n];    kfunc.execute2(kbuff,a[i]);    c[aix[i]]=kbuff._sum;    c[aix[i] + n]=kbuff._correction;  }}  }
class C{  private void checkRepExists(String entidad) throws Exception {  int count;  VolumesTable table=new VolumesTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (_id == Defs.NULL_ID)     count=DbSelectFns.selectCount(dbConn,table.getRepositoryTableName(),table.getCountRepNameQual(_name)); else     count=DbSelectFns.selectCount(dbConn,table.getRepositoryTableName(),table.getCountRepNameIdQual(_id,_name));    if (count > 0)     AdminException.throwException(RepositoryErrorCodes.EC_REP_EXIST_NAME);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }}  }
class C{  protected void unloadZone(View zone){  zone.removeAll();}  }
class C{  public boolean isAgent(){  return this.equals(AGENT);}  }
class C{  public static String toString(int x){  return toString(x,10);}  }
class C{  public static void serializeGroupFeaturesReply(List<OFGroupFeaturesStatsReply> groupFeaturesReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFGroupFeaturesStatsReply groupFeaturesReply=groupFeaturesReplies.get(0);  jGen.writeStringField("version",groupFeaturesReply.getVersion().toString());  jGen.writeFieldName("groupFeatures");  jGen.writeStartObject();  jGen.writeNumberField("capabilities",groupFeaturesReply.getCapabilities());  jGen.writeNumberField("maxGroupsAll",groupFeaturesReply.getMaxGroupsAll());  jGen.writeNumberField("maxGroupsSelect",groupFeaturesReply.getMaxGroupsSelect());  jGen.writeNumberField("maxGroupsIndirect",groupFeaturesReply.getMaxGroupsIndirect());  jGen.writeNumberField("maxGroupsFf",groupFeaturesReply.getMaxGroupsFf());  jGen.writeNumberField("actionsAll",groupFeaturesReply.getActionsAll());  jGen.writeNumberField("actionsSelect",groupFeaturesReply.getActionsSelect());  jGen.writeNumberField("actionsIndirect",groupFeaturesReply.getActionsIndirect());  jGen.writeNumberField("actionsFf",groupFeaturesReply.getActionsFf());  jGen.writeEndObject();}  }
class C{  public void appendPath(String p_addToPath) throws MalformedURIException {  if (p_addToPath == null || p_addToPath.trim().length() == 0) {    return;  }  if (!isURIString(p_addToPath)) {    throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_INVALID_CHAR,new Object[]{p_addToPath}));  }  if (m_path == null || m_path.trim().length() == 0) {    if (p_addToPath.startsWith("/")) {      m_path=p_addToPath;    } else {      m_path="/" + p_addToPath;    }  } else   if (m_path.endsWith("/")) {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath.substring(1));    } else {      m_path=m_path.concat(p_addToPath);    }  } else {    if (p_addToPath.startsWith("/")) {      m_path=m_path.concat(p_addToPath);    } else {      m_path=m_path.concat("/" + p_addToPath);    }  }}  }
class C{  public ChoiceAnswerFormat(AnswerFormat.ChoiceAnswerStyle answerStyle,Choice... choices){  this.answerStyle=answerStyle;  this.choices=choices.clone();}  }
class C{  public void readIndex() throws ReplicatorException {  if (logger.isDebugEnabled())   logger.debug("Reading binlog index: " + indexFile.getAbsolutePath());  FileInputStream fis=null;  try {    fis=new FileInputStream(this.indexFile);    InputStreamReader reader=new InputStreamReader(fis);    @SuppressWarnings("resource") BufferedReader bufferedReader=new BufferedReader(reader);    binlogFiles=new ArrayList<File>();    String binlogName=null;    while ((binlogName=bufferedReader.readLine()) != null) {      File binlogFile=new File(this.binlogDirectory,binlogName.trim());      binlogFiles.add(binlogFile);    }  } catch (  FileNotFoundException e) {    throw new MySQLExtractException("Binlog index file not found: " + indexFile.getAbsolutePath(),e);  }catch (  IOException e) {    throw new MySQLExtractException("Error reading binlog index file: " + indexFile.getAbsolutePath(),e);  } finally {    if (fis != null) {      try {        fis.close();      } catch (      IOException e) {      }    }  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>void sort(List<T> list,Comparator<? super T> comparator){  T[] array=list.toArray((T[])new Object[list.size()]);  Arrays.sort(array,comparator);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(array[i++]);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.417 -0500",hash_original_method="37709198085D538D169FF1DE9D9ADB9C",hash_generated_method="8504BD49AD39B86C85FA02F7AFAD04FF") public SIPServerTransaction findTransactionPendingAck(SIPRequest ackMessage){  return this.terminatedServerTransactionsPendingAck.get(ackMessage.getTopmostVia().getBranch());}  }
class C{  public MemberIdsSection(String name,DexFile file){  super(name,file,4);}  }
class C{  public static void colorIcons(Activity activity,Menu menu,int color){  ToolbarTinter.on(menu).setIconsColor(color).apply(activity);}  }
class C{  public final void addClinit(){  if (needClassInitMethod()) {    int length;    AbstractMethodDeclaration[] methodDeclarations;    if ((methodDeclarations=this.methods) == null) {      length=0;      methodDeclarations=new AbstractMethodDeclaration[1];    } else {      length=methodDeclarations.length;      System.arraycopy(methodDeclarations,0,(methodDeclarations=new AbstractMethodDeclaration[length + 1]),1,length);    }    Clinit clinit=new Clinit(this.compilationResult);    methodDeclarations[0]=clinit;    clinit.declarationSourceStart=clinit.sourceStart=this.sourceStart;    clinit.declarationSourceEnd=clinit.sourceEnd=this.sourceEnd;    clinit.bodyEnd=this.sourceEnd;    this.methods=methodDeclarations;  }}  }
class C{  public boolean appliesTo(OMGraphic geom,MouseEvent me){  return (geom != null && geom.equals(omg) && sameButton(me));}  }
class C{  public static String postHex(String base_url,String mapping,String hex){  HttpPost httpPost=null;  CloseableHttpClient httpClient=null;  try {    List<NameValuePair> formParams=new ArrayList<NameValuePair>();    formParams.add(new BasicNameValuePair(MAPPING,mapping));    formParams.add(new BasicNameValuePair(HEX,hex));    RequestConfig requestConfig=RequestConfig.custom().setSocketTimeout(5000).setConnectTimeout(5000).build();    httpPost=new HttpPost(base_url);    httpPost.setEntity(new UrlEncodedFormEntity(formParams,"UTF-8"));    httpPost.setConfig(requestConfig);    httpClient=HttpClients.custom().disableAutomaticRetries().build();    HttpResponse response=httpClient.execute(httpPost);    HttpEntity entity=response.getEntity();    if (null != entity) {      if (response.getStatusLine().getStatusCode() == 200) {        String response_hex=EntityUtils.toString(entity,"UTF-8");        EntityUtils.consume(entity);        if (response_hex != null && response_hex.trim().length() > 0) {          return response_hex.trim();        }      }      EntityUtils.consume(entity);    }    return null;  } catch (  Exception e) {    logger.error("",e);  } finally {    if (httpPost != null) {      httpPost.releaseConnection();    }    if (httpClient != null) {      try {        httpClient.close();      } catch (      IOException e) {        logger.error("",e);      }    }  }  return null;}  }
class C{  private void createConfigFiles(IProject project,IProgressMonitor monitor) throws CoreException {  IFile appEngineWebXml=project.getFile(APPENGINE_WEB_XML_PATH);  if (appEngineWebXml.exists()) {    return;  }  IFolder configDir=project.getFolder(APPENGINE_WEB_XML_DIR);  if (!configDir.exists()) {    Path configDirPath=new Path(APPENGINE_WEB_XML_DIR);    IContainer current=project;    for (int i=0; i < configDirPath.segmentCount(); i++) {      final String segment=configDirPath.segment(i);      IFolder folder=current.getFolder(new Path(segment));      if (!folder.exists()) {        folder.create(true,true,monitor);      }      current=folder;    }    configDir=(IFolder)current;  }  appEngineWebXml.create(new ByteArrayInputStream(new byte[0]),true,monitor);  String configFileLocation=appEngineWebXml.getLocation().toString();  AppEngineTemplateUtility.createFileContent(configFileLocation,AppEngineTemplateUtility.APPENGINE_WEB_XML_TEMPLATE,Collections.<String,String>emptyMap());}  }
class C{  protected boolean areEqual(String string1,String string2,boolean caseMatters){  return (caseMatters && string1.equals(string2)) || (!caseMatters && string1.equalsIgnoreCase(string2));}  }
class C{  public <T extends List,V>PrivateParent methodOverridenFromParent(char[] p1,int p2,T p3,V p4,List<String> p5) throws Exception {  return this;}  }
class C{  private boolean isCallKeywordProcessed(){  return isCallWordProcessed || (isExecuteWordProcessed && isProcedureWordProcessed);}  }
class C{  public Object removeAttribute(String name,int scope){  checkName(name);switch (scope) {case ENGINE_SCOPE:    if (getBindings(ENGINE_SCOPE) != null) {      return getBindings(ENGINE_SCOPE).remove(name);    }  return null;case GLOBAL_SCOPE:if (getBindings(GLOBAL_SCOPE) != null) {  return getBindings(GLOBAL_SCOPE).remove(name);}return null;default :throw new IllegalArgumentException("Illegal scope value.");}}  }
class C{  public List<Assignment> findAllAssignmentsByDeptDesigAndDates(final Long deptId,final Long desigId,final Date givenDate){  return assignmentRepository.findAllAssignmentsByDeptDesigAndGivenDate(deptId,desigId,givenDate);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element badElement;  doc=(Document)load("hc_staff",true);{    boolean success=false;    try {      badElement=doc.createElement("invalid^Name");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public DragSourceEvent(DragSourceContext dsc){  super(dsc);  locationSpecified=false;  this.x=0;  this.y=0;}  }
class C{  private void paintRestoreEnabled(Graphics2D g,JComponent c,int width,int height){  restorePainter.paintEnabled(g,c,width,height);}  }
class C{  public ParameterSet(Operator[] operators,String[] parameters,String[] values,PerformanceVector value){  if ((operators.length != parameters.length) || (operators.length != values.length)) {    throw new IllegalArgumentException("The arrays operators, parameters, and values must be of equal size!");  }  for (int i=0; i < operators.length; i++) {    parameterValues.add(new ParameterValue(operators[i].getName(),parameters[i],values[i]));  }  this.performance=value;}  }
class C{  public void register(Object obj){  if (obj instanceof PhysicalObject2D)   objCDE.register((PhysicalObject2D)obj);  if (obj instanceof MobileObject2D)   objFE.registerMobileObject((MobileObject2D)obj);  if (obj instanceof ForceGenerator)   objFE.registerForceGenerator((ForceGenerator)obj);  if (obj instanceof ForceConstraint)   objCE.registerForceConstraint((ForceConstraint)obj);  if (obj instanceof ImpulseConstraint)   objCE.registerImpulseConstraint((ImpulseConstraint)obj);}  }
class C{  public static void sort(double[] array){  sort(0,array.length,array);}  }
class C{  public static byte[][] splitNalUnits(byte[] data){  if (!isNalStartCode(data,0)) {    return null;  }  List<Integer> starts=new ArrayList<>();  int nalUnitIndex=0;  do {    starts.add(nalUnitIndex);    nalUnitIndex=findNalStartCode(data,nalUnitIndex + NAL_START_CODE.length);  } while (nalUnitIndex != -1);  byte[][] split=new byte[starts.size()][];  for (int i=0; i < starts.size(); i++) {    int startIndex=starts.get(i);    int endIndex=i < starts.size() - 1 ? starts.get(i + 1) : data.length;    byte[] nal=new byte[endIndex - startIndex];    System.arraycopy(data,startIndex,nal,0,nal.length);    split[i]=nal;  }  return split;}  }
class C{  @Override public boolean wasSuccessful(){  return isFinished() && getCurrentPoints() >= successThreashold;}  }
class C{  private void init_key(){  P=P_orig.clone();  S=S_orig.clone();}  }
class C{  public void doDefaultCloseAction(){  fireInternalFrameEvent(InternalFrameEvent.INTERNAL_FRAME_CLOSING);switch (defaultCloseOperation) {case DO_NOTHING_ON_CLOSE:    break;case HIDE_ON_CLOSE:  setVisible(false);if (isSelected()) try {  setSelected(false);} catch (PropertyVetoException pve) {}break;case DISPOSE_ON_CLOSE:try {fireVetoableChange(IS_CLOSED_PROPERTY,Boolean.FALSE,Boolean.TRUE);isClosed=true;setVisible(false);firePropertyChange(IS_CLOSED_PROPERTY,Boolean.FALSE,Boolean.TRUE);dispose();} catch (PropertyVetoException pve) {}break;default :break;}}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == GET_CODE) {    Editable text=(Editable)mResults.getText();    if (resultCode == RESULT_CANCELED) {      text.append("(cancelled)");    } else {      text.append("(okay ");      text.append(Integer.toString(resultCode));      text.append(") ");      if (data != null) {        text.append(data.getAction());      }    }    text.append("\n");  }}  }
class C{  public void test_syn_bad_01() throws MalformedQueryException {  final String query="SELECT * { ?s ?p ?o } GROUP BY ?s";  negativeTest(query);}  }
class C{  public void push(short val){  this.push(new BaseTypeWrapper(val));}  }
class C{  protected int rearrangePoints(int[] indices,final int startidx,final int endidx,final int splitDim,final double splitVal){  int tmp, left=startidx - 1;  for (int i=startidx; i <= endidx; i++) {    if (m_EuclideanDistance.valueIsSmallerEqual(m_Instances.instance(indices[i]),splitDim,splitVal)) {      left++;      tmp=indices[left];      indices[left]=indices[i];      indices[i]=tmp;    }  }  return left + 1;}  }
class C{  public void join(){  U.join(scannerThread,log);  if (log.isDebugEnabled())   log.debug("Grid URI deployment scanner stopped: " + this);}  }
class C{  private static boolean hasCarAccessAsPassenger(Plan plan){  boolean result=false;  Iterator<PlanElement> iterator=plan.getPlanElements().iterator();  while (!result & iterator.hasNext()) {    PlanElement pe=iterator.next();    if (pe instanceof Leg) {      result=((Leg)pe).getMode().equalsIgnoreCase("ride");    }  }  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void clearFinished(StateAccessor<?> state){  clearFinishedBits(state.access(FINISHED_BITS_TAG));}  }
class C{  private void dynInit(){  fAttribute.setText(m_DisplayAttribute);  lAttributeValue.setText(m_Attribute);  fValue.setText(m_DisplayValue);  lValueValue.setText(m_Value);  if (CLogMgt.isLevelFine()) {    lAttributeValue.setVisible(false);    lValueValue.setVisible(false);  }  cbClient.setEnabled(false);  cbClient.setSelected(true);  if (MRole.PREFERENCETYPE_Client.equals(m_role.getPreferenceType()))   cbOrg.addActionListener(this); else {    cbOrg.setEnabled(false);    cbOrg.setSelected(true);  }  if (MRole.PREFERENCETYPE_Client.equals(m_role.getPreferenceType()) || MRole.PREFERENCETYPE_Organization.equals(m_role.getPreferenceType()))   cbUser.addActionListener(this); else {    cbUser.setEnabled(false);    cbUser.setSelected(true);  }  cbWindow.addActionListener(this);  confirmPanel.addActionListener(this);  bDelete=confirmPanel.addButton(ConfirmPanel.createDeleteButton(true));  bDelete.addActionListener(this);  setExplanation();}  }
class C{  public ServicesStillPublishedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static void startServices(ServiceHost host) throws Throwable {  try {    host.startService(new GCPEnumerationAdapterService());    host.startService(new GCPStatsService());  } catch (  Exception e) {    host.log(Level.WARNING,"Exception staring provisioning gcp adapters: %s",Utils.toString(e));  }}  }
class C{  private static int checkFieldTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'L':    return checkClassTypeSignature(signature,pos);case '[':  return checkTypeSignature(signature,pos + 1);default :return checkTypeVariableSignature(signature,pos);}}  }
class C{  public boolean isNot(){  return not;}  }
class C{  public void writeExif(byte[] jpeg,OutputStream exifOutStream) throws IOException {  if (jpeg == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  s.write(jpeg,0,jpeg.length);  s.flush();}  }
class C{  @Override public void paintIcon(Component c,Graphics g,int x,int y){  Graphics2D g2=(Graphics2D)g.create();  g2.setComposite(AlphaComposite.SrcAtop.derive(alpha));  icon.paintIcon(c,g2,x,y);  g2.dispose();}  }
class C{  @Override public Version version(){  return VersionUtil.versionFor(getClass());}  }
class C{  private void sendFeaturesRequest() throws IOException {  OFFeaturesRequest m=factory.buildFeaturesRequest().setXid(handshakeTransactionIds--).build();  channel.write(Collections.singletonList(m));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:59.803 -0500",hash_original_method="62D967C94A5AE3381329492B03B8E183",hash_generated_method="F6623F8B06A9D28FCFE1C4FAAFEFBC6B") public String encodeBody(){  if (callId == null)   return null; else {    String retVal=callId;    if (!parameters.isEmpty()) {      retVal+=SEMICOLON + parameters.encode();    }    return retVal;  }}  }
class C{  public void stop(){  if (mState != State.RUNNING) {    throw new IllegalStateException(mState.toString());  }  mTime+=System.nanoTime() - mStart;  mStart=0;  mState=State.STOPPED;}  }
class C{  public boolean isColourInGroup(EnumDyeColor colour){  return values.contains(colour);}  }
class C{  @Override public void run(){  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public void dumpRecoverInfoToRecoverFile(String RecoverFileName){  List<VdcConfig> newVdcConfigList=readRecoverBackupInfo();  verifyVdcConfigs(newVdcConfigList);  DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=null;  try {    builder=dbf.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    System.err.println("xml builder error: " + e);  }  Document doc=builder.newDocument();  Element root=doc.createElement("VdcConfigs");  doc.appendChild(root);  for (  VdcConfig vdcConfig : newVdcConfigList) {    Element vdcConfigNode=doc.createElement("VdcConfig");    vdcConfigNode.setAttribute("id",vdcConfig.getId().toString());    root.appendChild(vdcConfigNode);    Method[] methods=vdcConfig.getClass().getDeclaredMethods();    for (    Method method : methods) {      if (method.getName().contains("get") && !method.getName().contains("Id")) {        try {          Element fieldNode=doc.createElement("field");          Object name=method.getName().replace("get","");          Object value=method.invoke(vdcConfig);          Object type=method.getReturnType().getName();          fieldNode.setAttribute("name",name.toString());          fieldNode.setAttribute("type",type.toString());          fieldNode.setAttribute("value",value == null ? "" : value.toString());          vdcConfigNode.appendChild(fieldNode);        } catch (        Exception e) {          System.err.println("reflect fail: " + e);        }      }    }  }  try (FileOutputStream fos=new FileOutputStream(RecoverFileName);StringWriter sw=new StringWriter()){    Source source=new DOMSource(doc);    Result result=new StreamResult(sw);    Transformer xformer=TransformerFactory.newInstance().newTransformer();    xformer.setOutputProperty(OutputKeys.INDENT,"yes");    xformer.setOutputProperty(OutputKeys.ENCODING,"utf-8");    xformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","4");    xformer.transform(source,result);    byte[] encryptByte=geoEncryptionProvider.encrypt(sw.toString());    fos.write(encryptByte);    System.out.println(String.format("Dump into file: %s successfully",RecoverFileName));    log.info("Dump into file: {} successfully",RecoverFileName);  } catch (  Exception e) {    System.err.println("fail to write to file : " + e);  }}  }
class C{  public Vector(int capacity){  this(capacity,0);}  }
class C{  final String basicTypeSignature(){  StringBuilder buf=new StringBuilder(arity() + 3);  for (int i=0, a=arity(); i < a; i++)   buf.append(parameterType(i).basicTypeChar());  return buf.append('_').append(returnType().basicTypeChar()).toString();}  }
class C{  public static void requestLocationForBluetooth(Activity activity){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    LocationHelper.requestLocation(activity);  }}  }
class C{  private void updatePeriodFactorLastSliceLastValue(TimeSlice timeSlice,LinkedList<XParameterPeriodValue> valuesPerSlice){  Calendar startOfNextSlice=timeSlice.getStartOfNextSliceAsCalendar();  XParameterPeriodValue lastPeriodValue=valuesPerSlice.getFirst();  Calendar startTime=parameterStartTimeForPeriodCalculation(timeSlice,lastPeriodValue);  updateParameterPeriodFactor(timeSlice,lastPeriodValue,startTime,startOfNextSlice);  valuesPerSlice.removeFirst();}  }
class C{  public static void openDial(Context context){  Intent intent=new Intent(Intent.ACTION_CALL_BUTTON);  context.startActivity(intent);}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public static String inputStream2String(InputStream in) throws IOException {  StringBuffer out=new StringBuffer();  byte[] b=new byte[4096];  for (int n; (n=in.read(b)) != -1; ) {    out.append(new String(b,0,n));  }  return out.toString();}  }
class C{  public void addAdditionalSymbolClass(FXGSymbolClass symbolClass){  if (additionalSymbolClasses == null)   additionalSymbolClasses=new ArrayList<FXGSymbolClass>();  additionalSymbolClasses.add(symbolClass);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  @Override public String label(){  return (String)vf.fromURI(label);}  }
class C{  public static boolean checkAnyUserHasSeenToS(Context context){  HashSet<String> toSAckedAccounts=(HashSet<String>)PreferenceManager.getDefaultSharedPreferences(context).getStringSet(TOS_ACKED_ACCOUNTS,null);  if (toSAckedAccounts == null || toSAckedAccounts.isEmpty())   return false;  AccountManagerHelper accountHelper=AccountManagerHelper.get(context);  List<String> accountNames=accountHelper.getGoogleAccountNames();  if (accountNames.isEmpty())   return false;  for (int k=0; k < accountNames.size(); k++) {    if (toSAckedAccounts.contains(accountNames.get(k)))     return true;  }  return false;}  }
class C{  public CSSBeginHyphenAttributeCondition(String localName,String namespaceURI,boolean specified,String value){  super(localName,namespaceURI,specified,value);}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  Map<String,RawProtein<SmartRawMatch>> rawMatches=rawMatchDAO.getRawMatchesForProteinIdsInRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);  Utilities.verboseLog(10,"Smart PostProcessingStep : stepinstance:" + stepInstance.toString());  if (rawMatches.size() == 0) {    Long sequenceCout=stepInstance.getTopProtein() - stepInstance.getBottomProtein();    Utilities.verboseLog(10,"Zero matches found: on " + sequenceCout + " proteins stepinstance:"+ stepInstance.toString());    int waitTimeFactor=2;    if (!Utilities.isRunningInSingleSeqMode()) {      waitTimeFactor=Utilities.getWaitTimeFactorLogE(10 * sequenceCout.intValue()).intValue();    }    Utilities.sleep(waitTimeFactor * 1000);    rawMatches=rawMatchDAO.getRawMatchesForProteinIdsInRange(stepInstance.getBottomProtein(),stepInstance.getTopProtein(),signatureLibraryRelease);    Utilities.verboseLog(10,"matches after waitTimeFactor: " + waitTimeFactor + " - "+ rawMatches.size());  }  try {    int matchCount=0;    for (    final RawProtein rawProtein : rawMatches.values()) {      matchCount+=rawProtein.getMatches().size();    }    Utilities.verboseLog(10," SMART: Retrieved " + rawMatches.size() + " proteins to post-process with "+ matchCount+ " raw matches.");    Map<String,RawProtein<SmartRawMatch>> filteredMatches=postProcessor.process(rawMatches);    filteredMatchDAO.persist(filteredMatches.values());    matchCount=0;    for (    final RawProtein rawProtein : filteredMatches.values()) {      matchCount+=rawProtein.getMatches().size();    }    Utilities.verboseLog(10," SMART: " + filteredMatches.size() + " proteins passed through post processing.");    Utilities.verboseLog(10," SMART: A total of " + matchCount + " matches PASSED.");  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to post process filtered PRINTS matches.",e);  }}  }
class C{  public SimpleALGenerator(HyperGraph hg){  this.graph=hg;}  }
class C{  public void removeConnectionCallback(OneSheeldConnectionCallback connectionCallback){  if (connectionCallback != null && connectionCallbacks.contains(connectionCallback))   connectionCallbacks.remove(connectionCallback);}  }
class C{  public void testTwoNodeEvents() throws Throwable {  testEvents(2);}  }
class C{  private static NotificationCompat.Builder copyBuilder(NotificationCompat.Builder builder){  return new NotificationCompat.Builder(builder.mContext).setSmallIcon(builder.mNotification.icon).setPriority(builder.mNotification.priority).setSound(builder.mNotification.sound).setVibrate(builder.mNotification.vibrate).setLights(builder.mNotification.ledARGB,builder.mNotification.ledOnMS,builder.mNotification.ledOffMS).setTicker(builder.mNotification.tickerText).setAutoCancel(true);}  }
class C{  public static <S>ServiceLoader<S> loadInstalled(Class<S> service){  ClassLoader cl=ClassLoader.getSystemClassLoader();  if (cl != null) {    while (cl.getParent() != null) {      cl=cl.getParent();    }  }  return ServiceLoader.load(service,cl);}  }
class C{  public String toStringKey(){  return new ResultMatrixPlainText(this).toStringKey();}  }
class C{  public static boolean validatePin(Delegator delegator,String finAccountId,String pinNumber){  GenericValue finAccount=null;  try {    finAccount=EntityQuery.use(delegator).from("FinAccount").where("finAccountId",finAccountId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,module);  }  if (finAccount != null) {    String dbPin=finAccount.getString("finAccountCode");    Debug.logInfo("FinAccount Pin Validation: [Sent: " + pinNumber + "] [Actual: "+ dbPin+ "]",module);    if (dbPin != null && dbPin.equals(pinNumber)) {      return true;    }  } else {    Debug.logInfo("FinAccount record not found (" + finAccountId + ")",module);  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int idx=getInt(stack);  MediaNode node=getMediaNode(stack);  return node != null ? node.getChildAt(idx) : null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof sage.vfs.MediaNode)   o=((sage.vfs.MediaNode)o).getDataObject();  return Boolean.valueOf(o instanceof Show);}  }
class C{  public synchronized void sync() throws IOException {  if (needsSync) {    BitSet bitSet=allocatedNodes;    int bitSetLength=allocatedNodes.length();    if (bitSetLength < allocatedNodes.size()) {      bitSet=allocatedNodes.get(0,bitSetLength);    }    byte[] data=ByteArrayUtil.toByteArray(bitSet);    nioFile.truncate(HEADER_LENGTH + data.length);    nioFile.writeBytes(MAGIC_NUMBER,0);    nioFile.writeByte(FILE_FORMAT_VERSION,MAGIC_NUMBER.length);    nioFile.writeBytes(data,HEADER_LENGTH);    needsSync=false;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ToStringBuilder append(String fieldName,int[] array,boolean fullDetail){  style.append(buffer,fieldName,array,BooleanUtils.toBooleanObject(fullDetail));  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:28.018 -0500",hash_original_method="F5358000AB2CB66DCBE7F5DC5E9D5F44",hash_generated_method="40AC061B700F4A8012C70DB31E3D9265") public static int countDots(final String s){  int count=0;  for (int i=0; i < s.length(); i++) {    if (s.charAt(i) == '.') {      count++;    }  }  return count;}  }
class C{  public DefaultAddressConverter(final IAddress membase,final IAddress filebase){  sectionMemoryStartAddress=Preconditions.checkNotNull(membase,"IE00817: Memory base argument can not be null");  fileMemoryStartAddress=Preconditions.checkNotNull(filebase,"IE00819: File base argument can not be null");}  }
class C{  void addChildDependency(View childView,ScrollChoreography choreography){  if (childChoreography.containsKey(childView)) {    childChoreography.get(childView).addMyChoreography(choreography);  } else {    ChoreographyChain childChain=new ChoreographyChain();    childChoreography.put(childView,childChain);  }}  }
class C{  public void fireRepetitionChanged(SessionNode node){  SessionEvent event=new SessionEvent(this.source,node,SessionEvent.REPETITION_CHANGED);  fireSessionEvent(event);}  }
class C{  static public String crypt(final String password,final String salt){  return crypt(password,salt,MAGIC);}  }
class C{  private static String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString();}  }
class C{  public Abs(){  super(Number.class,Number.class);}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  Set extns=getCriticalExtensionOIDs();  if (extns == null) {    return false;  }  extns.remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT);  extns.remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR);  return !extns.isEmpty();}  }
class C{  private char peekChar(){  return peekChar(true);}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private boolean isMultiSigContract(){  return versionSelector == PaymentChannelClient.VersionSelector.VERSION_1;}  }
class C{  public void close() throws IOException {  if (connection != null) {    connection.close();    connection=null;  }}  }
class C{  @Override public void clear(){  super.clear();  float[] set=_set;  byte[] states=_states;  for (int i=set.length; i-- > 0; ) {    set[i]=(float)0;    states[i]=FREE;  }}  }
class C{  private void initSpeakerPhoneState(){  boolean isSpeakerPhoneOn;  if (mIsSpeakerForcedFromLifeCycle) {    isSpeakerPhoneOn=mSavedSpeakerValue;  } else {    isSpeakerPhoneOn=mCall.isVideo() && !HeadsetConnectionReceiver.isHeadsetPlugged();  }  VectorCallSoundManager.setCallSpeakerphoneOn(isSpeakerPhoneOn);}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 1 + cond.costInline(thresh,env,ctx) + ((body != null) ? body.costInline(thresh,env,ctx) : 0);}  }
class C{  public boolean allTablesAreSelectable() throws SQLException {  return false;}  }
class C{  public void safeSetValue(int value){  boolean show=false;  if (value < mMinNum) {    value=mMinNum;    show=true;  } else   if (value > mMaxNum) {    value=mMaxNum;    show=true;  }  centerEditText.setError(null);  amendEditText(centerEditText,value + "");  if (show && mErrorTip) {    centerEditText.setError(null);    centerEditText.setError(mErrorTipText);    centerEditText.requestFocus();  }}  }
class C{  public static Test suite(){  return (new TestSuite(AjaxRequestMultiRenderITCase.class));}  }
class C{  public boolean isNamespaceAware(){  return namespaceAware;}  }
class C{  private void doubleTriangle(Graph graph){  List<Node> nodes=graph.getNodes();  for (  Node B : nodes) {    List<Node> intoBArrows=graph.getNodesInTo(B,Endpoint.ARROW);    List<Node> intoBCircles=graph.getNodesInTo(B,Endpoint.CIRCLE);    List<Node> possA=new LinkedList<>(intoBArrows);    List<Node> possC=new LinkedList<>(intoBArrows);    for (    Node D : intoBCircles) {      for (      Node A : possA) {        for (        Node C : possC) {          if (C == A) {            continue;          }          if (!graph.isAdjacentTo(A,D) || !graph.isAdjacentTo(C,D)) {            continue;          }          if (graph.isDefCollider(A,D,C)) {            continue;          }          if (!isArrowpointAllowed(graph,D,B)) {            continue;          }          graph.setEndpoint(D,B,Endpoint.ARROW);          changeFlag=true;        }      }    }  }}  }
class C{  public static boolean scrub(final Intent intent){  if (null == intent) {    return false;  }  return scrub(intent.getExtras());}  }
class C{  public boolean isCollection(String target){  return target.endsWith("/");}  }
class C{  public static Test suite(){  return (new TestSuite(ForEachITCase.class));}  }
class C{  public AsymmetricCipherKeyPair generateKeyPair(){  int N=params.N;  int q=params.q;  int df=params.df;  int df1=params.df1;  int df2=params.df2;  int df3=params.df3;  int dg=params.dg;  boolean fastFp=params.fastFp;  boolean sparse=params.sparse;  Polynomial t;  IntegerPolynomial fq;  IntegerPolynomial fp=null;  while (true) {    IntegerPolynomial f;    if (fastFp) {      t=params.polyType == NTRUParameters.TERNARY_POLYNOMIAL_TYPE_SIMPLE ? Util.generateRandomTernary(N,df,df,sparse,params.getRandom()) : ProductFormPolynomial.generateRandom(N,df1,df2,df3,df3,params.getRandom());      f=t.toIntegerPolynomial();      f.mult(3);      f.coeffs[0]+=1;    } else {      t=params.polyType == NTRUParameters.TERNARY_POLYNOMIAL_TYPE_SIMPLE ? Util.generateRandomTernary(N,df,df - 1,sparse,params.getRandom()) : ProductFormPolynomial.generateRandom(N,df1,df2,df3,df3 - 1,params.getRandom());      f=t.toIntegerPolynomial();      fp=f.invertF3();      if (fp == null) {        continue;      }    }    fq=f.invertFq(q);    if (fq == null) {      continue;    }    break;  }  if (fastFp) {    fp=new IntegerPolynomial(N);    fp.coeffs[0]=1;  }  DenseTernaryPolynomial g;  while (true) {    g=DenseTernaryPolynomial.generateRandom(N,dg,dg - 1,params.getRandom());    if (g.invertFq(q) != null) {      break;    }  }  IntegerPolynomial h=g.mult(fq,q);  h.mult3(q);  h.ensurePositive(q);  g.clear();  fq.clear();  NTRUEncryptionPrivateKeyParameters priv=new NTRUEncryptionPrivateKeyParameters(h,t,fp,params.getEncryptionParameters());  NTRUEncryptionPublicKeyParameters pub=new NTRUEncryptionPublicKeyParameters(h,params.getEncryptionParameters());  return new AsymmetricCipherKeyPair(pub,priv);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.791 -0500",hash_original_method="549F69CADB3AF439FF99C26DCF97EF61",hash_generated_method="CEBA3986A95DFF69F8177CC349644074") public OrganizationParser(String organization){  super(organization);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  Object[] extractVariableArguments(StmtBody stmtBody,Stmt stmt){  InvokeExpr invokeExpr=stmt.getInvokeExpr();  logger.debug("invokeExpr args {} ",invokeExpr.getArgs());  Chain<Unit> units=stmtBody.getUnits();  List<ValueBox> defBoxList=stmt.getDefBoxes();  ValueBox idValueBox=invokeExpr.getArgBox(0);  ValueBox objArrayBox=invokeExpr.getArgBox(1);  ValueBox assignToBox=null;  Value objectArray=objArrayBox.getValue();  if (defBoxList != null && defBoxList.size() > 0)   assignToBox=defBoxList.get(0);  logger.debug("DefBoxes: {} ",stmt.getDefBoxes());  if (idValueBox == null) {    logger.debug("Couldnot get boxes for replacement ");    return null;  }  List<String> argList=new LinkedList<String>();  Stmt prevStatement=(Stmt)units.getPredOf(stmt);  HashBiMap<Value,Value> map=HashBiMap.create();  String objectPattern=String.format("%s[",objectArray.toString());  String objectName=objectArray.toString();  List<Value> valueList=new LinkedList<Value>();  while (prevStatement != null) {    logger.debug("prevStatement {} ",prevStatement);    if (!(prevStatement instanceof AssignStmt)) {      prevStatement=(Stmt)units.getPredOf(prevStatement);      continue;    }    AssignStmt assignStmt=(AssignStmt)prevStatement;    defBoxList=prevStatement.getDefBoxes();    Value leftSide=assignStmt.getLeftOp();    Value rightSide=assignStmt.getRightOp();    String leftSideName=leftSide.toString();    if (leftSideName.startsWith(objectPattern) || map.inverse().containsKey(leftSide)) {      if (leftSideName.startsWith(objectPattern))       valueList.add(leftSide);      map.put(leftSide,rightSide);      logger.debug("added");    }    prevStatement=(Stmt)units.getPredOf(prevStatement);  }  if (valueList.size() == 0)   return null;  Collections.reverse(valueList);  Object[] objArray=new Object[valueList.size()];  for (int i=0; i < valueList.size(); i++) {    Value obj=valueList.get(i);    Value assignedFrom=map.get(obj);    while (map.containsKey(assignedFrom))     assignedFrom=map.get(assignedFrom);    String varTypeName=assignedFrom.getType().toString();    logger.debug("Type {} => {} ",assignedFrom.getType(),assignedFrom.getType().toString());    if (!varTypeName.startsWith("java.lang.")) {      logger.info("not java.lang objects, give up ");      return null;    }    if (assignedFrom.getType().equals(RefType.v("java.lang.String"))) {      if (!(assignedFrom instanceof StringConstant)) {        logger.debug("String {} is not constant ",assignedFrom);        return null;      }      objArray[i]=assignedFrom.toString().replaceAll("\"","");      logger.debug("String constant => {} ",objArray[i]);      continue;    }    logger.debug("varTypeName {} ",varTypeName);    Value paramValue=((ValueBox)assignedFrom.getUseBoxes().get(0)).getValue();    logger.debug("useboxes {} ",assignedFrom.getUseBoxes());    if (paramValue instanceof Immediate) {      try {        Class clz=Class.forName(assignedFrom.getType().toString());        Class[] paramString=new Class[]{String.class};        logger.debug("Immediate => {}, type {} ",paramValue,paramValue.getType());        Method method=clz.getDeclaredMethod("valueOf",paramString);        Object data=method.invoke(null,paramValue.toString());        objArray[i]=data;      } catch (      Exception ex) {        logger.debug("Exception {} ",ex);        return null;      }    }  }  return objArray;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(final String... args){  final BCryptPasswordEncoderUtil encoderUtil=new BCryptPasswordEncoderUtil();  for (  final String arg : args) {    final String encodedText=encoderUtil.encode(arg);    final String message=String.format(ENCODED_FORMAT,arg,encodedText);    encoderUtil.write(message);  }  encoderUtil.close();}  }
class C{  private void printMessage(final String message,final boolean showConsole){  final String messageFormat="default stream: {0}";  final String messageLog=MessageFormat.format(messageFormat,message);  log.debug(messageLog);  getDefaultStream().println(message);  if (showConsole) {    showConsole();  }}  }
class C{  private void commitChanges(){  hopfieldPropsPanel.commitChanges();  inputPanel.commitChanges();}  }
class C{  public void buildEdgeLists(){  LOG.info("Building edge lists from edges...");  outgoingEdges=new ArrayList<>(vertexStore.getVertexCount());  incomingEdges=new ArrayList<>(vertexStore.getVertexCount());  for (int v=0; v < vertexStore.getVertexCount(); v++) {    outgoingEdges.add(new TIntArrayList(4));    incomingEdges.add(new TIntArrayList(4));  }  Edge edge=edgeStore.getCursor();  while (edge.advance()) {    outgoingEdges.get(edge.getFromVertex()).add(edge.edgeIndex);    incomingEdges.get(edge.getToVertex()).add(edge.edgeIndex);  }  LOG.info("Done building edge lists.");}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"ROUTE_LINE_NODE_TABLE\" ("+ "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "\"ROUTE_LINE_TYPE\" INTEGER);");}  }
class C{  public void assertEqual(Object expected,Object actual){  TestUtils.assertEqual(expected,actual);}  }
class C{  private boolean isCollapsed(){  return mTabSpinner != null && mTabSpinner.getParent() == this;}  }
class C{  public Matrix4d shadow(double lightX,double lightY,double lightZ,double lightW,double a,double b,double c,double d){  return shadow(lightX,lightY,lightZ,lightW,a,b,c,d,this);}  }
class C{  public static SpanQuery spanFirstQuery(SpanQuery query,int end){  return spanQuery(new SpanFirstQuery(query,end));}  }
class C{  @Override public boolean check(final CertificateToken certificateToken){  if (children == null) {    return false;  }  for (  final Condition condition : children) {    boolean checkResult=condition.check(certificateToken);    if (!checkResult) {      return false;    }  }  return true;}  }
class C{  @Override public String generateStart(){  return "";}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ASSOCIATION_END___MULTIPLICITY_1:    getMultiplicity_1().clear();  return;case UmplePackage.ASSOCIATION_END___TYPE_1:setType_1(TYPE_1_EDEFAULT);return;case UmplePackage.ASSOCIATION_END___ROLE_NAME_1:setRoleName_1(ROLE_NAME_1_EDEFAULT);return;case UmplePackage.ASSOCIATION_END___IS_SORTED_1:getIsSorted_1().clear();return;}super.eUnset(featureID);}  }
class C{  public String addKindParameter(String url,String kind){  if (url.contains("?")) {    return url + "&kind=" + kind;  } else {    return url + "?kind=" + kind;  }}  }
class C{  public void testUrlValid(){  setParameterToInitMockMethod("http://myurl.com/",TestSolution.PASSED);  SeoRule01081 test=new SeoRule01081();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public static double nextCauchy(MersenneTwisterFast randomGenerator){  return Math.tan(Math.PI * randomGenerator.nextDouble());}  }
class C{  private static int lengthOfMimeNames(String val){  int len=val.indexOf(' ');  if (len < 0)   len=val.length();  return len;}  }
class C{  void handleRetainedMessage(ServerMessage message,String address,boolean reset) throws Exception {  SimpleString retainAddress=new SimpleString(MQTTUtil.convertMQTTAddressFilterToCoreRetain(address));  Queue queue=session.getServer().locateQueue(retainAddress);  if (queue == null) {    queue=session.getServerSession().createQueue(retainAddress,retainAddress,null,false,true);  }  message.setAddress(retainAddress);  Iterator<MessageReference> iterator=queue.iterator();synchronized (iterator) {    if (iterator.hasNext()) {      Long messageId=iterator.next().getMessage().getMessageID();      queue.deleteReference(messageId);    }    if (!reset) {      session.getServerSession().send(message.copy(),true);    }  }}  }
class C{  public void testGetRandomColor(){  try {    ArrayList<Integer> valueCheck=new ArrayList<>();    int colorSize=MaterialPalettes.getAllColors().size();    Log.d("RandomTest","Color size:" + colorSize);    for (int i=0; i < colorSize; i++) {      Integer color=MaterialPalettes.getRandomColorNonRepeating();      if (valueCheck.contains(color)) {        fail();      } else {        valueCheck.add(color);      }    }  } catch (  IllegalAccessException iae) {    fail();  }}  }
class C{  private void assertFiniteStringsRecursive(Automaton automaton,List<IntsRef> actual){  Set<IntsRef> expected=AutomatonTestUtil.getFiniteStringsRecursive(automaton,-1);  assertEquals(expected.size(),actual.size());  assertEquals(expected,new HashSet<>(actual));}  }
class C{  private void doubleCapacity(){  int p=head;  int n=elements.length;  int r=n - p;  int newCapacity=n << 1;  if (newCapacity < 0)   throw new IllegalStateException("Sorry, deque too big");  Object[] a=new Object[newCapacity];  System.arraycopy(elements,p,a,0,r);  System.arraycopy(elements,0,a,r,p);  elements=a;  head=0;  tail=n;}  }
class C{  public static Dog maxDog(Dog[] dogs){  Dog maxDog=dogs[0];  for (  Dog d : dogs) {    if (d.size > maxDog.size) {      maxDog=d;    }  }  return maxDog;}  }
class C{  public final void walkGraph(Hashtable semNodesTable){  Integer uid=new Integer(myUID);  if (semNodesTable.get(uid) != null)   return;  semNodesTable.put(new Integer(myUID),this);}  }
class C{  @Override public int size(){  return size;}  }
class C{  protected String buildQualifierRegex(String qualifierValue){  StringBuilder sb=new StringBuilder();  sb.append("^");  sb.append(qualifierValue);  sb.append("$");  return sb.toString();}  }
class C{  public static void writeTo(MimeMessage message,OutputStream headerOs,OutputStream bodyOs) throws IOException, MessagingException {  writeTo(message,headerOs,bodyOs,null);}  }
class C{  public void remove(byte[] id){  ByteBuffer idBuffer=ByteBuffer.wrap(id);  while (idBuffer.hasRemaining()) {switch (idBuffer.get()) {case 0:      int len=DataUtils.readVarInt(idBuffer);    idBuffer.position(idBuffer.position() + len);  break;case 1:DataUtils.readVarInt(idBuffer);long k=DataUtils.readVarLong(idBuffer);map.remove(k);break;case 2:DataUtils.readVarLong(idBuffer);long k2=DataUtils.readVarLong(idBuffer);remove(map.get(k2));map.remove(k2);break;default :throw DataUtils.newIllegalArgumentException("Unsupported id {0}",Arrays.toString(id));}}}  }
class C{  public boolean hasDirection(){  return directionRef != null;}  }
class C{  public List<Axis> A(boolean visibleOnly){  if (!visibleOnly)   return A();  ArrayList<Axis> axes=new ArrayList<Axis>();  try {    for (    DimensionIndex index : universe.getDomainHierarchy(domain,true).getDimensionIndexes(universe.getContext())) {      if (hasBookmark()) {        BookmarkConfig config=getBookmarkConfig();        if (config != null) {          if (config.getAvailableDimensions() != null) {            String check=index.getAxis().prettyPrint(new PrettyPrintOptions(ReferenceStyle.IDENTIFIER,null));            for (            String available : config.getAvailableDimensions()) {              if (check.startsWith(available)) {                axes.add(index.getAxis());              }            }          } else {            axes.add(index.getAxis());          }        }      } else {        axes.add(index.getAxis());      }    }  } catch (  ComputingException|InterruptedException e) {  }  return axes;}  }
class C{  public PTBLexer(Reader r,FeatureLabelTokenFactory tf,boolean tokenizeCRs){  this(r,tf,tokenizeCRs,false);}  }
class C{  public void displaySession(int position){  try {    Intent intent=new Intent(this,StreamingSessionView.class);    String sessionId=sessions.get(position).getSessionId();    intent.putExtra(StreamingSessionView.EXTRA_MODE,StreamingSessionView.MODE_OPEN);    intent.putExtra(StreamingSessionView.EXTRA_SESSION_ID,sessionId);    startActivity(intent);  } catch (  RcsServiceException e) {    showExceptionThenExit(e);  }}  }
class C{  public void connect(View view){  EditText text=(EditText)findViewById(R.id.userText);  String user=text.getText().toString().trim();  text=(EditText)findViewById(R.id.passwordText);  String password=text.getText().toString().trim();  UserConfig config=new UserConfig();  config.user=user;  config.password=password;  HttpConnectAction action=new HttpConnectAction(this,config,true);  action.execute();}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  float d;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Float_info cu=(CONSTANT_Float_info)cp;  d=convert() - cu.convert();  return ((d > 0.0) ? 1 : ((d < 0.0) ? -1 : 0));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(getFile(stack).mkdirs());}  }
class C{  public static Offset topRight(){  return new Offset(WorldWind.OFFSET_FRACTION,1.0,WorldWind.OFFSET_FRACTION,1.0);}  }
class C{  protected void parseArguments(final String... args){  try {    OptionSet options=getParser().parse(args);    parseCommand(args);    parseMemberName(args);    setAssignBuckets(options.has("assign-buckets"));    setDebug(options.has("debug"));    setDisableDefaultServer(options.has("disable-default-server"));    setForce(options.has("force"));    setHelp(options.has("help"));    setRebalance(options.has("rebalance"));    setRedirectOutput(options.has("redirect-output"));    if (options.hasArgument(CliStrings.START_SERVER__CRITICAL__HEAP__PERCENTAGE)) {      setCriticalHeapPercentage(Float.parseFloat(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__CRITICAL__HEAP__PERCENTAGE))));    }    if (options.hasArgument(CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE)) {      setEvictionHeapPercentage(Float.parseFloat(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE))));    }    if (options.hasArgument(CliStrings.START_SERVER__CRITICAL_OFF_HEAP_PERCENTAGE)) {      setCriticalOffHeapPercentage(Float.parseFloat(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__CRITICAL_OFF_HEAP_PERCENTAGE))));    }    if (options.hasArgument(CliStrings.START_SERVER__EVICTION_OFF_HEAP_PERCENTAGE)) {      setEvictionOffHeapPercentage(Float.parseFloat(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__EVICTION_OFF_HEAP_PERCENTAGE))));    }    if (options.hasArgument(CliStrings.START_SERVER__MAX__CONNECTIONS)) {      setMaxConnections(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__MAX__CONNECTIONS))));    }    if (options.hasArgument(CliStrings.START_SERVER__MAX__MESSAGE__COUNT)) {      setMaxConnections(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__MAX__MESSAGE__COUNT))));    }    if (options.hasArgument(CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE)) {      setMaxConnections(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE))));    }    if (options.hasArgument(CliStrings.START_SERVER__SOCKET__BUFFER__SIZE)) {      setMaxConnections(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__SOCKET__BUFFER__SIZE))));    }    if (options.hasArgument(CliStrings.START_SERVER__MAX__THREADS)) {      setMaxThreads(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__MAX__THREADS))));    }    if (!isHelping()) {      if (options.has("dir")) {        setWorkingDirectory(ObjectUtils.toString(options.valueOf("dir")));      }      if (options.has("pid")) {        setPid((Integer)options.valueOf("pid"));      }      if (options.has(SERVER_BIND_ADDRESS)) {        setServerBindAddress(ObjectUtils.toString(options.valueOf(SERVER_BIND_ADDRESS)));      }      if (options.has("server-port")) {        setServerPort((Integer)options.valueOf("server-port"));      }      if (options.has("spring-xml-location")) {        setSpringXmlLocation(ObjectUtils.toString(options.valueOf("spring-xml-location")));      }      if (options.has("version")) {        setCommand(Command.VERSION);      }    }    if (options.hasArgument(CliStrings.START_SERVER__CRITICAL__HEAP__PERCENTAGE)) {      setCriticalHeapPercentage(Float.parseFloat(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__CRITICAL__HEAP__PERCENTAGE))));    }    if (options.hasArgument(CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE)) {      setEvictionHeapPercentage(Float.parseFloat(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE))));    }    if (options.hasArgument(CliStrings.START_SERVER__MAX__CONNECTIONS)) {      setMaxConnections(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__MAX__CONNECTIONS))));    }    if (options.hasArgument(CliStrings.START_SERVER__MAX__MESSAGE__COUNT)) {      setMaxMessageCount(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__MAX__MESSAGE__COUNT))));    }    if (options.hasArgument(CliStrings.START_SERVER__MAX__THREADS)) {      setMaxThreads(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__MAX__THREADS))));    }    if (options.hasArgument(CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE)) {      setMessageTimeToLive(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE))));    }    if (options.hasArgument(CliStrings.START_SERVER__SOCKET__BUFFER__SIZE)) {      setSocketBufferSize(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__SOCKET__BUFFER__SIZE))));    }    if (options.hasArgument(CliStrings.START_SERVER__HOSTNAME__FOR__CLIENTS)) {      setHostNameForClients(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__HOSTNAME__FOR__CLIENTS)));    }  } catch (  OptionException e) {    throw new IllegalArgumentException(LocalizedStrings.Launcher_Builder_PARSE_COMMAND_LINE_ARGUMENT_ERROR_MESSAGE.toLocalizedString("Server",e.getMessage()),e);  }catch (  Exception e) {    throw new RuntimeException(e.getMessage(),e);  }}  }
class C{  public CubePortrayal3D(double scale){  this(Color.white,scale);}  }
class C{  public void fireStatusUpdate(int status){  fireStatusUpdate(new LayerStatusEvent(this,status));}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'USER' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'USER_NAME' TEXT,"+ "'UID' TEXT,"+ "'TOKEN' TEXT,"+ "'ICON' TEXT,"+ "'SEX' INTEGER,"+ "'COOKIE' TEXT,"+ "'REGISTER_TIME' TEXT,"+ "'LOCATION' TEXT,"+ "'SCHOOL' TEXT,"+ "'THREAD_URL' TEXT,"+ "'POST_URL' TEXT,"+ "'NICK_NAME_URL' TEXT);");}  }
class C{  private void clearRefsForUpdatedEntities(OperationGroup updateGroup){  logStep("updating references for updated entities");  for (  Entity en : updateGroup.getEntities()) {    en.clear();  }}  }
class C{  public JDBCPreparedStatement duplicate(){  return new JDBCPreparedStatement(connection,sql,executableStatement);}  }
class C{  private void readVersion(InputNode node,Object source,Schema schema) throws Exception {  Label label=schema.getVersion();  Class expect=type.getType();  if (label != null) {    String name=label.getName();    NodeMap<InputNode> map=node.getAttributes();    InputNode value=map.remove(name);    if (value != null) {      readVersion(value,source,label);    } else {      Version version=context.getVersion(expect);      Double start=revision.getDefault();      Double expected=version.revision();      criteria.set(label,start);      revision.compare(expected,start);    }  }}  }
class C{  private void handleSubStage(EnumerationContext ctx){switch (ctx.subStage) {case LIST_REMOTE_VMS:    enumerate(ctx);  break;case QUERY_LOCAL_VMS:queryForComputeStates(ctx,ctx.virtualMachines);break;case UPDATE_COMPUTESTATE_COMPUTEDESCRIPTION_DISK:update(ctx);break;case CREATE_LOCAL_VMS:create(ctx);break;case DELETE_LOCAL_VMS:delete(ctx);break;case FINISHED:ctx.stage=EnumerationStages.FINISHED;handleEnumerationRequest(ctx);break;default :String msg=String.format("Unknown GCP enumeration sub-stage %s ",ctx.subStage.toString());ctx.error=new IllegalStateException(msg);ctx.stage=EnumerationStages.ERROR;handleEnumerationRequest(ctx);}}  }
class C{  public int sectorToBlock(int sectorIndex){  if (sectorIndex < 32) {    return sectorIndex * 4;  } else {    return 32 * 4 + (sectorIndex - 32) * 16;  }}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {  setDoctypeSystem(systemId);  setDoctypePublic(publicId);  m_elemContext.m_elementName=name;  m_inDoctype=true;}  }
class C{  public void editButtonActionPerformed(){  nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  nodeAddrStatic.setText(Integer.toString(nodeAddress));  nodeAddrField.setVisible(false);  nodeAddrStatic.setVisible(true);  nodeType=curNode.getNodeType();  nodeTypeBox.setSelectedIndex(nodeType);  editMode=true;  addButton.setVisible(false);  editButton.setVisible(false);  deleteButton.setVisible(false);  doneButton.setVisible(false);  updateButton.setVisible(true);  cancelButton.setVisible(true);  statusText1.setText(editStatus1);  statusText2.setText(editStatus2);  statusText3.setText(editStatus3);}  }
class C{  public void addGenre(MediaGenres newValue){  if (!genresForAccess.contains(newValue)) {    genresForAccess.add(newValue);    if (!genres.contains(newValue.name())) {      genres.add(newValue.name());    }    firePropertyChange(GENRE,null,newValue);    firePropertyChange(GENRES_AS_STRING,null,newValue);  }}  }
class C{  public SampleResourceVisitor(String nodeType){  this.nodeType=nodeType;}  }
class C{  private void disableUnusablePreferences(final int quality,MutableBoolean allowBiometric){  final PreferenceScreen entries=getPreferenceScreen();  final boolean onlyShowFallback=getActivity().getIntent().getBooleanExtra(LockPatternUtils.LOCKSCREEN_BIOMETRIC_WEAK_FALLBACK,false);  final boolean weakBiometricAvailable=mChooseLockSettingsHelper.utils().isBiometricWeakInstalled();  UserManager mUm=(UserManager)getSystemService(Context.USER_SERVICE);  List<UserInfo> users=mUm.getUsers(true);  final boolean singleUser=users.size() == 1;  for (int i=entries.getPreferenceCount() - 1; i >= 0; --i) {    Preference pref=entries.getPreference(i);    if (pref instanceof PreferenceScreen) {      final String key=((PreferenceScreen)pref).getKey();      boolean enabled=true;      boolean visible=true;      if (KEY_UNLOCK_SET_OFF.equals(key)) {        enabled=quality <= DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED;        visible=singleUser;      } else       if (KEY_UNLOCK_SET_NONE.equals(key)) {        enabled=quality <= DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED;      } else       if (KEY_UNLOCK_SET_BIOMETRIC_WEAK.equals(key)) {        enabled=quality <= DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK || allowBiometric.value;        visible=weakBiometricAvailable;      } else       if (KEY_UNLOCK_SET_PATTERN.equals(key)) {        enabled=quality <= DevicePolicyManager.PASSWORD_QUALITY_SOMETHING;      } else       if (KEY_UNLOCK_SET_PIN.equals(key)) {        enabled=quality <= DevicePolicyManager.PASSWORD_QUALITY_NUMERIC;      } else       if (KEY_UNLOCK_SET_PASSWORD.equals(key)) {        enabled=quality <= DevicePolicyManager.PASSWORD_QUALITY_COMPLEX;      }      if (!visible || (onlyShowFallback && !allowedForFallback(key))) {        entries.removePreference(pref);      } else       if (!enabled) {        pref.setSummary(R.string.unlock_set_unlock_disabled_summary);        pref.setEnabled(false);      }    }  }}  }
class C{  protected void fireStartDoc() throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_STARTDOCUMENT);  }}  }
class C{  public HexNumberFormat(int digits){  super();  this.m_numDigits=digits;}  }
class C{  public LdapURL(String url) throws NamingException {  super();  try {    init(url);    useSsl=scheme.equalsIgnoreCase("ldaps");    if (!(scheme.equalsIgnoreCase("ldap") || useSsl)) {      throw new MalformedURLException("Not an LDAP URL: " + url);    }    parsePathAndQuery();  } catch (  MalformedURLException e) {    NamingException ne=new NamingException("Cannot parse url: " + url);    ne.setRootCause(e);    throw ne;  }catch (  UnsupportedEncodingException e) {    NamingException ne=new NamingException("Cannot parse url: " + url);    ne.setRootCause(e);    throw ne;  }}  }
class C{  @Override public MemBufferHolder<VolatileMemAllocator> createBuffer(long size,boolean autoreclaim){  MemBufferHolder<VolatileMemAllocator> ret=null;  ByteBuffer bb=m_vmasvc.createByteBuffer(m_nid,size);  if (null == bb && m_activegc) {    m_bufcollector.waitReclaimCoolDown(m_gctimeout);    bb=m_vmasvc.createByteBuffer(m_nid,size);  }  if (null != bb) {    ret=new MemBufferHolder<VolatileMemAllocator>(this,bb);    ret.setCollector(m_bufcollector);    if (autoreclaim) {      m_bufcollector.register(ret);    }  }  return ret;}  }
class C{  public static void check(boolean condition,String errorMsg) throws RuntimeException {  if (!condition) {    throw new RuntimeException(errorMsg);  }}  }
class C{  public final int size(){  return arr.length;}  }
class C{  void printTabuList(){  for (int i=0; i < m_nTabuList; i++) {    Operation o=m_oTabuList[i];    if (o != null) {      if (o.m_nOperation == 0) {        System.out.print(" +(");      } else {        System.out.print(" -(");      }      System.out.print(o.m_nTail + "->" + o.m_nHead+ ")");    }  }  System.out.println();}  }
class C{  public static final void writeLittleEndian(int value,byte[] array,int pos){  array[pos++]=(byte)(value);  array[pos++]=(byte)((value >>> 8));  array[pos++]=(byte)((value >>> 16));  array[pos++]=(byte)((value >>> 24));}  }
class C{  protected void write(final String str){  if (!record) {    return;  }  if (num == null || history == null) {    newline=System.getProperty("line.separator");    num=new DecimalFormat("#0.00#");    history=new StringBuffer(1000);    history.append("Time below denotes the simulation time.");    history.append(System.getProperty("line.separator"));    history.append("Time (sec)       Description Cloudlet #" + cloudletId);    history.append(System.getProperty("line.separator"));    history.append("------------------------------------------");    history.append(System.getProperty("line.separator"));    history.append(num.format(CloudSim.clock()));    history.append("   Creates Cloudlet ID #" + cloudletId);    history.append(System.getProperty("line.separator"));  }  history.append(num.format(CloudSim.clock()));  history.append("   " + str + newline);}  }
class C{  public void testPreferredUnits_imperial(){  testPreferredUnits(R.string.unit_mile);}  }
class C{  private void handleSavePayment(long orgKey,long triggerDefinitionKey) throws Exception {  ResourceHolder holder=getTriggerProcesses(triggerDefinitionKey);  ResultSet processes=holder.getRs();  while (processes.next()) {    writeOrgKeyIdentifierForProcess(orgKey,processes);  }  holder.close();}  }
class C{  public Monitor skip(){  if (monData.enabled) {synchronized (monData) {      monData.skip();    }  }  return this;}  }
class C{  @Reference(authors="Erich Schubert, Arthur Zimek and Hans-Peter Kriegel",title="Geodetic Distance Queries on R-Trees for Indexing Geographic Data",booktitle="13th Int. Symposium on Advances in Spatial and Temporal Databases",url="http://dx.doi.org/10.1007/978-3-642-40235-7_9") public static double latlngMinDistRad(double plat,double plng,double rminlat,double rminlng,double rmaxlat,double rmaxlng){  if ((rminlat >= rmaxlat) && (rminlng >= rmaxlng)) {    return haversineFormulaRad(rminlat,rminlng,plat,plng);  }  if (rminlng <= plng && plng <= rmaxlng) {    if (rminlat <= plat && plat <= rmaxlat) {      return 0;    }    if (plat < rminlat) {      return rminlat - plat;    } else {      return plat - rmaxlat;    }  }  double lngE=rminlng - plng;  if (lngE < 0) {    lngE+=MathUtil.TWOPI;  }  double lngW=rmaxlng - plng;  if (lngW > 0) {    lngW-=MathUtil.TWOPI;  }  if (lngE <= -lngW) {    final double clngD=Math.cos(lngE);    final double tlatQ=Math.tan(plat);    if (lngE > MathUtil.HALFPI) {      final double tlatm=Math.tan((rmaxlat + rminlat) * .5);      if (tlatQ >= tlatm * clngD) {        return haversineFormulaRad(plat,plng,rmaxlat,rminlng);      } else {        return haversineFormulaRad(plat,plng,rminlat,rminlng);      }    }    final double tlatN=Math.tan(rmaxlat);    if (tlatQ >= tlatN * clngD) {      return haversineFormulaRad(plat,plng,rmaxlat,rminlng);    }    final double tlatS=Math.tan(rminlat);    if (tlatQ <= tlatS * clngD) {      return haversineFormulaRad(plat,plng,rminlat,rminlng);    }    final double slngD=MathUtil.cosToSin(lngE,clngD);    return Math.asin(Math.cos(plat) * slngD);  } else {    final double clngD=Math.cos(lngW);    final double tlatQ=Math.tan(plat);    if (-lngW > MathUtil.HALFPI) {      final double tlatm=Math.tan((rmaxlat + rminlat) * .5);      if (tlatQ >= tlatm * clngD) {        return haversineFormulaRad(plat,plng,rmaxlat,rmaxlng);      } else {        return haversineFormulaRad(plat,plng,rminlat,rmaxlng);      }    }    final double tlatN=Math.tan(rmaxlat);    if (tlatQ >= tlatN * clngD) {      return haversineFormulaRad(plat,plng,rmaxlat,rmaxlng);    }    final double tlatS=Math.tan(rminlat);    if (tlatQ <= tlatS * clngD) {      return haversineFormulaRad(plat,plng,rminlat,rmaxlng);    }    final double slngD=MathUtil.cosToSin(lngW,clngD);    return Math.asin(-Math.cos(plat) * slngD);  }}  }
class C{  private static void fixPrng(){  if (!prngFixed.get()) {synchronized (PrngFixes.class) {      if (!prngFixed.get()) {        PrngFixes.apply();        prngFixed.set(true);      }    }  }}  }
class C{  @Override public Instances defineDataFormat() throws Exception {  Random random=new Random(getSeed());  setRandom(random);  Instances dataset;  ArrayList<Attribute> attributes=new ArrayList<Attribute>(3);  Attribute attribute;  boolean classFlag=getClassFlag();  ArrayList<String> classValues=null;  if (classFlag) {    classValues=new ArrayList<String>(m_NumClusters);  }  for (int i=0; i < getNumAttributes(); i++) {    attribute=new Attribute("X" + i);    attributes.add(attribute);  }  if (classFlag) {    for (int i=0; i < m_NumClusters; i++) {      classValues.add("c" + i);    }    attribute=new Attribute("class",classValues);    attributes.add(attribute);  }  dataset=new Instances(getRelationNameToUse(),attributes,0);  if (classFlag) {    dataset.setClassIndex(getNumAttributes());  }  Instances format=new Instances(dataset,0);  setDatasetFormat(format);  m_ClusterList=defineClusters(random);  return dataset;}  }
class C{  public double unstandardized(double[] sample1,double[] sample2){  final int n1=sample1.length, n2=sample2.length, N=n1 + n2;  final double[] combined=new double[N];  Arrays.sort(sample1);  System.arraycopy(sample1,0,combined,0,n1);  Arrays.sort(sample2);  System.arraycopy(sample2,0,combined,n1,n2);  Arrays.sort(combined);  int m1=0, m2=0;  double Ak1=0., Ak2=0.;  for (int j=0; j < N; ) {    final double x=combined[j++];    int lj=1;    while (j < N && combined[j] == x) {      ++j;      ++lj;    }    final double bi=j - .5 * lj;{      assert (m1 >= n1 || sample1[m1] >= x);      int f1=0;      while (m1 < n1 && sample1[m1] == x) {        ++m1;        ++f1;      }      double v=N * (m1 - .5 * f1) - n1 * bi;      Ak1+=lj * v * v / (bi * (N - bi) - .25 * N * lj);    }{      assert (m2 >= n2 || sample2[m2] >= x);      int f2=0;      while (m2 < n2 && sample2[m2] == x) {        ++m2;        ++f2;      }      double v=N * (m2 - .5 * f2) - n2 * bi;      Ak2+=lj * v * v / (bi * (N - bi) - .25 * N * lj);    }  }  double A2=Ak1 / n1 + Ak2 / n2;  A2*=(N - 1.) / (N * N);  return A2;}  }
class C{  @Override public void tearDown() throws Exception {  ctag=null;  ftag=null;  rtag=null;  super.tearDown();}  }
class C{  public boolean isServerStopped(){  if (getJettyServer().isStopping() || getJettyServer().isStopped()) {    return true;  } else {    return false;  }}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public static QueryUniqueIdentifiersForFileSystems parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryUniqueIdentifiersForFileSystems object=new QueryUniqueIdentifiersForFileSystems();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryUniqueIdentifiersForFileSystems".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryUniqueIdentifiersForFileSystems)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","fsUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setFsUniqueId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public RedirectException(String message){  super(message);}  }
class C{  public GraphNodeError(Node modelNode){  setModelNode(modelNode);  if (modelNode.getNodeType() != NodeType.ERROR) {    throw new IllegalArgumentException("GraphNodeError requires " + "a GraphNode of type NodeType.ERROR.");  }  setDisplayComp(new ErrorDisplayComp(modelNode.getName()));}  }
class C{  private List<String> filterContent(List<String> contentLines){  contentLines=contentLines.stream().filter(null).map(null).collect(toList());  return contentLines;}  }
class C{  public double clusteringStep(){  for (  Cluster cluster : clusters) {    cluster.reset();  }  reOrganizeFeatures();  recomputeMeans();  return overallStress();}  }
class C{  public static CCSpriteSheet spriteSheet(CCTexture2D tex){  return new CCSpriteSheet(tex,defaultCapacity);}  }
class C{  public void stopListening(){  speechRecognizer.stopListening();}  }
class C{  public Second(Date time,TimeZone zone,Locale locale){  Calendar calendar=Calendar.getInstance(zone,locale);  calendar.setTime(time);  this.second=(byte)calendar.get(Calendar.SECOND);  this.minute=(byte)calendar.get(Calendar.MINUTE);  this.hour=(byte)calendar.get(Calendar.HOUR_OF_DAY);  this.day=new Day(time,zone,locale);  peg(calendar);}  }
class C{  public void removeFieldValues(int fldId) throws Exception {  int idx;  idx=m_multFlds.findIndexById(fldId);  if (idx != -1) {    m_multFlds.removeValues(idx);  } else {    throw new IeciTdException(FolderBaseError.EC_FIELD_IS_NOT_MULT,FolderBaseError.EM_FIELD_IS_NOT_MULT);  }}  }
class C{  protected void doSaveAs(URI uri,IEditorInput editorInput){  (editingDomain.getResourceSet().getResources().get(0)).setURI(uri);  setInputWithNotify(editorInput);  setPartName(editorInput.getName());  IProgressMonitor progressMonitor=getActionBars().getStatusLineManager() != null ? getActionBars().getStatusLineManager().getProgressMonitor() : new NullProgressMonitor();  doSave(progressMonitor);}  }
class C{  private List<TreeElement<JsonElement,JsonElement>> initializeTree(JsonElement jsonElement){  List<TreeElement<JsonElement,JsonElement>> result=new ArrayList<TreeElement<JsonElement,JsonElement>>();  boolean visible=isVisible(jsonElement);  TreeElement<JsonElement,JsonElement> element=null;  if (visible) {    element=new TreeElement<JsonElement,JsonElement>(jsonElement.toString(),jsonElement,JsonElement.class);    getTreeElementMap().put(jsonElement,element);    result.add(element);  }  JsonArray childrenArray=Utils.getChildrenArray(jsonElement);  if (childrenArray != null) {    for (int i=0; i < childrenArray.size(); i++) {      JsonElement childElement=childrenArray.get(i);      if (!Utils.isEmptyJsonObject(childElement)) {        List<TreeElement<JsonElement,JsonElement>> children=initializeTree(childElement);        if (visible) {          for (          TreeElement<JsonElement,JsonElement> child : children) {            element.addChild(child);          }        } else {          result.addAll(children);        }      }    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:07.485 -0500",hash_original_method="62E497D1E15AFECC6C75E1097FD3DEF1",hash_generated_method="8AC45787E7FEC989E71E6363A176932F") public Builder addIndexSetType(Element e,int size,Primitive p){  Entry indexType=new Entry();  indexType.t=null;  indexType.e=e;  indexType.size=size;  indexType.prim=p;  mIndexTypes.addElement(indexType);  return this;}  }
class C{  public boolean isLastIndex(int idx){  return idx == parts.length - 1;}  }
class C{  public TIFFField[] nuevaResolucion() throws Exception {  TIFFField[] tiffFields=new TIFFField[3];  long resolutionX=new Float(resX).longValue();  long resolutionY=new Float(resY).longValue();  tiffFields[0]=new TIFFField(TIFFImageDecoder.TIFF_X_RESOLUTION,TIFFField.TIFF_RATIONAL,1,new long[][]{{resolutionX,1}});  tiffFields[1]=new TIFFField(TIFFImageDecoder.TIFF_Y_RESOLUTION,TIFFField.TIFF_RATIONAL,1,new long[][]{{resolutionY,1}});  tiffFields[2]=new TIFFField(TIFFImageDecoder.TIFF_RESOLUTION_UNIT,TIFFField.TIFF_SHORT,1,new char[]{TIFF_RESOLUTION_INCHES});  return tiffFields;}  }
class C{  public static Object[] createFrom(Collection<?> list){  return createFrom(list,Object.class);}  }
class C{  @Override public String[] listAll(){  ensureOpen();  String[] res=entries.keySet().toArray(new String[entries.size()]);  for (int i=0; i < res.length; i++) {    res[i]=segmentName + res[i];  }  return res;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ASSOCIATION___MODIFIER_1:    setModifier_1((String)newValue);  return;case UmplePackage.ASSOCIATION___ASSOCIATION_END_1:getAssociationEnd_1().clear();getAssociationEnd_1().addAll((Collection<? extends AssociationEnd_>)newValue);return;case UmplePackage.ASSOCIATION___ARROW_1:setArrow_1((String)newValue);return;case UmplePackage.ASSOCIATION___ASSOCIATION_END_2:getAssociationEnd_2().clear();getAssociationEnd_2().addAll((Collection<? extends AssociationEnd_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.199 -0500",hash_original_method="4EC8EF70B227B064D40EEFDD2252C457",hash_generated_method="83ABCC4598E21E5B401D267A4724D136") private void nextChunk() throws IOException {  chunkSize=getChunkSize();  if (chunkSize < 0) {    throw new MalformedChunkCodingException("Negative chunk size");  }  bof=false;  pos=0;  if (chunkSize == 0) {    eof=true;    parseTrailerHeaders();  }}  }
class C{  public static void deleteRecursive(String path,boolean tryOnly){  if (exists(path)) {    if (isDirectory(path)) {      for (      String s : newDirectoryStream(path)) {        deleteRecursive(s,tryOnly);      }    }    if (tryOnly) {      tryDelete(path);    } else {      delete(path);    }  }}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  private StorageUnitNotificationRegistrationEntity createStorageUnitNotificationEntity(NamespaceEntity namespaceEntity,NotificationEventTypeEntity notificationEventTypeEntity,BusinessObjectDefinitionEntity businessObjectDefinitionEntity,FileTypeEntity fileTypeEntity,StorageEntity storageEntity,StorageUnitStatusEntity newStorageUnitStatusEntity,StorageUnitStatusEntity oldStorageUnitStatusEntity,NotificationRegistrationKey key,StorageUnitNotificationFilter storageUnitNotificationFilter,List<JobAction> jobActions,NotificationRegistrationStatusEntity notificationRegistrationStatusEntity){  StorageUnitNotificationRegistrationEntity storageUnitNotificationRegistrationEntity=new StorageUnitNotificationRegistrationEntity();  storageUnitNotificationRegistrationEntity.setNamespace(namespaceEntity);  storageUnitNotificationRegistrationEntity.setName(key.getNotificationName());  storageUnitNotificationRegistrationEntity.setNotificationEventType(notificationEventTypeEntity);  storageUnitNotificationRegistrationEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);  if (StringUtils.isNotBlank(storageUnitNotificationFilter.getBusinessObjectFormatUsage())) {    storageUnitNotificationRegistrationEntity.setUsage(storageUnitNotificationFilter.getBusinessObjectFormatUsage());  }  storageUnitNotificationRegistrationEntity.setFileType(fileTypeEntity);  storageUnitNotificationRegistrationEntity.setBusinessObjectFormatVersion(storageUnitNotificationFilter.getBusinessObjectFormatVersion());  storageUnitNotificationRegistrationEntity.setStorage(storageEntity);  storageUnitNotificationRegistrationEntity.setNewStorageUnitStatus(newStorageUnitStatusEntity);  storageUnitNotificationRegistrationEntity.setOldStorageUnitStatus(oldStorageUnitStatusEntity);  storageUnitNotificationRegistrationEntity.setNotificationRegistrationStatus(notificationRegistrationStatusEntity);  List<NotificationActionEntity> notificationActionEntities=new ArrayList<>();  storageUnitNotificationRegistrationEntity.setNotificationActions(notificationActionEntities);  for (  JobAction jobAction : jobActions) {    JobDefinitionEntity jobDefinitionEntity=jobDefinitionDaoHelper.getJobDefinitionEntity(jobAction.getNamespace(),jobAction.getJobName());    NotificationJobActionEntity notificationJobActionEntity=new NotificationJobActionEntity();    notificationActionEntities.add(notificationJobActionEntity);    notificationJobActionEntity.setJobDefinition(jobDefinitionEntity);    notificationJobActionEntity.setCorrelationData(jobAction.getCorrelationData());    notificationJobActionEntity.setNotificationRegistration(storageUnitNotificationRegistrationEntity);  }  return storageUnitNotificationRegistrationEntity;}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  private String parseFileName(int gen){  int cur=0;  int next=0;  boolean hasUniqueID=false;  boolean hasGeneration=false;  String tempPath=System.getProperty("java.io.tmpdir");  boolean tempPathHasSepEnd=(tempPath == null ? false : tempPath.endsWith(File.separator));  String homePath=System.getProperty("user.home");  boolean homePathHasSepEnd=(homePath == null ? false : homePath.endsWith(File.separator));  StringBuilder sb=new StringBuilder();  pattern=pattern.replace('/',File.separatorChar);  char[] value=pattern.toCharArray();  while ((next=pattern.indexOf('%',cur)) >= 0) {    if (++next < pattern.length()) {switch (value[next]) {case 'g':        sb.append(value,cur,next - cur - 1).append(gen);      hasGeneration=true;    break;case 'u':  sb.append(value,cur,next - cur - 1).append(uniqueID);hasUniqueID=true;break;case 't':sb.append(value,cur,next - cur - 1).append(tempPath);if (!tempPathHasSepEnd) {sb.append(File.separator);}break;case 'h':sb.append(value,cur,next - cur - 1).append(homePath);if (!homePathHasSepEnd) {sb.append(File.separator);}break;case '%':sb.append(value,cur,next - cur - 1).append('%');break;default :sb.append(value,cur,next - cur);}cur=++next;} else {}}sb.append(value,cur,value.length - cur);if (!hasGeneration && count > 1) {sb.append(".").append(gen);}if (!hasUniqueID && uniqueID > 0) {sb.append(".").append(uniqueID);}return sb.toString();}  }
class C{  public static void scaleY(View v,float fromY,float toY,int duration,Animator.AnimatorListener animatorListener){  ObjectAnimator animator=ObjectAnimator.ofFloat(v,View.SCALE_Y,fromY,toY);  animator.setDuration(duration);  if (animatorListener != null) {    animator.addListener(animatorListener);  }  animator.start();}  }
class C{  public void text(String str,float x,float y,float z){  if (z != 0)   translate(0,0,z);  text(str,x,y);  if (z != 0)   translate(0,0,-z);}  }
class C{  public void log(Level level,String message){  log(level,"",message);}  }
class C{  private static XeSource source(final Domain domain) throws IOException {  return new XeDirectives(new Directives().add("domain").add("name").set(domain.name()).up().add("owner").set(domain.owner()).up().up());}  }
class C{  private boolean verifyPublishedDualInetAddress(String nodeId){  DualInetAddress dualAddress=null;  Configuration config=queryConfiguration(Constants.NODE_DUALINETADDR_CONFIG,nodeId);  if (config != null) {    dualAddress=parseInetAddressConfig(config);  }  if ((dualAddress != null) && dualAddress.equals(inetAddressLookupMap.getDualInetAddress())) {    return true;  }  return false;}  }
class C{  public UnsupportedEncodingException(){  super();}  }
class C{  public AmqpReceiver createDurableReceiver(String address,String subscriptionName,String selector) throws Exception {  return createDurableReceiver(address,subscriptionName,selector,false);}  }
class C{  @SuppressWarnings("unchecked") static void updateAutorenewRecurrenceEndTime(DomainResource domain,DateTime newEndTime){  Optional<PollMessage.Autorenew> autorenewPollMessage=Optional.fromNullable(ofy().load().key(domain.getAutorenewPollMessage()).now());  Key<PollMessage.Autorenew> existingAutorenewKey=domain.getAutorenewPollMessage();  PollMessage.Autorenew updatedAutorenewPollMessage=autorenewPollMessage.isPresent() ? autorenewPollMessage.get().asBuilder().setAutorenewEndTime(newEndTime).build() : newAutorenewPollMessage(domain).setId(existingAutorenewKey.getId()).setAutorenewEndTime(newEndTime).setParentKey(existingAutorenewKey.<HistoryEntry>getParent()).build();  if (isAtOrAfter(updatedAutorenewPollMessage.getEventTime(),newEndTime)) {    if (autorenewPollMessage.isPresent()) {      ofy().delete().entity(autorenewPollMessage.get());    }  } else {    ofy().save().entity(updatedAutorenewPollMessage);  }  ofy().save().entity(ofy().load().key(domain.getAutorenewBillingEvent()).now().asBuilder().setRecurrenceEndTime(newEndTime).build());}  }
class C{  public byte[] toByteArray(){  return toProto().toByteArray();}  }
class C{  @Override public boolean onInterceptTouchEvent(MotionEvent ev){  if (!isEnabled()) {    return false;  }  final int action=MotionEventCompat.getActionMasked(ev);switch (action) {case MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP:    mViewDragHelper.cancel();  return false;case MotionEvent.ACTION_DOWN:int index=MotionEventCompat.getActionIndex(ev);mActivePointerId=MotionEventCompat.getPointerId(ev,index);if (mActivePointerId == INVALID_POINTER) {return false;}default :return mViewDragHelper.shouldInterceptTouchEvent(ev);}}  }
class C{  public static void incrementOutput(ISideConfiguration config,TransmissionType type,int side){  int max=config.getConfig().getOutputs(type).size() - 1;  int current=config.getConfig().getOutputs(type).indexOf(config.getConfig().getOutputs(type).get(config.getConfig().getConfig(type)[side]));  if (current < max) {    config.getConfig().getConfig(type)[side]=(byte)(current + 1);  } else   if (current == max) {    config.getConfig().getConfig(type)[side]=0;  }  TileEntity tile=(TileEntity)config;  Coord4D coord=Coord4D.get(tile).getFromSide(ForgeDirection.getOrientation(MekanismUtils.getBaseOrientation(side,config.getOrientation())));  tile.markDirty();}  }
class C{  public static BufferedInputStream newInputStream(URL url,Map parameters) throws MalformedURLException, IOException {  return new BufferedInputStream(configuredInputStream(parameters,url));}  }
class C{  private Builder(org.apache.nutch.storage.WebPage.Builder other){  super(other);}  }
class C{  private int calculateLog2N(int nmax){  int log2n;  log2n=(int)(Math.log(nmax) / Math.log(2.0) + ROUNDING_HALF);  if (nmax > 1 << log2n) {    log2n+=1;  }  return log2n;}  }
class C{  @Override public String toString(){  return "Using kernel matrix from file with name: " + getKernelMatrixFile();}  }
class C{  public VcfRecord peek(){  if (mCurrent.size() == 0) {    throw new IllegalStateException("No more records");  }  return mCurrent.peek();}  }
class C{  public static int startDownloadServiceIfRequired(Context context,PendingIntent notificationClient,Class<?> serviceClass) throws NameNotFoundException {  return DownloaderService.startDownloadServiceIfRequired(context,notificationClient,serviceClass);}  }
class C{  @Override public void spinnerChangeEvent(ChangeEvent ae){  if (ae.getSource() == physicalLocation) {    Reporter l=getReporterFromList();    if (l != null) {      PhysicalLocation.setBeanPhysicalLocation(physicalLocation.getValue(),l);    }  }}  }
class C{  public void releaseColumn(){  column.removePropertyChangeListener(columnListener);  column=null;}  }
class C{  @SuppressWarnings("unchecked") public void toWire(WireFormat.Writer writer) throws IOException {  WireFormatter formatter=HyperLedgerSettings.getInstance().getTxWireFormatter();  if (isPruned())   throw new IOException("No wire format defined for pruned blocks");  header.toWireHeader(writer);  writer.writeVarInt(nodes.size());  for (  MerkleTreeNode t : nodes) {    formatter.toWire((Transaction)t,writer);  }}  }
class C{  public static double fastAbs(double input){  return input < 0 ? -input : input;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void addEventListener(VSDecoderListener listener){  listenerList.add(VSDecoderListener.class,listener);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  @Override public void showDocument(String url){  hostServices.showDocument(url);}  }
class C{  public void updateRowSelection(){  if (getData() instanceof IterableRowsTable) {    selectAll();    int currentRow=((IterableRowsTable)data).getCurrentRow();    setRowSelectionInterval(currentRow,currentRow);  }}  }
class C{  public CDatabaseConfiguration(final IDatabase database,final ListenerProvider<IDatabaseListener> listeners,final String description,final String driver,final String host,final String name,final String user,final String password,final String identity,final boolean autoConnect,final boolean savePassword){  m_database=Preconditions.checkNotNull(database,"IE02401: database argument can not be null");  m_listeners=Preconditions.checkNotNull(listeners,"IE02402: listeners argument can not be null");  m_description=Preconditions.checkNotNull(description,"IE02403: description argument can not be null");  m_driver=Preconditions.checkNotNull(driver,"IE02404: driver argument can not be null");  m_host=Preconditions.checkNotNull(host,"IE02405: host argument can not be null");  m_name=Preconditions.checkNotNull(name,"IE02406: name argument can not be null");  m_user=Preconditions.checkNotNull(user,"IE02407: user argument can not be null");  m_password=Preconditions.checkNotNull(password,"IE02408: password argument can not be null");  m_identity=Preconditions.checkNotNull(identity,"IE00065: identity argument can not be null");  if (m_identity.isEmpty()) {    m_identity="identity";  }  m_autoConnect=autoConnect;  m_savePassword=savePassword;}  }
class C{  public boolean isCurrent(char c){  return str.length() > pos && str.charAt(pos) == c;}  }
class C{  public static KeyStoreData loadDefaultKeystore() throws com.vmware.vim.sso.client.util.exception.SsoKeyStoreOperationException {  return com.vmware.vim.sso.client.TestTokenUtil.loadDefaultKeystore();}  }
class C{  @Override public String stringValue(){  if (fieldsData instanceof String || fieldsData instanceof Number) {    return fieldsData.toString();  } else {    return null;  }}  }
class C{  public static double[] createRandomGridValues(int width,int height,double min,double max,int numIterations,double smoothness){  int numValues=width * height;  double[] values=new double[numValues];  for (int i=0; i < numIterations; i++) {    double offset=1d - (i / (double)numIterations);    int x1=(int)Math.round(Math.random() * (width - 1));    int x2=(int)Math.round(Math.random() * (width - 1));    int y1=(int)Math.round(Math.random() * (height - 1));    int y2=(int)Math.round(Math.random() * (height - 1));    int dx1=x2 - x1;    int dy1=y2 - y1;    for (int y=0; y < height; y++) {      int dy2=y - y1;      for (int x=0; x < width; x++) {        int dx2=x - x1;        if ((dx2 * dy1 - dx1 * dy2) >= 0)         values[x + y * width]+=offset;      }    }  }  smoothValues(width,height,values,smoothness);  scaleValues(values,numValues,min,max);  return values;}  }
class C{  public int detectEncoding(URL testurl){  byte[] rawtext=new byte[10000];  int bytesread=0, byteoffset=0;  int guess=OTHER;  InputStream chinesestream;  try {    chinesestream=testurl.openStream();    while ((bytesread=chinesestream.read(rawtext,byteoffset,rawtext.length - byteoffset)) > 0) {      byteoffset+=bytesread;    }    ;    chinesestream.close();    guess=detectEncoding(rawtext);  } catch (  Exception e) {    System.err.println("Error loading or using URL " + e.toString());    guess=-1;  }  return guess;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.827 -0500",hash_original_method="F2BE86117A689CA9DA89AB2ED7F58DB7",hash_generated_method="E1182E4C8DB3BFB454EEDED9F23B5D39") private void advanceRunState(int targetState){  for (; ; ) {    int c=ctl.get();    if (runStateAtLeast(c,targetState) || ctl.compareAndSet(c,ctlOf(targetState,workerCountOf(c))))     break;  }}  }
class C{  public boolean retainAll(float[] array){  Arrays.sort(array);  float[] set=_set;  byte[] states=_states;  boolean changed=false;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && Arrays.binarySearch(array,set[i]) < 0) {      remove(set[i]);      changed=true;    }  }  return changed;}  }
class C{  public void init(final I18N i18n,final SpPermissionChecker permissionChecker,final SoftwareManagement softwareManagement,final SwMetadataPopupLayout swMetadataPopupLayout,final EntityFactory entityFactory){  this.i18n=i18n;  this.permissionChecker=permissionChecker;  this.softwareManagement=softwareManagement;  this.swMetadataPopupLayout=swMetadataPopupLayout;  this.entityFactory=entityFactory;  createSWMMetadataTable();  addCustomGeneratedColumns();}  }
class C{  public Loan(double annualInterestRate,int numberOfYears,double loanAmount){  this.annualInterestRate=annualInterestRate;  this.numberOfYears=numberOfYears;  this.loanAmount=loanAmount;  loanDate=new java.util.Date();}  }
class C{  private Boolean validate(final DragAndDropEvent event){  final Transferable transferable=event.getTransferable();  final Component compsource=transferable.getSourceComponent();  if (!(compsource instanceof AbstractTable)) {    notification.displayValidationError(i18n.get(SPUILabelDefinitions.ACTION_NOT_ALLOWED));    return false;  }  final TableTransferable tabletransferable=(TableTransferable)transferable;  final AbstractTable<?,?> source=(AbstractTable<?,?>)tabletransferable.getSourceComponent();  if (!validateIfSourceisTargetTable(source) && !checkForTargetUpdatePermission()) {    return false;  }  final Set<?> deletedEntityByTransferable=source.getDeletedEntityByTransferable(tabletransferable);  if (deletedEntityByTransferable.isEmpty()) {    final String actionDidNotWork=i18n.get("message.action.did.not.work",new Object[]{});    notification.displayValidationError(actionDidNotWork);    return false;  }  return true;}  }
class C{  public void populateDAO(Object value,int row,int column){  Tradestrategy element=getData().getTradestrategies().get(row);switch (column) {case 0:{      element.getTradingday().setOpen(((Date)value).getZonedDateTime());      break;    }case 1:{    element.setTrade(new Boolean(((YesNo)value).getCode()));    break;  }case 2:{  element.getContract().setSymbol(((String)value).trim().toUpperCase());  break;}case 3:{element.setSide(((Side)value).getCode());break;}case 4:{if (!Decode.NONE.equals(((Tier)value).getDisplayName())) {element.setTier(((Tier)value).getCode());} else {element.setTier(null);}break;}case 5:{final Strategy strategy=(Strategy)((DAOStrategy)value).getObject();element.setStrategy(strategy);if (strategy.hasStrategyManager()) {this.setValueAt(DAOStrategyManager.newInstance(strategy.getStrategyManager().getName()),row,column + 1);} else {this.setValueAt(DAOStrategyManager.newInstance(Decode.NONE),row,column + 1);}break;}case 6:{element.getStrategy().setStrategyManager((Strategy)((DAOStrategyManager)value).getObject());break;}case 7:{Portfolio portfolio=(Portfolio)((DAOPortfolio)value).getObject();element.setPortfolio(portfolio);break;}case 8:{element.setBarSize(new Integer(((BarSize)value).getCode()));break;}case 9:{element.setChartDays(new Integer(((ChartDays)value).getCode()));break;}case 10:{element.setRiskAmount(((Money)value).getBigDecimalValue());break;}case 11:{break;}case 12:{break;}case 13:{element.setStatus(((TradestrategyStatus)value).getCode());break;}case 14:{element.getContract().setCurrency(((Currency)value).getCode());break;}case 15:{element.getContract().setExchange(((Exchange)value).getCode());break;}case 16:{element.getContract().setPrimaryExchange(((Exchange)value).getCode());break;}case 17:{element.getContract().setSecType(((SECType)value).getCode());break;}case 18:{ZonedDateTime zonedDateTime=((Date)value).getZonedDateTime();zonedDateTime=zonedDateTime.plusMonths(1);zonedDateTime=zonedDateTime.minusDays(1);element.getContract().setExpiry(zonedDateTime);break;}default :{}}element.setLastUpdateDate(TradingCalendar.getDateTimeNowMarketTimeZone());element.setDirty(true);}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (camera != null && previewing) {    previewCallback.setHandler(handler,message);    if (useOneShotPreviewCallback) {      camera.setOneShotPreviewCallback(previewCallback);    } else {      camera.setPreviewCallback(previewCallback);    }  }}  }
class C{  public void hrule(double value,Paint color,String legend,BasicStroke stroke){  LegendText legendText=new LegendText(color,legend);  comments.add(legendText);  plotElements.add(new HRule(value,color,legendText,stroke));}  }
class C{  public IntStream(AbstractDriver driver,String name,int minValue,int maxValue,int zeroValue,int defaultValue,String stringPre,String stringPost,int presentation,int paintStyle,int indexMaxStream,Color colour,boolean summary){  super(driver,name,minValue,maxValue,zeroValue,defaultValue,stringPre,stringPost,presentation,paintStyle,indexMaxStream,colour,summary);  if (VM.BuildWithGCSpy) {    Address tmpName=GCspy.util.getBytes(name);    Address tmpPre=GCspy.util.getBytes(stringPre);    Address tmpPost=GCspy.util.getBytes(stringPost);    sysCall.gcspyStreamInit(stream,streamId,INT_TYPE,tmpName,minValue,maxValue,zeroValue,defaultValue,tmpPre,tmpPost,presentation,paintStyle,indexMaxStream,colour.getRed(),colour.getGreen(),colour.getBlue());  }}  }
class C{  public static Intersection intersector(){  return new Intersection(new MatchFilter.MatchParametersMF(MatchParameters.STRICT),new MatchCollector.SetMatchCollector());}  }
class C{  protected static ValueInjector createParameterExtractorForComplexType(Class<?> injectTargetClass,Type type,Annotation[] annotations){  QueryParam query;  HeaderParam header;  PathParam uriParam;  CookieParam cookie;  FormParam formParam;  if ((query=ClassUtils.findAnnotation(annotations,QueryParam.class)) != null) {    return new GroupValueInjector(RestParameterType.query,type,query.value());  } else   if ((header=ClassUtils.findAnnotation(annotations,HeaderParam.class)) != null) {    return new GroupValueInjector(RestParameterType.header,type,header.value());  } else   if ((formParam=ClassUtils.findAnnotation(annotations,FormParam.class)) != null) {    return new GroupValueInjector(RestParameterType.form,type,formParam.value());  } else   if ((cookie=ClassUtils.findAnnotation(annotations,CookieParam.class)) != null) {    return new GroupValueInjector(RestParameterType.cookie,type,cookie.value());  } else   if ((uriParam=ClassUtils.findAnnotation(annotations,PathParam.class)) != null) {    return new GroupValueInjector(RestParameterType.path,type,uriParam.value());  } else {    return new MessageBodyParamInjector(injectTargetClass,type);  }}  }
class C{  @Override public Address allocateContiguousChunks(int descriptor,Space space,int chunks,Address head){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(spaceIndex(space.getStart()) == SpaceDescriptor.getIndex(descriptor));  int index=SpaceDescriptor.getIndex(descriptor);  Address rtn=highWater.get(index);  Extent extent=Extent.fromIntZeroExtend(chunks << LOG_BYTES_IN_CHUNK);  highWater.set(index,rtn.plus(extent));  RawMemoryFreeList freeList=flMap[spaceIndex(space.getStart())];  if (freeList != null) {    freeList.growFreeList(Conversions.bytesToPages(extent));    int basePage=Conversions.bytesToPages(rtn.diff(baseAddress.get(index)));    for (int offset=0; offset < chunks * PAGES_IN_CHUNK; offset+=PAGES_IN_CHUNK) {      freeList.setUncoalescable(basePage + offset);      freeList.alloc(PAGES_IN_CHUNK,basePage + offset);    }  }  return rtn;}  }
class C{  @Override public void buildClassifier(Instances instances) throws Exception {  boolean noRule=true;  getCapabilities().testWithFail(instances);  Instances data=new Instances(instances);  data.deleteWithMissingClass();  if (data.numAttributes() == 1) {    System.err.println("Cannot build model (only class attribute present in data!), " + "using ZeroR model instead!");    m_ZeroR=new weka.classifiers.rules.ZeroR();    m_ZeroR.buildClassifier(data);    return;  } else {    m_ZeroR=null;  }  Enumeration<Attribute> enu=instances.enumerateAttributes();  while (enu.hasMoreElements()) {    try {      OneRRule r=newRule(enu.nextElement(),data);      if (noRule || r.m_correct > m_rule.m_correct) {        m_rule=r;      }      noRule=false;    } catch (    Exception ex) {    }  }  if (noRule) {    throw new WekaException("No attributes found to work with!");  }}  }
class C{  @Override public double predictQuantile(double percentage){  updateWidth();  double val=Statistics.normalInverse(1.0 - (1.0 - 0.95) / 2);  double min=m_TM.firstKey() - val * m_Width;  double max=m_TM.lastKey() + val * m_Width;  double delta=(max - min) / m_NumIntervals;  double sum=0;  double leftVal=Math.exp(logDensity(min));  for (int i=0; i < m_NumIntervals; i++) {    if (sum >= percentage) {      return min + i * delta;    }    double rightVal=Math.exp(logDensity(min + (i + 1) * delta));    sum+=0.5 * (leftVal + rightVal) * delta;    leftVal=rightVal;  }  return max;}  }
class C{  public static SmsMessage createSmsMessage(Cursor cursor) throws IllegalArgumentException {  SmsMessage smsMessage=new SmsMessage();  try {    smsMessage.mAddress=cursor.getString(cursor.getColumnIndexOrThrow("address"));    smsMessage.mBody=cursor.getString(cursor.getColumnIndexOrThrow("body"));    smsMessage.mDate=cursor.getString(cursor.getColumnIndexOrThrow("date"));    smsMessage.mUnread=cursor.getInt(cursor.getColumnIndexOrThrow("read")) == 0;  } catch (  Exception e) {    throw new IllegalArgumentException(e);  }  return smsMessage;}  }
class C{  public static int execute(ExecutablePool pool,PdxType type){  AbstractOp op=new GetPDXIdForTypeOpImpl(type);  return ((Integer)pool.execute(op)).intValue();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassEditorPaneUI();}  }
class C{  public ExecutionError(@Nullable String message,@Nullable Error cause){  super(message,cause);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("QueryFormat \n\t ver[");  buffer.append(ver);  buffer.append("] \n\t dlgDef [");  buffer.append(dlgDef);  buffer.append("\n\t ]");  buffer.append("\n\t varDefs [");  buffer.append(varDefs);  buffer.append("] \n\t vldDefs [");  buffer.append(vldDefs);  buffer.append("] \n\t selectDef [ \n\t\t");  buffer.append(selectDef);  buffer.append("\n\t ]");  buffer.append("\n\t info [ \n\t\t");  if (info != null) {    buffer.append(info.toString());  }  buffer.append("\n\t ] \n\t resultMode [");  buffer.append(resultMode);  buffer.append("] \n\t relFmtId [");  buffer.append(relFmtId);  buffer.append("] \n\t webMacroId [");  buffer.append(webMacroId);  buffer.append("]");  return buffer.toString();}  }
class C{  public static float[] fromRGB(ColorSpace colorSpace,int rgb){  return fromRGB(colorSpace,(rgb >>> 16) & 0xff,(rgb >>> 8) & 0xff,rgb & 0xff);}  }
class C{  public static Spannable extendedLinkify(String text,boolean lastDitchGeo){  Spannable spanText=SpannableString.valueOf(text);  String defaultPhoneRegion=System.getProperty("user.region","US");  if (!defaultPhoneRegion.equals("US")) {    Linkify.addLinks(spanText,Linkify.ALL);    URLSpan[] spans=spanText.getSpans(0,spanText.length(),URLSpan.class);    if (spans.length == 1) {      int linkStart=spanText.getSpanStart(spans[0]);      int linkEnd=spanText.getSpanEnd(spans[0]);      if (linkStart <= indexFirstNonWhitespaceChar(spanText) && linkEnd >= indexLastNonWhitespaceChar(spanText) + 1) {        return spanText;      }    }    spanText=SpannableString.valueOf(text);    if (lastDitchGeo && !text.isEmpty()) {      Linkify.addLinks(spanText,mWildcardPattern,"geo:0,0?q=");    }    return spanText;  }  boolean linkifyFoundLinks=Linkify.addLinks(spanText,Linkify.ALL & ~(Linkify.PHONE_NUMBERS));  URLSpan[] existingSpans=spanText.getSpans(0,spanText.length(),URLSpan.class);  Matcher coordMatcher=COORD_PATTERN.matcher(spanText);  int coordCount=0;  while (coordMatcher.find()) {    int start=coordMatcher.start();    int end=coordMatcher.end();    if (spanWillOverlap(spanText,existingSpans,start,end)) {      continue;    }    URLSpan span=new URLSpan("geo:0,0?q=" + coordMatcher.group());    spanText.setSpan(span,start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);    coordCount++;  }  existingSpans=spanText.getSpans(0,spanText.length(),URLSpan.class);  int[] phoneSequences=findNanpPhoneNumbers(text);  int phoneCount=0;  for (int match=0; match < phoneSequences.length / 2; match++) {    int start=phoneSequences[match * 2];    int end=phoneSequences[match * 2 + 1];    if (spanWillOverlap(spanText,existingSpans,start,end)) {      continue;    }    StringBuilder dialBuilder=new StringBuilder();    for (int i=start; i < end; i++) {      char ch=spanText.charAt(i);      if (ch == '+' || Character.isDigit(ch)) {        dialBuilder.append(ch);      }    }    URLSpan span=new URLSpan("tel:" + dialBuilder.toString());    spanText.setSpan(span,start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);    phoneCount++;  }  if (lastDitchGeo && !text.isEmpty() && !linkifyFoundLinks&& phoneCount == 0 && coordCount == 0) {    if (Log.isLoggable(TAG,Log.VERBOSE)) {      Log.v(TAG,"No linkification matches, using geo default");    }    Linkify.addLinks(spanText,mWildcardPattern,"geo:0,0?q=");  }  return spanText;}  }
class C{  void detatchInspector(){  int currentInspector=inspectorList.getSelectedIndex();  if (currentInspector == -1)   return;  inspectorNames.remove(currentInspector);  Stoppable stoppable=(Stoppable)(inspectorStoppables.remove(currentInspector));  JScrollPane oldInspector=(JScrollPane)(inspectorToolbars.remove(currentInspector));  Point oldInspectorLocation=oldInspector.getLocationOnScreen();  Inspector i=(Inspector)(oldInspector.getViewport().getView());  oldInspector.remove(i);  JFrame frame=i.createFrame(stoppable);  frame.setLocation(oldInspectorLocation);  frame.setVisible(true);  if (inspectorNames.size() == 0)   currentInspector=-1; else   if (currentInspector == inspectorNames.size())   currentInspector--;  resetInspectors(currentInspector);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public String toString(){  return delegate.toString();}  }
class C{  public static ConflictDetectionManager withoutConflictDetection(KeyValueService kvs){  return new ConflictDetectionManager(getNoConflictDetectSupplier(kvs));}  }
class C{  public void stopScan(BluetoothAdapter adapter){  int mask=BluetoothReceiver.DISCOVERY_FINISHED_FLAG;  if (!adapter.isEnabled()) {    fail("stopScan() bluetooth not enabled");  }  if (!adapter.isDiscovering()) {    return;  }  BluetoothReceiver receiver=getBluetoothReceiver(mask);  long start=System.currentTimeMillis();  assertTrue(adapter.cancelDiscovery());  while (System.currentTimeMillis() - start < START_STOP_SCAN_TIMEOUT) {    if (!adapter.isDiscovering() && ((receiver.getFiredFlags() & mask) == mask)) {      writeOutput(String.format("stopScan() completed in %d ms",(receiver.getCompletedTime() - start)));      removeReceiver(receiver);      return;    }    sleep(POLL_TIME);  }  int firedFlags=receiver.getFiredFlags();  removeReceiver(receiver);  fail(String.format("stopScan() timeout: isDiscovering=%b, flags=0x%x (expected 0x%x)",adapter.isDiscovering(),firedFlags,mask));}  }
class C{  public static long maxMemory(){  return 0L;}  }
class C{  public Set<String> allowableTags(Word word){  Set<String> result=allowableTags(word.form);  if (result.size() > 0)   return result;  if (word.capitalized) {    HashMap<String,TreeMap<String,Integer>> t;    if (word.previous == null)     t=firstCapitalized; else     t=notFirstCapitalized;    if (word.form.length() >= 6) {      String suffix=word.form.substring(word.form.length() - 4).toLowerCase();      if (t.containsKey(suffix))       result=t.get(suffix).keySet();    }    if (result.size() == 0 && word.form.length() >= 5) {      String suffix=word.form.substring(word.form.length() - 3).toLowerCase();      if (t.containsKey(suffix))       result=t.get(suffix).keySet();    }    if (result.size() == 0)     result.add("NNP");  } else   if (word.form.contains("-")) {    result.add("NN");    result.add("JJ");  } else {    if (word.form.length() >= 6) {      String suffix=word.form.substring(word.form.length() - 4).toLowerCase();      if (table.containsKey(suffix))       result=table.get(suffix).keySet();    }    if (result.size() == 0 && word.form.length() >= 5) {      String suffix=word.form.substring(word.form.length() - 3).toLowerCase();      if (table.containsKey(suffix))       result=table.get(suffix).keySet();    }    if (result.size() == 0)     result.add("NN");  }  return result;}  }
class C{  public static boolean isMac(){  return (OS_NAME.contains("mac"));}  }
class C{  public Long registerUser(String login,String Userpass,String lastname,String firstname,String email,Date age,String street,String additionalname,String fax,String zip,long states_id,String town,long language_id,String phone,String baseURL,boolean generateSipUserData,String jNameTimeZone){  boolean sendConfirmation=baseURL != null && !baseURL.isEmpty() && 1 == cfgManagement.getConfValue("sendEmailWithVerficationCode",Integer.class,"0");  return registerUser(login,Userpass,lastname,firstname,email,age,street,additionalname,fax,zip,states_id,town,language_id,phone,baseURL,generateSipUserData,jNameTimeZone,sendConfirmation);}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  static private IV decodeInlineLiteral(final byte flags,final byte[] key,int o){  final DTE dte=AbstractIV.getDTE(flags);  final DTEExtension dtex;  if (dte == DTE.Extension) {    dtex=DTEExtension.valueOf(key[o++]);  } else   dtex=null;  final boolean isExtension=AbstractIV.isExtension(flags);  final IV datatype;  if (isExtension) {    datatype=decodeFromOffset(key,o);    o+=datatype.byteLength();  } else {    datatype=null;  }switch (dte) {case XSDBoolean:{      final byte x=KeyBuilder.decodeByte(key[o]);      final boolean isTrue=(x != 0);      final AbstractLiteralIV iv=XSDBooleanIV.valueOf(isTrue);      return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;    }case XSDByte:{    final byte x=KeyBuilder.decodeByte(key[o]);    final AbstractLiteralIV iv=new XSDNumericIV<BigdataLiteral>(x);    return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;  }case XSDShort:{  final short x=KeyBuilder.decodeShort(key,o);  final AbstractLiteralIV iv=new XSDNumericIV<BigdataLiteral>(x);  return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case XSDInt:{final int x=KeyBuilder.decodeInt(key,o);final AbstractLiteralIV iv=new XSDNumericIV<BigdataLiteral>(x);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case XSDLong:{final long x=KeyBuilder.decodeLong(key,o);final AbstractLiteralIV iv=new XSDNumericIV<BigdataLiteral>(x);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case XSDFloat:{final float x=KeyBuilder.decodeFloat(key,o);final AbstractLiteralIV iv=new XSDNumericIV<BigdataLiteral>(x);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case XSDDouble:{final double x=KeyBuilder.decodeDouble(key,o);final AbstractLiteralIV iv=new XSDNumericIV<BigdataLiteral>(x);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case XSDInteger:{final BigInteger x=KeyBuilder.decodeBigInteger(o,key);final AbstractLiteralIV iv=new XSDIntegerIV<BigdataLiteral>(x);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case XSDDecimal:{final BigDecimal x=KeyBuilder.decodeBigDecimal(o,key);final AbstractLiteralIV iv=new XSDDecimalIV<BigdataLiteral>(x);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case UUID:{final UUID x=KeyBuilder.decodeUUID(key,o);final AbstractLiteralIV iv=new UUIDLiteralIV<BigdataLiteral>(x);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case XSDUnsignedByte:{final byte x=KeyBuilder.decodeByte(key[o]);final AbstractLiteralIV iv=new XSDUnsignedByteIV<BigdataLiteral>(x);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case XSDUnsignedShort:{final short x=KeyBuilder.decodeShort(key,o);final AbstractLiteralIV iv=new XSDUnsignedShortIV<BigdataLiteral>(x);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case XSDUnsignedInt:{final int x=KeyBuilder.decodeInt(key,o);final AbstractLiteralIV iv=new XSDUnsignedIntIV<BigdataLiteral>(x);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case XSDUnsignedLong:{final long x=KeyBuilder.decodeLong(key,o);final AbstractLiteralIV iv=new XSDUnsignedLongIV<BigdataLiteral>(x);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case XSDString:{if (isExtension) {final byte termCode=key[o++];assert termCode == ITermIndexCodes.TERM_CODE_LIT : "termCode=" + termCode;final StringBuilder sb=new StringBuilder();final String str1;final int nread;try {nread=IVUnicode.decode(new ByteArrayInputStream(key,o,key.length - o),sb);str1=sb.toString();} catch (IOException e) {throw new RuntimeException(e);}final FullyInlineTypedLiteralIV<BigdataLiteral> iv=new FullyInlineTypedLiteralIV<BigdataLiteral>(str1,null,null,1 + 1 + nread);return isExtension ? new LiteralExtensionIV<BigdataLiteral>(iv,datatype) : iv;}return decodeInlineUnicodeLiteral(key,o);}case Extension:{switch (dtex) {case IPV4:{final byte[] addr=new byte[5];System.arraycopy(key,o,addr,0,5);final IPv4Address ip=new IPv4Address(addr);final AbstractLiteralIV iv=new IPv4AddrIV(ip);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}case PACKED_LONG:{final AbstractLiteralIV iv=new PackedLongIV<>(LongPacker.unpackLong(key,o));return isExtension ? new LiteralExtensionIV<>(iv,datatype) : iv;}case MOCKED_IV:{return new MockedValueIV(decodeFromOffset(key,o));}case ARRAY:{final int n=((int)key[o++] & 0xFF) + 1;final IV[] ivs=decode(key,o,n);final InlineLiteralIV[] args=new InlineLiteralIV[n];for (int i=0; i < n; i++) {if (ivs[i] instanceof InlineLiteralIV) {args[i]=(InlineLiteralIV)ivs[i];} else {throw new UnsupportedOperationException("InlineArrayIV only supports InlineLiteralIV delegates");}}final LiteralArrayIV iv=new LiteralArrayIV(args);return isExtension ? new LiteralExtensionIV(iv,datatype) : iv;}default :{throw new UnsupportedOperationException("dte=" + dte);}}}default :throw new UnsupportedOperationException("dte=" + dte);}}  }
class C{  protected void sequence_AnnotatedN4MemberDeclaration_BogusTypeRefFragment_ColonSepTypeRef_FieldDeclarationImpl(ISerializationContext context,N4FieldDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private static boolean verifyEntry(JarEntry jarEntry,Manifest manifest,PublicKey pubKey,boolean allSigned,boolean makeCerts){  assert jarEntry != null;  assert manifest != null;  boolean inManifest=false;  String entryName=jarEntry.getName();  if (manifest.getAttributes(entryName) != null || manifest.getAttributes("./" + entryName) != null || manifest.getAttributes('/' + entryName) != null)   inManifest=true;  if (allSigned == true && inManifest == false && entryName.toUpperCase().startsWith("META-INF/") == false)   return false;  if (inManifest) {    Certificate[] certs=makeCerts == false ? jarEntry.getCertificates() : getCertificates(jarEntry);    boolean isSigned=certs != null && certs.length > 0;    if (isSigned == false || pubKey != null && findKeyInCertificates(pubKey,certs) == false)     return false;  }  return true;}  }
class C{  private void postSteps(){  failedVdcStatus=ConnectionStatus.CONNECT_FAILED;  geoClientCache.clearCache();  loadVdcInfo();  try {    postCheck();  } catch (  Exception e) {    log.error("wait for all sites db stable failed e=",e);    throw GeoException.fatals.connectVdcPostCheckFail(e);  }  statusUpdate();  lockHelper.release(operatedVdc.getShortId());}  }
class C{  public void sendLog(byte loglevel,String logmessage) throws IOException {  PacketLOG p=new PacketLOG(loglevel,logmessage);  p.send(hostAddress,hostPort);}  }
class C{  public static void read(final URL shpFile,GeomVectorField field,final Bag masked) throws FileNotFoundException, IOException, Exception {  read(shpFile,field,masked,MasonGeometry.class);}  }
class C{  public NodeActionFilter(int actionMask){  mAction=actionMask;}  }
class C{  public InspectContainerParams withReturnContainerSize(boolean returnContainerSize){  this.returnContainerSize=returnContainerSize;  return this;}  }
class C{  private void finishCompletion(){  for (WaitNode q; (q=waiters) != null; ) {    if (UNSAFE.compareAndSwapObject(this,waitersOffset,q,null)) {      for (; ; ) {        Thread t=q.thread;        if (t != null) {          q.thread=null;          LockSupport.unpark(t);        }        WaitNode next=q.next;        if (next == null)         break;        q.next=null;        q=next;      }      break;    }  }  done();  callable=null;}  }
class C{  private JCExpression makeUtilInvocation(List<JCExpression> typeArguments,String methodName,List<JCExpression> arguments){  return this.abstractTransformer.make().Apply(typeArguments,makeUtilSelection(methodName),arguments);}  }
class C{  protected Instances makeTestDataset(int seed,int numInstances,int numNominal,int numNumeric,int numString,int numDate,int numRelational,boolean multiInstance) throws Exception {  TestInstances dataset=new TestInstances();  dataset.setSeed(seed);  dataset.setNumInstances(numInstances);  dataset.setNumNominal(numNominal);  dataset.setNumNumeric(numNumeric);  dataset.setNumString(numString);  dataset.setNumDate(numDate);  dataset.setNumRelational(numRelational);  dataset.setClassIndex(TestInstances.NO_CLASS);  dataset.setMultiInstance(multiInstance);  return dataset.generate();}  }
class C{  public void loadData() throws CoreException {  TLCOutputSourceRegistry modelCheckSourceRegistry=TLCOutputSourceRegistry.getModelCheckSourceRegistry();  TLCModelLaunchDataProvider provider=modelCheckSourceRegistry.getProvider(getModel());  if (provider != null) {    provider.setPresenter(this);  } else {    reinit();  }  expressionEvalInput.setDocument(new Document(getModel().getEvalExpression()));}  }
class C{  public Section mbean(String name,MBeanRule.Consumer config){  MBeanRule rule=new MBeanRule(name);  config.accept(rule);  this.rules.add(rule);  return this;}  }
class C{  public void addNotificationsIds(Notification notification){  this.getNotificationsIds().add(notification.getId());}  }
class C{  public StandardXYSeriesLabelGenerator(String format){  ParamChecks.nullNotPermitted(format,"format");  this.formatPattern=format;}  }
class C{  public void loadFrustum(float l,float r,float b,float t,float n,float f){  loadIdentity();  mMat[0]=2 * n / (r - l);  mMat[5]=2 * n / (t - b);  mMat[8]=(r + l) / (r - l);  mMat[9]=(t + b) / (t - b);  mMat[10]=-(f + n) / (f - n);  mMat[11]=-1;  mMat[14]=-2 * f * n / (f - n);  mMat[15]=0;}  }
class C{  @Override public Bitmap decodeRegion(Rect rect,BitmapFactory.Options options){  return impl.decodeRegion(rect,options);}  }
class C{  public boolean isBefore(Date that){  return compareTo(that) < 0;}  }
class C{  public static String url(double lat,double lng,int targetWidth,int targetHeight){  return StreetView.Params.create().latitude(lat).longitude(lng).pitch(10).width(targetWidth).height(targetHeight).format();}  }
class C{  public RegionBounds mirror(Vector origin,Vector normal){  return new RegionBounds(match,Cuboid.between(Geometry.getMirrored(cuboid.minimum(),origin,normal),Geometry.getMirrored(cuboid.maximum(),origin,normal)));}  }
class C{  public ClientMessage createMessageWithProperties(Map<String,Object> properties){  getInternalClient();  ClientMessage message=internalClient.createMessage(isUseDurableMessage());  addMessageProperties(message,properties);  return message;}  }
class C{  @Override public Eval<Optional<T>> min(final Comparator<? super T> comparator){  return Eval.later(null);}  }
class C{  public static synchronized void clearParallelLines(final JFreeChartPlotEngine engine){  List<AxisParallelLineConfiguration> domainLines=engine.getPlotInstance().getMasterPlotConfiguration().getDomainConfigManager().getCrosshairLines().getLines();  List<AxisParallelLineConfiguration> clonedListOfDomainLines=new LinkedList<AxisParallelLineConfiguration>(domainLines);  for (int i=0; i < clonedListOfDomainLines.size(); i++) {    AxisParallelLineConfiguration line=clonedListOfDomainLines.get(i);    engine.getPlotInstance().getMasterPlotConfiguration().getDomainConfigManager().getCrosshairLines().removeLine(line);  }  for (  RangeAxisConfig config : engine.getPlotInstance().getMasterPlotConfiguration().getRangeAxisConfigs()) {    List<AxisParallelLineConfiguration> rangeAxisLines=config.getCrossHairLines().getLines();    List<AxisParallelLineConfiguration> clonedListOfRangeAxisLines=new LinkedList<AxisParallelLineConfiguration>(rangeAxisLines);    for (int i=0; i < clonedListOfRangeAxisLines.size(); i++) {      AxisParallelLineConfiguration line=clonedListOfRangeAxisLines.get(i);      config.getCrossHairLines().removeLine(line);    }  }}  }
class C{  public void receiveUpdate(SipRequest update) throws NetworkException, PayloadException {  if (mLogger.isActivated()) {    mLogger.debug("Session refresh request received");  }  mLastSessionRefresh=System.currentTimeMillis();  if (mLogger.isActivated()) {    mLogger.debug("Send 200 OK");  }  mSession.getImsService().getImsModule().getSipManager().sendSipResponse(SipMessageFactory.create200OkUpdateResponse(mSession.getDialogPath(),update));}  }
class C{  final public IndexUnit IndexUnit() throws ParseException {  List compilationUnits=new LinkedList();  CompilationUnit cu;  PackageDeclaration pakage=null;  List imports=null;  ImportDeclaration in=null;  List types=null;  TypeDeclaration tn=null;  int line=-1;  int column=0;  if (jj_2_1(2147483647)) {    pakage=PackageDeclaration();    line=pakage.getBeginLine();    column=pakage.getBeginColumn();  } else {    ;  }  label_1:   while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case IMPORT:      ;    break;default :  jj_la1[0]=jj_gen;break label_1;}in=ImportDeclaration();if (line == -1) {line=in.getBeginLine();column=in.getBeginColumn();}imports=add(imports,in);}label_2: while (true) {if (jj_2_2(2147483647)) {;} else {break label_2;}tn=TypeDeclaration();if (line == -1) {line=tn.getBeginLine();column=tn.getBeginColumn();}types=add(types,tn);}cu=new CompilationUnit(line == -1 ? 0 : line,column,token.endLine,token.endColumn,pakage,imports,types,getComments());compilationUnits.add(cu);label_3: while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case PACKAGE:case AT:;break;default :jj_la1[1]=jj_gen;break label_3;}pakage=PackageDeclaration();line=pakage.getBeginLine();column=pakage.getBeginColumn();imports=new LinkedList();types=new LinkedList();label_4: while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case IMPORT:;break;default :jj_la1[2]=jj_gen;break label_4;}in=ImportDeclaration();if (line == -1) {line=in.getBeginLine();column=in.getBeginColumn();}imports=add(imports,in);}label_5: while (true) {if (jj_2_3(2147483647)) {;} else {break label_5;}tn=TypeDeclaration();if (line == -1) {line=tn.getBeginLine();column=tn.getBeginColumn();}types=add(types,tn);}cu=new CompilationUnit(line == -1 ? 0 : line,column,token.endLine,token.endColumn,pakage,imports,types,getComments());compilationUnits.add(cu);}switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case 0:jj_consume_token(0);break;case 128:jj_consume_token(128);break;default :jj_la1[3]=jj_gen;jj_consume_token(-1);throw new ParseException();}{if (true) return new IndexUnit(compilationUnits);}throw new Error("Missing return statement in function");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.409 -0400",hash_original_method="25F9B147A640764BAD5A91174402EA28",hash_generated_method="062CE63D0620D144CC8FD8F749FB80E0") public BrokenInputStream(IOException exception){  this.exception=exception;}  }
class C{  public boolean add(Attribute attribute){  Object oldAttribute=attrMap.put(attribute.getCategory(),AttributeSetUtilities.verifyAttributeValue(attribute,myInterface));  return (!attribute.equals(oldAttribute));}  }
class C{  private static boolean isTainted(Collection<?> c){  try {    checkTypeSafe(c);  } catch (  IllegalArgumentException e) {    return true;  }  return false;}  }
class C{  public JCExpression ClassLiteral(Type t){  VarSymbol lit=new VarSymbol(STATIC | PUBLIC | FINAL,names._class,t,t.tsym);  return Select(Type(t),lit);}  }
class C{  public Builder failureRateThreshold(int failureRateThreshold){  if (failureRateThreshold < 1 || failureRateThreshold > 100) {    throw new IllegalArgumentException("failureRateThreshold must be between 1 and 100");  }  this.failureRateThreshold=failureRateThreshold;  return this;}  }
class C{  private void sendMail(){  String emailAddress;  try {    Class<?> stringClass=R.string.class;    Field mailLoggerField=stringClass.getField("mail_logger");    int emailAddressId=(Integer)mailLoggerField.get(null);    emailAddress=getString(emailAddressId);  } catch (  Exception e) {    emailAddress="";  }  ArrayList<Uri> uris=new ArrayList<>();  for (  String file : Log_OC.getLogFileNames()) {    File logFile=new File(mLogPath,file);    if (logFile.exists()) {      uris.add(Uri.fromFile(logFile));    }  }  Intent intent=new Intent(Intent.ACTION_SEND_MULTIPLE);  intent.putExtra(Intent.EXTRA_EMAIL,emailAddress);  String subject=String.format(getString(R.string.log_send_mail_subject),getString(R.string.app_name));  intent.putExtra(Intent.EXTRA_SUBJECT,subject);  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  intent.setType(MAIL_ATTACHMENT_TYPE);  intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uris);  try {    startActivity(intent);  } catch (  ActivityNotFoundException e) {    Toast.makeText(this,getString(R.string.log_send_no_mail_app),Toast.LENGTH_LONG).show();    Log_OC.i(TAG,"Could not find app for sending log history.");  }}  }
class C{  protected static ExifParser parse(InputStream inputStream,int options,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,options,iRef);}  }
class C{  public static double powerSeries(double a,double b,double x){  double s, t, u, v, n, t1, z, ai;  ai=1.0 / a;  u=(1.0 - b) * x;  v=u / (a + 1.0);  t1=v;  t=u;  n=2.0;  s=0.0;  z=MACHEP * ai;  while (Math.abs(v) > z) {    u=(n - b) * x / n;    t*=u;    v=t / (a + n);    s+=v;    n+=1.0;  }  s+=t1;  s+=ai;  u=a * Math.log(x);  if ((a + b) < MAXGAM && Math.abs(u) < MAXLOG) {    t=gamma(a + b) / (gamma(a) * gamma(b));    s=s * t * Math.pow(x,a);  } else {    t=lnGamma(a + b) - lnGamma(a) - lnGamma(b) + u + Math.log(s);    if (t < MINLOG)     s=0.0; else     s=Math.exp(t);  }  return s;}  }
class C{  public String modelPathTipText(){  return "Set the path from which to load a model. " + "Loading occurs when the first test instance " + "is received. Environment variables can be used in the "+ "supplied path.";}  }
class C{  @Deprecated public MoreLikeThisQueryBuilder addItem(Item... likeItems){  return addLikeItem(likeItems);}  }
class C{  public BEShadowBorder2(){  super(new Insets(TOP,LEFT,BOTTOM,RIGHT),org.jb2011.lnf.beautyeye.widget.__Icon9Factory__.getInstance().getBorderIcon_Shadow2());}  }
class C{  public String toString(){  return "TAG_Long(\"" + name + "\"): val="+ value;}  }
class C{  private static void addMarginTopToContentChild(View mContentChild,int statusBarHeight){  if (mContentChild == null) {    return;  }  if (!TAG_MARGIN_ADDED.equals(mContentChild.getTag())) {    FrameLayout.LayoutParams lp=(FrameLayout.LayoutParams)mContentChild.getLayoutParams();    lp.topMargin+=statusBarHeight;    mContentChild.setLayoutParams(lp);    mContentChild.setTag(TAG_MARGIN_ADDED);  }}  }
class C{  public void _testPreparedStatements() throws Exception {  Connection connection=getConnectionViaDriverManager();  connection.setAutoCommit(false);  try {    String sql1=MessageFormat.format(SELECT_TABLE_1,new Object[]{"?"});    String sql2=MessageFormat.format(SELECT_TABLE_2,new Object[]{"?"});    RandomSelector selector1=new RandomPreparedSelector(connection,sql1,RECORD_COUNT);    RandomSelector selector2=new RandomPreparedSelector(connection,sql2,RECORD_COUNT);    Thread thread1=new Thread(selector1,"Selector 1");    Thread thread2=new Thread(selector2,"Selector 2");    thread1.start();    thread2.start();    Thread.sleep(TEST_TIME_SECONDS * 1000);    selector1.stop();    selector2.stop();    thread1.join();    thread2.join();  }  finally {    connection.close();  }}  }
