class C{  public AtomicIntegerArray(int[] array){  this.array=array.clone();}  }
class C{  public boolean isComplete(){  return true;}  }
class C{  public double pixelSizeAtDistance(double distance){  double tanfovy_2=Math.tan(Math.toRadians(this.fieldOfView * 0.5));  double frustumHeight=2 * distance * tanfovy_2;  return frustumHeight / this.getHeight();}  }
class C{  void define(MemberDefinition field,int slot,int from,int to){  if (from >= to) {    return;  }  for (int i=0; i < len; i++) {    if ((locals[i].field == field) && (locals[i].slot == slot) && (from <= locals[i].to)&& (to >= locals[i].from)) {      locals[i].from=Math.min(locals[i].from,from);      locals[i].to=Math.max(locals[i].to,to);      return;    }  }  if (len == locals.length) {    LocalVariable newlocals[]=new LocalVariable[len * 2];    System.arraycopy(locals,0,newlocals,0,len);    locals=newlocals;  }  locals[len++]=new LocalVariable(field,slot,from,to);}  }
class C{  public void paintTabbedPaneTabBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void refreshIdAfterPreload(){  mId=TabControl.getNextId();}  }
class C{  @Override public MemBufferHolder<A> resize(long size){  return m_allocator.resizeBuffer(this,size);}  }
class C{  private Map<FeatureKey,Integer> makeKeyToIndexMap(final int minimumFeatureFrequency,final Set<FeatureKey> boundedFeatures) throws IOException {  final Multiset<FeatureKey> keyCount=HashMultiset.create();  final Multiset<FeatureKey> bilexicalKeyCount=HashMultiset.create();  final Map<FeatureKey,Integer> result=new HashMap<>();  final Multiset<FeatureKey> binaryFeatureCount=HashMultiset.create();  final Iterator<Sentence> sentenceIt=ParallelCorpusReader.READER.readCorpus(false);  while (sentenceIt.hasNext()) {    final Sentence sentence=sentenceIt.next();    final List<ResolvedDependency> goldDeps=getGoldDeps(sentence);    final List<Category> cats=sentence.getLexicalCategories();    for (int i=0; i < cats.size(); i++) {      final FeatureKey key=trainingParameters.getFeatureSet().lexicalCategoryFeatures.getFeatureKey(sentence.getInputWords(),i,cats.get(i));      if (key != null) {        keyCount.add(key);      }    }    for (    final ResolvedDependency dep : goldDeps) {      final SRLLabel role=dep.getSemanticRole();      for (      final ArgumentSlotFeature feature : trainingParameters.getFeatureSet().argumentSlotFeatures) {        final FeatureKey key=feature.getFeatureKey(sentence.getInputWords(),dep.getHead(),role,dep.getCategory(),dep.getArgNumber(),dep.getPreposition());        keyCount.add(key);      }      if (dep.getPreposition() != Preposition.NONE) {        for (        final PrepositionFeature feature : trainingParameters.getFeatureSet().prepositionFeatures) {          final FeatureKey key=feature.getFeatureKey(sentence.getInputWords(),dep.getHead(),dep.getCategory(),dep.getPreposition(),dep.getArgNumber());          keyCount.add(key);        }      }      if (dep.getSemanticRole() != SRLFrame.NONE) {        for (        final BilexicalFeature feature : trainingParameters.getFeatureSet().dependencyFeatures) {          final FeatureKey key=feature.getFeatureKey(sentence.getInputWords(),dep.getSemanticRole(),dep.getHead(),dep.getArgumentIndex());          bilexicalKeyCount.add(key);        }      }    }    if (!trainingParameters.getTrainSupertaggerWeight()) {      boundedFeatures.add(trainingParameters.getFeatureSet().lexicalCategoryFeatures.getDefault());    }    getFromDerivation(sentence.getCcgbankParse(),binaryFeatureCount,boundedFeatures,sentence.getInputWords(),0,sentence.getInputWords().size());    for (    final RootCategoryFeature rootFeature : trainingParameters.getFeatureSet().rootFeatures) {      final FeatureKey key=rootFeature.getFeatureKey(sentence.getCcgbankParse().getCategory(),sentence.getInputWords());      boundedFeatures.add(key);      keyCount.add(key);    }  }  result.put(trainingParameters.getFeatureSet().lexicalCategoryFeatures.getDefault(),result.size());  addFrequentFeatures(minimumFeatureFrequency,binaryFeatureCount,result,boundedFeatures,true);  addFrequentFeatures(minimumFeatureFrequency,keyCount,result,boundedFeatures,false);  addFrequentFeatures(minimumFeatureFrequency,bilexicalKeyCount,result,boundedFeatures,false);  for (  final BinaryFeature feature : trainingParameters.getFeatureSet().binaryFeatures) {    boundedFeatures.add(feature.getDefault());  }  for (  final Feature feature : trainingParameters.getFeatureSet().getAllFeatures()) {    if (!result.containsKey(feature.getDefault())) {      result.put(feature.getDefault(),result.size());    }    feature.resetDefaultIndex();  }  System.out.println("Total features: " + result.size());  return result;}  }
class C{  public Pair(char diagonal,int row){  this.diagonal=diagonal;  this.row=row;}  }
class C{  public static VirtualVolumeAttribute valueOfAttribute(String name){  VirtualVolumeAttribute[] volumeAtts=values();  for (int i=0; i < volumeAtts.length; i++) {    if (volumeAtts[i].getAttributeName().equals(name)) {      return volumeAtts[i];    }  }  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList nameList;  Node child;  Node lastChild;  String data;  int nodeType;  doc=(Document)load("staff",false);  nameList=doc.getElementsByTagName("name");  child=nameList.item(1);  lastChild=child.getLastChild();  nodeType=(int)lastChild.getNodeType();  assertEquals("isCDATA",4,nodeType);  data=((CharacterData)lastChild).getData();  assertEquals("data","This is an adjacent CDATASection with a reference to a tab &tab;",data);}  }
class C{  protected void learnDeviceFromArpResponseData(Ethernet eth,DatapathId swdpid,OFPort port){  if (!(eth.getPayload() instanceof ARP))   return;  ARP arp=(ARP)eth.getPayload();  MacAddress dlAddr=eth.getSourceMACAddress();  MacAddress senderAddr=arp.getSenderHardwareAddress();  if (dlAddr.equals(senderAddr))   return;  if (senderAddr.isBroadcast() || senderAddr.isMulticast())   return;  if (senderAddr.equals(MacAddress.of(0)))   return;  VlanVid vlan=VlanVid.ofVlan(eth.getVlanID());  IPv4Address nwSrc=arp.getSenderProtocolAddress();  Entity e=new Entity(senderAddr,vlan,nwSrc,IPv6Address.NONE,swdpid,port,new Date());  learnDeviceByEntity(e);}  }
class C{  public void subscribeToBrokerServiceDiscount() throws Exception {  VendorData supplierData=setupNewSupplier("2013-05-01 08:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  orgSetup.saveAllVats(supplierData.getAdminKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("13.00")),null,null);  setDateFactory("2013-05-02 20:00:00");  VOServiceDetails supplService=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForBroker2");  updateOperatorRevenueShare(5.0D,supplService.getKey());  updatePartnerRevenueShares(15.0D,20.0D,supplService);  VendorData brokerData=setupNewBroker("2013-05-03 08:10:00");  CustomerData brokerCustomerData=registerCustomer(brokerData,"brokerCustomer");  updateMarketplaceRevenueShare(10.0D,brokerData.getMarketplaceId(0));  setDateFactory("2013-05-03 10:00:00");  VOServiceDetails brokerService=grantResalePermission(supplierData,supplService,brokerData);  brokerService=publishActivateService(brokerData,brokerService);  subscribe(brokerCustomerData.getAdminUser(),"brokerSubscrDiscount",brokerService,"2013-06-03 00:00:00","ADMIN");  updateCustomerDiscount(supplierData.getAdminKey(),brokerCustomerData,new BigDecimal("20.00"),DateTimeHandling.calculateMillis("2013-06-01 08:00:00"),DateTimeHandling.calculateMillis("2013-06-30 23:00:00"));  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("subscribeToBrokerServiceDiscount",new TestData(supplierData,brokerData));}  }
class C{  public void addGamePlayedPlayers(boolean wonGame){  addGamePlayedList(teamQBs,1,wonGame);  addGamePlayedList(teamRBs,2,wonGame);  addGamePlayedList(teamWRs,3,wonGame);  addGamePlayedList(teamOLs,5,wonGame);  addGamePlayedList(teamKs,1,wonGame);  addGamePlayedList(teamSs,1,wonGame);  addGamePlayedList(teamCBs,3,wonGame);  addGamePlayedList(teamF7s,7,wonGame);}  }
class C{  public String asPath(){  if (type == Type.NORMAL) {    return "projects/" + project + "/topics/"+ topic;  } else {    return topic;  }}  }
class C{  public static boolean isDigit(Character self){  return Character.isDigit(self);}  }
class C{  public void installUpdate(DownloadedUpdateInfo updateInfo){  Uri apkUri=Uri.parse(updateInfo.path);  Intent installIntent=new Intent(Intent.ACTION_VIEW).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK).setDataAndType(apkUri,"application/vnd.android.package-archive");  mApplication.startActivity(installIntent);}  }
class C{  public PacketIDFilter(String packetID){  if (packetID == null) {    throw new IllegalArgumentException("Packet ID cannot be null.");  }  this.packetID=packetID;}  }
class C{  public void advance(){  if (!isEmpty())   pos++;}  }
class C{  public MiniDrawer withCrossFader(@NonNull ICrossfader crossFader){  this.mCrossFader=crossFader;  return this;}  }
class C{  public boolean hasOrganizations(){  return hasRepeatingExtension(Organization.class);}  }
class C{  public int approximateSize(){  return target.size();}  }
class C{  @SuppressWarnings("unused") public static void bindToRegister(short value){}  }
class C{  @NoInline public static void write(int value){  if (runningVM) {    int mode=(value < -(1 << 20) || value > (1 << 20)) ? 2 : 0;    sysCall.sysConsoleWriteInteger(value,mode);  } else {    writeNotRunningVM(value);  }}  }
class C{  private boolean isSourceAndTargetDifferent(){  boolean result=false;  String sourceVendor="";  String targetVendor="";  String sourceUrl="";  String targetUrl="";  String sourceCatalog="";  String targetCatalog="";  String sourceSchema="";  String targetSchema="";  if (m_source.getVendor() != null)   sourceVendor=m_source.getVendor();  if (m_target.getVendor() != null)   targetVendor=m_target.getVendor();  if (m_source.getUrl() != null)   sourceUrl=m_source.getUrl();  if (m_target.getUrl() != null)   targetUrl=m_target.getUrl();  if (m_source.getCatalog() != null)   sourceCatalog=m_source.getCatalog();  if (m_target.getCatalog() != null)   targetCatalog=m_target.getCatalog();  if (m_source.getSchema() != null)   sourceSchema=m_source.getSchema();  if (m_target.getSchema() != null)   targetSchema=m_target.getSchema();  if (!sourceVendor.equalsIgnoreCase(targetVendor))   result=true; else   if (!sourceUrl.equalsIgnoreCase(targetUrl))   result=true; else   if (!sourceCatalog.equalsIgnoreCase(targetCatalog))   result=true; else   if (!sourceSchema.equalsIgnoreCase(targetSchema))   result=true;  if (!result)   s_logger.log(Level.SEVERE,"sourceTargetSame");  return result;}  }
class C{  private void parseDiscoveryTieringPolicyResponse(StorageArray array,AccessProfile accessProfile) throws Exception {  String nativeGuid=NativeGUIDGenerator.generateNativeGuid(DiscoveredDataObject.Type.hds.toString(),array.getObjectID());  URIQueryResultList queryResult=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStorageSystemByNativeGuidConstraint(nativeGuid),queryResult);  if (queryResult.iterator().hasNext()) {    URI systemURI=queryResult.iterator().next();    if (null != systemURI) {      try {        StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);        if (null == system) {          return;        }        List<TieringPolicy> tpList=array.getTieringPolicyList();        if (null != tpList && !tpList.isEmpty()) {          processDiscoveredTieringPolicies(system,tpList);        } else {          _logger.info("No tieringPolicies defined for the system: {}",systemURI);        }      } catch (      Exception ex) {        _logger.error("Exception occurred during discovery of Tiering Policies.",ex);        throw ex;      }    }  }}  }
class C{  private static void populateTipsList(final String tipRoot) throws IOException {  try {    final URL url=JavaFXTipOfTheDay.class.getResource(tipRoot);    if (url.toString().startsWith("jar")) {      final JarURLConnection conn=(JarURLConnection)url.openConnection();      final JarFile jar=conn.getJarFile();      for (final Enumeration<JarEntry> e=jar.entries(); e.hasMoreElements(); ) {        final JarEntry entry=e.nextElement();        final String name=entry.getName();        if ((!entry.isDirectory()) && name.contains("/res/tips/") && name.endsWith(".html")) {          urls.add('/' + name);        }      }    } else {      final BufferedReader in=new BufferedReader(new InputStreamReader(url.openStream()));      String inputLine;      while ((inputLine=in.readLine()) != null) {        if (inputLine.indexOf('.') == -1) {          populateTipsList(tipRoot + '/' + inputLine);        } else         if ((inputLine.endsWith(".htm")) || inputLine.endsWith(".html")) {          urls.add(tipRoot + '/' + inputLine);        }      }      in.close();    }  } catch (  final IOException e) {    throw e;  }}  }
class C{  private void scrollToItemIfNeeded(int itemIndex){  int first=mListView.getFirstVisiblePosition();  int last=mListView.getLastVisiblePosition();  if ((itemIndex < first) || (itemIndex > last)) {    mListView.smoothScrollToPosition(itemIndex);  }}  }
class C{  public void addChangeListener(ChangeListener l){  changeSupport.addChangeListener(l);}  }
class C{  private TaskResponseUtil(){}  }
class C{  void scheduleFade(){  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_FADE),FADE_DELAY);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TIMESTAMP:    return isSetTimestamp();case VALUE:  return isSetValue();case HOST:return isSetHost();}throw new IllegalStateException();}  }
class C{  @Override public void writeData(CarbonMessage carbonMessage,StreamingOutput output,String mediaType,int chunkSize,CarbonCallback cb){  try {    carbonMessage.setHeader(Constants.HTTP_CONTENT_TYPE,mediaType);    carbonMessage.setHeader(Constants.HTTP_TRANSFER_ENCODING,CHUNKED);    carbonMessage.setBufferContent(false);    cb.done(carbonMessage);    output.write(carbonMessage.getOutputStream());    carbonMessage.setEndOfMsgAdded(true);  } catch (  IOException e) {    throw new RuntimeException("Error occurred while streaming output",e);  }}  }
class C{  public boolean paintRable(Graphics2D g2d){  Composite c=g2d.getComposite();  if (!SVGComposite.OVER.equals(c))   return false;  GraphicsUtil.drawImage(g2d,getSource());  return true;}  }
class C{  public void moveDot(int dot,Position.Bias dotBias){  if (dotBias == null) {    throw new IllegalArgumentException("null bias");  }  if (!component.isEnabled()) {    setDot(dot,dotBias);    return;  }  if (dot != this.dot) {    NavigationFilter filter=component.getNavigationFilter();    if (filter != null) {      filter.moveDot(getFilterBypass(),dot,dotBias);    } else {      handleMoveDot(dot,dotBias);    }  }}  }
class C{  public static double sumOfPowerDeviations(final DoubleArrayList data,final int k,final double c,final int from,final int to){  final double[] elements=data.elements();  double sum=0;  double v;  int i;switch (k) {case -2:    if (c == 0.0)     for (i=from - 1; ++i <= to; ) {      v=elements[i];      sum+=1 / (v * v);    } else     for (i=from - 1; ++i <= to; ) {      v=elements[i] - c;      sum+=1 / (v * v);    }  break;case -1:if (c == 0.0) for (i=from - 1; ++i <= to; ) sum+=1 / (elements[i]); else for (i=from - 1; ++i <= to; ) sum+=1 / (elements[i] - c);break;case 0:sum+=to - from + 1;break;case 1:if (c == 0.0) for (i=from - 1; ++i <= to; ) sum+=elements[i]; else for (i=from - 1; ++i <= to; ) sum+=elements[i] - c;break;case 2:if (c == 0.0) for (i=from - 1; ++i <= to; ) {v=elements[i];sum+=v * v;} else for (i=from - 1; ++i <= to; ) {v=elements[i] - c;sum+=v * v;}break;case 3:if (c == 0.0) for (i=from - 1; ++i <= to; ) {v=elements[i];sum+=v * v * v;} else for (i=from - 1; ++i <= to; ) {v=elements[i] - c;sum+=v * v * v;}break;case 4:if (c == 0.0) for (i=from - 1; ++i <= to; ) {v=elements[i];sum+=v * v * v* v;} else for (i=from - 1; ++i <= to; ) {v=elements[i] - c;sum+=v * v * v* v;}break;case 5:if (c == 0.0) for (i=from - 1; ++i <= to; ) {v=elements[i];sum+=v * v * v* v* v;} else for (i=from - 1; ++i <= to; ) {v=elements[i] - c;sum+=v * v * v* v* v;}break;default :for (i=from - 1; ++i <= to; ) sum+=Math.pow(elements[i] - c,k);break;}return sum;}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  private void initializeFragmentState(){  AddEditBookmarkFragment baseAddEditFragment=(AddEditBookmarkFragment)getFragmentManager().findFragmentByTag(BASE_ADD_EDIT_FRAGMENT_TAG);  setActionListenerOnAddEdit(baseAddEditFragment);  Fragment selectFolderFragment=getFragmentManager().findFragmentByTag(BASE_SELECT_FOLDER_FRAGMENT_TAG);  if (selectFolderFragment != null) {    setActionListenerOnFolderSelection((SelectBookmarkFolderFragment)selectFolderFragment);    FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();    fragmentTransaction.hide(baseAddEditFragment);    Fragment addFolderFragment=getFragmentManager().findFragmentByTag(ADD_FOLDER_FRAGMENT_TAG);    if (addFolderFragment != null) {      fragmentTransaction.hide(selectFolderFragment);      setActionListenerOnAddEdit((AddEditBookmarkFragment)addFolderFragment);      Fragment addFolderSelectFolderFragment=getFragmentManager().findFragmentByTag(ADD_FOLDER_SELECT_FOLDER_FRAGMENT_TAG);      if (addFolderSelectFolderFragment != null) {        setActionListenerOnFolderSelection((SelectBookmarkFolderFragment)addFolderSelectFolderFragment);        fragmentTransaction.hide(addFolderFragment);        fragmentTransaction.show(addFolderSelectFolderFragment);      } else {        fragmentTransaction.show(addFolderFragment);      }    } else {      fragmentTransaction.show(selectFolderFragment);    }    fragmentTransaction.commit();  }}  }
class C{  private void signalNotEmpty(){  final ReentrantLock takeLock=this.takeLock;  takeLock.lock();  try {    notEmpty.signal();  }  finally {    takeLock.unlock();  }}  }
class C{  protected void recipeDelete(GoogleBaseService service,String id) throws ServiceException, IOException {  URL feedUrl=urlFactory.getItemsEntryURL(id);  service.delete(feedUrl);}  }
class C{  private void runTests() throws SQLException {  if (Boolean.getBoolean("abba")) {    abbaLockingDetector=new AbbaLockingDetector().startCollecting();  }  coverage=isCoverage();  smallLog=big=networked=memory=ssl=false;  diskResult=traceSystemOut=diskUndo=false;  mvcc=mvStore;  traceTest=stopOnError=false;  defrag=false;  traceLevelFile=throttle=0;  cipher=null;  test();  testUnit();  networked=true;  memory=true;  splitFileSystem=false;  test();  memory=false;  networked=false;  diskUndo=true;  diskResult=true;  traceLevelFile=3;  throttle=1;  cacheType="SOFT_LRU";  cipher="AES";  test();  diskUndo=false;  diskResult=false;  traceLevelFile=1;  throttle=0;  cacheType=null;  cipher=null;  defrag=true;  test();  traceLevelFile=0;  smallLog=true;  networked=true;  if (!fast) {    ssl=true;  }  defrag=false;  test();  if (!fast) {    big=true;    smallLog=false;    networked=false;    ssl=false;    traceLevelFile=0;    test();    testUnit();  }  big=false;  cipher="AES";  test();  mvcc=true;  cipher=null;  test();  memory=true;  test();}  }
class C{  public void clearCoreCacheKey(Object coreKey){  lock.lock();  try {    final LeafCache leafCache=cache.remove(coreKey);    if (leafCache != null) {      ramBytesUsed-=HASHTABLE_RAM_BYTES_PER_ENTRY;      final int numEntries=leafCache.cache.size();      if (numEntries > 0) {        onDocIdSetEviction(coreKey,numEntries,leafCache.ramBytesUsed);      } else {        assert numEntries == 0;        assert leafCache.ramBytesUsed == 0;      }    }  }  finally {    lock.unlock();  }}  }
class C{  public static byte[] serializeToBlob(Object obj,Version version) throws IOException {  final long start=startSerialization();  HeapDataOutputStream hdos=new HeapDataOutputStream(version);  DataSerializer.writeObject(obj,hdos);  byte[] result=hdos.toByteArray();  endSerialization(start,result.length);  return result;}  }
class C{  public CopyOnWriteMap(int initialCapacity){  internalMap=new HashMap<K,V>(initialCapacity);}  }
class C{  public static String defaultIfBlank(final String... values){  if (values != null) {    for (    final String value : values) {      if (!isBlank(value)) {        return value;      }    }  }  return null;}  }
class C{  @SuppressWarnings("rawtypes") public Vertex applyCALL(List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network) throws Exception {  String methodName=((Primitive)arguments.get(0).getTarget().applyQuotient(variables,network).getData()).getIdentity();  String senseName=((Primitive)arguments.get(1).getTarget().applyQuotient(variables,network).getData()).getIdentity();  Object source=network.getBot().awareness().getSense(senseName);  if (source == null) {    source=network.getBot().mind().getThought(senseName);  }  if (source == null) {    source=network.getBot().awareness().getTool(senseName);  }  if (source == null) {    throw new SelfExecutionException(this,"Missing calling sense, thought, or tool.");  }  int size=arguments.size() - 1;  Object[] methodArguments=new Object[size];  Class[] argumentTypes=new Class[size];  argumentTypes[0]=Vertex.class;  methodArguments[0]=this;  if (getNetwork() != network) {    methodArguments[0]=network.createVertex(this);  }  for (int index=2; index < arguments.size(); index++) {    Vertex argument=arguments.get(index).getTarget().applyQuotient(variables,network);    methodArguments[index - 1]=argument;    argumentTypes[index - 1]=Vertex.class;  }  Method method=source.getClass().getMethod(methodName,argumentTypes);  Vertex result=(Vertex)method.invoke(source,methodArguments);  if (result == null) {    result=network.createVertex(Primitive.NULL);  } else {    result=network.createVertex(result);  }  return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:05.847 -0500",hash_original_method="8FBD80CA87526A3E9471194C397AFFA8",hash_generated_method="AF58E0EE0F9F172D31B40E7C3E5F1D1B") public static final double previousDouble(double value){  if (value == Double.NEGATIVE_INFINITY) {    return value;  }  long bits;  if (value == 0) {    bits=0x8000000000000000L;  } else {    bits=Double.doubleToLongBits(value);  }  return Double.longBitsToDouble(value <= 0 ? bits + 1 : bits - 1);}  }
class C{  private WebDoc preparePage(String loginInfo){  WebDoc doc=WebDoc.create("Workflow");  head header=doc.getHead();  body b=doc.getBody();  header.addElement(new script("",WebEnv.getBaseDirectory("/js/window.js")));  header.addElement(new link().setRel("stylesheet").setHref(WebEnv.getBaseDirectory("/css/window.css")));  String title="Workflow" + " - " + loginInfo;  b.addElement(new script("top.document.title='" + title + "';"));  return doc;}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  private static <T>String apiVersion(T item,String apiVersion){  if (apiVersion != null && !apiVersion.isEmpty()) {    return trimVersion(apiVersion);  } else   if (item instanceof HasMetadata) {    return trimVersion(((HasMetadata)item).getApiVersion());  }  return null;}  }
class C{  void forceMonotonic(int modifiedStepIndex,int value){  if (modifiedStepIndex > 0) {    if (models[modifiedStepIndex - 1].getValue() > value) {      setModel(modifiedStepIndex - 1,value);    }  }  if (modifiedStepIndex < nValues - 1) {    if (value > models[modifiedStepIndex + 1].getValue()) {      setModel(modifiedStepIndex + 1,value);    }  }}  }
class C{  public static synchronized void removeKey(String key){  getInstance().properties.remove(key);}  }
class C{  public void clear(){  this.root=null;  this.size=0;}  }
class C{  public static SetDBIDs ensureSet(DBIDs ids){  if (ids instanceof SetDBIDs) {    return (SetDBIDs)ids;  } else {    return newHashSet(ids);  }}  }
class C{  @Override public void filter(ClientRequestContext requestContext) throws IOException {  long time=new Date().getTime();  String clientTraceId;  String traceOriginId;  String traceParentId=null;  if (this.parentEvent == null) {    traceOriginId=TracingUtil.generateUniqueId();    clientTraceId=traceOriginId;  } else {    traceOriginId=parentEvent.getOriginId();    clientTraceId=TracingUtil.generateUniqueId();    traceParentId=parentEvent.getTraceId();  }  TraceEvent clientTraceEvent=new TraceEvent(TracingConstants.CLIENT_TRACE_START,clientTraceId,traceOriginId,time);  clientTraceEvent.setInstanceId(instanceId);  clientTraceEvent.setInstanceName(instanceName);  clientTraceEvent.setParentId(traceParentId);  clientTraceEvent.setHttpMethod(requestContext.getMethod());  clientTraceEvent.setUrl(requestContext.getUri().toString());  requestContext.setProperty(TRACE_EVENT_ATTRIBUTE,clientTraceEvent);  requestContext.getHeaders().putSingle(TracingConstants.TRACE_ID_HEADER,clientTraceId);  requestContext.getHeaders().putSingle(TracingConstants.TRACE_ORIGIN_ID_HEADER,traceOriginId);  TracingUtil.pushToDAS(clientTraceEvent,dasUrl);}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);  if (cause != null) {    cause.printStackTrace(s);  }}  }
class C{  public byte[] processBlock(byte[] in,int inOff,int inLen){  if (key == null) {    throw new IllegalStateException("RSA engine not initialised");  }  BigInteger input=core.convertInput(in,inOff,inLen);  BigInteger result;  if (key instanceof RSAPrivateCrtKeyParameters) {    RSAPrivateCrtKeyParameters k=(RSAPrivateCrtKeyParameters)key;    BigInteger e=k.getPublicExponent();    if (e != null) {      BigInteger m=k.getModulus();      BigInteger r=BigIntegers.createRandomInRange(ONE,m.subtract(ONE),random);      BigInteger blindedInput=r.modPow(e,m).multiply(input).mod(m);      BigInteger blindedResult=core.processBlock(blindedInput);      BigInteger rInv=r.modInverse(m);      result=blindedResult.multiply(rInv).mod(m);    } else {      result=core.processBlock(input);    }  } else {    result=core.processBlock(input);  }  return core.convertOutput(result);}  }
class C{  public static CompoundTag readCompound(ByteBuf buf){  return readCompound(buf,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.083 -0500",hash_original_method="64184DC5B382438058CC5473730574C6",hash_generated_method="5A6E1628CDDCFD728C0DA065C4D778FE") public void postProcess(final HttpResponse response,final HttpProcessor processor,final HttpContext context) throws HttpException, IOException {  if (response == null) {    throw new IllegalArgumentException("HTTP response may not be null");  }  if (processor == null) {    throw new IllegalArgumentException("HTTP processor may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  processor.process(response,context);}  }
class C{  private TextImpl firstTextNodeInCurrentRun(){  TextImpl firstTextInCurrentRun=this;  for (Node p=getPreviousSibling(); p != null; p=p.getPreviousSibling()) {    short nodeType=p.getNodeType();    if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) {      firstTextInCurrentRun=(TextImpl)p;    } else {      break;    }  }  return firstTextInCurrentRun;}  }
class C{  public void init() throws ServletException {}  }
class C{  public void printDataset(){  for (int i=0; i < getNumPoints(); i++) {    System.out.println("\n" + getPoint(i));  }  System.out.println(" ");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue08.class,args);}  }
class C{  public static boolean checkForSupportedThreadDump(String logLine){  return logLine.startsWith("INFO   | jvm ") && logLine.trim().indexOf(" | Full thread dump") >= 0;}  }
class C{  public void go(Writer writer) throws IOException {  go(new VCardWriter(writer,getVCardWriterConstructorVersion()));}  }
class C{  @Override public Statement apply(Statement statement,Description description){  constructContext=new ConstructHiveContextStatement(serverAddress,statement);  return constructContext;}  }
class C{  private long determineFileTimestamp(final Cursor cursor){  cursor.moveToPrevious();  if (cursor.moveToNext()) {    final long timestamp=cursor.getLong(mColReqTimestamp);    cursor.moveToPrevious();    return timestamp;  }  return 0;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  byte[] src=get();  byte[] dest=new byte[src.length];  ConstPool cp=getConstPool();  LocalVariableAttribute attr=makeThisAttr(newCp,dest);  int n=ByteArray.readU16bit(src,0);  ByteArray.write16bit(n,dest,0);  int j=2;  for (int i=0; i < n; ++i) {    int start=ByteArray.readU16bit(src,j);    int len=ByteArray.readU16bit(src,j + 2);    int name=ByteArray.readU16bit(src,j + 4);    int type=ByteArray.readU16bit(src,j + 6);    int index=ByteArray.readU16bit(src,j + 8);    ByteArray.write16bit(start,dest,j);    ByteArray.write16bit(len,dest,j + 2);    if (name != 0)     name=cp.copy(name,newCp,null);    ByteArray.write16bit(name,dest,j + 4);    if (type != 0) {      String sig=cp.getUtf8Info(type);      sig=Descriptor.rename(sig,classnames);      type=newCp.addUtf8Info(sig);    }    ByteArray.write16bit(type,dest,j + 6);    ByteArray.write16bit(index,dest,j + 8);    j+=10;  }  return attr;}  }
class C{  public String composeName(String name,String prefix) throws NamingException {  checkIsDestroyed();  return composeName(nameParser.parse(name),nameParser.parse(prefix)).toString();}  }
class C{  public static void generateReportForAllSources() throws AdeException {  final Collection<MessageRateStats> statsSourceCollection=s_sourceToMsgRatesStatsMap.values();  for (  MessageRateStats statsForASource : statsSourceCollection) {    statsForASource.generateReport();  }}  }
class C{  public static BasicBeanDescription forOtherUse(MapperConfig<?> config,JavaType type,AnnotatedClass ac){  return new BasicBeanDescription(config,type,ac,Collections.<BeanPropertyDefinition>emptyList());}  }
class C{  public RunCustomOperationCommand(RemoteDebugger target,PyVariableLocator locator,String operationSource,String operationFnName){  this(target,locator,"EXEC",operationSource,operationFnName);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return STRING_THING;case 4:  return CHANGED;case 9:return I32_THING;case 11:return I64_THING;default :return null;}}  }
class C{  public boolean isConfigurable(){  return configurable;}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public boolean matches(String prefix,String contextTypeId){  return fContextTypeId.equals(contextTypeId);}  }
class C{  public static RefactoringStatus createWarningStatus(String msg){  return createStatus(WARNING,msg,null,null,RefactoringStatusEntry.NO_CODE,null);}  }
class C{  public boolean isDefault(){  return getState() == DEFAULT_STATE && getType() == DEFAULT_TYPE;}  }
class C{  public final TValue acquire(TKey key){  Preconditions.checkNotNull(key);  TValue value;synchronized (mLock) {    if (mLruKeyList.removeLastOccurrence(key)) {      value=mValuePool.get(key).remove();      mSize-=checkedSizeOf(key,value);    } else {      value=mConfiguration.create(key);    }  }  return value;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  PrintWriter out=null;  try {    response.setContentType("application/json");    String result=processPostRequest(request);    out=response.getWriter();    out.println(result);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  public void waitForRequestResponse(){  if (!delayResponse || !useLowLevel) {    Log.d(LOGTAG," Cant do this without delayReponse set ");    return;  }synchronized (syncObj) {    try {      syncObj.wait();    } catch (    InterruptedException e) {    }  }}  }
class C{  public int find(String string){  if (string == null) {    return -1;  }  for (int i=0; i != m_stringOffsets.length; ++i) {    int offset=m_stringOffsets[i];    int length=getShort(m_strings,offset);    if (length != string.length()) {      continue;    }    int j=0;    for (; j != length; ++j) {      offset+=2;      if (string.charAt(j) != getShort(m_strings,offset)) {        break;      }    }    if (j == length) {      return i;    }  }  return -1;}  }
class C{  public BasicBlock lookupBlockByLabel(int blockLabel){  for (Iterator<BasicBlock> i=blockIterator(); i.hasNext(); ) {    BasicBlock basicBlock=i.next();    if (basicBlock.getLabel() == blockLabel) {      return basicBlock;    }  }  return null;}  }
class C{  public void onConfigurationChanged(Configuration newConfig){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onConfigurationChanged(newConfig);    }  }}  }
class C{  protected List<WordToken> collate(List<WordToken> list){  List<WordToken> result=list;  if (previous != null) {    result=previous.collate(list);  }  result.add(word);  return result;}  }
class C{  static byte[] createKeyFromOldPassword(String passwd) throws NoSuchAlgorithmException {  passwd=makeScrambledPassword(passwd);  int[] salt=getSaltFromPassword(passwd);  return getBinaryPassword(salt,false);}  }
class C{  public static ConstantNode forFloat(float f,StructuredGraph graph){  return unique(graph,createPrimitive(JavaConstant.forFloat(f)));}  }
class C{  public String toString(){  return getName();}  }
class C{  public boolean hasActive(){  return getActive() != null;}  }
class C{  public static LatLon interpolateGreatCircle(double amount,LatLon value1,LatLon value2){  if (value1 == null || value2 == null) {    throw new IllegalArgumentException("Lat Lon Is Null");  }  if (LatLon.equals(value1,value2))   return value1;  double t=WWMath.clamp(amount,0d,1d);  Angle azimuth=LatLon.greatCircleAzimuth(value1,value2);  Angle distance=LatLon.greatCircleDistance(value1,value2);  Angle pathLength=Angle.fromDegrees(t * distance.degrees);  return LatLon.greatCircleEndPosition(value1,azimuth,pathLength);}  }
class C{  @Override public synchronized void close() throws SecurityException {  flushAndClose();}  }
class C{  public void createLabel(List<String> users,String label) throws IllegalArgumentException, ServiceException, MalformedURLException, IOException {  if (users.size() == 0) {    throw new IllegalArgumentException();  }  GenericEntry entry=new GenericEntry();  entry.addProperty(Constants.LABEL,label);  for (  String user : users) {    logger.log(Level.INFO,"Creating label ( label: " + label + " ) for user "+ user+ " ...");    insertSettings(user,entry,Constants.LABEL);    logger.log(Level.INFO,"Successfully created label.");  }}  }
class C{  protected void sequence_BogusTypeRefFragment_CatchVariable_ColonSepTypeRef(ISerializationContext context,CatchVariable semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void run(){  final int sleepTime=this.eval.getEvaluationInterval() * 1000;  if (logger.isDebugEnabled()) {    logger.debug("Starting health monitor.  Health will be evaluated every {} seconds.",(sleepTime / 1000));  }  try {    while (!this.stopRequested) {      this.dm.getCancelCriterion().checkCancelInProgress(null);      Thread.sleep(sleepTime);      if (!this.stopRequested) {        GemFireHealth.Health newStatus=this.eval.evaluate();        if (newStatus != this.currentStatus) {          this.currentStatus=newStatus;          HealthListenerMessage msg=HealthListenerMessage.create(getId(),newStatus);          msg.setRecipient(this.owner);          this.dm.putOutgoing(msg);        }      }    }  } catch (  InterruptedException ex) {    if (!this.stopRequested) {      logger.warn(LocalizedMessage.create(LocalizedStrings.HealthMonitorImpl_UNEXPECTED_STOP_OF_HEALTH_MONITOR),ex);    }  } finally {    this.eval.close();    this.stopRequested=true;    if (logger.isDebugEnabled()) {      logger.debug("Stopping health monitor");    }  }}  }
class C{  private void updateProjectDebuggers(){  for (  final INaviAddressSpace addressSpace : m_project.getContent().getAddressSpaces()) {    final IDebugger debugger=addressSpace.getConfiguration().getDebugger();    if (debugger != null) {      m_activeDebuggers.put(addressSpace,debugger);      m_debuggerProvider.addDebugger(debugger);    }  }}  }
class C{  public static List<ShapeRecord> straightEdge(double xFrom,double yFrom,double xTo,double yTo){  List<ShapeRecord> shapeRecords=new ArrayList<ShapeRecord>();  xFrom*=TWIPS_PER_PIXEL;  yFrom*=TWIPS_PER_PIXEL;  xTo*=TWIPS_PER_PIXEL;  yTo*=TWIPS_PER_PIXEL;  int dx=(int)xTo - (int)xFrom;  int dy=(int)yTo - (int)yFrom;  int abs_dx=Math.abs(dx);  int abs_dy=Math.abs(dy);  int numSegments=1;  if ((abs_dx > MAX_EDGE_SIZE) && (abs_dx > abs_dy)) {    numSegments=abs_dx / MAX_EDGE_SIZE + 1;  } else   if ((abs_dy > MAX_EDGE_SIZE) && (abs_dy > abs_dx)) {    numSegments=abs_dy / MAX_EDGE_SIZE + 1;  } else {    StraightEdgeRecord ser=new StraightEdgeRecord(dx,dy);    shapeRecords.add(ser);    return shapeRecords;  }  int xSeg=dx / numSegments;  int ySeg=dy / numSegments;  for (int i=0; i < numSegments; i++) {    if (i == numSegments - 1) {      int lastx=dx - xSeg * (numSegments - 1);      int lasty=dy - ySeg * (numSegments - 1);      StraightEdgeRecord ser=new StraightEdgeRecord(lastx,lasty);      shapeRecords.add(ser);    } else {      StraightEdgeRecord ser=new StraightEdgeRecord(xSeg,ySeg);      shapeRecords.add(ser);    }  }  return shapeRecords;}  }
class C{  public Extractors filter(Filter filter){  Validate.notNull(prevField,"must call extract method first!");  List<Filter> filters=filtersMap.getOrDefault(prevField,new LinkedList<>());  filters.add(filter);  filtersMap.put(prevField,filters);  return this;}  }
class C{  @SuppressWarnings("unchecked") public T findByIdParam(Object inputParam) throws Exception {  Field idField=inputParam.getClass().getDeclaredField(CommonsConstant.ID);  idField.setAccessible(true);  String className=getClassT().getSimpleName();  return repository.findById((ID)idField.get(inputParam)).orElseThrow(null);}  }
class C{  public void removeRelation(final Relation relation){  dirty=true;  undo.save(relation);  try {    if (relation.state == OsmElement.STATE_CREATED) {      apiStorage.removeElement(relation);    } else {      apiStorage.insertElementSafe(relation);    }    removeElementFromRelations(relation);    removeRelationFromMembers(relation);    currentStorage.removeRelation(relation);    relation.updateState(OsmElement.STATE_DELETED);    recordImagery();  } catch (  StorageException e) {    e.printStackTrace();  }}  }
class C{  protected void initMatrixStorage(){  this.A=new short[this.n][this.n];}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildDressingRoom(zone);}  }
class C{  public DLSequence(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.926 -0500",hash_original_method="D0BF4925CA67C3B6C5155741DF336C8F",hash_generated_method="F4B1985C5DC33FF2F80DDD5B8C80E043") @Deprecated public static void resetThreadExternalAllocSize(){}  }
class C{  private static boolean isThreeBytesSequence(byte b){  return -32 <= b && b <= -17;}  }
class C{  private long rotateRight(long x,long y){  return ((x >>> (y & (wordSize - 1))) | (x << (wordSize - (y & (wordSize - 1)))));}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public void testEmptyHighlights() throws Exception {  Directory dir=newDirectory();  IndexWriterConfig iwc=newIndexWriterConfig(new MockAnalyzer(random()));  iwc.setMergePolicy(newLogMergePolicy());  RandomIndexWriter iw=new RandomIndexWriter(random(),dir,iwc);  FieldType offsetsType=new FieldType(TextField.TYPE_STORED);  offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);  Document doc=new Document();  Field body=new Field("body","test this is.  another sentence this test has.  far away is that planet.",offsetsType);  doc.add(body);  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher searcher=newSearcher(ir);  PostingsHighlighter highlighter=new PostingsHighlighter();  Query query=new TermQuery(new Term("body","highlighting"));  int[] docIDs=new int[]{0};  String snippets[]=highlighter.highlightFields(new String[]{"body"},query,searcher,docIDs,new int[]{2}).get("body");  assertEquals(1,snippets.length);  assertEquals("test this is.  another sentence this test has.  ",snippets[0]);  ir.close();  dir.close();}  }
class C{  private static void loadLibraryResource(String resourceSubdirectoryName,String libraryName,String tempSubdirectoryName,String... dependentLibraryNames) throws Throwable {  for (  String dependentLibraryName : dependentLibraryNames) {    logger.log(level,"Library " + libraryName + " depends on "+ dependentLibraryName);    String dependentResourceSubdirectoryName=resourceSubdirectoryName + "/" + osString()+ "/"+ archString();    String dependentLibraryTempSubDirectoryName=libraryName + "_dependents" + File.separator+ osString()+ File.separator+ archString()+ File.separator;    loadLibraryResource(dependentResourceSubdirectoryName,dependentLibraryName,dependentLibraryTempSubDirectoryName);  }  String libraryFileName=createLibraryFileName(libraryName);  File libraryTempFile=createTempFile(tempSubdirectoryName,libraryFileName);  if (!libraryTempFile.exists()) {    String libraryResourceName=resourceSubdirectoryName + "/" + libraryFileName;    logger.log(level,"Writing resource  " + libraryResourceName);    logger.log(level,"to temporary file " + libraryTempFile);    writeResourceToFile(libraryResourceName,libraryTempFile);  }  logger.log(level,"Loading library " + libraryTempFile);  System.load(libraryTempFile.toString());  logger.log(level,"Loading library " + libraryTempFile + " DONE");}  }
class C{  public ASTContainer parseUpdate2(final String updateStr,final String baseURI) throws MalformedQueryException {  final long startTime=System.nanoTime();  if (log.isInfoEnabled())   log.info(updateStr);  try {    final ASTUpdateSequence updateSequence=SyntaxTreeBuilder.parseUpdateSequence(updateStr);    final UpdateRoot updateRoot=new UpdateRoot();    final ASTContainer astContainer=new ASTContainer(updateRoot);    astContainer.setQueryString(updateStr);    astContainer.setParseTree(updateSequence);    final UpdateExprBuilder updateExprBuilder=new UpdateExprBuilder(new BigdataASTContext(new LinkedHashMap<Value,BigdataValue>()));    final List<ASTUpdateContainer> updateOperations=updateSequence.getUpdateContainers();    List<ASTPrefixDecl> sharedPrefixDeclarations=null;    for (int i=0; i < updateOperations.size(); i++) {      final ASTUpdateContainer uc=updateOperations.get(i);      if (uc.jjtGetNumChildren() == 0 && i > 0 && i < updateOperations.size() - 1) {        throw new MalformedQueryException("empty update in sequence not allowed");      }      StringEscapesProcessor.process(uc);      BaseDeclProcessor.process(uc,baseURI);      final List<ASTPrefixDecl> prefixDeclList=uc.getPrefixDeclList();{        if (prefixDeclList == null || prefixDeclList.isEmpty()) {          if (sharedPrefixDeclarations != null) {            for (            final ASTPrefixDecl prefixDecl : sharedPrefixDeclarations) {              uc.jjtAppendChild(prefixDecl);            }          }        } else {          sharedPrefixDeclarations=prefixDeclList;        }      }      PrefixDeclProcessor.process(uc);      BlankNodeVarProcessor.process(uc);      new ASTDeferredIVResolutionInitializer().process(uc);      final ASTUpdate updateNode=uc.getUpdate();      if (updateNode != null) {        final Update updateOp=(Update)updateNode.jjtAccept(updateExprBuilder,null);        updateOp.setDatasetClauses(updateNode.getDatasetClauseList());        updateRoot.addChild(updateOp);      }    }    astContainer.setQueryParseTime(System.nanoTime() - startTime);    return astContainer;  } catch (  final ParseException e) {    throw new MalformedQueryException(e.getMessage(),e);  }catch (  final TokenMgrError e) {    throw new MalformedQueryException(e.getMessage(),e);  }catch (  final VisitorException e) {    throw new MalformedQueryException(e.getMessage(),e);  }}  }
class C{  public List<String> lookupRdf(String query){  String checksum=QueryMQL.getMD5Checksum(query);  String filename=rdfCacheLocation + "/" + checksum+ ".cached";  if (IOUtils.exists(filename)) {    try {      return LineIO.read(filename);    } catch (    FileNotFoundException e) {      e.printStackTrace();    }  } else {    System.out.println("Caching");    List<String> tmp=queryByID(query);    try {      FileUtils.writeStringToFile(new File(filename),tmp.stream().collect(joining("\n")),"UTF-8");    } catch (    IOException e) {      e.printStackTrace();    }    return tmp;  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.525 -0500",hash_original_method="9273ED8AEDE591E5D2100B41909C8A11",hash_generated_method="C2F0CCF4A1DAF110F7CBEF1FA7C79D71") public Intent replaceExtras(Intent src){  mExtras=src.mExtras;  return this;}  }
class C{  private boolean removeNode(NeuralConnection n){  NeuralConnection[] temp1=new NeuralConnection[m_neuralNodes.length - 1];  int skip=0;  for (int noa=0; noa < m_neuralNodes.length; noa++) {    if (n == m_neuralNodes[noa]) {      skip++;    } else     if (!((noa - skip) >= temp1.length)) {      temp1[noa - skip]=m_neuralNodes[noa];    } else {      return false;    }  }  m_neuralNodes=temp1;  return true;}  }
class C{  protected void initSpecialButtons(){  addSpecialButton("Shift",new Command("SH",SHIFT),15);  addSpecialButton("Delete",new Command("Del",DELETE_CHAR),15);  addSpecialButton("T9",new Command("T9",T9),15);  addSpecialButton("Mode",new Command(getNextMode(currentMode),CHANGE_MODE));  addSpecialButton("Space",new Command("Space",SPACE),50);  addSpecialButton("OK",new Command("Ok",OK));}  }
class C{  @Override public Boolean visitWildcard_Typevar(final AnnotatedWildcardType type1,final AnnotatedTypeVariable type2,final VisitHistory visited){  if (visited.contains(type1,type2)) {    return true;  }  visited.add(type1,type2);  return areEqual(type1.getExtendsBound(),type2.getUpperBound(),visited) && areEqual(type1.getSuperBound(),type2.getLowerBound(),visited);}  }
class C{  public final void consultStream(final InputStream ins,final String strStreamName) throws JIPSyntaxErrorException {  Consult1.consult(ins,strStreamName,this,0,getEnvVariable("enable_clause_check").equals("true"));}  }
class C{  public static void generate(ServletWriter out,Compiler compiler,Node.Nodes page) throws JasperException {  Generator gen=new Generator(out,compiler);  if (gen.isPoolingEnabled) {    gen.compileTagHandlerPoolList(page);  }  if (gen.ctxt.isTagFile()) {    JasperTagInfo tagInfo=(JasperTagInfo)gen.ctxt.getTagInfo();    gen.generateTagHandlerPreamble(tagInfo,page);    if (gen.ctxt.isPrototypeMode()) {      return;    }    gen.generateXmlProlog(page);    gen.fragmentHelperClass.generatePreamble();    page.visit(gen.new GenerateVisitor(gen.ctxt.isTagFile(),out,gen.methodsBuffered,gen.fragmentHelperClass));    gen.generateTagHandlerPostamble(tagInfo);  } else {    gen.generatePreamble(page);    gen.generateXmlProlog(page);    gen.fragmentHelperClass.generatePreamble();    page.visit(gen.new GenerateVisitor(gen.ctxt.isTagFile(),out,gen.methodsBuffered,gen.fragmentHelperClass));    gen.generatePostamble(page);  }}  }
class C{  public String modifyThinVolume(String systemObjectId,String luObjectId,Long newLUCapacityInBytes,String model) throws Exception {  return hdsApiVolumeManager.modifyVirtualVolume(systemObjectId,luObjectId,newLUCapacityInBytes,model);}  }
class C{  public static boolean isNullOrEmpty(StringBuilder text){  return (text == null) || isNullOrEmpty(text.toString());}  }
class C{  public static int decodePositionX(long pos){  return (int)(pos >> 38);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.paint=SerialUtilities.readPaint(stream);  this.domainGridlineStroke=SerialUtilities.readStroke(stream);  this.domainGridlinePaint=SerialUtilities.readPaint(stream);  this.rangeGridlineStroke=SerialUtilities.readStroke(stream);  this.rangeGridlinePaint=SerialUtilities.readPaint(stream);  if (this.domainAxis != null) {    this.domainAxis.addChangeListener(this);  }  if (this.rangeAxis != null) {    this.rangeAxis.addChangeListener(this);  }}  }
class C{  private CIMInstance checkExists(StorageSystem storage,CIMObjectPath objectPath,boolean propagated,boolean includeClassOrigin,String[] propertyList) throws Exception {  CIMInstance instance=null;  try {    if (objectPath != null) {      _log.debug(String.format("checkExists(storage=%s, objectPath=%s, propagated=%s, includeClassOrigin=%s)",storage.getSerialNumber(),objectPath.toString(),String.valueOf(propagated),String.valueOf(includeClassOrigin)));      instance=getInstance(storage,objectPath,propagated,includeClassOrigin,propertyList);    }  } catch (  WBEMException e) {    if (e.getID() != WBEMException.CIM_ERR_NOT_FOUND) {      throw e;    }  }catch (  Exception e) {    _log.error("checkExists call encountered an exception",e);    throw e;  }  return instance;}  }
class C{  public boolean hasEdgeFilter(){  return this.edgeFilter != null;}  }
class C{  void insertTechnicalProduct(XmlDocument doc,LocalizerServiceLocal localizer,TechnicalProduct technicalProduct){  Document xmldoc=doc.getDomDocument();  Element tp=xmldoc.createElement("TechnicalService");  tp=(Element)doc.getDomDocument().renameNode(tp,TECHNICAL_SERVICE_XSD,tp.getNodeName());  tp.setPrefix("tns");  doc.getRootNode().appendChild(tp);  tp.setAttribute("id",technicalProduct.getTechnicalProductId());  tp.setAttribute("build",technicalProduct.getTechnicalProductBuildId());  tp.setAttribute("provisioningType",technicalProduct.getProvisioningType().name());  tp.setAttribute("provisioningUrl",technicalProduct.getProvisioningURL());  tp.setAttribute("provisioningVersion",technicalProduct.getProvisioningVersion());  tp.setAttribute("provisioningUsername",technicalProduct.getProvisioningUsername());  tp.setAttribute("provisioningPassword",technicalProduct.getProvisioningPassword());  tp.setAttribute("accessType",technicalProduct.getAccessType().name());  tp.setAttribute("baseUrl",technicalProduct.getBaseURL());  tp.setAttribute("loginPath",technicalProduct.getLoginPath());  tp.setAttribute("onlyOneSubscriptionPerUser",String.valueOf(technicalProduct.isOnlyOneSubscriptionAllowed()));  tp.setAttribute("allowingOnBehalfActing",String.valueOf(technicalProduct.isAllowingOnBehalfActing()));  tp.setAttribute("billingIdentifier",String.valueOf(technicalProduct.getBillingIdentifier()));  appendLocalizedValues(xmldoc,localizer,tp,LocalizedObjectTypes.TEC_PRODUCT_LOGIN_ACCESS_DESC,technicalProduct.getKey(),"AccessInfo");  appendLocalizedValues(xmldoc,localizer,tp,LocalizedObjectTypes.TEC_PRODUCT_TECHNICAL_DESC,technicalProduct.getKey(),"LocalizedDescription");  appendLocalizedValues(xmldoc,localizer,tp,LocalizedObjectTypes.PRODUCT_LICENSE_DESC,technicalProduct.getKey(),"LocalizedLicense");  appendLocalizedTags(xmldoc,tp,technicalProduct);  appendParameters(xmldoc,tp,localizer,technicalProduct);  appendEvents(xmldoc,tp,localizer,technicalProduct);  appendRoles(xmldoc,tp,localizer,technicalProduct);  appendOperations(xmldoc,tp,localizer,technicalProduct);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  try {    doPostHelper(request,response);  } catch (  final Exception e) {    logger.log(Level.INFO,"Exception",e);    response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  }  dbLogic.rollback();}  }
class C{  public ValueSource parseValueSource() throws SyntaxError {  return parseValueSource(FLAG_DEFAULT | FLAG_CONSUME_DELIMITER);}  }
class C{  public void resetPolicy(){  mPreferences.putString(PREF_LAST_RESPONSE,Integer.toString(Policy.RETRY));  setRetryUntil(DEFAULT_RETRY_UNTIL);  setMaxRetries(DEFAULT_MAX_RETRIES);  setRetryCount(Long.parseLong(DEFAULT_RETRY_COUNT));  setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);  mPreferences.commit();}  }
class C{  public void showDialog(@NotNull List<VirtualFile> files,int x,int y,@NotNull AsyncCallback<Void> callback){  this.callback=callback;  view.setOpenedFiles(files);  view.showDialog(x,y);}  }
class C{  public byte[] buildResponse(String userEmail,XoauthProtocol protocol,String oauthToken,String oauthTokenSecret,OAuthConsumer consumer) throws IOException, OAuthException, URISyntaxException {  OAuthAccessor accessor=new OAuthAccessor(consumer);  accessor.tokenSecret=oauthTokenSecret;  Map<String,String> parameters=new HashMap<String,String>();  parameters.put(OAuth.OAUTH_SIGNATURE_METHOD,"HMAC-SHA1");  parameters.put(OAuth.OAUTH_TOKEN,oauthToken);  String url=String.format("https://mail.google.com/mail/b/%s/%s/",userEmail,protocol.getName());  OAuthMessage message=new OAuthMessage("GET",url,parameters.entrySet());  message.addRequiredParameters(accessor);  StringBuilder authString=new StringBuilder();  authString.append("GET ");  authString.append(url);  authString.append(" ");  int i=0;  for (  Map.Entry<String,String> entry : message.getParameters()) {    if (i++ > 0) {      authString.append(",");    }    authString.append(OAuth.percentEncode(entry.getKey()));    authString.append("=\"");    authString.append(OAuth.percentEncode(entry.getValue()));    authString.append("\"");  }  return authString.toString().getBytes();}  }
class C{  public DebuggerEventSettings(final boolean breakOnDllLoad,final boolean breakOnDllUnload){  this.breakOnDllLoad=breakOnDllLoad;  this.breakOnDllUnload=breakOnDllUnload;}  }
class C{  public ImportFolderValidation validate(final String path){  Check.notNull(path,"path");  if (validationCache == null) {    validationCache=new HashMap();  } else {    if (validationCache.containsKey(path)) {      return (ImportFolderValidation)validationCache.get(path);    }  }  final ImportFolderValidation validation=computeValidation(path);  validationCache.put(path,validation);  return validation;}  }
class C{  public boolean isIncludedTaxDifference(){  return Env.ZERO.compareTo(getIncludedTaxDifference()) != 0;}  }
class C{  public Recommendation(U user,List<Tuple2od<I>> items){  this.user=user;  this.items=items;}  }
class C{  public void add(Symbol symbol){  symbols.add(symbol);}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof MouseDelegator) {    Debug.message("mousemodepanel","MouseModePanel found a MouseDelegator.");    setMouseDelegator((MouseDelegator)someObj);  }}  }
class C{  public Object transform(Object value){  return transform(value,null);}  }
class C{  public final Iterator<KnowledgeEdge> forbiddenEdgesIterator(){  return getForbiddenEdges().iterator();}  }
class C{  @Override public String toString(){  return "ReadAchievementsForPlayerCommand [player=" + player + "]";}  }
class C{  public static IStatus validateClassFileName(String name){  return validateClassFileName(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public VcfRecord addFormat(String key){  if (!mFormatAndSample.containsKey(key)) {    mFormatAndSample.put(key,new ArrayList<String>());  }  return this;}  }
class C{  protected MutableAttributeSet createLargeAttributeSet(AttributeSet a){  return new LargeConversionSet(a);}  }
class C{  public void configure(CompilerConfiguration configuration){  this.configuration=configuration;}  }
class C{  public static Float convertWordSpacing(Element e){  Value v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.WORD_SPACING_INDEX);  if (v.getPrimitiveType() == CSSPrimitiveValue.CSS_IDENT) {    return null;  }  return new Float(v.getFloatValue());}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0) {    args=new String[2];    Scanner sc=new Scanner(System.in);    System.out.print("NCOL DFS from file:");    args[0]=sc.nextLine();    System.out.print("TLP to file:");    args[1]=sc.nextLine();    sc.close();  }  Scanner sc=new Scanner(new File(args[0]));  PrintWriter pw=new PrintWriter(new File(args[1]));  pw.println("(tlp \"2.0\"");  pw.println("(author \"George Heineman \")");  Hashtable<Integer,ArrayList<Integer>> map=new Hashtable<Integer,ArrayList<Integer>>();  int maxId=-1;  while (sc.hasNextLine()) {    int n1=sc.nextInt();    int n2=sc.nextInt();    sc.nextLine();    ArrayList<Integer> exist=map.get(n1);    if (exist == null) {      exist=new ArrayList<Integer>();      map.put(n1,exist);    }    exist.add(n2);    if (n2 > maxId) {      maxId=n2;    }    if (n1 > maxId) {      maxId=n1;    }  }  sc.close();  pw.print("(nodes ");  for (int i=0; i <= maxId; i++) {    pw.print(i + " ");  }  pw.println(")");  int edgeid=1;  for (int i=0; i <= maxId; i++) {    ArrayList<Integer> exist=map.get(i);    if (exist == null || exist.size() == 0) {      continue;    }    for (int j=0; j < exist.size(); j++) {      pw.println("(edge " + edgeid + " "+ i+ " "+ exist.get(j)+ ")");      edgeid++;    }  }  pw.println(")");  pw.flush();  pw.close();}  }
class C{  private void putValues(ContentValues values,Field fd,Object obj){  Class<?> clazz=values.getClass();  try {    Object[] parameters=new Object[]{fd.getName(),fd.get(obj)};    Class<?>[] parameterTypes=getParameterTypes(fd,fd.get(obj),parameters);    Method method=clazz.getDeclaredMethod("put",parameterTypes);    method.setAccessible(true);    method.invoke(values,parameters);  } catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }}  }
class C{  public final AssertSubscriber<T> requestedFusionMode(int requestMode){  this.requestedFusionMode=requestMode;  return this;}  }
class C{  public boolean allowsPublicLookups(){  return this.allowPublicLookup;}  }
class C{  public String selectHeaderContentType(String[] contentTypes){  if (contentTypes.length == 0) {    return "application/json";  }  if (StringUtil.containsIgnoreCase(contentTypes,"application/json")) {    return "application/json";  }  return contentTypes[0];}  }
class C{  @Override public IMessage onMessage(MessageFluidTankContents message,MessageContext ctx){  Minecraft.getMinecraft().addScheduledTask(null);  return null;}  }
class C{  private final void _writeSegment(int end) throws IOException, JsonGenerationException {  final int[] escCodes=_outputEscapes;  final int escLen=escCodes.length;  int ptr=0;  int start=ptr;  output_loop:   while (ptr < end) {    char c;    while (true) {      c=_outputBuffer[ptr];      if (c < escLen && escCodes[c] != 0) {        break;      }      if (++ptr >= end) {        break;      }    }    int flushLen=(ptr - start);    if (flushLen > 0) {      _writer.write(_outputBuffer,start,flushLen);      if (ptr >= end) {        break output_loop;      }    }    ++ptr;    start=_prependOrWriteCharacterEscape(_outputBuffer,ptr,end,c,escCodes[c]);  }}  }
class C{  public void insertBefore(Chain<E> toInsert,E point){  LinkedList<E> backwardList=new LinkedList<E>();{    Iterator<E> it=toInsert.iterator();    while (it.hasNext())     backwardList.addFirst(it.next());  }  E previousPoint=point;  Iterator<E> it=backwardList.iterator();  while (it.hasNext()) {    E o=it.next();    insertBefore(o,previousPoint);    previousPoint=o;  }}  }
class C{  public static void e(String tag,String msg){  e(tag,msg,null);}  }
class C{  protected void appendLongInteger(long longInt){  int size;  long temp=longInt;  for (size=0; (temp != 0) && (size < LONG_INTEGER_LENGTH_MAX); size++) {    temp=(temp >>> 8);  }  appendShortLength(size);  int i;  int shift=(size - 1) * 8;  for (i=0; i < size; i++) {    append((int)((longInt >>> shift) & 0xff));    shift=shift - 8;  }}  }
class C{  public void showKeySelectedEntry(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStore keyStore=currentState.getKeyStore();    Key key=keyStore.getKey(alias,password.toCharArray());    if (key instanceof SecretKey) {      SecretKey secretKey=(SecretKey)key;      DViewSecretKey dViewSecretKey=new DViewSecretKey(frame,MessageFormat.format(res.getString("KeyDetailsAction.SecretKeyDetailsEntry.Title"),alias),secretKey);      dViewSecretKey.setLocationRelativeTo(frame);      dViewSecretKey.setVisible(true);    } else     if (key instanceof PrivateKey) {      PrivateKey privateKey=(PrivateKey)key;      DViewPrivateKey dViewPrivateKey=new DViewPrivateKey(frame,MessageFormat.format(res.getString("KeyDetailsAction.PrivateKeyDetailsEntry.Title"),alias),privateKey,history.getExplicitProvider());      dViewPrivateKey.setLocationRelativeTo(frame);      dViewPrivateKey.setVisible(true);    } else     if (key instanceof PublicKey) {      PublicKey publicKey=(PublicKey)key;      DViewPublicKey dViewPublicKey=new DViewPublicKey(frame,MessageFormat.format(res.getString("KeyDetailsAction.PublicKeyDetailsEntry.Title"),alias),publicKey);      dViewPublicKey.setLocationRelativeTo(frame);      dViewPublicKey.setVisible(true);    }  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== PHDRMetaDataTrackSubdescriptor ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  return sb.toString();}  }
class C{  public Bagging(Regressor baseRegressor){  this(baseRegressor,DEFAULT_EXTRA_SAMPLES,DEFAULT_SIMULTANIOUS_TRAINING);}  }
class C{  public static int murmurhash3_x86_32(CharSequence data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int pos=offset;  int end=offset + len;  int k1=0;  int k2=0;  int shift=0;  int bits=0;  int nBytes=0;  while (pos < end) {    int code=data.charAt(pos++);    if (code < 0x80) {      k2=code;      bits=8;    } else     if (code < 0x800) {      k2=(0xC0 | (code >> 6)) | ((0x80 | (code & 0x3F)) << 8);      bits=16;    } else     if (code < 0xD800 || code > 0xDFFF || pos >= end) {      k2=(0xE0 | (code >> 12)) | ((0x80 | ((code >> 6) & 0x3F)) << 8) | ((0x80 | (code & 0x3F)) << 16);      bits=24;    } else {      int utf32=(int)data.charAt(pos++);      utf32=((code - 0xD7C0) << 10) + (utf32 & 0x3FF);      k2=(0xff & (0xF0 | (utf32 >> 18))) | ((0x80 | ((utf32 >> 12) & 0x3F))) << 8 | ((0x80 | ((utf32 >> 6) & 0x3F))) << 16 | (0x80 | (utf32 & 0x3F)) << 24;      bits=32;    }    k1|=k2 << shift;    shift+=bits;    if (shift >= 32) {      k1*=c1;      k1=(k1 << 15) | (k1 >>> 17);      k1*=c2;      h1^=k1;      h1=(h1 << 13) | (h1 >>> 19);      h1=h1 * 5 + 0xe6546b64;      shift-=32;      if (shift != 0) {        k1=k2 >>> (bits - shift);      } else {        k1=0;      }      nBytes+=4;    }  }  if (shift > 0) {    nBytes+=shift >> 3;    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;  }  h1^=nBytes;  h1^=h1 >>> 16;  h1*=0x85ebca6b;  h1^=h1 >>> 13;  h1*=0xc2b2ae35;  h1^=h1 >>> 16;  return h1;}  }
class C{  protected boolean appliesTo(Method targetMethod){  return true;}  }
class C{  public Boolean isMandatory(){  return mandatory;}  }
class C{  public DoubleLinkedList<IMove> validMoves(){  DoubleLinkedList<IMove> list=new DoubleLinkedList<IMove>();  if (this.s < MAX_VALUE) {    list.insert(new PlusMove());  }  return list;}  }
class C{  public static String encode(String input){  return Base64.encodeBase64String(input.getBytes(StandardCharsets.UTF_8));}  }
class C{  public void cancelAllRequests(String tag){  if (getRequestQueue() != null) {    getRequestQueue().cancelAll(tag);  }}  }
class C{  ColorSelector(){  super(new HSLSelectionModel());  HSLSelectionModel model=getSelectionModel();  hueSaturationSelector=new HueSaturationSelector(model);  add(hueSaturationSelector);  lightnessSelector=new LightnessSelector(model);  add(lightnessSelector,SLayout.EXPAND_X);}  }
class C{  public void delete(QuadEdge e){  QuadEdge.splice(e,e.oPrev());  QuadEdge.splice(e.sym(),e.sym().oPrev());  QuadEdge eSym=e.sym();  QuadEdge eRot=e.rot();  QuadEdge eRotSym=e.rot().sym();  quadEdges.remove(e);  quadEdges.remove(eSym);  quadEdges.remove(eRot);  quadEdges.remove(eRotSym);  e.delete();  eSym.delete();  eRot.delete();  eRotSym.delete();}  }
class C{  public boolean isClipping(){  return clipping;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  GenericStack<String> stack=new GenericStack<>();  System.out.print("Enter five strings: ");  for (int i=0; i < 5; i++)   stack.push(input.next());  while (!stack.isEmpty())   System.out.print(stack.pop() + " ");  System.out.println();}  }
class C{  private static boolean isExternalStorageWritable(){  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());}  }
class C{  public boolean isShouldLocalize(){  return shouldLocalize;}  }
class C{  public Boolean hexists(final String key,final String field){  checkIsInMulti();  client.hexists(key,field);  return client.getIntegerReply() == 1;}  }
class C{  synchronized void initmessage(DCCppReply l){  int oldState=internalState;  message(l);  internalState=oldState;}  }
class C{  public RangeSlider(){  initSlider();}  }
class C{  public void remove(String string){  checkWidget();  if (string == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  int index=-1;  for (int i=0, n=this.table.getItemCount(); i < n; i++) {    if (this.table.getItem(i).getText().equals(string)) {      index=i;      break;    }  }  remove(index);}  }
class C{  public TimingHit tcpConnectTime(Integer value){  setInteger(TCP_CONNECT_TIME,value);  return this;}  }
class C{  public KMLMultiGeometry(String namespaceURI){  super(namespaceURI);}  }
class C{  private boolean addDownloadFile(DownloadFileInfo downloadFileInfo){  if (!DownloadFileUtil.isLegal(downloadFileInfo)) {    return false;  }  ContentDbDao dao=mDownloadFileDbHelper.getContentDbDao(DownloadFileInfo.Table.TABLE_NAME_OF_DOWNLOAD_FILE);  if (dao == null) {    return false;  }  ContentValues values=downloadFileInfo.getContentValues();  if (ContentValuesUtil.isEmpty(values)) {    return false;  }  String url=downloadFileInfo.getUrl();  DownloadFileInfo downloadFileInfoExist=getDownloadFile(url);  if (DownloadFileUtil.isLegal(downloadFileInfoExist) && downloadFileInfoExist != downloadFileInfo) {    Type type=Type.OTHER;    int changeCount=0;    if (downloadFileInfoExist.getStatus() != downloadFileInfo.getStatus()) {      changeCount++;      type=Type.DOWNLOAD_STATUS;    }    if (downloadFileInfoExist.getDownloadedSizeLong() != downloadFileInfo.getDownloadedSizeLong()) {      changeCount++;      type=Type.DOWNLOADED_SIZE;    }    if (downloadFileInfoExist.getFileDir() != null && !downloadFileInfoExist.getFileDir().equals(downloadFileInfo.getFileDir())) {      changeCount++;      type=Type.SAVE_DIR;    }    if (downloadFileInfoExist.getFileName() != null && !downloadFileInfoExist.getFileName().equals(downloadFileInfo.getFileName())) {      changeCount++;      type=Type.SAVE_FILE_NAME;    }    if (changeCount > 1) {      type=Type.OTHER;    }synchronized (mModifyLock) {      downloadFileInfoExist.update(downloadFileInfo);      boolean isSucceed=updateDownloadFileInternal(downloadFileInfoExist,false,type);      if (!isSucceed) {      }      return true;    }  }synchronized (mModifyLock) {    long id=dao.insert(values);    if (id != -1) {      downloadFileInfo.setId(new Integer((int)id));      mDownloadFileInfoMap.put(url,downloadFileInfo);      notifyDownloadFileCreated(downloadFileInfo);      return true;    }  }  return false;}  }
class C{  private static void usage(){  System.out.printf("Usage: ReadFileRecord connection unit file record registers [repeat]");  System.exit(1);}  }
class C{  public float maxTexcoordU(){  return maxTexcoordU;}  }
class C{  public void goUp(){  mCurrentPath=getParent(mCurrentPath);  mCheckedItems.clear();  mCheckedVisibleViewHolders.clear();  refresh();}  }
class C{  @Override @SuppressWarnings("unchecked") protected void doReadObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {  this.keyType=ReferenceStrength.resolve(in.readInt());  this.valueType=ReferenceStrength.resolve(in.readInt());  this.purgeValues=in.readBoolean();  this.loadFactor=in.readFloat();  final int capacity=in.readInt();  init();  data=new HashEntry[capacity];  while (true) {    final K key=(K)in.readObject();    if (key == null) {      break;    }    final V value=(V)in.readObject();    put(key,value);  }  threshold=calculateThreshold(data.length,loadFactor);}  }
class C{  public ClipboardPattern(Clipboard clipboard){  checkNotNull(clipboard);  this.clipboard=clipboard;  Vector size=clipboard.getMaximumPoint().subtract(clipboard.getMinimumPoint()).add(1,1,1);  this.sx=size.getBlockX();  this.sy=size.getBlockY();  this.sz=size.getBlockZ();  this.min=clipboard.getMinimumPoint();}  }
class C{  private void readDataFromCsv(CsvFileSet fileSet,CsvKey key,String dataPrefix,int lines) throws Exception {  CsvFile csvFile=fileSet.getCsvFile(key);  File file=csvFile.getFile();  Assert.assertTrue("CSV file must exist: " + file.getAbsolutePath(),file.canRead());  FileReader fr=new FileReader(file);  BufferedReader br=new BufferedReader(fr);  for (int i=0; i < lines; i++) {    String line=br.readLine();    String data=dataPrefix + i;    boolean containsData=line.contains(data);    Assert.assertTrue("Must find data in output file: name=" + file.getAbsolutePath() + " data="+ data,containsData);  }  br.close();}  }
class C{  @Override public void process(V tuple){  result+=tuple.doubleValue();  doEmit=true;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME___GET_NAME:    return getName();}return super.eInvoke(operationID,arguments);}  }
class C{  public static Destination findDestination(String destinationName,Session session) throws JMSException {  Destination destination=null;  try {    destination=session.createQueue(destinationName);  } catch (  Exception failed) {    if (LOGGER.isTraceEnabled())     LOGGER.logTrace("Failed to find queue with name: " + destinationName,failed);  }  if (destination == null) {    try {      destination=session.createTopic(destinationName);    } catch (    Exception failed) {      if (LOGGER.isTraceEnabled())       LOGGER.logTrace("Failed to find topic with name: " + destinationName,failed);    }  }  if (destination == null) {    AtomikosJMSException.throwAtomikosJMSException("The specified destination could not be found: " + destinationName);  }  return destination;}  }
class C{  public AList(){  items=new int[100];  size=0;}  }
class C{  private void addReplicasToConsistencyGroup(StorageSystem storage,BlockConsistencyGroup consistencyGroup,List<URI> replicas,Map<URI,BlockObject> uriToBlockObjectMap) throws Exception {  String replicationGroupName=ControllerUtils.getGroupNameFromReplicas(replicas,consistencyGroup,_dbClient);  if (replicationGroupName == null) {    _log.info("Creating Replication Group for replicas");    CIMObjectPath replicationSvc=_cimPath.getControllerReplicationSvcPath(storage);    CIMArgument[] inArgs=_helper.getCreateReplicationGroupInputArguments(null);    CIMArgument[] outArgs=new CIMArgument[5];    _helper.invokeMethod(storage,replicationSvc,SmisConstants.CREATE_GROUP,inArgs,outArgs);    final String instanceID=(String)_cimPath.getCimObjectPathFromOutputArgs(outArgs,CP_REPLICATION_GROUP).getKey(CP_INSTANCE_ID).getValue();    final String groupName=instanceID.split(Constants.PATH_DELIMITER_REGEX)[storage.getUsingSmis80() ? 1 : 0];    replicationGroupName=groupName;    _log.info("Group name generated: {}",groupName);    _log.info("Adding replicas to Replication Group {}",groupName);    CIMObjectPath cgPath=_cimPath.getReplicationGroupPath(storage,groupName);    String[] blockObjectNames=_helper.getBlockObjectAlternateNames(replicas);    CIMObjectPath[] members=_cimPath.getVolumePaths(storage,blockObjectNames);    CIMArgument[] addMembersInput=_helper.getAddMembersInputArguments(cgPath,members);    CIMArgument[] output=new CIMArgument[5];    _helper.invokeMethod(storage,replicationSvc,SmisConstants.ADD_MEMBERS,addMembersInput,output);  } else {    _log.info("Adding replicas to Device Masking Group equivalent to its ReplicationGroup {}",replicationGroupName);    List<URI> replicasToAdd=_helper.filterReplicasAlreadyPartOfReplicationGroup(storage,replicationGroupName,replicas);    if (!replicasToAdd.isEmpty()) {      CIMArgument[] inArgsAdd=_helper.getAddVolumesToMaskingGroupInputArguments(storage,replicationGroupName,replicasToAdd,null,true);      CIMArgument[] outArgsAdd=new CIMArgument[5];      _helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),SmisConstants.ADD_MEMBERS,inArgsAdd,outArgsAdd,null);    } else {      _log.info("Requested replicas {} are already part of the Replication Group {}, hence skipping AddMembers call..",Joiner.on(", ").join(replicas),replicationGroupName);    }  }  for (  URI replica : replicas) {    BlockObject replicaObject=uriToBlockObjectMap.get(replica);    replicaObject.setReplicationGroupInstance(replicationGroupName);    if (!(replicaObject instanceof Volume && ControllerUtils.isVolumeFullCopy((Volume)replicaObject,_dbClient))) {      replicaObject.setConsistencyGroup(consistencyGroup.getId());    } else     if (replicaObject instanceof BlockSnapshot) {      String snapSetLabel=ControllerUtils.getSnapSetLabelFromExistingSnaps(replicationGroupName,replicaObject.getStorageController(),_dbClient);      if (null != snapSetLabel) {        ((BlockSnapshot)replicaObject).setSnapsetLabel(snapSetLabel);      } else {        ((BlockSnapshot)replicaObject).setSnapsetLabel(replicationGroupName);      }    }    _dbClient.updateAndReindexObject(replicaObject);  }}  }
class C{  protected CSSParseException createCSSParseException(String key,Object[] params){  return createCSSParseException(key,params,getLineNumber());}  }
class C{  public static double convert(double value,int fromYear,int toYear){  populateInflationMap();  if (!inflationMap.containsKey(fromYear)) {    throw new IllegalArgumentException("There is no year " + fromYear + " in the inflation map.");  }  if (!inflationMap.containsKey(toYear)) {    throw new IllegalArgumentException("There is no year " + toYear + " in the inflation map.");  }  double factor=1.0;  if (fromYear == toYear) {  } else   if (fromYear < toYear) {    for (int year=fromYear + 1; year <= toYear; year++) {      if (!inflationMap.containsKey(year)) {        throw new IllegalArgumentException("Did not find an inflation rate for " + year);      }      factor*=(1 + inflationMap.get(year));    }  } else {    for (int year=fromYear; year >= toYear + 1; year--) {      if (!inflationMap.containsKey(year)) {        throw new IllegalArgumentException("Did not find an inflation rate for " + year);      }      factor/=(1 + inflationMap.get(year));    }  }  return value * factor;}  }
class C{  protected WildcardImpl(){  super();}  }
class C{  private void linkFirst(E e){  final Node<E> f=first;  final Node<E> newNode=new Node<>(null,e,f);  first=newNode;  if (f == null)   last=newNode; else   f.prev=newNode;  size++;  modCount++;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 188) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public DirectPostingsFormat(int minSkipCount,int lowFreqCutoff){  super("Direct");  this.minSkipCount=minSkipCount;  this.lowFreqCutoff=lowFreqCutoff;}  }
class C{  public Scanner createScannerByKey(RawComparable beginKey,RawComparable endKey) throws IOException {  if ((beginKey != null) && (endKey != null) && (compareKeys(beginKey,endKey) >= 0)) {    return new Scanner(this,beginKey,beginKey);  }  return new Scanner(this,beginKey,endKey);}  }
class C{  public void transform(double[] src,int srcOff,float[] dst,int dstOff,int length){  while (--length >= 0) {    double x=src[srcOff++];    double y=src[srcOff++];    dst[dstOff++]=(float)(x * m00 + y * m01 + m02);    dst[dstOff++]=(float)(x * m10 + y * m11 + m12);  }}  }
class C{  public void endDTD() throws SAXException {  if (null != m_resultLexicalHandler)   m_resultLexicalHandler.endDTD();}  }
class C{  public void valueChanged(Text text){  updateInfo();}  }
class C{  private void calculatePath(){  mAboveWavePath.reset();  mBlowWavePath.reset();  getWaveOffset();  float y;  mAboveWavePath.moveTo(left,bottom);  for (float x=0; x <= mMaxRight; x+=X_SPACE) {    y=(float)(mWaveHeight * Math.sin(omega * x + mAboveOffset) + mWaveHeight);    mAboveWavePath.lineTo(x,y);  }  mAboveWavePath.lineTo(right,bottom);  mBlowWavePath.moveTo(left,bottom);  for (float x=0; x <= mMaxRight; x+=X_SPACE) {    y=(float)(mWaveHeight * Math.sin(omega * x + mBlowOffset) + mWaveHeight);    mBlowWavePath.lineTo(x,y);  }  mBlowWavePath.lineTo(right,bottom);}  }
class C{  public static final ExecutableElement elementFromDeclaration(MethodTree node){  ExecutableElement elt=(ExecutableElement)InternalUtils.symbol(node);  return elt;}  }
class C{  @NonNull public Todo newTodoFromCursor(@NonNull Cursor cursor){  return Todo_Schema.INSTANCE.newModelFromCursor(connection,cursor,0);}  }
class C{  public boolean hasProperties(){  return hasRepeatingExtension(Property.class);}  }
class C{  public HeapMemory reset(byte[] array){  this.array=array;  return this;}  }
class C{  public void putMessage(MqttWireMessage message,MqttToken token) throws MqttException {  BufferedMessage bufferedMessage=new BufferedMessage(message,token);synchronized (bufLock) {    if (buffer.size() < bufferOpts.getBufferSize()) {      buffer.add(bufferedMessage);    } else     if (bufferOpts.isDeleteOldestMessages() == true) {      buffer.remove(0);      buffer.add(bufferedMessage);    } else {      throw new MqttException(MqttException.REASON_CODE_DISCONNECTED_BUFFER_FULL);    }  }}  }
class C{  public static void initNoGzip(CFlags flags){  flags.registerOptional('Z',NO_GZIP,"do not gzip the output").setCategory(CommonFlagCategories.UTILITY);}  }
class C{  public int find(String string){  if (string == null) {    return -1;  }  for (int i=0; i != m_stringOffsets.length; ++i) {    int offset=m_stringOffsets[i];    int length=getShort(m_strings,offset);    if (length != string.length()) {      continue;    }    int j=0;    for (; j != length; ++j) {      offset+=2;      if (string.charAt(j) != getShort(m_strings,offset)) {        break;      }    }    if (j == length) {      return i;    }  }  return -1;}  }
class C{  protected void adjustVisibility(Rectangle nloc){  if (component == null) {    return;  }  if (SwingUtilities.isEventDispatchThread()) {    component.scrollRectToVisible(nloc);  } else {    SwingUtilities.invokeLater(new SafeScroller(nloc));  }}  }
class C{  private static Escape[] hex2Escapes(char min,char max){  Escape[] out=new Escape[max - min + 1];  for (int i=0; i < out.length; ++i) {    StringBuilder sb=new StringBuilder(4);    char ch=(char)(min + i);    try {      hex2Escape(ch,sb);    } catch (    IOException ex) {      throw new SomethingWidgyHappenedError("StringBuilders don't throw IOException",ex);    }    out[i]=new Escape(ch,sb.toString());  }  return out;}  }
class C{  private boolean startTcpServer(InetAddress hostAddr,int port,GridNioServerListener<GridClientMessage> lsnr,GridNioParser parser,@Nullable SSLContext sslCtx,ConnectorConfiguration cfg){  try {    GridNioFilter codec=new GridNioCodecFilter(parser,log,false);    GridNioFilter[] filters;    if (sslCtx != null) {      GridNioSslFilter sslFilter=new GridNioSslFilter(sslCtx,cfg.isDirectBuffer(),ByteOrder.nativeOrder(),log);      sslFilter.directMode(false);      boolean auth=cfg.isSslClientAuth();      sslFilter.wantClientAuth(auth);      sslFilter.needClientAuth(auth);      filters=new GridNioFilter[]{codec,sslFilter};    } else     filters=new GridNioFilter[]{codec};    srv=GridNioServer.<GridClientMessage>builder().address(hostAddr).port(port).listener(lsnr).logger(log).selectorCount(cfg.getSelectorCount()).gridName(ctx.gridName()).tcpNoDelay(cfg.isNoDelay()).directBuffer(cfg.isDirectBuffer()).byteOrder(ByteOrder.nativeOrder()).socketSendBufferSize(cfg.getSendBufferSize()).socketReceiveBufferSize(cfg.getReceiveBufferSize()).sendQueueLimit(cfg.getSendQueueLimit()).filters(filters).directMode(false).build();    srv.idleTimeout(cfg.getIdleTimeout());    srv.start();    ctx.ports().registerPort(port,IgnitePortProtocol.TCP,getClass());    return true;  } catch (  IgniteCheckedException e) {    if (log.isDebugEnabled())     log.debug("Failed to start " + name() + " protocol on port "+ port+ ": "+ e.getMessage());    return false;  }}  }
class C{  @SuppressWarnings("rawtypes") @Override protected AbstractLiteralIV createInlineIV(String localName){  for (  InlineURIHandler handler : inlineHandlers) {    final AbstractLiteralIV iv=handler.createInlineIV(localName);    if (iv != null) {      return iv;    }  }  return null;}  }
class C{  public void clear(){  if (mSize != 0) {    freeArrays(mHashes,mArray,mSize);    mHashes=EMPTY_INTS;    mArray=EMPTY_OBJECTS;    mSize=0;  }}  }
class C{  public ConfigPaymentPanelBluePayAUTHNETEMU(){  initComponents();}  }
class C{  public double distance(final java.awt.geom.Point2D p){  final double dx=(double)this.x - p.getX();  final double dy=(double)this.y - p.getY();  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public MySQLLoader(){  super();  setLockTables(true);}  }
class C{  private boolean scrollToChildRect(Rect rect,boolean immediate){  final int delta=computeScrollDeltaToGetChildRectOnScreen(rect);  final boolean scroll=delta != 0;  if (scroll) {    if (immediate) {      if (mHorizontal) {        scrollBy(delta,0);      } else {        scrollBy(0,delta);      }    } else {      if (mHorizontal) {        smoothScrollBy(delta,0);      } else {        smoothScrollBy(0,delta);      }    }  }  return scroll;}  }
class C{  public final TextBuilder append(double d,int digits,boolean scientific,boolean showZero){  if (digits > 19)   throw new IllegalArgumentException("digits: " + digits);  if (d != d)   return append("NaN");  if (d == Double.POSITIVE_INFINITY)   return append("Infinity");  if (d == Double.NEGATIVE_INFINITY)   return append("-Infinity");  if (d == 0.0) {    if (digits < 0)     return append("0.0");    append('0');    if (showZero) {      append('.');      for (int j=1; j < digits; j++) {        append('0');      }    }    return this;  }  if (d < 0) {    d=-d;    append('-');  }  int e=MathLib.floorLog10(d);  long m;  if (digits < 0) {    long m17=MathLib.toLongPow10(d,(17 - 1) - e);    long m16=m17 / 10;    double dd=MathLib.toDoublePow10(m16,e - 16 + 1);    if (dd == d) {      digits=16;      m=m16;    } else {      digits=17;      m=m17;    }  } else   m=MathLib.toLongPow10(d,(digits - 1) - e);  if (scientific || (e >= digits)) {    long pow10=POW10_LONG[digits - 1];    int k=(int)(m / pow10);    append((char)('0' + k));    m=m - pow10 * k;    appendFraction(m,digits - 1,showZero);    append('E');    append(e);  } else {    int exp=digits - e - 1;    if (exp < POW10_LONG.length) {      long pow10=POW10_LONG[exp];      long l=m / pow10;      append(l);      m=m - pow10 * l;    } else     append('0');    appendFraction(m,exp,showZero);  }  return this;}  }
class C{  public JBoss72xStandaloneLocalConfigurationCapability(){  super();  this.propertySupportMap.remove(JBossPropertySet.JBOSS_OSGI_HTTP_PORT);}  }
class C{  public static boolean isCompileTimeConstant(Element elt){  return elt != null && (elt.getKind() == ElementKind.FIELD || elt.getKind() == ElementKind.LOCAL_VARIABLE) && ((VariableElement)elt).getConstantValue() != null;}  }
class C{  public float toPitch(){  double x=getX();  double z=getZ();  if (x == 0 && z == 0) {    return getY() > 0 ? -90 : 90;  } else {    double x2=x * x;    double z2=z * z;    double xz=Math.sqrt(x2 + z2);    return (float)Math.toDegrees(Math.atan(-getY() / xz));  }}  }
class C{  public void handleHREF(RenderedImage image,Element imageElement,SVGGeneratorContext generatorContext) throws SVGGraphics2DIOException {  ByteArrayOutputStream os=new ByteArrayOutputStream();  Base64EncoderStream b64Encoder=new Base64EncoderStream(os);  try {    encodeImage(image,b64Encoder);    b64Encoder.close();  } catch (  IOException e) {    throw new SVGGraphics2DIOException(ERR_UNEXPECTED,e);  }  imageElement.setAttributeNS(XLINK_NAMESPACE_URI,XLINK_HREF_QNAME,DATA_PROTOCOL_PNG_PREFIX + os.toString());}  }
class C{  public ArrayExpression add(String property){  this.getChildren().add(new PropertyValueExpression(property));  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String[] shapefiles=new String[2];  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  shapefiles[0]=args[0];  shapefiles[1]=args[1];  outputFile=args[2];  if ((shapefiles[0].length() <= 0) || (shapefiles[1].length() <= 0) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    ShapeFile input1=new ShapeFile(shapefiles[0]);    shapeType=input1.getShapeType();    numRecs=input1.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input1.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 1 of " + 2 + ": Reading data:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    ShapeFile input2=new ShapeFile(shapefiles[1]);    shapeType=input2.getShapeType();    numRecs=input2.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input2.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 2 of " + 2 + ": Reading data:",progress);      }    }    g2=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g1.symDifference(g2);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.symDifference(g1,g2);    }    ShapeFile output=null;    int numFields=3;    DBFField fields[]=new DBFField[numFields];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("PARENT1_ID");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    fields[2]=new DBFField();    fields[2].setName("PARENT2_ID");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(0);    output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input1);    PreparedGeometry[] tests1=new PreparedGeometry[g1.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs1=new com.vividsolutions.jts.geom.Geometry[g1.getNumGeometries()];    int[] userData1=new int[g1.getNumGeometries()];    for (int a=0; a < g1.getNumGeometries(); a++) {      tests1[a]=PreparedGeometryFactory.prepare(g1.getGeometryN(a));      userData1[a]=Integer.parseInt(g1.getGeometryN(a).getUserData().toString());      testGs1[a]=g1.getGeometryN(a);    }    PreparedGeometry[] tests2=new PreparedGeometry[g2.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs2=new com.vividsolutions.jts.geom.Geometry[g2.getNumGeometries()];    int[] userData2=new int[g2.getNumGeometries()];    for (int a=0; a < g2.getNumGeometries(); a++) {      tests2[a]=PreparedGeometryFactory.prepare(g2.getGeometryN(a));      userData2[a]=Integer.parseInt(g2.getGeometryN(a).getUserData().toString());      testGs2[a]=g2.getGeometryN(a);    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      int parentRecNum1=0;      int parentRecNum2=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum1=-999;        parentRecNum2=-999;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          Coordinate p=gN.getCoordinate();          for (int m=0; m < tests1.length; m++) {            if (tests1[m].overlaps(gN) || gN.distance(testGs1[m]) < 0.0001) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].overlaps(gN) || gN.distance(testGs2[m]) < 0.0001) {              parentRecNum2=userData2[m];              break;            }          }          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          rowData[1]=new Double(parentRecNum1);          rowData[2]=new Double(parentRecNum2);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests1.length; m++) {            if (tests1[m].overlaps(gN) || gN.distance(testGs1[m]) < 0.0001) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].crosses(gN) || gN.distance(testGs2[m]) < 0.0001) {              parentRecNum2=userData2[m];              break;            }          }          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          if (parentRecNum1 != -999) {            rowData[1]=new Double(parentRecNum1);          }          if (parentRecNum2 != -999) {            rowData[2]=new Double(parentRecNum2);          }          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests1.length; m++) {            if (tests1[m].contains(gN.getInteriorPoint())) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].contains(gN.getInteriorPoint())) {              parentRecNum2=userData2[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          if (parentRecNum1 != -999) {            rowData[1]=new Double(parentRecNum1);          }          if (parentRecNum2 != -999) {            rowData[2]=new Double(parentRecNum2);          }          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          for (int m=0; m < tests1.length; m++) {            if (tests1[m].contains(gN.getInteriorPoint())) {              parentRecNum1=userData1[m];              break;            }          }          for (int m=0; m < tests2.length; m++) {            if (tests2[m].contains(gN.getInteriorPoint())) {              parentRecNum2=userData2[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (!Topology.isClockwisePolygon(coords)) {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          FID++;          Object[] rowData=new Object[numFields];          rowData[0]=new Double(FID);          if (parentRecNum1 != -999) {            rowData[1]=new Double(parentRecNum1);          }          if (parentRecNum2 != -999) {            rowData[2]=new Double(parentRecNum2);          }          output.addRecord(wbGeometry,rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean hasId(final QueryModelNode node){  checkNotNull(node);  return nodeIds.containsKey(node);}  }
class C{  public static boolean isChildGroup(String group){  return group.indexOf(GROUP_DELIMITER) != -1;}  }
class C{  public DataPoint addPoint(final DataPoint point,final double tolerance){  logger.debug("addPoint called with tolerance " + tolerance);  checkDimension(point);  DataPoint existingPoint=isUniquePoint(point,tolerance);  if (existingPoint == null) {    return _addPoint(point);  } else {    return existingPoint;  }}  }
class C{  protected StendhalRPZone load(final ZoneDesc desc,final StendhalMapStructure zonedata) throws SAXException, IOException {  final String name=desc.getName();  final StendhalRPZone zone;  if (desc.getImplementation() == null) {    zone=new StendhalRPZone(name);  } else {    zone=createZone(desc,name);  }  zone.addTilesets(name + ".tilesets",zonedata.getTilesets());  zone.addLayer(name + ".0_floor",zonedata.getLayer("0_floor"));  zone.addLayer(name + ".1_terrain",zonedata.getLayer("1_terrain"));  zone.addLayer(name + ".2_object",zonedata.getLayer("2_object"));  loadOptionalLayer(zone,zonedata,"3_roof");  loadOptionalLayer(zone,zonedata,"4_roof_add");  loadOptionalLayer(zone,zonedata,"blend_ground");  loadOptionalLayer(zone,zonedata,"blend_roof");  zone.addCollisionLayer(name + ".collision",zonedata.getLayer("collision"));  zone.addProtectionLayer(name + ".protection",zonedata.getLayer("protection"));  if (desc.isInterior()) {    zone.setPosition();  } else {    zone.setPosition(desc.getLevel(),desc.getX(),desc.getY());  }  zone.setPublicAccessible(desc.accessible);  SingletonRepository.getRPWorld().addRPZone(desc.getRegion(),zone);  try {    zone.onInit();  } catch (  final Exception e) {    logger.error(e,e);  }  zone.populate(zonedata.getLayer("objects"));  return zone;}  }
class C{  public static String makePath(String... parts){  return join(parts,File.separator);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener l){  getPcs().addPropertyChangeListener(l);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  private static String[] lookupArrayIndexNames(String code){  String[] toReturn=indexesTable.get(code);  if (null == toReturn) {    try {      loadMessageFormat(code);      toReturn=indexesTable.get(code);    } catch (    Exception x) {      toReturn=new String[0];    }  }  return toReturn;}  }
class C{  public static void main(final String[] args) throws IOException {  if ((args.length < 1) || (args.length > 2)) {    System.err.println("java " + ChatTestCreator.class.getName() + " chatlog.txt [chatlogtest.java]");    System.exit(1);  }  final BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(args[0]),"UTF-8"));  PrintStream out=System.out;  if (args.length > 1) {    out=new PrintStream(new FileOutputStream(args[1]));  }  final ChatTestCreator ctt=new ChatTestCreator(br,out);  ctt.convert();  br.close();  out.close();}  }
class C{  public boolean connect(){  setConnectionStatus(ConnectionStatus.CONNECTING);  try {    connectAndWait(connectionDetails.getOptions());    logger.info("Successfully connected to {}",connectionDetails.getName());    setConnectionStatus(ConnectionStatus.CONNECTED);    return true;  } catch (  SpyException e) {    logger.error("Connection attempt failed",e);    setConnectionStatus(ConnectionStatus.NOT_CONNECTED);  }  return false;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  protected void load(BufferedReader reader) throws IOException {  String line=null;  while ((line=reader.readLine()) != null) {    line=line.trim();    if (line.equals("NODE_COORD_SECTION")) {      if (nodeCoordinateType == null) {        nodeCoordinateType=edgeWeightType.getNodeCoordType();      }      distanceTable=new NodeCoordinates(dimension,edgeWeightType);      distanceTable.load(reader);    } else     if (line.equals("EDGE_WEIGHT_SECTION")) {      if (DataType.SOP.equals(dataType)) {        reader.readLine();      }      distanceTable=new EdgeWeightMatrix(dimension,edgeWeightFormat);      distanceTable.load(reader);    } else     if (line.equals("EDGE_DATA_SECTION")) {      distanceTable=new EdgeData(dimension,edgeDataFormat);      distanceTable.load(reader);    } else     if (line.equals("DISPLAY_DATA_SECTION")) {      displayData=new NodeCoordinates(dimension,NodeCoordType.TWOD_COORDS,null);      displayData.load(reader);    } else     if (line.equals("TOUR_SECTION") || line.equals("-1")) {      Tour tour=new Tour();      tour.load(reader);      tours.add(tour);    } else     if (line.equals("FIXED_EDGES_SECTION") || line.matches("^\\s*FIXED_EDGES\\s*\\:\\s*$")) {      fixedEdges=new EdgeData(dimension,EdgeDataFormat.EDGE_LIST);      fixedEdges.load(reader);    } else     if (line.equals("DEMAND_SECTION")) {      if (vehicleRoutingTable == null) {        vehicleRoutingTable=new VehicleRoutingTable(dimension);      }      vehicleRoutingTable.loadDemands(reader);    } else     if (line.equals("DEPOT_SECTION")) {      if (vehicleRoutingTable == null) {        vehicleRoutingTable=new VehicleRoutingTable(dimension);      }      vehicleRoutingTable.loadDepots(reader);    } else     if (line.equals("EOF")) {      break;    } else     if (line.isEmpty()) {    } else {      String[] tokens=line.split(":");      String key=tokens[0].trim();      String value=tokens[1].trim();      if (key.equals("NAME")) {        name=value;      } else       if (key.equals("COMMENT")) {        if (comment == null) {          comment=value;        } else {          comment=comment + "\n" + value;        }      } else       if (key.equals("TYPE")) {        dataType=DataType.valueOf(value);      } else       if (key.equals("DIMENSION")) {        dimension=Integer.parseInt(value);      } else       if (key.equals("CAPACITY")) {        capacity=Integer.parseInt(value);      } else       if (key.equals("EDGE_WEIGHT_TYPE")) {        edgeWeightType=EdgeWeightType.valueOf(value);      } else       if (key.equals("EDGE_WEIGHT_FORMAT")) {        edgeWeightFormat=EdgeWeightFormat.valueOf(value);      } else       if (key.equals("EDGE_DATA_FORMAT")) {        edgeDataFormat=EdgeDataFormat.valueOf(value);      } else       if (key.equals("NODE_COORD_FORMAT")) {        nodeCoordinateType=NodeCoordType.valueOf(value);      } else       if (key.equals("DISPLAY_DATA_TYPE")) {        displayDataType=DisplayDataType.valueOf(value);      }    }  }  if (nodeCoordinateType == null) {    nodeCoordinateType=NodeCoordType.NO_COORDS;  }  if (displayDataType == null) {    if (NodeCoordType.NO_COORDS.equals(nodeCoordinateType)) {      displayDataType=DisplayDataType.NO_DISPLAY;    } else     if (displayData != null) {      displayDataType=DisplayDataType.TWOD_DISPLAY;    } else {      displayDataType=DisplayDataType.COORD_DISPLAY;    }  }}  }
class C{  public static boolean between(ZonedDateTime date,ZonedDateTime openDate,ZonedDateTime closeDate){  if ((date.isAfter(openDate) || date.equals(openDate)) && (date.isBefore(closeDate)))   return true;  return false;}  }
class C{  public ZipUtils(String encoding){  this.encoding=encoding;}  }
class C{  public WriterTarget(final Writer writer,final Formatter formatter){  super(formatter);  if (null != writer) {    setWriter(writer);    open();  }}  }
class C{  public void toWire(Transaction t,WireFormat.Writer writer) throws IOException {  writer.writeUint32(t.getVersion());  writer.writeVarInt(t.getInputs().size());  for (  TransactionInput input : t.getInputs()) {    toWire(input,writer);  }  List<? extends TransactionOutput> outputs=t.getOutputs();  toWire(outputs,writer);  writer.writeUint32(t.getLockTime());}  }
class C{  public void fillDefaultValues(){  ProbDistPanel rp=cardMap.get(Randomizer.DEFAULT_DISTRIBUTION);  cbDistribution.setSelectedItem((Randomizer.DEFAULT_DISTRIBUTION));  rp.fillDefaultValues();  cardPanel.removeAll();  cardPanel.add(rp.getPanel());  cardPanel.repaint();  if (parent != null) {    parent.pack();    parent.setLocationRelativeTo(null);  }}  }
class C{  public static boolean assertEquals(final double a,final double b,final double tolerance){  assertIsNumber(a);  assertIsNumber(b);  if (a >= (b - tolerance) && a <= (b + tolerance)) {    return true;  }  throw new ExamException(a + " != " + b+ ":"+ Utils.realFormat(tolerance,3));}  }
class C{  public Matrix4x3f rotationY(float ang){  float sin, cos;  if (ang == (float)Math.PI || ang == -(float)Math.PI) {    cos=-1.0f;    sin=0.0f;  } else   if (ang == (float)Math.PI * 0.5f || ang == -(float)Math.PI * 1.5f) {    cos=0.0f;    sin=1.0f;  } else   if (ang == (float)-Math.PI * 0.5f || ang == (float)Math.PI * 1.5f) {    cos=0.0f;    sin=-1.0f;  } else {    cos=(float)Math.cos(ang);    sin=(float)Math.sin(ang);  }  m00=cos;  m01=0.0f;  m02=-sin;  m10=0.0f;  m11=1.0f;  m12=0.0f;  m20=sin;  m21=0.0f;  m22=cos;  m30=0.0f;  m31=0.0f;  m32=0.0f;  properties=0;  return this;}  }
class C{  public static void main(String[] args){  ST<String,String> st=new ST<String,String>();  st.put("www.cs.princeton.edu","128.112.136.11");  st.put("www.cs.princeton.edu","128.112.136.35");  st.put("www.princeton.edu","128.112.130.211");  st.put("www.math.princeton.edu","128.112.18.11");  st.put("www.yale.edu","130.132.51.8");  st.put("www.amazon.com","207.171.163.90");  st.put("www.simpsons.com","209.123.16.34");  st.put("www.stanford.edu","171.67.16.120");  st.put("www.google.com","64.233.161.99");  st.put("www.ibm.com","129.42.16.99");  st.put("www.apple.com","17.254.0.91");  st.put("www.slashdot.com","66.35.250.150");  st.put("www.whitehouse.gov","204.153.49.136");  st.put("www.espn.com","199.181.132.250");  st.put("www.snopes.com","66.165.133.65");  st.put("www.movies.com","199.181.132.250");  st.put("www.cnn.com","64.236.16.20");  st.put("www.iitb.ac.in","202.68.145.210");  System.out.println(st.get("www.cs.princeton.edu"));  System.out.println(st.get("www.harvardsucks.com"));  System.out.println(st.get("www.simpsons.com"));  System.out.println();  System.out.println("ceil(www.simpsonr.com) = " + st.ceil("www.simpsonr.com"));  System.out.println("ceil(www.simpsons.com) = " + st.ceil("www.simpsons.com"));  System.out.println("ceil(www.simpsont.com) = " + st.ceil("www.simpsont.com"));  System.out.println("floor(www.simpsonr.com) = " + st.floor("www.simpsonr.com"));  System.out.println("floor(www.simpsons.com) = " + st.floor("www.simpsons.com"));  System.out.println("floor(www.simpsont.com) = " + st.floor("www.simpsont.com"));  System.out.println();  System.out.println("min key: " + st.min());  System.out.println("max key: " + st.max());  System.out.println("size:    " + st.size());  System.out.println();  for (  String s : st.keys())   System.out.println(s + " " + st.get(s));}  }
class C{  @Override public String toString(){  StringBuilder buf=new StringBuilder("(");  for (int i=0, n=methodids.length; i < n; i++) {    buf.append(bcindexes[i]).append('@').append(MemberReference.getMemberRef(methodids[i]).getName()).append(" : ");    for (int j=0, m=localTypeCodes[i].length; j < m; j++) {      buf.append((char)localTypeCodes[i][j]);    }    buf.append(',');    for (int j=0, m=stackTypeCodes[i].length; j < m; j++) {      buf.append((char)stackTypeCodes[i][j]);    }    if (i != n - 1) {      buf.append(" | ");    }  }  buf.append(')');  return buf.toString();}  }
class C{  public boolean clearTable(){  return db.delete(mDefaultTable,null,null) > 0;}  }
class C{  public void handleGesture(LinkActionRequest glq,Link link) throws IOException {  LinkProperties props=new LinkProperties();  props.setProperty(LPC_INFO,("Mouse Clicked at: x = " + glq.getX() + ", y = "+ glq.getY()));  LinkActionList glr=new LinkActionList(link,props);  String gid=glq.getGraphicID();  if (gid == null) {    System.out.println("Deselecting graphic");    glr.deselectGraphics();  } else {    System.out.println("Selecting graphic");    props.clear();    props.setProperty(LPC_GRAPHICID,gid);    glr.modifyGraphic(MODIFY_SELECT_GRAPHIC_MASK,props);  }  glr.end(Link.END_TOTAL);}  }
class C{  public static void testRandomly(int runs){  cern.jet.random.engine.RandomEngine engine=new cern.jet.random.engine.MersenneTwister();  cern.jet.random.Uniform gen=new cern.jet.random.Uniform(engine);  for (int run=0; run < runs; run++) {    int maxSize=50;    int maxSplittersSize=2 * maxSize;    int size=gen.nextIntFromTo(1,maxSize);    int from, to;    if (size == 0) {      from=0;      to=-1;    } else {      from=gen.nextIntFromTo(0,size - 1);      to=gen.nextIntFromTo(Math.min(from,size - 1),size - 1);    }    cern.colt.matrix.DoubleMatrix2D A1=new cern.colt.matrix.impl.DenseDoubleMatrix2D(size,size);    cern.colt.matrix.DoubleMatrix2D P1=A1.viewPart(from,from,size - to,size - to);    int intervalFrom=gen.nextIntFromTo(size / 2,2 * size);    int intervalTo=gen.nextIntFromTo(intervalFrom,2 * size);    for (int i=0; i < size; i++) {      for (int j=0; j < size; j++) {        A1.set(i,j,gen.nextIntFromTo(intervalFrom,intervalTo));      }    }    cern.colt.matrix.DoubleMatrix2D A2=A1.copy();    cern.colt.matrix.DoubleMatrix2D P2=A2.viewPart(from,from,size - to,size - to);    int c=0;    cern.colt.matrix.DoubleMatrix2D S1=cern.colt.matrix.doublealgo.Sorting.quickSort.sort(P1,c);    cern.colt.matrix.DoubleMatrix2D S2=cern.colt.matrix.doublealgo.Sorting.mergeSort.sort(P2,c);    if (!(S1.viewColumn(c).equals(S2.viewColumn(c))))     throw new InternalError();  }  System.out.println("All tests passed. No bug detected.");}  }
class C{  public void addPluginPath(Object pluginPath){  this.pluginPath.add(pluginPath);}  }
class C{  @SuppressWarnings({"SuspiciousNameCombination"}) public static double covariance(double[] x,double[] y){  return covariance(x,y,mean(x),mean(y),stdev(x),stdev(y));}  }
class C{  public void remove(int index){  underlying_terms.remove(index);  terms=(RatTerm[])underlying_terms.toArray(new RatTerm[]{});}  }
class C{  public QoSHandler(final Vertx vertx,final ResourceStorage storage,final String qosSettingsPath,final Map<String,Object> properties,String prefix){  this.vertx=vertx;  this.storage=storage;  this.qosSettingsUri=qosSettingsPath;  this.properties=properties;  this.prefix=prefix;  qosRules=new ArrayList<>();  setMBeanServer(ManagementFactory.getPlatformMBeanServer());  loadQoSSettings();  registerUpdateHandler();}  }
class C{  protected byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  byte[] keyVal=key.getEncoded();  if ((keyVal == null) || (keyVal.length == 0)) {    throw new InvalidKeyException("Cannot get an encoding of " + "the key to be wrapped");  }  byte[] out=new byte[keyVal.length + 8];  if (keyVal.length == 8) {    System.arraycopy(IV,0,out,0,IV.length);    System.arraycopy(keyVal,0,out,IV.length,8);    cipher.encryptBlock(out,0,out,0);  } else {    if (keyVal.length % 8 != 0) {      throw new IllegalBlockSizeException("length of the " + "to be wrapped key should be multiples of 8 bytes");    }    System.arraycopy(IV,0,out,0,IV.length);    System.arraycopy(keyVal,0,out,IV.length,keyVal.length);    int N=keyVal.length / 8;    byte[] buffer=new byte[blksize];    for (int j=0; j < 6; j++) {      for (int i=1; i <= N; i++) {        int T=i + j * N;        System.arraycopy(out,0,buffer,0,IV.length);        System.arraycopy(out,i * 8,buffer,IV.length,8);        cipher.encryptBlock(buffer,0,buffer,0);        for (int k=1; T != 0; k++) {          byte v=(byte)T;          buffer[IV.length - k]^=v;          T>>>=8;        }        System.arraycopy(buffer,0,out,0,IV.length);        System.arraycopy(buffer,8,out,8 * i,8);      }    }  }  return out;}  }
class C{  public static final Instance copyValues(Instance x_dest,Instance x_src,int from,int offset){  int d=x_src.numAttributes();  for (int i=from, j=0; i < d; i++, j++) {    x_dest.setValue(j + offset,x_src.value(i));  }  return x_dest;}  }
class C{  public double throughput(){  return (double)msgBytes / (duration() / BILLION);}  }
class C{  @Override public void handlePatch(Operation patch){  ServiceUtils.logInfo(this,"Handling patch for service %s",getSelfLink());  State startState=getState(patch);  State patchState=patch.getBody(State.class);  validatePatchState(startState,patchState);  State currentState=applyPatch(startState,patchState);  validateState(currentState);  patch.complete();  try {    if (ControlFlags.isOperationProcessingDisabled(currentState.controlFlags)) {      ServiceUtils.logInfo(this,"Skipping patch handling (disabled)");    } else     if (TaskState.TaskStage.STARTED == currentState.taskState.stage) {      getHostService(currentState);    }  } catch (  Throwable t) {    failTask(t);  }}  }
class C{  public IFromPiece from(Space origin) throws SQLScopeException, ScopeException {  return from(Context.SELECT,origin);}  }
class C{  public Integer timesTen(){  return (anotherAttribute * 10);}  }
class C{  public CUstream(){}  }
class C{  protected CCPlace(CGPoint pnt){  super();  position=CGPoint.make(pnt.x,pnt.y);}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public TSet readSetBegin() throws TException {  return new TSet(readListBegin());}  }
class C{  public void writeMessageToClients(Client client,String message){synchronized (connections) {    for (    Client clientConnection : connections) {      if (clientConnection != client) {        clientConnection.writeMessageFrom(client,message);      }    }  }}  }
class C{  @Inject public ProjectContentProposalProvider(IN4JSCore n4jsCore){  super(StreamSupport.stream(n4jsCore.findAllProjects().spliterator(),false).filter(null).filter(null).map(null).toArray(null));  this.setFiltering(true);}  }
class C{  @SuppressWarnings("unchecked") public T withTerm(long term){  response.term=Assert.argNot(term,term < 0,"term must be positive");  return (T)this;}  }
class C{  public void removeStackedLink(LinkProperties link){  if (link != null && link.getInterfaceName() != null) {    mStackedLinks.remove(link.getInterfaceName());  }}  }
class C{  public void forceRewriteExif(String filename) throws FileNotFoundException, IOException {  forceRewriteExif(filename,getAllTags());}  }
class C{  private void finer(String msg){  if (logLevel.intValue() <= Level.FINER.intValue()) {    println(Level.FINER,msg);  }}  }
class C{  public void removeChangeListener(ChangeListener cl){  listeners.remove(cl);}  }
class C{  public boolean addStackChangedListener(StackChangedListener listener){  return listeners.add(listener);}  }
class C{  public CNode(int numAttributes,Instance leafInstance){  this(numAttributes);  if (m_clusterInstances == null) {    m_clusterInstances=new Instances(leafInstance.dataset(),1);  }  m_clusterInstances.add(leafInstance);  updateStats(leafInstance,false);}  }
class C{  private void checkMaterialPolicy(MInOutLine line){  int no=MInOutLineMA.deleteInOutLineMA(line.getM_InOutLine_ID(),get_TrxName());  if (no > 0)   log.config("Delete old #" + no);  String MovementType=getMovementType();  boolean inTrx=MovementType.charAt(1) == '+';  boolean needSave=false;  MProduct product=line.getProduct();  if (product != null && line.getM_Locator_ID() == 0) {    line.setM_Warehouse_ID(getM_Warehouse_ID());    line.setM_Locator_ID(inTrx ? Env.ZERO : line.getMovementQty());    needSave=true;  }  if (product != null) {    if (getMovementType().compareTo(MInOut.MOVEMENTTYPE_CustomerReturns) == 0 || getMovementType().compareTo(MInOut.MOVEMENTTYPE_VendorReceipts) == 0) {      MAttributeSetInstance asi=null;      MStorage[] storages=MStorage.getWarehouse(getCtx(),getM_Warehouse_ID(),line.getM_Product_ID(),0,null,MClient.MMPOLICY_FiFo.equals(product.getMMPolicy()),false,line.getM_Locator_ID(),get_TrxName());      for (      MStorage storage : storages) {        if (storage.getQtyOnHand().signum() < 0) {          asi=new MAttributeSetInstance(getCtx(),storage.getM_AttributeSetInstance_ID(),get_TrxName());          break;        }      }      if (asi == null && line.getM_AttributeSetInstance_ID() == 0) {        asi=MAttributeSetInstance.create(getCtx(),product,get_TrxName());        line.setM_AttributeSetInstance_ID(asi.getM_AttributeSetInstance_ID());        log.config("New ASI=" + line);        needSave=true;      }    } else     if (getMovementType().compareTo(MInOut.MOVEMENTTYPE_VendorReturns) == 0 || getMovementType().compareTo(MInOut.MOVEMENTTYPE_CustomerShipment) == 0) {      String MMPolicy=product.getMMPolicy();      Timestamp minGuaranteeDate=getMovementDate();      MStorage[] storages=MStorage.getWarehouse(getCtx(),getM_Warehouse_ID(),line.getM_Product_ID(),line.getM_AttributeSetInstance_ID(),minGuaranteeDate,MClient.MMPOLICY_FiFo.equals(MMPolicy),true,line.getM_Locator_ID(),get_TrxName());      BigDecimal qtyToDeliver=line.getMovementQty();      for (      MStorage storage : storages) {        if (storage.getQtyOnHand().compareTo(qtyToDeliver) >= 0) {          MInOutLineMA ma=new MInOutLineMA(line,storage.getM_AttributeSetInstance_ID(),qtyToDeliver);          ma.saveEx();          qtyToDeliver=Env.ZERO;        } else {          MInOutLineMA ma=new MInOutLineMA(line,storage.getM_AttributeSetInstance_ID(),storage.getQtyOnHand());          ma.saveEx();          qtyToDeliver=qtyToDeliver.subtract(storage.getQtyOnHand());          log.fine(ma + ", QtyToDeliver=" + qtyToDeliver);        }        if (qtyToDeliver.signum() == 0)         break;      }      if (qtyToDeliver.signum() != 0) {        MAttributeSetInstance asi=MAttributeSetInstance.create(getCtx(),product,get_TrxName());        int M_AttributeSetInstance_ID=asi.getM_AttributeSetInstance_ID();        MInOutLineMA ma=new MInOutLineMA(line,M_AttributeSetInstance_ID,qtyToDeliver);        ma.saveEx();        log.fine("##: " + ma);      }    }  }  if (needSave) {    line.saveEx();  }}  }
class C{  private boolean mayDisplace(final Player player,final StendhalRPZone zone,final int x,final int y,final PassiveEntity entity){  return nextTo(player,entity) && (!isItemBelowOtherPlayer(player,entity)) && destInRange(player,entity,x,y)&& !entityCollides(player,zone,x,y,entity)&& (isGamblingZoneAndIsDice(entity,player) || pathToDest(player,zone,x,y,entity))&& !isNotOwnCorpseAndTooFar(entity,player,x,y);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TAnnotableElement.class) {switch (derivedFeatureID) {case TypesPackage.TYPE__ANNOTATIONS:      return TypesPackage.TANNOTABLE_ELEMENT__ANNOTATIONS;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  protected void saveCallRecord(){  EMMessage message=null;  EMTextMessageBody txtBody=null;  if (!isInComingCall) {    message=EMMessage.createSendMessage(EMMessage.Type.TXT);    message.setReceipt(username);  } else {    message=EMMessage.createReceiveMessage(EMMessage.Type.TXT);    message.setFrom(username);  }  String st1=getResources().getString(R.string.call_duration);  String st2=getResources().getString(R.string.Refused);  String st3=getResources().getString(R.string.The_other_party_has_refused_to);  String st4=getResources().getString(R.string.The_other_is_not_online);  String st5=getResources().getString(R.string.The_other_is_on_the_phone);  String st6=getResources().getString(R.string.The_other_party_did_not_answer);  String st7=getResources().getString(R.string.did_not_answer);  String st8=getResources().getString(R.string.Has_been_cancelled);switch (callingState) {case NORMAL:    txtBody=new EMTextMessageBody(st1 + callDruationText);  break;case REFUESD:txtBody=new EMTextMessageBody(st2);break;case BEREFUESD:txtBody=new EMTextMessageBody(st3);break;case OFFLINE:txtBody=new EMTextMessageBody(st4);break;case BUSY:txtBody=new EMTextMessageBody(st5);break;case NORESPONSE:txtBody=new EMTextMessageBody(st6);break;case UNANSWERED:txtBody=new EMTextMessageBody(st7);break;case VERSION_NOT_SAME:txtBody=new EMTextMessageBody(getString(R.string.call_version_inconsistent));default :txtBody=new EMTextMessageBody(st8);break;}if (callType == 0) message.setAttribute(Constant.MESSAGE_ATTR_IS_VOICE_CALL,true); else message.setAttribute(Constant.MESSAGE_ATTR_IS_VIDEO_CALL,true);message.addBody(txtBody);message.setMsgId(msgid);message.setStatus(Status.SUCCESS);EMClient.getInstance().chatManager().saveMessage(message);}  }
class C{  protected boolean reclassifyDevice(Device device){  if (device == null) {    logger.debug("In reclassify for null device");    return false;  }  boolean needToReclassify=false;  for (  Entity entity : device.entities) {    IEntityClass entityClass=this.entityClassifier.classifyEntity(entity);    if (entityClass == null || device.getEntityClass() == null) {      needToReclassify=true;      break;    }    if (!entityClass.getName().equals(device.getEntityClass().getName())) {      needToReclassify=true;      break;    }  }  if (needToReclassify == false) {    return false;  }  cntDeviceReclassifyDelete.increment();  LinkedList<DeviceUpdate> deviceUpdates=new LinkedList<DeviceUpdate>();  this.deleteDevice(device);  deviceUpdates.add(new DeviceUpdate(device,DeviceUpdate.Change.DELETE,null));  if (!deviceUpdates.isEmpty())   processUpdates(deviceUpdates);  for (  Entity entity : device.entities) {    this.learnDeviceByEntity(entity);  }  debugEventService.flushEvents();  return true;}  }
class C{  public CommandEnvironment(String cmdpath,String[] argv){  this.command=cmdpath;  if (argv == null) {    this.options=new String[0];  } else {    this.options=new String[argv.length];    System.arraycopy(argv,0,this.options,0,argv.length);  }}  }
class C{  protected static boolean isURL(String pathString){  Matcher m=urlPattern.matcher(pathString);  return m.matches();}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public static double[] matrixToArray(double[][] input,int fromRow,int rows){  return matrixToArray(input,fromRow,rows,0,input[0].length);}  }
class C{  public static void zoom(int AD_Window_ID,MQuery query){  SessionManager.getAppDesktop().showZoomWindow(AD_Window_ID,query);}  }
class C{  @Override public final void serializeWithType(TokenBuffer value,JsonGenerator jgen,SerializerProvider provider,TypeSerializer typeSer) throws IOException, JsonGenerationException {  typeSer.writeTypePrefixForScalar(value,jgen);  serialize(value,jgen,provider);  typeSer.writeTypeSuffixForScalar(value,jgen);}  }
class C{  public boolean hasHttpAuthUsernamePassword(){  throw new MustOverrideException();}  }
class C{  public static ConditionOperand OVERFLOW_FROM_MUL(){  return new ConditionOperand(OVERFLOW_FROM_MUL);}  }
class C{  public void sendNotification(String notificationName,Object body){  sendNotification(notificationName,body,null);}  }
class C{  public DrawerBuilder withOnDrawerItemLongClickListener(@NonNull Drawer.OnDrawerItemLongClickListener onDrawerItemLongClickListener){  this.mOnDrawerItemLongClickListener=onDrawerItemLongClickListener;  return this;}  }
class C{  public void checkLoadExternalResource(){  if (se != null) {    se.fillInStackTrace();    throw se;  }}  }
class C{  public XTIFFTileCodec createTileCodec(XTIFFEncodeParam param) throws IOException {  int compression=getCompression();  XTIFFTileCodec codec=getTileCodec(compression);  if (codec == null)   throw new IOException("Compression type (" + compression + ") not supported");  return codec.create(param);}  }
class C{  public void addPointerDraggedListener(ActionListener l){  if (pointerDraggedListeners == null) {    pointerDraggedListeners=new EventDispatcher();  }  pointerDraggedListeners.addListener(l);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentcreatedocumentfragment.class,args);}  }
class C{  public static BigDecimal discount(BigDecimal p_Amount,int p_C_Currency_ID,int p_C_PaymentTerm_ID,Timestamp p_DocDate,Timestamp p_PayDate) throws SQLException {  if (p_Amount == null || p_C_PaymentTerm_ID == 0 || p_DocDate == null)   return null;  if (p_Amount.signum() == 0)   return Adempiere.ZERO;  Timestamp PayDate=p_PayDate;  if (PayDate == null)   PayDate=new Timestamp(System.currentTimeMillis());  PayDate=Adempiere.trunc(PayDate);  BigDecimal discount=null;  String sql="SELECT * " + "FROM C_PaymentTerm " + "WHERE C_PaymentTerm_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_PaymentTerm_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    int DiscountDays=rs.getInt("DiscountDays");    int DiscountDays2=rs.getInt("DiscountDays2");    int GraceDays=rs.getInt("GraceDays");    boolean IsNextBusinessDay="Y".equals(rs.getString("IsNextBusinessDay"));    BigDecimal Discount=rs.getBigDecimal("Discount");    BigDecimal Discount2=rs.getBigDecimal("Discount2");    Timestamp Discount1Date=Adempiere.addDays(p_DocDate,DiscountDays + GraceDays);    Timestamp Discount2Date=Adempiere.addDays(p_DocDate,DiscountDays2 + GraceDays);    if (IsNextBusinessDay) {      Discount1Date=Adempiere.nextBusinessDay(Discount1Date);      Discount2Date=Adempiere.nextBusinessDay(Discount2Date);    }    if (!PayDate.after(Discount1Date))     discount=p_Amount.multiply(Discount); else     if (!PayDate.after(Discount2Date))     discount=p_Amount.multiply(Discount2); else     discount=Adempiere.ZERO;    if (discount.signum() != 0) {      discount=discount.divide(Adempiere.HUNDRED,6,BigDecimal.ROUND_HALF_UP);      discount=Currency.round(discount,p_C_Currency_ID,"N");    }  }  rs.close();  pstmt.close();  return discount;}  }
class C{  private Map<String,List<String>> shakeHands() throws WebSocketException {  Socket socket=mSocketConnector.getSocket();  WebSocketInputStream input=openInputStream(socket);  WebSocketOutputStream output=openOutputStream(socket);  String key=generateWebSocketKey();  writeHandshake(output,key);  Map<String,List<String>> headers=readHandshake(input,key);  mInput=input;  mOutput=output;  return headers;}  }
class C{  public boolean isRefinementsRequired(){  return !queuedRefinements.isEmpty();}  }
class C{  @DatabindingMethod public void onItemClick(View v,Integer position,ImageInfo item,AdapterManager<?> am){  mToaster.show("ItemHandler_onItemClick: position = " + position + " ,item = "+ item);  if (item.isSelected()) {    am.getSelectHelper().setUnselected(position);  } else {    am.getSelectHelper().setSelected(position);  }}  }
class C{  public final Instance firstInstance(){  return (Instance)m_Instances.firstElement();}  }
class C{  public List<NamedRelatedResourceRep> refreshMatchingStoragePools(URI id){  StoragePoolList response=client.get(StoragePoolList.class,getIdUrl() + "/refresh-matched-pools",id);  return defaultList(response.getPools());}  }
class C{  @Override public void discover(AccessProfile accessProfile) throws BaseCollectionException {  if ((null != accessProfile.getnamespace()) && (accessProfile.getnamespace().equals(StorageSystem.Discovery_Namespaces.UNMANAGED_FILESYSTEMS.toString()))) {    discoverUmanagedFileSystems(accessProfile);    discoverUmanagedFileQuotaDirectory(accessProfile);    discoverUnManagedCifsShares(accessProfile);    discoverUnManagedNewExports(accessProfile);  } else {    discoverAll(accessProfile);  }}  }
class C{  public CheckedPatternSyntaxException(String desc,String regex,int index){  this(new PatternSyntaxException(desc,regex,index));}  }
class C{  private static String lensStateToString(int lensState){switch (lensState) {case CaptureResult.LENS_STATE_MOVING:    return "moving";case CaptureResult.LENS_STATE_STATIONARY:  return "stationary";default :return "unknown";}}  }
class C{  Class<?> leadingReferenceParameter(){  Class<?> ptype;  if (ptypes.length == 0 || (ptype=ptypes[0]).isPrimitive())   throw newIllegalArgumentException("no leading reference parameter");  return ptype;}  }
class C{  public int size(){  return size;}  }
class C{  @SuppressWarnings("unchecked") boolean isValidValue(Object value,boolean wantsCCE){  try {    if (min != null && min.compareTo(value) > 0) {      return false;    }  } catch (  ClassCastException cce) {    if (wantsCCE) {      throw cce;    }    return false;  }  try {    if (max != null && max.compareTo(value) < 0) {      return false;    }  } catch (  ClassCastException cce) {    if (wantsCCE) {      throw cce;    }    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:19.930 -0500",hash_original_method="0ED99673E1BB44384871E74A0AAAAEE6",hash_generated_method="E892788093A2CD439E9F7B181AC8482E") public X509Name(boolean reverse,String dirName,X509NameEntryConverter converter){  this(reverse,DefaultLookUp,dirName,converter);}  }
class C{  public void stopSpinning(){  isSpinning=false;  mProgress=0.0f;  mTargetProgress=0.0f;  invalidate();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:54.397 -0500",hash_original_method="BFF86F06D273903B963DFA916A722686",hash_generated_method="4FE0FBBFCB4CFF862AE86B08133326C6") private static void addOID(ObjectIdentifier oid){  int[] newOid=oid.getOid();  int index=hashIntArray(newOid) % CAPACITY;  ObjectIdentifier[] list=KNOWN_OIDS[index];  int i=0;  for (; list[i] != null; i++) {    if (Arrays.equals(newOid,list[i].getOid())) {      throw new Error("ObjectIdentifier: invalid static initialization; " + "duplicate OIDs: " + oid.getName() + " "+ list[i].getName());    }  }  if (i == (CAPACITY - 1)) {    throw new Error("ObjectIdentifier: invalid static initialization; " + "small OID pool capacity");  }  list[i]=oid;}  }
class C{  public static String stringFor(int n){switch (n) {case CU_CTX_SCHED_AUTO:    return "CU_CTX_SCHED_AUTO";case CU_CTX_SCHED_SPIN:  return "CU_CTX_SCHED_SPIN";case CU_CTX_SCHED_YIELD:return "CU_CTX_SCHED_YIELD";case CU_CTX_BLOCKING_SYNC:return "CU_CTX_BLOCKING_SYNC";case CU_CTX_MAP_HOST:return "CU_CTX_MAP_HOST";case CU_CTX_LMEM_RESIZE_TO_MAX:return "CU_CTX_LMEM_RESIZE_TO_MAX";case CU_CTX_FLAGS_MASK:return "[CU_CTX_FLAGS_MASK]";case CU_CTX_SCHED_MASK:return "[CU_CTX_SCHED_MASK]";}return "INVALID CUctx_flags: " + n;}  }
class C{  public void modelCreated(SessionEvent event){}  }
class C{  private int executeScript(String scriptName) throws IOException, InterruptedException {  final int exitCode;  DefaultExecuteResultHandler resultHandler=shell.execute(scriptName,scriptTimeout,environment,testFolder.getRoot());  processRunning=true;  resultHandler.waitFor();  logger.finest(String.format("Executing %s...",scriptName));  exitCode=resultHandler.getExitValue();  if (exitCode != 0) {    ExecuteException executeException=resultHandler.getException();    logger.log(Level.SEVERE,executeException.getMessage(),executeException);  }  return exitCode;}  }
class C{  void forceIncrementItemsSeen(final long inc){  itemsSeen_+=inc;  if (itemsSeen_ > MAX_ITEMS_SEEN) {    throw new SketchesStateException("Sketch has exceeded capacity for total items seen. " + "Limit: " + MAX_ITEMS_SEEN + ", found: "+ itemsSeen_);  }}  }
class C{  public void updateDescriptorVO(DescriptorVO descriptorVO){  String qual=new StringBuffer().append(DBUtils.WHERE).append(DBUtils.generateEQTokenField(CAMPO_ID,descriptorVO.getId())).toString();  updateVO(qual,TABLE_NAME,COLS_DEFS,descriptorVO);}  }
class C{  protected int[] generateWorkingKey(boolean encrypting,byte[] key){  int[] newKey=new int[32];  boolean[] pc1m=new boolean[56], pcr=new boolean[56];  for (int j=0; j < 56; j++) {    int l=pc1[j];    pc1m[j]=((key[l >>> 3] & bytebit[l & 07]) != 0);  }  for (int i=0; i < 16; i++) {    int l, m, n;    if (encrypting) {      m=i << 1;    } else {      m=(15 - i) << 1;    }    n=m + 1;    newKey[m]=newKey[n]=0;    for (int j=0; j < 28; j++) {      l=j + totrot[i];      if (l < 28) {        pcr[j]=pc1m[l];      } else {        pcr[j]=pc1m[l - 28];      }    }    for (int j=28; j < 56; j++) {      l=j + totrot[i];      if (l < 56) {        pcr[j]=pc1m[l];      } else {        pcr[j]=pc1m[l - 28];      }    }    for (int j=0; j < 24; j++) {      if (pcr[pc2[j]]) {        newKey[m]|=bigbyte[j];      }      if (pcr[pc2[j + 24]]) {        newKey[n]|=bigbyte[j];      }    }  }  for (int i=0; i != 32; i+=2) {    int i1, i2;    i1=newKey[i];    i2=newKey[i + 1];    newKey[i]=((i1 & 0x00fc0000) << 6) | ((i1 & 0x00000fc0) << 10) | ((i2 & 0x00fc0000) >>> 10)| ((i2 & 0x00000fc0) >>> 6);    newKey[i + 1]=((i1 & 0x0003f000) << 12) | ((i1 & 0x0000003f) << 16) | ((i2 & 0x0003f000) >>> 4)| (i2 & 0x0000003f);  }  return newKey;}  }
class C{  public static boolean containsOnlyWhitespaces(String s){  int size=s.length();  for (int i=0; i < size; i++) {    if (!Character.isWhitespace(s.charAt(i)))     return false;  }  return true;}  }
class C{  public void expireAllLeases() throws IllegalStateException {  logger.info("Expiring all leases");  assignableVMs.expireAllLeases();}  }
class C{  public static List<Map.Entry<List<String>,List<Double>>> sort(Map<List<String>,List<Double>> aggregatedResult,List<SortOption> sortOptions,int topN){  SortedSet<Map.Entry<List<String>,List<Double>>> allList=sortByValue(aggregatedResult,sortOptions);  List<Map.Entry<List<String>,List<Double>>> result=new ArrayList<Map.Entry<List<String>,List<Double>>>();  for (  Map.Entry<List<String>,List<Double>> entry : allList) {    result.add(entry);    if (topN > 0 && result.size() >= topN) {      break;    }  }  return result;}  }
class C{  @Override public void write(int b) throws IOException {  if (stack.size() == 0 || standaloneMarkers.contains(stack.peek().marker)) {    writeStuffed(b);  } else {    writeNonstuffed(b);  }}  }
class C{  public SubscriptionStillActiveException(String message){  super(message);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return a == null ? Pooler.EMPTY_STRING_ARRAY : a.getRatingRestrictables();}  }
class C{  public Label resolve(Class type){  Label label=resolveText(type);  if (label == null) {    return resolveElement(type);  }  return label;}  }
class C{  public boolean render(Graphics2D g2,Rectangle2D dataArea,int index,PlotRenderingInfo info,CategoryCrosshairState crosshairState){  boolean foundData=false;  CategoryDataset currentDataset=getDataset(index);  CategoryItemRenderer renderer=getRenderer(index);  CategoryAxis domainAxis=getDomainAxisForDataset(index);  ValueAxis rangeAxis=getRangeAxisForDataset(index);  boolean hasData=!DatasetUtilities.isEmptyOrNull(currentDataset);  if (hasData && renderer != null) {    foundData=true;    CategoryItemRendererState state=renderer.initialise(g2,dataArea,this,index,info);    state.setCrosshairState(crosshairState);    int columnCount=currentDataset.getColumnCount();    int rowCount=currentDataset.getRowCount();    int passCount=renderer.getPassCount();    for (int pass=0; pass < passCount; pass++) {      if (this.columnRenderingOrder == SortOrder.ASCENDING) {        for (int column=0; column < columnCount; column++) {          if (this.rowRenderingOrder == SortOrder.ASCENDING) {            for (int row=0; row < rowCount; row++) {              renderer.drawItem(g2,state,dataArea,this,domainAxis,rangeAxis,currentDataset,row,column,pass);            }          } else {            for (int row=rowCount - 1; row >= 0; row--) {              renderer.drawItem(g2,state,dataArea,this,domainAxis,rangeAxis,currentDataset,row,column,pass);            }          }        }      } else {        for (int column=columnCount - 1; column >= 0; column--) {          if (this.rowRenderingOrder == SortOrder.ASCENDING) {            for (int row=0; row < rowCount; row++) {              renderer.drawItem(g2,state,dataArea,this,domainAxis,rangeAxis,currentDataset,row,column,pass);            }          } else {            for (int row=rowCount - 1; row >= 0; row--) {              renderer.drawItem(g2,state,dataArea,this,domainAxis,rangeAxis,currentDataset,row,column,pass);            }          }        }      }    }  }  return foundData;}  }
class C{  public void openBoard(){  if (mBoard != null) {    mBoard.open(true);  }}  }
class C{  public static boolean any(Object self){  BooleanReturningMethodInvoker bmi=new BooleanReturningMethodInvoker();  for (Iterator iter=InvokerHelper.asIterator(self); iter.hasNext(); ) {    if (bmi.convertToBoolean(iter.next())) {      return true;    }  }  return false;}  }
class C{  public InvalidHeaderValueException(String message){  super(message);}  }
class C{  public void testPingPongShortSegmentsWithNaglingOff(){  PseudoTcpTestPingPong test=new PseudoTcpTestPingPong();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.setOptNagling(false);  test.setBytesPerSend(50);  test.doTestPingPong(100,5);}  }
class C{  public static java.lang.String toHexString(int i){  return null;}  }
class C{  public void removeFromPeersAdvisors(boolean rebalance){  if (getPersistenceAdvisor() != null) {    getPersistenceAdvisor().releaseTieLock();  }  DiskRegion diskRegion=getDiskRegion();  boolean shouldDestroy=rebalance || diskRegion == null || !diskRegion.isRecreated();  Operation op=shouldDestroy ? Operation.REGION_LOCAL_DESTROY : Operation.REGION_CLOSE;  RegionEventImpl event=new RegionEventImpl(this,op,null,false,getMyId(),generateEventID());  if (isPartitionedRegionOpen()) {    if (diskRegion != null && shouldDestroy) {      diskRegion.beginDestroyDataStorage();    }    new DestroyRegionOperation(event,true).distribute();  }}  }
class C{  public void testParameters() throws Exception {  Similarity sim=getSimilarity("text_params");  assertEquals(BM25Similarity.class,sim.getClass());  BM25Similarity bm25=(BM25Similarity)sim;  assertEquals(1.2f,bm25.getK1(),0.01f);  assertEquals(0.76f,bm25.getB(),0.01f);}  }
class C{  public MutableKeyBuffer(final int capacity){  checkCapacity(capacity);  nkeys=0;  keys=new byte[capacity][];}  }
class C{  protected void bflash() throws SAXException {  if (mBuffIdx >= 0) {    mHandCont.characters(mBuff,0,(mBuffIdx + 1));    mBuffIdx=-1;  }}  }
class C{  static <V,A>void invoke(AsynchronousChannel channel,CompletionHandler<V,? super A> handler,A attachment,V result,Throwable exc){  boolean invokeDirect=false;  boolean identityOkay=false;  GroupAndInvokeCount thisGroupAndInvokeCount=myGroupAndInvokeCount.get();  if (thisGroupAndInvokeCount != null) {    if ((thisGroupAndInvokeCount.group() == ((Groupable)channel).group()))     identityOkay=true;    if (identityOkay && (thisGroupAndInvokeCount.invokeCount() < maxHandlerInvokeCount)) {      invokeDirect=true;    }  }  if (invokeDirect) {    invokeDirect(thisGroupAndInvokeCount,handler,attachment,result,exc);  } else {    try {      invokeIndirectly(channel,handler,attachment,result,exc);    } catch (    RejectedExecutionException ree) {      if (identityOkay) {        invokeDirect(thisGroupAndInvokeCount,handler,attachment,result,exc);      } else {        throw new ShutdownChannelGroupException();      }    }  }}  }
class C{  @Override protected void closeDialogOk(){  competitivePanel.commitChanges();  CompetitiveNetwork competitiveNet=(CompetitiveNetwork)competitivePanel.getGroup();  CompetitiveGroup competitive=competitiveNet.getCompetitive();  layoutPanel.commitChanges();  competitive.setLayout(layoutPanel.getCurrentLayout());  competitive.applyLayout();  competitiveNet.layoutNetwork();  networkPanel.getNetwork().addGroup(competitiveNet);  super.closeDialogOk();}  }
class C{  public IntersectionMatrix(String elements){  this();  set(elements);}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[11];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 3; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }      }    }  }  for (int i=0; i < 11; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  public boolean reverseCorrectIt(){  if (!isValidAction(ACTION_Reverse_Correct))   return false;  if (m_document != null) {    if (m_document.reverseCorrectIt()) {      m_status=STATUS_Reversed;      m_document.setDocStatus(m_status);      return true;    }    return false;  }  m_status=STATUS_Reversed;  return true;}  }
class C{  @Override public synchronized List<E> subList(int start,int end){  return new Collections.SynchronizedRandomAccessList<E>(super.subList(start,end),this);}  }
class C{  public static TypeReference newExceptionReference(int exceptionIndex){  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));}  }
class C{  public void writeMapBegin(TMap map) throws TException {  if (map.size == 0) {    writeByteDirect(0);  } else {    writeVarint32(map.size);    writeByteDirect(getCompactType(map.keyType) << 4 | getCompactType(map.valueType));  }}  }
class C{  public static String trim(String s,boolean leading,boolean trailing,String sp){  char space=(sp == null || sp.length() < 1) ? ' ' : sp.charAt(0);  if (leading) {    int len=s.length(), i=0;    while (i < len && s.charAt(i) == space) {      i++;    }    s=(i == 0) ? s : s.substring(i);  }  if (trailing) {    int endIndex=s.length() - 1;    int i=endIndex;    while (i >= 0 && s.charAt(i) == space) {      i--;    }    s=i == endIndex ? s : s.substring(0,i + 1);  }  return s;}  }
class C{  public TextAnswerFormat(){  this(UNLIMITED_LENGTH);}  }
class C{  static List[] createColorList(BufferedImage bi){  int w=bi.getWidth();  int h=bi.getHeight();  List[] colors=new ArrayList[1 << 12];  for (int i_w=0; i_w < w; i_w++) {    for (int i_h=0; i_h < h; i_h++) {      int rgb=(bi.getRGB(i_w,i_h) & 0x00FFFFFF);      int idx=(((rgb & 0xF00000) >>> 12) | ((rgb & 0x00F000) >>> 8) | ((rgb & 0x0000F0) >>> 4));      List v=colors[idx];      if (v == null) {        v=new ArrayList();        v.add(new Counter(rgb));        colors[idx]=v;      } else {        Iterator i=v.iterator();        while (true) {          if (i.hasNext()) {            if (((Counter)i.next()).add(rgb))             break;          } else {            v.add(new Counter(rgb));            break;          }        }      }    }  }  return colors;}  }
class C{  public Site addCookie(String domain,String name,String value){  cookies.put(domain,name,value);  return this;}  }
class C{  @After public void flush(){  System.out.flush();  System.err.flush();  System.out.println("======= ======= ======= ======= ======= ======= ======= ======= ======= ======= ");  System.out.flush();}  }
class C{  protected void createOrReplaceSequences(boolean create) throws EclipseLinkException {  createOrReplaceSequences(create,create);}  }
class C{  public boolean performAutoScale(final boolean force){  if (traceList.size() <= 0 || !(force || autoScale))   return false;  if (!force && xyGraph.getZoomType() != ZoomType.NONE)   return false;  final Range range=getTraceDataRange();  if (range == null)   return false;  double tempMin=range.getLower();  double tempMax=range.getUpper();  double max=getRange().getUpper();  double min=getRange().getLower();  if (isLogScaleEnabled()) {    tempMin=Log10.log10(tempMin);    tempMax=Log10.log10(tempMax);    max=Log10.log10(max);    min=Log10.log10(min);  }  final double thr=(max - min) * autoScaleThreshold;  if (((tempMin - min) >= 0 && (tempMin - min) < thr) && ((max - tempMax) >= 0 && (max - tempMax) < thr)) {    return false;  } else {    if ((tempMin - min) < 0)     tempMin-=thr;    if ((tempMax - max) > 0)     tempMax+=thr;  }  if ((Double.doubleToLongBits(tempMin) == Double.doubleToLongBits(min) && Double.doubleToLongBits(tempMax) == Double.doubleToLongBits(max)) || Double.isInfinite(tempMin) || Double.isInfinite(tempMax)|| Double.isNaN(tempMin)|| Double.isNaN(tempMax))   return false;  if (isLogScaleEnabled()) {    tempMin=Log10.pow10(tempMin);    tempMax=Log10.pow10(tempMax);  }  setRange(tempMin,tempMax,true);  repaint();  return true;}  }
class C{  public static void listServices(Output output,FileDescriptorSet fileDescriptorSet,String protoDiscoveryRoot,Optional<String> serviceFilter,Optional<String> methodFilter,Optional<Boolean> withMessage){  ServiceResolver serviceResolver=ServiceResolver.fromFileDescriptorSet(fileDescriptorSet);  output.newLine();  for (  ServiceDescriptor descriptor : serviceResolver.listServices()) {    boolean matchingDescriptor=!serviceFilter.isPresent() || descriptor.getFullName().toLowerCase().contains(serviceFilter.get().toLowerCase());    if (matchingDescriptor) {      listMethods(output,protoDiscoveryRoot,descriptor,methodFilter,withMessage);    }  }}  }
class C{  public static void emit_error(String message){  System.err.println("Error at " + current_line + "("+ current_position+ "): "+ message);  error_count++;}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  public JdbcRowSetImpl(String url,String user,String password) throws SQLException {  conn=null;  ps=null;  rs=null;  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }  initParams();  setUsername(user);  setPassword(password);  setUrl(url);  setShowDeleted(false);  setQueryTimeout(0);  setMaxRows(0);  setMaxFieldSize(0);  setParams();  setReadOnly(true);  setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);  setEscapeProcessing(true);  setTypeMap(null);  iMatchColumns=new Vector<Integer>(10);  for (int i=0; i < 10; i++) {    iMatchColumns.add(i,Integer.valueOf(-1));  }  strMatchColumns=new Vector<String>(10);  for (int j=0; j < 10; j++) {    strMatchColumns.add(j,null);  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public static void main(String args[]) throws Exception {  if (args.length != 3) {    System.err.println("Usage: XoauthAuthenticator <email> <oauthToken> <oauthTokenSecret>");    return;  }  String email=args[0];  String oauthToken=args[1];  String oauthTokenSecret=args[2];  initialize();  IMAPSSLStore imapSslStore=connectToImap("imap.googlemail.com",993,email,oauthToken,oauthTokenSecret,getAnonymousConsumer(),true);  System.out.println("Successfully authenticated to IMAP.\n");  SMTPTransport smtpTransport=connectToSmtp("smtp.googlemail.com",587,email,oauthToken,oauthTokenSecret,getAnonymousConsumer(),true);  System.out.println("Successfully authenticated to SMTP.");}  }
class C{  @Override public void perform(IR ir){  spillManager=new SpillLocationManager(ir);  ActiveSet active=createEmptySetOfActiveIntervals(ir);  for (  BasicInterval b : ir.MIRInfo.linearScanState.intervals) {    MappedBasicInterval bi=(MappedBasicInterval)b;    CompoundInterval ci=bi.container;    active.expireOldIntervals(bi);    if (!ci.getRegister().isPhysical()) {      active.allocate(bi,ci);    } else {      ci.getRegister().allocateRegister();    }    active.add(bi);  }  if (active.spilledSomething()) {    ir.MIRInfo.linearScanState.spilledSomething=true;  }}  }
class C{  public void service(Mail mail) throws MessagingException {  throw new MailetException("General protection fault");}  }
class C{  public void addZoningMapEntry(ZoneInfo zoningInfo){  if (this._zoningMap == null) {    this._zoningMap=new ZoneInfoMap();  }  this._zoningMap.put(zoningInfo.getZoneReferenceKey(),zoningInfo);}  }
class C{  private HttpResponse sendRequest(State state,AndroidHttpClient client,HttpGet request) throws StopRequest {  try {    return client.execute(request);  } catch (  IllegalArgumentException ex) {    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"while trying to execute request: " + ex.toString(),ex);  }catch (  IOException ex) {    logNetworkState();    throw new StopRequest(getFinalStatusForHttpError(state),"while trying to execute request: " + ex.toString(),ex);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:08.777 -0500",hash_original_method="71B44ACA4CC3DD57553E99908AFF2FC7",hash_generated_method="97FD0FEA731FD340565ABEB2464702AE") public void reset(){  NativeCollation.reset(address);}  }
class C{  public static CstByte make(byte value){  return new CstByte(value);}  }
class C{  public List<A> append(A x){  return make(x).prependList(this);}  }
class C{  private void produceBubbles(){  int bubblesCount=random.nextInt(3);  for (int i=0; i < bubblesCount; i++) {    GLBubble bubble=unusedBubbles.poll();    if (bubble != null) {      float shift=random.nextFloat() * 0.1f * (random.nextBoolean() ? 1 : -1);      float size=configuration.bubbleSize;      if (configuration.randomizeBubbleSize) {        size*=0.5f + random.nextFloat() * 0.8f;      }      bubble.update(-1 + random.nextFloat() * 2,bubbleFromY + shift,bubbleToY,size);      producedBubbles.add(bubble);    }  }}  }
class C{  public static void ensureFileExists(File file) throws IOException {  if (!file.exists()) {    file.createNewFile();  }}  }
class C{  private static int sampleFromDistribution(double[] distribution,Random rng){  double d=rng.nextDouble();  double sum=0.0;  for (int i=0; i < distribution.length; i++) {    sum+=distribution[i];    if (d <= sum)     return i;  }  throw new IllegalArgumentException("Distribution is invalid? d=" + d + ", sum="+ sum);}  }
class C{  public static <T>StateSpec<Object,BagState<T>> bag(Coder<T> elemCoder){  return new BagStateSpec<T>(elemCoder);}  }
class C{  public boolean supportsSavepoints() throws SQLException {  return firebirdSupportInfo.supportsSavepoint();}  }
class C{  public Vector(int capacity,int capacityIncrement){  if (capacity < 0) {    throw new IllegalArgumentException("capacity < 0: " + capacity);  }  elementData=newElementArray(capacity);  elementCount=0;  this.capacityIncrement=capacityIncrement;}  }
class C{  private void readData(long absolutePosition,ByteBuffer target,int length){  int remaining=length;  while (remaining > 0) {    dropDownstreamTo(absolutePosition);    int positionInAllocation=(int)(absolutePosition - totalBytesDropped);    int toCopy=Math.min(remaining,allocationLength - positionInAllocation);    Allocation allocation=dataQueue.peek();    target.put(allocation.data,allocation.translateOffset(positionInAllocation),toCopy);    absolutePosition+=toCopy;    remaining-=toCopy;  }}  }
class C{  private void appendMultiLineStringTaggedText(MultiLineString multiLineString,int level,Writer writer) throws IOException {  writer.write("MULTILINESTRING ");  appendMultiLineStringText(multiLineString,level,false,writer);}  }
class C{  public boolean start(){  if (isOptOut()) {    return false;  }  FMLCommonHandler.instance().bus().register(this);  return true;}  }
class C{  public void calculateDerived(){  xStats.calculateDerived();  yStats.calculateDerived();  differencesStats.calculateDerived();  correlation=Double.NaN;  if (!Double.isNaN(xStats.stdDev) && !Double.isNaN(yStats.stdDev) && !Utils.eq(xStats.stdDev,0)) {    double slope=(xySum - xStats.sum * yStats.sum / count) / (xStats.sumSq - xStats.sum * xStats.mean);    if (!Utils.eq(yStats.stdDev,0)) {      correlation=slope * xStats.stdDev / yStats.stdDev;    } else {      correlation=1.0;    }  }  if (Utils.gr(differencesStats.stdDev,0)) {    double tval=differencesStats.mean * Math.sqrt(count) / differencesStats.stdDev;    if (m_degreesOfFreedom >= 1) {      differencesProbability=Statistics.FProbability(tval * tval,1,m_degreesOfFreedom);    } else {      if (count > 1) {        differencesProbability=Statistics.FProbability(tval * tval,1,(int)count - 1);      } else {        differencesProbability=1;      }    }  } else {    if (differencesStats.sumSq == 0) {      differencesProbability=1.0;    } else {      differencesProbability=0.0;    }  }  differencesSignificance=0;  if (differencesProbability <= sigLevel) {    if (xStats.mean > yStats.mean) {      differencesSignificance=1;    } else {      differencesSignificance=-1;    }  }}  }
class C{  public void insertBefore(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=ifirst;  } else {    prev.next=ifirst;  }  location.prev=ilast;  ilast.next=location;  ifirst.prev=prev;  cache=null;  insns.removeAll(false);}  }
class C{  public static SimpleBigDecimal norm(final byte mu,SimpleBigDecimal u,SimpleBigDecimal v){  SimpleBigDecimal norm;  SimpleBigDecimal s1=u.multiply(u);  SimpleBigDecimal s2=u.multiply(v);  SimpleBigDecimal s3=v.multiply(v).shiftLeft(1);  if (mu == 1) {    norm=s1.add(s2).add(s3);  } else   if (mu == -1) {    norm=s1.subtract(s2).add(s3);  } else {    throw new IllegalArgumentException("mu must be 1 or -1");  }  return norm;}  }
class C{  public static boolean isValidName(String s){  int len=s.length();  if (len == 0) {    return false;  }  char c=s.charAt(0);  int d=c / 32;  int m=c % 32;  if ((NAME_FIRST_CHARACTER[d] & (1 << m)) == 0) {    return false;  }  for (int i=1; i < len; i++) {    c=s.charAt(i);    d=c / 32;    m=c % 32;    if ((NAME_CHARACTER[d] & (1 << m)) == 0) {      return false;    }  }  return true;}  }
class C{  private void updateInfo(){  String result="";  String sep="|";  if (slowMode == SLOWMODE_ON_INVALID || slowMode > 86400) {    result+="Slow: >day";  } else   if (slowMode > 999) {    result+="Slow: " + DateTime.duration(slowMode * 1000,1,0);  } else   if (slowMode > 0) {    result+="Slow: " + slowMode;  }  if (subMode) {    result=StringUtil.append(result,sep,"Sub");  }  if (r9kMode) {    result=StringUtil.append(result,sep,"r9k");  }  if (emoteOnly) {    result=StringUtil.append(result,sep,"EmoteOnly");  }  if (hosting != null && !hosting.isEmpty()) {    result=StringUtil.append(result,sep,"Hosting: " + hosting);  }  if (lang != null && !lang.isEmpty()) {    result=StringUtil.append(result,sep,lang);  }  if (!result.isEmpty()) {    result="[" + result + "]";  }  info=result;}  }
class C{  boolean isMarker(){  return value == this;}  }
class C{  public boolean isStringPainted(){  return paintString;}  }
class C{  public static GeoTimeSerie cprob(GeoTimeSerie gts,String separator) throws WarpScriptException {  Map<Object,AtomicInteger> histogram=new HashMap<Object,AtomicInteger>();  GeoTimeSerie prob=gts.cloneEmpty();  if (null == separator) {    long total=0L;    for (int i=0; i < gts.values; i++) {      Object value=GTSHelper.valueAtIndex(gts,i);      AtomicInteger count=histogram.get(value);      if (null == count) {        count=new AtomicInteger(0);        histogram.put(value,count);      }      count.addAndGet(1);      total++;    }    for (int i=0; i < gts.values; i++) {      long timestamp=GTSHelper.tickAtIndex(gts,i);      long geoxppoint=GTSHelper.locationAtIndex(gts,i);      long elevation=GTSHelper.elevationAtIndex(gts,i);      Object value=GTSHelper.valueAtIndex(gts,i);      double p=histogram.get(value).doubleValue() / total;      GTSHelper.setValue(prob,timestamp,geoxppoint,elevation,p,false);    }    return prob;  }  GTSHelper.valueSort(gts);  int idx=0;  while (idx < gts.values) {    Object val=GTSHelper.valueAtIndex(gts,idx);    if (!(val instanceof String)) {      throw new WarpScriptException("Can only compute conditional probabilities for String Geo Time Series.");    }    int lastsep=val.toString().lastIndexOf(separator);    if (-1 == lastsep) {      throw new WarpScriptException("Separator not found, unable to isolate given events.");    }    String given=val.toString().substring(0,lastsep);    histogram.clear();    long total=0;    int subidx=idx;    while (subidx < gts.values) {      val=GTSHelper.valueAtIndex(gts,subidx);      lastsep=val.toString().lastIndexOf(separator);      if (-1 == lastsep) {        throw new WarpScriptException("Separator not found, unable to isolate given events.");      }      String givenEvents=val.toString().substring(0,lastsep);      if (!givenEvents.equals(given)) {        break;      }      String event=val.toString().substring(lastsep + separator.length()).trim();      AtomicInteger count=histogram.get(event);      if (null == count) {        count=new AtomicInteger(0);        histogram.put(event,count);      }      count.addAndGet(1);      total++;      subidx++;    }    for (int i=idx; i < subidx; i++) {      val=GTSHelper.valueAtIndex(gts,i);      lastsep=val.toString().lastIndexOf(separator);      String event=val.toString().substring(lastsep + separator.length());      long timestamp=GTSHelper.tickAtIndex(gts,i);      long location=GTSHelper.locationAtIndex(gts,i);      long elevation=GTSHelper.elevationAtIndex(gts,i);      double p=histogram.get(event).doubleValue() / total;      GTSHelper.setValue(prob,timestamp,location,elevation,p,false);    }    idx=subidx;  }  return prob;}  }
class C{  public void clearCurrentRequestTimedOut(){  if (currentRequestTimedOut != null)   currentRequestTimedOut.clear();  currentRequestTimedOut=null;}  }
class C{  public void sortKeys(){  sortImpl(true,false);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z2 != 0) {              outputFile.setValue(row,col,(int)z1 / (int)z2);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      int const2=(int)constant2;      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData && constant2 != 0) {            outputFile.setValue(row,col,(int)z1 / const2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      int const1=(int)constant1;      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData && z2 != 0) {            outputFile.setValue(row,col,const1 / (int)z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] leftTopBlack=image.getTopLeftOnBit();  int[] rightBottomBlack=image.getBottomRightOnBit();  if (leftTopBlack == null || rightBottomBlack == null) {    throw NotFoundException.getNotFoundInstance();  }  int moduleSize=moduleSize(leftTopBlack,image);  int top=leftTopBlack[1];  int bottom=rightBottomBlack[1];  int left=leftTopBlack[0];  int right=rightBottomBlack[0];  int matrixWidth=(right - left + 1) / moduleSize;  int matrixHeight=(bottom - top + 1) / moduleSize;  if (matrixWidth <= 0 || matrixHeight <= 0) {    throw NotFoundException.getNotFoundInstance();  }  int nudge=moduleSize / 2;  top+=nudge;  left+=nudge;  BitMatrix bits=new BitMatrix(matrixWidth,matrixHeight);  for (int y=0; y < matrixHeight; y++) {    int iOffset=top + y * moduleSize;    for (int x=0; x < matrixWidth; x++) {      if (image.get(left + x * moduleSize,iOffset)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public ShortLookupTable(int offset,short data[]){  super(offset,data.length);  numComponents=1;  numEntries=data.length;  this.data=new short[1][];  this.data[0]=data;}  }
class C{  public void addHint(Component hintComponent,Component destinationComponent,String position){  hintComponent.putClientProperty(POS,position);  hintComponent.putClientProperty(DEST,destinationComponent);  vec.addElement(hintComponent);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void write(char[] cbuf,int off,int len) throws IOException {  if (len > 0) {    checkWrite();  }  super.write(cbuf,off,len);}  }
class C{  public void train(URL aUrl,String aEncoding) throws IOException {  try (InputStream is=aUrl.openStream()){    train(new InputStreamReader(is,aEncoding));  } }  }
class C{  void handleResponseError(final HttpServerRequest req,final ResourceCollectionException exception){  if (log.isTraceEnabled()) {    log.trace("got a ResourceCollectionException: " + exception.getMessage());  }  ResponseStatusCodeLogUtil.debug(req,exception.getStatusCode(),RecursiveRootHandlerBase.class);  req.response().setStatusCode(exception.getStatusCode().getStatusCode());  req.response().setStatusMessage(exception.getStatusCode().getStatusMessage());  req.response().end(exception.getMessage());}  }
class C{  public void addFeature(String feature){  addFeature(new Feature(feature));}  }
class C{  public boolean hasSVUID(){  return hasSVUID;}  }
class C{  public Tasks<VolumeRestRep> resumeContinuousCopies(URI id,CopiesParam input){  TaskList tasks=client.post(TaskList.class,input,getContinuousCopiesUrl() + "/resume",id);  return new Tasks<VolumeRestRep>(client,tasks.getTaskList(),BlockMirrorRestRep.class);}  }
class C{  public StunDiscoveryReport determineAddress() throws StunException, IOException {  checkStarted();  StunDiscoveryReport report=new StunDiscoveryReport();  StunMessageEvent evt=doTestI(serverAddress);  if (evt == null) {    report.setNatType(StunDiscoveryReport.UDP_BLOCKING_FIREWALL);    return report;  } else {    TransportAddress mappedAddress=((MappedAddressAttribute)evt.getMessage().getAttribute(Attribute.MAPPED_ADDRESS)).getAddress();    if (mappedAddress == null) {      logger.info("Failed to do the network discovery");      return null;    }    logger.fine("mapped address is=" + mappedAddress + ", name="+ mappedAddress.getHostAddress());    TransportAddress backupServerAddress=((ChangedAddressAttribute)evt.getMessage().getAttribute(Attribute.CHANGED_ADDRESS)).getAddress();    logger.fine("backup server address is=" + backupServerAddress + ", name="+ backupServerAddress.getHostAddress());    report.setPublicAddress(mappedAddress);    if (mappedAddress.equals(localAddress)) {      evt=doTestII(serverAddress);      if (evt == null) {        report.setNatType(StunDiscoveryReport.SYMMETRIC_UDP_FIREWALL);        return report;      } else {        report.setNatType(StunDiscoveryReport.OPEN_INTERNET);        return report;      }    } else {      evt=doTestII(serverAddress);      if (evt == null) {        evt=doTestI(backupServerAddress);        if (evt == null) {          logger.info("Failed to receive a response from " + "backup stun server!");          return report;        }        TransportAddress mappedAddress2=((MappedAddressAttribute)evt.getMessage().getAttribute(Attribute.MAPPED_ADDRESS)).getAddress();        if (mappedAddress.equals(mappedAddress2)) {          evt=doTestIII(serverAddress);          if (evt == null) {            report.setNatType(StunDiscoveryReport.PORT_RESTRICTED_CONE_NAT);            return report;          } else {            report.setNatType(StunDiscoveryReport.RESTRICTED_CONE_NAT);            return report;          }        } else {          report.setNatType(StunDiscoveryReport.SYMMETRIC_NAT);          return report;        }      } else {        report.setNatType(StunDiscoveryReport.FULL_CONE_NAT);        return report;      }    }  }}  }
class C{  public void addCRL(X509CRLHolder crl){  crls.add(crl.toASN1Structure());}  }
class C{  public Set<Emoticon> findMatchingEmoticons(String emoteCode,Collection<HashSet<Emoticon>> values){  Set<Emoticon> found=new HashSet<>();  for (  Collection<Emoticon> emotes : values) {    for (    Emoticon emote : emotes) {      if (emote.getMatcher(emoteCode).matches()) {        found.add(emote);      }    }  }  return found;}  }
class C{  void open(Database db,MVStore.Builder builder,boolean encrypted){  this.encrypted=encrypted;  try {    this.store=builder.open();    FileStore fs=store.getFileStore();    if (fs != null) {      this.fileName=fs.getFileName();    }    if (!db.getSettings().reuseSpace) {      store.setReuseSpace(false);    }    this.transactionStore=new TransactionStore(store,new ValueDataType(null,db,null));    transactionStore.init();  } catch (  IllegalStateException e) {    throw convertIllegalStateException(e);  }}  }
class C{  public String evaluatorTipText(){  return "Set the attribute evaluator to use. This evaluator is used " + "during the attribute selection phase before the classifier is " + "invoked.";}  }
class C{  private double findPhysicalDistance(final Neuron neuron1,final Neuron neuron2){  double ret=Math.sqrt(Math.pow(neuron2.getX() - neuron1.getX(),2) + Math.pow(neuron2.getY() - neuron1.getY(),2));  return ret;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public BasicTreeLayout(Tree tree){  this(tree,null);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS:    return astStructuralMembers != null && !astStructuralMembers.isEmpty();case TypeRefsPackage.STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE:  return structuralType != null;case TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS:return genStructuralMembers != null && !genStructuralMembers.isEmpty();case TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS:return postponedSubstitutions != null && !postponedSubstitutions.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void start(ClassPool pool) throws NotFoundException {  classPool=pool;  final String msg="javassist.tools.reflect.Sample is not found or broken.";  try {    CtClass c=classPool.get("javassist.tools.reflect.Sample");    rebuildClassFile(c.getClassFile());    trapMethod=c.getDeclaredMethod("trap");    trapStaticMethod=c.getDeclaredMethod("trapStatic");    trapRead=c.getDeclaredMethod("trapRead");    trapWrite=c.getDeclaredMethod("trapWrite");    readParam=new CtClass[]{classPool.get("java.lang.Object")};  } catch (  NotFoundException e) {    throw new RuntimeException(msg);  }catch (  BadBytecode e) {    throw new RuntimeException(msg);  }}  }
class C{  private void commitVariable(Object config,String var,Set<String> done) throws ConfigurationException {  ConfigurationInfo info=getInfo(var);  setPrerequisites(info.getPrerequisites(),var,done,config,true);  setPrerequisites(info.getSoftPrerequisites(),var,done,config,false);  if (committed.contains(var))   return;  committed.add(var);  done.add(var);  assert (varMap.containsKey(var));  List vals=varMap.get(var);  if (vals.size() > 1) {    assert (info.allowMultiple());  }  for (Iterator valit=vals.iterator(); valit.hasNext(); ) {    ConfigurationValue val=(ConfigurationValue)valit.next();    try {      Object targetconfig=getParentConfiguration(config,var);      Object[] args=buildArgList(info,val);      info.getSetterMethod().invoke(targetconfig,args);      calculateChecksum(targetconfig,info,var,args);    } catch (    Exception e) {      Throwable t=e;      if (e instanceof InvocationTargetException) {        t=((InvocationTargetException)e).getTargetException();      }      if (Trace.error)       t.printStackTrace();      if (t instanceof ConfigurationException) {        throw (ConfigurationException)t;      } else {        throw new ConfigurationException.OtherThrowable(t,var,val.getSource(),val.getLine());      }    }  }}  }
class C{  protected Elide(AuditLogger auditLogger,DataStore dataStore,EntityDictionary dictionary,JsonApiMapper mapper,Function<RequestScope,PermissionExecutor> permissionExecutor){  this(auditLogger,dataStore,dictionary,mapper,null,Collections.singletonList(new DefaultFilterDialect(dictionary)),Collections.singletonList(new DefaultFilterDialect(dictionary)),false);}  }
class C{  public boolean isActive_1(){  return active_1;}  }
class C{  public AttributeConverter<?> putAttributeConverter(final Class<?> clazz,final AttributeConverter<?> converter){  return this.converters.put(clazz.getCanonicalName(),converter);}  }
class C{  public IgnitePair(@Nullable T t1,@Nullable T t2){  super(t1,t2);}  }
class C{  private static void mapResource(IResource resource,Map<IProject,List<IResource>> projectsMap,boolean checkJavaProject){  if (resource.getType() == FILE && !Util.isJavaArtifact(resource)) {    return;  }  IProject project=resource.getProject();  if (checkJavaProject && !Util.isJavaProject(project)) {    return;  }  List<IResource> resources=projectsMap.get(project);  if (resources == null) {    resources=new ArrayList<IResource>();    projectsMap.put(project,resources);  }  if (!containsParents(resources,resource)) {    resources.add(resource);  }}  }
class C{  public CLIOutputResponse showLog(final ShowLogRequest request) throws IOException, SubversionException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  addOption(uArgs,"--revision",request.getRevision());  uArgs.add("log");  final CommandLineResult result=runCommand(null,uArgs,projectPath,request.getPaths());  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public UnsignedShort add(int increment){  return valueOf(getValue() + increment);}  }
class C{  public static void println(Closure self){  Object owner=getClosureOwner(self);  InvokerHelper.invokeMethod(owner,"println",EMPTY_OBJECT_ARRAY);}  }
class C{  public void sendRedirect(String string) throws IOException {  statusCode=HttpServletResponse.SC_MOVED_TEMPORARILY;  super.sendRedirect(string);}  }
class C{  public void finish() throws CarbonDataWriterException {  if (this.entryCount > 0) {    producerExecutorServiceTaskList.add(producerExecutorService.submit(new Producer(blockletDataHolder,dataRows,++writerTaskSequenceCounter)));    blockletProcessingCount.incrementAndGet();    processedDataCount+=entryCount;  }  closeWriterExecutionService(producerExecutorService);  processWriteTaskSubmitList(producerExecutorServiceTaskList);  processingComplete=true;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public void visitEdge(IGraphEntity n1,IGraphEntity n2){  String k1=getKey(n1);  String k2=getKey(n2);  edges.append(new EdgePair(k1,k2));}  }
class C{  public CapabilitiesBuilder addExtension(String extension){  mExtensions.add(extension);  return this;}  }
class C{  private void addLine(Message message){  messages.add(message);  if (messages.size() > MAXLINES) {    messages.remove(0);  }  numberOfLines++;}  }
class C{  public Vset checkLocalClass(Environment env,Context ctx,Vset vset,ClassDefinition sup,Expression args[],Type argTypes[]) throws ClassNotFound {  env=setupEnv(env);  if ((sup != null) != isAnonymous()) {    throw new CompilerError("resolveAnonymousStructure");  }  if (isAnonymous()) {    resolveAnonymousStructure(env,sup,args,argTypes);  }  vset=checkInternal(env,ctx,vset);  return vset;}  }
class C{  private void syncIndicatorWithButton(int buttonId){switch (buttonId) {case ButtonManager.BUTTON_FLASH:{      syncFlashIndicator();      break;    }case ButtonManager.BUTTON_TORCH:{    syncFlashIndicator();    break;  }case ButtonManager.BUTTON_HDR_PLUS:{  syncHdrIndicator();  break;}case ButtonManager.BUTTON_HDR:{syncHdrIndicator();break;}case ButtonManager.BUTTON_EXPOSURE_COMPENSATION:{syncExposureIndicator();break;}default :}}  }
class C{  void save(){  String filename=name + FILE_PATH_STYLE_SUFFIX;  OutputStream outputStream=null;  try {    File outDir=FileUtil.getPublicDirectory();    File outfile=new File(outDir,filename);    outputStream=new BufferedOutputStream(new FileOutputStream(outfile));    XmlSerializer serializer=XmlPullParserFactory.newInstance().newSerializer();    serializer.setOutput(outputStream,"UTF-8");    serializer.startDocument("UTF-8",null);    this.toXml(serializer);    serializer.endDocument();  } catch (  Exception e) {    Log.e("Style","Save failed - " + filename + " "+ e);  } finally {    try {      outputStream.close();    } catch (    Exception ex) {    }  }}  }
class C{  @Override public void update(ILaunchConfigurationWorkingCopy launchConfig,IJavaProject javaProject,List<String> programArgs,List<String> vmArgs) throws CoreException {  if (!GWTNature.isGWTProject(javaProject.getProject())) {    return;  }  if (!GwtLaunchConfigurationProcessorUtilities.isSuperDevModeCodeServer(launchConfig)) {    return;  }  int argIndex=programArgs.indexOf(LAUNCHERDIR_ARG);  if (argIndex > -1) {    return;  }  String pathToWarOutDir=null;  String launcherDir=GWTLaunchConfiguration.getSuperDevModeCodeServerLauncherDir(launchConfig);  if (launcherDir != null) {    pathToWarOutDir=launcherDir;  }  if (pathToWarOutDir == null) {    IPath path=WebAppUtilities.getWarOutLocationOrPrompt(javaProject.getProject());    if (path != null) {      pathToWarOutDir=path.toFile().getAbsolutePath();    }  }  if (pathToWarOutDir == null || pathToWarOutDir.isEmpty()) {    String msg="SuperDevModeCodeServerLauncherDirArgumentProcessor > update: couldn't determine pathtoWarOutDir.";    GWTPluginLog.logWarning(msg);    return;  }  int insertionIndex=LaunchConfigurationProcessorUtilities.removeArgsAndReturnInsertionIndex(programArgs,argIndex,true);  programArgs.add(insertionIndex,LAUNCHERDIR_ARG);  programArgs.add(insertionIndex + 1,pathToWarOutDir);}  }
class C{  protected void writeColumn(Table table,Column column,StringBuilder ddl){  writeColumnTypeDefaultRequired(table,column,ddl);  if (column.isPrimaryKey() && databaseInfo.isPrimaryKeyEmbedded()) {    writeColumnEmbeddedPrimaryKey(table,column,ddl);  }  if (column.isAutoIncrement() && !databaseInfo.isDefaultValueUsedForIdentitySpec()) {    if (!databaseInfo.isNonPKIdentityColumnsSupported() && !column.isPrimaryKey()) {      throw new ModelException("Column " + column.getName() + " in table "+ table.getName()+ " is auto-incrementing but not a primary key column, which is not supported by the platform");    }    ddl.append(" ");    writeColumnAutoIncrementStmt(table,column,ddl);  }}  }
class C{  public boolean isComplete(){  return complete;}  }
class C{  public void addTreeModelListener(TreeModelListener l){  listenerList.add(TreeModelListener.class,l);}  }
class C{  public void initialize(GridCacheReturn ret){  final Object obj=this.o;  if (obj == null) {    boolean res=COMPLETABLE_WRAPPER_UPD.compareAndSet(this,null,ret);    if (!res)     initialize(ret);  } else   if (obj instanceof GridFutureAdapter) {    ((GridFutureAdapter)obj).onDone(ret);    boolean res=COMPLETABLE_WRAPPER_UPD.compareAndSet(this,obj,ret);    assert res;  } else   throw new IllegalStateException("GridCacheReturnCompletableWrapper can't be reinitialized");}  }
class C{  public static <I,A>Parser<I,A> choice(Parser<I,? extends A> p1,Parser<I,? extends A> p2,Parser<I,? extends A> p3){  return or(p1,or(p2,p3));}  }
class C{  public static String left(String s,int width,char fillChar){  if (s.length() >= width) {    return s;  }  StringBuffer sb=new StringBuffer(width);  sb.append(s);  for (int i=width - s.length(); --i >= 0; ) {    sb.append(fillChar);  }  return sb.toString();}  }
class C{  public boolean reverseCorrectIt(){  log.info("reverseCorrectIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSECORRECT);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSECORRECT);  if (m_processMsg != null)   return false;  return false;}  }
class C{  public void removeListener(){  mHalfBandFilter.removeListener();}  }
class C{  public void write(int c) throws IOException {  if (sink == null) {    throw new IOException("Pipe not connected");  }  sink.receive(c);}  }
class C{  public final void removePoint(double x,double y){  dataPoints--;  if (dataPoints <= 0) {    initialize();  } else {    sumX-=x;    sumXSq-=x * x;    sumY-=y;    sumYSq-=y * y;    sumXY-=x * y;  }}  }
class C{  public DropRecordedItemAction(final String questname){  this.questname=checkNotNull(questname);  this.index=-1;}  }
class C{  protected boolean isDragRegion(int x,int y){  return isDraggable();}  }
class C{  private boolean readMetaDataEntry(ReadStream is) throws IOException {  int crc=_nonce;  int code=is.read();  crc=Crc32Caucho.generate(crc,code);switch (code) {case CODE_TABLE:    readMetaTable(is,crc);  break;case CODE_SEGMENT:readMetaSegment(is,crc);break;case CODE_META_SEGMENT:readMetaContinuation(is,crc);break;default :return false;}_metaOffset=is.position();return true;}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  MaxAggregator maxAggregator=(MaxAggregator)aggregator;  if (!aggregator.isFirstTime()) {    agg(maxAggregator.aggVal);    firstTime=false;  }}  }
class C{  public boolean removeHost(MACAddress host){  for (  Entry<String,MACAddress> entry : this.portToMac.entrySet()) {    if (entry.getValue().equals(host)) {      this.portToMac.remove(entry.getKey());      return true;    }  }  return false;}  }
class C{  protected void refreshDatasource(){  if (datasource instanceof CollectionDatasource.Suspendable)   ((CollectionDatasource.Suspendable)datasource).refreshIfNotSuspended(); else   datasource.refresh();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static Process execute(final String self,final String[] envp,final File dir) throws IOException {  return Runtime.getRuntime().exec(self,envp,dir);}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,boolean append) throws IOException {  writeLines(file,encoding,lines,null,append);}  }
class C{  public void validateBusinessObjectData(BusinessObjectFormatEntity businessObjectFormatEntity,String expectedBusinessObjectDataPartitionValue,List<String> expectedBusinessObjectDataSubPartitionValues,Integer expectedBusinessObjectDataVersion,Boolean expectedLatestVersion,String expectedStatusCode,String expectedStorageName,String expectedStorageDirectoryPath,List<StorageFile> expectedStorageFiles,List<Attribute> expectedAttributes,BusinessObjectData actualBusinessObjectData){  validateBusinessObjectData(null,businessObjectFormatEntity.getBusinessObjectDefinition().getNamespace().getCode(),businessObjectFormatEntity.getBusinessObjectDefinition().getName(),businessObjectFormatEntity.getUsage(),businessObjectFormatEntity.getFileType().getCode(),businessObjectFormatEntity.getBusinessObjectFormatVersion(),expectedBusinessObjectDataPartitionValue,expectedBusinessObjectDataSubPartitionValues,expectedBusinessObjectDataVersion,expectedLatestVersion,expectedStatusCode,expectedStorageName,expectedStorageDirectoryPath,expectedStorageFiles,expectedAttributes,actualBusinessObjectData);}  }
class C{  public JarClassLoader[] deploy(final String jarNames[],final byte[][] jarBytes) throws IOException, ClassNotFoundException {  JarClassLoader[] jarClassLoaders=new JarClassLoader[jarNames.length];  verifyWritableDeployDirectory();  lock.lock();  try {    for (int i=0; i < jarNames.length; i++) {      if (!JarClassLoader.isValidJarContent(jarBytes[i])) {        throw new IllegalArgumentException("File does not contain valid JAR content: " + jarNames[i]);      }    }    for (int i=0; i < jarNames.length; i++) {      jarClassLoaders[i]=deployWithoutRegistering(jarNames[i],jarBytes[i]);    }    for (    JarClassLoader jarClassLoader : jarClassLoaders) {      if (jarClassLoader != null) {        jarClassLoader.loadClassesAndRegisterFunctions();      }    }  }  finally {    lock.unlock();  }  return jarClassLoaders;}  }
class C{  private static Map<String,File> newAccessOrder(){  return new LinkedHashMap<String,File>(MAX_SIZE,0.75f,true);}  }
class C{  private void writeReceived(Epoch epoch,int a,byte[] value){  int cid=epoch.getConsensus().getId();  Logger.println("(Acceptor.writeAcceptReceived) WRITE from " + a + " for consensus "+ cid);  epoch.setWrite(a,value);  computeWrite(cid,epoch,value);}  }
class C{  public String classNameTipText(){  return "Name of the class containing the method used for the transformation.";}  }
class C{  @Override public void showSnackBarWithStringResource(int resId){  Snackbar snackbar=Snackbar.make(coordinatorLayout,resId,Snackbar.LENGTH_LONG);  snackbar.show();}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  @Override public synchronized boolean isValid(int timeout){  try {    debugCodeCall("isValid",timeout);    if (session == null || session.isClosed()) {      return false;    }    getTransactionIsolation();    return true;  } catch (  Exception e) {    logAndConvert(e);    return false;  }}  }
class C{  public void addEventListener(IRcsServiceRegistrationListener listener){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.addEventListener(listener);  }}  }
class C{  public Item peek(){  if (isEmpty())   throw new NoSuchElementException("Queue underflow");  return first.item;}  }
class C{  public void resetTotalBytes(){  _totalReadBytes=0;  _totalWriteBytes=0;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.ENUMERATION_TYPE;}  }
class C{  public void testOneSubmittedMigration_nonEquivalent() throws Exception {  ImmutableMap<String,String> files=ImmutableMap.of("/path/to/db","{\"equivalences\":[], \"migrations\":[]}","/dummy/codebase/int/1/file","1","/dummy/codebase/pub/1/","empty dir (different)","/dummy/codebase/int/migrated_from/file","migrated_from","/dummy/codebase/pub/migrated_to/","empty dir (different)");  FileSystem filesystem=new InMemoryFileSystem(files);  FileDiffer fileDiffer=new ConcreteFileDiffer(cmd,filesystem);  CodebaseDiffer codebaseDiffer=new CodebaseDiffer(fileDiffer,filesystem);  Repositories repositories=new Repositories(ImmutableSet.<RepositoryType.Factory>of(new DummyRepositoryFactory()));  InMemoryProjectContextFactory contextFactory=init(new InMemoryProjectContextFactory(ui,repositories));  ProjectContext context=contextFactory.create("moe_config.txt");  Injector.INSTANCE=new Injector(filesystem,cmd,ui);  Db db=new FileDb(DB_FILE.getPath(),storage,new FileDb.Writer(GsonModule.provideGson(),filesystem));  BookkeepingDirective d=new BookkeepingDirective(new Bookkeeper(context,codebaseDiffer,db,ui));  d.dbLocation=DB_FILE.getAbsolutePath();  expectDiffs();  control.replay();  assertEquals(0,d.perform());  control.verify();  DbStorage expectedDb=new DbStorage();  expectedDb.addMigration(SubmittedMigration.create(Revision.create("migrated_from","int"),Revision.create("migrated_to","pub")));  assertThat(storage).isEqualTo(expectedDb);}  }
class C{  public NetworkJTree(DefaultMutableTreeNode root){  super(root);}  }
class C{  public static <K>IndirectPriorityQueue<K> synchronize(final IndirectPriorityQueue<K> q,final Object sync){  return new SynchronizedIndirectPriorityQueue<K>(q,sync);}  }
class C{  public String[] splitOptions(final String optionAsString){  return optionAsString == null ? ArrayUtils.EMPTY_STRING_ARRAY : optionAsString.split("(?ims),(?![^\\[\\]]*\\])");}  }
class C{  public NamespaceMetaDataPair(final Deserializer deserializer){  super("namespace","meta",null,null,deserializer);}  }
class C{  public void printRepeating(int[] num){  if (num == null || num.length == 0)   return;  for (int i=0; i < num.length; i++) {    if (num[Math.abs(num[i])] < 0) {      System.out.println(Math.abs(num[i]));    } else {      num[Math.abs(num[i])]=-num[Math.abs(num[i])];    }  }}  }
class C{  @Override public void add(final ReferenceContainer<ReferenceType> newEntries) throws IOException, SpaceExceededException {  try {    this.ram.add(newEntries);    final long t=System.currentTimeMillis();    if (this.ram.size() % 1000 == 0 || this.lastCleanup + cleanupCycle < t || this.lastDump + dumpCycle < t) {      EventTracker.update(EventTracker.EClass.WORDCACHE,Long.valueOf(this.ram.size()),true);    }  } catch (  final SpaceExceededException e) {    EventTracker.update(EventTracker.EClass.WORDCACHE,Long.valueOf(this.ram.size()),true);    this.ram.add(newEntries);  }}  }
class C{  public boolean isDeclaredFunctionReference(ParseTreeNode node){  return node instanceof Reference && isDeclaredFunction(((Reference)node).getIdentifierName());}  }
class C{  public static FetchKeysResponse send(InternalDistributedMember recipient,PartitionedRegion r,Integer bucketId,boolean allowTombstones) throws ForceReattemptException {  Assert.assertTrue(recipient != null,"FetchKeysMessage NULL recipient");  FetchKeysMessage tmp=new FetchKeysMessage();  FetchKeysResponse p=(FetchKeysResponse)tmp.createReplyProcessor(r,Collections.singleton(recipient));  FetchKeysMessage m=new FetchKeysMessage(recipient,r.getPRId(),p,bucketId,InterestType.REGULAR_EXPRESSION,".*",allowTombstones);  Set failures=r.getDistributionManager().putOutgoing(m);  if (failures != null && failures.size() > 0) {    throw new ForceReattemptException(LocalizedStrings.FetchKeysMessage_FAILED_SENDING_0.toLocalizedString(m));  }  return p;}  }
class C{  private void checkOffsetOrImageTag(ExifTag tag){  if (tag.getComponentCount() == 0) {    return;  }  short tid=tag.getTagId();  int ifd=tag.getIfd();  if (tid == TAG_EXIF_IFD && checkAllowed(ifd,ExifInterface.TAG_EXIF_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_EXIF) || isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_EXIF,tag.getValueAt(0));    }  } else   if (tid == TAG_GPS_IFD && checkAllowed(ifd,ExifInterface.TAG_GPS_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_GPS)) {      registerIfd(IfdId.TYPE_IFD_GPS,tag.getValueAt(0));    }  } else   if (tid == TAG_INTEROPERABILITY_IFD && checkAllowed(ifd,ExifInterface.TAG_INTEROPERABILITY_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_INTEROPERABILITY,tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT)) {    if (isThumbnailRequested()) {      registerCompressedImage(tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT_LENGTH && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT_LENGTH)) {    if (isThumbnailRequested()) {      mJpegSizeTag=tag;    }  } else   if (tid == TAG_STRIP_OFFSETS && checkAllowed(ifd,ExifInterface.TAG_STRIP_OFFSETS)) {    if (isThumbnailRequested()) {      if (tag.hasValue()) {        for (int i=0; i < tag.getComponentCount(); i++) {          if (tag.getDataType() == ExifTag.TYPE_UNSIGNED_SHORT) {            registerUncompressedStrip(i,tag.getValueAt(i));          } else {            registerUncompressedStrip(i,tag.getValueAt(i));          }        }      } else {        mCorrespondingEvent.put(tag.getOffset(),new ExifTagEvent(tag,false));      }    }  } else   if (tid == TAG_STRIP_BYTE_COUNTS && checkAllowed(ifd,ExifInterface.TAG_STRIP_BYTE_COUNTS) && isThumbnailRequested() && tag.hasValue()) {    mStripSizeTag=tag;  }}  }
class C{  public static boolean putBoolean(Context context,String key,boolean value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putBoolean(key,value);  return editor.commit();}  }
class C{  private void cleanupAnyBackupSnapshots(final StorageSystem storage,final Volume volume) throws Exception {  _log.info(String.format("cleanupAnyBackupSnapshots for volume [%s](%s)...",volume.getLabel(),volume.getId()));  CIMObjectPath volumePath=_cimPath.getBlockObjectPath(storage,volume);  if (_helper.checkExists(storage,volumePath,false,false) == null) {    _log.info(String.format("cleanupAnyBackupSnapshots(%s, %s) -- volumePath does not exist, perhaps it has already been deleted?",storage.getSerialNumber(),volume.getLabel()));    return;  }  CloseableIterator<CIMObjectPath> settingsIterator=null;  try {    settingsIterator=_helper.getReference(storage,volumePath,SmisConstants.CIM_SETTINGS_DEFINE_STATE,null);    if (settingsIterator != null) {      while (settingsIterator.hasNext()) {        CIMObjectPath settingsPath=settingsIterator.next();        CIMArgument[] outArgs=new CIMArgument[5];        _helper.callModifySettingsDefineState(storage,_helper.getDeleteSettingsForSnapshotInputArguments(settingsPath,true),outArgs);      }    }  }  finally {    if (settingsIterator != null) {      settingsIterator.close();    }  }}  }
class C{  private void updateCurrentPlaybackInformation(){  PlaylistItemChange<MediaItem> itemChangedEvent=playlistManager.getCurrentItemChange();  if (itemChangedEvent != null) {    onPlaylistItemChanged(itemChangedEvent.getCurrentItem(),itemChangedEvent.hasNext(),itemChangedEvent.hasPrevious());  }  PlaylistServiceCore.PlaybackState currentPlaybackState=playlistManager.getCurrentPlaybackState();  if (currentPlaybackState != PlaylistServiceCore.PlaybackState.STOPPED) {    onPlaybackStateChanged(currentPlaybackState);  }  MediaProgress progressEvent=playlistManager.getCurrentProgress();  if (progressEvent != null) {    onProgressUpdated(progressEvent);  }}  }
class C{  private static int mult(int p,int q){  int p1=p / CONST_m1;  int p0=p % CONST_m1;  int q1=q / CONST_m1;  int q0=q % CONST_m1;  return (((p0 * q1 + p1 * q0) % CONST_m1) * CONST_m1 + p0 * q0);}  }
class C{  private void initializeAuthority(String p_uriSpec) throws MalformedURIException {  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  String userinfo=null;  if (p_uriSpec.indexOf('@',start) != -1) {    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '@') {        break;      }      index++;    }    userinfo=p_uriSpec.substring(start,index);    index++;  }  String host=null;  start=index;  while (index < end) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':') {      break;    }    index++;  }  host=p_uriSpec.substring(start,index);  int port=-1;  if (host.length() > 0) {    if (testChar == ':') {      index++;      start=index;      while (index < end) {        index++;      }      String portStr=p_uriSpec.substring(start,index);      if (portStr.length() > 0) {        for (int i=0; i < portStr.length(); i++) {          if (!isDigit(portStr.charAt(i))) {            throw new MalformedURIException(portStr + " is invalid. Port should only contain digits!");          }        }        try {          port=Integer.parseInt(portStr);        } catch (        NumberFormatException nfe) {        }      }    }  }  setHost(host);  setPort(port);  setUserinfo(userinfo);}  }
class C{  public static void moveAtomicReplace(String source,String target){  FilePath.get(source).moveTo(FilePath.get(target),true);}  }
class C{  public void removeHyperlinkListener(HyperlinkListener l){  listenerList.remove(HyperlinkListener.class,l);}  }
class C{  public void testRoundRobinDispatchOnNonExclusive() throws Exception {  connection.start();  Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);  ActiveMQQueue destination=new ActiveMQQueue("TEST");  MessageProducer producer=session.createProducer(destination);  producer.setDeliveryMode(deliveryMode);  MessageConsumer consumer1=session.createConsumer(destination);  MessageConsumer consumer2=session.createConsumer(destination);  producer.send(session.createTextMessage("1st"));  producer.send(session.createTextMessage("2nd"));  Message m;  m=consumer2.receive(1000);  assertNotNull(m);  m=consumer1.receive(1000);  assertNotNull(m);  assertNull(consumer1.receiveNoWait());  assertNull(consumer2.receiveNoWait());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:21.601 -0500",hash_original_method="7ECE87C8E0B6AC612BF4B05EB3BE89DA",hash_generated_method="5061C51BA9AB55A45A330545ECB336D2") public void disconnected(){}  }
class C{  protected void sendFunctionGroup2(){  byte[] result=jmri.NmraPacket.function5Through8Packet(address,(address >= 100),getF5(),getF6(),getF7(),getF8());  TrafficController.instance().sendPacket(result,1);}  }
class C{  protected void java(String className,StringList args){  println("Running " + className);  String[] array=args == null ? new String[0] : args.array();  try {    Method main=Class.forName(className).getMethod("main",String[].class);    invoke(main,null,new Object[]{array});  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void registeredDebugger(String projectTypeId,Debugger debugger){  debuggers.put(projectTypeId,debugger);}  }
class C{  public synchronized void pack(JarInputStream in,OutputStream out) throws IOException {  assert (Utils.currentInstance.get() == null);  boolean needUTC=!props.getBoolean(Utils.PACK_DEFAULT_TIMEZONE);  try {    Utils.currentInstance.set(this);    if (needUTC) {      Utils.changeDefaultTimeZoneToUtc();    }    if ("0".equals(props.getProperty(Pack200.Packer.EFFORT))) {      Utils.copyJarFile(in,out);    } else {      (new DoPack()).run(in,out);    }  }  finally {    Utils.currentInstance.set(null);    if (needUTC) {      Utils.restoreDefaultTimeZone();    }    in.close();  }}  }
class C{  void deleteNote(long id,DBStatus forceDBStatus){  SQLiteDatabase db=this.getWritableDatabase();  db.delete(table_notes,key_id + " = ? AND " + key_status+ " = ?",new String[]{String.valueOf(id),forceDBStatus.getTitle()});  db.close();}  }
class C{  public FileData(byte[] bodyHash,File file){  mBodyFile=file;  setBodyHash(bodyHash);  setSize((int)file.length());}  }
class C{  public ODE(int dependent){  this.dependent=dependent;}  }
class C{  public void storageViewAddStoragePorts(URI vplexURI,URI exportURI,URI maskURI,List<URI> targetURIs,String stepId) throws DeviceControllerException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);    ExportGroup exportGroup=getDataObject(ExportGroup.class,exportURI,_dbClient);    VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);    List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup,vplexURI);    for (    ExportMask exportMask : exportMasks) {      if (maskURI != null && !exportMask.getId().equals(maskURI)) {        continue;      }      ArrayList<URI> filteredTargetURIs=new ArrayList<URI>();      if (exportMask.getZoningMap() != null) {        Set<String> zoningMapTargets=BlockStorageScheduler.getTargetIdsFromAssignments(exportMask.getZoningMap());        List<URI> zoningMapTargetURIs=StringSetUtil.stringSetToUriList(zoningMapTargets);        if (targetURIs == null || targetURIs.isEmpty()) {          if (zoningMapTargetURIs != null && !zoningMapTargetURIs.isEmpty()) {            filteredTargetURIs.addAll(zoningMapTargetURIs);          }        } else {          for (          URI targetURI : targetURIs) {            if (zoningMapTargetURIs.contains(targetURI)) {              filteredTargetURIs.add(targetURI);            }          }        }      }      if (filteredTargetURIs != null && filteredTargetURIs.isEmpty() == false) {        List<PortInfo> targetPortInfos=new ArrayList<PortInfo>();        List<URI> targetsAddedToStorageView=new ArrayList<URI>();        for (        URI target : filteredTargetURIs) {          if (exportMask.getStoragePorts().contains(target.toString())) {            continue;          }          StoragePort port=getDataObject(StoragePort.class,target,_dbClient);          PortInfo pi=new PortInfo(port.getPortNetworkId().toUpperCase().replaceAll(":",""),null,port.getPortName(),null);          targetPortInfos.add(pi);          targetsAddedToStorageView.add(target);        }        if (!targetPortInfos.isEmpty()) {          client.addTargetsToStorageView(exportMask.getMaskName(),targetPortInfos);          for (          URI target : targetsAddedToStorageView) {            exportMask.addTarget(target);          }          _dbClient.updateObject(exportMask);        }      }    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  VPlexApiException vae) {    _log.error("Exception adding storagePorts to Storage View: " + vae.getMessage(),vae);    WorkflowStepCompleter.stepFailed(stepId,vae);  }catch (  Exception ex) {    _log.error("Exception adding storagePorts to Storage View: " + ex.getMessage(),ex);    String opName=ResourceOperationTypeEnum.ADD_STORAGE_VIEW_STORAGEPORTS.getName();    ServiceError serviceError=VPlexApiException.errors.storageViewAddStoragePortFailed(opName,ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  public void parseReturnByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  stream.nextWord();  stream.skipWhitespace();  dataStream.writeLong(network.createVertex(Primitive.RETURN).getId());  if (stream.peek() != ';') {    boolean with=stream.peekWord().toLowerCase().equals(WITH);    if (!with) {      parseElementByteCode(stream,dataStream,elements,debug,network);      stream.skipWhitespace();      with=stream.peekWord().toLowerCase().equals(WITH);    }    if (with) {      stream.skipWord();      stream.skipWhitespace();      dataStream.writeLong(network.createVertex(Primitive.ARGUMENT).getId());      if (stream.peek() == '(') {        stream.skip();        stream.skipWhitespace();        parseElementByteCode(stream,dataStream,elements,debug,network);        stream.skipWhitespace();        while (stream.peek() == ',') {          stream.skip();          stream.skipWhitespace();          parseElementByteCode(stream,dataStream,elements,debug,network);        }        ensureNext(')',stream);      } else {        parseElementByteCode(stream,dataStream,elements,debug,network);      }      dataStream.writeLong(0l);    }  }  dataStream.writeLong(0l);  ensureNext(';',stream);}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("NumericOperator ( ").append("type = ").append(this.type).append(TAB).append("value = ").append(this.value).append(TAB).append(" )");  return retValue.toString();}  }
class C{  public DynamicColumnData(final TreeColumn treeColumn,final String preferredLength){  this(treeColumn,DynamicLengthFormat.parse(preferredLength),new DynamicLength(0d,DynamicLengthMeasure.PIXEL));}  }
class C{  public String toString(){  if (m_missingProperties == null) {    return "No properties missing";  }  StringBuffer sb=new StringBuffer("The following [");  sb.append(m_missingProperties.size());  sb.append("] properties are missing: ");  int missingPropSize=m_missingProperties.size();  for (int ii=0; ii < missingPropSize; ii++) {    sb.append(m_missingProperties.elementAt(ii));    sb.append(", ");  }  sb.append('.');  return sb.toString();}  }
class C{  public Matrix4x3d scaling(double x,double y,double z){  m00=x;  m01=0.0;  m02=0.0;  m10=0.0;  m11=y;  m12=0.0;  m20=0.0;  m21=0.0;  m22=z;  m30=0.0;  m31=0.0;  m32=0.0;  properties=0;  return this;}  }
class C{  private Id<TransitStopFacility> createStopFacilityId(String stopFacilityIdStr){  return Id.create(stopFacilityIdStr,TransitStopFacility.class);}  }
class C{  public DrawerBuilder withAccountHeader(@NonNull AccountHeader accountHeader){  return withAccountHeader(accountHeader,false);}  }
class C{  private void uploadReviews(ContentProviderClient cp) throws RemoteException {  String[] proj={alias(ReviewsJoinRestaurants.REVIEW__ID),alias(ReviewsJoinRestaurants.REVIEW_GLOBAL_ID),ReviewsJoinRestaurants.RESTAURANT_GLOBAL_ID + " AS " + Reviews.RESTAURANT_ID,Reviews.COMMENTS,alias(ReviewsJoinRestaurants.REVIEW_RATING),Reviews.WRITTEN_ON,alias(ReviewsJoinRestaurants.REVIEW_STATUS_ID),alias(ReviewsJoinRestaurants.REVIEW_DIRTY),alias(ReviewsJoinRestaurants.REVIEW_VERSION)};  String sel=Reviews.TYPE_ID + " = ? AND " + ReviewsJoinRestaurants.REVIEW_DIRTY+ " = 1";  String[] args={String.valueOf(PRIVATE.id)};  List<Review> reviews=Reviews.from(cp.query(ReviewsJoinRestaurants.CONTENT_URI,proj,sel,args,null));  if (reviews != null) {    response(Server.syncReviews(reviews),cp,REVIEWS_URI);  }}  }
class C{  public void exportCertificate(BurpCertificate certificate,String filename){  try {    fileHelper.exportPEMObject(certificate.getCertificate(),filename);    setStatus("Certificate exported.");  } catch (  IOException e) {    setStatus("Error exporting certificate (" + e.getMessage() + ")");    e.printStackTrace();  }catch (  Exception e) {    setStatus("Error (" + e.getMessage() + ")");  }}  }
class C{  public static boolean isCglibProxyClassName(String className){  return (className != null && className.contains(CGLIB_CLASS_SEPARATOR));}  }
class C{  public Boolean isSeSparseDiskSupported(){  return seSparseDiskSupported;}  }
class C{  public DrawerBuilder withAdapter(@NonNull FastAdapter<IDrawerItem> adapter){  this.mAdapter=adapter;  mHeaderAdapter.wrap(mItemAdapter.wrap(mFooterAdapter.wrap(mAdapter)));  return this;}  }
class C{  public Vector2 sub(float x,float y){  this.x-=x;  this.y-=y;  return this;}  }
class C{  public Plane(Vector3 normal,Vector3 point){  this.normal.set(normal).nor();  this.d=-this.normal.dot(point);}  }
class C{  protected void paint(SeaGlassContext context,Graphics g){  JTextComponent c=getComponent();  super.paint(g,c);}  }
class C{  public ClientResponse put(URI url,MultivaluedMap<String,String> queryParams,String body){  WebResource r=_client.resource(url);  if (queryParams != null && queryParams.size() > 0) {    WebResource.Builder rb=r.queryParams(queryParams).header("x-isi-ifs-target-type","container").header("x-isi-ifs-access-control","0755");    return rb.put(ClientResponse.class,body);  } else {    return r.header("x-isi-ifs-target-type","container").header("x-isi-ifs-access-control","0755").put(ClientResponse.class,body);  }}  }
class C{  private boolean startTcpServer(InetAddress hostAddr,int port,GridNioServerListener<GridClientMessage> lsnr,GridNioParser parser,boolean tcpNoDelay,@Nullable SSLContext sslCtx,boolean wantClientAuth,boolean needClientAuth){  try {    GridNioFilter codec=new GridNioCodecFilter(parser,log,false);    String gridName="router-" + id;    GridNioFilter[] filters;    if (sslCtx != null) {      GridNioSslFilter sslFilter=new GridNioSslFilter(sslCtx,false,ByteOrder.nativeOrder(),log);      sslFilter.wantClientAuth(wantClientAuth);      sslFilter.needClientAuth(needClientAuth);      filters=new GridNioFilter[]{codec,sslFilter};    } else     filters=new GridNioFilter[]{codec};    srv=GridNioServer.<GridClientMessage>builder().address(hostAddr).port(port).listener(lsnr).logger(log).selectorCount(Runtime.getRuntime().availableProcessors()).gridName(gridName).tcpNoDelay(tcpNoDelay).directBuffer(false).byteOrder(ByteOrder.nativeOrder()).socketSendBufferSize(0).socketReceiveBufferSize(0).sendQueueLimit(0).filters(filters).idleTimeout(cfg.getIdleTimeout()).build();    srv.start();    return true;  } catch (  IgniteCheckedException e) {    if (log.isDebugEnabled())     log.debug("Failed to start TCP router protocol on port " + port + ": "+ e.getMessage());    srv=null;    return false;  }}  }
class C{  public LexerNode createLexerNode(){  return new LexerNode(false);}  }
class C{  public CallRequest clone(){  CallRequest result=new CallRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  if (MethodsToCall != null) {    result.MethodsToCall=new CallMethodRequest[MethodsToCall.length];    for (int i=0; i < MethodsToCall.length; i++)     result.MethodsToCall[i]=MethodsToCall[i].clone();  }  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.PARAMETER;}  }
class C{  private void updateBluetoothStatusDisplay(){  final BluetoothAdapter bluetoothAdapter=BluetoothAdapter.getDefaultAdapter();  bluetooth.setText(Boolean.toString(bluetoothAdapter != null && bluetoothAdapter.isEnabled()));}  }
class C{  public JSONObject offlineDetect(byte[] image,String jsonResult,PostParameters params) throws FaceppParseException {  if (params == null)   params=new PostParameters();  params.setImg(image);  params.setMode("offline");  params.addAttribute("offline_result",jsonResult);  return request("detection","detect",params);}  }
class C{  public void disableIdmAuthStats(String tenantName) throws Exception {  getService().disableIdmAuthStats(tenantName,this.getServiceContext());}  }
class C{  public T caseCompoundExpr_(CompoundExpr_ object){  return null;}  }
class C{  public boolean login() throws LoginException {  if (userProvider == null) {    throw new LoginException("Unable to locate the LDAP directory service");  }  if (debug) {    System.out.println("\t\t[LdapLoginModule] user provider: " + userProvider);  }  if (tryFirstPass) {    try {      attemptAuthentication(true);      succeeded=true;      if (debug) {        System.out.println("\t\t[LdapLoginModule] " + "tryFirstPass succeeded");      }      return true;    } catch (    LoginException le) {      cleanState();      if (debug) {        System.out.println("\t\t[LdapLoginModule] " + "tryFirstPass failed: " + le.toString());      }    }  } else   if (useFirstPass) {    try {      attemptAuthentication(true);      succeeded=true;      if (debug) {        System.out.println("\t\t[LdapLoginModule] " + "useFirstPass succeeded");      }      return true;    } catch (    LoginException le) {      cleanState();      if (debug) {        System.out.println("\t\t[LdapLoginModule] " + "useFirstPass failed");      }      throw le;    }  }  try {    attemptAuthentication(false);    succeeded=true;    if (debug) {      System.out.println("\t\t[LdapLoginModule] " + "authentication succeeded");    }    return true;  } catch (  LoginException le) {    cleanState();    if (debug) {      System.out.println("\t\t[LdapLoginModule] " + "authentication failed");    }    throw le;  }}  }
class C{  public boolean isConcurrent(){  return true;}  }
class C{  public DiskUsageStats(final long usedBytes,final long totalBytes,final String used,final String total,final double percentUsed){  this.usedBytes=usedBytes;  this.totalBytes=totalBytes;  this.used=used;  this.total=total;  this.percentUsed=percentUsed;}  }
class C{  public String toFormattedString(){  return "CUDA resource descriptor:\n    " + createString("\n    ");}  }
class C{  final public void println(int v){  Writer out=this.out;  if (out == null)   return;  print(v);  try {    out.write(_newline,0,_newline.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public XmlToken peek() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }switch (p) {case PEEKED_ELEMENT_BEGIN:    return XmlToken.ELEMENT_BEGIN;case PEEKED_ELEMENT_NAME:  return XmlToken.ELEMENT_NAME;case PEEKED_ELEMENT_END:return XmlToken.ELEMENT_END;case PEEKED_ATTRIBUTE_NAME:return XmlToken.ATTRIBUTE_NAME;case PEEKED_DOUBLE_QUOTED:case PEEKED_SINGLE_QUOTED:return XmlToken.ATTRIBUTE_VALUE;case PEEKED_ELEMENT_TEXT_CONTENT:case PEEKED_CDATA:return XmlToken.ELEMENT_TEXT_CONTENT;case PEEKED_EOF:return XmlToken.END_OF_DOCUMENT;default :throw new AssertionError("Unknown XmlToken: Peeked = " + p);}}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  public List<HostScsiDisk> listDisks(Datastore datastore){  List<HostScsiDisk> disks=Lists.newArrayList();  for (  HostScsiDisk disk : getDisksByPartition(datastore).values()) {    if (disk != null) {      disks.add(disk);    }  }  return disks;}  }
class C{  public void sort(){  Arrays.sort(data,0,size);}  }
class C{  public String buildJson() throws ODataRenderException {  LOG.debug("Start building Json service root document");  try (ByteArrayOutputStream stream=new ByteArrayOutputStream()){    JsonGenerator jsonGenerator=JSON_FACTORY.createGenerator(stream,JsonEncoding.UTF8);    jsonGenerator.writeStartObject();    jsonGenerator.writeStringField(CONTEXT,getContextURL(uri,entityDataModel));    jsonGenerator.writeArrayFieldStart(VALUE);    List<EntitySet> entities=entityDataModel.getEntityContainer().getEntitySets();    for (    EntitySet entity : entities) {      if (entity.isIncludedInServiceDocument()) {        writeObject(jsonGenerator,entity);      }    }    List<Singleton> singletons=entityDataModel.getEntityContainer().getSingletons();    for (    Singleton singleton : singletons) {      writeObject(jsonGenerator,singleton);    }    jsonGenerator.writeEndArray();    jsonGenerator.writeEndObject();    jsonGenerator.close();    return stream.toString(StandardCharsets.UTF_8.name());  } catch (  IOException e) {    throw new ODataRenderException("It is unable to render service document",e);  }}  }
class C{  public KeyUri(String uri,byte[] address,int port){  if (uri == null) {    throw new NullPointerException("URI must not be null");  } else   if (address == null) {    throw new NullPointerException("address must not be null");  } else   if (port < 0 || port > MAX_PORT_NO) {    throw new IllegalArgumentException("port must be an unsigned 16 bit int");  } else {    this.uri=uri;    this.address=address;    this.port=port;    this.hash=(port * 31 + uri.hashCode()) * 31 + Arrays.hashCode(address);  }}  }
class C{  public Builder b(){  this.withBorder=true;  this.borderSet=true;  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.DECIMAL_ESCAPE_SEQUENCE__CHARACTER:    setCharacter(CHARACTER_EDEFAULT);  return;case RegularExpressionPackage.DECIMAL_ESCAPE_SEQUENCE__SEQUENCE:setSequence(SEQUENCE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static int[] findLiveItems(XYDataset dataset,int series,double xLow,double xHigh){  int i0=findLiveItemsLowerBound(dataset,series,xLow,xHigh);  int i1=findLiveItemsUpperBound(dataset,series,xLow,xHigh);  if (i0 > i1) {    i0=i1;  }  return new int[]{i0,i1};}  }
class C{  public NoQueueServersAvailableException(){}  }
class C{  public String sprintf(final Object[] o){  final Iterator<ConversionSpecification> e=vFmt.iterator();  ConversionSpecification cs;  char c;  int i=0;  final StringBuilder sb=new StringBuilder();  while (e.hasNext()) {    cs=e.next();    c=cs.getConversionCharacter();    if (c == '\0') {      sb.append(cs.getLiteral());    } else     if (c == '%') {      sb.append('%');    } else {      if (cs.isPositionalSpecification()) {        i=cs.getArgumentPosition() - 1;        if (cs.isPositionalFieldWidth()) {          final int ifw=cs.getArgumentPositionForFieldWidth() - 1;          cs.setFieldWidthWithArg((Integer)o[ifw]);        }        if (cs.isPositionalPrecision()) {          final int ipr=cs.getArgumentPositionForPrecision() - 1;          cs.setPrecisionWithArg((Integer)o[ipr]);        }      } else {        if (cs.isVariableFieldWidth()) {          cs.setFieldWidthWithArg((Integer)o[i]);          i++;        }        if (cs.isVariablePrecision()) {          cs.setPrecisionWithArg((Integer)o[i]);          i++;        }      }      if (o[i] instanceof Byte) {        sb.append(cs.internalsprintf(((Number)o[i]).byteValue()));      } else       if (o[i] instanceof Short) {        sb.append(cs.internalsprintf(((Number)o[i]).shortValue()));      } else       if (o[i] instanceof Integer) {        sb.append(cs.internalsprintf(((Number)o[i]).intValue()));      } else       if (o[i] instanceof Long) {        sb.append(cs.internalsprintf(((Number)o[i]).longValue()));      } else       if (o[i] instanceof Float) {        sb.append(cs.internalsprintf(((Number)o[i]).floatValue()));      } else       if (o[i] instanceof Double) {        sb.append(cs.internalsprintf(((Number)o[i]).doubleValue()));      } else       if (o[i] instanceof Character) {        sb.append(cs.internalsprintf(((Character)o[i]).charValue()));      } else       if (o[i] instanceof String) {        sb.append(cs.internalsprintf((String)o[i]));      } else {        sb.append(cs.internalsprintf(o[i]));      }      if (!cs.isPositionalSpecification()) {        i++;      }    }  }  return sb.toString();}  }
class C{  public ListBuffer<A> appendList(List<A> xs){  while (xs.nonEmpty()) {    append(xs.head);    xs=xs.tail;  }  return this;}  }
class C{  public static void openContacts(Context context){  Intent intent=new Intent(Intent.ACTION_VIEW,ContactsContract.Contacts.CONTENT_URI);  context.startActivity(intent);}  }
class C{  static AbuseMetrics computeAbuseMetricsFromAccess(Map<UUID,AccessInformation> requests,int skip,int top){  AbuseMetrics abuse=new AbuseMetrics();  Map<String,Long> user_map=new TreeMap<String,Long>();  Map<String,Long> ip_map=new TreeMap<String,Long>();  Map<String,Long> requests_map=new TreeMap<String,Long>();  SortedSet<Entry<UUID,AccessInformation>> accesses=entriesSortedByValues(requests);  Iterator<Map.Entry<UUID,AccessInformation>> iterator=accesses.iterator();  long newest=Long.MIN_VALUE;  long oldest=Long.MAX_VALUE;  long longest_request=Long.MIN_VALUE;  long count=0;  while (iterator.hasNext()) {    if (skip-- > 0)     continue;    Map.Entry<UUID,AccessInformation> entry=iterator.next();    AccessInformation ai=entry.getValue();    if (ai == null)     continue;    Long timestamp=ai.getStartTimestamp();    long delay=ai.getDurationNs();    if (timestamp > newest)     newest=timestamp;    if (timestamp < oldest)     oldest=timestamp;    if (longest_request < delay)     longest_request=delay;    count++;    long user_count=1;    String username=ai.getUsername();    if (username == null)     username=UNKNOWN_USER;    if (user_map.containsKey(username))     user_count+=user_map.get(username);    user_map.put(username,user_count);    long ip_count=1;    String ip=ai.getRemoteAddress();    if (ip == null)     ip=UNKNOWN_IP;    if (ip_map.containsKey(ip))     ip_count+=ip_map.get(ip);    ip_map.put(ip,ip_count);    String request=ai.getRequest();    Long old_request=Long.MIN_VALUE;    if (request == null)     continue;    if (requests_map.containsKey(request))     old_request=requests_map.get(request);    if (delay > old_request)     requests_map.put(request,delay);  }  abuse.setPeriod(newest - oldest);  abuse.setCalls(count);  SortedSet<Map.Entry<String,Long>> sorted_users_calls=entriesSortedByValues(user_map);  Iterator<Map.Entry<String,Long>> user_it=sorted_users_calls.iterator();  abuse.setAbusiveUsers(new LinkedHashMap<String,Long>());  int top_count=0;  while (user_it.hasNext() && top_count++ < top) {    Map.Entry<String,Long> entry=user_it.next();    abuse.getAbusiveUsers().put(entry.getKey(),entry.getValue());  }  SortedSet<Map.Entry<String,Long>> sorted_ip_calls=entriesSortedByValues(ip_map);  Iterator<Map.Entry<String,Long>> ip_it=sorted_ip_calls.iterator();  abuse.setAbusiveIp(new LinkedHashMap<String,Long>());  top_count=0;  while (ip_it.hasNext() && top_count++ < top) {    Map.Entry<String,Long> entry=ip_it.next();    abuse.getAbusiveIp().put(entry.getKey(),entry.getValue());  }  SortedSet<Map.Entry<String,Long>> sorted_requests_calls=entriesSortedByValues(requests_map);  Iterator<Map.Entry<String,Long>> requests_it=sorted_requests_calls.iterator();  abuse.setAbusiveRequests(new LinkedHashMap<String,Long>());  top_count=0;  while (requests_it.hasNext() && top_count++ < top) {    Map.Entry<String,Long> entry=requests_it.next();    abuse.getAbusiveRequests().put(entry.getKey(),entry.getValue());  }  return abuse;}  }
class C{  public static TetradMatrix constructGramMatrix(List<Kernel> kernels,DataSet dataset,List<Node> nodes){  int m=dataset.getNumRows();  TetradMatrix gram=new TetradMatrix(m,m);  for (int k=0; k < nodes.size(); k++) {    Node node=nodes.get(k);    int col=dataset.getColumn(node);    Kernel kernel=kernels.get(k);    for (int i=0; i < m; i++) {      for (int j=i; j < m; j++) {        double keval=kernel.eval(dataset.getDouble(i,col),dataset.getDouble(j,col));        if (k == 0) {          gram.set(i,j,keval);        } else {          keval*=gram.get(i,j);          gram.set(i,j,keval);        }      }    }  }  return gram;}  }
class C{  public static final long total(){  return getStrategy().total();}  }
class C{  public boolean doesEnable(ConcreteListArgumentValue testMe){  for (int i=0; i < testMe.args.size(); i++) {    if (!this.args.contains(testMe.args.get(i))) {      return false;    }  }  return true;}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  private IsNullValueFrame replaceValues(IsNullValueFrame origFrame,IsNullValueFrame frame,ValueNumber replaceMe,ValueNumberFrame prevVnaFrame,ValueNumberFrame targetVnaFrame,IsNullValue replacementValue){  if (!targetVnaFrame.isValid()) {    throw new IllegalArgumentException("Invalid frame in " + methodGen.getClassName() + "."+ methodGen.getName()+ " : "+ methodGen.getSignature());  }  frame=modifyFrame(origFrame,frame);  assert frame.getNumSlots() == targetVnaFrame.getNumSlots() : " frame has " + frame.getNumSlots() + ", target has "+ targetVnaFrame.getNumSlots()+ " in  "+ classAndMethod;  final int targetNumSlots=targetVnaFrame.getNumSlots();  final int prefixNumSlots=Math.min(frame.getNumSlots(),prevVnaFrame.getNumSlots());  if (trackValueNumbers) {    AvailableLoad loadForV=prevVnaFrame.getLoad(replaceMe);    if (DEBUG && loadForV != null) {      System.out.println("For " + replaceMe + " availableLoad is "+ loadForV);      ValueNumber[] matchingValueNumbers=targetVnaFrame.getAvailableLoad(loadForV);      if (matchingValueNumbers != null) {        for (        ValueNumber v2 : matchingValueNumbers) {          System.out.println("  matches " + v2);        }      }    }    if (loadForV != null) {      ValueNumber[] matchingValueNumbers=targetVnaFrame.getAvailableLoad(loadForV);      if (matchingValueNumbers != null) {        for (        ValueNumber v2 : matchingValueNumbers) {          if (!replaceMe.equals(v2)) {            frame.setKnownValue(v2,replacementValue);            if (DEBUG) {              System.out.println("For " + loadForV + " switch from "+ replaceMe+ " to "+ v2);            }          }        }      }    }    frame.setKnownValue(replaceMe,replacementValue);  }  for (int i=0; i < prefixNumSlots; ++i) {    if (prevVnaFrame.getValue(i).equals(replaceMe)) {      ValueNumber corresponding=targetVnaFrame.getValue(i);      for (int j=0; j < targetNumSlots; ++j) {        if (targetVnaFrame.getValue(j).equals(corresponding)) {          frame.setValue(j,replacementValue);        }      }    }  }  return frame;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.ANY_TYPE___IS_FINAL:    return isFinal();}return super.eInvoke(operationID,arguments);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.138 -0500",hash_original_method="57B02BE93AE841112E3F3B64D0EF8580",hash_generated_method="57B02BE93AE841112E3F3B64D0EF8580") void resetId(){  id=NativeCrypto.SSL_SESSION_session_id(sslSessionNativePointer);}  }
class C{  public void dispatchToEvents(int nodeHandle,org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  DTMTreeWalker treeWalker=m_walker;  ContentHandler prevCH=treeWalker.getcontentHandler();  if (null != prevCH) {    treeWalker=new DTMTreeWalker();  }  treeWalker.setcontentHandler(ch);  treeWalker.setDTM(this);  try {    treeWalker.traverse(nodeHandle);  }  finally {    treeWalker.setcontentHandler(null);  }}  }
class C{  public boolean differs(OutputTrace<?> other){  for (  Integer statement : trace.keySet()) {    if (other.trace.containsKey(statement)) {      for (      Integer var : trace.get(statement).keySet()) {        if (trace.get(statement).get(var).differs(other.trace.get(statement).get(var)))         return true;      }    }  }  return false;}  }
class C{  @Around("execution(* org.yes.cart.service.payment.impl.PaymentProcessorImpl.shipmentComplete(..))") public Object doShipmentComplete(final ProceedingJoinPoint pjp) throws Throwable {  final String rez=(String)pjp.proceed();  doNotify(pjp,rez,shipmentShopperTemplates,shipmentAdminTemplates);  return rez;}  }
class C{  private void prepareVolumeData() throws Exception {  log.info("Preparing Volumes for FullCopyVolumeReplicaStateMigration");  for (int i=0; i < INSTANCES_TO_CREATE; i++) {    Volume cloneVol=new Volume();    URI cloneURI=URIUtil.createId(Volume.class);    URI sourceURI=URIUtil.createId(Volume.class);    cloneVol.setId(cloneURI);    cloneVol.setAssociatedSourceVolume(sourceURI);    _dbClient.createObject(cloneVol);    cloneURIs.add(cloneURI);  }}  }
class C{  public img(String src,int border){  setSrc(src);  setBorder(border);}  }
class C{  public static double roundDouble(double value,int afterDecimalPoint){  double mask=Math.pow(10.0,(double)afterDecimalPoint);  return (double)(Math.round(value * mask)) / mask;}  }
class C{  @Override public void threadFinished(ProgressThread thread){  if (loading) {    ((CardLayout)(getLayout())).last(LoadingContentPane.this);    loading=false;  }  thread.removeProgressThreadListener(this);}  }
class C{  private int usedIn(List<Statement> stmts){  for (  Tree.Statement stmt : stmts) {    if (stmt instanceof Tree.TypedDeclaration && ((Tree.TypedDeclaration)stmt).getDeclarationModel() == declaration)     return 1;    stmt.visit(this);    if (declaration.isCaptured())     break;  }  boolean used=declaration.isCaptured();  FunctionOrValue fov=((FunctionOrValue)declaration);  fov.setCaptured(false);  if (fov instanceof Value) {    Value val=(Value)fov;    if (val.getSetter() != null)     val.getSetter().setCaptured(false);  }  return used ? 1 : 0;}  }
class C{  protected Anonymous_action_2_Impl(){  super();}  }
class C{  public final CC alignX(String align){  hor.setAlign(ConstraintParser.parseUnitValueOrAlign(align,true,null));  return this;}  }
class C{  public boolean containsValue(Object value){  for (LinkedHashMap.Entry<K,V> e=head; e != null; e=e.after) {    V v=e.value;    if (v == value || (value != null && value.equals(v)))     return true;  }  return false;}  }
class C{  public boolean isIgnoreUnknownTypes(){  return m_ignoreUnknownTypes;}  }
class C{  private StatementPatternNode verifyGraphPattern(final AbstractTripleStore database,final GroupNodeBase<IGroupMemberNode> group,final ServiceParams serviceParams){  final Iterator<Map.Entry<URI,List<TermNode>>> it=serviceParams.iterator();  while (it.hasNext()) {    final URI param=it.next().getKey();    if (SampleParams.LIMIT.equals(param)) {      if (serviceParams.getAsInt(param,null) == null) {        throw new RuntimeException("must provide a value for: " + param);      }    } else     if (SampleParams.SEED.equals(param)) {      if (serviceParams.getAsLong(param,null) == null) {        throw new RuntimeException("must provide a value for: " + param);      }    } else     if (SampleParams.SAMPLE_TYPE.equals(param)) {      if (serviceParams.getAsString(param,null) == null) {        throw new RuntimeException("must provide a value for: " + param);      }    } else {      throw new RuntimeException("unrecognized param: " + param);    }  }  StatementPatternNode sp=null;  for (  IGroupMemberNode node : group) {    if (!(node instanceof StatementPatternNode)) {      throw new RuntimeException("only statement patterns allowed");    }    final StatementPatternNode tmp=(StatementPatternNode)node;    if (tmp.s().isConstant() && BD.SERVICE_PARAM.equals(tmp.s().getValue())) {      continue;    }    if (sp != null) {      throw new RuntimeException("group must contain a single statement pattern");    }    sp=tmp;  }  return sp;}  }
class C{  public static void main(String[] args) throws Exception {  System.err.println("Running Jetty 6.1.26");  final Configs configs=new Configs();  configs.validation();  server=new Server();  initConnnector(server,configs);  initWebappContext(server,configs);  if (configs.getJettyXML() != null && !"".equals(configs.getJettyXML().trim())) {    System.err.println("Loading Jetty.xml:" + configs.getJettyXML());    try {      XmlConfiguration configuration=new XmlConfiguration(new File(configs.getJettyXML()).toURI().toURL());      configuration.configure(server);    } catch (    Exception ex) {      System.err.println("Exception happened when loading Jetty.xml:");      ex.printStackTrace();    }  }  if (configs.getEnablescanner())   initScanner(web,configs);  initEclipseListener(configs);  initCommandListener(configs);  try {    server.start();    server.join();  } catch (  Exception e) {    e.printStackTrace();    System.exit(100);  }  return;}  }
class C{  public static int toInt(short[] shorts){  return toInt(shorts[0],shorts[1]);}  }
class C{  protected void extractContentTypeParts(String userAgent){  getContentType(userAgent);  if (contentType == null) {    return;  }  int i=0;  int len=contentType.length();  loop1:   while (i < len) {switch (contentType.charAt(i)) {case ' ':case ';':      break loop1;  }  i++;}if (i == len) {  contentTypeMediaType=contentType;} else {  contentTypeMediaType=contentType.substring(0,i);}for (; ; ) {  while (i < len && contentType.charAt(i) != ';') {    i++;  }  if (i == len) {    return;  }  i++;  while (i < len && contentType.charAt(i) == ' ') {    i++;  }  if (i >= len - 8) {    return;  }  if (contentType.charAt(i++) == 'c') {    if (contentType.charAt(i++) != 'h')     continue;    if (contentType.charAt(i++) != 'a')     continue;    if (contentType.charAt(i++) != 'r')     continue;    if (contentType.charAt(i++) != 's')     continue;    if (contentType.charAt(i++) != 'e')     continue;    if (contentType.charAt(i++) != 't')     continue;    if (contentType.charAt(i++) != '=')     continue;    int j=i;    loop2:     while (i < len) {switch (contentType.charAt(i)) {case ' ':case ';':        break loop2;    }    i++;  }  contentTypeCharset=contentType.substring(j,i);  return;}}}  }
class C{  public static void main(final String... args) throws IOException {  new FtCli(new TkApp(new DyBase()),args).start(Exit.NEVER);}  }
class C{  public StarsLayer(String starsFileName){  this.initialize(starsFileName,null);}  }
class C{  public static String unifiedResourcePath(SolrResourceLoader loader){  return (loader instanceof ZkSolrResourceLoader) ? ((ZkSolrResourceLoader)loader).getConfigSetZkPath() + "/" : loader.getConfigDir() + File.separator;}  }
class C{  public RunListener createListener(){  return new Listener();}  }
class C{  public void paintComponent(Graphics g){  super.paintComponent(g);  paint((Graphics2D)g);}  }
class C{  public static <V>boolean isEmpty(Collection<V> c){  return (c == null || c.size() == 0);}  }
class C{  public void testParseAndSerialize() throws InvalidProtocolBufferException {  UnittestProto.TestAllTypes tV2=UnittestProto.TestAllTypes.parseFrom(TEST_ALL_TYPES_SERIALIZED_WITH_ILLEGAL_UTF8);  ByteString bytes=tV2.toByteString();  assertEquals(TEST_ALL_TYPES_SERIALIZED_WITH_ILLEGAL_UTF8,bytes);  tV2.getOptionalString();  bytes=tV2.toByteString();  assertEquals(TEST_ALL_TYPES_SERIALIZED_WITH_ILLEGAL_UTF8,bytes);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String qualifiedName="econm:local";  Document doc;  Attr newAttr;  String attrName;  doc=(Document)load("staffNS",false);  newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);  attrName=newAttr.getName();  assertEquals("throw_Equals",qualifiedName,attrName);}  }
class C{  public static boolean filesExistOnDestButNotSrc(Configuration conf,Path src,Path dest,Optional<PathFilter> filter) throws IOException {  Set<FileStatus> srcFileStatuses=getFileStatusesRecursive(conf,src,filter);  Set<FileStatus> destFileStatuses=getFileStatusesRecursive(conf,dest,filter);  Map<String,Long> srcFileSizes=null;  Map<String,Long> destFileSizes=null;  try {    srcFileSizes=getRelPathToSizes(src,srcFileStatuses);    destFileSizes=getRelPathToSizes(dest,destFileStatuses);  } catch (  ArgumentException e) {    throw new IOException("Invalid file statuses!",e);  }  for (  String file : destFileSizes.keySet()) {    if (!srcFileSizes.containsKey(file)) {      LOG.warn(String.format("%s exists on %s but not in %s",file,dest,src));      return true;    }  }  return false;}  }
class C{  private void checkLimit() throws Exception {  ensureCacheStarted();  Integer children=null;  if (_basePathCache != null) {    List<ChildData> childData=_basePathCache.getCurrentData();    if (childData != null) {      children=childData.size();    }  }  if (children == null) {    _log.warn("{}: cached child node data is not available; falling back to checkExists",_basePath);    Stat stat=_zkClient.checkExists().forPath(_basePath);    if (stat != null) {      children=stat.getNumChildren();    }  }  if (children != null) {    _log.debug("{}: current nodes = {}; maxNodes = {}",Arrays.asList(_basePath,children.toString(),Long.toString(_maxNodes)).toArray());    if (children >= _maxNodes) {      _log.warn("{}: rejecting create because limit of {} has been reached",_basePath,_maxNodes);      throw new DataManagerFullException();    }  }}  }
class C{  @CallSuper public void onResume(){  mRunning=true;}  }
class C{  private String cannonicalPage(String url){  String cannonical="";  if (url.startsWith(HTTP_PROTOCOL)) {    url=url.substring(HTTP_PROTOCOL.length());  } else   if (url.startsWith(HTTPS_PROTOCOL)) {    url=url.substring(HTTPS_PROTOCOL.length());  }  int urlLength=url.length();  for (int i=0; i < urlLength; i++) {    if (url.charAt(i) != '/')     cannonical+=url.charAt(i); else     break;  }  return cannonical;}  }
class C{  public boolean allowMultipleAdditions(String systemName){  return true;}  }
class C{  protected CommentCollectingScannerFactory(Context context){  super(context);}  }
class C{  public float remove(float key){  float prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public static ClassName generateMigrationName(String packageName,Schema from,Schema to){  return ClassName.get(packageName,String.format(Locale.US,"MigrateV%dToV%d",from.getVersion(),to.getVersion()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:26.783 -0500",hash_original_method="26CED40B1639307872B1DC8622DA2669",hash_generated_method="281EB1EC96DE8B0F1A66E8C14DEC1457") @SuppressWarnings("deprecation") @Deprecated public final void suspend(){  if (suspendHelper()) {    Thread.currentThread().suspend();  }}  }
class C{  protected boolean delete(final String urlhash){  final Iterator<Element<URIMetadataNode>> i=this.resultList.iterator();  Element<URIMetadataNode> entry;  while (i.hasNext()) {    entry=i.next();    if (urlhash.equals(ASCII.String(entry.getElement().url().hash()))) {      i.remove();      return true;    }  }  return false;}  }
class C{  void closePartialConnect(String reason){  close(reason,false,false,false,false);}  }
class C{  private void trigger(int position,float positionOffset){  CircleIndicator.this.mCurItemPosition=position;  CircleIndicator.this.mCurItemPositionOffset=positionOffset;  Log.e("CircleIndicator","onPageScrolled()" + position + ":"+ positionOffset);  requestLayout();  invalidate();}  }
class C{  protected void noRecordSelected(){  m_C_BPartner_ID=0;  p_centerSouth.setOpen(false);  return;}  }
class C{  @SuppressWarnings("unused") public BatchViewAsMultimap(DataflowRunner runner,View.AsMultimap<K,V> transform){  this.runner=runner;}  }
class C{  Ser(byte type,Object object){  this.type=type;  this.object=object;}  }
class C{  protected void reportException(String methodCall,SQLException exception,String sql,long execTime){  log.exceptionOccured(this,methodCall,exception,sql,execTime);}  }
class C{  @Override public Long incr(final byte[] key){  checkIsInMultiOrPipeline();  client.incr(key);  return client.getIntegerReply();}  }
class C{  public void start(){  if (mRunning) {    stop();  }  for (int i=0; i < mDispatchers.length; i++) {    mDispatchers[i]=new SmashDispatcher(mQueue);    mDispatchers[i].start();  }}  }
class C{  public static String longString(int i){  sections.check(i);  return longSections[i];}  }
class C{  private void clear(Element parent){  NodeList children=parent.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node child=children.item(i);    parent.removeChild(child);  }}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  public static void toast(Context context,String str,int lengthShort){  Toast.makeText(context,str,lengthShort).show();}  }
class C{  private boolean isRemovedDefaultSessionToken(String site,String token){  if (removedDefaultTokens == null)   return false;  HashSet<String> removed=removedDefaultTokens.get(site);  if (removed == null || !removed.contains(token))   return false;  return true;}  }
class C{  public boolean validate(String username,String password){  if (username != null && password != null && username.equals(this.username)) {switch (encoding) {case PLAIN_TEXT:      return password.equals(this.password);case MD5:    try {      MessageDigest digest=MessageDigest.getInstance("MD5");      String hashedPassword=getHexString(digest.digest(password.getBytes("UTF-8")));      return hashedPassword.equals(this.password.toUpperCase());    } catch (    UnsupportedEncodingException e) {      throw new UnsupportedOperationException("Unexpected lack of UTF-8 support.",e);    }catch (    NoSuchAlgorithmException e) {      throw new UnsupportedOperationException("Unexpected lack of MD5 support.",e);    }}}return false;}  }
class C{  public int size(int i){  return sizes.get(i);}  }
class C{  public GoogleBaseService(String applicationName,String developerKey,String protocol,String domainName){  this(applicationName,protocol,domainName);}  }
class C{  public void removeTreeSelectionListener(TreeSelectionListener x){  listenerList.remove(TreeSelectionListener.class,x);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public List<FeedItem> _queryFeedSource_FeedItems(long feedSourceId){synchronized (this) {    if (feedSource_FeedItemsQuery == null) {      QueryBuilder<FeedItem> queryBuilder=queryBuilder();      queryBuilder.where(Properties.FeedSourceId.eq(null));      queryBuilder.orderRaw("DATE DESC");      feedSource_FeedItemsQuery=queryBuilder.build();    }  }  Query<FeedItem> query=feedSource_FeedItemsQuery.forCurrentThread();  query.setParameter(0,feedSourceId);  return query.list();}  }
class C{  public boolean isDisabled(){  Boolean result=(Boolean)eval(DISABLED,disabled);  return ((result != null) ? result : false);}  }
class C{  private static PsiElement handleSubscriptionsAndResolveSafely(PsiElement element){  assert element != null;  if (element instanceof PySubscriptionExpression) {    element=((PySubscriptionExpression)element).getRootOperand();  }  element=PyUtil.resolveToTheTop(element);  return element;}  }
class C{  protected void clearEditInfo(){  m_editFlag=FolderEditFlag.NONE;}  }
class C{  public boolean isBodyPartition(){  return (this.partitionPackType == PartitionPackType.BodyPartitionPack);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.EXISTENTIAL_TYPE_REF__WILDCARD:    setWildcard((Wildcard)newValue);  return;case TypeRefsPackage.EXISTENTIAL_TYPE_REF__BOUND_TYPE_VARIABLE:setBoundTypeVariable((TypeVariable)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public T method(String value){  return attr("method",value);}  }
class C{  public void testInit_StartsSyncWhenDataModelUnavailable(){  mFakeSyncManager.setSyncing(false);  when(mMockAppModel.isFullModelAvailable()).thenReturn(false);  mController.init();  assertTrue(mFakeSyncManager.isSyncActive());}  }
class C{  public boolean persist(@NonNull final String module,@NonNull final String key,@NonNull final String value){  return persist(module,key,null,value);}  }
class C{  public void add(Object elem,double key){  int numElem=this.numElem;  Object[] objects=this.objects;  double[] keys=this.keys;  numElem++;  if ((numElem - 1) >= objects.length) {    Object[] temp=new Object[objects.length * 2 + 1];    System.arraycopy(objects,0,temp,0,objects.length);    objects=temp;    double[] temptemp=new double[keys.length * 2 + 1];    System.arraycopy(keys,0,temptemp,0,keys.length);    keys=temptemp;    this.objects=objects;    this.keys=keys;  }  int i=numElem;  while (i > 1 && keys[i / 2 - 1] > key) {    objects[i - 1]=objects[i / 2 - 1];    keys[i - 1]=keys[i / 2 - 1];    i=i / 2;  }  keys[i - 1]=key;  objects[i - 1]=elem;  this.numElem=numElem;}  }
class C{  private void appendMultiPointTaggedText(MultiPoint multipoint,int level,Writer writer) throws IOException {  writer.write("MULTIPOINT ");  appendMultiPointText(multipoint,level,writer);}  }
class C{  protected static Operand follow(Operand use){  if (!use.isRegister()) {    return use;  } else {    RegisterOperand rop=use.asRegister();    Enumeration<RegisterOperand> defs=DefUse.defs(rop.getRegister());    if (!defs.hasMoreElements()) {      return use;    } else {      Operand def=defs.nextElement();      if (defs.hasMoreElements()) {        return def;      } else {        Instruction instr=def.instruction;        if (Move.conforms(instr)) {          return follow(Move.getVal(instr));        } else         if (MIR_Move.conforms(instr)) {          return follow(MIR_Move.getValue(instr));        } else {          return def;        }      }    }  }}  }
class C{  public JsonValue(Map<String,JsonValue> object){  this.object=object;  value=null;  array=null;  isNull=(object == null);}  }
class C{  private void handleEvent(){  Object value=txtName.getText();  bodyFixture.setUserData(value);}  }
class C{  public void testInitString(){  SeeedStudioRfidProtocol instance=new SeeedStudioRfidProtocol();  assertEquals("",instance.initString());}  }
class C{  public void start(){  super.start();  space=new Continuous2D(discretization,width,height);  space.clear();  socialNetwork=new Network(false);  schedule.scheduleOnce(measurer);  addCabspottingPeopleAndRandomSocialNetwork();  createAdversaries();  addJammers();  System.err.println("Start() complete. All input files parsed.");}  }
class C{  protected <T extends DataObject>void checkDuplicateAltId(Class<T> type,String fieldName,String value,String entityName){  checkDuplicateAltId(type,fieldName,value,entityName,null);}  }
class C{  public void validate() throws ConfigException {  ArrayList<Loader> loaders=getLoaders();  if (loaders == null)   throw new IllegalStateException(_L.l("Class loader {0} is closed during initialization.",this));  for (int i=0; i < loaders.size(); i++)   loaders.get(i).validate();}  }
class C{  public void moveIndexToStart(){  this.millisecond=this.segmentStart;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void fillBySource(RPAction action){  if (action.has(EquipActionConsts.BASE_OBJECT)) {    fillBySlotSource(action);  } else   if (action.has(EquipActionConsts.BASE_ITEM)) {    fillByGroundSource(action);  } else {    logger.warn("Source identification missing in " + action);  }}  }
class C{  private static String toAuthorization(String username,String password){  StringBuilder buffer=new StringBuilder();  buffer.append(username).append(':');  if (password != null) {    buffer.append(password);  }  return "Basic " + new String(Base64.encodeBase64(buffer.toString().getBytes()));}  }
class C{  private boolean snapshot(){  try {    final Dimension size=heavyWeightContainer.getPreferredSize();    final int width=size.width;    final int height=size.height;    if (width <= 0 || height <= SHADOW_SIZE) {      return false;    }    final Robot robot=new Robot();    RECT.setBounds(x,y + height - SHADOW_SIZE,width,SHADOW_SIZE);    final BufferedImage hShadowBg=robot.createScreenCapture(RECT);    RECT.setBounds(x + width - SHADOW_SIZE,y,SHADOW_SIZE,height - SHADOW_SIZE);    final BufferedImage vShadowBg=robot.createScreenCapture(RECT);    final JComponent parent=(JComponent)contents.getParent();    parent.putClientProperty(ShadowPopupFactory.PROP_HORIZONTAL_BACKGROUND,hShadowBg);    parent.putClientProperty(ShadowPopupFactory.PROP_VERTICAL_BACKGROUND,vShadowBg);    final Container layeredPane=getLayeredPane();    if (layeredPane == null) {      return false;    }    POINT.x=x;    POINT.y=y;    SwingUtilities.convertPointFromScreen(POINT,layeredPane);    RECT.x=POINT.x;    RECT.y=POINT.y + height - SHADOW_SIZE;    RECT.width=width;    RECT.height=SHADOW_SIZE;    paintShadow(hShadowBg,layeredPane);    RECT.x=POINT.x + width - SHADOW_SIZE;    RECT.y=POINT.y;    RECT.width=SHADOW_SIZE;    RECT.height=height - SHADOW_SIZE;    paintShadow(vShadowBg,layeredPane);  } catch (  final AWTException e) {    return true;  }catch (  final SecurityException e) {    return true;  }  return false;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public static void assertNotEmpty(String message,BufferedImage image){  assertTrue(image.getWidth() > 0);  assertTrue(image.getHeight() > 0);  if (isEmpty(image)) {    fail((String.valueOf(message) + " Image is empty.").trim());  }}  }
class C{  public void writeByteArray(byte[] b){  writeByteArray(b,0,b.length);}  }
class C{  @Override public CacheObject<V> remove(K key){  return cache.remove(key);}  }
class C{  public static java.util.Date convertTimeZone(java.util.Date date,TimeZone fromTZ,TimeZone toTZ){  long fromTZDst=0;  if (fromTZ.inDaylightTime(date)) {    fromTZDst=fromTZ.getDSTSavings();  }  long fromTZOffset=fromTZ.getRawOffset() + fromTZDst;  long toTZDst=0;  if (toTZ.inDaylightTime(date)) {    toTZDst=toTZ.getDSTSavings();  }  long toTZOffset=toTZ.getRawOffset() + toTZDst;  return new java.util.Date(date.getTime() + (toTZOffset - fromTZOffset));}  }
class C{  public void addRow() throws ParseException {  if (!arrayMode)   throw new ParseException("You can add a row only in array mode !");  ((ArrayOfAtoms)formula).addRow();}  }
class C{  @NoInline private static void arraycopyPiecemeal(boolean[] src,int srcIdx,boolean[] dst,int dstIdx,int len){  if (srcIdx < dstIdx) {    srcIdx+=len;    dstIdx+=len;    while (len-- != 0) {      dst[--dstIdx]=src[--srcIdx];    }  } else {    while (len-- != 0) {      dst[dstIdx++]=src[srcIdx++];    }  }}  }
class C{  public boolean isSetPort(){  return EncodingUtils.testBit(__isset_bitfield,__PORT_ISSET_ID);}  }
class C{  public void handleUploadProgress(long currentSize,long totalSize){synchronized (mLock) {    mBroadcaster.broadcastProgressUpdate(mUploadId,currentSize,totalSize);  }}  }
class C{  @Override protected BitmapDrawable doInBackground(Object... params){synchronized (mPauseWorkLock) {    while (mPauseWork && !isCancelled()) {      try {        mPauseWorkLock.wait();      } catch (      InterruptedException e) {      }    }  }  String info=(String)params[0];  RecyclingBitmapDrawable drawable=null;  if (info != null) {    if (!isCancelled() && getAttachedImageView() != null && !mExitTasksEarly) {      try {        drawable=getIconDrawable(info);      } catch (      Throwable ex) {        drawable=null;      }    }  }  if (drawable != null && !mPauseWork) {    mImageCache.addBitmapToCache(info,drawable);  }  return drawable;}  }
class C{  public ODGRectRadiusHandle(Figure owner){  super(owner);}  }
class C{  protected void execute(){}  }
class C{  public void verifyExports(FileShare fileShare,Snapshot snapshot,FileExportUpdateParams fsParam) throws Exception {  fs=fileShare;  param=fsParam;  this.snapshot=snapshot;  ExportRules exportRules=param.getExportRulesToAdd();  validateExportRules(exportRules,ExportOperationType.ADD);  reportErrors(fsParam,ExportOperationType.ADD);  ExportRules exportModifyRules=param.getExportRulesToModify();  validateExportRules(exportModifyRules,ExportOperationType.MODIFY);  reportErrors(fsParam,ExportOperationType.MODIFY);  ExportRules exportDeleteRules=param.getExportRulesToDelete();  validateExportRules(exportDeleteRules,ExportOperationType.DELETE);  reportErrors(fsParam,ExportOperationType.DELETE);}  }
class C{  protected void writeEndParagraph() throws IOException {  writeEndMask(fontMask);  if (inFontTag()) {    endSpanTag();  } else {    write(NEWLINE);  }  writeEndTag("</p>");}  }
class C{  public void removeUpdate(DocumentEvent e){  if (!dirty) {    setDirty(true);  }}  }
class C{  private void sendMessages(){  List<RangzenMessage> messages=new ArrayList<RangzenMessage>();  for (int k=0; k < NUM_MESSAGES_TO_SEND; k++) {    MessageStore.Message messageFromStore=messageStore.getKthMessage(k);    if (messageFromStore == null) {      break;    }    messages.add(new RangzenMessage.Builder().text(messageFromStore.getMessage()).priority(messageFromStore.getPriority()).build());  }  CleartextMessages messagesMessage=new CleartextMessages.Builder().messages(messages).build();  lengthValueWrite(out,messagesMessage);}  }
class C{  public boolean isRecording(){synchronized (mReadyFence) {    return mRunning;  }}  }
class C{  private Option createSingleArgOpt(String shortOpt,String longOpt,String argName,String desc){  return Option.builder(shortOpt).longOpt(longOpt).hasArg().argName(argName).desc(desc).build();}  }
class C{  protected Component createContentPanel(){  JPanel panel=new JPanel(new BorderLayout());  panel.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));  panel.add(new JLabel(resources.getString("AddMediumDialog.label")),BorderLayout.WEST);  medium=new JComboBox();  medium.setEditable(true);  String media=resources.getString("Media.list");  StringTokenizer tokens=new StringTokenizer(media," ");  while (tokens.hasMoreTokens()) {    medium.addItem(tokens.nextToken());  }  panel.add(medium,BorderLayout.CENTER);  return panel;}  }
class C{  public static <I0,I1,I2,O>Function<tuple3<I0,I1,I2>,O> Function(Class<?> theClass,String methodName,Class<?> parameterType0,Class<?> parameterType1,Class<?> parameterType2){  return FunctionUtils.Function(theClass,methodName,parameterType0,parameterType1,parameterType2);}  }
class C{  private static int moveToAPP1EXIF(InputStream is) throws IOException {  if (moveToMarker(is,MARKER_APP1)) {    int length=StreamProcessor.readPackedInt(is,2,false) - 2;    if (length > 6) {      int magic=StreamProcessor.readPackedInt(is,4,false);      length-=4;      int zero=StreamProcessor.readPackedInt(is,2,false);      length-=2;      if (magic == APP1_EXIF_MAGIC && zero == 0) {        return length;      }    }  }  return 0;}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public DrawerBuilder withStickyHeader(@NonNull View stickyHeader){  this.mStickyHeaderView=stickyHeader;  return this;}  }
class C{  static String concatCommand(String[] command){  StringBuilder sb=new StringBuilder();  for (int i=0; i < command.length; i++) {    if (i != 0) {      sb.append(" ");    }    sb.append(command[i]);  }  return sb.toString();}  }
class C{  private void write(String plain,String prefix) throws Exception {  buffer.write(result);  buffer.clear();  if (!isEmpty(prefix)) {    result.write(prefix);    result.write(':');  }  result.write(plain);}  }
class C{  public Builder document(File document){  this.document=document;  return this;}  }
class C{  public void prepareTriangulation(TriangulationContext<?> tcx){  int hint=_points.size();  if (_steinerPoints != null) {    hint+=_steinerPoints.size();  }  if (_holes != null) {    for (    Polygon p : _holes) {      hint+=p.pointCount();    }  }  HashMap<TriangulationPoint,TriangulationPoint> uniquePts=new HashMap<TriangulationPoint,TriangulationPoint>(hint);  TriangulationPoint.mergeInstances(uniquePts,_points);  if (_steinerPoints != null) {    TriangulationPoint.mergeInstances(uniquePts,_steinerPoints);  }  if (_holes != null) {    for (    Polygon p : _holes) {      TriangulationPoint.mergeInstances(uniquePts,p._points);    }  }  if (m_triangles == null) {    m_triangles=new ArrayList<DelaunayTriangle>(_points.size());  } else {    m_triangles.clear();  }  for (int i=0; i < _points.size() - 1; i++) {    tcx.newConstraint(_points.get(i),_points.get(i + 1));  }  tcx.newConstraint(_points.get(0),_points.get(_points.size() - 1));  if (_holes != null) {    for (    Polygon p : _holes) {      for (int i=0; i < p._points.size() - 1; i++) {        tcx.newConstraint(p._points.get(i),p._points.get(i + 1));      }      tcx.newConstraint(p._points.get(0),p._points.get(p._points.size() - 1));    }  }  tcx.addPoints(uniquePts.keySet());}  }
class C{  public SaveWorkspaceAsAction(SimbrainDesktop desktop){  super("Save Workspace As...",desktop);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Save.png"));}  }
class C{  protected void tearDown() throws Exception {  super.tearDown();}  }
class C{  private void initialize(String[] filenames) throws IOException {  List<IString> defaultHistory=new ArrayList<>();  for (int i=0; i < order - 1; ++i) {    defaultHistory.add(TokenUtils.START_TOKEN);  }  final long startTime=System.nanoTime();  for (  String filename : filenames) {    logger.info("Reading: " + filename);    LineNumberReader reader=IOTools.getReaderFromFile(filename,inputEncoding);    for (String line; (line=reader.readLine()) != null; ) {      line=line.trim();      if (line.length() == 0)       continue;      Sequence<IString> tokens=IStrings.tokenize(line);      List<IString> history=new ArrayList<>(defaultHistory);      for (      IString token : tokens) {        if (normalizeDigits && TokenUtils.hasDigit(token.toString())) {          token=new IString(TokenUtils.normalizeDigits(token.toString()));        }        wordCount.incrementCount(token);        historyCount.incrementCount(token,new NgramHistory(history));        history.add(token);        history.remove(0);      }    }    reader.close();  }  NgramHistory.lockIndex();  final double elapsedTime=((double)System.nanoTime() - startTime) / 1e9;  logger.info(String.format("Done reading input files (%.3fsec)",elapsedTime));  logger.info(String.format("Input gross statistics: %d words  %d tokens  %d histories",wordCount.keySet().size(),(int)wordCount.totalCount(),(int)historyCount.totalCount()));  Set<IString> fullVocabulary=new HashSet<>(wordCount.keySet());  Set<IString> filteredWords=new HashSet<>(fullVocabulary.size());  for (  IString word : fullVocabulary) {    int count=(int)wordCount.getCount(word);    if (vocabThreshold > 0 && count < vocabThreshold) {      filteredWords.add(word);      wordCount.incrementCount(TokenUtils.UNK_TOKEN,count);      wordCount.remove(word);      Counter<NgramHistory> histories=historyCount.getCounter(word);      Counter<NgramHistory> unkHistories=historyCount.getCounter(TokenUtils.UNK_TOKEN);      Counters.addInPlace(unkHistories,histories);      historyCount.remove(word);      if (writeUnkClass)       System.out.printf("%s\t%d%n",word.toString(),numClasses);    }  }  if (filteredWords.size() > 0) {    logger.info(String.format("Mapping %d / %d words to unk token %s",filteredWords.size(),fullVocabulary.size(),TokenUtils.UNK_TOKEN.toString()));    fullVocabulary.add(TokenUtils.UNK_TOKEN);  }  fullVocabulary.removeAll(filteredWords);  effectiveVocabulary=new ArrayList<>(fullVocabulary);  Collections.sort(effectiveVocabulary,Counters.toComparator(wordCount,false,true));  for (int i=0; i < effectiveVocabulary.size(); ++i) {    IString word=effectiveVocabulary.get(i);    int classId=i % numClasses;    classCount.incrementCount(classId,wordCount.getCount(word));    wordToClass.put(word,classId);    Counter<NgramHistory> historiesForWord=historyCount.getCounter(word);    Counter<NgramHistory> historiesForClass=classHistoryCount.getCounter(classId);    Counters.addInPlace(historiesForClass,historiesForWord);  }  Collections.shuffle(effectiveVocabulary);  logger.info("Effective vocabulary size: " + String.valueOf(effectiveVocabulary.size()));  currentObjectiveValue=objectiveFunctionValue();  logger.info("Finished generating initial cluster assignment");  logger.info(String.format("Initial objective function value: %.3f%n",currentObjectiveValue));}  }
class C{  public boolean dispatchTrackballEvent(MotionEvent ev){  onUserInteraction();  if (getWindow().superDispatchTrackballEvent(ev)) {    return true;  }  return onTrackballEvent(ev);}  }
class C{  public JCalParseException(String message,JsonToken expected,JsonToken actual){  super(message);  this.expected=expected;  this.actual=actual;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.413 -0500",hash_original_method="34ED7286D2A920D6CAAB19B69F1E2272",hash_generated_method="A3A9DCA8F9A15F41B8A594761AC6AC9B") public ServerParser(String server){  super(server);}  }
class C{  public final boolean isFatalEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void removeLocalTempTable(Table table){  modificationId++;  localTempTables.remove(table.getName());synchronized (database) {    table.removeChildrenAndResources(this);  }}  }
class C{  public int readInt(){  return readIntArray()[0];}  }
class C{  protected void createBridgeServer(int port) throws IOException {  CacheServer bridge=getCache().addCacheServer();  bridge.setPort(port);  bridge.setMaxThreads(getMaxThreads());  bridgeServerPort=bridge.getPort();}  }
class C{  @Override public int hashCode(){  return nodeId.hashCode() + actionValues.hashCode();}  }
class C{  public boolean isEmitDecoratorMetadata(){  return emitDecoratorMetadata;}  }
class C{  public List<String> toNameValueBlock(){  Set<String> names=new HashSet<String>();  List<String> result=new ArrayList<String>();  for (int i=0; i < namesAndValues.size(); i+=2) {    String name=namesAndValues.get(i).toLowerCase(Locale.US);    String value=namesAndValues.get(i + 1);    if (name.equals("connection") || name.equals("host") || name.equals("keep-alive")|| name.equals("proxy-connection")|| name.equals("transfer-encoding")) {      continue;    }    if (names.add(name)) {      result.add(name);      result.add(value);      continue;    }    for (int j=0; j < result.size(); j+=2) {      if (name.equals(result.get(j))) {        result.set(j + 1,result.get(j + 1) + "\0" + value);        break;      }    }  }  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  log.info(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("M_Locator_ID"))   m_M_Locator_ID=e.getNewValue();  if (e.getPropertyName().equals("M_LocatorTo_ID"))   m_M_LocatorTo_ID=e.getNewValue();  if (e.getPropertyName().equals("C_BPartner_ID")) {    m_C_BPartner_ID=e.getNewValue();    fBPartner.setValue(m_C_BPartner_ID);  }  executeQuery();}  }
class C{  public ObjectMatrix2D like2D(int rows,int columns){  return new DenseObjectMatrix2D(rows,columns);}  }
class C{  public static double atan(double x){  return atan(x,0.0,false);}  }
class C{  public void addExceptionHandler(int start,int end,int handler,CtClass type){  addExceptionHandler(start,end,handler,constPool.addClassInfo(type));}  }
class C{  protected void writeHtml(final MBasicTable table,final OutputStream outputStream,final boolean isSelection) throws IOException {  final Writer out=new OutputStreamWriter(outputStream,"UTF-8");  final String eol=isSelection ? "\n" : System.getProperty("line.separator");  out.write("<!-- Fichier genere par ");  out.write(System.getProperty("user.name"));  out.write(" le ");  out.write(DateFormat.getDateTimeInstance(DateFormat.LONG,DateFormat.LONG).format(new Date()));  out.write(" -->");  out.write(eol);  out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");  out.write("<html>");  out.write(eol);  final String title=buildTitle(table);  writeHtmlHead(title,out,eol);  out.write("<body>");  out.write(eol);  if (title != null) {    out.write("<h3>");    out.write(title);    out.write("</h3>");  }  out.write(eol);  writeHtmlTable(table,isSelection,out,eol);  out.write("</body>");  out.write(eol);  out.write("</html>");  out.flush();}  }
class C{  public static short toShort(byte a,byte b,byte c,byte d){  return (short)((d << (NIBBLE_SIZE * 3)) | ((c & NIBBLE_MASK) << (NIBBLE_SIZE * 2)) | ((b & NIBBLE_MASK) << NIBBLE_SIZE)| (a & NIBBLE_MASK));}  }
class C{  public Collection<String> resolveSecurityGroups(Collection<String> securityGroupNames,String vpcId) throws APPlatformException {  Collection<String> input=new HashSet<String>();  Collection<String> result=new HashSet<String>();  if (vpcId != null && vpcId.trim().length() == 0) {    vpcId=null;  }  if (securityGroupNames != null && !securityGroupNames.isEmpty()) {    input.addAll(securityGroupNames);    DescribeSecurityGroupsResult securityGroups=getEC2().describeSecurityGroups();    LOGGER.debug("Search for securityGroups" + securityGroupNames.toString());    for (    SecurityGroup group : securityGroups.getSecurityGroups()) {      boolean vpcMatch=false;      if (vpcId == null) {        vpcMatch=isNullOrEmpty(group.getVpcId());      } else {        vpcMatch=vpcId.equals(group.getVpcId());      }      if (vpcMatch && input.contains(group.getGroupName())) {        result.add(group.getGroupId());        input.remove(group.getGroupName());      }    }    if (!input.isEmpty()) {      StringBuffer sb=new StringBuffer();      for (      String name : input) {        if (sb.length() > 0) {          sb.append(",");        }        sb.append(name);      }      throw new APPlatformException(Messages.getAll("error_invalid_security_group") + sb.toString());    }  }  LOGGER.debug("Done with Searching for securityGroups " + result);  return result;}  }
class C{  public final byte[] doFinal() throws IllegalStateException {  chooseFirstProvider();  if (initialized == false) {    throw new IllegalStateException("MAC not initialized");  }  byte[] mac=spi.engineDoFinal();  spi.engineReset();  return mac;}  }
class C{  public LongArrayDataRow(long[] data){  this.data=data;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public PuffOutAnimation(View view){  this.view=view;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public MyHeapElement peek(){  return m_heap[1];}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean lessThan(DMatch it){  return distance < it.distance;}  }
class C{  public Lingam(){}  }
class C{  @Override public void run(){  amIActive=true;  String shapefile=null;  String inputFieldsString=null;  String[] fieldNames=null;  int numFields;  int progress=0;  int lastProgress=0;  int row;  int a, i, j;  double[] fieldAverages;  double[] fieldTotals;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFieldsString=args[0];  try {    String[] inputs=inputFieldsString.split(";");    shapefile=inputs[0];    numFields=inputs.length - 1;    fieldNames=new String[numFields];    System.arraycopy(inputs,1,fieldNames,0,numFields);    AttributeTable table=new AttributeTable(shapefile.replace(".shp",".dbf"));    int numRecs=table.getNumberOfRecords();    DBFField[] fields=table.getAllFields();    ArrayList<Integer> PCAFields=new ArrayList<Integer>();    for (j=0; j < fieldNames.length; j++) {      for (i=0; i < fields.length; i++) {        if (fields[i].getName().equals(fieldNames[j]) && (fields[i].getDataType() == DBFField.DBFDataType.NUMERIC || fields[i].getDataType() == DBFField.DBFDataType.FLOAT)) {          PCAFields.add(i);        }      }    }    if (numFields != PCAFields.size()) {      showFeedback("Not all of the specified database fields were found in the file or " + "a field of a non-numerical type was selected.");      return;    }    double[][] fieldArray=new double[numRecs][numFields];    Object[] rec;    for (i=0; i < numRecs; i++) {      rec=table.getRecord(i);      for (j=0; j < numFields; j++) {        fieldArray[i][j]=(Double)(rec[PCAFields.get(j)]);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * i / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Reading data:",progress);      }      lastProgress=progress;    }    fieldAverages=new double[numFields];    fieldTotals=new double[numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotals[i]+=fieldArray[row][i];      }    }    for (i=0; i < numFields; i++) {      fieldAverages[i]=fieldTotals[i] / numRecs;    }    double[] fieldTotalDeviation=new double[numFields];    double[][] covariances=new double[numFields][numFields];    double[][] correlationMatrix=new double[numFields][numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotalDeviation[i]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][i] - fieldAverages[i]);        for (a=0; a < numFields; a++) {          covariances[i][a]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][a] - fieldAverages[a]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Calculating covariances:",progress);      }      lastProgress=progress;    }    for (i=0; i < numFields; i++) {      for (a=0; a < numFields; a++) {        correlationMatrix[i][a]=covariances[i][a] / (Math.sqrt(fieldTotalDeviation[i] * fieldTotalDeviation[a]));      }    }    String ret="IMAGE CORRELATION MATRIX\n\n";    String headers="\t";    for (a=0; a < numFields; a++) {      headers=headers + "Field" + (a + 1)+ "\t";    }    ret+=headers;    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numFields; a++) {      ret+="\nField" + (a + 1) + "\t";      for (int b=0; b <= a; b++) {        if (correlationMatrix[a][b] != -99) {          if (correlationMatrix[a][b] >= 0) {            ret+="  " + df.format(correlationMatrix[a][b]) + "\t";          } else {            ret+=df.format(correlationMatrix[a][b]) + "\t";          }        } else {          ret+="\t";        }      }    }    ret+="\n\n";    for (i=0; i < numFields; i++) {      ret+="Field " + (i + 1) + "\t"+ fieldNames[i]+ "\n";    }    returnData(ret);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static NSObject parse(InputStream is) throws IOException, PropertyListFormatException, ParseException, ParserConfigurationException, SAXException {  return parse(readAll(is));}  }
class C{  public FancyButton(Icon icon){  this(null,icon);}  }
class C{  private void readObjects() throws SyntaxError, SemanticError {  while (provider.advance()) {    Lifeline lifeline=provider.nextObject();    if (lifeline == null) {      return;    }    if (provider.getState() != null) {      drawableBijection.add(lifeline.getHead(),provider.getState());    }    addLifeline(lifeline);  }}  }
class C{  public void correctPhaseError(double correction){  mLoopFrequency+=correction;  if (mLoopFrequency > MAXIMUM_FREQUENCY) {    mLoopFrequency-=2.0d * MAXIMUM_FREQUENCY;  }  if (mLoopFrequency < -MAXIMUM_FREQUENCY) {    mLoopFrequency+=2.0d * MAXIMUM_FREQUENCY;  }}  }
class C{  public void onMapCleanup() throws IOException, InterruptedException {}  }
class C{  public Sql4EsBase() throws Exception {  super();  Class.forName("nl.anchormen.sql4es.jdbc.ESDriver");  this.sm=System.getSecurityManager();  if (sm != null) {    sm.checkPermission(new SpecialPermission());  }}  }
class C{  public static TypesafeConfigModule fromConfigWithPackage(Config config,String packageNamePrefix){  ConfigurationBuilder configBuilder=new ConfigurationBuilder().filterInputsBy(new FilterBuilder().includePackage(packageNamePrefix)).setUrls(ClasspathHelper.forPackage(packageNamePrefix)).setScanners(new TypeAnnotationsScanner(),new MethodParameterScanner(),new MethodAnnotationsScanner(),new FieldAnnotationsScanner());  Reflections reflections=new Reflections(configBuilder);  return new TypesafeConfigModule(config,reflections);}  }
class C{  @ObjectiveCName("removeGroupAvatarWithGid:") public void removeGroupAvatar(int gid){  modules.getGroupsModule().removeAvatar(gid);}  }
class C{  public void addLong(long x){  prep(8,0);  putLong(x);}  }
class C{  public SubscriptionStateHeader createSubscriptionStateHeader(String subscriptionState) throws ParseException {  if (subscriptionState == null)   throw new NullPointerException("null subscriptionState arg");  SubscriptionState s=new SubscriptionState();  s.setState(subscriptionState);  return s;}  }
class C{  public String toString(){  return "DurationField[" + getName() + ']';}  }
class C{  protected void sequence_N4SetterDeclaration(ISerializationContext context,N4SetterDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void accept(final MethodVisitor mv,boolean visible){  Label[] start=new Label[this.start.size()];  Label[] end=new Label[this.end.size()];  int[] index=new int[this.index.size()];  for (int i=0; i < start.length; ++i) {    start[i]=this.start.get(i).getLabel();    end[i]=this.end.get(i).getLabel();    index[i]=this.index.get(i);  }  accept(mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,true));}  }
class C{  protected void tearDown(){  Locale.setDefault(defaultLocale);}  }
class C{  public String toFormattedString(){  return "CUDA p2p tokensr:\n    " + createString("\n    ");}  }
class C{  @Override public void register(EValidatorRegistrar registrar){}  }
class C{  @Override public HijrahDate dateYearDay(Era era,int yearOfEra,int dayOfYear){  return dateYearDay(prolepticYear(era,yearOfEra),dayOfYear);}  }
class C{  public JsonWriter endArray() throws IOException {  return close(EMPTY_ARRAY,NONEMPTY_ARRAY,"]");}  }
class C{  public boolean match(Element e,String pseudoE){  return ((ExtendedCondition)getFirstCondition()).match(e,pseudoE) && ((ExtendedCondition)getSecondCondition()).match(e,pseudoE);}  }
class C{  public RowBuilder newRow(){  rowCount++;  int endIndex=rowCount * columnCount;  ensureCapacity(endIndex);  int start=endIndex - columnCount;  return new RowBuilder(start,endIndex);}  }
class C{  public Pose toOpenGLCameraPose(TangoPoseData tangoPose){  if (mDeviceTColorCamera == null) {    throw new RuntimeException("You must call setupExtrinsics first.");  }  Matrix4 startServiceTdevice=tangoPoseToMatrix(tangoPose);  Matrix4 openglTDevice=OPENGL_T_TANGO_WORLD.clone().multiply(startServiceTdevice);  Matrix4 openglWorldTOpenglCamera=openglTDevice.multiply(mDeviceTColorCamera).multiply(COLOR_CAMERA_T_OPENGL_CAMERA);  return matrixToPose(openglWorldTOpenglCamera);}  }
class C{  private void dispatchNotify(SipRequest notify,long timestamp) throws PayloadException, NetworkException {  mImsModule.getSipManager().sendSipResponse(SipMessageFactory.createResponse(notify,Response.OK));  EventHeader eventHeader=(EventHeader)notify.getHeader(EventHeader.NAME);  if (eventHeader == null) {    if (sLogger.isActivated()) {      sLogger.debug("Unknown notification event type");    }    return;  }  if (eventHeader.getEventType().equalsIgnoreCase("presence.winfo")) {    if (mRcsSettings.isSocialPresenceSupported() && mImsModule.getPresenceService().isServiceStarted()) {      mImsModule.getPresenceService().getWatcherInfoSubscriber().receiveNotification(notify);    }  } else   if (eventHeader.getEventType().equalsIgnoreCase("presence")) {    if (notify.getTo().contains("anonymous")) {      mImsModule.getCapabilityService().onNotificationReceived(notify);    } else {      mImsModule.getPresenceService().getPresenceSubscriber().receiveNotification(notify);    }  } else   if (eventHeader.getEventType().equalsIgnoreCase("conference")) {    mImsModule.getInstantMessagingService().onConferenceNotificationReceived(notify,timestamp);  } else {    if (sLogger.isActivated()) {      sLogger.debug("Not supported notification event type");    }  }}  }
class C{  public static void assertPingTrue(String message,String expectedContent,URL pingURL,Map<String,String> requestProperties,Logger errorLogger){  assertPing(message,expectedContent,pingURL,requestProperties,true,errorLogger);}  }
class C{  private String handleExportMaskCreate(Map<URI,Integer> blockObjectMap,Workflow workflow,StorageSystem vplexSystem,ExportGroup exportGroup,String storageViewStepId,ExportMask exportMask){  _log.info("adding step to create export mask: " + exportMask.getMaskName());  List<URI> inits=new ArrayList<URI>();  for (  String init : exportMask.getInitiators()) {    inits.add(URI.create(init));  }  if (!exportGroup.getZoneAllInitiators()) {    inits=filterInitiators(inits,exportMask);  }  List<URI> hostTargets=new ArrayList<URI>();  for (  String targetId : exportMask.getStoragePorts()) {    hostTargets.add(URI.create(targetId));  }  Workflow.Method storageViewExecuteMethod=new Workflow.Method(CREATE_STORAGE_VIEW,vplexSystem.getId(),exportGroup.getId(),exportMask.getId(),blockObjectMap,inits,hostTargets);  Workflow.Method storageViewRollbackMethod=deleteStorageViewMethod(vplexSystem.getId(),exportMask.getId());  storageViewStepId=workflow.createStep("storageView",String.format("Create VPLEX Storage View for ExportGroup %s Mask %s",exportGroup.getId(),exportMask.getMaskName()),storageViewStepId,vplexSystem.getId(),vplexSystem.getSystemType(),this.getClass(),storageViewExecuteMethod,storageViewRollbackMethod,null);  return storageViewStepId;}  }
class C{  public void configureToolBar(){  mapFlyout.setFlyoutStyle("-fx-background-color: rgba(0, 0, 0, 0.5); -fx-background-radius: 5,5,5,5;");  routeFlyout.setFlyoutStyle("-fx-background-color: rgba(0, 0, 0, 0.5); -fx-background-radius: 5,5,5,5;");  directionsBtn.setOnAction(null);  directionsBtn.setSelected(true);  mapChooser.setOnAction(null);  routeChooser.setDisable(true);  routeChooser.setOnAction(null);}  }
class C{  public static boolean isPalindrome(int number){  return number == reverse(number) ? true : false;}  }
class C{  public HasAuthenticationSupportValidator(ConfigurationType type){  super(type,ServletPropertySet.USERS);}  }
class C{  public ByteArrayProtocolOutputStream(byte[] data){  buff=data;}  }
class C{  private static boolean isOperatorVariableAccess(final INaviOperandTreeNode node){  final List<INaviOperandTreeNode> children=node.getChildren();  if (children.size() == 2) {    final INaviOperandTreeNode child0=children.get(0);    final INaviOperandTreeNode child1=children.get(1);    return isVariable(child0) ^ isVariable(child1);  } else {    return false;  }}  }
class C{  public void stopNow(){  this.stop=true;}  }
class C{  public Node appendChild(Node newChild) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public <K>T ajax(AjaxCallback<K> callback){  return invoke(callback);}  }
class C{  public static Expression newDefaultExpression(AST ast,Type type,int extraDimensions){  if (extraDimensions == 0 && type.isPrimitiveType()) {    PrimitiveType primitiveType=(PrimitiveType)type;    if (primitiveType.getPrimitiveTypeCode() == PrimitiveType.BOOLEAN) {      return ast.newBooleanLiteral(false);    } else     if (primitiveType.getPrimitiveTypeCode() == PrimitiveType.VOID) {      return null;    } else {      return ast.newNumberLiteral("0");    }  }  return ast.newNullLiteral();}  }
class C{  public VeraPDFException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void updateMeta(BundleMeta meta){  int cols=meta.size();  densecols=BitsUtil.zero(cols);  for (int i=0; i < cols; i++) {    if (TypeUtil.SPARSE_VECTOR_VARIABLE_LENGTH.isAssignableFromType(meta.get(i))) {      throw new AbortException("Filtering sparse vectors is not yet supported by this filter. Please contribute.");    }    if (TypeUtil.NUMBER_VECTOR_VARIABLE_LENGTH.isAssignableFromType(meta.get(i))) {      BitsUtil.setI(densecols,i);      continue;    }    if (TypeUtil.DOUBLE_VECTOR_FIELD.isAssignableFromType(meta.get(i))) {      BitsUtil.setI(densecols,i);      continue;    }  }}  }
class C{  public void vibroclawatt(){  BAVibroClawAttackAction act=new BAVibroClawAttackAction(cen,target.getTargetType(),target.getTargetId());  ToHitData toHit=act.toHit(clientgui.getClient().getGame());  String title=Messages.getString("PhysicalDisplay.BAVibroClawDialog.title",new Object[]{target.getDisplayName()});  String message=Messages.getString("PhysicalDisplay.BAVibroClawDialog.message",new Object[]{toHit.getValueAsString(),new Double(Compute.oddsAbove(toHit.getValue(),ce().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING))),toHit.getDesc(),ce().getVibroClaws() + toHit.getTableDesc()});  if (clientgui.doYesNoDialog(title,message)) {    disableButtons();    attacks.addElement(act);    ready();  }}  }
class C{  public void paintEditorPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static void main(String[] args){  TestBackSlashInLink tester=new TestBackSlashInLink();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  @Override public VertexQuery query(){  if (log.isInfoEnabled())   log.info("");  return new DefaultVertexQuery(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.814 -0500",hash_original_method="A4FE8368A0813DB39B9B2D62745BDC50",hash_generated_method="DF27E5998B6B64FB82406DFB9FBD4191") public void startPrefixMapping(String prefix,String uri){}  }
class C{  private void verifyContainingType(FieldDescriptor field){  if (field.getContainingType() != type) {    throw new IllegalArgumentException("FieldDescriptor does not match message type.");  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.767 -0500",hash_original_method="5621B9ADE3B8EF50DDDF7D0ECB510E6B",hash_generated_method="A59CF82C458A58C478465FFC39AB754F") @Deprecated static public MotionEvent obtain(long downTime,long eventTime,int action,int pointerCount,float x,float y,float pressure,float size,int metaState,float xPrecision,float yPrecision,int deviceId,int edgeFlags){  return obtain(downTime,eventTime,action,x,y,pressure,size,metaState,xPrecision,yPrecision,deviceId,edgeFlags);}  }
class C{  public BrushedMetalFilter(){}  }
class C{  private String PPVAL(final int index,final boolean showBinary){  if (index >= getKeys().size())   return "-";  if (index > getKeys().capacity()) {    throw new RuntimeException("index=" + index + ", keys.size="+ getKeys().size()+ ", keys.capacity="+ getKeys().capacity());  }  final byte[] key=getKeys().get(index);  final String keyStr=showBinary ? BytesUtil.toString(key) + "(" + BytesUtil.toBitString(key)+ ")" : BytesUtil.toString(key);  final String valStr;  if (false) {    final long addr;    if (hasRawRecords()) {      addr=getRawRecord(index);    } else {      addr=IRawStore.NULL;    }    if (addr != IRawStore.NULL) {      valStr="@" + htree.getStore().toString(addr);    } else {      final byte[] value=getValues().get(index);      valStr=BytesUtil.toString(value);    }  } else {    valStr=null;  }  if (valStr == null) {    return keyStr;  }  return keyStr + "=>" + valStr;}  }
class C{  public RegexValidator(String regex){  this(regex,true);}  }
class C{  private MqttPublish createPublish(MqttMessage message){  return new MqttPublish(this.getName(),message);}  }
class C{  public int size(){  return 2;}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  public XMLString toUpperCase(Locale locale){  return new XString(str().toUpperCase(locale));}  }
class C{  public void addLayoutCallback(LayoutCallback callback){  if (callback == null) {    throw new NullPointerException();  }  if (callbackList == null) {    callbackList=new ArrayList<LayoutCallback>(1);  }  callbackList.add(callback);  grid=null;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:      return N4JSPackage.N4_SETTER_DECLARATION___GET_ANNOTATIONS;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == PropertyNameOwner.class) {switch (baseOperationID) {case N4JSPackage.PROPERTY_NAME_OWNER___IS_VALID_NAME:  return N4JSPackage.N4_SETTER_DECLARATION___IS_VALID_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == FieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.FIELD_ACCESSOR___IS_VALID_NAME:return N4JSPackage.N4_SETTER_DECLARATION___IS_VALID_NAME;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ModifiableElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == N4MemberDeclaration.class) {switch (baseOperationID) {case N4JSPackage.N4_MEMBER_DECLARATION___GET_DEFINED_TYPE_ELEMENT:return N4JSPackage.N4_SETTER_DECLARATION___GET_DEFINED_TYPE_ELEMENT;case N4JSPackage.N4_MEMBER_DECLARATION___IS_DECLARED_STATIC:return N4JSPackage.N4_SETTER_DECLARATION___IS_DECLARED_STATIC;case N4JSPackage.N4_MEMBER_DECLARATION___IS_STATIC:return N4JSPackage.N4_SETTER_DECLARATION___IS_STATIC;case N4JSPackage.N4_MEMBER_DECLARATION___IS_DECLARED_FINAL:return N4JSPackage.N4_SETTER_DECLARATION___IS_DECLARED_FINAL;case N4JSPackage.N4_MEMBER_DECLARATION___IS_FINAL:return N4JSPackage.N4_SETTER_DECLARATION___IS_FINAL;case N4JSPackage.N4_MEMBER_DECLARATION___IS_CONSTRUCTOR:return N4JSPackage.N4_SETTER_DECLARATION___IS_CONSTRUCTOR;case N4JSPackage.N4_MEMBER_DECLARATION___IS_CALLABLE_CONSTRUCTOR:return N4JSPackage.N4_SETTER_DECLARATION___IS_CALLABLE_CONSTRUCTOR;default :return -1;}}if (baseClass == AnnotableN4MemberDeclaration.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION___GET_ANNOTATIONS:return N4JSPackage.N4_SETTER_DECLARATION___GET_ANNOTATIONS;default :return -1;}}if (baseClass == N4FieldAccessor.class) {switch (baseOperationID) {case N4JSPackage.N4_FIELD_ACCESSOR___IS_ABSTRACT:return N4JSPackage.N4_SETTER_DECLARATION___IS_ABSTRACT;case N4JSPackage.N4_FIELD_ACCESSOR___IS_VALID_NAME:return N4JSPackage.N4_SETTER_DECLARATION___IS_VALID_NAME;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9){  return construct(e1,e2,e3,e4,e5,e6,e7,e8,e9);}  }
class C{  public void createPartControl(Composite parent){  viewer=new TreeViewer(parent,SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL| SWT.FULL_SELECTION| SWT.BORDER);  viewer.setContentProvider(new ViewContentProvider());  viewer.setLabelProvider(new ViewLabelProvider());  viewer.setSorter(new VersionSorter());  Tree tree=viewer.getTree();  tree.setHeaderVisible(true);  createTreeHeader(tree);  viewer.setInput(getViewSite());  makeActions();  hookDoubleClickAction();}  }
class C{  public void insert(HalfEdge e){  if (oNext() == this) {    insertAfter(e);    return;  }  int ecmp=compareTo(e);  HalfEdge ePrev=this;  do {    HalfEdge oNext=ePrev.oNext();    int cmp=oNext.compareTo(e);    if (cmp != ecmp || oNext == this) {      ePrev.insertAfter(e);      return;    }    ePrev=oNext;  } while (ePrev != this);  Assert.shouldNeverReachHere();}  }
class C{  public static int checkedCollatorCompareIgnoreCase(String s1,String s2){  return checkedCollatorCompare(s1.toUpperCase(),s2.toUpperCase());}  }
class C{  private void loadStringValue(JTextField comp,final String elementName,final String defaultText){  String propValue=properties.getValue(elementName);  if (propValue != null && !propValue.isEmpty()) {    comp.setText(propValue);  } else {    comp.setText(defaultText);  }}  }
class C{  private void updateEntityViewInfo(MapEntity entity,boolean addToTree){  EntityViewInfo info=null;  if (entityClassifier != null)   info=entityClassifier.classify(entity);  entity.setViewInfo(info);  if (addToTree && info != null)   entityTree.insertEntity((DefaultMapEntity)entity);}  }
class C{  public void start() throws Exception {  if (_port < 0 && _unixPath == null) {    return;  }  if (!_lifecycle.toStarting())   return;  boolean isValid=false;  try {    bind();    postBind();    enable();    _acceptTask=new AcceptTcp(this,_serverSocket);    _threadPool.execute(_acceptTask);    _suspendAlarm=new Alarm(new SuspendReaper());    _suspendAlarm.runAfter(_suspendReaperTimeout);    isValid=true;  }  finally {    if (!isValid) {      close();    }  }}  }
class C{  public static void restartApplicationWithIntent(Activity activity,Intent intent){  intent.addFlags(getStartIntentFlags());  activity.finish();  activity.startActivity(intent);  killCurrentProcess();}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public static MTuple3<Integer,Integer,Integer> dateHMS(final Date date){  final Date input=new Date();  final LocalTime local=input.toInstant().atZone(ZoneId.systemDefault()).toLocalTime();  return localTimeHMS(local);}  }
class C{  public static boolean isDefaultPopulateValidatedUser(){  return DEFAULT_POPULATE_VALIDATED_USER;}  }
class C{  public boolean forEach(TFloatProcedure procedure){  float[] set=_set;  Object[] values=_values;  for (int i=set.length; i-- > 0; ) {    if (isFull(values,i) && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  public static int convert(int frequency){switch (frequency) {case 2412:    return 1;case 2417:  return 2;case 2422:return 3;case 2427:return 4;case 2432:return 5;case 2437:return 6;case 2442:return 7;case 2447:return 8;case 2452:return 9;case 2457:return 10;case 2462:return 11;case 2467:return 12;case 2472:return 13;case 2484:return 14;case 5180:return 36;case 5200:return 40;case 5220:return 44;case 5240:return 48;case 5260:return 52;case 5280:return 56;case 5300:return 60;case 5320:return 64;case 5500:return 100;case 5520:return 104;case 5540:return 108;case 5560:return 112;case 5580:return 116;case 5600:return 120;case 5620:return 124;case 5640:return 128;case 5660:return 132;case 5680:return 136;case 5700:return 140;case 5745:return 149;case 5765:return 153;case 5785:return 157;case 5805:return 161;case 5825:return 165;default :return 0;}}  }
class C{  public MappingCharFilterFactory(Map<String,String> args){  super(args);  mapping=get(args,"mapping");  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public boolean isPublish(){  return is(PUBLISH);}  }
class C{  public boolean generate(Projection p,boolean forceProjectAll){  setNeedToRegenerate(true);  GeneralPath projectedShape=null;synchronized (graphics) {    if (traverseMode == FIRST_ADDED_ON_TOP) {      ListIterator<OMGeometry> iterator=graphics.listIterator(size());      while (iterator.hasPrevious()) {        projectedShape=updateShape(projectedShape,(OMGeometry)iterator.previous(),p,forceProjectAll);      }    } else {      ListIterator<OMGeometry> iterator=graphics.listIterator();      while (iterator.hasNext()) {        projectedShape=updateShape(projectedShape,(OMGeometry)iterator.next(),p,forceProjectAll);      }    }  }  setShape(projectedShape);  setLabelLocation(projectedShape,p);  setNeedToRegenerate(false);  return projectedShape != null;}  }
class C{  private void initializeLiveAttributes(){  href=createLiveAnimatedString(XLINK_NAMESPACE_URI,XLINK_HREF_ATTRIBUTE);}  }
class C{  private void join(){  services.setShutdownCause(null);  services.getCancelCriterion().cancel(null);  latestViewWriteLock.lock();  try {    try {      this.isJoining=true;      long start=System.currentTimeMillis();      boolean ok=services.getJoinLeave().join();      if (!ok) {        throw new GemFireConfigException("Unable to join the distributed system.  " + "Operation either timed out, was stopped or Locator does not exist.");      }      long delta=System.currentTimeMillis() - start;      logger.info(LogMarker.DISTRIBUTION,LocalizedMessage.create(LocalizedStrings.GroupMembershipService_JOINED_TOOK__0__MS,delta));      NetView initialView=services.getJoinLeave().getView();      latestView=new NetView(initialView,initialView.getViewId());      listener.viewInstalled(latestView);    } catch (    RuntimeException ex) {      throw ex;    }catch (    Exception ex) {      if (ex.getCause() != null && ex.getCause().getCause() instanceof SystemConnectException) {        throw (SystemConnectException)(ex.getCause().getCause());      }      throw new DistributionException(LocalizedStrings.GroupMembershipService_AN_EXCEPTION_WAS_THROWN_WHILE_JOINING.toLocalizedString(),ex);    } finally {      this.isJoining=false;    }  }  finally {    latestViewWriteLock.unlock();  }}  }
class C{  boolean compareStateFile(ParcelFileDescriptor oldState){  FileInputStream instream=new FileInputStream(oldState.getFileDescriptor());  DataInputStream in=new DataInputStream(instream);  try {    int stateVersion=in.readInt();    if (stateVersion > AGENT_VERSION) {      return true;    }    int lastFilling=in.readInt();    boolean lastMayo=in.readBoolean();    boolean lastTomato=in.readBoolean();    return (lastFilling != mFilling) || (lastTomato != mAddTomato) || (lastMayo != mAddMayo);  } catch (  IOException e) {    return true;  }}  }
class C{  private void processHeadTable(Font font){  HeadTable head=font.getHeadTable();  if (head != null) {    unitsPerEm=head.getUnitsPerEm();  } else {    if (Trace.font)     Trace.trace("Font " + fontFamily + " did not have an HEAD Table.");  }  emScale=SWF_EM_SQUARE / (double)unitsPerEm;}  }
class C{  public Object last(){  return m.lastKey();}  }
class C{  @Override public void run(){  convert();  writeNetwork();}  }
class C{  public ClientConfig withHost(String host){  setHost(host);  return this;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case DELETED:  return isSetDeleted();}throw new IllegalStateException();}  }
class C{  private String extractShortVer(){  String vmVer=systemProperties_.get("java.runtime.version");  String vmVendor=systemProperties_.get("java.vendor");  Pattern pattern=Pattern.compile("[0-9]\\.([0-9])\\.0_([0-9]+)-.*");  Matcher matcher=pattern.matcher(vmVer);  if (matcher.matches()) {    return vmVendor.charAt(0) + matcher.group(1) + "U"+ matcher.group(2);  } else {    pattern=Pattern.compile(".*-(.*)_.*");    matcher=pattern.matcher(vmVer);    if (matcher.matches()) {      return vmVendor.charAt(0) + matcher.group(1).substring(2,6);    }    return vmVer;  }}  }
class C{  public static PageException toPageException(Throwable t){  if (t instanceof PageException)   return (PageException)t; else   if (t instanceof PageExceptionBox)   return ((PageExceptionBox)t).getPageException(); else   if (t instanceof InvocationTargetException) {    return toPageException(((InvocationTargetException)t).getTargetException());  } else   if (t instanceof ExceptionInInitializerError) {    return toPageException(((ExceptionInInitializerError)t).getCause());  } else   if (t instanceof ExecutionException) {    return toPageException(((ExecutionException)t).getCause());  } else {    if (t instanceof OutOfMemoryError) {      ThreadLocalPageContext.getConfig().checkPermGenSpace(true);    }    return NativeException.newInstance(t);  }}  }
class C{  public UngroupAction(final NetworkPanel networkPanel,final ViewGroupNode node){  super("Ungroup gui objects");  this.node=node;  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  Toolkit toolkit=Toolkit.getDefaultToolkit();  KeyStroke keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_U,toolkit.getMenuShortcutKeyMask());  putValue(ACCELERATOR_KEY,keyStroke);  putValue(SHORT_DESCRIPTION,"Ungroup gui objects");}  }
class C{  void cancelAddPressed(ActionEvent e){  addLogixFrame.setVisible(false);  addLogixFrame.dispose();  addLogixFrame=null;  inCopyMode=false;  if (f != null) {    f.setVisible(true);  }}  }
class C{  public static boolean convertOverflow(Element e){  Value v=getComputedStyle(e,SVGCSSEngine.OVERFLOW_INDEX);  String s=v.getStringValue();  return (s.charAt(0) == 'h') || (s.charAt(0) == 's');}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.319 -0500",hash_original_method="26856C2649829AA4775248F490BA34F6",hash_generated_method="45AC9AC605902A3D5064001E26645581") public static Span enterCriticalSpan(String name){  if (IS_USER_BUILD) {    return NO_OP_SPAN;  }  if (name == null || name.isEmpty()) {    throw new IllegalArgumentException("name must be non-null and non-empty");  }  ThreadSpanState state=sThisThreadSpanState.get();  return new Span(state);}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  private void updateTabEntriesFromMetadata(byte[] metadataBytes,SparseArray<Entry> entryMap,List<Integer> recentlyClosedTabIdList){  if (metadataBytes != null) {    DocumentList list=null;    try {      list=MessageNano.mergeFrom(new DocumentList(),metadataBytes);    } catch (    IOException e) {      Log.e(TAG,"I/O exception",e);    }    if (list == null)     return;    for (int i=0; i < list.entries.length; i++) {      DocumentEntry savedEntry=list.entries[i];      int tabId=savedEntry.tabId;      if (entryMap.indexOfKey(tabId) < 0) {        recentlyClosedTabIdList.add(tabId);        continue;      }      entryMap.get(tabId).canGoBack=savedEntry.canGoBack;    }  }}  }
class C{  public boolean hasAdditionalProperties(){  return false;}  }
class C{  public void removeAll(){  checkWidget();  this.text.setText("");  this.table.removeAll();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.979 -0500",hash_original_method="CE03E382F03DD025A15A85972E158DBD",hash_generated_method="23DA72A1294124428699B7735C4B2D39") public static byte[] sha256(String data){  return sha256(getBytesUtf8(data));}  }
class C{  public SOMNetworkNode(NetworkPanel networkPanel,SOMNetwork group){  super(networkPanel,group);  setContextMenu();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.021 -0500",hash_original_method="64A53BB5A652BD9568EA8C5A648F5375",hash_generated_method="5BEBAF1A7FAB96AAD815EDC1971E51C1") public SweepGradient(float cx,float cy,int colors[],float positions[]){  if (colors.length < 2) {    throw new IllegalArgumentException("needs >= 2 number of colors");  }  if (positions != null && colors.length != positions.length) {    throw new IllegalArgumentException("color and position arrays must be of equal length");  }  native_instance=nativeCreate1(cx,cy,colors,positions);  native_shader=nativePostCreate1(native_instance,cx,cy,colors,positions);}  }
class C{  public static XMLObjectWriter newInstance(OutputStream out,String encoding) throws XMLStreamException {  XMLObjectWriter writer=new XMLObjectWriter();  writer.setOutput(out,encoding);  return writer;}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public void init() throws ServletException {}  }
class C{  public static Track parseTrak(Atom.ContainerAtom trak,Atom.LeafAtom mvhd){  Atom.ContainerAtom mdia=trak.getContainerAtomOfType(Atom.TYPE_mdia);  int trackType=parseHdlr(mdia.getLeafAtomOfType(Atom.TYPE_hdlr).data);  if (trackType != Track.TYPE_soun && trackType != Track.TYPE_vide && trackType != Track.TYPE_text && trackType != Track.TYPE_sbtl && trackType != Track.TYPE_subt) {    return null;  }  TkhdData tkhdData=parseTkhd(trak.getLeafAtomOfType(Atom.TYPE_tkhd).data);  long duration=tkhdData.duration;  long movieTimescale=parseMvhd(mvhd.data);  long durationUs;  if (duration == -1) {    durationUs=C.UNKNOWN_TIME_US;  } else {    durationUs=Util.scaleLargeTimestamp(duration,C.MICROS_PER_SECOND,movieTimescale);  }  Atom.ContainerAtom stbl=mdia.getContainerAtomOfType(Atom.TYPE_minf).getContainerAtomOfType(Atom.TYPE_stbl);  Pair<Long,String> mdhdData=parseMdhd(mdia.getLeafAtomOfType(Atom.TYPE_mdhd).data);  StsdData stsdData=parseStsd(stbl.getLeafAtomOfType(Atom.TYPE_stsd).data,durationUs,tkhdData.rotationDegrees,mdhdData.second);  return stsdData.mediaFormat == null ? null : new Track(tkhdData.id,trackType,mdhdData.first,durationUs,stsdData.mediaFormat,stsdData.trackEncryptionBoxes,stsdData.nalUnitLengthFieldLength);}  }
class C{  public static List<ActionableEvent> findAffectedResourcePendingEvents(DbClient dbClient,URI resourceId){  List<ActionableEvent> events=findAffectedResourceEvents(dbClient,resourceId);  List<ActionableEvent> result=Lists.newArrayList();  for (  ActionableEvent event : events) {    if (event != null && event.getEventStatus() != null && (event.getEventStatus().equalsIgnoreCase(ActionableEvent.Status.pending.name()) || event.getEventStatus().equalsIgnoreCase(ActionableEvent.Status.failed.name()))) {      result.add(event);    }  }  return result;}  }
class C{  public OrderedRowIterator(final String table,final String whereColumn,final Pattern wherePattern,final boolean up) throws IOException {  this.whereColumn=whereColumn;  this.whereValue=null;  this.wherePattern=wherePattern == null || wherePattern.toString().isEmpty() ? null : wherePattern;  this.heap=getHeap(table);  this.i=heap.keys(up,false);}  }
class C{  public void previous(){  pos--;}  }
class C{  SetupWindowHolder(){  setLayout(CARD_LAYOUT);}  }
class C{  public void monitor(final JedisMonitor jedisMonitor){  client.monitor();  client.getStatusCodeReply();  jedisMonitor.proceed(client);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep deactivateBucket(@PathParam("id") URI id,BucketDeleteParam param) throws InternalException {  String task=UUID.randomUUID().toString();  _log.info(String.format("BucketDelete --- Bucket id: %1$s, Task: %2$s, ForceDelete: %3$s",id,task,param.getForceDelete()));  ArgValidator.checkFieldUriType(id,Bucket.class,"id");  Bucket bucket=queryResource(id);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,bucket.getStorageDevice());  Operation op=_dbClient.createTaskOpStatus(Bucket.class,bucket.getId(),task,ResourceOperationTypeEnum.DELETE_BUCKET);  op.setDescription("Bucket deactivate");  ObjectController controller=getController(ObjectController.class,device.getSystemType());  controller.deleteBucket(bucket.getStorageDevice(),id,param.getDeleteType(),task);  auditOp(OperationTypeEnum.DELETE_BUCKET,true,AuditLogManager.AUDITOP_BEGIN,bucket.getId().toString(),device.getId().toString());  return toTask(bucket,task,op);}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static ImageBgPanel createPanel_style1(Insets is){  ImageBgPanel p=new ImageBgPanel().setN9(__Icon9Factory__.getInstance().getPanelBg());  if (is != null)   p.setBorder(BorderFactory.createEmptyBorder(is.top,is.left,is.bottom,is.right));  return p;}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  View iView=View.inflate(context,R.layout.grid_item_gallery,null);  GridCellViewHolder holder=new GridCellViewHolder(iView);  iView.setTag(holder);  if (Global.debugEnabledViewItem)   Log.i(Global.LOG_CONTEXT,mDebugPrefix + "newView " + holder);  return iView;}  }
class C{  protected void sendTestMessage(SerialMessage m,SerialListener l){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,l);  return;}  }
class C{  public Dimension maximumLayoutSize(Container target){  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  public void put(String nodeId,DualInetAddress value){  _logger.info("Adding external node: " + nodeId + " and DualInetAddress: "+ dualInetAddress.toString()+ " to CoordinatorClientInetAddressMap.");  getExternalInetAddressLookupMap().put(nodeId,value);}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  return new SourceFileAttribute(newCp,getFileName());}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.FUNCTION_DECLARATION;}  }
class C{  public void write(byte b[],int off,int len) throws IOException {  obuffer=cipher.update(b,off,len);  if (obuffer != null) {    output.write(obuffer);    obuffer=null;  }}  }
class C{  private void verifyBufferSize(int sz){  if (sz > buf.length) {    byte[] old=buf;    buf=new byte[Math.max(sz,2 * buf.length)];    System.arraycopy(old,0,buf,0,old.length);    old=null;  }}  }
class C{  public void initDb(){  if (!isDbInitialized()) {    savePoiTypesByDefault();    savePoisFromAssets();  }  Timber.d("Database initialized");}  }
class C{  public DragControl(boolean repaint){  this.repaint=repaint;}  }
class C{  public static Expression newDefaultExpression(AST ast,ITypeBinding type){  if (type.isPrimitive()) {    String name=type.getName();    if ("boolean".equals(name)) {      return ast.newBooleanLiteral(false);    } else     if ("void".equals(name)) {      return null;    } else {      return ast.newNumberLiteral("0");    }  }  return ast.newNullLiteral();}  }
class C{  public SynchronizingStorageEngine(IStorageEngine<ByteArray,byte[]> localStorage,SyncManager syncManager,IDebugCounterService debugCounter,Scope scope){  super(localStorage,debugCounter);  this.localStorage=localStorage;  this.syncManager=syncManager;  this.scope=scope;}  }
class C{  private void fireWorkspaceComponentRemoved(WorkspaceComponent component){  for (  WorkspaceListener listener : listeners) {    listener.componentRemoved(component);  }}  }
class C{  public NecronomiconPotionAoERitual(String unlocalizedName,int bookType,float requiredEnergy,Object potion,Object... offerings){  this(unlocalizedName,bookType,-1,requiredEnergy,potion,offerings);}  }
class C{  public GitInvalidRefNameException(String message,Throwable cause){  super(message,cause);}  }
class C{  public StudentT(double freedom,RandomEngine randomGenerator){  setRandomGenerator(randomGenerator);  setState(freedom);}  }
class C{  public static boolean isValidRunConfiguration(NodeSelection selection){  return TaskViewActionStateRules.taskScopedTaskExecutionActionsEnabledFor(selection) || TaskViewActionStateRules.projectScopedTaskExecutionActionsEnabledFor(selection);}  }
class C{  public static void main(String args[]){  Context cx=Context.enter();  try {    Shell shell=new Shell();    cx.initStandardObjects(shell);    String[] names={"print","quit","version","load","help"};    shell.defineFunctionProperties(names,Shell.class,ScriptableObject.DONTENUM);    args=processOptions(cx,args);    Object[] array;    if (args.length == 0) {      array=new Object[0];    } else {      int length=args.length - 1;      array=new Object[length];      System.arraycopy(args,1,array,0,length);    }    Scriptable argsObj=cx.newArray(shell,array);    shell.defineProperty("arguments",argsObj,ScriptableObject.DONTENUM);    shell.processSource(cx,args.length == 0 ? null : args[0]);  }  finally {    Context.exit();  }}  }
class C{  protected CountEmitter(String name){  super(name);}  }
class C{  protected void addBytes(final byte[] bytes){  if (bytes == null) {    return;  }  for (  final byte b : bytes) {    messageContents[currentOutputPosition]=b;    currentOutputPosition++;  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:33.549 -0500",hash_original_method="823D52F347E7C18D3A6EC0D6C7FA9FFF",hash_generated_method="55742085A6820587CDC5C085AB86C7B6") final boolean processAuthHeader(int responseCode,ResponseHeaders response,RawHeaders successorRequestHeaders) throws IOException {  if (responseCode != HTTP_PROXY_AUTH && responseCode != HTTP_UNAUTHORIZED) {    throw new IllegalArgumentException();  }  String challenge=responseCode == HTTP_PROXY_AUTH ? response.getProxyAuthenticate() : response.getWwwAuthenticate();  if (challenge == null) {    throw new IOException("Received authentication challenge is null");  }  String credentials=getAuthorizationCredentials(challenge);  if (credentials == null) {    return false;  }  String fieldName=responseCode == HTTP_PROXY_AUTH ? "Proxy-Authorization" : "Authorization";  successorRequestHeaders.set(fieldName,credentials);  return true;}  }
class C{  @Override public void connection_close(FilterChain chain,ConnectionProxy connection) throws SQLException {  super.connection_close(chain,connection);  connectionLog("{conn-" + connection.getId() + "} closed");}  }
class C{  @Override public Thread newThread(Runnable r){  Thread t=factory.newThread(r);  if (!t.getName().startsWith(poolPrefix)) {    t.setName(poolPrefix + "_" + t.getId());  }  return t;}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  protected void updateDamage(DocumentEvent changes,Shape a,ViewFactory f){  checkMetrics();  Component host=getContainer();  Element elem=getElement();  DocumentEvent.ElementChange ec=changes.getChange(elem);  Element[] added=(ec != null) ? ec.getChildrenAdded() : null;  Element[] removed=(ec != null) ? ec.getChildrenRemoved() : null;  if (((added != null) && (added.length > 0)) || ((removed != null) && (removed.length > 0))) {    if (added != null && longestLine != null) {      int currentMaxWidth=getLineWidth(longestLine);      for (int i=0; i < added.length; i++) {        int width=getLineWidth(added[i]);        if (width > currentMaxWidth) {          currentMaxWidth=width;          longestLine=added[i];        }      }    }    if (removed != null) {      for (int i=0; i < removed.length; i++) {        if (removed[i] == longestLine) {          longestLine=null;          break;        }      }    }    preferenceChanged(null,true,true);    host.repaint();  } else {    Element map=getElement();    int line=map.getElementIndex(changes.getOffset());    int endLine=map.getElementIndex(changes.getOffset() + changes.getLength());    damageLineRange(line,endLine,a,host);    getLongestLine();    if (changes.getType() == DocumentEvent.EventType.INSERT) {      int w=getLineWidth(longestLine);      Element e=map.getElement(line);      if (e == longestLine) {        preferenceChanged(null,true,false);      } else       if (getLineWidth(e) > w) {        longestLine=e;        preferenceChanged(null,true,false);      }    } else     if (changes.getType() == DocumentEvent.EventType.REMOVE) {      if (map.getElement(line) == longestLine) {        determineLongestLine();        preferenceChanged(null,true,false);      }    }  }}  }
class C{  protected void save(Session session,LogRecord logRecord){  log.trace("save({})",logRecord.getClass());  session.save(logRecord);}  }
class C{  public Document doc(int docID,Set<String> fieldsToLoad) throws IOException {  return reader.document(docID,fieldsToLoad);}  }
class C{  public boolean isIndexed(){  return _isIndexed;}  }
class C{  public static boolean equipWithItem(final Player player,final String clazz){  ItemTestHelper.generateRPClasses();  final Item item=SingletonRepository.getEntityManager().getItem(clazz);  return player.equipToInventoryOnly(item);}  }
class C{  public void testBoundedInts(){  AtomicInteger fails=new AtomicInteger(0);  SplittableRandom r=new SplittableRandom();  long size=12345L;  for (int least=-15485867; least < MAX_INT_BOUND; least+=524959) {    for (int bound=least + 2; bound > least && bound < MAX_INT_BOUND; bound+=67867967) {      final int lo=least, hi=bound;      r.ints(size,lo,hi).parallel().forEach(null);    }  }  assertEquals(fails.get(),0);}  }
class C{  public void init(FilterConfig filterConfig) throws ServletException {  m_filterConfig=filterConfig;  MobileEnv.initWeb(filterConfig.getServletContext());  if (log == null)   log=CLogger.getCLogger(WFilter.class);  log.info(filterConfig.getFilterName());  Enumeration en=filterConfig.getInitParameterNames();  while (en.hasMoreElements()) {    String name=en.nextElement().toString();    String value=filterConfig.getInitParameter(name);    log.config(name + "=" + value);    if (name.equals("Timing") && value.equals("Y"))     m_timing=true;  }}  }
class C{  private void writeOFMessageToSwitch(DatapathId dpid,OFMessage message){  IOFSwitch ofswitch=switchService.getSwitch(dpid);  if (ofswitch != null) {    if (log.isDebugEnabled()) {      log.debug("Sending 1 new entries to {}",dpid.toString());    }    ofswitch.write(message);  }}  }
class C{  private void initializeTree(final COperandTreeNode node){  node.setOperand(this);  for (  final IOperandTreeNode child : node.getChildren()) {    initializeTree((COperandTreeNode)child);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:14.325 -0500",hash_original_method="5CBB59F043F7E5A98C79AC06A0CCF84B",hash_generated_method="1BCB3BC4911B7F569816A3A6E46A6CFC") public Enumeration<V> elements(){  return new ValueIterator();}  }
class C{  public WMSCapabilities(Object docSource){  super(OGCConstants.WMS_NAMESPACE_URI,docSource);  this.initialize();}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public Raum(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());  setTitel(getTypeFactory().getMessage(TYPE_ID));}  }
class C{  @Override public boolean supportsDb(String type){  return true;}  }
class C{  private NgramDPState computeTransition(int[] enWords,List<HGNode> tailNodes,Accumulator acc){  int[] current=new int[this.ngramOrder];  int[] shadow=new int[this.ngramOrder];  int ccount=0;  float transitionLogP=0.0f;  int[] left_context=null;  for (  int curID : enWords) {    if (FormatUtils.isNonterminal(curID)) {      int index=-(curID + 1);      NgramDPState state=(NgramDPState)tailNodes.get(index).getDPState(stateIndex);      int[] left=state.getLeftLMStateWords();      int[] right=state.getRightLMStateWords();      for (      int aLeft : left) {        current[ccount++]=aLeft;        if (left_context == null && ccount == this.ngramOrder - 1)         left_context=Arrays.copyOf(current,ccount);        if (ccount == this.ngramOrder) {          float prob=this.languageModel.ngramLogProbability(current,this.ngramOrder);          transitionLogP+=prob;          System.arraycopy(current,1,shadow,0,this.ngramOrder - 1);          int[] tmp=current;          current=shadow;          shadow=tmp;          --ccount;        }      }      System.arraycopy(right,0,current,ccount - right.length,right.length);    } else {      current[ccount++]=curID;      if (left_context == null && ccount == this.ngramOrder - 1)       left_context=Arrays.copyOf(current,ccount);      if (ccount == this.ngramOrder) {        float prob=this.languageModel.ngramLogProbability(current,this.ngramOrder);        transitionLogP+=prob;        System.arraycopy(current,1,shadow,0,this.ngramOrder - 1);        int[] tmp=current;        current=shadow;        shadow=tmp;        --ccount;      }    }  }  acc.add(denseFeatureIndex,transitionLogP);  if (left_context != null) {    return new NgramDPState(left_context,Arrays.copyOfRange(current,ccount - this.ngramOrder + 1,ccount));  } else {    int[] context=Arrays.copyOf(current,ccount);    return new NgramDPState(context,context);  }}  }
class C{  protected void paint(SynthContext context,Graphics g){  SynthContext subcontext=getContext(scrollbar,Region.SCROLL_BAR_TRACK);  paintTrack(subcontext,g,getTrackBounds());  subcontext.dispose();  subcontext=getContext(scrollbar,Region.SCROLL_BAR_THUMB);  paintThumb(subcontext,g,getThumbBounds());  subcontext.dispose();}  }
class C{  public CCLiquid(int wav,float amp,ccGridSize gSize,float d){  super(gSize,d);  waves=wav;  amplitude=amp;  amplitudeRate=1.0f;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_about);  mAboutText=(TextView)findViewById(R.id.action_about);  try {    String contents=getStringFromRawFile();    mAboutText.setText(contents);  } catch (  IOException e) {    e.printStackTrace();  }  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);  setSupportActionBar(toolbar);  ActionBar ab=getSupportActionBar();  ab.setDisplayHomeAsUpEnabled(true);}  }
class C{  public static boolean isClassAvailableForProject(@NotNull Project project,@NotNull String className){  PsiClass classInModule=JavaPsiFacade.getInstance(project).findClass(className,new EverythingGlobalScope(project));  return classInModule != null;}  }
class C{  public void push(final double value){  long bits=Double.doubleToLongBits(value);  if (bits == 0L || bits == 0x3ff0000000000000L) {    mv.visitInsn(Opcodes.DCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  @SuppressWarnings("synthetic-access") public void testNetSearchMessageDoGet(String theRegionName,Object theKey,int theTimeoutMs,int theTtl,int theIdleTime){  NetSearchRequestMessage nMsg=new NetSearchRequestMessage();  nMsg.initialize(this,theRegionName,theKey,theTimeoutMs,theTtl,theIdleTime);  nMsg.doGet((DistributionManager)this.distributionManager);}  }
class C{  private void printCurrency(Currency c){  System.out.println();  System.out.println(c.getCurrencyCode());  System.out.println(c.getSymbol());  System.out.println(c.getDefaultFractionDigits());}  }
class C{  @Override public double conf(double totalWeight,double totalPositiveWeight,Hypothesis hypo,double delta){  double g=hypo.getCoveredWeight() / totalWeight;  double p=hypo.getPositiveWeight() / hypo.getCoveredWeight();  double sg=variance(g,totalWeight);  double sp=variance(p,hypo.getCoveredWeight());  double inverseNormal=inverseNormal(1 - delta / 4);  return Math.sqrt(sg * inverseNormal) + sp * inverseNormal + Math.sqrt(sg * inverseNormal) * sp * inverseNormal;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.744 -0500",hash_original_method="1FC603D50B1CC5C62A2F5DE57FF4610A",hash_generated_method="916058FC98BEB5BEBA4D6C12E44E630C") public void requestCancelDecode(){  mCancel=true;  requestCancel();}  }
class C{  public static Asset createAssetFromBitmap(Bitmap bitmap){  if (bitmap != null) {    final ByteArrayOutputStream byteStream=new ByteArrayOutputStream();    bitmap.compress(Bitmap.CompressFormat.PNG,100,byteStream);    return Asset.createFromBytes(byteStream.toByteArray());  }  return null;}  }
class C{  @RequestProcessing(value="/forget-pwd",method=HTTPRequestMethod.POST) @Before(adviceClass=UserForgetPwdValidation.class) public void forgetPwd(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  context.renderJSON();  final JSONObject requestJSONObject=(JSONObject)request.getAttribute(Keys.REQUEST);  final String email=requestJSONObject.optString(User.USER_EMAIL);  try {    final JSONObject user=userQueryService.getUserByEmail(email);    if (null == user) {      context.renderFalseResult().renderMsg(langPropsService.get("notFoundUserLabel"));      return;    }    final String userId=user.optString(Keys.OBJECT_ID);    final JSONObject verifycode=new JSONObject();    verifycode.put(Verifycode.BIZ_TYPE,Verifycode.BIZ_TYPE_C_RESET_PWD);    final String code=RandomStringUtils.randomAlphanumeric(6);    verifycode.put(Verifycode.CODE,code);    verifycode.put(Verifycode.EXPIRED,DateUtils.addDays(new Date(),1).getTime());    verifycode.put(Verifycode.RECEIVER,email);    verifycode.put(Verifycode.STATUS,Verifycode.STATUS_C_UNSENT);    verifycode.put(Verifycode.TYPE,Verifycode.TYPE_C_EMAIL);    verifycode.put(Verifycode.USER_ID,userId);    verifycodeMgmtService.addVerifycode(verifycode);    context.renderTrueResult().renderMsg(langPropsService.get("verifycodeSentLabel"));  } catch (  final ServiceException e) {    final String msg=langPropsService.get("resetPwdLabel") + " - " + e.getMessage();    LOGGER.log(Level.ERROR,msg + "[name={0}, email={1}]",email);    context.renderMsg(msg);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.343 -0500",hash_original_method="2915748C93DEC7F425A1836D3BEC9D20",hash_generated_method="AFF8CCDD36BE6B6DEE077BD930AED755") private void checkNotParsing(String type,String name) throws SAXNotSupportedException {  if (parsing) {    throw new SAXNotSupportedException("Cannot change " + type + ' '+ name+ " while parsing");  }}  }
class C{  private static Object compressNonDecimalMaxMin(DataType changedDataType,double[] value,int decimal,double maxValue){  int i=0;switch (changedDataType) {case DATA_BYTE:    byte[] result=new byte[value.length];  for (  double a : value) {    result[i]=(byte)(Math.round((maxValue - a) * Math.pow(10,decimal)));    i++;  }return result;case DATA_SHORT:short[] shortResult=new short[value.length];for (double a : value) {shortResult[i]=(byte)(Math.round((maxValue - a) * Math.pow(10,decimal)));i++;}return shortResult;case DATA_INT:int[] intResult=new int[value.length];for (double a : value) {intResult[i]=(byte)(Math.round((maxValue - a) * Math.pow(10,decimal)));i++;}return intResult;case DATA_LONG:long[] longResult=new long[value.length];for (double a : value) {longResult[i]=(byte)(Math.round((maxValue - a) * Math.pow(10,decimal)));i++;}return longResult;case DATA_FLOAT:float[] floatResult=new float[value.length];for (double a : value) {floatResult[i]=(byte)(Math.round((maxValue - a) * Math.pow(10,decimal)));i++;}return floatResult;default :double[] defaultResult=new double[value.length];for (double a : value) {defaultResult[i]=(byte)(Math.round((maxValue - a) * Math.pow(10,decimal)));i++;}return defaultResult;}}  }
class C{  protected String adjustFormattedCssWhitespace(String formattedCssBlock,IDocument originalDocument,TypedPosition partition,GssExtractor extractor){  return formattedCssBlock;}  }
class C{  public void loadFromResource() throws IOException {  URL url=WorldEdit.getInstance().getClass().getResource("/com/sk89q/worldedit/world/registry/blocks.json");  add(url,false);}  }
class C{  public String mapFieldName(String owner,String name,String desc){  return name;}  }
class C{  private void updateSuppressedMessageStats() throws AdeException {  m_suppressedNonWrapperMessageCount++;  m_suppressedMessagesRemaining--;  m_messageInstanceWaiting=m_messageTextPreprocessor.getExtraMessage(m_prevMessageInstance);}  }
class C{  public static boolean verifyAsForm(Request request,Response response){  String sToken=request.session().attribute(config.session);  if (sToken == null) {    sToken=CSRFTokenManager.createToken(request,response);    return true;  } else {    String pToken=request.query(config.form);    if (config.setHeader) {      pToken=request.header(config.form);    }    if (config.setCookie) {      pToken=request.cookie(config.form);    }    if (StringKit.isNotBlank(pToken) && sToken.equals(pToken)) {      return true;    }  }  return false;}  }
class C{  public BeanConnection(BeanInstance source,BeanInstance target,EventSetDescriptor esd,Integer... tab){  int tabIndex=0;  if (tab.length > 0) {    tabIndex=tab[0].intValue();  }  Vector<BeanConnection> connections=TABBED_CONNECTIONS.get(tabIndex);  m_source=source;  m_target=target;  m_eventName=esd.getName();  Method registrationMethod=esd.getAddListenerMethod();  Object targetBean=m_target.getBean();  Object[] args=new Object[1];  args[0]=targetBean;  Class<?> listenerClass=esd.getListenerType();  if (listenerClass.isInstance(targetBean)) {    try {      registrationMethod.invoke(m_source.getBean(),args);      if (targetBean instanceof BeanCommon) {        ((BeanCommon)targetBean).connectionNotification(esd.getName(),m_source.getBean());      }      connections.addElement(this);    } catch (    Exception ex) {      System.err.println("[BeanConnection] Unable to connect beans");      ex.printStackTrace();    }  } else {    System.err.println("[BeanConnection] Unable to connect beans");  }}  }
class C{  public static double CramersV(double[][] matrix){  int row, col, nrows, ncols, min;  double n=0;  nrows=matrix.length;  ncols=matrix[0].length;  for (row=0; row < nrows; row++) {    for (col=0; col < ncols; col++) {      n+=matrix[row][col];    }  }  min=nrows < ncols ? nrows - 1 : ncols - 1;  if ((min == 0) || Utils.eq(n,0))   return 0;  return Math.sqrt(chiVal(matrix,false) / (n * (double)min));}  }
class C{  public void resetCropOverlayView(){  if (initializedCropWindow) {    initCropWindow(mBitmapRect);    invalidate();  }}  }
class C{  public static boolean instanceOf(Object obj,String typeName,ClassLoader loader){  Class<?> infoClass=loadInfoClass(typeName,loader);  if (infoClass == null) {    throw new IllegalArgumentException("Illegal type found in info map (could not load class for specified type)");  }  return instanceOf(obj,infoClass);}  }
class C{  @Nullable protected static <K,V>V peek(IgniteCache<K,V> cache,K key){  return offheapTiered(cache) ? cache.localPeek(key,CachePeekMode.SWAP,CachePeekMode.OFFHEAP) : cache.localPeek(key,CachePeekMode.ONHEAP);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x951BEDF5,version=271) public int sceUsbCamSetReverseMode(int reverseMode){  this.flip=(reverseMode & PSP_USBCAM_FLIP) != 0;  this.mirror=(reverseMode & PSP_USBCAM_MIRROR) != 0;  return 0;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static ExternalLibraryPreferenceModel createDefault(){  final URI homeFolderUri=new File(System.getProperty("user.home")).toURI();  return new ExternalLibraryPreferenceModel(homeFolderUri);}  }
class C{  public boolean isEnabled(int position){  final ListAdapter adapter=mListAdapter;  if (adapter != null) {    return adapter.isEnabled(position);  } else {    return true;  }}  }
class C{  protected WMouseDragGestureRecognizer(DragSource ds,Component c,int act,DragGestureListener dgl){  super(ds,c,act,dgl);}  }
class C{  public synchronized void addElement(final Rectangle value){  checkSize(current_item);  items[current_item]=value;  current_item++;}  }
class C{  public void testUnpackNoValues() throws InvalidAdviceException {  String bag="e";  Object[][] packedTuple={{}};  BaggageAPIForTest baggage=new BaggageAPIForTest().put(bag,packedTuple);  EmitAPIForTest results=new EmitAPIForTest();  Advice advice=AdviceTestUtils.newAdvice().observe().unpack(bag).emit("test1").build(baggage,results);  assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);  advice.advise();  results.expectTuple();  results.check();  assertTrue("Expect 1 output tuple emitted",results.emitted.size() == 1);}  }
class C{  public static void decodeToString(FieldDef fieldDef,byte[] from,long locationAndOffset,AkibanAppender appender){  final int precision=fieldDef.getTypeParameter1().intValue();  final int scale=fieldDef.getTypeParameter2().intValue();  final int location=(int)locationAndOffset;  try {    decodeToString(from,location,precision,scale,appender);  } catch (  NumberFormatException e) {    StringBuilder errSb=new StringBuilder();    errSb.append("in field[");    errSb.append(fieldDef.getRowDef().getRowDefId()).append('.').append(fieldDef.getFieldIndex());    errSb.append(" decimal(");    errSb.append(fieldDef.getTypeParameter1()).append(',').append(fieldDef.getTypeParameter2());    errSb.append(")] 0x");    final int bytesLen=(int)(locationAndOffset >>> 32);    AkServerUtil.hex(AkibanAppender.of(errSb),from,location,bytesLen);    errSb.append(": ").append(e.getMessage());    throw new RowDataException(errSb.toString(),e);  }}  }
class C{  protected void resetStickyFooterSelection(){  if (mStickyFooterView instanceof LinearLayout) {    for (int i=0; i < (mStickyFooterView).getChildCount(); i++) {      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {        (mStickyFooterView).getChildAt(i).setActivated(false);      }      (mStickyFooterView).getChildAt(i).setSelected(false);    }  }}  }
class C{  public void readData(DataInput din) throws IOException {  reference=din.readUnsignedShort();  andMask=din.readUnsignedShort();  orMask=din.readUnsignedShort();}  }
class C{  public DefaultWindDataset createSampleDataset1(){  Day t=new Day(1,4,2006);  Object[] item1=createItem(t,3,7);  Object[] item2=createItem(t.next(),4,8);  Object[] item3=createItem(t.next(),5,9);  Object[][] series1=new Object[][]{item1,item2,item3};  Object[] item1b=createItem(t,6,10);  Object[] item2b=createItem(t.next(),7,11);  Object[] item3b=createItem(t.next(),8,12);  Object[][] series2=new Object[][]{item1b,item2b,item3b};  Object[][][] data=new Object[][][]{series1,series2};  return new DefaultWindDataset(data);}  }
class C{  public void addAll(double... values){  for (  double value : values) {    add(value);  }}  }
class C{  private SpringSecurityAuthenticationTokenFactory(){}  }
class C{  public synchronized Boolean updateAVClientByStreamId(String streamId,RoomClient rcm){  try {    RoomClient rclUsual=getClientByPublicSID(rcm.getPublicSID(),false);    if (rclUsual != null) {      rclUsual.setBroadCastID(rcm.getBroadCastID());      rclUsual.setAvsettings(rcm.getAvsettings());      rclUsual.setVHeight(rcm.getVHeight());      rclUsual.setVWidth(rcm.getVWidth());      rclUsual.setVX(rcm.getVX());      rclUsual.setVY(rcm.getVY());      if (clientList.containsKey(rclUsual.getStreamid())) {        clientList.put(rclUsual.getStreamid(),rclUsual);      } else {        log.debug("Tried to update a non existing Client " + rclUsual.getStreamid());      }    }    updateClientByStreamId(streamId,rcm);  } catch (  Exception err) {    log.error("[updateAVClientByStreamId]",err);  }  return null;}  }
class C{  public void destroy() throws Exception {  LOG.debug("closing objectPool");  objectPool.close();}  }
class C{  protected Iterator bcsChildren(){synchronized (children) {    return children.values().iterator();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.350 -0500",hash_original_method="785D7AD880670D6D8A0DF6FCE0749ACB",hash_generated_method="EDA23E10272D09A6B3C2CF7A4A28DC19") public Matcher useAnchoringBounds(boolean value){  anchoringBounds=value;  useAnchoringBoundsImpl(address,value);  return this;}  }
class C{  private void correctNimbusDefaultProblems(JTextComponent editor){  Color c=editor.getCaretColor();  if (c == null) {    editor.setCaretColor(RTextArea.getDefaultCaretColor());  }  c=editor.getSelectionColor();  if (c == null) {    c=UIManager.getColor("nimbusSelectionBackground");    if (c == null) {      c=UIManager.getColor("textHighlight");      if (c == null) {        c=new ColorUIResource(Color.BLUE);      }    }    editor.setSelectionColor(c);  }  c=editor.getSelectedTextColor();  if (c == null) {    c=UIManager.getColor("nimbusSelectedText");    if (c == null) {      c=UIManager.getColor("textHighlightText");      if (c == null) {        c=new ColorUIResource(Color.WHITE);      }    }    editor.setSelectedTextColor(c);  }  c=editor.getDisabledTextColor();  if (c == null) {    c=UIManager.getColor("nimbusDisabledText");    if (c == null) {      c=UIManager.getColor("textInactiveText");      if (c == null) {        c=new ColorUIResource(Color.DARK_GRAY);      }    }    editor.setDisabledTextColor(c);  }  Border border=editor.getBorder();  if (border == null) {    editor.setBorder(new BasicBorders.MarginBorder());  }  Insets margin=editor.getMargin();  if (margin == null) {    editor.setMargin(new InsetsUIResource(2,2,2,2));  }}  }
class C{  public static double signum(final double a){  return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a);}  }
class C{  public static CompiledMethod recompileState(ExecutionState state,boolean invalidate){  CompiledMethod newCM=null;  do {    if (!invalidate) {      newCM=optCompile(state);    } else {      newCM=baselineCompile(state);    }    if (VM.TraceOnStackReplacement) {      VM.sysWriteln("new CMID 0x" + Integer.toHexString(newCM.getId()) + "("+ newCM.getId()+ ") for "+ newCM.getMethod());    }    if (state.callerState == null)     break;    state=state.callerState;    state.callee_cmid=newCM.getId();  } while (true);  return newCM;}  }
class C{  public static AlertDto transformToDto(Alert alert){  if (alert == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  AlertDto result=createDtoObject(AlertDto.class,alert);  result.setOwnerName(alert.getOwner().getUserName());  for (  Trigger trigger : alert.getTriggers()) {    result.addTriggersIds(trigger);  }  for (  Notification notification : alert.getNotifications()) {    result.addNotificationsIds(notification);  }  return result;}  }
class C{  private synchronized void notifyZoomListeners(ZoomEvent e){  for (  ZoomListener listener : mZoomListeners) {    listener.zoomApplied(e);  }}  }
class C{  public boolean canBeLongAddress(int address){  return ((address >= 0) && (address <= 10239));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.138 -0500",hash_original_method="2D47F9E4EEBA0DDD1F9AB9C826991FF7",hash_generated_method="B4560C1063D53DBECDE2C6950010C298") public void copy2DRangeFrom(int xoff,int yoff,int w,int h,Allocation data,int dataXoff,int dataYoff){  mRS.validate();  validate2DRange(xoff,yoff,w,h);  mRS.nAllocationData2D(getIDSafe(),xoff,yoff,mSelectedLOD,mSelectedFace.mID,w,h,data.getID(),dataXoff,dataYoff,data.mSelectedLOD,data.mSelectedFace.mID);}  }
class C{  public void store(byte value,Offset offset){}  }
class C{  public int generateForcastRunLines(MPPForecastRunDetail frd){  List<Object> parameters=new ArrayList<Object>();  StringBuffer insertSQL=new StringBuffer();  MPPPeriod period=(MPPPeriod)frd.getPP_Period();  insertSQL.append("INSERT INTO ").append(MPPForecastRunLine.Table_Name).append(" frl (");  insertSQL.append(MPPForecastRunLine.COLUMNNAME_PP_ForecastRunLine_ID).append(",");  insertSQL.append(MPPForecastRunLine.COLUMNNAME_PP_ForecastRun_ID).append(",");  insertSQL.append(MPPForecastRunLine.COLUMNNAME_PP_ForecastRunDetail_ID).append(",");  insertSQL.append(MPPForecastRunLine.COLUMNNAME_AD_Client_ID).append(",");  insertSQL.append(MPPForecastRunLine.COLUMNNAME_AD_Org_ID).append(",");  insertSQL.append(MPPForecastRunLine.COLUMNNAME_C_SalesHistory_ID).append(",");  insertSQL.append(MPPForecastRunLine.COLUMNNAME_PP_Period_ID).append(",");  insertSQL.append(MPPForecastRunLine.COLUMNNAME_Created).append(",");  insertSQL.append(MPPForecastRunLine.COLUMNNAME_CreatedBy).append(",");  insertSQL.append(MPPForecastRunLine.COLUMNNAME_Updated).append(",");  insertSQL.append(MPPForecastRunLine.COLUMNNAME_UpdatedBy).append(")");  insertSQL.append(" SELECT DISTINCT ");  insertSQL.append("nextidfunc(").append(MSequence.get(getCtx(),MPPForecastRunLine.Table_Name).get_ID()).append(",'Y')").append(",");  insertSQL.append(frd.getPP_ForecastRun_ID()).append(",");  insertSQL.append(frd.getPP_ForecastRunDetail_ID()).append(",");  insertSQL.append(MSalesHistory.COLUMNNAME_AD_Client_ID).append(",");  insertSQL.append(MSalesHistory.COLUMNNAME_AD_Org_ID).append(",");  insertSQL.append(MSalesHistory.COLUMNNAME_C_SalesHistory_ID).append(",");  insertSQL.append(period.getPP_Period_ID()).append(",");  insertSQL.append("SYSDATE").append(",");  insertSQL.append(Env.getAD_User_ID(getCtx())).append(",");  insertSQL.append("SYSDATE").append(",");  insertSQL.append(Env.getAD_User_ID(getCtx()));  insertSQL.append(" FROM ").append(MSalesHistory.Table_Name);  insertSQL.append(" WHERE ");  insertSQL.append(MSalesHistory.COLUMNNAME_M_Product_ID).append("=? AND ");  insertSQL.append(MSalesHistory.COLUMNNAME_M_Warehouse_ID).append("=? AND ");  insertSQL.append(MSalesHistory.COLUMNNAME_DateInvoiced).append(" BETWEEN ? AND ? ");  parameters.add(frd.getPP_ForecastRunMaster().getM_Product_ID());  parameters.add(m_run.getM_WarehouseSource_ID());  parameters.add(period.getStartDate());  parameters.add(period.getEndDate());  return DB.executeUpdateEx(insertSQL.toString(),parameters.toArray(),get_TrxName());}  }
class C{  public static boolean isSimpleProperty(Class<?> clazz){  return BeanUtils.isSimpleProperty(clazz);}  }
class C{  public HTTPInputStream(HTTPClient httpClient) throws IOException {  if (httpClient == null) {    throw new IllegalArgumentException("httpClient is null");  }  this.httpClient=httpClient;  this.contentStream=httpClient.getContentstream();  if (this.contentStream == null) {    throw new IOException("content stream is null");  }}  }
class C{  public void mediaMarker(String syncbaseID,String markerName){  TimingSpecifier ts=new MediaMarkerTimingSpecifier(owner,isBegin,syncbaseID,markerName);  timingSpecifiers.add(ts);}  }
class C{  public void add(T item){  if (set.add(item)) {    fireContentsChanged(this,0,getSize() - 1);  }}  }
class C{  public static long[] toLongArray(short[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(long)array[i];  }  return result;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String malformedName="prefix::local";  Document doc;  Attr newAttr;  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      newAttr=doc.createAttributeNS(namespaceURI,malformedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public static boolean prepareHelpMenuItem(Context context,MenuItem helpMenuItem,int helpUrlResourceId){  String helpUrlString=context.getResources().getString(helpUrlResourceId);  return prepareHelpMenuItem(context,helpMenuItem,helpUrlString);}  }
class C{  public boolean isAggregatedType(){  return true;}  }
class C{  public static boolean isUncheckedException(ObjectType type) throws ClassNotFoundException {  if (type.equals(Type.THROWABLE) || type.equals(RUNTIME_EXCEPTION_TYPE) || type.equals(ERROR_TYPE)) {    return true;  }  ClassDescriptor c=DescriptorFactory.getClassDescriptor(type);  Subtypes2 subtypes2=Global.getAnalysisCache().getDatabase(Subtypes2.class);  return subtypes2.isSubtype(c,RUNTIME_EXCEPTION,ERROR);}  }
class C{  public static void generateAtom(XmlWriter writer,IEntry entry,ExtensionProfile extProfile) throws IOException {  if (entry instanceof BaseEntry) {    ((BaseEntry<?>)entry).generateAtom(writer,extProfile);  } else {  }}  }
class C{  synchronized public void terminate(){  done=true;}  }
class C{  @SuppressWarnings("deprecation") public static void splash(Image image){  if (m_instance == null && image != null) {    Frame f=new Frame();    m_instance=new SplashWindow(f,image);    m_instance.show();    if (!EventQueue.isDispatchThread() && Runtime.getRuntime().availableProcessors() == 1) {synchronized (m_instance) {        while (!m_instance.paintCalled) {          try {            m_instance.wait();          } catch (          InterruptedException e) {          }        }      }    }  }}  }
class C{  public void testPartitionedOverFixedTemporal(){  EPServiceProvider epService=allocateEngine(false);  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.startTest(epService,this.getClass(),getName());  }  EPServiceProviderSPI spi=(EPServiceProviderSPI)epService;  FilterServiceSPI filterSPI=(FilterServiceSPI)spi.getFilterService();  sendTimeEvent(epService,"2002-05-1T07:00:00.000");  EPStatement stmtCtx=epService.getEPAdministrator().createEPL("create context NestedContext " + "context SegmentedByAString partition by theString from SupportBean, " + "context EightToNine as start (0, 8, *, *, *) end (0, 9, *, *, *)");  assertEquals(0,filterSPI.getFilterCountApprox());  assertEquals(0,spi.getSchedulingService().getScheduleHandleCount());  SupportUpdateListener listener=new SupportUpdateListener();  String[] fields="c1".split(",");  EPStatementSPI statement=(EPStatementSPI)epService.getEPAdministrator().createEPL("context NestedContext select count(*) as c1 from SupportBean");  statement.addListener(listener);  assertEquals(1,filterSPI.getFilterCountApprox());  assertEquals(0,spi.getSchedulingService().getScheduleHandleCount());  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  assertFalse(listener.isInvoked());  assertEquals(1,filterSPI.getFilterCountApprox());  assertEquals(1,spi.getSchedulingService().getScheduleHandleCount());  sendTimeEvent(epService,"2002-05-1T08:00:00.000");  assertEquals(2,filterSPI.getFilterCountApprox());  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{1L});  assertEquals(2,filterSPI.getFilterCountApprox());  assertEquals(1,spi.getSchedulingService().getScheduleHandleCount());  epService.getEPRuntime().sendEvent(new SupportBean("E2",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{1L});  assertEquals(3,filterSPI.getFilterCountApprox());  assertEquals(2,spi.getSchedulingService().getScheduleHandleCount());  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{2L});  assertEquals(3,filterSPI.getFilterCountApprox());  sendTimeEvent(epService,"2002-05-1T09:00:00.000");  assertEquals(1,filterSPI.getFilterCountApprox());  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  epService.getEPRuntime().sendEvent(new SupportBean("E2",0));  assertFalse(listener.isInvoked());  assertEquals(2,spi.getSchedulingService().getScheduleHandleCount());  sendTimeEvent(epService,"2002-05-2T08:00:00.000");  assertEquals(3,filterSPI.getFilterCountApprox());  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{1L});  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{2L});  epService.getEPRuntime().sendEvent(new SupportBean("E2",0));  EPAssertionUtil.assertProps(listener.assertOneGetNewAndReset(),fields,new Object[]{1L});  AgentInstanceAssertionUtil.assertInstanceCounts(statement.getStatementContext(),2,0,0,0);  assertEquals(2,spi.getSchedulingService().getScheduleHandleCount());  statement.destroy();  epService.getEPRuntime().sendEvent(new SupportBean("E1",0));  assertFalse(listener.isInvoked());  assertEquals(0,filterSPI.getFilterCountApprox());  assertEquals(0,spi.getSchedulingService().getScheduleHandleCount());  stmtCtx.destroy();  AgentInstanceAssertionUtil.assertInstanceCounts(statement.getStatementContext(),0,0,0,0);  if (InstrumentationHelper.ENABLED) {    InstrumentationHelper.endTest();  }}  }
class C{  public void environmentBind(EnvironmentClassLoader loader){}  }
class C{  public static ConstantSize pixel(int value){  return new ConstantSize(value,ConstantSize.PIXEL);}  }
class C{  public RouteTracker(HttpHost target,InetAddress local){  if (target == null) {    throw new IllegalArgumentException("Target host may not be null.");  }  this.targetHost=target;  this.localAddress=local;  this.tunnelled=TunnelType.PLAIN;  this.layered=LayerType.PLAIN;}  }
class C{  public static void main(String[] args){  int modulus=Integer.parseInt(args[0]);  Permuter p=new Permuter(modulus);  for (int i=0; i < modulus; i++) {    System.out.print(p.map(i) + " ");  }  System.out.println();}  }
class C{  public WritableRaster createCompatibleWritableRaster(){  return createCompatibleWritableRaster(width,height);}  }
class C{  public Long saveAppointment(String SID,String appointmentName,String appointmentLocation,String appointmentDescription,Calendar appointmentstart,Calendar appointmentend,Boolean isDaily,Boolean isWeekly,Boolean isMonthly,Boolean isYearly,Long categoryId,Long remind,String[] mmClient,Long roomType,String baseUrl,Long languageId,Boolean isPasswordProtected,String password){  log.debug("saveAppointMent SID:" + SID + ", baseUrl : "+ baseUrl);  try {    Long users_id=sessionManagement.checkSession(SID);    log.debug("saveAppointMent users_id:" + users_id);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkUserLevel(user_level)) {      List<Map<String,String>> newList=new ArrayList<Map<String,String>>();      for (      String singleClient : mmClient) {        String[] params=singleClient.split(",");        Map<String,String> map=new HashMap<String,String>();        map.put("meetingMemberId",params[0]);        map.put("firstname",params[1]);        map.put("lastname",params[2]);        map.put("email",params[3]);        map.put("userId",params[4]);        map.put("jNameTimeZone",params[5]);        newList.add(map);      }      Long id=appointmentLogic.saveAppointment(appointmentName,users_id,appointmentLocation,appointmentDescription,appointmentstart.getTime(),appointmentend.getTime(),isDaily,isWeekly,isMonthly,isYearly,categoryId,remind,newList,roomType,baseUrl,languageId,isPasswordProtected,password);      return id;    } else {      log.error("saveAppointment : wrong user level");    }  } catch (  Exception err) {    log.error("[saveAppointment]",err);  }  return null;}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  private void calcStackSize(List<BarEntry> yVals){  for (int i=0; i < yVals.size(); i++) {    float[] vals=yVals.get(i).getVals();    if (vals != null && vals.length > mStackSize)     mStackSize=vals.length;  }}  }
class C{  public Months multipliedBy(int scalar){  return Months.months(FieldUtils.safeMultiply(getValue(),scalar));}  }
class C{  public void isClosedCurve(boolean closed){  mIsClosed=closed;}  }
class C{  public LinkedHashSet(int initialCapacity){  super(initialCapacity,.75f,true);}  }
class C{  public void initializeFromIntent(Intent intent,Bundle savedInstanceState){  Window window=activity.getWindow();  window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);  if (savedInstanceState != null) {    this.orientationLock=savedInstanceState.getInt(SAVED_ORIENTATION_LOCK,ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);  }  if (intent != null) {    if (orientationLock == ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED) {      boolean orientationLocked=intent.getBooleanExtra(Intents.Scan.ORIENTATION_LOCKED,true);      if (orientationLocked) {        lockOrientation();      }    }    if (Intents.Scan.ACTION.equals(intent.getAction())) {      barcodeView.initializeFromIntent(intent);    }    if (!intent.getBooleanExtra(Intents.Scan.BEEP_ENABLED,true)) {      beepManager.setBeepEnabled(false);      beepManager.updatePrefs();    }    if (intent.getBooleanExtra(Intents.Scan.BARCODE_IMAGE_ENABLED,false)) {      returnBarcodeImagePath=true;    }  }}  }
class C{  public static void main(String args[]){  File sourceDir=getSourceDir(args,0);  Path sourcePath=sourceDir.toPath();  File translationFile=getTranslationFile(args,1);  List<String> extensions=ListManager.string2vector(getExtensions(args,2));  FilenameFilter fileFilter=new ExtensionsFileFilter(extensions);  String excludedDir="locale";  ConcurrentLog.info("ListNonTranslatedFiles","Listing non translated " + extensions + " files from "+ sourceDir+ " using "+ translationFile);  try {    Set<String> translatedRelativePaths=new Translator().loadTranslationsLists(translationFile).keySet();    List<File> srcFiles=FileUtils.getFilesRecursive(sourceDir,excludedDir,fileFilter);    List<File> nonTranslatedFiles=new ArrayList<>();    for (    File srcFile : srcFiles) {      Path relativeSrcFile=sourcePath.relativize(srcFile.toPath());      if (!translatedRelativePaths.contains(relativeSrcFile.toString().replace('\\','/'))) {        nonTranslatedFiles.add(srcFile);      }    }    printResults(nonTranslatedFiles);  }  finally {    ConcurrentLog.shutdown();  }}  }
class C{  public static boolean containsIgnoreCase(String[] array,String value){  for (  String str : array) {    if (value == null && str == null)     return true;    if (value != null && value.equalsIgnoreCase(str))     return true;  }  return false;}  }
class C{  public void removeCommandListener(ActionListener l){  if (globalCommandListeners == null) {    return;  }  globalCommandListeners.removeListener(l);}  }
class C{  public void addListener(NotificationListener listener){  CENTER.addListener(listener);}  }
class C{  public boolean isHover(int row){  return getBoolean(row,VisualItem.HOVER);}  }
class C{  public static void init(){  init(System.getProperties());}  }
class C{  public static Response createConnectionBindErrorResponse(char errorCode,String reasonPhrase) throws IllegalArgumentException {  Response connectionBindErrorResponse=new Response();  connectionBindErrorResponse.setMessageType(Message.CONNECTION_BIND_ERROR_RESPONSE);  ErrorCodeAttribute errorCodeAttribute=AttributeFactory.createErrorCodeAttribute(errorCode,reasonPhrase);  connectionBindErrorResponse.putAttribute(errorCodeAttribute);  return connectionBindErrorResponse;}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  DecimalFormat dft=new DecimalFormat("###.##");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  public long skip(long n) throws IOException {  return fInputStream.skip(n);}  }
class C{  public boolean hasConnection(int serverId){  return connections.containsKey(serverId);}  }
class C{  public static boolean isPrivate(int accflags){  return (accflags & PRIVATE) != 0;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS:    return ((InternalEList<?>)getAstStructuralMembers()).basicRemove(otherEnd,msgs);case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS:  return ((InternalEList<?>)getGenStructuralMembers()).basicRemove(otherEnd,msgs);case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS:return ((InternalEList<?>)getPostponedSubstitutions()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void assertProvisionNamespaceNotification(final Notification notification,final Account expectedOwner,final NamespaceId expectedNamespaceId){  final ProvisionNamespaceNotification n=(ProvisionNamespaceNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.ProvisionNamespace));  Assert.assertThat(n.getOwner(),IsEqual.equalTo(expectedOwner));  Assert.assertThat(n.getNamespaceId(),IsEqual.equalTo(expectedNamespaceId));}  }
class C{  public QueryNextRequest clone(){  QueryNextRequest result=new QueryNextRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.ReleaseContinuationPoint=ReleaseContinuationPoint;  result.ContinuationPoint=ContinuationPoint;  return result;}  }
class C{  public boolean visit(ConstructorInvocation node){  return true;}  }
class C{  public static void printStack(boolean adempiereOnly,boolean first9only){  Throwable t=new Throwable();  int counter=0;  StackTraceElement[] elements=t.getStackTrace();  for (int i=1; i < elements.length; i++) {    if (elements[i].getClassName().indexOf("util.Trace") != -1)     continue;    if (!adempiereOnly || (adempiereOnly && elements[i].getClassName().startsWith("org.compiere"))) {      log.fine(i + ": " + elements[i]);      if (first9only && ++counter > 8)       break;    }  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void testComputeSignificanceDoesntAlterAverage() throws Exception {  TransferEntropyCalculatorMultiVariateKernel teCalc=new TransferEntropyCalculatorMultiVariateKernel();  String kernelWidth="1";  teCalc.setProperty(TransferEntropyCalculatorMultiVariateKernel.NORMALISE_PROP_NAME,"true");  teCalc.setProperty(TransferEntropyCalculatorMultiVariateKernel.EPSILON_PROP_NAME,kernelWidth);  super.testComputeSignificanceDoesntAlterAverage(teCalc,2,100,1);}  }
class C{  public Vector2d sub(double x,double y){  this.x-=x;  this.y-=y;  return this;}  }
class C{  protected void pruneCandidateCanopies(){  if (m_didPruneLastTime == false && m_canopies.size() == m_maxCanopyCandidates) {    return;  }  m_didPruneLastTime=false;  for (int i=m_canopies.numInstances() - 1; i >= 0; i--) {    double dens=m_canopyT2Density.get(i)[0];    if (dens < m_minClusterDensity) {      double[] tempDens=m_canopyT2Density.remove(m_canopyT2Density.size() - 1);      if (i < m_canopyT2Density.size()) {        m_canopyT2Density.set(i,tempDens);      }      if (getDebug()) {        System.err.println("Pruning a candidate canopy with density: " + dens);      }      m_didPruneLastTime=true;      double[][] tempCenter=m_canopyCenters.remove(m_canopyCenters.size() - 1);      if (i < m_canopyCenters.size()) {        m_canopyCenters.set(i,tempCenter);      }      double[] tempNumMissingNumerics=m_canopyNumMissingForNumerics.remove(m_canopyNumMissingForNumerics.size() - 1);      if (i < m_canopyNumMissingForNumerics.size()) {        m_canopyNumMissingForNumerics.set(i,tempNumMissingNumerics);      }      if (i != m_canopies.numInstances() - 1) {        m_canopies.swap(i,m_canopies.numInstances() - 1);      }      m_canopies.delete(m_canopies.numInstances() - 1);    }  }}  }
class C{  public int _getNumberOfEmptyBuffers(){  int count=0;  for (int i=buffers.length; --i >= 0; ) {    if (buffers[i].isEmpty())     count++;  }  return count;}  }
class C{  public T auth(AccountHandle handle){  ah=handle;  return self();}  }
class C{  public void entering(String sourceClass,String sourceMethod,Object params[]){  String msg="ENTRY";  if (params == null) {    logp(Level.FINER,sourceClass,sourceMethod,msg);    return;  }  if (!isLoggable(Level.FINER))   return;  for (int i=0; i < params.length; i++) {    msg=msg + " {" + i+ "}";  }  logp(Level.FINER,sourceClass,sourceMethod,msg,params);}  }
class C{  public void echo(Node n){  outputIndentation();  int type=n.getNodeType();switch (type) {case Node.ATTRIBUTE_NODE:    m_out.print("ATTR:");  printlnCommon(n);break;case Node.CDATA_SECTION_NODE:m_out.print("CDATA:");printlnCommon(n);break;case Node.COMMENT_NODE:m_out.print("COMM:");printlnCommon(n);break;case Node.DOCUMENT_FRAGMENT_NODE:m_out.print("DOC_FRAG:");printlnCommon(n);break;case Node.DOCUMENT_NODE:m_out.print("DOC:");printlnCommon(n);break;case Node.DOCUMENT_TYPE_NODE:m_out.print("DOC_TYPE:");printlnCommon(n);NamedNodeMap nodeMap=((DocumentType)n).getEntities();m_indent+=2;for (int i=0; i < nodeMap.getLength(); i++) {Entity entity=(Entity)nodeMap.item(i);echo(entity);}m_indent-=2;break;case Node.ELEMENT_NODE:m_out.print("ELEM:");printlnCommon(n);NamedNodeMap atts=n.getAttributes();m_indent+=2;for (int i=0; i < atts.getLength(); i++) {Node att=atts.item(i);echo(att);}m_indent-=2;break;case Node.ENTITY_NODE:m_out.print("ENT:");printlnCommon(n);break;case Node.ENTITY_REFERENCE_NODE:m_out.print("ENT_REF:");printlnCommon(n);break;case Node.NOTATION_NODE:m_out.print("NOTATION:");printlnCommon(n);break;case Node.PROCESSING_INSTRUCTION_NODE:m_out.print("PROC_INST:");printlnCommon(n);break;case Node.TEXT_NODE:m_out.print("TEXT:");printlnCommon(n);break;default :m_out.print("UNSUPPORTED NODE: " + type);printlnCommon(n);break;}m_indent++;for (Node child=n.getFirstChild(); child != null; child=child.getNextSibling()) {echo(child);}m_indent--;}  }
class C{  public InMemoryDocument(final InputStream inputStream,final String name) throws DSSException {  this(DSSUtils.toByteArray(inputStream),name);}  }
class C{  private MPInstance fillParameter(HttpServletRequest request,MProcess process){  MPInstance pInstance=new MPInstance(process,0);  MPInstancePara[] iParams=pInstance.getParameters();  for (int pi=0; pi < iParams.length; pi++) {    MPInstancePara iPara=iParams[pi];    String key=iPara.getParameterName();    MProcessPara pPara=process.getParameter(key);    if (pPara == null) {      log.log(Level.SEVERE,"Parameter not found: " + key);      continue;    }    String valueString=WebUtil.getParameter(request,key);    log.fine("fillParameter - " + key + " = "+ valueString);    Object value=valueString;    if (valueString != null && valueString.length() == 0)     value=null;    if (value == null) {    } else {      try {        if (DisplayType.isNumeric(pPara.getAD_Reference_ID()) || DisplayType.isID(pPara.getAD_Reference_ID())) {          BigDecimal bd=null;          if (value instanceof BigDecimal)           bd=(BigDecimal)value; else           if (value instanceof Integer)           bd=new BigDecimal(((Integer)value).intValue()); else           bd=new BigDecimal(value.toString());          iPara.setP_Number(bd);          log.fine("fillParameter - " + key + " = "+ valueString+ " (="+ bd+ "=)");        } else         if (DisplayType.isDate(pPara.getAD_Reference_ID())) {          Timestamp ts=null;          if (value instanceof Timestamp)           ts=(Timestamp)value; else           ts=Timestamp.valueOf(value.toString());          iPara.setP_Date(ts);          log.fine("fillParameter - " + key + " = "+ valueString+ " (="+ ts+ "=)");        } else {          iPara.setP_String(value.toString());        }        iPara.saveEx();      } catch (      Exception e) {        log.warning("fillParameter - " + key + " = "+ valueString+ " ("+ value+ ") "+ value.getClass().getName()+ " - "+ e.getLocalizedMessage());      }    }  }  return pInstance;}  }
class C{  public boolean isCreateNewBatch(){  Object oo=get_Value(COLUMNNAME_IsCreateNewBatch);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void futureDoubleResult(long futPtr,double res){  enter();  try {    PlatformCallbackUtils.futureDoubleResult(envPtr,futPtr,res);  }  finally {    leave();  }}  }
class C{  final void split(HashMap<K,V> map,Node<K,V>[] tab,int index,int bit){  TreeNode<K,V> b=this;  TreeNode<K,V> loHead=null, loTail=null;  TreeNode<K,V> hiHead=null, hiTail=null;  int lc=0, hc=0;  for (TreeNode<K,V> e=b, next; e != null; e=next) {    next=(TreeNode<K,V>)e.next;    e.next=null;    if ((e.hash & bit) == 0) {      if ((e.prev=loTail) == null)       loHead=e; else       loTail.next=e;      loTail=e;      ++lc;    } else {      if ((e.prev=hiTail) == null)       hiHead=e; else       hiTail.next=e;      hiTail=e;      ++hc;    }  }  if (loHead != null) {    if (lc <= UNTREEIFY_THRESHOLD)     tab[index]=loHead.untreeify(map); else {      tab[index]=loHead;      if (hiHead != null)       loHead.treeify(tab);    }  }  if (hiHead != null) {    if (hc <= UNTREEIFY_THRESHOLD)     tab[index + bit]=hiHead.untreeify(map); else {      tab[index + bit]=hiHead;      if (loHead != null)       hiHead.treeify(tab);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static byte[] splitUint8To2bytes(char uint8){  if (uint8 < 0 || uint8 > 0xff) {    throw new RuntimeException("Out of Boundary");  }  String hexString=Integer.toHexString(uint8);  byte low;  byte high;  if (hexString.length() > 1) {    high=(byte)Integer.parseInt(hexString.substring(0,1),16);    low=(byte)Integer.parseInt(hexString.substring(1,2),16);  } else {    high=0;    low=(byte)Integer.parseInt(hexString.substring(0,1),16);  }  byte[] result=new byte[]{high,low};  return result;}  }
class C{  private int findInsertPosition(String newTabName){  if (order == TabOrder.ALPHABETIC) {    for (int i=0; i < tabs.getTabCount(); i++) {      if (newTabName.compareToIgnoreCase(tabs.getTitleAt(i)) < 0) {        return i;      }    }  }  return tabs.getTabCount();}  }
class C{  protected void processCloudletMove(int[] receivedData,int type){  updateCloudletProcessing();  int[] array=receivedData;  int cloudletId=array[0];  int userId=array[1];  int vmId=array[2];  int containerId=array[3];  int vmDestId=array[4];  int containerDestId=array[5];  int destId=array[6];  Cloudlet cl=getVmAllocationPolicy().getHost(vmId,userId).getContainerVm(vmId,userId).getContainer(containerId,userId).getContainerCloudletScheduler().cloudletCancel(cloudletId);  boolean failed=false;  if (cl == null) {    failed=true;  } else {    if (cl.getCloudletStatusString().equals("Success")) {      int[] data=new int[3];      data[0]=getId();      data[1]=cloudletId;      data[2]=0;      sendNow(cl.getUserId(),CloudSimTags.CLOUDLET_SUBMIT_ACK,data);      sendNow(cl.getUserId(),CloudSimTags.CLOUDLET_RETURN,cl);    }    cl.setVmId(vmDestId);    if (destId == getId()) {      ContainerVm containerVm=getVmAllocationPolicy().getHost(vmDestId,userId).getContainerVm(vmDestId,userId);      if (containerVm == null) {        failed=true;      } else {        double fileTransferTime=predictFileTransferTime(cl.getRequiredFiles());        containerVm.getContainer(containerDestId,userId).getContainerCloudletScheduler().cloudletSubmit(cl,fileTransferTime);      }    } else {      int tag=((type == CloudSimTags.CLOUDLET_MOVE_ACK) ? CloudSimTags.CLOUDLET_SUBMIT_ACK : CloudSimTags.CLOUDLET_SUBMIT);      sendNow(destId,tag,cl);    }  }  if (type == CloudSimTags.CLOUDLET_MOVE_ACK) {    int[] data=new int[3];    data[0]=getId();    data[1]=cloudletId;    if (failed) {      data[2]=0;    } else {      data[2]=1;    }    sendNow(cl.getUserId(),CloudSimTags.CLOUDLET_SUBMIT_ACK,data);  }}  }
class C{  private static void expandFieldArray(Object instance,String fieldName,Object[] extraElements) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  System.arraycopy(original,0,combined,0,original.length);  System.arraycopy(extraElements,0,combined,original.length,extraElements.length);  jlrField.set(instance,combined);}  }
class C{  public void select(int start,int end){  int docEnd=textArea.getDocument().getLength();  textArea.select(docEnd,docEnd);  textArea.select(start,end);}  }
class C{  public static boolean hasContextParam(WebXml webXml,String theParamName){  return getContextParam(webXml,theParamName) != null;}  }
class C{  public DUOL(KernelTrick k){  this.k=k;  this.S=new ArrayList<Vec>();  this.f_s=new DoubleList();  this.alphas=new DoubleList();}  }
class C{  public boolean columnUpdated(int idx) throws SQLException {  checkCursor();  if (onInsertRow == true) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidop").toString());  }  return (((Row)getCurrentRow()).getColUpdated(idx - 1));}  }
class C{  private Optional(T value){  this.value=Objects.requireNonNull(value);}  }
class C{  @Override public void visitLambda(JCLambda tree){  LambdaTranslationContext localContext=(LambdaTranslationContext)context;  MethodSymbol sym=localContext.translatedSym;  MethodType lambdaType=(MethodType)sym.type;{    Symbol owner=localContext.owner;    ListBuffer<Attribute.TypeCompound> ownerTypeAnnos=new ListBuffer<Attribute.TypeCompound>();    ListBuffer<Attribute.TypeCompound> lambdaTypeAnnos=new ListBuffer<Attribute.TypeCompound>();    for (    Attribute.TypeCompound tc : owner.getRawTypeAttributes()) {      if (tc.position.onLambda == tree) {        lambdaTypeAnnos.append(tc);      } else {        ownerTypeAnnos.append(tc);      }    }    if (lambdaTypeAnnos.nonEmpty()) {      owner.setTypeAttributes(ownerTypeAnnos.toList());      sym.setTypeAttributes(lambdaTypeAnnos.toList());    }  }  JCMethodDecl lambdaDecl=make.MethodDef(make.Modifiers(sym.flags_field),sym.name,make.QualIdent(lambdaType.getReturnType().tsym),List.<JCTypeParameter>nil(),localContext.syntheticParams,lambdaType.getThrownTypes() == null ? List.<JCExpression>nil() : make.Types(lambdaType.getThrownTypes()),null,null);  lambdaDecl.sym=sym;  lambdaDecl.type=lambdaType;  lambdaDecl.body=translate(makeLambdaBody(tree,lambdaDecl));  kInfo.addMethod(lambdaDecl);  ListBuffer<JCExpression> syntheticInits=new ListBuffer<>();  if (localContext.methodReferenceReceiver != null) {    syntheticInits.append(localContext.methodReferenceReceiver);  } else   if (!sym.isStatic()) {    syntheticInits.append(makeThis(sym.owner.enclClass().asType(),localContext.owner.enclClass()));  }  for (  Symbol fv : localContext.getSymbolMap(CAPTURED_VAR).keySet()) {    if (fv != localContext.self) {      JCTree captured_local=make.Ident(fv).setType(fv.type);      syntheticInits.append((JCExpression)captured_local);    }  }  List<JCExpression> indy_args=translate(syntheticInits.toList(),localContext.prev);  int refKind=referenceKind(sym);  result=makeMetafactoryIndyCall(context,refKind,sym,indy_args);}  }
class C{  void cancel(){  canceled=true;}  }
class C{  public UnknownFormatFlagsException(String f){  if (f == null)   throw new NullPointerException();  this.flags=f;}  }
class C{  public SWFShape tagDefineShape3(int id,Rect outline) throws IOException {  startShape(TAG_DEFINESHAPE3,id,outline);  return factorySWFShape(true,true);}  }
class C{  public PDFObject dereference() throws IOException {  if (type == INDIRECT) {    PDFObject obj=null;    if (cache != null) {      obj=(PDFObject)cache.get();    }    if (obj == null || obj.value == null) {      if (owner == null) {        System.out.println("Bad seed (owner==null)!  Object=" + this);      }      obj=owner.dereference((PDFXref)value,getDecrypter());      cache=new SoftReference<PDFObject>(obj);    }    return obj;  } else {    return this;  }}  }
class C{  public KMLFeatureTreeNode(KMLAbstractFeature feature){  super("");  if (feature == null) {    String message=Logging.getMessage("nullValue.FeatureIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.feature=feature;  this.initialize();}  }
class C{  private TerminationThread(){  super("TerminationThread");}  }
class C{  public boolean makeReflective(String classname,String metaobject,String metaclass) throws CannotCompileException, NotFoundException {  return makeReflective(classPool.get(classname),classPool.get(metaobject),classPool.get(metaclass));}  }
class C{  public void skip() throws NoSuchElementException {  throwIfNotReset();  throwIfDelimiterNotSet();  advance();}  }
class C{  public static void zipTo(File dir,File destFile){  FileOutputStream ops=null;  ZipOutputStream zos=null;  try {    ops=new FileOutputStream(destFile);    zos=new ZipOutputStream(ops);    zipDir(dir,zos,"");  } catch (  FileNotFoundException e) {    e.printStackTrace();  } finally {    try {      if (zos != null)       zos.close(); else       if (ops != null)       ops.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public static GeoQuery query(String name,String geohash,int... precisions){  return new GeoQuery(name,geohash,precisions);}  }
class C{  public int countPredicates(int opPos) throws TransformerException {  int count=0;  while (OpCodes.OP_PREDICATE == getOp(opPos)) {    count++;    opPos=getNextOpPos(opPos);  }  return count;}  }
class C{  @After public void tearDown(){  problem=null;  solution1=null;  solution2=null;  solution3=null;}  }
class C{  private void extractKeys(Properties props){  String keyspec=props.getProperty(io.warp10.continuum.Configuration.STORE_KAFKA_DATA_MAC);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length,"Key " + io.warp10.continuum.Configuration.STORE_KAFKA_DATA_MAC + " MUST be 128 bits long.");    this.keystore.setKey(KeyStore.SIPHASH_KAFKA_DATA,key);  }  keyspec=props.getProperty(io.warp10.continuum.Configuration.STORE_KAFKA_DATA_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + io.warp10.continuum.Configuration.STORE_KAFKA_DATA_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_KAFKA_DATA,key);  }  keyspec=props.getProperty(io.warp10.continuum.Configuration.STORE_HBASE_DATA_AES);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + io.warp10.continuum.Configuration.STORE_HBASE_DATA_AES + " MUST be 128, 192 or 256 bits long.");    this.keystore.setKey(KeyStore.AES_HBASE_DATA,key);  }}  }
class C{  protected boolean beforeInit(SiteInit init) throws Exception {  return false;}  }
class C{  protected byte[] toBytes(Object obj) throws IgniteCheckedException {  return marsh.marshal(obj);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void addWeblogicDescriptor() throws IOException, JDOMException {  InputStream in=null;  try {    in=getResource("WEB-INF/weblogic.xml");    if (in != null) {      WeblogicXml descr=WeblogicXmlIo.parseWeblogicXml(in);      if (descr != null) {        this.webXml.addVendorDescriptor(descr);      }    }  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public static Border createBevelRaised(int highlightOuter,int highlightInner,int shadowOuter,int shadowInner){  Border b=new Border();  b.type=TYPE_BEVEL_RAISED;  b.themeColors=false;  b.colorA=highlightOuter;  b.colorB=highlightInner;  b.colorC=shadowOuter;  b.colorD=shadowInner;  b.thickness=2;  return b;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public void addEffect(PostProcessorEffect effect){  effectsManager.add(effect);}  }
class C{  public String toString(){  return "JPAProperty ( " + "id = " + this.id + " "+ "localName = "+ this.localName+ " "+ "namespace = "+ this.namespace+ " "+ "value = "+ this.value+ " )";}  }
class C{  Key unseal(SealedObject so) throws NoSuchAlgorithmException, UnrecoverableKeyException {  try {    PBEKeySpec pbeKeySpec=new PBEKeySpec(this.password);    SecretKey skey=new PBEKey(pbeKeySpec,"PBEWithMD5AndTripleDES");    pbeKeySpec.clearPassword();    SealedObjectForKeyProtector soForKeyProtector=null;    if (!(so instanceof SealedObjectForKeyProtector)) {      soForKeyProtector=new SealedObjectForKeyProtector(so);    } else {      soForKeyProtector=(SealedObjectForKeyProtector)so;    }    AlgorithmParameters params=soForKeyProtector.getParameters();    if (params == null) {      throw new UnrecoverableKeyException("Cannot get " + "algorithm parameters");    }    PBEWithMD5AndTripleDESCipher cipherSpi;    cipherSpi=new PBEWithMD5AndTripleDESCipher();    Cipher cipher=new CipherForKeyProtector(cipherSpi,SunJCE.getInstance(),"PBEWithMD5AndTripleDES");    cipher.init(Cipher.DECRYPT_MODE,skey,params);    return (Key)soForKeyProtector.getObject(cipher);  } catch (  NoSuchAlgorithmException ex) {    throw ex;  }catch (  IOException ioe) {    throw new UnrecoverableKeyException(ioe.getMessage());  }catch (  ClassNotFoundException cnfe) {    throw new UnrecoverableKeyException(cnfe.getMessage());  }catch (  GeneralSecurityException gse) {    throw new UnrecoverableKeyException(gse.getMessage());  }}  }
class C{  public void unregisterMBean(ObjectName name) throws InstanceNotFoundException, MBeanRegistrationException {  mbsInterceptor.unregisterMBean(cloneObjectName(name));}  }
class C{  public String sendTextSms(String text,String dest) throws SmsException, IOException {  SmsTextMessage textMessage=new SmsTextMessage(text,SmsAlphabet.ASCII,SmsMsgClass.CLASS_UNKNOWN);  return sendSms(textMessage,dest,null);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiDecode=DECODABET[source[i] & 0xFF];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=source[i];        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (source[i] == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character decimal %d in array position %d",((int)source[i]) & 0xFF,i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public MissingRequiredPropertyException(final String propertyName){  super("expected value for property %s, but none was found",propertyName);}  }
class C{  private void assertCompareTrue(Literal lit1,Literal lit2,CompareOp op,boolean strict) throws Exception {  assertTrue("Compare did not return true for " + lit1.toString() + op.getSymbol()+ lit2.toString(),QueryEvaluationUtil.compareLiterals(lit1,lit2,op,strict));}  }
class C{  public void configure(JobConf job){  this.jobConf=job;  this.urlFilters=new URLFilters(jobConf);  this.scfilters=new ScoringFilters(jobConf);  this.parseUtil=new ParseUtil(jobConf);  this.normalizers=new URLNormalizers(jobConf,URLNormalizers.SCOPE_FETCHER);  interval=jobConf.getInt("db.fetch.interval.default",2592000);}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  private List<JClass> computeJoinPath(MapBuilderTerm term1,MapBuilderTerm term2){  List<JClass> joinPath=new ArrayList<JClass>();  JClass jc=null;  if (term2.jclass.index > term1.jclass.index) {    joinPath.add(term2.jclass);    String joinToAlias=term2.jclass.getJoinToAlias();    if (joinToAlias == null) {      throw new JoinerException(String.format("Cannot follow %s back to %s",term2.alias,term1.alias));    }    do {      jc=joiner.lookupAlias(joinToAlias);      if (jc == null) {        throw new JoinerException(String.format("Cannot find table for alias %s",joinToAlias));      }      joinPath.add(jc);      joinToAlias=jc.getJoinToAlias();    } while (joinToAlias != null && jc != term1.jclass);  } else {    joinPath.add(term1.jclass);    String joinToAlias=term1.jclass.getJoinToAlias();    do {      jc=joiner.lookupAlias(joinToAlias);      if (jc == null) {        throw new JoinerException(String.format("Cannot find table for alias %s",joinToAlias));      }      joinPath.add(jc);      joinToAlias=jc.getJoinToAlias();    } while (joinToAlias != null && jc != term2.jclass);  }  Collections.reverse(joinPath);  return joinPath;}  }
class C{  public Pool addPool(String name){  Pool pool=getPoolByName(name);  if (pool == null) {    _idPoolNumber++;    String id=_id + "p" + Integer.toString(_idPoolNumber);    log.debug("creating new pool ({}) id: {}",name,id);    pool=new Pool(id,name);    register(pool);  }  return pool;}  }
class C{  protected void drag(MotionEvent event,int action){switch (action) {case MotionEvent.ACTION_MOVE:    float dx=event.getRawX() - mLastX;  float dy=event.getRawY() - mLastY;float touchX=event.getX();float touchY=event.getY();switch (mDragDirection) {case CENTER:center(dx,dy);break;case SIDE:side(touchX,touchY,touchX + dx,touchY + dy);break;}mLastX=(int)event.getRawX();mLastY=(int)event.getRawY();break;case MotionEvent.ACTION_UP:mDragDirection=0;break;}}  }
class C{  private void emitPosition(PositionList.Entry entry) throws IOException {  SourcePosition pos=entry.getPosition();  int newLine=pos.getLine();  int newAddress=entry.getAddress();  int opcode;  int deltaLines=newLine - line;  int deltaAddress=newAddress - address;  if (deltaAddress < 0) {    throw new RuntimeException("Position entries must be in ascending address order");  }  if ((deltaLines < DBG_LINE_BASE) || (deltaLines > (DBG_LINE_BASE + DBG_LINE_RANGE - 1))) {    emitAdvanceLine(deltaLines);    deltaLines=0;  }  opcode=computeOpcode(deltaLines,deltaAddress);  if ((opcode & ~0xff) > 0) {    emitAdvancePc(deltaAddress);    deltaAddress=0;    opcode=computeOpcode(deltaLines,deltaAddress);    if ((opcode & ~0xff) > 0) {      emitAdvanceLine(deltaLines);      deltaLines=0;      opcode=computeOpcode(deltaLines,deltaAddress);    }  }  output.writeByte(opcode);  line+=deltaLines;  address+=deltaAddress;  if (annotateTo != null || debugPrint != null) {    annotate(1,String.format("%04x: line %d",address,line));  }}  }
class C{  public BarChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,Type type){  super(dataset,renderer);  mType=type;}  }
class C{  @Override public boolean isValid(AnnotatedTypeMirror type,Tree tree){  AnnotationMirror classVal=type.getAnnotation(ClassVal.class);  classVal=classVal == null ? type.getAnnotation(ClassBound.class) : classVal;  if (classVal != null) {    List<String> classNames=getClassNamesFromAnnotation(classVal);    for (    String className : classNames) {      if (!isLegalClassName(className)) {        checker.report(Result.failure("illegal.classname",className,type),tree);      }    }  }  return super.isValid(type,tree);}  }
class C{  private ImageMappings(){}  }
class C{  public static <K,V>Map<K,V> minus(Map<K,V> self,Map removeMe){  final Map<K,V> ansMap=createSimilarMap(self);  ansMap.putAll(self);  if (removeMe != null && !removeMe.isEmpty()) {    for (    Map.Entry<K,V> e1 : self.entrySet()) {      for (      Object e2 : removeMe.entrySet()) {        if (DefaultTypeTransformation.compareEqual(e1,e2)) {          ansMap.remove(e1.getKey());        }      }    }  }  return ansMap;}  }
class C{  public static <T,K,L extends List<T>>Consumer<Partition<T,K,L>> evictAll(){  return null;}  }
class C{  protected final void LONG_USHR(Instruction s,Operand result,Operand val1,Operand val2,boolean maskWith3f){  if (!val2.isIntConstant()) {    Binary.mutate(s,LONG_USHR,result.asRegister(),val1,val2);    EMIT(s);  } else   if (result.isRegister()) {    int shift=val2.asIntConstant().value;    if (maskWith3f) {      shift=shift & 0x3F;    }    Register lhsReg=result.asRegister().getRegister();    Register lowlhsReg=burs.ir.regpool.getSecondReg(lhsReg);    Register rhsReg1=val1.asRegister().getRegister();    Register lowrhsReg1=burs.ir.regpool.getSecondReg(rhsReg1);    if (shift == 0) {      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));      }    } else     if (shift == 1) {      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));      }      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHR,new RegisterOperand(lhsReg,TypeReference.Int),IC(1))));      EMIT(MIR_BinaryAcc.mutate(s,IA32_RCR,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(1)));    } else     if (shift < 32) {      Register tmp=regpool.getInteger();      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(tmp,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHL,new RegisterOperand(tmp,TypeReference.Int),IC(32 - shift))));      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(lowrhsReg1,TypeReference.Int))));      }      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHR,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(shift))));      EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_OR,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(tmp,TypeReference.Int))));      if (!result.similar(val1)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));      }      EMIT(MIR_BinaryAcc.mutate(s,IA32_SHR,new RegisterOperand(lhsReg,TypeReference.Int),IC(shift)));    } else     if (shift == 32) {      EMIT(MIR_Move.mutate(s,IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int)));      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),IC(0))));    } else {      if (maskWith3f || (shift < 64)) {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),new RegisterOperand(rhsReg1,TypeReference.Int))));        EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SHR,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(shift & 0x1F))));      } else {        EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(lowlhsReg,TypeReference.Int),IC(0))));      }      EMIT(MIR_Move.mutate(s,IA32_MOV,new RegisterOperand(lhsReg,TypeReference.Int),IC(0)));    }  } else {    throw new OptimizingCompilerException("BURS_Helpers","unexpected parameters: " + result + "="+ val1+ ">>"+ val2);  }}  }
class C{  private static Collection<IntergreenConstraint> calculateIntergreenConstraints(DgPhase lastPhase,DgPhase phase){  Map<SignalGroupSettingsData,IntergreenConstraint> map=new HashMap<SignalGroupSettingsData,IntergreenConstraint>();  IntergreenConstraint ic=null;  int intergreen;  for (  SignalGroupSettingsData settings : phase.getSignalGroupSettingsByGroupId().values()) {    for (    SignalGroupSettingsData lastSettings : lastPhase.getSignalGroupSettingsByGroupId().values()) {      intergreen=settings.getOnset() - lastSettings.getDropping();      log.info("intergreen: " + intergreen);      if (intergreen >= 0) {        if ((!map.containsKey(settings)) || map.get(settings).intergreen > intergreen) {          ic=new IntergreenConstraint();          ic.onSettingsId=settings.getSignalGroupId();          ic.droppingSettingsId=lastSettings.getSignalGroupId();          ic.intergreen=intergreen;          map.put(settings,ic);        }      }    }  }  return map.values();}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  LOG.info("Tool name: " + this.getClass().getName());  LOG.info(" - inputDir: " + args.input);  LOG.info(" - outputDir: " + args.output);  LOG.info(" - distance: " + args.distance);  Job job=Job.getInstance(getConf());  job.setJobName(String.format("FindNodeAtDistance[input: %s, output: %s, distance: %d]",args.input,args.output,args.distance));  job.setJarByClass(FindNodeAtDistance.class);  job.setNumReduceTasks(0);  job.getConfiguration().setInt(DISTANCE_KEY,args.distance);  job.getConfiguration().setInt("mapred.min.split.size",1024 * 1024 * 1024);  FileInputFormat.addInputPath(job,new Path(args.input));  FileOutputFormat.setOutputPath(job,new Path(args.output));  job.setInputFormatClass(SequenceFileInputFormat.class);  job.setOutputFormatClass(TextOutputFormat.class);  job.setMapOutputKeyClass(IntWritable.class);  job.setMapOutputValueClass(BfsNode.class);  job.setOutputKeyClass(IntWritable.class);  job.setOutputValueClass(BfsNode.class);  job.setMapperClass(MyMapper.class);  FileSystem.get(job.getConfiguration()).delete(new Path(args.output),true);  job.waitForCompletion(true);  return 0;}  }
class C{  public static Composite createComposite(Composite parent,Font font,int columns,int hspan,int fill){  Composite g=new Composite(parent,SWT.NONE);  g.setLayout(new GridLayout(columns,false));  g.setFont(font);  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  gd.grabExcessHorizontalSpace=true;  g.setLayoutData(gd);  return g;}  }
class C{  public void addAddition(String addition){  LocalDate additionDate=parseDateFormat(addition);  additions.add(additionDate);  MapUtils.getSet(additionDate,dateStats).add(this.getId());}  }
class C{  public static char[] encode(byte[] in,int iOff,int iLen){  int oDataLen=(iLen * 4 + 2) / 3;  int oLen=((iLen + 2) / 3) * 4;  char[] out=new char[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++] & 0xff;    int i1=ip < iEnd ? in[ip++] & 0xff : 0;    int i2=ip < iEnd ? in[ip++] & 0xff : 0;    int o0=i0 >>> 2;    int o1=((i0 & 3) << 4) | (i1 >>> 4);    int o2=((i1 & 0xf) << 2) | (i2 >>> 6);    int o3=i2 & 0x3F;    out[op++]=map1[o0];    out[op++]=map1[o1];    out[op]=op < oDataLen ? map1[o2] : '=';    op++;    out[op]=op < oDataLen ? map1[o3] : '=';    op++;  }  return out;}  }
class C{  public AvailabilityZone toAwsObject(){  AvailabilityZone availabilityZone=new AvailabilityZone();  availabilityZone.setRegionName(regionName);  availabilityZone.setZoneName(zoneName);  return availabilityZone;}  }
class C{  public static ClassInfo findClass(String dalvikClassName){  return ClassInfo.findClass(toCanonicalName(dalvikClassName));}  }
class C{  private String loadLicense() throws IOException {  StringBuilder sb=new StringBuilder();  BufferedReader reader=null;  String line=null;  boolean isNewParagraph=false;  try {    reader=new BufferedReader(new InputStreamReader(getClass().getResourceAsStream("/META-INF/LGPL-LICENSE")));    while ((line=reader.readLine()) != null) {      line=line.trim();      if (line.isEmpty()) {        isNewParagraph=true;      } else {        if (isNewParagraph) {          sb.append(Settings.NEW_LINE);          sb.append(Settings.NEW_LINE);        } else {          sb.append(' ');        }        sb.append(line);        isNewParagraph=false;      }    }    return sb.toString();  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  private ConsistencyLevel parseConsistencyLevel(String level){  if (level == null)   return null;  try {    return ConsistencyLevel.valueOf(level.trim().toUpperCase());  } catch (  Throwable e) {    throw new IgniteException("Incorrect consistency level '" + level + "' specified for Cassandra connection",e);  }}  }
class C{  private void dynInit(boolean createNew){  fillResourceType();  fillResource();  fieldResourceType.addEventListener(Events.ON_SELECT,this);  fieldResource.addEventListener(Events.ON_SELECT,this);  fieldDate.setValue(m_dateFrom);  fieldDate.getDatebox().addEventListener(Events.ON_BLUR,this);  fieldDate.getTimebox().addEventListener(Events.ON_BLUR,this);  bPrevious.addEventListener(Events.ON_CLICK,this);  bNext.addEventListener(Events.ON_CLICK,this);  confirmPanel.addActionListener(Events.ON_CLICK,this);  if (createNew) {    Button btnNew=new Button();    btnNew.setName("btnNew");    btnNew.setId("New");    btnNew.setSrc("/images/New24.png");    confirmPanel.addComponentsLeft(btnNew);    btnNew.addEventListener(Events.ON_CLICK,this);  }  displayCalendar();}  }
class C{  public ProbFci(IndependenceTest independenceTest,List<Node> searchVars){  if (independenceTest == null || knowledge == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());  Set<Node> remVars=new HashSet<>();  for (  Node node1 : this.variables) {    boolean search=false;    for (    Node node2 : searchVars) {      if (node1.getName().equals(node2.getName())) {        search=true;      }    }    if (!search) {      remVars.add(node1);    }  }  this.variables.removeAll(remVars);}  }
class C{  protected void showNotify(){  setVisible(true);}  }
class C{  public void exclude(final PathMatcher matcher){  excludeMatchers.add(matcher);}  }
class C{  public static Spacing createSpacing(int minSpaces,int maxSpaces,int minLineFeeds,boolean keepLineBreaks,int keepBlankLines){  return myFactory.createSpacing(minSpaces,maxSpaces,minLineFeeds,keepLineBreaks,keepBlankLines);}  }
class C{  public void mergeInPlace(@NotNull char[] data,int length,@NotNull List<? extends TextChangeImpl> changes) throws IllegalArgumentException {  if (changes.isEmpty()) {    return;  }  int diff=0;  for (  TextChangeImpl change : changes) {    diff+=change.getDiff();  }  if (length + diff > data.length) {    throw new IllegalArgumentException(String.format("Can't perform in-place changes merge. Reason: data array is not big enough to hold resulting text. Current size: %d, " + "minimum size: %d",data.length,length + diff));  }  try {    for (Context context=new Context(changes,data,length,length + diff); !context.isComplete(); ) {      if (!context.startGroup()) {        return;      }      context.endGroup();    }  } catch (  RuntimeException e) {    StringBuilder changesDescription=new StringBuilder();    for (    TextChangeImpl change : changes) {      changesDescription.append(change.getText().length()).append(":").append(change.getStart()).append("-").append(change.getEnd()).append(",");    }    if (changesDescription.length() > 0) {      changesDescription.setLength(changesDescription.length() - 1);    }    LOG.error(String.format("Invalid attempt to perform in-place document changes merge detected. Initial text length: %d, data array length: %d, " + "changes: [%s], changes diff: %d",length,data.length,changesDescription,diff),e);    char[] merged=mergeToCharArray(data,length,changes);    System.arraycopy(merged,0,data,0,length + diff);  }}  }
class C{  public void transform(Matrix mat){  state.xform.preConcat(mat);  g.setMatrix(state.xform);}  }
class C{  public static void main(String[] args){  String filename=null;  try {    filename=args[0];    if (args.length > 1)     throw new Exception();  } catch (  Exception e) {    System.err.println("usage: java edu.illinois.cs.cogcomp.lbjava.edu.illinois.cs.cogcomp.lbjava.nlp.WordSplitter <file name>");    System.exit(1);  }  WordSplitter splitter=new WordSplitter(new SentenceSplitter(filename));  for (LinkedVector s=(LinkedVector)splitter.next(); s != null; s=(LinkedVector)splitter.next()) {    if (s.size() > 0) {      Word w=(Word)s.get(0);      System.out.print(w.form);      for (w=(Word)w.next; w != null; w=(Word)w.next)       System.out.print(" " + w.form);    }    System.out.println();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE:    return definedType != null;}return super.eIsSet(featureID);}  }
class C{  public final int hashCode(){  if (toString() == null) {    return 0;  }  return toString().hashCode();}  }
class C{  public static String[][] read(final InputStream is,final String delim) throws IOException {  String[][] result=null;  List<String[]> list=new ArrayList<String[]>();  String inputLine;  BufferedReader reader=new BufferedReader(new InputStreamReader(is,"UTF-8"));  while ((inputLine=reader.readLine()) != null) {    try {      String[] item;      if (delim == null) {        item=parseLine(inputLine,DELIM_CHAR);      } else {        item=parseLine(inputLine,delim);      }      if (item != null) {        list.add(item);      }    } catch (    Exception e) {    }  }  reader.close();  if (list.size() > 0) {    result=new String[list.size()][];    list.toArray(result);  }  return result;}  }
class C{  public static boolean registerXSerializable(Class<?> clazz){  boolean add=!s_xserializable.contains(clazz);  if (add)   s_xserializable.add(clazz);  return add;}  }
class C{  public static void makeMatrixFile(Number matrix[],String outputFileName) throws IOException {  int rowSize=matrix.length;  createDirectories(outputFileName);  BufferedWriter out=new BufferedWriter(new FileWriter(outputFileName));  for (int i=0; i < rowSize; i++) {    out.write(String.valueOf(matrix[i]) + "\n");  }  out.close();}  }
class C{  public int clockSequence(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return clockSequence;}  }
class C{  public boolean isObjectsShouldBeOutside(int dy){  mDragDirection=dy > 0 ? BOTTOM : TOP;  if (mDragDirection != mOldDirection) {    mDraggedAmount=0;  }  mDraggedAmount+=dy;  boolean shouldBeOutside=false;  if (mDragDirection == TOP && Math.abs(mDraggedAmount) > mMinFlingDistance) {    shouldBeOutside=false;  } else   if (mDragDirection == BOTTOM && mDraggedAmount > mMinFlingDistance) {    shouldBeOutside=true;  }  if (mOldDirection != mDragDirection) {    mOldDirection=mDragDirection;  }  return shouldBeOutside;}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  public static Vector3 directionToAzEl(ReadOnlyVector3 direction,Vector3 angle){  if (angle == null) {    angle=new Vector3();  }  double azAngle=0;  if ((Math.abs(direction.getX()) > 0.0000001) || (Math.abs(direction.getY()) > 0.0000001)) {    angle.set(direction);    angle.setZ(0);    angle.normalizeLocal();    azAngle=(Math.acos(Vector3.UNIT_Y.dot(angle)));    if (angle.getX() < 0) {      azAngle=Math.PI * 2 - azAngle;    }  }  angle.set(Math.sqrt(direction.getX() * direction.getX() + direction.getY() * direction.getY()),direction.getZ(),0);  angle.normalizeLocal();  double tiltAngle=Math.acos(Vector3.UNIT_X.dot(angle));  if (angle.getY() < 0) {    tiltAngle=-tiltAngle;  }  angle.set(azAngle,tiltAngle,0);  return (angle);}  }
class C{  public SpecialWindow(String title,int prefTitleStyle){  super(title,prefTitleStyle);}  }
class C{  @Override protected void drawXLabels(List<Double> xLabels,Double[] xTextLabelLocations,Canvas canvas,Paint paint,int left,int top,int bottom,double xPixelsPerUnit,double minX,double maxX){  int length=xLabels.size();  if (length > 0) {    boolean showLabels=mRenderer.isShowLabels();    boolean showGridY=mRenderer.isShowGridY();    DateFormat format=getDateFormat(xLabels.get(0),xLabels.get(length - 1));    for (int i=0; i < length; i++) {      long label=Math.round(xLabels.get(i));      float xLabel=(float)(left + xPixelsPerUnit * (label - minX));      if (showLabels) {        paint.setColor(mRenderer.getXLabelsColor());        canvas.drawLine(xLabel,bottom,xLabel,bottom + mRenderer.getLabelsTextSize() / 3,paint);        drawText(canvas,format.format(new Date(label)),xLabel,bottom + mRenderer.getLabelsTextSize() * 4 / 3 + mRenderer.getXLabelsPadding(),paint,mRenderer.getXLabelsAngle());      }      if (showGridY) {        paint.setColor(mRenderer.getGridColor(0));        canvas.drawLine(xLabel,bottom,xLabel,top,paint);      }    }  }  drawXTextLabels(xTextLabelLocations,canvas,paint,true,left,top,bottom,xPixelsPerUnit,minX,maxX);}  }
class C{  public T axis(String value){  return attr("axis",value);}  }
class C{  public static Record createRecord(ModelRecord modelRecord,Map<String,Object> fields) throws DataFileException {  Record record=new Record(modelRecord,fields);  return record;}  }
class C{  public boolean isFileTransferSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_FILE_TRANSFER);}  }
class C{  public ClientHello(SecureRandom sr,byte[] version,byte[] ses_id,CipherSuite[] cipher_suite){  client_version=version;  long gmt_unix_time=System.currentTimeMillis() / 1000;  sr.nextBytes(random);  random[0]=(byte)(gmt_unix_time & 0xFF000000 >>> 24);  random[1]=(byte)(gmt_unix_time & 0xFF0000 >>> 16);  random[2]=(byte)(gmt_unix_time & 0xFF00 >>> 8);  random[3]=(byte)(gmt_unix_time & 0xFF);  session_id=ses_id;  this.cipher_suites=cipher_suite;  compression_methods=new byte[]{0};  length=38 + session_id.length + (this.cipher_suites.length << 1)+ compression_methods.length;}  }
class C{  public boolean dismiss(SurfaceSession session,long maxAnimationDuration,float animationScale,int finalWidth,int finalHeight,int exitAnim,int enterAnim){  if (DEBUG_STATE)   Slog.v(TAG,"Dismiss!");  if (mSurfaceControl == null) {    return false;  }  if (!mStarted) {    startAnimation(session,maxAnimationDuration,animationScale,finalWidth,finalHeight,true,exitAnim,enterAnim);  }  if (!mStarted) {    return false;  }  if (DEBUG_STATE)   Slog.v(TAG,"Setting mFinishAnimReady = true");  mFinishAnimReady=true;  return true;}  }
class C{  public boolean voidIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  MOrderLine[] lines=getLines(true,MOrderLine.COLUMNNAME_M_Product_ID);  for (int i=0; i < lines.length; i++) {    MOrderLine line=lines[i];    BigDecimal old=line.getQtyOrdered();    if (old.signum() != 0) {      line.addDescription(Msg.getMsg(getCtx(),"Voided") + " (" + old+ ")");      line.setQty(Env.ZERO);      line.setLineNetAmt(Env.ZERO);      line.save(get_TrxName());    }    if (!isSOTrx()) {      deleteMatchPOCostDetail(line);    }  }  MOrderTax[] taxes=getTaxes(true);  for (  MOrderTax tax : taxes) {    if (!(tax.calculateTaxFromLines() && tax.save()))     return false;  }  addDescription(Msg.getMsg(getCtx(),"Voided"));  if (!reserveStock(null,lines)) {    m_processMsg="Cannot unreserve Stock (void)";    return false;  }  MRequisitionLine.unlinkC_Order_ID(getCtx(),get_ID(),get_TrxName());  if (!createReversals())   return false;  MFactAcct.deleteEx(MOrder.Table_ID,getC_Order_ID(),get_TrxName());  setPosted(false);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  setProcessed(true);  setDocAction(DOCACTION_None);  return true;}  }
class C{  public void testEmptyOptimization() throws IOException {  AutomatonQuery aq=new AutomatonQuery(newTerm("bogus"),Automata.makeEmpty());  Terms terms=MultiFields.getTerms(searcher.getIndexReader(),FN);  assertSame(TermsEnum.EMPTY,aq.getTermsEnum(terms));  assertEquals(0,automatonQueryNrHits(aq));}  }
class C{  public WAppsAction(String action,String accelerator,String toolTipText) throws IOException {  super();  String newToolTipText=toolTipText;  m_action=action;  if (m_accelerator == null) {    m_accelerator="";  } else {    m_accelerator=accelerator;  }  if (newToolTipText == null) {    newToolTipText=Msg.getMsg(Env.getCtx(),action);  }  int pos=newToolTipText.indexOf('&');  if (pos != -1 && newToolTipText.length() > pos) {    Character ch=new Character(newToolTipText.toLowerCase().charAt(pos + 1));    if (ch != ' ') {      newToolTipText=newToolTipText.substring(0,pos) + newToolTipText.substring(pos + 1);      m_accelerator+="@" + ch;    }  }  URI large=getImage(action,false);  m_button=new Button();  m_button.setTooltiptext(newToolTipText);  m_button.setName("btn" + action);  m_button.setId(action);  if (large != null) {    m_button.setImage(large.getPath());    m_button.setLabel(null);  } else {    m_button.setLabel(newToolTipText);  }  LayoutUtils.addSclass("action-button",m_button);}  }
class C{  private DataType thriftDataTyopeToWrapperDataType(org.carbondata.format.DataType dataTypeThrift){switch (dataTypeThrift) {case STRING:    return DataType.STRING;case INT:  return DataType.INT;case LONG:return DataType.LONG;case DOUBLE:return DataType.DOUBLE;case DECIMAL:return DataType.DECIMAL;case TIMESTAMP:return DataType.TIMESTAMP;case ARRAY:return DataType.ARRAY;case STRUCT:return DataType.STRUCT;default :return DataType.STRING;}}  }
class C{  public static <T>String toJson(T toSerialize){  return _gson.toJson(toSerialize);}  }
class C{  public void deleteDebugger(final DebuggerTemplate template) throws CouldntDeleteException {  Preconditions.checkNotNull(template,"Error: Template argument can't be null");  try {    m_manager.removeDebugger(template.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntDeleteException e) {    throw new CouldntDeleteException(e);  }}  }
class C{  public FinderPatternFinder(BitMatrix image){  this(image,null);}  }
class C{  public ClosestPair(Point2D[] points){  int n=points.length;  if (n <= 1)   return;  Point2D[] pointsByX=new Point2D[n];  for (int i=0; i < n; i++)   pointsByX[i]=points[i];  Arrays.sort(pointsByX,Point2D.X_ORDER);  for (int i=0; i < n - 1; i++) {    if (pointsByX[i].equals(pointsByX[i + 1])) {      bestDistance=0.0;      best1=pointsByX[i];      best2=pointsByX[i + 1];      return;    }  }  Point2D[] pointsByY=new Point2D[n];  for (int i=0; i < n; i++)   pointsByY[i]=pointsByX[i];  Point2D[] aux=new Point2D[n];  closest(pointsByX,pointsByY,aux,0,n - 1);}  }
class C{  public void printStackTrace(){  super.printStackTrace();  if (rootCause != null) {    System.err.println("With Root Cause:");    rootCause.printStackTrace();  }}  }
class C{  public static void w(String msg){  if (DEBUG)   android.util.Log.w(TAG,buildMessage(msg));}  }
class C{  private UrlEncodingHelper(){}  }
class C{  public final void popPair(){  m_firstFree-=2;  m_map[m_firstFree]=null;  m_map[m_firstFree + 1]=null;}  }
class C{  @Override protected boolean handleInterval(final RPEntity entity){  return doDamage(entity);}  }
class C{  public double ratio(){  int matches=x.reduce(x.<Integer>lambdaF("sum, triple : sum + triple[2]"),get_matching_blocks(),0);  return _calculate_ratio(matches,x.len(this.a) + x.len(this.b));}  }
class C{  public String explain(boolean multiline){  return explain(multiline,"",null);}  }
class C{  public void initFlags(final CFlags flags){  flags.registerExtendedHelp();  flags.setDescription("Print statistics that describe a directory of SDF formatted data.");  CommonFlagCategories.setCategories(flags);  try {    final Flag inFlag=flags.registerRequired(File.class,SDF_FLAG,"SDF directories");    inFlag.setMinCount(1);    inFlag.setMaxCount(Integer.MAX_VALUE);    inFlag.setCategory(INPUT_OUTPUT);    flags.registerOptional('n',NS_FLAG,"display info about unknown bases (Ns)").setCategory(REPORTING);    flags.registerOptional('p',POSITIONS_FLAG,"only display info about unknown bases (Ns) by read position").setCategory(REPORTING);    flags.registerOptional('q',QS_FLAG,"display mean of quality").setCategory(REPORTING);    flags.registerOptional(SEX_FLAG,Sex.class,"sex","display reference sequence list for the given sex, if defined").setCategory(REPORTING).setMaxCount(Integer.MAX_VALUE).enableCsv();    flags.registerOptional(TAXONOMY_FLAG,"display information about taxonomy").setCategory(REPORTING);    flags.registerOptional(NAMES_AND_LENGTHS_FLAG,"print out the name and length of each sequence. (Not recommended for read sets)").setCategory(REPORTING);    flags.registerOptional(SAM_FLAG,"print out a SAM format header corresponding to this SDF").setCategory(REPORTING);    flags.setValidator(VALIDATOR);  } catch (  final MissingResourceException e) {    throw new SlimException(e);  }}  }
class C{  public void simulate(){  experiment=new GeneticMaximumFinderProg();  experiment.setFunction((Function<Double,Double>)simPaneCtrl.getParamValue(PARAM_FUNC_SELECT));  experiment.setMutationProb(simPaneCtrl.getParamAsDouble(PARAM_MUT_PROB));  experiment.setPopulationSize(simPaneCtrl.getParamAsInt(PARAM_POPULATION));  experiment.setMaxIterations(simPaneCtrl.getParamAsInt(PARAM_MAX_ITER));  experiment.startExperiment(null);}  }
class C{  private void jbInit() throws Exception {  panel.setLayout(panelLayout);  southPanel.setLayout(southLayout);  mainPanel.setLayout(gridBagLayout);  panelLayout.setHgap(5);  panelLayout.setVgap(10);  fCreateNew.setText(Msg.getMsg(Env.getCtx(),"CreateNew"));  fX.setColumns(15);  fY.setColumns(15);  fZ.setColumns(15);  lLocator.setLabelFor(fLocator);  lLocator.setText(Msg.translate(Env.getCtx(),"M_Locator_ID"));  fWarehouseInfo.setBackground(AdempierePLAF.getFieldBackground_Inactive());  fWarehouseInfo.setReadWrite(false);  fWarehouseInfo.setColumns(15);  fValue.setColumns(15);  lWarehouseInfo.setLabelFor(fWarehouseInfo);  lWarehouseInfo.setText(Msg.translate(Env.getCtx(),"M_Warehouse_ID"));  lWarehouse.setLabelFor(fWarehouse);  lWarehouse.setText(Msg.translate(Env.getCtx(),"M_Warehouse_ID"));  lX.setLabelFor(fX);  lX.setText(Msg.getElement(Env.getCtx(),"X"));  lY.setLabelFor(fY);  lY.setText(Msg.getElement(Env.getCtx(),"Y"));  lZ.setLabelFor(fZ);  lZ.setText(Msg.getElement(Env.getCtx(),"Z"));  lValue.setLabelFor(fValue);  lValue.setText(Msg.translate(Env.getCtx(),"Value"));  getContentPane().add(panel);  panel.add(mainPanel,BorderLayout.CENTER);  mainPanel.add(lLocator,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  mainPanel.add(fLocator,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,5),0,0));  mainPanel.add(fCreateNew,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(10,0,0,5),0,0));  mainPanel.add(lWarehouseInfo,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  mainPanel.add(fWarehouseInfo,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,5),0,0));  mainPanel.add(lWarehouse,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  mainPanel.add(fWarehouse,new GridBagConstraints(1,3,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,5),0,0));  mainPanel.add(lX,new GridBagConstraints(0,4,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  mainPanel.add(fX,new GridBagConstraints(1,4,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,5),0,0));  mainPanel.add(lY,new GridBagConstraints(0,5,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  mainPanel.add(fY,new GridBagConstraints(1,5,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,5),0,0));  mainPanel.add(lZ,new GridBagConstraints(0,6,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  mainPanel.add(fZ,new GridBagConstraints(1,6,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,5),0,0));  mainPanel.add(lValue,new GridBagConstraints(0,7,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,0,5),0,0));  mainPanel.add(fValue,new GridBagConstraints(1,7,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,5),0,0));  panel.add(southPanel,BorderLayout.SOUTH);  southPanel.add(confirmPanel,BorderLayout.NORTH);  confirmPanel.addActionListener(this);}  }
