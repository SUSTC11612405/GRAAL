class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  if (si == null)   return "";  int id=si.getShowcardID();  if (id == 0)   id=si.getSeriesID();  return Integer.toString(id);}  }
class C{  public boolean isJavaLibraryMethod(){  SootClass cl=getDeclaringClass();  return cl.isJavaLibraryClass();}  }
class C{  public void updateLocation(NetworkInterface ni){  GridCell oldCell=(GridCell)ginterfaces.get(ni);  GridCell newCell=cellFromCoord(ni.getLocation());  if (newCell != oldCell) {    oldCell.moveInterface(ni,newCell);    ginterfaces.put(ni,newCell);  }}  }
class C{  private CEdgeSearcher(){}  }
class C{  protected void flushRequirementChanges(){  if (isLoaded()) {    super.flushRequirementChanges();  }}  }
class C{  @Override public boolean supportsANSI92FullSQL(){  debugCodeCall("supportsANSI92FullSQL");  return false;}  }
class C{  public boolean rootToLeafPathsSum(BinaryNode<E> node,List<E> pathList,int pathSum){  int sum=0;  if (node != null)   pathList.add(node.value);  if (node == null || (node.left == null && node.right == null)) {    for (int i=0; i < pathList.size(); i++) {      sum+=Integer.parseInt(pathList.get(i).toString());    }    return sum == pathSum;  } else {    return rootToLeafPathsSum(node.left,new ArrayList<>(pathList),pathSum) || rootToLeafPathsSum(node.right,new ArrayList<>(pathList),pathSum);  }}  }
class C{  public static <K,V>SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> map){  if (map == null) {    throw new NullPointerException("map == null");  }  return new SynchronizedSortedMap<K,V>(map);}  }
class C{  public boolean supportsOpenStatementsAcrossRollback() throws SQLException {  return true;}  }
class C{  public Node findTag(String tag,String value,Node node){  Set<String> tags=new HashSet<String>(1);  tags.add(tag);  return findTag(tags,value,node);}  }
class C{  public final DataSet subsetColumns(List<Node> vars){  if (!(getVariables().containsAll(vars))) {    List<Node> missingVars=new ArrayList<>(vars);    missingVars.removeAll(getVariables());    throw new IllegalArgumentException("All vars must be original vars: " + missingVars);  }  int[] rows=new int[data.length];  for (int i=0; i < rows.length; i++) {    rows[i]=i;  }  int[] cols=new int[vars.size()];  for (int j=0; j < cols.length; j++) {    cols[j]=getVariables().indexOf(vars.get(j));  }  Number[][] _data=viewSelection(rows,cols);  NumberObjectDataSet _dataSet=new NumberObjectDataSet(0,new LinkedList<Node>());  _dataSet.data=_data;  _dataSet.variables=vars;  _dataSet.selection=new HashSet<>();  _dataSet.knowledge=knowledge.copy();  return _dataSet;}  }
class C{  public static ConstraintsParameters loadPolicyData(InputStream policyDataStream){  if (policyDataStream != null) {    return load(policyDataStream);  }  if ((defaultPolicyConstraintsLocation != null) && !defaultPolicyConstraintsLocation.isEmpty()) {    return load(defaultPolicyConstraintsLocation);  }  return null;}  }
class C{  public Groups(){  _groupsImpl=new GroupsImpl();}  }
class C{  public Comment(String comment){  super(comment);}  }
class C{  public synchronized VisualTable addTable(String group,Table table,Predicate filter){  VisualTable vt=new VisualTable(table,this,group,filter);  addDataGroup(group,vt,table);  return vt;}  }
class C{  public void paintIcon(Component c,Graphics g,int x,int y){  Graphics2D g2D=(Graphics2D)g;  Icon icon=MTreeNode.getIcon(m_type);  if (icon != null) {    int xI=x + ((WIDTH - icon.getIconWidth()) / 2);    int yI=y + ((HEIGHT - icon.getIconHeight()) / 2);    icon.paintIcon(c,g,xI,yI);  } else {    int size=10;    int xI=x + ((WIDTH - size) / 2);    int yI=y + ((HEIGHT - size) / 2);    g2D.setColor(Color.magenta);    g2D.fillOval(xI,yI,size,size);  }}  }
class C{  public void unbind(String name) throws NamingException {  unbind(nameParser.parse(name));}  }
class C{  private Volume determineAccessStateNotReadyVolume(URI volumeURI){  Volume volume=dbClient.queryObject(Volume.class,volumeURI);  if (volume.getAccessState().equals(Volume.VolumeAccessState.NOT_READY.name())) {    return volume;  }  Volume srdfParent=null;  if (volume.getSrdfParent().getURI() != null) {    srdfParent=dbClient.queryObject(Volume.class,volume.getSrdfParent().getURI());    if (srdfParent.getAccessState().equals(Volume.VolumeAccessState.NOT_READY.name())) {      return srdfParent;    }  }  s_logger.info(String.format("No NOT_READY volume corresponding to %s (%s)",volume.getLabel(),volume.getId()));  return null;}  }
class C{  public Name(String s) throws TextParseException {  this(s,null);}  }
class C{  @Override public Bitmap transform(Bitmap source){  int size=Math.min(source.getWidth(),source.getHeight());  int x=(source.getWidth() - size) / 2;  int y=(source.getHeight() - size) / 2;  Bitmap squaredBitmap=Bitmap.createBitmap(source,x,y,size,size);  if (squaredBitmap != source) {    source.recycle();  }  Bitmap bitmap=Bitmap.createBitmap(size,size,source.getConfig());  Canvas canvas=new Canvas(bitmap);  Paint paint=new Paint();  BitmapShader shader=new BitmapShader(squaredBitmap,BitmapShader.TileMode.CLAMP,BitmapShader.TileMode.CLAMP);  paint.setShader(shader);  paint.setAntiAlias(true);  float r=size / 2f;  canvas.drawCircle(r,r,r,paint);  squaredBitmap.recycle();  return bitmap;}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("\nIndexedLagGraph:\n");  for (int i=0; i < getNumFactors(); i++) {    String factor=getFactor(i);    buf.append("\n");    buf.append(factor);    buf.append("\t<-- ");    for (int j=0; j < getNumParents(i); j++) {      IndexedParent parent=getParent(i,j);      buf.append("\t");      buf.append(getFactor(parent.getIndex()));      buf.append(":");      buf.append(parent.getLag());    }  }  buf.append("\n");  return buf.toString();}  }
class C{  public static String readStringAndClose(Reader in,int length) throws IOException {  try {    if (length <= 0) {      length=Integer.MAX_VALUE;    }    int block=Math.min(Constants.IO_BUFFER_SIZE,length);    StringWriter out=new StringWriter(block);    copyAndCloseInput(in,out,length);    return out.toString();  }  finally {    in.close();  }}  }
class C{  @Override public void clear(){  rowMap.clear();}  }
class C{  public static String toString(int mod){  return java.lang.reflect.Modifier.toString(mod);}  }
class C{  SunCertPathBuilderException(String msg,Throwable cause,AdjacencyList adjList){  this(msg,cause);  this.adjList=adjList;}  }
class C{  public static String deploymentActionFeedback(final String id,final String execution) throws JSONException {  return deploymentActionFeedback(id,execution,"none",RandomStringUtils.randomAscii(1000));}  }
class C{  public static boolean checkIsMiuiRom(){  return !TextUtils.isEmpty(getSystemProperty("ro.miui.ui.version.name"));}  }
class C{  public static boolean isSdExist(){  return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);}  }
class C{  public Source(){  super(KEY);}  }
class C{  public int size(){  return n;}  }
class C{  void addIndex(IndexType type,Object[] modelFields){  List<String> columnNames=mapColumnNames(modelFields);  addIndex(type,columnNames);}  }
class C{  public void serviceInvokeMethod(long svcPtr,long outMemPtr,long inMemPtr) throws IgniteCheckedException {  enter();  try {    PlatformCallbackUtils.serviceInvokeMethod(envPtr,svcPtr,outMemPtr,inMemPtr);  }  finally {    leave();  }}  }
class C{  public static PeriodType yearMonthDayTime(){  PeriodType type=cYMDTime;  if (type == null) {    type=new PeriodType("YearMonthDayTime",new DurationFieldType[]{DurationFieldType.years(),DurationFieldType.months(),DurationFieldType.days(),DurationFieldType.hours(),DurationFieldType.minutes(),DurationFieldType.seconds(),DurationFieldType.millis()},new int[]{0,1,-1,2,3,4,5,6});    cYMDTime=type;  }  return type;}  }
class C{  @Interruptible public static Address allocateArray(BootImageInterface bootImage,RVMArray array,int numElements,boolean needsIdentityHash,int identityHashValue,int alignCode){  int align=getAlignment(array);  return allocateArray(bootImage,array,numElements,needsIdentityHash,identityHashValue,align,alignCode);}  }
class C{  final boolean inTemporaryOutputState(){  return (getEncoding() == null);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  private static boolean isBitmapWidthLastPixcel(int width,int i){  return i > 0 && (i % (width - 1)) == 0;}  }
class C{  public boolean adjacent(int direction){  return (direction == QuadTreeNode.NORTH || direction == QuadTreeNode.WEST);}  }
class C{  public static Bitmap loadVideoThumbnail(String path){  Bitmap bitmap=null;  MediaMetadataRetriever retriever=new MediaMetadataRetriever();  try {    retriever.setDataSource(path);    byte[] data=retriever.getEmbeddedPicture();    if (data != null) {      bitmap=BitmapFactory.decodeByteArray(data,0,data.length);    }    if (bitmap == null) {      bitmap=retriever.getFrameAtTime();    }  } catch (  IllegalArgumentException e) {    Log.e(TAG,"MediaMetadataRetriever.setDataSource() fail:" + e.getMessage());  }  retriever.release();  return bitmap;}  }
class C{  void doInsideScores(Tree<StateSet> tree,boolean noSmoothing,boolean debugOutput,double[][][] spanScores){  if (grammar.isLogarithmMode() || lexicon.isLogarithmMode())   throw new Error("Grammar in logarithm mode!  Cannot do inside scores!");  if (tree.isLeaf()) {    return;  }  List<Tree<StateSet>> children=tree.getChildren();  for (  Tree<StateSet> child : children) {    if (!child.isLeaf())     doInsideScores(child,noSmoothing,debugOutput,spanScores);  }  StateSet parent=tree.getLabel();  short pState=parent.getState();  int nParentStates=parent.numSubStates();  if (tree.isPreTerminal()) {    StateSet wordStateSet=tree.getChildren().get(0).getLabel();    double[] lexiconScores=lexicon.score(wordStateSet,pState,noSmoothing,false);    if (lexiconScores.length != nParentStates) {      System.out.println("Have more scores than substates!" + lexiconScores.length + " "+ nParentStates);    }    parent.setIScores(lexiconScores);    parent.scaleIScores(0);  } else {switch (children.size()) {case 0:      break;case 1:    StateSet child=children.get(0).getLabel();  short cState=child.getState();int nChildStates=child.numSubStates();double[][] uscores=grammar.getUnaryScore(pState,cState);double[] iScores=new double[nParentStates];boolean foundOne=false;for (int j=0; j < nChildStates; j++) {if (uscores[j] != null) {double cS=child.getIScore(j);if (cS == 0) continue;for (int i=0; i < nParentStates; i++) {double rS=uscores[j][i];if (rS == 0) continue;double res=rS * cS;iScores[i]+=res;foundOne=true;}}}if (debugOutput && !foundOne) {System.out.println("iscore reached zero!");System.out.println(grammar.getUnaryRule(pState,cState));System.out.println(Arrays.toString(iScores));System.out.println(ArrayUtil.toString(uscores));System.out.println(Arrays.toString(child.getIScores()));}parent.setIScores(iScores);parent.scaleIScores(child.getIScale());break;case 2:StateSet leftChild=children.get(0).getLabel();StateSet rightChild=children.get(1).getLabel();int nLeftChildStates=leftChild.numSubStates();int nRightChildStates=rightChild.numSubStates();short lState=leftChild.getState();short rState=rightChild.getState();double[][][] bscores=grammar.getBinaryScore(pState,lState,rState);double[] iScores2=new double[nParentStates];boolean foundOne2=false;for (int j=0; j < nLeftChildStates; j++) {double lcS=leftChild.getIScore(j);if (lcS == 0) continue;for (int k=0; k < nRightChildStates; k++) {double rcS=rightChild.getIScore(k);if (rcS == 0) continue;if (bscores[j][k] != null) {for (int i=0; i < nParentStates; i++) {double rS=bscores[j][k][i];if (rS == 0) continue;double res=rS * lcS * rcS;iScores2[i]+=res;foundOne2=true;}}}}if (spanScores != null) {for (int i=0; i < nParentStates; i++) {iScores2[i]*=spanScores[parent.from][parent.to][stateClass[pState]];}}if (debugOutput && !foundOne2) {System.out.println("iscore reached zero!");System.out.println(grammar.getBinaryRule(pState,lState,rState));System.out.println(Arrays.toString(iScores2));System.out.println(Arrays.toString(bscores));System.out.println(Arrays.toString(leftChild.getIScores()));System.out.println(Arrays.toString(rightChild.getIScores()));}parent.setIScores(iScores2);parent.scaleIScores(leftChild.getIScale() + rightChild.getIScale());break;default :throw new Error("Malformed tree: more than two children");}}}  }
class C{  public void writeFile(InputStream contentStream,long timeStamp,String destinationPath) throws IOException {  ZipEntry newEntry=new ZipEntry(destinationPath);  byte[] readBuffer=new byte[4096];  newEntry.setTime(timeStamp);  outputStream.putNextEntry(newEntry);  try {    int n;    while ((n=contentStream.read(readBuffer)) > 0) {      outputStream.write(readBuffer,0,n);    }  }  finally {    if (contentStream != null) {      contentStream.close();    }  }  outputStream.closeEntry();}  }
class C{  private void fixUpPhiPredecessors(ArrayList<Instruction> phiInstructions,BasicBlock unoptimizedLoopExit,BasicBlock optimizedLoopExit){  if (unoptimizedLoopExit != null) {    for (    Instruction instruction : phiInstructions) {      Phi.setPred(instruction,OPTIMIZED_LOOP_OPERAND,new BasicBlockOperand(optimizedLoopExit));      Phi.setPred(instruction,UNOPTIMIZED_LOOP_OPERAND,new BasicBlockOperand(unoptimizedLoopExit));    }  } else {    for (    Instruction instruction : phiInstructions) {      Operand operand=Phi.getValue(instruction,OPTIMIZED_LOOP_OPERAND);      Phi.resizeNumberOfPreds(instruction,1);      Phi.resizeNumberOfValues(instruction,1);      Phi.setValue(instruction,OPTIMIZED_LOOP_OPERAND,operand);      Phi.setPred(instruction,OPTIMIZED_LOOP_OPERAND,new BasicBlockOperand(optimizedLoopExit));    }  }}  }
class C{  private void navigateToURL(final String url){  try {    new URI(url);  } catch (  final URISyntaxException e) {    return;  }  try {    browser.setURL(url);  } catch (  final IOException e) {  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImported;  Attr attr;  Node importedAttr;  String nodeName;  int nodeType;  String nodeValue;  String namespaceURI;  doc=(Document)load("staffNS",true);  docImported=(Document)load("staff",true);  attr=doc.createAttributeNS("http://www.w3.org/DOM/Test","a_:b0");  importedAttr=docImported.importNode(attr,false);  nodeName=importedAttr.getNodeName();  nodeValue=importedAttr.getNodeValue();  nodeType=(int)importedAttr.getNodeType();  namespaceURI=importedAttr.getNamespaceURI();  assertEquals("documentimportnode05_nodeName","a_:b0",nodeName);  assertEquals("documentimportnode05_nodeType",2,nodeType);  assertEquals("documentimportnode05_nodeValue","",nodeValue);  assertEquals("documentimportnode05_namespaceURI","http://www.w3.org/DOM/Test",namespaceURI);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.EXISTENTIAL_TYPE_REF__WILDCARD:    setWildcard((Wildcard)null);  return;case TypeRefsPackage.EXISTENTIAL_TYPE_REF__BOUND_TYPE_VARIABLE:setBoundTypeVariable((TypeVariable)null);return;}super.eUnset(featureID);}  }
class C{  public boolean visit(MarkerAnnotation node){  return true;}  }
class C{  public static boolean isNumericDatatype(IRI datatype){  return isDecimalDatatype(datatype) || isFloatingPointDatatype(datatype);}  }
class C{  private Builder(){  super(com.ebay.jetstream.event.processor.hdfs.TestRecord.SCHEMA$);}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public static String toStringAccess(int access) throws ApplicationException {  String res=toStringAccess(access,null);  if (res != null)   return res;  throw new ApplicationException("invalid access type [" + access + "], access types are Component.ACCESS_PACKAGE, Component.ACCESS_PRIVATE, Component.ACCESS_PUBLIC, Component.ACCESS_REMOTE");}  }
class C{  public boolean isBorderOpaque(){  return false;}  }
class C{  public static double quantile(double val,double loc,double scale){  return loc + scale * Math.log(val / (1. - val));}  }
class C{  public CharacterClassAtom createCharacterClassAtom(){  CharacterClassAtomImpl characterClassAtom=new CharacterClassAtomImpl();  return characterClassAtom;}  }
class C{  public final double KBInformation() throws Exception {  if (!m_ClassIsNominal) {    throw new Exception("Can't compute K&B Info score: " + "class numeric!");  }  if (m_NoPriors) {    return Double.NaN;  }  return m_SumKBInfo;}  }
class C{  public void executeASync(ProcessInfo pi){  log.config("-");}  }
class C{  @SuppressWarnings("unchecked") public List seqLabeling(String data){  List<Sentence> obsvSeqs=dataReader.readString(data);  return labeling(obsvSeqs);}  }
class C{  @Override public void removeStatementEventListener(StatementEventListener listener){  throw new UnsupportedOperationException();}  }
class C{  public void drawPolyline(int[] xPoints,int[] yPoints,int nPoints){  if (nPoints > 0) {    GeneralPath path=new GeneralPath();    path.moveTo(xPoints[0],yPoints[0]);    for (int i=1; i < nPoints; i++)     path.lineTo(xPoints[i],yPoints[i]);    draw(path);  }}  }
class C{  public static void removeAllPlayers(){  MockStendhalRPRuleProcessor.get().clearPlayers();}  }
class C{  @AssistedInject public ZookeeperServerSet(@ServicePathCacheFactory PathChildrenCacheFactory childrenCacheFactory,CuratorFramework zkClient,@ServiceReader ZookeeperServerReader reader,@Assisted("serviceName") String serviceName,@Assisted boolean subscribeToUpdates) throws Exception {  this.zkClient=zkClient;  this.reader=reader;  this.serviceName=serviceName;  this.listeners=new HashSet<>();  this.servers=HashMultimap.create();  if (subscribeToUpdates) {    needToPopulateServers=false;    ThreadFactory threadFactory=new ThreadFactoryBuilder().setNameFormat("ZkServerSetPathChildrenCache" + "-%d").setDaemon(true).build();    executor=Executors.newSingleThreadExecutor(threadFactory);    childrenCache=childrenCacheFactory.create(serviceName,executor);    childrenCache.getListenable().addListener(this);  } else {    needToPopulateServers=true;    executor=null;    childrenCache=null;  }}  }
class C{  public static int nextPow2(int x){  if (x < 1)   throw new IllegalArgumentException("x must be greater or equal 1");  if ((x & (x - 1)) == 0) {    return x;  }  x|=(x >>> 1);  x|=(x >>> 2);  x|=(x >>> 4);  x|=(x >>> 8);  x|=(x >>> 16);  x|=(x >>> 32);  return x + 1;}  }
class C{  public void addArchive(ConsolFun consolFun,double xff,int steps,int rows){  addArchive(new ArcDef(consolFun,xff,steps,rows));}  }
class C{  protected void decrementDropCount(int color,int piece){  if ((piece & PROMOTED_MASK) != 0) {    piece=PAWN;  }  dropCounts[color][piece]--;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return EPG.getInstance().getLogo(getString(stack),stack.getUIComponent());}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static SystemUnderTest toSystemUnderTest(Vector<Object> xmlRpcParameters){  SystemUnderTest sut=null;  if (!xmlRpcParameters.isEmpty()) {    log.debug("Extracting SUT from XML-RPC parameters %s",xmlRpcParameters);    ClasspathSet sutClasspaths=new ClasspathSet((Vector<String>)xmlRpcParameters.get(SUT_CLASSPATH_IDX));    ClasspathSet fixtureClasspaths=new ClasspathSet((Vector<String>)xmlRpcParameters.get(SUT_FIXTURE_CLASSPATH_IDX));    sut=SystemUnderTest.newInstance((String)xmlRpcParameters.get(SUT_NAME_IDX));    sut.setProject(toProject((Vector<Object>)xmlRpcParameters.get(SUT_PROJECT_IDX)));    sut.setSutClasspaths(sutClasspaths);    sut.setFixtureClasspaths(fixtureClasspaths);    sut.setFixtureFactory(StringUtils.stripToNull((String)xmlRpcParameters.get(SUT_FIXTURE_FACTORY_IDX)));    sut.setFixtureFactoryArgs(StringUtils.stripToNull((String)xmlRpcParameters.get(SUT_FIXTURE_FACTORY_ARGS_IDX)));    sut.setRunner(toRunner((Vector<Object>)xmlRpcParameters.get(SUT_RUNNER_IDX)));    sut.setIsDefault((Boolean)xmlRpcParameters.get(SUT_IS_DEFAULT_IDX));    sut.setProjectDependencyDescriptor(StringUtils.stripToNull((String)xmlRpcParameters.get(SUT_PROJECT_DEPENDENCY_DESCRIPTOR_IDX)));  }  return sut;}  }
class C{  public CommitLogCheckpoint computeCheckpoint(){  DateTime checkpointTime=clock.nowUtc();  ImmutableMap<Integer,DateTime> firstPassTimes=readBucketTimestamps();  DateTime threshold=readNewCommitLogsAndFindThreshold(firstPassTimes);  return CommitLogCheckpoint.create(checkpointTime,computeBucketCheckpointTimes(firstPassTimes,threshold));}  }
class C{  AnnotationTypeMismatchExceptionProxy(String foundType){  this.foundType=foundType;}  }
class C{  AttributeIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis);}  }
class C{  private String local_number() throws ParseException {  StringBuffer s=new StringBuffer();  if (debug)   dbg_enter("local_number");  try {    int lc=0;    while (lexer.hasMoreChars()) {      char la=lexer.lookAhead(0);      if (la == '*' || la == '#' || la == '-' || la == '.' || la == '(' || la == ')' || Lexer.isHexDigit(la)) {        lexer.consume(1);        s.append(la);        lc++;      } else       if (lc > 0)       break; else       throw createParseException("unexepcted " + la);    }    return s.toString();  }  finally {    if (debug)     dbg_leave("local_number");  }}  }
class C{  HopImpl(String hop) throws IllegalArgumentException {  if (hop == null)   throw new IllegalArgumentException("Null arg!");  int brack=hop.indexOf(']');  int colon=hop.indexOf(':',brack);  int slash=hop.indexOf('/',colon);  if (colon > 0) {    this.host=hop.substring(0,colon);    String portstr;    if (slash > 0) {      portstr=hop.substring(colon + 1,slash);      this.transport=hop.substring(slash + 1);    } else {      portstr=hop.substring(colon + 1);      this.transport="UDP";    }    try {      port=Integer.parseInt(portstr);    } catch (    NumberFormatException ex) {      throw new IllegalArgumentException("Bad port spec");    }  } else {    if (slash > 0) {      this.host=hop.substring(0,slash);      this.transport=hop.substring(slash + 1);      this.port=transport.equalsIgnoreCase("TLS") ? 5061 : 5060;    } else {      this.host=hop;      this.transport="UDP";      this.port=5060;    }  }  if (host == null || host.length() == 0)   throw new IllegalArgumentException("no host!");  this.host=this.host.trim();  this.transport=this.transport.trim();  if ((brack > 0) && host.charAt(0) != '[') {    throw new IllegalArgumentException("Bad IPv6 reference spec");  }  if (transport.compareToIgnoreCase("UDP") != 0 && transport.compareToIgnoreCase("TLS") != 0 && transport.compareToIgnoreCase("TCP") != 0) {    System.err.println("Bad transport string " + transport);    throw new IllegalArgumentException(hop);  }}  }
class C{  public static void sendTempFile(File file,HttpServletResponse response) throws IOException {  String mimeType=null;  String filename=file.getName();  if (filename.length() > 5) {    if (filename.substring(filename.length() - 5,filename.length()).equals(".jpeg")) {      mimeType="image/jpeg";    } else     if (filename.substring(filename.length() - 4,filename.length()).equals(".png")) {      mimeType="image/png";    }  }  ServletUtilities.sendTempFile(file,response,mimeType);}  }
class C{  public void parseFile(ClassFile file) throws FileNotFoundException {  long tm=System.currentTimeMillis();  InputStream input;  BatchParser p;  if (tracing)   dtEnter("parseFile: PARSING SOURCE " + file);  Environment env=new Environment(this,file);  try {    input=file.getInputStream();    env.setCharacterEncoding(getCharacterEncoding());    p=new BatchParser(env,input);  } catch (  IOException ex) {    if (tracing)     dtEvent("parseFile: IO EXCEPTION " + file);    throw new FileNotFoundException();  }  try {    p.parseFile();  } catch (  Exception e) {    throw new CompilerError(e);  }  try {    input.close();  } catch (  IOException ex) {  }  if (verbose()) {    tm=System.currentTimeMillis() - tm;    output(Main.getText("benv.parsed_in",file.getPath(),Long.toString(tm)));  }  if (p.classes.size() == 0) {    p.imports.resolve(env);  } else {    Enumeration e=p.classes.elements();    ClassDefinition first=(ClassDefinition)e.nextElement();    if (first.isInnerClass()) {      throw new CompilerError("BatchEnvironment, first is inner");    }    ClassDefinition current=first;    ClassDefinition next;    while (e.hasMoreElements()) {      next=(ClassDefinition)e.nextElement();      if (next.isInnerClass()) {        continue;      }      current.addDependency(next.getClassDeclaration());      next.addDependency(current.getClassDeclaration());      current=next;    }    if (current != first) {      current.addDependency(first.getClassDeclaration());      first.addDependency(current.getClassDeclaration());    }  }  if (tracing)   dtExit("parseFile: SOURCE PARSED " + file);}  }
class C{  public boolean isHDRActive(){  return false;}  }
class C{  protected static String toString(Object value){  if (value == null)   return null; else   return value.toString();}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.PROVIDED_RUNTIME_LIBRARIES;}  }
class C{  public static long swap64bitFromArray(byte[] value,int offset){  long v=0;  v|=((long)value[offset]) & 0x00000000000000FFL;  v|=(((long)value[offset + 1]) & 0x00000000000000FFL) << 8;  v|=(((long)value[offset + 2]) & 0x00000000000000FFL) << 16;  v|=(((long)value[offset + 3]) & 0x00000000000000FFL) << 24;  v|=(((long)value[offset + 4]) & 0x00000000000000FFL) << 32;  v|=(((long)value[offset + 5]) & 0x00000000000000FFL) << 40;  v|=(((long)value[offset + 6]) & 0x00000000000000FFL) << 48;  v|=(((long)value[offset + 7]) & 0x00000000000000FFL) << 56;  return v;}  }
class C{  public static Stream<Transaction> streamSelfAndFirstChildTransactions(final Transaction transaction){  return Stream.concat(Stream.of(transaction),transaction.getChildTransactions().stream());}  }
class C{  protected void paintComponent(Graphics g){  Graphics2D graphics=(Graphics2D)g;  BufferedImage oddLine=createGradientLine(this.getWidth(),mainLightColor,mainDarkColor,0.6);  BufferedImage evenLine=createGradientLine(this.getWidth(),mainUltraLightColor,mainMidColor,0.6);  int height=this.getHeight();  for (int row=0; row < height; row=row + 10) {    if ((row % 2) == 0) {      graphics.drawImage(evenLine,0,row,null);    } else {      graphics.drawImage(oddLine,0,row,null);    }  }}  }
class C{  @Override public void displayAcceptedOffers(List<Offer> offers){  this.acceptedOffers=offers;}  }
class C{  public Number readNumber(Type target){  double num=buf.getDouble();  if (num == Math.round(num)) {    if (num < Integer.MAX_VALUE) {      return (int)num;    } else {      return Math.round(num);    }  } else {    return num;  }}  }
class C{  public static <E>ConstantTable<E> of(Equality<? super E> equality,@Constant E... elements){  return new ConstantTable<E>(equality,elements);}  }
class C{  public void alignRight(ArrayList<Integer> nodes){  if (m_bNeedsUndoAction) {    addUndoAction(new alignRightAction(nodes));  }  int nMaxX=-1;  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nX=getPositionX(nodes.get(iNode));    if (nX > nMaxX || iNode == 0) {      nMaxX=nX;    }  }  for (int iNode=0; iNode < nodes.size(); iNode++) {    int nNode=nodes.get(iNode);    m_nPositionX.set(nNode,nMaxX);  }}  }
class C{  public static void validateAsyncEventQueueAttributes(String asyncChannelId,int maxQueueMemory,int batchSize,int batchTimeInterval,boolean isPersistent,String diskStoreName,boolean isDiskSynchronous,boolean batchConflationEnabled){  AsyncEventQueue theChannel=null;  Set<AsyncEventQueue> asyncEventChannels=cache.getAsyncEventQueues();  for (  AsyncEventQueue asyncChannel : asyncEventChannels) {    if (asyncChannelId.equals(asyncChannel.getId())) {      theChannel=asyncChannel;    }  }  GatewaySender theSender=((AsyncEventQueueImpl)theChannel).getSender();  assertEquals("maxQueueMemory",maxQueueMemory,theSender.getMaximumQueueMemory());  assertEquals("batchSize",batchSize,theSender.getBatchSize());  assertEquals("batchTimeInterval",batchTimeInterval,theSender.getBatchTimeInterval());  assertEquals("isPersistent",isPersistent,theSender.isPersistenceEnabled());  assertEquals("diskStoreName",diskStoreName,theSender.getDiskStoreName());  assertEquals("isDiskSynchronous",isDiskSynchronous,theSender.isDiskSynchronous());  assertEquals("batchConflation",batchConflationEnabled,theSender.isBatchConflationEnabled());}  }
class C{  public ModelConverter(ModelBase model,double scale,boolean renderDoubleFace){  this(model,scale,renderDoubleFace,0,0,0);}  }
class C{  @SuppressWarnings("unchecked") @Override public Generator<IMultiPoint> construct(String[] args){  try {    Class<?> c=pointGen.getClass();    java.lang.reflect.Method cons=c.getDeclaredMethod("construct",new Class[]{args.getClass()});    Generator<IPoint> newOne=(Generator<IPoint>)cons.invoke(pointGen,new Object[]{args});    return new ConvertToND(newOne);  } catch (  Exception e) {    return new ConvertToND(pointGen);  }}  }
class C{  public Option appData(HashMap<String,String> appData){  this.appData=appData;  return this;}  }
class C{  public static IProposalComputer newSetterAttributeProposalComputer(ContentAssistRequest contentAssistRequest,IJavaProject javaProject){  IDOMNode node=(IDOMNode)contentAssistRequest.getNode();  if (node.getNodeType() != IDOMNode.ELEMENT_NODE) {    return null;  }  String widgetTypeName=UiBinderXmlModelUtilities.computeQualifiedWidgetTypeName(node);  if (widgetTypeName == null) {    return null;  }  String matchString=contentAssistRequest.getMatchString();  return new SetterAttributeProposalComputer(node,widgetTypeName,javaProject,matchString,contentAssistRequest.getReplacementBeginPosition(),matchString.length());}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME__IDENTIFIER_REF:    return basicSetIdentifierRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected long doInsertByBody(final String method,final RDFFormat rdfFormat,final Graph g,final URI defaultContext) throws Exception {  final byte[] wireData=writeOnBuffer(rdfFormat,g);  final AddOp add=new AddOp(wireData,rdfFormat);  if (defaultContext != null)   add.setContext(defaultContext);  return m_repo.add(add);}  }
class C{  public static void main(String[] args){  check(true);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static final boolean validatePassword(@Nonnull String raw,@Nonnull String encoded){  boolean result=false;  try {    String encodedRaw=encodePassword(raw);    result=encodedRaw.equals(encoded);  } catch (  Exception e) {    throw new RuntimeException(e);  }  return result;}  }
class C{  public Source<String> ofLengthBetween(int minLength,int maxLength){  ArgumentAssertions.checkArguments(minLength <= maxLength,"The minLength (%s) is longer than the maxLength(%s)",minLength,maxLength);  ArgumentAssertions.checkArguments(minLength >= 0,"The length of a String cannot be negative; %s is not an accepted argument",minLength);  return Strings.ofBoundedLengthStrings(minCodePoint,maxCodePoint,minLength,maxLength);}  }
class C{  public List<Interceptor> interceptors(){  return interceptors;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CODE_LANGS_1__CODE_LANG_1:    return codeLang_1 != null && !codeLang_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public CampoDatoVO updateCampoDato(CampoDatoVO campoDatoVO){  DbConnection conn=getConnection();  try {    final String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,campoDatoVO.getId())).toString();    DbUpdateFns.update(conn,TABLE_NAME,COLUM_NAMES_LIST,new SigiaDbInputRecord(COL_DEFS,campoDatoVO),qual.toString());    return campoDatoVO;  } catch (  Exception e) {    logger.error(e.getMessage());    throw new DBException(e.getMessage());  }}  }
class C{  public static long used(){  return getStrategy().used();}  }
class C{  public final int length(){  return bcLength;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public void updateInferredMethodParameterTypes(MethodInvocationNode methodInvNode,Tree receiverTree,ExecutableElement methodElt,AnnotatedTypeFactory atf){  if (receiverTree == null) {    return;  }  ClassSymbol classSymbol=getEnclosingClassSymbol(receiverTree);  if (classSymbol == null) {    return;  }  if (!classSymbol.getEnclosedElements().contains(methodElt))   return;  String className=classSymbol.flatname.toString();  String jaifPath=helper.getJaifPath(className);  AClass clazz=helper.getAClass(className,jaifPath);  String methodName=JVMNames.getJVMMethodName(methodElt);  AMethod method=clazz.methods.vivify(methodName);  List<Node> arguments=methodInvNode.getArguments();  updateInferredExecutableParameterTypes(methodElt,atf,jaifPath,method,arguments);}  }
class C{  public HttpsURL(final String host,final String path,final String query,final String fragment) throws URIException {  this(null,host,-1,path,query,fragment);}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE";  }  String result="";  if ((n & CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY) != 0)   result+="CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY ";  if ((n & CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD) != 0)   result+="CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD ";  return result;}  }
class C{  public ConcurrentModificationException(BaseVO vo){  this(vo.getClass().getSimpleName(),vo.getVersion());}  }
class C{  public static ObjectAnimator ofInt(Object target,String propertyName,int... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setIntValues(values);  return anim;}  }
class C{  protected void markUsed(){  lastUsed=U.currentTimeMillis();}  }
class C{  @Override public boolean hasNext(){  return (m_CurrentLeaf != null);}  }
class C{  public int lastIndexOf(Object o){  if (o == null) {    for (int i=size - 1; i >= 0; i--)     if (elementData[i] == null)     return i;  } else {    for (int i=size - 1; i >= 0; i--)     if (o.equals(elementData[i]))     return i;  }  return -1;}  }
class C{  public PlatformMessaging withAsync(){  if (messaging.isAsync())   return this;  return new PlatformMessaging(platformCtx,messaging.withAsync());}  }
class C{  public boolean add(OMGraphic shape){  boolean ret=false;  try {    if (typeMatches(shape)) {      ret=graphics.add(shape);      addExtents(((EsriGraphic)shape).getExtents());    } else     if (shape instanceof OMPoly) {      EsriPolygon eg=convert((OMPoly)shape);      if (typeMatches(eg)) {        ret=graphics.add(eg);        addExtents(eg.getExtents());      }    } else     if (shape instanceof OMGraphicList && !((OMGraphicList)shape).isVague()) {      for (Iterator<OMGraphic> it=((OMGraphicList)shape).iterator(); it.hasNext(); ) {        add((OMGraphic)it.next());      }      ret=true;    } else {      Debug.message("esri","EsriPolygonList.add()- graphic isn't a EsriPoly or OMPoly, can't add.");    }  } catch (  ClassCastException cce) {  }  return ret;}  }
class C{  public ObjectColumn(Class type,int nrows){  this(type,nrows,nrows,null);}  }
class C{  @Override public boolean adjustEntry(MkAppEntry entry,DBID routingObjectID,double parentDistance,AbstractMTree<O,MkAppTreeNode<O>,MkAppEntry,?> mTree){  super.adjustEntry(entry,routingObjectID,parentDistance,mTree);  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.576 -0500",hash_original_method="B94D225452D6F3859CEDE3BC9422CB6B",hash_generated_method="CF2E1B56DF5258E57EC81EEA67BEFCED") public static final HashMap readThisMapXml(XmlPullParser parser,String endTag,String[] name) throws XmlPullParserException, java.io.IOException {  HashMap map=new HashMap();  int eventType=parser.getEventType();  do {    if (eventType == parser.START_TAG) {      Object val=readThisValueXml(parser,name);      if (name[0] != null) {        map.put(name[0],val);      } else {        throw new XmlPullParserException("Map value without name attribute: " + parser.getName());      }    } else     if (eventType == parser.END_TAG) {      if (parser.getName().equals(endTag)) {        return map;      }      throw new XmlPullParserException("Expected " + endTag + " end tag at: "+ parser.getName());    }    eventType=parser.next();  } while (eventType != parser.END_DOCUMENT);  throw new XmlPullParserException("Document ended before " + endTag + " end tag");}  }
class C{  void updateThumbnailScale(){  if (mBitmapShader != null) {    mScaleMatrix.setRectToRect(mBitmapRect,mLayoutRect,Matrix.ScaleToFit.FILL);    mBitmapShader.setLocalMatrix(mScaleMatrix);  }}  }
class C{  public ElementType peek(){  return isEmpty() ? null : stack.get(stack.size() - 1);}  }
class C{  public Object clone(){  DoubleArrayList clone=new DoubleArrayList((double[])elements.clone());  clone.setSizeRaw(size);  return clone;}  }
class C{  public final int processBlock(byte[] in,int inOff,byte[] out,int outOff){  if (wKey == null) {    throw new IllegalStateException("Serpent not initialised");  }  if ((inOff + BLOCK_SIZE) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + BLOCK_SIZE) > out.length) {    throw new OutputLengthException("output buffer too short");  }  if (encrypting) {    encryptBlock(in,inOff,out,outOff);  } else {    decryptBlock(in,inOff,out,outOff);  }  return BLOCK_SIZE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.213 -0400",hash_original_method="202AE2159172221E521994FECA693914",hash_generated_method="3F09A1EFBF0832ABC5BBD8E02B5569BC") final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.984 -0500",hash_original_method="81B7AD8C9B3A9908C7C41F3CCCB6E30B",hash_generated_method="4F8A71592DABB995D5E265C49D0411B3") public void rejectedExecution(Runnable r,ThreadPoolExecutor e){}  }
class C{  public boolean isEmpty(){  return text.length() == 0;}  }
class C{  public Stroker(PathConsumer2D pc2d,float lineWidth,int capStyle,int joinStyle,float miterLimit){  this.out=pc2d;  this.lineWidth2=lineWidth / 2;  this.capStyle=capStyle;  this.joinStyle=joinStyle;  float limit=miterLimit * lineWidth2;  this.miterLimitSq=limit * limit;  this.prev=CLOSE;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssRepInfo[");  buffer.append("m_type = ").append(m_type);  buffer.append(", m_os = ").append(m_os);  buffer.append(", m_path = ").append(m_path);  buffer.append(", m_srv = ").append(m_srv);  buffer.append(", m_port = ").append(m_port);  buffer.append(", m_usr = ").append(m_usr);  buffer.append(", m_pwd = ").append(m_pwd);  buffer.append(", m_flags = ").append(m_flags);  buffer.append("]");  return buffer.toString();}  }
class C{  public SHAvite256(){  super();}  }
class C{  public static Collection intersect(Collection c1,Collection c2){  return intersect(c1,c2,null);}  }
class C{  @POST @Path("add") @Consumes({MediaType.MULTIPART_FORM_DATA}) public Response addPrivateKey(@QueryParam("host") String host,Iterator<FileItem> iterator){  byte[] key=null;  while (iterator.hasNext() && key == null) {    FileItem fileItem=iterator.next();    if (!fileItem.isFormField()) {      key=fileItem.get();    }  }  if (key == null) {    throw new WebApplicationException(Response.ok("<pre>Can't find input file.</pre>",MediaType.TEXT_HTML).build());  }  try {    keyStore.addPrivateKey(host,key);  } catch (  SshKeyStoreException e) {    throw new WebApplicationException(Response.ok("<pre>" + e.getMessage() + "</pre>",MediaType.TEXT_HTML).build());  }  return Response.ok("",MediaType.TEXT_HTML).build();}  }
class C{  private byte[] makeVector(int size){  byte[] vector=new byte[size];  for (int i=0; i < size; i++) {    vector[i]=(byte)(i % 256);  }  return vector;}  }
class C{  public String subscribe(final String subscriptionName){  return subscribe(subscriptionName,null);}  }
class C{  public static <S,T>TableColumn<S,T> tableColumn(String colName,String propName,String tip){  return tableColumn(colName,propName,tip,100,0,false);}  }
class C{  public void testGetAttributeNodeNS1() throws Throwable {  String namespaceURI="http://www.nist.gov";  String localName="invalidlocalname";  Document doc;  NodeList elementList;  Element testAddr;  Attr attribute;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  attribute=testAddr.getAttributeNodeNS(namespaceURI,localName);  assertNull("throw_Null",attribute);}  }
class C{  private Swagger readSwagger(String swaggerLocation){  Swagger swagger=new SwaggerParser().read(swaggerLocation);  if (swagger == null) {    throw new IllegalArgumentException("Failed to read the Swagger source");  }  return swagger;}  }
class C{  public FastByteArrayOutputStream(final int initialCapacity){  array=new byte[initialCapacity];}  }
class C{  private JLabel createStatusIndicator(String identifier){  Icon icon=new ImageIcon(DataLoader.getResource(iconFolder + identifier + ".png"));  JLabel label=new JLabel(icon);  label.setVisible(false);  add(label);  return label;}  }
class C{  public DBException(Exception e,String sql,Object[] params){  this(e);  m_sql=sql;  if (params != null)   m_params=Arrays.copyOf(params,params.length);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((deviceFeatures == null) ? 0 : deviceFeatures.hashCode());  result=prime * result + ((userAgent == null) ? 0 : userAgent.hashCode());  return result;}  }
class C{  protected void addDeclaredNamespaces(Element element){  Namespace elementNamespace=element.getNamespace();  for (int size=namespaceStack.size(); declaredNamespaceIndex < size; declaredNamespaceIndex++) {    Namespace namespace=namespaceStack.getNamespace(declaredNamespaceIndex);    element.add(namespace);  }}  }
class C{  private static boolean resolveEnable(Context context){  int state=context.getPackageManager().getApplicationEnabledSetting(DOWNLOAD_MANAGER_PACKAGE_NAME);  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN_MR2) {    return !(state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED);  } else {    return !(state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER);  }}  }
class C{  private static void visitChildren(ExprNode node,String name,ExprNode fullExpr){  ExprNode[] childNodes=node.getChildNodes();  for (int i=0; i < childNodes.length; i++) {    ExprNode childNode=childNodes[i];    if (isColumnNameNode(childNode,name)) {      node.setChildNode(i,fullExpr);    } else {      visitChildren(childNode,name,fullExpr);    }  }}  }
class C{  protected void textSizeImpl(float size){  handleTextSize(size);}  }
class C{  public IndTestFisherZGeneralizedInverse(DataSet dataSet,double alpha){  if (!(alpha >= 0 && alpha <= 1)) {    throw new IllegalArgumentException("Alpha mut be in [0, 1]");  }  this.dataSet=dataSet;  this.data=new DenseDoubleMatrix2D(dataSet.getDoubleData().toArray());  this.variables=Collections.unmodifiableList(dataSet.getVariables());  setAlpha(alpha);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void createNewPlayedEntry(final SQLiteDatabase database,final long songId){  float newScore=getScoreMultiplierForWeek(0);  int newPlayCount=1;  final ContentValues values=new ContentValues(3);  values.put(SongPlayCountColumns.ID,songId);  values.put(SongPlayCountColumns.PLAYCOUNTSCORE,newScore);  values.put(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX,mNumberOfWeeksSinceEpoch);  values.put(getColumnNameForWeek(0),newPlayCount);  database.insert(SongPlayCountColumns.NAME,null,values);}  }
class C{  public void addSensor(final Sensor sensor){  sensors.add(sensor);  if (sensor.getId() == null) {    sensor.setId(sensorIDGenerator.getId());  }  parentWorld.fireSensorAdded(sensor);}  }
class C{  public void testFilteringAndBlockCommit() throws Exception {  int xacts=40;  int[] blockSizes={2,7};  for (  int blockSize : blockSizes) {    logger.info("Testing block commit: transactions=" + xacts + " blockSize="+ blockSize);    TungstenProperties config=helper.createDoubleQueueWithFilter(40,blockSize,5,2,true);    ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());    runtime.configure();    runtime.prepare();    Pipeline pipeline=runtime.getPipeline();    InMemoryQueueStore input=(InMemoryQueueStore)pipeline.getStore("q1");    this.insertEvents(input,0,40);    pipeline.start(new MockEventDispatcher());    this.verifyProcessedSeqno(pipeline,xacts - 1);    InMemoryQueueStore output=(InMemoryQueueStore)pipeline.getStore("q2");    long seqno=-1;    int filteredEvents=0;    int nonFilteredEvents=0;    while (seqno < (xacts - 1)) {      ReplDBMSEvent event=output.poll();      seqno=event.getSeqno();      assertNotNull("Expected to read non-null event (last seqno=" + seqno + ")",event);      if (event instanceof ReplDBMSFilteredEvent) {        ReplDBMSFilteredEvent filteredEvent=(ReplDBMSFilteredEvent)event;        long numberOfEventsFiltered=filteredEvent.getSeqnoEnd() - seqno + 1;        filteredEvents+=numberOfEventsFiltered;      } else {        nonFilteredEvents++;      }    }    assertEquals("Expected filtered events",16,filteredEvents);    assertEquals("Expected non-filtered events",24,nonFilteredEvents);    pipeline.shutdown(false);    pipeline.release(runtime);  }}  }
class C{  @RequestMapping(method=RequestMethod.GET,value="/{region}/keys",produces={MediaType.APPLICATION_JSON_UTF8_VALUE}) @ApiOperation(value="list all keys",notes="List all keys in region",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK"),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=404,message="Region does not exist"),@ApiResponse(code=500,message="GemFire throws an error or exception")}) @PreAuthorize("@securityService.authorize('DATA', 'READ', #region)") public ResponseEntity<?> keys(@PathVariable("region") String region){  logger.debug("Reading all Keys in Region ({})...",region);  region=decode(region);  Object[] keys=getKeys(region,null);  String listKeysAsJson=JSONUtils.formulateJsonForListKeys(keys,"keys");  final HttpHeaders headers=new HttpHeaders();  headers.setLocation(toUri(region,"keys"));  return new ResponseEntity<>(listKeysAsJson,headers,HttpStatus.OK);}  }
class C{  public void windowClosing(java.awt.event.WindowEvent e){  doneButtonActionPerformed();  super.windowClosing(e);}  }
class C{  private static void transferPEToStack(ItemStack stack,IEnergyManipulator manipulator){  if (stack != null && stack.getItem() instanceof IEnergyTransporterItem)   if (((IEnergyTransporterItem)stack.getItem()).canAcceptPEExternally(stack) && ((IEnergyTransporterItem)stack.getItem()).getContainedEnergy(stack) < ((IEnergyTransporterItem)stack.getItem()).getMaxEnergy(stack))   ((IEnergyTransporterItem)stack.getItem()).addEnergy(stack,manipulator.getEnergyQuanta());}  }
class C{  @Override public void draw(Graphics2D g){  super.draw(g);  for (  Figure child : children) {    if (child.isVisible()) {      child.draw(g);    }  }}  }
class C{  public RouteSpecificPool(HttpRoute route,int maxEntries){  this.route=route;  this.maxEntries=maxEntries;  this.freeEntries=new LinkedList<BasicPoolEntry>();  this.waitingThreads=new LinkedList<WaitingThread>();  this.numEntries=0;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  @Override public void encode(WbXmlEncoder encoder,WbXmlElement element,WbXmlAttribute attr,String value) throws IOException {  if (value == null || value.isEmpty()) {    return;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < value.length(); i++) {    char ch=value.charAt(i);    if (!Character.isDigit(ch)) {      if (ch != 'T' && ch != 'Z' && ch != '-' && ch != ':') {        throw new IOException(String.format("Invalid date format '%s'!",value));      }    } else {      sb.append(ch);    }  }  byte[] bytes=charArrayToHexArray(sb.toString().toCharArray());  encoder.writeOpaque(bytes);}  }
class C{  public static Set unmodifiableSet(Set s){  return new UnmodifiableSet(s);}  }
class C{  @ObjectiveCName("unsubscribeFromDownloads:") public void unsubscribeFromDownloads(FileEventCallback callback){  modules.getFilesModule().unsubscribe(callback);}  }
class C{  public byte[] $clone(){  throw Util.makeJavaArrayWrapperException();}  }
class C{  public Sequence(SequenceBO sequenceBO,List<StructuralComponent> structuralComponents){  this.sequenceBO=sequenceBO;  this.structuralComponents=structuralComponents;  this.mxfDataDefinition=MXFDataDefinition.getDataDefinition(new MXFUID(this.sequenceBO.data_definition));}  }
class C{  public boolean isEmpty(){  return messages.isEmpty();}  }
class C{  public ShapeBuilder fetch(GetRequest getRequest,String path) throws IOException {  getRequest.preference("_local");  getRequest.operationThreaded(false);  GetResponse response=client.get(getRequest).actionGet();  if (!response.isExists()) {    throw new IllegalArgumentException("Shape with ID [" + getRequest.id() + "] in type ["+ getRequest.type()+ "] not found");  }  String[] pathElements=Strings.splitStringToArray(path,'.');  int currentPathSlot=0;  XContentParser parser=null;  try {    parser=XContentHelper.createParser(response.getSourceAsBytesRef());    XContentParser.Token currentToken;    while ((currentToken=parser.nextToken()) != XContentParser.Token.END_OBJECT) {      if (currentToken == XContentParser.Token.FIELD_NAME) {        if (pathElements[currentPathSlot].equals(parser.currentName())) {          parser.nextToken();          if (++currentPathSlot == pathElements.length) {            return ShapeBuilder.parse(parser);          }        } else {          parser.nextToken();          parser.skipChildren();        }      }    }    throw new IllegalStateException("Shape with name [" + getRequest.id() + "] found but missing "+ path+ " field");  }  finally {    if (parser != null) {      parser.close();    }  }}  }
class C{  @Override public void close() throws IOException {  super.close();  if (rs != null) {    rs.close();  }}  }
class C{  public Set entrySet(){  Set es=entrySet;  return (es != null) ? es : (entrySet=new EntrySet());}  }
class C{  @Inline public final void push(Word i){  checkTailInsert(1);  uncheckedTailInsert(i.toAddress());}  }
class C{  VectorSpliterator(Vector<E> list,Object[] array,int origin,int fence,int expectedModCount){  this.list=list;  this.array=array;  this.index=origin;  this.fence=fence;  this.expectedModCount=expectedModCount;}  }
class C{  public void testSearchManagerInvocations() throws Exception {  SearchManager searchManager=(SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE);  assertNotNull(searchManager);  searchManager.startSearch(null,false,SEARCHABLE_ACTIVITY,null,false);  searchManager.stopSearch();  searchManager.startSearch("",false,SEARCHABLE_ACTIVITY,null,false);  searchManager.stopSearch();  searchManager.startSearch("test search string",false,SEARCHABLE_ACTIVITY,null,false);  searchManager.stopSearch();  searchManager.startSearch("test search string",true,SEARCHABLE_ACTIVITY,null,false);  searchManager.stopSearch();}  }
class C{  public ProcessInfoLog(int Log_ID,int P_ID,Timestamp P_Date,BigDecimal P_Number,String P_Msg){  setLog_ID(Log_ID);  setP_ID(P_ID);  setP_Date(P_Date);  setP_Number(P_Number);  setP_Msg(P_Msg);}  }
class C{  private void checkResolutionLevelIsSufficientForGeofenceUse(int allowedResolutionLevel){  if (allowedResolutionLevel < RESOLUTION_LEVEL_FINE) {    throw new SecurityException("Geofence usage requires ACCESS_FINE_LOCATION permission");  }}  }
class C{  public void accept(final ClassVisitor cv){  cv.visitInnerClass(name,outerName,innerName,access);}  }
class C{  private boolean doDdpOrientation(Node d,Node a,Node b,Node c,Map<Node,Node> previous,Graph graph){  if (dag != null) {    if (dag.isAncestorOf(b,c)) {      graph.setEndpoint(c,b,Endpoint.TAIL);      changeFlag=true;    } else {      if (!isArrowpointAllowed(a,b,graph)) {        return false;      }      if (!isArrowpointAllowed(c,b,graph)) {        return false;      }      graph.setEndpoint(a,b,Endpoint.ARROW);      graph.setEndpoint(c,b,Endpoint.ARROW);      changeFlag=true;    }    return true;  }  if (graph.isAdjacentTo(d,c)) {    throw new IllegalArgumentException();  }  List<Node> path=getPath(d,previous);  boolean ind=getSepsets().isIndependent(d,c,path);  List<Node> path2=new ArrayList<Node>(path);  path2.remove(b);  boolean ind2=getSepsets().isIndependent(d,c,path2);  if (!ind && !ind2) {    List<Node> sepset=getSepsets().getSepset(d,c);    if (verbose) {      out.println("Sepset for d = " + d + " and c = "+ c+ " = "+ sepset);    }    if (sepset == null) {      if (verbose) {        out.println("Must be a sepset: " + d + " and "+ c+ "; they're non-adjacent.");      }      return false;    }    ind=sepset.contains(b);  }  if (ind) {    graph.setEndpoint(c,b,Endpoint.TAIL);    if (verbose) {      logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));      out.println(SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));    }    changeFlag=true;    return true;  } else {    if (!isArrowpointAllowed(a,b,graph)) {      return false;    }    if (!isArrowpointAllowed(c,b,graph)) {      return false;    }    graph.setEndpoint(a,b,Endpoint.ARROW);    graph.setEndpoint(c,b,Endpoint.ARROW);    if (verbose) {      logger.log("impliedOrientations",SearchLogUtils.colliderOrientedMsg("Definite discriminating path.. d = " + d,a,b,c));      out.println(SearchLogUtils.colliderOrientedMsg("Definite discriminating path.. d = " + d,a,b,c));    }    changeFlag=true;    return true;  }}  }
class C{  public static void addCrystallization(ItemStack input,ItemStack output1,ItemStack output2,float xp){  CrystallizerRecipes.instance().crystallize(input,output1,output2,xp);}  }
class C{  private void insertPhi(BasicBlock bb,Register r){  Instruction s=makePhiInstruction(r,bb);  bb.firstInstruction().insertAfter(s);  scalarPhis.add(s);}  }
class C{  public static int ceilingPowerOf2(int n){  if (n <= 1) {    return 1;  }  int topPwrOf2=1 << 30;  return (n >= topPwrOf2) ? topPwrOf2 : Integer.highestOneBit((n - 1) << 1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.508 -0500",hash_original_method="D583B5DA5B2EDF3475293874A3D5A1D5",hash_generated_method="BEF78A8054F61184E0951917CE78475B") public View inflateCertificateView(Context context){  LayoutInflater factory=LayoutInflater.from(context);  View certificateView=factory.inflate(com.android.internal.R.layout.ssl_certificate,null);  SslCertificate.DName issuedTo=getIssuedTo();  if (issuedTo != null) {    ((TextView)certificateView.findViewById(com.android.internal.R.id.to_common)).setText(issuedTo.getCName());    ((TextView)certificateView.findViewById(com.android.internal.R.id.to_org)).setText(issuedTo.getOName());    ((TextView)certificateView.findViewById(com.android.internal.R.id.to_org_unit)).setText(issuedTo.getUName());  }  ((TextView)certificateView.findViewById(com.android.internal.R.id.serial_number)).setText(getSerialNumber(mX509Certificate));  SslCertificate.DName issuedBy=getIssuedBy();  if (issuedBy != null) {    ((TextView)certificateView.findViewById(com.android.internal.R.id.by_common)).setText(issuedBy.getCName());    ((TextView)certificateView.findViewById(com.android.internal.R.id.by_org)).setText(issuedBy.getOName());    ((TextView)certificateView.findViewById(com.android.internal.R.id.by_org_unit)).setText(issuedBy.getUName());  }  String issuedOn=formatCertificateDate(context,getValidNotBeforeDate());  ((TextView)certificateView.findViewById(com.android.internal.R.id.issued_on)).setText(issuedOn);  String expiresOn=formatCertificateDate(context,getValidNotAfterDate());  ((TextView)certificateView.findViewById(com.android.internal.R.id.expires_on)).setText(expiresOn);  ((TextView)certificateView.findViewById(com.android.internal.R.id.sha256_fingerprint)).setText(getDigest(mX509Certificate,"SHA256"));  ((TextView)certificateView.findViewById(com.android.internal.R.id.sha1_fingerprint)).setText(getDigest(mX509Certificate,"SHA1"));  return certificateView;}  }
class C{  public void accept(final ClassVisitor cv){  cv.visitInnerClass(name,outerName,innerName,access);}  }
class C{  public Object read(InputNode node) throws Exception {  Object value=factory.getInstance();  Map table=(Map)value;  if (table != null) {    return read(node,table);  }  return null;}  }
class C{  public void repaint(Layer layer){  if (map != null) {    if (DEBUG) {      Debug.output("SMBRP: forwarding repaint request for " + layer.getName());    }    map.repaint();  } else {    Debug.error("SMBRP: MapBean is null in repaint(" + layer.getName() + ")");  }}  }
class C{  public Model removeProperty(String name){  if (properties().remove(requireNonNull(name,"Property name should not be null")) != null) {    removePropertyFromXML(name);  }  return this;}  }
class C{  private void readStreamCancel(InH3 hIn,HeadersAmp headers) throws IOException {  ServiceRefAmp serviceRef=readToAddress(hIn);  GatewayReply from=readFromAddress(hIn);  long qid=hIn.readLong();  if (log.isLoggable(_logLevel)) {    log.log(_logLevel,"stream-cancel-r " + from + ","+ qid+ " (in "+ this+ ")"+ "\n  {id:"+ qid+ ", to:"+ serviceRef+ ","+ headers+ "}");  }  from.streamCancel(qid);}  }
class C{  protected void removeDefinitionElementListeners(XBLOMDefinitionElement def,ImportRecord ir){  XBLEventSupport es=(XBLEventSupport)def.initializeEventSupport();  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",ir.defAttrListener,false);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",ir.defNodeInsertedListener,false);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",ir.defNodeRemovedListener,false);}  }
class C{  public static int binarySearch(long[] array,int startIndex,int endIndex,long value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  public void addTableFilter(TableFilter filter,boolean isTop){  filters.add(filter);  if (isTop) {    topFilters.add(filter);  }}  }
class C{  public final void print(Object o) throws IOException {  if (o == null)   print("null"); else   if (o instanceof VfsWriteObject)   ((VfsWriteObject)o).print(this); else   print(o.toString());}  }
class C{  private boolean addGetFragment_ID(Integer intId){  UISootObject obj=mUiObjectTable.get(intId);  logger.info("addGetFragment_ID({}:{}) ",intId.toString(),String.format("%x",intId));  if (obj == null) {    logger.warn("Object for id {} does not exist ",intId);    return false;  }  if (obj.sootField == null) {    logger.warn("No sootfield previously created ");    return false;  }  List<Type> params=new LinkedList<Type>();  params.add(RefType.v("android.content.Context"));  RefType returnType=(RefType)obj.sootField.getType();  SootMethod initMethod=null;  for (  String fragmentClass : new String[]{"android.app.Fragment","android.support.v4.app.Fragment"}) {    String methodSig=String.format("<%s: void <init>()>",fragmentClass);    SootMethod fragmentInit=Scene.v().getMethod(methodSig);    try {      initMethod=Scene.v().getActiveHierarchy().resolveConcreteDispatch(returnType.getSootClass(),fragmentInit);    } catch (    Exception ex) {    }    if (initMethod != null)     break;  }  if (initMethod == null) {    logger.warn("Cannot resolve Fragment init method for {} ",returnType);    return false;  }  String funcName="getFragment_" + String.format("%x",intId);  SootMethod method=new SootMethod(funcName,params,returnType,Modifier.PUBLIC | Modifier.STATIC);  obj.lookupMethod=method;  mSootClass.addMethod(method);  API.v().addSafeMethod(method);  JimpleBody body=Jimple.v().newBody(method);  method.setActiveBody(body);  Chain<Unit> units=body.getUnits();  Local argContext=Jimple.v().newLocal("_$paramContext",RefType.v("android.content.Context"));  body.getLocals().add(argContext);  Local localFragment=Jimple.v().newLocal("_$localFragment",returnType);  body.getLocals().add(localFragment);  units.add(Jimple.v().newIdentityStmt(argContext,Jimple.v().newParameterRef(RefType.v("android.content.Context"),0)));  FieldRef fieldRef=Jimple.v().newStaticFieldRef(obj.sootField.makeRef());  units.add(Jimple.v().newAssignStmt(localFragment,fieldRef));  Stmt beforeIf=(Stmt)units.getLast();  Expr newExpr=Jimple.v().newNewExpr((RefType)returnType);  units.add(Jimple.v().newAssignStmt(localFragment,newExpr));  units.add(Jimple.v().newInvokeStmt(Jimple.v().newSpecialInvokeExpr(localFragment,initMethod.makeRef())));  units.add(Jimple.v().newAssignStmt(fieldRef,localFragment));  List<Type> setContextMethodArgTypes=new LinkedList<Type>();  setContextMethodArgTypes.add(Scene.v().getSootClass("android.content.Context").getType());  SootMethodRef setContextMethod=Scene.v().makeMethodRef(returnType.getSootClass(),"droidsafeSetContext",setContextMethodArgTypes,VoidType.v(),false);  Stmt setContextCall=Jimple.v().newInvokeStmt(Jimple.v().newVirtualInvokeExpr(localFragment,setContextMethod,argContext));  units.add(setContextCall);  Stmt afterIf=Jimple.v().newReturnStmt(localFragment);  units.add(afterIf);  ConditionExpr condExpr=Jimple.v().newNeExpr(localFragment,NullConstant.v());  Stmt condStmt=Jimple.v().newIfStmt(condExpr,afterIf);  units.insertAfter(condStmt,beforeIf);  logger.info("addView(): done ");  logger.info(" ");  return true;}  }
class C{  public FileSpellCheckerDescriptor(File file){  this.file=file;}  }
class C{  static int append(char[] src,char[] out,int j){  System.arraycopy(src,0,out,j,src.length);  return j + src.length;}  }
class C{  public long rss(){  return Long.parseLong(fields[23]);}  }
class C{  public void add(Enumeration<T> enumeration){  if (allEnumerations.contains(enumeration)) {    throw new IllegalArgumentException("Duplicate enumeration");  }  allEnumerations.add(enumeration);}  }
class C{  public RouteGeneratorHTML(String origin,String destination,ModeOption mode){  super();  this.origin=origin;  this.destination=destination;  this.mode=mode;  routes=new ArrayList<Route>();  routed=false;}  }
class C{  static void checkAccess(final int access,final int possibleAccess){  if ((access & ~possibleAccess) != 0) {    throw new IllegalArgumentException("Invalid access flags: " + access);  }  int pub=(access & Opcodes.ACC_PUBLIC) == 0 ? 0 : 1;  int pri=(access & Opcodes.ACC_PRIVATE) == 0 ? 0 : 1;  int pro=(access & Opcodes.ACC_PROTECTED) == 0 ? 0 : 1;  if (pub + pri + pro > 1) {    throw new IllegalArgumentException("public private and protected are mutually exclusive: " + access);  }  int fin=(access & Opcodes.ACC_FINAL) == 0 ? 0 : 1;  int abs=(access & Opcodes.ACC_ABSTRACT) == 0 ? 0 : 1;  if (fin + abs > 1) {    throw new IllegalArgumentException("final and abstract are mutually exclusive: " + access);  }}  }
class C{  public static float[] insert(float[] dest,float src,int offset){  float[] temp=new float[dest.length + 1];  System.arraycopy(dest,0,temp,0,offset);  temp[offset]=src;  System.arraycopy(dest,offset,temp,offset + 1,dest.length - offset);  return temp;}  }
class C{  public void measure(){  int size=1000000;  testMinimal(size / 10);  int s;  long time=System.currentTimeMillis();  s=testMinimal(size);  time=System.currentTimeMillis() - time;  System.out.println((double)s / size + " bits/key (minimal) in " + time + " ms");  time=System.currentTimeMillis();  s=testMinimalWithString(size);  time=System.currentTimeMillis() - time;  System.out.println((double)s / size + " bits/key (minimal; String keys) in " + time + " ms");  time=System.currentTimeMillis();  s=test(size,true);  time=System.currentTimeMillis() - time;  System.out.println((double)s / size + " bits/key (minimal old) in " + time + " ms");  time=System.currentTimeMillis();  s=test(size,false);  time=System.currentTimeMillis() - time;  System.out.println((double)s / size + " bits/key (not minimal) in " + time + " ms");}  }
class C{  public StartRecoveryRequest(ShardId shardId,DiscoveryNode sourceNode,DiscoveryNode targetNode,boolean markAsRelocated,Store.MetadataSnapshot metadataSnapshot,RecoveryState.Type recoveryType,long recoveryId){  this.recoveryId=recoveryId;  this.shardId=shardId;  this.sourceNode=sourceNode;  this.targetNode=targetNode;  this.markAsRelocated=markAsRelocated;  this.recoveryType=recoveryType;  this.metadataSnapshot=metadataSnapshot;}  }
class C{  protected StateInternal_Impl(){  super();}  }
class C{  public static void isRating(String member,int rating) throws ValidationException {  if (rating == 0) {    ValidationException vf=new ValidationException(ReasonEnum.RATING_REQUIRED,member,new Object[]{member});    logValidationFailure(vf);    throw vf;  }  isInRange(member,rating,Long.valueOf(1),Long.valueOf(5));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreatetextnode.class,args);}  }
class C{  private void updateUserData(User user,Order order){  if (user != null) {    if (order.getName() != null && !order.getName().isEmpty()) {      user.setName(order.getName());    }    user.setEmail(order.getEmail());    user.setPhone(order.getPhone());    user.setCity(order.getCity());    user.setStreet(order.getStreet());    user.setZip(order.getZip());    user.setHouseNumber(order.getHouseNumber());    SettingsMy.setActiveUser(user);  } else {    Timber.e(new NullPointerException(),"Null user after successful order.");  }}  }
class C{  @Override protected AxisSpace calculateAxisSpace(Graphics2D g2,Rectangle2D plotArea){  AxisSpace space=new AxisSpace();  PlotOrientation orientation=getOrientation();  AxisSpace fixed=getFixedRangeAxisSpace();  if (fixed != null) {    if (orientation == PlotOrientation.VERTICAL) {      space.setLeft(fixed.getLeft());      space.setRight(fixed.getRight());    } else     if (orientation == PlotOrientation.HORIZONTAL) {      space.setTop(fixed.getTop());      space.setBottom(fixed.getBottom());    }  } else {    ValueAxis valueAxis=getRangeAxis();    RectangleEdge valueEdge=Plot.resolveRangeAxisLocation(getRangeAxisLocation(),orientation);    if (valueAxis != null) {      space=valueAxis.reserveSpace(g2,this,plotArea,valueEdge,space);    }  }  Rectangle2D adjustedPlotArea=space.shrink(plotArea,null);  int n=this.subplots.size();  int totalWeight=0;  for (int i=0; i < n; i++) {    CategoryPlot sub=(CategoryPlot)this.subplots.get(i);    totalWeight+=sub.getWeight();  }  this.subplotArea=new Rectangle2D[n];  double x=adjustedPlotArea.getX();  double y=adjustedPlotArea.getY();  double usableSize=0.0;  if (orientation == PlotOrientation.VERTICAL) {    usableSize=adjustedPlotArea.getWidth() - this.gap * (n - 1);  } else   if (orientation == PlotOrientation.HORIZONTAL) {    usableSize=adjustedPlotArea.getHeight() - this.gap * (n - 1);  }  for (int i=0; i < n; i++) {    CategoryPlot plot=(CategoryPlot)this.subplots.get(i);    if (orientation == PlotOrientation.VERTICAL) {      double w=usableSize * plot.getWeight() / totalWeight;      this.subplotArea[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());      x=x + w + this.gap;    } else     if (orientation == PlotOrientation.HORIZONTAL) {      double h=usableSize * plot.getWeight() / totalWeight;      this.subplotArea[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);      y=y + h + this.gap;    }    AxisSpace subSpace=plot.calculateDomainAxisSpace(g2,this.subplotArea[i],null);    space.ensureAtLeast(subSpace);  }  return space;}  }
class C{  private NetworkRoute invertPath2NetworkRoute(Path path,Id<Link> fromLinkId,Id<Link> toLinkId){  NetworkRoute route=this.routeFactory.createRoute(NetworkRoute.class,fromLinkId,toLinkId);  List<Node> nodes=path.nodes;  nodes.remove(0);  nodes.remove(nodes.size() - 1);  List<Id<Link>> linkIds=new ArrayList<Id<Link>>();  for (  Node n : nodes) {    linkIds.add(Id.create(n.getId().toString(),Link.class));  }  route.setLinkIds(fromLinkId,linkIds,toLinkId);  route.setTravelTime((int)path.travelTime);  route.setTravelCost(path.travelCost);  route.setDistance(RouteUtils.calcDistanceExcludingStartEndLink(route,this.network));  return route;}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.events.add(event);}  }
class C{  @Override public void start(){  robotInit();}  }
class C{  public boolean valid(DoubleVectorIndividual ind){  return (ind.isInRange());}  }
class C{  @Override public void peg(Calendar calendar){  this.firstMillisecond=getFirstMillisecond(calendar);  this.lastMillisecond=getLastMillisecond(calendar);}  }
class C{  public void online(TungstenProperties params) throws Exception {  doCreateRuntime(params);  try {    logger.info("Starting replication service: role=" + runtime.getRoleName());    runtime.prepare();    pipeline=runtime.getPipeline();    String initialEventId=params.getString(OpenReplicatorParams.INIT_EVENT_ID);    if (initialEventId != null) {      logger.info("Initializing extractor to start at specific event ID: " + initialEventId);      pipeline.setInitialEventId(initialEventId);    }    if (params.getString(OpenReplicatorParams.SKIP_APPLY_EVENTS) != null) {      try {        long skipCount=params.getLong(OpenReplicatorParams.SKIP_APPLY_EVENTS);        if (skipCount < 0)         throw new ReplicatorException("Apply skip count may not be less than 0: " + skipCount); else         pipeline.setApplySkipCount(skipCount);      } catch (      NumberFormatException e) {        throw new ReplicatorException("Invalid apply skip count: " + params.getString(OpenReplicatorParams.SKIP_APPLY_EVENTS));      }    }    if (params.getString(OpenReplicatorParams.SKIP_APPLY_SEQNOS) != null) {      try {        String seqnosToBeSkipped=params.getString(OpenReplicatorParams.SKIP_APPLY_SEQNOS);        SortedSet<Long> seqnos=new TreeSet<Long>();        String[] seqnoRanges=seqnosToBeSkipped.split(",");        for (        String seqnoRange : seqnoRanges) {          String[] seqnoBoundaries=seqnoRange.trim().split("-");          if (seqnoBoundaries.length == 1) {            seqnos.add(Long.parseLong(seqnoBoundaries[0].trim()));          } else           if (seqnoBoundaries.length == 2) {            Long start=Long.parseLong(seqnoBoundaries[0].trim());            Long end=Long.parseLong(seqnoBoundaries[1].trim());            if (start < end) {              for (Long i=start; i <= end; i++) {                seqnos.add(i);              }            } else {              throw new ReplicatorException("Invalid apply skip seqnos: " + params.getString(OpenReplicatorParams.SKIP_APPLY_SEQNOS));            }          } else {            throw new ReplicatorException("Invalid apply skip seqnos: " + params.getString(OpenReplicatorParams.SKIP_APPLY_SEQNOS));          }        }        logger.info("Going online and skipping events " + seqnos);        pipeline.setApplySkipEvents(seqnos);      } catch (      NumberFormatException e) {        throw new ReplicatorException("Invalid apply skip seqnos: " + params.getString(OpenReplicatorParams.SKIP_APPLY_SEQNOS));      }    }    if (params.get(OpenReplicatorParams.ONLINE_TO_SEQNO) != null) {      long seqno=params.getLong(OpenReplicatorParams.ONLINE_TO_SEQNO);      logger.info("Initializing pipeline to go offline after processing seqno: " + seqno);      pipeline.shutdownAfterSequenceNumber(seqno);    }    if (params.get(OpenReplicatorParams.ONLINE_TO_EVENT_ID) != null) {      String eventId=params.getString(OpenReplicatorParams.ONLINE_TO_EVENT_ID);      logger.info("Initializing pipeline to go offline after processing event ID: " + eventId);      pipeline.shutdownAfterEventId(eventId);    }    if (params.get(OpenReplicatorParams.ONLINE_TO_HEARTBEAT) != null) {      String name=params.getString(OpenReplicatorParams.ONLINE_TO_HEARTBEAT,"*",true);      logger.info("Initializing pipeline to go offline after processing hearbeat");      pipeline.shutdownAfterHeartbeat(name);    }    if (params.get(OpenReplicatorParams.ONLINE_TO_TIMESTAMP) != null) {      long timeMillis=params.getLong(OpenReplicatorParams.ONLINE_TO_TIMESTAMP);      DateFormat formatter=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");      Date toDate=new Date(timeMillis);      Timestamp ts=new Timestamp(timeMillis);      logger.info("Scheduling pipeline to go offline after processing source timestamp: " + formatter.format(toDate));      pipeline.shutdownAfterTimestamp(ts);    }    if (runtime.isMaster() && runtime.getReplicatorProperties().getBoolean(ReplicatorConf.MASTER_THL_CHECK,ReplicatorConf.MASTER_THL_CHECK_DEFAULT,false)) {      ReplDBMSHeader lastAppliedEvent=pipeline.getTailApplier().getLastEvent();      if (lastAppliedEvent != null && lastAppliedEvent.getSourceId() != null && !lastAppliedEvent.getSourceId().equals(runtime.getSourceId())) {        long maxStoredSeqno=pipeline.getMaxStoredSeqno();        long maxCommittedSeqno=pipeline.getMaxCommittedSeqno();        if (maxStoredSeqno > maxCommittedSeqno)         throw new ReplicatorException("Database (@seqno " + maxCommittedSeqno + ") does not seem in sync with THL (@seqno "+ maxStoredSeqno+ "). The last stored event (#"+ maxStoredSeqno+ ") was extracted by "+ lastAppliedEvent.getSourceId()+ " and was not applied on "+ runtime.getSourceId()+ ".");      }    }    pipeline.start(context.getEventDispatcher());    if (runtime.isMaster()) {      logger.info("Adding heartbeat for master");      TungstenProperties props=new TungstenProperties();      props.setString(OpenReplicatorParams.HEARTBEAT_NAME,"MASTER_ONLINE");      String initScript=runtime.getReplicatorProperties().getString(ReplicatorConf.RESOURCE_JDBC_INIT_SCRIPT);      if (initScript != null)       props.setString(ReplicatorConf.RESOURCE_JDBC_INIT_SCRIPT,initScript);      heartbeat(props);    }    runtime.setLastOnlineRoleName(runtime.getRoleName());  } catch (  ReplicatorException e) {    throw e;  }catch (  Throwable e) {    String pendingError="Unable to start replication service due to underlying error";    logger.error(pendingError,e);    throw new ReplicatorException(pendingError + ": " + e);  }}  }
class C{  final SolrInputField field(String name,float boost,Object... values){  SolrInputField f=new SolrInputField(name);  for (  Object v : values) {    f.addValue(v,1.0F);  }  f.setBoost(boost);  return f;}  }
class C{  @Override public void encrypt(byte[] inbuffer,byte[] outbuffer){  int nLen=inbuffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=8) {    lTemp=BinConverter.byteArrayToLong(inbuffer,nI);    lTemp=encryptBlock(lTemp);    BinConverter.longToByteArray(lTemp,outbuffer,nI);  }  ;}  }
class C{  @Override protected SparseEdge addEdge(SparseVertex v1,SparseVertex v2,Attributes attrs){  return builder.addEdge(getGraph(),v1,v2);}  }
class C{  public static void assertJQ(String request,double delta,String... tests) throws Exception {  int queryStartPos=request.indexOf('?');  String query;  String path;  if (-1 == queryStartPos) {    query="";    path=request;  } else {    query=request.substring(queryStartPos + 1);    path=request.substring(0,queryStartPos);  }  query=setParam(query,"wt","json");  request=path + '?' + setParam(query,"indent","on");  String response;  boolean failed=true;  try {    response=restTestHarness.query(request);    failed=false;  }  finally {    if (failed) {      log.error("REQUEST FAILED: " + request);    }  }  for (  String test : tests) {    if (null == test || 0 == test.length())     continue;    String testJSON=json(test);    try {      failed=true;      String err=JSONTestUtil.match(response,testJSON,delta);      failed=false;      if (err != null) {        log.error("query failed JSON validation. error=" + err + "\n expected ="+ testJSON+ "\n response = "+ response+ "\n request = "+ request+ "\n");        throw new RuntimeException(err);      }    }  finally {      if (failed) {        log.error("JSON query validation threw an exception." + "\n expected =" + testJSON + "\n response = "+ response+ "\n request = "+ request+ "\n");      }    }  }}  }
class C{  private static boolean throwing(final Statement s){  if (searchAncestors.forClass(TryStatement.class).from(s) != null)   return true;  final MethodDeclaration m=az.methodDeclaration(searchAncestors.forClass(MethodDeclaration.class).from(s));  return m != null && !m.thrownExceptionTypes().isEmpty();}  }
class C{  public void addInspector(Inspector i){  inspectors.add(i);  tabs.addTab(i.getTitle(),i);  i.setVolatile(isVolatile());  i.setShowsUpdate(false);}  }
class C{  private void endMyTurn(){  disableButtons();  clientgui.getBoardView().select(null);  clientgui.getBoardView().highlight(null);  clientgui.getBoardView().cursor(null);}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else {        results.put(key,object.toString());      }    }  }  return results;}  }
class C{  public static String appendParaToUrl(String url,String paraKey,String paraValue){  if (StringUtils.isEmpty(url)) {    return url;  }  StringBuilder sb=new StringBuilder(url);  if (!url.contains(URL_AND_PARA_SEPARATOR)) {    sb.append(URL_AND_PARA_SEPARATOR);  } else {    sb.append(PARAMETERS_SEPARATOR);  }  return sb.append(paraKey).append(EQUAL_SIGN).append(paraValue).toString();}  }
class C{  public static double[][] selectColumns(double matrix[][],boolean includeColumnFlags[]){  Vector<Integer> v=new Vector<Integer>();  for (int i=0; i < includeColumnFlags.length; i++) {    if (includeColumnFlags[i]) {      v.add(new Integer(i));    }  }  double[][] data=new double[matrix.length][v.size()];  for (int r=0; r < matrix.length; r++) {    for (int outputColumnIndex=0; outputColumnIndex < v.size(); outputColumnIndex++) {      int outputColumn=v.get(outputColumnIndex);      data[r][outputColumnIndex]=matrix[r][outputColumn];    }  }  return data;}  }
class C{  private void updateInfoFlowSummaryMap(MethodModel methodModel,Method method){  Set<InfoKind> sourcesInfoKinds=method.getSourcesInfoKinds();  Set<InfoKind> sinkInfoKinds=method.getSinkInfoKinds();  if (!sourcesInfoKinds.isEmpty() && !sinkInfoKinds.isEmpty()) {    for (    InfoKind sourceInfoKind : sourcesInfoKinds) {      String source=sourceInfoKind.toString();      Map<String,Set<MethodModel>> sinkMap=infoFlowSummaryMap.get(source);      if (sinkMap == null) {        sinkMap=new TreeMap<String,Set<MethodModel>>();        infoFlowSummaryMap.put(source,sinkMap);      }      for (      InfoKind sinkInfoKind : sinkInfoKinds) {        String sink=sinkInfoKind.toString();        Set<MethodModel> methodModels=sinkMap.get(sink);        if (methodModels == null) {          methodModels=new TreeSet<MethodModel>();          sinkMap.put(sink,methodModels);        }        methodModels.add(methodModel);      }    }  }}  }
class C{  public WebView(Context context){  this(context,null);}  }
class C{  private boolean init(){  al.alGenBuffers(1,dataStorageBuffer,0);  if (JoalAudioFactory.checkALError()) {    log.warn("Error creating JoalAudioBuffer (" + this.getSystemName() + ")");    return false;  }  this.setState(STATE_EMPTY);  return true;}  }
class C{  public static org.oscm.vo.VOSubscriptionIdAndOrganizations convertToApi(org.oscm.internal.vo.VOSubscriptionIdAndOrganizations oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOSubscriptionIdAndOrganizations newVO=new org.oscm.vo.VOSubscriptionIdAndOrganizations();  newVO.setSubscriptionId(oldVO.getSubscriptionId());  newVO.setOrganizations(convertToApiVOOrganization(oldVO.getOrganizations()));  return newVO;}  }
class C{  public boolean isEmpty(){  return (myPayload == null);}  }
class C{  protected boolean appliesTo(String styleName,String tagName){  Set s=(Set)ignoreAttributes.get(tagName);  if (s == null) {    return true;  } else {    return !s.contains(styleName);  }}  }
class C{  public boolean hasProperty(String name){  for (  Property property : this.properties) {    if (property.getName().equals(name)) {      return true;    }  }  return false;}  }
class C{  private String status(final ObjectName namePattern,final String pidAttribute,final String statusMethod,final String[] attributes,final Object[] values) throws ConnectionFailedException, IOException, MBeanInvocationFailedException {  return invokeOperationOnTargetMBean(namePattern,pidAttribute,statusMethod,attributes,values).toString();}  }
class C{  public static boolean isValidPort(int port){  return (port > 0 && port <= 0xFFFF);}  }
class C{  public RecipientListRouterTest(String name){  super(name);}  }
class C{  protected double distribution(double[][] props,double[][][] dists,int att,Instances data) throws Exception {  double splitPoint=Double.NaN;  Attribute attribute=data.attribute(att);  double[][] dist=null;  int indexOfFirstMissingValue=data.numInstances();  if (attribute.isNominal()) {    dist=new double[attribute.numValues()][data.numClasses()];    for (int i=0; i < data.numInstances(); i++) {      Instance inst=data.instance(i);      if (inst.isMissing(att)) {        if (indexOfFirstMissingValue == data.numInstances()) {          indexOfFirstMissingValue=i;        }        continue;      }      dist[(int)inst.value(att)][(int)inst.classValue()]+=inst.weight();    }  } else {    double[][] currDist=new double[2][data.numClasses()];    dist=new double[2][data.numClasses()];    data.sort(att);    for (int j=0; j < data.numInstances(); j++) {      Instance inst=data.instance(j);      if (inst.isMissing(att)) {        indexOfFirstMissingValue=j;        break;      }      currDist[1][(int)inst.classValue()]+=inst.weight();    }    double priorVal=priorVal(currDist);    for (int j=0; j < currDist.length; j++) {      System.arraycopy(currDist[j],0,dist[j],0,dist[j].length);    }    double currSplit=data.instance(0).value(att);    double currVal, bestVal=-Double.MAX_VALUE;    for (int i=0; i < indexOfFirstMissingValue; i++) {      Instance inst=data.instance(i);      double attVal=inst.value(att);      if (attVal > currSplit) {        currVal=gain(currDist,priorVal);        if (currVal > bestVal) {          bestVal=currVal;          splitPoint=(attVal + currSplit) / 2.0;          if (splitPoint <= currSplit) {            splitPoint=attVal;          }          for (int j=0; j < currDist.length; j++) {            System.arraycopy(currDist[j],0,dist[j],0,dist[j].length);          }        }        currSplit=attVal;      }      int classVal=(int)inst.classValue();      currDist[0][classVal]+=inst.weight();      currDist[1][classVal]-=inst.weight();    }  }  props[0]=new double[dist.length];  for (int k=0; k < props[0].length; k++) {    props[0][k]=Utils.sum(dist[k]);  }  if (Utils.eq(Utils.sum(props[0]),0)) {    for (int k=0; k < props[0].length; k++) {      props[0][k]=1.0 / props[0].length;    }  } else {    Utils.normalize(props[0]);  }  for (int i=indexOfFirstMissingValue; i < data.numInstances(); i++) {    Instance inst=data.instance(i);    if (attribute.isNominal()) {      if (inst.isMissing(att)) {        for (int j=0; j < dist.length; j++) {          dist[j][(int)inst.classValue()]+=props[0][j] * inst.weight();        }      }    } else {      for (int j=0; j < dist.length; j++) {        dist[j][(int)inst.classValue()]+=props[0][j] * inst.weight();      }    }  }  dists[0]=dist;  return splitPoint;}  }
class C{  public Rational add(Rational secondRational){  long n=r[0] * secondRational.getDenominator() + r[1] * secondRational.getNumerator();  long d=r[1] * secondRational.getDenominator();  return new Rational(n,d);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public double calculateLogLikelihood(){  return 0.0;}  }
class C{  public PodContainer(BartenderSystem bartender,HttpContainerBuilder builder){  Objects.requireNonNull(bartender);  Objects.requireNonNull(builder);  _bartender=bartender;  _ampSystem=AmpSystem.getCurrent();  _classLoader=EnvLoader.getEnvironmentClassLoader();  _local.set(this,_classLoader);  _lifecycle=new Lifecycle(log,"pod-container");  _ampManager=_ampSystem.getManager();}  }
class C{  public void updateLocale(String locale) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update regional setting");  Element scope=_getRootElement("regional");  scope.setAttribute("locale",locale.trim());}  }
class C{  public void reset(){  startTime_ns=System.nanoTime();  totalPktCnt=0;  totalProcTimeNs=0;  avgTotalProcTimeNs=0;  sumSquaredProcTimeNs2=0;  maxTotalProcTimeNs=Long.MIN_VALUE;  minTotalProcTimeNs=Long.MAX_VALUE;  sigmaTotalProcTimeNs=0;  for (  OneComponentTime oct : compStats.values()) {    oct.resetAllCounters();  }}  }
class C{  public int drawNextChainState(int currentState,int endingState,int totalNumberOfChanges,int thisChangeNumber){  computePdfNextChainState(currentState,endingState,totalNumberOfChanges,thisChangeNumber,tmp);  return MathUtils.randomChoicePDF(tmp);}  }
class C{  public static boolean visibilityMatch(BuiltinInfo fastr,BuiltinInfo gnur){  return fastr.visibility == RVisibility.CUSTOM || fastr.visibility == gnur.visibility;}  }
class C{  public static boolean isNA(String[] NAstrings,String w){  if (NAstrings == null)   return false;  for (  String na : NAstrings) {    if (w.equals(na))     return true;  }  return false;}  }
class C{  static void assertHoldsLock(Object lock){  if (!Thread.holdsLock(lock)) {    throw DbException.throwInternalError();  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getMoreOp_();}  }
class C{  @Override public boolean isEnabled(){  return _state.isEnabled();}  }
class C{  public void resetAttacks(){  attacks=new Vector<AttackHandler>();}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(SeriesRenderingOrder.FORWARD)) {    return SeriesRenderingOrder.FORWARD;  } else   if (this.equals(SeriesRenderingOrder.REVERSE)) {    return SeriesRenderingOrder.REVERSE;  }  return null;}  }
class C{  public void turnChecksOff(){  m_checksTurnedOff=true;}  }
class C{  public ShardRestoreStatus(String nodeId,State state){  this(nodeId,state,null);}  }
class C{  public IComment editComment(final IComment comment,final String newComment) throws CouldntSaveDataException {  IComment editedComment=null;  try {    editedComment=m_instruction.editGlobalComment(comment,newComment);  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException exception) {    throw new CouldntSaveDataException(exception);  }  for (  final IInstructionListener listener : m_listeners) {    listener.editedComment(this,comment);  }  return editedComment;}  }
class C{  private void pushFrameIP(ObjectReference code,int verbosity){  if (prevFp.isZero()) {    if (verbosity >= 3) {      Log.write(" t.contextRegisters.ip    = ");      Log.writeln(thread.getContextRegisters().getIP());      Log.write("*t.contextRegisters.iploc = ");      Log.writeln(thread.getContextRegisters().getIPLocation().loadAddress());    }    if (compiledMethodType != CompiledMethod.JNI)     processCodeLocation(code,initialIPLoc); else     if (verbosity >= 4) {      Log.writeln("GC Warning: SKIPPING return address for JNI code");    }  } else {    Address returnAddressLoc=Magic.getReturnAddressLocation(prevFp);    Address returnAddress=returnAddressLoc.loadAddress();    if (verbosity >= 4) {      Log.write("--- Processing return address ");      Log.write(returnAddress);      Log.write(" located at ");      Log.writeln(returnAddressLoc);    }    if (!DebugUtil.addrInBootImage(returnAddress))     processCodeLocation(code,returnAddressLoc);  }}  }
class C{  public ContextedRuntimeException(final String message,final Throwable cause,ExceptionContext context){  super(message,cause);  if (context == null) {    context=new DefaultExceptionContext();  }  exceptionContext=context;}  }
class C{  protected void handleChunk(final E[] a,final boolean reopen) throws InterruptedException {  final long begin=System.nanoTime();  try {    final long beforeSplit=System.nanoTime();    final LinkedList<Split> splits=ndx.splitKeys(ndx.getTimestamp(),0,a.length,a);    final long splitNanos=System.nanoTime() - beforeSplit;synchronized (stats) {      stats.elapsedSplitChunkNanos+=splitNanos;    }    for (    Split split : splits) {      halted();      addToOutputBuffer((L)split.pmd,a,split.fromIndex,split.toIndex,reopen);    }  }  finally {synchronized (stats) {      stats.handledChunkCount.incrementAndGet();      stats.elapsedHandleChunkNanos+=System.nanoTime() - begin;    }  }}  }
class C{  public static void initForCurrentThread(){  LOG.trace("initForCurrentThread()");  if (instance == null) {    initInstance();  }  THREAD_LOCAL.set(instance);}  }
class C{  private boolean processTwoTargetConditionalBranch(IR ir,Instruction cb,BasicBlock bb){  Instruction target1Label=IfCmp2.getTarget1(cb).target;  Instruction target1Inst=firstRealInstructionFollowing(target1Label);  Instruction nextLabel=firstLabelFollowing(cb);  boolean endsBlock=cb.nextInstructionInCodeOrder().operator() == BBEND;  if (target1Inst != null && target1Inst != cb) {    if (Goto.conforms(target1Inst)) {      IfCmp2.setTarget1(cb,(BranchOperand)Goto.getTarget(target1Inst).copy());      bb.recomputeNormalOut(ir);      return true;    }    BasicBlock target1Block=target1Label.getBasicBlock();    if (target1Block.isEmpty()) {      BasicBlock nextBlock=target1Block.getFallThroughBlock();      IfCmp2.setTarget1(cb,nextBlock.makeJumpTarget());      bb.recomputeNormalOut(ir);      return true;    }  }  Instruction target2Label=IfCmp2.getTarget2(cb).target;  Instruction target2Inst=firstRealInstructionFollowing(target2Label);  if (target2Inst != null && target2Inst != cb) {    if (Goto.conforms(target2Inst)) {      IfCmp2.setTarget2(cb,(BranchOperand)Goto.getTarget(target2Inst).copy());      bb.recomputeNormalOut(ir);      return true;    }    if ((target2Label == nextLabel) && endsBlock) {      if (VM.VerifyAssertions)       VM._assert(cb.operator() == INT_IFCMP2);      IfCmp.mutate(cb,INT_IFCMP,IfCmp2.getGuardResult(cb),IfCmp2.getVal1(cb),IfCmp2.getVal2(cb),IfCmp2.getCond1(cb),IfCmp2.getTarget1(cb),IfCmp2.getBranchProfile1(cb));      return true;    }    BasicBlock target2Block=target2Label.getBasicBlock();    if (target2Block.isEmpty()) {      BasicBlock nextBlock=target2Block.getFallThroughBlock();      IfCmp2.setTarget2(cb,nextBlock.makeJumpTarget());      bb.recomputeNormalOut(ir);      return true;    }  }  if (endsBlock) {    Instruction nextI=firstRealInstructionFollowing(nextLabel);    if (nextI != null && Goto.conforms(nextI)) {      cb.insertAfter(nextI.copyWithoutLinks());      bb.recomputeNormalOut(ir);      return true;    }  }  return false;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.string2DateTv=(TextView)this.findViewById(R.id.string2Date_tv);  this.date2StringTv=(TextView)this.findViewById(R.id.date2String_tv);  this.getYearMonthDayTv=(TextView)this.findViewById(R.id.getYearMonthDay_tv);  this.getTimestampStringTv=(TextView)this.findViewById(R.id.getTimestampString_tv);  this.date2yyyyMMddTv=(TextView)this.findViewById(R.id.date2yyyyMMdd_tv);  this.date2MMddWeekTv=(TextView)this.findViewById(R.id.date2MMddWeek_tv);  this.date2yyyyMMddWeekTv=(TextView)this.findViewById(R.id.date2yyyyMMddWeek_tv);  this.time24To12Tv=(TextView)this.findViewById(R.id.time24To12_tv);}  }
class C{  protected static Attribute toAttribute(JSONNode att,boolean[] classAtt){  Attribute result;  String name;  String type;  String dateformat;  JSONNode labels;  ArrayList<String> values;  String label;  int i;  double weight;  name=(String)att.getChild(NAME).getValue("noname");  type=(String)att.getChild(TYPE).getValue("");  weight=(Double)att.getChild(WEIGHT).getValue(new Double(1.0));  if (type.equals(Attribute.typeToString(Attribute.NUMERIC))) {    result=new Attribute(name);  } else   if (type.equals(Attribute.typeToString(Attribute.NOMINAL))) {    labels=att.getChild(LABELS);    values=new ArrayList<String>();    for (i=0; i < labels.getChildCount(); i++) {      label=(String)((JSONNode)labels.getChildAt(i)).getValue();      if (label.equals("'" + MISSING_VALUE + "'"))       values.add(MISSING_VALUE); else       values.add(label);    }    result=new Attribute(name,values);  } else   if (type.equals(Attribute.typeToString(Attribute.DATE))) {    dateformat=(String)att.getChild(DATEFORMAT).getValue("yyyy-MM-dd'T'HH:mm:ss");    result=new Attribute(name,dateformat);  } else   if (type.equals(Attribute.typeToString(Attribute.STRING))) {    result=new Attribute(name,(ArrayList<String>)null);  } else {    System.err.println("Unhandled attribute type '" + type + "'!");    return null;  }  result.setWeight(weight);  return result;}  }
class C{  @Override public Range findRangeBounds(XYDataset dataset){  ParamChecks.nullNotPermitted(dataset,"dataset");  double minimum=Double.POSITIVE_INFINITY;  double maximum=Double.NEGATIVE_INFINITY;  int seriesCount=dataset.getSeriesCount();  double lvalue;  double uvalue;  if (dataset instanceof VectorXYDataset) {    VectorXYDataset vdataset=(VectorXYDataset)dataset;    for (int series=0; series < seriesCount; series++) {      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        double delta=vdataset.getVectorYValue(series,item);        if (delta < 0.0) {          uvalue=vdataset.getYValue(series,item);          lvalue=uvalue + delta;        } else {          lvalue=vdataset.getYValue(series,item);          uvalue=lvalue + delta;        }        minimum=Math.min(minimum,lvalue);        maximum=Math.max(maximum,uvalue);      }    }  } else {    for (int series=0; series < seriesCount; series++) {      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        lvalue=dataset.getYValue(series,item);        uvalue=lvalue;        minimum=Math.min(minimum,lvalue);        maximum=Math.max(maximum,uvalue);      }    }  }  if (minimum > maximum) {    return null;  } else {    return new Range(minimum,maximum);  }}  }
class C{  public static void moveAndMask(final ITranslationEnvironment environment,final long offset,final OperandSize valueSize,final String value,final String subRegister,final List<ReilInstruction> instructions) throws IllegalArgumentException, InternalTranslationException, IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(value,"Error: Argument value can't be null");  Preconditions.checkNotNull(subRegister,"Error: Argument subRegister can't be null");  Preconditions.checkNotNull(valueSize,"Error: Argument valueSize can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  final String parentRegister=getParentRegister(subRegister);  final OperandSize registerSize=getRegisterSize(subRegister);  final OperandSize parentRegisterSize=getRegisterSize(parentRegister);  final OperandSize archSize=environment.getArchitectureSize();  if (registerSize.getByteSize() >= archSize.getByteSize()) {    throw new InternalTranslationException("Error: Register is not a subregister");  }  if (valueSize.getByteSize() >= archSize.getByteSize()) {    throw new InternalTranslationException("Error: Value doesn't fit into a subregister");  }  if (valueSize.getByteSize() >= parentRegisterSize.getByteSize()) {    throw new InternalTranslationException("Error: Value doesn't fit into a parent register");  }  final String mask=String.valueOf(getNegativeMask(subRegister));  if (isHigher8BitRegister(subRegister)) {    final String shiftedValue=environment.getNextVariableString();    final String maskedValue=environment.getNextVariableString();    instructions.add(ReilHelpers.createBsh(offset,valueSize,value,valueSize,"8",archSize,shiftedValue));    instructions.add(ReilHelpers.createAnd(offset + 1,archSize,parentRegister,archSize,mask,archSize,maskedValue));    instructions.add(ReilHelpers.createOr(offset + 2,archSize,shiftedValue,archSize,maskedValue,archSize,parentRegister));  } else {    final String maskedValue=environment.getNextVariableString();    instructions.add(ReilHelpers.createAnd(offset,archSize,parentRegister,archSize,mask,archSize,maskedValue));    instructions.add(ReilHelpers.createOr(offset + 1,valueSize,value,archSize,maskedValue,archSize,parentRegister));  }}  }
class C{  @LargeTest public void testMediaImageItemHeightWidth() throws Exception {  final String imageItemFileName=INPUT_FILE_PATH + "IMG_640x480.jpg";  final int imageItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaImageItem1",imageItemFileName,imageItemRenderingMode,5000);  mVideoEditor.addMediaItem(mediaImageItem1);  assertEquals("Image Height = Image Scaled Height",mediaImageItem1.getScaledHeight(),mediaImageItem1.getHeight());  assertEquals("Image Width = Image Scaled Width",mediaImageItem1.getScaledWidth(),mediaImageItem1.getWidth());}  }
class C{  public WmsLayer(Sector sector,double metersPerPixel,WmsLayerConfig config){  super("WMS Layer");  if (sector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsLayer","constructor","missingSector"));  }  if (metersPerPixel <= 0) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsLayer","constructor","invalidResolution"));  }  if (config == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"WmsLayer","constructor","missingConfig"));  }  this.init();  this.setConfiguration(sector,metersPerPixel,config);}  }
class C{  public void handleEvent(Event evt){  EventTarget target=evt.getTarget();  if (target != evt.getCurrentTarget()) {    return;  }  MutationEvent mevt=(MutationEvent)evt;  if (mevt.getAttrName().equals(XBL_REF_ATTRIBUTE)) {    Element defRef=(Element)target;    removeDefinitionRef(defRef);    if (mevt.getNewValue().length() == 0) {      XBLOMDefinitionElement def=(XBLOMDefinitionElement)defRef;      String ns=def.getElementNamespaceURI();      String ln=def.getElementLocalName();      addDefinition(ns,ln,(XBLOMDefinitionElement)defRef,null);    } else {      addDefinitionRef(defRef);    }  }}  }
class C{  public static GetInactiveImagesResponse checkGetInactiveImagesResponse(GetInactiveImagesResponse response) throws RpcException {  logger.info("Checking {}",response);switch (response.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(response.getError());case DATASTORE_NOT_FOUND:throw new DatastoreNotFoundException(response.getError());case OPERATION_IN_PROGRESS:throw new OperationInProgressException(response.getError());default :throw new RpcException(String.format("Unexpected return code: %s",response.getResult()));}return response;}  }
class C{  @Override public void clear(){  super.clear();  float[] keys=_set;  float[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  protected void createEntityAt(final String clazz,final int type,final int x,final int y){  logger.debug("creating " + clazz + ":"+ type+ " at "+ x+ ","+ y);  final int ENTRY_POINT=0;  final int ZONE_CHANGE=1;  final int DOOR=6;  final int PORTAL=4;  final int PORTAL_STAIRS_DOWN=3;  final int PORTAL_STAIRS_UP=2;  final int ONE_WAY_PORTAL_DESTINATION=5;  try {    if (clazz.contains("logic/portal")) {switch (type) {case ENTRY_POINT:case ZONE_CHANGE:        setEntryPoint(x,y);      break;case ONE_WAY_PORTAL_DESTINATION:case PORTAL_STAIRS_UP:case PORTAL_STAIRS_DOWN:    createLevelPortalAt(type,x,y);  break;case PORTAL:break;case DOOR:break;default :logger.error("Unknown Portal (class/type: " + clazz + ":"+ type+ ") at ("+ x+ ","+ y+ ") of "+ getID()+ " found");break;}} else if (clazz.contains("sheep.png")) {final Sheep sheep=new Sheep();sheep.setPosition(x,y);add(sheep);} else if (clazz.contains("logic/creature")) {final EntityManager manager=SingletonRepository.getEntityManager();if (manager.isCreature(clazz,type)) {final Creature creature=manager.getCreature(clazz,type);final CreatureRespawnPoint point=new CreatureRespawnPoint(this,x,y,creature,1);add(point);} else {logger.error("Unknown Entity (class/type: " + clazz + ":"+ type+ ") at ("+ x+ ","+ y+ ") of "+ getID()+ " found");}} else if (clazz.contains("logic/item")) {final PassiveEntityRespawnPoint passiveEntityrespawnPoint=PassiveEntityRespawnPointFactory.create(clazz,type,getID(),x,y);if (passiveEntityrespawnPoint != null) {passiveEntityrespawnPoint.setPosition(x,y);add(passiveEntityrespawnPoint);passiveEntityrespawnPoint.setStartState();}}} catch (final RuntimeException e) {logger.error("error creating entity " + type + " at ("+ x+ ","+ y+ ")",e);}}  }
class C{  protected static List<String> extractJvmOpts(final List<String> args){  return extractOptWithPattern(JVM_OPTS_REGEX,false,args);}  }
class C{  public static boolean isValidPackageName(String name){  IStatus status=validatePackageName(name);switch (status.getSeverity()) {case Status.WARNING:case Status.OK:    return true;default :  return false;}}  }
class C{  public TopNUniqueSort(int initialCapacity,int bound,boolean flag){  ascending=flag;  q=new PriorityQueue<E>(initialCapacity,new ReversibleComparator<E>(flag));  qbound=bound;  hmap=new HashMap<E,MutableInt>();}  }
class C{  public void notifyRegistration(){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceRegistered();  }}  }
class C{  @Override public void show(){  if (heavyWeightContainer != null) {    snapshot();  }  popup.show();}  }
class C{  @Override public void rotate(float pitch,float yaw){  this.rotate(null,pitch,yaw);}  }
class C{  public String makeName(Class<?> clazz,String name){  return makeName(clazz.getCanonicalName(),name);}  }
class C{  public Boolean isMarkAsLocalSupported(){  return markAsLocalSupported;}  }
class C{  public void transmitBinaryFile(FileObject fileObject,IConnectionStreams connectionStreams,ICvsFileSystem cvsFileSystem) throws IOException {  final File file=cvsFileSystem.getLocalFileSystem().getFile(fileObject);  long length=file.length();  writeLengthString(connectionStreams.getLoggedWriter(),length);  final BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file));  try {    final OutputStream outputStream=connectionStreams.getOutputStream();    final byte[] chunk=new byte[CHUNK_SIZE];    while (length > 0) {      final int bytesToRead=(length >= CHUNK_SIZE) ? CHUNK_SIZE : (int)length;      final int count=bis.read(chunk,0,bytesToRead);      length-=count;      outputStream.write(chunk,0,count);    }    outputStream.flush();  }  finally {    try {      bis.close();    } catch (    IOException ex) {    }  }}  }
class C{  protected void validateAccessBeforeExport(final Object object,final Class objectType) throws AccessDeniedException {  if (!federationFacade.isManageable(object,objectType)) {    throw new AccessDeniedException("access denied");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.650 -0400",hash_original_method="BD3079305B0DD44F3DF81179FC62E7EA",hash_generated_method="39BB80CE54386C58EC6787A9B88E5371") public void incomingPanDisconnection(BluetoothAdapter adapter,BluetoothDevice device){  disconnectFromRemoteOrVerifyConnectNap(adapter,device,false);}  }
class C{  static boolean logNonStun(long numOfPacket){  return (numOfPacket == 1) || (numOfPacket == 300) || (numOfPacket == 500)|| (numOfPacket == 1000)|| ((numOfPacket % 5000) == 0);}  }
class C{  private boolean isCharacterQuoteCharacter(char c){  return c == quotechar;}  }
class C{  private void drawDiscreteDefault(DiscreteUncertainObject uo,int col,double size){  final int e=uo.getNumberSamples();  final double ssize=size * Math.sqrt(e);  for (int i=0; i < e; i++) {    final NumberVector s=uo.getSample(i);    if (s == null) {      continue;    }    double[] v=proj.fastProjectDataToRenderSpace(s);    Element dot=svgp.svgCircle(v[0],v[1],ssize * uo.getWeight(i));    SVGUtil.addCSSClass(dot,CSS_CLASS);    SVGUtil.setAtt(dot,SVGConstants.SVG_STYLE_ATTRIBUTE,FILL + SVGUtil.colorToString(col));    layer.appendChild(dot);  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  static boolean supportsLinks(Path dir){  Path link=dir.resolve("testlink");  Path target=dir.resolve("testtarget");  try {    Files.createSymbolicLink(link,target);    Files.delete(link);    return true;  } catch (  UnsupportedOperationException x) {    return false;  }catch (  IOException x) {    return false;  }}  }
class C{  public static boolean scrub(final Bundle bundle){  if (null == bundle) {    return false;  }  try {    bundle.containsKey(null);  } catch (  final Exception e) {    bundle.clear();    return true;  }  return false;}  }
class C{  boolean matchMode(QName m1){  return matchModes(m1,m_template.getMode());}  }
class C{  private static Class primitiveToWrapperType(Class clazz){  if (clazz == null)   return null; else   if (clazz.isPrimitive()) {    if (clazz.getName().equals("boolean"))     return Boolean.class; else     if (clazz.getName().equals("byte"))     return Byte.class; else     if (clazz.getName().equals("char"))     return Character.class; else     if (clazz.getName().equals("short"))     return Short.class; else     if (clazz.getName().equals("int"))     return Integer.class; else     if (clazz.getName().equals("long"))     return Long.class; else     if (clazz.getName().equals("float"))     return Float.class; else     if (clazz.getName().equals("double"))     return Double.class;  }  return clazz;}  }
class C{  private void startDeviceAdminPrompt(ComponentName cdmDeviceAdmin){  Intent deviceAdminIntent=new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN);  deviceAdminIntent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN,cdmDeviceAdmin);  deviceAdminIntent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION,getResources().getString(R.string.device_admin_enable_alert));  startActivityForResult(deviceAdminIntent,ACTIVATION_REQUEST);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  ScatterRenderer clone=(ScatterRenderer)super.clone();  clone.seriesShapesFilled=(BooleanList)this.seriesShapesFilled.clone();  return clone;}  }
class C{  protected void addTypePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TypeSpecifier_type_feature"),getString("_UI_PropertyDescriptor_description","_UI_TypeSpecifier_type_feature","_UI_TypeSpecifier_type"),TypesPackage.Literals.TYPE_SPECIFIER__TYPE,true,false,true,null,null,null));}  }
class C{  LoadedVariants(List<Variant> variants,int skipped){  mVariants=variants;  mSkippedDuringLoading=skipped;}  }
class C{  public synchronized THLEvent next() throws ReplicatorException, InterruptedException {  return next(true);}  }
class C{  public boolean initDesktop(int ad_Desktop_ID){  AD_Desktop_ID=ad_Desktop_ID;  String sql=null;  if (Env.isBaseLanguage(m_ctx,"AD_Desktop"))   sql="SELECT Name,Description,Help," + " AD_Column_ID,AD_Image_ID,AD_Color_ID,PA_Goal_ID " + "FROM AD_Desktop "+ "WHERE AD_Desktop_ID=? AND IsActive='Y'"; else   sql="SELECT t.Name,t.Description,t.Help," + " w.AD_Column_ID,w.AD_Image_ID,w.AD_Color_ID,w.PA_Goal_ID " + "FROM AD_Desktop w, AD_Desktop_Trl t "+ "WHERE w.AD_Desktop_ID=? AND w.IsActive='Y'"+ " AND w.AD_Desktop_ID=t.AD_Desktop_ID"+ " AND t.AD_Language='" + Env.getAD_Language(m_ctx) + "'";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Desktop_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      Name=rs.getString(1);      Description=rs.getString(2);      if (Description == null)       Description="";      Help=rs.getString(3);      if (Help == null)       Help="";      AD_Column_ID=rs.getInt(4);      AD_Image_ID=rs.getInt(5);      AD_Color_ID=rs.getInt(6);      PA_Goal_ID=rs.getInt(7);    } else     AD_Desktop_ID=0;    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  if (AD_Desktop_ID == 0)   return false;  return initDesktopWorkbenches();}  }
class C{  protected void calculateMaxStackBarValue(){  float stackValue;  BarSet barSet;  Bar bar;  int maxStackValue=0;  int dataSize=data.size();  int setSize=data.get(0).size();  for (int i=0; i < setSize; i++) {    stackValue=0;    for (int j=0; j < dataSize; j++) {      barSet=(BarSet)data.get(j);      bar=(Bar)barSet.getEntry(i);      stackValue+=bar.getValue();    }    if (maxStackValue < (int)Math.ceil(stackValue))     maxStackValue=(int)Math.ceil(stackValue);  }  while (maxStackValue % this.getStep() != 0)   maxStackValue+=1;  super.setAxisBorderValues(0,maxStackValue,this.getStep());}  }
class C{  public void addModel(ModelRenderer model){  addModel(model,false);}  }
class C{  public void startTransition(int durationMillis){  mFrom=0;  mTo=255;  mAlpha=0;  mDuration=mOriginalDuration=durationMillis;  mReverse=false;  mTransitionState=TRANSITION_STARTING;  invalidateSelf();}  }
class C{  @Override public void respond(String response){  getChannel().send().message(getUser(),response);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.ARRAY_LIKE__DECLARED_ELEMENT_TYPE:    return getDeclaredElementType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static String[] removeDuplicateStrings(String[] array){  if (ObjectUtils.isEmpty(array)) {    return array;  }  Set<String> set=new TreeSet<String>();  for (  String element : array) {    set.add(element);  }  return toStringArray(set);}  }
class C{  public boolean contains(Coords c){  if (c == null) {    return false;  }  return contains(c.getX(),c.getY());}  }
class C{  @Override public double java2DToValue(double java2DValue,Rectangle2D area,RectangleEdge edge){  Range range=getRange();  double axisMin=range.getLowerBound();  double axisMax=range.getUpperBound();  double min=0.0;  double max=0.0;  if (RectangleEdge.isTopOrBottom(edge)) {    min=area.getX();    max=area.getMaxX();  } else   if (RectangleEdge.isLeftOrRight(edge)) {    min=area.getMaxY();    max=area.getY();  }  if (isInverted()) {    return axisMax - (java2DValue - min) / (max - min) * (axisMax - axisMin);  } else {    return axisMin + (java2DValue - min) / (max - min) * (axisMax - axisMin);  }}  }
class C{  private int yViewToDocument(int vpos){  View view=editorPane.getUI().getRootView(editorPane);  Insets insets=getInsets();  vpos-=insets.top + frw;  int myHeight=Math.max(getHeight() - insets.top - insets.bottom- frw * 2,1);  if (prefViewHeight > myHeight) {    vpos=vpos * prefViewHeight / myHeight;  }  Bias[] breturn=new Bias[1];  int pos=view.viewToModel(0,vpos,new Rectangle(5,Integer.MAX_VALUE),breturn);  return pos;}  }
class C{  void update(){  AffineTransform oldt=t;  double v00=Double.parseDouble(m00.getText());  double v01=Double.parseDouble(m01.getText());  double v02=Double.parseDouble(m02.getText());  double v10=Double.parseDouble(m10.getText());  double v11=Double.parseDouble(m11.getText());  double v12=Double.parseDouble(m12.getText());  t=new AffineTransform(v00,v10,v01,v11,v02,v12);  firePropertyChange("value",oldt,t);}  }
class C{  static void importMap(InputStream is,Map<String,String> m) throws IOException, InvalidPreferencesFormatException {  try {    Document doc=loadPrefsDoc(is);    Element xmlMap=doc.getDocumentElement();    String mapVersion=xmlMap.getAttribute("MAP_XML_VERSION");    if (mapVersion.compareTo(MAP_XML_VERSION) > 0)     throw new InvalidPreferencesFormatException("Preferences map file format version " + mapVersion + " is not supported. This java installation can read"+ " versions "+ MAP_XML_VERSION+ " or older. You may need"+ " to install a newer version of JDK.");    NodeList entries=xmlMap.getChildNodes();    for (int i=0, numEntries=entries.getLength(); i < numEntries; i++) {      Element entry=(Element)entries.item(i);      m.put(entry.getAttribute("key"),entry.getAttribute("value"));    }  } catch (  SAXException e) {    throw new InvalidPreferencesFormatException(e);  }}  }
class C{  public void printStatistics(Logger inputLog){  forcePermissionInit();  if (hasDeniedPermissions()) {    inputLog.info("* Permissions denied during test execution: ");    for (    String name : deniedCount.keySet()) {      inputLog.info("  - " + name + ": ");      final int MAX_TO_PRINT=4;      int counter=0;      int total=deniedCount.get(name).keySet().size();      boolean printAll=(total <= MAX_TO_PRINT);      for (      String type : deniedCount.get(name).keySet()) {        inputLog.info("         " + type + ": "+ deniedCount.get(name).get(type));        counter++;        if (!printAll && counter >= (MAX_TO_PRINT - 1)) {          break;        }      }      int remaining=total - counter;      if (remaining > 1) {        inputLog.info("         and other " + remaining + " cases of action/name for this exception class");      }    }  }}  }
class C{  @Override public float idf(long docFreq,long docCount){  return (float)(Math.log(docCount / (double)(docFreq + 1)) + 1.0);}  }
class C{  public static String removeSentenceMarkers(String s){  return s.replaceAll("<s> ","").replace(" </s>","");}  }
class C{  public void testAddAll1(){  try {    LinkedBlockingDeque q=new LinkedBlockingDeque(1);    q.addAll(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  protected SnmpCachedData updateCachedDatas(Object userData){  final SnmpTableHandler mmHandler=meta.getManagerHandler(userData);  final SnmpTableHandler mpHandler=meta.getPoolHandler(userData);  final long time=System.currentTimeMillis();  final Map<String,SnmpOid> poolIndexMap=buildPoolIndexMap(mpHandler);  final TreeMap<SnmpOid,Object> table=new TreeMap<>(SnmpCachedData.oidComparator);  updateTreeMap(table,userData,mmHandler,mpHandler,poolIndexMap);  return new SnmpCachedData(time,table);}  }
class C{  public Exec createExec(final CreateExecParams params) throws IOException {  final ExecConfig execConfig=new ExecConfig().withCmd(params.getCmd()).withAttachStderr(params.isDetach() == Boolean.FALSE).withAttachStdout(params.isDetach() == Boolean.FALSE);  byte[] entityBytesArray=toJson(execConfig).getBytes(StandardCharsets.UTF_8);  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/containers/" + params.getContainer()+ "/exec").header("Content-Type",MediaType.APPLICATION_JSON).header("Content-Length",entityBytesArray.length).entity(entityBytesArray)){    final DockerResponse response=connection.request();    if (response.getStatus() / 100 != 2) {      throw getDockerException(response);    }    return new Exec(params.getCmd(),parseResponseStreamAndClose(response.getInputStream(),ExecCreated.class).getId());  } }  }
class C{  protected Properties editProperties(final Properties properties){  return properties;}  }
class C{  public boolean isLimitEnabled(){  return this.limitEnabled;}  }
class C{  private Resource createFromEml(String shortname,File emlFile,User creator,ActionLogger alog) throws AlreadyExistingException, ImportException {  Eml eml;  try {    eml=copyMetadata(shortname,emlFile);  } catch (  ImportException e) {    alog.error("manage.resource.create.failed");    throw e;  }  Resource resource=create(shortname,Constants.DATASET_TYPE_METADATA_IDENTIFIER,creator);  resource.setEml(eml);  return resource;}  }
class C{  private synchronized int nextIndex(){  index++;  if (index == maxSize)   index=0;  return index;}  }
class C{  public NameService createNameService() throws Exception {  return new DummyNameService();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:38.955 -0500",hash_original_method="A519C4334A107DCE43F6A6D72AE8F654",hash_generated_method="C17E9A35FEB240A0BF8BBDE9F07315B8") public Switch(Context context){  this(context,null);}  }
class C{  public short length(){  if (getlabels() == 0)   return 0;  return (short)(name.length - offset(0));}  }
class C{  private void configureSpinner(JSpinner spinner,String name){  spinner.addChangeListener(this);  spinner.setName(name);  JComponent editor=spinner.getEditor();  if (editor instanceof JSpinner.DefaultEditor) {    JFormattedTextField ftf=((JSpinner.DefaultEditor)editor).getTextField();    ftf.setFocusLostBehavior(JFormattedTextField.COMMIT_OR_REVERT);  }}  }
class C{  public String insertConsumerNonce(String opUrl,String returnTo){  String nonce=_consumerNonceGenerator.next();  returnTo+=(returnTo.indexOf('?') != -1) ? '&' : '?';  Association privateAssoc=_privateAssociations.load(opUrl);  if (privateAssoc == null) {    try {      if (DEBUG)       _log.debug("Creating private association for opUrl " + opUrl);      privateAssoc=Association.generate(getPrefAssocSessEnc().getAssociationType(),"",_failedAssocExpire);      _privateAssociations.save(opUrl,privateAssoc);    } catch (    AssociationException e) {      _log.error("Cannot initialize private association.",e);      return null;    }  }  try {    returnTo+="openid.rpnonce=" + URLEncoder.encode(nonce,"UTF-8");    returnTo+="&openid.rpsig=" + URLEncoder.encode(privateAssoc.sign(returnTo),"UTF-8");    _log.info("Inserted consumer nonce: " + nonce);    if (DEBUG)     _log.debug("return_to:" + returnTo);  } catch (  Exception e) {    _log.error("Error inserting consumre nonce.",e);    return null;  }  return returnTo;}  }
class C{  public static void fill(char[] array,char value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  @Deprecated public TemplateCache(){  this(_TemplateAPI.createDefaultTemplateLoader(Configuration.VERSION_2_3_0));}  }
class C{  public static <STATE,ACTION,PLAYER>AlphaBetaSearch<STATE,ACTION,PLAYER> createFor(Game<STATE,ACTION,PLAYER> game){  return new AlphaBetaSearch<STATE,ACTION,PLAYER>(game);}  }
class C{  public static ModelFactory init(){  try {    ModelFactory theModelFactory=(ModelFactory)EPackage.Registry.INSTANCE.getEFactory(ModelPackage.eNS_URI);    if (theModelFactory != null) {      return theModelFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new ModelFactoryImpl();}  }
class C{  public Decision(int cid){  this.cid=cid;}  }
class C{  public static double sampleCorCoeff(Vec xData,Vec yData){  if (yData.length() != xData.length())   throw new ArithmeticException("X and Y data sets must have the same length");  double xMean=xData.mean();  double yMean=yData.mean();  double topSum=0;  for (int i=0; i < xData.length(); i++) {    topSum+=(xData.get(i) - xMean) * (yData.get(i) - yMean);  }  return topSum / ((xData.length() - 1) * xData.standardDeviation() * yData.standardDeviation());}  }
class C{  public Project createProject(final String name) throws CouldntSaveDataException {  try {    final INaviProject newProject=m_database.getContent().addProject(name);    return ObjectFinders.getObject(newProject,m_projects);  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public static String geFileFromAssets(Context context,String fileName){  if (context == null || StringUtils.isEmpty(fileName)) {    return null;  }  StringBuilder s=new StringBuilder("");  try {    InputStreamReader in=new InputStreamReader(context.getResources().getAssets().open(fileName));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:21.330 -0500",hash_original_method="0B0DE464F6E47F31BA5D76DC9E3C9FC0",hash_generated_method="E6F25823590710C04224D290D7ECE8E3") public Enumeration oids(){  return ordering.elements();}  }
class C{  public static void showFab(FloatingActionButton fab){  fab.show();  fab.animate().translationY(0).setInterpolator(new DecelerateInterpolator(2)).start();}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  super.startElement(handler,uri,localName,rawName,attributes);  try {    int stylesheetType=handler.getStylesheetType();    Stylesheet stylesheet;    if (stylesheetType == StylesheetHandler.STYPE_ROOT) {      try {        stylesheet=getStylesheetRoot(handler);      } catch (      TransformerConfigurationException tfe) {        throw new TransformerException(tfe);      }    } else {      Stylesheet parent=handler.getStylesheet();      if (stylesheetType == StylesheetHandler.STYPE_IMPORT) {        StylesheetComposed sc=new StylesheetComposed(parent);        parent.setImport(sc);        stylesheet=sc;      } else {        stylesheet=new Stylesheet(parent);        parent.setInclude(stylesheet);      }    }    stylesheet.setDOMBackPointer(handler.getOriginatingNode());    stylesheet.setLocaterInfo(handler.getLocator());    stylesheet.setPrefixes(handler.getNamespaceSupport());    handler.pushStylesheet(stylesheet);    setPropertiesFromAttributes(handler,rawName,attributes,handler.getStylesheet());    handler.pushElemTemplateElement(handler.getStylesheet());  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public static LRIcon co(final String name){  return new LRIcon(co_(name));}  }
class C{  public int compareTo(Object o){  IndependenceFact fact=(IndependenceFact)o;  int c=getX().getName().compareTo(fact.getX().getName());  if (c != 0)   return c;  c=getY().getName().compareTo(fact.getY().getName());  if (c != 0)   return c;  List<Node> z=getZ();  List<Node> factZ=fact.getZ();  int max=Math.max(z.size(),factZ.size());  for (int i=0; i < max; i++) {    if (z.size() <= i && factZ.size() > i) {      return -1;    }    if (factZ.size() <= i && z.size() > i) {      return +1;    } else {      String s=z.get(i).getName();      String s2=factZ.get(i).getName();      c=s.compareTo(s2);      if (c != 0)       return c;    }  }  return 0;}  }
class C{  public void testGetPropertyInfo() throws Exception {  new Driver().getPropertyInfo("",null);}  }
class C{  public void remove_app(@NonNull String package_name){  for (int i=0; i < _installed_apps.size(); ++i) {    if (package_name.equals(_installed_apps.get(i).get_package_name())) {      _installed_apps.remove(i);      notifyItemRemoved(i);      break;    }  }}  }
class C{  protected void initializeWorld(){  SimulationBody floor=new SimulationBody();  floor.addFixture(Geometry.createRectangle(15,1));  floor.setMass(MassType.INFINITE);  floor.translate(0.0,-4.0);  this.world.addBody(floor);  SimulationBody triangle=new SimulationBody();  triangle.addFixture(Geometry.createTriangle(new Vector2(0.0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5)));  triangle.setMass(MassType.NORMAL);  triangle.translate(-1.0,2.0);  triangle.getLinearVelocity().set(5.0,0.0);  this.world.addBody(triangle);  SimulationBody circle=new SimulationBody();  circle.addFixture(Geometry.createCircle(0.5));  circle.setMass(MassType.NORMAL);  circle.translate(2.0,2.0);  circle.applyForce(new Vector2(-100.0,0.0));  circle.setLinearDamping(0.05);  this.world.addBody(circle);  SimulationBody rectangle=new SimulationBody();  rectangle.addFixture(Geometry.createRectangle(1,1));  rectangle.setMass(MassType.NORMAL);  rectangle.translate(0.0,2.0);  rectangle.getLinearVelocity().set(-5.0,0.0);  this.world.addBody(rectangle);  SimulationBody polygon=new SimulationBody();  polygon.addFixture(Geometry.createUnitCirclePolygon(10,1));  polygon.setMass(MassType.NORMAL);  polygon.translate(-2.5,2.0);  polygon.setAngularVelocity(Math.toRadians(-20.0));  this.world.addBody(polygon);  BodyFixture c1Fixture=new BodyFixture(Geometry.createCircle(0.5));  BodyFixture c2Fixture=new BodyFixture(Geometry.createCircle(0.5));  c1Fixture.setDensity(0.5);  c2Fixture.setDensity(0.5);  c1Fixture.getShape().translate(-1.0,0.0);  c2Fixture.getShape().translate(1.0,0.0);  SimulationBody capsule=new SimulationBody();  capsule.addFixture(c1Fixture);  capsule.addFixture(c2Fixture);  capsule.addFixture(Geometry.createRectangle(2,1));  capsule.setMass(MassType.NORMAL);  capsule.translate(0.0,4.0);  this.world.addBody(capsule);  SimulationBody issTri=new SimulationBody();  issTri.addFixture(Geometry.createIsoscelesTriangle(1.0,3.0));  issTri.setMass(MassType.NORMAL);  issTri.translate(2.0,3.0);  this.world.addBody(issTri);  SimulationBody equTri=new SimulationBody();  equTri.addFixture(Geometry.createEquilateralTriangle(2.0));  equTri.setMass(MassType.NORMAL);  equTri.translate(3.0,3.0);  this.world.addBody(equTri);  SimulationBody rightTri=new SimulationBody();  rightTri.addFixture(Geometry.createRightTriangle(2.0,1.0));  rightTri.setMass(MassType.NORMAL);  rightTri.translate(4.0,3.0);  this.world.addBody(rightTri);  this.world.addListener(new CustomContactListener());}  }
class C{  public boolean trigger(DialogueState state){  for (  Rule r : rules) {    try {      state.applyRule(r);    } catch (    RuntimeException e) {      log.warning("rule " + r.getRuleId() + " could not be applied: "+ e.toString());      e.printStackTrace();    }  }  return !state.getNewVariables().isEmpty() || !state.getNewActionVariables().isEmpty();}  }
class C{  public GlobalObjectScope(ExecutionEnvironmentDescriptor descriptor){  super(descriptor);}  }
class C{  public void step(SimState state){  Asteroids asteroids=(Asteroids)state;  if ((asteroids.actions[tag] & FORWARD) == FORWARD) {    velocity.x+=Math.cos(orientation) * VELOCITY_INCREMENT;    velocity.y+=Math.sin(orientation) * VELOCITY_INCREMENT;    thrust=MAXIMUM_THRUST_DRAW_LENGTH;  }  if ((asteroids.actions[tag] & LEFT) == LEFT) {    orientation-=ORIENTATION_INCREMENT;  }  if ((asteroids.actions[tag] & RIGHT) == RIGHT) {    orientation+=ORIENTATION_INCREMENT;  }  if ((asteroids.actions[tag] & FIRE) == FIRE) {    shoot(asteroids);    asteroids.actions[tag]&=~FIRE;  }  if ((asteroids.actions[tag] & HYPERSPACE) == HYPERSPACE) {    asteroids.field.setObjectLocation(this,new Double2D(asteroids.random.nextDouble() * asteroids.field.width,asteroids.random.nextDouble() * asteroids.field.height));    asteroids.actions[tag]&=~HYPERSPACE;  }  super.step(state);  testForHit(asteroids);  bulletCountdown--;}  }
class C{  public ProjectReference createProjectReference(){  ProjectReferenceImpl projectReference=new ProjectReferenceImpl();  return projectReference;}  }
class C{  @RequestProcessing(value="/member/{userName}",method=HTTPRequestMethod.GET) @Before(adviceClass={StopwatchStartAdvice.class,AnonymousViewCheck.class,UserBlockCheck.class}) @After(adviceClass=StopwatchEndAdvice.class) public void showHome(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response,final String userName) throws Exception {  final JSONObject user=(JSONObject)request.getAttribute(User.USER);  String pageNumStr=request.getParameter("p");  if (Strings.isEmptyOrNull(pageNumStr) || !Strings.isNumeric(pageNumStr)) {    pageNumStr="1";  }  final int pageNum=Integer.valueOf(pageNumStr);  request.setAttribute(Keys.TEMAPLTE_DIR_NAME,Symphonys.get("skinDirName"));  final AbstractFreeMarkerRenderer renderer=new SkinRenderer();  context.setRenderer(renderer);  final Map<String,Object> dataModel=renderer.getDataModel();  filler.fillHeaderAndFooter(request,response,dataModel);  final String followingId=user.optString(Keys.OBJECT_ID);  dataModel.put(Follow.FOLLOWING_ID,followingId);  renderer.setTemplateName("/home/home.ftl");  dataModel.put(User.USER,user);  fillHomeUser(dataModel,user);  avatarQueryService.fillUserAvatarURL(user);  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);  if (isLoggedIn) {    final JSONObject currentUser=(JSONObject)dataModel.get(Common.CURRENT_USER);    final String followerId=currentUser.optString(Keys.OBJECT_ID);    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId);    dataModel.put(Common.IS_FOLLOWING,isFollowing);  }  user.put(UserExt.USER_T_CREATE_TIME,new Date(user.getLong(Keys.OBJECT_ID)));  final int pageSize=Symphonys.getInt("userHomeArticlesCnt");  final int windowSize=Symphonys.getInt("userHomeArticlesWindowSize");  final List<JSONObject> userArticles=articleQueryService.getUserArticles(user.optString(Keys.OBJECT_ID),pageNum,pageSize);  dataModel.put(Common.USER_HOME_ARTICLES,userArticles);  final int articleCnt=user.optInt(UserExt.USER_ARTICLE_COUNT);  final int pageCount=(int)Math.ceil((double)articleCnt / (double)pageSize);  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);  if (!pageNums.isEmpty()) {    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));  }  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);  final JSONObject currentUser=Sessions.currentUser(request);  if (null == currentUser) {    dataModel.put(Common.IS_MY_ARTICLE,false);  } else {    dataModel.put(Common.IS_MY_ARTICLE,userName.equals(currentUser.optString(User.USER_NAME)));  }}  }
class C{  @LogMessageDoc(level="ERROR",message="Unexpected action '{action}', '{subaction}'",explanation="A static flow entry contained an invalid action",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public static void fromString(OFFlowMod.Builder fmb,String bigString,Logger log){  List<OFAction> actions=new LinkedList<OFAction>();  if (bigString != null) {    bigString=bigString.toLowerCase();    String[] bigStringSplit=bigString.split(",");    String[] tmp;    ArrayDeque<String[]> actionToDecode=new ArrayDeque<String[]>();    for (int i=0; i < bigStringSplit.length; i++) {      tmp=bigStringSplit[i].split("=");      if (tmp.length != 2) {        log.debug("Token " + bigStringSplit[i] + " does not have form 'key=value' parsing "+ bigString);      }      actionToDecode.add(tmp);    }    while (!actionToDecode.isEmpty()) {      String[] keyPair=actionToDecode.pollFirst();      String key;      String pair;      if (keyPair.length != 2) {        log.debug("[Key, Value] {} does not have form 'key=value' parsing, which is okay for some actions e.g. 'pop_vlan'.",keyPair);        key=keyPair[0];        pair="";      } else {        key=keyPair[0];        pair=keyPair[1];      }      OFAction a=null;      try {switch (key) {case STR_OUTPUT:          a=decode_output(pair,fmb.getVersion(),log);        break;case STR_ENQUEUE:      a=decode_enqueue(pair,fmb.getVersion(),log);    break;case STR_DL_SRC_SET:  a=decode_set_src_mac(pair,fmb.getVersion(),log);break;case STR_DL_DST_SET:a=decode_set_dst_mac(pair,fmb.getVersion(),log);break;case STR_EXPERIMENTER:log.error("OFAction EXPERIMENTER not implemented.");break;case STR_FIELD_SET:String[] actionData=pair.split(MatchUtils.SET_FIELD_DELIM);if (actionData.length != 2) {throw new IllegalArgumentException("[Action, Data] " + keyPair + " does not have form 'action=data' parsing "+ actionData);}switch (actionData[0]) {case MatchUtils.STR_ARP_OPCODE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpOp().setValue(ArpOpcode.of(Integer.parseInt(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpOp().setValue(ArpOpcode.of(Integer.parseInt(actionData[1]))).build()).build();}break;case MatchUtils.STR_ARP_SHA:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpSha().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_ARP_DHA:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpTha().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_ARP_SPA:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpSpa().setValue(IPv4Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_ARP_DPA:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildArpTpa().setValue(IPv4Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_ND_SSL:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6NdSll().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_ND_TTL:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6NdTll().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_ND_TARGET:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6NdTarget().setValue(IPv6Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_DL_TYPE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildEthType().setValue(EthType.of(Integer.parseInt(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildEthType().setValue(EthType.of(Integer.parseInt(actionData[1]))).build()).build();}break;case MatchUtils.STR_DL_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildEthSrc().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_DL_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildEthDst().setValue(MacAddress.of(actionData[1])).build()).build();break;case MatchUtils.STR_DL_VLAN:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildVlanVid().setValue(OFVlanVidMatch.ofVlan(Integer.parseInt(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildVlanVid().setValue(OFVlanVidMatch.ofVlan(Integer.parseInt(actionData[1]))).build()).build();}break;case MatchUtils.STR_DL_VLAN_PCP:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildVlanPcp().setValue(VlanPcp.of(Byte.parseByte(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildVlanPcp().setValue(VlanPcp.of(Byte.parseByte(actionData[1]))).build()).build();}break;case MatchUtils.STR_ICMP_CODE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv4Code().setValue(ICMPv4Code.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv4Code().setValue(ICMPv4Code.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_ICMP_TYPE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv4Type().setValue(ICMPv4Type.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv4Type().setValue(ICMPv4Type.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_ICMPV6_CODE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv6Code().setValue(U8.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv6Code().setValue(U8.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_ICMPV6_TYPE:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv6Type().setValue(U8.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIcmpv6Type().setValue(U8.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_NW_PROTO:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpProto().setValue(IpProtocol.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpProto().setValue(IpProtocol.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_NW_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv4Src().setValue(IPv4Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_NW_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv4Dst().setValue(IPv4Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6Src().setValue(IPv6Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6Dst().setValue(IPv6Address.of(actionData[1])).build()).build();break;case MatchUtils.STR_IPV6_FLOW_LABEL:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6Flabel().setValue(IPv6FlowLabel.of(Integer.parseInt(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpv6Flabel().setValue(IPv6FlowLabel.of(Integer.parseInt(actionData[1]))).build()).build();}break;case MatchUtils.STR_NW_ECN:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpEcn().setValue(IpEcn.of(Byte.parseByte(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpEcn().setValue(IpEcn.of(Byte.parseByte(actionData[1]))).build()).build();}break;case MatchUtils.STR_NW_DSCP:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpDscp().setValue(IpDscp.of(Byte.parseByte(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildIpDscp().setValue(IpDscp.of(Byte.parseByte(actionData[1]))).build()).build();}break;case MatchUtils.STR_SCTP_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildSctpSrc().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_SCTP_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildSctpDst().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_TCP_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildTcpSrc().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_TCP_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildTcpDst().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_UDP_SRC:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildUdpSrc().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_UDP_DST:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildUdpDst().setValue(TransportPort.of(Integer.parseInt(actionData[1]))).build()).build();break;case MatchUtils.STR_MPLS_LABEL:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsLabel().setValue(U32.of(Long.parseLong(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsLabel().setValue(U32.of(Long.parseLong(actionData[1]))).build()).build();}break;case MatchUtils.STR_MPLS_TC:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsTc().setValue(U8.of(Short.parseShort(actionData[1].replaceFirst("0x",""),16))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsTc().setValue(U8.of(Short.parseShort(actionData[1]))).build()).build();}break;case MatchUtils.STR_MPLS_BOS:a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMplsBos().setValue(OFBooleanValue.of(Boolean.parseBoolean(actionData[1]))).build()).build();break;case MatchUtils.STR_METADATA:if (actionData[1].startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMetadata().setValue(OFMetadata.of(U64.of(Long.parseLong(actionData[1].replaceFirst("0x",""),16)))).build()).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetField().setField(OFFactories.getFactory(fmb.getVersion()).oxms().buildMetadata().setValue(OFMetadata.of(U64.of(Long.parseLong(actionData[1])))).build()).build();}break;default :log.error("UNEXPECTED OF1.3 SET-FIELD '{}'",actionData);break;}break;case STR_GROUP:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildGroup().setGroup(OFGroup.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildGroup().setGroup(OFGroup.of(Integer.parseInt(pair))).build();}break;case STR_MPLS_LABEL_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsLabel().setMplsLabel(Long.parseLong(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsLabel().setMplsLabel(Long.parseLong(pair)).build();}break;case STR_MPLS_POP:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPopMpls().setEthertype(EthType.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPopMpls().setEthertype(EthType.of(Integer.parseInt(pair))).build();}break;case STR_MPLS_PUSH:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushMpls().setEthertype(EthType.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushMpls().setEthertype(EthType.of(Integer.parseInt(pair))).build();}break;case STR_MPLS_TC_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsTc().setMplsTc(Short.parseShort(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsTc().setMplsTc(Short.parseShort(pair)).build();}break;case STR_MPLS_TTL_DEC:a=OFFactories.getFactory(fmb.getVersion()).actions().decMplsTtl();break;case STR_MPLS_TTL_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsTtl().setMplsTtl(Short.parseShort(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetMplsTtl().setMplsTtl(Short.parseShort(pair)).build();}break;case STR_NW_TOS_SET:a=decode_set_tos_bits(pair,fmb.getVersion(),log);break;case STR_NW_SRC_SET:a=decode_set_src_ip(pair,fmb.getVersion(),log);break;case STR_NW_DST_SET:a=decode_set_dst_ip(pair,fmb.getVersion(),log);break;case STR_NW_ECN_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetNwEcn().setNwEcn(IpEcn.of(Byte.parseByte(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetNwEcn().setNwEcn(IpEcn.of(Byte.parseByte(pair))).build();}break;case STR_NW_TTL_DEC:a=OFFactories.getFactory(fmb.getVersion()).actions().decNwTtl();break;case STR_NW_TTL_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetNwTtl().setNwTtl(Short.parseShort(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetNwTtl().setNwTtl(Short.parseShort(pair)).build();}break;case STR_PBB_POP:a=OFFactories.getFactory(fmb.getVersion()).actions().popPbb();break;case STR_PBB_PUSH:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushPbb().setEthertype(EthType.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushPbb().setEthertype(EthType.of(Integer.parseInt(pair))).build();}break;case STR_QUEUE_SET:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetQueue().setQueueId(Long.parseLong(pair.replaceFirst("0x",""),16)).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildSetQueue().setQueueId(Long.parseLong(pair)).build();}break;case STR_TP_SRC_SET:a=decode_set_src_port(pair,fmb.getVersion(),log);break;case STR_TP_DST_SET:a=decode_set_dst_port(pair,fmb.getVersion(),log);break;case STR_TTL_IN_COPY:a=OFFactories.getFactory(fmb.getVersion()).actions().copyTtlIn();break;case STR_TTL_OUT_COPY:a=OFFactories.getFactory(fmb.getVersion()).actions().copyTtlOut();break;case STR_VLAN_POP:a=OFFactories.getFactory(fmb.getVersion()).actions().popVlan();break;case STR_VLAN_PUSH:if (pair.startsWith("0x")) {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushVlan().setEthertype(EthType.of(Integer.parseInt(pair.replaceFirst("0x",""),16))).build();} else {a=OFFactories.getFactory(fmb.getVersion()).actions().buildPushVlan().setEthertype(EthType.of(Integer.parseInt(pair))).build();}break;case STR_VLAN_STRIP:a=OFFactories.getFactory(fmb.getVersion()).actions().stripVlan();break;case STR_VLAN_SET_VID:a=decode_set_vlan_id(pair,fmb.getVersion(),log);break;case STR_VLAN_SET_PCP:a=decode_set_vlan_priority(pair,fmb.getVersion(),log);break;default :log.error("UNEXPECTED ACTION KEY '{}'",keyPair);break;}} catch (Exception e) {log.error("Illegal Action: " + e.getMessage());}if (a != null) {actions.add(a);}}}log.debug("action {}",actions);fmb.setActions(actions);return;}  }
class C{  public static ODataUri createODataUri(String serviceRoot,MediaType... mediaTypes){  return createODataUriForServiceDocument(serviceRoot,mediaTypes);}  }
class C{  protected void adjustExtremeColorCodes(int colorCode){  if (this.minAndMaxColorCodes == null)   this.minAndMaxColorCodes=new int[]{colorCode,colorCode}; else {    if (this.minAndMaxColorCodes[0] > colorCode)     this.minAndMaxColorCodes[0]=colorCode;    if (this.minAndMaxColorCodes[1] < colorCode)     this.minAndMaxColorCodes[1]=colorCode;  }}  }
class C{  @SuppressWarnings("unchecked") private void notifyGraphListeners(GraphEvent ge){  Vector<GraphListener> l;synchronized (this) {    l=(Vector<GraphListener>)m_graphListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptGraph(ge);    }  }}  }
class C{  public static MaxProjectionExpression maxDistinct(String propertyName){  return new MaxProjectionExpression(getPropExpr(propertyName),true);}  }
class C{  public static boolean intersectLineSegmentPlane(double p0X,double p0Y,double p0Z,double p1X,double p1Y,double p1Z,double a,double b,double c,double d,Vector3d intersectionPoint){  double dirX=p1X - p0X;  double dirY=p1Y - p0Y;  double dirZ=p1Z - p0Z;  double denom=a * dirX + b * dirY + c * dirZ;  double t=-(a * p0X + b * p0Y + c * p0Z + d) / denom;  if (t >= 0.0 && t <= 1.0) {    intersectionPoint.x=p0X + t * dirX;    intersectionPoint.y=p0Y + t * dirY;    intersectionPoint.z=p0Z + t * dirZ;    return true;  }  return false;}  }
class C{  public OutputStream OpenOutputfile(String filePath){  OutputStream fileTarget=null;  try {    fileTarget=new FileOutputStream(filePath);  } catch (  FileNotFoundException e) {    System.out.println("Can't find file ");    return null;  }  return fileTarget;}  }
class C{  public static BaseFactory init(){  try {    BaseFactory theBaseFactory=(BaseFactory)EPackage.Registry.INSTANCE.getEFactory(BasePackage.eNS_URI);    if (theBaseFactory != null) {      return theBaseFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new BaseFactoryImpl();}  }
class C{  private static CharSet charSetForCategory(String category){  if (category.length() == 0 || category.length() >= 3) {    throw new IllegalArgumentException("Invalid character category: " + category);  }  if (category.length() == 2) {    for (int i=0; i < CharacterCategory.categoryNames.length; i++) {      if (CharacterCategory.categoryNames[i].equals(category)) {        return new CharSet(CharacterCategory.getCategoryMap(i));      }    }    throw new IllegalArgumentException("Invalid character category: " + category);  } else   if (category.length() == 1) {    CharSet result=new CharSet();    for (int i=0; i < CharacterCategory.categoryNames.length; i++) {      if (CharacterCategory.categoryNames[i].startsWith(category)) {        result=result.union(new CharSet(CharacterCategory.getCategoryMap(i)));      }    }    if (result.empty()) {      throw new IllegalArgumentException("Invalid character category: " + category);    } else {      return result;    }  }  return new CharSet();}  }
class C{  public boolean hasPlannedPickups(){  List<Track> tracks=getTrackList();  for (  Track track : tracks) {    if (track.getIgnoreUsedLengthPercentage() > 0) {      return true;    }  }  return false;}  }
class C{  protected Status spinReadStatus(){  final long timeout=(System.currentTimeMillis() + 60000);  Status status=null;  while (status == null && System.currentTimeMillis() < timeout) {    try {      status=readStatus();    } catch (    Exception e) {      try {        Thread.sleep(500);      } catch (      InterruptedException ie) {        Thread.currentThread().interrupt();        status=null;        break;      }    }  }  return status;}  }
class C{  private void skipWhitespaces() throws IOException {  while (!isAllRead() && isWhitespace()) {    saveCurrent();    go();  }}  }
class C{  public DoubleSummaryFactory(){  summaryMode_=DoubleSummary.Mode.Sum;}  }
class C{  public boolean tryWriteLock(long msec){  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(TRY_TEXT + " write " + name,lock);  }  boolean result=false;  try {    result=lock.writeLock().tryLock(msec,TimeUnit.MILLISECONDS);  } catch (  InterruptedException ex) {    log.warn("Lock wait interupted");  }  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(TRY_TEXT + " write " + name+ " : "+ result,lock);  }  return result;}  }
class C{  public static EditorJavaElementResolver from(IEditorPart editorPart){  return new EditorJavaElementResolver(editorPart);}  }
class C{  public void delete(String type,List<String> ids){  if (ids != null && !ids.isEmpty()) {    List<List<String>> partitionedDocs=Lists.partition(ids,500);    partitionedDocs.forEach(null);  }}  }
class C{  public static final void writeIntArrayXml(int[] val,String name,XmlSerializer out) throws XmlPullParserException, IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  out.startTag(null,"int-array");  if (name != null) {    out.attribute(null,"name",name);  }  final int N=val.length;  out.attribute(null,"num",Integer.toString(N));  for (int i=0; i < N; i++) {    out.startTag(null,"item");    out.attribute(null,"value",Integer.toString(val[i]));    out.endTag(null,"item");  }  out.endTag(null,"int-array");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private boolean createDifferenceDoc(MInOut inout,MInOutLineConfirm confirm){  if (m_processMsg == null)   m_processMsg=""; else   if (m_processMsg.length() > 0)   m_processMsg+="; ";  if (confirm.getDifferenceQty().signum() != 0 && !inout.isSOTrx() && inout.getRef_InOut_ID() != 0) {    log.info("Difference=" + confirm.getDifferenceQty());    if (m_creditMemo == null) {      m_creditMemo=new MInvoice(inout,null);      m_creditMemo.setDescription(Msg.translate(getCtx(),"M_InOutConfirm_ID") + " " + getDocumentNo());      m_creditMemo.setC_DocTypeTarget_ID(MDocType.DOCBASETYPE_APCreditMemo);      m_creditMemo.saveEx();      setC_Invoice_ID(m_creditMemo.getC_Invoice_ID());    }    MInvoiceLine line=new MInvoiceLine(m_creditMemo);    line.setShipLine(confirm.getLine());    if (confirm.getLine().getProduct() != null) {      line.setC_UOM_ID(confirm.getLine().getProduct().getC_UOM_ID());    }    line.setQty(confirm.getDifferenceQty());    line.saveEx();    confirm.setC_InvoiceLine_ID(line.getC_InvoiceLine_ID());  }  if (confirm.getScrappedQty().signum() != 0) {    log.info("Scrapped=" + confirm.getScrappedQty());    if (m_inventory == null) {      MWarehouse wh=MWarehouse.get(getCtx(),inout.getM_Warehouse_ID());      m_inventory=new MInventory(wh,get_TrxName());      m_inventory.setDescription(Msg.translate(getCtx(),"M_InOutConfirm_ID") + " " + getDocumentNo());      m_inventory.saveEx();      setM_Inventory_ID(m_inventory.getM_Inventory_ID());    }    MInOutLine ioLine=confirm.getLine();    MInventoryLine line=new MInventoryLine(m_inventory,ioLine.getM_Locator_ID(),ioLine.getM_Product_ID(),ioLine.getM_AttributeSetInstance_ID(),confirm.getScrappedQty(),Env.ZERO);    if (!line.save(get_TrxName())) {      m_processMsg+="Inventory Line not created";      return false;    }    confirm.setM_InventoryLine_ID(line.getM_InventoryLine_ID());  }  if (!confirm.save(get_TrxName())) {    m_processMsg+="Confirmation Line not saved";    return false;  }  return true;}  }
class C{  public String testConnection() throws SaaSApplicationException {  if (getModel() == null) {    return OUTCOME_ERROR;  }  POBillingAdapter adapter=model.getSelectedBillingAdapter();  try {    getBillingAdapterService().testConnection(adapter);    ui.handle(INFO_BILLINGSYSTEM_CONNECTION_SUCCESS);    return OUTCOME_SUCCESS;  } catch (  BillingApplicationException bae) {    if (bae.getCause() instanceof BillingAdapterConnectionException) {      ui.handleException((BillingAdapterConnectionException)bae.getCause());    } else {      ui.handleException(bae);    }    return OUTCOME_ERROR;  }}  }
class C{  public void init(ToXMLSAXHandler h,Transformer transformer,ContentHandler realHandler){  h.setTransformer(transformer);  h.setContentHandler(realHandler);}  }
class C{  @Override public void drawTop(final Graphics2D g2d){  final Rectangle r=getArea();  if (isContained()) {    r.setLocation(0,0);  } else {    if (!isOnScreen(g2d,r)) {      return;    }  }  final Composite oldComposite=g2d.getComposite();  try {    g2d.setComposite(entityComposite);    drawTop(g2d,r.x,r.y,r.width,r.height);  }  finally {    g2d.setComposite(oldComposite);  }}  }
class C{  static public void assertEquals(boolean expected,boolean actual){  assertEquals(null,expected,actual);}  }
class C{  static public void qsort(long[] array,SortComparatorL comp){  qsort_h(array,0,array.length - 1,comp);}  }
class C{  public GetBroadcasts(int channelid,String... properties){  super();  addParameterToRequest("channelid",channelid);  addParameterToRequest("properties",properties);}  }
class C{  public static byte[] decode(String s,int options) throws java.io.IOException {  if (s == null) {    throw new NullPointerException("Input string was null.");  }  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  boolean dontGunzip=(options & DONT_GUNZIP) != 0;  if ((bytes != null) && (bytes.length >= 4) && (!dontGunzip)) {    int head=((int)bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {        e.printStackTrace();      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  private boolean checkPortNames(){  for (  JmrixConfigPane configPane : JmrixConfigPane.getListOfConfigPanes()) {    String port=configPane.getCurrentProtocolInfo();    if (port.equals(JmrixConfigPane.NONE_SELECTED) || port.equals(JmrixConfigPane.NO_PORTS_FOUND)) {      if (JOptionPane.showConfirmDialog(null,MessageFormat.format(rb.getString("MessageSerialPortWarning"),new Object[]{port,configPane.getCurrentProtocolName()}),rb.getString("MessageSerialPortNotValid"),JOptionPane.YES_NO_OPTION,JOptionPane.ERROR_MESSAGE) != JOptionPane.YES_OPTION) {        return false;      }    }  }  return true;}  }
class C{  public JavaMethod findJavaMethod(Expression[] args){  load();  int parameterCount=args.length;  for (  JavaMethod m : javaMethods) {    int count=m.getParameterCount();    if (count == parameterCount || (m.isVarArgs() && count <= parameterCount + 1)) {      return m;    }  }  throw DbException.get(ErrorCode.METHOD_NOT_FOUND_1,getName() + " (" + className+ ", parameter count: "+ parameterCount+ ")");}  }
class C{  public ObjectFactory(){}  }
class C{  @SuppressWarnings("unchecked") private MergePolicy buildMergePolicy(final IndexSchema schema){  if (useMergePolicyInfo()) {    return buildMergePolicyFromInfo(schema);  }  final String mpfClassName;  final MergePolicyFactoryArgs mpfArgs;  if (mergePolicyFactoryInfo == null) {    mpfClassName=DEFAULT_MERGE_POLICY_FACTORY_CLASSNAME;    mpfArgs=new MergePolicyFactoryArgs();  } else {    mpfClassName=mergePolicyFactoryInfo.className;    mpfArgs=new MergePolicyFactoryArgs(mergePolicyFactoryInfo.initArgs);  }  final SolrResourceLoader resourceLoader=schema.getResourceLoader();  final MergePolicyFactory mpf=resourceLoader.newInstance(mpfClassName,MergePolicyFactory.class,NO_SUB_PACKAGES,new Class[]{SolrResourceLoader.class,MergePolicyFactoryArgs.class,IndexSchema.class},new Object[]{resourceLoader,mpfArgs,schema});  return mpf.getMergePolicy();}  }
class C{  protected boolean cleanState(String topologyName,SchedulerStateManagerAdaptor statemgr){  LOG.fine("Cleaning up topology state");  Boolean result;  result=statemgr.deleteTMasterLocation(topologyName);  if (result == null || !result) {    LOG.warning("Failed to clear TMaster location. Check whether TMaster set it correctly.");  }  result=statemgr.deletePackingPlan(topologyName);  if (result == null || !result) {    LOG.warning("Failed to clear packing plan. Check whether Launcher set it correctly.");  }  result=statemgr.deletePhysicalPlan(topologyName);  if (result == null || !result) {    LOG.warning("Failed to clear physical plan. Check whether TMaster set it correctly.");  }  result=statemgr.deleteSchedulerLocation(topologyName);  if (result == null || !result) {    LOG.warning("Failed to clear scheduler location. Check whether Scheduler set it correctly.");  }  result=statemgr.deleteExecutionState(topologyName);  if (result == null || !result) {    LOG.severe("Failed to clear execution state");    return false;  }  result=statemgr.deleteTopology(topologyName);  if (result == null || !result) {    LOG.severe("Failed to clear topology definition");    return false;  }  LOG.fine("Cleaned up topology state");  return true;}  }
class C{  public void paintColorChooserBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,DM dm,ReplyException ex,boolean result,Map<String,Integer> indexBucketsMap,int numTotalBuckets){  IndexCreationReplyMsg indMsg=new IndexCreationReplyMsg(processorId,ex,result,result,indexBucketsMap,numTotalBuckets);  indMsg.setRecipient(recipient);  dm.putOutgoing(indMsg);}  }
class C{  private String escapedAV() throws IOException {  beg=pos;  end=pos;  while (true) {    if (pos >= chars.length) {      return new String(chars,beg,end - beg);    }switch (chars[pos]) {case '+':case ',':case ';':      return new String(chars,beg,end - beg);case '\\':    chars[end++]=getEscaped();  pos++;break;case ' ':int cur=end;pos++;chars[end++]=' ';for (; pos < chars.length && chars[pos] == ' '; pos++) {chars[end++]=' ';}if (pos == chars.length || chars[pos] == ',' || chars[pos] == '+' || chars[pos] == ';') {return new String(chars,beg,cur - beg);}break;default :chars[end++]=chars[pos];pos++;}}}  }
class C{  public static String dump(final EndpointDescriptor descriptor){  return String.format("Endpoint Descriptor:%n" + "  bLength %18d%n" + "  bDescriptorType %10d%n"+ "  bEndpointAddress %9s  EP %d %s%n"+ "  bmAttributes %13d%n"+ "    Transfer Type             %s%n"+ "    Synch Type                %s%n"+ "    Usage Type                %s%n"+ "  wMaxPacketSize %11d%n"+ "  bInterval %16d%n",descriptor.bLength(),descriptor.bDescriptorType(),String.format("0x%02x",descriptor.bEndpointAddress() & 0xff),descriptor.bEndpointAddress() & 0x0f,getDirectionName(descriptor.bEndpointAddress()),descriptor.bmAttributes() & 0xff,getTransferTypeName(descriptor.bmAttributes()),getSynchTypeName(descriptor.bmAttributes()),getUsageTypeName(descriptor.bmAttributes()),descriptor.wMaxPacketSize() & 0xffff,descriptor.bInterval() & 0xff);}  }
class C{  public void addLocalClassPath(){  addLocalClassPath(Thread.currentThread().getContextClassLoader());}  }
class C{  private ServiceInstance createServiceInstance(final ProvisioningStatus status,final String... parameter) throws Exception {  Map<String,String> parameters=new LinkedHashMap<String,String>();  for (  String parameterKey : parameter) {    if (InstanceParameter.PUBLIC_IP.equals(parameterKey)) {      parameters.put(InstanceParameter.PUBLIC_IP,"4.3.2.1");    } else {      String pValue=parameterKey + "Value";      if (parameterKey.endsWith(InstanceParameter.CRYPT_KEY_SUFFIX)) {        pValue=AESEncrypter.encrypt(pValue);      }      parameters.put(parameterKey,pValue);    }  }  return createServiceInstance(status,parameters);}  }
class C{  public static Integer createCacheServer(Boolean notification) throws Exception {  new HAOverflowMemObjectSizerDUnitTest().createCache(new Properties());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.NORMAL);  RegionAttributes attrs=factory.create();  Region region=cache.createRegion(regionName,attrs);  assertNotNull(region);  CacheServer server1=cache.addCacheServer();  assertNotNull(server1);  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server1.setPort(port);  server1.setNotifyBySubscription(notification.booleanValue());  server1.getClientSubscriptionConfig().setCapacity(capacity);  server1.getClientSubscriptionConfig().setEvictionPolicy(ePolicy);  server1.start();  assertTrue(server1.isRunning());  cc=((VMLRURegionMap)((LocalRegion)cache.getRegion(Region.SEPARATOR + CacheServerImpl.generateNameForClientMsgsRegion(port))).entries)._getCCHelper();  return new Integer(server1.getPort());}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableList<V> removeAll(Object key){  throw new UnsupportedOperationException();}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public static PlatformBitmapFactory buildPlatformBitmapFactory(PoolFactory poolFactory,PlatformDecoder platformDecoder){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    return new ArtBitmapFactory(poolFactory.getBitmapPool());  } else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    return new HoneycombBitmapFactory(new EmptyJpegGenerator(poolFactory.getPooledByteBufferFactory()),platformDecoder);  } else {    return new GingerbreadBitmapFactory();  }}  }
class C{  private void installGwtFacetForStandardProject(){  GwtSdk gwtSdk=GwtFacetInstallDataModelProvider.getGwtSdk(dataModel);  if (gwtSdk == null) {    GwtWtpPlugin.logMessage("No GWT sdks have been added to the preferences. Fix this by adding a GWT SDK to Eclipse preferences.");    return;  }  GwtWtpPlugin.logMessage("GwtFacetInstallSdkDelegate: selected runtime version=" + gwtSdk.getVersion());  try {    addGwtSdkContainer(project,gwtSdk);  } catch (  FileNotFoundException|CoreException|BackingStoreException e) {    String m="GwtFacetInstallSdkDelegate.installGwtFacetForStandardProject(): was not able to add sdk container to project.";    GwtWtpPlugin.logError(m,e);  }}  }
class C{  public static boolean isCritical(String id){  return (Character.isUpperCase(id.charAt(0)));}  }
class C{  protected boolean canUseDiamond(){  return fCanUseDiamond;}  }
class C{  public void actionPerformed(ActionEvent e){  start.actionPerformed(e);  end.actionPerformed(e);}  }
class C{  public static String computeWindingOrderOfVertices(Iterable<? extends Vec4> points){  if (points == null) {    String message=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double area=computePolygonAreaFromVertices(points);  return (area < 0) ? AVKey.CLOCKWISE : AVKey.COUNTER_CLOCKWISE;}  }
class C{  public ClassCastException(java.lang.String s){  super(s);}  }
class C{  public boolean isRunning(){  return m_Running;}  }
class C{  @SuppressWarnings("unchecked") public <T>List<T> convertMessageList(final Message message,final Class<T> clazz){  if (isMessageBodyEmpty(message)) {    return Collections.emptyList();  }  message.getMessageProperties().getHeaders().put(AbstractJavaTypeMapper.DEFAULT_CLASSID_FIELD_NAME,ArrayList.class.getName());  message.getMessageProperties().getHeaders().put(AbstractJavaTypeMapper.DEFAULT_CONTENT_CLASSID_FIELD_NAME,clazz.getName());  return (List<T>)rabbitTemplate.getMessageConverter().fromMessage(message);}  }
class C{  public ImageBytes(RenderedImage image,Color bkg,String format,String colorModel) throws IOException {  if (ImageConstants.ZLIB.equals(format) || (image.getColorModel().hasAlpha() && (bkg == null))) {    bytes=toZLIB(image,bkg,colorModel);    this.format=ImageConstants.ZLIB;  } else   if (ImageConstants.JPEG.equals(format)) {    bytes=toJPG(image);    this.format=ImageConstants.JPG;  } else {    byte[] jpgBytes=toJPG(image);    byte[] zlibBytes=toZLIB(image,bkg,colorModel);    if (jpgBytes.length < 0.5 * zlibBytes.length) {      bytes=jpgBytes;      this.format=ImageConstants.JPG;    } else {      bytes=zlibBytes;      this.format=ImageConstants.ZLIB;    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tSpecify the random number seed (default 42)","S",1,"-S <num>"));  return newVector.elements();}  }
class C{  protected Value loadNonCompareConst(Value value){  if (!isCompareConstant(value)) {    return loadReg(value);  }  return value;}  }
class C{  public static IPackageFragmentRoot addLibrary(IJavaProject jproject,IPath path) throws JavaModelException {  return addLibrary(jproject,path,null,null);}  }
class C{  public StAndrewsSocialNetworkParser(Network network,MessagePropagationSimulation sim){  this.network=network;  this.sim=sim;}  }
class C{  public HeaderCard(String key,boolean value,String comment) throws HeaderCardException {  this(key,value ? "T" : "F",comment,false,false);}  }
class C{  public EnkanSystem relationships(ComponentRelationship... relationships){  for (  ComponentRelationship relationship : relationships) {    relationship.inject(components);    relationship.sort(componentsOrder);  }  return this;}  }
class C{  protected TAnnotationArgumentImpl(){  super();}  }
class C{  @RequestMapping(value="/{applicationName}/container/{container}/source/{source}/rows/{nbRows}",method=RequestMethod.GET) public @ResponseBody ResponseEntity<List<LogResource>> findByApplication(@PathVariable String applicationName,@PathVariable String container,@PathVariable String source,@PathVariable Integer nbRows) throws ServiceException, CheckException {  if (logger.isDebugEnabled()) {    logger.debug("applicationName:" + applicationName);    logger.debug("source:" + source);    logger.debug("containerId:" + container);    logger.debug("nbRows:" + nbRows);  }  GatheringStrategy gatheringStrategy=gatheringStrategies.getOrDefault(source,gatheringStrategies.get("tail"));  String logs=gatheringStrategy.gather(container,source,nbRows);  List<LogResource> logResources=LogResourceFactory.fromOutput(logs);  return ResponseEntity.status(HttpStatus.OK).body(logResources);}  }
class C{  final WindowInfoImpl register(@NotNull String id,@NotNull ToolWindowAnchor anchor,final boolean splitMode){  WindowInfoImpl info=myUnregisteredId2Info.get(id);  if (info != null) {    myUnregisteredId2Info.remove(id);  } else {    info=new WindowInfoImpl(id);    info.setAnchor(anchor);    info.setSplit(splitMode);  }  myRegisteredId2Info.put(id,info);  myRegisteredInfos=null;  myUnregisteredInfos=null;  myAllInfos=null;  return info;}  }
class C{  public void startAddObservations(){  vectorOfObservations=new Vector<double[]>();}  }
class C{  public TagDispatcherBuilder enableSounds(boolean enableSounds){  this.enableSounds=enableSounds;  return this;}  }
class C{  public void initialize(){  this.matrixStack.clear();  this.pushMatrix(Matrix.IDENTITY);}  }
class C{  public LineSweep(){  super();}  }
class C{  public static boolean isUrl(String resourceLocation){  if (resourceLocation == null) {    return false;  }  if (resourceLocation.startsWith(CLASSPATH_URL_PREFIX)) {    return true;  }  try {    new URL(resourceLocation);    return true;  } catch (  MalformedURLException ex) {    return false;  }}  }
class C{  public boolean isEnabled(){  return isEnabled;}  }
class C{  private void doAcquireSharedInterruptibly(int arg) throws InterruptedException {  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void math(final int op,final Type type){  mv.visitInsn(type.getOpcode(op));}  }
class C{  public void add(byte[] bytes){  int[] hashes=createHashes(bytes,k,getNewDigestFunction());  for (  int hash : hashes)   bitset.set(Math.abs(hash % bitSetSize),true);  numberOfAddedElements++;}  }
class C{  protected EntitySourceImpl(){  super();}  }
class C{  public synchronized boolean add(Object obj){  try {    boolean passedSoloMapComponentTest=true;    if (obj instanceof SoloMapComponent) {      try {        passedSoloMapComponentTest=getPolicy().canAdd(this,obj);      } catch (      MultipleSoloMapComponentException msmce) {        logger.fine(msmce.getMessage());        return false;      }    }    if (obj != null && passedSoloMapComponentTest) {      if (addInProgress) {        if (DEBUG) {          logger.fine("MapHandler: Attempting to add while add in progress, adding [" + obj.getClass().getName() + "]object to list");        }        addLater(obj);      } else {        addInProgress=true;        boolean ret=super.add(obj);        addInProgress=false;        purgeLaterList();        return ret;      }    }  } catch (  java.util.ConcurrentModificationException cme) {    if (obj != null) {      logger.info("MapHandler caught ConcurrentModificationException when adding [" + obj.getClass().getName() + "]. The addition of this component to the MapHandler is causing some other component to attempt to be added as well, and the coping mechanism in the MapHandler is not handling it well.");      if (DEBUG) {        cme.printStackTrace();      }      addLater(obj);      addInProgress=false;    }  }  return false;}  }
class C{  @SuppressWarnings({"unchecked"}) @Override public byte[] serialize(List list){  if (list == null)   return null;  final int size=list.size();  final int[] valueIDs=new int[size];  final byte[][] valueBytes=new byte[size][];  int totalSize=4 + size * 8;  int i=0;  Iterator iter=list.iterator();  while (iter.hasNext()) {    final Object value=iter.next();    Class<?> valueClass=value.getClass();    int valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);    if (valueTypeID == -1) {      if (value instanceof List) {        valueClass=List.class;        valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);      } else       if (value instanceof Map) {        valueClass=Map.class;        valueTypeID=EntityDefinitionManager.getIDBySerDerClass(valueClass);      } else {        throw new IllegalArgumentException("Unsupported class: " + valueClass.getName());      }    }    valueIDs[i]=valueTypeID;    final EntitySerDeser valueSerDer=EntityDefinitionManager.getSerDeser(valueClass);    if (valueSerDer == null) {      throw new IllegalArgumentException("Unsupported class: " + valueClass.getName());    }    valueBytes[i]=valueSerDer.serialize(value);    totalSize+=valueBytes[i].length;    ++i;  }  final byte[] result=new byte[totalSize];  int offset=0;  ByteUtil.intToBytes(size,result,offset);  offset+=4;  for (i=0; i < size; ++i) {    ByteUtil.intToBytes(valueIDs[i],result,offset);    offset+=4;    ByteUtil.intToBytes(valueBytes[i].length,result,offset);    offset+=4;    System.arraycopy(valueBytes[i],0,result,offset,valueBytes[i].length);    offset+=valueBytes[i].length;  }  return result;}  }
class C{  public void transformMetaData(){  clear(Port.CLEAR_META_DATA_ERRORS);  if (!isEnabled()) {    return;  }  getInputPorts().checkPreconditions();  getTransformer().transformMetaData();}  }
class C{  protected void paint(SynthContext context,Graphics g){  JProgressBar pBar=(JProgressBar)context.getComponent();  int x=0, y=0, width=0, height=0;  if (!pBar.isIndeterminate()) {    Insets pBarInsets=pBar.getInsets();    double percentComplete=pBar.getPercentComplete();    if (percentComplete != 0.0) {      if (pBar.getOrientation() == JProgressBar.HORIZONTAL) {        x=pBarInsets.left + progressPadding;        y=pBarInsets.top + progressPadding;        width=(int)(percentComplete * (pBar.getWidth() - (pBarInsets.left + progressPadding + pBarInsets.right+ progressPadding)));        height=pBar.getHeight() - (pBarInsets.top + progressPadding + pBarInsets.bottom+ progressPadding);        if (!SynthLookAndFeel.isLeftToRight(pBar)) {          x=pBar.getWidth() - pBarInsets.right - width- progressPadding- glowWidth;        }      } else {        x=pBarInsets.left + progressPadding;        width=pBar.getWidth() - (pBarInsets.left + progressPadding + pBarInsets.right+ progressPadding);        height=(int)(percentComplete * (pBar.getHeight() - (pBarInsets.top + progressPadding + pBarInsets.bottom+ progressPadding)));        y=pBar.getHeight() - pBarInsets.bottom - height- progressPadding;        if (SynthLookAndFeel.isLeftToRight(pBar)) {          y-=glowWidth;        }      }    }  } else {    boxRect=getBox(boxRect);    x=boxRect.x + progressPadding;    y=boxRect.y + progressPadding;    width=boxRect.width - progressPadding - progressPadding;    height=boxRect.height - progressPadding - progressPadding;  }  if (tileWhenIndeterminate && pBar.isIndeterminate()) {    double percentComplete=(double)getAnimationIndex() / (double)getFrameCount();    int offset=(int)(percentComplete * tileWidth);    Shape clip=g.getClip();    g.clipRect(x,y,width,height);    if (pBar.getOrientation() == JProgressBar.HORIZONTAL) {      for (int i=x - tileWidth + offset; i <= width; i+=tileWidth) {        context.getPainter().paintProgressBarForeground(context,g,i,y,tileWidth,height,pBar.getOrientation());      }    } else {      for (int i=y - offset; i < height + tileWidth; i+=tileWidth) {        context.getPainter().paintProgressBarForeground(context,g,x,i,width,tileWidth,pBar.getOrientation());      }    }    g.setClip(clip);  } else {    if (minBarSize == null || (width >= minBarSize.width && height >= minBarSize.height)) {      context.getPainter().paintProgressBarForeground(context,g,x,y,width,height,pBar.getOrientation());    }  }  if (pBar.isStringPainted()) {    paintText(context,g,pBar.getString());  }}  }
class C{  public double manhattanDistance(final double x,final double y){  final double dx=Math.abs((double)this.x - x);  final double dy=Math.abs((double)this.y - y);  return dx + dy;}  }
class C{  public XMLTableModel(Document tableDefinition,Object source){  this(XMLTableDefinition.load(tableDefinition),source);}  }
class C{  public double nextDouble(){  return nextDouble(this.my_p);}  }
class C{  static KuzIntKey convertKey(byte[] key){  if (key.length != 32) {    throw new RuntimeException("Key might be 32 bytes length");  }  KuzIntKey kuz=new KuzIntKey();  Kuz128 c=new Kuz128(), x=new Kuz128(), y=new Kuz128(), z=new Kuz128();  for (int i=0; i < 16; i++) {    x.getB()[i]=key[i];    y.getB()[i]=key[i + 16];  }  kuz.getK()[0].set(x);  kuz.getK()[1].set(y);  for (int i=1; i <= 32; i++) {    c.setQ(0,0);    c.setQ(1,0);    c.getB()[15]=(byte)i;    KuznechikMath.kuz_l(c);    z.setQ(0,x.getQ(0) ^ c.getQ(0));    z.setQ(1,x.getQ(1) ^ c.getQ(1));    for (int j=0; j < 16; j++) {      z.getB()[j]=KuznechikTables.kuz_pi[(z.getB()[j] & 0xFF)];    }    KuznechikMath.kuz_l(z);    z.setQ(0,z.getQ(0) ^ y.getQ(0));    z.setQ(1,z.getQ(1) ^ y.getQ(1));    y.set(x);    x.set(z);    if ((i & 7) == 0) {      kuz.getK()[(i >> 2)].set(x);      kuz.getK()[(i >> 2) + 1].set(y);    }  }  return kuz;}  }
class C{  public void dequeueOneToOneChatMessage(ChatMessage msg) throws SessionUnavailableException, PayloadException, NetworkException {  String msgId=msg.getMessageId();  if (sLogger.isActivated()) {    sLogger.debug("Dequeue chat message msgId=".concat(msgId));  }  mImService.acceptStoreAndForwardMessageSessionIfSuchExists(mContact);  OneToOneChatSession session=mImService.getOneToOneChatSession(mContact);  if (session == null) {    if (mImService.isChatSessionAvailable()) {      setChatMessageStatusAndTimestamp(msg,Status.SENDING);      sendChatMessageInNewSession(msg);    } else {      throw new SessionUnavailableException("There is no available chat session for contact '" + mContact + "'!");    }  } else   if (session.isMediaEstablished()) {    setChatMessageStatusAndTimestamp(msg,Status.SENDING);    sendChatMessageWithinSession(session,msg);  } else   if (session.isInitiatedByRemote()) {    if (sLogger.isActivated()) {      sLogger.debug("Accept one-to-one chat session with contact ".concat(mContact.toString()));    }    session.acceptSession();  } else {    if (mImService.isChatSessionAvailable()) {      setChatMessageStatusAndTimestamp(msg,Status.SENDING);      sendChatMessageInNewSession(msg);    } else {      throw new SessionUnavailableException("There is no available chat session for contact '" + mContact + "'!");    }  }}  }
class C{  private void copyPreferences(SharedPreferences oldPrefs,SharedPreferences newPrefs){  Map<String,?> entries=oldPrefs.getAll();  for (  Map.Entry<String,?> entry : entries.entrySet()) {    String key=entry.getKey();    Object value=entry.getValue();    if (value == null) {      Log.w(TAG,"skipped upgrade and removing entry for null key " + key);      newPrefs.edit().remove(key).apply();    } else     if (value instanceof Boolean) {      String boolValue=SettingsManager.convert((Boolean)value);      newPrefs.edit().putString(key,boolValue).apply();    } else     if (value instanceof Integer) {      String intValue=SettingsManager.convert((Integer)value);      newPrefs.edit().putString(key,intValue).apply();    } else     if (value instanceof Long) {      long longValue=(Long)value;      if (longValue <= Integer.MAX_VALUE && longValue >= Integer.MIN_VALUE) {        String intValue=SettingsManager.convert((int)longValue);        newPrefs.edit().putString(key,intValue).apply();      } else {        Log.w(TAG,"skipped upgrade for out of bounds long key " + key + " : "+ longValue);      }    } else     if (value instanceof String) {      newPrefs.edit().putString(key,(String)value).apply();    } else {      Log.w(TAG,"skipped upgrade and removing entry for unrecognized " + "key type " + key + " : "+ value.getClass());      newPrefs.edit().remove(key).apply();    }  }}  }
class C{  void processArgs(String[] args){  Character arg;  for (int i=0; i < args.length; i++) {    if ((args[i].length() >= 2) && (args[i].startsWith("-"))) {      arg=new Character(args[i].charAt(1));switch (arg.charValue()) {case 'c':        action='c';      break;case 'k':    action='k';  break;case 'a':options[2]='a';break;case 'n':options[3]='n';break;case 'f':options[1]='f';break;case 'e':options[0]='e';break;case 'K':options[1]='K';break;case 't':options[2]='t';break;default :printHelp();System.exit(-1);}} else {if (!args[i].startsWith("-") && (i == args.length - 1)) {name=args[i];arg=null;} else {printHelp();System.exit(-1);}}}}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];        fileCount++;      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public double doOperation() throws OperatorFailedException {  double[] mean=sccs.getMode();  double[] currentValue=parameter.getParameterValues();  double[] newValue=new double[dim];  Set<Integer> updateSet=new HashSet<Integer>();  if (setSizeMean != -1.0) {    final int listLength=Poisson.nextPoisson(setSizeMean);    while (updateSet.size() < listLength) {      int newInt=MathUtils.nextInt(parameter.getDimension());      if (!updateSet.contains(newInt)) {        updateSet.add(newInt);      }    }  } else {    for (int i=0; i < dim; ++i) {      updateSet.add(i);    }  }  double logq=0;  for (  Integer i : updateSet) {    newValue[i]=mean[i] + scaleFactor * MathUtils.nextGaussian();    if (UPDATE_ALL) {      parameter.setParameterValueQuietly(i,newValue[i]);    } else {      parameter.setParameterValue(i,newValue[i]);    }    logq+=(NormalDistribution.logPdf(currentValue[i],mean[i],scaleFactor) - NormalDistribution.logPdf(newValue[i],mean[i],scaleFactor));  }  if (UPDATE_ALL) {    parameter.setParameterValueNotifyChangedAll(0,parameter.getParameterValue(0));  }  return logq;}  }
class C{  public void refresh(LookAndFeel currentLaf,MetalTheme currentTheme){  this.laf=currentLaf;  this.theme=currentTheme;  capture=true;}  }
class C{  private SystemEvent invokeListenersFor(Class<? extends SystemEvent> systemEventClass,SystemEvent event,Object source,Class<?> sourceBaseType,boolean useSourceLookup) throws AbortProcessingException {  EventInfo eventInfo=systemEventHelper.getEventInfo(systemEventClass,source,sourceBaseType,useSourceLookup);  if (eventInfo != null) {    Set<SystemEventListener> listeners=eventInfo.getListeners();    event=processListeners(listeners,event,source,eventInfo);  }  return event;}  }
class C{  public void dispose(){  super.dispose();  if (!isModal())   System.exit(0);}  }
class C{  @SuppressWarnings("unchecked") public T read(URL file){  Preconditions.checkNotNull(file);  try (InputStream stream=file.openStream()){    return (T)yamlParser.load(stream);  } catch (  IOException e) {    throw new RuntimeException("Could not load config file: " + file.getFile(),e);  }}  }
class C{  public void scrollPages(int pages,boolean animate){  int scrollToY=getScrollY() + getHeight() * pages;  scrollTo(scrollToY,animate);}  }
class C{  public ObjIdConcurrentMap(int initialCapacity,float loadFactor,int concurrencyLevel){  if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)   throw new IllegalArgumentException();  if (concurrencyLevel > MAX_SEGMENTS)   concurrencyLevel=MAX_SEGMENTS;  int sshift=0;  int ssize=1;  while (ssize < concurrencyLevel) {    ++sshift;    ssize<<=1;  }  segmentShift=32 - sshift;  segmentMask=ssize - 1;  this.segments=Segment.newArray(ssize);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  int c=initialCapacity / ssize;  if (c * ssize < initialCapacity)   ++c;  int cap=1;  while (cap < c)   cap<<=1;  for (int i=0; i < this.segments.length; ++i)   this.segments[i]=new Segment<V>(cap,loadFactor);}  }
class C{  public static void main(String[] args){  TestSerializedForm tester=new TestSerializedForm();  int actualExitCode=run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  private void openScriptEditorPanel(CustomUpdate action){  ScriptEditor panel=new ScriptEditor(((CustomUpdate)action).getScriptString(),SCRIPT_DIR);  StandardDialog dialog=panel.getDialog(panel);  dialog.pack();  dialog.setLocationRelativeTo(null);  dialog.setVisible(true);  if (!dialog.hasUserCancelled()) {    ((CustomUpdate)action).setScriptString(panel.getTextArea().getText());    ((CustomUpdate)action).init();  }}  }
class C{  public static boolean asBoolean(String str){  return Boolean.parseBoolean(str);}  }
class C{  protected ExecutionError(@Nullable String message){  super(message);}  }
class C{  private void failTask(Throwable e,Integer activeHosts){  ServiceUtils.logSevere(this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,activeHosts,e));}  }
class C{  public Result filterOut(ResultLevel level){  Result ret=new Result();  for (  ResultEntry l : this.log) {    if (l.getLevel().compareTo(level) > 0) {      ret.add(l);    }  }  return ret;}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  @Override public void run(){  amIActive=true;  String destHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster destination=null;  WhiteboxRasterInfo imageInfo=null;  int nCols=0;  int nRows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double x, y, z;  int progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  String resampleMethod="nearest neighbour";  double north, south, east, west;  double gridResX, gridResY;  int currentFile=-1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  destHeader=args[1];  resampleMethod=args[2].toLowerCase().trim();  if (!resampleMethod.equals("nearest neighbour") && !resampleMethod.equals("bilinear") && !resampleMethod.equals("cubic convolution")) {    showFeedback("Resample method not recognized");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    boolean eastGreaterThanWest=true;    boolean northGreaterThanSouth=true;    double[][] imageData=new double[numImages][11];    north=Double.NEGATIVE_INFINITY;    south=Double.POSITIVE_INFINITY;    east=Double.NEGATIVE_INFINITY;    west=Double.POSITIVE_INFINITY;    double cellSizeX=Double.POSITIVE_INFINITY;    double cellSizeY=Double.POSITIVE_INFINITY;    for (a=0; a < numImages; a++) {      imageInfo=new WhiteboxRasterInfo(imageFiles[a]);      imageData[a][0]=imageInfo.getNorth();      imageData[a][1]=imageInfo.getSouth();      imageData[a][2]=imageInfo.getEast();      imageData[a][3]=imageInfo.getWest();      imageData[a][4]=imageInfo.getNumberRows();      imageData[a][5]=imageInfo.getNumberColumns();      imageData[a][6]=imageInfo.getCellSizeX();      imageData[a][7]=imageInfo.getCellSizeY();      imageData[a][8]=imageInfo.getNoDataValue();      imageData[a][9]=imageInfo.getEast() - imageInfo.getWest();      imageData[a][10]=imageInfo.getNorth() - imageInfo.getSouth();      if (a == 0) {        if (imageData[a][0] < imageData[a][1]) {          northGreaterThanSouth=false;          north=Double.POSITIVE_INFINITY;          south=Double.NEGATIVE_INFINITY;        }        if (imageData[a][2] < imageData[a][3]) {          eastGreaterThanWest=false;          east=Double.POSITIVE_INFINITY;          west=Double.NEGATIVE_INFINITY;        }      }      if (northGreaterThanSouth) {        if (imageData[a][0] > north) {          north=imageData[a][0];        }        if (imageData[a][1] < south) {          south=imageData[a][1];        }      } else {        if (imageData[a][0] < north) {          north=imageData[a][0];        }        if (imageData[a][1] > south) {          south=imageData[a][1];        }      }      if (eastGreaterThanWest) {        if (imageData[a][2] > east) {          east=imageData[a][2];        }        if (imageData[a][3] < west) {          west=imageData[a][3];        }      } else {        if (imageData[a][2] < east) {          east=imageData[a][2];        }        if (imageData[a][3] > west) {          west=imageData[a][3];        }      }      if (imageData[a][6] < cellSizeX) {        cellSizeX=imageData[a][6];      }      if (imageData[a][7] < cellSizeY) {        cellSizeY=imageData[a][7];      }    }    nRows=(int)Math.round(Math.abs(north - south) / cellSizeY);    nCols=(int)Math.round(Math.abs(east - west) / cellSizeX);    destination=new WhiteboxRaster(destHeader,north,south,east,west,nRows,nCols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.FLOAT,outputNoData,outputNoData);    int nColsLessOne=nCols - 1;    int nRowsLessOne=nRows - 1;    gridResX=destination.getCellSizeX();    gridResY=destination.getCellSizeY();    double northernEdge=north - gridResY;    double westernEdge=west + gridResX;    if (north < south) {      northernEdge=north + gridResY;    }    if (east < west) {      westernEdge=west - gridResX;    }    double yRange=north - south - gridResY;    double xRange=east - west - gridResX;    int sourceCol, sourceRow;    if (resampleMethod.equals("nearest neighbour")) {      for (a=0; a < numImages; a++) {        image=new WhiteboxRaster(imageFiles[a],"r");        int startRow=destination.getRowFromYCoordinate(image.getNorth()) - 1;        int endRow=destination.getRowFromYCoordinate(image.getSouth()) + 1;        int startCol=destination.getColumnFromXCoordinate(image.getWest()) - 1;        int endCol=destination.getColumnFromXCoordinate(image.getEast()) + 1;        if (startRow < 0) {          startRow=0;        }        if (startCol < 0) {          startCol=0;        }        if (endRow > nRows - 1) {          endRow=nRows - 1;        }        if (endCol > nCols - 1) {          endCol=nCols - 1;        }        for (row=startRow; row <= endRow; row++) {          y=northernEdge - (yRange * row) / nRowsLessOne;          for (col=startCol; col <= endCol; col++) {            x=westernEdge + (xRange * col) / nColsLessOne;            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              sourceRow=(int)Math.round((imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5));              sourceCol=(int)Math.round((x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5));              z=image.getValue(sourceRow,sourceCol);              if (z != imageData[a][8]) {                destination.setValue(row,col,z);              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        image.close();        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * (a + 1) / numImages);        updateProgress(progress);      }    } else {      if (destination.getDataType() != WhiteboxRaster.DataType.DOUBLE && destination.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("The destination image is not of an appropriate data" + " type (i.e. double or float) to perform this operation.");        return;      }      double dX, dY;      double srcRow, srcCol;      double originRow, originCol;      double rowN, colN;      double sumOfDist;      double[] shiftX;      double[] shiftY;      int numNeighbours=0;      double[][] neighbour;      if (resampleMethod.equals("cubic convolution")) {        shiftX=new double[]{-1,0,1,2,-1,0,1,2,-1,0,1,2,-1,0,1,2};        shiftY=new double[]{-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2};        numNeighbours=16;        neighbour=new double[16][2];      } else {        shiftX=new double[]{0,1,0,1};        shiftY=new double[]{0,0,1,1};        numNeighbours=4;        neighbour=new double[4][2];      }      for (a=0; a < numImages; a++) {        image=new WhiteboxRaster(imageFiles[a],"r");        int startRow=destination.getRowFromYCoordinate(image.getNorth()) - 1;        int endRow=destination.getRowFromYCoordinate(image.getSouth()) + 1;        int startCol=destination.getColumnFromXCoordinate(image.getWest()) - 1;        int endCol=destination.getColumnFromXCoordinate(image.getEast()) + 1;        if (startRow < 0) {          startRow=0;        }        if (startCol < 0) {          startCol=0;        }        if (endRow > nRows - 1) {          endRow=nRows - 1;        }        if (endCol > nCols - 1) {          endCol=nCols - 1;        }        for (row=startRow; row <= endRow; row++) {          y=northernEdge - (yRange * row) / nRowsLessOne;          for (col=startCol; col <= endCol; col++) {            x=westernEdge + (xRange * col) / nColsLessOne;            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              imageNoData=imageData[a][8];              srcRow=(imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5);              srcCol=(x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5);              originRow=Math.floor(srcRow);              originCol=Math.floor(srcCol);              sumOfDist=0;              for (i=0; i < numNeighbours; i++) {                rowN=originRow + shiftY[i];                colN=originCol + shiftX[i];                neighbour[i][0]=image.getValue((int)rowN,(int)colN);                dY=rowN - srcRow;                dX=colN - srcCol;                if ((dX + dY) != 0 && neighbour[i][0] != imageNoData) {                  neighbour[i][1]=1 / (dX * dX + dY * dY);                  sumOfDist+=neighbour[i][1];                } else                 if (neighbour[i][0] == imageNoData) {                  neighbour[i][1]=0;                } else {                  destination.setValue(row,col,neighbour[0][3]);                  break;                }              }              if (sumOfDist > 0) {                z=0;                for (i=0; i < numNeighbours; i++) {                  z+=(neighbour[i][0] * neighbour[i][1]) / sumOfDist;                }                destination.setValue(row,col,z);              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        image.close();        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * (a + 1) / numImages);        updateProgress(progress);      }    }    destination.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    destination.addMetadataEntry("Created on " + new Date());    destination.close();    returnData(destHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private List<TreeElement<JsonElement,JsonElement>> applyFilters(List<TreeElement<JsonElement,JsonElement>> roots){  for (  Filter filter : viewPart.getFilters()) {    if (filter.isEnabled()) {      roots=applyFilter(roots,filter);    }  }  return roots;}  }
class C{  public static String normalizeNumber(String phoneNumber){  StringBuilder sb=new StringBuilder();  int len=phoneNumber.length();  for (int i=0; i < len; i++) {    char c=phoneNumber.charAt(i);    int digit=Character.digit(c,10);    if (digit != -1) {      sb.append(digit);    } else     if (i == 0 && c == '+') {      sb.append(c);    } else     if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {      return normalizeNumber(PhoneNumberUtils.convertKeypadLettersToDigits(phoneNumber));    }  }  return sb.toString();}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  protected byte[] parseBytes() throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  parseBytes(bos);  return bos.toByteArray();}  }
class C{  public boolean isParallelProvisioningEnabled(){  String enabled=settings.getConfigSettings().get(ENABLE_PARALLEL_PROVISIONING);  if (enabled == null) {    return true;  }  return Boolean.parseBoolean(enabled);}  }
class C{  public TargetActivityHeaderView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  if (!isInEditMode()) {    initialize(context);  }}  }
class C{  public static void clear(DefaultListModel self){  self.removeAllElements();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.202 -0500",hash_original_method="84B3C85DEED8CE51C1D689DF257AD721",hash_generated_method="D92F4491524734E2C39072D095E8A5BB") void loadSynchronousMessages(){  if (DebugFlags.LOAD_LISTENER && !mSynchronous) {    throw new AssertionError();  }  while (!mMessageQueue.isEmpty()) {    handleMessage(mMessageQueue.remove(0));  }}  }
class C{  public void projectionChanged(ProjectionEvent e){  logger.fine("ProjectionStack.projectionChanged()");  Projection newProj=e.getProjection();  if (currentProjection == null || !currentProjection.equals(newProj)) {    logger.fine("pushing projection on backStack");    currentProjection=push(new ProjHolder(newProj,getProjectionFactory(e)));    if (forwardStack != null) {      forwardStack.clear();    }    fireStackStatus();  } else {    logger.fine("new projection matches current projection, no action.");  }}  }
class C{  private Base64(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.063 -0500",hash_original_method="983E0E6C2CAAD08C146D380FD1390B11",hash_generated_method="50A8FDFF2CCC7D0C4B6537E24623E557") @DSSpec(DSCat.IO) public static byte[] sha512(InputStream data) throws IOException {  return digest(getSha512Digest(),data);}  }
class C{  public String toString(){  return this.audioChannelLabelSubDescriptorBO.toString();}  }
class C{  static int positionOfLowestZeroBitStartingAt(long numIn,int startingPos){  long num=numIn >>> startingPos;  int pos=0;  while ((num & 1L) != 0) {    num=num >>> 1;    pos++;  }  return (pos + startingPos);}  }
class C{  private boolean zzRefill(){  if (zzBuffer == null) {    zzBuffer=zzChars;    zzEndRead+=zzChars.length;    return false;  }  return true;}  }
class C{  public ActionKeyInfo findActionKey(int keyCode){  if (mActionKeys == null) {    return null;  }  return mActionKeys.get(keyCode);}  }
class C{  public int allocateRankForNewItem(ShortcutInfo info){  int rank=getItemCount();  ArrayList<View> views=new ArrayList<View>(mFolder.getItemsInReadingOrder());  views.add(rank,null);  arrangeChildren(views,views.size(),false);  setCurrentPage(rank / mMaxItemsPerPage);  return rank;}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  protected void createCenterOfSectorArrow(DrawContext dc,Angle centerAzimuth,double finalRadius){  Position center=this.getPosition();  List<Position> positions=new ArrayList<Position>();  positions.add(center);  this.createArc(dc,finalRadius * this.getCenterOfSectorLength(),centerAzimuth,centerAzimuth,positions);  this.paths.add(this.createPath(positions));  Position arrowTip=positions.get(positions.size() - 1);  this.arrowHead=this.createPolygon();  positions=this.computeArrowheadPositions(dc,center,arrowTip,this.getArrowLength(),this.getArrowAngle());  this.arrowHead.setLocations(positions);}  }
class C{  private void sb3(int a,int b,int c,int d){  int t1=a ^ b;  int t2=a & c;  int t3=a | d;  int t4=c ^ d;  int t5=t1 & t3;  int t6=t2 | t5;  X2=t4 ^ t6;  int t8=b ^ t3;  int t9=t6 ^ t8;  int t10=t4 & t9;  X0=t1 ^ t10;  int t12=X2 & X0;  X1=t9 ^ t12;  X3=(b | d) ^ (t4 ^ t12);}  }
class C{  public String toString(){  String result;  result="transition on " + on_symbol().name() + " to state [";  result+=_to_state.index();  result+="]";  return result;}  }
class C{  private void deleteBackupWithoutLock(final String backupTag,final boolean ignore){  List<String> errorList=new ArrayList<String>();  try {    List<BackupProcessor.BackupTask<Void>> backupTasks=(new BackupProcessor(getHosts(),Arrays.asList(ports.get(0)),backupTag)).process(new DeleteBackupCallable(),false);    Throwable result=null;    for (    BackupProcessor.BackupTask task : backupTasks) {      try {        task.getResponse().getFuture().get();        log.info("Delete backup(name={}) on node({})success",backupTag,task.getRequest().getHost());      } catch (      CancellationException e) {        log.warn(String.format("The task of deleting backup(%s) on node(%s) was canceled",backupTag,task.getRequest().getHost()),e);      }catch (      InterruptedException e) {        log.error(String.format("Delete backup on node(%s:%d) failed.",task.getRequest().getHost(),task.getRequest().getPort()),e);        result=((result == null) ? e : result);        errorList.add(task.getRequest().getHost());      }catch (      ExecutionException e) {        Throwable cause=e.getCause();        log.error(String.format("Delete backup on node(%s:%d) failed.",task.getRequest().getHost(),task.getRequest().getPort()),cause);        result=((result == null) ? cause : result);        errorList.add(task.getRequest().getHost());      }    }    if (result != null) {      if (result instanceof Exception) {        throw (Exception)result;      } else {        throw new Exception(result);      }    }    log.info("Delete backup(name={}) success",backupTag);  } catch (  Exception ex) {    List<String> newErrList=(List<String>)((ArrayList<String>)errorList).clone();    for (    String host : newErrList) {      for (int i=1; i < ports.size(); i++) {        try {          deleteBackupFromNode(backupTag,host,ports.get(i));          errorList.remove(host);          log.info(String.format("Retry delete backup(%s) on node(%s:%d) success",backupTag,host,ports.get(i)));          break;        } catch (        Exception e) {          log.error(String.format("Retry delete backup on node(%s:%d) failed",host,ports.get(i)),e);        }      }    }    if (!errorList.isEmpty()) {      Throwable cause=(ex.getCause() == null ? ex : ex.getCause());      if (ignore) {        log.warn(String.format("Delete backup({%s}) on nodes(%s) failed, but ignore ingnore the errors",backupTag,errorList.toString()),cause);      } else {        throw BackupException.fatals.failedToDeleteBackup(backupTag,errorList.toString(),cause);      }    } else {      log.info("Delete backup(name={}) success",backupTag);    }  }}  }
class C{  public void tileImage(Image img,int x,int y,int w,int h){  if (img.requiresDrawImage()) {    int iW=img.getWidth();    int iH=img.getHeight();    int clipX=getClipX();    int clipW=getClipWidth();    int clipY=getClipY();    int clipH=getClipHeight();    clipRect(x,y,w,h);    for (int xPos=0; xPos <= w; xPos+=iW) {      for (int yPos=0; yPos < h; yPos+=iH) {        int actualX=xPos + x;        int actualY=yPos + y;        if (actualX > clipX + clipW) {          continue;        }        if (actualX + iW < clipX) {          continue;        }        if (actualY > clipY + clipH) {          continue;        }        if (actualY + iH < clipY) {          continue;        }        drawImage(img,actualX,actualY);      }    }    setClip(clipX,clipY,clipW,clipH);  } else {    impl.tileImage(nativeGraphics,img.getImage(),x + xTranslate,y + yTranslate,w,h);  }}  }
class C{  public RepositoryImpl(){  init(Defs.NULL_ID);}  }
class C{  public synchronized String readResource(String fileName) throws IOException, BadLocationException {  InputStream inputStream=null;  try {    inputStream=this.getClass().getResourceAsStream(fileName);    InputStreamReader inputStreamReader=new InputStreamReader(inputStream);    return readInputStream(inputStreamReader);  }  finally {    if (null != inputStream)     inputStream.close();  }}  }
class C{  private CacheDataPage nestRootDataPage(CacheDataPage rootDataPage) throws IOException {  DataPageMain rootMain=rootDataPage._main;  DataPageExtra rootExtra=rootDataPage._extra;  if (!rootMain.isRoot()) {    throw new IllegalArgumentException(withErrorContext("should be called with root, duh"));  }  CacheDataPage newDataPage=allocateNewCacheDataPage(rootMain._pageNumber,rootMain._leaf);  DataPageMain newMain=newDataPage._main;  DataPageExtra newExtra=newDataPage._extra;  newMain._childTailPageNumber=rootMain._childTailPageNumber;  newExtra._entries=rootExtra._entries;  newExtra._entryPrefix=rootExtra._entryPrefix;  newExtra._totalEntrySize=rootExtra._totalEntrySize;  newExtra.setEntryView(newMain);  if (!newMain._leaf) {    reparentChildren(newDataPage);  }  rootMain._leaf=false;  rootMain._childTailPageNumber=INVALID_INDEX_PAGE_NUMBER;  rootExtra._entries=new ArrayList<Entry>();  rootExtra._entryPrefix=EMPTY_PREFIX;  rootExtra._totalEntrySize=0;  rootExtra.setEntryView(rootMain);  addParentEntry(rootDataPage,newDataPage);  return newDataPage;}  }
class C{  public ObjectMatrix2D viewRow(int row){  checkRow(row);  int viewRows=this.slices;  int viewColumns=this.columns;  int viewRowZero=sliceZero;  int viewColumnZero=columnZero;  int viewOffset=this.offset + _rowOffset(_rowRank(row));  int viewRowStride=this.sliceStride;  int viewColumnStride=this.columnStride;  int[] viewRowOffsets=this.sliceOffsets;  int[] viewColumnOffsets=this.columnOffsets;  return new SelectedSparseObjectMatrix2D(viewRows,viewColumns,this.elements,viewRowZero,viewColumnZero,viewRowStride,viewColumnStride,viewRowOffsets,viewColumnOffsets,viewOffset);}  }
class C{  public void println(char ch) throws IOException {  print(ch);  println();}  }
class C{  private void handlePlayRequest(){  LogUtils.d(TAG,"handlePlayRequest: mState=" + mPlayback.getState());  mDelayedStopHandler.removeCallbacksAndMessages(null);  if (!mServiceStarted) {    LogUtils.v(TAG,"Starting service");    startService(new Intent(getApplicationContext(),MusicService.class));    mServiceStarted=true;  }  if (QueueHelper.isIndexPlayable(mCurrentIndexOnQueue,mPlayingQueue)) {    updateMetadata();    mPlayback.play(mPlayingQueue.get(mCurrentIndexOnQueue));  }  if (!mSession.isActive()) {    mSession.setActive(true);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return (stack.getUIMgr() == null) ? null : stack.getUIMgr().getModuleGroup().getWidgets();}  }
class C{  Object cloneTimerNotification(){  TimerNotification clone=new TimerNotification(this.getType(),this.getSource(),this.getSequenceNumber(),this.getTimeStamp(),this.getMessage(),notificationID);  clone.setUserData(this.getUserData());  return clone;}  }
class C{  public static String base64ToString(final String data){  return ConversionUtils.arrayToString(Base64.decodeBase64(data));}  }
class C{  @Override public boolean hasFocusable(){  return false;}  }
class C{  private int findChunkPosition(final MemoryChunk chunk){  Preconditions.checkNotNull(chunk,"Error: Memory chunk can't be null");  final long address=chunk.getAddress();  for (int i=0; i < getNumberOfChunks(); i++) {    if (address < m_chunks.get(i).getAddress()) {      return i;    }  }  return m_chunks.size();}  }
class C{  @Override public void tearDown() throws Exception {  component=null;  super.tearDown();}  }
class C{  public ServiceCall<TranslationResult> translate(final String text,final String modelId){  return translate(Collections.singletonList(text),modelId);}  }
class C{  public IntVector(int x,int y,int z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public String[] addInitNextForTE(List<SimpleTLCState> trace,TraceExpressionInformationHolder[] expressionData){  String initId=getValidIdentifier(INIT_SCHEME);  String nextId=getValidIdentifier(NEXT_SCHEME);  addInitNextForTE(trace,expressionData,initId,nextId);  return new String[]{initId,nextId};}  }
class C{  private boolean tryToNotifyReset(){  if ((mStatus == PTR_STATUS_COMPLETE || mStatus == PTR_STATUS_PREPARE) && mPtrIndicator.isInStartPosition()) {    if (mPtrUIHandlerHolder.hasHandler()) {      mPtrUIHandlerHolder.onUIReset(this);      if (DEBUG) {        PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIReset");      }    }    mStatus=PTR_STATUS_INIT;    clearFlag();    return true;  }  return false;}  }
class C{  public void retract(){  if (textPos > 0)   textPos--;}  }
class C{  public boolean canBeLongAddress(int address){  return isLongAddress(address);}  }
class C{  @Override public void stop(){  if (stopped)   return;  stopped=true;  StreamerContext.getStreamer().close();  StreamerContext.getIgnite().close();}  }
class C{  public static byte add(byte a,byte b){  return (byte)(a ^ b);}  }
class C{  public static void main(String[] args){  initializeComponents();  DatePickerSettings settings=new DatePickerSettings();  CalendarPanel calendarPanel=new CalendarPanel(settings);  calendarPanel.addCalendarSelectionListener(new SampleCalendarSelectionListener());  container.add(calendarPanel);  frame.setVisible(true);}  }
class C{  public void recreate(int S_Resource_ID,Timestamp date){  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(date);  cal.set(Calendar.HOUR,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  if (m_type == TYPE_WEEK)   cal.set(Calendar.DAY_OF_WEEK,cal.getFirstDayOfWeek()); else   if (m_type == TYPE_MONTH)   cal.set(Calendar.DAY_OF_MONTH,1);  m_startDate=new Timestamp(cal.getTimeInMillis());  cal.add(m_type,1);  m_endDate=new Timestamp(cal.getTimeInMillis());  log.config("(" + m_type + ") Resource_ID="+ S_Resource_ID+ ": "+ m_startDate+ "->"+ m_endDate);  MAssignmentSlot[] mas=m_model.getAssignmentSlots(S_Resource_ID,m_startDate,m_endDate,null,true,null);  MAssignmentSlot[] mts=m_model.getDayTimeSlots();  timePanel.setTimeSlots(mts);  schedulePanel.setAssignmentSlots(mas,S_Resource_ID,m_startDate,m_endDate);  schedulePanel.setHeight(timePanel.getPreferredSize().height);}  }
class C{  public ClusterUpdateSettingsRequest persistentSettings(Settings settings){  this.persistentSettings=settings;  return this;}  }
class C{  protected void waitForReceiverNotification() throws Exception {  waitForReceiverNotifications(1);}  }
class C{  @Override public void insertBack(Blorp x){  size+=1;  Node p=sentinel;  while (p.next != null) {    p=p.next;  }  p.next=new Node(x,null);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public void deleteAll(){synchronized (this) {    try {      RefCounted<SolrIndexSearcher> holder=uhandler.core.openNewSearcher(true,true);      holder.decref();    } catch (    Exception e) {      SolrException.log(log,"Error opening realtime searcher for deleteByQuery",e);    }    if (map != null)     map.clear();    if (prevMap != null)     prevMap.clear();    if (prevMap2 != null)     prevMap2.clear();    oldDeletes.clear();    deleteByQueries.clear();  }}  }
class C{  public String group(String name){  int group=getMatchedGroupIndex(name);  if ((groups[group * 2] == -1) || (groups[group * 2 + 1] == -1))   return null;  return getSubSequence(groups[group * 2],groups[group * 2 + 1]).toString();}  }
class C{  @Override protected void doClose(){  clearTransactionListeners();}  }
class C{  public Object readRef() throws IOException {  return _refs.get(parseInt());}  }
class C{  @Override public void draw(final Graphics g,final int destx,final int desty,final int x,final int y,final int w,final int h){  update();  if (sprite != null) {    sprite.draw(g,destx,desty,x,y,w,h);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final void dump(final DataOutputStream file) throws IOException {  file.write(frame_type);  if (frame_type >= Const.SAME_FRAME && frame_type <= Const.SAME_FRAME_MAX) {  } else   if (frame_type >= Const.SAME_LOCALS_1_STACK_ITEM_FRAME && frame_type <= Const.SAME_LOCALS_1_STACK_ITEM_FRAME_MAX) {    types_of_stack_items[0].dump(file);  } else   if (frame_type == Const.SAME_LOCALS_1_STACK_ITEM_FRAME_EXTENDED) {    file.writeShort(byte_code_offset);    types_of_stack_items[0].dump(file);  } else   if (frame_type >= Const.CHOP_FRAME && frame_type <= Const.CHOP_FRAME_MAX) {    file.writeShort(byte_code_offset);  } else   if (frame_type == Const.SAME_FRAME_EXTENDED) {    file.writeShort(byte_code_offset);  } else   if (frame_type >= Const.APPEND_FRAME && frame_type <= Const.APPEND_FRAME_MAX) {    file.writeShort(byte_code_offset);    for (    StackMapType type : types_of_locals) {      type.dump(file);    }  } else   if (frame_type == Const.FULL_FRAME) {    file.writeShort(byte_code_offset);    file.writeShort(types_of_locals.length);    for (    StackMapType type : types_of_locals) {      type.dump(file);    }    file.writeShort(types_of_stack_items.length);    for (    StackMapType type : types_of_stack_items) {      type.dump(file);    }  } else {    throw new ClassFormatException("Invalid Stack map table tag: " + frame_type);  }}  }
class C{  private int up(){  Item i=new Item();  int res=0;  if (ns.empty()) {    return -1;  }  if (cur != 0 && sc[cur] == 0) {    return lo[cur];  }  boolean climb=true;  while (climb) {    i=ns.pop();    i.child++;switch (i.child) {case 1:      if (sc[i.parent] != 0) {        res=eq[i.parent];        ns.push(i.clone());        ks.append(sc[i.parent]);      } else {        i.child++;        ns.push(i.clone());        res=hi[i.parent];      }    climb=false;  break;case 2:res=hi[i.parent];ns.push(i.clone());if (ks.length() > 0) {ks.setLength(ks.length() - 1);}climb=false;break;default :if (ns.empty()) {return -1;}climb=true;break;}}return res;}  }
class C{  @Override protected String doRender(Object obj,JPanel panel){  JTextArea text;  text=new JTextArea();  text.setFont(GUIHelper.getMonospacedFont());  text.setText("" + obj);  text.setCaretPosition(0);  panel.add(new BaseScrollPane(text),BorderLayout.CENTER);  return null;}  }
class C{  private void computeBackwardDependencesUse(Operand op,DepGraphNode destNode,DepGraphNode lastExceptionNode){  if (!(op instanceof RegisterOperand))   return;  RegisterOperand regOp=(RegisterOperand)op;  DepGraphNode sourceNode=getDepGraphNode(regOp.getRegister());  if (sourceNode != null) {    int type=regOp.getRegister().isValidation() ? GUARD_ANTI : REG_ANTI;    destNode.insertOutEdge(sourceNode,type);  }}  }
class C{  void sqsubAction(NodeRepresentation nodeRep){  int idx=nodeRep.getParentIndex();  Vector<NodeRepresentation> parentVec=nodeRep.getParentVector();  if (parentVec == this.state.assumeReps) {    nodeRep.initialPosition=Integer.MAX_VALUE;    int oldIdx=nodeRep.getParentIndex();    if (oldIdx < state.numberOfContextAssumptions) {      state.numberOfContextAssumptions--;    }    if (oldIdx < state.firstAddedAssumption) {      state.firstAddedAssumption--;    }    state.assumeReps.remove(oldIdx);    state.assumeReps.add(nodeRep);  }  Decomposition decomp=nodeRep.decomposition;  state.hasChanged=true;  if (decomp.definedOp != null) {    state.goalDefinitions.add(nodeRep.instantiationSubstitutions.prefix + decomp.definedOp);  }  nodeRep.nodeType=NodeRepresentation.OR_DECOMP;  nodeRep.nodeSubtype=NodeRepresentation.OTHER_TYPE;  nodeRep.children=new Vector<Vector<NodeRepresentation>>();  for (int i=0; i < decomp.children.size(); i++) {    Vector<NodeRepresentation> repVec=new Vector<NodeRepresentation>();    nodeRep.children.add(repVec);    NodeRepresentation rep=decompositionChildToNodeRep(nodeRep,i,repVec,nodeRep);    if (i == 1) {      rep.nodeType=NodeRepresentation.OTHER_NODE;      rep.nodeSubtype=NodeRepresentation.OTHER_TYPE;      rep.nodeText=prependToStringArray(rep.nodeText,"UNCHANGED ");    }    repVec.add(rep);  }  raiseWindow();}  }
class C{  public void add(URI uri,HttpCookie cookie){  if (cookie == null) {    throw new NullPointerException("cookie is null");  }  lock.lock();  try {    cookieJar.remove(cookie);    if (cookie.getMaxAge() != 0) {      cookieJar.add(cookie);      if (cookie.getDomain() != null) {        addIndex(domainIndex,cookie.getDomain(),cookie);      }      if (uri != null) {        addIndex(uriIndex,getEffectiveURI(uri),cookie);      }    }  }  finally {    lock.unlock();  }}  }
class C{  public static boolean isWebpHeader(final byte[] imageHeaderBytes,final int offset,final int headerSize){  return headerSize >= SIMPLE_WEBP_HEADER_LENGTH && matchBytePattern(imageHeaderBytes,offset,WEBP_RIFF_BYTES) && matchBytePattern(imageHeaderBytes,offset + 8,WEBP_NAME_BYTES);}  }
class C{  @Override public void addAttribute(String name,String value){  if (name.equals("code")) {    int code=Integer.decode(value);    for (    char ch : Character.toChars(code)) {      addCharacter(ch);    }  } else {    super.addAttribute(name,value);  }}  }
class C{  public static final boolean isLeapYear(int aYear){  return ((aYear % 4 == 0) && ((aYear % 100 != 0) || (aYear % 400 == 0)));}  }
class C{  public static void showAlert(Context context,String title,String text){  Builder alertBuilder=new Builder(context);  alertBuilder.setTitle(title);  alertBuilder.setMessage(text);  alertBuilder.create().show();}  }
class C{  @Override public <K>CompletableFuture<Map<K,List<T>>> groupBy(final Function<? super T,? extends K> classifier){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  private boolean canDispathEventLocked(Service service,AccessibilityEvent event,int handledFeedbackTypes){  if (!service.canReceiveEventsLocked()) {    return false;  }  if (!event.isImportantForAccessibility() && (service.mFetchFlags & AccessibilityNodeInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS) == 0) {    return false;  }  int eventType=event.getEventType();  if ((service.mEventTypes & eventType) != eventType) {    return false;  }  Set<String> packageNames=service.mPackageNames;  CharSequence packageName=event.getPackageName();  if (packageNames.isEmpty() || packageNames.contains(packageName)) {    int feedbackType=service.mFeedbackType;    if ((handledFeedbackTypes & feedbackType) != feedbackType || feedbackType == AccessibilityServiceInfo.FEEDBACK_GENERIC) {      return true;    }  }  return false;}  }
class C{  @Override public boolean keepOriginalIds(){  return false;}  }
class C{  protected final void onShutdown(){}  }
class C{  public void translate(double dx,double dy,double dz){  Transform3D other=new Transform3D();  other.setTranslation(new Vector3d(dx,dy,dz));  transform(other);}  }
class C{  public static void close(){  line.drain();  line.stop();}  }
class C{  public String sql_updatePreparedStatement(String vendorName,String catalogName,String schemaName,String tableName,ArrayList<String> columnNames,ArrayList<String> whereColumnNames){  ArrayList<String> conditions=null;  if (whereColumnNames != null && whereColumnNames.size() > 0) {    conditions=new ArrayList<String>();    for (int i=0; i < whereColumnNames.size(); i++) {      String colName=normalizeColumnName(vendorName,whereColumnNames.get(i));      conditions.add(new StringBuffer(colName).append(" = ? ").toString());    }  }  return sql_update(vendorName,catalogName,schemaName,tableName,null,columnNames,null,conditions);}  }
class C{  public CorruptIndexException(String message,DataInput input,Throwable cause){  this(message,Objects.toString(input),cause);}  }
class C{  @Override protected ActiveMQConnectionFactory createConnectionFactory() throws Exception {  return new ActiveMQConnectionFactory("tcp://localhost:61616");}  }
class C{  public WriteResponse Write(WriteRequest req) throws ServiceFaultException, ServiceResultException {  return (WriteResponse)channel.serviceRequest(req);}  }
class C{  public void testToBigIntegerNeg1(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+21";  BigInteger bNumber=new BigInteger("-123809648392384754573567356745735635678902957849027687");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  protected void clearOutEvents(){}  }
class C{  private static void markExceptionHandlers(BlockNode block){  if (block.getInstructions().isEmpty()) {    return;  }  InsnNode me=block.getInstructions().get(0);  ExcHandlerAttr handlerAttr=me.get(AType.EXC_HANDLER);  if (handlerAttr == null || me.getType() != InsnType.MOVE_EXCEPTION) {    return;  }  ExceptionHandler excHandler=handlerAttr.getHandler();  block.addAttr(handlerAttr);  ArgType type=excHandler.isCatchAll() ? ArgType.THROWABLE : excHandler.getCatchType().getType();  RegisterArg resArg=me.getResult();  resArg=InsnArg.reg(resArg.getRegNum(),type);  me.setResult(resArg);  me.add(AFlag.DONT_INLINE);  excHandler.setArg(resArg);}  }
class C{  private final String msgStackToString(ParseException e){  StringBuffer msg;  String name=" *unknown* (error occurred before module header)";  if (mn != null)   name=mn.toString();  msg=new StringBuffer("***Parse Error***\n");  if (expecting != emptyString) {    msg.append("Was expecting \"");    msg.append(expecting);    msg.append("\"\n");  }  msg.append(e.getShortMessage());  msg.append("\n\nResidual stack trace follows:\n");  int last=msgStackCurrentSize - 10;  if (last < 0)   last=0;  for (int lvi=msgStackCurrentSize; lvi > last; lvi-=2) {    msg.append((String)msgStack[lvi - 2]);    msg.append(" starting at line ");    Token t=(Token)msgStack[lvi - 1];    msg.append(t.beginLine);    msg.append(", column ");    msg.append(t.beginColumn);    msg.append(".\n");  }  return msg.toString();}  }
class C{  public void validateFile(String fileName) throws Exception {  String xml=FileUtils.readFileToString(new File(fileName),StandardCharsets.UTF_8.toString());  validate(xml);}  }
class C{  public String rename(final String oldkey,final String newkey){  checkIsInMulti();  client.rename(oldkey,newkey);  return client.getStatusCodeReply();}  }
class C{  public BasicAuthentication(boolean isProxy,String host,int port,String realm,String auth){  super(isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION,AuthScheme.BASIC,host,port,realm);  this.auth="Basic " + auth;}  }
class C{  public static ILinkTableConfiguration readLinkTableConfiguration(String fullPath){  return createLinkTableConfiguration(VeriniceLinkTableIO.read(fullPath));}  }
class C{  public XMLSerializationMethodHandler(Object owner) throws Exception {  super();  this.owner=owner;  m_ReadMethods=new MethodHandler();  m_WriteMethods=new MethodHandler();  clear();}  }
class C{  @Provides public ServiceFactory serviceFactory() throws IOException {  ipServiceCallMock=mock(Call.class);  IpService ipServiceMock=mock(IpService.class);  when(ipServiceMock.getIp(anyString())).thenReturn(ipServiceCallMock);  ServiceFactory serviceFactoryMock=mock(ServiceFactory.class);  when(serviceFactoryMock.createService(IpService.class)).thenReturn(ipServiceMock);  return serviceFactoryMock;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  protected void consolidate(){  int arraySize=size + 1;  Node[] array=new Node[arraySize];  for (int i=0; i < arraySize; i++) {    array[i]=null;  }  int numRoots=0;  Node x=min;  if (x != null) {    numRoots++;    x=x.right;    while (x != min) {      numRoots++;      x=x.right;    }  }  while (numRoots > 0) {    int d=x.degree;    Node next=x.right;    while (array[d] != null) {      Node y=array[d];      if (x.key > y.key) {        Node temp=y;        y=x;        x=temp;      }      link(y,x);      array[d]=null;      d++;    }    array[d]=x;    x=next;    numRoots--;  }  min=null;  for (int i=0; i < arraySize; i++) {    if (array[i] != null) {      if (min != null) {        array[i].left.right=array[i].right;        array[i].right.left=array[i].left;        array[i].left=min;        array[i].right=min.right;        min.right=array[i];        array[i].right.left=array[i];        if (array[i].key < min.key) {          min=array[i];        }      } else {        min=array[i];      }    }  }}  }
class C{  protected void installListeners(){  Window topLevelWindows[]=EventQueueMonitor.getTopLevelWindows();  if (topLevelWindows != null) {    for (int i=0; i < topLevelWindows.length; i++) {      installListeners(topLevelWindows[i]);    }  }}  }
class C{  protected Command processPacketIn(IOFSwitch sw,OFPacketIn msg,FloodlightContext cntx){  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  Command ret=Command.STOP;  String srcNetwork=macToGuid.get(eth.getSourceMACAddress());  if (eth.isBroadcast() || eth.isMulticast() || isDefaultGateway(eth)|| isDhcpPacket(eth)) {    ret=Command.CONTINUE;  } else   if (srcNetwork == null) {    log.trace("Blocking traffic from host {} because it is not attached to any network.",eth.getSourceMACAddress().toString());    ret=Command.STOP;  } else   if (oneSameNetwork(eth.getSourceMACAddress(),eth.getDestinationMACAddress())) {    ret=Command.CONTINUE;  }  if (log.isTraceEnabled())   log.trace("Results for flow between {} and {} is {}",new Object[]{eth.getSourceMACAddress(),eth.getDestinationMACAddress(),ret});  return ret;}  }
class C{  public SQLClientInfoException(String reason,String sqlState,int vendorCode,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,sqlState,vendorCode,cause);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  public JRadioButton(Icon icon){  this(null,icon,false);}  }
class C{  public static String opName(int opcode){switch (opcode) {case NOP:    return "nop";case MOVE:  return "move";case MOVE_PARAM:return "move-param";case MOVE_EXCEPTION:return "move-exception";case CONST:return "const";case GOTO:return "goto";case IF_EQ:return "if-eq";case IF_NE:return "if-ne";case IF_LT:return "if-lt";case IF_GE:return "if-ge";case IF_LE:return "if-le";case IF_GT:return "if-gt";case SWITCH:return "switch";case ADD:return "add";case SUB:return "sub";case MUL:return "mul";case DIV:return "div";case REM:return "rem";case NEG:return "neg";case AND:return "and";case OR:return "or";case XOR:return "xor";case SHL:return "shl";case SHR:return "shr";case USHR:return "ushr";case NOT:return "not";case CMPL:return "cmpl";case CMPG:return "cmpg";case CONV:return "conv";case TO_BYTE:return "to-byte";case TO_CHAR:return "to-char";case TO_SHORT:return "to-short";case RETURN:return "return";case ARRAY_LENGTH:return "array-length";case THROW:return "throw";case MONITOR_ENTER:return "monitor-enter";case MONITOR_EXIT:return "monitor-exit";case AGET:return "aget";case APUT:return "aput";case NEW_INSTANCE:return "new-instance";case NEW_ARRAY:return "new-array";case FILLED_NEW_ARRAY:return "filled-new-array";case CHECK_CAST:return "check-cast";case INSTANCE_OF:return "instance-of";case GET_FIELD:return "get-field";case GET_STATIC:return "get-static";case PUT_FIELD:return "put-field";case PUT_STATIC:return "put-static";case INVOKE_STATIC:return "invoke-static";case INVOKE_VIRTUAL:return "invoke-virtual";case INVOKE_SUPER:return "invoke-super";case INVOKE_DIRECT:return "invoke-direct";case INVOKE_INTERFACE:return "invoke-interface";case MOVE_RESULT:return "move-result";case MOVE_RESULT_PSEUDO:return "move-result-pseudo";case FILL_ARRAY_DATA:return "fill-array-data";}return "unknown-" + Hex.u1(opcode);}  }
class C{  public void make() throws Exception {  for (int i=0; i < _makeList.size(); i++) {    Make make=_makeList.get(i);    make.make();  }}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final NetworkTimeStamp timeStamp){  serializer.writeLong(label,timeStamp.getRaw());}  }
class C{  public void copyTypeFrom(RegisterOperand rhs){  this.flags=rhs.flags;  this.setType(rhs.getType());}  }
class C{  protected boolean isUserUndefined(){  return fieldUserUndefined;}  }
class C{  public JInternalFrame(){  this("",false,false,false,false);}  }
class C{  public static String toString(InputStream input) throws IOException {  return toString(input,Charset.defaultCharset());}  }
class C{  public int xToOffset(int line,int x){  TokenMarker tokenMarker=getTokenMarker();  FontMetrics fm=painter.getFontMetrics();  getLineText(line,lineSegment);  char[] segmentArray=lineSegment.array;  int segmentOffset=lineSegment.offset;  int segmentCount=lineSegment.count;  int width=horizontalOffset;  if (tokenMarker == null) {    for (int i=0; i < segmentCount; i++) {      char c=segmentArray[i + segmentOffset];      int charWidth;      if (c == '\t') {        charWidth=(int)painter.nextTabStop(width,i) - width;      } else {        charWidth=fm.charWidth(c);      }      if (painter.isBlockCaretEnabled()) {        if (x - charWidth <= width) {          return i;        }      } else {        if (x - charWidth / 2 <= width) {          return i;        }      }      width+=charWidth;    }    return segmentCount;  } else {    Token tokens;    if (painter.currentLineIndex == line && painter.currentLineTokens != null) {      tokens=painter.currentLineTokens;    } else {      painter.currentLineIndex=line;      tokens=painter.currentLineTokens=tokenMarker.markTokens(lineSegment,line);    }    int offset=0;    Font defaultFont=painter.getFont();    SyntaxStyle[] styles=painter.getStyles();    for (; ; ) {      byte id=tokens.id;      if (id == Token.END) {        return offset;      }      if (id == Token.NULL) {        fm=painter.getFontMetrics();      } else {        fm=styles[id].getFontMetrics(defaultFont);      }      int length=tokens.length;      for (int i=0; i < length; i++) {        char c=segmentArray[segmentOffset + offset + i];        int charWidth;        if (c == '\t') {          charWidth=(int)painter.nextTabStop(width,offset + i) - width;        } else {          charWidth=fm.charWidth(c);        }        if (painter.isBlockCaretEnabled()) {          if (x - charWidth <= width) {            return offset + i;          }        } else {          if (x - charWidth / 2 <= width) {            return offset + i;          }        }        width+=charWidth;      }      offset+=length;      tokens=tokens.next;    }  }}  }
class C{  public NotificationChain basicSetStateVector(StateVector newStateVector,NotificationChain msgs){  StateVector oldStateVector=stateVector;  stateVector=newStateVector;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_SCOPE__STATE_VECTOR,oldStateVector,newStateVector);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void grow(int newLength){  ref.chars=ArrayUtil.grow(ref.chars,newLength);}  }
class C{  public int hashCode(){  int retval=0;  for (int i=0; i < this.encryptedData.length; i++)   retval+=this.encryptedData[i] * i;  return retval;}  }
class C{  public void init(RuntimeServices rs,InternalContextAdapter context,Node node) throws Exception {  super.init(rs,context,node);  if (counterName != null)   return;  counterName=rsvc.getString(RuntimeConstants.COUNTER_NAME);  counterInitialValue=rsvc.getInt(RuntimeConstants.COUNTER_INITIAL_VALUE);  elementKey=node.jjtGetChild(0).getFirstTokenImage().substring(1);  uberInfo=new Info(context.getCurrentTemplateName(),getLine(),getColumn());}  }
class C{  public URI selectLocalCloudStoreIfAvailable(String path){  try {    return ServiceUtils.selectLocalServer(cloudStoreServerSet,path);  } catch (  URISyntaxException uriSyntaxException) {    throw new RuntimeException(uriSyntaxException);  }}  }
class C{  public ZDT(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  public PartListing listParts(ListPartsRequest listPartsRequest) throws OSSException, ClientException {  assertParameterNotNull(listPartsRequest,"listPartsRequest");  String key=listPartsRequest.getKey();  String bucketName=listPartsRequest.getBucketName();  String uploadId=listPartsRequest.getUploadId();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  assertParameterNotNull(key,"key");  ensureObjectKeyValid(key);  assertStringNotNullOrEmpty(uploadId,"uploadId");  Map<String,String> params=new LinkedHashMap<String,String>();  populateListPartsRequestParameters(listPartsRequest,params);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.GET).setBucket(bucketName).setKey(key).setParameters(params).setOriginalRequest(listPartsRequest).build();  return doOperation(request,listPartsResponseParser,bucketName,key,true);}  }
class C{  public CActionDeleteInvisibleNodes(final ZyGraph graph){  super("Delete Invisible Nodes");  m_graph=graph;}  }
class C{  protected HashAttributeSet(Class<?> interfaceName){  if (interfaceName == null) {    throw new NullPointerException("null interface");  }  myInterface=interfaceName;}  }
class C{  public synchronized OMGraphicList prepare(){  Projection projection=getProjection();  if (projection == null) {    return null;  }  if (tileFactory != null) {    return tileFactory.getTiles(projection,zoomLevel,new OMGraphicList());  }  return null;}  }
class C{  public long[] keys(){  long[] keys=new long[size()];  long[] k=_set;  Object[] values=_values;  for (int i=k.length, j=0; i-- > 0; ) {    if (isFull(values,i)) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public URI toURILenient() throws URISyntaxException {  if (streamHandler == null) {    throw new IllegalStateException(protocol);  }  return new URI(streamHandler.toExternalForm(this,true));}  }
class C{  protected void applyAttributesToSymbol(TacticalGraphicAttributes graphicAttributes,TacticalSymbolAttributes symbolAttributes){  Double value=graphicAttributes.getInteriorOpacity();  if (value != null) {    symbolAttributes.setOpacity(value);  }  Font font=graphicAttributes.getTextModifierFont();  if (font != null) {    symbolAttributes.setTextModifierFont(font);  }  Material material=graphicAttributes.getTextModifierMaterial();  if (material != null) {    symbolAttributes.setTextModifierMaterial(material);  }}  }
class C{  public void removeNetworkByID(int id){  networks.remove(id);}  }
class C{  public void drawFigure(Graphics2D g){  AffineTransform savedTransform=null;  if (get(TRANSFORM) != null) {    savedTransform=g.getTransform();    g.transform(get(TRANSFORM));  }  if (get(FILL_STYLE) != ODGConstants.FillStyle.NONE) {    Paint paint=ODGAttributeKeys.getFillPaint(this);    if (paint != null) {      g.setPaint(paint);      drawFill(g);    }  }  if (get(STROKE_STYLE) != ODGConstants.StrokeStyle.NONE) {    Paint paint=ODGAttributeKeys.getStrokePaint(this);    if (paint != null) {      g.setPaint(paint);      g.setStroke(ODGAttributeKeys.getStroke(this));      drawStroke(g);    }  }  if (get(TRANSFORM) != null) {    g.setTransform(savedTransform);  }}  }
class C{  private AttrRequests(final String val) throws BOSHException {  super(val);  checkMinValue(1);}  }
class C{  protected void checkNullOrEmptyQuery(String sql) throws SQLException {  if (sql == null) {    throw SQLError.createSQLException(Messages.getString("Statement.59"),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());  }  if (sql.length() == 0) {    throw SQLError.createSQLException(Messages.getString("Statement.61"),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());  }}  }
class C{  public static void closeInputStream(InputStream stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing InputStream." + e);    }  }}  }
class C{  public static Date startOfDay(Date dateInst){  if (dateInst == null) {    throw new IllegalArgumentException();  }  final Calendar cal=new GregorianCalendar();  cal.setTime(dateInst);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  return cal.getTime();}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  int size(){  return len;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:28.916 -0500",hash_original_method="9BAFED3979BE76875AB5C6D705EB5845",hash_generated_method="B0D28E477AE1051838EDCA4842E661F3") public boolean isValidKey(final int key){  if (!((key >= FIRST_PUBLIC_KEY) && (key <= LAST_PUBLIC_KEY)) && !((key >= FIRST_PRIVATE_KEY) && (key <= LAST_PRIVATE_KEY))) {    return false;  }  return true;}  }
class C{  private static String removeLeadingSlashPoints(String path){  while (path.startsWith("/..")) {    path=path.substring(3);  }  return path;}  }
class C{  public SingularValueDecomposition svd(){  return new SingularValueDecomposition(this);}  }
class C{  @Deprecated public static Date parseDate(String d) throws ParseException {  return DateUtil.parseDate(d);}  }
class C{  public ResponseSequenceServer(StunStack stunStack,TransportAddress bindAddress){  this.stunStack=stunStack;  this.serverAddress=bindAddress;}  }
class C{  public boolean startsWith(List<Rdn> rdns){  if (rdns == null) {    return false;  }  int len1=this.rdns.size();  int len2=rdns.size();  return (len1 >= len2 && doesListMatch(0,len2,rdns));}  }
class C{  protected void prepare(){  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals(I_C_SalesHistory.COLUMNNAME_AD_Org_ID))     p_AD_Org_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_DateInvoiced)) {      p_DateInvoicedFrom=(Timestamp)para.getParameter();      p_DateInvoicedTo=(Timestamp)para.getParameter_To();    } else     if (name.equals(I_C_SalesHistory.COLUMNNAME_C_BPartner_ID))     p_C_BPartner_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_C_BP_Group_ID))     p_C_BP_Group_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_C_BPartner_Location_ID))     p_C_BPartner_Location_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_M_Product_ID))     p_M_Product_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_M_Product_Category_ID))     p_M_Product_Category_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_M_Product_Classification_ID))     p_M_Product_Classification_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_M_Product_Class_ID))     p_M_Product_Class_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_M_Product_Group_ID))     p_M_Product_Group_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_M_Warehouse_ID))     p_M_Warehouse_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_C_Campaign_ID))     p_C_Campaign_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_C_SalesRegion_ID))     p_C_SalesRegion_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_C_Project_ID))     p_C_Project_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_C_Activity_ID))     p_C_Activity_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_User1_ID))     p_User1_ID=para.getParameterAsInt(); else     if (name.equals(I_C_SalesHistory.COLUMNNAME_User2_ID))     p_User2_ID=para.getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.526 -0500",hash_original_method="A106770FA0B10D144DFE1AE3A1F6A82D",hash_generated_method="FB4B56F381D8C7CF1378D43C73163DED") public TransformerFactoryConfigurationError(String msg){  super(msg);  this.exception=null;}  }
class C{  private void insertOrderList(Editable editable,MDOrderListSpan mdOrderListSpan,int start){  mRxMDEditText.removeTextChangedListener(mTextWatcher);  String appendString=getNestedString(mdOrderListSpan.getNested(),true,mdOrderListSpan.getNumber());  editable.insert(start + 1,appendString);  int position=EditUtils.findNextNewLineCharCompat(editable,start + appendString.length());  editable.setSpan(new MDOrderListSpan(10,mdOrderListSpan.getNested(),mdOrderListSpan.getNumber() + 1),start + 1,position == -1 ? start + 1 + appendString.length() : position,Spanned.SPAN_INCLUSIVE_INCLUSIVE);  mRxMDEditText.addTextChangedListener(mTextWatcher);}  }
class C{  public List<XingUser> sharedContacts(){  return sharedContacts;}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  private static boolean matchTrunkPrefix(String a,int len){  boolean found;  found=false;  for (int i=0; i < len; i++) {    char c=a.charAt(i);    if (c == '0' && !found) {      found=true;    } else     if (isNonSeparator(c)) {      return false;    }  }  return found;}  }
class C{  public boolean needsOffset(){  if (isEnabled() && isDrawLabelsEnabled() && getLabelPosition() == YAxisLabelPosition.OUTSIDE_CHART)   return true; else   return false;}  }
class C{  protected void drawCropGrid(@NonNull Canvas canvas){  if (mShowCropGrid) {    if (mGridPoints == null && !mCropViewRect.isEmpty()) {      mGridPoints=new float[(mCropGridRowCount) * 4 + (mCropGridColumnCount) * 4];      int index=0;      for (int i=0; i < mCropGridRowCount; i++) {        mGridPoints[index++]=mCropViewRect.left;        mGridPoints[index++]=(mCropViewRect.height() * (((float)i + 1.0f) / (float)(mCropGridRowCount + 1))) + mCropViewRect.top;        mGridPoints[index++]=mCropViewRect.right;        mGridPoints[index++]=(mCropViewRect.height() * (((float)i + 1.0f) / (float)(mCropGridRowCount + 1))) + mCropViewRect.top;      }      for (int i=0; i < mCropGridColumnCount; i++) {        mGridPoints[index++]=(mCropViewRect.width() * (((float)i + 1.0f) / (float)(mCropGridColumnCount + 1))) + mCropViewRect.left;        mGridPoints[index++]=mCropViewRect.top;        mGridPoints[index++]=(mCropViewRect.width() * (((float)i + 1.0f) / (float)(mCropGridColumnCount + 1))) + mCropViewRect.left;        mGridPoints[index++]=mCropViewRect.bottom;      }    }    if (mGridPoints != null) {      canvas.drawLines(mGridPoints,mCropGridPaint);    }  }  if (mShowCropFrame) {    canvas.drawRect(mCropViewRect,mCropFramePaint);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public <E extends Layout,AE extends Array2D<E>>GenArray2D(Class<E> elementInterfaceClass,Class<AE> userDefinedArrayClass){  elementInterfaceClassName=ImplHelper.getInterfaceClassName(elementInterfaceClass);  elementImplClassName=ImplHelper.getImplClassName(elementInterfaceClass);  if (null == userDefinedArrayClass) {    arrayImplClassName=ImplHelper.getArray2DClassImplName(elementInterfaceClass);    arrayInterfaceClassName="com/ibm/layout/Array2D";    arrayInterfaceClassSig="L" + arrayInterfaceClassName + "<L"+ elementInterfaceClassName+ ";>;";  } else {    arrayImplClassName=ImplHelper.getImplClassName(userDefinedArrayClass);    arrayInterfaceClassName=userDefinedArrayClass.getName().replace('.','/');    arrayInterfaceClassSig=null;  }  dbgPrintNames();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelisttraverselist.class,args);}  }
class C{  public static Attribute createTypeNameAttr(Class<?> cl){  Vector<String> v=new Vector<>(10);  String[] types=getTypeNames(cl,v);  if (types.length > 0) {    BasicAttribute tAttr=new BasicAttribute(Obj.JAVA_ATTRIBUTES[Obj.TYPENAME]);    for (int i=0; i < types.length; i++) {      tAttr.add(types[i]);    }    return tAttr;  }  return null;}  }
class C{  public static void checkMethodSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkChar('(',signature,pos);  while ("ZCBSIFJDL[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkTypeSignature(signature,pos);  }  pos=checkChar(')',signature,pos);  if (getChar(signature,pos) == 'V') {    ++pos;  } else {    pos=checkTypeSignature(signature,pos);  }  while (getChar(signature,pos) == '^') {    ++pos;    if (getChar(signature,pos) == 'L') {      pos=checkClassTypeSignature(signature,pos);    } else {      pos=checkTypeVariableSignature(signature,pos);    }  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearContent(){  content=null;  fieldSetFlags()[9]=false;  return this;}  }
class C{  public void initialise(int k,double kernelWidth) throws Exception {  this.kernelWidth=kernelWidth;  super.initialise(k);}  }
class C{  public boolean isTrinomial(){  return isTrinomial;}  }
class C{  private void incrementSubmittedJobCount(){  countLock.lock();  try {    submittedJobCount++;  }  finally {    countLock.unlock();  }}  }
class C{  private boolean freeMemorySizeForAddingCache(long requiredSize){  boolean memoryAvailable=false;  if (lruCacheMemorySize > 0) {    if (isSizeAvailableToLoadColumnDictionary(requiredSize)) {      memoryAvailable=true;    } else {synchronized (lruCacheMap) {        List<String> keysToBeRemoved=getKeysToBeRemoved(requiredSize);        for (        String cacheKey : keysToBeRemoved) {          removeKey(cacheKey);        }        if (isSizeAvailableToLoadColumnDictionary(requiredSize)) {          memoryAvailable=true;        }      }    }  } else {    memoryAvailable=true;  }  return memoryAvailable;}  }
class C{  public void testDisjointRemoveUnused(){  Instances result=null;  m_Instances.setClassIndex(2);  try {    result=applyFilter(new Filter[]{new AllFilter(),new AllFilter()},new Range[]{new Range("1-2"),new Range("5")},true);  } catch (  Exception e) {    fail("Problem applying the filter: " + e);  }  assertEquals(m_Instances.numInstances(),result.numInstances());  assertEquals(m_Instances.numAttributes() - 1,result.numAttributes());}  }
class C{  public Scroller(Context context,Interpolator interpolator,boolean flywheel){  mFinished=true;  mInterpolator=interpolator;  mPpi=context.getResources().getDisplayMetrics().density * 160.0f;  mDeceleration=computeDeceleration(ViewConfiguration.getScrollFriction());  mFlywheel=flywheel;  mPhysicalCoeff=computeDeceleration(0.84f);  mPm=(PowerManager)context.getSystemService(Context.POWER_SERVICE);}  }
class C{  private JDiffClassDescription loadClassInfo(XmlPullParser parser,boolean isInterface,String pkg){  String className=parser.getAttributeValue(null,ATTRIBUTE_NAME);  JDiffClassDescription currentClass=new JDiffClassDescription(pkg,className,mResultObserver);  currentClass.setModifier(jdiffModifierToReflectionFormat(className,parser));  currentClass.setType(isInterface ? JDiffClassDescription.JDiffType.INTERFACE : JDiffClassDescription.JDiffType.CLASS);  currentClass.setExtendsClass(parser.getAttributeValue(null,ATTRIBUTE_EXTENDS));  return currentClass;}  }
class C{  private void paintSelectionOk(){  parentDirectory.setBackground(Color.getColor("ECECEC"));  parentDirectoryLabel.setForeground(Color.BLACK);}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false).result == 0;}  }
class C{  public JavaDBStorageEngine(String name,ConnectionPoolDataSource dataSource) throws PersistException {  super();  this.name=name;  this.dbTableName=name.replace('.','_');  this.dataSource=dataSource;  try {    initTable();  } catch (  SQLException sqle) {    throw new PersistException("Could not initialize persistent storage",sqle);  }}  }
class C{  @Override public final void perform(IR ir){  lowerInstrumentation(ir);}  }
class C{  final public MutableString replace(final int start,int end,final MutableString s){  final int length=length();  if (end > length)   end=length;  if (start > end)   throw new StringIndexOutOfBoundsException();  final int l=s.length();  final int newLength=length + l - end + start;  if (l == 0 && newLength == length)   return this;  if (newLength >= length) {    expand(newLength);    System.arraycopy(array,end,array,start + l,length - end);    System.arraycopy(s.array,0,array,start,l);    hashLength=hashLength < 0 ? -1 : newLength;  } else {    System.arraycopy(array,end,array,start + l,length - end);    System.arraycopy(s.array,0,array,start,l);    if (hashLength < 0) {      setCapacity(newLength);      hashLength=-1;    } else     hashLength=newLength;  }  return this;}  }
class C{  private Zone makeZone(CIMInstance zoneInstance) throws WBEMException {  String name=cimStringProperty(zoneInstance,"ElementName");  Zone zn=new Zone(name);  zn.setCimObjectPath(zoneInstance.getObjectPath());  zn.setInstanceID(cimStringProperty(zoneInstance,"InstanceID"));  zn.setActive(cimBooleanProperty(zoneInstance,"Active"));  CloseableIterator<CIMInstance> zms=null;  try {    zms=_client.associatorInstances(((CIMObjectPath)zn.getCimObjectPath()),"CISCO_ElementSettingData","CISCO_ZoneMemberSettingData",null,null,false,null);    while (zms.hasNext()) {      CIMInstance zm=zms.next();      ZoneMember member=makeZoneMember(zm);      zn.getMembers().add(member);    }  }  finally {    if (zms != null) {      zms.close();    }  }  return zn;}  }
class C{  public String md5(String salt,String input){  String md5=null;  if (null == input) {    return null;  }  if (salt == null) {    return input;  } else {    input+=salt;  }  try {    MessageDigest digest=MessageDigest.getInstance("MD5");    digest.update(input.getBytes(),0,input.length());    md5=new BigInteger(1,digest.digest()).toString(16);  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }  return md5;}  }
class C{  void label(String s){  label=s;}  }
class C{  public void stem(){  k=i - 1;  if (k > 1) {    step1();    step2();    step3();    step4();    step5();    step6();  }  i_end=k + 1;  i=0;}  }
class C{  public void destroy(){  indexRepository.destroy();  tablePerMultiLookup.clear();  if (isVirtualDataWindow()) {    getVirtualDataWindow().handleStopWindow();  }}  }
class C{  private ServerBootstrap createServerBootStrap(){  if (floodlightProvider.getWorkerThreads() == 0) {    return new ServerBootstrap(new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool()));  } else {    return new ServerBootstrap(new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),Executors.newCachedThreadPool(),floodlightProvider.getWorkerThreads()));  }}  }
class C{  public void testClassificationRemoveNumeric(){  performTest(true,true,false,false,true);}  }
class C{  protected Object readResolve() throws ObjectStreamException {  return prj.events();}  }
class C{  public boolean isValid(VMwareHost host,VMPropertyHandler properties){  boolean result=host != null && host.isEnabled() && host.checkVmLimit() && host.checkCpuLimit(properties.getConfigCPUs()) && host.checkMemoryLimit(properties.getConfigMemoryMB());  if (logger.isDebugEnabled() && host != null) {    logger.debug("Checking isValid() for " + (host.isEnabled() ? "enabled" : "disabled") + " host "+ host.getName()+ " with limits "+ host.getLimitsAsString()+ " and allocation "+ host.getAllocationAsString());  }  return result;}  }
class C{  private static void usage(){  System.out.println("Usage: java IndexClient --username [user] " + "--password [pass] [--authors] [--worksheets] [--headers]");  System.out.println("\nA simple application that uses the provided Google\n" + "Account username and password to create\n" + "an index of the user's spreadsheets against\n"+ "the user's Google Spreadsheet account.\n");}  }
class C{  void opened(){  if (eventListener != null) {    eventListener.opened();  }  if (writer != null) {    writer.startThread();  }}  }
class C{  public void insertRow(int offset,Object... row){  data.add(offset,row);  for (int col=0; col < row.length; col++) {    dispatcher.fireDataChangeEvent(col,data.size() - 1);    dispatcher.fireDataChangeEvent(col,offset);  }}  }
class C{  public final CC endGroupY(String s){  ver.setEndGroup(s);  return this;}  }
class C{  public void makeNothingCurrent(){  if (!EGL14.eglMakeCurrent(mEGLDisplay,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_SURFACE,EGL14.EGL_NO_CONTEXT)) {    throw new RuntimeException("eglMakeCurrent failed");  }}  }
class C{  private void makeRowOriginal(Row row){  if (row.getInserted() == true) {    row.clearInserted();  }  if (row.getUpdated() == true) {    row.moveCurrentToOrig();  }}  }
class C{  public Builder delayBeforeLoading(int delayInMillis){  this.delayBeforeLoading=delayInMillis;  return this;}  }
class C{  public static void chooseProfile(Context context,int mode){  AudioManager audio=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);  if (mode == 0)   audio.setRingerMode(AudioManager.RINGER_MODE_SILENT); else   if (mode == 1)   audio.setRingerMode(AudioManager.RINGER_MODE_VIBRATE); else   if (mode == 2)   audio.setRingerMode(AudioManager.RINGER_MODE_NORMAL);}  }
class C{  public static String prettyFormat(DependencyGraph graph){  return prettyFormat(graph.getEdges());}  }
class C{  public int[] Gen_columnIndices(android.database.Cursor cursor){  int[] result=new int[GEN_COUNT];  result[0]=cursor.getColumnIndex(GEN_FIELD__ID);  if (result[0] == -1) {    result[0]=cursor.getColumnIndex("_ID");  }  result[1]=cursor.getColumnIndex(GEN_FIELD_NAME);  return result;}  }
class C{  private StringHelper(){}  }
class C{  private CStepOverHelper(){}  }
class C{  boolean isExternalStorageWritable(){  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(state)) {    return true;  }  return false;}  }
class C{  public final void reset(){  if (onSubstack > 0)   moveFromSubstack(onSubstack);  if (onStack > 0)   pop(onStack);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(StatementRegressionTest.class);}  }
class C{  public CompileContext clearExtra(String key){  extras.remove(key);  return this;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_OK))   dispose();}  }
class C{  public final MutableDouble2D add(final MutableDouble2D other1,final MutableDouble2D other2){  x=other1.x + other2.x;  y=other1.y + other2.y;  return this;}  }
class C{  public PutRepositoryRequest verify(boolean verify){  this.verify=verify;  return this;}  }
class C{  public void collectSubstitutes(Scope scope,TypeBinding actualType,InferenceContext inferenceContext,int constraint){  if ((this.tagBits & TagBits.HasTypeVariable) == 0)   return;  if (actualType == TypeBinding.NULL)   return;  if (actualType.isCapture()) {    CaptureBinding capture=(CaptureBinding)actualType;    actualType=capture.wildcard;  }switch (constraint) {case TypeConstants.CONSTRAINT_EXTENDS:switch (this.boundKind) {case Wildcard.UNBOUND:      break;case Wildcard.EXTENDS:switch (actualType.kind()) {case Binding.WILDCARD_TYPE:      WildcardBinding actualWildcard=(WildcardBinding)actualType;switch (actualWildcard.boundKind) {case Wildcard.UNBOUND:      break;case Wildcard.EXTENDS:    this.bound.collectSubstitutes(scope,actualWildcard.bound,inferenceContext,TypeConstants.CONSTRAINT_EXTENDS);  break;case Wildcard.SUPER:break;}break;case Binding.INTERSECTION_TYPE:WildcardBinding actualIntersection=(WildcardBinding)actualType;this.bound.collectSubstitutes(scope,actualIntersection.bound,inferenceContext,TypeConstants.CONSTRAINT_EXTENDS);for (int i=0, length=actualIntersection.otherBounds.length; i < length; i++) {this.bound.collectSubstitutes(scope,actualIntersection.otherBounds[i],inferenceContext,TypeConstants.CONSTRAINT_EXTENDS);}break;default :this.bound.collectSubstitutes(scope,actualType,inferenceContext,TypeConstants.CONSTRAINT_EXTENDS);break;}break;case Wildcard.SUPER:switch (actualType.kind()) {case Binding.WILDCARD_TYPE:WildcardBinding actualWildcard=(WildcardBinding)actualType;switch (actualWildcard.boundKind) {case Wildcard.UNBOUND:break;case Wildcard.EXTENDS:break;case Wildcard.SUPER:this.bound.collectSubstitutes(scope,actualWildcard.bound,inferenceContext,TypeConstants.CONSTRAINT_SUPER);for (int i=0, length=actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {this.bound.collectSubstitutes(scope,actualWildcard.otherBounds[i],inferenceContext,TypeConstants.CONSTRAINT_SUPER);}break;}break;case Binding.INTERSECTION_TYPE:break;default :this.bound.collectSubstitutes(scope,actualType,inferenceContext,TypeConstants.CONSTRAINT_SUPER);break;}break;}break;case TypeConstants.CONSTRAINT_EQUAL:switch (this.boundKind) {case Wildcard.UNBOUND:break;case Wildcard.EXTENDS:switch (actualType.kind()) {case Binding.WILDCARD_TYPE:WildcardBinding actualWildcard=(WildcardBinding)actualType;switch (actualWildcard.boundKind) {case Wildcard.UNBOUND:break;case Wildcard.EXTENDS:this.bound.collectSubstitutes(scope,actualWildcard.bound,inferenceContext,TypeConstants.CONSTRAINT_EQUAL);for (int i=0, length=actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {this.bound.collectSubstitutes(scope,actualWildcard.otherBounds[i],inferenceContext,TypeConstants.CONSTRAINT_EQUAL);}break;case Wildcard.SUPER:break;}break;case Binding.INTERSECTION_TYPE:WildcardBinding actuaIntersection=(WildcardBinding)actualType;this.bound.collectSubstitutes(scope,actuaIntersection.bound,inferenceContext,TypeConstants.CONSTRAINT_EQUAL);for (int i=0, length=actuaIntersection.otherBounds == null ? 0 : actuaIntersection.otherBounds.length; i < length; i++) {this.bound.collectSubstitutes(scope,actuaIntersection.otherBounds[i],inferenceContext,TypeConstants.CONSTRAINT_EQUAL);}break;default :break;}break;case Wildcard.SUPER:switch (actualType.kind()) {case Binding.WILDCARD_TYPE:WildcardBinding actualWildcard=(WildcardBinding)actualType;switch (actualWildcard.boundKind) {case Wildcard.UNBOUND:break;case Wildcard.EXTENDS:break;case Wildcard.SUPER:this.bound.collectSubstitutes(scope,actualWildcard.bound,inferenceContext,TypeConstants.CONSTRAINT_EQUAL);for (int i=0, length=actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {this.bound.collectSubstitutes(scope,actualWildcard.otherBounds[i],inferenceContext,TypeConstants.CONSTRAINT_EQUAL);}break;}break;case Binding.INTERSECTION_TYPE:break;default :break;}break;}break;case TypeConstants.CONSTRAINT_SUPER:switch (this.boundKind) {case Wildcard.UNBOUND:break;case Wildcard.EXTENDS:switch (actualType.kind()) {case Binding.WILDCARD_TYPE:WildcardBinding actualWildcard=(WildcardBinding)actualType;switch (actualWildcard.boundKind) {case Wildcard.UNBOUND:break;case Wildcard.EXTENDS:this.bound.collectSubstitutes(scope,actualWildcard.bound,inferenceContext,TypeConstants.CONSTRAINT_SUPER);for (int i=0, length=actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {this.bound.collectSubstitutes(scope,actualWildcard.otherBounds[i],inferenceContext,TypeConstants.CONSTRAINT_SUPER);}break;case Wildcard.SUPER:break;}break;case Binding.INTERSECTION_TYPE:WildcardBinding actualIntersection=(WildcardBinding)actualType;this.bound.collectSubstitutes(scope,actualIntersection.bound,inferenceContext,TypeConstants.CONSTRAINT_SUPER);for (int i=0, length=actualIntersection.otherBounds == null ? 0 : actualIntersection.otherBounds.length; i < length; i++) {this.bound.collectSubstitutes(scope,actualIntersection.otherBounds[i],inferenceContext,TypeConstants.CONSTRAINT_SUPER);}break;default :break;}break;case Wildcard.SUPER:switch (actualType.kind()) {case Binding.WILDCARD_TYPE:WildcardBinding actualWildcard=(WildcardBinding)actualType;switch (actualWildcard.boundKind) {case Wildcard.UNBOUND:break;case Wildcard.EXTENDS:break;case Wildcard.SUPER:this.bound.collectSubstitutes(scope,actualWildcard.bound,inferenceContext,TypeConstants.CONSTRAINT_SUPER);for (int i=0, length=actualWildcard.otherBounds == null ? 0 : actualWildcard.otherBounds.length; i < length; i++) {this.bound.collectSubstitutes(scope,actualWildcard.otherBounds[i],inferenceContext,TypeConstants.CONSTRAINT_SUPER);}break;}break;case Binding.INTERSECTION_TYPE:break;default :break;}break;}break;}}  }
class C{  private static boolean checkNullForMeasures(Object object){  Object[] measures=(Object[])object;  for (  Object measure : measures) {    if (null != measure) {      return false;    }  }  return true;}  }
class C{  @Nullable public GridCacheMvccCandidate recheck(){  GridCacheMvccCandidate prev=null;  GridCacheMvccCandidate owner=null;synchronized (this) {    GridCacheMvcc mvcc=mvccExtras();    if (mvcc != null) {      prev=mvcc.localOwner();      owner=mvcc.recheck();      if (mvcc.isEmpty())       mvccExtras(null);    }  }  checkOwnerChanged(prev,owner);  return owner;}  }
class C{  @Override public IForumPoster doClone(){  final AxisAndAlliesForumPoster clone=new AxisAndAlliesForumPoster();  clone.setTopicId(getTopicId());  clone.setIncludeSaveGame(getIncludeSaveGame());  clone.setAlsoPostAfterCombatMove(getAlsoPostAfterCombatMove());  clone.setPassword(getPassword());  clone.setUsername(getUsername());  return clone;}  }
class C{  public static ResultSet optimizeInJoinSelect(){  SimpleResultSet rs=new SimpleResultSet();  rs.addColumn("X",Types.INTEGER,0,0);  rs.addRow(1);  return rs;}  }
class C{  private Map<URI,List<URI>> convertAssignmentsToURIs(Map<Initiator,List<StoragePort>> assignments){  HashMap<URI,List<URI>> assignmentMap=new HashMap<URI,List<URI>>();  for (  Initiator initiator : assignments.keySet()) {    URI key=initiator.getId();    if (assignmentMap.get(key) == null) {      assignmentMap.put(key,new ArrayList<URI>());    }    for (    StoragePort port : assignments.get(initiator)) {      assignmentMap.get(key).add(port.getId());    }  }  return assignmentMap;}  }
class C{  public void v(Object str){  if (debug) {    if (logLevel <= Log.VERBOSE) {      String name=getFunctionName();      if (name != null) {        Log.v(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.v(tag,str.toString());      }    }  }}  }
class C{  public static GpsTrailerCrypt instance(int userDataKeyId){  GpsTrailerCrypt crypt=userDataKeyIdToGpsCrypt.get(userDataKeyId);  if (crypt == null) {    Cursor c=GTG.db.rawQuery("select encrypted_key from user_data_key where _id = ?",new String[]{String.valueOf(userDataKeyId)});    try {      c.moveToNext();      byte[] encryptedSymKey=c.getBlob(0);      Cipher cipher=Cipher.getInstance(INTERNAL_ASYMMETRIC_ENCRYPTION_ALGORITHM);      cipher.init(Cipher.DECRYPT_MODE,privateKey);      byte[] symKey=cipher.doFinal(encryptedSymKey);      crypt=new GpsTrailerCrypt(userDataKeyId,symKey);      userDataKeyIdToGpsCrypt.put(userDataKeyId,crypt);    } catch (    Exception e) {      throw new IllegalStateException(e);    } finally {      DbUtil.closeCursors(c);    }  }  return crypt;}  }
class C{  public synchronized long deleteDocuments(String id) throws IOException {  assert buffer.getFilePointer() == 0;  buffer.writeByte(OP_DELETE_DOCUMENTS);  buffer.writeString(id);  return flushBuffer();}  }
class C{  public void testPingPong2xMtu(){  PseudoTcpTestPingPong test=new PseudoTcpTestPingPong();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.doTestPingPong(2000,5);}  }
class C{  public static void printExceptionTable(int[] eTable){  writeExceptionTableHeader();  int length=eTable.length;  for (int i=0; i < length; i+=4) {    printNicelyFormattedAndInterruptible(eTable,i);  }}  }
class C{  @Override public Element store(Object o){  Element signalheads=new Element("signalheads");  setStoreElementClass(signalheads);  SignalHeadManager sm=(SignalHeadManager)o;  if (sm != null) {    java.util.Iterator<String> iter=sm.getSystemNameList().iterator();    if (!iter.hasNext()) {      return null;    }    while (iter.hasNext()) {      String sname=iter.next();      if (sname == null) {        log.error("System name null during store, skipped");        continue;      }      log.debug("system name is " + sname);      SignalHead sub=sm.getBySystemName(sname);      try {        Element e=jmri.configurexml.ConfigXmlManager.elementFromObject(sub);        if (e != null) {          signalheads.addContent(e);        }      } catch (      Exception e) {        log.error("Error storing signalhead: {}",e,e);      }    }  }  return signalheads;}  }
class C{  private JDiffMethod loadMethodInfo(String className,XmlPullParser parser){  String methodName=parser.getAttributeValue(null,ATTRIBUTE_NAME);  String returnType=parser.getAttributeValue(null,ATTRIBUTE_RETURN);  int modifier=jdiffModifierToReflectionFormat(className,parser);  return new JDiffMethod(methodName,modifier,returnType);}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    AverageTrueRangeItem dataItem=(AverageTrueRangeItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Value: "+ dataItem.getAverageTrueRange());  }}  }
class C{  public GenericFastItemAdapter<Model,Item> moveModel(int fromPosition,int toPosition){  mItemAdapter.moveModel(fromPosition,toPosition);  return this;}  }
class C{  public UnsignedByte inc(){  return valueOf(getValue() + 1);}  }
class C{  static public JComponent buttonSpace(){  return _buttonSpace;}  }
class C{  private static void sendRegistrationMessageToServers(Instantiator instantiator){  PoolManagerImpl.allPoolsRegisterInstantiator(instantiator);}  }
class C{  public void popLimit(final int oldLimit){  currentLimit=oldLimit;  recomputeBufferSizeAfterLimit();}  }
class C{  public Observable<Boolean> checkIsRateLimited(){  return api.ratelimited().map(null).onErrorResumeNext(null);}  }
class C{  private void popStack(){  stack[stackSize - 1]=0;  stackSize--;  pathNames[stackSize]=null;  pathIndices[stackSize - 1]++;}  }
class C{  public CachedRowSet createCopyNoConstraints() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public static boolean isSpokenLanguageRFC5646Compliant(String rfc5646SpokenLanguage){  if (rfc5646SpokenLanguage != null) {    Matcher matcher=buildRegExpLangRFC5646().matcher(rfc5646SpokenLanguage);    return matcher.find();  }  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getMethodBody_();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static Reader newReader(ReadableByteChannel channel,CharsetDecoder decoder,int minBufferCapacity){  return new InputStreamReader(new ChannelInputStream(channel),decoder);}  }
class C{  public GroupedInspector(Object[] objects,Object extraObject,GUIState state,String name,String title,String[] groupNames){  if (objects == null)   throw new RuntimeException("Objects array provided is null.");  Properties[] properties=new SimpleProperties[objects.length];  Properties extraProperties=null;  if (extraObject != null)   extraProperties=Properties.getProperties(extraObject);  for (int i=0; i < objects.length; i++)   properties[i]=Properties.getProperties(objects[i]);  buildGroupedInspector(properties,extraProperties,state,name,title,groupNames);}  }
class C{  protected void checkRequiredExtensions(ExtensionManifest profManifest) throws ParseException {  for (  ExtensionDescription extDescription : profManifest.supportedExtensions.values()) {    if (extDescription.isRequired()) {      Class<? extends Extension> extClass=extDescription.getExtensionClass();      boolean found=(extDescription.isRepeatable() ? repeatingExtensionMap.containsKey(extClass) : nonRepeatingExtensionMap.containsKey(extClass));      if (!found) {        ParseException pe=new ParseException(CoreErrorDomain.ERR.missingExtensionElement);        pe.setInternalReason("Required extension element " + extDescription.getNamespace().getUri() + ":"+ extDescription.getLocalName()+ " not found.");        throw pe;      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.511 -0500",hash_original_method="719D5AC424353622F8A42BB3C1E4F44E",hash_generated_method="451CAA38DBF27903306940840A4BB714") public static SmsMessageBase.TextEncodingDetails countGsmSeptets(CharSequence s,boolean use7bitOnly){  if (sEnabledSingleShiftTables.length + sEnabledLockingShiftTables.length == 0) {    SmsMessageBase.TextEncodingDetails ted=new SmsMessageBase.TextEncodingDetails();    int septets=GsmAlphabet.countGsmSeptetsUsingTables(s,use7bitOnly,0,0);    if (septets == -1) {      return null;    }    ted.codeUnitSize=ENCODING_7BIT;    ted.codeUnitCount=septets;    if (septets > MAX_USER_DATA_SEPTETS) {      ted.msgCount=(septets + (MAX_USER_DATA_SEPTETS_WITH_HEADER - 1)) / MAX_USER_DATA_SEPTETS_WITH_HEADER;      ted.codeUnitsRemaining=(ted.msgCount * MAX_USER_DATA_SEPTETS_WITH_HEADER) - septets;    } else {      ted.msgCount=1;      ted.codeUnitsRemaining=MAX_USER_DATA_SEPTETS - septets;    }    ted.codeUnitSize=ENCODING_7BIT;    return ted;  }  int maxSingleShiftCode=sHighestEnabledSingleShiftCode;  List<LanguagePairCount> lpcList=new ArrayList<LanguagePairCount>(sEnabledLockingShiftTables.length + 1);  lpcList.add(new LanguagePairCount(0));  for (  int i : sEnabledLockingShiftTables) {    if (i != 0 && !sLanguageTables[i].isEmpty()) {      lpcList.add(new LanguagePairCount(i));    }  }  int sz=s.length();  for (int i=0; i < sz && !lpcList.isEmpty(); i++) {    char c=s.charAt(i);    if (c == GSM_EXTENDED_ESCAPE) {      Log.w(TAG,"countGsmSeptets() string contains Escape character, ignoring!");      continue;    }    for (    LanguagePairCount lpc : lpcList) {      int tableIndex=sCharsToGsmTables[lpc.languageCode].get(c,-1);      if (tableIndex == -1) {        for (int table=0; table <= maxSingleShiftCode; table++) {          if (lpc.septetCounts[table] != -1) {            int shiftTableIndex=sCharsToShiftTables[table].get(c,-1);            if (shiftTableIndex == -1) {              if (use7bitOnly) {                lpc.septetCounts[table]++;                lpc.unencodableCounts[table]++;              } else {                lpc.septetCounts[table]=-1;              }            } else {              lpc.septetCounts[table]+=2;            }          }        }      } else {        for (int table=0; table <= maxSingleShiftCode; table++) {          if (lpc.septetCounts[table] != -1) {            lpc.septetCounts[table]++;          }        }      }    }  }  SmsMessageBase.TextEncodingDetails ted=new SmsMessageBase.TextEncodingDetails();  ted.msgCount=Integer.MAX_VALUE;  ted.codeUnitSize=ENCODING_7BIT;  int minUnencodableCount=Integer.MAX_VALUE;  for (  LanguagePairCount lpc : lpcList) {    for (int shiftTable=0; shiftTable <= maxSingleShiftCode; shiftTable++) {      int septets=lpc.septetCounts[shiftTable];      if (septets == -1) {        continue;      }      int udhLength;      if (lpc.languageCode != 0 && shiftTable != 0) {        udhLength=UDH_SEPTET_COST_LENGTH + UDH_SEPTET_COST_TWO_SHIFT_TABLES;      } else       if (lpc.languageCode != 0 || shiftTable != 0) {        udhLength=UDH_SEPTET_COST_LENGTH + UDH_SEPTET_COST_ONE_SHIFT_TABLE;      } else {        udhLength=0;      }      int msgCount;      int septetsRemaining;      if (septets + udhLength > MAX_USER_DATA_SEPTETS) {        if (udhLength == 0) {          udhLength=UDH_SEPTET_COST_LENGTH;        }        udhLength+=UDH_SEPTET_COST_CONCATENATED_MESSAGE;        int septetsPerMessage=MAX_USER_DATA_SEPTETS - udhLength;        msgCount=(septets + septetsPerMessage - 1) / septetsPerMessage;        septetsRemaining=(msgCount * septetsPerMessage) - septets;      } else {        msgCount=1;        septetsRemaining=MAX_USER_DATA_SEPTETS - udhLength - septets;      }      int unencodableCount=lpc.unencodableCounts[shiftTable];      if (use7bitOnly && unencodableCount > minUnencodableCount) {        continue;      }      if ((use7bitOnly && unencodableCount < minUnencodableCount) || msgCount < ted.msgCount || (msgCount == ted.msgCount && septetsRemaining > ted.codeUnitsRemaining)) {        minUnencodableCount=unencodableCount;        ted.msgCount=msgCount;        ted.codeUnitCount=septets;        ted.codeUnitsRemaining=septetsRemaining;        ted.languageTable=lpc.languageCode;        ted.languageShiftTable=shiftTable;      }    }  }  if (ted.msgCount == Integer.MAX_VALUE) {    return null;  }  return ted;}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public static RecordEventForInstanceResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  RecordEventForInstanceResponse object=new RecordEventForInstanceResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"recordEventForInstanceResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (RecordEventForInstanceResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void render(final Writer w) throws IOException {  final HistoryTable t=pt.src;{    w.write(t.units + "\t");    w.write("timestamp\t");    for (    String s : pt.cnames) {      w.write(s + "\t");    }    for (    String s : pt.vcols) {      w.write(s + "\t");    }    w.write("\n");  }  for (int row=0; row < t.nrows; row++) {    final long timestamp=t.getTimestamp(row);    final String unitStr=XHTMLRenderer.cdata(formatter.unitsFormat.format(((double)timestamp - t.getTimestamp(0)) / t.period));    final String timeStr=XHTMLRenderer.cdata(formatter.date(timestamp));    for (    CSet cset : pt.csets) {      assert cset.cats.length == pt.cnames.length : "cset categories=" + Arrays.toString(cset.cats) + " vs "+ "category names: "+ Arrays.toString(pt.cnames);      final Double[] vals=new Double[pt.vcols.size()];      int ndefined=0;      int valueColumnIndex=0;      for (      String vcol : pt.vcols) {        int valueCountForColumn=0;        double val=0d;        for (        ICounter c : cset.counters) {          if (!c.getName().equals(vcol)) {            continue;          }          for (int col=0; col < t.a.length; col++) {            if (c != t.a[col])             continue;            final IHistoryEntry e=t.data[row][col];            if (e == null) {              continue;            }            val+=((Number)e.getValue()).doubleValue();            valueCountForColumn++;            break;          }        }        if (valueCountForColumn > 0) {          vals[valueColumnIndex]=val;          ndefined++;        }        if (log.isDebugEnabled() && valueCountForColumn > 0)         log.debug("vcol=" + vcol + ", vcol#="+ valueColumnIndex+ ", #values="+ valueCountForColumn+ ", val="+ val);        valueColumnIndex++;      }      if (ndefined == 0) {        continue;      }      w.write(unitStr + "\t");      w.write(timeStr + "\t");      for (int j=0; j < pt.cnames.length; j++) {        w.write(cset.cats[j] + "\t");      }      for (int j=0; j < vals.length; j++) {        final String s=vals[j] == null ? "" : Double.toString(vals[j]);        w.write(s + "\t");      }      w.write("\n");    }  }}  }
class C{  public HessianException(Throwable rootCause){  super(rootCause);}  }
class C{  void writeDataToFileLocked(RandomAccessFile file,boolean addMayo,boolean addTomato,int whichFilling) throws IOException {  file.setLength(0L);  file.writeInt(whichFilling);  file.writeBoolean(addMayo);  file.writeBoolean(addTomato);  Log.v(TAG,"NEW STATE: mayo=" + addMayo + " tomato="+ addTomato+ " filling="+ whichFilling);}  }
class C{  final long now(){  return System.nanoTime();}  }
class C{  public MinProjectionExpression(boolean isDistinct){  this.distinct=isDistinct;}  }
class C{  public PendingChangeCacheEvent(final PendingChangeCache cache,final PendingChange oldPendingChange,final PendingChange pendingChange){  super(cache);  this.oldPendingChange=oldPendingChange;  this.pendingChange=pendingChange;}  }
class C{  public void testBulkRegister1(){  try {    new Phaser().bulkRegister(-1);    shouldThrow();  } catch (  IllegalArgumentException success) {  }}  }
class C{  public void test_compressed_timestamp_02a() throws Exception {  new TestHelper("compressed-timestamp-02a","compressed-timestamp-02a.rq","compressed-timestamp.ttl","compressed-timestamp-02.srx").runTest();}  }
class C{  public SQLTransientConnectionException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public FieldRefConstant(ConstantPool pool,int index,int classIndex,int nameAndTypeIndex){  super(pool,index);  _classIndex=classIndex;  _nameAndTypeIndex=nameAndTypeIndex;}  }
class C{  @Override public Map<String,Runnable> handleMenu(final String data,final int x,final int y){  return null;}  }
class C{  public void onSaveInstanceState(Bundle outState){  if (outState != null) {    if (mResultCode != null) {      outState.putInt(DATA_RESULT_CODE,mResultCode);    }    if (mResultData != null) {      outState.putBundle(DATA_RESULT_BUNDLE,mResultData);    }  }}  }
class C{  protected void syncSummaryView(PreferenceViewHolder holder){  View view=holder.findViewById(android.R.id.summary);  syncSummaryView(view);}  }
class C{  private void computeLRDs(KNNQuery<O> knnq,DBIDs ids,WritableDoubleDataStore lrds){  FiniteProgress lrdsProgress=LOG.isVerbose() ? new FiniteProgress("Local Reachability Densities (LRD)",ids.size(),LOG) : null;  double lrd;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    lrd=computeLRD(knnq,iter);    lrds.putDouble(iter,lrd);    LOG.incrementProcessed(lrdsProgress);  }  LOG.ensureCompleted(lrdsProgress);}  }
class C{  public static long byteArrayToLong(final byte[] src,final int srcPos,final long dstInit,final int dstPos,final int nBytes){  if ((src.length == 0 && srcPos == 0) || 0 == nBytes) {    return dstInit;  }  if ((nBytes - 1) * 8 + dstPos >= 64) {    throw new IllegalArgumentException("(nBytes-1)*8+dstPos is greather or equal to than 64");  }  long out=dstInit;  int shift=0;  for (int i=0; i < nBytes; i++) {    shift=i * 8 + dstPos;    final long bits=(0xffL & src[i + srcPos]) << shift;    final long mask=0xffL << shift;    out=(out & ~mask) | bits;  }  return out;}  }
class C{  public void tagFile(String textFile){  for (  String line : ObjectBank.getLineIterator(new File(textFile))) {    line=line.replaceAll("$"," ");    line=line + Tagger.EOS_WORD;    IString[] in=IStrings.toIStringArray(line.split("\\s+"));    for (int i=0; i < in.length - 1; ++i) {      int from=Math.max(0,i - leftWindow);      int to=Math.min(i + 1 + rightWindow,in.length);      int offset=-rightWindow;      IString[] seq=new IString[to - from];      System.arraycopy(in,from,seq,0,seq.length);      Pair<IString,Float> tag=getBestTag(seq);      if (i > 0)       System.out.print(" ");      int loc=seq.length - 1 + offset;      System.out.print(seq[loc]);      System.out.print("/");      System.out.print(tag.first.toString());    }    System.out.print("\n");  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isSetMyints(){  return this.myints != null;}  }
class C{  public static SetExpression contains(String propertyName,Object value){  return contains(propertyName,new Object[]{value});}  }
class C{  public void rebootSolr(){synchronized (this.solrInstances) {    this.disconnectLocalSolr();    this.solrInstances=new InstanceMirror();    try {      this.connectLocalSolr();    } catch (    final IOException e) {      ConcurrentLog.logException(e);    }  }}  }
class C{  public void test_default_graph_joins_01f() throws Exception {  if (!store.isQuads())   return;  new TestHelper("default-graph-joins-01f","default-graph-joins-01f.rq","default-graph-joins-01.trig","default-graph-joins-01f.srx").runTest();}  }
class C{  private void loadEvents() throws XMLStreamException {  if (!xmlEventReader.hasNext()) {    done=true;    return;  }  XMLEvent event=xmlEventReader.nextEvent();  event=eventTransformer.transform(event);  xmlWriteStream.reset();  xmlEventWriter.add(event);  xmlEventWriter.flush();  xmlInStream=new ByteArrayInputStream(xmlWriteStream.toByteArray());}  }
class C{  public SubjectKeyIdentifier(SubjectPublicKeyInfo spki){  this.keyidentifier=getDigest(spki);}  }
class C{  String capitalise(final String s){  if (s.length() == 0) {    return s;  }  final StringBuffer s1=new StringBuffer(s);  if (Character.isLowerCase(s1.charAt(0))) {    s1.setCharAt(0,Character.toUpperCase(s1.charAt(0)));  }  for (int j=1; j < s1.length(); j++) {    if (Character.isUpperCase(s1.charAt(j))) {      s1.setCharAt(j,Character.toLowerCase(s1.charAt(j)));    }  }  return s1.toString();}  }
class C{  public SVGPlot(){  super();  DOMImplementation domImpl=getDomImpl();  DocumentType dt=domImpl.createDocumentType(SVGConstants.SVG_SVG_TAG,SVGConstants.SVG_PUBLIC_ID,SVGConstants.SVG_SYSTEM_ID);  if (dt.getName() == null) {    dt=null;  }  document=(SVGDocument)domImpl.createDocument(SVGConstants.SVG_NAMESPACE_URI,SVGConstants.SVG_SVG_TAG,dt);  root=document.getDocumentElement();  root.setAttribute(SVGConstants.XMLNS_PREFIX,SVGConstants.SVG_NAMESPACE_URI);  root.setAttributeNS(SVGConstants.XMLNS_NAMESPACE_URI,SVGConstants.XMLNS_PREFIX + ":" + SVGConstants.XLINK_PREFIX,SVGConstants.XLINK_NAMESPACE_URI);  defs=svgElement(SVGConstants.SVG_DEFS_TAG);  root.appendChild(defs);  style=SVGUtil.makeStyleElement(document);  root.appendChild(style);  cssman=new CSSClassManager();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void paintBorderEnabled(Graphics2D g,int width,int height){  Shape s;  s=shapeGenerator.createRoundRectangle(0,0,width - 1,height - 1,CornerSize.BORDER);  g.setPaint(borderColor);  g.draw(s);}  }
class C{  int writeString(String s,int offset){  return writeBytes(s.getBytes(),offset);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(6);  newVector.addElement(new Option("\tTreat missing values as a separate " + "value.","M",0,"-M"));  newVector.addElement(new Option("\tDon't include locally predictive attributes" + ".","L",0,"-L"));  newVector.addElement(new Option("\t" + preComputeCorrelationMatrixTipText(),"Z",0,"-Z"));  newVector.addElement(new Option("\t" + poolSizeTipText() + " (default 1)\n","P",1,"-P <int>"));  newVector.addElement(new Option("\t" + numThreadsTipText() + " (default 1)\n","E",1,"-E <int>"));  newVector.addElement(new Option("\tOutput debugging info" + ".","D",0,"-D"));  return newVector.elements();}  }
class C{  public void removeListener(){  mOutput.removeListener();}  }
class C{  private void stop(final boolean scheduleShutdown){  if (D)   LOG.info("Stopping playback, scheduleShutdown = " + scheduleShutdown);  stopPlayer();  mFileToPlay=null;  closeCursor();  if (scheduleShutdown) {    scheduleDelayedShutdown();    mIsSupposedToBePlaying=false;    updateRemoteControlClient(PLAYSTATE_STOPPED);  } else {    stopForeground(false);  }}  }
class C{  private boolean isItalic(AttributedCharacterIterator ati){  Object attr=ati.getAttribute(TextAttribute.POSTURE);  if (TextAttribute.POSTURE_OBLIQUE.equals(attr))   return true;  return false;}  }
class C{  public LanguageTranslation(){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }}  }
class C{  public void actionPerformed(ActionEvent e){  FileDialog chooser=new FileDialog(StdDraw.frame,"Use a .png or .jpg extension",FileDialog.SAVE);  chooser.setVisible(true);  String filename=chooser.getFile();  if (filename != null) {    StdDraw.save(chooser.getDirectory() + File.separator + chooser.getFile());  }}  }
class C{  public static String formatMs(long milliseconds){  if (milliseconds < 0) {    return "--:--";  }  long seconds=(milliseconds % DateUtils.MINUTE_IN_MILLIS) / DateUtils.SECOND_IN_MILLIS;  long minutes=(milliseconds % DateUtils.HOUR_IN_MILLIS) / DateUtils.MINUTE_IN_MILLIS;  long hours=(milliseconds % DateUtils.DAY_IN_MILLIS) / DateUtils.HOUR_IN_MILLIS;  formatBuilder.setLength(0);  if (hours > 0) {    return formatter.format("%d:%02d:%02d",hours,minutes,seconds).toString();  }  return formatter.format("%02d:%02d",minutes,seconds).toString();}  }
class C{  public FloatDict(int length){  count=0;  keys=new String[length];  values=new float[length];}  }
class C{  public static File toSLDFile(final File file){  final String path=file.getAbsolutePath();  final String base=path.substring(0,path.length() - 4);  String newPath=base + ".sld";  File sld=new File(newPath);  if (sld.exists()) {    return sld;  }  newPath=base + ".SLD";  sld=new File(newPath);  if (sld.exists()) {    return sld;  }  return null;}  }
class C{  public boolean exists(MonKey key){  return map.containsKey(key);}  }
class C{  public float screenX(float x,float y,float z){  showMissingWarning("screenX");  return 0;}  }
class C{  @Override public Void doTask() throws Exception {  final String[] resource=getResource();  final IIndex[] indices=new IIndex[resource.length];  final Thread t=Thread.currentThread();  try {    for (int i=0; i < resource.length; i++) {      final String name=resource[i];      final Thread other=btrees.putIfAbsent(name,t);      if (other != null) {        log.error("Unisolated index already in use: " + resource[i]);        throw new AssertionError("Unisolated index already in use: " + resource[i] + ", currentThread="+ t+ ", otherThread="+ other);      }      indices[i]=getJournal().getIndex(name);    }    for (int i=0; i < nops; i++) {      final IIndex ndx=indices[i % resource.length];      final byte[] key=new byte[keyLen];      r.nextBytes(key);      if (r.nextInt(100) > 10) {        final byte[] val=new byte[5];        r.nextBytes(val);        ndx.insert(key,val);      } else {        ndx.remove(key);      }    }    if (r.nextDouble() < failureRate) {      throw new SpuriousException();    }    return null;  }  finally {    for (int i=0; i < resource.length; i++) {      if (indices[i] != null) {        final String name=resource[i];        final Thread tmp=btrees.remove(name);        if (tmp != t) {          throw new AssertionError("Index associated with another thread? index=" + name + ", currentThread="+ t+ ", otherThread="+ tmp);        }      }    }  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.positivePaint,stream);  SerialUtilities.writePaint(this.negativePaint,stream);  SerialUtilities.writeShape(this.legendLine,stream);}  }
class C{  public String toString(){  return "CommmandAPDU: " + apdu.length + " bytes, nc="+ nc+ ", ne="+ ne;}  }
class C{  public ServiceHelper scheme(String scheme){  Preconditions.checkArgument(SCHEME_RE.matcher(scheme).matches(),"Illegal scheme format in " + scheme + " (no not include ://)");  this.scheme=scheme;  return this;}  }
class C{  public static final void drawArc(GL2 gl,double cx,double cy,double r,double sa,double aa){  double t;  double x=r;  double y=0;  t=x;  x=Math.cos(sa) * x - Math.sin(sa) * y;  y=Math.sin(sa) * t + Math.cos(sa) * y;  double sign=Math.signum(aa);  double cos=COS;  double sin=sign >= 0 ? SIN : -SIN;  gl.glBegin(GL.GL_LINE_STRIP);  for (int i=0; i < N; i++) {    gl.glVertex2d(x + cx,y + cy);    t=x;    x=cos * x - sin * y;    y=sin * t + cos * y;    if (Math.abs(cos * i) >= Math.abs(aa))     break;  }  gl.glEnd();}  }
class C{  public void increaseLineSpacing(int percent){  int delta=(lineheight * percent) / 100;  lineheight=lineheight + delta;  lineascent=lineascent + delta;  lines_per_page=height / lineheight;}  }
class C{  public ContactQuery(URL feedUrl){  super(feedUrl);}  }
class C{  public Boolean isSnapshotUri(){  return snapshotUri;}  }
class C{  public void flush(MemBufferHolder<NonVolatileMemAllocator> mbuf){  m_nvmasvc.flush(m_nid,getBufferAddress(mbuf),0L,true);}  }
class C{  private void initializeButtons(){  nextSource=new JButton(">");  previousSource=new JButton("<");  informationButton=new JButton("More Information");  nextSource.addActionListener(null);  previousSource.addActionListener(null);  informationButton.addActionListener(null);}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public void runUntilSuccessful(RetryableTask task){  boolean maxSleepIntervalHit=false;  int numAttempts=0;  while (true) {    try {      task.run();      return;    } catch (    Exception e) {      int sleepTime;      if (maxSleepIntervalHit) {        sleepTime=maxSleepInterval;      } else {        sleepTime=baseSleepInterval * (int)Math.pow(2,numAttempts);        if (sleepTime > maxSleepInterval) {          sleepTime=maxSleepInterval;          maxSleepIntervalHit=true;        }      }      LOG.error("Got an exception! Sleeping for " + sleepTime + " seconds and retrying.",e);      try {        Thread.sleep(sleepTime * 1000);      } catch (      InterruptedException ie) {        LOG.error("Unexpected interruption!",ie);      }    }    numAttempts++;  }}  }
class C{  public long skip(long n) throws IOException {  if (n < 0) {    throw new IllegalArgumentException("negative skip length");  }  ensureOpen();  int max=(int)Math.min(n,Integer.MAX_VALUE);  int total=0;  while (total < max) {    int len=max - total;    if (len > tmpbuf.length) {      len=tmpbuf.length;    }    len=read(tmpbuf,0,len);    if (len == -1) {      entryEOF=true;      break;    }    total+=len;  }  return total;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.INLINE_STATE_MACHINE___QUEUED_1:    return queued_1 != QUEUED_1_EDEFAULT;case UmplePackage.INLINE_STATE_MACHINE___NAME_1:  return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.INLINE_STATE_MACHINE___ANONYMOUS_INLINE_STATE_MACHINE_11:return anonymous_inlineStateMachine_1_1 != null && !anonymous_inlineStateMachine_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.260 -0500",hash_original_method="957E1FEE267AF2EB4B4A609321166001",hash_generated_method="6CE7CA93B49D4E548EC58C3E38AED7C2") private void autoLogin(String realm,String account,String args){  mCallbackProxy.onReceivedLoginRequest(realm,account,args);}  }
class C{  @Override public LifecycleListener[] findLifecycleListeners(){  return this.lifecycle.findLifecycleListeners();}  }
class C{  public double logMarginalLikelihoodArithmetic(List<Double> v){  int size=v.size();  double sum=LogTricks.logZero;  for (int i=0; i < size; i++) {    if (!Double.isNaN(v.get(i)) && !Double.isInfinite(v.get(i))) {      sum=LogTricks.logSum(sum,v.get(i));    } else {      size--;    }  }  return sum - StrictMath.log(size);}  }
class C{  public void clearHeaderCache(){  mHeaderCache.clear();}  }
class C{  public static ActiveMQBuffer fixedBuffer(final int size){  return new ChannelBufferWrapper(Unpooled.buffer(size,size));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:36.645 -0500",hash_original_method="267F1EA9E96531D86D40818D686262D8",hash_generated_method="5288DA0CB42918DD18AA147B00D6674B") private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  if (resourceBundleName != null) {    try {      rb=ResourceBundle.getBundle(resourceBundleName);    } catch (    MissingResourceException e) {      rb=null;    }  }}  }
class C{  public <T>T read(T value,InputNode node,boolean strict) throws Exception {  Session session=manager.open(strict);  try {    return read(value,node,session);  }  finally {    manager.close();  }}  }
class C{  public static XMLObjectReader newInstance(InputStream in) throws XMLStreamException {  XMLObjectReader reader=new XMLObjectReader();  reader.setInput(in);  return reader;}  }
class C{  public static int[] transformIntArray(Integer[] source){  int[] destin=new int[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  private boolean isProductCategoryField(int columnId){  X_AD_Column col=new X_AD_Column(Env.getCtx(),columnId,null);  if (col.get_ID() == 0) {    return false;  }  return MProduct.COLUMNNAME_M_Product_Category_ID.equals(col.getColumnName());}  }
class C{  public SolrInstance(String name,Integer port){  this.name=name;  this.port=port;}  }
class C{  HttpParameter[] asPostParameterArray(final char[] supportedParams,final String perPageParamName){  final List<HttpParameter> pagingParams=new ArrayList<HttpParameter>(supportedParams.length);  addPostParameter(supportedParams,'s',pagingParams,"since_id",getSinceId());  addPostParameter(supportedParams,'m',pagingParams,"max_id",getMaxId());  addPostParameter(supportedParams,'c',pagingParams,perPageParamName,getCount());  addPostParameter(supportedParams,'p',pagingParams,"page",getPage());  if (pagingParams.size() == 0)   return NULL_PARAMETER_ARRAY; else   return pagingParams.toArray(new HttpParameter[pagingParams.size()]);}  }
class C{  @Override public DriverTask createVolumeClone(List<VolumeClone> clones,StorageCapabilities capabilities){  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_CREATE_CLONE_VOLUMES);  return cloneHelper.createVolumeClone(clones,capabilities,task,this.driverRegistry);}  }
class C{  public static ExpressionParser parse(String expr) throws ParsiiInvalidException, ParseException {  if (expr == null)   throw new IllegalStateException("Expression to parse is null");synchronized (_exprParserCache) {    ExpressionParser parser=_exprParserCache.get(expr);    if (parser == null) {      parser=new ExpressionParser(expr);      _exprParserCache.put(expr,parser);    }    return parser;  }}  }
class C{  @Override public void start() throws IgniteCheckedException {  if (log.isDebugEnabled())   log.debug("Session processor started.");}  }
class C{  public AbLevelView(Context context){  super(context);}  }
class C{  public static ClassLoader overrideThreadContextClassLoader(ClassLoader classLoaderToUse){  Thread currentThread=Thread.currentThread();  ClassLoader threadContextClassLoader=currentThread.getContextClassLoader();  if (classLoaderToUse != null && !classLoaderToUse.equals(threadContextClassLoader)) {    currentThread.setContextClassLoader(classLoaderToUse);    return threadContextClassLoader;  } else {    return null;  }}  }
class C{  public OrganizationAuthoritiesException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public VariableDelayStrategy(final Supplier<Integer> delaySupplier,final int maxDelays){  super(maxDelays);  this.delaySupplier=delaySupplier;}  }
class C{  void collectNamespacePrefixesOnPath(Set<String> prefixes){  Map<String,String> nsDeclarations=getNamespaceDeclarations();  if (nsDeclarations != null) {    for (    String prefix : nsDeclarations.keySet()) {      prefixes.add(prefix);    }  }  if (parent != null) {    parent.collectNamespacePrefixesOnPath(prefixes);  }}  }
class C{  public void populateTableData(final Target selectedTarget){  target=selectedTarget;  refreshContainer();}  }
class C{  public static OMText read(DataInputStream dis) throws IOException {  return read(dis,null);}  }
class C{  public static void copyRecursive(Resource src,Resource trg) throws IOException {  copyRecursive(src,trg,null);}  }
class C{  public void addHistogram(Histogram other){  for (int i=0; i < other.getLength(); i++) {    increment(i,other.getValue(i));  }}  }
class C{  public void test_shuffleLjava_util_ListLjava_util_Random(){  try {    Collections.shuffle(null,new Random(200));    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  ArrayList al=new ArrayList();  al.addAll(ll);  testShuffle(al,"Sequential Access",true);  LinkedList ll2=new LinkedList();  ll2.addAll(ll);  testShuffle(ll2,"Random Access",true);  Mock_ArrayList mal=new Mock_ArrayList();  mal.add("First");  mal.add("Second");  try {    Collections.shuffle(mal,new Random(200));    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  @Override public Set<String> keys(final String pattern){  checkIsInMultiOrPipeline();  client.keys(pattern);  return BuilderFactory.STRING_SET.build(client.getBinaryMultiBulkReply());}  }
class C{  public double sample(final PixelMatrix pixelMatrix){  if (pixelMatrix == null) {    throw new IllegalArgumentException("pixelMatrix must not be null");  }  Image image=pixelMatrix.view(receptiveField);  BufferedImage bufferedImage=toBufferedImage(image);  sample=filter.filter(bufferedImage);  return sample;}  }
class C{  public boolean isLOS(LatLonPoint startLLP,int startObjHeight,boolean addStartElevation,LatLonPoint endLLP,int endObjHeight,int numPoints){  boolean ret=false;  if (logger.isLoggable(Level.FINE)) {    logger.fine("LOSGenerator.isLOS: " + startLLP + " at height:"+ startObjHeight+ ", "+ endLLP+ " at height:"+ endObjHeight+ ", numPoints = "+ numPoints);  }  if (dtedCache == null) {    return ret;  }  int startTotalHeight=startObjHeight + (addStartElevation ? dtedCache.getElevation((float)startLLP.getLatitude(),(float)startLLP.getLongitude()) : 0);  double[] llpoints=GreatCircle.greatCircle(startLLP.getRadLat(),startLLP.getRadLon(),endLLP.getRadLat(),endLLP.getRadLon(),numPoints,true);  LatLonPoint llp=new LatLonPoint.Double();  int gcPointListSize=llpoints.length;  double smallestSlopeValue=-Math.PI;  for (int i=4; i < gcPointListSize; i+=2) {    llp.setLatLon(llpoints[i],llpoints[i + 1],true);    int heightAboveGround=0;    if (i >= gcPointListSize - 2) {      heightAboveGround=endObjHeight;    }    double slopeOfCurrentPoint=calculateLOSSlope(startLLP,startTotalHeight,llp,heightAboveGround);    if (slopeOfCurrentPoint > smallestSlopeValue) {      smallestSlopeValue=slopeOfCurrentPoint;      ret=true;    } else {      ret=false;    }    if (logger.isLoggable(Level.FINER)) {      logger.finer("   LOS:" + (i / 2) + " - slope = "+ Length.DECIMAL_DEGREE.fromRadians(slopeOfCurrentPoint)+ " at height of point: "+ heightAboveGround+ (ret ? " *" : " -"));    }  }  if (logger.isLoggable(Level.FINE)) {    logger.fine("LOSGenerator - points " + (ret ? "" : " NOT ") + " in LOS");  }  return ret;}  }
class C{  @SuppressWarnings("IfMayBeConditional") public static String nodeIdLogFileName(UUID nodeId,String fileName){  assert nodeId != null;  assert fileName != null;  fileName=GridFilenameUtils.separatorsToSystem(fileName);  int dot=fileName.lastIndexOf('.');  if (dot < 0 || dot == fileName.length() - 1)   return fileName + '-' + U.id8(nodeId); else   return fileName.substring(0,dot) + '-' + U.id8(nodeId)+ fileName.substring(dot);}  }
class C{  public static void normalizeGeographicCoordinates(DoubleBuffer buffer){  if (buffer == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if ((buffer.remaining() % 2) != 0) {    String message=Logging.getMessage("generic.BufferSize",buffer.remaining());    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  while (buffer.hasRemaining()) {    buffer.mark();    Angle lon=Angle.fromDegrees(buffer.get());    Angle lat=Angle.fromDegrees(buffer.get());    buffer.reset();    buffer.put(Angle.normalizedLongitude(lon).degrees);    buffer.put(Angle.normalizedLatitude(lat).degrees);  }}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  private static int lastUnescapedIndexOf(@NotNull String s,int from,char c){  int result=from;  do {    result=s.lastIndexOf(c,result - 1);  } while (result != -1 && !isUnescaped(s,result,c));  return result;}  }
class C{  public void clearOpciones(){  opciones.clear();}  }
class C{  public void restoreState(String stateInXml){  if (stateInXml == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    super.restoreState(stateInXml);  } catch (  Exception e) {  }  RestorableSupport restorableSupport;  try {    restorableSupport=RestorableSupport.parse(stateInXml);  } catch (  Exception e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseStateXml",stateInXml);    Logging.logger().severe(message);    throw new IllegalArgumentException(message,e);  }  Double xFractionRS=restorableSupport.getStateValueAsDouble("xFraction");  if (xFractionRS != null)   this.setXFraction(xFractionRS);  Double yFractionRS=restorableSupport.getStateValueAsDouble("yFraction");  if (xFractionRS != null)   this.setYFraction(yFractionRS);  Integer xMarginRS=restorableSupport.getStateValueAsInteger("xMargin");  if (xFractionRS != null)   this.setXMargin(xMarginRS);  Integer yMarginRS=restorableSupport.getStateValueAsInteger("yMargin");  if (xFractionRS != null)   this.setYMargin(yMarginRS);  Boolean keepVisibleRS=restorableSupport.getStateValueAsBoolean("keepFullyVisible");  if (keepVisibleRS != null)   this.setKeepFullyVisible(keepVisibleRS);}  }
class C{  protected boolean validateTableRow(final int rowIndex){  final MemberTableRowData row=members.getModel().getRow(members.convertRowIndexToModel(rowIndex));  return (!row.getName().isEmpty() && row.getBaseType() != null);}  }
class C{  private void init(){}  }
class C{  public static Distribution guessR(DataSet d){  return new LogUniform(1,1e5);}  }
class C{  public String sqlMetadata_indexColumns(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_indexColumns(catalogName,schemaName);}  }
class C{  private void addToPanel(FlowPanel panel,Action action,PresentationFactory presentationFactory){  Presentation presentation=presentationFactory.getPresentation(action);  if (action instanceof Separator) {    panel.add(new SeparatorItem(resources.menuCss().panelSeparator()));  } else   if (action instanceof CustomComponentAction) {    CustomComponentAction customComponentAction=(CustomComponentAction)action;    Widget component=customComponentAction.createCustomComponent(presentation);    component.addStyleName(resources.menuCss().customComponent());    panel.add(component);  }}  }
class C{  private String loadParentInformation(CnATreeElement element,String parentInformation){  if (element.getParentId() != null) {    CnATreeElement parent=getDao().retrieve(element.getParentId(),RetrieveInfo.getPropertyInstance());    if (!isTopLevelElement(parent)) {      StringBuilder sb=new StringBuilder(parent.getTitle());      if (parentInformation != null && !parentInformation.isEmpty()) {        sb.append(" > ").append(parentInformation);      }      parentInformation=sb.toString();      parentInformation=loadParentInformation(parent,parentInformation);    }  }  return parentInformation;}  }
class C{  public SAXNotRecognizedException(String message){  super(message);}  }
class C{  public int addValue(CharSequence value){  return add(value,bloom,bloomSeeds,bloomMask);}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getDeviceDBDao() : null;}  }
class C{  public List<Node> findMb(String targetName){  TetradLogger.getInstance().log("info","target = " + targetName);  numIndTests=0;  long time=System.currentTimeMillis();  pc=new HashMap<>();  trimmed=new HashSet<>();  Node target=getVariableForName(targetName);  List<Node> nodes=mmmb(target);  long time2=System.currentTimeMillis() - time;  TetradLogger.getInstance().log("info","Number of seconds: " + (time2 / 1000.0));  TetradLogger.getInstance().log("info","Number of independence tests performed: " + numIndTests);  return nodes;}  }
class C{  public void close() throws IOException {  owner.close();}  }
class C{  public void addSpam(Reader stream) throws java.io.IOException {  addTokenOccurrences(stream,spamTokenCounts);  spamMessageCount++;}  }
class C{  @SuppressWarnings("unused") @Test @Ignore("HotSpot CHA doesn't treat default methods like regular methods") public void testDefault(){  Subclass2 s=new Subclass2();  testConstantReturn("runDefault",1);}  }
class C{  public boolean insert_null_checks(){  return soot.PhaseOptions.getBoolean(options,"insert-null-checks");}  }
class C{  public void write(ResourceBundle i18n,String key) throws IOException {  write(getString(i18n,key));}  }
class C{  public boolean onOverrideUrlLoading(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null && plugin.onOverrideUrlLoading(url)) {      return true;    }  }  return false;}  }
class C{  public static AC parseRowConstraints(String s){  return parseAxisConstraint(s,false);}  }
class C{  @SuppressWarnings("unchecked") public void restore(String fileName) throws IOException, ClassNotFoundException {  ObjectInputStream ois=new ObjectInputStream(new FileInputStream(fileName));  locations=(Map<V,Point>)ois.readObject();  ois.close();  initializeLocations();  locked=true;  fireStateChanged();}  }
class C{  public static void registerInterest(){  try {    Cache cacheClient=GemFireCacheImpl.getInstance();    Region region1=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME1);    Region region2=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME2);    Region region3=cacheClient.getRegion(Region.SEPARATOR + REGION_NAME3);    assertTrue(region1 != null);    assertTrue(region2 != null);    assertTrue(region3 != null);    region1.registerInterest("ALL_KEYS",InterestResultPolicy.KEYS_VALUES,false,true);    region2.registerInterest("ALL_KEYS",InterestResultPolicy.KEYS_VALUES,false,false);  } catch (  CacheWriterException e) {    fail("test failed due to " + e);  }}  }
class C{  public int length(){  return count;}  }
class C{  public void await() throws InterruptedException {  synchronizer.await();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean readFromFile(){  return readFromFile(FILENAME);}  }
class C{  public Map<Log,List<StackTraceGraph>> makeTraceGraph(String basePackage,Page<Log> reportPage){  Map<Log,List<StackTraceGraph>> graphs=new HashMap<>();  for (  Log log : reportPage.getContent()) {    graphs.put(log,makeTraceGraph(basePackage,log));  }  return graphs;}  }
class C{  static Source newSource(byte[] abc,String name,long fileTime,VirtualFile pathRoot,String relativePath,String shortName,Object owner,boolean isInternal,boolean isRoot,boolean isDebuggable,Set<VirtualFile> includes,Map<VirtualFile,Long> includeTimes,LocalLogger logger){  VirtualFile f=new InMemoryFile(abc,name,MimeMappings.ABC,fileTime);  return newSource(f,fileTime,pathRoot,relativePath,shortName,owner,isInternal,isRoot,isDebuggable,includes,includeTimes,logger);}  }
class C{  public static List<CompositeMethodDetailDescriptor> findState(CompositeDetailDescriptor descriptor){  return new StateFinder().findState(descriptor);}  }
class C{  public String toString(){  return this.m00 + ", " + this.m01+ ", "+ this.m02+ "\n"+ this.m10+ ", "+ this.m11+ ", "+ this.m12+ "\n"+ this.m20+ ", "+ this.m21+ ", "+ this.m22+ "\n";}  }
class C{  public void updateSecurity(String id,short setting,short file,Resource[] fileAccess,short directJavaAccess,short mail,short datasource,short mapping,short remote,short customTag,short cfxSetting,short cfxUsage,short debugging,short search,short scheduledTasks,short tagExecute,short tagImport,short tagObject,short tagRegistry,short cache,short gateway,short orm,short accessRead,short accessWrite) throws SecurityException, ApplicationException {  checkWriteAccess();  if (!(config instanceof ConfigServer))   throw new SecurityException("can't change security settings from this context");  Element security=_getRootElement("security");  Element[] children=XMLConfigWebFactory.getChildren(security,"accessor");  Element accessor=null;  for (int i=0; i < children.length; i++) {    if (id.equals(children[i].getAttribute("id"))) {      accessor=children[i];    }  }  if (accessor == null)   throw new ApplicationException("there is noc Security Manager for id [" + id + "]");  updateSecurityFileAccess(accessor,fileAccess,file);  accessor.setAttribute("setting",SecurityManagerImpl.toStringAccessValue(setting));  accessor.setAttribute("file",SecurityManagerImpl.toStringAccessValue(file));  accessor.setAttribute("direct_java_access",SecurityManagerImpl.toStringAccessValue(directJavaAccess));  accessor.setAttribute("mail",SecurityManagerImpl.toStringAccessValue(mail));  accessor.setAttribute("datasource",SecurityManagerImpl.toStringAccessValue(datasource));  accessor.setAttribute("mapping",SecurityManagerImpl.toStringAccessValue(mapping));  accessor.setAttribute("remote",SecurityManagerImpl.toStringAccessValue(remote));  accessor.setAttribute("custom_tag",SecurityManagerImpl.toStringAccessValue(customTag));  accessor.setAttribute("cfx_setting",SecurityManagerImpl.toStringAccessValue(cfxSetting));  accessor.setAttribute("cfx_usage",SecurityManagerImpl.toStringAccessValue(cfxUsage));  accessor.setAttribute("debugging",SecurityManagerImpl.toStringAccessValue(debugging));  accessor.setAttribute("search",SecurityManagerImpl.toStringAccessValue(search));  accessor.setAttribute("scheduled_task",SecurityManagerImpl.toStringAccessValue(scheduledTasks));  accessor.setAttribute("cache",SecurityManagerImpl.toStringAccessValue(cache));  accessor.setAttribute("gateway",SecurityManagerImpl.toStringAccessValue(gateway));  accessor.setAttribute("orm",SecurityManagerImpl.toStringAccessValue(orm));  accessor.setAttribute("tag_execute",SecurityManagerImpl.toStringAccessValue(tagExecute));  accessor.setAttribute("tag_import",SecurityManagerImpl.toStringAccessValue(tagImport));  accessor.setAttribute("tag_object",SecurityManagerImpl.toStringAccessValue(tagObject));  accessor.setAttribute("tag_registry",SecurityManagerImpl.toStringAccessValue(tagRegistry));  accessor.setAttribute("access_read",SecurityManagerImpl.toStringAccessRWValue(accessRead));  accessor.setAttribute("access_write",SecurityManagerImpl.toStringAccessRWValue(accessWrite));}  }
class C{  public void startAutoScroll(int duration,int position){  this.mScrollPeriod=duration;  if (this.getAdapter() instanceof AutoScrollPagerAdapter<?>) {    this.mBeginIndex=position + 10000 * ((AutoScrollPagerAdapter<?>)this.getAdapter()).getCountReal();  } else {    this.mBeginIndex=position + 10000 * this.getAdapter().getCount();  }  this.mAutoScrollable=true;  this.setCurrentItem(mBeginIndex);  mHandler.removeCallbacks(mScrollRunnable);  mHandler.postDelayed(mScrollRunnable,mScrollPeriod);}  }
class C{  public void open(){  this.createContents();  this.shell.open();  this.shell.layout();  Display display=this.getParent().getDisplay();  while (!this.shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }}  }
class C{  public void myMethod(){  return "";}  }
class C{  public int value(){  int index=0;  if ((char)getElement(index) == 'C') {    index=5;  } else   if ((char)getElement(index) == 'V') {    index=2;  } else {    log.warn("Did not find recognizable format: " + this.toString());  }  String s1="" + (char)getElement(index);  String s2="" + (char)getElement(index + 1);  int val=-1;  try {    int sum=Integer.valueOf(s2,16).intValue();    sum+=16 * Integer.valueOf(s1,16).intValue();    val=sum;  } catch (  Exception e) {    log.error("Unable to get number from reply: \"" + s1 + s2+ "\" index: "+ index+ " message: \""+ toString()+ "\"");  }  return val;}  }
class C{  protected FinalizableWeakReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  public boolean isValueQuoted(){  return isQuotedString;}  }
class C{  public void initialize(final BSFManager mgr,String lang,Vector declaredBeans) throws BSFException {  super.initialize(mgr,lang,declaredBeans);  ClassLoader parent=mgr.getClassLoader();  if (parent == null)   parent=GroovyShell.class.getClassLoader();  setLoader(mgr,parent);  execScripts=new HashMap<Object,Class>();  evalScripts=new HashMap<Object,Class>();  context=shell.getContext();  context.setVariable("bsf",new BSFFunctions(mgr,this));  int size=declaredBeans.size();  for (int i=0; i < size; i++) {    declareBean((BSFDeclaredBean)declaredBeans.elementAt(i));  }}  }
class C{  public static void serializeShort(short val,byte[] buffer,MutableInt offset){  int offsetInt=offset.intValue();  buffer[0 + offsetInt]=(byte)((val >> 8) & 0xFF);  buffer[1 + offsetInt]=(byte)(val & 0xFF);  offset.add(Type.SHORT.getByteSize());}  }
class C{  private void initialize(){  boolean descripcionGeneral=true;  if ((tipoFicha == TipoFicha.FICHA_UDOCRE) && (udoc != null)) {    transferencias.vos.UnidadDocumentalVO udocRE=(transferencias.vos.UnidadDocumentalVO)udoc;    if (Constants.TRUE_STRING.equals(udocRE.getValidada())) {      this.listaValores=udocRE.getExtraInfo().getListaValoresDescripcion();      descripcionGeneral=false;    }  } else {    if ((tipoFicha == TipoFicha.FICHA_UDOCFS) && (udoc != null)) {      UDocEnFraccionSerieVO udocFS=(UDocEnFraccionSerieVO)udoc;      if (Constants.TRUE_STRING.equals(udocFS.getValidada())) {        this.listaValores=udocFS.getXinfo().getListaValoresDescripcion();        descripcionGeneral=false;      }    }  }  if (descripcionGeneral) {    loadShortTextValues();    loadLongTextValues();    loadNumericValues();    loadDateValues();    loadReferenceValues();  }}  }
class C{  public void addConstituent(Constituent constituent){  constituents.add(constituent);  startSpan=Math.min(this.startSpan,constituent.getStartSpan());  endSpan=Math.max(this.endSpan,constituent.getEndSpan());  if (startSpan >= 0 && endSpan >= 0) {    for (int token=constituent.getStartSpan(); token < constituent.getEndSpan(); token++) {      this.addTokenToConstituentMapping(token,constituent);    }  }}  }
class C{  private void removeAllHotkeys(){  removeHotkeys(main.getRootPane());  for (  JDialog popout : popouts.keySet()) {    removeHotkeys(popout.getRootPane());  }  removeGlobalHotkeys();  removeHotkeysFromActions();}  }
class C{  public Period negated(){  return multipliedBy(-1);}  }
class C{  private byte[][] minMaxIPs(byte[] ip1,byte[] subnetmask1,byte[] ip2,byte[] subnetmask2){  int ipLength=ip1.length;  byte[] min1=new byte[ipLength];  byte[] max1=new byte[ipLength];  byte[] min2=new byte[ipLength];  byte[] max2=new byte[ipLength];  for (int i=0; i < ipLength; i++) {    min1[i]=(byte)(ip1[i] & subnetmask1[i]);    max1[i]=(byte)(ip1[i] & subnetmask1[i] | ~subnetmask1[i]);    min2[i]=(byte)(ip2[i] & subnetmask2[i]);    max2[i]=(byte)(ip2[i] & subnetmask2[i] | ~subnetmask2[i]);  }  return new byte[][]{min1,max1,min2,max2};}  }
class C{  public static LogSystem createLogSystem(RuntimeServices rsvc) throws Exception {  Object o=rsvc.getProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM);  if (o != null && o instanceof LogSystem) {    ((LogSystem)o).init(rsvc);    return (LogSystem)o;  }  List classes=null;  Object obj=rsvc.getProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS);  if (obj instanceof List) {    classes=(List)obj;  } else   if (obj instanceof String) {    classes=new ArrayList();    classes.add(obj);  }  for (Iterator ii=classes.iterator(); ii.hasNext(); ) {    String claz=(String)ii.next();    if (claz != null && claz.length() > 0) {      rsvc.info("Trying to use logger class " + claz);      try {        o=Class.forName(claz).newInstance();        if (o instanceof LogSystem) {          ((LogSystem)o).init(rsvc);          rsvc.info("Using logger class " + claz);          return (LogSystem)o;        } else {          rsvc.error("The specifid logger class " + claz + " isn't a valid LogSystem");        }      } catch (      NoClassDefFoundError ncdfe) {        rsvc.debug("Couldn't find class " + claz + " or necessary supporting classes in "+ "classpath. Exception : "+ ncdfe);      }    }  }  LogSystem als=null;  try {    als=new AvalonLogSystem();    als.init(rsvc);  } catch (  NoClassDefFoundError ncdfe) {    String errstr="PANIC : Velocity cannot find any of the" + " specified or default logging systems in the classpath," + " or the classpath doesn't contain the necessary classes"+ " to support them."+ " Please consult the documentation regarding logging."+ " Exception : "+ ncdfe;    System.out.println(errstr);    System.err.println(errstr);    throw ncdfe;  }  rsvc.info("Using AvalonLogSystem as logger of final resort.");  return als;}  }
class C{  @Override public void onTokenRefresh(){  Intent intent=new Intent(this,RegistrationIntentService.class);  startService(intent);}  }
class C{  @Inline @Entrypoint public static void objectArrayWrite(Object[] ref,int index,Object value){  if (NEEDS_OBJECT_GC_WRITE_BARRIER) {    ObjectReference array=ObjectReference.fromObject(ref);    Offset offset=Offset.fromIntZeroExtend(index << LOG_BYTES_IN_ADDRESS);    Selected.Mutator.get().objectReferenceWrite(array,array.toAddress().plus(offset),ObjectReference.fromObject(value),offset.toWord(),Word.zero(),ARRAY_ELEMENT);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public boolean filterRequest(int bucketId,String shardId) throws InterruptedException {  if (globalLock != null) {    trace("[{}] Request blocked by global lock",gondola.getHostId());    globalLock.await();    return true;  }  CountDownLatch shardLock=shardLocks.get(shardId);  if (shardLock != null) {    trace("[{}] Request blocked by shard lock - shardId={}",gondola.getHostId(),shardId);    shardLock.await();    return true;  }  List<CountDownLatch> bucketLocks=getBucketLocks(bucketId);  boolean blocked=false;  if (bucketLocks.size() != 0) {    for (    CountDownLatch bucketLock : bucketLocks) {      trace("[{}] Request blocked by bucket lock - bucketId={}",gondola.getHostId(),bucketId);      bucketLock.await();      blocked=true;    }  }  return blocked;}  }
class C{  public static String format(final long millis,final String pattern,final TimeZone timeZone,final Locale locale){  return format(new Date(millis),pattern,timeZone,locale);}  }
class C{  public void destroy(){  ((PApplet)this).exit();}  }
class C{  public ECDSASignature toCanonicalised(){  if (!isCanonical()) {    return new ECDSASignature(r,CURVE.getN().subtract(s));  } else {    return this;  }}  }
class C{  public Rect updateFastScrollerBounds(int lastTouchY){  mInvalidateRect.set(mBgBounds);  if (isVisible()) {    int edgePadding=mRv.getMaxScrollbarWidth();    int bgPadding=(mBgOriginalSize - mTextBounds.height()) / 2;    int bgHeight=mBgOriginalSize;    int bgWidth=Math.max(mBgOriginalSize,mTextBounds.width() + (2 * bgPadding));    if (Utilities.isRtl(mRes)) {      mBgBounds.left=mRv.getBackgroundPadding().left + (2 * mRv.getMaxScrollbarWidth());      mBgBounds.right=mBgBounds.left + bgWidth;    } else {      mBgBounds.right=mRv.getWidth() - mRv.getBackgroundPadding().right - (2 * mRv.getMaxScrollbarWidth());      mBgBounds.left=mBgBounds.right - bgWidth;    }    mBgBounds.top=lastTouchY - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight);    mBgBounds.top=Math.max(edgePadding,Math.min(mBgBounds.top,mRv.getHeight() - edgePadding - bgHeight));    mBgBounds.bottom=mBgBounds.top + bgHeight;  } else {    mBgBounds.setEmpty();  }  mInvalidateRect.union(mBgBounds);  return mInvalidateRect;}  }
class C{  @Override protected void checkForLimitedOrNoAccess(){  if (this.requiresReliabilityCheck && this.isMissingRequiredRoles) {    if (getMembershipAttributes().getLossAction().isNoAccess() || getMembershipAttributes().getLossAction().isLimitedAccess()) {synchronized (this.missingRequiredRoles) {        if (!this.isMissingRequiredRoles)         return;        Set roles=Collections.unmodifiableSet(new HashSet(this.missingRequiredRoles));        Assert.assertTrue(!roles.isEmpty());        throw new RegionAccessException(LocalizedStrings.DistributedRegion_OPERATION_IS_DISALLOWED_BY_LOSSACTION_0_BECAUSE_THESE_REQUIRED_ROLES_ARE_MISSING_1.toLocalizedString(new Object[]{getMembershipAttributes().getLossAction(),roles}),getFullPath(),roles);      }    }  }}  }
class C{  public final int indexOf(Object elem){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public String stopwordsHandlerTipText(){  return "The stopwords handler to use (Null means no stopwords are used).";}  }
class C{  public Container(int id,int userId,double mips,int numberOfPes,int ram,long bw,long size,String containerManager,ContainerCloudletScheduler containerCloudletScheduler,double schedulingInterval){  setWorkloadMips(mips);  setId(id);  setUserId(userId);  setUid(getUid(userId,id));  setMips(mips);  setNumberOfPes(numberOfPes);  setRam(ram);  setBw(bw);  setSize(size);  setContainerManager(containerManager);  setContainerCloudletScheduler(containerCloudletScheduler);  setInMigration(false);  setBeingInstantiated(true);  setCurrentAllocatedBw(0);  setCurrentAllocatedMips(null);  setCurrentAllocatedRam(0);  setCurrentAllocatedSize(0);  setSchedulingInterval(schedulingInterval);}  }
class C{  public Iterator<Key> iterator(){  return new MyIterator();}  }
class C{  public static long readQwordBigEndian(final byte[] data,final int offset){  return ((data[offset + 0] & 0xFFL) * 0x100 * 0x100* 0x100* 0x100* 0x100* 0x100* 0x100) + ((data[offset + 1] & 0xFFL) * 0x100 * 0x100* 0x100* 0x100* 0x100* 0x100) + ((data[offset + 2] & 0xFFL) * 0x100 * 0x100* 0x100* 0x100* 0x100)+ ((data[offset + 3] & 0xFFL) * 0x100 * 0x100* 0x100* 0x100)+ ((data[offset + 4] & 0xFFL) * 0x100 * 0x100* 0x100)+ ((data[offset + 5] & 0xFFL) * 0x100 * 0x100)+ ((data[offset + 6] & 0xFFL) * 0x100)+ (data[offset + 7] & 0xFFL);}  }
class C{  public void displayVersion(PrintStream out){  out.println("WildFly Swarm version UNKNOWN");}  }
class C{  GridMemcachedMessage(GridMemcachedMessage req){  assert req != null;  reqFlag=req.reqFlag;  opCode=req.opCode;  opaque=new byte[req.opaque.length];  U.arrayCopy(req.opaque,0,opaque,0,req.opaque.length);}  }
class C{  public Graph2D convert(final Collection<INaviViewNode> nodes,final Collection<INaviEdge> edges,final ZyGraphViewSettings graphSettings,final boolean adjustColors) throws LoadCancelledException {  Preconditions.checkNotNull(nodes,"IE00905: View can not be null");  Preconditions.checkNotNull(edges,"IE00906: Edges argument can not be null");  if (!m_loadReporter.report(GraphBuilderEvents.Started)) {    throw new LoadCancelledException();  }  m_loadReporter.start();  final Graph2D graph2D=new Graph2D();  final HierarchyManager hierarchyManager=new HierarchyManager(graph2D);  graph2D.setHierarchyManager(hierarchyManager);  hierarchyManager.addHierarchyListener(new GroupNodeRealizer.StateChangeListener());  checkCancellation(GraphBuilderEvents.InitializedGraph);  final HashMap<INaviViewNode,Node> rawNodeToNodeMap=new HashMap<INaviViewNode,Node>();  convertNodes(nodes,graph2D,rawNodeToNodeMap,graphSettings);  checkCancellation(GraphBuilderEvents.ConvertedNodes);  convertEdges(edges,graph2D,rawNodeToNodeMap,adjustColors);  checkCancellation(GraphBuilderEvents.ConvertedEdges);  setupGroupNodes(nodes,graph2D,rawNodeToNodeMap);  checkCancellation(GraphBuilderEvents.CreatedGroupNodes);  checkCancellation(GraphBuilderEvents.Finished);  return graph2D;}  }
class C{  @Produces(value="application/json") @Timed(name="node-registration") @POST public NodeRegistrationResponse registerNode(final NodeRegistrationRequest request){  if (request == null)   return new NodeRegistrationResponse("",NodeRegistrationState.MISSING_REQUEST,"Missing request body carrying required node information");  return this.nodeManager.registerNode(request.getProtocol(),request.getHost(),request.getServicePort(),request.getAdminPort());}  }
class C{  protected int widestDim(double[][] nodeRanges,double[][] universe){  final int classIdx=m_Instances.classIndex();  double widest=0.0;  int w=-1;  if (m_NormalizeNodeWidth) {    for (int i=0; i < nodeRanges.length; i++) {      double newWidest=nodeRanges[i][WIDTH] / universe[i][WIDTH];      if (newWidest > widest) {        if (i == classIdx)         continue;        widest=newWidest;        w=i;      }    }  } else {    for (int i=0; i < nodeRanges.length; i++) {      if (nodeRanges[i][WIDTH] > widest) {        if (i == classIdx)         continue;        widest=nodeRanges[i][WIDTH];        w=i;      }    }  }  return w;}  }
class C{  @Override public void endWindow(){  if (dval == 0) {    return;  }  double val=(nval / dval) * mult_by;  quotient.emit(getValue(val));  nval=0.0;  dval=0.0;}  }
class C{  public IndicesAliasesRequestBuilder addAliasAction(AliasActions action){  request.addAliasAction(action);  return this;}  }
class C{  public IValueExpression<? extends IV> left(){  return get(0);}  }
class C{  public Jerry append(String html){  final Document doc=builder.parse(html);  for (  Node node : nodes) {    Document workingDoc=doc.clone();    node.addChild(workingDoc.getChildNodes());  }  return this;}  }
class C{  public HyperbolicShapeTransformer(Component component,MutableTransformer delegate){  super(component,delegate);}  }
class C{  public void updateImages(){  parsedCommands=commands.size();  for (Iterator i=renderers.values().iterator(); i.hasNext(); ) {    WeakReference ref=(WeakReference)i.next();    PDFRenderer renderer=(PDFRenderer)ref.get();    if (renderer != null) {      if (renderer.getStatus() == Watchable.NEEDS_DATA) {        renderer.setStatus(Watchable.PAUSED);      }    }  }}  }
class C{  void addCoinbaseTransaction(byte[] pubKeyTo,BigInteger value){  unCacheTransactions();  transactions=new ArrayList<Transaction>();  Transaction coinbase=new Transaction(params);  coinbase.addInput(new TransactionInput(params,coinbase,new byte[]{(byte)txCounter,(byte)(txCounter++ >> 8)}));  coinbase.addOutput(new TransactionOutput(params,coinbase,value,ScriptBuilder.createOutputScript(new ECKey(null,pubKeyTo)).getProgram()));  transactions.add(coinbase);  coinbase.setParent(this);  coinbase.length=coinbase.bitcoinSerialize().length;  adjustLength(transactions.size(),coinbase.length);}  }
class C{  @Override public void checkOutputSpecs(JobContext jobContext) throws IOException {  Configuration conf=jobContext.getConfiguration();  getFreeTextIndexer(conf);  getTemporalIndexer(conf);  getRyaIndexer(conf);}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area){  draw(g2,area,null);}  }
class C{  public BatchStatus(){}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceDescription createInstance(ProvisioningSettings settings) throws APPlatformException {  try {    PropertyHandler ph=PropertyHandler.withSettings(settings);    validateParameters(ph);    ph.setOperation(Operation.EC2_CREATION);    ph.setState(FlowState.CREATION_REQUESTED);    InstanceDescription id=new InstanceDescription();    id.setInstanceId("aws-" + UUID.randomUUID().toString());    id.setChangedParameters(settings.getParameters());    LOGGER.info("createInstance({})",LogAndExceptionConverter.getLogText(id.getInstanceId(),settings));    return id;  } catch (  Throwable t) {    throw LogAndExceptionConverter.createAndLogPlatformException(t,Context.CREATION);  }}  }
class C{  private void widenCorners(LayerDefinition layer){  setCollide(layer,WALL_THICKNESS - 1,WALL_THICKNESS - 1,false);  setCollide(layer,WALL_THICKNESS - 1,WALL_THICKNESS,false);  setCollide(layer,WALL_THICKNESS,WALL_THICKNESS - 1,false);  setCollide(layer,width - width % (WALL_THICKNESS + 1) - 1,WALL_THICKNESS - 1,false);  setCollide(layer,width - width % (WALL_THICKNESS + 1),WALL_THICKNESS - 1,false);  setCollide(layer,width - width % (WALL_THICKNESS + 1),WALL_THICKNESS,false);  setCollide(layer,WALL_THICKNESS - 1,height - height % (WALL_THICKNESS + 1) - 1,false);  setCollide(layer,WALL_THICKNESS - 1,height - height % (WALL_THICKNESS + 1),false);  setCollide(layer,WALL_THICKNESS,height - height % (WALL_THICKNESS + 1),false);  setCollide(layer,width - width % (WALL_THICKNESS + 1) - 1,height - height % (WALL_THICKNESS + 1),false);  setCollide(layer,width - width % (WALL_THICKNESS + 1),height - height % (WALL_THICKNESS + 1),false);  setCollide(layer,width - width % (WALL_THICKNESS + 1),height - height % (WALL_THICKNESS + 1) - 1,false);}  }
class C{  @operator(value="overlaps",category={IOperatorCategory.SPATIAL},concept={IConcept.GEOMETRY,IConcept.SPATIAL_COMPUTATION,IConcept.SPATIAL_RELATION}) @doc(value="A boolean, equal to true if the left-geometry (or agent/point) overlaps the right-geometry (or agent/point).",usages={@usage("if one of the operand is null, returns false."),@usage("if one operand is a point, returns true if the point is included in the geometry")},examples={@example(value="polyline([{10,10},{20,20}]) overlaps polyline([{15,15},{25,25}])",equals="true"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{15,15},{15,25},{25,25},{25,15}])",equals="true"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps {25,25}",equals="false"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{35,35},{35,45},{45,45},{45,35}])",equals="false"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polyline([{10,10},{20,20}])",equals="true"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps {15,15}",equals="true"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{0,0},{0,30},{30,30}, {30,0}])",equals="true"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{15,15},{15,25},{25,25},{25,15}])",equals="true"),@example(value="polygon([{10,10},{10,20},{20,20},{20,10}]) overlaps polygon([{10,20},{20,20},{20,30},{10,30}])",equals="true")},see={"disjoint_from","crosses","intersects","partially_overlaps","touches"}) public static Boolean overlaps(final IScope scope,final IShape g1,final IShape g2){  if (g1 == null || g2 == null) {    return false;  }  return !disjoint_from(scope,g1,g2);}  }
class C{  public T caseStaticBaseTypeRef(StaticBaseTypeRef object){  return null;}  }
class C{  private ImportRewrite createImportRewrite(){  if (fCompilationUnit != null && shouldAddImports()) {    try {      CompilationUnit cu=getASTRoot(fCompilationUnit);      if (cu == null) {        ImportRewrite rewrite=StubUtility.createImportRewrite(fCompilationUnit,true);        fImportContext=null;        return rewrite;      } else {        ImportRewrite rewrite=StubUtility.createImportRewrite(cu,true);        fImportContext=new ContextSensitiveImportRewriteContext(cu,fInvocationContext.getInvocationOffset(),rewrite);        return rewrite;      }    } catch (    CoreException x) {      JavaPlugin.log(x);    }  }  return null;}  }
class C{  @Override public boolean remove(Object key,Object value){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public UnsupportedRDFormatException(String msg){  super(msg);}  }
class C{  public synchronized ProcessingTask popNextSession(){  if (!mQueue.isEmpty() && !mHoldProcessing) {    Log.d(TAG,"Popping a session. Remaining: " + (mQueue.size() - 1));    return mQueue.remove();  } else {    Log.d(TAG,"Popping null. On hold? " + mHoldProcessing);    mServiceRunning=false;    return null;  }}  }
class C{  public String[] componentsArray(){  return path.length() == 1 ? new String[0] : path.substring(1).split(SLASH);}  }
class C{  public void test_GET_accessPath_delete_o_Literal() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long result=countResults(doGetWithAccessPath(null,null,new URIImpl("http://www.bigdata.com/Bryan")));  assertEquals(1,result);}  }
class C{  private static int hexToBinary(final byte b) throws IOException {  final int i=Character.digit((char)b,16);  if (i == -1) {    throw new IOException("Invalid quoted printable encoding: not a valid hex digit: " + b);  }  return i;}  }
class C{  public MaxPQ(Key[] keys){  n=keys.length;  pq=(Key[])new Object[keys.length + 1];  for (int i=0; i < n; i++)   pq[i + 1]=keys[i];  for (int k=n / 2; k >= 1; k--)   sink(k);  assert isMaxHeap();}  }
class C{  public InvoiceHistory(Window parent,int C_BPartner_ID,int M_Product_ID,int M_Warehouse_ID,int M_AttributeSetInstance_ID){  super();  setTitle(Msg.getMsg(Env.getCtx(),"PriceHistory"));  log.config("C_BPartner_ID=" + C_BPartner_ID + ", M_Product_ID="+ M_Product_ID+ ", M_Warehouse_ID="+ M_Warehouse_ID+ ", M_AttributeSetInstance_ID="+ M_AttributeSetInstance_ID);  m_C_BPartner_ID=C_BPartner_ID;  m_M_Product_ID=M_Product_ID;  m_M_Warehouse_ID=M_Warehouse_ID;  m_M_AttributeSetInstance_ID=M_AttributeSetInstance_ID;  try {    jbInit();    dynInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }  AEnv.showCenterWindow(parent,this);}  }
class C{  public void addSuggestions(final @NonNull SuggestionsResult result,final @NonNull String bucket,final @NonNull TokenSource source){  QueryToken query=result.getQueryToken();synchronized (mLock) {    mResultMap.put(bucket,result);    Set<String> waitingForBuckets=mWaitingForResults.get(query);    if (waitingForBuckets != null) {      waitingForBuckets.remove(bucket);      if (waitingForBuckets.size() == 0) {        mWaitingForResults.remove(query);      }    }  }  String currentTokenString=source.getCurrentTokenString();synchronized (mLock) {    mSuggestions.clear();    List<Suggestible> suggestions=mSuggestionsListBuilder.buildSuggestions(mResultMap,currentTokenString);    if (suggestions.size() > 0) {      mSuggestions.addAll(suggestions);      mSuggestionsVisibilityManager.displaySuggestions(true);    } else {      hideSuggestionsIfNecessary(result.getQueryToken(),source);    }  }  notifyDataSetChanged();}  }
class C{  public Hashtable<String,String> addDateFilters(String recency,Hashtable<String,String> uriParamsHash){  Date today=new Date();  Calendar cal=new GregorianCalendar();  if (recency.equalsIgnoreCase("current")) {    cal.add(Calendar.DAY_OF_MONTH,-28);    Date monthAgo=cal.getTime();    uriParamsHash.put("primary_release_date.gte",movieDateFormatter.format(monthAgo));    uriParamsHash.put("primary_release_date.lte",movieDateFormatter.format(today));  } else   if (recency.equalsIgnoreCase("upcoming")) {    cal=new GregorianCalendar();    cal.add(Calendar.MONTH,+6);    Date sixMonthsLater=cal.getTime();    uriParamsHash.put("primary_release_date.gte",movieDateFormatter.format(today));    uriParamsHash.put("primary_release_date.lte",movieDateFormatter.format(sixMonthsLater));  }  return uriParamsHash;}  }
class C{  @SuppressWarnings("unchecked") public static <C extends Result>ArrayList<C> filterResults(ResultHierarchy hier,Class<? super C> restrictionClass){  ArrayList<C> res=new ArrayList<>();  for (Hierarchy.Iter<Result> iter=hier.iterAll(); iter.valid(); iter.advance()) {    Result result=iter.get();    if (restrictionClass.isInstance(result)) {      res.add((C)restrictionClass.cast(result));    }  }  return res;}  }
class C{  public static void swap(int[] array){  for (int i=0; i < array.length; i++)   array[i]=swap(array[i]);}  }
class C{  public void checkServerTrusted(X509Certificate[] chain,String authType){}  }
class C{  public void removeNotify(){  super.removeNotify();  if (textArea != null) {    l.uninstall(textArea);  }}  }
class C{  protected void flush(ShaderProgram shader,int verticesPosition){  mesh.setVertices(vertices,0,verticesPosition);  mesh.render(shader,GL20.GL_POINTS,0,verticesPosition / BillboardDecal.VERTEX_SIZE);}  }
class C{  E emitField(String... namePartsAndValue){  List<String> parts=Arrays.asList(namePartsAndValue);  return emitField(Joiner.on(' ').join(parts.subList(0,parts.size() - 1)),Iterables.getLast(parts));}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public void delete(ScriptFilter filter){  new FilterDao().delete(filter);  scriptFilterEvent.fire(new InvalidScriptFilter(filter.getId()));}  }
class C{  public void accept(final AnnotationVisitor av){  if (av != null) {    if (values != null) {      for (int i=0; i < values.size(); i+=2) {        String name=(String)values.get(i);        Object value=values.get(i + 1);        accept(av,name,value);      }    }    av.visitEnd();  }}  }
class C{  public StubNotFoundException(String s){  super(s);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public Response deleteFileVirtualPool(@PathParam("id") URI id){  return deleteVirtualPool(VirtualPool.Type.file,id);}  }
class C{  protected boolean beforeDelete(){  return delete_Accounting("M_Warehouse_Acct");}  }
class C{  public IterationAttachObject(int id){  this.id=id;}  }
class C{  public X509Name(boolean reverse,String dirName){  this(reverse,DefaultLookUp,dirName);}  }
class C{  public GF2nElement solveQuadraticEquation() throws RuntimeException {  if (trace() == 1) {    throw new RuntimeException();  }  long TWOTOMAXLONGM1=mBitmask[MAXLONG - 1];  long ZERO=0L;  long ONE=1L;  long[] p=new long[mLength];  long z=0L;  int j=1;  for (int i=0; i < mLength - 1; i++) {    for (j=1; j < MAXLONG; j++) {      if (!((((mBitmask[j] & mPol[i]) != ZERO) && ((z & mBitmask[j - 1]) != ZERO)) || (((mPol[i] & mBitmask[j]) == ZERO) && ((z & mBitmask[j - 1]) == ZERO)))) {        z^=mBitmask[j];      }    }    p[i]=z;    if (((TWOTOMAXLONGM1 & z) != ZERO && (ONE & mPol[i + 1]) == ONE) || ((TWOTOMAXLONGM1 & z) == ZERO && (ONE & mPol[i + 1]) == ZERO)) {      z=ZERO;    } else {      z=ONE;    }  }  int b=mDegree & (MAXLONG - 1);  long LASTLONG=mPol[mLength - 1];  for (j=1; j < b; j++) {    if (!((((mBitmask[j] & LASTLONG) != ZERO) && ((mBitmask[j - 1] & z) != ZERO)) || (((mBitmask[j] & LASTLONG) == ZERO) && ((mBitmask[j - 1] & z) == ZERO)))) {      z^=mBitmask[j];    }  }  p[mLength - 1]=z;  return new GF2nONBElement((GF2nONBField)mField,p);}  }
class C{  public static void haltThread(){  haltThread(Thread.currentThread());}  }
class C{  public List<File> fetch() throws MalformedURLException, DependencyResolutionException, ArtifactResolutionException {  for (  Dependency dep : dependencies) {    if (!dep.isLocalFsArtifact()) {      List<ArtifactResult> artifacts=fetchArtifactWithDep(dep);      for (      ArtifactResult artifact : artifacts) {        if (dep.isDist()) {          filesDist.add(artifact.getArtifact().getFile());        }        files.add(artifact.getArtifact().getFile());      }    } else {      if (dep.isDist()) {        filesDist.add(new File(dep.getGroupArtifactVersion()));      }      files.add(new File(dep.getGroupArtifactVersion()));    }  }  return files;}  }
class C{  public WaterfallBarRenderer(Paint firstBarPaint,Paint positiveBarPaint,Paint negativeBarPaint,Paint lastBarPaint){  super();  ParamChecks.nullNotPermitted(firstBarPaint,"firstBarPaint");  ParamChecks.nullNotPermitted(positiveBarPaint,"positiveBarPaint");  ParamChecks.nullNotPermitted(negativeBarPaint,"negativeBarPaint");  ParamChecks.nullNotPermitted(lastBarPaint,"lastBarPaint");  this.firstBarPaint=firstBarPaint;  this.lastBarPaint=lastBarPaint;  this.positiveBarPaint=positiveBarPaint;  this.negativeBarPaint=negativeBarPaint;  setGradientPaintTransformer(new StandardGradientPaintTransformer(GradientPaintTransformType.CENTER_VERTICAL));  setMinimumBarLength(1.0);}  }
class C{  protected void onPostExecute(Uri imagePath){  Intent intent=DownloadReceiver.makeDownloadCompleteIntent(imagePath);  DownloadImageActivity.this.sendBroadcast(intent);  Log.d(TAG,"onPostExecute() finishing activity");  DownloadImageActivity.this.finish();}  }
class C{  public void onBlockAdded(World world,BlockPos pos,IBlockState state){}  }
class C{  public boolean reload(){  return apply(LegacySchemaTables.createTableFromName(ksName,cfName));}  }
class C{  public DFSGraph(File file) throws FileNotFoundException {  out=new PrintWriter(file);}  }
class C{  @Override public synchronized void acceptDataSet(DataSetEvent e){  try {    m_Saver=makeCopy();  } catch (  Exception ex) {    if (m_logger != null) {      m_logger.statusMessage(statusMessagePrefix() + "ERROR (See log for details)");      m_logger.logMessage("[Saver] " + statusMessagePrefix() + " unable to copy saver. "+ ex.getMessage());    }  }  passEnvOnToSaver();  m_fileName=sanitizeFilename(e.getDataSet().relationName());  m_dataSet=e.getDataSet();  if (e.isStructureOnly() && m_isDBSaver && ((DatabaseSaver)m_SaverTemplate).getRelationForTableName()) {    ((DatabaseSaver)m_Saver).setTableName(m_fileName);  }  if (!e.isStructureOnly()) {    if (!m_isDBSaver) {      try {        m_Saver.setDirAndPrefix(m_fileName,"");      } catch (      Exception ex) {        System.out.println(ex);      }    }    saveBatch();    System.out.println("...relation " + m_fileName + " saved.");  }}  }
class C{  public void addToPlayersAndFriends(RPEntity object){  if (!playersAndFriends.contains(object)) {    playersAndFriends.add(object);  }}  }
class C{  public void addExceptions(List exceptionList){  for (Iterator iter=exceptionList.iterator(); iter.hasNext(); ) {    addException((Date)iter.next());  }}  }
class C{  public synchronized Environment updateEnvironment(Environment environment,boolean checkProfiles) throws BusinessException, JAXBException, IOException {  if (checkProfiles) {    checkProfiles(environment);  }  String id=environment.getId();  environment.setRevision(environment.getRevision() + 1);  Environment local=existingEnvironments.replace(id,environment);  if (null == local) {    existingEnvironments.remove(id);    throw new BusinessException("Update of the environment '" + environment.getName() + ".",ConfigurationInterfaceErrorCodeEnum.ENVIRONMENT_DOES_NOT_EXIST);  } else   if ((local != environment) && ((local.getRevision() + 1) != environment.getRevision())) {    existingEnvironments.replace(id,local);    BusinessException e=new BusinessException("Update of the environment '" + environment.getName() + ".",ConfigurationInterfaceErrorCodeEnum.REVISION_CHECK_FAILED);    environment.setRevision(environment.getRevision() - 1);    throw e;  }  environment.setUpdatedDate(new Date());  saveEnvironment(environment);  if (!Objects.equals(environment.getName(),local.getName())) {    Files.deleteIfExists(pathResolver.getEnvironmentFilePath(local));  }  publishEnvironmentUpdateEvent(local,environment);  return environment;}  }
class C{  @PrePersist public void fillCreationDate(){  if (getCreationDate() == null) {    setCreationDate(GregorianCalendar.getInstance().getTime());  }}  }
class C{  public boolean isManufacturer(){  Object oo=get_Value(COLUMNNAME_IsManufacturer);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected double transformX(double value){  return ((xAxis.transform(value) - xAxis.transform(xAxis.getMinAxis())) * xScale) + xOffset;}  }
class C{  public String timeAgo(final long millis){  return time(System.currentTimeMillis() - millis);}  }
class C{  public BoundingBox intersectWith(BoundingBox bb){  latMin=Math.max(latMin,bb.latMin);  lonMin=Math.max(lonMin,bb.lonMin);  latMax=Math.min(latMax,bb.latMax);  lonMax=Math.min(lonMax,bb.lonMax);  return this;}  }
class C{  public boolean isOpaqueCube(IBlockState state){  return false;}  }
class C{  Message(){}  }
class C{  public TLongLongHashMap(int initialCapacity,float loadFactor,TLongHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public static MultiTaskListener instance(Context context){  MultiTaskListener instance=context.get(taskListenerKey);  if (instance == null)   instance=new MultiTaskListener(context);  return instance;}  }
class C{  private static float hue2rgb(float hue,float val1,float val2){  float res=hue;  if (6f * hue < 1f) {    res=val1 + (val2 - val1) * 6f * hue;  } else   if (2f * hue < 1f) {    res=val2;  } else   if (3f * hue < 2f) {    res=val1 + (val2 - val1) * (2f / 3f - hue) * 6f;  } else {    res=val1;  }  return res;}  }
class C{  public static String typeName(Class<?> cls){  String typeName=cls.getSimpleName();  if (F.isEmpty(typeName)) {    String pkg=cls.getPackage().getName();    typeName=cls.getName().substring(pkg.length() + (pkg.isEmpty() ? 0 : 1));  }  if (cls.isArray()) {    assert typeName.endsWith("[]");    typeName=typeName.substring(0,typeName.length() - 2) + "_array";  }  return typeName;}  }
class C{  public UrlResource(String protocol,String location,String fragment) throws MalformedURLException {  try {    this.uri=new URI(protocol,location,fragment);    this.url=this.uri.toURL();    this.cleanedUrl=getCleanedUrl(this.url,this.uri.toString());  } catch (  URISyntaxException ex) {    MalformedURLException exToThrow=new MalformedURLException(ex.getMessage());    exToThrow.initCause(ex);    throw exToThrow;  }}  }
class C{  protected void prepareForFileMoveImpl(String objectKey,CompleteUploadSingleParamsDto completeUploadSingleParamsDto){  try {    BusinessObjectDataEntity sourceBusinessObjectDataEntity=storageFileDaoHelper.getStorageFileEntity(StorageEntity.MANAGED_LOADING_DOCK_STORAGE,objectKey).getStorageUnit().getBusinessObjectData();    completeUploadSingleParamsDto.setSourceOldStatus(sourceBusinessObjectDataEntity.getStatus().getCode());    completeUploadSingleParamsDto.setSourceBusinessObjectDataKey(businessObjectDataHelper.getBusinessObjectDataKey(sourceBusinessObjectDataEntity));    BusinessObjectDataEntity targetBusinessObjectDataEntity=getTargetBusinessObjectDataEntity(sourceBusinessObjectDataEntity);    completeUploadSingleParamsDto.setTargetOldStatus(targetBusinessObjectDataEntity.getStatus().getCode());    completeUploadSingleParamsDto.setTargetBusinessObjectDataKey(businessObjectDataHelper.getBusinessObjectDataKey(targetBusinessObjectDataEntity));    for (    BusinessObjectDataEntity businessObjectDataEntity : Arrays.asList(sourceBusinessObjectDataEntity,targetBusinessObjectDataEntity)) {      if (!BusinessObjectDataStatusEntity.UPLOADING.equals(businessObjectDataEntity.getStatus().getCode())) {        LOGGER.info("Ignoring S3 notification since business object data status \"{}\" does not match the expected status \"{}\". " + "businessObjectDataKey={}",businessObjectDataEntity.getStatus().getCode(),BusinessObjectDataStatusEntity.UPLOADING,jsonHelper.objectToJson(businessObjectDataHelper.getBusinessObjectDataKey(businessObjectDataEntity)));        return;      }    }    StorageEntity s3ManagedLoadingDockStorageEntity=storageDaoHelper.getStorageEntity(StorageEntity.MANAGED_LOADING_DOCK_STORAGE);    completeUploadSingleParamsDto.setSourceBucketName(storageHelper.getStorageBucketName(s3ManagedLoadingDockStorageEntity));    StorageUnitEntity sourceStorageUnitEntity=storageUnitDaoHelper.getStorageUnitEntity(StorageEntity.MANAGED_LOADING_DOCK_STORAGE,sourceBusinessObjectDataEntity);    StorageFileEntity sourceStorageFileEntity=IterableUtils.get(sourceStorageUnitEntity.getStorageFiles(),0);    completeUploadSingleParamsDto.setSourceFilePath(sourceStorageFileEntity.getPath());    AwsParamsDto awsParamsDto=awsHelper.getAwsParamsDto();    completeUploadSingleParamsDto.setAwsParams(awsParamsDto);    S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=S3FileTransferRequestParamsDto.builder().s3BucketName(completeUploadSingleParamsDto.getSourceBucketName()).s3KeyPrefix(completeUploadSingleParamsDto.getSourceFilePath()).httpProxyHost(awsParamsDto.getHttpProxyHost()).httpProxyPort(awsParamsDto.getHttpProxyPort()).build();    s3Dao.validateS3File(s3FileTransferRequestParamsDto,sourceStorageFileEntity.getFileSizeBytes());    StorageEntity s3ManagedExternalStorageEntity=getUniqueStorage(targetBusinessObjectDataEntity);    completeUploadSingleParamsDto.setTargetBucketName(storageHelper.getStorageBucketName(s3ManagedExternalStorageEntity));    completeUploadSingleParamsDto.setKmsKeyId(storageHelper.getStorageKmsKeyId(s3ManagedExternalStorageEntity));    completeUploadSingleParamsDto.setTargetFilePath(IterableUtils.get(IterableUtils.get(targetBusinessObjectDataEntity.getStorageUnits(),0).getStorageFiles(),0).getPath());    assertS3ObjectKeyDoesNotExist(completeUploadSingleParamsDto.getTargetBucketName(),completeUploadSingleParamsDto.getTargetFilePath());    businessObjectDataDaoHelper.updateBusinessObjectDataStatus(sourceBusinessObjectDataEntity,BusinessObjectDataStatusEntity.RE_ENCRYPTING);    completeUploadSingleParamsDto.setSourceNewStatus(BusinessObjectDataStatusEntity.RE_ENCRYPTING);    businessObjectDataDaoHelper.updateBusinessObjectDataStatus(targetBusinessObjectDataEntity,BusinessObjectDataStatusEntity.RE_ENCRYPTING);    completeUploadSingleParamsDto.setTargetNewStatus(BusinessObjectDataStatusEntity.RE_ENCRYPTING);  } catch (  RuntimeException e) {    completeUploadSingleParamsDto.setSourceNewStatus(setAndReturnNewSourceBusinessObjectDataStatusAfterError(completeUploadSingleParamsDto.getSourceBusinessObjectDataKey()));    completeUploadSingleParamsDto.setTargetNewStatus(setAndReturnNewTargetBusinessObjectDataStatusAfterError(completeUploadSingleParamsDto.getTargetBusinessObjectDataKey()));    deleteSourceS3ObjectAfterError(completeUploadSingleParamsDto.getSourceBucketName(),completeUploadSingleParamsDto.getSourceFilePath(),completeUploadSingleParamsDto.getSourceBusinessObjectDataKey());    LOGGER.error("Failed to process upload single completion request for file. s3Key=\"{}\"",objectKey,e);  }  if (completeUploadSingleParamsDto.getSourceNewStatus() != null) {    notificationEventService.processBusinessObjectDataNotificationEventAsync(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG,completeUploadSingleParamsDto.getSourceBusinessObjectDataKey(),completeUploadSingleParamsDto.getSourceNewStatus(),completeUploadSingleParamsDto.getSourceOldStatus());  }  if (completeUploadSingleParamsDto.getTargetNewStatus() != null) {    notificationEventService.processBusinessObjectDataNotificationEventAsync(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG,completeUploadSingleParamsDto.getTargetBusinessObjectDataKey(),completeUploadSingleParamsDto.getTargetNewStatus(),completeUploadSingleParamsDto.getTargetOldStatus());  }}  }
class C{  private Expr parse(String input) throws SyntaxException {  return parseString(input);}  }
class C{  @SafeVarargs public static <Type>DisjunctiveValidator<Type> create(@NonNull final CharSequence errorMessage,@NonNull final Validator<Type>... validators){  return new DisjunctiveValidator<>(errorMessage,validators);}  }
class C{  public static double invokeD(String signature,boolean isNative,Object caller){  MethodListener i=sMethods.get(signature);  if (i != null) {    return i.onInvokeD(signature,isNative,caller);  } else   if (sDefaultListener != null) {    return sDefaultListener.onInvokeD(signature,isNative,caller);  }  return 0;}  }
class C{  private void doSelectQuery(final AST2BOpContext context,final StaticAnalysis sa,final QueryRoot queryRoot,final QueryBase queryBase){  ProjectionNode projectionNode=null;  Integer indexOfVarNode=null;  Integer indexOfCountNode=null;  VarNode countNodeVar=null;  GraphPatternGroup<IGroupMemberNode> graphPattern;  StatementPatternNode stmtPattern=null;  VarNode groupingVar=null;{    final GroupByNode groupByNode=queryBase.getGroupBy();    if (groupByNode == null || groupByNode.arity() != 1 || !(groupByNode.get(0) instanceof AssignmentNode)) {      return;    }    final AssignmentNode assignmentNodeInGroupBy=(AssignmentNode)groupByNode.get(0);    if (assignmentNodeInGroupBy.arity() != 2 || !(assignmentNodeInGroupBy.get(0) instanceof VarNode) || !(assignmentNodeInGroupBy.get(1) instanceof VarNode)) {      return;    }    groupingVar=(VarNode)assignmentNodeInGroupBy.get(1);    final VarNode groupingVarRenamed=(VarNode)assignmentNodeInGroupBy.get(0);    final QueryType queryType=queryBase.getQueryType();    if (!QueryType.SELECT.equals(queryType)) {      return;    }    graphPattern=queryBase.getGraphPattern();    if (graphPattern.args().size() != 1) {      return;    }    final BOp potentialStmtPattern=graphPattern.get(0);    if (!(potentialStmtPattern instanceof StatementPatternNode)) {      return;    }    stmtPattern=(StatementPatternNode)potentialStmtPattern;    if (context.getAbstractTripleStore().isRDRHistory()) {      if (!stmtPattern.getQueryHintAsBoolean(QueryHints.HISTORY,false)) {        if (log.isDebugEnabled()) {          log.debug("nope");        }        return;      }    }    if (log.isDebugEnabled()) {      log.debug("yep");    }    Set<VarNode> varNodesInStmtPattern=new HashSet<VarNode>();    VarNode graphVarNode=null;    for (int i=0; i < stmtPattern.arity(); i++) {      final BOp arg=stmtPattern.get(i);      if (arg instanceof VarNode) {        varNodesInStmtPattern.add((VarNode)arg);        if (i == 3) {          graphVarNode=(VarNode)arg;        }      }    }    if (!varNodesInStmtPattern.contains(groupingVar)) {      return;    }    projectionNode=queryBase.getProjection();    if (projectionNode.size() != 2) {      return;    }    indexOfVarNode=null;    indexOfCountNode=null;    for (int i=0; i < 2; i++) {      final AssignmentNode curNode=projectionNode.getExpr(i);      final IValueExpressionNode valNode=curNode.getValueExpressionNode();      if (valNode instanceof FunctionNode && indexOfCountNode == null) {        final FunctionNode fNode=(FunctionNode)curNode.getValueExpressionNode();        if (!fNode.getFunctionURI().equals(FunctionRegistry.COUNT))         return;        final Map<String,Object> scalarVals=fNode.getScalarValues();        final Object isDistinct=scalarVals.get(AggregateBase.Annotations.DISTINCT);        if (isDistinct != null && isDistinct instanceof Boolean && (Boolean)isDistinct) {          return;        }        if (fNode.args().size() != 1) {          return;        }        final BOp inner=fNode.args().get(0);        if (!(inner instanceof VarNode)) {          return;        }        final VarNode innerVarNode=(VarNode)inner;        boolean countOnPotentiallyUnboundVariable=varNodesInStmtPattern.contains(innerVarNode) && !innerVarNode.equals(graphVarNode);        boolean isWildcard=innerVarNode.isWildcard();        if (!(countOnPotentiallyUnboundVariable || isWildcard)) {          return;        }        if (!(curNode.get(0) instanceof VarNode)) {          return;        }        countNodeVar=(VarNode)curNode.get(0);        indexOfCountNode=i;      } else       if (valNode instanceof VarNode && indexOfVarNode == null) {        final VarNode valNodeAsVarNode=(VarNode)valNode;        if (!valNodeAsVarNode.equals(groupingVarRenamed)) {          return;        }        indexOfVarNode=i;      } else {        return;      }    }  }{    final SubqueryRoot selectDistinct=new SubqueryRoot(QueryType.SELECT);    final ProjectionNode projection=new ProjectionNode();    final AssignmentNode assignemntNode=new AssignmentNode(groupingVar,groupingVar);    projection.addArg(assignemntNode);    projection.setDistinct(true);    selectDistinct.setProjection(projection);    final JoinGroupNode join=new JoinGroupNode();    join.addArg(stmtPattern);    selectDistinct.setWhereClause(join);    graphPattern.setArg(0,selectDistinct);    final StatementPatternNode stmtPatternClone=new StatementPatternNode(stmtPattern);    stmtPatternClone.setFastRangeCount(countNodeVar);    graphPattern.addArg(stmtPatternClone);    projectionNode.setArg(indexOfCountNode,new AssignmentNode(new VarNode(countNodeVar),new VarNode(countNodeVar)));    queryBase.setGroupBy(null);  }}  }
class C{  private List<Attribute> parseAttributes(List<AttributeStatement> statements){  List<Attribute> attributes=new LinkedList<Attribute>();  Validate.notEmpty(statements,"statements");  Iterator<AttributeStatement> iterator=statements.iterator();  while (iterator.hasNext()) {    AttributeStatement statement=iterator.next();    List<org.opensaml.saml2.core.Attribute> opensamlAttrs=statement.getAttributes();    Iterator<org.opensaml.saml2.core.Attribute> iter=opensamlAttrs.iterator();    while (iter.hasNext()) {      org.opensaml.saml2.core.Attribute samlAttr=iter.next();      String name=samlAttr.getName();      String friendlyName=samlAttr.getFriendlyName();      List<String> valueStrs=this.parseSamlAttributeValues(samlAttr.getAttributeValues());      Attribute attr=new Attribute(name,friendlyName,valueStrs);      attributes.add(attr);    }  }  return attributes;}  }
class C{  public NormalSubsystem(){  requestFileName="getstate-subsystem.query";  responseFile="getstate-subsystem.answer";}  }
class C{  public static boolean isSameDomainName(String url1,String url2) throws MalformedURLException {  return isSameDomainName(new URL(url1),new URL(url2));}  }
class C{  private static void mat4_util_inplace_rotate(float[] inOutMatrix,float eulerRadiansX,float eulerRadiansY,float eulerRadiansZ){  float cos_rx=(float)Math.cos(eulerRadiansX);  float cos_ry=(float)Math.cos(eulerRadiansY);  float cos_rz=(float)Math.cos(eulerRadiansZ);  float sin_rx=(float)Math.sin(eulerRadiansX);  float sin_ry=(float)Math.sin(eulerRadiansY);  float sin_rz=(float)Math.sin(eulerRadiansZ);  float b00=cos_rz * cos_ry;  float b10=sin_rz * cos_ry;  float b20=-sin_ry;  float b30=0.0f;  float b01=-sin_rz * cos_rx + cos_rz * sin_ry * sin_rx;  float b11=cos_rz * cos_rx + sin_rz * sin_ry * sin_rx;  float b21=cos_ry * sin_rx;  float b31=0.0f;  float b02=sin_rz * sin_rx + cos_rz * sin_ry * cos_rx;  float b12=-cos_rz * sin_rx + sin_rz * sin_ry * cos_rx;  float b22=cos_ry * cos_rx;  float b32=0.0f;  float b03=0.0f;  float b13=0.0f;  float b23=0.0f;  float b33=1.0f;  float a00=inOutMatrix[0];  float a10=inOutMatrix[1];  float a20=inOutMatrix[2];  float a30=inOutMatrix[3];  float a01=inOutMatrix[4];  float a11=inOutMatrix[5];  float a21=inOutMatrix[6];  float a31=inOutMatrix[7];  float a02=inOutMatrix[8];  float a12=inOutMatrix[9];  float a22=inOutMatrix[10];  float a32=inOutMatrix[11];  float a03=inOutMatrix[12];  float a13=inOutMatrix[13];  float a23=inOutMatrix[14];  float a33=inOutMatrix[15];  inOutMatrix[0]=a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;  inOutMatrix[1]=a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;  inOutMatrix[2]=a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;  inOutMatrix[3]=a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;  inOutMatrix[4]=a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;  inOutMatrix[5]=a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;  inOutMatrix[6]=a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;  inOutMatrix[7]=a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;  inOutMatrix[8]=a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;  inOutMatrix[9]=a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;  inOutMatrix[10]=a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;  inOutMatrix[11]=a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;  inOutMatrix[12]=a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;  inOutMatrix[13]=a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;  inOutMatrix[14]=a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;  inOutMatrix[15]=a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;}  }
class C{  private static void textQuery(){  IgniteCache<AffinityKey<Long>,Person> cache=Ignition.ignite().cache(PERSON_CACHE);  QueryCursor<Cache.Entry<AffinityKey<Long>,Person>> masters=cache.query(new TextQuery<AffinityKey<Long>,Person>(Person.class,"Master"));  QueryCursor<Cache.Entry<AffinityKey<Long>,Person>> bachelors=cache.query(new TextQuery<AffinityKey<Long>,Person>(Person.class,"Bachelor"));  print("Following people have 'Master Degree' in their resumes: ",masters.getAll());  print("Following people have 'Bachelor Degree' in their resumes: ",bachelors.getAll());}  }
class C{  public ScreenQuad(boolean createVBOs){  super();  init(createVBOs);}  }
class C{  public static String versionUrlOf(String host,String url,char variant,byte[] content,HtmlSpeedHttpExchange exchange,ConfigData configData){  if (!configData.isVersioning || maxAgeOf(exchange,false,configData) >= 3600 * 24 * 14)   return null;  StringBuilder sb=new StringBuilder(32);  if (url.startsWith("http://"))   sb.append("http:/").append(host).append("/http/").append(url.substring(7)); else   if (url.startsWith("https://"))   sb.append("https:/").append(host).append("/https/").append(url.substring(8)); else   sb.append(url);  sb.append(md5Of(content));  sb.append(VERSION_SUFFIX);  return sb.toString();}  }
class C{  public FastIntBuffer append(int[] array,int off,int len){  int end=off + len;  if ((off < 0) || (len < 0) || (end > array.length)) {    throw new IndexOutOfBoundsException();  }  if (len == 0) {    return this;  }  int newSize=size + len;  int remaining=len;  if (currentBuffer != null) {    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    remaining-=part;    offset+=part;    size+=part;  }  if (remaining > 0) {    needNewBuffer(newSize);    int part=Math.min(remaining,currentBuffer.length - offset);    System.arraycopy(array,end - remaining,currentBuffer,offset,part);    offset+=part;    size+=part;  }  return this;}  }
class C{  private boolean lookupHome(Path path){  if (path == null) {    return false;  }  Path binFolder=path.resolve("bin");  if (binFolder == null && Files.exists(binFolder,LinkOption.NOFOLLOW_LINKS)) {    return false;  }  Path artemisScript=binFolder.resolve("artemis");  return artemisScript != null && Files.exists(artemisScript,LinkOption.NOFOLLOW_LINKS);}  }
class C{  private void restoreAssociationRegistration(BackupAssociation backupAssoc,int regLevel){  try {    String curMimeType=backupAssoc.getCurMimeType();    String curFileExt=backupAssoc.getCurFileExt();    if (!backupAssoc.getCurMimeTypeExisted()) {      if (curMimeType != null) {        WinRegistryUtil.removeMimeType(curMimeType,regLevel);      }    } else {      String backupFileExt=backupAssoc.getBackupFileExt();      if (backupFileExt != null) {        WinRegistryUtil.setFileExtByMimeType(backupFileExt,curMimeType,regLevel);      }    }    if (!backupAssoc.getCurFileExtExisted()) {      if (curFileExt != null) {        WinRegistryUtil.removeFileExt(curFileExt,regLevel);      }    } else {      String backupMimeType=backupAssoc.getBackupMimeType();      if (backupMimeType != null) {        WinRegistryUtil.setMimeTypeByFileExt(backupMimeType,curFileExt,regLevel);      }      String backupClassID=backupAssoc.getBackupClassID();      if (backupClassID != null) {        WinRegistryUtil.setClassIDByFileExt(curFileExt,backupClassID,regLevel);      }    }  } catch (  RegisterFailedException e) {  }}  }
class C{  public void init(){  if (initialized) {    return;  }  Widget parent=inputWidget.getParent();  while (parent != null && !parent.getClass().getName().equals("com.google.gwt.user.client.ui.Widget")) {    helpBlock=findHelpBlock(inputWidget);    if (helpBlock != null) {      break;    } else {      parent=parent.getParent();    }  }  initialized=true;}  }
class C{  @Override public void transform(AffineTransform tx){  invalidateTransformedShape();  if (get(TRANSFORM) != null || (tx.getType() & (AffineTransform.TYPE_TRANSLATION | AffineTransform.TYPE_MASK_SCALE)) != tx.getType()) {    if (get(TRANSFORM) == null) {      set(TRANSFORM,(AffineTransform)tx.clone());    } else {      AffineTransform t=TRANSFORM.getClone(this);      t.preConcatenate(tx);      set(TRANSFORM,t);    }  } else {    Point2D.Double anchor=getStartPoint();    Point2D.Double lead=getEndPoint();    setBounds((Point2D.Double)tx.transform(anchor,anchor),(Point2D.Double)tx.transform(lead,lead));  }}  }
class C{  @Override public void glBindBuffer(int target,int buffer){  mGL11.glBindBuffer(target,buffer);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("CLogger[");  sb.append(getName()).append(",Level=").append(getLevel()).append("]");  return sb.toString();}  }
class C{  public void ifPresentOrElse(LongConsumer action,Runnable emptyAction){  if (isPresent) {    action.accept(value);  } else {    emptyAction.run();  }}  }
class C{  protected void rehash(){  Entry[] oldTable=table;  table=new Entry[oldTable.length * 2 + 1];  for (int i=oldTable.length - 1; i >= 0; i--) {    for (Entry old=oldTable[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=e.hash % table.length;      e.next=table[index];      table[index]=e;    }  }}  }
class C{  public AuthChallengeResponse(AuthChallengeResponse other){  if (other.isSetChallenge()) {    this.challenge=other.challenge;  }  if (other.isSetResponse()) {    this.response=other.response;  }}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  public static Population createTestPtPopulation(int nPersons,Coord homeCoord,Coord workCoord){  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  Population population=scenario.getPopulation();  for (int i=0; i < nPersons; i++) {    Person person=population.getFactory().createPerson(Id.create(i,Person.class));    PersonUtils.setAge(person,30);    Plan plan=population.getFactory().createPlan();    Activity home=population.getFactory().createActivityFromCoord("home",homeCoord);    home.setEndTime(8. * 3600);    Activity work=population.getFactory().createActivityFromCoord("work",workCoord);    work.setEndTime(17. * 3600);    Activity home2=population.getFactory().createActivityFromCoord("home",homeCoord);    home2.setEndTime(24. * 3600);    Leg leg=population.getFactory().createLeg(TransportMode.pt);    plan.addActivity(home);    plan.addLeg(leg);    plan.addActivity(work);    plan.addLeg(leg);    plan.addActivity(home2);    person.addPlan(plan);    population.addPerson(person);  }  return population;}  }
class C{  public static <T>Key<T> named(String name,Class<?> owner){  return new Key<>(name,owner);}  }
class C{  void addIndex(IndexType type,List<String> columnNames){  IndexDefinition index=new IndexDefinition();  index.indexName=tableName + "_" + indexes.size();  index.columnNames=New.arrayList(columnNames);  index.type=type;  indexes.add(index);}  }
class C{  public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof JavaProject))   return false;  JavaProject other=(JavaProject)o;  return this.getFullPath().equals(other.getFullPath());}  }
class C{  public void insert(ForceItem item){  try {    insert(item,root,xMin,yMin,xMax,yMax);  } catch (  StackOverflowError e) {    e.printStackTrace();  }}  }
class C{  void releaseIfLocked(Object name,InternalDistributedMember owner,int lockId) throws InterruptedException {  waitWhileInitializing();  if (!acquireDestroyReadLock(0)) {    waitUntilDestroyed();    checkDestroyed();  }  try {    checkDestroyed();    getAndReleaseGrantIfLockedBy(name,owner,lockId);  }  finally {    releaseDestroyReadLock();  }}  }
class C{  private void changeSize(final int newSizePx){  shape.setIntrinsicWidth(newSizePx);  shape.setIntrinsicHeight(newSizePx);  drawableHolder.setImageDrawable(null);  drawableHolder.setImageDrawable(shape);}  }
class C{  public static PronghornStage findStageByPath(GraphManager m,int... path){  int ordinal=path[0];  int i=0;  int limit=m.stageIdToStage.length;  while (i < limit) {    if (null != m.stageIdToStage[i]) {      if (-1 == m.multInputIds[m.stageIdToInputsBeginIdx[m.stageIdToStage[i].stageId]]) {        if (--ordinal <= 0) {          return findStageByPath(m,m.stageIdToStage[i],1,path);        }      }    }    i++;  }  throw new UnsupportedOperationException("Unable to find ordinal input stage of " + path[0]);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaFile mf=stack.getUIMgrSafe().getVideoFrame().getCurrFile();  return (mf != null) && (mf.hasVideoContent()) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static void printAsHex(int perLine,String prefix,String delimiter,byte[] data){  for (int i=0; i < data.length; i++) {    String tail=Integer.toHexString(0x000000ff & data[i]);    if (tail.length() == 1) {      tail="0" + tail;    }    System.out.print(prefix + "0x" + tail+ delimiter);    if (((i + 1) % perLine) == 0) {      System.out.println("");    }  }  System.out.println("");}  }
class C{  public Phaser(int parties){  this(null,parties);}  }
class C{  public final void testSetEnabled(){  AbstractValidateableViewImplementation abstractValidateableView=new AbstractValidateableViewImplementation(getContext());  abstractValidateableView.setError("foo");  abstractValidateableView.setEnabled(false);  assertFalse(abstractValidateableView.getView().isEnabled());  assertNull(abstractValidateableView.getError());}  }
class C{  public static void installApk(Context context,String filename){  Intent intent=new Intent();  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  intent.setAction(Intent.ACTION_VIEW);  String type="application/vnd.android.package-archive";  File pluginfile=new File(filename);  intent.setDataAndType(Uri.fromFile(pluginfile),type);  context.startActivity(intent);}  }
class C{  private void actionBPartner(boolean newRecord){  WBPartner vbp=new WBPartner(m_lookup.getWindowNo());  int BPartner_ID=0;  if (!newRecord) {    if (value instanceof Integer)     BPartner_ID=((Integer)value).intValue(); else     if (value != null)     BPartner_ID=Integer.parseInt(value.toString());  }  vbp.loadBPartner(BPartner_ID);  vbp.setVisible(true);  AEnv.showWindow(vbp);  int result=vbp.getC_BPartner_ID();  if (result == 0 && result == BPartner_ID)   return;  m_lookup.getDirect(new Integer(result),false,true);  setValue(new Integer(result));  actionCombo(new Integer(result));}  }
class C{  private static <E>ImmutableList<E> construct(Object... elements){  return asImmutableList(checkElementsNotNull(elements));}  }
class C{  protected SVGOMFEFloodElement(){}  }
class C{  public SlideInAnimation(View view){  this.view=view;  direction=DIRECTION_LEFT;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public void testReadSimplePropertyValue() throws Exception {  String json="{\"value\":[true,\"Foobar\",42,13]}";  Pojo p=MAPPER.readValue(json,Pojo.class);  assertNotNull(p.value);  assertTrue(p.value.complete);  assertEquals("Foobar",p.value.name);  assertEquals(42,p.value.x);  assertEquals(13,p.value.y);}  }
class C{  public static void bug(String trace) throws Error {  log.error(trace);  throw new Error(trace);}  }
class C{  @Override public void createConnectionFactory(String name,boolean ha,boolean useDiscovery,int cfType,String[] connectorNames,Object[] bindings) throws Exception {  checkStarted();  clearIO();  try {    if (useDiscovery) {      if (connectorNames == null || connectorNames.length == 0) {        throw new IllegalArgumentException("no discovery group name supplied");      }      server.createConnectionFactory(name,ha,JMSFactoryType.valueOf(cfType),connectorNames[0],JMSServerControlImpl.convert(bindings));    } else {      List<String> connectorList=new ArrayList<>(connectorNames.length);      for (      String str : connectorNames) {        connectorList.add(str);      }      server.createConnectionFactory(name,ha,JMSFactoryType.valueOf(cfType),connectorList,JMSServerControlImpl.convert(bindings));    }  }  finally {    blockOnIO();  }}  }
class C{  public ValueNode[] popArguments(int argSize){  ValueNode[] result=allocateArray(argSize);  for (int i=argSize - 1; i >= 0; i--) {    ValueNode x=xpop();    if (x == TWO_SLOT_MARKER) {      x=xpop();    }    assert x != null && x != TWO_SLOT_MARKER;    result[i]=x;  }  return result;}  }
class C{  public static <T>void writeField(Object object,String fieldName,Object value) throws NoSuchFieldException, IllegalFieldValue {  writeAvailableField(object.getClass(),object,fieldName,value);}  }
class C{  public static boolean isXML11Invalid(int c){  return !isXML11Valid(c);}  }
class C{  public Replace(){  super("text_transformation.replace",3);}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  private boolean doesHotkeyHaveAction(Hotkey hotkey){  return actions.get(hotkey.actionId) != null;}  }
class C{  public static boolean isValidDate(int year,int month,int day){  if (month < 1 || month > 12 || day < 1) {    return false;  }  if (year > 1582) {    if (month != 2) {      return day <= NORMAL_DAYS_PER_MONTH[month];    }    if ((year & 3) != 0) {      return day <= 28;    }    return day <= ((year % 100 != 0) || (year % 400 == 0) ? 29 : 28);  } else   if (year == 1582 && month == 10) {    return day <= 31 && (day < 5 || day > 14);  }  if (month != 2 && day <= NORMAL_DAYS_PER_MONTH[month]) {    return true;  }  return day <= ((year & 3) != 0 ? 28 : 29);}  }
class C{  public URLClassLoader(URL[] urls,ClassLoader parent){  this(urls,parent,null);}  }
class C{  public static String localTimeToString(LocalTime time){  return (time == null) ? "" : time.toString();}  }
class C{  public void notifyDataSetChanged(){  mDataSetObservable.notifyChanged();}  }
class C{  public static void revealInEditor(IProject project,MethodModel method,boolean activate){  SourceLocationTag line=getLine(method);  if (line != null) {    revealInEditor(project,line,activate);  }}  }
class C{  public static List<TestOperationDescriptor> filterChildren(List<TestOperationDescriptor> testDescriptors){  ImmutableList.Builder<TestOperationDescriptor> withoutChildren=ImmutableList.builder();  for (  TestOperationDescriptor testDescriptor : testDescriptors) {    if (!isParentSelected(testDescriptor,testDescriptors)) {      withoutChildren.add(testDescriptor);    }  }  return withoutChildren.build();}  }
class C{  public static void showCenterScreen(Window window){  window.pack();  Dimension sSize=Toolkit.getDefaultToolkit().getScreenSize();  Dimension wSize=window.getSize();  window.setLocation(((sSize.width - wSize.width) / 2),((sSize.height - wSize.height) / 2));  window.toFront();  window.setVisible(true);}  }
class C{  @Field(13) public Pointer<IDispatch> pdispVal(){  return this.io.getPointerField(this,13);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  protected ImageIcon makeImageIcon(){  BufferedImage image=this.getImage();  if (image == null)   return null;  BufferedImage iconImage=new BufferedImage(ICON_IMAGE_SIZE,ICON_IMAGE_SIZE,image.getType());  Graphics2D g=(Graphics2D)iconImage.getGraphics();  while (!g.drawImage(image,0,0,ICON_IMAGE_SIZE,ICON_IMAGE_SIZE,null)) {    continue;  }  g.dispose();  ImageIcon imageIcon=new ImageIcon(iconImage);  this.setValue(IMAGE_ICON,imageIcon);  return imageIcon;}  }
class C{  public boolean isVertexLabel(VertexLabelType v){  return globalEdgeLookup.get(v) != null;}  }
class C{  public boolean isArrayOfPrimitive(){  return arrayOfPrimitive;}  }
class C{  public void testCreateDocumentType1() throws Throwable {  String publicId="STAFF";  String systemId="staff.xml";  String malformedName="prefix::local";  Document doc;  DOMImplementation domImpl;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();{    boolean success=false;    try {      domImpl.createDocumentType(malformedName,publicId,systemId);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  private Object[] initializeCallerHierarchyRoots(Map<String,Map<String,Set<JsonElement>>> callerMap){  List<TreeElement<SourceMethodNode,SourceMethodNode>> roots=new ArrayList<TreeElement<SourceMethodNode,SourceMethodNode>>();  CallerHierarchy callerHierarchy=(CallerHierarchy)fInput;  SourceMethodNode rootNode=callerHierarchy.getRoot();  Set<SourceMethodNode> processedNodes=new HashSet<SourceMethodNode>();  TreeElement<SourceMethodNode,SourceMethodNode> root=initializeCallerHierarchy(rootNode,processedNodes,callerMap);  return new Object[]{root};}  }
class C{  public void addPacketWriterInterceptor(PacketInterceptor packetInterceptor,PacketFilter packetFilter){  addPacketInterceptor(packetInterceptor,packetFilter);}  }
class C{  public GetArtists(boolean albumartistsonly,String... properties){  super();  addParameterToRequest("albumartistsonly",albumartistsonly);  addParameterToRequest("properties",properties);}  }
class C{  public void addTradeOrderfill(TradeOrderfill tradeOrderfills){  this.tradeOrderfills.add(tradeOrderfills);}  }
class C{  public int partition(int left,int right,int pivotIndex){  E pivot=ar[pivotIndex];  E tmp=ar[right];  ar[right]=ar[pivotIndex];  ar[pivotIndex]=tmp;  int store=left;  for (int idx=left; idx < right; idx++) {    if (ar[idx].compareTo(pivot) <= 0) {      tmp=ar[idx];      ar[idx]=ar[store];      ar[store]=tmp;      store++;    }  }  tmp=ar[right];  ar[right]=ar[store];  ar[store]=tmp;  return store;}  }
class C{  public boolean removeGrid(final Grid grid){  final boolean result=gridList.remove(grid);  if (result) {    remove(grid);    revalidate();  }  return result;}  }
class C{  @Override public DriverTask discoverStorageSystem(StorageSystem storageSystem){  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_DISCOVER_STORAGE_SYSTEM);  try {    _log.info("3PARDriver:discoverStorageSystem information for storage system {}, name {} - start",storageSystem.getIpAddress(),storageSystem.getSystemName());    URI deviceURI=new URI("https",null,storageSystem.getIpAddress(),storageSystem.getPortNumber(),"/",null,null);    String uniqueId=deviceURI.toString();    uniqueId=uniqueId.replace("/","");    HP3PARApi hp3parApi=hp3parUtil.getHP3PARDevice(storageSystem);    String authToken=hp3parApi.getAuthToken(storageSystem.getUsername(),storageSystem.getPassword());    if (authToken == null) {      throw new HP3PARException("Could not get authentication token");    }    hp3parApi.verifyUserRole(storageSystem.getUsername());    SystemCommandResult systemRes=hp3parApi.getSystemDetails();    storageSystem.setSerialNumber(systemRes.getSerialNumber());    storageSystem.setMajorVersion(systemRes.getSystemVersion());    storageSystem.setMinorVersion("0");    List<String> protocols=new ArrayList<String>();    protocols.add(Protocols.iSCSI.toString());    protocols.add(Protocols.FC.toString());    storageSystem.setProtocols(protocols);    storageSystem.setFirmwareVersion(systemRes.getSystemVersion());    if (systemRes.getSystemVersion().startsWith("3.1") || systemRes.getSystemVersion().startsWith("3.2.1")) {      storageSystem.setIsSupportedVersion(false);    } else {      storageSystem.setIsSupportedVersion(true);    }    storageSystem.setModel(systemRes.getModel());    storageSystem.setProvisioningType(SupportedProvisioningType.THIN_AND_THICK);    Set<StorageSystem.SupportedReplication> supportedReplications=new HashSet<>();    supportedReplications.add(StorageSystem.SupportedReplication.elementReplica);    supportedReplications.add(StorageSystem.SupportedReplication.groupReplica);    storageSystem.setSupportedReplications(supportedReplications);    storageSystem.setNativeId(uniqueId + ":" + systemRes.getSerialNumber());    if (storageSystem.getDeviceLabel() == null) {      if (storageSystem.getDisplayName() != null) {        storageSystem.setDeviceLabel(storageSystem.getDisplayName());      } else       if (systemRes.getName() != null) {        storageSystem.setDeviceLabel(systemRes.getName());        storageSystem.setDisplayName(systemRes.getName());      }    }    storageSystem.setAccessStatus(AccessStatus.READ_WRITE);    setConnInfoToRegistry(storageSystem.getNativeId(),storageSystem.getIpAddress(),storageSystem.getPortNumber(),storageSystem.getUsername(),storageSystem.getPassword());    task.setStatus(DriverTask.TaskStatus.READY);    _log.info("3PARDriver: Successfull discovery storage system {}, name {} - end",storageSystem.getIpAddress(),storageSystem.getSystemName());  } catch (  Exception e) {    String msg=String.format("3PARDriver: Unable to discover the storage system %s ip %s; Error: %s.\n",storageSystem.getSystemName(),storageSystem.getIpAddress(),e);    _log.error(msg);    _log.error(CompleteError.getStackTrace(e));    task.setMessage(msg);    task.setStatus(DriverTask.TaskStatus.FAILED);    e.printStackTrace();  }  return task;}  }
class C{  private void registerKey(ClientIdentity id,PublicKey key) throws APIException {  JSONObject user_obj;  try {    user_obj=DAO.login_keys.getJSONObject(id.toString());  } catch (  Throwable e) {    user_obj=new JSONObject();    DAO.login_keys.put(id.toString(),user_obj);  }  if (user_obj.has(IO.getKeyHash(key)))   throw new APIException(422,"Key already registered");  user_obj.put(IO.getKeyHash(key),IO.getKeyAsString(key));  DAO.login_keys.commit();}  }
class C{  protected void initModules(Collection<IFloodlightModule> moduleSet) throws FloodlightModuleException {  for (  IFloodlightModule module : moduleSet) {    Map<Class<? extends IFloodlightService>,IFloodlightService> simpls=module.getServiceImpls();    if (simpls != null) {      for (      Entry<Class<? extends IFloodlightService>,IFloodlightService> s : simpls.entrySet()) {        if (logger.isDebugEnabled()) {          logger.debug("Setting " + s.getValue() + "  as provider for "+ s.getKey().getCanonicalName());        }        if (floodlightModuleContext.getServiceImpl(s.getKey()) == null) {          floodlightModuleContext.addService(s.getKey(),s.getValue());        } else {          throw new FloodlightModuleException("Cannot set " + s.getValue() + " as the provider for "+ s.getKey().getCanonicalName()+ " because "+ floodlightModuleContext.getServiceImpl(s.getKey())+ " already provides it");        }      }    }  }  for (  IFloodlightModule module : moduleSet) {    if (logger.isDebugEnabled()) {      logger.debug("Initializing " + module.getClass().getCanonicalName());    }    module.init(floodlightModuleContext);  }}  }
class C{  @Command(description="Deletes a certificate request") public void deleteCertificateRequest(@Param(name="certReqId",description="Certificate request ID") String certReqId) throws Exception {  Map<String,Object> logData=new LinkedHashMap<>();  logData.put(CERT_REQUEST_ID_PARAM,certReqId);  try {    SignerClient.execute(new DeleteCertRequest(certReqId));    AuditLogger.log(DELETE_THE_CERT_REQUEST_EVENT,XROAD_USER,logData);  } catch (  Exception e) {    AuditLogger.log(DELETE_THE_CERT_REQUEST_EVENT,XROAD_USER,e.getMessage(),logData);    throw e;  }}  }
class C{  void cleanupOperation(double newValue,double oldValue){}  }
class C{  String descr(){  return this._descr;}  }
class C{  public void testMultiplyMathContextDiffScalePosNeg(){  String a="987667796597975765768768767866756808779810457634781384756794987";  int aScale=100;  String b="747233429293018787918347987234564568";  int bScale=-70;  String c="7.3801839465418518653942222612429081498248509257207477E+68";  int cScale=-16;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(53,RoundingMode.HALF_UP);  BigDecimal result=aNumber.multiply(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  @Override public long replace(CookieEntity cookie){  SQLiteDatabase execute=getWriter();  ContentValues values=new ContentValues();  values.put(CookieSQLHelper.URI,cookie.getUri());  values.put(CookieSQLHelper.NAME,cookie.getName());  values.put(CookieSQLHelper.VALUE,cookie.getValue());  values.put(CookieSQLHelper.COMMENT,cookie.getComment());  values.put(CookieSQLHelper.COMMENT_URL,cookie.getCommentURL());  values.put(CookieSQLHelper.DISCARD,String.valueOf(cookie.isDiscard()));  values.put(CookieSQLHelper.DOMAIN,cookie.getDomain());  values.put(CookieSQLHelper.EXPIRY,cookie.getExpiry());  values.put(CookieSQLHelper.PATH,cookie.getPath());  values.put(CookieSQLHelper.PORT_LIST,cookie.getPortList());  values.put(CookieSQLHelper.SECURE,String.valueOf(cookie.isSecure()));  values.put(CookieSQLHelper.VERSION,cookie.getVersion());  try {    return execute.replace(CookieSQLHelper.TABLE_NAME,null,values);  } catch (  Exception e) {    return -1;  } finally {    closeWriter(execute);  }}  }
class C{  private boolean isContinuous(){  if (!table.keySet().isEmpty()) {    for (    Value v : getValues()) {      if (!(v instanceof ArrayVal) && !(v instanceof DoubleVal) && !(v instanceof NoneVal)) {        return false;      }    }    if (getValues().size() > 1) {      return true;    }  }  return false;}  }
class C{  public DelimitedWordReader(Reader r,int bufferSize,CharSet delimiters){  super(r,bufferSize);  this.delimiters=new CharOpenHashSet(delimiters,Hash.VERY_FAST_LOAD_FACTOR);  addCrLf();}  }
class C{  public static void noSpace(String string) throws JSONException {  int i, length=string.length();  if (length == 0) {    throw new JSONException("Empty string.");  }  for (i=0; i < length; i+=1) {    if (Character.isWhitespace(string.charAt(i))) {      throw new JSONException("'" + string + "' contains a space character.");    }  }}  }
class C{  public static MaxProjectionExpression max(String propertyName){  return new MaxProjectionExpression(getPropExpr(propertyName),false);}  }
class C{  private String cleanRemoteName(String branchName) throws GitException {  String returnName=branchName;  List<Remote> remotes=this.remoteList(newDto(RemoteListRequest.class));  for (  Remote remote : remotes) {    if (branchName.startsWith(remote.getName())) {      returnName=branchName.replaceFirst(remote.getName() + "/","");    }  }  return returnName;}  }
class C{  public boolean accept(File file){  if (file.isDirectory()) {    return true;  }  String filename=file.getName().toLowerCase();  return filename.endsWith(".xml") || filename.endsWith(".xml.gz");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.328 -0500",hash_original_method="91B0980C21C7F267937CEFAA60D652AB",hash_generated_method="586111467C9DB306D8F6FAE813537546") public boolean delete(String name){  String lcName=name.toLowerCase();  if (this.hmap.containsKey(lcName)) {    this.hmap.remove(lcName);    return true;  } else {    return false;  }}  }
class C{  public static ConfigFileWatcher defaultInstance(){  if (DEFAULT_INSTANCE == null) {synchronized (ConfigFileWatcher.class) {      if (DEFAULT_INSTANCE == null) {        DEFAULT_INSTANCE=new ConfigFileWatcher(DEFAULT_POLL_PERIOD_SECONDS);      }    }  }  return DEFAULT_INSTANCE;}  }
class C{  protected String decode(final String encodedValue,String encoding){  return UriUtils.decode(encodedValue,encoding);}  }
class C{  public static void fixAspectRatioContained(RectF r,float w,float h){  float origW=r.width();  float origH=r.height();  float origA=origW / origH;  float a=w / h;  float finalW=origW;  float finalH=origH;  if (origA < a) {    finalH=origW / a;    r.top=r.centerY() - finalH / 2;    r.bottom=r.top + finalH;  } else {    finalW=origH * a;    r.left=r.centerX() - finalW / 2;    r.right=r.left + finalW;  }}  }
class C{  @Override public final void normalize(){  Node next;  for (Node node=getFirstChild(); node != null; node=next) {    next=node.getNextSibling();    node.normalize();    if (node.getNodeType() == Node.TEXT_NODE) {      ((TextImpl)node).minimize();    }  }}  }
class C{  public GravityCompassProvider(SensorManager sensorManager){  super(sensorManager);  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY));  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD));}  }
class C{  private TaskData loadTaskData(ITask task){  TaskData taskData=null;  try {    taskData=TasksUi.getTaskDataManager().getTaskData(task);  } catch (  CoreException e) {    AppraiseUiPlugin.logError("Failed to load task data " + task.getTaskId(),e);  }  return taskData;}  }
class C{  public TrAXFilter(Templates templates) throws TransformerConfigurationException {  m_templates=templates;  m_transformer=(TransformerImpl)templates.newTransformer();}  }
class C{  @Override public void validate(final GameData data) throws GameParseException {  super.validate(data);  validateNames(m_alliedOwnershipTerritories);  validateNames(m_enemyExclusionTerritories);  validateNames(m_enemySurfaceExclusionTerritories);  validateNames(m_alliedExclusionTerritories);  validateNames(m_directExclusionTerritories);  validateNames(m_directOwnershipTerritories);  validateNames(m_directPresenceTerritories);  validateNames(m_alliedPresenceTerritories);  validateNames(m_enemyPresenceTerritories);}  }
class C{  static public PrefixCoder newCoder(final DecoderInputs decoderInputs){  return newCoder(decoderInputs.getShortestCodeWord(),decoderInputs.getLengths(),decoderInputs.getSymbols());}  }
class C{  public UserEntry addAdminPrivilege(String username) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Setting admin privileges for user '" + username + "'.");  URL retrieveUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  UserEntry userEntry=userService.getEntry(retrieveUrl,UserEntry.class);  userEntry.getLogin().setAdmin(true);  URL updateUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  return userService.update(updateUrl,userEntry);}  }
class C{  private <E extends IMatchingRuleProvider>E identify(InvocationSequenceData invocSequence,List<E> ruleProviders){  for (  E ruleProvider : ruleProviders) {    boolean ruleMatches=ruleProvider.getMatchingRuleExpression().evaluate(invocSequence,cachedDataService);    if (ruleMatches) {      return ruleProvider;    }  }  return null;}  }
class C{  public boolean isLong(String key){  Object val=get(key);  return val instanceof Long;}  }
class C{  public Vector2 ceil(){  x=(float)Math.ceil(x);  z=(float)Math.ceil(z);  return this;}  }
class C{  public boolean isAttribute(){  return true;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String inputFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  String str;  int numImages=0;  int progress=0;  double cellsize=0;  double north=0;  double east=0;  double west=0;  double south=0;  double cdedNoData=-32767;  double whiteboxNoData=-32768d;  double z=0;  String delimiter=" ";  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  FileInputStream fis=null;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      inputFile=imageFiles[i];      if (!((new File(inputFile)).exists())) {        showFeedback("DEM file does not exist.");        return;      }      if (inputFile.lastIndexOf(".") >= 0) {        String extension=inputFile.substring(inputFile.lastIndexOf("."));        whiteboxHeaderFile=inputFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=inputFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      WhiteboxRaster wbr=null;      fis=new FileInputStream(inputFile);      rows=0;      cols=0;      row=0;      col=0;      long validValueNum=0;      int oldProgress=-1;      byte[] bytes=new byte[1024];      int remaining=bytes.length;      int blockNumber=1;      while (true) {        int read=fis.read(bytes,bytes.length - remaining,remaining);        if (read >= 0) {          remaining-=read;          str=new String(bytes,Charset.forName("US-ASCII"));          if (remaining == 0) {            if (blockNumber == 1) {              String producer=str.substring(40,100).trim();              String southwest=str.substring(109,135);              String processCode=str.substring(135,136).trim();              String originCode=str.substring(140,144).trim();              int demLevelCode=Integer.parseInt(str.substring(144,150).trim());              int elevationPattern=Integer.parseInt(str.substring(150,156).trim());              String str2=str.substring(156,162).trim();              String refSystem="";switch (str2) {case "0":                refSystem="geographic";              break;case "1":            refSystem="UTM";          break;case "2":        refSystem="state plane";      break;default :    refSystem="geographic";}String xyUnits="";str2=str.substring(533,539).trim();switch (str2) {case "0":  xyUnits="radians";break;case "1":xyUnits="feet";break;case "2":xyUnits="meters";break;case "3":xyUnits="arc seconds";break;default :xyUnits="arc seconds";}if (xyUnits.equals("arc seconds")) {xyUnits="degrees";}String zUnits="";str2=str.substring(539,545).trim();switch (str2) {case "1":zUnits="feet";break;case "2":zUnits="meters";break;default :zUnits="meters";}west=Double.parseDouble(str.substring(546,570).trim()) / 3600;south=Double.parseDouble(str.substring(570,594).trim()) / 3600;north=Double.parseDouble(str.substring(618,642).trim()) / 3600;east=Double.parseDouble(str.substring(652,676).trim()) / 3600;cols=Integer.parseInt(str.substring(858,864).trim());;rows=1201;fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + "float";out.println(str1);str1="Z Units:\t" + zUnits;out.println(str1);str1="XY Units:\t" + xyUnits;out.println(str1);str1="Projection:\t" + refSystem;out.println(str1);str1="Data Scale:\tcontinuous";out.println(str1);str1="Preferred Palette:\t" + "spectrum.pal";out.println(str1);str1="NoData:\t" + whiteboxNoData;out.println(str1);if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");row=rows - 1;col=0;} else {String[] splitStr=str.split(" ");if (wbr == null) {showFeedback("Error reading file.");return;}for (String splitStr1 : splitStr) {if (!splitStr1.trim().isEmpty()) {validValueNum++;if (validValueNum >= 10) {z=Double.parseDouble(splitStr1);if (z != cdedNoData) {wbr.setValue(row,col,z);} else {wbr.setValue(row,col,whiteboxNoData);}row--;if (row == -1) {validValueNum=0;row=rows - 1;col++;progress=(int)(100f * col / (cols - 1));if (progress > oldProgress) {updateProgress(progress);oldProgress=progress;}}}}}}blockNumber++;remaining=bytes.length;}} else {if (remaining < bytes.length) {}break;}}if (wbr == null) {showFeedback("Error reading file.");return;}wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");wbr.addMetadataEntry("Created on " + new Date());wbr.flush();wbr.findMinAndMaxVals();wbr.close();returnData(whiteboxHeaderFile);}} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {if (out != null || bw != null) {out.flush();out.close();}if (fis != null) {try {fis.close();} catch (IOException e) {}}updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  private void usage(String message){  StringBuilder sb=new StringBuilder();  sb.append(message);  sb.append(System.getProperty("line.separator"));  sb.append(System.getProperty("line.separator"));  sb.append("java -cp wbxml-jaxb-X.X.X.jar ");  sb.append(this.getClass().getName());  sb.append(" [-j --jaxb] [-t --type <TYPE>] [-k --keep] [-d --definition <NAME>] {infile} {outfile}");  sb.append(System.getProperty("line.separator"));  sb.append("       -j --jaxb: Use JAXB instead instead default DOM");  sb.append(System.getProperty("line.separator"));  sb.append("      -e --event: Use XMLEventWriter instead of the default XMLStreamWriter");  sb.append(System.getProperty("line.separator"));  sb.append("                  In order to use JAXB the classes should be generated from the DTD (xjc)");  sb.append(System.getProperty("line.separator"));  sb.append("       -t --type: Type of STR table use. Values: IF_NEEDED (default), ALWAYS, NO");  sb.append(System.getProperty("line.separator"));  sb.append("       -k --keep: Keep spaces from the XML (default no)");  sb.append(System.getProperty("line.separator"));  sb.append(" -d --definition: Force definition instead deriving from XML. Current definitions:");  sb.append(System.getProperty("line.separator"));  for (  WbXmlDefinition d : WbXmlInitialization.getDefinitions()) {    sb.append(String.format("                  %s",d.getName()));    sb.append(System.getProperty("line.separator"));  }  sb.append("          infile: input XML file (\"-\" means standard input)");  sb.append(System.getProperty("line.separator"));  sb.append("         outfile: output WBXML file (\"-\" means sntandard output)");  sb.append(System.getProperty("line.separator"));  throw new IllegalArgumentException(sb.toString());}  }
class C{  public Rational subtract(Rational secondRational){  long n=r[0] * secondRational.getDenominator() - r[1] * secondRational.getNumerator();  long d=r[1] * secondRational.getDenominator();  return new Rational(n,d);}  }
class C{  public static String toOptionSynopsis(Tag[] tags){  String result;  int i;  result="";  for (i=0; i < tags.length; i++) {    result+="\t\t" + tags[i].getIDStr() + " = "+ tags[i].getReadable()+ "\n";  }  return result;}  }
class C{  public void willNotRecreate(boolean willNotRecreate){  this.willNotRecreate=willNotRecreate;}  }
class C{  public ComposedContent createComposedContent(){  ComposedContentImpl composedContent=new ComposedContentImpl();  return composedContent;}  }
class C{  protected void onBluetoothDisabled(){}  }
class C{  public static void notify(Context context,int id,android.app.Notification notification){  ((android.app.NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE)).notify(id,notification);}  }
class C{  public int trueBitCount(){  return arr.length;}  }
class C{  private void centerCamera(){  PLayer layer=getLayer();  PCamera camera=getCamera();  PBounds fullBounds=layer.getFullBoundsReference();  double shortestSide=Math.min(fullBounds.getHeight(),fullBounds.getWidth());  double padding=Math.min(VIEW_PADDING,shortestSide * 0.1d);  PBounds paddedBounds=new PBounds(fullBounds.getX() - padding,fullBounds.getY() - padding,fullBounds.getWidth() + (2 * padding),fullBounds.getHeight() + (2 * padding));  camera.animateViewToCenterBounds(paddedBounds,true,0L);}  }
class C{  public NgnSipStack(SipCallback callback,String realmUri,String impiUri,String impuUri){  super(callback,realmUri,impiUri,impuUri);  mNetworkService=NgnEngine.getInstance().getNetworkService();  String dnsServer;  if ((dnsServer=mNetworkService.getDnsServer(DNS_TYPE.DNS_1)) != null && !dnsServer.equals("0.0.0.0")) {    this.addDnsServer(dnsServer);    if ((dnsServer=mNetworkService.getDnsServer(DNS_TYPE.DNS_2)) != null && !dnsServer.equals("0.0.0.0")) {      this.addDnsServer(dnsServer);    }  } else {    this.addDnsServer("212.27.40.241");  }  super.addHeader("Allow","INVITE, ACK, CANCEL, BYE, MESSAGE, OPTIONS, NOTIFY, PRACK, UPDATE, REFER");  super.addHeader("Privacy","none");  super.addHeader("P-Access-Network-Info","ADSL;utran-cell-id-3gpp=00000000");  super.addHeader("User-Agent",String.format("IM-client/OMA1.0 android-ngn-stack/v%s (doubango r%s - %s)",NgnApplication.getVersionName(),NgnApplication.getContext().getString(R.string.doubango_revision),Build.MODEL));}  }
class C{  @Override public DateTime nowUtc(){  return DateTime.now(UTC);}  }
class C{  public InflaterInputStream(InputStream in){  this(in,new Inflater());  usesDefaultInflater=true;}  }
class C{  public static int compareDecimals(String dec1,String dec2){  dec1=normalizeDecimal(dec1);  dec2=normalizeDecimal(dec2);  return compareCanonicalDecimals(dec1,dec2);}  }
class C{  @Override protected void merge(List<BlockT> statesList){  super.merge(statesList);  PartialEscapeBlockState<?>[] states=new PartialEscapeBlockState<?>[statesList.size()];  for (int i=0; i < statesList.size(); i++) {    states[i]=statesList.get(i);  }  int[] virtualObjTemp=intersectVirtualObjects(states);  boolean materialized;  do {    materialized=false;    if (PartialEscapeBlockState.identicalObjectStates(states)) {      newState.adoptAddObjectStates(states[0]);    } else {      for (      int object : virtualObjTemp) {        if (PartialEscapeBlockState.identicalObjectStates(states,object)) {          newState.addObject(object,states[0].getObjectState(object).share());          continue;        }        int virtualCount=0;        ObjectState startObj=states[0].getObjectState(object);        boolean locksMatch=true;        boolean ensureVirtual=true;        ValueNode uniqueMaterializedValue=startObj.isVirtual() ? null : startObj.getMaterializedValue();        for (int i=0; i < states.length; i++) {          ObjectState obj=states[i].getObjectState(object);          ensureVirtual&=obj.getEnsureVirtualized();          if (obj.isVirtual()) {            virtualCount++;            uniqueMaterializedValue=null;            locksMatch&=obj.locksEqual(startObj);          } else           if (obj.getMaterializedValue() != uniqueMaterializedValue) {            uniqueMaterializedValue=null;          }        }        if (virtualCount == states.length && locksMatch) {          materialized|=mergeObjectStates(object,null,states);        } else {          if (uniqueMaterializedValue != null) {            newState.addObject(object,new ObjectState(uniqueMaterializedValue,null,ensureVirtual));          } else {            PhiNode materializedValuePhi=getPhi(object,StampFactory.forKind(JavaKind.Object));            mergeEffects.addFloatingNode(materializedValuePhi,"materializedPhi");            for (int i=0; i < states.length; i++) {              ObjectState obj=states[i].getObjectState(object);              if (obj.isVirtual()) {                Block predecessor=getPredecessor(i);                if (!ensureVirtual && obj.isVirtual()) {                  obj.setEnsureVirtualized(false);                }                materialized|=ensureMaterialized(states[i],object,predecessor.getEndNode(),blockEffects.get(predecessor),COUNTER_MATERIALIZATIONS_MERGE);                obj=states[i].getObjectState(object);              }              setPhiInput(materializedValuePhi,i,obj.getMaterializedValue());            }            newState.addObject(object,new ObjectState(materializedValuePhi,null,false));          }        }      }    }    for (    PhiNode phi : getPhis()) {      aliases.set(phi,null);      if (hasVirtualInputs.isMarked(phi) && phi instanceof ValuePhiNode) {        materialized|=processPhi((ValuePhiNode)phi,states,virtualObjTemp);      }    }    if (materialized) {      newState.resetObjectStates(virtualObjects.size());      mergeEffects.clear();      afterMergeEffects.clear();    }  } while (materialized);}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String creekHeader=null;  String ttControlHeader=null;  String eacOutputHeader=null;  String dfcOutputHeader=null;  String gtcOutputHeader=null;  String ttpOutputHeader=null;  WhiteboxRaster dem;  WhiteboxRaster creek;  WhiteboxRaster ttControl=null;  WhiteboxRaster eacOutput;  WhiteboxRaster dfcOutput;  WhiteboxRaster gtcOutput;  WhiteboxRaster ttpOutput;  int numCols, numRows;  double gridRes;  boolean blnTTControl=true;  int flowIndex;  List<FlowCell> flowPath=new ArrayList<>();  int c;  int x, y;  int xn, yn;  double p;  int maxDirection;  double grad, maxGrad;  double deltaElev;  double deltaXY;  int radius;  float maxRadius=200;  int maxX=0, maxY=0;  double ttControlMean;  int[] xd=new int[]{0,-1,-1,-1,0,1,1,1};  int[] yd=new int[]{-1,-1,0,1,1,1,0,-1};  double[] dd=new double[]{1,Math.sqrt(2),1,Math.sqrt(2),1,Math.sqrt(2),1,Math.sqrt(2)};  double noData;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      creekHeader=args[i];    } else     if (i == 2) {      ttControlHeader=args[i];      if (ttControlHeader.toLowerCase().contains("not specified")) {        blnTTControl=false;      }    } else     if (i == 3) {      eacOutputHeader=args[i];    } else     if (i == 4) {      dfcOutputHeader=args[i];    } else     if (i == 5) {      gtcOutputHeader=args[i];    } else     if (i == 6) {      ttpOutputHeader=args[i];    }  }  if ((demHeader == null) || (creekHeader == null) || (eacOutputHeader == null)|| (dfcOutputHeader == null)|| (gtcOutputHeader == null)|| (ttpOutputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    creek=new WhiteboxRaster(creekHeader,"r");    if (blnTTControl == true) {      ttControl=new WhiteboxRaster(ttControlHeader,"r");    }    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    eacOutput=new WhiteboxRaster(eacOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    eacOutput.setPreferredPalette("blueyellow.pal");    eacOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    eacOutput.setZUnits("dimensionless");    dfcOutput=new WhiteboxRaster(dfcOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    dfcOutput.setPreferredPalette("blueyellow.pal");    dfcOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    dfcOutput.setZUnits("dimensionless");    gtcOutput=new WhiteboxRaster(gtcOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    gtcOutput.setPreferredPalette("blueyellow.pal");    gtcOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    gtcOutput.setZUnits("dimensionless");    ttpOutput=new WhiteboxRaster(ttpOutputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    ttpOutput.setPreferredPalette("blueyellow.pal");    ttpOutput.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    ttpOutput.setZUnits("dimensionless");    updateProgress("Loop 1 of 2:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (dem.getValue(row,col) != noData) {          if (creek.getValue(row,col) <= 0) {            eacOutput.setValue(row,col,-1048);          }        } else {          eacOutput.setValue(row,col,noData);          dfcOutput.setValue(row,col,noData);          gtcOutput.setValue(row,col,noData);          ttpOutput.setValue(row,col,noData);        }      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (eacOutput.getValue(row,col) == -1048) {          flowIndex=-1;          flowPath=new ArrayList<>();          x=col;          y=row;          while (eacOutput.getValue(y,x) == -1048) {            flowIndex=flowIndex + 1;            flowPath.add(new FlowCell(y,x));            p=dem.getValue(y,x);            maxDirection=-1;            maxGrad=0;            for (c=0; c < 8; c++) {              xn=x + xd[c];              yn=y + yd[c];              if (dem.getValue(yn,xn) != noData) {                grad=(p - dem.getValue(yn,xn)) / (dd[c] * gridRes);                if (grad > maxGrad) {                  maxGrad=grad;                  maxDirection=c;                }              }            }            if (maxDirection > -1) {              x=x + xd[maxDirection];              y=y + yd[maxDirection];            } else {              radius=1;              do {                for (int i=-radius; i <= radius; i++) {                  for (int j=-radius; j <= radius; j++) {                    if (Math.abs(i) > radius - 1 || Math.abs(j) > radius - 1) {                      xn=x + i;                      yn=y + j;                      if (dem.getValue(yn,xn) != noData && dem.getValue(yn,xn) < p) {                        grad=(p - dem.getValue(yn,xn)) / (Math.sqrt(i * i + j * j) * gridRes);                        if (grad > maxGrad) {                          maxGrad=grad;                          maxX=xn;                          maxY=yn;                        }                      }                    }                  }                }                radius=radius + 1;              } while (maxGrad == 0 & radius <= maxRadius);              if (maxGrad > 0) {                x=maxX;                y=maxY;              } else {                eacOutput.setValue(y,x,noData);                dfcOutput.setValue(y,x,noData);                gtcOutput.setValue(y,x,noData);                ttpOutput.setValue(y,x,noData);              }            }          }          if (eacOutput.getValue(y,x) == noData) {            eacOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);            dfcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);            gtcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);            ttpOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,noData);          } else {            deltaElev=dem.getValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex) - dem.getValue(y,x);            deltaXY=Math.sqrt(Math.pow(flowPath.get(flowIndex).rowIndex - y,2) + Math.pow(flowPath.get(flowIndex).columnIndex - x,2)) * gridRes;            eacOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,eacOutput.getValue(y,x) + deltaElev);            dfcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,dfcOutput.getValue(y,x) + deltaXY);            gtcOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,(gtcOutput.getValue(y,x) * dfcOutput.getValue(y,x) + deltaElev) / dfcOutput.getValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex));            if (blnTTControl == false) {              ttpOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,ttpOutput.getValue(y,x) + Math.pow(deltaXY,2) / deltaElev);            } else {              ttControlMean=(ttControl.getValue(y,x) + ttControl.getValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex)) / 2;              ttpOutput.setValue(flowPath.get(flowIndex).rowIndex,flowPath.get(flowIndex).columnIndex,ttpOutput.getValue(y,x) + Math.pow(deltaXY,2) / (deltaElev * ttControlMean));            }          }          for (int i=flowIndex - 1; i >= 0; i--) {            if (eacOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) == noData) {              eacOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);              dfcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);              gtcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);              ttpOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,noData);            } else {              deltaElev=dem.getValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex) - dem.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex);              deltaXY=Math.sqrt(Math.pow(flowPath.get(i).rowIndex - flowPath.get(i + 1).rowIndex,2) + Math.pow(flowPath.get(i).columnIndex - flowPath.get(i + 1).columnIndex,2)) * gridRes;              eacOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,eacOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + deltaElev);              dfcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,dfcOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + deltaXY);              gtcOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,(gtcOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) * dfcOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + deltaElev) / dfcOutput.getValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex));              if (blnTTControl == false) {                ttpOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,ttpOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + Math.pow(deltaXY,2) / deltaElev);              } else {                ttControlMean=(ttControl.getValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex) + ttControl.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex)) / 2;                ttpOutput.setValue(flowPath.get(i).rowIndex,flowPath.get(i).columnIndex,ttpOutput.getValue(flowPath.get(i + 1).rowIndex,flowPath.get(i + 1).columnIndex) + Math.pow(deltaXY,2) / (deltaElev * ttControlMean));              }            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    eacOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    eacOutput.addMetadataEntry("Created on " + new Date());    dfcOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    dfcOutput.addMetadataEntry("Created on " + new Date());    gtcOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    gtcOutput.addMetadataEntry("Created on " + new Date());    ttpOutput.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    ttpOutput.addMetadataEntry("Created on " + new Date());    dem.close();    creek.close();    if (blnTTControl == true) {      ttControl.close();    }    eacOutput.close();    dfcOutput.close();    gtcOutput.close();    ttpOutput.close();    returnData(eacOutputHeader);  } catch (  Exception e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public synchronized void removePropertyChangeListener(PropertyChangeListener listener){  listenerList.remove(listener);}  }
class C{  public void addText(int x,int y,String stuff,int justify,LinkProperties properties) throws IOException {  LinkText.write(x,y,stuff,LinkText.DEFAULT_FONT,justify,properties,link.dos);}  }
class C{  public void addParameter(OptionID optionid,Object value){  parameters.add(new ParameterPair(optionid,value));}  }
class C{  public static Collection<PdxType> pdxDeleteField(String dsName,File[] dsDirs,String className,String fieldName) throws Exception {  try {    DiskStoreImpl dsi=createForOfflineModify(dsName,dsDirs);    return dsi.pdxDeleteField(className,fieldName);  }  finally {    cleanupOffline();  }}  }
class C{  private static void alt(int[] n1,int[] n2,int[] sum){  int b=n1.length;  sum[b]=0;  while (--b >= 0) {    int s=n1[b] + n2[b] + sum[b + 1];    sum[b + 1]=s % 10;    sum[b]=s / 10;  }}  }
class C{  public static String[] split(String str,String delims){  return split(str,delims,false);}  }
class C{  public static MekaFrame launchApplication(Class panelCls,String title,boolean center,String[] args) throws Exception {  Project.initialize();  GenericObjectEditor.registerAllEditors();  JPanel panel=(JPanel)panelCls.newInstance();  MekaFrame result=new MekaFrame();  result.setTitle(title);  result.setDefaultCloseOperation(MekaFrame.EXIT_ON_CLOSE);  String icon=GUIHelper.getDefaultFrameIcon(panelCls);  if ((icon != null) && (GUIHelper.getIcon(icon) != null))   result.setIconImage(GUIHelper.getIcon(icon).getImage()); else   result.setIconImage(GUIHelper.getLogoIcon().getImage());  result.setLayout(new BorderLayout());  result.add(panel,BorderLayout.CENTER);  if (panel instanceof MenuBarProvider)   result.setJMenuBar(((MenuBarProvider)panel).getMenuBar());  if (GUIHelper.getPackFrame(panel.getClass()))   result.pack(); else   result.setSize(GUIHelper.getDefaultFrameDimensions(panel.getClass()));  if (center)   result.setLocationRelativeTo(null);  result.setVisible(true);  if ((panel instanceof CommandLineArgsHandler) && (args.length > 0))   ((CommandLineArgsHandler)panel).processCommandLineArgs(args);  return result;}  }
class C{  @Override public void paint(Graphics g){  float a=getAlpha();  if (a == 1) {    super.paint(g);  } else {    BufferedImage img=GraphicsUtilities.createCompatibleTranslucentImage(getWidth(),getHeight());    Graphics2D gfx=img.createGraphics();    super.paint(gfx);    gfx.dispose();    Graphics2D g2d=(Graphics2D)g;    Composite oldComp=g2d.getComposite();    Composite alphaComp=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,a);    g2d.setComposite(alphaComp);    g2d.drawImage(img,null,0,0);    g2d.setComposite(oldComp);  }}  }
class C{  public void attributeAsClass(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().attributeAsClass();}  }
class C{  public static <T extends Comparable<? super T>>T median(final T... items){  Validate.notEmpty(items);  Validate.noNullElements(items);  final TreeSet<T> sort=new TreeSet<T>();  Collections.addAll(sort,items);  @SuppressWarnings("unchecked") final T result=(T)sort.toArray()[(sort.size() - 1) / 2];  return result;}  }
class C{  default void classLoaderDestroy(DynamicClassLoader loader){}  }
class C{  public void workspaceProp(String file,Action<Map<String,String>> configSupplier){  workspaceToContent.put(file,ConfigMisc.props(configSupplier));}  }
class C{  public void rootToLeafPaths(BinaryNode<E> node,E[] pathList,int pathLength){  if (node == null)   return;  pathList[pathLength]=node.value;  pathLength++;  if (node.left == null && node.right == null) {    int i;    for (i=0; i < pathLength - 1; i++) {      out.print(pathList[i] + " -> ");    }    out.println(pathList[i]);  } else {    rootToLeafPaths(node.left,pathList,pathLength);    rootToLeafPaths(node.right,pathList,pathLength);  }}  }
class C{  @Override public Result evaluate(TaskRequest taskRequest,VirtualMachineCurrentState targetVM,TaskTrackerState taskTrackerState){  String targetHostAttrVal=getAttrValue(targetVM.getCurrAvailableResources());  if (targetHostAttrVal == null || targetHostAttrVal.isEmpty()) {    return new Result(false,hostAttributeName + " attribute unavailable on host " + targetVM.getCurrAvailableResources().hostname());  }  String requiredAttrVal=hostAttributeValueGetter.call(taskRequest.getId());  return targetHostAttrVal.equals(requiredAttrVal) ? new Result(true,"") : new Result(false,"Host attribute " + hostAttributeName + ": required="+ requiredAttrVal+ ", got="+ targetHostAttrVal);}  }
class C{  public static void debug(String message){  if (Options.DEBUG)   System.out.println(message);}  }
class C{  public AgentAppEnvironmentView createEnvironmentView(){  return new NQueensView();}  }
class C{  public boolean add(E o){  return map.put(o,PRESENT) == null;}  }
class C{  synchronized public void releaseXMLReader(XMLReader reader){  if (m_readerManager != null) {    m_readerManager.releaseXMLReader(reader);  }}  }
class C{  private void outputWarehouses(Properties ctx,PrintWriter out,int orgID,int warehouseID,boolean includeAny){  out.println("<warehouses orgID='" + orgID + "'>");  if (includeAny) {    out.println("<warehouse id='-1'");    if (warehouseID == 0)     out.println(" selected='selected'");    out.println(">ANY</warehouse>");  }  for (  MWarehouse warehouse : MWarehouse.getForOrg(ctx,orgID)) {    out.print("<warehouse id='" + warehouse.getM_Warehouse_ID() + "'");    if (warehouseID == warehouse.getM_Warehouse_ID())     out.print(" selected='selected'");    out.println(">" + Util.maskHTML(warehouse.getName()) + "</warehouse>");  }  out.println("</warehouses>");}  }
class C{  public boolean verifyKeyedChecksum(byte[] data,EncryptionKey key,int usage) throws KdcErrException, KrbApErrException, KrbCryptoException {  CksumType cksumEngine=CksumType.getInstance(cksumType);  if (!cksumEngine.isSafe())   throw new KrbApErrException(Krb5.KRB_AP_ERR_INAPP_CKSUM);  return cksumEngine.verifyKeyedChecksum(data,data.length,key.getBytes(),checksum,usage);}  }
class C{  private boolean isPaymentTypeAvailable(VOOperatorOrganization voOrg,PaymentInfoType type){  if (operatorSelectOrgBean.getOrganization() == null) {    return false;  }  List<VOPaymentType> paymentTypes=voOrg.getPaymentTypes();  for (  VOPaymentType voPaymentType : paymentTypes) {    if (voPaymentType.getPaymentTypeId().equals(type.name())) {      return true;    }  }  return false;}  }
class C{  public SphereFunction(Sphere s){  this.sphere=s;}  }
class C{  public ByteState add(byte b){  lastAccepted=head;  ByteState state=ByteState.NONE;  if (escape) {    state=ByteState.ESCAPE;    escape=false;    current=head;  } else {    int index=b & 0xFF;    ByteTrie next=current.links[index];    if (next == null) {      state=ByteState.ACCEPTED;      current=head;    } else {      state=next.state;      lastAccepted=next;      if (next.escape) {        current=next;        escape=true;      } else       if (state == ByteState.ACCEPTED) {        current=head;      } else {        current=next;      }    }  }  return state;}  }
class C{  public static void fill(boolean[] array,int start,int end,boolean value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public void play(){  animation.play();}  }
class C{  public void updateSynapseNodePositions(){  for (  SynapseNode synapseNode : connectedSynapses) {    synapseNode.updatePosition();  }}  }
class C{  public static PsiFile findLayoutResource(PsiElement element){  if (element == null) {    return null;  }  if (!(element instanceof PsiIdentifier)) {    return null;  }  PsiElement layout=element.getParent().getFirstChild();  if (layout == null) {    return null;  }  if (!"R.layout".equals(layout.getText())) {    return null;  }  Project project=element.getProject();  String name=String.format("%s.xml",element.getText());  return resolveLayoutResourceFile(element,project,name);}  }
class C{  public final void flairConfig(String flair_enabled,FlairPosition flair_position,Boolean flair_self_assign_enabled,FlairPosition link_flair_position,Boolean link_flair_self_assign_enabled){  String requesturl=ApiURL + Endpoints.FLAIR_CONFIG;  List<NameValuePair> urlParameters=new ArrayList<>();  urlParameters.add(new BasicNameValuePair("api_type","json"));  urlParameters.add(new BasicNameValuePair("flair_enabled",flair_enabled));  urlParameters.add(new BasicNameValuePair("flair_position",flair_position.toString()));  urlParameters.add(new BasicNameValuePair("flair_self_assign_enabled",flair_self_assign_enabled.toString()));  urlParameters.add(new BasicNameValuePair("link_flair_position",link_flair_position.toString()));  urlParameters.add(new BasicNameValuePair("link_flair_self_assign_enabled",link_flair_self_assign_enabled.toString()));  this.makeHttpRequest(requesturl,urlParameters);}  }
class C{  @ObjectiveCName("isBot") public boolean isBot(){  return isBot;}  }
class C{  public final boolean isInfoEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_INFO);}  }
class C{  private static URI removeQuery(final URI link){  final String query=link.getRawQuery();  final URI uri;  if (query == null) {    uri=link;  } else {    final String href=link.toString();    uri=URI.create(href.substring(0,href.length() - query.length() - 1));  }  return uri;}  }
class C{  @SuppressWarnings("unused") public void testCreate() throws IOException, EagleServiceClientException, IllegalAccessException, InstantiationException {  EntityDefinition entityDefinition=EntityDefinitionManager.getEntityDefinitionByEntityClass(GenericMetricEntity.class);  hbase.createTable(entityDefinition.getTable(),entityDefinition.getColumnFamily());  client=new EagleServiceClientImpl("localhost",EagleConfigFactory.load().getServicePort());  List<GenericMetricEntity> metricEntityList=new ArrayList<GenericMetricEntity>();  GenericServiceAPIResponseEntity<String> unTypedResponse=client.create(metricEntityList);  GenericServiceAPIResponseEntity<String> weakTypedResponse=client.create(metricEntityList,GenericMetricEntity.GENERIC_METRIC_SERVICE);  GenericServiceAPIResponseEntity<String> strongTypedResponse=client.create(metricEntityList,GenericMetricEntity.class);  GenericServiceAPIResponseEntity<GenericMetricEntity> weakTypedSearchResponse=client.search("").send();  if (weakTypedSearchResponse != null) {    Class<GenericMetricEntity> typedClazz=weakTypedSearchResponse.getType();    List<GenericMetricEntity> typedEntities=weakTypedSearchResponse.getObj();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.264 -0400",hash_original_method="994F669A59E4B3A0EE398298B336F810",hash_generated_method="2BEECC6B96D4108E92CF5063E98986E9") public ProxyOutputStream(OutputStream proxy){  super(proxy);}  }
class C{  static public int linearSearch(double[] array,double value){  for (int i=0; i < array.length; i++) {    if (value <= array[i]) {      return i;    }  }  return -1;}  }
class C{  public void scale(float x,float y,float z){  Matrix3f tmp=new Matrix3f();  tmp.loadScale(x,y,z);  multiply(tmp);}  }
class C{  public boolean echoCharIsSet(){  return jpfPassword.echoCharIsSet();}  }
class C{  public void showCompanyLogo(){  statusnow=exstatus.LOGO;  ab.setDisplayOptions(ActionBar.DISPLAY_SHOW_HOME);  ab.setDisplayShowTitleEnabled(false);  ab.setLogo(companylogoRef);  ab.setDisplayUseLogoEnabled(true);  if (listener != null) {    listener.onShowCompanyLogoCenter(ab);  }}  }
class C{  private void applyBackgroundColor(Color color,Control control,List exclusions){  if (!exclusions.contains(control)) {    control.setBackground(color);  }  if (control instanceof Composite) {    Control[] children=((Composite)control).getChildren();    for (int i=0; i < children.length; i++) {      applyBackgroundColor(color,children[i],exclusions);    }  }}  }
class C{  protected int lengthOfByteStream(AbstractMRMessage m){  return 5;}  }
class C{  private static <T>int countRunAndMakeAscending(T[] a,int lo,int hi,Comparator<? super T> c){  if (DEBUG)   assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (c.compare(a[runHi++],a[lo]) < 0) {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && c.compare(a[runHi],a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:40.911 -0500",hash_original_method="20F0DBCD6142D6C8A8DBD6A9085999AF",hash_generated_method="0E30A3D2BAE76CBBDF9F9F5237802C23") private void scheduleAccessibilityEventSender(){  if (mAccessibilityEventSender == null) {    mAccessibilityEventSender=new AccessibilityEventSender();  } else {    removeCallbacks(mAccessibilityEventSender);  }  postDelayed(mAccessibilityEventSender,TIMEOUT_SEND_ACCESSIBILITY_EVENT);}  }
class C{  @Override public boolean onUsed(final RPEntity entity){  if (entity.nextTo(this)) {    if (getRipeness() == getMaxRipeness()) {      onFruitPicked(null);      final Item grain=SingletonRepository.getEntityManager().getItem(vegetableName);      if (entity instanceof Player) {        ((Player)entity).incHarvestedForItem(vegetableName,1);        SingletonRepository.getAchievementNotifier().onObtain((Player)entity);      }      entity.equipOrPutOnGround(grain);      return true;    } else     if (entity instanceof Player) {      String message="This " + Grammar.fullForm(vegetableName) + " is not yet ripe enough to pick.";      if (notRipeEnoughMessage != null) {        message=notRipeEnoughMessage;      }      ((Player)entity).sendPrivateText(message);    }  } else   if (entity instanceof Player) {    ((Player)entity).sendPrivateText("You are too far away.");  }  return false;}  }
class C{  public static ParameterizedMethodBinding instantiateGetClass(TypeBinding receiverType,MethodBinding originalMethod,Scope scope){  ParameterizedMethodBinding method=new ParameterizedMethodBinding();  method.modifiers=originalMethod.modifiers;  method.selector=originalMethod.selector;  method.declaringClass=originalMethod.declaringClass;  method.typeVariables=Binding.NO_TYPE_VARIABLES;  method.originalMethod=originalMethod;  method.parameters=originalMethod.parameters;  method.thrownExceptions=originalMethod.thrownExceptions;  method.tagBits=originalMethod.tagBits;  ReferenceBinding genericClassType=scope.getJavaLangClass();  LookupEnvironment environment=scope.environment();  TypeBinding rawType=environment.convertToRawType(receiverType.erasure(),false);  method.returnType=environment.createParameterizedType(genericClassType,new TypeBinding[]{environment.createWildcard(genericClassType,0,rawType,null,Wildcard.EXTENDS)},null);  if ((method.returnType.tagBits & TagBits.HasMissingType) != 0) {    method.tagBits|=TagBits.HasMissingType;  }  return method;}  }
