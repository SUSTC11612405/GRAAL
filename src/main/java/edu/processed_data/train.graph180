class C{  private int compare(Object k1,Object k2){  return (comparator == null ? ((Comparable)k1).compareTo(k2) : comparator.compare(k1,k2));}  }
class C{  public void bindService(){  if (mIsBound) {    return;  }  if (DEBUG)   Log.d(TAG,"Binding service " + mPackage + "/"+ mServiceName+ "...");  Intent i=new Intent();  i.setClassName(mPackage,mServiceName);  mContext.startService(i);  mContext.bindService(i,this,Context.BIND_WAIVE_PRIORITY | Context.BIND_IMPORTANT);}  }
class C{  public void addText(float latPoint,float lonPoint,int offset_x,int offset_y,String stuff,String font,int justify,LinkProperties properties) throws IOException {  LinkText.write(latPoint,lonPoint,offset_x,offset_y,stuff,font,justify,properties,link.dos);}  }
class C{  public int pgrp(){  return Integer.parseInt(fields[4]);}  }
class C{  public static void closeQuietly(Connection conn,Statement stmt,ResultSet rs){  try {    closeQuietly(rs);  }  finally {    try {      closeQuietly(stmt);    }  finally {      closeQuietly(conn);    }  }}  }
class C{  protected void validateManagementURL(final String restURL,final String username,final String password) throws Exception {  if (StringUtils.isNotEmpty(restURL) && StringUtils.isNotEmpty(username) && StringUtils.isNotEmpty(password)) {    XIVRestClient restClient=(XIVRestClient)_restClientFactory.getRESTClient(URI.create(restURL),username,password);    if (null != restClient) {      if (!restClient.getSystemsAvailability()) {        throw XIVRestException.exceptions.xivRestRequestFailure(restURL,"Hyperscale Manager is not configured.");      }    }  }}  }
class C{  private static Map<String,String> parseTnsNames(File tnsnamesOra){  Map<String,String> aliases=new TreeMap<>();  if (tnsnamesOra.exists()) {    try {      BufferedReader reader=new BufferedReader(new FileReader(tnsnamesOra));      StringBuilder tnsDescription=new StringBuilder();      String curAlias=null;      String line;      while ((line=reader.readLine()) != null) {        final String trimmedLine=line.trim();        if (trimmedLine.isEmpty() || trimmedLine.startsWith("#")) {          continue;        }        if (!line.startsWith(" ") && !line.startsWith("\t") && !line.startsWith("(")&& line.contains("=")) {          final int divPos=line.indexOf("=");          if (divPos < 0) {            continue;          }          final String alias=line.substring(0,divPos);          if (alias.equalsIgnoreCase("IFILE")) {            String filePath=line.substring(divPos + 1).trim();            File extFile=new File(filePath);            if (!extFile.exists()) {              extFile=new File(tnsnamesOra.getParent(),filePath);            }            aliases.putAll(parseTnsNames(extFile));          } else {            if (curAlias != null) {              aliases.put(curAlias,getPlainTnsDescription(tnsDescription.toString()));            }            curAlias=alias.trim();            tnsDescription.setLength(0);            tnsDescription.append(line.substring(divPos + 1));          }        } else {          if (curAlias != null) {            tnsDescription.append(line);          }        }      }      if (curAlias != null) {        aliases.put(curAlias,getPlainTnsDescription(tnsDescription.toString()));      }    } catch (    IOException e) {      log.debug(e);    }  } else {    log.debug("TNS names file '" + tnsnamesOra + "' doesn't exist");  }  return aliases;}  }
class C{  public final String rightSide(int index,Instances instances){  return "";}  }
class C{  @Override public void deleteSingleVolumeSnapshot(StorageSystem storage,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    BlockSnapshot snap=_dbClient.queryObject(BlockSnapshot.class,snapshot);    CIMObjectPath syncObjectPath=_cimPath.getSyncObject(storage,snap);    if (_helper.checkExists(storage,syncObjectPath,false,false) != null) {      _helper.callModifyReplica(storage,_helper.getDeleteSnapshotSynchronousInputArguments(syncObjectPath));    }    snap.setInactive(true);    snap.setIsSyncActive(false);    _dbClient.updateObject(snap);    taskCompleter.ready(_dbClient);  } catch (  WBEMException e) {    String message=String.format("Error encountered during delete snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  }catch (  Exception e) {    String message=String.format("Generic exception when trying to delete snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("deleteSingleVolumeSnapshot",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  public synchronized N removeWithController(C controller){  checkNotNull(controller,"The controller can not be null");  removeAllNodesFromObservable((N)controller.getRoot());  return controllerNodeMap.remove(controller);}  }
class C{  public synchronized boolean wasSuccessful(){  return failureCount() == 0 && errorCount() == 0;}  }
class C{  public KeyedValues(KeyedValues other){  if (other.isSetKey()) {    this.key=org.apache.thrift.TBaseHelper.copyBinary(other.key);    ;  }  if (other.isSetValues()) {    List<VersionedValue> __this__values=new ArrayList<VersionedValue>();    for (    VersionedValue other_element : other.values) {      __this__values.add(new VersionedValue(other_element));    }    this.values=__this__values;  }}  }
class C{  @Override public boolean uploadFile(String source,String dest){  FileInputStream fis;  try {    File file=new File(source);    fis=new FileInputStream(file);    mDBApi.putFileOverwrite(dest,fis,file.length(),null);    fis.close();    return true;  } catch (  DropboxUnlinkedException e) {    Log.d(String.valueOf(R.string.app_name),"User has unlinked.",e);    return false;  }catch (  DropboxException e) {    Log.d(String.valueOf(R.string.app_name),"Something went wrong while uploading.",e);    return false;  }catch (  FileNotFoundException e) {    Log.d(String.valueOf(R.string.app_name),"File not found.",e);    return false;  }catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  public static boolean testPointTriangle(double pX,double pY,double v0X,double v0Y,double v1X,double v1Y,double v2X,double v2Y){  boolean b1=(pX - v1X) * (v0Y - v1Y) - (v0X - v1X) * (pY - v1Y) < 0.0;  boolean b2=(pX - v2X) * (v1Y - v2Y) - (v1X - v2X) * (pY - v2Y) < 0.0;  if (b1 != b2)   return false;  boolean b3=(pX - v0X) * (v2Y - v0Y) - (v2X - v0X) * (pY - v0Y) < 0.0;  return b2 == b3;}  }
class C{  public Simple1D(Projector p,LinearScale[] scales,int dnum){  super(p,scales);  this.dnum=dnum;}  }
class C{  public void copyFromGeometry3D(Geometry3D geom){  this.mNumIndices=geom.getNumIndices();  this.mNumVertices=geom.getNumVertices();  this.mVertexBufferInfo=geom.getVertexBufferInfo();  this.mIndexBufferInfo=geom.getIndexBufferInfo();  this.mTexCoordBufferInfo=geom.getTexCoordBufferInfo();  this.mOnlyShortBufferSupported=geom.areOnlyShortBuffersSupported();  if (mColors == null)   this.mColorBufferInfo=geom.getColorBufferInfo();  this.mNormalBufferInfo=geom.getNormalBufferInfo();  this.mOriginalGeometry=geom;  this.mHasNormals=geom.hasNormals();  this.mHasTextureCoordinates=geom.hasTextureCoordinates();}  }
class C{  public static void parse(Reader i,JSONParseCallback callback) throws IOException {  boolean quoteMode=false;  ReaderClass rc=new ReaderClass();  rc.buffOffset=0;  rc.buffSize=-1;  int row=1;  int column=1;  StringBuilder currentToken=new StringBuilder();  KeyStack blocks=new KeyStack();  String currentBlock="";  String lastKey=null;  try {    while (callback.isAlive()) {      int currentChar=rc.read(i);      if (currentChar < 0) {        return;      }      char c=(char)currentChar;      if (c == '\n') {        row++;        column=0;      } else {        column++;      }      if (quoteMode) {switch (c) {case '"':          String v=currentToken.toString();        callback.stringToken(v);      if (lastKey != null) {        callback.keyValue(lastKey,v);        lastKey=null;      } else {        lastKey=v;      }    currentToken.setLength(0);  quoteMode=false;continue;case '\\':c=(char)rc.read(i);if (c == 'u') {String unicode="" + ((char)rc.read(i)) + ((char)rc.read(i))+ ((char)rc.read(i))+ ((char)rc.read(i));try {c=(char)Integer.parseInt(unicode,16);} catch (NumberFormatException err) {err.printStackTrace();System.out.println("Error in parsing \\u" + unicode);}} else {switch (c) {case 'n':currentToken.append('\n');continue;case 't':currentToken.append('\t');continue;case 'r':currentToken.append('\r');continue;}}currentToken.append(c);continue;}currentToken.append(c);} else {switch (c) {case 'n':char u=(char)rc.read(i);char l=(char)rc.read(i);char l2=(char)rc.read(i);if (u == 'u' && l == 'l' && l2 == 'l') {callback.stringToken(null);if (lastKey != null) {callback.keyValue(lastKey,null);lastKey=null;}} else {Log.p("Expected null for key value while parsing JSON token at row: " + row + " column: "+ column+ " buffer: "+ currentToken.toString());}continue;case 't':char a1=(char)rc.read(i);char a2=(char)rc.read(i);char a3=(char)rc.read(i);if (a1 == 'r' && a2 == 'u' && a3 == 'e') {callback.stringToken("true");if (lastKey != null) {callback.keyValue(lastKey,"true");lastKey=null;}} else {Log.p("Expected true for key value while parsing JSON token at row: " + row + " column: "+ column+ " buffer: "+ currentToken.toString());}continue;case 'f':if (currentToken.length() > 0) {currentToken.append('f');continue;}char b1=(char)rc.read(i);char b2=(char)rc.read(i);char b3=(char)rc.read(i);char b4=(char)rc.read(i);if (b1 == 'a' && b2 == 'l' && b3 == 's' && b4 == 'e') {callback.stringToken("false");if (lastKey != null) {callback.keyValue(lastKey,"false");lastKey=null;}} else {Log.p("Expected false for key value while parsing JSON token at row: " + row + " column: "+ column+ " buffer: "+ currentToken.toString());}continue;case '{':if (lastKey == null) {if (blocks.size() == 0) {lastKey="root";} else {lastKey=blocks.peek();}}blocks.push(lastKey);callback.startBlock(lastKey);lastKey=null;continue;case '}':if (currentToken.length() > 0) {try {String ct=currentToken.toString();if (useLongsDefault) {if (ct.indexOf('.') > -1) {callback.numericToken(Double.parseDouble(ct));} else {callback.longToken(Long.parseLong(ct));}} else {callback.numericToken(Double.parseDouble(ct));}if (lastKey != null) {callback.keyValue(lastKey,currentToken.toString());lastKey=null;currentToken.setLength(0);}} catch (NumberFormatException err) {err.printStackTrace();}}currentBlock=blocks.pop();callback.endBlock(currentBlock);lastKey=null;continue;case '[':blocks.push(lastKey);callback.startArray(lastKey);lastKey=null;continue;case ']':if (currentToken.length() > 0) {try {String ct=currentToken.toString();if (useLongsDefault) {if (ct.indexOf('.') > -1) {callback.numericToken(Double.parseDouble(ct));} else {callback.longToken(Long.parseLong(ct));}} else {callback.numericToken(Double.parseDouble(ct));}if (lastKey != null) {callback.keyValue(lastKey,currentToken.toString());lastKey=null;}} catch (NumberFormatException err) {}}currentToken.setLength(0);currentBlock=blocks.pop();callback.endArray(currentBlock);lastKey=null;continue;case ' ':case '\r':case '\t':case '\n':continue;case '"':quoteMode=true;continue;case ':':case ',':if (currentToken.length() > 0) {try {String ct=currentToken.toString();if (useLongsDefault) {if (ct.indexOf('.') > -1) {callback.numericToken(Double.parseDouble(ct));} else {callback.longToken(Long.parseLong(ct));}} else {callback.numericToken(Double.parseDouble(ct));}if (lastKey != null) {callback.keyValue(lastKey,currentToken.toString());lastKey=null;}} catch (NumberFormatException err) {}}currentToken.setLength(0);continue;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case '-':case '.':case 'x':case 'd':case 'l':case 'e':case 'E':currentToken.append(c);continue;}}}} catch (Exception err) {Log.e(err);Log.p("Exception during JSON parsing at row: " + row + " column: "+ column+ " buffer: "+ currentToken.toString());i.close();}}  }
class C{  @SuppressWarnings("BooleanMethodIsAlwaysInverted") public static boolean isStorageAvailable(){  boolean externalStorageAvailable;  boolean externalStorageWriteable;  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(state)) {    externalStorageAvailable=externalStorageWriteable=true;  } else   if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {    externalStorageAvailable=true;    externalStorageWriteable=false;  } else {    externalStorageAvailable=externalStorageWriteable=false;  }  return (externalStorageAvailable && externalStorageWriteable);}  }
class C{  public static String stripScopeID(String ipv6Address){  int scopeStart=ipv6Address.indexOf('%');  if (scopeStart == -1)   return ipv6Address;  ipv6Address=ipv6Address.substring(0,scopeStart);  if (ipv6Address.charAt(0) == '[' && ipv6Address.charAt(ipv6Address.length() - 1) != ']') {    ipv6Address+=']';  }  return ipv6Address;}  }
class C{  public void add(final DLItem item){  checkWidget();  if (item == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  items.add(item);  redrawTables();}  }
class C{  public void sort(int attIndex){  double[] vals=new double[numInstances()];  Instance[] backup=new Instance[vals.length];  for (int i=0; i < vals.length; i++) {    Instance inst=instance(i);    backup[i]=inst;    double val=inst.value(attIndex);    if (Utils.isMissingValue(val)) {      vals[i]=Double.MAX_VALUE;    } else {      vals[i]=val;    }  }  int[] sortOrder=Utils.sortWithNoMissingValues(vals);  for (int i=0; i < vals.length; i++) {    m_Instances.set(i,backup[sortOrder[i]]);  }}  }
class C{  public static int lighten(int color,float factor){  int red=(int)((Color.red(color) * (1 - factor) / 255 + factor) * 255);  int green=(int)((Color.green(color) * (1 - factor) / 255 + factor) * 255);  int blue=(int)((Color.blue(color) * (1 - factor) / 255 + factor) * 255);  return Color.argb(Color.alpha(color),red,green,blue);}  }
class C{  public static void writeField(final Field field,final Object target,final Object value,final boolean forceAccess) throws IllegalAccessException {  if (field == null) {    throw new IllegalArgumentException("The field must not be null");  }  if (forceAccess && !field.isAccessible()) {    field.setAccessible(true);  } else {    MemberUtils.setAccessibleWorkaround(field);  }  field.set(target,value);}  }
class C{  public Path[] dataFiles(){  return dataFiles;}  }
class C{  public boolean isNodeChild(TreeNode aNode){  boolean retval;  if (aNode == null) {    retval=false;  } else {    if (getChildCount() == 0) {      retval=false;    } else {      retval=(aNode.getParent() == this);    }  }  return retval;}  }
class C{  public Mono<HandlerResult> invokeForRequest(ServerWebExchange exchange,ModelMap model,Object... providedArgs){  return resolveArguments(exchange,model,providedArgs).then(null);}  }
class C{  public static void put(){  try {    Region r1=cache.getRegion(Region.SEPARATOR + REGION_NAME1);    Region r2=cache.getRegion(Region.SEPARATOR + REGION_NAME2);    r1.put("key-1","11");    r1.put("key-1","22");    r1.put("key-1","33");    r2.put("key-1","11");    r2.put("key-1","22");    r2.put("key-1","33");  } catch (  Exception ex) {    ex.printStackTrace();    Assert.fail("failed while region.put()",ex);  }}  }
class C{  public boolean release(final String inmateName){  final Player inmate=SingletonRepository.getRuleProcessor().getPlayer(inmateName);  if (inmate == null) {    LOGGER.info("Jailed player " + inmateName + " has logged out.");    return false;  }  release(inmate);  return true;}  }
class C{  private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  public static void flushCurrentInputField(){  java.awt.Component focusOwner=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();  if (focusOwner instanceof Flushable) {    ((Flushable)focusOwner).flushValue();  } else   if (focusOwner != null && focusOwner.getParent() instanceof Flushable) {    ((Flushable)focusOwner.getParent()).flushValue();  }}  }
class C{  public WampClientBuilder withRoles(WampRoles[] roles){  this.roles.clear();  if (roles == null)   return this;  for (  WampRoles role : roles) {    this.roles.add(role);  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.962 -0400",hash_original_method="F3F24C65917C19C44EDF6BFD234E5B72",hash_generated_method="FFF9AB864A208290BBF93E814AEAAEFD") public int awaitAdvance(int phase){  final Phaser root=this.root;  long s=(root == this) ? state : reconcileState();  int p=(int)(s >>> PHASE_SHIFT);  if (phase < 0)   return phase;  if (p == phase)   return root.internalAwaitAdvance(phase,null);  return p;}  }
class C{  public Holder(IssuerSerial baseCertificateID,int version){  this.baseCertificateID=baseCertificateID;  this.version=version;}  }
class C{  public static boolean identical(URI first,URI second){  if ((first != null) && (second != null)) {    return first.equals(second);  }  return false;}  }
class C{  public String checkHttpRequest(boolean validSSLSessionNeeded,boolean validVASASessionNeeded) throws InvalidSession {  final String methodName="checkHttpRequest(): ";  try {    log.trace(methodName + "Entry with inputs validSSLSessionNeeded[" + validSSLSessionNeeded+ "] validVASASessionNeeded["+ validVASASessionNeeded+ "]");    MessageContext currentMessageContext=MessageContext.getCurrentMessageContext();    if (currentMessageContext == null) {      throw FaultUtil.InvalidSession("No current message context");    }    String clientAddress=(String)currentMessageContext.getProperty("REMOTE_ADDR");    HttpServletRequest req=(HttpServletRequest)currentMessageContext.getProperty(HTTPConstants.MC_HTTP_SERVLETREQUEST);    if (req == null) {      throw FaultUtil.InvalidSession("No HTTP Servlet Request");    }    String sslSessionId=(String)req.getAttribute("javax.servlet.request.ssl_session");    if (sslSessionId == null) {      if (!mustUseSSL) {        if (validVASASessionNeeded) {          checkHttpForValidVASASession();        }        log.trace(methodName + "Exit returning clientAddress[" + clientAddress+ "]");        return clientAddress;      } else {        throw FaultUtil.InvalidSession("Must use SSL connection");      }    }    if (validSSLSessionNeeded) {      checkHttpForValidSSLSession(req);    }    if (validVASASessionNeeded) {      checkHttpForValidVASASession();    }    log.trace(methodName + "Exit returning clientAddress[" + clientAddress+ "]");    return clientAddress;  } catch (  InvalidCertificate ic) {    log.error(methodName + "invalid certificate exception ",ic);    throw FaultUtil.InvalidSession("Non trusted certificate.");  }catch (  InvalidSession is) {    log.error(methodName + "invalid session exception ",is);    throw is;  }catch (  Exception e) {    log.error(methodName + "Exception occured ",e);    throw FaultUtil.InvalidSession("checkHttpSession unexpected exception. Convert to InvalidSession.",e);  }}  }
class C{  public static Vec4 fromArray2(double[] array,int offset){  if (array == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return fromDoubleArray(array,offset,2);}  }
class C{  public ConsoleLogger(LogSync logSync){  this.logSync=logSync;}  }
class C{  public double standardizedFitness(){  return standardizedFitness;}  }
class C{  public int callNative(String instanceId,String tasks,String callback){  if (TextUtils.isEmpty(tasks)) {    if (WXEnvironment.isApkDebugable()) {      WXLogUtils.e("[WXBridgeManager] callNative: call Native tasks is null");    }    WXErrorCode.WX_ERR_INVOKE_NATIVE.appendErrMsg("[WXBridgeManager] callNative: call Native tasks is null");    commitJSBridgeAlarmMonitor(instanceId,WXErrorCode.WX_ERR_INVOKE_NATIVE);    return IWXBridge.INSTANCE_RENDERING_ERROR;  }  if (WXEnvironment.isApkDebugable()) {    mLodBuilder.append("[WXBridgeManager] callNative >>>> instanceId:").append(instanceId).append(", tasks:").append(tasks).append(", callback:").append(callback);    WXLogUtils.d(mLodBuilder.substring(0));    mLodBuilder.setLength(0);  }  if (mDestroyedInstanceId != null && mDestroyedInstanceId.contains(instanceId)) {    return IWXBridge.DESTROY_INSTANCE;  }  long start=System.currentTimeMillis();  JSONArray array=JSON.parseArray(tasks);  if (WXSDKManager.getInstance().getSDKInstance(instanceId) != null) {    WXSDKManager.getInstance().getSDKInstance(instanceId).jsonParseTime(System.currentTimeMillis() - start);  }  int size=array.size();  if (size > 0) {    try {      JSONObject task;      for (int i=0; i < size; ++i) {        task=(JSONObject)array.get(i);        if (task != null && WXSDKManager.getInstance().getSDKInstance(instanceId) != null) {          if (TextUtils.equals(WXDomModule.WXDOM,(String)task.get(MODULE))) {            sDomModule=getDomModule(instanceId);            sDomModule.callDomMethod(task);            sDomModule.mWXSDKInstance=null;          } else {            WXModuleManager.callModuleMethod(instanceId,(String)task.get(MODULE),(String)task.get(METHOD),(JSONArray)task.get(ARGS));          }        }      }    } catch (    Exception e) {      WXLogUtils.e("[WXBridgeManager] callNative exception: ",e);      WXErrorCode.WX_ERR_INVOKE_NATIVE.appendErrMsg("[WXBridgeManager] callNative exception " + e.getCause());      commitJSBridgeAlarmMonitor(instanceId,WXErrorCode.WX_ERR_INVOKE_NATIVE);    }  }  if (UNDEFINED.equals(callback)) {    return IWXBridge.INSTANCE_RENDERING_ERROR;  }  getNextTick(instanceId,callback);  return IWXBridge.INSTANCE_RENDERING;}  }
class C{  public void clear(){  int width=image.getWidth(null);  int height=image.getHeight(null);  int[] data=new int[width * height];  int len=data.length;  for (int i=0; i < len; i++)   data[i]=0xFF000000;  image.getRaster().setDataElements(0,0,width,height,data);}  }
class C{  public final double lengthSq(){  return x * x + y * y;}  }
class C{  private javax.swing.filechooser.FileFilter createFileFilter(String description,String... extensions){  description=createFileNameFilterDescriptionFromExtensions(description,extensions);  return null;}  }
class C{  public boolean isSetBegin_in_both(){  return EncodingUtils.testBit(__isset_bitfield,__BEGIN_IN_BOTH_ISSET_ID);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void main(String args[]) throws Exception {  HashMap<String,Double> symbols=new HashMap<String,Double>();  if (args.length > 0) {    if (args[0].equals("-symbols")) {      String[] pairs=args[1].replaceAll(" ","").split(";");      for (      String pair : pairs) {        String[] parts=pair.split("=");        symbols.put(parts[0],new Double(parts[1]));      }      System.out.println("\nSymbols provided:");      Iterator<String> iter=symbols.keySet().iterator();      while (iter.hasNext()) {        String key=iter.next();        System.out.println(key + "=" + symbols.get(key));      }      String[] argsNew=new String[args.length - 2];      System.arraycopy(args,2,argsNew,0,argsNew.length);      args=argsNew;    }  }  int index=-1;  if (args.length == 1) {    index=0;  }  BufferedReader input=null;  if (index == -1) {    System.out.println("\nPlease type in expressions (and press <Enter>), exit with <Ctrl+D>:");    input=new BufferedReader(new InputStreamReader(System.in));  } else {    System.out.println("\nReading expressions from file '" + args[index] + "':");    input=new BufferedReader(new FileReader(args[index]));  }  @SuppressWarnings("deprecation") SymbolFactory sf=new DefaultSymbolFactory();  String line;  while ((line=input.readLine()) != null) {    ByteArrayInputStream parserInput=new ByteArrayInputStream(line.getBytes());    Parser parser=new Parser(new Scanner(parserInput,sf),sf);    parser.setSymbols(symbols);    parser.parse();    System.out.println(line + " = " + parser.getResult());  }}  }
class C{  public double entropyNMISum(){  return (2 * entropyMutualInformation() / (entropyFirst() + entropySecond()));}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  boolean consumed=this.selectDragDetector.onTouchEvent(event);  if (this.isDragging && event.getAction() == MotionEvent.ACTION_UP) {    this.isDragging=false;    this.isDraggingArmed=false;  }  super.panRecognizer.setEnabled(!isDragging);  if (!consumed) {    consumed=super.onTouchEvent(event);  }  return consumed;}  }
class C{  private Object executeLTE(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  return (executeCompare(pc,sql,qr,expression,row) <= 0) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static void skipFully(Reader reader,long skip) throws IOException {  try {    while (skip > 0) {      long skipped=reader.skip(skip);      if (skipped <= 0) {        throw new EOFException();      }      skip-=skipped;    }  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  @Override public List<NamedRelatedVirtualPoolRep> list(){  return getList(baseUrl);}  }
class C{  public Builder(Activity activity){  this.rootView=(ViewGroup)activity.findViewById(android.R.id.content);  this.activity=activity;}  }
class C{  public boolean markSupported(){  return false;}  }
class C{  private void fileUnlock(ICarbonLock carbonLock){  if (carbonLock.unlock()) {    LOG.info("Metadata lock has been successfully released");  } else {    LOG.error("Not able to release the metadata lock");  }}  }
class C{  public N3Writer(Writer writer){  ttlWriter=new TurtleWriter(writer);}  }
class C{  protected void insertHeader(final String header){  final Document doc=textPane.getDocument();  try {    if (header.length() > 0) {      doc.insertString(doc.getLength(),"<" + header + "> ",textPane.getStyle("header"));    }  } catch (  final BadLocationException e) {    logger.error("Couldn't insert initial text.",e);  }}  }
class C{  static Intent[] makeMessageIntentStack(Context context,CharSequence from,CharSequence msg){  Intent[] intents=new Intent[4];  intents[0]=Intent.makeRestartActivityTask(new ComponentName(context,com.example.android.apis.ApiDemos.class));  intents[1]=new Intent(context,com.example.android.apis.ApiDemos.class);  intents[1].putExtra("com.example.android.apis.Path","App");  intents[2]=new Intent(context,com.example.android.apis.ApiDemos.class);  intents[2].putExtra("com.example.android.apis.Path","App/Notification");  intents[3]=new Intent(context,IncomingMessageView.class);  intents[3].putExtra(IncomingMessageView.KEY_FROM,from);  intents[3].putExtra(IncomingMessageView.KEY_MESSAGE,msg);  return intents;}  }
class C{  public static ServerBartender currentSelfServer(){  NetworkSystemBartender clusterService=current();  if (clusterService == null)   throw new IllegalStateException(L.l("{0} is not available in this context",NetworkSystemBartender.class.getSimpleName()));  return clusterService.selfServer();}  }
class C{  public static Duration parse(String value){  if (!value.matches("-?P.*")) {    throw Messages.INSTANCE.getIllegalArgumentException(20,value);  }  return builder().prior(value.startsWith("-")).weeks(parseComponent(value,'W')).days(parseComponent(value,'D')).hours(parseComponent(value,'H')).minutes(parseComponent(value,'M')).seconds(parseComponent(value,'S')).build();}  }
class C{  public SetOnce(final T defaultValue){  this.defaultValue=defaultValue;}  }
class C{  @Override @SuppressWarnings("unchecked") protected Object writePreProcess(Object o) throws Exception {  o=super.writePreProcess(o);  m_BeanInstances=new Vector<Object>();  m_BeanInstancesID=new Vector<Integer>();switch (getDataType()) {case DATATYPE_LAYOUT:    addBeanInstances(BeanInstance.getBeanInstances(m_vectorIndex));  break;case DATATYPE_USERCOMPONENTS:addBeanInstances((Vector<Object>)o);break;default :System.out.println("writePreProcess: data type '" + getDataType() + "' is not recognized!");break;}return o;}  }
class C{  @Override public void transitionToActive(){  this.role=HARole.ACTIVE.getOFRole();}  }
class C{  public static int EMLINK(){  return Errno.EMLINK.intValue();}  }
class C{  public String toString(){  ensureCache();  return textLine.toString();}  }
class C{  public boolean call(Object... args){  return bmi.invoke(wrapped,args);}  }
class C{  void diffuse(HexaBugs hexabugs,int start,int end){  final DoubleGrid2D _valgrid=updateGrid;  final double[][] _valgrid_field=updateGrid.field;  final double[][] _valgrid2_field=tempGrid.field;  final int _gridWidth=_valgrid.getWidth();  final int _gridHeight=_valgrid.getHeight();  final double _evaporationRate=evaporationRate;  final double _diffusionRate=diffusionRate;  double average;  double[] _past=_valgrid_field[_valgrid.stx(start - 1)];  double[] _current=_valgrid_field[start];  double[] _next;  double[] _put;  int yminus1;  int yplus1;  for (int x=start; x < end; x++) {    int xplus1=x + 1;    if (xplus1 == _gridWidth)     xplus1=0;    _next=_valgrid_field[xplus1];    _put=_valgrid2_field[x];    boolean xmodulo2equals0=x % 2 == 0;    yminus1=_gridHeight - 1;    for (int y=0; y < _gridHeight; y++) {      yplus1=y + 1;      if (yplus1 == _gridHeight)       yplus1=0;      if (xmodulo2equals0) {        average=(_current[y] + _past[yminus1] + _next[yminus1]+ _past[y]+ _next[y]+ _current[yminus1]+ _current[yplus1]) / 7.0;      } else {        average=(_current[y] + _past[y] + _next[y]+ _past[yplus1]+ _next[yplus1]+ _current[yminus1]+ _current[yplus1]) / 7.0;      }      _put[y]=_evaporationRate * (_current[y] + _diffusionRate * (average - _current[y]));      yminus1=y;    }    _past=_current;    _current=_next;  }}  }
class C{  public ExpressionTokenizer(String expr){  this.expr=expr.trim().toCharArray();  this.length=this.expr.length;}  }
class C{  private void uninstallWindowListeners(JRootPane root){  if (window != null) {    window.removeMouseListener(mouseInputListener);    window.removeMouseMotionListener(mouseInputListener);  }}  }
class C{  public TextBuilder(int capacity){  this();  while (capacity > _capacity) {    increaseCapacity();  }}  }
class C{  public AwsCandidateHarvester(){  super(null,null);}  }
class C{  public static File indexFileName(File data){  return new File(data.getParentFile(),data.getName() + BAM_INDEX_EXTENSION);}  }
class C{  public static List doFeatureGen(Map map,String text,List markList,boolean label){  markList.clear();  int nextPos=0;  while ((nextPos=StringUtils.findFirstOf(text,".!?",nextPos + 1)) != -1)   markList.add(new Integer(nextPos));  List results=new ArrayList();  for (int i=0; i < markList.size(); ++i) {    int curPos=((Integer)markList.get(i)).intValue();    String record=genCPs(map,text,curPos);    if (label) {      int idx=StringUtils.findFirstNotOf(text," \t",curPos + 1);      if (idx == -1 || (text.charAt(idx) == '\n')) {        record+=" " + "y";      } else       record+=" " + "n";    }    results.add(record);  }  return results;}  }
class C{  public void testInvokeMethodFallsThroughToMethodClosureInBinding() throws IOException, CompilationFailedException, IllegalAccessException, InstantiationException {  String text="if (method() == 3) { println 'succeeded' }";  GroovyCodeSource codeSource=new GroovyCodeSource(text,"groovy.script","groovy.script");  GroovyClassLoader loader=new GroovyClassLoader(Thread.currentThread().getContextClassLoader());  Class clazz=loader.parseClass(codeSource);  Script script=((Script)clazz.newInstance());  Binding binding=new Binding();  binding.setVariable("method",new MethodClosure(new Dummy(),"method"));  script.setBinding(binding);  script.run();}  }
class C{  @Override public Coordinate[] toCoordinateArray(){  return points;}  }
class C{  @Override public String[] parameters(){  return pointGen.parameters();}  }
class C{  public boolean isStorageAPDSupported(){  return storageAPDSupported;}  }
class C{  public void rectValueToPixel(RectF r,float phaseY){  r.top*=phaseY;  r.bottom*=phaseY;  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public final void replace(DataModel model){  if (model == null) {    throw new NullPointerException("The given model must not be null");  }  tabbedPane.removeAll();  setPreferredSize(new Dimension(600,400));  DataModelList dataModelList=dataWrapper.getDataModelList();  dataModelList.clear();  if (model instanceof DataModelList) {    for (    DataModel dataModel : (DataModelList)model) {      dataModelList.add(dataModel);    }  } else {    dataModelList.add(model);  }  removeAll();  if (model instanceof DataModelList) {    for (int i=0; i < ((DataModelList)model).size(); i++) {      DataModel _model=((DataModelList)model).get(i);      this.tabbedPane.addTab(tabName(_model,1),dataDisplay(_model));    }    add(this.tabbedPane,BorderLayout.CENTER);    if (showMenus) {      add(menuBar(),BorderLayout.NORTH);    }  } else {    this.tabbedPane.addTab(tabName(model,1),dataDisplay(model));    add(this.tabbedPane,BorderLayout.CENTER);    if (showMenus) {      add(menuBar(),BorderLayout.NORTH);    }    validate();  }  dataWrapper.setDataModelList(dataModelList);}  }
class C{  public static int computeEnumSize(final int fieldNumber,final int value){  return computeTagSize(fieldNumber) + computeEnumSizeNoTag(value);}  }
class C{  public TestAstrixConfigurer registerApiProvider(Class<?>... providers){  for (  Class<?> provider : providers) {    apiProviders.add(ApiProviderClass.create(provider));  }  return this;}  }
class C{  private String computeGuessingCompletion(){  StringBuffer buffer=new StringBuffer();  appendMethodNameReplacement(buffer);  FormatterPrefs prefs=getFormatterPrefs();  setCursorPosition(buffer.length());  if (prefs.afterOpeningParen)   buffer.append(SPACE);  char[][] parameterNames=fProposal.findParameterNames();  fChoices=guessParameters(parameterNames);  int count=fChoices.length;  int replacementOffset=getReplacementOffset();  for (int i=0; i < count; i++) {    if (i != 0) {      if (prefs.beforeComma)       buffer.append(SPACE);      buffer.append(COMMA);      if (prefs.afterComma)       buffer.append(SPACE);    }    buffer.append(parameterNames[i]);  }  if (prefs.beforeClosingParen)   buffer.append(SPACE);  buffer.append(RPAREN);  return buffer.toString();}  }
class C{  public SoundEvent(final String sound,SoundLayer layer){  super(Events.SOUND);  put("sound",sound);  put("layer",layer.ordinal());}  }
class C{  public static double bytesToDouble(byte[] arr){  return Double.longBitsToDouble(bytesToLong(arr));}  }
class C{  public TaxonList parseTaxaBlock() throws ImportException, IOException {  return readTaxaBlock();}  }
class C{  public static boolean isThresholdON(){  return thresholdON;}  }
class C{  public static void stop(SystemComponent component){  component.lifecycle().stop(component);}  }
class C{  public static int cs_fkeep(Scs A,Scs_ifkeep fkeep,Object other){  int j, p, nz=0, n, Ap[], Ai[];  float Ax[];  if (!Scs_util.CS_CSC(A))   return (-1);  n=A.n;  Ap=A.p;  Ai=A.i;  Ax=A.x;  for (j=0; j < n; j++) {    p=Ap[j];    Ap[j]=nz;    for (; p < Ap[j + 1]; p++) {      if (fkeep.fkeep(Ai[p],j,Ax != null ? Ax[p] : 1,other)) {        if (Ax != null)         Ax[nz]=Ax[p];        Ai[nz++]=Ai[p];      }    }  }  Ap[n]=nz;  Scs_util.cs_sprealloc(A,0);  return (nz);}  }
class C{  public void ifNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNULL,label);}  }
class C{  private static byte CallStaticByteMethodA(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticByteMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,0,methodID,argAddress,TypeReference.Byte,true);  return Reflection.unwrapByte(returnObj);}  }
class C{  public static boolean equivalent(double a,double b){  return Math.abs(1d - (a / b)) < ACCEPTABLE_RATIO_DIFFERENCE;}  }
class C{  @Override public final void postSetUp() throws Exception {  final Host host=Host.getHost(0);  vm0=host.getVM(0);  vm1=host.getVM(1);}  }
class C{  @Override public boolean isExtractionAllowed(){  if (getIO() != null) {    final PdfFileReader objectReader=getIO().getObjectReader();    final DecryptionFactory decryption=objectReader.getDecryptionObject();    return decryption == null || decryption.getBooleanValue(PDFflags.IS_EXTRACTION_ALLOWED);  } else {    return false;  }}  }
class C{  void adjustForCurrencyDefaultFractionDigits(DecimalFormat df){  DecimalFormatSymbols dfs=df.getDecimalFormatSymbols();  Currency currency=dfs.getCurrency();  if (currency == null) {    try {      currency=Currency.getInstance(dfs.getInternationalCurrencySymbol());    } catch (    IllegalArgumentException e) {    }  }  if (currency != null) {    int digits=currency.getDefaultFractionDigits();    if (digits != -1) {      int oldMinDigits=df.getMinimumFractionDigits();      if (oldMinDigits == df.getMaximumFractionDigits()) {        df.setMinimumFractionDigits(digits);        df.setMaximumFractionDigits(digits);      } else {        df.setMinimumFractionDigits(Math.min(digits,oldMinDigits));        df.setMaximumFractionDigits(digits);      }    }  }}  }
class C{  public static MBeanInfo testCompliance(Class<?> baseClass) throws NotCompliantMBeanException {  if (isDynamic(baseClass))   return null;  return testCompliance(baseClass,null);}  }
class C{  private void doIndex(String name,Request baseRequest,HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  baseRequest.setHandled(true);  String token=request.getParameter(Constants.HTTP_PARAM_TOKEN);  String[] selectors=request.getParameterValues(Constants.HTTP_PARAM_SELECTOR);  if (null == selectors) {    throw new IOException("Missing selector.");  }  if (selectors.length != 1) {    throw new IOException("Can only specify a single selector per request.");  }  if (null == token) {    throw new IOException("Missing token.");  }  if (!this.subscriptions.get(name).containsKey(token)) {    throw new IOException("The provided token does not have any current subscriptions in this index.");  }  Set<Metadata> metadatas=new HashSet<Metadata>();  String selector=selectors[0];  Matcher m=EgressFetchHandler.SELECTOR_RE.matcher(selector);  if (!m.matches()) {    response.sendError(HttpServletResponse.SC_BAD_REQUEST);    return;  }  String classSelector=URLDecoder.decode(m.group(1),"UTF-8");  String labelsSelection=m.group(2);  Map<String,String> labelsSelectors;  try {    labelsSelectors=GTSHelper.parseLabelsSelectors(labelsSelection);  } catch (  ParseException pe) {    throw new IOException(pe);  }  ReadToken rtoken;  try {    rtoken=Tokens.extractReadToken(token);  } catch (  WarpScriptException ee) {    throw new IOException(ee);  }  labelsSelectors.putAll(Tokens.labelSelectorsFromReadToken(rtoken));  List<Metadata> metas=null;  List<String> clsSels=new ArrayList<String>();  List<Map<String,String>> lblsSels=new ArrayList<Map<String,String>>();  clsSels.add(classSelector);  lblsSels.add(labelsSelectors);  metas=directoryClient.find(clsSels,lblsSels);  long total=0L;  GeoIndex index=this.indices.get(name);  String start=request.getParameter(Constants.HTTP_PARAM_START);  String stop=request.getParameter(Constants.HTTP_PARAM_STOP);  long now=Long.MIN_VALUE;  long timespan=0L;  String nowParam=request.getParameter(Constants.HTTP_PARAM_NOW);  String timespanParam=request.getParameter(Constants.HTTP_PARAM_TIMESPAN);  String dedupParam=request.getParameter(Constants.HTTP_PARAM_DEDUP);  boolean dedup=null != dedupParam && "true".equals(dedupParam);  if (null != start && null != stop) {    long tsstart=fmt.parseDateTime(start).getMillis() * Constants.TIME_UNITS_PER_MS;    long tsstop=fmt.parseDateTime(stop).getMillis() * Constants.TIME_UNITS_PER_MS;    if (tsstart < tsstop) {      now=tsstop;      timespan=tsstop - tsstart;    } else {      now=tsstart;      timespan=tsstart - tsstop;    }  } else   if (null != nowParam && null != timespanParam) {    try {      now=Long.valueOf(nowParam);    } catch (    Exception e) {      now=fmt.parseDateTime(nowParam).getMillis() * Constants.TIME_UNITS_PER_MS;    }    timespan=Long.valueOf(timespanParam);  }  if (Long.MIN_VALUE == now) {    response.sendError(HttpServletResponse.SC_BAD_REQUEST,"Missing now/timespan or start/stop parameters.");    return;  }  try (GTSDecoderIterator iter=this.storeClient.fetch(rtoken,metas,now,timespan,false,false)){    while (iter.hasNext()) {      GTSDecoder decoder=iter.next();      decoder.next();      GTSEncoder encoder=decoder.getEncoder();      total+=publish(index,encoder);    }  } catch (  Exception e) {    e.printStackTrace();    throw new IOException(e);  } finally {  }  response.setContentType("text/plain");  response.setStatus(HttpServletResponse.SC_OK);  response.getWriter().println(total);}  }
class C{  private static AxesWalker createDefaultWalker(Compiler compiler,int opPos,WalkingIterator lpi,int analysis){  AxesWalker ai=null;  int stepType=compiler.getOp(opPos);  boolean simpleInit=false;  int totalNumberWalkers=(analysis & BITS_COUNT);  boolean prevIsOneStepDown=true;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:    prevIsOneStepDown=false;  if (DEBUG_WALKER_CREATION)   System.out.println("new walker:  FilterExprWalker: " + analysis + ", "+ compiler.toString());ai=new FilterExprWalker(lpi);simpleInit=true;break;case OpCodes.FROM_ROOT:ai=new AxesWalker(lpi,Axis.ROOT);break;case OpCodes.FROM_ANCESTORS:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.ANCESTOR);break;case OpCodes.FROM_ANCESTORS_OR_SELF:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.ANCESTORORSELF);break;case OpCodes.FROM_ATTRIBUTES:ai=new AxesWalker(lpi,Axis.ATTRIBUTE);break;case OpCodes.FROM_NAMESPACE:ai=new AxesWalker(lpi,Axis.NAMESPACE);break;case OpCodes.FROM_CHILDREN:ai=new AxesWalker(lpi,Axis.CHILD);break;case OpCodes.FROM_DESCENDANTS:prevIsOneStepDown=false;ai=new AxesWalker(lpi,Axis.DESCENDANT);break;case OpCodes.FROM_DESCENDANTS_OR_SELF:prevIsOneStepDown=false;ai=new AxesWalker(lpi,Axis.DESCENDANTORSELF);break;case OpCodes.FROM_FOLLOWING:prevIsOneStepDown=false;ai=new AxesWalker(lpi,Axis.FOLLOWING);break;case OpCodes.FROM_FOLLOWING_SIBLINGS:prevIsOneStepDown=false;ai=new AxesWalker(lpi,Axis.FOLLOWINGSIBLING);break;case OpCodes.FROM_PRECEDING:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.PRECEDING);break;case OpCodes.FROM_PRECEDING_SIBLINGS:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.PRECEDINGSIBLING);break;case OpCodes.FROM_PARENT:prevIsOneStepDown=false;ai=new ReverseAxesWalker(lpi,Axis.PARENT);break;case OpCodes.FROM_SELF:ai=new AxesWalker(lpi,Axis.SELF);break;default :throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NULL_ERROR_HANDLER,new Object[]{Integer.toString(stepType)}));}if (simpleInit) {ai.initNodeTest(DTMFilter.SHOW_ALL);} else {int whatToShow=compiler.getWhatToShow(opPos);if ((0 == (whatToShow & (DTMFilter.SHOW_ATTRIBUTE | DTMFilter.SHOW_NAMESPACE | DTMFilter.SHOW_ELEMENT| DTMFilter.SHOW_PROCESSING_INSTRUCTION))) || (whatToShow == DTMFilter.SHOW_ALL)) ai.initNodeTest(whatToShow); else {ai.initNodeTest(whatToShow,compiler.getStepNS(opPos),compiler.getStepLocalName(opPos));}}return ai;}  }
class C{  public FetchResponseEncoder(ImapEncoder next,boolean neverAddBodyStructureExtensions){  super(next);  this.neverAddBodyStructureExtensions=neverAddBodyStructureExtensions;}  }
class C{  public static String suffix(String string,String suffix){  if (string.endsWith(suffix) == false) {    string+=suffix;  }  return string;}  }
class C{  public Builder withButtonSize(int size){  size=convertToPixels(size,scale);  params=new FrameLayout.LayoutParams(size,size);  return this;}  }
class C{  public boolean isEmpty(){  return rdns.isEmpty();}  }
class C{  public T caseEffect(Effect object){  return null;}  }
class C{  public static void writeXHTML(Document htmldoc,OutputStream out) throws IOException {  javax.xml.transform.Result result=new StreamResult(out);  Transformer xformer;  try {    xformer=TransformerFactory.newInstance().newTransformer();    xformer.setOutputProperty(OutputKeys.INDENT,"yes");    xformer.setOutputProperty(OutputKeys.ENCODING,"UTF-8");    xformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,HTML_XHTML_TRANSITIONAL_DOCTYPE_PUBLIC);    xformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM,HTML_XHTML_TRANSITIONAL_DOCTYPE_SYSTEM);    xformer.transform(new DOMSource(htmldoc),result);  } catch (  TransformerException e1) {    throw new IOException(e1);  }  out.flush();}  }
class C{  public long majflt(){  return Long.parseLong(fields[11]);}  }
class C{  protected void onRemoveSecret(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  public UISelectManyTestCase(String name){  super(name);}  }
class C{  protected Host(String hostName){  if (hostName == null) {    String s="Cannot create a Host with a null name";    throw new NullPointerException(s);  }  this.hostName=hostName;  this.vms=new ArrayList();  this.systems=new ArrayList();  this.systemNames=new HashMap();}  }
class C{  public BinaryAnnotationMappingStorage(String file){  loadMappings(file);}  }
class C{  public static boolean evaluate(final NaviNode node,final String text,final boolean regularExpression,final boolean caseSensitive){  return CNodeSearcher.search(node,text,regularExpression,caseSensitive).size() != 0;}  }
class C{  public Address malloc(int size,int howmany){  int result=nextReservableAddress;  nextReservableAddress+=size * howmany;  if (nextReservableAddress > (MEMSIZE + memAddressStart)) {    addressOutOfRange=true;    return null;  }  return new Address(Op.MEM,size,result);}  }
class C{  public URI resolve(URI uri){  if (isOpaque() || uri.isAbsolute()) {    return uri;  }  String thatPath=uri.getPath();  String thatQuery=uri.getQuery();  String thatAuthority=uri.getAuthority();  String thatFragment=uri.getFragment();  try {    if (thatFragment != null && (uri.getScheme() == null && thatPath == null && thatQuery == null && thatAuthority == null)) {      return new URI(getScheme(),getAuthority(),getPath(),getQuery(),thatFragment);    }    if (thatAuthority != null) {      return new URI(getScheme(),thatAuthority,thatPath,thatQuery,thatFragment);    }    if (thatPath != null && thatPath.charAt(0) == PATH_SEPARATOR) {      return new URI(getScheme(),getAuthority(),thatPath,thatQuery,thatFragment);    }    String thisPath=getPath();    if (thisPath != null) {      int index=thisPath.lastIndexOf(PATH_SEPARATOR);      if (index != -1) {        thisPath=thisPath.substring(index);      }    }    thisPath+=PATH_SEPARATOR + thatPath;    return new URI(getScheme(),getAuthority(),thisPath,thatQuery,thatFragment).normalize();  } catch (  URISyntaxException use) {    throw new IllegalArgumentException(use.getMessage());  }}  }
class C{  @Override public void discover(AccessProfile accessProfile) throws BaseCollectionException {  _logger.info("Access Profile Details :  IpAddress : PortNumber : {}, namespace : {}",accessProfile.getIpAddress() + ":" + accessProfile.getPortNumber(),accessProfile.getnamespace());  if ((null != accessProfile.getnamespace()) && (accessProfile.getnamespace().equals(StorageSystem.Discovery_Namespaces.UNMANAGED_FILESYSTEMS.toString()))) {    discoverUmanagedFileSystems(accessProfile);    discoverUnmanagedNewExports(accessProfile);    discoverUnManagedCifsShares(accessProfile);  } else {    discoverAll(accessProfile);  }}  }
class C{  public StandardCategoryToolTipGenerator(){  super(DEFAULT_TOOL_TIP_FORMAT_STRING,NumberFormat.getInstance());}  }
class C{  public final char lastChar(){  if (_length == 0)   throw new IndexOutOfBoundsException();  return _buffer[_offset + _length - 1];}  }
class C{  @Override public boolean isModifiedImpl(){  if (_isDigestModified || _depend.isModified()) {    _changeSequence.incrementAndGet();    return true;  } else   return false;}  }
class C{  private void copyPrivateRawResuorceToPubliclyAccessibleFile(){  InputStream inputStream=null;  FileOutputStream outputStream=null;  try {    inputStream=getResources().openRawResource(R.raw.robot);    outputStream=openFileOutput(SHARED_FILE_NAME,Context.MODE_WORLD_READABLE | Context.MODE_APPEND);    byte[] buffer=new byte[1024];    int length;    try {      while ((length=inputStream.read(buffer)) > 0) {        outputStream.write(buffer,0,length);      }    } catch (    IOException ioe) {    }  } catch (  FileNotFoundException fnfe) {  } finally {    try {      if (inputStream != null)       inputStream.close();    } catch (    IOException ioe) {    }    try {      if (outputStream != null)       outputStream.close();    } catch (    IOException ioe) {    }  }}  }
class C{  protected Anonymous_methodBody_2_Impl(){  super();}  }
class C{  @Override public boolean isSupportingLogScale(int axis){  if (axis == 0) {    return true;  } else {    return false;  }}  }
class C{  @Override protected void addGlobalActions(IMenuManager menuManager){  menuManager.insertAfter("additions-end",new Separator("ui-actions"));  menuManager.insertAfter("ui-actions",showPropertiesViewAction);  refreshViewerAction.setEnabled(refreshViewerAction.isEnabled());  menuManager.insertAfter("ui-actions",refreshViewerAction);  super.addGlobalActions(menuManager);}  }
class C{  public Clustering<DendrogramModel> extractClusters(DBIDs ids,DBIDDataStore pi,DoubleDataStore lambda,DoubleDataStore coredist){  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("Extracting clusters",ids.size(),LOG) : null;  ArrayDBIDs order=PointerHierarchyRepresentationResult.topologicalSort(ids,pi,lambda);  WritableDataStore<TempCluster> cluster_map=DataStoreUtil.makeStorage(ids,DataStoreFactory.HINT_TEMP,TempCluster.class);  ArrayModifiableDBIDs noise=DBIDUtil.newArray();  ArrayList<Cluster<DendrogramModel>> toplevel=new ArrayList<>();  final Clustering<DendrogramModel> dendrogram=new Clustering<>("Hierarchical Clustering","hierarchical-clustering");  DBIDVar succ=DBIDUtil.newVar();  for (DBIDArrayIter it=order.iter(); it.valid(); it.advance()) {    final double dist=lambda.doubleValue(it);    final boolean cIsCore=(coredist == null) || dist >= coredist.doubleValue(it);    TempCluster cclus=cluster_map.get(it);    final boolean cNotSpurious=cclus != null ? cclus.isNotSpurious(minClSize) : (minClSize <= 1 && cIsCore);    pi.assignVar(it,succ);    if (DBIDUtil.equal(it,succ)) {      if (cclus != null) {        if (cclus.isNotSpurious(minClSize)) {          toplevel.add(cclus.toCluster(dendrogram,it));        } else {          noise.addDBIDs(cclus.newids);        }        cluster_map.put(it,null);      } else       if (minClSize <= 1 && cIsCore) {        toplevel.add(makeSingletonCluster(it,dist));      } else {        noise.add(it);      }      LOG.incrementProcessed(progress);      continue;    }    TempCluster oclus=cluster_map.get(succ);    final boolean oIsCore=(coredist == null || dist <= coredist.doubleValue(succ));    final boolean oNotSpurious=oclus != null ? oclus.isNotSpurious(minClSize) : (minClSize <= 1 && oIsCore);    if (oclus != null && cclus != null) {      if (oNotSpurious && cNotSpurious) {        oclus.addChild(oclus.toCluster(dendrogram,it));        oclus.addChild(cclus.toCluster(dendrogram,it));        assert (oclus.children.size() == 2);        oclus.depth=dist;      } else       if (cNotSpurious) {        cclus.addDBIDs(oclus.newids);        assert (oclus.children.isEmpty());        cclus.depth=dist;        cluster_map.put(succ,cclus);      } else {        oclus.addDBIDs(cclus.newids);        assert (cclus.children.isEmpty());        oclus.depth=dist;      }    } else     if (cclus != null) {      if (cNotSpurious && oNotSpurious) {        cclus.addChild(cclus.toCluster(dendrogram,it));      }      addSingleton(cclus,succ,dist,oNotSpurious);      cluster_map.put(succ,cclus);    } else     if (oclus != null) {      if (cNotSpurious && oNotSpurious) {        oclus.addChild(oclus.toCluster(dendrogram,it));      }      addSingleton(oclus,it,dist,cNotSpurious);    } else {      oclus=new TempCluster(dist);      addSingleton(oclus,it,dist,cNotSpurious);      addSingleton(oclus,succ,dist,oNotSpurious);      cluster_map.put(succ,oclus);    }    cluster_map.put(it,null);    LOG.incrementProcessed(progress);  }  LOG.ensureCompleted(progress);  if (noise.size() > 0) {    Cluster<DendrogramModel> nclus=new Cluster<>("Noise",noise,true,new DendrogramModel(Double.POSITIVE_INFINITY));    dendrogram.addToplevelCluster(nclus);    for (    Cluster<DendrogramModel> clus : toplevel) {      dendrogram.addChildCluster(nclus,clus);    }  } else {    for (    Cluster<DendrogramModel> clus : toplevel) {      dendrogram.addToplevelCluster(clus);    }  }  return dendrogram;}  }
class C{  public void ifCmp(final Type type,final int mode,final Label label){switch (type.getSort()) {case Type.LONG:    mv.visitInsn(Opcodes.LCMP);  break;case Type.DOUBLE:mv.visitInsn(mode == GE || mode == GT ? Opcodes.DCMPL : Opcodes.DCMPG);break;case Type.FLOAT:mv.visitInsn(mode == GE || mode == GT ? Opcodes.FCMPL : Opcodes.FCMPG);break;case Type.ARRAY:case Type.OBJECT:switch (mode) {case EQ:mv.visitJumpInsn(Opcodes.IF_ACMPEQ,label);return;case NE:mv.visitJumpInsn(Opcodes.IF_ACMPNE,label);return;}throw new IllegalArgumentException("Bad comparison for type " + type);default :int intOp=-1;switch (mode) {case EQ:intOp=Opcodes.IF_ICMPEQ;break;case NE:intOp=Opcodes.IF_ICMPNE;break;case GE:intOp=Opcodes.IF_ICMPGE;break;case LT:intOp=Opcodes.IF_ICMPLT;break;case LE:intOp=Opcodes.IF_ICMPLE;break;case GT:intOp=Opcodes.IF_ICMPGT;break;}mv.visitJumpInsn(intOp,label);return;}mv.visitJumpInsn(mode,label);}  }
class C{  public ReliefF(int featureCount){  this(featureCount,100,15,new EuclideanDistance(),new DefaultVectorCollectionFactory<Vec>());}  }
class C{  public boolean isPositive(){  for (  final T key : mapValues.keySet()) {    if (getInt(key) < 0) {      return false;    }  }  return true;}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  }  invalidate();}  }
class C{  public select addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void addUpperLineSegment(ILineSegment upper){  if (upper.getStart().equals(point)) {    upperSegments.append(upper);  } else {    throw new IllegalArgumentException("Improper attempt to add line segment whose upper point does not match EventPoint.");  }}  }
class C{  public LinearConversion(int factor,int divider,int offset,int offsetPhys,String units){  this.offset=offset;  this.factor=factor;  this.divider=divider;  this.offsetPhys=offsetPhys;  this.units=units;}  }
class C{  public Element makeElement(SVGPlot plot){  Element elem=plot.svgElement(SVGConstants.SVG_PATH_TAG);  elem.setAttribute(SVGConstants.SVG_D_ATTRIBUTE,buf.toString());  return elem;}  }
class C{  public void resetDirty(){  setDirty(false);  savedEditMode=isEditable();  savedPositionable=allPositionable();  savedControlLayout=allControlling();  savedAnimatingLayout=animatingLayout;  savedShowHelpBar=showHelpBar;}  }
class C{  public static OutputStream createOutputStream(File file) throws IOException {  return createOutputStream(file,FileUtils.isGzipFilename(file),false);}  }
class C{  protected void newFrame(final ElementFrame frame){  final Element element=getCurrentElement();  frame.uris=new ArrayList();  frame.prefixes=new ArrayList();  frame.attributes=new ArrayList();  if (context == null) {    context=new DOMNamespaceContext();  }  context.setElement(element);  final NamedNodeMap nodes=element.getAttributes();  String ePrefix=element.getPrefix();  if (ePrefix == null) {    ePrefix="";  }  for (int i=0; i < nodes.getLength(); i++) {    final Node node=nodes.item(i);    String prefix=node.getPrefix();    final String localName=node.getLocalName();    final String value=node.getNodeValue();    final String name=node.getNodeName();    if (prefix == null) {      prefix="";    }    if (name != null && name.equals("xmlns")) {      frame.uris.add(value);      frame.prefixes.add("");    } else     if (prefix.length() > 0 && prefix.equals("xmlns")) {      frame.uris.add(value);      frame.prefixes.add(localName);    } else     if (name.startsWith("xmlns:")) {      prefix=name.substring(6);      frame.uris.add(value);      frame.prefixes.add(prefix);    } else {      frame.attributes.add(node);    }  }}  }
class C{  public Iterator<String> iterateControllers(){  return controllers.iterator();}  }
class C{  public String toFormattedString(){  return "CUDA texture descriptor:\n    " + createString("\n    ");}  }
class C{  public static byte intToByte(int i){  return (byte)(i & 0xFF);}  }
class C{  @Override public void draw(Graphics2D g){  if (getEditor().getTool().supportsHandleInteraction()) {    drawDiamond(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR));  } else {    drawDiamond(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_FILL_COLOR_DISABLED),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.ATTRIBUTE_HANDLE_STROKE_COLOR_DISABLED));  }}  }
class C{  @Override protected void dispatchDraw(@NonNull final Canvas c){  super.dispatchDraw(c);  if (mSelectorPosition == SelectorPosition.OVER) {    if (mStrokeCell != null) {      mStrokeCell.draw(c);    }  }}  }
class C{  public void afterIndexLookup(Collection results){  if (results == null) {    return;  }  Map indexMap=(Map)this.indexInfo.get();  if (lastIndexUsed.get() != null) {    IndexInfo indexInfo=(IndexInfo)indexMap.get(((Index)this.lastIndexUsed.get()).getName());    if (indexInfo != null) {      indexInfo.getResults().put(((Index)this.lastIndexUsed.get()).getRegion().getFullPath(),new Integer(results.size()));    }  }  this.lastIndexUsed.set(null);  if (th != null) {    th.hook(3);  }}  }
class C{  public static void process(String url,String user,String password,String fileName,String options1,String options2) throws SQLException {  Connection conn=null;  try {    org.h2.Driver.load();    conn=DriverManager.getConnection(url,user,password);    process(conn,fileName,options1,options2);  }  finally {    JdbcUtils.closeSilently(conn);  }}  }
class C{  public Fugue224(){  super();}  }
class C{  void constructZones(final ActivityFacilitiesImpl zones,final Map<Id<ActivityFacility>,PseudoZone> pseudoZones){  log.info("Starting to construct urbansim zones (for the impedance matrix)");  Id<ActivityFacility> zone_ID;  PseudoZone pz;  Coord coord;  for (  Entry<Id<ActivityFacility>,PseudoZone> entry : pseudoZones.entrySet()) {    zone_ID=entry.getKey();    pz=entry.getValue();    coord=new Coord(pz.sumXCoordinate / pz.count,pz.sumYCoordinate / pz.count);    zones.createAndAddFacility(zone_ID,coord);  }  log.info("Done with constructing urbansim zones. Constucted " + zones.getFacilities().size() + " zones.");}  }
class C{  public boolean isNull(){  return false;}  }
class C{  public BigdataReader(BigdataSailRepository repo){  this.repo=repo;}  }
class C{  public void test_socket_getLocalPort() throws IOException {  serverChannel.socket().bind(localAddr1);  clientChannel.connect(localAddr1);  SocketChannel myChannel=serverChannel.accept();  int port=myChannel.socket().getLocalPort();  assertEquals(localAddr1.getPort(),port);  myChannel.close();  clientChannel.close();  serverChannel.close();}  }
class C{  public void removeChangeListener(ChartChangeListener listener){  ParamChecks.nullNotPermitted(listener,"listener");  this.changeListeners.remove(ChartChangeListener.class,listener);}  }
class C{  private boolean isGamblingZoneAndIsDice(final Entity entity){  return "int_semos_tavern_0".equals(zone.getName()) && ("dice").equals(entity.getTitle());}  }
class C{  public static void updateNewlyCreatedGroupClone(Volume volume,VolumeClone deviceClone,URI cgURI,DbClient dbClient) throws IOException {  volume.setNativeId(deviceClone.getNativeId());  volume.setWWN(deviceClone.getWwn());  volume.setDeviceLabel(deviceClone.getDeviceLabel());  volume.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(dbClient,volume));  volume.setReplicaState(deviceClone.getReplicationState().name());  volume.setReplicationGroupInstance(deviceClone.getConsistencyGroup());  volume.setProvisionedCapacity(deviceClone.getProvisionedCapacity());  volume.setAllocatedCapacity(deviceClone.getAllocatedCapacity());  volume.setInactive(false);  volume.setConsistencyGroup(cgURI);}  }
class C{  public void constValueIndex(char value) throws IOException {  constValueIndex('C',pool.addIntegerInfo(value));}  }
class C{  public GetEndpointsResponse clone(){  GetEndpointsResponse result=new GetEndpointsResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (Endpoints != null) {    result.Endpoints=new EndpointDescription[Endpoints.length];    for (int i=0; i < Endpoints.length; i++)     result.Endpoints[i]=Endpoints[i].clone();  }  return result;}  }
class C{  @Override public Session createSession(ConnectionInfo ci){  return INSTANCE.createSessionAndValidate(ci);}  }
class C{  @Override public void afterPropertiesSet(){  try {    super.afterPropertiesSet();  } catch (  ServletException e) {    throw new RuntimeException(e);  }}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public BufferedOutputStream(OutputStream out,int size){  super(out);  if (size <= 0) {    throw new IllegalArgumentException("Buffer size <= 0");  }  buf=new byte[size];}  }
class C{  public boolean pastRound(int testRound){  if (NO_ROUND == round) {    return true;  }  return testRound < round;}  }
class C{  public static Pointer to(byte values[]){  return new Pointer(ByteBuffer.wrap(values));}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public boolean isClonedNewExpr(Value value){  return newExprMap.containsKey(value);}  }
class C{  public static String toCommandLine(Object obj){  StringBuffer result;  result=new StringBuffer();  if (obj != null) {    result.append(obj.getClass().getName());    if (obj instanceof OptionHandler) {      result.append(" " + joinOptions(((OptionHandler)obj).getOptions()));    }  }  return result.toString().trim();}  }
class C{  public void parseConfig(ExtensionProfile configProfile,ClassLoader classLoader,InputStream stream) throws IOException, ParseException {  Handler handler=new Handler(configProfile,classLoader,null);  new XmlParser().parse(stream,handler,Namespaces.gdataConfig,"extensionProfile");}  }
class C{  public boolean isExpired(RepositoryProxyCache proxyCache){  long methodCacheTime=proxyCache.getCacheTime();  boolean unlimitedCache=methodCacheTime <= 0;  File cacheFile=buildFile(proxyCache.getCacheDir(),proxyCache.getFileName(),DEFAULT_FILE_NAME);  if (isCached(cacheFile)) {    if (unlimitedCache) {      return false;    }    long lastModifiedTime=fileManager.getLastModifiedTime(cacheFile);    boolean expired=System.currentTimeMillis() > (lastModifiedTime + methodCacheTime);    if (expired) {      evict(proxyCache);    }    return expired;  }  return true;}  }
class C{  public void createDatabaseEntitiesForBusinessObjectFormatDdlTesting(String businessObjectFormatFileType,String partitionKey,String schemaDelimiterCharacter,String schemaEscapeCharacter,String schemaNullValue,List<SchemaColumn> schemaColumns,List<SchemaColumn> partitionColumns,String customDdlName){  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDao.getBusinessObjectFormatByAltKey(new BusinessObjectFormatKey(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,businessObjectFormatFileType,AbstractServiceTest.FORMAT_VERSION));  if (businessObjectFormatEntity == null) {    businessObjectFormatEntity=businessObjectFormatDaoTestHelper.createBusinessObjectFormatEntity(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,businessObjectFormatFileType,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.FORMAT_DESCRIPTION,AbstractServiceTest.LATEST_VERSION_FLAG_SET,partitionKey,AbstractServiceTest.NO_PARTITION_KEY_GROUP,AbstractServiceTest.NO_ATTRIBUTES,schemaDelimiterCharacter,schemaEscapeCharacter,schemaNullValue,schemaColumns,partitionColumns);  }  if (StringUtils.isNotBlank(customDdlName)) {    boolean partitioned=(partitionColumns != null);    customDdlDaoTestHelper.createCustomDdlEntity(businessObjectFormatEntity,customDdlName,customDdlServiceTestHelper.getTestCustomDdl(partitioned));  }}  }
class C{  public static double erf(double x){  final double w=x < 0 ? -x : x;  double y;  if (w < 2.2) {    double t=w * w;    int k=(int)t;    t-=k;    k*=13;    y=((((((((((((ERF_COEFF1[k] * t + ERF_COEFF1[k + 1]) * t + ERF_COEFF1[k + 2]) * t + ERF_COEFF1[k + 3]) * t + ERF_COEFF1[k + 4]) * t + ERF_COEFF1[k + 5]) * t + ERF_COEFF1[k + 6]) * t + ERF_COEFF1[k + 7]) * t + ERF_COEFF1[k + 8]) * t + ERF_COEFF1[k + 9]) * t + ERF_COEFF1[k + 10]) * t + ERF_COEFF1[k + 11]) * t + ERF_COEFF1[k + 12]) * w;  } else   if (w < 6.9) {    int k=(int)w;    double t=w - k;    k=13 * (k - 2);    y=(((((((((((ERF_COEFF2[k] * t + ERF_COEFF2[k + 1]) * t + ERF_COEFF2[k + 2]) * t + ERF_COEFF2[k + 3]) * t + ERF_COEFF2[k + 4]) * t + ERF_COEFF2[k + 5]) * t + ERF_COEFF2[k + 6]) * t + ERF_COEFF2[k + 7]) * t + ERF_COEFF2[k + 8]) * t + ERF_COEFF2[k + 9]) * t + ERF_COEFF2[k + 10]) * t + ERF_COEFF2[k + 11]) * t + ERF_COEFF2[k + 12];    y*=y;    y*=y;    y*=y;    y=1 - y * y;  } else {    y=1;  }  return x < 0 ? -y : y;}  }
class C{  public final boolean isEnabled(Feature f){  return (_featureFlags & f.getMask()) != 0;}  }
class C{  public static double parsePercent(FXGNode node,String value,String name){  if (value.length() != 0 && value.charAt(value.length() - 1) == '%') {    String doubleValue=value.substring(0,value.length() - 1);    try {      return parseDouble(node,doubleValue,name);    } catch (    FXGException e) {      throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidPercentValue",name,value);    }  } else {    return parseDouble(node,value,name);  }}  }
class C{  public int entrySize(Object key,Object value) throws IllegalArgumentException {  if (Token.isRemoved(value)) {    return 0;  }  if ((value == null || value == Token.INVALID || value == Token.LOCAL_INVALID) && getEvictionAction().isOverflowToDisk()) {    return 0;  } else {    return 1;  }}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.CHARACTER_ESCAPE_SEQUENCE;}  }
class C{  private void run(){  long startTime=System.nanoTime();  ShapeFile output=null;  ShapeFile output2=null;  int progress, oldProgress;  boolean conductFineSearch=false;  int j;  int refNeighbourhoodStart=40;  int refNeighbourhoodStep=20;  maxNeighbourhoodSize=500;  epsilon=1.2;  int polyOrder=2;  StringBuilder str;  KdTree<Double> controlPointTree=new KdTree.SqrEuclid<>(2,new Integer(2000));  try {    String ppFile1="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/test point3.shp";    String referenceFile="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/GuelphCampus_C6430-74072-L9_254_Blue_clipped.dep";    String transformedFile="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/GuelphCampus_C6430-74072-L9_253_Blue_clipped.dep";    String referenceTiePoints="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/campus 254 tie points.shp";    String transformedTiePoints="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/campus 253 tie points.shp";    String outputFile="/Users/johnlindsay/Documents/Teaching/GEOG2420/airphotos/tmp6.shp";    DBFField[] fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("r1");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setDecimalCount(4);    fields[0].setFieldLength(10);    output=new ShapeFile(outputFile,ShapeType.POINT,fields);    fields=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("r1");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setDecimalCount(4);    fields[0].setFieldLength(10);    output2=new ShapeFile(outputFile.replace(".shp","_2.shp"),ShapeType.POINT,fields);    referenceImage=new WhiteboxRaster(referenceFile,"r");    referenceImage.setForceAllDataInMemory(true);    int rows1=referenceImage.getNumberRows();    int cols1=referenceImage.getNumberColumns();    referenceNoData=referenceImage.getNoDataValue();    transformedImage=new WhiteboxRaster(transformedFile,"r");    transformedImage.setForceAllDataInMemory(true);    transformedNoData=transformedImage.getNoDataValue();    ShapeFile pp1=new ShapeFile(ppFile1);    if (pp1.getShapeType().getBaseType() != ShapeType.POINT && pp1.getShapeType().getBaseType() != ShapeType.MULTIPOINT) {      return;    }    ShapeFileRecord record=pp1.getRecord(0);    double[][] point;    ShapeFile refTiePoints=new ShapeFile(referenceTiePoints);    if (refTiePoints.getShapeType().getBaseType() != ShapeType.POINT) {      return;    }    ShapeFile transTiePoints=new ShapeFile(transformedTiePoints);    if (transTiePoints.getShapeType().getBaseType() != ShapeType.POINT) {      return;    }    int numTiePoints=refTiePoints.getNumberOfRecords();    if (transTiePoints.getNumberOfRecords() != numTiePoints) {      return;    }    calculateOffsets();    conductFineSearch=true;    ArrayList<XYPoint> tiePointsRef=new ArrayList<>();    ArrayList<XYPoint> tiePointsTransform=new ArrayList<>();    for (int r=0; r < refTiePoints.getNumberOfRecords(); r++) {      double[][] refPoint=refTiePoints.getRecord(r).getGeometry().getPoints();      int refCol=referenceImage.getColumnFromXCoordinate(refPoint[0][0]);      int refRow=referenceImage.getRowFromYCoordinate(refPoint[0][1]);      point=transTiePoints.getRecord(r).getGeometry().getPoints();      int transCol=transformedImage.getColumnFromXCoordinate(point[0][0]);      int transRow=transformedImage.getRowFromYCoordinate(point[0][1]);      RowPriorityGridCell gc=findPixelMatch(refCol,refRow,transCol,transRow,conductFineSearch,refNeighbourhoodStart,refNeighbourhoodStep,30,1.0);      System.out.println("Control Point " + (r + 1) + ": "+ gc.z);      int matchedCol=gc.col;      int matchedRow=gc.row;      double matchedCorrelation=gc.z;      if (matchedCorrelation >= 0.95) {        double x2=transformedImage.getXCoordinateFromColumn(matchedCol);        double y2=transformedImage.getYCoordinateFromRow(matchedRow);        whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point(x2,y2);        Object[] rowData=new Object[1];        rowData[0]=new Double(matchedCorrelation);        output.addRecord(PP,rowData);        PP=new whitebox.geospatialfiles.shapefile.Point(refPoint[0][0],refPoint[0][1]);        rowData=new Object[2];        rowData[0]=new Double(matchedCorrelation);        rowData[1]=new Double(0.0);        output2.addRecord(PP,rowData);        tiePointsRef.add(new XYPoint(refPoint[0][0],refPoint[0][1]));        tiePointsTransform.add(new XYPoint(x2,y2));      } else {        System.out.println("No suitable match could be located.");      }    }    conductFineSearch=false;    List<KdTree.Entry<Double>> results;    int newPolyOrder=polyOrder;    if (newPolyOrder == 4 && tiePointsRef.size() < 15) {      newPolyOrder--;    }    if (newPolyOrder == 3 && tiePointsRef.size() < 10) {      newPolyOrder--;    }    if (newPolyOrder == 2 && tiePointsRef.size() < 6) {      newPolyOrder--;    }    numTiePoints=0;    for (    XYPoint tie : tiePointsRef) {      double[] entry={tie.x,tie.y};      controlPointTree.addPoint(entry,(double)numTiePoints);      numTiePoints++;    }    PolynomialLeastSquares2DFitting pls=new PolynomialLeastSquares2DFitting(tiePointsRef,tiePointsTransform,newPolyOrder);    double rmse=pls.getOverallRMSE();    System.out.println("\nRMSE: " + rmse);    double north=transformedImage.getNorth();    double south=transformedImage.getSouth();    double east=transformedImage.getEast();    double west=transformedImage.getWest();    int totalPointsSearched=0;    int interval=1000;    double intervalSteps=1.5;    int loopNum=1;    do {      System.out.println("Interval: " + interval);      oldProgress=-1;      for (int r=0; r < rows1; r+=interval) {        for (int c=0; c < cols1; c+=interval) {          if (referenceImage.getValue(r,c) != referenceNoData) {            double refXCoord=referenceImage.getXCoordinateFromColumn(c);            double refYCoord=referenceImage.getYCoordinateFromRow(r);            double[] entry={refXCoord,refYCoord};            int numNearestNeighbours=15;            if (numTiePoints < 15) {              numNearestNeighbours=numTiePoints;            }            results=controlPointTree.nearestNeighbor(entry,numNearestNeighbours,true);            j=results.size();            double[] X1=new double[j];            double[] Y1=new double[j];            double[] X2=new double[j];            double[] Y2=new double[j];            for (int k=0; k < j; k++) {              double val=results.get(k).value;              X1[k]=tiePointsRef.get((int)val).x;              Y1[k]=tiePointsRef.get((int)val).y;              X2[k]=tiePointsTransform.get((int)val).x;              Y2[k]=tiePointsTransform.get((int)val).y;            }            int count=0;            double scaleFactor=0;            for (int k=0; k < j; k++) {              double x1Ref=X1[k];              double y1Ref=Y1[k];              double x1Tr=X2[k];              double y1Tr=Y2[k];              for (int m=k + 1; m < j; m++) {                double x2Ref=X1[m];                double y2Ref=Y1[m];                double x2Tr=X2[m];                double y2Tr=Y2[m];                double dist1=sqrt((x2Ref - x1Ref) * (x2Ref - x1Ref) + (y2Ref - y1Ref) * (y2Ref - y1Ref));                double dist2=sqrt((x2Tr - x1Tr) * (x2Tr - x1Tr) + (y2Tr - y1Tr) * (y2Tr - y1Tr));                if (dist1 > 0) {                  scaleFactor+=dist2 / dist1;                  count++;                }              }            }            scaleFactor=scaleFactor / count;            pls=new PolynomialLeastSquares2DFitting(X1,Y1,X2,Y2,1);            rmse=pls.getOverallRMSE();            XYPoint transCoords=pls.getForwardCoordinates(refXCoord,refYCoord);            if (transCoords.x <= east && transCoords.x >= west && transCoords.y >= south && transCoords.y <= north) {              totalPointsSearched++;              int transCol=transformedImage.getColumnFromXCoordinate(transCoords.x);              int transRow=transformedImage.getRowFromYCoordinate(transCoords.y);              int searchWindowRadius=(int)rmse * 2;              if (searchWindowRadius < 80) {                searchWindowRadius=80;              }              RowPriorityGridCell gc=findPixelMatch(c,r,transCol,transRow,conductFineSearch,refNeighbourhoodStart,refNeighbourhoodStep,searchWindowRadius,scaleFactor);              int matchedCol=gc.col;              int matchedRow=gc.row;              double matchedCorrelation=gc.z;              if (matchedCorrelation >= 0.95) {                double x2=transformedImage.getXCoordinateFromColumn(matchedCol);                double y2=transformedImage.getYCoordinateFromRow(matchedRow);                whitebox.geospatialfiles.shapefile.Point PP=new whitebox.geospatialfiles.shapefile.Point(x2,y2);                Object[] rowData=new Object[1];                rowData[0]=new Double(matchedCorrelation);                output.addRecord(PP,rowData);                PP=new whitebox.geospatialfiles.shapefile.Point(refXCoord,refYCoord);                rowData=new Object[1];                rowData[0]=new Double(matchedCorrelation);                output2.addRecord(PP,rowData);                tiePointsRef.add(new XYPoint(refXCoord,refYCoord));                tiePointsTransform.add(new XYPoint(x2,y2));                entry=new double[]{refXCoord,refYCoord};                controlPointTree.addPoint(entry,(double)numTiePoints);                numTiePoints++;                newPolyOrder=polyOrder;                if (newPolyOrder == 4 && tiePointsRef.size() < 15) {                  newPolyOrder--;                }                if (newPolyOrder == 3 && tiePointsRef.size() < 10) {                  newPolyOrder--;                }                if (newPolyOrder == 2 && tiePointsRef.size() < 6) {                  newPolyOrder--;                }              }            }          }        }        progress=(int)((100.0 * r) / rows1);        if (progress > oldProgress) {          System.out.println("Loop " + loopNum + " "+ progress+ "%"+ ", Num. tie points: "+ tiePointsRef.size()+ " of "+ totalPointsSearched+ " ("+ (100f * tiePointsRef.size() / totalPointsSearched)+ "%)");          oldProgress=progress;        }      }      loopNum++;      interval=(int)(interval / intervalSteps);    } while (interval >= 200);    referenceImage.close();    transformedImage.close();    output.write();    output2.write();    System.out.println("\nOperation complete!");    long endTime=System.nanoTime();    double duration=(endTime - startTime);    int secs=(int)(duration / 1000000000);    int hours=secs / 3600;    secs=secs - 3600 * hours;    int minutes=secs / 60;    secs=secs - minutes * 60;    int seconds=secs;    str=new StringBuilder();    str.append("Duration: ");    if (hours > 0) {      str.append(hours).append(" hours, ");    }    if (minutes > 0) {      str.append(minutes).append(" minutes, ");    }    if (seconds > 0) {      str.append(seconds).append(" seconds, ");    }    System.out.println(str.toString());  } catch (  Exception e) {    if (output != null && output2 != null) {      try {        output.write();        output2.write();      } catch (      Exception e2) {      }    }    e.printStackTrace();  }}  }
class C{  public void start(String key,String message){  Date now=new Date();  startTimes.put(key,now);  message="" + message;  log(now,"-> " + key + (message.isEmpty() ? "" : ": " + message));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:15.120 -0400",hash_original_method="1385A79841FD2756C1AA471B7F04FD3A",hash_generated_method="6F6CC5571BB7844B8125B8A828B86574") public final CertPathBuilderResult build(CertPathParameters params) throws CertPathBuilderException, InvalidAlgorithmParameterException {  return spiImpl.engineBuild(params);}  }
class C{  private List createTestRuns(){  Vector testRuns=new Vector();  int runIndex=0;  for (Iterator i=testFiles.iterator(); i.hasNext(); ) {    File testFile=(File)i.next();    runIndex++;    System.out.println("Reading test file " + testFile.getAbsolutePath());    TestRun testRun=testReader.createTestRun(testFile,runIndex);    if (testRun != null) {      testRuns.add(testRun);    }  }  return testRuns;}  }
class C{  private void reuseExistingExportMask(Map<URI,Integer> blockObjectMap,StorageSystem vplexSystem,ExportGroup exportGroup,URI varrayUri,List<ExportMask> exportMasksToUpdateOnDevice,Map<URI,List<URI>> exportMasksToUpdateOnDeviceWithStoragePorts,List<Initiator> inits,boolean allPortsFromMaskMatchForVarray,ExportMask viprExportMask,String opId){  exportMasksToUpdateOnDevice.add(viprExportMask);  exportGroup.addExportMask(viprExportMask.getId());  _dbClient.updateObject(exportGroup);  ExportPathParams pathParams=_blockScheduler.calculateExportPathParamForVolumes(blockObjectMap.keySet(),exportGroup.getNumPaths(),vplexSystem.getId(),exportGroup.getId());  if (exportGroup.getType() != null) {    pathParams.setExportGroupType(exportGroup.getType());  }  if (!allPortsFromMaskMatchForVarray) {    Map<URI,List<URI>> assignments=_blockScheduler.assignStoragePorts(vplexSystem,exportGroup,inits,viprExportMask.getZoningMap(),pathParams,null,_networkDeviceController,varrayUri,opId);    if (assignments != null && !assignments.isEmpty()) {      viprExportMask=ExportUtils.updateZoningMap(_dbClient,viprExportMask,assignments,exportMasksToUpdateOnDeviceWithStoragePorts);    }  }}  }
class C{  private void writeChartToKmz(final String filename,final JFreeChart chart) throws IOException {  byte[] img;  img=ChartUtilities.encodeAsPNG(chart.createBufferedImage(CHARTWIDTH,CHARTHEIGHT));  this.writer.addNonKMLFile(img,filename);}  }
class C{  void mouseClicked(MouseEvent e){  if (m_dse == null || m_dse.CreatedBy == null || !MRole.getDefault().isShowPreference())   return;  String title=Msg.getMsg(Env.getCtx(),"Who") + m_text;  RecordInfo info=new RecordInfo(Env.getFrame(this),title,m_dse);  AEnv.showCenterScreen(info);}  }
class C{  public boolean isLikelyEbcdic(){  return likelyEbcdic;}  }
class C{  @Inline @Entrypoint public static byte byteFieldRead(Object ref,Offset offset,int locationMetadata){  if (NEEDS_BYTE_GC_READ_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    return Selected.Mutator.get().byteRead(src,src.toAddress().plus(offset),offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return 0;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public Comment addComment(String comment){  Comment prop=new Comment(comment);  addComment(prop);  return prop;}  }
class C{  public void testLocalSqlQuery(){  IgniteCache<Integer,Value> cache=grid(0).cache(null);  SqlQuery<Integer,Value> qry=new SqlQuery<>(Value.class.getSimpleName(),"select * from Value");  qry.setLocal(true);  List<Cache.Entry<Integer,Value>> all=cache.query(qry).getAll();  assertFalse(all.isEmpty());  for (  Cache.Entry<Integer,Value> entry : all)   entry.getValue().str="after";  check(cache);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {{      ZComp focusOwner=uiComp.getLastFocusedChild();      if (focusOwner == null)       return new Integer(-1);      if (focusOwner instanceof ZPseudoComp) {        ZPseudoComp focusComp=(ZPseudoComp)focusOwner;        ZDataTable tabParent=focusComp.getTableParent();        boolean vert=true;        if (tabParent != null && tabParent.getTableDimensions() == ZDataTable.HORIZONTAL_DIMENSION)         vert=false;        Object o1=focusComp.getRelatedContext().safeLookup("TableRow");        Object o2=focusComp.getRelatedContext().safeLookup("NumColsPerPage");        Object o3=focusComp.getRelatedContext().safeLookup("VScrollIndex");        Object o4=focusComp.getRelatedContext().safeLookup("NumRowsPerPage");        Object o5=focusComp.getRelatedContext().safeLookup("HScrollIndex");        int tablePosition=o1 != null ? (Integer.parseInt(o1.toString()) - 1) : 0;        int colsPerPage=o2 != null ? Math.max(1,Integer.parseInt(o2.toString())) : 1;        int vscrollIndex=o3 != null ? (Integer.parseInt(o3.toString()) - 1) : 0;        int rowsPerPage=o4 != null ? Math.max(1,Integer.parseInt(o4.toString())) : 1;        int hscrollIndex=o5 != null ? (Integer.parseInt(o5.toString()) - 1) : 0;        if (vert) {          Object o7=focusComp.getRelatedContext().safeLookup("NumRows");          int numRows=o7 != null ? Integer.parseInt(o7.toString()) : 1;          return new Integer(1 + (((tablePosition - colsPerPage * vscrollIndex - rowsPerPage * hscrollIndex + numRows) % numRows) / colsPerPage));        } else {          Object o6=focusComp.getRelatedContext().safeLookup("NumCols");          int numCols=o6 != null ? Integer.parseInt(o6.toString()) : 1;          return new Integer(1 + (((tablePosition - colsPerPage * vscrollIndex - rowsPerPage * hscrollIndex + numCols) % numCols) % rowsPerPage));        }      }    }  }  return new Integer(-1);}  }
class C{  public BurlapInput(){}  }
class C{  public String toString(){  return "MColor[ID=" + get_ID() + " - "+ getName()+ "]";}  }
class C{  Constraint buildConstraint(String fieldName,String selectionValue){  if (isAltIdIndex(fieldName)) {    return new AlternateIdConstraintImpl(dot.getColumnField(fieldName),selectionValue);  }  if (isPrefixIndex(fieldName)) {    return new PrefixConstraintImpl(selectionValue,dot.getColumnField(fieldName));  }  return null;}  }
class C{  @Override public String toString(){  return new StringBuilder("EndDocument: ").toString();}  }
class C{  public void text(String text) throws IOException {  _write(XMLUtil.escapeCharacterData(text));}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public void open(){  refCount.incrementAndGet();}  }
class C{  public ParameterizedPropertyAccessExpression createParameterizedPropertyAccessExpression(){  ParameterizedPropertyAccessExpressionImpl parameterizedPropertyAccessExpression=new ParameterizedPropertyAccessExpressionImpl();  return parameterizedPropertyAccessExpression;}  }
class C{  public void clear(){  cache.edit().clear().apply();}  }
class C{  private Value fixNumber(Literal value){  if (value.getDatatype().equals(XMLSchema.DECIMAL)) {    if (!isNumericString(value.getLabel())) {      return new LiteralImpl("0",XMLSchema.DECIMAL);    }  } else   if (value.getDatatype().equals(XMLSchema.INTEGER)) {    if (!isNumericString(value.getLabel())) {      return new LiteralImpl("0",XMLSchema.INTEGER);    }  }  return value;}  }
class C{  public Socket onOpen(final ISocketOpenCallback callback){  cancelReconnectTimer();  this.socketOpenCallbacks.add(callback);  return this;}  }
class C{  protected Level(String name,int value){  this.name=name;  this.value=value;}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void increment(){  mCount++;}  }
class C{  public void init(final double x1,final double x2,final double y1,final double y2,final double z1,final double z2){  init(x1,x2,y1,y2);  if (z1 < z2) {    minz=z1;    maxz=z2;  } else {    minz=z2;    maxz=z1;  }}  }
class C{  public long toLong(){  return value.toLongZeroExtend();}  }
class C{  public PMediaAuthorizationHeader createPMediaAuthorizationHeader(String token) throws InvalidArgumentException, ParseException {  if (token == null || token == "")   throw new InvalidArgumentException("The Media-Authorization-Token parameter is null or empty");  PMediaAuthorization mediaAuthorization=new PMediaAuthorization();  mediaAuthorization.setMediaAuthorizationToken(token);  return mediaAuthorization;}  }
class C{  @VisibleForTesting public static boolean isDraggingStackInWrongDirection(float downX,float downY,float x,float y,float dx,float dy,int orientation,int stackIndex){  float switchDelta=orientation == Orientation.PORTRAIT ? x - downX : y - downY;  if (Math.abs(dx) < Math.abs(dy)) {    return false;  }  return (stackIndex == 0 && switchDelta < 0) || (stackIndex == 1 && switchDelta > 0);}  }
class C{  public void addCloseHook(Closeable closeable){  if (closeHooks == null) {    closeHooks=new IdentityHashMap<Closeable,String>();    SolrRequestInfo.getRequestInfo().addCloseHook(this);  }  closeHooks.put(closeable,"");}  }
class C{  public void connect(){  Log.i("Device " + this.name + ": Delegate the connection request to the manager.");  manager.connect(OneSheeldDevice.this);}  }
class C{  public static boolean isDescendingFrom(Component a,Component b){  if (a == b)   return true;  for (Container p=a.getParent(); p != null; p=p.getParent())   if (p == b)   return true;  return false;}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_STATUS_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}"+ "/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}"+ "/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/subPartition2Values/{subPartition2Value}"+ "/subPartition3Values/{subPartition3Value}/subPartition4Values/{subPartition4Value}/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.PUT) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_STATUS_PUT) public BusinessObjectDataStatusUpdateResponse updateBusinessObjectDataStatus(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("subPartition2Value") String subPartition2Value,@PathVariable("subPartition3Value") String subPartition3Value,@PathVariable("subPartition4Value") String subPartition4Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@RequestBody BusinessObjectDataStatusUpdateRequest request){  BusinessObjectDataStatusUpdateResponse businessObjectDataStatusUpdateResponse=businessObjectDataStatusService.updateBusinessObjectDataStatus(new BusinessObjectDataKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value,subPartition2Value,subPartition3Value,subPartition4Value),businessObjectDataVersion),request);  notificationEventService.processBusinessObjectDataNotificationEventAsync(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG,businessObjectDataStatusUpdateResponse.getBusinessObjectDataKey(),businessObjectDataStatusUpdateResponse.getStatus(),businessObjectDataStatusUpdateResponse.getPreviousStatus());  return businessObjectDataStatusUpdateResponse;}  }
class C{  public void testNewClassLoaderHotRedeploymentSharedMode() throws Exception {  processTestClassLoaderHotRedeployment(DeploymentMode.SHARED);}  }
class C{  public boolean removeIgnore(final String name){  return setKeyedSlot("!ignore","_" + name,null);}  }
class C{  public VNXeCommandJob createSnap(SnapCreateParam param) throws VNXeException {  return postRequestAsync(param);}  }
class C{  @Override public void write(byte[] b){  checkNotNull(b);}  }
class C{  public boolean hasPort(){  return port >= 0;}  }
class C{  public static Settings init(String tag){  printer=new LoggerPrinter();  return printer.init(tag);}  }
class C{  private TransitStopFacility createTypeDependentStopFacility(TransitRouteStop stop){  Id<TransitStopFacility> idNewFacility=Id.create(stop.getStopFacility().getId().toString() + "_" + this.mode,TransitStopFacility.class);  TransitStopFacility newFacility=this.scheduleFactory.createTransitStopFacility(idNewFacility,stop.getStopFacility().getCoord(),stop.getStopFacility().getIsBlockingLane());  newFacility.setName(stop.getStopFacility().getName());  this.schedule.addStopFacility(newFacility);  return newFacility;}  }
class C{  public static void putLongVolatile(Object obj,long off,long val){  UNSAFE.putLongVolatile(obj,off,val);}  }
class C{  void removeFromExternalCache(final long clr,final int slotSize){  assert m_allocationLock.isWriteLocked();  if (m_externalCache == null)   return;  if (slotSize == 0 || slotSize == m_cachedDatasize) {    final Object rem=m_externalCache.remove(clr);    if (rem != null && log.isTraceEnabled()) {      log.trace("ExternalCache, removed: " + rem.getClass().getName() + " with addr: "+ clr);    }  }}  }
class C{  String validateLightReference(String name){  Light l=null;  if (name != null) {    if (name.length() > 0) {      l=InstanceManager.lightManagerInstance().getByUserName(name);      if (l != null) {        return name;      }    }    l=InstanceManager.lightManagerInstance().getBySystemName(name);  }  if (l == null) {    messageInvalidActionItemName(name,"Light");    return null;  }  return name;}  }
class C{  public ServerState status(){  final ServerLauncher launcher=getInstance();  if (isStartingOrRunning()) {    debug("Getting status from the ServerLauncher instance that actually launched the GemFire Cache Server.%n");    return new ServerState(this,(isRunning() ? Status.ONLINE : Status.STARTING));  } else   if (isPidInProcess() && launcher != null) {    return launcher.statusInProcess();  } else   if (getPid() != null) {    debug("Getting Server status using process ID (%1$s)%n",getPid());    return statusWithPid();  } else   if (getWorkingDirectory() != null) {    debug("Getting Server status using working directory (%1$s)%n",getWorkingDirectory());    return statusWithWorkingDirectory();  }  debug("This ServerLauncher was not the instance used to launch the GemFire Cache Server, and neither PID ".concat("nor working directory were specified; the Server's state is unknown.%n"));  return new ServerState(this,Status.NOT_RESPONDING);}  }
class C{  public static int reflectionCompare(final Object lhs,final Object rhs,final boolean compareTransients){  return reflectionCompare(lhs,rhs,compareTransients,null);}  }
class C{  public final int numBytes(){  return numBytes;}  }
class C{  public Asec(){  super("asec",1);}  }
class C{  public void updateProgress(int bytes,boolean taskDone){  if (bytes == 0) {    return;  }  bytesRead+=bytes;  if (taskDone) {    tasks--;  }  updateProgress();}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public GraphPattern(){}  }
class C{  public static boolean isAgree(FeatureStructure aMergeFs,Map<String,List<FeatureStructure>> aAnnosPerUser){  for (  String usr : aAnnosPerUser.keySet()) {    boolean agree=false;    for (    FeatureStructure usrFs : aAnnosPerUser.get(usr)) {      if (isSameAnno(aMergeFs,usrFs)) {        if (!agree) {          agree=true;        } else         if (agree) {          return false;        }      }    }    if (!agree) {      return false;    }  }  return true;}  }
class C{  protected Drawing createDrawing(){  DefaultDrawing drawing=new DefaultDrawing();  drawing.addInputFormat(new SVGZInputFormat());  drawing.addInputFormat(new ImageInputFormat(new SVGImageFigure()));  drawing.addOutputFormat(new SVGOutputFormat());  drawing.addOutputFormat(new SVGZOutputFormat());  drawing.addOutputFormat(new ImageOutputFormat());  drawing.addOutputFormat(new ImageOutputFormat("JPG","Joint Photographics Experts Group (JPEG)","jpg",BufferedImage.TYPE_INT_RGB));  drawing.addOutputFormat(new ImageOutputFormat("BMP","Windows Bitmap (BMP)","bmp",BufferedImage.TYPE_BYTE_INDEXED));  return drawing;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.681 -0500",hash_original_method="0B0086D752673B320D1D01C156228A84",hash_generated_method="64AAB4F0D519A645CBCFD026AD22AEF2") @Override public boolean isRunning(){  for (  Node node : mNodes) {    if (node.animation.isRunning()) {      return true;    }  }  return false;}  }
class C{  public void recordVplexMirrorOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,String evDesc,Object... extParam){  try {    boolean opStatus=(Operation.Status.ready == status) ? true : false;    String evType=opType.getEvType(opStatus);    String opStage=AuditLogManager.AUDITOP_END;    _log.info("opType: {} detail: {}",opType.toString(),evType.toString() + ':' + evDesc);    VplexMirror mirror=(VplexMirror)extParam[0];    recordBourneVplexMirrorEvent(dbClient,mirror.getId(),evType,status,evDesc);    Volume volume=(Volume)extParam[1];switch (opType) {case CREATE_VOLUME_MIRROR:      if (opStatus) {        AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,mirror.getId().toString(),mirror.getLabel(),volume.getId().toString());      } else {        AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,mirror.getLabel(),volume.getId().toString());      }    break;case DEACTIVATE_VOLUME_MIRROR:case DELETE_VOLUME_MIRROR:case DETACH_VOLUME_MIRROR:  AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,mirror.getId().toString(),mirror.getLabel(),volume.getId().toString());break;default :_log.error("unrecognized volume mirror operation type");}} catch (Exception e) {_log.error("Failed to record volume mirror operation {}, err: ",opType.toString(),e);}}  }
class C{  public boolean callTarget(Object appleEvent) throws InvocationTargetException, IllegalAccessException {  if (targetAction != null) {    targetAction.actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,proxySignature));    return true;  } else {    Object result=targetMethod.invoke(targetObject,(Object[])null);    if (result == null) {      return true;    }    return Boolean.valueOf(result.toString()).booleanValue();  }}  }
class C{  public boolean supportsVariableLights(String systemName){  int i=matchTentative(systemName);  if (i >= 0) {    return ((LightManager)getMgr(i)).supportsVariableLights(systemName);  }  return false;}  }
class C{  public final boolean isFinished(){  return mFinished;}  }
class C{  public Iterator<URI> values(){  return Collections.unmodifiableList(Arrays.asList(uris)).iterator();}  }
class C{  public boolean isNominalFilterToggled(){  return nominalFilter;}  }
class C{  private boolean updateServiceProfileTemplates(ComputeVirtualPool cvp,ServiceProfileTemplateAssignmentChanges sptAssignmentChanges){  boolean sptsForCvpUpdated=false;  Set<String> sptsAddedToCvp=new HashSet<String>();  Set<String> sptsRemovedFromCvp=new HashSet<String>();  if (sptAssignmentChanges != null) {    _log.debug("Update request has service profile template assignment changes for compute virtual pool {}",cvp.getId());    verifySptAssignmentChanges(cvp,sptAssignmentChanges);    _log.debug("Requested service profile template assignment changes verified.");    ServiceProfileTemplateAssignments addAssignments=sptAssignmentChanges.getAdd();    if (addAssignments != null) {      Set<String> addSpts=addAssignments.getServiceProfileTemplates();      if ((addSpts != null) && (!addSpts.isEmpty())) {        _log.debug("Request specifies service profile templates to be added.");        checkServiceProfileTemplateURIs(addSpts,_dbClient);        Map<URI,UCSServiceProfileTemplate> computeSystemToTemplateMap=new HashMap<URI,UCSServiceProfileTemplate>();        if (cvp.getServiceProfileTemplates() != null && !cvp.getServiceProfileTemplates().isEmpty()) {          Collection<UCSServiceProfileTemplate> templates=_dbClient.queryObject(UCSServiceProfileTemplate.class,toUriList(cvp.getServiceProfileTemplates()));          for (          UCSServiceProfileTemplate template : templates) {            ArgValidator.checkEntity(template,template.getId(),isIdEmbeddedInURL(template.getId()));            computeSystemToTemplateMap.put(template.getComputeSystem(),template);          }        }        StringSet currentAssignments=cvp.getServiceProfileTemplates();        Collection<UCSServiceProfileTemplate> addedTemplates=_dbClient.queryObject(UCSServiceProfileTemplate.class,toUriList(addSpts));        for (        UCSServiceProfileTemplate addedTemplate : addedTemplates) {          if ((currentAssignments != null) && (currentAssignments.contains(addedTemplate.getId().toString()))) {            _log.info("Compute Virtual Pool already assigned to service profile template {}",addedTemplate.getId().toString());            continue;          }          ArgValidator.checkEntity(addedTemplate,addedTemplate.getId(),isIdEmbeddedInURL(addedTemplate.getId()));          UCSServiceProfileTemplate existingTemplate=computeSystemToTemplateMap.get(addedTemplate.getComputeSystem());          if (existingTemplate != null) {            _log.debug("Compute system " + addedTemplate.getComputeSystem() + " already contains a spt "+ existingTemplate);            if (isComputeVirtualPoolInUse(cvp)) {              _log.info("compute virtual pool is already in use and so SPT cannot be disassociated and replaced with requested SPT " + addedTemplate.getId().toString());              throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Cannot replace service profile template that is already in use.");            } else {              _log.info("compute virtual pool is not in use and so SPT will be disassociated and replaced with requested SPT " + addedTemplate.getId().toString());              sptsRemovedFromCvp.add(existingTemplate.getId().toString());            }          }          if (addedTemplate.getUpdating() == true) {            _log.info("selected spt is an updating template. So validate...");            if (!computeSystemService.isUpdatingSPTValid(addedTemplate,_dbClient)) {              throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Nic or hba names in updating service profile template " + addedTemplate.getLabel() + " do not match those in its boot policy.");            }          }          if (!computeSystemService.isServiceProfileTemplateValidForVarrays(cvp.getVirtualArrays(),addedTemplate.getId())) {            throw APIException.badRequests.sptIsNotValidForVarrays(addedTemplate.getLabel());          }          validateServiceProfileTemplate(cvp,addedTemplate);          sptsAddedToCvp.add(addedTemplate.getId().toString());          sptsForCvpUpdated=true;          _log.debug("Compute Virtual Pool will be assigned to service profile template {}",addedTemplate.getId().toASCIIString());        }      }    }    ServiceProfileTemplateAssignments removeAssignments=sptAssignmentChanges.getRemove();    if (removeAssignments != null) {      Collection<UCSServiceProfileTemplate> removedTemplates=_dbClient.queryObject(UCSServiceProfileTemplate.class,toUriList(removeAssignments.getServiceProfileTemplates()));      if ((removedTemplates != null) && (!removedTemplates.isEmpty())) {        _log.debug("Request specifies service profile templates to be removed.");        if (isComputeVirtualPoolInUse(cvp)) {          throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Cannot remove service profile template since virtual compute pool is already in use.");        }        StringSet currentAssignments=cvp.getServiceProfileTemplates();        for (        UCSServiceProfileTemplate removedTemplate : removedTemplates) {          if ((currentAssignments == null) || (!currentAssignments.contains(removedTemplate.getId().toString()))) {            _log.debug("Compute Virtual Pool is not assigned to service profile template {}",removedTemplate.getId().toString());            continue;          }          if (isServiceProfileTemplateInUse(cvp,removedTemplate)) {            throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Cannot remove service profile template already in use.");          }          sptsRemovedFromCvp.add(removedTemplate.getId().toString());          sptsForCvpUpdated=true;          _log.info("Compute Virtual Pool will be unassigned from service profile template {}",removedTemplate.getId().toString());        }      }    }    Set<String> sptsCurrentAfterRemove=cvp.getServiceProfileTemplates();    if (removeAssignments != null) {      Collection<UCSServiceProfileTemplate> removedTempls=_dbClient.queryObject(UCSServiceProfileTemplate.class,toUriList(removeAssignments.getServiceProfileTemplates()));      Set<String> removedIDs=new HashSet<String>();      for (      UCSServiceProfileTemplate rmvdTempl : removedTempls) {        removedIDs.add(rmvdTempl.getId().toString());      }      sptsCurrentAfterRemove.removeAll(removedIDs);    }    Set<URI> sptComputeSystems=new HashSet<URI>();    Collection<UCSServiceProfileTemplate> addedTemplates=_dbClient.queryObject(UCSServiceProfileTemplate.class,toUriList(sptsAddedToCvp));    for (    UCSServiceProfileTemplate template : addedTemplates) {      _log.debug("Adding SPT : " + template.getId().toString());      if (sptComputeSystems.contains(template.getComputeSystem())) {        throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Service profile template already in use and associated to compute system.");      } else {        sptComputeSystems.add(template.getComputeSystem());      }    }    Collection<UCSServiceProfileTemplate> existingTemplates=_dbClient.queryObject(UCSServiceProfileTemplate.class,toUriList(sptsCurrentAfterRemove));    for (    UCSServiceProfileTemplate template : existingTemplates) {      _log.debug("Adding SPT : " + template.getId().toString());      if (sptComputeSystems.contains(template.getComputeSystem())) {        throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Duplicate compute system association.  Only one service profile template can be associated to a compute system in a Compute Virtual Pool.");      } else {        sptComputeSystems.add(template.getComputeSystem());      }    }  }  if (sptsForCvpUpdated) {    if (!sptsAddedToCvp.isEmpty()) {      cvp.addServiceProfileTemplates(sptsAddedToCvp);    }    if (!sptsRemovedFromCvp.isEmpty()) {      cvp.removeServiceProfileTemplates(sptsRemovedFromCvp);    }  }  return sptsForCvpUpdated;}  }
class C{  public OMGrid(double lat,double lon,double vResolution,double hResolution,int[][] data){  setRenderType(RENDERTYPE_LATLON);  set(lat,lon,0,0,vResolution,hResolution,data);}  }
class C{  public SSLTestConfig(boolean useSSL,boolean clientAuth){  super(useSSL,clientAuth,null,TEST_KEYSTORE_PASSWORD,null,TEST_KEYSTORE_PASSWORD);  trustStore=keyStore=Resource.newClassPathResource(TEST_KEYSTORE_RESOURCE);  if (null == keyStore || !keyStore.exists()) {    throw new IllegalStateException("Unable to locate keystore resource file in classpath: " + TEST_KEYSTORE_RESOURCE);  }}  }
class C{  @Override public synchronized void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenees.put(eventName,source);  }}  }
class C{  public AccountHeaderBuilder withDividerBelowHeader(boolean dividerBelowHeader){  this.mDividerBelowHeader=dividerBelowHeader;  return this;}  }
class C{  public T caseParameterizedTypeRefStructural_IM(ParameterizedTypeRefStructural_IM object){  return null;}  }
class C{  public void connectDatabase(){  s_logger.log(Level.CONFIG,"connectDatabase",getDirection());  setDriver(s_dbEngine.getDBDriver(getVendor()));  setUrl(s_dbEngine.getDBUrl(getVendor(),getHost(),getPort(),getName()));  try {    Class.forName(getDriver());  } catch (  ClassNotFoundException e) {    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"connectDatabaseNoDriver",new Object[]{getDriver(),e.getMessage()});  }  try {    if (m_connection != null)     m_connection.close();    m_connection=DriverManager.getConnection(getUrl(),getUser(),getPasswd());    m_connection.setAutoCommit(false);    s_logger.log(Level.CONFIG,"connectDatabaseEstablished",getUrl());  } catch (  SQLException e) {    connectDatabaseSystem();    if (m_connection == null)     s_dbEngine.setDBError(true);  }  s_logger.flush();}  }
class C{  public WildFly10xRuntimeConfiguration(){  super();}  }
class C{  @Override public double valueToJava2D(double value,Rectangle2D plotArea,RectangleEdge edge){  Range range=getRange();  double axisMin=switchedLog10(range.getLowerBound());  double axisMax=switchedLog10(range.getUpperBound());  double min=0.0;  double max=0.0;  if (RectangleEdge.isTopOrBottom(edge)) {    min=plotArea.getMinX();    max=plotArea.getMaxX();  } else   if (RectangleEdge.isLeftOrRight(edge)) {    min=plotArea.getMaxY();    max=plotArea.getMinY();  }  value=switchedLog10(value);  if (isInverted()) {    return max - (((value - axisMin) / (axisMax - axisMin)) * (max - min));  } else {    return min + (((value - axisMin) / (axisMax - axisMin)) * (max - min));  }}  }
class C{  public static double rangeEnvelopeScore(double anchor,double target){  if (anchor < 0 || target < 0) {    throw new IllegalArgumentException(String.format("Arguments must be positive numbers, not %f, %f",anchor,target));  }  if (target < anchor) {    return 1;  }  return anchor / target;}  }
class C{  public void play() throws IOException {  writeCode(PLAY);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__DECLARED_THIS_TYPE:    return basicSetDeclaredThisType(null,msgs);case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__OWNED_TYPE_VARS:  return ((InternalEList<?>)getOwnedTypeVars()).basicRemove(otherEnd,msgs);case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__UNBOUND_TYPE_VARS_UPPER_BOUNDS:return ((InternalEList<?>)getUnboundTypeVarsUpperBounds()).basicRemove(otherEnd,msgs);case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__FPARS:return ((InternalEList<?>)getFpars()).basicRemove(otherEnd,msgs);case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__RETURN_TYPE_REF:return basicSetReturnTypeRef(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected void moveImportFilesToArchive(final Set<String> importedFiles){  if (!importedFiles.isEmpty()) {    final SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MMM-dd-hh-mm-ss");    final String fullPathToArchiveFolder=pathToArchiveDirectory;    File dir=new File(fullPathToArchiveFolder + File.separator + dateFormat.format(new Date())+ File.separator);    dir.mkdirs();    String tempRoot=null;    for (    String importFileName : importedFiles) {      try {        File importFile=new File(importFileName);        FileUtils.copyFileToDirectory(importFile,dir,true);        if (tempRoot == null) {          tempRoot=resolveImportDirectory(importFile.getAbsolutePath());        }        importFile.delete();      } catch (      IOException e) {        ShopCodeContext.getLog(this).error(MessageFormat.format("Cant move file {0} to folder {1}",importFileName,dir.getAbsolutePath()),e);      }    }    if (!pathToImportDirectory.equals(tempRoot)) {      new File(tempRoot).delete();    }  }}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    MovingAverageItem dataItem=(MovingAverageItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Value: "+ dataItem.getMovingAverage());  }}  }
class C{  static public void assertOnScreen(View origin,View view){  int[] xy=new int[2];  view.getLocationOnScreen(xy);  int[] xyRoot=new int[2];  origin.getLocationOnScreen(xyRoot);  int y=xy[1] - xyRoot[1];  assertTrue("view should have positive y coordinate on screen",y >= 0);  assertTrue("view should have y location on screen less than drawing " + "height of root view",y <= view.getRootView().getHeight());}  }
class C{  private void stopWaitingView(){  if (null != mWaitingView) {    mWaitingView.setVisibility(View.GONE);  }}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  protected static String arrayToList(String[] value){  String result;  int i;  result="";  for (i=0; i < value.length; i++) {    if (i > 0) {      result+=",";    }    result+=value[i];  }  return result;}  }
class C{  @Override public Iterator<Character> iterator(){  return new CharacterIterator(this);}  }
class C{  private Shape decodeEdge(int width,int height){  path.reset();  path.moveTo(width - 2,0);  path.lineTo(width - 2,height - 4);  path.lineTo(width - 4,height - 2);  path.lineTo(3,height - 2);  return path;}  }
class C{  public float rayTrace(Location location,GlowEntity entity){  return 1;}  }
class C{  @Override protected void onStart(){  super.onStart();  LOG.d(TAG,"Started the activity.");  if (this.appView == null) {    return;  }  this.appView.handleStart();}  }
class C{  public CacheException(String s,Throwable cause){  super(s,cause);}  }
class C{  private CMemorySelectionFunctions(){}  }
class C{  public void requestUpdateAd(){  adFetcher.clearMapAds();}  }
class C{  private void extractDataFromInvocation(InvocationSequenceData invocation){  if (null != invocation.getTimerData()) {    passToChainedProcessors(invocation.getTimerData());  }  if (null != invocation.getSqlStatementData()) {    passToChainedProcessors(invocation.getSqlStatementData());  }  if (null != invocation.getExceptionSensorDataObjects()) {    for (    ExceptionSensorData exceptionSensorData : invocation.getExceptionSensorDataObjects()) {      if (exceptionSensorData.getExceptionEvent() == ExceptionEvent.CREATED) {        passToChainedProcessors(exceptionSensorData);      }    }  }  for (  InvocationSequenceData child : invocation.getNestedSequences()) {    extractDataFromInvocation(child);  }}  }
class C{  @Override public boolean contains(Object object){  return indexOf(object,0) != -1;}  }
class C{  public BinaryProperty(byte[] data){  this.data=data;}  }
class C{  private void helperMultiProjects(IPackageFragmentRoot[] roots,String[][] packageNames,String newPackageName,String[][][] cuNames) throws Exception {  ICompilationUnit[][][] cus=new ICompilationUnit[roots.length][][];  IPackageFragment thisPackage=null;  for (int r=0; r < roots.length; r++) {    IPackageFragment[] packages=new IPackageFragment[packageNames[r].length];    cus[r]=new ICompilationUnit[packageNames[r].length][];    for (int pa=0; pa < packageNames[r].length; pa++) {      packages[pa]=roots[r].createPackageFragment(packageNames[r][pa],true,null);      cus[r][pa]=new ICompilationUnit[cuNames[r][pa].length];      if (r == 0 && pa == 0)       thisPackage=packages[pa];      for (int typ=0; typ < cuNames[r][pa].length; typ++) {        cus[r][pa][typ]=createCUfromTestFile(packages[pa],cuNames[r][pa][typ],roots[r].getElementName() + "/" + packageNames[r][pa].replace('.','/')+ "/");      }    }  }  RenameJavaElementDescriptor descriptor=createRefactoringDescriptor(thisPackage,newPackageName);  descriptor.setUpdateReferences(fUpdateReferences);  descriptor.setUpdateTextualOccurrences(fUpdateTextualMatches);  setFilePatterns(descriptor);  descriptor.setUpdateHierarchy(fRenameSubpackages);  RefactoringStatus result=performRefactoring(descriptor);  TestCase.assertEquals("preconditions were supposed to pass",null,result);  assertTrue("package not renamed",!roots[0].getPackageFragment(packageNames[0][0]).exists());  IPackageFragment newPackage=roots[0].getPackageFragment(newPackageName);  assertTrue("new package does not exist",newPackage.exists());  for (int r=0; r < cuNames.length; r++) {    for (int pa=0; pa < cuNames[r].length; pa++) {      String packageName=roots[r].getElementName() + "/" + ((r == 0 && pa == 0) ? newPackageName : packageNames[r][pa]).replace('.','/')+ "/";      for (int typ=0; typ < cuNames[r][pa].length; typ++) {        String s1=getFileContents(getOutputTestFileName(cuNames[r][pa][typ],packageName));        ICompilationUnit cu=(r == 0 && pa == 0) ? newPackage.getCompilationUnit(cuNames[r][pa][typ] + ".java") : cus[r][pa][typ];        String s2=cu.getSource();        assertEqualLines("invalid update in file " + cu.toString(),s1,s2);      }    }  }}  }
class C{  public Boolean isMessageBusTunnelEnabled(){  return messageBusTunnelEnabled;}  }
class C{  public FlowArrangement(HorizontalAlignment hAlign,VerticalAlignment vAlign,double hGap,double vGap){  this.horizontalAlignment=hAlign;  this.verticalAlignment=vAlign;  this.horizontalGap=hGap;  this.verticalGap=vGap;}  }
class C{  public UserBuilder age(int age){  this.age=age;  return this;}  }
class C{  @Override public boolean isLeapYear(long prolepticYear){  return IsoChronology.INSTANCE.isLeapYear(prolepticYear);}  }
class C{  public void skipSample(){  long nextOffset=infoQueue.moveToNextSample();  dropFragmentsTo(nextOffset);}  }
class C{  public static TextAnnotation deserializeTextAnnotationFromFile(String fileName) throws IOException {  File file=new File(fileName);  if (!file.exists())   throw new IOException("ERROR: " + NAME + ".deserializeTextAnnotationFromFile(): file '"+ fileName+ "' does not exist.");  return deserializeTextAnnotationFromBytes(FileUtils.readFileToByteArray(file));}  }
class C{  public DecodeReturn(String _data,int _pos){  data=_data;  pos=_pos;}  }
class C{  protected boolean isStale(){  return super.isStale();}  }
class C{  @LargeTest public void testThumbnailWithWidthAsZero() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";  final int atTime=1000;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  try {    final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);    final int outWidth=0;    final int outHeight=mediaVideoItem.getHeight() / 2;    mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Thumbnail List with Zero Width",flagForException);}  }
class C{  public CzechStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public ExportMaskPlacementDescriptor chooseBackendExportMask(StorageSystem vplex,StorageSystem array,URI varrayURI,Map<URI,Volume> volumeMap,String stepId) throws ControllerException {  _log.info(String.format("Searching for existing ExportMasks between Vplex %s (%s) and Array %s (%s) in Varray %s",vplex.getLabel(),vplex.getNativeGuid(),array.getLabel(),array.getNativeGuid(),varrayURI));  long startTime=System.currentTimeMillis();  Map<URI,Volume> volumesForArray=filterVolumeMap(volumeMap,array);  buildDataStructures(vplex,array,varrayURI);  VplexBackEndMaskingOrchestrator vplexBackendOrchestrator=getOrch(array);  BlockStorageDevice storageDevice=_blockDeviceController.getDevice(array.getSystemType());  String lockName=_vplexApiLockManager.getLockName(vplex.getId(),_cluster,array.getId());  boolean lockAcquired=false;  try {    if (_vplexApiLockManager != null) {      lockAcquired=_vplexApiLockManager.acquireLock(lockName,MAX_LOCK_WAIT_SECONDS);      if (!lockAcquired) {        _log.info("Timed out waiting on lock- PROCEEDING ANYWAY!");      }    }    ExportMaskPlacementDescriptor placementDescriptor=ExportMaskPlacementDescriptor.create(_tenantURI,_projectURI,vplex,array,varrayURI,volumesForArray,_idToInitiatorMap.values());    vplexBackendOrchestrator.suggestExportMasksForPlacement(array,storageDevice,_initiators,placementDescriptor);    checkForRenamedExportMasks(placementDescriptor.getMasks());    Set<URI> invalidMasks=filterExportMasksByVPlexRequirements(vplex,array,varrayURI,placementDescriptor);    putUnplacedVolumesIntoAlternativeMask(placementDescriptor);    if (!placementDescriptor.hasMasks()) {      _log.info("There weren't any ExportMasks in the placementDescriptor. Creating new ExportMasks for the volumes.");      Map<URI,Volume> volumesToPlace=placementDescriptor.getVolumesToPlace();      createVPlexBackendExportMasksForVolumes(vplex,array,varrayURI,placementDescriptor,invalidMasks,volumesToPlace,stepId);    } else     if (placementDescriptor.hasUnPlacedVolumes()) {      _log.info("There were some reusable ExportMasks found, but not all volumes got placed. Will create an ExportMask to " + "hold these unplaced volumes.");      Map<URI,Volume> unplacedVolumes=placementDescriptor.getUnplacedVolumes();      createVPlexBackendExportMasksForVolumes(vplex,array,varrayURI,placementDescriptor,invalidMasks,unplacedVolumes,stepId);    }    VPlexBackendPlacementStrategyFactory.create(_dbClient,placementDescriptor).execute();    long elapsed=System.currentTimeMillis() - startTime;    _log.info(String.format("PlacementDescriptor processing took %f seconds",(double)elapsed / (double)1000));    _log.info(String.format("PlacementDescriptor was created:%n%s",placementDescriptor.toString()));    return placementDescriptor;  }  finally {    if (lockAcquired) {      _vplexApiLockManager.releaseLock(lockName);    }  }}  }
class C{  private boolean initAccount(){  m_AD_Client_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"AD_Client_ID");  if (s_AcctSchema == null || s_AcctSchema.getC_AcctSchema_ID() != m_C_AcctSchema_ID)   s_AcctSchema=new MAcctSchema(Env.getCtx(),m_C_AcctSchema_ID,null);  log.config(s_AcctSchema.toString() + ", #" + s_AcctSchema.getAcctSchemaElements().length);  Env.setContext(Env.getCtx(),m_WindowNo,"C_AcctSchema_ID",m_C_AcctSchema_ID);  int AD_Window_ID=153;  GridWindowVO wVO=AEnv.getMWindowVO(m_WindowNo,AD_Window_ID,0);  if (wVO == null)   return false;  m_mWindow=new GridWindow(wVO);  m_mTab=m_mWindow.getTab(0);  if (!m_mTab.isLoadComplete())   m_mWindow.initTab(0);  m_mTab.getField("Alias").setDisplayLength(15);  m_mTab.getField("Combination").setDisplayLength(15);  m_mTab.getField("AD_Client_ID").setDisplayed(false);  m_mTab.getField("C_AcctSchema_ID").setDisplayed(false);  m_mTab.getField("IsActive").setDisplayed(false);  m_mTab.getField("IsFullyQualified").setDisplayed(false);  for (int i=0; i < m_mTab.getFieldCount(); i++) {    GridField field=m_mTab.getField(i);    if (!field.isDisplayed(true))     field.setDisplayed(false);  }  m_adTabPanel.init(null,m_WindowNo,m_mTab,null);  parameterLayout.makeNoStrip();  parameterLayout.setOddRowSclass("even");  parameterLayout.setParent(parameterPanel);  parameterLayout.setStyle("background-color: transparent;");  m_rows=new Rows();  m_rows.setParent(parameterLayout);  int TabNo=0;  if (s_AcctSchema.isHasAlias()) {    GridField alias=m_mTab.getField("Alias");    f_Alias=WebEditorFactory.getEditor(alias,false);    addLine(alias,f_Alias,false);  }  GridField combination=m_mTab.getField("Combination");  f_Combination=WebEditorFactory.getEditor(combination,false);  addLine(combination,f_Combination,false);  m_newRow=true;  MAcctSchemaElement[] elements=s_AcctSchema.getAcctSchemaElements();  for (int i=0; i < elements.length; i++) {    MAcctSchemaElement ase=elements[i];    String type=ase.getElementType();    boolean isMandatory=ase.isMandatory();    if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Organization)) {      GridField field=m_mTab.getField("AD_Org_ID");      f_AD_Org_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_AD_Org_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Account)) {      GridField field=m_mTab.getField("Account_ID");      f_Account_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_Account_ID,isMandatory);      f_Account_ID.addValueChangeListener(this);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_SubAccount)) {      GridField field=m_mTab.getField("C_SubAcct_ID");      f_SubAcct_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_SubAcct_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Product)) {      GridField field=m_mTab.getField("M_Product_ID");      f_M_Product_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_M_Product_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_BPartner)) {      GridField field=m_mTab.getField("C_BPartner_ID");      f_C_BPartner_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_C_BPartner_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Campaign)) {      GridField field=m_mTab.getField("C_Campaign_ID");      f_C_Campaign_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_C_Campaign_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_LocationFrom)) {      GridField field=m_mTab.getField("C_LocFrom_ID");      f_C_LocFrom_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_C_LocFrom_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_LocationTo)) {      GridField field=m_mTab.getField("C_LocTo_ID");      f_C_LocTo_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_C_LocTo_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Project)) {      GridField field=m_mTab.getField("C_Project_ID");      f_C_Project_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_C_Project_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_SalesRegion)) {      GridField field=m_mTab.getField("C_SalesRegion_ID");      f_C_SalesRegion_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_C_SalesRegion_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_OrgTrx)) {      GridField field=m_mTab.getField("AD_OrgTrx_ID");      f_AD_OrgTrx_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_AD_OrgTrx_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Activity)) {      GridField field=m_mTab.getField("C_Activity_ID");      f_C_Activity_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_C_Activity_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_UserList1)) {      GridField field=m_mTab.getField("User1_ID");      f_User1_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_User1_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_UserList2)) {      GridField field=m_mTab.getField("User2_ID");      f_User2_ID=WebEditorFactory.getEditor(field,false);      addLine(field,f_User2_ID,isMandatory);    }  }  m_newRow=true;  Row row=new Row();  f_Description.setStyle("font-decoration: italic;");  row.appendChild(f_Description);  row.setSpans("4");  row.setStyle("background-color: transparent;");  m_rows.appendChild(row);  m_query=new MQuery();  m_query.addRestriction("C_AcctSchema_ID",MQuery.EQUAL,m_C_AcctSchema_ID);  m_query.addRestriction("IsFullyQualified",MQuery.EQUAL,"Y");  if (m_mAccount.C_ValidCombination_ID == 0)   m_mTab.setQuery(MQuery.getEqualQuery("1","2")); else {    MQuery query=new MQuery();    query.addRestriction("C_AcctSchema_ID",MQuery.EQUAL,m_C_AcctSchema_ID);    query.addRestriction("C_ValidCombination_ID",MQuery.EQUAL,m_mAccount.C_ValidCombination_ID);    m_mTab.setQuery(query);  }  m_mTab.query(false);  m_adTabPanel.getGridTab().addDataStatusListener(this);  m_adTabPanel.activate(true);  if (!m_adTabPanel.isGridView())   m_adTabPanel.switchRowPresentation();  statusBar.setStatusLine(s_AcctSchema.toString());  statusBar.setStatusDB("?");  if (m_mAccount.C_ValidCombination_ID != 0)   m_mTab.navigate(0);  log.config("fini");  return true;}  }
class C{  private void clearDirty(){  dirty=false;}  }
class C{  public Long sort(final String key,final String dstkey){  checkIsInMulti();  client.sort(key,dstkey);  return client.getIntegerReply();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean hasBatchId(){  return fieldSetFlags()[23];}  }
class C{  public int height(){  return height(root);}  }
class C{  @Override public void agg(Object newVal){  valueSetForObj.add(newVal);}  }
class C{  public static Map<String,DescriptiveStatistics> analyze(Graph graph,AnalyzerTask task){  Map<String,DescriptiveStatistics> statsMap=new LinkedHashMap<String,DescriptiveStatistics>();  task.analyze(graph,statsMap);  return statsMap;}  }
class C{  private boolean doSearch(HttpServletRequest request,InstructionalOfferingListForm frm) throws Exception {  frm.setSubjectAreas(SubjectArea.getUserSubjectAreas(sessionContext.getUser()));  frm.setInstructionalOfferings(InstructionalOfferingSearchAction.getInstructionalOfferings(sessionContext.getUser().getCurrentAcademicSessionId(),classAssignmentService.getAssignment(),frm));  return !frm.getInstructionalOfferings().isEmpty();}  }
class C{  private void paintButton(Graphics2D g,JComponent c,int width,int height){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  Shape s=createButtonPath(CornerSize.BORDER,0,2,width - 2,height - 4);  g.setPaint(getComboBoxButtonBorderPaint(s,type));  g.fill(s);  s=createButtonPath(CornerSize.INTERIOR,1,3,width - 4,height - 6);  g.setPaint(getComboBoxButtonInteriorPaint(s,type));  g.fill(s);}  }
class C{  @Override public void classInitialized(String classNameWithDots){  if (!initializedClasses.contains(classNameWithDots)) {    initializedClasses.add(classNameWithDots);  }}  }
class C{  public void testUnivariateTEforRandomDataFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={4};  double[] expectedFromTRENTOOL={-0.0096556};  System.out.println("Kraskov TE comparison 2 - univariate random data 1 (col 0->1)");  checkTEForGivenData(MatrixUtils.selectColumn(data,0),MatrixUtils.selectColumn(data,1),kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.0175389};  System.out.println("  (col 1->2):");  checkTEForGivenData(MatrixUtils.selectColumn(data,1),MatrixUtils.selectColumn(data,2),kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.0026367};  System.out.println("  (col 1->0):");  checkTEForGivenData(MatrixUtils.selectColumn(data,1),MatrixUtils.selectColumn(data,0),kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{-0.00012474};  System.out.println("  (col 0->2):");  checkTEForGivenData(MatrixUtils.selectColumn(data,0),MatrixUtils.selectColumn(data,2),kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{-5.4437e-03};  System.out.println("  (col 2->0):");  checkTEForGivenData(MatrixUtils.selectColumn(data,2),MatrixUtils.selectColumn(data,0),kNNs,expectedFromTRENTOOL);}  }
class C{  private void handleServiceUnavailable(State state,HttpResponse response) throws StopRequest {  if (Constants.LOGVV) {    Log.v(Constants.TAG,"got HTTP response code 503");  }  state.mCountRetry=true;  Header header=response.getFirstHeader("Retry-After");  if (header != null) {    try {      if (Constants.LOGVV) {        Log.v(Constants.TAG,"Retry-After :" + header.getValue());      }      state.mRetryAfter=Integer.parseInt(header.getValue());      if (state.mRetryAfter < 0) {        state.mRetryAfter=0;      } else {        if (state.mRetryAfter < Constants.MIN_RETRY_AFTER) {          state.mRetryAfter=Constants.MIN_RETRY_AFTER;        } else         if (state.mRetryAfter > Constants.MAX_RETRY_AFTER) {          state.mRetryAfter=Constants.MAX_RETRY_AFTER;        }        state.mRetryAfter+=Helpers.sRandom.nextInt(Constants.MIN_RETRY_AFTER + 1);        state.mRetryAfter*=1000;      }    } catch (    NumberFormatException ex) {    }  }  throw new StopRequest(DownloaderService.STATUS_WAITING_TO_RETRY,"got 503 Service Unavailable, will retry later");}  }
class C{  public Wine runBackground(String executableToRun,List<String> arguments) throws ScriptFailureException {  runBackground(new File(executableToRun),arguments,null);  return this;}  }
class C{  public void saveSettings(JDialog dialog){  if (!dialog.getName().contains("dialog")) {    storeWindowBounds(dialog.getName(),dialog.getX(),dialog.getY(),dialog.getWidth(),dialog.getHeight());    writeProperties();  }}  }
class C{  public static QueryStorageCapabilitiesResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryStorageCapabilitiesResponse object=new QueryStorageCapabilitiesResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryStorageCapabilitiesResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryStorageCapabilitiesResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(StorageCapability.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(StorageCapability.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((StorageCapability[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(StorageCapability.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public RecyclerViewListObserverListener(RecyclerView.Adapter<?> adapter){  this.adapter=adapter;}  }
class C{  public RemoteCall newCall(RemoteObject obj,Operation[] ops,int opnum,long hash) throws RemoteException {  clientRefLog.log(Log.BRIEF,"get connection");  Connection conn=ref.getChannel().newConnection();  try {    clientRefLog.log(Log.VERBOSE,"create call context");    if (clientCallLog.isLoggable(Log.VERBOSE)) {      logClientCall(obj,ops[opnum]);    }    RemoteCall call=new StreamRemoteCall(conn,ref.getObjID(),opnum,hash);    try {      marshalCustomCallData(call.getOutputStream());    } catch (    IOException e) {      throw new MarshalException("error marshaling " + "custom call data");    }    return call;  } catch (  RemoteException e) {    ref.getChannel().free(conn,false);    throw e;  }}  }
class C{  @SuppressWarnings("unchecked") protected static void unzipFile(File file,String path){  ZipFile zipFile=null;  OutputStream output=null;  InputStream input=null;  try {    zipFile=new ZipFile(file);    Enumeration zipEntries=zipFile.entries();    while (zipEntries.hasMoreElements()) {      ZipEntry zipEntry=(ZipEntry)zipEntries.nextElement();      try {        input=new BufferedInputStream(zipFile.getInputStream(zipEntry));        File zipEntryFile=new File(path + System.getProperty("file.separator") + zipEntry.getName());        output=new FileOutputStream(zipEntryFile);        FileUtils.copy(input,output);      } catch (      IOException e) {        logger.error("Error al descomprimir el zip del justificante",e);      } finally {        if (output != null) {          try {            output.close();          } catch (          IOException e) {          }        }        if (input != null) {          try {            input.close();          } catch (          IOException e) {          }        }      }    }  } catch (  IOException e) {    logger.error("Error al descomprimir el zip del justificante",e);  } finally {    if (zipFile != null) {      try {        zipFile.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public StatusInterval(final int start,final int end){  if (end <= start) {    throw new IllegalArgumentException();  }  mStart=start;  mInterval=new byte[end - start];}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public GraphicAttributes(){  super();}  }
class C{  public static double round(double a,double precision){  if (precision == 0.0) {    return 0.0;  }  return Math.round(a / precision) * precision;}  }
class C{  public ItemBuilder meta(final ItemMeta meta){  this.itemStack.setItemMeta(meta.clone());  return this;}  }
class C{  public static void assertNotEqual(byte expected,byte actual,String errorMessage){  if (verbose) {    log("assertNotEqual(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  assertBool(expected != actual,errorMessage);}  }
class C{  public static SpannableString toSpannable(String text,Context context){  return toSpannable(new SpannableString(text),context);}  }
class C{  public double optDouble(String key){  return this.optDouble(key,Double.NaN);}  }
class C{  protected DisplayColor_Impl(){  super();}  }
class C{  public String toString(){  StringWriter sw=new StringWriter();  writeTo(sw);  return sw.toString();}  }
class C{  public static Relation<String> guessObjectLabelRepresentation(Database database) throws NoSupportedDataTypeException {  try {    Relation<? extends LabelList> labelsrep=database.getRelation(TypeUtil.LABELLIST);    if (labelsrep != null) {      return new ConvertToStringView(labelsrep);    }  } catch (  NoSupportedDataTypeException e) {  }  try {    Relation<String> stringrep=database.getRelation(TypeUtil.STRING);    if (stringrep != null) {      return stringrep;    }  } catch (  NoSupportedDataTypeException e) {  }  try {    Relation<? extends ClassLabel> classrep=database.getRelation(TypeUtil.CLASSLABEL);    if (classrep != null) {      return new ConvertToStringView(classrep);    }  } catch (  NoSupportedDataTypeException e) {  }  throw new NoSupportedDataTypeException("No label-like representation was found.");}  }
class C{  public static float calculateTop(float left,float right,float bottom,float targetAspectRatio){  final float width=right - left;  final float top=bottom - (width / targetAspectRatio);  return top;}  }
class C{  @Override public BaseType extendGenericType(){  BaseType[] oldParams=getParameters();  BaseType[] newParams=new BaseType[oldParams.length];  boolean isExtend=false;  for (int i=0; i < newParams.length; i++) {    BaseType param=oldParams[i];    if (param instanceof ClassType || param instanceof ParamType) {      BaseType[] upperBounds=new BaseType[]{param};      BaseType[] lowerBounds=new BaseType[]{};      BaseType extParam=new WildcardTypeImpl(lowerBounds,upperBounds);      newParams[i]=extParam;      isExtend=true;    } else {      newParams[i]=param;    }  }  if (isExtend) {    ParamType extendsType=new ParamType(_type,newParams,_paramMap);    return extendsType;  } else {    return this;  }}  }
class C{  public static <T,K>Consumer<Partition<T,K,List<T>>> evictAllAndScheduleEvictWithProcess(long time,TimeUnit unit){  long timeMs=TimeUnit.MILLISECONDS.convert(time,unit);  return null;}  }
class C{  public MutableAffineTransformer(){}  }
class C{  public int locateIndex(int index){  int min=0;  int max=this.indexValues.length - 1;  if (max == -1) {    return -1;  }  while ((this.indexValues[min] <= index) && (this.indexValues[max] >= index)) {    int current=(max + min) / 2;    if (this.indexValues[current] > index) {      max=current - 1;    } else     if (this.indexValues[current] < index) {      min=current + 1;    } else {      return current;    }  }  if (this.indexValues[max] < index) {    return max;  } else {    return min - 1;  }}  }
class C{  public static String interpolate(String input,final Map<String,String> namedArgs,final Map<String,String> defaultArgs){  if (namedArgs == null || input == null) {    return input;  }  final Map<String,String> interpolationArgs=createFinalInterpolationMap(namedArgs,defaultArgs);  return StrSubstitutor.replace(input,interpolationArgs,PREFIX,SUFFIX);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeArgument.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_ARGUMENT___GET_TYPE_REF_AS_STRING:      return TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_TYPE_REF_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___IS_GENERIC:  return TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___IS_GENERIC;case TypeRefsPackage.TYPE_REF___IS_RAW:return TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___IS_RAW;case TypeRefsPackage.TYPE_REF___GET_TYPE_REF_AS_STRING:return TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_TYPE_REF_AS_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public ProjectTodoStatusExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public boolean isCapabilitiesValid(Capabilities capabilities){  long msgCapValidityPeriod=mRcsSettings.getMsgCapValidityPeriod();  return System.currentTimeMillis() <= capabilities.getTimestampOfLastResponse() + msgCapValidityPeriod;}  }
class C{  public void add(double number){  if (num == 0) {    min=number;    max=number;  } else {    assert num > 0;    if (number < min)     min=number;    if (number > max)     max=number;  }  sum+=number;  sumOfSquares+=number * number;  ++num;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  CategoryTableXYDataset clone=(CategoryTableXYDataset)super.clone();  clone.values=(DefaultKeyedValues2D)this.values.clone();  clone.intervalDelegate=new IntervalXYDelegate(clone);  clone.intervalDelegate.setFixedIntervalWidth(getIntervalWidth());  clone.intervalDelegate.setAutoWidth(isAutoWidth());  clone.intervalDelegate.setIntervalPositionFactor(getIntervalPositionFactor());  return clone;}  }
class C{  public static boolean isAfterHours(ZonedDateTime date){  if (getTradingDayEnd(date).isBefore(date) || (getTradingDayEnd(date).compareTo(date) == 0)) {    return true;  }  return false;}  }
class C{  public final boolean canSetFloat(String field){  Column col=getColumn(field);  return (col == null ? false : col.canSetFloat());}  }
class C{  protected File createManifestFile(String baseDir,Object manifest) throws IOException {  Path resultFilePath=Paths.get(baseDir,String.format("manifest-%d.json",getNextUniqueIndex()));  File resultFile=new File(resultFilePath.toString());  ObjectMapper mapper=new ObjectMapper();  mapper.writeValue(resultFile,manifest);  return resultFile;}  }
class C{  public final Vector2[] toArray(){  Vector2[] points=new Vector2[this.size];  LinkedVertex vertex=this.root;  for (int i=0; i < this.size; i++) {    points[i]=vertex.point;    vertex=vertex.next;  }  return points;}  }
class C{  public Path createIncludePath(){  if (includePath == null) {    includePath=new Path(getProject());  }  return includePath.createPath();}  }
class C{  public synchronized boolean removeSinglePointChannel(WorkerCategory category,WrappedResponse response){  return singlePointChannels.remove(category,response);}  }
class C{  public void clearCookies(final String url){  if (url == null) {    this.cookies.clear();  }  final String host=Browser.getHost(url);  final Iterator<String> it=this.getCookies().keySet().iterator();  String check=null;  while (it.hasNext()) {    check=it.next();    if (check.contains(host)) {      this.cookies.get(check).clear();      break;    }  }}  }
class C{  private BitSet(long[] words){  this.words=words;  this.wordsInUse=words.length;  checkInvariants();}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case UmplePackage.MODEL:{      Model model=(Model)theEObject;      T result=caseModel(model);      if (result == null)       result=defaultCase(theEObject);      return result;    }case UmplePackage.PROGRAM_:{    Program_ program_=(Program_)theEObject;    T result=caseProgram_(program_);    if (result == null)     result=defaultCase(theEObject);    return result;  }case UmplePackage.ANONYMOUS_PROGRAM_1:{  Anonymous_program_1_ anonymous_program_1_=(Anonymous_program_1_)theEObject;  T result=caseAnonymous_program_1_(anonymous_program_1_);  if (result == null)   result=defaultCase(theEObject);  return result;}case UmplePackage.DIRECTIVE_:{Directive_ directive_=(Directive_)theEObject;T result=caseDirective_(directive_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.GLOSSARY_:{Glossary_ glossary_=(Glossary_)theEObject;T result=caseGlossary_(glossary_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.WORD_:{Word_ word_=(Word_)theEObject;T result=caseWord_(word_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.STRICTNESS_:{Strictness_ strictness_=(Strictness_)theEObject;T result=caseStrictness_(strictness_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_STRICTNESS_1:{Anonymous_strictness_1_ anonymous_strictness_1_=(Anonymous_strictness_1_)theEObject;T result=caseAnonymous_strictness_1_(anonymous_strictness_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.GENERATE_:{Generate_ generate_=(Generate_)theEObject;T result=caseGenerate_(generate_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.GENERATE_PATH_:{Generate_path_ generate_path_=(Generate_path_)theEObject;T result=caseGenerate_path_(generate_path_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.USE_STATEMENT_:{UseStatement_ useStatement_=(UseStatement_)theEObject;T result=caseUseStatement_(useStatement_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.NAMESPACE_:{Namespace_ namespace_=(Namespace_)theEObject;T result=caseNamespace_(namespace_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ENTITY_:{Entity_ entity_=(Entity_)theEObject;T result=caseEntity_(entity_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.COMMENT_:{Comment_ comment_=(Comment_)theEObject;T result=caseComment_(comment_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.INLINE_COMMENT_:{InlineComment_ inlineComment_=(InlineComment_)theEObject;T result=caseInlineComment_(inlineComment_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.MULTILINE_COMMENT_:{MultilineComment_ multilineComment_=(MultilineComment_)theEObject;T result=caseMultilineComment_(multilineComment_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.DEBUG_:{Debug_ debug_=(Debug_)theEObject;T result=caseDebug_(debug_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ABSTRACT_:{Abstract_ abstract_=(Abstract_)theEObject;T result=caseAbstract_(abstract_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.CLASS_DEFINITION_:{ClassDefinition_ classDefinition_=(ClassDefinition_)theEObject;T result=caseClassDefinition_(classDefinition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.EXTERNAL_DEFINITION_:{ExternalDefinition_ externalDefinition_=(ExternalDefinition_)theEObject;T result=caseExternalDefinition_(externalDefinition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.INTERFACE_DEFINITION_:{InterfaceDefinition_ interfaceDefinition_=(InterfaceDefinition_)theEObject;T result=caseInterfaceDefinition_(interfaceDefinition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ASSOCIATION_DEFINITION_:{AssociationDefinition_ associationDefinition_=(AssociationDefinition_)theEObject;T result=caseAssociationDefinition_(associationDefinition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ASSOCIATION_CLASS_DEFINITION_:{AssociationClassDefinition_ associationClassDefinition_=(AssociationClassDefinition_)theEObject;T result=caseAssociationClassDefinition_(associationClassDefinition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.CLASS_CONTENT_:{ClassContent_ classContent_=(ClassContent_)theEObject;T result=caseClassContent_(classContent_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ASSOCIATION_CLASS_CONTENT_:{AssociationClassContent_ associationClassContent_=(AssociationClassContent_)theEObject;T result=caseAssociationClassContent_(associationClassContent_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.INTERFACE_BODY_:{InterfaceBody_ interfaceBody_=(InterfaceBody_)theEObject;T result=caseInterfaceBody_(interfaceBody_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.INTERFACE_MEMBER_DECLARATION_:{InterfaceMemberDeclaration_ interfaceMemberDeclaration_=(InterfaceMemberDeclaration_)theEObject;T result=caseInterfaceMemberDeclaration_(interfaceMemberDeclaration_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.CONSTANT_DECLARATION_:{ConstantDeclaration_ constantDeclaration_=(ConstantDeclaration_)theEObject;T result=caseConstantDeclaration_(constantDeclaration_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1:{Anonymous_constantDeclaration_1_ anonymous_constantDeclaration_1_=(Anonymous_constantDeclaration_1_)theEObject;T result=caseAnonymous_constantDeclaration_1_(anonymous_constantDeclaration_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_2:{Anonymous_constantDeclaration_2_ anonymous_constantDeclaration_2_=(Anonymous_constantDeclaration_2_)theEObject;T result=caseAnonymous_constantDeclaration_2_(anonymous_constantDeclaration_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.MORE_CODE_:{MoreCode_ moreCode_=(MoreCode_)theEObject;T result=caseMoreCode_(moreCode_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_MORE_CODE_1:{Anonymous_moreCode_1_ anonymous_moreCode_1_=(Anonymous_moreCode_1_)theEObject;T result=caseAnonymous_moreCode_1_(anonymous_moreCode_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.CODE_LANGS_:{CodeLangs_ codeLangs_=(CodeLangs_)theEObject;T result=caseCodeLangs_(codeLangs_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_CODE_LANGS_1:{Anonymous_codeLangs_1_ anonymous_codeLangs_1_=(Anonymous_codeLangs_1_)theEObject;T result=caseAnonymous_codeLangs_1_(anonymous_codeLangs_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.CODE_LANG_:{CodeLang_ codeLang_=(CodeLang_)theEObject;T result=caseCodeLang_(codeLang_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.METHOD_BODY_:{MethodBody_ methodBody_=(MethodBody_)theEObject;T result=caseMethodBody_(methodBody_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_METHOD_BODY_1:{Anonymous_methodBody_1_ anonymous_methodBody_1_=(Anonymous_methodBody_1_)theEObject;T result=caseAnonymous_methodBody_1_(anonymous_methodBody_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_METHOD_BODY_2:{Anonymous_methodBody_2_ anonymous_methodBody_2_=(Anonymous_methodBody_2_)theEObject;T result=caseAnonymous_methodBody_2_(anonymous_methodBody_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.CONCRETE_METHOD_DECLARATION_:{ConcreteMethodDeclaration_ concreteMethodDeclaration_=(ConcreteMethodDeclaration_)theEObject;T result=caseConcreteMethodDeclaration_(concreteMethodDeclaration_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_1:{Anonymous_concreteMethodDeclaration_1_ anonymous_concreteMethodDeclaration_1_=(Anonymous_concreteMethodDeclaration_1_)theEObject;T result=caseAnonymous_concreteMethodDeclaration_1_(anonymous_concreteMethodDeclaration_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_2:{Anonymous_concreteMethodDeclaration_2_ anonymous_concreteMethodDeclaration_2_=(Anonymous_concreteMethodDeclaration_2_)theEObject;T result=caseAnonymous_concreteMethodDeclaration_2_(anonymous_concreteMethodDeclaration_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ABSTRACT_METHOD_DECLARATION_:{AbstractMethodDeclaration_ abstractMethodDeclaration_=(AbstractMethodDeclaration_)theEObject;T result=caseAbstractMethodDeclaration_(abstractMethodDeclaration_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.METHOD_DECLARATOR_:{MethodDeclarator_ methodDeclarator_=(MethodDeclarator_)theEObject;T result=caseMethodDeclarator_(methodDeclarator_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.PARAMETER_LIST_:{ParameterList_ parameterList_=(ParameterList_)theEObject;T result=caseParameterList_(parameterList_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_PARAMETER_LIST_1:{Anonymous_parameterList_1_ anonymous_parameterList_1_=(Anonymous_parameterList_1_)theEObject;T result=caseAnonymous_parameterList_1_(anonymous_parameterList_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.PARAMETER_:{Parameter_ parameter_=(Parameter_)theEObject;T result=caseParameter_(parameter_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_PARAMETER_1:{Anonymous_parameter_1_ anonymous_parameter_1_=(Anonymous_parameter_1_)theEObject;T result=caseAnonymous_parameter_1_(anonymous_parameter_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ASSOCIATION_:{Association_ association_=(Association_)theEObject;T result=caseAssociation_(association_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.SYMMETRIC_REFLEXIVE_ASSOCIATION_:{SymmetricReflexiveAssociation_ symmetricReflexiveAssociation_=(SymmetricReflexiveAssociation_)theEObject;T result=caseSymmetricReflexiveAssociation_(symmetricReflexiveAssociation_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.INLINE_ASSOCIATION_:{InlineAssociation_ inlineAssociation_=(InlineAssociation_)theEObject;T result=caseInlineAssociation_(inlineAssociation_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.INLINE_ASSOCIATION_END_:{InlineAssociationEnd_ inlineAssociationEnd_=(InlineAssociationEnd_)theEObject;T result=caseInlineAssociationEnd_(inlineAssociationEnd_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.SINGLE_ASSOCIATION_END_:{SingleAssociationEnd_ singleAssociationEnd_=(SingleAssociationEnd_)theEObject;T result=caseSingleAssociationEnd_(singleAssociationEnd_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ASSOCIATION_END_:{AssociationEnd_ associationEnd_=(AssociationEnd_)theEObject;T result=caseAssociationEnd_(associationEnd_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.MULTIPLICITY_:{Multiplicity_ multiplicity_=(Multiplicity_)theEObject;T result=caseMultiplicity_(multiplicity_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.IS_SORTED_:{IsSorted_ isSorted_=(IsSorted_)theEObject;T result=caseIsSorted_(isSorted_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ATTRIBUTE_:{Attribute_ attribute_=(Attribute_)theEObject;T result=caseAttribute_(attribute_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.SIMPLE_ATTRIBUTE_:{SimpleAttribute_ simpleAttribute_=(SimpleAttribute_)theEObject;T result=caseSimpleAttribute_(simpleAttribute_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.AUTOUNIQUE_ATTRIBUTE_:{AutouniqueAttribute_ autouniqueAttribute_=(AutouniqueAttribute_)theEObject;T result=caseAutouniqueAttribute_(autouniqueAttribute_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.DERIVED_ATTRIBUTE_:{DerivedAttribute_ derivedAttribute_=(DerivedAttribute_)theEObject;T result=caseDerivedAttribute_(derivedAttribute_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_1:{Anonymous_derivedAttribute_1_ anonymous_derivedAttribute_1_=(Anonymous_derivedAttribute_1_)theEObject;T result=caseAnonymous_derivedAttribute_1_(anonymous_derivedAttribute_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_2:{Anonymous_derivedAttribute_2_ anonymous_derivedAttribute_2_=(Anonymous_derivedAttribute_2_)theEObject;T result=caseAnonymous_derivedAttribute_2_(anonymous_derivedAttribute_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_3:{Anonymous_derivedAttribute_3_ anonymous_derivedAttribute_3_=(Anonymous_derivedAttribute_3_)theEObject;T result=caseAnonymous_derivedAttribute_3_(anonymous_derivedAttribute_3_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.COMPLEX_ATTRIBUTE_:{ComplexAttribute_ complexAttribute_=(ComplexAttribute_)theEObject;T result=caseComplexAttribute_(complexAttribute_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1:{Anonymous_complexAttribute_1_ anonymous_complexAttribute_1_=(Anonymous_complexAttribute_1_)theEObject;T result=caseAnonymous_complexAttribute_1_(anonymous_complexAttribute_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_2:{Anonymous_complexAttribute_2_ anonymous_complexAttribute_2_=(Anonymous_complexAttribute_2_)theEObject;T result=caseAnonymous_complexAttribute_2_(anonymous_complexAttribute_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.KEY_:{Key_ key_=(Key_)theEObject;T result=caseKey_(key_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_KEY_1:{Anonymous_key_1_ anonymous_key_1_=(Anonymous_key_1_)theEObject;T result=caseAnonymous_key_1_(anonymous_key_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.DEPEND_:{Depend_ depend_=(Depend_)theEObject;T result=caseDepend_(depend_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.EXTRA_CODE_:{ExtraCode_ extraCode_=(ExtraCode_)theEObject;T result=caseExtraCode_(extraCode_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.SOFTWARE_PATTERN_:{SoftwarePattern_ softwarePattern_=(SoftwarePattern_)theEObject;T result=caseSoftwarePattern_(softwarePattern_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.IS_A:{IsA_ isA_=(IsA_)theEObject;T result=caseIsA_(isA_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.SINGLE_IS_A:{SingleIsA_ singleIsA_=(SingleIsA_)theEObject;T result=caseSingleIsA_(singleIsA_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_SINGLE_IS_A1:{Anonymous_singleIsA_1_ anonymous_singleIsA_1_=(Anonymous_singleIsA_1_)theEObject;T result=caseAnonymous_singleIsA_1_(anonymous_singleIsA_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.MULTIPLE_IS_A:{MultipleIsA_ multipleIsA_=(MultipleIsA_)theEObject;T result=caseMultipleIsA_(multipleIsA_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_MULTIPLE_IS_A1:{Anonymous_multipleIsA_1_ anonymous_multipleIsA_1_=(Anonymous_multipleIsA_1_)theEObject;T result=caseAnonymous_multipleIsA_1_(anonymous_multipleIsA_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.SINGLETON_:{Singleton_ singleton_=(Singleton_)theEObject;T result=caseSingleton_(singleton_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.IMMUTABLE_:{Immutable_ immutable_=(Immutable_)theEObject;T result=caseImmutable_(immutable_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.KEY_DEFINITION_:{KeyDefinition_ keyDefinition_=(KeyDefinition_)theEObject;T result=caseKeyDefinition_(keyDefinition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.CODE_INJECTION_:{CodeInjection_ codeInjection_=(CodeInjection_)theEObject;T result=caseCodeInjection_(codeInjection_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.BEFORE_CODE_:{BeforeCode_ beforeCode_=(BeforeCode_)theEObject;T result=caseBeforeCode_(beforeCode_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_BEFORE_CODE_1:{Anonymous_beforeCode_1_ anonymous_beforeCode_1_=(Anonymous_beforeCode_1_)theEObject;T result=caseAnonymous_beforeCode_1_(anonymous_beforeCode_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_BEFORE_CODE_2:{Anonymous_beforeCode_2_ anonymous_beforeCode_2_=(Anonymous_beforeCode_2_)theEObject;T result=caseAnonymous_beforeCode_2_(anonymous_beforeCode_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.AFTER_CODE_:{AfterCode_ afterCode_=(AfterCode_)theEObject;T result=caseAfterCode_(afterCode_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_AFTER_CODE_1:{Anonymous_afterCode_1_ anonymous_afterCode_1_=(Anonymous_afterCode_1_)theEObject;T result=caseAnonymous_afterCode_1_(anonymous_afterCode_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_AFTER_CODE_2:{Anonymous_afterCode_2_ anonymous_afterCode_2_=(Anonymous_afterCode_2_)theEObject;T result=caseAnonymous_afterCode_2_(anonymous_afterCode_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.STATE_MACHINE_DEFINITION_:{StateMachineDefinition_ stateMachineDefinition_=(StateMachineDefinition_)theEObject;T result=caseStateMachineDefinition_(stateMachineDefinition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.STATE_MACHINE_:{StateMachine_ stateMachine_=(StateMachine_)theEObject;T result=caseStateMachine_(stateMachine_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ACTIVE_DEFINITION_:{ActiveDefinition_ activeDefinition_=(ActiveDefinition_)theEObject;T result=caseActiveDefinition_(activeDefinition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.INLINE_STATE_MACHINE_:{InlineStateMachine_ inlineStateMachine_=(InlineStateMachine_)theEObject;T result=caseInlineStateMachine_(inlineStateMachine_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_INLINE_STATE_MACHINE_1:{Anonymous_inlineStateMachine_1_ anonymous_inlineStateMachine_1_=(Anonymous_inlineStateMachine_1_)theEObject;T result=caseAnonymous_inlineStateMachine_1_(anonymous_inlineStateMachine_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.REFERENCED_STATE_MACHINE_:{ReferencedStateMachine_ referencedStateMachine_=(ReferencedStateMachine_)theEObject;T result=caseReferencedStateMachine_(referencedStateMachine_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.EXTENDED_STATE_MACHINE_:{ExtendedStateMachine_ extendedStateMachine_=(ExtendedStateMachine_)theEObject;T result=caseExtendedStateMachine_(extendedStateMachine_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_EXTENDED_STATE_MACHINE_1:{Anonymous_extendedStateMachine_1_ anonymous_extendedStateMachine_1_=(Anonymous_extendedStateMachine_1_)theEObject;T result=caseAnonymous_extendedStateMachine_1_(anonymous_extendedStateMachine_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ENUM_:{Enum_ enum_=(Enum_)theEObject;T result=caseEnum_(enum_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_ENUM_1:{Anonymous_enum_1_ anonymous_enum_1_=(Anonymous_enum_1_)theEObject;T result=caseAnonymous_enum_1_(anonymous_enum_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.STATE_:{State_ state_=(State_)theEObject;T result=caseState_(state_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_STATE_1:{Anonymous_state_1_ anonymous_state_1_=(Anonymous_state_1_)theEObject;T result=caseAnonymous_state_1_(anonymous_state_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.STATE_INTERNAL_:{StateInternal_ stateInternal_=(StateInternal_)theEObject;T result=caseStateInternal_(stateInternal_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.STATE_ENTITY_:{StateEntity_ stateEntity_=(StateEntity_)theEObject;T result=caseStateEntity_(stateEntity_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.AUTO_TRANSITION_:{AutoTransition_ autoTransition_=(AutoTransition_)theEObject;T result=caseAutoTransition_(autoTransition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.AUTO_TRANSITION_BLOCK_:{AutoTransitionBlock_ autoTransitionBlock_=(AutoTransitionBlock_)theEObject;T result=caseAutoTransitionBlock_(autoTransitionBlock_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRANSITION_:{Transition_ transition_=(Transition_)theEObject;T result=caseTransition_(transition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.EVENT_DEFINITION_:{EventDefinition_ eventDefinition_=(EventDefinition_)theEObject;T result=caseEventDefinition_(eventDefinition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_EVENT_DEFINITION_1:{Anonymous_eventDefinition_1_ anonymous_eventDefinition_1_=(Anonymous_eventDefinition_1_)theEObject;T result=caseAnonymous_eventDefinition_1_(anonymous_eventDefinition_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.AFTER_EVERY_EVENT_:{AfterEveryEvent_ afterEveryEvent_=(AfterEveryEvent_)theEObject;T result=caseAfterEveryEvent_(afterEveryEvent_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.AFTER_EVENT_:{AfterEvent_ afterEvent_=(AfterEvent_)theEObject;T result=caseAfterEvent_(afterEvent_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ACTION_:{Action_ action_=(Action_)theEObject;T result=caseAction_(action_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_ACTION_1:{Anonymous_action_1_ anonymous_action_1_=(Anonymous_action_1_)theEObject;T result=caseAnonymous_action_1_(anonymous_action_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_ACTION_2:{Anonymous_action_2_ anonymous_action_2_=(Anonymous_action_2_)theEObject;T result=caseAnonymous_action_2_(anonymous_action_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ENTRY_OR_EXIT_ACTION_:{EntryOrExitAction_ entryOrExitAction_=(EntryOrExitAction_)theEObject;T result=caseEntryOrExitAction_(entryOrExitAction_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_1:{Anonymous_entryOrExitAction_1_ anonymous_entryOrExitAction_1_=(Anonymous_entryOrExitAction_1_)theEObject;T result=caseAnonymous_entryOrExitAction_1_(anonymous_entryOrExitAction_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_2:{Anonymous_entryOrExitAction_2_ anonymous_entryOrExitAction_2_=(Anonymous_entryOrExitAction_2_)theEObject;T result=caseAnonymous_entryOrExitAction_2_(anonymous_entryOrExitAction_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ACTIVITY_:{Activity_ activity_=(Activity_)theEObject;T result=caseActivity_(activity_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_ACTIVITY_1:{Anonymous_activity_1_ anonymous_activity_1_=(Anonymous_activity_1_)theEObject;T result=caseAnonymous_activity_1_(anonymous_activity_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_ACTIVITY_2:{Anonymous_activity_2_ anonymous_activity_2_=(Anonymous_activity_2_)theEObject;T result=caseAnonymous_activity_2_(anonymous_activity_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.MORE_GUARDS_:{MoreGuards_ moreGuards_=(MoreGuards_)theEObject;T result=caseMoreGuards_(moreGuards_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_MORE_GUARDS_1:{Anonymous_moreGuards_1_ anonymous_moreGuards_1_=(Anonymous_moreGuards_1_)theEObject;T result=caseAnonymous_moreGuards_1_(anonymous_moreGuards_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.GUARD_:{Guard_ guard_=(Guard_)theEObject;T result=caseGuard_(guard_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_GUARD_1:{Anonymous_guard_1_ anonymous_guard_1_=(Anonymous_guard_1_)theEObject;T result=caseAnonymous_guard_1_(anonymous_guard_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_GUARD_2:{Anonymous_guard_2_ anonymous_guard_2_=(Anonymous_guard_2_)theEObject;T result=caseAnonymous_guard_2_(anonymous_guard_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_TYPE_:{TraceType_ traceType_=(TraceType_)theEObject;T result=caseTraceType_(traceType_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_TRACE_TYPE_1:{Anonymous_traceType_1_ anonymous_traceType_1_=(Anonymous_traceType_1_)theEObject;T result=caseAnonymous_traceType_1_(anonymous_traceType_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_TRACE_TYPE_2:{Anonymous_traceType_2_ anonymous_traceType_2_=(Anonymous_traceType_2_)theEObject;T result=caseAnonymous_traceType_2_(anonymous_traceType_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_:{Trace_ trace_=(Trace_)theEObject;T result=caseTrace_(trace_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_DIRECTIVE_:{TraceDirective_ traceDirective_=(TraceDirective_)theEObject;T result=caseTraceDirective_(traceDirective_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1:{Anonymous_traceDirective_1_ anonymous_traceDirective_1_=(Anonymous_traceDirective_1_)theEObject;T result=caseAnonymous_traceDirective_1_(anonymous_traceDirective_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_ITEM_:{TraceItem_ traceItem_=(TraceItem_)theEObject;T result=caseTraceItem_(traceItem_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_ENTITY_:{TraceEntity_ traceEntity_=(TraceEntity_)theEObject;T result=caseTraceEntity_(traceEntity_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_TRACE_ENTITY_1:{Anonymous_traceEntity_1_ anonymous_traceEntity_1_=(Anonymous_traceEntity_1_)theEObject;T result=caseAnonymous_traceEntity_1_(anonymous_traceEntity_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_OPTIONS_:{TraceOptions_ traceOptions_=(TraceOptions_)theEObject;T result=caseTraceOptions_(traceOptions_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_TRACE_OPTIONS_1:{Anonymous_traceOptions_1_ anonymous_traceOptions_1_=(Anonymous_traceOptions_1_)theEObject;T result=caseAnonymous_traceOptions_1_(anonymous_traceOptions_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_OPTION_:{TraceOption_ traceOption_=(TraceOption_)theEObject;T result=caseTraceOption_(traceOption_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.PRE_OR_POST_CONDITION_:{PreOrPostCondition_ preOrPostCondition_=(PreOrPostCondition_)theEObject;T result=casePreOrPostCondition_(preOrPostCondition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.EXECUTE_CLAUSE_:{ExecuteClause_ executeClause_=(ExecuteClause_)theEObject;T result=caseExecuteClause_(executeClause_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_WHEN_:{TraceWhen_ traceWhen_=(TraceWhen_)theEObject;T result=caseTraceWhen_(traceWhen_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_FOR_:{TraceFor_ traceFor_=(TraceFor_)theEObject;T result=caseTraceFor_(traceFor_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_LEVEL_:{TraceLevel_ traceLevel_=(TraceLevel_)theEObject;T result=caseTraceLevel_(traceLevel_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_PERIOD_:{TracePeriod_ tracePeriod_=(TracePeriod_)theEObject;T result=caseTracePeriod_(tracePeriod_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_DURING_:{TraceDuring_ traceDuring_=(TraceDuring_)theEObject;T result=caseTraceDuring_(traceDuring_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_RECORD_:{TraceRecord_ traceRecord_=(TraceRecord_)theEObject;T result=caseTraceRecord_(traceRecord_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.RECORD_ENTITY_:{RecordEntity_ recordEntity_=(RecordEntity_)theEObject;T result=caseRecordEntity_(recordEntity_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_RECORD_ENTITY_2:{Anonymous_recordEntity_2_ anonymous_recordEntity_2_=(Anonymous_recordEntity_2_)theEObject;T result=caseAnonymous_recordEntity_2_(anonymous_recordEntity_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_CONDITION_:{TraceCondition_ traceCondition_=(TraceCondition_)theEObject;T result=caseTraceCondition_(traceCondition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.CONDITION_RHS_:{ConditionRHS_ conditionRHS_=(ConditionRHS_)theEObject;T result=caseConditionRHS_(conditionRHS_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_CASE_:{TraceCase_ traceCase_=(TraceCase_)theEObject;T result=caseTraceCase_(traceCase_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_CASE_DEF_:{TraceCaseDef_ traceCaseDef_=(TraceCaseDef_)theEObject;T result=caseTraceCaseDef_(traceCaseDef_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_CASE_ACTIVATION_:{TraceCaseActivation_ traceCaseActivation_=(TraceCaseActivation_)theEObject;T result=caseTraceCaseActivation_(traceCaseActivation_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.TRACE_CASE_DEACTIVATION_:{TraceCaseDeactivation_ traceCaseDeactivation_=(TraceCaseDeactivation_)theEObject;T result=caseTraceCaseDeactivation_(traceCaseDeactivation_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.DE_ACTIVATE_FOR_:{DeActivateFor_ deActivateFor_=(DeActivateFor_)theEObject;T result=caseDeActivateFor_(deActivateFor_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.PRECONDITION_:{Precondition_ precondition_=(Precondition_)theEObject;T result=casePrecondition_(precondition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.POSTCONDITION_:{Postcondition_ postcondition_=(Postcondition_)theEObject;T result=casePostcondition_(postcondition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.INVARIANT_:{Invariant_ invariant_=(Invariant_)theEObject;T result=caseInvariant_(invariant_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_INVARIANT_1:{Anonymous_invariant_1_ anonymous_invariant_1_=(Anonymous_invariant_1_)theEObject;T result=caseAnonymous_invariant_1_(anonymous_invariant_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_INVARIANT_2:{Anonymous_invariant_2_ anonymous_invariant_2_=(Anonymous_invariant_2_)theEObject;T result=caseAnonymous_invariant_2_(anonymous_invariant_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.CONSTRAINT_TOKEN_:{ConstraintToken_ constraintToken_=(ConstraintToken_)theEObject;T result=caseConstraintToken_(constraintToken_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.CONSTRAINT_:{Constraint_ constraint_=(Constraint_)theEObject;T result=caseConstraint_(constraint_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_CONSTRAINT_1:{Anonymous_constraint_1_ anonymous_constraint_1_=(Anonymous_constraint_1_)theEObject;T result=caseAnonymous_constraint_1_(anonymous_constraint_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.NEGATIVE_CONSTRAINT_:{NegativeConstraint_ negativeConstraint_=(NegativeConstraint_)theEObject;T result=caseNegativeConstraint_(negativeConstraint_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.CONSTRAINT_BODY_:{ConstraintBody_ constraintBody_=(ConstraintBody_)theEObject;T result=caseConstraintBody_(constraintBody_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_CONSTRAINT_BODY_1:{Anonymous_constraintBody_1_ anonymous_constraintBody_1_=(Anonymous_constraintBody_1_)theEObject;T result=caseAnonymous_constraintBody_1_(anonymous_constraintBody_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.LINKING_OP_:{LinkingOp_ linkingOp_=(LinkingOp_)theEObject;T result=caseLinkingOp_(linkingOp_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_LINKING_OP_1:{Anonymous_linkingOp_1_ anonymous_linkingOp_1_=(Anonymous_linkingOp_1_)theEObject;T result=caseAnonymous_linkingOp_1_(anonymous_linkingOp_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_LINKING_OP_2:{Anonymous_linkingOp_2_ anonymous_linkingOp_2_=(Anonymous_linkingOp_2_)theEObject;T result=caseAnonymous_linkingOp_2_(anonymous_linkingOp_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_LINKING_OP_3:{Anonymous_linkingOp_3_ anonymous_linkingOp_3_=(Anonymous_linkingOp_3_)theEObject;T result=caseAnonymous_linkingOp_3_(anonymous_linkingOp_3_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.CONSTRAINT_EXPR_:{ConstraintExpr_ constraintExpr_=(ConstraintExpr_)theEObject;T result=caseConstraintExpr_(constraintExpr_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_CONSTRAINT_EXPR_1:{Anonymous_constraintExpr_1_ anonymous_constraintExpr_1_=(Anonymous_constraintExpr_1_)theEObject;T result=caseAnonymous_constraintExpr_1_(anonymous_constraintExpr_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.COMPOUND_EXPR_:{CompoundExpr_ compoundExpr_=(CompoundExpr_)theEObject;T result=caseCompoundExpr_(compoundExpr_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.BOOL_EXPR_:{BoolExpr_ boolExpr_=(BoolExpr_)theEObject;T result=caseBoolExpr_(boolExpr_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.STRING_EXPR_:{StringExpr_ stringExpr_=(StringExpr_)theEObject;T result=caseStringExpr_(stringExpr_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.STRING_LIT_:{StringLit_ stringLit_=(StringLit_)theEObject;T result=caseStringLit_(stringLit_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.GEN_EXPR_:{GenExpr_ genExpr_=(GenExpr_)theEObject;T result=caseGenExpr_(genExpr_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_GEN_EXPR_1:{Anonymous_genExpr_1_ anonymous_genExpr_1_=(Anonymous_genExpr_1_)theEObject;T result=caseAnonymous_genExpr_1_(anonymous_genExpr_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_GEN_EXPR_2:{Anonymous_genExpr_2_ anonymous_genExpr_2_=(Anonymous_genExpr_2_)theEObject;T result=caseAnonymous_genExpr_2_(anonymous_genExpr_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.NUM_EXPR_:{NumExpr_ numExpr_=(NumExpr_)theEObject;T result=caseNumExpr_(numExpr_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_NUM_EXPR_1:{Anonymous_numExpr_1_ anonymous_numExpr_1_=(Anonymous_numExpr_1_)theEObject;T result=caseAnonymous_numExpr_1_(anonymous_numExpr_1_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_NUM_EXPR_2:{Anonymous_numExpr_2_ anonymous_numExpr_2_=(Anonymous_numExpr_2_)theEObject;T result=caseAnonymous_numExpr_2_(anonymous_numExpr_2_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_NUM_EXPR_3:{Anonymous_numExpr_3_ anonymous_numExpr_3_=(Anonymous_numExpr_3_)theEObject;T result=caseAnonymous_numExpr_3_(anonymous_numExpr_3_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ANONYMOUS_NUM_EXPR_4:{Anonymous_numExpr_4_ anonymous_numExpr_4_=(Anonymous_numExpr_4_)theEObject;T result=caseAnonymous_numExpr_4_(anonymous_numExpr_4_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.EQUALITY_OP_:{EqualityOp_ equalityOp_=(EqualityOp_)theEObject;T result=caseEqualityOp_(equalityOp_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.EQUALS_OP_:{EqualsOp_ equalsOp_=(EqualsOp_)theEObject;T result=caseEqualsOp_(equalsOp_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.NOTEQUALS_OP_:{NotequalsOp_ notequalsOp_=(NotequalsOp_)theEObject;T result=caseNotequalsOp_(notequalsOp_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ORDINAL_OP_:{OrdinalOp_ ordinalOp_=(OrdinalOp_)theEObject;T result=caseOrdinalOp_(ordinalOp_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.GREATER_OP_:{GreaterOp_ greaterOp_=(GreaterOp_)theEObject;T result=caseGreaterOp_(greaterOp_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.LESS_OP_:{LessOp_ lessOp_=(LessOp_)theEObject;T result=caseLessOp_(lessOp_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.MORE_OP_:{MoreOp_ moreOp_=(MoreOp_)theEObject;T result=caseMoreOp_(moreOp_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.SMALLER_OP_:{SmallerOp_ smallerOp_=(SmallerOp_)theEObject;T result=caseSmallerOp_(smallerOp_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.POSITION_:{Position_ position_=(Position_)theEObject;T result=casePosition_(position_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ELEMENT_POSITION_:{ElementPosition_ elementPosition_=(ElementPosition_)theEObject;T result=caseElementPosition_(elementPosition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.ASSOCIATION_POSITION_:{AssociationPosition_ associationPosition_=(AssociationPosition_)theEObject;T result=caseAssociationPosition_(associationPosition_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.COORDINATE_:{Coordinate_ coordinate_=(Coordinate_)theEObject;T result=caseCoordinate_(coordinate_);if (result == null) result=defaultCase(theEObject);return result;}case UmplePackage.DISPLAY_COLOR_:{DisplayColor_ displayColor_=(DisplayColor_)theEObject;T result=caseDisplayColor_(displayColor_);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  JClass lookupAlias(String alias){  if (!aliasMap.containsKey(alias)) {    throw new JoinerException("Cannot find alias: " + alias);  }  return aliasMap.get(alias);}  }
class C{  private void startAttribute(Attributes atts){  if (!this.seenAttribute) {    pw.println("<tr valign=\"top\">");    pw.println("  <th align=\"left\">Attributes</th>");    pw.println("  <th align=\"left\" colspan=\"2\">Name</th>");    pw.println("  <th align=\"left\">Type</th>");    pw.println("  <th align=\"left\">Description</th>");    pw.println("  <th align=\"left\">Writable</th>");    pw.println("</tr>");  }  this.seenAttribute=true;  String name=atts.getValue(NAME);  String description=atts.getValue(DESCRIPTION);  String type=atts.getValue(TYPE);  String writeable=atts.getValue(WRITEABLE);  pw.println("<tr valign=\"top\">");  pw.println("  <td></td>");  pw.println("  <td colspan=\"2\">" + name + "</td>");  pw.println("  <td>" + type + "</td>");  pw.println("  <td>" + description + "</td>");  pw.println("  <td>" + writeable + "</td>");  pw.println("</tr>");}  }
class C{  @Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){  XYItemRendererState state=super.initialise(g2,dataArea,plot,data,info);  state.setProcessVisibleItemsOnly(false);  return state;}  }
class C{  public Factory buildEncoded(InputStream json) throws IOException, ApiException {  Factory factory=DtoFactory.getInstance().createDtoFromJson(json,Factory.class);  checkValid(factory);  return factory;}  }
class C{  public IconicsDrawable backgroundColorRes(int backgroundColorRes){  this.mBackgroundColor=mContext.getResources().getColor(backgroundColorRes);  return this;}  }
class C{  public void testDoubleValuePosRounded2(){  byte[] a={-128,1,2,3,4,5,36,23,1,-3,-5};  int aSign=1;  double result=1.547472643879479E26;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  @Deprecated public static <T>T withCloseable(Closeable self,@ClosureParams(value=SimpleType.class,options="java.io.Closeable") Closure<T> action) throws IOException {  return IOGroovyMethods.withCloseable(self,action);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (alias: ");  result.append(alias);  result.append(')');  return result.toString();}  }
class C{  public List<String> extractHashtags(final String text){  return extractHashtags(text,true);}  }
class C{  public static void registerBluetoothReceiver(BroadcastReceiver receiver,Activity activity){  if (null == receiver || null == activity) {    return;  }  IntentFilter intentFilter=new IntentFilter();  intentFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED);  intentFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);  intentFilter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);  intentFilter.addAction(BluetoothDevice.ACTION_FOUND);  intentFilter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);  intentFilter.addAction("android.bluetooth.device.action.PAIRING_REQUEST");  activity.registerReceiver(receiver,intentFilter);}  }
class C{  private void notifyLine(final String line,final Key outputType){  String trimmed=LineHandlerHelper.trimLineSeparator(line);  if (myVcs != null && !"\r".equals(line.substring(trimmed.length()))) {    if (outputType == ProcessOutputTypes.STDOUT) {      if (!isStdoutSuppressed() && !mySilent && !StringUtil.isEmptyOrSpaces(line)) {        myVcs.showMessages(trimmed);        LOG.info(line.trim());      } else {        OUTPUT_LOG.debug(line.trim());      }    } else     if (outputType == ProcessOutputTypes.STDERR && !isStderrSuppressed() && !mySilent && !StringUtil.isEmptyOrSpaces(line)) {      myVcs.showErrorMessages(trimmed);      LOG.info(line.trim());    } else {      LOG.debug(line.trim());    }  }  myLineListeners.getMulticaster().onLineAvailable(trimmed,outputType);}  }
class C{  private MGRSComponents breakMGRSString(String MGRSString){  int num_digits;  int num_letters;  int i=0;  int j=0;  long error_code=MGRS_NO_ERROR;  int zone=0;  int[] letters=new int[3];  long easting=0;  long northing=0;  int precision=0;  while (i < MGRSString.length() && MGRSString.charAt(i) == ' ') {    i++;  }  j=i;  while (i < MGRSString.length() && Character.isDigit(MGRSString.charAt(i))) {    i++;  }  num_digits=i - j;  if (num_digits <= 2)   if (num_digits > 0) {    zone=Integer.parseInt(MGRSString.substring(j,i));    if ((zone < 1) || (zone > 60))     error_code|=MGRS_STRING_ERROR;  } else   error_code|=MGRS_STRING_ERROR;  j=i;  while (i < MGRSString.length() && Character.isLetter(MGRSString.charAt(i))) {    i++;  }  num_letters=i - j;  if (num_letters == 3) {    letters[0]=alphabet.indexOf(Character.toUpperCase(MGRSString.charAt(j)));    if ((letters[0] == LETTER_I) || (letters[0] == LETTER_O))     error_code|=MGRS_STRING_ERROR;    letters[1]=alphabet.indexOf(Character.toUpperCase(MGRSString.charAt(j + 1)));    if ((letters[1] == LETTER_I) || (letters[1] == LETTER_O))     error_code|=MGRS_STRING_ERROR;    letters[2]=alphabet.indexOf(Character.toUpperCase(MGRSString.charAt(j + 2)));    if ((letters[2] == LETTER_I) || (letters[2] == LETTER_O))     error_code|=MGRS_STRING_ERROR;  } else   error_code|=MGRS_STRING_ERROR;  j=i;  while (i < MGRSString.length() && Character.isDigit(MGRSString.charAt(i))) {    i++;  }  num_digits=i - j;  if ((num_digits <= 10) && (num_digits % 2 == 0)) {    int n;    double multiplier;    n=num_digits / 2;    precision=n;    if (n > 0) {      easting=Integer.parseInt(MGRSString.substring(j,j + n));      northing=Integer.parseInt(MGRSString.substring(j + n,j + n + n));      multiplier=Math.pow(10.0,5 - n);      easting*=multiplier;      northing*=multiplier;    } else {      easting=0;      northing=0;    }  } else   error_code|=MGRS_STRING_ERROR;  last_error=error_code;  if (error_code == MGRS_NO_ERROR)   return new MGRSComponents(zone,letters[0],letters[1],letters[2],easting,northing,precision);  return null;}  }
class C{  public int hashCode(){  return toString().hashCode();}  }
class C{  public static boolean spaceAvailable(Context context,long proposedFileSize){  if (context == null) {    throw new IllegalArgumentException("Context cannot be null");  }  return proposedFileSize <= (FREE_SPACE_MULTIPLIER * context.getExternalFilesDir(null).getFreeSpace());}  }
class C{  public void jumpTo(Point location){  jumpTo(location.x,location.y);  doCorrectPosition(false,false);}  }
class C{  public void view(Context context,final String itemId){  if (TextUtils.isEmpty(itemId)) {    return;  }  ContentResolver cr=context.getContentResolver();  Observable.defer(null).map(null).map(null).subscribeOn(mIoScheduler).observeOn(AndroidSchedulers.mainThread()).subscribe(null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  if (node != null && node.getSorter() != null)   return Boolean.valueOf(node.getSorter().isAscending());  return Boolean.FALSE;}  }
class C{  private boolean isChar(int position,char ch){  if (_len >= 0 && position >= _len) {    return false;  }  return Character.toLowerCase(ch) == Character.toLowerCase(_working[position]);}  }
class C{  public static void sort(Object[] a,Comparator comparator){  Object[] aux=a.clone();  sort(aux,a,0,a.length - 1,comparator);  assert isSorted(a,comparator);}  }
class C{  private void createClean(){  Comment cleanUpComment=doc.createComment("Clean up");  root.appendChild(cleanUpComment);  Element target=doc.createElement("target");  target.setAttribute("name","clean");  target.setAttribute("description","Remove all temporary files");  Comment deleteFileComment=doc.createComment("Delete files");  target.appendChild(deleteFileComment);  Element delete=doc.createElement("delete");  delete.setAttribute("dir","${build.classes}");  target.appendChild(delete);  root.appendChild(target);}  }
class C{  public Builder queryOnly(){switch (mRequestType) {case TYPE_WEATHER_BY_GEO_LOCATION_REQ:case TYPE_WEATHER_BY_WEATHER_LOCATION_REQ:    this.mIsQueryOnly=true;  break;default :this.mIsQueryOnly=false;break;}return this;}  }
class C{  public long size(){  return size;}  }
class C{  protected void parse(DataInputStream stream) throws Exception {  type=stream.readByte();  int size=stream.readInt();  elements=new NBT_Tag[size];  for (int i=0; i < size; i++) {switch (type) {case 1:      elements[i]=new TAG_Byte("");    break;case 2:  elements[i]=new TAG_Short("");break;case 3:elements[i]=new TAG_Int("");break;case 4:elements[i]=new TAG_Long("");break;case 5:elements[i]=new TAG_Float("");break;case 6:elements[i]=new TAG_Double("");break;case 7:elements[i]=new TAG_Byte_Array("");break;case 8:elements[i]=new TAG_String("");break;case 9:elements[i]=new TAG_List("");break;case 10:elements[i]=new TAG_Compound("");break;default :throw new Exception("Unkown NBT type in list: " + type);}elements[i].parse(stream);}}  }
class C{  public Parse filter(String url,WebPage page,Parse parse,HTMLMetaTags metaTags,DocumentFragment doc){  String lang=null;  if (detect >= 0 && identify < 0) {    lang=detectLanguage(page,doc);  } else   if (detect < 0 && identify >= 0) {    lang=identifyLanguage(parse);  } else   if (detect < identify) {    lang=detectLanguage(page,doc);    if (lang == null) {      lang=identifyLanguage(parse);    }  } else   if (identify < detect) {    lang=identifyLanguage(parse);    if (lang == null) {      lang=detectLanguage(page,doc);    }  } else {    LOG.warn("No configuration for language extraction policy is provided");    return parse;  }  if (lang != null) {    page.getMetadata().put(new Utf8(Metadata.LANGUAGE),ByteBuffer.wrap(lang.getBytes()));    return parse;  }  return parse;}  }
class C{  public void addExtraField(ZipExtraField ze){  ZipShort type=ze.getHeaderId();  boolean done=false;  for (int i=0; !done && i < extraFields.size(); i++) {    if (extraFields.elementAt(i).getHeaderId().equals(type)) {      extraFields.setElementAt(ze,i);      done=true;    }  }  if (!done) {    extraFields.addElement(ze);  }  setExtra();}  }
class C{  private boolean isAttached(Spannable str,Selection selection,Object span,SpanCollectMode mode){  int spanStart=str.getSpanStart(span);  int spanEnd=str.getSpanEnd(span);  int selStart=selection.start();  int selEnd=selection.end();  int start=Math.max(spanStart,selStart);  int end=Math.min(spanEnd,selEnd);  if (start > end) {    return false;  } else   if (start < end) {    return true;  } else   if ((spanStart > selStart && spanEnd < selEnd) || (selStart > spanStart && selEnd < spanEnd)) {    return true;  } else   if (mode == SpanCollectMode.EXACT) {    return spanStart == selStart && spanEnd == selEnd && selStart == selEnd;  } else {    int flags=str.getSpanFlags(span) & Spanned.SPAN_POINT_MARK_MASK;    if (spanEnd == selStart) {      return isOneFlagSet(flags,Spanned.SPAN_EXCLUSIVE_INCLUSIVE,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    } else {      return isOneFlagSet(flags,Spanned.SPAN_INCLUSIVE_EXCLUSIVE,Spanned.SPAN_INCLUSIVE_INCLUSIVE);    }  }}  }
class C{  public static void checkAndAppendTextElement(AVList params,String paramKey,Element context,String path){  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String s=params.getStringValue(paramKey);  if (s != null && s.length() > 0) {    appendText(context,path,s.trim());  }}  }
class C{  public static long toLong(Long num,long defaultValue){  return num == null ? defaultValue : num;}  }
class C{  public static VPFCoverage fromFile(VPFLibrary library,String name){  if (library == null) {    String message=Logging.getMessage("nullValue.LibraryIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (WWUtil.isEmpty(name)) {    String message=Logging.getMessage("nullValue.NameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  File file=new File(library.getFilePath(),name);  if (!file.exists()) {    String message=Logging.getMessage("generic.FileNotFound",file.getPath());    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }  VPFBufferedRecordData fcs=VPFUtils.readTable(new File(file,VPFConstants.FEATURE_CLASS_SCHEMA_TABLE));  if (fcs == null) {    String message=Logging.getMessage("VPF.FeatureClassSchemaTableMissing");    throw new WWRuntimeException(message);  }  VPFBufferedRecordData fca=VPFUtils.readTable(new File(file,VPFConstants.FEATURE_CLASS_ATTRIBUTE_TABLE));  VPFBufferedRecordData char_vdt=VPFUtils.readTable(new File(file,VPFConstants.CHARACTER_VALUE_DESCRIPTION_TABLE));  VPFBufferedRecordData int_vdt=VPFUtils.readTable(new File(file,VPFConstants.INTEGER_VALUE_DESCRIPTION_TABLE));  VPFBufferedRecordData symbol_rat=VPFUtils.readTable(new File(file,"symbol" + VPFConstants.RELATED_ATTRIBUTE_TABLE));  VPFCoverage coverage=new VPFCoverage(library);  coverage.setFeatureClassSchemaTable(fcs);  coverage.setFeatureClassAttributeTable(fca);  coverage.setCharacterValueDescriptionTable(char_vdt);  coverage.setIntegerValueDescriptionTable(int_vdt);  coverage.setSymbolRelatedAttributeTable(symbol_rat);  VPFRecord record=library.getCoverageAttributeTable().getRecord("coverage_name",name);  if (record != null) {    VPFUtils.checkAndSetValue(record,"coverage_name",AVKey.DISPLAY_NAME,coverage);    VPFUtils.checkAndSetValue(record,"description",AVKey.DESCRIPTION,coverage);  }  return coverage;}  }
class C{  public void testMergeSecurityRoleIntoEmptyDocument() throws Exception {  String srcXml="<web-app></web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <security-role>" + "    <role-name>role1</role-name>"+ "  </security-role>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  List<String> securityRoleNames=WebXmlUtils.getSecurityRoleNames(srcWebXml);  assertEquals(1,securityRoleNames.size());  assertEquals("role1",securityRoleNames.get(0));}  }
class C{  public void clear(){  final String methodName="clear";  log.fine(CLASS_NAME,methodName,"305",new Object[]{new Integer(tokens.size())});synchronized (tokens) {    tokens.clear();  }}  }
class C{  public Builder st(int depth){  this.withStackTrace=true;  this.stackTraceDepth=depth;  this.stackTraceSet=true;  return this;}  }
class C{  private void checkOrientation(int orientation){  final boolean isPortrait=(Configuration.ORIENTATION_PORTRAIT == orientation);  final int modeOptionsDimension=(int)getResources().getDimension(R.dimen.mode_options_height);  FrameLayout.LayoutParams modeOptionsParams=(FrameLayout.LayoutParams)mModeOptions.getLayoutParams();  FrameLayout.LayoutParams modeOptionsToggleParams=(FrameLayout.LayoutParams)mModeOptionsToggle.getLayoutParams();  if (isPortrait) {    modeOptionsParams.height=modeOptionsDimension;    modeOptionsParams.width=ViewGroup.LayoutParams.MATCH_PARENT;    modeOptionsParams.gravity=Gravity.BOTTOM;    modeOptionsToggleParams.gravity=BOTTOM_RIGHT;    mThreeDots.setImageResource(R.drawable.ic_options_port);  } else {    modeOptionsParams.width=modeOptionsDimension;    modeOptionsParams.height=ViewGroup.LayoutParams.MATCH_PARENT;    modeOptionsParams.gravity=Gravity.RIGHT;    modeOptionsToggleParams.gravity=TOP_RIGHT;    mThreeDots.setImageResource(R.drawable.ic_options_land);  }  requestLayout();}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  if (mBitmapCoverImage != null)   canvas.drawBitmap(mBitmapCoverImage,0,0,mPaintCoverImage);  canvas.drawRect(0,0,mWidth,mHeight,mPaintCoverMask);  mDrawableBottomShadow.draw(canvas);  canvas.drawRect(rectFEmptyProgress,mPaintEmptyProgress);  canvas.drawRect(0,mHeight - mProgressHeight,mCurrentProgressPosition,mHeight,mPaintLoadedProgress);  canvas.drawRect(0,0,mCurrentProgressPosition,mHeight,mPaintProgressMask);  mTextPassedDuration=secondsToTime(mCurrentSeconds);  mPaintTextDuration.getTextBounds(mTextPassedDuration,0,mTextPassedDuration.length(),rectFTextDuration);  canvas.drawText(mTextPassedDuration,mWidth / 30,mHeight - mWidth / 30 - rectFTextDuration.height(),mPaintTextDuration);  mTextLeftDuration=secondsToTime(mMaxSeconds - mCurrentSeconds);  mPaintTextDuration.getTextBounds(mTextLeftDuration,0,mTextLeftDuration.length(),rectFTextDuration);  canvas.drawText(mTextLeftDuration,(29 * mWidth / 30) - rectFTextDuration.width(),mHeight - mWidth / 30 - rectFTextDuration.height(),mPaintTextDuration);}  }
class C{  public void testTypical(){  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());}  }
class C{  private void fireTreeStructureChanged(Object source,TreePath path){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path);      ((TreeModelListener)listeners[i + 1]).treeStructureChanged(e);    }  }}  }
class C{  public static Pair<ILogicalExpression,Boolean> createSearchKeyExpr(IOptimizableFuncExpr optFuncExpr,OptimizableOperatorSubTree indexSubTree,OptimizableOperatorSubTree probeSubTree) throws AlgebricksException {  if (probeSubTree == null) {    IAType fieldType=optFuncExpr.getFieldType(0);    ILogicalExpression constantAtRuntimeExpression=null;    AsterixConstantValue constantValue=null;    ATypeTag constantValueTag=null;    constantAtRuntimeExpression=optFuncExpr.getConstantAtRuntimeExpr(0);    if (constantAtRuntimeExpression.getExpressionTag() == LogicalExpressionTag.CONSTANT) {      constantValue=(AsterixConstantValue)((ConstantExpression)constantAtRuntimeExpression).getValue();    }    constantValueTag=optFuncExpr.getConstantType(0).getTypeTag();    boolean typeCastingApplied=false;    boolean realTypeConvertedToIntegerType=false;    AsterixConstantValue replacedConstantValue=null;    if (constantValueTag != fieldType.getTypeTag() && constantValue != null) {      replacedConstantValue=ATypeHierarchy.getAsterixConstantValueFromNumericTypeObject(constantValue.getObject(),fieldType.getTypeTag());      if (replacedConstantValue != null) {        typeCastingApplied=true;      }switch (constantValueTag) {case DOUBLE:case FLOAT:switch (fieldType.getTypeTag()) {case INT8:case INT16:case INT32:case INT64:          realTypeConvertedToIntegerType=true;        break;default :      break;  }default :break;}}if (typeCastingApplied) {return new Pair<ILogicalExpression,Boolean>(new ConstantExpression(replacedConstantValue),realTypeConvertedToIntegerType);} else {return new Pair<ILogicalExpression,Boolean>(optFuncExpr.getConstantAtRuntimeExpr(0),false);}} else {if (optFuncExpr.getOperatorSubTree(0) == null || optFuncExpr.getOperatorSubTree(0) == probeSubTree) {return new Pair<ILogicalExpression,Boolean>(new VariableReferenceExpression(optFuncExpr.getLogicalVar(0)),false);} else {return new Pair<ILogicalExpression,Boolean>(new VariableReferenceExpression(optFuncExpr.getLogicalVar(1)),false);}}}  }
class C{  public void prepareStatement(String sql,boolean specifyTypeAndConcur,int resultSetType,int resultSetConcurrency,int fetchSize,int maxRows) throws GenericDataSourceException, GenericEntityException {  if (Debug.verboseOn())   Debug.logVerbose("[SQLProcessor.prepareStatement] sql=" + sql,module);  if (_connection == null) {    getConnection();  }  try {    _sql=sql;    _ind=1;    if (specifyTypeAndConcur) {      _ps=_connection.prepareStatement(sql,resultSetType,resultSetConcurrency);      if (Debug.verboseOn())       Debug.logVerbose("[SQLProcessor.prepareStatement] _ps=" + _ps,module);    } else {      _ps=_connection.prepareStatement(sql);      if (Debug.verboseOn())       Debug.logVerbose("[SQLProcessor.prepareStatement] (def) _ps=" + _ps,module);    }    if (maxRows > 0) {      _ps.setMaxRows(maxRows);      if (Debug.verboseOn())       Debug.logVerbose("[SQLProcessor.prepareStatement] max rows set : " + maxRows,module);    }    this.setFetchSize(_ps,fetchSize);  } catch (  SQLException sqle) {    throw new GenericDataSourceException("SQL Exception while executing the following:" + sql,sqle);  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public static String readBytesToString(FileSystem fs,Path path,int length) throws IOException {  FSDataInputStream in=fs.open(path);  try {    byte[] buf=new byte[length];    in.readFully(0,buf);    return toChar(buf);  }  finally {    in.close();  }}  }
class C{  public int constrains(GeneralNameInterface inputName) throws UnsupportedOperationException {  int constraintType;  if (inputName == null)   constraintType=NAME_DIFF_TYPE; else   if (inputName.getType() != NAME_DNS)   constraintType=NAME_DIFF_TYPE; else {    String inName=(((DNSName)inputName).getName()).toLowerCase(Locale.ENGLISH);    String thisName=name.toLowerCase(Locale.ENGLISH);    if (inName.equals(thisName))     constraintType=NAME_MATCH; else     if (thisName.endsWith(inName)) {      int inNdx=thisName.lastIndexOf(inName);      if (thisName.charAt(inNdx - 1) == '.')       constraintType=NAME_WIDENS; else       constraintType=NAME_SAME_TYPE;    } else     if (inName.endsWith(thisName)) {      int ndx=inName.lastIndexOf(thisName);      if (inName.charAt(ndx - 1) == '.')       constraintType=NAME_NARROWS; else       constraintType=NAME_SAME_TYPE;    } else {      constraintType=NAME_SAME_TYPE;    }  }  return constraintType;}  }
class C{  protected void reportAccurateParameterizedTypeReference(SearchMatch match,TypeReference typeRef,int index,TypeReference[] typeArguments) throws CoreException {  if (match.getRule() == 0)   return;  if (!encloses((IJavaElement)match.getElement()))   return;  int end=typeRef.sourceEnd;  if (typeArguments != null) {    boolean shouldMatchErasure=(this.pattern instanceof OrPattern) ? ((OrPattern)this.pattern).isErasureMatch() : ((JavaSearchPattern)this.pattern).isErasureMatch();    boolean hasSignatures=(this.pattern instanceof OrPattern) ? ((OrPattern)this.pattern).hasSignatures() : ((JavaSearchPattern)this.pattern).hasSignatures();    if (shouldMatchErasure || !hasSignatures) {      if (typeRef instanceof QualifiedTypeReference && index >= 0) {        long[] positions=((QualifiedTypeReference)typeRef).sourcePositions;        end=(int)positions[index];      } else       if (typeRef instanceof ArrayTypeReference) {        end=((ArrayTypeReference)typeRef).originalSourceEnd;      }    } else {      Scanner scanner=this.parser.scanner;      char[] source=this.currentPossibleMatch.getContents();      scanner.setSource(source);      scanner.resetTo(end,source.length - 1);      int depth=0;      for (int i=typeArguments.length - 1; i >= 0; i--) {        if (typeArguments[i] != null) {          long lastTypeArgInfo=findLastTypeArgumentInfo(typeArguments[i]);          depth=(int)(lastTypeArgInfo >>> 32) + 1;          scanner.resetTo(((int)lastTypeArgInfo) + 1,scanner.eofPosition - 1);          break;        }      }      while (depth-- > 0) {        while (!scanner.atEnd()) {          if (scanner.getNextChar() == '>') {            end=scanner.currentPosition - 1;            break;          }        }      }    }  }  match.setLength(end - match.getOffset() + 1);  report(match);}  }
class C{  public static void assertEquals(String message,int expected,int actual){  Assert.assertEquals(message,expected,actual);}  }
class C{  private void initialize(){  FlowLayout flowLayout1=new FlowLayout();  this.setLayout(flowLayout1);  packing=JPlagCreator.createLabel(Messages.getString("ProgressPanel.Packing_files"),200,20);  sending=JPlagCreator.createLabel(Messages.getString("ProgressPanel.Sending_files"),200,20);  waiting=JPlagCreator.createLabel(Messages.getString("ProgressPanel.Waiting_in_queue"),200,20);  parsing=JPlagCreator.createLabel(Messages.getString("ProgressPanel.Parsing_files"),200,20);  comparing=JPlagCreator.createLabel(Messages.getString("ProgressPanel.Comparing_files"),200,20);  loading=JPlagCreator.createLabel(Messages.getString("ProgressPanel.Loading_results"),200,20);  loading.setBackground(Color.WHITE);  this.setPreferredSize(new java.awt.Dimension(200,120));  packing.setIcon(new ImageIcon(getClass().getResource("/atujplag/data/current.gif")));  sending.setIcon(new ImageIcon(getClass().getResource("/atujplag/data/current.gif")));  waiting.setIcon(new ImageIcon(getClass().getResource("/atujplag/data/current.gif")));  parsing.setIcon(new ImageIcon(getClass().getResource("/atujplag/data/current.gif")));  comparing.setIcon(new ImageIcon(getClass().getResource("/atujplag/data/current.gif")));  loading.setIcon(new ImageIcon(getClass().getResource("/atujplag/data/current.gif")));  flowLayout1.setHgap(50);  flowLayout1.setVgap(0);  flowLayout1.setAlignment(java.awt.FlowLayout.CENTER);  this.setBackground(JPlagCreator.SYSTEMCOLOR);  this.add(packing);  this.add(sending);  this.add(waiting);  this.add(parsing);  this.add(comparing);  this.add(loading);}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  private static XmlJmapper toXmlJmapper(String path,InputStream is) throws FileNotFoundException {  XStream xstream=new XStream();  xstream.processAnnotations(XmlJmapper.class);  if (is != null)   return (XmlJmapper)xstream.fromXML(is);  Error.fileNotFound(path);  return null;}  }
class C{  public void testTracksTableUpdate(){  Capture<ContentObserver> contentObserverCapture=new Capture<ContentObserver>();  Track track=new Track();  expect(myTracksProviderUtils.getTrack(TRACK_ID)).andStubReturn(track);  dataSource.registerContentObserver(eq(TracksColumns.CONTENT_URI),capture(contentObserverCapture));  trackDataListener1.onTrackUpdated(track);  trackDataListener2.onTrackUpdated(track);  replay();  trackDataHub.start();  trackDataHub.loadTrack(TRACK_ID);  trackDataHub.registerTrackDataListener(trackDataListener1,EnumSet.of(TrackDataType.TRACKS_TABLE));  trackDataHub.registerTrackDataListener(trackDataListener2,EnumSet.of(TrackDataType.TRACKS_TABLE));  verifyAndReset();  ContentObserver contentObserver=contentObserverCapture.getValue();  expect(myTracksProviderUtils.getTrack(TRACK_ID)).andStubReturn(track);  trackDataListener1.onTrackUpdated(track);  trackDataListener2.onTrackUpdated(track);  replay();  contentObserver.onChange(false);  verifyAndReset();  expect(myTracksProviderUtils.getTrack(TRACK_ID)).andStubReturn(track);  trackDataListener2.onTrackUpdated(track);  replay();  trackDataHub.unregisterTrackDataListener(trackDataListener1);  contentObserver.onChange(false);  verifyAndReset();  dataSource.unregisterContentObserver(contentObserver);  replay();  trackDataHub.unregisterTrackDataListener(trackDataListener2);  contentObserver.onChange(false);  verifyAndReset();}  }
class C{  public boolean isComment(){  return this.type == JBBPTokenType.COMMENT;}  }
class C{  public void reset(EvolutionState state,int thread){  int i, j;  GEPSpecies s=(GEPSpecies)myGEPIndividual.species;  for (i=0; i < genome.length; i++) {    int gene[]=genome[i];    GEPSymbolSet symbolset=s.symbolSet;    gene[0]=symbolset.chooseFunctionSymbol(state,thread);    for (j=1; j < gene.length; j++)     gene[j]=symbolset.chooseFunctionOrTerminalSymbol(state,thread,j,s);  }  if (s.useConstants) {    MersenneTwisterFast rand=state.random[thread];    for (i=0; i < genome.length; i++) {      double constants[]=genomeConstants[i];      int constantPoints[]=genomeDc[i];      int constantsLen=constants.length;      if (s.integerConstants) {        int range=(int)(s.constantsUpperLimit - s.constantsLowerLimit + 1);        for (j=0; j < constantsLen; j++)         constants[j]=rand.nextInt(range) + s.constantsLowerLimit;      } else       for (j=0; j < constantsLen; j++)       constants[j]=getRandomFromLowerToUpper(rand,s.constantsLowerLimit,s.constantsUpperLimit);      for (j=0; j < constantPoints.length; j++)       constantPoints[j]=rand.nextInt(constantsLen);    }  }  parsedGeneExpressions=null;}  }
class C{  protected boolean retreatUnderFire(final Creature creature){  for (  RPEntity attacker : creature.getAttackingRPEntities()) {    if (attacker.canDoRangeAttack(creature,attacker.getMaxRangeForArcher())) {      retreat(creature,attacker);      return true;    }  }  creature.setSpeed(0);  return false;}  }
class C{  @Post public ResetOutput postHandler(CounterPost postData){  ResetOutput output=new ResetOutput();  Option choice=Option.ERROR_BAD_PARAM;  String param1=(String)getRequestAttributes().get("param1");  String param2=(String)getRequestAttributes().get("param2");  String param3=(String)getRequestAttributes().get("param3");  String param4=(String)getRequestAttributes().get("param4");  String moduleName="";  if (param1 == null) {    moduleName="all";    choice=Option.ALL;  } else   if (param1.equals("all")) {    moduleName="all";    choice=Option.ALL;  } else {    moduleName=param1;  }  String counterHierarchy="";  if (param2 != null) {    counterHierarchy+=param2;    if (param3 != null) {      counterHierarchy+="/" + param3;      if (param4 != null) {        counterHierarchy+="/" + param4;      }    }  }  if (!moduleName.equals("all") && counterHierarchy.equals("")) {    boolean isRegistered=debugCounter.containsModuleName(param1);    if (isRegistered) {      choice=Option.ONE_MODULE;    } else {      choice=Option.ERROR_BAD_MODULE_NAME;    }  } else   if (!moduleName.equals("all") && !counterHierarchy.equals("")) {    boolean isRegistered=debugCounter.containsModuleCounterHierarchy(moduleName,counterHierarchy);    if (isRegistered) {      choice=Option.MODULE_COUNTER_HIERARCHY;    } else {      choice=Option.ERROR_BAD_MODULE_COUNTER_NAME;    }  }  boolean reset=false;  boolean turnOnOff=false;  if (postData.getReset() != null && postData.getReset()) {    reset=true;  }  if (postData.getEnable() != null) {    turnOnOff=true;  }switch (choice) {case ALL:    if (reset)     debugCounter.resetAllCounters();  break;case ONE_MODULE:if (reset) debugCounter.resetAllModuleCounters(moduleName);break;case MODULE_COUNTER_HIERARCHY:if (reset) debugCounter.resetCounterHierarchy(moduleName,counterHierarchy); else if (turnOnOff && postData.getEnable()) debugCounter.enableCtrOnDemand(moduleName,counterHierarchy); else if (turnOnOff && !postData.getEnable()) debugCounter.disableCtrOnDemand(moduleName,counterHierarchy);break;case ERROR_BAD_MODULE_NAME:output.error="Module name has no corresponding registered counters";break;case ERROR_BAD_MODULE_COUNTER_NAME:output.error="Counter not registered";break;case ERROR_BAD_PARAM:output.error="Bad param";}return output;}  }
class C{  public boolean isCompatible(){  return compatible;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.FACET__KEY:    return getKey();case GamlPackage.FACET__EXPR:  return getExpr();case GamlPackage.FACET__BLOCK:return getBlock();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void add(Method method){  add(ReflectUtils.getSignature(method),ReflectUtils.getExceptionTypes(method));}  }
class C{  public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  private GlowMetaItem makeMeta(Material material,GlowMetaItem meta){switch (material) {case AIR:    return null;case BOOK_AND_QUILL:case WRITTEN_BOOK:  return new GlowMetaBook(meta);case ENCHANTED_BOOK:return new GlowMetaEnchantedBook(meta);case SKULL_ITEM:return new GlowMetaSkull(meta);case BANNER:return new GlowMetaBanner(meta);case LEATHER_HELMET:case LEATHER_CHESTPLATE:case LEATHER_LEGGINGS:case LEATHER_BOOTS:return new GlowMetaLeatherArmor(meta);case FIREWORK:return new GlowMetaFirework(meta);case FIREWORK_CHARGE:return new GlowMetaFireworkEffect(meta);case POTION:case SPLASH_POTION:case LINGERING_POTION:case TIPPED_ARROW:return new GlowMetaPotion(meta);case MONSTER_EGG:return new GlowMetaSpawn(meta);default :return new GlowMetaItem(meta);}}  }
class C{  public void testNoToElement() throws IOException, ServletException, InvocationTargetException {  NormalRule rule1=new NormalRule();  rule1.setFrom(".*");  Condition condition1=new Condition();  condition1.setType("header");  condition1.setName("accept");  condition1.setValue(".*image/gif.*");  SetAttribute setAttribute1=new SetAttribute();  setAttribute1.setName("imageType");  setAttribute1.setValue("gif");  rule1.addSetAttribute(setAttribute1);  rule1.addCondition(condition1);  rule1.initialise(null);  NormalRule rule2=new NormalRule();  rule2.setFrom(".*");  Condition condition2=new Condition();  condition2.setType("header");  condition2.setName("accept");  condition2.setValue(".*image/jpeg.*");  SetAttribute setAttribute2=new SetAttribute();  setAttribute2.setName("imageType");  setAttribute2.setValue("jpeg");  rule2.addSetAttribute(setAttribute2);  rule2.addCondition(condition2);  rule2.initialise(null);  NormalRule rule3=new NormalRule();  rule3.setFrom(".*");  Condition condition3=new Condition();  condition3.setType("header");  condition3.setName("accept");  condition3.setValue(".*image/png.*");  SetAttribute setAttribute3=new SetAttribute();  setAttribute3.setName("imageType");  setAttribute3.setValue("png");  rule3.addSetAttribute(setAttribute3);  rule3.addCondition(condition3);  rule3.initialise(null);  NormalRule rule4=new NormalRule();  rule4.setFrom(".*");  Condition condition4=new Condition();  condition4.setType("header");  condition4.setName("user-agent");  condition4.setValue("SonyEricssonT68.*");  SetAttribute setAttribute4=new SetAttribute();  setAttribute4.setName("imageType");  setAttribute4.setValue("png");  rule4.addSetAttribute(setAttribute4);  rule4.addCondition(condition4);  rule4.initialise(null);  Conf conf=new Conf();  conf.addRule(rule1);  conf.addRule(rule2);  conf.addRule(rule3);  conf.addRule(rule4);  conf.initialise();  UrlRewriter urlRewriter=new UrlRewriter(conf);  MockRequest request=new MockRequest("/images/my.png");  request.setHeader("accept","image/png,*/*;q=0.5");  RewrittenUrl rewrittenUrl1=urlRewriter.processRequest(request,response);  assertEquals("png",(String)request.getAttribute("imageType"));  assertEquals(null,rewrittenUrl1);}  }
class C{  protected void validate(){  if (!isHelping()) {    validateOnStart();    validateOnStatus();    validateOnStop();  }}  }
class C{  private void writeReport(HttpServletResponse response,ByteArrayOutputStream output) throws ServletException {  try (OutputStream outputStream=response.getOutputStream()){    output.writeTo(outputStream);    outputStream.flush();  } catch (  IOException e) {    LOG.error("Error writing report output",e);    throw new ServletException(e.getMessage(),e);  }}  }
class C{  public ExecutionError(@Nullable Error cause){  super(cause);}  }
class C{  public Commander(final Project project,KeymapManager keymapManager){  this(project,keymapManager,null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void releaseBackupLock(){  getDiskInitFile().unlockForBackup();}  }
class C{  public static <T extends Comparable<T>>boolean assertComparison(T actual,T expected){  boolean ret=false;  if ((expected == null) && (actual == null)) {    ret=true;  } else   if (expected != null) {    ret=expected.compareTo(actual) == 0;  }  return ret;}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  cipher.init(forEncryption,params);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public Xid[] recover(int flags) throws XAException {  if (((flags & TMSTARTRSCAN) == 0) && ((flags & TMENDRSCAN) == 0) && (flags != TMNOFLAGS)) {    throw new XAException(XAException.XAER_INVAL);  }  if ((flags & TMSTARTRSCAN) == 0) {    return new MariaDbXid[0];  }  try {    ResultSet rs=connection.createStatement().executeQuery("XA RECOVER");    ArrayList<MariaDbXid> xidList=new ArrayList<MariaDbXid>();    while (rs.next()) {      int formatId=rs.getInt(1);      int len1=rs.getInt(2);      int len2=rs.getInt(3);      byte[] arr=rs.getBytes(4);      byte[] globalTransactionId=new byte[len1];      byte[] branchQualifier=new byte[len2];      System.arraycopy(arr,0,globalTransactionId,0,len1);      System.arraycopy(arr,len1,branchQualifier,0,len2);      xidList.add(new MariaDbXid(formatId,globalTransactionId,branchQualifier));    }    Xid[] xids=new Xid[xidList.size()];    xidList.toArray(xids);    return xids;  } catch (  SQLException sqle) {    throw mapXaException(sqle);  }}  }
class C{  public void put(int key,float value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      float[] nvalues=new float[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public DatabaseTableConfig(Class<T> dataClass,List<DatabaseFieldConfig> fieldConfigs){  this(dataClass,extractTableName(dataClass),fieldConfigs);}  }
class C{  static boolean isPackageAccess(int modifiers){  return (modifiers & ACCESS_TEST) == 0;}  }
class C{  public static boolean instanceOf(Class<?> objectClass,String typeName,ClassLoader loader){  Class<?> infoClass=loadInfoClass(typeName,loader);  if (infoClass == null)   throw new IllegalArgumentException("Illegal type found in info map (could not load class for specified type)");  return instanceOf(objectClass,infoClass);}  }
class C{  public static boolean isSameMetaClass(MetaClass mc,Object receiver){  return receiver instanceof GroovyObject && mc == ((GroovyObject)receiver).getMetaClass();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public PermissiveX509TrustManager(KeyStore keystore) throws NoSuchAlgorithmException, KeyStoreException {  super();  TrustManagerFactory factory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());  factory.init(keystore);  TrustManager[] trustmanagers=factory.getTrustManagers();  if (trustmanagers.length == 0) {    throw new NoSuchAlgorithmException("no trust managers available");  }  this.defaultTrustManager=(X509TrustManager)trustmanagers[0];}  }
class C{  private void fillResourceType(){  int S_ResourceType_ID=0;  if (m_mAssignment.getS_Resource_ID() != 0) {    String sql="SELECT S_ResourceType_ID FROM S_Resource WHERE S_Resource_ID=?";    S_ResourceType_ID=DB.getSQLValue(null,sql,m_mAssignment.getS_Resource_ID());  }  String sql=MRole.getDefault().addAccessSQL("SELECT S_ResourceType_ID, Name FROM S_ResourceType WHERE IsActive='Y' ORDER BY 2","S_ResourceType",MRole.SQL_NOTQUALIFIED,MRole.SQL_RO);  KeyNamePair defaultValue=null;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    rs=pstmt.executeQuery();    while (rs.next()) {      KeyNamePair pp=new KeyNamePair(rs.getInt(1),rs.getString(2));      if (S_ResourceType_ID == pp.getKey())       defaultValue=pp;      fieldResourceType.addItem(pp);    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (defaultValue != null)   fieldResourceType.setSelectedItem(defaultValue);}  }
class C{  @Override public boolean onUnbind(Intent intent){  permissionsGranted=false;  return super.onUnbind(intent);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return BEGIN_IN_BOTH;case 3:  return OLD_STRING;case 12:return END_IN_BOTH;default :return null;}}  }
class C{  protected Node newNode(){  return new SVGOMFEColorMatrixElement();}  }
class C{  public void testLegacyDoubleSignedZero() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new LegacyDoubleField("value",+0d,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",-0d,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_DOUBLE));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.DOUBLE));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  double v0=searcher.doc(td.scoreDocs[0].doc).getField("value").numericValue().doubleValue();  double v1=searcher.doc(td.scoreDocs[1].doc).getField("value").numericValue().doubleValue();  assertEquals(0,v0,0d);  assertEquals(0,v1,0d);  assertEquals(1,Double.doubleToLongBits(v0) >>> 63);  assertEquals(0,Double.doubleToLongBits(v1) >>> 63);  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  private HashMap<String,Boolean> parseFeature(String optString){  if (optString.equals(NULL)) {    return null;  } else {    HashMap<String,Boolean> map=new HashMap<String,Boolean>();    StringTokenizer features=new StringTokenizer(optString,",");    StringTokenizer option;    while (features.hasMoreElements()) {      option=new StringTokenizer(features.nextToken(),"=");      if (option.hasMoreElements()) {        String key=option.nextToken();        Boolean value=option.nextToken().equals("no") ? Boolean.FALSE : Boolean.TRUE;        map.put(key,value);      }    }    return map;  }}  }
class C{  public UpdateConstraintException(){  super();}  }
class C{  public static String copyValueOf(char[] data,int start,int length){  return new String(data,start,length);}  }
class C{  public void updateAmountCost(){  if (transaction.getMovementType().contains("+")) {    costDetail.setCostAmt(costThisLevel.multiply(transaction.getMovementQty()).abs());    costDetail.setCostAmtLL(costLowLevel.multiply(transaction.getMovementQty()).abs());  }  if (transaction.getMovementType().contains("-")) {    costDetail.setCostAmt(costDetail.getAmt());    costDetail.setCostAmtLL(costDetail.getAmtLL());  }}  }
class C{  private static TransferImageResponse checkTransferImageResponse(TransferImageResponse transferImageResponse) throws RpcException {  logger.info("Checking {}",transferImageResponse);switch (transferImageResponse.getResult()) {case OK:    break;case TRANSFER_IN_PROGRESS:  throw new ImageTransferInProgressException(transferImageResponse.getError());case SYSTEM_ERROR:throw new SystemErrorException(transferImageResponse.getError());default :throw new RpcException(String.format("Unexpected result: %s",transferImageResponse.getResult()));}return transferImageResponse;}  }
class C{  public void mouseDragged(java.awt.event.MouseEvent e){  for (int i=0; i < dndCatchers.size(); i++) {    if (((DefaultDnDCatcher)dndCatchers.get(i)).consume(e))     break;  }}  }
class C{  public Class<?> type(){  if (isClass) {    return (Class<?>)object;  } else {    return object.getClass();  }}  }
class C{  public DocumentoInfo(){}  }
class C{  public static void onEventBegin(final Context context,final String event_id,final String label){  log.onEventBegin(context,event_id,label);}  }
class C{  public ServiceAlreadyExistsException(String message,Throwable cause){  super(message,cause);}  }
class C{  public ExistsRequest(String... indices){  super(indices);}  }
class C{  public Object runSafely(final Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().closeAndWait();  return null;}  }
class C{  public final void testIsSatisfiedFails(){  RegexConstraint regexConstraint=new RegexConstraint(REGEX);  assertFalse(regexConstraint.isSatisfied("abcdefghijkl"));}  }
class C{  public Source<T> withShrinker(Shrink<T> shrink){  return new Source<>(this.prngToValue,shrink,this.asString);}  }
class C{  public static boolean isICUAvailable(){  boolean icu_avail;  try {    Class.forName("com.ibm.icu.text.RuleBasedCollator");    icu_avail=true;  } catch (  Throwable t) {    log.warn("ICU library is not available");    icu_avail=false;  }  return icu_avail;}  }
class C{  public void startSorting() throws CarbonSortKeyAndGroupByException {  LOGGER.info("File based sorting will be used");  if (this.entryCount > 0) {    Object[][] toSort;    toSort=new Object[entryCount][];    System.arraycopy(recordHolderList,0,toSort,0,entryCount);    if (noDictionaryCount > 0) {      Arrays.sort(toSort,new RowComparator(noDictionaryDimnesionColumn,noDictionaryCount));    } else {      Arrays.sort(toSort,new RowComparatorForNormalDims(this.dimColCount));    }    recordHolderList=toSort;    File file=new File(this.tempFileLocation + File.separator + this.tableName+ System.nanoTime()+ CarbonCommonConstants.SORT_TEMP_FILE_EXT);    writeDataTofile(recordHolderList,this.entryCount,file);  }  startFileBasedMerge();  procFiles=null;  this.recordHolderList=null;}  }
class C{  private boolean hasDeprecatedAnnotation(List<JCAnnotation> annotations){  for (List<JCAnnotation> al=annotations; !al.isEmpty(); al=al.tail) {    JCAnnotation a=al.head;    if (a.annotationType.type == syms.deprecatedType && a.args.isEmpty())     return true;  }  return false;}  }
class C{  void flush(){  printStream.flush();}  }
class C{  public ClientCacheFactory addPoolLocator(String host,int port){  getPoolFactory().addLocator(host,port);  return this;}  }
class C{  public String globalInfo(){  return "A dummy stemmer that performs no stemming at all.";}  }
class C{  public Container add(Object constraint,Image img){  return add(constraint,new Label(img));}  }
class C{  public AfterUpdateEvent(@NonNull Context context,@NonNull String eventKey){  this(getApplicationVersion(context),eventKey);}  }
class C{  public boolean isAssumedNullBefore(Unit s,Immediate i){  AnalysisInfo ai=(AnalysisInfo)getFlowBefore(s);  return ai.get(i) == NULL;}  }
class C{  public Set<String> keyNames(String prefix){  Set<String> keys=keyNames();  HashSet<String> subset=new HashSet<String>();  for (  String key : keys) {    if (key != null && key.startsWith(prefix))     subset.add(key);  }  return subset;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateUi(){  boolean isRecording=recordingTrackId != PreferencesUtils.RECORDING_TRACK_ID_DEFAULT;  resetPreference.setEnabled(!isRecording);  resetPreference.setSummary(isRecording ? getString(R.string.settings_not_while_recording) : "");}  }
class C{  public static <T1,T2,T3,T4,T5,T6,R>Function<T6,R> partial6(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final T5 t5,final HexFunction<T1,T2,T3,T4,T5,T6,R> hexFunc){  return null;}  }
class C{  protected void failGet(int k){  try {    jcache(0).get(new TestKey(String.valueOf(k)));    assert false : "p2p marshalling failed, but error response was not sent";  } catch (  CacheException e) {    assert X.hasCause(e,IOException.class);  }}  }
class C{  public boolean isMeasureWithLargestChildEnabled(){  return mUseLargestChild;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  public String toString(){  if (m_filterConfig == null)   return ("WFilter[]");  StringBuffer sb=new StringBuffer("WFilter[");  sb.append(m_filterConfig);  sb.append("]");  return (sb.toString());}  }
class C{  private static File findInOriginalPath(@NotNull String fileBaseName){  String originalPath;  if (SystemInfo.isMac) {    originalPath=System.getenv(PATH_ENV_VAR_NAME);  } else {    originalPath=EnvironmentUtil.getValue(PATH_ENV_VAR_NAME);  }  List<File> exeFiles=doFindExeFilesInPath(originalPath,fileBaseName,true,false,null);  return exeFiles.size() > 0 ? exeFiles.get(0) : null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void registerForceConstraint(ForceConstraint constraint){  constraintRows+=constraint.GetConstraintRows();  constraints.add(constraint);  constraint.addHolonomicConstraints();}  }
class C{  @Override public void remove(PoisonStatus status,StatusList statusList){  statusList.removeInternal(status);}  }
class C{  private void addWorkerFailed(Worker w){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    if (w != null)     workers.remove(w);    decrementWorkerCount();    tryTerminate();  }  finally {    mainLock.unlock();  }}  }
class C{  public long cstime(){  return Long.parseLong(fields[16]);}  }
class C{  public static BinaryBufferedFile create(String name){  return create(name,4096);}  }
class C{  public static int scale(long value){  return (Integer.MAX_VALUE - 2) * (int)Math.ceil((value / (value + 1.0)));}  }
class C{  private static String applySpacePolicy(String in,boolean treatLineFeedAsSpace){  String out=in.replaceAll("\r\n","\n");  out=out.replaceAll(" *\n *","\n");  out=treatLineFeedAsSpace ? out.replaceAll("\n"," ") : out;  out=out.replaceAll("[ \t\\x0B\f\r]+"," ");  return out;}  }
class C{  private void populateAttributes(Session session){  if (session.getAttribute(CITY_NAME) == null) {    session.setAttribute(CITY_NAME,userData.getCity());  }  if (session.getAttribute(STOP_NUMBER) == null) {    session.setAttribute(STOP_NUMBER,userData.getStopId());  }  if (session.getAttribute(REGION_ID) == null) {    session.setAttribute(REGION_ID,userData.getRegionId());  }  if (session.getAttribute(REGION_NAME) == null) {    session.setAttribute(REGION_NAME,userData.getRegionName());  }  if (session.getAttribute(OBA_BASE_URL) == null) {    session.setAttribute(OBA_BASE_URL,userData.getObaBaseUrl());  }  if (session.getAttribute(PREVIOUS_RESPONSE) == null) {    session.setAttribute(PREVIOUS_RESPONSE,userData.getPreviousResponse());  }  if (session.getAttribute(LAST_ACCESS_TIME) == null) {    session.setAttribute(LAST_ACCESS_TIME,userData.getLastAccessTime());  }}  }
class C{  public DockableBubble(final Window owner,final AlignedSide preferredAlignment,final String i18nKey,final String docKey,final JButton[] buttonsToAdd,final Object... arguments){  super(owner,preferredAlignment,i18nKey,docKey,buttonsToAdd,arguments);  if (preferredAlignment != AlignedSide.MIDDLE) {    if (docKey == null) {      throw new IllegalArgumentException("key of Dockable can not be null if Alignment is not MIDDLE");    }  }  super.paint(false);}  }
class C{  public VWSimplifier(Geometry inputGeom){  this.inputGeom=inputGeom;}  }
class C{  private int[] readFlags(ByteBuffer buf) throws IOException {  ISMatTag tag=new ISMatTag(buf);  int[] flags=tag.readToIntArray();  return flags;}  }
class C{  @Override public String routing(){  return this.routing;}  }
class C{  @SuppressWarnings("deprecation") public static void applyLimits(OrbitView view,OrbitViewLimits viewLimits){  if (view == null) {    String message=Logging.getMessage("nullValue.ViewIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewLimits == null) {    String message=Logging.getMessage("nullValue.ViewLimitsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  view.setCenterPosition(limitCenterPosition(view.getCenterPosition(),viewLimits));  view.setHeading(limitHeading(view.getHeading(),viewLimits));  view.setPitch(limitPitch(view.getPitch(),viewLimits));  view.setZoom(limitZoom(view.getZoom(),viewLimits));}  }
class C{  @Override public String toString(){  return Arrays.toString(ids);}  }
class C{  public void onResume(){}  }
class C{  public static boolean isDirectory(File dir){  return dir.exists() && dir.isDirectory();}  }
class C{  public EnumeratedTypeSet(TType t,TypeSetEnvironment typeSetEnvironment){  super(typeSetEnvironment);  Assert.isNotNull(t);  fMembers.add(t);  sCount++;}  }
class C{  public long alloc(final byte buf[],final int size,final IAllocationContext context){  m_allocationWriteLock.lock();  try {    checkContext(context);    final long begin=System.nanoTime();    if (size > (m_maxFixedAlloc - 4)) {      if (size > getMaxBlobSize())       throw new IllegalArgumentException("Allocation request beyond maximum BLOB of " + getMaxBlobSize());      if (log.isTraceEnabled())       log.trace("BLOB ALLOC: " + size);      if (m_storageStats != null) {        m_storageStats.allocateBlob(size);      }      final PSOutputStream psout=PSOutputStream.getNew(this,m_maxFixedAlloc,context);      try {        int i=0;        final int blocks=size / 512;        for (int b=0; b < blocks; b++) {          psout.write(buf,i,512);          i+=512;        }        psout.write(buf,i,size - i);        return psout.save();      } catch (      IOException e) {        throw new RuntimeException("Closed Store?",e);      } finally {        try {          psout.close();        } catch (        IOException ioe) {          log.warn("Unexpected error closing PSOutputStream",ioe);        }      }    }    final int newAddr=alloc(size + 4,context);    if (newAddr == 0)     throw new IllegalStateException("NULL address allocated");    final int chk=ChecksumUtility.getCHK().checksum(buf,size);    final long pa=physicalAddress(newAddr);    try {      m_writeCacheService.write(pa,ByteBuffer.wrap(buf,0,size),chk,true,newAddr);    } catch (    InterruptedException e) {      throw new RuntimeException("Closed Store?",e);    }    final StoreCounters<?> c=(StoreCounters<?>)storeCounters.get().acquire();    try {      final int nwrite=size + 4;      c.nwrites++;      c.bytesWritten+=nwrite;      c.elapsedWriteNanos+=(System.nanoTime() - begin);      if (nwrite > c.maxWriteSize) {        c.maxWriteSize=nwrite;      }    }  finally {      c.release();    }    return newAddr;  }  finally {    m_allocationWriteLock.unlock();  }}  }
class C{  @Override public void onDateSet(DatePicker view,int year,int monthOfYear,int dayOfMonth){  Calendar chosenDate=Calendar.getInstance();  chosenDate.set(Calendar.YEAR,year);  chosenDate.set(Calendar.MONTH,monthOfYear);  chosenDate.set(Calendar.DAY_OF_MONTH,dayOfMonth);  long chosenDateInMillis=chosenDate.getTimeInMillis();  ((FileActivity)getActivity()).getFileOperationsHelper().setExpirationDateToShareViaLink(mFile,chosenDateInMillis);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s == null) ? new Integer(0) : new Integer(s.getSeasonNumber());}  }
class C{  public static final int BuildIntegerLE(byte bytevec[]){  return BuildIntegerLE(bytevec,0);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider03() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  SSLContext sslContext;  for (int i=0; i < validValues.length; i++) {    sslContext=SSLContext.getInstance(validValues[i],defaultProvider);    assertNotNull("Not SSLContext created",sslContext);    assertEquals("Invalid protocol",validValues[i],sslContext.getProtocol());    assertEquals("Invalid provider",defaultProvider,sslContext.getProvider());  }}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  private void tokenizeAndTag(Tagger tagger,Tweet tweet) throws IOException {  tweet.setWordList(tagger.tokenizeAndTag(tweet.getTweetString()));  this.getStems(tweet);}  }
class C{  protected void preRender(){  mGeometry.validateBuffers();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case DomPackage.DOCLET___HAS_LINE_TAG__STRING:    return hasLineTag((String)arguments.get(0));case DomPackage.DOCLET___LINE_TAGS__STRING:  return lineTags((String)arguments.get(0));}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean hasExtensions(){  return extensions != null;}  }
class C{  protected void write(Movie movie,SWFTagTypes movieTagWriter,SWFTagTypes timelineTagWriter) throws IOException {  int depth=instance.getDepth();  if (depth < 0) {    return;  }  if (isRemove) {    timelineTagWriter.tagRemoveObject2(depth);    return;  }  if (!isAlteration) {    Symbol symbol=instance.getSymbol();    int id=symbol.define(movie,timelineTagWriter,movieTagWriter);    int flags=0;    if (clipActions != null && clipActions.length > 0) {      for (int i=0; i < clipActions.length; i++) {        flags|=clipActions[i].getConditions();      }    }    SWFActions acts=timelineTagWriter.tagPlaceObject2(isReplacement,clipDepth,depth,id,matrix,cxform,ratio,name,flags);    if (clipActions != null && clipActions.length > 0) {      for (int i=0; i < clipActions.length; i++) {        acts.start(clipActions[i].getConditions());        acts.blob(clipActions[i].bytes);      }      acts.done();    }  } else {    timelineTagWriter.tagPlaceObject2(true,clipDepth,depth,-1,matrix,cxform,ratio,null,0);  }}  }
class C{  static double checkDouble(double d) throws JSONException {  if (Double.isInfinite(d) || Double.isNaN(d)) {    throw new JSONException("Forbidden numeric value: " + d);  }  return d;}  }
class C{  void emit(char c){  ensure(1);  instruction[lenInstruction++]=c;}  }
class C{  private String selectTableData(Properties properties) throws SQLException {  Connection connection=openConnection();  String driverName=connection.getMetaData().getDatabaseProductName().toLowerCase(Locale.ENGLISH);  String tableName=properties.getProperty(KEY_TABLE_NAME);  String sql=SqlUtil.createSelectStatement(driverName);  sql=String.format(Locale.ENGLISH,sql,tableName,properties.getProperty(KEY_LIMIT));  StringBuilder sb=new StringBuilder();  try {    PreparedStatement preparedStatement=connection.prepareStatement(sql);    preparedStatement.setString(1,properties.getProperty(KEY_DEVICE_ID));    ResultSet resultSet=preparedStatement.executeQuery();    ResultSetMetaData resultSetMetaData=resultSet.getMetaData();    List<String> columnNames=new ArrayList<String>();    for (int i=0; i < resultSetMetaData.getColumnCount(); i++) {      columnNames.add(resultSetMetaData.getColumnName(i + 1));    }    sb.append("[");    while (resultSet.next()) {      sb.append("{");      for (int i=0; i < columnNames.size(); i++) {        String columnName=columnNames.get(i);        Object columnValue=resultSet.getObject(i + 1);        sb.append("\"").append(columnName).append("\"");        sb.append(":");        sb.append("\"").append(columnValue).append("\"");        if (i != (columnNames.size() - 1)) {          sb.append(",");        }      }      sb.append("}");      sb.append(",");    }    int lastIndex=sb.lastIndexOf(",");    if (lastIndex > -1) {      sb.deleteCharAt(lastIndex);    }    sb.append("]");  } catch (  SQLException e) {    throw new SQLException("Unable to select the data for a table with the name [" + tableName + "] from the data base",e);  } finally {    closeConnection(connection);  }  return sb.toString();}  }
class C{  public WebSocketFrame(byte opcode,boolean fin,byte[] payload){  this.opcode=opcode;  this.fin=fin;  this.payload=payload;}  }
class C{  @Override protected void write(DataOutputStream stream) throws Exception {  stream.writeDouble(value);}  }
class C{  public static Months monthsBetween(ReadablePartial start,ReadablePartial end){  if (start instanceof LocalDate && end instanceof LocalDate) {    Chronology chrono=DateTimeUtils.getChronology(start.getChronology());    int months=chrono.months().getDifference(((LocalDate)end).getLocalMillis(),((LocalDate)start).getLocalMillis());    return Months.months(months);  }  int amount=BaseSingleFieldPeriod.between(start,end,ZERO);  return Months.months(amount);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.PACKAGE__MEMBER:    getMember().clear();  return;case TypesPackage.PACKAGE__DOMAIN:setDomain((Domain)null);return;case TypesPackage.PACKAGE__IMPORT:getImport().clear();return;}super.eUnset(featureID);}  }
class C{  public void deselectAll(final boolean shouldFireEvents){  checkWidget();  items.addAll(selection);  final List<DLItem> deselectedItems=new ArrayList<DLItem>();  for (  final DLItem item : selection) {    item.setLastAction(LAST_ACTION.DESELECTION);    deselectedItems.add(item);    if (shouldFireEvents) {      fireSelectionEvent(item);    }  }  fireSelectionChangeEvent(deselectedItems);  selection.clear();  redrawTables();}  }
class C{  public static void multiplyMM(float[] output,int outputOffset,float[] lhs,int lhsOffset,float[] rhs,int rhsOffset){  output[outputOffset + 0]=lhs[lhsOffset + 0] * rhs[rhsOffset + 0] + lhs[lhsOffset + 4] * rhs[rhsOffset + 1] + lhs[lhsOffset + 8] * rhs[rhsOffset + 2] + lhs[lhsOffset + 12] * rhs[rhsOffset + 3];  output[outputOffset + 1]=lhs[lhsOffset + 1] * rhs[rhsOffset + 0] + lhs[lhsOffset + 5] * rhs[rhsOffset + 1] + lhs[lhsOffset + 9] * rhs[rhsOffset + 2] + lhs[lhsOffset + 13] * rhs[rhsOffset + 3];  output[outputOffset + 2]=lhs[lhsOffset + 2] * rhs[rhsOffset + 0] + lhs[lhsOffset + 6] * rhs[rhsOffset + 1] + lhs[lhsOffset + 10] * rhs[rhsOffset + 2] + lhs[lhsOffset + 14] * rhs[rhsOffset + 3];  output[outputOffset + 3]=lhs[lhsOffset + 3] * rhs[rhsOffset + 0] + lhs[lhsOffset + 7] * rhs[rhsOffset + 1] + lhs[lhsOffset + 11] * rhs[rhsOffset + 2] + lhs[lhsOffset + 15] * rhs[rhsOffset + 3];  output[outputOffset + 4]=lhs[lhsOffset + 0] * rhs[rhsOffset + 4] + lhs[lhsOffset + 4] * rhs[rhsOffset + 5] + lhs[lhsOffset + 8] * rhs[rhsOffset + 6] + lhs[lhsOffset + 12] * rhs[rhsOffset + 7];  output[outputOffset + 5]=lhs[lhsOffset + 1] * rhs[rhsOffset + 4] + lhs[lhsOffset + 5] * rhs[rhsOffset + 5] + lhs[lhsOffset + 9] * rhs[rhsOffset + 6] + lhs[lhsOffset + 13] * rhs[rhsOffset + 7];  output[outputOffset + 6]=lhs[lhsOffset + 2] * rhs[rhsOffset + 4] + lhs[lhsOffset + 6] * rhs[rhsOffset + 5] + lhs[lhsOffset + 10] * rhs[rhsOffset + 6] + lhs[lhsOffset + 14] * rhs[rhsOffset + 7];  output[outputOffset + 7]=lhs[lhsOffset + 3] * rhs[rhsOffset + 4] + lhs[lhsOffset + 7] * rhs[rhsOffset + 5] + lhs[lhsOffset + 11] * rhs[rhsOffset + 6] + lhs[lhsOffset + 15] * rhs[rhsOffset + 7];  output[outputOffset + 8]=lhs[lhsOffset + 0] * rhs[rhsOffset + 8] + lhs[lhsOffset + 4] * rhs[rhsOffset + 9] + lhs[lhsOffset + 8] * rhs[rhsOffset + 10] + lhs[lhsOffset + 12] * rhs[rhsOffset + 11];  output[outputOffset + 9]=lhs[lhsOffset + 1] * rhs[rhsOffset + 8] + lhs[lhsOffset + 5] * rhs[rhsOffset + 9] + lhs[lhsOffset + 9] * rhs[rhsOffset + 10] + lhs[lhsOffset + 13] * rhs[rhsOffset + 11];  output[outputOffset + 10]=lhs[lhsOffset + 2] * rhs[rhsOffset + 8] + lhs[lhsOffset + 6] * rhs[rhsOffset + 9] + lhs[lhsOffset + 10] * rhs[rhsOffset + 10] + lhs[lhsOffset + 14] * rhs[rhsOffset + 11];  output[outputOffset + 11]=lhs[lhsOffset + 3] * rhs[rhsOffset + 8] + lhs[lhsOffset + 7] * rhs[rhsOffset + 9] + lhs[lhsOffset + 11] * rhs[rhsOffset + 10] + lhs[lhsOffset + 15] * rhs[rhsOffset + 11];  output[outputOffset + 12]=lhs[lhsOffset + 0] * rhs[rhsOffset + 12] + lhs[lhsOffset + 4] * rhs[rhsOffset + 13] + lhs[lhsOffset + 8] * rhs[rhsOffset + 14] + lhs[lhsOffset + 12] * rhs[rhsOffset + 15];  output[outputOffset + 13]=lhs[lhsOffset + 1] * rhs[rhsOffset + 12] + lhs[lhsOffset + 5] * rhs[rhsOffset + 13] + lhs[lhsOffset + 9] * rhs[rhsOffset + 14] + lhs[lhsOffset + 13] * rhs[rhsOffset + 15];  output[outputOffset + 14]=lhs[lhsOffset + 2] * rhs[rhsOffset + 12] + lhs[lhsOffset + 6] * rhs[rhsOffset + 13] + lhs[lhsOffset + 10] * rhs[rhsOffset + 14] + lhs[lhsOffset + 14] * rhs[rhsOffset + 15];  output[outputOffset + 15]=lhs[lhsOffset + 3] * rhs[rhsOffset + 12] + lhs[lhsOffset + 7] * rhs[rhsOffset + 13] + lhs[lhsOffset + 11] * rhs[rhsOffset + 14] + lhs[lhsOffset + 15] * rhs[rhsOffset + 15];}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String def=getString(stack);  String s=getString(stack);  return (stack.getUIMgr() != null) ? stack.getUIMgr().get(s,def) : Sage.get(s,def);}  }
class C{  public SnapshotImpl saveMachine(String namespace,String workspaceId,String machineId) throws NotFoundException, ServerException, ConflictException {  try (StripedLocks.ReadLock lock=stripedLocks.acquireReadLock(workspaceId)){    WorkspaceState workspaceState=workspaces.get(workspaceId);    if (workspaceState == null || !(workspaceState.status == SNAPSHOTTING || workspaceState.status == RUNNING)) {      throw new ConflictException(format("Environment of workspace '%s' is not running or snapshotting",workspaceId));    }  }   return environmentEngine.saveSnapshot(namespace,workspaceId,machineId);}  }
class C{  void init(AccessibilityEvent event){  super.init(event);  mEventType=event.mEventType;  mMovementGranularity=event.mMovementGranularity;  mAction=event.mAction;  mEventTime=event.mEventTime;  mPackageName=event.mPackageName;}  }
class C{  private static void printSynchronizersInfo(LockInfo[] syncs,GridStringBuilder sb){  sb.a("    Locked synchronizers:");  for (  LockInfo info : syncs)   sb.a(NL).a("        ").a(info);}  }
class C{  protected ChannelImpl(){  super();}  }
class C{  public DocumentFragment rtree(){  return null;}  }
class C{  public static Date[] constructDateRange(final Date fromDate,final Date toDate){  final Date[] dates=new Date[2];  final Calendar calfrom=Calendar.getInstance();  calfrom.setTime(fromDate);  calfrom.set(Calendar.HOUR,0);  calfrom.set(Calendar.MINUTE,0);  calfrom.set(Calendar.SECOND,0);  calfrom.set(Calendar.AM_PM,Calendar.AM);  dates[0]=calfrom.getTime();  final Calendar calto=Calendar.getInstance();  calto.setTime(toDate);  calto.set(Calendar.HOUR,0);  calto.set(Calendar.MINUTE,0);  calto.set(Calendar.SECOND,0);  calto.add(Calendar.DAY_OF_MONTH,1);  dates[1]=calto.getTime();  return dates;}  }
class C{  public AsyncHttpClient(AsyncRequestExecutorFactory factory,String baseUrl){  this(factory,baseUrl,new BasicRequestHandler(){  });}  }
class C{  public int state(){  return state;}  }
class C{  public DTMIterator sortNodes(XPathContext xctxt,Vector keys,DTMIterator sourceNodes) throws TransformerException {  NodeSorter sorter=new NodeSorter(xctxt);  sourceNodes.setShouldCacheNodes(true);  sourceNodes.runTo(-1);  xctxt.pushContextNodeList(sourceNodes);  try {    sorter.sort(sourceNodes,keys,xctxt);    sourceNodes.setCurrentPos(0);  }  finally {    xctxt.popContextNodeList();  }  return sourceNodes;}  }
class C{  public static void addFooter(HttpServletRequest request,HttpServletResponse response,HttpServlet servlet,body body){  body.addElement(new hr());  body.addElement(new comment(" --- Footer Start --- "));  p footer=new p();  footer.addElement(org.compiere.Adempiere.DATE_VERSION + ": ");  footer.addElement(new a("javascript:diag_window();","Window Info"));  footer.addElement(" - ");  footer.addElement(new a("javascript:parent.resizeFrame('5,*');","Menu"));  footer.addElement(" - ");  footer.addElement(new a("javascript:diag_navigator();","Browser Info"));  footer.addElement(" - ");  footer.addElement(new a("javascript:diag_request();","Request Info"));  footer.addElement(" - ");  footer.addElement(new a("javascript:diag_document();","Document Info"));  footer.addElement(" - ");  footer.addElement(new a("javascript:diag_form();","Form Info"));  footer.addElement(" - ");  footer.addElement(new a("javascript:toggle('DEBUG');","Servlet Info"));  footer.addElement(" - ");  footer.addElement(new a("javascript:diag_source();","Show Source"));  footer.addElement("\n");  body.addElement(footer);  body.addElement(new br());  body.addElement(getServletInfo(request,response,servlet));  body.addElement(new script("hide('DEBUG');"));  body.addElement(new comment(" --- Footer End --- "));}  }
class C{  public void focusGained(FocusEvent e){  ((FocusListener)a).focusGained(e);  ((FocusListener)b).focusGained(e);}  }
class C{  @NonNull public IconifyInitializer with(@NonNull IconFontDescriptor iconFontDescriptor){  Iconify.addIconFontDescriptor(iconFontDescriptor);  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:36.478 -0500",hash_original_method="F17082A305780CE778B93F20A20D0318",hash_generated_method="328E649DB95D7BCD75AD520B7DB513E8") public void putParcelable(String key,Parcelable value){  unparcel();  mMap.put(key,value);  mFdsKnown=false;}  }
class C{  public boolean isReadable(long arc){switch ((int)arc) {case 33:case 32:case 31:case 133:case 132:case 131:case 13:case 12:case 11:case 10:case 112:case 111:case 110:case 5:case 4:case 3:case 2:case 23:case 22:case 21:    return true;default :  break;}return false;}  }
class C{  public void append(final char[] b,final int off,final int len){  if (b == null) {    return;  }  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) < 0)|| ((off + len) > b.length)) {    throw new IndexOutOfBoundsException("off: " + off + " len: "+ len+ " b.length: "+ b.length);  }  if (len == 0) {    return;  }  final int oldlen=this.len;  final int newlen=oldlen + len;  if (newlen > this.buffer.length) {    expand(newlen);  }  for (int i1=off, i2=oldlen; i2 < newlen; i1++, i2++) {    this.buffer[i2]=(byte)b[i1];  }  this.len=newlen;}  }
class C{  public GraphPropertiesAction(GraphWorkbench workbench){  super("Graph Properties");  this.workbench=workbench;}  }
class C{  public void rgb2yuv(int r,int g,int b,int[] yuv){  int y=(int)(0.299 * r + 0.587 * g + 0.114 * b);  int u=(int)((b - y) * 0.492f);  int v=(int)((r - y) * 0.877f);  yuv[0]=y;  yuv[1]=u;  yuv[2]=v;}  }
class C{  public static String decode(final String str,final String charsetName) throws UnsupportedEncodingException {  return decode(new String(str.getBytes(charsetName),"UTF-8"));}  }
class C{  static void appendModeInfo(Mode mode,BitArray bits){  bits.appendBits(mode.getBits(),4);}  }
class C{  private void sendUpdate(JSONObject obj,boolean keepCallback,PluginResult.Status status){  if (callbackContext != null) {    PluginResult result=new PluginResult(status,obj);    result.setKeepCallback(keepCallback);    callbackContext.sendPluginResult(result);    if (!keepCallback) {      callbackContext=null;    }  }}  }
class C{  public void sendWithAttachment(String subject,String textBody,String attachmentType,String attachmentName,InputStream is){  try {    MimeMessage msg=new MimeMessage(getSession());    if (_from.length > 0)     msg.addFrom(_from);    msg.addRecipients(RecipientType.TO,_to);    if (subject != null)     msg.setSubject(subject);    MimeMultipart multipart=new MimeMultipart();    MimeBodyPart textBodyPart=new MimeBodyPart();    textBodyPart.setText(textBody);    multipart.addBodyPart(textBodyPart);    ByteArrayOutputStream bos=new ByteArrayOutputStream();    TempBuffer tb=TempBuffer.create();    byte[] buffer=tb.buffer();    int len;    while ((len=is.read(buffer,0,buffer.length)) >= 0) {      bos.write(buffer,0,len);    }    bos.close();    byte[] content=bos.toByteArray();    TempBuffer.free(tb);    DataSource dataSource=new ByteArrayDataSource(content,attachmentType);    MimeBodyPart pdfBodyPart=new MimeBodyPart();    pdfBodyPart.setDataHandler(new DataHandler(dataSource));    pdfBodyPart.setFileName(attachmentName);    multipart.addBodyPart(pdfBodyPart);    msg.setContent(multipart);    send(msg);  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isUILocked(){  return m_isLocked;}  }
class C{  public static boolean isValidJavaEncoding(String javaEncoding){  if (javaEncoding != null) {    int length=javaEncoding.length();    if (length > 0) {      for (int i=1; i < length; i++) {        char c=javaEncoding.charAt(i);        if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public void notifyTasks(){  if (tracker.shouldInterruptTask()) {    for (    Thread t : threadMap.values()) {      t.interrupt();    }  }}  }
class C{  public void writeI64(long i64) throws TException {  writeVarint64(longToZigzag(i64));}  }
class C{  public CUevent(){}  }
class C{  public Solve(){  super();}  }
class C{  static ComputedDayOfField ofDayOfWeekField(WeekFields weekDef){  return new ComputedDayOfField("DayOfWeek",weekDef,DAYS,WEEKS,DAY_OF_WEEK_RANGE);}  }
class C{  public boolean isRevoked(Certificate cert){  if (!cert.getType().equals("X.509")) {    throw new RuntimeException("X.509 CRL used with non X.509 Cert");  }  TBSCertList.CRLEntry[] certs=c.getRevokedCertificates();  X500Name caName=c.getIssuer();  if (certs != null) {    BigInteger serial=((X509Certificate)cert).getSerialNumber();    for (int i=0; i < certs.length; i++) {      if (isIndirect && certs[i].hasExtensions()) {        Extension currentCaName=certs[i].getExtensions().getExtension(Extension.certificateIssuer);        if (currentCaName != null) {          caName=X500Name.getInstance(GeneralNames.getInstance(currentCaName.getParsedValue()).getNames()[0].getName());        }      }      if (certs[i].getUserCertificate().getValue().equals(serial)) {        X500Name issuer;        if (cert instanceof X509Certificate) {          issuer=X500Name.getInstance(((X509Certificate)cert).getIssuerX500Principal().getEncoded());        } else {          try {            issuer=org.bouncycastle.asn1.x509.Certificate.getInstance(cert.getEncoded()).getIssuer();          } catch (          CertificateEncodingException e) {            throw new RuntimeException("Cannot process certificate");          }        }        if (!caName.equals(issuer)) {          return false;        }        return true;      }    }  }  return false;}  }
class C{  @Override public boolean checkPermission(Principal user,java.security.acl.Permission perm){  for (Enumeration<AclEntry> e=entryList.elements(); e.hasMoreElements(); ) {    AclEntry ent=e.nextElement();    if (ent.getPrincipal().equals(user))     if (ent.checkPermission(perm))     return true;  }  return false;}  }
class C{  public ScaleAndIndex index(int index){  return new ScaleAndIndex(scale,index);}  }
class C{  public static void openBrowser(String url){  lastUrl=url;}  }
class C{  public int randomIndexChoice(List<Integer> weights,Set<Integer> omitIndices){  int result=0, index;  double maxKey=0.0;  double u, key;  int weight;  for (ListIterator<Integer> it=weights.listIterator(); it.hasNext(); ) {    index=it.nextIndex();    weight=it.next();    if (omitIndices.contains(index))     continue;    u=random.nextDouble();    key=Math.pow(u,(1.0 / weight));    if (key > maxKey) {      maxKey=key;      result=index;    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:13:48.143 -0400",hash_original_method="D511A82312BD30DBAF2B8F418361AEBA",hash_generated_method="AEDAC4259A10A308D4B16FB1A50BECBB") public WaveHeader(short format,short numChannels,int sampleRate,short bitsPerSample,int numBytes){  mFormat=format;  mSampleRate=sampleRate;  mNumChannels=numChannels;  mBitsPerSample=bitsPerSample;  mNumBytes=numBytes;}  }
class C{  @Deprecated public void onFailure(int statusCode,Header[] headers,Throwable error,String content){  onFailure(statusCode,error,content);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean isLeaf(Constituent c){  return c.getOutgoingRelations().size() == 0;}  }
class C{  public void testPropagationDualSync() throws Exception {  mode=DUAL_SYNC;  checkPropagation();}  }
class C{  public void deleteVolume(String instanceId) throws StorageCenterAPIException {  ScVolume vol=getVolume(instanceId);  if (vol == null) {    LOG.warn("Volume delete request for {}, volume not found. Assuming deleted.",instanceId);    return;  }  RestResult rr=restClient.delete(String.format("StorageCenter/ScVolume/%s",instanceId));  if (!checkResults(rr)) {    String msg=String.format("Error deleting volume %s",instanceId);    LOG.error(msg);    throw new StorageCenterAPIException(msg);  }}  }
class C{  public Lint augment(Attribute.Compound attr){  return augmentor.augment(this,attr);}  }
class C{  public JniStream(JniSocketImpl socket){  _socket=socket;  Objects.requireNonNull(socket);}  }
class C{  @Override public int read(final byte[] b,final int off,final int len) throws IOException {  int l=-1;  if (isReadAllowed()) {    l=super.read(b,off,len);    checkClose(l);  }  return l;}  }
class C{  protected void buildGrid(Relation<V> relation,int numcells,double[] offset){  grid=new TLongObjectHashMap<ModifiableDBIDs>(numcells >>> 2);  for (DBIDIter it=relation.iterDBIDs(); it.valid(); it.advance()) {    V obj=relation.get(it);    insertIntoGrid(it,obj,0,0);  }}  }
class C{  @SuppressWarnings("fallthrough") private void parse() throws SAXException, IOException {  init();  try {    mHandCont.setDocumentLocator(this);    mHandCont.startDocument();    if (mPh != PH_MISC_DTD) {      mPh=PH_MISC_DTD;    }    int evt=EV_NULL;    do {      wsskip();switch (evt=step()) {case EV_ELM:case EV_ELMS:        mPh=PH_DOCELM;      break;case EV_COMM:case EV_PI:    break;case EV_DTD:  if (mPh >= PH_DTD_MISC) {    panic(FAULT);  }mPh=PH_DTD_MISC;break;default :panic(FAULT);}} while (mPh < PH_DOCELM);do {switch (evt) {case EV_ELM:case EV_ELMS:if (mIsNSAware == true) {mHandCont.startElement(mElm.value,mElm.name,"",mAttrs);} else {mHandCont.startElement("","",mElm.name,mAttrs);}if (evt == EV_ELMS) {evt=step();break;}case EV_ELME:if (mIsNSAware == true) {mHandCont.endElement(mElm.value,mElm.name,"");} else {mHandCont.endElement("","",mElm.name);}while (mPref.list == mElm) {mHandCont.endPrefixMapping(mPref.name);mPref=del(mPref);}mElm=del(mElm);if (mElm == null) {mPh=PH_DOCELM_MISC;} else {evt=step();}break;case EV_TEXT:case EV_WSPC:case EV_CDAT:case EV_COMM:case EV_PI:case EV_ENT:evt=step();break;default :panic(FAULT);}} while (mPh == PH_DOCELM);do {if (wsskip() == EOS) {break;}switch (step()) {case EV_COMM:case EV_PI:break;default :panic(FAULT);}} while (mPh == PH_DOCELM_MISC);mPh=PH_AFTER_DOC;} catch (SAXException saxe) {throw saxe;}catch (IOException ioe) {throw ioe;}catch (RuntimeException rte) {throw rte;}catch (Exception e) {panic(e.toString());} finally {mHandCont.endDocument();cleanup();}}  }
class C{  @Override public void updateSelectedExtend(Collection<GraphNode> extension){  selectedNodes.extendSelection(extension);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected Object[] initializeRoots(){  Map<String,Map<String,Set<MethodModel>>> infoFlowSummaryMap=getSpec().getInfoFlowSummaryMap();  if (infoFlowSummaryMap.isEmpty())   return NO_CHILDREN;  List<Object> roots=new ArrayList<Object>();  for (  String source : infoFlowSummaryMap.keySet()) {    Map<String,Set<MethodModel>> sinkMap=infoFlowSummaryMap.get(source);    for (    String sink : sinkMap.keySet()) {      SourceSinkPair sourceSinkPair=new SourceSinkPair(source,sink);      TreeElement<SourceSinkPair,MethodModel> root=new TreeElement<SourceSinkPair,MethodModel>(sourceSinkPair.toString(),sourceSinkPair,MethodModel.class);      Set<MethodModel> methods=sinkMap.get(sink);      for (      MethodModel method : methods) {        TreeElement<MethodModel,Object> methElement=new TreeElement<MethodModel,Object>(method.toString(),method,Object.class);        root.addChild(methElement);      }      roots.add(root);    }  }  return roots.toArray();}  }
class C{  public void start(@NonNull Activity activity,int requestCode){  activity.startActivityForResult(getIntent(activity),requestCode);}  }
class C{  @Override public int hashCode(){  int result=0;  Iterator<?> it=iterator();  while (it.hasNext()) {    Object next=it.next();    result+=next == null ? 0 : next.hashCode();  }  return result;}  }
class C{  public PaymentSpinnerAdapter(Context context,List<Payment> payments){  super(context,android.R.layout.simple_spinner_item,payments);  this.context=context;  this.payments=payments;  layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:29.139 -0500",hash_original_method="ECA3C93288FC3A8841FE238CFCF9AD1A",hash_generated_method="97D8855B31C45A83D215E7DC34734208") public CharSequence loadDescription(PackageManager pm) throws NotFoundException {  String packageName=mService.resolvePackageName;  ApplicationInfo applicationInfo=null;  if (packageName == null) {    packageName=mService.serviceInfo.packageName;    applicationInfo=mService.serviceInfo.applicationInfo;  }  if (mService.serviceInfo.descriptionRes != 0) {    return pm.getText(packageName,mService.serviceInfo.descriptionRes,applicationInfo);  }  if (mDescriptionResource <= 0)   throw new NotFoundException();  return pm.getText(packageName,mDescriptionResource,mService.serviceInfo.applicationInfo);}  }
class C{  public EventReader provide(InputStream source) throws Exception {  return provide(factory.createXMLEventReader(source));}  }
class C{  public void unread(char cbuf[],int off,int len) throws IOException {synchronized (lock) {    ensureOpen();    if (len > pos)     throw new IOException("Pushback buffer overflow");    pos-=len;    System.arraycopy(cbuf,off,buf,pos,len);  }}  }
class C{  protected final Class<?> defineClass(String className,byte[] classRep,int offset,int length) throws ClassFormatError {  throw new UnsupportedOperationException("can't load this type of class file");}  }
class C{  public static VMRequest highFixedSize(int mb){  if (VM.HEAP_LAYOUT_64BIT) {    return common64Bit(true);  }  return new VMRequest(REQUEST_EXTENT,Address.zero(),Word.fromIntSignExtend(mb).lsh(LOG_BYTES_IN_MBYTE).toExtent(),0f,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:13.126 -0500",hash_original_method="12C4CCCD01DBAE6BF230314E9D5755CB",hash_generated_method="5E8DFC3B6C3D67D7793D9B0AC2C81A2F") public void cancel(){  mOriginHandler.sendMessage(mOriginHandler.obtainMessage(HANDLE_RESPONSE,0,0,mLoadListener));}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){}  }
class C{  private void updateAperture(int newValue,long now){  int previous=targetAperture;  targetAperture=newValue;  targetAperture=Math.max(minAperture,targetAperture);  int maxAperture=Math.min(this.maxAperture,activeSockets.size() + activeFactories.size());  targetAperture=Math.min(maxAperture,targetAperture);  lastApertureRefresh=now;  pendings.reset((minPendings + maxPendings) / 2);  if (targetAperture != previous) {    logger.debug("Current pending={}, new target={}, previous target={}",pendings.value(),targetAperture,previous);  }}  }
class C{  public Builder autoCompactFillRate(int percent){  return set("autoCompactFillRate",percent);}  }
class C{  private int yTransform(int y){  return (m_extent.height - (m_localGraphicsState.getYOffset() + y));}  }
class C{  private Connection openConnection() throws SQLException {  Connection connection=null;  try {    connection=dataSource.getConnection();  } catch (  SQLException e) {    throw new SQLException("Unable to open a connection to the data source",e);  }  return connection;}  }
class C{  public boolean isSetParagraphId(){  return this.paragraphId != null;}  }
class C{  public static boolean isBranch(int opcode){  byte[] operands=MEANING_OF_OPERANDS[opcode];  return operands.length > 0 && operands[0] == M_BR;}  }
class C{  public MReplicationLog(Properties ctx,int AD_Replication_Run_ID,int AD_ReplicationTable_ID,String P_Msg,String trxName){  super(ctx,0,trxName);  setAD_Replication_Run_ID(AD_Replication_Run_ID);  setAD_ReplicationTable_ID(AD_ReplicationTable_ID);  setIsReplicated(false);  setP_Msg(P_Msg);}  }
class C{  public BigramCount(){}  }
class C{  private static double basinAngle(AdvancingFrontNode node){  double ax=node.point.getX() - node.next.next.point.getX();  double ay=node.point.getY() - node.next.next.point.getY();  return Math.atan2(ay,ax);}  }
class C{  private static void lay64bits(byte[] array,int index,long value){  for (int i=0; i < 8; i++) {    array[index + i]=(byte)(value >> (i * 8));  }}  }
class C{  private DataType(Class<?> primitive,Class<?> reference){  this.primitive=primitive;  this.reference=reference;}  }
class C{  public int countLinesInFile(String filename) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(filename));  try {    byte[] c=new byte[1024];    int count=0;    int readChars=0;    while ((readChars=is.read(c)) != -1) {      for (int i=0; i < readChars; ++i) {        if (c[i] == '\n') {          ++count;        }      }    }    return count;  }  finally {    is.close();  }}  }
class C{  @Override public void close() throws Exception {  EclipseStarter.shutdown();}  }
class C{  public void run(){  if (mMenuBeingLongpressed) {    setChildrenCaptionMode(!mLastChildrenCaptionMode);  } else {    mMenuBeingLongpressed=true;    setCycleShortcutCaptionMode(true);  }  postDelayed(this,ITEM_CAPTION_CYCLE_DELAY);}  }
class C{  public static void updateTIBEntry(RVMClass klass,RVMMethod m){  TIB tib=klass.getTypeInformationBlock();  if (VM.BuildForIMTInterfaceInvocation) {    RVMMethod[] map=klass.noIMTConflictMap;    if (map != null) {      for (int i=0; i < IMT_METHOD_SLOTS; i++) {        if (map[i] == m) {          IMT imt=tib.getImt();          imt.set(i,m.getCurrentEntryCodeArray());          return;        }      }    }  } else   if (VM.BuildForITableInterfaceInvocation) {    if (tib.getITableArray() != null) {      ITableArray iTables=tib.getITableArray();      Atom name=m.getName();      Atom desc=m.getDescriptor();      for (int i=0; i < iTables.length(); i++) {        ITable iTable=iTables.get(i);        if (iTable != null) {          RVMClass I=iTable.getInterfaceClass();          RVMMethod[] interfaceMethods=I.getDeclaredMethods();          for (          RVMMethod im : interfaceMethods) {            if (im.getName() == name && im.getDescriptor() == desc) {              iTable.set(getITableIndex(I,name,desc),m.getCurrentEntryCodeArray());            }          }        }      }    }  }}  }
class C{  public GenericEntry updateSSOSettings(GenericEntry entry) throws AppsForYourDomainException, IOException, ServiceException {  return update(new URL(ssoSettingsUrl),entry);}  }
class C{  private Converter create(Class type) throws Exception {  Converter converter=binder.lookup(type);  if (converter != null) {    cache.cache(type,converter);  }  return converter;}  }
class C{  public void print(){  System.out.print("[");  for (int i=0; i < this.size(); i++) {    System.out.print(this.get(i));    if (i < this.size() - 1) {      System.out.print("; ");    }  }  System.out.println("]");}  }
class C{  private UTMCoord convertMGRSToUTM(String MGRSString){  double scaled_min_northing;  double grid_easting;  double grid_northing;  double temp_grid_northing=0.0;  double fabs_grid_northing=0.0;  double latitude=0.0;  double longitude=0.0;  double divisor=1.0;  long error_code=MGRS_NO_ERROR;  String hemisphere=AVKey.NORTH;  double easting=0;  double northing=0;  UTMCoord UTM=null;  MGRSComponents MGRS=breakMGRSString(MGRSString);  if (MGRS == null)   error_code|=MGRS_STRING_ERROR; else {    if (error_code == MGRS_NO_ERROR) {      if ((MGRS.latitudeBand == LETTER_X) && ((MGRS.zone == 32) || (MGRS.zone == 34) || (MGRS.zone == 36)))       error_code|=MGRS_STRING_ERROR; else {        if (MGRS.latitudeBand < LETTER_N)         hemisphere=AVKey.SOUTH; else         hemisphere=AVKey.NORTH;        getGridValues(MGRS.zone);        if ((MGRS.squareLetter1 < ltr2_low_value) || (MGRS.squareLetter1 > ltr2_high_value) || (MGRS.squareLetter2 > LETTER_V))         error_code|=MGRS_STRING_ERROR;        if (error_code == MGRS_NO_ERROR) {          grid_northing=(double)(MGRS.squareLetter2) * ONEHT;          grid_easting=(double)((MGRS.squareLetter1) - ltr2_low_value + 1) * ONEHT;          if ((ltr2_low_value == LETTER_J) && (MGRS.squareLetter1 > LETTER_O))           grid_easting=grid_easting - ONEHT;          if (MGRS.squareLetter2 > LETTER_O)           grid_northing=grid_northing - ONEHT;          if (MGRS.squareLetter2 > LETTER_I)           grid_northing=grid_northing - ONEHT;          if (grid_northing >= TWOMIL)           grid_northing=grid_northing - TWOMIL;          error_code=getLatitudeBandMinNorthing(MGRS.latitudeBand);          if (error_code == MGRS_NO_ERROR) {            grid_northing=grid_northing - false_northing;            if (grid_northing < 0.0)             grid_northing+=TWOMIL;            grid_northing+=northing_offset;            if (grid_northing < min_northing)             grid_northing+=TWOMIL;            easting=grid_easting + MGRS.easting;            northing=grid_northing + MGRS.northing;            try {              UTM=UTMCoord.fromUTM(MGRS.zone,hemisphere,easting,northing,globe);              latitude=UTM.getLatitude().radians;              divisor=Math.pow(10.0,MGRS.precision);              error_code=getLatitudeRange(MGRS.latitudeBand);              if (error_code == MGRS_NO_ERROR) {                if (!(((south - DEG_TO_RAD / divisor) <= latitude) && (latitude <= (north + DEG_TO_RAD / divisor))))                 error_code|=MGRS_LAT_WARNING;              }            } catch (            Exception e) {              error_code=MGRS_UTM_ERROR;            }          }        }      }    }  }  last_error=error_code;  if (error_code == MGRS_NO_ERROR || error_code == MGRS_LAT_WARNING)   return UTM;  return null;}  }
class C{  private void addField(String fieldname,String fieldvalue){  String decodedfieldname=fieldname;  String decodedfieldvalue=fieldvalue;  if (magnifySearchLogger.isLoggable(Level.FINER))   magnifySearchLogger.finer("RequiredFields():adecodedfieldnameddField: decodedfieldname=" + decodedfieldname + ", decodedfieldvalue= "+ decodedfieldvalue);  fieldnames.add(fieldname);  fieldvalues.add(fieldvalue);}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof BasicPermission))   return false;  BasicPermission bp=(BasicPermission)permission;  if (bp.getClass() != permClass)   return false;  if (all_allowed)   return true;  String path=bp.getCanonicalName();  Permission x;synchronized (this) {    x=perms.get(path);  }  if (x != null) {    return x.implies(permission);  }  int last, offset;  offset=path.length() - 1;  while ((last=path.lastIndexOf(".",offset)) != -1) {    path=path.substring(0,last + 1) + "*";synchronized (this) {      x=perms.get(path);    }    if (x != null) {      return x.implies(permission);    }    offset=last - 1;  }  return false;}  }
class C{  protected BlockSnapshot prepareSnapshotFromVolume(Volume volume,String snapshotName,Volume targetVolume,int index,String snapshotType,boolean isInApplication){  BlockSnapshot snapshot=new BlockSnapshot();  snapshot.setId(URIUtil.createId(BlockSnapshot.class));  URI cgUri=null;  URIQueryResultList queryResults=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeByAssociatedVolumesConstraint(volume.getId().toString()),queryResults);  if (queryResults.iterator().hasNext()) {    Volume sourceVplexVolume=_dbClient.queryObject(Volume.class,queryResults.iterator().next());    cgUri=sourceVplexVolume.getConsistencyGroup();    snapshot.setProject(new NamedURI(sourceVplexVolume.getProject().getURI(),snapshotName));  } else {    cgUri=volume.getConsistencyGroup();    snapshot.setProject(new NamedURI(volume.getProject().getURI(),snapshotName));  }  if (cgUri != null) {    snapshot.setConsistencyGroup(cgUri);  }  snapshot.setSourceNativeId(volume.getNativeId());  snapshot.setParent(new NamedURI(volume.getId(),snapshotName));  String modifiedSnapshotName=snapshotName;  if (!snapshotType.equalsIgnoreCase(TechnologyType.RP.toString()) && isInApplication) {    modifiedSnapshotName=modifiedSnapshotName + "-" + volume.getReplicationGroupInstance()+ "-"+ index;  } else   if (!snapshotType.equalsIgnoreCase(TechnologyType.RP.toString())) {    modifiedSnapshotName=modifiedSnapshotName + "-" + index;  }  if (targetVolume != null && snapshotType.equalsIgnoreCase(TechnologyType.RP.toString())) {    VirtualArray targetVarray=_dbClient.queryObject(VirtualArray.class,targetVolume.getVirtualArray());    modifiedSnapshotName=modifiedSnapshotName + "-" + targetVarray.getLabel();  }  snapshot.setLabel(modifiedSnapshotName);  snapshot.setStorageController(volume.getStorageController());  snapshot.setSystemType(volume.getSystemType());  snapshot.setVirtualArray(volume.getVirtualArray());  snapshot.setProtocol(new StringSet());  snapshot.getProtocol().addAll(volume.getProtocol());  snapshot.setSnapsetLabel(ResourceOnlyNameGenerator.removeSpecialCharsForName(snapshotName,SmisConstants.MAX_SNAPSHOT_NAME_LENGTH));  return snapshot;}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (BuildConfig.DEBUG) {      Log.d(TAG,"Memory cache cleared");    }  }synchronized (mDiskCacheLock) {    mDiskCacheStarting=true;    if (mDiskLruCache != null && !mDiskLruCache.isClosed()) {      try {        mDiskLruCache.delete();        if (BuildConfig.DEBUG) {          Log.d(TAG,"Disk cache cleared");        }      } catch (      IOException e) {        Log.e(TAG,"clearCache - " + e);      }      mDiskLruCache=null;      initDiskCache();    }  }}  }
class C{  public boolean isDir(){  return isDir;}  }
class C{  public void removeData(int i){  if (i > available) {    throw new IllegalStateException("Cannot remove " + i + " bytes, only got "+ available);  }  available-=i;  skipped+=i;}  }
class C{  public long hash(byte[] key,byte[] data){  initialize(key);  for (int i=0; i < data.length; i++) {    updateHash(data[i]);  }  return finish();}  }
class C{  public static String utf8BytesToString(byte[] bytes,int start,int length){  if (tempBuffer == null || tempBuffer.length < length) {    tempBuffer=new char[length];  }  char[] chars=tempBuffer;  int outAt=0;  for (int at=start; length > 0; ) {    int v0=bytes[at] & 0xFF;    char out;switch (v0 >> 4) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:{        length--;        if (v0 == 0) {          return throwBadUtf8(v0,at);        }        out=(char)v0;        at++;        break;      }case 0x0c:case 0x0d:{      length-=2;      if (length < 0) {        return throwBadUtf8(v0,at);      }      int v1=bytes[at + 1] & 0xFF;      if ((v1 & 0xc0) != 0x80) {        return throwBadUtf8(v1,at + 1);      }      int value=((v0 & 0x1f) << 6) | (v1 & 0x3f);      if ((value != 0) && (value < 0x80)) {        return throwBadUtf8(v1,at + 1);      }      out=(char)value;      at+=2;      break;    }case 0x0e:{    length-=3;    if (length < 0) {      return throwBadUtf8(v0,at);    }    int v1=bytes[at + 1] & 0xFF;    if ((v1 & 0xc0) != 0x80) {      return throwBadUtf8(v1,at + 1);    }    int v2=bytes[at + 2] & 0xFF;    if ((v1 & 0xc0) != 0x80) {      return throwBadUtf8(v2,at + 2);    }    int value=((v0 & 0x0f) << 12) | ((v1 & 0x3f) << 6) | (v2 & 0x3f);    if (value < 0x800) {      return throwBadUtf8(v2,at + 2);    }    out=(char)value;    at+=3;    break;  }default :{  return throwBadUtf8(v0,at);}}chars[outAt]=out;outAt++;}return new String(chars,0,outAt);}  }
class C{  public DTNHost(List<MessageListener> msgLs,List<MovementListener> movLs,String groupId,List<NetworkInterface> interf,ModuleCommunicationBus comBus,MovementModel mmProto,MessageRouter mRouterProto){  this.comBus=comBus;  this.location=new Coord(0,0);  this.address=getNextAddress();  this.name=groupId + address;  this.net=new ArrayList<NetworkInterface>();  for (  NetworkInterface i : interf) {    NetworkInterface ni=i.replicate();    ni.setHost(this);    net.add(ni);  }  this.msgListeners=msgLs;  this.movListeners=movLs;  this.movement=mmProto.replicate();  this.movement.setComBus(comBus);  this.movement.setHost(this);  setRouter(mRouterProto.replicate());  this.location=movement.getInitialLocation();  this.nextTimeToMove=movement.nextPathAvailable();  this.path=null;  if (movLs != null) {    for (    MovementListener l : movLs) {      l.initialLocation(this,this.location);    }  }}  }
class C{  public String createSuperCall(CtMethod method) throws NotFoundException {  return "super." + method.getName() + "("+ extractParameters(method)+ ");";}  }
class C{  public Boolean isSctiesRegn(){  return sctiesRegn;}  }
class C{  public static List<org.oscm.internal.vo.VOPricedEvent> convertToUpVOPricedEvent(List<org.oscm.vo.VOPricedEvent> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOPricedEvent> newVO=new ArrayList<org.oscm.internal.vo.VOPricedEvent>();  for (  org.oscm.vo.VOPricedEvent tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  @Deprecated public SimpleOrderedMap(List<Object> nameValuePairs){  super(nameValuePairs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:03.278 -0500",hash_original_method="63564401D8DE1BF0CEC677D15FBBF9A5",hash_generated_method="692223D80A796C2996D58C245BCA1BF9") public static void updateServiceInfo(){  services.clear();  secureRandom=null;  for (  Provider p : providers) {    initServiceInfo(p);  }  needRefresh=false;}  }
class C{  public LongMapper boost(Float boost){  this.boost=boost;  return this;}  }
class C{  public void addExceptionMessage(ExceptionMessage exceptionMessage,ExceptionContext exceptionContext){  addExceptionMessage(exceptionMessage);  addExceptionContext(exceptionContext);}  }
class C{  public void joinChannel(String channel,String key){  checkArgument(StringUtils.isNotBlank(channel),"Channel '%s' is blank",channel);  checkNotNull(key,"Key for channel %s cannot be null",channel);  joinChannel(channel + " " + key);}  }
class C{  public boolean hasCycle(){  return cycleDay != CYCLE_NONE;}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isRequiresTaxCertificate(){  Object oo=get_Value(COLUMNNAME_RequiresTaxCertificate);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){  return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f;}  }
class C{  public CongestionInfo(Scenario scenario,DelayInternalizationApproach approach,double timeBinSize,int writeOutputIteration){  this.scenario=scenario;  this.internalizationApproach=approach;  this.timeBinSize=timeBinSize;  this.writeOutputIteration=writeOutputIteration;  currentTimeBinEndTime=timeBinSize;}  }
class C{  public T caseTypeDefiningElement(TypeDefiningElement object){  return null;}  }
class C{  public static boolean hasPermission(Activity activity,String permission){  return activity.checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SWFShape tagDefineShape2(int id,Rect outline) throws IOException {  startShape(TAG_DEFINESHAPE2,id,outline);  return factorySWFShape(false,true);}  }
class C{  public static int binarySearch(short[] array,int startIndex,int endIndex,short value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (value > array[mid]) {      low=mid + 1;    } else     if (value == array[mid]) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (value < array[mid] ? 1 : 2);}  }
class C{  static String parseMethodDesc_params(String s){  int i, j;  i=s.indexOf('(');  if (i >= 0) {    j=s.indexOf(')',i + 1);    if (j >= 0) {      return parseDesc(s.substring(i + 1,j),",");    }  }  return "<parse error>";}  }
class C{  public mxTemporaryCellStates(mxGraphView view){  this(view,1,null);}  }
class C{  public final boolean checkTag(int identifier){  return this.constrId == identifier;}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  private void reachablePathFind(Node a,Node b,Node c,LinkedList<Node> reachable,Graph graph){  Set<Node> cParents=new HashSet<>(graph.getParents(c));  Set<Node> visited=new HashSet<>();  visited.add(b);  visited.add(c);  Node e=reachable.getFirst();  int distance=0;  while (reachable.size() > 0) {    Node x=reachable.removeFirst();    visited.add(x);    if (e == x) {      e=x;      distance++;      final int _maxPathLength=maxPathLength == -1 ? 1000 : maxPathLength;      if (distance > 0 && distance > _maxPathLength) {        continue;      }    }    List<Node> pathExtensions=graph.getNodesInTo(x,Endpoint.ARROW);    pathExtensions.removeAll(visited);    for (    Node d : pathExtensions) {      if (!graph.isAdjacentTo(d,c)) {        doDdpOrientation(d,a,b,c,graph);        return;      } else       if (cParents.contains(d)) {        if (graph.getEndpoint(x,d) == Endpoint.ARROW) {          reachable.add(d);        }      }    }  }}  }
class C{  public static ImmutableLocation middle(Location l1,Location l2){  double x=(l1.getX() + l2.getX()) / 2d;  double y=(l1.getY() + l2.getY()) / 2d;  double z=(l1.getZ() + l2.getZ()) / 2d;  return new ImmutableLocation(x,y,z,l1.getWorld());}  }
class C{  protected NokiaMultipartMessage(){  super(SmsPort.NOKIA_MULTIPART_MESSAGE,SmsPort.ZERO);}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuffer sb=new StringBuffer();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public synchronized void previewFeature(String f){  int featureHash=getFeatureHash(f);  if (feature2Id.containsKey(featureHash)) {    log.warn("Possible hash collision in lexicon " + "for feature name = {}, hash = {}",f,featureHash);  } else {    feature2Id.put(featureHash,nextFeatureId++);  }  if (featureNames != null) {    featureNames.add(f);  }}  }
class C{  @Override public void validate(final StatementDescription description){  final IExpressionDescription geom=description.getFacet(GEOMETRY);  if (geom != null) {    for (    final String s : Arrays.asList(TEXT,SHAPE,IMAGE)) {      final IExpressionDescription other=description.getFacet(s);      if (other != null) {        description.warning("'" + s + "' has no effect here",IGamlIssue.CONFLICTING_FACETS,s);      }    }    final IExpression exp=geom.getExpression();    if (exp == null || !canDraw(exp)) {      final IType<?> type=exp == null ? Types.NO_TYPE : exp.getType();      description.error("'draw' cannot draw objects of type " + type,IGamlIssue.WRONG_TYPE,GEOMETRY);      return;    }  }}  }
class C{  public String group(int group){  return matcher.group(group);}  }
class C{  public ChatPanel(final IMessenger messenger,final IChannelMessenger channelMessenger,final IRemoteMessenger remoteMessenger,final String chatName,final CHAT_SOUND_PROFILE chatSoundProfile){  init();  final Chat chat=new Chat(messenger,chatName,channelMessenger,remoteMessenger,chatSoundProfile);  setChat(chat);}  }
class C{  private void updateBugCollection(Project findBugsProject,Reporter bugReporter,boolean incremental){  SortedBugCollection newBugCollection=bugReporter.getBugCollection();  logDirty(newBugCollection);  try {    st.newPoint("getBugCollection");    SortedBugCollection oldBugCollection=FindbugsPlugin.getBugCollection(project,monitor,false);    logDirty(oldBugCollection);    st.newPoint("mergeBugCollections");    SortedBugCollection resultCollection=mergeBugCollections(oldBugCollection,newBugCollection,incremental);    logDirty(resultCollection);    resultCollection.getProject().setGuiCallback(new EclipseGuiCallback(project));    resultCollection.setTimestamp(System.currentTimeMillis());    resultCollection.setDoNotUseCloud(false);    resultCollection.reinitializeCloud();    logDirty(resultCollection);    st.newPoint("storeBugCollection");    FindbugsPlugin.storeBugCollection(project,resultCollection,monitor);  } catch (  IOException e) {    FindbugsPlugin.getDefault().logException(e,"Error performing FindBugs results update");  }catch (  CoreException e) {    FindbugsPlugin.getDefault().logException(e,"Error performing FindBugs results update");  }  st.newPoint("createMarkers");  MarkerUtil.createMarkers(javaProject,newBugCollection,resource,monitor);}  }
class C{  public void rebuildClassFile(){}  }
class C{  protected boolean[] incrementalEstimator(){  boolean[] result=new boolean[2];  print("incremental estimator...");  if (m_Estimator instanceof IncrementalEstimator) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  public void initTransactions(){  List<Transaction> list=transactionStore.getOpenTransactions();  for (  Transaction t : list) {    if (t.getStatus() == Transaction.STATUS_COMMITTING) {      t.commit();    } else     if (t.getStatus() != Transaction.STATUS_PREPARED) {      t.rollback();    }  }}  }
class C{  public void validatePartitionKeyGroup(String expectedPartitionKeyGroupName,PartitionKeyGroup actualPartitionKeyGroup){  assertNotNull(actualPartitionKeyGroup);  assertEquals(expectedPartitionKeyGroupName,actualPartitionKeyGroup.getPartitionKeyGroupKey().getPartitionKeyGroupName());}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.REGULAR_EXPRESSION_LITERAL;}  }
class C{  @Override public void changed(final Changes property,final boolean value){}  }
class C{  public RecordQuery(URL feedUrl){  super(feedUrl);}  }
class C{  @Override protected int sizePendingWorkers(){  return _pendingWorkers.size();}  }
class C{  private static int uariminEq(double value,double[] bv,int bvi[],BinaryOperator bOp) throws DMLRuntimeException {  int ixMin=1;  if (value == bv[0])   ixMin=bvi[0] + 1;  return ixMin;}  }
class C{  public IndTestFisherZ(DataSet dataSet,double alpha){  if (!(dataSet.isContinuous())) {    throw new IllegalArgumentException("Data set must be continuous.");  }  if (!(alpha >= 0 && alpha <= 1)) {    throw new IllegalArgumentException("Alpha mut be in [0, 1]");  }  this.covMatrix=new CovarianceMatrixOnTheFly(dataSet);  List<Node> nodes=covMatrix.getVariables();  this.variables=Collections.unmodifiableList(nodes);  this.indexMap=indexMap(variables);  this.nameMap=nameMap(variables);  setAlpha(alpha);  this.dataSet=dataSet;}  }
class C{  @NamespacePermission(fields="#customDdlKey.namespace",permissions=NamespacePermissionEnum.WRITE) @Override public CustomDdl updateCustomDdl(CustomDdlKey customDdlKey,CustomDdlUpdateRequest request){  customDdlHelper.validateCustomDdlKey(customDdlKey);  Assert.hasText(request.getDdl(),"DDL must be specified.");  request.setDdl(request.getDdl().trim());  CustomDdlEntity customDdlEntity=customDdlDaoHelper.getCustomDdlEntity(customDdlKey);  customDdlEntity.setDdl(request.getDdl());  customDdlEntity=customDdlDao.saveAndRefresh(customDdlEntity);  return createCustomDdlFromEntity(customDdlEntity);}  }
class C{  public GammaDistr(Random seed,int shape,double scale){  this(shape,scale);  numGen.reseedRandomGenerator(seed.nextLong());}  }
class C{  public IpPort(String ip,int port){  super();  this.ip=ip;  this.port=port;}  }
class C{  public void enableSyncCallback(){  mIsSyncCallback=true;}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append(getClass().getName());  buf.append(", status: capacity=");  buf.append(capacity());  buf.append(" position=");  buf.append(position());  buf.append(" limit=");  buf.append(limit());  return buf.toString();}  }
class C{  public boolean isPrimitive(){  return primitive;}  }
class C{  public TimeValue timeout(){  return timeout;}  }
class C{  public void fix(int motifNodeID,int[] orbits){  int orbit=orbits[motifNodeID];  if (orbit == -1) {    return;  }  for (int i=motifNodeID + 1; i < orbits.length; i++) {    int orbiti=orbits[i];    if (orbit == orbiti) {      addConstraint(motifNodeID,i);    }  }}  }
class C{  public static final boolean alarmExists(ContentResolver cr,long eventId,long begin,long alarmTime){  String[] projection=new String[]{ALARM_TIME};  Cursor cursor=cr.query(CONTENT_URI,projection,WHERE_ALARM_EXISTS,(new String[]{Long.toString(eventId),Long.toString(begin),Long.toString(alarmTime)}),null);  boolean found=false;  try {    if (cursor != null && cursor.getCount() > 0) {      found=true;    }  }  finally {    if (cursor != null) {      cursor.close();    }  }  return found;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Permissions.hasPermission(Permissions.PERMISSION_SYSTEMMESSAGE,stack.getUIMgr())) {    sage.msg.MsgManager.getInstance().clearAlertLevel();    sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.SYSTEM_ALERT_LEVEL_RESET,(Object[])null);  }  return null;}  }
class C{  public boolean canStripWhiteSpace(){  return (null != m_whiteSpaceInfoList);}  }
class C{  private void doorEdge(Player player,String inputId,String corner){  int id=Utils.getNumber(player,inputId);  int input=Utils.getNumber(player,corner);  if (id < 0) {    Messages.POSITIVE_VALUES.send(player);    return;  }  if (input < 1 || input > 2) {    Messages.DOOR_EDGE_BAD.send(player);    return;  }  Location lookingAt=player.getEyeLocation().getBlock().getLocation();  editedFile.getConfig().set("Doors." + id + ".Edge"+ input,editedFile.serializeLocation(lookingAt));  editedFile.saveFile();  Messages.ADDED_CORNER.send(player,corner);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.919 -0500",hash_original_method="E45E4CA02C1498571B14F8EF02CBA542",hash_generated_method="E40267720A2ECD6C2D02EAE67D65E7F5") public boolean success(){  return sw1 == 0x90 || sw1 == 0x91 || sw1 == 0x9e || sw1 == 0x9f;}  }
class C{  public String toJSON(){  String json=null;  try {    json=this.toJSON(false);  } catch (  Exception e) {    logger.error("Could not Serialize into JSON:",e);  }  return json;}  }
class C{  @Override public void updateClob(int columnIndex,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateClob(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void patchModule(SceModule module){  Memory mem=Emulator.getMemory();  if ("vsh_module".equals(module.modname)) {    patch(mem,module,0x000122B0,0x506000E0,NOP());    patch(mem,module,0x00012058,0x1440003B,NOP());    patch(mem,module,0x00012060,0x14400039,NOP());  }  if ("sceNpCommerce2".equals(module.modname)) {    patch(mem,module,0x0000A598,0x00000073,0x00000000);    patch(mem,module,0x00003A60,0x240701BB,0x24070050);  }  if ("sceNpCore".equals(module.modname)) {    patchRemoveStringChar(mem,module,0x00000D50,'s');  }  if ("sceNpService".equals(module.modname)) {    patch(mem,module,0x0001075C,0x00000073,0x00000000);  }}  }
class C{  public ConsecutiveTimeFramer(FramingFlowType framingFlow) throws AdeException {  super(framingFlow);  setAlighnmentOffset();}  }
class C{  public caption removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  void openPortButtonActionPerformed(java.awt.event.ActionEvent e){  log.info("Open button pushed");  openPortButton.setEnabled(false);  portBox.setEnabled(false);  openPort((String)portBox.getSelectedItem(),"JMRI");  status.setText(res.getString("StatusSelectFile"));  fileButton.setEnabled(true);  fileButton.setToolTipText(res.getString("TipFileEnabled"));  log.info("Open button processing complete");}  }
class C{  protected void undoTextChange(){  if (fStart < 0 || fEnd < 0)   return;  try {    if (fDocumentUndoManager.fDocument instanceof IDocumentExtension4)     ((IDocumentExtension4)fDocumentUndoManager.fDocument).replace(fStart,fText.length(),fPreservedText,fUndoModificationStamp); else     fDocumentUndoManager.fDocument.replace(fStart,fText.length(),fPreservedText);  } catch (  BadLocationException x) {  }}  }
class C{  public void complete(){  this.completed=this.total;}  }
class C{  public static boolean contains(final JTree tree,final TreeNode node){  return isAncestor(node,(TreeNode)tree.getModel().getRoot());}  }
class C{  public TabDelegate(boolean incognito){  mIsIncognito=incognito;}  }
class C{  public Element writeBeanSaver(Element parent,Object o,String name) throws Exception {  Element node;  weka.gui.beans.Saver saver;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  saver=(weka.gui.beans.Saver)o;  node=addElement(parent,name,saver.getClass().getName(),false);  invokeWriteToXML(node,saver.getRelationNameForFilename(),VAL_RELATIONNAMEFORFILENAME);  invokeWriteToXML(node,saver.getSaverTemplate(),VAL_SAVER);  return node;}  }
class C{  public MaterializeBuilder withContainer(ViewGroup container){  this.mContainer=container;  return this;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder("[PDPStatus: OFFSET=0x");  sb.append(Long.toHexString(offset));  sb.append(", SIZE=0x");  sb.append(Long.toHexString(size));  sb.append(", lastReading=");  sb.append(lastReading);  sb.append(", unknownSeconds=");  sb.append(unknownSeconds);  sb.append(", value=");  sb.append(value);  sb.append("]");  return sb.toString();}  }
class C{  public String toString(){  String s=this.getClass().getName() + " " + this.name+ "\n"+ this.n+ " // <- Total # rows\n";  for (int r=0; r < this.n; r++) {    for (int c=0; c < this.n; c++) {      s=s + this.getValue(r,c) + " ";    }    s=s + "\n";  }  return s;}  }
class C{  @Override public void run(){  amIActive=true;  String rasterHeader=null;  String distributionType=null;  int numberOfClasses=-1;  String statsFileName=null;  int numCols, numRows;  int col, row;  double value;  List<Double> values=new ArrayList<>();  String str;  float progress=0;  int index;  int h;  FileWriter streamWriter=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      rasterHeader=args[i];    } else     if (i == 1) {      distributionType=args[i].toLowerCase();    } else     if (i == 2) {      if (!args[i].toLowerCase().equals("not specified")) {        numberOfClasses=Integer.parseInt(args[i]);      }    } else     if (i == 3) {      statsFileName=args[i];    }  }  if ((rasterHeader == null) || (statsFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if ((!distributionType.equals("complete")) & (numberOfClasses <= 0)) {    showFeedback("Specify the number of classes (should be a value larger then 0).");    return;  }  try {    raster=new WhiteboxRaster(rasterHeader,"r");    numRows=raster.getNumberRows();    numCols=raster.getNumberColumns();    streamWriter=new FileWriter(statsFileName);    str="Distribution type: " + distributionType + System.lineSeparator();    streamWriter.write(str);switch (distributionType) {case "complete":      values=SortGridValues(raster);    updateProgress("Writing output:",0);  str="Value" + "\t" + "Cum. Rel. Freq."+ System.lineSeparator();streamWriter.write(str);for (int i=0; i < values.size(); i++) {str=values.get(i) + "\t" + (((float)i + 1) / values.size())+ System.lineSeparator();streamWriter.write(str);if (cancelOp) {  cancelOperation();  return;}progress=(float)(100f * i / (values.size() - 1));updateProgress("Writing output:",(int)progress);}break;case "n classes with equal class width":List<Integer> distri=new ArrayList<>();List<Double> upper=new ArrayList<>();for (int i=1; i <= numberOfClasses; i++) {distri.add(0);upper.add(raster.getMinimumValue() + i * (raster.getMaximumValue() - raster.getMinimumValue()) / numberOfClasses);}updateProgress("Computing distribution:",0);for (row=0; row < numRows; row++) {for (col=0; col < numCols; col++) {value=raster.getValue(row,col);if (value != raster.getNoDataValue()) {h=0;while (value > upper.get(h)) {h=h + 1;}if (h <= numberOfClasses) {distri.set(h,distri.get(h) + 1);}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (numRows - 1));updateProgress("Computing distribution:",(int)progress);}int sum=0;float cumu;for (int i=0; i < numberOfClasses; i++) {sum=sum + distri.get(i);}updateProgress("Writing output:",0);str="Value" + "\t" + "Rel. Freq."+ "\t"+ "Cum. Rel. Freq."+ System.lineSeparator();streamWriter.write(str);if (sum > 0) {cumu=0;for (int i=0; i < numberOfClasses; i++) {cumu=cumu + (float)distri.get(i) / sum;str=upper.get(i) + "\t" + (float)distri.get(i) / sum + "\t" + cumu + System.lineSeparator();streamWriter.write(str);if (cancelOp) {cancelOperation();return;}progress=(float)(100f * i / numberOfClasses);updateProgress("Writing output:",(int)progress);}}break;case "n classes with equal class size":values=SortGridValues(raster);updateProgress("Writing output:",0);str="Cum. Rel. Freq." + "\t" + "Value"+ System.lineSeparator();streamWriter.write(str);for (int i=1; i <= numberOfClasses; i++) {index=(int)((float)i / numberOfClasses * values.size()) - 1;if (index < 0) {index=0;}str=((float)index + 1) / values.size() + "\t" + values.get(index) + System.lineSeparator();streamWriter.write(str);progress=(float)(100f * i / numberOfClasses);updateProgress("Writing output:",(int)progress);}break;}raster.close();streamWriter.close();} catch (Exception e) {showFeedback(e.getMessage());} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  protected void makeIcons(CatalogTreeNode n){  if (log.isDebugEnabled()) {    log.debug("makeIcons from node= " + n.toString() + ", numChildren= "+ n.getChildCount()+ ", NumLeaves= "+ n.getNumLeaves());  }  _iconMap=new HashMap<String,JToggleButton>(10);  _order=new ArrayList<String>();  ArrayList<CatalogTreeLeaf> list=n.getLeaves();  int k=list.size() - 1;  for (int i=list.size() - 1; i >= 0; i--) {    CatalogTreeLeaf leaf=list.get(i);    String name=leaf.getName();    String path=leaf.getPath();    if ("BeanStateInconsistent".equals(name)) {      this.setIcon(0,name,new NamedIcon(path,path));    } else     if ("BeanStateUnknown".equals(name)) {      this.setIcon(1,name,new NamedIcon(path,path));    } else {      this.setIcon(k,name,new NamedIcon(path,path));      k--;    }  }}  }
class C{  private void initializeRandomizationStartpoints(int incrementSize){  this.randomStartpoints=new ConcurrentLinkedQueue<Integer>();  int increments=luceneUtils.getNumDocs() / incrementSize;  boolean remainder=luceneUtils.getNumDocs() % incrementSize > 0;  if (remainder)   increments++;  ArrayList<Integer> toRandomize=new ArrayList<Integer>();  for (int x=0; x < increments; x++)   toRandomize.add(x * incrementSize);  Collections.shuffle(toRandomize);  randomStartpoints.addAll(toRandomize);}  }
class C{  public void testUserDataHandlerNotifiedOfShallowClones(){  RecordingHandler handler=new RecordingHandler();  name.setUserData("a","apple",handler);  name.setUserData("b","banana",handler);  standard.setUserData("c","cat",handler);  waffles.setUserData("d","dog",handler);  Element clonedName=(Element)name.cloneNode(false);  Attr clonedStandard=clonedName.getAttributeNode("a:standard");  Set<String> expected=new HashSet<String>();  expected.add(notification(NODE_CLONED,"a","apple",name,clonedName));  expected.add(notification(NODE_CLONED,"b","banana",name,clonedName));  expected.add(notification(NODE_CLONED,"c","cat",standard,clonedStandard));  assertEquals(expected,handler.calls);}  }
class C{  protected IntType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  protected T visitDefault(RTLStatement stmt){  throw new UnsupportedOperationException("Visitor does not support statements of type " + stmt.getClass().getSimpleName() + "!");}  }
class C{  SimpleBeanObject findNonContainerBean(Point pointOnMap){  Vector list=layer.getObjects();  double minSep=Double.MAX_VALUE;  SimpleBeanObject closest=null;  for (int i=0; i < list.size(); i++) {    Object o=list.get(i);    SimpleBeanObject obj=(SimpleBeanObject)o;    if (obj instanceof SimpleBeanContainer)     continue;    Point2D p2=layer.getProjection().forward(new LatLonPoint.Float(obj.getLatitude(),obj.getLongitude()));    double sep=almostEquals(pointOnMap,p2,20);    if (sep < minSep) {      minSep=sep;      closest=obj;    }  }  return closest;}  }
class C{  public synchronized T dequeue(long timeOut) throws InterruptedException {  while (tail == null) {    wait(timeOut);  }  QueueElement<T> elt=tail;  tail=elt.prev;  if (tail == null) {    head=null;  } else {    tail.next=null;  }  length--;  return elt.obj;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String setting=getString(stack);  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerPluginInfo()) {      stack.push(pluggy);      stack.push(setting);      return makeNetworkedCall(stack);    }    SageTVPlugin realPlug=sage.plugin.CorePluginManager.getInstance().getRealPlugin(pluggy.getId());    if (realPlug != null) {      if (stack.getUIMgr() != null) {        Catbert.uiContextThreadNames.set(stack.getUIMgr().getLocalUIClientName());      }      return realPlug.getConfigLabel(setting);    }  }  return "";}  }
class C{  public static boolean parseBadCharacters(PsiBuilder b,int l){  IElementType tokenType=b.getTokenType();  if (tokenType == null || ((PerlBuilder)b).getPerlParser().getBadCharacterForbiddenTokens().contains(tokenType)) {    return false;  }  PsiBuilder.Marker m=b.mark();  b.advanceLexer();  if (tokenType == TokenType.BAD_CHARACTER) {    while (b.getTokenType() == TokenType.BAD_CHARACTER) {      b.advanceLexer();    }    m.error("Unexpected tokens, plugin currently supports only ASCII identifiers");  } else   if (tokenType == RIGHT_PAREN) {    m.error("Unopened closing parenthesis");  } else   if (tokenType == RIGHT_BRACKET) {    m.error("Unopened closing bracket");  } else {    m.error("Unexpected token");  }  return true;}  }
class C{  public boolean updateTopicList(String topicName){  return mqttMgr.updateComboBoxList(topic,topicName);}  }
class C{  public LirsEntry(){  this.key=null;  this.value=null;  this.previousInStack=this;  this.nextInStack=this;  this.previousInQueue=this;  this.nextInQueue=this;}  }
class C{  private static byte[] incrementAtIndex(final byte[] bytes,final int index){  final byte[] copy=new byte[bytes.length];  System.arraycopy(bytes,0,copy,0,bytes.length);  ++copy[index];  return copy;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.246 -0500",hash_original_method="13260C05A29655F6FC8F2FA182B20EC8",hash_generated_method="CFBBE0D6137C5949A85BF9AFED598B65") final int fullyRelease(Node node){  boolean failed=true;  try {    int savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  static int calculateOpacityTransform(final double opacity,final int overlayColor,final int primaryColor){  final int redPrimary=Color.red(primaryColor);  final int redOverlay=Color.red(overlayColor);  final int greenPrimary=Color.green(primaryColor);  final int greenOverlay=Color.green(overlayColor);  final int bluePrimary=Color.blue(primaryColor);  final int blueOverlay=Color.blue(overlayColor);  final int redCalculated=(int)((1 - opacity) * redPrimary + opacity * redOverlay);  final int greenCalculated=(int)((1 - opacity) * greenPrimary + opacity * greenOverlay);  final int blueCalculated=(int)((1 - opacity) * bluePrimary + opacity * blueOverlay);  return Color.rgb(redCalculated,greenCalculated,blueCalculated);}  }
class C{  @SuppressWarnings({"StatementWithEmptyBody","UnusedDeclaration"}) private void iterate(Map<Integer,Integer> map) throws Exception {  for (int i=1; i <= ITER_CNT; i++) {    for (    Map.Entry<Integer,Integer> e : map.entrySet())     ;    for (    Integer k : map.keySet())     ;    for (    Integer v : map.values())     ;  }}  }
class C{  public void darkerColor(int factor){  int color=getColor();  int r=color >> 16 & 0xff;  int g=color >> 8 & 0xff;  int b=color & 0xff;  r=Math.max(0,r - factor);  g=Math.max(0,g - factor);  b=Math.max(0,b - factor);  setColor(((r << 16) & 0xff0000) | ((g << 8) & 0xff00) | (b & 0xff));}  }
class C{  public CouldntDeleteException(final Exception exception){  super(exception);  m_stacktrace=exception.getStackTrace();}  }
class C{  public synchronized void print(PrintStream p){  for (int i=0; i < nkeys; i++)   if (keys[i] != null) {    p.print(keys[i] + (values[i] != null ? ": " + values[i] : "") + "\r\n");  }  p.print("\r\n");  p.flush();}  }
class C{  public void init(){  mSharedPreferences=PreferenceManager.getDefaultSharedPreferences(mContext);  LocalBroadcastManager.getInstance(mContext).registerReceiver(mMessageReceiver,new IntentFilter(Constants.INTENT_REGISTRATION_COMPLETE));  int mStatus=GooglePlayServicesUtil.isGooglePlayServicesAvailable(mContext);  if (mStatus == ConnectionResult.SUCCESS)   mContext.startService(new Intent(mContext,RegistrationService.class)); else {    if (mGcmListener != null)     mGcmListener.onPlayServiceError();  }}  }
class C{  public CGLIBEnhancedConverter(final Mapper mapper,final ReflectionProvider reflectionProvider,final ClassLoaderReference classLoaderReference){  super(mapper,new CGLIBFilteringReflectionProvider(reflectionProvider),classLoaderReference);  fieldCache=new HashMap<>();}  }
class C{  public String print(){  StringBuilder buffer=new StringBuilder();  String delimiter="";  for (  Integer key : streamToInnerMap.keySet()) {    Set<Integer> set=streamToInnerMap.get(key);    buffer.append(delimiter);    buffer.append(key);    buffer.append('=');    buffer.append(Arrays.toString(set.toArray()));    delimiter=", ";  }  return buffer.toString();}  }
class C{  public void clearParserHighlights(Parser parser){  for (Iterator i=parserHighlights.iterator(); i.hasNext(); ) {    HighlightInfo info=(HighlightInfo)i.next();    if (info.notice.getParser() == parser) {      if (info instanceof LayeredHighlightInfo) {        LayeredHighlightInfo lhi=(LayeredHighlightInfo)info;        if (lhi.width > 0 && lhi.height > 0) {          textArea.repaint(lhi.x,lhi.y,lhi.width,lhi.height);        }      } else {        TextUI ui=textArea.getUI();        ui.damageRange(textArea,info.getStartOffset(),info.getEndOffset());      }      i.remove();    }  }}  }
class C{  public final IRequest fireMessage(String recipient,String type,Object object){  try {    return base.fireMessage(new Message(new Address(getName()),new Address(recipient),type,object));  } catch (  IOException e) {    return new StaticRequest(IRequest.ERROR,e);  }}  }
class C{  public void play(float gain){  Clip clip;  if ((clip=getClip()) == null)   return;  if (clip.isActive()) {    if (!MemoryControl.shortStatus())     try {      Clip onetimeclip=getFreshClip();      FloatControl gainControl=(FloatControl)onetimeclip.getControl(FloatControl.Type.MASTER_GAIN);      gainControl.setValue(gain);      onetimeclip.start();    } catch (    OutOfMemoryError e) {    }  } else {    FloatControl gainControl=(FloatControl)clip.getControl(FloatControl.Type.MASTER_GAIN);    gainControl.setValue(gain);    clip.setFramePosition(0);    clip.start();  }}  }
class C{  protected Object readPostProcess(Object o) throws Exception {  return o;}  }
class C{  private static void parse(final Map<String,Set<String>> parameters,final Scanner scanner,final String encoding,boolean decodeQueryParam){  scanner.useDelimiter(PARAMETER_SEPARATOR);  while (scanner.hasNext()) {    final String[] nameValue=scanner.next().split(NAME_VALUE_SEPARATOR);    if (nameValue.length == 0 || nameValue.length > 2)     throw new IllegalArgumentException("bad parameter");    final String name=decodeQueryParam ? decode(nameValue[0],encoding) : nameValue[0];    String value=null;    if (nameValue.length == 2)     value=decodeQueryParam ? decode(nameValue[1],encoding) : nameValue[1];    Set<String> values=parameters.get(name);    if (values == null) {      values=new LinkedHashSet<>();      parameters.put(name,values);    }    if (value != null) {      values.add(value);    }  }}  }
class C{  public static void join(GridWorker w) throws IgniteInterruptedCheckedException {  try {    if (w != null)     w.join();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new IgniteInterruptedCheckedException(e);  }}  }
class C{  public void testMultiplyDiffScaleNegPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-15;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="9.20003122862175749786430095741145455670101391569026662845893091880727173060570190220616E+91";  int cScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.multiply(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:08.876 -0500",hash_original_method="589AFDD4CA6BF38ABB5F59E26BB3DC6D",hash_generated_method="A878CB652BF3277F9F7822AB8074E046") public boolean isBound(){  return isBound;}  }
class C{  public Object[] constructIndexRow(Map<String,?> row){  return getIndexData().constructIndexRow(row);}  }
class C{  public static Border createGrooveBorder(int thickness,int color){  return createCSSBorder(TYPE_GROOVE,thickness,color);}  }
class C{  public FuncExtFunction(java.lang.String namespace,java.lang.String extensionName,Object methodKey){  m_namespace=namespace;  m_extensionName=extensionName;  m_methodKey=methodKey;}  }
class C{  public void assertEqual(byte expected,byte actual){  TestUtils.assertEqual(expected,actual);}  }
class C{  public StandardXYItemLabelGenerator(){  this(DEFAULT_ITEM_LABEL_FORMAT,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());}  }
class C{  private void addCSSClasses(SVGPlot svgp){  final StyleLibrary style=context.getStyleLibrary();  if (!svgp.getCSSClassManager().contains(MARKER)) {    CSSClass cls=new CSSClass(this,MARKER);    cls.setStatement(SVGConstants.CSS_STROKE_VALUE,style.getColor(StyleLibrary.SELECTION));    cls.setStatement(SVGConstants.CSS_STROKE_OPACITY_PROPERTY,style.getOpacity(StyleLibrary.SELECTION));    cls.setStatement(SVGConstants.CSS_STROKE_WIDTH_PROPERTY,style.getLineWidth(StyleLibrary.PLOT));    cls.setStatement(SVGConstants.CSS_STROKE_LINECAP_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    cls.setStatement(SVGConstants.CSS_STROKE_LINEJOIN_PROPERTY,SVGConstants.CSS_ROUND_VALUE);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,style.getColor(StyleLibrary.SELECTION));    cls.setStatement(SVGConstants.CSS_FILL_OPACITY_PROPERTY,style.getOpacity(StyleLibrary.SELECTION));    svgp.addCSSClassOrLogError(cls);  }}  }
class C{  public static <A,B,C>Tuple3<A,B,C> of(A a,B b,C c){  return new Tuple3<>(a,b,c);}  }
class C{  public boolean booleanValue(){  return false;}  }
class C{  private void layoutOnEDT(final int width){  assert SwingUtilities.isEventDispatchThread();  final int HUGE_INTEGER=Integer.MAX_VALUE - 1000;  CellRendererPane rendererPane=new CellRendererPane();  JViewport viewport=new JViewport();  viewport.setBorder(null);  Dimension size=new Dimension(width,HUGE_INTEGER);  if (printShell instanceof JTextField) {    size=new Dimension(size.width,printShell.getPreferredSize().height);  }  printShell.setSize(size);  viewport.setComponentOrientation(printShell.getComponentOrientation());  viewport.setSize(size);  viewport.add(printShell);  rendererPane.add(viewport);}  }
class C{  private void addMaybeProducedToMultiset(final Map<IVariable<?>,Integer> multiset,IGroupMemberNode node){  final GroupNodeVarBindingInfo bi=bindingInfoMap.get(node);  for (  IVariable<?> var : bi.getMaybeProduced()) {    if (!multiset.containsKey(var)) {      multiset.put(var,1);    } else {      multiset.put(var,multiset.get(var) + 1);    }  }}  }
class C{  private boolean isControlSensorIncluded(ControlSensor sensor){  int i;  for (i=0; i < _controlSensorList.size(); i++) {    if (_controlSensorList.get(i).getName().equals(sensor.getName()) && _controlSensorList.get(i).getState() == sensor.getState()) {      return true;    }  }  return false;}  }
class C{  public boolean isDynamic(){  return false;}  }
class C{  private void weakRegionDFS(Block v,int r){  try {    this.m_regions.get(new Integer(r)).add(v);    DominatorNode parentOfV=this.m_dom.getParentOf(this.m_dom.getDode(v));    Block u2=(parentOfV == null) ? null : (Block)parentOfV.getGode();    List children=this.m_pdom.getChildrenOf(this.m_pdom.getDode(v));    for (int i=0; i < children.size(); i++) {      DominatorNode w=(DominatorNode)children.get(i);      Block u1=(Block)w.getGode();      if (u2 != null && u1.equals(u2)) {        this.weakRegionDFS((Block)w.getGode(),r);      } else {        this.m_regCount++;        this.m_regions.put(new Integer(this.m_regCount),this.createRegion(this.m_regCount));        this.weakRegionDFS((Block)w.getGode(),this.m_regCount);      }    }  } catch (  RuntimeException e) {    G.v().out.println("[RegionAnalysis] Exception in weakRegionDFS: " + e);    G.v().out.println("v is  " + v.toShortString() + " in region "+ r);    G.v().out.flush();  }}  }
class C{  public boolean isEnabled(){  return true;}  }
class C{  public static boolean connect(final String ssid) throws InterruptedException {  return WifiAdmin.getInstance().connect(ssid);}  }
class C{  protected CodePosition addPositionChoice(int index,String entry,String prefix,Properties props){  String className=this.getClass().getName();  CodePosition cp=(CodePosition)ComponentFactory.create(className);  if (cp != null) {    if (DEBUG) {      Debug.output("CodePosition:  created position (" + className + ")");    }    cp.symbolPart=getSymbolPart(prefix + entry,prefix,props);    prefix=PropUtils.getScopedPropertyPrefix(prefix) + entry + ".";    cp.hierarchyNumber=index;    cp.id=entry;    cp.prettyName=props.getProperty(prefix + NameProperty);    addPositionChoice(cp);  } else {    if (DEBUG) {      Debug.output("CodePosition: couldn't create position (" + className + ")");    }  }  return cp;}  }
class C{  public ExtendedMessageFormat(final String pattern){  this(pattern,Locale.getDefault());}  }
class C{  @Override public void addPages(){  mainPage=new CBCWizardSelectionPage(createBuildWizards);  addPage(mainPage);}  }
class C{  protected void computeParameters(){  Debug.message("mercator","Mercator.computeParameters()");  super.computeParameters();  tanCtrLat=Math.tan(centerY);  asinh_of_tanCtrLat=MoreMath.asinh(tanCtrLat);  hy=height / 2;  wx=width / 2;}  }
class C{  public void execute(){  DataModel source=getDataModel();  Graph graph=null;  if (source instanceof DataModelList) {    graph=applyLofs((DataModelList)source,pattern);  } else {    DataModelList list=new DataModelList();    list.add(source);    if (pattern == null) {      throw new IllegalArgumentException("Data must be specified.");    }    graph=applyLofs(list,pattern);  }  setResultGraph(graph);  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (((IKnowledge)getParams().get("knowledge",new Knowledge2())).isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,(IKnowledge)getParams().get("knowledge",new Knowledge2()));  } else {    GraphUtils.circleLayout(graph,200,200,150);  }}  }
class C{  public static void main(String args[]){  File sourceDir=getSourceDir(args,0);  File destDir=getDestDir(args);  File translationFile=getTranslationFile(args,2);  String extensions=getExtensions(args,3);  ConcurrentLog.info("TranslateAllToOneLanguage","Translating " + extensions + " files from "+ sourceDir+ " to "+ destDir+ " using "+ translationFile);  try {    new Translator().translateFilesRecursive(sourceDir,destDir,translationFile,extensions,"locale");  }  finally {    ConcurrentLog.shutdown();  }}  }
class C{  public String toValue(){  return value;}  }
class C{  public Light createNewLight(String systemName,String userName){  Light lgt=null;  if (SerialAddress.validSystemNameFormat(systemName,'L')) {    lgt=new SerialLight(systemName,userName);    if (!SerialAddress.validSystemNameConfig(systemName,'L')) {      log.warn("Light system Name does not refer to configured hardware: " + systemName);    }  } else {    log.error("Invalid Light system Name format: " + systemName);  }  return lgt;}  }
class C{  @Uninterruptible public boolean hasBridgeFromNativeAnnotation(){  return isAnnotationDeclared(TypeReference.NativeBridge);}  }
class C{  public static void addPSFontReplacement(String replace,String with){  m_PSFontReplacement.put(replace,with);}  }
class C{  public void close(){  animation.setRate(-1);  animation.play();  animation.setOnFinished(null);}  }
class C{  public void open(@Nullable SQLiteOpenCallbacks callbacks) throws SQLiteException {  if (isOpen()) {    close();  }  initDB(Storm.getApplicationContext(),mInfo.name,mInfo.version,new ArrayList<>(mCached.values()),mInfo.pragma,callbacks);}  }
class C{  void editAddToNodeList(){  Address a=getLivingAddress();  if (a != null) {    Properties p=new Properties();    p.setProperty("node",a.getHost().getHostName() + ":" + a.port);    node.addNodes(p);  }}  }
class C{  public BasicSplitPaneDivider createDefaultDivider(){  return new MetalSplitPaneDivider(this);}  }
class C{  private boolean isInternalSiteAssociatedWithVarray(VirtualArray varray,String internalSiteName,ProtectionSystem candidateProtectionSystem){  if (candidateProtectionSystem == null || candidateProtectionSystem.getSiteInitiators() == null) {    _log.warn(String.format("RP Placement : Disqualifying use of RP Cluster %s because it was not found to have any discovered initiators." + " Re-run discovery.",internalSiteName));    return false;  }  String translatedInternalSiteName=candidateProtectionSystem.getRpSiteNames().get(internalSiteName);  StringSetMap siteAssignedVirtualArrays=candidateProtectionSystem.getSiteAssignedVirtualArrays();  if (siteAssignedVirtualArrays != null && !siteAssignedVirtualArrays.isEmpty()) {    List<String> associatedInternalSitesForThisVarray=new ArrayList<String>();    for (    Map.Entry<String,AbstractChangeTrackingSet<String>> entry : siteAssignedVirtualArrays.entrySet()) {      if (entry.getValue().contains(varray.getId().toString())) {        String associatedInternalSite=entry.getKey();        _log.info(String.format("RP Placement : VirtualArray [%s] has been explicitly associated with RP Cluster [%s]",varray.getLabel(),candidateProtectionSystem.getRpSiteNames().get(associatedInternalSite)));        associatedInternalSitesForThisVarray.add(associatedInternalSite);      }    }    if (!associatedInternalSitesForThisVarray.isEmpty() && !associatedInternalSitesForThisVarray.contains(internalSiteName)) {      _log.info(String.format("RP Placement : Disqualifying use of RP Cluster : %s because there are assigned associations to " + "varrays and varray : %s is not one of them.",translatedInternalSiteName,varray.getLabel()));      return false;    }  }  for (  String endpoint : candidateProtectionSystem.getSiteInitiators().get(internalSiteName)) {    if (endpoint == null) {      continue;    }    if (rpHelper.isInitiatorInVarray(varray,endpoint)) {      _log.info(String.format("RP Placement : Qualifying use of RP Cluster : %s because it is not excluded explicitly and there's " + "connectivity to varray : %s.",translatedInternalSiteName,varray.getLabel()));      return true;    }  }  _log.info(String.format("RP Placement : Disqualifying use of RP Cluster : %s because it was not found to be connected to a Network " + "that belongs to varray : %s",translatedInternalSiteName,varray.getLabel()));  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:19.922 -0500",hash_original_method="4DE51E849F59B0AA80C7ECB38F0D9925",hash_generated_method="75DE0EBDD6E564D92EC7944E0433C01E") public X509Name(String dirName){  this(DefaultReverse,DefaultLookUp,dirName);}  }
class C{  public static ArrayList svgVerticalCoordinateArrayToUserSpace(Element element,String attrName,String valueStr,BridgeContext ctx){  UnitProcessor.Context uctx=UnitProcessor.createContext(ctx,element);  ArrayList values=new ArrayList();  StringTokenizer st=new StringTokenizer(valueStr,", ",false);  while (st.hasMoreTokens()) {    values.add(new Float(UnitProcessor.svgVerticalCoordinateToUserSpace(st.nextToken(),attrName,uctx)));  }  return values;}  }
class C{  public static Path cacheImage(Path originalFile) throws Exception {  MediaFile mf=new MediaFile(originalFile);  Path cachedFile=ImageCache.getCacheDir().resolve(getMD5(originalFile.toString()) + "." + Utils.getExtension(originalFile));  if (!Files.exists(cachedFile)) {    if (!Files.exists(originalFile)) {      throw new FileNotFoundException("unable to cache file: " + originalFile + "; file does not exist");    }    if (Files.size(originalFile) == 0) {      throw new EmptyFileException(originalFile);    }    BufferedImage originalImage=null;    try {      originalImage=createImage(originalFile);    } catch (    Exception e) {      throw new Exception("cannot create image - file seems not to be valid? " + originalFile);    }    int desiredWidth=originalImage.getWidth();switch (mf.getType()) {case FANART:      if (originalImage.getWidth() > 1000) {        desiredWidth=1000;      }    break;case POSTER:  if (originalImage.getHeight() > 500) {    desiredWidth=350;  }break;case EXTRAFANART:case THUMB:case BANNER:case GRAPHIC:desiredWidth=300;break;default :break;}if (mf.getFilename().startsWith("movieset-fanart") || mf.getFilename().startsWith("movieset-poster")) {if (originalImage.getWidth() > 1000) {desiredWidth=1000;}}Point size=calculateSize(desiredWidth,(int)(originalImage.getHeight() / 1.5),originalImage.getWidth(),originalImage.getHeight(),true);BufferedImage scaledImage=null;if (Globals.settings.getImageCacheType() == CacheType.FAST) {scaledImage=Scalr.resize(originalImage,Scalr.Method.BALANCED,Scalr.Mode.FIT_EXACT,size.x,size.y);} else {scaledImage=Scalr.resize(originalImage,Scalr.Method.QUALITY,Scalr.Mode.FIT_EXACT,size.x,size.y);}originalImage=null;ImageWriter imgWrtr=null;ImageWriteParam imgWrtrPrm=null;if (hasTransparentPixels(scaledImage)) {imgWrtr=ImageIO.getImageWritersByFormatName("png").next();imgWrtrPrm=imgWrtr.getDefaultWriteParam();} else {BufferedImage rgb=new BufferedImage(scaledImage.getWidth(),scaledImage.getHeight(),BufferedImage.TYPE_INT_RGB);ColorConvertOp xformOp=new ColorConvertOp(null);xformOp.filter(scaledImage,rgb);imgWrtr=ImageIO.getImageWritersByFormatName("jpg").next();imgWrtrPrm=imgWrtr.getDefaultWriteParam();imgWrtrPrm.setCompressionMode(JPEGImageWriteParam.MODE_EXPLICIT);imgWrtrPrm.setCompressionQuality(0.80f);scaledImage=rgb;}FileImageOutputStream output=new FileImageOutputStream(cachedFile.toFile());imgWrtr.setOutput(output);IIOImage image=new IIOImage(scaledImage,null,null);imgWrtr.write(null,image,imgWrtrPrm);imgWrtr.dispose();output.flush();output.close();scaledImage=null;}if (!Files.exists(cachedFile)) {throw new Exception("unable to cache file: " + originalFile);}return cachedFile;}  }
class C{  @Deprecated public static <T>PeekingIterator<T> peekingIterator(PeekingIterator<T> iterator){  return checkNotNull(iterator);}  }
class C{  public static <T>int clearTable(ConnectionSource connectionSource,DatabaseTableConfig<T> tableConfig) throws SQLException {  return clearTable(connectionSource,tableConfig.getTableName());}  }
class C{  public Sector union(double latitude,double longitude){  if (this.minLatitude < this.maxLatitude && this.minLongitude < this.maxLongitude) {    this.maxLatitude=Math.max(this.maxLatitude,latitude);    this.minLatitude=Math.min(this.minLatitude,latitude);    this.maxLongitude=Math.max(this.maxLongitude,longitude);    this.minLongitude=Math.min(this.minLongitude,longitude);  } else   if (!Double.isNaN(this.minLatitude) && !Double.isNaN(this.minLongitude)) {    this.maxLatitude=Math.max(this.minLatitude,latitude);    this.maxLongitude=Math.max(this.minLongitude,longitude);    this.minLatitude=Math.min(this.minLatitude,latitude);    this.minLongitude=Math.min(this.minLongitude,longitude);  } else {    this.minLatitude=latitude;    this.minLongitude=longitude;    this.maxLatitude=Double.NaN;    this.maxLongitude=Double.NaN;  }  return this;}  }
class C{  public void removeAgent(Turkanian t){  agents.remove(t);  agentGrid.remove(t);}  }
class C{  public void testSumThenReset(){  DoubleAdder ai=new DoubleAdder();  ai.add(2.0);  assertEquals(2.0,ai.sum());  assertEquals(2.0,ai.sumThenReset());  assertEquals(0.0,ai.sum());}  }
class C{  public EmailAddressValidator(@NonNull final CharSequence errorMessage){  super(errorMessage,REGEX);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String encodeString=getString(stack);  return IOUtils.calcSHA1(encodeString);}  }
class C{  public Loader(boolean sameHash){  super(Loader.class.getClassLoader());  if (sameHash) {    thisHashCode=SAME_HASH_CODE;  } else {    thisHashCode=getNextHashCode();  }}  }
class C{  protected void assertResultSetOrdered(ResultSet rs,String[][] data) throws SQLException {  assertResultSet(true,rs,data);}  }
class C{  private NgramDPState computeFinalTransition(NgramDPState state,Accumulator acc){  float res=0.0f;  LinkedList<Integer> currentNgram=new LinkedList<>();  int[] leftContext=state.getLeftLMStateWords();  int[] rightContext=state.getRightLMStateWords();  for (  int t : leftContext) {    currentNgram.add(t);    if (currentNgram.size() >= 2) {      float prob=this.languageModel.ngramLogProbability(Support.toArray(currentNgram),currentNgram.size());      res+=prob;    }    if (currentNgram.size() == this.ngramOrder)     currentNgram.removeFirst();  }  acc.add(denseFeatureIndex,res);  return new NgramDPState(leftContext,rightContext);}  }
class C{  private Connection closer(Connection base,Connection one,Connection two){  if (one == null) {    return two;  }  if (two == null) {    return one;  }  if (base.distanceFrom(one) < base.distanceFrom(two)) {    return one;  }  return two;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_entryOrExitAction_1_();}  }
class C{  public Set keySet(){  return new TreeSet(lib_pathmap.keySet());}  }
class C{  @Override public MultivariateTable copy(){  Builder tableCopy=new Builder();  for (  Assignment head : table.keySet()) {    tableCopy.addRow(head.copy(),table.get(head));  }  return tableCopy.build();}  }
class C{  public AnalyticsConfigData(String argTrackingCode,VisitorData visitorData){  if (argTrackingCode == null)   throw new RuntimeException("Tracking code cannot be null");  trackingCode=argTrackingCode;  this.visitorData=visitorData;}  }
class C{  public static void initializeTypes(){  EquipmentType.addType(MiscType.createHeatSink());  EquipmentType.addType(MiscType.createJumpJet());  EquipmentType.addType(MiscType.createTreeClub());  EquipmentType.addType(MiscType.createGirderClub());  EquipmentType.addType(MiscType.createLimbClub());  EquipmentType.addType(MiscType.createHatchet());  EquipmentType.addType(MiscType.createVacuumProtection());  EquipmentType.addType(MiscType.createStandard());  EquipmentType.addType(MiscType.createISDoubleHeatSink());  EquipmentType.addType(MiscType.createISDoubleHeatSinkPrototype());  EquipmentType.addType(MiscType.createCLDoubleHeatSink());  EquipmentType.addType(MiscType.createISCASE());  EquipmentType.addType(MiscType.createCLCASE());  EquipmentType.addType(MiscType.createISMASC());  EquipmentType.addType(MiscType.createCLMASC());  EquipmentType.addType(MiscType.createTSM());  EquipmentType.addType(MiscType.createC3S());  EquipmentType.addType(MiscType.createC3SBS());  EquipmentType.addType(MiscType.createC3I());  EquipmentType.addType(MiscType.createNC3());  EquipmentType.addType(MiscType.createISArtemis());  EquipmentType.addType(MiscType.createCLArtemis());  EquipmentType.addType(MiscType.createGECM());  EquipmentType.addType(MiscType.createGECMPrototype());  EquipmentType.addType(MiscType.createCLECM());  EquipmentType.addType(MiscType.createISTargComp());  EquipmentType.addType(MiscType.createCLTargComp());  EquipmentType.addType(MiscType.createMekStealth());  EquipmentType.addType(MiscType.createISFerroFibrous());  EquipmentType.addType(MiscType.createCLFerroFibrous());  EquipmentType.addType(MiscType.createISEndoSteel());  EquipmentType.addType(MiscType.createCLEndoSteel());  EquipmentType.addType(MiscType.createBeagleActiveProbe());  EquipmentType.addType(MiscType.createBeagleActiveProbePrototype());  EquipmentType.addType(MiscType.createBloodhoundActiveProbe());  EquipmentType.addType(MiscType.createTHBBloodhoundActiveProbe());  EquipmentType.addType(MiscType.createCLActiveProbe());  EquipmentType.addType(MiscType.createCLLightActiveProbe());  EquipmentType.addType(MiscType.createISAPPod());  EquipmentType.addType(MiscType.createCLAPPod());  EquipmentType.addType(MiscType.createSword());  EquipmentType.addType(MiscType.createISPPCCapacitor());  EquipmentType.addType(MiscType.createCLPPCCapacitor());  EquipmentType.addType(MiscType.createRetractableBlade());  EquipmentType.addType(MiscType.createChainWhip());  EquipmentType.addType(MiscType.createISApolloFCS());  EquipmentType.addType(MiscType.createEjectionSeat());  EquipmentType.addType(MiscType.createIndustrialTSM());  EquipmentType.addType(MiscType.createSalvageArm());  EquipmentType.addType(MiscType.createSpotWelder());  EquipmentType.addType(MiscType.createLiftHoist());  EquipmentType.addType(MiscType.createTracks());  EquipmentType.addType(MiscType.createISMASS());  EquipmentType.addType(MiscType.createCLMASS());  EquipmentType.addType(MiscType.createLightBridgeLayer());  EquipmentType.addType(MiscType.createMediumBridgeLayer());  EquipmentType.addType(MiscType.createHeavyBridgeLayer());  EquipmentType.addType(MiscType.createEnvironmentalSealing());  EquipmentType.addType(MiscType.createFieldKitchen());  EquipmentType.addType(MiscType.createImprovedJumpJet());  EquipmentType.addType(MiscType.createCLImprovedJumpJet());  EquipmentType.addType(MiscType.createJumpBooster());  EquipmentType.addType(MiscType.createFerroFibrousPrototype());  EquipmentType.addType(MiscType.createFerroAlumPrototype());  EquipmentType.addType(MiscType.createLightFerroFibrous());  EquipmentType.addType(MiscType.createHeavyFerroFibrous());  EquipmentType.addType(MiscType.createISFerroAlum());  EquipmentType.addType(MiscType.createCLFerroAlum());  EquipmentType.addType(MiscType.createHeavyFerroAlum());  EquipmentType.addType(MiscType.createLightFerroAlum());  EquipmentType.addType(MiscType.createISHardenedArmor());  EquipmentType.addType(MiscType.createCLHardenedArmor());  EquipmentType.addType(MiscType.createISIndustrialArmor());  EquipmentType.addType(MiscType.createCLIndustrialArmor());  EquipmentType.addType(MiscType.createISPrimitiveArmor());  EquipmentType.addType(MiscType.createISHeavyIndustrialArmor());  EquipmentType.addType(MiscType.createCLHeavyIndustrialArmor());  EquipmentType.addType(MiscType.createISCommercialArmor());  EquipmentType.addType(MiscType.createCLCommercialArmor());  EquipmentType.addType(MiscType.createCLFerroLamellorArmor());  EquipmentType.addType(MiscType.createISEndoSteelPrototype());  EquipmentType.addType(MiscType.createISReinforcedStructure());  EquipmentType.addType(MiscType.createCLReinforcedStructure());  EquipmentType.addType(MiscType.createISCompositeStructure());  EquipmentType.addType(MiscType.createISIndustrialStructure());  EquipmentType.addType(MiscType.createCLIndustrialStructure());  EquipmentType.addType(MiscType.createIS1CompactHeatSink());  EquipmentType.addType(MiscType.createIS2CompactHeatSinks());  EquipmentType.addType(MiscType.createCLLaserHeatSink());  EquipmentType.addType(MiscType.createArtemisV());  EquipmentType.addType(MiscType.createISAngelECM());  EquipmentType.addType(MiscType.createISTHBAngelECM());  EquipmentType.addType(MiscType.createCLAngelECM());  EquipmentType.addType(MiscType.createWatchdogECM());  EquipmentType.addType(MiscType.createTHBMace());  EquipmentType.addType(MiscType.createMace());  EquipmentType.addType(MiscType.createDualSaw());  EquipmentType.addType(MiscType.createChainsaw());  EquipmentType.addType(MiscType.createRockCutter());  EquipmentType.addType(MiscType.createCombine());  EquipmentType.addType(MiscType.createBackhoe());  EquipmentType.addType(MiscType.createPileDriver());  EquipmentType.addType(MiscType.createArmoredCowl());  EquipmentType.addType(MiscType.createNullSignatureSystem());  EquipmentType.addType(MiscType.createVoidSignatureSystem());  EquipmentType.addType(MiscType.createChameleonLightPolarizationShield());  EquipmentType.addType(MiscType.createLightMinesweeper());  EquipmentType.addType(MiscType.createBridgeKit());  EquipmentType.addType(MiscType.createVibroShovel());  EquipmentType.addType(MiscType.createDemolitionCharge());  EquipmentType.addType(MiscType.createISSuperCharger());  EquipmentType.addType(MiscType.createCLSuperCharger());  EquipmentType.addType(MiscType.createISMediumShield());  EquipmentType.addType(MiscType.createISSmallShield());  EquipmentType.addType(MiscType.createISLargeShield());  EquipmentType.addType(MiscType.createISClaw());  EquipmentType.addType(MiscType.createClClaw());  EquipmentType.addType(MiscType.createCLHarJel());  EquipmentType.addType(MiscType.createISHarJel());  EquipmentType.addType(MiscType.createISUMU());  EquipmentType.addType(MiscType.createCLUMU());  EquipmentType.addType(MiscType.createISLance());  EquipmentType.addType(MiscType.createISWreckingBall());  EquipmentType.addType(MiscType.createCLWreckingBall());  EquipmentType.addType(MiscType.createISFlail());  EquipmentType.addType(MiscType.createISMediumVibroblade());  EquipmentType.addType(MiscType.createISSmallVibroblade());  EquipmentType.addType(MiscType.createISLargeVibroblade());  EquipmentType.addType(MiscType.createISBuzzsaw());  EquipmentType.addType(MiscType.createCLBuzzsaw());  EquipmentType.addType(MiscType.createCoolantSystem());  EquipmentType.addType(MiscType.createHeavyArmor());  EquipmentType.addType(MiscType.createSpikes());  EquipmentType.addType(MiscType.createTalons());  EquipmentType.addType(MiscType.createISReactive());  EquipmentType.addType(MiscType.createCLReactive());  EquipmentType.addType(MiscType.createISReflective());  EquipmentType.addType(MiscType.createCLReflective());  EquipmentType.addType(MiscType.createISCASEII());  EquipmentType.addType(MiscType.createCLCASEII());  EquipmentType.addType(MiscType.createISAES());  EquipmentType.addType(MiscType.createCLAES());  EquipmentType.addType(MiscType.createISModularArmor());  EquipmentType.addType(MiscType.createCLModularArmor());  EquipmentType.addType(MiscType.createCommsGear1());  EquipmentType.addType(MiscType.createCommsGear2());  EquipmentType.addType(MiscType.createCommsGear3());  EquipmentType.addType(MiscType.createCommsGear4());  EquipmentType.addType(MiscType.createCommsGear5());  EquipmentType.addType(MiscType.createCommsGear6());  EquipmentType.addType(MiscType.createCommsGear7());  EquipmentType.addType(MiscType.createCommsGear8());  EquipmentType.addType(MiscType.createCommsGear9());  EquipmentType.addType(MiscType.createCommsGear10());  EquipmentType.addType(MiscType.createCommsGear11());  EquipmentType.addType(MiscType.createCommsGear12());  EquipmentType.addType(MiscType.createCommsGear13());  EquipmentType.addType(MiscType.createCommsGear14());  EquipmentType.addType(MiscType.createCommsGear15());  EquipmentType.addType(MiscType.createISGroundMobileHPG());  EquipmentType.addType(MiscType.createISMobileHPG());  EquipmentType.addType(MiscType.createClanGroundMobileHPG());  EquipmentType.addType(MiscType.createClanMobileHPG());  EquipmentType.addType(MiscType.createCLPartialWing());  EquipmentType.addType(MiscType.createISPartialWing());  EquipmentType.addType(MiscType.createCargo1());  EquipmentType.addType(MiscType.createHalfCargo());  EquipmentType.addType(MiscType.createCargo15());  EquipmentType.addType(MiscType.createCargo2());  EquipmentType.addType(MiscType.createCargo25());  EquipmentType.addType(MiscType.createCargo3());  EquipmentType.addType(MiscType.createCargo35());  EquipmentType.addType(MiscType.createCargo4());  EquipmentType.addType(MiscType.createCargo45());  EquipmentType.addType(MiscType.createCargo5());  EquipmentType.addType(MiscType.createCargo55());  EquipmentType.addType(MiscType.createCargo6());  EquipmentType.addType(MiscType.createCargo65());  EquipmentType.addType(MiscType.createCargo7());  EquipmentType.addType(MiscType.createCargo75());  EquipmentType.addType(MiscType.createCargo8());  EquipmentType.addType(MiscType.createCargo85());  EquipmentType.addType(MiscType.createCargo9());  EquipmentType.addType(MiscType.createCargo95());  EquipmentType.addType(MiscType.createCargo10());  EquipmentType.addType(MiscType.createCargo105());  EquipmentType.addType(MiscType.createCargo11());  EquipmentType.addType(MiscType.createLiquidCargo1());  EquipmentType.addType(MiscType.createHalfLiquidCargo());  EquipmentType.addType(MiscType.createCargoContainer());  EquipmentType.addType(MiscType.createMechSprayer());  EquipmentType.addType(MiscType.createTankSprayer());  EquipmentType.addType(MiscType.createFrontDumper());  EquipmentType.addType(MiscType.createRearDumper());  EquipmentType.addType(MiscType.createLeftDumper());  EquipmentType.addType(MiscType.createRightDumper());  EquipmentType.addType(MiscType.createMASH());  EquipmentType.addType(MiscType.createMASHExtraTheater());  EquipmentType.addType(MiscType.createParamedicEquipment());  EquipmentType.addType(MiscType.createCLProtoMyomerBooster());  EquipmentType.addType(MiscType.createProtoPartialWing());  EquipmentType.addType(MiscType.createCLMastMount());  EquipmentType.addType(MiscType.createISMastMount());  EquipmentType.addType(MiscType.createFuel1());  EquipmentType.addType(MiscType.createFuelHalf());  EquipmentType.addType(MiscType.createFuel2());  EquipmentType.addType(MiscType.createFuel25());  EquipmentType.addType(MiscType.createFuel3());  EquipmentType.addType(MiscType.createFuel35());  EquipmentType.addType(MiscType.createFuel4());  EquipmentType.addType(MiscType.createBlueShield());  EquipmentType.addType(MiscType.createISEndoComposite());  EquipmentType.addType(MiscType.createCLEndoComposite());  EquipmentType.addType(MiscType.createCLLaserInsulator());  EquipmentType.addType(MiscType.createISLaserInsulator());  EquipmentType.addType(MiscType.createISEWEquipment());  EquipmentType.addType(MiscType.createISCollapsibleCommandModule());  EquipmentType.addType(MiscType.createHitch());  EquipmentType.addType(MiscType.createISFlotationHull());  EquipmentType.addType(MiscType.createCLFlotationHull());  EquipmentType.addType(MiscType.createISLimitedAmphibiousChassis());  EquipmentType.addType(MiscType.createISFullyAmphibiousChassis());  EquipmentType.addType(MiscType.createCLLimitedAmphibiousChassis());  EquipmentType.addType(MiscType.createCLFullyAmphibiousChassis());  EquipmentType.addType(MiscType.createISShoulderTurret());  EquipmentType.addType(MiscType.createCLShoulderTurret());  EquipmentType.addType(MiscType.createISHeadTurret());  EquipmentType.addType(MiscType.createCLHeadTurret());  EquipmentType.addType(MiscType.createISQuadTurret());  EquipmentType.addType(MiscType.createCLQuadTurret());  EquipmentType.addType(MiscType.createCLTankCommandConsole());  EquipmentType.addType(MiscType.createISTankCommandConsole());  EquipmentType.addType(MiscType.createISSponsonTurret());  EquipmentType.addType(MiscType.createCLSponsonTurret());  EquipmentType.addType(MiscType.createPintleTurret());  EquipmentType.addType(MiscType.createISArmoredMotiveSystem());  EquipmentType.addType(MiscType.createCLArmoredMotiveSystem());  EquipmentType.addType(MiscType.createISChaffPod());  EquipmentType.addType(MiscType.createISDroneCarrierControlSystem());  EquipmentType.addType(MiscType.createCLDroneCarrierControlSystem());  EquipmentType.addType(MiscType.createISDroneExtra());  EquipmentType.addType(MiscType.createCLDroneExtra());  EquipmentType.addType(MiscType.createBC3());  EquipmentType.addType(MiscType.createBC3i());  EquipmentType.addType(MiscType.createISHIResImager());  EquipmentType.addType(MiscType.createCLHIResImager());  EquipmentType.addType(MiscType.createISHyperspectralImager());  EquipmentType.addType(MiscType.createISInfraredImager());  EquipmentType.addType(MiscType.createCLInfraredImager());  EquipmentType.addType(MiscType.createISLookDownRadar());  EquipmentType.addType(MiscType.createCLLookDownRadar());  EquipmentType.addType(MiscType.createISVTOLJetBooster());  EquipmentType.addType(MiscType.createCLVTOLJetBooster());  EquipmentType.addType(MiscType.createRemoteSensorDispenser());  EquipmentType.addType(MiscType.createCLDroneOperatingSystem());  EquipmentType.addType(MiscType.createISDroneOperatingSystem());  EquipmentType.addType(MiscType.createISVehicularMineDispenser());  EquipmentType.addType(MiscType.createCLVehicularMineDispenser());  EquipmentType.addType(MiscType.createMiningDrill());  EquipmentType.addType(MiscType.createCLReconCamera());  EquipmentType.addType(MiscType.createISReconCamera());  EquipmentType.addType(MiscType.createISCombatVehicleEscapePod());  EquipmentType.addType(MiscType.createISSmallNavalCommScannerSuite());  EquipmentType.addType(MiscType.createCLSmallNavalCommScannerSuite());  EquipmentType.addType(MiscType.createISLargeNavalCommScannerSuite());  EquipmentType.addType(MiscType.createCLLargeNavalCommScannerSuite());  EquipmentType.addType(MiscType.createCLNavalTugAdaptor());  EquipmentType.addType(MiscType.createISNavalTugAdaptor());  EquipmentType.addType(MiscType.createISSpaceMineDispenser());  EquipmentType.addType(MiscType.createCLSpaceMineDispenser());  EquipmentType.addType(MiscType.createVehicularStealth());  EquipmentType.addType(MiscType.createEmergencyC3M());  EquipmentType.addType(MiscType.createNovaCEWS());  EquipmentType.addType(MiscType.createISBAStandardArmor());  EquipmentType.addType(MiscType.createCLBAStandardArmor());  EquipmentType.addType(MiscType.createISBAAdvancedArmor());  EquipmentType.addType(MiscType.createISBAStandardPrototypeArmor());  EquipmentType.addType(MiscType.createISBAFireResistantArmor());  EquipmentType.addType(MiscType.createISBAReactiveArmor());  EquipmentType.addType(MiscType.createISBAReflectiveArmor());  EquipmentType.addType(MiscType.createISBAStealthPrototype());  EquipmentType.addType(MiscType.createISBABasicStealth());  EquipmentType.addType(MiscType.createISBAStandardStealth());  EquipmentType.addType(MiscType.createISBAImprovedStealth());  EquipmentType.addType(MiscType.createISBAMimeticCamo());  EquipmentType.addType(MiscType.createCLBAAdvancedArmor());  EquipmentType.addType(MiscType.createCLBAStandardPrototypeArmor());  EquipmentType.addType(MiscType.createCLBAFireResistantArmor());  EquipmentType.addType(MiscType.createCLBAReactiveArmor());  EquipmentType.addType(MiscType.createCLBAReflectiveArmor());  EquipmentType.addType(MiscType.createCLBAStealthPrototype());  EquipmentType.addType(MiscType.createCLBABasicStealth());  EquipmentType.addType(MiscType.createCLBAStandardStealth());  EquipmentType.addType(MiscType.createCLBAImprovedStealth());  EquipmentType.addType(MiscType.createCLBAMimeticCamo());  EquipmentType.addType(MiscType.createMine());  EquipmentType.addType(MiscType.createBABasicManipulator());  EquipmentType.addType(MiscType.createBABasicManipulatorMineClearance());  EquipmentType.addType(MiscType.createBABattleClaw());  EquipmentType.addType(MiscType.createBABattleClawMagnets());  EquipmentType.addType(MiscType.createBABattleClawVibro());  EquipmentType.addType(MiscType.createBACargoLifter());  EquipmentType.addType(MiscType.createBAHeavyBattleClaw());  EquipmentType.addType(MiscType.createBAHeavyBattleClawMagnet());  EquipmentType.addType(MiscType.createBAHeavyBattleClawVibro());  EquipmentType.addType(MiscType.createBAIndustrialDrill());  EquipmentType.addType(MiscType.createBASalvageArm());  EquipmentType.addType(MiscType.createBAModularEquipmentAdaptor());  EquipmentType.addType(MiscType.createBAArmoredGlove());  EquipmentType.addType(MiscType.createBAMagneticClamp());  EquipmentType.addType(MiscType.createBAAPMount());  EquipmentType.addType(MiscType.createCLBAMyomerBooster());  EquipmentType.addType(MiscType.createISSingleHexECM());  EquipmentType.addType(MiscType.createCLSingleHexECM());  EquipmentType.addType(MiscType.createBattleMechNeuralInterfaceUnit());  EquipmentType.addType(MiscType.createBAISAngelECM());  EquipmentType.addType(MiscType.createBACLAngelECM());  EquipmentType.addType(MiscType.createSimpleCamo());  EquipmentType.addType(MiscType.createParafoil());  EquipmentType.addType(MiscType.createSearchlight());  EquipmentType.addType(MiscType.createBASearchlight());  EquipmentType.addType(MiscType.createISImprovedSensors());  EquipmentType.addType(MiscType.createCLImprovedSensors());  EquipmentType.addType(MiscType.createCLBALightActiveProbe());  EquipmentType.addType(MiscType.createISBALightActiveProbe());  EquipmentType.addType(MiscType.createBARemoteSensorDispenser());  EquipmentType.addType(MiscType.createBACuttingTorch());  EquipmentType.addType(MiscType.createISBASpaceOperationsAdaptation());  EquipmentType.addType(MiscType.createCLBASpaceOperationsAdaptation());  EquipmentType.addType(MiscType.createISDetachableWeaponPack());  EquipmentType.addType(MiscType.createCLDetachableWeaponPack());  EquipmentType.addType(MiscType.createISBAHeatSensor());  EquipmentType.addType(MiscType.createCLBAHeatSensor());  EquipmentType.addType(MiscType.createBAExtendedLifeSupport());  EquipmentType.addType(MiscType.createBAPartialWing());  EquipmentType.addType(MiscType.createISBAJumpBooster());  EquipmentType.addType(MiscType.createCLBAJumpBooster());  EquipmentType.addType(MiscType.createISBAMechanicalJumpBooster());  EquipmentType.addType(MiscType.createCLBAMechanicalJumpBooster());  EquipmentType.addType(MiscType.createCLBAFuelTank());  EquipmentType.addType(MiscType.createISBAFuelTank());  EquipmentType.addType(MiscType.createLaserMicrophone());  EquipmentType.addType(MiscType.createBAPowerPack());  EquipmentType.addType(MiscType.createShotgunMicrophone());  EquipmentType.addType(MiscType.createISBAMineDispenser());  EquipmentType.addType(MiscType.createBAMissionEquipStorage());  EquipmentType.addType(MiscType.createAmphibiousChassis());  EquipmentType.addType(MiscType.createArmoredChassis());  EquipmentType.addType(MiscType.createBicycleModification());  EquipmentType.addType(MiscType.createConvertibleModification());  EquipmentType.addType(MiscType.createISDuneBuggyChassis());  EquipmentType.addType(MiscType.createCLDuneBuggyChassis());  EquipmentType.addType(MiscType.createEnviromentalSealedChassis());  EquipmentType.addType(MiscType.createHydroFoilChassisModification());  EquipmentType.addType(MiscType.createMonocycleModification());  EquipmentType.addType(MiscType.createISOffRoadChassis());  EquipmentType.addType(MiscType.createCLOffRoadChassis());  EquipmentType.addType(MiscType.createPropChassisModification());  EquipmentType.addType(MiscType.createSnomobileChassis());  EquipmentType.addType(MiscType.createSTOLChassisMod());  EquipmentType.addType(MiscType.createSubmersibleChassisMod());  EquipmentType.addType(MiscType.createTractorModification());  EquipmentType.addType(MiscType.createTrailerModification());  EquipmentType.addType(MiscType.createUltraLightChassisModification());  EquipmentType.addType(MiscType.createVSTOLChassisMod());  EquipmentType.addType(MiscType.createBasicFireControl());  EquipmentType.addType(MiscType.createAdvancedFireControl());  EquipmentType.addType(MiscType.createISMineSweeper());  EquipmentType.addType(MiscType.createClanMineSweeper());  EquipmentType.addType(MiscType.createISMobileFieldBase());  EquipmentType.addType(MiscType.createCLMobileFieldBase());  EquipmentType.addType(MiscType.createElectricDischargeArmor());  EquipmentType.addType(MiscType.createISPrototypeJumpJet());  EquipmentType.addType(MiscType.createISPrototypeImprovedJumpJet());  EquipmentType.addType(MiscType.createBoobyTrap());  EquipmentType.addType(MiscType.createRefuelingDrogue());  EquipmentType.addType(MiscType.createBulldozer());  EquipmentType.addType(MiscType.createExternalStoresHardpoint());  EquipmentType.addType(MiscType.createManipulator());  EquipmentType.addType(MiscType.create20mLadder());  EquipmentType.addType(MiscType.create40mLadder());  EquipmentType.addType(MiscType.create60mLadder());  EquipmentType.addType(MiscType.create80mLadder());  EquipmentType.addType(MiscType.create100mLadder());  EquipmentType.addType(MiscType.createMaritimeLifeboat());  EquipmentType.addType(MiscType.createAntiPenetrativeAblation());  EquipmentType.addType(MiscType.createISHeatDissipating());  EquipmentType.addType(MiscType.createCLHeatDissipating());  EquipmentType.addType(MiscType.createISImpactResistant());  EquipmentType.addType(MiscType.createISBallisticReinforced());  EquipmentType.addType(MiscType.createHarJelII());  EquipmentType.addType(MiscType.createHarJelIII());  EquipmentType.addType(MiscType.createRadicalHeatSinkSystem());  EquipmentType.addType(MiscType.createLAMBombBay());  EquipmentType.addType(MiscType.createLightFluidSuctionSystemMech());  EquipmentType.addType(MiscType.createLightFluidSuctionSystem());  EquipmentType.addType(MiscType.createFluidSuctionSystem());  EquipmentType.addType(MiscType.createRISCSuperCooledMyomer());  EquipmentType.addType(MiscType.createRISCViralJammerDecoy());  EquipmentType.addType(MiscType.createRISCViralJammerHoming());  EquipmentType.addType(MiscType.createDroneControlConsole());  EquipmentType.addType(MiscType.createRISCLaserPulseModule());  EquipmentType.addType(MiscType.createISRemoteDroneCommandConsole());  EquipmentType.addType(MiscType.createRISCEmergencyCoolantSystem());}  }
class C{  public TextParserX(){  m_nullTextString="";  m_nullNumberString="";  m_nullDateTimeString="";  m_decimalSeparator=',';  m_datetimePattern="dd-MM-yyyy HH:mm:ss";  m_datePattern="dd-MM-yyyy";  m_timePattern="HH:mm:ss";}  }
class C{  public boolean isEmpty(){  return indexedEvents.isEmpty();}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  public boolean isDateVisible(){  return null == dateVisible ? _dateVisible : dateVisible.get();}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == NamedImportSpecifier.class) {switch (baseOperationID) {case N4JSPackage.NAMED_IMPORT_SPECIFIER___IS_DEFAULT_IMPORT:      return N4JSPackage.DEFAULT_IMPORT_SPECIFIER___IS_DEFAULT_IMPORT;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private SimplePanel createTitleWidget(){  SimplePanel titleWrapper=new SimplePanel();  Label titleLabel=new Label();  titleWrapper.add(titleLabel);  titleWrapper.setStyleName(resources.notificationCss().notificationTitleWrapper());  titleWrapper.ensureDebugId(TITLE_DBG_ID + notification.getId());  return titleWrapper;}  }
class C{  private static ImmutableMap<Integer,Integer> read(String file_name){  final ImmutableMap.Builder<Integer,Integer> builder=ImmutableMap.builder();  int lineno=0;  try {    for (    String line : new LineReader(file_name,false)) {      lineno++;      String[] lineComp=line.trim().split("\\s+");      try {        builder.put(Vocabulary.id(lineComp[0]),Vocabulary.id(lineComp[1]));      } catch (      java.lang.ArrayIndexOutOfBoundsException e) {        LOG.warn("bad vocab line #{} '{}'. skipping!",lineno,line);        LOG.warn(e.getMessage(),e);      }    }  } catch (  IOException e) {    throw new RuntimeException(e);  }  return builder.build();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public Uri insert(Uri uri,ContentValues values){  if (uri == null) {    LogUtils.log(this,Log.WARN,NULL_URI_FORMAT_STRING);    return null;  }switch (sUriMatcher.match(uri)) {case LABELS:    initializeDatabaseIfNull();  if (values == null) {    return null;  }if (values.containsKey(LabelsTable.KEY_ID)) {  LogUtils.log(this,Log.WARN,"Label ID must be assigned by the database.");  return null;}long rowId=mDatabase.insert(LabelsTable.TABLE_NAME,null,values);if (rowId < 0) {LogUtils.log(this,Log.WARN,"Failed to insert label.");return null;} else {return ContentUris.withAppendedId(LABELS_CONTENT_URI,rowId);}default :LogUtils.log(this,Log.WARN,UNKNOWN_URI_FORMAT_STRING,uri);return null;}}  }
class C{  public static boolean isApplicationInstalled(Context context,String packageName){  PackageManager pm=context.getPackageManager();  try {    pm.getPackageInfo(packageName,PackageManager.GET_ACTIVITIES);    return true;  } catch (  PackageManager.NameNotFoundException e) {    return false;  }}  }
class C{  public static boolean validateNotStdout(File outfile){  if (isStdio(outfile)) {    Diagnostic.error("This command does not support sending output to stdout");    return false;  }  return true;}  }
class C{  public static Intent newDetailsActivityIntent(Context context,SearchResult searchResult){  DetailsActivityExtras extras=new DetailsActivityExtras();  extras.searchResult=searchResult;  Intent intent=new Intent(context,DetailsActivity.class);  intent.putExtras(extras.buildBundle());  return intent;}  }
class C{  public static int intersectLineLine(Line2D a,Line2D b,Point2D intersect){  double a1x=a.getX1(), a1y=a.getY1();  double a2x=a.getX2(), a2y=a.getY2();  double b1x=b.getX1(), b1y=b.getY1();  double b2x=b.getX2(), b2y=b.getY2();  return intersectLineLine(a1x,a1y,a2x,a2y,b1x,b1y,b2x,b2y,intersect);}  }
class C{  public boolean isExported(){  throw new UnsupportedOperationException();}  }
class C{  private void configurationLoad(boolean attemptUpdate){  successfulLoad=true;  Logger logger=this.getLogger();  logger.info("Backing up and loading configuration files...");  try {    config=fileManager.getNewConfig("config.yml");  } catch (  IOException e) {    this.getLogger().log(Level.SEVERE,"Error while loading configuration file: ",e);    successfulLoad=false;  }catch (  InvalidConfigurationException e) {    logger.severe("Error while loading configuration file, disabling plugin.");    logger.log(Level.SEVERE,"Verify your syntax by visiting yaml-online-parser.appspot.com and using the following logs: ",e);    successfulLoad=false;    overrideDisable=true;    this.getServer().getPluginManager().disablePlugin(this);    return;  }  try {    lang=fileManager.getNewConfig(config.getString("LanguageFileName","lang.yml"));  } catch (  IOException e) {    this.getLogger().log(Level.SEVERE,"Error while loading language file: ",e);    successfulLoad=false;  }catch (  InvalidConfigurationException e) {    logger.severe("Error while loading language file, disabling plugin.");    this.getLogger().log(Level.SEVERE,"Verify your syntax by visiting yaml-online-parser.appspot.com and using the following logs: ",e);    successfulLoad=false;    overrideDisable=true;    this.getServer().getPluginManager().disablePlugin(this);    return;  }  backupFiles();  if (attemptUpdate) {    fileUpdater.updateOldConfiguration();    fileUpdater.updateOldLanguage();  }  logger.info("Loading configs, registering permissions and initialising command modules...");  extractParameters();  registerPermissions();  initialiseCommands();  if (achieveDistanceRunnable != null)   achieveDistanceRunnable.extractAchievementsFromConfig();  if (achievePlayTimeRunnable != null)   achievePlayTimeRunnable.extractAchievementsFromConfig();  if (xpListener != null)   xpListener.extractAchievementsFromConfig();  if (!config.getBoolean("CheckForUpdate",true)) {    updateChecker=null;  }  logAchievementStats();}  }
class C{  public Method method(int opcode,Object obj,String name,Object... params){  if (obj instanceof String) {    String cls=MappingHandler.INSTANCE.getClassMapping((String)obj);    String desc=MappingHandler.INSTANCE.getClassMapping(this.patcher.methodDesc(params));    this.insnList.add(new MethodInsnNode(opcode,cls,MappingHandler.INSTANCE.getMethodMapping(cls,name,desc),desc,opcode == Opcodes.INVOKEINTERFACE));  }  return this;}  }
class C{  public static float circleDown(float x){  return 1.0f - (float)Math.sqrt(1 - x * x);}  }
class C{  public boolean copyValue(FileAttribute attr){  if (attr == null) {    return false;  }  attr.setFileSize(size);  attr.setResourceID(resourceId);  attr.setOwnerName(ownerName);  attr.setUpdateTime(lastUpdateTime);  attr.setRegistrationId(id);  attr.setType(type);  attr.setChecksum(checksum);  attr.setCost(cost);  attr.setMasterCopy(masterCopy);  attr.setReadOnly(readOnly);  attr.setName(name);  attr.setCreationTime(creationTime);  return true;}  }
class C{  public static DefaultTetradLoggerConfig serializableInstance(){  return new DefaultTetradLoggerConfig();}  }
class C{  public void clearRect(int x,int y,int width,int height){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Clearing rect: " + new Rectangle(x,y,width,height));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.clearRect(x,y,width,height);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.clearRect(x,y,width,height);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.clearRect(x,y,width,height);}  }
class C{  @Override public List<WorkOrder> searchWOToView(final Map<String,Object> criteriaMap){  logger.debug("-------------------------Inside searchWOToView-----------------------");  return searchWO(criteriaMap);}  }
class C{  public void run(){  while (this.isRunning) {    try {synchronized (this) {        while (sipStack.maxConnections != -1 && this.nConnections >= sipStack.maxConnections) {          try {            this.wait();            if (!this.isRunning)             return;          } catch (          InterruptedException ex) {            break;          }        }        this.nConnections++;      }      Socket newsock=sock.accept();      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Accepting new connection!");      incomingTlsMessageChannels.add(new TLSMessageChannel(newsock,sipStack,this));    } catch (    SocketException ex) {      if (this.isRunning) {        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logError("Fatal - SocketException occured while Accepting connection",ex);        this.isRunning=false;        break;      }    }catch (    SSLException ex) {      this.isRunning=false;      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logError("Fatal - SSSLException occured while Accepting connection",ex);      break;    }catch (    IOException ex) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logError("Problem Accepting Connection",ex);      continue;    }catch (    Exception ex) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logError("Unexpected Exception!",ex);    }  }}  }
class C{  public Vector processSortKeys(ElemForEach foreach,int sourceNodeContext) throws TransformerException {  Vector keys=null;  XPathContext xctxt=m_xcontext;  int nElems=foreach.getSortElemCount();  if (nElems > 0)   keys=new Vector();  for (int i=0; i < nElems; i++) {    ElemSort sort=foreach.getSortElem(i);    String langString=(null != sort.getLang()) ? sort.getLang().evaluate(xctxt,sourceNodeContext,foreach) : null;    String dataTypeString=sort.getDataType().evaluate(xctxt,sourceNodeContext,foreach);    if (dataTypeString.indexOf(":") >= 0)     System.out.println("TODO: Need to write the hooks for QNAME sort data type"); else     if (!(dataTypeString.equalsIgnoreCase(Constants.ATTRVAL_DATATYPE_TEXT)) && !(dataTypeString.equalsIgnoreCase(Constants.ATTRVAL_DATATYPE_NUMBER)))     foreach.error(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_DATATYPE,dataTypeString});    boolean treatAsNumbers=((null != dataTypeString) && dataTypeString.equals(Constants.ATTRVAL_DATATYPE_NUMBER)) ? true : false;    String orderString=sort.getOrder().evaluate(xctxt,sourceNodeContext,foreach);    if (!(orderString.equalsIgnoreCase(Constants.ATTRVAL_ORDER_ASCENDING)) && !(orderString.equalsIgnoreCase(Constants.ATTRVAL_ORDER_DESCENDING)))     foreach.error(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_ORDER,orderString});    boolean descending=((null != orderString) && orderString.equals(Constants.ATTRVAL_ORDER_DESCENDING)) ? true : false;    AVT caseOrder=sort.getCaseOrder();    boolean caseOrderUpper;    if (null != caseOrder) {      String caseOrderString=caseOrder.evaluate(xctxt,sourceNodeContext,foreach);      if (!(caseOrderString.equalsIgnoreCase(Constants.ATTRVAL_CASEORDER_UPPER)) && !(caseOrderString.equalsIgnoreCase(Constants.ATTRVAL_CASEORDER_LOWER)))       foreach.error(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{Constants.ATTRNAME_CASEORDER,caseOrderString});      caseOrderUpper=((null != caseOrderString) && caseOrderString.equals(Constants.ATTRVAL_CASEORDER_UPPER)) ? true : false;    } else {      caseOrderUpper=false;    }    keys.addElement(new NodeSortKey(this,sort.getSelect(),treatAsNumbers,descending,langString,caseOrderUpper,foreach));  }  return keys;}  }
class C{  public LayerHandler(Layer[] layers){  init(layers);}  }
class C{  public static boolean bytesEqual(byte[] a1,byte[] a2){  if (a1 == a2) {    return true;  } else   if (a1 == null || a2 == null) {    return false;  } else   if (a1.length != a2.length) {    return false;  } else {    for (int i=0; i < a1.length; i++)     if (a1[i] != a2[i])     return false;  }  return true;}  }
class C{  public final boolean isString(){  return (m_Type == STRING);}  }
class C{  @Override public Document build(String content,String uri) throws ParsingException, ValidityException, IOException {  return build(new StringReader(content),uri);}  }
class C{  public boolean addUndirectedEdge(Node node1,Node node2){  return addEdge(Edges.undirectedEdge(node1,node2));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.047 -0500",hash_original_method="0BAFEFFE1F4A4A29CFC7D3BD2B2D732D",hash_generated_method="5463C664C45B30B1791965FF58ACADD6") private void write(byte[] buffer,int offset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (streaming) {    while (byteCount > 0) {      int bytesWritten=IoBridge.sendto(fd,buffer,offset,byteCount,0,null,0);      byteCount-=bytesWritten;      offset+=bytesWritten;    }  } else {    IoBridge.sendto(fd,buffer,offset,byteCount,0,address,port);  }}  }
class C{  protected static <T extends Extension>T createExtensionInstance(Class<T> extClass) throws ParseException {  try {    return extClass.newInstance();  } catch (  InstantiationException e) {    throw new ParseException(CoreErrorDomain.ERR.cantCreateExtension,e);  }catch (  IllegalAccessException e) {    throw new ParseException(CoreErrorDomain.ERR.cantCreateExtension,e);  }}  }
class C{  public java.lang.StringBuffer insert(int offset,java.lang.String str){  return null;}  }
class C{  private void handleMissingComputes(Collection<String> allComputeLinks){  Collection<String> missingComputeLinks=new HashSet<>(allComputeLinks);  missingComputeLinks.removeAll(this.result.computesByLink.keySet());  if (missingComputeLinks.isEmpty()) {    this.completionHandler.accept(this.result);    return;  }  Query query=Query.Builder.create().addKindFieldClause(ComputeState.class).addInClause(ServiceDocument.FIELD_NAME_SELF_LINK,missingComputeLinks).build();  QueryTask queryTask=QueryTask.Builder.createDirectTask().setQuery(query).addOption(QueryOption.EXPAND_CONTENT).build();  this.host.sendRequest(Operation.createPost(this.host,ServiceUriPaths.CORE_QUERY_TASKS).setBody(queryTask).setReferer(this.host.getUri()).setCompletion(null));}  }
class C{  static int encodeHash(long hash,int p){  final long e=hash >>> (64 - P2);  final long encoded;  if ((e & mask(P2 - p)) == 0) {    final int runLen=1 + Math.min(Long.numberOfLeadingZeros(hash << P2),64 - P2);    encoded=(e << 7) | (runLen << 1) | 1;  } else {    encoded=e << 1;  }  assert PackedInts.bitsRequired(encoded) <= 32;  assert encoded != 0;  return (int)encoded;}  }
class C{  public MClick(Properties ctx,int W_Click_ID,String trxName){  super(ctx,W_Click_ID,trxName);  if (W_Click_ID == 0)   setProcessed(false);}  }
class C{  private void processNewPort(DatapathId sw,OFPort p){  if (isLinkDiscoverySuppressed(sw,p)) {    return;  }  IOFSwitch iofSwitch=switchService.getSwitch(sw);  if (iofSwitch == null) {    return;  }  NodePortTuple npt=new NodePortTuple(sw,p);  discover(sw,p);  addToQuarantineQueue(npt);}  }
class C{  public String sort(String inputFileName) throws IOException {  sortInfo=new SortInfo();  sortInfo.totalTime=System.currentTimeMillis();  List<String> segments=new ArrayList<>();  int[] levelCounts=new int[1];  TrackingDirectoryWrapper trackingDir=new TrackingDirectoryWrapper(dir);  boolean success=false;  try (ByteSequencesReader is=getReader(dir.openChecksumInput(inputFileName,IOContext.READONCE),inputFileName)){    int lineCount;    while ((lineCount=readPartition(is)) > 0) {      segments.add(sortPartition(trackingDir));      sortInfo.tempMergeFiles++;      sortInfo.lineCount+=lineCount;      levelCounts[0]++;      int mergeLevel=0;      while (levelCounts[mergeLevel] == maxTempFiles) {        mergePartitions(trackingDir,segments);        if (mergeLevel + 2 > levelCounts.length) {          levelCounts=ArrayUtil.grow(levelCounts,mergeLevel + 2);        }        levelCounts[mergeLevel + 1]++;        levelCounts[mergeLevel]=0;        mergeLevel++;      }    }    while (segments.size() > 1) {      mergePartitions(trackingDir,segments);    }    String result;    if (segments.isEmpty()) {      try (IndexOutput out=trackingDir.createTempOutput(tempFileNamePrefix,"sort",IOContext.DEFAULT)){        CodecUtil.writeFooter(out);        result=out.getName();      }     } else {      result=segments.get(0);    }    assert trackingDir.getCreatedFiles().size() == 1 && trackingDir.getCreatedFiles().contains(result);    sortInfo.totalTime=System.currentTimeMillis() - sortInfo.totalTime;    CodecUtil.checkFooter(is.in);    success=true;    return result;  }  finally {    if (success == false) {      IOUtils.deleteFilesIgnoringExceptions(trackingDir,trackingDir.getCreatedFiles());    }  }}  }
class C{  public Max4(){  super("max4",4);}  }
class C{  private void writeMetricsSection(ByteBuffer dataFileBuffer,PcpMetricInfo info,MmvMetricType metricType){  int originalPosition=dataFileBuffer.position();  dataFileBuffer.put(info.getMetricName().getBytes(PCP_CHARSET));  dataFileBuffer.put((byte)0);  dataFileBuffer.position(originalPosition + METRIC_NAME_LIMIT + 1);  dataFileBuffer.putInt(info.getId());  dataFileBuffer.putInt(metricType.getIdentifier());  dataFileBuffer.putInt(info.getSemantics().getPcpValue());  dataFileBuffer.putInt(UnitMapping.getDimensions(info.getUnit(),info.getMetricName()));  if (info.getInstanceDomain() != null) {    dataFileBuffer.putInt(info.getInstanceDomain().getId());  } else {    dataFileBuffer.putInt(DEFAULT_INSTANCE_DOMAIN_ID);  }  dataFileBuffer.putInt(0);  dataFileBuffer.putLong(getStringOffset(info.getShortHelpText()));  dataFileBuffer.putLong(getStringOffset(info.getLongHelpText()));}  }
class C{  public void addInputHash(byte[] hash){  if (nodes != null) {    throw new IllegalStateException("Cannot add inputs to finished tree");  }  inputs.add(hash);}  }
class C{  public DialogAddUser(Dialog owner,ExtensionUserManagement extension,String title){  super(owner,title);}  }
class C{  public void emitop2(int op,int od){  emitop(op);  if (!alive)   return;  emit2(od);switch (op) {case getstatic:    state.push(((Symbol)(pool.pool[od])).erasure(types));  break;case putstatic:state.pop(((Symbol)(pool.pool[od])).erasure(types));break;case new_:Symbol sym;if (pool.pool[od] instanceof UniqueType) {sym=((UniqueType)(pool.pool[od])).type.tsym;} else {sym=(Symbol)(pool.pool[od]);}state.push(uninitializedObject(sym.erasure(types),cp - 3));break;case sipush:state.push(syms.intType);break;case if_acmp_null:case if_acmp_nonnull:case ifeq:case ifne:case iflt:case ifge:case ifgt:case ifle:state.pop(1);break;case if_icmpeq:case if_icmpne:case if_icmplt:case if_icmpge:case if_icmpgt:case if_icmple:case if_acmpeq:case if_acmpne:state.pop(2);break;case goto_:markDead();break;case putfield:state.pop(((Symbol)(pool.pool[od])).erasure(types));state.pop(1);break;case getfield:state.pop(1);state.push(((Symbol)(pool.pool[od])).erasure(types));break;case checkcast:{state.pop(1);Object o=pool.pool[od];Type t=(o instanceof Symbol) ? ((Symbol)o).erasure(types) : types.erasure((((UniqueType)o).type));state.push(t);break;}case ldc2w:state.push(typeForPool(pool.pool[od]));break;case instanceof_:state.pop(1);state.push(syms.intType);break;case ldc2:state.push(typeForPool(pool.pool[od]));break;case jsr:break;default :throw new AssertionError(mnem(op));}}  }
class C{  public synchronized void process(E event,int taskId) throws InterruptedException {  assertNotCancelled();  for (int i=watchList.size() - 1; i >= 0; i--) {    Watch<E> watch=watchList.get(i);    if (watch.isDone())     watchList.remove(watch); else     if (watch.offer(event,taskId)) {      if (logger.isDebugEnabled()) {        logger.debug("Watch succeeded: taskId=" + taskId + " watch="+ watch.toString());      }      WatchAction<E> action=watch.getAction();      if (action != null) {        action.matched(event,taskId);      }      if (watch.isDone()) {        if (logger.isDebugEnabled()) {          logger.debug("Watch completed: watch=" + watch.toString());        }        watchList.remove(watch);      }    }  }}  }
class C{  public static void logPromoTapsForNeverOpened(int promoTaps){  RecordHistogram.recordCountHistogram("Search.ContextualSearchPromoTapsForNeverOpened",promoTaps);}  }
class C{  public void enumConstValue(String typeName,String constName) throws IOException {  enumConstValue(pool.addUtf8Info(typeName),pool.addUtf8Info(constName));}  }
class C{  void updateMatrixMastPanel(){  if ((!Bundle.getMessage("MatrixCtlMast").equals(signalMastDriver.getSelectedItem()))) {    return;  }  matrixAspect=new HashMap<String,MatrixAspectPanel>(10);  String mastType=mastNames.get(mastBox.getSelectedIndex()).getName();  mastType=mastType.substring(11,mastType.indexOf(".xml"));  jmri.implementation.DefaultSignalAppearanceMap sigMap=jmri.implementation.DefaultSignalAppearanceMap.getMap(sigsysname,mastType);  java.util.Enumeration<String> aspects=sigMap.getAspects();  SignalSystem sigsys=InstanceManager.getDefault(jmri.SignalSystemManager.class).getSystem(sigsysname);  while (aspects.hasMoreElements()) {    String aspect=aspects.nextElement();    MatrixAspectPanel aspectpanel=new MatrixAspectPanel(aspect);    matrixAspect.put(aspect,aspectpanel);  }  matrixMastPanel.removeAll();  matrixMastPanel.setLayout(new jmri.util.javaworld.GridLayout2(matrixAspect.size() + 5,2));  JPanel turnoutpanel=new JPanel();  JPanel output1panel=new JPanel();  output1panel.add(turnoutBox1);  TitledBorder border1=BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black));  border1.setTitle(Bundle.getMessage("MatrixOutputLabel") + "1 ");  output1panel.setBorder(border1);  turnoutpanel.add(output1panel);  JPanel output2panel=new JPanel();  output2panel.add(turnoutBox2);  TitledBorder border2=BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black));  border2.setTitle(Bundle.getMessage("MatrixOutputLabel") + "2 ");  output2panel.setBorder(border2);  turnoutpanel.add(output2panel);  JPanel output3panel=new JPanel();  output3panel.add(turnoutBox3);  TitledBorder border3=BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black));  border3.setTitle(Bundle.getMessage("MatrixOutputLabel") + "3 ");  output3panel.setBorder(border3);  turnoutpanel.add(output3panel);  JPanel output4panel=new JPanel();  output4panel.add(turnoutBox4);  TitledBorder border4=BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black));  border4.setTitle(Bundle.getMessage("MatrixOutputLabel") + "4 ");  output4panel.setBorder(border4);  turnoutpanel.add(output4panel);  JPanel output5panel=new JPanel();  output5panel.add(turnoutBox5);  TitledBorder border5=BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black));  border5.setTitle(Bundle.getMessage("MatrixOutputLabel") + "5 ");  output5panel.setBorder(border5);  turnoutpanel.add(output5panel);  output2panel.setVisible(bitNum > 1);  output3panel.setVisible(bitNum > 2);  output4panel.setVisible(bitNum > 3);  output5panel.setVisible(bitNum > 4);  matrixMastPanel.add(turnoutpanel);  UnLitCheck2.setVisible(bitNum > 1);  UnLitCheck3.setVisible(bitNum > 2);  UnLitCheck4.setVisible(bitNum > 3);  UnLitCheck5.setVisible(bitNum > 4);  JPanel matrixHeader=new JPanel();  JLabel matrixHeaderLabel=new JLabel(Bundle.getMessage("AspectMatrixHeaderLabel",bitNum),JLabel.CENTER);  matrixHeader.add(matrixHeaderLabel);  matrixHeaderLabel.setToolTipText(Bundle.getMessage("AspectMatrixHeaderTooltip"));  matrixMastPanel.add(matrixHeader);  for (  String aspect : matrixAspect.keySet()) {    matrixMastPanel.add(matrixAspect.get(aspect).getPanel());  }  if ((matrixAspect.size() & 1) == 1) {    matrixMastPanel.add(new JLabel());  }  matrixMastPanel.add(resetPreviousState);  resetPreviousState.setToolTipText(Bundle.getMessage("ResetPreviousToolTip"));  JPanel matrixCopyPanel=new JPanel();  matrixCopyPanel.setLayout(new FlowLayout(FlowLayout.LEADING));  matrixCopyPanel.add(new JLabel(Bundle.getMessage("MatrixMastCopyAspectBits") + ":"));  matrixCopyPanel.add(copyFromMastSelection());  matrixMastPanel.add(matrixCopyPanel);}  }
class C{  public static ReadStreamOld openRead(String path) throws IOException {  return VfsOld.lookup(path).openRead();}  }
class C{  public CircleFlowIndicator(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.CircleFlowIndicator);  int activeType=a.getInt(R.styleable.CircleFlowIndicator_activeType,STYLE_FILL);  int activeDefaultColor=0xFFFFFFFF;  int activeColor=a.getColor(R.styleable.CircleFlowIndicator_activeColor,activeDefaultColor);  int inactiveType=a.getInt(R.styleable.CircleFlowIndicator_inactiveType,STYLE_STROKE);  int inactiveDefaultColor=0x44FFFFFF;  int inactiveColor=a.getColor(R.styleable.CircleFlowIndicator_inactiveColor,inactiveDefaultColor);  radius=a.getDimension(R.styleable.CircleFlowIndicator_radius,4.0f);  circleSeparation=a.getDimension(R.styleable.CircleFlowIndicator_circleSeparation,2 * radius + radius);  activeRadius=a.getDimension(R.styleable.CircleFlowIndicator_activeRadius,0.5f);  fadeOutTime=a.getInt(R.styleable.CircleFlowIndicator_fadeOut,0);  mCentered=a.getBoolean(R.styleable.CircleFlowIndicator_centered,false);  initColors(activeColor,inactiveColor,activeType,inactiveType);}  }
class C{  private void checkSerialVersionUID(JCClassDecl tree,ClassSymbol c){  Scope.Entry e=c.members().lookup(names.serialVersionUID);  while (e.scope != null && e.sym.kind != VAR)   e=e.next();  if (e.scope == null) {    log.warning(LintCategory.SERIAL,tree.pos(),"missing.SVUID",c);    return;  }  VarSymbol svuid=(VarSymbol)e.sym;  if ((svuid.flags() & (STATIC | FINAL)) != (STATIC | FINAL))   log.warning(LintCategory.SERIAL,TreeInfo.diagnosticPositionFor(svuid,tree),"improper.SVUID",c); else   if (!svuid.type.hasTag(LONG))   log.warning(LintCategory.SERIAL,TreeInfo.diagnosticPositionFor(svuid,tree),"long.SVUID",c); else   if (svuid.getConstValue() == null)   log.warning(LintCategory.SERIAL,TreeInfo.diagnosticPositionFor(svuid,tree),"constant.SVUID",c);}  }
class C{  @Override protected void configureCurrentHandlerHook(int dialogType){  super.configureCurrentHandlerHook(dialogType);  if (m_CurrentHandler != null) {    if (getSelectedFile() != null)     ((FileBasedMeasurementEvaluationStatisticsExporter)m_CurrentHandler).setFile(getSelectedFile());  }}  }
class C{  public BytecodeVariable defineVariable(Variable v,boolean initFromStack){  return defineVariable(v,v.getOriginType(),initFromStack);}  }
class C{  public void addProfile(KeyDecodingProfile profile){  for (  CharacterPattern pattern : profile.getPatterns()) {synchronized (bytePatterns) {      bytePatterns.remove(pattern);      bytePatterns.add(pattern);    }  }}  }
class C{  public BaseVocabularyDecl(final Object... uris){  if (uris == null) {    this.uris=new URI[0];  } else {    this.uris=new URI[uris.length];    for (int i=0; i < uris.length; i++) {      if (uris[i] instanceof URI) {        this.uris[i]=(URI)uris[i];      } else       if (uris[i] instanceof String) {        this.uris[i]=new URIImpl((String)uris[i]);      } else {        throw new IllegalArgumentException("URIs or Strings only: " + uris[i]);      }    }  }}  }
class C{  @Override public void updateAlias(String alias,Application application,String serverPort){  String dockerManagerIP=application.getManagerIp();  JedisPool pool=null;  Jedis jedis=null;  try {    pool=new JedisPool(new JedisPoolConfig(),redisIp,Integer.parseInt(redisPort),3000);    jedis=pool.getResource();    String frontend="frontend:" + alias.toLowerCase();    jedis.lset(frontend,1,"http://" + dockerManagerIP + ":"+ serverPort);  } catch (  JedisConnectionException e) {    logger.error("HipacheRedisUtils Exception",e);  } finally {    if (jedis != null) {      pool.destroy();    }  }}  }
class C{  public static Type intersectionOfSupertypes(TypeDeclaration td){  Type extendedType=td.getExtendedType();  List<Type> satisfiedTypes=td.getSatisfiedTypes();  if (satisfiedTypes.isEmpty()) {    return extendedType == null ? td.getUnit().getAnythingType() : extendedType;  }  List<Type> list=new ArrayList<Type>(satisfiedTypes.size() + 1);  if (extendedType != null) {    list.add(extendedType);  }  list.addAll(satisfiedTypes);  Unit unit=td.getUnit();  IntersectionType it=new IntersectionType(unit);  it.setSatisfiedTypes(list);  return it.getType();}  }
class C{  public boolean match(TypeParameter node,Object other){  if (!(other instanceof TypeParameter)) {    return false;  }  TypeParameter o=(TypeParameter)other;  return safeSubtreeMatch(node.getName(),o.getName()) && safeSubtreeListMatch(node.typeBounds(),o.typeBounds());}  }
class C{  public void fixPaths(char separator){  if (igniteHome != null)   igniteHome=igniteHome.replace('\\',separator).replace('/',separator);  if (script != null)   script=script.replace('\\',separator).replace('/',separator);  if (cfg != null)   cfg=cfg.replace('\\',separator).replace('/',separator);}  }
class C{  public h5 addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,ReplySender dm,boolean result,Operation op,ReplyException ex,PutMessage sourceMessage,EntryEventImpl ev){  Assert.assertTrue(recipient != null,"PutReplyMessage NULL reply message");  PutReplyMessage m=new PutReplyMessage(processorId,result,op,ex,null,ev.getVersionTag());  if (!sourceMessage.notificationOnly && sourceMessage.requireOldValue) {    ev.exportOldValue(m);  }  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public static boolean[] subarray(boolean[] buffer,int offset,int length){  boolean temp[]=new boolean[length];  System.arraycopy(buffer,offset,temp,0,length);  return temp;}  }
class C{  public void testEncode(){  byte[] expectedReturn=new byte[]{Attribute.XOR_ONLY >> 8,Attribute.XOR_ONLY & 0x00FF,0,0};  byte[] actualReturn=xorOnly.encode();  assertTrue("XorOnly failed to encode",Arrays.equals(expectedReturn,actualReturn));}  }
class C{  public ShardIterator primaryShardIt(){  return new PlainShardIterator(shardId,primaryAsList);}  }
class C{  public Vector<String> wrapComment(String comment,int textSpace){  StringTokenizer commentTokens=new StringTokenizer(comment,"\n",true);  Vector<String> textVector=new Vector<String>(commentTokens.countTokens());  String newLine="\n";  while (commentTokens.hasMoreTokens()) {    String commentToken=commentTokens.nextToken();    int startIndex=0;    int endIndex=textSpace;    if (commentToken.length() < startIndex + textSpace) {      textVector.addElement(commentToken);    } else {      if (log.isDebugEnabled()) {        log.debug("token: /" + commentToken + "/");      }      while (startIndex < commentToken.length()) {        String tokenPiece=commentToken.substring(startIndex,startIndex + textSpace);        if (log.isDebugEnabled()) {          log.debug("loop: /" + tokenPiece + "/ "+ tokenPiece.lastIndexOf(" "));        }        if (tokenPiece.lastIndexOf(" ") == -1) {          textVector.addElement(tokenPiece);          textVector.addElement(newLine);          startIndex+=textSpace;        } else {          endIndex=tokenPiece.lastIndexOf(" ") + 1;          if (log.isDebugEnabled()) {            log.debug("/" + tokenPiece + "/ "+ startIndex+ " "+ endIndex);          }          textVector.addElement(tokenPiece.substring(0,endIndex));          textVector.addElement(newLine);          startIndex+=endIndex;        }        if (commentToken.substring(startIndex).length() < textSpace) {          tokenPiece=commentToken.substring(startIndex);          textVector.addElement(commentToken.substring(startIndex));          startIndex+=textSpace;        }      }    }  }  return textVector;}  }
class C{  public int codePointCount(int beginIndex,int endIndex){  if (beginIndex < 0 || endIndex > count || beginIndex > endIndex) {    throw new IndexOutOfBoundsException();  }  int s=beginIndex + offset;  return Character.codePointCount(value,s,endIndex - beginIndex);}  }
class C{  @Bean public Boolean createQuartzTables(){  return false;}  }
class C{  private static void writeTokenOffsets(String fieldName,View view,JsonObject json){  JsonArray offsetArray=new JsonArray();  for (  Constituent c : view.getConstituents()) {    JsonObject cJ=new JsonObject();    writeString(FORM,c.getSurfaceForm(),cJ);    writeInt(STARTCHAROFFSET,c.getStartCharOffset(),cJ);    writeInt(ENDCHAROFFSET,c.getEndCharOffset(),cJ);    offsetArray.add(cJ);  }  json.add(fieldName,offsetArray);}  }
class C{  protected TemplateVariableResolver(String type,String description){  setType(type);  setDescription(description);}  }
class C{  public JCaret(){  this(DEFAULT_BLINK_TIME,DEFAULT_CARET_COLOR);}  }
class C{  @Override public void processEdge(ObjectReference source,Address slot){  Address target=slot.loadAddress();  for (int j=0; j < registeredDrivers.length; j++) {    registeredDrivers[j].handleReferenceFromImmortalSpace(target);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final void renameAttribute(Attribute att,String name){  renameAttribute(att.index(),name);}  }
class C{  public void expandSettingsPanel(){  try {    final IStatusBarService svc=getService();    if (svc != null) {      svc.expandSettingsPanel();    }  } catch (  RemoteException ex) {    throw new RuntimeException(ex);  }}  }
class C{  public SPQRNodeShutdownHandler(final MicroPipelineManager microPipelineManager,final SPQRResourceManagerClient resourceManagerClient,final String nodeId){  this.microPipelineManager=microPipelineManager;  this.resourceManagerClient=resourceManagerClient;  this.nodeId=nodeId;}  }
class C{  @Override protected void onProgressUpdate(Integer... values){  if (parent != null) {    if (values[0] == ON_CACHE_END) {      parent.onCacheEnd();    } else     if (values[0] == ON_CACHE_INTERRUPTED) {      Log.i(TAG,"Flag ON_CACHE_INTERRUPTED has been set...");      shouldBeStopped=true;      parent.onCacheInterrupted();    } else {      parent.onCacheProgress(taskCount,values[0]);    }  }}  }
class C{  protected void write(DataOutputStream stream) throws Exception {  stream.writeUTF(value);}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  public final void deleteAll() throws AdeException {  deleteTables(getAllTablesInReverseDependencyOrder());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col;  double x, y;  int progress=0;  int a=0;  int i;  double slopeGradient=0;  double aspect=0;  double z=0;  double k=0;  double north=0;  double south=0;  double east=0;  double west=0;  double xRange=0;  double yRange=0;  final double degreesToRadians=Math.PI / 180;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      slopeGradient=Double.parseDouble(args[i]);    } else     if (i == 3) {      aspect=Double.parseDouble(args[i]);    } else     if (i == 4) {      k=Double.parseDouble(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    north=image.getNorth();    south=image.getSouth();    east=image.getEast();    west=image.getWest();    xRange=east - west;    yRange=north - south;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (aspect > 360) {      boolean flag=false;      do {        aspect-=360;        if (aspect <= 360) {          flag=true;        }      } while (!flag);    }    if (aspect > 180) {      aspect-=180;    } else {      aspect+=180;    }    slopeGradient=slopeGradient * degreesToRadians;    aspect=aspect * degreesToRadians;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        x=west + xRange * ((double)col / (cols - 1));        y=north - yRange * ((double)row / (rows - 1));        z=Math.tan(slopeGradient) * Math.sin(aspect) * x + Math.tan(slopeGradient) * Math.cos(aspect) * y + k;        output.setValue(row,col,z);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static final boolean isPDFLinearized(final String pdfUrl){  if (pdfUrl.startsWith("jar")) {    return false;  }  boolean isLinear=false;  final URL url;  final InputStream is;  try {    url=new URL(pdfUrl);    is=url.openStream();    final byte[] buffer=new byte[128];    is.read(buffer);    is.close();    final int len=buffer.length;    for (int i=0; i < len; i++) {      if (buffer[i] == '/' && buffer[i + 1] == 'L' && buffer[i + 2] == 'i' && buffer[i + 3] == 'n' && buffer[i + 4] == 'e' && buffer[i + 5] == 'a' && buffer[i + 6] == 'r') {        isLinear=true;        i=len;      }    }  } catch (  final IOException e) {    LogWriter.writeLog("[PDF] Exception " + e + " scanning URL "+ pdfUrl);  }  return isLinear;}  }
class C{  @Override public Long lrem(final byte[] key,final long count,final byte[] value){  checkIsInMultiOrPipeline();  client.lrem(key,count,value);  return client.getIntegerReply();}  }
class C{  public static <C extends Comparable<?>>Builder<C> builder(){  return new Builder<C>();}  }
class C{  @Override public synchronized void disconnectionNotification(String eventName,Object source){  if (m_listenee == source) {    m_listenee=null;  }}  }
class C{  public static Iterator intersect(Object path,Object regions){  MatchCollector.SetMatchCollector c=new MatchCollector.SetMatchCollector();  Intersection ix=new Intersection(new MatchFilter.MatchParametersMF(MatchParameters.STRICT),c);  ix.consider(path,regions);  return c.iterator();}  }
class C{  private static String unquote(String value){  int valueLength=value.length();  StringBuilder buffer=new StringBuilder(valueLength);  boolean escaped=false;  for (int i=0; i < valueLength; ++i) {    char currentChar=value.charAt(i);    if (!escaped && (currentChar != '\\')) {      buffer.append(currentChar);    } else     if (escaped) {      buffer.append(currentChar);      escaped=false;    } else {      escaped=true;    }  }  return buffer.toString();}  }
class C{  public boolean toIdle(){  return toState(STOPPED_IDLE);}  }
class C{  public void clear(){  try {    Scope scope;    Iterator<Entry<String,Map<String,Scope>>> sit=cfSessionContextes.entrySet().iterator();    Entry<String,Map<String,Scope>> sentry;    Map<String,Scope> context;    Iterator<Entry<String,Scope>> itt;    Entry<String,Scope> e;    PageContext pc=ThreadLocalPageContext.get();    while (sit.hasNext()) {      sentry=sit.next();      context=sentry.getValue();      itt=context.entrySet().iterator();      while (itt.hasNext()) {        e=itt.next();        scope=e.getValue();        scope.release(pc);      }    }    cfSessionContextes.clear();    Iterator<Entry<String,Application>> ait=applicationContextes.entrySet().iterator();    Entry<String,Application> aentry;    while (ait.hasNext()) {      aentry=ait.next();      scope=aentry.getValue();      scope.release(pc);    }    applicationContextes.clear();    if (server != null) {      server.release(pc);      server=null;    }  } catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  public static void enable(){  System.setOut(stdout);}  }
class C{  public void removeBigger(int value){  int targetPosition=Arrays.binarySearch(backingArray,0,numElements,value);  if (targetPosition < 0) {    targetPosition=-targetPosition - 1;  }  numElements=targetPosition;}  }
class C{  public static String replace(String text,String repl,String with,int max){  if ((text == null) || (repl == null) || (with == null)|| (repl.length() == 0)) {    return text;  }  StringBuilder buf=new StringBuilder(text.length());  int start=0, end=0;  while ((end=text.indexOf(repl,start)) != -1) {    buf.append(text.substring(start,end)).append(with);    start=end + repl.length();    if (--max == 0) {      break;    }  }  buf.append(text.substring(start));  return buf.toString();}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  public void onEvent(Event e){  if (e.getTarget() == treeField) {    action_loadTree();    LayoutUtils.sendDeferLayoutEvent(mainLayout,100);  } else   if (e.getTarget() == bAddAll)   action_treeAddAll(); else   if (e.getTarget() == bAdd) {    SimpleListModel model=(SimpleListModel)centerList.getModel();    int i=centerList.getSelectedIndex();    if (i >= 0) {      action_treeAdd((ListItem)model.getElementAt(i));    }  } else   if (e.getTarget() == bDelete) {    SimpleListModel model=(SimpleListModel)centerList.getModel();    int i=centerList.getSelectedIndex();    if (i >= 0) {      action_treeDelete((ListItem)model.getElementAt(i));    }  } else   if (e.getTarget() == bDeleteAll)   action_treeDeleteAll(); else   if (e.getTarget() == centerList)   onListSelection(e); else   if (e.getTarget() == centerTree)   onTreeSelection(e);}  }
class C{  public SimpleConstant(String name,Date dateValue){  if (name == null) {    throw new IllegalArgumentException("name must not be null");  }  this.type=ExpressionType.DATE;  this.name=name;  this.stringValue=null;  this.doubleValue=0;  this.booleanValue=false;  this.dateValue=dateValue;}  }
class C{  public AppCardBuilder(Context context){  appName=getApplicationName(context);  appGooglePlayId=getPackageName(context);}  }
class C{  @Override public void close(){synchronized (this) {    if (this.closed)     return; else     this.closed=true;  }synchronized (packetsToReceive) {    packetsToReceive.notifyAll();  }synchronized (packetsToSend) {    packetsToSend.notifyAll();  }  turnCandidateHarvest.harvester.getStunStack().removeIndicationListener(turnCandidateHarvest.hostCandidate.getTransportAddress(),this);  turnCandidateHarvest.close(this);}  }
class C{  protected CompoundName(Enumeration<String> comps,Properties syntax){  if (syntax == null) {    throw new NullPointerException();  }  mySyntax=syntax;  impl=new NameImpl(syntax,comps);}  }
class C{  @Override public long toTimelineValue(Date date){  return date.getTime();}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.715 -0500",hash_original_method="FB49499CFAFE2E72F27390E6807CB034",hash_generated_method="260C3A1E9B90029916A52C1DCC486CE4") public boolean remove(Object obj){  return this.hlist.remove(obj);}  }
class C{  public static <T>FibonacciHeap<T> merge(FibonacciHeap<T> one,FibonacciHeap<T> two){  FibonacciHeap<T> result=new FibonacciHeap<T>();  result.mMin=mergeLists(one.mMin,two.mMin);  result.mSize=one.mSize + two.mSize;  one.mSize=two.mSize=0;  one.mMin=null;  two.mMin=null;  return result;}  }
class C{  public void initDefaultValues(HUITypeFactory huiTypeFactory){  String[] types=huiTypeFactory.getEntityType(this.entityType).getAllPropertyTypeIDsIncludingGroups();  for (  String type : types) {    PropertyType propertyType=huiTypeFactory.getPropertyType(this.entityType,type);    if (propertyType.isNumericSelect() || propertyType.isBooleanSelect()) {      setNumericValue(propertyType,propertyType.getNumericDefault());    } else     if ((propertyType.isText() || propertyType.isDate() || propertyType.isLine()) && propertyType.getDefaultRule() != null) {      setSimpleValue(propertyType,propertyType.getDefaultRule().getValue());    }  }}  }
class C{  @Override public String toString(String field){  return func.toString();}  }
class C{  public void testEncodingDecodingFullness(){  for (  GridClientCacheFlag f : GridClientCacheFlag.values()) {    if (f == KEEP_BINARIES)     continue;    int bits=GridClientConnection.encodeCacheFlags(Collections.singleton(f));    assertTrue(bits != 0);    boolean out=GridCacheCommandHandler.parseCacheFlags(bits);    assertEquals(out,true);  }}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.363 -0500",hash_original_method="5F7DF598938706B482CEEA679EFAD91B",hash_generated_method="DDB4886C9569A5BFEA0E41041AB2060E") protected byte[] wrap(byte content_type,DataStream dataStream){  byte[] fragment=dataStream.getData(MAX_DATA_LENGTH);  return wrap(content_type,fragment,0,fragment.length);}  }
class C{  public void destroyAds(){  adFetcher.destroyAllAds();}  }
class C{  public CachedRowSet createCopyNoConstraints() throws SQLException {  CachedRowSetImpl crs;  crs=(CachedRowSetImpl)this.createCopy();  crs.initProperties();  try {    crs.unsetMatchColumn(crs.getMatchColumnIndexes());  } catch (  SQLException sqle) {  }  try {    crs.unsetMatchColumn(crs.getMatchColumnNames());  } catch (  SQLException sqle) {  }  return crs;}  }
class C{  public void testExclude() throws IOException {  CharArraySet exclusionSet=new CharArraySet(asSet("tirgiem"),false);  Analyzer a=new LatvianAnalyzer(LatvianAnalyzer.getDefaultStopSet(),exclusionSet);  checkOneTerm(a,"tirgiem","tirgiem");  checkOneTerm(a,"tirgus","tirg");  a.close();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_SETTER_DECLARATION__DECLARED_MODIFIERS:    return getDeclaredModifiers();case N4JSPackage.N4_SETTER_DECLARATION__OWNER:  if (resolve)   return getOwner();return basicGetOwner();case N4JSPackage.N4_SETTER_DECLARATION__ANNOTATION_LIST:return getAnnotationList();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected void assignArray(TestCase test,VariableReference array,int arrayIndex,int position,List<VariableReference> objects) throws ConstructionFailedException {  assert (array instanceof ArrayReference);  ArrayReference arrRef=(ArrayReference)array;  if (!objects.isEmpty() && Randomness.nextDouble() <= Properties.OBJECT_REUSE_PROBABILITY) {    VariableReference choice=Randomness.choice(objects);    logger.debug("Reusing value: " + choice);    ArrayIndex index=new ArrayIndex(test,arrRef,arrayIndex);    Statement st=new AssignmentStatement(test,index,choice);    test.addStatement(st,position);  } else {    int oldLength=test.size();    logger.debug("Attempting generation of object of type " + array.getComponentType());    VariableReference var=attemptGeneration(test,array.getComponentType(),position);    if (!var.isAssignableTo(arrRef.getComponentType())) {      throw new ConstructionFailedException("Error");    }    position+=test.size() - oldLength;    ArrayIndex index=new ArrayIndex(test,arrRef,arrayIndex);    Statement st=new AssignmentStatement(test,index,var);    test.addStatement(st,position);  }}  }
class C{  public static String format(Object value,Type type){  value=decode(value,type);switch (type.getTag()) {case BYTE:    return formatByte((Byte)value);case LONG:  return formatLong((Long)value);case FLOAT:return formatFloat((Float)value);case DOUBLE:return formatDouble((Double)value);case CHAR:return formatChar((Character)value);}if (value instanceof String) return formatString((String)value);return value + "";}  }
class C{  public synchronized boolean isScanError(){  return isError;}  }
class C{  public CThreadComboBox(){  setPreferredSize(new Dimension(130,20));  setRenderer(new CTIDBoxRenderer());}  }
class C{  void expireInvite(final String name){  JComponent button=invites.get(name);  if (button != null) {    inviteContainer.remove(button);    inviteContainer.revalidate();  }  invites.remove(name);}  }
class C{  private void unpackVqShape(int startVal,int[] shapeVec,int[] dst,int numValues){  if (numValues > 0) {    dst[0]=startVal;    dst[1]=startVal;    dst[2]=startVal;    for (int i=3; i < numValues; i++) {      dst[i]=startVal - shapeVec[atrac3p_qu_num_to_seg[i] - 1];    }  }}  }
class C{  int apply(FileChannel channel) throws IOException {  if (isTruncate()) {    channel.truncate(position);    return -1;  }  int len=channel.write(buffer,position);  buffer.flip();  return len;}  }
class C{  public boolean isMmapEnabled(){  return false;}  }
class C{  public static double normalPdf(double[] x,double[] means,double[][] covariance) throws Exception {  if (x.length != means.length) {    throw new Exception("Length of observations must match means");  }  return normalPdf(MatrixUtils.subtract(x,means),covariance);}  }
class C{  @Override public String toString(){  return buf.toString();}  }
class C{  public static void reduceDistance(Shell fixedShell,Shell movingShell){  Rectangle fixed=fixedShell.getBounds();  Rectangle moving=movingShell.getBounds();  int[] fixedLower={fixed.x,fixed.y};  int[] fixedHigher={fixed.x + fixed.width,fixed.y + fixed.height};  int[] movingLower={moving.x,moving.y};  int[] movingSpan={moving.width,moving.height};  for (int i=0; i < 2; ++i) {    if (movingLower[i] + movingSpan[i] < fixedLower[i])     movingLower[i]=fixedLower[i] - movingSpan[i] + 10; else     if (fixedHigher[i] < movingLower[i])     movingLower[i]=fixedHigher[i] - 10;  }  movingShell.setLocation(movingLower[0],movingLower[1]);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean compatible(PdxType other){  if (other == null)   return false;  if (!getClassName().equals(other.getClassName())) {    return false;  }  Collection<PdxField> myFields=getSortedFields();  Collection<PdxField> otherFields=other.getSortedFields();  return myFields.equals(otherFields);}  }
class C{  protected void accept(SocketImpl s) throws IOException {  int timeout=5000;  accept(timeout);}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  public ExtendedClientConfiguration withAlwaysThroughS3(boolean alwaysThroughS3){  setAlwaysThroughS3(alwaysThroughS3);  return this;}  }
class C{  public static List<RegexRange> generateRegexRanges(Collection<Character> charset){  List<RegexRange> regexRangesList=new LinkedList<>();  TreeSet<Character> orderedCharset=new TreeSet<>(charset);  Character start=null;  Character old=null;  for (  Character c : charset) {    if (old == null) {      old=orderedCharset.first();      start=old;      continue;    }    if (((c - old) > 1 || Objects.equals(orderedCharset.last(),c))) {      if ((old - start) > 1) {        regexRangesList.add(new RegexRange(escape(start) + "-" + escape(old)));      }      start=c;    }    old=c;  }  return regexRangesList;}  }
class C{  public String generateRemoteUserName(String media){  IceMediaStream stream=getStream(media);  return (stream == null) ? null : (getLocalUfrag() + ":" + stream.getRemoteUfrag());}  }
class C{  public static int millimeterAsPixel(double mm,Component component){  return mm == 0d ? 0 : getUnitConverter().millimeterAsPixel(mm,component);}  }
class C{  void onFocusChanged(boolean focused){  if (focused) {    if (Float.compare(getAlpha(),1f) != 0) {      startFadeAnimation(1f,0,150,null);    }  } else {    if (Float.compare(getAlpha(),mConfig.taskViewThumbnailAlpha) != 0) {      startFadeAnimation(mConfig.taskViewThumbnailAlpha,0,150,null);    }  }}  }
class C{  public boolean canReplace(){  return false;}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case android.R.id.home:    finish();  return true;default :return super.onOptionsItemSelected(item);}}  }
class C{  public RefactoringStatus perform() throws InterruptedException, InvocationTargetException {  try {    ensureChecked();    if (fPreCheckStatus.hasFatalError()) {      return fPreCheckStatus;    }    RefactoringExecutionHelper helper=new RefactoringExecutionHelper(fRefactoring,RefactoringCore.getConditionCheckingFailedSeverity(),getJavaRenameProcessor().getSaveMode());    RefactoringStatus status=helper.perform(true,true);    fPerformChangeOperation=helper.getfPerformChangeOperation();    return status;  } catch (  CoreException e) {    throw new InvocationTargetException(e);  }}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    System.out.println("Usage java Exercise_12_18 srcRootDirectory");    System.exit(1);  }  File rootDir=new File(args[0]);  if (!rootDir.isDirectory()) {    System.out.println("Directory " + args[0] + " does not exist");    System.exit(2);  }  ArrayList<File> chapters=getDirectories(rootDir);  while (!chapters.isEmpty()) {    ArrayList<File> files=getFiles(chapters);    insertStatement(files,chapters.get(0));    chapters.remove(0);  }}  }
class C{  public void write(Document doc) throws IOException {  writeDeclaration();  if (doc.getDocType() != null) {    indent();    writeDocType(doc.getDocType());  }  for (int i=0, size=doc.nodeCount(); i < size; i++) {    Node node=doc.node(i);    writeNode(node);  }  writePrintln();  if (autoFlush) {    flush();  }}  }
class C{  private boolean skipNextTRY(){  Assert.isTrue(fToken == Symbols.TokenCATCH || fToken == Symbols.TokenFINALLY);  while (true) {    nextToken();switch (fToken) {case Symbols.TokenRPAREN:case Symbols.TokenRBRACKET:case Symbols.TokenRBRACE:case Symbols.TokenGREATERTHAN:      skipScope();    break;case Symbols.TokenTRY:  return true;case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenLBRACKET:case Symbols.TokenEOF:return false;}}}  }
class C{  UnknownDynamicVariableException(ParserRuleContext ctx,String i18n,Object... arguments){  super(ctx,i18n,arguments);}  }
class C{  public HttpOutputStream(OutputStream out){  super();  this.out=out;}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    if (namespace != null) {      namespace.visit(v);    }    indexExpr.visit(v);  }}  }
class C{  public Builder round(float roundSize){  mParam.roundSize=roundSize;  if (mParam.type != Type.Round) {    mParam.type=Type.Round;  }  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNodeNS04.class,args);}  }
class C{  private int levelOfProofStepLexeme(Token tok){  String im=tok.image;  if (im.substring(1,2).equals("*")) {    return -1;  }  ;  if (im.substring(1,2).equals("+")) {    return -2;  }  ;  return new Integer(im.substring(1,im.indexOf('>'))).intValue();}  }
class C{  protected void close(Connection conn) throws SQLException {  DbUtils.close(conn);}  }
class C{  public static Class loadClass(String className,Class defaultValue){  className=className.trim();  CFMLEngine engine=CFMLEngineFactory.getInstance();  BundleCollection bc=engine.getBundleCollection();  try {    return bc.core.loadClass(className);  } catch (  Throwable t) {  }  Bundle[] bundles=bc.getBundleContext().getBundles();  for (  Bundle b : bundles) {    if (b == bc.core)     continue;    try {      return b.loadClass(className);    } catch (    Throwable t) {    }  }  CFMLEngineFactory factory=engine.getCFMLEngineFactory();  try {    return factory.getClass().getClassLoader().loadClass(className);  } catch (  Throwable t) {  }  Set<String> loaded=new HashSet<String>();  for (  Bundle b : bundles) {    loaded.add(b.getSymbolicName() + "|" + b.getVersion());  }  try {    File dir=factory.getBundleDirectory();    File[] children=dir.listFiles(JAR_EXT_FILTER);    BundleFile bf;    for (int i=0; i < children.length; i++) {      try {        bf=new BundleFile(children[i]);        if (bf.isBundle() && !loaded.contains(bf.getSymbolicName() + "|" + bf.getVersion()) && bf.hasClass(className)) {          Bundle b=null;          try {            b=_loadBundle(bc.getBundleContext(),bf.getFile());          } catch (          IOException e) {          }          if (b != null) {            startIfNecessary(b);            return b.loadClass(className);          }        }      } catch (      Throwable t2) {        t2.printStackTrace();      }    }  } catch (  Throwable t1) {    t1.printStackTrace();  }  return defaultValue;}  }
class C{  public Object peek(int n){  try {    return m_map[m_firstFree - (1 + n)];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public String serverName(){  return serverName;}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  public static LazyPSetX<Long> rangeLong(long start,long end){  return fromStreamS(ReactiveSeq.rangeLong(start,end));}  }
class C{  public Object readMap(Class expectedClass,String type) throws IOException {  Hashtable map=new Hashtable();  if (refs == null)   refs=new Vector();  refs.addElement(map);  while (parseTag()) {    peekTag=true;    Object key=readObject(null);    Object value=readObject(null);    map.put(key,value);  }  if (!sbuf.toString().equals("map"))   throw new BurlapProtocolException("expected </map>");  return map;}  }
class C{  public static NamespaceConfig process(final Map<String,?> config) throws ValidationException {  if (config == null || config.isEmpty()) {    throw new ValidationException("Null or empty top-level JSON object passed");  }  final Context ctx=new Context();  try {    final Map<String,Object> ns=cast(get(config,NAMESPACE,Map.class,ctx));    ctx.push(NAMESPACE);    final Object salt=ns.get(SALT);    final NamespaceConfig nsConf=new NamespaceConfig(get(ns,NAME,String.class,ctx),get(ns,SEGMENTS,Integer.class,ctx),get(ns,UNIT,String.class,ctx),(salt == null ? null : salt.toString()));    nsConf.setConfig(config);    final List<Map<String,Object>> expDefs=cast(get(config,EXPERIMENT_DEFINITIONS,List.class,ctx));    ctx.push(EXPERIMENT_DEFINITIONS);    int i=0;    ctx.push("");    for (    Map<String,Object> expDef : expDefs) {      ctx.replace(format("[%s]",i++));      final Map<String,Object> assign=cast(get(expDef,ASSIGN,Map.class,ctx));      nsConf.defineExperiment(get(expDef,DEFINITION,String.class,ctx),assign);    }    ctx.pop();    ctx.pop();    nsConf.setDefaultExperiment(get(config,DEFAULT_EXPERIMENT,String.class,ctx));    final List<Map<String,Object>> expSeq=cast(get(config,EXPERIMENT_SEQUENCE,List.class,ctx));    ctx.push(EXPERIMENT_SEQUENCE);    i=0;    ctx.push("");    for (    Map<String,Object> srcExp : expSeq) {      ctx.replace(format("[%s]",i++));      final String expName=get(srcExp,NAME,String.class,ctx);      final String action=get(srcExp,ACTION,String.class,ctx);switch (action) {case ACTION_ADD:        nsConf.addExperiment(expName,get(srcExp,DEFINITION,String.class,ctx),get(srcExp,SEGMENTS,Integer.class,ctx));      break;case ACTION_REMOVE:    nsConf.removeExperiment(expName);  break;default :throw new IllegalArgumentException(format("Unrecognized action: %s",action));}}ctx.pop();ctx.pop();if (LOG.isTraceEnabled()) {LOG.trace("NS {} has {} active experiments (based on {} definitions) consuming {} segments out of {} total",nsConf.name,nsConf.getActiveExperimentsCount(),nsConf.getExperimentDefsCount(),nsConf.getUsedSegments(),nsConf.getTotalSegments());}nsConf.noMoreChanges();return nsConf;} catch (IllegalArgumentException e) {final ValidationException ve=new ValidationException(e.getMessage(),e.getCause());ve.setStackTrace(e.getStackTrace());throw ve;}}  }
class C{  public void removeAll(){  setSelectedIndexImpl(-1,true);  int tabCount=getTabCount();  while (tabCount-- > 0) {    removeTabAt(tabCount);  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().removeAttribute("schoolController");  String school=(String)request.getSession().getAttribute("school");  DBSchoolName dbSchoolName=new DBSchoolName();  String schoolName=dbSchoolName.searchName(school);  request.getSession().setAttribute("schoolName",schoolName);  String path="../jsp/signin.jsp";  Cookie[] cookies=request.getCookies();  if (cookies == null) {    response.sendRedirect(path);    return;  }  int i=0;  int len=cookies.length;  for (i=0; i < len; i++) {    Cookie cookie=cookies[i];    if ("userCookie".equalsIgnoreCase(cookie.getName())) {      int id=Integer.parseInt(cookie.getValue());      User user=new UserSql(school).getUser(id);      if (user == null) {        response.sendRedirect("../jsp/signin.jsp");        return;      }      MD5Tool md5Tool=new MD5Tool();      String value=md5Tool.GetMD5Code(md5Tool.GetMD5Code(user.getPassword() + school) + user.getUsername());      int j=0;      for (; j < cookies.length; j++) {        if ("token".equalsIgnoreCase(cookies[j].getName())) {          String token=cookies[j].getValue();          if (value.equals(token)) {            request.getSession().setAttribute("userid",id);            path="ScoreServlet";            break;          }        }      }      if (j == cookies.length) {        i=cookies.length;      }      break;    }  }  response.sendRedirect(path);  return;}  }
class C{  @NotNull private static WhiteSpaceInfo parse(@NotNull CharSequence text,int startOffset,int endOffset,int startColumn,int tabSize){  assert startOffset <= endOffset;  int spaces=0;  int indentSpaces=0;  int lineFeeds=0;  int column=startColumn;  for (int i=startOffset; i < endOffset; i++) {switch (text.charAt(i)) {case LINE_FEED:      lineFeeds++;    spaces=0;  indentSpaces=0;column=0;break;case '\t':int change=tabSize - (column % tabSize);indentSpaces+=change;column+=change;break;default :spaces++;column++;}}return new WhiteSpaceInfo(lineFeeds,indentSpaces,spaces);}  }
class C{  private void cmd_sendMail(){  String to="";  MUser from=MUser.get(Env.getCtx(),Env.getAD_User_ID(Env.getCtx()));  String subject=m_reportEngine.getName();  String message="";  File attachment=null;  try {    attachment=File.createTempFile("mail",".pdf");    m_reportEngine.getPDF(attachment);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  new WEMailDialog(this,Msg.getMsg(Env.getCtx(),"SendMail"),from,to,subject,message,attachment);}  }
class C{  public OMPoly(int[] xPoints,int[] yPoints){  super(RENDERTYPE_XY,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  setLocation(xPoints,yPoints);}  }
class C{  public void testHashCodeDifferentRows(){  Set<Model> set=new HashSet<Model>();  Model m1=new MockModel();  Model m2=new MockModel();  Model m3;  m1.save();  m2.save();  m3=Model.load(MockModel.class,m1.getId());  assertEquals(m1.hashCode(),m3.hashCode());  assertFalse(m1.hashCode() == m2.hashCode());  set.add(m1);  set.add(m2);  set.add(m3);  assertEquals(2,set.size());}  }
class C{  public Entry update() throws IOException, ServiceException {  if (state.service == null) {    throw new ServiceException(CoreErrorDomain.ERR.entryNotAssociated);  }  Link editLink=getEditLink();  if (editLink == null) {    throw new UnsupportedOperationException("Entry cannot be updated");  }  URL editUrl=editLink.getHrefUri().toURL();  return state.service.update(editUrl,this);}  }
class C{  public void append(byte[] src){  append(src,0,src.length);}  }
class C{  @Override public void onCreate(final Bundle savedInstanceState){  super.onCreate(savedInstanceState);  actualCreate(savedInstanceState);}  }
class C{  public static boolean replace(RTextArea textArea,String toFind,String replaceWith,boolean forward,boolean matchCase,boolean wholeWord,boolean regex) throws PatternSyntaxException {  textArea.beginAtomicEdit();  try {    if (regex) {      return regexReplace(textArea,toFind,replaceWith,forward,matchCase,wholeWord);    }    makeMarkAndDotEqual(textArea,forward);    if (find(textArea,toFind,forward,matchCase,wholeWord,false)) {      textArea.replaceSelection(replaceWith);      return true;    }  }  finally {    textArea.endAtomicEdit();  }  return false;}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Map<String,Map<String,String>> joinMasterTranslationLists(File xlifmaster,File lngfile) throws IOException {  final String filename=lngfile.getName();  mainTransLists=loadTranslationsListsFromXliff(xlifmaster);  ConcurrentLog.info("TRANSLATOR","join into master translation file " + filename);  Map<String,Map<String,String>> origTrans=loadTranslationsLists(lngfile);  for (  String transfilename : origTrans.keySet()) {    Map<String,String> origList=origTrans.get(transfilename);    Map<String,String> masterList=mainTransLists.get(transfilename);    for (    String sourcetxt : origList.keySet()) {      if ((masterList != null) && (masterList.isEmpty() || masterList.containsKey(sourcetxt))) {        String origVal=origList.get(sourcetxt);        if (origVal != null && !origVal.isEmpty()) {          addTranslation(transfilename,sourcetxt,origVal);        }      }    }  }  return mainTransLists;}  }
class C{  public static double squareInchToMillis(double area){  return area * INCH_MM * INCH_MM;}  }
class C{  public UserTokenPolicy findUserTokenPolicy(UserTokenType type){  if (UserIdentityTokens == null)   return null;  for (  UserTokenPolicy p : UserIdentityTokens) {    try {      String securityPolicyUri=p.getSecurityPolicyUri();      SecurityPolicy.getSecurityPolicy(securityPolicyUri);    } catch (    ServiceResultException e) {      continue;    }    if (p.getTokenType() != type)     continue;    return p;  }  return null;}  }
class C{  public static File[] convertFileCollectionToFileArray(Collection<File> files){  return files.toArray(new File[files.size()]);}  }
class C{  void cancelExistingAnimation(@NonNull final View view){  int hashCode=view.hashCode();  Animator animator=mAnimators.get(hashCode);  if (animator != null) {    animator.end();    mAnimators.remove(hashCode);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.158 -0500",hash_original_method="D3052CDDAC0630315E0F5E7AF5478D0E",hash_generated_method="1AC90B09F693C4241E7446E01951470C") @DSSafe(DSCat.ANDROID_CALLBACK) @DSVerified public boolean dispatchTouchEvent(MotionEvent ev){  if (mWindow.superDispatchTouchEvent(ev)) {    return true;  }  return onTouchEvent(ev);}  }
class C{  public void removeBean(Object bean){  if (!(bean instanceof SimpleBeanObject))   throw new IllegalArgumentException("not instanceof SimpleBeanObject");  layer.removeObject(((SimpleBeanObject)bean).getId());}  }
class C{  public static void refreshIOSUICache(){  refreshIOSUICache(0,0);}  }
class C{  public DefaultAsyncNemConnector(final HttpMethodClient<ErrorResponseDeserializerUnion> httpClient,final ErrorResponseStrategy errorResponseStrategy){  this.httpClient=httpClient;  this.errorResponseStrategy=errorResponseStrategy;}  }
class C{  public Vector2f(float x,float y){  this.x=x;  this.y=y;}  }
class C{  public IntArray resize(IntArray array,long size){  if (array instanceof BigIntArray) {    return resizeInPlace((BigIntArray)array,size);  } else {    AbstractArray arr=(AbstractArray)array;    final IntArray newArray=newIntArray(size,arr.clearOnResize);    for (long i=0, end=Math.min(size,array.size()); i < end; ++i) {      newArray.set(i,array.get(i));    }    array.close();    return newArray;  }}  }
class C{  public JavaProperty(){}  }
class C{  public static int ubyteToInt(byte b2){  boolean highbit=b2 < 0;  byte b=(byte)(b2 & 0x7f);  int i=(int)b;  if (highbit) {    i+=128;  }  return i;}  }
class C{  public static ContainerListener remove(ContainerListener l,ContainerListener oldl){  return (ContainerListener)removeInternal(l,oldl);}  }
class C{  public static CSRPointer allocateEmpty(long nnz2,long rows) throws DMLRuntimeException {  CSRPointer r=new CSRPointer();  r.nnz=nnz2;  ensureFreeSpace(Sizeof.DOUBLE * nnz2 + Sizeof.INT * (rows + 1) + Sizeof.INT * nnz2);  long t0=System.nanoTime();  cudaMalloc(r.val,Sizeof.DOUBLE * nnz2);  cudaMalloc(r.rowPtr,Sizeof.INT * (rows + 1));  cudaMalloc(r.colInd,Sizeof.INT * nnz2);  Statistics.cudaAllocTime.addAndGet(System.nanoTime() - t0);  Statistics.cudaAllocCount.addAndGet(3);  return r;}  }
class C{  static void zipDirectory(File sourceDirectory,File zipFile) throws IOException {  checkNotNull(sourceDirectory);  checkNotNull(zipFile);  checkArgument(sourceDirectory.isDirectory(),"%s is not a valid directory",sourceDirectory.getAbsolutePath());  checkArgument(!zipFile.exists(),"%s does already exist, files are not being overwritten",zipFile.getAbsolutePath());  Closer closer=Closer.create();  try {    OutputStream outputStream=closer.register(new BufferedOutputStream(new FileOutputStream(zipFile)));    zipDirectory(sourceDirectory,outputStream);  } catch (  Throwable t) {    throw closer.rethrow(t);  } finally {    closer.close();  }}  }
class C{  public void onArrival(Address from,Address to){}  }
class C{  public String next(){  append("next()");  int first=data.getFirst();  scroll(first + data.getRows());  return (null);}  }
class C{  public double compute(double... dataset){  return computeInPlace(dataset.clone());}  }
class C{  protected void initGUI(){  if (GUIHelper.getLogoIcon() != null)   setIconImage(GUIHelper.getLogoIcon().getImage());  setDefaultCloseOperation(MekaDialog.HIDE_ON_CLOSE);}  }
class C{  private Project createProjectInFolder(FolderEntry parentFolder,String name,ProjectConfig projectConfig,Map<String,String> options,String visibility) throws ConflictException, ForbiddenException, ServerException, NotFoundException {  final FolderEntry projectFolder=parentFolder.createFolder(name);  final Project project=new Project(projectFolder,this);  final CreateProjectHandler generator=handlers.getCreateProjectHandler(projectConfig.getTypeId());  if (generator != null) {    generator.onCreateProject(project.getBaseFolder(),projectConfig.getAttributes(),options);  }  project.updateConfig(projectConfig);  finalizeProjectCreation(project,visibility);  return project;}  }
class C{  private void doBackgroundTasks(){  limeCoreGlue.install();  backgroundDone.set(true);}  }
class C{  public void process(String key,WebPage page){  String url=TableUtil.unreverseUrl(key);  byte status=page.getStatus().byteValue();  if (status != CrawlStatus.STATUS_FETCHED) {    if (LOG.isDebugEnabled()) {      LOG.debug("Skipping " + url + " as status is: "+ CrawlStatus.getName(status));    }    return;  }  Parse parse;  try {    parse=parse(url,page);  } catch (  ParserNotFound e) {    LOG.warn("No suitable parser found: " + e.getMessage());    return;  }catch (  final Exception e) {    LOG.warn("Error parsing: " + url + ": "+ StringUtils.stringifyException(e));    return;  }  if (parse == null) {    return;  }  org.apache.nutch.storage.ParseStatus pstatus=parse.getParseStatus();  page.setParseStatus(pstatus);  if (ParseStatusUtils.isSuccess(pstatus)) {    if (pstatus.getMinorCode() == ParseStatusCodes.SUCCESS_REDIRECT) {      String newUrl=ParseStatusUtils.getMessage(pstatus);      int refreshTime=Integer.parseInt(ParseStatusUtils.getArg(pstatus,1));      try {        newUrl=normalizers.normalize(newUrl,URLNormalizers.SCOPE_FETCHER);        if (newUrl == null) {          LOG.warn("redirect normalized to null " + url);          return;        }        try {          newUrl=filters.filter(newUrl);        } catch (        URLFilterException e) {          return;        }        if (newUrl == null) {          LOG.warn("redirect filtered to null " + url);          return;        }      } catch (      MalformedURLException e) {        LOG.warn("malformed url exception parsing redirect " + url);        return;      }      page.getOutlinks().put(new Utf8(newUrl),new Utf8());      page.getMetadata().put(FetcherJob.REDIRECT_DISCOVERED,TableUtil.YES_VAL);      if (newUrl == null || newUrl.equals(url)) {        String reprUrl=URLUtil.chooseRepr(url,newUrl,refreshTime < FetcherJob.PERM_REFRESH_TIME);        if (reprUrl == null) {          LOG.warn("reprUrl==null for " + url);          return;        } else {          page.setReprUrl(new Utf8(reprUrl));        }      }    } else {      page.setText(new Utf8(parse.getText()));      page.setTitle(new Utf8(parse.getTitle()));      ByteBuffer prevSig=page.getSignature();      if (prevSig != null) {        page.setPrevSignature(prevSig);      }      final byte[] signature=sig.calculate(page);      page.setSignature(ByteBuffer.wrap(signature));      if (page.getOutlinks() != null) {        page.getOutlinks().clear();      }      final Outlink[] outlinks=parse.getOutlinks();      int outlinksToStore=Math.min(maxOutlinks,outlinks.length);      String fromHost;      if (ignoreExternalLinks) {        try {          fromHost=new URL(url).getHost().toLowerCase();        } catch (        final MalformedURLException e) {          fromHost=null;        }      } else {        fromHost=null;      }      int validCount=0;      for (int i=0; validCount < outlinksToStore && i < outlinks.length; i++) {        String toUrl=outlinks[i].getToUrl();        try {          toUrl=normalizers.normalize(toUrl,URLNormalizers.SCOPE_OUTLINK);          toUrl=filters.filter(toUrl);        } catch (        MalformedURLException e2) {          continue;        }catch (        URLFilterException e) {          continue;        }        if (toUrl == null) {          continue;        }        Utf8 utf8ToUrl=new Utf8(toUrl);        if (page.getOutlinks().get(utf8ToUrl) != null) {          continue;        }        String toHost;        if (ignoreExternalLinks) {          try {            toHost=new URL(toUrl).getHost().toLowerCase();          } catch (          final MalformedURLException e) {            toHost=null;          }          if (toHost == null || !toHost.equals(fromHost)) {            continue;          }        }        validCount++;        page.getOutlinks().put(utf8ToUrl,new Utf8(outlinks[i].getAnchor()));      }      Utf8 fetchMark=Mark.FETCH_MARK.checkMark(page);      if (fetchMark != null) {        Mark.PARSE_MARK.putMark(page,fetchMark);      }    }  }}  }
class C{  public java.lang.StringBuffer append(char[] str,int offset,int len){  return null;}  }
class C{  public void processDiffUploadResult(StorageDelegator delegator,HttpURLConnection connection,XmlPullParser parser) throws IOException {  Storage apiStorage=delegator.getApiStorage();  int code=connection.getResponseCode();  if (code == HttpURLConnection.HTTP_OK) {    boolean rehash=false;    try {      parser.setInput(new BufferedInputStream(connection.getInputStream(),StreamUtils.IO_BUFFER_SIZE),null);      int eventType;      boolean inResponse=false;      while ((eventType=parser.next()) != XmlPullParser.END_DOCUMENT) {        if (eventType == XmlPullParser.START_TAG) {          String tagName=parser.getName();          if (inResponse) {            String oldIdStr=parser.getAttributeValue(null,"old_id");            if (oldIdStr == null) {              Log.e(DEBUG_TAG,"oldId missing! tag " + tagName);              continue;            }            long oldId=Long.parseLong(oldIdStr);            String newIdStr=parser.getAttributeValue(null,"new_id");            String newVersionStr=parser.getAttributeValue(null,"new_version");            if ("node".equals(tagName) || "way".equals(tagName) || "relation".equals(tagName)) {              OsmElement e=apiStorage.getOsmElement(tagName,oldId);              if (e != null) {                if (e.getState() == OsmElement.STATE_DELETED && newIdStr == null && newVersionStr == null) {                  if (!apiStorage.removeElement(e)) {                    Log.e(DEBUG_TAG,"Deleted " + e + " was already removed from local storage!");                  }                  Log.w(DEBUG_TAG,e + " deleted in API");                  delegator.dirty();                } else                 if (e.getState() == OsmElement.STATE_CREATED && oldId < 0 && newIdStr != null && newVersionStr != null) {                  long newId=Long.parseLong(newIdStr);                  int newVersion=Integer.parseInt(newVersionStr);                  if (newId > 0) {                    if (!apiStorage.removeElement(e)) {                      Log.e(DEBUG_TAG,"New " + e + " was already removed from api storage!");                    }                    Log.w(DEBUG_TAG,"New " + e + " added to API");                    e.setOsmId(newId);                    e.setOsmVersion(newVersion);                    e.setState(OsmElement.STATE_UNCHANGED);                    delegator.dirty();                    rehash=true;                  } else {                    Log.d(DEBUG_TAG,"Didn't get new ID: " + newId);                  }                } else                 if (e.getState() == OsmElement.STATE_MODIFIED && oldId > 0 && newIdStr != null && newVersionStr != null) {                  long newId=Long.parseLong(newIdStr);                  int newVersion=Integer.parseInt(newVersionStr);                  if (newId == oldId && newVersion > 0) {                    if (!apiStorage.removeElement(e)) {                      Log.e(DEBUG_TAG,"Updated " + e + " was already removed from api storage!");                    }                    e.setOsmVersion(newVersion);                    Log.w(DEBUG_TAG,e + " updated in API");                    e.setState(OsmElement.STATE_UNCHANGED);                  } else {                    Log.d(DEBUG_TAG,"Didn't get new version: " + newVersion + " for "+ newId);                  }                  delegator.dirty();                } else {                  Log.e(DEBUG_TAG,"Unkown start tag in result: " + tagName);                }              } else {                Log.e(DEBUG_TAG,"" + e + " not found in api storage!");              }            }          } else           if (eventType == XmlPullParser.START_TAG && "diffResult".equals(tagName)) {            inResponse=true;          } else {            Log.e(DEBUG_TAG,"Unknown start tag: " + tagName);          }        }      }      if (rehash) {        delegator.getCurrentStorage().rehash();        if (!apiStorage.isEmpty()) {          apiStorage.rehash();        }      }    } catch (    XmlPullParserException e) {      throw new OsmException(e.toString());    }catch (    NumberFormatException e) {      throw new OsmException(e.toString());    }catch (    IOException e) {      throw new OsmException(e.toString());    }  } else {    String message=Server.readStream(connection.getErrorStream());    String responseMessage=connection.getResponseMessage();    Log.d(DEBUG_TAG,"Error code: " + code + " response: "+ responseMessage+ " message: "+ message);    if (code == HttpURLConnection.HTTP_CONFLICT) {      Matcher m=ERROR_MESSAGE_VERSION_CONFLICT.matcher(message);      if (m.matches()) {        String type=m.group(3);        String idStr=m.group(4);        generateException(apiStorage,type,idStr,code,responseMessage,message);      } else {        m=ERROR_MESSAGE_CLOSED_CHANGESET.matcher(message);        if (m.matches()) {          throw new OsmServerException(HttpURLConnection.HTTP_BAD_REQUEST,code + "=\"" + responseMessage+ "\" ErrorMessage: "+ message);        }      }      Log.e(DEBUG_TAG,"Code: " + code + " unknown error message: "+ message);      throw new OsmServerException(HttpURLConnection.HTTP_BAD_REQUEST,"Original error " + code + "=\""+ responseMessage+ "\" ErrorMessage: "+ message);    } else     if (code == HttpURLConnection.HTTP_GONE) {      Matcher m=ERROR_MESSAGE_DELETED.matcher(message);      if (m.matches()) {        String type=m.group(1);        String idStr=m.group(2);        generateException(apiStorage,type,idStr,code,responseMessage,message);      }    } else     if (code == HttpURLConnection.HTTP_PRECON_FAILED) {      Matcher m=ERROR_MESSAGE_PRECONDITION_STILL_USED.matcher(message);      if (m.matches()) {        String type=m.group(1);        String idStr=m.group(2);        generateException(apiStorage,type,idStr,code,responseMessage,message);      } else {        m=ERROR_MESSAGE_PRECONDITION_RELATION_RELATION.matcher(message);        if (m.matches()) {          String idStr=m.group(1);          generateException(apiStorage,"relation",idStr,code,responseMessage,message);        }        Log.e(DEBUG_TAG,"Unknown error message: " + message);      }    }    throw new OsmServerException(code,code + "=\"" + responseMessage+ "\" ErrorMessage: "+ message);  }}  }
class C{  public double eval(double params[]){  double tmp=params[0] * params[0];  return (tmp * tmp);}  }
class C{  public void add(final AbstractInsnNode insn){  ++size;  if (last == null) {    first=insn;    last=insn;  } else {    last.next=insn;    insn.prev=last;  }  last=insn;  cache=null;  insn.index=0;}  }
class C{  @SuppressWarnings({"ObjectEquality"}) @Override public boolean remove(Object o){  return map.remove(o) == FAKE;}  }
class C{  public void createIndexHash(Environment env){  indexHashObject=new Hashtable();  indexHashAscii=new Hashtable();  for (int i=1; i < cpool.length; i++) {    if (types[i] == CONSTANT_UTF8) {      indexHashAscii.put(cpool[i],new Integer(i));    } else {      try {        indexHashObject.put(getConstant(i,env),new Integer(i));      } catch (      ClassFormatError e) {      }    }  }}  }
class C{  protected boolean prevalidate(final String component,final BitSet disallowed){  if (component == null) {    return false;  }  final char[] target=component.toCharArray();  for (int i=0; i < target.length; i++) {    if (disallowed.get(target[i])) {      return false;    }  }  return true;}  }
class C{  public void cut(){  if (getClientProperty("JPasswordField.cutCopyAllowed") != Boolean.TRUE) {    UIManager.getLookAndFeel().provideErrorFeedback(this);  } else {    super.cut();  }}  }
class C{  public Class<?> findImplementation(Class<?> interfase) throws IOException, ClassNotFoundException {  String className=findString(interfase.getName());  Class<?> impl=_classLoader.loadClass(className);  if (!interfase.isAssignableFrom(impl)) {    throw new ClassCastException("Class not of type: " + interfase.getName());  }  return impl;}  }
class C{  public boolean isClassLoader(int objectId){  return loaderLabels.containsKey(objectId);}  }
class C{  @LargeTest public void testStressAddRemoveImageItem() throws Exception {  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String ImageItemFileName1=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final String ImageItemFileName2=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String ImageItemFileName3=INPUT_FILE_PATH + "IMG_320x240.jpg";  final String ImageItemFileName4=INPUT_FILE_PATH + "IMG_176x144.jpg";  final String[] loggingInfo=new String[1];  int i=0;  writeTestCaseHeader("testStressAddRemoveImageItem");  getBeginMemory();  for (i=0; i < 50; i++) {    if (i % 4 == 0) {      final MediaImageItem mediaItem1=new MediaImageItem(mVideoEditor,"m1" + i,ImageItemFileName1,5000,renderingMode);      mVideoEditor.addMediaItem(mediaItem1);    }    if (i % 4 == 1) {      final MediaImageItem mediaItem2=new MediaImageItem(mVideoEditor,"m2" + i,ImageItemFileName2,10000,renderingMode);      mVideoEditor.addMediaItem(mediaItem2);    }    if (i % 4 == 2) {      final MediaImageItem mediaItem3=new MediaImageItem(mVideoEditor,"m3" + i,ImageItemFileName3,15000,renderingMode);      mVideoEditor.addMediaItem(mediaItem3);    }    if (i % 4 == 3) {      final MediaImageItem mediaItem4=new MediaImageItem(mVideoEditor,"m4" + i,ImageItemFileName4,20000,renderingMode);      mVideoEditor.addMediaItem(mediaItem4);    }    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,false,i);    }  }  getAfterMemory_updateLog(loggingInfo,false,i);  for (i=0; i < 50; i++) {    if (i % 4 == 0) {      mVideoEditor.removeMediaItem("m1" + i);    }    if (i % 4 == 1) {      mVideoEditor.removeMediaItem("m2" + i);    }    if (i % 4 == 2) {      mVideoEditor.removeMediaItem("m3" + i);    }    if (i % 4 == 3) {      mVideoEditor.removeMediaItem("m4" + i);    }    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,true,i);    }  }  getAfterMemory_updateLog(loggingInfo,true,i);}  }
class C{  public void loadFragment(Bundle savedInstanceState){  if (savedInstanceState != null) {    mCurrentFragmentId=savedInstanceState.getInt(CURRENT_FRAGMENT);    invalidateOptionsMenu();  } else {    if (getIntent().hasExtra(CURRENT_FRAGMENT)) {      mCurrentFragmentId=getIntent().getExtras().getInt(CURRENT_FRAGMENT);    }switch (mCurrentFragmentId) {case Common.ARTISTS_FRAGMENT:      mCurrentFragment=getLayoutFragment(Common.ARTISTS_FRAGMENT);    break;case Common.ALBUM_ARTISTS_FRAGMENT:  mCurrentFragment=getLayoutFragment(Common.ALBUM_ARTISTS_FRAGMENT);break;case Common.ALBUMS_FRAGMENT:mCurrentFragment=getLayoutFragment(Common.ALBUMS_FRAGMENT);break;case Common.SONGS_FRAGMENT:mCurrentFragment=getLayoutFragment(Common.SONGS_FRAGMENT);break;case Common.PLAYLISTS_FRAGMENT:mCurrentFragment=getLayoutFragment(Common.PLAYLISTS_FRAGMENT);break;case Common.GENRES_FRAGMENT:mCurrentFragment=getLayoutFragment(Common.GENRES_FRAGMENT);break;case Common.FOLDERS_FRAGMENT:mCurrentFragment=new FilesFoldersFragment();break;}switchContent(mCurrentFragment);}}  }
class C{  public static void main(String[] args){  processArgs(args);  try {    UnicodeSpec[] data=UnicodeSpec.readSpecFile(new File(UnicodeSpecFileName),plane);    specialCaseMaps=SpecialCaseMap.readSpecFile(new File(SpecialCasingFileName),plane);    PropList propList=PropList.readSpecFile(new File(PropListFileName),plane);    if (verbose) {      System.out.println(data.length + " items read from Unicode spec file " + UnicodeSpecFileName);    }    long[] map=buildMap(data,specialCaseMaps,propList);    if (verbose) {      System.err.println("Completed building of initial map");    }    if (bins == 0) {      generateForSizes(map);    } else {      while (bins > 0) {        sizes=new int[bins];        searchBins(map,0);        --bins;      }    }    if (verbose && false) {      System.out.println("Offset range seen: -" + hex8(-minOffsetSeen) + "..+"+ hex8(maxOffsetSeen));      System.out.println("          allowed: -" + hex8(-minOffset) + "..+"+ hex8(maxOffset));    }  } catch (  FileNotFoundException e) {    FAIL(e.toString());  }catch (  IOException e) {    FAIL(e.toString());  }catch (  Throwable e) {    System.out.println("Unexpected exception:");    e.printStackTrace();    FAIL("Unexpected exception!");  }  if (verbose) {    System.out.println("Done!");  }}  }
class C{  @Override public void onBindViewHolder(MovieViewHolder holder,int position){  mCursorAdapter.getCursor().moveToPosition(position);  setViewHolder(holder);  mCursorAdapter.bindView(null,mContext,mCursorAdapter.getCursor());}  }
class C{  public final void testValidateLowercaseAllowingSpacesSucceeds(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.LOWERCASE,true,allowedCharacters);  assertTrue(characterOrNumberValidator.validate("ab 1-"));}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public static <A>ObservableTSeq<A> of(final Observable<A> monads){  return ObservableT.fromIterable(ReactiveSeq.of(monads));}  }
class C{  public static String generatePassword(){  return generatePassword(DEFAULT_PASSWORD_LENGTH);}  }
class C{  public RecyclerDividerDecorator(Context context,int resId){  mDivider=ContextCompat.getDrawable(context,resId);  this.marginHorizontal=context.getResources().getDimensionPixelSize(R.dimen.base_recycler_margin);}  }
class C{  static public char[] hexArrayToCharArray(byte[] array){  char[] buffer=new char[array.length * 2];  for (int i=array.length - 1; i >= 0; i--) {    byte b=(byte)((array[i] & 0x0F) % 16);    char c=(b < 10) ? (char)((byte)('0' + b)) : (char)((byte)('A' + b - 10));    buffer[i * 2 + 1]=c;    b=(byte)(((array[i] & 0xF0) >> 4) % 16);    c=(b < 10) ? (char)((byte)('0' + b)) : (char)((byte)('A' + b - 10));    buffer[i * 2]=c;  }  return buffer;}  }
class C{  private TenantProvisioningResult createInstanceAndAddUsersToSubscription(TriggerProcess tp,Subscription subscription) throws ServiceParameterException, ObjectNotFoundException, OperationNotPermittedException, TechnicalServiceNotAliveException, TechnicalServiceOperationException {  List<PlatformUser> addedUsers=new ArrayList<>();  List<UsageLicense> addedUserLicenses=new ArrayList<>();  List<?> users=tp.getParamValueForName(TriggerProcessParameterName.USERS).getValue(List.class);  if (users != null) {    for (    Object o : users) {      VOUsageLicense lic=VOUsageLicense.class.cast(o);      PlatformUser usr=idManager.getPlatformUser(lic.getUser().getUserId(),dataManager.getCurrentUser().getTenantId(),true);      RoleDefinition role=getAndCheckServiceRole(lic,subscription.getProduct());      try {        addUserToSubscription(subscription,usr,role);        addedUsers.add(usr);        UsageLicense usageLicenseForUser=subscription.getUsageLicenseForUser(usr);        if (usageLicenseForUser != null) {          addedUserLicenses.add(usageLicenseForUser);        }      } catch (      UserAlreadyAssignedException e) {        LOG.logWarn(Log4jLogger.SYSTEM_LOG,LogMessageIdentifier.WARN_USER_APPEAR_MORE_THAN_ONCE,Long.toString(usr.getKey()),Long.toString(subscription.getKey()));      }    }  }  boolean directLogin=subscription.getProduct().getTechnicalProduct().getAccessType() == ServiceAccessType.DIRECT;  if (!directLogin) {    verifyParameterNamedUser(subscription);  }  TenantProvisioningResult provisioningResult=tenantProvisioning.createProductInstance(subscription);  if (provisioningResult.isAsyncProvisioning()) {    return provisioningResult;  }  PriceModel pm=subscription.getProduct().getPriceModel();  pm.setProvisioningCompleted(true);  subscription.setActivationDate(subscription.getCreationDate());  activateSubscriptionFirstTime(subscription);  String instanceId=provisioningResult.getProductInstanceId();  subscription.setProductInstanceId(instanceId);  subscription.setAccessInfo(provisioningResult.getAccessInfo());  subscription.setBaseURL(provisioningResult.getBaseUrl());  subscription.setLoginPath(provisioningResult.getLoginPath());  try {    informProductAboutNewUsers(subscription,addedUsers);  } catch (  SubscriptionStateException e) {    LOG.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_INFORM_PRODUCT_ABOUT_NEW_USER_FAILED);  }  sendToSubscriptionAddedMail(subscription,addedUserLicenses);  return provisioningResult;}  }
class C{  public void success(byte[] message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  public static long dateValueFromAbsoluteDay(long absoluteDay){  long d=absoluteDay + 719468;  long y100=0, offset;  if (d > 578040) {    long y400=d / 146097;    d-=y400 * 146097;    y100=d / 36524;    d-=y100 * 36524;    offset=y400 * 400 + y100 * 100;  } else {    d+=292200000002L;    offset=-800000000;  }  long y4=d / 1461;  d-=y4 * 1461;  long y=d / 365;  d-=y * 365;  if (d == 0 && (y == 4 || y100 == 4)) {    y--;    d+=365;  }  y+=offset + y4 * 4;  int m=((int)d * 2 + 1) * 5 / 306;  d-=DAYS_OFFSET[m] - 1;  if (m >= 10) {    y++;    m-=12;  }  return dateValue(y,m + 3,(int)d);}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  public static void log(Throwable e){  log(new Status(IStatus.ERROR,getUniqueIdentifier(),IStatus.ERROR,e.getMessage(),e));}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Model(Node node,BayesIm bayesIm,JComponent messageAnchor){  if (node == null) {    throw new NullPointerException("Node must not be null.");  }  if (bayesIm == null) {    throw new NullPointerException("Bayes IM must not be null.");  }  if (messageAnchor == null) {    throw new NullPointerException("Message anchor must not be null.");  }  this.bayesIm=bayesIm;  this.nodeIndex=bayesIm.getNodeIndex(node);  this.messageAnchor=messageAnchor;}  }
class C{  public Quaterniond fromAxisAngleDeg(Vector3dc axis,double angle){  return fromAxisAngleRad(axis.x(),axis.y(),axis.z(),Math.toRadians(angle));}  }
class C{  private List<Volume> createVPlexVolumes(String name,int numberOfVols,URI storageSystem){  List<Volume> volumes=new ArrayList<Volume>();  for (int i=1; i <= numberOfVols; i++) {    Volume vplexVolume=new Volume();    URI vplexVolumeUri=URIUtil.createId(Volume.class);    vplexVolumeURIs.add(vplexVolumeUri);    vplexVolume.setId(vplexVolumeUri);    vplexVolume.setLabel(name + i);    vplexVolume.setNativeId("/clusters/cluster-1/virtual-volumes/device_V000195701573-01E7F_vol" + i);    vplexVolume.setStorageController(storageSystem);    StringSet associatedVolumes=new StringSet();    associatedVolumes.add("associatedVol1");    vplexVolume.setAssociatedVolumes(associatedVolumes);    volumes.add(vplexVolume);  }  return volumes;}  }
class C{  public OIDName(ObjectIdentifier oid){  this.oid=oid;}  }
class C{  protected void drawVerticalGrid(){  float[] position=new float[]{0f,0f};  for (int i=0; i < mData.getXValCount(); i++) {    if (i % mLegendGridModulus == 0) {      position[0]=i;      transformPointArray(position);      if (position[0] >= mOffsetLeft && position[0] <= getWidth()) {        mDrawCanvas.drawLine(position[0],mOffsetTop,position[0],getHeight() - mOffsetBottom,mGridPaint);      }    }  }}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,null,null,features,attributes,prodCatalogId,null,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,Boolean.FALSE,Boolean.FALSE));}  }
class C{  public InvalidServerFormatException(final String invalidServerAndPort){  super("The given redis server is not in the expected format 'host:port': " + invalidServerAndPort);}  }
class C{  public boolean isDistributed(){  return visibleClusters.size() > 1;}  }
class C{  public void testDynLongSortMissingLast() throws Exception {  checkSortMissingLast("dyn_longdv_missinglast","-1","4");}  }
class C{  public void broadcast(DefinedPacket packet){  connectionLock.readLock().lock();  try {    for (    UserConnection con : connections.values()) {      con.unsafe().sendPacket(packet);    }  }  finally {    connectionLock.readLock().unlock();  }}  }
class C{  public RadialGradientPaint(Point2D center,float radius,Point2D focus,float[] fractions,Color[] colors,CycleMethodEnum cycleMethod,ColorSpaceEnum colorSpace){  this(center,radius,focus,fractions,colors,cycleMethod,colorSpace,new AffineTransform());}  }
class C{  private void handleNormalUnassociated(){  int szSsaRegs=ssaMeth.getRegCount();  for (int ssaReg=0; ssaReg < szSsaRegs; ssaReg++) {    if (ssaRegsMapped.get(ssaReg)) {      continue;    }    RegisterSpec ssaSpec=getDefinitionSpecForSsaReg(ssaReg);    if (ssaSpec == null)     continue;    int category=ssaSpec.getCategory();    int ropReg=findNextUnreservedRopReg(paramRangeEnd,category);    while (!canMapReg(ssaSpec,ropReg)) {      ropReg=findNextUnreservedRopReg(ropReg + 1,category);    }    addMapping(ssaSpec,ropReg);  }}  }
class C{  public void finish(){  String report="haitiResults.txt";  try {    BufferedWriter w=new BufferedWriter(new FileWriter(report,true));    int totalNumberPeople=peopleList.size() + deaths_total;    long totalEnergyInSystem=0L;    for (    Agent a : peopleList) {      totalEnergyInSystem+=a.energyLevel;    }    int totalFoodLeft=0;    for (    Center c : centersList) {      totalFoodLeft+=c.foodLevel;    }    String output=popFile + "\t" + reliefFile+ "\t"+ maximumDensity+ "\t"+ riotDensity+ "\t"+ centersInitialFood+ "\t"+ energyPerFood+ "\t"+ enToStay+ "\t"+ enWalkPaved+ "\t"+ enWalkUnpav+ "\t"+ enRiot+ "\t"+ interval+ "\t"+ schedule.getSteps()+ "\t"+ totalNumberPeople+ "\t"+ deaths_total+ "\t"+ totalEnergyInSystem+ "\t"+ centersList.size()+ "\t"+ totalFoodLeft;    w.write(output);    w.newLine();    w.flush();    w.close();  } catch (  Exception e) {    System.err.println("File input error");  }  kill();}  }
class C{  public void testSaverCommandlineArgs(){  String[] options;  options=getCommandlineOptions(false);  try {    ((OptionHandler)m_Saver).setOptions(options);  } catch (  Exception e) {    e.printStackTrace();    fail("Command line test failed ('" + Utils.arrayToString(options) + "'): "+ e.toString());  }}  }
class C{  public GraphIntersectionsEditor(GraphAdjacencyIntersectionWrapper comparison){  this.graphs=comparison.getGraphs();  setup();}  }
class C{  static Method findMethod(Class<?> clazz,String methodName,Object[] args,boolean isStatic) throws NoSuchMethodException {  Class<?>[] argTypes=getTypes(args);  Method[] methods=null;  if (classMethodsCache.containsKey(clazz)) {    methods=classMethodsCache.get(clazz);  } else {    methods=clazz.getMethods();    classMethodsCache.put(clazz,methods);  }  ArrayList<Method> fitMethods=new ArrayList<Method>();  for (  Method method : methods) {    if (methodName.equals(method.getName())) {      if (!isStatic || Modifier.isStatic(method.getModifiers())) {        if (match(argTypes,method.getParameterTypes())) {          fitMethods.add(method);        }      }    }  }  int fitSize=fitMethods.size();  if (fitSize == 0) {    throw new NoSuchMethodException(Messages.getString("beans.41",methodName));  }  if (fitSize == 1) {    return fitMethods.get(0);  }  MethodComparator comparator=new MethodComparator(methodName,argTypes);  Method[] fitMethodArray=fitMethods.toArray(new Method[fitSize]);  Method onlyMethod=fitMethodArray[0];  Class<?> onlyReturnType, fitReturnType;  int difference;  for (int i=1; i < fitMethodArray.length; i++) {    if ((difference=comparator.compare(onlyMethod,fitMethodArray[i])) == 0) {      onlyReturnType=onlyMethod.getReturnType();      fitReturnType=fitMethodArray[i].getReturnType();      if (onlyReturnType == fitReturnType) {        throw new NoSuchMethodException(Messages.getString("beans.62",methodName));      }      if (onlyReturnType.isAssignableFrom(fitReturnType)) {        onlyMethod=fitMethodArray[i];      }    }    if (difference > 0) {      onlyMethod=fitMethodArray[i];    }  }  return onlyMethod;}  }
class C{  public void addCreature(int x,int y,Creature c){  g.createCreature(x,y,c);}  }
class C{  private static boolean isWindowFrameOrDialog(Window window){  return (window instanceof Frame) || (window instanceof Dialog);}  }
class C{  public RegexFileFilter(String pattern,int flags){  if (pattern == null) {    throw new IllegalArgumentException("Pattern is missing");  }  this.pattern=Pattern.compile(pattern,flags);}  }
class C{  public static <A>OptionalTSeq<A> of(final AnyMSeq<Optional<A>> monads){  return new OptionalTSeq<>(monads);}  }
class C{  private void defineInternalFrameMaximizeButton(UIDefaults d){  String p="InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"";  String c=PAINTER_PREFIX + "TitlePaneMaximizeButtonPainter";  d.put(p + ".WindowNotFocused",new TitlePaneMaximizeButtonWindowNotFocusedState());  d.put(p + ".WindowMaximized",new TitlePaneMaximizeButtonWindowMaximizedState());  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[MouseOver].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_MOUSEOVER));  d.put(p + "[Pressed].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_PRESSED));  d.put(p + "[Enabled+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_ENABLED_WINDOWNOTFOCUSED));  d.put(p + "[MouseOver+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_MOUSEOVER_WINDOWNOTFOCUSED));  d.put(p + "[Pressed+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_PRESSED_WINDOWNOTFOCUSED));  d.put(p + "[Disabled+WindowMaximized].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_MAXIMIZED_DISABLED));  d.put(p + "[Enabled+WindowMaximized].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_MAXIMIZED_ENABLED));  d.put(p + "[MouseOver+WindowMaximized].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_MAXIMIZED_MOUSEOVER));  d.put(p + "[Pressed+WindowMaximized].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_MAXIMIZED_PRESSED));  d.put(p + "[Enabled+WindowMaximized+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_MAXIMIZED_ENABLED_WINDOWNOTFOCUSED));  d.put(p + "[MouseOver+WindowMaximized+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_MAXIMIZED_MOUSEOVER_WINDOWNOTFOCUSED));  d.put(p + "[Pressed+WindowMaximized+WindowNotFocused].backgroundPainter",new LazyPainter(c,TitlePaneMaximizeButtonPainter.Which.BACKGROUND_MAXIMIZED_PRESSED_WINDOWNOTFOCUSED));  d.put(p + ".icon",new SeaGlassIcon(p,"iconPainter",25,18));}  }
class C{  List(A head,List<A> tail){  this.tail=tail;  this.head=head;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void actionPerformed(ActionEvent evt){  try {    URL url=root.panel.view.getURL();    if (url != null) {      if (url.toString().startsWith("file:")) {        String str=url.toString();        str=str.substring(6,str.length() - 6);        if (new File(str + ".diff").exists()) {          int n=JOptionPane.showConfirmDialog(root.panel.view,"Diff already exists. Overwrite?","Warning",JOptionPane.OK_CANCEL_OPTION);          if (n != JOptionPane.OK_OPTION) {            return;          }        }        DocumentDiffTest.generateTestFile(str + ".xhtml",str + ".diff",500,500);        Uu.p("wrote out: " + str + ".diff");      }    }  } catch (  Exception ex) {    Uu.p(ex);  }}  }
class C{  public CTaggedNodesContainerNodeMenuBuilder(final ZyGraph graph,final ITreeNode<CTag> tag){  m_popupMenu=new JPopupMenu();  m_popupMenu.add(CActionProxy.proxy(new CSelectNodesAction(graph,tag.getObject())));  m_popupMenu.add(CActionProxy.proxy(new CSelectVisibleNodesAction(graph,tag.getObject())));  m_popupMenu.add(new JSeparator());  m_popupMenu.add(CActionProxy.proxy(new CSelectSubtreeNodesAction(graph,tag)));  m_popupMenu.add(CActionProxy.proxy(new CSelectVisibleSubtreeNodesAction(graph,tag)));  m_popupMenu.add(new JSeparator());  m_popupMenu.add(CActionProxy.proxy(new CUnselectNodesAction(graph,tag.getObject())));  m_popupMenu.add(CActionProxy.proxy(new CUnselectSubtreeNodesAction(graph,tag)));}  }
class C{  protected Lock createWriteLock(){  return activeWriter.createLock("Write");}  }
class C{  public static String toString(long[] array){  StringBuffer buf=new StringBuffer();  buf.append("[");  int maxIndex=array.length - 1;  for (int i=0; i <= maxIndex; i++) {    buf.append(array[i]);    if (i < maxIndex)     buf.append(", ");  }  buf.append("]");  return buf.toString();}  }
class C{  public boolean matchesNormalized(final String text){  return matchesFull(ConversationParser.parseAsMatcher(text));}  }
class C{  public synchronized void renameType(final BaseType baseType,final String newName) throws CouldntSaveDataException {  updateType(baseType,newName,baseType.getBitSize(),baseType.isSigned());}  }
class C{  public static <S extends HasMouseWheelHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MouseWheelEvent event=new MouseWheelEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  PhantomComponent(Component component){  this.component=component;}  }
class C{  public String toString(){  return toMap().toString();}  }
class C{  public static void selfcert(String alias,char[] password,String fileName,String dname){  StringBuffer cmd=new StringBuffer("-selfcert");  cmd.append(" -alias ").append(alias);  cmd.append(" -dname \"").append(dname).append("\"");  cmd.append(" -keypass ").append(password).append(" -validity 999");  if (fileName.indexOf(' ') != -1)   cmd.append(" -keystore \"").append(fileName).append("\" -storepass ").append(password); else   cmd.append(" -keystore ").append(fileName).append(" -storepass ").append(password);  keytool(cmd.toString());}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void saveFeatures() throws IOException {  DataOutputStream dos=new DataOutputStream(new FileOutputStream(path.getAbsolutePath() + ".features"));  try {    dos.writeInt(imageLocations.size());    for (    Map.Entry<Feature,Point2d> entry : imageLocations.entrySet()) {      dos.writeLong(entry.getKey().id);      dos.writeDouble(entry.getValue().x);      dos.writeDouble(entry.getValue().y);    }  }  finally {    dos.close();  }}  }
class C{  @Override public boolean hasCustomName(){  return worldNameable.hasCustomName();}  }
class C{  private void actionRefresh(){  if (m_lookup == null)   return;  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  Object obj=m_combo.getSelectedItem();  log.info(m_columnName + " #" + m_lookup.getSize()+ ", Selected="+ obj);  if (!isReadWrite()) {    m_settingValue=true;    m_lookup.removeAllElements();    m_lastDisplay=m_lookup.getDisplay(m_value);    m_text.setText(m_lastDisplay);    m_text.setCaretPosition(0);    m_settingValue=false;  } else {    m_lookup.refresh();    m_lookup.fillComboBox(isMandatory(),true,true,false);    m_combo.setSelectedItem(obj);  }  setCursor(Cursor.getDefaultCursor());  log.info(m_columnName + " #" + m_lookup.getSize()+ ", Selected="+ m_combo.getSelectedItem());}  }
class C{  public static TickUnitSource createIntegerTickUnits(){  return new NumberTickUnitSource(true);}  }
class C{  public void testNextLongBounded2(){  for (long least=-86028121; least < MAX_LONG_BOUND; least+=982451653L) {    for (long bound=least + 2; bound > least && bound < MAX_LONG_BOUND; bound+=Math.abs(bound * 7919)) {      long f=ThreadLocalRandom.current().nextLong(least,bound);      assertTrue(least <= f && f < bound);      int i=0;      long j;      while (i < NCALLS && (j=ThreadLocalRandom.current().nextLong(least,bound)) == f) {        assertTrue(least <= j && j < bound);        ++i;      }      assertTrue(i < NCALLS);    }  }}  }
class C{  private int calculateTagOffset(int dirStartOffset,int entryNumber){  return dirStartOffset + 2 + (12 * entryNumber);}  }
class C{  public synchronized void removeZoomListener(ZoomListener listener){  mZoomListeners.remove(listener);}  }
class C{  public CollisionSystem(Particle[] particles){  this.particles=particles.clone();}  }
class C{  protected void uninstallListeners(){  desktop.removePropertyChangeListener(pcl);  pcl=null;}  }
class C{  public void detach(){  if (m_allowDetach) {    super.detach();    m_exprObj.detach();    m_exprObj=null;  }}  }
class C{  public static final void renderJQueryPluginCall(final String elementId,final String pluginFunctionCall,final ResponseWriter writer,final UIComponent uiComponent) throws IOException {  final String jsCall=createJQueryPluginCall(elementId,pluginFunctionCall);  writer.startElement("script",uiComponent);  writer.writeText(jsCall,null);  writer.endElement("script");}  }
class C{  @Override protected Boolean doInBackground(Void... params){  try {    if (mSubsribe)     GcmPubSub.getInstance(mContext).subscribe(mToken,"/topics/" + mTopic,null); else     GcmPubSub.getInstance(mContext).unsubscribe(mToken,"/topics/" + mTopic);  } catch (  IOException e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  public void validateFile(String fileName) throws Exception {  String xml=FileUtils.readFileToString(new File(fileName),StandardCharsets.UTF_8.toString());  validate(xml);}  }
class C{  private static char[] zzUnpackCMap(String packed){  int size=0;  for (int i=0, length=packed.length(); i < length; i+=2) {    size+=packed.charAt(i);  }  char[] map=new char[size];  int i=0;  int j=0;  while (i < packed.length()) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public ElementHandler removeHandler(String handlerPath){  return handlers.remove(handlerPath);}  }
class C{  @Inline public static void charBulkCopy(char[] src,Offset srcOffset,char[] dst,Offset dstOffset,int bytes){  if (VM.VerifyAssertions)   VM._assert(CHAR_BULK_COPY_SUPPORTED);  if (!Selected.Mutator.get().charBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {    Memory.aligned16Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);  }}  }
class C{  public static void main(String[] args){  while (!BinaryStdIn.isEmpty()) {    char c=BinaryStdIn.readChar();    BinaryStdOut.write(c);  }  BinaryStdOut.flush();}  }
class C{  public SuggestRequest suggest(BytesReference suggestSource){  this.suggestSource=suggestSource;  return this;}  }
class C{  private void moveItemsBack(){  RPSlot tradeSlot=player.getSlot("trade");  List<Item> items=moveItemsFromSlotToList(tradeSlot);  boolean onGround=!moveItemsFromListToPlayerOrGround(items);  if (onGround) {    player.sendPrivateText("Some items did not fit in your bag and have been put on the ground.");  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MWFNode[");  sb.append(get_ID()).append("-").append(getName()).append(",Action=").append(getActionInfo()).append("]");  return sb.toString();}  }
class C{  private void updateManagedSystem(ISource S) throws AdeException {  logger.trace(String.format("updateManagedSystem(%s) -->entry",S.getSourceId()));  boolean updateOk;  try {    logger.info(String.format("updateManagedSystem(%s) -->executeBatch",S.getSourceId()));    updateOk=executeBatch(getSqlForUpdate(S));    if (updateOk) {      checkForObsoleteReferences();    } else {      final String msg=String.format("updateManagedSystem(%s) - unexpected (sql) failure",S.getSourceId());      logger.error(msg);      throw new AdeInternalException(msg);    }  } catch (  AdeException e) {    throw e;  }catch (  Throwable t) {    final String msg=String.format("updateManagedSystem(%s) caught unexpected throwable: %s",S.getSourceId(),t.getMessage());    logger.error(msg);    throw new AdeInternalException(msg,t);  }  logger.trace("updateManagedSystem() <-- exit");}  }
class C{  public void add_return(StorageArray param){  if (local_return == null) {    local_return=new StorageArray[]{};  }  local_returnTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(local_return);  list.add(param);  this.local_return=(StorageArray[])list.toArray(new StorageArray[list.size()]);}  }
class C{  public List<JCCompilationUnit> parseFiles(Iterable<JavaFileObject> fileObjects){  if (shouldStop(CompileState.PARSE))   return List.nil();  ListBuffer<JCCompilationUnit> trees=new ListBuffer<>();  Set<JavaFileObject> filesSoFar=new HashSet<JavaFileObject>();  for (  JavaFileObject fileObject : fileObjects) {    if (!filesSoFar.contains(fileObject)) {      filesSoFar.add(fileObject);      trees.append(parse(fileObject));    }  }  return trees.toList();}  }
class C{  public DynamicProxyConverter(final Mapper mapper,final ClassLoaderReference classLoaderReference){  this.classLoaderReference=classLoaderReference;  this.mapper=mapper;}  }
class C{  HeapCompactOrderedSketch(long[] compactOrderedCache,boolean empty,short seedHash,int curCount,long thetaLong){  super(empty,seedHash,curCount,thetaLong);  assert compactOrderedCache != null;  cache_=(curCount == 0) ? new long[0] : compactOrderedCache;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.RESEQUENCER__STREAM_SEQUENCES:    setStreamSequences((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void differentiate(){  RatPoly top=pop();  push(top.differentiate());}  }
class C{  public String shipmentComplete(final CustomerOrder order,final String orderShipmentNumber,final BigDecimal addToPayment){  if (getPaymentGateway().getPaymentGatewayFeatures().isSupportAuthorize()) {    final boolean isMultiplePaymentsSupports=getPaymentGateway().getPaymentGatewayFeatures().isSupportAuthorizePerShipment();    final List<CustomerOrderPayment> paymentsToCapture=determineOpenAuthorisations(order.getOrdernum(),isMultiplePaymentsSupports ? orderShipmentNumber : order.getOrdernum());    final Logger log=ShopCodeContext.getLog(this);    log.debug("Attempting to capture funds for Order num {} Shipment num {}",order.getOrdernum(),orderShipmentNumber);    if (paymentsToCapture.size() > 1) {      log.warn(MessageFormat.format("Payment gateway {0} with features {1}. Found {2} records to capture, but expected 1 only. Order num {3} Shipment num {4}",getPaymentGateway().getLabel(),getPaymentGateway().getPaymentGatewayFeatures(),paymentsToCapture.size(),order.getOrdernum(),orderShipmentNumber));    } else     if (paymentsToCapture.isEmpty()) {      log.debug(MessageFormat.format("Payment gateway {0} with features {1}. Found 0 records to capture, possibly already captured all payments. Order num {2} Shipment num {3}",getPaymentGateway().getLabel(),getPaymentGateway().getPaymentGatewayFeatures(),order.getOrdernum(),orderShipmentNumber));    }    final boolean forceManualProcessing=false;    final String forceManualProcessingMessage=null;    boolean wasError=false;    String paymentResult=null;    for (    CustomerOrderPayment paymentToCapture : paymentsToCapture) {      Payment payment=new PaymentImpl();      BeanUtils.copyProperties(paymentToCapture,payment);      payment.setTransactionOperation(PaymentGateway.CAPTURE);      payment.setPaymentAmount(payment.getPaymentAmount().add(addToPayment).setScale(2,BigDecimal.ROUND_HALF_UP));      try {        if (forceManualProcessing) {          payment.setTransactionReferenceId(UUID.randomUUID().toString());          payment.setTransactionAuthorizationCode(UUID.randomUUID().toString());          payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_OK);          payment.setPaymentProcessorBatchSettlement(true);          payment.setTransactionGatewayLabel("forceManualProcessing");          payment.setTransactionOperationResultCode("forceManualProcessing");          payment.setTransactionOperationResultMessage(forceManualProcessingMessage);        } else {          payment=getPaymentGateway().capture(payment);        }        paymentResult=payment.getPaymentProcessorResult();      } catch (      Throwable th) {        paymentResult=Payment.PAYMENT_STATUS_FAILED;        payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_FAILED);        payment.setPaymentProcessorBatchSettlement(false);        payment.setTransactionOperationResultMessage(th.getMessage());        ShopCodeContext.getLog(this).error("Cannot capture " + payment,th);      } finally {        final CustomerOrderPayment captureOrderPayment=new CustomerOrderPaymentEntity();        BeanUtils.copyProperties(payment,captureOrderPayment);        captureOrderPayment.setPaymentProcessorResult(paymentResult);        captureOrderPayment.setShopCode(paymentToCapture.getShopCode());        customerOrderPaymentService.create(captureOrderPayment);      }      if (!Payment.PAYMENT_STATUS_OK.equals(paymentResult)) {        wasError=true;      }    }    return wasError ? Payment.PAYMENT_STATUS_FAILED : Payment.PAYMENT_STATUS_OK;  }  return Payment.PAYMENT_STATUS_OK;}  }
class C{  private void basicRemoveGrantToken(DLockGrantToken grantToken){  Object removed=this.grantTokens.remove(grantToken.getName());  if (removed != null) {    Assert.assertTrue(removed == grantToken);    grantToken.destroy();    if (logger.isTraceEnabled(LogMarker.DLS)) {      logger.trace(LogMarker.DLS,"[DLockGrantor.basicRemoveGrantToken] removed {}; removed={}",grantToken,removed);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.073 -0400",hash_original_method="2F30F2D964E96D4253E7019EBAE48140",hash_generated_method="CB61CA2DDDC7A56278D519175D793B1A") @Override public void flush() throws IOException {  throw exception;}  }
class C{  public JSONNode addArray(String name){  return add(name,null,NodeType.ARRAY);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.021 -0500",hash_original_method="3321B2428EFA479CDCDAB88856C4C216",hash_generated_method="9C0505DFA235C9DFE71D72D1F0B2ACB5") private void nativeClearContent(){}  }
class C{  protected List createStackedValueList(CategoryDataset dataset,Comparable category,double base,boolean asPercentages){  int[] rows=new int[dataset.getRowCount()];  for (int i=0; i < rows.length; i++) {    rows[i]=i;  }  return createStackedValueList(dataset,category,rows,base,asPercentages);}  }
class C{  public T caseIterationStatement(IterationStatement object){  return null;}  }
class C{  public static String encodeUnicodeStr(String s){  StringBuilder sb=new StringBuilder(s.length() * 3);  for (  char c : s.toCharArray()) {    if (c < 256) {      sb.append(c);    } else {      sb.append("\\u");      sb.append(Character.forDigit((c >>> 12) & 0xf,16));      sb.append(Character.forDigit((c >>> 8) & 0xf,16));      sb.append(Character.forDigit((c >>> 4) & 0xf,16));      sb.append(Character.forDigit((c) & 0xf,16));    }  }  return sb.toString();}  }
class C{  public static Process createProcess(String[] cmdarray,String[] envp,File workingDir) throws IOException {  return Runtime.getRuntime().exec(getWithoutEmptyParams(cmdarray),getWithoutEmptyParams(envp),workingDir);}  }
class C{  public static void putInt(long addr,int val){  if (UNALIGNED)   UNSAFE.putInt(addr,val); else   putIntByByte(addr,val,BIG_ENDIAN);}  }
class C{  protected void remove(final GameStep step){  if (!m_steps.contains(step)) {    throw new IllegalArgumentException("Step does not exist");  }  m_steps.remove(step);}  }
class C{  private boolean isBlockedByDependencies(){  for (  ProgressThread pg : currentThreads) {    if (dependencies.contains(pg.getID())) {      return true;    }  }  for (  ProgressThread pg : queuedThreads) {    if (pg.equals(this)) {      break;    }    if (dependencies.contains(pg.getID())) {      return true;    }  }  return false;}  }
class C{  public boolean checkForType(Types type){  if (types == null) {    return false;  } else {    return types.contains(type.toString());  }}  }
class C{  public PerlTokenData lookupToken(int steps){  assert steps != 0;  int rawStep=0;  int step=steps / Math.abs(steps);  IElementType rawTokenType=null;  while (steps != 0) {    rawStep+=step;    rawTokenType=rawLookup(rawStep);    if (rawTokenType == null) {      return null;    }    if (!PerlParserDefinition.WHITE_SPACE_AND_COMMENTS.contains(rawTokenType)) {      steps-=step;    }  }  return new PerlTokenData(rawTokenType,getOriginalText().subSequence(rawTokenTypeStart(rawStep),rawTokenTypeStart(rawStep + 1)).toString());}  }
class C{  public SSASubtitleHandler(sage.media.format.ContainerFormat inFormat){  super(inFormat);}  }
class C{  public T caseS_If(S_If object){  return null;}  }
class C{  public static Stream<Transaction> streamDirectAndFirstChildTransactions(final Block block){  return block.getTransactions().stream().flatMap(null);}  }
class C{  static HeapDoublesSketch newInstance(int k){  HeapDoublesSketch hqs=new HeapDoublesSketch(k);  int bufAlloc=Math.min(Util.MIN_BASE_BUF_SIZE,2 * k);  hqs.n_=0;  hqs.combinedBufferItemCapacity_=bufAlloc;  hqs.combinedBuffer_=new double[bufAlloc];  hqs.baseBufferCount_=0;  hqs.bitPattern_=0;  hqs.minValue_=Double.POSITIVE_INFINITY;  hqs.maxValue_=Double.NEGATIVE_INFINITY;  return hqs;}  }
class C{  public BigDecimal calculatePenalty(final Date latestCollReceiptDate,final Date fromDate,final BigDecimal amount){  BigDecimal penalty=BigDecimal.ZERO;  final int noOfMonths=PropertyTaxUtil.getMonthsBetweenDates(fromDate,new Date());  penalty=amount.multiply(PropertyTaxConstants.PENALTY_PERCENTAGE.multiply(new BigDecimal(noOfMonths))).divide(BIGDECIMAL_100);  return MoneyUtils.roundOff(penalty);}  }
class C{  private void print(String amt,String currency){  try {    System.out.println(amt + " = " + getAmtInWords(amt));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public int size(){  return this.streams.size();}  }
class C{  public int search(final byte[] a,final int from,final int to){  final int n=pattern.length;  if (n == 0)   return from > to ? to : (from < 0 ? 0 : from);  if (n == 1)   return indexOf(a,from,to);  final char[] p=pattern;  final char last=p[n - 1];  final int m1=to - 1;  final int[] shift=badCharShift;  final int[] asciiShift=asciiBadCharShift;  final int m=mask;  final int hs=hashShift;  int i=(from < 0 ? 0 : from) + n - 1, j, k;  char c;  if (caseSensitive) {    while (i < m1) {      if ((a[i] & 0xFF) == last) {        j=n - 1;        k=i;        while (j-- != 0 && (a[--k] & 0xFF) == p[j])         ;        if (j < 0)         return k;      }      if ((c=(char)(a[++i] & 0xFF)) < 128)       i+=asciiShift[c]; else {        j=shift[c * c & m];        k=shift[(c * PHI2) >> hs & m];        i+=j > k ? j : k;      }    }    if (i == m1) {      j=n;      while (j-- != 0 && (a[i--] & 0xFF) == p[j])       ;      if (j < 0)       return i + 1;    }    return -1;  } else   if (asciiCase) {    while (i < m1) {      if (asciiToLowerCase((char)(a[i] & 0xFF)) == last) {        j=n - 1;        k=i;        while (j-- != 0 && asciiToLowerCase((char)(a[--k] & 0xFF)) == p[j])         ;        if (j < 0)         return k;      }      if ((c=asciiToLowerCase((char)(a[++i] & 0xFF))) < 128)       i+=asciiShift[c]; else {        j=shift[c * c & m];        k=shift[(c * PHI2) >> hs & m];        i+=j > k ? j : k;      }    }    if (i == m1) {      j=n;      while (j-- != 0 && asciiToLowerCase((char)(a[i--] & 0xFF)) == p[j])       ;      if (j < 0)       return i + 1;    }    return -1;  } else {    while (i < m1) {      if (unicodeToLowerCase((char)(a[i] & 0xFF)) == last) {        j=n - 1;        k=i;        while (j-- != 0 && unicodeToLowerCase((char)(a[--k] & 0xFF)) == p[j])         ;        if (j < 0)         return k;      }      if ((c=unicodeToLowerCase((char)(a[++i] & 0xFF))) < 128)       i+=asciiShift[c]; else {        j=shift[c * c & m];        k=shift[(c * PHI2) >> hs & m];        i+=j > k ? j : k;      }    }    if (i == m1) {      j=n;      while (j-- != 0 && unicodeToLowerCase((char)(a[i--] & 0xFF)) == p[j])       ;      if (j < 0)       return i + 1;    }    return -1;  }}  }
class C{  @Override public void recycle(){  this.recycleImage();  this.recycleTexture(mGLWrapper);  mIsRecycled=true;}  }
class C{  public TIntHash(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);  no_entry_value=Constants.DEFAULT_INT_NO_ENTRY_VALUE;  if (no_entry_value != (int)0) {    Arrays.fill(_set,no_entry_value);  }}  }
class C{  public final int length(){  return array.length;}  }
class C{  public void endVisit(TypeLiteral node){}  }
class C{  public void or(BitVector set){  if (this == set) {    return;  }  int setLength=set.bits.length;  for (int i=setLength; i-- > 0; ) {    bits[i]|=set.bits[i];  }}  }
class C{  private static String scriptToString(Script scriptPubKey){  final StringBuilder buf=new StringBuilder();  for (  ScriptChunk chunk : scriptPubKey.getChunks()) {    if (buf.length() > 0) {      buf.append(" ");    }    if (chunk.isOpCode()) {      buf.append(getOpCodeName(chunk.opcode));    } else     if (chunk.data != null) {      buf.append("0x").append(Integer.toString(chunk.opcode,16)).append(" 0x").append(Utils.HEX.encode(chunk.data));    } else {      buf.append(chunk.toString());    }  }  return buf.toString();}  }
class C{  public final void print(double d) throws IOException {  print(String.valueOf(d));}  }
class C{  public static Object checkCast(Object castTarget,Class castClass){  if (castTarget == null)   return null;  if (!castClass.isInstance(castTarget)) {    throw new InternalGemFireError(LocalizedStrings.TypeUtils_EXPECTED_INSTANCE_OF_0_BUT_WAS_1.toLocalizedString(new Object[]{castClass.getName(),castTarget.getClass().getName()}));  }  return castTarget;}  }
