class C{  public Set<String> collectAttributes(String xpath,String attrName) throws DocumentException {  Set<String> result=new HashSet<String>();  for (Iterator<Node> i=xpathIterator(xpath); i.hasNext(); ) {    Node node=i.next();    String value=checkAttribute(node,attrName).getValue();    result.add(value);  }  return result;}  }
class C{  public static void sort(DocumentOrderingWrapper[] documents){  Timer t=Timer.getInstance();  if (t != null) {    t.startTiming();  }  try {    enhanceOrderingData(documents);  } catch (  CircularDependencyException re) {    String msg="Circular dependencies detected!\nDocument Info\n==================\n";    for (    DocumentOrderingWrapper w : documents) {      msg+=("  " + w.toString() + '\n');    }    throw new ConfigurationException(msg);  }  preSort(documents);  int numberOfPasses=innerSort(documents);  for (int i=0; i < documents.length; i++) {    LinkedList<String> ids=getIds(documents);    if (done(documents,ids)) {      break;    }  }  if (t != null) {    t.stopTiming();    t.logResult("\"faces-config\" document sorting complete in " + numberOfPasses + '.');  }}  }
class C{  @Nonnull public static <T>Observable.Operator<T,T> niceErrorOperator(@Nullable final String message){  final StackTraceElement[] stackTraceElements=Thread.currentThread().getStackTrace();  return niceErrorOperator(message,stackTraceElements);}  }
class C{  @Override public boolean mkdirs() throws IOException {  return getWritePath().mkdirs();}  }
class C{  public int stem(char text[],int length,boolean stemDerivational){  flags=0;  numSyllables=0;  for (int i=0; i < length; i++)   if (isVowel(text[i]))   numSyllables++;  if (numSyllables > 2)   length=removeParticle(text,length);  if (numSyllables > 2)   length=removePossessivePronoun(text,length);  if (stemDerivational)   length=stemDerivational(text,length);  return length;}  }
class C{  public static <T>void blockingSubscribePrint(Observable<T> observable,String name){  CountDownLatch latch=new CountDownLatch(1);  subscribePrint(observable.finallyDo(null),name);  try {    latch.await();  } catch (  InterruptedException e) {  }}  }
class C{  public Id<DgGreen> convertFromLinkIdToLinkId2LightId(Id<Link> fromLinkId,Id<Lane> fromLaneId,Id<Link> toLinkId){  String id=null;  if (fromLaneId == null) {    id=fromLinkId.toString() + "55" + toLinkId.toString();  } else {    id=fromLinkId.toString() + "66" + fromLaneId.toString()+ "55"+ toLinkId.toString();  }  String idString=id.toString();  return idPool.createId(idString,DgGreen.class);}  }
class C{  static void adjustIndentation(NodeTextRep oldTextRep,NodeTextRep newTextRep,Vector<Insertion>[] insVecArray){  int numOfLines=insVecArray.length;  int[] startingPos=new int[numOfLines];  for (int i=0; i < numOfLines; i++) {    String str=oldTextRep.nodeText[i];    startingPos[i]=StringHelper.leadingSpaces(str);    if (startingPos[i] == str.length()) {      startingPos[i]=-1;    }    int coveringLine;    if (startingPos[i] == -1) {      coveringLine=-1;    } else {      int j=i - 1;      while ((j >= 0) && ((startingPos[j] > startingPos[i]) || (startingPos[j] == -1))) {        j--;      }      coveringLine=j;    }    int addSpace;    if (coveringLine == -1) {      addSpace=0;    } else {      addSpace=newVecInsertPos(startingPos[i],insVecArray[coveringLine]) - startingPos[i];    }    str=newTextRep.nodeText[i];    if (addSpace > 0) {      newTextRep.nodeText[i]=StringHelper.copyString(" ",addSpace) + str;    } else     if (addSpace < 0) {      newTextRep.nodeText[i]=str.substring(-addSpace);    }    adjustMappingPairVector(1,addSpace,newTextRep.mapping[i]);  }}  }
class C{  protected StoragePolicyTransitionParamsDto initiateStoragePolicyTransitionImpl(StoragePolicySelection storagePolicySelection){  validateStoragePolicySelection(storagePolicySelection);  BusinessObjectDataKey businessObjectDataKey=storagePolicySelection.getBusinessObjectDataKey();  StoragePolicyKey storagePolicyKey=storagePolicySelection.getStoragePolicyKey();  Integer storagePolicyVersion=storagePolicySelection.getStoragePolicyVersion();  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataDaoHelper.getBusinessObjectDataEntity(businessObjectDataKey);  validateBusinessObjectData(businessObjectDataEntity,businessObjectDataKey);  StoragePolicyEntity storagePolicyEntity=storagePolicyDaoHelper.getStoragePolicyEntityByKeyAndVersion(storagePolicyKey,storagePolicyVersion);  String sourceStorageName=storagePolicyEntity.getStorage().getName();  validateSourceStorage(storagePolicyEntity.getStorage(),storagePolicyKey,storagePolicyVersion);  String sourceBucketName=storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),storagePolicyEntity.getStorage(),true);  String destinationStorageName=storagePolicyEntity.getDestinationStorage().getName();  validateDestinationStorage(storagePolicyEntity.getDestinationStorage(),storagePolicyKey,storagePolicyVersion);  String destinationBucketName=storageHelper.getStorageAttributeValueByName(configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_BUCKET_NAME),storagePolicyEntity.getDestinationStorage(),true);  StorageUnitEntity sourceStorageUnitEntity=storageUnitDaoHelper.getStorageUnitEntity(sourceStorageName,businessObjectDataEntity);  validateSourceStorageUnit(sourceStorageUnitEntity,sourceStorageName,businessObjectDataKey);  StorageUnitEntity destinationStorageUnitEntity=storageUnitDao.getStorageUnitByBusinessObjectDataAndStorageName(businessObjectDataEntity,destinationStorageName);  validateDestinationStorageUnit(destinationStorageUnitEntity,destinationStorageName,businessObjectDataKey);  String sourceS3KeyPrefix=s3KeyPrefixHelper.buildS3KeyPrefix(storagePolicyEntity.getStorage(),sourceStorageUnitEntity.getBusinessObjectData().getBusinessObjectFormat(),businessObjectDataKey);  List<StorageFile> storageFiles=storageFileHelper.createStorageFilesFromEntities(sourceStorageUnitEntity.getStorageFiles());  Assert.isTrue(!CollectionUtils.isEmpty(storageFiles),String.format("Business object data has no storage files registered in \"%s\" storage. Business object data: {%s}",sourceStorageName,businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));  validateTotalStorageFilesSize(sourceStorageName,businessObjectDataKey,storageFileHelper.getStorageFilesSizeBytes(storageFiles));  storageFileHelper.validateStorageFiles(storageFileHelper.getFilePathsFromStorageFiles(storageFiles),sourceS3KeyPrefix,sourceStorageUnitEntity.getBusinessObjectData(),sourceStorageUnitEntity.getStorage().getName());  Long registeredStorageFileCount=storageFileDao.getStorageFileCount(sourceStorageName,StringUtils.appendIfMissing(sourceS3KeyPrefix,"/"));  if (registeredStorageFileCount != storageFiles.size()) {    throw new IllegalStateException(String.format("Found %d registered storage file(s) matching business object data S3 key prefix in the storage that is not equal to the number " + "of storage files (%d) registered with the business object data in that storage. " + "Storage: {%s}, s3KeyPrefix {%s}, business object data: {%s}",registeredStorageFileCount,storageFiles.size(),sourceStorageName,sourceS3KeyPrefix,businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));  }  StorageUnitStatusEntity newDestinationStorageUnitStatusEntity=storageUnitStatusDaoHelper.getStorageUnitStatusEntity(StorageUnitStatusEntity.ARCHIVING);  String oldDestinationStorageUnitStatus=null;  if (destinationStorageUnitEntity == null) {    destinationStorageUnitEntity=new StorageUnitEntity();    businessObjectDataEntity.getStorageUnits().add(destinationStorageUnitEntity);    destinationStorageUnitEntity.setStorage(storagePolicyEntity.getDestinationStorage());    destinationStorageUnitEntity.setBusinessObjectData(businessObjectDataEntity);    destinationStorageUnitEntity.setStatus(newDestinationStorageUnitStatusEntity);    storageUnitDao.saveAndRefresh(destinationStorageUnitEntity);  } else {    oldDestinationStorageUnitStatus=destinationStorageUnitEntity.getStatus().getCode();  }  String destinationS3KeyBasePrefix=sourceBucketName;  destinationStorageUnitEntity.setDirectoryPath(String.format("%s/%s",destinationS3KeyBasePrefix,sourceS3KeyPrefix));  destinationStorageUnitEntity.setParentStorageUnit(sourceStorageUnitEntity);  storageUnitDaoHelper.updateStorageUnitStatus(destinationStorageUnitEntity,newDestinationStorageUnitStatusEntity,StorageUnitStatusEntity.ARCHIVING);  StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto=new StoragePolicyTransitionParamsDto();  storagePolicyTransitionParamsDto.setBusinessObjectDataKey(businessObjectDataKey);  storagePolicyTransitionParamsDto.setSourceStorageName(sourceStorageName);  storagePolicyTransitionParamsDto.setSourceBucketName(sourceBucketName);  storagePolicyTransitionParamsDto.setSourceS3KeyPrefix(sourceS3KeyPrefix);  storagePolicyTransitionParamsDto.setNewSourceStorageUnitStatus(sourceStorageUnitEntity.getStatus().getCode());  storagePolicyTransitionParamsDto.setOldSourceStorageUnitStatus(sourceStorageUnitEntity.getStatus().getCode());  storagePolicyTransitionParamsDto.setSourceStorageFiles(storageFiles);  storagePolicyTransitionParamsDto.setDestinationStorageName(destinationStorageName);  storagePolicyTransitionParamsDto.setDestinationBucketName(destinationBucketName);  storagePolicyTransitionParamsDto.setDestinationS3KeyBasePrefix(destinationS3KeyBasePrefix);  storagePolicyTransitionParamsDto.setNewDestinationStorageUnitStatus(newDestinationStorageUnitStatusEntity.getCode());  storagePolicyTransitionParamsDto.setOldDestinationStorageUnitStatus(oldDestinationStorageUnitStatus);  return storagePolicyTransitionParamsDto;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public MutableDateTime(){  super();}  }
class C{  @Override public Dimension minimumLayoutSize(Container target){  Dimension minimum=layoutSize(target,false);  minimum.width-=(getHgap() + 1);  return minimum;}  }
class C{  private static File constructFilePaths(String file1,String file2){  File newPath;  if (file2.startsWith(file1)) {    newPath=new File(file2);  } else {    newPath=new File(file1 + "/" + file2);  }  return newPath;}  }
class C{  private static int variableLengthIntLength(final int value){  int valueToWrite=getValueToWrite(value);  int length=0;  while (true) {    length++;    if ((valueToWrite & 0x80) != 0) {      valueToWrite>>>=8;    } else {      break;    }  }  return length;}  }
class C{  public static Map<String,Object> createElectronicText(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=createElectronicTextMethod(dctx,context);  return result;}  }
class C{  private void generateInnerClassHandles(IType type,IBinaryType typeInfo,ArrayList childrenHandles){  IBinaryNestedType[] innerTypes=typeInfo.getMemberTypes();  if (innerTypes != null) {    IPackageFragment pkg=(IPackageFragment)type.getAncestor(IJavaElement.PACKAGE_FRAGMENT);    for (int i=0, typeCount=innerTypes.length; i < typeCount; i++) {      IBinaryNestedType binaryType=innerTypes[i];      IClassFile parentClassFile=pkg.getClassFile(new String(ClassFile.unqualifiedName(binaryType.getName())) + SUFFIX_STRING_class);      IType innerType=new BinaryType((JavaElement)parentClassFile,((JavaElement)parentClassFile).manager,ClassFile.simpleName(binaryType.getName()));      childrenHandles.add(innerType);    }  }}  }
class C{  public SemEstimator(ICovarianceMatrix covMatrix,SemPm semPm,SemOptimizer semOptimizer){  if (covMatrix == null) {    throw new NullPointerException("CovarianceMatrix must not be null.");  }  if (semPm == null) {    throw new NullPointerException("SemPm must not be null.");  }  if (DataUtils.containsMissingValue(covMatrix.getMatrix())) {    throw new IllegalArgumentException("Expecting a covariance matrix with no missing values.");  }  semPm.getGraph().setShowErrorTerms(false);  setCovMatrix(submatrix(covMatrix,semPm));  setSemPm(semPm);  setSemOptimizer(semOptimizer);}  }
class C{  public static boolean equalPopulation(final Population s1,final Population s2){  try {    @SuppressWarnings("resource") InputStream inputStream1=null;    @SuppressWarnings("resource") InputStream inputStream2=null;    try {      inputStream1=openPopulationInputStream(s1);      inputStream2=openPopulationInputStream(s2);      return IOUtils.isEqual(inputStream1,inputStream2);    }  finally {      if (inputStream1 != null)       inputStream1.close();      if (inputStream2 != null)       inputStream2.close();    }  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  public void addInitState(TLCState state,long stateFP){  for (int soln=0; soln < solutions.length; soln++) {    OrderOfSolution os=solutions[soln];    BEGraph bgraph=bgraphs[soln];    int slen=os.getCheckState().length;    int alen=os.getCheckAction().length;    boolean[] checkStateRes=os.checkState(state);    boolean[] checkActionRes=os.checkAction(state,state);    if (!os.hasTableau()) {      BEGraphNode node=new BEGraphNode(stateFP);      node.setCheckState(checkStateRes);      bgraph.addInitNode(node);      node.addTransition(node,slen,alen,checkActionRes);      bgraph.allNodes.putBENode(node);    } else {      int initCnt=os.getTableau().getInitCnt();      for (int i=0; i < initCnt; i++) {        TBGraphNode tnode=os.getTableau().getNode(i);        if (tnode.isConsistent(state,myTool)) {          BTGraphNode destNode=new BTGraphNode(stateFP,tnode.getIndex());          destNode.setCheckState(checkStateRes);          bgraph.addInitNode(destNode);          bgraph.allNodes.putBTNode(destNode);          addNodesForStut(state,stateFP,destNode,checkStateRes,checkActionRes,os,bgraph);        }      }    }    bgraph.allNodes.setDone(stateFP);  }}  }
class C{  public void rotate(float angle){  checkMatrix(2);  matrix.rotate(angle);}  }
class C{  public void write_irsend(String code){  try {    mService.write_irsend(code);  } catch (  RemoteException ex) {  }}  }
class C{  public <U>SimpleReactStream<Long> from(final LongStream stream){  return from(stream.boxed());}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case NODE_ID:    return isSetNodeId();case VERSION:  return isSetVersion();}throw new IllegalStateException();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public StatementBuilder resetCount(){  index=0;  return this;}  }
class C{  public void readAll(){  if (log.isDebugEnabled()) {    log.debug("read invoked");  }  setToRead(false);  setState(READ);  setBusy(true);  setBusy(false);}  }
class C{  private void writeOutTypeListArray(BytecodeContext bc,boolean isArray) throws TransformerException {  ForVisitor forVisitor=new ForVisitor();  loopVisitor=forVisitor;  GeneratorAdapter adapter=bc.getAdapter();  int array=adapter.newLocal(Types.ARRAY);  int len=adapter.newLocal(Types.INT_VALUE);  if (isArray) {    getAttribute("array").getValue().writeOut(bc,Expression.MODE_REF);  } else {    getAttribute("list").getValue().writeOut(bc,Expression.MODE_REF);    if (containsAttribute("delimiters")) {      getAttribute("delimiters").getValue().writeOut(bc,Expression.MODE_REF);      adapter.invokeStatic(Types.LIST_UTIL,LIST_TO_ARRAY_REMOVE_EMPTY_SS);    } else {      adapter.visitIntInsn(Opcodes.BIPUSH,44);      adapter.invokeStatic(Types.LIST_UTIL,LIST_TO_ARRAY_REMOVE_EMPTY_SC);    }  }  adapter.storeLocal(array);  adapter.loadLocal(array);  adapter.invokeInterface(Types.ARRAY,SIZE);  adapter.storeLocal(len);  Attribute attrIndex=getAttribute("index");  int index=-1;  if (attrIndex != null) {    index=adapter.newLocal(Types.VARIABLE_REFERENCE);    adapter.loadArg(0);    attrIndex.getValue().writeOut(bc,Expression.MODE_REF);    adapter.invokeStatic(Types.VARIABLE_INTERPRETER,GET_VARIABLE_REFERENCE);    adapter.storeLocal(index);  }  Attribute attrItem=getAttribute("item");  int item=-1;  if (attrItem != null) {    item=adapter.newLocal(Types.VARIABLE_REFERENCE);    adapter.loadArg(0);    attrItem.getValue().writeOut(bc,Expression.MODE_REF);    adapter.invokeStatic(Types.VARIABLE_INTERPRETER,GET_VARIABLE_REFERENCE);    adapter.storeLocal(item);  }  int obj=0;  if (isArray)   obj=adapter.newLocal(Types.OBJECT);  int i=forVisitor.visitBegin(adapter,1,false);  if (isArray) {    adapter.loadLocal(array);    adapter.visitVarInsn(Opcodes.ILOAD,i);    ASMConstants.NULL(adapter);    adapter.invokeInterface(Types.ARRAY,GET);    adapter.dup();    adapter.storeLocal(obj);    Label endIf=new Label();    adapter.visitJumpInsn(Opcodes.IFNONNULL,endIf);    adapter.goTo(forVisitor.getContinueLabel());    adapter.visitLabel(endIf);    if (item == -1)     adapter.loadLocal(index); else     adapter.loadLocal(item);    adapter.loadArg(0);    adapter.loadLocal(obj);  } else {    if (item == -1)     adapter.loadLocal(index); else     adapter.loadLocal(item);    adapter.loadArg(0);    adapter.loadLocal(array);    adapter.visitVarInsn(Opcodes.ILOAD,i);    adapter.invokeInterface(Types.ARRAY,GETE);  }  adapter.invokeVirtual(Types.VARIABLE_REFERENCE,SET);  adapter.pop();  if (index != -1 && item != -1) {    adapter.loadLocal(index);    adapter.loadArg(0);    adapter.visitVarInsn(Opcodes.ILOAD,i);    adapter.cast(Types.INT_VALUE,Types.DOUBLE_VALUE);    adapter.invokeStatic(Types.CASTER,Methods_Caster.TO_DOUBLE[Methods_Caster.DOUBLE]);    adapter.invokeVirtual(Types.VARIABLE_REFERENCE,SET);    adapter.pop();  }  getBody().writeOut(bc);  forVisitor.visitEnd(bc,len,true,getStart());}  }
class C{  public SimilarityMatrix(int size){  this.size=size;  matrix=new float[size * (size + 1) / 2];}  }
class C{  private void checkOutEdgesAreInLoop(BasicBlock block) throws NonRegularLoopException {  Enumeration<BasicBlock> block_outEdges=block.getOut();  while (block_outEdges.hasMoreElements()) {    BasicBlock curEdgeBB=block_outEdges.nextElement();    if ((!isInLoop(curEdgeBB)) && (block != exit)) {      throw new NonRegularLoopException("Parallelization giving up: edge out of block in loop to a block outside of the loop, and the block wasn't the loop exit" + ((block == header) ? " (it was the header block though)" : ""));    }  }}  }
class C{  public boolean isFood(){  return typeString.contains(SUFFIX_FOOD);}  }
class C{  public void validateCreateRequest(final JsonCommand jsonCommand){  final String jsonString=jsonCommand.json();  final JsonElement jsonElement=jsonCommand.parsedJson();  if (StringUtils.isBlank(jsonString)) {    throw new InvalidJsonException();  }  final Type typeToken=new TypeToken<Map<String,Object>>(){  }.getType();  this.fromJsonHelper.checkForUnsupportedParameters(typeToken,jsonString,ReportMailingJobConstants.CREATE_REQUEST_PARAMETERS);  final List<ApiParameterError> dataValidationErrors=new ArrayList<>();  final DataValidatorBuilder dataValidatorBuilder=new DataValidatorBuilder(dataValidationErrors).resource(StringUtils.lowerCase(ReportMailingJobConstants.REPORT_MAILING_JOB_RESOURCE_NAME));  final String name=this.fromJsonHelper.extractStringNamed(ReportMailingJobConstants.NAME_PARAM_NAME,jsonElement);  dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.NAME_PARAM_NAME).value(name).notBlank().notExceedingLengthOf(100);  final String startDateTime=this.fromJsonHelper.extractStringNamed(ReportMailingJobConstants.START_DATE_TIME_PARAM_NAME,jsonElement);  dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.START_DATE_TIME_PARAM_NAME).value(startDateTime).notBlank();  final Integer stretchyReportId=this.fromJsonHelper.extractIntegerWithLocaleNamed(ReportMailingJobConstants.STRETCHY_REPORT_ID_PARAM_NAME,jsonElement);  dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.STRETCHY_REPORT_ID_PARAM_NAME).value(stretchyReportId).notNull().integerGreaterThanZero();  final String emailRecipients=this.fromJsonHelper.extractStringNamed(ReportMailingJobConstants.EMAIL_RECIPIENTS_PARAM_NAME,jsonElement);  dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.EMAIL_RECIPIENTS_PARAM_NAME).value(emailRecipients).notBlank();  final String emailSubject=this.fromJsonHelper.extractStringNamed(ReportMailingJobConstants.EMAIL_SUBJECT_PARAM_NAME,jsonElement);  dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.EMAIL_SUBJECT_PARAM_NAME).value(emailSubject).notBlank().notExceedingLengthOf(100);  final String emailMessage=this.fromJsonHelper.extractStringNamed(ReportMailingJobConstants.EMAIL_MESSAGE_PARAM_NAME,jsonElement);  dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.EMAIL_MESSAGE_PARAM_NAME).value(emailMessage).notBlank();  if (this.fromJsonHelper.parameterExists(ReportMailingJobConstants.IS_ACTIVE_PARAM_NAME,jsonElement)) {    final Boolean isActive=this.fromJsonHelper.extractBooleanNamed(ReportMailingJobConstants.IS_ACTIVE_PARAM_NAME,jsonElement);    dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.IS_ACTIVE_PARAM_NAME).value(isActive).notNull();  }  final Integer emailAttachmentFileFormatId=this.fromJsonHelper.extractIntegerSansLocaleNamed(ReportMailingJobConstants.EMAIL_ATTACHMENT_FILE_FORMAT_ID_PARAM_NAME,jsonElement);  dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.EMAIL_ATTACHMENT_FILE_FORMAT_ID_PARAM_NAME).value(emailAttachmentFileFormatId).notNull();  if (emailAttachmentFileFormatId != null) {    dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.EMAIL_ATTACHMENT_FILE_FORMAT_ID_PARAM_NAME).value(emailAttachmentFileFormatId).isOneOfTheseValues(ReportMailingJobEmailAttachmentFileFormat.validIds());  }  final String dateFormat=jsonCommand.dateFormat();  dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.DATE_FORMAT_PARAM_NAME).value(dateFormat).notBlank();  if (StringUtils.isNotEmpty(dateFormat)) {    try {      final DateTimeFormatter dateTimeFormatter=DateTimeFormat.forPattern(dateFormat).withLocale(jsonCommand.extractLocale());      LocalDateTime.parse(startDateTime,dateTimeFormatter);    } catch (    IllegalArgumentException ex) {      dataValidatorBuilder.reset().parameter(ReportMailingJobConstants.DATE_FORMAT_PARAM_NAME).value(dateFormat).failWithCode("invalid.date.format");    }  }  throwExceptionIfValidationWarningsExist(dataValidationErrors);}  }
class C{  final void remove(java.lang.Thread thread){synchronized (this.childrenThreadsLock) {    for (int i=0; i < numThreads; i++) {      if (childrenThreads[i].equals(thread)) {        numThreads--;        System.arraycopy(childrenThreads,i + 1,childrenThreads,i,numThreads - i);        childrenThreads[numThreads]=null;        break;      }    }  }  destroyIfEmptyDaemon();}  }
class C{  private void loadTile(int x,int y,int zoomLevel,Projection proj,OMGraphicList list){  String imagePath=buildFilePath(x,y,zoomLevel,getFileExt());  loadTile(imagePath,x,y,zoomLevel,proj,list);}  }
class C{  public void testGetDataLength() throws StunException {  int expectedReturn=MsgFixture.REASON_PHRASE.getBytes().length + 4;  errorCodeAttribute.setErrorClass(MsgFixture.ERROR_CLASS);  errorCodeAttribute.setErrorNumber(MsgFixture.ERROR_NUMBER);  errorCodeAttribute.setReasonPhrase(MsgFixture.REASON_PHRASE);  char actualReturn=errorCodeAttribute.getDataLength();  assertEquals("data length1",expectedReturn,actualReturn);}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  @After public void tearDown() throws IOException {  server.shutdown();}  }
class C{  protected void initAdditionalHighlightingTypes(){}  }
class C{  public int MPV_common_init(){  int y_size, c_size, yc_size, i, mb_array_size, x, y, threads;  if (this.pix_fmt == PIX_FMT_NONE) {    return -1;  }  if (this.thread_count > H264Context.MAX_THREADS || (this.thread_count > this.mb_height && this.mb_height != 0)) {    return -1;  }  if ((this.width != 0 || this.height != 0) && av_image_check_size(this.width,this.height,0,this) != 0)   return -1;  this.dsp.dsputil_init(this);  this.ff_dct_common_init();  this.mb_width=(this.width + 15) / 16;  this.mb_stride=this.mb_width + 1;  this.b8_stride=this.mb_width * 2 + 1;  this.b4_stride=this.mb_width * 4 + 1;  mb_array_size=this.mb_height * this.mb_stride;  this.chroma_x_shift=ImageUtils.av_pix_fmt_descriptors[pix_fmt].log2_chroma_w;  this.chroma_y_shift=ImageUtils.av_pix_fmt_descriptors[pix_fmt].log2_chroma_h;  this.h_edge_pos=this.mb_width * 16;  this.v_edge_pos=this.mb_height * 16;  this.mb_num=this.mb_width * this.mb_height;  this.block_wrap[0]=this.block_wrap[1]=this.block_wrap[2]=this.block_wrap[3]=this.b8_stride;  this.block_wrap[4]=this.block_wrap[5]=this.mb_stride;  y_size=this.b8_stride * (2 * this.mb_height + 1);  c_size=this.mb_stride * (this.mb_height + 1);  yc_size=y_size + 2 * c_size;  this.coded_frame=(AVFrame)this.current_picture;  this.mb_index2xy=new int[this.mb_num + 1];  for (y=0; y < this.mb_height; y++) {    for (x=0; x < this.mb_width; x++) {      this.mb_index2xy[x + y * this.mb_width]=x + y * this.mb_stride;    }  }  this.mb_index2xy[this.mb_height * this.mb_width]=(this.mb_height - 1) * this.mb_stride + this.mb_width;  this.picture=new AVFrame[MAX_PICTURE_COUNT];  for (i=0; i < MAX_PICTURE_COUNT; i++) {    this.picture[i]=new AVFrame();    this.picture[i].pts=AV_NOPTS_VALUE;    this.picture[i].key_frame=1;  }  this.error_status_table=new int[mb_array_size];  ErrorResilience.dc_val_base=new int[yc_size];  ErrorResilience.dc_val[0]=this.b8_stride + 1;  ErrorResilience.dc_val[1]=y_size + this.mb_stride + 1;  ErrorResilience.dc_val[2]=ErrorResilience.dc_val[1] + c_size;  for (i=0; i < yc_size; i++)   ErrorResilience.dc_val_base[i]=1024;  this.mbintra_table=new int[mb_array_size];  Arrays.fill(this.mbintra_table,1);  this.mbskip_table=new int[mb_array_size + 2];  this.prev_pict_types=new int[PREV_PICT_TYPES_BUFFER_SIZE];  this.parse_context.state=-1;  this.context_initialized=1;  this.thread_context[0]=this;  threads=this.thread_count;  for (i=0; i < threads; i++) {    if (init_duplicate_context(this.thread_context[i],this) < 0) {      this.MPV_common_end();      return -1;    }    this.thread_context[i].start_mb_y=(this.mb_height * (i) + this.thread_count / 2) / this.thread_count;    this.thread_context[i].end_mb_y=(this.mb_height * (i + 1) + this.thread_count / 2) / this.thread_count;  }  return 0;}  }
class C{  private void finishPrecaching(boolean tryAgainSoon){  Log.v(TAG,"Finish precaching");  shutdownPrecaching(tryAgainSoon);}  }
class C{  public AllPermissionCollection(){  all_allowed=false;}  }
class C{  private void initRecyclerView(Context context){  this.mLinearLayoutManager=new LinearLayoutManager(context);  this.mLinearLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);  this.setLayoutManager(this.mLinearLayoutManager);  this.setItemAnimator(new DefaultItemAnimator());  this.setHasFixedSize(true);}  }
class C{  public static VersionedObjectList execute(ExecutablePool pool,Region region,Collection<Object> keys,EventID eventId,boolean isRetry,Object callbackArg){  RemoveAllOpImpl op=new RemoveAllOpImpl(region,keys,eventId,((PoolImpl)pool).getPRSingleHopEnabled(),callbackArg);  op.initMessagePart();  if (isRetry) {    op.getMessage().setIsRetry();  }  return (VersionedObjectList)pool.execute(op);}  }
class C{  private void testExpectedType(RoundEnvironment roundEnv,String name){  if (!roundEnv.getRootElements().isEmpty()) {    for (    TypeElement type : typesIn(roundEnv.getRootElements())) {      if (!name.contentEquals(type.getSimpleName()))       throw new RuntimeException("Unexpected type " + type.getSimpleName());    }  } else   throw new RuntimeException("Unexpected empty root elements.");}  }
class C{  public final boolean putInstruction(AbsoluteAddress addr,Instruction instr){  return assemblyMap.put(addr,instr) == null;}  }
class C{  public ModeledConnection(){}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public void testTxPartitionedPessimisticSerializable() throws Exception {  checkTx(PARTITIONED,PESSIMISTIC,SERIALIZABLE);}  }
class C{  public static boolean containsScript(String text){  if ((text == null) || text.isEmpty()) {    return false;  }  text=text.toLowerCase();  if (text.indexOf("<script") != -1) {    return true;  }  if (text.indexOf("<iframe") != -1) {    return true;  }  return false;}  }
class C{  public CacheKeyConfiguration(){}  }
class C{  public static Collection<Encoding> all(){  return enums.all();}  }
class C{  private double[] computeCumulativeDistribution(double[] dist){  double[] cumDist=new double[dist.length];  double sum=0;  for (int i=0; i < dist.length; i++) {    sum+=dist[i];    cumDist[i]=sum;  }  return cumDist;}  }
class C{  public static ImmutableBiomeVolume newWithoutArrayClone(byte[] biomes,Vector3i start,Vector3i size){  return new ByteArrayImmutableBiomeBuffer(start,size,biomes);}  }
class C{  public boolean isIgnoringWhitespace(){  return _isIgnoringWS;}  }
class C{  public void destroy(){  super.destroy();  for (  String key : new ArrayList<String>(serverMap.keySet())) {    ExchangeServer server=serverMap.remove(key);    if (server != null) {      try {        if (logger.isInfoEnabled()) {          logger.info("Close dubbo server: " + server.getLocalAddress());        }        server.close(getServerShutdownTimeout());      } catch (      Throwable t) {        logger.warn(t.getMessage(),t);      }    }  }  for (  String key : new ArrayList<String>(referenceClientMap.keySet())) {    ExchangeClient client=referenceClientMap.remove(key);    if (client != null) {      try {        if (logger.isInfoEnabled()) {          logger.info("Close dubbo connect: " + client.getLocalAddress() + "-->"+ client.getRemoteAddress());        }        client.close();      } catch (      Throwable t) {        logger.warn(t.getMessage(),t);      }    }  }  for (  String key : new ArrayList<String>(ghostClientMap.keySet())) {    ExchangeClient client=ghostClientMap.remove(key);    if (client != null) {      try {        if (logger.isInfoEnabled()) {          logger.info("Close dubbo connect: " + client.getLocalAddress() + "-->"+ client.getRemoteAddress());        }        client.close();      } catch (      Throwable t) {        logger.warn(t.getMessage(),t);      }    }  }}  }
class C{  public static String[] loadTitleAndDescription(String url){  String title="";  String description="";  Document pageResp;  try {    pageResp=Jsoup.connect(url).maxBodySize(LOAD_TITLE_MAX_BODY_SIZE).followRedirects(true).execute().parse();    title=pageResp.title();  } catch (  Exception e) {    Log.e("NetworkManager",e.toString());    return new String[]{title,description};  }  for (  String selector : DESCRIPTION_SELECTORS) {    try {      description=pageResp.head().select(selector).first().attr("content");    } catch (    Exception e) {      Log.i("NetworkManager",e.toString());    }    if (!"".equals(description)) {      break;    }  }  return new String[]{title,description};}  }
class C{  public Map<Integer,Integer> graphType(){  Map<Integer,Integer> result;  int i;  result=new HashMap<Integer,Integer>();  if (nodes != null) {    for (i=0; i < nodes.length; i++) {      if (nodes[i].getClassifier() instanceof Drawable) {        result.put(i,((Drawable)nodes[i].getClassifier()).graphType());      }    }  }  return result;}  }
class C{  public void invoke(Request request,PatternPathRouter.RoutableDestination<HttpResourceModel> destination) throws Exception {  Object returnVal=method.invoke(handler,args);  returnVal=invokeSubResource(request,destination,returnVal);  responder.setEntity(returnVal);  responder.send();}  }
class C{  protected boolean isLoggedIn(){  return !TextUtils.isEmpty(UserInfo.INSTANCE.getFirstName());}  }
class C{  public JmsTopicResourceOnStandaloneConfigurationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_numExpr_1_();}  }
class C{  private static int checkNodelistForValue(final NodeList tree,final String value,final boolean comments){  int nodePosition=-1;  for (int i=0; i < tree.getLength(); i++) {    if (comments) {      if (tree.item(i).getNodeType() == 8 && tree.item(i).getNodeValue().equals(value)) {        nodePosition=i;      }    } else {      if (tree.item(i).getNodeName().equals(value)) {        nodePosition=i;      }    }    if (nodePosition == -1 && tree.item(i).hasChildNodes()) {      nodePosition=checkNodelistForValue(tree.item(i).getChildNodes(),value,comments);    }    if (nodePosition != -1) {      i=tree.getLength();    }  }  return nodePosition;}  }
class C{  public static void unregisterDeferral(ProfileActivator pa){  if (!deferring) {    return;  }  if (aVector == null) {    return;  }  aVector.removeElement(pa);  return;}  }
class C{  public void addNativeChildAt(ReactShadowNode child,int nativeIndex){  Assertions.assertCondition(!mIsLayoutOnly);  Assertions.assertCondition(!child.mIsLayoutOnly);  if (mNativeChildren == null) {    mNativeChildren=new ArrayList<>(4);  }  mNativeChildren.add(nativeIndex,child);  child.mNativeParent=this;}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  if (drawable == null) {    throw new NullPointerException("Drawable to convert should NOT be null");  }  if (drawable instanceof BitmapDrawable) {    return ((BitmapDrawable)drawable).getBitmap();  }  if (drawable.getIntrinsicWidth() <= 0 && drawable.getIntrinsicHeight() <= 0) {    return null;  }  Bitmap bitmap=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());  drawable.draw(canvas);  return bitmap;}  }
class C{  private static Configuration configuration(String authority,boolean tcp){  Configuration cfg=new Configuration();  cfg.set("fs.defaultFS","igfs://" + authority + "/");  cfg.set("fs.igfs.impl",org.apache.ignite.hadoop.fs.v1.IgniteHadoopFileSystem.class.getName());  cfg.set("fs.AbstractFileSystem.igfs.impl",IgniteHadoopFileSystem.class.getName());  cfg.setBoolean("fs.igfs.impl.disable.cache",true);  if (tcp)   cfg.setBoolean(String.format(PARAM_IGFS_ENDPOINT_NO_EMBED,authority),true); else   cfg.setBoolean(String.format(PARAM_IGFS_ENDPOINT_NO_LOCAL_TCP,authority),true);  cfg.setBoolean(String.format(PARAM_IGFS_ENDPOINT_NO_LOCAL_SHMEM,authority),true);  return cfg;}  }
class C{  public static ProcessStart parse(final byte[] data) throws MessageParserException {  Preconditions.checkNotNull(data,"IE00066: Data argument can not be null");  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  TargetProcessThread thread=null;  MemoryModule module=null;  try {    final DocumentBuilder builder=factory.newDocumentBuilder();    final Document document=builder.parse(new ByteArrayInputStream(data,0,data.length));    final NodeList nodes=document.getFirstChild().getChildNodes();    for (int i=0; i < nodes.getLength(); ++i) {      final Node node=nodes.item(i);      final String nodeName=node.getNodeName();      if ("thread".equals(nodeName)) {        thread=parseThreadInformation(node);      } else       if ("module".equals(nodeName)) {        module=MemoryModuleParser.parseModule(node);      } else {        throw new MessageParserException(String.format("Found unknown node '%s' in process start string",nodeName));      }    }  } catch (  final Exception exception) {    CUtilityFunctions.logException(exception);    throw new MessageParserException(exception.getLocalizedMessage());  }  Preconditions.checkNotNull(thread,"IE01665: E00068: Received invalid process start string (missing thread information)");  Preconditions.checkNotNull(module,"IE01668: E00069: Received invalid target process start string (missing module information)");  return new ProcessStart(thread,module);}  }
class C{  @DELETE @Path("/{qos_id}") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Response deleteQoS(@PathParam("tenant_id") String openstackTenantId,@PathParam("qos_id") String qosId,@QueryParam("force") String force){  _log.debug("START delete QoS, force = {}",force);  throw new UnsupportedOperationException();}  }
class C{  public Spring addListener(SpringListener newListener){  if (newListener == null) {    throw new IllegalArgumentException("newListener is required");  }  mListeners.add(newListener);  return this;}  }
class C{  public double distanceSq(final Double3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  public PointLatLonTime(final CoordinateDD spatialPoint,final Long timestamp){  this(new PointLatLon(spatialPoint),timestamp);}  }
class C{  public void purge(OutputStream out) throws IOException {  out(true).writeTo(out);}  }
class C{  @Override public String version(){  return AppInfoParser.getVersion();}  }
class C{  public boolean isStatusCheck(){  return checkStatus;}  }
class C{  public void clearCookieJar(){  this.cookieJar=new CookieJar();}  }
class C{  public final byte[] decode(char[] arr){  int length=arr.length;  if (length == 0) {    return new byte[0];  }  int sndx=0, endx=length - 1;  int pad=arr[endx] == '=' ? (arr[endx - 1] == '=' ? 2 : 1) : 0;  int cnt=endx - sndx + 1;  int sepCnt=length > 76 ? (arr[76] == '\r' ? cnt / 78 : 0) << 1 : 0;  int len=((cnt - sepCnt) * 6 >> 3) - pad;  byte[] dest=new byte[len];  int d=0;  for (int cc=0, eLen=(len / 3) * 3; d < eLen; ) {    int i=INV[arr[sndx++]] << 18 | INV[arr[sndx++]] << 12 | INV[arr[sndx++]] << 6 | INV[arr[sndx++]];    dest[d++]=(byte)(i >> 16);    dest[d++]=(byte)(i >> 8);    dest[d++]=(byte)i;    if (sepCnt > 0 && ++cc == 19) {      sndx+=2;      cc=0;    }  }  if (d < len) {    int i=0;    for (int j=0; sndx <= endx - pad; j++) {      i|=INV[arr[sndx++]] << (18 - j * 6);    }    for (int r=16; d < len; r-=8) {      dest[d++]=(byte)(i >> r);    }  }  return dest;}  }
class C{  public static CCReverseTime action(CCFiniteTimeAction action){  return new CCReverseTime(action);}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public Object clone(){  try {    @SuppressWarnings("unchecked") CopyOnWriteArrayList<E> clone=(CopyOnWriteArrayList<E>)super.clone();    clone.resetLock();    return clone;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  void scheduleServiceMaintenance(Service s){  if (!s.hasOption(ServiceOption.PERIODIC_MAINTENANCE)) {    return;  }  this.serviceMaintTracker.schedule(s,Utils.getSystemNowMicrosUtc());}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String negatedCarry=environment.getNextVariableString();  final String negatedZero=environment.getNextVariableString();  final String result=environment.getNextVariableString();  instructions.add(ReilHelpers.createXor(offset,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,"1",OperandSize.BYTE,negatedCarry));  instructions.add(ReilHelpers.createXor(offset + 1,OperandSize.BYTE,Helpers.OVERFLOW_FLAG,OperandSize.BYTE,"1",OperandSize.BYTE,negatedZero));  instructions.add(ReilHelpers.createAnd(offset + 2,OperandSize.BYTE,negatedCarry,OperandSize.BYTE,negatedZero,OperandSize.BYTE,result));  return new Pair<OperandSize,String>(OperandSize.BYTE,result);}  }
class C{  public void removeAt(int index){  if (mValues[index] != DELETED) {    mValues[index]=DELETED;    mGarbage=true;  }}  }
class C{  public static Optional<SessionItem> create(Context context,Uri uri){  if (!Storage.containsPlaceholderSize(uri)) {    return Optional.absent();  }  Size dimension=getSessionSize(uri);  if (dimension == null) {    return Optional.absent();  }  return Optional.of(new SessionItem(context,uri,dimension));}  }
class C{  private Operation findOperation(ChannelHandlerContext ctx,FullHttpResponse response){  Operation request;  if (ctx.channel().hasAttr(NettyChannelContext.HTTP2_KEY)) {    Integer streamId=response.headers().getInt(HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text());    if (streamId == null) {      this.logger.warning("HTTP/2 message has no stream ID: ignoring.");      return null;    }    NettyChannelContext channelContext=ctx.channel().attr(NettyChannelContext.CHANNEL_CONTEXT_KEY).get();    if (channelContext == null) {      this.logger.warning("HTTP/2 channel is missing associated channel context: ignoring response on stream " + streamId);      return null;    }    request=channelContext.getOperationForStream(streamId);    if (request == null) {      this.logger.warning("Can't find operation for stream " + streamId);      return null;    }    channelContext.removeOperationForStream(streamId);  } else {    request=ctx.channel().attr(NettyChannelContext.OPERATION_KEY).get();    if (request == null) {      this.logger.warning("Can't find operation for channel");      return null;    }  }  return request;}  }
class C{  public MutableDirectoryPageData(final int addressBits,final IDirectoryData src){  if (src == null)   throw new IllegalArgumentException();  this.overflowKey=src.getOverflowKey();  childAddr=new long[1 << addressBits];  this.hasVersionTimestamps=src.hasVersionTimestamps();  copyFrom(src);}  }
class C{  public boolean fullScroll(int direction){  if (direction == View.FOCUS_LEFT || direction == View.FOCUS_RIGHT) {    boolean right=direction == View.FOCUS_RIGHT;    int width=getWidth();    mTempRect.left=0;    mTempRect.right=width;    if (right) {      int count=getChildCount();      if (count > 0) {        View view=getChildAt(0);        mTempRect.right=view.getRight() + getPaddingRight();        mTempRect.left=mTempRect.right - width;      }    }    return scrollAndFocusHorizontally(direction,mTempRect.left,mTempRect.right);  } else {    boolean down=direction == View.FOCUS_DOWN;    int height=getHeight();    mTempRect.top=0;    mTempRect.bottom=height;    if (down) {      int count=getChildCount();      if (count > 0) {        View view=getChildAt(count - 1);        mTempRect.bottom=view.getBottom() + getPaddingBottom();        mTempRect.top=mTempRect.bottom - height;      }    }    return scrollAndFocusVertically(direction,mTempRect.top,mTempRect.bottom);  }}  }
class C{  public NamedThreadFactory(String namePrefix){  this._namePrefix=namePrefix;  _delegate=Executors.defaultThreadFactory();}  }
class C{  public static StartElement nextStartElementEvent(XMLEventReader eventReader){  if (eventReader == null) {    String message=Logging.getMessage("nullValue.EventReaderIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    XMLEvent event=null;    while (eventReader.hasNext()) {      event=eventReader.nextEvent();      if (event != null && event.isStartElement())       break;    }    return (event != null && event.isStartElement()) ? (StartElement)event : null;  } catch (  XMLStreamException e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToParseXml",eventReader);    Logging.logger().finest(message);  }  return null;}  }
class C{  protected void respond(HttpServletResponse resp,MediaType type,String content) throws IOException {  resp.setStatus(200);  resp.setContentType(type.toString());  resp.getWriter().write(content);}  }
class C{  public void disable(){  setEnabled(false);}  }
class C{  public void cleanTempStorage(){  String[] entries=Storage.getInstance().listEntries();  int elen=entries.length;  for (int i=0; i < elen; i++) {    String key=entries[i];    if (key.startsWith(TEMP_STORAGE)) {      Storage.getInstance().deleteStorageFile(key);    }  }}  }
class C{  synchronized void abort(IndexWriter writer){  assert !Thread.holdsLock(writer) : "IndexWriter lock should never be hold when aborting";  boolean success=false;  try {    deleteQueue.clear();    if (infoStream.isEnabled("DW")) {      infoStream.message("DW","abort");    }    final int limit=perThreadPool.getActiveThreadStateCount();    for (int i=0; i < limit; i++) {      final ThreadState perThread=perThreadPool.getThreadState(i);      perThread.lock();      try {        abortThreadState(perThread);      }  finally {        perThread.unlock();      }    }    flushControl.abortPendingFlushes();    flushControl.waitForFlush();    success=true;  }  finally {    if (infoStream.isEnabled("DW")) {      infoStream.message("DW","done abort success=" + success);    }  }}  }
class C{  public static MCashLine adjustCashBook(Properties ctx,CashBookDetailBean bean,String trxName) throws OperationException {  MCash cash=getCashJournal(ctx,trxName);  if (bean.getAdjustmentAmount() == null) {    throw new NullTransferAmountException("Amount can not be null");  }  MCashLine cashLine=null;  if (bean.getTransferType().equalsIgnoreCase(MCashLine.CASHTYPE_GeneralReceipts)) {    cashLine=createCashLine(ctx,cash,bean.getAdjustmentAmount(),MCashLine.CASHTYPE_GeneralReceipts,bean.getDescription(),trxName);  } else   if (bean.getTransferType().equalsIgnoreCase(MCashLine.CASHTYPE_GeneralExpense)) {    if (bean.getAdjustmentAmount().compareTo(cash.getEndingBalance()) > 0) {      throw new TransferAmountExceedsTotalAmountException("cannot transfer amount more than the ending balance");    }    cashLine=createCashLine(ctx,cash,bean.getAdjustmentAmount().negate(),MCashLine.CASHTYPE_GeneralExpense,bean.getDescription(),trxName);  } else   if (bean.getTransferType().equalsIgnoreCase(MCashLine.CASHTYPE_BankAccountTransfer)) {    if (bean.getAdjustmentAmount().compareTo(cash.getEndingBalance()) > 0) {      throw new TransferAmountExceedsTotalAmountException("cannot transfer amount more than the ending balance");    }    int bankAccountId=POSTerminalManager.getBankAccountId(ctx,MPayment.TENDERTYPE_Check);    cashLine=createBankTransferCashEntry(ctx,cash,bean.getAdjustmentAmount(),bankAccountId,bean.getDescription(),trxName);  } else {    throw new OperationException("Invalid transfer type: " + bean.getTransferType());  }  return cashLine;}  }
class C{  private void handleMouseUp(final Event e){  if (!dragInProgress) {    return;  }  dragInProgress=false;  if (!fireSelectionListeners(e)) {    if (lastSelected == SELECTED_KNOB.UPPER) {      upperValue=previousUpperValue;    } else {      lowerValue=previousLowerValue;    }    redraw();  }}  }
class C{  public int deserialize(final byte[] b,final int off){  if (b == null) {    return 0;  }  int parsedBytes=0;  try {    if (sequenceNumber_ == 0) {      parsedBytes+=parseSequenceNumber(b,off + parsedBytes);    }    if (sequenceNumber_ == Constants.ENDFRAME_SEQUENCE_NUMBER && !isFinalFrame_) {      parsedBytes+=parseSequenceNumber(b,off + parsedBytes);      isFinalFrame_=true;    }    if (nonceLength_ > 0 && nonce_ == null) {      parsedBytes+=parseNonce(b,off + parsedBytes);    }    if (includeFrameSize_ || isFinalFrame_) {      if (frameContentLength_ < 0) {        parsedBytes+=parseFrameContentLength(b,off + parsedBytes);      }    }    isComplete_=true;  } catch (  ParseException e) {  }  return parsedBytes;}  }
class C{  public boolean intersects(Sector sector){  if (sector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Sector","intersects","missingSector"));  }  return this.minLatitude < sector.maxLatitude && this.maxLatitude > sector.minLatitude && this.minLongitude < sector.maxLongitude && this.maxLongitude > sector.minLongitude;}  }
class C{  private void doPostWithURIs(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final String namespace=getNamespace(req);  final String[] uris=req.getParameterValues(BigdataRDFContext.URI);  if (uris == null || uris.length == 0) {    buildAndCommitResponse(resp,HttpServletResponse.SC_BAD_REQUEST,MIME_TEXT_PLAIN,"Parameter must be specified one or more times: '" + BigdataRDFContext.URI + "'");    return;  }  if (log.isInfoEnabled())   log.info("URIs: " + Arrays.toString(uris));  final Vector<URL> urls=new Vector<URL>(uris.length);  for (  String uri : uris) {    urls.add(new URL(uri));  }  final Resource[] defaultContext;{    final String[] s=req.getParameterValues(BigdataRDFContext.CONTEXT_URI);    if (s != null && s.length > 0) {      try {        defaultContext=toURIs(s);      } catch (      IllegalArgumentException ex) {        buildAndCommitResponse(resp,HTTP_INTERNALERROR,MIME_TEXT_PLAIN,ex.getLocalizedMessage());        return;      }    } else {      defaultContext=new Resource[0];    }  }  try {    submitApiTask(new InsertWithURLsTask(req,resp,namespace,ITx.UNISOLATED,defaultContext,urls)).get();  } catch (  Throwable t) {    launderThrowable(t,resp,BigdataRDFContext.URI + "=" + urls+ ", "+ BigdataRDFContext.CONTEXT_URI+ "="+ Arrays.toString(defaultContext));  }}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  public boolean isAgeFromValid(){  return ageFrom == null || ageFromSec != null;}  }
class C{  public static String strPad(String input,int length,String padString,int padType){  int multiplier=0;  String tmpStr="";  String outStr="";  int pos=0;  input=null2Str(input,"");  padString=null2Str(padString," ");  if (input.length() >= length)   return input;  multiplier=(int)Math.ceil((double)length / (double)padString.length());  tmpStr=strRepeat(padString,multiplier);  if (padType == STR_PAD_RIGHT) {    pos=length - input.length();  } else   if (padType == STR_PAD_BOTH) {    pos=((length - input.length()) / 2);  } else {    pos=0;  }  if (pos > 0) {    outStr=tmpStr.substring(0,pos);  }  outStr+=input;  outStr+=tmpStr.substring(pos + input.length(),length);  return outStr;}  }
class C{  private static String readClassName(DataInput di) throws IOException {  int len=di.readInt();  byte[] bytes=new byte[len];  di.readFully(bytes);  return new String(bytes);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  @SuppressWarnings("unchecked") public <T>T newModel(Class<T> type,Object key,EntityConstraint constraints){  EntityType entityType=definitions.getEntityTypeMatchingInterface(type.getName(),true);  Entity entity=newEntity(entityType,key,constraints);  return (T)getProxy(entity);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TCLASSIFIER__AST_ELEMENT:    if (resolve)     return getAstElement();  return basicGetAstElement();case TypesPackage.TCLASSIFIER__DECLARED_COVARIANT_CONSTRUCTOR:return isDeclaredCovariantConstructor();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void adaptBackground(){  if (rootView != null && background != null) {    ViewUtil.setBackground(rootView,background);  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void testCertificateFactory06() throws CertificateException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  Provider provider=null;  for (int i=0; i < validValues.length; i++) {    try {      CertificateFactory.getInstance(validValues[i],provider);      fail("IllegalArgumentException must be thrown  when provider is null");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public static void write(float lt1,float ln1,float lt2,float ln2,int lType,LinkProperties properties,DataOutputStream dos) throws IOException {  LinkRectangle.write(lt1,ln1,lt2,ln2,lType,-1,properties,dos);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:34.250 -0500",hash_original_method="E1E264751E5195BA90C2FFC7352846D5",hash_generated_method="C2300A69C9E396B7E6838C00C51A153A") static int divideArrayByInt(int[] quotient,int[] dividend,final int dividendLength,final int divisor){  long rem=0;  long bLong=divisor & 0xffffffffL;  for (int i=dividendLength - 1; i >= 0; i--) {    long temp=(rem << 32) | (dividend[i] & 0xffffffffL);    long quot;    if (temp >= 0) {      quot=(temp / bLong);      rem=(temp % bLong);    } else {      long aPos=temp >>> 1;      long bPos=divisor >>> 1;      quot=aPos / bPos;      rem=aPos % bPos;      rem=(rem << 1) + (temp & 1);      if ((divisor & 1) != 0) {        if (quot <= rem) {          rem-=quot;        } else {          if (quot - rem <= bLong) {            rem+=bLong - quot;            quot-=1;          } else {            rem+=(bLong << 1) - quot;            quot-=2;          }        }      }    }    quotient[i]=(int)(quot & 0xffffffffL);  }  return (int)rem;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isAliasForKeyword(String alias,String keyword){  if (keyword.equalsIgnoreCase(alias)) {    return true;  }  this.keywordAliasesProperties=loadAliasProperties(ALIAS_KEYWORDS);  Set<String> keywordAliases=getFormattedAliases(keywordAliasesProperties,keyword);  return containsAlias(keywordAliases,alias);}  }
class C{  public RootPaneNoFrameState(){  super("Frame");}  }
class C{  public TestGlobalConfImpl(boolean reloadIfChanged){  super(reloadIfChanged);}  }
class C{  public XTIFFDirectory createDirectory(){  return new GeoTIFFDirectory();}  }
class C{  @Override public void insertValue(double val,double label,double weight){  if (val == this.cut_point) {    this.leftStatistics.addToValue(0,1);    this.leftStatistics.addToValue(1,label);    this.leftStatistics.addToValue(2,label * label);  } else   if (val <= this.cut_point) {    this.leftStatistics.addToValue(0,1);    this.leftStatistics.addToValue(1,label);    this.leftStatistics.addToValue(2,label * label);    if (this.left == null) {      if (numNodes < maxNodes) {        this.left=new Node(val,label,weight);        ++numNodes;      }    } else {      this.left.insertValue(val,label,weight);    }  } else {    this.rightStatistics.addToValue(0,1);    this.rightStatistics.addToValue(1,label);    this.rightStatistics.addToValue(2,label * label);    if (this.right == null) {      if (numNodes < maxNodes) {        this.right=new Node(val,label,weight);        ++numNodes;      }    } else {      this.right.insertValue(val,label,weight);    }  }}  }
class C{  public void ifZCmp(final int mode,final Label label){  mv.visitJumpInsn(mode,label);}  }
class C{  protected void removeChildAtModelIndex(int modelIndex,boolean isChildVisible){  FHTreeStateNode childNode=getChildAtModelIndex(modelIndex);  if (childNode != null) {    int row=childNode.getRow();    int index=getIndex(childNode);    childNode.collapse(false);    remove(index);    adjustChildIndexs(index,-1);    childCount--;    if (isChildVisible) {      resetChildrenRowsFrom(row,index,modelIndex);    }  } else {    int maxCounter=getChildCount();    FHTreeStateNode aChild;    for (int counter=0; counter < maxCounter; counter++) {      aChild=(FHTreeStateNode)getChildAt(counter);      if (aChild.childIndex >= modelIndex) {        if (isChildVisible) {          adjustRowBy(-1,counter);          adjustRowCountBy(-1);        }        for (; counter < maxCounter; counter++)         ((FHTreeStateNode)getChildAt(counter)).childIndex--;        childCount--;        return;      }    }    if (isChildVisible) {      adjustRowBy(-1,maxCounter);      adjustRowCountBy(-1);    }    childCount--;  }}  }
class C{  public MemcacheClientBuilder<V> withSRVRefreshPeriod(final long periodMillis){  this.dnsRefreshPeriod=periodMillis;  return this;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public SnapshotInfo(String path,String prefix,String jvmInfo,int identifierSize,Date creationDate,int numberOfObjects,int numberOfGCRoots,int numberOfClasses,int numberOfClassLoaders,long usedHeapSize){  this.path=path;  this.prefix=prefix;  this.jvmInfo=jvmInfo;  this.identifierSize=identifierSize;  this.creationDate=creationDate != null ? new Date(creationDate.getTime()) : null;  this.numberOfObjects=numberOfObjects;  this.numberOfGCRoots=numberOfGCRoots;  this.numberOfClasses=numberOfClasses;  this.numberOfClassLoaders=numberOfClassLoaders;  this.usedHeapSize=usedHeapSize;  this.properties=new HashMap<String,Serializable>();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ABSTRACT_ANNOTATION_LIST__ANNOTATIONS:    return ((InternalEList<?>)getAnnotations()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected boolean isActivated(){  return !groupDNs.isEmpty();}  }
class C{  private RhinoScriptBuilder initScriptBuilder(){  RhinoScriptBuilder builder=null;  try {    if (scope == null) {      builder=RhinoScriptBuilder.newChain().addJSON().evaluateChain(UglifyJs.class.getResourceAsStream("init.js"),"initScript").evaluateChain(getScriptAsStream(),DEFAULT_UGLIFY_JS);      scope=builder.getScope();    } else {      builder=RhinoScriptBuilder.newChain(scope);    }    return builder;  } catch (  final Exception ex) {    throw new IllegalStateException("Failed initializing js",ex);  }}  }
class C{  public boolean offerFirst(E e){  addFirst(e);  return true;}  }
class C{  @CallSuper protected void expandView(int position){  mAdapter.expand(position);}  }
class C{  public void clearLearnedTable(){  macVlanToSwitchPortMap.clear();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static ProtectionSet checkProtectionSetExistsInDB(DbClient dbClient,String nativeGuid) throws IOException {  List<ProtectionSet> cgs=CustomQueryUtility.getActiveProtectionSetByNativeGuid(dbClient,nativeGuid);  Iterator<ProtectionSet> cgsItr=cgs.iterator();  if (cgsItr.hasNext()) {    return cgsItr.next();  }  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isPrimaryKey(){  return (keyType == VPF_COLUMN_PRIMARY_KEY);}  }
class C{  public SubpopulationFilteringEventsManager(final ObjectAttributes personAtts){  this(personAtts,null);}  }
class C{  public static String toAction(final String methodId){  return '$' + methodId;}  }
class C{  public static Date clearTime(Date date){  if (date == null) {    return null;  }  Calendar c=Calendar.getInstance();  c.setTime(date);  c.set(Calendar.HOUR_OF_DAY,0);  c.set(Calendar.MINUTE,0);  c.set(Calendar.SECOND,0);  c.set(Calendar.MILLISECOND,0);  return c.getTime();}  }
class C{  public void acceptBinding(String bindingKey,IBinding binding){}  }
class C{  public String toString(){  return "[PKCS #10 certificate request:\n" + subjectPublicKeyInfo.toString() + " subject: <"+ subject+ ">"+ "\n"+ " attributes: "+ attributeSet.toString()+ "\n]";}  }
class C{  synchronized public void stopRing(){  ringer.stopRing();}  }
class C{  public IgniteFutureTimeoutException(String msg){  super(msg);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public LabelBlock(String label){  this(label,new Font("SansSerif",Font.PLAIN,10),DEFAULT_PAINT);}  }
class C{  public int index(){  return currentBufferIndex;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private Map<String,List<StoragePool>> discoverStoragePools(StorageSystem system,VNXeApiClient client,StringSet supportedProtocols,List<StoragePool> poolsToMatchWithVpool) throws VNXeException {  Map<String,List<StoragePool>> storagePools=new HashMap<String,List<StoragePool>>();  List<StoragePool> newPools=new ArrayList<StoragePool>();  List<StoragePool> existingPools=new ArrayList<StoragePool>();  _logger.info("Start storage pool discovery for storage system {}",system.getId());  try {    List<VNXePool> pools=client.getPools();    for (    VNXePool vnxePool : pools) {      StoragePool pool=null;      URIQueryResultList results=new URIQueryResultList();      String poolNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,vnxePool.getId(),NativeGUIDGenerator.POOL);      _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePoolByNativeGuidConstraint(poolNativeGuid),results);      boolean isModified=false;      if (results.iterator().hasNext()) {        StoragePool tmpPool=_dbClient.queryObject(StoragePool.class,results.iterator().next());        if (tmpPool.getStorageDevice().equals(system.getId())) {          pool=tmpPool;          _logger.info("Found StoragePool {} at {}",pool.getPoolName(),poolNativeGuid);        }      }      if (pool == null) {        pool=new StoragePool();        pool.setId(URIUtil.createId(StoragePool.class));        pool.setLabel(poolNativeGuid);        pool.setNativeGuid(poolNativeGuid);        pool.setOperationalStatus(vnxePool.getStatus());        pool.setPoolServiceType(PoolServiceType.block_file.toString());        pool.setStorageDevice(system.getId());        pool.setProtocols(supportedProtocols);        pool.setNativeId(vnxePool.getId());        pool.setPoolName(vnxePool.getName());        pool.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());        StringSet raidLevels=new StringSet();        RaidTypeEnum raid=vnxePool.getRaidTypeEnum();        if (raid != null) {          raidLevels.add(vnxePool.getRaidTypeEnum().name());          pool.setSupportedRaidLevels(raidLevels);        }        pool.setSupportedResourceTypes(StoragePool.SupportedResourceTypes.THIN_AND_THICK.toString());        pool.setPoolClassName(StoragePool.PoolClassNames.VNXe_Pool.name());        pool.setPoolServiceType(StoragePool.PoolServiceType.block_file.name());        pool.setAutoTieringEnabled(getPoolAutoTieringEnabled(vnxePool,system));        pool.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());        _logger.info("Creating new storage pool using NativeGuid : {}",poolNativeGuid);        newPools.add(pool);      } else {        _logger.info("updating the pool: {}",poolNativeGuid);        pool.setOperationalStatus(vnxePool.getStatus());        if (ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getProtocols(),supportedProtocols)) {          isModified=true;        }        pool.setProtocols(supportedProtocols);        StringSet raidLevels=new StringSet();        RaidTypeEnum raid=vnxePool.getRaidTypeEnum();        if (raid != null) {          raidLevels.add(vnxePool.getRaidTypeEnum().name());          pool.setSupportedRaidLevels(raidLevels);        }        pool.setAutoTieringEnabled(getPoolAutoTieringEnabled(vnxePool,system));        existingPools.add(pool);      }      List<PoolTier> poolTiers=vnxePool.getTiers();      StringSet diskTypes=new StringSet();      for (      PoolTier poolTier : poolTiers) {        List<RaidGroup> raidGroups=poolTier.getRaidGroups();        for (        RaidGroup raidGroup : raidGroups) {          VNXeBase diskGroup=raidGroup.getDiskGroup();          if (diskGroup != null) {            DiskGroup diskgroupObj=client.getDiskGroup(diskGroup.getId());            diskTypes.add(diskgroupObj.getDiskTechnologyEnum().name());          }        }      }      pool.setSupportedDriveTypes(diskTypes);      double size=vnxePool.getSizeTotal();      if (size > 0) {        pool.setTotalCapacity(VNXeUtils.convertDoubleSizeToViPRLong(size));      }      long free=VNXeUtils.convertDoubleSizeToViPRLong(vnxePool.getSizeFree());      if (free > 0) {        pool.setFreeCapacity(free);        pool.setMaximumThinVolumeSize(free);        pool.setMaximumThickVolumeSize(free);      }      long subscribed=VNXeUtils.convertDoubleSizeToViPRLong(vnxePool.getSizeSubscribed());      pool.setSubscribedCapacity(subscribed);      if (isModified || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getCompatibilityStatus(),DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name()) || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getDiscoveryStatus(),DiscoveryStatus.VISIBLE.name())) {        poolsToMatchWithVpool.add(pool);      }      pool.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());      pool.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    }  } catch (  VNXeException e) {    _logger.error("Discovery of storage pools failed for storage system {} for {}",system.getId(),e.getMessage());    throw e;  }  for (  StoragePool newPool : newPools) {    _logger.info("New Storage Pool : " + newPool);    _logger.info("New Storage Pool : {} : {}",newPool.getNativeGuid(),newPool.getId());  }  for (  StoragePool pool : existingPools) {    _logger.info("Old Storage Pool : " + pool);    _logger.info("Old Storage Pool : {} : {}",pool.getNativeGuid(),pool.getId());  }  storagePools.put(NEW,newPools);  storagePools.put(EXISTING,existingPools);  _logger.info("Number of pools found {} : ",storagePools.size());  _logger.info("Storage pool discovery for storage system {} complete",system.getId());  return storagePools;}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.955 -0500",hash_original_method="15F41961C160D456F8E3323E6B9C04D5",hash_generated_method="7B1C4F23D15C491ABD48D4EF17B52A80") public static byte[] sha(String data){  return sha(getBytesUtf8(data));}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  UpdateVersionManaferDao.dropTable(db,ifExists);}  }
class C{  public Mesh3D loadBinary(String fileName,int bufSize,Class<? extends Mesh3D> meshClass){  Mesh3D mesh=null;  try {    mesh=loadBinary(FileUtils.createInputStream(new File(fileName)),fileName.substring(fileName.lastIndexOf('/') + 1),bufSize,meshClass);  } catch (  IOException e) {    e.printStackTrace();  }  return mesh;}  }
class C{  public synchronized void write(int b) throws IOException {  if (count >= buf.length) {    flushBuffer();  }  buf[count++]=(byte)b;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode13.class,args);}  }
class C{  public void removeAspect(final Aspect transientInstance) throws PersistentModelException {  try {    m_aspectHome.remove(transientInstance);  } catch (  OptimisticLockException ex1) {    throw new PersistentModelException("Error removing " + transientInstance.getClass().getSimpleName() + " please refresh before save.");  }catch (  Exception e) {    throw new PersistentModelException("Error removing  " + transientInstance.getClass().getSimpleName() + " : "+ e.getMessage());  }}  }
class C{  MoneyUtils.Money calculateMoney(final BigDecimal money,final BigDecimal taxRate,final boolean taxIncluded){  return MoneyUtils.getMoney(money,taxRate,taxIncluded);}  }
class C{  public static GenericDraweeHierarchy mockDraweeHierarchyOf(Drawable topLevelDrawable){  GenericDraweeHierarchy gdh=mock(GenericDraweeHierarchy.class);  when(gdh.getTopLevelDrawable()).thenReturn(topLevelDrawable);  return gdh;}  }
class C{  public Auth auth(){  return new Auth(vaultConfig);}  }
class C{  private boolean updateDriveFile(Drive drive,File driveFile,String folderId,Track track) throws IOException {  if (!SyncUtils.isInMyTracksAndValid(driveFile,folderId)) {    return false;  }  long driveModifiedTime=driveFile.getModifiedDate().getValue();  long modifiedTime=track.getModifiedTime();  if (driveModifiedTime != modifiedTime) {    return SyncUtils.updateDriveFile(drive,driveFile,context,myTracksProviderUtils,track,true);  }  return true;}  }
class C{  public LocalDate toLocalDate(){  return new LocalDate(getMillis(),getChronology());}  }
class C{  @Override public void importImageToServers(AsyncTask task) throws InternalException {  log.info("importImage");  URI ciId=task._id;  boolean wfHasSteps=false;  Workflow workflow=workflowService.getNewWorkflow(this,IMPORT_IMAGE_WF,true,task._opId);  TaskCompleter completer=new ComputeImageCompleter(ciId,task._opId,OperationTypeEnum.CREATE_COMPUTE_IMAGE,EVENT_SERVICE_TYPE);  try {    List<URI> ids=dbClient.queryByType(ComputeImageServer.class,true);    for (    URI imageServerId : ids) {      log.info("import to server:" + imageServerId.toString());      ComputeImageServer imageServer=dbClient.queryObject(ComputeImageServer.class,imageServerId);      if (imageServer.getComputeImages() == null || !imageServer.getComputeImages().contains(ciId.toString())) {        log.info("verify Image Server");        String verifyServerStepId=workflow.createStep(IMAGESERVER_VERIFICATION_STEP,String.format("Verifying ImageServer %s",imageServerId),null,imageServerId,imageServerId.toString(),this.getClass(),new Workflow.Method("verifyComputeImageServer",imageServerId),null,null);        workflow.createStep(IMPORT_IMAGE_TO_SERVER_STEP,String.format("Importing image for %s",imageServerId),verifyServerStepId,imageServerId,imageServerId.toString(),this.getClass(),new Workflow.Method("importImageMethod",ciId,imageServer,null),null,null);        wfHasSteps=true;      }    }    if (wfHasSteps) {      workflow.executePlan(completer,SUCCESS);    }  } catch (  Exception e) {    log.error("importImage caught an exception.",e);    ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);    completer.error(dbClient,serviceError);  }}  }
class C{  public int compareTo(ExternalEvent other){  if (this.time == other.time) {    return 0;  } else   if (this.time < other.time) {    return -1;  } else {    return 1;  }}  }
class C{  public static final String captureStackTrace(Throwable t){  String stackTrace=null;  ByteArrayOutputStream out=new ByteArrayOutputStream();  PrintWriter writer=new PrintWriter(out);  t.printStackTrace(writer);  writer.flush();  stackTrace=out.toString();  return stackTrace;}  }
class C{  public SetRoleEvent(TungstenProperties props){  super(props);}  }
class C{  private void writeFinalResults(String outputDir,double totalTT,double[] totalRouteTTs,double[] avgRouteTTs,int[] routeUsers,int numberOfStuckedAgents){  PrintStream stream;  String filename=outputDir + "FinalResults.txt";  try {    stream=new PrintStream(new File(filename));  } catch (  FileNotFoundException e) {    e.printStackTrace();    return;  }  log.info("Total travel time: " + totalTT);  String header="total tt[s]";  StringBuffer resultLine=new StringBuffer();  resultLine.append(totalTT);  String latexFormat="" + (int)totalTT;  log.info("Route Users: (route: #users)");  for (int routeNr=0; routeNr < numberOfRoutes; routeNr++) {    log.info("\t" + routeNr + ": "+ routeUsers[routeNr]);    header+="\t#users " + routeNr;    resultLine.append("\t" + routeUsers[routeNr]);    latexFormat+=" & " + routeUsers[routeNr];  }  log.info("Average travel times: (route: avg tt)");  for (int routeNr=0; routeNr < numberOfRoutes; routeNr++) {    log.info("\t" + routeNr + ": "+ avgRouteTTs[routeNr]);    header+="\tavg tt[s] " + routeNr;    resultLine.append("\t" + avgRouteTTs[routeNr]);    latexFormat+=" & " + (Double.isNaN(avgRouteTTs[routeNr]) ? "-" : (int)avgRouteTTs[routeNr]);  }  log.info("Number of stucked agents: " + numberOfStuckedAgents);  header+="\t#stucked";  resultLine.append("\t" + numberOfStuckedAgents);  latexFormat+=" \\\\";  log.info("Latex format: " + latexFormat);  stream.println(header);  stream.println(resultLine.toString());  stream.close();  log.info("output written to " + filename);}  }
class C{  public void decCqsOnClient(){  this._stats.incLong(_numCqsOnClientId,-1);}  }
class C{  public boolean offer(E event,int taskId) throws InterruptedException {  assertNotDone();  if (predicate.match(event)) {    this.matched[taskId]=true;    for (    boolean match : matched) {      if (!match)       return true;    }    responseQueue.put(new EventHolder(event));    done=true;    return true;  } else   return false;}  }
class C{  private void validateStorageCreateRequest(StorageCreateRequest request){  request.setStoragePlatformName(alternateKeyHelper.validateStringParameter("storage platform name",request.getStoragePlatformName()));  request.setName(alternateKeyHelper.validateStringParameter("storage name",request.getName()));  attributeHelper.validateAttributes(request.getAttributes());}  }
class C{  public static int[] reallocateBuffer(int[] buffer,int userSuppliedCapacity,int oldCapacity,int newCapacity,boolean deferred){  assert (newCapacity > oldCapacity);  assert (userSuppliedCapacity == 0 || newCapacity <= userSuppliedCapacity);  if ((!deferred || buffer != null) && userSuppliedCapacity == 0) {    buffer=reallocateBuffer(buffer,oldCapacity,newCapacity);  }  return buffer;}  }
class C{  private static Entity addFlashcardsTable(Schema schema){  Entity word=schema.addEntity("FlashcardEntity");  word.setTableName("FLASHCARDS");  word.addIdProperty().autoincrement();  word.addStringProperty("word").notNull();  word.addStringProperty("definition").notNull();  word.addIntProperty("status").notNull();  word.implementsSerializable();  return word;}  }
class C{  public byte[] digest(){  if (this.digest == null) {    return null;  }  return Arrays.copyOf(this.digest,this.digest.length);}  }
class C{  protected void replaceRange(int start,int end,Object[] marks){  int g0=getGapStart();  int g1=getGapEnd();  int index=start;  int newIndex=0;  Object[] array=(Object[])getArray();  if (start >= g0) {    index+=(g1 - g0);    end+=(g1 - g0);  } else   if (end >= g0) {    end+=(g1 - g0);    while (index < g0) {      array[index++]=marks[newIndex++];    }    index=g1;  } else {    while (index < end) {      array[index++]=marks[newIndex++];    }  }  while (index < end) {    array[index++]=marks[newIndex++];  }}  }
class C{  public UnicodeWhitespaceTokenizer(){}  }
class C{  private DiffTool(){}  }
class C{  public RoundChart(CategorySeries dataset,DefaultRenderer renderer){  mDataset=dataset;  mRenderer=renderer;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public AStarSearch(QueueSearch impl,HeuristicFunction hf){  super(impl,new AStarEvaluationFunction(hf));}  }
class C{  private int createInventoryLine(int M_Locator_ID,int M_Product_ID,int M_AttributeSetInstance_ID,BigDecimal QtyOnHand,int M_AttributeSet_ID){  boolean oneLinePerASI=false;  if (M_AttributeSet_ID != 0) {    MAttributeSet mas=MAttributeSet.get(getCtx(),M_AttributeSet_ID);    oneLinePerASI=mas.isInstanceAttribute();  }  if (oneLinePerASI) {    MInventoryLine line=new MInventoryLine(m_inventory,M_Locator_ID,M_Product_ID,M_AttributeSetInstance_ID,QtyOnHand,QtyOnHand);    if (line.save())     return 1;    return 0;  }  if (QtyOnHand.signum() == 0)   M_AttributeSetInstance_ID=0;  if (m_line != null && m_line.getM_Locator_ID() == M_Locator_ID && m_line.getM_Product_ID() == M_Product_ID) {    if (QtyOnHand.signum() == 0)     return 0;    if (m_line.getM_AttributeSetInstance_ID() == M_AttributeSetInstance_ID) {      m_line.setQtyBook(m_line.getQtyBook().add(QtyOnHand));      m_line.setQtyCount(m_line.getQtyCount().add(QtyOnHand));      m_line.saveEx();      return 0;    } else     if (m_line.getM_AttributeSetInstance_ID() != 0) {      MInventoryLineMA ma=new MInventoryLineMA(m_line,m_line.getM_AttributeSetInstance_ID(),m_line.getQtyBook());      if (!ma.save())       ;    }    m_line.setM_AttributeSetInstance_ID(0);    m_line.setQtyBook(m_line.getQtyBook().add(QtyOnHand));    m_line.setQtyCount(m_line.getQtyCount().add(QtyOnHand));    m_line.saveEx();    MInventoryLineMA ma=new MInventoryLineMA(m_line,M_AttributeSetInstance_ID,QtyOnHand);    if (!ma.save())     ;    return 0;  }  m_line=new MInventoryLine(m_inventory,M_Locator_ID,M_Product_ID,M_AttributeSetInstance_ID,QtyOnHand,QtyOnHand);  if (m_line.save())   return 1;  return 0;}  }
class C{  public DNSOutgoing(int flags){  this(flags,true,DNSConstants.MAX_MSG_TYPICAL);}  }
class C{  private void closeCacheForVM(final int vmNo){  if (vmNo == 0) {    cache.getRegion(regionName).localDestroyRegion();  }  assertTrue("Cache is found as null ",cache != null);  cache.close();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void addServer(){  Database db=new Database(this);  Identity identity=getIdentityFromView();  long identityId=db.addIdentity(identity.getNickname(),identity.getIdent(),identity.getRealName(),identity.getAliases());  Server server=getServerFromView();  if (nickservCheckbox.isChecked()) {    authentication.setNickservPassword(saslPasswordEditText.toString());  } else   if (saslCheckbox.isChecked()) {    authentication.setSaslUsername(saslUsernameEditText.toString());    authentication.setSaslPassword(saslPasswordEditText.toString());  }  server.setAuthentication(authentication);  long serverId=db.addServer(server,(int)identityId);  db.setChannels((int)serverId,channels);  db.setCommands((int)serverId,commands);  db.close();  server.setId((int)serverId);  server.setIdentity(identity);  server.setAutoJoinChannels(channels);  server.setConnectCommands(commands);  Hermes.getInstance().addServer(server);}  }
class C{  public UserGroupsEntity(List<String> groupNames){  this.groupNames=groupNames;}  }
class C{  @Override public void moveToInsertRow() throws SQLException {  try {    debugCodeCall("moveToInsertRow");    checkUpdatable();    insertRow=new Value[columnCount];  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  return Arrays.asList(flavors).contains(flavor);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void testGetBookMove() throws ChessParseError {  Position pos=TextIO.readFEN(TextIO.startPosFEN);  DroidBook book=DroidBook.getInstance();  Move move=book.getBookMove(pos);  checkValid(pos,move);  pos.setCastleMask(0);  move=book.getBookMove(pos);  assertEquals(null,move);}  }
class C{  @Override public void mouseMoved(MouseEvent evt){  delegate.mouseMoved(evt);}  }
class C{  protected ArrayList<KeyValue> parseObject(ImageInputStream reader) throws IOException {  ArrayList<KeyValue> result=new ArrayList<KeyValue>();  String str=null;  String value=null;  String key=null;  while ((str=reader.readLine()) != null) {    str=str.trim();    if (str.startsWith("/*")) {      continue;    }    if (str.equals("END")) {      break;    } else     if (str.startsWith("OBJECT")) {      int n=str.indexOf(" = ") + 3;      String name=str.substring(n);      ArrayList<KeyValue> list=parseObject(reader);      for (int i=0; i < list.size(); ++i) {        result.add(new KeyValue(name + "." + list.get(i).key,list.get(i).value));      }    } else     if (str.startsWith("END_OBJECT")) {      break;    } else     if (str.startsWith("GROUP")) {      int n=str.indexOf(" = ") + 3;      String name=str.substring(n);      ArrayList<KeyValue> list=parseObject(reader);      for (int i=0; i < list.size(); ++i) {        result.add(new KeyValue(name + "." + list.get(i).key,list.get(i).value));      }    } else     if (str.startsWith("END_GROUP")) {      break;    } else {      int n=str.indexOf(" = ");      if (n < 0) {        value+=str.trim();      } else {        key=str.substring(0,n).trim();        value=str.substring(n + 3).trim();        result.add(new KeyValue(key,value));      }    }  }  return (result);}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,",");  String nextToken=null;  id=Integer.parseInt(tokenizer.nextToken());  l=Integer.parseInt(tokenizer.nextToken());  t=Integer.parseInt(tokenizer.nextToken());  r=Integer.parseInt(tokenizer.nextToken());  b=Integer.parseInt(tokenizer.nextToken());  style=Integer.parseInt(tokenizer.nextToken());  classId=Integer.parseInt(tokenizer.nextToken());  text="";  boolean include=false;  do {    nextToken=tokenizer.nextToken();    if (nextToken.startsWith("\"") && nextToken.endsWith("\"")) {      text=text + nextToken.substring(1,nextToken.length() - 1);    } else     if (nextToken.startsWith("\"")) {      text=text + nextToken.substring(1,nextToken.length());      include=true;    } else     if (nextToken.endsWith("\"")) {      text=text + nextToken.substring(0,nextToken.length() - 1);    } else {      text=text + nextToken;      include=true;    }    if (include) {      text=text + ",";      include=false;    }  } while (!nextToken.endsWith("\""));  nextToken=tokenizer.nextToken();  fontName=nextToken.substring(1,nextToken.length() - 1);  fontSize=Integer.parseInt(tokenizer.nextToken());  fontEnh=Integer.parseInt(tokenizer.nextToken());  fontColor=Integer.parseInt(tokenizer.nextToken());  role=Integer.parseInt(tokenizer.nextToken());  relCtrlId=Integer.parseInt(tokenizer.nextToken());  fldId=Integer.parseInt(tokenizer.nextToken());  oprs=Integer.parseInt(tokenizer.nextToken());  nextToken=tokenizer.nextToken();  name=nextToken.substring(1,nextToken.length() - 1);  nextToken=tokenizer.nextToken();  info=nextToken.substring(1,nextToken.length() - 1);}  }
class C{  public long extractAlarm(long now,boolean isTest){  long lastTime=_now.getAndSet(now);  long nextTime=_nextAlarmTime.get();  if (now < nextTime) {    return nextTime;  }  _nextAlarmTime.set(now + CLOCK_NEXT);  int delta;  delta=(int)(now - lastTime) / CLOCK_INTERVAL;  delta=Math.min(delta,CLOCK_PERIOD);  Alarm alarm;  int bucket=getBucket(lastTime);  for (int i=0; i <= delta; i++) {    while ((alarm=extractNextAlarm(bucket,now,isTest)) != null) {      dispatch(alarm,now,isTest);    }    bucket=(bucket + 1) % CLOCK_PERIOD;  }  while ((alarm=extractNextCurrentAlarm()) != null) {    dispatch(alarm,now,isTest);  }  long next=updateNextAlarmTime(now);  _lastTime=now;  return next;}  }
class C{  public Response serve(String uri,String method,Properties header,Properties parms){  System.out.println(method + " '" + uri+ "' ");  Enumeration e=header.propertyNames();  while (e.hasMoreElements()) {    String value=(String)e.nextElement();  }  e=parms.propertyNames();  while (e.hasMoreElements()) {    String value=(String)e.nextElement();  }  return serveFile(uri,header,new File(docroot),true);}  }
class C{  public AndroidKeystoreSecretKeyWrapper(Context context,String alias) throws GeneralSecurityException {  super(context,alias);}  }
class C{  WebAppInterface(Context c){  mContext=c;}  }
class C{  public T dataChanged(){  if (view instanceof AdapterView) {    AdapterView<?> av=(AdapterView<?>)view;    Adapter a=av.getAdapter();    if (a instanceof BaseAdapter) {      BaseAdapter ba=(BaseAdapter)a;      ba.notifyDataSetChanged();    }  }  return self();}  }
class C{  public void paint(Graphics g,float x,float y,float w,float h,View v,int item){  View cv=v.getView(item);  Container host=v.getContainer();  Object name=cv.getElement().getAttributes().getAttribute(StyleConstants.NameAttribute);  if (!(name instanceof HTML.Tag) || name != HTML.Tag.LI) {    return;  }  isLeftToRight=host.getComponentOrientation().isLeftToRight();  float align=0;  if (cv.getViewCount() > 0) {    View pView=cv.getView(0);    Object cName=pView.getElement().getAttributes().getAttribute(StyleConstants.NameAttribute);    if ((cName == HTML.Tag.P || cName == HTML.Tag.IMPLIED) && pView.getViewCount() > 0) {      paintRect.setBounds((int)x,(int)y,(int)w,(int)h);      Shape shape=cv.getChildAllocation(0,paintRect);      if (shape != null && (shape=pView.getView(0).getChildAllocation(0,shape)) != null) {        Rectangle rect=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();        align=pView.getView(0).getAlignment(View.Y_AXIS);        y=rect.y;        h=rect.height;      }    }  }  Color c=(host.isEnabled() ? (ss != null ? ss.getForeground(cv.getAttributes()) : host.getForeground()) : UIManager.getColor("textInactiveText"));  g.setColor(c);  if (img != null) {    drawIcon(g,(int)x,(int)y,(int)w,(int)h,align,host);    return;  }  CSS.Value childtype=getChildType(cv);  Font font=((StyledDocument)cv.getDocument()).getFont(cv.getAttributes());  if (font != null) {    g.setFont(font);  }  if (childtype == CSS.Value.SQUARE || childtype == CSS.Value.CIRCLE || childtype == CSS.Value.DISC) {    drawShape(g,childtype,(int)x,(int)y,(int)w,(int)h,align);  } else   if (childtype == CSS.Value.DECIMAL) {    drawLetter(g,'1',(int)x,(int)y,(int)w,(int)h,align,getRenderIndex(v,item));  } else   if (childtype == CSS.Value.LOWER_ALPHA) {    drawLetter(g,'a',(int)x,(int)y,(int)w,(int)h,align,getRenderIndex(v,item));  } else   if (childtype == CSS.Value.UPPER_ALPHA) {    drawLetter(g,'A',(int)x,(int)y,(int)w,(int)h,align,getRenderIndex(v,item));  } else   if (childtype == CSS.Value.LOWER_ROMAN) {    drawLetter(g,'i',(int)x,(int)y,(int)w,(int)h,align,getRenderIndex(v,item));  } else   if (childtype == CSS.Value.UPPER_ROMAN) {    drawLetter(g,'I',(int)x,(int)y,(int)w,(int)h,align,getRenderIndex(v,item));  }}  }
class C{  public static boolean isStronglyConnected(final Network network){  if (network.isDirected()) {    final Bag bag=getStronglyConnectedComponents(network);    return (bag.numObjs == 1);  } else   return false;}  }
class C{  static void offerFirstTemporaryDirectBuffer(ByteBuffer buf){  if (isBufferTooLarge(buf)) {    free(buf);    return;  }  assert buf != null;  BufferCache cache=bufferCache.get();  if (!cache.offerFirst(buf)) {    free(buf);  }}  }
class C{  private static Properties load(String configFilePath){  Properties props=new Properties();  FileInputStream fis=null;  try {    File configFile=new File(configFilePath);    fis=new FileInputStream(configFile);    props.load(fis);  } catch (  IOException e) {    System.err.println("Could not load configuration file " + configFilePath);  } finally {    if (fis != null) {      try {        fis.close();      } catch (      IOException e) {        System.err.println("Error closing file stream of configuration file " + configFilePath);      }    }  }  return props;}  }
class C{  public Field matchedFields(String... matchedFields){  this.matchedFields=matchedFields;  return this;}  }
class C{  public synchronized StorageLun[] queryStorageLuns(String[] lunUniqueIds) throws InvalidArgument, StorageFault, NotImplemented, InvalidSession {  final String methodName="queryStorageLuns(): ";  log.debug(methodName + "Entry");  List<StorageLun> storageLunList=null;  try {    Boolean supportsBlock=new Boolean(_config.getConfigValue("config/service/storageTopology/storageArray/support-block-profile"));    if (!supportsBlock) {      log.error(methodName + " This function is not implemented");      throw FaultUtil.NotImplemented("This function is not implemented");    }    if (Util.isEmpty(lunUniqueIds)) {      throw FaultUtil.InvalidArgument("Given LUN Ids are invalid");    }    for (    String inputLunId : lunUniqueIds) {      if (!Util.isEmpty(inputLunId)) {        if (!inputLunId.startsWith(VOLUME_IDENTIFIER_PREFIX)) {          throw FaultUtil.InvalidArgument("Given LUN Id is invalid: " + inputLunId);        }      } else {        throw FaultUtil.InvalidArgument("Given LUN Id is invalid: " + inputLunId);      }    }    List<String> existingVolIds=new ArrayList<String>();    this.setVolumeIds();    for (    String inputLunId : lunUniqueIds) {      if (_reportedVolumeIdList.contains(inputLunId)) {        existingVolIds.add(inputLunId);      }    }    storageLunList=new ArrayList<StorageLun>();    List<Volume> volumeList=null;    volumeList=_syncManager.getVolumeDetailList(existingVolIds);    for (    Volume volume : volumeList) {      StorageLun lun=new StorageLun();      lun.setUniqueIdentifier(volume.getId());      Long volumeCapacityInMB=(long)(volume.getRequestedCapacityInGB() * 1024);      Long volumeUsedCapacityInMB=(long)(volume.getAllocatedCapacityInGB() * 1024);      lun.setCapacityInMB(volumeCapacityInMB);      lun.setDisplayName(volume.getName());      lun.setDrsManagementPermitted(true);      String esxLunId="naa.";      if (volume.getWWN() != null) {        esxLunId+=volume.getWWN().toLowerCase();      }      lun.setEsxLunIdentifier(esxLunId);      lun.setThinProvisioned(volume.isThinlyProvisioned());      String alarmStatus=_alarmManager.getThinlyProvisionedStatus(_syncManager,volume);      lun.setThinProvisioningStatus(alarmStatus);      lun.setUsedSpaceInMB(volumeUsedCapacityInMB);      if (log.isDebugEnabled()) {        log.debug(methodName + " Lun detail: id[" + lun.getUniqueIdentifier()+ "] ESXLunIdentifier["+ lun.getEsxLunIdentifier()+ "] capacityInMB["+ lun.getCapacityInMB()+ "] name["+ lun.getDisplayName()+ "] DRSManagementPermitted["+ lun.getDrsManagementPermitted()+ "] thinProvisioned["+ lun.getThinProvisioned()+ "] thinProvisioningStatus["+ lun.getThinProvisioningStatus()+ "] usedSpaceInMB["+ lun.getUsedSpaceInMB()+ "]");      }      storageLunList.add(lun);    }  } catch (  SOSFailure e) {    log.error(methodName + "StorageOSFailure occured ",e);    throw FaultUtil.StorageFault(e);  }catch (  InvalidArgument e) {    log.error(methodName + "InvalidArgument occured ",e);    throw e;  }catch (  NotImplemented e) {    log.error(methodName + "NotImplemented occured ",e);    throw e;  }  log.debug(methodName + "Exit returning LUN list of size[" + storageLunList.size()+ "]");  return storageLunList.toArray(new StorageLun[0]);}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getM_PriceList_ID() == 0)   setM_PriceList_ID();  return true;}  }
class C{  public InsertionScanner(LRParsingTable parsingTable,Scanner input,int insertionBufferLength,int maxOversize,int maxPossibilities){  if (input == null || parsingTable == null)   throw new NullPointerException("Insertion scanner does not allow null table or input!");  if (input instanceof BufferedScanner)   this.input=(BufferedScanner)input; else   this.input=new BufferedScanner(input);  this.table=parsingTable;  if (insertionBufferLength < 0)   insertionBufferLength=0;  this.insertionBufferLength=insertionBufferLength;  this.changeAbleTokens=new ArrayList<ScannerToken<? extends Object>>();  changeAbleActions=new LinkedList<LRAction>();  rdStack=new Stack<LRParserState>();  rdStack.push(table.getStartState());  chgStack=new Stack<LRParserState>();  chgStack.push(table.getStartState());  processedTokens=new LinkedList<ScannerToken<? extends Object>>();  maxIns=table.getParserInterface().getMaxTokenInsertTries();  if (maxOversize < 0)   maxOversize=0;  this.maxOversize=maxOversize;  insertedTokens=0;  bufferPeak=0;  this.maxPossibilities=maxPossibilities;}  }
class C{  @Override public int triple(int x,int n){  int r=x;  for (int i=0; i < n; i+=1) {    r=triple(r);    System.out.println(r);  }  return r;}  }
class C{  public int read(byte[] buffer,int offset,int length) throws IOException {  return -1;}  }
class C{  public JSONWriter value(boolean b) throws JSONException {  return this.append(b ? "true" : "false");}  }
class C{  public static void processMessageToMatchSession(HttpMessage message,List<HttpCookie> requestCookies,HttpSession session){  HttpSessionTokensSet tokensSet=session.getTokensNames();  if (tokensSet == null) {    tokensSet=new HttpSessionTokensSet();  }  Set<String> unsetSiteTokens=new LinkedHashSet<>(tokensSet.getTokensSet());  Iterator<HttpCookie> it=requestCookies.iterator();  while (it.hasNext()) {    HttpCookie cookie=it.next();    String cookieName=cookie.getName();    if (tokensSet.isSessionToken(cookieName)) {      String tokenValue=session.getTokenValue(cookieName);      if (log.isDebugEnabled())       log.debug("Changing value of token '" + cookieName + "' to: "+ tokenValue);      if (tokenValue != null) {        cookie.setValue(tokenValue);      } else {        it.remove();      }      unsetSiteTokens.remove(cookieName);    }  }  for (  String token : unsetSiteTokens) {    String tokenValue=session.getTokenValue(token);    if (tokenValue != null) {      if (log.isDebugEnabled())       log.debug("Adding token '" + token + " with value: "+ tokenValue);      HttpCookie cookie=new HttpCookie(token,tokenValue);      requestCookies.add(cookie);    }  }  message.setHttpSession(session);  message.getRequestHeader().setCookies(requestCookies);}  }
class C{  public static MathTransform findTransform(Geometry source,Geometry target){  CoordinateReferenceSystem sourceCRS=getCRS(source.getSRID());  CoordinateReferenceSystem targetCRS=getCRS(target.getSRID());  try {    return CRS.findMathTransform(sourceCRS,targetCRS);  } catch (  FactoryException e) {    e.printStackTrace();    return null;  }}  }
class C{  protected void doScrollMacOS(MouseWheelEvent e){  if (e.isShiftDown()) {    this.horizontalScrollBar.scroll(e.getUnitsToScroll() * this.getMouseWheelScrollUnit(AVKey.HORIZONTAL));  } else {    this.doScroll(e);  }}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((SerialListener)client).message((SerialMessage)m);}  }
class C{  public final byte[] hash(){  if (this.hash == null) {synchronized (this) {      if (this.hash == null)       this.hash=urlHashComputation();    }  }  return this.hash;}  }
class C{  protected static void initTestData(int depth) throws IOException {  File parent=new File(userDir);  for (int i=0; i < depth; i++) {    File tmp=new File(parent,gensym());    tmp.createNewFile();    tmp=new File(parent,gensym());    if (tmp.mkdir())     parent=tmp; else     throw new IOException("Fail to create directory, " + tmp);  }  baseDir=parent.getAbsolutePath();  relative=baseDir.substring(userDir.length() + 1);}  }
class C{  public boolean logModified(Logger log){  return _depend.logModified(log) || _jarDepend.logModified(log);}  }
class C{  public void incUnprocessedEventsAddedBySecondary(){  this.stats.incInt(unprocessedEventsAddedBySecondaryId,1);  incUnprocessedEventMapSize();}  }
class C{  protected void init(){  queue=new ReferenceQueue();}  }
class C{  public static int dayNumber(Timestamp stamp){  Calendar tempCal=toCalendar(stamp,TimeZone.getDefault(),Locale.getDefault());  return tempCal.get(Calendar.DAY_OF_WEEK);}  }
class C{  public XdrOutputStream(OutputStream out){  this(out,true);}  }
class C{  protected ESOptimization createOptimizer(RandomGenerator random) throws UndefinedParameterError {  return new ESParameterOptimization(this,operators.length,ESOptimization.INIT_TYPE_RANDOM,getParameterAsInt(PARAMETER_MAX_GENERATIONS),getParameterAsInt(PARAMETER_GENERATIONS_WITHOUT_IMPROVAL),getParameterAsInt(PARAMETER_POPULATION_SIZE),getParameterAsInt(PARAMETER_SELECTION_TYPE),getParameterAsDouble(PARAMETER_TOURNAMENT_FRACTION),getParameterAsBoolean(PARAMETER_KEEP_BEST),getParameterAsInt(PARAMETER_MUTATION_TYPE),getParameterAsDouble(PARAMETER_CROSSOVER_PROB),getParameterAsBoolean(PARAMETER_SHOW_CONVERGENCE_PLOT),random,this);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.LOGICAL_AND_EXPRESSION__LEFT_OPERAND:    return leftOperand != null;case ExpressionsPackage.LOGICAL_AND_EXPRESSION__RIGHT_OPERAND:  return rightOperand != null;}return super.eIsSet(featureID);}  }
class C{  public InfixExpression newInfixExpression(){  InfixExpression result=new InfixExpression(this);  return result;}  }
class C{  protected HttpCookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  HttpCookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableHttpCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  public String readLine(){  String line;  try {    line=scanner.nextLine();  } catch (  NoSuchElementException e) {    line=null;  }  return line;}  }
class C{  public final double slope(){  if (isVertical())   return BIGSLOPE;  return (point2.y - point1.y) / (point2.x - point1.x);}  }
class C{  public T caseAssignmentExpression(AssignmentExpression object){  return null;}  }
class C{  public Matrix4 invertMatrix(Matrix4 matrix){  if (matrix == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","invertMatrix","missingMatrix"));  }  boolean success=invert(matrix.m,this.m);  if (!success) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix4","invertMatrix","singularMatrix"));  }  return this;}  }
class C{  public static void write(int descriptor,KeyEvent ke,LinkProperties props,Link link) throws IOException {  link.start(Link.ACTION_REQUEST_HEADER);  link.dos.writeFloat(version);  link.dos.writeInt(descriptor);  link.dos.writeChar(ke.getKeyChar());  link.dos.writeInt(ke.getModifiers());  props.write(link);  link.end(Link.END_TOTAL);}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  AnnotationDefinitionBuilder argsVariadic(){  this.argsVariadic=true;  return this;}  }
class C{  @Override public boolean acceptSource(final Object source){  return source instanceof GamaGridFile;}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble());      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  private void completeInvoice(){  if (m_invoice == null)   return;  m_invoice.setDocAction(p_DocAction);  m_invoice.processIt(p_DocAction);  m_invoice.saveEx();  addLog(0,m_invoice.getDateInvoiced(),m_invoice.getGrandTotal(),m_invoice.getDocumentNo());  m_count++;  m_invoice=null;}  }
class C{  public void paint(Graphics g){switch (this.mode) {case HALF_ANCHORED:    g.setColor(getLineColor());  Point point=this.getRelativeMouseTrackPoint();setConnectedPoints(calculateEdge(getNode1(),point));if (getConnectedPoints() != null) {drawEdge(g);}break;case ANCHORED_UNSELECTED:g.setColor(getLineColor());setConnectedPoints(calculateEdge(getNode1(),getNode2()));if (getConnectedPoints() != null) {drawEdge(g);}break;case ANCHORED_SELECTED:g.setColor(getSelectedColor());setConnectedPoints(calculateEdge(getNode1(),getNode2()));if (getConnectedPoints() != null) {drawEdge(g);}break;default :throw new IllegalStateException();}}  }
class C{  public static <S extends HasPercentChangedHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    PercentChangedEvent event=new PercentChangedEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public AutoDeskewTransform(boolean ignorZeros,final List<Double> lambdas){  this.ignorZeros=ignorZeros;  this.lambdas=lambdas;}  }
class C{  protected XMLUtilities(){}  }
class C{  private void processWorkerExit(Worker w,boolean completedAbruptly){  if (completedAbruptly)   decrementWorkerCount();  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    completedTaskCount+=w.completedTasks;    workers.remove(w);  }  finally {    mainLock.unlock();  }  tryTerminate();  int c=ctl.get();  if (runStateLessThan(c,STOP)) {    if (!completedAbruptly) {      int min=allowCoreThreadTimeOut ? 0 : corePoolSize;      if (min == 0 && !workQueue.isEmpty())       min=1;      if (workerCountOf(c) >= min)       return;    }    addWorker(null,false);  }}  }
class C{  public void testMultipleParametersDelimitedBySemiColon(){  Properties parameters=new Properties();  parameters.setProperty("user","APP");  parameters.setProperty("CreateDatabase","create");  String driverPropertyString="user=APP;CreateDatabase=create";  String propertyString=ResourcePropertySet.PARAMETERS + "=" + driverPropertyString;  Resource ds=resourceConverter.fromPropertyString(propertyString);  assertEquals(parameters,ds.getParameters());}  }
class C{  public void addFooterView(View v,Object data,boolean isSelectable){  FixedViewInfo info=new FixedViewInfo();  info.view=v;  info.data=data;  info.isSelectable=isSelectable;  mFooterViewInfos.add(info);  if (mDataSetObserver != null) {    mDataSetObserver.onChanged();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public long sum(){  long sum=base;  Cell[] as=cells;  if (as != null) {    int n=as.length;    for (int i=0; i < n; ++i) {      Cell a=as[i];      if (a != null)       sum+=a.value;    }  }  return sum;}  }
class C{  public static RecordEventForInstanceResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  RecordEventForInstanceResponseE object=new RecordEventForInstanceResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","recordEventForInstanceResponse").equals(reader.getName())) {          object.setRecordEventForInstanceResponse(RecordEventForInstanceResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    setTranslucentStatus(true);    SystemBarTintManager mTintManager=new SystemBarTintManager(this);    mTintManager.setStatusBarTintEnabled(true);    mTintManager.setNavigationBarTintEnabled(true);    mTintManager.setTintDrawable(UIElementsHelper.getGeneralActionBarBackground(this));    getActionBar().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(this));  }}  }
class C{  @Override public void removeDeviceFilter(DiscoveryFilter filter){}  }
class C{  public void toggleAutoRange(){  this.autoRange=this.autoRangeCheckBox.getSelection();  if (this.autoRange) {    this.minimumRangeValue.setText(Double.toString(this.minimumValue));    this.minimumRangeValue.setEnabled(false);    this.maximumRangeValue.setText(Double.toString(this.maximumValue));    this.maximumRangeValue.setEnabled(false);  } else {    this.minimumRangeValue.setEnabled(true);    this.maximumRangeValue.setEnabled(true);  }}  }
class C{  final public MutableString trimRight(){  final int length=length();  final char[] a=array;  if (length == 0)   return this;  int j=length;  while (j-- != 0)   if (a[j] > ' ')   break;  final int newLength=j + 1;  if (length == newLength)   return this;  if (hashLength < 0) {    setCapacity(newLength);    hashLength=-1;  } else   hashLength=newLength;  return this;}  }
class C{  public StampFilter(float threshold){  setThreshold(threshold);}  }
class C{  public ElasticInterpolator(EasingMode easingMode,double amplitude,double oscillations){  super(easingMode);  this.amplitude.set(amplitude);  this.oscillations.set(oscillations);}  }
class C{  public Result invoke(String opName,Geometry geometry,Object[] args) throws Exception {  int opCode=overlayOpCode(opName);  if (opCode < 0) {    return chainOp.invoke(opName,geometry,args);  }  return invokeValidatedOverlayOp(opCode,geometry,args);}  }
class C{  protected String[] loadCategories(){  ArrayList<String> allCategories=new ArrayList<>();  allCategories.add(Messages.NewGefaehrdungDialog_5);  allCategories.addAll(Gefaehrdung.getAllCategories());  List<OwnGefaehrdung> allOwnGefaehrdungen=new ArrayList<>(0);  try {    allOwnGefaehrdungen=OwnGefaehrdungHome.getInstance().loadAll();  } catch (  Exception e) {    ExceptionUtil.log(e,Messages.NewGefaehrdungDialog_6);  }  Boolean contains=false;  for (  OwnGefaehrdung gefaehrdung : allOwnGefaehrdungen) {    for (    String category : allCategories) {      if (category.equalsIgnoreCase(gefaehrdung.getKategorieAsString())) {        contains=true;        break;      }    }    if (!contains) {      allCategories.add(gefaehrdung.getKategorieAsString());    } else {      contains=false;    }  }  return allCategories.toArray(new String[allCategories.size()]);}  }
class C{  public void addField(FieldDefinition field){  getFields().add(field);}  }
class C{  public boolean equals(Object value){  if (value instanceof LabelKey) {    return equals((LabelKey)value);  }  return false;}  }
class C{  public void removePanListener(PanListener listener){  mTouchHandler.removePanListener(listener);}  }
class C{  public static void main(String[] args) throws MalformedURLException, IOException {  UpdateExample updateExample=new UpdateExample();  String token=updateExample.authenticate();  System.out.println("Obtained authorization token: " + token);  System.out.println("Posting item:\n" + DATA_ITEM);  String itemUrl=updateExample.extractItemUrlFromResponse(updateExample.postItem(token));  System.out.println("Updating item: " + itemUrl);  String updateResponse=updateExample.updateItem(token,itemUrl);  System.out.println(updateResponse);}  }
class C{  private LoggingMenu(TetradLoggerConfig config){  super("Logging");  if (config == null) {    throw new NullPointerException("The given config must not be null");  }  this.config=config;  this.addMenuListener(new LoggingMenuListener());}  }
class C{  public static void prepareDB() throws Exception {  System.setProperty(SystemProperties.DATABASE_PROPERTIES,"src/test/resources/hibernate.properties");  prepareDB(true);}  }
class C{  public static <T>OutputMatcher<T> not(OutputMatcher<T> matcher){  return OutputMatcherFactory.create(IsNot.not(matcher));}  }
class C{  public TIntDoubleHashMap(){}  }
class C{  public static SendableForwardMessageBuilder builder(){  return new SendableForwardMessageBuilder();}  }
class C{  public static boolean addCurrentMove(Game game,Style12Message message,Connector connector){  if (LOG.isDebugEnabled()) {    LOG.debug("addCurrentMove: " + message + "\n"+ game);  }  boolean result=false;  if (!message.isWhitesMoveAfterMoveIsMade && game.getColorToMove() != WHITE || message.isWhitesMoveAfterMoveIsMade && game.getColorToMove() == WHITE) {    game.setHeader(PgnHeader.WhiteRemainingMillis,String.valueOf(message.whiteRemainingTimeMillis));    game.setHeader(PgnHeader.BlackRemainingMillis,String.valueOf(message.blackRemainingTimeMillis));    if (message.timeTakenForLastMoveMillis != 0 && game.getMoveList().getSize() > 1) {      game.getMoveList().get(game.getMoveList().getSize() - 1).addAnnotation(new TimeTakenForMove(message.timeTakenForLastMoveMillis));    }  } else {    if (message.san.equals("none")) {      Raptor.getInstance().onError("Received a none for san in a style 12 event. This should have contained a move.");    } else {      try {        Move move=game.makeSanMove(message.san);        move.addAnnotation(new TimeTakenForMove(message.timeTakenForLastMoveMillis));      } catch (      IllegalArgumentException iae) {        connector.onError("Raptor thinks " + message.san + " is illegal. An attempt was made to correct the position.\n"+ iae);        resetGame(game,message);      }    }    game.setHeader(PgnHeader.WhiteRemainingMillis,String.valueOf(message.whiteRemainingTimeMillis));    game.setHeader(PgnHeader.BlackRemainingMillis,String.valueOf(message.blackRemainingTimeMillis));    if (message.isWhitesMoveAfterMoveIsMade) {      String lag=StringUtils.defaultString(game.getHeader(PgnHeader.BlackLagMillis),"0");      game.setHeader(PgnHeader.BlackLagMillis,String.valueOf(Long.parseLong(lag) + message.lagInMillis));    } else {      String lag=StringUtils.defaultString(game.getHeader(PgnHeader.WhiteLagMillis),"0");      game.setHeader(PgnHeader.WhiteLagMillis,String.valueOf(Long.parseLong(lag) + message.lagInMillis));    }    result=true;  }  if (message.isClockTicking) {    game.addState(Game.IS_CLOCK_TICKING_STATE);  } else {    game.clearState(Game.IS_CLOCK_TICKING_STATE);  }  if (LOG.isDebugEnabled()) {    LOG.debug("after addCurrentMove: " + message + "\n"+ game);  }  return result;}  }
class C{  private CIMObjectPath generateDeviceMaskingGroupObjectPath(String serialID,String bourneCreatedDeviceGroup,final Map<String,Object> keyMap){  @SuppressWarnings("unchecked") CIMProperty<?> instanceID=new CIMProperty(Constants.INSTANCEID,CIMDataType.STRING_T,Constants.SYMMETRIX_U + Constants.PLUS + serialID+ Constants.PLUS+ bourneCreatedDeviceGroup,true,false,null);  CIMProperty<?>[] keys=new CIMProperty<?>[1];  keys[0]=instanceID;  CIMObjectPath deviceGroupPath=CimObjectPathCreator.createInstance(Constants.SE_DEVICEMASKINGGROUP,keyMap.get(Constants._InteropNamespace).toString(),keys);  return deviceGroupPath;}  }
class C{  public List<Object[]> readAll(Connection connection){  StringBuilder builder=new StringBuilder();  builder.append("select ");  String delimiter="";  for (  String keyField : keyFieldNames) {    builder.append(delimiter);    builder.append(keyField);    delimiter=",";  }  for (  String valueField : valueFieldNames) {    builder.append(delimiter);    builder.append(valueField);    delimiter=",";  }  builder.append(" from ");  builder.append(tableName);  String query=builder.toString();  PreparedStatement statement=null;  try {    if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {      log.debug("Executing query '" + query + "'");    }    statement=connection.prepareStatement(query);    ResultSet rs=statement.executeQuery();    if (!rs.next()) {      return Collections.EMPTY_LIST;    }    List<Object[]> result=new ArrayList<Object[]>();    do {      Object[] row=new Object[keyFieldNames.length + valueFieldNames.length];      int index=0;      for (int i=0; i < keyFieldNames.length; i++) {        row[index]=DBUtil.getValue(rs,index + 1,keyTypes[i]);        index++;      }      for (int i=0; i < valueFieldNames.length; i++) {        row[index]=DBUtil.getValue(rs,index + 1,valueTypes[i]);        index++;      }      result.add(row);    } while (rs.next());    return result;  } catch (  SQLException ex) {    String message="Failed to invoke : " + query + " :"+ ex.getMessage();    log.error(message,ex);    storeExceptionHandler.handle(message,ex);    throw new StoreExceptionDBRel(message,ex);  } finally {    try {      if (statement != null)       statement.close();    } catch (    SQLException e) {    }  }}  }
class C{  @Override protected void handlePopup(MouseEvent e){  super.mouseClicked(e);  List<String> pickedVertices=getPickedVertices();  DialogueState state=viewer.getState();  JPopupMenu popup=new JPopupMenu();  if (!pickedVertices.isEmpty() && state.hasChanceNodes(pickedVertices)) {    JMenuItem marginalItem=new JMenuItem("Calculate marginal distribution");    marginalItem.addActionListener(null);    popup.add(marginalItem);  }  if (pickedVertices.size() == 1 && state.hasChanceNode(pickedVertices.get(0))) {    JMenuItem distribItem=new JMenuItem("Show distribution chart");    distribItem.addActionListener(null);    popup.add(distribItem);  }  if (pickedVertices.size() == 1 && speechVars.contains(pickedVertices.get(0))) {    JMenuItem playItem=new JMenuItem("Play sound");    playItem.addActionListener(null);    popup.add(playItem);  }  if (!pickedVertices.isEmpty() && !state.getUtilityNodeIds().isEmpty()) {    JMenuItem utilityItem=new JMenuItem("Calculate utility");    utilityItem.addActionListener(null);    popup.add(utilityItem);  }  if (popup.getComponentCount() == 0 && !pickedVertices.isEmpty()) {    popup.add(new JLabel("  No action available for the selected node(s)  "));  }  if (popup.getComponentCount() > 0) {    popup.show(viewer,e.getX(),e.getY());  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  return true;}  }
class C{  public static SQLConsumerException createSQLConsumerException(final ErrorKeys errorId,final Exception e){  return new SQLConsumerException(errorId.toString(),e);}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void firstLOSHex(BoardViewEvent b){}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  toString(sb,0,this);  return (sb.toString());}  }
class C{  private static File constructFilePaths(String file1,String file2){  File newPath;  if (file2.startsWith(file1)) {    newPath=new File(file2);  } else {    newPath=new File(file1 + "/" + file2);  }  return newPath;}  }
class C{  @Override public void run(){  amIActive=true;  try {    String inputFilesString=null;    String sagaHeaderFile=null;    String sagaDataFile=null;    String whiteboxHeaderFile=null;    String whiteboxDataFile=null;    WhiteboxRaster output=null;    int i=0;    int row, col, rows, cols;    String[] imageFiles;    int numImages=0;    double noData=-32768;    int progress=0;    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      sagaHeaderFile=whiteboxHeaderFile.replace(".dep",".sgrd");      sagaDataFile=whiteboxHeaderFile.replace(".dep",".sdat");      (new File(sagaHeaderFile)).delete();      (new File(sagaDataFile)).delete();      WhiteboxRaster.DataType dataType;      if (wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        dataType=WhiteboxRaster.DataType.DOUBLE;      } else       if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else       if (wbr.getDataType() == WhiteboxRaster.DataType.INTEGER) {        dataType=WhiteboxRaster.DataType.INTEGER;      } else {        dataType=WhiteboxRaster.DataType.BYTE;      }      output=new WhiteboxRaster(whiteboxHeaderFile.replace(".dep","_temp.dep"),"rw",whiteboxHeaderFile,dataType,noData);      output.setNoDataValue(noData);      whiteboxDataFile=whiteboxHeaderFile.replace(".dep","_temp.tas");      double[] data=null;      for (row=0; row < rows; row++) {        data=wbr.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(rows - row - 1,col,data[col]);          } else {            output.setValue(rows - row - 1,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      output.close();      File dataFile=new File(whiteboxDataFile);      File sagaFile=new File(sagaDataFile);      dataFile.renameTo(sagaFile);      if (!createHeaderFile(wbr,sagaHeaderFile)) {        showFeedback("SAGA header file was not written properly. " + "Tool failed to export");        return;      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isSetMessage(){  return this.message != null;}  }
class C{  public void addMappingAccessor(MappingAccessor accessor){  if (accessor.isRelationship() && ((RelationshipAccessor)accessor).isValueHolderInterface()) {    return;  }  if (m_mappingAccessors.containsKey(accessor.getAttributeName())) {    MappingAccessor existingAccessor=m_mappingAccessors.get(accessor.getAttributeName());    String existingAccessType=existingAccessor.usesPropertyAccess() ? JPA_ACCESS_PROPERTY : JPA_ACCESS_FIELD;    String accessType=accessor.usesPropertyAccess() ? JPA_ACCESS_PROPERTY : JPA_ACCESS_FIELD;    getLogger().logWarningMessage(getLogger().INVERSE_ACCESS_TYPE_MAPPING_OVERRIDE,accessor.getJavaClass().getName(),existingAccessor.getAnnotatedElementName(),existingAccessType,accessor.getAnnotatedElementName(),accessType);  }  m_mappingAccessors.put(accessor.getAttributeName(),accessor);  if (accessor.isId()) {    m_idAccessors.put(accessor.getAttributeName(),(IdAccessor)accessor);  }  if (accessor.isEmbeddedId() && hasEmbeddedId()) {    throw ValidationException.multipleEmbeddedIdAnnotationsFound(getJavaClass(),accessor.getAttributeName(),this.getEmbeddedIdAttributeName());  }  if (accessor.isEmbeddedId()) {    setEmbeddedIdAccessor((EmbeddedIdAccessor)accessor);  }}  }
class C{  public SignatureVisitor visitExceptionType(){  return this;}  }
class C{  public EditSession paste(World world,Vector to,boolean allowUndo,boolean pasteAir,@Nullable Transform transform){  checkNotNull(world);  checkNotNull(to);  Region region=clipboard.getRegion();  EditSessionBuilder builder=new EditSessionBuilder(world).autoQueue(true).checkMemory(false).allowedRegionsEverywhere().limitUnlimited();  EditSession editSession;  if (allowUndo) {    editSession=builder.build();  } else {    editSession=builder.changeSetNull().fastmode(true).build();  }  Extent extent=clipboard;  if (transform != null) {    extent=new BlockTransformExtent(clipboard,transform,world.getWorldData().getBlockRegistry());  }  ForwardExtentCopy copy=new ForwardExtentCopy(extent,clipboard.getRegion(),clipboard.getOrigin(),editSession,to);  if (transform != null) {    copy.setTransform(transform);  }  if (!pasteAir) {    copy.setSourceMask(new ExistingBlockMask(clipboard));  }  try {    Operations.completeLegacy(copy);  } catch (  MaxChangedBlocksException e) {    e.printStackTrace();  }  editSession.flushQueue();  return editSession;}  }
class C{  @SuppressWarnings("NonPrivateFieldAccessedInSynchronizedContext") private void close(GridClientConnectionCloseReason reason,boolean waitCompletion,@Nullable Throwable cause){synchronized (this) {    if (closeReason != null)     return;    closeReason=reason;  }  try {    if (waitCompletion && !pendingReqs.isEmpty() && ses.closeTime() == 0)     closedLatch.await();  } catch (  InterruptedException ignored) {    log.warning("Interrupted while waiting for all requests to be processed (all pending " + "requests will be failed): " + serverAddress());    Thread.currentThread().interrupt();  }  if (pingTask != null)   pingTask.cancel(false);  if (ses != null)   ses.close();  for (Iterator<TcpClientFuture> it=pendingReqs.values().iterator(); it.hasNext(); ) {    GridClientFutureAdapter fut=it.next();    fut.onDone(getCloseReasonAsException(closeReason,cause));    it.remove();  }  if (log.isLoggable(Level.INFO))   log.info("Client TCP connection closed: " + serverAddress());}  }
class C{  public MPInstance processIt(int Record_ID,Trx trx,boolean managedTrx){  MPInstance pInstance=new MPInstance(this,Record_ID);  pInstance.setIsProcessing(true);  pInstance.saveEx();  boolean ok=true;  ProcessInfo processInfo=new ProcessInfo("",this.getAD_Process_ID());  processInfo.setAD_PInstance_ID(pInstance.getAD_PInstance_ID());  processInfo.setRecord_ID(Record_ID);  ok=processIt(processInfo,trx,managedTrx);  pInstance.setResult(ok ? MPInstance.RESULT_OK : MPInstance.RESULT_ERROR);  pInstance.setErrorMsg(processInfo.getSummary());  pInstance.setIsProcessing(false);  pInstance.saveEx();  pInstance.log();  return pInstance;}  }
class C{  public static GridEmbeddedHttpServer startHttpServer() throws Exception {  return createAndStart(false);}  }
class C{  @Override public String friendlyString(){  return new File(getPath()).getName();}  }
class C{  @Override public void go(){  if (selection() == null || listener() == null || passes() <= 0 || selection().isEmpty())   return;  listener().push(message.run_start.get(selection().name));  if (!shouldRun())   return;  final AtomicInteger totalTipsInvoked=new AtomicInteger(0);  runContext().accept(null);  listener().pop(message.run_finish.get(selection().name,totalTipsInvoked));}  }
class C{  public static int copy(Reader in,Writer out) throws IOException {  assert in != null;  assert out != null;  char[] buf=new char[BUF_SIZE];  int cnt=0;  for (int n; (n=in.read(buf)) > 0; ) {    out.write(buf,0,n);    cnt+=n;  }  return cnt;}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  Env.setContext(Env.getCtx(),m_WindowNo,"IsSOTrx","Y");  panel=new VGenPanel(this,WindowNo,frame);  try {    super.dynInit();    dynInit();    jbInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,"init",ex);  }}  }
class C{  @Override public String transformNewValue(String value){  if (value == null) {    return null;  } else {    return decryptPassword(value);  }}  }
class C{  private boolean checkForTrustedIdentity(final Certificate cert){  return false;}  }
class C{  public boolean isSupported(String feature,String version){  return false;}  }
class C{  public boolean isLessThan(Decimal decimal){  assertDefined();  BigDecimal thisValue=notNull(this);  BigDecimal parameter=notNull(decimal);  return (thisValue.compareTo(parameter) < 0);}  }
class C{  public TemplateResourceException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public UserConfig connect(UserConfig config){  this.user=fetch(config);  return this.user;}  }
class C{  public static String trim(String string){  if (string == null) {    return null;  }  return string.trim();}  }
class C{  public static int nthOccurrence(String str,char c,int n){  int pos=str.indexOf(c,0);  while (--n > 0 && pos != -1)   pos=str.indexOf(c,pos + 1);  return pos;}  }
class C{  public void buildTree(final EvolutionState state,final int thread){  GPInitializer initializer=((GPInitializer)state.initializer);  child=constraints(initializer).init.newRootedTree(state,constraints(initializer).treetype,thread,this,constraints(initializer).functionset,0,GPNodeBuilder.NOSIZEGIVEN);}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  private boolean parseJspAttributeAndBody(Node parent,String tag,String bodyType) throws JasperException {  boolean result=false;  if (reader.matchesOptionalSpacesFollowedBy("<jsp:attribute")) {    parseNamedAttributes(parent);    result=true;  }  if (reader.matchesOptionalSpacesFollowedBy("<jsp:body")) {    parseJspBody(parent,bodyType);    reader.skipSpaces();    if (!reader.matchesETag(tag)) {      err.jspError(reader.mark(),"jsp.error.unterminated","&lt;" + tag);    }    result=true;  } else   if (result && !reader.matchesETag(tag)) {    err.jspError(reader.mark(),"jsp.error.jspbody.required","&lt;" + tag);  }  return result;}  }
class C{  public static void endEntityViaReflection(HttpEntity entity){  if (entity instanceof HttpEntityWrapper) {    try {      Field f=null;      Field[] fields=HttpEntityWrapper.class.getDeclaredFields();      for (      Field ff : fields) {        if (ff.getName().equals("wrappedEntity")) {          f=ff;          break;        }      }      if (f != null) {        f.setAccessible(true);        HttpEntity wrapped=(HttpEntity)f.get(entity);        if (wrapped != null) {          wrapped.consumeContent();        }      }    } catch (    Throwable t) {      t.printStackTrace();    }  }}  }
class C{  public void addLocalDecl(Decl d){  if (locals == null)   locals=new OrderedHashSet<Decl>();  locals.add(d);  d.isLocal=true;}  }
class C{  private String constructAddiSCSIInitiatorHostQuery(HDSHost hdshost,List<String> portWWNList){  Map<String,Object> attributeMap=new HashMap<String,Object>();  List<ISCSIName> wwnList=new ArrayList<ISCSIName>();  Add addOp=new Add(HDSConstants.HOST);  attributeMap.put(HDSConstants.HOST,hdshost);  attributeMap.put(HDSConstants.ADD,addOp);  if (null != portWWNList && !portWWNList.isEmpty()) {    for (    String portWWN : portWWNList) {      ISCSIName wwn=new ISCSIName(portWWN,null);      wwnList.add(wwn);    }  }  attributeMap.put(HDSConstants.ISCSINAME_LIST,wwnList);  String addHostWithISCSINamesQuery=InputXMLGenerationClient.getInputXMLString(HDSConstants.ADD_HOST_WITH_ISCSINAMES_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);  return addHostWithISCSINamesQuery;}  }
class C{  private int readNumRecords(){  try {    if (endsWithCommit()) {      long size=fos.size();      long pos=size - 4 - END_MESSAGE.length()- 1- 4;      if (pos < 0)       return 0;      ChannelFastInputStream is=new ChannelFastInputStream(channel,pos);      return is.readInt();    }  } catch (  IOException e) {    log.error("Error while reading number of records in tlog " + this,e);  }  return 0;}  }
class C{  Enumeration<CryptoPermissionEntry> permissionElements(){  return permissionEntries.elements();}  }
class C{  public void clearConversations(){  conversations.clear();  conversations.put(ServerInfo.DEFAULT_NAME,new ServerInfo());  this.selected=ServerInfo.DEFAULT_NAME;}  }
class C{  synchronized public void loadDefaultFavoritesIfNecessary(){  SharedPreferences sp=Utilities.getPrefs(getContext());  if (sp.getBoolean(EMPTY_DATABASE_CREATED,false)) {    Log.d(TAG,"loading default workspace");    AutoInstallsLayout loader=createWorkspaceLoaderFromAppRestriction();    if (loader == null) {      loader=AutoInstallsLayout.get(getContext(),mOpenHelper.mAppWidgetHost,mOpenHelper);    }    if (loader == null) {      final Partner partner=Partner.get(getContext().getPackageManager());      if (partner != null && partner.hasDefaultLayout()) {        final Resources partnerRes=partner.getResources();        int workspaceResId=partnerRes.getIdentifier(Partner.RES_DEFAULT_LAYOUT,"xml",partner.getPackageName());        if (workspaceResId != 0) {          loader=new DefaultLayoutParser(getContext(),mOpenHelper.mAppWidgetHost,mOpenHelper,partnerRes,workspaceResId);        }      }    }    final boolean usingExternallyProvidedLayout=loader != null;    if (loader == null) {      loader=getDefaultLayoutParser();    }    createEmptyDB();    if ((mOpenHelper.loadFavorites(mOpenHelper.getWritableDatabase(),loader) <= 0) && usingExternallyProvidedLayout) {      createEmptyDB();      mOpenHelper.loadFavorites(mOpenHelper.getWritableDatabase(),getDefaultLayoutParser());    }    clearFlagEmptyDbCreated();  }}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(DfaReportingSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/?api=dfareporting " + "into dfareporting-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,SCOPES).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  public static CommonTransitions createFastSlide(int type,boolean forward,int duration){  if (Display.getInstance().areMutableImagesFast()) {    return createFastSlide(type,forward,duration,false);  }  return createSlide(type,forward,duration);}  }
class C{  private static void parseEntries(ProfilerSection section){  section.start("Parse");  for (  ModuleCandidate candidate : getCandidates()) {    if (candidate.isBypass()) {      parseClass(candidate.getBypassClass(),candidate);    } else     if (candidate.isWrapper()) {      parseWrapper(candidate.getWrapperClass(),candidate);    } else     for (    String clazz : candidate.getClassEntries()) {      parseClass(clazz,candidate);    }    candidate.freeMemory();  }  for (  String clazz : manualLoadedClasses) {    log.debug("Manually Loading Class: " + clazz);    ModuleCandidate candidate=new ModuleCandidate();    candidate.addClassEntry(clazz);    parseClass(clazz,candidate);  }  section.stop("Parse");}  }
class C{  public static final Axis3D yAxis(){  return new Axis3D(Vec3D.Y_AXIS);}  }
class C{  public boolean isSuper(){  return iterator.byteAt(currentPos) == INVOKESPECIAL && !where().getDeclaringClass().getName().equals(getClassName());}  }
class C{  public void reset(){  readPosition=0;  writePosition=0;  markPosition=0;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DOWNLOAD_ID_VALUE_DB'";  db.execSQL(sql);}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  public void copyLocation(Location newLocation){  newLocation.setComment(getComment());  newLocation.setDefaultPrinterName(getDefaultPrinterName());  newLocation.setLocationOps(getLocationOps());  newLocation.setSwitchListComment(getSwitchListComment());  newLocation.setSwitchListEnabled(isSwitchListEnabled());  newLocation.setTrainDirections(getTrainDirections());  for (  String type : newLocation.getTypeNames()) {    if (acceptsTypeName(type)) {      continue;    } else {      newLocation.deleteTypeName(type);    }  }  copyTracksLocation(newLocation);}  }
class C{  public boolean isValid(INode n){  FreeCellNode state=(FreeCellNode)n;  if (card == 0) {    return false;  }  Column col=state.cols[nth];  if (col.num == 0)   return true;  int suit=((card - 1) % 4);  int rank=1 + ((card - 1) >> 2);  boolean isBlackCard=(suit == FreeCellNode.CLUBS || suit == FreeCellNode.SPADES);  int destCard=col.cards[col.num - 1];  int destRank=1 + ((destCard - 1) >> 2);  return (col.isBlack() != isBlackCard) && (destRank - 1 == rank);}  }
class C{  public static String squeeze(String str,String[] set){  if (StringUtils.isEmpty(str) || ArrayUtils.isEmpty(set)) {    return str;  }  CharSet chars=evaluateSet(set);  StringBuffer buffer=new StringBuffer(str.length());  char[] chrs=str.toCharArray();  int sz=chrs.length;  char lastChar=' ';  char ch=' ';  for (int i=0; i < sz; i++) {    ch=chrs[i];    if (chars.contains(ch)) {      if ((ch == lastChar) && (i != 0)) {        continue;      }    }    buffer.append(ch);    lastChar=ch;  }  return buffer.toString();}  }
class C{  public PatternGuardExpr(String namespace,String name,Expression[] parameters,PatternExpr guarded){  this(namespace,name,Arrays.asList(parameters),guarded);}  }
class C{  public void removeListener(T listener){  listeners.remove(listener);}  }
class C{  public SchedulableEvent remove(){  mEventsRemoved++;  SchedulableEvent event=mFirst;  mFirst=event.mNext;  return event;}  }
class C{  @Override public WeightVector train(SLProblem problem) throws Exception {  WeightVector init=new WeightVector(10000);  return train(problem,init);}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  @Override public WebViewMapFragment build(){  if (options == null) {    options=new GoogleWebMapType();  }  if (options instanceof GoogleWebMapType) {    return GoogleWebViewMapFragment.newInstance(options);  }  if (options instanceof GoogleChinaMapType) {    return GoogleChinaWebViewMapFragment.newInstance(options);  }  return null;}  }
class C{  public Boolean isHostBasedReplicationSupported(){  return hostBasedReplicationSupported;}  }
class C{  public double falsePositiveRate(){  double fpr=0;  for (int i=0; i < confusion.length; i++) {    fpr+=falsePositiveRate(i) * colSum(i);  }  return fpr / totalInstances();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (external: ");  result.append(external);  result.append(", declaredAbstract: ");  result.append(declaredAbstract);  result.append(", declaredN4JS: ");  result.append(declaredN4JS);  result.append(", declaredFinal: ");  result.append(declaredFinal);  result.append(", declaredPolyfill: ");  result.append(declaredPolyfill);  result.append(", declaredStaticPolyfill: ");  result.append(declaredStaticPolyfill);  result.append(", observable: ");  result.append(observable);  result.append(')');  return result.toString();}  }
class C{  public void createTime(long createTime){  this.createTime=createTime;}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){}  }
class C{  public CuratorFramework curator(){  return _zkConnection;}  }
class C{  public void addOperator(Operator operator,int index){  if (operator == null) {    throw new NullPointerException("operator cannot be null!");  }  if (operator instanceof ProcessRootOperator) {    throw new IllegalArgumentException("'Process' operator cannot be added. It must always be the top-level operator!");  }  operators.add(index,operator);  registerOperator(operator,true);}  }
class C{  @Override public void close() throws SecurityException {  target.close();  setLevel(Level.OFF);}  }
class C{  public void create(String[] rpfFilePaths,String outputFile,boolean dchum) throws MakeTocException {  RpfHeader head=new RpfHeader();  Vector<Frame> frames=new Vector<Frame>(rpfFilePaths.length);  Vector<Group> groups=new Vector<Group>();  fireProgressUpdate(ProgressEvent.UPDATE,"Organizing frames",0,100);  organizeFrames(rpfFilePaths,head,frames);  if (head.standardNumber == null) {    throw new MakeTocException("MakeToc: No RPF frames found.");  }  groupFrames(frames,groups,dchum);  fireProgressUpdate(ProgressEvent.UPDATE,"Writing A.TOC file",100,100);  writeTOCFile(outputFile,head,frames,groups);  fireProgressUpdate(ProgressEvent.DONE,"A.TOC file complete",100,100);}  }
class C{  protected TraceEntity_Impl(){  super();}  }
class C{  @Override public void finishStage(ResponseBuilder rb){  if (rb.stage != ResponseBuilder.STAGE_GET_FIELDS) {    return;  }  mergeResponses(rb);}  }
class C{  public BTDownloadDataLine createDataLine(){  return new BTDownloadDataLine();}  }
class C{  public String toString(){  try {    return '[' + this.join(",") + ']';  } catch (  Exception e) {    return null;  }}  }
class C{  @LargeTest public void testNavigationBySentence() throws Exception {  sExecutedTestCount++;  String html="<html>" + "<head>" + "</head>"+ "<body>"+ "<div>"+ "<p>"+ "This is the first sentence of the first paragraph and has an <b>inline bold tag</b>."+ "This is the second sentence of the first paragraph."+ "</p>"+ "<h1>This is a heading</h1>"+ "<p>"+ "This is the first sentence of the second paragraph."+ "This is the second sentence of the second paragraph."+ "</p>"+ "</div>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("This is the first sentence of the first paragraph and has an " + "<b>inline bold tag</b>.");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("This is the second sentence of the first paragraph.");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("This is a heading");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("This is the first sentence of the second paragraph.");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("This is the second sentence of the second paragraph.");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("This is the second sentence of the second paragraph.");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("This is the first sentence of the second paragraph.");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("This is a heading");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("This is the second sentence of the first paragraph.");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("This is the first sentence of the first paragraph and has an " + "<b>inline bold tag</b>.");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("This is the first sentence of the first paragraph and has an " + "<b>inline bold tag</b>.");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("This is the second sentence of the first paragraph.");}  }
class C{  public boolean isImageDefined(){  return imageDefined;}  }
class C{  public ArrayList(int initialCapacity){  if (initialCapacity > 0) {    this.elementData=new Object[initialCapacity];  } else   if (initialCapacity == 0) {    this.elementData=EMPTY_ELEMENTDATA;  } else {    throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  }}  }
class C{  public SwaggerBackendBuilder renderTags(final boolean renderTags,final int tagsPathOffset){  options.setRenderTags(renderTags);  options.setTagsPathOffset(tagsPathOffset);  return this;}  }
class C{  public double evaluateClustering(Database db,Relation<? extends NumberVector> rel,Clustering<?> c){  List<? extends Cluster<?>> clusters=c.getAllClusters();  NumberVector[] centroids=new NumberVector[clusters.size()];  int ignorednoise=EvaluateSimplifiedSilhouette.centroids(rel,clusters,centroids,noiseOption);  final int dim=RelationUtil.dimensionality(rel);  Centroid overallCentroid=new Centroid(dim);  int clustercount=globalCentroid(overallCentroid,rel,clusters,centroids,noiseOption);  double a=0, b=0;  Iterator<? extends Cluster<?>> ci=clusters.iterator();  for (int i=0; ci.hasNext(); i++) {    Cluster<?> cluster=ci.next();    if (cluster.size() <= 1 || cluster.isNoise()) {switch (noiseOption) {case IGNORE_NOISE:        continue;case TREAT_NOISE_AS_SINGLETONS:      for (DBIDIter it=cluster.getIDs().iter(); it.valid(); it.advance()) {        b+=SquaredEuclideanDistanceFunction.STATIC.distance(overallCentroid,rel.get(it));      }    continue;case MERGE_NOISE:  break;}}for (DBIDIter it=cluster.getIDs().iter(); it.valid(); it.advance()) {NumberVector vec=rel.get(it);a+=SquaredEuclideanDistanceFunction.STATIC.distance(centroids[i],vec);b+=SquaredEuclideanDistanceFunction.STATIC.distance(overallCentroid,vec);}}double vrc=((b - a) / a) * ((rel.size() - clustercount) / (clustercount - 1.));if (penalize && ignorednoise > 0) {vrc*=(rel.size() - ignorednoise) / (double)rel.size();}if (LOG.isStatistics()) {LOG.statistics(new StringStatistic(key + ".vrc.noise-handling",noiseOption.toString()));if (ignorednoise > 0) {LOG.statistics(new LongStatistic(key + ".vrc.ignored",ignorednoise));}LOG.statistics(new DoubleStatistic(key + ".vrc",vrc));}EvaluationResult ev=EvaluationResult.findOrCreate(db.getHierarchy(),c,"Internal Clustering Evaluation","internal evaluation");MeasurementGroup g=ev.findOrCreateGroup("Distance-based Evaluation");g.addMeasure("Variance Ratio Criteria",vrc,0.,1.,0.,false);return vrc;}  }
class C{  public DefaultKeyedChannelPool(EventLoop eventLoop,Function<K,Future<Channel>> channelFactory,ChannelHealthChecker healthCheck,KeyedChannelPoolHandler<K> channelPoolHandler){  this(eventLoop,channelFactory,healthCheck,channelPoolHandler,true);}  }
class C{  public Class<K> keyType(){  return keyType;}  }
class C{  public static ProjectActionEvent createBeforeOpenProjectEvent(ProjectDescriptor project){  return new ProjectActionEvent(project,ProjectAction.OPENED,false);}  }
class C{  private static Properties load(String configFilePath){  Properties props=new Properties();  FileInputStream fis=null;  try {    File configFile=new File(configFilePath);    fis=new FileInputStream(configFile);    props.load(fis);  } catch (  IOException e) {    System.err.println("Could not load configuration file " + configFilePath);  } finally {    if (fis != null) {      try {        fis.close();      } catch (      IOException e) {        System.err.println("Error closing file stream of configuration file " + configFilePath);      }    }  }  return props;}  }
class C{  public static String translate(StorageSystem storageDevice,String translateString){  if (storageDevice.getUsingSmis80()) {    translateString=translateString.replaceAll(Constants.SMIS_PLUS_REGEX,Constants.SMIS80_DELIMITER_REGEX);  }  return translateString;}  }
class C{  protected Node copyInto(Node n){  super.copyInto(n);  AbstractAttr aa=(AbstractAttr)n;  aa.nodeName=nodeName;  aa.unspecified=unspecified;  aa.isIdAttr=isIdAttr;  return n;}  }
class C{  public boolean isHighlightAnimation(){  return this.mHighlightAnimation;}  }
class C{  public void onCombineCleanup() throws IOException, InterruptedException {}  }
class C{  public static DbfTableModel createDefaultModel(EsriGraphicList list){  if (logger.isLoggable(Level.FINE))   logger.fine("ESE: creating DbfTableModel");  DbfTableModel _model=new DbfTableModel(7);  _model.setLength(0,(byte)50);  _model.setColumnName(0,SHAPE_DBF_DESCRIPTION);  _model.setType(0,(byte)DbfTableModel.TYPE_CHARACTER);  _model.setDecimalCount(0,(byte)0);  _model.setLength(1,(byte)10);  _model.setColumnName(1,SHAPE_DBF_LINECOLOR);  _model.setType(1,(byte)DbfTableModel.TYPE_CHARACTER);  _model.setDecimalCount(1,(byte)0);  _model.setLength(2,(byte)10);  _model.setColumnName(2,SHAPE_DBF_FILLCOLOR);  _model.setType(2,(byte)DbfTableModel.TYPE_CHARACTER);  _model.setDecimalCount(2,(byte)0);  _model.setLength(3,(byte)10);  _model.setColumnName(3,SHAPE_DBF_SELECTCOLOR);  _model.setType(3,(byte)DbfTableModel.TYPE_CHARACTER);  _model.setDecimalCount(3,(byte)0);  _model.setLength(4,(byte)4);  _model.setColumnName(4,SHAPE_DBF_LINEWIDTH);  _model.setType(4,(byte)DbfTableModel.TYPE_NUMERIC);  _model.setDecimalCount(4,(byte)0);  _model.setLength(5,(byte)20);  _model.setColumnName(5,SHAPE_DBF_DASHPATTERN);  _model.setType(5,(byte)DbfTableModel.TYPE_CHARACTER);  _model.setDecimalCount(5,(byte)0);  _model.setLength(6,(byte)10);  _model.setColumnName(6,SHAPE_DBF_DASHPHASE);  _model.setType(6,(byte)DbfTableModel.TYPE_NUMERIC);  _model.setDecimalCount(6,(byte)4);  int count=0;  for (  OMGraphic omg : list) {    Object index=omg.getAttribute(SHAPE_INDEX_ATTRIBUTE);    if (index == null) {      index=new Integer(count);      omg.putAttribute(SHAPE_INDEX_ATTRIBUTE,index);    }    count++;    List<Object> record=new ArrayList<Object>();    Object obj=omg.getAttribute(SHAPE_DBF_DESCRIPTION);    if (obj instanceof String) {      record.add(obj);    } else {      record.add("");    }    record.add(ColorFactory.getHexColorString(omg.getLineColor()));    record.add(ColorFactory.getHexColorString(omg.getFillColor()));    record.add(ColorFactory.getHexColorString(omg.getSelectColor()));    BasicStroke bs=(BasicStroke)omg.getStroke();    record.add(new Double(bs.getLineWidth()));    String dp=BasicStrokeEditor.dashArrayToString(bs.getDashArray());    if (dp == BasicStrokeEditor.NONE) {      dp="";    }    record.add(dp);    record.add(new Double(bs.getDashPhase()));    _model.addRecord(record);    if (logger.isLoggable(Level.FINER))     logger.finer("ESE: adding record: " + record);  }  return _model;}  }
class C{  public Vertex parseVariable(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  Vertex variable=parseElement(stream,elements,debug,network);  stream.skipWhitespace();  ensureNext('{',stream);  String next=stream.nextWord();  while (!("}".equals(next))) {    if (next == null) {      throw new SelfParseException("Unexpected end of variable, missing '}'",stream);    }    next=next.toLowerCase();    if (!(SET.equals(next) || EXCLUDE.equals(next) || INCLUDE.equals(next))) {      throw new SelfParseException("Unexpected word: '" + next + "' expected 'SET', 'EXCLUDE', or 'INCLUDE'",stream);    }    Vertex type=parseElement(stream,elements,debug,network);    String token=stream.peekWord().toLowerCase();    if (";".equals(token)) {      ensureNext(';',stream);      if (!EXCLUDE.equals(next)) {        variable.addRelationship(Primitive.EQUALS,type);      } else {        variable.removeRelationship(Primitive.EQUALS,type);      }    } else {      if (TO.equals(token) || FROM.equals(token)) {        stream.nextWord();      }      Vertex target=parseElement(stream,elements,debug,network);      ensureNext(';',stream);      if (!EXCLUDE.equals(next)) {        variable.addRelationship(type,target);      } else {        variable.removeRelationship(type,target);      }    }    next=stream.nextWord();  }  return variable;}  }
class C{  public static void json(String tag,String json,int methodCount){  validateMethodCount(methodCount);  if (TextUtils.isEmpty(json)) {    d(tag,"Empty/Null json content",methodCount);    return;  }  try {    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(tag,message,methodCount);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(tag,message,methodCount);    }  } catch (  JSONException e) {    d(tag,e.getCause().getMessage() + "\n" + json,methodCount);  }}  }
class C{  public MutableProgressMonitorDialog(final Shell parent){  super(parent);}  }
class C{  protected WhileStatementImpl(){  super();}  }
class C{  protected static boolean tagIsEqual(String a,String b){  return a.equalsIgnoreCase(b);}  }
class C{  public void draw(Graphics2D g){  g.setStroke(new BasicStroke((float)thickness,BasicStroke.CAP_ROUND,BasicStroke.JOIN_MITER));  g.setColor(new Color(colorR & 0xFF,colorG & 0xFF,colorB & 0xFF,colorA & 0xFF));  if (x1 == x2 && y1 == y2) {    Arc2D arc=new Arc2D.Double(x1,y1,0,0,0d,360d,Arc2D.OPEN);    g.draw(arc);  } else   if (type == 1 || type == 2) {    Line2D line=new Line2D.Double(x1,y1,x2,y2);    g.draw(line);  } else   if (type == 3 || type == 4) {    double x1=this.x1, x2=this.x2, y1=this.y1, y2=this.y2;    if (x1 > x2) {      x1=this.x2;      x2=this.x1;    }    if (y1 > y2) {      y1=this.y2;      y2=this.y1;    }    if (type == 3) {      Rectangle2D rect=new Rectangle2D.Double(x1,y1,x2 - x1,y2 - y1);      g.draw(rect);    } else     if (type == 4) {      Arc2D arc=new Arc2D.Double(x1,y1,x2 - x1,y2 - y1,0d,360d,Arc2D.OPEN);      g.draw(arc);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.637 -0400",hash_original_method="F8A0DDB3115C5147D3DD94FC7549A17E",hash_generated_method="42B9DFACC4ACC9A5FC37A54BAE9C5364") public Recognizer(String configFile) throws IOException {  PMemInit();  SR_SessionCreate(configFile);  mRecognizer=SR_RecognizerCreate();  SR_RecognizerSetup(mRecognizer);  mVocabulary=SR_VocabularyLoad();}  }
class C{  private void updateRadioLinks(){  if (m_Exp != null) {    m_Exp.setSplitByDataSet(m_splitByDataSet.isSelected());  }}  }
class C{  @Override public void updateScreen(){  commandBox.updateCursorCounter();}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.219 -0500",hash_original_method="D7A510C090532D6542CA33ECD805653E",hash_generated_method="D338B640779B17CB7260528C9150884A") public final double readDouble() throws IOException {  return Double.longBitsToDouble(readLong());}  }
class C{  private ICloseableIterator<IBindingSet> doNonBigdataMockIVServiceCall(final ServiceCall<IBindingSet> serviceCall,final IBindingSet left[]) throws Exception {  return serviceCall.call(left);}  }
class C{  public boolean fetchData(){  Date snapshotDate=from(now());  logger.info("Starting fetching data. Snapshot date: {} {}, IP and MAC Address: {}.",snapshotDate,snapshotDate.getTime(),getIpAndMacAddress());  List<Future<Snapshot>> futures=new ArrayList<>();  try {    for (    String organizationName : organizations) {      futures.add(snapshotProvider.takeSnapshot(organizationName,snapshotDate));      logger.info("Enqueued task TakeSnapshotTask for organization '{}'.",organizationName);    }  } catch (  IOException e) {    logger.error("Unable to fetch data from GitHub API. Missing GitHub API credentials?.",e);    throw new CrawlerRetryException(e);  }  logger.info("Submitted {} TakeSnapshotTasks.",futures.size());  for (  Future<Snapshot> future : futures) {    try {      Snapshot snapshot=future.get();      statisticsRepository.save(snapshot.getStatistics());      projectRepository.save(snapshot.getProjects());      contributorRepository.save(snapshot.getContributors());      logger.info("Successfully saved data for organization '{}'.",snapshot.getStatistics().getOrganizationName());    } catch (    InterruptedException|ExecutionException e) {      logger.error("Error occurred while processing organization.",e);      throw new CrawlerRetryException(e);    }  }  logger.info("Finished fetching data.");  return true;}  }
class C{  public Lambda(Node node,String name1,Class<?> type1,String name2,Class<?> type2){  this(node,new String[]{name1,name2},new Class<?>[]{type1,type2});}  }
class C{  private OFMessageUtils(){}  }
class C{  public boolean isMatch(String address){  try {    return isMatch(InetAddress.getByName(address));  } catch (  Exception e) {    log.log(Level.FINER,e.toString(),e);    return false;  }}  }
class C{  private String removeTrailingSlash(String objName){  String res=objName;  if (res.endsWith("/")) {    res=res.substring(0,res.length() - 1);  }  return res;}  }
class C{  public RichTextDamagerRepairer(ITokenScanner scanner){  Assert.isNotNull(scanner);  fScanner=scanner;  defaultStyle=(StyleRange)RichTextUtils.DEFAULT_STYLE.clone();}  }
class C{  public Analyzer includeHypervolume(){  includeHypervolume=true;  return this;}  }
class C{  public void correctlySpends(Transaction txContainingThis,long scriptSigIndex,Script scriptPubKey,boolean enforceP2SH) throws ScriptException {  try {    txContainingThis=new Transaction(txContainingThis.getParams(),txContainingThis.bitcoinSerialize());  } catch (  ProtocolException e) {    throw new RuntimeException(e);  }  if (getProgram().length > 10000 || scriptPubKey.getProgram().length > 10000)   throw new ScriptException("Script larger than 10,000 bytes");  LinkedList<byte[]> stack=new LinkedList<byte[]>();  LinkedList<byte[]> p2shStack=null;  executeScript(txContainingThis,scriptSigIndex,this,stack);  if (enforceP2SH)   p2shStack=new LinkedList<byte[]>(stack);  executeScript(txContainingThis,scriptSigIndex,scriptPubKey,stack);  if (stack.size() == 0)   throw new ScriptException("Stack empty at end of script execution.");  if (!castToBool(stack.pollLast()))   throw new ScriptException("Script resulted in a non-true stack: " + stack);  if (enforceP2SH && scriptPubKey.isPayToScriptHash()) {    for (    ScriptChunk chunk : chunks)     if (chunk.isOpCode() && (chunk.data[0] & 0xff) > OP_16)     throw new ScriptException("Attempted to spend a P2SH scriptPubKey with a script that contained script ops");    byte[] scriptPubKeyBytes=p2shStack.pollLast();    Script scriptPubKeyP2SH=new Script(scriptPubKeyBytes);    executeScript(txContainingThis,scriptSigIndex,scriptPubKeyP2SH,p2shStack);    if (p2shStack.size() == 0)     throw new ScriptException("P2SH stack empty at end of script execution.");    if (!castToBool(p2shStack.pollLast()))     throw new ScriptException("P2SH script execution resulted in a non-true stack");  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public View2D showInNewWindow(final View view){  Preconditions.checkNotNull(view,"Error: View argument can not be null");  final ViewContainer container=view.getContainer();  if (container instanceof Module) {    final Module module=(Module)container;    return show(null,view,new CModuleContainer(container.getDatabase().getNative(),module.getNative()));  } else {    final Project project=(Project)container;    return show(null,view,new CProjectContainer(container.getDatabase().getNative(),project.getNative()));  }}  }
class C{  public String toMatrixString(String title) throws Exception {  return m_delegate.toMatrixString(title);}  }
class C{  public CompanyPrivilegeExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  void printValue(int value){  Log.write(value);}  }
class C{  private int fillColumnNames(OneRowChange data) throws ReplicatorException {  Table t=fetchTableDefinition(data.getSchemaName(),data.getTableName());  for (  Column column : t.getAllColumns()) {    ListIterator<OneRowChange.ColumnSpec> litr=data.getColumnSpec().listIterator();    for (; litr.hasNext(); ) {      OneRowChange.ColumnSpec cv=litr.next();      if (cv.getIndex() == column.getPosition()) {        cv.setName(column.getName());        cv.setSigned(column.isSigned());        cv.setTypeDescription(column.getTypeDescription());        if (cv.getType() == Types.BLOB)         cv.setBlob(column.isBlob());        break;      }    }    litr=data.getKeySpec().listIterator();    for (; litr.hasNext(); ) {      OneRowChange.ColumnSpec cv=litr.next();      if (cv.getIndex() == column.getPosition()) {        cv.setName(column.getName());        cv.setSigned(column.isSigned());        cv.setTypeDescription(column.getTypeDescription());        if (cv.getType() == Types.BLOB)         cv.setBlob(column.isBlob());        break;      }    }  }  return t.getColumnCount();}  }
class C{  public static Map<String,Pattern> patternsFromSelectors(String classLabelsSelectionString) throws ParseException {  String classSelector=classLabelsSelectionString.replaceAll("\\{.*$","");  String labelsSelectorsString=classLabelsSelectionString.replaceAll("^.*\\{","").replaceAll("\\}.*$","");  Map<String,String> labelsSelectors=parseLabelsSelectors(labelsSelectorsString);  Map<String,Pattern> patterns=new HashMap<String,Pattern>();  if (classSelector.contains("%")) {    try {      classSelector=URLDecoder.decode(classSelector,"UTF-8");    } catch (    UnsupportedEncodingException uee) {    }  }  if ('=' == classSelector.charAt(0)) {    patterns.put(null,Pattern.compile(Pattern.quote(classSelector.substring(1))));  } else   if ('~' == classSelector.charAt(0)) {    patterns.put(null,Pattern.compile(classSelector.substring(1)));  } else {    patterns.put(null,Pattern.compile(Pattern.quote(classSelector)));  }  for (  Entry<String,String> entry : labelsSelectors.entrySet()) {    if ('=' == entry.getValue().charAt(0)) {      patterns.put(entry.getKey(),Pattern.compile(Pattern.quote(entry.getValue().substring(1))));    } else {      patterns.put(entry.getKey(),Pattern.compile(entry.getValue().substring(1)));    }  }  return patterns;}  }
class C{  public boolean isAppendStatics(){  return this.appendStatics;}  }
class C{  private int sampleLine(ResultPoint p1,ResultPoint p2,int size){  int result=0;  float d=distance(p1,p2);  float moduleSize=d / size;  float px=p1.getX();  float py=p1.getY();  float dx=moduleSize * (p2.getX() - p1.getX()) / d;  float dy=moduleSize * (p2.getY() - p1.getY()) / d;  for (int i=0; i < size; i++) {    if (image.get(MathUtils.round(px + i * dx),MathUtils.round(py + i * dy))) {      result|=1 << (size - i - 1);    }  }  return result;}  }
class C{  public LessConstraint(int constraintValue){  super(Integer.valueOf(constraintValue));}  }
class C{  public IndicesQueryBuilder noMatchQuery(QueryBuilder noMatchQuery){  this.noMatchQuery=noMatchQuery;  return this;}  }
class C{  public static double sigmoid(double input,double cutoff,double rate){  return 1.0 / (1 + Math.pow(Math.E,-rate * (input - cutoff)));}  }
class C{  public void testInvokeAll1(){  testInvokeAll1(mainPool());}  }
class C{  public String seedTipText(){  return "The random number seed to be used.";}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TIntDoubleHashMap)) {    return false;  }  TIntDoubleHashMap that=(TIntDoubleHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public ShortLazyValue(ShortSupplier supplier){  Validate.notNull(supplier,"supplier can't be null!");  this.supplier=supplier;}  }
class C{  public Transfer writeLong(long x) throws IOException {  out.writeLong(x);  return this;}  }
class C{  private static boolean validateLocalDevice(String drillDownResponse,int localDeviceComponentCount,int storageVolumeCount,int extentCount){switch (localDeviceComponentCount) {case 0:    if (storageVolumeCount == 1 && extentCount == 1) {      StringBuffer localDevice=new StringBuffer(START);      localDevice.append(LOCAL_DEVICE).append(EXTENT_STORAGE_VOLUME_PATTERN).append(END);      if (drillDownResponse.matches(localDevice.toString())) {        _log.info("this is a simple local volume");        return true;      }    }  break;case 2:if (storageVolumeCount == 2 && extentCount == 2) {  StringBuffer localDeviceWithMirror=new StringBuffer(START);  localDeviceWithMirror.append(LOCAL_DEVICE).append(LOCAL_DEVICE_COMPONENT_PATTERN).append(LOCAL_DEVICE_COMPONENT_PATTERN).append(END);  if (drillDownResponse.matches(localDeviceWithMirror.toString())) {    _log.info("this is a local device with mirror");    return true;  }}break;default :}return false;}  }
class C{  public void parseDTD(String publicID,IXMLReader reader,IXMLEntityResolver entityResolver,boolean external) throws Exception {  this.delegate.parseDTD(publicID,reader,entityResolver,external);}  }
class C{  public static void copy(URL url,File file) throws IOException {  InputStream is=url.openStream();  try {    OutputStream os=new FileOutputStream(file);    try {      byte[] buffer=new byte[8192];      int read;      while ((read=is.read(buffer)) > 0) {        os.write(buffer,0,read);      }    }  finally {      os.close();    }  }  finally {    is.close();  }}  }
class C{  public void applyOptions(boolean switcherRequired,@NonNull ButtonHandler.Callback callback){  mSwitcherButton.setVisibility(switcherRequired ? View.VISIBLE : View.GONE);  mCallback=callback;}  }
class C{  @Override protected void onPostExecute(Result result){  if (result != null) {    boolean completeCalled=false;    if (!isCancelled()) {      CropImageView cropImageView=mCropImageViewReference.get();      if (cropImageView != null) {        completeCalled=true;        cropImageView.onImageCroppingAsyncComplete(result);      }    }    if (!completeCalled && result.bitmap != null) {      result.bitmap.recycle();    }  }}  }
class C{  @Override protected void onStartLoading(){  if (mCursor != null) {    deliverResult(mCursor);  }  if (takeContentChanged() || mCursor == null) {    forceLoad();  }}  }
class C{  @Override public void discoverSentence(Vertex sentence,Network network,Vertex currentTime){  List<Relationship> words=sentence.orderedRelationships(Primitive.WORD);  if (words != null) {    for (int index=1; index < words.size(); index++) {      Relationship relationship=words.get(index);      String word=relationship.getTarget().getDataValue();      if (word != null) {        if (Utils.isCapitalized(word)) {          String token=word.toLowerCase();          index++;          while (index < words.size()) {            Relationship nextRelationship=words.get(index);            String nextWord=nextRelationship.getTarget().getDataValue();            if (nextWord != null) {              if (Utils.isCapitalized(nextWord)) {                word=word + " " + nextWord;                token=token + "_" + nextWord.toLowerCase();              }            }            index++;          }          Vertex compoundWord=network.createWord(word);          Vertex lastChecked=compoundWord.getRelationship(getPrimitive());          if (lastChecked == null) {            compoundWord.addRelationship(getPrimitive(),currentTime);            try {              processId("/en/" + token,this.depth,false,"",network,new HashMap<String,Vertex>());            } catch (            Exception failed) {              log(failed);            }          }        }      }    }  }}  }
class C{  public static boolean isEditTextEmpty(EditText editText){  if (editText != null) {    if (editText.getText().toString().equals("")) {      return true;    } else {      return false;    }  } else {    return true;  }}  }
class C{  public CovMatrixWrapper(DataWrapper wrapper,Parameters params){  if (wrapper == null) {    throw new NullPointerException("The given data must not be null");  }  DataModelList models=wrapper.getDataModelList();  DataModelList out=new DataModelList();  for (  DataModel model : models) {    if (model instanceof DataSet) {      DataSet dataSet=(DataSet)model;      if (!(dataSet.isContinuous())) {        throw new IllegalArgumentException("The data must be continuous");      }      ICovarianceMatrix covarianceMatrix=new CovarianceMatrix(dataSet);      out.add(covarianceMatrix);    } else     if (model instanceof ICovarianceMatrix) {      ICovarianceMatrix covarianceMatrix=new CovarianceMatrix((CovarianceMatrix)model);      out.add(covarianceMatrix);    }  }  setDataModel(out);  LogDataUtils.logDataModelList("Conversion of data to covariance matrix form.",getDataModelList());}  }
class C{  public void writeFile(String name,String mimeType,File file) throws IOException {  if (file == null) {    throw new IllegalArgumentException("File cannot be null.");  }  if (!file.exists()) {    throw new IllegalArgumentException("File does not exist.");  }  if (file.isDirectory()) {    throw new IllegalArgumentException("File cannot be a directory.");  }  writeFile(name,mimeType,file.getCanonicalPath(),new FileInputStream(file));}  }
class C{  static byte[] toBytes(String source){  try {    return source.getBytes("UTF8");  } catch (  UnsupportedEncodingException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  public void run() throws Exception {  ExecutorService exec=Executors.newCachedThreadPool();  final Phaser phaser=new Phaser();  installShutdownHook();  phaser.register();  cf=new ConnectionFactory(urls);  cf.setSecure(secure);  cf.setReconnectAllowed(false);  bench=new Benchmark("NATS",numSubs,numPubs);  for (int i=0; i < numSubs; i++) {    phaser.register();    exec.execute(new SubWorker(phaser,numMsgs,size));  }  phaser.arriveAndAwaitAdvance();  for (int i=0; i < numPubs; i++) {    phaser.register();    exec.execute(new PubWorker(phaser,numMsgs,size));  }  System.out.printf("Starting benchmark [msgs=%d, msgsize=%d, pubs=%d, subs=%d]\n",numMsgs,size,numPubs,numSubs);  phaser.arriveAndAwaitAdvance();  Runtime.getRuntime().removeShutdownHook(shutdownHook);  if (!errorQueue.isEmpty()) {    Throwable error=errorQueue.take();    log.error(error.getMessage());    throw new RuntimeException(error);  }  bench.close();  System.out.println(bench.report());  if (csvFileName != null) {    List<String> csv=bench.csv();    Path csvFile=Paths.get(csvFileName);    Files.write(csvFile,csv,Charset.forName("UTF-8"));  }}  }
class C{  private void reportResultsToConsole(){  if (!isStreamReportingEnabled()) {    return;  }  printToStream("Finished, found: " + bugCount + " bugs");  ConfigurableXmlOutputStream xmlStream=new ConfigurableXmlOutputStream(stream,true);  ProjectStats stats=bugCollection.getProjectStats();  printToStream("\nFootprint: " + new Footprint(stats.getBaseFootprint()).toString());  Profiler profiler=stats.getProfiler();  PrintStream printStream;  try {    printStream=new PrintStream(stream,false,"UTF-8");  } catch (  UnsupportedEncodingException e1) {    return;  }  printToStream("\nTotal time:");  profiler.report(new Profiler.TotalTimeComparator(profiler),new Profiler.FilterByTime(10000000),printStream);  printToStream("\nTotal calls:");  int numClasses=stats.getNumClasses();  if (numClasses > 0) {    profiler.report(new Profiler.TotalCallsComparator(profiler),new Profiler.FilterByCalls(numClasses),printStream);    printToStream("\nTime per call:");    profiler.report(new Profiler.TimePerCallComparator(profiler),new Profiler.FilterByTimePerCall(10000000 / numClasses),printStream);  }  try {    xmlStream.finish();  } catch (  IOException e) {    FindbugsPlugin.getDefault().logException(e,"Print to console failed");  }}  }
class C{  public ObjectMatrix3D assign(ObjectMatrix3D source){  if (!(source instanceof DenseObjectMatrix3D)) {    return super.assign(source);  }  DenseObjectMatrix3D other=(DenseObjectMatrix3D)source;  if (other == this)   return this;  checkShape(other);  if (haveSharedCells(other)) {    ObjectMatrix3D c=other.copy();    if (!(c instanceof DenseObjectMatrix3D)) {      return super.assign(source);    }    other=(DenseObjectMatrix3D)c;  }  if (this.isNoView && other.isNoView) {    System.arraycopy(other.elements,0,this.elements,0,this.elements.length);    return this;  }  return super.assign(other);}  }
class C{  synchronized void undo(RTEditText editor){  Stack<Operation> undoStack=getUndoStack(editor);  if (!undoStack.empty()) {    Stack<Operation> redoStack=getRedoStack(editor);    Operation op=undoStack.pop();    push(op,redoStack);    op.undo(editor);    while (!undoStack.empty() && op.canMerge(undoStack.peek())) {      op=undoStack.pop();      push(op,redoStack);      op.undo(editor);    }  }}  }
class C{  public void test() throws Throwable {  Waiter waiter=new Waiter();  RetryPolicy retryPolicy=new RetryPolicy().withDelay(100,TimeUnit.MILLISECONDS).withMaxDuration(2,TimeUnit.SECONDS).withMaxRetries(3).retryWhen(null);  ScheduledExecutorService executor=Executors.newSingleThreadScheduledExecutor();  Failsafe.with(retryPolicy).with(executor).onFailure(null).get(null);  waiter.await(1000);}  }
class C{  public Symbol(String tla,String tex,int stype,int atype){  TLAString=tla;  TeXString=tex;  symbolType=stype;  alignmentType=atype;  pcal=false;}  }
class C{  public static Integer createServerCache() throws Exception {  InterestResultPolicyDUnitTest test=new InterestResultPolicyDUnitTest();  cache=test.createCache(new Properties());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);  CacheServer server=cache.addCacheServer();  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setPort(port);  server.setNotifyBySubscription(true);  server.setSocketBufferSize(32768);  server.start();  return new Integer(port);}  }
class C{  public Matrix inverse(){  return solve(identity(m,m));}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener l){  m_Support.removePropertyChangeListener(l);}  }
class C{  private void distributeColumns(int availableWidth,int fromCol,int toCol){  log.finest("Available=" + availableWidth + ", Columns "+ fromCol+ "->"+ toCol);  int start=fromCol;  if (fromCol == 0 && m_repeatedColumns > 0)   start=m_repeatedColumns;  int totalWidth=availableWidth;  for (int col=start; col < toCol; col++)   totalWidth+=((Float)m_columnWidths.get(col)).floatValue();  int remainingWidth=availableWidth;  for (int x=0; remainingWidth > 0 && x < 5; x++) {    log.finest("TotalWidth=" + totalWidth + ", Remaining="+ remainingWidth);    for (int col=start; col < toCol && remainingWidth != 0; col++) {      int columnWidth=((Float)m_columnWidths.get(col)).intValue();      if (columnWidth != 0) {        int additionalPart=columnWidth * availableWidth / totalWidth;        if (remainingWidth < additionalPart) {          m_columnWidths.set(col,new Float(columnWidth + remainingWidth));          remainingWidth=0;        } else {          m_columnWidths.set(col,new Float(columnWidth + additionalPart));          remainingWidth-=additionalPart;        }        log.finest("  col=" + col + " - From "+ columnWidth+ " to "+ m_columnWidths.get(col));      }    }  }  for (int c=toCol - 1; remainingWidth != 0 && c >= 0; c--) {    int columnWidth=((Float)m_columnWidths.get(c)).intValue();    if (columnWidth > 0) {      m_columnWidths.set(c,new Float(columnWidth + remainingWidth));      log.finest("Final col=" + c + " - From "+ columnWidth+ " to "+ m_columnWidths.get(c));      remainingWidth=0;    }  }}  }
class C{  protected TMemberImpl(){  super();}  }
class C{  protected final void CAST_Encipher(int A,int B,int C,int D,int result[]){  int x;  for (int i=0; i < 6; i++) {    x=i * 4;    C^=F1(D,_Km[x],_Kr[x]);    B^=F2(C,_Km[x + 1],_Kr[x + 1]);    A^=F3(B,_Km[x + 2],_Kr[x + 2]);    D^=F1(A,_Km[x + 3],_Kr[x + 3]);  }  for (int i=6; i < 12; i++) {    x=i * 4;    D^=F1(A,_Km[x + 3],_Kr[x + 3]);    A^=F3(B,_Km[x + 2],_Kr[x + 2]);    B^=F2(C,_Km[x + 1],_Kr[x + 1]);    C^=F1(D,_Km[x],_Kr[x]);  }  result[0]=A;  result[1]=B;  result[2]=C;  result[3]=D;}  }
class C{  protected void enableSpeech(boolean toEnable){  inputMenu.setEnabled(toEnable);}  }
class C{  public void callExpiryCallback(){  expiryCallback.onEntryExpiry(super.getValue());}  }
class C{  private void makePathBlack(){  if (mPathBlack == null) {    mPathBlack=new Path();  }  Path p=new Path();  p.moveTo(Math.max(getPaddingLeft(),mProgress * mWidth / 100),mHeight / 2 + calculateDeltaY());  p.lineTo(mWidth,mHeight / 2);  mPathBlack.set(p);}  }
class C{  private void addExportSnapshotDeleteSteps(Workflow workflow,ProtectionSystem rpSystem,URI exportGroupID) throws InternalException {  ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupID);  String exportStep=workflow.createStepId();  initTaskStatus(exportGroup,exportStep,Operation.Status.pending,"export delete");  StorageSystem device=null;  for (  String volumeIDString : exportGroup.getVolumes().keySet()) {    URI blockID;    try {      blockID=new URI(volumeIDString);      BlockObject block=BlockObject.fetch(_dbClient,blockID);      if (block.getProtectionController() != null && device == null) {        device=_dbClient.queryObject(StorageSystem.class,block.getStorageController());        _exportWfUtils.generateExportGroupDeleteWorkflow(workflow,STEP_EXPORT_DELETE_SNAPSHOT,STEP_EXPORT_GROUP_DELETE,device.getId(),exportGroupID);      }    } catch (    URISyntaxException e) {      _log.error("Couldn't find volume ID for export delete: " + volumeIDString,e);    }  }  _log.info("Created export group delete step in workflow: " + exportGroup.getId());}  }
class C{  public static void writeSingleByte(OutputStream out,int b) throws IOException {  byte[] buffer=new byte[1];  buffer[0]=(byte)(b & 0xff);  out.write(buffer);}  }
class C{  private final void consume(){  fTokenLength++;  fLast=NONE;}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  private void show(boolean reverse){  if (transitionOutAnimator == null && transitionInAnimator == null) {    initLaf(getUIManager());  }  initFocused();  onShow();  tint=false;  if (getParent() == null) {    com.codename1.ui.Display.getInstance().setCurrent(this,reverse);  } else {    revalidate();  }}  }
class C{  private void index() throws Exception {  int value=0;  if (data[off - 1] == '[') {    while (off < count) {      char digit=data[off++];      if (!isDigit(digit)) {        break;      }      value*=10;      value+=digit;      value-='0';    }  }  if (data[off++ - 1] != ']') {    throw new PathException("Invalid index for path '%s' in %s",path,type);  }  indexes.add(value);}  }
class C{  @Override public void sendRequestMSP_SET_RAW_RC(int[] channels8){  Character[] rc_signals_array=new Character[16];  int index=0;  for (int i=0; i < 8; i++) {    rc_signals_array[index++]=(char)(channels8[i] & 0xFF);    rc_signals_array[index++]=(char)((channels8[i] >> 8) & 0xFF);  }  String rcData="";  for (  int i : channels8) {    rcData+=String.valueOf(i) + " ";  }  sendRequestMSP(requestMSP(MSP_SET_RAW_RC,rc_signals_array));}  }
class C{  @Override protected void targetWindowClosingEvent(java.awt.event.WindowEvent e){  targetWindowClosing(true);}  }
class C{  protected String compare(Field f){  requireNonNull(f);  final StringBuilder str=new StringBuilder(".filter(o -> ");  if (isPrimitive(f.getType())) {    str.append("(this.").append(f.getName()).append(" == o.").append(f.getName()).append(")");  } else {    str.append("Objects.equals(this.").append(f.getName()).append(", o.").append(f.getName()).append(")");  }  return str.append(")").toString();}  }
class C{  public textureReference(){}  }
class C{  public void callFunction() throws IOException {  print("callFunction",null);}  }
class C{  public static <K,V extends Comparable<V>>List<Entry<K,V>> sortByValue(Map<K,V> map){  List<Entry<K,V>> entries=new ArrayList<Entry<K,V>>(map.entrySet());  Collections.sort(entries,new ByValue<K,V>());  return entries;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSSink({DSSinkKind.DATABASE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.449 -0500",hash_original_method="D4E75DDD13795169D0FEAC83726F0F45",hash_generated_method="C7371512E5E8EE49D9DEB2147152339E") public void bind(int index,boolean value){  mPreparedStatement.bindLong(index,value ? 1 : 0);}  }
class C{  public boolean removeOnTransactionBroadcastListener(OnTransactionBroadcastListener listener){  boolean result=ListenerRegistration.removeFromList(listener,peersTransactionBroadastEventListeners);  for (  Peer peer : getConnectedPeers())   peer.removeOnTransactionBroadcastListener(listener);  for (  Peer peer : getPendingPeers())   peer.removeOnTransactionBroadcastListener(listener);  return result;}  }
class C{  @Override public void updateCycleView(Cycle cycle){  talkAdapter.setCycle(cycle);}  }
class C{  private void playVideo(View pageView,VideoView videoView,String videoUrl,String videoMimeType){  File srcFile=mMediasCache.mediaCacheFile(videoUrl,videoMimeType);  if ((null != srcFile) && srcFile.exists()) {    try {      stopPlayingVideo();      String extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(videoMimeType);      if (null != extension) {        extension+="." + extension;      }      File dstFile=new File(mContext.getCacheDir(),"sliderMedia" + extension);      if (dstFile.exists()) {        dstFile.delete();      }      FileInputStream inputStream=null;      FileOutputStream outputStream=null;      try {        if (!dstFile.exists()) {          dstFile.createNewFile();          inputStream=new FileInputStream(srcFile);          outputStream=new FileOutputStream(dstFile);          byte[] buffer=new byte[1024 * 10];          int len;          while ((len=inputStream.read(buffer)) != -1) {            outputStream.write(buffer,0,len);          }        }      } catch (      Exception e) {        Log.e(LOG_TAG,"## playVideo() : failed " + e.getMessage());        dstFile=null;      } finally {        try {          if (inputStream != null)           inputStream.close();          if (outputStream != null)           outputStream.close();        } catch (        Exception e) {          Log.e(LOG_TAG,"## playVideo() : failed " + e.getMessage());        }      }      videoView.setVideoPath(dstFile.getAbsolutePath());      displayVideoThumbnail(pageView,false);      mPlayingVideoView=videoView;      videoView.start();    } catch (    Exception e) {      Log.e(LOG_TAG,"## playVideo() : videoView.start(); failed " + e.getMessage());    }  }}  }
class C{  public GitlabGroupMember addGroupMember(Integer groupId,Integer userId,GitlabAccessLevel accessLevel) throws IOException {  Query query=new Query().appendIf("id",groupId).appendIf("user_id",userId).appendIf("access_level",accessLevel);  String tailUrl=GitlabGroup.URL + "/" + groupId+ GitlabProjectMember.URL+ query.toString();  return dispatch().to(tailUrl,GitlabGroupMember.class);}  }
class C{  @Override public boolean isIdleAlmostExpired(long delta){  long now=CurrentTime.currentTime();  return (_pool.getLoadBalanceIdleTime() < now - _idleStartTime + delta);}  }
class C{  public boolean hasTenantCredentials(String tenantName){  boolean hasCreds=false;  ILdapMessage message=null;  try {    message=getTenantCredentials(getTenantsDn(tenantName));    if (message != null) {      ILdapEntry[] entries=message.getEntries();      if (entries != null && entries.length > 0) {        hasCreds=true;      }    }  }  finally {    closeMessage(message);  }  return hasCreds;}  }
class C{  public Random(Process process){  super("statistical.rand",FunctionDescription.UNFIXED_NUMBER_OF_ARGUMENTS,Ontology.REAL);  this.process=process;}  }
class C{  private void drawMovieFrame(Canvas canvas){  movie.setTime(mCurrentAnimationTime);  canvas.save(Canvas.MATRIX_SAVE_FLAG);  canvas.scale(mScale,mScale);  movie.draw(canvas,mLeft / mScale,mTop / mScale);  canvas.restore();}  }
class C{  public int compareTo(JumpingSolitaireState jss){  for (int i=0; i < filled.length; i++) {    if (!filled[i] && jss.filled[i]) {      return -1;    }    if (filled[i] && !jss.filled[i]) {      return +1;    }  }  return 0;}  }
class C{  private void handlePutRequest(int type) throws IOException {  ServerOperation op=new ServerOperation(this,mInput,type,mMaxPacketLength,mListener);  try {    int response=-1;    if ((op.finalBitSet) && !op.isValidBody()) {      response=validateResponseCode(mListener.onDelete(op.requestHeader,op.replyHeader));    } else {      response=validateResponseCode(mListener.onPut(op));    }    if (response != ResponseCodes.OBEX_HTTP_OK && !op.isAborted) {      op.sendReply(response);    } else     if (!op.isAborted) {      while (!op.finalBitSet) {        op.sendReply(ResponseCodes.OBEX_HTTP_CONTINUE);      }      op.sendReply(response);    }  } catch (  Exception e) {    if (!op.isAborted) {      sendResponse(ResponseCodes.OBEX_HTTP_INTERNAL_ERROR,null);    }  }}  }
class C{  @Override public boolean isPostOperation(){  return this.postOperation;}  }
class C{  public BlockAmount increment(){  return new BlockAmount(this.getValue() + 1);}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (!isCyclic && ((currentItem == 0 && scrollingOffset > 0) || (currentItem == itemCount - 1 && scrollingOffset < 0))) {    scrollingOffset=0;  }  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  public static MlBayesImObs serializableInstance(){  return new MlBayesImObs(BayesPm.serializableInstance());}  }
class C{  public Boolean addPhoneNumber(Integer departmentId,Integer employeeId,PhoneNumber body) throws ApiException {  Object postBody=body;  if (departmentId == null) {    throw new ApiException(400,"Missing the required parameter 'departmentId' when calling addPhoneNumber");  }  if (employeeId == null) {    throw new ApiException(400,"Missing the required parameter 'employeeId' when calling addPhoneNumber");  }  if (body == null) {    throw new ApiException(400,"Missing the required parameter 'body' when calling addPhoneNumber");  }  String path="/hr/department/{departmentId}/employee/{employeeId}/phoneNumber/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "departmentId" + "\\}",apiClient.escapeString(departmentId.toString())).replaceAll("\\{" + "employeeId" + "\\}",apiClient.escapeString(employeeId.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,String> formParams=new HashMap<String,String>();  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  if (contentType.startsWith("multipart/form-data")) {    boolean hasFields=false;    FormDataMultiPart mp=new FormDataMultiPart();    if (hasFields)     postBody=mp;  } else {  }  try {    String[] authNames=new String[]{};    String response=apiClient.invokeAPI(path,"POST",queryParams,postBody,headerParams,formParams,accept,contentType,authNames);    if (response != null) {      return (Boolean)apiClient.deserialize(response,"",Boolean.class);    } else {      return null;    }  } catch (  ApiException ex) {    throw ex;  }}  }
class C{  public void terminate(){  for (int i=0; i < threads; i++) {    servers[i].terminate();  }}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public String performInstallStep(final Artifact artifact,final Version version,final Path pathToBinaries,final InstallOptions options,boolean isBinaryFromRepo) throws IOException {  return performStep(artifact,version,pathToBinaries,options,false,isBinaryFromRepo);}  }
class C{  private void raster(){  glEnable(GL_DEPTH_TEST);  glUseProgram(rasterProgram);  glUniformMatrix4fv(viewMatrixUniform,false,viewMatrix.get(matrixBuffer));  glUniformMatrix4fv(projectionMatrixUniform,false,projMatrix.get(matrixBuffer));  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  glClear(GL_DEPTH_BUFFER_BIT);  glBindVertexArray(vaoScene);  glDrawArraysInstanced(GL_TRIANGLES,0,6 * 6,boxes.length / 2);  glBindVertexArray(0);  glBindFramebuffer(GL_FRAMEBUFFER,0);  glUseProgram(0);}  }
class C{  public static Date unpackDate(byte[] buffer){  byte[] buffer8=new byte[8];  System.arraycopy(buffer,0,buffer8,3,5);  ByteBuffer byteBuffer=ByteBuffer.wrap(buffer8);  long longValue=byteBuffer.getLong();  int second=(int)longValue & 0x3f;  longValue=longValue >> 6;  int minute=(int)longValue & 0x3f;  longValue=longValue >> 6;  int hour=(int)longValue & 0x1f;  longValue=longValue >> 5;  int day=(int)longValue & 0x1f;  longValue=longValue >> 5;  int month=(int)longValue & 0xF;  longValue=longValue >> 4;  int year=(int)longValue & 0xFFF;  return new GregorianCalendar(year,month - 1,day,hour,minute,second).getTime();}  }
class C{  private void validateIamRoles(List<IamRole> iamRoles){  Assert.notNull(iamRoles,"At least 1 IAM roles must be specified");  Assert.isTrue(iamRoles.size() > 0,"At least 1 IAM roles must be specified");  for (  IamRole iamRole : iamRoles) {    Assert.notNull(iamRole,"IAM role must be specified");    Assert.hasText(iamRole.getIamRoleName(),"IAM role name must be specified");  }}  }
class C{  private static boolean isForStatement(String line,int offset){  int forPos=line.indexOf("for");  if (forPos != -1) {    if ((forPos == 0 || !Character.isJavaIdentifierPart(line.charAt(forPos - 1))) && (line.length() == forPos + 3 || !Character.isJavaIdentifierPart(line.charAt(forPos + 3))))     return true;  }  return false;}  }
class C{  public Font(String name,Style style,float size){  this.name=name;  this.style=style;  this.size=size;}  }
class C{  private void processExportData(BlockStorageDriver driver,com.emc.storageos.db.client.model.StorageSystem storageSystem,Map<String,URI> unManagedVolumeNativeIdToUriMap,Map<String,URI> managedVolumeNativeIdToUriMap,Map<String,List<HostExportInfo>> hostToVolumeExportInfoMap,Set<String> invalidExportHosts,DbClient dbClient,PartitionManager partitionManager){  List<UnManagedExportMask> unManagedExportMasksToCreate=new ArrayList<>();  List<UnManagedExportMask> unManagedExportMasksToUpdate=new ArrayList<>();  Map<URI,HostExportInfo> exportInfosForExistingMasks=new HashMap<>();  List<HostExportInfo> exportInfosForNewMasks=new ArrayList<>();  determineUnManagedExportMasksForExportInfo(storageSystem,hostToVolumeExportInfoMap,invalidExportHosts,dbClient,exportInfosForExistingMasks,exportInfosForNewMasks);  log.info("Export info for unmanaged masks to create for volumes: {}",exportInfosForNewMasks);  log.info("Export info for unmanaged masks to update for volumes: {}",exportInfosForExistingMasks);  if (!(exportInfosForNewMasks.isEmpty() && exportInfosForExistingMasks.isEmpty())) {    processUnManagedMasksForVolumes(storageSystem,exportInfosForExistingMasks,exportInfosForNewMasks,unManagedVolumeNativeIdToUriMap,managedVolumeNativeIdToUriMap,unManagedExportMasksToUpdate,unManagedExportMasksToCreate,dbClient);  }  log.info("Unmanaged Masks to create for volumes: {}",unManagedExportMasksToCreate);  log.info("Unmanaged Masks to update for volumes: {}",unManagedExportMasksToUpdate);  if (!unManagedExportMasksToCreate.isEmpty()) {    partitionManager.insertInBatches(unManagedExportMasksToCreate,Constants.DEFAULT_PARTITION_SIZE,dbClient,UNMANAGED_EXPORT_MASK);  }  if (!unManagedExportMasksToUpdate.isEmpty()) {    partitionManager.updateInBatches(unManagedExportMasksToUpdate,Constants.DEFAULT_PARTITION_SIZE,dbClient,UNMANAGED_EXPORT_MASK);  }  updateUnManagedVolumesWithExportData(unManagedVolumeNativeIdToUriMap,unManagedExportMasksToCreate,unManagedExportMasksToUpdate,dbClient,partitionManager);  unManagedExportMasksToCreate.clear();  unManagedExportMasksToUpdate.clear();}  }
class C{  @Override protected ShardsIterator shards(ClusterState clusterState,IndicesSegmentsRequest request,String[] concreteIndices){  return clusterState.routingTable().allShards(concreteIndices);}  }
class C{  public static void logRetrieveArchiveFailed(final Logger logger){  logger.logMessage(Level.WARNING,"Consumer failed to obtain an archive");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getArchiveDirectories(Seeker.MUSIC_DIR_MASK);}  }
class C{  public void writeValue(File resultFile,Object value) throws IOException, JsonGenerationException, JsonMappingException {  _configAndWriteValue(_jsonFactory.createJsonGenerator(resultFile,JsonEncoding.UTF8),value);}  }
class C{  void handleConnack(MqttConnAckMessage message){  log.debug("Received invalid CONNACK from client: " + session.getSessionState().getClientId());  log.debug("Disconnecting client: " + session.getSessionState().getClientId());  disconnect();}  }
class C{  public Bitmap scaleCenterCrop(Bitmap source,int destWidth,int destHeight){  int sourceWidth=source.getWidth();  int sourceHeight=source.getHeight();  float xScale=(float)destWidth / sourceWidth;  float yScale=(float)destHeight / sourceHeight;  float scale=Math.max(xScale,yScale);  float scaledWidth=scale * sourceWidth;  float scaledHeight=scale * sourceHeight;  float left=(destWidth - scaledWidth) / 2;  float top=(destHeight - scaledHeight) / 2;  RectF destRect=new RectF(left,top,left + scaledWidth,top + scaledHeight);  Bitmap dest=Bitmap.createBitmap(destWidth,destHeight,source.getConfig());  Canvas canvas=new Canvas(dest);  canvas.drawBitmap(source,null,destRect,null);  return dest;}  }
class C{  public void projectionChanged(ProjectionEvent ev){  setProjection(ev);  Projection proj=ev.getProjection();  Layer layer=configureAppropriateLayer(proj.getScale());  fireStatusUpdate(LayerStatusEvent.START_WORKING);  layer.projectionChanged(ev);}  }
class C{  public SafeCalendar beginDate(){  return beginDate;}  }
class C{  public PHDRMetaDataTrackSubDescriptor(PHDRMetaDataTrackSubDescriptorBO phdrMetaDataTrackSubDescriptorBO){  this.phdrMetaDataTrackSubDescriptorBO=phdrMetaDataTrackSubDescriptorBO;}  }
class C{  protected void buildListeners(){  super.buildListeners();  LAUNCH_ACTION=new LaunchAction();  LAUNCH_OS_ACTION=new LaunchOSAction();  OPEN_IN_FOLDER_ACTION=new OpenInFolderAction();  DEMUX_MP4_AUDIO_ACTION=new DemuxMP4AudioAction();  CREATE_TORRENT_ACTION=new CreateTorrentAction();  DELETE_ACTION=new RemoveAction();  SEND_TO_ITUNES_ACTION=new SendAudioFilesToiTunes();}  }
class C{  public static SemEvidence serializableInstance(){  return new SemEvidence(SemIm.serializableInstance());}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity is about to be \"paused\")");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.226 -0400",hash_original_method="385A210A4F53DD068AEE801B7B136BBE",hash_generated_method="0815FCBC3E537BB3192BE42996501FD5") public String encode(String pString,String charset) throws UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(encode(pString.getBytes(charset)),StringEncodings.US_ASCII);}  }
class C{  public boolean isEnabled(RichFormatterFeature feature){  return features.contains(feature);}  }
class C{  public TypeVariable typeVariable(SootClass sootClass){  return typeVariable(hierarchy.typeNode(sootClass.getType()));}  }
class C{  public void testPathExpressionNextMatchNonRecursive(){  GraphModel graph=new GraphModel();  GraphNode[] nodes=fillGraphModel(graph);  PathExpression pathExpression=createPathExpression(false,false,false);  Collection<GraphNode> output=pathExpression.nextMatch(graph,buildSingleSet(nodes[0]));  assertEquals(1,output.size());  assertGraphContainsElement(output,nodes,6);}  }
class C{  protected void rotateLeft(BalancedBinaryNode<K,V> p){  BalancedBinaryNode<K,V> r=p.right;  p.right=r.left;  if (r.left != null)   r.left.parent=p;  r.parent=p.parent;  if (p.parent == null)   root=r; else   if (p.parent.left == p)   p.parent.left=r; else   p.parent.right=r;  r.left=p;  p.parent=r;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.353 -0500",hash_original_method="56179EEEB1BB6D253C6C82DD4DB81ED5",hash_generated_method="18CE5E3E77DB977F3B95FE9B38EC4A03") public boolean hasAnchoringBounds(){  return anchoringBounds;}  }
class C{  @Override public final boolean openPdfFileFromURL(final String pdfUrl,final boolean supportLinearized,final String password) throws PdfException {  InputStream is=null;  String rawFileName=null;  try {    final URL url;    url=new URL(pdfUrl);    rawFileName=url.getPath().substring(url.getPath().lastIndexOf('/') + 1);    is=url.openStream();  } catch (  final IOException e) {    LogWriter.writeLog("Exception: " + e.getMessage());  }  preOpen();  final boolean flag=fileAccess.readFile(supportLinearized,is,rawFileName,password);  postOpen();  return flag;}  }
class C{  public void updatePrevision(PrevisionVO prevision){  StringBuilder qual=new StringBuilder("WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,prevision.getId()));  updateVO(qual.toString(),TABLE_NAME,COLUMN_DEFINITIONS,prevision);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return new Integer(a != null ? a.getTrack() : 0);}  }
class C{  private Pair<String,Boolean> describeWeather(Calendar calendar,Modifiers mods){  int mod=(int)(mods.rain * 0.05 * rain.getMax());  String weather=rain.getDescription(mod);  if (weather != null) {    Pair<String,Boolean> rainDesc=describeRain(calendar,mods.temperature);    return new Pair<String,Boolean>(rainDesc.first() + weather,rainDesc.second());  } else {    mod=(int)(mods.fog * 0.05 * fog.getMax());    weather=fog.getDescription(mod);    if (weather != null) {      return new Pair<String,Boolean>(weather,Boolean.FALSE);    }  }  return new Pair<String,Boolean>(null,Boolean.FALSE);}  }
class C{  public void loadLocal(final int local,final Type type){  setLocalType(local,type);  loadInsn(type,local);}  }
class C{  private void updateSecondaryIndices(Entity entity,IEntityClass entityClass,Long deviceKey){  for (  DeviceIndex index : secondaryIndexMap.values()) {    index.updateIndex(entity,deviceKey);  }  ClassState state=getClassState(entityClass);  for (  DeviceIndex index : state.secondaryIndexMap.values()) {    index.updateIndex(entity,deviceKey);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:26.929 -0500",hash_original_method="8A5EBF82F92FAE3DB13A729C4B6DDBA4",hash_generated_method="83C5A9A53DA3465E2C66ACC70037B43D") public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize){  return new ScheduledThreadPoolExecutor(corePoolSize);}  }
class C{  public void useNoPriors(){  m_delegate.useNoPriors();}  }
class C{  Offer(Connection conn,AgentSession agentSession,String userID,String userJID,String workgroupName,Date expiresDate,String sessionID,Map<String,List<String>> metaData,OfferContent content){  this.connection=conn;  this.session=agentSession;  this.userID=userID;  this.userJID=userJID;  this.workgroupName=workgroupName;  this.expiresDate=expiresDate;  this.sessionID=sessionID;  this.metaData=metaData;  this.content=content;}  }
class C{  public void makeDynamic(PropertyExpression pexp,ClassNode returnType){  context.getEnclosingMethod().putNodeMetaData(StaticTypesMarker.DYNAMIC_RESOLUTION,Boolean.TRUE);  pexp.putNodeMetaData(StaticTypesMarker.DYNAMIC_RESOLUTION,returnType);  storeType(pexp,returnType);  setHandled(true);  if (debug) {    LOG.info("Turning '" + pexp.getText() + "' into a dynamic property access of type "+ returnType.toString(false));  }}  }
class C{  public static com.wipro.ats.bdre.imcrawler.mr.Contents.Builder newBuilder(){  return new com.wipro.ats.bdre.imcrawler.mr.Contents.Builder();}  }
class C{  public boolean isNativeTitle(){  return impl.isNativeTitle();}  }
class C{  public static boolean testUrlConnectionv6(){  try {    final HttpURLConnection conn=(HttpURLConnection)new URL("http://ipv6.google.com/").openConnection();    try {      conn.connect();      final String content=Streams.readFully(new InputStreamReader(conn.getInputStream()));      if (content.contains("Google")) {        return true;      }    }  finally {      conn.disconnect();    }  } catch (  IOException e) {    Log.d(TAG,"error: " + e);  }  return false;}  }
class C{  public boolean containsComment(int sourceStart,int sourceEnd){  int iComment=this.scanner.commentPtr;  for (; iComment >= 0; iComment--) {    int commentStart=this.scanner.commentStarts[iComment];    if (commentStart < 0)     commentStart=-commentStart;    if (commentStart < sourceStart)     continue;    if (commentStart > sourceEnd)     continue;    return true;  }  return false;}  }
class C{  public String toString(){  return contact.toString();}  }
class C{  public GeoBoundingBoxQueryBuilder topRight(double lat,double lon){  box[TOP]=lat;  box[RIGHT]=lon;  return this;}  }
class C{  static <K,V>void writeMap(Map<K,V> map,ObjectOutputStream stream) throws IOException {  stream.writeInt(map.size());  for (  Map.Entry<K,V> entry : map.entrySet()) {    stream.writeObject(entry.getKey());    stream.writeObject(entry.getValue());  }}  }
class C{  public boolean hasWarningMessage(){  return (warning.length() > 0);}  }
class C{  public boolean checkUnManagedVolumeHasReplicas(UnManagedVolume unManagedVolume){  StringMap unManagedVolumeCharacteristics=unManagedVolume.getVolumeCharacterstics();  String volumeHasReplicas=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.HAS_REPLICAS.toString());  String volumeHasRemoteReplicas=unManagedVolumeCharacteristics.get(SupportedVolumeCharacterstics.REMOTE_MIRRORING.toString());  if (null != volumeHasReplicas && Boolean.parseBoolean(volumeHasReplicas) || (null != volumeHasRemoteReplicas && Boolean.parseBoolean(volumeHasRemoteReplicas))) {    return true;  }  return false;}  }
class C{  public CodeType findByNameAndType(String codeName,String codeType){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<CodeType> query=builder.createQuery(CodeType.class);    Root<CodeType> from=query.from(CodeType.class);    query.select(from);    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != codeName) {      Predicate predicate=builder.equal(from.get("name"),codeName);      predicates.add(predicate);    }    if (null != codeType) {      Predicate predicate=builder.equal(from.get("type"),codeType);      predicates.add(predicate);    }    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<CodeType> typedQuery=entityManager.createQuery(query);    List<CodeType> items=typedQuery.getResultList();    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public static void init(String filename,Process process){  if (filename == null) {    process.getLog().log("No filename given for result file, using stdout for logging results!",LogService.NOTE);    init(new PrintWriter(System.out));  } else   if (filename.equals("stderr")) {    init(new PrintWriter(System.err));  } else   if (filename.equals("stdout")) {    init(new PrintWriter(System.out));  } else {    File file=process.resolveFileName(filename);    PrintWriter out;    Charset encoding;    try {      encoding=Encoding.getEncoding(process.getRootOperator());    } catch (    UndefinedParameterError e1) {      encoding=Charset.defaultCharset();    }catch (    UserError e1) {      encoding=Charset.defaultCharset();    }    try {      out=new PrintWriter(new OutputStreamWriter(new FileOutputStream(file),encoding));    } catch (    IOException e) {      process.getLog().log("Cannot create resultfile '" + filename + "': "+ e.getClass()+ ":"+ e.getMessage(),LogService.MAXIMUM);      process.getLog().log("using stdout",LogService.MAXIMUM);      out=new PrintWriter(System.out);    }    systemStream=false;    init(out);  }}  }
class C{  public boolean contains(@Nullable IElementType t){  if (t == null)   return false;  final short i=t.getIndex();  return 0 <= i && i <= myMax && get(i);}  }
class C{  public static Page read(PageStore store,Data data,int pageId){  PageDataOverflow p=new PageDataOverflow(store,pageId,data);  p.read();  return p;}  }
class C{  public JBBPOut Int(final int... value) throws IOException {  assertNotEnded();  assertArrayNotNull(value);  if (this.processCommands) {    for (    final int v : value) {      _writeInt(v);    }  }  return this;}  }
class C{  public void namespaceAfterStartElement(String uri,String prefix) throws SAXException {}  }
class C{  public void print(){  Object[] iterChargingTimes=chargingTimes.toArray();  Arrays.sort(iterChargingTimes);  for (int i=0; i < iterChargingTimes.length; i++) {    ChargeLog curItem=(ChargeLog)iterChargingTimes[i];    curItem.print();  }}  }
class C{  public List<String[]> readAll() throws IOException {  List<String[]> allElements=new ArrayList<>();  while (hasNext) {    String[] nextLineAsTokens=readNext();    if (nextLineAsTokens != null) {      allElements.add(nextLineAsTokens);    }  }  return allElements;}  }
class C{  private void validate(){  if (values != null)   return;  values=new Values();  Map<String,Object> defaults=((NimbusLookAndFeel)UIManager.getLookAndFeel()).getDefaultsForPrefix(prefix);  if (component != null) {    Object o=component.get().getClientProperty("Nimbus.Overrides");    if (o instanceof UIDefaults) {      Object i=component.get().getClientProperty("Nimbus.Overrides.InheritDefaults");      boolean inherit=i instanceof Boolean ? (Boolean)i : true;      UIDefaults d=(UIDefaults)o;      TreeMap<String,Object> map=new TreeMap<String,Object>();      for (      Object obj : d.keySet()) {        if (obj instanceof String) {          String key=(String)obj;          if (key.startsWith(prefix)) {            map.put(key,d.get(key));          }        }      }      if (inherit) {        defaults.putAll(map);      } else {        defaults=map;      }    }  }  List<State> states=new ArrayList<State>();  Map<String,Integer> stateCodes=new HashMap<String,Integer>();  List<RuntimeState> runtimeStates=new ArrayList<RuntimeState>();  String statesString=(String)defaults.get(prefix + ".States");  if (statesString != null) {    String s[]=statesString.split(",");    for (int i=0; i < s.length; i++) {      s[i]=s[i].trim();      if (!State.isStandardStateName(s[i])) {        String stateName=prefix + "." + s[i];        State customState=(State)defaults.get(stateName);        if (customState != null) {          states.add(customState);        }      } else {        states.add(State.getStandardState(s[i]));      }    }    if (states.size() > 0) {      values.stateTypes=states.toArray(new State[states.size()]);    }    int code=1;    for (    State state : states) {      stateCodes.put(state.getName(),code);      code<<=1;    }  } else {    states.add(State.Enabled);    states.add(State.MouseOver);    states.add(State.Pressed);    states.add(State.Disabled);    states.add(State.Focused);    states.add(State.Selected);    states.add(State.Default);    stateCodes.put("Enabled",ENABLED);    stateCodes.put("MouseOver",MOUSE_OVER);    stateCodes.put("Pressed",PRESSED);    stateCodes.put("Disabled",DISABLED);    stateCodes.put("Focused",FOCUSED);    stateCodes.put("Selected",SELECTED);    stateCodes.put("Default",DEFAULT);  }  for (  String key : defaults.keySet()) {    String temp=key.substring(prefix.length());    if (temp.indexOf('"') != -1 || temp.indexOf(':') != -1)     continue;    temp=temp.substring(1);    String stateString=null;    String property=null;    int bracketIndex=temp.indexOf(']');    if (bracketIndex < 0) {      property=temp;    } else {      stateString=temp.substring(0,bracketIndex);      property=temp.substring(bracketIndex + 2);    }    if (stateString == null) {      if ("contentMargins".equals(property)) {        values.contentMargins=(Insets)defaults.get(key);      } else       if ("States".equals(property)) {      } else {        values.defaults.put(property,defaults.get(key));      }    } else {      boolean skip=false;      int componentState=0;      String[] stateParts=stateString.split("\\+");      for (      String s : stateParts) {        if (stateCodes.containsKey(s)) {          componentState|=stateCodes.get(s);        } else {          skip=true;          break;        }      }      if (skip)       continue;      RuntimeState rs=null;      for (      RuntimeState s : runtimeStates) {        if (s.state == componentState) {          rs=s;          break;        }      }      if (rs == null) {        rs=new RuntimeState(componentState,stateString);        runtimeStates.add(rs);      }      if ("backgroundPainter".equals(property)) {        rs.backgroundPainter=getPainter(defaults,key);      } else       if ("foregroundPainter".equals(property)) {        rs.foregroundPainter=getPainter(defaults,key);      } else       if ("borderPainter".equals(property)) {        rs.borderPainter=getPainter(defaults,key);      } else {        rs.defaults.put(property,defaults.get(key));      }    }  }  Collections.sort(runtimeStates,STATE_COMPARATOR);  values.states=runtimeStates.toArray(new RuntimeState[runtimeStates.size()]);}  }
class C{  final public void write(char ch){  Writer out=this.out;  if (out == null)   return;  try {    out.write(ch);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public static boolean hasInternet(Context c){  ConnectivityManager cm=(ConnectivityManager)c.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetwork=cm.getActiveNetworkInfo();  boolean isConnected=activeNetwork != null && activeNetwork.isConnectedOrConnecting();  if (!isConnected) {    Toast.makeText(c,"No internet connection",Toast.LENGTH_SHORT).show();  }  return isConnected;}  }
class C{  private static String removeInvalidCharacters(final String fileName){  String fixedUpString=Uri.decode(fileName);  for (int i=0; i < ANSI_INVALID_CHARACTERS.length(); i++) {    fixedUpString=fixedUpString.replace(ANSI_INVALID_CHARACTERS.charAt(i),'_');  }  return Uri.encode(fixedUpString);}  }
class C{  public void testBottomUpSemanticsExplainHint05() throws Exception {  final ASTContainer container=new TestHelper("explainHints-bottomup05","explainHints-bottomup05.rq","explainHints.trig","explainHints-bottomup12345.srx").runTest();  assertCarriesExactlyOneExplainHintOfType(container.getOptimizedAST(),BottomUpSemanticsExplainHint.class);}  }
class C{  public void refresh(){  ((AbstractTableModel)table.getModel()).fireTableDataChanged();}  }
class C{  private void fillSpreadsheetListBox(){  String[] stringsForListbox=new String[spreadsheetEntries.size()];  for (int i=0; i < spreadsheetEntries.size(); i++) {    SpreadsheetEntry entry=spreadsheetEntries.get(i);    stringsForListbox[i]=entry.getTitle().getPlainText() + " (" + entry.getAuthors().get(0).getEmail()+ ", updated "+ entry.getUpdated().toUiString()+ ")";  }  spreadsheetListBox.setListData(stringsForListbox);}  }
class C{  @SuppressWarnings("unused") private void dump(Node node,String prefix){  Node n;  String[] types={"unknown","ELEMENT_NODE","ATTRIBUTE_NODE","TEXT_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE"};  String s=String.format("%s<%s> %s %s",prefix,types[node.getNodeType()],node.getNodeName(),node.getNodeValue() == null ? "" : node.getNodeValue().trim());  System.out.println(s);  n=node.getFirstChild();  if (n != null) {    dump(n,prefix + "- ");  }  n=node.getNextSibling();  if (n != null) {    dump(n,prefix);  }}  }
class C{  public boolean isOfBinaryType(){  return TypeMap.isBinaryType(getMappedTypeCode());}  }
class C{  public Complex multiply(Complex secondComplex){  return new Complex(a * secondComplex.a - b * secondComplex.b,b * secondComplex.a + a * secondComplex.b);}  }
class C{  public Vertex word(Vertex source,Vertex[] arguments){  Network network=source.getNetwork();  Vertex nil=network.createVertex(Primitive.NULL);  if (arguments.length == 0) {    return nil;  }  StringWriter writer=new StringWriter();  List<Vertex> words=new ArrayList<Vertex>();  for (  Vertex argument : arguments) {    if (argument.instanceOf(Primitive.ARRAY)) {      List<Vertex> elements=argument.orderedRelations(Primitive.ELEMENT);      if (elements != null) {        words.addAll(elements);      }    } else     if (argument.instanceOf(Primitive.LIST)) {      List<Vertex> elements=argument.orderedRelations(Primitive.SEQUENCE);      if (elements != null) {        words.addAll(elements);      }    } else {      words.add(argument);    }  }  Vertex previousWord=nil;  for (int index=0; index < words.size(); index++) {    Vertex word=words.get(index);    Vertex nextWord=nil;    if (words.size() > (index + 1)) {      nextWord=words.get(index + 1);    }    word=Language.getWordFollowing(word,previousWord,nextWord,network);    writer.write(String.valueOf(word.getData()));    if ((index + 1) < words.size()) {      writer.write(" ");    }    previousWord=word;  }  return network.createWord(writer.toString());}  }
class C{  public void onZoneEnter(Player player){  getAndCheckAchievementsInCategory(player,Category.OUTSIDE_ZONE);  getAndCheckAchievementsInCategory(player,Category.UNDERGROUND_ZONE);  getAndCheckAchievementsInCategory(player,Category.INTERIOR_ZONE);}  }
class C{  public void visitProperty(PropertyNode statement){}  }
class C{  public PopupMenuRemoveSession(){  super(Constant.messages.getString("httpsessions.popup.session.remove"));  initialize();}  }
class C{  private void emitCode(){  LinkedList<Instantiation> worklist=new LinkedList<Instantiation>();  worklist.add(new Instantiation(null,mainSubroutine));  InsnList newInstructions=new InsnList();  List<TryCatchBlockNode> newTryCatchBlocks=new ArrayList<TryCatchBlockNode>();  List<LocalVariableNode> newLocalVariables=new ArrayList<LocalVariableNode>();  while (!worklist.isEmpty()) {    Instantiation inst=worklist.removeFirst();    emitSubroutine(inst,worklist,newInstructions,newTryCatchBlocks,newLocalVariables);  }  instructions=newInstructions;  tryCatchBlocks=newTryCatchBlocks;  localVariables=newLocalVariables;}  }
class C{  public WeibullDistr(double alpha,double beta){  numGen=new WeibullDistribution(alpha,beta);}  }
class C{  public PageBlobInputStream(CloudBlob pageBlob) throws StorageException {  super(pageBlob.openInputStream());  this.pageBlob=pageBlob;  setOriginalNonPageAlignedStreamSize();}  }
class C{  public ActionDefinition basicGetRef(){  return ref;}  }
class C{  public AbstractHibernateAcceptanceTest(){  super();}  }
class C{  public ToStringBuilder append(String fieldName,Object[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void readConfig(FileReader file){  if (file == null)   return;  BufferedReader in=null;  try {    in=new BufferedReader(file);    String line=null;    do {      line=in.readLine();      if (line == null)       continue;      line=line.trim();      if (line.startsWith("#"))       continue;      if (line.startsWith("-"))       addToBlacklist(line.substring(1,line.length()).trim());      if (line.startsWith("+"))       addToWhitelist(line.substring(1,line.length()).trim());      if (line.startsWith("$"))       addToClassIgnoreList(line.substring(1,line.length()).trim());      if (line.startsWith("@"))       addToStackIgnoreList(line.substring(1,line.length()).trim());    } while (line != null);  } catch (  FileNotFoundException fnfe) {    RO0Agent.out("Unable to set up ignore list");    fnfe.printStackTrace();  }catch (  IOException ioe) {    RO0Agent.out("Error reading ignorelist config file");    ioe.printStackTrace();  } finally {    try {      if (in != null) {        in.close();      }    } catch (    Exception e) {    }  }}  }
class C{  private static void populateTrackRequest(TrackRequest trackRequest){  Request request=new Request();  List<String> optoinsList=request.getRequestOption();  optoinsList.add("activity");  request.setRequestAction("Track");  trackRequest.setRequest(request);  trackRequest.setTrackingNumber("1Z12345E0291980793");  trackRequest.setIncludeFreight("01");}  }
class C{  public LibraryException(){  super("LibraryException created");  QL.error(this);}  }
class C{  @Override public void reset(BNetwork network){  if (this == network) {    return;  }  evidence.removePairs(getChanceNodeIds());  super.reset(network);  if (network instanceof DialogueState) {    evidence.addAssignment(((DialogueState)network).getEvidence());  }}  }
class C{  private void importRunnerEnvironment(ImportProject importProject,FolderEntry baseProjectFolder) throws ForbiddenException, ServerException, ConflictException, IOException {  importRunnerEnvironment(importProject,baseProjectFolder,null);}  }
class C{  public ViewHolder(Context context,int layoutId,ViewGroup parent,int position){  mConvertView=LayoutInflater.from(context).inflate(layoutId,parent,false);  mViews=new SparseArray<>();  mPosition=position;  mConvertView.setTag(this);}  }
class C{  public XMLString emptystr(){  return XString.EMPTYSTRING;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.TENANT_ADMIN}) @Path("/{id}/vcenter-data-centers") public VcenterDataCenterRestRep createVcenterDataCenter(@PathParam("id") URI id,VcenterDataCenterCreate createParam) throws DatabaseException {  Vcenter vcenter=queryObject(Vcenter.class,id,false);  checkDuplicateChildName(id,VcenterDataCenter.class,DATAOBJECT_NAME_FIELD,"vcenter",createParam.getName(),_dbClient);  VcenterDataCenter datacenter=new VcenterDataCenter();  datacenter.setId(URIUtil.createId(VcenterDataCenter.class));  datacenter.setLabel(createParam.getName());  datacenter.setVcenter(id);  if (vcenter.getCascadeTenancy()) {    datacenter.setTenant(_permissionsHelper.getTenant(vcenter.getAcls()));  } else {    datacenter.setTenant(NullColumnValueGetter.getNullURI());  }  _dbClient.createObject(datacenter);  auditOp(OperationTypeEnum.CREATE_VCENTER_DATACENTER,true,null,datacenter.auditParameters());  return map(datacenter);}  }
class C{  private CProjectFunctions(){}  }
class C{  public static void init(Process process){  String filename=null;  try {    filename=process.getRootOperator().getParameterAsString(ProcessRootOperator.PARAMETER_RESULTFILE);  } catch (  UndefinedParameterError e) {  }  init(filename,process);}  }
class C{  public void add(ESRIRecord r) throws IOException {  if (r.getShapeType() == fileShapeType) {    verifyRecordBuffer(r.getBinaryStoreSize());    int nBytes=r.write(recBuf,0);    raf.seek(raf.length());    raf.write(recBuf,0,nBytes);  } else {    Debug.error("ShapeFile.add(): type=" + r.getShapeType() + " does not match file type="+ fileShapeType);  }}  }
class C{  private boolean isModelUseful(ContingencyMatrix cm){  return true;}  }
class C{  public static synchronized void clearCache(ClassLoader loader){  REFLECTION_CACHE.remove(loader);}  }
class C{  @DSComment("device administration") @DSSpec(DSCat.DEVICE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:52.684 -0500",hash_original_method="260DBD46AB1A27EF2CC0A61E058D7901",hash_generated_method="A34F6369DE54268FFED0D29DF5F4D187") public void removeActiveAdmin(ComponentName who){  if (mService != null) {    try {      mService.removeActiveAdmin(who);    } catch (    RemoteException e) {      Log.w(TAG,"Failed talking with device policy service",e);    }  }}  }
class C{  public Interpreter createInterpreter(URL documentURL,boolean svg12){  return new JPythonInterpreter();}  }
class C{  public void wrap(final int streamId,final FrameType type,final ByteBuffer data){  POOL.release(this.directBuffer);  this.directBuffer=POOL.acquireMutableDirectBuffer(FrameHeaderFlyweight.computeFrameHeaderLength(type,0,data.remaining()));  this.length=FrameHeaderFlyweight.encode(this.directBuffer,offset,streamId,0,type,NULL_BYTEBUFFER,data);}  }
class C{  @Override public void onCreate(){  mSyncAdapter=new RcsContactsSyncAdapter(this);}  }
class C{  public void respondChannel(String response){  if (getChannel() == null)   throw new RuntimeException("Event does not contain a channel");  getBot().sendIRC().message(channelSource,response);}  }
class C{  @Deprecated public MoreLikeThisQueryBuilder ignoreLike(String... likeText){  return unlike(likeText);}  }
class C{  public void inputChanged(){  if (controlShown) {    if (isInputSet()) {      objectsInCombo=steppableObjects;      objectSelection.removeAll();      if (!objectsInCombo.isEmpty()) {        clearAllButton.setEnabled(true);        for (        Object object : objectsInCombo) {          objectSelection.add(getTextualString(object));        }        objectSelection.pack(true);        if ((null != selectedObject) && objectsInCombo.contains(selectedObject)) {          objectSelection.select(objectsInCombo.indexOf(selectedObject));        } else {          objectSelection.select(0);        }      } else {        next.setEnabled(false);        previous.setEnabled(false);        clearAllButton.setEnabled(false);        updateInfoBox();      }    } else {      objectSelection.removeAll();      next.setEnabled(false);      previous.setEnabled(false);      updateInfoBox();    }    mainComposite.layout();  }}  }
class C{  public static List toList(Object o) throws PageException {  return toList(o,false);}  }
class C{  public final void testNegateWithContextParameter(){  assertNotNull(Validators.negate(getContext(),Validators.notEmpty("foo")));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 16:08:17.616 -0500",hash_original_method="F40C21ED1C9E2A55531109990EE1E7E8",hash_generated_method="F21956B083655A6724A3A9D7B87558D8") public static String newStringUtf8(byte[] bytes){  return StringUtils.newString(bytes,CharEncoding.UTF_8);}  }
class C{  private void mapVolumes(StorageSystem storage,Map<URI,Integer> volumeMap,Collection<Initiator> initiators,TaskCompleter completer){  try {    ScaleIORestClient scaleIOHandle=scaleIOHandleFactory.using(dbClient).getClientHandle(storage);    for (    Map.Entry<URI,Integer> volMapEntry : volumeMap.entrySet()) {      BlockObject blockObject=BlockObject.fetch(dbClient,volMapEntry.getKey());      String nativeId=blockObject.getNativeId();      for (      Initiator initiator : initiators) {        String port=initiator.getInitiatorPort();        boolean wasMapped=false;        if (initiator.getProtocol().equals(HostInterface.Protocol.ScaleIO.name())) {          wasMapped=mapToSDC(scaleIOHandle,nativeId,port,completer);        } else         if (initiator.getProtocol().equals(HostInterface.Protocol.iSCSI.name())) {          wasMapped=mapToSCSI(scaleIOHandle,nativeId,port,initiator.getLabel(),completer);        } else {          ServiceCoded code=DeviceControllerErrors.scaleio.mapVolumeToClientFailed(nativeId,port,String.format("Unexpected initiator type %s",initiator.getProtocol()));          completer.error(dbClient,code);        }        if (!wasMapped) {          return;        }      }    }    completer.ready(dbClient);  } catch (  Exception e) {    log.error("Encountered an exception",e);    ServiceCoded code=DeviceControllerErrors.scaleio.encounteredAnExceptionFromScaleIOOperation("mapVolume",e.getMessage());    completer.error(dbClient,code);  }}  }
class C{  private static boolean isUserLogout(Context aContext){  boolean retCode=false;  if (null == aContext) {    retCode=true;  } else {    if (null == Matrix.getInstance(aContext.getApplicationContext()).getDefaultSession()) {      retCode=true;    }  }  return retCode;}  }
class C{  @Override public int numberOfClusters() throws Exception {  return m_NumClusters;}  }
class C{  public static DefaultIteratorAdapter adapt(Iterator iterator,ObjectWrapper wrapper){  return new DefaultIteratorAdapter(iterator,wrapper);}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public void pushRewindMark(){  if (m_indexing || m_elemIndexes != null)   throw new java.lang.NullPointerException("Coding error; Don't try to mark/rewind an indexed DTM");  mark_size.push(m_size);  mark_nsdeclset_size.push((m_namespaceDeclSets == null) ? 0 : m_namespaceDeclSets.size());  mark_nsdeclelem_size.push((m_namespaceDeclSetElements == null) ? 0 : m_namespaceDeclSetElements.size());  mark_data_size.push(m_data.size());  mark_char_size.push(m_chars.size());  mark_doq_size.push(m_dataOrQName.size());}  }
class C{  public final void testUnknownWKTTransformation(){  final String wgs84utm35s="PROJCS[\"WGS_1984_UTM_Zone_35S\",GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137,298.257223563]],PRIMEM[\"Greenwich\",0],UNIT[\"Degree\",0.017453292519943295]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",27],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",10000000],UNIT[\"Meter\",1]]";  final String wgs84="GEOGCS[\"WGS84\", DATUM[\"WGS84\", SPHEROID[\"WGS84\", 6378137.0, 298.257223563]], PRIMEM[\"Greenwich\", 0.0], UNIT[\"degree\",0.017453292519943295], AXIS[\"Longitude\",EAST], AXIS[\"Latitude\",NORTH]]";  CoordinateTransformation transformation1=TransformationFactory.getCoordinateTransformation(wgs84utm35s,TransformationFactory.WGS84);  assertNotNull(transformation1);  assertTrue(transformation1 instanceof GeotoolsTransformation);  CoordinateTransformation transformation2=TransformationFactory.getCoordinateTransformation(wgs84utm35s,wgs84);  assertNotNull(transformation2);  assertTrue(transformation2 instanceof GeotoolsTransformation);}  }
class C{  public static void close(Closeable stream){  try {    stream.close();  } catch (  IOException e) {  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowTVPlayer.DXVA_MPEG_MODE_NAMES.clone();}  }
class C{  public static Vec solve(double eps,Matrix A,Vec x,Vec b,Matrix Minv){  if (!A.isSquare() || !Minv.isSquare())   throw new ArithmeticException("A and Minv must be square (symmetric & positive definite) matrix"); else   if (A.rows() != b.length() || A.rows() != x.length())   throw new ArithmeticException("Matrix A dimensions do not agree with x and b"); else   if (A.rows() != Minv.rows() || A.cols() != Minv.cols())   throw new ArithmeticException("Matrix A and Minv do not have the same dimmentions");  int k=0;  Vec r_k=b.subtract(A.multiply(x));  Vec z_k=Minv.multiply(r_k);  Vec p_k=z_k.clone();  Vec Apk;  double rkzk=r_k.dot(z_k);  do {    Apk=A.multiply(p_k);    double alpha=rkzk / p_k.dot(Apk);    x.mutableAdd(alpha,p_k);    r_k.mutableSubtract(alpha,Apk);    if (r_k.dot(r_k) < eps * eps)     return x;    z_k=Minv.multiply(r_k);    double newRkZk=r_k.dot(z_k);    double beta=newRkZk / rkzk;    rkzk=newRkZk;    p_k.mutableMultiply(beta);    p_k.mutableAdd(z_k);  } while (k++ < A.rows());  return x;}  }
class C{  protected void fireAncestorRemoved(JComponent source,int id,Container ancestor,Container ancestorParent){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == AncestorListener.class) {      AncestorEvent ancestorEvent=new AncestorEvent(source,id,ancestor,ancestorParent);      ((AncestorListener)listeners[i + 1]).ancestorRemoved(ancestorEvent);    }  }}  }
class C{  @Deprecated public static String escapeString(String string){  List<String> urls=new ArrayList<>();  Matcher matcher=URL_PATTERN.matcher(string);  while (matcher.find()) {    int matchStart=matcher.start(1);    int matchEnd=matcher.end();    String url=string.substring(matchStart,matchEnd);    urls.add(url);    string=matcher.replaceFirst("@@URL" + (urls.size() - 1) + "@@");  }  string=StringEscapeUtils.escapeJson(string);  for (int i=0; i < urls.size(); i++) {    string=string.replace("@@URL" + i + "@@"," " + urls.get(i));  }  return string;}  }
class C{  public static TypeParameterElement wildcardToTypeParam(final Type.WildcardType wildcard){  final Element typeParamElement;  if (wildcard.bound != null) {    typeParamElement=wildcard.bound.asElement();  } else {    typeParamElement=null;  }  return (TypeParameterElement)typeParamElement;}  }
class C{  public Hamsi256(){  super();}  }
class C{  public double average(){  return lapped.stream().mapToDouble(null).sum() / lapped.size();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.TYPE_VARIABLE_MAPPING__TYPE_VAR:    return typeVar != null;case TypeRefsPackage.TYPE_VARIABLE_MAPPING__TYPE_ARG:  return typeArg != null;}return super.eIsSet(featureID);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttribute;  NodeList elementList;  Element testEmployee;  Attr domesticAttr;  String attrValue;  doc=(Document)load("hc_staff",true);  newAttribute=doc.createAttribute("lang");  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(3);  domesticAttr=testEmployee.setAttributeNode(newAttribute);  attrValue=testEmployee.getAttribute("lang");  assertEquals("elementGetElementEmptyAssert","",attrValue);}  }
class C{  public TextAreaCreationTool(TextHolderFigure prototype){  super(prototype);}  }
class C{  public void putAllMetaData(CrawlDatum other){  for (  Entry<Writable,Writable> e : other.getMetaData().entrySet()) {    getMetaData().put(e.getKey(),e.getValue());  }}  }
class C{  void pushStrings(String a,String b,String c){  mv.visitLdcInsn(a);  mv.visitLdcInsn(b);  mv.visitLdcInsn(c);}  }
class C{  public void testAttributesSumGreaterThan1024RegresssionTest() throws Exception {  StringBuilder value=new StringBuilder();  for (int i=0; i < 2111; i++) {    value.append(i);  }  sw=new StringWriter();  writer=renderKit.createResponseWriter(sw,"text/html","UTF-8");  writer.startElement("input",null);  writer.writeAttribute("onclick",value.toString(),"onclick");  writer.writeAttribute("onclick",value.toString(),"onclick");  writer.endElement("input");  StringBuilder control=new StringBuilder();  control.append("<input onclick=\"").append(value.toString()).append("\" onclick=\"").append(value.toString()).append("\" />");  assertTrue(sw.toString(),control.toString().trim().equals(sw.toString().trim()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:15.862 -0500",hash_original_method="37A5317EE58F7483AB8019E5DEA39C1C",hash_generated_method="2F97F52E294F4141DFC538338F3B1C8A") public void onKeyEvent(KeyEvent event,int nestingLevel){  if (!startEvent(event,nestingLevel,EVENT_TYPE_KEY)) {    return;  }  try {    ensureMetaStateIsNormalized(event.getMetaState());    final int action=event.getAction();    final int deviceId=event.getDeviceId();    final int source=event.getSource();    final int keyCode=event.getKeyCode();switch (action) {case KeyEvent.ACTION_DOWN:{        KeyState state=findKeyState(deviceId,source,keyCode,false);        if (state != null) {          if (state.unhandled) {            state.unhandled=false;          } else           if ((mFlags & FLAG_RAW_DEVICE_INPUT) == 0 && event.getRepeatCount() == 0) {            problem("ACTION_DOWN but key is already down and this event " + "is not a key repeat.");          }        } else {          addKeyState(deviceId,source,keyCode);        }        break;      }case KeyEvent.ACTION_UP:{      KeyState state=findKeyState(deviceId,source,keyCode,true);      if (state == null) {        problem("ACTION_UP but key was not down.");      } else {        state.recycle();      }      break;    }case KeyEvent.ACTION_MULTIPLE:  break;default :problem("Invalid action " + KeyEvent.actionToString(action) + " for key event.");break;}}  finally {finishEvent();}}  }
class C{  public static File loadModPollTool() throws Exception {  String osName=System.getProperty("os.name");  String exeName;  if (osName.matches("(?is)windows.*")) {    osName="win32";    exeName="modpoll.exe";  } else {    osName="linux";    exeName="modpoll";  }  File tmpDir=new File(new File("").getAbsolutePath(),"modpoll-" + System.currentTimeMillis());  tmpDir.mkdirs();  tmpDir.deleteOnExit();  File nativeFile=new File(tmpDir,exeName);  InputStream in=null;  String resourceName=String.format("/com/ghgande/j2mod/modbus/native/%s/%s",osName,exeName);  try {    in=AbstractSerialConnection.class.getResourceAsStream(resourceName);    if (in == null) {      throw new Exception(String.format("Cannot find resource [%s]",resourceName));    }    pipeInputToOutputStream(in,nativeFile,false);    nativeFile.deleteOnExit();    if (!nativeFile.setWritable(true,true)) {      logger.warn("Cannot set modpoll native library to be writable");    }    if (!nativeFile.setReadable(true,false)) {      logger.warn("Cannot set modpoll native library to be readable");    }    if (!nativeFile.setExecutable(true,false)) {      logger.warn("Cannot set modpoll native library to be executable");    }  } catch (  Exception e) {    throw new Exception(String.format("Cannot locate modpoll native library [%s] - %s",exeName,e.getMessage()));  } finally {    if (in != null) {      try {        in.close();      } catch (      IOException e) {        logger.error("Cannot close stream - {}",e.getMessage());      }    }  }  return nativeFile;}  }
class C{  public void obtain(long timeout_ms) throws IOException, InterruptedException, TimeoutException {  Long quit_time=System.currentTimeMillis() + timeout_ms;  if (fileLock != null && fileLock.isValid()) {    return;  }  do {    try {      fileLock=fileToLock.tryLock();      return;    } catch (    OverlappingFileLockException e) {      Thread.sleep(1000);    }  } while (System.currentTimeMillis() < quit_time);  throw new TimeoutException();}  }
class C{  public synchronized void incrementEdge(RVMMethod caller,int bcIndex,RVMMethod callee,float weight){  augmentEdge(caller,bcIndex,callee,weight);}  }
class C{  public boolean isTest(Resource input){  return testResources.contains(input);}  }
class C{  public void change(){  mGenerationId++;}  }
class C{  private void reorderConsist(String message){  Consist consist;  List<String> headerAndLocos=Arrays.asList(message.split("<:>"));  if (headerAndLocos.size() < 2) {    log.warn("reorderConsist missing data in message: " + message);    return;  }  try {    List<String> headerData=Arrays.asList(headerAndLocos.get(0).split("<;>"));    consist=manager.getConsist(stringToDcc(headerData.get(1)));    List<String> locoData=Arrays.asList(headerAndLocos.get(1).split("<;>"));    for (    String loco : locoData) {      ArrayList<DccLocoAddress> conList=consist.getConsistList();      int index=conList.indexOf(stringToDcc(loco));      if (index != -1) {        conList.add(conList.remove(index));      }    }  } catch (  NullPointerException e) {    log.warn("reorderConsist error for message: " + message);    return;  }  writeFile();}  }
class C{  public static ObjectAnimator ofPropertyValuesHolder(Object target,PropertyValuesHolder... values){  ObjectAnimator anim=new ObjectAnimator();  anim.mTarget=target;  anim.setValues(values);  return anim;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text terNode;  Text dayNode;  DocumentFragment docFrag;  Node retval;  Node firstChild;  Node lastChild;  Node refChild=null;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  terNode=doc.createTextNode("ter");  dayNode=doc.createTextNode("day");  docFrag=doc.createDocumentFragment();  retval=docFrag.appendChild(terNode);  retval=docFrag.appendChild(dayNode);  retval=titleAttr.insertBefore(docFrag,refChild);  value=titleAttr.getValue();  assertEquals("attrValue","Yesterday",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","Yesterday",value);  value=retval.getNodeValue();  assertNull("retvalValue",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","Yes",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","day",value);}  }
class C{  public void reset(){  mMetrics.clear();  mBestMetric=0;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.BOOTSTRAP_MODULE__MODULE_SPECIFIER_WITH_WILDCARD:    return MODULE_SPECIFIER_WITH_WILDCARD_EDEFAULT == null ? moduleSpecifierWithWildcard != null : !MODULE_SPECIFIER_WITH_WILDCARD_EDEFAULT.equals(moduleSpecifierWithWildcard);case N4mfPackage.BOOTSTRAP_MODULE__SOURCE_PATH:  return SOURCE_PATH_EDEFAULT == null ? sourcePath != null : !SOURCE_PATH_EDEFAULT.equals(sourcePath);}return super.eIsSet(featureID);}  }
class C{  public int coinChangeIterative(int[] coins,int amount){  if (amount < 1)   return 0;  int[] dp=new int[amount + 1];  int sum=0;  while (++sum <= amount) {    int min=-1;    for (    int coin : coins) {      if (sum >= coin && dp[sum - coin] != -1) {        int temp=dp[sum - coin] + 1;        min=min < 0 ? temp : (temp < min ? temp : min);      }    }    dp[sum]=min;  }  return dp[amount];}  }
class C{  protected void processMouseEvent(MouseEvent e){  if (myInplaceComponent != null && (MouseEvent.MOUSE_PRESSED == e.getID() || MouseEvent.MOUSE_RELEASED == e.getID())) {    finishEditing(true);  }  super.processMouseEvent(e);}  }
class C{  public void removeValue(Value value){  for (  Assignment a : groundings) {    a.removeValues(value);  }}  }
class C{  public Wine withErrorStream(OutputStream errorStream){  this.errorStream=errorStream;  return this;}  }
class C{  public boolean isBeforeFirst(){  return m_isBeforeFirst;}  }
class C{  @SuppressWarnings("all") public boolean isSubregion(){  return getRegion().isSubregion();}  }
class C{  public static <K,V>SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> map){  if (map == null) {    throw new NullPointerException();  }  return new SynchronizedSortedMap<K,V>(map);}  }
class C{  private Label evalContentExpression(HTMLComponent htmlC,String exp,HTMLElement element,CSSElement selector){  if (exp.length() != 0) {    if (exp.startsWith("counter(")) {      exp=exp.substring(8);      int index=exp.indexOf(")");      if (index != -1) {        return new Label("" + htmlC.getCounterValue(exp.substring(0,index)));      }    } else     if (exp.startsWith("attr(")) {      exp=exp.substring(5);      int index=exp.indexOf(")");      if (index != -1) {        String attr=exp.substring(0,index);        String attrValue=element.getAttribute(attr);        return new Label(attrValue == null ? "" : attrValue);      }    } else     if (exp.equals("open-quote")) {      return getQuote(true);    } else     if (exp.equals("close-quote")) {      return getQuote(false);    } else     if (exp.startsWith("url(")) {      String url=getCSSUrl(exp);      Label imgLabel=new Label();      if (htmlC.showImages) {        if (htmlC.getDocumentInfo() != null) {          htmlC.getThreadQueue().add(imgLabel,htmlC.convertURL(url));        } else {          if (DocumentInfo.isAbsoluteURL(url)) {            htmlC.getThreadQueue().add(imgLabel,url);          } else {            if (htmlC.getHTMLCallback() != null) {              htmlC.getHTMLCallback().parsingError(HTMLCallback.ERROR_NO_BASE_URL,selector.getTagName(),selector.getAttributeName(new Integer(CSSElement.CSS_CONTENT)),url,"Ignoring image file referred in a CSS file/segment (" + url + "), since page was set by setBody/setHTML/setDOM so there's no way to access relative URLs");            }          }        }      }      return imgLabel;    }  }  return null;}  }
class C{  public Object readList(AbstractHessianInput in,int length) throws IOException {  if (length >= 0) {    Object[] data=createArray(length);    in.addRef(data);    if (_componentType != null) {      for (int i=0; i < data.length; i++)       data[i]=in.readObject(_componentType);    } else {      for (int i=0; i < data.length; i++)       data[i]=in.readObject();    }    in.readListEnd();    return data;  } else {    ArrayList list=new ArrayList();    in.addRef(list);    if (_componentType != null) {      while (!in.isEnd())       list.add(in.readObject(_componentType));    } else {      while (!in.isEnd())       list.add(in.readObject());    }    in.readListEnd();    Object[] data=createArray(list.size());    for (int i=0; i < data.length; i++)     data[i]=list.get(i);    return data;  }}  }
class C{  public ProgressReporter(){  logger=new ProgressReporterLogger();}  }
class C{  protected RepairableMetaBuilder(final RepairableMeta meta){  this.meta=meta.clone();}  }
class C{  protected void configurePopupMenu(JPopupMenu popupMenu){}  }
class C{  public ProblemException(Problem problem,String message){  super(message);  this.problem=problem;}  }
class C{  public void format(final StringBuffer buffer,final NameValuePair param){  if (buffer == null) {    throw new IllegalArgumentException("String buffer may not be null");  }  if (param == null) {    throw new IllegalArgumentException("Parameter may not be null");  }  buffer.append(param.getName());  final String value=param.getValue();  if (value != null) {    buffer.append("=");    formatValue(buffer,value,alwaysUseQuotes);  }}  }
class C{  private void onSearchPanelFirstView(){  if (mIsSearchPanelFullyPreloaded) {    logSearchPanelLoadDuration(true,0);  } else {    mSearchViewStartTimeNs=System.nanoTime();  }}  }
class C{  public void start(){  this.startTime=System.currentTimeMillis();  this.stopTime=0;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static ELNode.Nodes parse(String expression){  ELParser parser=new ELParser(expression);  while (parser.hasNextChar()) {    String text=parser.skipUntilEL();    if (text.length() > 0) {      parser.expr.add(new ELNode.Text(text));    }    ELNode.Nodes elexpr=parser.parseEL();    if (!elexpr.isEmpty()) {      parser.expr.add(new ELNode.Root(elexpr,parser.isDollarExpr));    }  }  return parser.expr;}  }
class C{  public static int executeUpdate(String sql,int param,boolean ignoreError,String trxName){  return executeUpdate(sql,param,ignoreError,trxName,0);}  }
class C{  public void copyDataToStorage(StorageData storageData,Collection<Long> elementIds,long platformIdent,Collection<AbstractDataProcessor> dataProcessors,boolean autoFinalize) throws IOException, SerializationException, BusinessException {  if (!isStorageExisting(storageData)) {    this.createStorage(storageData);  }  StorageData local=getLocalStorageDataObject(storageData);  if (!isStorageOpen(local)) {    this.openStorage(local);  }  List<DefaultData> toWriteList=storageDataDao.getDataFromIdList(elementIds,platformIdent);  this.writeToStorage(local,toWriteList,dataProcessors,true);  if (autoFinalize) {    this.closeStorage(local);  }  updateExistingStorageSize(local);}  }
class C{  protected void startBridgeServer(int port,boolean notifyBySubscription) throws IOException {  Cache cache=getCache();  CacheServer server=cache.addCacheServer();  server.setPort(port);  server.start();  bridgeServerPort=server.getPort();}  }
class C{  public void removeTaskEventListener(HeadlessJsTaskEventListener listener){  mHeadlessJsTaskEventListeners.remove(listener);}  }
class C{  public static MySQLPacket readPacket(InputStream in,boolean dropLargePackets){  try {    return mysqlReadPacket(in,dropLargePackets);  } catch (  SocketTimeoutException e) {    logger.warn("Socket timeout expired, closing connection");  }catch (  IOException e) {    logger.error("I/O error while reading from socket");  }  return null;}  }
class C{  public RelationNotification(String notifType,Object sourceObj,long sequence,long timeStamp,String message,String id,String typeName,ObjectName objectName,String name,List<ObjectName> newValue,List<ObjectName> oldValue) throws IllegalArgumentException {  super(notifType,sourceObj,sequence,timeStamp,message);  if (!isValidBasicStrict(notifType,sourceObj,id,typeName) || !isValidUpdate(notifType,name,newValue,oldValue)) {    throw new IllegalArgumentException("Invalid parameter.");  }  relationId=id;  relationTypeName=typeName;  relationObjName=safeGetObjectName(objectName);  roleName=name;  oldRoleValue=safeGetObjectNameList(oldValue);  newRoleValue=safeGetObjectNameList(newValue);}  }
class C{  private boolean isPublicOrProtected(Element element){  return element.getModifiers().contains(Modifier.PUBLIC) || element.getModifiers().contains(Modifier.PROTECTED);}  }
class C{  protected BreakStatementImpl(){  super();}  }
class C{  public JsonObjectRequest(int method,String url,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,null,listener,errorListener);}  }
class C{  public DriverTask restoreFromClone(List<VolumeClone> clones){  LOG.info("Restore from clone not currently supported.");  DriverTask task=new DellSCDriverTask("restoreVolumeClone");  task.setStatus(TaskStatus.FAILED);  task.setMessage("Restore from clone not currently supported.");  return null;}  }
class C{  public int tableLength(){  return ByteArray.readU16bit(get(),0);}  }
class C{  public static void init(ApiClient apiClient){  mInstance=apiClient;}  }
class C{  private CDebuggerPainter(){}  }
class C{  public static final boolean isOSX(){  return m_osx;}  }
class C{  public void hasBody(boolean hasBody){  this.hasBody=hasBody;}  }
class C{  @Override public void stop(){  if (stopping.compareAndSet(false,true)) {    if (log.isDebugEnabled())     log.debug("Stopping write-behind store for cache '" + cacheName + '\'');    wakeUp();    boolean graceful=true;    for (    GridWorker worker : flushThreads)     graceful&=U.join(worker,log);    if (!graceful)     log.warning("Shutdown was aborted");  }}  }
class C{  public static Iterable<Element> toElementIterable(NodeList nodeList){  List<Element> elements=new ArrayList<>(nodeList.getLength());  for (int i=0; i < nodeList.getLength(); i++) {    elements.add((Element)nodeList.item(i));  }  return elements;}  }
class C{  private void logGraphs(String message,List<? extends Graph> graphs){  if (message != null) {    TetradLogger.getInstance().log("graph",message);  }  for (  Graph graph : graphs) {    TetradLogger.getInstance().log("graph",graph.toString());  }}  }
class C{  public static <T>AssociationNotNullPredicate<T> isNotNull(Association<T> association){  return new AssociationNotNullPredicate<>(association(association));}  }
class C{  public void bindBitmap(final String uri,final ImageView imageView){  bindBitmap(uri,imageView,0,0);}  }
class C{  private int processPollFds() throws IOException {  if (pollFds.get(0).revents == POLLIN) {    byte[] buffer=new byte[8];    while (IoBridge.read(wakeupIn,buffer,0,1) > 0) {    }  }  int readyKeyCount=0;  for (int i=1; i < pollFds.size(); ++i) {    StructPollfd pollFd=pollFds.get(i);    if (pollFd.revents == 0) {      continue;    }    if (pollFd.fd == null) {      break;    }    SelectionKeyImpl key=(SelectionKeyImpl)pollFd.userData;    pollFd.fd=null;    pollFd.userData=null;    int ops=key.interestOpsNoCheck();    int selectedOps=0;    if ((pollFd.revents & POLLHUP) != 0) {      selectedOps|=ops;    }    if ((pollFd.revents & POLLIN) != 0) {      selectedOps|=ops & (OP_ACCEPT | OP_READ);    }    if ((pollFd.revents & POLLOUT) != 0) {      if (key.isConnected()) {        selectedOps|=ops & OP_WRITE;      } else {        selectedOps|=ops & OP_CONNECT;      }    }    if (selectedOps != 0) {      boolean wasSelected=mutableSelectedKeys.contains(key);      if (wasSelected && key.readyOps() != selectedOps) {        key.setReadyOps(key.readyOps() | selectedOps);        ++readyKeyCount;      } else       if (!wasSelected) {        key.setReadyOps(selectedOps);        mutableSelectedKeys.add(key);        ++readyKeyCount;      }    }  }  return readyKeyCount;}  }
class C{  private void waitForAudioHandlerCreation(){synchronized (this) {    while (mAudioHandler == null) {      try {        wait();      } catch (      InterruptedException e) {        Log.e(TAG,"Interrupted while waiting on volume handler.");      }    }  }}  }
class C{  private void displayCalendar(){  KeyNamePair pp=(KeyNamePair)fieldResource.getSelectedItem();  if (pp == null)   return;  int S_Resource_ID=pp.getKey();  m_mAssignment.setS_Resource_ID(S_Resource_ID);  Timestamp date=fieldDate.getTimestamp();  int index=timePane.getSelectedIndex();  log.config("Index=" + index + ", ID="+ S_Resource_ID+ " - "+ date);  m_loading=true;  if (index == 0)   daySchedule.recreate(S_Resource_ID,date); else   if (index == 1)   weekSchedule.recreate(S_Resource_ID,date); else   monthSchedule.recreate(S_Resource_ID,date);  m_loading=false;  repaint();}  }
class C{  private void validateNoExpansionWithMirroringOrFail(VirtualPool virtualPool,BlockVirtualPoolUpdateParam updateParam){  if (updateParam.getProtection() != null) {    if ((updateParam.getProtection().enablesContinuousCopies() && updateParam.allowsExpansion()) || (updateParam.getProtection().enablesContinuousCopies() && VirtualPool.vPoolAllowsExpansion(virtualPool) && (updateParam.getExpandable() == null || updateParam.allowsExpansion()))) {      throwExpandableWithMirroringException(virtualPool);    }  }}  }
class C{  public StatementBuilder append(char c){  builder.append(c);  return this;}  }
class C{  @Override public boolean shouldDelayChildPressedState(){  return false;}  }
class C{  public void expireUntil(K key,int maxDelay,TimeUnit timeUnit){  AccessTimeObjectHolder<V> holder=this.objects.get(key);  if (holder == null) {    return;  }  holder.setExpireUntil(maxDelay,timeUnit,random);}  }
class C{  public Parameters createParameters(){  ParametersImpl parameters=new ParametersImpl();  return parameters;}  }
class C{  public static <T>T nextItem(List<T> list){  return list.get(PRNG.nextInt(list.size()));}  }
class C{  public boolean isUnconditionallyDereferenced(ValueNumber vn){  return valueNumbersUnconditionallyDereferenced.get(vn.getNumber());}  }
class C{  @Override public JapaneseDate date(int prolepticYear,int month,int dayOfMonth){  return new JapaneseDate(LocalDate.of(prolepticYear,month,dayOfMonth));}  }
class C{  private void _parseClassName(String className){  m_entirePackageName=_extractEntirePackageName(className);  m_packageName=_extractPackageName(className);  m_entireClassName=_extractEntireClassName(className);  m_className=_extractClassName(className);}  }
class C{  @Override public boolean needsAnotherIteration() throws AdeException {  return !m_trained;}  }
class C{  public _DeleteOptions(final String[] flagStrings){  super(flagStrings);}  }
class C{  public void unread(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (len > pos) {    throw new IOException("Push back buffer is full");  }  pos-=len;  System.arraycopy(b,off,buf,pos,len);}  }
class C{  public static final boolean isSameApp(int uid1,int uid2){  return getAppId(uid1) == getAppId(uid2);}  }
class C{  @Override public String toString(){  return " at character " + pos + " of "+ in;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static void taskStarted(ProgressThread task){  for (  ProgressThreadStateListener l : listener.getListeners(ProgressThreadStateListener.class)) {    l.progressThreadStarted(task);  }}  }
class C{  public BollingerBandsItem(RegularTimePeriod period,BigDecimal bollingerBands){  super(period,new BollingerBands(bollingerBands));}  }
class C{  public static boolean isEmpty(CharSequence text){  return text == null || text.length() == 0;}  }
class C{  public static int isEquals(String[] compareStrings,String text){  for (int i=0; i < compareStrings.length; i++) {    if (text.equals(compareStrings[i]))     return i;  }  return -1;}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public static int launchDocumentInstance(Activity activity,boolean incognito,AsyncTabCreationParams asyncParams){  assert asyncParams != null;  final int launchMode=asyncParams.getDocumentLaunchMode();  final int intentSource=asyncParams.getDocumentStartedBy();  final LoadUrlParams loadUrlParams=asyncParams.getLoadUrlParams();  if (loadUrlParams.getUrl() == null && asyncParams.getWebContents() != null) {    loadUrlParams.setUrl(asyncParams.getWebContents().getUrl());  }  if (launchMode == LAUNCH_MODE_RETARGET) {    assert asyncParams.getWebContents() == null;    assert loadUrlParams.getPostData() == null;    int relaunchedId=relaunchTask(incognito,loadUrlParams.getUrl());    if (relaunchedId != Tab.INVALID_TAB_ID)     return relaunchedId;  }  int parentId=activity != null && (launchMode == LAUNCH_MODE_AFFILIATED || intentSource == DocumentMetricIds.STARTED_BY_WINDOW_OPEN || intentSource == DocumentMetricIds.STARTED_BY_CONTEXTUAL_SEARCH) ? ActivityDelegate.getTabIdFromIntent(activity.getIntent()) : Tab.INVALID_TAB_ID;  Context context=ApplicationStatus.getApplicationContext();  Intent intent=createLaunchIntent(context,null,loadUrlParams.getUrl(),incognito,parentId);  setRecentsFlagsOnIntent(intent,Intent.FLAG_ACTIVITY_NEW_DOCUMENT,incognito);  intent.putExtra(IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB,incognito);  intent.putExtra(IntentHandler.EXTRA_PAGE_TRANSITION_TYPE,loadUrlParams.getTransitionType());  intent.putExtra(IntentHandler.EXTRA_STARTED_BY,intentSource);  if (activity != null && activity.getIntent() != null) {    intent.putExtra(IntentHandler.EXTRA_PARENT_INTENT,activity.getIntent());  }  intent.putExtra(EXTRA_LAUNCH_MODE,launchMode);  IntentHandler.addTrustedIntentExtras(intent,context);  boolean affiliated=launchMode == LAUNCH_MODE_AFFILIATED;  if (activity == null) {    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    fireDocumentIntent(context,intent,incognito,affiliated,asyncParams);  } else {    fireDocumentIntent(activity,intent,incognito,affiliated,asyncParams);  }  return ActivityDelegate.getTabIdFromIntent(intent);}  }
class C{  public static Bitmap loadBitmapOptimized(String fileName,int limit) throws ImageLoadException {  return loadBitmapOptimized(new FileSource(fileName),limit);}  }
class C{  public List annotations(){  if (this.annotations == null) {    unsupportedIn2();  }  return this.annotations;}  }
class C{  private static byte[] convertECDSAASN1toXMLDSIG(byte[] binaries){  ASN1InputStream is=null;  try {    is=new ASN1InputStream(binaries);    ASN1Sequence seq=(ASN1Sequence)is.readObject();    if (seq.size() != 2) {      throw new IllegalArgumentException("ASN1 Sequence size should be 2 !");    }    ASN1Integer r=(ASN1Integer)seq.getObjectAt(0);    ASN1Integer s=(ASN1Integer)seq.getObjectAt(1);    byte[] rBytes=r.getValue().toByteArray();    int rSize=rBytes.length;    byte[] sBytes=s.getValue().toByteArray();    int sSize=sBytes.length;    int max=Math.max(rSize,sSize);    ByteArrayOutputStream buffer=new ByteArrayOutputStream(max * 2);    if (sSize > rSize) {      buffer.write(0x00);    }    buffer.write(rBytes);    if (rSize > sSize) {      buffer.write(0x00);    }    buffer.write(sBytes);    return buffer.toByteArray();  } catch (  Exception e) {    throw new DSSException("Unable to convert to xmlDsig : " + e.getMessage(),e);  } finally {    IOUtils.closeQuietly(is);  }}  }
class C{  public static CView createView(final AbstractSQLProvider provider,final INaviProject project,final INaviView view,final String name,final String description) throws CouldntSaveDataException {  Preconditions.checkNotNull(project,"Error: Project argument can not be null");  Preconditions.checkNotNull(view,"IE02273: View argument can not be null");  Preconditions.checkNotNull(name,"IE02274: Name argument can not be null");  Preconditions.checkState(view.inSameDatabase(provider),"Error: View is not part of this database");  return createView(provider,project.getConfiguration().getId(),view,name,description,CTableNames.PROJECTS_TABLE,CTableNames.PROJECT_VIEWS_TABLE,new CProjectViewGenerator(provider,project));}  }
class C{  protected Matrix secureProduct(Matrix a){  return new Matrix(productComponents(a));}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  }  finally {    try {      if (bos != null) {        bos.close();      }    } catch (    Exception ignored) {    }  }}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  public boolean unlockIt(){  log.info(toString());  setProcessing(false);  return true;}  }
class C{  private static byte[] unwrapEncoded(GTSWrapper wrapper){  if (!wrapper.isCompressed()) {    return wrapper.getEncoded();  }  ByteArrayOutputStream baos=new ByteArrayOutputStream();  byte[] bytes=wrapper.getEncoded();  int pass=wrapper.getCompressionPasses();  while (pass > 0) {    ByteArrayInputStream in=new ByteArrayInputStream(bytes);    baos.reset();    try {      GZIPInputStream gzis=new GZIPInputStream(in);      byte[] buf=new byte[1024];      while (true) {        int len=gzis.read(buf);        if (len < 0) {          break;        }        baos.write(buf,0,len);      }      gzis.close();    } catch (    IOException ioe) {      throw new RuntimeException("Invalid compressed content.");    }    bytes=baos.toByteArray();    pass--;  }  return bytes;}  }
class C{  private void endMBeansDescriptors(){  pw.println("</HTML>");}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public void handleBoundary(OMGraphic omg,OMAction action){  boundaries.doAction(omg,action);  boundsModel.clear();  int count=1;  for (  OMGraphic omr : boundaries) {    if (omr instanceof OMRect) {      String bounding_rectangle=i18n.get(ZoomLevelMakerFace.class,"bounding_rectangle","Bounding Rectangle");      boundsModel.addElement(new BoundsObject((OMRect)omr,bounding_rectangle + " " + (count++)));    }  }}  }
class C{  public T caseRangeConstraint(RangeConstraint object){  return null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.SHIFT_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)null);  return;case ExpressionsPackage.SHIFT_EXPRESSION__OPERATOR:setOperator(OPERATOR_EDEFAULT);return;case ExpressionsPackage.SHIFT_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)null);return;}super.eUnset(featureID);}  }
class C{  private void queryConvertIcons(OBlock block){  if (block == null) {    return;  }  java.util.List<Positionable> list=_circuitMap.get(block);  if (list != null && list.size() > 0) {    int result=JOptionPane.showConfirmDialog(_editor,Bundle.getMessage("notIndicatorIcon"),Bundle.getMessage("incompleteCircuit"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);    if (result == JOptionPane.YES_OPTION) {      convertIcons(_circuitMap.get(block));    }  } else {    JOptionPane.showMessageDialog(_editor,Bundle.getMessage("needIcons",block.getDisplayName(),Bundle.getMessage("editCircuitItem")),Bundle.getMessage("noIcons"),JOptionPane.INFORMATION_MESSAGE);  }}  }
class C{  public static Set intersection(Set x,Set y){  Set result=new Set();  if (x.size() < y.size()) {    result=(Set)x.clone();    result.intersection(y);  } else {    result=(Set)x.clone();    result.intersection(y);  }  return result;}  }
class C{  public String[] list() throws RemoteException {  String[] names;synchronized (bindings) {    int i=bindings.size();    names=new String[i];    Enumeration<String> enum_=bindings.keys();    while ((--i) >= 0)     names[i]=enum_.nextElement();  }  return names;}  }
class C{  @Override @NotNull public Set<VirtualFile> untrackedFiles(@NotNull Project project,@NotNull VirtualFile root,@Nullable Collection<VirtualFile> files) throws VcsException {  final Set<VirtualFile> untrackedFiles=new HashSet<VirtualFile>();  if (files == null) {    untrackedFiles.addAll(untrackedFilesNoChunk(project,root,null));  } else {    for (    List<String> relativePaths : VcsFileUtil.chunkFiles(root,files)) {      untrackedFiles.addAll(untrackedFilesNoChunk(project,root,relativePaths));    }  }  return untrackedFiles;}  }
class C{  @Override public void removeCountryListener(ICountryListener listener) throws RemoteException {  if (!mSystemReady) {    throw new RemoteException();  }  removeListener(listener.asBinder());}  }
class C{  public WriteToLocalIndexThread(Segment segment,Collection<SolrInputDocument> docs){  super("WriteToLocalIndexThread");  this.segment=segment;  this.docs=docs;}  }
class C{  public BarChartComponent(final String name,final BarChartModel model){  super(name);  this.model=model;  init();  addListener();}  }
class C{  public SaaSSystemException(Throwable arg0){  super(arg0);  genId();  this.setCauseStackTrace(arg0);}  }
class C{  public boolean profile(){  return soot.PhaseOptions.getBoolean(options,"profile");}  }
class C{  public void addObservations(int states[][],int j){  int timeSteps=states.length;  if (timeSteps - startObservationTime <= 0) {    return;  }  int variables=states[0].length;  if (periodicBoundaryConditions) {    observations+=(timeSteps - startObservationTime) * variables;  } else {    observations+=(timeSteps - startObservationTime) * (variables - Math.abs(j));  }  int[][] pastVal=new int[variables][destEmbeddingDelay];  for (int c=0; c < variables; c++) {    for (int d=0; d < destEmbeddingDelay; d++) {      pastVal[c][d]=0;      for (int p=0; p < k - 1; p++) {        pastVal[c][d]+=states[startObservationTime + d - 1 - (k - 1) * destEmbeddingDelay + p * destEmbeddingDelay][c];        pastVal[c][d]*=base;      }    }  }  int[][] sourcePastVal=new int[variables][sourceEmbeddingDelay];  for (int c=0; c < variables; c++) {    int sourceVariable=c - j;    if ((sourceVariable < 0) || (sourceVariable >= variables)) {      if (periodicBoundaryConditions) {        sourceVariable=(sourceVariable + variables) % variables;      } else {        continue;      }    }    for (int d=0; d < sourceEmbeddingDelay; d++) {      sourcePastVal[c][d]=0;      for (int p=0; p < sourceHistoryEmbedLength - 1; p++) {        sourcePastVal[c][d]+=states[startObservationTime + d - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay + p * sourceEmbeddingDelay][sourceVariable];        sourcePastVal[c][d]*=base;      }    }  }  int destVal, destEmbeddingPhase=0, sourceEmbeddingPhase=0;  for (int r=startObservationTime; r < timeSteps; r++) {    for (int c=0; c < variables; c++) {      int sourceVariable=c - j;      if ((sourceVariable < 0) || (sourceVariable >= variables)) {        if (periodicBoundaryConditions) {          sourceVariable=(sourceVariable + variables) % variables;        } else {          continue;        }      }      if (k > 0) {        pastVal[c][destEmbeddingPhase]+=states[r - 1][c];      }      sourcePastVal[c][sourceEmbeddingPhase]+=states[r - delay][sourceVariable];      destVal=states[r][c];      int thisPastVal=pastVal[c][destEmbeddingPhase];      int thisSourceVal=sourcePastVal[c][sourceEmbeddingPhase];      sourceNextPastCount[thisSourceVal][destVal][thisPastVal]++;      sourcePastCount[thisSourceVal][thisPastVal]++;      nextPastCount[destVal][thisPastVal]++;      pastCount[thisPastVal]++;      nextCount[destVal]++;      if (k > 0) {        pastVal[c][destEmbeddingPhase]-=maxShiftedValue[states[r - 1 - (k - 1) * destEmbeddingDelay][c]];        pastVal[c][destEmbeddingPhase]*=base;      }      sourcePastVal[c][sourceEmbeddingPhase]-=maxShiftedSourceValue[states[r - delay - (sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay][sourceVariable]];      sourcePastVal[c][sourceEmbeddingPhase]*=base;    }    destEmbeddingPhase=(destEmbeddingPhase + 1) % destEmbeddingDelay;    sourceEmbeddingPhase=(sourceEmbeddingPhase + 1) % sourceEmbeddingDelay;  }}  }
class C{  public AnnotationDrawer(final AnnotationsModel model,final ProcessRendererModel rendererModel){  this.model=model;  this.rendererModel=rendererModel;  this.displayCache=new HashMap<>();  this.cachedID=new HashMap<>();  pane=new JEditorPane("text/html","");  pane.setBorder(null);  pane.setOpaque(false);}  }
class C{  private String _serialize(Object object,Set<Object> done) throws ConverterException {  String rtn;  deep++;  if (object == null) {    rtn=goIn() + "<null/>";    deep--;    return rtn;  }  if (object instanceof String) {    rtn=goIn() + "<string>" + XMLUtil.escapeXMLString(object.toString())+ "</string>";    deep--;    return rtn;  }  if (object instanceof Number) {    rtn=goIn() + "<number>" + ((Number)object).doubleValue()+ "</number>";    deep--;    return rtn;  }  if (object instanceof Boolean) {    rtn=goIn() + "<boolean value=" + del+ ((Boolean)object).booleanValue()+ del+ "/>";    deep--;    return rtn;  }  if (object instanceof DateTime) {    rtn=_serializeDateTime((DateTime)object);    deep--;    return rtn;  }  if (object instanceof Date) {    rtn=_serializeDate((Date)object);    deep--;    return rtn;  }  if (Decision.isCastableToBinary(object,false)) {    rtn=_serializeBinary(Caster.toBinary(object,null));    deep--;    return rtn;  }  Object raw=LazyConverter.toRaw(object);  if (done.contains(raw)) {    rtn=goIn() + "<null/>";    deep--;    return rtn;  }  done.add(raw);  try {    if (object instanceof Component) {      rtn=_serializeComponent((Component)object,done);      deep--;      return rtn;    }    if (object instanceof Struct) {      rtn=_serializeStruct((Struct)object,done);      deep--;      return rtn;    }    if (object instanceof Map) {      rtn=_serializeMap((Map)object,done);      deep--;      return rtn;    }    if (object instanceof Array) {      rtn=_serializeArray((Array)object,done);      deep--;      return rtn;    }    if (object instanceof List) {      rtn=_serializeList((List)object,done);      deep--;      return rtn;    }    if (object instanceof Query) {      rtn=_serializeQuery((Query)object,done);      deep--;      return rtn;    }  }  finally {    done.remove(raw);  }  rtn="<struct type=" + del + "L"+ object.getClass().getName()+ ";"+ del+ "></struct>";  deep--;  return rtn;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.PARAMETERS;}  }
class C{  public void lockSegmentAtTheSameOffsetIfAny(final int number){  if (number == -1) {    return;  }  final RangeMarker current=mySegments.get(number);  int offset=current.getStartOffset();  for (int i=0; i < mySegments.size(); i++) {    if (i != number) {      final RangeMarker segment=mySegments.get(i);      final int startOffset2=segment.getStartOffset();      if (offset == startOffset2) {        segment.setGreedyToLeft(false);      }    }  }}  }
class C{  public Decimal add(Decimal decimal){  assertDefined();  if (null == m_value) {    if (null == decimal.getBigDecimalValue()) {      return new Decimal(SCALE);    } else {      return new Decimal(decimal.getBigDecimalValue(),SCALE);    }  }  BigDecimal value=m_value.add(decimal.getBigDecimalValue());  return new Decimal(value,SCALE);}  }
class C{  void chooseSplitPoint(int minEntries){  splitPoint=size;  double minOverlap=Double.POSITIVE_INFINITY;  double volume=Double.POSITIVE_INFINITY;  bestSorting=null;  assert (size - 2 * minEntries >= 0) : "Cannot split nodes (" + size + " < 2*"+ minEntries+ ")";{    ModifiableHyperBoundingBox mbr1=mbr(minSorting,0,minEntries - 1);    for (int i=0; i <= size - 2 * minEntries; i++) {      mbr1.extend(getter.get(entries,minSorting[minEntries + i - 1].second));      HyperBoundingBox mbr2=mbr(minSorting,minEntries + i,size);      double currentOverlap=SpatialUtil.relativeOverlap(mbr1,mbr2);      if (currentOverlap <= minOverlap) {        double vol=SpatialUtil.volume(mbr1) + SpatialUtil.volume(mbr2);        if (currentOverlap < minOverlap || vol < volume) {          minOverlap=currentOverlap;          volume=vol;          splitPoint=minEntries + i;          bestSorting=minSorting;        }      }    }  }{    ModifiableHyperBoundingBox mbr1=mbr(maxSorting,0,minEntries - 1);    for (int i=0; i <= size - 2 * minEntries; i++) {      mbr1.extend(getter.get(entries,maxSorting[minEntries + i - 1].second));      HyperBoundingBox mbr2=mbr(maxSorting,minEntries + i,size);      double currentOverlap=SpatialUtil.relativeOverlap(mbr1,mbr2);      if (currentOverlap <= minOverlap) {        double vol=SpatialUtil.volume(mbr1) + SpatialUtil.volume(mbr2);        if (currentOverlap < minOverlap || vol < volume) {          minOverlap=currentOverlap;          volume=vol;          splitPoint=minEntries + i;          bestSorting=maxSorting;        }      }    }  }  assert (splitPoint < size) : "No split found? Volume outside of double precision?";}  }
class C{  public int remove(int i){  boundsCheck(i);  if (i >= size)   throw new ArrayIndexOutOfBoundsException("LBJ: IVector: Can't remove element at index " + i + " as it is larger than the size ("+ size+ ")");  int result=vector[i];  for (int j=i + 1; j < size; ++j)   vector[j - 1]=vector[j];  --size;  return result;}  }
class C{  @Override protected void onResume(){  super.onResume();  PurchasingManager.initiateGetUserIdRequest();}  }
class C{  private static byte[] wrapCalculatedValue(byte[] data){  int dataLen=data.length;  data=ByteUtil.copyOf(data,0,dataLen + CALC_EXTRA_DATA_LEN,CALC_DATA_OFFSET);  PageChannel.wrap(data).putInt(CALC_DATA_LEN_OFFSET,dataLen);  return data;}  }
class C{  public void validate(){  if (!((bufferId != BUFFER_ID_NONE) ^ (packetData != null && packetData.length > 0))) {    throw new IllegalStateException("OFPacketOut must have exactly one of (bufferId, packetData) set (not one, not both)");  }}  }
class C{  public String formatAsString(boolean reverse){  BasicBlock source=getSource();  BasicBlock target=getTarget();  StringBuilder buf=new StringBuilder();  buf.append(reverse ? "REVERSE_EDGE(" : "EDGE(");  buf.append(getLabel());  buf.append(") type ");  buf.append(edgeTypeToString(type));  buf.append(" from block ");  buf.append(reverse ? target.getLabel() : source.getLabel());  buf.append(" to block ");  buf.append(reverse ? source.getLabel() : target.getLabel());  InstructionHandle sourceInstruction=source.getLastInstruction();  InstructionHandle targetInstruction=target.getFirstInstruction();  String exInfo=" -> ";  if (targetInstruction == null && target.isExceptionThrower()) {    targetInstruction=target.getExceptionThrower();    exInfo=" => ";  }  if (sourceInstruction != null && targetInstruction != null) {    buf.append(" [bytecode ");    buf.append(sourceInstruction.getPosition());    buf.append(exInfo);    buf.append(targetInstruction.getPosition());    buf.append(']');  } else   if (source.isExceptionThrower()) {    if (type == FALL_THROUGH_EDGE) {      buf.append(" [successful check]");    } else {      buf.append(" [failed check for ");      buf.append(source.getExceptionThrower().getPosition());      if (targetInstruction != null) {        buf.append(" to ");        buf.append(targetInstruction.getPosition());      }      buf.append(']');    }  }  return buf.toString();}  }
class C{  public boolean isResponseFromTargetHost(){  return this.responseFromTargetHost;}  }
class C{  public boolean delete(File f){  if (f.isDirectory()) {    for (    File child : f.listFiles()) {      if (!delete(child)) {        return (false);      }    }  }  boolean result=f.delete();  MediaScannerConnection.scanFile(this,new String[]{f.getAbsolutePath()},null,null);  return (result);}  }
class C{  public void retweet(Status tweet){  if (tweet.isRetweet()) {    tweet=tweet.getRetweetedStatus();  }  if (tweet.getUser().isProtected()) {    log("Cannot retweet protected user",Level.INFO,tweet.getUser().getScreenName(),tweet.getText());    return;  }  this.retweets++;  log("Retweeting:",Level.INFO,tweet.getText(),tweet.getUser().getScreenName());  try {    if (getConnection() == null) {      connect();    }    getConnection().retweetStatus(tweet.getId());  } catch (  Exception exception) {    if (exception.getMessage() != null && exception.getMessage().contains("authorized") && exception.getMessage().contains("endpoint")) {      this.errors=this.errors + 5;    }    this.errors++;    log(exception.toString(),Level.WARNING,tweet.getText());  }}  }
class C{  public void sameFrame(int pos,int offsetDelta) throws BadBytecode {}  }
class C{  public Matrix computeDerivatives(Matrix loghyper,Matrix X,int index){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  if (index > numParameters() - 1)   throw new IllegalArgumentException("Wrong hyperparameters index " + index + " it should be smaller or equal to "+ (numParameters() - 1));  final double ell=Math.exp(loghyper.get(0,0));  final double em2=1 / (ell * ell);  final double oneplusem2=1 + em2;  final double twosf2=2 * Math.exp(2 * loghyper.get(1,0));  final int m=X.getRowDimension();  final int n=X.getColumnDimension();  double[][] x=X.getArray();  if (q == null || q.length != m || q[0].length != m) {    q=new double[m][m];    for (int i=0; i < m; i++) {      for (int j=0; j < m; j++) {        double t=0;        for (int k=0; k < n; k++) {          t+=x[i][k] * x[j][k] * em2;        }        q[i][j]=t;      }    }  }  double[] dq=new double[m];  for (int i=0; i < m; i++) {    dq[i]=Math.sqrt(oneplusem2 + q[i][i]);  }  if (k == null || k.length != m || k[0].length != m) {    k=new double[m][m];    for (int i=0; i < m; i++) {      final double dqi=dq[i];      for (int j=0; j < m; j++) {        final double t=(em2 + q[i][j]) / (dqi * dq[j]);        k[i][j]=t;      }    }  }  Matrix A;  if (index == 0) {    for (int i=0; i < m; i++) {      dq[i]=oneplusem2 + q[i][i];    }    double[] v=new double[m];    for (int i=0; i < m; i++) {      double t=0;      for (int j=0; j < n; j++) {        final double xij=x[i][j];        t+=xij * xij * em2;      }      v[i]=(t + em2) / (dq[i]);    }    for (int i=0; i < m; i++) {      final double vi=v[i];      for (int j=0; j < m; j++) {        double t=(q[i][j] + em2) / (Math.sqrt(dq[i]) * Math.sqrt(dq[j]));        final double kij=k[i][j];        q[i][j]=-twosf2 * ((t - (0.5 * kij * (vi + v[j]))) / Math.sqrt(1 - kij * kij));      }    }    A=new Matrix(q);    q=null;  } else {    for (int i=0; i < m; i++) {      for (int j=0; j < m; j++) {        k[i][j]=Math.asin(k[i][j]) * twosf2;      }    }    A=new Matrix(k);    k=null;  }  return A;}  }
class C{  public NceConsistRosterEntry(org.jdom2.Element e){  if (log.isDebugEnabled()) {    log.debug("ctor from element " + e);  }  org.jdom2.Attribute a;  if ((a=e.getAttribute("id")) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in consist element when reading ConsistRoster");  }  if ((a=e.getAttribute("consistNumber")) != null) {    _consistNumber=a.getValue();  }  if ((a=e.getAttribute("roadName")) != null) {    _roadName=a.getValue();  }  if ((a=e.getAttribute("roadNumber")) != null) {    _roadNumber=a.getValue();  }  if ((a=e.getAttribute("model")) != null) {    _model=a.getValue();  }  if ((a=e.getAttribute("comment")) != null) {    _comment=a.getValue();  }  List<Element> elementList=e.getChildren("loco");  for (int i=0; i < elementList.size(); i++) {    String locoName="";    String locoMidNumber="";    if ((a=((elementList.get(i))).getAttribute("locoName")) != null) {      locoName=a.getValue();    }    if ((a=((elementList.get(i))).getAttribute("locoMidNumber")) != null) {      locoMidNumber=a.getValue();    }    if (locoName.equals("lead")) {      if ((a=((elementList.get(i))).getAttribute("dccLocoAddress")) != null) {        _loco1DccAddress=a.getValue();      }      if ((a=((elementList.get(i))).getAttribute("longAddress")) != null) {        setLoco1LongAddress(a.getValue().equals("yes"));      }      if ((a=((elementList.get(i))).getAttribute("locoDir")) != null) {        _loco1Direction=(a.getValue());      }    }    if (locoName.equals("rear")) {      if ((a=((elementList.get(i))).getAttribute("dccLocoAddress")) != null) {        _loco2DccAddress=a.getValue();      }      if ((a=((elementList.get(i))).getAttribute("longAddress")) != null) {        setLoco2LongAddress(a.getValue().equals("yes"));      }      if ((a=((elementList.get(i))).getAttribute("locoDir")) != null) {        _loco2Direction=(a.getValue());      }    }    if (locoName.equals("mid") && locoMidNumber.equals("1")) {      if ((a=((elementList.get(i))).getAttribute("dccLocoAddress")) != null) {        _loco3DccAddress=a.getValue();      }      if ((a=((elementList.get(i))).getAttribute("longAddress")) != null) {        setLoco3LongAddress(a.getValue().equals("yes"));      }      if ((a=((elementList.get(i))).getAttribute("locoDir")) != null) {        _loco3Direction=(a.getValue());      }    }    if (locoName.equals("mid") && locoMidNumber.equals("2")) {      if ((a=((elementList.get(i))).getAttribute("dccLocoAddress")) != null) {        _loco4DccAddress=a.getValue();      }      if ((a=((elementList.get(i))).getAttribute("longAddress")) != null) {        setLoco4LongAddress(a.getValue().equals("yes"));      }      if ((a=((elementList.get(i))).getAttribute("locoDir")) != null) {        _loco4Direction=(a.getValue());      }    }    if (locoName.equals("mid") && locoMidNumber.equals("3")) {      if ((a=((elementList.get(i))).getAttribute("dccLocoAddress")) != null) {        _loco5DccAddress=a.getValue();      }      if ((a=((elementList.get(i))).getAttribute("longAddress")) != null) {        setLoco5LongAddress(a.getValue().equals("yes"));      }      if ((a=((elementList.get(i))).getAttribute("locoDir")) != null) {        _loco5Direction=(a.getValue());      }    }    if (locoName.equals("mid") && locoMidNumber.equals("4")) {      if ((a=((elementList.get(i))).getAttribute("dccLocoAddress")) != null) {        _loco6DccAddress=a.getValue();      }      if ((a=((elementList.get(i))).getAttribute("longAddress")) != null) {        setLoco6LongAddress(a.getValue().equals("yes"));      }      if ((a=((elementList.get(i))).getAttribute("locoDir")) != null) {        _loco6Direction=(a.getValue());      }    }  }  if (_loco1DccAddress.equals("")) {    log.warn("no lead loco attribute in consist element when reading ConsistRoster");  }  if (_loco2DccAddress.equals("")) {    log.warn("no rear loco attribute in consist element when reading ConsistRoster");  }}  }
class C{  public Certificate engineGenerateCertificate(InputStream inStream) throws CertificateException {  if (inStream == null) {    throw new CertificateException("inStream == null");  }  try {    if (!inStream.markSupported()) {      inStream=new RestoringInputStream(inStream);    }    inStream.mark(1);    if (inStream.read() == '-') {      return getCertificate(decodePEM(inStream,CERT_BOUND_SUFFIX));    } else {      inStream.reset();      return getCertificate(inStream);    }  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  void handleResponse(DNSIncoming msg) throws IOException {  final long now=System.currentTimeMillis();  boolean hostConflictDetected=false;  boolean serviceConflictDetected=false;  for (  DNSRecord newRecord : msg.getAllAnswers()) {    this.handleRecord(newRecord,now);    if (DNSRecordType.TYPE_A.equals(newRecord.getRecordType()) || DNSRecordType.TYPE_AAAA.equals(newRecord.getRecordType())) {      hostConflictDetected|=newRecord.handleResponse(this);    } else {      serviceConflictDetected|=newRecord.handleResponse(this);    }  }  if (hostConflictDetected || serviceConflictDetected) {    this.startProber();  }}  }
class C{  public static double rRAErawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double sumOfRelativeError=0.0;  double expectedResult;  double result;  double error;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  double dvSumOfRelativeError=dv.getDependentVariableSumOfRelativeError(chromosomeNum);  for (int i=0; i < dvValues.length; i++) {    expectedResult=dvValues[i];    result=ind.eval(chromosomeNum,useTrainingData,i);    if (expectedResult == 0.0) {      expectedResult=RELATIVE_ERROR_ZERO_FACTOR;      result+=RELATIVE_ERROR_ZERO_FACTOR;      System.err.println("Warning: expected result (test value) is 0 in rRAE fitness calculation. Adjusting to avoid division by zero.");    }    error=(result - expectedResult) / expectedResult;    sumOfRelativeError+=Math.abs(error);  }  if (dvSumOfRelativeError == 0.0) {    dvSumOfRelativeError=RELATIVE_ERROR_ZERO_FACTOR;    System.err.println("Warning: sum of error for dependent variable is 0 in rRAE fitness calculation. Adjusting to avoid division by zero.");  }  return (sumOfRelativeError / dvSumOfRelativeError);}  }
class C{  public boolean isStored(){  return Integer.signum(id) != -1;}  }
class C{  @Override public boolean shouldPerform(OptOptions options){  return options.getOptLevel() >= 3;}  }
class C{  public boolean isEmpty(){  return header.next == header;}  }
class C{  public static boolean containsKey(KeyStore keyStore) throws CryptoException {  try {    Enumeration<String> aliases=keyStore.aliases();    while (aliases.hasMoreElements()) {      String alias=aliases.nextElement();      if (isKeyEntry(alias,keyStore)) {        return true;      }    }    return false;  } catch (  KeyStoreException ex) {    throw new CryptoException(res.getString("NoCheckKeyStoreKeys.exception.message"),ex);  }}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  private int decryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  if (count > blockSize) {    byte inVal=in[inOff];    FR[blockSize - 2]=inVal;    out[outOff]=encryptByte(inVal,blockSize - 2);    inVal=in[inOff + 1];    FR[blockSize - 1]=inVal;    out[outOff + 1]=encryptByte(inVal,blockSize - 1);    cipher.processBlock(FR,0,FRE,0);    for (int n=2; n < blockSize; n++) {      inVal=in[inOff + n];      FR[n - 2]=inVal;      out[outOff + n]=encryptByte(inVal,n - 2);    }  } else   if (count == 0) {    cipher.processBlock(FR,0,FRE,0);    for (int n=0; n < blockSize; n++) {      FR[n]=in[inOff + n];      out[n]=encryptByte(in[inOff + n],n);    }    count+=blockSize;  } else   if (count == blockSize) {    cipher.processBlock(FR,0,FRE,0);    byte inVal1=in[inOff];    byte inVal2=in[inOff + 1];    out[outOff]=encryptByte(inVal1,0);    out[outOff + 1]=encryptByte(inVal2,1);    System.arraycopy(FR,2,FR,0,blockSize - 2);    FR[blockSize - 2]=inVal1;    FR[blockSize - 1]=inVal2;    cipher.processBlock(FR,0,FRE,0);    for (int n=2; n < blockSize; n++) {      byte inVal=in[inOff + n];      FR[n - 2]=inVal;      out[outOff + n]=encryptByte(inVal,n - 2);    }    count+=blockSize;  }  return blockSize;}  }
class C{  public int countOffersOfPlayer(Player offerer){  int count=0;  for (  RPObject object : this.getSlot(OFFERS_SLOT_NAME)) {    Offer offer=(Offer)object;    if (offer.getOfferer().equals(offerer.getName())) {      count=count + 1;    }  }  return count;}  }
class C{  public static long deserializeTransactionId(byte[] data){  String seqNoStr=new String(data,UTF_8);  return Long.valueOf(seqNoStr);}  }
class C{  public void test_write_flush_update(){  final Journal store=(Journal)getStore();  try {    RWStrategy bufferStrategy=(RWStrategy)store.getBufferStrategy();    final int nbytes=60;    byte[] a=new byte[nbytes];    r.nextBytes(a);    final long addr=bufferStrategy.write(ByteBuffer.wrap(a));    assertEquals(nbytes,store.getByteCount(addr));    store.commit();{      final ByteBuffer b=bufferStrategy.read(addr);      assertNotNull(b);      for (int i=20; i < 40; i++) {        assertEquals("data differs at offset=" + i,a[i],b.get(i));      }    }  }  finally {    store.destroy();  }}  }
class C{  public short nextShort(){  return (short)(next(16));}  }
class C{  public SecretKey createSecretKey(byte[] secretKeyBytes){  return new SecretKeySpec(secretKeyBytes,this.signatureAlgorithm.getJCEAlgorithmString());}  }
class C{  public AssertionValidationException(String message){  super(message);}  }
class C{  private PsiBuilder.Marker parseClass(PsiBuilder builder){  final PsiBuilder.Marker marker=builder.mark();  builder.advanceLexer();  if (builder.getTokenType() == RegExpTT.CARET) {    builder.advanceLexer();  }  if (parseClassIntersection(builder)) {    while (RegExpTT.CHARACTERS2.contains(builder.getTokenType()) || builder.getTokenType() == RegExpTT.CLASS_BEGIN || builder.getTokenType() == RegExpTT.PROPERTY || builder.getTokenType() == RegExpTT.BRACKET_EXPRESSION_BEGIN) {      parseClassIntersection(builder);    }  }  checkMatches(builder,RegExpTT.CLASS_END,"Unclosed character class");  marker.done(RegExpElementTypes.CLASS);  return marker;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @SuppressWarnings("unchecked") public void addEdges(T sourceElement,T... destinationElements){  nodes.get(sourceElement).addEdges(destinationElements);}  }
class C{  @Override public Matrix clone(){  final Matrix clone=(Matrix)super.clone();  clone.$=copyData(this);  clone.addr=new DirectMatrixAddress(clone.$,0,this.rows,null,0,this.cols,this.flags(),true,this.rows,this.cols);  return clone;}  }
class C{  public Timestamp startStamp(){  return new Timestamp(this.start.getTime());}  }
class C{  @SuppressWarnings("unchecked") private void dropDBObjects(Class objectClass){  resetDBObjects(objectClass);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"dropDBObjects",new Object[]{m_objectTypes,m_direction});  m_counterDrp=new Integer(0);  m_totalDrp=new Integer(0);  if (m_targetMap != null && m_targetMap.size() > 0) {    Vector<String> v=new Vector<String>(m_targetMap.keySet());    java.util.Collections.sort(v);    for (Iterator<String> it=v.iterator(); it.hasNext(); ) {      String key=it.next();      if (m_targetMap.get(key).drop())       m_counterDrp=new Integer(m_counterDrp.intValue() + 1);      m_totalDrp=new Integer(m_totalDrp.intValue() + 1);    }  }  logResults();}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMPatternElement(prefix,(AbstractDocument)doc);}  }
class C{  private static <O>Collection<VisualizationProcessor> collectFactorys(MergedParameterization config,Pattern filter){  ArrayList<VisualizationProcessor> factories=new ArrayList<>();  for (  Class<?> c : ELKIServiceRegistry.findAllImplementations(VisualizationProcessor.class)) {    if (filter != null && !filter.matcher(c.getCanonicalName()).find()) {      continue;    }    try {      config.rewind();      VisualizationProcessor a=ClassGenericsUtil.tryInstantiate(VisualizationProcessor.class,c,config);      factories.add(a);    } catch (    Throwable e) {      if (LOG.isDebugging()) {        LOG.exception("Error instantiating visualization processor " + c.getName(),e.getCause());      } else {        LOG.warning("Error instantiating visualization processor " + c.getName() + ": "+ e.getMessage());      }    }  }  return factories;}  }
class C{  public boolean isAnimatable(){  return isAnimatable;}  }
class C{  public static String toHiveSchema(Schema schema) throws UnsupportedTypeException {  if (schema.getType() != Schema.Type.RECORD || schema.getFields().size() < 1) {    throw new UnsupportedTypeException("Schema must be of type record and have at least one field.");  }  StringBuilder builder=new StringBuilder();  builder.append("(");  Iterator<Schema.Field> fieldIter=schema.getFields().iterator();  appendField(builder,fieldIter.next(),false);  while (fieldIter.hasNext()) {    builder.append(", ");    appendField(builder,fieldIter.next(),false);  }  builder.append(")");  return builder.toString();}  }
class C{  public void switchToSpellCastingState(RPObject spell){  SpellCastingGroundContainerMouseState newState=new SpellCastingGroundContainerMouseState(this.ground);  this.ground.setNewMouseHandlerState(newState);  newState.setSpell(spell);}  }
class C{  protected void writeHeader() throws ConfigurationException, IOException {  if (this.output != null) {    close();  }  this.counter++;  String filePath=PATH_OUTPUT_SQL_FILES + this.outputName + "_"+ counter;  this.output=OutputFactory.getOutputStream(filePath);  SQLConsumerLogMessages.logFileCreation(logger,filePath);  this.sqlArchive=new File(filePath);  String[] revTable=this.sqlEncoder.getTable();  for (  String sTable : revTable) {    String curLine=sTable + "\r\n";    byte[] bytes=curLine.getBytes(WIKIPEDIA_ENCODING);    this.output.write(bytes);  }  this.output.flush();}  }
class C{  private void logCandTypes(){  List<IceMediaStream> strms=getStreams();  for (  IceMediaStream stream : strms) {    for (    Component component : stream.getComponents()) {      CandidatePair selectedPair=component.getSelectedPair();      StringBuffer buf=new StringBuffer("Harvester used for selected pair for ");      buf.append(component.toShortString());      buf.append(" (local ufrag ").append(getLocalUfrag());      buf.append("): ");      if (selectedPair == null) {        buf.append("none (conn checks failed)");        logger.info(buf.toString());        continue;      }      Candidate<?> localCnd=selectedPair.getLocalCandidate();      TransportAddress serverAddr=localCnd.getStunServerAddress();      buf.append(localCnd.getType());      if (serverAddr != null) {        buf.append(" (STUN server = ");        buf.append(serverAddr);        buf.append(")");      } else {        TransportAddress relayAddr=localCnd.getRelayServerAddress();        if (relayAddr != null) {          buf.append(" (relay = ");          buf.append(relayAddr);          buf.append(")");        }      }      logger.info(buf.toString());    }  }}  }
class C{  public GsonBuilder addDeserializationExclusionStrategy(ExclusionStrategy strategy){  excluder=excluder.withExclusionStrategy(strategy,false,true);  return this;}  }
class C{  public boolean isRpcRunning(){  return rpcRunning;}  }
class C{  public void onMessageReceived(GridClockMessage msg,InetAddress addr,int port){  long rcvTs=currentTime();  if (!msg.originatingNodeId().equals(ctx.localNodeId())) {    msg.replyTimestamp(rcvTs);    try {      srv.sendPacket(msg,addr,port);    } catch (    IgniteCheckedException e) {      U.error(log,"Failed to send time server reply to remote node: " + msg,e);    }  } else   timeCoord.onMessage(msg,rcvTs);}  }
class C{  @Override public void buildClassifier(Instances instances) throws Exception {  getCapabilities().testWithFail(instances);  instances=new Instances(instances);  instances.deleteWithMissingClass();  ModelSelection modSelection;  if (m_binarySplits) {    modSelection=new BinC45ModelSelection(m_minNumObj,instances,m_useMDLcorrection,m_doNotMakeSplitPointActualValue);  } else {    modSelection=new C45ModelSelection(m_minNumObj,instances,m_useMDLcorrection,m_doNotMakeSplitPointActualValue);  }  if (m_unpruned) {    m_root=new MakeDecList(modSelection,m_minNumObj);  } else   if (m_reducedErrorPruning) {    m_root=new MakeDecList(modSelection,m_numFolds,m_minNumObj,m_Seed);  } else {    m_root=new MakeDecList(modSelection,m_CF,m_minNumObj);  }  m_root.buildClassifier(instances);  if (m_binarySplits) {    ((BinC45ModelSelection)modSelection).cleanup();  } else {    ((C45ModelSelection)modSelection).cleanup();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.BINDING_ELEMENT__REST:    return rest != REST_EDEFAULT;case N4JSPackage.BINDING_ELEMENT__VAR_DECL:  return varDecl != null;case N4JSPackage.BINDING_ELEMENT__NESTED_PATTERN:return nestedPattern != null;case N4JSPackage.BINDING_ELEMENT__EXPRESSION:return expression != null;}return super.eIsSet(featureID);}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__OWNER:    return eInternalContainer().eInverseRemove(this,N4JSPackage.N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW,N4ClassifierDefinition.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  public void paintCurrentValueBackground(Graphics g,Rectangle bounds,boolean hasFocus){  if (!isUseParentPaint()) {    if (comboBox.isEnabled())     org.jb2011.lnf.beautyeye.ch6_textcoms.__Icon9Factory__.getInstance().getTextFieldBgNormal().draw((Graphics2D)g,0,0,comboBox.getWidth(),comboBox.getHeight()); else     org.jb2011.lnf.beautyeye.ch6_textcoms.__Icon9Factory__.getInstance().getTextFieldBgDisabled().draw((Graphics2D)g,0,0,comboBox.getWidth(),comboBox.getHeight());  } else {    super.paintCurrentValueBackground(g,bounds,hasFocus);  }}  }
class C{  @Override public String toString(){  if (getUserObject() instanceof TvShowSeason) {    TvShowSeason season=(TvShowSeason)getUserObject();    if (season.getSeason() == -1) {      return "Uncategorized";    }    return "Season " + season.getSeason();  }  return super.toString();}  }
class C{  public boolean isRange(int start,int end,boolean value){  if (end < start) {    throw new IllegalArgumentException();  }  if (end == start) {    return true;  }  end--;  int firstInt=start / 32;  int lastInt=end / 32;  for (int i=firstInt; i <= lastInt; i++) {    int firstBit=i > firstInt ? 0 : start & 0x1F;    int lastBit=i < lastInt ? 31 : end & 0x1F;    int mask;    if (firstBit == 0 && lastBit == 31) {      mask=-1;    } else {      mask=0;      for (int j=firstBit; j <= lastBit; j++) {        mask|=1 << j;      }    }    if ((bits[i] & mask) != (value ? mask : 0)) {      return false;    }  }  return true;}  }
class C{  public final void allowSpaces(final boolean allowSpaces){  this.allowSpaces=allowSpaces;}  }
class C{  public int nextInt(int n,double p){  double x=p / (1.0 - p);  double y=x * this.gamma.nextDouble(n,1.0);  return this.poisson.nextInt(y);}  }
class C{  static <T>T checkNotNull(T reference,String errorMessage,Object... args){  if (reference == null) {    throw new NullPointerException(String.format(errorMessage,args));  }  return reference;}  }
class C{  public void removeDistinct(Value[] values){  if (!distinct) {    DbException.throwInternalError();  }  if (distinctRows != null) {    ValueArray array=ValueArray.get(values);    distinctRows.remove(array);    rowCount=distinctRows.size();  } else {    rowCount=external.removeRow(values);  }}  }
class C{  public void resize(final int width,final int height){  if (currentController != null) {    currentController.resize(width,height);  }  messageDispatcher.postMessage(AutumnMessage.GAME_RESIZED);}  }
class C{  private String buildKey(Account account,String remotePath){  return account.name + remotePath;}  }
class C{  public ParameterException(String message){  super();  this.message=message;}  }
class C{  public static String convertU8ToHexString(char u8){  return Integer.toHexString(u8);}  }
class C{  public static void addStaticAspectsToItem(ItemStack item,IItemStackMatcher matcher,int tier,int type,float amountMultiplier,float amountVariation){  addStaticAspectsToItem(item,matcher,tier,type,amountMultiplier,amountVariation,1);}  }
class C{  public boolean isExported(){  EObject _eContainer=this.eContainer();  return (_eContainer instanceof ExportDeclaration);}  }
class C{  private Object _evaluateLeftGreaterRight(Object element,String lvalue,String rvalue){  if (element instanceof List) {    return evaluateLeftGreaterRight((List)element,lvalue,rvalue);  } else {    return evaluateLeftGreaterRight((StructuredContent)element,lvalue,rvalue);  }}  }
class C{  public static byte decodeHeaderSize(int header,int byteCount){  if (byteCount == 1) {    return (byte)(header >> 6);  } else   if (byteCount == 2) {    return (byte)(header >> 14);  } else {    return (byte)(header >> 22);  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'visitorModel' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'PACKAGE_NAME' TEXT);");}  }
class C{  public double[] toRealPoint(int scale){  if (mChart instanceof XYChart) {    XYChart chart=(XYChart)mChart;    return chart.toRealPoint(oldX,oldY,scale);  }  return null;}  }
class C{  protected void onDocumentLoaded(String url,KMLRoot document,String featureRef){  document.setField(AVKey.DISPLAY_NAME,url);  this.addDocumentLayer(document);  if (featureRef != null)   this.onFeatureLinkActivated(document,featureRef,null);}  }
class C{  Snapshot snapshot(){  if (!Thread.holdsLock(DiskLruCache.this))   throw new AssertionError();  Source[] sources=new Source[valueCount];  long[] lengths=this.lengths.clone();  try {    for (int i=0; i < valueCount; i++) {      sources[i]=fileSystem.source(cleanFiles[i]);    }    return new Snapshot(key,sequenceNumber,sources,lengths);  } catch (  FileNotFoundException e) {    for (int i=0; i < valueCount; i++) {      if (sources[i] != null) {        Util.closeQuietly(sources[i]);      } else {        break;      }    }    return null;  }}  }
class C{  public void close(){  mDataBase.close();}  }
class C{  public boolean isOutOfGame(int id){  for (  Entity entity : vOutOfGame) {    if (entity.getId() == id) {      return true;    }  }  return false;}  }
class C{  public TeXParser(String parseString,TeXFormula formula,boolean firstpass,boolean space){  this(false,parseString,formula,firstpass);  this.ignoreWhiteSpace=space;}  }
class C{  public static boolean isNotBlank(String str){  return !isBlank(str);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Override public java_cup.runtime.Symbol do_action(int act_num,java_cup.runtime.lr_parser parser,java.util.Stack stack,int top) throws java.lang.Exception {  return action_obj.CUP$Parser$do_action(act_num,parser,stack,top);}  }
class C{  public static void pruneRules(ArrayList<Object>[] rules,double minConfidence){  ArrayList<Object> newPremises=new ArrayList<Object>(rules[0].size()), newConsequences=new ArrayList<Object>(rules[1].size()), newConf=new ArrayList<Object>(rules[2].size());  ArrayList<Object> newLift=null, newLev=null, newConv=null;  if (rules.length > 3) {    newLift=new ArrayList<Object>(rules[3].size());    newLev=new ArrayList<Object>(rules[4].size());    newConv=new ArrayList<Object>(rules[5].size());  }  for (int i=0; i < rules[0].size(); i++) {    if (!(((Double)rules[2].get(i)).doubleValue() < minConfidence)) {      newPremises.add(rules[0].get(i));      newConsequences.add(rules[1].get(i));      newConf.add(rules[2].get(i));      if (rules.length > 3) {        newLift.add(rules[3].get(i));        newLev.add(rules[4].get(i));        newConv.add(rules[5].get(i));      }    }  }  rules[0]=newPremises;  rules[1]=newConsequences;  rules[2]=newConf;  if (rules.length > 3) {    rules[3]=newLift;    rules[4]=newLev;    rules[5]=newConv;  }}  }
class C{  public DateTime addToCopy(long value){  return iInstant.withMillis(iField.add(iInstant.getMillis(),value));}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docTypeNull=null;  Document docImp;  DOMImplementation domImpl;  DocumentType docType;  NamedNodeMap nodeMap;  Entity entity2;  Entity entity6;  Entity entityImp2;  Entity entityImp6;  String nodeName;  String systemId;  String notationName;  String nodeNameImp;  String systemIdImp;  String notationNameImp;  doc=(Document)load("staffNS",true);  domImpl=doc.getImplementation();  docType=doc.getDoctype();  docImp=domImpl.createDocument("http://www.w3.org/DOM/Test","a:b",docTypeNull);  nodeMap=docType.getEntities();  assertNotNull("entitiesNotNull",nodeMap);  entity2=(Entity)nodeMap.getNamedItem("ent2");  entity6=(Entity)nodeMap.getNamedItem("ent6");  entityImp2=(Entity)docImp.importNode(entity2,false);  entityImp6=(Entity)docImp.importNode(entity6,true);  nodeName=entity2.getNodeName();  nodeNameImp=entityImp2.getNodeName();  assertEquals("documentimportnode19_Ent2NodeName",nodeName,nodeNameImp);  nodeName=entity6.getNodeName();  nodeNameImp=entityImp6.getNodeName();  assertEquals("documentimportnode19_Ent6NodeName",nodeName,nodeNameImp);  systemId=entity2.getSystemId();  systemIdImp=entityImp2.getSystemId();  assertEquals("documentimportnode19_Ent2SystemId",systemId,systemIdImp);  systemId=entity6.getSystemId();  systemIdImp=entityImp6.getSystemId();  assertEquals("documentimportnode19_Ent6SystemId",systemId,systemIdImp);  notationName=entity2.getNotationName();  notationNameImp=entityImp2.getNotationName();  assertEquals("documentimportnode19_Ent2NotationName",notationName,notationNameImp);  notationName=entity6.getNotationName();  notationNameImp=entityImp6.getNotationName();  assertEquals("documentimportnode19_Ent6NotationName",notationName,notationNameImp);}  }
class C{  void resetHierarchy(){  for (  DebugCounterImpl cur : this) {    cur.reset();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ExpressionsPackage.INT_LITERAL__VALUE:    return value != VALUE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  protected void paintBufferToScreen(Graphics g){synchronized (this) {    g.drawImage(m_offscreen,0,0,null);  }}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  return builder.build();}  }
class C{  private Expand createExpandTask(){  String archivename=getSourceFileName().toLowerCase();  Expand expand=null;  if (archivename.endsWith(".zip")) {    expand=(Expand)this.antUtils.createAntTask("unzip");  } else   if (archivename.endsWith(".tar")) {    expand=(Expand)this.antUtils.createAntTask("untar");  } else   if (archivename.endsWith(".tgz") || archivename.endsWith(".tar.gz")) {    Untar untar=(Untar)this.antUtils.createAntTask("untar");    UntarCompressionMethod compressionMethod=new Untar.UntarCompressionMethod();    compressionMethod.setValue("gzip");    untar.setCompression(compressionMethod);    expand=untar;  } else   if (archivename.endsWith(".bz2")) {    Untar untar=(Untar)this.antUtils.createAntTask("untar");    UntarCompressionMethod compressionMethod=new Untar.UntarCompressionMethod();    compressionMethod.setValue("bzip2");    untar.setCompression(compressionMethod);    expand=untar;  } else {    String errorMessage="Unsupported archive type: [" + archivename + "]";    getLogger().warn(errorMessage,getClass().getName());    throw new IllegalArgumentException(errorMessage);  }  return expand;}  }
class C{  public static Map<String,List<String[]>> importTraitsFromFile(File file,final String delimiter) throws IOException, Arguments.ArgumentException {  final BufferedReader reader=new BufferedReader(new FileReader(file));  String line=nextNonCommentLine(reader);  final int startAt=1;  final String[] traitNames=line.split(delimiter);  for (int k=0; k < traitNames.length; ++k) {    traitNames[k]=traitNames[k].trim();  }  if (!(traitNames[0].equalsIgnoreCase(TRAITS) || traitNames[0].length() < 1))   throw new Arguments.ArgumentException("Wrong file format:\ntrait key word should be declared in the 1st row");  Map<String,List<String[]>> traits=new HashMap<String,List<String[]>>();  for (int i=startAt; i < traitNames.length; i++) {    traits.put(traitNames[i],new ArrayList<String[]>());  }  line=nextNonCommentLine(reader);  while (line != null) {    String[] values=line.split(delimiter);    assert (values.length > 0);    if (values.length != traitNames.length)     throw new Arguments.ArgumentException("Wrong file format:\neach trait should have its corresponding value");    try {      if (traitNames[0].equalsIgnoreCase(TRAITS)) {        importStatesMoreThanTaxon(traits,values,traitNames,startAt);      } else {        importSpecies(traits,values,traitNames,startAt);      }    } catch (    Arguments.ArgumentException e) {      e.printStackTrace();    }    line=nextNonCommentLine(reader);  }  return traits;}  }
class C{  public SuspensionRecord(PrincipalUser creator,PrincipalUser user,SubSystem subSystem,long infractionTimestamp){  super(creator);  setUser(user);  setSubSystem(subSystem);  addInfraction(infractionTimestamp);}  }
class C{  protected int toGraph(StringBuffer text,int num,Tree parent) throws Exception {  num++;  if (m_Attribute == -1) {    text.append("N" + Integer.toHexString(Tree.this.hashCode()) + " [label=\""+ num+ Utils.backQuoteChars(leafString(parent))+ "\""+ "shape=box]\n");  } else {    text.append("N" + Integer.toHexString(Tree.this.hashCode()) + " [label=\""+ num+ ": "+ Utils.backQuoteChars(m_Info.attribute(m_Attribute).name())+ "\"]\n");    for (int i=0; i < m_Successors.length; i++) {      text.append("N" + Integer.toHexString(Tree.this.hashCode()) + "->"+ "N"+ Integer.toHexString(m_Successors[i].hashCode())+ " [label=\"");      if (m_Info.attribute(m_Attribute).isNumeric()) {        if (i == 0) {          text.append(" < " + Utils.doubleToString(m_SplitPoint,2));        } else {          text.append(" >= " + Utils.doubleToString(m_SplitPoint,2));        }      } else {        text.append(" = " + Utils.backQuoteChars(m_Info.attribute(m_Attribute).value(i)));      }      text.append("\"]\n");      num=m_Successors[i].toGraph(text,num,this);    }  }  return num;}  }
class C{  public static <T>T singleViaCompare(Collection<T> list,Comparator<T> compare){  return list.stream().reduce(null).get();}  }
class C{  public static short parseShort(java.lang.String s) throws java.lang.NumberFormatException {  return (short)Integer.parseInt(s);}  }
class C{  public void addMasterNodes(Collection<GraphNode> result){  for (  GraphNode master : collapsedData.keySet()) {    result.add(master);  }}  }
class C{  public void report(IFeaturesObject obj){  if (config.isFeaturesEnabledForType(obj.getType())) {    try {      FeatureTreeNode root=obj.reportFeatures(this.collection);      if (featuresExtractors.get(obj.getType()) != null) {        FeaturesData objData=obj.getData();        if (objData != null) {          FeatureTreeNode custom=FeatureTreeNode.createChildNode(CUSTOM_FEATURES_ROOT_NODE_NAME,root);          for (          FeaturesExtractor ext : featuresExtractors.get(obj.getType())) {            List<FeatureTreeNode> cust=ext.getFeatures(objData);            if (cust != null && !cust.isEmpty()) {              FeatureTreeNode custRoot=FeatureTreeNode.createChildNode("pluginFeatures",custom);              FeaturesExtractor.ExtractorDetails details=ext.getDetails();              if (!details.getName().isEmpty()) {                custRoot.setAttribute("name",details.getName());              }              if (!details.getVersion().isEmpty()) {                custRoot.setAttribute("version",details.getVersion());              }              if (!details.getDescription().isEmpty()) {                custRoot.setAttribute("description",details.getDescription());              }              for (              FeatureTreeNode ftn : cust) {                if (ftn != null) {                  custRoot.addChild(ftn);                }              }            }          }        }      }    } catch (    FeatureParsingException ignore) {      throw new IllegalStateException("FeaturesReporter.report() illegal state.",ignore);    }  }}  }
class C{  public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines){  return new CSVFormat(delimiter,quoteChar,quotePolicy,commentStart,escape,ignoreSurroundingSpaces,ignoreEmptyLines,recordSeparator,nullString,header,skipHeaderRecord);}  }
class C{  @Override public AccessToken refreshAccessToken() throws IOException {  if (refreshToken == null) {    throw new IllegalStateException("UserCredentials instance cannot refresh because there is no" + " refresh token.");  }  GenericData tokenRequest=new GenericData();  tokenRequest.set("client_id",clientId);  tokenRequest.set("client_secret",clientSecret);  tokenRequest.set("refresh_token",refreshToken);  tokenRequest.set("grant_type",GRANT_TYPE);  UrlEncodedContent content=new UrlEncodedContent(tokenRequest);  HttpRequestFactory requestFactory=transportFactory.create().createRequestFactory();  HttpRequest request=requestFactory.buildPostRequest(new GenericUrl(tokenServerUri),content);  request.setParser(new JsonObjectParser(OAuth2Utils.JSON_FACTORY));  HttpResponse response=request.execute();  GenericData responseData=response.parseAs(GenericData.class);  String accessToken=OAuth2Utils.validateString(responseData,"access_token",PARSE_ERROR_PREFIX);  int expiresInSeconds=OAuth2Utils.validateInt32(responseData,"expires_in",PARSE_ERROR_PREFIX);  long expiresAtMilliseconds=clock.currentTimeMillis() + expiresInSeconds * 1000;  return new AccessToken(accessToken,new Date(expiresAtMilliseconds));}  }
class C{  public BrowseNextResponse BrowseNext(RequestHeader RequestHeader,Boolean ReleaseContinuationPoints,byte[]... ContinuationPoints) throws ServiceFaultException, ServiceResultException {  BrowseNextRequest req=new BrowseNextRequest(RequestHeader,ReleaseContinuationPoints,ContinuationPoints);  return (BrowseNextResponse)channel.serviceRequest(req);}  }
class C{  public void close(){}  }
class C{  public static File loadServerChainCert(){  return Paths.get(TESTING_CERTS_DIR.toString(),"server.pem").toFile();}  }
class C{  public TwoPersonZeroSumGame(double[][] payoff){  m=payoff.length;  n=payoff[0].length;  double[] c=new double[n];  double[] b=new double[m];  double[][] A=new double[m][n];  for (int i=0; i < m; i++)   b[i]=1.0;  for (int j=0; j < n; j++)   c[j]=1.0;  constant=Double.POSITIVE_INFINITY;  for (int i=0; i < m; i++)   for (int j=0; j < n; j++)   if (payoff[i][j] < constant)   constant=payoff[i][j];  if (constant <= 0)   constant=-constant + 1; else   constant=0;  for (int i=0; i < m; i++)   for (int j=0; j < n; j++)   A[i][j]=payoff[i][j] + constant;  lp=new LinearProgramming(A,b,c);  assert certifySolution(payoff);}  }
class C{  public void addAll(JsonArray array){  elements.addAll(array.elements);}  }
class C{  public CatchEntry(Label start,Label end,Label handler,CP cat){  start_pc=start;  end_pc=end;  handler_pc=handler;  catch_cpe=cat;}  }
class C{  public boolean isBasic(){  return false;}  }
class C{  public ParameterAmp[] marshalParamTypes(ParameterAmp[] sourceTypes){  if (sourceTypes == null) {    return null;  }  ParameterAmp[] paramTypes=new ParameterAmp[sourceTypes.length];  for (int i=0; i < paramTypes.length; i++) {    paramTypes[i]=ParameterAmp.of(marshalType(sourceTypes[i].rawClass()));  }  return paramTypes;}  }
class C{  static void destroyLockService(){  DistributedLockService dls=null;synchronized (dlockMonitor) {    dls=DistributedLockService.getServiceNamed(PARTITION_LOCK_SERVICE_NAME);  }  if (dls != null) {    try {      DistributedLockService.destroy(PARTITION_LOCK_SERVICE_NAME);    } catch (    IllegalArgumentException ex) {    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.773 -0500",hash_original_method="99F284A13C47F669710FCFDC8EC8F9ED",hash_generated_method="F656DF0A2026E45460A68C892D839B4D") public Element(ElementType type,boolean defaultAttributes){  theType=type;  if (defaultAttributes)   theAtts=new AttributesImpl(type.atts()); else   theAtts=new AttributesImpl();  theNext=null;  preclosed=false;}  }
class C{  private void compact(){  int from=0;  int to=0;  while (from < this.capacity) {    Object key=this.list[from];    long usage=age(this.uses[from]);    if (usage > 0) {      this.uses[to]=usage;      this.list[to]=key;      this.map.put(key,new Integer(to));      to+=1;    } else {      this.map.remove(key);    }    from+=1;  }  if (to < this.capacity) {    this.length=to;  } else {    this.map.clear();    this.length=0;  }  this.power=0;}  }
class C{  public boolean useDaylightTime(){  return (simpleTimeZoneParams != null);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  ElemTemplateElement templElem=(ElemTemplateElement)xctxt.getNamespaceContext();  StylesheetRoot ss=templElem.getStylesheetRoot();  java.text.DecimalFormat formatter=null;  java.text.DecimalFormatSymbols dfs=null;  double num=getArg0().execute(xctxt).num();  String patternStr=getArg1().execute(xctxt).str();  if (patternStr.indexOf(0x00A4) > 0)   ss.error(XSLTErrorResources.ER_CURRENCY_SIGN_ILLEGAL);  try {    Expression arg2Expr=getArg2();    if (null != arg2Expr) {      String dfName=arg2Expr.execute(xctxt).str();      QName qname=new QName(dfName,xctxt.getNamespaceContext());      dfs=ss.getDecimalFormatComposed(qname);      if (null == dfs) {        warn(xctxt,XSLTErrorResources.WG_NO_DECIMALFORMAT_DECLARATION,new Object[]{dfName});      } else {        formatter=new java.text.DecimalFormat();        formatter.setDecimalFormatSymbols(dfs);        formatter.applyLocalizedPattern(patternStr);      }    }    if (null == formatter) {      dfs=ss.getDecimalFormatComposed(new QName(""));      if (dfs != null) {        formatter=new java.text.DecimalFormat();        formatter.setDecimalFormatSymbols(dfs);        formatter.applyLocalizedPattern(patternStr);      } else {        dfs=new java.text.DecimalFormatSymbols(java.util.Locale.US);        dfs.setInfinity(Constants.ATTRVAL_INFINITY);        dfs.setNaN(Constants.ATTRVAL_NAN);        formatter=new java.text.DecimalFormat();        formatter.setDecimalFormatSymbols(dfs);        if (null != patternStr)         formatter.applyLocalizedPattern(patternStr);      }    }    return new XString(formatter.format(num));  } catch (  Exception iae) {    templElem.error(XSLTErrorResources.ER_MALFORMED_FORMAT_STRING,new Object[]{patternStr});    return XString.EMPTYSTRING;  }}  }
class C{  public MultipartBody build(){  if (parts.isEmpty()) {    throw new IllegalStateException("Multipart body must have at least one part.");  }  return new MultipartBody(boundary,type,parts);}  }
class C{  public boolean isReference(){  return false;}  }
class C{  private List<Pair<double[],long[]>> findDimensions(ArrayList<PROCLUSCluster> clusters,Relation<V> database){  final int dim=RelationUtil.dimensionality(database);  final int numc=clusters.size();  double[][] averageDistances=new double[numc][];  for (int i=0; i < numc; i++) {    PROCLUSCluster c_i=clusters.get(i);    double[] x_i=new double[dim];    for (DBIDIter iter=c_i.objectIDs.iter(); iter.valid(); iter.advance()) {      V o=database.get(iter);      for (int d=0; d < dim; d++) {        x_i[d]+=Math.abs(c_i.centroid[d] - o.doubleValue(d));      }    }    for (int d=0; d < dim; d++) {      x_i[d]/=c_i.objectIDs.size();    }    averageDistances[i]=x_i;  }  List<DoubleIntInt> z_ijs=new ArrayList<>();  for (int i=0; i < numc; i++) {    double[] x_i=averageDistances[i];    double y_i=0;    for (int j=0; j < dim; j++) {      y_i+=x_i[j];    }    y_i/=dim;    double sigma_i=0;    for (int j=0; j < dim; j++) {      double diff=x_i[j] - y_i;      sigma_i+=diff * diff;    }    sigma_i/=(dim - 1);    sigma_i=Math.sqrt(sigma_i);    for (int j=0; j < dim; j++) {      z_ijs.add(new DoubleIntInt((x_i[j] - y_i) / sigma_i,i,j));    }  }  Collections.sort(z_ijs);  long[][] dimensionMap=new long[numc][((dim - 1) >> 6) + 1];  int max=Math.max(k * l,2);  for (int m=0; m < max; m++) {    DoubleIntInt z_ij=z_ijs.get(m);    long[] dims_i=dimensionMap[z_ij.dimi];    BitsUtil.setI(dims_i,z_ij.dimj);    if (LOG.isDebugging()) {      StringBuilder msg=new StringBuilder();      msg.append('\n');      msg.append("z_ij ").append(z_ij).append('\n');      msg.append("D_i ").append(BitsUtil.toString(dims_i)).append('\n');      LOG.debugFiner(msg.toString());    }  }  List<Pair<double[],long[]>> result=new ArrayList<>();  for (int i=0; i < numc; i++) {    long[] dims_i=dimensionMap[i];    if (dims_i == null) {      continue;    }    PROCLUSCluster c_i=clusters.get(i);    result.add(new Pair<>(c_i.centroid,dims_i));  }  return result;}  }
class C{  @SuppressWarnings("deprecation") void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  cameraResolution=getCameraResolution(parameters,screenResolution);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  public static void createColumnDataFor(BinaryTable table) throws FitsException {  table.createTable();}  }
class C{  public MNKProblem(File file) throws IOException {  super();  load(file);}  }
class C{  ReadOnlyGameSettings(){}  }
class C{  public Long scard(final String key){  checkIsInMulti();  client.scard(key);  return client.getIntegerReply();}  }
class C{  public static String trimIndent(String line,int indentUnitsToRemove,int tabWidth,int indentWidth){  if (tabWidth < 0 || indentWidth < 0 || line == null) {    throw new IllegalArgumentException();  }  if (indentUnitsToRemove <= 0 || indentWidth == 0) {    return line;  }  final int spaceEquivalentsToRemove=indentUnitsToRemove * indentWidth;  int start=0;  int spaceEquivalents=0;  int size=line.length();  String prefix=null;  for (int i=0; i < size; i++) {    char c=line.charAt(i);    if (c == '\t') {      spaceEquivalents=calculateSpaceEquivalents(tabWidth,spaceEquivalents);    } else     if (isIndentChar(c)) {      spaceEquivalents++;    } else {      start=i;      break;    }    if (spaceEquivalents == spaceEquivalentsToRemove) {      start=i + 1;      break;    }    if (spaceEquivalents > spaceEquivalentsToRemove) {      start=i + 1;      char[] missing=new char[spaceEquivalents - spaceEquivalentsToRemove];      Arrays.fill(missing,' ');      prefix=new String(missing);      break;    }  }  String trimmed;  if (start == size)   trimmed=Util.EMPTY_STRING; else   trimmed=line.substring(start);  if (prefix == null)   return trimmed;  return prefix + trimmed;}  }
class C{  public boolean forEachValue(TObjectProcedure<V> procedure){  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (isFull(values,i) && !procedure.execute(unwrapNull(values[i]))) {      return false;    }  }  return true;}  }
class C{  public static boolean isMetaTempo(MidiMessage midiMsg){  if (midiMsg.getLength() != 6 || midiMsg.getStatus() != MetaMessage.META) {    return false;  }  byte[] msg=midiMsg.getMessage();  return ((msg[1] & 0xFF) == META_TEMPO_TYPE) && (msg[2] == 3);}  }
class C{  private void createLayout(){  JComponent content=SBoxLayout.createContainer(SBoxLayout.VERTICAL,PADDING);  JComponent row=SBoxLayout.createContainer(SBoxLayout.HORIZONTAL,PADDING);  JComponent left=SBoxLayout.createContainer(SBoxLayout.VERTICAL,PADDING);  JComponent middle=SBoxLayout.createContainer(SBoxLayout.VERTICAL,PADDING);  JComponent right=SBoxLayout.createContainer(SBoxLayout.VERTICAL,PADDING);  left.setAlignmentY(CENTER_ALIGNMENT);  right.setAlignmentY(CENTER_ALIGNMENT);  row.add(left);  row.add(middle);  row.add(right);  content.add(row);  Class<? extends IEntity> itemClass=EntityMap.getClass("item",null,null);  SpriteStore store=SpriteStore.get();  left.add(Box.createVerticalStrut(HAND_YSHIFT * 2));  ItemPanel panel=createItemPanel(itemClass,store,"rhand","data/gui/weapon-slot.png");  left.add(panel);  panel=createItemPanel(itemClass,store,"finger","data/gui/ring-slot.png");  left.add(panel);  panel=createItemPanel(itemClass,store,"head","data/gui/helmet-slot.png");  middle.add(panel);  panel=createItemPanel(itemClass,store,"armor","data/gui/armor-slot.png");  middle.add(panel);  panel=createItemPanel(itemClass,store,"legs","data/gui/legs-slot.png");  middle.add(panel);  panel=createItemPanel(itemClass,store,"feet","data/gui/boots-slot.png");  middle.add(panel);  right.add(Box.createVerticalStrut(HAND_YSHIFT * 2));  panel=createItemPanel(itemClass,store,"lhand","data/gui/shield-slot.png");  right.add(panel);  panel=createItemPanel(itemClass,store,"cloak","data/gui/cloak-slot.png");  right.add(panel);  specialSlots=SBoxLayout.createContainer(SBoxLayout.HORIZONTAL,PADDING);  specialSlots.setAlignmentX(CENTER_ALIGNMENT);  specialSlots.setVisible(false);  content.add(specialSlots);  panel=createItemPanel(itemClass,store,"back","data/gui/bag-slot.png");  specialSlots.add(panel);  panel=createItemPanel(itemClass,store,"belt","data/gui/key-slot.png");  specialSlots.add(panel);  setContent(content);}  }
class C{  public Builder play(Animator anim){  if (anim != null) {    mNeedsSort=true;    return new Builder(anim);  }  return null;}  }
class C{  public final boolean isClassA(){  return (ipAddress & 0x00000001) == 0;}  }
class C{  public void testInitString(){  ParallaxRfidProtocol instance=new ParallaxRfidProtocol();  assertEquals("",instance.initString());}  }
class C{  public OMText(double lt,double ln,float offX,float offY,String aString,int just){  this(lt,ln,offX,offY,aString,DEFAULT_FONT,just);}  }
class C{  public static String encodePathSaveEncodings(String segment){  String result=encodeFromArray(segment,pathEncoding,false);  result=encodeNonCodes(result);  return result;}  }
class C{  private void emitGetter(Method getter,String fieldName,String returnType,StringBuilder builder){  if (getter.isAnnotationPresent(javax.validation.constraints.NotNull.class)) {    builder.append("    @javax.validation.constraints.NotNull\n");  } else   if (getter.isAnnotationPresent(org.eclipse.che.commons.annotation.Nullable.class)) {    builder.append("    @org.eclipse.che.commons.annotation.Nullable\n");  }  builder.append("    @Override\n    public ");  builder.append(returnType);  builder.append(" ");  builder.append(getter.getName());  builder.append("() {\n");  Class<?> returnTypeClass=getter.getReturnType();  if (isList(returnTypeClass) || isMap(returnTypeClass)) {    builder.append("      ");    builder.append(getEnsureName(fieldName));    builder.append("();\n");  }  builder.append("      return ");  emitReturn(getter,fieldName,builder);  builder.append(";\n    }\n\n");}  }
class C{  public DatabaseConnection() throws Exception {  super();}  }
class C{  public JInternalFrame selectFrame(boolean forward){  JInternalFrame selectedFrame=getSelectedFrame();  JInternalFrame frameToSelect=getNextFrame(selectedFrame,forward);  if (frameToSelect == null) {    return null;  }  setComponentOrderCheckingEnabled(false);  if (forward && selectedFrame != null) {    selectedFrame.moveToBack();  }  try {    frameToSelect.setSelected(true);  } catch (  PropertyVetoException pve) {  }  setComponentOrderCheckingEnabled(true);  return frameToSelect;}  }
class C{  public static boolean isNewer(long ts1,long size1,long ts2,long size2){  return ts1 > ts2 || (ts1 == ts2 && size1 < size2);}  }
class C{  protected static void initInstance(IRedisCacheProxy instance){  INSTANCE=instance;}  }
class C{  public Map<NetworkLite,List<StoragePort>> selectStoragePortsInNetworks(URI storageSystemURI,Collection<NetworkLite> networks,URI varrayURI,ExportPathParams pathParams){  List<StoragePort> storagePorts=ExportUtils.getStorageSystemAssignablePorts(_dbClient,storageSystemURI,varrayURI,pathParams);  return selectStoragePortsInNetworks(storagePorts,networks,varrayURI,pathParams);}  }
class C{  @Interruptible public static void dumpMap(int entry,int[] gcMap){  VM.sysWrite("Regs [");  for (int registerNumber=FIRST_GCMAP_REG; registerNumber <= LAST_GCMAP_REG; registerNumber++) {    if (registerIsSet(entry,registerNumber,gcMap)) {      VM.sysWrite(registerNumber," ");    }  }  VM.sysWrite("]");  VM.sysWrite(" Spills [");  while (nextBitSet(entry,gcMap)) {    entry++;    VM.sysWrite(gcMapInformation(entry,gcMap));    VM.sysWrite(" ");  }  VM.sysWrite("]");}  }
class C{  public static Collection<ZeroConfService> allServices(){  return ZeroConfService.services().values();}  }
class C{  public static void extract(byte[] h264Packet,NalUnitHeader header){  if (h264Packet == null) {    throw new RuntimeException("Cannot extract H264 header. Invalid H264 packet");  }  if (header == null) {    throw new RuntimeException("Cannot extract H264 header. Invalid header packet");  }  byte headerByte=h264Packet[0];  header.forbiddenZeroBit=((headerByte & 0x80) >> 7) != 0;  header.nalRefId=((headerByte & 0x60) >> 5);  int nalUnitType=(headerByte & 0x1f);  header.decodeNalUnitType=NalUnitType.parse(nalUnitType);}  }
class C{  private boolean canScrollLinearly(int fromStackIndex){  int count=mStacks.length;  if (!(mScrollIndexOffset <= 0 && -mScrollIndexOffset <= (count - 1))) {    return false;  }  return mStacks[fromStackIndex ^ 0x01].isDisplayable();}  }
class C{  protected void notifyViolation(StrictModeViolation violation){  List<CustomAction> customActions=notifierConfig.getCustomActions();  for (  CustomAction customAction : customActions) {    customAction.onViolation(violation);  }  String notificationTitle;  if (violation.violationType != null) {    notificationTitle=ViolationTypeInfo.convert(violation.violationType).violationName();  } else {    notificationTitle=getString(R.string.strictmode_notifier_title,getPackageName());  }  StrictModeNotifierInternals.showNotification(this,notificationTitle,getString(R.string.strictmode_notifier_more_detail),notifierConfig.isHeadupEnabled(),StrictModeReportActivity.createPendingIntent(this,violation));}  }
class C{  public static void translateM(float[] tm,int tmOffset,float[] m,int mOffset,float x,float y,float z){  for (int i=0; i < 12; i++) {    tm[tmOffset + i]=m[mOffset + i];  }  for (int i=0; i < 4; i++) {    int tmi=tmOffset + i;    int mi=mOffset + i;    tm[12 + tmi]=m[mi] * x + m[4 + mi] * y + m[8 + mi] * z + m[12 + mi];  }}  }
class C{  public boolean isTradeDiscountPosted(){  Object oo=get_Value(COLUMNNAME_IsTradeDiscountPosted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int size(){  return array.length;}  }
class C{  public String route(String body,@Header(Exchange.SLIP_ENDPOINT) String previous){  return whereToGo(body,previous);}  }
class C{  public static BigDecimal bomQtyOnHand(int p_M_Product_ID,int p_M_Warehouse_ID,int p_M_Locator_ID) throws SQLException {  return bomQty(p_M_Product_ID,p_M_Warehouse_ID,p_M_Locator_ID,"QtyOnHand");}  }
class C{  public ImageServer(Layer[] layers,ImageFormatter formatter){  this.layers=layers;  this.formatter=formatter;}  }
class C{  public ClusteringEvaluationContentEvent(Clustering clustering,DataPoint instance,boolean isLast){  this.gtClustering=clustering;  this.isLast=isLast;  this.dataPoint=instance;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMLALD");  translateAll(environment,instruction,"SMLALD",instructions);}  }
class C{  static void checkIdentifier(final String name,final int start,final int end,final String msg){  if (name == null || (end == -1 ? name.length() <= start : end <= start)) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (!Character.isJavaIdentifierStart(name.charAt(start))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);  }  int max=end == -1 ? name.length() : end;  for (int i=start + 1; i < max; ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be a valid Java identifier): "+ name);    }  }}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public Boolean inner(){  return Boolean.valueOf(inner);}  }
class C{  public static void removeDuplicate(ArrayList<Integer> list){  for (int i=0; i < list.size() - 1; i++) {    for (int j=i + 1; j < list.size(); j++) {      if (list.get(i) == list.get(j))       list.remove(j);    }  }}  }
class C{  private void contextMenu(VisualItem item,MouseEvent e){  try {    if (item instanceof AggregateItem) {      item=(VisualItem)((AggregateItem)item).items().next();    }    VisualNode node=this.vis.map.get(item.getRow());    if (node != null) {      contextMenu(vis,node,item,e);    }  } catch (  Exception ex) {    Logger.getLogger(getClass().getName()).log(Level.SEVERE,"Unknown visual item",ex);  }}  }
class C{  public IntegerMemberValue(int index,ConstPool cp){  super('I',cp);  this.valueIndex=index;}  }
class C{  private Cluster<DendrogramModel> toCluster(Clustering<DendrogramModel> clustering,DBIDRef lead){  final String name;  if (children.size() > 1) {    name="mrg_" + DBIDUtil.toString(lead) + "_"+ depth;  } else   if (newids.size() == 1) {    name="obj_" + DBIDUtil.toString(lead);  } else   if (!Double.isNaN(depth)) {    name="clu_" + DBIDUtil.toString(lead) + "_"+ depth;  } else {    name="clu_" + DBIDUtil.toString(lead);  }  Cluster<DendrogramModel> cluster=new Cluster<>(name,DBIDUtil.newArray(newids),new DendrogramModel(depth));  for (  Cluster<DendrogramModel> child : children) {    clustering.addChildCluster(cluster,child);  }  newids.clear();  children.clear();  return cluster;}  }
class C{  Set<String> validateAssignedGroups(final UserManager userManager,final String authorizablelID,final Set<String> isMemberOf) throws RepositoryException, AuthorizableCreatorException {  Set<String> authorizableSet=new HashSet<String>();  for (  String memberOfPrincipal : isMemberOf) {    if (StringUtils.equals(authorizablelID,memberOfPrincipal)) {      throw new AuthorizableCreatorException("Cannot add authorizable " + authorizablelID + " as member of itself.");    }    Authorizable authorizable=userManager.getAuthorizable(memberOfPrincipal);    if (authorizable != null) {      if (authorizable.isGroup()) {        authorizableSet.add(authorizable.getID());      } else {        String message="Failed to add authorizable " + authorizablelID + " to autorizable "+ memberOfPrincipal+ "! Authorizable is not a group";        throw new AuthorizableCreatorException(message);      }    } else {      if (principalMapFromConfig.keySet().contains(memberOfPrincipal)) {        Set<AuthorizableConfigBean> authorizableConfigSet=principalMapFromConfig.get(memberOfPrincipal);        Iterator<AuthorizableConfigBean> it=authorizableConfigSet.iterator();        AuthorizableConfigBean authorizableConfigBean=null;        while (it.hasNext()) {          authorizableConfigBean=it.next();        }        Group newGroup=userManager.createGroup(new PrincipalImpl(memberOfPrincipal),authorizableConfigBean.getPath());        authorizableSet.add(newGroup.getID());        authorizableInstallationHistory.addNewCreatedAuthorizable(newGroup.getID());        LOG.info("Created group to be able to add {} to group {} ",authorizablelID,memberOfPrincipal);      } else {        String message="Failed to add group: " + authorizablelID + " as member to authorizable: "+ memberOfPrincipal+ ". Neither found this authorizable ("+ memberOfPrincipal+ ") in any of the configurations nor installed in the system!";        LOG.error(message);        throw new AuthorizableCreatorException(message);      }    }  }  return authorizableSet;}  }
class C{  public static Collection<Object> createPropertyCollection(StructuralProperty property){  Class<?> fieldType=property.getJavaField().getType();  if (List.class.isAssignableFrom(fieldType)) {    return new ArrayList<>();  } else   if (Set.class.isAssignableFrom(fieldType)) {    return new HashSet<>();  } else {    throw new ODataSystemException("Unsupported collection type '" + fieldType.getName() + "' for property: "+ property);  }}  }
class C{  public boolean isAnyLicensed(CoordinatorClient.LicenseType... types){  for (  CoordinatorClient.LicenseType type : types) {    if (isLicensed(type)) {      return true;    }  }  return false;}  }
class C{  public Builder updateX509Certificate(X509Certificate oldCertificate,X509Certificate newCertificate){  deleteX509Certificate(oldCertificate);  addX509Certificate(newCertificate);  return this;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Description(summary="Compile and run all fast tests (excl. the compile step).") public void testFast(){  test(true);}  }
class C{  public _QueryOptions(final _QueryOptions_Flag[] flags){  super(flags);}  }
class C{  public static Intent forgeIntentToOpenConversation(Context context,ContactId contact){  Intent intent=new Intent(context,OneToOneTalkView.class);  intent.setAction(OPEN_TALK);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);  intent.putExtra(EXTRA_CONTACT,(Parcelable)contact);  return intent;}  }
class C{  @NotNull public Couple<HgRevisionNumber> identify(@NotNull VirtualFile repo){  HgCommandExecutor commandExecutor=new HgCommandExecutor(myProject);  commandExecutor.setSilent(true);  HgCommandResult result=commandExecutor.executeInCurrentThread(repo,"identify",Arrays.asList("--num","--id"));  if (result == null) {    return Couple.of(HgRevisionNumber.NULL_REVISION_NUMBER,null);  }  final List<String> lines=result.getOutputLines();  if (lines != null && !lines.isEmpty()) {    List<String> parts=StringUtil.split(lines.get(0)," ");    String changesets=parts.get(0);    String revisions=parts.get(1);    if (parts.size() >= 2) {      if (changesets.indexOf('+') != changesets.lastIndexOf('+')) {        List<String> chsets=StringUtil.split(changesets,"+");        List<String> revs=StringUtil.split(revisions,"+");        return Couple.of(HgRevisionNumber.getInstance(revs.get(0) + "+",chsets.get(0) + "+"),HgRevisionNumber.getInstance(revs.get(1) + "+",chsets.get(1) + "+"));      } else {        return Couple.of(HgRevisionNumber.getInstance(revisions,changesets),null);      }    }  }  return Couple.of(HgRevisionNumber.NULL_REVISION_NUMBER,null);}  }
class C{  protected void add(CSVRecord record){  records.add(Objects.requireNonNull(record));}  }
class C{  public void addItem(BinaryItem i){  m_items.add(i);  Collections.sort(m_items);}  }
class C{  public void populate(ResultSet data) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public String seedTipText(){  return "The seed to use for randomization.";}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:35.656 -0500",hash_original_method="A7A78E739513CEBA7D925C6C5ED3F852",hash_generated_method="592D2A350CB8CD8F3C1412A7AEBE5273") public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null)   throw new ParseException("JAIN-SIP Exception, some parameters are missing" + ", unable to create the response",0);  SIPResponse sipResponse=new SIPResponse();  sipResponse.setStatusCode(statusCode);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setMaxForwards(maxForwards);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  public Bridge(){  super();}  }
class C{  public static void checkForUpdates(final JFrame parent){  UpdateCheckHelper.checkForUpdatesWithUi(parent,Constants.PROJECT_NAME,Constants.PROJECT_VERSION);}  }
class C{  protected HttpCookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  HttpCookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableHttpCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  public static double toDoubleValue(String str) throws CasterException {  return toDoubleValue(str,true);}  }
class C{  public boolean isValid(IGameState gameState){  TicTacToeState state=(TicTacToeState)gameState;  TicTacToeBoard board=state.board();  SlideLogic logic=(SlideLogic)state.logic();  if (logic.getPhase() != SlideLogic.SLIDE_PHASE) {    return false;  }  if (col < 0)   return false;  if (col >= board.numColumns())   return false;  if (row < 0)   return false;  if (row >= board.numRows())   return false;  if (board.get(col,row) != player.getMark()) {    return false;  }  Cell here=new Cell(col,row);  if (!here.isAdjacent(emptyCell)) {    return false;  }  return true;}  }
class C{  protected TacticalGraphicSymbol createSymbol(String sidc){  TacticalGraphicSymbol symbol=new TacticalGraphicSymbol(sidc);  symbol.setAttributes(this.activeSymbolAttributes);  symbol.setDelegateOwner(this);  return symbol;}  }
class C{  public static void displayToast(Context aContext,CharSequence aTextToDisplay){  Toast.makeText(aContext,aTextToDisplay,Toast.LENGTH_SHORT).show();}  }
class C{  public static String timestampToString(double timestamp){  if (timestamp == 0)   return "0";  double utc=timestamp - (2208988800.0);  long ms=(long)(utc * 1000.0);  String date=DateFormatPool.format("dd-MMM-yyyy HH:mm:ss",new Date(ms));  double fraction=timestamp - ((long)timestamp);  String fractionSting=new DecimalFormat(".000000").format(fraction);  return date + fractionSting;}  }
class C{  protected Table process(Table t,ResultSet rset,String key,Object lock) throws DataIOException {  int count=0;  long timein=System.currentTimeMillis();  try {    ResultSetMetaData metadata=rset.getMetaData();    int ncols=metadata.getColumnCount();    if (t == null) {      t=getSchema(metadata,m_handler).instantiate();      if (key != null) {        try {          t.index(key);          s_logger.info("Indexed field: " + key);        } catch (        Exception e) {          s_logger.warning("Error indexing field: " + key);        }      }    }    lock=(lock == null ? t : lock);    while (rset.next()) {synchronized (lock) {        int row=getExistingRow(t,rset,key);        if (row < 0) {          row=t.addRow();        }        for (int i=1; i <= ncols; ++i) {          m_handler.process(t,row,rset,i);        }      }      ++count;    }  } catch (  SQLException e) {    throw new DataIOException(e);  }  long time=System.currentTimeMillis() - timein;  s_logger.info("Internal query processing completed: " + count + " rows, "+ (time / 1000)+ "."+ (time % 1000)+ " seconds.");  return t;}  }
class C{  public boolean offer(final int pPriority,final T pItem) throws IllegalArgumentException {  if (pItem == null) {    throw new IllegalArgumentException("pItem must not be null.");  }  final ReentrantLock lock=this.mLock;  lock.lock();  try {    final IList<T> queue=this.mQueues.get(pPriority);    if (queue == null) {      throw new IllegalArgumentException("No queue found for pPriority: '" + pPriority + "'.");    }    final int queueCapacity=this.mQueueCapacities.get(pPriority);    if (queue.size() == queueCapacity) {      return false;    } else {      insert(pPriority,pItem);      return true;    }  }  finally {    lock.unlock();  }}  }
class C{  @Override public void resume(){  isPaused=false;  if (worker != null) {    launch();  }}  }
class C{  private void ageDeliveryPreds(){  double timeDiff=(SimClock.getTime() - this.lastAgeUpdate) / secondsInTimeUnit;  if (timeDiff == 0) {    return;  }  double mult=Math.pow(GAMMA,timeDiff);  for (  Map.Entry<DTNHost,Double> e : preds.entrySet()) {    e.setValue(e.getValue() * mult);  }  this.lastAgeUpdate=SimClock.getTime();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SuppressWarnings("StringBufferReplaceableByString") private static String key(Target target){  StringBuilder sb=new StringBuilder();  sb.append(target.isExclusive());  sb.append("_").append(target.getPopulationWeight());  sb.append("_").append(target.getLightnessWeight());  sb.append("_").append(target.getMinimumLightness());  sb.append("_").append(target.getTargetLightness());  sb.append("_").append(target.getMaximumLightness());  sb.append("_").append(target.getSaturationWeight());  sb.append("_").append(target.getMinimumSaturation());  sb.append("_").append(target.getTargetSaturation());  sb.append("_").append(target.getMaximumSaturation());  return sb.toString();}  }
class C{  static AxesWalker loadWalkers(WalkingIterator lpi,Compiler compiler,int stepOpCodePos,int stepIndex) throws javax.xml.transform.TransformerException {  int stepType;  AxesWalker firstWalker=null;  AxesWalker walker, prevWalker=null;  int analysis=analyze(compiler,stepOpCodePos,stepIndex);  while (OpCodes.ENDOP != (stepType=compiler.getOp(stepOpCodePos))) {    walker=createDefaultWalker(compiler,stepOpCodePos,lpi,analysis);    walker.init(compiler,stepOpCodePos,stepType);    walker.exprSetParent(lpi);    if (null == firstWalker) {      firstWalker=walker;    } else {      prevWalker.setNextWalker(walker);      walker.setPrevWalker(prevWalker);    }    prevWalker=walker;    stepOpCodePos=compiler.getNextStepPos(stepOpCodePos);    if (stepOpCodePos < 0)     break;  }  return firstWalker;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:11.458 -0500",hash_original_method="5D7C81BCBFD28CA691320147DF9DB2DE",hash_generated_method="19013A4DCE29E261487A5DF1011BDA8C") protected String encodeBody(){  return Long.toString(this.sequenceNumber);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  @InfoName("CL_DEVICE_IMAGE_SUPPORT") public boolean hasImageSupport(){  return infos.getBool(getEntity(),CL_DEVICE_IMAGE_SUPPORT);}  }
class C{  public FindTvShowTask(File subdir,String datasource){  this.subdir=subdir;  this.datasource=datasource;}  }
class C{  @Override public void keyPressed(KeyEvent e){  if (enableArrowKeys && e.isActionKey() && e.getKeyCode() == KeyEvent.VK_RIGHT) {    e.consume();    openPopup();    if (popup != null) {      timeMenuPanel.selectFirstEntry();    }  }  if (enableArrowKeys && e.isActionKey() && e.getKeyCode() == KeyEvent.VK_UP) {    e.consume();    if (upPressed || !isEnabled()) {      return;    }    upPressed=true;    if (getTime() == null) {      setTime(LocalTime.NOON);    }    zInternalTryChangeTimeByIncrement(1);    increaseTimer.start();  }  if (enableArrowKeys && e.isActionKey() && e.getKeyCode() == KeyEvent.VK_DOWN) {    e.consume();    if (downPressed || !isEnabled()) {      return;    }    downPressed=true;    if (getTime() == null) {      setTime(LocalTime.NOON);    }    zInternalTryChangeTimeByIncrement(-1);    decreaseTimer.start();  }}  }
class C{  public static MGRSCoord fromLatLon(Angle latitude,Angle longitude,int precision){  return fromLatLon(latitude,longitude,null,precision);}  }
class C{  public ArtilleryTracker(){  weapons=new Hashtable<Mounted,Vector<ArtilleryModifier>>();}  }
class C{  @Override public boolean isForwardCheckingSupported(){  return false;}  }
class C{  private Object disasmListGetSelectedValue(){  if (disasmListGetSelectedIndex() < 0) {    return null;  }  return disasmList.getModel().getElementAt(disasmListGetSelectedIndex());}  }
class C{  public T caseEventDefinition(EventDefinition object){  return null;}  }
class C{  public void show(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public Cluster(String host,String port,String userName,String userPassword) throws ConnectException {  this.serverName=host;  this.port=port;  this.jmxUserName=userName;  this.jmxUserPassword=userPassword;  this.updater=ClusterDataFactory.getUpdater(this,host,port);}  }
class C{  public ScriptBuilder data(int index,byte[] data){  byte[] copy=Arrays.copyOf(data,data.length);  int opcode;  if (data.length == 0) {    opcode=OP_0;  } else   if (data.length == 1) {    byte b=data[0];    if (b >= 1 && b <= 16)     opcode=Script.encodeToOpN(b); else     opcode=1;  } else   if (data.length < OP_PUSHDATA1) {    opcode=data.length;  } else   if (data.length < 256) {    opcode=OP_PUSHDATA1;  } else   if (data.length < 65536) {    opcode=OP_PUSHDATA2;  } else {    throw new RuntimeException("Unimplemented");  }  return addChunk(index,new ScriptChunk(opcode,copy));}  }
class C{  public ApplyResult<S> apply(Function<S> function){  return phlux.apply(key,function);}  }
class C{  public void acquire(long timeout){synchronized (mToken) {    acquireLocked();    mHandler.postDelayed(mReleaser,timeout);  }}  }
class C{  public static Range find(String value){  return enums.find(value);}  }
class C{  public mxRectangle(){  this(0,0,0,0);}  }
class C{  public float[] generateTransformedValuesBarChart(List<? extends Entry> entries,int dataSet,BarData bd,float phaseY){  float[] valuePoints=new float[entries.size() * 2];  int setCount=bd.getDataSetCount();  float space=bd.getGroupSpace();  for (int j=0; j < valuePoints.length; j+=2) {    Entry e=entries.get(j / 2);    float x=e.getXIndex() + (j / 2 * (setCount - 1)) + dataSet+ space * (j / 2) + space / 2f;    float y=e.getVal();    valuePoints[j]=x;    valuePoints[j + 1]=y * phaseY;  }  pointValuesToPixel(valuePoints);  return valuePoints;}  }
class C{  @Override public Void visitMethod(MethodTree node,Void p){  AnnotatedExecutableType methodType=atypeFactory.getAnnotatedType(node).deepCopy();  AnnotatedDeclaredType preMRT=visitorState.getMethodReceiver();  MethodTree preMT=visitorState.getMethodTree();  visitorState.setMethodReceiver(methodType.getReceiverType());  visitorState.setMethodTree(node);  ExecutableElement methodElement=TreeUtils.elementFromDeclaration(node);  try {    if (InternalUtils.isAnonymousConstructor(node)) {      return null;    }{      boolean anyPurityAnnotation=PurityUtils.hasPurityAnnotation(atypeFactory,node);      boolean checkPurityAlways=checker.hasOption("suggestPureMethods");      boolean checkPurityAnnotations=checker.hasOption("checkPurityAnnotations");      if (checkPurityAnnotations && (anyPurityAnnotation || checkPurityAlways)) {        List<Pure.Kind> kinds=PurityUtils.getPurityKinds(atypeFactory,node);        boolean isDeterministic=kinds.contains(Pure.Kind.DETERMINISTIC);        if (isDeterministic) {          if (TreeUtils.isConstructor(node)) {            checker.report(Result.warning("purity.deterministic.constructor"),node);          } else           if (InternalUtils.typeOf(node.getReturnType()).getKind() == TypeKind.VOID) {            checker.report(Result.warning("purity.deterministic.void.method"),node);          }        }        PurityResult r=PurityChecker.checkPurity(node.getBody(),atypeFactory,checker.hasOption("assumeSideEffectFree"));        if (!r.isPure(kinds)) {          reportPurityErrors(r,node,kinds);        }        if (checkPurityAlways) {          Collection<Pure.Kind> additionalKinds=new HashSet<>(r.getTypes());          additionalKinds.removeAll(kinds);          if (TreeUtils.isConstructor(node)) {            additionalKinds.remove(Pure.Kind.DETERMINISTIC);          }          if (!additionalKinds.isEmpty()) {            if (additionalKinds.size() == 2) {              checker.report(Result.warning("purity.more.pure",node.getName()),node);            } else             if (additionalKinds.contains(Pure.Kind.SIDE_EFFECT_FREE)) {              checker.report(Result.warning("purity.more.sideeffectfree",node.getName()),node);            } else             if (additionalKinds.contains(Pure.Kind.DETERMINISTIC)) {              checker.report(Result.warning("purity.more.deterministic",node.getName()),node);            } else {              assert false : "BaseTypeVisitor reached undesirable state";            }          }        }      }    }    validateTypeOf(node);    for (    ExpressionTree thr : node.getThrows()) {      validateTypeOf(thr);    }    AnnotatedDeclaredType enclosingType=(AnnotatedDeclaredType)atypeFactory.getAnnotatedType(methodElement.getEnclosingElement());    Map<AnnotatedDeclaredType,ExecutableElement> overriddenMethods=AnnotatedTypes.overriddenMethods(elements,atypeFactory,methodElement);    for (    Map.Entry<AnnotatedDeclaredType,ExecutableElement> pair : overriddenMethods.entrySet()) {      AnnotatedDeclaredType overriddenType=pair.getKey();      AnnotatedExecutableType overriddenMethod=AnnotatedTypes.asMemberOf(types,atypeFactory,overriddenType,pair.getValue());      if (!checkOverride(node,enclosingType,overriddenMethod,overriddenType,p)) {        break;      }    }    return super.visitMethod(node,p);  }  finally {    boolean abstractMethod=methodElement.getModifiers().contains(Modifier.ABSTRACT) || methodElement.getModifiers().contains(Modifier.NATIVE);    if (!abstractMethod) {      checkPostconditions(node,methodElement);      checkConditionalPostconditions(node,methodElement);    }    List<String> formalParamNames=verifyParameterAnnotationsForParameterNames(node);    checkPreconditionsConsistency(node,methodElement,formalParamNames);    checkPostconditionsConsistency(node,methodElement,formalParamNames);    checkConditionalPostconditionsConsistency(node,methodElement,formalParamNames);    visitorState.setMethodReceiver(preMRT);    visitorState.setMethodTree(preMT);  }}  }
class C{  static Object createObject(String factoryId,String fallbackClassName) throws ConfigurationError {  return createObject(factoryId,null,fallbackClassName);}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    for (    FieldNode f : fields) {      f.check(api);    }    for (    MethodNode m : methods) {      m.check(api);    }  }}  }
class C{  void revokeRole(Role role){  if (grantedRoles == null) {    return;  }  Right right=grantedRoles.get(role);  if (right == null) {    return;  }  grantedRoles.remove(role);  if (grantedRoles.size() == 0) {    grantedRoles=null;  }}  }
class C{  private static void enhanceOrderingData(DocumentOrderingWrapper[] wrappers) throws CircularDependencyException {  for (int i=0; i < wrappers.length; i++) {    DocumentOrderingWrapper w=wrappers[i];    for (    String id : w.getBeforeIds()) {      if (OTHERS_KEY.equals(id)) {        continue;      }      for (int ii=0; ii < wrappers.length; ii++) {        DocumentOrderingWrapper other=wrappers[ii];        if (id.equals(other.id)) {          String[] afterIds=other.getAfterIds();          if (Arrays.binarySearch(afterIds,w.id) < 0) {            Set<String> newAfterIds=new HashSet<>(afterIds.length + 1);            newAfterIds.addAll(Arrays.asList(afterIds));            newAfterIds.add(w.id);            other.afterIds=newAfterIds.toArray(new String[newAfterIds.size()]);            Arrays.sort(other.afterIds);          }          String[] otherBeforeIds=other.getBeforeIds();          if (otherBeforeIds.length > 0) {            String[] currentBeforeIds=w.getBeforeIds();            Set<String> newBeforeIds=new HashSet<>();            newBeforeIds.addAll(Arrays.asList(currentBeforeIds));            for (            String bid : otherBeforeIds) {              if (OTHERS_KEY.equals(bid)) {                continue;              }              newBeforeIds.add(bid);            }            String[] temp=newBeforeIds.toArray(new String[newBeforeIds.size()]);            Arrays.sort(temp);            if (search(temp,w.id)) {              throw new CircularDependencyException();            }            w.beforeIds=temp;          }        }      }    }    for (    String id : w.getAfterIds()) {      if (OTHERS_KEY.equals(id)) {        continue;      }      for (int ii=0; ii < wrappers.length; ii++) {        DocumentOrderingWrapper other=wrappers[ii];        if (id.equals(other.id)) {          String[] beforeIds=other.getBeforeIds();          if (Arrays.binarySearch(beforeIds,w.id) < 0) {            Set<String> newBeforeIds=new HashSet<>(beforeIds.length + 1);            newBeforeIds.addAll(Arrays.asList(beforeIds));            newBeforeIds.add(w.id);            other.beforeIds=newBeforeIds.toArray(new String[newBeforeIds.size()]);            Arrays.sort(other.beforeIds);          }          String[] otherAfterIds=other.getAfterIds();          if (otherAfterIds.length > 0) {            String[] currentAfterIds=w.getAfterIds();            Set<String> newAfterIds=new HashSet<>();            newAfterIds.addAll(Arrays.asList(currentAfterIds));            for (            String bid : otherAfterIds) {              if (OTHERS_KEY.equals(bid)) {                continue;              }              newAfterIds.add(bid);            }            String[] temp=newAfterIds.toArray(new String[newAfterIds.size()]);            Arrays.sort(temp);            if (search(temp,w.id)) {              throw new CircularDependencyException();            }            w.afterIds=temp;          }        }      }    }  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("CStatementVO[");  sb.append("SQL=" + getSql());  if (m_trxName != null)   sb.append(" TrxName=" + m_trxName);  sb.append("]");  return sb.toString();}  }
class C{  void editPressed(ActionEvent e){  String sName=_systemName.getText().toUpperCase();  SignalGroup g=jmri.InstanceManager.getDefault(jmri.SignalGroupManager.class).getBySystemName(sName);  if (g == null) {    return;  }  g.addPropertyChangeListener(this);  curSignalGroup=g;  jmri.SignalMast sh=jmri.InstanceManager.getDefault(jmri.SignalMastManager.class).getSignalMast(g.getSignalMastName());  if (sh != null) {    java.util.Vector<String> appear=sh.getValidAspects();    _mastAppearancesList=new ArrayList<SignalMastAppearances>(appear.size());    for (int i=0; i < appear.size(); i++) {      _mastAppearancesList.add(new SignalMastAppearances(appear.get(i)));    }  } else {    log.error("Failed to get signal mast {}",g.getSignalMastName());  }  fixedSystemName.setText(sName);  fixedSystemName.setVisible(true);  _systemName.setVisible(false);  mainSignal.setSelectedBean(g.getSignalMast());  _userName.setText(g.getUserName());  int setRow=0;  for (int i=_signalList.size() - 1; i >= 0; i--) {    SignalGroupSignal signal=_signalList.get(i);    SignalHead sigBean=signal.getBean();    if (g.isSignalIncluded(sigBean)) {      signal.setIncluded(true);      signal.setOnState(g.getSignalHeadOnState(sigBean));      signal.setOffState(g.getSignalHeadOffState(sigBean));      setRow=i;    } else {      signal.setIncluded(false);    }  }  _SignalGroupSignalScrollPane.getVerticalScrollBar().setValue(setRow * ROW_HEIGHT);  _SignalGroupSignalModel.fireTableDataChanged();  for (int i=0; i < _mastAppearancesList.size(); i++) {    SignalMastAppearances appearance=_mastAppearancesList.get(i);    String app=appearance.getAppearance();    if (g.isSignalMastAppearanceIncluded(app)) {      appearance.setIncluded(true);      setRow=i;    } else {      appearance.setIncluded(false);    }  }  _SignalAppearanceScrollPane.getVerticalScrollBar().setValue(setRow * ROW_HEIGHT);  _AppearanceModel.fireTableDataChanged();  initializeIncludedList();  SignalGroupDirty=true;  updateButton.setVisible(true);  fixedSystemName.setVisible(true);  _systemName.setVisible(false);  editMode=true;}  }
class C{  private int enumerateGeneric(Object[] enumeration,boolean recurse,int enumerationIndex,boolean enumeratingThreads){  checkAccess();  Object[] immediateCollection=enumeratingThreads ? (Object[])childrenThreads : (Object[])childrenGroups;  Object syncLock=enumeratingThreads ? childrenThreadsLock : childrenGroupsLock;synchronized (syncLock) {    for (int i=enumeratingThreads ? numThreads : numGroups; --i >= 0; ) {      if (!enumeratingThreads || ((Thread)immediateCollection[i]).isAlive()) {        if (enumerationIndex >= enumeration.length) {          return enumerationIndex;        }        enumeration[enumerationIndex++]=immediateCollection[i];      }    }  }  if (recurse) {synchronized (this.childrenGroupsLock) {      for (int i=0; i < numGroups; i++) {        if (enumerationIndex >= enumeration.length) {          return enumerationIndex;        }        enumerationIndex=childrenGroups[i].enumerateGeneric(enumeration,recurse,enumerationIndex,enumeratingThreads);      }    }  }  return enumerationIndex;}  }
class C{  public String localMoveCar(Car car,boolean isManifest){  StringBuffer buf=new StringBuffer();  String[] format;  if (isManifest) {    format=Setup.getLocalManifestMessageFormat();  } else {    format=Setup.getLocalSwitchListMessageFormat();  }  for (  String attribute : format) {    String s=getCarAttribute(car,attribute,!PICKUP,LOCAL);    buf.append(s);  }  return buf.toString();}  }
class C{  private void processAddIsiExport(IsilonApi isi,FileDeviceInputOutput args,List<ExportRule> exports) throws IsilonException {  _log.info("ProcessAddExport  Start");  List<ExportRule> modifyRules=new ArrayList<>();  for (  ExportRule exportRule : exports) {    _log.info("Add this export rule {}",exportRule.toString());    String root_user=exportRule.getAnon();    Set<String> rootHosts=exportRule.getRootHosts();    String isilonExportId=exportRule.getDeviceExportId();    String zoneName=getZoneName(args.getvNAS());    if (isilonExportId != null) {      _log.info("Export rule exists on the device so modify it: {}",exportRule);      modifyRules.add(exportRule);    } else {      List<String> allClients=new ArrayList<>();      _log.info("Export rule does not exist on the device so create it: {}",exportRule);      IsilonExport newIsilonExport=setIsilonExport(exportRule);      String expId=null;      if (zoneName != null) {        expId=isi.createExport(newIsilonExport,zoneName);      } else {        expId=isi.createExport(newIsilonExport);      }      exportRule.setDeviceExportId(expId);    }    if (!modifyRules.isEmpty()) {      processIsiExport(isi,args,modifyRules);    }  }  _log.info("ProcessAddExport  Completed");}  }
class C{  public void valueChanged(ListSelectionEvent e){  TimeSeries ts;  int[] selIDs;  plotter.removeAllSeries();  selIDs=tblPids.getSelectedRows();  for (int i=0; i < selIDs.length; i++) {    EcuDataPv currPid=(EcuDataPv)tblPids.getModel().getValueAt(selIDs[i],EcuDataPv.FID_PID);    ts=selPids.get(currPid.get(EcuDataPv.FID_PID));    if (ts != null) {      plotter.addSeries(ts);    }  }}  }
class C{  void traceError(Throwable e){  if (trace) {    e.printStackTrace();  }}  }
class C{  public void registerHandler(String handlerName,BridgeHandler handler){  if (handler != null) {    bridgeWebViewClient.messageHandlers.put(handlerName,handler);  }}  }
class C{  public JsonObject add(String name,String value){  add(name,valueOf(value));  return this;}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public TermNode left(){  return (TermNode)super.getRequiredProperty(Annotations.LEFT_TERM);}  }
class C{  private void stopGps(boolean stop){  unregisterLocationListener();  showNotification(false);  releaseWakeLock();  if (stop) {    stopSelf();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  UIManager uiMgr=stack.getUIMgr();  if (uiMgr != null && uiMgr.getUIClientType() == UIClient.REMOTE_UI) {    MiniClientSageRenderer mcsr=(MiniClientSageRenderer)uiMgr.getRootPanel().getRenderEngine();    if (mcsr.isMediaExtender()) {      if (mcsr.isSupportedVideoCodec("MPEG2-VIDEO@HL"))       return Sage.rez(mcsr.isStandaloneMediaPlayer() ? "HD_Media_Player" : "HD_Media_Extender"); else       return Sage.rez("SD_Media_Extender");    } else     return Sage.rez("Placeshifter");  }  return Sage.rez("Local");}  }
class C{  public Result runValidators(){  Result result=null;  for (  final AccountParameterValidator validator : this) {    result=validator.validate();    if (result != null) {      break;    }  }  return result;}  }
class C{  protected void endDrawing(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  if (!dc.isPickingMode())   dc.endStandardLighting();  gl.glPopAttrib();}  }
class C{  public SetSpeed(int playerId,String speed){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("speed",speed);}  }
class C{  public void performImmediately(TransactionBuilder builder) throws IOException {  if (!isConnected()) {    throw new IOException("Not connected to device: " + getDevice());  }  getQueue().insert(builder.getTransaction());}  }
class C{  private String addDefaultProfile(){  String profile=System.getProperty("spring.profiles.active");  if (profile != null) {    log.info("Running with Spring profile(s) : {}",profile);    return profile;  }  log.warn("No Spring profile configured, running with default configuration");  return Constants.SPRING_PROFILE_DEVELOPMENT;}  }
class C{  public void draw(Canvas canvas){  canvas.drawLine(mLeftX,mY,mRightX,mY,mBarPaint);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.VARIABLE_DEFINITION__INITIAL_VALUE:    return basicSetInitialValue(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected Scheduler _refreshJobSchedule(Scheduler scheduler) throws IllegalStateException {  _disposeScheduler(scheduler);  String schedulerName=null;  Properties props=new Properties();  props.put(QUARTZ_THREADPOOL_COUNT,_configuration.getValue(Property.QUARTZ_THREADPOOL_COUNT.getName(),Property.QUARTZ_THREADPOOL_COUNT.getDefaultValue()));  props.put(QUARTZ_THREAD_PRIORITY,QUARTZ_THREAD_PRIORITY_VALUE);  props.put(StdSchedulerFactory.PROP_SCHED_SCHEDULER_THREADS_INHERIT_CONTEXT_CLASS_LOADER_OF_INITIALIZING_THREAD,true);switch (Thread.currentThread().getName()) {case "schedule-alerts":default :    schedulerName="AlertScheduler";}props.put(StdSchedulerFactory.PROP_SCHED_INSTANCE_NAME,schedulerName);SchedulerFactory schedulerFactory;Scheduler result=null;try {  schedulerFactory=new StdSchedulerFactory(props);  result=schedulerFactory.getScheduler();} catch (Exception e) {  _logger.error("Exception in setting up scheduler: {}",e);  return result;}for (CronJob job : getEnabledJobs()) {  _logger.debug("Adding job to scheduler: {}",job);  try {    String quartzCronEntry="0 " + job.getCronEntry().substring(0,job.getCronEntry().length() - 1) + "?";    JobDetail jobDetail=JobBuilder.newJob(RunnableJob.class).build();    CronTrigger cronTrigger=TriggerBuilder.newTrigger().withSchedule(CronScheduleBuilder.cronSchedule(quartzCronEntry)).build();    jobDetail.getJobDataMap().put(RunnableJob.CRON_JOB,job);    jobDetail.getJobDataMap().put(RunnableJob.LOCK_TYPE,lockType);    jobDetail.getJobDataMap().put("AlertService",_alertService);    jobDetail.getJobDataMap().put("AuditService",_auditService);    result.scheduleJob(jobDetail,cronTrigger);  } catch (  Exception ex) {    String msg="Failed to schedule job {0} : {1}";    JPAEntity entity=JPAEntity.class.cast(job);    _auditService.createAudit(msg,entity,entity,ex.getMessage());    _logger.error("Failed to schedule job {} : {}",job,ex.getMessage());  }}try {  result.start();} catch (SchedulerException e) {  _logger.error("Exception in starting scheduler: {}",e);}_logger.info("Job schedule refreshed.");return result;}  }
class C{  public void paintDesktopIconBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static ScalingUtils.ScaleType defaultValue(){  return ScalingUtils.ScaleType.CENTER_CROP;}  }
class C{  public static boolean isLargeFrameIcons(){  return (getOperatingSystem() == OS_SOLARIS) || (getOperatingSystem() == OS_HP);}  }
class C{  protected static String makeOptionString(Classifier classifier,boolean globalInfo){  StringBuffer optionsText=new StringBuffer("");  optionsText.append("\n\nGeneral options:\n\n");  optionsText.append("-h or -help\n");  optionsText.append("\tOutput help information.\n");  optionsText.append("-synopsis or -info\n");  optionsText.append("\tOutput synopsis for classifier (use in conjunction " + " with -h)\n");  optionsText.append("-t <name of training file>\n");  optionsText.append("\tSets training file.\n");  optionsText.append("-T <name of test file>\n");  optionsText.append("\tSets test file. If missing, a cross-validation will be performed\n");  optionsText.append("\ton the training data.\n");  optionsText.append("-c <class index>\n");  optionsText.append("\tSets index of class attribute (default: last).\n");  optionsText.append("-x <number of folds>\n");  optionsText.append("\tSets number of folds for cross-validation (default: 10).\n");  optionsText.append("-no-cv\n");  optionsText.append("\tDo not perform any cross validation.\n");  optionsText.append("-force-batch-training\n");  optionsText.append("\tAlways train classifier in batch mode, never incrementally.\n");  optionsText.append("-split-percentage <percentage>\n");  optionsText.append("\tSets the percentage for the train/test set split, e.g., 66.\n");  optionsText.append("-preserve-order\n");  optionsText.append("\tPreserves the order in the percentage split.\n");  optionsText.append("-s <random number seed>\n");  optionsText.append("\tSets random number seed for cross-validation or percentage split\n");  optionsText.append("\t(default: 1).\n");  optionsText.append("-m <name of file with cost matrix>\n");  optionsText.append("\tSets file with cost matrix.\n");  optionsText.append("-disable <comma-separated list of evaluation metric names>\n");  optionsText.append("\tComma separated list of metric names not to print to the output.\n\t");  optionsText.append("Available metrics:\n\t");  List<String> metricsToDisplay=new ArrayList<String>(Arrays.asList(BUILT_IN_EVAL_METRICS));  List<AbstractEvaluationMetric> pluginMetrics=AbstractEvaluationMetric.getPluginMetrics();  if (pluginMetrics != null) {    for (    AbstractEvaluationMetric m : pluginMetrics) {      if (m instanceof InformationRetrievalEvaluationMetric) {        List<String> statNames=m.getStatisticNames();        for (        String s : statNames) {          metricsToDisplay.add(s.toLowerCase());        }      } else {        metricsToDisplay.add(m.getMetricName().toLowerCase());      }    }  }  int length=0;  for (int i=0; i < metricsToDisplay.size(); i++) {    optionsText.append(metricsToDisplay.get(i));    length+=metricsToDisplay.get(i).length();    if (i != metricsToDisplay.size() - 1) {      optionsText.append(",");    }    if (length >= 60) {      optionsText.append("\n\t");      length=0;    }  }  optionsText.append("\n");  optionsText.append("-l <name of input file>\n");  optionsText.append("\tSets model input file. In case the filename ends with '.xml',\n");  optionsText.append("\ta PMML file is loaded or, if that fails, options are loaded\n");  optionsText.append("\tfrom the XML file.\n");  optionsText.append("-d <name of output file>\n");  optionsText.append("\tSets model output file. In case the filename ends with '.xml',\n");  optionsText.append("\tonly the options are saved to the XML file, not the model.\n");  optionsText.append("-v\n");  optionsText.append("\tOutputs no statistics for training data.\n");  optionsText.append("-o\n");  optionsText.append("\tOutputs statistics only, not the classifier.\n");  optionsText.append("-do-not-output-per-class-statistics\n");  optionsText.append("\tDo not output statistics for each class.\n");  optionsText.append("-k\n");  optionsText.append("\tOutputs information-theoretic statistics.\n");  optionsText.append("-classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"\n");  optionsText.append("\tUses the specified class for generating the classification output.\n");  optionsText.append("\tE.g.: " + PlainText.class.getName() + "\n");  optionsText.append("-p range\n");  optionsText.append("\tOutputs predictions for test instances (or the train instances if\n");  optionsText.append("\tno test instances provided and -no-cv is used), along with the \n");  optionsText.append("\tattributes in the specified range (and nothing else). \n");  optionsText.append("\tUse '-p 0' if no attributes are desired.\n");  optionsText.append("\tDeprecated: use \"-classifications ...\" instead.\n");  optionsText.append("-distribution\n");  optionsText.append("\tOutputs the distribution instead of only the prediction\n");  optionsText.append("\tin conjunction with the '-p' option (only nominal classes).\n");  optionsText.append("\tDeprecated: use \"-classifications ...\" instead.\n");  optionsText.append("-r\n");  optionsText.append("\tOnly outputs cumulative margin distribution.\n");  if (classifier instanceof Sourcable) {    optionsText.append("-z <class name>\n");    optionsText.append("\tOnly outputs the source representation" + " of the classifier,\n\tgiving it the supplied" + " name.\n");  }  if (classifier instanceof Drawable) {    optionsText.append("-g\n");    optionsText.append("\tOnly outputs the graph representation" + " of the classifier.\n");  }  optionsText.append("-xml filename | xml-string\n");  optionsText.append("\tRetrieves the options from the XML-data instead of the " + "command line.\n");  optionsText.append("-threshold-file <file>\n");  optionsText.append("\tThe file to save the threshold data to.\n" + "\tThe format is determined by the extensions, e.g., '.arff' for ARFF \n" + "\tformat or '.csv' for CSV.\n");  optionsText.append("-threshold-label <label>\n");  optionsText.append("\tThe class label to determine the threshold data for\n" + "\t(default is the first label)\n");  optionsText.append("-no-predictions\n");  optionsText.append("\tTurns off the collection of predictions in order to conserve memory.\n");  if (classifier instanceof OptionHandler) {    optionsText.append("\nOptions specific to " + classifier.getClass().getName() + ":\n\n");    Enumeration<Option> enu=((OptionHandler)classifier).listOptions();    while (enu.hasMoreElements()) {      Option option=enu.nextElement();      optionsText.append(option.synopsis() + '\n');      optionsText.append(option.description() + "\n");    }  }  if (globalInfo) {    try {      String gi=getGlobalInfo(classifier);      optionsText.append(gi);    } catch (    Exception ex) {    }  }  return optionsText.toString();}  }
class C{  public void testKeyPairGenerator01() throws NoSuchAlgorithmException {  try {    KeyPairGenerator.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException must be thrown  when algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyPairGenerator.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown when algorithm is not available: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-26 13:02:44.105 -0500",hash_original_method="1BC421727B0F94C50EAEE7BC616B5B58",hash_generated_method="CE01F05C6786045C2F7150FEB6BADB2E") public boolean hasAccess(int uid){  return Display.hasAccess(uid,flags,ownerUid);}  }
class C{  private void advanceRow(){  ((NumericTable)table.getData()).updateCurrentRow();  table.updateRowSelection();  table.scrollRectToVisible(table.getCellRect(((NumericTable)table.getData()).getCurrentRow(),table.getColumnCount(),true));}  }
class C{  protected Stream<IChangeRecord> materialize(final int n,final IChangeRecord[] a){  final AbstractTripleStore db=cxn().getTripleStore();  int nRemoves=0;  final ISPO[] spos=new ISPO[n];  for (int i=0; i < n; i++) {    if (a[i].getChangeAction() == ChangeAction.REMOVED)     spos[nRemoves++]=a[i].getStatement();  }  final BigdataStatementIterator it=db.asStatementIterator(new ChunkedArrayIterator<ISPO>(nRemoves,spos,null));  return Arrays.stream(a,0,n).onClose(null).map(null);}  }
class C{  public NodeBuilder local(boolean local){  settings.put("node.local",local);  return this;}  }
class C{  @SuppressWarnings("unchecked") public <T extends IAbstractNodeData>T encodeLive(final T node){  if (node == null)   throw new IllegalArgumentException();  if (node.isCoded()) {    throw new IllegalStateException();  }  if (_writeBuffer == null) {    allocWriteBuffer();  } else {    _writeBuffer.reset();  }  final T codedNode;  if (node.isLeaf()) {    codedNode=(T)leafCoder.encodeLive((ILeafData)node,_writeBuffer);  } else {    codedNode=(T)nodeCoder.encodeLive((INodeData)node,_writeBuffer);  }  _writeBuffer=new DataOutputBuffer(0,_writeBuffer.trim());  return codedNode;}  }
class C{  public Single<Boolean> isBookmarkable(FeedFilter filter){  if (filter.isBasic())   return Single.just(false);  if (filter.getLikes().isPresent())   return Single.just(false);  return database.asSingle().map(null);}  }
class C{  public static void generatePushAllRegisters(final ITranslationEnvironment environment,final long baseOffset,final OperandSize size,final List<ReilInstruction> instructions) throws IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(size,"Error: Argument size can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument((size == OperandSize.WORD) || (size == OperandSize.DWORD),"Error: Invalid size argument");  long offset=baseOffset;  final OperandSize archSize=environment.getArchitectureSize();  final String tempEsp=environment.getNextVariableString();  instructions.add(ReilHelpers.createStr(offset,archSize,"esp",archSize,tempEsp));  generateRegisterPush(environment,offset + 1,"eax",size,instructions);  offset=baseOffset + instructions.size();  generateRegisterPush(environment,offset,"ebx",size,instructions);  offset=baseOffset + instructions.size();  generateRegisterPush(environment,offset,"ecx",size,instructions);  offset=baseOffset + instructions.size();  generateRegisterPush(environment,offset,"edx",size,instructions);  offset=baseOffset + instructions.size();  generateRegisterPush(environment,offset,tempEsp,size,instructions);  offset=baseOffset + instructions.size();  generateRegisterPush(environment,offset,"ebp",size,instructions);  offset=baseOffset + instructions.size();  generateRegisterPush(environment,offset,"esi",size,instructions);  offset=baseOffset + instructions.size();  generateRegisterPush(environment,offset,"edi",size,instructions);  offset=baseOffset + instructions.size();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int nextInt(int n,double p){  double x=p / (1.0 - p);  double p1=p;  double y=x * this.gamma.nextDouble(n,1.0);  return this.poisson.nextInt(y);}  }
class C{  public int[] lookupPixel(int[] src,int[] dst){  if (dst == null) {    dst=new int[src.length];  }  if (numComponents == 1) {    for (int i=0; i < src.length; i++) {      int s=(src[i] & 0xffff) - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=(int)data[0][s];    }  } else {    for (int i=0; i < src.length; i++) {      int s=(src[i] & 0xffff) - offset;      if (s < 0) {        throw new ArrayIndexOutOfBoundsException("src[" + i + "]-offset is "+ "less than zero");      }      dst[i]=(int)data[i][s];    }  }  return dst;}  }
class C{  public static void assertLabel(String text){  if (verbose) {    log("assertLabel(" + text + ")");  }  Label l=findLabelText(text);  assertBool(l != null,"Null label " + text);}  }
class C{  protected void assertState(String collection,CdcrParams.ProcessState processState,CdcrParams.BufferState bufferState) throws Exception {  this.waitForCdcrStateReplication(collection);  for (  CloudJettyRunner jetty : cloudJettys.get(collection)) {    NamedList rsp=invokeCdcrAction(jetty,CdcrParams.CdcrAction.STATUS);    NamedList status=(NamedList)rsp.get(CdcrParams.CdcrAction.STATUS.toLower());    assertEquals(processState.toLower(),status.get(CdcrParams.ProcessState.getParam()));    assertEquals(bufferState.toLower(),status.get(CdcrParams.BufferState.getParam()));  }}  }
class C{  public static void checkNoMatchExplanations(Query q,String defaultFieldName,IndexSearcher searcher,int[] results) throws IOException {  String d=q.toString(defaultFieldName);  Set<Integer> ignore=new TreeSet<>();  for (int i=0; i < results.length; i++) {    ignore.add(Integer.valueOf(results[i]));  }  int maxDoc=searcher.getIndexReader().maxDoc();  for (int doc=0; doc < maxDoc; doc++) {    if (ignore.contains(Integer.valueOf(doc)))     continue;    Explanation exp=searcher.explain(q,doc);    Assert.assertNotNull("Explanation of [[" + d + "]] for #"+ doc+ " is null",exp);    Assert.assertFalse("Explanation of [[" + d + "]] for #"+ doc+ " doesn't indicate non-match: "+ exp.toString(),exp.isMatch());  }}  }
class C{  public void broadcast(ChannelMapEvent event){  if (event.getEvent() == ChannelMapEvent.Event.CHANGE || event.getEvent() == ChannelMapEvent.Event.RENAME) {    int index=mChannelMaps.indexOf(event.getChannelMap());    if (index >= 0) {      fireContentsChanged(this,index,index);    }  }  mEventBroadcaster.broadcast(event);}  }
class C{  @Override public void connectionNotification(String eventName,Object source){  if (connectionAllowed(eventName)) {    m_listenee=source;  }}  }
class C{  int processAwaitingOrders(final Logger log,final List<String> productSkus,final String status,final String event){  int cnt=0;  final List<Long> awaitingDeliveries=customerOrderService.findAwaitingDeliveriesIds(productSkus,status,Arrays.asList(CustomerOrder.ORDER_STATUS_IN_PROGRESS,CustomerOrder.ORDER_STATUS_PARTIALLY_SHIPPED));  try {    for (    final Long deliveryId : awaitingDeliveries) {      try {        proxy().processDeliveryEvent(event,deliveryId);      } catch (      OrderException oexp) {        log.warn("Cannot process delivery " + deliveryId,oexp);      }catch (      Exception exp) {        log.error("Cannot process delivery " + deliveryId,exp);      }    }  } catch (  Exception exp) {    log.error(exp.getMessage(),exp);  }  return cnt;}  }
class C{  public void assertNotSame(Object expected,Object actual){  TestUtils.assertNotSame(expected,actual);}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  private void showInternalServerErrorMessage(){  CommonDialogUtils.stopProgressDialog(progressDialog);  CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_connection_error),getResources().getString(R.string.error_internal_server),getResources().getString(R.string.button_ok),null);}  }
class C{  @Override protected void processRememberedSets(){  if (modBuffer != null) {    logMessage(5,"clearing modBuffer");    while (!modBuffer.isEmpty()) {      ObjectReference src=modBuffer.pop();      HeaderByte.markAsUnlogged(src);    }  }}  }
class C{  public String decode(String pString) throws DecoderException {  if (pString == null) {    return null;  }  try {    return decode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  private void loadConfig(String path){  File file=new File(path);  if (!file.exists()) {    JOptionPane.showMessageDialog(this,"The config file does not exist!","File does not exist",JOptionPane.ERROR_MESSAGE);    return;  }  if (!file.isDirectory() && file.canRead()) {    JSONParser parser=new JSONParser();    try {      FileReader fr=new FileReader(file);      JSONObject json_conf=(JSONObject)parser.parse(fr);      openIDActive=(boolean)json_conf.get("OpenIDActive");      openID1.setSelected(openIDActive);      openIDConnectActive=(boolean)json_conf.get("OpenIDConnectActive");      openIDConnect1.setSelected(openIDConnectActive);      oAuthActive=(boolean)json_conf.get("OAuthActive");      oAuth.setSelected(oAuthActive);      facebookConnectActive=(boolean)json_conf.get("FacebookConnectActive");      facebookConnect.setSelected(facebookConnectActive);      browserIDActive=(boolean)json_conf.get("BrowserIDActive");      browserID1.setSelected(browserIDActive);      samlActive=(boolean)json_conf.get("SAMLActive");      saml1.setSelected(samlActive);      msAccountActive=(boolean)json_conf.get("MicrosoftAccountActive");      msAccount.setSelected(msAccountActive);      boolean asp=(boolean)json_conf.get("SSOActive");      activeSSOProtocols.setSelected(asp);      if (!asp) {        oAuth.setEnabled(false);        facebookConnect.setEnabled(false);        saml1.setEnabled(false);        openID1.setEnabled(false);        openIDConnect1.setEnabled(false);        browserID1.setEnabled(false);        msAccount.setEnabled(false);      }      highlightBool=(boolean)json_conf.get("HighlightActive");      highlightSSO.setSelected(highlightBool);      String str=(String)json_conf.get("Schema");      schemaText1.setText(str);      str=(String)json_conf.get("Certificate");      certText1.setText(str);      str=(String)json_conf.get("Private Key");      privKeyText1.setText(str);      str=(String)json_conf.get("Public Key");      pubKeyText1.setText(str);      str=(String)json_conf.get("Input Script");      scriptInText1.setText(str);      str=(String)json_conf.get("Output Script");      scriptOutText1.setText(str);      str=(String)json_conf.get("Libraries");      libText1.setText(str);      str=(String)json_conf.get("Config");      LoggingLevel=((Long)json_conf.get("LogLvl")).intValue();      logginglvlComboBox.setSelectedIndex(LoggingLevel);    } catch (    IOException ex) {      JOptionPane.showMessageDialog(this,"Can not read the config file!\n\nError:\n" + ex.toString(),"Can not read config file",JOptionPane.ERROR_MESSAGE);      Logging.getInstance().log(getClass(),ex);    }catch (    ParseException ex) {      JOptionPane.showMessageDialog(this,"The content can not be parsed!\n\nError:\n" + ex.toString(),"JSON Parsing Error",JOptionPane.ERROR_MESSAGE);      Logging.getInstance().log(getClass(),ex);    }catch (    Exception ex) {      Logging.getInstance().log(getClass(),ex);    }  } else {    JOptionPane.showMessageDialog(this,"The file:\n" + path + "\n is not readable or directory.","File not Found!",JOptionPane.ERROR_MESSAGE);    Logging.getInstance().log(getClass(),"The file:\n" + path + "\n is not readable or directory.",Logging.ERROR);  }  saveConfig(path);  Logging.getInstance().log(getClass(),"The config from " + path + " is now loaded.",Logging.INFO);}  }
class C{  public ReferenceCount increment(){  return new ReferenceCount(this.getRaw() + 1);}  }
class C{  public OMGraphic createGraphic(int renderType,int lineType){  OMGraphic g=null;switch (renderType) {case (OMGraphic.RENDERTYPE_LATLON):    g=new LabeledOMPoly(new double[0],OMGraphic.RADIANS,lineType);  break;case (OMGraphic.RENDERTYPE_OFFSET):g=new LabeledOMPoly(90f,-180f,new int[0],OMPoly.COORDMODE_ORIGIN);break;default :g=new LabeledOMPoly(new int[0]);}((LabeledOMPoly)g).setDoShapes(true);return g;}  }
class C{  public static <T>Callable<T> memoizeCallable(Callable<T> s,Cacheable<T> cache){  return null;}  }
class C{  public static String checkLong(EventType type,String longFieldName){  Class clazz=getClass(type,longFieldName);  if (clazz == null) {    return "Parent view does not contain a field named '" + longFieldName + '\'';  }  if ((clazz != Long.class) && (clazz != long.class)) {    return "Parent view field named '" + longFieldName + "' is not of type long";  }  return checkFieldNumeric(type,longFieldName);}  }
class C{  public boolean hasMore() throws IOException {  loadCache(0);  return (cachePosition < cacheSize) || upcomingToken.type != Tokenizer.TT_ERROR || pushCount > 0;}  }
class C{  private boolean updateHeader(){  log.fine("");  String sql="UPDATE M_Requisition r" + " SET TotalLines=" + "(SELECT COALESCE(SUM(LineNetAmt),0) FROM M_RequisitionLine rl "+ "WHERE r.M_Requisition_ID=rl.M_Requisition_ID) "+ "WHERE M_Requisition_ID=?";  int no=DB.executeUpdateEx(sql,new Object[]{getM_Requisition_ID()},get_TrxName());  if (no != 1)   log.log(Level.SEVERE,"Header update #" + no);  m_parent=null;  return no == 1;}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public GridInternalException(String msg){  super(msg);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:40.082 -0500",hash_original_method="BE22582F45632E0BED7FA33E3D9F0EE8",hash_generated_method="F6F8BD7FBA472C986BE96F01F2A83000") public boolean requiresCell(){  return mRequiresCell;}  }
class C{  public static double roundTo(double value,double scale){  return Math.round(value / scale) * scale;}  }
class C{  private void purge(){  File[] files=BASE.listFiles();  int count=files.length - MAX_FILES;  if (count > 0) {    Arrays.sort(files);    for (int i=0; i < count; i++) {      if (!files[i].delete()) {        Slog.w(LOG_TAG,"Couldn't delete " + files[i] + ".");      }    }  }}  }
class C{  public Polygon(LinearRing shell,PrecisionModel precisionModel,int SRID){  this(shell,new LinearRing[]{},new GeometryFactory(precisionModel,SRID));}  }
class C{  public void append(StringBuffer buffer,String fieldName,Object value,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (value == null) {    appendNullText(buffer,fieldName);  } else {    appendInternal(buffer,fieldName,value,isFullDetail(fullDetail));  }  appendFieldEnd(buffer,fieldName);}  }
class C{  protected void checkProductivity(){  if (this.bProductivityChecked)   return;  List<NonTerminal> result=new LinkedList<NonTerminal>();  List<Production> P=this.getProductions();  Hashtable<Production,Integer> count=new Hashtable<Production,Integer>();  List<NonTerminal> N=this.getNonTerminals();  Hashtable<NonTerminal,LinkedList<Production>> rhs=new Hashtable<NonTerminal,LinkedList<Production>>();  for (  NonTerminal A : N) {    rhs.put(A,new LinkedList<Production>());  }  for (  Production Ai : P) {    int iNumberOfNonTerminals=0;    for (    Symbol s : Ai.getRHS()) {      if (s instanceof NonTerminal) {        iNumberOfNonTerminals++;        LinkedList<Production> productionsWithSonRhs=rhs.get(s);        productionsWithSonRhs.addFirst(Ai);      }    }    count.put(Ai,iNumberOfNonTerminals);  }  LinkedList<Production> W=new LinkedList<Production>();  for (  Entry<Production,Integer> r : count.entrySet()) {    if (r.getValue().equals(0)) {      if (DEBUG)       System.out.println("working set entry: " + r.getKey());      W.add(r.getKey());    }  }  while (W.size() > 0) {    Production Ai=W.removeFirst();    NonTerminal A=Ai.getLHS();    if (!(result.contains(A))) {      result.add(A);      if (DEBUG)       System.out.println(A + " productive");      for (      Production r : rhs.get(A)) {        Integer i=count.get(r);        assert (i != null);        i--;        count.put(r,i);        if (DEBUG)         System.out.println(" -> " + r + " ("+ i+ ")");        if (i == 0)         W.add(r);      }    }  }  LinkedList<NonTerminal> ntList=getNonTerminals();  for (  NonTerminal nt : ntList) {    if (nt == null)     continue;    if (!this.symbolInfos.containsKey(nt)) {      SymbolInfo i=new SymbolInfo();      i.symbol=nt;      this.symbolInfos.put(nt,i);    }  }  for (  NonTerminal nt : result) {    SymbolInfo i=this.symbolInfos.get(nt);    i.bProductive=true;  }  this.bProductivityChecked=true;}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this();  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  public boolean isID(){  if (DisplayType.ID == m_displayType)   return false;  return DisplayType.isID(m_displayType);}  }
class C{  public JobDefinitionCreateRequest createJobDefinitionCreateRequest(String activitiXmlClasspathResourceName){  List<Parameter> parameters=new ArrayList<>();  Parameter parameter=new Parameter(AbstractServiceTest.ATTRIBUTE_NAME_1_MIXED_CASE,AbstractServiceTest.ATTRIBUTE_VALUE_1);  parameters.add(parameter);  if (activitiXmlClasspathResourceName == null) {    activitiXmlClasspathResourceName=AbstractServiceTest.ACTIVITI_XML_HERD_WORKFLOW_WITH_CLASSPATH;  }  try {    return createJobDefinitionCreateRequest(AbstractServiceTest.TEST_ACTIVITI_NAMESPACE_CD,AbstractServiceTest.TEST_ACTIVITI_JOB_NAME,AbstractServiceTest.JOB_DESCRIPTION,IOUtils.toString(resourceLoader.getResource(activitiXmlClasspathResourceName).getInputStream()),parameters);  } catch (  IOException ex) {    throw new RuntimeException("Unable to load Activiti XML from classpath resource: " + activitiXmlClasspathResourceName);  }}  }
class C{  public ForwardExtentCopy(Extent source,Region region,Extent destination,Vector to){  this(source,region,region.getMinimumPoint(),destination,to);}  }
class C{  public ScaleImageLabel(Image i){  setUIID("Label");  setShowEvenIfBlank(true);  getAllStyles().setBackgroundType(Style.BACKGROUND_IMAGE_SCALED_FIT);  getAllStyles().setBgTransparency(255);  setIcon(i);}  }
class C{  private static boolean isJpegHeader(final byte[] imageHeaderBytes,final int headerSize){  return headerSize >= JPEG_HEADER.length && ImageFormatCheckerUtils.startsWithPattern(imageHeaderBytes,JPEG_HEADER);}  }
class C{  static ZoneRec parse(StringTokenizer tokens){  ZoneRec rec=new ZoneRec();  try {    rec.gmtOffset=(int)Time.parse(tokens.nextToken()).getTime();    String token=tokens.nextToken();    char c=token.charAt(0);    if (c >= '0' && c <= '9') {      rec.directSave=(int)Time.parse(token).getTime();    } else {      rec.ruleName=token;    }    rec.format=tokens.nextToken();    if (tokens.hasMoreTokens()) {      rec.hasUntil=true;      rec.untilYear=Integer.parseInt(tokens.nextToken());      if (tokens.hasMoreTokens()) {        rec.untilMonth=Month.parse(tokens.nextToken());      } else {        rec.untilMonth=Month.JANUARY;      }      if (tokens.hasMoreTokens()) {        rec.untilDay=RuleDay.parse(tokens.nextToken());      } else {        rec.untilDay=new RuleDay(1);      }      if (tokens.hasMoreTokens()) {        rec.untilTime=Time.parse(tokens.nextToken());      } else {        rec.untilTime=Time.parse("0:00");      }      rec.untilInMillis=rec.getLocalUntilTime();    }  } catch (  Exception e) {    e.printStackTrace();  }  return rec;}  }
class C{  public String flush(long timeout) throws Exception {  TungstenProperties status=runScript(CMD_FLUSH);  String eventID=status.getProperty("appliedLastSeqno");  return eventID;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public LighthouseRepository(){}  }
class C{  public static void printLine(Object message){  if (!isDisabled()) {    printLine(String.valueOf(message));  }}  }
class C{  public static boolean isCollection(EntityDataModel entityDataModel,String typeName){  EntitySet entitySet=entityDataModel.getEntityContainer().getEntitySet(typeName);  if (entitySet != null) {    return true;  }  try {    if (Collection.class.isAssignableFrom(Class.forName(typeName))) {      return true;    }  } catch (  ClassNotFoundException e) {    LOG.debug("Not possible to find class for type name: {}",typeName);  }  return false;}  }
class C{  public void post(String xml){  diagram.dispatch(this,xml);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static DocumentEvent mergeUnprocessedDocumentEvents(Document unprocessedDocument,List<DocumentEvent> documentEvents) throws BadLocationException {  if (documentEvents.size() == 0)   return null;  final Iterator<DocumentEvent> iterator=documentEvents.iterator();  final DocumentEvent firstEvent=iterator.next();  final Document document=unprocessedDocument;  int offset=firstEvent.getOffset();  int length=firstEvent.getLength();  final StringBuffer text=new StringBuffer(firstEvent.getText() == null ? "" : firstEvent.getText());  while (iterator.hasNext()) {    final int delta=text.length() - length;    final DocumentEvent event=(DocumentEvent)iterator.next();    final int eventOffset=event.getOffset();    final int eventLength=event.getLength();    final String eventText=event.getText() == null ? "" : event.getText();    if (eventOffset > offset + length + delta) {      final String string=document.get(offset + length,(eventOffset - delta) - (offset + length));      text.append(string);      text.append(eventText);      length=(eventOffset - delta) + eventLength - offset;    } else     if (eventOffset + eventLength < offset) {      final String string=document.get(eventOffset + eventLength,offset - (eventOffset + eventLength));      text.insert(0,string);      text.insert(0,eventText);      length=offset + length - eventOffset;      offset=eventOffset;    } else {      final int start=Math.max(0,eventOffset - offset);      final int end=Math.min(text.length(),eventLength + eventOffset - offset);      text.replace(start,end,eventText);      offset=Math.min(offset,eventOffset);      final int totalDelta=delta + eventText.length() - eventLength;      length=text.length() - totalDelta;    }  }  return new DocumentEvent(document,offset,length,text.toString());}  }
class C{  public void buildClassifier(Instances instances) throws Exception {  getCapabilities().testWithFail(instances);  instances=new Instances(instances);  instances.deleteWithMissingClass();  m_headerInfo=new Instances(instances,0);  m_numClasses=instances.numClasses();  m_numAttributes=instances.numAttributes();  m_probOfWordGivenClass=new double[m_numClasses][];  for (int c=0; c < m_numClasses; c++) {    m_probOfWordGivenClass[c]=new double[m_numAttributes];    for (int att=0; att < m_numAttributes; att++) {      m_probOfWordGivenClass[c][att]=1;    }  }  Instance instance;  int classIndex;  double numOccurences;  double[] docsPerClass=new double[m_numClasses];  double[] wordsPerClass=new double[m_numClasses];  java.util.Enumeration<Instance> enumInsts=instances.enumerateInstances();  while (enumInsts.hasMoreElements()) {    instance=(Instance)enumInsts.nextElement();    classIndex=(int)instance.value(instance.classIndex());    docsPerClass[classIndex]+=instance.weight();    for (int a=0; a < instance.numValues(); a++)     if (instance.index(a) != instance.classIndex()) {      if (!instance.isMissing(a)) {        numOccurences=instance.valueSparse(a) * instance.weight();        if (numOccurences < 0)         throw new Exception("Numeric attribute values must all be greater or equal to zero.");        wordsPerClass[classIndex]+=numOccurences;        m_probOfWordGivenClass[classIndex][instance.index(a)]+=numOccurences;      }    }  }  for (int c=0; c < m_numClasses; c++)   for (int v=0; v < m_numAttributes; v++)   m_probOfWordGivenClass[c][v]=Math.log(m_probOfWordGivenClass[c][v] / (wordsPerClass[c] + m_numAttributes - 1));  final double numDocs=instances.sumOfWeights() + m_numClasses;  m_probOfClass=new double[m_numClasses];  for (int h=0; h < m_numClasses; h++)   m_probOfClass[h]=(double)(docsPerClass[h] + 1) / numDocs;}  }
class C{  @Override public String toString(){  return "(" + StringUtils.join(this,separator.character) + ")";}  }
class C{  public void parseAggregation(Aggregation agg,ESResultSet rs) throws SQLException {  if (agg instanceof Terms) {    dfsAggregations((Terms)agg,rs,rs.getNewRow());  } else   if (agg instanceof InternalFilter) {    processFilterAgg((InternalFilter)agg,rs);  } else   throw new SQLException("Unknown aggregation type " + agg.getClass().getName());}  }
class C{  public KeyStoreLoadException(String message,KeyStoreType keyStoreType){  super(message);  this.keyStoreType=keyStoreType;}  }
class C{  public String normalizeRequestParameters() throws IOException {  if (requestParameters == null) {    return "";  }  StringBuilder sb=new StringBuilder();  Iterator<String> iter=requestParameters.keySet().iterator();  for (int i=0; iter.hasNext(); i++) {    String param=iter.next();    if (OAuth.OAUTH_SIGNATURE.equals(param) || "realm".equals(param)) {      continue;    }    if (i > 0) {      sb.append("&");    }    sb.append(requestParameters.getAsQueryString(param));  }  return sb.toString();}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  private String createWorkflowStepForRelinkNativeTargets(Workflow workflow,BlockSnapshotSession tgtSnapSession,List<URI> snapshotURIs,String waitFor,Workflow.Method rollbackMethod){  URI parentSystemURI=tgtSnapSession.getStorageController();  StorageSystem parentSystem=getDataObject(StorageSystem.class,parentSystemURI,_dbClient);  Workflow.Method relinkMethod=new Workflow.Method(RELINK_SNAPSHOT_SESSION_TARGETS_METHOD_NAME,parentSystemURI,tgtSnapSession.getId(),snapshotURIs,Boolean.FALSE);  workflow.createStep(RELINK_SNAPSHOT_SESSION_TARGET_STEP,String.format("Relink VPLEX backend snapshot session targets %s to session %s",snapshotURIs,tgtSnapSession.getId()),waitFor,parentSystemURI,parentSystem.getSystemType(),BlockDeviceController.class,relinkMethod,rollbackMethod,null);  _log.info("Created workflow step to relink VPLEX backend snapshot session targets {} to session {}",snapshotURIs,tgtSnapSession.getId());  return RELINK_SNAPSHOT_SESSION_TARGET_STEP;}  }
class C{  public LuaValue tonumber(){  double d=scannumber();  return Double.isNaN(d) ? NIL : valueOf(d);}  }
class C{  private void fillValue(){  int length=sensorConfig.getStringLength();  if (length > 0) {    unlimited.setSelection(false);    limited.setSelection(true);    value.setText(String.valueOf(length));  } else {    unlimited.setSelection(true);    limited.setSelection(false);    value.setText("");    value.setEnabled(false);  }}  }
class C{  public static double P_TrueNegatives(int y[],int ypred[]){  int s=0;  for (int j=0; j < y.length; j++) {    if (ypred[j] == 0 && y[j] == 0)     s++;  }  return s;}  }
class C{  public void update(byte[] buf){  update(buf,0,buf.length);}  }
class C{  @PostConstruct private void loadResources(){  if (initialPropertiesExist()) {    try {      preferences=(Preferences)unmarshaller.unmarshal(new StreamSource(fileResource.getInputStream()));      for (      AbstractPreference pref : preferences.getAll()) {        if (prefs.containsKey(pref.getPrefKey())) {          throw new NoUniqueResultException("Preference with key " + pref.getPrefKey() + " already loaded.");        }        prefs.put(pref.getPrefKey(),pref);      }      LOGGER.debug("Loaded {} properties into cache",preferences.getAll().size());    } catch (    XmlMappingException xme) {      throw new IntegrationLayerException("Exception while unmarshalling from " + fileName,xme);    }catch (    IOException ioe) {      throw new ResourceNotFoundException("Exception while accessing the resource with name " + fileName,ioe);    }  }}  }
class C{  protected void drawLabels(Graphics2D g2,List keys,double totalValue,Rectangle2D plotArea,Rectangle2D linkArea,PiePlotState state){  Composite originalComposite=g2.getComposite();  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));  DefaultKeyedValues leftKeys=new DefaultKeyedValues();  DefaultKeyedValues rightKeys=new DefaultKeyedValues();  double runningTotal=0.0;  Iterator iterator=keys.iterator();  while (iterator.hasNext()) {    Comparable key=(Comparable)iterator.next();    boolean include;    double v=0.0;    Number n=this.dataset.getValue(key);    if (n == null) {      include=!this.ignoreNullValues;    } else {      v=n.doubleValue();      include=this.ignoreZeroValues ? v > 0.0 : v >= 0.0;    }    if (include) {      runningTotal=runningTotal + v;      double mid=this.startAngle + (this.direction.getFactor() * ((runningTotal - v / 2.0) * 360) / totalValue);      if (Math.cos(Math.toRadians(mid)) < 0.0) {        leftKeys.addValue(key,new Double(mid));      } else {        rightKeys.addValue(key,new Double(mid));      }    }  }  g2.setFont(getLabelFont());  double marginX=plotArea.getX();  double gap=plotArea.getWidth() * this.labelGap;  double ww=linkArea.getX() - gap - marginX;  float labelWidth=(float)this.labelPadding.trimWidth(ww);  if (this.labelGenerator != null) {    drawLeftLabels(leftKeys,g2,plotArea,linkArea,labelWidth,state);    drawRightLabels(rightKeys,g2,plotArea,linkArea,labelWidth,state);  }  g2.setComposite(originalComposite);}  }
class C{  public void resumeOutgoingFileTransfer(FileSharingSession session,boolean isGroup){  if (sLogger.isActivated()) {    sLogger.debug("Handle event outgoing file transfer resuming");  }  mFileTransferService.resumeOutgoingFileTransfer(session,isGroup);}  }
class C{  @Override public long estimateMemoryRequirement(){  return memoryEstimate;}  }
class C{  protected final void copyAttribute(int nodeID,int exptype,SerializationHandler handler) throws SAXException {  final ExtendedType extType=m_extendedTypes[exptype];  final String uri=extType.getNamespace();  final String localName=extType.getLocalName();  String prefix=null;  String qname=null;  int dataIndex=_dataOrQName(nodeID);  int valueIndex=dataIndex;  if (dataIndex <= 0) {    int prefixIndex=m_data.elementAt(-dataIndex);    valueIndex=m_data.elementAt(-dataIndex + 1);    qname=m_valuesOrPrefixes.indexToString(prefixIndex);    int colonIndex=qname.indexOf(':');    if (colonIndex > 0) {      prefix=qname.substring(0,colonIndex);    }  }  if (uri.length() != 0) {    handler.namespaceAfterStartElement(prefix,uri);  }  String nodeName=(prefix != null) ? qname : localName;  String nodeValue=(String)m_values.elementAt(valueIndex);  handler.addAttribute(nodeName,nodeValue);}  }
class C{  public long loop(){  final long currentTimestamp=System.currentTimeMillis();  final long timeDiff=currentTimestamp - lastRunTimestamp;  final int shutdownDiff=(int)(System.currentTimeMillis() - gameShutdownRequestTimestamp);  final float shutdownProgress=shutdownDiff >= FLYING_SUPERMAN_DELAY && gameState.equals(GameState.SHUTDOWN_REQUESTED) ? (shutdownDiff - FLYING_SUPERMAN_DELAY) / (float)(GAME_SHUTDOWN_DELAY - FLYING_SUPERMAN_DELAY) : 0;  snowflakesCollection.onTimePassed(timeDiff);  presentsCollection.onTimePassed(timeDiff);  if (gameState.equals(GameState.SHUTDOWN_REQUESTED)) {    player.setyPos(getDefaultPlayerHeight() * (1 - shutdownProgress) - (player.getHeight() * shutdownProgress));    supermanClouds.setyPos(supermanClouds.getHeight() * (1 - shutdownProgress) - ((supermanClouds.getHeight() - fieldHeight) * shutdownProgress));    if (shutdownProgress >= 1) {      gameState=GameState.STOPPED;    }  } else {    if (player.isInState(PlayerState.CHEWING) && player.getChewingDuration() >= PLAYER_CHEWING_DURATION_IN_MS) {      player.setState(PlayerState.DEFAULT);    }    if (player.isInState(PlayerState.HIT) && player.getHitDuration() >= PLAYER_HIT_DURATION_IN_MS) {      player.setState(PlayerState.DEFAULT);    }    if (newPlayerLocation != null) {      player.setxPos(newPlayerLocation.x);      player.setyPos(newPlayerLocation.y);      newPlayerLocation=null;    }  }  boolean playerBelowObject=updateFallingObjects(timeDiff,shutdownProgress,snowflakesCollection,true,false) | updateFallingObjects(timeDiff,shutdownProgress,presentsCollection,false,true);  if (player.isInState(PlayerState.DEFAULT) || player.isInState(PlayerState.LOOKING_UP)) {    if (playerBelowObject) {      player.setState(PlayerState.LOOKING_UP);    } else {      player.setState(PlayerState.DEFAULT);    }  }  lastRunTimestamp=currentTimestamp;  return timeDiff;}  }
class C{  public MappedExampleReader(Iterator<Example> parent,int[] mapping){  this.parent=parent;  this.currentExample=null;  this.mapping=mapping;}  }
class C{  public STAXEventWriter(Writer writer) throws XMLStreamException {  consumer=outputFactory.createXMLEventWriter(writer);}  }
class C{  public static Color argb(int argb){  return new Color(argb);}  }
class C{  public void dumpIndex(boolean showBounds) throws IOException {  byte ixRecord[]=new byte[SPATIAL_INDEX_RECORD_LENGTH];  int recNum=0;  if (shpFileName == null) {    return;  }  BinaryBufferedFile ssx=new BinaryBufferedFile(ssx(shpFileName));  ssx.seek(100);  while (true) {    int result=ssx.read(ixRecord,0,SPATIAL_INDEX_RECORD_LENGTH);    if (result <= 0) {      logger.info("Processed " + recNum + " records");      break;    } else {      recNum++;      int offset=readBEInt(ixRecord,0);      int length=readBEInt(ixRecord,4);      logger.info("Record " + recNum + ": "+ offset+ ", "+ length+ (showBounds ? ("; " + readLEDouble(ixRecord,8) + ", "+ readLEDouble(ixRecord,16)+ ", "+ readLEDouble(ixRecord,24)+ ", "+ readLEDouble(ixRecord,32)) : ""));    }  }  ssx.close();}  }
class C{  public void replaceAllBy(Stack<T> s){  elements.clear();  elements.addAll(s.elements);  length=elements.size();}  }
class C{  public Session createSession(SecureChannel channel) throws ServiceResultException {  return createSession(channel,null,null,null);}  }
class C{  public static <A,B,C,D,T>void registerFactory(Class<T> objectClass,Func4<A,B,C,D,T> factory){  registerNamedFactory(objectClass,NO_NAME,factory);}  }
class C{  public boolean isHighVolume(){  Object oo=get_Value(COLUMNNAME_IsHighVolume);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private int updateTable(final Uri uri,final String table,final ContentValues values,final String selection,final String[] selectionArgs){  final int rows=mDbHelper.getWritableDatabase().update(table,values,selection,selectionArgs);  getContext().getContentResolver().notifyChange(uri,null);  return rows;}  }
class C{  private void validateQuery(String query){  if (query == null) {    return;  }  int UNSIGNED_SHORT_MAX=0xffff;  if (query.length() % 2 == 1) {    throw new IllegalArgumentException("query size is invalid. query=" + query);  }  if (query.length() / 2 > UNSIGNED_SHORT_MAX) {    throw new IllegalArgumentException("query size is too large. len=" + query.length());  }  query=query.toLowerCase(Locale.ROOT);  char[] chars=query.toCharArray();  for (  char c : chars) {    if (!((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f'))) {      throw new IllegalArgumentException("query should be hex string. query=" + query);    }  }}  }
class C{  public MethodNotSupportedException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public static DSAPrivateKey loadDSAPrivateKeyFile(String uname){  String filename=ClientConfig.getUserKeysPath() + "/" + uname+ ".pr";  DSAPrivateKey prKey=null;  FileInputStream fis=null;  try {    fis=new FileInputStream(filename);    byte[] keyBytes=new byte[fis.available()];    fis.read(keyBytes);    KeyFactory keyFactory=KeyFactory.getInstance("DSA","SUN");    PKCS8EncodedKeySpec prKeySpec=new PKCS8EncodedKeySpec(keyBytes);    prKey=(DSAPrivateKey)keyFactory.generatePrivate(prKeySpec);  } catch (  IOException e) {    Logging.error(e.getMessage());  }catch (  NoSuchAlgorithmException e) {    Logging.error(e.getMessage());  }catch (  NoSuchProviderException e) {    Logging.error(e.getMessage());  }catch (  InvalidKeySpecException e) {    Logging.error(e.getMessage());  } finally {    CommonMessaging.close(fis);  }  return prKey;}  }
class C{  public HTMLEditor(EditableResources res,String htmlText){  initComponents();  this.res=res;  htmlComponent=new com.codename1.ui.html.HTMLComponent();  htmlComponent.setBodyText(htmlText,"UTF-8");  final CodenameOneComponentWrapper wrapper=new CodenameOneComponentWrapper(htmlComponent);  uiPreview.add(java.awt.BorderLayout.CENTER,wrapper);  wysiwyg.setText(htmlText);  source.setText(htmlText);  Listener l=new Listener();  wysiwyg.getDocument().addDocumentListener(l);  source.getDocument().addDocumentListener(l);  JButton b=jToolBar1.add(new StyledEditorKit.BoldAction());  b.setText("<html><body><b>B</b></body></html>");  JButton i=jToolBar1.add(new StyledEditorKit.ItalicAction());  i.setText("<html><body><i>I</i></body></html>");  JButton u=jToolBar1.add(new StyledEditorKit.UnderlineAction());  u.setText("<html><body><u>U</u></body></html>");  jToolBar1.add(new InsertImageAction());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.STATE_CASE__STATE:    setState((ExecutionState)newValue);  return;case SexecPackage.STATE_CASE__STEP:setStep((Step)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  ValidationUtils.validateTaskStageProgression(startState.taskState,patchState.taskState);}  }
class C{  public static boolean isLong(CharSequence self){  try {    Long.valueOf(self.toString().trim());    return true;  } catch (  NumberFormatException nfe) {    return false;  }}  }
class C{  public RefactoringStatusEntry(int severity,String msg){  this(severity,msg,null);}  }
class C{  public int generate(byte[] output,byte[] additionalInput,boolean predictionResistant){  if (_isTDEA) {    if (_reseedCounter > TDEA_RESEED_MAX) {      return -1;    }    if (Utils.isTooLarge(output,TDEA_MAX_BITS_REQUEST / 8)) {      throw new IllegalArgumentException("Number of bits per request limited to " + TDEA_MAX_BITS_REQUEST);    }  } else {    if (_reseedCounter > AES_RESEED_MAX) {      return -1;    }    if (Utils.isTooLarge(output,AES_MAX_BITS_REQUEST / 8)) {      throw new IllegalArgumentException("Number of bits per request limited to " + AES_MAX_BITS_REQUEST);    }  }  if (predictionResistant) {    CTR_DRBG_Reseed_algorithm(_entropySource,additionalInput);    additionalInput=null;  }  if (additionalInput != null) {    additionalInput=Block_Cipher_df(additionalInput,_seedLength);    CTR_DRBG_Update(additionalInput,_Key,_V);  } else {    additionalInput=new byte[_seedLength];  }  byte[] out=new byte[_V.length];  _engine.init(true,new KeyParameter(expandKey(_Key)));  for (int i=0; i <= output.length / out.length; i++) {    int bytesToCopy=((output.length - i * out.length) > out.length) ? out.length : (output.length - i * _V.length);    if (bytesToCopy != 0) {      addOneTo(_V);      _engine.processBlock(_V,0,out,0);      System.arraycopy(out,0,output,i * out.length,bytesToCopy);    }  }  CTR_DRBG_Update(additionalInput,_Key,_V);  _reseedCounter++;  return output.length * 8;}  }
class C{  public HBaseWordCount(){}  }
class C{  @SuppressWarnings("unchecked") @Override protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs,Object managedData) throws SolrException {  if (managedData == null) {    storeManagedData(new ArrayList<Map<String,String>>(0));    return;  }  List<Object> managedList=(List<Object>)managedData;  for (  Object next : managedList) {    Map<String,String> info=(Map<String,String>)next;    String implClass=info.get("class");    String resourceId=info.get("resourceId");    Class<? extends ManagedResource> clazz=solrResourceLoader.findClass(implClass,ManagedResource.class);    ManagedResourceRegistration existingReg=restManager.registry.registered.get(resourceId);    if (existingReg == null) {      restManager.registry.registerManagedResource(resourceId,clazz,null);    }  }}  }
class C{  public void addSupportedBlock(java.lang.String param){  if (localSupportedBlock == null) {    localSupportedBlock=new java.lang.String[]{};  }  localSupportedBlockTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localSupportedBlock);  list.add(param);  this.localSupportedBlock=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  private void createCelerraConnection(CimConnectionInfo connectionInfo) throws Exception {  String hostAndPort=generateConnectionCacheKey(connectionInfo.getHost(),connectionInfo.getPort());  s_logger.info("Creating connection to Celerra ECOM provider on host/port {}",hostAndPort);  try {    CelerraConnection connection=new CelerraConnection(connectionInfo,_listener,_configuration.getIndicationFilterMap(),_configuration.getCelerraMessageSpecs());    connection.connect(_configuration.getSubscriptionsIdentifier(),_configuration.getDeleteStaleSubscriptionsOnConnect());    _connections.put(hostAndPort,connection);    connectionLastTouch.put(hostAndPort,System.currentTimeMillis());  } catch (  Exception e) {    throw new Exception(MessageFormatter.format("Failed creating connection to Celerra ECOM provider on host/port {}",hostAndPort).getMessage(),e);  }}  }
class C{  public long readLongGolomb(final long b) throws IOException {  return readLongGolomb(b,Fast.mostSignificantBit(b));}  }
class C{  public String findNewName(){  Node<? extends AnnotatedMember> renamed=null;  renamed=findRenamed(_fields,renamed);  renamed=findRenamed(_getters,renamed);  renamed=findRenamed(_setters,renamed);  renamed=findRenamed(_ctorParameters,renamed);  return (renamed == null) ? null : renamed.explicitName;}  }
class C{  public boolean isWindowsPhone(){  return isWindowsPhone;}  }
class C{  @Override public void updateExperimentState(final String state){}  }
class C{  public static String slurpFile(String filename,String encoding) throws IOException {  Reader r=new InputStreamReader(new FileInputStream(filename),encoding);  return slurpReader(r);}  }
class C{  @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<ManagedUserDTO> updateUser(@RequestBody ManagedUserDTO managedUserDTO){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static void check(@NotNull RadContainer grid,final boolean isRow,final int cellIndex){  if (!grid.getLayoutManager().isGrid()) {    throw new IllegalArgumentException("container must be grid");  }  final int cellCount=isRow ? grid.getGridRowCount() : grid.getGridColumnCount();  if (cellIndex == 0 && cellCount == 0)   return;  if (cellIndex < 0 || cellIndex >= cellCount) {    throw new IllegalArgumentException("invalid index: " + cellIndex);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.SPECIFICATION_ELEMENT__SPECIFICATION:    setSpecification(SPECIFICATION_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.296 -0500",hash_original_method="E332FB0E1CB7130552914B4D301DE791",hash_generated_method="5A5D0EA79CAFDCAECA35E7E93C07C205") public static float parseFloat(String string) throws NumberFormatException {  return StringToReal.parseFloat(string);}  }
class C{  @Override public void receive(RealBuffer buffer){  for (  float sample : buffer.getSamples()) {    boolean bitSample=(sample >= 0.0f);    boolean delayedBitSample=mDelayBuffer.get(bitSample);    boolean softBit=bitSample ^ delayedBitSample;    boolean filteredSoftBit=mLowPassFilter.getAverage(softBit);    mSlicer.receive(filteredSoftBit);  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public void addExceptionEvent(final DebuggerException exception){  for (  final ProcessManagerListener listener : listeners) {    try {      listener.raisedException(exception);    } catch (    final Exception e) {      CUtilityFunctions.logException(e);    }  }}  }
class C{  public DefaultMonitorAgentImpl(ActorSystem actorSystem){  String actorName=getActorName();  actor=actorName != null ? actorSystem.actorSelection(actorName) : null;}  }
class C{  private void checkSize(final int i){  if (i >= max_size) {    final int old_size=max_size;    max_size+=increment_size;    if (max_size <= i) {      max_size=i + increment_size + 2;    }    final Rectangle[] temp=items;    items=new Rectangle[max_size];    System.arraycopy(temp,0,items,0,old_size);    increment_size=incrementSize(increment_size);  }}  }
class C{  public void sortPom(){  log.info("Sorting file " + pomFile.getAbsolutePath());  String originalXml=fileUtil.getPomFileContent();  String sortedXml=sortXml(originalXml);  if (pomFileIsSorted(originalXml,sortedXml)) {    log.info("Pom file is already sorted, exiting");    return;  }  createBackupFile();  saveSortedPomFile(sortedXml);}  }
class C{  public void emitInvokeinterface(int meth,Type mtype){  int argsize=width(mtype.getParameterTypes());  emitop(invokeinterface);  if (!alive)   return;  emit2(meth);  emit1(argsize + 1);  emit1(0);  state.pop(argsize + 1);  state.push(mtype.getReturnType());}  }
class C{  @Override public void resolve(DeserializationConfig config,DeserializerProvider provider) throws JsonMappingException {  AnnotatedWithParams delegateCreator=_valueInstantiator.getDelegateCreator();  if (delegateCreator != null) {    JavaType delegateType=_valueInstantiator.getDelegateType();    BeanProperty.Std property=new BeanProperty.Std(null,delegateType,null,delegateCreator);    _delegateDeserializer=findDeserializer(config,provider,delegateType,property);  }}  }
class C{  public void clear(){  column=new String[0];  types=null;  rows=new Vector();  ncolumns=nrows=0;  atmaxrows=false;}  }
class C{  @Override public void startHandshake() throws IOException {  startHandshake(true);}  }
class C{  public void configureBaudRate(String rate){  log.debug("configureBaudRate: " + rate);  selectedSpeed=rate;  super.configureBaudRate(rate);}  }
class C{  public void decrypt(KeyParameter aesKey){  lock.lock();  try {    checkState(getEncryptionType() != EncryptionType.UNENCRYPTED,"Wallet is already decrypted");    checkNotNull(keyCrypter);    ArrayList<ECKey> decryptedKeyChain=new ArrayList<ECKey>();    for (    ECKey key : keychain) {      if (!key.isEncrypted()) {        decryptedKeyChain.add(key);      } else {        ECKey decryptedECKey=key.decrypt(keyCrypter,aesKey);        decryptedKeyChain.add(decryptedECKey);      }    }    keychain=decryptedKeyChain;    keyCrypter=null;    extensions.remove(MultiBitWalletProtobufSerializer.ORG_MULTIBIT_WALLET_PROTECT_2);  }  finally {    lock.unlock();  }}  }
class C{  public RemoteSageFile(String hostname,File file,int uploadId) throws IOException {  this(hostname,file.getPath(),uploadId);}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public void testFailedOnInvalidGuidSequence(){  checkFail("select {guid'12345678-9abc-def0-1234-123456789abc'}");  checkFail("select {guid 12345678-9abc-def0-1234-123456789abc'}");  checkFail("select {guid '12345678-9abc-def0-1234-123456789abc}");  checkFail("select {guid '12345678-9abc-def0-1234-123456789abc' from SomeTable;");  checkFail("select guid '12345678-9abc-def0-1234-123456789abc'} from SomeTable;");  checkFail("select {guid '1234567-1234-1234-1234-123456789abc'}");  checkFail("select {guid '1234567-8123-4123-4123-4123456789abc'}");  checkFail("select {guid '12345678-9abc-defg-1234-123456789abc'}");  checkFail("select {guid '12345678-12345678-1234-1234-1234-123456789abc'}");  checkFail("select {guid '12345678-1234-1234-1234-123456789abcdef'}");}  }
class C{  private Discretization(DiscreteVariable variable,int[] data){  this.variable=variable;  this.data=data;}  }
class C{  public static DiffObject base(){  return new DiffObject(false);}  }
class C{  public static void Advise(int adviceId,Object[] observed){  if (agent != null) {    agent.Advise(adviceId,observed);  }}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 2:{        return TemplateTokenType.ESCAPE_DOLLAR;      }case 4:    break;case 1:{    return TemplateTokenType.TEXT;  }case 5:break;case 3:{return TemplateTokenType.VARIABLE;}case 6:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static boolean hasSuppressed(@Nullable Throwable t,@Nullable Class<? extends Throwable> cls){  if (t == null || cls == null)   return false;  if (t.getSuppressed() != null) {    for (    Throwable th : t.getSuppressed()) {      if (cls.isAssignableFrom(th.getClass()))       return true;      if (hasSuppressed(th,cls))       return true;    }  }  return false;}  }
class C{  @Override public String toString(){  return "Puk kernel";}  }
class C{  public boolean okToSend(){  return true;}  }
class C{  public Topology buildAppTopology(){  Topology t=tp.newTopology("kafkaClientPublisher");  TStream<String> msgs=t.poll(new MsgSupplier(options.get(OPT_PUB_CNT)),1L,TimeUnit.SECONDS);  Map<String,Object> config=newConfig();  KafkaProducer kafka=new KafkaProducer(t,null);  kafka.publish(msgs,options.get(OPT_TOPIC));  return t;}  }
class C{  public OpenMrsJsonRequest(OpenMrsConnectionDetails connectionDetails,int method,String urlSuffix,JSONObject jsonRequest,Response.Listener<JSONObject> listener,Response.ErrorListener errorListener){  super(method,connectionDetails.getBuendiaApiUrl() + urlSuffix,jsonRequest,listener,errorListener);  this.mUsername=connectionDetails.getUser();  this.mPassword=connectionDetails.getPassword();}  }
class C{  public void testGetF26Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF26Momentary();  assertEquals(expResult,result);}  }
class C{  public void appendInBuffer(Object obj,byte[] data,int offset,int len,boolean close){  if (len > 0) {    collector().appendInBuffer(getRuleName(),obj,data,offset,len);  }  if (close) {    collector().recordInBuffer(getRuleName(),obj);  }}  }
class C{  public void push(T new_ele){  length++;  elements.add(new_ele);}  }
class C{  private static int fixupLinkAddresses(BootImageMap.Entry mapEntry) throws IllegalAccessException {  int count=0;  BootImageMap.Entry.LinkInfo info=mapEntry.removeLinkingAddress();  while (info != null) {    if (mapEntry.imageAddress.EQ(OBJECT_NOT_PRESENT)) {      if (info.rvmFieldName == null || !copyKnownInstanceField(info.parent,info.rvmFieldName,info.rvmFieldType,info.addressToFixup)) {        if (verbosity.isAtLeast(DETAILED))         traceContext.traceObjectNotInBootImage();        bootImage.setNullAddressWord(info.addressToFixup,info.objField,info.root,false);      }    } else {      bootImage.setAddressWord(info.addressToFixup,mapEntry.imageAddress.toWord(),info.objField,info.root);    }    info=mapEntry.removeLinkingAddress();    count++;  }  return count;}  }
