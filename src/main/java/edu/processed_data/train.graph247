class C{  private Issuer createIssuer(SamlAuthorityConfiguration samlAuthorityConfig){  IssuerBuilder b=new IssuerBuilder();  Issuer issuerSamlObj=b.buildObject();  String issuer=samlAuthorityConfig.getIssuer();  issuerSamlObj.setFormat(NameIDType.ENTITY);  issuerSamlObj.setValue(issuer);  log.debug("Created Issuer: {}",issuer);  return issuerSamlObj;}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  @Override protected void buildActions(final List<String> list){  list.add(ActionType.HARVEST.getRepresentation());  super.buildActions(list);}  }
class C{  public void pO(){  indentOut();}  }
class C{  public void buildClassifier(Instances D) throws Exception {  int L=D.classIndex();  int featlength=(D.numAttributes() - L) * 2;  int numSamples=D.numInstances();  int classlength=L * 2;  if (this.order == null) {    order=new ArrayList<Integer>();    for (int j=0; j < D.numInstances(); j++) {      order.add(j);    }  }  if (numFeatures == -1) {    initARAM(featlength,classlength,roa,threshold);  } else {    if (featlength != numFeatures) {      return;    }    if (classlength != numClasses) {      return;    }  }  for (int i=0; i < D.numInstances(); i++) {    Instance instance=D.get(order.get(i));    updateClassifier(instance);  }  System.out.println("Training done, used " + numCategories + " neurons with rho ="+ roa+ ".");}  }
class C{  public K firstKey(){  Iterator<K> it=keyIterator(null);  return it.hasNext() ? it.next() : null;}  }
class C{  public static int bitCount(long longValue){  longValue=longValue - ((longValue >>> 1) & 0x5555555555555555L);  longValue=(longValue & 0x3333333333333333L) + ((longValue >>> 2) & 0x3333333333333333L);  longValue=(longValue + (longValue >>> 4)) & 0x0f0f0f0f0f0f0f0fL;  longValue=longValue + (longValue >>> 8);  longValue=longValue + (longValue >>> 16);  longValue=longValue + (longValue >>> 32);  return (int)longValue & 0x7f;}  }
class C{  public BasicPoolEntry(ClientConnectionOperator op,HttpRoute route,ReferenceQueue<Object> queue){  super(op,route);  if (route == null) {    throw new IllegalArgumentException("HTTP route may not be null");  }  this.reference=new BasicPoolEntryRef(this,queue);}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public static void error(String msg){  throw new AssertionError(msg);}  }
class C{  public void drawTexture(int xStart,int yStart,int width,int height,double textureWidth,double textureHeight,double textureXStart,double textureXEnd,double textureYStart,double textureYEnd){  double umin=1.0D / textureWidth * textureXStart;  double umax=1.0D / textureWidth * textureXEnd;  double vmin=1.0D / textureHeight * textureYStart;  double vmax=1.0D / textureHeight * textureYEnd;  Tessellator tessellator=Tessellator.getInstance();  VertexBuffer vetrexBuffer=tessellator.getBuffer();  vetrexBuffer.begin(7,DefaultVertexFormats.POSITION_TEX);  vetrexBuffer.pos(xStart,yStart,this.zLevel).tex(umin,vmin).endVertex();  vetrexBuffer.pos(xStart,yStart + height,this.zLevel).tex(umin,vmax).endVertex();  ;  vetrexBuffer.pos(xStart + width,yStart + height,this.zLevel).tex(umax,vmax).endVertex();  ;  vetrexBuffer.pos(xStart + width,yStart,this.zLevel).tex(umax,vmin).endVertex();  ;  tessellator.draw();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementnormalize.class,args);}  }
class C{  public ProductKDE(KernelFunction k){  this.k=k;}  }
class C{  public List<Object[]> fetchMajorCodeAndActuals(final CFinancialYear financialYear,final Budget topBudget,final Date date,final CFunction function,final Department dept,final Position pos){  if (LOGGER.isInfoEnabled())   LOGGER.info("Starting fetchMajorCodeAndActuals................");  StringBuffer query=new StringBuffer();  String dateCondition="";  if (date != null)   dateCondition=" AND vh.voucherdate <='" + Constants.DDMMYYYYFORMAT1.format(date) + "' ";  String functionCondition="";  if (function != null)   functionCondition=" and gl.functionId=" + function.getId();  final List<AppConfigValues> list=appConfigValuesService.getConfigValuesByModuleAndKey(Constants.EGF,"exclude_status_forbudget_actual");  if (list.isEmpty())   throw new ValidationException("","exclude_status_forbudget_actual is not defined in AppConfig");  final String voucherstatusExclude=list.get(0).getValue();  String sum="";  if (topBudget.getName().contains("Receipt"))   sum="SUM(gl.creditAmount)-SUM(gl.debitAmount)"; else   sum="SUM(gl.debitAmount)-SUM(gl.creditAmount)";  query=query.append("SELECT substr(gl.glcode,1,3)," + sum + " FROM egf_budgetdetail bd, vouchermis vmis, egf_budgetgroup bg, egf_budget b, financialyear f, fiscalperiod p, voucherheader vh, generalledger gl, eg_wf_states wf"+ " WHERE bd.budget      =b.id AND p.financialyearid=f.id AND f.id ="+ financialYear.getId()+ " AND vh.fiscalperiodid=p.id "+ dateCondition+ " AND b.financialyearid="+ topBudget.getFinancialYear().getId()+ " AND b.id = "+ topBudget.getId()+ " AND vmis.VOUCHERHEADERID=vh.id AND gl.VOUCHERHEADERID  =vh.id"+ " AND bd.budgetgroup      =bg.id  AND vh.status NOT      IN ("+ voucherstatusExclude+ ") AND vh.fundId =bd.fund AND gl.functionId =bd.function "+ functionCondition+ ""+ " AND vmis.departmentid   =bd.executing_department and bd.executing_department ="+ dept.getId()+ " AND gl.glcodeid         =bg.mincode AND gl.glcodeid         =bg.maxcode AND bg.majorcode       IS NULL AND (wf.value='END' OR wf.owner_pos="+ pos.getId()+ ") AND bd.state_id = wf.id GROUP BY substr(gl.glcode,1,3)");  final List<Object[]> result=getSession().createSQLQuery(query.toString()).list();  if (LOGGER.isInfoEnabled())   LOGGER.info("Finished fetchMajorCodeAndActuals......." + query.toString());  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testFULLTEXTSearchInnoDB() throws Exception {  if (!versionMeetsMinimum(5,6)) {    return;  }  createTable("testFULLTEXTSearchInnoDB","(id INT UNSIGNED AUTO_INCREMENT NOT NULL PRIMARY KEY, " + "title VARCHAR(200), body TEXT, FULLTEXT (title , body)) ENGINE=InnoDB");  this.stmt.executeUpdate("INSERT INTO testFULLTEXTSearchInnoDB (title, body) VALUES ('MySQL Tutorial','DBMS stands for DataBase ...'), " + "('How To Use MySQL Well','After you went through a ...'), ('Optimizing MySQL','In this tutorial we will show ...'), " + "('1001 MySQL Tricks','1. Never run mysqld as root. 2. ...'), ('MySQL vs. YourSQL','In the following database comparison ...'), "+ "('MySQL Security','When configured properly, MySQL ...')");  String[] querySamples=new String[]{"SELECT * FROM testFULLTEXTSearchInnoDB WHERE MATCH (title, body) AGAINST ('database' IN NATURAL LANGUAGE MODE)","SELECT * FROM testFULLTEXTSearchInnoDB WHERE MATCH (title, body) AGAINST ('database' IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION)","SELECT * FROM testFULLTEXTSearchInnoDB WHERE MATCH (title, body) AGAINST ('<MySQL >YourSQL' IN BOOLEAN MODE)","SELECT * FROM testFULLTEXTSearchInnoDB WHERE MATCH (title, body) AGAINST ('+MySQL -YourSQL' IN BOOLEAN MODE)","SELECT MATCH (title, body) AGAINST ('database' IN NATURAL LANGUAGE MODE) FROM testFULLTEXTSearchInnoDB","SELECT MATCH (title, body) AGAINST ('database' IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION) FROM testFULLTEXTSearchInnoDB","SELECT MATCH (title, body) AGAINST ('<MySQL >YourSQL' IN BOOLEAN MODE) FROM testFULLTEXTSearchInnoDB","SELECT MATCH (title, body) AGAINST ('+MySQL -YourSQL' IN BOOLEAN MODE) FROM testFULLTEXTSearchInnoDB"};  for (  String query : querySamples) {    this.rs=this.stmt.executeQuery(query);    assertTrue("Query [" + query + "] should return some rows.",this.rs.next());    this.rs.close();  }}  }
class C{  public static boolean hasSecurityConstraint(WebXml webXml,String theUrlPattern){  return getSecurityConstraint(webXml,theUrlPattern) != null;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public void init(int FloatingActionButtonColor){  setWillNotDraw(false);  setLayerType(View.LAYER_TYPE_SOFTWARE,null);  mButtonPaint=new Paint(Paint.ANTI_ALIAS_FLAG);  mButtonPaint.setColor(FloatingActionButtonColor);  mButtonPaint.setStyle(Paint.Style.FILL);  mButtonPaint.setShadowLayer(10.0f,0.0f,3.5f,Color.argb(100,0,0,0));  mDrawablePaint=new Paint(Paint.ANTI_ALIAS_FLAG);  invalidate();}  }
class C{  public void encodeImage(BufferedImage buf,OutputStream os) throws IOException {  ImageWriter writer=ImageWriterRegistry.getInstance().getWriterFor("image/png");  writer.writeImage(buf,os);}  }
class C{  public static LoanChargeData newLoanChargeDetails(final Long chargeId,final String name,final CurrencyData currency,final BigDecimal amount,final BigDecimal percentage,final EnumOptionData chargeTimeType,final EnumOptionData chargeCalculationType,final boolean penalty,final EnumOptionData chargePaymentMode,final BigDecimal minCap,final BigDecimal maxCap){  return new LoanChargeData(null,chargeId,name,currency,amount,percentage,chargeTimeType,chargeCalculationType,null,penalty,chargePaymentMode,false,false,null,minCap,maxCap,null,null);}  }
class C{  private static void processLockCmdArgs(String[] args){  if (args.length > 2) {    throw new IllegalArgumentException("Too much arguments");  }  if (args.length == 1 || !args[args.length - 1].equalsIgnoreCase(LOCK_UPGRADE)) {    throw new IllegalArgumentException("The <arg> is necessary and from the 'Available Arguments'.");  }}  }
class C{  public LogUniform(double min,double max){  setMinMax(min,max);}  }
class C{  public int eval(INode state){  FifteenPuzzleNode node=(FifteenPuzzleNode)state;  int Pn=0;  for (int r=0; r <= FifteenPuzzleNode.MaxR; r++) {    for (int c=0; c <= FifteenPuzzleNode.MaxC; c++) {      if (node.isEmpty(r,c)) {        continue;      }      int digit=node.cell(r,c);      Pn+=Math.abs(diffs[digit][0] - r);      Pn+=Math.abs(diffs[digit][1] - c);    }  }  int Sn=0;  if (!node.isEmpty(1,1)) {    Sn=1;  }  for (int r=0; r <= FifteenPuzzleNode.MaxR; r++) {    for (int c=0; c <= FifteenPuzzleNode.MaxC; c++) {      int idx=r * 4 + c;      if ((r == 1 && (c == 1 || c == 2)) || (r == 2 && (c == 1 || c == 2))) {        continue;      }      if (node.cell(r,c) == FifteenPuzzleNode.EmptyMark) {        continue;      }      if (succ[node.cell(r,c)] != node.cell(succs[idx][0],succs[idx][1])) {        Sn+=2;      }    }  }  int gn=0;  DepthTransition t=(DepthTransition)state.storedData();  if (t != null) {    gn=t.depth;  }  return gn + Pn + 4 * Sn;}  }
class C{  public DefaultStateMachineModel(ConfigurationData<S,E> configurationData,StatesData<S,E> statesData,TransitionsData<S,E> transitionsData){  this.configuration=configurationData;  this.states=statesData;  this.transitions=transitionsData;}  }
class C{  private boolean deodexApk(ApkObj apk){  Logger.appendLog("[ApkWorker][I]Processing " + apk.getOrigApk().getName() + " ...");  Logger.appendLog("[ApkWorker][I]" + apk.getOrigApk().getName() + " Copying needed Files to working folder ...");  boolean copyStatus=apk.copyNeededFilesToTempFolder(tmpFolder);  if (!copyStatus) {    logPan.addLog(R.getString(S.LOG_WARNING) + " [" + apk.getOrigApk().getName()+ "]"+ R.getString("log.copy.to.tmp.failed"));    Logger.appendLog("[ApkWorker][E]" + apk.getOrigApk().getName() + " Failed to copy needed files ");    return false;  }  Logger.appendLog("[ApkWorker][I]" + apk.getOrigApk().getName() + " copy files to temp folder successfull ! ");  progressBar.setValue(progressBar.getValue() + 1);  progressBar.setString(R.getString("progress.apks") + " (" + this.getPercent()+ "%)");  threadWatcher.updateProgress();  boolean extraxtStatus=false;  try {    extraxtStatus=ZipTools.extractOdex(apk.getTempCompOdex());  } catch (  IOException e) {    e.printStackTrace();    Logger.appendLog("[ApkWorker][EX]" + e.getStackTrace());  }  if (!extraxtStatus) {    logPan.addLog(R.getString(S.LOG_WARNING) + " [" + apk.getOrigApk().getName()+ "]"+ R.getString("log.extract.to.tmp.failed"));    return false;  }  progressBar.setValue(progressBar.getValue() + 1);  progressBar.setString(R.getString("progress.apks") + " (" + this.getPercent()+ "%)");  threadWatcher.updateProgress();  boolean dexStatus=Deodexer.deodexApk(apk.getTempOdex(),apk.getTempDex());  if (!dexStatus) {    Logger.appendLog("[Apkworker][W]" + apk.getOrigApk().getName() + " Failed with method1 trying method 2");    dexStatus=Deodexer.deodexApkFailSafe(apk.getTempOdex(),apk.getTempDex());    if (!dexStatus) {      Logger.appendLog("[Apkworker][E]" + apk.getOrigApk().getName() + " Failed to deodex ");      logPan.addLog(R.getString(S.LOG_WARNING) + " [" + apk.getOrigApk().getName()+ "]"+ R.getString("log.deodex.failed"));      return false;    }  }  progressBar.setValue(progressBar.getValue() + 1);  progressBar.setString(R.getString("progress.apks") + " (" + this.getPercent()+ "%)");  threadWatcher.updateProgress();  boolean rename=apk.getTempDex().renameTo(apk.getTempClasses1());  if (apk.getTempDex2().exists()) {    rename=rename && apk.getTempDex2().renameTo(apk.getTempClasses2());  }  if (apk.getTempDex3().exists()) {    rename=rename && apk.getTempDex3().renameTo(apk.getTempClasses3());  }  if (!rename) {    logPan.addLog(R.getString(S.LOG_WARNING) + " [" + apk.getOrigApk().getName()+ "]"+ R.getString("log.classes.failed"));    FilesUtils.deleteRecursively(apk.getTempApk().getParentFile());    return false;  }  progressBar.setValue(progressBar.getValue() + 1);  progressBar.setString(R.getString("progress.apks") + " (" + this.getPercent()+ "%)");  threadWatcher.updateProgress();  ArrayList<File> classesFiles=new ArrayList<File>();  classesFiles.add(apk.getTempClasses1());  if (apk.getTempClasses2().exists())   classesFiles.add(apk.getTempClasses2());  if (apk.getTempClasses3().exists())   classesFiles.add(apk.getTempClasses3());  boolean addClassesToApkStatus=false;  addClassesToApkStatus=Zip.addFilesToExistingZip(apk.getTempApk(),classesFiles);  if (!addClassesToApkStatus) {    logPan.addLog(R.getString(S.LOG_WARNING) + " [" + apk.getOrigApk().getName()+ "]"+ R.getString("log.add.classes.failed"));    return false;  }  progressBar.setValue(progressBar.getValue() + 1);  progressBar.setString(R.getString("progress.apks") + " (" + this.getPercent()+ "%)");  threadWatcher.updateProgress();  if (this.doSign) {    this.signStatus=Deodexer.signApk(apk.getTempApk(),apk.getTempApkSigned());    if (!this.signStatus)     apk.getTempApk().renameTo(apk.getTempApkSigned());  } else {    apk.getTempApk().renameTo(apk.getTempApkSigned());  }  progressBar.setValue(progressBar.getValue() + 1);  progressBar.setString(R.getString("progress.apks") + " (" + this.getPercent()+ "%)");  threadWatcher.updateProgress();  if (this.doZipalign) {    this.zipAlignStatus=Zip.zipAlignAPk(apk.getTempApkSigned(),apk.getTempApkZipalign());    if (!this.zipAlignStatus)     apk.getTempApkSigned().renameTo(apk.getTempApkZipalign());  } else {    apk.getTempApkSigned().renameTo(apk.getTempApkZipalign());  }  progressBar.setValue(progressBar.getValue() + 1);  progressBar.setString(R.getString("progress.apks") + " (" + this.getPercent()+ "%)");  threadWatcher.updateProgress();  boolean putBackStatus=apk.getTempApkZipalign().renameTo(apk.getOrigApk());  if (!putBackStatus) {    Logger.appendLog("[ApkWorker][E]Failed to copy back " + apk.getPureName());    return false;  }  FilesUtils.deleteFiles(FilesUtils.searchrecursively(apk.getFolder(),S.ODEX_EXT));  FilesUtils.deleteFiles(FilesUtils.searchrecursively(apk.getFolder(),S.COMP_ODEX_EXT));  FilesUtils.deleteUmptyFoldersInFolder(apk.getFolder());  FilesUtils.deleteRecursively(apk.getTempApkZipalign().getParentFile());  return true;}  }
class C{  private static Object unwrap(Object object){  if (object instanceof Reflect) {    return ((Reflect)object).get();  }  return object;}  }
class C{  public <T>T createDtoFromJson(JsonElement json,Class<T> dtoInterface){  return getDtoProvider(dtoInterface).fromJson(json);}  }
class C{  public ConcurrentOffHeapClockCache(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,EvictionListener<K,V> evictionListener){  super(new ReadWriteLockedOffHeapClockCacheFactory<K,V>(tableSource,storageEngineFactory,evictionListener));}  }
class C{  public static PeriodType standard(){  PeriodType type=cStandard;  if (type == null) {    type=new PeriodType("Standard",new DurationFieldType[]{DurationFieldType.years(),DurationFieldType.months(),DurationFieldType.weeks(),DurationFieldType.days(),DurationFieldType.hours(),DurationFieldType.minutes(),DurationFieldType.seconds(),DurationFieldType.millis()},new int[]{0,1,2,3,4,5,6,7});    cStandard=type;  }  return type;}  }
class C{  public boolean isFailed(){  return failure != null;}  }
class C{  public void connect(int source){  mSource=source;  mAudioOutput.updateTimestamp();}  }
class C{  public synchronized void clear(){  super.clear();  mMaxValues.clear();}  }
class C{  public static <NodeType extends IGraphNode<NodeType> & ISelectableNode>boolean areAllParentsDeselected(final NodeType node){  final INodeFilter<NodeType> filter=StandardFilters.getSelectedFilter();  return GraphAlgorithms.collectParents(node,filter).size() == 0;}  }
class C{  private void updated(){  this.updated=true;}  }
class C{  private void composePageSerializedGray(File outputFile) throws Exception {  File fileSerialize=null;  FileInputStream fis=null;  ObjectInputStream ois=null;  ImageData imageData=null;  int bpr, width, height, r, g, b, row, pixel, x, i;  byte[] data=null;  try {    fileSerialize=new File(path,prefix + "-serialize" + memoryBlockProcessed+ ".data");    fis=new FileInputStream(fileSerialize);    ois=new ObjectInputStream(fis);    imageData=(ImageData)ois.readObject();    ois.close();    fis.close();  } catch (  Exception e) {    throw e;  } finally {    if (ois != null) {      ois.close();    }    if (fis != null) {      fis.close();    }  }  BufferedImage imageSerialized=new BufferedImage(imageData.getBpr(),memoryHeight,BufferedImage.TYPE_BYTE_GRAY);  for (i=memoryBlockProcessed; i < memoryBlockTotal; i++) {    try {      fileSerialize=new File(path,prefix + "-serialize" + i+ ".data");      fis=new FileInputStream(fileSerialize);      ois=new ObjectInputStream(fis);      imageData=(ImageData)ois.readObject();      ois.close();      fis.close();    } catch (    Exception e) {      throw e;    } finally {      if (ois != null) {        ois.close();      }      if (fis != null) {        fis.close();      }    }    fileSerialize.delete();    width=imageData.getWidth();    height=imageData.getHeight() + memoryRow;    bpr=imageData.getBpr();    data=imageData.getData();    row=0;    pixel=0;    while (memoryRow < height) {      for (x=0; x < width; x++) {        r=data[pixel] & 0x00FF;        g=data[pixel] & 0x00FF;        b=data[pixel] & 0x00FF;        pixel++;        imageSerialized.setRGB(x,memoryRow,(r << 16) | (g << 8) | b);      }      row+=bpr;      pixel=row;      memoryRow++;    }  }  imageSerialized.flush();  numPage++;  ImageIO.write(imageSerialized,"png",outputFile);  addTempFile(outputFile);  addScanFile(outputFile);}  }
class C{  public static String parseTabStops(FXGNode node,String value){  String[] tabStops=value.trim().split("\\s+");  ArrayList<String> finalTabStops=new ArrayList<String>(tabStops.length);  int iFinal=-1;  boolean escaped=false;  for (int i=0; i < tabStops.length; i++) {    if (escaped) {      finalTabStops.add(iFinal,finalTabStops.get(iFinal) + tabStops[i]);    } else {      finalTabStops.add(tabStops[i]);      iFinal++;    }    escaped=tabStops[i].endsWith("\\") ? true : false;  }  String tabStopsVal=null;  for (int i=0; i < finalTabStops.size(); i++) {    tabStopsVal=finalTabStops.get(i);    if (!matchPattern(tabStopsVal,tabstopsExceptDNumericPattern)) {      if (!matchPattern(tabStopsVal,tabstopsExceptDScientificPattern)) {        if (!matchPattern(tabStopsVal,tabstopsDNumericPattern)) {          if (!matchPattern(tabStopsVal,tabstopsDScientificPattern)) {            throw new FXGException(node.getStartLine(),node.getStartColumn(),"InvalidTabStops",value);          }        }      }    }  }  return value;}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof UsernameAttribute))   return false;  if (obj == this)   return true;  UsernameAttribute att=(UsernameAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || !Arrays.equals(att.username,username))   return false;  return true;}  }
class C{  private static int determineConsecutiveTextCount(CharSequence msg,int startpos){  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch) && idx < len) {      numericCount++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }    if (numericCount >= 13) {      return idx - startpos - numericCount;    }    if (numericCount > 0) {      continue;    }    ch=msg.charAt(idx);    if (!isText(ch)) {      break;    }    idx++;  }  return idx - startpos;}  }
class C{  public void addMarker(AxisEnum axis,double position,Paint paint){  addMarker(axis,position,paint,1,new float[]{1});}  }
class C{  @Override public Vertex readVertex(final InputStream inputStream,final Function<Attachable<Vertex>,Vertex> vertexAttachMethod,final Function<Attachable<Edge>,Edge> edgeAttachMethod,final Direction attachEdgesOfThisDirection) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  public void checkRight(Table table,int rightMask){  if (!hasRight(table,rightMask)) {    throw DbException.get(ErrorCode.NOT_ENOUGH_RIGHTS_FOR_1,table.getSQL());  }}  }
class C{  public void initPortNames(){  initialized=false;  cbPort.addItem("");  CommPortIdentifier currPort;  Enumeration ports=CommPortIdentifier.getPortIdentifiers();  while (ports.hasMoreElements()) {    currPort=(CommPortIdentifier)ports.nextElement();    if (currPort.getPortType() == CommPortIdentifier.PORT_SERIAL) {      cbPort.addItem(currPort.getName());    }  }  initialized=true;}  }
class C{  public void play(){  startIdleInterpolation();  animating=true;}  }
class C{  protected void layout(int width,int height){  setSpanOnAxis(X_AXIS,width);  setSpanOnAxis(Y_AXIS,height);}  }
class C{  public void bumpSongCount(final long songId){  if (songId < 0) {    return;  }  final SQLiteDatabase database=mMusicDatabase.getWritableDatabase();  updateExistingRow(database,songId,true);}  }
class C{  public boolean hasLogTime(){  return fieldSetFlags()[1];}  }
class C{  private static void fixSplitterBlock(BlockNode block){  ExcHandlerAttr excHandlerAttr=block.get(AType.EXC_HANDLER);  if (excHandlerAttr == null) {    return;  }  BlockNode handlerBlock=excHandlerAttr.getHandler().getHandlerBlock();  if (handlerBlock.getPredecessors().size() < 2) {    return;  }  Map<BlockNode,SplitterBlockAttr> splitters=new HashMap<BlockNode,SplitterBlockAttr>();  for (  BlockNode pred : handlerBlock.getPredecessors()) {    pred=BlockUtils.skipSyntheticPredecessor(pred);    SplitterBlockAttr splitterAttr=pred.get(AType.SPLITTER_BLOCK);    if (splitterAttr != null && pred == splitterAttr.getBlock()) {      splitters.put(pred,splitterAttr);    }  }  if (splitters.size() < 2) {    return;  }  BlockNode topSplitter=BlockUtils.getTopBlock(splitters.keySet());  if (topSplitter == null) {    LOG.warn("Unknown top splitter block from list: {}",splitters);    return;  }  for (  Map.Entry<BlockNode,SplitterBlockAttr> entry : splitters.entrySet()) {    BlockNode pred=entry.getKey();    SplitterBlockAttr splitterAttr=entry.getValue();    if (pred == topSplitter) {      block.addAttr(splitterAttr);    } else {      pred.remove(AType.SPLITTER_BLOCK);      for (      BlockNode s : pred.getCleanSuccessors()) {        s.remove(AType.SPLITTER_BLOCK);      }    }  }}  }
class C{  private HashMap readFault() throws IOException {  HashMap map=new HashMap();  int code=parseTag();  for (; code >= 0 && code != TAG_FAULT_END; code=parseTag()) {    _peekTag=code;    Object key=readObject();    Object value=readObject();    if (key != null && value != null)     map.put(key,value);  }  if (code != TAG_FAULT_END)   throw expectedTag("fault",code);  return map;}  }
class C{  public FromSelectUniversal from(SelectUniversal subselect) throws SQLScopeException {  String segmentedAlias=subselect.getStatement().getAliaser().getUniqueAlias();  FromSelectUniversal fromSt=new FromSelectUniversal(getStatement(),subselect,segmentedAlias);  this.getStatement().getFromPieces().add(fromSt);  return fromSt;}  }
class C{  public CompilationUnitChange attachChange(CompilationUnitChange cuChange,boolean generateGroups,IProgressMonitor monitor) throws CoreException {  try {    boolean needsAstRewrite=fRewrite != null;    boolean needsImportRemoval=fImportRemover != null && fImportRemover.hasRemovedNodes();    boolean needsImportRewrite=fImportRewrite != null && fImportRewrite.hasRecordedChanges() || needsImportRemoval;    if (!needsAstRewrite && !needsImportRemoval && !needsImportRewrite)     return null;    MultiTextEdit multiEdit=(MultiTextEdit)cuChange.getEdit();    if (multiEdit == null) {      multiEdit=new MultiTextEdit();      cuChange.setEdit(multiEdit);    }    if (needsAstRewrite) {      clearGroupDescriptionEdits();      TextEdit rewriteEdit;      if (fRememberContent != null) {        rewriteEdit=fRewrite.rewriteAST(fRememberContent,fCu.getJavaProject().getOptions(true));      } else {        rewriteEdit=fRewrite.rewriteAST();      }      if (!isEmptyEdit(rewriteEdit)) {        multiEdit.addChild(rewriteEdit);        if (generateGroups) {          for (Iterator<TextEditGroup> iter=fTextEditGroups.iterator(); iter.hasNext(); ) {            TextEditGroup group=iter.next();            cuChange.addTextEditGroup(group);          }        }      }    }    if (needsImportRemoval) {      fImportRemover.applyRemoves(getImportRewrite());    }    if (needsImportRewrite) {      TextEdit importsEdit=fImportRewrite.rewriteImports(monitor);      if (!isEmptyEdit(importsEdit)) {        multiEdit.addChild(importsEdit);        String importUpdateName=RefactoringCoreMessages.ASTData_update_imports;        cuChange.addTextEditGroup(new TextEditGroup(importUpdateName,importsEdit));      }    } else {    }    if (isEmptyEdit(multiEdit))     return null;    return cuChange;  }  finally {    if (monitor != null)     monitor.done();  }}  }
class C{  public static void loadImage(ArtworkEntry artworkEntry,ImageView imageView,int defaultImage){  if (artworkEntry.getArtworkLocation() == null) {    return;  }  ArtworkViewLoader imageViewLoader=(ArtworkViewLoader)imageView.getTag();  if (imageViewLoader == null) {    imageViewLoader=new ArtworkViewLoader(artworkEntry,imageView,defaultImage);    imageView.setTag(imageViewLoader);    imageViewLoader.loadImage();  } else {    imageViewLoader.updateImage(artworkEntry);  }}  }
class C{  public void add(String[] entries) throws JarException {  for (int i=0; i < entries.length; i++) {    add(entries[i]);  }}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,double eccentricity,Axis axis,double angle){  this(focalPoint,periapsis,Vector3.getAxisVector(axis),eccentricity,angle);}  }
class C{  public FBProcedureCall parseCall(String sql) throws SQLException {  sql=cleanUpCall(sql);  procedureCall=new FBProcedureCall();  isExecuteWordProcessed=false;  isProcedureWordProcessed=false;  isCallWordProcessed=false;  isNameProcessed=false;  boolean isFirstOutParam=false;  int paramCount=0;  int paramPosition=0;  setState(NORMAL_STATE);  final StringBuilder buffer=new StringBuilder(INITIAL_CAPACITY);  for (int i=0, length=sql.length(); i < length; i++) {    char currentChar=sql.charAt(i);    switchState(currentChar);switch (state) {case NORMAL_STATE:      if (currentChar == '=') {        if (openBraceCount <= 0) {          if (buffer.length() >= 1 && buffer.charAt(0) == '?' && !isFirstOutParam && !isNameProcessed) {            FBProcedureParam param=procedureCall.addParam(paramPosition,"?");            paramCount++;            param.setIndex(paramCount);            isFirstOutParam=true;            paramPosition++;            buffer.setLength(0);            continue;          }        }      }    buffer.append(currentChar);  break;case SPACE_STATE:if (buffer.length() == 0) {  setState(NORMAL_STATE);  continue;}if (openBraceCount > 0) {buffer.append(currentChar);setState(NORMAL_STATE);continue;}if (!isNameProcessed) {boolean tokenProcessed=processToken(buffer.toString().trim());if (tokenProcessed) {buffer.setLength(0);setState(NORMAL_STATE);if (isNameProcessed) {  int j=i;  while (j < length - 1 && Character.isWhitespace(sql.charAt(j)))   j++;  if (sql.charAt(j) == '(')   i=j;}}} else {buffer.append(currentChar);setState(NORMAL_STATE);}break;case BRACE_STATE:boolean isProcedureName=currentChar == '(' && isCallKeywordProcessed() && !isNameProcessed;if (isProcedureName) {if (buffer.length() == 0) throw new FBSQLParseException("Procedure name is empty.");procedureCall.setName(buffer.toString().trim());isNameProcessed=true;buffer.setLength(0);} else {buffer.append(currentChar);if (currentChar == '(') openBraceCount++; else openBraceCount--;}setState(NORMAL_STATE);break;case CURLY_BRACE_STATE:buffer.append(currentChar);setState(NORMAL_STATE);break;case COMMA_STATE:if (openBraceCount > 0) {buffer.append(currentChar);continue;}String param=processParam(buffer.toString());buffer.setLength(0);FBProcedureParam callParam=procedureCall.addParam(paramPosition,param);if (callParam.isParam()) {paramCount++;callParam.setIndex(paramCount);}paramPosition++;setState(NORMAL_STATE);break;case LITERAL_STATE:buffer.append(currentChar);}}if (buffer.length() == 0) {return procedureCall;}int startIndex=0;int endIndex=buffer.length();while (startIndex < endIndex && Character.isSpaceChar(buffer.charAt(startIndex))) {startIndex++;}while (endIndex > startIndex && Character.isSpaceChar(buffer.charAt(endIndex - 1))) {endIndex--;}if (startIndex < endIndex && buffer.charAt(startIndex) == '(') {startIndex++;}if (startIndex < endIndex && buffer.charAt(endIndex - 1) == ')') {endIndex--;}final String value=startIndex < endIndex ? buffer.substring(startIndex,endIndex).trim() : "";if (value.length() == 0) {return procedureCall;}if (null == procedureCall.getName() && !isNameProcessed) {procedureCall.setName(value);} else {FBProcedureParam callParam=procedureCall.addParam(paramPosition,value);if (callParam.isParam()) {paramCount++;callParam.setIndex(paramCount);}}return procedureCall;}  }
class C{  public void checkReduction(int bonus,boolean direct){  boolean isReduced=((Compute.d6(2) + bonus) >= getTrigger()) || (direct && getType() != Minefield.TYPE_CONVENTIONAL && getType() != Minefield.TYPE_INFERNO);  if (getType() == Minefield.TYPE_CONVENTIONAL && getDensity() < 10) {    isReduced=false;  }  if (isReduced) {    setDensity(getDensity() - 5);  }}  }
class C{  public PrereadHashFunction(){  reset();}  }
class C{  private void verifyLegal(String name) throws AdeInternalException {  if (m_allKeys == null) {    m_allKeys=new TreeSet<String>();  }  if (m_allKeys.contains(name)) {    throw new AdeInternalException("Duplicate statistic " + name);  }  m_allKeys.add(name);}  }
class C{  @Override protected void onSaveInstanceState(Bundle savedInstanceState){  super.onSaveInstanceState(savedInstanceState);  savedInstanceState.putInt(KEY_CHALLENGE_ID,mChallengeNo);  savedInstanceState.putBoolean(KEY_NEXT_ON_FAB,mLoadNextChallengeOnFabClick);  savedInstanceState.putSerializable(KEY_ALL_DUE_CHALLENGES,mAllDueChallenges);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public void testMovePointLeftPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=28;  int shift=18;  int resScale=46;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.movePointLeft(shift);  assertTrue("incorrect scale",bNumber.scale() == resScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(a));}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  Object toType(String value,String pattern,Locale locale){  Calendar calendar=toCalendar(value,pattern,locale);  return toType(calendar);}  }
class C{  private static String addMethodstoObject(final String js){  final Pattern pat=Pattern.compile("function\\s\\w+\\((\\w+)?\\)");  final Matcher mat=pat.matcher(js);  final HashMap<String,String> mapping=new HashMap<String,String>();  while (mat.find()) {    final String s=mat.group();    final String methodSig=js.substring(mat.start() + 9,mat.end());    final int firstBracket=methodSig.indexOf('(');    final String methodName=methodSig.substring(0,firstBracket);    final String newMethodSig="this." + methodName + " = "+ "function"+ methodSig.substring(firstBracket);    mapping.put(s,newMethodSig);  }  String newJs=js;  for (  final String s : mapping.keySet()) {    newJs=newJs.replace(s,mapping.get(s));  }  return newJs;}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName){}  }
class C{  @Override public UpdateResponse optimize() throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.optimize();  if (this.solr1 != null)   ur=this.solr1.optimize();  return ur;}  }
class C{  private static boolean isDigit(char p_char){  return p_char >= '0' && p_char <= '9';}  }
class C{  public BasicViewPropertyLimits(){  this.reset();}  }
class C{  public ScrollBarAdapter(ScrollBar scrollBar){  super();  this.scrollBar=scrollBar;}  }
class C{  private void stop(){  if (server != null) {    server.shutdown();  }}  }
class C{  public Key add(final IBindingSet bset){  final Key key=makeKey(bset);  if (key == null) {    return null;  }  Bucket b=map.get(key);  if (b == null) {    map.put(key,b=new Bucket(key.hash,bset));  } else {    b.add(bset);  }  return key;}  }
class C{  public BlockChainScore subtract(final BlockChainScore score){  return new BlockChainScore(this.getRaw().subtract(score.getRaw()));}  }
class C{  public IntervalXYItemLabelGenerator(){  this(DEFAULT_ITEM_LABEL_FORMAT,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());}  }
class C{  public boolean equalsIdentifiers(String a,String b){  if (a == b || a.equals(b)) {    return true;  }  return !dbSettings.databaseToUpper && a.equalsIgnoreCase(b);}  }
class C{  public DummyCachePerfStats(){}  }
class C{  public int writeToMessage(ByteBuffer byteBuffer){  int remaining=byteBuffer.remaining();  while (this.length + remaining > capacity) {    if (!this.messageBuffer.expandMessage(this)) {      return -1;    }  }  int bytesToCopy=Math.min(remaining,this.capacity - this.length);  byteBuffer.get(this.sharedArray,this.offset + this.length,bytesToCopy);  this.length+=bytesToCopy;  return bytesToCopy;}  }
class C{  public static boolean isRowDimension(double[][] M,int m){  if (M.length != m)   return false;  return true;}  }
class C{  public static List<Integer> msgsPerClient(int numMsgs,int numClients){  List<Integer> counts=new ArrayList<Integer>(numClients);  if (numClients == 0 || numMsgs == 0) {    return counts;  }  int mc=numMsgs / numClients;  for (int i=0; i < numClients; i++) {    counts.add(mc);  }  int extra=numMsgs % numClients;  for (int i=0; i < extra; i++) {    counts.set(i,counts.get(i) + 1);  }  return counts;}  }
class C{  public void reset(int singleDocID,long version){  doc=-1;  this.singleDocID=singleDocID;  this.version=version;}  }
class C{  private RdapSearchResults searchByHandle(final RdapSearchPattern partialStringQuery,DateTime now){  if (!partialStringQuery.getHasWildcard()) {    ContactResource contactResource=ofy().load().type(ContactResource.class).id(partialStringQuery.getInitialString()).now();    ImmutableList<Registrar> registrars=getMatchingRegistrars(partialStringQuery);    return makeSearchResults(((contactResource == null) || !contactResource.getDeletionTime().isEqual(END_OF_TIME)) ? ImmutableList.<ContactResource>of() : ImmutableList.of(contactResource),registrars,now);  } else   if (partialStringQuery.getSuffix() == null) {    return makeSearchResults(ofy().load().type(ContactResource.class).filterKey(">=",Key.create(ContactResource.class,partialStringQuery.getInitialString())).filterKey("<",Key.create(ContactResource.class,partialStringQuery.getNextInitialString())).filter("deletionTime",END_OF_TIME).limit(rdapResultSetMaxSize + 1).list(),ImmutableList.<Registrar>of(),now);  } else {    throw new UnprocessableEntityException("Suffixes not allowed in entity handle searches");  }}  }
class C{  public BooleanConditionBuilder not(ConditionBuilder<?,?>... builders){  not.addAll(Arrays.asList(builders));  return this;}  }
class C{  public static void showToast(Context context,String msg){  Toast.makeText(context,msg,Toast.LENGTH_LONG).show();}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  boolean isInvalidationDelayedRequired(){  return invalidationDelayedRequired;}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  public static void checkState(final boolean expression,@Nonnull String errorMessage){  if (!expression) {    throw new IllegalStateException(errorMessage);  }}  }
class C{  public final float determinant(){  float det;  det=m00 * (m11 * m22 * m33 + m12 * m23 * m31 + m13 * m21 * m32 - m13 * m22 * m31 - m11 * m23 * m32 - m12 * m21 * m33);  det-=m01 * (m10 * m22 * m33 + m12 * m23 * m30 + m13 * m20 * m32 - m13 * m22 * m30 - m10 * m23 * m32 - m12 * m20 * m33);  det+=m02 * (m10 * m21 * m33 + m11 * m23 * m30 + m13 * m20 * m31 - m13 * m21 * m30 - m10 * m23 * m31 - m11 * m20 * m33);  det-=m03 * (m10 * m21 * m32 + m11 * m22 * m30 + m12 * m20 * m31 - m12 * m21 * m30 - m10 * m22 * m31 - m11 * m20 * m32);  return (det);}  }
class C{  public double normInf(){  double f=0;  for (int i=0; i < m; i++) {    double s=0;    for (int j=0; j < n; j++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  public static void makeBucket_test3() throws Exception {  println("Test: makeBucket(String bucketName, String region)");  String name=getRandomName() + ".withperiod";  client.makeBucket(name,"eu-central-1");  client.removeBucket(name);}  }
class C{  private String c(String str){  return str + count;}  }
class C{  public void parseMetaData(){  final ImageFormat imageFormat=ImageFormatChecker.getImageFormat_WrapIOException(getInputStream());  mImageFormat=imageFormat;  final Pair<Integer,Integer> dimensions;  if (DefaultImageFormats.isWebpFormat(imageFormat)) {    dimensions=readWebPImageSize();  } else {    dimensions=readImageSize();  }  if (imageFormat == DefaultImageFormats.JPEG && mRotationAngle == UNKNOWN_ROTATION_ANGLE) {    if (dimensions != null) {      mRotationAngle=JfifUtil.getAutoRotateAngleFromOrientation(JfifUtil.getOrientation(getInputStream()));    }  } else {    mRotationAngle=0;  }}  }
class C{  public void test_distinctTermScanOptimizer_variable_context_projected(){  new Helper(){{      final long rangeCount_sp1=1000L;{        given=select(projection(varNode(z)),where(statementPatternNode(varNode(s),varNode(p),varNode(o),varNode(z),property(Annotations.ESTIMATED_CARDINALITY,rangeCount_sp1))),DISTINCT);      }{        final long newRangeCount=(long)((1.0 / (store.isQuads() ? 4 : 3)) * rangeCount_sp1);        StatementPatternNode sp=statementPatternNode(varNode(s),varNode(p),varNode(o),varNode(z),property(Annotations.ESTIMATED_CARDINALITY,newRangeCount),property(Annotations.DISTINCT_TERM_SCAN_VAR,varNode(z)));        sp.setQueryHint(IPredicate.Annotations.KEY_ORDER,"CSPO");        expected=select(projection(varNode(z)),where(sp),NOT_DISTINCT,NOT_REDUCED);      }    }  }.test();}  }
class C{  @Override public int countMissing(){  int count=0;  for (int i=0; i < size(); i++) {    float f=get(i);    if (f != f) {      count++;    }  }  return count;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) @Path("/{snapshot_id}/action") public Object actionOnSnapshot(@PathParam("tenant_id") String openstack_tenant_id,@PathParam("snapshot_id") String snapshot_id,SnapshotActionRequest actionRequest) throws InternalException, InterruptedException {  BlockSnapshot snap=findSnapshot(snapshot_id,openstack_tenant_id);  if (snap == null) {    _log.error("Invalid snpashot ID ={} ",snapshot_id);    return CinderApiUtils.createErrorResponse(404,"Not Found : Invalid snapshot ID " + snapshot_id);  }  if (snap.getExtensions() == null) {    snap.setExtensions(new StringMap());  }  snap.getExtensions().put("status",actionRequest.updateStatus.status);  _dbClient.updateObject(snap);  return Response.status(202).build();}  }
class C{  @Override public MemChunkHolder<BigDataMemAllocator> createChunk(long size,boolean autoreclaim){  MemChunkHolder<BigDataMemAllocator> ret=null;  Long addr=m_vmasvc.allocate(m_nid,size,true);  if (0 == addr && m_activegc) {    forceGC();    addr=m_vmasvc.allocate(m_nid,size,true);  }  if (0 != addr) {    ret=new MemChunkHolder<BigDataMemAllocator>(this,addr,size);    ret.setCollector(m_chunkcollector);    if (autoreclaim) {      m_chunkcollector.register(ret);    }  }  return ret;}  }
class C{  public static String deflow(String text,boolean delSp){  String[] lines=text.split("\r\n|\n",-1);  StringBuffer result=null;  StringBuffer resultLine=new StringBuffer();  int resultLineQuoteDepth=0;  boolean resultLineFlowed=false;  for (int i=0; i <= lines.length; i++) {    String line=i < lines.length ? lines[i] : null;    int actualQuoteDepth=0;    if (line != null && line.length() > 0) {      if (line.equals(RFC2646_SIGNATURE))       resultLineFlowed=false; else       if (line.charAt(0) == RFC2646_QUOTE) {        actualQuoteDepth=1;        while (actualQuoteDepth < line.length() && line.charAt(actualQuoteDepth) == RFC2646_QUOTE)         actualQuoteDepth++;        if (resultLineQuoteDepth != actualQuoteDepth)         resultLineFlowed=false;        line=line.substring(actualQuoteDepth);      } else {        if (resultLineQuoteDepth > 0)         resultLineFlowed=false;      }      if (line.length() > 0 && line.charAt(0) == RFC2646_SPACE)       line=line.substring(1);    } else     if (line == null)     resultLineFlowed=false;    if (!resultLineFlowed && i > 0) {      if (resultLineQuoteDepth > 0)       resultLine.insert(0,RFC2646_SPACE);      for (int j=0; j < resultLineQuoteDepth; j++)       resultLine.insert(0,RFC2646_QUOTE);      if (result == null)       result=new StringBuffer(); else       result.append(RFC2646_CRLF);      result.append(resultLine.toString());      resultLine=new StringBuffer();      resultLineFlowed=false;    }    resultLineQuoteDepth=actualQuoteDepth;    if (line != null) {      if (!line.equals(RFC2646_SIGNATURE) && line.endsWith("" + RFC2646_SPACE) && i < lines.length - 1) {        if (delSp)         line=line.substring(0,line.length() - 1);        resultLineFlowed=true;      } else       resultLineFlowed=false;      resultLine.append(line);    }  }  return result.toString();}  }
class C{  public void addOutput(RuleOutput newCase){  if (isVoid()) {    effects=newCase.effects;  } else   if (newCase.isVoid() || effects.hashCode() == newCase.effects.hashCode()) {    return;  } else   if (type == RuleType.PROB) {    Map<Effect,Parameter> newOutput=new HashMap<Effect,Parameter>();    for (    Effect o : effects.keySet()) {      Parameter param1=effects.get(o);      for (      Effect o2 : newCase.getEffects()) {        Parameter param2=newCase.getParameter(o2);        Effect newEffect=new Effect(o,o2);        Parameter newParam=mergeParameters(param1,param2,'*');        if (newOutput.containsKey(newEffect)) {          newParam=mergeParameters(newOutput.get(newEffect),newParam,'+');        }        newOutput.put(newEffect,newParam);      }    }    effects=newOutput;    newCase.pruneEffects();  } else   if (type == RuleType.UTIL) {    for (    Effect o2 : newCase.getEffects()) {      Parameter param2=newCase.getParameter(o2);      if (effects.containsKey(o2)) {        param2=mergeParameters(effects.get(o2),param2,'+');      }      effects.put(o2,newCase.getParameter(o2));    }  }}  }
class C{  private Base64(){}  }
class C{  @Override public void disconnectStorage(URI storage) throws ControllerException {  StorageSystem storageObj=null;  try {    storageObj=_dbClient.queryObject(StorageSystem.class,storage);  } catch (  Exception e) {    throw DeviceControllerException.exceptions.unableToDisconnectStorageDeviceMonitoringDbException(storage.toString(),e);  }  if (storageObj == null) {    String msg=String.format("Failed disconnecting %1$s for monitoring. Database returned a null reference.",storage);    _log.error(msg);    throw DeviceControllerException.exceptions.unableToDisconnectStorageDeviceMonitoringDbNullRef(storage.toString());  }  FileStorageDevice storageDevice=getDevice(storageObj.getSystemType());  if (storageDevice == null) {    String devType=String.format("%1$s",getDevice(storageObj.getSystemType()));    String msg=String.format("Failed disconnecting %1$s for monitoring. No device for type %2$s.",storage,devType);    _log.error(msg);    throw DeviceControllerException.exceptions.unableToDisconnectStorageDeviceMonitoringNoDevice(storage.toString(),devType);  }  storageDevice.doDisconnect(storageObj);  _log.info("Removing storage device from work pool: {}",storageObj.getId());}  }
class C{  private CombinedRangeCategoryPlot createPlot(){  CategoryDataset dataset1=createDataset1();  CategoryAxis catAxis1=new CategoryAxis("Category");  LineAndShapeRenderer renderer1=new LineAndShapeRenderer();  renderer1.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());  CategoryPlot subplot1=new CategoryPlot(dataset1,catAxis1,null,renderer1);  subplot1.setDomainGridlinesVisible(true);  CategoryDataset dataset2=createDataset2();  CategoryAxis catAxis2=new CategoryAxis("Category");  BarRenderer renderer2=new BarRenderer();  renderer2.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());  CategoryPlot subplot2=new CategoryPlot(dataset2,catAxis2,null,renderer2);  subplot2.setDomainGridlinesVisible(true);  NumberAxis rangeAxis=new NumberAxis("Value");  CombinedRangeCategoryPlot plot=new CombinedRangeCategoryPlot(rangeAxis);  plot.add(subplot1,2);  plot.add(subplot2,1);  return plot;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public PrefixStringMatcher(String[] prefixes){  super();  for (int i=0; i < prefixes.length; i++)   addPatternForward(prefixes[i]);}  }
class C{  public static HashSet<String> declaredSymbolsInScope(ModuleNode module,Location loc){  HashSet<String> result=new HashSet<String>();  addDeclaredSymbolsInScope(result,module,loc);  return result;}  }
class C{  private void applyAttrSets(TransformerImpl transformer,StylesheetRoot stylesheet,QName attributeSetsNames[]) throws TransformerException {  if (null != attributeSetsNames) {    int nNames=attributeSetsNames.length;    for (int i=0; i < nNames; i++) {      QName qname=attributeSetsNames[i];      java.util.List attrSets=stylesheet.getAttributeSetComposed(qname);      if (null != attrSets) {        int nSets=attrSets.size();        for (int k=nSets - 1; k >= 0; k--) {          ElemAttributeSet attrSet=(ElemAttributeSet)attrSets.get(k);          attrSet.execute(transformer);        }      } else {        throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_ATTRIB_SET,new Object[]{qname}),this);      }    }  }}  }
class C{  public ShibbolethOAuth2ClientRepository(final Set<ClientDetailsEntity> registeredClients){  this.clients=registeredClients;}  }
class C{  public void release(){  if (DEBUG)   Log.v(TAG,"release() : " + this,new RuntimeException("here"));  checkService();synchronized (mToken) {    releaseLocked();  }}  }
class C{  private Visualization embedOrThumbnail(final int thumbsize,PlotItem it,VisualizationTask task,Element parent){  final Visualization vis;  if (!single) {    vis=task.getFactory().makeVisualizationOrThumbnail(task,plot,it.w,it.h,it.proj,thumbsize);  } else {    vis=task.getFactory().makeVisualization(task,plot,it.w,it.h,it.proj);  }  if (vis == null || vis.getLayer() == null) {    LoggingUtil.warning("Visualization returned empty layer: " + vis);    return vis;  }  if (task.hasAnyFlags(VisualizationTask.FLAG_NO_EXPORT)) {    vis.getLayer().setAttribute(SVGPlot.NO_EXPORT_ATTRIBUTE,SVGPlot.NO_EXPORT_ATTRIBUTE);  }  parent.appendChild(vis.getLayer());  return vis;}  }
class C{  public static double calculateInches(double meters){  double inches=meters * 39.37;  return inches;}  }
class C{  public static int findTokenInfoIndexByOffset(@NotNull List<? extends TokenInfo> tokens,final int offset){  int low=0;  int high=tokens.size() - 1;  while (low <= high) {    final int mid=(low + high) / 2;    final TokenInfo midVal=tokens.get(mid);    if (offset < midVal.startOffset) {      high=mid - 1;    } else     if (offset >= midVal.endOffset) {      low=mid + 1;    } else {      return mid;    }  }  return tokens.size();}  }
class C{  public Vector3f multLocal(float x,float y,float z){  this.x*=x;  this.y*=y;  this.z*=z;  return this;}  }
class C{  public static final int alpha(int color){  return (color >> 24) & 0xFF;}  }
class C{  public static void safeDispose(final Resource resource){  if (resource != null && !resource.isDisposed()) {    resource.dispose();  }}  }
class C{  public SabresException(int code,String msg){  super(msg);  this.code=code;}  }
class C{  public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int i;  int progress;  String reflectionAxis="vertical";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("v")) {        reflectionAxis="vertical";      } else       if (args[i].toLowerCase().contains("ho")) {        reflectionAxis="horizontal";      } else       if (args[i].toLowerCase().contains("b")) {        reflectionAxis="both";      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    int rowsLessOne=numRows - 1;    int colsLessOne=numCols - 1;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    double[] data;    if (reflectionAxis.equals("vertical")) {      for (row=0; row < numRows; row++) {        data=image.getRowValues(row);        for (col=0; col < numCols; col++) {          output.setValue(rowsLessOne - row,col,data[col]);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (numRows - 1));        updateProgress("Finding patch min row and columns:",progress);      }    } else     if (reflectionAxis.equals("horizontal")) {      for (row=0; row < numRows; row++) {        data=image.getRowValues(row);        for (col=0; col < numCols; col++) {          output.setValue(row,colsLessOne - col,data[col]);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (numRows - 1));        updateProgress("Finding patch min row and columns:",progress);      }    } else     if (reflectionAxis.equals("both")) {      for (row=0; row < numRows; row++) {        data=image.getRowValues(row);        for (col=0; col < numCols; col++) {          output.setValue(rowsLessOne - row,colsLessOne - col,data[col]);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (numRows - 1));        updateProgress("Finding patch min row and columns:",progress);      }    }    output.setDisplayMinimum(image.getDisplayMinimum());    output.setDisplayMaximum(image.getDisplayMaximum());    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public T caseReactionFired(ReactionFired object){  return null;}  }
class C{  public Element append(ICalDataType dataType,String value){  String dataTypeStr=toLocalName(dataType);  return append(dataTypeStr,value);}  }
class C{  public String toString(){  Annotation[][] aa=getAnnotations();  StringBuilder sbuf=new StringBuilder();  int k=0;  while (k < aa.length) {    Annotation[] a=aa[k++];    int i=0;    while (i < a.length) {      sbuf.append(a[i++].toString());      if (i != a.length)       sbuf.append(" ");    }    if (k != aa.length)     sbuf.append(", ");  }  return sbuf.toString();}  }
class C{  private static void copyToDomainAttributes(Discount domObj,VODiscount voObj){  domObj.setKey(voObj.getKey());  domObj.setValue(voObj.getValue());  domObj.setStartTime(voObj.getStartTime());  domObj.setEndTime(voObj.getEndTime());}  }
class C{  StatementPatternNode stmtPatternWithVarOptional(final String varName){  return stmtPatternWithVar(varName,true);}  }
class C{  public Token_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_parent=jcas.getRequiredFeatureDE(casType,"parent","uima.tcas.Annotation",featOkTst);  casFeatCode_parent=(null == casFeat_parent) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_parent).getCode();  casFeat_lemma=jcas.getRequiredFeatureDE(casType,"lemma","de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Lemma",featOkTst);  casFeatCode_lemma=(null == casFeat_lemma) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_lemma).getCode();  casFeat_stem=jcas.getRequiredFeatureDE(casType,"stem","de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Stem",featOkTst);  casFeatCode_stem=(null == casFeat_stem) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_stem).getCode();  casFeat_pos=jcas.getRequiredFeatureDE(casType,"pos","de.tudarmstadt.ukp.dkpro.core.api.lexmorph.type.pos.POS",featOkTst);  casFeatCode_pos=(null == casFeat_pos) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_pos).getCode();  casFeat_morph=jcas.getRequiredFeatureDE(casType,"morph","de.tudarmstadt.ukp.dkpro.core.api.lexmorph.type.morph.MorphologicalFeatures",featOkTst);  casFeatCode_morph=(null == casFeat_morph) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_morph).getCode();  casFeat_id=jcas.getRequiredFeatureDE(casType,"id","uima.cas.String",featOkTst);  casFeatCode_id=(null == casFeat_id) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_id).getCode();  casFeat_form=jcas.getRequiredFeatureDE(casType,"form","de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.TokenForm",featOkTst);  casFeatCode_form=(null == casFeat_form) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_form).getCode();}  }
class C{  private Location createLocation(int i){  Location loc=new Location("test");  loc.setLatitude(INITIAL_LATITUDE + (double)i / 10000.0);  loc.setLongitude(INITIAL_LONGITUDE - (double)i / 10000.0);  loc.setAccuracy((float)i / 100.0f);  loc.setAltitude(i * ALTITUDE_INTERVAL);  return loc;}  }
class C{  protected String readStringImpl(int length) throws IOException {  StringBuffer sb=new StringBuffer();  for (int i=0; i < length; i++) {    int ch=is.read();    if (ch < 0x80)     sb.append((char)ch); else     if ((ch & 0xe0) == 0xc0) {      int ch1=is.read();      int v=((ch & 0x1f) << 6) + (ch1 & 0x3f);      sb.append((char)v);    } else     if ((ch & 0xf0) == 0xe0) {      int ch1=is.read();      int ch2=is.read();      int v=((ch & 0x0f) << 12) + ((ch1 & 0x3f) << 6) + (ch2 & 0x3f);      sb.append((char)v);    } else     throw new IOException("bad utf-8 encoding");  }  return sb.toString();}  }
class C{  public PaletteSliderThumbIcon(Icon[] icons){  super(icons);}  }
class C{  public boolean isCollection(){  return true;}  }
class C{  public HttpAuditEvent(String sessionId,CurrentUser who,String what,long when,Multimap<String,?> params,String httpMethod,Object input,int status,Object result){  super(sessionId,who,what,when,params,result);  this.httpMethod=httpMethod;  this.input=input;  this.httpStatus=status;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    return (sage.plugin.CorePluginManager.STANDARD_TYPE_PLUGIN.equals(pluggy.getType()) && pluggy.getImplClass() != null && pluggy.getImplClass().length() > 0) ? Boolean.TRUE : Boolean.FALSE;  }  return Boolean.FALSE;}  }
class C{  private void installListeners(AccessibleContext ac){  if (ac != null) {    AccessibleStateSet states=ac.getAccessibleStateSet();    if (!states.contains(AccessibleState.TRANSIENT)) {      ac.addPropertyChangeListener(this);      AccessibleStateSet set=ac.getAccessibleStateSet();      if (set.contains(_AccessibleState.MANAGES_DESCENDANTS)) {        return;      }      AccessibleRole role=ac.getAccessibleRole();      if (role == AccessibleRole.LIST || role == AccessibleRole.TREE) {        return;      }      if (role == AccessibleRole.TABLE) {        Accessible child=ac.getAccessibleChild(0);        if (child != null) {          AccessibleContext ac2=child.getAccessibleContext();          if (ac2 != null) {            role=ac2.getAccessibleRole();            if (role != null && role != AccessibleRole.TABLE) {              return;            }          }        }      }      int count=ac.getAccessibleChildrenCount();      for (int i=0; i < count; i++) {        Accessible child=ac.getAccessibleChild(i);        if (child != null) {          installListeners(child);        }      }    }  }}  }
class C{  public void doSaveAs(){  FileDialog fd=new FileDialog(this,"Save Simulation As...",FileDialog.SAVE);  if (simulationFile == null) {    fd.setFile("Untitled.checkpoint");  } else {    fd.setFile(simulationFile.getName());    fd.setDirectory(simulationFile.getParentFile().getPath());  }  fd.setVisible(true);  ;  File f=null;  if (fd.getFile() != null)   try {    f=new File(fd.getDirectory(),Utilities.ensureFileEndsWith(fd.getFile(),".checkpoint"));    simulation.state.writeToCheckpoint(f);    simulationFile=f;  } catch (  Exception e) {    Utilities.informOfError(e,"An error occurred while saving the simulation to the file " + (f == null ? " " : f.getName()),null);  }}  }
class C{  public void selected(SelectEvent event){  if (event.hasObjects() && event.getTopObject() == this.annotation) {    boolean update=false;    if (event.getEventAction().equals(SelectEvent.ROLLOVER) || event.getEventAction().equals(SelectEvent.LEFT_CLICK)) {      if (!this.annotation.getAttributes().isHighlighted()) {        this.annotation.getAttributes().setHighlighted(true);        update=true;      }      PickedObject po=event.getTopPickedObject();      if (po.getValue(AVKey.URL) != null) {        ((Component)this.wwd).setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));        int i=Integer.parseInt((String)po.getValue(AVKey.URL));        if (this.selectedIndex != i) {          this.selectedIndex=i;          update=true;        }        if (event.getEventAction().equals(SelectEvent.LEFT_CLICK)) {          LayerList layers=wwd.getModel().getLayers();          if (i >= 0 && i < layers.size()) {            layers.get(i).setEnabled(!layers.get(i).isEnabled());            update=true;          }        }      } else {        if (this.selectedIndex != -1) {          this.selectedIndex=-1;          update=true;        }        if (this.isComponentDragEnabled())         ((Component)this.wwd).setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR)); else         ((Component)this.wwd).setCursor(Cursor.getDefaultCursor());      }    }    if (event.getEventAction().equals(SelectEvent.DRAG) || event.getEventAction().equals(SelectEvent.DRAG_END)) {      if (this.isComponentDragEnabled() || this.isLayerDragEnabled()) {        boolean wasDraggingLayer=this.draggingLayer;        this.drag(event);        if (this.draggingLayer || wasDraggingLayer)         update=true; else         this.wwd.redraw();        event.consume();      }    }    if (update)     this.update();  } else   if (event.getEventAction().equals(SelectEvent.ROLLOVER) && this.annotation.getAttributes().isHighlighted()) {    this.annotation.getAttributes().setHighlighted(false);    ((Component)this.wwd).setCursor(Cursor.getDefaultCursor());    this.update();  }}  }
class C{  protected ShortMessage(byte[] data){  super(data);}  }
class C{  private void parseMediaDescriptions(){  while (getToken(bin,"m=")) {    Vector<MediaDescription> descs=new Vector<>();    String line=getLine(bin);    int end=line.indexOf(' ');    String name=line.substring(0,end);    int start=end + 1;    end=line.indexOf(' ',start);    int port=Integer.parseInt(line.substring(start,end));    start=end + 1;    end=line.indexOf(' ',start);    String protocol=line.substring(start,end);    String payload;    start=end + 1;    end=line.indexOf(' ',start);    while (end != -1) {      payload=line.substring(start,end);      descs.addElement(new MediaDescription(name,port,protocol,payload));      start=end + 1;      end=line.indexOf(' ',start);    }    payload=line.substring(start);    descs.addElement(new MediaDescription(name,port,protocol,payload));    if (getToken(bin,"i=")) {      String mediaTitle=getLine(bin);      for (int i=0; i < descs.size(); i++) {        descs.elementAt(i).mMediaTitle=mediaTitle;      }    }    if (getToken(bin,"c=")) {      String connectionInfo=getLine(bin);      for (int i=0; i < descs.size(); i++) {        descs.elementAt(i).mConnectionInfo=connectionInfo;      }    }    while (getToken(bin,"b=")) {      line=getLine(bin);      int index=line.indexOf(':');      if (index > 0) {        String valueAttribute=line.substring(index + 1);        if (line.contains("AS")) {          for (int i=0; i < descs.size(); i++) {            descs.elementAt(i).mBandwidthInfo=valueAttribute;          }        } else         if (line.contains("RS")) {          for (int i=0; i < descs.size(); i++) {            descs.elementAt(i).mSenderBandwidthInfo=valueAttribute;          }        } else         if (line.contains("RR")) {          for (int i=0; i < descs.size(); i++) {            descs.elementAt(i).mReceiverBandwidthInfo=valueAttribute;          }        }      }    }    if (getToken(bin,"k=")) {      String encryptionKey=getLine(bin);      for (int i=0; i < descs.size(); i++) {        descs.elementAt(i).mEncryptionKey=encryptionKey;      }    }    while (getToken(bin,"a=")) {      line=getLine(bin);      int index=line.indexOf(':');      if (index > 0) {        String nameAttribute=line.substring(0,index);        String valueAttribute=line.substring(index + 1);        MediaAttribute attribute=new MediaAttribute(nameAttribute,valueAttribute);        if (valueAttribute.indexOf(' ') != -1) {          boolean payloadFound=false;          for (int i=0; i < descs.size(); i++) {            if (valueAttribute.startsWith(descs.elementAt(i).mPayload)) {              descs.elementAt(i).mMediaAttributes.addElement(attribute);              payloadFound=true;            }          }          if (!payloadFound) {            for (int i=0; i < descs.size(); i++) {              descs.elementAt(i).mMediaAttributes.addElement(attribute);            }          }        } else {          for (int i=0; i < descs.size(); i++) {            descs.elementAt(i).mMediaAttributes.addElement(attribute);          }        }      }    }    for (int i=0; i < descs.size(); i++) {      mediaDescriptions.addElement(descs.elementAt(i));    }  }}  }
class C{  public void testSetF21Momentary(){  boolean f21Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF21Momentary(f21Momentary);}  }
class C{  public void retainProgress(final String title,final String message,final int progress){  mTitle=title;  mMessage=message;  mProgress=progress;}  }
class C{  @org.junit.Test public void testSerializedFromJson(){  final List<RunningQuery> rQueries=deserialize(rQueryJson);  assert (rQueries != null);  final Iterator<RunningQuery> iter=rQueries.iterator();  int i=0;  assert (iter.hasNext());  while (iter.hasNext()) {    final RunningQuery r=iter.next();    i++;  }  assertEquals(i,2);}  }
class C{  private void destroyInternal(){  isDestroyed=true;}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  paint.setStyle(Style.FILL);  drawCircle(canvas,paint,x + SHAPE_WIDTH,y,3);}  }
class C{  public static final boolean hasNonNullElement(Object[] array){  if (array != null) {    final int n=array.length;    for (int i=0; i < n; i++) {      if (array[i] != null) {        return true;      }    }  }  return false;}  }
class C{  public boolean isAlwaysUseQuotes(){  return alwaysUseQuotes;}  }
class C{  void changeBaseFont(Font old,Font font){  for (int i=0; i < styles.length; i++) {    Style style=styles[i];    if (style != null && style.font != null) {      if (style.font.getFamily().equals(old.getFamily()) && style.font.getSize() == old.getSize()) {        int s=style.font.getStyle();        StyleContext sc=StyleContext.getDefaultStyleContext();        style.font=sc.getFont(font.getFamily(),s,font.getSize());      }    }  }}  }
class C{  @Override public void clearWarnings() throws SQLException {  try {    debugCodeCall("clearWarnings");    checkClosed();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void log(Level level,String message){  log(level,"",message);}  }
class C{  public boolean isRunAtFullBuild(){  return runAtFullBuild;}  }
class C{  private void waitForAllNodesToBecome(String state,boolean isVersioned,String svcName){  final String prefix="Waiting for all cluster nodes to become state: " + state;  long start=System.currentTimeMillis();  log.info(prefix);  while (System.currentTimeMillis() - start < MAX_WAIT_TIME_IN_MIN * 60 * 1000) {    try {      if (isClusterStateDone(state,isVersioned,svcName)) {        log.info("{} : Done",prefix);        return;      }      Thread.sleep(WAIT_INTERVAL_IN_SEC * 1000);    } catch (    InterruptedException ex) {      log.warn("InterruptedException:{}",ex);    }catch (    FatalCoordinatorException ex) {      log.error("fatal coodinator exception",ex);      throw ex;    }catch (    Exception ex) {      log.error("exception checking node status",ex);    }  }  log.info("{} : Timed out",prefix);  throw new IllegalStateException(String.format("%s : Timed out",prefix));}  }
class C{  @Deprecated public void expungeSharedNotebooks(List<Long> sharedNotebookIds,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"expungeSharedNotebooks",mAuthenticationToken,sharedNotebookIds);}  }
class C{  @Nullable private static String askConfigFile() throws IOException {  List<GridTuple3<String,Long,File>> files=GridConfigurationFinder.getConfigFiles();  String title="Available configuration files:";  X.println(title);  X.println(U.dash(title.length()));  for (int i=0; i < files.size(); i++)   System.out.println(i + ":\t" + files.get(i).get1());  X.print("\nChoose configuration file ('c' to cancel) [0]: ");  BufferedReader reader=new BufferedReader(new InputStreamReader(System.in));  String line=reader.readLine();  if ("c".equalsIgnoreCase(line)) {    System.out.println("\nOperation cancelled.");    return null;  }  if (line != null && line.isEmpty())   line="0";  try {    GridTuple3<String,Long,File> file=files.get(Integer.valueOf(line));    X.println("\nUsing configuration: " + file.get1() + "\n");    return file.get3().getAbsolutePath();  } catch (  Exception ignored) {    X.error("\nInvalid selection: " + line);    return null;  }}  }
class C{  private QueryBuilderKraken parseDelete(){  DeleteQueryBuilder query=new DeleteQueryBuilder(_tableManager,_sql);  Token token;  if ((token=scanToken()) != Token.FROM) {    throw error("expected FROM at '{0}'",token);  }  String tableName=parseTableName();  query.setTableName(tableName);  _query=query;  ExprKraken whereExpr=null;  token=scanToken();  if (token == Token.WHERE) {    whereExpr=parseExpr();  } else   if (token != null) {    throw error("expected WHERE at '{0}'",token);  }  ParamExpr[] params=_params.toArray(new ParamExpr[_params.size()]);  query.setParams(params);  query.setWhereExpr(whereExpr);  return query;}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public final void testReadbyteArrayintint03() throws IOException {  assertTrue(MY_MESSAGE_LEN % (CHUNK_SIZE + 1) != 0);  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      byte[] bArray=new byte[MY_MESSAGE_LEN];      for (int i=0; i < MY_MESSAGE_LEN / (CHUNK_SIZE + 1); i++) {        assertTrue("retval1",dis.read(bArray,i * (CHUNK_SIZE + 1),CHUNK_SIZE + 1) == CHUNK_SIZE + 1);      }      assertTrue("retval2",dis.read(bArray,MY_MESSAGE_LEN / (CHUNK_SIZE + 1) * (CHUNK_SIZE + 1),MY_MESSAGE_LEN % (CHUNK_SIZE + 1)) == (MY_MESSAGE_LEN % (CHUNK_SIZE + 1)));      assertTrue("bArray",Arrays.equals(myMessage,bArray));      assertTrue("update",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void stackEntered(long time,boolean focused){  boolean finishImmediately=!focused;  mSpacing=computeSpacing(mStackTabs != null ? mStackTabs.length : 0);  resetAllScrollOffset();  startAnimation(time,OverviewAnimationType.ENTER_STACK,finishImmediately);}  }
class C{  public Builder clockTicker(Ticker ticker){  this._ticker=ticker;  return this;}  }
class C{  public static void createErrorTMessage(TProtocol oprot,String methodName,int id,String errMsg) throws Exception {  TMessage tmessage=new TMessage(methodName,TMessageType.EXCEPTION,id);  oprot.writeMessageBegin(tmessage);  oprot.writeMessageEnd();  TApplicationException ex=new TApplicationException(TApplicationException.INTERNAL_ERROR,errMsg);  try {    ex.write(oprot);  } catch (  TException e) {    e.printStackTrace();  }}  }
class C{  protected final void fireServiceAdded(Class<?> serviceClass){  fireServiceAdded(new BeanContextServiceAvailableEvent(this,serviceClass));}  }
class C{  static ByteBuffer lengthValueEncode(JSONObject m){  byte[] value=m.toString().getBytes();  ByteBuffer encoded=ByteBuffer.allocate(Integer.SIZE / Byte.SIZE + value.length);  encoded.order(ByteOrder.BIG_ENDIAN);  encoded.putInt(value.length);  encoded.put(value);  return encoded;}  }
class C{  public EnumHelper(final Class<T> c,final T[] values){  mValues=values.clone();  mNames=new String[mValues.length];  int i=0;  for (  final T t : mValues) {    mValueOf.put(t.name(),t);    mNames[i++]=t.name();  }  mClass=c;}  }
class C{  public static <T extends IIdentifyable>T[] checkIds(@NonNull T... items){  for (  T item : items) {    checkId(item);  }  return items;}  }
class C{  public boolean equals(Object other){  if (_set.equals(other)) {    return true;  } else   if (other instanceof Set) {    Set that=(Set)other;    if (that.size() != _set.size()) {      return false;    } else {      Iterator it=that.iterator();      for (int i=that.size(); i-- > 0; ) {        Object val=it.next();        if (val instanceof Double) {          double v=unwrap(val);          if (_set.contains(v)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public static void hangIfStopped(){  if (que.get() == null)   try {    Thread.sleep(300000);  } catch (  InterruptedException ignored) {  }}  }
class C{  public void reverse(){  int[] newBits=new int[bits.length];  int size=this.size;  for (int i=0; i < size; i++) {    if (get(size - i - 1)) {      newBits[i >> 5]|=1 << (i & 0x1F);    }  }  bits=newBits;}  }
class C{  public void removeBookmarkedConference(BookmarkedConference bookmarkedConference){  bookmarkedConferences.remove(bookmarkedConference);}  }
class C{  public static TestInfo startPerformanceTest(@NonNls @NotNull String message,int expectedMs,@NotNull ThrowableRunnable test){  return new TestInfo(test,expectedMs,message);}  }
class C{  @Override public boolean onPreferenceChange(Preference preference,Object newValue){  final String newValueString=newValue.toString();  if (TextUtils.isEmpty(newValueString)) {    return false;  }  try {    final double value=Double.parseDouble(newValueString);    final int count=Math.abs(value - SINGLE_VALUE) < PRECISION ? SINGLE_VALUE : MANY_VALUE;    preference.setSummary(getResources().getQuantityString(R.plurals.auto_scan_time_delay_summary_format,count,value));    return true;  } catch (  NumberFormatException e) {    return false;  }}  }
class C{  public void showDuplicateMessage(){  uiNotification.displayValidationError(getDuplicateFileValidationMessage());}  }
class C{  public Statistics(Iterable<? extends Comparable<?>> data){  statistics=new HashMap<String,Double>();  this.data=data;}  }
class C{  private float calculateScale(int x,int y){  final float centerX=getWidth() / 2f;  final float centerY=getHeight() / 2f;  final float maxDistance=(float)Math.sqrt(centerX * centerX + centerY * centerY);  final float deltaX=centerX - x;  final float deltaY=centerY - y;  final float distance=(float)Math.sqrt(deltaX * deltaX + deltaY * deltaY);  final float scale=0.5f + (distance / maxDistance) * 0.5f;  return scale;}  }
class C{  public static boolean isProjectAdmin(Project aProject,RepositoryService aProjectRepository,User aUser){  boolean projectAdmin=false;  try {    List<ProjectPermission> permissionLevels=aProjectRepository.listProjectPermisionLevel(aUser,aProject);    for (    ProjectPermission permissionLevel : permissionLevels) {      if (StringUtils.equalsIgnoreCase(permissionLevel.getLevel().getName(),PermissionLevel.ADMIN.getName())) {        projectAdmin=true;        break;      }    }  } catch (  NoResultException ex) {    LOG.info("No permision is given to this user " + ex);  }  return projectAdmin;}  }
class C{  public static void defaultDatabaseTearDown(FBManager fbManager) throws Exception {  try {    fbManager.dropDatabase(getDatabasePath(),DB_USER,DB_PASSWORD);  }  finally {    fbManager.stop();  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("ChangePwdForm[");  buffer.append(", m_pwd = ******");  buffer.append(", m_newPwd = ******");  buffer.append(", m_confNewPwd = ******");  buffer.append("]");  return buffer.toString();}  }
class C{  public void removeAll(String noteId,String paragraphId){synchronized (registry) {    List<AngularObject> all=getAll(noteId,paragraphId);    for (    AngularObject ao : all) {      remove(ao.getName(),noteId,paragraphId);    }  }}  }
class C{  public boolean isInitialized(){  return initialized;}  }
class C{  public static boolean isPortrait(Context context){  return context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT;}  }
class C{  public boolean exists(){  return getWrappedPath().exists();}  }
class C{  public boolean isIsSoftwareBased(){  return isSoftwareBased;}  }
class C{  protected void closeStartTag() throws SAXException {  m_elemContext.m_startTagOpen=false;  final String localName=getLocalName(m_elemContext.m_elementName);  final String uri=getNamespaceURI(m_elemContext.m_elementName,true);  if (m_needToCallStartDocument) {    startDocumentInternal();  }  m_saxHandler.startElement(uri,localName,m_elemContext.m_elementName,m_attributes);  m_attributes.clear();  if (m_state != null)   m_state.setCurrentNode(null);}  }
class C{  public KerberosTime(long time){  this(time,0);}  }
class C{  private ValueObjectImpl(Object value){  this.value=value;}  }
class C{  void updateKey(ASTNode node,ASTNode newNode){}  }
class C{  public static void compareFromDifferentFoldersByExtension(final File sourceFolder,final File targetFolder,final String extension,final ResourcePostProcessor processor) throws IOException {  compareFromDifferentFolders(sourceFolder,targetFolder,new WildcardFileFilter("*." + extension),Transformers.noOpTransformer(),processor);}  }
class C{  public void logMessage(SIPMessage message,String from,String to,boolean sender,long time){  checkLogFile();  if (message.getFirstLine() == null)   return;  CallID cid=(CallID)message.getCallId();  String callId=null;  if (cid != null)   callId=cid.getCallId();  String firstLine=message.getFirstLine().trim();  String inputText=(logContent ? message.encode() : message.encodeMessage());  String tid=message.getTransactionId();  TimeStampHeader tsHdr=(TimeStampHeader)message.getHeader(TimeStampHeader.NAME);  long tsval=tsHdr == null ? 0 : tsHdr.getTime();  logMessage(inputText,from,to,sender,callId,firstLine,null,tid,time,tsval);}  }
class C{  public ToStringBuilder appendSuper(final String superToString){  if (superToString != null) {    style.appendSuper(buffer,superToString);  }  return this;}  }
class C{  public String testDatabase(){  int index=p_panel != null ? p_panel.fDatabaseType.getSelectedIndex() : setDatabaseType((String)p_properties.get(ADEMPIERE_DB_TYPE));  if (index < 0 || index >= DBTYPE.length)   return "DatabaseType Index invalid: " + index; else   if (m_databaseConfig[index] == null)   return "DatabaseType Config class missing: " + index;  return m_databaseConfig[index].test();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childValue;  int childLength;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  childValue=child.getData();  childLength=childValue.length();  assertEquals("characterdataGetLengthAssert",15,childLength);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long x=getLong(stack);  return (x == 0) ? "" : Sage.dfjShort(x);}  }
class C{  protected ShibbolethSystemScopeRepository(){}  }
class C{  public static void sort(short[] a){  sort1(a,0,a.length);}  }
class C{  public void onMouseWheelMoved(MapMouseEvent ev){}  }
class C{  public CatchUpSubscriptionSettings build(){  if (maxLiveQueueSize == null) {    maxLiveQueueSize=10000;  } else {    checkArgument(isPositive(maxLiveQueueSize),"maxLiveQueueSize should be positive");  }  if (resolveLinkTos == null) {    resolveLinkTos=false;  }  if (readBatchSize == null) {    readBatchSize=500;  } else {    checkArgument(isPositive(readBatchSize),"readBatchSize should be positive");    checkArgument(readBatchSize < EventStoreImpl.MAX_READ_SIZE,"Read batch size should be less than %d. For larger reads you should page.",EventStoreImpl.MAX_READ_SIZE);  }  return new CatchUpSubscriptionSettings(this);}  }
class C{  public ZipfianGenerator(long min,long max,double _zipfianconstant){  this(min,max,_zipfianconstant,zetastatic(max - min + 1,_zipfianconstant));}  }
class C{  public BufferedDataInputStream(File file) throws IOException {  this(new FileInputStream(file));}  }
class C{  public JmsTransactionalResource(String name,XAConnectionFactory factory){  super(name);  this.factory=factory;  this.conn=null;}  }
class C{  public static String[] readLines(final String filePath) throws IOException, SyssvcInternalException {  BufferedReader reader=null;  try {    List<String> lines=new ArrayList<String>();    String line;    reader=new BufferedReader(new FileReader(filePath));    while ((line=reader.readLine()) != null) {      lines.add(line);    }    if (lines.isEmpty()) {      throw SyssvcException.syssvcExceptions.syssvcInternalError("File " + filePath + " is empty.");    }    return lines.toArray(new String[lines.size()]);  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public static String jsonExtractSubnetMask(String fmJson) throws IOException {  String subnet_mask="";  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  try {    jp=f.createJsonParser(fmJson);  } catch (  JsonParseException e) {    throw new IOException(e);  }  jp.nextToken();  if (jp.getCurrentToken() != JsonToken.START_OBJECT) {    throw new IOException("Expected START_OBJECT");  }  while (jp.nextToken() != JsonToken.END_OBJECT) {    if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {      throw new IOException("Expected FIELD_NAME");    }    String n=jp.getCurrentName();    jp.nextToken();    if (jp.getText().equals(""))     continue;    if (n == "subnet-mask") {      subnet_mask=jp.getText();      break;    }  }  return subnet_mask;}  }
class C{  public static <T>boolean test(Mono<T> mono,T test){  return FutureW.of(mono.toFuture()).test(test);}  }
class C{  protected byte[] engineGetIV(){  return core.getIV();}  }
class C{  private static void categorizeFieldMethodCalls(){  Set<BytecodeInstruction> fieldMethodCalls=DefUsePool.retrieveFieldMethodCalls();  LoggingUtils.getEvoLogger().info("Categorizing field method calls: " + fieldMethodCalls.size());  for (  BytecodeInstruction fieldMethodCall : fieldMethodCalls) {    if (GraphPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).canMakeCCFGForClass(fieldMethodCall.getCalledMethodsClass())) {      ClassControlFlowGraph ccfg=GraphPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).getCCFG(fieldMethodCall.getCalledMethodsClass());      if (ccfg.isPure(fieldMethodCall.getCalledMethod())) {        if (!DefUsePool.addAsUse(fieldMethodCall))         throw new IllegalStateException("unable to register field method call as a use " + fieldMethodCall.toString());      } else {        if (!DefUsePool.addAsDefinition(fieldMethodCall))         throw new IllegalStateException("unable to register field method call as a definition " + fieldMethodCall.toString());      }    } else {      String toAnalyze=fieldMethodCall.getCalledMethodsClass() + "." + fieldMethodCall.getCalledMethodName();      if (toAnalyze != null && toAnalyze.startsWith("java.")) {        Type[] parameters=org.objectweb.asm.Type.getArgumentTypes(fieldMethodCall.getMethodCallDescriptor());        String newParams="";        if (parameters.length != 0) {          for (          Type i : parameters) {            newParams=newParams + "," + i.getClassName();          }          newParams=newParams.substring(1,newParams.length());        }        toAnalyze=fieldMethodCall.getCalledMethodsClass() + "." + fieldMethodCall.getCalledMethodName()+ "("+ newParams+ ")";        if (JdkPureMethodsList.instance.checkPurity(toAnalyze)) {          if (!DefUsePool.addAsUse(fieldMethodCall))           throw new IllegalStateException("unable to register field method call as a use " + fieldMethodCall.toString());        } else {          if (!DefUsePool.addAsDefinition(fieldMethodCall))           throw new IllegalStateException("unable to register field method call as a definition " + fieldMethodCall.toString());        }      } else {        if (!DefUsePool.addAsUse(fieldMethodCall))         throw new IllegalStateException("unable to register field method call as a use " + fieldMethodCall.toString());      }    }  }}  }
class C{  public static void closeBufferedReader(BufferedReader stream,String tag){  if (stream != null) {    try {      stream.close();    } catch (    IOException e) {      Log.e(tag,"Exception occured when closing BufferedReader." + e);    }  }}  }
class C{  private static MethodHandle createSAMTransform(Object arg,Class parameter){  Method method=CachedSAMClass.getSAMMethod(parameter);  if (method == null)   return null;  if (parameter.isInterface()) {    if (Traits.isTrait(parameter)) {      MethodHandle ret=TO_SAMTRAIT_PROXY;      ret=MethodHandles.insertArguments(ret,2,ProxyGenerator.INSTANCE,Collections.singletonList(parameter));      ret=MethodHandles.insertArguments(ret,0,method.getName());      return ret;    }    MethodHandle ret=TO_REFLECTIVE_PROXY;    ret=MethodHandles.insertArguments(ret,1,method.getName(),arg.getClass().getClassLoader(),new Class[]{parameter});    return ret;  } else {    MethodHandle ret=TO_GENERATED_PROXY;    ret=MethodHandles.insertArguments(ret,2,ProxyGenerator.INSTANCE,parameter);    ret=MethodHandles.insertArguments(ret,0,method.getName());    return ret;  }}  }
class C{  public static void generateHashFunctions() throws IOException {  File hashFile=new File(name);  if (!hashFile.exists()) {    ObjectOutputStream oos=new ObjectOutputStream(new GZIPOutputStream(new FileOutputStream(hashFile)));    oos.writeInt(dimensions);    oos.writeInt(numFunctionBundles);    for (int c=0; c < numFunctionBundles; c++) {      oos.writeFloat((float)(Math.random() * binLength));    }    for (int c=0; c < numFunctionBundles; c++) {      for (int j=0; j < dimensions; j++) {        oos.writeFloat((float)(drawNumber() * dilation));      }    }    oos.close();  } else {    System.err.println("Hashes could not be written: " + name + " already exists");  }}  }
class C{  public String displaySymbolTable(){  return MLContextUtil.displaySymbolTable("Symbol Table",symbolTable);}  }
class C{  private void validateSection(InputNode node,Section section) throws Exception {  validateAttributes(node,section);  validateElements(node,section);}  }
class C{  public SurfaceCircle(SurfaceCircle source){  super(source);}  }
class C{  public static boolean chooseMathMethod(Selector info,MetaMethod metaMethod){  Map<MethodType,MethodHandle> xmap=methods.get(info.name);  if (xmap == null)   return false;  MethodType type=replaceWithMoreSpecificType(info.args,info.targetType);  type=widenOperators(type);  MethodHandle handle=xmap.get(type);  if (handle == null)   return false;  info.handle=handle;  return true;}  }
class C{  public void addGoal(Goal goal){  getGoals().add(goal);}  }
class C{  public double evaluateModelOnce(double[] dist,Instance instance) throws Exception {  return m_delegate.evaluateModelOnce(dist,instance);}  }
class C{  public ImprovedOrientationSensor2Provider(SensorManager sensorManager){  super(sensorManager);  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE));  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_ROTATION_VECTOR));}  }
class C{  public static void selectionSort(double[] list){  for (int i=list.length - 1; i >= 0; i--) {    double currentMax=list[i];    int currentMaxIndex=i;    for (int j=i - 1; j >= 0; j--) {      if (currentMax < list[j]) {        currentMax=list[j];        currentMaxIndex=j;      }    }    if (currentMaxIndex != i) {      list[currentMaxIndex]=list[i];      list[i]=currentMax;    }  }}  }
class C{  public SIPHeader parse() throws ParseException {  RouteList routeList=new RouteList();  if (debug)   dbg_enter("parse");  try {    this.lexer.match(TokenTypes.ROUTE);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    while (true) {      Route route=new Route();      super.parse(route);      routeList.add(route);      this.lexer.SPorHT();      char la=lexer.lookAhead(0);      if (la == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       if (la == '\n')       break; else       throw createParseException("unexpected char");    }    return routeList;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double slope;  double z, z2;  int c, i;  int progress;  int[] dY={-1,0,1,1,1,0,-1,-1};  int[] dX={1,1,1,0,-1,-1,-1,0};  int row, col, x, y;  double dist;  double minSlope=0;  double minZChange=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=true;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          minSlope=99999999;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            dist=gridLengths[c];            z2=DEM.getValue(y,x);            if (z2 != noData) {              slope=(z - z2) / dist;              if (slope >= 0 && slope < minSlope) {                minSlope=slope;                minZChange=z - z2;              }            }          }          if (minSlope < 99999999) {            output.setValue(row,col,minZChange);          } else {            output.setValue(row,col,0);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected MoveResult registerIndexPartition(final SegmentMetadata historySegmentMetadata,final SegmentMetadata bufferedWritesSegmentMetadata){  final Event e=parentEvent.newSubEvent(OverflowSubtaskEnum.RegisterIndex).addDetail("targetIndexName",targetIndexName).start();  try {    final IndexMetadata newMetadata=sourceIndexMetadata.clone();    final LocalPartitionMetadata oldpmd=newMetadata.getPartitionMetadata();    newMetadata.setPartitionMetadata(new LocalPartitionMetadata(targetIndexPartitionId,-1,oldpmd.getLeftSeparatorKey(),oldpmd.getRightSeparatorKey(),new IResourceMetadata[]{getJournal().getResourceMetadata(),bufferedWritesSegmentMetadata,historySegmentMetadata},IndexPartitionCause.move(resourceManager)));    final BTree btree=BTree.create(getJournal(),newMetadata);    registerIndex(targetIndexName,btree);    if (INFO)     log.info("Registered new index partition on target data service: targetIndexName=" + targetIndexName);    final LocalPartitionMetadata pmd=sourceIndexMetadata.getPartitionMetadata();    final PartitionLocator oldLocator=new PartitionLocator(sourceIndexPartitionId,sourceDataServiceUUID,pmd.getLeftSeparatorKey(),pmd.getRightSeparatorKey());    final PartitionLocator newLocator=new PartitionLocator(targetIndexPartitionId,targetDataServiceUUID,pmd.getLeftSeparatorKey(),pmd.getRightSeparatorKey());    return new MoveResult(sourceIndexName,sourceIndexMetadata,targetDataServiceUUID,targetIndexPartitionId,oldLocator,newLocator);  }  finally {    e.end();  }}  }
class C{  private Start build(Start event) throws Exception {  int count=parser.getAttributeCount();  for (int i=0; i < count; i++) {    Entry entry=attribute(i);    if (!entry.isReserved()) {      event.add(entry);    }  }  return event;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public boolean adjustValue(double key,float amount){  int index=index(key);  if (index < 0) {    return false;  } else {    _values[index]+=amount;    return true;  }}  }
class C{  @SuppressWarnings("unused") public static long parseUnsignedInt(byte[] bytes){  return parseUnsignedInt(bytes,0,bytes.length);}  }
class C{  protected void not_null(Object obj) throws internal_error {  if (obj == null)   throw new internal_error("Null object used in set operation");}  }
class C{  public static List<MatchFields> checkMatchFields(Match m){  List<MatchFields> unsupported=null;  Iterator<MatchField<?>> mfi=m.getMatchFields().iterator();  while (mfi.hasNext()) {    MatchField<?> mf=mfi.next();    if (!getSupportedMatchFields().contains(mf.id)) {      if (unsupported == null) {        unsupported=new ArrayList<MatchFields>();      }      unsupported.add(mf.id);    }  }  return unsupported;}  }
class C{  private Cluster.GatewayReceiver initGatewayReceiver(ObjectName mbeanName) throws InstanceNotFoundException, IntrospectionException, ReflectionException, IOException, AttributeNotFoundException, MBeanException {  Cluster.GatewayReceiver gatewayReceiver=new Cluster.GatewayReceiver();  AttributeList attributeList=this.mbs.getAttributes(mbeanName,PulseConstants.GATEWAY_MBEAN_ATTRIBUTES);  for (int i=0; i < attributeList.size(); i++) {    Attribute attribute=(Attribute)attributeList.get(i);    if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_PORT)) {      gatewayReceiver.setListeningPort(getIntegerAttribute(attribute.getValue(),attribute.getName()));    } else     if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_EVENTRECEIVEDDATE)) {      gatewayReceiver.setLinkThroughput(getDoubleAttribute(attribute.getValue(),attribute.getName()));    } else     if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_AVEARGEBATCHPROCESSINGTIME)) {      gatewayReceiver.setAvgBatchProcessingTime(getLongAttribute(attribute.getValue(),attribute.getName()));    } else     if (attribute.getName().equals(PulseConstants.MBEAN_ATTRIBUTE_RUNNING)) {      gatewayReceiver.setStatus(getBooleanAttribute(attribute.getValue(),attribute.getName()));    }  }  return gatewayReceiver;}  }
class C{  public ExifTag buildTag(int tagId,Object val){  int ifdId=getTrueIfd(tagId);  return buildTag(tagId,ifdId,val);}  }
class C{  public String rate(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (value == null)   return "";  Integer Currency_ID=(Integer)mTab.getValue("C_Currency_ID");  int C_Currency_ID=Currency_ID.intValue();  Integer ConversionType_ID=(Integer)mTab.getValue("C_ConversionType_ID");  int C_ConversionType_ID=ConversionType_ID.intValue();  Timestamp DateAcct=(Timestamp)mTab.getValue("DateAcct");  if (DateAcct == null)   DateAcct=new Timestamp(System.currentTimeMillis());  int C_AcctSchema_ID=Env.getContextAsInt(ctx,WindowNo,"C_AcctSchema_ID");  MAcctSchema as=MAcctSchema.get(ctx,C_AcctSchema_ID);  int AD_Client_ID=Env.getContextAsInt(ctx,WindowNo,"AD_Client_ID");  int AD_Org_ID=Env.getContextAsInt(ctx,WindowNo,"AD_Org_ID");  BigDecimal CurrencyRate=MConversionRate.getRate(C_Currency_ID,as.getC_Currency_ID(),DateAcct,C_ConversionType_ID,AD_Client_ID,AD_Org_ID);  log.fine("rate = " + CurrencyRate);  if (CurrencyRate == null)   CurrencyRate=Env.ZERO;  mTab.setValue("CurrencyRate",CurrencyRate);  return "";}  }
class C{  public long run(String[] args) throws Exception {  int size=Integer.parseInt(args[0]);  Remote[] objs=new Remote[size];  for (int i=0; i < size; i++)   objs[i]=new RemoteObj();  long start=System.currentTimeMillis();  for (int i=0; i < size; i++)   UnicastRemoteObject.exportObject(objs[i],0);  long time=System.currentTimeMillis() - start;  for (int i=0; i < size; i++)   UnicastRemoteObject.unexportObject(objs[i],true);  return time;}  }
class C{  public void clearEntries(){  removeElement(Entry.KEY);}  }
class C{  public static void renameMovie(Movie movie){  boolean posterRenamed=false;  boolean fanartRenamed=false;  boolean downloadMissingArtworks=false;  if (StringUtils.isEmpty(movie.getDataSource())) {    LOGGER.error("no Datasource set");    return;  }  if (movie.getTitle().isEmpty()) {    LOGGER.error("won't rename movie '" + movie.getPathNIO() + "' / '"+ movie.getTitle()+ "' not even title is set?");    return;  }  ArrayList<MediaFile> needed=new ArrayList<>();  ArrayList<MediaFile> cleanup=new ArrayList<>();  LOGGER.info("Renaming movie: " + movie.getTitle());  LOGGER.debug("movie year: " + movie.getYear());  LOGGER.debug("movie path: " + movie.getPathNIO());  LOGGER.debug("movie isDisc?: " + movie.isDisc());  LOGGER.debug("movie isMulti?: " + movie.isMultiMovieDir());  if (movie.getMovieSet() != null) {    LOGGER.debug("movieset: " + movie.getMovieSet().getTitle());  }  LOGGER.debug("path expression: " + MovieModuleManager.MOVIE_SETTINGS.getMovieRenamerPathname());  LOGGER.debug("file expression: " + MovieModuleManager.MOVIE_SETTINGS.getMovieRenamerFilename());  String newPathname=createDestinationForFoldername(MovieModuleManager.MOVIE_SETTINGS.getMovieRenamerPathname(),movie);  String oldPathname=movie.getPathNIO().toString();  if (!newPathname.isEmpty()) {    newPathname=movie.getDataSource() + File.separator + newPathname;    Path srcDir=movie.getPathNIO();    Path destDir=Paths.get(newPathname);    if (!srcDir.toAbsolutePath().equals(destDir.toAbsolutePath())) {      boolean newDestIsMultiMovieDir=false;      if (!isFolderPatternUnique(MovieModuleManager.MOVIE_SETTINGS.getMovieRenamerPathname())) {        newDestIsMultiMovieDir=true;      }      LOGGER.debug("movie willBeMulti?: " + newDestIsMultiMovieDir);      if (!movie.isMultiMovieDir() && !newDestIsMultiMovieDir) {        boolean ok=false;        try {          ok=Utils.moveDirectorySafe(srcDir,destDir);          if (ok) {            movie.setMultiMovieDir(false);            movie.updateMediaFilePath(srcDir,destDir);            movie.setPath(newPathname);            movie.saveToDb();          }        } catch (        Exception e) {          LOGGER.error("error moving folder: ",e);          MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,srcDir,"message.renamer.failedrename",new String[]{":",e.getLocalizedMessage()}));        }        if (!ok) {          LOGGER.error("Could not move to destination '" + destDir + "' - NOT renaming folder");          return;        }      } else       if (movie.isMultiMovieDir() && !newDestIsMultiMovieDir) {        LOGGER.trace("Upgrading movie into it's own dir :) " + newPathname);        try {          Files.createDirectories(destDir);        } catch (        Exception e) {          LOGGER.error("Could not create destination '" + destDir + "' - NOT renaming folder ('upgrade' movie)");          return;        }        movie.setMultiMovieDir(false);        downloadMissingArtworks=true;      } else {        LOGGER.trace("New movie path is a MMD :( " + newPathname);        if (!Files.exists(destDir)) {          try {            Files.createDirectories(destDir);          } catch (          Exception e) {            LOGGER.error("Could not create destination '" + destDir + "' - NOT renaming folder ('MMD' movie)");            return;          }        }        movie.setMultiMovieDir(true);      }    }  } else {    LOGGER.info("Folder rename settings were empty - NOT renaming folder");    newPathname=movie.getPathNIO().toString();  }  for (  MovieNfoNaming s : MovieNfoNaming.values()) {    String nfoFilename=movie.getNfoFilename(s);    if (StringUtils.isBlank(nfoFilename)) {      continue;    }    MediaFile del=new MediaFile(movie.getPathNIO().resolve(nfoFilename),MediaFileType.NFO);    cleanup.add(del);  }  for (  MoviePosterNaming s : MoviePosterNaming.values()) {    MediaFile del=new MediaFile(movie.getPathNIO().resolve(replaceInvalidCharacters(MovieArtworkHelper.getPosterFilename(s,movie))),MediaFileType.POSTER);    cleanup.add(del);  }  for (  MovieFanartNaming s : MovieFanartNaming.values()) {    MediaFile del=new MediaFile(movie.getPathNIO().resolve(replaceInvalidCharacters(MovieArtworkHelper.getFanartFilename(s,movie))),MediaFileType.FANART);    cleanup.add(del);  }  for (  MediaFile del : movie.getMediaFiles()) {    cleanup.add(new MediaFile(del));  }  cleanup.removeAll(Collections.singleton(null));  String newVideoBasename="";  if (!isFilePatternValid()) {    newVideoBasename=movie.getVideoBasenameWithoutStacking();    LOGGER.warn("Filepattern is not valid - NOT renaming files!");  } else {    MediaFile ftr=generateFilename(movie,movie.getMediaFiles(MediaFileType.VIDEO).get(0),newVideoBasename).get(0);    newVideoBasename=FilenameUtils.getBaseName(ftr.getFilenameWithoutStacking());  }  LOGGER.debug("Our new basename for renaming: " + newVideoBasename);  for (  MediaFile vid : movie.getMediaFiles(MediaFileType.VIDEO)) {    LOGGER.trace("Rename 1:1 " + vid.getType() + " "+ vid.getFileAsPath());    MediaFile newMF=generateFilename(movie,vid,newVideoBasename).get(0);    boolean ok=moveFile(vid.getFileAsPath(),newMF.getFileAsPath());    if (ok) {      vid.setFile(newMF.getFileAsPath());    }    needed.add(vid);  }  ArrayList<MediaFile> mfs=new ArrayList<>();  mfs.add(movie.getNewestMediaFilesOfType(MediaFileType.FANART));  mfs.add(movie.getNewestMediaFilesOfType(MediaFileType.POSTER));  mfs.removeAll(Collections.singleton(null));  for (  MediaFile mf : mfs) {    LOGGER.trace("Rename 1:N " + mf.getType() + " "+ mf.getFileAsPath());    ArrayList<MediaFile> newMFs=generateFilename(movie,mf,newVideoBasename);    for (    MediaFile newMF : newMFs) {      posterRenamed=true;      fanartRenamed=true;      boolean ok=copyFile(mf.getFileAsPath(),newMF.getFileAsPath());      if (ok) {        needed.add(newMF);      }    }  }  MediaFile nfo=new MediaFile();  for (  MediaFile mf : movie.getMediaFiles(MediaFileType.NFO)) {    if (mf.getFiledate() >= nfo.getFiledate() && MovieConnectors.isValidNFO(mf.getFileAsPath())) {      nfo=new MediaFile(mf);    }  }  if (nfo.getFiledate() > 0) {    ArrayList<MediaFile> newNFOs=generateFilename(movie,nfo,newVideoBasename);    if (newNFOs.size() > 0) {      for (      MediaFile newNFO : newNFOs) {        boolean ok=copyFile(nfo.getFileAsPath(),newNFO.getFileAsPath());        if (ok) {          needed.add(newNFO);        }      }    } else {      cleanup.add(nfo);    }  } else {    LOGGER.trace("No valid NFO found for this movie");  }  for (  MediaFile mf : movie.getMediaFiles(MediaFileType.NFO)) {    if (MovieConnectors.isValidNFO(mf.getFileAsPath())) {      cleanup.add(mf);    } else {      if (MovieModuleManager.MOVIE_SETTINGS.isMovieRenamerNfoCleanup()) {        cleanup.add(mf);      } else {        needed.add(mf);      }    }  }  mfs=new ArrayList<>();  mfs.addAll(movie.getMediaFilesExceptType(MediaFileType.VIDEO,MediaFileType.NFO,MediaFileType.POSTER,MediaFileType.FANART,MediaFileType.SUBTITLE));  mfs.removeAll(Collections.singleton(null));  for (  MediaFile other : mfs) {    LOGGER.trace("Rename 1:1 " + other.getType() + " "+ other.getFileAsPath());    ArrayList<MediaFile> newMFs=generateFilename(movie,other,newVideoBasename);    newMFs.removeAll(Collections.singleton(null));    for (    MediaFile newMF : newMFs) {      boolean ok=copyFile(other.getFileAsPath(),newMF.getFileAsPath());      if (ok) {        needed.add(newMF);      } else {        needed.add(other);      }    }  }  needed.addAll(movie.getMediaFiles(MediaFileType.SUBTITLE));  for (  MediaFile gfx : movie.getMediaFiles()) {    if (gfx.isGraphic()) {      ImageCache.invalidateCachedImage(gfx.getFileAsPath());    }  }  Set<MediaFile> newMFs=new LinkedHashSet<>(needed);  needed.clear();  needed.addAll(newMFs);  movie.removeAllMediaFiles();  movie.addToMediaFiles(needed);  movie.setPath(newPathname);  for (  MovieActor actor : movie.getActors()) {    actor.setEntityRoot(newPathname);  }  movie.saveToDb();  renameSubtitles(movie);  movie.gatherMediaFileInformation(false);  if (MovieModuleManager.MOVIE_SETTINGS.getMovieConnector() == MovieConnectors.MP && (posterRenamed || fanartRenamed)) {    movie.writeNFO();  }  movie.saveToDb();  LOGGER.info("Cleanup...");  for (int i=cleanup.size() - 1; i >= 0; i--) {    if (!needed.contains(cleanup.get(i))) {      MediaFile cl=cleanup.get(i);      if (cl.getFileAsPath().equals(Paths.get(movie.getDataSource())) || cl.getFileAsPath().equals(movie.getPathNIO()) || cl.getFileAsPath().equals(Paths.get(oldPathname))) {        LOGGER.warn("Wohoo! We tried to remove complete datasource / movie folder. Nooo way...! " + cl.getType() + ": "+ cl.getFileAsPath());        continue;      }      if (Files.exists(cl.getFileAsPath())) {        LOGGER.debug("Deleting " + cl.getFileAsPath());        Utils.deleteFileWithBackup(cl.getFileAsPath(),movie.getDataSource());      }      try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(cl.getFileAsPath().getParent())){        if (!directoryStream.iterator().hasNext()) {          LOGGER.debug("Deleting empty Directory " + cl.getFileAsPath().getParent());          Files.delete(cl.getFileAsPath().getParent());        }      } catch (      IOException ex) {      }    }  }  if (downloadMissingArtworks) {    LOGGER.debug("Yay - movie upgrade :) download missing artworks");    MovieArtworkHelper.downloadMissingArtwork(movie);  }}  }
class C{  public void append(final StringBuffer sb){  if (sb == null) {    return;  }  provideCapacity(length + sb.length());  sb.getChars(0,sb.length(),c,length);  length+=sb.length();}  }
class C{  protected boolean equals(TreeNode<E> root1,TreeNode<E> root2){  if (root1 == root2)   return true;  if (root1 == null || root2 == null)   return false;  return root1.element.equals(root2.element) && equals(root1.left,root2.left) && equals(root1.right,root2.right);}  }
class C{  public boolean hasNestedTransaction(){  return mTransactionStack != null && mTransactionStack.mParent != null;}  }
class C{  private static byte[] generateMultipartBoundary(){  final Random rand=new Random();  final byte[] bytes=new byte[rand.nextInt(11) + 30];  for (int i=0; i < bytes.length; i++) {    bytes[i]=MULTIPART_CHARS[rand.nextInt(MULTIPART_CHARS.length)];  }  return bytes;}  }
class C{  protected void localProperties(List ps){}  }
class C{  public static URI uri(String value){  try {    return (value != null && value.length() > 0) ? URI.create(value) : null;  } catch (  IllegalArgumentException invalid) {    return null;  }}  }
class C{  public CustomOptional<KinesisRecord> next() throws TransientKinesisException {  readMoreIfNecessary();  if (data.isEmpty()) {    return CustomOptional.absent();  } else {    KinesisRecord record=data.removeFirst();    checkpoint=checkpoint.moveAfter(record);    return CustomOptional.of(record);  }}  }
class C{  static int countFilteredBugs(){  int result=0;  for (  BugLeafNode bug : getMainBugSet().mainList) {    if (suppress(bug)) {      result++;    }  }  return result;}  }
class C{  @Override public void process(LogoutState t) throws SamlServiceException {  log.debug("LogoutStateProcessingFilter.process is called");  Validate.notNull(t);  IdmAccessor accessor=t.getIdmAccessor();  Validate.notNull(accessor);  HttpServletRequest request=t.getRequest();  Validate.notNull(request);  LogoutRequest logoutRequest=t.getLogoutRequest();  LogoutResponse logoutResponse=t.getLogoutResponse();  Validate.isTrue(logoutRequest != null || logoutResponse != null);  SessionManager sessionManager=t.getSessionManager();  Validate.notNull(sessionManager);  String sessionId=null;  if (logoutRequest != null) {    sessionId=processLogoutRequest(t,logoutRequest,sessionManager);  } else {    sessionId=processLogoutResponse(logoutResponse,sessionManager);  }  Validate.notNull(sessionId,"sessionId");  t.setSessionId(sessionId);  t.removeResponseHeaders();  if (logoutRequest != null && sessionManager.get(sessionId).isUsingExtIDP()) {    sendRequestToIDP(t);  }}  }
class C{  public static String arrayToCommaDelimitedString(Object[] arr){  return arrayToDelimitedString(arr,",");}  }
class C{  public Coord4D translate(Coord4D coord){  translate(coord.xCoord,coord.yCoord,coord.zCoord);  return this;}  }
class C{  public IJsniReferenceChange createChange(ICompilationUnit cu){  return new JsniReferenceChange(refactoringSupport,cu);}  }
class C{  public AlbumEntry insertAlbum(AlbumEntry album) throws IOException, ServiceException {  String feedUrl=API_PREFIX + "default";  return service.insert(new URL(feedUrl),album);}  }
class C{  protected void finalize(){  close();}  }
class C{  public Comparator<? super E> comparator(){  return comparator;}  }
class C{  public Event(final IBigdataFederation fed,final EventResource resource,final Object majorEventType,final Map<String,Object> details){  this(fed,resource,majorEventType,"",details);}  }
class C{  public static void boot(){}  }
class C{  protected void processWhiteSpace(int pos,int endPos){  if (scannerDebug)   System.out.println("processWhitespace(" + pos + ","+ endPos+ ")=|"+ new String(reader.getRawCharacters(pos,endPos))+ "|");}  }
class C{  public JRadioButton(){  this(null,null,false);}  }
class C{  public void testUHeuristic() throws IOException {  checkOneTerm(analyzer,"dauer","dauer");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void filterByRole(ContainerRequestContext context,Role requiredRole){  StringManager sm=StringManager.getManager(Config.LOCALIZATION_PACKAGE_NAME);  try {    ResourceAccessRequest request=ResourceAccessRequest.fromRequestContext(context);    if (request == null) {      if (requiredRole == null) {        context.setSecurityContext(new AuthorizationContext(null,null,false));      } else {        throw new InvalidRequestException(sm.getString("auth.ire.no.token"));      }    } else {      request.verify();      request.validateContents();      if (requiredRole != null) {        request.validateRole(requiredRole);      }      context.setSecurityContext(new AuthorizationContext(request));    }  } catch (  InsufficientRoleException|InvalidRequestException|InvalidTokenException e) {    if (log.isWarnEnabled()) {      ErrorInfo info=(ErrorInfo)e.getResponse().getEntity();      log.warn("'{}': '{}'",info.getError(),info.getDetails(),e);    }    context.abortWith(e.getResponse());  }catch (  Exception e) {    log.error("An unexpected error occured during authorization",e);    context.abortWith(new InternalServerErrorException(sm.getString("ec.500"),e).getResponse());  }}  }
class C{  protected Class<?> findClass(String name) throws ClassNotFoundException {  if (mDexClass != null) {    return findClassDalvik(name);  } else {    return findClassNonDalvik(name);  }}  }
class C{  public static SynapseGroupDialog createSynapseGroupDialog(final NetworkPanel np,NeuronGroup src,NeuronGroup tar){  SynapseGroupDialog sgd=new SynapseGroupDialog(np,src,tar);  sgd.addListeners();  sgd.tabbedPane.setSelectedIndex(0);  return sgd;}  }
class C{  private void removeEntityView(EntityView<IEntity> view){synchronized (views) {    views.remove(view);    view.release();  }}  }
class C{  public static void log(IStatus status){  CorePlugin.getDefault().getLog().log(status);}  }
class C{  public static Map<String,Collection<String>> groupFilesByMimeType(Collection<String> attachments){  Map<String,Collection<String>> attachmentsByMimeType=new HashMap<>();  for (  String url : attachments) {    String mimeType=getMimeType(url);    if (mimeType.length() > 0) {      Collection<String> mimeTypeList=attachmentsByMimeType.get(mimeType);      if (mimeTypeList == null) {        mimeTypeList=new ArrayList<>();        attachmentsByMimeType.put(mimeType,mimeTypeList);      }      mimeTypeList.add(url);    }  }  return attachmentsByMimeType;}  }
class C{  @Deprecated private List<Object> nameValueMapToList(Map.Entry<String,? extends T>[] nameValuePairs){  List<Object> result=new ArrayList<>();  for (  Map.Entry<String,?> ent : nameValuePairs) {    result.add(ent.getKey());    result.add(ent.getValue());  }  return result;}  }
class C{  @DSComment("Normal UI operations") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.092 -0500",hash_original_method="948D7F222DFBCB81359D4FABF0EA65D3",hash_generated_method="1C053AFF23B801FEADA0180380E9AC2B") public final View findNextFocus(ViewGroup root,View focused,int direction){  if (focused != null) {    View userSetNextFocus=focused.findUserSetNextFocus(root,direction);    if (userSetNextFocus != null && userSetNextFocus.isFocusable() && (!userSetNextFocus.isInTouchMode() || userSetNextFocus.isFocusableInTouchMode())) {      return userSetNextFocus;    }    focused.getFocusedRect(mFocusedRect);    root.offsetDescendantRectToMyCoords(focused,mFocusedRect);  } else {switch (direction) {case View.FOCUS_RIGHT:case View.FOCUS_DOWN:case View.FOCUS_FORWARD:      final int rootTop=root.getScrollY();    final int rootLeft=root.getScrollX();  mFocusedRect.set(rootLeft,rootTop,rootLeft,rootTop);break;case View.FOCUS_LEFT:case View.FOCUS_UP:case View.FOCUS_BACKWARD:final int rootBottom=root.getScrollY() + root.getHeight();final int rootRight=root.getScrollX() + root.getWidth();mFocusedRect.set(rootRight,rootBottom,rootRight,rootBottom);break;}}return findNextFocus(root,focused,mFocusedRect,direction);}  }
class C{  public DistTXRollbackMessage(){}  }
class C{  @RpcMethod public ReserveResponse reserve(Resource resource,Integer generation) throws RpcException, InterruptedException {  SyncHandler<ReserveResponse,Host.AsyncClient.reserve_call> syncHandler=new SyncHandler<>();  reserve(resource,generation,syncHandler);  syncHandler.await();  logger.info("finished reserve resource {}, generation {}, target {}",resource,generation,getHostIp());  return ResponseValidator.checkReserveResponse(syncHandler.getResponse());}  }
class C{  @Override public void put(String key,WeatherData obj,int timeout){  putImpl(key,obj,timeout * 1000);}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static final boolean contains(String input,String pattern,boolean ignoreCase){  final int n=pattern.length();  int last=0;  for (int i=0; i < n; ) {    char c=' ';    int j=i;    for (; j < n; j++) {      char c2=pattern.charAt(j);      if (c2 == ' ' || c2 == '+' || c2 == '*') {        c=c2;        break;      }    }    int k=subset(pattern,i,j,input,last,ignoreCase);    if (k < 0)     return false;    if (c == ' ' || c == '+')     last=0; else     if (c == '*')     last=k + j - i;    i=j + 1;  }  return true;}  }
class C{  public boolean hasChildren(){  return children.size() > 0;}  }
class C{  private TupleQueryResultHelper(){}  }
class C{  public VSDecoder(VSDConfig cfg){  config=cfg;  sound_list=new HashMap<String,VSDSound>();  trigger_list=new HashMap<String,Trigger>();  event_list=new HashMap<String,SoundEvent>();  initialized=_init();  try {    VSDFile vsdfile=new VSDFile(config.getVSDPath());    if (vsdfile.isInitialized()) {      log.debug("Constructor: vsdfile init OK, loading XML...");      this.setXml(vsdfile,config.getProfileName());    } else {      log.debug("Constructor: vsdfile init FAILED.");      initialized=false;    }  } catch (  java.util.zip.ZipException e) {    log.error("ZipException loading VSDecoder from " + config.getVSDPath());  }catch (  java.io.IOException ioe) {    log.error("IOException loading VSDecoder from " + config.getVSDPath());  }  this.setAddress(config.getLocoAddress());  this.enable();  if (log.isDebugEnabled()) {    log.debug("VSDecoder Init Complete.  Audio Objects Created:");    for (    String s : InstanceManager.getDefault(jmri.AudioManager.class).getSystemNameList(Audio.SOURCE)) {      log.debug("\tSource: " + s);    }    for (    String s : InstanceManager.getDefault(jmri.AudioManager.class).getSystemNameList(Audio.BUFFER)) {      log.debug("\tBuffer: " + s);    }  }}  }
class C{  public static boolean fileCopy(InputStream inputStream,OutputStream outputStream){  final int BUFFER_SIZE=1024;  boolean success=false;  try {    byte[] buffer=new byte[BUFFER_SIZE];    int length;    while ((length=inputStream.read(buffer)) > 0) {      outputStream.write(buffer,0,length);    }    success=true;  } catch (  IOException ex) {    Logger.getInstance().logError("FileCopy","Failed: " + ex.toString());  }  return success;}  }
class C{  int[] decodeStart(BitArray row) throws NotFoundException {  int endStart=skipWhiteSpace(row);  int[] startPattern=findGuardPattern(row,endStart,START_PATTERN);  this.narrowLineWidth=(startPattern[1] - startPattern[0]) >> 2;  validateQuietZone(row,startPattern[0]);  return startPattern;}  }
class C{  ArrayList<Tile> newSpreadingCenters(ArrayList<Tile> newlyUrbanized){  ArrayList<Tile> spreadFromNewlyUrbanized=new ArrayList<Tile>();  for (  Tile t : newlyUrbanized) {    if (random.nextInt(maxCoefficient) < breedCoefficient) {      ArrayList<Tile> potential=getNeighborsAvailableForUrbanization(t);      if (potential.size() > 1) {        for (int i=0; i < 2; i++) {          Tile toUrbanize=potential.remove(random.nextInt(potential.size()));          boolean successful=urbanizeTile(toUrbanize);          if (successful) {            spreadFromNewlyUrbanized.add(toUrbanize);          }        }        spreadingCenters.add(t);      }    }  }  return spreadFromNewlyUrbanized;}  }
class C{  public BatchUpdateException(int[] updateCounts,Throwable cause){  super(cause);  this.updateCounts=updateCounts;}  }
class C{  @Override public NextAction handleRead(@NotNull final FilterChainContext ctx){  bytesReceived.addAndGet((ctx.<Buffer>getMessage()).remaining());  if (i++ % 10000 == 0)   System.out.print(".");  buffer2.clear();  buffer2.put(payload);  buffer2.flip();  final Object peerAddress=ctx.getAddress();  ctx.write(peerAddress,buffer2,null);  return ctx.getStopAction();}  }
class C{  static void appendArrayType(StringBuilder sb,Class<?> obj){  if (!obj.isArray()) {    sb.append(obj.getName());    return;  }  int dimensions=1;  Class simplified=obj.getComponentType();  obj=simplified;  while (simplified.isArray()) {    obj=simplified;    dimensions++;  }  sb.append(obj.getName());switch (dimensions) {case 1:    sb.append("[]");  break;case 2:sb.append("[][]");break;case 3:sb.append("[][][]");break;default :for (int i=0; i < dimensions; i++) {sb.append("[]");}}}  }
class C{  public static ASN1Primitive convertValueToObject(X509Extension ext) throws IllegalArgumentException {  try {    return ASN1Primitive.fromByteArray(ext.getValue().getOctets());  } catch (  IOException e) {    throw new IllegalArgumentException("can't convert extension: " + e);  }}  }
class C{  protected void runEntranceTransition(Object entranceTransition){}  }
class C{  public ClientParamsStack(ClientParamsStack stack,HttpParams aparams,HttpParams cparams,HttpParams rparams,HttpParams oparams){  this((aparams != null) ? aparams : stack.getApplicationParams(),(cparams != null) ? cparams : stack.getClientParams(),(rparams != null) ? rparams : stack.getRequestParams(),(oparams != null) ? oparams : stack.getOverrideParams());}  }
class C{  public static CharSequence format(CharSequence inFormat,long inTimeInMillis){  return format(inFormat,new Date(inTimeInMillis));}  }
class C{  public byte[] decode(String s){  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    decode(s,bos);  } catch (  IOException e) {    throw new RuntimeException();  }  byte[] decodedBytes=bos.toByteArray();  try {    bos.close();    bos=null;  } catch (  IOException ex) {    System.err.println("Error while decoding BASE64: " + ex.toString());  }  return decodedBytes;}  }
class C{  public void iterate(){  State state=getState();switch (state) {case initialState:    System.err.println("State " + state + " is not implemented.");  System.exit(5);break;case inHiveWithoutInfo:doStateInHiveWithoutInfo();break;case inHiveWithInfo:doStateInHiveWithInfo();break;case leaveHive:doStateLeaveHive();break;case danceFollowing:System.err.println("State " + state + " is not implemented.");System.exit(5);break;case dancing:doStateDancing();break;case foraging:doStateForaging();break;case searching:doStateSearching();break;case returnWithInfo:System.err.println("State " + state + " is not implemented.");System.exit(5);break;case returnWithInfoAndLoad:doStateReturnWithInfoAndLoad();break;case unloadQueue:doStateUnloadQueue();break;case scouting:doStateScouting();break;case returnWithoutInfo:doStateReturnWithoutInfo();break;case dead:doStateDead();break;case terminated:doStateTerminated();break;default :System.err.println("iterate(): State " + state + " is not implemented.");System.exit(5);break;}}  }
class C{  public void init(SocketChannel s){  _s=s;  try {    s.setOption(StandardSocketOptions.TCP_NODELAY,true);  } catch (  Exception e) {    e.printStackTrace();    ;  }  _needsFlush=false;  _readBuffer.clear().flip();  _writeBuffer.clear();}  }
class C{  public final static boolean isReserved(char c){  return isGenericDelimiter(c) || isSubDelimiter(c);}  }
class C{  public static String initials(final String str,final String charsetName) throws UnsupportedEncodingException {  return initials(new String(str.getBytes(charsetName),"UTF-8"));}  }
class C{  public Boolean isEnterBIOSSetup(){  return enterBIOSSetup;}  }
class C{  public HessianConnectionException(Throwable rootCause){  super(rootCause);}  }
class C{  public int size(){  return _out.size();}  }
class C{  @Nullable private Figure readSVGElement(IXMLElement elem) throws IOException {  Viewport viewport=new Viewport();  String widthValue=readAttribute(elem,"width","100%");  String heightValue=readAttribute(elem,"height","100%");  viewport.width=toWidth(elem,widthValue);  viewport.height=toHeight(elem,heightValue);  if (readAttribute(elem,"viewBox","none").equals("none")) {    viewport.viewBox.width=viewport.width;    viewport.viewBox.height=viewport.height;  } else {    String[] viewBoxValues=toWSOrCommaSeparatedArray(readAttribute(elem,"viewBox","none"));    viewport.viewBox.x=toNumber(elem,viewBoxValues[0]);    viewport.viewBox.y=toNumber(elem,viewBoxValues[1]);    viewport.viewBox.width=toNumber(elem,viewBoxValues[2]);    viewport.viewBox.height=toNumber(elem,viewBoxValues[3]);    if (widthValue.indexOf('%') > 0) {      viewport.width=viewport.viewBox.width;    }    if (heightValue.indexOf('%') > 0) {      viewport.height=viewport.viewBox.height;    }  }  if (viewportStack.size() == 1) {    viewport.isPreserveAspectRatio=true;  } else {    viewport.isPreserveAspectRatio=!readAttribute(elem,"preserveAspectRatio","none").equals("none");  }  viewport.widthPercentFactor=viewport.viewBox.width / 100d;  viewport.heightPercentFactor=viewport.viewBox.height / 100d;  viewport.numberFactor=Math.min(viewport.width / viewport.viewBox.width,viewport.height / viewport.viewBox.height);  AffineTransform viewBoxTransform=new AffineTransform();  viewBoxTransform.translate(-viewport.viewBox.x * viewport.width / viewport.viewBox.width,-viewport.viewBox.y * viewport.height / viewport.viewBox.height);  if (viewport.isPreserveAspectRatio) {    double factor=Math.min(viewport.width / viewport.viewBox.width,viewport.height / viewport.viewBox.height);    viewBoxTransform.scale(factor,factor);  } else {    viewBoxTransform.scale(viewport.width / viewport.viewBox.width,viewport.height / viewport.viewBox.height);  }  viewportStack.push(viewport);  readViewportAttributes(elem,viewportStack.firstElement().attributes);  for (  IXMLElement child : elem.getChildren()) {    Figure childFigure=readElement(child);    if (readAttribute(child,"visibility","visible").equals("visible") && !readAttribute(child,"display","inline").equals("none")) {      if (childFigure != null) {        childFigure.transform(viewBoxTransform);        figures.add(childFigure);      }    }  }  viewportStack.pop();  return null;}  }
class C{  private void hideableLabel(JLabel label,String text){  if (text.isEmpty()) {    label.setForeground(LABEL_INVISIBLE);  } else {    label.setForeground(LABEL_VISIBLE);    label.setText(text);  }}  }
class C{  final Executor executor(){  return executor;}  }
class C{  private void giveUpAudioFocus(){  if (mAudioFocus == AudioFocus.FOCUS && mAudioManager != null && AudioManager.AUDIOFOCUS_REQUEST_GRANTED == mAudioManager.abandonAudioFocus(this)) {    mAudioFocus=AudioFocus.NO_FOCUS;  }}  }
class C{  public boolean isMSBAccess(){  return MSBAccess;}  }
class C{  public static <E>WorkQueueProcessor<E> create(String name,int bufferSize){  return create(name,bufferSize,null,true);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public String toString(){  return "cudaStream_t[" + "nativePointer=" + getNativePointer() + "]";}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int a;  float progress;  int range;  boolean blnTextOutput=false;  double z;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnTextOutput=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    range=(int)(image.getMaximumValue());    long[][] proportionData=new long[3][range + 1];    double[] proportion=new double[range + 1];    int cN, rN;    double zN;    boolean edge;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        z=image.getValue(row,col);        if (z > 0) {          a=(int)(z);          proportionData[0][a]++;          edge=false;          for (i=0; i < 8; i++) {            cN=col + dX[i];            rN=row + dY[i];            zN=image.getValue(rN,cN);            if (zN != z) {              edge=true;              break;            }          }          if (edge) {            proportionData[1][a]++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    for (a=0; a <= range; a++) {      if (proportionData[1][a] > 1) {        proportion[a]=(double)proportionData[1][a] / proportionData[0][a];      }    }    double[] data=null;    updateProgress("Loop 2 of 2:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col]);          output.setValue(row,col,proportion[a]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    if (blnTextOutput) {      DecimalFormat df;      df=new DecimalFormat("0.0000");      String retstr="Edge Proportion\nPatch ID\tValue";      for (a=0; a <= range; a++) {        if (proportionData[1][a] > 0) {          retstr=retstr + "\n" + a+ "\t"+ df.format(proportion[a]);        }      }      returnData(retstr);    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_3__TAIL_1:    return getTail_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String xmlToCsv(UpdateInventoryInput input){  return input.getSupplierId() + "," + input.getPartId()+ ","+ input.getName()+ ","+ input.getAmount();}  }
class C{  public Integer loadIdNameValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadIdNameValue");  _id=statement.getLongInteger(index++);  _name=statement.getShortText(index++);  return new Integer(index);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.VERTEX__PARENT_REGION:    if (resolve)     return getParentRegion();  return basicGetParentRegion();case SGraphPackage.VERTEX__INCOMING_TRANSITIONS:return getIncomingTransitions();case SGraphPackage.VERTEX__OUTGOING_TRANSITIONS:return getOutgoingTransitions();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.628 -0500",hash_original_method="60CFCAC68A8E46E83373A5BD6B186EBB",hash_generated_method="FDCD7ECCD5F7A2026D8F5CFF20A42996") private void prefromAxisTransition(int fromAxis,int toAxis,boolean sendEvent,String contentDescription){  if (mCurrentAxis == fromAxis) {    setCurrentAxis(toAxis,sendEvent,contentDescription);  }}  }
class C{  @Override public void onTurnReached(final int currentTurn){  if (checkBoard() && moveCount <= MAX_MOVES) {    if (player.isQuestCompleted(QUEST_SLOT)) {      npc.say("Congratulations, you solved the quiz again. But unfortunately I don't have any further rewards for you.");    } else {      npc.say("Congratulations, you solved the quiz.");      final StackableItem money=(StackableItem)SingletonRepository.getEntityManager().getItem("money");      money.setQuantity(50);      player.equipToInventoryOnly(money);      player.addXP(100);    }    player.setQuest(QUEST_SLOT,"done");  } else {    if (!player.isQuestCompleted(QUEST_SLOT)) {      player.setQuest(QUEST_SLOT,"failed");    }    npc.say("I am sorry. This does not look like an arrow pointing upwards to me.");  }  SingletonRepository.getTurnNotifier().notifyInTurns(6,new FinishNotifier(true,player));}  }
class C{  public CompareToBuilder append(final byte lhs,final byte rhs){  if (comparison != 0) {    return this;  }  comparison=((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));  return this;}  }
class C{  private boolean hasInRecentFiles(String file,String[] currentFiles){  boolean found=false;  for (int i=0; i < currentFiles.length; i++) {    if (file.equals(currentFiles[i])) {      found=true;      break;    }  }  return found;}  }
class C{  boolean popNamespace(String prefix){  if (prefix.startsWith(XML_PREFIX)) {    return false;  }  Stack stack;  if ((stack=getPrefixStack(prefix)) != null) {    stack.pop();    return true;  }  return false;}  }
class C{  public final void close() throws IOException {  if (writer == null)   return;  flush();}  }
class C{  @Override protected AxisSpace calculateAxisSpace(Graphics2D g2,Rectangle2D plotArea){  AxisSpace space=new AxisSpace();  PlotOrientation orientation=getOrientation();  AxisSpace fixed=getFixedDomainAxisSpace();  if (fixed != null) {    if (orientation == PlotOrientation.HORIZONTAL) {      space.setLeft(fixed.getLeft());      space.setRight(fixed.getRight());    } else     if (orientation == PlotOrientation.VERTICAL) {      space.setTop(fixed.getTop());      space.setBottom(fixed.getBottom());    }  } else {    ValueAxis xAxis=getDomainAxis();    RectangleEdge xEdge=Plot.resolveDomainAxisLocation(getDomainAxisLocation(),orientation);    if (xAxis != null) {      space=xAxis.reserveSpace(g2,this,plotArea,xEdge,space);    }  }  Rectangle2D adjustedPlotArea=space.shrink(plotArea,null);  int n=this.subplots.size();  int totalWeight=0;  for (int i=0; i < n; i++) {    XYPlot sub=(XYPlot)this.subplots.get(i);    totalWeight+=sub.getWeight();  }  this.subplotAreas=new Rectangle2D[n];  double x=adjustedPlotArea.getX();  double y=adjustedPlotArea.getY();  double usableSize=0.0;  if (orientation == PlotOrientation.HORIZONTAL) {    usableSize=adjustedPlotArea.getWidth() - this.gap * (n - 1);  } else   if (orientation == PlotOrientation.VERTICAL) {    usableSize=adjustedPlotArea.getHeight() - this.gap * (n - 1);  }  for (int i=0; i < n; i++) {    XYPlot plot=(XYPlot)this.subplots.get(i);    if (orientation == PlotOrientation.HORIZONTAL) {      double w=usableSize * plot.getWeight() / totalWeight;      this.subplotAreas[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());      x=x + w + this.gap;    } else     if (orientation == PlotOrientation.VERTICAL) {      double h=usableSize * plot.getWeight() / totalWeight;      this.subplotAreas[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);      y=y + h + this.gap;    }    AxisSpace subSpace=plot.calculateRangeAxisSpace(g2,this.subplotAreas[i],null);    space.ensureAtLeast(subSpace);  }  return space;}  }
class C{  public boolean isEmpty(){  if (table.isEmpty()) {    return true;  } else   return (table.size() == 1 && table.keySet().iterator().next().equals(Assignment.createDefault(headVars)));}  }
class C{  private static Object[] makeTitle(final String titleString){  return new Object[]{new CLeftTitle(titleString.substring(0,titleString.length() / 2)),new CRightTitle(titleString.substring(titleString.length() / 2))};}  }
class C{  public TomcatManager(URL url){  this(url,"admin");}  }
class C{  public static GdbPrint parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  Matcher matcher=GDB_PRINT.matcher(output);  if (matcher.find()) {    String value=matcher.group(2);    return new GdbPrint(value);  }  throw new GdbParseException(GdbPrint.class,output);}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,@RequestParam(value="pid",defaultValue="0") Integer pid,Principal principal){  RestWrapper restWrapper=null;  Integer processId=pid;  try {    if (pid == 0) {      processId=null;    }    Integer counter=processTemplateDAO.totalRecordCount();    List<ProcessTemplate> processes=processTemplateDAO.list(startPage,pageSize,processId);    for (    ProcessTemplate p : processes) {      p.setCounter(counter);      p.setTableAddTS(DateConverter.dateToString(p.getAddTS()));    }    restWrapper=new RestWrapper(processes,RestWrapper.OK);    LOGGER.info("All records listed from ProcessTemplate by User:" + principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static void add(String pat){  knownFiles.add(Pattern.compile(pat));}  }
class C{  public long eventIndex(){  return eventIndex;}  }
class C{  public static long firsttick(GeoTimeSerie gts){  if (isBucketized(gts)) {    return gts.lastbucket - (gts.bucketcount - 1) * gts.bucketspan;  } else {    long firsttick=Long.MAX_VALUE;    if (gts.sorted && gts.values > 0) {      if (!gts.reversed) {        firsttick=gts.ticks[0];      } else {        firsttick=gts.ticks[gts.values - 1];      }    } else {      for (int i=0; i < gts.values; i++) {        if (gts.ticks[i] < firsttick) {          firsttick=gts.ticks[i];        }      }    }    return firsttick;  }}  }
class C{  @Before public void beforeEach(){  mTask=new MqttSourceTask();  mTask.start(mEmptyConfig);}  }
class C{  public void update(long[] data){  if ((data == null) || (data.length == 0)) {    return;  }  updateWithHash(hash(data,DEFAULT_UPDATE_SEED));}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:36.045 -0500",hash_original_method="4D7AFBD3BCBFF7BF63D8A1B788355A01",hash_generated_method="0D0E9BD43ABF71A78095A031D34B153D") public UnsupportedDigestAlgorithmException(){  super();}  }
class C{  public void clearTransform(){  mPreview.setTransform(new Matrix());  mPreviewArea.set(0,0,mWidth,mHeight);  onPreviewAreaChanged(mPreviewArea);  setAspectRatio(MATCH_SCREEN);}  }
class C{  public final boolean checkTag(int identifier){  return true;}  }
class C{  public String invokeCliCommand(String args[]){  String cliResult;  NaElement elem=new NaElement("system-cli");  NaElement argsarray=new NaElement("args");  for (int i=0; i < args.length; i++) {    argsarray.addNewChild("arg",args[i]);  }  elem.addChildElem(argsarray);  try {    NaElement result=server.getNaServer().invokeElem(elem);    cliResult=result.getChildContent("cli-output");    return cliResult;  } catch (  Exception e) {    String msg="Failed to invoke CLI command ";    log.error(msg,e);    throw new NetAppCException(msg,e);  }}  }
class C{  @Override public void tupleMatched(Map<K,V> tuple){}  }
class C{  public AsciiMemcacheClient<V> connectAscii(){  return new DefaultAsciiMemcacheClient<>(connectRaw(false),metrics,valueTranscoder,charset);}  }
class C{  private void configurePartitioner(final DocumentHandle documentHandle){  final DocumentPartitioner partitioner=configuration.getPartitioner();  if (partitioner != null) {    partitioner.setDocumentHandle(documentHandle);    documentHandle.getDocEventBus().addHandler(DocumentChangeEvent.TYPE,partitioner);    partitioner.initialize();  }}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  public void iconifyFrame(JInternalFrame f){  JInternalFrame.JDesktopIcon desktopIcon;  Container c=f.getParent();  JDesktopPane d=f.getDesktopPane();  boolean findNext=f.isSelected();  desktopIcon=f.getDesktopIcon();  if (!wasIcon(f)) {    Rectangle r=getBoundsForIconOf(f);    desktopIcon.setBounds(r.x,r.y,r.width,r.height);    desktopIcon.revalidate();    setWasIcon(f,Boolean.TRUE);  }  if (c == null || d == null) {    return;  }  if (c instanceof JLayeredPane) {    JLayeredPane lp=(JLayeredPane)c;    int layer=lp.getLayer(f);    lp.putLayer(desktopIcon,layer);  }  if (!f.isMaximum()) {    f.setNormalBounds(f.getBounds());  }  d.setComponentOrderCheckingEnabled(false);  c.remove(f);  c.add(desktopIcon);  d.setComponentOrderCheckingEnabled(true);  c.repaint(f.getX(),f.getY(),f.getWidth(),f.getHeight());  if (findNext) {    if (d.selectFrame(true) == null) {      f.restoreSubcomponentFocus();    }  }}  }
class C{  public void reload(){  if (mOriginalGeometry != null) {    if (!mOriginalGeometry.isValid()) {      mOriginalGeometry.reload();    }    copyFromGeometry3D(mOriginalGeometry);  }  createBuffers();}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public void persist(){  final Preferences node=getPreferencesNode(key);  for (final Iterator it=mappings.keySet().iterator(); it.hasNext(); ) {    final String columnKey=(String)it.next();    final int ix=getIndexForKey(columnKey);    if (ix == -1) {      continue;    }    final int width=tableColumnWidths[ix];    if (width > 0) {      node.putInt(columnKey,width);    }  }  try {    node.flush();  } catch (  final BackingStoreException e) {    log.warn("can't flush prefs node",e);    return;  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public final void testRSAPrivateKeySpec(){  KeySpec ks=new RSAPrivateKeySpec(BigInteger.valueOf(1234567890L),BigInteger.valueOf(3L));  assertTrue(ks instanceof RSAPrivateKeySpec);}  }
class C{  public void removeBoardViewListener(BoardViewListener listener){  boardListeners.remove(listener);}  }
class C{  public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.bool(xctxt) || m_right.bool(xctxt));}  }
class C{  public static DefaultTriggerStateMachine of(){  return new DefaultTriggerStateMachine();}  }
class C{  public WebPermission(String name,HttpMethod method,String... roles){  this(name,true,method,roles);}  }
class C{  public ConvolveFilter(int rows,int cols,float[] matrix){  this(new Kernel(cols,rows,matrix));}  }
class C{  public void updateChooser(){  if (!settingColor) {    lastLabel.setBackground(getColorFromModel());    setColor(getColorFromModel(),true,true,false);  }}  }
class C{  public TDoubleHashSet(double[] array,TDoubleHashingStrategy strategy){  this(array.length,strategy);  addAll(array);}  }
class C{  public DateBuilder onDay(int onDay){  validateDayOfMonth(onDay);  this.day=onDay;  return this;}  }
class C{  @Override public boolean equals(final Object obj){  if (obj instanceof MutableShort) {    return value == ((MutableShort)obj).shortValue();  }  return false;}  }
class C{  public void addTipsSiteModel(SiteModel siteModel){  Logger.getLogger("dr.evomodel").info("SiteModel added for tips.");  tipsSiteModel=siteModel;  addModel(siteModel);}  }
class C{  Cookie[] assembleCookiesForObject(final Cookie[] oldCookies,final String[] values){  final TuplizerSetting meta=tuplizerSetting;  if (values == null || values.length == 0) {    return EMPTY_COOKIES;  }  final int previousCookieCount=countOldCookies(oldCookies,meta.key);  final int currentCookieCount=values.length + 1;  final Cookie[] cookies=new Cookie[Math.max(previousCookieCount,currentCookieCount)];  for (int index=0; index < currentCookieCount - 1; index++) {    cookies[index]=createNewCookie(meta.key + index,values[index],meta.expiry,meta.path);  }  final int terminatorIndex=currentCookieCount - 1;  cookies[terminatorIndex]=createNewCookie(meta.key + (terminatorIndex),String.valueOf(meta.key.hashCode()),meta.expiry,meta.path);  if (currentCookieCount < previousCookieCount) {    for (int index=currentCookieCount; index < previousCookieCount; index++) {      cookies[index]=createNewCookie(meta.key + index,"",0,meta.path);    }  }  return cookies;}  }
class C{  @Override public void messageReceived(final NextFilter nextFilter,final IoSession session,final Object message) throws ProxyAuthException {  ProxyLogicHandler handler=getProxyHandler(session);synchronized (handler) {    IoBuffer buf=(IoBuffer)message;    if (handler.isHandshakeComplete()) {      nextFilter.messageReceived(session,buf);    } else {      LOGGER.debug(" Data Read: {} ({})",handler,buf);      while (buf.hasRemaining() && !handler.isHandshakeComplete()) {        LOGGER.debug(" Pre-handshake - passing to handler");        int pos=buf.position();        handler.messageReceived(nextFilter,buf);        if (buf.position() == pos || session.isClosing()) {          return;        }      }      if (buf.hasRemaining()) {        LOGGER.debug(" Passing remaining data to next filter");        nextFilter.messageReceived(session,buf);      }    }  }}  }
class C{  @Dev public DropItemAction(final String itemName,@Dev(defaultValue="1") final int amount){  this.itemName=checkNotNull(itemName);  this.amount=amount;}  }
class C{  public void doHandshake(final NextFilter nextFilter){  logger.debug(" doHandshake()");  writeRequest(nextFilter,request);}  }
class C{  public ViewPoint(int x,int y){  super(x,y);}  }
class C{  public GsonRequest(int method,@Nullable Map<String,String> body,String url,Type type,Map<String,String> headers,Response.Listener<T> listener,Response.ErrorListener errorListener){  super(method,url,errorListener);  this.mBody=body;  this.mType=type;  this.mHeaders=headers;  this.mListener=listener;}  }
class C{  private void assertionError(String message){  StringBuilder b=new StringBuilder(message.length() + 32);  b.append(message).append(" (");  int c=onCompletedEvents.size();  b.append(c).append(" completion");  if (c != 1) {    b.append('s');  }  b.append(')');  if (!onErrorEvents.isEmpty()) {    int size=onErrorEvents.size();    b.append(" (+").append(size).append(" error");    if (size != 1) {      b.append('s');    }    b.append(')');  }  AssertionError ae=new AssertionError(b.toString());  if (!onErrorEvents.isEmpty()) {    if (onErrorEvents.size() == 1) {      ae.initCause(onErrorEvents.get(0));    } else {      ae.initCause(new CompositeException(onErrorEvents));    }  }  throw ae;}  }
class C{  public FormatReal(final int in,final int iff){  if (in < 0) {    throw new IllegalArgumentException("leading digits is negative:" + in);  }  if (iff < 0) {    throw new IllegalArgumentException("trailing digits is negative:" + iff);  }  mLength=1 + in + iff;  mPadding=new char[mLength];  for (int i=0; i < mLength; i++) {    mPadding[i]=' ';  }  final StringBuilder formatpos=new StringBuilder();  final StringBuilder formatneg=new StringBuilder();  formatpos.append("#");  formatneg.append("-");  for (int i=2; i < in; i++) {    formatpos.append("#");    formatneg.append("#");  }  formatpos.append("0.");  formatneg.append("0.");  for (int i=0; i < iff; i++) {    formatpos.append("0");    formatneg.append("0");  }  final String format=formatpos.toString() + ";" + formatneg.toString();  mLocalFormat=new DecimalFormat(format);}  }
class C{  public int update(SQLiteDatabase db,ContentValues values){  return db.update(mTable.name,values,mCondition,mArgs);}  }
class C{  public void addVariable(String variableName,Boolean variableValue){  variables.put(variableName,variableValue.toString());}  }
class C{  private boolean isBeforeEnd(ConcurrentSkipListMap.Node<K,V> n){  if (n == null)   return false;  if (hi == null)   return true;  K k=n.key;  if (k == null)   return true;  int c=m.compare(k,hi);  if (c > 0 || (c == 0 && !hiInclusive))   return false;  return true;}  }
class C{  private ReferenceType computeFirstCommonSuperclassOfDifferentDimensionArrays(ArrayType aArrType,ArrayType bArrType){  assert aArrType.getDimensions() != bArrType.getDimensions();  boolean aBaseTypeIsPrimitive=(aArrType.getBasicType() instanceof BasicType);  boolean bBaseTypeIsPrimitive=(bArrType.getBasicType() instanceof BasicType);  if (aBaseTypeIsPrimitive || bBaseTypeIsPrimitive) {    int minDimensions, maxDimensions;    if (aArrType.getDimensions() < bArrType.getDimensions()) {      minDimensions=aArrType.getDimensions();      maxDimensions=bArrType.getDimensions();    } else {      minDimensions=bArrType.getDimensions();      maxDimensions=aArrType.getDimensions();    }    if (minDimensions == 1) {      return Type.OBJECT;    } else {      return new ArrayType(Type.OBJECT,maxDimensions - minDimensions);    }  } else {    return new ArrayType(Type.OBJECT,Math.min(aArrType.getDimensions(),bArrType.getDimensions()));  }}  }
class C{  @Path("list") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public ListResponse list(final ListRequest request) throws ServerException, IOException {  request.withProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.list(request);}  }
class C{  public void nextFrame() throws IOException {  print("nextFrame",null);}  }
class C{  private void updateFileSizeAndSignature() throws Exception {  for (  String filename : files) {    File file=new File(folder + "/" + filename);    prop.put("file-size." + filename,Long.toString(file.length()));    String fullFilename=folder + "/" + filename;    String signature=signer.sign(fullFilename);    prop.put("file-signature." + filename,signature);  }}  }
class C{  public boolean equalArrayValue(Object otherValue){  if (value instanceof Object[] && otherValue instanceof Object[]) {    return Arrays.equals((Object[])value,(Object[])otherValue);  }  Class type=value.getClass();  if (type != otherValue.getClass()) {    return false;  }  if (type == int[].class) {    return Arrays.equals((int[])value,(int[])otherValue);  } else   if (type == byte[].class) {    return Arrays.equals((byte[])value,(byte[])otherValue);  } else   if (type == short[].class) {    return Arrays.equals((short[])value,(short[])otherValue);  } else   if (type == long[].class) {    return Arrays.equals((long[])value,(long[])otherValue);  } else   if (type == char[].class) {    return Arrays.equals((char[])value,(char[])otherValue);  } else   if (type == boolean[].class) {    return Arrays.equals((boolean[])value,(boolean[])otherValue);  } else   if (type == float[].class) {    return Arrays.equals((float[])value,(float[])otherValue);  } else   if (type == double[].class) {    return Arrays.equals((double[])value,(double[])otherValue);  }  return false;}  }
class C{  @Transactional(readOnly=true) public static Result form(Long id){  TodoItem item=TodoService.findOne(id);  return ok(todoform.render(item));}  }
class C{  public boolean isRepresentationClassSerializable(){  return java.io.Serializable.class.isAssignableFrom(representationClass);}  }
class C{  public void flushCache(String rendererID){  try {    mDatabase.flushCache(rendererID);  } catch (  EmptyCacheException e) {    if (Log.isLoggable(DEBUGTAG,Log.DEBUG)) {      Log.d(DEBUGTAG,"Flushing tile cache failed",e);    }  }}  }
class C{  public static Process execute(final String self) throws IOException {  return Runtime.getRuntime().exec(self);}  }
class C{  public MemoryRangeCommand(final int packetId,final IAddress address){  super(DebugCommandType.CMD_VALID_MEMORY,packetId);  Preconditions.checkNotNull(address,"IE00737: Address argument can not be null");  addArgument(new DebugMessageAddressArgument(address));}  }
class C{  public final static boolean inLongRange(char[] digitChars,int offset,int len,boolean negative){  String cmpStr=negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR;  int cmpLen=cmpStr.length();  if (len < cmpLen)   return true;  if (len > cmpLen)   return false;  for (int i=0; i < cmpLen; ++i) {    int diff=digitChars[offset + i] - cmpStr.charAt(i);    if (diff != 0) {      return (diff < 0);    }  }  return true;}  }
class C{  public void testVirtualDestinations() throws Exception {  startAllBrokers();  sendReceive("local.test",true,"Consumer.a.local.test",false,1,1);  sendReceive("global.test",true,"Consumer.a.global.test",false,1,1);  destroyAllBrokers();}  }
class C{  public static JBossXml parseJBossXml(InputStream input) throws IOException, JDOMException {  JBossXmlIo xio=new JBossXmlIo();  return (JBossXml)xio.parseXml(input);}  }
class C{  public void pointToCellExact(int x,int y,int[] result){  final int hStartPadding=getPaddingLeft();  final int vStartPadding=getPaddingTop();  result[0]=(x - hStartPadding) / (mCellWidth + mWidthGap);  result[1]=(y - vStartPadding) / (mCellHeight + mHeightGap);  final int xAxis=mCountX;  final int yAxis=mCountY;  if (result[0] < 0)   result[0]=0;  if (result[0] >= xAxis)   result[0]=xAxis - 1;  if (result[1] < 0)   result[1]=0;  if (result[1] >= yAxis)   result[1]=yAxis - 1;}  }
class C{  public static void callPhone(Context context,String phoneNumber){  Intent intent=createCallPhoneIntent(phoneNumber);  checkContext(context,intent);  context.startActivity(intent);}  }
class C{  public static GeohashCellQuery.Builder geoHashCellQuery(String name,String geohash,boolean neighbors){  return new GeohashCellQuery.Builder(name,geohash,neighbors);}  }
class C{  public JdpException(String msg){  super(msg);}  }
class C{  public static boolean[] values(Boolean[] array){  boolean[] dest=new boolean[array.length];  for (int i=0; i < array.length; i++) {    Boolean v=array[i];    if (v != null) {      dest[i]=v.booleanValue();    }  }  return dest;}  }
class C{  protected void applyPreviewColor(int previewColor){  setSaveCompleted(false);  mPickedColorPreview.getBackground().setColorFilter(previewColor,PorterDuff.Mode.SRC_ATOP);  mColorPreviewText.setText(ColorItem.makeHexString(previewColor));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.TAG_VALUE__KEY:    setKey(KEY_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public TaskResourceRep hostDatacenterChangeDecline(URI hostId,URI clusterId,URI datacenterId,boolean isVcenter,URI eventId){  return null;}  }
class C{  protected SVGException createSVGException(short type,String key,Object[] args){  return ((SVGOMElement)element).createSVGException(type,key,args);}  }
class C{  static public final String crypt(String password,String salt) throws NoSuchAlgorithmException {  String magic="$1$";  byte finalState[];  MessageDigest ctx, ctx1;  long l;  if (salt.startsWith(magic)) {    salt=salt.substring(magic.length());  }  if (salt.indexOf('$') != -1) {    salt=salt.substring(0,salt.indexOf('$'));  }  if (salt.length() > 8) {    salt=salt.substring(0,8);  }  ctx=MessageDigest.getInstance("MD5");  ctx.update(password.getBytes());  ctx.update(magic.getBytes());  ctx.update(salt.getBytes());  ctx1=MessageDigest.getInstance("MD5");  ctx1.update(password.getBytes());  ctx1.update(salt.getBytes());  ctx1.update(password.getBytes());  finalState=ctx1.digest();  for (int pl=password.length(); pl > 0; pl-=16) {    for (int i=0; i < (pl > 16 ? 16 : pl); i++)     ctx.update(finalState[i]);  }  clearbits(finalState);  for (int i=password.length(); i != 0; i>>>=1) {    if ((i & 1) != 0) {      ctx.update(finalState[0]);    } else {      ctx.update(password.getBytes()[0]);    }  }  finalState=ctx.digest();  for (int i=0; i < 1000; i++) {    ctx1=MessageDigest.getInstance("MD5");    if ((i & 1) != 0) {      ctx1.update(password.getBytes());    } else {      for (int c=0; c < 16; c++)       ctx1.update(finalState[c]);    }    if ((i % 3) != 0) {      ctx1.update(salt.getBytes());    }    if ((i % 7) != 0) {      ctx1.update(password.getBytes());    }    if ((i & 1) != 0) {      for (int c=0; c < 16; c++)       ctx1.update(finalState[c]);    } else {      ctx1.update(password.getBytes());    }    finalState=ctx1.digest();  }  StringBuffer result=new StringBuffer();  result.append(magic);  result.append(salt);  result.append("$");  l=(bytes2u(finalState[0]) << 16) | (bytes2u(finalState[6]) << 8) | bytes2u(finalState[12]);  result.append(to64(l,4));  l=(bytes2u(finalState[1]) << 16) | (bytes2u(finalState[7]) << 8) | bytes2u(finalState[13]);  result.append(to64(l,4));  l=(bytes2u(finalState[2]) << 16) | (bytes2u(finalState[8]) << 8) | bytes2u(finalState[14]);  result.append(to64(l,4));  l=(bytes2u(finalState[3]) << 16) | (bytes2u(finalState[9]) << 8) | bytes2u(finalState[15]);  result.append(to64(l,4));  l=(bytes2u(finalState[4]) << 16) | (bytes2u(finalState[10]) << 8) | bytes2u(finalState[5]);  result.append(to64(l,4));  l=bytes2u(finalState[11]);  result.append(to64(l,2));  clearbits(finalState);  return result.toString();}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  private void checkNetworkProperties(){  if (this.network.getNodes().containsKey(Id.createNodeId(23)))   this.simulateInflowCap23=true;  if (this.network.getNodes().containsKey(Id.createNodeId(24)))   this.simulateInflowCap24=true;  if (this.network.getNodes().containsKey(Id.createNodeId(45)))   this.simulateInflowCap45=true;  if (!this.network.getLinks().containsKey(Id.createLinkId("3_4")))   this.middleLinkExists=false;}  }
class C{  public IntervalShiftAccumulator(FramingFlowType framingFlowType,boolean isDestFlow,int shiftDevider,boolean isSlidingWindow) throws AdeException {  m_shiftDevider=shiftDevider;  m_intervals=new Vector<IInterval>(m_shiftDevider);  m_isSlidingWindow=isSlidingWindow;  final FlowFactory flowFactory=Ade.getAde().getFlowFactory();  if (isDestFlow) {    m_framingFlowType=framingFlowType;    m_splitFlow=flowFactory.getSplitFlow(framingFlowType,m_shiftDevider);  } else {    m_framingFlowType=flowFactory.getJoinedFlow(framingFlowType,m_shiftDevider);    m_splitFlow=framingFlowType;  }}  }
class C{  @Override protected SoftwareModuleMetadata updateMetadata(final SoftwareModule entity,final String key,final String value){  final SoftwareModuleMetadata swMetadata=softwareManagement.updateSoftwareModuleMetadata(entityFactory.generateSoftwareModuleMetadata(entity,key,value));  setSelectedEntity(swMetadata.getSoftwareModule());  return swMetadata;}  }
class C{  public void testCharSequence() throws IOException {  CharSequence cs=mapper.readValue("\"abc\"",CharSequence.class);  assertEquals(String.class,cs.getClass());  assertEquals("abc",cs.toString());}  }
class C{  private void handleComputeStateCreateOrUpdate(AWSComputeServiceCreationContext context){switch (context.creationStage) {case GET_RELATED_COMPUTE_DESCRIPTIONS:    getRelatedComputeDescriptions(context,AWSComputeStateCreationStage.CREATE_TAGS);  break;case CREATE_TAGS:createTags(context,AWSComputeStateCreationStage.POPULATE_COMPUTESTATES);break;case POPULATE_COMPUTESTATES:populateOperations(context,AWSComputeStateCreationStage.CREATE_COMPUTESTATES);break;case CREATE_COMPUTESTATES:kickOffComputeStateCreation(context,AWSComputeStateCreationStage.SIGNAL_COMPLETION);break;case SIGNAL_COMPLETION:setOperationDurationStat(context.awsAdapterOperation);context.awsAdapterOperation.complete();break;default :Throwable t=new IllegalArgumentException("Unknown AWS enumeration:compute state creation stage");AdapterUtils.sendFailurePatchToEnumerationTask(this,context.computeState.parentTaskLink,t);break;}}  }
class C{  public IMouseState createBackgroundPressedLeftState(final MouseEvent event){  final CBackgroundPressedLeftState state=new CBackgroundPressedLeftState(this,m_graph);  m_factory.createBackgroundPressedLeftAction().execute(state,event);  return state;}  }
class C{  private void initIndeterminateValues(){  initIndeterminateDefaults();  numFrames=cycleTime / repaintInterval;  initAnimationIndex();  boxRect=new Rectangle();  nextPaintRect=new Rectangle();  componentInnards=new Rectangle();  oldComponentInnards=new Rectangle();  progressBar.addHierarchyListener(getHandler());  if (progressBar.isDisplayable()) {    startAnimationTimer();  }}  }
class C{  public static List<Integer> createColors(int[] colors){  List<Integer> result=new ArrayList<Integer>();  for (  int i : colors) {    result.add(i);  }  return result;}  }
class C{  public MakeDensityBasedClusterer(Clusterer toWrap){  setClusterer(toWrap);}  }
class C{  protected ToolMetaBuilder(final ToolMeta meta){  this.meta=meta.clone();}  }
class C{  @Override public final Void visitParameterizedType(ParameterizedTypeTree node,Void p){  return null;}  }
class C{  public ByteDataBox(byte[][] data){  int length=data[0].length;  for (  byte[] datum : data) {    if (datum.length != length) {      throw new IllegalArgumentException("All rows must have same length.");    }  }  this.data=data;}  }
class C{  public Recurrence(String value){  this();  setValue(value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.668 -0400",hash_original_method="069C034E3A1DA1F7A4E9BE0CC1AAD9AD",hash_generated_method="92E6B8FD2C7A39C6406C98C9AF69301C") public void addWordToSlot(String slot,String word,String pron,int weight,String tag){  SR_GrammarAddWordToSlot(mGrammar,slot,word,pron,weight,tag);}  }
class C{  public boolean isSlackEnabled(){  return this.slackEnabled;}  }
class C{  public Document read(Reader reader) throws DocumentException, IOException, XmlPullParserException {  getXPPParser().setInput(reader);  return parseDocument();}  }
class C{  public GitRefAlreadyExistsException(Throwable cause){  super(cause);}  }
class C{  public static boolean isFailure(List<Action> actions){  return actions.isEmpty();}  }
class C{  public boolean draw(Canvas c,Paint p){  final boolean hasContent;  hasContent=drawSoftware(c,p);  return hasContent;}  }
class C{  public void reportGpsGeofenceResumeStatus(int geofenceId,int status){  if (DEBUG)   Log.d(TAG,"Resume Callback: GPS : Id: " + geofenceId + " Status: "+ status);  acquireWakeLock();  Message m=mGeofenceHandler.obtainMessage(RESUME_GEOFENCE_CALLBACK);  m.arg1=geofenceId;  m.arg2=getGeofenceStatus(status);  mGeofenceHandler.sendMessage(m);}  }
class C{  protected KernSubtableFormat2(RandomAccessFile raf) throws IOException {  rowWidth=raf.readUnsignedShort();  leftClassTable=raf.readUnsignedShort();  rightClassTable=raf.readUnsignedShort();  array=raf.readUnsignedShort();}  }
class C{  private void thresholdBlur(Kernel kernel,int[] inPixels,int[] outPixels,int width,int height,boolean alpha){  float[] matrix=kernel.getKernelData(null);  int cols=kernel.getWidth();  int cols2=cols / 2;  for (int y=0; y < height; y++) {    int ioffset=y * width;    int outIndex=y;    for (int x=0; x < width; x++) {      float r=0, g=0, b=0, a=0;      int moffset=cols2;      int rgb1=inPixels[ioffset + x];      int a1=(rgb1 >> 24) & 0xff;      int r1=(rgb1 >> 16) & 0xff;      int g1=(rgb1 >> 8) & 0xff;      int b1=rgb1 & 0xff;      float af=0, rf=0, gf=0, bf=0;      for (int col=-cols2; col <= cols2; col++) {        float f=matrix[moffset + col];        if (f != 0) {          int ix=x + col;          if (!(0 <= ix && ix < width))           ix=x;          int rgb2=inPixels[ioffset + ix];          int a2=(rgb2 >> 24) & 0xff;          int r2=(rgb2 >> 16) & 0xff;          int g2=(rgb2 >> 8) & 0xff;          int b2=rgb2 & 0xff;          int d;          d=a1 - a2;          if (d >= -threshold && d <= threshold) {            a+=f * a2;            af+=f;          }          d=r1 - r2;          if (d >= -threshold && d <= threshold) {            r+=f * r2;            rf+=f;          }          d=g1 - g2;          if (d >= -threshold && d <= threshold) {            g+=f * g2;            gf+=f;          }          d=b1 - b2;          if (d >= -threshold && d <= threshold) {            b+=f * b2;            bf+=f;          }        }      }      a=af == 0 ? a1 : a / af;      r=rf == 0 ? r1 : r / rf;      g=gf == 0 ? g1 : g / gf;      b=bf == 0 ? b1 : b / bf;      int ia=alpha ? PixelUtils.clamp((int)(a + 0.5)) : 0xff;      int ir=PixelUtils.clamp((int)(r + 0.5));      int ig=PixelUtils.clamp((int)(g + 0.5));      int ib=PixelUtils.clamp((int)(b + 0.5));      outPixels[outIndex]=(ia << 24) | (ir << 16) | (ig << 8)| ib;      outIndex+=height;    }  }}  }
class C{  public DigestURL parseURL(final serverObjects post,final boolean auth) throws MalformedURLException {  final String urlString=post.get("url","");  final String urlLicense=post.get("code","");  DigestURL url;  if (auth) {    if (urlString.length() > 0) {      url=new DigestURL(urlString);    } else {      throw new TemplateMissingParameterException("missing required url parameter");    }  } else {    if ((urlLicense.length() > 0)) {      String licensedURL=URLLicense.releaseLicense(urlLicense);      if (licensedURL != null) {        url=new DigestURL(licensedURL);      } else {        ConcurrentLog.fine("ImageViewer","image urlLicense not found key=" + urlLicense);        throw new InvalidURLLicenceException();      }    } else {      throw new TemplateMissingParameterException("missing required code parameter");    }  }  return url;}  }
class C{  @Override public String toString(){  return mediaType;}  }
class C{  public static Navigator find(Context context){  MortarScope scope=MortarScope.findChild(context,SCOPE_NAME);  return scope != null ? scope.<Navigator>getService(SERVICE_NAME) : null;}  }
class C{  public Llnmon(LocoNetSystemConnectionMemo memo){  this();  if (memo.provides(TurnoutManager.class)) {    this.setLocoNetTurnoutManager(memo.get(TurnoutManager.class));  }  if (memo.provides(SensorManager.class)) {    this.setLocoNetSensorManager(memo.get(SensorManager.class));  }  if (memo.provides(ReporterManager.class)) {    this.setLocoNetReporterManager(memo.get(ReporterManager.class));  }}  }
class C{  private void execute(final String queryFile,final String expectedResultFile,final boolean checkOrder) throws Exception {  final BigdataSailRemoteRepositoryConnection conn=m_repo.getBigdataSailRemoteRepository().getConnection();  try {    final String baseURI=getRepositoryUrlBase();    String queryString=readQueryString(queryFile);    queryString=queryString.replace("http://localhost:18080/openrdf/repositories/endpoint",baseURI);    final QueryType queryType;{      final AbstractTripleStore tripleStore=(AbstractTripleStore)getIndexManager().getResourceLocator().locate(namespace,ITx.READ_COMMITTED);      final ASTContainer astContainer=new Bigdata2ASTSPARQLParser().parseQuery2(queryString,baseURI);      queryType=astContainer.getOriginalAST().getQueryType();    }switch (queryType) {case ASK:{        throw new RuntimeException("Not yet supported (boolean) " + queryString);      }case CONSTRUCT:case DESCRIBE:{      final Query query=conn.prepareGraphQuery(QueryLanguage.SPARQL,queryString);      final GraphQueryResult gqr=((GraphQuery)query).evaluate();      final Set<Statement> queryResult=Iterations.asSet(gqr);      final Set<Statement> expectedResult=readExpectedGraphQueryResult(expectedResultFile);      compareGraphs(queryResult,expectedResult);      break;    }case SELECT:{    final Query query=conn.prepareTupleQuery(QueryLanguage.SPARQL,queryString);    final TupleQueryResult queryResult=((TupleQuery)query).evaluate();    final TupleQueryResult expectedResult=readExpectedTupleQueryResult(expectedResultFile);    compareTupleQueryResults(queryResult,expectedResult,checkOrder);    break;  }default :throw new RuntimeException("Unexpected query type: " + queryString);}}  finally {conn.close();}}  }
class C{  public boolean dispatchEvent(NodeEventTarget target,Event evt) throws EventException {  if (evt == null) {    return false;  }  if (!(evt instanceof AbstractEvent)) {    throw createEventException(DOMException.NOT_SUPPORTED_ERR,"unsupported.event",new Object[]{});  }  AbstractEvent e=(AbstractEvent)evt;  String type=e.getType();  if (type == null || type.length() == 0) {    throw createEventException(EventException.UNSPECIFIED_EVENT_TYPE_ERR,"unspecified.event",new Object[]{});  }  e.setTarget(target);  e.stopPropagation(false);  e.stopImmediatePropagation(false);  e.preventDefault(false);  NodeEventTarget[] ancestors=getAncestors(target);  e.setEventPhase(Event.CAPTURING_PHASE);  HashSet stoppedGroups=new HashSet();  HashSet toBeStoppedGroups=new HashSet();  for (int i=0; i < ancestors.length; i++) {    NodeEventTarget node=ancestors[i];    e.setCurrentTarget(node);    fireEventListeners(node,e,true,stoppedGroups,toBeStoppedGroups);    stoppedGroups.addAll(toBeStoppedGroups);    toBeStoppedGroups.clear();  }  e.setEventPhase(Event.AT_TARGET);  e.setCurrentTarget(target);  fireEventListeners(target,e,false,stoppedGroups,toBeStoppedGroups);  stoppedGroups.addAll(toBeStoppedGroups);  toBeStoppedGroups.clear();  if (e.getBubbles()) {    e.setEventPhase(Event.BUBBLING_PHASE);    for (int i=ancestors.length - 1; i >= 0; i--) {      NodeEventTarget node=ancestors[i];      e.setCurrentTarget(node);      fireEventListeners(node,e,false,stoppedGroups,toBeStoppedGroups);      stoppedGroups.addAll(toBeStoppedGroups);      toBeStoppedGroups.clear();    }  }  if (!e.getDefaultPrevented()) {    runDefaultActions(e);  }  return e.getDefaultPrevented();}  }
class C{  protected CCScaleTo(float t,float s){  this(t,s,s);}  }
class C{  public Void handleRequest(KinesisEvent event,Context context){  LambdaLogger logger=context.getLogger();  logger.log("Received " + event.getRecords().size() + " raw Event Records.");  RecordDeaggregator.stream(event.getRecords().stream(),null);  return null;}  }
class C{  @Override protected DistributionSetMetadata updateMetadata(final DistributionSet entity,final String key,final String value){  final DistributionSetMetadata dsMetaData=distributionSetManagement.updateDistributionSetMetadata(entityFactory.generateDistributionSetMetadata(entity,key,value));  setSelectedEntity(dsMetaData.getDistributionSet());  return dsMetaData;}  }
class C{  public void rearrangeChildren(int itemCount){  ArrayList<View> views=getItemsInReadingOrder();  mContent.arrangeChildren(views,Math.max(itemCount,views.size()));  mItemsInvalidated=true;}  }
class C{  public boolean addEntryExpiryTask(EntryExpiryTask task){  return addExpiryTask(task) != null;}  }
class C{  public static double round(final double v){  return ((long)(v * 100.)) / 100.;}  }
class C{  protected void describeLanguages(){  g.add(aService,SD.supportedLanguage,SD.SPARQL10Query);  g.add(aService,SD.supportedLanguage,SD.SPARQL11Query);  g.add(aService,SD.supportedLanguage,SD.SPARQL11Update);}  }
class C{  public StyleSheet(){  super();  selectorMapping=new SelectorMapping(0);  resolvedStyles=new Hashtable<String,ResolvedStyle>();  if (css == null) {    css=new CSS();  }}  }
class C{  static void remove(UUID uuid){  Cursor c=CURSORS.remove(uuid);  if (c != null)   c.cursor.close();}  }
class C{  public static void touchFile(IPath path) throws IOException {  Preconditions.checkArgument(path.isAbsolute());  Path file=FileSystems.getDefault().getPath(path.toOSString());  Files.createFile(file);}  }
class C{  public void testRunAllActivities() throws Exception {  final Set<ProcessError> errSet=new LinkedHashSet<ProcessError>();  for (  ResolveInfo app : getLauncherActivities(mPackageManager)) {    final Collection<ProcessError> errProcs=runOneActivity(app);    if (errProcs != null) {      errSet.addAll(errProcs);    }  }  if (!errSet.isEmpty()) {    fail(String.format("Got %d errors:\n%s",errSet.size(),reportWrappedListContents(errSet)));  }}  }
class C{  public static void write(char[] data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((lex == null) ? 0 : lex.hashCode());  result=prime * result + (int)(timestamp ^ (timestamp >>> 32));  return result;}  }
class C{  public static Hash nextHash(final Hash hash,final PublicKey publicKey){  return new Hash(Hashes.sha3_256(hash.getRaw(),publicKey.getRaw()));}  }
class C{  @Override public float sloppyFreq(int distance){  return 1.0f / (distance + 1);}  }
class C{  static public XObject create(Object val,XPathContext xctxt){  return XObjectFactory.create(val,xctxt);}  }
class C{  @Override public InputStream openInputStream() throws IOException {  return getInputStream();}  }
class C{  public boolean applyPressed(){  landscapePath=landscapeText.getText().trim();  if (landscapePath.length() == 0) {    messageText.setText("Please select a landscape.");    return (false);  }  filePath=fileText.getText().trim();  if (filePath.length() == 0) {    messageText.setText("Please select an input file.");    return (false);  }  if (!filePath.toLowerCase().endsWith(".json")) {    messageText.setText("Only GeoJSON format is supported.");    return (false);  }  layerName=nameText.getText();  if (layerName.isEmpty()) {    messageText.setText("Invalid layer name.");    return (false);  }  color=colorPanel.getColor();  elevAttrName=elevAttrNameText.getText();  if (elevAttrName.isEmpty()) {    elevAttrName=null;  }  messageText.setText("Creating pyramid . . .");  return (true);}  }
class C{  double accuracyIncrease(Instance instance) throws Exception {  if (m_bUseProb) {    double[] fProb=m_BayesNet.distributionForInstance(instance);    return fProb[(int)instance.classValue()] * instance.weight();  } else {    if (m_BayesNet.classifyInstance(instance) == instance.classValue()) {      return instance.weight();    }  }  return 0;}  }
class C{  public boolean containsFixme(){  return this.containsFixme;}  }
class C{  public void test_ticket_bg1899_a() throws Exception {  new TestHelper("ticket_bg1899a","ticket_bg1899a.rq","ticket_bg1899abcd.ttl","ticket_bg1899abcd.srx").runTest();}  }
class C{  public static boolean isCarbonDataFile(String fileNameWithPath){  int pos=fileNameWithPath.lastIndexOf('.');  if (pos != -1) {    return fileNameWithPath.substring(pos).startsWith(CARBON_DATA_EXT);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.400 -0400",hash_original_method="6ACE33DC5B7250308AF9F5940BFD54EA",hash_generated_method="7A29C30262628F259D820EB4E06B2FAA") private boolean isLogLibraryAvailable(String name,String classname){  if (isDiagnosticsEnabled()) {    logDiagnostic("Checking for '" + name + "'.");  }  try {    Log log=createLogFromClass(classname,this.getClass().getName(),false);    if (log == null) {      if (isDiagnosticsEnabled()) {        logDiagnostic("Did not find '" + name + "'.");      }      return false;    } else {      if (isDiagnosticsEnabled()) {        logDiagnostic("Found '" + name + "'.");      }      return true;    }  } catch (  LogConfigurationException e) {    if (isDiagnosticsEnabled()) {      logDiagnostic("Logging system '" + name + "' is available but not useable.");    }    return false;  }}  }
class C{  public QueryService addPrefix(String label,String url){  queryServiceDTO.getPrefixes().put(label,url);  return this;}  }
class C{  public int installFunction(String name,Class func){  int funcIndex;  Object funcIndexObj=getFunctionID(name);  if (null != funcIndexObj) {    funcIndex=((Integer)funcIndexObj).intValue();    if (funcIndex < NUM_BUILT_IN_FUNCS) {      funcIndex=m_funcNextFreeIndex++;      m_functionID_customer.put(name,new Integer(funcIndex));    }    m_functions_customer[funcIndex - NUM_BUILT_IN_FUNCS]=func;  } else {    funcIndex=m_funcNextFreeIndex++;    m_functions_customer[funcIndex - NUM_BUILT_IN_FUNCS]=func;    m_functionID_customer.put(name,new Integer(funcIndex));  }  return funcIndex;}  }
class C{  @After public void cleanEnv() throws IOException {  FileUtils.deleteDirectory(localTempPath.toFile());  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=s3DaoTestHelper.getTestS3FileTransferRequestParamsDto();  for (  String keyPrefix : Arrays.asList(testS3KeyPrefix,TEST_S3_KEY_PREFIX)) {    s3FileTransferRequestParamsDto.setS3KeyPrefix(keyPrefix + "/");    s3Dao.deleteDirectory(s3FileTransferRequestParamsDto);  }}  }
class C{  public String toString(){  return getCounters().toString();}  }
class C{  public Comment addComment(String comment){  Comment prop=new Comment(comment);  addComment(prop);  return prop;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public SimpleLongArrayList(int initialCapacity){  super();  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  this.elements(new long[initialCapacity]);  size=0;}  }
class C{  public void addLine(String line){  int index=line.indexOf(":",1);  if (index != -1) {    addLenient(line.substring(0,index),line.substring(index + 1));  } else   if (line.startsWith(":")) {    addLenient("",line.substring(1));  } else {    addLenient("",line);  }}  }
class C{  public Eval<V> nextOrNull(final K key){  final ValueSubscriber<V> sub=ValueSubscriber.subscriber();  final LazyImmutable<Boolean> requested=LazyImmutable.def();  return get(key).peek(null).map(null).orElse(Eval.<V>now(null));}  }
class C{  public boolean shouldRenderSelection(){  return !pureTouch || pointerPressedAndNotReleasedOrDragged || lastInteractionWasKeypad;}  }
class C{  public boolean isTiled(){  return _isTiled;}  }
class C{  public boolean addDeployedClass(Class<?> cls,String... aliases){  boolean res=false;  if (cls != null) {    Class<?> cur=clss.putIfAbsent(cls.getName(),cls);    if (cur == null) {      onDeployed(cls);      res=true;    }    for (    String alias : aliases) {      if (alias != null)       clss.putIfAbsent(alias,cls);    }  }  return res;}  }
class C{  public TStructGetter createTStructGetter(){  TStructGetterImpl tStructGetter=new TStructGetterImpl();  return tStructGetter;}  }
class C{  private String assertGetterExistence(Field currentField,Method[] methods){  List<String> methodNames=new ArrayList<String>();  for (  Method method : methods) {    methodNames.add(method.getName());  }  char firstChar=currentField.getName().charAt(0);  char upperCaseFirstChar=Character.toUpperCase(firstChar);  String methodName="get" + upperCaseFirstChar + currentField.getName().substring(1);  if (!methodNames.contains(methodName)) {    return "Missing method '" + methodName + "'\n";  }  return "";}  }
class C{  @Interruptible private static boolean isPrefix(Atom prefix,byte[] b){  byte[] a=prefix.toByteArray();  int aLen=a.length;  if (aLen > b.length) {    return false;  }  for (int i=0; i < aLen; i++) {    if (a[i] != b[i]) {      return false;    }  }  return true;}  }
class C{  ValueAdapter(Path path){  this.path=path;}  }
class C{  public Object remove(long key){  int hash=(int)(key & mask);  while (true) {    long mapKey=keys[hash];    if (mapKey == DEAD_KEY)     return null; else     if (mapKey == key) {      flags[hash]|=DELETED;      size--;      keys[hash]=DEAD_KEY;      return values[hash];    }    hash=(hash + 1) & mask;  }}  }
class C{  private void initInputHost(){  input_float_1D=new float[sizeX];  input_float_2D=new float[sizeX * sizeY];  input_float_3D=new float[sizeX * sizeY * sizeZ];  for (int x=0; x < sizeX; x++) {    input_float_1D[x]=x;    for (int y=0; y < sizeY; y++) {      int xy=x + y * sizeY;      input_float_2D[xy]=xy;      for (int z=0; z < sizeZ; z++) {        int xyz=xy + z * sizeX * sizeY;        input_float_3D[xyz]=xyz;      }    }  }  input_float4_1D=new float[sizeX * 4];  input_float4_2D=new float[sizeX * sizeY * 4];  input_float4_3D=new float[sizeX * sizeY * sizeZ* 4];  for (int x=0; x < sizeX; x++) {    input_float4_1D[x * 4 + 0]=x;    input_float4_1D[x * 4 + 1]=x;    input_float4_1D[x * 4 + 2]=x;    input_float4_1D[x * 4 + 3]=x;    for (int y=0; y < sizeY; y++) {      int xy=x + y * sizeY;      input_float4_2D[xy * 4 + 0]=xy;      input_float4_2D[xy * 4 + 1]=xy;      input_float4_2D[xy * 4 + 2]=xy;      input_float4_2D[xy * 4 + 3]=xy;      for (int z=0; z < sizeZ; z++) {        int xyz=xy + z * sizeX * sizeY;        input_float4_3D[xyz * 4 + 0]=xyz;        input_float4_3D[xyz * 4 + 1]=xyz;        input_float4_3D[xyz * 4 + 2]=xyz;        input_float4_3D[xyz * 4 + 3]=xyz;      }    }  }}  }
class C{  public String uploadFile(Part filePart,final String bucketName) throws IOException {  DateTimeFormatter dtf=DateTimeFormat.forPattern("-YYYY-MM-dd-HHmmssSSS");  DateTime dt=DateTime.now(DateTimeZone.UTC);  String dtString=dt.toString(dtf);  final String fileName=filePart.getSubmittedFileName() + dtString;  BlobInfo blobInfo=storage.create(BlobInfo.builder(bucketName,fileName).acl(new ArrayList<>(Arrays.asList(Acl.of(User.ofAllUsers(),Role.READER)))).build(),filePart.getInputStream());  logger.log(Level.INFO,"Uploaded file {0} as {1}",new Object[]{filePart.getSubmittedFileName(),fileName});  return blobInfo.mediaLink();}  }
class C{  public ServicesStillPublishedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void auditUpgrade(OperationTypeEnum auditType,String operationalStatus,String description,Object... descparams){  _auditMgr.recordAuditLog(null,null,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),operationalStatus,description,descparams);}  }
class C{  public boolean subdomain(Name domain){  int labels=labels();  int dlabels=domain.labels();  if (dlabels > labels)   return false;  if (dlabels == labels)   return equals(domain);  return domain.equals(name,offset(labels - dlabels));}  }
class C{  private static int availableCapacity(Buffer buffer){  return buffer.capacity() - buffer.limit();}  }
class C{  public void discardRecording(){  if (recorder != null) {    try {      recorder.stop();      recorder.release();      recorder=null;      if (file != null && file.exists() && !file.isDirectory()) {        file.delete();      }    } catch (    IllegalStateException e) {    }catch (    RuntimeException e) {    }    isRecording=false;  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static int ceilingNextPowerOfTwo(final int x){  return 1 << (32 - Integer.numberOfLeadingZeros(x - 1));}  }
class C{  @Override public Marker mark(){  BashPsiMarker marker=markerPool.alloc();  marker.psiBuilder=this;  marker.original=myDelegate.mark();  return marker;}  }
class C{  void invokeInSwing(Runnable runnable){  if (SwingUtilities.isEventDispatchThread())   runnable.run(); else   try {    SwingUtilities.invokeAndWait(runnable);  } catch (  InterruptedException e) {  }catch (  InvocationTargetException e) {  }}  }
class C{  public WriteSingleRegisterRequest(int ref,Register reg){  super();  setFunctionCode(Modbus.WRITE_SINGLE_REGISTER);  setDataLength(4);  reference=ref;  register=reg;}  }
class C{  public void closeButtonActionPerformed(ActionEvent ae){  JOptionPane.showMessageDialog(null,rb.getString("CloseButtonSaveWarning"),rb.getString("CloseButtonSaveWarningTitle"),JOptionPane.WARNING_MESSAGE);  dispose();}  }
class C{  public void shutdownWait(){  shutdown(false);}  }
class C{  public static void addSecurityConstraint(WebXml webXml,String theWebResourceName,String theUrlPattern,List<String> theRoles){  if (theWebResourceName == null || theUrlPattern == null || theRoles == null) {    throw new NullPointerException();  }  if (hasSecurityConstraint(webXml,theUrlPattern)) {    throw new IllegalStateException("Security constraint for URL " + "pattern " + theUrlPattern + " already defined");  }  WebXmlElement securityConstraintElement=(WebXmlElement)webXml.getDescriptorType().getTagByName(WebXmlType.SECURITY_CONSTRAINT).create();  Element webResourceCollectionElement=webXml.getDescriptorType().getTagByName(WebXmlType.WEB_RESOURCE_COLLECTION).create();  webResourceCollectionElement.addContent(webXml.getDescriptorType().getTagByName(WebXmlType.WEB_RESOURCE_NAME).create().setText(theWebResourceName));  webResourceCollectionElement.addContent(webXml.getDescriptorType().getTagByName(WebXmlType.URL_PATTERN).create().setText(theUrlPattern));  securityConstraintElement.addContent(webResourceCollectionElement);  Element authConstraintElement=webXml.getDescriptorType().getTagByName(WebXmlType.AUTH_CONSTRAINT).create();  for (  String theRole : theRoles) {    authConstraintElement.addContent(webXml.getDescriptorType().getTagByName(WebXmlType.ROLE_NAME).create().setText(theRole));  }  securityConstraintElement.addContent(authConstraintElement);  webXml.addTag(securityConstraintElement);}  }
class C{  public static <T extends NativeObject>T writeToNative(T instance){  instance.typeInfo.writeToNative(instance);  return instance;}  }
class C{  public static <T>T newBean(BeanManager bm,Class<T> clazz){  Set<Bean<?>> beans=bm.getBeans(clazz);  final Bean<T> bean=(Bean<T>)bm.resolve(beans);  final CreationalContext<T> ctx=bm.createCreationalContext(bean);  return (T)bm.getReference(bean,clazz,ctx);}  }
class C{  protected void closeCurrentEntry() throws IOException {  if (currentEntry != null) {    if (currentEntry.getSize() > currentFileSize) {      throw new IOException("The current entry[" + currentEntry.getName() + "] of size["+ currentEntry.getSize()+ "] has not been fully written.");    }    currentEntry=null;    currentFileSize=0;    pad();  }}  }
class C{  public List<NamedRelatedResourceRep> listByStorageSystem(URI storageSystemId,Boolean uniqueNames){  UriBuilder builder=client.uriBuilder(PathConstants.AUTO_TIER_BY_STORAGE_SYSTEM_URL);  if (uniqueNames != null) {    builder.queryParam("unique_policy_names",uniqueNames);  }  return getList(builder.build(storageSystemId));}  }
class C{  public ASN1Primitive toASN1Primitive(){  return id.toASN1Primitive();}  }
class C{  public ZipOutputStream(OutputStream out){  super(out);}  }
class C{  public ManifestDiff calculateDifference(ContentManifest manifest){  final List<ManifestFile> oldManifestFiles=files;  final List<ManifestFile> newManifestFiles=(manifest != null && manifest.getFiles() != null) ? manifest.getFiles() : new ArrayList<ManifestFile>();  final ManifestDiff diff=new ManifestDiff();  final List<ManifestFile> changedFiles=diff.changedFiles();  final List<ManifestFile> deletedFiles=diff.deletedFiles();  final List<ManifestFile> addedFiles=diff.addedFiles();  for (  ManifestFile oldFile : oldManifestFiles) {    boolean isDeleted=true;    for (    ManifestFile newFile : newManifestFiles) {      if (oldFile.name.equals(newFile.name)) {        isDeleted=false;        if (!newFile.hash.equals(oldFile.hash)) {          changedFiles.add(newFile);        }        break;      }    }    if (isDeleted) {      deletedFiles.add(oldFile);    }  }  for (  ManifestFile newFile : newManifestFiles) {    boolean isFound=false;    for (    ManifestFile oldFile : oldManifestFiles) {      if (newFile.name.equals(oldFile.name)) {        isFound=true;        break;      }    }    if (!isFound) {      addedFiles.add(newFile);    }  }  return diff;}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,Color bgcolor,ImageObserver observer){  if (img == null) {    return true;  }  boolean result;  if (needToCopyBgColorImage(img)) {    BufferedImage imageCopy=getBufferedImageCopy(img,bgcolor);    result=mGraphics.drawImage(imageCopy,x,y,width,height,null);  } else {    result=mGraphics.drawImage(img,x,y,width,height,bgcolor,observer);  }  return result;}  }
class C{  private Device findByProductId(String productId){  for (  Device device : deviceMap.values()) {    if (device.category().contains(productId)) {      return device;    }  }  return null;}  }
class C{  public SpeechData(AudioFormat format){  data=new byte[0];  this.format=format;}  }
class C{  public final void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){  pcs.addPropertyChangeListener(propertyName,listener);}  }
class C{  @Override public boolean csConsistNeedsSeperateAddress(){  return false;}  }
class C{  public Vector3f mulPosition(Matrix4x3fc mat){  return mulPosition(mat,this);}  }
class C{  @SuppressWarnings("rawtypes") public static boolean qsort(Object[] ar,int left,int right,Comparator comparator){  if (right <= left) {    return false;  }  int pivotIndex=selectPivotIndex(ar,left,right,comparator);  pivotIndex=partition(ar,left,right,pivotIndex,comparator);  qsort(ar,left,pivotIndex - 1,comparator);  qsort(ar,pivotIndex + 1,right,comparator);  return true;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  void deregisterAll(){  for (Enumeration e=comps.keys(); e.hasMoreElements(); ) {    Component cmp=(Component)e.nextElement();    cmp.removeFocusListener(this);    if (cmp instanceof Button) {      ((Button)cmp).removeActionListener(this);    } else     if (cmp instanceof List) {      ((List)cmp).removeSelectionListener((SelectionListener)listeners.get(cmp));    } else     if (cmp instanceof TextArea) {      ((TextArea)cmp).removeActionListener(this);      if (cmp instanceof TextField) {        ((TextField)cmp).removeDataChangeListener((DataChangedListener)listeners.get(cmp));      }    }  }  comps=new Hashtable();  listeners=new Hashtable();}  }
class C{  @Override public void validate(byte[] blockBuffer,int rowOffset,int rowHead,int blobTail){  int offset=rowOffset + offset();  int blobLen=BitsUtil.readInt16(blockBuffer,offset + 2);  int blobOffset=BitsUtil.readInt16(blockBuffer,offset);  if (blobLen == 0) {    return;  }  if (blobOffset < 0 || blobTail < blobOffset) {    throw new IllegalStateException(L.l("{0}: corrupted blob offset {1} with blobTail={2}",this,blobOffset,blobTail));  }  if ((blobLen & LARGE_BLOB_MASK) != 0) {    blobLen&=~LARGE_BLOB_MASK;    if (blobLen != 4) {      throw new IllegalStateException(L.l("{0}: corrupted blob len {1} for large blob.",this,blobOffset));    }  }  if (blobLen < 0 || blobTail < blobLen + blobOffset) {    throw new IllegalStateException(L.l("{0}: corrupted blob len {1} with blobOffset={2} blobTail={3}",this,blobLen,blobOffset,blobTail));  }}  }
class C{  public void parseArgumentsByteCode(Vertex expression,DataInputStream dataStream,Vertex type,Vertex pop,Network network) throws IOException {  long id=dataStream.readLong();  Object[] result=new Object[3];  result[0]=id;  while (id > 0) {    parseArgumentByteCode(result,dataStream,pop,network);    Vertex argument=(Vertex)result[2];    id=(Long)result[0];    if (argument != null) {      expression.addRelationship(type,argument,Integer.MAX_VALUE);    }  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(String.format("=================== PackingList : %s%n",this.uuid));  for (  Asset asset : this.assetList) {    sb.append(asset.toString());  }  return sb.toString();}  }
class C{  @Override public int cardinality(){  return (int)BitUtil.pop_array(bits,0,numWords);}  }
class C{  public int tpgid(){  return Integer.parseInt(fields[7]);}  }
class C{  public RegionNotFoundException(String msg){  super(msg);}  }
class C{  public String info(){  StringBuilder sb=new StringBuilder("Report: size: " + tableSize + ", elements: "+ elements+ ", loadFactor: "+ loadFactor+ ", threshold: "+ threshold);  sb.append(", empty bins:" + numEmpty);  int size=0;  int min=elements;  int max=-1;  for (int i=0; i < tableSize; i++) {    LinkedList<String> list=bins[i];    if (list != null) {      int sz=list.size();      size+=sz;      if (sz < min) {        min=sz;      }      if (sz > max) {        max=sz;      }    }  }  float avg=size;  int base=(tableSize - numEmpty);  if (base == 0) {    sb.append(", average:0");    sb.append(", minListSize:0");    sb.append(", maxListSize:0");  } else {    avg/=base;    sb.append(", average:" + avg);    sb.append(", minListSize:" + min);    sb.append(", maxListSize:" + max);  }  return sb.toString();}  }
class C{  public MbfsRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);}  }
class C{  public ImplRole(JSONObject data,ImplServer server,ImplDiscordAPI api){  this.server=server;  this.api=api;  id=data.getString("id");  name=data.getString("name");  permissions=new ImplPermissions(data.getInt("permissions"));  position=data.getInt("position");  color=new Color(data.getInt("color"));  hoist=data.getBoolean("hoist");  server.addRole(this);}  }
class C{  @LargeTest public void testMobileUpload() throws Exception {  assertTrue(hasMobileData());  uploadFile();}  }
class C{  @Override public boolean cloudletPause(int cloudletId){  boolean found=false;  int position=0;  for (  ResCloudlet rcl : getCloudletExecList()) {    if (rcl.getCloudletId() == cloudletId) {      found=true;      break;    }    position++;  }  if (found) {    ResCloudlet rcl=getCloudletExecList().remove(position);    if (rcl.getRemainingCloudletLength() == 0) {      cloudletFinish(rcl);    } else {      rcl.setCloudletStatus(Cloudlet.PAUSED);      getCloudletPausedList().add(rcl);    }    return true;  }  return false;}  }
class C{  public boolean isShowLocations(){  return showLocations;}  }
class C{  int fillWindow(CursorWindow window,int startPos,int requiredPos,boolean countAllRows){  acquireReference();  try {    window.acquireReference();    try {      int numRows=getSession().executeForCursorWindow(getSql(),getBindArgs(),window,startPos,requiredPos,countAllRows,getConnectionFlags(),mCancellationSignal);      return numRows;    } catch (    SQLiteDatabaseCorruptException ex) {      onCorruption();      throw ex;    }catch (    SQLiteException ex) {      Log.e(TAG,"exception: " + ex.getMessage() + "; query: "+ getSql());      throw ex;    } finally {      window.releaseReference();    }  }  finally {    releaseReference();  }}  }
class C{  private static int base64toInt(char c,byte[] alphaToInt){  int result=alphaToInt[c];  if (result < 0) {    throw new IllegalArgumentException("Illegal character " + c);  }  return result;}  }
class C{  protected static Agent createAgent(int rtpPort,boolean isTrickling,List<CandidateHarvester> harvesters) throws Throwable {  long startTime=System.currentTimeMillis();  Agent agent=new Agent();  agent.setTrickling(isTrickling);  if (harvesters == null) {    StunCandidateHarvester stunHarv=new StunCandidateHarvester(new TransportAddress("stun.jitsi.net",3478,Transport.UDP));    StunCandidateHarvester stun6Harv=new StunCandidateHarvester(new TransportAddress("stun6.jitsi.net",3478,Transport.UDP));    agent.addCandidateHarvester(stunHarv);    agent.addCandidateHarvester(stun6Harv);    String[] hostnames=new String[]{"stun.jitsi.net","stun6.jitsi.net"};    int port=3478;    LongTermCredential longTermCredential=new LongTermCredential("guest","anonymouspower!!");    for (    String hostname : hostnames)     agent.addCandidateHarvester(new TurnCandidateHarvester(new TransportAddress(hostname,port,Transport.UDP),longTermCredential));    agent.addCandidateHarvester(new UPNPHarvester());  } else {    for (    CandidateHarvester harvester : harvesters) {      agent.addCandidateHarvester(harvester);    }  }  createStream(rtpPort,"audio",agent);  createStream(rtpPort + 2,"video",agent);  long endTime=System.currentTimeMillis();  long total=endTime - startTime;  logger.info("Total harvesting time: " + total + "ms.");  return agent;}  }
class C{  protected static int toDigit(final char ch,final int index) throws IllegalArgumentException {  final int digit=Character.digit(ch,16);  if (digit == -1) {    throw new IllegalArgumentException("Illegal hexadecimal character " + ch + " at index "+ index);  }  return digit;}  }
class C{  public ActualControlFlowGraph computeActualCFG(){  BytecodeInstructionPool.getInstance(classLoader).logInstructionsIn(className,methodName);  ActualControlFlowGraph cfg=new ActualControlFlowGraph(rawGraph);  return cfg;}  }
class C{  public boolean canAbsorb(GlowBlock block,BlockFace face,ItemStack holding){  return false;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TGETTER__DECLARED_TYPE_REF:    return getDeclaredTypeRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static Date daysBefore(Date dateInst,int numDays){  if ((numDays <= 0) || (dateInst == null)) {    throw new IllegalArgumentException();  }  final Calendar cal=new GregorianCalendar();  cal.setTime(dateInst);  cal.add(Calendar.DAY_OF_YEAR,-numDays);  return cal.getTime();}  }
class C{  public boolean isEdgeOnly(){  return edgeOnly;}  }
class C{  public boolean isFLAG_OPERATION(){switch (value) {case CARRY_FROM_ADD:case NO_CARRY_FROM_ADD:case OVERFLOW_FROM_ADD:case NO_OVERFLOW_FROM_ADD:case BORROW_FROM_SUB:case NO_BORROW_FROM_SUB:case OVERFLOW_FROM_SUB:case NO_OVERFLOW_FROM_SUB:case BORROW_FROM_RSUB:case NO_BORROW_FROM_RSUB:case OVERFLOW_FROM_RSUB:case NO_OVERFLOW_FROM_RSUB:case BIT_TEST:case NO_BIT_TEST:case RBIT_TEST:case NO_RBIT_TEST:case OVERFLOW_FROM_MUL:case NO_OVERFLOW_FROM_MUL:    return true;default :  return false;}}  }
class C{  public void addPoint(int id,AreaPanel prevAp,int prevX,int prevY,int x,int y,int lastTimeSec,int timeSec,double dist){  if (getDepth() == 0) {  } else {    int depth=getDepth();    int xIndex=(x - getX()) / (DEPTH_TO_WIDTH[depth - 1]);    int yIndex=(y - getY()) / (DEPTH_TO_WIDTH[depth - 1]);    int index=xIndex + yIndex * NUM_SUB_PANELS_PER_SIDE;    if (getSubAreaPanelFk(index) == Integer.MIN_VALUE) {      AreaPanel childAreaPanel=GTG.apCache.newRow();      childAreaPanel.setData(getX() + xIndex * DEPTH_TO_WIDTH[depth - 1],getY() + yIndex * DEPTH_TO_WIDTH[depth - 1],depth - 1);      AreaPanel subPrevAp=null;      if (prevAp != null) {        subPrevAp=prevAp.getSubAreaPanel(prevX,prevY);        if (subPrevAp == null)         throw new CacheException("What? why is there a prevAp but not a subPrevAp? " + prevAp + " prevX "+ prevX+ " prevY "+ prevY);      }      childAreaPanel.addPoint(id,prevAp == null ? null : subPrevAp,prevX,prevY,x,y,lastTimeSec,timeSec,dist);      setSubAreaPanelFk(index,childAreaPanel.id);    } else {      getSubAreaPanel(index).addPoint(id,prevAp.getSubAreaPanel(prevX,prevY),prevX,prevY,x,y,lastTimeSec,timeSec,dist);    }  }  int prevApIdToUse=(prevAp == null ? Integer.MIN_VALUE : prevAp.id);  if (getTimeTreeFk() == Integer.MIN_VALUE) {    setTimeTreeFk(TimeTree.createTimeTreeForGpsPoint(lastTimeSec + 1,timeSec + 1,prevApIdToUse,dist).id);  } else {    TimeTree tt=getTimeTree();    if (tt.getMaxTimeSecs() >= lastTimeSec)     setTimeTreeFk(tt.addSegmentForPoint(tt.getMaxTimeSecs(),timeSec + 1,prevApIdToUse,dist).id); else     setTimeTreeFk(tt.addSegmentForPoint(lastTimeSec + 1,timeSec + 1,prevApIdToUse,dist).id);  }  if (prevAp != null && prevAp != this) {    TimeTree tt=prevAp.getTimeTree();    tt.extendTimeTree(timeSec - 1,0,false);    tt.setNextApIdForThisAndAllChildren(this.id);  }}  }
class C{  public boolean isCriticalExtension(){  return critical;}  }
class C{  public void measureTimer(){  System.out.printf("                                  measured\n");  System.out.printf("timer delay   iterations   total time   per-delay\n");  for (sleepTime=0; sleepTime <= 20; ++sleepTime) {    iterations=(sleepTime == 0) ? 1000 : (1000 / sleepTime);    timerIteration=1;    timer=new Timer(sleepTime,this);    startTime=System.nanoTime();    timer.start();    while (timerIteration > 0) {      try {        Thread.sleep(1000);      } catch (      Exception e) {      }    }  }}  }
class C{  public Location(double latitude,double longitude,Date date){  this.latitude=latitude;  this.longitude=longitude;  this.date=date;}  }
class C{  public Rect updateFastScrollerBounds(int lastTouchY){  mInvalidateRect.set(mBgBounds);  if (isVisible()) {    int edgePadding=mRv.getMaxScrollbarWidth();    int bgPadding=(mBgOriginalSize - mTextBounds.height()) / 2;    int bgHeight=mBgOriginalSize;    int bgWidth=Math.max(mBgOriginalSize,mTextBounds.width() + (2 * bgPadding));    if (Utilities.isRtl(mRes)) {      mBgBounds.left=mRv.getBackgroundPadding().left + (2 * mRv.getMaxScrollbarWidth());      mBgBounds.right=mBgBounds.left + bgWidth;    } else {      mBgBounds.right=mRv.getWidth() - mRv.getBackgroundPadding().right - (2 * mRv.getMaxScrollbarWidth());      mBgBounds.left=mBgBounds.right - bgWidth;    }    mBgBounds.top=lastTouchY - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight);    mBgBounds.top=Math.max(edgePadding,Math.min(mBgBounds.top,mRv.getHeight() - edgePadding - bgHeight));    mBgBounds.bottom=mBgBounds.top + bgHeight;  } else {    mBgBounds.setEmpty();  }  mInvalidateRect.union(mBgBounds);  return mInvalidateRect;}  }
class C{  public void writeComment(Object comment) throws IOException {  if (comment == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  closeStartIfNecessary();  writer.write("<!-- ");  writer.write(comment.toString());  writer.write(" -->");}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  @SuppressWarnings("fallthrough") public void applyPattern(String pattern){  StringBuilder[] segments=new StringBuilder[4];  segments[SEG_RAW]=new StringBuilder();  int part=SEG_RAW;  int formatNumber=0;  boolean inQuote=false;  int braceStack=0;  maxOffset=-1;  for (int i=0; i < pattern.length(); ++i) {    char ch=pattern.charAt(i);    if (part == SEG_RAW) {      if (ch == '\'') {        if (i + 1 < pattern.length() && pattern.charAt(i + 1) == '\'') {          segments[part].append(ch);          ++i;        } else {          inQuote=!inQuote;        }      } else       if (ch == '{' && !inQuote) {        part=SEG_INDEX;        if (segments[SEG_INDEX] == null) {          segments[SEG_INDEX]=new StringBuilder();        }      } else {        segments[part].append(ch);      }    } else {      if (inQuote) {        segments[part].append(ch);        if (ch == '\'') {          inQuote=false;        }      } else {switch (ch) {case ',':          if (part < SEG_MODIFIER) {            if (segments[++part] == null) {              segments[part]=new StringBuilder();            }          } else {            segments[part].append(ch);          }        break;case '{':      ++braceStack;    segments[part].append(ch);  break;case '}':if (braceStack == 0) {  part=SEG_RAW;  makeFormat(i,formatNumber,segments);  formatNumber++;  segments[SEG_INDEX]=null;  segments[SEG_TYPE]=null;  segments[SEG_MODIFIER]=null;} else {  --braceStack;  segments[part].append(ch);}break;case ' ':if (part != SEG_TYPE || segments[SEG_TYPE].length() > 0) {segments[part].append(ch);}break;case '\'':inQuote=true;default :segments[part].append(ch);break;}}}}if (braceStack == 0 && part != 0) {maxOffset=-1;throw new IllegalArgumentException("Unmatched braces in the pattern.");}this.pattern=segments[0].toString();}  }
class C{  private void cmd_testApps(){  setBusy(true);  Exception e=m_cc.testAppsServer();  if (e != null) {    JOptionPane.showMessageDialog(this,e.getLocalizedMessage(),res.getString("ServerNotActive") + " - " + m_cc.getAppsHost(),JOptionPane.ERROR_MESSAGE);  }  setBusy(false);}  }
class C{  public static Date parseDate(final String dateValue,String[] dateFormats) throws IllegalArgumentException {  return parseDate(dateValue,dateFormats,null);}  }
class C{  public static InputStream openStream(InputStream in) throws IOException {  byte[] bom=new byte[3];  in.read(bom,0,3);  if (bom[0] == 0xef && bom[1] == 0xbb && bom[2] == 0xbf) {    return in;  } else {    return new BOMInputStream(bom,in);  }}  }
class C{  public void removeProcedure(String name){  if (procedures != null) {    procedures.remove(name);  }}  }
class C{  public void done(){  logRecord.done();  logRecord=null;}  }
class C{  @ReflectiveCtor public ValueProperty(FilePosition pos,Void value,List<? extends Expression> children){  super(pos,(StringLiteral)children.get(0),children.get(1));}  }
class C{  public State state(){  return state;}  }
class C{  public Pan(AbstractChart chart){  super(chart);}  }
class C{  protected ArrayList<ClassificationResult<BytesRef>> normClassificationResults(List<ClassificationResult<BytesRef>> assignedClasses){  ArrayList<ClassificationResult<BytesRef>> returnList=new ArrayList<>();  if (!assignedClasses.isEmpty()) {    Collections.sort(assignedClasses);    double smax=assignedClasses.get(0).getScore();    double sumLog=0;    for (    ClassificationResult<BytesRef> cr : assignedClasses) {      sumLog+=Math.exp(cr.getScore() - smax);    }    double loga=smax;    loga+=Math.log(sumLog);    for (    ClassificationResult<BytesRef> cr : assignedClasses) {      double scoreDiff=cr.getScore() - loga;      returnList.add(new ClassificationResult<>(cr.getAssignedClass(),Math.exp(scoreDiff)));    }  }  return returnList;}  }
class C{  @Override public void updateClob(int columnIndex,Clob x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateClob(" + columnIndex + ", x);");    }    checkClosed();    Value v;    if (x == null) {      v=ValueNull.INSTANCE;    } else {      v=conn.createClob(x.getCharacterStream(),-1);    }    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,new int[]{},new ECBlocks(7,new ECB(1,19)),new ECBlocks(10,new ECB(1,16)),new ECBlocks(13,new ECB(1,13)),new ECBlocks(17,new ECB(1,9))),new Version(2,new int[]{6,18},new ECBlocks(10,new ECB(1,34)),new ECBlocks(16,new ECB(1,28)),new ECBlocks(22,new ECB(1,22)),new ECBlocks(28,new ECB(1,16))),new Version(3,new int[]{6,22},new ECBlocks(15,new ECB(1,55)),new ECBlocks(26,new ECB(1,44)),new ECBlocks(18,new ECB(2,17)),new ECBlocks(22,new ECB(2,13))),new Version(4,new int[]{6,26},new ECBlocks(20,new ECB(1,80)),new ECBlocks(18,new ECB(2,32)),new ECBlocks(26,new ECB(2,24)),new ECBlocks(16,new ECB(4,9))),new Version(5,new int[]{6,30},new ECBlocks(26,new ECB(1,108)),new ECBlocks(24,new ECB(2,43)),new ECBlocks(18,new ECB(2,15),new ECB(2,16)),new ECBlocks(22,new ECB(2,11),new ECB(2,12))),new Version(6,new int[]{6,34},new ECBlocks(18,new ECB(2,68)),new ECBlocks(16,new ECB(4,27)),new ECBlocks(24,new ECB(4,19)),new ECBlocks(28,new ECB(4,15))),new Version(7,new int[]{6,22,38},new ECBlocks(20,new ECB(2,78)),new ECBlocks(18,new ECB(4,31)),new ECBlocks(18,new ECB(2,14),new ECB(4,15)),new ECBlocks(26,new ECB(4,13),new ECB(1,14))),new Version(8,new int[]{6,24,42},new ECBlocks(24,new ECB(2,97)),new ECBlocks(22,new ECB(2,38),new ECB(2,39)),new ECBlocks(22,new ECB(4,18),new ECB(2,19)),new ECBlocks(26,new ECB(4,14),new ECB(2,15))),new Version(9,new int[]{6,26,46},new ECBlocks(30,new ECB(2,116)),new ECBlocks(22,new ECB(3,36),new ECB(2,37)),new ECBlocks(20,new ECB(4,16),new ECB(4,17)),new ECBlocks(24,new ECB(4,12),new ECB(4,13))),new Version(10,new int[]{6,28,50},new ECBlocks(18,new ECB(2,68),new ECB(2,69)),new ECBlocks(26,new ECB(4,43),new ECB(1,44)),new ECBlocks(24,new ECB(6,19),new ECB(2,20)),new ECBlocks(28,new ECB(6,15),new ECB(2,16))),new Version(11,new int[]{6,30,54},new ECBlocks(20,new ECB(4,81)),new ECBlocks(30,new ECB(1,50),new ECB(4,51)),new ECBlocks(28,new ECB(4,22),new ECB(4,23)),new ECBlocks(24,new ECB(3,12),new ECB(8,13))),new Version(12,new int[]{6,32,58},new ECBlocks(24,new ECB(2,92),new ECB(2,93)),new ECBlocks(22,new ECB(6,36),new ECB(2,37)),new ECBlocks(26,new ECB(4,20),new ECB(6,21)),new ECBlocks(28,new ECB(7,14),new ECB(4,15))),new Version(13,new int[]{6,34,62},new ECBlocks(26,new ECB(4,107)),new ECBlocks(22,new ECB(8,37),new ECB(1,38)),new ECBlocks(24,new ECB(8,20),new ECB(4,21)),new ECBlocks(22,new ECB(12,11),new ECB(4,12))),new Version(14,new int[]{6,26,46,66},new ECBlocks(30,new ECB(3,115),new ECB(1,116)),new ECBlocks(24,new ECB(4,40),new ECB(5,41)),new ECBlocks(20,new ECB(11,16),new ECB(5,17)),new ECBlocks(24,new ECB(11,12),new ECB(5,13))),new Version(15,new int[]{6,26,48,70},new ECBlocks(22,new ECB(5,87),new ECB(1,88)),new ECBlocks(24,new ECB(5,41),new ECB(5,42)),new ECBlocks(30,new ECB(5,24),new ECB(7,25)),new ECBlocks(24,new ECB(11,12),new ECB(7,13))),new Version(16,new int[]{6,26,50,74},new ECBlocks(24,new ECB(5,98),new ECB(1,99)),new ECBlocks(28,new ECB(7,45),new ECB(3,46)),new ECBlocks(24,new ECB(15,19),new ECB(2,20)),new ECBlocks(30,new ECB(3,15),new ECB(13,16))),new Version(17,new int[]{6,30,54,78},new ECBlocks(28,new ECB(1,107),new ECB(5,108)),new ECBlocks(28,new ECB(10,46),new ECB(1,47)),new ECBlocks(28,new ECB(1,22),new ECB(15,23)),new ECBlocks(28,new ECB(2,14),new ECB(17,15))),new Version(18,new int[]{6,30,56,82},new ECBlocks(30,new ECB(5,120),new ECB(1,121)),new ECBlocks(26,new ECB(9,43),new ECB(4,44)),new ECBlocks(28,new ECB(17,22),new ECB(1,23)),new ECBlocks(28,new ECB(2,14),new ECB(19,15))),new Version(19,new int[]{6,30,58,86},new ECBlocks(28,new ECB(3,113),new ECB(4,114)),new ECBlocks(26,new ECB(3,44),new ECB(11,45)),new ECBlocks(26,new ECB(17,21),new ECB(4,22)),new ECBlocks(26,new ECB(9,13),new ECB(16,14))),new Version(20,new int[]{6,34,62,90},new ECBlocks(28,new ECB(3,107),new ECB(5,108)),new ECBlocks(26,new ECB(3,41),new ECB(13,42)),new ECBlocks(30,new ECB(15,24),new ECB(5,25)),new ECBlocks(28,new ECB(15,15),new ECB(10,16))),new Version(21,new int[]{6,28,50,72,94},new ECBlocks(28,new ECB(4,116),new ECB(4,117)),new ECBlocks(26,new ECB(17,42)),new ECBlocks(28,new ECB(17,22),new ECB(6,23)),new ECBlocks(30,new ECB(19,16),new ECB(6,17))),new Version(22,new int[]{6,26,50,74,98},new ECBlocks(28,new ECB(2,111),new ECB(7,112)),new ECBlocks(28,new ECB(17,46)),new ECBlocks(30,new ECB(7,24),new ECB(16,25)),new ECBlocks(24,new ECB(34,13))),new Version(23,new int[]{6,30,54,78,102},new ECBlocks(30,new ECB(4,121),new ECB(5,122)),new ECBlocks(28,new ECB(4,47),new ECB(14,48)),new ECBlocks(30,new ECB(11,24),new ECB(14,25)),new ECBlocks(30,new ECB(16,15),new ECB(14,16))),new Version(24,new int[]{6,28,54,80,106},new ECBlocks(30,new ECB(6,117),new ECB(4,118)),new ECBlocks(28,new ECB(6,45),new ECB(14,46)),new ECBlocks(30,new ECB(11,24),new ECB(16,25)),new ECBlocks(30,new ECB(30,16),new ECB(2,17))),new Version(25,new int[]{6,32,58,84,110},new ECBlocks(26,new ECB(8,106),new ECB(4,107)),new ECBlocks(28,new ECB(8,47),new ECB(13,48)),new ECBlocks(30,new ECB(7,24),new ECB(22,25)),new ECBlocks(30,new ECB(22,15),new ECB(13,16))),new Version(26,new int[]{6,30,58,86,114},new ECBlocks(28,new ECB(10,114),new ECB(2,115)),new ECBlocks(28,new ECB(19,46),new ECB(4,47)),new ECBlocks(28,new ECB(28,22),new ECB(6,23)),new ECBlocks(30,new ECB(33,16),new ECB(4,17))),new Version(27,new int[]{6,34,62,90,118},new ECBlocks(30,new ECB(8,122),new ECB(4,123)),new ECBlocks(28,new ECB(22,45),new ECB(3,46)),new ECBlocks(30,new ECB(8,23),new ECB(26,24)),new ECBlocks(30,new ECB(12,15),new ECB(28,16))),new Version(28,new int[]{6,26,50,74,98,122},new ECBlocks(30,new ECB(3,117),new ECB(10,118)),new ECBlocks(28,new ECB(3,45),new ECB(23,46)),new ECBlocks(30,new ECB(4,24),new ECB(31,25)),new ECBlocks(30,new ECB(11,15),new ECB(31,16))),new Version(29,new int[]{6,30,54,78,102,126},new ECBlocks(30,new ECB(7,116),new ECB(7,117)),new ECBlocks(28,new ECB(21,45),new ECB(7,46)),new ECBlocks(30,new ECB(1,23),new ECB(37,24)),new ECBlocks(30,new ECB(19,15),new ECB(26,16))),new Version(30,new int[]{6,26,52,78,104,130},new ECBlocks(30,new ECB(5,115),new ECB(10,116)),new ECBlocks(28,new ECB(19,47),new ECB(10,48)),new ECBlocks(30,new ECB(15,24),new ECB(25,25)),new ECBlocks(30,new ECB(23,15),new ECB(25,16))),new Version(31,new int[]{6,30,56,82,108,134},new ECBlocks(30,new ECB(13,115),new ECB(3,116)),new ECBlocks(28,new ECB(2,46),new ECB(29,47)),new ECBlocks(30,new ECB(42,24),new ECB(1,25)),new ECBlocks(30,new ECB(23,15),new ECB(28,16))),new Version(32,new int[]{6,34,60,86,112,138},new ECBlocks(30,new ECB(17,115)),new ECBlocks(28,new ECB(10,46),new ECB(23,47)),new ECBlocks(30,new ECB(10,24),new ECB(35,25)),new ECBlocks(30,new ECB(19,15),new ECB(35,16))),new Version(33,new int[]{6,30,58,86,114,142},new ECBlocks(30,new ECB(17,115),new ECB(1,116)),new ECBlocks(28,new ECB(14,46),new ECB(21,47)),new ECBlocks(30,new ECB(29,24),new ECB(19,25)),new ECBlocks(30,new ECB(11,15),new ECB(46,16))),new Version(34,new int[]{6,34,62,90,118,146},new ECBlocks(30,new ECB(13,115),new ECB(6,116)),new ECBlocks(28,new ECB(14,46),new ECB(23,47)),new ECBlocks(30,new ECB(44,24),new ECB(7,25)),new ECBlocks(30,new ECB(59,16),new ECB(1,17))),new Version(35,new int[]{6,30,54,78,102,126,150},new ECBlocks(30,new ECB(12,121),new ECB(7,122)),new ECBlocks(28,new ECB(12,47),new ECB(26,48)),new ECBlocks(30,new ECB(39,24),new ECB(14,25)),new ECBlocks(30,new ECB(22,15),new ECB(41,16))),new Version(36,new int[]{6,24,50,76,102,128,154},new ECBlocks(30,new ECB(6,121),new ECB(14,122)),new ECBlocks(28,new ECB(6,47),new ECB(34,48)),new ECBlocks(30,new ECB(46,24),new ECB(10,25)),new ECBlocks(30,new ECB(2,15),new ECB(64,16))),new Version(37,new int[]{6,28,54,80,106,132,158},new ECBlocks(30,new ECB(17,122),new ECB(4,123)),new ECBlocks(28,new ECB(29,46),new ECB(14,47)),new ECBlocks(30,new ECB(49,24),new ECB(10,25)),new ECBlocks(30,new ECB(24,15),new ECB(46,16))),new Version(38,new int[]{6,32,58,84,110,136,162},new ECBlocks(30,new ECB(4,122),new ECB(18,123)),new ECBlocks(28,new ECB(13,46),new ECB(32,47)),new ECBlocks(30,new ECB(48,24),new ECB(14,25)),new ECBlocks(30,new ECB(42,15),new ECB(32,16))),new Version(39,new int[]{6,26,54,82,110,138,166},new ECBlocks(30,new ECB(20,117),new ECB(4,118)),new ECBlocks(28,new ECB(40,47),new ECB(7,48)),new ECBlocks(30,new ECB(43,24),new ECB(22,25)),new ECBlocks(30,new ECB(10,15),new ECB(67,16))),new Version(40,new int[]{6,30,58,86,114,142,170},new ECBlocks(30,new ECB(19,118),new ECB(6,119)),new ECBlocks(28,new ECB(18,47),new ECB(31,48)),new ECBlocks(30,new ECB(34,24),new ECB(34,25)),new ECBlocks(30,new ECB(20,15),new ECB(61,16)))};}  }
class C{  private void editNodeLocations(Map<GraphNode,Point2D> nodeLocations){  editNodeLocations(nodeLocations,null);}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (decoder != null) {      decoder.reset();    }    decoder=null;    if (in != null) {      in.close();      in=null;    }  }}  }
class C{  public static Request newGet(){  return new Request(Code.GET);}  }
class C{  public synchronized void addParameter(Parameter<?> option,String value,int bits,int depth){  parameters.add(new Node(option,value,bits,depth));}  }
class C{  public int update(Attendee attendee){  return updateTableRow(Attendee.uri,attendee);}  }
class C{  public List<String> listUsers(){  List<String> users=new ArrayList<String>(1000);  ScanResult result=ddb.scan(new ScanRequest().withTableName(USER_TABLE).withLimit(1000));  for (  Map<String,AttributeValue> item : result.getItems()) {    String s="";    for (    Entry<String,AttributeValue> entry : item.entrySet()) {      s+=" ** " + entry.getKey() + " = "+ entry.getValue().getS();    }    users.add(s);  }  return users;}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  public void deleteCookie(Cookie cookie){  String name=cookie.getName() + cookie.getDomain();  cookies.remove(name);  SharedPreferences.Editor prefsWriter=cookiePrefs.edit();  prefsWriter.remove(COOKIE_NAME_PREFIX + name);  prefsWriter.commit();}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);  List<Category> allCategories=categoryService.getCategoriesOrderedByNoOfPodcasts();  model.addAttribute("allCategories",allCategories);  model.addAttribute("mediaTypes",MediaType.values());  model.addAttribute("languageCodes",LanguageCode.values());  model.addAttribute("updateFrequencies",UpdateFrequencyType.values());}  }
class C{  public static <T>Flux<T> observableToFlux(Observable<T> source,BackpressureStrategy strategy){  return flowableToFlux(source.toFlowable(strategy));}  }
class C{  public Builder(){  localeBuilder=new InternalLocaleBuilder();}  }
class C{  public StateInfo(){}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x383E9FA8,version=271) public int sceUsbCamGetSaturation(TPointer32 saturationAddr){  saturationAddr.setValue(saturation);  return 0;}  }
class C{  public FunctionTree(final JDialog parent,final Module module){  setModel(new FilteredTreeModel(parent,module));  setRootVisible(false);  setCellRenderer(new IconNodeRenderer());  addMouseListener(new InternalMouseListener());}  }
class C{  public static Entity stackingViolation(IGame game,Entity entering,Coords origPosition,int elevation,Coords dest,Entity transport){  if (!game.getBoard().onGround()) {    return null;  }  if (entering.isAirborne()) {    return null;  }  boolean isMech=(entering instanceof Mech) || (entering instanceof SmallCraft);  boolean isLargeSupport=(entering instanceof LargeSupportTank) || (entering instanceof Dropship) || ((entering instanceof Mech) && ((Mech)entering).isSuperHeavy());  boolean isDropship=entering instanceof Dropship;  boolean isInfantry=entering instanceof Infantry;  Entity firstEntity=transport;  int totalUnits=1;  Vector<Coords> positions=new Vector<Coords>();  positions.add(dest);  if (isDropship) {    for (int dir=0; dir < 6; dir++) {      positions.add(dest.translated(dir));    }  }  for (  Coords coords : positions) {    int thisLowStackingLevel=elevation;    if ((coords != null) && (origPosition != null)) {      thisLowStackingLevel=entering.calcElevation(game.getBoard().getHex(origPosition),game.getBoard().getHex(coords),elevation,entering.climbMode(),false);    }    int thisHighStackingLevel=thisLowStackingLevel;    if (!Compute.isInBuilding(game,entering,coords)) {      thisHighStackingLevel+=entering.height();    }    for (    Entity inHex : game.getEntitiesVector(coords)) {      if (inHex.isAirborne()) {        continue;      }      int lowStackingLevel=inHex.getElevation();      int highStackingLevel=lowStackingLevel;      if (!Compute.isInBuilding(game,inHex)) {        highStackingLevel+=inHex.height();      }      if ((thisLowStackingLevel <= highStackingLevel) && (thisHighStackingLevel >= lowStackingLevel)) {        if (inHex.equals(entering)) {          continue;        }        if (inHex.equals(transport)) {          continue;        }        if (inHex.isMakingDfa()) {          continue;        }        if (isMech && (((inHex instanceof Mech) && (inHex.getGrappled() != entering.getId() || inHex.isChainWhipGrappled())) || (inHex instanceof SmallCraft))) {          return inHex;        }        if (isLargeSupport && !(inHex instanceof Infantry)) {          return inHex;        }        if (((inHex instanceof LargeSupportTank) || (inHex instanceof Dropship) || ((inHex instanceof Mech) && ((Mech)inHex).isSuperHeavy())) && !isInfantry) {          return inHex;        }        totalUnits++;        if (totalUnits > 4) {          return inHex;        }        if (!inHex.getOwner().isEnemyOf(entering.getOwner())) {          if (firstEntity == null) {            firstEntity=inHex;          } else {            return Compute.d6() > 3 ? firstEntity : inHex;          }        }      }    }  }  return null;}  }
class C{  private boolean checkInputMethodSelectionKey(KeyEvent event){  if (inputMethodSelectionKey != null) {    AWTKeyStroke aKeyStroke=AWTKeyStroke.getAWTKeyStrokeForEvent(event);    return inputMethodSelectionKey.equals(aKeyStroke);  } else {    return false;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return DShowTVPlayer.getDscalerPlugin();}  }
class C{  public static void apply(int gravity,int w,int h,Rect container,int xAdj,int yAdj,Rect outRect,int layoutDirection){  int absGravity=getAbsoluteGravity(gravity,layoutDirection);  apply(absGravity,w,h,container,xAdj,yAdj,outRect);}  }
class C{  @Override protected void sendFunctionGroup1(){  XNetMessage msg=XNetMessage.getFunctionGroup1OpsMsg(this.getDccAddress(),f0,f1,f2,f3,f4);  queueMessage(msg,THROTTLEFUNCSENT);}  }
class C{  public void play(int musicID){  if (musicMap.containsValue(musicID)) {    soundPool.play(musicID,UIdefaultData.defaultMusicVolume,UIdefaultData.defaultMusicVolume,0,0,1);  }}  }
class C{  private void uninstallWindowListeners(JRootPane root){  if (window != null) {    window.removeMouseListener(mouseInputListener);    window.removeMouseMotionListener(mouseInputListener);  }}  }
class C{  protected static Vector convertToVector(Object[] anArray){  if (anArray == null) {    return null;  }  Vector<Object> v=new Vector<Object>(anArray.length);  for (  Object o : anArray) {    v.addElement(o);  }  return v;}  }
class C{  protected boolean joinsWith(final BS bs,final IKeyBuilder keyBuilder,final HTree htree){  final int hashCode=bs.hashCode;  final byte[] key=keyBuilder.reset().append(hashCode).getKey();  if (!htree.contains(key)) {    return false;  }  final ITupleIterator<?> titr=htree.lookupAll(key);  while (titr.hasNext()) {    final ITuple<?> t=titr.next();    final IBindingSet joinCandidate=decodeSolution(t);    if (BOpContext.bind(bs.bset,joinCandidate,null,getSelectVars()) != null) {      return true;    }  }  return false;}  }
class C{  public boolean grab(Spatial spat,Vector3 pos){  if (mouseButton != 1) {    return (false);  }  movable=findMovable(spat);  spat=movable;  while (!(spat instanceof MapElement) && (spat != null)) {    spat=spat.getParent();  }  MapElementsView view=ConfigurationManager.getInstance().getCurrentConfiguration().getMapElementsView();  if (view != null)   view.selectMapElement((MapElement)spat);  return (hasMouse());}  }
class C{  public void stem(){  k=i - 1;  if (k > 1) {    step1();    step2();    step3();    step4();    step5();    step6();  }  i_end=k + 1;  i=0;}  }
class C{  private static CodeArray generateStackTrampolineBridgeInstructions(){  if (VM.VerifyAssertions) {    VM._assert(NUM_NONVOLATILE_FPRS == 0);  }  if (VM.BuildFor64Addr) {    Assembler asm=new Assembler(0);    asm.emitINT_Imm(TRAP_UNKNOWN + RVM_TRAP_BASE);    return asm.getMachineCodes();  }  Assembler asm=new Assembler(0);  asm.emitPUSH_RegDisp(TR,ArchEntrypoints.hijackedReturnAddressField.getOffset());  for (int i=0; i < NUM_GPRS; i++) {    asm.emitPUSH_Reg(ALL_GPRS[i]);  }  asm.emitPUSH_RegDisp(TR,ArchEntrypoints.framePointerField.getOffset());  asm.generateJTOCcall(Entrypoints.returnBarrierMethod.getOffset());  asm.emitPOP_RegDisp(TR,ArchEntrypoints.framePointerField.getOffset());  for (int i=NUM_GPRS - 1; i >= 0; i--) {    asm.emitPOP_Reg(ALL_GPRS[i]);  }  asm.emitRET();  return asm.getMachineCodes();}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (e.getSource() == m_AddBut) {    m_Editing=false;    if (m_PD == null) {      int x=getLocationOnScreen().x;      int y=getLocationOnScreen().y;      if (PropertyDialog.getParentDialog(this) != null) {        m_PD=new PropertyDialog(PropertyDialog.getParentDialog(this),m_ClassifierEditor,x,y);      } else {        m_PD=new PropertyDialog(PropertyDialog.getParentFrame(this),m_ClassifierEditor,x,y);      }      m_PD.setVisible(true);    } else {      m_PD.setVisible(true);    }  } else   if (e.getSource() == m_EditBut) {    if (m_List.getSelectedValue() != null) {      m_ClassifierEditor.setClassType(weka.classifiers.Classifier.class);      m_ClassifierEditor.setValue(m_List.getSelectedValue());      m_Editing=true;      if (m_PD == null) {        int x=getLocationOnScreen().x;        int y=getLocationOnScreen().y;        if (PropertyDialog.getParentDialog(this) != null) {          m_PD=new PropertyDialog(PropertyDialog.getParentDialog(this),m_ClassifierEditor,x,y);        } else {          m_PD=new PropertyDialog(PropertyDialog.getParentFrame(this),m_ClassifierEditor,x,y);        }        m_PD.setVisible(true);      } else {        m_PD.setVisible(true);      }    }  } else   if (e.getSource() == m_DeleteBut) {    int[] selected=m_List.getSelectedIndices();    if (selected != null) {      for (int i=selected.length - 1; i >= 0; i--) {        int current=selected[i];        m_AlgorithmListModel.removeElementAt(current);        if (m_Exp.getDatasets().size() > current) {          m_List.setSelectedIndex(current);        } else {          m_List.setSelectedIndex(current - 1);        }      }    }    if (m_List.getSelectedIndex() == -1) {      m_EditBut.setEnabled(false);      m_DeleteBut.setEnabled(false);      m_LoadOptionsBut.setEnabled(false);      m_SaveOptionsBut.setEnabled(false);      m_UpBut.setEnabled(false);      m_DownBut.setEnabled(false);    }    updateExperiment();  } else   if (e.getSource() == m_LoadOptionsBut) {    if (m_List.getSelectedValue() != null) {      int returnVal=m_FileChooser.showOpenDialog(this);      if (returnVal == JFileChooser.APPROVE_OPTION) {        try {          File file=m_FileChooser.getSelectedFile();          if (!file.getAbsolutePath().toLowerCase().endsWith(".xml")) {            file=new File(file.getAbsolutePath() + ".xml");          }          XMLClassifier xmlcls=new XMLClassifier();          Classifier c=(Classifier)xmlcls.read(file);          m_AlgorithmListModel.setElementAt(c,m_List.getSelectedIndex());          updateExperiment();        } catch (        Exception ex) {          ex.printStackTrace();        }      }    }  } else   if (e.getSource() == m_SaveOptionsBut) {    if (m_List.getSelectedValue() != null) {      int returnVal=m_FileChooser.showSaveDialog(this);      if (returnVal == JFileChooser.APPROVE_OPTION) {        try {          File file=m_FileChooser.getSelectedFile();          if (!file.getAbsolutePath().toLowerCase().endsWith(".xml")) {            file=new File(file.getAbsolutePath() + ".xml");          }          XMLClassifier xmlcls=new XMLClassifier();          xmlcls.write(file,m_List.getSelectedValue());        } catch (        Exception ex) {          ex.printStackTrace();        }      }    }  } else   if (e.getSource() == m_UpBut) {    JListHelper.moveUp(m_List);    updateExperiment();  } else   if (e.getSource() == m_DownBut) {    JListHelper.moveDown(m_List);    updateExperiment();  }}  }
class C{  @Override public Value concatenate(Value v){  if (v instanceof DoubleVal) {    return new DoubleVal(d + ((DoubleVal)v).getDouble());  } else   if (v instanceof StringVal) {    return ValueFactory.create(toString() + " " + v.toString());  } else   if (v instanceof NoneVal) {    return this;  } else {    log.warning("cannot concatenate " + this + " and "+ v);    return ValueFactory.noneValue;  }}  }
class C{  @Override public void process(Boolean tuple){  if (!result) {    if (tuple) {      mergedport.emit(true);    }    result=true;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  public PathHandler(Path path){  this();  setPath(path);  init();}  }
class C{  public static long string2long(String s,int radix) throws NumberFormatException {  if (radix == 10) {    return Long.parseLong(s,radix);  } else {    char[] cs=s.toCharArray();    long limit=Long.MAX_VALUE / (radix / 2);    long n=0;    for (int i=0; i < cs.length; i++) {      int d=Character.digit(cs[i],radix);      if (n < 0 || n > limit || n * radix > Long.MAX_VALUE - d)       throw new NumberFormatException();      n=n * radix + d;    }    return n;  }}  }
class C{  @Override public void run(){  amIActive=true;  String dataImageHeader=null;  String featureImageHeader=null;  String outputHeader=null;  WhiteboxRasterInfo dataImage;  WhiteboxRasterInfo featureImage;  WhiteboxRaster output;  int cols, rows;  double imageTotal=0;  long imageN=0;  double imageAverage=0;  double imageTotalDeviation=0;  double stdDeviation=0;  float progress=0;  int col, row;  int i;  String statType=null;  boolean textOutput=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      dataImageHeader=args[i];    } else     if (i == 1) {      featureImageHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      statType=args[i].toLowerCase();    } else     if (i == 4) {      textOutput=Boolean.parseBoolean(args[i]);    }  }  if ((dataImageHeader == null) || (featureImageHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dataImage=new WhiteboxRasterInfo(dataImageHeader);    rows=dataImage.getNumberRows();    cols=dataImage.getNumberColumns();    double noData=dataImage.getNoDataValue();    featureImage=new WhiteboxRasterInfo(featureImageHeader);    if (featureImage.getNumberColumns() != cols || featureImage.getNumberRows() != rows) {      showFeedback("Input images must have the same dimensions (i.e. rows and columns).");      return;    }    double featureNoData=featureImage.getNoDataValue();    String featureImageShortName=featureImage.getShortHeaderFile();    String dataImageShortName=dataImage.getShortHeaderFile();    int numFeatures=0;    double[] featureData;    double[] data;    int minFeatureID=99999999;    int maxFeatureID=-99999999;    for (row=0; row < rows; row++) {      featureData=featureImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (featureData[col] != featureNoData) {          if (Math.rint(featureData[col]) != featureData[col]) {            showFeedback("The feature definition image should " + "contain integer values only.");            return;          }          if ((int)featureData[col] < minFeatureID) {            minFeatureID=(int)featureData[col];          }          if ((int)featureData[col] > maxFeatureID) {            maxFeatureID=(int)featureData[col];          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    numFeatures=maxFeatureID - minFeatureID + 1;    double[] featureTotal=new double[numFeatures];    long[] featureN=new long[numFeatures];    double[] featureAverage=new double[numFeatures];    double[] featureTotalDeviation=new double[numFeatures];    double[] featureStdDeviation=new double[numFeatures];    double[] featureMins=new double[numFeatures];    double[] featureMaxs=new double[numFeatures];    boolean[] featurePresent=new boolean[numFeatures];    for (i=0; i < numFeatures; i++) {      featureMins[i]=99999999;      featureMaxs[i]=-99999999;    }    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      data=dataImage.getRowValues(row);      featureData=featureImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (featureData[col] != featureNoData) {          i=(int)(featureData[col] - minFeatureID);          featurePresent[i]=true;          if (data[col] != noData) {            featureTotal[i]+=data[col];            featureN[i]++;            if (data[col] < featureMins[i]) {              featureMins[i]=data[col];            }            if (data[col] > featureMaxs[i]) {              featureMaxs[i]=data[col];            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    for (i=0; i < numFeatures; i++) {      if (featureN[i] > 0) {        featureAverage[i]=featureTotal[i] / featureN[i];      }    }    updateProgress("Loop 2 of 2:",(int)progress);    for (row=0; row < rows; row++) {      data=dataImage.getRowValues(row);      featureData=featureImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (featureData[col] != featureNoData && data[col] != noData) {          i=(int)(featureData[col] - minFeatureID);          featureTotalDeviation[i]+=(data[col] - featureAverage[i]) * (data[col] - featureAverage[i]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    for (i=0; i < numFeatures; i++) {      if (featureN[i] > 0) {        featureStdDeviation[i]=Math.sqrt(featureTotalDeviation[i] / (featureN[i] - 1));      }    }    dataImage.close();    if (!outputHeader.toLowerCase().equals("not specified")) {      output=new WhiteboxRaster(outputHeader,"rw",dataImageHeader,WhiteboxRaster.DataType.FLOAT,noData);      output.setPreferredPalette(dataImage.getPreferredPalette());      output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);      updateProgress("Outputing image data:",(int)progress);      if (statType.equals("average")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureAverage[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("minimum")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureMins[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("maximum")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureMaxs[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("range")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureMaxs[i] - featureMins[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("standard deviation")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureStdDeviation[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else       if (statType.equals("total")) {        for (row=0; row < rows; row++) {          featureData=featureImage.getRowValues(row);          for (col=0; col < cols; col++) {            if (featureData[col] != featureNoData) {              i=(int)(featureData[col] - minFeatureID);              output.setValue(row,col,featureTotal[i]);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Outputing image data:",(int)progress);        }      } else {        showFeedback("Specified statistic type not recognized");        return;      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.close();      returnData(outputHeader);    }    if (textOutput) {      DecimalFormat df;      df=new DecimalFormat("0.000");      String retstr=null;      retstr="EXTRACT STATISTICS\n\n";      retstr+="Data Image:\t" + dataImageShortName + "\n";      retstr+="Feature Image:\t" + featureImageShortName + "\n";      retstr+="NoData Value:\t" + noData + "\n";      retstr+="Output Stat:\t" + statType + "\n\n";      retstr+="ID\t" + "Value" + "\n";      if (statType.equals("average")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureAverage[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("minimum")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureMins[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("maximum")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureMaxs[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("range")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format((featureMaxs[i] - featureMins[i]))+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("standard deviation")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureStdDeviation[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else       if (statType.equals("total")) {        for (i=0; i < numFeatures; i++) {          if (featureN[i] > 0) {            retstr+=(i + minFeatureID) + "\t" + df.format(featureTotal[i])+ "\n";          } else           if (featurePresent[i]) {            retstr+=(i + minFeatureID) + "\t" + df.format(noData)+ "\n";          }        }      } else {        showFeedback("Specified statistic type not recognized");        return;      }      returnData(retstr);    }    featureImage.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void cleanUp(){  try {    File file=new File(System.getProperty("user.dir"));    String[] links=file.list();    for (    String name : links) {      File potentialSymLink=new File(file,name);      if (FileUtils.isSymlink(potentialSymLink)) {        if (logger.isDebugEnabled()) {          logger.debug("DELETING: " + potentialSymLink);        }        potentialSymLink.delete();      }    }  } catch (  Exception e) {    logger.warn("Failed to remove symlinks",e);  }}  }
class C{  public TriggerObject findTrigger(String name){  return triggers.get(name);}  }
class C{  public void revalidate(){}  }
class C{  protected double kernelHelper2LP(int n,char[] s,int endIndexS,char[] t,int endIndexT,int remainingMatchLength){  if (remainingMatchLength < 2 * n) {    return getReturnValue(n);  }  if (endIndexS < 0 || endIndexT < 0) {    return getReturnValue(n);  }  int adr=0;  if (m_useRecursionCache) {    adr=m_multX * n + m_multY * endIndexS + m_multZ * endIndexT + m_multZZ * remainingMatchLength;    if (cachekh2K[adr % maxCache] == adr + 1) {      return cachekh2[adr % maxCache];    }  }  char x=s[endIndexS];  if (x == t[endIndexT]) {    double ret=m_lambda * (kernelHelper2LP(n,s,endIndexS,t,endIndexT - 1,remainingMatchLength - 1) + m_lambda * kernelHelperLP(n - 1,s,endIndexS - 1,t,endIndexT - 1,remainingMatchLength - 2));    if (m_useRecursionCache && endIndexS >= 0 && endIndexT >= 0 && n >= 0) {      cachekh2K[adr % maxCache]=adr + 1;      cachekh2[adr % maxCache]=ret;    }    return ret;  }  int i;  int minIndex=endIndexT - remainingMatchLength;  if (minIndex < 0) {    minIndex=0;  }  for (i=endIndexT; i >= minIndex; i--) {    if (x == t[i]) {      int skipLength=endIndexT - i;      double ret=getPowerOfLambda(skipLength) * kernelHelper2LP(n,s,endIndexS,t,i,remainingMatchLength - skipLength);      if (m_useRecursionCache && endIndexS >= 0 && endIndexT >= 0 && n >= 0) {        cachekh2K[adr % maxCache]=adr + 1;        cachekh2[adr % maxCache]=ret;      }      return ret;    }  }  double ret=getReturnValue(n);  if (m_useRecursionCache && endIndexS >= 0 && endIndexT >= 0 && n >= 0) {    cachekh2K[adr % maxCache]=adr + 1;    cachekh2[adr % maxCache]=ret;  }  return ret;}  }
class C{  @Override public boolean accept(@NotNull final Map<String,String> factoryParameters){  return factoryParameters.containsKey(URL_PARAMETER_NAME) && gitlabUrlParser.isValid(factoryParameters.get(URL_PARAMETER_NAME));}  }
class C{  public void release(final Player inmate){  if (isGagged(inmate)) {    inmate.removeQuest("gag");    inmate.sendPrivateText(NotificationType.SUPPORT,"Your gag sentence is over.");    logger.debug("Player " + inmate.getName() + "released from gag.");  }}  }
class C{  public DomainModelRuntimeException(){}  }
class C{  public java_cup.runtime.token scan() throws java.lang.Exception {  return lexer.next_token();}  }
class C{  public void traverse(Node pos,Node top) throws org.xml.sax.SAXException {  this.fSerializer.startDocument();  if (pos.getNodeType() != Node.DOCUMENT_NODE) {    Document ownerDoc=pos.getOwnerDocument();    if (ownerDoc != null && ownerDoc.getImplementation().hasFeature("Core","3.0")) {      fIsLevel3DOM=true;    }  } else {    if (((Document)pos).getImplementation().hasFeature("Core","3.0")) {      fIsLevel3DOM=true;    }  }  if (fSerializer instanceof LexicalHandler) {    fLexicalHandler=((LexicalHandler)this.fSerializer);  }  if (fFilter != null)   fWhatToShowFilter=fFilter.getWhatToShow();  while (null != pos) {    startNode(pos);    Node nextNode=null;    nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if ((null != top) && top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || ((null != top) && top.equals(pos))) {          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.fSerializer.endDocument();}  }
class C{  private void applyStyleAttribute(HTMLElement element,HTMLComponent htmlC){  String styleStr=element.getAttributeById(HTMLElement.ATTR_STYLE);  if (styleStr != null) {    CSSElement style=null;    styleStr="{" + styleStr + "}";    try {      style=CSSParser.getInstance().parseCSS(new InputStreamReader(new ByteArrayInputStream(styleStr.getBytes())),htmlC);      applyStyle(element,style,htmlC);    } catch (    IOException ex) {      ex.printStackTrace();    }  }}  }
class C{  private void updateSyncEverythingState(){  boolean isSyncEnabled=mSyncSwitchPreference.isChecked();  mSyncEverything.setEnabled(isSyncEnabled);  mSyncEverything.setChecked(!isSyncEnabled || mProfileSyncService.hasKeepEverythingSynced());}  }
class C{  public int readEnum() throws IOException {  return readRawVarint32();}  }
class C{  public Matrix4x3f rotateYXZ(Vector3f angles){  return rotateYXZ(angles.y,angles.x,angles.z);}  }
class C{  public static Throwable deepSanitize(Throwable t){  Throwable current=t;  while (current.getCause() != null) {    current=StackTraceUtils.sanitize(current.getCause());  }  return StackTraceUtils.sanitize(t);}  }
class C{  public void elementAttributesProcessed(String name,Properties extraAttributes,String systemId,int lineNr){  Properties props=(Properties)this.currentElements.pop();  Enumeration enm=props.keys();  while (enm.hasMoreElements()) {    String key=(String)enm.nextElement();    extraAttributes.put(key,props.get(key));  }}  }
class C{  public Expression copyInline(Context ctx){  ArrayAccessExpression e=(ArrayAccessExpression)clone();  e.right=right.copyInline(ctx);  if (index == null) {    e.index=null;  } else {    e.index=index.copyInline(ctx);  }  return e;}  }
class C{  public void unsetTriggerType(){  this.triggerType=null;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:05.906 -0500",hash_original_method="2AE8767260EE49A022E5D260FFA8A02D",hash_generated_method="BCB85E6C5BD5F2DE055E2E90D28EE64A") public SubscriptionState(){  super(SIPHeaderNames.SUBSCRIPTION_STATE);  expires=-1;  retryAfter=-1;}  }
class C{  public void dupX2(){  mv.visitInsn(Opcodes.DUP_X2);}  }
class C{  public boolean userCanEditDept(int connectedUserId,int DeptId,String entidad) throws Exception {  boolean can=false;  int deptMgrId=Defs.NULL_ID;  try {    deptMgrId=getDeptMgrId(DeptId,entidad);    can=hasUserDeptAuth(connectedUserId,USER_ACTION_ID_EDIT,deptMgrId,Defs.NULL_ID,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  static private WbXmlContent[] createContentsArrayFromElement(WbXmlElement[] elements){  if (elements == null) {    return null;  }  WbXmlContent[] contents=new WbXmlContent[elements.length];  for (int i=0; i < elements.length; i++) {    contents[i]=new WbXmlContent(elements[i]);  }  return contents;}  }
class C{  public boolean isAbove(VersionNumber other){  return !isAtMost(other);}  }
class C{  private Operation buildImageQuery(final State current){  return ((CloudStoreHelperProvider)getHost()).getCloudStoreHelper().createGet(ImageServiceFactory.SELF_LINK + "/" + current.image);}  }
class C{  @Override public Iterator<Map.Entry<String,FieldAnalysis>> iterator(){  return fieldAnalysisByFieldName.entrySet().iterator();}  }
class C{  @Override public void registerAutoReclaim(){  m_allocator.registerChunkAutoReclaim(this);}  }
class C{  private void selectView(final List<INaviView> views){  final CGraphSelectionDialog dlg=new CGraphSelectionDialog(m_parent,views);  dlg.setVisible(true);  final INaviView result=dlg.getSelectionResult();  if (result != null) {    CViewOpener.showView(m_parent,m_viewContainer,result,CWindowManager.instance().getLastWindow());  }}  }
class C{  private void createAllowOnBehalfActingReference(Subscription subscription) throws NonUniqueBusinessKeyException {  TechnicalProduct technicalProduct=subscription.getProduct().getTechnicalProduct();  if (technicalProduct.isAllowingOnBehalfActing()) {    Organization source=technicalProduct.getOrganization();    Organization target=dataManager.getCurrentUser().getOrganization();    if (!isOnBehalfReferenceExisting(source,target)) {      OrganizationReference reference=new OrganizationReference(source,target,OrganizationReferenceType.ON_BEHALF_ACTING);      dataManager.persist(reference);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Boolean isIPVersion6(){  return ipVersion6;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:40.316 -0500",hash_original_method="F2072CEA8EE053AA2B225A50B1411CAE",hash_generated_method="BE8E78E609316D86F08C60BBCC6156DE") public X509Attribute(String oid,ASN1Encodable value){  this.attr=new Attribute(new DERObjectIdentifier(oid),new DERSet(value));}  }
class C{  public form(String action){  setAction(action);}  }
class C{  public SnmpStringFixed(int l,String s) throws IllegalArgumentException {  if ((l <= 0) || (s == null)) {    throw new IllegalArgumentException();  }  byte[] v=s.getBytes();  int length=Math.min(l,v.length);  value=new byte[l];  for (int i=0; i < length; i++) {    value[i]=v[i];  }  for (int i=length; i < l; i++) {    value[i]=0;  }}  }
class C{  private static DimensionalNode generate(int d,int maxD,IMultiPoint points[],int left,int right){  if (right < left) {    return null;  }  if (right == left) {    return new DimensionalNode(d,points[left]);  }  int m=1 + (right - left) / 2;  Selection.select(points,m,left,right,comparators[d]);  DimensionalNode dm=new DimensionalNode(d,points[left + m - 1]);  if (++d > maxD) {    d=1;  }  dm.setBelow(generate(d,maxD,points,left,left + m - 2));  dm.setAbove(generate(d,maxD,points,left + m,right));  return dm;}  }
class C{  public boolean containsValue(String value){  return mCapabilities.containsValue(value);}  }
class C{  public long term(){  return term;}  }
class C{  public void write(File file) throws TransformerException, IOException {  write(file,(Integer)null);}  }
class C{  public static double staticNextDouble(double lambda){synchronized (shared) {    return shared.nextDouble(lambda);  }}  }
class C{  void scheduleProvisioningOperation(Runnable task){  mProvisioningOperationHandler.post(task);}  }
class C{  @Override public boolean distributable(){  return false;}  }
class C{  public final boolean hasOffset(){  return !(offset == NO_OFFSET);}  }
class C{  @CanIgnoreReturnValue K checkKey(@Nullable K key){  return key;}  }
class C{  public LazyValue(Supplier<T> supplier){  Validate.notNull(supplier,"supplier can't be null!");  this.supplier=supplier;}  }
class C{  final void postAccept(){  connected=true;  created=true;  bound=true;}  }
class C{  protected UnaryNode(NodeClass<? extends UnaryNode> c,Stamp stamp,ValueNode value){  super(c,stamp);  this.value=value;}  }
class C{  public Implementation(){  super();  plugin=this;}  }
class C{  public void extract4x3Matrix(float[] dst){  dst[0]=val[M00];  dst[1]=val[M10];  dst[2]=val[M20];  dst[3]=val[M01];  dst[4]=val[M11];  dst[5]=val[M21];  dst[6]=val[M02];  dst[7]=val[M12];  dst[8]=val[M22];  dst[9]=val[M03];  dst[10]=val[M13];  dst[11]=val[M23];}  }
class C{  public void accept(final ClassVisitor cv){  FieldVisitor fv=cv.visitField(access,name,desc,signature,value);  if (fv == null) {    return;  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    fv.visitAttribute(attrs.get(i));  }  fv.visitEnd();}  }
class C{  public ComponentColorModel(ColorSpace colorSpace,int[] bits,boolean hasAlpha,boolean isAlphaPremultiplied,int transparency,int transferType){  super(bitsHelper(transferType,colorSpace,hasAlpha),bitsArrayHelper(bits,transferType,colorSpace,hasAlpha),colorSpace,hasAlpha,isAlphaPremultiplied,transparency,transferType);switch (transferType) {case DataBuffer.TYPE_BYTE:case DataBuffer.TYPE_USHORT:case DataBuffer.TYPE_INT:    signed=false;  needScaleInit=true;break;case DataBuffer.TYPE_SHORT:signed=true;needScaleInit=true;break;case DataBuffer.TYPE_FLOAT:case DataBuffer.TYPE_DOUBLE:signed=true;needScaleInit=false;noUnnorm=true;nonStdScale=false;break;default :throw new IllegalArgumentException("This constructor is not " + "compatible with transferType " + transferType);}setupLUTs();}  }
class C{  private boolean isEmpty(Object str){  return (str == null || "".equals(str));}  }
class C{  public static float calculateWidth(float top,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float width=targetAspectRatio * height;  return width;}  }
class C{  public HostCandidate(IceSocketWrapper socket,Component parentComponent){  this(socket,parentComponent,Transport.UDP);}  }
class C{  public void initProperties(){  if (this.initProperties) {    return;  }synchronized (this) {    if (this.initProperties) {      return;    }    getBot().memory().loadProperties("Facebook");    Network memory=getBot().memory().newMemory();    Vertex facebook=memory.createVertex(getPrimitive());    String property=this.bot.memory().getProperty("Facebook.tokenExpiry");    if (property != null) {      this.tokenExpiry=new Date(Long.valueOf(property));    }    property=this.bot.memory().getProperty("Facebook.welcomeMessage");    if (property != null) {      this.welcomeMessage=property;    }    property=this.bot.memory().getProperty("Facebook.profileName");    if (property != null) {      this.profileName=property;    }    property=this.bot.memory().getProperty("Facebook.page");    if (property != null) {      this.page=property;    }    property=this.bot.memory().getProperty("Facebook.autoFriend");    if (property != null) {      this.autoFriend=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Facebook.maxFriends");    if (property != null) {      this.maxFriends=Integer.valueOf(property);    }    property=this.bot.memory().getProperty("Facebook.maxPost");    if (property != null) {      this.maxPost=Integer.valueOf(property);    }    property=this.bot.memory().getProperty("Facebook.maxLike");    if (property != null) {      this.maxLike=Integer.valueOf(property);    }    property=this.bot.memory().getProperty("Facebook.processPost");    if (property != null) {      this.processPost=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Facebook.processAllPosts");    if (property != null) {      this.processAllPosts=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Facebook.processNewsFeed");    if (property != null) {      this.processNewsFeed=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Facebook.processAllNewsFeed");    if (property != null) {      this.processAllNewsFeed=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Facebook.likeAllPosts");    if (property != null) {      this.likeAllPosts=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Facebook.replyToMessages");    if (property != null) {      this.replyToMessages=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Facebook.autoPost");    if (property != null) {      this.autoPost=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Facebook.autoPostHours");    if (property != null) {      this.autoPostHours=Integer.valueOf(property);    }    this.statusKeywords=new ArrayList<String>();    List<Relationship> keywords=facebook.orderedRelationships(Primitive.STATUSKEYWORDS);    if (keywords != null) {      for (      Relationship relationship : keywords) {        String text=((String)relationship.getTarget().getData()).trim();        if (!text.isEmpty()) {          this.statusKeywords.add(text);        }      }    }    this.newsFeedKeywords=new ArrayList<String>();    keywords=facebook.orderedRelationships(Primitive.NEWSFEEDKEYWORDS);    if (keywords != null) {      for (      Relationship relationship : keywords) {        String text=((String)relationship.getTarget().getData()).trim();        if (!text.isEmpty()) {          this.newsFeedKeywords.add(text);        }      }    }    this.likeKeywords=new ArrayList<String>();    keywords=facebook.orderedRelationships(Primitive.LIKEKEYWORDS);    if (keywords != null) {      for (      Relationship relationship : keywords) {        String text=((String)relationship.getTarget().getData()).trim();        if (!text.isEmpty()) {          this.likeKeywords.add(text);        }      }    }    this.autoFriendKeywords=new ArrayList<String>();    List<Relationship> search=facebook.orderedRelationships(Primitive.AUTOFRIENDKEYWORDS);    if (search != null) {      for (      Relationship relationship : search) {        String text=((String)relationship.getTarget().getData()).trim();        if (!text.isEmpty()) {          this.autoFriendKeywords.add(text);        }      }    }    this.postRSS=new ArrayList<String>();    List<Relationship> rss=facebook.orderedRelationships(Primitive.RSS);    if (rss != null) {      for (      Relationship relationship : rss) {        String text=((String)relationship.getTarget().getData()).trim();        if (!text.isEmpty()) {          this.postRSS.add(text);        }      }    }    this.rssKeywords=new ArrayList<String>();    keywords=facebook.orderedRelationships(Primitive.RSSKEYWORDS);    if (keywords != null) {      for (      Relationship relationship : keywords) {        String text=((String)relationship.getTarget().getData()).trim();        this.rssKeywords.add(text);      }    }    this.initProperties=true;  }}  }
class C{  public static boolean isUbuntu(){  return _isUbuntu;}  }
class C{  protected SVGException createSVGException(short type,String key,Object[] args){  return ((SVGOMElement)element).createSVGException(type,key,args);}  }
class C{  private List<Tradestrategy> findTradestrategyByIdTradingday(Integer idTradingday){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Tradestrategy> query=builder.createQuery(Tradestrategy.class);    Root<Tradestrategy> from=query.from(Tradestrategy.class);    query.select(from);    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != idTradingday) {      Join<Tradestrategy,Tradingday> tradingday=from.join("tradingday");      Predicate predicate=builder.equal(tradingday.get("idTradingDay"),idTradingday);      predicates.add(predicate);    }    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<Tradestrategy> typedQuery=entityManager.createQuery(query);    List<Tradestrategy> items=typedQuery.getResultList();    return items;  } catch (  Exception re) {    throw re;  }}  }
class C{  public DirectoryLoader(){}  }
class C{  public void cancelPendingRequests(Object tag){  if (mRequestQueue != null) {    mRequestQueue.cancelAll(tag);  }}  }
class C{  protected void dumpMemoryTrace(){  log.dumpTrace();}  }
class C{  @LargeTest public void testGetDownloadIdOnNotification() throws Exception {  byte[] blobData=generateData(3000,DataType.TEXT);  enqueueResponse(buildResponse(HTTP_OK,blobData));  long dlRequest=doCommonStandardEnqueue();  waitForDownloadOrTimeout(dlRequest);  Set<Long> ids=mReceiver.getDownloadIds();  assertEquals(1,ids.size());  Iterator<Long> it=ids.iterator();  assertEquals("Download ID received from notification does not match initial id!",dlRequest,it.next().longValue());}  }
class C{  private void checkNotNull(Object value,String attribute) throws InvalidRegistryObjectException, CoreException {  if (value == null) {    Object[] args={getId(),fElement.getContributor().getName(),attribute};    String message=Messages.format(JavaTextMessages.CompletionProposalComputerDescriptor_illegal_attribute_message,args);    IStatus status=new Status(IStatus.WARNING,JavaPlugin.getPluginId(),IStatus.OK,message,null);    throw new CoreException(status);  }}  }
class C{  public static void assertNotEqual(short expected,short actual,String errorMessage){  if (verbose) {    log("assertNotEqual(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  assertBool(expected != actual,errorMessage);}  }
class C{  public static boolean asBoolean(byte[] array){  return array.length > 0;}  }
class C{  public void startScroll(){  _timer.start();}  }
class C{  public PaymentResponse createPaymentResponse(final ServiceDetails paymentServiceDetails,final String response){  final PaymentGatewayAdaptor paymentGatewayAdaptor=getPaymentGatewayAdaptor(paymentServiceDetails.getCode());  final PaymentResponse paymentResponse=paymentGatewayAdaptor.parsePaymentResponse(response);  return paymentResponse;}  }
class C{  public static void main(String[] args) throws IOException {  Comparator<short[]> comp=FreeCellNode.comparator();  int dealNumber=Integer.valueOf(args[0]);  System.out.println("Searching board:" + dealNumber);  FreeCellNode fcn=Deal.initialize(new File("artifacts","32000.txt"),dealNumber);  System.out.println(fcn.toString());  AnalyzeState st=new AnalyzeState();  DFS<short[]> dfs=new DFS<short[]>(st);  Result res=dfs.fullSearch(fcn,Deal.goal(),comp);  Stack<IMove> sol=res.solution();  System.out.println("Solution has " + sol.size() + " moves.");  for (  IMove m : sol) {    System.out.println(m);  }  System.out.println("   Total number of states: " + dfs.getCounter());  st.report();}  }
class C{  static int hash(Address addr){  Word initial=addr.toWord().and(MMAP_SLAB_MASK.not()).rshl(LOG_MMAP_SLAB_BYTES);  Word hash=Word.zero();  while (!initial.isZero()) {    hash=hash.xor(initial.and(HASH_MASK));    initial=initial.rshl(LOG_SLAB_TABLE_SIZE);  }  return hash.toInt();}  }
class C{  public void start(String refresher,long expirePeriod){  if (mLogger.isActivated()) {    mLogger.debug(new StringBuilder("Start session timer for session ").append(mSession.getId()).append(" (role=").append(refresher).append(", expire=").append(expirePeriod).append("ms)").toString());  }  SipDialogPath path=mSession.getDialogPath();  if (path.getSessionExpireTime() == 0) {    path.setSessionExpireTime(expirePeriod);  }  mRefresher=refresher;  mExpirePeriod=expirePeriod;  mLastSessionRefresh=System.currentTimeMillis();  startProcessing();}  }
class C{  public void add(double element){  if (this.size == this.capacity)   flush();  this.elements[size++]=element;}  }
class C{  private Rectangle extendRect(Rectangle rect,boolean horizontal){  if (rect == null) {    return rect;  }  if (horizontal) {    rect.x=0;    rect.width=table.getWidth();  } else {    rect.y=0;    if (table.getRowCount() != 0) {      Rectangle lastRect=table.getCellRect(table.getRowCount() - 1,0,true);      rect.height=lastRect.y + lastRect.height;    } else {      rect.height=table.getHeight();    }  }  return rect;}  }
class C{  public static ContentValues values(long id,String time){  ContentValues vals=new ContentValues(5);  vals.put(TYPE_ID,REVIEW.id);  vals.put(OBJECT_ID,id);  vals.put(ACTION_ID,INSERT.id);  vals.put(ACTION_ON,time);  if (!Prefs.getStringSet(context(),SHOW_NOTIFICATIONS).contains(context().getString(R.string.public_notifications_value))) {    vals.put(STATUS_ID,INACTIVE.id);  }  return vals;}  }
class C{  @Override public int compareTo(IPoint p){  double fp=FloatingPoint.value(getX() - p.getX());  if (fp < 0) {    return -1;  }  if (fp > 0) {    return +1;  }  fp=FloatingPoint.value(getY() - p.getY());  if (fp < 0) {    return -1;  }  if (fp > 0) {    return +1;  }  return 0;}  }
class C{  public void popClip(){  impl.popClip(nativeGraphics);}  }
class C{  public final T apiEndpoint(HttpUrl baseUrl){  apiEndpoint=checkNotNull(baseUrl,"apiEndpoint == null");  return self();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public FactorAnalysisAction(DataEditor editor){  super("Factor Analysis...");  this.dataEditor=editor;}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer(bits.length / 2);  int bitCount=0;  sb.append('{');  boolean comma=false;  for (int i=0; i < bits.length; i++) {    if (bits[i] == 0) {      bitCount+=ELM_SIZE;      continue;    }    for (int j=0; j < ELM_SIZE; j++) {      if (((bits[i] & (TWO_N_ARRAY[j])) != 0)) {        if (comma) {          sb.append(", ");        }        sb.append(bitCount);        comma=true;      }      bitCount++;    }  }  sb.append('}');  return sb.toString();}  }
class C{  DESedeKey(byte[] key,int offset) throws InvalidKeyException {  if (key == null || ((key.length - offset) < DESedeKeySpec.DES_EDE_KEY_LEN)) {    throw new InvalidKeyException("Wrong key size");  }  this.key=new byte[DESedeKeySpec.DES_EDE_KEY_LEN];  System.arraycopy(key,offset,this.key,0,DESedeKeySpec.DES_EDE_KEY_LEN);  DESKeyGenerator.setParityBit(this.key,0);  DESKeyGenerator.setParityBit(this.key,8);  DESKeyGenerator.setParityBit(this.key,16);}  }
class C{  @Override public boolean hasChildren(){  return !fileNames.isEmpty();}  }
class C{  public IndexBufferObject(int maxIndices){  this.isDirect=true;  buffer=BufferUtils.newShortBuffer(maxIndices);  buffer.flip();  bufferHandle=Gdx.gl20.glGenBuffer();  usage=GL20.GL_STATIC_DRAW;}  }
class C{  @Override public void onMessageReceived(String from,Bundle data){  super.onMessageReceived(from,data);  Log.d(GCM_LISTENER_DEBUG,"Data receive: " + data);  sendNotification(data);}  }
class C{  public void exception(CharSequence message,Throwable e){  log(Level.SEVERE,message,e);}  }
class C{  public void copyInts(IntsRef ints){  copyInts(ints.ints,ints.offset,ints.length);}  }
class C{  protected void onFinished(){}  }
class C{  public void topLevelWindowCreated(Window w){  if (w instanceof Accessible) {    installListeners((Accessible)w);  }}  }
class C{  public final void runOnUiThread(Runnable action){  if (Thread.currentThread() != mUiThread) {    mHandler.post(action);  } else {    action.run();  }}  }
class C{  public boolean isEmpty(){  return (exchange_keys.length == 0);}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  private final int convertOffset(int offset,int length,int changeOffset,int oldLength,int newLength){  if (offset + length <= changeOffset) {    return offset;  } else   if (changeOffset + oldLength <= offset) {    return offset + newLength - oldLength;  } else {    return -1;  }}  }
class C{  @Override public void rateIndividuals(String filename,String outputFolder){  Map<String,Integer[]> personMap=new TreeMap<String,Integer[]>();  LOG.info("Processing records for person-specific scoring.");  Counter counter=new Counter("   lines # ");  BufferedReader br=IOUtils.getBufferedReader(filename);  try {    String line=null;    while ((line=br.readLine()) != null && counter.getCounter() < maxLines) {      String[] sa=line.split(",");      String id=sa[1];      if (!personMap.containsKey(id)) {        Integer[] ia={0,0,0,0};        personMap.put(id,ia);      }      Integer[] thisArray=personMap.get(id);      RISK_GROUP risk=getRiskGroup(line);      int index;switch (risk) {case NONE:        index=0;      break;case LOW:    index=1;  break;case MEDIUM:index=2;break;case HIGH:index=3;break;default :throw new RuntimeException("Don't know where to get risk values for " + risk.toString());}int oldCount=thisArray[index];thisArray[index]=oldCount + 1;counter.incCounter();}} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot read from " + filename);} finally {try {br.close();} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot close " + filename);}}counter.printCounter();LOG.info("Done processing records. Unique persons identified: " + personMap.size());String outputFilename=outputFolder + (outputFolder.endsWith("/") ? "" : "/") + "riskClassCountsPerPerson.csv";LOG.info("Writing the per-person risk classes counts to " + outputFilename);BufferedWriter bw=IOUtils.getBufferedWriter(outputFilename);try {bw.write("id,none,low,medium,high");bw.newLine();for (String id : personMap.keySet()) {Integer[] thisArray=personMap.get(id);bw.write(String.format("%s,%d,%d,%d,%d\n",id,thisArray[0],thisArray[1],thisArray[2],thisArray[3]));}} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot write to " + outputFilename);} finally {try {bw.close();} catch (IOException e) {e.printStackTrace();throw new RuntimeException("Cannot close " + outputFilename);}}LOG.info("Done writing the per-person risk classes counts.");}  }
class C{  public final String toString(){  StringBuffer builder=new StringBuffer(property);  builder.append('=');  builder.append(String.valueOf(value));  return builder.toString();}  }
class C{  public BigdataTurtleParser(){  super(BigdataValueFactoryImpl.getInstance(""));}  }
class C{  @Override public RegularTimePeriod previous(){  if (this.year > Year.MINIMUM_YEAR) {    return new Year(this.year - 1);  } else {    return null;  }}  }
class C{  public PersistenceController(KeyValuePersistenceSettings settings){  if (settings == null)   throw new IllegalArgumentException("Persistent settings can't be null");  persistenceSettings=settings;  String[] loadStatements=prepareLoadStatements();  loadWithKeyFieldsStatementTempl=loadStatements[0];  loadStatementTempl=loadStatements[1];  writeStatementTempl=prepareWriteStatement();  delStatementTempl=prepareDeleteStatement();  keyUniquePojoFields=settings.getKeyPersistenceSettings().cassandraUniqueFields();  List<PojoField> _valUniquePojoFields=settings.getValuePersistenceSettings().cassandraUniqueFields();  if (_valUniquePojoFields == null || _valUniquePojoFields.isEmpty()) {    valUniquePojoFields=_valUniquePojoFields;    return;  }  List<String> keyColumns=new LinkedList<>();  if (keyUniquePojoFields == null)   keyColumns.add(settings.getKeyPersistenceSettings().getColumn()); else {    for (    PojoField field : keyUniquePojoFields)     keyColumns.add(field.getColumn());  }  List<PojoField> fields=new LinkedList<>(_valUniquePojoFields);  for (  String column : keyColumns) {    for (int i=0; i < fields.size(); i++) {      if (column.equals(fields.get(i).getColumn())) {        fields.remove(i);        break;      }    }  }  valUniquePojoFields=fields.isEmpty() ? null : Collections.unmodifiableList(fields);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static <E>boolean isEmpty(CharSequence c){  return (c == null) || c.length() == 0;}  }
class C{  public static ReilInstruction createAdd(final long offset,final OperandSize firstSize,final String firstValue,final OperandSize secondSize,final String secondValue,final OperandSize thirdSize,final String thirdValue){  return createTrinaryInstruction(ReilHelpers.OPCODE_ADD,new CAddress(offset),firstSize,firstValue,secondSize,secondValue,thirdSize,thirdValue);}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public void testLegacyDoubleMissingLast() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",-1.3,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",4.2333333333333,Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new LegacyDoubleField("value",4.2333333333332,Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.LEGACY_DOUBLE));  writer.close();  IndexSearcher searcher=newSearcher(ir);  SortField sortField=new SortField("value",SortField.Type.DOUBLE);  sortField.setMissingValue(Double.MAX_VALUE);  Sort sort=new Sort(sortField);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[2].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[3].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public void writeWords(File targetFile) throws IOException {  targetFile.getParentFile().mkdirs();  LOGGER.info("Writing output to " + targetFile);  BufferedWriter outputStream=new BufferedWriter(new FileWriter(targetFile));  for (  TreeSet<IDSorter> topic : model.getSortedWords()) {    int wordCount=0;    for (    IDSorter id : topic) {      double weight=id.getWeight() / alphabet.size();      String word=((String)alphabet.lookupObject(id.getID())).replaceAll("\r\n"," ");      if (word.contains(FIELD_SEPARATOR)) {        LOGGER.debug("Ignoring '" + word + "'.");      } else {        outputStream.write(String.format(LOCALE,"%s%s%f",word,FIELD_SEPARATOR,weight));        wordCount++;        if (wordCount >= nWords) {          break;        }        outputStream.write(FIELD_SEPARATOR);      }    }    outputStream.newLine();  }  outputStream.close();}  }
class C{  public BigdataWriter(JiniFederation fed){  this.fed=fed;}  }
class C{  final void delete(){  _fromNode.removeOut(this);  _toNode.removeIn(this);}  }
class C{  public boolean isVariadic(){  return variadic;}  }
class C{  public NtpMessage(){  this.mode=3;  this.transmitTimestamp=(System.currentTimeMillis() / 1000.0) + 2208988800.0;}  }
class C{  static void skipComment(IXMLReader reader) throws IOException, XMLParseException {  if (reader.read() != '-') {    XMLUtil.errorExpectedInput(reader.getSystemID(),reader.getLineNr(),"<!--");  }  int dashesRead=0;  for (; ; ) {    char ch=reader.read();switch (ch) {case '-':      dashesRead++;    break;case '>':  if (dashesRead == 2) {    return;  }default :dashesRead=0;}}}  }
class C{  public boolean isSetVersions(){  return this.versions != null;}  }
class C{  public boolean delete(String rpfDir){  boolean ret=false;  List<String> frameList=organizeFrames(rpfDir);  if (frameList != null) {    for (Iterator<String> it=frameList.iterator(); it.hasNext(); ) {      String relativeFilePath="/" + it.next();      File fromFile=new File(rpfDir + relativeFilePath);      if (fromFile.exists() && fromFile.delete() && verbose) {        Debug.output("Deleting " + fromFile.getPath());      }    }    ret=true;  }  return ret;}  }
class C{  public long sum(Integer timeLimit,String... categories){  if (categories.length == 0)   categories=histograms.keySet().toArray(new String[histograms.keySet().size()]);  long value=0l;  int maxMinutes;  if (timeLimit != null)   maxMinutes=timeLimit / 60; else   maxMinutes=Integer.MAX_VALUE;  for (  String k : categories) {    int minute=0;    for (    int v : histograms.get(k).sums) {      if (minute < maxMinutes)       value+=v;      minute++;    }  }  return value;}  }
class C{  public void addSchema() throws QueryRulesetException {  if (!superclasses.isEmpty()) {    final Var superClassVar=new Var("superClassVar");    addListRule(new Var("subClassVar"),null,RDFS.SUBCLASSOF,superClassVar,superclasses);    addListRule(new Var("eqClassSubject"),superclasses,OWL.EQUIVALENTCLASS,new Var("eqClassObject"),superclasses);  }  if (!superproperties.isEmpty()) {    final Var superPropertyVar=new Var("superPropertyVar");    addListRule(new Var("subPropertyVar"),null,RDFS.SUBPROPERTYOF,superPropertyVar,superproperties);    addListRule(new Var("eqPropSubject"),superproperties,OWL.EQUIVALENTPROPERTY,new Var("eqPropObject"),superproperties);  }  if (!sameAs.isEmpty()) {    final Var sameAsSubj=new Var("sameAsSubject");    final Var sameAsObj=new Var("sameAsObject");    addListRule(sameAsSubj,sameAs,OWL.SAMEAS,sameAsObj,sameAs);  }  if (!transitive.isEmpty()) {    final Var transitiveVar=new Var(OWL.TRANSITIVEPROPERTY.toString(),OWL.TRANSITIVEPROPERTY);    addListRule(new Var("transitiveProp"),transitive,RDF.TYPE,transitiveVar,null);  }  if (!schemaProperties.isEmpty()) {    final Var symmetricVar=new Var(OWL.SYMMETRICPROPERTY.toString(),OWL.SYMMETRICPROPERTY);    addListRule(new Var("symmetricProp"),schemaProperties,RDF.TYPE,symmetricVar,null);    addListRule(new Var("inverseSubject"),schemaProperties,OWL.INVERSEOF,new Var("inverseObject"),schemaProperties);  }}  }
class C{  public void load(FileLocation loc,String defaultEnc) throws IOException {  this.loc=loc;  if (loc.isLocal() && !loc.isLocalAndExists()) {    this.charSet=defaultEnc != null ? defaultEnc : getDefaultEncoding();    return;  }  UnicodeReader ur=new UnicodeReader(loc.getInputStream(),defaultEnc);  charSet=ur.getEncoding();  Document doc=getDocument();  doc.removeDocumentListener(this);  BufferedReader r=new BufferedReader(ur);  try {    read(r,null);  }  finally {    doc.addDocumentListener(this);    r.close();  }}  }
class C{  private <T>BindingAmp<T> findObjectBinding(Key<T> key){  Objects.requireNonNull(key);  if (key.qualifiers().length != 1) {    throw new IllegalArgumentException();  }  return (BindingAmp)findBinding(Key.of(Object.class,key.qualifiers()[0]));}  }
class C{  public Point2D.Double chop(Point2D.Double p){  return Geom.chop(this,p);}  }
class C{  public void close() throws IOException {  this.in.close();}  }
class C{  protected BlankValidator<V> createBlankValidator(){  return new BlankValidator<>();}  }
class C{  public void insertUpdate(DocumentEvent e){  if (!dirty) {    setDirty(true);  }}  }
class C{  protected void didAdjustTree(){}  }
class C{  private void flushUnigram(){  clearAttributes();  char termBuffer[]=termAtt.resizeBuffer(2);  int len=Character.toChars(buffer[index],termBuffer,0);  termAtt.setLength(len);  offsetAtt.setOffset(startOffset[index],endOffset[index]);  typeAtt.setType(SINGLE_TYPE);  index++;}  }
class C{  public SimpleTimeLimiter(ExecutorService executor){  this.executor=checkNotNull(executor);}  }
class C{  @RequestMapping(value=STORAGES_URI_PREFIX + "/{storageName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_STORAGES_PUT) public Storage updateStorage(@PathVariable("storageName") String storageName,@RequestBody StorageUpdateRequest request){  StorageAlternateKeyDto alternateKey=StorageAlternateKeyDto.builder().storageName(storageName).build();  return storageService.updateStorage(alternateKey,request);}  }
class C{  public FciRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public int numDistinctValues(int attIndex){  if (attribute(attIndex).isNumeric()) {    double[] attVals=attributeToDoubleArray(attIndex);    int[] sorted=Utils.sort(attVals);    double prev=0;    int counter=0;    for (int i=0; i < sorted.length; i++) {      Instance current=instance(sorted[i]);      if (current.isMissing(attIndex)) {        break;      }      if ((i == 0) || (current.value(attIndex) > prev)) {        prev=current.value(attIndex);        counter++;      }    }    return counter;  } else {    return attribute(attIndex).numValues();  }}  }
class C{  public HeapModifier(final File heapFile,final int keylength,final ByteOrder ordering) throws IOException {  super(heapFile,keylength,ordering);}  }
class C{  void validateCompatibility(Object object,Class methodsProvider,Class allowedMethodsProvider,Version version,String parentName) throws ApiException {  for (  Method method : methodsProvider.getMethods()) {    FactoryParameter factoryParameter=method.getAnnotation(FactoryParameter.class);    if (factoryParameter != null) {      String fullName=(parentName.isEmpty() ? "" : (parentName + ".")) + CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL,method.getName().substring(3).toLowerCase());      Object parameterValue;      try {        parameterValue=method.invoke(object);      } catch (      IllegalAccessException|InvocationTargetException|IllegalArgumentException e) {        LOG.error(e.getLocalizedMessage(),e);        throw new ConflictException(FactoryConstants.INVALID_PARAMETER_MESSAGE);      }      if (ValueHelper.isEmpty(parameterValue)) {        if (Obligation.MANDATORY.equals(factoryParameter.obligation()) && factoryParameter.deprecatedSince().compareTo(version) > 0 && factoryParameter.ignoredSince().compareTo(version) > 0 && method.getDeclaringClass().isAssignableFrom(allowedMethodsProvider)) {          throw new ConflictException(FactoryConstants.MISSING_MANDATORY_MESSAGE);        }      } else       if (!method.getDeclaringClass().isAssignableFrom(allowedMethodsProvider)) {        throw new ConflictException(String.format(FactoryConstants.PARAMETRIZED_INVALID_PARAMETER_MESSAGE,fullName,version));      } else {        if (factoryParameter.deprecatedSince().compareTo(version) <= 0) {          throw new ConflictException(String.format(FactoryConstants.PARAMETRIZED_INVALID_PARAMETER_MESSAGE,fullName,version));        }        if (factoryParameter.setByServer()) {          throw new ConflictException(String.format(FactoryConstants.PARAMETRIZED_INVALID_PARAMETER_MESSAGE,fullName,version));        }        if (method.getReturnType().isAnnotationPresent(DTO.class)) {          validateCompatibility(parameterValue,method.getReturnType(),method.getReturnType(),version,fullName);        } else         if (Map.class.isAssignableFrom(method.getReturnType())) {          Type tp=((ParameterizedType)method.getGenericReturnType()).getActualTypeArguments()[1];          Class secMapParamClass;          if (tp instanceof ParameterizedType) {            secMapParamClass=(Class)((ParameterizedType)tp).getRawType();          } else {            secMapParamClass=(Class)tp;          }          if (String.class.equals(secMapParamClass)) {            if (ImportSourceDescriptor.class.equals(methodsProvider)) {              sourceProjectParametersValidator.validate((ImportSourceDescriptor)object,version);            }          } else           if (List.class.equals(secMapParamClass)) {          } else {            if (secMapParamClass.isAnnotationPresent(DTO.class)) {              Map<Object,Object> map=(Map)parameterValue;              for (              Map.Entry<Object,Object> entry : map.entrySet()) {                validateCompatibility(entry.getValue(),secMapParamClass,secMapParamClass,version,fullName + "." + entry.getKey());              }            } else {              throw new RuntimeException("This type of fields is not supported by factory.");            }          }        }      }    }  }}  }
class C{  public boolean isSubject(){  return (type != null) && type.isSubject();}  }
class C{  public QueueReader<Edge> newListener(){  return stream.reader();}  }
class C{  protected static ModbusResponse writeRequest(int functionCode,int register,int value){  ModbusUDPTransaction trans;  UDPMasterConnection connection=null;  try {    connection=new UDPMasterConnection(InetAddress.getByName(TestUtils.getFirstIp4Address()));    connection.setPort(Modbus.DEFAULT_PORT);    connection.setPort(PORT);    connection.connect();    connection.setTimeout(500);    ModbusRequest req=null;switch (functionCode) {case Modbus.WRITE_COIL:      req=new WriteCoilRequest(register,value != 0);    break;case Modbus.WRITE_SINGLE_REGISTER:  req=new WriteSingleRegisterRequest(register,new SimpleRegister(value));break;default :fail(String.format("Request type %d is not supported by the test harness",functionCode));}req.setUnitID(UNIT_ID);trans=new ModbusUDPTransaction(connection);trans.setRequest(req);trans.execute();return trans.getResponse();} catch (Exception e) {logger.debug(e.getMessage());} finally {if (connection != null) {connection.close();}}return null;}  }
class C{  public static String toBase64(Bitmap bmp){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  bmp.compress(Bitmap.CompressFormat.JPEG,100,baos);  byte[] imageBytes=baos.toByteArray();  return Base64.encodeToString(imageBytes,Base64.DEFAULT);}  }
class C{  public NotificationChain basicSetFinally(FinallyBlock newFinally,NotificationChain msgs){  FinallyBlock oldFinally=finally_;  finally_=newFinally;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.TRY_STATEMENT__FINALLY,oldFinally,newFinally);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public synchronized boolean isKnownPeer(Peer peer){  for (  Peer peerInList : mCurrentPeers) {    if (peer.equals(peerInList)) {      return true;    }  }  return false;}  }
class C{  public void triangulate(ConstrainedPointSet cps){  _triangulations.clear();  _triangulations.add(cps);  start();}  }
class C{  private String outOfBoundsMsg(int index){  return "Index: " + index + ", Size: "+ size;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.processingInstruction(target,data);}  }
class C{  private static void innerGetUsesOfSymbol(SymbolNode symbol,SemanticNode node,Vector<SemanticNode> found){  SymbolNode[] defs=null;  if (node instanceof OpApplNode) {    OpApplNode oan=(OpApplNode)node;    if (sourceEquals(oan.getOperator(),symbol) || ((oan.subExpressionOf != null) && sourceEquals(oan.subExpressionOf,symbol))) {      found.add(node);    }  } else   if ((node instanceof OpArgNode) && sourceEquals(((OpArgNode)node).getOp(),symbol)) {    found.add(node);  } else {    if (node instanceof LeafProofNode) {      defs=((LeafProofNode)node).getDefs();    } else     if (node instanceof UseOrHideNode) {      defs=((UseOrHideNode)node).defs;    }    if (defs != null && defs.length != 0) {      UniqueString defStr=UniqueString.uniqueStringOf("DEF");      int defIdx=-1;      SyntaxTreeNode stn=((SyntaxTreeNode)node.stn);      if (stn.getKind() == SyntaxTreeConstants.N_ProofStep) {        if (stn.getHeirs().length > 1) {          stn=stn.getHeirs()[1];        } else {          Activator.getDefault().logWarning("Bug in ResourceHelper line 1435");        }      }      for (int i=0; i < stn.getHeirs().length; i++) {        SyntaxTreeNode nd=stn.getHeirs()[i];        if (nd.image == defStr) {          defIdx=i;          break;        }      }      if (defIdx != -1) {        for (int i=0; i < defs.length; i++) {          if (sourceEquals(defs[i],symbol)) {            if (defIdx + 2 * i + 1 < stn.getHeirs().length) {              found.add(new NewSymbNode(null,null,stn.getHeirs()[defIdx + 2 * i + 1]));            } else {              Activator.getDefault().logWarning("Bug at ResourceHelper line 1471");            }          }        }      } else {        Activator.getDefault().logWarning("Bug at ResourceHelper line 1477");      }    }  }  SemanticNode[] children=node.getChildren();  if (children == null) {    return;  }  for (int i=0; i < children.length; i++) {    final SemanticNode sn=children[i];    if (sn != null) {      if (node.getLocation().source().equals(sn.getLocation().source())) {        innerGetUsesOfSymbol(symbol,sn,found);      }    }  }  return;}  }
class C{  @Override public void componentResized(ComponentEvent e){  if (transparencySupported) {    setShape(buildShape());  }}  }
class C{  private KeyedMessage<String,String> createCanaryMessage(String topicName,String partitionId){  long runtime=new Date().getTime();  String msg=producerProperties.messageStart + runtime + ",www.example.com,"+ partitionId;  KeyedMessage<String,String> data=new KeyedMessage<String,String>(topicName,partitionId,msg);  return data;}  }
class C{  public Alarm(String name,AlarmListener listener,ClassLoader loader){  this(name);  setListener(listener);  setContextLoader(loader);}  }
class C{  @Override public void update(){  double[] point=new double[dimensionList.size()];  int i=0;  for (  Dimension dimension : dimensionList) {    point[i]=dimension.getValue();    i++;  }  projectionModel.getProjector().addDatapoint(new DataPointColored(point));  fireUpdateEvent();}  }
class C{  public final CC growX(){  hor.setGrow(ResizeConstraint.WEIGHT_100);  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static void SetStaticObjectField(JNIEnvironment env,int classJREF,int fieldID,int objectJREF){  if (traceJNI)   VM.sysWrite("JNI called: SetStaticObjectField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    Object ref=env.getJNIRef(objectJREF);    field.setObjectValueUnchecked(null,ref);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  private void parseAssertionAttributes(AssertionType assertion){  _issueInstant=assertion.getIssueInstant().toGregorianCalendar(TimeZone.getTimeZone(DEFAULT_TIME_ZONE),null,null).getTimeInMillis();  _id=assertion.getID();  assert _id != null : "assertion ID is required attribute";  if (_log.isDebugEnabled()) {    _log.debug("SAML assertion attributes successfully parsed." + " Got issueInstant: " + new Date(_issueInstant));  }}  }
class C{  public static Integer toInteger(char c){  return Integer.valueOf(c);}  }
class C{  protected ASN1TypeCollection(int tagNumber,ASN1Type[] type){  super(tagNumber);  this.type=type;  this.OPTIONAL=new boolean[type.length];  this.DEFAULT=new Object[type.length];}  }
class C{  protected void broadcast(Metadata metadata){  if (mMetadataListener != null) {    mMetadataListener.receive(metadata);  }}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  public void centerViewTo(int xIndex,float yValue,AxisDependency axis){  float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();  float xsInView=getXAxis().getValues().size() / mViewPortHandler.getScaleX();  Runnable job=new MoveViewJob(mViewPortHandler,xIndex - xsInView / 2f,yValue + valsInView / 2f,getTransformer(axis),this);  if (mViewPortHandler.hasChartDimens()) {    post(job);  } else {    mJobs.add(job);  }}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenee == null) {    return false;  }  if (m_listenee instanceof EventConstraints) {    if (!((EventConstraints)m_listenee).eventGeneratable("dataSet")) {      return false;    }  }  return true;}  }
class C{  public MalformedCookieException(final String message){  super(message);}  }
class C{  @Override public void test(Number t) throws ParameterException {  if (t.doubleValue() < constraintValue.doubleValue()) {    throw new WrongParameterValueException("Parameter Constraint Error: \n" + "The parameter value specified has to be greater equal than " + constraintValue.toString() + ". (current value: "+ t.doubleValue()+ ")\n");  }}  }
class C{  public void remove(int offset,int length){  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  if (offset == 0) {    System.arraycopy(_data,length,_data,0,_pos - length);  } else   if (_pos - length == offset) {  } else {    System.arraycopy(_data,offset + length,_data,offset,_pos - (offset + length));  }  _pos-=length;}  }
class C{  public static <T>ObjectAccessor<T> of(T object,Class<T> type){  return new ObjectAccessor<>(object,type);}  }
class C{  public boolean isValue(){  return value;}  }
class C{  public InputStream openStreamRaw(String mimeType) throws IOException {  List mt=new ArrayList(1);  mt.add(mimeType);  return data.openStreamRaw(userAgent,mt.iterator());}  }
class C{  private void ensureCapacity(int updateSize,boolean finalOutput){  int bufLen=updateSize;  if (finalOutput) {    if (bufferedBlockCipher != null) {      bufLen=bufferedBlockCipher.getOutputSize(updateSize);    } else     if (aeadBlockCipher != null) {      bufLen=aeadBlockCipher.getOutputSize(updateSize);    }  } else {    if (bufferedBlockCipher != null) {      bufLen=bufferedBlockCipher.getUpdateOutputSize(updateSize);    } else     if (aeadBlockCipher != null) {      bufLen=aeadBlockCipher.getUpdateOutputSize(updateSize);    }  }  if ((buf == null) || (buf.length < bufLen)) {    buf=new byte[bufLen];  }}  }
class C{  public static double correlation(DoubleArrayList data1,double standardDev1,DoubleArrayList data2,double standardDev2){  return covariance(data1,data2) / (standardDev1 * standardDev2);}  }
class C{  private void unregister(boolean retryOnFailure,CompletableFuture<Void> future){  long sessionId=state.getSessionId();  state.getLogger().debug("Unregistering session: {}",sessionId);  if (keepAlive != null)   keepAlive.cancel();  if (state.getState() == Session.State.UNSTABLE)   connection.reset();  UnregisterRequest request=UnregisterRequest.builder().withSession(sessionId).build();  state.getLogger().debug("{} - Sending {}",sessionId,request);  connection.<UnregisterRequest,UnregisterResponse>send(request).whenComplete(null);}  }
class C{  public static IStatus createStatus(String bundleSymbolicName,int severity,int code,String message,Throwable exception){  return new Status(severity,bundleSymbolicName,code,message,exception);}  }
class C{  private static CacheKey fromContentTypeOption(Request request) throws URISyntaxException {  if (request == null) {    throw new IllegalArgumentException("request == null");  }  Response response=request.getResponse();  if (response == null) {    return fromAcceptOptions(request).get(0);  }  String proxyUri=request.getOptions().getProxyUri();  int mediaType=response.getOptions().getContentFormat();  if (mediaType < 0) {    mediaType=MediaTypeRegistry.TEXT_PLAIN;  }  byte[] payload=request.getPayload();  CacheKey cacheKey=new CacheKey(proxyUri,mediaType,payload);  cacheKey.setResponse(response);  return cacheKey;}  }
class C{  public VmPipeAcceptor(){  this(null);}  }
class C{  public void addNextDropTable(DropTable drop){  if (next == null) {    next=drop;  } else {    next.addNextDropTable(drop);  }}  }
class C{  public void unBindService(){  if (isServiceConnected()) {    FileDownloadServiceUIGuard.getImpl().unbindByContext(FileDownloadHelper.getAppContext());  }}  }
class C{  public IntVector(){  this(0,0,0);}  }
class C{  void copyToDevice(){  if (clBuffer != null)   return;  clBuffer=clContext.createByteBuffer(CLMem.Usage.InputOutput,byteBuffer,true);}  }
class C{  public static byte[] stripContinueFromRequests(byte[] input){  byte[] result=input;  while (true) {    String initialPart=new String(result,0,Math.min(MAX_HEADER_SIZE,result.length));    Matcher m=CONTINUE_PATTERN.matcher(initialPart);    if (m.find()) {      int stringIndex=m.start();      final int stringLength=m.end() - m.start();      result=new byte[input.length - stringLength];      System.arraycopy(input,0,result,0,stringIndex);      System.arraycopy(input,stringIndex + stringLength,result,stringIndex,input.length - (stringIndex + stringLength));    } else {      break;    }  }  return result;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.TYPE_REF__NULL_MODIFIER:    setNullModifier(NULL_MODIFIER_EDEFAULT);  return;case TypeRefsPackage.TYPE_REF__UNDEF_MODIFIER:setUndefModifier(UNDEF_MODIFIER_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  protected void fetchNextBlock(){  if (n > 0) {    long last=buffer[bufferPosition];    sampler.nextBlock((int)Math.min(n,MAX_BUFFER_SIZE),buffer,0);    skip=buffer[0] - last - 1;    bufferPosition=0;  }}  }
class C{  private void zero() throws JSONException {  if (probe) {    log(0);  }  write(0,1);}  }
class C{  void onReadingThreadStarted(){  boolean bothStarted=false;synchronized (mThreadsLock) {    mReadingThreadStarted=true;    if (mWritingThreadStarted) {      bothStarted=true;    }  }  callOnConnectedIfNotYet();  if (bothStarted) {    onThreadsStarted();  }}  }
class C{  public boolean isLibClass(SootClass clz){  return isLibClass(clz.getName());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void paintSeparatorBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public Validator addSubmitButtons(Component... cmp){  boolean isV=isValid();  for (  Component c : cmp) {    submitButtons.add(c);    c.setEnabled(isV);  }  return this;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value_1: ");  result.append(value_1);  result.append(')');  return result.toString();}  }
class C{  public Museum(){  super();}  }
class C{  public boolean shouldFetch(Text url,CrawlDatum datum,long curTime){  if (datum.getFetchTime() - curTime > (long)maxInterval * 1000) {    if (datum.getFetchInterval() > maxInterval) {      datum.setFetchInterval(maxInterval * 0.9f);    }    datum.setFetchTime(curTime);  }  if (datum.getFetchTime() > curTime) {    return false;  }  return true;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  protected void finishExecution(){  sendNow(getId(),CloudSimTags.END_OF_SIMULATION);}  }
class C{  public ResultSet read(String inputFileName,String[] colNames,String charset) throws SQLException {  init(inputFileName,charset);  try {    return readResultSet(colNames);  } catch (  IOException e) {    throw convertException("IOException reading " + inputFileName,e);  }}  }
class C{  public static void main(String[] args){  dumpSVUID(ProcessInfo.class);}  }
class C{  public void updatePanelAndScrollbars(){  insertUpperLeftWhitespaceIfNeeded();  removeUnnecessaryWhitespaceAroundDiagram();}  }
class C{  public void readExif(String inFileName) throws FileNotFoundException, IOException {  if (inFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  InputStream is=null;  try {    is=new BufferedInputStream(new FileInputStream(inFileName));    readExif(is);  } catch (  IOException e) {    closeSilently(is);    throw e;  }  is.close();}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.ENTITY_ATTRIBUTE_SOURCE;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void testStress() throws TimeoutException, InterruptedException, ExecutionException, ImmediateDownstreamReplicationException {  final long timeout=5000;  for (int i=0; i < 100; i++) {    final int sze=10000 + r.nextInt(300000);    final ByteBuffer tst=getRandomData(sze);    final HAMessageWrapper msg=newHAWriteMessage(sze,tst);    final ByteBuffer rcv=ByteBuffer.allocate(sze + r.nextInt(1024));    final Future<Void> futRec=receiveService.receiveData(msg,rcv);    final Future<Void> futSnd=sendService.send(tst,msg.getMarker());    futSnd.get(timeout,TimeUnit.MILLISECONDS);    futRec.get(timeout,TimeUnit.MILLISECONDS);    assertEquals(tst,rcv);  }}  }
class C{  private int addAttributeTo(CSSElement selector,int attrId,String value,HTMLComponent htmlC){  int error=selector.addAttribute(attrId,value);  reportAddAttributeError(error,selector,selector.getAttributeName(new Integer(attrId)),value,htmlC);  return error;}  }
class C{  public <T>T fromXML(final File file,final T root){  final HierarchicalStreamReader reader=hierarchicalStreamDriver.createReader(file);  try {    return unmarshal(reader,root);  }  finally {    reader.close();  }}  }
class C{  private void sendMailAboutModification(String instanceId,PropertyHandler paramHandler) throws APPlatformException {  String mail=paramHandler.getMailForNotification();  if (mail != null) {    Operation operationState=paramHandler.getOperation();    if (operationState.isModification()) {      String locale=paramHandler.getCustomerLocale();      String subject=Messages.get(locale,"mail_notify_about_modification.subject",new Object[]{instanceId});      String text=Messages.get(locale,"mail_notify_about_modification.text",new Object[]{instanceId});      platformService.sendMail(Collections.singletonList(mail),subject,text);    }  }}  }
class C{  private form printControlPanel(int activeNode,MWorkflow wf,MWFNode[] nodes,ArrayList nodes_ID){  form myForm=new form(FORM_ACTION,form.METHOD_POST,form.ENC_DEFAULT);  myForm.addElement(new input("hidden",M_Command,""));  myForm.addElement(new input("hidden",J_Command,""));  myForm.setTarget(TARGET_WINDOW);  myForm.setName(FORM_NAME);  boolean isFirst=wf.isFirst(activeNode,Env.getContextAsInt(ctx,"#AD_Client_ID"));  boolean isLast=wf.isLast(activeNode,Env.getContextAsInt(ctx,"#AD_Client_ID"));  int First_Window_ID=wf.getFirstNode().getAD_Window_ID();  int Last_Window_ID=nodes[nodes.length - 1].getAD_Window_ID();  int Back_Window_ID=0;  int Next_Window_ID=0;  int index=0;  if (!isFirst) {    index=activeNode >= 0 ? getIndex(activeNode,nodes_ID) - 1 : 0;    Back_Window_ID=nodes[index].getAD_Window_ID();  }  if (!isLast) {    index=activeNode >= 0 ? getIndex(activeNode,nodes_ID) + 1 : 0;    Next_Window_ID=nodes[index].getAD_Window_ID();  }  boolean enableFirst=true;  boolean enableBack=true;  boolean enableNext=true;  boolean enableLast=true;  if (isFirst) {    enableBack=false;    enableFirst=false;  }  if (isLast) {    enableNext=false;    enableLast=false;  }  td firstImage=new td();  td backImage=new td();  td nextImage=new td();  td lastImage=new td();  String url="'WWindow?AD_Window_ID=" + First_Window_ID + "'";  String Target_Window="'WWindow" + First_Window_ID + "'";  String parameters=url + "," + Target_Window;  String js_command="popUp(" + parameters + ");submit()";  firstImage.addElement(createControlButtonImage("Start",js_command,enableFirst));  url="'WWindow?AD_Window_ID=" + Back_Window_ID + "'";  Target_Window="'WWindow" + Back_Window_ID + "'";  parameters=url + "," + Target_Window;  js_command="popUp(" + parameters + ");submit()";  backImage.addElement(createControlButtonImage("Back",js_command,enableBack));  url="'WWindow?AD_Window_ID=" + Next_Window_ID + "'";  Target_Window="'WWindow" + Next_Window_ID + "'";  parameters=url + "," + Target_Window;  js_command="popUp(" + parameters + ");submit()";  nextImage.addElement(createControlButtonImage("Next",js_command,enableNext));  url="'WWindow?AD_Window_ID=" + Last_Window_ID + "'";  Target_Window="'WWindow" + Last_Window_ID + "'";  parameters=url + "," + Target_Window;  js_command="popUp(" + parameters + ");submit()";  lastImage.addElement(createControlButtonImage("End",js_command,enableLast));  tr aRow=new tr();  aRow.addElement(firstImage);  aRow.addElement(backImage);  aRow.addElement(nextImage);  aRow.addElement(lastImage);  myForm.addElement(new table().addElement(aRow));  return myForm;}  }
class C{  public String redirectToServiceList(){  String errorKey=(String)ui.getRequest().getAttribute(Constants.REQ_ATTR_ERROR_KEY);  if (errorKey != null && errorKey.length() > 0) {    ui.getRequest().setAttribute(Constants.REQ_ATTR_ERROR_KEY,BaseBean.ERROR_SERVICE_INVALID_KEY);  }  return BaseBean.OUTCOME_SHOW_SERVICE_LIST;}  }
class C{  public static boolean hasExternalDescription(Component component){  if (component instanceof Field && !(component instanceof DesktopCheckBox)) {    final String description=((Field)component).getDescription();    if (StringUtils.isNotEmpty(description)) {      return true;    }  }  return false;}  }
class C{  public static boolean linkSequenceHasUTurns(List<Link> links){  for (int i=1; i < links.size(); i++) {    if (links.get(i).getToNode().equals(links.get(i - 1).getFromNode())) {      return true;    }  }  return false;}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "PredictionAppender.gif",BeanVisual.ICON_PATH + "PredictionAppender_animated.gif");}  }
class C{  public String download(String siteUrl,Map<String,String> customProperties) throws IOException {  URL url=new URL(siteUrl);  HttpsURLConnection con=(HttpsURLConnection)url.openConnection();  Iterator it=customProperties.entrySet().iterator();  while (it.hasNext()) {    Map.Entry pair=(Map.Entry)it.next();    con.setRequestProperty((String)pair.getKey(),(String)pair.getValue());  }  return dl(con);}  }
class C{  public void invalidateCache(final int callingUser,String tableName){  SettingsCache cache=cacheForTable(callingUser,tableName);  if (cache == null) {    return;  }synchronized (cache) {    cache.evictAll();    cache.mCacheFullyMatchesDisk=false;  }}  }
class C{  public JSONWriter endObject() throws JSONException {  return this.end('k','}');}  }
class C{  protected void onInsertComplete(int token,Object cookie,Uri uri){  if (localLOGV) {    Log.d(TAG,"########## default onInsertComplete");  }}  }
class C{  protected void checkElementIsOuterMostInSingleAlt(GrammarAST tree){  CommonTree alt=tree.parent;  CommonTree blk=alt.parent;  boolean outerMostAlt=blk.parent.getType() == RULE;  Tree rule=tree.getAncestor(RULE);  String fileName=tree.getToken().getInputStream().getSourceName();  if (!outerMostAlt || blk.getChildCount() > 1) {    ErrorType e=ErrorType.LEXER_COMMAND_PLACEMENT_ISSUE;    g.tool.errMgr.grammarError(e,fileName,tree.getToken(),rule.getChild(0).getText());  }}  }
class C{  private void createRequiredEntities(){  this.createClientEntity();  this.createLoanProductEntity();  this.createLoanEntity();}  }
class C{  public boolean hasMoney(){  return hasRepeatingExtension(Money.class);}  }
class C{  @Override public boolean isLeaf(Object node){  if (node == root) {    return false;  }  return super.isLeaf(node);}  }
class C{  @Override public boolean isSigned(int param) throws SQLException {  try {    debugCodeCall("isSigned",param);    getParameter(param);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override protected void initData(){  this.initBitmapAndText();  this.initCache();}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.ClassAssignments);  ClassAssignmentsReportForm classListForm=(ClassAssignmentsReportForm)form;  request.setAttribute(Department.EXTERNAL_DEPT_ATTR_NAME,Department.findAllExternal(sessionContext.getUser().getCurrentAcademicSessionId()));  ClassAssignmentsReportSearchAction.setupGeneralFormFilters(sessionContext.getUser(),classListForm);  if (request.getParameter("sortBy") != null) {    classListForm.setSortBy((String)request.getParameter("sortBy"));    classListForm.setFilterAssignedRoom((String)request.getParameter("filterAssignedRoom"));    classListForm.setFilterManager((String)request.getParameter("filterManager"));    classListForm.setFilterIType((String)request.getParameter("filterIType"));    classListForm.setFilterAssignedTimeMon(request.getParameter("filterAssignedTimeMon") == null ? false : Boolean.getBoolean((String)request.getParameter("filterAssignedTimeMon")));    classListForm.setFilterAssignedTimeTue(request.getParameter("filterAssignedTimeTue") == null ? false : Boolean.getBoolean((String)request.getParameter("filterAssignedTimeTue")));    classListForm.setFilterAssignedTimeWed(request.getParameter("filterAssignedTimeWed") == null ? false : Boolean.getBoolean((String)request.getParameter("filterAssignedTimeWed")));    classListForm.setFilterAssignedTimeThu(request.getParameter("filterAssignedTimeThu") == null ? false : Boolean.getBoolean((String)request.getParameter("filterAssignedTimeThu")));    classListForm.setFilterAssignedTimeFri(request.getParameter("filterAssignedTimeFri") == null ? false : Boolean.getBoolean((String)request.getParameter("filterAssignedTimeFri")));    classListForm.setFilterAssignedTimeSat(request.getParameter("filterAssignedTimeSat") == null ? false : Boolean.getBoolean((String)request.getParameter("filterAssignedTimeSat")));    classListForm.setFilterAssignedTimeSun(request.getParameter("filterAssignedTimeSun") == null ? false : Boolean.getBoolean((String)request.getParameter("filterAssignedTimeSun")));    classListForm.setFilterAssignedTimeHour((String)request.getParameter("filterAssignedTimeHour"));    classListForm.setFilterAssignedTimeMin((String)request.getParameter("filterAssignedTimeMin"));    classListForm.setFilterAssignedTimeAmPm((String)request.getParameter("filterAssignedTimeAmPm"));    classListForm.setFilterAssignedTimeLength((String)request.getParameter("filterAssignedTimeLength"));    classListForm.setSortByKeepSubparts(Boolean.getBoolean((String)request.getParameter("sortByKeepSubparts")));  }  classListForm.setSubjectAreas(SubjectArea.getAllSubjectAreas(sessionContext.getUser().getCurrentAcademicSessionId()));  Object sas=sessionContext.getAttribute(SessionAttribute.ClassAssignmentsSubjectAreas);  if (sas != null && sas.toString().trim().length() > 0) {    String subjectAreaIds=sas.toString();    try {      Debug.debug("Subject Areas: " + subjectAreaIds);      classListForm.setSubjectAreaIds(subjectAreaIds.split(","));      classListForm.setClasses(ClassSearchAction.getClasses(classListForm,classAssignmentService.getAssignment()));      Collection classes=classListForm.getClasses();      if (classes.isEmpty()) {        ActionMessages errors=new ActionMessages();        errors.add("searchResult",new ActionMessage("errors.generic","No records matching the search criteria were found."));        saveErrors(request,errors);        return mapping.findForward("showClassAssignmentsReportSearch");      } else {        StringBuffer ids=new StringBuffer();        StringBuffer names=new StringBuffer();        for (int i=0; i < classListForm.getSubjectAreaIds().length; i++) {          if (i > 0)           names.append(",");          ids.append("&subjectAreaIds=" + classListForm.getSubjectAreaIds()[i]);          names.append(((new SubjectAreaDAO()).get(new Long(classListForm.getSubjectAreaIds()[i]))).getSubjectAreaAbbreviation());        }        BackTracker.markForBack(request,"classAssignmentsReportSearch.do?doit=Search&loadFilter=1" + ids,"Class Assignments (" + names + ")",true,true);        return mapping.findForward("showClassAssignmentsReportList");      }    } catch (    NumberFormatException nfe) {      Debug.error("Subject Area Ids session attribute is corrupted. Resetting ... ");      sessionContext.removeAttribute(SessionAttribute.ClassAssignmentsSubjectAreas);    }  }  return mapping.findForward("showClassAssignmentsReportSearch");}  }
class C{  public void addListener(INotifyChangedListener notifyChangedListener){  changeNotifier.addListener(notifyChangedListener);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.412 -0400",hash_original_method="751857C5E4D69A99F28EE0FD9CDE7C37",hash_generated_method="5FC4A9C28D48F4F0E1301A6AFFA6475D") public static void writeSwappedFloat(byte[] data,int offset,float value){  writeSwappedInteger(data,offset,Float.floatToIntBits(value));}  }
class C{  @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){  mInflater=LayoutInflater.from(parent.getContext());switch (viewType) {case R.layout.recycler_layout_item:    return new LayoutItem.ExampleViewHolder(mInflater.inflate(viewType,parent,false),this);default :  return new OverallItem.LabelViewHolder(mInflater.inflate(viewType,parent,false),this);}}  }
class C{  @Bean public ServletListenerRegistrationBean<HttpSessionEventPublisher> httpSessionEventPublisher(){  return new ServletListenerRegistrationBean<>(new HttpSessionEventPublisher());}  }
class C{  public Command prepareCommand(String sql){  try {    Prepared p=parse(sql);    boolean hasMore=isToken(";");    if (!hasMore && currentTokenType != END) {      throw getSyntaxError();    }    p.prepare();    Command c=new CommandContainer(this,sql,p);    if (hasMore) {      String remaining=originalSQL.substring(parseIndex);      if (remaining.trim().length() != 0) {        CommandList list=new CommandList(this,sql,c,remaining);        c=list;      }    }    return c;  } catch (  DbException e) {    throw e.addSQL(originalSQL);  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static short[] toShortArray(Double[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].shortValue();  }  return result;}  }
class C{  public static int ccw(Point2D a,Point2D b,Point2D c){  double area2=(b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);  if (area2 < 0)   return -1; else   if (area2 > 0)   return +1; else   return 0;}  }
class C{  private static Vector<CModuleWrapper> generateTargetBoxVector(final IDatabase database,final INaviModule sourceModule){  final Vector<CModuleWrapper> wrappers=new Vector<CModuleWrapper>();  for (  final INaviModule module : database.getContent().getModules()) {    if (module == sourceModule) {      continue;    }    wrappers.add(new CModuleWrapper(module));  }  return wrappers;}  }
class C{  public void activateOptions(){  if (JUnitAppender.instance != null) {    System.err.println("JUnitAppender initialized more than once");  } else {    JUnitAppender.instance=this;  }  super.activateOptions();}  }
class C{  public AnimatableAngleValue(AnimationTarget target,float v,short unit){  super(target,v);  this.unit=unit;}  }
class C{  public Union(final SummaryFactory<S> summaryFactory){  this(DEFAULT_NOMINAL_ENTRIES,summaryFactory);}  }
class C{  public PKCS5S1ParametersGenerator(Digest digest){  this.digest=digest;}  }
class C{  public StaticWriteAccessFilterScope(IScope parent,EObject context){  super(parent);  this.context=context;}  }
class C{  @HLEFunction(nid=0x3B84732D,version=150) public void sceKernelCpuResumeIntrWithSync(int flagInterrupts){  hleKernelCpuResumeIntr(flagInterrupts);}  }
class C{  public String decodeAttribute(final String name){  return nameCoder.decodeAttribute(name);}  }
class C{  public void flip(FlipDirection dir){  flip(dir,false);}  }
class C{  public static <T>T max(T[] self,Comparator<T> comparator){  return max((Iterable<T>)toList(self),comparator);}  }
class C{  public HasChildQueryBuilder maxChildren(int maxChildren){  this.maxChildren=maxChildren;  return this;}  }
class C{  public int findSegment(Point2D.Double find,double tolerance){  return getBezierPath().findSegment(find,tolerance);}  }
class C{  public BigInteger calculateSecret(BigInteger clientA) throws CryptoException {  this.A=SRP6Util.validatePublicValue(N,clientA);  this.u=SRP6Util.calculateU(digest,N,A,B);  this.S=calculateS();  return S;}  }
class C{  public String stacktrace(){  return stacktrace;}  }
class C{  public int score(){  return score;}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  this.id=in.readInt();}  }
class C{  @Override public Node next(){  Node cur=this.nodelist.item(this.index);  this.index++;  return cur;}  }
class C{  protected ColumnImpl mutateAddColumn(TableUpdater mutator) throws IOException {  ColumnBuilder column=mutator.getColumn();  JetFormat format=mutator.getFormat();  boolean isVarCol=column.isVariableLength();  boolean isLongVal=column.getType().isLongValue();  if (isLongVal) {    mutator.addTdefLen(10);  }  mutator.addTdefLen(format.SIZE_COLUMN_DEF_BLOCK);  int nameByteLen=DBMutator.calculateNameLength(column.getName());  mutator.addTdefLen(nameByteLen);  ByteBuffer tableBuffer=loadCompleteTableDefinitionBufferForUpdate(mutator);  ColumnImpl newCol=null;  int umapPos=-1;  boolean success=false;  try {    ByteUtil.forward(tableBuffer,29);    tableBuffer.putShort((short)(_maxColumnCount + 1));    short varColCount=(short)(_varColumns.size() + (isVarCol ? 1 : 0));    tableBuffer.putShort(varColCount);    tableBuffer.putShort((short)(_columns.size() + 1));    tableBuffer.position(format.SIZE_TDEF_HEADER + (_indexCount * format.SIZE_INDEX_DEFINITION) + (_columns.size() * format.SIZE_COLUMN_DEF_BLOCK));    int fixedOffset=0;    int varOffset=0;    if (column.isVariableLength()) {      for (      ColumnImpl col : _varColumns) {        if (col.getVarLenTableIndex() >= varOffset) {          varOffset=col.getVarLenTableIndex() + 1;        }      }    } else {      for (      ColumnImpl col : _columns) {        if (!col.isVariableLength() && (col.getFixedDataOffset() >= fixedOffset)) {          fixedOffset=col.getFixedDataOffset() + col.getType().getFixedSize(col.getLength());        }      }    }    mutator.setColumnOffsets(fixedOffset,varOffset,varOffset);    int colDefPos=tableBuffer.position();    ByteUtil.insertEmptyData(tableBuffer,format.SIZE_COLUMN_DEF_BLOCK);    ColumnImpl.writeDefinition(mutator,column,tableBuffer);    skipNames(tableBuffer,_columns.size());    ByteUtil.insertEmptyData(tableBuffer,nameByteLen);    writeName(tableBuffer,column.getName(),mutator.getCharset());    if (isLongVal) {      Map.Entry<Integer,Integer> umapInfo=addUsageMaps(2,null);      TableMutator.ColumnState colState=mutator.getColumnState(column);      colState.setUmapPageNumber(umapInfo.getKey());      byte rowNum=umapInfo.getValue().byteValue();      colState.setUmapOwnedRowNumber(rowNum);      colState.setUmapFreeRowNumber((byte)(rowNum + 1));      ByteUtil.forward(tableBuffer,(_indexCount * format.SIZE_INDEX_COLUMN_BLOCK));      ByteUtil.forward(tableBuffer,(_logicalIndexCount * format.SIZE_INDEX_INFO_BLOCK));      skipNames(tableBuffer,_logicalIndexCount);      while (tableBuffer.remaining() >= 2) {        if (tableBuffer.getShort() == IndexData.COLUMN_UNUSED) {          ByteUtil.forward(tableBuffer,-2);          break;        }        ByteUtil.forward(tableBuffer,8);      }      umapPos=tableBuffer.position();      ByteUtil.insertEmptyData(tableBuffer,10);      ColumnImpl.writeColUsageMapDefinition(mutator,column,tableBuffer);    }    validateTableDefUpdate(mutator,tableBuffer);    newCol=ColumnImpl.create(this,tableBuffer,colDefPos,column.getName(),_columns.size());    newCol.setColumnIndex(_columns.size());    writeTableDefinitionBuffer(tableBuffer,_tableDefPageNumber,mutator,mutator.getNextPages());    success=true;  }  finally {    if (!success) {      _tableDefBufferH.invalidate();    }  }  _columns.add(newCol);  ++_maxColumnCount;  if (newCol.isVariableLength()) {    _varColumns.add(newCol);    ++_maxVarColumnCount;  }  if (newCol.isAutoNumber()) {    _autoNumColumns.add(newCol);  }  if (umapPos >= 0) {    tableBuffer.position(umapPos);    readColumnUsageMaps(tableBuffer);  }  newCol.postTableLoadInit();  if (!isSystem()) {    newCol.setColumnValidator(null);  }  Map<String,PropertyMap.Property> colProps=column.getProperties();  if (colProps != null) {    newCol.getProperties().putAll(colProps.values());    getProperties().save();  }  completeTableMutation(tableBuffer);  return newCol;}  }
class C{  private void init(String networkFile,String transitScheduleInFile){  Config config=ConfigUtils.createConfig();  config.transit().setUseTransit(true);  config.network().setInputFile(networkFile);  config.transit().setTransitScheduleFile(transitScheduleInFile);  this.scenario=(MutableScenario)ScenarioUtils.loadScenario(config);  ;}  }
class C{  public void createEquiAngle(float radius,int numRotations,int numSamples,Callback2d callback){  for (int sample=0; sample < numSamples; sample++) {    float angle=2.0f * (float)Math.PI * (sample * numRotations) / numSamples;    float r=radius * sample / (numSamples - 1);    float x=(float)Math.sin_roquen_9(angle + 0.5f * (float)Math.PI) * r;    float y=(float)Math.sin_roquen_9(angle) * r;    callback.onNewSample(x,y);  }}  }
class C{  public void testExport_csv(){  testExport(TrackFileFormat.CSV);}  }
class C{  public TypeAccessModifier createTypeAccessModifierFromString(EDataType eDataType,String initialValue){  TypeAccessModifier result=TypeAccessModifier.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  protected <S extends Struct>S inner(S struct){  if (struct._outer != null)   throw new IllegalArgumentException("struct: Already an inner struct");  Member inner=new Member(struct.size() << 3,struct._alignment);  struct._outer=this;  struct._outerOffset=inner.offset();  return (S)struct;}  }
class C{  private void updateListener(){  mAnimatorSet.addListener(repeatAnimatorListener);}  }
class C{  public Instantiation findOwner(final int i){  if (!subroutine.get(i)) {    return null;  }  if (!dualCitizens.get(i)) {    return this;  }  Instantiation own=this;  for (Instantiation p=previous; p != null; p=p.previous) {    if (p.subroutine.get(i)) {      own=p;    }  }  return own;}  }
class C{  public void updateEnabled(boolean interrupted){  for (int i=0; i != interruptOnlyItems.size(); ++i) {    JMenuItem item=interruptOnlyItems.get(i);    item.setEnabled(interrupted);  }  for (int i=0; i != runOnlyItems.size(); ++i) {    JMenuItem item=runOnlyItems.get(i);    item.setEnabled(!interrupted);  }}  }
class C{  protected Expression group(int opPos) throws TransformerException {  return compile(opPos + 2);}  }
class C{  static RegisterOperand InsertLoadOffset(Instruction s,IR ir,Operator operator,TypeReference type,Operand reg2,Offset offset,LocationOperand loc,Operand guard){  return InsertLoadOffset(s,ir,operator,type,reg2,AC(offset),loc,guard);}  }
class C{  public final AC sizeGroup(String s){  return sizeGroup(s,curIx);}  }
class C{  public JsonObject convertDocumentConfig(){  return convertDocumentConfig;}  }
class C{  private List<String> tokenizeString(String input){  List<String> matchList=new ArrayList<>();  Pattern regex=Pattern.compile("[^\\s\"']+|\"([^\"]*)\"|'([^']*)'");  Matcher regexMatcher=regex.matcher(input);  while (regexMatcher.find()) {    if (regexMatcher.group(1) != null) {      matchList.add(regexMatcher.group(1));    } else     if (regexMatcher.group(2) != null) {      matchList.add(regexMatcher.group(2));    } else {      matchList.add(regexMatcher.group());    }  }  return matchList;}  }
class C{  public GroovyBugError(String msg,Exception exception){  this.exception=exception;  this.message=msg;}  }
class C{  private void addRequestedPrincipalIntoContext(final AuthenticationContext ac,final List<Principal> principals){  final RequestedPrincipalContext rpc=new RequestedPrincipalContext();  rpc.setOperator("exact");  rpc.setRequestedPrincipals(principals);  ac.addSubcontext(rpc,true);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void changeLanguage(int language){  Typeface typeface;  String message;switch (language) {case SINHALA:    typeface=Typeface.createFromAsset(getAssets(),"fonts/akandynew.ttf");  message=getResources().getString(R.string.welcome_sh);break;case TAMIL:typeface=Typeface.createFromAsset(getAssets(),"fonts/baamini.ttf");message=getResources().getString(R.string.welcome_ta);break;default :typeface=Typeface.createFromAsset(getAssets(),"fonts/droidlogo.ttf");message=getResources().getString(R.string.welcome_en);break;}this.txtWelcome.setTypeface(typeface);this.txtWelcome.setText(message);this.txtWelcome.setTextSize(25.0f);}  }
class C{  public void testHashCode(){  RelativeDateFormat df1=new RelativeDateFormat(123L);  RelativeDateFormat df2=new RelativeDateFormat(123L);  assertTrue(df1.equals(df2));  int h1=df1.hashCode();  int h2=df2.hashCode();  assertEquals(h1,h2);}  }
class C{  public boolean isEmpty(){  return ((values == null) || (values.isEmpty()));}  }
class C{  public QName(String localName,boolean validate){  if (localName == null)   throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_NULL,null));  if (validate) {    if (!XML11Char.isXML11ValidNCName(localName)) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  _namespaceURI=null;  _localName=localName;  m_hashCode=toString().hashCode();}  }
class C{  public void load(X509CRLEntry[] revokedCerts){  TreeMap<BigInteger,X509CRLEntry> sortedRevokedCerts=new TreeMap<BigInteger,X509CRLEntry>();  for (int i=0; i < revokedCerts.length; i++) {    sortedRevokedCerts.put(revokedCerts[i].getSerialNumber(),revokedCerts[i]);  }  data=new Object[sortedRevokedCerts.size()][2];  int i=0;  for (Iterator itr=sortedRevokedCerts.entrySet().iterator(); itr.hasNext(); i++) {    X509CRLEntry x509CrlEntry=(X509CRLEntry)((Map.Entry)itr.next()).getValue();    data[i][0]=x509CrlEntry.getSerialNumber();    data[i][1]=x509CrlEntry.getRevocationDate();  }  fireTableDataChanged();}  }
class C{  @LargeTest public void testWifiDownload() throws Exception {  mConnectionUtil.wifiTestInit();  assertTrue("Could not connect to wifi!",setDeviceWifiAndAirplaneMode(mSsid));  downloadFile();}  }
class C{  MalformedMIMETypeException(String nreason,String type){  super(nreason);  this.type=type;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean b=evalBool(stack.pop());  getCapDevInput(stack).setCableTV(b);  return null;}  }
class C{  AllocatedNativeObject(int size,boolean pageAligned){  super(size,pageAligned);}  }
class C{  private void unshareMain(){  int[] old=_mainHash;  int len=_mainHash.length;  _mainHash=new int[len];  System.arraycopy(old,0,_mainHash,0,len);  _mainHashShared=false;}  }
class C{  private Base64(){}  }
class C{  public boolean isSwimlaneContentEnabled(){  return swimlaneContentEnabled;}  }
class C{  public AtlasMessagesRecyclerView addCellFactories(AtlasCellFactory... cellFactories){  mAdapter.addCellFactories(cellFactories);  return this;}  }
class C{  private void performGpsUpdate(final Location gpsLocation,final String source){  if (gpsLocation == null) {    Log.e(TAG,"No GPS position available");    return;  }  final PositionRecord pos=new PositionRecord(gpsLocation,mSessionId,source);  mDataHelper.storePosition(pos);}  }
class C{  private static int hashCode(final Object[] array){  if (array == null)   return 0;  int result=1;  for (int index=0; index < array.length; index++)   result=31 * result + (array[index] == null ? 0 : array[index].hashCode());  return result;}  }
class C{  public static Card[] makeDeck(){  Card[] cards=new Card[52];  int index=0;  for (int suit=0; suit <= 3; suit++) {    for (int rank=1; rank <= 13; rank++) {      cards[index]=new Card(rank,suit);      index++;    }  }  return cards;}  }
class C{  private void writeHex(int i) throws IOException {  int cursor=8;  do {    hex[--cursor]=HEX_DIGITS[i & 0xf];  } while ((i>>>=4) != 0);  socketOut.write(hex,cursor,hex.length - cursor);}  }
class C{  public void testNamedGridGetOrStart() throws Exception {  IgniteConfiguration cfg=getConfiguration("test");  try (Ignite ignite=Ignition.getOrStart(cfg)){    try {      Ignition.start(cfg);      fail("Expected exception after grid started");    } catch (    IgniteException ignored) {    }    Ignite ignite2=Ignition.getOrStart(cfg);    assertEquals("Must return same instance",ignite,ignite2);  } }  }
class C{  public void init(){  if (interpreter == null) {    interpreter=new Interpreter();  }  try {    interpreter.set("network",network);    interpreter.eval(scriptString);    theAction=((NetworkUpdateAction)interpreter.get("action"));  } catch (  EvalError e) {    e.printStackTrace();  }}  }
class C{  public TextAppearanceSpan(Context context,int appearance,int colorList){  ColorStateList textColor;  TypedArray a=context.obtainStyledAttributes(appearance,com.android.internal.R.styleable.TextAppearance);  textColor=a.getColorStateList(com.android.internal.R.styleable.TextAppearance_textColor);  mTextColorLink=a.getColorStateList(com.android.internal.R.styleable.TextAppearance_textColorLink);  mTextSize=a.getDimensionPixelSize(com.android.internal.R.styleable.TextAppearance_textSize,-1);  mStyle=a.getInt(com.android.internal.R.styleable.TextAppearance_textStyle,0);  String family=a.getString(com.android.internal.R.styleable.TextAppearance_fontFamily);  if (family != null) {    mTypeface=family;  } else {    int tf=a.getInt(com.android.internal.R.styleable.TextAppearance_typeface,0);switch (tf) {case 1:      mTypeface="sans";    break;case 2:  mTypeface="serif";break;case 3:mTypeface="monospace";break;default :mTypeface=null;break;}}a.recycle();if (colorList >= 0) {a=context.obtainStyledAttributes(com.android.internal.R.style.Theme,com.android.internal.R.styleable.Theme);textColor=a.getColorStateList(colorList);a.recycle();}mTextColor=textColor;}  }
class C{  protected void updateCellEditor(){  TreeCellEditor newEditor;  completeEditing();  if (tree == null)   newEditor=null; else {    if (tree.isEditable()) {      newEditor=tree.getCellEditor();      if (newEditor == null) {        newEditor=createDefaultCellEditor();        if (newEditor != null) {          tree.setCellEditor(newEditor);          createdCellEditor=true;        }      }    } else     newEditor=null;  }  if (newEditor != cellEditor) {    if (cellEditor != null && cellEditorListener != null)     cellEditor.removeCellEditorListener(cellEditorListener);    cellEditor=newEditor;    if (cellEditorListener == null)     cellEditorListener=createCellEditorListener();    if (newEditor != null && cellEditorListener != null)     newEditor.addCellEditorListener(cellEditorListener);    createdCellEditor=false;  }}  }
class C{  public void endElement(String namespaceURI,String localName,String name) throws org.xml.sax.SAXException {  if (m_inEntityRef)   return;  m_prefixMap.popNamespaces(m_elemContext.m_currentElemDepth,null);  try {    final java.io.Writer writer=m_writer;    if (m_elemContext.m_startTagOpen) {      if (m_tracer != null)       super.fireStartElem(m_elemContext.m_elementName);      int nAttrs=m_attributes.getLength();      if (nAttrs > 0) {        processAttributes(m_writer,nAttrs);        m_attributes.clear();      }      if (m_spaceBeforeClose)       writer.write(" />"); else       writer.write("/>");    } else {      if (m_cdataTagOpen)       closeCDATA();      if (shouldIndent())       indent(m_elemContext.m_currentElemDepth - 1);      writer.write('<');      writer.write('/');      writer.write(name);      writer.write('>');    }  } catch (  IOException e) {    throw new SAXException(e);  }  if (!m_elemContext.m_startTagOpen && m_doIndent) {    m_ispreserve=m_preserves.isEmpty() ? false : m_preserves.pop();  }  m_isprevtext=false;  if (m_tracer != null)   super.fireEndElem(name);  m_elemContext=m_elemContext.m_prev;}  }
class C{  public CF8(int numberOfVariables){  super(numberOfVariables,3,1);}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  public boolean up(){  if (isWithinCurrentMonth(mRow - 1,mColumn)) {    mRow--;    return false;  }  previousMonth();  mRow=5;  while (!isWithinCurrentMonth(mRow,mColumn)) {    mRow--;  }  return true;}  }
class C{  public void unsetParameter(String name){  parameters.remove(name);}  }
class C{  public Object clone(){  CharArrayList clone=new CharArrayList((char[])elements.clone());  clone.setSizeRaw(size);  return clone;}  }
class C{  private void validateAmbitos(HttpServletRequest request,ActionErrors errors){  String[] codRefObjetosAmbito=getCodRefObjetosAmbito(request);  String[] nombreObjetosAmbito=getNombreObjetosAmbito(request);  if (!ArrayUtils.isEmpty(codRefObjetosAmbito)) {    String[] codRefs=(String[])ArrayUtils.clone(codRefObjetosAmbito);    for (int i=codRefs.length - 1; i >= 0; i--) {      if (StringUtils.isBlank(codRefs[i]))       codRefs=(String[])ArrayUtils.remove(codRefs,i); else {        for (int j=i - 1; j >= 0; j--) {          if (codRefs[i].equals(codRefs[j])) {            errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_AMBITO_REPETIDO,nombreObjetosAmbito[i]));          } else           if (StringUtils.indexOf(codRefs[i],codRefs[j]) == 0) {            errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_AMBITO_CONTENIDO,nombreObjetosAmbito[i],nombreObjetosAmbito[j]));          } else           if (StringUtils.indexOf(codRefs[j],codRefs[i]) == 0) {            errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_AMBITO_CONTENIDO,nombreObjetosAmbito[j],nombreObjetosAmbito[i]));          }        }      }    }  }}  }
class C{  public var addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  AttributeMetadataRegistryBuilder(MetadataRegistry root){  this.root=root;}  }
class C{  public NotificationChain basicSetQuantifier(Quantifier newQuantifier,NotificationChain msgs){  Quantifier oldQuantifier=quantifier;  quantifier=newQuantifier;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,RegularExpressionPackage.PATTERN__QUANTIFIER,oldQuantifier,newQuantifier);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void testInsert1() throws SQLException {  DatabaseCreator.fillParentTable(conn);  DatabaseCreator.fillFKStrictTable(conn);  DatabaseCreator.fillFKCascadeTable(conn);  statement.execute("INSERT INTO " + DatabaseCreator.FKSTRICT_TABLE + " VALUES(4, 1, 'testInsert')");  statement.execute("INSERT INTO " + DatabaseCreator.FKCASCADE_TABLE + " VALUES(4, 1, 'testInsert')");}  }
class C{  public void write(ExceptionlessOutputStream out){  sizes.write(out);  for (int i=0; i < sizes.size(); ++i)   for (int j=0; j < sizes.get(i); ++j)   out.writeInt(vector[i][j]);  out.writeInt(defaultCapacity2);}  }
class C{  public static String shortenDbName(String dbName,int desiredLength){  StringBuilder dbBuf=new StringBuilder(dbName);  if (dbBuf.length() > desiredLength) {    for (int i=dbBuf.length() - 1; i > 0; i--) {      if (dbBuf.charAt(i - 1) == '_') {        continue;      }      char curChar=dbBuf.charAt(i);      if (vowelBag.indexOf(curChar) > 0) {        dbBuf.deleteCharAt(i);      }    }  }  while (dbBuf.indexOf("__") > 0) {    dbBuf.deleteCharAt(dbBuf.indexOf("__"));  }  while (dbBuf.length() > desiredLength) {    boolean removedChars=false;    int usIndex=dbBuf.lastIndexOf("_");    while (usIndex > 0 && dbBuf.length() > desiredLength) {      int prevUsIndex=dbBuf.lastIndexOf("_",usIndex - 1);      if (prevUsIndex < 0 && usIndex < 4) {        break;      }      if (prevUsIndex >= 0 && (usIndex - prevUsIndex) <= 4) {        usIndex=prevUsIndex;        continue;      }      dbBuf.deleteCharAt(usIndex - 2);      removedChars=true;      if (usIndex > 2) {        usIndex=dbBuf.lastIndexOf("_",usIndex - 2);      } else {        break;      }    }    if (dbBuf.length() > desiredLength) {      int removeIndex=dbBuf.length() - 1;      int prevRemoveIndex=dbBuf.lastIndexOf("_",removeIndex - 1);      if (prevRemoveIndex < 0 || (removeIndex - prevRemoveIndex) >= 3) {        dbBuf.deleteCharAt(removeIndex - 1);        removedChars=true;      }    }    while (dbBuf.indexOf("__") > 0) {      dbBuf.deleteCharAt(dbBuf.indexOf("__"));      removedChars=true;    }    if (!removedChars) {      break;    }  }  while (dbBuf.indexOf("__") > 0) {    dbBuf.deleteCharAt(dbBuf.indexOf("__"));  }  while (dbBuf.length() > desiredLength) {    int firstUs=dbBuf.indexOf("_");    if (firstUs > 0) {      int nextUs=dbBuf.indexOf("_",firstUs + 1);      if (nextUs > 0) {        dbBuf.delete(firstUs,nextUs);      }    }  }  return dbBuf.toString();}  }
class C{  public _CheckinOptions(){  super();}  }
class C{  public boolean hasDefaultsForCheckedCode(){  for (  Default def : checkedCodeDefaults) {    if (def.location == TypeUseLocation.OTHERWISE || def.location == TypeUseLocation.ALL) {      return true;    }  }  return false;}  }
class C{  public final void testToString01(){  CollectionCertStoreParameters cp=new CollectionCertStoreParameters();  String s=cp.toString();  assertNotNull(s);}  }
class C{  public static GridPaneEx paneEx(double top,double right,double bottom,double left){  GridPaneEx paneEx=new GridPaneEx();  paneEx.setPadding(new Insets(top,right,bottom,left));  return paneEx;}  }
class C{  public String[] apply(String city){  return map.get(city);}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  @Nonnull public BugInstance addClass(JavaClass jclass){  addClass(jclass.getClassName());  return this;}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();}  }
class C{  @Override public void updateNString(String columnLabel,String x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateNString(" + quote(columnLabel) + ", "+ quote(x)+ ");");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueString.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected void onDeleteComplete(int token,Object cookie,int result){}  }
class C{  public Locale chooseLanguage(String localeAsStr){  Locale locale=new Locale(localeAsStr);  if (mTts.isLanguageAvailable(locale) >= 0) {    Log.i("Chose TTS: " + localeAsStr + " -> "+ locale);    return locale;  }  List<Locale> similarLocales=TtsLocaleMapper.getSimilarLocales(locale);  if (similarLocales != null) {    for (    Locale l : similarLocales) {      if (mTts.isLanguageAvailable(l) >= 0) {        Log.i("Chose TTS: " + localeAsStr + " -> "+ l+ " from "+ similarLocales);        return l;      }    }  }  Log.i("Chose TTS: " + localeAsStr + " -> NULL from "+ similarLocales);  return null;}  }
class C{  public void invokeAPI(EndPointInfo apiEndPointInfo,APIResultCallBack apiResultCallBack,int requestCode,Context context){  this.apiResultCallback=apiResultCallBack;  this.apiEndPointInfo=apiEndPointInfo;  if (IdentityProxy.getInstance().getContext() == null) {    IdentityProxy.getInstance().setContext(context);  }  IdentityProxy.getInstance().setRequestCode(requestCode);  IdentityProxy.getInstance().requestToken(IdentityProxy.getInstance().getContext(),this,this.clientKey,this.clientSecret);}  }
class C{  private void prepareNames(){  permitted_names=new ArrayList[9];  if (permittedSubtrees != null) {    for (    GeneralSubtree generalSubtree : permittedSubtrees.getSubtrees()) {      GeneralName name=generalSubtree.getBase();      int tag=name.getTag();      if (permitted_names[tag] == null) {        permitted_names[tag]=new ArrayList<GeneralName>();      }      permitted_names[tag].add(name);    }  }  excluded_names=new ArrayList[9];  if (excludedSubtrees != null) {    for (    GeneralSubtree generalSubtree : excludedSubtrees.getSubtrees()) {      GeneralName name=generalSubtree.getBase();      int tag=name.getTag();      if (excluded_names[tag] == null) {        excluded_names[tag]=new ArrayList<GeneralName>();      }      excluded_names[tag].add(name);    }  }}  }
class C{  protected void updateRowCount(){  int maxrow=m_rows.getMaximumRow() + 1;  Iterator cols=getColumns();  while (cols.hasNext()) {    Column c=(Column)cols.next();    c.setMaximumRow(maxrow);  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  protected void fireExecutionDetailsEnd(ConcurrentHashMap<Integer,TradeOrder> execDetails){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).executionDetailsEnd(execDetails);    }  }}  }
class C{  private void configureTimezone() throws SQLException {  String configuredTimeZoneOnServer=this.serverVariables.get("timezone");  if (configuredTimeZoneOnServer == null) {    configuredTimeZoneOnServer=this.serverVariables.get("time_zone");    if ("SYSTEM".equalsIgnoreCase(configuredTimeZoneOnServer)) {      configuredTimeZoneOnServer=this.serverVariables.get("system_time_zone");    }  }  String canonicalTimezone=getServerTimezone();  if ((getUseTimezone() || !getUseLegacyDatetimeCode()) && configuredTimeZoneOnServer != null) {    if (canonicalTimezone == null || StringUtils.isEmptyOrWhitespaceOnly(canonicalTimezone)) {      try {        canonicalTimezone=TimeUtil.getCanonicalTimezone(configuredTimeZoneOnServer,getExceptionInterceptor());      } catch (      IllegalArgumentException iae) {        throw SQLError.createSQLException(iae.getMessage(),SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());      }    }  }  if (canonicalTimezone != null && canonicalTimezone.length() > 0) {    this.serverTimezoneTZ=TimeZone.getTimeZone(canonicalTimezone);    if (!canonicalTimezone.equalsIgnoreCase("GMT") && this.serverTimezoneTZ.getID().equals("GMT")) {      throw SQLError.createSQLException("No timezone mapping entry for '" + canonicalTimezone + "'",SQLError.SQL_STATE_ILLEGAL_ARGUMENT,getExceptionInterceptor());    }    this.isServerTzUTC=!this.serverTimezoneTZ.useDaylightTime() && this.serverTimezoneTZ.getRawOffset() == 0;  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public void testUnsizedIntsCountSeq(){  LongAdder counter=new LongAdder();  Random r=new Random();  long size=100;  r.ints().limit(size).forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public static jMatrix random(int m,int n){  jMatrix A=new jMatrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=Math.random();    }  }  return A;}  }
class C{  public BoundingBox(Vector3 minimum,Vector3 maximum){  crn_dirty=true;  for (int l_idx=0; l_idx < 8; l_idx++)   crn[l_idx]=new Vector3();  this.set(minimum,maximum);}  }
class C{  public String invertSelectionTipText(){  return "Determines whether selected attributes are to be acted " + "on or all other attributes are used instead.";}  }
class C{  @Override public void handleError(Exception cause){  logger.logWarn(Log4jLogger.SYSTEM_LOG,cause,LogMessageIdentifier.ERROR_BULK_USER_IMPORT_FAILED,payload.getInfo());}  }
class C{  public void afterBeanDiscovery(@Observes final AfterBeanDiscovery event,BeanManager beanManager){  event.addContext(new RedirectScopeContext());}  }
class C{  public ProtocolDecoderException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Import9Patch(java.awt.Component parent,EditableResources res,String theme){  super((java.awt.Frame)SwingUtilities.windowForComponent(parent),true);  this.res=res;  this.theme=theme;  initComponents();  AddThemeEntry.initUIIDComboBox(uiidCombo);  pack();  setLocationByPlatform(true);  setVisible(true);}  }
class C{  public final static byte[] encodeToByte(byte[] arr,boolean lineSep){  int len=arr != null ? arr.length : 0;  if (len == 0) {    return new byte[0];  }  int evenlen=(len / 3) * 3;  int cnt=((len - 1) / 3 + 1) << 2;  int destlen=cnt + (lineSep ? (cnt - 1) / 76 << 1 : 0);  byte[] dest=new byte[destlen];  for (int s=0, d=0, cc=0; s < evenlen; ) {    int i=(arr[s++] & 0xff) << 16 | (arr[s++] & 0xff) << 8 | (arr[s++] & 0xff);    dest[d++]=(byte)CHARS[(i >>> 18) & 0x3f];    dest[d++]=(byte)CHARS[(i >>> 12) & 0x3f];    dest[d++]=(byte)CHARS[(i >>> 6) & 0x3f];    dest[d++]=(byte)CHARS[i & 0x3f];    if (lineSep && ++cc == 19 && d < destlen - 2) {      dest[d++]='\r';      dest[d++]='\n';      cc=0;    }  }  int left=len - evenlen;  if (left > 0) {    int i=((arr[evenlen] & 0xff) << 10) | (left == 2 ? ((arr[len - 1] & 0xff) << 2) : 0);    dest[destlen - 4]=(byte)CHARS[i >> 12];    dest[destlen - 3]=(byte)CHARS[(i >>> 6) & 0x3f];    dest[destlen - 2]=left == 2 ? (byte)CHARS[i & 0x3f] : (byte)'=';    dest[destlen - 1]='=';  }  return dest;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void APIChecks(String url,String username,String password){  for (  String Object : APIObjects) {    System.out.println("Hitting API Object: " + Object);    APIObject(Object,url,username,password,this.outputJSON);  }  this.outputJSON.closeFinalObject();  this.outputJSON.closeJSON();}  }
class C{  public boolean removeFirst(K obj){  Entry<K> x=head;  if (x == null || x.obj != obj) {    return false;  }  if (head == tail) {    tail=x.next;  }  head=x.next;  return true;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static Match maskL4AndUp(Match m){  Match.Builder mb=m.createBuilder();  Iterator<MatchField<?>> itr=m.getMatchFields().iterator();  while (itr.hasNext()) {    MatchField mf=itr.next();    if (mf.equals(MatchField.IN_PORT) || mf.equals(MatchField.ETH_TYPE) || mf.equals(MatchField.ETH_SRC)|| mf.equals(MatchField.ETH_DST)|| mf.equals(MatchField.IPV4_SRC)|| mf.equals(MatchField.IPV4_DST)|| mf.equals(MatchField.IP_PROTO)) {      if (m.isExact(mf)) {        mb.setExact(mf,m.get(mf));      } else       if (m.isPartiallyMasked(mf)) {        mb.setMasked(mf,m.getMasked(mf));      } else {      }    }  }  return mb.build();}  }
class C{  public static String buildSortClause(AbstractSqlPagingQueryProvider provider){  return buildSortClause(provider.getSortKeys());}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/start") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList startContinuousCopies(@PathParam("id") URI id,FileReplicationParam param) throws ControllerException {  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  return performFileProtectionAction(param,id,ProtectionOp.START.getRestOp());}  }
class C{  public void testGetScale() throws SQLException {  try {    int scale=3;    String createTable="create table DecimalNumbers ( valueDouble DOUBLE," + "valueFloat FLOAT , scaleTest NUMERIC(10," + scale + ")  );";    String insert="insert into DecimalNumbers values (1.5, 20.55, 30.666);";    String select="select * from DecimalNumbers;";    Statement st=conn.createStatement();    st.executeUpdate(createTable);    st.executeUpdate(insert);    rs=st.executeQuery(select);    ResultSetMetaData rsmd2=rs.getMetaData();    assertNotNull(rsmd2);    assertEquals(scale,rsmd2.getScale(3));    assertTrue(rsmd2.getScale(1) > 0);    assertTrue(rsmd2.getScale(2) > 0);    try {      rsmd.getScale(0);      fail("SQLException is not thrown");    } catch (    SQLException e) {    }    try {      rsmd.getScale(5);      fail("SQLException is not thrown");    } catch (    SQLException e) {    }    try {      conn.close();      rsmd.getScale(1);      fail("Exception expected");    } catch (    SQLException e) {    }  }  finally {    st.cancel();  }}  }
class C{  @Override public void addTrait(String guid,String traitInstanceDefinition) throws AtlasException {  guid=ParamChecker.notEmpty(guid,"entity id");  traitInstanceDefinition=ParamChecker.notEmpty(traitInstanceDefinition,"trait instance definition");  ITypedStruct traitInstance=deserializeTraitInstance(traitInstanceDefinition);  addTrait(guid,traitInstance);}  }
class C{  public SequencedEvent(AWTEvent nested){  super(nested.getSource(),ID);  this.nested=nested;  SunToolkit.setSystemGenerated(nested);synchronized (SequencedEvent.class) {    list.add(this);  }}  }
class C{  public DensityLayerPlot(Plot p,int a,double[][] quantiles){  super("Density of " + p.name,p);  if (quantiles != null && quantiles.length > 0)   PArray.checkRowDimension(quantiles,p.getData().length);  Q=quantiles;  axis=a;}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.SERVICE_REF;}  }
class C{  public RotateStrategyByTimeOfDay(){  this(0);}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public void rollback() throws RepositoryException {  connection.rollback();}  }
class C{  public StandardCategoryURLGenerator(){  super();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.VARIABLE_ENVIRONMENT_ELEMENT;}  }
class C{  public void add(ClassDefItem clazz){  Type type;  try {    type=clazz.getThisClass().getClassType();  } catch (  NullPointerException ex) {    throw new NullPointerException("clazz == null");  }  throwIfPrepared();  if (classDefs.get(type) != null) {    throw new IllegalArgumentException("already added: " + type);  }  classDefs.put(type,clazz);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_Commission_ID"))     p_C_Commission_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  p_C_CommissionTo_ID=getRecord_ID();}  }
class C{  protected void sampledAt(float simpleTime,float simpleDur,int repeatIteration){  if (value == null) {    value=to;    markDirty();  }}  }
class C{  public static byte[] replace(byte[] originalBytes,int offset,int length,byte[] replaceBytes){  byte[] newBytes=new byte[originalBytes.length + (replaceBytes.length - length)];  System.arraycopy(originalBytes,0,newBytes,0,offset);  System.arraycopy(replaceBytes,0,newBytes,offset,replaceBytes.length);  System.arraycopy(originalBytes,offset + length,newBytes,offset + replaceBytes.length,originalBytes.length - offset - length);  return newBytes;}  }
class C{  synchronized void addNamingListener(String nm,int scope,NamingListener l) throws NamingException {  if (l instanceof ObjectChangeListener || l instanceof NamespaceChangeListener) {    NotifierArgs args=new NotifierArgs(nm,scope,l);    NamingEventNotifier notifier=notifiers.get(args);    if (notifier == null) {      notifier=new NamingEventNotifier(this,ctx,args,l);      notifiers.put(args,notifier);    } else {      notifier.addNamingListener(l);    }  }  if (l instanceof UnsolicitedNotificationListener) {    if (unsolicited == null) {      unsolicited=new Vector<>(3);    }    unsolicited.addElement((UnsolicitedNotificationListener)l);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  @Override protected boolean useTeleportScroll(final Player player){  final String dest=getInfoString();  if (dest == null) {    player.sendPrivateText("This invitation has not been filled in.");    return false;  }  final String[] info=dest.split(",");  if (info.length < 2) {    player.sendPrivateText("This scroll is so old that it lost its magic.");    return false;  }  if (info[0].equals("marriage")) {    return handleTeleportToChurch(player,info[1]);  } else   if (info[0].equals("honeymoon")) {    return handleTeleportToHotel(player,info[1]);  } else {    player.sendPrivateText("Something seems to be wrong with this invitation scroll");    return false;  }}  }
class C{  public Dimension preferredLayoutSize(Container target){synchronized (target.getTreeLock()) {    Dimension dim=new Dimension(0,0);    int nmembers=target.getComponentCount();    boolean firstVisibleComponent=true;    boolean useBaseline=getAlignOnBaseline();    int maxAscent=0;    int maxDescent=0;    for (int i=0; i < nmembers; i++) {      Component m=target.getComponent(i);      if (m.isVisible()) {        Dimension d=m.getPreferredSize();        dim.height=Math.max(dim.height,d.height);        if (firstVisibleComponent) {          firstVisibleComponent=false;        } else {          dim.width+=hgap;        }        dim.width+=d.width;        if (useBaseline) {          int baseline=m.getBaseline(d.width,d.height);          if (baseline >= 0) {            maxAscent=Math.max(maxAscent,baseline);            maxDescent=Math.max(maxDescent,d.height - baseline);          }        }      }    }    if (useBaseline) {      dim.height=Math.max(maxAscent + maxDescent,dim.height);    }    Insets insets=target.getInsets();    dim.width+=insets.left + insets.right + hgap * 2;    dim.height+=insets.top + insets.bottom + vgap * 2;    return dim;  }}  }
class C{  protected void ensureMBeansAreRegistered(){  MBeanUtil.ensureMBeanIsRegistered(this);  MBeanUtil.ensureMBeanIsRegistered((ManagedResource)this.defaultConfig);  MBeanUtil.ensureMBeanIsRegistered((ManagedResource)this.dsHealthConfig);}  }
class C{  void disposeImpl(){  if (previousForm != null) {    boolean clearPrevious=Display.getInstance().getCurrent() == this;    if (!clearPrevious) {      Form f=Display.getInstance().getCurrent();      while (f != null) {        if (f.previousForm == this) {          f.previousForm=previousForm;          previousForm=null;          return;        }        f=f.previousForm;      }    }    previousForm.tint=false;    if (previousForm instanceof Dialog) {      if (!((Dialog)previousForm).isDisposed()) {        Display.getInstance().setCurrent(previousForm,false);      }    } else {      Display.getInstance().setCurrent(previousForm,false);    }    if (clearPrevious) {      previousForm=null;    }  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case COUNT:  return isSetCount();}throw new IllegalStateException();}  }
class C{  public ModuleUnloadedParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_MODULE_UNLOADED);}  }
class C{  private void nextKey(int layer){  if (layer == numLayer - 1) {    index[layer]++;  }  if (index[layer] == numLeafs[layer]) {    if (numLayer != 1) {      nextTree(layer);      index[layer]=0;    }  } else {    updateKey(layer);  }}  }
class C{  private void startStatisticsCollection(){  portStatsCollector=threadPoolService.getScheduledExecutor().scheduleAtFixedRate(new PortStatsCollector(),portStatsInterval,portStatsInterval,TimeUnit.SECONDS);  tentativePortStats.clear();  log.warn("Statistics collection thread(s) started");}  }
class C{  public boolean startsWith(XMLString prefix,int toffset){  FastStringBuffer fsb=fsb();  int to=m_start + toffset;  int tlim=m_start + m_length;  int po=0;  int pc=prefix.length();  if ((toffset < 0) || (toffset > m_length - pc)) {    return false;  }  while (--pc >= 0) {    if (fsb.charAt(to) != prefix.charAt(po)) {      return false;    }    to++;    po++;  }  return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.227 -0500",hash_original_method="BCCFE0CFBD3782D8BEDE6CB5D0F9DEA3",hash_generated_method="CD9E93ECC177D9B9E4A21A91E47BA028") private void nativeError(int id,String desc,String failingUrl){  addTaint(id);  addTaint(desc.getTaint());  addTaint(failingUrl.getTaint());}  }
class C{  private void decodeAuto(Context ctx,IoSession session,IoBuffer in,ProtocolDecoderOutput out) throws CharacterCodingException, ProtocolDecoderException {  int matchCount=ctx.getMatchCount();  int oldPos=in.position();  int oldLimit=in.limit();  while (in.hasRemaining()) {    byte b=in.get();    boolean matched=false;switch (b) {case '\r':      matchCount++;    break;case '\n':  matchCount++;matched=true;break;default :matchCount=0;}if (matched) {int pos=in.position();in.limit(pos);in.position(oldPos);ctx.append(in);in.limit(oldLimit);in.position(pos);if (ctx.getOverflowPosition() == 0) {IoBuffer buf=ctx.getBuffer();buf.flip();buf.limit(buf.limit() - matchCount);try {byte[] data=new byte[buf.limit()];buf.get(data);CharsetDecoder decoder=ctx.getDecoder();CharBuffer buffer=decoder.decode(ByteBuffer.wrap(data));String str=buffer.toString();writeText(session,str,out);}  finally {buf.clear();}} else {int overflowPosition=ctx.getOverflowPosition();ctx.reset();throw new RecoverableProtocolDecoderException("Line is too long: " + overflowPosition);}oldPos=pos;matchCount=0;}}in.position(oldPos);ctx.append(in);ctx.setMatchCount(matchCount);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static List<String> maxNoNodes(List<TableBlockInfo> blockList){  boolean useIndex=true;  Integer maxOccurence=0;  String maxNode=null;  Map<String,Integer> nodeAndOccurenceMapping=new TreeMap<>();  for (  TableBlockInfo block : blockList) {    for (    String node : block.getLocations()) {      Integer nodeOccurence=nodeAndOccurenceMapping.get(node);      if (null == nodeOccurence) {        nodeAndOccurenceMapping.put(node,1);      } else {        nodeOccurence++;      }    }  }  Integer previousValueOccurence=null;  for (  Map.Entry<String,Integer> entry : nodeAndOccurenceMapping.entrySet()) {    if (entry.getValue() > maxOccurence) {      maxOccurence=entry.getValue();      maxNode=entry.getKey();    }    if (null == previousValueOccurence) {      previousValueOccurence=entry.getValue();    } else {      if (previousValueOccurence != entry.getValue()) {        useIndex=false;      }    }  }  if (useIndex) {    return new ArrayList<>(nodeAndOccurenceMapping.keySet());  }  List<String> node=new ArrayList<>(1);  node.add(maxNode);  return node;}  }
class C{  private boolean solutionGoodEnough(){  if (generation > maxGeneration) {    return true;  } else {    return false;  }}  }
class C{  @Override public void handleRequestBody(SolrQueryRequest req,SolrQueryResponse rsp) throws ParseException, IOException, SyntaxError {  String deletionQuery=getDeletionQuery();  LOGGER.info("Handle deletion request for query {}",deletionQuery);  if (olderDocumentsExists(deletionQuery,req,rsp)) {    UpdateRequestProcessor processor=getProcessor(req,rsp);    deleteOldDocuments(deletionQuery,processor,req);    commitDeletions(processor,req);  }}  }
class C{  public void ifZCmp(final int mode,final Label label){  mv.visitJumpInsn(mode,label);}  }
class C{  public BitemporalConditionBuilder ttFrom(Object ttFrom){  this.ttFrom=ttFrom;  return this;}  }
class C{  public WFPanel(){  try {    jbInit();  } catch (  Exception e) {    log.log(Level.SEVERE,"WFPanel",e);  }  m_WindowNo=SessionManager.getAppDesktop().registerWindow(this);}  }
class C{  public synchronized StringBuffer insert(int index,char[] chars,int start,int length){  insert0(index,chars,start,length);  return this;}  }
class C{  @Override public boolean equals(Object c){  return c instanceof SipCall && ((SipCall)c).mCallID.contentEquals((mCallID));}  }
class C{  private void checkNotStarted(){  if (isStarted()) {    throw new IllegalStateException("The process has been already started");  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public TransactionOutput(NetworkParameters params,@Nullable Transaction parent,byte[] payload,int offset) throws ProtocolException {  super(params,payload,offset);  setParent(parent);  availableForSpending=true;}  }
class C{  protected IdThread[] startWorkers(AbstractChecker checker,int checkIndex){  for (int i=0; i < this.workers.length; i++) {    this.workers[i].start();  }  return this.workers;}  }
class C{  private String addColon(String wwn){  StringBuffer buf=new StringBuffer();  char[] charArray=wwn.toCharArray();  int count=0;  for (  char c : charArray) {    if (count != 0 && count % 2 == 0) {      buf.append(CinderConstants.COLON);    }    buf.append(c);    count++;  }  return buf.toString().toUpperCase();}  }
class C{  public void decrement(){  mCount--;  if (mCount == 0 && !mLastDecRunnables.isEmpty()) {    int numRunnables=mLastDecRunnables.size();    for (int i=0; i < numRunnables; i++) {      mLastDecRunnables.get(i).run();    }  } else   if (mCount < 0) {    if (mErrorRunnable != null) {      mErrorRunnable.run();    } else {      new Throwable("Invalid ref count").printStackTrace();    }  }}  }
class C{  protected static int adjustForAlignment(int cx,final PdfDecoderInt decode_pdf){  if (decode_pdf.getPageAlignment() == Display.DISPLAY_CENTERED) {    final int width=decode_pdf.getPaneBounds()[0];    int pdfWidth=decode_pdf.getPDFWidth();    if (decode_pdf.getDisplayView() != Display.SINGLE_PAGE) {      pdfWidth=decode_pdf.getMaxSizeWH()[0];    }    if (width > pdfWidth) {      cx-=((width - pdfWidth) / (2));    }  }  return cx;}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  public OpenOdorWorldAction(Workspace workspace){  super("Odor World",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("SwissIcon.png"));}  }
class C{  @SuppressWarnings("rawtypes") public void writePv(ProcessVar pv,int recursiveDepth,boolean completeDoc){  Object currKey;  Object currVal;  if (completeDoc || !documentStarted) {    startDocument();  }  try {    AttributesImpl attrs=new AttributesImpl();    attrs.addAttribute("",ATTR_TYPE,ATTR_TYPE,"CDATA",pv.getClass().getName());    attrs.addAttribute("",ATTR_KEY,ATTR_KEY,"CDATA",String.valueOf(pv.getKeyValue()));    handler.startElement("",TAG_PROCESSVAR,TAG_PROCESSVAR,attrs);    if (recursiveDepth > 0) {      Iterator it=pv.keySet().iterator();      while (it.hasNext()) {        currKey=it.next();        currVal=pv.get(currKey);        attrs.clear();        attrs.addAttribute("",ATTR_NAME,ATTR_NAME,"CDADTA",currKey.toString());        handler.startElement("",TAG_PVATTRIBUTE,TAG_PVATTRIBUTE,attrs);        if (currVal != null) {          if (currVal instanceof ProcessVar) {            writePv((ProcessVar)currVal,recursiveDepth - 1,false);          } else {            String currStr=currVal.toString();            handler.characters(currStr.toCharArray(),0,currStr.length());          }        }        handler.endElement("",TAG_PVATTRIBUTE,TAG_PVATTRIBUTE);      }    }    handler.endElement("",TAG_PROCESSVAR,TAG_PROCESSVAR);  } catch (  Throwable e) {    e.printStackTrace();  }  if (completeDoc) {    endDocument();  }}  }
class C{  public Address newAddress(String label) throws APIException, IOException {  Map<String,String> params=buildBasicRequest();  if (label != null) {    params.put("label",label);  }  String response=HttpClient.getInstance().post(String.format("merchant/%s/new_address",identifier),params);  JsonObject topElem=parseResponse(response);  return new Address(0L,topElem.get("address").getAsString(),topElem.has("label") && !topElem.get("label").isJsonNull() ? topElem.get("label").getAsString() : null,0L);}  }
class C{  private int calculateTop(View child,boolean duringLayout){  int myHeight=duringLayout ? getMeasuredHeight() : getHeight();  int childHeight=duringLayout ? child.getMeasuredHeight() : child.getHeight();  int childTop=0;switch (mGravity) {case Gravity.TOP:    childTop=mSpinnerPadding.top;  break;case Gravity.CENTER_VERTICAL:int availableSpace=myHeight - mSpinnerPadding.bottom - mSpinnerPadding.top- childHeight;childTop=mSpinnerPadding.top + (availableSpace / 2);break;case Gravity.BOTTOM:childTop=myHeight - mSpinnerPadding.bottom - childHeight;break;}return childTop;}  }
class C{  public static String strRepeat(String input,int multiplier){  StringBuffer sb=new StringBuffer("");  if (isNull(input)) {    input=" ";  }  for (int i=0; i < multiplier; i++) {    sb.append(input);  }  return sb.toString();}  }
class C{  public CertificateParsingException(){  super();}  }
class C{  public DevelCommandRegister(final Compiler compiler){  this.compiler=compiler;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/discover") @CheckPermission(roles={Role.TENANT_ADMIN}) public TaskResourceRep discoverHost(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,Host.class,"id");  Host host=queryObject(Host.class,id,true);  return doDiscoverHost(host);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String[] roles=getStringList(stack);  Show s=getShow(stack);  if (s == null)   return "";  String rv="";  for (int i=0; i < roles.length; i++) {    String str=s.getPeopleCharacterString(Show.getRoleForString(roles[i]));    if (str.length() > 0) {      if (rv.length() > 0)       rv+=", ";      rv+=str;    }  }  return rv;}  }
class C{  public void start(){  super.start();  createGrids();  for (int x=0; x < bugCount; x++) {    bugs[x]=new HeatBug(random.nextDouble() * (maxIdealTemp - minIdealTemp) + minIdealTemp,random.nextDouble() * (maxOutputHeat - minOutputHeat) + minOutputHeat,randomMovementProbability);    buggrid.setObjectLocation(bugs[x],random.nextInt(gridWidth),random.nextInt(gridHeight));    schedule.scheduleRepeating(bugs[x]);  }  if (HeatBugs.availableProcessors() > 3) {    diffuser=new ThreadedDiffuser(3);    schedule.scheduleRepeating(Schedule.EPOCH,1,diffuser,1);  } else   if (HeatBugs.availableProcessors() >= 2) {    diffuser=new ThreadedDiffuser(2);    schedule.scheduleRepeating(Schedule.EPOCH,1,diffuser,1);  } else {    schedule.scheduleRepeating(Schedule.EPOCH,1,new Diffuser(),1);  }}  }
class C{  public LightTableAction(String s){  super(s);  if (lightManager == null) {    setEnabled(false);  }}  }
class C{  private static void reflectionAppend(final Object lhs,final Object rhs,final Class<?> clazz,final EqualsBuilder builder,final boolean useTransients,final String[] excludeFields){  if (isRegistered(lhs,rhs)) {    return;  }  try {    register(lhs,rhs);    final Field[] fields=clazz.getDeclaredFields();    AccessibleObject.setAccessible(fields,true);    for (int i=0; i < fields.length && builder.isEquals; i++) {      final Field f=fields[i];      if (!ArrayUtils.contains(excludeFields,f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {        try {          builder.append(f.get(lhs),f.get(rhs));        } catch (        final IllegalAccessException e) {          throw new InternalError("Unexpected IllegalAccessException");        }      }    }  }  finally {    unregister(lhs,rhs);  }}  }
class C{  public static OneCameraOpener provideOneCameraOpener(OneCameraFeatureConfig featureConfig,Context context,ActiveCameraDeviceTracker activeCameraDeviceTracker,DisplayMetrics displayMetrics) throws OneCameraException {  Optional<OneCameraOpener> manager=Camera2OneCameraOpenerImpl.create(featureConfig,context,activeCameraDeviceTracker,displayMetrics);  if (!manager.isPresent()) {    manager=LegacyOneCameraOpenerImpl.create();  }  if (!manager.isPresent()) {    throw new OneCameraException("No camera manager is available.");  }  return manager.get();}  }
class C{  public int maxCacheEntrySizeBytes(){  return maxCacheEntrySizeBytes;}  }
class C{  protected void changeTipoExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  setReturnActionFordward(request,mapping.findForward("changeTipo"));}  }
class C{  public final void testWordNet() throws EdisonException {  System.out.println("\tTesting wordNet");  WordNetManager.loadConfigAsClasspathResource(true);  for (  TextAnnotation ta : tas) {    runTest(ta,WordFeatureExtractorFactory.getWordNetFeatureExtractor(WordNetFeatureClass.existsEntry,WordNetFeatureClass.synsetsFirstSense,WordNetFeatureClass.lexicographerFileNamesAllSenses));  }}  }
class C{  public void close(){  while (subChannel.size() > 0) {    subs.addSample(subChannel.poll());  }  while (pubChannel.size() > 0) {    pubs.addSample(pubChannel.poll());  }  if (subs.hasSamples()) {    start=subs.start;    end=subs.end;  } else {    start=pubs.start;    end=pubs.end;  }  end=Math.min(end,subs.end);  end=Math.min(end,pubs.end);  msgBytes=pubs.msgBytes + subs.msgBytes;  ioBytes=pubs.ioBytes + subs.ioBytes;  msgCnt=pubs.msgCnt + subs.msgCnt;  jobMsgCnt=pubs.jobMsgCnt + subs.jobMsgCnt;}  }
class C{  @Override public boolean isGroupingUsed(){  return ndf.isGroupingUsed();}  }
class C{  @Override @Inline public ObjectReference traceObject(ObjectReference object,boolean root){  if (!root)   VM.assertions.fail("SanityRootTraceLocal.traceObject called for non-root object.");  if (!object.isNull()) {    values.push(object);  }  return object;}  }
class C{  @Override public synchronized boolean add(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;  return true;}  }
class C{  protected URL buildURL() throws MalformedURLException {  if ((protocol != null) && (host != null)) {    String file="";    if (path != null)     file=path;    if (port == -1)     return new URL(protocol,host,file);    return new URL(protocol,host,port,file);  }  return new URL(toString());}  }
class C{  public void testCreateDeployerWhenNoDeployerRegistered(){  try {    this.factory.createDeployer(new InstalledLocalContainerStub());    fail("Expected ContainerException because there's no registered deployer");  } catch (  ContainerException expected) {    assertEquals("There's no registered deployer matching your container's type of " + "[installed]",expected.getMessage());  }}  }
class C{  public static synchronized CoderResult malformedForLength(int length) throws IllegalArgumentException {  if (length > 0) {    Integer key=Integer.valueOf(length);synchronized (_malformedErrors) {      CoderResult r=_malformedErrors.get(key);      if (r == null) {        r=new CoderResult(TYPE_MALFORMED_INPUT,length);        _malformedErrors.put(key,r);      }      return r;    }  }  throw new IllegalArgumentException("length <= 0: " + length);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasDaoUserRecUb[");  buffer.append("m_pwd = ").append(m_pwd);  buffer.append(", m_pwdMbc = ").append(m_pwdMbc);  buffer.append(", m_pwdLastUpdts = ").append(m_pwdLastUpdts);  buffer.append("]");  return buffer.toString();}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public void addOnTransactionBroadcastListener(Executor executor,OnTransactionBroadcastListener listener){  onTransactionEventListeners.add(new ListenerRegistration<OnTransactionBroadcastListener>(listener,executor));}  }
class C{  @Override public String toString(){  return m_object.toString();}  }
class C{  public static void printWarning(int errorCode,String[] parameters){  recorder.record(errorCode,(Object[])parameters);  DebugPrinter.print("entering printWarning(int, String[]) with errorCode " + errorCode);  if (TLCGlobals.warn) {    String message=getMessage(WARNING,errorCode,parameters);    if (instance.warningHistory.put(message) == null) {      ToolIO.out.println(message);    }  }  DebugPrinter.print("leaving printWarning(int, String[])");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void waitForStepCompleted(String stepId) throws InterruptedException, InstallationNotStartedException {  InstallArtifactStepInfo info=installations.get(stepId);  if (info != null) {synchronized (info) {      while (info.getStatus() == InstallArtifactInfo.Status.IN_PROGRESS) {        info.wait();      }    }  } else {    throw new InstallationNotStartedException();  }}  }
class C{  private JDlgUploadProducts(java.awt.Dialog parent,boolean modal){  super(parent,modal);}  }
class C{  public IntroButtonAccessor(final IntroButton button){  if (button == null) {    throw new IllegalArgumentException("button cannot be null");  }  this.button=button;}  }
class C{  public void send(NotificationEntry entry){  if (entry.isSentToTarget(ID)) {    mCenter.send(entry);  }}  }
class C{  public Text toLowerCase(){  if (_data == null)   return Text.newComposite(_head.toLowerCase(),_tail.toLowerCase());  Text text=Text.newPrimitive(_count);  for (int i=0; i < _count; ) {    text._data[i]=Character.toLowerCase(_data[i++]);  }  return text;}  }
class C{  public static Scheduler.SchedulerResponse constructSchedulerResponse(boolean isOK){  Common.Status.Builder status=Common.Status.newBuilder();  if (isOK) {    status.setStatus(Common.StatusCode.OK);  } else {    status.setStatus(Common.StatusCode.NOTOK);  }  return Scheduler.SchedulerResponse.newBuilder().setStatus(status).build();}  }
class C{  private void emitTags(Map tags){  Iterator tagIterator=tags.keySet().iterator();  while (tagIterator.hasNext()) {    String tagName=((String)tagIterator.next()).intern();    Object o=tags.get(tagName);    if (o == null)     continue;    if (o instanceof Boolean) {      boolean b=((Boolean)o).booleanValue();      if (b) {        appendTag(tagName,"");      } else       continue;    } else     if (o instanceof List) {      List l=(List)o;      for (int i=0; i < l.size(); i++) {        String value=(String)l.get(i);        appendTag(tagName,value);      }    } else     if (o instanceof Map) {      Map m=(Map)o;      Iterator customTagIter=m.keySet().iterator();      while (customTagIter.hasNext()) {        tagName=(String)customTagIter.next();        String value=(String)m.get(tagName);        appendTag(tagName,value);      }    } else {      String value=(String)o;      appendTag(tagName,value);    }  }}  }
class C{  public static float logSum(float[] logInputs){  int leng=logInputs.length;  if (leng == 0) {    throw new IllegalArgumentException();  }  int maxIdx=0;  float max=logInputs[0];  for (int i=1; i < leng; i++) {    if (logInputs[i] > max) {      maxIdx=i;      max=logInputs[i];    }  }  boolean haveTerms=false;  double intermediate=0.0f;  float cutoff=(float)(max - SloppyMath.LOGTOLERANCE);  for (int i=0; i < leng; i++) {    if (i != maxIdx && logInputs[i] > cutoff) {      haveTerms=true;      intermediate+=Math.exp(logInputs[i] - max);    }  }  if (haveTerms) {    return max + (float)Math.log(1.0 + intermediate);  } else {    return max;  }}  }
class C{  public GF2Vector extractRightVector(int k){  if (k > length) {    throw new ArithmeticException("invalid length");  }  if (k == length) {    return new GF2Vector(this);  }  GF2Vector result=new GF2Vector(k);  int q=(length - k) >> 5;  int r=(length - k) & 0x1f;  int length=(k + 31) >> 5;  int ind=q;  if (r != 0) {    for (int i=0; i < length - 1; i++) {      result.v[i]=(v[ind++] >>> r) | (v[ind] << (32 - r));    }    result.v[length - 1]=v[ind++] >>> r;    if (ind < v.length) {      result.v[length - 1]|=v[ind] << (32 - r);    }  } else {    System.arraycopy(v,q,result.v,0,length);  }  return result;}  }
class C{  public MessageHandler(){}  }
class C{  public void testJobNotFailedOver() throws Exception {  failed.set(false);  routed.set(false);  try {    Ignite ignite1=startGrid(NODE1);    Ignite ignite2=startGrid(NODE2);    assert ignite1 != null;    assert ignite2 != null;    compute(ignite1.cluster().forPredicate(p)).withTimeout(10000).execute(JobFailTask.class.getName(),"1");  } catch (  ClusterTopologyException ignored) {    failed.set(true);  } finally {    assertTrue(failed.get());    assertFalse(routed.get());    stopGrid(NODE1);    stopGrid(NODE2);  }}  }
class C{  public Access createAccess(){  AccessImpl access=new AccessImpl();  return access;}  }
class C{  public static void exit(){  Log.logger.log(Level.SEVERE,"The current configuration is not valid. Try re-running with -h to see available options.");  System.exit(1);}  }
class C{  public BooleanConditionBuilder should(ConditionBuilder<?,?>... builders){  should.addAll(Arrays.asList(builders));  return this;}  }
class C{  public boolean findDefaultApp(){  if (mResId == 0) {    return false;  }  parsedIntent=null;  parsedValues=null;  new MyLayoutParser().parseValues();  return (parsedValues != null) && (parsedIntent != null);}  }
class C{  @Override public void updateBoolean(String columnLabel,boolean x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBoolean(" + quote(columnLabel) + ", "+ x+ ");");    }    update(columnLabel,ValueBoolean.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void readEnumerated() throws IOException {  if (tag != ASN1Constants.TAG_ENUM) {    throw expected("enumerated");  }  if (length == 0) {    throw new ASN1Exception("ASN.1 enumerated: wrong length for identifier at [" + tagOffset + "]");  }  readContent();  if (length > 1) {    int bits=buffer[contentOffset] & 0xFF;    if (buffer[contentOffset + 1] < 0) {      bits+=0x100;    }    if (bits == 0 || bits == 0x1FF) {      throw new ASN1Exception("ASN.1 enumerated: wrong content at [" + contentOffset + "]. An integer MUST be encoded in minimum number of octets");    }  }}  }
class C{  public PolicyDocument(String region,String awsAccountId,String restApiId,String stage){  this.region=region;  this.awsAccountId=awsAccountId;  this.restApiId=restApiId;  this.stage=stage;  allowStatement=Statement.getEmptyInvokeStatement("Allow");  denyStatement=Statement.getEmptyInvokeStatement("Deny");  this.statements=new ArrayList<>();}  }
class C{  public JSONObject(Object object,String names[]){  this();  Class c=object.getClass();  for (int i=0; i < names.length; i+=1) {    String name=names[i];    try {      this.putOpt(name,c.getField(name).get(object));    } catch (    Exception ignore) {    }  }}  }
class C{  public boolean equalsIgnoreCase(String anotherString){  return m_str.equalsIgnoreCase(anotherString);}  }
class C{  public ThumbnailStreamRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public Days toStandardDays(){  long days=getStandardDays();  return Days.days(FieldUtils.safeToInt(days));}  }
class C{  public static String[] toQuotedAndCommaSeparatedArray(String str) throws IOException {  LinkedList<String> values=new LinkedList<String>();  StreamTokenizer tt=new StreamTokenizer(new StringReader(str));  tt.wordChars('a','z');  tt.wordChars('A','Z');  tt.wordChars(128 + 32,255);  tt.whitespaceChars(0,' ');  tt.quoteChar('"');  tt.quoteChar('\'');  while (tt.nextToken() != StreamTokenizer.TT_EOF) {switch (tt.ttype) {case StreamTokenizer.TT_WORD:case '"':case '\'':      values.add(tt.sval);    break;}}return values.toArray(new String[values.size()]);}  }
class C{  private void updateAll(){  if (mStep == 0) {    mStep=(mMaxValue - mMinValue) / (double)DEFAULT_TOTAL_STEPS;  }  setMax(getTotalSteps());  updateValue();}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SISTER_CACHE'";  db.execSQL(sql);}  }
class C{  @Override public String toString(){  return "cudaResourceViewDesc[" + createString(",") + "]";}  }
class C{  private void printv(String msg){  if (verbose)   print(msg);}  }
class C{  @Deprecated public static Offset calculateElementClientOffset(Element element){  return calculateElementOffset(element,null,false);}  }
class C{  public void save(Session session,boolean forceSave){  Boolean isCurrentSessionPersisted;  try {    CustomRequestSession customSession=(CustomRequestSession)session;    SessionSerializationMetadata sessionSerializationMetadata=currentSessionSerializationMetadata.get();    byte[] originalSessionAttributesHash=sessionSerializationMetadata.getSessionAttributesHash();    byte[] sessionAttributesHash=null;    if (forceSave || customSession.isDirty() || (isCurrentSessionPersisted=this.currentSessionIsPersisted.get()) == null || !isCurrentSessionPersisted || !Arrays.equals(originalSessionAttributesHash,(sessionAttributesHash=serializer.getSessionAttributesHashCode(customSession)))) {      if (sessionAttributesHash == null) {        sessionAttributesHash=serializer.getSessionAttributesHashCode(customSession);      }      SessionSerializationMetadata updatedSerializationMetadata=new SessionSerializationMetadata();      updatedSerializationMetadata.setSessionAttributesHash(sessionAttributesHash);      requestSessionCacheUtils.setByteArray(customSession.getId(),serializer.serializeSessionData(customSession,updatedSerializationMetadata));      customSession.resetDirtyTracking();      currentSessionSerializationMetadata.set(updatedSerializationMetadata);      currentSessionIsPersisted.set(true);    }    log.trace("Setting expire timeout on session [" + customSession.getId() + "] to "+ (getContext().getSessionTimeout() * 60));    requestSessionCacheUtils.expire(customSession.getId(),(getContext().getSessionTimeout() * 60));  } catch (  IOException e) {    log.error("Error occured while storing the session object into redis",e);  }}  }
class C{  public static final int[] toIntArray(double z[]){  int u[]=new int[z.length];  for (int j=0; j < z.length; j++) {    u[j]=(int)z[j];  }  return u;}  }
class C{  protected EnvironmentClassLoader(ClassLoader parent,String id){  this(parent,id,false);}  }
class C{  public void buildDrawer(Activity activity,Toolbar toolbar){  mDrawer=new DrawerBuilder().withActivity(activity).withToolbar(toolbar).withDrawerItems(getDrawerItems()).withSelectedItemByPosition(getLastSelectedItemPosition()).withAccountHeader(getAccountHeader(activity)).addDrawerItems().build();}  }
class C{  public void bind(String address,ServiceRefAmp linkService){}  }
class C{  private void verifyWithSeparateSigningKey(X509Certificate cert,PublicKey prevKey,boolean signFlag,Set<X509Certificate> stackedCerts) throws CertPathValidatorException {  String msg="revocation status";  if (debug != null) {    debug.println("RevocationChecker.verifyWithSeparateSigningKey()" + " ---checking " + msg + "...");  }  if ((stackedCerts != null) && stackedCerts.contains(cert)) {    if (debug != null) {      debug.println("RevocationChecker.verifyWithSeparateSigningKey()" + " circular dependency");    }    throw new CertPathValidatorException("Could not determine revocation status",null,null,-1,BasicReason.UNDETERMINED_REVOCATION_STATUS);  }  if (!signFlag) {    buildToNewKey(cert,null,stackedCerts);  } else {    buildToNewKey(cert,prevKey,stackedCerts);  }}  }
class C{  public boolean isMenuShipments(){  Object oo=get_Value(COLUMNNAME_IsMenuShipments);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final void testDomainNameWithCharSequenceParameter(){  assertNotNull(Validators.domainName("foo"));}  }
class C{  void acc_clear(){  sign=0;  for (int i=0; i < digits.length; i++) {    digits[i]=0;  }}  }
class C{  private void clearReg(){  reg.reset();  put(MEMSIZE + memAddressStart,ESP,null);  put(MEMSIZE + memAddressStart,EBP,null);  reg.clearDirty();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void write(final byte b[],final int off,final int len) throws IOException {  if (off < 0 || off > b.length || len < 0 || off + len > b.length || off + len < 0) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  if (this.count + len > this.buf.length) {    this.encodePendingBytes(false);  }  System.arraycopy(b,off,this.buf,this.count,len);  this.count+=len;}  }
class C{  public void print(Writer out) throws IOException {  for (int i=0; i < sentence.size(); ++i) {    sentence.get(i).print(out);  }  out.write("\n");}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenee == null) {    return false;  }  if (m_listenee instanceof EventConstraints) {    if (eventName.equals("instance")) {      if (!((EventConstraints)m_listenee).eventGeneratable("incrementalClassifier")) {        return false;      }    }    if (eventName.equals("dataSet") || eventName.equals("trainingSet") || eventName.equals("testSet")) {      if (((EventConstraints)m_listenee).eventGeneratable("batchClassifier")) {        return true;      }      if (((EventConstraints)m_listenee).eventGeneratable("batchClusterer")) {        return true;      }      return false;    }  }  return true;}  }
class C{  private String badChar(int ch){  if (ch < 0)   return L.l("end of file"); else   if (ch == '\n')   return L.l("end of line"); else   return "`" + (char)ch + "'";}  }
class C{  public static Join cross(SqlTable<?> table,Criterion... criterions){  return new Join(table,JoinType.CROSS,criterions);}  }
class C{  public boolean isEdgeOnly(){  return edgeOnly;}  }
class C{  public static boolean equals(char[] array1,char[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static <T>LazyIterable<T> select(Iterable<T> iterable,Predicate<? super T> predicate){  return new SelectIterable<>(iterable,predicate);}  }
class C{  void nextImpl(){  boolean hasNext=mCurrentTrack < mPlaybackQueue.size() - 1;  if (mPlaybackQueue.size() > 1 && mShuffleMode) {    int previousTrack=mCurrentTrack;    while (previousTrack == mCurrentTrack) {      mCurrentTrack=Utils.getRandom(mPlaybackQueue.size());    }    mNativeSink.setPaused(true);    mShouldFlushBuffers=true;    requestStartPlayback();    mNotification.setHasNext(true);  } else   if (mPlaybackQueue.size() > 0 && hasNext) {    mCurrentTrack++;    mNativeSink.flushSamples();    requestStartPlayback();    hasNext=mCurrentTrack < mPlaybackQueue.size() - 1;    hasNext=hasNext || (mPlaybackQueue.size() > 0 && mRepeatMode);    mNotification.setHasNext(hasNext);  } else   if (mRepeatMode && mPlaybackQueue.size() > 0) {    mCurrentTrack=0;    mNativeSink.setPaused(true);    mShouldFlushBuffers=true;    requestStartPlayback();    mNotification.setHasNext(true);  }  final AutoMixManager mixManager=AutoMixManager.getDefault();  if (mixManager.getCurrentPlayingBucket() != null) {    try {      mixManager.getCurrentPlayingBucket().notifySkip();    } catch (    EchoNestException e) {      Log.e(TAG,"Cannot notify EchoNest of skip event",e);    }  }}  }
class C{  public static boolean isValidName(String name){  if (name == null) {    return false;  }  return name.length() > 3;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public static int longCompareTo(Long firstLong,Long secondLong){  long firstVal=firstLong.longValue();  long secondVal=secondLong.longValue();  return (firstVal < secondVal ? -1 : (firstVal == secondVal ? 0 : 1));}  }
class C{  public Collection<HTMLToken> tokenizeHTML(){  List<HTMLToken> tokens=new ArrayList<HTMLToken>();  String nestedTags=nestedTagsRegex(6);  Pattern p=Pattern.compile("" + "(?s:<!(--.*?--\\s*)+>)" + "|"+ "(?s:<\\?.*?\\?>)"+ "|" + nestedTags + "",Pattern.CASE_INSENSITIVE);  Matcher m=p.matcher(text);  int lastPos=0;  while (m.find()) {    if (lastPos < m.start()) {      tokens.add(HTMLToken.text(text.substring(lastPos,m.start())));    }    tokens.add(HTMLToken.tag(text.substring(m.start(),m.end())));    lastPos=m.end();  }  if (lastPos < text.length()) {    tokens.add(HTMLToken.text(text.substring(lastPos,text.length())));  }  return tokens;}  }
class C{  public Expression makeFieldReference(Environment env,Context ctx){  Expression e=ctx.findOuterLink(env,0,localField);  return new FieldExpression(0,e,localField);}  }
class C{  public static boolean isAnnnotationDefault(int flags){  return (flags & AccAnnotationDefault) != 0;}  }
class C{  double[][] CalcTheoreticalSVValues(Variogram vario,double MaximumDisplyDistanst){  double[][] res=new double[2 * NumberOfLags + 1][2];  for (int i=0; i < res.length; i++) {    res[i][0]=i * MaximumDisplyDistanst / (2 * NumberOfLags);switch (vario.Type) {case EXPONENTIAL:      if (res[i][0] != 0) {        res[i][1]=vario.Nugget + vario.Sill * (1 - Math.exp(-res[i][0] / vario.Range));      } else {        res[i][1]=vario.Nugget;      }    break;case GAUSSIAN:  if (res[i][0] != 0) {    res[i][1]=vario.Nugget + vario.Sill * (1 - Math.exp(-3 * (Math.pow(res[i][0],2)) / (Math.pow(vario.Range,2))));  } else {    res[i][1]=vario.Nugget;  }break;case SPHERICAL:if (res[i][0] > vario.Range) {res[i][1]=vario.Nugget + vario.Sill;} else if (res[i][0] > 0 && res[i][0] <= vario.Range) {res[i][1]=vario.Nugget + vario.Sill * (1.5 * res[i][0] / vario.Range - 0.5 * Math.pow((res[i][0] / vario.Range),3));} else {res[i][1]=vario.Nugget;}break;}}return res;}  }
class C{  public boolean willFireOn(Calendar test){  return willFireOn(test,false);}  }
class C{  public JSONArray(Collection<Object> collection){  this.myArrayList=new ArrayList<Object>();  if (collection != null) {    Iterator<Object> iter=collection.iterator();    while (iter.hasNext()) {      this.myArrayList.add(JSONObject.wrap(iter.next()));    }  }}  }
class C{  public <T extends Point2D>T inverse(double x,double y,T llp){  if (llp == null) {    llp=(T)new LatLonPoint.Double();  }  x-=wx;  y=hy - y;  double rho=Math.sqrt(x * x + y * y);  if (rho == 0) {    Debug.message("proj","Orthographic.inverse: center!");    llp.setLocation(Math.toDegrees(centerX),Math.toDegrees(centerY));    return llp;  }  double sinC=rho / scaled_radius;  double cosC=Math.sqrt(1 - sinC * sinC);  double lat=Math.asin(cosC * sinCtrLat + (y * sinC * (cosCtrLat / rho)));  double lon;  if (centerY == NORTH_POLE) {    lon=centerX + Math.atan2(x,-y);  } else   if (centerY == SOUTH_POLE) {    lon=centerX + Math.atan2(x,y);  } else {    lon=centerX + Math.atan2((x * sinC),(rho * cosCtrLat * cosC - y * sinCtrLat * sinC));  }  if (Double.isNaN(lat) || Double.isNaN(lon)) {    lat=centerY;    lon=centerX;  }  llp.setLocation(Math.toDegrees(wrapLongitude(lon)),Math.toDegrees(normalizeLatitude(lat)));  return llp;}  }
class C{  public void eventSetReceived(EventSet set){  println("Got event set");}  }
class C{  @Nullable public UUID subjectId(){  return subjId;}  }
class C{  public int compare(Integer node1,Integer node2){  double dist1=distancesFromStart.get(node1);  double dist2=distancesFromStart.get(node2);  if (dist1 > dist2) {    return 1;  } else   if (dist1 < dist2) {    return -1;  } else {    return node1.compareTo(node2);  }}  }
class C{  private void addStaticPerms(PermissionCollection perms,PermissionCollection statics){  if (statics != null) {synchronized (statics) {      Enumeration<Permission> e=statics.elements();      while (e.hasMoreElements()) {        perms.add(e.nextElement());      }    }  }}  }
class C{  private void writeExperiecedAndCausingPersonDelay(){  SortedMap<Double,Map<Id<Person>,Double>> timeBin2AffectedPerson2Delay=getExperiencedPersonDelay(1);  SortedMap<Double,Map<Id<Person>,Double>> timeBin2CausingPerson2Delay=getCausingPersonDelay(1);  if (timeBin2AffectedPerson2Delay.size() != 1)   throw new RuntimeException("Delay is not summed up for all time bins.");  Map<Id<Person>,Double> affectedperson2Delay=timeBin2AffectedPerson2Delay.get(simulationEndTime);  Map<Id<Person>,Double> causedPerson2Delay=timeBin2CausingPerson2Delay.get(simulationEndTime);  BufferedWriter writer=IOUtils.getBufferedWriter(runDir + "/analysis/affectedAndCausedDelay_" + congestionImpl+ ".txt");  try {    writer.write("personId\tuserGroup\taffectedDelayInHr\tcausedDelayInHr\n");    for (    Id<Person> id : causedPerson2Delay.keySet()) {      writer.write(id + "\t" + pf.getMunichUserGroupFromPersonId(id)+ "\t"+ affectedperson2Delay.get(id) / 3600 + "\t" + causedPerson2Delay.get(id) / 3600 + "\n");    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not written in file. Reason: " + e);  }}  }
class C{  public Fgs(Score score){  if (score == null)   throw new NullPointerException();  setScore(score);  this.graph=new EdgeListGraphSingleConnections(getVariables());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public GamaCoordinateSequence create(final int size,final int dimension){  return new GamaCoordinateSequence(size);}  }
class C{  public static SpannableString typeface(Context context,int strResId,TypefaceCollection collection,int style){  return typeface(context.getString(strResId),collection,style);}  }
class C{  public static String hexLong(long val){  return new SB().appendHex(val).toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @AfterMethod(alwaysRun=true) public void recoveryScenario(ITestResult rs) throws Throwable {  if (rs.getStatus() == 2) {    Reporter.log("Failed Test: " + rs.getTestName());  }}  }
class C{  private void createMenu(){  JMenu mFile=AEnv.getMenu("File");  menuBar.add(mFile);  AEnv.addMenuItem("PrintScreen",null,KeyStroke.getKeyStroke(KeyEvent.VK_PRINTSCREEN,0),mFile,this);  AEnv.addMenuItem("ScreenShot",null,KeyStroke.getKeyStroke(KeyEvent.VK_PRINTSCREEN,KeyEvent.SHIFT_MASK),mFile,this);  mFile.addSeparator();  AEnv.addMenuItem("Logout",null,KeyStroke.getKeyStroke(KeyEvent.VK_L,Event.SHIFT_MASK + Event.ALT_MASK),mFile,this);  AEnv.addMenuItem("Exit",null,KeyStroke.getKeyStroke(KeyEvent.VK_X,Event.SHIFT_MASK + Event.ALT_MASK),mFile,this);  JMenu mView=AEnv.getMenu("View");  menuBar.add(mView);  if (MRole.getDefault().isAllow_Info_Product()) {    AEnv.addMenuItem("InfoProduct",null,KeyStroke.getKeyStroke(KeyEvent.VK_I,Event.ALT_MASK),mView,this);  }  if (MRole.getDefault().isAllow_Info_BPartner()) {    AEnv.addMenuItem("InfoBPartner",null,KeyStroke.getKeyStroke(KeyEvent.VK_I,Event.ALT_MASK + Event.CTRL_MASK),mView,this);  }  if (MRole.getDefault().isShowAcct() && MRole.getDefault().isAllow_Info_Account()) {    AEnv.addMenuItem("InfoAccount",null,KeyStroke.getKeyStroke(KeyEvent.VK_I,Event.ALT_MASK + Event.CTRL_MASK),mView,this);  }  if (MRole.getDefault().isAllow_Info_Schedule()) {    AEnv.addMenuItem("InfoSchedule",null,null,mView,this);  }  if (MRole.getDefault().isAllow_Info_MRP()) {    AEnv.addMenuItem("InfoMRP","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_CRP()) {    AEnv.addMenuItem("InfoCRP","Info",null,mView,this);  }  mView.addSeparator();  if (MRole.getDefault().isAllow_Info_Order()) {    AEnv.addMenuItem("InfoOrder","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_Invoice()) {    AEnv.addMenuItem("InfoInvoice","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_InOut()) {    AEnv.addMenuItem("InfoInOut","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_Payment()) {    AEnv.addMenuItem("InfoPayment","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_CashJournal()) {    AEnv.addMenuItem("InfoCashLine","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_Resource()) {    AEnv.addMenuItem("InfoAssignment","Info",null,mView,this);  }  if (MRole.getDefault().isAllow_Info_Asset()) {    AEnv.addMenuItem("InfoAsset","Info",null,mView,this);  }  JMenu mTools=AEnv.getMenu("Tools");  menuBar.add(mTools);  AEnv.addMenuItem("Calculator",null,null,mTools,this);  AEnv.addMenuItem("Calendar",null,null,mTools,this);  AEnv.addMenuItem("Editor",null,null,mTools,this);  MUser user=MUser.get(Env.getCtx());  if (user.isAdministrator())   AEnv.addMenuItem("Script",null,null,mTools,this);  if (AEnv.isWorkflowProcess())   AEnv.addMenuItem("WorkFlow",null,null,mTools,this);  if (MRole.getDefault().isShowPreference()) {    mTools.addSeparator();    AEnv.addMenuItem("Preference",null,null,mTools,this);  }  m_WindowMenu=new WindowMenu(windowManager,this);  menuBar.add(m_WindowMenu);  KeyStroke ks=KeyStroke.getKeyStroke(KeyEvent.VK_W,KeyEvent.CTRL_MASK);  this.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(ks,"ShowAllWindow");  AppsAction action=new AppsAction("ShowAllWindow",ks,false);  this.getRootPane().getActionMap().put("ShowAllWindow",action);  action.setDelegate(this);  JMenu mHelp=AEnv.getMenu("Help");  menuBar.add(mHelp);  AEnv.addMenuItem("Online",null,null,mHelp,this);  AEnv.addMenuItem("EMailSupport",null,null,mHelp,this);  AEnv.addMenuItem("About",null,null,mHelp,this);}  }
class C{  public boolean removeChildEdge(int edge){  return removeChild(getTargetNode(edge));}  }
class C{  public void close(boolean pCloseUnderlying) throws IOException {  if (closed) {    return;  }  if (pCloseUnderlying) {    closed=true;    input.close();  } else {    for (; ; ) {      int av=available();      if (av == 0) {        av=makeAvailable();        if (av == 0) {          break;        }      }      long skip=skip(av);      if (skip != av) {        if (log.isDebugEnabled()) {          log.debug(skip + " bytes been skipped.");        }      }    }  }  closed=true;}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws SAXException {  m_handler.startDTD(name,publicId,systemId);}  }
